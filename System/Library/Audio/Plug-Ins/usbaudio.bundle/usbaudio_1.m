void *sub_100084AE8(void *result, int64_t a2)
{
  int64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;

  if (!result) {
    goto LABEL_10;
  }
  v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v3 = result;
  result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C9B4(0, a2, 0);
    v4 = 0;
    result = _swiftEmptyArrayStorage;
    v5 = _swiftEmptyArrayStorage[2];
    v6 = 5 * v5;
    do
    {
      v7 = *(_WORD *)((char *)v3 + v4);
      v8 = *((unsigned char *)v3 + v4 + 2);
      v9 = *(_WORD *)((char *)v3 + v4 + 3);
      v13 = result;
      v10 = result[3];
      v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        sub_10007C9B4(v10 > 1, v5 + 1, 1);
        result = v13;
      }
      result[2] = v11;
      v12 = (char *)result + v6 + v4;
      *((_WORD *)v12 + 16) = v7;
      v12[34] = v8;
      *(_WORD *)(v12 + 35) = v9;
      v4 += 5;
      v5 = v11;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_100084BF0(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v3 = result;
  result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C994(0, a2, 0);
    result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 3 * v4;
    v6 = (char *)v3 + 2;
    do
    {
      __int16 v7 = *((_WORD *)v6 - 1);
      char v8 = *v6;
      v12 = result;
      unint64_t v9 = result[3];
      unint64_t v10 = v4 + 1;
      if (v4 >= v9 >> 1)
      {
        sub_10007C994(v9 > 1, v4 + 1, 1);
        result = v12;
      }
      v6 += 3;
      result[2] = v10;
      v11 = (char *)result + v5;
      *((_WORD *)v11 + 16) = v7;
      v11[34] = v8;
      v5 += 3;
      unint64_t v4 = v10;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_100084CE4(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v3 = result;
  result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007CEB4(0, a2, 0);
    uint64_t v4 = 0;
    result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 12 * v5;
    do
    {
      uint64_t v7 = *(void *)((char *)v3 + v4);
      __int16 v8 = *(_WORD *)((char *)v3 + v4 + 8);
      __int16 v9 = *(_WORD *)((char *)v3 + v4 + 10);
      v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        sub_10007CEB4(v10 > 1, v5 + 1, 1);
        result = v13;
      }
      result[2] = v11;
      v12 = (char *)result + v6 + v4;
      *((void *)v12 + 4) = v7;
      *((_WORD *)v12 + 20) = v8;
      *((_WORD *)v12 + 21) = v9;
      v4 += 12;
      unint64_t v5 = v11;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_100084DF8(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0);
    result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 4 * v6;
    __int16 v8 = (__int16 *)v4 + 1;
    do
    {
      __int16 v9 = *(v8 - 1);
      __int16 v10 = *v8;
      v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v6 + 1;
      if (v6 >= v11 >> 1)
      {
        a3(v11 > 1, v6 + 1, 1);
        result = v14;
      }
      v8 += 2;
      result[2] = v12;
      v13 = (char *)result + v7;
      *((_WORD *)v13 + 16) = v9;
      *((_WORD *)v13 + 17) = v10;
      v7 += 4;
      unint64_t v6 = v12;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_100084EF8(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v3 = result;
  result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007CE6C(0, a2, 0);
    uint64_t v4 = 0;
    result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 14 * v5;
    do
    {
      uint64_t v7 = *(void *)((char *)v3 + v4);
      __int16 v8 = *(_WORD *)((char *)v3 + v4 + 8);
      __int16 v9 = *(_WORD *)((char *)v3 + v4 + 10);
      __int16 v10 = *(_WORD *)((char *)v3 + v4 + 12);
      v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v5 + 1;
      if (v5 >= v11 >> 1)
      {
        sub_10007CE6C(v11 > 1, v5 + 1, 1);
        result = v14;
      }
      result[2] = v12;
      v13 = (char *)result + v6 + v4;
      *((void *)v13 + 4) = v7;
      *((_WORD *)v13 + 20) = v8;
      *((_WORD *)v13 + 21) = v9;
      *((_WORD *)v13 + 22) = v10;
      v4 += 14;
      unint64_t v5 = v12;
      --v2;
    }
    while (v2);
  }
  return result;
}

long long *sub_100085010(long long *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v3 = result;
  result = (long long *)_swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007CE4C(0, a2, 0);
    result = (long long *)_swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    do
    {
      long long v5 = *v3;
      __int16 v8 = result;
      unint64_t v6 = *((void *)result + 3);
      if (v4 >= v6 >> 1)
      {
        long long v7 = *v3;
        sub_10007CE4C(v6 > 1, v4 + 1, 1);
        long long v5 = v7;
        result = v8;
      }
      *((void *)result + 2) = v4 + 1;
      result[v4 + 2] = v5;
      ++v3;
      ++v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_1000850F0(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v3 = result;
  result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007CE2C(0, a2, 0);
    result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 6 * v4;
    unint64_t v6 = (__int16 *)v3 + 2;
    do
    {
      __int16 v7 = *(v6 - 2);
      __int16 v8 = *(v6 - 1);
      __int16 v9 = *v6;
      v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v4 + 1;
      if (v4 >= v10 >> 1)
      {
        sub_10007CE2C(v10 > 1, v4 + 1, 1);
        result = v13;
      }
      v6 += 3;
      result[2] = v11;
      unint64_t v12 = (_WORD *)((char *)result + v5);
      v12[16] = v7;
      v12[17] = v8;
      v12[18] = v9;
      v5 += 6;
      unint64_t v4 = v11;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_1000851F0(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v3 = result;
  result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007CE0C(0, a2, 0);
    result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 4 * v4;
    unint64_t v6 = (__int16 *)v3 + 1;
    do
    {
      __int16 v7 = *(v6 - 1);
      __int16 v8 = *v6;
      unint64_t v12 = result;
      unint64_t v9 = result[3];
      unint64_t v10 = v4 + 1;
      if (v4 >= v9 >> 1)
      {
        sub_10007CE0C(v9 > 1, v4 + 1, 1);
        result = v12;
      }
      v6 += 2;
      result[2] = v10;
      unint64_t v11 = (char *)result + v5;
      *((_WORD *)v11 + 16) = v7;
      *((_WORD *)v11 + 17) = v8;
      v5 += 4;
      unint64_t v4 = v10;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1000852E4(unsigned __int8 a1)
{
  switch(a1)
  {
    case 0u:
      id v2 = [objc_allocWithZone((Class)NSMutableData) initWithLength:1];
      goto LABEL_8;
    case 1u:
      id v2 = [objc_allocWithZone((Class)NSMutableData) initWithLength:2];
      goto LABEL_8;
    case 2u:
      id v2 = [objc_allocWithZone((Class)NSMutableData) initWithLength:4];
      goto LABEL_8;
    case 3u:
      id v2 = [objc_allocWithZone((Class)NSMutableData) initWithLength:3];
      goto LABEL_8;
    case 6u:
      id v2 = [objc_allocWithZone((Class)NSMutableData) initWithLength:6];
LABEL_8:
      if (v2) {
        return a1;
      }
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v4 = 29;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0xE000000000000000;
      *(void *)(v4 + 24) = 0xD000000000000012;
      *(void *)(v4 + 32) = 0x80000001000E47D0;
      *(void *)(v4 + 40) = 0xD00000000000001ELL;
      *(void *)(v4 + 48) = 0x80000001000E4750;
      uint64_t v5 = 245;
LABEL_11:
      *(void *)(v4 + 56) = v5;
      return swift_willThrow();
    default:
      _StringGuts.grow(_:)(20);
      v3._object = (void *)0x80000001000E4770;
      v3._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v3);
      _print_unlocked<A, B>(_:_:)();
      sub_10002E81C(0, 0xE000000000000000, 0xD000000000000012, (void *)0x80000001000E47D0, 0xD00000000000001ELL, 0x80000001000E4750, 242);
      swift_bridgeObjectRelease();
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v4 = 27;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0xE000000000000000;
      *(void *)(v4 + 24) = 0xD000000000000012;
      *(void *)(v4 + 32) = 0x80000001000E47D0;
      *(void *)(v4 + 40) = 0xD00000000000001ELL;
      *(void *)(v4 + 48) = 0x80000001000E4750;
      uint64_t v5 = 243;
      goto LABEL_11;
  }
}

uint64_t sub_10008557C(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_10008561C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_100085698(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10008571C(unsigned __int8 a1, void *a2)
{
  if (a1 == 2)
  {
    uint64_t v14 = swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 1;
    uint64_t v15 = a2[3];
    uint64_t v16 = a2[4];
    sub_10001A974(a2, v15);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v16 + 16))(v36, v15, v16);
    sub_10000AC7C(&qword_100129248);
    if (swift_dynamicCast())
    {
      int v37 = v38;
      uint64_t v17 = a2[3];
      uint64_t v18 = a2[4];
      sub_10001A974(a2, v17);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v18 + 32))(v36, v17, v18);
      if (swift_dynamicCast())
      {
        int v34 = v38;
        uint64_t v19 = a2[3];
        uint64_t v20 = a2[4];
        sub_10001A974(a2, v19);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 48))(v36, v19, v20);
        if (swift_dynamicCast())
        {
          int v21 = v38;
          *(_DWORD *)(v14 + 2) = v37;
          *(_DWORD *)(v14 + 6) = v34;
          *(_DWORD *)(v14 + 10) = v21;
          [objc_allocWithZone((Class)NSMutableData) initWithBytesNoCopy:v14 length:14];
          goto LABEL_16;
        }
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v32 = 1;
        uint64_t v33 = 359;
      }
      else
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v32 = 1;
        uint64_t v33 = 358;
      }
    }
    else
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v32 = 1;
      uint64_t v33 = 357;
    }
  }
  else if (a1 == 1)
  {
    v22 = (_WORD *)swift_slowAlloc();
    _WORD *v22 = 1;
    uint64_t v23 = a2[3];
    uint64_t v24 = a2[4];
    sub_10001A974(a2, v23);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v24 + 16))(v36, v23, v24);
    sub_10000AC7C(&qword_100129248);
    if (swift_dynamicCast())
    {
      int v37 = (unsigned __int16)v38;
      uint64_t v25 = a2[3];
      uint64_t v26 = a2[4];
      sub_10001A974(a2, v25);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v26 + 32))(v36, v25, v26);
      if (swift_dynamicCast())
      {
        __int16 v35 = v38;
        uint64_t v27 = a2[3];
        uint64_t v28 = a2[4];
        sub_10001A974(a2, v27);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v28 + 48))(v36, v27, v28);
        if (swift_dynamicCast())
        {
          __int16 v29 = v38;
          v22[1] = v37;
          v22[2] = v35;
          v22[3] = v29;
          [objc_allocWithZone((Class)NSMutableData) initWithBytesNoCopy:v22 length:8];
          goto LABEL_16;
        }
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v32 = 1;
        uint64_t v33 = 343;
      }
      else
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v32 = 1;
        uint64_t v33 = 342;
      }
    }
    else
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v32 = 1;
      uint64_t v33 = 341;
    }
  }
  else if (a1)
  {
    v36[0] = 0;
    v36[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v31._countAndFlagsBits = 0xD000000000000012;
    v31._object = (void *)0x80000001000E4770;
    String.append(_:)(v31);
    LOBYTE(v38) = a1;
    _print_unlocked<A, B>(_:_:)();
    sub_10002E81C(0, 0xE000000000000000, 0xD000000000000018, (void *)0x80000001000E4850, 0xD00000000000001ELL, 0x80000001000E4750, 369);
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v32 = 27;
    uint64_t v33 = 370;
  }
  else
  {
    uint64_t v4 = swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = a2[4];
    sub_10001A974(a2, v5);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v36, v5, v6);
    sub_10000AC7C(&qword_100128550);
    if (swift_dynamicCast())
    {
      int v7 = v38;
      uint64_t v8 = a2[3];
      uint64_t v9 = a2[4];
      sub_10001A974(a2, v8);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 24))(v36, v8, v9);
      if (swift_dynamicCast())
      {
        int v37 = v7;
        char v10 = v38;
        uint64_t v11 = a2[3];
        uint64_t v12 = a2[4];
        sub_10001A974(a2, v11);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 40))(v36, v11, v12);
        if (swift_dynamicCast())
        {
          char v13 = v38;
          *(unsigned char *)(v4 + 2) = v37;
          *(unsigned char *)(v4 + 3) = v10;
          *(unsigned char *)(v4 + 4) = v13;
          [objc_allocWithZone((Class)NSMutableData) initWithBytesNoCopy:v4 length:5];
LABEL_16:
          sub_10001ABC4((uint64_t)a2);
          return a1 | 0x100u;
        }
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v32 = 1;
        uint64_t v33 = 327;
      }
      else
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v32 = 1;
        uint64_t v33 = 326;
      }
    }
    else
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v32 = 1;
      uint64_t v33 = 325;
    }
  }
  *(void *)(v32 + 8) = 0;
  *(void *)(v32 + 16) = 0xE000000000000000;
  *(void *)(v32 + 24) = 0xD000000000000018;
  *(void *)(v32 + 32) = 0x80000001000E4850;
  *(void *)(v32 + 40) = 0xD00000000000001ELL;
  *(void *)(v32 + 48) = 0x80000001000E4750;
  *(void *)(v32 + 56) = v33;
  swift_willThrow();
  return sub_10001ABC4((uint64_t)a2);
}

uint64_t sub_100085EBC(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = result;
  if (result == 2) {
    goto LABEL_9;
  }
  if (result != 1)
  {
    if ((_BYTE)result)
    {
      _StringGuts.grow(_:)(20);
      v8._countAndFlagsBits = 0xD000000000000012;
      v8._object = (void *)0x80000001000E4770;
      String.append(_:)(v8);
      _print_unlocked<A, B>(_:_:)();
      sub_10002E81C(0, 0xE000000000000000, 0xD00000000000001DLL, (void *)0x80000001000E47B0, 0xD00000000000001ELL, 0x80000001000E4750, 304);
      swift_bridgeObjectRelease();
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v6 = 27;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0xE000000000000000;
      *(void *)(v6 + 24) = 0xD00000000000001DLL;
      *(void *)(v6 + 32) = 0x80000001000E47B0;
      *(void *)(v6 + 40) = 0xD00000000000001ELL;
      *(void *)(v6 + 48) = 0x80000001000E4750;
      uint64_t v7 = 305;
LABEL_19:
      *(void *)(v6 + 56) = v7;
      return swift_willThrow();
    }
    if (a2 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = 3 * a2;
      if ((unsigned __int128)(a2 * (__int128)3) >> 64 == (3 * a2) >> 63)
      {
        uint64_t v4 = v3 + 2;
        if (!__OFADD__(v3, 2)) {
          goto LABEL_15;
        }
        __break(1u);
LABEL_9:
        if ((a2 & 0x8000000000000000) == 0)
        {
          if ((unsigned __int128)(a2 * (__int128)12) >> 64 == (12 * a2) >> 63)
          {
            uint64_t v4 = (12 * a2) | 2;
LABEL_15:
            if ([objc_allocWithZone((Class)NSMutableData) initWithLength:v4]) {
              return v2 | 0x100u;
            }
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v6 = 29;
            *(void *)(v6 + 8) = 0;
            *(void *)(v6 + 16) = 0xE000000000000000;
            *(void *)(v6 + 24) = 0xD00000000000001DLL;
            *(void *)(v6 + 32) = 0x80000001000E47B0;
            *(void *)(v6 + 40) = 0xD00000000000001ELL;
            *(void *)(v6 + 48) = 0x80000001000E4750;
            uint64_t v7 = 307;
            goto LABEL_19;
          }
          goto LABEL_23;
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    __break(1u);
    goto LABEL_22;
  }
  if (a2 < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v5 = 6 * a2;
  if ((unsigned __int128)(a2 * (__int128)6) >> 64 != (6 * a2) >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v4 = v5 + 2;
  if (!__OFADD__(v5, 2)) {
    goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

void *sub_10008613C(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C974(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 3 * v4;
    uint64_t v6 = (char *)v3 + 1;
    do
    {
      char v7 = *(v6 - 1);
      char v8 = *v6;
      char v9 = v6[1];
      char v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v4 + 1;
      if (v4 >= v10 >> 1)
      {
        sub_10007C974(v10 > 1, v4 + 1, 1);
        uint64_t result = v13;
      }
      v6 += 3;
      result[2] = v11;
      uint64_t v12 = (char *)result + v5;
      v12[32] = v7;
      v12[33] = v8;
      v12[34] = v9;
      v5 += 3;
      unint64_t v4 = v11;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_100086238(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C954(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 6 * v4;
    uint64_t v6 = (__int16 *)v3 + 1;
    do
    {
      __int16 v7 = *(v6 - 1);
      __int16 v8 = *v6;
      __int16 v9 = v6[1];
      char v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v4 + 1;
      if (v4 >= v10 >> 1)
      {
        sub_10007C954(v10 > 1, v4 + 1, 1);
        uint64_t result = v13;
      }
      v6 += 3;
      result[2] = v11;
      uint64_t v12 = (_WORD *)((char *)result + v5);
      v12[16] = v7;
      v12[17] = v8;
      v12[18] = v9;
      v5 += 6;
      unint64_t v4 = v11;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_100086338(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C934(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 12 * v4;
    uint64_t v6 = v3 + 1;
    do
    {
      uint64_t v7 = *((void *)v6 - 1);
      int v8 = *v6;
      uint64_t v12 = result;
      unint64_t v9 = result[3];
      unint64_t v10 = v4 + 1;
      if (v4 >= v9 >> 1)
      {
        sub_10007C934(v9 > 1, v4 + 1, 1);
        uint64_t result = v12;
      }
      v6 += 3;
      result[2] = v10;
      unint64_t v11 = (char *)result + v5;
      *((void *)v11 + 4) = v7;
      *((_DWORD *)v11 + 10) = v8;
      v5 += 12;
      unint64_t v4 = v10;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_100086438(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  unint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0);
    uint64_t v5 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 6 * v6;
    do
    {
      char v8 = *((unsigned char *)v4 + v5);
      int v9 = *(_DWORD *)((char *)v4 + v5 + 1);
      char v10 = *((unsigned char *)v4 + v5 + 5);
      uint64_t v15 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v6 + 1;
      if (v6 >= v11 >> 1)
      {
        a3(v11 > 1, v6 + 1, 1);
        uint64_t result = v15;
      }
      result[2] = v12;
      char v13 = (char *)result + v7 + v5;
      v13[32] = v8;
      *(_DWORD *)(v13 + 33) = v9;
      v13[37] = v10;
      v5 += 6;
      unint64_t v6 = v12;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_100086554(uint64_t result, uint64_t a2)
{
  if (result != 8)
  {
    _StringGuts.grow(_:)(20);
    v2._countAndFlagsBits = 0xD000000000000012;
    v2._object = (void *)0x80000001000E4770;
    String.append(_:)(v2);
    _print_unlocked<A, B>(_:_:)();
    sub_10002E81C(0, 0xE000000000000000, 0xD00000000000001ALL, (void *)0x80000001000E4890, 0xD00000000000001ELL, 0x80000001000E4750, 279);
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v3 = 27;
    uint64_t v4 = 280;
LABEL_7:
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0xE000000000000000;
    *(void *)(v3 + 24) = 0xD00000000000001ALL;
    *(void *)(v3 + 32) = 0x80000001000E4890;
    *(void *)(v3 + 40) = 0xD00000000000001ELL;
    *(void *)(v3 + 48) = 0x80000001000E4750;
    *(void *)(v3 + 56) = v4;
    return swift_willThrow();
  }
  if (!__OFADD__(a2, 1))
  {
    if ([objc_allocWithZone((Class)NSMutableData) initWithLength:a2 + 1]) {
      return 8;
    }
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v3 = 29;
    uint64_t v4 = 282;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_100086714()
{
  unint64_t result = qword_1001294B0;
  if (!qword_1001294B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001294B0);
  }
  return result;
}

uint64_t sub_100086754(uint64_t a1)
{
  uint64_t v2 = sub_10000AC7C(&qword_1001294C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1000867B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v9 = **(void **)(v3 + 16);
  v8[2] = &v9;
  unint64_t result = sub_100082080((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100086820, (uint64_t)v8, a1, a2);
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

void sub_100086820(unsigned char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v7 = **(id **)(v3 + 16);
  sub_1000821A4(v10, a1, a2);
  uint64_t v8 = v10[1];
  *a3 = v10[0];
  a3[1] = v8;
  a3[2] = v9;
}

ValueMetadata *type metadata accessor for AudioClassRange8bit()
{
  return &type metadata for AudioClassRange8bit;
}

uint64_t initializeBufferWithCopyOfBuffer for AudioClassRange16bit(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AudioClassRange16bit()
{
  return &type metadata for AudioClassRange16bit;
}

ValueMetadata *type metadata accessor for AudioClassRange32bit()
{
  return &type metadata for AudioClassRange32bit;
}

unint64_t sub_1000868DC()
{
  unint64_t result = qword_1001294C8;
  if (!qword_1001294C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001294C8);
  }
  return result;
}

unint64_t sub_100086934()
{
  unint64_t result = qword_1001294D0;
  if (!qword_1001294D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001294D0);
  }
  return result;
}

unint64_t sub_10008698C()
{
  unint64_t result = qword_1001294D8;
  if (!qword_1001294D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001294D8);
  }
  return result;
}

unint64_t sub_1000869E0()
{
  unint64_t result = qword_1001294E0;
  if (!qword_1001294E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001294E0);
  }
  return result;
}

unint64_t sub_100086A34()
{
  unint64_t result = qword_1001294E8;
  if (!qword_1001294E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001294E8);
  }
  return result;
}

unint64_t sub_100086A88()
{
  unint64_t result = qword_1001294F0;
  if (!qword_1001294F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001294F0);
  }
  return result;
}

unint64_t sub_100086ADC()
{
  unint64_t result = qword_1001294F8;
  if (!qword_1001294F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001294F8);
  }
  return result;
}

unint64_t sub_100086B30()
{
  unint64_t result = qword_100129500;
  if (!qword_100129500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129500);
  }
  return result;
}

void sub_100086B84(uint64_t (**a1)(void, void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (void *)a1[2](ObjectType, a1);
  if (v6)
  {

    sub_100034E64(0x4944u, ObjectType, (uint64_t)&type metadata for UInt64, a1, (uint64_t)&v9);
    if (!v2)
    {
      if ((v10 & 1) != 0
        || (sub_100034E64(0x554Cu, ObjectType, (uint64_t)&type metadata for UInt64, a1, (uint64_t)&v9),
            (v10 & 1) != 0))
      {
        *(_OWORD *)a2 = xmmword_1000EC090;
        *(unsigned char *)(a2 + 16) = 0;
      }
      else
      {
        BOOL v8 = v9 == 0x4B434F4C4D454D48;
        char v10 = 0;
        swift_unknownObjectWeakInit();
        char v10 = a1;
        swift_unknownObjectWeakAssign();
        BOOL v11 = v8;
        sub_1000881BC((uint64_t)&v9, a2, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakTakeInit);
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v7 = 51;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0xE000000000000000;
    *(void *)(v7 + 24) = 0x6F28657461657263;
    *(void *)(v7 + 32) = 0xEB00000000293A6ELL;
    *(void *)(v7 + 40) = 0xD000000000000020;
    *(void *)(v7 + 48) = 0x80000001000E48B0;
    *(void *)(v7 + 56) = 60;
    swift_willThrow();
  }
}

uint64_t sub_100086D50()
{
  memset(v9, 0, sizeof(v9));
  long long v8 = 0u;
  long long v7 = 0u;
  __int16 v6 = 13057;
  id v2 = [objc_allocWithZone((Class)NSMutableData) initWithBytes:&v6 length:64];
  sub_100087D20(2, v2);
  if (!v1)
  {
    sub_100087AE8(2, (uint64_t)&v10);
    if ((v12 & 1) != 0 || (const mach_header_64 *)(v10 & 0xFFFF00000000) != &_mh_execute_header) {
      goto LABEL_11;
    }
    if ((v10 & 0xFF00) == 0x3300)
    {
      if (HIWORD(v10) == 3)
      {
        if (v11 == 1)
        {
          sub_10002E804(0xD000000000000014, 0x80000001000E4920, 0x45746C7561666564, (void *)0xEF292865646F4D55, 0xD000000000000020, 0x80000001000E48B0, 107);
          char v0 = 1;

          return v0 & 1;
        }
LABEL_11:
        sub_10002E804(0xD000000000000015, 0x80000001000E4900, 0x45746C7561666564, (void *)0xEF292865646F4D55, 0xD000000000000020, 0x80000001000E48B0, 112);
        char v0 = 0;

        return v0 & 1;
      }
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v4 = 53;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0xE000000000000000;
      *(void *)(v4 + 24) = 0x45746C7561666564;
      *(void *)(v4 + 32) = 0xEF292865646F4D55;
      *(void *)(v4 + 40) = 0xD000000000000020;
      *(void *)(v4 + 48) = 0x80000001000E48B0;
      uint64_t v5 = 104;
    }
    else
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v4 = 1;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0xE000000000000000;
      *(void *)(v4 + 24) = 0x45746C7561666564;
      *(void *)(v4 + 32) = 0xEF292865646F4D55;
      *(void *)(v4 + 40) = 0xD000000000000020;
      *(void *)(v4 + 48) = 0x80000001000E48B0;
      uint64_t v5 = 103;
    }
    *(void *)(v4 + 56) = v5;
    swift_willThrow();
  }

  return v0 & 1;
}

void sub_100087038(char a1)
{
  memset(v11, 0, sizeof(v11));
  long long v10 = 0u;
  long long v9 = 0u;
  v8[0] = 5889;
  v8[1] = a1 & 1;
  id v3 = [objc_allocWithZone((Class)NSMutableData) initWithBytes:v8 length:64];
  sub_100087D20(2, v3);
  if (!v1)
  {
    sub_100087AE8(2, (uint64_t)&v12);
    if ((v14 & 1) == 0 && (const mach_header_64 *)(v12 & 0xFFFF00000000) == &_mh_execute_header)
    {
      if ((v12 & 0xFF00) == 0x1700)
      {
        uint64_t v12 = 0x6E2065646F4D5545;
        uint64_t v13 = 0xEB0000000020776FLL;
        if (a1) {
          uint64_t v4 = 1702195828;
        }
        else {
          uint64_t v4 = 0x65736C6166;
        }
        if (a1) {
          unint64_t v5 = 0xE400000000000000;
        }
        else {
          unint64_t v5 = 0xE500000000000000;
        }
        unint64_t v6 = v5;
        String.append(_:)(*(Swift::String *)&v4);
        swift_bridgeObjectRelease();
        sub_10002E804(v12, v13, 0xD000000000000012, (void *)0x80000001000E48E0, 0xD000000000000020, 0x80000001000E48B0, 129);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v7 = 1;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0xE000000000000000;
        *(void *)(v7 + 24) = 0xD000000000000012;
        *(void *)(v7 + 32) = 0x80000001000E48E0;
        *(void *)(v7 + 40) = 0xD000000000000020;
        *(void *)(v7 + 48) = 0x80000001000E48B0;
        *(void *)(v7 + 56) = 128;
        swift_willThrow();
      }
    }
  }
}

void sub_100087264()
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v9 = 0;
  uint64_t v5 = 0x8000000000C01;
  BYTE1(v6) = 1;
  BYTE3(v6) = 1;
  BYTE5(v6) = 1;
  id v1 = [objc_allocWithZone((Class)NSMutableData) initWithBytes:&v5 length:64];
  sub_100087D20(2, v1);
  if (!v0)
  {
    sub_100087AE8(2, (uint64_t)&v10);
    if ((v12 & 1) == 0)
    {
      int v2 = v10;
      if ((const mach_header_64 *)(v10 & 0xFFFF00000000) == &_mh_execute_header)
      {
        if ((v10 & 0xFF00) == 0xC00)
        {
          if (HIWORD(v10) == 4)
          {
            BYTE1(v10) = 12;
            LOBYTE(v10) = v2;
            WORD1(v10) = HIWORD(v2);
            HIDWORD(v10) = 262145;
            sub_100087FD0((unsigned __int8 *)&v11);
            goto LABEL_10;
          }
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v3 = 1;
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0xE000000000000000;
          *(void *)(v3 + 24) = 0x45656C6261736964;
          *(void *)(v3 + 32) = 0xEB00000000292851;
          *(void *)(v3 + 40) = 0xD000000000000020;
          *(void *)(v3 + 48) = 0x80000001000E48B0;
          uint64_t v4 = 178;
        }
        else
        {
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v3 = 1;
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0xE000000000000000;
          *(void *)(v3 + 24) = 0x45656C6261736964;
          *(void *)(v3 + 32) = 0xEB00000000292851;
          *(void *)(v3 + 40) = 0xD000000000000020;
          *(void *)(v3 + 48) = 0x80000001000E48B0;
          uint64_t v4 = 177;
        }
        *(void *)(v3 + 56) = v4;
        swift_willThrow();
      }
    }
  }
LABEL_10:
}

uint64_t sub_100087660()
{
  memset(v9, 0, sizeof(v9));
  long long v8 = 0u;
  long long v7 = 0u;
  __int16 v6 = 2305;
  id v2 = [objc_allocWithZone((Class)NSMutableData) initWithBytes:&v6 length:64];
  sub_100087D20(2, v2);
  if (!v1)
  {
    sub_100087AE8(2, (uint64_t)v10);
    if ((v11 & 1) != 0 || (const mach_header_64 *)(v10[0] & 0xFFFF00000000) != &_mh_execute_header)
    {

      return 0;
    }
    if ((v10[0] & 0xFF00) == 0x900)
    {
      if (HIWORD(v10[0]) == 4)
      {
        uint64_t v0 = v10[1];

        return v0;
      }
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v4 = 1;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0xE000000000000000;
      strcpy((char *)(v4 + 24), "mikeyBusID()");
      *(unsigned char *)(v4 + 37) = 0;
      *(_WORD *)(v4 + 38) = -5120;
      *(void *)(v4 + 40) = 0xD000000000000020;
      *(void *)(v4 + 48) = 0x80000001000E48B0;
      uint64_t v5 = 146;
    }
    else
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v4 = 1;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0xE000000000000000;
      strcpy((char *)(v4 + 24), "mikeyBusID()");
      *(unsigned char *)(v4 + 37) = 0;
      *(_WORD *)(v4 + 38) = -5120;
      *(void *)(v4 + 40) = 0xD000000000000020;
      *(void *)(v4 + 48) = 0x80000001000E48B0;
      uint64_t v5 = 145;
    }
    *(void *)(v4 + 56) = v5;
    swift_willThrow();
  }

  return v0;
}

uint64_t CS46L06Interface.function.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t CS46L06Interface.function.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 8) = a2;
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t (*CS46L06Interface.function.modify(uint64_t *a1))(uint64_t a1)
{
  a1[2] = v1;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v4 = *(void *)(v1 + 8);
  *a1 = Strong;
  a1[1] = v4;
  return sub_10008792C;
}

uint64_t sub_10008792C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 16) + 8) = *(void *)(a1 + 8);
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for CS46L06Interface(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t assignWithCopy for CS46L06Interface(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t initializeWithTake for CS46L06Interface(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t assignWithTake for CS46L06Interface(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t getEnumTagSinglePayload for CS46L06Interface(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CS46L06Interface(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CS46L06Interface()
{
  return &type metadata for CS46L06Interface;
}

uint64_t sub_100087AE8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  type metadata accessor for C46L06HVCICommandResponse(0);
  uint64_t v6 = v5;
  if (swift_unknownObjectWeakLoadStrong())
  {
    long long v7 = *(uint64_t (***)(void, void))(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    sub_100034E64(0x4843554C4944uLL >> (16 * a1), ObjectType, v6, v7, a2);
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v10 = 1;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0xE000000000000000;
    *(void *)(v10 + 24) = 0xD00000000000001DLL;
    *(void *)(v10 + 32) = 0x80000001000E3230;
    *(void *)(v10 + 40) = 0xD000000000000020;
    *(void *)(v10 + 48) = 0x80000001000E48B0;
    *(void *)(v10 + 56) = 45;
    return swift_willThrow();
  }
}

uint64_t sub_100087C04(char a1)
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v4 = *(uint64_t (***)(void, void))(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    sub_100034E64(0x4843554C4944uLL >> (16 * a1), ObjectType, (uint64_t)&type metadata for UInt64, v4, (uint64_t)&v8);
    uint64_t result = swift_unknownObjectRelease();
    if (!v2) {
      return v8;
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v7 = 1;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0xE000000000000000;
    *(void *)(v7 + 24) = 0xD00000000000001DLL;
    *(void *)(v7 + 32) = 0x80000001000E3230;
    *(void *)(v7 + 40) = 0xD000000000000020;
    *(void *)(v7 + 48) = 0x80000001000E48B0;
    *(void *)(v7 + 56) = 45;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100087D20(char a1, void *a2)
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v5 = *(uint64_t (***)(void, void))(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    sub_10002F238(0x4843554C4944uLL >> (16 * a1), a2, ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v8 = 1;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0xE000000000000000;
    *(void *)(v8 + 24) = 0xD00000000000001FLL;
    *(void *)(v8 + 32) = 0x80000001000E32F0;
    *(void *)(v8 + 40) = 0xD000000000000020;
    *(void *)(v8 + 48) = 0x80000001000E48B0;
    *(void *)(v8 + 56) = 53;
    return swift_willThrow();
  }
}

void sub_100087E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  id v8 = [objc_allocWithZone((Class)NSMutableData) initWithBytes:a1 length:8];
  sub_1000881BC(a3, (uint64_t)v13, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakCopyInit);
  sub_100087D20(1, v8);
  sub_100036204((uint64_t)v13);
  if (v4) {
    goto LABEL_3;
  }
  sub_1000881BC(a3, (uint64_t)v13, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakCopyInit);
  uint64_t v9 = sub_100087C04(1);
  char v11 = v10;
  sub_100036204((uint64_t)v13);
  if ((v11 & 1) == 0 && v9 != 0x4B4C4E554D454D48)
  {
    sub_10000CD54();
    uint64_t v6 = swift_allocError();
    *(unsigned char *)uint64_t v12 = 1;
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0xE000000000000000;
    *(void *)(v12 + 24) = 0x29286B636F6C6E75;
    *(void *)(v12 + 32) = 0xE800000000000000;
    *(void *)(v12 + 40) = 0xD000000000000020;
    *(void *)(v12 + 48) = 0x80000001000E48B0;
    *(void *)(v12 + 56) = 86;
    swift_willThrow();
LABEL_3:

    *a4 = v6;
    return;
  }
}

uint64_t sub_100087FD0(unsigned __int8 *a1)
{
  int v1 = *a1;
  int v2 = a1[1];
  int v3 = a1[2];
  if (v1 == 1) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (v1 == 1) {
    unint64_t v5 = 0xE400000000000000;
  }
  else {
    unint64_t v5 = 0xE500000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  sub_10002E804(0x74616C4638345145, 0xEA0000000000203ALL, 0x45656C6261736964, (void *)0xEB00000000292851, 0xD000000000000020, 0x80000001000E48B0, 185);
  swift_bridgeObjectRelease();
  if (v2 == 1) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if (v2 == 1) {
    unint64_t v8 = 0xE400000000000000;
  }
  else {
    unint64_t v8 = 0xE500000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  sub_10002E804(0x616C463239315145, 0xEB00000000203A74, 0x45656C6261736964, (void *)0xEB00000000292851, 0xD000000000000020, 0x80000001000E48B0, 186);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (v3 == 1) {
    unint64_t v11 = 0xE400000000000000;
  }
  else {
    unint64_t v11 = 0xE500000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  sub_10002E804(0x616C4663694D5145, 0xEB00000000203A74, 0x45656C6261736964, (void *)0xEB00000000292851, 0xD000000000000020, 0x80000001000E48B0, 187);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000881BC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  return a2;
}

void *sub_100088204(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, int *, uint64_t))
{
  uint64_t v5 = v4;
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_10007C4E4(0, v6, 0);
    uint64_t v7 = _swiftEmptyArrayStorage;
    unint64_t v11 = (int *)(a1 + 32);
    while (1)
    {
      int v12 = *v11++;
      int v17 = v12;
      a4(&v18, &v17, a2);
      if (v5) {
        break;
      }
      uint64_t v5 = 0;
      uint64_t v13 = v18;
      uint64_t v19 = v7;
      unint64_t v15 = v7[2];
      unint64_t v14 = v7[3];
      if (v15 >= v14 >> 1)
      {
        sub_10007C4E4(v14 > 1, v15 + 1, 1);
        uint64_t v7 = v19;
      }
      v7[2] = v15 + 1;
      v7[v15 + 4] = v13;
      if (!--v6) {
        return v7;
      }
    }
    swift_release();
  }
  return v7;
}

uint64_t sub_100088314@<X0>(_OWORD *a1@<X8>)
{
  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v2 = dispatch thunk of _AnyIndexBox._typeID.getter();
  swift_getObjectType();
  uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
  if (v2 == result)
  {
    char v4 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v4)
    {
      uint64_t result = swift_unknownObjectRelease();
      a1[1] = 0u;
      a1[2] = 0u;
      *a1 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

AUASDCore::tADCControlRequestParameterBlockLayout __swiftcall USBDescriptorControl.pbLayout()()
{
  switch((v0 >> 18) & 0x3C | (v0 >> 6))
  {
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
      int v1 = HIWORD(v0) & 0xF;
      break;
    default:
      int v1 = HIWORD(v0);
      break;
  }
  return (char)v1;
}

uint64_t sub_100088544(unsigned int a1)
{
  return a1 >> 8;
}

void sub_10008854C(uint64_t a1, __int16 a2)
{
  switch(HIBYTE(a2))
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
      return;
    default:
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v2 = 44;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 16) = 0xE000000000000000;
      *(void *)(v2 + 24) = 0xD000000000000015;
      *(void *)(v2 + 32) = 0x80000001000E4AF0;
      *(void *)(v2 + 40) = 0xD00000000000001DLL;
      *(void *)(v2 + 48) = 0x80000001000E4940;
      *(void *)(v2 + 56) = 720;
      swift_willThrow();
      break;
  }
}

Swift::String_optional __swiftcall USBDescriptorControl.label()()
{
  int v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12[-2] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[1] = &type metadata for USBDescriptorControl;
  BYTE2(v11) = BYTE2(v1);
  LOWORD(v11) = v1;
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  sub_100088314(&v11);
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v12[3])
  {
    uint64_t v7 = (void *)*((void *)&v11 + 1);
    uint64_t v6 = v11;
    sub_10001ABC4((uint64_t)v12);
  }
  else
  {
    sub_10001A918((uint64_t)&v11, &qword_100127CD0);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  result.value._object = v9;
  result.value._countAndFlagsBits = v8;
  return result;
}

void sub_100088794(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  switch(HIBYTE(a2))
  {
    case 0x19:
      unint64_t v5 = sub_1000B9154(a1, a2 | 0x1900u);
      if (!v3)
      {
        uint64_t v9 = v7;
        __int16 v10 = v8;
        int v11 = HIBYTE(v6);
        uint64_t v12 = BYTE3(v5);
        uint64_t v289 = WORD2(v5);
        uint64_t v13 = BYTE6(v5);
        unint64_t v14 = (v6 << 16) | (unint64_t)HIBYTE(v5) | ((unint64_t)BYTE2(v6) << 32);
        sub_10000AC7C(&qword_1001290A8);
        uint64_t v15 = swift_allocObject();
        *(_OWORD *)(v15 + 16) = xmmword_1000E8090;
        *(void *)(v15 + 32) = v14;
        *(_WORD *)(v15 + 40) = 0;
        if (v11) {
          int v16 = v11;
        }
        else {
          int v16 = 16711680;
        }
        sub_1000C0C44(v12, 0, v289, v13, 0, (uint64_t)_swiftEmptyArrayStorage, v16, v15, (uint64_t)v167, 0, 0xF000000000000000, v9, v10, (uint64_t)_swiftEmptyArrayStorage);
        v162 = &type metadata for InputTerminal;
        unint64_t v163 = sub_10008CC68();
        uint64_t v17 = swift_allocObject();
        *(void *)v161 = v17;
        long long v18 = v167[5];
        *(_OWORD *)(v17 + 80) = v167[4];
        *(_OWORD *)(v17 + 96) = v18;
        *(void *)(v17 + 112) = v168;
        long long v19 = v167[1];
        *(_OWORD *)(v17 + 16) = v167[0];
        *(_OWORD *)(v17 + 32) = v19;
        long long v21 = v167[2];
        long long v20 = v167[3];
        goto LABEL_105;
      }
      return;
    case 0x1A:
      unint64_t v22 = sub_1000B9500(a1, a2 | 0x1A00u);
      if (!v3)
      {
        if (v23) {
          int v26 = v23;
        }
        else {
          int v26 = 16711680;
        }
        sub_1000C0DC8(BYTE3(v22), 0, HIBYTE(v22), WORD2(v22), BYTE6(v22), 0, v26, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v169, v24, v25, (uint64_t)_swiftEmptyArrayStorage);
        v162 = &type metadata for OutputTerminal;
        unint64_t v163 = sub_10008CB90();
        uint64_t v27 = (_OWORD *)swift_allocObject();
        *(void *)v161 = v27;
        long long v28 = v169[3];
        v27[3] = v169[2];
        v27[4] = v28;
        long long v29 = v169[5];
        v27[5] = v169[4];
        v27[6] = v29;
        long long v30 = v169[0];
        long long v31 = v169[1];
        goto LABEL_121;
      }
      return;
    case 0x1B:
      sub_1000B9884(a1, a2 | 0x1B00, (uint64_t)v170);
      if (!v3)
      {
        unint64_t v32 = v170[5] | ((unint64_t)v171 << 16) | ((unint64_t)v172 << 32);
        uint64_t v33 = v170[3];
        uint64_t v34 = v175;
        uint64_t v35 = v176;
        uint64_t v36 = v173;
        if (v177) {
          int v37 = v177;
        }
        else {
          int v37 = 16711680;
        }
        __int16 v38 = v174;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000C0EC4(v33, v32, 0, v34, v35, (uint64_t)_swiftEmptyArrayStorage, v37, v36, (uint64_t)v178, v38, (uint64_t)_swiftEmptyArrayStorage);
        sub_10008D0A8((uint64_t)v170);
        v162 = &type metadata for MixerUnit;
        unint64_t v163 = sub_10001D8D8();
        uint64_t v27 = (_OWORD *)swift_allocObject();
        *(void *)v161 = v27;
        long long v39 = v178[3];
        v27[3] = v178[2];
        v27[4] = v39;
        v27[5] = v178[4];
        *((void *)v27 + 12) = v179;
        long long v30 = v178[0];
        long long v31 = v178[1];
        goto LABEL_121;
      }
      return;
    case 0x1C:
      sub_1000B9C38(a1, a2 | 0x1C00, (uint64_t)v180);
      if (!v3)
      {
        if (v184) {
          int v40 = v184;
        }
        else {
          int v40 = 16711680;
        }
        sub_1000C0FFC(v180[3], v183, (uint64_t)&off_100112010, v40, v181, v182, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v185);
        v162 = &type metadata for SelectorUnit;
        unint64_t v163 = sub_10001EB00();
        uint64_t v41 = swift_allocObject();
        *(void *)v161 = v41;
        long long v42 = v185[3];
        *(_OWORD *)(v41 + 48) = v185[2];
        *(_OWORD *)(v41 + 64) = v42;
        *(void *)(v41 + 80) = v186;
        long long v44 = v185[0];
        long long v43 = v185[1];
        goto LABEL_120;
      }
      return;
    case 0x1D:
      sub_1000BA220(a1, a2 | 0x1D00, (uint64_t)v187);
      if (!v3)
      {
        sub_1000B660C((uint64_t)v188);
        sub_10008D070((uint64_t)v187);
        v162 = &type metadata for FeatureUnit;
        unint64_t v163 = sub_10008CAF0();
        uint64_t v41 = swift_allocObject();
        *(void *)v161 = v41;
        long long v144 = v188[3];
        *(_OWORD *)(v41 + 48) = v188[2];
        *(_OWORD *)(v41 + 64) = v144;
        *(void *)(v41 + 80) = v189;
        long long v44 = v188[0];
        long long v43 = v188[1];
        goto LABEL_120;
      }
      return;
    case 0x1E:
      sub_1000BA4CC(a1, a2 | 0x1E00, (uint64_t)v190);
      if (!v3)
      {
        sub_1000B679C((uint64_t)v191);
        sub_10008D028((uint64_t)v190);
        v162 = &type metadata for ProcessingUnit;
        unint64_t v163 = sub_100058054();
        uint64_t v41 = swift_allocObject();
        *(void *)v161 = v41;
        long long v145 = v191[3];
        *(_OWORD *)(v41 + 48) = v191[2];
        *(_OWORD *)(v41 + 64) = v145;
        *(_OWORD *)(v41 + 80) = v191[4];
        long long v44 = v191[0];
        long long v43 = v191[1];
        goto LABEL_120;
      }
      return;
    case 0x1F:
      sub_1000BA8B0(a1, a2 | 0x1F00, (uint64_t)v192);
      if (!v3)
      {
        uint64_t v45 = v192[3];
        uint64_t v46 = v195;
        uint64_t v47 = v193;
        if (v196) {
          int v48 = v196;
        }
        else {
          int v48 = 16711680;
        }
        __int16 v49 = v194;
        swift_bridgeObjectRetain();
        sub_1000C1210(v45, 0, v46, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, v48, (uint64_t)v197, v47, v49, (uint64_t)_swiftEmptyArrayStorage);
        sub_10008D0A8((uint64_t)v192);
        v162 = &type metadata for ExtensionUnit;
        unint64_t v163 = sub_100057E68();
        uint64_t v27 = (_OWORD *)swift_allocObject();
        *(void *)v161 = v27;
        long long v50 = v197[3];
        v27[3] = v197[2];
        v27[4] = v50;
        long long v51 = v197[5];
        v27[5] = v197[4];
        v27[6] = v51;
        long long v30 = v197[0];
        long long v31 = v197[1];
        goto LABEL_121;
      }
      return;
    case 0x21:
      sub_1000671D4(a1, a2 | 0x2100, (uint64_t)v198);
      if (!v3)
      {
        sub_1000648C8((uint64_t)v199);
        v162 = &type metadata for InputTerminal;
        unint64_t v163 = sub_10008CC68();
        uint64_t v17 = swift_allocObject();
        *(void *)v161 = v17;
        long long v52 = v199[5];
        *(_OWORD *)(v17 + 80) = v199[4];
        *(_OWORD *)(v17 + 96) = v52;
        *(void *)(v17 + 112) = v200;
        long long v53 = v199[1];
        *(_OWORD *)(v17 + 16) = v199[0];
        *(_OWORD *)(v17 + 32) = v53;
        long long v21 = v199[2];
        long long v20 = v199[3];
        goto LABEL_105;
      }
      return;
    case 0x22:
      unint64_t v54 = sub_1000675D8(a1, a2 | 0x2200u);
      if (!v3)
      {
        sub_100064EB4(v54, v55, v56, v57, v201);
        v162 = &type metadata for OutputTerminal;
        unint64_t v163 = sub_10008CB90();
        uint64_t v27 = (_OWORD *)swift_allocObject();
        *(void *)v161 = v27;
        long long v58 = v201[3];
        v27[3] = v201[2];
        v27[4] = v58;
        long long v59 = v201[5];
        v27[5] = v201[4];
        v27[6] = v59;
        long long v30 = v201[0];
        long long v31 = v201[1];
        goto LABEL_121;
      }
      return;
    case 0x23:
      sub_100067984(a1, a2 | 0x2300, (uint64_t)v202);
      if (!v3)
      {
        sub_100065644((uint64_t)v203);
        sub_10008D0A8((uint64_t)v202);
        v162 = &type metadata for MixerUnit;
        unint64_t v163 = sub_10001D8D8();
        uint64_t v27 = (_OWORD *)swift_allocObject();
        *(void *)v161 = v27;
        long long v146 = v203[3];
        v27[3] = v203[2];
        v27[4] = v146;
        v27[5] = v203[4];
        *((void *)v27 + 12) = v204;
        long long v30 = v203[0];
        long long v31 = v203[1];
        goto LABEL_121;
      }
      return;
    case 0x24:
      unint64_t v60 = sub_100067D44(a1, a2 | 0x2400u);
      if (!v3)
      {
        sub_1000658E4(v60 & 0xFFFFFFFFFFFFFFLL, v61, v62, v63, (uint64_t)v205);
        swift_bridgeObjectRelease();
        v162 = &type metadata for SelectorUnit;
        unint64_t v163 = sub_10001EB00();
        uint64_t v41 = swift_allocObject();
        *(void *)v161 = v41;
        long long v43 = v205[1];
        long long v64 = v205[3];
        *(_OWORD *)(v41 + 48) = v205[2];
        *(_OWORD *)(v41 + 64) = v64;
        *(void *)(v41 + 80) = v206;
        long long v44 = v205[0];
        goto LABEL_120;
      }
      return;
    case 0x25:
      sub_100067DB8(a1, a2 | 0x2500, (uint64_t)v207);
      if (!v3)
      {
        *(void *)v161 = &_swiftEmptySetSingleton;
        uint64_t v65 = v211;
        sub_10008CFFC((uint64_t)v207);
        uint64_t v289 = (uint64_t)sub_100088204(v65, (uint64_t)v161, (uint64_t)v157, (void (*)(uint64_t *__return_ptr, int *, uint64_t))sub_100065AFC);
        sub_10008CF04((uint64_t)v207);
        if (v212) {
          int v66 = v212;
        }
        else {
          int v66 = -65536;
        }
        uint64_t v156 = v207[3];
        uint64_t v67 = v207[4];
        uint64_t v68 = v208;
        char v69 = v209;
        char v155 = v210;
        uint64_t v70 = swift_bridgeObjectRetain();
        v71 = sub_10005AD1C(v70);
        swift_bridgeObjectRelease();
        uint64_t v72 = v71[2];
        swift_bridgeObjectRelease();
        if (!v72)
        {
          swift_release();
          v71 = 0;
        }
        v73 = v207;
        goto LABEL_68;
      }
      return;
    case 0x28:
      sub_1000682CC(a1, a2 | 0x2800, (uint64_t)v213);
      if (!v3)
      {
        sub_100065ECC(v214);
        sub_10008CAC4((uint64_t)v213);
        v162 = &type metadata for ExtensionUnit;
        unint64_t v163 = sub_100057E68();
        uint64_t v27 = (_OWORD *)swift_allocObject();
        *(void *)v161 = v27;
        long long v74 = v214[3];
        v27[3] = v214[2];
        v27[4] = v74;
        long long v75 = v214[5];
        v27[5] = v214[4];
        v27[6] = v75;
        long long v30 = v214[0];
        long long v31 = v214[1];
        goto LABEL_121;
      }
      return;
    case 0x29:
      unint64_t v76 = sub_10006891C(a1, a2 | 0x2900u);
      if (!v3)
      {
        sub_100066438(v76, v77, v78, v215);
        v162 = &type metadata for ClockSource;
        unint64_t v163 = sub_100023848();
        v79 = (_OWORD *)swift_allocObject();
        *(void *)v161 = v79;
        long long v80 = v215[1];
        v79[1] = v215[0];
        v79[2] = v80;
        long long v81 = v215[2];
        long long v82 = v215[3];
        goto LABEL_83;
      }
      return;
    case 0x2A:
      unint64_t v83 = sub_100068CB4(a1, a2 | 0x2A00u);
      if (!v3)
      {
        sub_100066C64(v83 & 0xFFFFFFFFFFFFFFLL, v84, v85, v86, v216);
        swift_bridgeObjectRelease();
        v162 = &type metadata for ClockSelector;
        unint64_t v163 = sub_10002D55C();
        uint64_t v147 = swift_allocObject();
        *(void *)v161 = v147;
        long long v148 = v216[1];
        *(_OWORD *)(v147 + 16) = v216[0];
        *(_OWORD *)(v147 + 32) = v148;
        *(_OWORD *)(v147 + 48) = v216[2];
        uint64_t v149 = v217;
        goto LABEL_130;
      }
      return;
    case 0x2E:
      sub_1000B24DC(a1, a2 | 0x2E00, (uint64_t)v218);
      if (!v3)
      {
        sub_1000ADA88((uint64_t)v219);
        v162 = &type metadata for InputTerminal;
        unint64_t v163 = sub_10008CC68();
        uint64_t v17 = swift_allocObject();
        *(void *)v161 = v17;
        long long v87 = v219[5];
        *(_OWORD *)(v17 + 80) = v219[4];
        *(_OWORD *)(v17 + 96) = v87;
        *(void *)(v17 + 112) = v220;
        long long v88 = v219[1];
        *(_OWORD *)(v17 + 16) = v219[0];
        *(_OWORD *)(v17 + 32) = v88;
        long long v20 = v219[3];
        long long v21 = v219[2];
        goto LABEL_105;
      }
      return;
    case 0x2F:
      sub_1000B288C(a1, a2 | 0x2F00, (uint64_t)v221);
      if (!v3)
      {
        sub_1000ADD88(v222);
        v162 = &type metadata for OutputTerminal;
        unint64_t v163 = sub_10008CB90();
        uint64_t v27 = (_OWORD *)swift_allocObject();
        *(void *)v161 = v27;
        long long v89 = v222[3];
        v27[3] = v222[2];
        v27[4] = v89;
        long long v90 = v222[5];
        v27[5] = v222[4];
        v27[6] = v90;
        long long v30 = v222[0];
        long long v31 = v222[1];
        goto LABEL_121;
      }
      return;
    case 0x30:
      sub_1000B2C90(a1, a2 | 0x3000, (uint64_t)v223);
      if (!v3)
      {
        sub_1000AE044((uint64_t)v224);
        sub_10008CF74((uint64_t)v223);
        v162 = &type metadata for MixerUnit;
        unint64_t v163 = sub_10001D8D8();
        uint64_t v27 = (_OWORD *)swift_allocObject();
        *(void *)v161 = v27;
        long long v150 = v224[3];
        v27[3] = v224[2];
        v27[4] = v150;
        v27[5] = v224[4];
        *((void *)v27 + 12) = v225;
        long long v30 = v224[0];
        long long v31 = v224[1];
        goto LABEL_121;
      }
      return;
    case 0x31:
      sub_1000B3040(a1, a2 | 0x3100, (uint64_t)v226);
      if (!v3)
      {
        sub_1000AE318((uint64_t)v227);
        sub_10008CAC4((uint64_t)v226);
        v162 = &type metadata for SelectorUnit;
        unint64_t v163 = sub_10001EB00();
        uint64_t v41 = swift_allocObject();
        *(void *)v161 = v41;
        long long v43 = v227[1];
        long long v91 = v227[3];
        *(_OWORD *)(v41 + 48) = v227[2];
        *(_OWORD *)(v41 + 64) = v91;
        *(void *)(v41 + 80) = v228;
        long long v44 = v227[0];
        goto LABEL_120;
      }
      return;
    case 0x32:
      sub_1000B30B4(a1, a2 | 0x3200, (uint64_t)v229);
      if (!v3)
      {
        *(void *)v161 = &_swiftEmptySetSingleton;
        uint64_t v92 = v233;
        sub_10008CFFC((uint64_t)v229);
        uint64_t v289 = (uint64_t)sub_100088204(v92, (uint64_t)v161, (uint64_t)v158, (void (*)(uint64_t *__return_ptr, int *, uint64_t))sub_1000B1FC4);
        sub_10008CF04((uint64_t)v229);
        if (v234) {
          int v66 = v234 | 0x10000;
        }
        else {
          int v66 = -65536;
        }
        uint64_t v156 = v229[3];
        uint64_t v67 = v229[4];
        uint64_t v68 = v230;
        char v69 = v231;
        char v155 = v232;
        uint64_t v93 = swift_bridgeObjectRetain();
        v71 = sub_10005AD1C(v93);
        swift_bridgeObjectRelease();
        uint64_t v94 = v71[2];
        swift_bridgeObjectRelease();
        if (!v94)
        {
          swift_release();
          v71 = 0;
        }
        v73 = v229;
LABEL_68:
        sub_10008CF04((uint64_t)v73);
        v162 = &type metadata for FeatureUnit;
        unint64_t v163 = sub_10008CAF0();
        uint64_t v95 = swift_allocObject();
        *(void *)v161 = v95;
        *(void *)(v95 + 16) = v67;
        *(unsigned char *)(v95 + 24) = 0;
        *(void *)(v95 + 32) = v156;
        *(unsigned char *)(v95 + 42) = BYTE2(v66);
        *(_WORD *)(v95 + 40) = v66;
        *(void *)(v95 + 48) = v68;
        *(unsigned char *)(v95 + 56) = v69;
        *(unsigned char *)(v95 + 57) = v155;
        *(void *)(v95 + 64) = v289;
        *(void *)(v95 + 72) = 0;
        *(void *)(v95 + 80) = v71;
        goto LABEL_122;
      }
      return;
    case 0x33:
      sub_1000B35E0(a1, a2 | 0x3300, (uint64_t)v235);
      if (!v3)
      {
        if (v238) {
          int v96 = v238 | 0x10000;
        }
        else {
          int v96 = -65536;
        }
        uint64_t v97 = v235[3];
        uint64_t v98 = v235[6];
        sub_10008CF04((uint64_t)v235);
        uint64_t v99 = v236;
        __int16 v100 = v237;
        v162 = &type metadata for EffectUnit;
        unint64_t v163 = sub_10005826C();
        uint64_t v101 = swift_allocObject();
        *(void *)v161 = v101;
        *(void *)(v101 + 16) = v98;
        *(unsigned char *)(v101 + 24) = 0;
        *(void *)(v101 + 32) = v97;
        *(unsigned char *)(v101 + 42) = BYTE2(v96);
        *(_WORD *)(v101 + 40) = v96;
        *(void *)(v101 + 48) = v99;
        *(_WORD *)(v101 + 56) = v100;
        goto LABEL_119;
      }
      return;
    case 0x34:
      sub_1000B3B34(a1, a2 | 0x3400, (uint64_t)v239);
      if (!v3)
      {
        uint64_t v102 = v239[3];
        uint64_t v103 = v242;
        uint64_t v104 = v240;
        if (v243) {
          int v105 = v243 | 0x10000;
        }
        else {
          int v105 = 16711680;
        }
        __int16 v106 = v241;
        swift_bridgeObjectRetain();
        sub_1000C10F0(v102, 0, v103, (uint64_t)_swiftEmptyArrayStorage, v105, (uint64_t)_swiftEmptyArrayStorage, v104, v106, (uint64_t)v244, (uint64_t)_swiftEmptyArrayStorage);
        sub_10008CE7C((uint64_t)v239);
        v162 = &type metadata for ProcessingUnit;
        unint64_t v163 = sub_100058054();
        uint64_t v41 = swift_allocObject();
        *(void *)v161 = v41;
        long long v107 = v244[3];
        *(_OWORD *)(v41 + 48) = v244[2];
        *(_OWORD *)(v41 + 64) = v107;
        *(_OWORD *)(v41 + 80) = v244[4];
        long long v43 = v244[1];
        long long v44 = v244[0];
LABEL_120:
        *(_OWORD *)(v41 + 16) = v44;
        *(_OWORD *)(v41 + 32) = v43;
        goto LABEL_122;
      }
      return;
    case 0x35:
      sub_1000B3ED8(a1, a2 | 0x3500, (uint64_t)v245);
      if (!v3)
      {
        sub_1000AE450(v246);
        sub_10008CAC4((uint64_t)v245);
        v162 = &type metadata for ExtensionUnit;
        unint64_t v163 = sub_100057E68();
        uint64_t v27 = (_OWORD *)swift_allocObject();
        *(void *)v161 = v27;
        long long v108 = v246[3];
        v27[3] = v246[2];
        v27[4] = v108;
        long long v109 = v246[5];
        v27[5] = v246[4];
        v27[6] = v109;
        long long v30 = v246[0];
        long long v31 = v246[1];
        goto LABEL_121;
      }
      return;
    case 0x36:
      uint64_t v110 = sub_1000B44F8(a1, a2 | 0x3600u);
      *(void *)v161 = v110;
      *(_DWORD *)&v161[8] = v111;
      if (!v3)
      {
        LOWORD(v159) = v110;
        BYTE2(v159) = BYTE2(v110);
        BYTE3(v159) = BYTE3(v110);
        BYTE4(v159) = BYTE4(v110);
        *(_DWORD *)((char *)&v159 + 5) = *(_DWORD *)&v161[5];
        BYTE9(v159) = BYTE1(v111);
        WORD5(v159) = HIWORD(v111);
        sub_1000AE718(v159, DWORD2(v159), v112, v113, v247);
        v162 = &type metadata for ClockSource;
        unint64_t v163 = sub_100023848();
        v79 = (_OWORD *)swift_allocObject();
        *(void *)v161 = v79;
        long long v114 = v247[1];
        v79[1] = v247[0];
        v79[2] = v114;
        long long v81 = v247[2];
        long long v82 = v247[3];
LABEL_83:
        v79[3] = v81;
        v79[4] = v82;
        goto LABEL_122;
      }
      return;
    case 0x37:
      sub_1000B4844(a1, a2 | 0x3700, (uint64_t)v248);
      if (!v3)
      {
        sub_1000AEC88(v249);
        sub_10008CAC4((uint64_t)v248);
        v162 = &type metadata for ClockSelector;
        unint64_t v163 = sub_10002D55C();
        uint64_t v147 = swift_allocObject();
        *(void *)v161 = v147;
        long long v153 = v249[1];
        *(_OWORD *)(v147 + 16) = v249[0];
        *(_OWORD *)(v147 + 32) = v153;
        *(_OWORD *)(v147 + 48) = v249[2];
        uint64_t v149 = v250;
        goto LABEL_130;
      }
      return;
    case 0x38:
      uint64_t v115 = sub_1000B4EF8(a1, a2 | 0x3800u);
      *(void *)v161 = v115;
      *(_DWORD *)&v161[8] = v116;
      if (!v3)
      {
        LOWORD(v159) = v115;
        BYTE2(v159) = BYTE2(v115);
        BYTE3(v159) = BYTE3(v115);
        BYTE4(v159) = BYTE4(v115);
        *(_DWORD *)((char *)&v159 + 5) = *(_DWORD *)&v161[5];
        *(_WORD *)((char *)&v159 + 9) = v116 >> 8;
        sub_1000AF158(v159, DWORD2(v159), v117, v118, (uint64_t)v251);
        v162 = &type metadata for ClockMultiplier;
        unint64_t v163 = sub_10008CDA0();
        uint64_t v119 = swift_allocObject();
        *(void *)v161 = v119;
        long long v120 = v251[1];
        *(_OWORD *)(v119 + 16) = v251[0];
        *(_OWORD *)(v119 + 32) = v120;
        *(_OWORD *)(v119 + 48) = v251[2];
        *(_DWORD *)(v119 + 64) = v252;
        goto LABEL_122;
      }
      return;
    case 0x3B:
      sub_1000B5230(a1, a2 | 0x3B00, (uint64_t)v253);
      if (!v3)
      {
        if (v257) {
          int v121 = v257 | 0x10000;
        }
        else {
          int v121 = -65536;
        }
        uint64_t v122 = v253[3];
        uint64_t v123 = v256;
        uint64_t v124 = v254;
        __int16 v125 = v255;
        v162 = &type metadata for PowerDomain;
        unint64_t v163 = sub_100057F0C();
        uint64_t v126 = swift_allocObject();
        *(void *)v161 = v126;
        *(void *)(v126 + 16) = v122;
        *(unsigned char *)(v126 + 26) = BYTE2(v121);
        *(_WORD *)(v126 + 24) = v121;
        *(void *)(v126 + 32) = v124;
        *(_WORD *)(v126 + 40) = v125;
        *(void *)(v126 + 48) = 0;
        *(void *)(v126 + 56) = v123;
        goto LABEL_122;
      }
      return;
    case 0x4E:
      sub_1000D08A0(a1, a2 | 0x4E00, (uint64_t)v258);
      if (!v3)
      {
        uint64_t v127 = v259;
        uint64_t v128 = v260;
        __int16 v129 = v261;
        *((void *)&v165 + 1) = &type metadata for ClockSource;
        unint64_t v166 = sub_100023848();
        uint64_t v130 = swift_allocObject();
        *(void *)&long long v164 = v130;
        *(unsigned char *)(v130 + 18) = -1;
        *(_WORD *)(v130 + 16) = 0;
        *(void *)(v130 + 24) = v127;
        *(void *)(v130 + 32) = v128;
        *(_WORD *)(v130 + 40) = v129;
        *(void *)(v130 + 48) = 0;
        *(void *)(v130 + 56) = 0;
        *(_WORD *)(v130 + 64) = 257;
        *(void *)(v130 + 72) = 0;
        goto LABEL_123;
      }
      return;
    case 0x4F:
      sub_1000D0BF0(a1, a2 | 0x4F00, (uint64_t)v262);
      if (!v3)
      {
        sub_1000CBC04((uint64_t)v263);
        sub_10008CD1C((uint64_t)v262);
        v162 = &type metadata for ClockSelector;
        unint64_t v163 = sub_10002D55C();
        uint64_t v147 = swift_allocObject();
        *(void *)v161 = v147;
        long long v154 = v263[1];
        *(_OWORD *)(v147 + 16) = v263[0];
        *(_OWORD *)(v147 + 32) = v154;
        *(_OWORD *)(v147 + 48) = v263[2];
        uint64_t v149 = v264;
LABEL_130:
        *(void *)(v147 + 64) = v149;
        goto LABEL_122;
      }
      return;
    case 0x50:
      sub_1000D1078(a1, a2 | 0x5000, (uint64_t)v265);
      if (!v3)
      {
        if (v269 == 1) {
          uint64_t v131 = 257;
        }
        else {
          uint64_t v131 = 512;
        }
        if (v266) {
          int v132 = v266 | 0x10000;
        }
        else {
          int v132 = 16711680;
        }
        sub_1000C0C44(v267, v268, v131, 0, 0, (uint64_t)_swiftEmptyArrayStorage, v132, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v272, 0, 0xF000000000000000, v270, v271, (uint64_t)_swiftEmptyArrayStorage);
        sub_10008CC24((uint64_t)v265);
        v162 = &type metadata for InputTerminal;
        unint64_t v163 = sub_10008CC68();
        uint64_t v17 = swift_allocObject();
        *(void *)v161 = v17;
        long long v20 = v272[3];
        long long v133 = v272[5];
        *(_OWORD *)(v17 + 80) = v272[4];
        *(_OWORD *)(v17 + 96) = v133;
        *(void *)(v17 + 112) = v273;
        long long v134 = v272[1];
        *(_OWORD *)(v17 + 16) = v272[0];
        *(_OWORD *)(v17 + 32) = v134;
        long long v21 = v272[2];
LABEL_105:
        *(_OWORD *)(v17 + 48) = v21;
        *(_OWORD *)(v17 + 64) = v20;
        goto LABEL_122;
      }
      return;
    case 0x51:
      sub_1000D134C(a1, a2 | 0x5100, (uint64_t)v274);
      if (!v3)
      {
        if (v279 == 1) {
          uint64_t v135 = 257;
        }
        else {
          uint64_t v135 = 768;
        }
        if (v275) {
          int v136 = v275 | 0x10000;
        }
        else {
          int v136 = 16711680;
        }
        sub_1000C0DC8(v276, v278, v277, v135, 0, 0, v136, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v282, v280, v281, (uint64_t)_swiftEmptyArrayStorage);
        sub_10008CB48((uint64_t)v274);
        v162 = &type metadata for OutputTerminal;
        unint64_t v163 = sub_10008CB90();
        uint64_t v27 = (_OWORD *)swift_allocObject();
        *(void *)v161 = v27;
        long long v137 = v282[3];
        v27[3] = v282[2];
        v27[4] = v137;
        long long v138 = v282[5];
        v27[5] = v282[4];
        v27[6] = v138;
        long long v30 = v282[0];
        long long v31 = v282[1];
LABEL_121:
        v27[1] = v30;
        v27[2] = v31;
        goto LABEL_122;
      }
      return;
    case 0x54:
      sub_1000D1600(a1, a2 | 0x5400, (uint64_t)v283);
      if (!v3)
      {
        uint64_t v139 = v285;
        uint64_t v140 = v286;
        if (v284) {
          int v141 = v284 | 0x10000;
        }
        else {
          int v141 = -65536;
        }
        sub_10008CAC4((uint64_t)v283);
        uint64_t v142 = v287;
        __int16 v143 = v288;
        v162 = &type metadata for FeatureUnit;
        unint64_t v163 = sub_10008CAF0();
        uint64_t v101 = swift_allocObject();
        *(void *)v161 = v101;
        *(void *)(v101 + 16) = v140;
        *(unsigned char *)(v101 + 24) = 0;
        *(void *)(v101 + 32) = v139;
        *(unsigned char *)(v101 + 42) = BYTE2(v141);
        *(_WORD *)(v101 + 40) = v141;
        *(void *)(v101 + 48) = v142;
        *(_WORD *)(v101 + 56) = v143;
        *(void *)(v101 + 80) = 0;
LABEL_119:
        *(void *)(v101 + 64) = _swiftEmptyArrayStorage;
        *(void *)(v101 + 72) = 0;
LABEL_122:
        sub_10008CA5C((uint64_t)v161, (uint64_t)&v164);
        goto LABEL_123;
      }
      return;
    default:
      unint64_t v166 = 0;
      long long v164 = 0u;
      long long v165 = 0u;
LABEL_123:
      sub_10008C9F4((uint64_t)&v164, (uint64_t)&v159);
      if (!v160)
      {
        sub_10001A918((uint64_t)&v159, &qword_100128940);
        goto LABEL_127;
      }
      sub_10000CF6C(&v159, (uint64_t)v161);
      v151 = v162;
      unint64_t v152 = v163;
      sub_10001A974(v161, (uint64_t)v162);
      if ((*(uint64_t (**)(ValueMetadata *, unint64_t))(v152 + 16))(v151, v152))
      {
        sub_10001ABC4((uint64_t)v161);
LABEL_127:
        sub_10008CA5C((uint64_t)&v164, a3);
        return;
      }
      sub_10002E81C(0x2064696C61766E49, 0xEE00797469746E65, 0x2928797469746E65, (void *)0xE800000000000000, 0xD00000000000001DLL, 0x80000001000E4940, 882);
      sub_10001A918((uint64_t)&v164, &qword_100128940);
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)(a3 + 32) = 0;
      sub_10001ABC4((uint64_t)v161);
      return;
  }
}

uint64_t sub_100089F98(unsigned char *a1, __int16 a2)
{
  unsigned __int8 v2 = HIBYTE(a2);
  uint64_t v4 = (unsigned char *)USBDescriptor.usbDescriptor()((uint64_t)a1, a2);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (v5 <= 0xE)
      {
        return sub_100082334(v4, &v4[v5]);
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        __DataStorage.init(bytes:length:)();
        return v5 << 32;
      }
    }
    else
    {
      return 0;
    }
  }
  else if (v2 - 77 < 8 || v2 == 74)
  {
    return sub_1000823F8(a1, *(unsigned __int16 *)a1);
  }
  else
  {
    return 0;
  }
}

uint64_t USBDescriptor.usbDescriptor()(uint64_t a1, __int16 a2)
{
  uint64_t result = 0;
  switch(HIBYTE(a2))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4B:
    case 0x4C:
      uint64_t result = a1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t USBDescriptor.descriptorTypeName.getter(uint64_t a1, unsigned int a2)
{
  char v2 = a2;
  unsigned int v4 = a2 >> 8;
  uint64_t v5 = type metadata accessor for Mirror();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int16 v8 = (char *)&v13[-2] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = &type metadata for USBDescriptor;
  *(void *)&long long v12 = a1;
  BYTE8(v12) = v2;
  BYTE9(v12) = v4;
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  sub_100088314(&v12);
  swift_release();
  if (!v13[3])
  {
    sub_10001A918((uint64_t)&v12, &qword_100127CD0);
LABEL_5:
    *(void *)&long long v12 = a1;
    BYTE8(v12) = v2;
    BYTE9(v12) = v4;
    uint64_t v9 = String.init<A>(describing:)();
    goto LABEL_6;
  }
  uint64_t v10 = *((void *)&v12 + 1);
  uint64_t v9 = v12;
  sub_10001ABC4((uint64_t)v13);
  if (!v10) {
    goto LABEL_5;
  }
LABEL_6:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

void USBDescriptor.hash(into:)(uint64_t a1, Swift::UInt a2, __int16 a3)
{
  Swift::UInt8 v3 = a3;
  switch(HIBYTE(a3))
  {
    case 1:
      Swift::UInt v5 = 1;
      goto LABEL_89;
    case 2:
      Swift::UInt v5 = 2;
      goto LABEL_89;
    case 3:
      Swift::UInt v5 = 3;
      goto LABEL_89;
    case 4:
      Swift::UInt v5 = 4;
      goto LABEL_89;
    case 5:
      Swift::UInt v5 = 5;
      goto LABEL_89;
    case 6:
      Swift::UInt v5 = 6;
      goto LABEL_89;
    case 7:
      Swift::UInt v5 = 7;
      goto LABEL_89;
    case 8:
      Swift::UInt v5 = 8;
      goto LABEL_89;
    case 9:
      Swift::UInt v5 = 9;
      goto LABEL_89;
    case 0xA:
      Swift::UInt v5 = 10;
      goto LABEL_89;
    case 0xB:
      Swift::UInt v5 = 11;
      goto LABEL_89;
    case 0xC:
      Swift::UInt v5 = 12;
      goto LABEL_89;
    case 0xD:
      Swift::UInt v5 = 13;
      goto LABEL_89;
    case 0xE:
      Swift::UInt v5 = 14;
      goto LABEL_89;
    case 0xF:
      Swift::UInt v5 = 15;
      goto LABEL_89;
    case 0x10:
      Swift::UInt v5 = 16;
      goto LABEL_89;
    case 0x11:
      Swift::UInt v5 = 17;
      goto LABEL_89;
    case 0x12:
      Swift::UInt v5 = 18;
      goto LABEL_89;
    case 0x13:
      Swift::UInt v5 = 19;
      goto LABEL_89;
    case 0x14:
      Swift::UInt v5 = 20;
      goto LABEL_89;
    case 0x15:
      Swift::UInt v6 = 21;
      goto LABEL_25;
    case 0x16:
      Swift::UInt v6 = 22;
LABEL_25:
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(a2);
      Hasher._combine(_:)(v3);
      return;
    case 0x17:
      Swift::UInt v5 = 23;
      goto LABEL_89;
    case 0x18:
      Swift::UInt v5 = 24;
      goto LABEL_89;
    case 0x19:
      Swift::UInt v5 = 25;
      goto LABEL_89;
    case 0x1A:
      Swift::UInt v5 = 26;
      goto LABEL_89;
    case 0x1B:
      Swift::UInt v5 = 27;
      goto LABEL_89;
    case 0x1C:
      Swift::UInt v5 = 28;
      goto LABEL_89;
    case 0x1D:
      Swift::UInt v5 = 29;
      goto LABEL_89;
    case 0x1E:
      Swift::UInt v5 = 30;
      goto LABEL_89;
    case 0x1F:
      Swift::UInt v5 = 31;
      goto LABEL_89;
    case 0x20:
      Swift::UInt v5 = 32;
      goto LABEL_89;
    case 0x21:
      Swift::UInt v5 = 33;
      goto LABEL_89;
    case 0x22:
      Swift::UInt v5 = 34;
      goto LABEL_89;
    case 0x23:
      Swift::UInt v5 = 35;
      goto LABEL_89;
    case 0x24:
      Swift::UInt v5 = 36;
      goto LABEL_89;
    case 0x25:
      Swift::UInt v5 = 37;
      goto LABEL_89;
    case 0x26:
      Swift::UInt v5 = 38;
      goto LABEL_89;
    case 0x27:
      Swift::UInt v5 = 39;
      goto LABEL_89;
    case 0x28:
      Swift::UInt v5 = 40;
      goto LABEL_89;
    case 0x29:
      Swift::UInt v5 = 41;
      goto LABEL_89;
    case 0x2A:
      Swift::UInt v5 = 42;
      goto LABEL_89;
    case 0x2B:
      Swift::UInt v5 = 43;
      goto LABEL_89;
    case 0x2C:
      Swift::UInt v5 = 44;
      goto LABEL_89;
    case 0x2D:
      Swift::UInt v5 = 45;
      goto LABEL_89;
    case 0x2E:
      Swift::UInt v5 = 46;
      goto LABEL_89;
    case 0x2F:
      Swift::UInt v5 = 47;
      goto LABEL_89;
    case 0x30:
      Swift::UInt v5 = 48;
      goto LABEL_89;
    case 0x31:
      Swift::UInt v5 = 49;
      goto LABEL_89;
    case 0x32:
      Swift::UInt v5 = 50;
      goto LABEL_89;
    case 0x33:
      Swift::UInt v5 = 51;
      goto LABEL_89;
    case 0x34:
      Swift::UInt v5 = 52;
      goto LABEL_89;
    case 0x35:
      Swift::UInt v5 = 53;
      goto LABEL_89;
    case 0x36:
      Swift::UInt v5 = 54;
      goto LABEL_89;
    case 0x37:
      Swift::UInt v5 = 55;
      goto LABEL_89;
    case 0x38:
      Swift::UInt v5 = 56;
      goto LABEL_89;
    case 0x39:
      Swift::UInt v5 = 57;
      goto LABEL_89;
    case 0x3A:
      Swift::UInt v5 = 58;
      goto LABEL_89;
    case 0x3B:
      Swift::UInt v5 = 59;
      goto LABEL_89;
    case 0x3C:
      Swift::UInt v5 = 60;
      goto LABEL_89;
    case 0x3D:
      Swift::UInt v5 = 61;
      goto LABEL_89;
    case 0x3E:
      Swift::UInt v5 = 62;
      goto LABEL_89;
    case 0x3F:
      Swift::UInt v5 = 63;
      goto LABEL_89;
    case 0x40:
      Swift::UInt v5 = 64;
      goto LABEL_89;
    case 0x41:
      Swift::UInt v5 = 65;
      goto LABEL_89;
    case 0x42:
      Swift::UInt v5 = 66;
      goto LABEL_89;
    case 0x43:
      Swift::UInt v5 = 67;
      goto LABEL_89;
    case 0x44:
      Swift::UInt v5 = 68;
      goto LABEL_89;
    case 0x45:
      Swift::UInt v5 = 69;
      goto LABEL_89;
    case 0x46:
      Swift::UInt v5 = 70;
      goto LABEL_89;
    case 0x47:
      Swift::UInt v5 = 71;
      goto LABEL_89;
    case 0x48:
      Swift::UInt v5 = 72;
      goto LABEL_89;
    case 0x49:
      Swift::UInt v5 = 73;
      goto LABEL_89;
    case 0x4A:
      Swift::UInt v5 = 74;
      goto LABEL_89;
    case 0x4B:
      Swift::UInt v5 = 75;
      goto LABEL_89;
    case 0x4C:
      Swift::UInt v5 = 76;
      goto LABEL_89;
    case 0x4D:
      Swift::UInt v5 = 77;
      goto LABEL_89;
    case 0x4E:
      Swift::UInt v5 = 78;
      goto LABEL_89;
    case 0x4F:
      Swift::UInt v5 = 79;
      goto LABEL_89;
    case 0x50:
      Swift::UInt v5 = 80;
      goto LABEL_89;
    case 0x51:
      Swift::UInt v5 = 81;
      goto LABEL_89;
    case 0x52:
      Swift::UInt v5 = 82;
      goto LABEL_89;
    case 0x53:
      Swift::UInt v5 = 83;
      goto LABEL_89;
    case 0x54:
      Swift::UInt v5 = 84;
      goto LABEL_89;
    case 0x55:
      Swift::UInt v5 = 85;
      goto LABEL_89;
    default:
      Swift::UInt v5 = 0;
LABEL_89:
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(a2);
      return;
  }
}

Swift::Int USBDescriptor.hashValue.getter(Swift::UInt a1, __int16 a2)
{
  Hasher.init(_seed:)();
  USBDescriptor.hash(into:)((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_10008A814()
{
  Swift::UInt v1 = *(void *)v0;
  __int16 v2 = *(_WORD *)(v0 + 8);
  Hasher.init(_seed:)();
  USBDescriptor.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_10008A864(uint64_t a1)
{
  USBDescriptor.hash(into:)(a1, *(void *)v1, *(_WORD *)(v1 + 8));
}

Swift::Int sub_10008A870()
{
  Swift::UInt v1 = *(void *)v0;
  __int16 v2 = *(_WORD *)(v0 + 8);
  Hasher.init(_seed:)();
  USBDescriptor.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

BOOL sub_10008A8BC(uint64_t a1, uint64_t a2)
{
  return _s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(*(void *)a1, *(_WORD *)(a1 + 8), *(void *)a2, *(_WORD *)(a2 + 8));
}

Swift::Bool __swiftcall USBDescriptorControl.supportsRange()()
{
  return ((v0 >> 18) & 0x3C | (v0 >> 6)) == 22;
}

void USBDescriptorControl.hash(into:)(uint64_t a1, unsigned int a2)
{
  switch((a2 >> 18) & 0x3C | (a2 >> 6))
  {
    case 1u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 1;
      goto LABEL_56;
    case 2u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 2;
      goto LABEL_56;
    case 3u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 3;
      goto LABEL_56;
    case 4u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 4;
      goto LABEL_56;
    case 5u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 5;
      goto LABEL_56;
    case 6u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 6;
      goto LABEL_56;
    case 7u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 7;
      goto LABEL_56;
    case 8u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 8;
      goto LABEL_56;
    case 9u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 9;
      goto LABEL_56;
    case 0xAu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 10;
      goto LABEL_56;
    case 0xBu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 11;
      goto LABEL_56;
    case 0xCu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 12;
      goto LABEL_56;
    case 0xDu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 13;
      goto LABEL_56;
    case 0xEu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 14;
      goto LABEL_56;
    case 0xFu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 15;
      goto LABEL_56;
    case 0x10u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 16;
      goto LABEL_56;
    case 0x11u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 17;
      goto LABEL_56;
    case 0x12u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 18;
      goto LABEL_56;
    case 0x13u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 19;
      goto LABEL_56;
    case 0x14u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 20;
      goto LABEL_56;
    case 0x15u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 21;
      goto LABEL_56;
    case 0x16u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 22;
      goto LABEL_56;
    case 0x17u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 23;
      goto LABEL_56;
    case 0x18u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 24;
      goto LABEL_56;
    case 0x19u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 25;
      goto LABEL_56;
    case 0x1Au:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 26;
      goto LABEL_56;
    case 0x1Bu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 27;
      goto LABEL_56;
    case 0x1Cu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 28;
      goto LABEL_56;
    case 0x1Du:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 29;
      goto LABEL_56;
    case 0x1Eu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 30;
      goto LABEL_56;
    case 0x1Fu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 31;
      goto LABEL_56;
    case 0x20u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 32;
      goto LABEL_56;
    case 0x21u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 33;
      goto LABEL_56;
    case 0x22u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 34;
      goto LABEL_56;
    case 0x23u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 35;
      goto LABEL_56;
    case 0x24u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 36;
      goto LABEL_56;
    case 0x25u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 37;
      goto LABEL_56;
    case 0x26u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 38;
      goto LABEL_56;
    case 0x27u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 39;
      goto LABEL_56;
    case 0x28u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 40;
      goto LABEL_56;
    case 0x29u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 41;
      goto LABEL_56;
    case 0x2Au:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 42;
      goto LABEL_56;
    case 0x2Bu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 43;
      goto LABEL_56;
    case 0x2Cu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 44;
      goto LABEL_56;
    case 0x2Du:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 45;
      goto LABEL_56;
    case 0x2Eu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 46;
      goto LABEL_56;
    case 0x2Fu:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 47;
      goto LABEL_56;
    case 0x30u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 48;
      goto LABEL_56;
    case 0x31u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 49;
      goto LABEL_56;
    case 0x32u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 50;
      goto LABEL_56;
    case 0x33u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 51;
      goto LABEL_56;
    case 0x34u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 52;
      goto LABEL_56;
    case 0x35u:
      unsigned int v4 = a2 >> 8;
      unsigned int v3 = HIWORD(a2) & 0xF;
      Swift::UInt v5 = 53;
LABEL_56:
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(a2 & 1);
      Hasher._combine(_:)(v4);
      break;
    default:
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(a2 & 1);
      Hasher._combine(_:)(BYTE1(a2));
      unsigned int v3 = BYTE2(a2);
      break;
  }
  Hasher._combine(_:)(v3);
}

BOOL static USBDescriptorControl.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return sub_10008B5BC(a1 & 0xFFFFFF, a2 & 0xFFFFFF);
}

Swift::Int USBDescriptorControl.hashValue.getter(int a1)
{
  Hasher.init(_seed:)();
  USBDescriptorControl.hash(into:)((uint64_t)v3, a1 & 0xFFFFFF);
  return Hasher._finalize()();
}

Swift::Int sub_10008ADFC()
{
  unsigned int v1 = *v0 | (*((unsigned __int8 *)v0 + 2) << 16);
  Hasher.init(_seed:)();
  USBDescriptorControl.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_10008AE4C(uint64_t a1)
{
  USBDescriptorControl.hash(into:)(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16));
}

Swift::Int sub_10008AE5C()
{
  unsigned int v1 = *v0 | (*((unsigned __int8 *)v0 + 2) << 16);
  Hasher.init(_seed:)();
  USBDescriptorControl.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

BOOL sub_10008AEA8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10008B5BC(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

BOOL _s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4)
{
  switch(HIBYTE(a2))
  {
    case 1:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 1;
      return v6 && v5;
    case 2:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 2;
      return v6 && v5;
    case 3:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 3;
      return v6 && v5;
    case 4:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 4;
      return v6 && v5;
    case 5:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 5;
      return v6 && v5;
    case 6:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 6;
      return v6 && v5;
    case 7:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 7;
      return v6 && v5;
    case 8:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 8;
      return v6 && v5;
    case 9:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 9;
      return v6 && v5;
    case 0xA:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 10;
      return v6 && v5;
    case 0xB:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 11;
      return v6 && v5;
    case 0xC:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 12;
      return v6 && v5;
    case 0xD:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 13;
      return v6 && v5;
    case 0xE:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 14;
      return v6 && v5;
    case 0xF:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 15;
      return v6 && v5;
    case 0x10:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 16;
      return v6 && v5;
    case 0x11:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 17;
      return v6 && v5;
    case 0x12:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 18;
      return v6 && v5;
    case 0x13:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 19;
      return v6 && v5;
    case 0x14:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 20;
      return v6 && v5;
    case 0x15:
      BOOL result = 0;
      if (HIBYTE(a4) != 21) {
        return result;
      }
      goto LABEL_26;
    case 0x16:
      BOOL result = 0;
      if (HIBYTE(a4) == 22)
      {
LABEL_26:
        if (a1 == a3) {
          return static tADCControlRequestParameterBlockLayout.__derived_enum_equals(_:_:)(a2, a4);
        }
      }
      return result;
    case 0x17:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 23;
      return v6 && v5;
    case 0x18:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 24;
      return v6 && v5;
    case 0x19:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 25;
      return v6 && v5;
    case 0x1A:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 26;
      return v6 && v5;
    case 0x1B:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 27;
      return v6 && v5;
    case 0x1C:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 28;
      return v6 && v5;
    case 0x1D:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 29;
      return v6 && v5;
    case 0x1E:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 30;
      return v6 && v5;
    case 0x1F:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 31;
      return v6 && v5;
    case 0x20:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 32;
      return v6 && v5;
    case 0x21:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 33;
      return v6 && v5;
    case 0x22:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 34;
      return v6 && v5;
    case 0x23:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 35;
      return v6 && v5;
    case 0x24:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 36;
      return v6 && v5;
    case 0x25:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 37;
      return v6 && v5;
    case 0x26:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 38;
      return v6 && v5;
    case 0x27:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 39;
      return v6 && v5;
    case 0x28:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 40;
      return v6 && v5;
    case 0x29:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 41;
      return v6 && v5;
    case 0x2A:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 42;
      return v6 && v5;
    case 0x2B:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 43;
      return v6 && v5;
    case 0x2C:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 44;
      return v6 && v5;
    case 0x2D:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 45;
      return v6 && v5;
    case 0x2E:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 46;
      return v6 && v5;
    case 0x2F:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 47;
      return v6 && v5;
    case 0x30:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 48;
      return v6 && v5;
    case 0x31:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 49;
      return v6 && v5;
    case 0x32:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 50;
      return v6 && v5;
    case 0x33:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 51;
      return v6 && v5;
    case 0x34:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 52;
      return v6 && v5;
    case 0x35:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 53;
      return v6 && v5;
    case 0x36:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 54;
      return v6 && v5;
    case 0x37:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 55;
      return v6 && v5;
    case 0x38:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 56;
      return v6 && v5;
    case 0x39:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 57;
      return v6 && v5;
    case 0x3A:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 58;
      return v6 && v5;
    case 0x3B:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 59;
      return v6 && v5;
    case 0x3C:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 60;
      return v6 && v5;
    case 0x3D:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 61;
      return v6 && v5;
    case 0x3E:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 62;
      return v6 && v5;
    case 0x3F:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 63;
      return v6 && v5;
    case 0x40:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 64;
      return v6 && v5;
    case 0x41:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 65;
      return v6 && v5;
    case 0x42:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 66;
      return v6 && v5;
    case 0x43:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 67;
      return v6 && v5;
    case 0x44:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 68;
      return v6 && v5;
    case 0x45:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 69;
      return v6 && v5;
    case 0x46:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 70;
      return v6 && v5;
    case 0x47:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 71;
      return v6 && v5;
    case 0x48:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 72;
      return v6 && v5;
    case 0x49:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 73;
      return v6 && v5;
    case 0x4A:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 74;
      return v6 && v5;
    case 0x4B:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 75;
      return v6 && v5;
    case 0x4C:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 76;
      return v6 && v5;
    case 0x4D:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 77;
      return v6 && v5;
    case 0x4E:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 78;
      return v6 && v5;
    case 0x4F:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 79;
      return v6 && v5;
    case 0x50:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 80;
      return v6 && v5;
    case 0x51:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 81;
      return v6 && v5;
    case 0x52:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 82;
      return v6 && v5;
    case 0x53:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 83;
      return v6 && v5;
    case 0x54:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 84;
      return v6 && v5;
    case 0x55:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 85;
      return v6 && v5;
    default:
      BOOL v5 = a1 == a3;
      BOOL v6 = HIBYTE(a4) == 0;
      return v6 && v5;
  }
}

BOOL sub_10008B5BC(unsigned int a1, unsigned int a2)
{
  switch((a1 >> 18) & 0x3C | (a1 >> 6))
  {
    case 1u:
      BOOL v4 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v4 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 1 && v4;
      break;
    case 2u:
      BOOL v5 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v5 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 2 && v5;
      break;
    case 3u:
      BOOL v6 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v6 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 3 && v6;
      break;
    case 4u:
      BOOL v7 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v7 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 4 && v7;
      break;
    case 5u:
      BOOL v8 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v8 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 5 && v8;
      break;
    case 6u:
      BOOL v9 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v9 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 6 && v9;
      break;
    case 7u:
      BOOL v10 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v10 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 7 && v10;
      break;
    case 8u:
      BOOL v11 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v11 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 8 && v11;
      break;
    case 9u:
      BOOL v12 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v12 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 9 && v12;
      break;
    case 0xAu:
      BOOL v13 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v13 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0xA && v13;
      break;
    case 0xBu:
      BOOL v14 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v14 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0xB && v14;
      break;
    case 0xCu:
      BOOL v15 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v15 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0xC && v15;
      break;
    case 0xDu:
      BOOL v16 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v16 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0xD && v16;
      break;
    case 0xEu:
      BOOL v17 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v17 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0xE && v17;
      break;
    case 0xFu:
      BOOL v18 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v18 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0xF && v18;
      break;
    case 0x10u:
      BOOL v19 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v19 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x10 && v19;
      break;
    case 0x11u:
      BOOL v20 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v20 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x11 && v20;
      break;
    case 0x12u:
      BOOL v21 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v21 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x12 && v21;
      break;
    case 0x13u:
      BOOL v22 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v22 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x13 && v22;
      break;
    case 0x14u:
      BOOL v23 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v23 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x14 && v23;
      break;
    case 0x15u:
      BOOL v24 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v24 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x15 && v24;
      break;
    case 0x16u:
      BOOL v25 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v25 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x16 && v25;
      break;
    case 0x17u:
      BOOL v26 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v26 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x17 && v26;
      break;
    case 0x18u:
      BOOL v27 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v27 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x18 && v27;
      break;
    case 0x19u:
      BOOL v28 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v28 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x19 && v28;
      break;
    case 0x1Au:
      BOOL v29 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v29 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x1A && v29;
      break;
    case 0x1Bu:
      BOOL v30 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v30 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x1B && v30;
      break;
    case 0x1Cu:
      BOOL v31 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v31 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x1C && v31;
      break;
    case 0x1Du:
      BOOL v32 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v32 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x1D && v32;
      break;
    case 0x1Eu:
      BOOL v33 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v33 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x1E && v33;
      break;
    case 0x1Fu:
      BOOL v34 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v34 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x1F && v34;
      break;
    case 0x20u:
      BOOL v35 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v35 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x20 && v35;
      break;
    case 0x21u:
      BOOL v36 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v36 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x21 && v36;
      break;
    case 0x22u:
      BOOL v37 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v37 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x22 && v37;
      break;
    case 0x23u:
      BOOL v38 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v38 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x23 && v38;
      break;
    case 0x24u:
      BOOL v39 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v39 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x24 && v39;
      break;
    case 0x25u:
      BOOL v40 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v40 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x25 && v40;
      break;
    case 0x26u:
      BOOL v41 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v41 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x26 && v41;
      break;
    case 0x27u:
      BOOL v42 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v42 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x27 && v42;
      break;
    case 0x28u:
      BOOL v43 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v43 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x28 && v43;
      break;
    case 0x29u:
      BOOL v44 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v44 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x29 && v44;
      break;
    case 0x2Au:
      BOOL v45 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v45 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x2A && v45;
      break;
    case 0x2Bu:
      BOOL v46 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v46 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x2B && v46;
      break;
    case 0x2Cu:
      BOOL v47 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v47 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x2C && v47;
      break;
    case 0x2Du:
      BOOL v48 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v48 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x2D && v48;
      break;
    case 0x2Eu:
      BOOL v49 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v49 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x2E && v49;
      break;
    case 0x2Fu:
      BOOL v50 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v50 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x2F && v50;
      break;
    case 0x30u:
      BOOL v51 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v51 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x30 && v51;
      break;
    case 0x31u:
      BOOL v52 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v52 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x31 && v52;
      break;
    case 0x32u:
      BOOL v53 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v53 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x32 && v53;
      break;
    case 0x33u:
      BOOL v54 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v54 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x33 && v54;
      break;
    case 0x34u:
      BOOL v55 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v55 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x34 && v55;
      break;
    case 0x35u:
      BOOL v56 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v56 = 0;
      }
      BOOL result = ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x35 && v56;
      break;
    default:
      BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xFF0000) == 0;
      if (((a1 & 1) == 0) == (a2 & 1)) {
        BOOL v2 = 0;
      }
      if ((a2 >> 18) & 0x3C | (a2 >> 6)) {
        BOOL result = 0;
      }
      else {
        BOOL result = v2;
      }
      break;
  }
  return result;
}

unint64_t sub_10008C6CC()
{
  unint64_t result = qword_100129508;
  if (!qword_100129508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129508);
  }
  return result;
}

unint64_t sub_10008C724()
{
  unint64_t result = qword_100129510;
  if (!qword_100129510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129510);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for USBDescriptor(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for USBDescriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xAB && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 171);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 <= 0x55) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for USBDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xAA)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 171;
    if (a3 >= 0xAB) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xAB) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10008C818(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

uint64_t sub_10008C820(uint64_t result, char a2)
{
  *(unsigned char *)(result + 9) = a2;
  return result;
}

ValueMetadata *type metadata accessor for USBDescriptor()
{
  return &type metadata for USBDescriptor;
}

uint64_t getEnumTagSinglePayload for USBDescriptorControl(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7CB)
  {
    if ((a2 + 33552437) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16775221;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16775221;
      }
    }
  }
  unsigned int v4 = ((((8 * *((unsigned __int8 *)a1 + 2)) & 0x780 | (*a1 >> 1)) >> 5) & 0xFFFFF83F | (((*a1 >> 1) & 0x1F) << 6)) ^ 0x7FF;
  if (v4 >= 0x7CA) {
    unsigned int v4 = -1;
  }
  return v4 + 1;
}

uint64_t storeEnumTagSinglePayload for USBDescriptorControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33552437) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0x7CA) {
    int v3 = 0;
  }
  if (a2 > 0x7CA)
  {
    *(_WORD *)unint64_t result = a2 - 1995;
    *(unsigned char *)(result + 2) = (a2 - 1995) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 1995) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_WORD *)unint64_t result = (-a2 >> 5) & 0x3E | ((-(__int16)a2 & 0x7FF) << 6) & 0xFE;
      *(unsigned char *)(result + 2) = ((((-a2 >> 5) & 0x3E | ((-a2 & 0x7FF) << 6)) - (a2 << 18)) & 0xF000FE) >> 16;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_10008C974(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 2) >> 2) & 0x3C | (*(_WORD *)a1 >> 6);
}

unsigned __int16 *sub_10008C98C(unsigned __int16 *result)
{
  int v1 = *result | (*((unsigned __int8 *)result + 2) << 16);
  *result &= 0xFF3Fu;
  *((unsigned char *)result + 2) = BYTE2(v1) & 0xF;
  return result;
}

unsigned __int16 *sub_10008C9B0(unsigned __int16 *result, int a2)
{
  int v2 = ((a2 << 18) | ((a2 & 3) << 6)) & 0xF000F0 | (*result | (*((unsigned __int8 *)result + 2) << 16)) & 0xFFF01;
  *unint64_t result = ((a2 & 3) << 6) | *result & 0xFF01;
  *((unsigned char *)result + 2) = BYTE2(v2);
  return result;
}

ValueMetadata *type metadata accessor for USBDescriptorControl()
{
  return &type metadata for USBDescriptorControl;
}

uint64_t sub_10008C9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AC7C(&qword_100128940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008CA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AC7C(&qword_100128940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008CAC4(uint64_t a1)
{
  return a1;
}

unint64_t sub_10008CAF0()
{
  unint64_t result = qword_100129518;
  if (!qword_100129518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129518);
  }
  return result;
}

uint64_t sub_10008CB48(uint64_t a1)
{
  return a1;
}

unint64_t sub_10008CB78(unint64_t result)
{
  if (result >> 62 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10008CB90()
{
  unint64_t result = qword_100129520;
  if (!qword_100129520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129520);
  }
  return result;
}

uint64_t sub_10008CBE4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_10008CC24(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 56);
  swift_bridgeObjectRelease();
  sub_10008CB78(v2);
  return a1;
}

unint64_t sub_10008CC68()
{
  unint64_t result = qword_100129528;
  if (!qword_100129528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129528);
  }
  return result;
}

uint64_t sub_10008CCBC()
{
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 96);
  if (v1 >> 60 != 15) {
    sub_100038688(*(void *)(v0 + 88), v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10008CD1C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008CD48()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10008CD90()
{
  return sub_100053C48(80);
}

uint64_t sub_10008CD98()
{
  return sub_100053C48(64);
}

unint64_t sub_10008CDA0()
{
  unint64_t result = qword_100129530;
  if (!qword_100129530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129530);
  }
  return result;
}

uint64_t sub_10008CDF4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 68, 7);
}

uint64_t sub_10008CE2C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_10008CE7C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008CEB4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10008CF04(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008CF30()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10008CF74(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008CFAC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10008CFFC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008D028(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008D070(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008D0A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008D0DC(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 6);
  if (v1 != 3)
  {
    if (v1 == 2)
    {
      switch((*(unsigned char *)(result + 7) >> 4) | (16 * *(unsigned char *)(result + 7)))
      {
        case 0:
        case 2:
        case 3:
        case 4:
          return result;
        default:
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v2 = 42;
          uint64_t v3 = 428;
          goto LABEL_10;
      }
    }
    else
    {
      if (v1 != 1)
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v2 = 43;
        uint64_t v3 = 433;
        goto LABEL_10;
      }
      if (((*(unsigned char *)(result + 7) >> 4) | (16 * *(unsigned char *)(result + 7))) >= 5u
        || ((0x1Du >> ((*(unsigned char *)(result + 7) >> 4) | (16 * *(unsigned char *)(result + 7)))) & 1) == 0)
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v2 = 42;
        uint64_t v3 = 418;
LABEL_10:
        *(void *)(v2 + 8) = 0;
        *(void *)(v2 + 16) = 0xE000000000000000;
        *(void *)(v2 + 24) = 0xD000000000000015;
        *(void *)(v2 + 32) = 0x80000001000E4990;
        *(void *)(v2 + 40) = 0xD00000000000001DLL;
        *(void *)(v2 + 48) = 0x80000001000E4940;
        *(void *)(v2 + 56) = v3;
        return swift_willThrow();
      }
    }
  }
  return result;
}

uint64_t sub_10008D2EC(uint64_t result)
{
  if (*(unsigned char *)(result + 1) == 36 && *(unsigned __int8 *)(result + 2) - 1 >= 0xD)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v1 = 41;
    *(void *)(v1 + 8) = 0;
    *(void *)(v1 + 16) = 0xE000000000000000;
    *(void *)(v1 + 24) = 0xD00000000000001CLL;
    *(void *)(v1 + 32) = 0x80000001000E4A10;
    *(void *)(v1 + 40) = 0xD00000000000001DLL;
    *(void *)(v1 + 48) = 0x80000001000E4940;
    *(void *)(v1 + 56) = 123;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_10008D3B8(uint64_t result)
{
  if (*(unsigned char *)(result + 1) == 36
    && ((*(unsigned char *)(result + 2) - 1) >= 0x10u || ((0xFFF7u >> (*(unsigned char *)(result + 2) - 1)) & 1) == 0))
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v1 = 41;
    *(void *)(v1 + 8) = 0;
    *(void *)(v1 + 16) = 0xE000000000000000;
    *(void *)(v1 + 24) = 0xD00000000000001CLL;
    *(void *)(v1 + 32) = 0x80000001000E4A30;
    *(void *)(v1 + 40) = 0xD00000000000001DLL;
    *(void *)(v1 + 48) = 0x80000001000E4940;
    *(void *)(v1 + 56) = 173;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_10008D49C(uint64_t result, unsigned __int8 a2)
{
  switch((a2 >> 4) | (16 * a2))
  {
    case 0:
      if (*(unsigned char *)(result + 1) == 36)
      {
        switch(*(unsigned char *)(result + 2))
        {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
            return result;
          default:
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v2 = 41;
            *(void *)(v2 + 8) = 0;
            *(void *)(v2 + 16) = 0xE000000000000000;
            *(void *)(v2 + 24) = 0xD00000000000001CLL;
            *(void *)(v2 + 32) = 0x80000001000E49F0;
            *(void *)(v2 + 40) = 0xD00000000000001DLL;
            *(void *)(v2 + 48) = 0x80000001000E4940;
            uint64_t v3 = 77;
            goto LABEL_12;
        }
      }
      break;
    case 2:
      unint64_t result = sub_10008D2EC(result);
      break;
    case 3:
      unint64_t result = sub_10008D3B8(result);
      break;
    case 4:
      if (*(unsigned char *)(result + 1) == 33 && *(unsigned char *)(result + 2) != 1)
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v2 = 41;
        *(void *)(v2 + 8) = 0;
        *(void *)(v2 + 16) = 0xE000000000000000;
        *(void *)(v2 + 24) = 0xD00000000000001CLL;
        *(void *)(v2 + 32) = 0x80000001000E49D0;
        *(void *)(v2 + 40) = 0xD00000000000001DLL;
        *(void *)(v2 + 48) = 0x80000001000E4940;
        uint64_t v3 = 193;
        goto LABEL_12;
      }
      break;
    default:
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v2 = 42;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 16) = 0xE000000000000000;
      *(void *)(v2 + 24) = 0xD00000000000001DLL;
      *(void *)(v2 + 32) = 0x80000001000E49B0;
      *(void *)(v2 + 40) = 0xD00000000000001DLL;
      *(void *)(v2 + 48) = 0x80000001000E4940;
      uint64_t v3 = 374;
LABEL_12:
      *(void *)(v2 + 56) = v3;
      unint64_t result = swift_willThrow();
      break;
  }
  return result;
}

uint64_t sub_10008D774(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 1);
  if (v1 == 37)
  {
    if (*(unsigned char *)(result + 2) == 1) {
      return result;
    }
    uint64_t v3 = 244;
LABEL_14:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v4 = 41;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0xE000000000000000;
    *(void *)(v4 + 24) = 0xD00000000000001ELL;
    *(void *)(v4 + 32) = 0x80000001000E4A90;
    *(void *)(v4 + 40) = 0xD00000000000001DLL;
    *(void *)(v4 + 48) = 0x80000001000E4940;
    *(void *)(v4 + 56) = v3;
    return swift_willThrow();
  }
  if (v1 == 36)
  {
    int v2 = *(unsigned __int8 *)(result + 2);
    if (v2 != 1 && v2 != 3 && v2 != 2)
    {
      uint64_t v3 = 234;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_10008D8A8(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 1);
  if (v1 == 37)
  {
    if (*(unsigned char *)(result + 2) == 1) {
      return result;
    }
    uint64_t v2 = 288;
LABEL_10:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v3 = 41;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0xE000000000000000;
    *(void *)(v3 + 24) = 0xD00000000000001ELL;
    *(void *)(v3 + 32) = 0x80000001000E4AB0;
    *(void *)(v3 + 40) = 0xD00000000000001DLL;
    *(void *)(v3 + 48) = 0x80000001000E4940;
    *(void *)(v3 + 56) = v2;
    return swift_willThrow();
  }
  if (v1 == 36 && (*(unsigned char *)(result + 2) - 1) >= 4u)
  {
    uint64_t v2 = 277;
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10008D9A0(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 1);
  if (v1 == 37)
  {
    if (*(unsigned char *)(result + 2) == 1) {
      return result;
    }
    uint64_t v3 = 327;
LABEL_12:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v4 = 41;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0xE000000000000000;
    *(void *)(v4 + 24) = 0xD00000000000001ELL;
    *(void *)(v4 + 32) = 0x80000001000E4AD0;
    *(void *)(v4 + 40) = 0xD00000000000001DLL;
    *(void *)(v4 + 48) = 0x80000001000E4940;
    *(void *)(v4 + 56) = v3;
    return swift_willThrow();
  }
  if (v1 == 36)
  {
    int v2 = *(unsigned __int8 *)(result + 2);
    if (v2 != 1 && v2 != 2)
    {
      uint64_t v3 = 317;
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t sub_10008DAA4(uint64_t result, unsigned __int8 a2)
{
  switch((a2 >> 4) | (16 * a2))
  {
    case 0:
      unint64_t result = sub_10008D774(result);
      break;
    case 2:
      unint64_t result = sub_10008D8A8(result);
      break;
    case 3:
      unint64_t result = sub_10008D9A0(result);
      break;
    case 4:
      if (*(unsigned char *)(result + 1) == 33 && *(unsigned char *)(result + 2) != 2)
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v2 = 41;
        unint64_t v3 = 0xD00000000000001ELL;
        unint64_t v4 = 0x80000001000E4A70;
        uint64_t v5 = 352;
        goto LABEL_11;
      }
      break;
    default:
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v2 = 42;
      unint64_t v3 = 0xD00000000000001FLL;
      unint64_t v4 = 0x80000001000E4A50;
      uint64_t v5 = 393;
LABEL_11:
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 16) = 0xE000000000000000;
      *(void *)(v2 + 24) = v3;
      *(void *)(v2 + 32) = v4;
      *(void *)(v2 + 40) = 0xD00000000000001DLL;
      *(void *)(v2 + 48) = 0x80000001000E4940;
      *(void *)(v2 + 56) = v5;
      unint64_t result = swift_willThrow();
      break;
  }
  return result;
}

uint64_t sub_10008DC54(unsigned char *a1, __int16 a2)
{
  unint64_t v3 = a1;
  switch(a1[1])
  {
    case 4:
      if (a1[5] == 1)
      {
        uint64_t v4 = sub_10008D0DC((uint64_t)a1);
        if (!v2) {
          return v4;
        }
      }
      return (uint64_t)v3;
    case 5:
      if (*a1 == 9)
      {
        if (HIBYTE(a2) == 255)
        {
LABEL_9:
          sub_10002E81C(0xD000000000000027, 0x80000001000E4960, 0x5F3A5F2874696E69, (void *)0xEA0000000000293ALL, 0xD00000000000001DLL, 0x80000001000E4940, 519);
        }
        else
        {
          switch(HIBYTE(a2))
          {
            case 2:
              return (uint64_t)v3;
            case 3:
              goto LABEL_9;
            default:
              if ((_BYTE)a2) {
                goto LABEL_9;
              }
              break;
          }
        }
      }
      return (uint64_t)v3;
    case 0xB:
    case 0x30:
    case 0x31:
      return (uint64_t)v3;
    default:
      if (HIBYTE(a2) == 255) {
        return (uint64_t)v3;
      }
      if (HIBYTE(a2) == 1)
      {
        uint64_t v4 = sub_10008DAA4((uint64_t)a1, a2);
        if (v2) {
          return (uint64_t)v3;
        }
        return v4;
      }
      if (!HIBYTE(a2))
      {
        uint64_t v4 = sub_10008D49C((uint64_t)a1, a2);
        if (!v2) {
          return v4;
        }
      }
      return (uint64_t)v3;
  }
}

uint64_t sub_10008DF1C(uint64_t result)
{
  if (*(_WORD *)(result + 2) == 1)
  {
    uint64_t v1 = 576;
    switch(*(_WORD *)(result + 4))
    {
      case 1:
      case 2:
      case 3:
      case 5:
      case 7:
      case 0xB:
      case 0xE:
        return result;
      default:
        goto LABEL_4;
    }
  }
  else
  {
    uint64_t v1 = 579;
LABEL_4:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v2 = 33;
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0xE000000000000000;
    *(void *)(v2 + 24) = 0x293A5F2874696E69;
    *(void *)(v2 + 32) = 0xE800000000000000;
    *(void *)(v2 + 40) = 0xD00000000000001DLL;
    *(void *)(v2 + 48) = 0x80000001000E4940;
    *(void *)(v2 + 56) = v1;
    return swift_willThrow();
  }
}

uint64_t sub_10008E074@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *a1;
  BOOL v6 = (void *)a1[1];
  uint64_t v8 = (uint64_t)(a1 + 2);
  *(void *)&long long v19 = *a1;
  *((void *)&v19 + 1) = v6;
  sub_10001A1C8((uint64_t)(a1 + 2), (uint64_t)v20);
  if (v6)
  {
    swift_bridgeObjectRetain();
    sub_10001ABC4((uint64_t)v20);
    if (*(void *)(a2 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v9 = sub_100019914(v7, (uint64_t)v6);
      if (v10)
      {
        sub_10001A9B8(*(void *)(a2 + 56) + 40 * v9, (uint64_t)&v16);
      }
      else
      {
        uint64_t v18 = 0;
        long long v16 = 0u;
        long long v17 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v17 + 1))
      {
        sub_10000CF6C(&v16, (uint64_t)&v19);
        BOOL v11 = &v19;
LABEL_11:
        sub_10000CF6C(v11, (uint64_t)v21);
        *a3 = v7;
        a3[1] = (uint64_t)v6;
        return sub_10000CF6C(v21, (uint64_t)(a3 + 2));
      }
    }
    else
    {
      uint64_t v18 = 0;
      long long v16 = 0u;
      long long v17 = 0u;
    }
    sub_10008E394((uint64_t)&v16);
    long long v19 = *(_OWORD *)a1;
    sub_10001A1C8(v8, (uint64_t)v20);
    sub_10000AC7C(&qword_100129540);
    if (swift_dynamicCast())
    {
      sub_10000CF6C(v14, (uint64_t)&v16);
      BOOL v11 = &v16;
      goto LABEL_11;
    }
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_10008E394((uint64_t)v14);
    *(void *)&long long v19 = 0;
    *((void *)&v19 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    *(void *)&long long v19 = 0xD000000000000029;
    *((void *)&v19 + 1) = 0x80000001000E22F0;
    v13._countAndFlagsBits = v7;
    v13._object = v6;
    String.append(_:)(v13);
  }
  else
  {
    sub_10001ABC4((uint64_t)v20);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008E2DC()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10008E30C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void sub_10008E314(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_10008E31C(uint64_t a1)
{
  unint64_t v2 = sub_10008E5E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008E358(uint64_t a1)
{
  unint64_t v2 = sub_10008E5E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008E394(uint64_t a1)
{
  uint64_t v2 = sub_10000AC7C(&qword_100129538);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for Configuration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Configuration()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for Configuration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for SynthesizedEncodableKey(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Configuration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SynthesizedEncodableKey()
{
  return &type metadata for SynthesizedEncodableKey;
}

unint64_t sub_10008E53C()
{
  unint64_t result = qword_100129548;
  if (!qword_100129548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129548);
  }
  return result;
}

unint64_t sub_10008E594()
{
  unint64_t result = qword_100129550;
  if (!qword_100129550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129550);
  }
  return result;
}

unint64_t sub_10008E5E8()
{
  unint64_t result = qword_100129558;
  if (!qword_100129558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129558);
  }
  return result;
}

uint64_t ActiveStreamingInterface.function.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ActiveStreamingInterface.function.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*ActiveStreamingInterface.function.modify())()
{
  return j__swift_endAccess;
}

uint64_t ActiveControlInterface.controlInterface.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000693AC(v1 + 32, a1);
}

id ActiveControlInterface.usbDevice.getter()
{
  return *(id *)(v0 + 152);
}

uint64_t ActiveControlInterface.interruptEP.getter()
{
  return swift_retain();
}

uint64_t ActiveControlInterface.entityList.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActiveControlInterface.hasLatencyControl.getter()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 152) + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
  if (!v1) {
    return *(unsigned __int8 *)(v0 + 49);
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return *(unsigned __int8 *)(v0 + 49);
  }
  if (*(unsigned char *)(v1 + 32) == 22) {
    return 0;
  }
  if (v2 == 1) {
    return *(unsigned __int8 *)(v0 + 49);
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    if (*(unsigned char *)(v1 + i) == 22) {
      return 0;
    }
    if (v5 == v2) {
      return *(unsigned __int8 *)(v0 + 49);
    }
  }
  __break(1u);
  return result;
}

uint64_t ActiveStreamingInterface.interfaceNumber.getter()
{
  return *(unsigned __int8 *)(*(void *)(v0 + 32) + 2);
}

uint64_t ActiveControlInterface.interfaceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ActiveControlInterface.category.getter()
{
  return *(unsigned __int8 *)(v0 + 208);
}

uint64_t sub_10008E800(uint64_t a1, void *a2, int a3, uint64_t a4, char *a5, unint64_t a6)
{
  uint64_t v7 = v6;
  long long v58 = a5;
  unint64_t v59 = a6;
  int v61 = a3;
  uint64_t v60 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v11 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  Swift::String v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v14);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v15 - 8);
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  long long v16 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v6 + 112) = v16;
  *(_OWORD *)(v6 + 128) = *(_OWORD *)(a1 + 96);
  uint64_t v17 = *(void *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 48) = v18;
  long long v19 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 80) = v19;
  *(void *)(v6 + 144) = v17;
  *(void *)(v6 + 152) = a2;
  id v20 = v58;
  *(void *)(v6 + 168) = a4;
  *(void *)(v6 + 176) = v20;
  *(void *)(v6 + 184) = v59;
  unint64_t v59 = sub_10008F39C();
  long long v58 = a2;
  sub_100035ECC((void *)a1);
  static DispatchQoS.userInteractive.getter();
  uint64_t v63 = _swiftEmptyArrayStorage;
  sub_10008F3DC(&qword_1001291A8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000AC7C(&qword_1001291B0);
  sub_10008F424();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v60);
  BOOL v21 = v58;
  BOOL v22 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v7 + 192) = v22;
  uint64_t v23 = *(void *)&v21[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v23 && sub_10001925C(15, *(void *)&v21[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList])) {
    char v24 = 4;
  }
  else {
    char v24 = *(unsigned char *)(a1 + 16);
  }
  *(unsigned char *)(v7 + 208) = v24;
  if ((v61 & 1) == 0)
  {
    *(void *)(v7 + 200) = 0;
    goto LABEL_14;
  }
  BOOL v25 = *(void **)&v21[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject];
  if (!v25) {
    goto LABEL_20;
  }
  self;
  uint64_t v26 = swift_dynamicCastObjCClass();
  if (!v26)
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      unsigned __int8 v40 = *(unsigned char *)(*(void *)a1 + 2);
      BOOL v41 = v21;
      BOOL v42 = v22;
      uint64_t v43 = v62;
      BOOL v44 = sub_1000C5B18(v40, v22, (uint64_t)sub_10008EE6C, 0);
      uint64_t v62 = v43;
      if (v43)
      {

        sub_100035FC8((void *)a1);
        int v61 = 0;
        BOOL v21 = v42;
        goto LABEL_21;
      }
      BOOL v56 = v44;

      *(void *)(v7 + 200) = v56;
LABEL_14:
      uint64_t v31 = *(void *)(v7 + 128);
      if (v31 == 1)
      {

        sub_100035FC8((void *)a1);
        *(void *)(v7 + 160) = 0;
      }
      else
      {
        uint64_t v33 = *(void *)(v7 + 136);
        uint64_t v32 = *(void *)(v7 + 144);
        uint64_t v35 = *(void *)(v7 + 112);
        uint64_t v34 = *(void *)(v7 + 120);
        char v36 = *(unsigned char *)(v7 + 104);
        uint64_t v37 = *(void *)(v7 + 96);
        uint64_t v64 = *(void *)(v7 + 72);
        long long v65 = *(_OWORD *)(v7 + 80);
        __int16 v66 = v37 & 0x1FF;
        char v67 = v36 & 1;
        uint64_t v68 = v35;
        __int16 v69 = v34 & 0x1FF;
        uint64_t v70 = v31;
        uint64_t v71 = v33;
        uint64_t v72 = v32;
        unsigned __int8 v38 = *(unsigned char *)(*(void *)a1 + 7);
        sub_100035FC8((void *)a1);
        type metadata accessor for ActiveEndpoint();
        swift_allocObject();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000DB544((uint64_t)&v64, v21, v38);
        *(void *)(v7 + 160) = v39;
      }
      return v7;
    }
LABEL_20:
    sub_100035FC8((void *)a1);
    sub_10000CD54();
    uint64_t v45 = swift_allocError();
    *(unsigned char *)uint64_t v46 = 1;
    *(void *)(v46 + 8) = 0;
    *(void *)(v46 + 16) = 0xE000000000000000;
    *(void *)(v46 + 24) = 0xD000000000000055;
    *(void *)(v46 + 32) = 0x80000001000E4CC0;
    *(void *)(v46 + 40) = 0xD000000000000026;
    *(void *)(v46 + 48) = 0x80000001000E4C20;
    *(void *)(v46 + 56) = 74;
    uint64_t v62 = v45;
    swift_willThrow();
    int v61 = 0;
    goto LABEL_21;
  }
  BOOL v27 = (void *)v26;
  *(void *)(v7 + 200) = v26;
  if (!v23 || !sub_10001925C(17, v23))
  {
    id v30 = v25;
    goto LABEL_14;
  }
  uint64_t v63 = 0;
  id v28 = v25;
  if ([v27 setIdleTimeout:&v63 error:2000.0])
  {
    BOOL v29 = v63;

    goto LABEL_14;
  }
  BOOL v54 = v63;
  sub_100035FC8((void *)a1);
  uint64_t v55 = _convertNSErrorToError(_:)();

  uint64_t v62 = v55;
  swift_willThrow();

  int v61 = 1;
LABEL_21:

  swift_unknownObjectRelease();
  uint64_t v47 = *(void *)(v7 + 72);
  uint64_t v48 = *(void *)(v7 + 88);
  unint64_t v59 = *(void *)(v7 + 80);
  uint64_t v60 = v47;
  uint64_t v49 = *(void *)(v7 + 96);
  uint64_t v50 = *(void *)(v7 + 104);
  uint64_t v52 = *(void *)(v7 + 112);
  BOOL v51 = *(char **)(v7 + 120);
  uint64_t v57 = *(void *)(v7 + 128);
  long long v58 = v51;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001D1B8(v60, v59, v48, v49, v50, v52, (uint64_t)v58, v57);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (v61) {
  type metadata accessor for ActiveControlInterface();
  }
  swift_deallocPartialClassInstance();
  return v7;
}

void sub_10008EE6C(uint64_t a1, int a2)
{
  if (a2 == -536870896) {
    sub_10002E804(0xD000000000000018, 0x80000001000E4D20, 0xD000000000000055, (void *)0x80000001000E4CC0, 0xD000000000000026, 0x80000001000E4C20, 69);
  }
}

uint64_t ActiveControlInterface.entity(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 168);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v7 = v4 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10001A9B8(v7, (uint64_t)&v11);
      uint64_t v8 = v12;
      uint64_t v9 = v13;
      sub_10001A974(&v11, v12);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 48))(v8, v9) == a1) {
        break;
      }
      sub_10001ABC4((uint64_t)&v11);
      v7 += 40;
      if (!--v5) {
        goto LABEL_7;
      }
    }
    sub_10000CF6C(&v11, a2);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveControlInterface.processInterrupt(attribute:controlSelector:)(AUASDCore::AUAInterruptAttribute_optional attribute, Swift::UInt_optional controlSelector)
{
}

uint64_t ActiveControlInterface.deinit()
{
  swift_unknownObjectRelease();
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001D1B8(v9, v8, v1, v2, v3, v4, v5, v7);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t ActiveControlInterface.__deallocating_deinit()
{
  ActiveControlInterface.deinit();

  return swift_deallocClassInstance();
}

void sub_10008F0E4(char a1)
{
  if (a1 == 2)
  {
    sub_10002E804(0xD000000000000039, 0x80000001000E4C50, 0xD00000000000002CLL, (void *)0x80000001000E4BF0, 0xD000000000000026, 0x80000001000E4C20, 109);
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v1 = 2;
    *(void *)(v1 + 8) = 0;
    *(void *)(v1 + 16) = 0xE000000000000000;
    *(void *)(v1 + 24) = 0xD00000000000002CLL;
    *(void *)(v1 + 32) = 0x80000001000E4BF0;
    *(void *)(v1 + 40) = 0xD000000000000026;
    *(void *)(v1 + 48) = 0x80000001000E4C20;
    *(void *)(v1 + 56) = 108;
    swift_willThrow();
  }
}

uint64_t sub_10008F1D4()
{
  return sub_10008F3DC(&qword_100129560, type metadata accessor for tIOUSBDescriptorType);
}

unint64_t sub_10008F220()
{
  unint64_t result = qword_100129568;
  if (!qword_100129568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129568);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AUAControlInterfaceControlSelector(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008F340);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AUAControlInterfaceControlSelector()
{
  return &type metadata for AUAControlInterfaceControlSelector;
}

uint64_t type metadata accessor for ActiveControlInterface()
{
  return self;
}

unint64_t sub_10008F39C()
{
  unint64_t result = qword_1001291A0;
  if (!qword_1001291A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001291A0);
  }
  return result;
}

uint64_t sub_10008F3DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008F424()
{
  unint64_t result = qword_1001291B8;
  if (!qword_1001291B8)
  {
    sub_10001A584(&qword_1001291B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001291B8);
  }
  return result;
}

uint64_t sub_10008F480(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v6 = v2;
  int v7 = 12714112;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v9 = *(void *)(v6 + 24);
    uint64_t ObjectType = swift_getObjectType();
    LODWORD(v9) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v9 + 40))(ObjectType, v9);
    swift_unknownObjectRelease();
    if (v9 == 32) {
      int v7 = 12715904;
    }
    else {
      int v7 = 12714112;
    }
  }
  uint64_t v11 = swift_unknownObjectWeakLoadStrong();
  if (!v11)
  {
    uint64_t v75 = 0;
    memset(v74, 0, sizeof(v74));
    sub_10001A918((uint64_t)v74, &qword_100128040);
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v35 = 1;
    *(void *)(v35 + 8) = 0;
    *(void *)(v35 + 16) = 0xE000000000000000;
    *(void *)(v35 + 24) = 0xD000000000000010;
    *(void *)(v35 + 32) = 0x80000001000E3BC0;
    *(void *)(v35 + 40) = 0xD00000000000001CLL;
    *(void *)(v35 + 48) = 0x80000001000E23B0;
    *(void *)(v35 + 56) = 159;
    swift_willThrow();
    return v2;
  }
  uint64_t v2 = v11;
  uint64_t v12 = *(void *)(v6 + 24);
  uint64_t v13 = swift_getObjectType();
  v73[3] = a1(0);
  v73[4] = a2;
  v73[0] = v6;
  swift_retain();
  ActiveFunction.getRawCur(forControl:onEntity:onChannel:)(v7, (uint64_t)v73, 0, v13, v12, (uint64_t)v74);
  swift_unknownObjectRelease();
  sub_10001ABC4((uint64_t)v73);
  if (v3) {
    return v2;
  }
  uint64_t v67 = 0;
  sub_10000CF6C(v74, (uint64_t)v76);
  uint64_t v14 = v77;
  uint64_t v15 = v78;
  long long v16 = sub_10001A974(v76, v77);
  __int16 v69 = v59;
  uint64_t v17 = *(void **)(v14 - 8);
  long long v18 = (unsigned char *)v17[8];
  __chkstk_darwin(v16);
  unint64_t v19 = (unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v20 = (void (*)(unsigned char *))v17[2];
  v20(&v59[-v19]);
  uint64_t v21 = *(void *)(v15 + 8);
  uint64_t v22 = dispatch thunk of static BinaryInteger.isSigned.getter();
  char v23 = v22;
  uint64_t v68 = v59;
  uint64_t v70 = v18;
  char v24 = (void (*)(unsigned char *, unsigned char *, uint64_t))v20;
  uint64_t v25 = v14;
  __chkstk_darwin(v22);
  uint64_t v71 = &v59[-v19];
  v79 = v17 + 2;
  v24(&v59[-v19], &v59[-v19], v14);
  uint64_t v72 = v21;
  if ((v23 & 1) == 0)
  {
    BOOL v27 = (void (*)(unsigned char *, uint64_t))v17[1];
    v27(&v59[-v19], v14);
    BOOL v29 = v17;
    goto LABEL_15;
  }
  uint64_t v26 = dispatch thunk of BinaryInteger.bitWidth.getter();
  BOOL v27 = (void (*)(unsigned char *, uint64_t))v17[1];
  uint64_t v28 = ((uint64_t (*)(unsigned char *, uint64_t))v27)(&v59[-v19], v14);
  BOOL v29 = v17;
  if (v26 <= 64)
  {
LABEL_15:
    uint64_t v31 = v70;
    char v36 = v71;
    goto LABEL_30;
  }
  __int16 v66 = v17 + 1;
  id v30 = v59;
  uint64_t v31 = v70;
  __chkstk_darwin(v28);
  uint64_t v32 = &v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24(v32, v71, v14);
  *(void *)&v74[0] = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    uint64_t v33 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v33 >= 64)
    {
      uint64_t v63 = v59;
      long long v65 = v29;
      __chkstk_darwin(v33);
      sub_100020748();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v34 = dispatch thunk of static Comparable.< infix(_:_:)();
      v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
      v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
      BOOL v29 = v65;
      id v30 = v63;
      goto LABEL_19;
    }
  }
  else
  {
    char v37 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v64 = &v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v37)
    {
      long long v65 = v29;
      if (v38 <= 64) {
        goto LABEL_25;
      }
      uint64_t v63 = v59;
      __chkstk_darwin(v38);
      sub_100020748();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v39 = v64;
      char v34 = dispatch thunk of static Comparable.< infix(_:_:)();
      v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
      v27(v39, v25);
      BOOL v29 = v65;
LABEL_19:
      char v36 = v71;
      if (v34) {
        goto LABEL_24;
      }
      goto LABEL_30;
    }
    if (v38 >= 64)
    {
      v27(v64, v14);
      char v36 = v71;
      goto LABEL_30;
    }
    uint64_t v32 = v64;
  }
  uint64_t v40 = dispatch thunk of BinaryInteger._lowWord.getter();
  v27(v32, v25);
  char v36 = v71;
  if (v40 < *(uint64_t *)&v74[0])
  {
LABEL_24:
    do
    {
      __break(1u);
LABEL_25:
      uint64_t v63 = v30;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v62 = v59;
      __chkstk_darwin(AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v42 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      int v61 = v59;
      __chkstk_darwin(v42);
      unint64_t v43 = (unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      BOOL v44 = v64;
      int v60 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v45 = ((uint64_t (*)(unsigned char *, uint64_t))v27)(&v59[-v43], v25);
      uint64_t v62 = v59;
      __chkstk_darwin(v45);
      uint64_t v46 = (uint64_t)&v59[-v43];
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v65[4])(&v59[-v43], v44, v25);
      if (v60) {
        goto LABEL_45;
      }
      uint64_t v47 = *(void *)&v74[0];
      uint64_t v48 = dispatch thunk of BinaryInteger._lowWord.getter();
      v27((unsigned char *)v46, v25);
      BOOL v49 = v48 < v47;
      BOOL v29 = v65;
      char v36 = v71;
      id v30 = v63;
    }
    while (v49);
  }
LABEL_30:
  uint64_t v50 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v70 = v59;
  __chkstk_darwin(v50);
  v24(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v36, v25);
  if (v50 < 65)
  {
    uint64_t v54 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
    if (v54 != 64) {
      goto LABEL_42;
    }
    uint64_t v51 = dispatch thunk of static BinaryInteger.isSigned.getter();
    if (v51) {
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v51 = ((uint64_t (*)(unsigned char *, uint64_t))v27)(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
  }
  __int16 v66 = v59;
  __chkstk_darwin(v51);
  v24(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v36, v25);
  *(void *)&v74[0] = 0x7FFFFFFFFFFFFFFFLL;
  char v52 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v52 & 1) == 0)
  {
    if (v53 >= 64)
    {
      v73[0] = 0x7FFFFFFFFFFFFFFFLL;
      __chkstk_darwin(v53);
      uint64_t v55 = &v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
      long long v65 = v29;
      uint64_t v56 = ((uint64_t (*)(unsigned char *, unsigned char *, uint64_t))v29[4])(v55, v55, v25);
      __chkstk_darwin(v56);
      sub_100020748();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v46 = dispatch thunk of static Comparable.< infix(_:_:)();
      v27(v55, v25);
      char v36 = v71;
      v27(v55, v25);
      goto LABEL_41;
    }
LABEL_40:
    dispatch thunk of BinaryInteger._lowWord.getter();
    v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
LABEL_42:
    uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter();
    v27(v36, v25);
    uint64_t v2 = v57 / 1000000;
    sub_10001ABC4((uint64_t)v76);
    return v2;
  }
  if (v53 <= 64) {
    goto LABEL_40;
  }
  __chkstk_darwin(v53);
  sub_100020748();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v46 = dispatch thunk of static Comparable.< infix(_:_:)();
  v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
  v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
  char v36 = v71;
LABEL_41:
  if ((v46 & 1) == 0) {
    goto LABEL_42;
  }
  __break(1u);
LABEL_45:
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v27)(v46, v25);
  __break(1u);
  return result;
}

uint64_t static AsyncFeedbackType.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      return !a4;
    case 1:
      return a4 == 1;
    case 2:
      return a4 == 2;
  }
  if (a4 < 3) {
    return 0;
  }
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_10009012C()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_10001AC94(v0, qword_10012B220);
  sub_10000AD60(v0, (uint64_t)qword_10012B220);
  return OSSignposter.init(subsystem:category:)();
}

Swift::String __swiftcall AsyncFeedbackType.string()()
{
  unint64_t v2 = 0xD000000000000011;
  if (v1)
  {
    uint64_t v3 = v1;
    if (v1 == (void *)1)
    {
      unsigned int v4 = "Implicit Feedback";
    }
    else
    {
      if (v1 != (void *)2)
      {
        uint64_t v6 = v0;
        _StringGuts.grow(_:)(24);
        swift_bridgeObjectRelease();
        v7._countAndFlagsBits = v6;
        v7._object = v3;
        String.append(_:)(v7);
        unint64_t v2 = 0xD000000000000016;
        uint64_t v5 = (void *)0x80000001000E4D40;
        goto LABEL_9;
      }
      unint64_t v2 = 0xD00000000000001BLL;
      unsigned int v4 = "Explicit, Implicit Feedback";
    }
  }
  else
  {
    unsigned int v4 = "Explicit Feedback";
  }
  uint64_t v5 = (void *)((unint64_t)(v4 - 32) | 0x8000000000000000);
LABEL_9:
  uint64_t v8 = v2;
  result._object = v5;
  result._countAndFlagsBits = v8;
  return result;
}

void AsyncFeedbackType.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(a3)
  {
    case 0:
      Swift::UInt v3 = 1;
      goto LABEL_7;
    case 1:
      Swift::UInt v3 = 2;
      goto LABEL_7;
    case 2:
      Swift::UInt v3 = 3;
LABEL_7:
      Hasher._combine(_:)(v3);
      return;
  }
  Hasher._combine(_:)(0);

  String.hash(into:)();
}

Swift::Int AsyncFeedbackType.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    if (a2 == 1)
    {
      Swift::UInt v3 = 2;
    }
    else
    {
      if (a2 != 2)
      {
        Hasher._combine(_:)(0);
        String.hash(into:)();
        return Hasher._finalize()();
      }
      Swift::UInt v3 = 3;
    }
  }
  else
  {
    Swift::UInt v3 = 1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10009039C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 == 1)
    {
      Swift::UInt v2 = 2;
    }
    else
    {
      if (v1 != 2)
      {
        Hasher._combine(_:)(0);
        String.hash(into:)();
        return Hasher._finalize()();
      }
      Swift::UInt v2 = 3;
    }
  }
  else
  {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10009042C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  switch(v1)
  {
    case 0:
      Swift::UInt v2 = 1;
      goto LABEL_7;
    case 1:
      Swift::UInt v2 = 2;
      goto LABEL_7;
    case 2:
      Swift::UInt v2 = 3;
LABEL_7:
      Hasher._combine(_:)(v2);
      return;
  }
  Hasher._combine(_:)(0);

  String.hash(into:)();
}

Swift::Int sub_1000904C4()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 == 1)
    {
      Swift::UInt v2 = 2;
    }
    else
    {
      if (v1 != 2)
      {
        Hasher._combine(_:)(0);
        String.hash(into:)();
        return Hasher._finalize()();
      }
      Swift::UInt v2 = 3;
    }
  }
  else
  {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100090550(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  switch(v3)
  {
    case 0:
      return v4 == 0;
    case 1:
      return v4 == 1;
    case 2:
      return v4 == 2;
  }
  if (v4 < 3) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void sub_1000905CC()
{
  qword_10012B238 = (uint64_t)&off_100112118;
}

uint64_t AUAStream.functionProtocol.getter()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    uint64_t v2 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function);
    int v3 = v2 == 0;
    if (v2)
    {
      uint64_t v4 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function + 8);
      uint64_t ObjectType = swift_getObjectType();
      LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 40))(ObjectType, v4);
    }
  }
  else
  {
    LOBYTE(v2) = 0;
    int v3 = 1;
  }
  return v2 | (v3 << 8);
}

uint64_t AUAStream.function.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t AUAStream.latencyInMs.getter()
{
  return *(void *)(v0 + OBJC_IVAR___AUAStream_latencyInMs);
}

uint64_t sub_1000906E4()
{
  unint64_t v1 = *(void *)(*(void *)(v0 + OBJC_IVAR___AUAStream_interface) + 72);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 3;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_6:
    swift_bridgeObjectRelease();
    swift_retain();
    swift_release();
    uint64_t active = ActiveEndpoint.synchronizationType.getter();
    swift_release();
    return active;
  }
  __break(1u);
  return result;
}

uint64_t AUAStream.controlScope.getter()
{
  unint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR___AUAStream_controlScope);
  swift_beginAccess();
  return *v1;
}

uint64_t AUAStream.controlScope.setter(int a1)
{
  int v3 = (_DWORD *)(v1 + OBJC_IVAR___AUAStream_controlScope);
  uint64_t result = swift_beginAccess();
  _DWORD *v3 = a1;
  return result;
}

uint64_t (*AUAStream.controlScope.modify())()
{
  return j__swift_endAccess;
}

void sub_1000908BC()
{
  id v1 = [v0 physicalFormat];
  if (v1)
  {
    uint64_t v2 = v1;
    type metadata accessor for AUAStreamFormat();
    uint64_t v3 = swift_dynamicCastClass();
    if (!v3) {
      goto LABEL_13;
    }
    uint64_t v4 = *(void *)(v3 + OBJC_IVAR___AUAStreamFormat_altSetting);
    if (!v4) {
      goto LABEL_13;
    }
    uint64_t v5 = *(void *)(v4 + 104);
    unint64_t v6 = *(void *)(v5 + 56);
    if (!v6) {
      goto LABEL_13;
    }
    int v7 = *(unsigned __int8 *)(v5 + 48);
    uint64_t v8 = *(const IOUSBEndpointDescriptor **)(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v9 = IOUSBGetEndpointSynchronizationType(v8);
    if (!v9) {
      int v9 = IOUSBGetEndpointDirection(v8);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v10 = v9 == 1 ? 0 : v7;
    if (v10 != 1) {
      goto LABEL_13;
    }
    id v11 = [v0 physicalFormat];
    if (!v11) {
      goto LABEL_28;
    }
    uint64_t v12 = v11;
    [v11 sampleRate];
    double v14 = v13;

    if (v14 == 0.0)
    {
LABEL_13:

      return;
    }
    if (!is_mul_ok(v6, 0x3E8uLL)) {
      goto LABEL_23;
    }
    id v15 = [v0 physicalFormat];
    if (!v15)
    {
LABEL_29:
      __break(1u);
      return;
    }
    long long v16 = v15;
    [v15 sampleRate];
    double v18 = v17;

    if ((~*(void *)&v18 & 0x7FF0000000000000) == 0) {
      goto LABEL_24;
    }
    if (v18 <= -1.0)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= 1.84467441e19)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (!(unint64_t)v18)
    {
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (1000 * v6 / (unint64_t)v18 == -1)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
  }
}

void sub_100090AB8(unint64_t a1)
{
  uint64_t v4 = v2;
  uint64_t v93 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v93 - 8);
  uint64_t v7 = __chkstk_darwin(v93);
  int v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (uint64_t)&v85 - v11;
  __chkstk_darwin(v10);
  double v14 = (char *)&v85 - v13;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v22 = 98;
    *(void *)(v22 + 8) = 0;
    *(void *)(v22 + 16) = 0xE000000000000000;
    *(void *)(v22 + 24) = 0xD000000000000020;
    *(void *)(v22 + 32) = 0x80000001000E5CD0;
    *(void *)(v22 + 40) = 0xD000000000000016;
    *(void *)(v22 + 48) = 0x80000001000E4E30;
    *(void *)(v22 + 56) = 302;
    swift_willThrow();
    return;
  }
  long long v16 = Strong;
  [Strong samplingRate];
  double v18 = v17;

  if ((~*(void *)&v18 & 0x7FF0000000000000) == 0) {
    goto LABEL_37;
  }
  if (v18 <= -1.0) {
    goto LABEL_38;
  }
  if (v18 >= 1.84467441e19) {
    goto LABEL_39;
  }
  unint64_t v87 = (unint64_t)v14;
  uint64_t v90 = v12;
  long long v91 = v9;
  unint64_t v3 = (unint64_t)v18;
  id v19 = [v1 physicalFormat];
  unint64_t v20 = a1 >> 62;
  uint64_t v92 = v6;
  unint64_t v88 = a1 >> 62;
  long long v89 = v1;
  if (!v19)
  {
    uint64_t v23 = *(void *)&v1[OBJC_IVAR___AUAStream_interface];
    swift_beginAccess();
    if (!*(void *)(v23 + 16)) {
      goto LABEL_42;
    }
    uint64_t v86 = (void *)(v23 + 16);
    uint64_t v94 = v2;
    uint64_t v24 = *(void *)(v23 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 16);
    swift_unknownObjectRetain();
    BOOL v27 = (char *)v26(ObjectType, v24);
    swift_unknownObjectRelease();
    if (!v27)
    {
      uint64_t v6 = v92;
      id v1 = v89;
      uint64_t v4 = v94;
      goto LABEL_42;
    }
    if (*v86)
    {
      uint64_t v28 = *(void *)(v23 + 24);
      uint64_t v29 = swift_getObjectType();
      id v30 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 40);
      swift_unknownObjectRetain();
      unsigned __int8 v31 = v30(v29, v28);
      swift_unknownObjectRelease();
    }
    else
    {
      unsigned __int8 v31 = 0;
    }
    uint64_t v32 = *(void *)&v27[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
    id v85 = v27;
    if (v32 && sub_10001925C(25, v32))
    {
      uint64_t v12 = 24;
      if ((a1 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
    }
    else
    {
      if (v31 <= 0x20u) {
        uint64_t v12 = 16;
      }
      else {
        uint64_t v12 = 24;
      }
      if ((a1 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
    }
    if ((a1 & 0x4000000000000000) == 0)
    {
      uint64_t v33 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v33) {
        goto LABEL_25;
      }
LABEL_41:

      swift_bridgeObjectRelease();
      uint64_t v4 = v94;
      uint64_t v6 = v92;
      unint64_t v20 = v88;
      id v1 = v89;
      goto LABEL_42;
    }
LABEL_40:
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
      if (!v33) {
        goto LABEL_41;
      }
LABEL_25:
      uint64_t v34 = 4;
      while (1)
      {
        uint64_t v35 = (a1 & 0xC000000000000001) != 0
            ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : (char *)*(id *)(a1 + 8 * v34);
        uint64_t v4 = v35;
        uint64_t v36 = v34 - 3;
        if (__OFADD__(v34 - 4, 1)) {
          break;
        }
        if (v12 == [v35 bitsPerChannel]
          && [v4 channelsPerFrame] == 2
          && *(void *)&v4[OBJC_IVAR___AUAStreamFormat_rateRange] <= v3
          && *(void *)&v4[OBJC_IVAR___AUAStreamFormat_rateRange + 8] >= v3)
        {

          swift_bridgeObjectRelease();
          id v98 = v4;
          unint64_t v3 = (unint64_t)v91;
          uint64_t v6 = v92;
          unint64_t v20 = v88;
          id v1 = v89;
          goto LABEL_62;
        }

        ++v34;
        if (v36 == v33) {
          goto LABEL_41;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
    }
  }
  id v21 = v19;
  uint64_t v4 = sub_10009C978(a1, (uint64_t)v21, (unint64_t)v18);
  uint64_t v94 = v2;

  if (v4) {
    goto LABEL_61;
  }
  uint64_t v4 = v94;
LABEL_42:
  if (v20)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    if (v37) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v37 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v37)
    {
LABEL_44:
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v94 = v4;
        uint64_t v38 = 0;
        while (1)
        {
          uint64_t v39 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v6 = v38 + 1;
          if (__OFADD__(v38, 1)) {
            break;
          }
          uint64_t v4 = (char *)v39;
          if (*(void *)(v39 + OBJC_IVAR___AUAStreamFormat_rateRange) <= v3
            && *(void *)(v39 + OBJC_IVAR___AUAStreamFormat_rateRange + 8) >= v3)
          {
            swift_bridgeObjectRelease();
LABEL_52:
            uint64_t v6 = v92;
            goto LABEL_61;
          }
          swift_unknownObjectRelease();
          ++v38;
          if (v6 == v37)
          {
            swift_bridgeObjectRelease();
            uint64_t v4 = 0;
            goto LABEL_52;
          }
        }
        __break(1u);
      }
      else
      {
        uint64_t v40 = 0;
        while (1)
        {
          uint64_t v41 = v40 + 1;
          if (__OFADD__(v40, 1)) {
            break;
          }
          uint64_t v42 = *(char **)(a1 + 8 * v40 + 32);
          if (*(void *)&v42[OBJC_IVAR___AUAStreamFormat_rateRange] <= v3
            && *(void *)&v42[OBJC_IVAR___AUAStreamFormat_rateRange + 8] >= v3)
          {
            uint64_t v94 = v4;
            uint64_t v4 = v42;
            swift_bridgeObjectRelease();
            goto LABEL_61;
          }
          ++v40;
          if (v41 == v37) {
            goto LABEL_60;
          }
        }
      }
      __break(1u);
      goto LABEL_74;
    }
  }
LABEL_60:
  uint64_t v94 = v4;
  swift_bridgeObjectRelease();
  uint64_t v4 = 0;
LABEL_61:
  id v98 = v4;
  unint64_t v3 = (unint64_t)v91;
LABEL_62:
  if (!v20)
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_75;
    }
    goto LABEL_64;
  }
LABEL_74:
  swift_bridgeObjectRetain();
  uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_75:
    if (!v4) {
      goto LABEL_79;
    }
    goto LABEL_76;
  }
LABEL_64:
  if (v4)
  {
LABEL_76:
    long long v65 = v4;
    [v65 sampleRate];
    if (v66 != v18) {
      [v65 setSampleRate:v18];
    }

LABEL_79:
    if (qword_100126910 != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for OSSignposter();
    sub_10000AD60(v67, (uint64_t)qword_10012B220);
    uint64_t v68 = *(void (**)(void))(v6 + 16);
    unint64_t v69 = v87;
    uint64_t v70 = v93;
    v68();
    uint64_t v71 = (uint64_t)v98;
    id v72 = v98;
    v73 = OSSignposter.logHandle.getter();
    LODWORD(v91) = static os_signpost_type_t.event.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      ((void (*)(uint64_t, unint64_t, uint64_t))v68)(v90, v69, v70);
      long long v74 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      uint64_t v95 = v71;
      uint64_t v96 = v75;
      *(_DWORD *)long long v74 = 136315138;
      uint64_t v86 = v74 + 4;
      id v76 = v72;
      sub_10000AC7C(&qword_100129A78);
      uint64_t v77 = String.init<A>(describing:)();
      uint64_t v95 = sub_1000192BC(v77, v78, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v79 = v90;
      os_signpost_id_t v80 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v73, (os_signpost_type_t)v91, v80, "AUAStream_publishFormats", "format %s", v74, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      long long v81 = *(void (**)(unint64_t, uint64_t))(v92 + 8);
      v81(v69, v70);
      v81(v79, v70);
      long long v82 = v89;
      if (v88)
      {
LABEL_83:
        sub_10000CECC(0, &qword_1001296A0);
        swift_bridgeObjectRetain();
        _bridgeCocoaArray<A>(_:)();
        swift_bridgeObjectRelease();
LABEL_86:
        sub_10000CECC(0, &qword_1001296A0);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v82 setPhysicalFormats:isa];

        swift_beginAccess();
        id v84 = v98;
        [v82 setPhysicalFormat:v98];

        return;
      }
    }
    else
    {

      (*(void (**)(unint64_t, uint64_t))(v92 + 8))(v69, v70);
      long long v82 = v89;
      if (v88) {
        goto LABEL_83;
      }
    }
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_10000CECC(0, &qword_1001296A0);
    goto LABEL_86;
  }
  sub_10000CD54();
  uint64_t v44 = swift_allocError();
  *(unsigned char *)uint64_t v45 = 99;
  *(void *)(v45 + 8) = 0;
  *(void *)(v45 + 16) = 0xE000000000000000;
  unint64_t v88 = (unint64_t)"AUAStream_publishFormats";
  *(void *)(v45 + 24) = 0xD000000000000020;
  *(void *)(v45 + 32) = 0x80000001000E5CD0;
  unint64_t v87 = (unint64_t)"changePhysicalFormat(_:)";
  *(void *)(v45 + 40) = 0xD000000000000016;
  *(void *)(v45 + 48) = 0x80000001000E4E30;
  *(void *)(v45 + 56) = 344;
  swift_willThrow();

  swift_errorRetain();
  uint64_t v46 = (void *)_convertErrorToNSError(_:)();
  uint64_t v86 = [v46 code];

  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for OSSignposter();
  sub_10000AD60(v47, (uint64_t)qword_10012B220);
  uint64_t v48 = *(void (**)(unint64_t, char *, uint64_t))(v6 + 16);
  uint64_t v49 = v93;
  v48(v3, &v1[OBJC_IVAR___AUAStream_signpostID], v93);
  uint64_t v50 = OSSignposter.logHandle.getter();
  LODWORD(v89) = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    v48(v90, (char *)v3, v49);
    uint64_t v51 = swift_slowAlloc();
    uint64_t v52 = v44;
    uint64_t v53 = v49;
    uint64_t v94 = (char *)v52;
    uint64_t v54 = (uint8_t *)v51;
    uint64_t v96 = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136315138;
    sub_10000AC7C(&qword_100127420);
    uint64_t v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_1000E8090;
    *(void *)(v55 + 56) = &type metadata for Int;
    *(void *)(v55 + 64) = &protocol witness table for Int;
    uint64_t v56 = v86;
    *(void *)(v55 + 32) = v86;
    uint64_t v57 = String.init(format:_:)();
    id v98 = (id)sub_1000192BC(v57, v58, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v59 = v90;
    os_signpost_id_t v60 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, (os_signpost_type_t)v89, v60, "AUAStream_publishFormats", "error %s", v54, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    int v61 = *(void (**)(char *, uint64_t))(v6 + 8);
    v61(v91, v53);
    v61((char *)v59, v53);
  }
  else
  {

    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v3, v49);
    uint64_t v56 = v86;
  }
  uint64_t v96 = 0;
  uint64_t v97 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  uint64_t v96 = 0xD000000000000015;
  uint64_t v97 = 0x80000001000E5D00;
  sub_10000AC7C(&qword_100127420);
  uint64_t v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = xmmword_1000E8090;
  *(void *)(v62 + 56) = &type metadata for Int;
  *(void *)(v62 + 64) = &protocol witness table for Int;
  *(void *)(v62 + 32) = v56;
  v63._countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  sub_10002E81C(v96, v97, 0xD000000000000020, (void *)(v88 | 0x8000000000000000), 0xD000000000000016, v87 | 0x8000000000000000, 357);
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_errorRelease();
}

uint64_t sub_100091818(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  __int16 v100 = (char *)v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v110 = (char *)v92 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v92 - v10;
  uint64_t v12 = OBJC_IVAR___AUAStream_signpostID;
  uint64_t v13 = OBJC_IVAR___AUAStream_audioDevice;
  uint64_t v102 = a2;
  swift_beginAccess();
  uint64_t v116 = a2 + 16;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    long long v16 = (char *)Strong;
    uint64_t v119 = &a1[v12];
    int v111 = &a1[v13];
    double v17 = (void (**)(char *, char *, uint64_t))(v5 + 16);
    long long v120 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v95 = v126;
    p_aBlock = &aBlock;
    *(void *)&long long v15 = 67109632;
    long long v107 = v15;
    unint64_t v106 = (unint64_t)"AUAStream_enqueueNextTransfer";
    unint64_t v109 = 0x80000001000E5620;
    unint64_t v105 = (unint64_t)"changePhysicalFormat(_:)";
    unint64_t v108 = 0x80000001000E4E30;
    id v98 = (void *)0x80000001000E5640;
    *((void *)&v18 + 1) = 2;
    long long v101 = xmmword_1000E8090;
    uint64_t v97 = (void *)0x80000001000E5660;
    *(void *)&long long v18 = 136315650;
    long long v93 = v18;
    v92[1] = (char *)&type metadata for Any + 8;
    uint64_t v103 = v4;
    __int16 v118 = (void (**)(char *, char *, uint64_t))(v5 + 16);
    id v113 = a1;
    uint64_t v99 = v11;
    while (1)
    {
      uint64_t v20 = *(void *)&v16[OBJC_IVAR___AUAStream_transferManager];
      swift_retain();

      if (!v20) {
        return swift_release();
      }
      id v21 = *(uint64_t (**)(uint64_t))(*(void *)v20 + 104);
      uint64_t v22 = swift_retain();
      uint64_t v23 = v21(v22);
      swift_release();
      if (!v23)
      {
        swift_release();
        return swift_release();
      }
      uint64_t v24 = *(int **)(v23 + 16);
      uint64_t v25 = *(void **)(v23 + 24);
      int v26 = *v24;
      uint64_t v27 = *((void *)v24 + 4);
      unint64_t v121 = v24[6];
      uint64_t v122 = v27;
      id v112 = (id)*((void *)v24 + 2);
      id v28 = v25;
      swift_release();
      swift_release();
      if (qword_100126910 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for OSSignposter();
      uint64_t v30 = sub_10000AD60(v29, (uint64_t)qword_10012B220);
      unsigned __int8 v31 = *v17;
      (*v17)(v11, v119, v4);
      id v32 = v28;
      uint64_t v114 = v30;
      uint64_t v33 = OSSignposter.logHandle.getter();
      os_signpost_type_t v34 = static os_signpost_type_t.event.getter();
      char v35 = OS_os_log.signpostsEnabled.getter();
      uint64_t v115 = v31;
      if (v35)
      {
        uint64_t v36 = v110;
        v31(v110, v11, v4);
        uint64_t v37 = swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = v107;
        *(_DWORD *)(v37 + 4) = v26;
        *(_WORD *)(v37 + 8) = 1024;
        *(_DWORD *)(v37 + 10) = v121;

        *(_WORD *)(v37 + 14) = 2048;
        *(void *)(v37 + 16) = v122;

        os_signpost_id_t v38 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, v34, v38, "AUAStream_enqueueNextTransfer", "transferID %u, numUSBTransfers %u, blockStartingUSBFrame %llu", (uint8_t *)v37, 0x18u);
        swift_slowDealloc();

        uint64_t v39 = *v120;
        (*v120)(v11, v4);
        v39(v36, v4);
      }
      else
      {

        uint64_t v39 = *v120;
        (*v120)(v11, v4);
      }
      id v40 = v113;
      id v41 = [v113 physicalFormat];
      if (!v41) {
        goto LABEL_21;
      }
      uint64_t v42 = v41;
      type metadata accessor for AUAStreamFormat();
      uint64_t v43 = swift_dynamicCastClass();
      if (!v43) {
        break;
      }
      uint64_t v44 = *(void *)(v43 + OBJC_IVAR___AUAStreamFormat_altSetting);
      if (!v44 || (uint64_t v45 = *(void *)(*(void *)(v44 + 104) + 120)) == 0)
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v54 = 1;
        *(void *)(v54 + 8) = 0;
        *(void *)(v54 + 16) = 0xE000000000000000;
        unint64_t v55 = v106 | 0x8000000000000000;
        *(void *)(v54 + 24) = 0xD00000000000001FLL;
        *(void *)(v54 + 32) = v55;
        unint64_t v56 = v105 | 0x8000000000000000;
        *(void *)(v54 + 40) = 0xD000000000000016;
        *(void *)(v54 + 48) = v56;
        *(void *)(v54 + 56) = 374;
        swift_willThrow();

        goto LABEL_22;
      }
      uint64_t v46 = swift_allocObject();
      *(void *)(v46 + 16) = v40;
      uint64_t v47 = *(void **)(v45 + 16);
      id v19 = v32;
      swift_retain();
      id v48 = v40;
      if (![v47 increment]) {
        goto LABEL_18;
      }
      id v96 = v47;
      uint64_t v104 = v39;
      uint64_t v49 = v11;
      uint64_t v50 = *(void **)(v45 + 24);
      uint64_t v51 = (void *)swift_allocObject();
      v51[2] = sub_10009D74C;
      v51[3] = v46;
      v51[4] = v45;
      v126[2] = sub_10009D7B8;
      v126[3] = v51;
      aBlock = _NSConcreteStackBlock;
      uint64_t v125 = 1107296256;
      v126[0] = sub_1000DB0EC;
      v126[1] = &unk_10011A6B8;
      uint64_t v52 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      LOBYTE(v50) = [v50 enqueueIORequestWithData:v19 transactionList:v112 transactionListCount:v121 firstFrameNumber:v122 options:0 error:&aBlock completionHandler:v52];
      _Block_release(v52);
      uint64_t v53 = aBlock;
      if (v50)
      {
LABEL_18:
        swift_release();

        swift_release();
        uint64_t v4 = v103;
        goto LABEL_4;
      }
      uint64_t v90 = v53;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      [v96 decrement];
      swift_willThrow();
      swift_release();

      swift_release();
      uint64_t v117 = 0;
      uint64_t v4 = v103;
      uint64_t v11 = v49;
      uint64_t v39 = v104;
LABEL_23:
      uint64_t v60 = swift_unknownObjectWeakLoadStrong();
      if (!v60) {
        goto LABEL_3;
      }
      int v61 = (void *)v60;
      uint64_t v63 = *(void *)(v60 + OBJC_IVAR___AUAAudioDevice_function);
      uint64_t v62 = *(void *)(v60 + OBJC_IVAR___AUAAudioDevice_function + 8);
      swift_unknownObjectRetain();

      if (!v63) {
        goto LABEL_3;
      }
      uint64_t ObjectType = swift_getObjectType();
      long long v65 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v62 + 16))(ObjectType, v62);
      swift_unknownObjectRelease();
      if (v65
        && (double v66 = *(void **)&v65[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject],
            id v19 = v66,
            v65,
            v66))
      {
        uint64_t v104 = v39;
        id v67 = [v19 frameNumberWithTime:0];
        uint64_t v68 = (void *)_convertErrorToNSError(_:)();
        id v69 = [v68 code];

        aBlock = 0;
        uint64_t v125 = 0xE000000000000000;
        _StringGuts.grow(_:)(64);
        v70._countAndFlagsBits = 0xD000000000000017;
        v70._object = v98;
        String.append(_:)(v70);
        id v96 = (id)sub_10000AC7C(&qword_100127420);
        uint64_t v71 = swift_allocObject();
        *(_OWORD *)(v71 + 16) = v101;
        *(void *)(v71 + 56) = &type metadata for Int;
        *(void *)(v71 + 64) = &protocol witness table for Int;
        unint64_t v121 = (unint64_t)v69;
        *(void *)(v71 + 32) = v69;
        v72._countAndFlagsBits = String.init(format:_:)();
        String.append(_:)(v72);
        swift_bridgeObjectRelease();
        v73._countAndFlagsBits = 0x617246727563202CLL;
        v73._object = (void *)0xEB0000000020656DLL;
        String.append(_:)(v73);
        id v112 = v67;
        uint64_t v123 = (uint64_t)v67;
        v74._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v74);
        swift_bridgeObjectRelease();
        v75._countAndFlagsBits = 0xD000000000000018;
        v75._object = v97;
        String.append(_:)(v75);
        uint64_t v123 = v122;
        v76._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v76);
        swift_bridgeObjectRelease();
        sub_10002E81C((uint64_t)aBlock, v125, 0xD00000000000001FLL, (void *)(v106 | 0x8000000000000000), 0xD000000000000016, v105 | 0x8000000000000000, 387);
        swift_bridgeObjectRelease();
        uint64_t v77 = v100;
        unint64_t v78 = v115;
        v115(v100, v119, v4);
        id v79 = v32;
        os_signpost_id_t v80 = OSSignposter.logHandle.getter();
        LODWORD(v114) = static os_signpost_type_t.event.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          v78(v110, v77, v4);
          uint64_t v81 = swift_slowAlloc();
          uint64_t v115 = (void (*)(char *, char *, uint64_t))swift_slowAlloc();
          aBlock = (void **)v115;
          *(_DWORD *)uint64_t v81 = v93;
          uint64_t v82 = swift_allocObject();
          *(_OWORD *)(v82 + 16) = v101;
          *(void *)(v82 + 56) = &type metadata for Int;
          *(void *)(v82 + 64) = &protocol witness table for Int;
          *(void *)(v82 + 32) = v121;
          uint64_t v83 = String.init(format:_:)();
          uint64_t v123 = sub_1000192BC(v83, v84, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v81 + 12) = 2048;
          uint64_t v123 = (uint64_t)v112;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v81 + 22) = 2048;

          uint64_t v123 = v122;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          id v85 = v110;
          os_signpost_id_t v86 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v80, (os_signpost_type_t)v114, v86, "AUAStream_enqueueNextTransfer_error", "error %s, curFrame %llu, blockStartingUSBFrame %llu", (uint8_t *)v81, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v4 = v103;
          swift_slowDealloc();

          unint64_t v87 = v104;
          v104(v77, v4);
          v87(v85, v4);
        }
        else
        {

          v104(v77, v4);
        }
        uint64_t v11 = v99;
        if (v121 == -536870165)
        {
          swift_errorRelease();
        }
        else
        {
          uint64_t v88 = swift_unknownObjectWeakLoadStrong();
          if (!v88)
          {
            uint64_t result = swift_release();
            __break(1u);
            return result;
          }
          long long v89 = (void *)v88;
          AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(0xD00000000000001FLL, v106 | 0x8000000000000000, 0xD000000000000016, v105 | 0x8000000000000000, 392, (uint64_t)ClusterChannelInfo.chNum.getter, 0);
          swift_errorRelease();
        }
      }
      else
      {
LABEL_3:
        swift_errorRelease();
        id v19 = v32;
      }
LABEL_4:

      long long v16 = (char *)swift_unknownObjectWeakLoadStrong();
      double v17 = v118;
      if (!v16) {
        return swift_release();
      }
    }

LABEL_21:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v57 = 1;
    *(void *)(v57 + 8) = 0;
    *(void *)(v57 + 16) = 0xE000000000000000;
    unint64_t v58 = v109;
    *(void *)(v57 + 24) = 0xD00000000000001FLL;
    *(void *)(v57 + 32) = v58;
    unint64_t v59 = v108;
    *(void *)(v57 + 40) = 0xD000000000000016;
    *(void *)(v57 + 48) = v59;
    *(void *)(v57 + 56) = 373;
    swift_willThrow();
LABEL_22:
    uint64_t v117 = 0;
    goto LABEL_23;
  }
  return swift_release();
}

uint64_t sub_1000925EC(unsigned int a1, uint64_t a2)
{
  uint64_t v26 = a2;
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for OSSignposter();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10000AD60(v8, (uint64_t)qword_10012B220);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v27 = v5;
  uint64_t v28 = v4;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v2 + OBJC_IVAR___AUAStream_signpostID, v4);
  uint64_t v13 = (uint8_t *)swift_slowAlloc();
  uint64_t v30 = swift_slowAlloc();
  *(_DWORD *)uint64_t v13 = 136315138;
  sub_10000AC7C(&qword_100127420);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1000E8090;
  *(void *)(v14 + 56) = &type metadata for Int32;
  *(void *)(v14 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v14 + 32) = a1;
  uint64_t v15 = String.init(format:_:)();
  unsigned int v25 = a1;
  uint64_t v29 = sub_1000192BC(v15, v16, &v30);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  double v17 = OSSignposter.logHandle.getter();
  os_signpost_type_t v18 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v19, "AUAStream_isocDataCompletion", "status %s", v13, 0xCu);
  if (*((unsigned char *)v2 + OBJC_IVAR___AUAStream_started) == 1)
  {
    uint64_t v20 = v2;
    sub_10009D7C8(v25, v26, v20, (uint64_t)v20);
  }
  os_signpost_type_t v21 = static os_signpost_type_t.end.getter();
  os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v21, v22, "AUAStream_isocDataCompletion", "status %s", v13, 0xCu);

  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
  (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v7, v28);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Void __swiftcall AUAStream.start()()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignposter();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function);
    uint64_t v9 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function + 8);
    swift_unknownObjectRetain();

    if (v8)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(ObjectType, v9);
      swift_unknownObjectRelease();
      if (v11)
      {
        uint64_t v12 = *(void **)&v11[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject];
        id v13 = v12;

        if (v12)
        {
          id v14 = [v13 frameNumberWithTime:0];
          id v23 = v13;
          if (qword_100126910 != -1) {
            swift_once();
          }
          uint64_t v15 = sub_10000AD60(v2, (uint64_t)qword_10012B220);
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v15, v2);
          unint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)unint64_t v16 = 134217984;
          id v24 = v14;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          double v17 = OSSignposter.logHandle.getter();
          os_signpost_type_t v18 = static os_signpost_type_t.begin.getter();
          os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v19, "AUAStream_start", "curFrame %llu", v16, 0xCu);
          sub_100092C7C(v1);
          os_signpost_type_t v20 = static os_signpost_type_t.end.getter();
          os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v20, v21, "AUAStream_start", "curFrame %llu", v16, 0xCu);

          swift_slowDealloc();
          (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        }
      }
    }
  }
}

void sub_100092C7C(void *a1)
{
  uint64_t v2 = OBJC_IVAR___AUAStream_transferManager;
  if (!*(void *)((char *)a1 + OBJC_IVAR___AUAStream_transferManager)) {
    sub_10002E81C(0xD00000000000001CLL, 0x80000001000E5DC0, 0x29287472617473, (void *)0xE700000000000000, 0xD000000000000016, 0x80000001000E4E30, 494);
  }
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();

  if (Strong && *(void *)((char *)a1 + v2))
  {
    uint64_t v4 = (char *)swift_unknownObjectWeakLoadStrong();
    if (v4)
    {
      uint64_t v5 = *(void *)&v4[OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame];

      *(void *)((char *)a1 + OBJC_IVAR___AUAStream_firstTimeStampUSBFrame) = v5;
      unsigned int v6 = [a1 direction];
      uint64_t v7 = *(void *)((char *)a1 + v2);
      if (v6 == 1768845428)
      {
        if (!v7)
        {
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
        uint64_t v8 = swift_unknownObjectWeakLoadStrong();
        if (!v8)
        {
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
        uint64_t v9 = (char *)v8;
        uint64_t v10 = OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame;
      }
      else
      {
        if (!v7)
        {
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        uint64_t v11 = swift_unknownObjectWeakLoadStrong();
        if (!v11)
        {
LABEL_21:
          __break(1u);
          return;
        }
        uint64_t v9 = (char *)v11;
        uint64_t v10 = OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame;
      }
      uint64_t v12 = *(void *)&v9[v10];
      swift_retain();

      (*(void (**)(uint64_t))(*(void *)v7 + 88))(v12);
      swift_release();
      *((unsigned char *)a1 + OBJC_IVAR___AUAStream_started) = 1;
      *((unsigned char *)a1 + OBJC_IVAR___AUAStream_needFirstTimeStamp) = 1;
      *(void *)((char *)a1 + OBJC_IVAR___AUAStream_lastIOTimeNS) = 0;
      id v13 = (char *)swift_unknownObjectWeakLoadStrong();
      if (v13)
      {
        uint64_t v14 = *(void *)&v13[OBJC_IVAR___AUAAudioDevice_curZTSSeed];

        *(void *)((char *)a1 + OBJC_IVAR___AUAStream_timeStampSeed) = v14;
        *(void *)((char *)a1 + OBJC_IVAR___AUAStream_sampleTime) = 0;
        *(void *)((char *)a1 + OBJC_IVAR___AUAStream_hostTime) = 0;
        (*(void (**)(void))((swift_isaMask & *a1) + 0x260))();
        v15.receiver = a1;
        v15.super_class = (Class)type metadata accessor for AUAStream(0);
        objc_msgSendSuper2(&v15, "startStream");
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
}

Swift::Void __swiftcall AUAStream.stop()()
{
}

uint64_t sub_100092F6C(unsigned char *a1)
{
  a1[OBJC_IVAR___AUAStream_started] = 0;
  v11.receiver = a1;
  v11.super_class = (Class)type metadata accessor for AUAStream(0);
  objc_msgSendSuper2(&v11, "stopStream");
  uint64_t v2 = OBJC_IVAR___AUAStream_streamingEndpoint;
  uint64_t v3 = *(void *)&a1[OBJC_IVAR___AUAStream_streamingEndpoint];
  if (v3 && *(void *)(v3 + 120))
  {
    swift_retain();
    swift_retain();
    sub_1000DADF0();
    swift_release();
    *(void *)(v3 + 120) = 0;
    swift_release();
    swift_release();
  }
  *(void *)&a1[v2] = 0;
  swift_release();
  uint64_t v4 = *(void **)(*(void *)&a1[OBJC_IVAR___AUAStream_interface] + 112);
  if (!v4)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v7 = 1;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0xE000000000000000;
    *(void *)(v7 + 24) = 0x2928706F7473;
    *(void *)(v7 + 32) = 0xE600000000000000;
    *(void *)(v7 + 40) = 0xD000000000000016;
    *(void *)(v7 + 48) = 0x80000001000E4E30;
    *(void *)(v7 + 56) = 536;
    swift_willThrow();
LABEL_9:
    sub_10002E81C(0xD000000000000034, 0x80000001000E5D80, 0x2928706F7473, (void *)0xE600000000000000, 0xD000000000000016, 0x80000001000E4E30, 540);
    swift_errorRelease();
    goto LABEL_10;
  }
  id v10 = 0;
  id v5 = v4;
  if (([v5 selectAlternateSetting:0 error:&v10] & 1) == 0)
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_9;
  }
  id v6 = v10;

LABEL_10:
  *(void *)&a1[OBJC_IVAR___AUAStream_transferManager] = 0;
  return swift_release();
}

Swift::Bool __swiftcall AUAStream.deviceChanged(toSamplingRate:)(Swift::Double toSamplingRate)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v26 - v8;
  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for OSSignposter();
  sub_10000AD60(v10, (uint64_t)qword_10012B220);
  objc_super v11 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v11(v9, &v1[OBJC_IVAR___AUAStream_signpostID], v3);
  uint64_t v12 = v1;
  id v13 = OSSignposter.logHandle.getter();
  os_signpost_type_t v14 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    v11(v7, v9, v3);
    uint64_t v15 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v29 = v27;
    *(_DWORD *)uint64_t v15 = 134218242;
    Swift::Double v28 = toSamplingRate;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    Swift::Double v28 = COERCE_DOUBLE([v12 physicalFormat]);
    sub_10000AC7C(&qword_1001296A8);
    uint64_t v16 = String.init<A>(describing:)();
    Swift::Double v28 = COERCE_DOUBLE(sub_1000192BC(v16, v17, &v29));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    os_signpost_id_t v18 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, v14, v18, "AUAStream_deviceChangedToSamplingRate", "sample rate %f, physicalFormat %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    os_signpost_id_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
    v19(v9, v3);
    v19(v7, v3);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  id v20 = [v12 physicalFormats];
  if (v20)
  {
    os_signpost_id_t v21 = v20;
    sub_10000CECC(0, &qword_1001296A0);
    unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v22 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v23)
    {
      id v24 = (objc_class *)type metadata accessor for AUAStream(0);
      v30.receiver = v12;
      v30.super_class = v24;
      LOBYTE(v20) = objc_msgSendSuper2(&v30, "deviceChangedToSamplingRate:", toSamplingRate);
    }
    else
    {
      LOBYTE(v20) = 1;
    }
  }
  else
  {
    __break(1u);
  }
  return (char)v20;
}

uint64_t AUAStream.changePhysicalFormat(_:)(void *a1)
{
  id v34 = a1;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v33 - v7;
  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for OSSignposter();
  sub_10000AD60(v9, (uint64_t)qword_10012B220);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v10(v8, &v1[OBJC_IVAR___AUAStream_signpostID], v2);
  objc_super v11 = OSSignposter.logHandle.getter();
  os_signpost_type_t v12 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    v10(v6, v8, v2);
    id v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v13 = 0;
    os_signpost_id_t v14 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, v12, v14, "AUAStream_changePhysicalFormat", "", v13, 2u);
    swift_slowDealloc();

    uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v8, v2);
    v15(v6, v2);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  uint64_t v16 = v1;
  uint64_t result = (uint64_t)[v1 physicalFormats];
  if (result)
  {
    os_signpost_id_t v18 = (void *)result;
    sub_10000CECC(0, &qword_1001296A0);
    unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v20 = v34;
    id v21 = v34;
    id v22 = sub_10009CACC(v19, v20);
    swift_bridgeObjectRelease();

    if (!v22
      || ([v22 copy],
          v22,
          _bridgeAnyObjectToAny(_:)(),
          swift_unknownObjectRelease(),
          type metadata accessor for AUAStreamFormat(),
          (swift_dynamicCast() & 1) == 0))
    {
      sub_10000CD54();
      uint64_t v30 = swift_allocError();
      *(unsigned char *)uint64_t v31 = 0;
      *(void *)(v31 + 8) = 0;
      *(void *)(v31 + 16) = 0xE000000000000000;
      *(void *)(v31 + 24) = 0xD000000000000018;
      *(void *)(v31 + 32) = 0x80000001000E4E10;
      *(void *)(v31 + 40) = 0xD000000000000016;
      *(void *)(v31 + 48) = 0x80000001000E4E30;
      *(void *)(v31 + 56) = 569;
      swift_willThrow();
      uint64_t v36 = 0;
      uint64_t v37 = 0xE000000000000000;
      swift_errorRetain();
      _StringGuts.grow(_:)(22);
      v32._countAndFlagsBits = 0xD000000000000014;
      v32._object = (void *)0x80000001000E4E50;
      String.append(_:)(v32);
      char v35 = (void *)v30;
      sub_10000AC7C(&qword_100127400);
      _print_unlocked<A, B>(_:_:)();
      sub_10002E81C(v36, v37, 0xD000000000000018, (void *)0x80000001000E4E10, 0xD000000000000016, 0x80000001000E4E30, 588);
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      return 0;
    }
    uint64_t v23 = v35;
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (!result)
    {

      return 1;
    }
    if (v20)
    {
      id v24 = (void *)result;
      id v25 = v23;
      [v21 sampleRate];
      objc_msgSend(v25, "setSampleRate:");

      uint64_t v26 = (void *)swift_allocObject();
      v26[2] = v16;
      v26[3] = v25;
      v26[4] = v24;
      id v27 = v25;
      id v28 = v16;
      id v29 = v24;
      AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(0xD000000000000018, 0x80000001000E4E10, 0xD000000000000016, 0x80000001000E4E30, 575, (uint64_t)sub_10009CC28, (uint64_t)v26);

      swift_release();
      return 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100093B40(char *a1, void *a2, uint64_t a3)
{
  uint64_t v23 = a3;
  uint64_t v5 = type metadata accessor for OSSignposter();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10000AD60(v5, (uint64_t)qword_10012B220);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  uint64_t v22 = v5;
  v20[1] = &a1[OBJC_IVAR___AUAStream_signpostID];
  id v10 = a2;
  uint64_t v11 = swift_slowAlloc();
  *(_DWORD *)uint64_t v11 = 134218752;
  [v10 sampleRate];
  double v24 = v12;
  id v21 = a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v11 + 12) = 1024;
  LODWORD(v24) = [v10 channelsPerFrame];
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v11 + 18) = 1024;
  LODWORD(v24) = [v10 bitsPerChannel];
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v11 + 24) = 2048;
  [v10 sampleRate];
  double v24 = v13 * 0.25;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  os_signpost_id_t v14 = OSSignposter.logHandle.getter();
  os_signpost_type_t v15 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v16 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, v15, v16, "AUAStream_changePhysicalFormat", "sampleRate %f, channels %u, bitsPerChannel %u, timestampPeriod %f", (uint8_t *)v11, 0x22u);
  [v10 sampleRate];
  AUAAudioDevice.setSamplingRate(_:)(v17);
  [v21 setPhysicalFormat:v10];
  LOBYTE(v10) = static os_signpost_type_t.end.getter();
  os_signpost_id_t v18 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, (os_signpost_type_t)v10, v18, "AUAStream_changePhysicalFormat", "sampleRate %f, channels %u, bitsPerChannel %u, timestampPeriod %f", (uint8_t *)v11, 0x22u);

  swift_slowDealloc();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v22);
}

void sub_100093EB8()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OSSignposter();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [v2 physicalFormat];
  if (!v11) {
    goto LABEL_10;
  }
  double v12 = v11;
  uint64_t v42 = v1;
  type metadata accessor for AUAStreamFormat();
  uint64_t v13 = swift_dynamicCastClass();
  if (!v13)
  {

LABEL_10:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v29 = 1;
    *(void *)(v29 + 8) = 0;
    *(void *)(v29 + 16) = 0xE000000000000000;
    *(void *)(v29 + 24) = 0x5365726170657270;
    *(void *)(v29 + 32) = 0xEF29286D61657274;
    *(void *)(v29 + 40) = 0xD000000000000016;
    *(void *)(v29 + 48) = 0x80000001000E4E30;
    *(void *)(v29 + 56) = 597;
    swift_willThrow();
    return;
  }
  os_signpost_id_t v14 = (void *)v13;
  uint64_t v41 = v8;
  uint64_t v15 = *(void *)(v13 + OBJC_IVAR___AUAStreamFormat_altSetting);
  if (!v15)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v30 = 74;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0xE000000000000000;
    *(void *)(v30 + 24) = 0x5365726170657270;
    *(void *)(v30 + 32) = 0xEF29286D61657274;
    *(void *)(v30 + 40) = 0xD000000000000016;
    *(void *)(v30 + 48) = 0x80000001000E4E30;
    uint64_t v31 = 598;
LABEL_13:
    *(void *)(v30 + 56) = v31;
    swift_willThrow();

    return;
  }
  os_signpost_id_t v16 = *(void **)(*(void *)&v2[OBJC_IVAR___AUAStream_interface] + 112);
  if (!v16)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v30 = 1;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0xE000000000000000;
    *(void *)(v30 + 24) = 0x5365726170657270;
    *(void *)(v30 + 32) = 0xEF29286D61657274;
    *(void *)(v30 + 40) = 0xD000000000000016;
    *(void *)(v30 + 48) = 0x80000001000E4E30;
    uint64_t v31 = 599;
    goto LABEL_13;
  }
  uint64_t v40 = v4;
  uint64_t v17 = qword_100126910;
  swift_retain();
  id v39 = v16;
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_10000AD60(v7, (uint64_t)qword_10012B220);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v10, v18, v7);
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v6, &v2[OBJC_IVAR___AUAStream_signpostID], v3);
  swift_retain();
  unint64_t v19 = (uint8_t *)swift_slowAlloc();
  uint64_t v37 = v7;
  uint64_t v20 = v15;
  id v21 = v19;
  *(_DWORD *)unint64_t v19 = 16777472;
  char v43 = *(unsigned char *)(*(void *)(v20 + 16) + 3);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  os_log_t v36 = (os_log_t)OSSignposter.logHandle.getter();
  os_signpost_type_t v22 = static os_signpost_type_t.begin.getter();
  uint64_t v38 = v3;
  os_signpost_type_t v23 = v22;
  os_signpost_id_t v24 = OSSignpostID.rawValue.getter();
  os_signpost_type_t v25 = v23;
  os_log_t v26 = v36;
  char v35 = v21;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v36, v25, v24, "AUAStream_prepareStream", "alternate %hhu", v21, 5u);
  id v27 = v39;
  uint64_t v28 = v42;
  sub_100094420(v39, v20, v14, v2);
  if (v28)
  {

    swift_release();
  }
  else
  {
    Swift::String v32 = v26;
    os_signpost_type_t v33 = static os_signpost_type_t.end.getter();
    os_signpost_id_t v34 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, v33, v34, "AUAStream_prepareStream", "alternate %hhu", v35, 5u);

    swift_slowDealloc();
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v38);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v37);
}

void sub_100094420(void *a1, uint64_t a2, void *a3, char *a4)
{
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(a2 + 16) + 3);
  os_log_t v36 = 0;
  unsigned int v10 = [a1 selectAlternateSetting:v9 error:&v36];
  id v11 = v36;
  if (!v10)
  {
    uint64_t v29 = v36;
    _convertNSErrorToError(_:)();

LABEL_17:
    swift_willThrow();
    return;
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v13 = v11;
  if (Strong)
  {
    ActiveStreamingInterface.clock()();
    uint64_t v15 = v14;
    swift_release();
    if (v4) {
      return;
    }
    uint64_t ObjectType = swift_getObjectType();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v15 + 96))(ObjectType, v15) & 1) == 0) {
      goto LABEL_9;
    }
    [a3 sampleRate];
    if ((~*(void *)&v17 & 0x7FF0000000000000) != 0)
    {
      if (v17 > -1.0)
      {
        if (v17 < 1.84467441e19)
        {
          (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v15 + 24))((unint64_t)v17, 0, ObjectType, v15);
LABEL_9:
          swift_unknownObjectRelease();
          goto LABEL_10;
        }
LABEL_25:
        __break(1u);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_10:
  uint64_t v18 = OBJC_IVAR___AUAStream_streamingEndpoint;
  *(void *)&a4[OBJC_IVAR___AUAStream_streamingEndpoint] = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  if (!*(void *)&a4[v18])
  {
    __break(1u);
    goto LABEL_27;
  }
  swift_retain();
  sub_1000DB718(a1, 0);
  swift_release();
  if (!v4)
  {
    uint64_t v19 = sub_10000B65C(a4, a3, a1);
    uint64_t v20 = OBJC_IVAR___AUAStream_transferManager;
    *(void *)&a4[OBJC_IVAR___AUAStream_transferManager] = v19;
    swift_release();
    if (*(void *)&a4[v20])
    {
      unsigned int v21 = [a4 direction];
      uint64_t v22 = *(void *)&a4[v20];
      if (v21 != 1768845428)
      {
        if (v22)
        {
          uint64_t v31 = *(uint64_t (**)(uint64_t))(*(void *)v22 + 120);
          uint64_t v32 = swift_retain();
          uint64_t v33 = v31(v32);
          uint64_t v35 = v34;
          swift_release();
          uint64_t v40 = v33;
          uint64_t v41 = v35;
          os_log_t v36 = _NSConcreteStackBlock;
          uint64_t v37 = 1107296256;
          uint64_t v38 = sub_10009486C;
          id v39 = &unk_10011A758;
          uint64_t v28 = _Block_copy(&v36);
          swift_release();
          [a4 setWriteMixBlock:v28];
          goto LABEL_22;
        }
        goto LABEL_28;
      }
      if (v22)
      {
        os_signpost_type_t v23 = *(uint64_t (**)(uint64_t))(*(void *)v22 + 120);
        uint64_t v24 = swift_retain();
        uint64_t v25 = v23(v24);
        uint64_t v27 = v26;
        swift_release();
        uint64_t v40 = v25;
        uint64_t v41 = v27;
        os_log_t v36 = _NSConcreteStackBlock;
        uint64_t v37 = 1107296256;
        uint64_t v38 = sub_10009486C;
        id v39 = &unk_10011A780;
        uint64_t v28 = _Block_copy(&v36);
        swift_release();
        [a4 setReadInputBlock:v28];
LABEL_22:
        _Block_release(v28);
        return;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      return;
    }
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v30 = 101;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0xE000000000000000;
    *(void *)(v30 + 24) = 0x5365726170657270;
    *(void *)(v30 + 32) = 0xEF29286D61657274;
    *(void *)(v30 + 40) = 0xD000000000000016;
    *(void *)(v30 + 48) = 0x80000001000E4E30;
    *(void *)(v30 + 56) = 621;
    goto LABEL_17;
  }
}

uint64_t sub_10009486C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v12 = v11(a2, a3, a4, a5, a6);
  swift_release();
  return v12;
}

void sub_1000948F0()
{
}

Swift::String_optional __swiftcall AUAStream.channelName(forChannelIndex:)(Swift::UInt32 forChannelIndex)
{
  ActiveOutputTerminal.cluster.getter();
  if (v2)
  {
    if (*(void *)(v2 + 16) > (unint64_t)forChannelIndex
      && (v3 = v2 + 32 * forChannelIndex, (unint64_t v4 = *(void *)(v3 + 48)) != 0))
    {
      uint64_t v5 = *(void *)(v3 + 40);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v5 = 0;
      unint64_t v4 = 0xE000000000000000;
    }
    swift_bridgeObjectRelease();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v7 = (void *)Strong;
      swift_getObjectType();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v9 = [self bundleForClass:ObjCClassFromMetadata];
      NSString v10 = String._bridgeToObjectiveC()();
      id v11 = [v9 localizedStringForKey:v10 value:0 table:0];

      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v13 = v4;
    }
  }
  else
  {
    sub_10002E81C(0xD00000000000001ALL, 0x80000001000E4E90, 0xD00000000000001DLL, (void *)0x80000001000E4EB0, 0xD000000000000016, 0x80000001000E4E30, 674);
    uint64_t v5 = 0;
    unint64_t v13 = 0xE000000000000000;
  }
  uint64_t v14 = v5;
  uint64_t v15 = (void *)v13;
  result.value._object = v15;
  result.value._countAndFlagsBits = v14;
  return result;
}

Swift::String_optional __swiftcall AUAStream.channelCategory(forChannelIndex:)(Swift::UInt32 forChannelIndex)
{
  sub_10002E81C(0xD00000000000001ELL, 0x80000001000E4ED0, 0xD000000000000021, (void *)0x80000001000E4EF0, 0xD000000000000016, 0x80000001000E4E30, 680);
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

Swift::String_optional __swiftcall AUAStream.channelNumber(forChannelIndex:)(Swift::UInt32 forChannelIndex)
{
  sub_10002E81C(0xD00000000000001CLL, 0x80000001000E4F20, 0xD00000000000001FLL, (void *)0x80000001000E4F40, 0xD000000000000016, 0x80000001000E4E30, 686);
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

uint64_t AUAStream.preferredChannelDescription(_:forChannelIndex:)(uint64_t a1, unsigned int a2)
{
  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x100094E88);
  }
  *(void *)(a1 + 4) = 0;
  *(void *)(a1 + 12) = 0;
  uint64_t result = ActiveOutputTerminal.cluster.getter();
  if (!v5) {
    goto LABEL_7;
  }
  if (*(void *)(v5 + 16) <= (unint64_t)a2)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_7:
    int v7 = -1;
    goto LABEL_8;
  }
  int v6 = *(_DWORD *)(v5 + 32 * a2 + 56);
  uint64_t result = swift_bridgeObjectRelease();
  int v7 = 42;
  switch(v6)
  {
    case 1:
      break;
    case 2:
    case 11:
    case 70:
      int v7 = 1;
      break;
    case 3:
    case 12:
    case 71:
      int v7 = 2;
      break;
    case 5:
      int v7 = 206;
      break;
    case 6:
      int v7 = 207;
      break;
    case 13:
      int v7 = 3;
      break;
    case 14:
      int v7 = 7;
      break;
    case 15:
      int v7 = 8;
      break;
    case 16:
      int v7 = 65;
      break;
    case 17:
      int v7 = 66;
      break;
    case 18:
      int v7 = 10;
      break;
    case 19:
      int v7 = 11;
      break;
    case 22:
      int v7 = 5;
      break;
    case 23:
      int v7 = 6;
      break;
    case 37:
      int v7 = 49;
      break;
    case 38:
      int v7 = 51;
      break;
    case 67:
      int v7 = 4;
      break;
    default:
      goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)a1 = v7;
  return result;
}

id AUAStream.__allocating_init(direction:with:)(uint64_t a1, void *a2)
{
  id v4 = [objc_allocWithZone(v2) initWithDirection:a1 withPlugin:a2];

  return v4;
}

void AUAStream.init(direction:with:)()
{
}

id AUAStream.__deallocating_deinit()
{
  return sub_100096940(0, (uint64_t (*)(void))type metadata accessor for AUAStream);
}

void sub_1000951D4()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OSSignposter();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10000AD60(v5, (uint64_t)qword_10012B220);
  NSString v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v25 = v5;
  v10(v8, v9, v5);
  uint64_t v26 = v2;
  uint64_t v27 = v1;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, (uint64_t)v0 + OBJC_IVAR___AUAStream_signpostID, v1);
  id v11 = v0;
  uint64_t v12 = swift_slowAlloc();
  *(_DWORD *)uint64_t v12 = 134218240;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {

    __break(1u);
    goto LABEL_10;
  }
  uint64_t v14 = (void *)Strong;
  uint64_t v15 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_lockDelayMS);

  uint64_t v29 = v15;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  *(_WORD *)(v12 + 12) = 2048;
  uint64_t v16 = swift_unknownObjectWeakLoadStrong();
  if (!v16)
  {
LABEL_10:

    __break(1u);
    return;
  }
  double v17 = (void *)v16;
  uint64_t v18 = *(void *)(v16 + OBJC_IVAR___AUAAudioDevice_feedbackDelayMS);

  uint64_t v29 = v18;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  uint64_t v19 = OSSignposter.logHandle.getter();
  os_signpost_type_t v20 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, v20, v21, "AUAInputStream_prepareStream", "locklDelayMS %lu, feedbackDelayMS %lu", (uint8_t *)v12, 0x16u);
  uint64_t v22 = v28;
  sub_10009557C((char *)v11);
  if (v22)
  {
  }
  else
  {
    os_signpost_type_t v23 = static os_signpost_type_t.end.getter();
    os_signpost_id_t v24 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, v23, v24, "AUAInputStream_prepareStream", "locklDelayMS %lu, feedbackDelayMS %lu", (uint8_t *)v12, 0x16u);

    swift_slowDealloc();
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v27);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v25);
}

void sub_10009557C(char *a1)
{
  sub_100093EB8();
  if (!v1)
  {
    id v3 = [a1 physicalFormat];
    if (v3)
    {
      id v4 = v3;
      type metadata accessor for AUAStreamFormat();
      uint64_t v5 = swift_dynamicCastClass();
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + OBJC_IVAR___AUAStreamFormat_altSetting);
        if (!v6)
        {
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v30 = 74;
          *(void *)(v30 + 8) = 0;
          *(void *)(v30 + 16) = 0xE000000000000000;
          *(void *)(v30 + 24) = 0x5365726170657270;
          *(void *)(v30 + 32) = 0xEF29286D61657274;
          *(void *)(v30 + 40) = 0xD000000000000016;
          *(void *)(v30 + 48) = 0x80000001000E4E30;
          *(void *)(v30 + 56) = 743;
          swift_willThrow();

          return;
        }
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        if (!Strong) {
          goto LABEL_30;
        }
        uint64_t v8 = (void *)Strong;
        unint64_t v9 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_lockDelayMS);
        swift_retain();

        NSString v10 = *(void **)(v6 + 104);
        unint64_t v11 = v10[12];
        if (is_mul_ok(v9, v11))
        {
          unint64_t v12 = v10[13];
          if (v12)
          {
            unint64_t v13 = v9 * v11 / v12;
            uint64_t v14 = OBJC_IVAR___AUAInputStream_lockDelayTransfers;
            *(void *)&a1[OBJC_IVAR___AUAInputStream_lockDelayTransfers] = v13;
            unint64_t v15 = v10[14];
            if (is_mul_ok(v15, v13))
            {
              if (((v15 * v13) & 0x8000000000000000) == 0)
              {
                id v16 = [objc_allocWithZone((Class)NSMutableData) initWithLength:v15 * v13];
                double v17 = *(void **)&a1[OBJC_IVAR___AUAInputStream_lockDelayBuffer];
                *(void *)&a1[OBJC_IVAR___AUAInputStream_lockDelayBuffer] = v16;

                uint64_t v18 = *(void *)&a1[v14];
                if ((v18 & 0x8000000000000000) == 0)
                {
                  if ((unsigned __int128)(v18 * (__int128)28) >> 64 == (28 * v18) >> 63)
                  {
                    id v19 = [objc_allocWithZone((Class)NSMutableData) initWithLength:28 * v18];
                    uint64_t v20 = OBJC_IVAR___AUAInputStream_lockDelayTransactionList;
                    os_signpost_id_t v21 = *(void **)&a1[OBJC_IVAR___AUAInputStream_lockDelayTransactionList];
                    *(void *)&a1[OBJC_IVAR___AUAInputStream_lockDelayTransactionList] = v19;

                    uint64_t v22 = *(void **)&a1[v20];
                    if (v22)
                    {
                      os_signpost_type_t v23 = (char *)[v22 bytes];
                      uint64_t v24 = *(void *)&a1[v14];
                      if (!v24)
                      {
LABEL_19:

                        swift_release();
                        return;
                      }
                      unint64_t v25 = *(void *)(*(void *)(v6 + 104) + 112);
                      if (!HIDWORD(v25))
                      {
                        uint64_t v26 = v24 - 1;
                        uint64_t v27 = v23 + 16;
                        unint64_t v28 = 0x8000000000000000;
                        while (1)
                        {
                          *((void *)v27 - 1) = 0;
                          *(void *)uint64_t v27 = 0;
                          *((_DWORD *)v27 - 4) = -536870911;
                          *((_DWORD *)v27 - 3) = v25;
                          *((_DWORD *)v27 + 2) = 0;
                          if (!v26) {
                            goto LABEL_19;
                          }
                          --v26;
                          v27 += 28;
                          if (!--v28)
                          {
                            __break(1u);
                            goto LABEL_19;
                          }
                        }
                      }
                      goto LABEL_32;
                    }
LABEL_31:
                    __break(1u);
LABEL_32:
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    return;
                  }
                  goto LABEL_29;
                }
LABEL_28:
                __break(1u);
LABEL_29:
                __break(1u);
LABEL_30:
                __break(1u);
                goto LABEL_31;
              }
LABEL_27:
              __break(1u);
              goto LABEL_28;
            }
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_26;
      }
    }
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v29 = 1;
    *(void *)(v29 + 8) = 0;
    *(void *)(v29 + 16) = 0xE000000000000000;
    *(void *)(v29 + 24) = 0x5365726170657270;
    *(void *)(v29 + 32) = 0xEF29286D61657274;
    *(void *)(v29 + 40) = 0xD000000000000016;
    *(void *)(v29 + 48) = 0x80000001000E4E30;
    *(void *)(v29 + 56) = 742;
    swift_willThrow();
  }
}

void sub_1000958F8()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OSSignposter();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  NSString v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    __break(1u);
    goto LABEL_8;
  }
  os_log_t v36 = v10;
  uint64_t v37 = v6;
  uint64_t v39 = v7;
  uint64_t v40 = v8;
  uint64_t v38 = v4;
  uint64_t v41 = v3;
  uint64_t v12 = *(void *)&Strong[OBJC_IVAR___AUAAudioDevice_startingUSBLockDelayFrame];

  uint64_t v43 = 0;
  uint64_t v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(79);
  v13._countAndFlagsBits = 0xD00000000000001BLL;
  v13._object = (void *)0x80000001000E5A20;
  String.append(_:)(v13);
  uint64_t v14 = (char *)swift_unknownObjectWeakLoadStrong();
  if (!v14)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)&v14[OBJC_IVAR___AUAAudioDevice_lockDelayMS];

  uint64_t v42 = v15;
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0xD000000000000015;
  v17._object = (void *)0x80000001000E5A40;
  String.append(_:)(v17);
  uint64_t v18 = OBJC_IVAR___AUAInputStream_lockDelayTransfers;
  uint64_t v42 = *(void *)&v2[OBJC_IVAR___AUAInputStream_lockDelayTransfers];
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0xD000000000000019;
  v20._object = (void *)0x80000001000E5A60;
  String.append(_:)(v20);
  uint64_t v35 = v12;
  uint64_t v42 = v12;
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  sub_10002E804(v43, v44, 0xD000000000000010, (void *)0x80000001000E5A80, 0xD000000000000016, 0x80000001000E4E30, 765);
  swift_bridgeObjectRelease();
  if (qword_100126910 != -1) {
    swift_once();
  }
  sub_10000AD60(v39, (uint64_t)qword_10012B220);
  uint64_t v22 = v36;
  (*(void (**)(void))(v40 + 16))();
  os_signpost_type_t v23 = v37;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v37, &v2[OBJC_IVAR___AUAStream_signpostID], v41);
  uint64_t v1 = v2;
  uint64_t v24 = swift_slowAlloc();
  *(_DWORD *)uint64_t v24 = 134218496;
  uint64_t v25 = swift_unknownObjectWeakLoadStrong();
  if (v25)
  {
    uint64_t v26 = (void *)v25;
    uint64_t v27 = *(void *)(v25 + OBJC_IVAR___AUAAudioDevice_lockDelayMS);

    uint64_t v43 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v24 + 12) = 2048;
    uint64_t v28 = *(void *)&v2[v18];

    uint64_t v43 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v24 + 22) = 2048;
    uint64_t v29 = v35;
    uint64_t v43 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v30 = OSSignposter.logHandle.getter();
    os_signpost_type_t v31 = static os_signpost_type_t.begin.getter();
    os_signpost_id_t v32 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, v31, v32, "AUAInputStream_startLockDelay", "lockDelayMS %lu _lockDelayTransfers %lu, startingLockDelayFrame %llu", (uint8_t *)v24, 0x20u);
    sub_100095E34(v1, v29);
    LOBYTE(v29) = static os_signpost_type_t.end.getter();
    os_signpost_id_t v33 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, (os_signpost_type_t)v29, v33, "AUAInputStream_startLockDelay", "lockDelayMS %lu _lockDelayTransfers %lu, startingLockDelayFrame %llu", (uint8_t *)v24, 0x20u);

    swift_slowDealloc();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v23, v41);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v39);
    return;
  }
LABEL_9:

  __break(1u);
}

char *sub_100095E34(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v55 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v55 - 8);
  uint64_t v7 = __chkstk_darwin(v55);
  uint64_t v9 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)v45 - v10;
  id v12 = [a1 physicalFormat];
  uint64_t v54 = v9;
  if (!v12) {
    goto LABEL_12;
  }
  Swift::String v13 = v12;
  type metadata accessor for AUAStreamFormat();
  uint64_t result = (char *)swift_dynamicCastClass();
  if (!result)
  {

LABEL_12:
    sub_10000CD54();
    uint64_t v22 = swift_allocError();
    *(unsigned char *)uint64_t v24 = 1;
    *(void *)(v24 + 8) = 0;
    *(void *)(v24 + 16) = 0xE000000000000000;
    *(void *)(v24 + 24) = 0xD000000000000010;
    *(void *)(v24 + 32) = 0x80000001000E5A80;
    *(void *)(v24 + 40) = 0xD000000000000016;
    *(void *)(v24 + 48) = 0x80000001000E4E30;
    *(void *)(v24 + 56) = 771;
    swift_willThrow();
    goto LABEL_13;
  }
  uint64_t v15 = *(void *)&result[OBJC_IVAR___AUAStreamFormat_altSetting];
  if (!v15 || (uint64_t v16 = *(void *)(*(void *)(v15 + 104) + 120)) == 0)
  {
    sub_10000CD54();
    uint64_t v22 = swift_allocError();
    *(unsigned char *)uint64_t v23 = 1;
    *(void *)(v23 + 8) = 0;
    *(void *)(v23 + 16) = 0xE000000000000000;
    *(void *)(v23 + 24) = 0xD000000000000010;
    *(void *)(v23 + 32) = 0x80000001000E5A80;
    *(void *)(v23 + 40) = 0xD000000000000016;
    *(void *)(v23 + 48) = 0x80000001000E4E30;
    *(void *)(v23 + 56) = 773;
    swift_willThrow();

LABEL_13:
    int v50 = 0;
    uint64_t v51 = 0;
    goto LABEL_14;
  }
  Swift::String v17 = *(void **)&a1[OBJC_IVAR___AUAInputStream_lockDelayBuffer];
  if (!v17)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v18 = a1;
  Swift::String v19 = *(void **)&a1[OBJC_IVAR___AUAInputStream_lockDelayTransactionList];
  if (!v19)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  swift_retain_n();
  id v20 = v17;
  uint64_t result = (char *)[v19 bytes];
  uint64_t v21 = *(void *)&v18[OBJC_IVAR___AUAInputStream_lockDelayTransfers];
  if (v21 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  a1 = v18;
  sub_1000DAEFC((uint64_t)v20, (uint64_t)result, v21, a2, 0, 0, 0);
  uint64_t v22 = v3;
  if (!v3)
  {

    return (char *)swift_release_n();
  }

  v45[1] = v16;
  swift_release_n();
  int v50 = 1;
  uint64_t v51 = 0;
LABEL_14:
  uint64_t v52 = v22;
  uint64_t v25 = (void *)_convertErrorToNSError(_:)();
  id v26 = [v25 code];

  uint64_t v56 = 0x20726F727265;
  uint64_t v57 = 0xE600000000000000;
  sub_10000AC7C(&qword_100127420);
  uint64_t v27 = swift_allocObject();
  long long v46 = xmmword_1000E8090;
  *(_OWORD *)(v27 + 16) = xmmword_1000E8090;
  *(void *)(v27 + 56) = &type metadata for Int;
  *(void *)(v27 + 64) = &protocol witness table for Int;
  id v47 = v26;
  *(void *)(v27 + 32) = v26;
  v28._countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  unint64_t v49 = (unint64_t)", startingLockDelayFrame ";
  unint64_t v48 = (unint64_t)"changePhysicalFormat(_:)";
  sub_10002E81C(v56, v57, 0xD000000000000010, (void *)0x80000001000E5A80, 0xD000000000000016, 0x80000001000E4E30, 781);
  swift_bridgeObjectRelease();
  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for OSSignposter();
  sub_10000AD60(v29, (uint64_t)qword_10012B220);
  uint64_t v53 = a1;
  uint64_t v30 = &a1[OBJC_IVAR___AUAStream_signpostID];
  uint64_t v31 = v6;
  os_signpost_id_t v32 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v33 = v55;
  v32(v11, v30, v55);
  uint64_t v34 = OSSignposter.logHandle.getter();
  os_signpost_type_t v35 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    v32(v54, v11, v33);
    os_log_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    *(_DWORD *)os_log_t v36 = 136315138;
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = v46;
    *(void *)(v37 + 56) = &type metadata for Int;
    *(void *)(v37 + 64) = &protocol witness table for Int;
    *(void *)(v37 + 32) = v47;
    uint64_t v38 = String.init(format:_:)();
    uint64_t v58 = sub_1000192BC(v38, v39, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v40 = v54;
    os_signpost_id_t v41 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, v35, v41, "AUAInputStream_startLockDelay_error", "error %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v42 = *(void (**)(char *, uint64_t))(v31 + 8);
    uint64_t v43 = v55;
    v42(v11, v55);
    v42(v40, v43);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v33);
  }
  uint64_t result = (char *)swift_unknownObjectWeakLoadStrong();
  if (!result) {
    goto LABEL_25;
  }
  uint64_t v44 = result;
  AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(0xD000000000000010, v49 | 0x8000000000000000, 0xD000000000000016, v48 | 0x8000000000000000, 783, (uint64_t)ClusterChannelInfo.chNum.getter, 0);

  uint64_t result = (char *)swift_errorRelease();
  if (v50) {
    return (char *)swift_release();
  }
  return result;
}

uint64_t sub_1000964F4()
{
  return sub_10009AF90((uint64_t)&OBJC_IVAR___AUAStream_signpostID, "AUAInputStream_startDirectionalStream", (void (*)(uint64_t))sub_10009651C);
}

uint64_t sub_10009651C(char *a1)
{
  sub_1000958F8();
  uint64_t v2 = *(void **)(*(void *)&a1[OBJC_IVAR___AUAStream_interface] + 104);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_10009E3FC;
  *(void *)(v4 + 24) = v3;
  v9[4] = sub_10009E414;
  v9[5] = v4;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100096700;
  v9[3] = &unk_10011A730;
  uint64_t v5 = _Block_copy(v9);
  uint64_t v6 = v2;
  uint64_t v7 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v5);

  _Block_release(v5);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10009669C(void *a1)
{
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_10009D410(a1, v2);

  return swift_release();
}

uint64_t sub_100096700(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100096728()
{
  uint64_t result = (uint64_t)[v0 physicalFormat];
  if (result)
  {
    uint64_t v2 = (void *)result;
    type metadata accessor for AUAStreamFormat();
    uint64_t v3 = swift_dynamicCastClass();
    if (v3 && (uint64_t v4 = *(void *)(v3 + OBJC_IVAR___AUAStreamFormat_altSetting)) != 0)
    {
      uint64_t v5 = *(void *)(v4 + 104);
      swift_beginAccess();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v7 = (void *)Strong;
        uint64_t v8 = *(void *)(Strong + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
        if (v8)
        {
          BOOL v9 = sub_10001925C(11, v8);
          swift_retain();

          if (v9)
          {

            swift_release();
            return 1;
          }
        }
        else
        {
          swift_retain();
        }
      }
      else
      {
        swift_retain();
      }
      int v10 = IOUSBGetEndpointUsageType(*(const IOUSBEndpointDescriptor **)(v5 + 16));

      swift_release();
      return v10 == 2;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

void sub_1000968E4()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___AUAInputStream_lockDelayTransactionList);
}

id sub_100096924()
{
  return sub_100096940(0, (uint64_t (*)(void))type metadata accessor for AUAInputStream);
}

id sub_100096940(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_1000969C4()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  sub_10001AC94(v0, qword_10012B240);
  sub_10000AD60(v0, (uint64_t)qword_10012B240);
  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for OSSignposter();
  sub_10000AD60(v1, (uint64_t)qword_10012B220);
  OSSignposter.logHandle.getter();
  return OSSignpostID.init(log:)();
}

BOOL sub_100096A60(char *a1, char *a2)
{
  return dword_1000EC6D8[*a1] == dword_1000EC6D8[*a2];
}

Swift::Int sub_100096A84()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(dword_1000EC6D8[v1]);
  return Hasher._finalize()();
}

void sub_100096AD4()
{
  Hasher._combine(_:)(dword_1000EC6D8[*v0]);
}

Swift::Int sub_100096B0C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(dword_1000EC6D8[v1]);
  return Hasher._finalize()();
}

unsigned char *sub_100096B58@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if ((*(_DWORD *)result - 3) >= 6) {
    char v2 = 3;
  }
  else {
    char v2 = 0x20303030100uLL >> (8 * (*result - 3));
  }
  *a2 = v2;
  return result;
}

void sub_100096B88(_DWORD *a1@<X8>)
{
  *a1 = dword_1000EC6D8[*v1];
}

id sub_100096BA0(id result, int a2, unsigned int a3, uint64_t a4)
{
  *(void *)(v4 + 16) = 8;
  *(void *)(v4 + 64) = 0;
  if ((unint64_t)(a4 - 0x1000000000000000) >> 61 == 7)
  {
    BOOL v9 = result;
    uint64_t result = sub_100005D78(result, 8 * a4);
    if (v5)
    {
LABEL_3:

      type metadata accessor for AUAFeedbackTransferBlock();
      swift_deallocPartialClassInstance();
      return (id)v4;
    }
    if ((unsigned __int128)(a4 * (__int128)28) >> 64 == (28 * a4) >> 63)
    {
      int v10 = result;
      id v11 = [objc_allocWithZone((Class)NSMutableData) initWithLength:28 * a4];
      if (!v11)
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v15 = 87;
        *(void *)(v15 + 8) = 0;
        *(void *)(v15 + 16) = 0xE000000000000000;
        *(void *)(v15 + 24) = 0xD000000000000042;
        *(void *)(v15 + 32) = 0x80000001000E5560;
        *(void *)(v15 + 40) = 0xD000000000000016;
        *(void *)(v15 + 48) = 0x80000001000E4E30;
        *(void *)(v15 + 56) = 912;
        swift_willThrow();

        goto LABEL_3;
      }
      id v12 = v11;
      *(void *)(v4 + 40) = v10;
      id v19 = v10;
      bzero([v19 mutableBytes], (size_t)objc_msgSend(v19, "length"));
      *(void *)(v4 + 48) = v12;
      id v18 = v12;
      id v13 = [v18 mutableBytes];
      uint64_t v14 = *(void **)(v4 + 48);
      bzero(v13, (size_t)[v14 length]);
      *(void *)(v4 + 32) = a4;
      *(void *)(v4 + 56) = [v14 mutableBytes];
      if (a2 == 1)
      {
        if (a3 >= 3)
        {

          *(unsigned char *)(v4 + 24) = 0;
          return (id)v4;
        }
      }
      else if (a2 == 3)
      {
        if (a3 >= 3)
        {

          if (a3 == 3)
          {
            *(unsigned char *)(v4 + 24) = 0;
            return (id)v4;
          }
          goto LABEL_18;
        }
      }
      else if (a3 >= 4)
      {

        if (a3 != 4)
        {
          char v17 = 2;
          goto LABEL_20;
        }
LABEL_18:
        char v17 = 1;
LABEL_20:
        *(unsigned char *)(v4 + 24) = v17;
        return (id)v4;
      }
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v16 = 97;
      *(void *)(v16 + 8) = 0;
      *(void *)(v16 + 16) = 0xE000000000000000;
      *(void *)(v16 + 24) = 0xD00000000000001DLL;
      *(void *)(v16 + 32) = 0x80000001000E55B0;
      *(void *)(v16 + 40) = 0xD000000000000016;
      *(void *)(v16 + 48) = 0x80000001000E4E30;
      *(void *)(v16 + 56) = 902;
      swift_willThrow();

      BOOL v9 = *(void **)(v4 + 48);
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100096ECC()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  id v67 = (char *)v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v65 - v5;
  uint64_t v80 = type metadata accessor for OSSignposter();
  __chkstk_darwin(v80);
  id v79 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v0 + 32);
  uint64_t v10 = *(void *)(v0 + 64);
  if (v10 < v9)
  {
    uint64_t v11 = v0;
    Swift::String v75 = (void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    Swift::String v76 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    Swift::String v72 = (void (**)(char *, uint64_t))(v7 + 8);
    Swift::String v73 = (void (**)(char *, uint64_t))(v2 + 8);
    id v12 = _swiftEmptyArrayStorage;
    unint64_t v68 = (unint64_t)"changePhysicalFormat(_:)";
    uint64_t v70 = 0x80000001000E4E30;
    uint64_t v71 = 0x80000001000E5910;
    v65[0] = 0x80000001000E5990;
    *((void *)&v13 + 1) = 2;
    long long v69 = xmmword_1000E8090;
    *(void *)&long long v13 = 136446210;
    long long v66 = v13;
    v65[1] = (char *)&type metadata for Any + 8;
    uint64_t v77 = v9;
    unint64_t v78 = v6;
    uint64_t v74 = v1;
    uint64_t v81 = v0;
    do
    {
      uint64_t v14 = *(void *)(v11 + 56);
      int v15 = *(_DWORD *)(v14 + 28 * v10);
      if (v15 == -536870163)
      {
        if (qword_100126910 != -1) {
          swift_once();
        }
        uint64_t v26 = v80;
        uint64_t v27 = sub_10000AD60(v80, (uint64_t)qword_10012B220);
        (*v76)(v79, v27, v26);
        Swift::String v28 = v75;
        if (qword_100126920 != -1) {
          swift_once();
        }
        uint64_t v29 = sub_10000AD60(v1, (uint64_t)qword_10012B240);
        uint64_t v30 = *v28;
        (*v28)(v6, v29, v1);
        uint64_t v31 = v79;
        os_signpost_id_t v32 = OSSignposter.logHandle.getter();
        os_signpost_type_t v33 = static os_signpost_type_t.event.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          uint64_t v34 = v67;
          v30(v67, (uint64_t)v6, v1);
          os_signpost_type_t v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_signpost_type_t v35 = 0;
          os_signpost_id_t v36 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, v33, v36, "AUAFeedbackTransferBlock_readFeedback", "Feedback recieved frameStatus kIOReturnNotResponding, using previous value", v35, 2u);
          uint64_t v6 = v78;
          swift_slowDealloc();

          uint64_t v37 = *v73;
          (*v73)(v6, v1);
          (*v72)(v31, v80);
          uint64_t v38 = v34;
          uint64_t v9 = v77;
          v37(v38, v1);
        }
        else
        {

          (*v73)(v6, v1);
          (*v72)(v31, v80);
        }
        sub_10002E804(0xD00000000000004ALL, v71, 0x6465654664616572, (void *)0xEE0029286B636162, 0xD000000000000016, v70, 1021);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v12 = sub_10005A204(0, v12[2] + 1, 1, v12);
        }
        uint64_t v1 = v74;
      }
      else
      {
        if (v15)
        {
          if (v15 == -536870911) {
            return;
          }
          uint64_t v83 = 0x7461747320646162;
          uint64_t v84 = 0xEB00000000207375;
          sub_10000AC7C(&qword_100127420);
          uint64_t v16 = swift_allocObject();
          *(_OWORD *)(v16 + 16) = v69;
          *(void *)(v16 + 56) = &type metadata for Int32;
          *(void *)(v16 + 64) = &protocol witness table for Int32;
          *(_DWORD *)(v16 + 32) = v15;
          v17._countAndFlagsBits = String.init(format:_:)();
          String.append(_:)(v17);
          swift_bridgeObjectRelease();
          uint64_t v19 = v83;
          uint64_t v18 = v84;
          if (qword_1001268F0 != -1) {
            swift_once();
          }
          uint64_t v20 = type metadata accessor for Logger();
          sub_10000AD60(v20, (uint64_t)qword_10012B1F8);
          swift_bridgeObjectRetain_n();
          uint64_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v21, v22))
          {
            uint64_t v23 = swift_slowAlloc();
            uint64_t v83 = swift_slowAlloc();
            *(_DWORD *)uint64_t v23 = v66;
            uint64_t v24 = sub_10002E8A0(v19, v18, 0x6465654664616572, (void *)0xEE0029286B636162);
            *(void *)(v23 + 4) = sub_1000192BC(v24, v25, &v83);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s", (uint8_t *)v23, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_bridgeObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          uint64_t v9 = v77;
          uint64_t v6 = v78;
          goto LABEL_48;
        }
        uint64_t v39 = v14 + 28 * v10;
        int v42 = *(_DWORD *)(v39 + 12);
        os_signpost_id_t v41 = (int *)(v39 + 12);
        int v40 = v42;
        if (v42)
        {
          int v43 = dword_1000EC6D8[*(char *)(v11 + 24)];
          if (v40 == v43)
          {
            int v44 = *(unsigned __int8 *)(v11 + 24);
            unint64_t v45 = *(void *)((char *)[*(id *)(v11 + 40) bytes]
                            + *(unsigned int *)(v14 + 28 * v10 + 8));
            if (v44)
            {
              if (v44 == 1)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  id v12 = sub_10005A204(0, v12[2] + 1, 1, v12);
                }
                unint64_t v47 = v12[2];
                unint64_t v46 = v12[3];
                unint64_t v48 = v47 + 1;
                if (v47 >= v46 >> 1) {
                  id v12 = sub_10005A204((void *)(v46 > 1), v47 + 1, 1, v12);
                }
                uint64_t v49 = 1000 * (unsigned __int16)v45;
                unint64_t v50 = WORD1(v45);
              }
              else
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  id v12 = sub_10005A204(0, v12[2] + 1, 1, v12);
                }
                unint64_t v47 = v12[2];
                unint64_t v61 = v12[3];
                unint64_t v48 = v47 + 1;
                if (v47 >= v61 >> 1) {
                  id v12 = sub_10005A204((void *)(v61 > 1), v47 + 1, 1, v12);
                }
                uint64_t v49 = 1000 * v45;
                unint64_t v50 = HIDWORD(v45);
              }
              v12[2] = v48;
              uint64_t v62 = &v12[2 * v47];
              v62[4] = v50;
              v62[5] = v49;
            }
            else
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                id v12 = sub_10005A204(0, v12[2] + 1, 1, v12);
              }
              unint64_t v59 = v12[2];
              unint64_t v58 = v12[3];
              if (v59 >= v58 >> 1) {
                id v12 = sub_10005A204((void *)(v58 > 1), v59 + 1, 1, v12);
              }
              v12[2] = v59 + 1;
              uint64_t v60 = &v12[2 * v59];
              v60[4] = ((4 * v45) >> 16) & 0x3FF;
              v60[5] = 1000 * ((4 * v45) & 0xFFFC);
            }
          }
          else
          {
            uint64_t v83 = 0;
            uint64_t v84 = 0xE000000000000000;
            _StringGuts.grow(_:)(63);
            v54._countAndFlagsBits = 0xD000000000000030;
            v54._object = (void *)v65[0];
            String.append(_:)(v54);
            int v82 = *v41;
            v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v55);
            swift_bridgeObjectRelease();
            v56._countAndFlagsBits = 0x746365707865202CLL;
            v56._object = (void *)0xEB00000000206465;
            String.append(_:)(v56);
            int v82 = v43;
            v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v57);
            swift_bridgeObjectRelease();
            sub_10002E81C(v83, v84, 0x6465654664616572, (void *)0xEE0029286B636162, 0xD000000000000016, v68 | 0x8000000000000000, 997);
            swift_bridgeObjectRelease();
          }
LABEL_48:
          uint64_t v11 = v81;
          goto LABEL_49;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v12 = sub_10005A204(0, v12[2] + 1, 1, v12);
        }
      }
      unint64_t v52 = v12[2];
      unint64_t v51 = v12[3];
      uint64_t v11 = v81;
      if (v52 >= v51 >> 1)
      {
        uint64_t v64 = sub_10005A204((void *)(v51 > 1), v52 + 1, 1, v12);
        uint64_t v11 = v81;
        id v12 = v64;
      }
      v12[2] = v52 + 1;
      uint64_t v53 = &v12[2 * v52];
      v53[4] = 0;
      v53[5] = 0;
LABEL_49:
      uint64_t v63 = *(void *)(v11 + 64);
      uint64_t v10 = v63 + 1;
      if (__OFADD__(v63, 1))
      {
        __break(1u);
        return;
      }
      *(void *)(v11 + 64) = v10;
    }
    while (v10 < v9);
  }
}

uint64_t sub_1000978E0()
{
  return swift_deallocClassInstance();
}

uint64_t sub_100097920(char *a1)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v92 = (char *)v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  long long v93 = (char *)v85 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v90 = (char *)v85 - v10;
  __chkstk_darwin(v9);
  id v12 = (char *)v85 - v11;
  *(void *)(v1 + 24) = _swiftEmptyArrayStorage;
  *(void *)(v1 + 32) = _swiftEmptyArrayStorage;
  long long v13 = (void *)(v1 + 24);
  swift_unknownObjectWeakInit();
  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for OSSignposter();
  uint64_t v91 = sub_10000AD60(v14, (uint64_t)qword_10012B220);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v15 = v1;
  uint64_t v16 = v4;
  Swift::String v17 = *(void (**)(void))(v4 + 32);
  uint64_t v95 = v1 + OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID;
  uint64_t v99 = v3;
  v17();
  id v18 = [a1 physicalFormat];
  if (!v18) {
    goto LABEL_12;
  }
  uint64_t v19 = v18;
  type metadata accessor for AUAStreamFormat();
  uint64_t v20 = swift_dynamicCastClass();
  if (!v20)
  {

LABEL_12:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v29 = 1;
    *(void *)(v29 + 8) = 0;
    *(void *)(v29 + 16) = 0xE000000000000000;
    strcpy((char *)(v29 + 24), "init(stream:)");
    *(_WORD *)(v29 + 38) = -4864;
    *(void *)(v29 + 40) = 0xD000000000000016;
    *(void *)(v29 + 48) = 0x80000001000E4E30;
    *(void *)(v29 + 56) = 1048;
    swift_willThrow();
LABEL_13:
    uint64_t v23 = v16;
LABEL_14:
    uint64_t v26 = v15;
    goto LABEL_15;
  }
  uint64_t v21 = *(void *)(v20 + OBJC_IVAR___AUAStreamFormat_altSetting);
  if (!v21)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v31 = 1;
    *(void *)(v31 + 8) = 0;
    *(void *)(v31 + 16) = 0xE000000000000000;
    strcpy((char *)(v31 + 24), "init(stream:)");
    *(_WORD *)(v31 + 38) = -4864;
    *(void *)(v31 + 40) = 0xD000000000000016;
    *(void *)(v31 + 48) = 0x80000001000E4E30;
    *(void *)(v31 + 56) = 1049;
    swift_willThrow();

    goto LABEL_13;
  }
  uint64_t v22 = *(void *)(v21 + 112);
  uint64_t v23 = v16;
  if (!v22)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v32 = 1;
    *(void *)(v32 + 8) = 0;
    *(void *)(v32 + 16) = 0xE000000000000000;
    strcpy((char *)(v32 + 24), "init(stream:)");
    *(_WORD *)(v32 + 38) = -4864;
    *(void *)(v32 + 40) = 0xD000000000000016;
    *(void *)(v32 + 48) = 0x80000001000E4E30;
    *(void *)(v32 + 56) = 1050;
    swift_retain();
    swift_willThrow();

    swift_release();
    goto LABEL_14;
  }
  uint64_t v88 = a1;
  uint64_t v89 = v22;
  id v87 = v19;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_retain();
    swift_retain();
    uint64_t v26 = v15;
    goto LABEL_20;
  }
  unint64_t v25 = *(void **)(Strong + 112);
  id v86 = v25;
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v26 = v15;
  if (!v25)
  {
LABEL_20:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v33 = 1;
    *(void *)(v33 + 8) = 0;
    *(void *)(v33 + 16) = 0xE000000000000000;
    strcpy((char *)(v33 + 24), "init(stream:)");
    *(_WORD *)(v33 + 38) = -4864;
    *(void *)(v33 + 40) = 0xD000000000000016;
    *(void *)(v33 + 48) = 0x80000001000E4E30;
    *(void *)(v33 + 56) = 1051;
    swift_willThrow();

    swift_release();
    swift_release();
    a1 = v88;
    goto LABEL_15;
  }
  v85[1] = v21;
  uint64_t v27 = v86;
  unint64_t v28 = v94;
  sub_1000DB718(v86, 0);
  if (!v28)
  {
    uint64_t v34 = swift_unknownObjectWeakLoadStrong();
    if (v34)
    {
      os_signpost_type_t v35 = (void *)v34;
      swift_unknownObjectWeakAssign();

      *(void *)(v15 + 40) = 0;
      uint64_t v36 = v89;
      unint64_t v37 = *(void *)(v89 + 104);
      if (HIDWORD(v37)
        || (*(_DWORD *)(v15 + 48) = v37, *(void *)(v15 + 16) = v36, unint64_t v94 = *(void *)(v36 + 112), HIDWORD(v94)))
      {
LABEL_65:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1000989B4);
      }
      uint64_t v38 = swift_unknownObjectWeakLoadStrong();
      if (v38)
      {
        uint64_t v39 = (void *)v38;
        if (*(void *)(v38 + OBJC_IVAR___AUAAudioDevice_function))
        {
          uint64_t v40 = *(void *)(v38 + OBJC_IVAR___AUAAudioDevice_function + 8);
          uint64_t ObjectType = swift_getObjectType();
          v85[0] = *(void *)(v40 + 40);
          swift_retain();
          int v42 = ((unsigned __int8 (*)(uint64_t, uint64_t))v85[0])(ObjectType, v40);

          uint64_t v43 = v89;
          if (!v42)
          {
            uint64_t v44 = *(unsigned int *)(v26 + 48);
            uint64_t v45 = 64;
            uint64_t v46 = v99;
            unint64_t v47 = v90;
            switch((int)v44)
            {
              case 1:
                goto LABEL_48;
              case 2:
                uint64_t v44 = 1;
                uint64_t v45 = 32;
                goto LABEL_48;
              case 3:
              case 5:
              case 6:
              case 7:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
                goto LABEL_56;
              case 4:
                uint64_t v44 = 1;
                uint64_t v45 = 16;
                goto LABEL_48;
              case 8:
                uint64_t v44 = 1;
                uint64_t v45 = 8;
                goto LABEL_48;
              case 16:
                goto LABEL_41;
              case 32:
              case 64:
                goto LABEL_47;
              default:
                uint64_t v46 = v99;
                unint64_t v47 = v90;
                if (v44 == 128) {
                  goto LABEL_47;
                }
LABEL_56:
                unint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
                v78(v47, v95, v46);
                uint64_t v79 = v89;
                swift_retain();
                uint64_t v80 = OSSignposter.logHandle.getter();
                LODWORD(v95) = static os_signpost_type_t.event.getter();
                if (OS_os_log.signpostsEnabled.getter())
                {
                  v78(v12, (uint64_t)v47, v99);
                  uint64_t v81 = (uint8_t *)swift_slowAlloc();
                  *(_DWORD *)uint64_t v81 = 134217984;
                  uint64_t v97 = *(void *)(v79 + 104);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release();
                  os_signpost_id_t v82 = OSSignpostID.rawValue.getter();
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v80, (os_signpost_type_t)v95, v82, "AUAOutputExplicitFeedbackStream_init", "ADC1 unsupported Feedback Polling Interval: msPerTransfer %lu", v81, 0xCu);
                  swift_slowDealloc();

                  uint64_t v83 = *(void (**)(char *, uint64_t))(v23 + 8);
                  uint64_t v84 = v99;
                  v83(v47, v99);
                  v83(v12, v84);
                }
                else
                {
                  swift_release();

                  (*(void (**)(char *, uint64_t))(v23 + 8))(v47, v99);
                }
                id v57 = v87;
                unint64_t v58 = v88;
                sub_10000CD54();
                swift_allocError();
                *(unsigned char *)uint64_t v59 = 96;
                uint64_t v60 = 1087;
                break;
            }
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v48 = v89;
          swift_retain();

          uint64_t v43 = v48;
        }
      }
      else
      {
        uint64_t v43 = v89;
        swift_retain();
      }
      if (*(void *)(v43 + 96) >= 2uLL)
      {
        uint64_t v49 = *(void (**)(char *, uint64_t))(v23 + 16);
        uint64_t v50 = v99;
        v49(v93, v95);
        swift_retain();
        unint64_t v51 = OSSignposter.logHandle.getter();
        LODWORD(v95) = static os_signpost_type_t.event.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          ((void (*)(char *, char *, uint64_t))v49)(v12, v93, v50);
          unint64_t v52 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)unint64_t v52 = 134217984;
          uint64_t v97 = *(void *)(v43 + 96);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          os_signpost_id_t v53 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v51, (os_signpost_type_t)v95, v53, "AUAOutputExplicitFeedbackStream_init", "ADC2+ unsupported Feedback Polling Interval: transfersPerMS %lu", v52, 0xCu);
          swift_slowDealloc();

          Swift::String v54 = *(void (**)(char *, uint64_t))(v23 + 8);
          v54(v93, v50);
          v54(v12, v50);
        }
        else
        {
          swift_release();

          (*(void (**)(char *, uint64_t))(v23 + 8))(v93, v50);
        }
        id v57 = v87;
        unint64_t v58 = v88;
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v59 = 96;
        uint64_t v60 = 1096;
        goto LABEL_62;
      }
      uint64_t v45 = 8;
      uint64_t v44 = 8;
      uint64_t v55 = v99;
      Swift::String v56 = v92;
      switch(*(_DWORD *)(v26 + 48))
      {
        case 1:
          goto LABEL_48;
        case 2:
          uint64_t v44 = 8;
          uint64_t v45 = 4;
          goto LABEL_48;
        case 3:
        case 5:
        case 6:
        case 7:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
        case 0x2F:
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x3D:
        case 0x3E:
        case 0x3F:
          goto LABEL_39;
        case 4:
          uint64_t v45 = 4;
          uint64_t v44 = 4;
          goto LABEL_48;
        case 8:
          uint64_t v44 = 2;
          uint64_t v45 = 4;
          goto LABEL_48;
        case 0x10:
LABEL_41:
          uint64_t v44 = 1;
          uint64_t v45 = 4;
          goto LABEL_48;
        case 0x20:
        case 0x40:
          goto LABEL_47;
        default:
          uint64_t v55 = v99;
          Swift::String v56 = v92;
          if (v92 != 128)
          {
LABEL_39:
            unint64_t v61 = *(void (**)(char *, uint64_t))(v23 + 16);
            uint64_t v62 = v55;
            v61(v56, v95);
            uint64_t v63 = v89;
            swift_retain();
            uint64_t v64 = OSSignposter.logHandle.getter();
            LODWORD(v95) = static os_signpost_type_t.event.getter();
            if (OS_os_log.signpostsEnabled.getter())
            {
              ((void (*)(char *, char *, uint64_t))v61)(v12, v92, v62);
              long long v65 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)long long v65 = 134217984;
              uint64_t v97 = *(void *)(v63 + 104);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              os_signpost_id_t v66 = OSSignpostID.rawValue.getter();
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v64, (os_signpost_type_t)v95, v66, "AUAOutputExplicitFeedbackStream_init", "ADC2+ unsupported Feedback Polling Interval: msPerTransfer %lu", v65, 0xCu);
              swift_slowDealloc();

              id v67 = *(void (**)(char *, uint64_t))(v23 + 8);
              v67(v92, v62);
              v67(v12, v62);
            }
            else
            {
              swift_release();

              (*(void (**)(char *, uint64_t))(v23 + 8))(v92, v62);
            }
            id v57 = v87;
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v59 = 96;
            uint64_t v60 = 1127;
            unint64_t v58 = v88;
            goto LABEL_62;
          }
LABEL_47:
          uint64_t v44 = 1;
          uint64_t v45 = 3;
LABEL_48:
          uint64_t v97 = 0;
          uint64_t v98 = 0xE000000000000000;
          uint64_t v68 = v44;
          _StringGuts.grow(_:)(81);
          v69._countAndFlagsBits = 0xD000000000000032;
          v69._object = (void *)0x80000001000E5500;
          String.append(_:)(v69);
          uint64_t v99 = v68;
          uint64_t v96 = v68;
          v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v70);
          swift_bridgeObjectRelease();
          v71._countAndFlagsBits = 0xD00000000000001BLL;
          v71._object = (void *)0x80000001000E5540;
          String.append(_:)(v71);
          uint64_t v96 = v45;
          v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v72);
          swift_bridgeObjectRelease();
          sub_10002E804(v97, v98, 0x7274732874696E69, (void *)0xED0000293A6D6165, 0xD000000000000016, 0x80000001000E4E30, 1130);
          swift_bridgeObjectRelease();
          uint64_t v73 = OBJC_IVAR___AUAStream_interface;
          unint64_t v58 = v88;
          swift_beginAccess();
          uint64_t v74 = (char *)swift_unknownObjectWeakLoadStrong();
          if (!v74)
          {
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v59 = 51;
            uint64_t v60 = 1132;
            id v57 = v87;
LABEL_62:
            *(void *)(v59 + 8) = 0;
            *(void *)(v59 + 16) = 0xE000000000000000;
            strcpy((char *)(v59 + 24), "init(stream:)");
            *(_WORD *)(v59 + 38) = -4864;
            *(void *)(v59 + 40) = 0xD000000000000016;
            *(void *)(v59 + 48) = 0x80000001000E4E30;
            *(void *)(v59 + 56) = v60;
            swift_willThrow();
            swift_release();

            swift_release();
            swift_release();

            return v26;
          }
          int v75 = *(_DWORD *)&v74[OBJC_IVAR____TtC9AUASDCore9USBDevice_speed];

          swift_beginAccess();
          sub_10009B56C(v45);
          specialized Array._endMutation()();
          swift_endAccess();
          Swift::String v76 = *(void **)(*(void *)&v58[v73] + 112);
          while (v76)
          {
            type metadata accessor for AUAFeedbackTransferBlock();
            swift_allocObject();
            id v77 = v76;
            sub_100096BA0(v77, v75, v94, v99);
            swift_beginAccess();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();
            if (!--v45)
            {

              swift_release();
              swift_release();

              return v26;
            }
          }
          __break(1u);
          break;
      }
    }
    __break(1u);
    goto LABEL_65;
  }

  swift_release();
  swift_release();

  a1 = v88;
LABEL_15:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v95, v99);
  type metadata accessor for AUAOutputExplicitFeedbackStream(0);
  swift_deallocPartialClassInstance();
  return v26;
}

char *sub_100098BB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t result = (char *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v10 = *(void *)&result[OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame];

    *(void *)(v1 + 40) = v10;
    if (qword_100126910 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for OSSignposter();
    sub_10000AD60(v11, (uint64_t)qword_10012B220);
    id v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v12(v8, v1 + OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID, v2);
    swift_retain_n();
    long long v13 = OSSignposter.logHandle.getter();
    os_signpost_type_t v14 = static os_signpost_type_t.event.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      v12(v6, (uint64_t)v8, v2);
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 134218240;
      uint64_t v26 = *(void *)(v1 + 40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 1024;
      uint64_t v16 = v6;
      os_signpost_type_t v17 = v14;
      int v18 = *(_DWORD *)(v1 + 48);
      swift_release();
      LODWORD(v26) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, v17, v19, "AUAOutputExplicitFeedbackStream_startFeedback", "starting frame %llu msPerTransfer %u", (uint8_t *)v15, 0x12u);
      swift_slowDealloc();

      uint64_t v20 = *(void (**)(char *, uint64_t))(v3 + 8);
      v20(v8, v2);
      v20(v16, v2);
    }
    else
    {
      swift_release_n();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
    uint64_t v26 = 0;
    uint64_t v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    uint64_t v26 = 0xD000000000000015;
    uint64_t v27 = 0x80000001000E58C0;
    uint64_t v25 = *(void *)(v1 + 40);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x7254726550736D20;
    v22._object = (void *)0xEF20726566736E61;
    String.append(_:)(v22);
    LODWORD(v25) = *(_DWORD *)(v1 + 48);
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    sub_10002E804(v26, v27, 0x6565467472617473, (void *)0xEF29286B63616264, 0xD000000000000016, 0x80000001000E4E30, 1154);
    swift_bridgeObjectRelease();
    return (char *)sub_100098FA8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100098FA8()
{
  uint64_t v1 = type metadata accessor for OSSignposter();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10000AD60(v1, (uint64_t)qword_10012B220);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  swift_retain();
  uint64_t v6 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)uint64_t v6 = 134217984;
  v13[1] = *(void *)(v0 + 40);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  uint64_t v7 = OSSignposter.logHandle.getter();
  os_signpost_type_t v8 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v9 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, v8, v9, "AUAOutputExplicitFeedbackStream_enqueueAvailableFeedbackTransferBlocks", "frame %llu", v6, 0xCu);
  sub_1000991E4(v0);
  os_signpost_type_t v10 = static os_signpost_type_t.end.getter();
  os_signpost_id_t v11 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, v10, v11, "AUAOutputExplicitFeedbackStream_enqueueAvailableFeedbackTransferBlocks", "frame %llu", v6, 0xCu);

  swift_slowDealloc();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_1000991E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v102 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v108 = (char *)&v89 - v6;
  uint64_t v7 = (uint64_t *)(a1 + 24);
  uint64_t v101 = a1 + OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID;
  uint64_t v100 = a1 + 56;
  uint64_t v113 = a1;
  uint64_t v104 = a1 + 32;
  uint64_t result = swift_beginAccess();
  uint64_t v99 = (void (**)(void))(v3 + 16);
  uint64_t v98 = (void (**)(char *, uint64_t))(v3 + 8);
  unint64_t v94 = &v115;
  unint64_t v9 = (unint64_t)"Transfer must be 0, usbFrame ";
  unint64_t v91 = 0x80000001000E57E0;
  unint64_t v112 = (unint64_t)"changePhysicalFormat(_:)";
  unint64_t v90 = 0x80000001000E4E30;
  *((void *)&v10 + 1) = 2;
  long long v107 = xmmword_1000E8090;
  unint64_t v96 = 0x80000001000E5810;
  *(void *)&long long v10 = 136315138;
  long long v93 = v10;
  uint64_t v92 = (char *)&type metadata for Any + 8;
  uint64_t v95 = (void *)0x80000001000E57B0;
  uint64_t v109 = v2;
  uint64_t v103 = (uint64_t *)(a1 + 24);
  unint64_t v97 = (unint64_t)"Transfer must be 0, usbFrame ";
  while (1)
  {
    if ((unint64_t)*v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v83) {
        return result;
      }
    }
    else if (!*(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v11 = *v7;
    if ((unint64_t)*v7 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v84) {
        goto LABEL_79;
      }
    }
    else
    {
      uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v12) {
        goto LABEL_79;
      }
    }
    if ((v11 & 0xC000000000000001) != 0)
    {
      uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_72;
      }
      uint64_t v13 = *(void *)(v11 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = *v7;
    unint64_t v15 = (unint64_t)*v7 >> 62;
    if (!v15)
    {
      uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v16 >= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRetain();
      if (v16 < (unint64_t)v17) {
        goto LABEL_71;
      }
      goto LABEL_14;
    }
    id v85 = (char *)v9;
    uint64_t v86 = v13;
    swift_bridgeObjectRetain_n();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v16 < 0) {
      break;
    }
    if (v16 >= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v16;
    }
    swift_bridgeObjectRetain();
    uint64_t v87 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v87 < v17)
    {
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      swift_bridgeObjectRelease();
      __break(1u);
LABEL_80:
      __break(1u);
      while (1)
      {
LABEL_81:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
    uint64_t v13 = v86;
    unint64_t v9 = (unint64_t)v85;
    swift_bridgeObjectRetain();
    uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v88 < v16) {
      goto LABEL_73;
    }
LABEL_14:
    int v18 = (char *)v9;
    uint64_t v19 = v13;
    if ((v14 & 0xC000000000000001) != 0 && (unint64_t)v16 >= 2)
    {
      type metadata accessor for AUAFeedbackTransferBlock();
      Swift::Int v20 = v17;
      do
      {
        Swift::Int v21 = v20 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v20);
        Swift::Int v20 = v21;
      }
      while (v16 != v21);
    }
    if (v15)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v23 = v25;
      uint64_t v17 = v26;
      unint64_t v24 = v27;
      swift_bridgeObjectRelease_n();
      if ((v24 & 1) == 0) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v22 = v14 & 0xFFFFFFFFFFFFFF8;
      uint64_t v23 = (v14 & 0xFFFFFFFFFFFFFF8) + 32;
      unint64_t v24 = (2 * v16) | 1;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v29 = (void *)swift_dynamicCastClass();
    if (!v29)
    {
      swift_unknownObjectRelease();
      uint64_t v29 = _swiftEmptyArrayStorage;
    }
    uint64_t v30 = v29[2];
    swift_release();
    if (__OFSUB__(v24 >> 1, v17)) {
      goto LABEL_78;
    }
    if (v30 != (v24 >> 1) - v17)
    {
      swift_unknownObjectRelease();
LABEL_21:
      unint64_t v28 = sub_10005ADF4(v22, v23, v17, v24);
      goto LABEL_28;
    }
    unint64_t v28 = (void *)swift_dynamicCastClass();
    if (!v28)
    {
      swift_unknownObjectRelease();
      unint64_t v28 = _swiftEmptyArrayStorage;
    }
LABEL_28:
    swift_unknownObjectRelease();
    *uint64_t v7 = (uint64_t)v28;
    swift_bridgeObjectRelease();
    *(void *)(v19 + 64) = 0;
    uint64_t v31 = *(void *)(v19 + 32);
    if (v31 < 0) {
      goto LABEL_74;
    }
    uint64_t v32 = (void *)v19;
    if (v31)
    {
      uint64_t v33 = *(void *)(v19 + 56);
      int v34 = dword_1000EC6D8[*(char *)(v19 + 24)];
      *(_DWORD *)uint64_t v33 = -536870911;
      *(_DWORD *)(v33 + 4) = v34;
      *(void *)(v33 + 8) = 0;
      *(void *)(v33 + 16) = 0;
      *(_DWORD *)(v33 + 24) = 0;
      uint64_t v35 = v31 - 1;
      unint64_t v9 = (unint64_t)v18;
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = (void *)(v33 + 40);
        do
        {
          *((_DWORD *)v37 - 3) = -536870911;
          *((_DWORD *)v37 - 2) = v34;
          if (v36 == 4294967288) {
            goto LABEL_81;
          }
          v36 += 8;
          *((_DWORD *)v37 - 1) = v36;
          *unint64_t v37 = 0;
          v37[1] = 0;
          unint64_t v37 = (void *)((char *)v37 + 28);
        }
        while (--v35);
      }
    }
    else
    {
      unint64_t v9 = (unint64_t)v18;
    }
    unint64_t v38 = *(unsigned int *)(v113 + 48);
    if (!v38) {
      goto LABEL_75;
    }
    unint64_t v39 = *(void *)(v113 + 40);
    if (v39 % v38)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0xE000000000000000;
      _StringGuts.grow(_:)(64);
      v40._countAndFlagsBits = 0xD00000000000002DLL;
      v40._object = v95;
      String.append(_:)(v40);
      __int16 v118 = (void *)v39;
      v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._countAndFlagsBits = 0x7254726550534D20;
      v42._object = (void *)0xEF20726566736E61;
      String.append(_:)(v42);
      LODWORD(v118) = v38;
      v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      sub_10002E804(v116, v117, 0xD000000000000028, (void *)(v9 | 0x8000000000000000), 0xD000000000000016, v112 | 0x8000000000000000, 1177);
      swift_bridgeObjectRelease();
    }
    if (*(void *)(*(void *)(v113 + 16) + 120))
    {
      uint64_t v44 = v32[7];
      uint64_t v46 = v32[4];
      uint64_t v45 = v32[5];
      swift_retain();
      uint64_t v47 = v113;
      swift_retain();
      uint64_t v48 = v44;
      uint64_t v49 = v111;
      sub_1000DAEFC(v45, v48, v46, v39, 0, (uint64_t)sub_10009D7C4, v47);
      uint64_t v50 = v49;
      if (!v49)
      {
        uint64_t v111 = 0;
        swift_release();
        swift_release();
        unint64_t v77 = v32[4];
        if ((v77 & 0x8000000000000000) != 0) {
          goto LABEL_81;
        }
        goto LABEL_52;
      }
      swift_release();
      swift_release();
    }
    else
    {
      sub_10000CD54();
      uint64_t v50 = swift_allocError();
      *(unsigned char *)uint64_t v51 = 1;
      *(void *)(v51 + 8) = 0;
      *(void *)(v51 + 16) = 0xE000000000000000;
      unint64_t v52 = v91;
      *(void *)(v51 + 24) = 0xD000000000000028;
      *(void *)(v51 + 32) = v52;
      unint64_t v53 = v90;
      *(void *)(v51 + 40) = 0xD000000000000016;
      *(void *)(v51 + 48) = v53;
      *(void *)(v51 + 56) = 1179;
      swift_willThrow();
    }
    uint64_t v111 = 0;
    uint64_t v54 = v109;
    uint64_t v110 = v32;
    uint64_t v116 = v50;
    sub_10000AC7C(&qword_100127400);
    sub_10000CECC(0, (unint64_t *)&qword_100127408);
    swift_dynamicCast();
    uint64_t v55 = v118;
    uint64_t v106 = sub_10000AC7C(&qword_100127420);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = v107;
    id v57 = [v55 code];
    *(void *)(v56 + 56) = &type metadata for Int;
    *(void *)(v56 + 64) = &protocol witness table for Int;
    *(void *)(v56 + 32) = v57;
    uint64_t v58 = String.init(format:_:)();
    sub_10002E81C(v58, v59, 0xD000000000000028, (void *)(v9 | 0x8000000000000000), 0xD000000000000016, v112 | 0x8000000000000000, 1188);
    swift_bridgeObjectRelease();
    if (qword_100126910 != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for OSSignposter();
    sub_10000AD60(v60, (uint64_t)qword_10012B220);
    unint64_t v61 = *v99;
    uint64_t v62 = v108;
    (*v99)();
    id v63 = v55;
    uint64_t v64 = v54;
    long long v65 = OSSignposter.logHandle.getter();
    int v105 = static os_signpost_type_t.event.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      ((void (*)(char *, char *, uint64_t))v61)(v102, v62, v64);
      os_signpost_id_t v66 = (uint8_t *)swift_slowAlloc();
      uint64_t v115 = swift_slowAlloc();
      *(_DWORD *)os_signpost_id_t v66 = v93;
      id v67 = [v63 code];
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = v107;
      *(void *)(v68 + 56) = &type metadata for Int;
      *(void *)(v68 + 64) = &protocol witness table for Int;
      *(void *)(v68 + 32) = v67;
      uint64_t v69 = String.init(format:_:)();
      uint64_t v114 = sub_1000192BC(v69, v70, &v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v71 = v109;
      swift_bridgeObjectRelease();
      Swift::String v72 = v102;
      os_signpost_id_t v73 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v65, (os_signpost_type_t)v105, v73, "AUAOutputExplicit_enqueueAvailableFeedbackTransferBlocks_error", "error %s", v66, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v74 = *v98;
      (*v98)(v108, v71);
      v74(v72, v71);
    }
    else
    {

      (*v98)(v62, v64);
    }
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    unint64_t v9 = v97;
    if (!Strong) {
      goto LABEL_80;
    }
    Swift::String v76 = (void *)Strong;
    AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(0xD000000000000028, v97 | 0x8000000000000000, 0xD000000000000016, v112 | 0x8000000000000000, 1190, (uint64_t)ClusterChannelInfo.chNum.getter, 0);

    swift_errorRelease();
    unint64_t v77 = v110[4];
    if ((v77 & 0x8000000000000000) != 0) {
      goto LABEL_81;
    }
LABEL_52:
    if (!is_mul_ok(v38, v77)) {
      goto LABEL_76;
    }
    unint64_t v78 = v38 * v77;
    uint64_t v79 = *(void *)(v113 + 40);
    BOOL v80 = __CFADD__(v79, v78);
    uint64_t v81 = v79 + v78;
    if (v80) {
      goto LABEL_77;
    }
    uint64_t v82 = v113;
    *(void *)(v113 + 40) = v81;
    swift_beginAccess();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v82 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v82 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    uint64_t result = swift_release();
    uint64_t v7 = v103;
  }
  __break(1u);
  return result;
}

uint64_t sub_100099EB0()
{
  return sub_10009AF90((uint64_t)&OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID, "AUAOutputExplicitFeedbackStream_readFeedback", sub_100099ED8);
}

void sub_100099ED8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  uint64_t v2 = (void *)(a1 + 24);
  swift_beginAccess();
  unint64_t v28 = v1;
  while (1)
  {
    uint64_t v3 = *v1;
    if (*v1 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v25)
      {
LABEL_44:
        swift_bridgeObjectRelease();
        sub_10002E81C(0xD00000000000001ALL, 0x80000001000E5740, 0x6465654664616572, (void *)0xEE0029286B636162, 0xD000000000000016, 0x80000001000E4E30, 1208);
        return;
      }
    }
    else
    {
      uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v4) {
        goto LABEL_44;
      }
    }
    if ((v3 & 0xC000000000000001) == 0) {
      break;
    }
    uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      goto LABEL_50;
    }
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_sampleManager);
    swift_retain();

    if (!v8) {
      goto LABEL_51;
    }
    sub_100096ECC();
    sub_10000EB8C(v9);
    swift_bridgeObjectRelease();
    if (*(void *)(v5 + 64) < *(void *)(v5 + 32))
    {
      swift_release();
      swift_release();
      return;
    }
    uint64_t v10 = *v1;
    uint64_t v11 = *v1 >> 62;
    if (v11)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v12 < 0) {
        goto LABEL_52;
      }
      if (v12 >= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v12;
      }
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v26 < v13) {
        goto LABEL_47;
      }
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v27 < v12) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v12 >= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRetain();
      if (v12 < (unint64_t)v13) {
        goto LABEL_47;
      }
    }
    if ((v10 & 0xC000000000000001) != 0 && (unint64_t)v12 >= 2)
    {
      type metadata accessor for AUAFeedbackTransferBlock();
      Swift::Int v14 = v13;
      do
      {
        Swift::Int v15 = v14 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v14);
        Swift::Int v14 = v15;
      }
      while (v12 != v15);
    }
    if (v11)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v17 = v19;
      uint64_t v13 = v20;
      unint64_t v18 = v21;
      swift_bridgeObjectRelease_n();
      if ((v18 & 1) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v16 = v10 & 0xFFFFFFFFFFFFFF8;
      uint64_t v17 = (v10 & 0xFFFFFFFFFFFFFF8) + 32;
      unint64_t v18 = (2 * v12) | 1;
      if ((v18 & 1) == 0) {
        goto LABEL_23;
      }
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v23 = (void *)swift_dynamicCastClass();
    if (!v23)
    {
      swift_unknownObjectRelease();
      uint64_t v23 = _swiftEmptyArrayStorage;
    }
    uint64_t v24 = v23[2];
    swift_release();
    if (__OFSUB__(v18 >> 1, v13)) {
      goto LABEL_49;
    }
    if (v24 != (v18 >> 1) - v13)
    {
      swift_unknownObjectRelease();
LABEL_23:
      uint64_t v22 = sub_10005ADF4(v16, v17, v13, v18);
      uint64_t v1 = v28;
      goto LABEL_30;
    }
    uint64_t v22 = (void *)swift_dynamicCastClass();
    uint64_t v1 = v28;
    if (!v22)
    {
      swift_unknownObjectRelease();
      uint64_t v22 = _swiftEmptyArrayStorage;
    }
LABEL_30:
    swift_unknownObjectRelease();
    *uint64_t v1 = v22;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    swift_release();
    swift_release();
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v5 = *(void *)(v3 + 32);
    swift_retain();
    goto LABEL_7;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
}

uint64_t sub_10009A344()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

void *sub_10009A404()
{
  uint64_t result = [v0 physicalFormat];
  if (result)
  {
    uint64_t v2 = result;
    type metadata accessor for AUAStreamFormat();
    uint64_t result = (void *)swift_dynamicCastClass();
    if (result)
    {
      uint64_t v3 = result;
      uint64_t v4 = OBJC_IVAR___AUAStreamFormat_altSetting;
      uint64_t v5 = *(void *)((char *)result + OBJC_IVAR___AUAStreamFormat_altSetting);
      if (!v5)
      {
        __break(1u);
        return result;
      }
      uint64_t v6 = *(const IOUSBEndpointDescriptor **)(*(void *)(v5 + 104) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v7 = IOUSBGetEndpointSynchronizationType(v6);
      if (!v7) {
        int v7 = IOUSBGetEndpointDirection(v6);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v7 == 1)
      {
        uint64_t v8 = *(void *)((char *)v3 + v4);
        swift_retain();

        if (!v8) {
          return 0;
        }
        uint64_t v2 = *(void **)(v8 + 112);
        swift_retain();
        swift_release();
        if (!v2) {
          return 0;
        }
        uint64_t v9 = v2[13];
        swift_release();
        uint64_t result = (void *)(v9 - 1);
        if (v9) {
          return result;
        }
        __break(1u);
      }
    }

    return 0;
  }
  return result;
}

uint64_t sub_10009A53C()
{
  return sub_10009AF90((uint64_t)&OBJC_IVAR___AUAStream_signpostID, "AUAOutputStream_startDirectionalStream", (void (*)(uint64_t))sub_10009A564);
}

uint64_t sub_10009A564(char *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void **)(*(void *)&a1[OBJC_IVAR___AUAStream_interface] + 104);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_10009D3A8;
  *(void *)(v4 + 24) = v3;
  v9[4] = sub_10001A120;
  v9[5] = v4;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100096700;
  v9[3] = &unk_10011A618;
  uint64_t v5 = _Block_copy(v9);
  uint64_t v6 = v2;
  id v7 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v5);

  _Block_release(v5);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10009A6DC(char *a1)
{
  if (*(void *)&a1[OBJC_IVAR___AUAOutputStream_explicitFeedback])
  {
    swift_retain();
    sub_100098BB4();
    swift_release();
  }
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_10009D410(a1, v2);

  return swift_release();
}

void sub_10009A764()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OSSignposter();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [v2 physicalFormat];
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v12 = v11;
  uint64_t v38 = v4;
  type metadata accessor for AUAStreamFormat();
  uint64_t v13 = swift_dynamicCastClass();
  if (!v13)
  {

LABEL_10:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v26 = 1;
    *(void *)(v26 + 8) = 0;
    *(void *)(v26 + 16) = 0xE000000000000000;
    *(void *)(v26 + 24) = 0x5365726170657270;
    *(void *)(v26 + 32) = 0xEF29286D61657274;
    *(void *)(v26 + 40) = 0xD000000000000016;
    *(void *)(v26 + 48) = 0x80000001000E4E30;
    *(void *)(v26 + 56) = 1306;
    swift_willThrow();
    return;
  }
  uint64_t v14 = v13;
  uint64_t v36 = v1;
  uint64_t v15 = *(void *)(v13 + OBJC_IVAR___AUAStreamFormat_altSetting);
  if (!v15)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v27 = 74;
    *(void *)(v27 + 8) = 0;
    *(void *)(v27 + 16) = 0xE000000000000000;
    *(void *)(v27 + 24) = 0x5365726170657270;
    *(void *)(v27 + 32) = 0xEF29286D61657274;
    *(void *)(v27 + 40) = 0xD000000000000016;
    *(void *)(v27 + 48) = 0x80000001000E4E30;
    uint64_t v28 = 1307;
LABEL_13:
    *(void *)(v27 + 56) = v28;
    swift_willThrow();

    return;
  }
  if (!*(void *)(*(void *)&v2[OBJC_IVAR___AUAStream_interface] + 112))
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v27 = 1;
    *(void *)(v27 + 8) = 0;
    *(void *)(v27 + 16) = 0xE000000000000000;
    *(void *)(v27 + 24) = 0x5365726170657270;
    *(void *)(v27 + 32) = 0xEF29286D61657274;
    *(void *)(v27 + 40) = 0xD000000000000016;
    *(void *)(v27 + 48) = 0x80000001000E4E30;
    uint64_t v28 = 1308;
    goto LABEL_13;
  }
  uint64_t v16 = qword_100126910;
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10000AD60(v7, (uint64_t)qword_10012B220);
  uint64_t v35 = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v17, v7);
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v6, &v2[OBJC_IVAR___AUAStream_signpostID], v3);
  swift_retain();
  uint64_t v34 = v3;
  unint64_t v18 = (uint8_t *)swift_slowAlloc();
  uint64_t v33 = v7;
  uint64_t v37 = v15;
  uint64_t v19 = v18;
  *(_DWORD *)unint64_t v18 = 16777472;
  char v39 = *(unsigned char *)(*(void *)(v37 + 16) + 3);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  uint64_t v20 = OSSignposter.logHandle.getter();
  os_signpost_type_t v21 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
  uint64_t v32 = v19;
  uint64_t v23 = v19;
  uint64_t v24 = v37;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, v21, v22, "AUAOuputStream_prepareStream", "alternate %hhu", v23, 5u);
  uint64_t v25 = v36;
  sub_10009ACA8(v2, v24, v14);
  if (v25)
  {

    swift_release();
  }
  else
  {
    os_signpost_type_t v29 = static os_signpost_type_t.end.getter();
    os_signpost_id_t v30 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, v29, v30, "AUAOuputStream_prepareStream", "alternate %hhu", v32, 5u);

    swift_slowDealloc();
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v38 + 8))(v6, v34);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v33);
}

void sub_10009ACA8(void *a1, uint64_t a2, uint64_t a3)
{
  sub_100093EB8();
  if (!v3)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v8 = (void *)Strong;
      uint64_t v9 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_sampleManager);
      swift_retain();

      if (v9)
      {
        sub_10000DAE4(a1, *(void *)(a2 + 104));
        swift_release();
      }
    }
    uint64_t v10 = *(const IOUSBEndpointDescriptor **)(*(void *)(a2 + 104) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v11 = IOUSBGetEndpointSynchronizationType(v10);
    if (!v11) {
      int v11 = IOUSBGetEndpointDirection(v10);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11 == 1)
    {
      uint64_t v12 = swift_unknownObjectWeakLoadStrong();
      if (v12)
      {
        uint64_t v13 = (void *)v12;
        Swift::Bool v14 = AUAAudioDevice.hasImplicitFeedbackStream()();

        if (!v14)
        {
          uint64_t v15 = *(void *)(a3 + OBJC_IVAR___AUAStreamFormat_altSetting);
          if (v15 && *(void *)(v15 + 112))
          {
            type metadata accessor for AUAOutputExplicitFeedbackStream(0);
            uint64_t v16 = swift_allocObject();
            uint64_t v17 = a1;
            sub_100097920(v17);
            *(void *)&v17[OBJC_IVAR___AUAOutputStream_explicitFeedback] = v16;
            swift_release();
          }
          else
          {
            sub_10002E81C(0xD000000000000036, 0x80000001000E5460, 0x5365726170657270, (void *)0xEF29286D61657274, 0xD000000000000016, 0x80000001000E4E30, 1321);
          }
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

char *sub_10009AF28(char *result, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  uint64_t v4 = *(void *)&result[*a3];
  BOOL v5 = __CFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    *(void *)&result[*a3] = v6;
    if (v6 == 1)
    {
      v7.receiver = result;
      v7.super_class = (Class)a4(0);
      return (char *)objc_msgSendSuper2(&v7, "startStream");
    }
  }
  return result;
}

uint64_t sub_10009AF90(uint64_t a1, const char *a2, void (*a3)(uint64_t))
{
  unint64_t v18 = a3;
  uint64_t v19 = a2;
  uint64_t v4 = type metadata accessor for OSSignposter();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  objc_super v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10000AD60(v4, (uint64_t)qword_10012B220);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t v9 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v9 = 0;
  uint64_t v10 = OSSignposter.logHandle.getter();
  os_signpost_type_t v11 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v12 = OSSignpostID.rawValue.getter();
  uint64_t v13 = v19;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, v11, v12, v19, "", v9, 2u);
  v18(v3);
  os_signpost_type_t v14 = static os_signpost_type_t.end.getter();
  os_signpost_id_t v15 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, v14, v15, v13, "", v9, 2u);

  swift_slowDealloc();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

char *sub_10009B198(char *result)
{
  uint64_t v1 = *(void *)&result[OBJC_IVAR___AUAOutputStream_startCount];
  BOOL v2 = v1 != 0;
  uint64_t v3 = v1 - 1;
  if (v2)
  {
    uint64_t v4 = result;
    *(void *)&result[OBJC_IVAR___AUAOutputStream_startCount] = v3;
    if (!v3)
    {
      v8.receiver = result;
      v8.super_class = (Class)type metadata accessor for AUAOutputStream(0);
      objc_msgSendSuper2(&v8, "stopStream");
      uint64_t v5 = OBJC_IVAR___AUAOutputStream_explicitFeedback;
      uint64_t v6 = *(void *)&v4[OBJC_IVAR___AUAOutputStream_explicitFeedback];
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 16);
        if (*(void *)(v7 + 120))
        {
          swift_retain();
          swift_retain();
          sub_1000DADF0();
          swift_release();
          *(void *)(v7 + 120) = 0;
          swift_release();
          swift_release();
        }
      }
      *(void *)&v4[v5] = 0;
      return (char *)swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10009B2E4()
{
  return swift_release();
}

id sub_10009B2F4()
{
  return sub_100096940(0, (uint64_t (*)(void))type metadata accessor for AUAOutputStream);
}

uint64_t sub_10009B320(char a1)
{
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  if (a1) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x65727473206E6F20;
  v6._object = (void *)0xEB00000000206D61;
  String.append(_:)(v6);
  id v7 = [*(id *)(v1 + OBJC_IVAR____TtC9AUASDCore13AUATapControl_stream) streamName];
  if (v7)
  {
    objc_super v8 = v7;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  sub_10000AC7C(&qword_100127B18);
  v9._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  sub_10002E804(0xD000000000000017, 0x80000001000E5420, 0x615665676E616863, (void *)0xEF293A5F2865756CLL, 0xD000000000000016, 0x80000001000E4E30, 1388);
  swift_bridgeObjectRelease();
  return 1;
}

id sub_10009B524(uint64_t a1)
{
  return sub_100096940(a1, type metadata accessor for AUATapControl);
}

uint64_t type metadata accessor for AUAStream(uint64_t a1)
{
  return sub_10001A2E0(a1, (uint64_t *)&unk_100129728);
}

uint64_t sub_10009B56C(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if ((result & 1) == 0
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || a1 > *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *uint64_t v1 = result;
  }
  return result;
}

void *sub_10009B62C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v4 = (_OWORD *)(swift_bridgeObjectRetain() + 40);
  unint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    if (*((void *)v4 - 1) == a2)
    {
      long long v10 = *v4;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v5 = sub_100058C2C(0, v5[2] + 1, 1, v5);
      }
      unint64_t v8 = v5[2];
      unint64_t v7 = v5[3];
      if (v8 >= v7 >> 1) {
        unint64_t v5 = sub_100058C2C((void *)(v7 > 1), v8 + 1, 1, v5);
      }
      v5[2] = v8 + 1;
      Swift::String v6 = &v5[3 * v8];
      v6[4] = a2;
      *(_OWORD *)(v6 + 5) = v10;
    }
    unint64_t v4 = (_OWORD *)((char *)v4 + 24);
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10009B768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (!a4) {
    return 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  long long v10 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 24);
  swift_unknownObjectRetain();
  uint64_t v11 = v10(ObjectType, a5);
  uint64_t v12 = *(void *)(*(void *)(v11 + 152) + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
  if (v12 && sub_10001925C(22, v12))
  {
    swift_unknownObjectRelease();
    swift_release();
    return 0;
  }
  int v13 = *(unsigned __int8 *)(v11 + 49);
  swift_release();
  if (v13 != 1)
  {
LABEL_9:
    swift_unknownObjectRelease();
    return 0;
  }
  swift_retain();
  uint64_t v14 = sub_10008F480((uint64_t (*)(void))type metadata accessor for ActiveInputTerminal, (uint64_t)&protocol witness table for ActiveInputTerminal);
  if (v6)
  {
    swift_release();
    _StringGuts.grow(_:)(33);
    v16._countAndFlagsBits = 0xD00000000000001FLL;
    v16._object = (void *)0x80000001000E5D40;
    String.append(_:)(v16);
    sub_10000AC7C(&qword_100127400);
    _print_unlocked<A, B>(_:_:)();
    sub_10002E81C(0, 0xE000000000000000, 0xD00000000000001CLL, (void *)0x80000001000E5D60, 0xD000000000000016, 0x80000001000E4E30, 213);
    swift_errorRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v15 = v14;
  swift_release();
  swift_retain();
  uint64_t v19 = sub_10008F480((uint64_t (*)(void))type metadata accessor for ActiveOutputTerminal, (uint64_t)&protocol witness table for ActiveOutputTerminal);
  uint64_t result = swift_release();
  uint64_t v17 = v15 + v19;
  if (!__OFADD__(v15, v19))
  {
    uint64_t v20 = *(void *)(a3 + 16);
    if (!v20)
    {
      swift_unknownObjectRelease();
      return v17;
    }
    os_signpost_type_t v21 = (void *)(a3 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v22 = v21[3];
      uint64_t v23 = v21[4];
      sub_10001A974(v21, v22);
      uint64_t result = sub_1000559E0(v22, *(void *)(v23 + 8));
      BOOL v24 = __OFADD__(v17, result);
      v17 += result;
      if (v24) {
        break;
      }
      v21 += 5;
      if (!--v20)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return v17;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10009BA54(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  uint64_t v33 = a8;
  uint64_t v39 = a6;
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  unsigned int v37 = a2;
  uint64_t v13 = type metadata accessor for OSSignpostID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  Swift::String v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v9[OBJC_IVAR___AUAStream_streamingEndpoint] = 0;
  *(void *)&v9[OBJC_IVAR___AUAStream_transferManager] = 0;
  swift_unknownObjectWeakInit();
  *(_DWORD *)&v9[OBJC_IVAR___AUAStream_controlScope] = 1735159650;
  id v36 = a9;
  swift_unknownObjectWeakAssign();
  *(void *)&v9[OBJC_IVAR___AUAStream_interface] = a1;
  *(void *)&v9[OBJC_IVAR___AUAStream_firstTimeStampUSBFrame] = 0;
  v9[OBJC_IVAR___AUAStream_needFirstTimeStamp] = 0;
  *(void *)&v9[OBJC_IVAR___AUAStream_lastIOTimeNS] = 0;
  *(void *)&v9[OBJC_IVAR___AUAStream_sampleTime] = 0;
  *(void *)&v9[OBJC_IVAR___AUAStream_hostTime] = 0;
  *(void *)&v9[OBJC_IVAR___AUAStream_timeStampSeed] = 0;
  v9[OBJC_IVAR___AUAStream_started] = 0;
  uint64_t v17 = qword_100126910;
  unint64_t v18 = v9;
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for OSSignposter();
  sub_10000AD60(v19, (uint64_t)qword_10012B220);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v18[OBJC_IVAR___AUAStream_signpostID], v16, v13);
  uint64_t v20 = &v18[OBJC_IVAR___AUAStream_path];
  uint64_t v22 = v34;
  uint64_t v21 = v35;
  *(void *)uint64_t v20 = a3;
  *((void *)v20 + 1) = v22;
  *((void *)v20 + 2) = v21;
  *(void *)&v18[OBJC_IVAR___AUAStream_latencyInMs] = v33;
  uint64_t v23 = v39;
  sub_10001A9B8(v39, (uint64_t)&v18[OBJC_IVAR___AUAStream_streamingTerminal]);
  sub_10001A9B8((uint64_t)a7, (uint64_t)&v18[OBJC_IVAR___AUAStream_otherTerminal]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  id v24 = [v36 plugin];
  uint64_t v25 = (objc_class *)type metadata accessor for AUAStream(0);
  v38.receiver = v18;
  v38.super_class = v25;
  id v26 = objc_msgSendSuper2(&v38, "initWithDirection:withPlugin:", v37, v24);

  if (v26)
  {
    if (*(void *)(a1 + 96))
    {
      id v27 = v26;
      swift_bridgeObjectRetain();
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      id v29 = v26;
      NSString v28 = 0;
    }
    [v26 setStreamName:v28];

    [v26 setStartingChannel:1];
    uint64_t v30 = a7[3];
    sub_10001A974(a7, v30);
    id v31 = v26;
    [v31 setTerminalType:sub_10009EFF4(v30)];

    sub_10001ABC4(v23);
    sub_10001ABC4((uint64_t)a7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10009BDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  *(void *)&v8[OBJC_IVAR___AUAInputStream_startCount] = 0;
  uint64_t v14 = OBJC_IVAR___AUAInputStream_lockDelayBuffer;
  *(void *)&v8[OBJC_IVAR___AUAInputStream_lockDelayBuffer] = 0;
  uint64_t v15 = OBJC_IVAR___AUAInputStream_lockDelayTransactionList;
  *(void *)&v8[OBJC_IVAR___AUAInputStream_lockDelayTransactionList] = 0;
  *(void *)&v8[OBJC_IVAR___AUAInputStream_initialFeedbackMS] = 0;
  *(void *)&v8[OBJC_IVAR___AUAInputStream_lockDelayTransfers] = 0;
  Swift::String v16 = *(void **)&v8[v14];
  *(void *)&v8[v14] = 0;
  uint64_t v17 = v8;

  unint64_t v18 = *(void **)&v8[v15];
  *(void *)&v8[v15] = 0;

  v28[3] = type metadata accessor for ActiveOutputTerminal();
  v28[4] = &protocol witness table for ActiveOutputTerminal;
  v28[0] = a5;
  v27[3] = type metadata accessor for ActiveInputTerminal();
  v27[4] = &protocol witness table for ActiveInputTerminal;
  v27[0] = a6;
  uint64_t v19 = v28[6];
  sub_10009BA54(a1, 0x696E7074u, a2, a3, a4, (uint64_t)v28, v27, a7, a8);
  uint64_t v21 = v20;
  if (!v19)
  {
    uint64_t v22 = (_DWORD *)(v20 + OBJC_IVAR___AUAStream_controlScope);
    swift_beginAccess();
    _DWORD *v22 = 1768845428;
  }
  return v21;
}

void *sub_10009BF5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v4 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    if (*(v4 - 1) == a2)
    {
      uint64_t v7 = *(v4 - 2);
      uint64_t v8 = *v4;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_100058C2C(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        uint64_t v5 = sub_100058C2C((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      v5[2] = v10 + 1;
      uint64_t v6 = &v5[3 * v10];
      v6[4] = v7;
      v6[5] = a2;
      v6[6] = v8;
    }
    v4 += 3;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10009C08C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = a1 + 2;
  swift_beginAccess();
  uint64_t v7 = a1[2];
  if (!v7)
  {
    uint64_t v60 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
LABEL_12:
    uint64_t result = sub_10001A918((uint64_t)&v58, &qword_100128528);
    goto LABEL_13;
  }
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[9];
  if ((v9 & 0xC000000000000001) != 0)
  {
    swift_unknownObjectRetain();
    uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_36:
      swift_unknownObjectRetain();
      uint64_t v26 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_17:
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v8 + 168))(&v58, v26, ObjectType, v8);
      swift_release();
      swift_unknownObjectRelease();
      if (*((void *)&v59 + 1))
      {
        uint64_t v7 = sub_10000AC7C(&qword_100128530);
        uint64_t active = type metadata accessor for ActiveInputTerminal();
        if (swift_dynamicCast())
        {
          uint64_t v29 = v57[0];
          uint64_t v7 = *v6;
          if (*v6)
          {
            uint64_t v30 = a1[3];
            uint64_t v31 = swift_getObjectType();
            uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 56);
            swift_unknownObjectRetain();
            uint64_t v33 = v32(v31, v30);
            swift_unknownObjectRelease();
            swift_retain();
            uint64_t v34 = v3;
            uint64_t v35 = sub_10009BF5C(v33, v57[0]);
            uint64_t v7 = v34;
            swift_bridgeObjectRelease();
            swift_release();
            if (v35[2])
            {
              uint64_t v55 = a2;
              uint64_t v36 = v35[4];
              uint64_t v37 = v35[5];
              uint64_t v38 = v35[6];
              swift_retain();
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              uint64_t v40 = a1[2];
              uint64_t v39 = a1[3];
              swift_unknownObjectRetain();
              uint64_t v41 = swift_retain();
              uint64_t v56 = v36;
              uint64_t v61 = v37;
              uint64_t v42 = sub_10009B768(v41, v37, v38, v40, v39);
              if (!v7)
              {
                uint64_t v49 = v42;
                swift_unknownObjectRelease();
                uint64_t v50 = (char *)objc_allocWithZone((Class)type metadata accessor for AUAOutputStream(0));
                *(void *)&v50[OBJC_IVAR___AUAOutputStream_startCount] = 0;
                *(void *)&v50[OBJC_IVAR___AUAOutputStream_explicitFeedback] = 0;
                *((void *)&v59 + 1) = active;
                uint64_t v60 = &protocol witness table for ActiveInputTerminal;
                *(void *)&long long v58 = v29;
                v57[3] = type metadata accessor for ActiveOutputTerminal();
                v57[4] = (uint64_t)&protocol witness table for ActiveOutputTerminal;
                v57[0] = v36;
                id v51 = v55;
                swift_retain();
                swift_retain();
                uint64_t v52 = v61;
                swift_retain();
                swift_bridgeObjectRetain();
                sub_10009BA54((uint64_t)a1, 0x6F757470u, v56, v52, v38, (uint64_t)&v58, v57, v49, v51);
                uint64_t v7 = v53;
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();

                uint64_t v54 = (_DWORD *)(v7 + OBJC_IVAR___AUAStream_controlScope);
                swift_beginAccess();
                *uint64_t v54 = 1869968496;
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                return v7;
              }
LABEL_10:
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              swift_release_n();
              swift_unknownObjectRelease();
              return v7;
            }
            swift_bridgeObjectRelease();
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v44 = 93;
            *(void *)(v44 + 8) = 0;
            *(void *)(v44 + 16) = 0xE000000000000000;
            *(void *)(v44 + 24) = 0xD00000000000001FLL;
            *(void *)(v44 + 32) = 0x80000001000E5D20;
            *(void *)(v44 + 40) = 0xD000000000000016;
            *(void *)(v44 + 48) = 0x80000001000E4E30;
            uint64_t v45 = 245;
          }
          else
          {
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v44 = 93;
            *(void *)(v44 + 8) = 0;
            *(void *)(v44 + 16) = 0xE000000000000000;
            *(void *)(v44 + 24) = 0xD00000000000001FLL;
            *(void *)(v44 + 32) = 0x80000001000E5D20;
            *(void *)(v44 + 40) = 0xD000000000000016;
            *(void *)(v44 + 48) = 0x80000001000E4E30;
            uint64_t v45 = 256;
          }
LABEL_30:
          *(void *)(v44 + 56) = v45;
          swift_willThrow();
          swift_release();
          return v7;
        }
LABEL_25:
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v43 = 80;
        *(void *)(v43 + 8) = 0;
        *(void *)(v43 + 16) = 0xE000000000000000;
        *(void *)(v43 + 24) = 0xD00000000000001FLL;
        *(void *)(v43 + 32) = 0x80000001000E5D20;
        *(void *)(v43 + 40) = 0xD000000000000016;
        *(void *)(v43 + 48) = 0x80000001000E4E30;
        *(void *)(v43 + 56) = 258;
        swift_willThrow();
        return v7;
      }
LABEL_24:
      sub_10001A918((uint64_t)&v58, &qword_100128528);
      goto LABEL_25;
    }
    uint64_t v10 = *(void *)(v9 + 32);
    swift_unknownObjectRetain();
    swift_retain();
  }
  uint64_t v11 = swift_getObjectType();
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v8 + 168))(&v58, v10, v11, v8);
  swift_release();
  swift_unknownObjectRelease();
  if (!*((void *)&v59 + 1)) {
    goto LABEL_12;
  }
  sub_10000AC7C(&qword_100128530);
  type metadata accessor for ActiveOutputTerminal();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v7 = *v6;
    if (*v6)
    {
      uint64_t v13 = a1[3];
      uint64_t v14 = swift_getObjectType();
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 56);
      swift_unknownObjectRetain();
      uint64_t v16 = v15(v14, v13);
      swift_unknownObjectRelease();
      swift_retain();
      uint64_t v17 = v3;
      unint64_t v18 = sub_10009B62C(v16, v57[0]);
      uint64_t v7 = v17;
      swift_bridgeObjectRelease();
      swift_release();
      if (v18[2])
      {
        uint64_t v19 = v18[4];
        uint64_t v20 = v18[5];
        uint64_t v21 = v18[6];
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v23 = a1[2];
        uint64_t v22 = a1[3];
        swift_unknownObjectRetain();
        swift_retain();
        uint64_t v24 = sub_10009B768(v19, v20, v21, v23, v22);
        if (!v7)
        {
          uint64_t v46 = v24;
          swift_unknownObjectRelease();
          objc_allocWithZone((Class)type metadata accessor for AUAInputStream(0));
          id v47 = a2;
          uint64_t v48 = swift_retain();
          uint64_t v7 = sub_10009BDF8(v48, v19, v20, v21, v57[0], v20, v46, v47);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          return v7;
        }
        goto LABEL_10;
      }
      swift_bridgeObjectRelease();
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v44 = 93;
      *(void *)(v44 + 8) = 0;
      *(void *)(v44 + 16) = 0xE000000000000000;
      *(void *)(v44 + 24) = 0xD00000000000001FLL;
      *(void *)(v44 + 32) = 0x80000001000E5D20;
      *(void *)(v44 + 40) = 0xD000000000000016;
      *(void *)(v44 + 48) = 0x80000001000E4E30;
      uint64_t v45 = 229;
    }
    else
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v44 = 93;
      *(void *)(v44 + 8) = 0;
      *(void *)(v44 + 16) = 0xE000000000000000;
      *(void *)(v44 + 24) = 0xD00000000000001FLL;
      *(void *)(v44 + 32) = 0x80000001000E5D20;
      *(void *)(v44 + 40) = 0xD000000000000016;
      *(void *)(v44 + 48) = 0x80000001000E4E30;
      uint64_t v45 = 239;
    }
    goto LABEL_30;
  }
LABEL_13:
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v60 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    goto LABEL_24;
  }
  uint64_t v8 = a1[3];
  uint64_t v25 = a1[9];
  if ((v25 & 0xC000000000000001) != 0) {
    goto LABEL_36;
  }
  if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v26 = *(void *)(v25 + 32);
    swift_unknownObjectRetain();
    swift_retain();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

char *sub_10009C978(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      uint64_t v8 = (a1 & 0xC000000000000001) != 0
         ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : (char *)*(id *)(a1 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      if ([v8 isEqual:a2]
        && *(void *)&v9[OBJC_IVAR___AUAStreamFormat_rateRange] <= a3
        && *(void *)&v9[OBJC_IVAR___AUAStreamFormat_rateRange + 8] >= a3)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return 0;
}

id sub_10009CACC(unint64_t a1, void *a2)
{
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_15:
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v5 = 4;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id result = *(id *)(a1 + 8 * v5);
    }
    uint64_t v7 = result;
    uint64_t v8 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
    {
      __break(1u);
      goto LABEL_15;
    }
    if (!a2) {
      break;
    }
    if ([a2 isCompatible:result])
    {
      swift_bridgeObjectRelease();
      return v7;
    }

    ++v5;
    if (v8 == v4) {
      goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10009CBE0()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10009CC28()
{
  return sub_100093B40(*(char **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

unint64_t sub_10009CC38()
{
  unint64_t result = qword_1001296B0;
  if (!qword_1001296B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001296B0);
  }
  return result;
}

unint64_t destroy for AsyncFeedbackType(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s9AUASDCore17AsyncFeedbackTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for AsyncFeedbackType(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AsyncFeedbackType(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncFeedbackType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AsyncFeedbackType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

void *sub_10009CEA8(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AsyncFeedbackType()
{
  return &type metadata for AsyncFeedbackType;
}

uint64_t sub_10009CED8()
{
  return type metadata accessor for AUAStream(0);
}

uint64_t sub_10009CEE0()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_10009CFD8()
{
  return type metadata accessor for AUAInputStream(0);
}

uint64_t type metadata accessor for AUAInputStream(uint64_t a1)
{
  return sub_10001A2E0(a1, (uint64_t *)&unk_100129788);
}

uint64_t sub_10009D000()
{
  return swift_updateClassMetadata2();
}

uint64_t type metadata accessor for AUAFeedbackTransferBlock()
{
  return self;
}

uint64_t sub_10009D07C()
{
  return type metadata accessor for AUAOutputExplicitFeedbackStream(0);
}

uint64_t type metadata accessor for AUAOutputExplicitFeedbackStream(uint64_t a1)
{
  return sub_10001A2E0(a1, qword_1001298C0);
}

uint64_t sub_10009D0A4()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10009D178()
{
  return type metadata accessor for AUAOutputStream(0);
}

uint64_t type metadata accessor for AUAOutputStream(uint64_t a1)
{
  return sub_10001A2E0(a1, (uint64_t *)&unk_100129A30);
}

uint64_t sub_10009D1A0()
{
  return swift_updateClassMetadata2();
}

uint64_t type metadata accessor for AUATapControl()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for AUAFeedbackTransferBlock.FeedbackPacketSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009D2E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AUAFeedbackTransferBlock.FeedbackPacketSize()
{
  return &type metadata for AUAFeedbackTransferBlock.FeedbackPacketSize;
}

unint64_t sub_10009D31C()
{
  unint64_t result = qword_100129A70;
  if (!qword_100129A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129A70);
  }
  return result;
}

uint64_t sub_10009D370()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009D3A8()
{
  return sub_10009A6DC(*(char **)(v0 + 16));
}

uint64_t sub_10009D3B0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009D3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10009D3D0()
{
  return swift_release();
}

uint64_t sub_10009D3D8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009D410(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignposter();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = qword_100126910;
  uint64_t v28 = a2;
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10000AD60(v8, (uint64_t)qword_10012B220);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)a1 + OBJC_IVAR___AUAStream_signpostID, v4);
  id v14 = a1;
  uint64_t v15 = (uint8_t *)swift_slowAlloc();
  uint64_t v27 = v8;
  uint64_t v16 = v5;
  uint64_t v17 = v15;
  *(_DWORD *)uint64_t v15 = 67109120;
  BOOL v29 = [v14 direction] == 1768845428;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  uint64_t v18 = v9;
  uint64_t v19 = OSSignposter.logHandle.getter();
  os_signpost_type_t v20 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
  uint64_t v26 = v4;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, v20, v21, "AUAStream_enqueueNextTransfer", "isInput %{BOOL}d", v17, 8u);
  uint64_t v22 = v28;
  swift_retain();
  sub_100091818((char *)v14, v22);
  LOBYTE(v14) = static os_signpost_type_t.end.getter();
  os_signpost_id_t v23 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, (os_signpost_type_t)v14, v23, "AUAStream_enqueueNextTransfer", "isInput %{BOOL}d", v17, 8u);

  swift_slowDealloc();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v26);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v27);
  return swift_release();
}

uint64_t sub_10009D74C(unsigned int a1, uint64_t a2)
{
  return sub_1000925EC(a1, a2);
}

uint64_t sub_10009D770()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_10009D7B8(uint64_t a1, uint64_t a2)
{
  return sub_1000DB0D0(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

void sub_10009D7C8(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v73[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  id v14 = &v73[-v13];
  uint64_t v15 = mach_absolute_time();
  if (qword_100126948 != -1) {
    swift_once();
  }
  if (qword_10012B2D0 != HIDWORD(qword_10012B2D0))
  {
    if (!is_mul_ok(v15, qword_10012B2D0))
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if (!HIDWORD(qword_10012B2D0))
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    uint64_t v15 = v15 * qword_10012B2D0 / HIDWORD(qword_10012B2D0);
  }
  uint64_t v84 = v12;
  uint64_t v85 = v8;
  uint64_t v86 = a2;
  uint64_t v87 = a4;
  uint64_t v16 = *(void *)&a3[OBJC_IVAR___AUAStream_transferManager];
  if (!v16)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  unint64_t v17 = (*(uint64_t (**)(void))(*(void *)v16 + 80))();
  uint64_t v18 = OBJC_IVAR___AUAStream_lastIOTimeNS;
  uint64_t v19 = *(void *)&a3[OBJC_IVAR___AUAStream_lastIOTimeNS];
  os_signpost_type_t v20 = &a3[OBJC_IVAR___AUAStream_audioDevice];
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (!v19) {
    goto LABEL_16;
  }
  if (v15 < v19)
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v17 >> 61)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if ((v15 - v19) / 0xF4240 <= (8 * v17) >> 1)
  {
LABEL_16:

    goto LABEL_17;
  }
  id v79 = Strong;
  uint64_t v81 = v18;
  uint64_t v82 = v20;
  unsigned int v83 = a1;
  uint64_t v89 = 0;
  uint64_t v90 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  uint64_t v89 = 0xD000000000000020;
  uint64_t v90 = 0x80000001000E5C00;
  unint64_t v80 = (v15 - v19) / 0xF4240;
  uint64_t v88 = v80;
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x687365726874202CLL;
  v23._object = (void *)0xEC00000020646C6FLL;
  String.append(_:)(v23);
  uint64_t v78 = 8 * v17;
  uint64_t v88 = 8 * v17;
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  unint64_t v77 = (unint64_t)"Delays timeDiff ";
  unint64_t v76 = (unint64_t)"changePhysicalFormat(_:)";
  sub_10002E804(v89, v90, 0xD000000000000048, (void *)0x80000001000E5C30, 0xD000000000000016, 0x80000001000E4E30, 653);
  swift_bridgeObjectRelease();
  if (qword_100126910 != -1) {
LABEL_52:
  }
    swift_once();
  uint64_t v25 = type metadata accessor for OSSignposter();
  sub_10000AD60(v25, (uint64_t)qword_10012B220);
  uint64_t v26 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 16);
  uint64_t v27 = v85;
  v26(v14, &a3[OBJC_IVAR___AUAStream_signpostID], v85);
  uint64_t v28 = OSSignposter.logHandle.getter();
  int v29 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    v26(v84, v14, v27);
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 134218240;
    int v74 = v29;
    unint64_t v31 = v80;
    uint64_t v89 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2048;
    int v75 = v14;
    unint64_t v32 = v78;
    uint64_t v89 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v33 = v84;
    os_signpost_id_t v34 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, (os_signpost_type_t)v74, v34, "AUAStream_safeguardAgainstDelays", "timeDiff %llu, threshold %lu", (uint8_t *)v30, 0x16u);
    swift_slowDealloc();

    uint64_t v35 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
    v35(v75, v27);
    v35(v33, v27);
    a1 = v83;
  }
  else
  {

    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v14, v27);
    a1 = v83;
    unint64_t v31 = v80;
    unint64_t v32 = v78;
  }
  uint64_t v18 = v81;
  if (v32 >= v31)
  {
  }
  else
  {
    kdebug_trace();
    id v53 = v79;
    AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(0xD000000000000048, v77 | 0x8000000000000000, 0xD000000000000016, v76 | 0x8000000000000000, 659, (uint64_t)ClusterChannelInfo.chNum.getter, 0);
  }
LABEL_17:
  *(void *)&a3[v18] = v15;
  uint64_t v36 = *(void *)(v87 + OBJC_IVAR___AUAStream_transferManager);
  if (!v36)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v36 + 112);
  swift_retain();
  uint64_t v38 = v37(v86, a1);
  unint64_t v40 = v39;
  __int16 v42 = v41;
  swift_release();
  uint64_t v43 = swift_unknownObjectWeakLoadStrong();
  if (!v43)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v44 = (void *)v43;
  uint64_t v45 = *(void **)(v43 + OBJC_IVAR___AUAAudioDevice_timeStampStream);
  uint64_t v46 = v45;

  if (!v45) {
    goto LABEL_45;
  }

  if (v46 != a3) {
    goto LABEL_45;
  }
  uint64_t v47 = OBJC_IVAR___AUAStream_needFirstTimeStamp;
  if (a3[OBJC_IVAR___AUAStream_needFirstTimeStamp] == 1 && (v42 & 0x100) != 0)
  {
    uint64_t v48 = swift_unknownObjectWeakLoadStrong();
    if (v48)
    {
      uint64_t v49 = (void *)v48;
      uint64_t v50 = [*(id *)(v48 + OBJC_IVAR___AUAAudioDevice_timeCorrelater) timeforUSBFrame:*(void *)&a3[OBJC_IVAR___AUAStream_firstTimeStampUSBFrame]];

      uint64_t v51 = swift_unknownObjectWeakLoadStrong();
      if (v51)
      {
        uint64_t v52 = (void *)v51;
        AUAAudioDevice.updateTimeStamp(hostTime:sampleTime:seed:from:)(v50, *(void *)&a3[OBJC_IVAR___AUAStream_timeStampSeed], (uint64_t)a3, 0.0);

        a3[v47] = 0;
        goto LABEL_45;
      }
      goto LABEL_65;
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if ((v42 & 1) == 0)
  {
    uint64_t v54 = (void *)swift_unknownObjectWeakLoadStrong();
    if (!v54)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    uint64_t v55 = v54;
    unsigned int v56 = [v54 timestampPeriod];

    double v57 = (double)v56;
    uint64_t v58 = OBJC_IVAR___AUAStream_sampleTime;
    *(double *)&a3[OBJC_IVAR___AUAStream_sampleTime] = *(double *)&a3[OBJC_IVAR___AUAStream_sampleTime] + v57;
    uint64_t v59 = swift_unknownObjectWeakLoadStrong();
    if (!v59)
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    uint64_t v60 = (void *)v59;
    uint64_t v61 = (char *)[*(id *)(v59 + OBJC_IVAR___AUAAudioDevice_timeCorrelater) timeforUSBFrame:v38];

    if (is_mul_ok(v40, 0x3B9ACA00uLL))
    {
      id v62 = [a3 physicalFormat];
      if (!v62)
      {
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      id v63 = v62;
      [v62 sampleRate];
      double v65 = v64;

      double v66 = (double)(1000000000 * v40) / v65;
      if ((~*(void *)&v66 & 0x7FF0000000000000) != 0)
      {
        if (v66 > -1.0)
        {
          if (v66 < 1.84467441e19)
          {
            unint64_t v67 = (unint64_t)v66;
            if (qword_10012B2D0 != HIDWORD(qword_10012B2D0))
            {
              if (!is_mul_ok(v67, HIDWORD(qword_10012B2D0)))
              {
LABEL_58:
                __break(1u);
                goto LABEL_59;
              }
              if (!qword_10012B2D0)
              {
LABEL_59:
                __break(1u);
                goto LABEL_60;
              }
              unint64_t v67 = v67 * HIDWORD(qword_10012B2D0) / qword_10012B2D0;
            }
            BOOL v68 = __CFADD__(v61, v67);
            uint64_t v69 = &v61[v67];
            if (!v68)
            {
              uint64_t v70 = swift_unknownObjectWeakLoadStrong();
              if (!v70)
              {
LABEL_69:
                __break(1u);
                return;
              }
              uint64_t v71 = (void *)v70;
              AUAAudioDevice.updateTimeStamp(hostTime:sampleTime:seed:from:)(v69, *(void *)&a3[OBJC_IVAR___AUAStream_timeStampSeed], (uint64_t)a3, *(double *)&a3[v58]);

              goto LABEL_45;
            }
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
LABEL_45:
  if (a1 != -536870165)
  {
    uint64_t v72 = swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_10009D410(a3, v72);
    swift_release();
  }
}

uint64_t sub_10009E05C(int a1)
{
  int v25 = a1;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignposter();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10000AD60(v6, (uint64_t)qword_10012B220);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v24 = v3;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v26 = v2;
  v11(v5, v1 + OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID, v2);
  uint64_t v23 = v1;
  uint64_t v12 = (uint8_t *)swift_slowAlloc();
  uint64_t v28 = swift_slowAlloc();
  *(_DWORD *)uint64_t v12 = 136315138;
  sub_10000AC7C(&qword_100127420);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1000E8090;
  *(void *)(v13 + 56) = &type metadata for Int32;
  *(void *)(v13 + 64) = &protocol witness table for Int32;
  int v14 = v25;
  *(_DWORD *)(v13 + 32) = v25;
  uint64_t v15 = String.init(format:_:)();
  uint64_t v27 = sub_1000192BC(v15, v16, &v28);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  unint64_t v17 = OSSignposter.logHandle.getter();
  os_signpost_type_t v18 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v19, "AUAOutputExplicitFeedbackStream_isocFeedbackCompletion", "status %s", v12, 0xCu);
  if (v14 != -536870165) {
    sub_100098FA8();
  }
  os_signpost_type_t v20 = static os_signpost_type_t.end.getter();
  os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v20, v21, "AUAOutputExplicitFeedbackStream_isocFeedbackCompletion", "status %s", v12, 0xCu);

  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10009E3FC()
{
  return sub_10009669C(*(void **)(v0 + 16));
}

uint64_t sub_10009E404()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t Configuration.configNum.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 5);
}

void *static Configuration.usbDescriptors(_:)(const IOUSBConfigurationDescriptor *a1)
{
  return sub_10009E694(a1);
}

void *static Configuration.audioInterfaceAssociations(_:)(uint64_t a1)
{
  return sub_10009EE6C(a1);
}

uint64_t Cluster.channelInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Configuration.highestExceptionLevel.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  LOBYTE(v4) = 0;
  uint64_t v5 = 32;
  do
  {
    long long v6 = *(_OWORD *)(a2 + v5 + 144);
    v13[8] = *(_OWORD *)(a2 + v5 + 128);
    v13[9] = v6;
    uint64_t v14 = *(void *)(a2 + v5 + 160);
    long long v7 = *(_OWORD *)(a2 + v5 + 80);
    void v13[4] = *(_OWORD *)(a2 + v5 + 64);
    v13[5] = v7;
    long long v8 = *(_OWORD *)(a2 + v5 + 112);
    v13[6] = *(_OWORD *)(a2 + v5 + 96);
    v13[7] = v8;
    long long v9 = *(_OWORD *)(a2 + v5 + 16);
    v13[0] = *(_OWORD *)(a2 + v5);
    v13[1] = v9;
    long long v10 = *(_OWORD *)(a2 + v5 + 48);
    void v13[2] = *(_OWORD *)(a2 + v5 + 32);
    v13[3] = v10;
    sub_10006CF24(v13);
    unsigned int v11 = Function.highestExceptionLevel.getter();
    sub_10001D0D8(v13);
    if (v4 <= v11) {
      uint64_t v4 = v11;
    }
    else {
      uint64_t v4 = v4;
    }
    v5 += 168;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v4;
}

const IOUSBConfigurationDescriptor *static Configuration.newConfiguration(withDescriptor:)(const IOUSBConfigurationDescriptor *a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = sub_10009E694(a1);
  if (!v1)
  {
    uint64_t v4 = (uint64_t)v3;
    long long v6 = sub_10009EE6C((uint64_t)v3);
    long long v7 = _s9AUASDCore15DescriptorUtilsV27usbAudioFunctionDescriptorsySaySayAA13USBDescriptorOG07controlG0_SayAF15streamInterface_SayAGG0J10AlternatestG0jG0tGAGFZ_0(v4);
    swift_bridgeObjectRelease();
    if (v7[2])
    {
      swift_bridgeObjectRetain();
      sub_10006D004((uint64_t)v7, (uint64_t)v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v2;
}

uint64_t sub_10009E628(__int16 a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x100) == 0)
  {
    uint64_t v3 = *(void *)(a3 + 16);
    if (!v3) {
      return 0;
    }
    LOBYTE(v4) = 0;
    uint64_t v5 = a3 + 32;
    uint64_t v6 = 1;
    do
    {
      if (v4)
      {
        BOOL v4 = 1;
        if (v3 == v6) {
          return v4;
        }
      }
      else
      {
        BOOL v4 = *(unsigned __int8 *)(*(void *)v5 + 2) == a1;
        if (v3 == v6) {
          return v4;
        }
      }
      v5 += 168;
    }
    while (!__OFADD__(v6++, 1));
    __break(1u);
  }
  return 1;
}

void *sub_10009E694(const IOUSBConfigurationDescriptor *a1)
{
  uint64_t v2 = v1;
  Descriptor = IOUSBGetNextDescriptor(a1, 0);
  uint64_t bLength = a1->bLength;
  if (!Descriptor)
  {
    long long v8 = _swiftEmptyArrayStorage;
LABEL_4:
    if (bLength != a1->wTotalLength)
    {
      _StringGuts.grow(_:)(53);
      v9._countAndFlagsBits = 0xD000000000000023;
      v9._object = (void *)0x80000001000E5DE0;
      String.append(_:)(v9);
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = 0x4C6C61746F547720;
      v11._object = (void *)0xEE00206874676E65;
      String.append(_:)(v11);
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      sub_10002E81C(0, 0xE000000000000000, 0xD000000000000012, (void *)0x80000001000E5E10, 0xD00000000000001DLL, 0x80000001000E5E30, 140);
LABEL_45:
      swift_bridgeObjectRelease();
    }
    return v8;
  }
  uint64_t v6 = (IOUSBDescriptorHeader *)Descriptor;
  __int16 v7 = -256;
  long long v8 = _swiftEmptyArrayStorage;
  while (2)
  {
    uint64_t v13 = v6->bLength;
    if (!v6->bLength || !v6->bDescriptorType) {
      goto LABEL_4;
    }
    BOOL v14 = __OFADD__(bLength, v13);
    bLength += v13;
    if (v14)
    {
      __break(1u);
      JUMPOUT(0x10009EE20);
    }
    uint64_t v15 = sub_10008DC54(v6, v7);
    if (v2) {
      goto LABEL_45;
    }
    uint64_t v17 = v15;
    __int16 v18 = v16;
    int v25 = v8;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v8 = sub_100059B54(0, v8[2] + 1, 1, v8);
    }
    unint64_t v20 = v8[2];
    unint64_t v19 = v8[3];
    if (v20 >= v19 >> 1) {
      long long v8 = sub_100059B54((void *)(v19 > 1), v20 + 1, 1, v8);
    }
    _WORD v8[2] = v20 + 1;
    os_signpost_id_t v21 = &v8[2 * v20];
    v21[4] = v17;
    *((_WORD *)v21 + 20) = v18;
    uint64_t v2 = 0;
    switch(HIBYTE(v18))
    {
      case 1:
        __int16 v7 = -256;
        goto LABEL_7;
      case 2:
      case 3:
      case 4:
      case 5:
        __int16 v7 = *(unsigned __int8 *)(v17 + 7);
        goto LABEL_7;
      case 6:
        if (HIBYTE(v7) != 255 && !(_BYTE)v7)
        {
          __int16 v7 = 256;
LABEL_7:
          uint64_t v6 = (IOUSBDescriptorHeader *)IOUSBGetNextDescriptor(a1, v6);
          if (!v6) {
            goto LABEL_4;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v23 = 53;
        *(void *)(v23 + 8) = 0;
        *(void *)(v23 + 16) = 0xE000000000000000;
        *(void *)(v23 + 24) = 0xD000000000000012;
        *(void *)(v23 + 32) = 0x80000001000E5E10;
        *(void *)(v23 + 40) = 0xD00000000000001DLL;
        *(void *)(v23 + 48) = 0x80000001000E5E30;
        uint64_t v24 = 89;
LABEL_51:
        *(void *)(v23 + 56) = v24;
        swift_willThrow();
        return v25;
      case 7:
        if (HIBYTE(v7) == 255 || HIBYTE(v7) && HIBYTE(v7) != 1 || v7 != 32)
        {
          swift_bridgeObjectRelease();
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v23 = 53;
          *(void *)(v23 + 8) = 0;
          *(void *)(v23 + 16) = 0xE000000000000000;
          *(void *)(v23 + 24) = 0xD000000000000012;
          *(void *)(v23 + 32) = 0x80000001000E5E10;
          *(void *)(v23 + 40) = 0xD00000000000001DLL;
          *(void *)(v23 + 48) = 0x80000001000E5E30;
          uint64_t v24 = 99;
          goto LABEL_51;
        }
        __int16 v7 = 288;
        goto LABEL_7;
      case 8:
        if (HIBYTE(v7) == 255 || HIBYTE(v7) && HIBYTE(v7) != 1 || v7 != 48)
        {
          swift_bridgeObjectRelease();
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v23 = 53;
          *(void *)(v23 + 8) = 0;
          *(void *)(v23 + 16) = 0xE000000000000000;
          *(void *)(v23 + 24) = 0xD000000000000012;
          *(void *)(v23 + 32) = 0x80000001000E5E10;
          *(void *)(v23 + 40) = 0xD00000000000001DLL;
          *(void *)(v23 + 48) = 0x80000001000E5E30;
          uint64_t v24 = 109;
          goto LABEL_51;
        }
        __int16 v7 = 304;
        goto LABEL_7;
      case 9:
        if (HIBYTE(v7) == 255 || HIBYTE(v7) && HIBYTE(v7) != 1 || v7 != 64)
        {
          swift_bridgeObjectRelease();
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v23 = 53;
          *(void *)(v23 + 8) = 0;
          *(void *)(v23 + 16) = 0xE000000000000000;
          *(void *)(v23 + 24) = 0xD000000000000012;
          *(void *)(v23 + 32) = 0x80000001000E5E10;
          *(void *)(v23 + 40) = 0xD00000000000001DLL;
          *(void *)(v23 + 48) = 0x80000001000E5E30;
          uint64_t v24 = 119;
          goto LABEL_51;
        }
        __int16 v7 = 320;
        goto LABEL_7;
      case 0xA:
        __int16 v7 = *(unsigned __int8 *)(v17 + 7) | 0x200;
        goto LABEL_7;
      case 0xC:
        if (v7 == 256) {
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v23 = 53;
        *(void *)(v23 + 8) = 0;
        *(void *)(v23 + 16) = 0xE000000000000000;
        *(void *)(v23 + 24) = 0xD000000000000012;
        *(void *)(v23 + 32) = 0x80000001000E5E10;
        *(void *)(v23 + 40) = 0xD00000000000001DLL;
        *(void *)(v23 + 48) = 0x80000001000E5E30;
        uint64_t v24 = 94;
        goto LABEL_51;
      case 0xD:
        if (v7 == 288) {
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v23 = 53;
        *(void *)(v23 + 8) = 0;
        *(void *)(v23 + 16) = 0xE000000000000000;
        *(void *)(v23 + 24) = 0xD000000000000012;
        *(void *)(v23 + 32) = 0x80000001000E5E10;
        *(void *)(v23 + 40) = 0xD00000000000001DLL;
        *(void *)(v23 + 48) = 0x80000001000E5E30;
        uint64_t v24 = 104;
        goto LABEL_51;
      case 0xE:
        if (v7 == 304) {
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v23 = 53;
        *(void *)(v23 + 8) = 0;
        *(void *)(v23 + 16) = 0xE000000000000000;
        *(void *)(v23 + 24) = 0xD000000000000012;
        *(void *)(v23 + 32) = 0x80000001000E5E10;
        *(void *)(v23 + 40) = 0xD00000000000001DLL;
        *(void *)(v23 + 48) = 0x80000001000E5E30;
        uint64_t v24 = 114;
        goto LABEL_51;
      case 0xF:
        if (v7 == 320) {
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v23 = 53;
        *(void *)(v23 + 8) = 0;
        *(void *)(v23 + 16) = 0xE000000000000000;
        *(void *)(v23 + 24) = 0xD000000000000012;
        *(void *)(v23 + 32) = 0x80000001000E5E10;
        *(void *)(v23 + 40) = 0xD00000000000001DLL;
        *(void *)(v23 + 48) = 0x80000001000E5E30;
        uint64_t v24 = 124;
        goto LABEL_51;
      default:
        goto LABEL_7;
    }
  }
}

void *sub_10009EE6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = (unsigned char *)(a1 + 32);
  swift_bridgeObjectRetain();
  BOOL v4 = _swiftEmptyArrayStorage;
  do
  {
    if (!v3[9])
    {
      uint64_t v6 = *(void *)v3;
      if (*(unsigned char *)(*(void *)v3 + 4) == 1)
      {
        v1.i32[0] = *(_DWORD *)v6;
        char v7 = *(unsigned char *)(v6 + 5);
        char v8 = *(unsigned char *)(v6 + 6);
        char v9 = *(unsigned char *)(v6 + 7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          BOOL v4 = sub_100059920(0, v4[2] + 1, 1, v4);
        }
        unint64_t v11 = v4[2];
        unint64_t v10 = v4[3];
        if (v11 >= v10 >> 1) {
          BOOL v4 = sub_100059920((void *)(v10 > 1), v11 + 1, 1, v4);
        }
        v4[2] = v11 + 1;
        uint64_t v5 = &v4[v11];
        *((_DWORD *)v5 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v1)).u32[0];
        *((unsigned char *)v5 + 36) = 1;
        *((unsigned char *)v5 + 37) = v7;
        *((unsigned char *)v5 + 38) = v8;
        *((unsigned char *)v5 + 39) = v9;
      }
    }
    v3 += 16;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v4;
}

_OWORD *assignWithTake for Configuration(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Configuration()
{
  return &type metadata for Configuration;
}

uint64_t sub_10009EFF4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  char v9 = (char *)&v15 - v8;
  unint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v7);
  if (v11 < 0x10000)
  {
    uint64_t v12 = 1936745574;
    if ((unsigned __int16)v11 <= 0x301u)
    {
      if ((unsigned __int16)v11 == 513 || (unsigned __int16)v11 == 518) {
        return 1835623282;
      }
      if ((unsigned __int16)v11 == 769) {
        return 1936747378;
      }
    }
    else if ((unsigned __int16)v11 > 0x601u)
    {
      if ((unsigned __int16)v11 == 1538) {
        return v12;
      }
      if ((unsigned __int16)v11 == 1539) {
        return 1818848869;
      }
    }
    else
    {
      if ((unsigned __int16)v11 == 770) {
        return 1751412840;
      }
      if ((unsigned __int16)v11 == 1026)
      {
        uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
        v13(v9, v1, a1);
        type metadata accessor for ActiveOutputTerminal();
        if (swift_dynamicCast())
        {
          uint64_t v12 = 1751412840;
          swift_release();
          return v12;
        }
        v13(v6, v1, a1);
        type metadata accessor for ActiveInputTerminal();
        if (swift_dynamicCast())
        {
          swift_release();
          return 1752000867;
        }
      }
    }
    return 0;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009F248(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v6);
  uint64_t v2 = v7;
  uint64_t v3 = v8;
  sub_10001A974(v6, v7);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  sub_10001ABC4((uint64_t)v6);
  return v4;
}

uint64_t ActiveTerminalEntity.clockEntityID.getter(uint64_t a1, uint64_t a2)
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void v20[3];
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[7];
  uint64_t v24;

  if ((*(uint64_t (**)(void))(*(void *)(a2 + 8) + 16))())
  {
    uint64_t v5 = v4;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(ObjectType, v5);
    swift_unknownObjectRelease();
    long long v8 = *(_OWORD *)(v7 + 112);
    v23[4] = *(_OWORD *)(v7 + 96);
    v23[5] = v8;
    v23[6] = *(_OWORD *)(v7 + 128);
    uint64_t v24 = *(void *)(v7 + 144);
    long long v9 = *(_OWORD *)(v7 + 48);
    v23[0] = *(_OWORD *)(v7 + 32);
    v23[1] = v9;
    long long v10 = *(_OWORD *)(v7 + 80);
    v23[2] = *(_OWORD *)(v7 + 64);
    v23[3] = v10;
    sub_100035ECC(v23);
    swift_release();
    unint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16);
    v11(v20, a1, a2);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    sub_10001A974(v20, v21);
    BOOL v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 48))(v12, v13);
    uint64_t v15 = sub_10004F0D0(v14);
    LOBYTE(v12) = v16;
    sub_100035FC8(v23);
    sub_10001ABC4((uint64_t)v20);
    if ((v12 & 1) == 0) {
      return v15;
    }
  }
  else
  {
    unint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16);
  }
  v11(v20, a1, a2);
  uint64_t v17 = v21;
  __int16 v18 = v22;
  sub_10001A974(v20, v21);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 48))(v17, v18);
  sub_10001ABC4((uint64_t)v20);
  return v15;
}

uint64_t ActiveTerminalEntity.clock.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  long long v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
  uint64_t v13 = v12(v7, v11);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, a1);
  if (!v13)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
    return 0;
  }
  v20[0] = *(void *)(a2 + 24);
  uint64_t v14 = ((uint64_t (*)(uint64_t, uint64_t))v20[0])(a1, a2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
  if (!v14) {
    return 0;
  }
  uint64_t result = v12(a1, v11);
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v17 = v16;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v19 = ((uint64_t (*)(uint64_t, uint64_t))v20[0])(a1, a2);
  sub_1000317E8(v19, ObjectType, v17, (uint64_t)v21);
  swift_unknownObjectRelease();
  if (!v22)
  {
    sub_10001A918((uint64_t)v21, &qword_100127E98);
    return 0;
  }
  sub_10000AC7C(&qword_100127B28);
  sub_10000AC7C(&qword_1001284E8);
  if (swift_dynamicCast()) {
    return v20[1];
  }
  else {
    return 0;
  }
}

uint64_t ActiveTerminalEntity.latencyControlSelector.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 16))();
  if (result)
  {
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType();
    LODWORD(v4) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v4 + 40))(ObjectType, v4);
    swift_unknownObjectRelease();
    if (v4 == 32) {
      return 7;
    }
    else {
      return 0;
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveTerminalEntity.processTargetedInterrupt(attribute:controlSelector:channelNumber:)(AUASDCore::AUAInterruptAttribute attribute, Swift::UInt controlSelector, Swift::UInt channelNumber)
{
  sub_1000A0B7C(attribute, controlSelector, v3, v4);
}

uint64_t sub_10009F744(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  int v6 = a1;
  sub_10002E804(0xD00000000000001BLL, 0x80000001000E6050, 0xD00000000000002CLL, (void *)0x80000001000E6070, 0xD00000000000001ELL, 0x80000001000E5F40, 82);
  if (v6)
  {
    sub_10002E81C(0xD000000000000025, 0x80000001000E60A0, 0xD00000000000002CLL, (void *)0x80000001000E6070, 0xD00000000000001ELL, 0x80000001000E5F40, 83);
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v7 = 2;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0xE000000000000000;
    *(void *)(v7 + 24) = 0xD00000000000002CLL;
    *(void *)(v7 + 32) = 0x80000001000E6070;
    *(void *)(v7 + 40) = 0xD00000000000001ELL;
    *(void *)(v7 + 48) = 0x80000001000E5F40;
    *(void *)(v7 + 56) = 83;
    return swift_willThrow();
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 16);
    uint64_t v11 = v20[6];
    uint64_t result = v10(a2);
    if (result)
    {
      uint64_t v13 = v12;
      uint64_t ObjectType = swift_getObjectType();
      v20[3] = a2;
      v20[4] = v9;
      uint64_t v15 = sub_10002D9D4(v20);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v15, v11, a2);
      sub_100034428(v20, ObjectType, v13);
      uint64_t v17 = v16;
      swift_unknownObjectRelease();
      uint64_t result = sub_10001ABC4((uint64_t)v20);
      if (!v3)
      {
        if (v17)
        {
          uint64_t v18 = swift_allocObject();
          *(void *)(v18 + 16) = v17;
          id v19 = v17;
          AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(0xD00000000000002CLL, 0x80000001000E6070, 0xD00000000000001ELL, 0x80000001000E5F40, 87, (uint64_t)sub_1000A1350, v18);

          return swift_release();
        }
      }
    }
  }
  return result;
}

void sub_10009F9A0()
{
  sub_10002E804(0xD000000000000020, 0x80000001000E60D0, 0xD00000000000002CLL, (void *)0x80000001000E6070, 0xD00000000000001ELL, 0x80000001000E5F40, 90);
  AUAAudioDevice.publishStreamFormats()();
  if (v0)
  {
    sub_10002E81C(0xD00000000000001ALL, 0x80000001000E6100, 0xD00000000000002CLL, (void *)0x80000001000E6070, 0xD00000000000001ELL, 0x80000001000E5F40, 95);
    swift_errorRelease();
  }
}

uint64_t ActiveTerminalEntity.name.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 8))(&v18, a1, v4);
  uint64_t v5 = v19;
  uint64_t v6 = v20;
  sub_10001A974(&v18, v19);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  if (BYTE2(v7) == 255)
  {
    sub_10001ABC4((uint64_t)&v18);
  }
  else
  {
    int v8 = v7;
    sub_10001ABC4((uint64_t)&v18);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(a1, v4))
    {
      uint64_t v10 = v9;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(ObjectType, v10);
      swift_unknownObjectRelease();
      if (v12)
      {
        if (*(void *)&v12[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject])
        {
          unint64_t v13 = sub_1000C545C(v8 & 0x1FFFF);
          uint64_t v15 = v14;

          if (v15) {
            return v13;
          }
        }
        else
        {
        }
      }
    }
  }
  unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  if (v16 < 0x10000)
  {
    if ((unsigned __int16)v16 > 0x301u)
    {
      if ((unsigned __int16)v16 > 0x601u)
      {
        switch((unsigned __int16)v16)
        {
          case 0x602u:
            return 0xD000000000000020;
          case 0x603u:
            return 0xD000000000000017;
          case 0x605u:
            return 0xD000000000000018;
        }
      }
      else
      {
        if ((unsigned __int16)v16 == 770) {
          return 0x6E6F687064616548;
        }
        if ((unsigned __int16)v16 == 1027) {
          return 0x7072656B61657053;
        }
      }
    }
    else if ((unsigned __int16)v16 > 0x205u)
    {
      switch((unsigned __int16)v16)
      {
        case 0x206u:
          return 0xD00000000000001BLL;
        case 0x300u:
          return 0xD000000000000010;
        case 0x301u:
          return 0x72656B61657053;
      }
    }
    else
    {
      switch((unsigned __int16)v16)
      {
        case 0x101u:
          return 0x6572745320425355;
        case 0x200u:
          return 0x6E55207475706E49;
        case 0x201u:
          return 0x6F68706F7263694DLL;
      }
    }
    return 0xD000000000000015;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ActiveInputTerminal.staticInputTerminal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A0DC8(v1 + 32, a1);
}

uint64_t ActiveInputTerminal.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10009FFF4((uint64_t (*)(void))sub_10008CC68, a1);
}

uint64_t ActiveInputTerminal.staticTerminalEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10009FFF4((uint64_t (*)(void))sub_1000A0E84, a1);
}

uint64_t ActiveInputTerminal.terminalID.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t ActiveInputTerminal.streamingInterfaceNumber.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ActiveInputTerminal.terminalType.getter()
{
  return *(void *)(v0 + 136);
}

uint64_t ActiveInputTerminal.cluster.getter()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ActiveInputTerminal.clusterArray.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActiveInputTerminal.controls.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActiveInputTerminal.staticDataEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10009FFF4((uint64_t (*)(void))sub_1000A0ED8, a1);
}

uint64_t sub_10009FFF4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 40);
  char v5 = *(unsigned char *)(v2 + 48);
  uint64_t v6 = *(void *)(v2 + 56);
  __int16 v19 = *(_WORD *)(v2 + 64);
  char v7 = *(unsigned char *)(v2 + 66);
  uint64_t v17 = *(void *)(v2 + 72);
  uint64_t v18 = *(void *)(v2 + 32);
  uint64_t v16 = *(void *)(v2 + 80);
  __int16 v15 = *(_WORD *)(v2 + 88);
  uint64_t v8 = *(void *)(v2 + 96);
  uint64_t v9 = *(void *)(v2 + 104);
  unint64_t v10 = *(void *)(v2 + 112);
  uint64_t v11 = *(void *)(v2 + 120);
  uint64_t v12 = *(void *)(v2 + 128);
  a2[3] = (uint64_t)&type metadata for InputTerminal;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject();
  *a2 = v13;
  *(void *)(v13 + 16) = v18;
  *(void *)(v13 + 24) = v4;
  *(unsigned char *)(v13 + 32) = v5;
  *(void *)(v13 + 40) = v6;
  *(unsigned char *)(v13 + 50) = v7;
  *(_WORD *)(v13 + 48) = v19;
  *(void *)(v13 + 56) = v17;
  *(void *)(v13 + 64) = v16;
  *(_WORD *)(v13 + 72) = v15;
  *(void *)(v13 + 80) = v8;
  *(void *)(v13 + 88) = v9;
  *(void *)(v13 + 96) = v10;
  *(void *)(v13 + 104) = v11;
  *(void *)(v13 + 112) = v12;
  swift_bridgeObjectRetain();
  sub_1000540F0(v9, v10);
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A0114(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v9 = *(void *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 48) = v10;
  *(void *)(v4 + 128) = *(void *)(a2 + 96);
  long long v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 112) = v11;
  long long v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 80) = v12;
  if (*(void *)(a4 + 16))
  {
    sub_100054090(a2);
  }
  else
  {
    sub_100054090(a2);
    swift_bridgeObjectRelease();
    a4 = 0;
  }
  *(void *)(v4 + 144) = a3;
  *(void *)(v4 + 152) = a4;
  if (v9 == 257 || (uint64_t v13 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList]) == 0)
  {
    sub_1000A12B8(a2);
  }
  else
  {
    BOOL v14 = sub_10001925C(15, v13);
    sub_1000A12B8(a2);

    if (v14) {
      uint64_t v9 = 1026;
    }
  }
  *(void *)(v4 + 136) = v9;
  return v4;
}

uint64_t ActiveInputTerminal.deinit()
{
  sub_10001DEAC(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = *(void *)(v0 + 112);
  swift_bridgeObjectRelease();
  sub_1000541C0(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ActiveInputTerminal.__deallocating_deinit()
{
  sub_10001DEAC(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = *(void *)(v0 + 112);
  swift_bridgeObjectRelease();
  sub_1000541C0(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000A0304@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000A03DC((uint64_t (*)(void))sub_1000A0E84, a1);
}

uint64_t sub_1000A0324()
{
  return *(unsigned __int8 *)(*(void *)v0 + 48);
}

uint64_t sub_1000A0330()
{
  return *(void *)(*(void *)v0 + 72);
}

uint64_t sub_1000A033C()
{
  return *(void *)(*(void *)v0 + 136);
}

uint64_t sub_1000A034C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000A03DC((uint64_t (*)(void))sub_1000A0ED8, a1);
}

uint64_t sub_1000A0364()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000A03C4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000A03DC((uint64_t (*)(void))sub_10008CC68, a1);
}

uint64_t sub_1000A03DC@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 40);
  char v6 = *(unsigned char *)(*(void *)v2 + 48);
  uint64_t v7 = *(void *)(*(void *)v2 + 56);
  __int16 v20 = *(_WORD *)(*(void *)v2 + 64);
  char v8 = *(unsigned char *)(*(void *)v2 + 66);
  uint64_t v18 = *(void *)(*(void *)v2 + 72);
  uint64_t v19 = *(void *)(*(void *)v2 + 32);
  uint64_t v17 = *(void *)(*(void *)v2 + 80);
  __int16 v16 = *(_WORD *)(*(void *)v2 + 88);
  uint64_t v9 = *(void *)(*(void *)v2 + 96);
  uint64_t v10 = v4[13];
  unint64_t v11 = v4[14];
  uint64_t v12 = v4[15];
  uint64_t v13 = v4[16];
  a2[3] = (uint64_t)&type metadata for InputTerminal;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject();
  *a2 = v14;
  *(void *)(v14 + 16) = v19;
  *(void *)(v14 + 24) = v5;
  *(unsigned char *)(v14 + 32) = v6;
  *(void *)(v14 + 40) = v7;
  *(unsigned char *)(v14 + 50) = v8;
  *(_WORD *)(v14 + 48) = v20;
  *(void *)(v14 + 56) = v18;
  *(void *)(v14 + 64) = v17;
  *(_WORD *)(v14 + 72) = v16;
  *(void *)(v14 + 80) = v9;
  *(void *)(v14 + 88) = v10;
  *(void *)(v14 + 96) = v11;
  *(void *)(v14 + 104) = v12;
  *(void *)(v14 + 112) = v13;
  swift_bridgeObjectRetain();
  sub_1000540F0(v10, v11);
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A0508(uint64_t a1)
{
  return ActiveTerminalEntity.latencyControlSelector.getter(a1, (uint64_t)&protocol witness table for ActiveInputTerminal);
}

uint64_t sub_1000A0514(uint64_t a1)
{
  return ActiveTerminalEntity.name.getter(a1, (uint64_t)&protocol witness table for ActiveInputTerminal);
}

uint64_t sub_1000A0520(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A0B7C(a1, a2, a4, (uint64_t)&protocol witness table for ActiveInputTerminal);
}

uint64_t ActiveOutputTerminal.staticOutputTerminal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A0F2C(v1 + 32, a1);
}

uint64_t ActiveOutputTerminal.controls.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActiveOutputTerminal.nameStringIndex.getter()
{
  return *(unsigned __int16 *)(v0 + 64) | (*(unsigned __int8 *)(v0 + 66) << 16);
}

uint64_t ActiveOutputTerminal.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000A0598((uint64_t (*)(void))sub_10008CB90, a1);
}

uint64_t ActiveOutputTerminal.staticTerminalEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000A0598((uint64_t (*)(void))sub_1000A0FC8, a1);
}

uint64_t sub_1000A0598@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v5 = *(void *)(v2 + 40);
  char v6 = *(unsigned char *)(v2 + 48);
  uint64_t v7 = *(void *)(v2 + 56);
  __int16 v18 = *(_WORD *)(v2 + 64);
  char v8 = *(unsigned char *)(v2 + 66);
  uint64_t v9 = *(void *)(v2 + 72);
  char v10 = *(unsigned char *)(v2 + 80);
  uint64_t v11 = *(void *)(v2 + 96);
  uint64_t v16 = *(void *)(v2 + 104);
  uint64_t v17 = *(void *)(v2 + 88);
  __int16 v15 = *(_WORD *)(v2 + 112);
  uint64_t v12 = *(void *)(v2 + 120);
  a2[3] = (uint64_t)&type metadata for OutputTerminal;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject();
  *a2 = v13;
  *(void *)(v13 + 16) = v4;
  *(void *)(v13 + 24) = v5;
  *(unsigned char *)(v13 + 32) = v6;
  *(void *)(v13 + 40) = v7;
  *(unsigned char *)(v13 + 50) = v8;
  *(_WORD *)(v13 + 48) = v18;
  *(void *)(v13 + 56) = v9;
  *(unsigned char *)(v13 + 64) = v10;
  *(void *)(v13 + 72) = v17;
  *(void *)(v13 + 80) = v11;
  *(void *)(v13 + 88) = v16;
  *(_WORD *)(v13 + 96) = v15;
  *(void *)(v13 + 104) = v12;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t ActiveOutputTerminal.cluster.getter()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (!result)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
LABEL_5:
    sub_1000A101C((uint64_t)v14, (uint64_t)v11);
    if (v12)
    {
      sub_10000AC7C(&qword_100127B28);
      sub_10000AC7C(&qword_100127B30);
      if (swift_dynamicCast())
      {
        if (*((void *)&v9 + 1))
        {
          sub_10000CF6C(&v8, (uint64_t)v11);
          uint64_t v5 = v12;
          uint64_t v6 = v13;
          sub_10001A974(v11, v12);
          uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
          sub_10001A918((uint64_t)v14, &qword_100127E98);
          sub_10001ABC4((uint64_t)v11);
          return v7;
        }
      }
      else
      {
        uint64_t v10 = 0;
        long long v8 = 0u;
        long long v9 = 0u;
      }
    }
    else
    {
      sub_10001A918((uint64_t)v11, &qword_100127E98);
      long long v8 = 0u;
      long long v9 = 0u;
      uint64_t v10 = 0;
    }
    sub_10001A918((uint64_t)v14, &qword_100127E98);
    sub_10001A918((uint64_t)&v8, &qword_100127B38);
    return 0;
  }
  if ((*(unsigned char *)(v0 + 80) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t ObjectType = swift_getObjectType();
    sub_1000317E8(v3, ObjectType, v2, (uint64_t)v14);
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A0858(char *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 24) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v7 = *(void *)a2;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 48) = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v3 + 112) = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v3 + 80) = v10;
  if (*(void *)(a3 + 16))
  {
    sub_100053FF8(a2);
  }
  else
  {
    sub_100053FF8(a2);
    swift_bridgeObjectRelease();
    a3 = 0;
  }
  *(void *)(v3 + 128) = a3;
  sub_10006D634(a2);
  if (v7 == 257 || (uint64_t v11 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList]) == 0)
  {
  }
  else
  {
    BOOL v12 = sub_10001925C(15, v11);

    if (v12) {
      uint64_t v7 = 1026;
    }
  }
  *(void *)(v3 + 136) = v7;
  return v3;
}

uint64_t ActiveOutputTerminal.deinit()
{
  sub_10001DEAC(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ActiveOutputTerminal.__deallocating_deinit()
{
  sub_10001DEAC(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000A09D4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000A0A34((uint64_t (*)(void))sub_1000A0FC8, a1);
}

uint64_t sub_1000A09EC()
{
  return *(void *)(*(void *)v0 + 88);
}

uint64_t sub_1000A09F8()
{
  return ActiveOutputTerminal.cluster.getter();
}

uint64_t sub_1000A0A1C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000A0A34((uint64_t (*)(void))sub_10008CB90, a1);
}

uint64_t sub_1000A0A34@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 32);
  uint64_t v6 = *(void *)(*v2 + 40);
  char v7 = *(unsigned char *)(*v2 + 48);
  uint64_t v8 = *(void *)(*v2 + 56);
  __int16 v20 = *(_WORD *)(*v2 + 64);
  char v9 = *(unsigned char *)(*v2 + 66);
  uint64_t v10 = *(void *)(*v2 + 72);
  char v11 = *(unsigned char *)(*v2 + 80);
  uint64_t v12 = *(void *)(*v2 + 88);
  uint64_t v13 = *(void *)(*v2 + 96);
  uint64_t v18 = *(void *)(v4 + 104);
  uint64_t v19 = v12;
  __int16 v17 = *(_WORD *)(v4 + 112);
  uint64_t v14 = *(void *)(v4 + 120);
  a2[3] = (uint64_t)&type metadata for OutputTerminal;
  a2[4] = a1();
  uint64_t v15 = swift_allocObject();
  *a2 = v15;
  *(void *)(v15 + 16) = v5;
  *(void *)(v15 + 24) = v6;
  *(unsigned char *)(v15 + 32) = v7;
  *(void *)(v15 + 40) = v8;
  *(unsigned char *)(v15 + 50) = v9;
  *(_WORD *)(v15 + 48) = v20;
  *(void *)(v15 + 56) = v10;
  *(unsigned char *)(v15 + 64) = v11;
  *(void *)(v15 + 72) = v19;
  *(void *)(v15 + 80) = v13;
  *(void *)(v15 + 88) = v18;
  *(_WORD *)(v15 + 96) = v17;
  *(void *)(v15 + 104) = v14;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A0B40(uint64_t a1)
{
  return ActiveTerminalEntity.latencyControlSelector.getter(a1, (uint64_t)&protocol witness table for ActiveOutputTerminal);
}

uint64_t sub_1000A0B4C(uint64_t a1)
{
  return ActiveTerminalEntity.name.getter(a1, (uint64_t)&protocol witness table for ActiveOutputTerminal);
}

uint64_t sub_1000A0B58(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A0B7C(a1, a2, a4, (uint64_t)&protocol witness table for ActiveOutputTerminal);
}

uint64_t sub_1000A0B7C(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!(*(uint64_t (**)(uint64_t))(*(void *)(a4 + 8) + 16))(a3)
    || (uint64_t v9 = v8,
        uint64_t ObjectType = swift_getObjectType(),
        char v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 200))(a2, ObjectType, v9),
        swift_unknownObjectRelease(),
        v11 == 7))
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 2;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD000000000000042;
    *(void *)(v13 + 32) = 0x80000001000E2C80;
    *(void *)(v13 + 40) = 0xD00000000000001ELL;
    *(void *)(v13 + 48) = 0x80000001000E5F40;
    uint64_t v14 = 68;
  }
  else
  {
    if (v11 == 1) {
      return sub_10009F744(a1, a3, a4);
    }
    _StringGuts.grow(_:)(34);
    v15._countAndFlagsBits = 0xD000000000000020;
    v15._object = (void *)0x80000001000E6020;
    String.append(_:)(v15);
    _print_unlocked<A, B>(_:_:)();
    sub_10002E804(0, 0xE000000000000000, 0xD000000000000042, (void *)0x80000001000E2C80, 0xD00000000000001ELL, 0x80000001000E5F40, 75);
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 2;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD000000000000042;
    *(void *)(v13 + 32) = 0x80000001000E2C80;
    *(void *)(v13 + 40) = 0xD00000000000001ELL;
    *(void *)(v13 + 48) = 0x80000001000E5F40;
    uint64_t v14 = 76;
  }
  *(void *)(v13 + 56) = v14;
  return swift_willThrow();
}

uint64_t sub_1000A0DC8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000A0E24()
{
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 96);
  if (v1 >> 60 != 15) {
    sub_100038688(*(void *)(v0 + 88), v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

unint64_t sub_1000A0E84()
{
  unint64_t result = qword_100129A80;
  if (!qword_100129A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129A80);
  }
  return result;
}

unint64_t sub_1000A0ED8()
{
  unint64_t result = qword_100129A88;
  if (!qword_100129A88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129A88);
  }
  return result;
}

uint64_t sub_1000A0F2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000A0F88()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 112, 7);
}

unint64_t sub_1000A0FC8()
{
  unint64_t result = qword_100129A90;
  if (!qword_100129A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129A90);
  }
  return result;
}

uint64_t sub_1000A101C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AC7C(&qword_100127E98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A1088()
{
  unint64_t result = qword_100129A98;
  if (!qword_100129A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129A98);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AUATerminalControlSelector(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AUATerminalControlSelector(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A1238);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AUATerminalControlSelector()
{
  return &type metadata for AUATerminalControlSelector;
}

uint64_t type metadata accessor for ActiveInputTerminal()
{
  return self;
}

uint64_t type metadata accessor for ActiveOutputTerminal()
{
  return self;
}

uint64_t sub_1000A12B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  unint64_t v3 = *(void *)(a1 + 80);
  swift_bridgeObjectRelease();
  sub_1000541C0(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A1318()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000A1350()
{
}

id sub_1000A1384()
{
  return sub_1000A175C(type metadata accessor for AUACustomNumberProperty);
}

uint64_t type metadata accessor for AUACustomNumberProperty()
{
  return self;
}

id sub_1000A13EC()
{
  return sub_1000A175C(type metadata accessor for AUACustomDictionaryProperty);
}

uint64_t type metadata accessor for AUACustomDictionaryProperty()
{
  return self;
}

id sub_1000A1454()
{
  return sub_1000A175C(type metadata accessor for AUACustomStringProperty);
}

uint64_t type metadata accessor for AUACustomStringProperty()
{
  return self;
}

id sub_1000A1504()
{
  return sub_1000A175C(type metadata accessor for AUASidetoneSubstituteEnable);
}

uint64_t type metadata accessor for AUASidetoneSubstituteEnable()
{
  return self;
}

uint64_t sub_1000A154C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, void **a6, uint64_t a7, void *a8)
{
  *a5 = 8;
  int v8 = *(void **)&a1[*a8];
  uint64_t v9 = *a6;
  *a6 = v8;
  uint64_t v10 = a1;
  id v11 = v8;

  return 1;
}

id sub_1000A15B0()
{
  return sub_1000A175C(type metadata accessor for AUASidetoneSubstituteProperty);
}

uint64_t type metadata accessor for AUASidetoneSubstituteProperty()
{
  return self;
}

void sub_1000A1708(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1000A1744()
{
  return sub_1000A175C(type metadata accessor for AUABooleanProperty);
}

id sub_1000A175C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for AUABooleanProperty()
{
  return self;
}

uint64_t sub_1000A17B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  objc_super v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  objc_super v3 = sub_100058C0C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A1900(unint64_t a1)
{
  return sub_1000A1B2C(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000A6504);
}

uint64_t sub_1000A1918(unint64_t a1)
{
  return sub_1000A1B2C(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000A6724);
}

uint64_t sub_1000A1930(unint64_t a1)
{
  return sub_1000A1B2C(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000A6934);
}

uint64_t sub_1000A1948(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_1000A6B54(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_1000A1B14(unint64_t a1)
{
  return sub_1000A1B2C(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000A6D74);
}

uint64_t sub_1000A1B2C(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_1000A1D00(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_100059460(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  sub_10000AC7C(&qword_100127EC0);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A1E78(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_100059474(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[26 * v9 + 4];
  if (a1 + 32 < v10 + 208 * v8 && v10 < a1 + 32 + 208 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A1FD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100058F88(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (char *)v3 + 3 * v8 + 32;
  if (a1 + 32 < (unint64_t)&v9[3 * v2] && (unint64_t)v9 < a1 + 32 + 3 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 3 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A2124(uint64_t a1)
{
  return sub_1000A2154(a1, (uint64_t (*)(void))sub_100059914);
}

uint64_t sub_1000A213C(uint64_t a1)
{
  return sub_1000A2154(a1, (uint64_t (*)(void))sub_100059FD4);
}

uint64_t sub_1000A2154(uint64_t a1, uint64_t (*a2)(void))
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v5 + v3 <= *(void *)(v4 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v4 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v3) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v4 + 16);
  if ((*(void *)(v4 + 24) >> 1) - v8 < v3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = (void *)(v4 + v8 + 32);
  if (a1 + 32 < (unint64_t)v9 + v3 && (unint64_t)v9 < a1 + 32 + v3) {
    goto LABEL_21;
  }
  memcpy(v9, (const void *)(a1 + 32), v3);
  if (!v3)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v2 = v4;
    return result;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v11, v3);
  uint64_t v13 = v11 + v3;
  if (!v12)
  {
    *(void *)(v4 + 16) = v13;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000A22AC()
{
  qword_10012B298 = (uint64_t)&off_1001121A8;
}

uint64_t ActiveFeatureUnit.staticFeatureUnit.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A22CC(v1 + 32, a1);
}

uint64_t sub_1000A22CC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ActiveFeatureUnit.unitControls.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActiveFeatureUnit.volumeOverrides.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActiveFeatureUnit.volumeOverrides.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ActiveFeatureUnit.volumeOverrides.modify())()
{
  return j__swift_endAccess;
}

uint64_t ActiveFeatureUnit.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000A247C((uint64_t (*)(void))sub_10008CAF0, a1);
}

uint64_t sub_1000A241C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t ActiveFeatureUnit.staticDataEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000A247C((uint64_t (*)(void))sub_1000A2568, a1);
}

uint64_t sub_1000A247C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 32);
  char v5 = *(unsigned char *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  __int16 v15 = *(_WORD *)(v2 + 56);
  char v7 = *(unsigned char *)(v2 + 58);
  uint64_t v8 = *(void *)(v2 + 64);
  __int16 v9 = *(_WORD *)(v2 + 72);
  uint64_t v10 = *(void *)(v2 + 80);
  uint64_t v11 = *(void *)(v2 + 88);
  uint64_t v12 = *(void *)(v2 + 96);
  a2[3] = (uint64_t)&type metadata for FeatureUnit;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject();
  *a2 = v13;
  *(void *)(v13 + 16) = v4;
  *(unsigned char *)(v13 + 24) = v5;
  *(void *)(v13 + 32) = v6;
  *(unsigned char *)(v13 + 42) = v7;
  *(_WORD *)(v13 + 40) = v15;
  *(void *)(v13 + 48) = v8;
  *(_WORD *)(v13 + 56) = v9;
  *(void *)(v13 + 64) = v10;
  *(void *)(v13 + 72) = v11;
  *(void *)(v13 + 80) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

unint64_t sub_1000A2568()
{
  unint64_t result = qword_100129DC8;
  if (!qword_100129DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129DC8);
  }
  return result;
}

uint64_t ActiveStreamingAltInterface.bitResolution.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t ActiveFeatureUnit.sourceID.getter()
{
  if (*(unsigned char *)(v0 + 40)) {
    return 0;
  }
  else {
    return *(void *)(v0 + 32);
  }
}

uint64_t MixerUnit.exceptionList.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActiveStreamingAltInterface.endpoints.getter()
{
  return swift_bridgeObjectRetain();
}

void ActiveFeatureUnit.start(on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  if (!v6) {
    return;
  }
  char v7 = (char *)v6;
  if (qword_100126928 != -1) {
LABEL_31:
  }
    swift_once();
  uint64_t v8 = *(void *)(qword_10012B298 + 16);
  if (!v8)
  {

    return;
  }
  uint64_t v9 = OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor;
  uint64_t v10 = (void *)(v3 + 112);
  uint64_t v11 = (char *)(qword_10012B298 + 32);
  swift_bridgeObjectRetain();
  int v29 = (void *)(v3 + 112);
  uint64_t v30 = v3;
  while (1)
  {
    uint64_t v12 = *(unsigned __int16 **)&v7[v9];
    if (word_1000ECA72[*v11] != v12[4] || word_1000ECAB8[v11[1]] != v12[5]) {
      goto LABEL_7;
    }
    unsigned int v13 = v12[6];
    BOOL v14 = v13 >= *((unsigned __int16 *)v11 + 1) && *((unsigned __int16 *)v11 + 2) >= v13;
    if (!v14 || *(void *)(v3 + 48) != v11[6]) {
      goto LABEL_7;
    }
    uint64_t v3 = *((void *)v11 + 1);
    __int16 v31 = *((_WORD *)v11 + 8);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = (void *)*v10;
    unint64_t v32 = (void *)*v10;
    *uint64_t v10 = 0x8000000000000000;
    unint64_t v18 = sub_100019A14(v3);
    uint64_t v19 = v16[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20))
    {
      __break(1u);
      goto LABEL_31;
    }
    char v22 = v17;
    if (v16[3] < v21) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      int v25 = v32;
      if ((v17 & 1) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      sub_1000A5FF8();
      int v25 = v32;
      if ((v22 & 1) == 0) {
        goto LABEL_23;
      }
    }
LABEL_5:
    *(_WORD *)(v25[7] + 2 * v18) = v31;
LABEL_6:
    uint64_t v10 = v29;
    *int v29 = v25;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v3 = v30;
LABEL_7:
    v11 += 24;
    if (!--v8)
    {

      swift_bridgeObjectRelease();
      return;
    }
  }
  sub_1000A560C(v21, isUniquelyReferenced_nonNull_native);
  unint64_t v23 = sub_100019A14(v3);
  if ((v22 & 1) != (v24 & 1)) {
    goto LABEL_33;
  }
  unint64_t v18 = v23;
  int v25 = v32;
  if (v22) {
    goto LABEL_5;
  }
LABEL_23:
  v25[(v18 >> 6) + 8] |= 1 << v18;
  *(void *)(v25[6] + 8 * v18) = v3;
  *(_WORD *)(v25[7] + 2 * v18) = v31;
  uint64_t v26 = v25[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    v25[2] = v28;
    goto LABEL_6;
  }
  __break(1u);
LABEL_33:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void ActiveFeatureUnit.audioControlsAndProperties(scope:for:)(unsigned int a1, void *a2)
{
  if (a1 != 1735159650)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
    uint64_t v49 = _swiftEmptyArrayStorage;
    uint64_t v48 = _swiftEmptyArrayStorage;
    uint64_t v4 = *(void *)(v2 + 80);
    uint64_t v44 = _swiftEmptyArrayStorage;
    uint64_t v40 = v2;
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      for (unint64_t i = 0; i != v5; ++i)
      {
        swift_retain();
        id v9 = a2;
        uint64_t v10 = swift_bridgeObjectRetain();
        uint64_t v11 = sub_1000A711C(v10, v40, a1, &v49, i, v9, &v48);
        swift_bridgeObjectRelease();
        swift_release();

        sub_1000A1B2C((unint64_t)v11, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000A6934);
      }
      swift_bridgeObjectRelease();
      uint64_t v12 = v49;
      uint64_t v3 = v48;
    }
    else
    {
      uint64_t v12 = _swiftEmptyArrayStorage;
    }
    if (!v12[2] || !v3[2])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v13 = 0x6E776F6E6B6E55;
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t v46 = 0xD00000000000001ELL;
    uint64_t v47 = 0x80000001000E6410;
    swift_beginAccess();
    if (swift_unknownObjectWeakLoadStrong()
      && (uint64_t v14 = *(void *)(v40 + 24),
          uint64_t ObjectType = swift_getObjectType(),
          uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(ObjectType, v14),
          swift_unknownObjectRelease(),
          v16))
    {
      uint64_t v13 = *(void *)&v16[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName];
      char v17 = *(void **)&v16[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName + 8];
      swift_bridgeObjectRetain();
    }
    else
    {
      char v17 = (void *)0xE700000000000000;
    }
    v18._countAndFlagsBits = v13;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    sub_10002E804(v46, v47, 0xD000000000000026, (void *)0x80000001000E2450, 0xD000000000000021, 0x80000001000E6430, 171);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    BOOL v20 = (objc_class *)type metadata accessor for AUASidetoneSubstituteProperty();
    uint64_t v21 = (char *)objc_allocWithZone(v20);
    *(void *)&v21[OBJC_IVAR____TtC9AUASDCore29AUASidetoneSubstituteProperty_channels] = isa;
    id v22 = objc_allocWithZone((Class)ASDPropertyAddress);
    unint64_t v23 = isa;
    id v24 = [v22 initWithSelector:1634952563 scope:1886679669 element:0];
    v43.receiver = v21;
    v43.super_class = v20;
    id v25 = objc_msgSendSuper2(&v43, "initWithAddress:propertyDataType:qualifierDataType:", v24, 1886155636, 0);

    if (v25)
    {
      id v26 = v25;
      [v26 setSettable:0];
      id v27 = v26;

      swift_bridgeObjectRetain();
      Class v28 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      int v29 = (char *)objc_allocWithZone(v20);
      *(void *)&v29[OBJC_IVAR____TtC9AUASDCore29AUASidetoneSubstituteProperty_channels] = v28;
      id v30 = objc_allocWithZone((Class)ASDPropertyAddress);
      __int16 v31 = v28;
      id v32 = [v30 initWithSelector:1634956915 scope:1886679669 element:0];
      v42.receiver = v29;
      v42.super_class = v20;
      id v33 = objc_msgSendSuper2(&v42, "initWithAddress:propertyDataType:qualifierDataType:", v32, 1886155636, 0);

      if (v33)
      {
        id v34 = v33;
        [v34 setSettable:0];

        uint64_t v35 = (objc_class *)type metadata accessor for AUASidetoneSubstituteEnable();
        id v36 = objc_allocWithZone(v35);
        id v37 = [objc_allocWithZone((Class)ASDPropertyAddress) initWithSelector:1634956133 scope:1886679669 element:0];
        v41.receiver = v36;
        v41.super_class = v35;
        id v38 = objc_msgSendSuper2(&v41, "initWithAddress:propertyDataType:qualifierDataType:", v37, 1886155636, 0);

        if (v38)
        {
          [v38 setSettable:0];
          sub_10000AC7C(&qword_100127ED0);
          uint64_t v39 = swift_allocObject();
          *(_OWORD *)(v39 + 16) = xmmword_1000EC940;
          *(void *)(v39 + 32) = v27;
          *(void *)(v39 + 40) = v34;
          *(void *)(v39 + 48) = v38;
          uint64_t v46 = v39;
          specialized Array._endMutation()();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
        goto LABEL_20;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
}

uint64_t sub_1000A2E28@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, void **a4@<X3>, unint64_t a5@<X4>, void *a6@<X5>, void **a7@<X6>, uint64_t *a8@<X8>)
{
  int v12 = *((unsigned __int8 *)a1 + 2);
  int v13 = *a1;
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v14 = *(void *)(a2 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(ObjectType, v14);
    swift_unknownObjectRelease();
    if (v16)
    {
      uint64_t v17 = *(void *)&v16[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
      if (v17)
      {
        BOOL v18 = sub_10001925C(20, v17);

        if (v18) {
          goto LABEL_18;
        }
      }
      else
      {
      }
    }
  }
  unsigned int v19 = v13 | (v12 << 16);
  int v20 = (v19 >> 18) & 0x3C | (v13 >> 6);
  if (v20 == 7)
  {
    if (a3 == 1886679669)
    {
      id v30 = *a7;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a7 = v30;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        id v30 = sub_10005A314(0, v30[2] + 1, 1, v30);
        *a7 = v30;
      }
      unint64_t v33 = v30[2];
      unint64_t v32 = v30[3];
      if (v33 >= v32 >> 1) {
        id v30 = sub_10005A314((void *)(v32 > 1), v33 + 1, 1, v30);
      }
      v30[2] = v33 + 1;
      v30[v33 + 4] = a5;
      *a7 = v30;
    }
    if ((a5 & 0x8000000000000000) == 0)
    {
      id v34 = objc_allocWithZone((Class)type metadata accessor for AUAGainControl());
      swift_retain();
      id v35 = a6;
      uint64_t result = sub_1000A4700(a2, a5, v19 & 0xFFFFFF, a3, a6);
      if (!v46)
      {
LABEL_32:
        int v29 = a8;
        goto LABEL_33;
      }
LABEL_27:
      uint64_t v36 = 0x6E776F6E6B6E55;
      _StringGuts.grow(_:)(44);
      if (swift_unknownObjectWeakLoadStrong()
        && (uint64_t v37 = *(void *)(a2 + 24),
            uint64_t v38 = swift_getObjectType(),
            uint64_t v39 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v38, v37),
            swift_unknownObjectRelease(),
            v39))
      {
        uint64_t v36 = *(void *)&v39[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName];
        uint64_t v40 = *(void **)&v39[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName + 8];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v40 = (void *)0xE700000000000000;
      }
      v41._countAndFlagsBits = v36;
      v41._object = v40;
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._countAndFlagsBits = 0x20726F727245203ALL;
      v42._object = (void *)0xE800000000000000;
      String.append(_:)(v42);
      sub_10000AC7C(&qword_100127400);
      _print_unlocked<A, B>(_:_:)();
      v43._object = (void *)0x80000001000E6790;
      v43._countAndFlagsBits = 0xD00000000000001ELL;
      String.append(_:)(v43);
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      sub_10002E81C(0, 0xE000000000000000, 0xD000000000000026, (void *)0x80000001000E2450, 0xD000000000000021, 0x80000001000E6430, 164);
      swift_errorRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      goto LABEL_32;
    }
  }
  else
  {
    if (v20 != 6)
    {
LABEL_18:
      uint64_t result = 0;
      int v29 = a8;
LABEL_33:
      *int v29 = result;
      return result;
    }
    unint64_t v21 = a5;
    if (a3 == 1886679669)
    {
      id v22 = *a4;
      char v23 = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v22;
      if ((v23 & 1) == 0)
      {
        id v22 = sub_10005A314(0, v22[2] + 1, 1, v22);
        *a4 = v22;
      }
      unint64_t v25 = v22[2];
      unint64_t v24 = v22[3];
      if (v25 >= v24 >> 1) {
        id v22 = sub_10005A314((void *)(v24 > 1), v25 + 1, 1, v22);
      }
      v22[2] = v25 + 1;
      v22[v25 + 4] = v21;
      *a4 = v22;
    }
    if ((v21 & 0x8000000000000000) == 0)
    {
      id v26 = objc_allocWithZone((Class)type metadata accessor for AUAMuteControl());
      swift_retain();
      id v27 = a6;
      uint64_t result = sub_1000A41C4(a2, v21, v19 & 0xFFFFFF, a3, a6);
      if (!v46) {
        goto LABEL_32;
      }
      goto LABEL_27;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ActiveFeatureUnit.latencyControlSelector.getter()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t ObjectType = swift_getObjectType();
    BOOL v4 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2) == 32;
    swift_unknownObjectRelease();
    return (16 * v4);
  }
  return result;
}

unint64_t sub_1000A3384(int a1, uint64_t a2)
{
  uint64_t v4 = v2;
  swift_beginAccess();
  if (!swift_unknownObjectWeakLoadStrong()) {
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  id v9 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
  swift_unknownObjectRelease();
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)&v9[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v10) {
    sub_10001925C(20, v10);
  }

  if ((LockDelay.units.getter(a1) & 1) == 0)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v18 = 1;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 0xE000000000000000;
    *(void *)(v18 + 24) = 0xD000000000000021;
    *(void *)(v18 + 32) = 0x80000001000E6760;
    *(void *)(v18 + 40) = 0xD000000000000021;
    *(void *)(v18 + 48) = 0x80000001000E6430;
    *(void *)(v18 + 56) = 223;
    return swift_willThrow();
  }
  else
  {
LABEL_6:
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v12 = *(void *)(v4 + 24);
      uint64_t v13 = swift_getObjectType();
      v19[3] = type metadata accessor for ActiveFeatureUnit();
      v19[4] = &protocol witness table for ActiveFeatureUnit;
      v19[0] = v4;
      swift_retain();
      sub_100032B3C(a1 & 0xFFFFFF, (uint64_t)v19, a2, v13, v12);
      unsigned int v15 = v14;
      swift_unknownObjectRelease();
      unint64_t result = sub_10001ABC4((uint64_t)v19);
      if (v3) {
        return result;
      }
      uint64_t v17 = v15;
    }
    else
    {
      uint64_t v17 = 0;
    }
    LOBYTE(v19[0]) = Strong == 0;
    return v17 | ((unint64_t)(Strong == 0) << 32);
  }
}

void *sub_1000A356C(int a1, void *a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  if (!swift_unknownObjectWeakLoadStrong()) {
    goto LABEL_13;
  }
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(ObjectType, v6);
  swift_unknownObjectRelease();
  if (!v8) {
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)&v8[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v9) {
    sub_10001925C(20, v9);
  }

  if ((LockDelay.units.getter(a1) & 1) == 0)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v12 = 1;
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0xE000000000000000;
    *(void *)(v12 + 24) = 0xD000000000000023;
    *(void *)(v12 + 32) = 0x80000001000E6730;
    *(void *)(v12 + 40) = 0xD000000000000021;
    *(void *)(v12 + 48) = 0x80000001000E6430;
    *(void *)(v12 + 56) = 236;
    swift_willThrow();
  }
  else
  {
LABEL_13:
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v10 = *(void *)(v3 + 24);
      uint64_t v11 = swift_getObjectType();
      v14[3] = type metadata accessor for ActiveFeatureUnit();
      v14[4] = &protocol witness table for ActiveFeatureUnit;
      v14[0] = v3;
      swift_retain();
      a2 = sub_100033258(a1 & 0xFFFFFF, (uint64_t)v14, (uint64_t)a2, v11, v10);
      swift_unknownObjectRelease();
      sub_10001ABC4((uint64_t)v14);
    }
    else
    {
      return 0;
    }
  }
  return a2;
}

BOOL sub_1000A3738(int a1, uint64_t a2)
{
  uint64_t v4 = v2;
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v7 = *(void *)(v2 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
    swift_unknownObjectRelease();
    if (v9)
    {
      uint64_t v10 = *(void *)&v9[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
      if (v10) {
        sub_10001925C(20, v10);
      }

      if ((LockDelay.units.getter(a1) & 1) == 0)
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v14 = 1;
        *(void *)(v14 + 8) = 0;
        *(void *)(v14 + 16) = 0xE000000000000000;
        *(void *)(v14 + 24) = 0xD000000000000021;
        *(void *)(v14 + 32) = 0x80000001000E6700;
        *(void *)(v14 + 40) = 0xD000000000000021;
        *(void *)(v14 + 48) = 0x80000001000E6430;
        uint64_t v15 = 249;
        goto LABEL_13;
      }
    }
  }
  if (!swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v19 = 0;
    memset(v18, 0, sizeof(v18));
    sub_10001A918((uint64_t)v18, &qword_100128040);
LABEL_11:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v14 = 1;
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0xE000000000000000;
    *(void *)(v14 + 24) = 0xD000000000000021;
    *(void *)(v14 + 32) = 0x80000001000E6700;
    *(void *)(v14 + 40) = 0xD000000000000021;
    *(void *)(v14 + 48) = 0x80000001000E6430;
    uint64_t v15 = 257;
LABEL_13:
    *(void *)(v14 + 56) = v15;
    swift_willThrow();
    return v13;
  }
  uint64_t v11 = *(void *)(v4 + 24);
  uint64_t v12 = swift_getObjectType();
  v17[3] = type metadata accessor for ActiveFeatureUnit();
  v17[4] = &protocol witness table for ActiveFeatureUnit;
  v17[0] = v4;
  swift_retain();
  ActiveFunction.getRawCur(forControl:onEntity:onChannel:)(a1 & 0xFFFFFF, (uint64_t)v17, a2, v12, v11, (uint64_t)v18);
  swift_unknownObjectRelease();
  sub_10001ABC4((uint64_t)v17);
  if (!v3)
  {
    sub_10000AC7C(&qword_100127EB8);
    if (swift_dynamicCast()) {
      return LOBYTE(v17[0]) != 0;
    }
    goto LABEL_11;
  }
  return v13;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveFeatureUnit.processTargetedInterrupt(attribute:controlSelector:channelNumber:)(AUASDCore::AUAInterruptAttribute attribute, Swift::UInt controlSelector, Swift::UInt channelNumber)
{
  if (attribute)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v5 = 2;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0xE000000000000000;
    *(void *)(v5 + 24) = 0xD000000000000042;
    *(void *)(v5 + 32) = 0x80000001000E2C80;
    *(void *)(v5 + 40) = 0xD000000000000021;
    *(void *)(v5 + 48) = 0x80000001000E6430;
    uint64_t v6 = 264;
LABEL_17:
    *(void *)(v5 + 56) = v6;
    swift_willThrow();
    return;
  }
  uint64_t v7 = v3;
  swift_beginAccess();
  if (!swift_unknownObjectWeakLoadStrong()) {
    goto LABEL_12;
  }
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t ObjectType = swift_getObjectType();
  char v12 = (*(uint64_t (**)(Swift::UInt, uint64_t, uint64_t))(v10 + 216))(controlSelector, ObjectType, v10);
  swift_unknownObjectRelease();
  if (v12 == 1)
  {
    if (!swift_unknownObjectWeakLoadStrong()) {
      return;
    }
    uint64_t v22 = *(void *)(v7 + 24);
    uint64_t v23 = swift_getObjectType();
    uint64_t v24 = *(void *)(v7 + 48);
    uint64_t v25 = type metadata accessor for AUAGainControl();
    id v26 = &off_10011AC48;
    goto LABEL_21;
  }
  if (v12)
  {
LABEL_12:
    id v27 = (void *)0xEE00656369766544;
    uint64_t v28 = 0x206E776F6E6B6E55;
    uint64_t v41 = 0;
    uint64_t v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v29 = *(void *)(v7 + 24);
      uint64_t v30 = swift_getObjectType();
      __int16 v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(v30, v29);
      swift_unknownObjectRelease();
      if (v31)
      {
        id v32 = objc_msgSend(v31, "boxName", v41, v42);

        if (v32)
        {
          uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v27 = v33;
        }
      }
    }
    v34._countAndFlagsBits = v28;
    v34._object = v27;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 0xD000000000000019;
    v35._object = (void *)0x80000001000E6460;
    String.append(_:)(v35);
    sub_10002E804(v41, v42, 0xD000000000000042, (void *)0x80000001000E2C80, 0xD000000000000021, 0x80000001000E6430, 275);
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v5 = 2;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0xE000000000000000;
    *(void *)(v5 + 24) = 0xD000000000000042;
    *(void *)(v5 + 32) = 0x80000001000E2C80;
    *(void *)(v5 + 40) = 0xD000000000000021;
    *(void *)(v5 + 48) = 0x80000001000E6430;
    uint64_t v6 = 276;
    goto LABEL_17;
  }
  BOOL v13 = (void *)0xEE00656369766544;
  uint64_t v14 = 0x206E776F6E6B6E55;
  uint64_t v41 = 0;
  uint64_t v42 = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v15 = *(void *)(v7 + 24);
    uint64_t v16 = swift_getObjectType();
    uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
    swift_unknownObjectRelease();
    if (v17)
    {
      id v18 = objc_msgSend(v17, "boxName", v41, v42);

      if (v18)
      {
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        BOOL v13 = v19;
      }
    }
  }
  v20._countAndFlagsBits = v14;
  v20._object = v13;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0xD000000000000016;
  v21._object = (void *)0x80000001000E6480;
  String.append(_:)(v21);
  sub_10002E804(v41, v42, 0xD000000000000042, (void *)0x80000001000E2C80, 0xD000000000000021, 0x80000001000E6430, 270);
  swift_bridgeObjectRelease();
  if (!swift_unknownObjectWeakLoadStrong()) {
    return;
  }
  uint64_t v22 = *(void *)(v7 + 24);
  uint64_t v23 = swift_getObjectType();
  uint64_t v24 = *(void *)(v7 + 48);
  uint64_t v25 = type metadata accessor for AUAMuteControl();
  id v26 = &off_10011AC28;
LABEL_21:
  uint64_t v36 = sub_10003526C(v24, channelNumber, v25, (uint64_t)v26, v23, v22);
  swift_unknownObjectRelease();
  if (v36)
  {
    uint64_t v37 = v36[2];
    if (v37)
    {
      uint64_t v38 = (uint64_t)(v36 + 4);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_10001A9B8(v38, (uint64_t)&v41);
        uint64_t v39 = v43;
        uint64_t v40 = v44;
        sub_10001A974(&v41, v43);
        (*(void (**)(uint64_t, uint64_t))(v40 + 24))(v39, v40);
        if (v4) {
          break;
        }
        sub_10001ABC4((uint64_t)&v41);
        v38 += 40;
        if (!--v37) {
          goto LABEL_29;
        }
      }
      sub_10001ABC4((uint64_t)&v41);
LABEL_29:
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t ActiveFeatureUnit.deinit()
{
  sub_10001DEAC(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ActiveFeatureUnit.__deallocating_deinit()
{
  sub_10001DEAC(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000A3F9C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000A3FCC((uint64_t (*)(void))sub_1000A2568, a1);
}

uint64_t sub_1000A3FB4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000A3FCC((uint64_t (*)(void))sub_10008CAF0, a1);
}

uint64_t sub_1000A3FCC@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 32);
  char v6 = *(unsigned char *)(*v2 + 40);
  uint64_t v7 = *(void *)(*v2 + 48);
  __int16 v16 = *(_WORD *)(*v2 + 56);
  char v8 = *(unsigned char *)(*v2 + 58);
  uint64_t v9 = *(void *)(*v2 + 64);
  __int16 v10 = *(_WORD *)(*v2 + 72);
  uint64_t v11 = *(void *)(*v2 + 80);
  uint64_t v12 = *(void *)(v4 + 88);
  uint64_t v13 = *(void *)(v4 + 96);
  a2[3] = (uint64_t)&type metadata for FeatureUnit;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject();
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(unsigned char *)(v14 + 24) = v6;
  *(void *)(v14 + 32) = v7;
  *(unsigned char *)(v14 + 42) = v8;
  *(_WORD *)(v14 + 40) = v16;
  *(void *)(v14 + 48) = v9;
  *(_WORD *)(v14 + 56) = v10;
  *(void *)(v14 + 64) = v11;
  *(void *)(v14 + 72) = v12;
  *(void *)(v14 + 80) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A40BC()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    LODWORD(v3) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3) == 32;
    swift_unknownObjectRelease();
    return (16 * v3);
  }
  return result;
}

uint64_t sub_1000A414C()
{
  return *(void *)(*(void *)v0 + 48);
}

void sub_1000A4158(uint64_t a1, uint64_t a2)
{
}

void sub_1000A417C(unsigned int a1, void *a2)
{
}

void sub_1000A41A0(AUASDCore::AUAInterruptAttribute a1, Swift::UInt a2, Swift::UInt a3)
{
}

uint64_t sub_1000A41C4(uint64_t a1, unint64_t a2, int a3, uint64_t a4, void *a5)
{
  int v12 = a3 & 0xFFFFFF;
  uint64_t v13 = v5;
  BOOL v14 = sub_1000A3738(v12, a2);
  if (v6)
  {
    swift_release();

    type metadata accessor for AUAMuteControl();
    swift_deallocPartialClassInstance();
    return (uint64_t)v13;
  }
  BOOL v15 = v14;
  *(void *)&v13[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_featureUnit] = a1;
  *(void *)&v13[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_channel] = a2;
  __int16 v16 = &v13[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_control];
  v16[2] = BYTE2(a3);
  *(_WORD *)__int16 v16 = a3;
  swift_retain();

  char v17 = LockDelay.units.getter(v12);
  if (!HIDWORD(a2))
  {
    char v18 = v17;
    v21.receiver = v13;
    v21.super_class = (Class)type metadata accessor for AUAMuteControl();
    uint64_t v19 = (char *)objc_msgSendSuper2(&v21, "initWithValue:isSettable:forElement:inScope:withPlugin:andObjectClassID:", v15, v18 & 1, a2, a4, a5, 1836414053);
    if (v19)
    {
      uint64_t v13 = v19;
      swift_release();

      return (uint64_t)v13;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A4364(char a1)
{
  uint64_t v2 = (unsigned __int8 *)v1;
  unsigned int v4 = [v1 controlElement];
  uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_featureUnit];
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v6 = *(void *)(v5 + 24);
    uint64_t ObjectType = swift_getObjectType();
    char v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(ObjectType, v6);
    swift_unknownObjectRelease();
    if (v8)
    {
      uint64_t v9 = *(void *)&v8[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
      if (v9 && sub_10001925C(6, v9))
      {
        sub_10002E804(0xD00000000000001DLL, 0x80000001000E66E0, 0x615665676E616863, (void *)0xEF293A5F2865756CLL, 0xD000000000000021, 0x80000001000E6430, 319);
        usleep(0x1388u);
      }
    }
  }
  int v10 = v2[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_control + 2];
  int v11 = *(unsigned __int16 *)&v2[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_control];
  if (swift_unknownObjectWeakLoadStrong())
  {
    int v12 = v11 | (v10 << 16);
    uint64_t v13 = *(void *)(v5 + 24);
    uint64_t v14 = swift_getObjectType();
    v16[3] = type metadata accessor for ActiveFeatureUnit();
    v16[4] = &protocol witness table for ActiveFeatureUnit;
    v16[0] = v5;
    swift_retain();
    sub_100031A50(v12 & 0xFFFFFF, v4, 0, v16, a1 & 1, v14, v13);
    swift_unknownObjectRelease();
    sub_10001ABC4((uint64_t)v16);
  }
  [v2 setValue:a1 & 1];
  return 1;
}

id sub_1000A4638()
{
  return sub_1000A529C(type metadata accessor for AUAMuteControl);
}

uint64_t sub_1000A4660()
{
  return *(void *)(*(void *)(*v0 + OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_featureUnit) + 48);
}

uint64_t sub_1000A4678()
{
  return *(void *)(*v0 + OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_channel);
}

id sub_1000A468C()
{
  uint64_t v2 = (char *)*v0;
  id result = (id)sub_1000A3738(*(unsigned __int16 *)&v2[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_control] | (v2[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_control + 2] << 16), *(void *)&v2[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_channel]);
  if (!v1) {
    return [v2 setValue:result & 1];
  }
  return result;
}

uint64_t sub_1000A4700(uint64_t a1, unint64_t a2, int a3, unsigned int a4, void *a5)
{
  uint64_t v9 = OBJC_IVAR____TtC9AUASDCore14AUAGainControl_featureUnit;
  *(void *)&v5[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_featureUnit] = a1;
  int v10 = &v5[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_control];
  void v10[2] = BYTE2(a3);
  *(_WORD *)int v10 = a3;
  *(void *)&v5[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_channel] = a2;
  int v11 = a3 & 0xFFFFFF;
  swift_retain_n();
  __int16 v31 = v5;
  unint64_t v12 = sub_1000A3384(v11, a2);
  if (v6)
  {
    swift_release();
LABEL_7:
    swift_release();

    id v16 = *(id *)&v5[v9];
    swift_release();
    type metadata accessor for AUAGainControl();
    swift_deallocPartialClassInstance();
    return (uint64_t)v16;
  }
  unint64_t v13 = v12;
  unsigned int v30 = a4;
  swift_release();
  if ((v13 & 0x100000000) != 0)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v14 = 1;
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0xE000000000000000;
    *(void *)(v14 + 24) = 0xD000000000000036;
    *(void *)(v14 + 32) = 0x80000001000E67B0;
    *(void *)(v14 + 40) = 0xD000000000000021;
    *(void *)(v14 + 48) = 0x80000001000E6430;
    uint64_t v15 = 360;
LABEL_6:
    *(void *)(v14 + 56) = v15;
    swift_willThrow();
    goto LABEL_7;
  }
  swift_retain();
  char v18 = sub_1000A356C(v11, (void *)a2);
  swift_release();
  if (!v18)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v14 = 1;
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0xE000000000000000;
    *(void *)(v14 + 24) = 0xD000000000000036;
    *(void *)(v14 + 32) = 0x80000001000E67B0;
    *(void *)(v14 + 40) = 0xD000000000000021;
    *(void *)(v14 + 48) = 0x80000001000E6430;
    uint64_t v15 = 361;
    goto LABEL_6;
  }
  if (v18[2] != 1)
  {
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v14 = 107;
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0xE000000000000000;
    *(void *)(v14 + 24) = 0xD000000000000036;
    *(void *)(v14 + 32) = 0x80000001000E67B0;
    *(void *)(v14 + 40) = 0xD000000000000021;
    *(void *)(v14 + 48) = 0x80000001000E6430;
    uint64_t v15 = 363;
    goto LABEL_6;
  }
  int v19 = *((_DWORD *)v18 + 10);
  uint64_t v20 = v18[4];
  swift_bridgeObjectRelease();
  objc_super v21 = &v31[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_range];
  *(void *)objc_super v21 = v20;
  *((_DWORD *)v21 + 2) = v19;

  int v22 = *(_DWORD *)v21;
  int v23 = *((_DWORD *)v21 + 1);
  char v24 = LockDelay.units.getter(v11);
  if (!HIDWORD(a2))
  {
    char v25 = v24;
    v33.receiver = v31;
    v33.super_class = (Class)type metadata accessor for AUAGainControl();
    LODWORD(v26) = v13;
    LODWORD(v27) = v22;
    LODWORD(v28) = v23;
    id v29 = objc_msgSendSuper2(&v33, "initWithDecibelValue:minimumValue:maximumValue:isSettable:forElement:inScope:withPlugin:andObjectClassID:", v25 & 1, a2, v30, a5, 1986817381, v26, v27, v28);
    if (v29)
    {
      id v16 = v29;
      swift_release();

      return (uint64_t)v16;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A4AB8(float a1)
{
  uint64_t v32 = type metadata accessor for Mirror();
  uint64_t v3 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)[v1 controlElement];
  uint64_t v7 = *(void *)(*(void *)&v1[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_featureUnit] + 80);
  if (*(void *)(v7 + 16) <= (unint64_t)result)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 8 * result + 32);
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9) {
    return 0;
  }
  uint64_t v26 = *(void *)&v1[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_featureUnit];
  unint64_t v25 = result;
  id v24 = v1;
  double v27 = &v38;
  __int16 v31 = (void (**)(char *, uint64_t))(v3 + 8);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = 32;
  uint64_t v30 = v8;
  while (1)
  {
    uint64_t v33 = v9;
    int v11 = *(unsigned __int8 *)(v8 + v10 + 2);
    int v12 = *(unsigned __int16 *)(v8 + v10);
    *((void *)&v38 + 1) = &type metadata for USBDescriptorControl;
    int v28 = v12;
    int v29 = v11;
    BYTE2(v37) = v11;
    LOWORD(v37) = v12;
    Mirror.init(reflecting:)();
    Mirror.children.getter();
    swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v13 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
    if (v13 != result)
    {
      __break(1u);
      goto LABEL_25;
    }
    char v14 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v14)
    {
      swift_unknownObjectRelease();
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v37 = v34;
      long long v38 = v35;
      long long v39 = v36;
      swift_unknownObjectRelease();
    }
    uint64_t v8 = v30;
    uint64_t v15 = v33;
    swift_release();
    (*v31)(v5, v32);
    if (!*((void *)&v39 + 1))
    {
      sub_10001A918((uint64_t)&v37, &qword_100127CD0);
      goto LABEL_5;
    }
    long long v16 = v37;
    sub_10001ABC4((uint64_t)v27);
    if (!*((void *)&v16 + 1)) {
      goto LABEL_5;
    }
    if (v16 == __PAIR128__(0xE600000000000000, 0x656D756C6F76)) {
      break;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_17;
    }
LABEL_5:
    v10 += 3;
    uint64_t v9 = v15 - 1;
    if (!v9)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  float v18 = a1 * 256.0;
  uint64_t v19 = v26;
  if ((~COERCE_INT(a1 * 256.0) & 0x7F800000) == 0) {
    goto LABEL_26;
  }
  if (v18 > -32769.0)
  {
    if (v18 >= 32768.0) {
      goto LABEL_28;
    }
    swift_beginAccess();
    if (swift_unknownObjectWeakLoadStrong())
    {
      int v21 = v28 | (v29 << 16);
      uint64_t v22 = *(void *)(v19 + 24);
      uint64_t ObjectType = swift_getObjectType();
      *((void *)&v38 + 1) = type metadata accessor for ActiveFeatureUnit();
      *(void *)&long long v39 = &protocol witness table for ActiveFeatureUnit;
      *(void *)&long long v37 = v19;
      swift_retain();
      sub_100031A50(v21 & 0xFFFFFF, v25, 0, &v37, (unsigned __int16)(int)v18, ObjectType, v22);
      swift_unknownObjectRelease();
      sub_10001ABC4((uint64_t)&v37);
    }
    *(float *)&double v20 = a1;
    [v24 setDecibelValue:v20];
    return 1;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1000A5034()
{
  uint64_t v2 = v0;
  unint64_t result = sub_1000A3384(*(unsigned __int16 *)&v2[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_control] | (v2[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_control + 2] << 16), *(void *)&v2[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_channel]);
  if (v1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = (result & (unint64_t)&_mh_execute_header) == 0;
  }
  if (v4)
  {
    int v5 = result;
    id v6 = [v0 owner];
    if (v6)
    {
      uint64_t v8 = v6;
      type metadata accessor for AUAAudioDevice(0);
      uint64_t v9 = swift_dynamicCastClass();
      if (v9)
      {
        uint64_t v10 = (void *)v9;
        uint64_t v20 = 0;
        unint64_t v21 = 0xE000000000000000;
        _StringGuts.grow(_:)(49);
        v11._countAndFlagsBits = 0xD000000000000026;
        v11._object = (void *)0x80000001000E65A0;
        String.append(_:)(v11);
        id v12 = [v10 deviceName];
        if (v12)
        {
          uint64_t v13 = v12;
          uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          long long v16 = v15;
        }
        else
        {
          long long v16 = (void *)0xE700000000000000;
          uint64_t v14 = 0x6E776F6E6B6E55;
        }
        v17._countAndFlagsBits = v14;
        v17._object = v16;
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        v18._countAndFlagsBits = 544175136;
        v18._object = (void *)0xE400000000000000;
        String.append(_:)(v18);
        Float.write<A>(to:)();
        v19._countAndFlagsBits = 4351008;
        v19._object = (void *)0xE300000000000000;
        String.append(_:)(v19);
        sub_10002E804(0, 0xE000000000000000, 0xD000000000000015, (void *)0x80000001000E2580, 0xD000000000000021, 0x80000001000E6430, 416);

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    LODWORD(v7) = v5;
    return (unint64_t)objc_msgSend(v2, "setDecibelValue:", v7, v20, v21);
  }
  return result;
}

id sub_1000A5284()
{
  return sub_1000A529C(type metadata accessor for AUAGainControl);
}

id sub_1000A529C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1000A52E4()
{
  return *(void *)(*(void *)(*v0 + OBJC_IVAR____TtC9AUASDCore14AUAGainControl_featureUnit) + 48);
}

uint64_t sub_1000A52FC()
{
  return *(void *)(*v0 + OBJC_IVAR____TtC9AUASDCore14AUAGainControl_channel);
}

unint64_t sub_1000A5310()
{
  return sub_1000A5034();
}

uint64_t sub_1000A5334(uint64_t a1, char a2)
{
  objc_super v3 = v2;
  uint64_t v5 = *v2;
  sub_10000AC7C((uint64_t *)&unk_100127460);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  long long v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          objc_super v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    __int16 v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_bridgeObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  objc_super v3 = v35;
  int v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000A560C(uint64_t a1, char a2)
{
  objc_super v3 = v2;
  uint64_t v5 = *v2;
  sub_10000AC7C(&qword_100127498);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    uint64_t v32 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                objc_super v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v30;
              }
              objc_super v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      __int16 v22 = *(_WORD *)(*(void *)(v5 + 56) + 2 * v17);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      *(_WORD *)(*(void *)(v7 + 56) + 2 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000A58AC(uint64_t a1, char a2)
{
  objc_super v3 = v2;
  uint64_t v5 = *v2;
  sub_10000AC7C(&qword_100127428);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              objc_super v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_10000CDA8(v24, v35);
      }
      else
      {
        sub_10001A1C8((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_10000CDA8(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000A5BAC(uint64_t a1, char a2)
{
  objc_super v3 = v2;
  uint64_t v5 = *v2;
  sub_10000AC7C(&qword_1001274A8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    uint64_t v32 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                objc_super v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v30;
              }
              objc_super v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      char v22 = *(unsigned char *)(*(void *)(v5 + 56) + v17);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      *(unsigned char *)(*(void *)(v7 + 56) + v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

void *sub_1000A5E4C()
{
  uint64_t v1 = v0;
  sub_10000AC7C((uint64_t *)&unk_100127460);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A5FF8()
{
  uint64_t v1 = v0;
  sub_10000AC7C(&qword_100127498);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v23 = __clz(__rbit64(v21));
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 2 * v15;
    __int16 v19 = *(_WORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_WORD *)(*(void *)(v4 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A618C()
{
  uint64_t v1 = v0;
  sub_10000AC7C(&qword_100127428);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_10001A1C8(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_10000CDA8(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000A6374()
{
  uint64_t v1 = v0;
  sub_10000AC7C(&qword_1001274A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000A6504(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000A74B8(&qword_100129FC8, &qword_100129FC0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000AC7C(&qword_100129FC0);
          unint64_t v12 = sub_100035A70(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000CECC(0, (unint64_t *)&qword_100127B00);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A6724(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000A74B8(&qword_10012A000, &qword_100129FF8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000AC7C(&qword_100129FF8);
          unint64_t v12 = sub_100035AD8(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for AUAStreamFormat();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A6934(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000A74B8(&qword_10012A010, &qword_10012A008);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000AC7C(&qword_10012A008);
          unint64_t v12 = sub_100035A70(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000CECC(0, &qword_100127B20);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A6B54(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000A74B8(&qword_100129FF0, &qword_100129FE0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000AC7C(&qword_100129FE0);
          unint64_t v12 = sub_100035A70(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000CECC(0, &qword_100129FE8);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A6D74(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000A74B8(&qword_100129FD8, &qword_100129FD0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000AC7C(&qword_100129FD0);
          unint64_t v12 = sub_100035A04(v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for ActiveStreamingInterface();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000A6F84(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = *(void **)v4;
  int64_t v8 = *(void *)(*(void *)v4 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v9 > v7[3] >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      uint64_t result = sub_100058C0C(result, v13, 1, v7);
      uint64_t v7 = result;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6) {
    goto LABEL_25;
  }
  if (v6 < 0) {
    goto LABEL_27;
  }
  unint64_t v15 = (char *)&v7[v14 + 4];
  char v16 = (char *)(a2 + 8 * a3);
  if (v16 < &v15[8 * v6] && v15 < &v16[8 * v6]) {
    goto LABEL_27;
  }
  uint64_t result = memcpy(v15, v16, 8 * v6);
  if (!v6)
  {
LABEL_22:
    *(void *)uint64_t v4 = v7;
    return result;
  }
  uint64_t v18 = v7[2];
  BOOL v19 = __OFADD__(v18, v6);
  uint64_t v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000A711C(uint64_t a1, uint64_t a2, unsigned int a3, void **a4, unint64_t a5, void *a6, void **a7)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v22 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = 32;
    do
    {
      unsigned __int16 v14 = *(_WORD *)(a1 + v13);
      char v21 = *(unsigned char *)(a1 + v13 + 2);
      unsigned __int16 v20 = v14;
      sub_1000A2E28(&v20, a2, a3, a4, a5, a6, a7, &v19);
      if (v7)
      {
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      if (v19)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v13 += 3;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    return (void *)v22;
  }
  return result;
}

uint64_t type metadata accessor for AUAGainControl()
{
  return self;
}

uint64_t type metadata accessor for AUAMuteControl()
{
  return self;
}

unint64_t sub_1000A72AC()
{
  unint64_t result = qword_100129DD0;
  if (!qword_100129DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129DD0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AUAFeatureUnitControlSelector(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AUAFeatureUnitControlSelector(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A745CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AUAFeatureUnitControlSelector()
{
  return &type metadata for AUAFeatureUnitControlSelector;
}

uint64_t type metadata accessor for ActiveFeatureUnit()
{
  return self;
}

uint64_t sub_1000A74B8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001A584(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A7508(unsigned __int16 a1)
{
  if ((a1 & 0x80) == 0) {
    return 0;
  }
  char v3 = a1;
  uint64_t result = HIBYTE(a1);
  unsigned int v4 = v3 & 0xF;
  if (a1 < 0x100u || (v3 & 0xF) != 0)
  {
    if (v4 > 1)
    {
      if (v4 == 2)
      {
        uint64_t v6 = 512;
        if ((v3 & 0x40) == 0) {
          uint64_t v6 = 1280;
        }
        return v6 | result | 0x1000000;
      }
      else
      {
        sub_10002E81C(0xD000000000000026, 0x80000001000E6870, 0xD000000000000011, (void *)0x80000001000E68A0, 0xD00000000000001CLL, 0x80000001000E6810, 33);
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v7 = 2;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0xE000000000000000;
        *(void *)(v7 + 24) = 0xD000000000000011;
        *(void *)(v7 + 32) = 0x80000001000E68A0;
        *(void *)(v7 + 40) = 0xD00000000000001CLL;
        *(void *)(v7 + 48) = 0x80000001000E6810;
        *(void *)(v7 + 56) = 34;
        return swift_willThrow();
      }
    }
    else
    {
      uint64_t v5 = 512;
      if ((v3 & 0x40) == 0) {
        uint64_t v5 = 1280;
      }
      return v5 | result | 0x1000000;
    }
  }
  return result;
}

void *sub_1000A7698()
{
  unint64_t v1 = *(void *)(v0 + 200);
  unint64_t v73 = v1;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    char v3 = (void *)Strong;
    uint64_t v4 = *(void *)(Strong + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (v4)
    {
      BOOL v5 = sub_10001925C(3, v4);
      swift_bridgeObjectRetain();

      if (v5)
      {
        uint64_t v6 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (qword_100126938 != -1) {
    swift_once();
  }
  uint64_t v7 = *(void **)(qword_10012B2A8 + 16);
  if (v7)
  {
    id v8 = v7;
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [v8 stringForKey:v9];

    if (v10)
    {
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      if (v11 == 0x656C676E6973 && v13 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = 1;
      }
      else
      {
        uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {

      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
LABEL_19:
  unint64_t v15 = (char *)swift_unknownObjectWeakLoadStrong();
  if (v15)
  {
    char v16 = v15;
    uint64_t v17 = *(void *)&v15[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
    if (v17)
    {
      BOOL v18 = sub_10001925C(5, v17);

      if (v18)
      {
LABEL_31:
        char v63 = 1;
        if ((v1 & 0x8000000000000000) != 0) {
          goto LABEL_113;
        }
        goto LABEL_37;
      }
    }
    else
    {
    }
  }
  if (qword_100126938 != -1) {
    swift_once();
  }
  uint64_t v19 = *(void **)(qword_10012B2A8 + 16);
  if (v19)
  {
    id v20 = v19;
    NSString v21 = String._bridgeToObjectiveC()();
    id v22 = [v20 stringForKey:v21];

    if (v22)
    {
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      if (v23 != 0x656C7069746C756DLL || v25 != 0xE800000000000000)
      {
        char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v1 & 0x8000000000000000) != 0) {
          goto LABEL_113;
        }
        goto LABEL_37;
      }
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }
  char v63 = 0;
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_113;
  }
LABEL_37:
  if ((v1 & 0x4000000000000000) != 0) {
    goto LABEL_113;
  }
  if (*(uint64_t *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1) {
    goto LABEL_107;
  }
  do
  {
    char v26 = _swiftEmptyArrayStorage;
    unsigned int v62 = v6;
    while (1)
    {
      if (v6)
      {
        unint64_t v72 = v1;
        unint64_t v73 = (unint64_t)_swiftEmptyArrayStorage;
        goto LABEL_57;
      }
      if ((v63 & 1) == 0)
      {
        unint64_t v1 = (unint64_t)sub_1000D8F24(&v73);
        unint64_t v72 = v1;
        goto LABEL_57;
      }
      uint64_t v27 = v6;
      sub_10000AC7C(&qword_100127ED0);
      uint64_t result = (void *)swift_allocObject();
      uint64_t v29 = result;
      *((_OWORD *)result + 1) = xmmword_1000EA2E0;
      unint64_t v30 = v1 >> 62;
      if (v1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (!v33) {
          goto LABEL_119;
        }
        swift_bridgeObjectRetain();
        uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (!v34) {
          goto LABEL_116;
        }
      }
      else if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
        return result;
      }
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t result = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v31 = result;
        if (v30) {
          goto LABEL_54;
        }
      }
      else
      {
        if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_117;
        }
        uint64_t v31 = *(void **)(v1 + 32);
        uint64_t result = (void *)swift_retain();
        if (v30)
        {
LABEL_54:
          swift_bridgeObjectRetain();
          uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          goto LABEL_55;
        }
      }
      uint64_t v32 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_55:
      if (!v32) {
        goto LABEL_118;
      }
      sub_1000AA480(0, 1);
      v29[4] = v31;
      v68[0] = v29;
      specialized Array._endMutation()();
      unint64_t v1 = v68[0];
      unint64_t v72 = v68[0];
      uint64_t v6 = v27;
LABEL_57:
      if (!(v1 >> 62))
      {
        if (*(uint64_t *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1) {
          break;
        }
        goto LABEL_97;
      }
      swift_bridgeObjectRetain();
      uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v57 >= 1) {
        break;
      }
LABEL_97:
      swift_bridgeObjectRelease();
      unint64_t v1 = v73;
      if (v73 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v58 <= 0)
        {
LABEL_101:
          swift_bridgeObjectRelease();
          return v26;
        }
      }
      else if (*(uint64_t *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 0)
      {
        goto LABEL_101;
      }
    }
LABEL_59:
    if (v6) {
      unint64_t v72 = (unint64_t)_swiftEmptyArrayStorage;
    }
    else {
      unint64_t v1 = (unint64_t)sub_1000D946C(&v72);
    }
    if (!(v1 >> 62))
    {
      uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v6) {
        goto LABEL_64;
      }
LABEL_106:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    }
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v6) {
      goto LABEL_106;
    }
LABEL_64:
    uint64_t v71 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10007C37C(0, v6 & ~(v6 >> 63), 0);
    if ((v6 & 0x8000000000000000) == 0)
    {
      double v64 = v26;
      uint64_t v35 = 0;
      while (v6 != v35)
      {
        if ((v1 & 0xC000000000000001) != 0)
        {
          uint64_t v36 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v36 = *(void **)(v1 + 8 * v35 + 32);
          swift_retain();
        }
        uint64_t v37 = v36[15];
        long long v38 = &protocol witness table for EndpointClock;
        if (!v37)
        {
          swift_beginAccess();
          if (!v36[2])
          {
            uint64_t v67 = 0;
            long long v65 = 0u;
            long long v66 = 0u;
LABEL_103:
            sub_10001A918((uint64_t)&v65, &qword_100128528);
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v59 = 77;
            uint64_t v60 = 86;
LABEL_105:
            *(void *)(v59 + 8) = 0;
            *(void *)(v59 + 16) = 0xE000000000000000;
            *(void *)(v59 + 24) = 0x29286B636F6C63;
            *(void *)(v59 + 32) = 0xE700000000000000;
            *(void *)(v59 + 40) = 0xD000000000000028;
            *(void *)(v59 + 48) = 0x80000001000E68C0;
            *(void *)(v59 + 56) = v60;
            swift_willThrow();
            swift_release();
            swift_bridgeObjectRelease_n();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            return _swiftEmptyArrayStorage;
          }
          uint64_t v39 = v36[3];
          uint64_t v40 = v36[9];
          if ((v40 & 0xC000000000000001) != 0)
          {
            swift_unknownObjectRetain();
            uint64_t v41 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_111;
            }
            uint64_t v41 = *(void *)(v40 + 32);
            swift_unknownObjectRetain();
            swift_retain();
          }
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v39 + 168))(&v65, v41, ObjectType, v39);
          swift_release();
          swift_unknownObjectRelease();
          if (!*((void *)&v66 + 1)) {
            goto LABEL_103;
          }
          sub_10000CF6C(&v65, (uint64_t)v68);
          uint64_t v43 = v69;
          uint64_t v44 = v70;
          sub_10001A974(v68, v69);
          uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44);
          if (!v45)
          {
            sub_10001ABC4((uint64_t)v68);
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v59 = 78;
            uint64_t v60 = 88;
            goto LABEL_105;
          }
          uint64_t v37 = v45;
          long long v38 = *(_UNKNOWN ***)(v46 + 16);
          sub_10001ABC4((uint64_t)v68);
        }
        swift_retain();
        swift_release();
        uint64_t v47 = v71;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10007C37C(0, v47[2] + 1, 1);
          uint64_t v47 = v71;
        }
        unint64_t v49 = v47[2];
        unint64_t v48 = v47[3];
        if (v49 >= v48 >> 1)
        {
          sub_10007C37C(v48 > 1, v49 + 1, 1);
          uint64_t v47 = v71;
        }
        ++v35;
        v47[2] = v49 + 1;
        uint64_t v50 = &v47[2 * v49];
        v50[4] = v37;
        v50[5] = v38;
        if (v6 == v35)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for MultiClock();
          uint64_t v51 = swift_allocObject();
          *(void *)(v51 + 16) = v47;
          char v26 = v64;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            char v26 = sub_10005909C(0, v64[2] + 1, 1, v64);
          }
          uint64_t v6 = v62;
          unint64_t v54 = v26[2];
          unint64_t v53 = v26[3];
          if (v54 >= v53 >> 1) {
            char v26 = sub_10005909C((void *)(v53 > 1), v54 + 1, 1, v26);
          }
          _OWORD v26[2] = v54 + 1;
          uint64_t v55 = &v26[3 * v54];
          v55[4] = v51;
          v55[5] = &protocol witness table for MultiClock;
          v55[6] = v1;
          unint64_t v1 = v72;
          if (v72 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v56 > 0) {
              goto LABEL_59;
            }
          }
          else if (*(uint64_t *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10) > 0)
          {
            goto LABEL_59;
          }
          goto LABEL_97;
        }
      }
      __break(1u);
LABEL_111:
      __break(1u);
    }
    __break(1u);
LABEL_113:
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  while (v61 >= 1);
LABEL_107:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_1000A80D0(int a1, unint64_t a2, char a3, void *a4)
{
  void (*v21)(void *__return_ptr, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  __int16 v64;
  void (*v65)(void *__return_ptr, uint64_t, uint64_t);
  unsigned __int8 v66;
  __int16 v67;
  unint64_t v68;
  __int16 v69;
  int v70;
  uint64_t v71;
  void v72[5];
  int v73;
  int v74;
  int v75;
  ValueMetadata *v76;
  _UNKNOWN **v77;
  void v78[3];
  uint64_t v79;
  uint64_t v80;
  void v81[3];
  uint64_t v82;
  uint64_t v83;
  void v84[3];
  uint64_t v85;
  uint64_t v86;

  uint64_t v6 = v4;
  uint64_t v71 = 0;
  unsigned int v10 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v11 = USBDescriptorControl.pbLayout()();
  __int16 v12 = sub_1000852E4(v11);
  if (!v5)
  {
    __int16 v14 = v12;
    unint64_t v15 = v13;
    long long v66 = v11;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong)
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v27 = 7;
      *(void *)(v27 + 8) = 0;
      *(void *)(v27 + 16) = 0xE000000000000000;
      *(void *)(v27 + 24) = 0xD00000000000002ALL;
      *(void *)(v27 + 32) = 0x80000001000E2E50;
      *(void *)(v27 + 40) = 0xD00000000000001CLL;
      *(void *)(v27 + 48) = 0x80000001000E6810;
      *(void *)(v27 + 56) = 140;
      swift_willThrow();
LABEL_16:

      return;
    }
    uint64_t v17 = (void *)Strong;
    double v64 = v14;
    uint64_t v67 = sub_100088544(v10);
    if (a3) {
      unint64_t v18 = 0;
    }
    else {
      unint64_t v18 = a2;
    }
    BOOL v68 = v18;
    uint64_t v19 = a4[3];
    uint64_t v20 = a4[4];
    sub_10001A974(a4, v19);
    NSString v21 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 8);
    id v22 = v15;
    long long v65 = v21;
    v21(v84, v19, v20);
    uint64_t v23 = v85;
    uint64_t v24 = v86;
    sub_10001A974(v84, v85);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
    char v26 = *(void *)(v6 + 16);
    sub_1000C80AC(0x82u, 1, 1, v67, v68, v25, *(unsigned char *)(v26 + 2), v22, (uint64_t)&v71);
    uint64_t v60 = v26;
    uint64_t v61 = v20;
    unsigned int v62 = v17;
    sub_10001ABC4((uint64_t)v84);
    unint64_t v15 = v22;
    BOOL v28 = v71;
    uint64_t v29 = NSData.startIndex.getter();
    unint64_t v30 = NSData.endIndex.getter();
    uint64_t v31 = NSData.startIndex.getter();
    char v63 = v15;
    uint64_t v32 = NSData.endIndex.getter();
    if (v29 < v31 || v32 < v29)
    {
      __break(1u);
    }
    else
    {
      uint64_t v33 = NSData.startIndex.getter();
      uint64_t v34 = NSData.endIndex.getter();
      if (v30 >= v33 && v34 >= v30)
      {
        if (!__OFSUB__(v30, v29))
        {
          if (v28 == v30 - v29)
          {
            ADCControlRequestParameterBlock.getCur()(v15, v64 & 0x1FF, (uint64_t)v84);
            uint64_t v17 = 0;
            v65(v81, v19, v20);
            uint64_t v36 = v82;
            uint64_t v37 = v83;
            sub_10001A974(v81, v82);
            long long v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
            sub_1000C80AC(0x83u, 1, 1, v67, v68, v38, *(unsigned char *)(v60 + 2), v15, (uint64_t)&v71);
            uint64_t v69 = v64 & 0x1FF;

            sub_10001ABC4((uint64_t)v81);
            uint64_t v39 = v71;
            uint64_t v40 = NSData.startIndex.getter();
            uint64_t v41 = NSData.endIndex.getter();
            uint64_t v42 = NSData.startIndex.getter();
            uint64_t v43 = NSData.endIndex.getter();
            if (v40 < v42 || v43 < v40)
            {
              __break(1u);
            }
            else
            {
              uint64_t v44 = NSData.startIndex.getter();
              uint64_t v45 = NSData.endIndex.getter();

              if (v41 >= v44 && v45 >= v41)
              {
                if (!__OFSUB__(v41, v40))
                {
                  if (v39 != v41 - v40)
                  {

                    sub_10000CD54();
                    swift_allocError();
                    *(unsigned char *)uint64_t v46 = 28;
                    *(void *)(v46 + 8) = 0;
                    *(void *)(v46 + 16) = 0xE000000000000000;
                    *(void *)(v46 + 24) = 0xD00000000000002ALL;
                    *(void *)(v46 + 32) = 0x80000001000E2E50;
                    *(void *)(v46 + 40) = 0xD00000000000001CLL;
                    *(void *)(v46 + 48) = 0x80000001000E6810;
                    *(void *)(v46 + 56) = 162;
                    swift_willThrow();

LABEL_26:
                    sub_10001ABC4((uint64_t)v84);
                    return;
                  }
                  ADCControlRequestParameterBlock.getCur()(v63, v69, (uint64_t)v81);
                  v65(v78, v19, v61);
                  uint64_t v47 = v79;
                  unint64_t v48 = v80;
                  sub_10001A974(v78, v79);
                  unint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 16))(v47, v48);
                  sub_1000C80AC(0x84u, 1, 1, v67, v68, v49, *(unsigned char *)(v60 + 2), v63, (uint64_t)&v71);

                  sub_10001ABC4((uint64_t)v78);
                  uint64_t v50 = v71;
                  uint64_t v51 = NSData.startIndex.getter();
                  uint64_t v52 = NSData.endIndex.getter();
                  unint64_t v53 = NSData.startIndex.getter();
                  unint64_t v54 = NSData.endIndex.getter();
                  if (v51 < v53 || v54 < v51)
                  {
                    __break(1u);
                  }
                  else
                  {
                    uint64_t v55 = NSData.startIndex.getter();
                    uint64_t v56 = NSData.endIndex.getter();

                    if (v52 >= v55 && v56 >= v52)
                    {
                      if (!__OFSUB__(v52, v51))
                      {
                        if (v50 != v52 - v51)
                        {

                          sub_10000CD54();
                          swift_allocError();
                          *(unsigned char *)uint64_t v57 = 28;
                          *(void *)(v57 + 8) = 0;
                          *(void *)(v57 + 16) = 0xE000000000000000;
                          *(void *)(v57 + 24) = 0xD00000000000002ALL;
                          *(void *)(v57 + 32) = 0x80000001000E2E50;
                          *(void *)(v57 + 40) = 0xD00000000000001CLL;
                          *(void *)(v57 + 48) = 0x80000001000E6810;
                          *(void *)(v57 + 56) = 174;
                          swift_willThrow();

LABEL_35:
                          sub_10001ABC4((uint64_t)v81);
                          goto LABEL_26;
                        }
                        ADCControlRequestParameterBlock.getCur()(v63, v69, (uint64_t)v78);

                        if (v66 != 2)
                        {
                          if (v66 != 1)
                          {
                            if (v66)
                            {
                              sub_10000CD54();
                              swift_allocError();
                              *(unsigned char *)uint64_t v58 = 30;
                              *(void *)(v58 + 8) = 0;
                              *(void *)(v58 + 16) = 0xE000000000000000;
                              *(void *)(v58 + 24) = 0xD00000000000002ALL;
                              *(void *)(v58 + 32) = 0x80000001000E2E50;
                              *(void *)(v58 + 40) = 0xD00000000000001CLL;
                              *(void *)(v58 + 48) = 0x80000001000E6810;
                              uint64_t v59 = 197;
                            }
                            else
                            {
                              sub_10001A9B8((uint64_t)v84, (uint64_t)v72);
                              sub_10000AC7C(&qword_100127EB8);
                              if (swift_dynamicCast())
                              {
                                sub_10001A9B8((uint64_t)v81, (uint64_t)v72);
                                if (swift_dynamicCast())
                                {
                                  sub_10001A9B8((uint64_t)v78, (uint64_t)v72);
                                  if (swift_dynamicCast())
                                  {
                                    unint64_t v76 = &type metadata for AudioClassRange8bit;
                                    unint64_t v77 = &off_100119F48;
                                    LOBYTE(v73) = v70;
                                    BYTE1(v73) = v70;
                                    BYTE2(v73) = v70;
                                    goto LABEL_54;
                                  }
                                  sub_10000CD54();
                                  swift_allocError();
                                  *(unsigned char *)uint64_t v58 = 1;
                                  *(void *)(v58 + 8) = 0;
                                  *(void *)(v58 + 16) = 0xE000000000000000;
                                  *(void *)(v58 + 24) = 0xD00000000000002ALL;
                                  *(void *)(v58 + 32) = 0x80000001000E2E50;
                                  *(void *)(v58 + 40) = 0xD00000000000001CLL;
                                  *(void *)(v58 + 48) = 0x80000001000E6810;
                                  uint64_t v59 = 182;
                                }
                                else
                                {
                                  sub_10000CD54();
                                  swift_allocError();
                                  *(unsigned char *)uint64_t v58 = 1;
                                  *(void *)(v58 + 8) = 0;
                                  *(void *)(v58 + 16) = 0xE000000000000000;
                                  *(void *)(v58 + 24) = 0xD00000000000002ALL;
                                  *(void *)(v58 + 32) = 0x80000001000E2E50;
                                  *(void *)(v58 + 40) = 0xD00000000000001CLL;
                                  *(void *)(v58 + 48) = 0x80000001000E6810;
                                  uint64_t v59 = 181;
                                }
                              }
                              else
                              {
                                sub_10000CD54();
                                swift_allocError();
                                *(unsigned char *)uint64_t v58 = 1;
                                *(void *)(v58 + 8) = 0;
                                *(void *)(v58 + 16) = 0xE000000000000000;
                                *(void *)(v58 + 24) = 0xD00000000000002ALL;
                                *(void *)(v58 + 32) = 0x80000001000E2E50;
                                *(void *)(v58 + 40) = 0xD00000000000001CLL;
                                *(void *)(v58 + 48) = 0x80000001000E6810;
                                uint64_t v59 = 180;
                              }
                            }
LABEL_70:
                            *(void *)(v58 + 56) = v59;
                            swift_willThrow();

                            goto LABEL_71;
                          }
                          sub_10001A9B8((uint64_t)v84, (uint64_t)v72);
                          sub_10000AC7C(&qword_100127EB8);
                          if (!swift_dynamicCast())
                          {
                            sub_10000CD54();
                            swift_allocError();
                            *(unsigned char *)uint64_t v58 = 1;
                            *(void *)(v58 + 8) = 0;
                            *(void *)(v58 + 16) = 0xE000000000000000;
                            *(void *)(v58 + 24) = 0xD00000000000002ALL;
                            *(void *)(v58 + 32) = 0x80000001000E2E50;
                            *(void *)(v58 + 40) = 0xD00000000000001CLL;
                            *(void *)(v58 + 48) = 0x80000001000E6810;
                            uint64_t v59 = 185;
                            goto LABEL_70;
                          }
                          sub_10001A9B8((uint64_t)v81, (uint64_t)v72);
                          if (!swift_dynamicCast())
                          {
                            sub_10000CD54();
                            swift_allocError();
                            *(unsigned char *)uint64_t v58 = 1;
                            *(void *)(v58 + 8) = 0;
                            *(void *)(v58 + 16) = 0xE000000000000000;
                            *(void *)(v58 + 24) = 0xD00000000000002ALL;
                            *(void *)(v58 + 32) = 0x80000001000E2E50;
                            *(void *)(v58 + 40) = 0xD00000000000001CLL;
                            *(void *)(v58 + 48) = 0x80000001000E6810;
                            uint64_t v59 = 186;
                            goto LABEL_70;
                          }
                          sub_10001A9B8((uint64_t)v78, (uint64_t)v72);
                          if (!swift_dynamicCast())
                          {
                            sub_10000CD54();
                            swift_allocError();
                            *(unsigned char *)uint64_t v58 = 1;
                            *(void *)(v58 + 8) = 0;
                            *(void *)(v58 + 16) = 0xE000000000000000;
                            *(void *)(v58 + 24) = 0xD00000000000002ALL;
                            *(void *)(v58 + 32) = 0x80000001000E2E50;
                            *(void *)(v58 + 40) = 0xD00000000000001CLL;
                            *(void *)(v58 + 48) = 0x80000001000E6810;
                            uint64_t v59 = 187;
                            goto LABEL_70;
                          }
                          unint64_t v76 = &type metadata for AudioClassRange16bit;
                          unint64_t v77 = &off_100119F80;
                          LOWORD(v73) = v70;
                          HIWORD(v73) = v70;
                          LOWORD(v74) = v70;
                          goto LABEL_54;
                        }
LABEL_46:
                        sub_10001A9B8((uint64_t)v84, (uint64_t)v72);
                        sub_10000AC7C(&qword_100127EB8);
                        if (!swift_dynamicCast())
                        {
                          sub_10000CD54();
                          swift_allocError();
                          *(unsigned char *)uint64_t v58 = 1;
                          *(void *)(v58 + 8) = 0;
                          *(void *)(v58 + 16) = 0xE000000000000000;
                          *(void *)(v58 + 24) = 0xD00000000000002ALL;
                          *(void *)(v58 + 32) = 0x80000001000E2E50;
                          *(void *)(v58 + 40) = 0xD00000000000001CLL;
                          *(void *)(v58 + 48) = 0x80000001000E6810;
                          uint64_t v59 = 192;
                          goto LABEL_70;
                        }
                        sub_10001A9B8((uint64_t)v81, (uint64_t)v72);
                        if (!swift_dynamicCast())
                        {
                          sub_10000CD54();
                          swift_allocError();
                          *(unsigned char *)uint64_t v58 = 1;
                          *(void *)(v58 + 8) = 0;
                          *(void *)(v58 + 16) = 0xE000000000000000;
                          *(void *)(v58 + 24) = 0xD00000000000002ALL;
                          *(void *)(v58 + 32) = 0x80000001000E2E50;
                          *(void *)(v58 + 40) = 0xD00000000000001CLL;
                          *(void *)(v58 + 48) = 0x80000001000E6810;
                          uint64_t v59 = 193;
                          goto LABEL_70;
                        }
                        sub_10001A9B8((uint64_t)v78, (uint64_t)v72);
                        if (!swift_dynamicCast())
                        {
                          sub_10000CD54();
                          swift_allocError();
                          *(unsigned char *)uint64_t v58 = 1;
                          *(void *)(v58 + 8) = 0;
                          *(void *)(v58 + 16) = 0xE000000000000000;
                          *(void *)(v58 + 24) = 0xD00000000000002ALL;
                          *(void *)(v58 + 32) = 0x80000001000E2E50;
                          *(void *)(v58 + 40) = 0xD00000000000001CLL;
                          *(void *)(v58 + 48) = 0x80000001000E6810;
                          uint64_t v59 = 194;
                          goto LABEL_70;
                        }
                        unint64_t v76 = &type metadata for AudioClassRange32bit;
                        unint64_t v77 = &off_100119FB8;
                        unint64_t v73 = v70;
                        int v74 = v70;
                        int v75 = v70;
LABEL_54:
                        sub_10001A9B8((uint64_t)&v73, (uint64_t)v72);
                        sub_10008571C(v66, v72);
                        if (v17)
                        {

                          sub_10001ABC4((uint64_t)&v73);
LABEL_71:
                          sub_10001ABC4((uint64_t)v78);
                          goto LABEL_35;
                        }
                        goto LABEL_66;
                      }
                      goto LABEL_74;
                    }
                  }
                  __break(1u);
LABEL_74:
                  __break(1u);
                  return;
                }
LABEL_65:
                __break(1u);
LABEL_66:

                sub_10001ABC4((uint64_t)&v73);
                sub_10001ABC4((uint64_t)v78);
                sub_10001ABC4((uint64_t)v81);
                sub_10001ABC4((uint64_t)v84);
                return;
              }
            }
            __break(1u);
            goto LABEL_65;
          }

          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v35 = 28;
          *(void *)(v35 + 8) = 0;
          *(void *)(v35 + 16) = 0xE000000000000000;
          *(void *)(v35 + 24) = 0xD00000000000002ALL;
          *(void *)(v35 + 32) = 0x80000001000E2E50;
          *(void *)(v35 + 40) = 0xD00000000000001CLL;
          *(void *)(v35 + 48) = 0x80000001000E6810;
          *(void *)(v35 + 56) = 150;
          swift_willThrow();

          goto LABEL_16;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    __break(1u);
    goto LABEL_45;
  }
}

uint64_t sub_1000A8FF8(int a1, uint64_t a2)
{
  sub_10000AC7C(&qword_100127420);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000EA840;
  *(void *)(v5 + 56) = &type metadata for Int32;
  *(void *)(v5 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v5 + 32) = a1;
  *(void *)(v5 + 96) = &type metadata for Int;
  *(void *)(v5 + 104) = &protocol witness table for Int;
  *(void *)(v5 + 72) = a2;
  uint64_t v6 = String.init(format:_:)();
  sub_10002E804(v6, v7, 0xD000000000000029, (void *)0x80000001000E20F0, 0xD00000000000001CLL, 0x80000001000E6810, 222);
  swift_bridgeObjectRelease();
  if (a2 == 2)
  {
    swift_beginAccess();
    id v8 = *(void **)(v2 + 216);
    if (v8) {
      return sub_1000A7508(*(_WORD *)[v8 bytes]);
    }
  }
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v10 = 2;
  *(void *)(v10 + 8) = 0;
  *(void *)(v10 + 16) = 0xE000000000000000;
  *(void *)(v10 + 24) = 0xD000000000000029;
  *(void *)(v10 + 32) = 0x80000001000E20F0;
  *(void *)(v10 + 40) = 0xD00000000000001CLL;
  *(void *)(v10 + 48) = 0x80000001000E6810;
  *(void *)(v10 + 56) = 227;
  return swift_willThrow();
}

uint64_t type metadata accessor for ADC1Function()
{
  return self;
}

uint64_t sub_1000A91C0()
{
  return 133;
}

uint64_t sub_1000A91C8(int a1, uint64_t a2)
{
  uint64_t result = sub_1000A8FF8(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t sub_1000A91F0()
{
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v0 = 1;
  *(void *)(v0 + 8) = 0;
  *(void *)(v0 + 16) = 0xE000000000000000;
  *(void *)(v0 + 24) = 0xD000000000000021;
  *(void *)(v0 + 32) = 0x80000001000E2140;
  *(void *)(v0 + 40) = 0xD00000000000001CLL;
  *(void *)(v0 + 48) = 0x80000001000E6810;
  *(void *)(v0 + 56) = 206;
  return swift_willThrow();
}

uint64_t sub_1000A9284(int a1, unint64_t a2, char a3, void *a4)
{
  sub_1000A80D0(a1 & 0xFFFFFF, a2, a3 & 1, a4);
  return v4 & 0x1FF;
}

void sub_1000A92B8(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, _OWORD *a3@<X8>)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 32;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD000000000000030;
    *(void *)(v11 + 32) = v95 | 0x8000000000000000;
    *(void *)(v11 + 40) = 0xD00000000000001CLL;
    *(void *)(v11 + 48) = v94 | 0x8000000000000000;
    uint64_t v12 = 336;
LABEL_13:
    *(void *)(v11 + 56) = v12;
    swift_willThrow();
    return;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  __int16 v9 = *(_WORD *)(a1 + 40);
  sub_10008854C(v8, v9);
  if (v3) {
    return;
  }
  if (v10[2] != a2)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 75;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD000000000000030;
    *(void *)(v11 + 32) = 0x80000001000E21F0;
    *(void *)(v11 + 40) = 0xD00000000000001CLL;
    *(void *)(v11 + 48) = 0x80000001000E6810;
    uint64_t v12 = 236;
    goto LABEL_13;
  }
  if (!v10[3])
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 74;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD000000000000030;
    *(void *)(v11 + 32) = 0x80000001000E21F0;
    *(void *)(v11 + 40) = 0xD00000000000001CLL;
    *(void *)(v11 + 48) = 0x80000001000E6810;
    uint64_t v12 = 237;
    goto LABEL_13;
  }
  if (v10[5] != 1)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 72;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD000000000000030;
    *(void *)(v11 + 32) = 0x80000001000E21F0;
    *(void *)(v11 + 40) = 0xD00000000000001CLL;
    *(void *)(v11 + 48) = 0x80000001000E6810;
    uint64_t v12 = 238;
    goto LABEL_13;
  }
  if (v10[6] != 2)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 73;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD000000000000030;
    *(void *)(v11 + 32) = 0x80000001000E21F0;
    *(void *)(v11 + 40) = 0xD00000000000001CLL;
    *(void *)(v11 + 48) = 0x80000001000E6810;
    uint64_t v12 = 239;
    goto LABEL_13;
  }
  if (v10[7])
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 76;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD000000000000030;
    *(void *)(v11 + 32) = 0x80000001000E21F0;
    *(void *)(v11 + 40) = 0xD00000000000001CLL;
    *(void *)(v11 + 48) = 0x80000001000E6810;
    uint64_t v12 = 240;
    goto LABEL_13;
  }
  __int16 v118 = v9;
  uint64_t v97 = v10[4];
  uint64_t v98 = (uint64_t)v10;
  int v136 = &_swiftEmptySetSingleton;
  long long v134 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  uint64_t v13 = 0;
  char v108 = 0;
  int v14 = 0;
  int v115 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v102 = 0;
  uint64_t v15 = 0;
  uint64_t v100 = 0;
  char v101 = 0;
  uint64_t v128 = 0;
  uint64_t v117 = -(uint64_t)v4;
  uint64_t v106 = a1 + 41;
  unint64_t v107 = v4;
  char v16 = _swiftEmptyArrayStorage;
  __int16 v103 = -256;
  BOOL v96 = 1;
  unint64_t v95 = (unint64_t)"rol:onInterface:)";
  unint64_t v94 = (unint64_t)"_TtC9AUASDCore12ADC1Function";
  char v111 = 1;
  char v112 = 1;
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v99 = a3;
  unint64_t v18 = 0;
  uint64_t v116 = v8;
  do
  {
    char v114 = v108 & 1;
    unint64_t v19 = v107;
    if (v18 > v107) {
      unint64_t v19 = v18;
    }
    uint64_t v122 = -(uint64_t)v19;
    uint64_t v20 = (unsigned __int8 *)(v106 + 16 * v18++);
    uint64_t v123 = v15;
    NSString v21 = v128;
    int v109 = v14;
    char v22 = v115;
    while (1)
    {
      uint64_t v128 = v21;
      if (v122 + v18 == 1) {
        goto LABEL_148;
      }
      int v23 = *v20;
      uint64_t v126 = v20;
      __int16 v24 = *(v20 - 1) | (unsigned __int16)((_WORD)v23 << 8);
      uint64_t v129 = *(void *)(v20 - 9);
      if (_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(v129, v24, v8, v118)) {
        goto LABEL_17;
      }
      if (v23 != 17) {
        break;
      }
      unint64_t v124 = v18;
      if (qword_1001268F0 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_10000AD60(v25, (uint64_t)qword_10012B1F8);
      char v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      uint64_t v121 = v13;
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        v131[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136446210;
        uint64_t v29 = sub_10002E8A0(0xD000000000000027, 0x80000001000E6930, 0xD000000000000030, (void *)0x80000001000E21F0);
        *(void *)(v28 + 4) = sub_1000192BC(v29, v30, v131);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v8 = v116;
        swift_slowDealloc();
      }

      NSString v21 = (const IOUSBEndpointDescriptor *)v129;
      if (v128)
      {
        uint64_t v31 = (uint64_t)v136;
        uint64_t v32 = v136[2];
        if (v32)
        {
          uint64_t v113 = v16;
          uint64_t v33 = v17;
          sub_10000AC7C(&qword_100127CC8);
          uint64_t v34 = (void *)swift_allocObject();
          size_t v35 = j__malloc_size(v34);
          v34[2] = v32;
          v34[3] = 2 * v35 - 64;
          uint64_t v110 = sub_10005CF70(v131, (unsigned char *)v34 + 32, v32, v31);
          uint64_t v13 = v131[0];
          uint64_t v36 = (void *)v131[1];
          uint64_t v37 = v131[2];
          char v22 = v132;
          uint64_t v17 = v133;
          swift_bridgeObjectRetain_n();
          sub_10001D208();
          if (v110 != (void *)v32)
          {
            __break(1u);
            goto LABEL_152;
          }
          swift_bridgeObjectRelease();
          uint64_t v17 = v33;
          char v16 = v113;
          char v22 = v115;
          int v14 = v109;
        }
        else
        {
          uint64_t v34 = _swiftEmptyArrayStorage;
        }
        uint64_t v8 = v116;
        if (!v34[2])
        {
          swift_release();
          uint64_t v34 = 0;
        }
        if (!v16[2])
        {
          swift_bridgeObjectRelease();
          char v16 = 0;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = sub_100058E64(0, v17[2] + 1, 1, v17);
        }
        unint64_t v39 = v17[2];
        unint64_t v38 = v17[3];
        if (v39 >= v38 >> 1) {
          uint64_t v17 = sub_100058E64((void *)(v38 > 1), v39 + 1, 1, v17);
        }
        v17[2] = v39 + 1;
        uint64_t v40 = &v17[10 * v39];
        v40[4] = v128;
        v40[5] = v123;
        v40[6] = v119;
        *((unsigned char *)v40 + 56) = v14;
        *((unsigned char *)v40 + 57) = v111 & 1;
        *((unsigned char *)v40 + 64) = v114;
        v40[9] = v121;
        *((unsigned char *)v40 + 80) = v22;
        *((unsigned char *)v40 + 81) = v112 & 1;
        v40[11] = v16;
        v40[12] = v120;
        char v16 = _swiftEmptyArrayStorage;
        v40[13] = v34;
        uint64_t v119 = 0;
        uint64_t v120 = 0;
        uint64_t v123 = 0;
        NSString v21 = (const IOUSBEndpointDescriptor *)v129;
      }
      BOOL v41 = IOUSBGetEndpointDirection(v21) == 1 && v21->wMaxPacketSize < 9u;
      if (IOUSBGetEndpointType(v21) != 1)
      {
        sub_10005B1DC(v131, 54);
        NSString v21 = (const IOUSBEndpointDescriptor *)v129;
      }
      if (!v41 && !IOUSBGetEndpointSynchronizationType(v21))
      {
        sub_10005B1DC(v131, 85);
        NSString v21 = (const IOUSBEndpointDescriptor *)v129;
      }
      uint64_t v13 = 0;
      unint64_t v18 = v124 + 1;
      uint64_t v20 = v126 + 16;
      if (v117 + v124 + 1 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = 0;
        uint64_t v31 = v123;
        goto LABEL_110;
      }
    }
    int v42 = v23 - 18;
    uint64_t v43 = v129;
    uint64_t v15 = v129;
    switch(v42)
    {
      case 0:
        unint64_t v125 = v18;
        if (v128)
        {
          uint64_t v44 = (uint64_t)v136;
          uint64_t v45 = v136[2];
          if (v45)
          {
            sub_10000AC7C(&qword_100127CC8);
            uint64_t v46 = (void *)swift_allocObject();
            size_t v47 = j__malloc_size(v46);
            v46[2] = v45;
            v46[3] = 2 * v47 - 64;
            uint64_t v127 = sub_10005CF70(v131, (unsigned char *)v46 + 32, v45, v44);
            swift_bridgeObjectRetain_n();
            sub_10001D208();
            if (v127 != (void *)v45)
            {
              __break(1u);
              JUMPOUT(0x1000AA3C0);
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v46 = _swiftEmptyArrayStorage;
          }
          if (!v46[2])
          {
            swift_release();
            uint64_t v46 = 0;
          }
          if (!v16[2])
          {
            swift_bridgeObjectRelease();
            char v16 = 0;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v17 = sub_100058E64(0, v17[2] + 1, 1, v17);
          }
          unint64_t v65 = v17[2];
          unint64_t v64 = v17[3];
          long long v66 = v46;
          if (v65 >= v64 >> 1) {
            uint64_t v17 = sub_100058E64((void *)(v64 > 1), v65 + 1, 1, v17);
          }
          uint64_t v15 = 0;
          v17[2] = v65 + 1;
          uint64_t v67 = &v17[10 * v65];
          v67[4] = v128;
          v67[5] = v123;
          v67[6] = v119;
          *((unsigned char *)v67 + 56) = v14;
          *((unsigned char *)v67 + 57) = v111 & 1;
          int v63 = v115;
          *((unsigned char *)v67 + 64) = v114;
          v67[9] = v13;
          *((unsigned char *)v67 + 80) = v115;
          *((unsigned char *)v67 + 81) = v112 & 1;
          v67[11] = v16;
          v67[12] = v120;
          int v61 = v14;
          unsigned int v62 = _swiftEmptyArrayStorage;
          v67[13] = v66;
          uint64_t v119 = 0;
          uint64_t v120 = 0;
          uint64_t v13 = 0;
        }
        else
        {
          int v61 = v14;
          unsigned int v62 = v16;
          uint64_t v15 = v123;
          int v63 = v115;
        }
        BOOL v68 = (const IOUSBEndpointDescriptor *)v129;
        int v69 = *(unsigned __int8 *)(v129 + 8);
        BOOL v70 = v69 == 0;
        BOOL v71 = *(unsigned char *)(v129 + 8) == 0;
        int v72 = v69 | 0x80;
        if (!v70) {
          int v63 = v72;
        }
        int v115 = v63;
        BOOL v73 = *(unsigned char *)(v129 + 7) == 0;
        if (*(unsigned char *)(v129 + 7)) {
          int v61 = *(unsigned __int8 *)(v129 + 7);
        }
        BOOL v74 = IOUSBGetEndpointDirection((const IOUSBEndpointDescriptor *)v129) == 1
           && *(unsigned __int16 *)(v129 + 4) < 9u;
        if (IOUSBGetEndpointType((const IOUSBEndpointDescriptor *)v129) != 1)
        {
          sub_10005B1DC(v131, 54);
          BOOL v68 = (const IOUSBEndpointDescriptor *)v129;
        }
        v112 &= v71;
        v111 &= v73;
        if (v74)
        {
          uint64_t v128 = v68;
          char v16 = v62;
          int v14 = v61;
          uint64_t v8 = v116;
          unint64_t v18 = v125;
        }
        else
        {
          char v16 = v62;
          unint64_t v18 = v125;
          if (!IOUSBGetEndpointSynchronizationType(v68)) {
            sub_10005B1DC(v131, 85);
          }
          uint64_t v128 = v68;
          int v14 = v61;
          uint64_t v8 = v116;
        }
        continue;
      case 1:
        continue;
      case 2:
        uint64_t v119 = v129;
        break;
      case 42:
        int v48 = *(unsigned __int16 *)(v129 + 5);
        unsigned int v49 = v48 - 1;
        if (v48 == 8193) {
          char v50 = 5;
        }
        else {
          char v50 = 0;
        }
        if (v49 < 5) {
          char v50 = 0x304020101uLL >> (8 * v49);
        }
        char v101 = v50;
        uint64_t v100 = *(unsigned __int8 *)(v129 + 3);
        break;
      case 45:
        char v51 = *(unsigned char *)(v129 + 3);
        if ((v51 & 1) == 0) {
          goto LABEL_70;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v16 = sub_100058F88(0, v16[2] + 1, 1, v16);
        }
        unint64_t v53 = v16[2];
        unint64_t v52 = v16[3];
        if (v53 >= v52 >> 1) {
          char v16 = sub_100058F88((void *)(v52 > 1), v53 + 1, 1, v16);
        }
        v16[2] = v53 + 1;
        unint64_t v54 = (char *)v16 + 3 * v53;
        v54[34] = -61;
        *((_WORD *)v54 + 16) = 257;
        if (!v96) {
          goto LABEL_150;
        }
        BOOL v96 = v128 == 0;
        uint64_t v43 = v129;
        char v51 = *(unsigned char *)(v129 + 3);
LABEL_70:
        if ((v51 & 2) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v16 = sub_100058F88(0, v16[2] + 1, 1, v16);
          }
          unint64_t v56 = v16[2];
          unint64_t v55 = v16[3];
          if (v56 >= v55 >> 1) {
            char v16 = sub_100058F88((void *)(v55 > 1), v56 + 1, 1, v16);
          }
          v16[2] = v56 + 1;
          uint64_t v57 = (char *)v16 + 3 * v56;
          v57[34] = -64;
          *((_WORD *)v57 + 16) = 577;
          uint64_t v43 = v129;
        }
        int v58 = *(unsigned __int8 *)(v43 + 4);
        if (v58 == 2)
        {
          uint64_t v13 = *(unsigned __int16 *)(v43 + 5);
          char v108 = 1;
        }
        else if (v58 == 1)
        {
          char v108 = 0;
          uint64_t v13 = *(unsigned __int16 *)(v43 + 5);
        }
        break;
      case 46:
        swift_bridgeObjectRelease();
        uint64_t v59 = sub_1000BAC80((unsigned char *)v129, v24);
        goto LABEL_81;
      case 47:
        swift_bridgeObjectRelease();
        uint64_t v59 = sub_1000BB924((unsigned char *)v129, v24);
LABEL_81:
        uint64_t v120 = v60;
        __int16 v103 = 0;
        uint64_t v105 = BYTE5(v59);
        uint64_t v104 = BYTE6(v59);
        uint64_t v15 = v123;
        uint64_t v102 = BYTE4(v59);
        continue;
      default:
        sub_10005B1DC(v131, 33);
        break;
    }
LABEL_17:
    uint64_t v15 = v123;
  }
  while (v117 + v18);
  swift_bridgeObjectRelease();
  NSString v21 = v128;
  if (v128)
  {
    LOBYTE(v109) = v14;
    uint64_t v31 = v15;
    char v22 = v115;
LABEL_110:
    swift_bridgeObjectRetain();
    uint64_t v75 = swift_bridgeObjectRetain();
    uint64_t v36 = sub_10005AD1C(v75);
    swift_bridgeObjectRelease();
    if (!v36[2])
    {
      swift_release();
      uint64_t v36 = 0;
    }
    if (v16[2])
    {
      uint64_t v32 = (uint64_t)v16;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v32 = 0;
    }
    uint64_t v37 = (uint64_t)v21;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_152:
    }
      uint64_t v17 = sub_100058E64(0, v17[2] + 1, 1, v17);
    unint64_t v77 = v17[2];
    unint64_t v76 = v17[3];
    unint64_t v78 = v77 + 1;
    if (v77 >= v76 >> 1) {
      uint64_t v17 = sub_100058E64((void *)(v76 > 1), v77 + 1, 1, v17);
    }
    v17[2] = v78;
    uint64_t v130 = v17 + 2;
    id v79 = &v17[10 * v77];
    v79[4] = v37;
    v79[5] = v31;
    v79[6] = v119;
    *((unsigned char *)v79 + 56) = v109;
    *((unsigned char *)v79 + 57) = v111 & 1;
    *((unsigned char *)v79 + 64) = v108 & 1;
    v79[9] = v13;
    *((unsigned char *)v79 + 80) = v22;
    *((unsigned char *)v79 + 81) = v112 & 1;
    v79[11] = v32;
    v79[12] = v120;
    v79[13] = v36;
    goto LABEL_119;
  }
  swift_bridgeObjectRelease();
  unint64_t v78 = v17[2];
  uint64_t v130 = v17 + 2;
  if (!v78)
  {
LABEL_133:
    sub_10005B1DC(v131, 81);
    goto LABEL_134;
  }
LABEL_119:
  unint64_t v80 = v17 + 13;
  swift_bridgeObjectRetain();
  BOOL v81 = 0;
  uint64_t v82 = 1;
  while (v81)
  {
    if (v78 == v82) {
      goto LABEL_131;
    }
LABEL_125:
    BOOL v81 = 1;
LABEL_122:
    v80 += 10;
    if (__OFADD__(v82++, 1)) {
      goto LABEL_149;
    }
  }
  uint64_t v86 = v17;
  uint64_t v87 = (const IOUSBEndpointDescriptor *)*(v80 - 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!IOUSBGetEndpointUsageType(v87) && v87->wMaxPacketSize >= 9u)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = v86;
    if (v78 == v82)
    {
LABEL_131:
      swift_bridgeObjectRelease();
      goto LABEL_134;
    }
    goto LABEL_125;
  }
  int v88 = IOUSBGetEndpointUsageType(v87);
  if (v88)
  {
    int v84 = v88;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned int wMaxPacketSize = v87->wMaxPacketSize;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v84 = wMaxPacketSize < 9;
  }
  uint64_t v17 = v86;
  BOOL v81 = v84 == 2;
  if (v78 != v82) {
    goto LABEL_122;
  }
  swift_bridgeObjectRelease();
  if (v84 != 2) {
    goto LABEL_133;
  }
LABEL_134:
  if (*v130 != v97) {
    sub_10005B1DC(v131, 82);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v89 = sub_10005AD1C((uint64_t)v134);
  swift_bridgeObjectRelease();
  if (HIBYTE(v103) == 255) {
    uint64_t v90 = 0;
  }
  else {
    uint64_t v90 = v102;
  }
  if (HIBYTE(v103) == 255) {
    __int16 v91 = 0;
  }
  else {
    __int16 v91 = v103;
  }
  sub_100060B54(v98, v101, v100, v105, v104, v90, v91, (uint64_t)v17, (uint64_t)v135, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v89);
  long long v92 = v135[3];
  v99[2] = v135[2];
  v99[3] = v92;
  v99[4] = v135[4];
  long long v93 = v135[1];
  *uint64_t v99 = v135[0];
  v99[1] = v93;
}

uint64_t sub_1000AA480(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!((unint64_t)*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v21 + v5;
    if (!__OFADD__(v21, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      uint64_t *v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v12 = v11 + 32;
  uint64_t v13 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for ActiveStreamingInterface();
  swift_arrayDestroy();
  if (v5)
  {
    if ((unint64_t)*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = v22 - v2;
      if (!__OFSUB__(v22, v2))
      {
LABEL_17:
        if (v15 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        char v16 = (char *)(v12 + 8 * v2);
        if (v4 != v2 || v13 >= &v16[8 * v15]) {
          memmove(v13, v16, 8 * v15);
        }
        if (!((unint64_t)*v3 >> 62))
        {
          uint64_t v17 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v18 = v17 + v5;
          if (!__OFADD__(v17, v5))
          {
LABEL_23:
            *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v18 = v23 + v5;
        if (!__OFADD__(v23, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v15 = v14 - v2;
      if (!__OFSUB__(v14, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1000AA78C(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_100058C18(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  sub_10000AC7C(&qword_100128F58);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    char v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000AA900()
{
  return sub_1000AA938();
}

uint64_t sub_1000AA91C()
{
  return sub_1000AA938();
}

uint64_t sub_1000AA938()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self entryFromPath:v0];

  if (!v1) {
    return 0;
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 propertyForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_10001A8B0((uint64_t)v8, (uint64_t)v9);
  if (!v10)
  {

    sub_100038E5C((uint64_t)v9);
    return 0;
  }
  sub_1000AAAA0();
  if ((swift_dynamicCast() & 1) == 0)
  {

    return 0;
  }
  id v4 = v7;
  int v5 = *(_DWORD *)[v4 bytes];

  if (v5) {
    return 2;
  }
  else {
    return 1;
  }
}

unint64_t sub_1000AAAA0()
{
  unint64_t result = qword_10012A190;
  if (!qword_10012A190)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10012A190);
  }
  return result;
}

uint64_t sub_1000AAAE0(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  unint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  __chkstk_darwin(v13);
  uint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  os_log_type_t v27 = v15;
  uint64_t v43 = ContiguousArray.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  BOOL v41 = v19;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    __int16 v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

uint64_t sub_1000AAEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void *)(a7 - 8);
  uint64_t v13 = __chkstk_darwin(a5);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v13, v15);
  if (v10) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a10, v15, a7);
  }
  return result;
}

uint64_t static DescriptorUtils.readBytes<A>(type:from:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = sub_1000AC718(a3, a1, *(unsigned char **)a1, *(void *)(a1 + 8), a2);
  if (!v3)
  {
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v6;
  }
  return result;
}

uint64_t sub_1000AAFE8(void *a1, unsigned int a2)
{
  char v2 = a2;
  LODWORD(v21) = a2 >> 8;
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000AC7C(&qword_10012A280);
  uint64_t v8 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A974(a1, a1[3]);
  sub_10008E5E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  unint64_t v11 = sub_1000091EC((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for IOUSBDescriptorHeader(0);
  *((void *)&v27 + 1) = v12;
  LOBYTE(v26[0]) = v2;
  BYTE1(v26[0]) = (_BYTE)v21;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v14 = v22;
  uint64_t v15 = sub_1000AD858(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (v16)
  {
    Swift::Int v21 = v15;
    uint64_t v22 = v8;
    for (uint64_t i = (uint64_t)(v15 + 4); ; i += 56)
    {
      sub_1000ADA20(i, (uint64_t)v26);
      uint64_t v18 = v26[0];
      uint64_t v19 = v26[1];
      sub_10000CF6C(&v27, (uint64_t)v25);
      sub_10001A974(v25, v25[3]);
      uint64_t v23 = v18;
      uint64_t v24 = v19;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v14) {
        break;
      }
      swift_bridgeObjectRelease();
      sub_10001ABC4((uint64_t)v25);
      if (!--v16)
      {
        swift_bridgeObjectRelease();
        uint64_t v8 = v22;
        return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v28);
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v28);
    swift_bridgeObjectRelease();
    return sub_10001ABC4((uint64_t)v25);
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v28);
  }
}

Swift::Int IOUSBDescriptorHeader.hashValue.getter(unsigned int a1)
{
  Hasher.init(_seed:)();
  sub_10004CE74((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1000AB334()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  sub_10004CE74((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance IOUSBDescriptorHeader(uint64_t a1)
{
  return sub_10004CE74(a1, *v1);
}

Swift::Int sub_1000AB384()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  sub_10004CE74((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IOUSBDescriptorHeader(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10004461C(*a1, *a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IOUSBDescriptorHeader(void *a1)
{
  return sub_1000AAFE8(a1, *v1);
}

Swift::Int ADCClassSpecificDescriptorHeader.hashValue.getter(int a1)
{
  Hasher.init(_seed:)();
  sub_100047C00((uint64_t)v3, a1 & 0xFFFFFF);
  return Hasher._finalize()();
}

Swift::Int sub_1000AB438()
{
  int v1 = *((unsigned __int8 *)v0 + 2);
  int v2 = *v0;
  Hasher.init(_seed:)();
  sub_100047C00((uint64_t)v4, v2 | (v1 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADCClassSpecificDescriptorHeader(uint64_t a1)
{
  return sub_100047C00(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16));
}

Swift::Int sub_1000AB494()
{
  int v1 = *((unsigned __int8 *)v0 + 2);
  int v2 = *v0;
  Hasher.init(_seed:)();
  sub_100047C00((uint64_t)v4, v2 | (v1 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADCClassSpecificDescriptorHeader(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10003D990(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

Swift::Int ADC3HighCapabilityDescriptor.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100049C50((uint64_t)v3, a1 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000AB540()
{
  uint64_t v1 = *((unsigned __int16 *)v0 + 2);
  uint64_t v2 = *v0;
  Hasher.init(_seed:)();
  sub_100049C50((uint64_t)v4, v2 | (v1 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3HighCapabilityDescriptor(uint64_t a1)
{
  return sub_100049C50(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32));
}

Swift::Int sub_1000AB59C()
{
  uint64_t v1 = *((unsigned __int16 *)v0 + 2);
  uint64_t v2 = *v0;
  Hasher.init(_seed:)();
  sub_100049C50((uint64_t)v4, v2 | (v1 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3HighCapabilityDescriptor(unsigned int *a1, unsigned int *a2)
{
  return sub_100040404(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32), *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
}

Swift::Int ADC3ClusterDescriptorHeader.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_10004AE38((uint64_t)v3, a1 & 0xFFFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000AB648()
{
  uint64_t v1 = *((unsigned __int16 *)v0 + 2);
  uint64_t v2 = *((unsigned __int8 *)v0 + 6);
  uint64_t v3 = *v0;
  Hasher.init(_seed:)();
  sub_10004AE38((uint64_t)v5, v3 | (v1 << 32) | (v2 << 48));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterDescriptorHeader(uint64_t a1)
{
  return sub_10004AE38(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48));
}

Swift::Int sub_1000AB6BC()
{
  uint64_t v1 = *((unsigned __int16 *)v0 + 2);
  uint64_t v2 = *((unsigned __int8 *)v0 + 6);
  uint64_t v3 = *v0;
  Hasher.init(_seed:)();
  sub_10004AE38((uint64_t)v5, v3 | (v1 << 32) | (v2 << 48));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterDescriptorHeader(unsigned int *a1, unsigned int *a2)
{
  return sub_100041BF8(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48), *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48));
}

Swift::Int ADC3ClusterDescriptorSegmentHeader.hashValue.getter(int a1)
{
  return sub_1000AB8D0(a1, (void (*)(unsigned char *, void))sub_100047A00);
}

Swift::Int sub_1000AB758(uint64_t a1, uint64_t a2)
{
  return sub_1000AB938(a1, a2, (void (*)(unsigned char *, void))sub_100047A00);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterDescriptorSegmentHeader(uint64_t a1)
{
  return sub_100047A00(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16));
}

Swift::Int sub_1000AB780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AB9BC(a1, a2, a3, (void (*)(unsigned char *, void))sub_100047A00);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterDescriptorSegmentHeader(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000ABA2C(a1, a2, a3, a4, (uint64_t (*)(void, void))sub_10003D6FC);
}

Swift::Int ADC3ClusterChannelInformationSegment.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100047630((uint64_t)v3, a1 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000AB7F8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned int *)(v0 + 1);
  Hasher.init(_seed:)();
  sub_100047630((uint64_t)v4, v1 | (v2 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterChannelInformationSegment(uint64_t a1)
{
  return sub_100047630(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

Swift::Int sub_1000AB854()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned int *)(v0 + 1);
  Hasher.init(_seed:)();
  sub_100047630((uint64_t)v4, v1 | (v2 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterChannelInformationSegment(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10003D228(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16), *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16));
}

Swift::Int ADC3ClusterEndSegment.hashValue.getter(int a1)
{
  return sub_1000AB8D0(a1, (void (*)(unsigned char *, void))sub_10004D030);
}

Swift::Int sub_1000AB8D0(int a1, void (*a2)(unsigned char *, void))
{
  Hasher.init(_seed:)();
  a2(v5, a1 & 0xFFFFFF);
  return Hasher._finalize()();
}

Swift::Int sub_1000AB920(uint64_t a1, uint64_t a2)
{
  return sub_1000AB938(a1, a2, (void (*)(unsigned char *, void))sub_10004D030);
}

Swift::Int sub_1000AB938(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, void))
{
  int v5 = *v3;
  int v6 = *((unsigned __int8 *)v3 + 2);
  Hasher.init(_seed:)();
  a3(v8, v5 | (v6 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterEndSegment(uint64_t a1)
{
  return sub_10004D030(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16));
}

Swift::Int sub_1000AB9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AB9BC(a1, a2, a3, (void (*)(unsigned char *, void))sub_10004D030);
}

Swift::Int sub_1000AB9BC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, void))
{
  int v6 = *v4;
  int v7 = *((unsigned __int8 *)v4 + 2);
  Hasher.init(_seed:)();
  a4(v9, v6 | (v7 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterEndSegment(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000ABA2C(a1, a2, a3, a4, (uint64_t (*)(void, void))sub_10004482C);
}

uint64_t sub_1000ABA2C(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  return a5(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

Swift::Int ADC3ClusterChannelAmbiosonicSegment.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100047804((uint64_t)v3, a1 & 0xFFFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000ABA94()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 2);
  uint64_t v3 = *(unsigned int *)((char *)v0 + 3);
  Hasher.init(_seed:)();
  sub_100047804((uint64_t)v5, v1 | (v2 << 16) | (v3 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterChannelAmbiosonicSegment(uint64_t a1)
{
  return sub_100047804(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v1 + 3) << 24));
}

Swift::Int sub_1000ABB08()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 2);
  uint64_t v3 = *(unsigned int *)((char *)v0 + 3);
  Hasher.init(_seed:)();
  sub_100047804((uint64_t)v5, v1 | (v2 << 16) | (v3 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterChannelAmbiosonicSegment(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10003D478(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)a1 + 3) << 24), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)a2 + 3) << 24));
}

Swift::Int ADC3ClusterChannelDescriptionSegment.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_1000477EC((uint64_t)v3, a1 & 0xFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000ABBD4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 2);
  uint64_t v3 = *(unsigned __int16 *)((char *)v0 + 3);
  Hasher.init(_seed:)();
  sub_1000477EC((uint64_t)v5, v1 | (v2 << 16) | (v3 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterChannelDescriptionSegment(uint64_t a1)
{
  return sub_1000477EC(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned __int16 *)((char *)v1 + 3) << 24));
}

Swift::Int sub_1000ABC48()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 2);
  uint64_t v3 = *(unsigned __int16 *)((char *)v0 + 3);
  Hasher.init(_seed:)();
  sub_1000477EC((uint64_t)v5, v1 | (v2 << 16) | (v3 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterChannelDescriptionSegment(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10003D460(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + 3) << 24), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16) | ((unint64_t)*(unsigned __int16 *)((char *)a2 + 3) << 24));
}

Swift::Int ADC4ExtendedDescriptorHeader.hashValue.getter(unint64_t a1, __int16 a2)
{
  Hasher.init(_seed:)();
  sub_10004969C((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_1000ABD1C()
{
  unint64_t v1 = *(void *)v0;
  __int16 v2 = *(_WORD *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004969C((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ExtendedDescriptorHeader(uint64_t a1)
{
  return sub_10004969C(a1, *(void *)v1, *(_WORD *)(v1 + 8));
}

Swift::Int sub_1000ABD78()
{
  unint64_t v1 = *(void *)v0;
  __int16 v2 = *(_WORD *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004969C((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ExtendedDescriptorHeader(uint64_t a1, uint64_t a2)
{
  return sub_10003FC80(*(void *)a1, *(unsigned __int16 *)(a1 + 8), *(void *)a2, *(unsigned __int16 *)(a2 + 8));
}

Swift::Int ADC4ClusterDescriptorHeader.hashValue.getter(unint64_t a1, unsigned int a2)
{
  Hasher.init(_seed:)();
  sub_10004AA1C((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_1000ABE2C()
{
  unint64_t v1 = *(void *)v0;
  unsigned int v2 = *(_DWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004AA1C((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClusterDescriptorHeader(uint64_t a1)
{
  return sub_10004AA1C(a1, *(void *)v1, *(_DWORD *)(v1 + 8));
}

Swift::Int sub_1000ABE88()
{
  unint64_t v1 = *(void *)v0;
  unsigned int v2 = *(_DWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004AA1C((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClusterDescriptorHeader(uint64_t a1, uint64_t a2)
{
  return sub_100041648(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)a2, *(_DWORD *)(a2 + 8));
}

Swift::Int ADC4ClusterDescriptorSegmentHeader.hashValue.getter(unsigned int a1)
{
  Hasher.init(_seed:)();
  sub_1000479D0((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1000ABF38()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000479D0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClusterDescriptorSegmentHeader(uint64_t a1)
{
  return sub_1000479D0(a1, *v1);
}

Swift::Int sub_1000ABF88()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000479D0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClusterDescriptorSegmentHeader(unsigned int *a1, unsigned int *a2)
{
  return sub_10003D6CC(*a1, *a2);
}

Swift::Int ADC4ClusterChannelInformationSegment.hashValue.getter(unint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  sub_10004744C((uint64_t)v5, a1, a2 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000AC028()
{
  unint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned int *)(v0 + 8);
  uint64_t v3 = *(unsigned __int16 *)(v0 + 12);
  Hasher.init(_seed:)();
  sub_10004744C((uint64_t)v5, v1, v2 | (v3 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClusterChannelInformationSegment(uint64_t a1)
{
  return sub_10004744C(a1, *(void *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int16 *)(v1 + 12) << 32));
}

Swift::Int sub_1000AC098()
{
  unint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned int *)(v0 + 8);
  uint64_t v3 = *(unsigned __int16 *)(v0 + 12);
  Hasher.init(_seed:)();
  sub_10004744C((uint64_t)v5, v1, v2 | (v3 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClusterChannelInformationSegment(uint64_t a1, uint64_t a2)
{
  return sub_10003CFEC(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32), *(void *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int16 *)(a2 + 12) << 32));
}

void *sub_1000AC118(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = 0;
  uint64_t v3 = (unsigned __int8 *)(swift_bridgeObjectRetain() + 41);
  uint64_t v4 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v5 = *(void *)(v3 - 9);
    char v6 = *(v3 - 1);
    int v7 = *v3;
    if ((v7 - 1) > 4)
    {
      if (!v2)
      {
LABEL_3:
        sub_10000AC7C(&qword_100128EE0);
        uint64_t v2 = swift_allocObject();
        *(_OWORD *)(v2 + 16) = xmmword_1000E8090;
        *(void *)(v2 + 32) = v5;
        *(unsigned char *)(v2 + 40) = v6;
        *(unsigned char *)(v2 + 41) = v7;
        goto LABEL_4;
      }
      swift_bridgeObjectRetain();
      uint64_t v12 = (void *)v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = sub_100059B54(0, *(void *)(v2 + 16) + 1, 1, (void *)v2);
      }
      unint64_t v14 = v12[2];
      unint64_t v13 = v12[3];
      if (v14 >= v13 >> 1) {
        uint64_t v12 = sub_100059B54((void *)(v13 > 1), v14 + 1, 1, v12);
      }
      v12[2] = v14 + 1;
      uint64_t v15 = &v12[2 * v14];
      v15[4] = v5;
      *((unsigned char *)v15 + 40) = v6;
      *((unsigned char *)v15 + 41) = v7;
      swift_bridgeObjectRelease();
      uint64_t v2 = (uint64_t)v12;
    }
    else
    {
      if (!v2) {
        goto LABEL_3;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = v4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_100059D74(0, v4[2] + 1, 1, v4);
      }
      unint64_t v10 = v8[2];
      unint64_t v9 = v8[3];
      if (v10 >= v9 >> 1) {
        uint64_t v8 = sub_100059D74((void *)(v9 > 1), v10 + 1, 1, v8);
      }
      _OWORD v8[2] = v10 + 1;
      v8[v10 + 4] = v2;
      sub_10000AC7C(&qword_100128EE0);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_1000E8090;
      *(void *)(v11 + 32) = v5;
      *(unsigned char *)(v11 + 40) = v6;
      *(unsigned char *)(v11 + 41) = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v2 = v11;
      uint64_t v4 = v8;
    }
LABEL_4:
    v3 += 16;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_100059D74(0, v4[2] + 1, 1, v4);
  }
  unint64_t v17 = v4[2];
  unint64_t v16 = v4[3];
  if (v17 >= v16 >> 1) {
    uint64_t v4 = sub_100059D74((void *)(v16 > 1), v17 + 1, 1, v4);
  }
  v4[2] = v17 + 1;
  v4[v17 + 4] = v2;
  swift_bridgeObjectRelease();
  return v4;
}

void sub_1000AC3C4(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(*(void *)(a5 - 8) + 64);
  uint64_t v7 = v6 * a2;
  if ((unsigned __int128)(v6 * (__int128)a2) >> 64 == (v6 * a2) >> 63)
  {
    if (a3)
    {
      sub_1000AC7BC((uint64_t)a3, a4, v7);
      if (!v5)
      {
        uint64_t v9 = sub_1000823F8(a3, v7);
        unint64_t v11 = v10;
        __chkstk_darwin(v9);
        type metadata accessor for Array();
        Data.withUnsafeBytes<A>(_:)();
        sub_100038688(v9, v11);
      }
    }
    else
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v12 = 50;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0xE000000000000000;
      *(void *)(v12 + 24) = 0xD00000000000001BLL;
      *(void *)(v12 + 32) = 0x80000001000E4810;
      *(void *)(v12 + 40) = 0xD00000000000001FLL;
      *(void *)(v12 + 48) = 0x80000001000E4830;
      *(void *)(v12 + 56) = 702;
      swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000AC574(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v6 = result;
    __chkstk_darwin(result);
    v11[2] = v8;
    void v11[3] = v7;
    uint64_t v9 = type metadata accessor for Array();
    return sub_1000AAEDC(a4, a3, (uint64_t)sub_1000AD75C, (uint64_t)v11, v6, a4, (uint64_t)&type metadata for Never, v9, (uint64_t)&protocol witness table for Never, v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AC640@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    void v11[4] = 0;
    v11[5] = a2;
    uint64_t v6 = __chkstk_darwin(result);
    v11[2] = v7;
    void v11[3] = v6;
    uint64_t v8 = sub_10000AC7C(&qword_10012A270);
    unint64_t v9 = sub_1000AD7DC();
    uint64_t result = sub_1000AAAE0((void (*)(char *, char *))sub_1000AD77C, (uint64_t)v11, v8, a3, (uint64_t)&type metadata for Never, v9, (uint64_t)&protocol witness table for Never, v10);
    *a4 = result;
  }
  return result;
}

uint64_t sub_1000AC718(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  sub_1000AC3C4(a1, 1, a3, a4, a5);
  if (!v6)
  {
    uint64_t v5 = v7;
    Array.subscript.getter();
    swift_bridgeObjectRelease();
  }
  return v5;
}

void *sub_1000AC794(void *a1)
{
  return sub_100059A30(0, a1[2], 0, a1);
}

void *sub_1000AC7A8(void *a1)
{
  return sub_100059D88(0, a1[2], 0, a1);
}

uint64_t sub_1000AC7BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    uint64_t v3 = 670;
LABEL_9:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v4 = 49;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0xE000000000000000;
    *(void *)(v4 + 24) = 0xD000000000000011;
    *(void *)(v4 + 32) = 0x80000001000E69C0;
    *(void *)(v4 + 40) = 0xD00000000000001FLL;
    *(void *)(v4 + 48) = 0x80000001000E4830;
    *(void *)(v4 + 56) = v3;
    return swift_willThrow();
  }
  if (!result)
  {
    if (!a3)
    {
      uint64_t v3 = 676;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (a2 - result < a3)
  {
LABEL_7:
    uint64_t v3 = 673;
    goto LABEL_9;
  }
  return result;
}

void *_s9AUASDCore15DescriptorUtilsV27usbAudioFunctionDescriptorsySaySayAA13USBDescriptorOG07controlG0_SayAF15streamInterface_SayAGG0J10AlternatestG0jG0tGAGFZ_0(uint64_t a1)
{
  uint64_t v1 = sub_1000AC118(a1);
  uint64_t v2 = v1[2];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = v1 + 4;
    int v48 = _swiftEmptyArrayStorage;
    unsigned int v49 = v1 + 4;
    uint64_t v50 = v1[2];
    char v51 = v1;
    while (1)
    {
      if (v3 >= v1[2]) {
        goto LABEL_66;
      }
      uint64_t v5 = v4[v3];
      uint64_t v6 = *(void *)(v5 + 16);
      if (!v6) {
        goto LABEL_67;
      }
      if (*(unsigned __int8 *)(v5 + 41) - 2 > 3) {
        goto LABEL_4;
      }
      unint64_t v52 = v3;
      swift_bridgeObjectRetain();
      uint64_t v7 = 0;
      uint64_t v8 = (unsigned __int8 *)(v5 + 41);
      unint64_t v9 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v10 = *(void *)(v8 - 9);
        char v11 = *(v8 - 1);
        unsigned int v12 = *v8;
        if (v12 > 0x10 || v12 == 11)
        {
          if (!v7)
          {
LABEL_9:
            sub_10000AC7C(&qword_100128EE0);
            uint64_t v7 = swift_allocObject();
            *(_OWORD *)(v7 + 16) = xmmword_1000E8090;
            *(void *)(v7 + 32) = v10;
            *(unsigned char *)(v7 + 40) = v11;
            *(unsigned char *)(v7 + 41) = v12;
            goto LABEL_10;
          }
          swift_bridgeObjectRetain();
          uint64_t v18 = (void *)v7;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v18 = sub_100059B54(0, *(void *)(v7 + 16) + 1, 1, (void *)v7);
          }
          unint64_t v20 = v18[2];
          unint64_t v19 = v18[3];
          if (v20 >= v19 >> 1) {
            uint64_t v18 = sub_100059B54((void *)(v19 > 1), v20 + 1, 1, v18);
          }
          _OWORD v18[2] = v20 + 1;
          Swift::Int v21 = &v18[2 * v20];
          v21[4] = v10;
          *((unsigned char *)v21 + 40) = v11;
          *((unsigned char *)v21 + 41) = v12;
          swift_bridgeObjectRelease();
          uint64_t v7 = (uint64_t)v18;
        }
        else
        {
          if (!v7) {
            goto LABEL_9;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v14 = v9;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v14 = sub_100059D74(0, v9[2] + 1, 1, v9);
          }
          unint64_t v16 = v14[2];
          unint64_t v15 = v14[3];
          if (v16 >= v15 >> 1) {
            unint64_t v14 = sub_100059D74((void *)(v15 > 1), v16 + 1, 1, v14);
          }
          _OWORD v14[2] = v16 + 1;
          v14[v16 + 4] = v7;
          sub_10000AC7C(&qword_100128EE0);
          uint64_t v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = xmmword_1000E8090;
          *(void *)(v17 + 32) = v10;
          *(unsigned char *)(v17 + 40) = v11;
          *(unsigned char *)(v17 + 41) = v12;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v7 = v17;
          unint64_t v9 = v14;
        }
LABEL_10:
        v8 += 16;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v9 = sub_100059D74(0, v9[2] + 1, 1, v9);
      }
      unint64_t v23 = v9[2];
      unint64_t v22 = v9[3];
      if (v23 >= v22 >> 1) {
        unint64_t v9 = sub_100059D74((void *)(v22 > 1), v23 + 1, 1, v9);
      }
      v9[2] = v23 + 1;
      v9[v23 + 4] = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v24 = v9[2];
      if (v24 < 3) {
        goto LABEL_3;
      }
      uint64_t v25 = 0;
      uint64_t v26 = _swiftEmptyArrayStorage;
      long long v27 = _swiftEmptyArrayStorage;
      while (2)
      {
        uint64_t v28 = v9[v25 + 4];
        if (!*(void *)(v28 + 16))
        {
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
          JUMPOUT(0x1000ACE38);
        }
        char v29 = *(unsigned char *)(v28 + 41);
        switch(v29)
        {
          case 2:
          case 3:
          case 4:
          case 5:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            long long v27 = (void *)v28;
            goto LABEL_34;
          case 6:
          case 7:
          case 8:
          case 9:
            uint64_t v30 = *(void *)(v28 + 32);
            char v31 = *(unsigned char *)(v28 + 40);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v26 = sub_100059D88(0, v26[2] + 1, 1, v26);
            }
            unint64_t v33 = v26[2];
            unint64_t v32 = v26[3];
            if (v33 >= v32 >> 1) {
              uint64_t v26 = sub_100059D88((void *)(v32 > 1), v33 + 1, 1, v26);
            }
            void v26[2] = v33 + 1;
            uint64_t v34 = &v26[3 * v33];
            v34[4] = v30;
            *((unsigned char *)v34 + 40) = v31;
            *((unsigned char *)v34 + 41) = v29;
            v34[6] = _swiftEmptyArrayStorage;
            goto LABEL_34;
          case 12:
          case 13:
          case 14:
          case 15:
            unint64_t v35 = v26[2];
            swift_bridgeObjectRetain();
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              if (!v35) {
                goto LABEL_65;
              }
            }
            else
            {
              uint64_t v26 = sub_1000AC7A8(v26);
              if (!v35) {
                goto LABEL_65;
              }
            }
            if (v35 > v26[2]) {
              goto LABEL_64;
            }
            uint64_t v36 = &v26[3 * v35 - 3];
            uint64_t v39 = (void *)v36[6];
            uint64_t v37 = v36 + 6;
            unint64_t v38 = v39;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v37 = v39;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              unint64_t v38 = sub_100059D74(0, v38[2] + 1, 1, v38);
              *uint64_t v37 = v38;
            }
            unint64_t v42 = v38[2];
            unint64_t v41 = v38[3];
            if (v42 >= v41 >> 1)
            {
              unint64_t v38 = sub_100059D74((void *)(v41 > 1), v42 + 1, 1, v38);
              *uint64_t v37 = v38;
            }
            v38[2] = v42 + 1;
            v38[v42 + 4] = v28;
LABEL_34:
            if (v24 != ++v25) {
              continue;
            }
            swift_bridgeObjectRelease();
            if (v27[2] && v26[2])
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (swift_isUniquelyReferenced_nonNull_native()) {
                uint64_t v43 = v48;
              }
              else {
                uint64_t v43 = sub_100059C64(0, v48[2] + 1, 1, v48);
              }
              unint64_t v45 = v43[2];
              unint64_t v44 = v43[3];
              if (v45 >= v44 >> 1) {
                uint64_t v43 = sub_100059C64((void *)(v44 > 1), v45 + 1, 1, v43);
              }
              v43[2] = v45 + 1;
              int v48 = v43;
              uint64_t v46 = &v43[2 * v45];
              v46[4] = v27;
              v46[5] = v26;
            }
            swift_bridgeObjectRelease();
            break;
          default:
            goto LABEL_34;
        }
        break;
      }
LABEL_3:
      swift_bridgeObjectRelease();
      uint64_t v2 = v50;
      uint64_t v1 = v51;
      unint64_t v3 = v52;
      uint64_t v4 = v49;
LABEL_4:
      if (++v3 == v2)
      {
        swift_bridgeObjectRelease();
        return v48;
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000ACE70()
{
  return sub_1000AD6E8(&qword_10012A198, type metadata accessor for IOUSBDescriptorHeader);
}

uint64_t sub_1000ACEB8(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A1A0, type metadata accessor for IOUSBDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000ACF10(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A1A8, type metadata accessor for IOUSBDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000ACF68(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A1B0, type metadata accessor for ADCClassSpecificDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000ACFC0()
{
  return sub_1000AD6E8(&qword_10012A1B8, type metadata accessor for ADCClassSpecificDescriptorHeader);
}

uint64_t sub_1000AD008(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A1C0, type metadata accessor for ADC3HighCapabilityDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AD060()
{
  return sub_1000AD6E8(&qword_10012A1C8, type metadata accessor for ADC3HighCapabilityDescriptor);
}

uint64_t sub_1000AD0A8(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A1D0, type metadata accessor for ADC3ClusterDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AD100()
{
  return sub_1000AD6E8(&qword_10012A1D8, type metadata accessor for ADC3ClusterDescriptorHeader);
}

uint64_t sub_1000AD148(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A1E0, type metadata accessor for ADC3ClusterDescriptorSegmentHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AD1A0()
{
  return sub_1000AD6E8(&qword_10012A1E8, type metadata accessor for ADC3ClusterDescriptorSegmentHeader);
}

uint64_t sub_1000AD1E8(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A1F0, type metadata accessor for ADC3ClusterChannelInformationSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AD240()
{
  return sub_1000AD6E8(&qword_10012A1F8, type metadata accessor for ADC3ClusterChannelInformationSegment);
}

uint64_t sub_1000AD288(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A200, type metadata accessor for ADC3ClusterEndSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AD2E0()
{
  return sub_1000AD6E8(&qword_10012A208, type metadata accessor for ADC3ClusterEndSegment);
}

uint64_t sub_1000AD328(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A210, type metadata accessor for ADC3ClusterChannelAmbiosonicSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AD380()
{
  return sub_1000AD6E8(&qword_10012A218, type metadata accessor for ADC3ClusterChannelAmbiosonicSegment);
}

uint64_t sub_1000AD3C8(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A220, type metadata accessor for ADC3ClusterChannelDescriptionSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AD420()
{
  return sub_1000AD6E8(&qword_10012A228, type metadata accessor for ADC3ClusterChannelDescriptionSegment);
}

uint64_t sub_1000AD468(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A230, type metadata accessor for ADC4ExtendedDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AD4C0()
{
  return sub_1000AD6E8(&qword_10012A238, type metadata accessor for ADC4ExtendedDescriptorHeader);
}

uint64_t sub_1000AD508(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A240, type metadata accessor for ADC4ClusterDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AD560()
{
  return sub_1000AD6E8(&qword_10012A248, type metadata accessor for ADC4ClusterDescriptorHeader);
}

uint64_t sub_1000AD5A8(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A250, type metadata accessor for ADC4ClusterDescriptorSegmentHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AD600()
{
  return sub_1000AD6E8(&qword_10012A258, type metadata accessor for ADC4ClusterDescriptorSegmentHeader);
}

uint64_t sub_1000AD648(uint64_t a1)
{
  uint64_t result = sub_1000AD6E8(&qword_10012A260, type metadata accessor for ADC4ClusterChannelInformationSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AD6A0()
{
  return sub_1000AD6E8(&qword_10012A268, type metadata accessor for ADC4ClusterChannelInformationSegment);
}

uint64_t sub_1000AD6E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DescriptorUtils()
{
  return &type metadata for DescriptorUtils;
}

uint64_t sub_1000AD740(uint64_t a1, uint64_t a2)
{
  return sub_1000AC574(a1, a2, *(void *)(v2 + 24), *(void *)(v2 + 16));
}

uint64_t sub_1000AD75C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000AC640(a1, *(void *)(v2 + 24), *(void *)(v2 + 16), a2);
}

uint64_t sub_1000AD77C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, *(void *)(v2 + 24) + *(void *)(*(void *)(*(void *)(v2 + 16) - 8) + 72) * *a1);
}

unint64_t sub_1000AD7DC()
{
  unint64_t result = qword_10012A278;
  if (!qword_10012A278)
  {
    sub_10001A584(&qword_10012A270);
    sub_1000869E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A278);
  }
  return result;
}

void *sub_1000AD858(uint64_t a1, uint64_t a2)
{
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v16 + 1))
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    while (1)
    {
      *(_OWORD *)unint64_t v15 = *(_OWORD *)&v15[7];
      *(_OWORD *)&v15[2] = *(_OWORD *)&v15[9];
      *(_OWORD *)&v15[4] = v16;
      sub_10008E074(v15, a2, (uint64_t *)v13);
      if (v2) {
        break;
      }
      sub_10001A918((uint64_t)v15, &qword_100128910);
      if (*((void *)&v13[0] + 1))
      {
        long long v9 = v13[0];
        long long v10 = v13[1];
        long long v11 = v13[2];
        uint64_t v12 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = sub_10005A0D8(0, v4[2] + 1, 1, v4);
        }
        unint64_t v6 = v4[2];
        unint64_t v5 = v4[3];
        if (v6 >= v5 >> 1) {
          uint64_t v4 = sub_10005A0D8((void *)(v5 > 1), v6 + 1, 1, v4);
        }
        v4[2] = v6 + 1;
        uint64_t v7 = &v4[7 * v6];
        v7[10] = v12;
        *((_OWORD *)v7 + 3) = v10;
        *((_OWORD *)v7 + 4) = v11;
        *((_OWORD *)v7 + 2) = v9;
      }
      else
      {
        sub_10001A918((uint64_t)v13, &qword_10012A288);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!*((void *)&v16 + 1)) {
        goto LABEL_14;
      }
    }
    sub_10001A918((uint64_t)v15, &qword_100128910);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  swift_release();
  return v4;
}

uint64_t sub_1000ADA20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AC7C(&qword_100127490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

__n128 sub_1000ADA88@<Q0>(uint64_t a1@<X8>)
{
  sub_10000AC7C(&qword_10012A3B0);
  uint64_t inited = swift_initStackObject();
  uint64_t v3 = 0;
  *(_OWORD *)(inited + 16) = xmmword_1000EA830;
  *(void *)(inited + 32) = 0x200000001;
  *(unsigned char *)(inited + 42) = 103;
  *(_WORD *)(inited + 40) = 257;
  *(unsigned char *)(inited + 45) = 103;
  *(_WORD *)(inited + 43) = 256;
  *(void *)(inited + 48) = 0x800000004;
  *(unsigned char *)(inited + 58) = 0;
  *(_WORD *)(inited + 56) = 641;
  *(unsigned char *)(inited + 61) = 0;
  *(_WORD *)(inited + 59) = 640;
  *(void *)(inited + 64) = 0x2000000010;
  *(unsigned char *)(inited + 74) = 16;
  *(_WORD *)(inited + 72) = 769;
  *(unsigned char *)(inited + 77) = 16;
  *(_WORD *)(inited + 75) = 768;
  *(void *)(inited + 80) = 0x8000000040;
  *(unsigned char *)(inited + 90) = 16;
  *(_WORD *)(inited + 88) = 1089;
  *(unsigned char *)(inited + 93) = 16;
  *(_WORD *)(inited + 91) = 1088;
  uint64_t v27 = *(unsigned __int8 *)(v1 + 3);
  uint64_t v28 = v1;
  uint64_t v26 = *(unsigned __int16 *)(v1 + 4);
  uint64_t v25 = *(unsigned __int8 *)(v1 + 6);
  uint64_t v24 = *(unsigned __int8 *)(v1 + 7);
  int v4 = *(_DWORD *)(v1 + 8);
  uint64_t v22 = *(unsigned __int16 *)(v1 + 12);
  int v23 = *(unsigned __int16 *)(v1 + 18);
  unint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v6 = inited + v3;
    if ((*(_DWORD *)(inited + v3 + 32) & v4) != 0)
    {
      int v7 = *(_DWORD *)(v6 + 36) & v4;
      if (v7) {
        uint64_t v8 = (unsigned __int16 *)(v6 + 40);
      }
      else {
        uint64_t v8 = (unsigned __int16 *)(v6 + 43);
      }
      int v9 = *((unsigned __int8 *)v8 + 2);
      int v10 = *v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v5 = sub_100058F88(0, v5[2] + 1, 1, v5);
      }
      unint64_t v12 = v5[2];
      unint64_t v11 = v5[3];
      if (v12 >= v11 >> 1) {
        unint64_t v5 = sub_100058F88((void *)(v11 > 1), v12 + 1, 1, v5);
      }
      v5[2] = v12 + 1;
      unint64_t v13 = (char *)v5 + 3 * v12;
      v13[34] = (v10 | (v9 << 16)) >> 16;
      *((_WORD *)v13 + 16) = v10;
      if (v7) {
        sub_10005B1DC(v30, 10);
      }
    }
    v3 += 16;
  }
  while (v3 != 64);
  swift_bridgeObjectRelease();
  sub_10000AC7C(&qword_1001290A8);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1000E8090;
  *(void *)(v14 + 32) = v22;
  *(_WORD *)(v14 + 40) = 512;
  uint64_t v15 = *(void *)(v28 + 24);
  __int16 v16 = *(_WORD *)(v28 + 32);
  uint64_t v17 = sub_10005AD1C((uint64_t)&_swiftEmptySetSingleton);
  swift_bridgeObjectRelease();
  if (v23) {
    int v18 = v23 | 0x10000;
  }
  else {
    int v18 = 16711680;
  }
  sub_1000C0C44(v27, v24, v26, v25, 0, (uint64_t)v5, v18, v14, (uint64_t)v30, 0, 0xF000000000000000, v15, v16, (uint64_t)v17);
  long long v19 = v30[5];
  *(_OWORD *)(a1 + 64) = v30[4];
  *(_OWORD *)(a1 + 80) = v19;
  *(void *)(a1 + 96) = v31;
  long long v20 = v30[1];
  *(_OWORD *)a1 = v30[0];
  *(_OWORD *)(a1 + 16) = v20;
  __n128 result = (__n128)v30[3];
  *(_OWORD *)(a1 + 32) = v30[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

double sub_1000ADD88@<D0>(_OWORD *a1@<X8>)
{
  sub_10000AC7C(&qword_10012A3B8);
  uint64_t inited = swift_initStackObject();
  uint64_t v3 = 0;
  *(_OWORD *)(inited + 16) = xmmword_1000EA830;
  *(void *)(inited + 32) = 0x200000001;
  *(unsigned char *)(inited + 42) = 103;
  *(_WORD *)(inited + 40) = 257;
  *(unsigned char *)(inited + 45) = 103;
  *(_WORD *)(inited + 43) = 256;
  *(void *)(inited + 48) = 0x800000004;
  *(unsigned char *)(inited + 58) = 0;
  *(_WORD *)(inited + 56) = 641;
  *(unsigned char *)(inited + 61) = 0;
  *(_WORD *)(inited + 59) = 640;
  *(void *)(inited + 64) = 0x2000000010;
  *(unsigned char *)(inited + 74) = 16;
  *(_WORD *)(inited + 72) = 769;
  *(unsigned char *)(inited + 77) = 16;
  *(_WORD *)(inited + 75) = 768;
  *(void *)(inited + 80) = 0x8000000040;
  *(unsigned char *)(inited + 90) = 16;
  *(_WORD *)(inited + 88) = 1089;
  *(unsigned char *)(inited + 93) = 16;
  *(_WORD *)(inited + 91) = 1088;
  uint64_t v26 = *(unsigned __int8 *)(v1 + 3);
  uint64_t v27 = *(unsigned __int16 *)(v1 + 4);
  uint64_t v25 = *(unsigned __int8 *)(v1 + 6);
  uint64_t v24 = *(unsigned __int8 *)(v1 + 7);
  uint64_t v23 = *(unsigned __int8 *)(v1 + 8);
  int v4 = *(_DWORD *)(v1 + 9);
  int v22 = *(unsigned __int16 *)(v1 + 17);
  unint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v6 = inited + v3;
    if ((*(_DWORD *)(inited + v3 + 32) & v4) != 0)
    {
      int v7 = *(_DWORD *)(v6 + 36) & v4;
      if (v7) {
        uint64_t v8 = (unsigned __int16 *)(v6 + 40);
      }
      else {
        uint64_t v8 = (unsigned __int16 *)(v6 + 43);
      }
      int v9 = *((unsigned __int8 *)v8 + 2);
      int v10 = *v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v5 = sub_100058F88(0, v5[2] + 1, 1, v5);
      }
      unint64_t v12 = v5[2];
      unint64_t v11 = v5[3];
      if (v12 >= v11 >> 1) {
        unint64_t v5 = sub_100058F88((void *)(v11 > 1), v12 + 1, 1, v5);
      }
      v5[2] = v12 + 1;
      unint64_t v13 = (char *)v5 + 3 * v12;
      v13[34] = (v10 | (v9 << 16)) >> 16;
      *((_WORD *)v13 + 16) = v10;
      if (v7) {
        sub_10005B1DC(v29, 10);
      }
    }
    v3 += 16;
  }
  while (v3 != 64);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(v1 + 24);
  __int16 v15 = *(_WORD *)(v1 + 32);
  __int16 v16 = sub_10005AD1C((uint64_t)&_swiftEmptySetSingleton);
  swift_bridgeObjectRelease();
  if (v22) {
    int v17 = v22 | 0x10000;
  }
  else {
    int v17 = 16711680;
  }
  sub_1000C0DC8(v26, v23, v24, v27, v25, 0, v17, (uint64_t)v5, (uint64_t)v29, v14, v15, (uint64_t)v16);
  long long v18 = v29[3];
  a1[2] = v29[2];
  a1[3] = v18;
  long long v19 = v29[5];
  a1[4] = v29[4];
  a1[5] = v19;
  double result = *(double *)v29;
  long long v21 = v29[1];
  *a1 = v29[0];
  a1[1] = v21;
  return result;
}

double sub_1000AE044@<D0>(uint64_t a1@<X8>)
{
  sub_10000AC7C(&qword_10012A3C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000EA840;
  *(void *)(inited + 32) = 0x200000001;
  *(unsigned char *)(inited + 42) = 16;
  *(_WORD *)(inited + 40) = 513;
  *(unsigned char *)(inited + 45) = 16;
  *(_WORD *)(inited + 43) = 512;
  *(void *)(inited + 48) = 0x800000004;
  *(unsigned char *)(inited + 58) = 16;
  *(_WORD *)(inited + 56) = 833;
  *(unsigned char *)(inited + 61) = 16;
  *(_WORD *)(inited + 59) = 832;
  uint64_t v31 = &_swiftEmptySetSingleton;
  int v4 = *(_DWORD *)(v1 + 5);
  int v5 = *(unsigned __int16 *)(v1 + 9);
  if (v4)
  {
    if ((v4 & 2) != 0) {
      int v7 = 1049089;
    }
    else {
      int v7 = 1049088;
    }
    uint64_t v6 = sub_100058F88(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v9 = v6[2];
    unint64_t v8 = v6[3];
    if (v9 >= v8 >> 1) {
      uint64_t v6 = sub_100058F88((void *)(v8 > 1), v9 + 1, 1, v6);
    }
    v6[2] = v9 + 1;
    int v10 = (char *)v6 + 3 * v9;
    v10[34] = BYTE2(v7);
    *((_WORD *)v10 + 16) = v7;
    if ((v4 & 2) != 0) {
      sub_10005B1DC(v29, 10);
    }
  }
  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  if ((*(_DWORD *)(inited + 48) & v4) != 0)
  {
    unint64_t v11 = (unsigned __int16 *)(inited + 59);
    int v12 = *(_DWORD *)(inited + 52) & v4;
    if (v12) {
      unint64_t v11 = (unsigned __int16 *)(inited + 56);
    }
    int v13 = *v11 | (*((unsigned __int8 *)v11 + 2) << 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v6 = sub_100058F88(0, v6[2] + 1, 1, v6);
    }
    unint64_t v15 = v6[2];
    unint64_t v14 = v6[3];
    if (v15 >= v14 >> 1) {
      uint64_t v6 = sub_100058F88((void *)(v14 > 1), v15 + 1, 1, v6);
    }
    v6[2] = v15 + 1;
    __int16 v16 = (char *)v6 + 3 * v15;
    v16[34] = BYTE2(v13);
    *((_WORD *)v16 + 16) = v13;
    if (v12) {
      sub_10005B1DC(v29, 10);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v28 = *(unsigned __int16 *)(v1 + 40);
  uint64_t v17 = *(unsigned __int8 *)(v1 + 3);
  uint64_t v18 = *(void *)(v1 + 32);
  uint64_t v19 = *(void *)(v1 + 48);
  uint64_t v27 = *(void *)(v1 + 16);
  uint64_t v20 = (uint64_t)v31;
  __int16 v21 = *(_WORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v22 = sub_10005AD1C(v20);
  swift_bridgeObjectRelease();
  if (v5) {
    int v23 = v5 | 0x10000;
  }
  else {
    int v23 = 16711680;
  }
  sub_1000C0EC4(v17, v28, 512, v18, v19, (uint64_t)v6, v23, v27, (uint64_t)v29, v21, (uint64_t)v22);
  long long v24 = v29[3];
  *(_OWORD *)(a1 + 32) = v29[2];
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v29[4];
  *(void *)(a1 + 80) = v30;
  double result = *(double *)v29;
  long long v26 = v29[1];
  *(_OWORD *)a1 = v29[0];
  *(_OWORD *)(a1 + 16) = v26;
  return result;
}

__n128 sub_1000AE318@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  unsigned int v4 = *(_DWORD *)(v1 + 5);
  int v5 = *(unsigned __int16 *)(v1 + 9);
  uint64_t v6 = &_swiftEmptySetSingleton;
  uint64_t v18 = &_swiftEmptySetSingleton;
  if ((v4 & 1) == 0)
  {
    sub_10005B1DC(v16, 12);
    uint64_t v6 = v18;
  }
  uint64_t v15 = *(unsigned __int8 *)(v2 + 3);
  uint64_t v7 = *(void *)(v2 + 32);
  sub_10000AC7C(&qword_100128E78);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1000E8090;
  *(unsigned char *)(v8 + 34) = 64;
  *(_WORD *)(v8 + 32) = (v4 >> 1) & 1 | 0x1C0;
  uint64_t v9 = *(void *)(v2 + 16);
  __int16 v10 = *(_WORD *)(v2 + 24);
  sub_100053B64(v2);
  unint64_t v11 = sub_10005AD1C((uint64_t)v6);
  swift_bridgeObjectRelease();
  if (v5) {
    int v12 = v5 | 0x10000;
  }
  else {
    int v12 = 16711680;
  }
  sub_1000C0FFC(v15, v7, v8, v12, v9, v10, (uint64_t)v11, (uint64_t)v16);
  long long v13 = v16[3];
  *(_OWORD *)(a1 + 32) = v16[2];
  *(_OWORD *)(a1 + 48) = v13;
  *(void *)(a1 + 64) = v17;
  __n128 result = (__n128)v16[1];
  *(_OWORD *)a1 = v16[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

double sub_1000AE450@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  sub_10000AC7C(&qword_10012A3C8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000EA840;
  *(void *)(inited + 32) = 0x200000001;
  *(unsigned char *)(inited + 42) = 16;
  *(_WORD *)(inited + 40) = 257;
  *(unsigned char *)(inited + 45) = 16;
  *(_WORD *)(inited + 43) = 256;
  *(void *)(inited + 48) = 0x800000004;
  *(unsigned char *)(inited + 58) = 16;
  *(_WORD *)(inited + 56) = 577;
  *(unsigned char *)(inited + 61) = 16;
  *(_WORD *)(inited + 59) = 576;
  int v5 = *(unsigned __int16 *)(v1 + 7);
  int v6 = *(_DWORD *)(v1 + 9);
  if (v6)
  {
    if ((v6 & 2) != 0) {
      int v8 = 1048833;
    }
    else {
      int v8 = 1048832;
    }
    uint64_t v7 = sub_100058F88(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    if (v10 >= v9 >> 1) {
      uint64_t v7 = sub_100058F88((void *)(v9 > 1), v10 + 1, 1, v7);
    }
    v7[2] = v10 + 1;
    unint64_t v11 = (char *)v7 + 3 * v10;
    v11[34] = BYTE2(v8);
    *((_WORD *)v11 + 16) = v8;
    if ((v6 & 2) != 0) {
      sub_10005B1DC(v29, 10);
    }
  }
  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }
  uint64_t v28 = a1;
  if ((*(_DWORD *)(inited + 48) & v6) != 0)
  {
    int v12 = (unsigned __int16 *)(inited + 59);
    int v13 = *(_DWORD *)(inited + 52) & v6;
    if (v13) {
      int v12 = (unsigned __int16 *)(inited + 56);
    }
    int v14 = *v12 | (*((unsigned __int8 *)v12 + 2) << 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = sub_100058F88(0, v7[2] + 1, 1, v7);
    }
    unint64_t v16 = v7[2];
    unint64_t v15 = v7[3];
    if (v16 >= v15 >> 1) {
      uint64_t v7 = sub_100058F88((void *)(v15 > 1), v16 + 1, 1, v7);
    }
    v7[2] = v16 + 1;
    uint64_t v17 = (char *)v7 + 3 * v16;
    v17[34] = BYTE2(v14);
    *((_WORD *)v17 + 16) = v14;
    if (v13) {
      sub_10005B1DC(v29, 10);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = *(unsigned __int8 *)(v1 + 3);
  uint64_t v19 = *(void *)(v2 + 32);
  uint64_t v20 = *(void *)(v2 + 16);
  __int16 v21 = *(_WORD *)(v2 + 24);
  sub_100053B64(v2);
  int v22 = sub_10005AD1C((uint64_t)&_swiftEmptySetSingleton);
  swift_bridgeObjectRelease();
  if (v5) {
    int v23 = v5 | 0x10000;
  }
  else {
    int v23 = 16711680;
  }
  sub_1000C1210(v18, 0, v19, 0, 0, 0, (uint64_t)v7, v23, (uint64_t)v29, v20, v21, (uint64_t)v22);
  long long v24 = v29[3];
  v28[2] = v29[2];
  v28[3] = v24;
  long long v25 = v29[5];
  v28[4] = v29[4];
  v28[5] = v25;
  double result = *(double *)v29;
  long long v27 = v29[1];
  *uint64_t v28 = v29[0];
  v28[1] = v27;
  return result;
}

uint64_t sub_1000AE718@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, _WORD *a5@<X8>)
{
  int v37 = a4;
  uint64_t v36 = a3;
  uint64_t v39 = a5;
  uint64_t v38 = a1;
  *(void *)&long long v50 = a1;
  unsigned int v35 = a2;
  DWORD2(v50) = a2;
  int v5 = *(_DWORD *)((char *)&v50 + 5);
  uint64_t v43 = type metadata accessor for Mirror();
  uint64_t v6 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  int v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AC7C(&qword_10012A3D0);
  uint64_t inited = swift_initStackObject();
  int v10 = 0;
  uint64_t v11 = 0;
  *(void *)(inited + 32) = 0x200000001;
  uint64_t v12 = inited + 32;
  *(_OWORD *)(inited + 16) = xmmword_1000EA840;
  *(unsigned char *)(inited + 42) = 82;
  *(_WORD *)(inited + 40) = 385;
  *(unsigned char *)(inited + 45) = 82;
  *(_WORD *)(inited + 43) = 384;
  *(void *)(inited + 48) = 0x800000004;
  *(unsigned char *)(inited + 58) = 80;
  *(_WORD *)(inited + 56) = 705;
  *(unsigned char *)(inited + 61) = 80;
  uint64_t v34 = inited;
  *(_WORD *)(inited + 59) = 704;
  unint64_t v53 = &_swiftEmptySetSingleton;
  uint64_t v40 = &v51;
  unint64_t v41 = (void (**)(char *, uint64_t))(v6 + 8);
  int v13 = _swiftEmptyArrayStorage;
  int v44 = v5;
  uint64_t v42 = inited + 32;
  do
  {
    int v14 = v10;
    uint64_t v15 = v12 + v11;
    if ((*(_DWORD *)(v12 + v11) & v5) == 0) {
      goto LABEL_3;
    }
    int v16 = *(unsigned __int16 *)(v15 + 8) | (*(unsigned __int8 *)(v15 + 10) << 16);
    int v17 = *(_DWORD *)(v15 + 4) & v5;
    if (v17) {
      int v18 = *(unsigned __int16 *)(v15 + 8) | (*(unsigned __int8 *)(v15 + 10) << 16);
    }
    else {
      int v18 = *(unsigned __int16 *)(v15 + 11) | (*(unsigned __int8 *)(v15 + 13) << 16);
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int v46 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      int v13 = sub_100058F88(0, v13[2] + 1, 1, v13);
    }
    unint64_t v21 = v13[2];
    unint64_t v20 = v13[3];
    if (v21 >= v20 >> 1) {
      int v13 = sub_100058F88((void *)(v20 > 1), v21 + 1, 1, v13);
    }
    void v13[2] = v21 + 1;
    int v22 = (char *)v13 + 3 * v21;
    v22[34] = BYTE2(v18);
    *((_WORD *)v22 + 16) = v18;
    if (!v17)
    {
      int v5 = v44;
      LOBYTE(v14) = v46;
      goto LABEL_3;
    }
    unint64_t v45 = v13;
    *((void *)&v51 + 1) = &type metadata for USBDescriptorControl;
    LOWORD(v50) = v16;
    BYTE2(v50) = BYTE2(v16);
    Mirror.init(reflecting:)();
    Mirror.children.getter();
    swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v23 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
    if (v23 != result)
    {
      __break(1u);
      return result;
    }
    char v25 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v25)
    {
      swift_unknownObjectRelease();
      long long v51 = 0u;
      long long v52 = 0u;
      long long v50 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v50 = v47;
      long long v51 = v48;
      long long v52 = v49;
      swift_unknownObjectRelease();
    }
    uint64_t v12 = v42;
    LOBYTE(v14) = v46;
    swift_release();
    (*v41)(v8, v43);
    int v13 = v45;
    if (!*((void *)&v52 + 1))
    {
      sub_100062BB0((uint64_t)&v50);
      int v5 = v44;
      goto LABEL_3;
    }
    long long v26 = v50;
    sub_10001ABC4((uint64_t)v40);
    int v5 = v44;
    if (!*((void *)&v26 + 1)) {
      goto LABEL_3;
    }
    if (v26 == __PAIR128__(0xE800000000000000, 0x79746964696C6176))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0) {
        goto LABEL_3;
      }
    }
    sub_10005B1DC(&v50, 10);
LABEL_3:
    int v10 = 1;
    uint64_t v11 = 16;
  }
  while ((v14 & 1) == 0);
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_10005AD1C((uint64_t)v53);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v13[2])
  {
    uint64_t result = swift_bridgeObjectRelease();
    int v13 = 0;
    if (v28[2]) {
      goto LABEL_26;
    }
LABEL_30:
    uint64_t result = swift_release();
    uint64_t v28 = 0;
    goto LABEL_26;
  }
  if (!v28[2]) {
    goto LABEL_30;
  }
LABEL_26:
  unsigned __int8 v29 = BYTE1(v35);
  int v30 = HIWORD(v35) | 0x10000;
  if (v35 < 0x10000) {
    int v30 = -65536;
  }
  uint64_t v31 = v39;
  *uint64_t v39 = v30;
  *((unsigned char *)v31 + 2) = BYTE2(v30);
  uint64_t v32 = v38;
  uint64_t v33 = v36;
  *((void *)v31 + 1) = BYTE3(v38);
  *((void *)v31 + 2) = v33;
  v31[12] = v37;
  *((void *)v31 + 4) = v28;
  *((void *)v31 + 5) = v13;
  *((unsigned char *)v31 + 48) = BYTE4(v32) & 1;
  *((unsigned char *)v31 + 49) = (v32 & 0x200000000) != 0;
  *((void *)v31 + 7) = v29;
  return result;
}

uint64_t sub_1000AEC88@<X0>(_WORD *a1@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v39 = type metadata accessor for Mirror();
  uint64_t ObjectType = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  unsigned int v4 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000AC7C(&qword_10012A3D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000E8090;
  *(void *)(inited + 32) = 0x200000001;
  *(unsigned char *)(inited + 42) = 64;
  *(_WORD *)(inited + 40) = 449;
  *(unsigned char *)(inited + 45) = 64;
  *(_WORD *)(inited + 43) = 448;
  long long v47 = &_swiftEmptySetSingleton;
  int v6 = *(_DWORD *)(v1 + 5);
  uint64_t v33 = v1;
  int v32 = *(unsigned __int16 *)(v1 + 9);
  if (v6)
  {
    if ((v6 & 2) != 0) {
      LODWORD(v8) = 4194753;
    }
    else {
      LODWORD(v8) = 4194752;
    }
    uint64_t v7 = sub_100058F88(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    int64_t v11 = v10 + 1;
    if (v10 >= v9 >> 1) {
      goto LABEL_34;
    }
    goto LABEL_7;
  }
  uint64_t v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = v7[2];
    if (!v13) {
      break;
    }
    unsigned int v35 = &v45;
    int v37 = (void (**)(void *, uint64_t))(ObjectType + 8);
    swift_bridgeObjectRetain();
    uint64_t v14 = 32;
    uint64_t v36 = v7;
    uint64_t v38 = v4;
    while (1)
    {
      uint64_t v40 = v13;
      __int16 v15 = *(_WORD *)((char *)v7 + v14);
      char v16 = *((unsigned char *)v7 + v14 + 2);
      *((void *)&v45 + 1) = &type metadata for USBDescriptorControl;
      BYTE2(v44) = v16;
      LOWORD(v44) = v15;
      Mirror.init(reflecting:)();
      unsigned int v4 = (void *)Mirror.children.getter();
      int64_t v11 = v4[3];
      uint64_t v8 = v4[4];
      uint64_t v7 = (void *)v4[5];
      uint64_t ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      unint64_t v10 = dispatch thunk of _AnyIndexBox._typeID.getter();
      swift_getObjectType();
      if (v10 != dispatch thunk of _AnyIndexBox._typeID.getter()) {
        break;
      }
      char v17 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
      swift_unknownObjectRelease();
      if (v17)
      {
        swift_unknownObjectRelease();
        long long v45 = 0u;
        long long v46 = 0u;
        long long v44 = 0u;
      }
      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter();
        long long v44 = v41;
        long long v45 = v42;
        long long v46 = v43;
        swift_unknownObjectRelease();
      }
      uint64_t v7 = v36;
      swift_release();
      (*v37)(v38, v39);
      if (*((void *)&v46 + 1))
      {
        long long v18 = v44;
        sub_10001ABC4((uint64_t)v35);
        if (*((void *)&v18 + 1))
        {
          if (v18 == __PAIR128__(0xE800000000000000, 0x726F7463656C6573))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_24;
          }
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v19)
          {
            swift_bridgeObjectRelease();
            goto LABEL_24;
          }
        }
      }
      else
      {
        sub_100062BB0((uint64_t)&v44);
      }
      v14 += 3;
      uint64_t v13 = v40 - 1;
      if (v40 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_34:
    uint64_t v7 = sub_100058F88((void *)(v9 > 1), v11, 1, v7);
LABEL_7:
    v7[2] = v11;
    uint64_t v12 = (char *)v7 + 3 * v10;
    v12[34] = BYTE2(v8);
    *((_WORD *)v12 + 16) = v8;
  }
LABEL_23:
  sub_10005B1DC(&v44, 12);
LABEL_24:
  uint64_t v20 = v33;
  uint64_t v21 = *(unsigned __int8 *)(v33 + 3);
  if (*(unsigned __int8 *)(v33 + 4) <= 1u) {
    sub_10005B1DC(&v44, 14);
  }
  uint64_t v22 = *(void *)(v20 + 32);
  uint64_t v23 = *(void *)(v20 + 16);
  char v24 = *(unsigned char *)(v20 + 24);
  char v25 = *(unsigned char *)(v20 + 25);
  uint64_t v26 = (uint64_t)v47;
  sub_100053B64(v20);
  char v27 = sub_10005AD1C(v26);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v7[2])
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = 0;
  }
  if (!v27[2])
  {
    uint64_t result = swift_release();
    char v27 = 0;
  }
  int v29 = v32 | 0x10000;
  if (!v32) {
    int v29 = -65536;
  }
  int v30 = v34;
  *uint64_t v34 = v29;
  *((unsigned char *)v30 + 2) = BYTE2(v29);
  *((void *)v30 + 1) = v21;
  *((void *)v30 + 2) = v23;
  *((unsigned char *)v30 + 24) = v24;
  *((unsigned char *)v30 + 25) = v25;
  *((void *)v30 + 4) = v27;
  *((void *)v30 + 5) = v22;
  *((void *)v30 + 6) = v7;
  return result;
}

uint64_t sub_1000AF158@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7 = result;
  char v9 = BYTE5(result);
  if ((unsigned __int16)(a2 >> 8))
  {
    dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  *(unsigned char *)(a5 + 2) = -1;
  *(_WORD *)a5 = 0;
  *(void *)(a5 + 8) = BYTE3(v7);
  *(void *)(a5 + 16) = a3;
  *(_WORD *)(a5 + 24) = a4;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = BYTE4(v7);
  *(unsigned char *)(a5 + 48) = (v9 & 2) != 0;
  *(unsigned char *)(a5 + 49) = (v9 & 8) != 0;
  *(unsigned char *)(a5 + 50) = (v9 & 1) == 0;
  *(unsigned char *)(a5 + 51) = (v9 & 4) == 0;
  return result;
}

Swift::Int ADC3InputTerminalDescriptor.hashValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  Hasher.init(_seed:)();
  sub_10004AC00((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1000AF298()
{
  unsigned int v1 = *(_DWORD *)(v0 + 16);
  unint64_t v3 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004AC00((uint64_t)v5, v3, v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3InputTerminalDescriptor(uint64_t a1)
{
  return sub_10004AC00(a1, *(void *)v1, *(void *)(v1 + 8), *(_DWORD *)(v1 + 16));
}

Swift::Int sub_1000AF300()
{
  unsigned int v1 = *(_DWORD *)(v0 + 16);
  unint64_t v3 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004AC00((uint64_t)v5, v3, v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3InputTerminalDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_1000418BC(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16));
}

Swift::Int ADC3OutputTerminalDescriptor.hashValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  char v3 = a2;
  *(void *)unint64_t v10 = a2;
  *(_DWORD *)&void v10[8] = a3;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 40;
  unsigned int v7 = a3 >> 8;
  Hasher.init(_seed:)();
  v9[0] = v3;
  *(_DWORD *)&v9[1] = v5;
  *(_WORD *)&v9[5] = v6;
  *(_WORD *)&v9[7] = *(_WORD *)&v10[7];
  *(_WORD *)&v9[9] = v7;
  sub_100049870((uint64_t)v10, a1, *(unint64_t *)v9, *(unsigned int *)&v9[8]);
  return Hasher._finalize()();
}

Swift::Int sub_1000AF404()
{
  char v1 = *(unsigned char *)(v0 + 8);
  unsigned int v2 = *(_DWORD *)(v0 + 9);
  unsigned int v3 = *(_DWORD *)(v0 + 13);
  __int16 v4 = *(_WORD *)(v0 + 17);
  unint64_t v5 = *(void *)v0;
  Hasher.init(_seed:)();
  v7[0] = v1;
  *(void *)&v7[1] = __PAIR64__(v3, v2);
  *(_WORD *)&v7[9] = v4;
  sub_100049870((uint64_t)v8, v5, *(unint64_t *)v7, *(unsigned int *)&v7[8]);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3OutputTerminalDescriptor(uint64_t a1)
{
  *(void *)&v3[1] = *(void *)(v1 + 9);
  *(_WORD *)&v3[9] = *(_WORD *)(v1 + 17);
  return sub_100049870(a1, *(void *)v1, *(unint64_t *)v3, *(unsigned int *)&v3[8]);
}

Swift::Int sub_1000AF4B8()
{
  char v1 = *(unsigned char *)(v0 + 8);
  unsigned int v2 = *(_DWORD *)(v0 + 9);
  unsigned int v3 = *(_DWORD *)(v0 + 13);
  __int16 v4 = *(_WORD *)(v0 + 17);
  unint64_t v5 = *(void *)v0;
  Hasher.init(_seed:)();
  v7[0] = v1;
  *(void *)&v7[1] = __PAIR64__(v3, v2);
  *(_WORD *)&v7[9] = v4;
  sub_100049870((uint64_t)v8, v5, *(unint64_t *)v7, *(unsigned int *)&v7[8]);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3OutputTerminalDescriptor(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  unsigned int v3 = *(_DWORD *)(a2 + 9);
  unsigned int v4 = *(_DWORD *)(a2 + 13);
  __int16 v5 = *(_WORD *)(a2 + 17);
  unint64_t v6 = *(void *)a2;
  *(void *)&v10[1] = *(void *)(a1 + 9);
  *(_WORD *)&v10[9] = *(_WORD *)(a1 + 17);
  unint64_t v7 = *(void *)v10;
  unsigned int v8 = *(_DWORD *)&v10[8];
  v10[0] = v2;
  *(void *)&v10[1] = __PAIR64__(v4, v3);
  *(_WORD *)&v10[9] = v5;
  return sub_10003FED0(*(void *)a1, v7, v8, v6, *(unint64_t *)v10, *(unsigned int *)&v10[8]);
}

Swift::Int ADC3MixerUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000AFDD4(a1, (void (*)(unsigned char *, uint64_t))sub_10004CC60);
}

Swift::Int sub_1000AF5AC(uint64_t a1, uint64_t a2)
{
  return sub_1000AFE3C(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004CC60);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3MixerUnitDescriptor(uint64_t a1)
{
  return sub_10004CC60(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_1000AF5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AFEC0(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004CC60);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3MixerUnitDescriptor(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AFF30(a1, a2, a3, a4, sub_100044390);
}

Swift::Int ADC3MixerUnitDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_1000AFF68(a1, (void (*)(unsigned char *, uint64_t))sub_100049A94);
}

Swift::Int sub_1000AF61C(uint64_t a1, uint64_t a2)
{
  return sub_1000AFFD0(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100049A94);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3MixerUnitDescriptorPart2(uint64_t a1)
{
  return sub_100049A94(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32));
}

Swift::Int sub_1000AF644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B0054(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100049A94);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3MixerUnitDescriptorPart2(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B00C4(a1, a2, a3, a4, sub_1000401F4);
}

Swift::Int ADC3SelectorUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000AFDD4(a1, (void (*)(unsigned char *, uint64_t))sub_10004B854);
}

Swift::Int sub_1000AF68C(uint64_t a1, uint64_t a2)
{
  return sub_1000AFE3C(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004B854);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3SelectorUnitDescriptor(uint64_t a1)
{
  return sub_10004B854(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_1000AF6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AFEC0(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004B854);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3SelectorUnitDescriptor(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AFF30(a1, a2, a3, a4, sub_100042948);
}

Swift::Int ADC3SelectorUnitDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_1000AFF68(a1, (void (*)(unsigned char *, uint64_t))sub_1000488E8);
}

Swift::Int sub_1000AF6FC(uint64_t a1, uint64_t a2)
{
  return sub_1000AFFD0(a1, a2, (void (*)(unsigned char *, uint64_t))sub_1000488E8);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3SelectorUnitDescriptorPart2(uint64_t a1)
{
  return sub_1000488E8(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32));
}

Swift::Int sub_1000AF724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B0054(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_1000488E8);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3SelectorUnitDescriptorPart2(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B00C4(a1, a2, a3, a4, sub_10003EA34);
}

Swift::Int ADC3FeatureUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000AFDD4(a1, (void (*)(unsigned char *, uint64_t))sub_10004BE78);
}

Swift::Int sub_1000AF76C(uint64_t a1, uint64_t a2)
{
  return sub_1000AFE3C(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004BE78);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3FeatureUnitDescriptor(uint64_t a1)
{
  return sub_10004BE78(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_1000AF794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AFEC0(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004BE78);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3FeatureUnitDescriptor(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AFF30(a1, a2, a3, a4, sub_100043160);
}

Swift::Int ADC3EffectUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000AF8CC(a1, (void (*)(unsigned char *, uint64_t))sub_10004C860);
}

Swift::Int sub_1000AF7DC(uint64_t a1, uint64_t a2)
{
  return sub_1000AF934(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004C860);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3EffectUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AF9B0(a1, a2, a3, sub_10004C860);
}

Swift::Int sub_1000AF80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AF9E4(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004C860);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3EffectUnitDescriptor(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AFA5C(a1, a2, a3, a4, sub_100043E58);
}

Swift::Int ADC3ProcessingUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000AF8CC(a1, (void (*)(unsigned char *, uint64_t))sub_100049858);
}

Swift::Int sub_1000AF854(uint64_t a1, uint64_t a2)
{
  return sub_1000AF934(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100049858);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ProcessingUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AF9B0(a1, a2, a3, sub_100049858);
}

Swift::Int sub_1000AF884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AF9E4(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100049858);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ProcessingUnitDescriptor(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AFA5C(a1, a2, a3, a4, sub_10003FEB8);
}

Swift::Int ADC3ExtensionUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000AF8CC(a1, (void (*)(unsigned char *, uint64_t))sub_10004AE20);
}

Swift::Int sub_1000AF8CC(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1 & 0xFFFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000AF91C(uint64_t a1, uint64_t a2)
{
  return sub_1000AF934(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004AE20);
}

Swift::Int sub_1000AF934(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *((unsigned __int16 *)v3 + 2);
  uint64_t v6 = *((unsigned __int8 *)v3 + 6);
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  a3(v9, v7 | (v5 << 32) | (v6 << 48));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ExtensionUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AF9B0(a1, a2, a3, sub_10004AE20);
}

uint64_t sub_1000AF9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  return a4(a1, *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v4 + 6) << 48));
}

Swift::Int sub_1000AF9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AF9E4(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004AE20);
}

Swift::Int sub_1000AF9E4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *((unsigned __int16 *)v4 + 2);
  uint64_t v7 = *((unsigned __int8 *)v4 + 6);
  uint64_t v8 = *v4;
  Hasher.init(_seed:)();
  a4(v10, v8 | (v6 << 32) | (v7 << 48));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ExtensionUnitDescriptor(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AFA5C(a1, a2, a3, a4, sub_100041BE0);
}

uint64_t sub_1000AFA5C(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48), *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48));
}

Swift::Int ADC3ExtensionUnitDescriptorPart2.hashValue.getter(unint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100048004((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1000AFAD4()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_100048004((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ExtensionUnitDescriptorPart2(uint64_t a1)
{
  return sub_100048004(a1, *v1);
}

Swift::Int sub_1000AFB24()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_100048004((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ExtensionUnitDescriptorPart2(unint64_t *a1, unint64_t *a2)
{
  return sub_10003DF24(*a1, *a2);
}

Swift::Int ADC3ClockSourceDescriptor.hashValue.getter(unint64_t a1, unsigned int a2)
{
  char v2 = a1;
  *(void *)int64_t v11 = a1;
  *(_DWORD *)&v11[8] = a2;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unsigned int v7 = a2 >> 8;
  unsigned int v8 = HIWORD(a2);
  Hasher.init(_seed:)();
  LOBYTE(v10) = v2;
  BYTE1(v10) = v3;
  BYTE2(v10) = v4;
  BYTE3(v10) = v5;
  BYTE4(v10) = v6;
  *(_DWORD *)((char *)&v10 + 5) = *(_DWORD *)&v11[5];
  BYTE9(v10) = v7;
  WORD5(v10) = v8;
  sub_10004BE90((uint64_t)v11, v10, DWORD2(v10));
  return Hasher._finalize()();
}

Swift::Int sub_1000AFC1C()
{
  char v1 = *(unsigned char *)(v0 + 4);
  int v2 = *(_DWORD *)(v0 + 5);
  char v3 = *(unsigned char *)(v0 + 9);
  __int16 v4 = *(_WORD *)(v0 + 10);
  Hasher.init(_seed:)();
  LODWORD(v6) = *(_DWORD *)v0;
  BYTE4(v6) = v1;
  *(_DWORD *)((char *)&v6 + 5) = v2;
  BYTE9(v6) = v3;
  WORD5(v6) = v4;
  sub_10004BE90((uint64_t)v7, v6, DWORD2(v6));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClockSourceDescriptor(uint64_t a1)
{
  v3[4] = *(unsigned char *)(v1 + 4);
  *(_DWORD *)&v3[5] = *(_DWORD *)(v1 + 5);
  v3[9] = *(unsigned char *)(v1 + 9);
  *(_WORD *)&v3[10] = *(_WORD *)(v1 + 10);
  return sub_10004BE90(a1, *(unint64_t *)v3, *(unsigned int *)&v3[8]);
}

Swift::Int sub_1000AFCD4()
{
  char v1 = *(unsigned char *)(v0 + 4);
  int v2 = *(_DWORD *)(v0 + 5);
  char v3 = *(unsigned char *)(v0 + 9);
  __int16 v4 = *(_WORD *)(v0 + 10);
  Hasher.init(_seed:)();
  LODWORD(v6) = *(_DWORD *)v0;
  BYTE4(v6) = v1;
  *(_DWORD *)((char *)&v6 + 5) = v2;
  BYTE9(v6) = v3;
  WORD5(v6) = v4;
  sub_10004BE90((uint64_t)v7, v6, DWORD2(v6));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClockSourceDescriptor(uint64_t a1, uint64_t a2)
{
  v5[4] = *(unsigned char *)(a1 + 4);
  *(_DWORD *)&v5[5] = *(_DWORD *)(a1 + 5);
  v5[9] = *(unsigned char *)(a1 + 9);
  *(_WORD *)&v5[10] = *(_WORD *)(a1 + 10);
  unint64_t v2 = *(void *)v5;
  unsigned int v3 = *(_DWORD *)&v5[8];
  LODWORD(v6) = *(_DWORD *)a2;
  BYTE4(v6) = *(unsigned char *)(a2 + 4);
  *(_DWORD *)((char *)&v6 + 5) = *(_DWORD *)(a2 + 5);
  BYTE9(v6) = *(unsigned char *)(a2 + 9);
  WORD5(v6) = *(_WORD *)(a2 + 10);
  return sub_100043178(v2, v3, v6, DWORD2(v6));
}

Swift::Int ADC3ClockSelectorDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000AFDD4(a1, (void (*)(unsigned char *, uint64_t))sub_10004AFF4);
}

Swift::Int sub_1000AFDD4(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1 & 0xFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000AFE24(uint64_t a1, uint64_t a2)
{
  return sub_1000AFE3C(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004AFF4);
}

Swift::Int sub_1000AFE3C(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(unsigned int *)(v3 + 1);
  Hasher.init(_seed:)();
  a3(v8, v5 | (v6 << 8));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClockSelectorDescriptor(uint64_t a1)
{
  return sub_10004AFF4(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_1000AFEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AFEC0(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004AFF4);
}

Swift::Int sub_1000AFEC0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = *(unsigned int *)(v4 + 1);
  Hasher.init(_seed:)();
  a4(v9, v6 | (v7 << 8));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClockSelectorDescriptor(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AFF30(a1, a2, a3, a4, sub_100041E30);
}

uint64_t sub_1000AFF30(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 8), *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 8));
}

Swift::Int ADC3ClockSelectorDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_1000AFF68(a1, (void (*)(unsigned char *, uint64_t))sub_1000481A8);
}

Swift::Int sub_1000AFF68(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000AFFB8(uint64_t a1, uint64_t a2)
{
  return sub_1000AFFD0(a1, a2, (void (*)(unsigned char *, uint64_t))sub_1000481A8);
}

Swift::Int sub_1000AFFD0(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = *((unsigned __int16 *)v3 + 2);
  Hasher.init(_seed:)();
  a3(v8, v5 | (v6 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClockSelectorDescriptorPart2(uint64_t a1)
{
  return sub_1000481A8(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32));
}

Swift::Int sub_1000B003C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B0054(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_1000481A8);
}

Swift::Int sub_1000B0054(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = *((unsigned __int16 *)v4 + 2);
  Hasher.init(_seed:)();
  a4(v9, v6 | (v7 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClockSelectorDescriptorPart2(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B00C4(a1, a2, a3, a4, sub_10003E128);
}

uint64_t sub_1000B00C4(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32), *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
}

Swift::Int ADC3ClockMultiplierDescriptor.hashValue.getter(unint64_t a1, unsigned int a2)
{
  char v2 = a1;
  *(void *)long long v10 = a1;
  *(_DWORD *)&void v10[8] = a2;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unsigned int v7 = a2 >> 8;
  Hasher.init(_seed:)();
  v9[0] = v2;
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v9[4] = v6;
  *(_DWORD *)&v9[5] = *(_DWORD *)&v10[5];
  *(_WORD *)&v9[9] = v7;
  sub_1000490A4((uint64_t)v10, *(unint64_t *)v9, *(unsigned int *)&v9[8]);
  return Hasher._finalize()();
}

Swift::Int sub_1000B0184()
{
  char v1 = *(unsigned char *)(v0 + 4);
  int v2 = *(_DWORD *)(v0 + 5);
  __int16 v3 = *(_WORD *)(v0 + 9);
  Hasher.init(_seed:)();
  *(_DWORD *)unint64_t v5 = *(_DWORD *)v0;
  v5[4] = v1;
  *(_DWORD *)&v5[5] = v2;
  *(_WORD *)&v5[9] = v3;
  sub_1000490A4((uint64_t)v6, *(unint64_t *)v5, *(unsigned int *)&v5[8]);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClockMultiplierDescriptor(uint64_t a1)
{
  v3[4] = *(unsigned char *)(v1 + 4);
  *(_DWORD *)&v3[5] = *(_DWORD *)(v1 + 5);
  *(_WORD *)&v3[9] = *(_WORD *)(v1 + 9);
  return sub_1000490A4(a1, *(unint64_t *)v3, *(unsigned int *)&v3[8]);
}

Swift::Int sub_1000B0224()
{
  char v1 = *(unsigned char *)(v0 + 4);
  int v2 = *(_DWORD *)(v0 + 5);
  __int16 v3 = *(_WORD *)(v0 + 9);
  Hasher.init(_seed:)();
  *(_DWORD *)unint64_t v5 = *(_DWORD *)v0;
  v5[4] = v1;
  *(_DWORD *)&v5[5] = v2;
  *(_WORD *)&v5[9] = v3;
  sub_1000490A4((uint64_t)v6, *(unint64_t *)v5, *(unsigned int *)&v5[8]);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClockMultiplierDescriptor(uint64_t a1, uint64_t a2)
{
  v5[4] = *(unsigned char *)(a1 + 4);
  *(_DWORD *)&v5[5] = *(_DWORD *)(a1 + 5);
  *(_WORD *)&v5[9] = *(_WORD *)(a1 + 9);
  unint64_t v2 = *(void *)v5;
  unsigned int v3 = *(_DWORD *)&v5[8];
  *(_DWORD *)unint64_t v5 = *(_DWORD *)a2;
  v5[4] = *(unsigned char *)(a2 + 4);
  *(_DWORD *)&v5[5] = *(_DWORD *)(a2 + 5);
  *(_WORD *)&v5[9] = *(_WORD *)(a2 + 9);
  return sub_10003F46C(v2, v3, *(unint64_t *)v5, *(unsigned int *)&v5[8]);
}

Swift::Int ADC3SRConverterUnitDescriptor.hashValue.getter(unint64_t a1, char a2)
{
  char v2 = a1;
  unint64_t v11 = a1;
  char v12 = a2;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  unint64_t v8 = HIWORD(a1);
  Hasher.init(_seed:)();
  LOBYTE(v10) = v2;
  BYTE1(v10) = v3;
  BYTE2(v10) = v4;
  BYTE3(v10) = v5;
  BYTE4(v10) = v6;
  BYTE5(v10) = v7;
  BYTE6(v10) = v8;
  HIBYTE(v10) = HIBYTE(v11);
  sub_100048EB4((uint64_t)&v11, v10, v12);
  return Hasher._finalize()();
}

Swift::Int sub_1000B0394()
{
  __int16 v1 = *(_WORD *)(v0 + 4);
  char v2 = *(unsigned char *)(v0 + 6);
  __int16 v3 = *(_WORD *)(v0 + 7);
  Hasher.init(_seed:)();
  LODWORD(v5) = *(_DWORD *)v0;
  WORD2(v5) = v1;
  BYTE6(v5) = v2;
  HIBYTE(v5) = v3;
  sub_100048EB4((uint64_t)v6, v5, SHIBYTE(v3));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3SRConverterUnitDescriptor(uint64_t a1)
{
  *(_WORD *)&v3[4] = *(_WORD *)(v1 + 4);
  v3[6] = *(unsigned char *)(v1 + 6);
  *(_WORD *)&v3[7] = *(_WORD *)(v1 + 7);
  return sub_100048EB4(a1, *(unint64_t *)v3, v3[8]);
}

Swift::Int sub_1000B0430()
{
  __int16 v1 = *(_WORD *)(v0 + 4);
  char v2 = *(unsigned char *)(v0 + 6);
  __int16 v3 = *(_WORD *)(v0 + 7);
  Hasher.init(_seed:)();
  LODWORD(v5) = *(_DWORD *)v0;
  WORD2(v5) = v1;
  BYTE6(v5) = v2;
  HIBYTE(v5) = v3;
  sub_100048EB4((uint64_t)v6, v5, SHIBYTE(v3));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3SRConverterUnitDescriptor(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 7);
  WORD2(v5) = *(_WORD *)(a1 + 4);
  BYTE6(v5) = *(unsigned char *)(a1 + 6);
  HIBYTE(v5) = v2;
  unint64_t v3 = v5;
  LODWORD(v6) = *(_DWORD *)a2;
  WORD2(v6) = *(_WORD *)(a2 + 4);
  BYTE6(v6) = *(unsigned char *)(a2 + 6);
  *(_WORD *)((char *)&v6 + 7) = *(_WORD *)(a2 + 7);
  return sub_10003F1CC(v3, SHIBYTE(v2), v6, SBYTE8(v6));
}

Swift::Int ADC3PowerDomainDescriptor.hashValue.getter(unint64_t a1, int a2)
{
  Hasher.init(_seed:)();
  sub_10004BCA0((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_1000B0544()
{
  unint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004BCA0((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3PowerDomainDescriptor(uint64_t a1)
{
  return sub_10004BCA0(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

Swift::Int sub_1000B05A0()
{
  unint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004BCA0((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3PowerDomainDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_100042EF0(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

Swift::Int ADC3ClusterClusterDescriptionSegment.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_10004D1EC((uint64_t)v3, a1 & 0xFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000B064C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 2);
  uint64_t v3 = *(unsigned __int16 *)((char *)v0 + 3);
  Hasher.init(_seed:)();
  sub_10004D1EC((uint64_t)v5, v1 | (v2 << 16) | (v3 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterClusterDescriptionSegment(uint64_t a1)
{
  return sub_10004D1EC(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned __int16 *)((char *)v1 + 3) << 24));
}

Swift::Int sub_1000B06C0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 2);
  uint64_t v3 = *(unsigned __int16 *)((char *)v0 + 3);
  Hasher.init(_seed:)();
  sub_10004D1EC((uint64_t)v5, v1 | (v2 << 16) | (v3 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterClusterDescriptionSegment(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_100044A3C(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + 3) << 24), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16) | ((unint64_t)*(unsigned __int16 *)((char *)a2 + 3) << 24));
}

uint64_t sub_1000B0744(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A290, type metadata accessor for ADC3InputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B079C()
{
  return sub_1000B1284(&qword_10012A298, type metadata accessor for ADC3InputTerminalDescriptor);
}

uint64_t sub_1000B07E4(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A2A0, type metadata accessor for ADC3OutputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B083C()
{
  return sub_1000B1284(&qword_10012A2A8, type metadata accessor for ADC3OutputTerminalDescriptor);
}

uint64_t sub_1000B0884(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A2B0, type metadata accessor for ADC3MixerUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B08DC()
{
  return sub_1000B1284(&qword_10012A2B8, type metadata accessor for ADC3MixerUnitDescriptor);
}

uint64_t sub_1000B0924(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A2C0, type metadata accessor for ADC3MixerUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B097C()
{
  return sub_1000B1284(&qword_10012A2C8, type metadata accessor for ADC3MixerUnitDescriptorPart2);
}

uint64_t sub_1000B09C4(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A2D0, type metadata accessor for ADC3SelectorUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B0A1C()
{
  return sub_1000B1284(&qword_10012A2D8, type metadata accessor for ADC3SelectorUnitDescriptor);
}

uint64_t sub_1000B0A64(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A2E0, type metadata accessor for ADC3SelectorUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B0ABC()
{
  return sub_1000B1284(&qword_10012A2E8, type metadata accessor for ADC3SelectorUnitDescriptorPart2);
}

uint64_t sub_1000B0B04(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A2F0, type metadata accessor for ADC3FeatureUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B0B5C()
{
  return sub_1000B1284(&qword_10012A2F8, type metadata accessor for ADC3FeatureUnitDescriptor);
}

uint64_t sub_1000B0BA4(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A300, type metadata accessor for ADC3EffectUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B0BFC()
{
  return sub_1000B1284(&qword_10012A308, type metadata accessor for ADC3EffectUnitDescriptor);
}

uint64_t sub_1000B0C44(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A310, type metadata accessor for ADC3ProcessingUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B0C9C()
{
  return sub_1000B1284(&qword_10012A318, type metadata accessor for ADC3ProcessingUnitDescriptor);
}

uint64_t sub_1000B0CE4(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A320, type metadata accessor for ADC3ExtensionUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B0D3C()
{
  return sub_1000B1284(&qword_10012A328, type metadata accessor for ADC3ExtensionUnitDescriptor);
}

uint64_t sub_1000B0D84(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A330, type metadata accessor for ADC3ExtensionUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B0DDC()
{
  return sub_1000B1284(&qword_10012A338, type metadata accessor for ADC3ExtensionUnitDescriptorPart2);
}

uint64_t sub_1000B0E24(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A340, type metadata accessor for ADC3ClockSourceDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B0E7C()
{
  return sub_1000B1284(&qword_10012A348, type metadata accessor for ADC3ClockSourceDescriptor);
}

uint64_t sub_1000B0EC4(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A350, type metadata accessor for ADC3ClockSelectorDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B0F1C()
{
  return sub_1000B1284(&qword_10012A358, type metadata accessor for ADC3ClockSelectorDescriptor);
}

uint64_t sub_1000B0F64(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A360, type metadata accessor for ADC3ClockSelectorDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B0FBC()
{
  return sub_1000B1284(&qword_10012A368, type metadata accessor for ADC3ClockSelectorDescriptorPart2);
}

uint64_t sub_1000B1004(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A370, type metadata accessor for ADC3ClockMultiplierDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B105C()
{
  return sub_1000B1284(&qword_10012A378, type metadata accessor for ADC3ClockMultiplierDescriptor);
}

uint64_t sub_1000B10A4(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A380, type metadata accessor for ADC3SRConverterUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B10FC()
{
  return sub_1000B1284(&qword_10012A388, type metadata accessor for ADC3SRConverterUnitDescriptor);
}

uint64_t sub_1000B1144(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A390, type metadata accessor for ADC3PowerDomainDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B119C()
{
  return sub_1000B1284(&qword_10012A398, type metadata accessor for ADC3PowerDomainDescriptor);
}

uint64_t sub_1000B11E4(uint64_t a1)
{
  uint64_t result = sub_1000B1284(&qword_10012A3A0, type metadata accessor for ADC3ClusterClusterDescriptionSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B123C()
{
  return sub_1000B1284(&qword_10012A3A8, type metadata accessor for ADC3ClusterClusterDescriptionSegment);
}

uint64_t sub_1000B1284(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_1000B12CC()
{
  unint64_t v1 = *v0 | ((unint64_t)(*((unsigned __int16 *)v0 + 2) | (*((unsigned __int8 *)v0 + 6) << 16)) << 32);
  uint64_t v2 = *((unsigned __int8 *)v0 + 7);
  Hasher.init(_seed:)();
  switch(v2)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      sub_100047630((uint64_t)v4, v1 & 0xFFFFFFFFFFFFLL);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      sub_100047804((uint64_t)v4, v1 & 0xFFFFFFFFFFFFFFLL);
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      sub_1000477EC((uint64_t)v4, v1 & 0xFFFFFFFFFFLL);
      break;
    default:
      Hasher._combine(_:)(0);
      sub_10004D030((uint64_t)v4, v1 & 0xFFFFFF);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_1000B13C4(uint64_t a1)
{
  unint64_t v2 = *v1 | ((unint64_t)(*((unsigned __int16 *)v1 + 2) | (*((unsigned __int8 *)v1 + 6) << 16)) << 32);
  switch(*((unsigned char *)v1 + 7))
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      uint64_t result = sub_100047630(a1, v2 & 0xFFFFFFFFFFFFLL);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      uint64_t result = sub_100047804(a1, v2 & 0xFFFFFFFFFFFFFFLL);
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      uint64_t result = sub_1000477EC(a1, v2 & 0xFFFFFFFFFFLL);
      break;
    default:
      Hasher._combine(_:)(0);
      uint64_t result = sub_10004D030(a1, v2 & 0xFFFFFF);
      break;
  }
  return result;
}

Swift::Int sub_1000B14F4()
{
  unint64_t v1 = *v0 | ((unint64_t)(*((unsigned __int16 *)v0 + 2) | (*((unsigned __int8 *)v0 + 6) << 16)) << 32);
  uint64_t v2 = *((unsigned __int8 *)v0 + 7);
  Hasher.init(_seed:)();
  switch(v2)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      sub_100047630((uint64_t)v4, v1 & 0xFFFFFFFFFFFFLL);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      sub_100047804((uint64_t)v4, v1 & 0xFFFFFFFFFFFFFFLL);
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      sub_1000477EC((uint64_t)v4, v1 & 0xFFFFFFFFFFLL);
      break;
    default:
      Hasher._combine(_:)(0);
      sub_10004D030((uint64_t)v4, v1 & 0xFFFFFF);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_1000B15E8(unint64_t *a1, unint64_t *a2)
{
  return sub_1000B5844(*a1, *a2);
}

__n128 sub_1000B15F4@<Q0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1;
  uint64_t v7 = sub_100089F98(a1, a2);
  if (v8 >> 60 == 15) {
LABEL_36:
  }
    __break(1u);
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (v7 >> 32) - (int)v7;
      if (v7 >> 32 < (int)v7)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int v32 = v5;
      uint64_t v13 = (unsigned char *)__DataStorage._bytes.getter();
      if (v13)
      {
        uint64_t v14 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v10, v14))
        {
          v13 += (int)v10 - v14;
          goto LABEL_8;
        }
        goto LABEL_35;
      }
LABEL_8:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (v10 >> 32) - (int)v10;
      }
      else {
        uint64_t v16 = v15;
      }
      char v17 = &v13[v16];
      if (v13) {
        uint64_t v18 = (uint64_t)v17;
      }
      else {
        uint64_t v18 = 0;
      }
      sub_1000B18B0(v13, v18, (uint64_t)&v34);
LABEL_26:
      sub_1000541C0(v10, v9);
      unint64_t v5 = v32;
      if (!v3)
      {
LABEL_30:
        __int16 v30 = v35;
        char v31 = v36;
        __n128 result = v37;
        *(_DWORD *)a3 = v34;
        *(_WORD *)(a3 + 4) = v30;
        *(unsigned char *)(a3 + 6) = v31;
        *(void *)(a3 + 8) = v5;
        *(_WORD *)(a3 + 16) = a2;
        *(__n128 *)(a3 + 24) = result;
      }
      return result;
    case 2uLL:
      int v32 = v5;
      uint64_t v20 = *(void *)(v7 + 16);
      uint64_t v19 = *(void *)(v7 + 24);
      swift_retain();
      swift_retain();
      uint64_t v21 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v21) {
        goto LABEL_18;
      }
      uint64_t v22 = __DataStorage._offset.getter();
      if (__OFSUB__(v20, v22)) {
        goto LABEL_34;
      }
      v21 += v20 - v22;
LABEL_18:
      BOOL v23 = __OFSUB__(v19, v20);
      uint64_t v24 = v19 - v20;
      if (v23) {
        goto LABEL_33;
      }
      uint64_t v25 = __DataStorage._length.getter();
      if (v25 >= v24) {
        uint64_t v26 = v24;
      }
      else {
        uint64_t v26 = v25;
      }
      char v27 = &v21[v26];
      if (v21) {
        uint64_t v28 = (uint64_t)v27;
      }
      else {
        uint64_t v28 = 0;
      }
      sub_1000B18B0(v21, v28, (uint64_t)&v34);
      swift_release();
      swift_release();
      goto LABEL_26;
    case 3uLL:
      memset(v33, 0, 14);
      unint64_t v11 = (char *)v33;
      goto LABEL_29;
    default:
      v33[0] = v7;
      LOWORD(v33[1]) = v8;
      BYTE2(v33[1]) = BYTE2(v8);
      BYTE3(v33[1]) = BYTE3(v8);
      BYTE4(v33[1]) = BYTE4(v8);
      BYTE5(v33[1]) = BYTE5(v8);
      unint64_t v11 = (char *)v33 + BYTE6(v8);
LABEL_29:
      sub_1000B18B0(v33, (uint64_t)v11, (uint64_t)&v34);
      sub_1000541C0(v10, v9);
      if (!v3) {
        goto LABEL_30;
      }
      return result;
  }
}

uint64_t sub_1000B18B0@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_100079D18(1, a1, a2);
  if (!v4)
  {
    unint64_t v13 = *(void *)(result + 16);
    if (!v13)
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    uint64_t v14 = v10;
    uint64_t v15 = v11;
    LOWORD(v6) = *(_WORD *)(result + 32);
    unsigned int v16 = *(unsigned __int8 *)(result + 34);
    int64_t v8 = *(unsigned __int8 *)(result + 35);
    int v17 = *(unsigned __int16 *)(result + 36);
    unsigned int v18 = *(unsigned __int8 *)(result + 38);
    swift_bridgeObjectRelease();
    BOOL v73 = v14;
    uint64_t v74 = v15;
    unint64_t v5 = (unint64_t)sub_1000B58D0((uint64_t)&v73);
    unsigned int v75 = v18;
    int v76 = v17;
    char v67 = v8;
    unsigned int v68 = v16;
    unint64_t v3 = HIBYTE(v5);
    if (!HIBYTE(v5))
    {
      uint64_t v12 = sub_10005A42C(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v3 = v12[2];
      unint64_t v13 = v12[3];
      int64_t v8 = v3 + 1;
      __int16 v7 = v76;
      if (v3 >= v13 >> 1) {
        goto LABEL_46;
      }
      goto LABEL_35;
    }
    BOOL v70 = _swiftEmptyArrayStorage;
    __int16 v7 = v76;
    while (1)
    {
      sub_10000AC7C(&qword_100128E58);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_1000E8090;
      *(unsigned char *)(v19 + 38) = BYTE6(v5);
      *(_WORD *)(v19 + 36) = WORD2(v5);
      *(_DWORD *)(v19 + 32) = v5;
      *(unsigned char *)(v19 + 39) = v3;
      unint64_t v13 = v75;
      if (v75) {
        break;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      uint64_t v12 = sub_10005A42C((void *)(v13 > 1), v8, 1, v12);
LABEL_35:
      v12[2] = v8;
      int v63 = &v12[v3];
      *((_DWORD *)v63 + 8) = v5;
      *((unsigned char *)v63 + 38) = BYTE6(v5);
      *((_WORD *)v63 + 18) = WORD2(v5);
      *((unsigned char *)v63 + 39) = 0;
      unint64_t v64 = v12;
      unint64_t v5 = (unint64_t)sub_1000B58D0((uint64_t)&v73);
      BOOL v70 = v64;
      unint64_t v3 = HIBYTE(v5);
    }
    uint64_t v20 = (void *)v19;
    __int16 v66 = v6;
    char v21 = 1;
    BOOL v71 = _swiftEmptyArrayStorage;
    while (2)
    {
      unsigned __int8 v69 = v21;
      do
      {
        uint64_t v22 = v73;
        uint64_t v6 = v74;
        BOOL v23 = sub_10007997C(1, v73, v74);
        unint64_t v13 = *((void *)v23 + 2);
        if (!v13)
        {
          __break(1u);
          goto LABEL_40;
        }
        unint64_t v3 = *((unsigned __int8 *)v23 + 34);
        swift_bridgeObjectRelease();
        if ((int)v3 > 33)
        {
          if (v3 == 34)
          {
            long long v51 = sub_100079260(1, v22, v6);
            unint64_t v13 = v51[2];
            if (!v13) {
              goto LABEL_44;
            }
            unint64_t v54 = v52;
            uint64_t v55 = v53;
            uint64_t v56 = *((unsigned __int16 *)v51 + 16);
            uint64_t v57 = *((unsigned __int8 *)v51 + 34);
            uint64_t v58 = *(unsigned __int16 *)((char *)v51 + 35);
            swift_bridgeObjectRelease();
            unint64_t v3 = 0;
            BOOL v73 = v54;
            uint64_t v74 = v55;
            uint64_t v34 = v56 | (v57 << 16) | (v58 << 24);
            __int16 v7 = v76;
            int64_t v8 = 3;
          }
          else
          {
            if (v3 != 255)
            {
LABEL_36:
              sub_10000CD54();
              swift_allocError();
              *(unsigned char *)uint64_t v65 = 37;
              *(void *)(v65 + 8) = 0;
              *(void *)(v65 + 16) = 0xE000000000000000;
              *(void *)(v65 + 24) = 0xD000000000000012;
              *(void *)(v65 + 32) = 0x80000001000E69E0;
              *(void *)(v65 + 40) = 0xD00000000000001FLL;
              *(void *)(v65 + 48) = 0x80000001000E6A00;
              *(void *)(v65 + 56) = 100;
              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
            __int16 v35 = sub_100079200(1, v22, v6);
            unint64_t v13 = *((void *)v35 + 2);
            if (!v13) {
              goto LABEL_42;
            }
            uint64_t v38 = v36;
            uint64_t v39 = v37;
            uint64_t v40 = *((unsigned __int16 *)v35 + 16);
            uint64_t v41 = *((unsigned __int8 *)v35 + 34);
            swift_bridgeObjectRelease();
            int64_t v8 = 0;
            BOOL v73 = v38;
            uint64_t v74 = v39;
            uint64_t v34 = v40 | (v41 << 16);
            unint64_t v3 = 1;
          }
        }
        else if (v3 == 32)
        {
          long long v42 = sub_10007991C(1, v22, v6);
          unint64_t v13 = *((void *)v42 + 2);
          if (!v13) {
            goto LABEL_43;
          }
          long long v45 = v43;
          uint64_t v46 = v44;
          uint64_t v47 = *((unsigned __int8 *)v42 + 36);
          uint64_t v48 = *((unsigned __int8 *)v42 + 37);
          uint64_t v49 = *((unsigned int *)v42 + 8);
          swift_bridgeObjectRelease();
          unint64_t v3 = 0;
          BOOL v73 = v45;
          uint64_t v74 = v46;
          uint64_t v50 = v49 | (v47 << 32);
          __int16 v7 = v76;
          uint64_t v34 = v50 | (v48 << 40);
          int64_t v8 = 1;
        }
        else
        {
          if (v3 != 33) {
            goto LABEL_36;
          }
          uint64_t v24 = sub_10007957C(1, v22, v6);
          unint64_t v13 = *((void *)v24 + 2);
          if (!v13) {
            goto LABEL_41;
          }
          char v27 = v25;
          uint64_t v28 = v26;
          uint64_t v29 = *((unsigned __int8 *)v24 + 36);
          uint64_t v30 = *((unsigned __int8 *)v24 + 37);
          uint64_t v31 = *((unsigned int *)v24 + 8);
          uint64_t v32 = *((unsigned __int8 *)v24 + 38);
          swift_bridgeObjectRelease();
          unint64_t v3 = 0;
          BOOL v73 = v27;
          uint64_t v74 = v28;
          uint64_t v33 = v31 | (v29 << 32) | (v30 << 40);
          __int16 v7 = v76;
          uint64_t v34 = v33 | (v32 << 48);
          int64_t v8 = 2;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = sub_10005A42C(0, v20[2] + 1, 1, v20);
        }
        unint64_t v5 = v20[2];
        unint64_t v59 = v20[3];
        if (v5 >= v59 >> 1) {
          uint64_t v20 = sub_10005A42C((void *)(v59 > 1), v5 + 1, 1, v20);
        }
        void v20[2] = v5 + 1;
        uint64_t v60 = &v20[v5];
        *((_DWORD *)v60 + 8) = v34;
        *((unsigned char *)v60 + 38) = BYTE6(v34);
        *((_WORD *)v60 + 18) = WORD2(v34);
        *((unsigned char *)v60 + 39) = v8;
      }
      while (!v3);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v71 = sub_10005A53C(0, v71[2] + 1, 1, v71);
      }
      unint64_t v3 = v71[2];
      unint64_t v61 = v71[3];
      unint64_t v5 = v68;
      if (v3 >= v61 >> 1) {
        BOOL v71 = sub_10005A53C((void *)(v61 > 1), v3 + 1, 1, v71);
      }
      v71[2] = v3 + 1;
      v71[v3 + 4] = v20;
      uint64_t result = swift_bridgeObjectRelease();
      char v62 = v75;
      if (v75 == v69)
      {
        *(_WORD *)a3 = v66;
        *(unsigned char *)(a3 + 2) = v68;
        *(unsigned char *)(a3 + 3) = v67;
        *(_WORD *)(a3 + 4) = v7;
        *(unsigned char *)(a3 + 6) = v62;
        *(void *)(a3 + 8) = v70;
        *(void *)(a3 + 16) = v71;
      }
      else
      {
        char v21 = v69 + 1;
        uint64_t v20 = _swiftEmptyArrayStorage;
        if (((v69 + 1) & 0x100) == 0) {
          continue;
        }
        __break(1u);
      }
      break;
    }
  }
  return result;
}

uint64_t sub_1000B1E34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_100079DEC(1, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      unint64_t v9 = v7;
      uint64_t v10 = v8;
      v4.i32[0] = *(_DWORD *)(result + 32);
      uint64_t v11 = *(unsigned __int8 *)(result + 36);
      swift_bridgeObjectRelease();
      uint64_t v12 = sub_1000781B8(v11, v9, v10);
      uint64_t result = (uint64_t)sub_100075CE8((__int16 *)1, v13, v14);
      if (*(void *)(result + 16))
      {
        int v17 = v15;
        uint64_t v18 = v16;
        int16x8_t v25 = (int16x8_t)vmovl_u8(v4);
        __int16 v19 = *(_WORD *)(result + 32);
        uint64_t result = swift_bridgeObjectRelease();
        if (((v25.u16[0] - 13) & 0xFFFFFF00) == 0)
        {
          if ((((v25.i8[0] - 13) - v11) & 0xFFFFFF00) == 0)
          {
            uint64_t v20 = sub_1000781B8((v25.i8[0] - 13 - v11), v17, v18);
            uint64_t result = (uint64_t)sub_100079D78(1, v21, v22);
            if (*(void *)(result + 16))
            {
              int v23 = *(_DWORD *)(result + 32);
              __int16 v24 = *(_WORD *)(result + 36);
              uint64_t result = swift_bridgeObjectRelease();
              *(_DWORD *)a3 = vmovn_s16(v25).u32[0];
              *(unsigned char *)(a3 + 4) = v11;
              *(void *)(a3 + 8) = v12;
              *(_WORD *)(a3 + 16) = v19;
              *(void *)(a3 + 24) = v20;
              *(_DWORD *)(a3 + 32) = v23;
              *(_WORD *)(a3 + 36) = v24;
              return result;
            }
            goto LABEL_14;
          }
LABEL_13:
          __break(1u);
LABEL_14:
          __break(1u);
          return result;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1000B1FC4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = 0;
  int v3 = *(_DWORD *)result;
  uint64_t v19 = 0x200000001;
  char v21 = 16;
  __int16 v20 = 385;
  __int16 v22 = 384;
  char v23 = 16;
  uint64_t v24 = 0x800000004;
  char v26 = 17;
  __int16 v25 = 705;
  __int16 v27 = 704;
  char v28 = 17;
  uint64_t v29 = 0x2000000010;
  char v31 = 32;
  __int16 v30 = 769;
  __int16 v32 = 768;
  char v33 = 32;
  uint64_t v34 = 0x8000000040;
  char v36 = 32;
  __int16 v35 = 1089;
  char v38 = 32;
  __int16 v37 = 1088;
  uint64_t v39 = 0x20000000100;
  char v41 = 32;
  __int16 v40 = 1409;
  char v43 = 32;
  __int16 v42 = 1408;
  uint64_t v44 = 0x80000000400;
  char v46 = 32;
  __int16 v45 = 1729;
  char v48 = 32;
  __int16 v47 = 1728;
  uint64_t v49 = 0x200000001000;
  char v51 = 48;
  __int16 v50 = 1793;
  __int16 v52 = 1792;
  char v53 = 48;
  uint64_t v54 = 0x800000004000;
  __int16 v55 = 2113;
  char v56 = 50;
  __int16 v57 = 2112;
  char v58 = 50;
  uint64_t v59 = 0x2000000010000;
  char v61 = 48;
  __int16 v60 = 2433;
  char v63 = 48;
  __int16 v62 = 2432;
  uint64_t v64 = 0x8000000040000;
  char v66 = 48;
  __int16 v65 = 2753;
  char v68 = 48;
  __int16 v67 = 2752;
  uint64_t v69 = 0x20000000100000;
  char v71 = 65;
  __int16 v70 = 2817;
  __int16 v72 = 2816;
  char v73 = 65;
  uint64_t v74 = 0x80000000400000;
  char v76 = 65;
  __int16 v75 = 3137;
  char v78 = 65;
  __int16 v77 = 3136;
  uint64_t v79 = 0x200000001000000;
  char v81 = 64;
  __int16 v80 = 3457;
  __int16 v82 = 3456;
  char v83 = 64;
  uint64_t v84 = 0x800000004000000;
  char v86 = 16;
  __int16 v85 = 3585;
  char v88 = 16;
  __int16 v87 = 3584;
  uint64_t v89 = 0x2000000010000000;
  char v91 = 16;
  __int16 v90 = 3905;
  __int16 v92 = 3904;
  char v93 = 16;
  uint8x8_t v4 = _swiftEmptyArrayStorage;
  int v94 = v3;
  do
  {
    unint64_t v5 = &v18[v2 + 1];
    if ((*(_DWORD *)&v18[v2 + 33] & v3) != 0)
    {
      int v6 = *((_DWORD *)v5 + 9);
      __int16 v7 = (unsigned __int16 *)(v5 + 43);
      uint64_t v8 = (unsigned __int16 *)(v5 + 40);
      int v9 = v6 & v3;
      if ((v6 & v3) == 0) {
        uint64_t v8 = v7;
      }
      int v10 = *((unsigned __int8 *)v8 + 2);
      int v11 = *v8;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100058F88(0, v4[2] + 1, 1, v4);
        uint8x8_t v4 = (void *)result;
      }
      unint64_t v13 = v4[2];
      unint64_t v12 = v4[3];
      if (v13 >= v12 >> 1)
      {
        uint64_t result = (uint64_t)sub_100058F88((void *)(v12 > 1), v13 + 1, 1, v4);
        uint8x8_t v4 = (void *)result;
      }
      v4[2] = v13 + 1;
      uint64_t v14 = (char *)v4 + 3 * v13;
      v14[34] = (v11 | (v10 << 16)) >> 16;
      *((_WORD *)v14 + 16) = v11;
      BOOL v16 = v6 == 0x8000000 && v9 != 0;
      if (v6 == 0x20000000 || v16) {
        uint64_t result = sub_10005B1DC(v18, 10);
      }
      int v3 = v94;
    }
    v2 += 16;
  }
  while (v2 != 240);
  *a2 = v4;
  return result;
}

_DWORD *sub_1000B2384@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10007A35C(1, a1, a2);
  if (!v3)
  {
    if (*((void *)result + 2))
    {
      int v9 = v7;
      uint64_t v10 = v8;
      v4.i32[0] = result[8];
      __int16 v11 = *((_WORD *)result + 18);
      uint64_t v12 = *((unsigned __int8 *)result + 38);
      swift_bridgeObjectRelease();
      uint64_t result = sub_1000781B8(v12, v9, v10);
      uint16x8_t v15 = vmovl_u8(v4);
      if (((v15.u16[0] - 9) & 0xFFFFFF00) == 0)
      {
        int16x8_t v23 = (int16x8_t)v15;
        int v16 = (v15.i8[0] - 9) - v12;
        if ((v16 & 0xFFFFFF00) == 0)
        {
          int v17 = result;
          uint64_t result = sub_100075CE8((__int16 *)1, v13, v14);
          if (*((void *)result + 2))
          {
            __int16 v20 = v18;
            uint64_t v21 = v19;
            __int16 v22 = *((_WORD *)result + 16);
            swift_bridgeObjectRelease();
            uint64_t result = sub_1000781B8(v16, v20, v21);
            *(_DWORD *)a3 = vmovn_s16(v23).u32[0];
            *(_WORD *)(a3 + 4) = v11;
            *(unsigned char *)(a3 + 6) = v12;
            *(void *)(a3 + 8) = v17;
            *(_WORD *)(a3 + 16) = v22;
            *(void *)(a3 + 24) = result;
            return result;
          }
          goto LABEL_11;
        }
LABEL_10:
        __break(1u);
LABEL_11:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1000B24DC@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1;
  uint64_t v7 = sub_100089F98(a1, a2);
  if (v8 >> 60 == 15) {
    goto LABEL_46;
  }
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      uint64_t v39 = v5;
      uint64_t v26 = *(void *)(v7 + 16);
      uint64_t v25 = *(void *)(v7 + 24);
      swift_retain();
      swift_retain();
      __int16 v27 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v27) {
        goto LABEL_22;
      }
      uint64_t v28 = __DataStorage._offset.getter();
      if (__OFSUB__(v26, v28)) {
        goto LABEL_42;
      }
      v27 += v26 - v28;
LABEL_22:
      BOOL v29 = __OFSUB__(v25, v26);
      uint64_t v30 = v25 - v26;
      if (v29) {
        goto LABEL_40;
      }
      uint64_t v31 = __DataStorage._length.getter();
      if (v31 >= v30) {
        uint64_t v32 = v30;
      }
      else {
        uint64_t v32 = v31;
      }
      char v33 = &v27[v32];
      if (v27) {
        uint64_t v34 = (uint64_t)v33;
      }
      else {
        uint64_t v34 = 0;
      }
      __int16 v35 = sub_1000768FC(1, v27, v34);
      if (v3)
      {
        swift_release();
        swift_release();
        return sub_1000541C0(v10, v9);
      }
      if (!v35[2]) {
        goto LABEL_45;
      }
      v36.i32[0] = *((_DWORD *)v35 + 8);
      int16x8_t v41 = (int16x8_t)vmovl_u8(v36);
      __int16 v21 = *((_WORD *)v35 + 18);
      char v38 = *((unsigned char *)v35 + 38);
      char v40 = *((unsigned char *)v35 + 39);
      int v23 = *((_DWORD *)v35 + 10);
      uint64_t v24 = *(void *)((char *)v35 + 44);
      swift_release();
      swift_release();
      char v22 = v38;
      goto LABEL_37;
    case 3uLL:
      memset(v42, 0, 14);
      __int16 v11 = sub_1000768FC(1, v42, (uint64_t)v42);
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (v11[2]) {
        goto LABEL_34;
      }
      goto LABEL_43;
    default:
      v42[0] = v7;
      LOWORD(v42[1]) = v8;
      BYTE2(v42[1]) = BYTE2(v8);
      BYTE3(v42[1]) = BYTE3(v8);
      BYTE4(v42[1]) = BYTE4(v8);
      BYTE5(v42[1]) = BYTE5(v8);
      __int16 v11 = sub_1000768FC(1, v42, (uint64_t)v42 + BYTE6(v8));
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (v11[2])
      {
LABEL_34:
        v12.i32[0] = *((_DWORD *)v11 + 8);
        int16x8_t v41 = (int16x8_t)vmovl_u8(v12);
        __int16 v21 = *((_WORD *)v11 + 18);
        char v22 = *((unsigned char *)v11 + 38);
        char v40 = *((unsigned char *)v11 + 39);
        int v23 = *((_DWORD *)v11 + 10);
        uint64_t v24 = *(void *)((char *)v11 + 44);
        swift_bridgeObjectRelease();
        uint64_t result = sub_1000541C0(v10, v9);
        goto LABEL_38;
      }
      __break(1u);
LABEL_6:
      if (v10 >> 32 < (int)v10)
      {
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v39 = v5;
      unint64_t v13 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_10;
      }
      uint64_t v14 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v10, v14))
      {
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      v13 += (int)v10 - v14;
LABEL_10:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= (v10 >> 32) - (int)v10) {
        uint64_t v16 = (v10 >> 32) - (int)v10;
      }
      else {
        uint64_t v16 = v15;
      }
      int v17 = &v13[v16];
      if (v13) {
        uint64_t v18 = (uint64_t)v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = sub_1000768FC(1, v13, v18);
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (!v19[2])
      {
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
      }
      v20.i32[0] = *((_DWORD *)v19 + 8);
      int16x8_t v41 = (int16x8_t)vmovl_u8(v20);
      __int16 v21 = *((_WORD *)v19 + 18);
      char v22 = *((unsigned char *)v19 + 38);
      char v40 = *((unsigned char *)v19 + 39);
      int v23 = *((_DWORD *)v19 + 10);
      uint64_t v24 = *(void *)((char *)v19 + 44);
LABEL_37:
      swift_bridgeObjectRelease();
      uint64_t result = sub_1000541C0(v10, v9);
      unint64_t v5 = v39;
LABEL_38:
      *(_DWORD *)a3 = vmovn_s16(v41).u32[0];
      *(_WORD *)(a3 + 4) = v21;
      *(unsigned char *)(a3 + 6) = v22;
      *(unsigned char *)(a3 + 7) = v40;
      *(_DWORD *)(a3 + 8) = v23;
      *(void *)(a3 + 12) = v24;
      *(void *)(a3 + 24) = v5;
      *(_WORD *)(a3 + 32) = a2;
      return result;
  }
}

uint64_t sub_1000B288C@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1;
  uint64_t v7 = sub_100089F98(a1, a2);
  if (v8 >> 60 == 15) {
    goto LABEL_46;
  }
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      uint64_t v39 = v5;
      uint64_t v25 = *(void *)(v7 + 16);
      uint64_t v24 = *(void *)(v7 + 24);
      swift_retain();
      swift_retain();
      uint64_t v26 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v26) {
        goto LABEL_22;
      }
      uint64_t v27 = __DataStorage._offset.getter();
      if (__OFSUB__(v25, v27)) {
        goto LABEL_42;
      }
      v26 += v25 - v27;
LABEL_22:
      BOOL v28 = __OFSUB__(v24, v25);
      uint64_t v29 = v24 - v25;
      if (v28) {
        goto LABEL_40;
      }
      uint64_t v30 = __DataStorage._length.getter();
      if (v30 >= v29) {
        uint64_t v31 = v29;
      }
      else {
        uint64_t v31 = v30;
      }
      uint64_t v32 = &v26[v31];
      if (v26) {
        uint64_t v33 = (uint64_t)v32;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v34 = sub_100076C1C(1, v26, v33);
      if (v3)
      {
        swift_release();
        swift_release();
        return sub_1000541C0(v10, v9);
      }
      if (!v34[2]) {
        goto LABEL_45;
      }
      v35.i32[0] = *((_DWORD *)v34 + 8);
      int16x8_t v45 = (int16x8_t)vmovl_u8(v35);
      __int16 v38 = *((_WORD *)v34 + 18);
      char v37 = *((unsigned char *)v34 + 38);
      char v43 = *((unsigned char *)v34 + 40);
      char v44 = *((unsigned char *)v34 + 39);
      __int16 v41 = *(_WORD *)((char *)v34 + 45);
      int v42 = *(_DWORD *)((char *)v34 + 41);
      __int16 v40 = *(_WORD *)((char *)v34 + 47);
      __int16 v23 = *(_WORD *)((char *)v34 + 49);
      swift_release();
      swift_release();
      char v22 = v37;
      __int16 v21 = v38;
      goto LABEL_37;
    case 3uLL:
      memset(v46, 0, 14);
      __int16 v11 = sub_100076C1C(1, v46, (uint64_t)v46);
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (v11[2]) {
        goto LABEL_34;
      }
      goto LABEL_43;
    default:
      v46[0] = v7;
      LOWORD(v46[1]) = v8;
      BYTE2(v46[1]) = BYTE2(v8);
      BYTE3(v46[1]) = BYTE3(v8);
      BYTE4(v46[1]) = BYTE4(v8);
      BYTE5(v46[1]) = BYTE5(v8);
      __int16 v11 = sub_100076C1C(1, v46, (uint64_t)v46 + BYTE6(v8));
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (v11[2])
      {
LABEL_34:
        v12.i32[0] = *((_DWORD *)v11 + 8);
        int16x8_t v45 = (int16x8_t)vmovl_u8(v12);
        __int16 v21 = *((_WORD *)v11 + 18);
        char v22 = *((unsigned char *)v11 + 38);
        char v43 = *((unsigned char *)v11 + 40);
        char v44 = *((unsigned char *)v11 + 39);
        __int16 v41 = *(_WORD *)((char *)v11 + 45);
        int v42 = *(_DWORD *)((char *)v11 + 41);
        __int16 v40 = *(_WORD *)((char *)v11 + 47);
        __int16 v23 = *(_WORD *)((char *)v11 + 49);
        swift_bridgeObjectRelease();
        uint64_t result = sub_1000541C0(v10, v9);
        goto LABEL_38;
      }
      __break(1u);
LABEL_6:
      if (v10 >> 32 < (int)v10)
      {
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v39 = v5;
      unint64_t v13 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_10;
      }
      uint64_t v14 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v10, v14))
      {
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      v13 += (int)v10 - v14;
LABEL_10:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= (v10 >> 32) - (int)v10) {
        uint64_t v16 = (v10 >> 32) - (int)v10;
      }
      else {
        uint64_t v16 = v15;
      }
      int v17 = &v13[v16];
      if (v13) {
        uint64_t v18 = (uint64_t)v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = sub_100076C1C(1, v13, v18);
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (!v19[2])
      {
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
      }
      v20.i32[0] = *((_DWORD *)v19 + 8);
      int16x8_t v45 = (int16x8_t)vmovl_u8(v20);
      __int16 v21 = *((_WORD *)v19 + 18);
      char v22 = *((unsigned char *)v19 + 38);
      char v43 = *((unsigned char *)v19 + 40);
      char v44 = *((unsigned char *)v19 + 39);
      __int16 v41 = *(_WORD *)((char *)v19 + 45);
      int v42 = *(_DWORD *)((char *)v19 + 41);
      __int16 v40 = *(_WORD *)((char *)v19 + 47);
      __int16 v23 = *(_WORD *)((char *)v19 + 49);
LABEL_37:
      swift_bridgeObjectRelease();
      uint64_t result = sub_1000541C0(v10, v9);
      unint64_t v5 = v39;
LABEL_38:
      *(_DWORD *)a3 = vmovn_s16(v45).u32[0];
      *(_WORD *)(a3 + 4) = v21;
      *(unsigned char *)(a3 + 6) = v22;
      *(unsigned char *)(a3 + 7) = v44;
      *(unsigned char *)(a3 + 8) = v43;
      *(_DWORD *)(a3 + 9) = v42;
      *(_WORD *)(a3 + 13) = v41;
      *(_WORD *)(a3 + 15) = v40;
      *(_WORD *)(a3 + 17) = v23;
      *(void *)(a3 + 24) = v5;
      *(_WORD *)(a3 + 32) = a2;
      return result;
  }
}

uint8x8_t sub_1000B2C90@<D0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v4 = a2;
  uint64_t v6 = sub_100089F98(a1, a2);
  if (v7 >> 60 == 15) {
LABEL_42:
  }
    __break(1u);
  unint64_t v8 = v7;
  uint64_t v9 = v6;
  switch(v7 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (v6 >> 32) - (int)v6;
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v13 = __DataStorage._bytes.getter();
      if (v13)
      {
        uint64_t v14 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v9, v14))
        {
          v13 += (int)v9 - v14;
          goto LABEL_8;
        }
        goto LABEL_41;
      }
LABEL_8:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (v9 >> 32) - (int)v9;
      }
      else {
        uint64_t v16 = v15;
      }
      int v17 = (char *)(v13 + v16);
      if (v13) {
        uint64_t v10 = v17;
      }
      else {
        uint64_t v10 = 0;
      }
      __int16 v11 = (void *)v13;
LABEL_28:
      sub_1000B1E34((uint64_t)v11, (uint64_t)v10, (uint64_t)&v47);
      sub_1000541C0(v9, v8);
      if (!v3)
      {
LABEL_29:
        result.i32[0] = (int)v47;
        int16x8_t v42 = (int16x8_t)vmovl_u8(result);
        char v27 = BYTE4(v47);
        uint64_t v28 = v48;
        __int16 v29 = v49;
        uint64_t v30 = v50;
        __int16 v40 = v52;
        int v41 = v51;
        int64_t v31 = *(void *)(v48 + 16);
        if (v31)
        {
          char v37 = BYTE4(v47);
          uint64_t v38 = v50;
          __int16 v39 = v49;
          __int16 v44 = v4;
          __int16 v47 = _swiftEmptyArrayStorage;
          sub_10007C4BC(0, v31, 0);
          uint64_t v32 = 0;
          uint64_t v33 = v47;
          unint64_t v34 = v47[2];
          do
          {
            uint64_t v35 = *(unsigned __int8 *)(v28 + v32 + 32);
            __int16 v47 = v33;
            unint64_t v36 = v33[3];
            if (v34 >= v36 >> 1)
            {
              sub_10007C4BC(v36 > 1, v34 + 1, 1);
              uint64_t v33 = v47;
            }
            ++v32;
            void v33[2] = v34 + 1;
            v33[v34++ + 4] = v35;
          }
          while (v31 != v32);
          swift_bridgeObjectRelease();
          __int16 v4 = v44;
          __int16 v29 = v39;
          uint64_t v30 = v38;
          char v27 = v37;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v33 = _swiftEmptyArrayStorage;
        }
        uint8x8_t result = (uint8x8_t)vmovn_s16(v42);
        *(_DWORD *)a3 = result.i32[0];
        *(unsigned char *)(a3 + 4) = v27;
        *(_DWORD *)(a3 + 5) = v41;
        *(_WORD *)(a3 + 9) = v40;
        *(void *)(a3 + 16) = a1;
        *(_WORD *)(a3 + 24) = v4;
        *(void *)(a3 + 32) = v33;
        *(_WORD *)(a3 + 40) = v29;
        *(void *)(a3 + 48) = v30;
      }
      return result;
    case 2uLL:
      __int16 v43 = v4;
      uint64_t v18 = *(void *)(v6 + 16);
      uint64_t v19 = *(void *)(v6 + 24);
      swift_retain();
      swift_retain();
      uint64_t v20 = __DataStorage._bytes.getter();
      if (!v20) {
        goto LABEL_18;
      }
      uint64_t v21 = __DataStorage._offset.getter();
      if (__OFSUB__(v18, v21)) {
        goto LABEL_40;
      }
      v20 += v18 - v21;
LABEL_18:
      if (__OFSUB__(v19, v18)) {
        goto LABEL_39;
      }
      uint64_t v22 = __DataStorage._length.getter();
      if (v22 >= v19 - v18) {
        uint64_t v23 = v19 - v18;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = v20 + v23;
      if (v20) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      sub_1000B1E34(v20, v25, (uint64_t)&v47);
      swift_release();
      swift_release();
      sub_1000541C0(v9, v8);
      __int16 v4 = v43;
      if (!v3) {
        goto LABEL_29;
      }
      return result;
    case 3uLL:
      memset(v46, 0, 14);
      __int16 v11 = v46;
      uint64_t v10 = (char *)v46;
      goto LABEL_28;
    default:
      v46[0] = v6;
      LOWORD(v46[1]) = v7;
      BYTE2(v46[1]) = BYTE2(v7);
      BYTE3(v46[1]) = BYTE3(v7);
      BYTE4(v46[1]) = BYTE4(v7);
      BYTE5(v46[1]) = BYTE5(v7);
      uint64_t v10 = (char *)v46 + BYTE6(v7);
      __int16 v11 = v46;
      goto LABEL_28;
  }
}

uint64_t sub_1000B3040@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  return sub_1000B48B8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100079ED4, (uint64_t (*)(uint64_t))sub_100079E60, a3);
}

uint64_t sub_1000B30B4@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v4 = v3;
  uint64_t v8 = sub_100089F98(a1, a2);
  if (v9 >> 60 == 15) {
LABEL_61:
  }
    __break(1u);
  unint64_t v10 = v9;
  uint64_t v11 = v8;
  switch(v9 >> 62)
  {
    case 1uLL:
      goto LABEL_8;
    case 2uLL:
      goto LABEL_23;
    case 3uLL:
      memset(v68, 0, 14);
      __int16 v52 = sub_100079F48(1, (uint64_t)v68, (uint64_t)v68);
      if (v3) {
        return sub_1000541C0(v11, v10);
      }
      if (!*((void *)v52 + 2)) {
        goto LABEL_55;
      }
      char v56 = v53;
      uint64_t v57 = v54;
      v55.i32[0] = *((_DWORD *)v52 + 8);
      int16x8_t v67 = (int16x8_t)vmovl_u8(v55);
      char v18 = v52[36];
      swift_bridgeObjectRelease();
      if (((v67.u16[0] - 7) & 0xFFFFFF00) != 0) {
        goto LABEL_56;
      }
      __int16 v4 = sub_100077634((v67.i8[0] - 7) >> 2, v56, v57);
      uint64_t v21 = sub_100075CE8((__int16 *)1, v58, v59);
      if (*((void *)v21 + 2)) {
        goto LABEL_42;
      }
      goto LABEL_59;
    default:
      v68[0] = v8;
      LOWORD(v68[1]) = v9;
      BYTE2(v68[1]) = BYTE2(v9);
      BYTE3(v68[1]) = BYTE3(v9);
      BYTE4(v68[1]) = BYTE4(v9);
      BYTE5(v68[1]) = BYTE5(v9);
      uint64_t v12 = sub_100079F48(1, (uint64_t)v68, (uint64_t)v68 + BYTE6(v9));
      if (v3) {
        return sub_1000541C0(v11, v10);
      }
      if (!*((void *)v12 + 2)) {
        goto LABEL_51;
      }
      uint64_t v16 = v13;
      uint64_t v17 = v14;
      v15.i32[0] = *((_DWORD *)v12 + 8);
      int16x8_t v67 = (int16x8_t)vmovl_u8(v15);
      char v18 = v12[36];
      swift_bridgeObjectRelease();
      if (((v67.u16[0] - 7) & 0xFFFFFF00) != 0) {
        goto LABEL_52;
      }
      __int16 v4 = sub_100077634((v67.i8[0] - 7) >> 2, v16, v17);
      uint64_t v21 = sub_100075CE8((__int16 *)1, v19, v20);
      if (*((void *)v21 + 2)) {
        goto LABEL_42;
      }
      __break(1u);
LABEL_8:
      if (v11 >> 32 < (int)v11)
      {
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      uint64_t v22 = __DataStorage._bytes.getter();
      if (v22)
      {
        uint64_t v23 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v11, v23))
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        v22 += (int)v11 - v23;
      }
      uint64_t v24 = __DataStorage._length.getter();
      if (v24 >= (v11 >> 32) - (int)v11) {
        uint64_t v25 = (v11 >> 32) - (int)v11;
      }
      else {
        uint64_t v25 = v24;
      }
      uint64_t v26 = v22 + v25;
      if (v22) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = sub_100079F48(1, v22, v27);
      if (v4) {
        return sub_1000541C0(v11, v10);
      }
      if (!*((void *)v28 + 2))
      {
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      uint64_t v32 = v29;
      uint64_t v33 = v30;
      v31.i32[0] = *((_DWORD *)v28 + 8);
      int16x8_t v67 = (int16x8_t)vmovl_u8(v31);
      char v18 = v28[36];
      swift_bridgeObjectRelease();
      if (((v67.u16[0] - 7) & 0xFFFFFF00) != 0)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      __int16 v4 = sub_100077634((v67.i8[0] - 7) >> 2, v32, v33);
      uint64_t v21 = sub_100075CE8((__int16 *)1, v34, v35);
      if (!*((void *)v21 + 2))
      {
        __break(1u);
LABEL_23:
        uint64_t v66 = a3;
        uint64_t v37 = *(void *)(v11 + 16);
        uint64_t v36 = *(void *)(v11 + 24);
        swift_retain();
        swift_retain();
        uint64_t v38 = __DataStorage._bytes.getter();
        if (v38)
        {
          uint64_t v39 = __DataStorage._offset.getter();
          if (__OFSUB__(v37, v39))
          {
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          v38 += v37 - v39;
        }
        BOOL v40 = __OFSUB__(v36, v37);
        uint64_t v41 = v36 - v37;
        if (!v40)
        {
          uint64_t v42 = __DataStorage._length.getter();
          if (v42 >= v41) {
            uint64_t v43 = v41;
          }
          else {
            uint64_t v43 = v42;
          }
          uint64_t v44 = v38 + v43;
          if (v38) {
            uint64_t v45 = v44;
          }
          else {
            uint64_t v45 = 0;
          }
          char v46 = sub_100079F48(1, v38, v45);
          if (!v4)
          {
            if (*((void *)v46 + 2))
            {
              uint64_t v50 = v47;
              uint64_t v51 = v48;
              v49.i32[0] = *((_DWORD *)v46 + 8);
              int16x8_t v67 = (int16x8_t)vmovl_u8(v49);
              char v65 = v46[36];
              swift_bridgeObjectRelease();
              if (((v67.u16[0] - 7) & 0xFFFFFF00) == 0)
              {
                __int16 v4 = sub_100077634((v67.i8[0] - 7) >> 2, v50, v51);
                uint64_t v64 = sub_100075CE8((__int16 *)1, v62, v63);
                if (*((void *)v64 + 2))
                {
                  __int16 v60 = v64[16];
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease();
                  uint64_t result = sub_1000541C0(v11, v10);
                  a3 = v66;
                  char v18 = v65;
                  goto LABEL_46;
                }
                goto LABEL_60;
              }
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
              goto LABEL_61;
            }
            goto LABEL_54;
          }
          swift_release();
          swift_release();
          return sub_1000541C0(v11, v10);
        }
        goto LABEL_48;
      }
LABEL_42:
      __int16 v60 = v21[16];
      swift_bridgeObjectRelease();
      uint64_t result = sub_1000541C0(v11, v10);
LABEL_46:
      *(_DWORD *)a3 = vmovn_s16(v67).u32[0];
      *(unsigned char *)(a3 + 4) = v18;
      *(void *)(a3 + 8) = a1;
      *(_WORD *)(a3 + 16) = a2;
      *(void *)(a3 + 24) = v4;
      *(_WORD *)(a3 + 32) = v60;
      return result;
  }
}

uint64_t sub_1000B35E0@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v4 = v3;
  uint64_t v8 = sub_100089F98(a1, a2);
  if (v9 >> 60 == 15) {
LABEL_61:
  }
    __break(1u);
  unint64_t v10 = v9;
  uint64_t v11 = v8;
  switch(v9 >> 62)
  {
    case 1uLL:
      goto LABEL_8;
    case 2uLL:
      goto LABEL_23;
    case 3uLL:
      memset(v70, 0, 14);
      char v53 = sub_100079FBC(1, v70, (uint64_t)v70);
      if (v3) {
        return sub_1000541C0(v11, v10);
      }
      if (!*((void *)v53 + 2)) {
        goto LABEL_55;
      }
      uint64_t v57 = v54;
      uint64_t v58 = v55;
      v56.i32[0] = *((_DWORD *)v53 + 8);
      int16x8_t v69 = (int16x8_t)vmovl_u8(v56);
      __int16 v18 = *((_WORD *)v53 + 18);
      char v68 = *((unsigned char *)v53 + 38);
      swift_bridgeObjectRelease();
      if (((v69.u16[0] - 7) & 0xFFFFFF00) != 0) {
        goto LABEL_56;
      }
      __int16 v4 = sub_100077634((v69.i8[0] - 7) >> 2, v57, v58);
      uint64_t v21 = sub_100075CE8((__int16 *)1, v59, v60);
      if (*((void *)v21 + 2)) {
        goto LABEL_42;
      }
      goto LABEL_59;
    default:
      v70[0] = v8;
      LOWORD(v70[1]) = v9;
      BYTE2(v70[1]) = BYTE2(v9);
      BYTE3(v70[1]) = BYTE3(v9);
      BYTE4(v70[1]) = BYTE4(v9);
      BYTE5(v70[1]) = BYTE5(v9);
      uint64_t v12 = sub_100079FBC(1, v70, (uint64_t)v70 + BYTE6(v9));
      if (v3) {
        return sub_1000541C0(v11, v10);
      }
      if (!*((void *)v12 + 2)) {
        goto LABEL_51;
      }
      uint64_t v16 = v13;
      uint64_t v17 = v14;
      v15.i32[0] = *((_DWORD *)v12 + 8);
      int16x8_t v69 = (int16x8_t)vmovl_u8(v15);
      __int16 v18 = *((_WORD *)v12 + 18);
      char v68 = *((unsigned char *)v12 + 38);
      swift_bridgeObjectRelease();
      if (((v69.u16[0] - 7) & 0xFFFFFF00) != 0) {
        goto LABEL_52;
      }
      __int16 v4 = sub_100077634((v69.i8[0] - 7) >> 2, v16, v17);
      uint64_t v21 = sub_100075CE8((__int16 *)1, v19, v20);
      if (*((void *)v21 + 2)) {
        goto LABEL_42;
      }
      __break(1u);
LABEL_8:
      if (v11 >> 32 < (int)v11)
      {
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      uint64_t v22 = (unsigned char *)__DataStorage._bytes.getter();
      if (v22)
      {
        uint64_t v23 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v11, v23))
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        v22 += (int)v11 - v23;
      }
      uint64_t v24 = __DataStorage._length.getter();
      if (v24 >= (v11 >> 32) - (int)v11) {
        uint64_t v25 = (v11 >> 32) - (int)v11;
      }
      else {
        uint64_t v25 = v24;
      }
      uint64_t v26 = &v22[v25];
      if (v22) {
        uint64_t v27 = (uint64_t)v26;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = sub_100079FBC(1, v22, v27);
      if (v4) {
        return sub_1000541C0(v11, v10);
      }
      if (!*((void *)v28 + 2))
      {
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      uint64_t v32 = v29;
      uint64_t v33 = v30;
      v31.i32[0] = *((_DWORD *)v28 + 8);
      int16x8_t v69 = (int16x8_t)vmovl_u8(v31);
      __int16 v18 = *((_WORD *)v28 + 18);
      char v68 = *((unsigned char *)v28 + 38);
      swift_bridgeObjectRelease();
      if (((v69.u16[0] - 7) & 0xFFFFFF00) != 0)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      __int16 v4 = sub_100077634((v69.i8[0] - 7) >> 2, v32, v33);
      uint64_t v21 = sub_100075CE8((__int16 *)1, v34, v35);
      if (!*((void *)v21 + 2))
      {
        __break(1u);
LABEL_23:
        uint64_t v67 = a3;
        uint64_t v37 = *(void *)(v11 + 16);
        uint64_t v36 = *(void *)(v11 + 24);
        swift_retain();
        swift_retain();
        uint64_t v38 = (unsigned char *)__DataStorage._bytes.getter();
        if (v38)
        {
          uint64_t v39 = __DataStorage._offset.getter();
          if (__OFSUB__(v37, v39))
          {
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          v38 += v37 - v39;
        }
        BOOL v40 = __OFSUB__(v36, v37);
        uint64_t v41 = v36 - v37;
        if (!v40)
        {
          uint64_t v42 = __DataStorage._length.getter();
          if (v42 >= v41) {
            uint64_t v43 = v41;
          }
          else {
            uint64_t v43 = v42;
          }
          uint64_t v44 = &v38[v43];
          if (v38) {
            uint64_t v45 = (uint64_t)v44;
          }
          else {
            uint64_t v45 = 0;
          }
          char v46 = sub_100079FBC(1, v38, v45);
          if (!v4)
          {
            if (*((void *)v46 + 2))
            {
              uint64_t v50 = v47;
              uint64_t v51 = v48;
              v49.i32[0] = *((_DWORD *)v46 + 8);
              int16x8_t v69 = (int16x8_t)vmovl_u8(v49);
              __int16 v66 = *((_WORD *)v46 + 18);
              char v52 = *((unsigned char *)v46 + 38);
              swift_bridgeObjectRelease();
              if (((v69.u16[0] - 7) & 0xFFFFFF00) == 0)
              {
                __int16 v4 = sub_100077634((v69.i8[0] - 7) >> 2, v50, v51);
                char v65 = sub_100075CE8((__int16 *)1, v63, v64);
                char v68 = v52;
                if (*((void *)v65 + 2))
                {
                  __int16 v61 = v65[16];
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease();
                  uint64_t result = sub_1000541C0(v11, v10);
                  a3 = v67;
                  __int16 v18 = v66;
                  goto LABEL_46;
                }
                goto LABEL_60;
              }
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
              goto LABEL_61;
            }
            goto LABEL_54;
          }
          swift_release();
          swift_release();
          return sub_1000541C0(v11, v10);
        }
        goto LABEL_48;
      }
LABEL_42:
      __int16 v61 = v21[16];
      swift_bridgeObjectRelease();
      uint64_t result = sub_1000541C0(v11, v10);
LABEL_46:
      *(_DWORD *)a3 = vmovn_s16(v69).u32[0];
      *(_WORD *)(a3 + 4) = v18;
      *(unsigned char *)(a3 + 6) = v68;
      *(void *)(a3 + 8) = a1;
      *(_WORD *)(a3 + 16) = a2;
      *(void *)(a3 + 24) = v4;
      *(_WORD *)(a3 + 32) = v61;
      return result;
  }
}

uint8x8_t sub_1000B3B34@<D0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v4 = a2;
  uint64_t v6 = sub_100089F98(a1, a2);
  if (v7 >> 60 == 15) {
LABEL_42:
  }
    __break(1u);
  unint64_t v8 = v7;
  uint64_t v9 = v6;
  switch(v7 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (v6 >> 32) - (int)v6;
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v13 = __DataStorage._bytes.getter();
      if (v13)
      {
        uint64_t v14 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v9, v14))
        {
          v13 += (int)v9 - v14;
          goto LABEL_8;
        }
        goto LABEL_41;
      }
LABEL_8:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (v9 >> 32) - (int)v9;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = (char *)(v13 + v16);
      if (v13) {
        unint64_t v10 = v17;
      }
      else {
        unint64_t v10 = 0;
      }
      uint64_t v11 = (unsigned char *)v13;
LABEL_28:
      sub_1000B2384(v11, (uint64_t)v10, (uint64_t)&v46);
      sub_1000541C0(v9, v8);
      if (!v3)
      {
LABEL_29:
        result.i32[0] = (int)v46;
        int16x8_t v40 = (int16x8_t)vmovl_u8(result);
        __int16 v27 = WORD2(v46);
        char v41 = BYTE6(v46);
        uint64_t v28 = v47;
        __int16 v29 = v48;
        uint64_t v30 = v49;
        int64_t v31 = *(void *)(v47 + 16);
        if (v31)
        {
          __int16 v37 = WORD2(v46);
          uint64_t v38 = v49;
          __int16 v39 = v48;
          __int16 v43 = v4;
          char v46 = _swiftEmptyArrayStorage;
          sub_10007C4BC(0, v31, 0);
          uint64_t v32 = 0;
          uint64_t v33 = v46;
          unint64_t v34 = v46[2];
          do
          {
            uint64_t v35 = *(unsigned __int8 *)(v28 + v32 + 32);
            char v46 = v33;
            unint64_t v36 = v33[3];
            if (v34 >= v36 >> 1)
            {
              sub_10007C4BC(v36 > 1, v34 + 1, 1);
              uint64_t v33 = v46;
            }
            ++v32;
            void v33[2] = v34 + 1;
            v33[v34++ + 4] = v35;
          }
          while (v31 != v32);
          swift_bridgeObjectRelease();
          __int16 v4 = v43;
          __int16 v29 = v39;
          uint64_t v30 = v38;
          __int16 v27 = v37;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v33 = _swiftEmptyArrayStorage;
        }
        uint8x8_t result = (uint8x8_t)vmovn_s16(v40);
        *(_DWORD *)a3 = result.i32[0];
        *(_WORD *)(a3 + 4) = v27;
        *(unsigned char *)(a3 + 6) = v41;
        *(void *)(a3 + 8) = a1;
        *(_WORD *)(a3 + 16) = v4;
        *(void *)(a3 + 24) = v33;
        *(_WORD *)(a3 + 32) = v29;
        *(void *)(a3 + 40) = v30;
      }
      return result;
    case 2uLL:
      __int16 v42 = v4;
      uint64_t v18 = *(void *)(v6 + 16);
      uint64_t v19 = *(void *)(v6 + 24);
      swift_retain();
      swift_retain();
      uint64_t v20 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v20) {
        goto LABEL_18;
      }
      uint64_t v21 = __DataStorage._offset.getter();
      if (__OFSUB__(v18, v21)) {
        goto LABEL_40;
      }
      v20 += v18 - v21;
LABEL_18:
      if (__OFSUB__(v19, v18)) {
        goto LABEL_39;
      }
      uint64_t v22 = __DataStorage._length.getter();
      if (v22 >= v19 - v18) {
        uint64_t v23 = v19 - v18;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = &v20[v23];
      if (v20) {
        uint64_t v25 = (uint64_t)v24;
      }
      else {
        uint64_t v25 = 0;
      }
      sub_1000B2384(v20, v25, (uint64_t)&v46);
      swift_release();
      swift_release();
      sub_1000541C0(v9, v8);
      __int16 v4 = v42;
      if (!v3) {
        goto LABEL_29;
      }
      return result;
    case 3uLL:
      memset(v45, 0, 14);
      uint64_t v11 = v45;
      unint64_t v10 = (char *)v45;
      goto LABEL_28;
    default:
      v45[0] = v6;
      LOWORD(v45[1]) = v7;
      BYTE2(v45[1]) = BYTE2(v7);
      BYTE3(v45[1]) = BYTE3(v7);
      BYTE4(v45[1]) = BYTE4(v7);
      BYTE5(v45[1]) = BYTE5(v7);
      unint64_t v10 = (char *)v45 + BYTE6(v7);
      uint64_t v11 = v45;
      goto LABEL_28;
  }
}

uint64_t sub_1000B3ED8@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  __int16 v6 = a2;
  unint64_t v7 = a1;
  uint64_t v9 = sub_100089F98(a1, a2);
  if (v10 >> 60 == 15) {
LABEL_61:
  }
    __break(1u);
  unint64_t v11 = v10;
  uint64_t v12 = v9;
  switch(v10 >> 62)
  {
    case 1uLL:
      goto LABEL_7;
    case 2uLL:
      uint64_t v80 = a3;
      char v83 = v7;
      uint64_t v37 = *(void *)(v9 + 16);
      uint64_t v38 = *(void *)(v9 + 24);
      swift_retain();
      swift_retain();
      __int16 v39 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v39) {
        goto LABEL_24;
      }
      uint64_t v40 = __DataStorage._offset.getter();
      if (__OFSUB__(v37, v40)) {
        goto LABEL_53;
      }
      v39 += v37 - v40;
LABEL_24:
      BOOL v41 = __OFSUB__(v38, v37);
      uint64_t v42 = v38 - v37;
      if (v41) {
        goto LABEL_51;
      }
      uint64_t v43 = __DataStorage._length.getter();
      if (v43 >= v42) {
        uint64_t v44 = v42;
      }
      else {
        uint64_t v44 = v43;
      }
      uint64_t v45 = &v39[v44];
      if (v39) {
        uint64_t v46 = (uint64_t)v45;
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t v47 = sub_10007A41C(1, v39, v46);
      if (!v3)
      {
        __int16 v77 = v6;
        if (*((void *)v47 + 2))
        {
          uint64_t v50 = v48;
          uint64_t v51 = v49;
          v4.i32[0] = *((_DWORD *)v47 + 8);
          __int16 v18 = *((_WORD *)v47 + 18);
          uint64_t v52 = *((unsigned __int8 *)v47 + 38);
          swift_bridgeObjectRelease();
          unint64_t v7 = v83;
          uint64_t v19 = sub_1000781B8(v52, v50, v51);
          uint64_t v64 = sub_10007A3BC(1, v62, v63);
          if (*((void *)v64 + 2))
          {
            int16x8_t v76 = (int16x8_t)vmovl_u8(v4);
            int v74 = *(_DWORD *)((char *)v64 + 34);
            __int16 v75 = *((_WORD *)v64 + 16);
            __int16 v73 = *((_WORD *)v64 + 19);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            sub_1000541C0(v12, v11);
            char v36 = v52;
            a3 = v80;
            __int16 v6 = v77;
            goto LABEL_42;
          }
          goto LABEL_60;
        }
        goto LABEL_57;
      }
      swift_release();
      swift_release();
      return sub_1000541C0(v12, v11);
    case 3uLL:
      memset(v84, 0, 14);
      char v53 = sub_10007A41C(1, v84, (uint64_t)v84);
      if (v3) {
        return sub_1000541C0(v12, v11);
      }
      if (!*((void *)v53 + 2)) {
        goto LABEL_55;
      }
      uint8x8_t v56 = v54;
      uint64_t v57 = v55;
      v4.i32[0] = *((_DWORD *)v53 + 8);
      __int16 v78 = *((_WORD *)v53 + 18);
      uint64_t v58 = *((unsigned __int8 *)v53 + 38);
      swift_bridgeObjectRelease();
      uint64_t v19 = sub_1000781B8(v58, v56, v57);
      __int16 v61 = sub_10007A3BC(1, v59, v60);
      if (!*((void *)v61 + 2)) {
        goto LABEL_59;
      }
      int16x8_t v76 = (int16x8_t)vmovl_u8(v4);
      int v74 = *(_DWORD *)((char *)v61 + 34);
      __int16 v75 = *((_WORD *)v61 + 16);
      __int16 v73 = *((_WORD *)v61 + 19);
      swift_bridgeObjectRelease();
      sub_1000541C0(v12, v11);
      char v36 = v58;
      __int16 v18 = v78;
      goto LABEL_42;
    default:
      v84[0] = v9;
      LOWORD(v84[1]) = v10;
      BYTE2(v84[1]) = BYTE2(v10);
      BYTE3(v84[1]) = BYTE3(v10);
      BYTE4(v84[1]) = BYTE4(v10);
      BYTE5(v84[1]) = BYTE5(v10);
      uint64_t v13 = sub_10007A41C(1, v84, (uint64_t)v84 + BYTE6(v10));
      if (v3) {
        return sub_1000541C0(v12, v11);
      }
      __int16 v82 = v7;
      if (!*((void *)v13 + 2)) {
        goto LABEL_54;
      }
      uint64_t v16 = v14;
      uint64_t v17 = v15;
      unint64_t v7 = (unsigned char *)a3;
      v4.i32[0] = *((_DWORD *)v13 + 8);
      __int16 v18 = *((_WORD *)v13 + 18);
      a3 = *((unsigned __int8 *)v13 + 38);
      swift_bridgeObjectRelease();
      uint64_t v19 = sub_1000781B8(a3, v16, v17);
      uint64_t v22 = sub_10007A3BC(1, v20, v21);
      uint64_t v5 = 0;
      if (*((void *)v22 + 2)) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_7:
      __int16 v82 = v7;
      if (v12 >> 32 < (int)v12)
      {
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      uint64_t v23 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v23) {
        goto LABEL_11;
      }
      uint64_t v24 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v12, v24))
      {
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      v23 += (int)v12 - v24;
LABEL_11:
      uint64_t v25 = __DataStorage._length.getter();
      if (v25 >= (v12 >> 32) - (int)v12) {
        uint64_t v26 = (v12 >> 32) - (int)v12;
      }
      else {
        uint64_t v26 = v25;
      }
      __int16 v27 = &v23[v26];
      if (v23) {
        uint64_t v28 = (uint64_t)v27;
      }
      else {
        uint64_t v28 = 0;
      }
      __int16 v29 = sub_10007A41C(1, v23, v28);
      if (v5) {
        return sub_1000541C0(v12, v11);
      }
      if (!*((void *)v29 + 2))
      {
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      uint64_t v32 = v30;
      uint64_t v33 = v31;
      unint64_t v7 = (unsigned char *)a3;
      v4.i32[0] = *((_DWORD *)v29 + 8);
      __int16 v18 = *((_WORD *)v29 + 18);
      a3 = *((unsigned __int8 *)v29 + 38);
      swift_bridgeObjectRelease();
      uint64_t v19 = sub_1000781B8(a3, v32, v33);
      uint64_t v22 = sub_10007A3BC(1, v34, v35);
      if (!*((void *)v22 + 2)) {
        goto LABEL_58;
      }
LABEL_20:
      int16x8_t v76 = (int16x8_t)vmovl_u8(v4);
      int v74 = *(_DWORD *)((char *)v22 + 34);
      __int16 v75 = *((_WORD *)v22 + 16);
      __int16 v73 = *((_WORD *)v22 + 19);
      swift_bridgeObjectRelease();
      sub_1000541C0(v12, v11);
      char v36 = a3;
      a3 = (uint64_t)v7;
      unint64_t v7 = v82;
LABEL_42:
      int64_t v66 = *((void *)v19 + 2);
      if (v66)
      {
        char v72 = v36;
        __int16 v79 = v18;
        uint64_t v81 = a3;
        v84[0] = _swiftEmptyArrayStorage;
        sub_10007C4BC(0, v66, 0);
        uint64_t v67 = 0;
        char v68 = (void *)v84[0];
        unint64_t v69 = *(void *)(v84[0] + 16);
        do
        {
          uint64_t v70 = v19[v67 + 32];
          v84[0] = v68;
          unint64_t v71 = v68[3];
          if (v69 >= v71 >> 1)
          {
            sub_10007C4BC(v71 > 1, v69 + 1, 1);
            char v68 = (void *)v84[0];
          }
          ++v67;
          void v68[2] = v69 + 1;
          v68[v69++ + 4] = v70;
        }
        while (v66 != v67);
        uint64_t result = swift_bridgeObjectRelease();
        a3 = v81;
        __int16 v18 = v79;
        char v36 = v72;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
        char v68 = _swiftEmptyArrayStorage;
      }
      *(_DWORD *)a3 = vmovn_s16(v76).u32[0];
      *(_WORD *)(a3 + 4) = v18;
      *(unsigned char *)(a3 + 6) = v36;
      *(_WORD *)(a3 + 7) = v75;
      *(_DWORD *)(a3 + 9) = v74;
      *(_WORD *)(a3 + 13) = v73;
      *(void *)(a3 + 16) = v7;
      *(_WORD *)(a3 + 24) = v6;
      *(void *)(a3 + 32) = v68;
      return result;
  }
}

uint64_t sub_1000B44F8(unsigned char *a1, __int16 a2)
{
  uint64_t v3 = sub_100089F98(a1, a2);
  if (v4 >> 60 == 15) {
LABEL_44:
  }
    __break(1u);
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  switch(v4 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      memset(v34, 0, 14);
      unint64_t v7 = sub_100076F38(1, v34, (uint64_t)v34);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_34;
      }
      goto LABEL_42;
    default:
      v34[0] = v3;
      LOWORD(v34[1]) = v4;
      BYTE2(v34[1]) = BYTE2(v4);
      BYTE3(v34[1]) = BYTE3(v4);
      BYTE4(v34[1]) = BYTE4(v4);
      BYTE5(v34[1]) = BYTE5(v4);
      unint64_t v7 = sub_100076F38(1, v34, (uint64_t)v34 + BYTE6(v4));
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_34;
      }
      __break(1u);
LABEL_6:
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      uint64_t v9 = (unsigned char *)__DataStorage._bytes.getter();
      if (v9)
      {
        uint64_t v10 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v6, v10))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        v9 += (int)v6 - v10;
      }
      uint64_t v11 = __DataStorage._length.getter();
      if (v11 >= (v6 >> 32) - (int)v6) {
        uint64_t v12 = (v6 >> 32) - (int)v6;
      }
      else {
        uint64_t v12 = v11;
      }
      uint64_t v13 = &v9[v12];
      if (v9) {
        uint64_t v14 = (uint64_t)v13;
      }
      else {
        uint64_t v14 = 0;
      }
      unint64_t v7 = sub_100076F38(1, v9, v14);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (!*((void *)v7 + 2))
      {
        __break(1u);
LABEL_19:
        uint64_t v15 = *(void *)(v6 + 16);
        uint64_t v16 = *(void *)(v6 + 24);
        swift_retain();
        swift_retain();
        uint64_t v17 = (unsigned char *)__DataStorage._bytes.getter();
        if (v17)
        {
          uint64_t v18 = __DataStorage._offset.getter();
          if (__OFSUB__(v15, v18)) {
            goto LABEL_41;
          }
          v17 += v15 - v18;
        }
        BOOL v19 = __OFSUB__(v16, v15);
        uint64_t v20 = v16 - v15;
        if (!v19)
        {
          uint64_t v21 = __DataStorage._length.getter();
          if (v21 >= v20) {
            uint64_t v22 = v20;
          }
          else {
            uint64_t v22 = v21;
          }
          uint64_t v23 = &v17[v22];
          if (v17) {
            uint64_t v24 = (uint64_t)v23;
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v25 = sub_100076F38(1, v17, v24);
          if (v2)
          {
            swift_release();
            swift_release();
            return sub_1000541C0(v6, v5);
          }
          if (*((void *)v25 + 2))
          {
            v26.i32[0] = *((_DWORD *)v25 + 8);
            int16x8_t v33 = (int16x8_t)vmovl_u8(v26);
            int v32 = *(_DWORD *)((char *)v25 + 37);
            char v30 = *((unsigned char *)v25 + 41);
            __int16 v31 = *((_WORD *)v25 + 21);
            char v28 = *((unsigned char *)v25 + 36);
            swift_release();
            swift_release();
            int v29 = v32;
            goto LABEL_37;
          }
          goto LABEL_43;
        }
        goto LABEL_39;
      }
LABEL_34:
      v8.i32[0] = *((_DWORD *)v7 + 8);
      int16x8_t v33 = (int16x8_t)vmovl_u8(v8);
      char v28 = *((unsigned char *)v7 + 36);
      int v29 = *(_DWORD *)((char *)v7 + 37);
      char v30 = *((unsigned char *)v7 + 41);
      __int16 v31 = *((_WORD *)v7 + 21);
LABEL_37:
      swift_bridgeObjectRelease();
      sub_1000541C0(v6, v5);
      LODWORD(v34[0]) = vmovn_s16(v33).u32[0];
      BYTE4(v34[0]) = v28;
      *(_DWORD *)((char *)v34 + 5) = v29;
      BYTE1(v34[1]) = v30;
      WORD1(v34[1]) = v31;
      return v34[0];
  }
}

uint64_t sub_1000B4844@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  return sub_1000B48B8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007A4F0, (uint64_t (*)(uint64_t))sub_10007A47C, a3);
}

uint64_t sub_1000B48B8@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  __int16 v9 = a2;
  uint64_t v10 = a1;
  uint64_t v12 = sub_100089F98(a1, a2);
  if (v13 >> 60 == 15) {
LABEL_62:
  }
    __break(1u);
  unint64_t v14 = v13;
  uint64_t v15 = v12;
  switch(v13 >> 62)
  {
    case 1uLL:
      int v74 = v10;
      uint64_t v26 = (v12 >> 32) - (int)v12;
      if (v12 >> 32 < (int)v12)
      {
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      __int16 v82 = a4;
      uint64_t v27 = __DataStorage._bytes.getter();
      if (!v27) {
        goto LABEL_11;
      }
      uint64_t v28 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v15, v28))
      {
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      v27 += (int)v15 - v28;
LABEL_11:
      uint64_t v29 = __DataStorage._length.getter();
      if (v29 >= v26) {
        uint64_t v30 = (v15 >> 32) - (int)v15;
      }
      else {
        uint64_t v30 = v29;
      }
      uint64_t v31 = v27 + v30;
      if (v27) {
        uint64_t v32 = v31;
      }
      else {
        uint64_t v32 = 0;
      }
      uint64_t v33 = a3(1, v27, v32);
      if (v5) {
        return sub_1000541C0(v15, v14);
      }
      if (!*(void *)(v33 + 16))
      {
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      char v36 = v34;
      uint64_t v37 = v35;
      v6.i32[0] = *(_DWORD *)(v33 + 32);
      uint64_t v38 = *(unsigned __int8 *)(v33 + 36);
      swift_bridgeObjectRelease();
      uint64_t v10 = v74;
      uint64_t v23 = sub_1000781B8(v38, v36, v37);
      uint64_t v39 = v82(1);
      if (!*(void *)(v39 + 16))
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      int16x8_t v81 = (int16x8_t)vmovl_u8(v6);
      __int16 v72 = *(_WORD *)(v39 + 36);
      int v73 = *(_DWORD *)(v39 + 32);
      swift_bridgeObjectRelease();
      sub_1000541C0(v15, v14);
      char v25 = v38;
LABEL_42:
      int64_t v66 = *((void *)v23 + 2);
      if (v66)
      {
        int16x8_t v76 = v10;
        uint64_t v80 = a5;
        v85[0] = _swiftEmptyArrayStorage;
        sub_10007C4BC(0, v66, 0);
        uint64_t v67 = 0;
        char v68 = (void *)v85[0];
        unint64_t v69 = *(void *)(v85[0] + 16);
        do
        {
          uint64_t v70 = v23[v67 + 32];
          v85[0] = v68;
          unint64_t v71 = v68[3];
          if (v69 >= v71 >> 1)
          {
            sub_10007C4BC(v71 > 1, v69 + 1, 1);
            char v68 = (void *)v85[0];
          }
          ++v67;
          void v68[2] = v69 + 1;
          v68[v69++ + 4] = v70;
        }
        while (v66 != v67);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v10 = v76;
        a5 = v80;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
        char v68 = _swiftEmptyArrayStorage;
      }
      *(_DWORD *)a5 = vmovn_s16(v81).u32[0];
      *(unsigned char *)(a5 + 4) = v25;
      *(_DWORD *)(a5 + 5) = v73;
      *(_WORD *)(a5 + 9) = v72;
      *(void *)(a5 + 16) = v10;
      *(_WORD *)(a5 + 24) = v9;
      *(void *)(a5 + 32) = v68;
      return result;
    case 2uLL:
      uint64_t v78 = a5;
      char v83 = a4;
      __int16 v75 = v10;
      uint64_t v41 = *(void *)(v12 + 16);
      uint64_t v40 = *(void *)(v12 + 24);
      swift_retain();
      swift_retain();
      uint64_t v42 = __DataStorage._bytes.getter();
      if (!v42) {
        goto LABEL_24;
      }
      uint64_t v43 = __DataStorage._offset.getter();
      if (__OFSUB__(v41, v43)) {
        goto LABEL_53;
      }
      v42 += v41 - v43;
LABEL_24:
      BOOL v44 = __OFSUB__(v40, v41);
      uint64_t v45 = v40 - v41;
      if (v44) {
        goto LABEL_51;
      }
      uint64_t v46 = __DataStorage._length.getter();
      if (v46 >= v45) {
        uint64_t v47 = v45;
      }
      else {
        uint64_t v47 = v46;
      }
      uint64_t v48 = v42 + v47;
      if (v42) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = 0;
      }
      uint64_t v50 = a3(1, v42, v49);
      if (!v5)
      {
        if (*(void *)(v50 + 16))
        {
          char v53 = v51;
          uint64_t v54 = v52;
          v6.i32[0] = *(_DWORD *)(v50 + 32);
          uint64_t v55 = *(unsigned __int8 *)(v50 + 36);
          swift_bridgeObjectRelease();
          uint64_t v23 = sub_1000781B8(v55, v53, v54);
          uint64_t v64 = v83(1);
          if (*(void *)(v64 + 16))
          {
            int16x8_t v81 = (int16x8_t)vmovl_u8(v6);
            __int16 v72 = *(_WORD *)(v64 + 36);
            int v73 = *(_DWORD *)(v64 + 32);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            sub_1000541C0(v15, v14);
            char v25 = v55;
            uint64_t v10 = v75;
            a5 = v78;
            goto LABEL_42;
          }
          goto LABEL_61;
        }
        goto LABEL_57;
      }
      swift_release();
      swift_release();
      return sub_1000541C0(v15, v14);
    case 3uLL:
      __int16 v79 = v9;
      uint64_t v84 = a4;
      memset(v85, 0, 14);
      uint64_t v56 = a3(1, (uint64_t)v85, (uint64_t)v85);
      if (v5) {
        return sub_1000541C0(v15, v14);
      }
      if (!*(void *)(v56 + 16)) {
        goto LABEL_55;
      }
      uint64_t v59 = v57;
      uint64_t v60 = v58;
      v6.i32[0] = *(_DWORD *)(v56 + 32);
      uint64_t v61 = *(unsigned __int8 *)(v56 + 36);
      swift_bridgeObjectRelease();
      uint64_t v23 = sub_1000781B8(v61, v59, v60);
      char v62 = v61;
      uint64_t v63 = v84(1);
      if (!*(void *)(v63 + 16)) {
        goto LABEL_60;
      }
      int16x8_t v81 = (int16x8_t)vmovl_u8(v6);
      __int16 v72 = *(_WORD *)(v63 + 36);
      int v73 = *(_DWORD *)(v63 + 32);
      swift_bridgeObjectRelease();
      sub_1000541C0(v15, v14);
      __int16 v9 = v79;
      char v25 = v62;
      goto LABEL_42;
    default:
      v85[0] = v12;
      LOWORD(v85[1]) = v13;
      BYTE2(v85[1]) = BYTE2(v13);
      BYTE3(v85[1]) = BYTE3(v13);
      BYTE4(v85[1]) = BYTE4(v13);
      BYTE5(v85[1]) = BYTE5(v13);
      uint64_t v16 = a3(1, (uint64_t)v85, (uint64_t)v85 + BYTE6(v13));
      if (v5) {
        return sub_1000541C0(v15, v14);
      }
      __int16 v77 = v9;
      if (!*(void *)(v16 + 16)) {
        goto LABEL_54;
      }
      BOOL v19 = v17;
      uint64_t v20 = v18;
      uint64_t v21 = a4;
      v6.i32[0] = *(_DWORD *)(v16 + 32);
      uint64_t v22 = *(unsigned __int8 *)(v16 + 36);
      swift_bridgeObjectRelease();
      uint64_t v23 = sub_1000781B8(v22, v19, v20);
      uint64_t v24 = v21(1);
      if (!*(void *)(v24 + 16)) {
        goto LABEL_58;
      }
      int16x8_t v81 = (int16x8_t)vmovl_u8(v6);
      __int16 v72 = *(_WORD *)(v24 + 36);
      int v73 = *(_DWORD *)(v24 + 32);
      swift_bridgeObjectRelease();
      sub_1000541C0(v15, v14);
      char v25 = v22;
      __int16 v9 = v77;
      goto LABEL_42;
  }
}

uint64_t sub_1000B4EF8(unsigned char *a1, __int16 a2)
{
  uint64_t v3 = sub_100089F98(a1, a2);
  if (v4 >> 60 == 15) {
LABEL_44:
  }
    __break(1u);
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  switch(v4 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      memset(v32, 0, 14);
      unint64_t v7 = sub_100076F98(1, v32, (uint64_t)v32);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (v7[2]) {
        goto LABEL_34;
      }
      goto LABEL_42;
    default:
      v32[0] = v3;
      LOWORD(v32[1]) = v4;
      BYTE2(v32[1]) = BYTE2(v4);
      BYTE3(v32[1]) = BYTE3(v4);
      BYTE4(v32[1]) = BYTE4(v4);
      BYTE5(v32[1]) = BYTE5(v4);
      unint64_t v7 = sub_100076F98(1, v32, (uint64_t)v32 + BYTE6(v4));
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (v7[2]) {
        goto LABEL_34;
      }
      __break(1u);
LABEL_6:
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      __int16 v9 = (unsigned char *)__DataStorage._bytes.getter();
      if (v9)
      {
        uint64_t v10 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v6, v10))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        v9 += (int)v6 - v10;
      }
      uint64_t v11 = __DataStorage._length.getter();
      if (v11 >= (v6 >> 32) - (int)v6) {
        uint64_t v12 = (v6 >> 32) - (int)v6;
      }
      else {
        uint64_t v12 = v11;
      }
      unint64_t v13 = &v9[v12];
      if (v9) {
        uint64_t v14 = (uint64_t)v13;
      }
      else {
        uint64_t v14 = 0;
      }
      unint64_t v7 = sub_100076F98(1, v9, v14);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (!v7[2])
      {
        __break(1u);
LABEL_19:
        uint64_t v15 = *(void *)(v6 + 16);
        uint64_t v16 = *(void *)(v6 + 24);
        swift_retain();
        swift_retain();
        uint64_t v17 = (unsigned char *)__DataStorage._bytes.getter();
        if (v17)
        {
          uint64_t v18 = __DataStorage._offset.getter();
          if (__OFSUB__(v15, v18)) {
            goto LABEL_41;
          }
          v17 += v15 - v18;
        }
        BOOL v19 = __OFSUB__(v16, v15);
        uint64_t v20 = v16 - v15;
        if (!v19)
        {
          uint64_t v21 = __DataStorage._length.getter();
          if (v21 >= v20) {
            uint64_t v22 = v20;
          }
          else {
            uint64_t v22 = v21;
          }
          uint64_t v23 = &v17[v22];
          if (v17) {
            uint64_t v24 = (uint64_t)v23;
          }
          else {
            uint64_t v24 = 0;
          }
          char v25 = sub_100076F98(1, v17, v24);
          if (v2)
          {
            swift_release();
            swift_release();
            return sub_1000541C0(v6, v5);
          }
          if (v25[2])
          {
            v26.i32[0] = *((_DWORD *)v25 + 8);
            int16x8_t v31 = (int16x8_t)vmovl_u8(v26);
            int v29 = *(_DWORD *)((char *)v25 + 37);
            __int16 v30 = *(_WORD *)((char *)v25 + 41);
            char v28 = *((unsigned char *)v25 + 36);
            swift_release();
            swift_release();
            goto LABEL_37;
          }
          goto LABEL_43;
        }
        goto LABEL_39;
      }
LABEL_34:
      v8.i32[0] = *((_DWORD *)v7 + 8);
      int16x8_t v31 = (int16x8_t)vmovl_u8(v8);
      char v28 = *((unsigned char *)v7 + 36);
      int v29 = *(_DWORD *)((char *)v7 + 37);
      __int16 v30 = *(_WORD *)((char *)v7 + 41);
LABEL_37:
      swift_bridgeObjectRelease();
      sub_1000541C0(v6, v5);
      LODWORD(v32[0]) = vmovn_s16(v31).u32[0];
      BYTE4(v32[0]) = v28;
      *(_DWORD *)((char *)v32 + 5) = v29;
      *(_WORD *)((char *)&v32[1] + 1) = v30;
      return v32[0];
  }
}

uint64_t sub_1000B5230@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  unint64_t v7 = a1;
  uint64_t v9 = sub_100089F98(a1, a2);
  if (v10 >> 60 == 15) {
LABEL_61:
  }
    __break(1u);
  unint64_t v11 = v10;
  uint64_t v12 = v9;
  switch(v10 >> 62)
  {
    case 1uLL:
      goto LABEL_7;
    case 2uLL:
      uint64_t v87 = a3;
      __int16 v90 = v7;
      uint64_t v41 = *(void *)(v9 + 16);
      uint64_t v42 = *(void *)(v9 + 24);
      swift_retain();
      swift_retain();
      uint64_t v43 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v43) {
        goto LABEL_24;
      }
      uint64_t v44 = __DataStorage._offset.getter();
      if (__OFSUB__(v41, v44)) {
        goto LABEL_53;
      }
      v43 += v41 - v44;
LABEL_24:
      BOOL v45 = __OFSUB__(v42, v41);
      uint64_t v46 = v42 - v41;
      if (v45) {
        goto LABEL_51;
      }
      uint64_t v47 = __DataStorage._length.getter();
      if (v47 >= v46) {
        uint64_t v48 = v46;
      }
      else {
        uint64_t v48 = v47;
      }
      uint64_t v49 = &v43[v48];
      if (v43) {
        uint64_t v50 = (uint64_t)v49;
      }
      else {
        uint64_t v50 = 0;
      }
      uint64_t v51 = sub_10007A564(1, v43, v50);
      if (!v3)
      {
        if (*((void *)v51 + 2))
        {
          uint64_t v54 = v52;
          uint64_t v55 = v53;
          v4.i32[0] = *((_DWORD *)v51 + 8);
          __int16 v82 = *((_WORD *)v51 + 18);
          __int16 v85 = *((_WORD *)v51 + 19);
          uint64_t v56 = *((unsigned __int8 *)v51 + 40);
          swift_bridgeObjectRelease();
          unint64_t v7 = v90;
          BOOL v19 = sub_1000781B8(v56, v54, v55);
          unint64_t v69 = sub_100075CE8((__int16 *)1, v67, v68);
          if (*((void *)v69 + 2))
          {
            int16x8_t v81 = (int16x8_t)vmovl_u8(v4);
            __int16 v79 = v69[16];
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            sub_1000541C0(v12, v11);
            char v40 = v56;
            a3 = v87;
            __int16 v20 = v82;
            __int16 v39 = v79;
            goto LABEL_42;
          }
          goto LABEL_60;
        }
        goto LABEL_57;
      }
      swift_release();
      swift_release();
      return sub_1000541C0(v12, v11);
    case 3uLL:
      memset(v91, 0, 14);
      uint64_t v57 = sub_10007A564(1, v91, (uint64_t)v91);
      if (v3) {
        return sub_1000541C0(v12, v11);
      }
      if (!*((void *)v57 + 2)) {
        goto LABEL_55;
      }
      uint64_t v60 = v58;
      uint64_t v61 = v59;
      v4.i32[0] = *((_DWORD *)v57 + 8);
      __int16 v83 = *((_WORD *)v57 + 18);
      __int16 v85 = *((_WORD *)v57 + 19);
      uint64_t v62 = *((unsigned __int8 *)v57 + 40);
      swift_bridgeObjectRelease();
      BOOL v19 = sub_1000781B8(v62, v60, v61);
      char v63 = v62;
      int64_t v66 = sub_100075CE8((__int16 *)1, v64, v65);
      if (!*((void *)v66 + 2)) {
        goto LABEL_59;
      }
      int16x8_t v81 = (int16x8_t)vmovl_u8(v4);
      __int16 v39 = v66[16];
      swift_bridgeObjectRelease();
      sub_1000541C0(v12, v11);
      char v40 = v63;
      __int16 v20 = v83;
      goto LABEL_42;
    default:
      v91[0] = v9;
      LOWORD(v91[1]) = v10;
      BYTE2(v91[1]) = BYTE2(v10);
      BYTE3(v91[1]) = BYTE3(v10);
      BYTE4(v91[1]) = BYTE4(v10);
      BYTE5(v91[1]) = BYTE5(v10);
      unint64_t v13 = sub_10007A564(1, v91, (uint64_t)v91 + BYTE6(v10));
      if (v3) {
        return sub_1000541C0(v12, v11);
      }
      uint64_t v86 = a3;
      uint64_t v89 = v7;
      if (!*((void *)v13 + 2)) {
        goto LABEL_54;
      }
      uint64_t v16 = v14;
      uint64_t v17 = v15;
      v4.i32[0] = *((_DWORD *)v13 + 8);
      __int16 v18 = *((_WORD *)v13 + 18);
      unint64_t v7 = (unsigned char *)*((unsigned __int16 *)v13 + 19);
      a3 = *((unsigned __int8 *)v13 + 40);
      swift_bridgeObjectRelease();
      BOOL v19 = sub_1000781B8(a3, v16, v17);
      __int16 v85 = (__int16)v7;
      __int16 v20 = v18;
      uint64_t v23 = sub_100075CE8((__int16 *)1, v21, v22);
      uint64_t v5 = 0;
      if (*((void *)v23 + 2)) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_7:
      uint64_t v89 = v7;
      if (v12 >> 32 < (int)v12)
      {
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      uint64_t v24 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v24) {
        goto LABEL_11;
      }
      uint64_t v25 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v12, v25))
      {
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      v24 += (int)v12 - v25;
LABEL_11:
      uint64_t v26 = __DataStorage._length.getter();
      if (v26 >= (v12 >> 32) - (int)v12) {
        uint64_t v27 = (v12 >> 32) - (int)v12;
      }
      else {
        uint64_t v27 = v26;
      }
      char v28 = &v24[v27];
      if (v24) {
        uint64_t v29 = (uint64_t)v28;
      }
      else {
        uint64_t v29 = 0;
      }
      __int16 v30 = sub_10007A564(1, v24, v29);
      if (v5) {
        return sub_1000541C0(v12, v11);
      }
      uint64_t v86 = a3;
      if (!*((void *)v30 + 2))
      {
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      uint64_t v33 = v31;
      uint64_t v34 = v32;
      v4.i32[0] = *((_DWORD *)v30 + 8);
      __int16 v35 = *((_WORD *)v30 + 18);
      __int16 v36 = *((_WORD *)v30 + 19);
      a3 = *((unsigned __int8 *)v30 + 40);
      swift_bridgeObjectRelease();
      BOOL v19 = sub_1000781B8(a3, v33, v34);
      __int16 v20 = v35;
      __int16 v85 = v36;
      uint64_t v23 = sub_100075CE8((__int16 *)1, v37, v38);
      if (!*((void *)v23 + 2)) {
        goto LABEL_58;
      }
LABEL_20:
      int16x8_t v81 = (int16x8_t)vmovl_u8(v4);
      __int16 v39 = v23[16];
      swift_bridgeObjectRelease();
      sub_1000541C0(v12, v11);
      char v40 = a3;
      a3 = v86;
      unint64_t v7 = v89;
LABEL_42:
      int64_t v71 = *((void *)v19 + 2);
      if (v71)
      {
        char v78 = v40;
        __int16 v80 = v39;
        __int16 v84 = v20;
        uint64_t v88 = a3;
        v91[0] = _swiftEmptyArrayStorage;
        sub_10007C4BC(0, v71, 0);
        uint64_t v72 = 0;
        int v73 = (void *)v91[0];
        unint64_t v74 = *(void *)(v91[0] + 16);
        do
        {
          uint64_t v75 = v19[v72 + 32];
          v91[0] = v73;
          unint64_t v76 = v73[3];
          if (v74 >= v76 >> 1)
          {
            sub_10007C4BC(v76 > 1, v74 + 1, 1);
            int v73 = (void *)v91[0];
          }
          ++v72;
          v73[2] = v74 + 1;
          v73[v74++ + 4] = v75;
        }
        while (v71 != v72);
        uint64_t result = swift_bridgeObjectRelease();
        a3 = v88;
        __int16 v77 = v84;
        __int16 v39 = v80;
        char v40 = v78;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
        __int16 v77 = v20;
        int v73 = _swiftEmptyArrayStorage;
      }
      *(_DWORD *)a3 = vmovn_s16(v81).u32[0];
      *(_WORD *)(a3 + 4) = v77;
      *(_WORD *)(a3 + 6) = v85;
      *(unsigned char *)(a3 + 8) = v40;
      *(void *)(a3 + 16) = v7;
      *(_WORD *)(a3 + 24) = a2;
      *(void *)(a3 + 32) = v73;
      *(_WORD *)(a3 + 40) = v39;
      return result;
  }
}

uint64_t sub_1000B5844(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = HIBYTE(a2);
  switch(HIBYTE(a1))
  {
    case 1u:
      if (v2 != 1) {
        goto LABEL_10;
      }
      uint64_t result = sub_10003D228(a1 & 0xFFFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFFFLL);
      break;
    case 2u:
      if (v2 != 2) {
        goto LABEL_10;
      }
      uint64_t result = sub_10003D478(a1 & 0xFFFFFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFFFFFLL);
      break;
    case 3u:
      if (v2 != 3) {
        goto LABEL_10;
      }
      uint64_t result = sub_10003D460(a1 & 0xFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFLL);
      break;
    default:
      if (v2) {
LABEL_10:
      }
        uint64_t result = 0;
      else {
        uint64_t result = sub_10004482C(a1 & 0xFFFFFF, a2 & 0xFFFFFF);
      }
      break;
  }
  return result;
}

void *sub_1000B58D0(uint64_t a1)
{
  uint8x8_t v4 = *(unsigned char **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t result = sub_10007997C(1, *(unsigned char **)a1, v3);
  if (!v1)
  {
    if (result[2])
    {
      int v6 = *((unsigned __int8 *)result + 34);
      swift_bridgeObjectRelease();
      if (v6 > 33)
      {
        if (v6 == 34)
        {
          uint64_t result = sub_100079260(1, v4, v3);
          if (result[2])
          {
            uint64_t v32 = v30;
            uint64_t v33 = v31;
            uint64_t v34 = *((unsigned __int16 *)result + 16);
            uint64_t v35 = *((unsigned __int8 *)result + 34);
            uint64_t v36 = *(unsigned __int16 *)((char *)result + 35);
            swift_bridgeObjectRelease();
            *(void *)a1 = v32;
            *(void *)(a1 + 8) = v33;
            uint64_t v15 = v34 | (v35 << 16) | (v36 << 24);
            uint64_t v16 = 0x300000000000000;
            return (void *)(v16 | v15);
          }
          goto LABEL_22;
        }
        if (v6 == 255)
        {
          uint64_t result = sub_100079200(1, v4, v3);
          if (result[2])
          {
            uint64_t v19 = v17;
            uint64_t v20 = v18;
            uint64_t v21 = *((unsigned __int16 *)result + 16);
            uint64_t v22 = *((unsigned __int8 *)result + 34);
            swift_bridgeObjectRelease();
            uint64_t v16 = 0;
            *(void *)a1 = v19;
            *(void *)(a1 + 8) = v20;
            uint64_t v15 = v21 | (v22 << 16);
            return (void *)(v16 | v15);
          }
          goto LABEL_20;
        }
      }
      else
      {
        if (v6 == 32)
        {
          uint64_t result = sub_10007991C(1, v4, v3);
          if (result[2])
          {
            uint64_t v25 = v23;
            uint64_t v26 = v24;
            uint64_t v27 = *((unsigned __int8 *)result + 36);
            uint64_t v28 = *((unsigned __int8 *)result + 37);
            uint64_t v29 = *((unsigned int *)result + 8);
            swift_bridgeObjectRelease();
            *(void *)a1 = v25;
            *(void *)(a1 + 8) = v26;
            uint64_t v15 = v29 | (v27 << 32) | (v28 << 40);
            uint64_t v16 = 0x100000000000000;
            return (void *)(v16 | v15);
          }
          goto LABEL_21;
        }
        if (v6 == 33)
        {
          uint64_t result = sub_10007957C(1, v4, v3);
          if (result[2])
          {
            uint64_t v9 = v7;
            uint64_t v10 = v8;
            uint64_t v11 = *((unsigned __int8 *)result + 36);
            uint64_t v12 = *((unsigned __int8 *)result + 37);
            uint64_t v13 = *((unsigned __int8 *)result + 38);
            uint64_t v14 = *((unsigned int *)result + 8);
            swift_bridgeObjectRelease();
            *(void *)a1 = v9;
            *(void *)(a1 + 8) = v10;
            uint64_t v15 = v14 | (v11 << 32) | (v12 << 40) | (v13 << 48);
            uint64_t v16 = 0x200000000000000;
            return (void *)(v16 | v15);
          }
          goto LABEL_19;
        }
      }
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v37 = 37;
      *(void *)(v37 + 8) = 0;
      *(void *)(v37 + 16) = 0xE000000000000000;
      *(void *)(v37 + 24) = 0xD000000000000012;
      *(void *)(v37 + 32) = 0x80000001000E69E0;
      *(void *)(v37 + 40) = 0xD00000000000001FLL;
      *(void *)(v37 + 48) = 0x80000001000E6A00;
      *(void *)(v37 + 56) = 100;
      return (void *)swift_willThrow();
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ADC3ClusterDescriptorSegment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 7);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ADC3ClusterDescriptorSegment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 7) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000B5BBC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 7);
}

uint64_t sub_1000B5BC4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 7) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ADC3ClusterDescriptorSegment()
{
  return &type metadata for ADC3ClusterDescriptorSegment;
}

unint64_t sub_1000B5BE0()
{
  unint64_t result = qword_10012A3E0;
  if (!qword_10012A3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A3E0);
  }
  return result;
}

uint64_t sub_1000B5C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (!sub_10008B5BC(*(unsigned __int16 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 34) << 16), *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16)))return 0; {
  uint64_t v5 = (unsigned __int16 *)(a1 + 35);
  }
  int v6 = (unsigned __int16 *)(a2 + 35);
  do
  {
    BOOL v7 = --v2 == 0;
    if (!v2) {
      break;
    }
    uint64_t v8 = (unsigned __int16 *)((char *)v5 + 3);
    uint64_t v9 = (unsigned __int16 *)((char *)v6 + 3);
    BOOL v10 = sub_10008B5BC(*v5 | (*((unsigned __int8 *)v5 + 2) << 16), *v6 | (*((unsigned __int8 *)v6 + 2) << 16));
    int v6 = v9;
    uint64_t v5 = v8;
  }
  while (v10);
  return v7;
}

BOOL sub_1000B5CF4(int64x2_t *a1, int64x2_t *a2)
{
  uint64_t v2 = a1[1].i64[0];
  if (v2 != a2[1].i64[0]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[2].i64[0] != a2[2].i64[0] || a1[2].i64[1] != a2[2].i64[1] || a1[3].i64[0] != a2[3].i64[0]) {
    return 0;
  }
  int v6 = a2 + 4;
  BOOL v7 = a1 + 4;
  do
  {
    BOOL result = --v2 == 0;
    if (!v2) {
      break;
    }
    if (v7[-1].i64[1] != v6[-1].i64[1]) {
      break;
    }
    int32x2_t v8 = vmovn_s64(vceqq_s64(*v7, *v6));
    if ((v8.i8[0] & 1) == 0) {
      break;
    }
    int v6 = (int64x2_t *)((char *)v6 + 24);
    BOOL v7 = (int64x2_t *)((char *)v7 + 24);
  }
  while ((v8.i8[4] & 1) != 0);
  return result;
}

BOOL sub_1000B5D90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  unsigned int v3 = (unsigned __int8 *)(a1 + 33);
  int v4 = (unsigned __int8 *)(a2 + 33);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_1000B5DFC(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v3 = v2 - 1;
  int v4 = a2 + 8;
  for (uint64_t i = a1 + 8; ; i += 4)
  {
    int v6 = *((_DWORD *)v4 - 2);
    uint64_t v8 = *(v4 - 3);
    uint64_t v7 = *(v4 - 2);
    int v9 = *((_DWORD *)i - 2);
    uint64_t v11 = *(i - 3);
    uint64_t v10 = *(i - 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v10) {
      break;
    }
    if (!v7) {
      goto LABEL_25;
    }
    if (v11 == v8 && v10 == v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v9 != v6) {
        return 0;
      }
    }
    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v13 & 1) == 0 || v9 != v6) {
        return result;
      }
    }
LABEL_19:
    if (!v3) {
      return 1;
    }
    if (*i != *v4) {
      return 0;
    }
    v4 += 4;
    --v3;
  }
  if (!v7)
  {
    if (v9 != v6) {
      return 0;
    }
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
  return 0;
}

BOOL sub_1000B5F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 32) != *(unsigned __int16 *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (unsigned __int16 *)(a1 + 34);
  int v4 = (unsigned __int16 *)(a2 + 34);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_1000B5FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 32;
    uint64_t v5 = a2 + 32;
    uint64_t v57 = *(void *)(a1 + 16);
    while (1)
    {
      uint64_t v6 = v4 + 80 * v3;
      uint64_t v7 = v5 + 80 * v3;
      if (*(void *)v6 != *(void *)v7) {
        break;
      }
      uint64_t v9 = *(void *)(v6 + 8);
      uint64_t v8 = *(void *)(v6 + 16);
      int v10 = *(unsigned __int8 *)(v6 + 24);
      char v11 = *(unsigned char *)(v6 + 25);
      int v12 = *(unsigned __int8 *)(v6 + 32);
      uint64_t v13 = *(void *)(v6 + 40);
      int v14 = *(unsigned __int8 *)(v6 + 48);
      char v15 = *(unsigned char *)(v6 + 49);
      uint64_t v17 = *(void *)(v6 + 56);
      uint64_t v16 = *(int64x2_t **)(v6 + 64);
      uint64_t v18 = *(void *)(v6 + 72);
      uint64_t v20 = *(void *)(v7 + 8);
      uint64_t v19 = *(void *)(v7 + 16);
      int v21 = *(unsigned __int8 *)(v7 + 24);
      int v22 = *(unsigned __int8 *)(v7 + 25);
      int v23 = *(unsigned __int8 *)(v7 + 32);
      uint64_t v24 = *(void *)(v7 + 40);
      int v25 = *(unsigned __int8 *)(v7 + 48);
      int v26 = *(unsigned __int8 *)(v7 + 49);
      uint64_t v28 = *(void *)(v7 + 56);
      uint64_t v27 = *(int64x2_t **)(v7 + 64);
      uint64_t v29 = *(void *)(v7 + 72);
      if (v9)
      {
        uint64_t result = 0;
        if (!v20 || v9 != v20) {
          return result;
        }
      }
      else if (v20)
      {
        return 0;
      }
      if (v8)
      {
        uint64_t result = 0;
        if (!v19 || v8 != v19) {
          return result;
        }
      }
      else if (v19)
      {
        return 0;
      }
      if (v11)
      {
        if ((v22 & (v12 ^ v23 ^ 1)) != 1 || v13 != v24) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if ((v22 & 1) != 0 || v10 != v21 || v12 != v23 || v13 != v24) {
          return result;
        }
      }
      if (v15)
      {
        if (!v26) {
          return 0;
        }
      }
      else
      {
        if (v14 == v25) {
          char v32 = v26;
        }
        else {
          char v32 = 1;
        }
        if (v32) {
          return 0;
        }
      }
      if (v17)
      {
        if (!v28) {
          return 0;
        }
        uint64_t v33 = *(void *)(v17 + 16);
        if (v33 != *(void *)(v28 + 16)) {
          return 0;
        }
        uint64_t v34 = v3;
        uint64_t v35 = v18;
        uint64_t v36 = v5;
        uint64_t v37 = v4;
        if (v33 && v17 != v28)
        {
          if (!sub_10008B5BC(*(unsigned __int16 *)(v17 + 32) | (*(unsigned __int8 *)(v17 + 34) << 16), *(unsigned __int16 *)(v28 + 32) | (*(unsigned __int8 *)(v28 + 34) << 16)))return 0; {
          uint64_t v38 = (unsigned __int16 *)(v17 + 35);
          }
          __int16 v39 = (unsigned __int16 *)(v28 + 35);
          while (--v33)
          {
            char v40 = (unsigned __int16 *)((char *)v38 + 3);
            uint64_t v41 = (unsigned __int16 *)((char *)v39 + 3);
            BOOL v42 = sub_10008B5BC(*v38 | (*((unsigned __int8 *)v38 + 2) << 16), *v39 | (*((unsigned __int8 *)v39 + 2) << 16));
            __int16 v39 = v41;
            uint64_t v38 = v40;
            if (!v42) {
              return 0;
            }
          }
        }
      }
      else
      {
        uint64_t v34 = v3;
        uint64_t v35 = v18;
        uint64_t v36 = v5;
        uint64_t v37 = v4;
        if (v28) {
          return 0;
        }
      }
      if (v16)
      {
        if (!v27) {
          return 0;
        }
        uint64_t v43 = v16[1].i64[0];
        if (v43 != v27[1].i64[0]) {
          return 0;
        }
        uint64_t v4 = v37;
        uint64_t v5 = v36;
        uint64_t v44 = v35;
        uint64_t v45 = v34;
        uint64_t v46 = v57;
        if (v43 && v16 != v27)
        {
          uint64_t result = 0;
          if (v16[2].i64[0] != v27[2].i64[0] || v16[2].i64[1] != v27[2].i64[1] || v16[3].i64[0] != v27[3].i64[0]) {
            return result;
          }
          uint64_t v47 = v27 + 4;
          uint64_t v48 = v16 + 4;
          while (--v43)
          {
            uint64_t result = 0;
            if (v48[-1].i64[1] == v47[-1].i64[1])
            {
              int32x2_t v49 = vmovn_s64(vceqq_s64(*v48, *v47));
              if (v49.i8[0])
              {
                uint64_t v47 = (int64x2_t *)((char *)v47 + 24);
                uint64_t v48 = (int64x2_t *)((char *)v48 + 24);
                if (v49.i8[4]) {
                  continue;
                }
              }
            }
            return result;
          }
        }
      }
      else
      {
        uint64_t v4 = v37;
        uint64_t v5 = v36;
        uint64_t v44 = v35;
        uint64_t v45 = v34;
        uint64_t v46 = v57;
        if (v27) {
          return 0;
        }
      }
      if (v44)
      {
        if (!v29) {
          return 0;
        }
        uint64_t v50 = *(void *)(v44 + 16);
        if (v50 != *(void *)(v29 + 16)) {
          return 0;
        }
        if (v50 && v44 != v29)
        {
          if (*(unsigned __int8 *)(v44 + 32) != *(unsigned __int8 *)(v29 + 32)) {
            return 0;
          }
          uint64_t v51 = (unsigned __int8 *)(v44 + 33);
          uint64_t v52 = (unsigned __int8 *)(v29 + 33);
          for (uint64_t i = v50 - 1; i; --i)
          {
            uint64_t result = 0;
            int v55 = *v51++;
            int v54 = v55;
            int v56 = *v52++;
            if (v54 != v56) {
              return result;
            }
          }
        }
      }
      else if (v29)
      {
        return 0;
      }
      uint64_t v3 = v45 + 1;
      uint64_t result = 1;
      if (v3 == v46) {
        return result;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1000B632C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a2 + 32;
  while (2)
  {
    uint64_t result = 0;
    uint64_t v7 = v4 + 80 * v3;
    uint64_t v8 = v5 + 80 * v3;
    if (*(void *)v7 == *(void *)v8
      && *(unsigned __int8 *)(v7 + 8) == *(unsigned __int8 *)(v8 + 8)
      && *(void *)(v7 + 16) == *(void *)(v8 + 16)
      && *(void *)(v7 + 24) == *(void *)(v8 + 24)
      && *(void *)(v7 + 32) == *(void *)(v8 + 32))
    {
      uint64_t v9 = v3++;
      uint64_t v10 = *(void *)(v7 + 40);
      int v11 = *(unsigned __int8 *)(v7 + 48);
      uint64_t v12 = *(void *)(v7 + 56);
      uint64_t v13 = *(void *)(v7 + 64);
      uint64_t v14 = *(void *)(v7 + 72);
      uint64_t v15 = *(void *)(v8 + 40);
      int v16 = *(unsigned __int8 *)(v8 + 49);
      uint64_t v17 = *(void *)(v8 + 64);
      uint64_t v18 = *(void *)(v8 + 72);
      switch(*(unsigned char *)(v4 + 80 * v9 + 49))
      {
        case 1:
          if (v16 != 1) {
            return 0;
          }
          uint64_t result = 0;
          if (v10 == v15
            && HIDWORD(v10) == HIDWORD(v15)
            && v11 == *(unsigned __int8 *)(v8 + 48))
          {
            goto LABEL_25;
          }
          break;
        case 2:
          uint64_t result = 0;
          if (v16 == 2) {
            goto LABEL_24;
          }
          break;
        case 3:
          uint64_t result = 0;
          if (v16 == 3)
          {
LABEL_24:
            if ((unsigned __int16)v10 == (unsigned __int16)v15) {
              goto LABEL_25;
            }
          }
          break;
        default:
          uint64_t result = 0;
          if (!*(unsigned char *)(v8 + 49)
            && v10 == v15
            && WORD1(v10) == WORD1(v15)
            && BYTE4(v10) == BYTE4(v15))
          {
LABEL_25:
            if ((sub_1000B5FC0(v12, *(void *)(v8 + 56)) & 1) == 0) {
              return 0;
            }
            if (v13)
            {
              if (!v17) {
                return 0;
              }
              uint64_t v19 = *(void *)(v13 + 16);
              if (v19 != *(void *)(v17 + 16)) {
                return 0;
              }
              if (v19 && v13 != v17)
              {
                if (!sub_10008B5BC(*(unsigned __int16 *)(v13 + 32) | (*(unsigned __int8 *)(v13 + 34) << 16), *(unsigned __int16 *)(v17 + 32) | (*(unsigned __int8 *)(v17 + 34) << 16)))return 0; {
                uint64_t v20 = (unsigned __int16 *)(v13 + 35);
                }
                int v21 = (unsigned __int16 *)(v17 + 35);
                while (--v19)
                {
                  int v22 = (unsigned __int16 *)((char *)v20 + 3);
                  int v23 = (unsigned __int16 *)((char *)v21 + 3);
                  BOOL v24 = sub_10008B5BC(*v20 | (*((unsigned __int8 *)v20 + 2) << 16), *v21 | (*((unsigned __int8 *)v21 + 2) << 16));
                  int v21 = v23;
                  uint64_t v20 = v22;
                  if (!v24) {
                    return 0;
                  }
                }
              }
            }
            else if (v17)
            {
              return 0;
            }
            if (v14)
            {
              if (!v18) {
                return 0;
              }
              uint64_t v25 = *(void *)(v14 + 16);
              if (v25 != *(void *)(v18 + 16)) {
                return 0;
              }
              if (v25 && v14 != v18)
              {
                if (*(unsigned __int8 *)(v14 + 32) != *(unsigned __int8 *)(v18 + 32)) {
                  return 0;
                }
                int v26 = (unsigned __int8 *)(v14 + 33);
                uint64_t v27 = (unsigned __int8 *)(v18 + 33);
                for (uint64_t i = v25 - 1; i; --i)
                {
                  int v30 = *v26++;
                  int v29 = v30;
                  int v31 = *v27++;
                  if (v29 != v31) {
                    return 0;
                  }
                }
              }
            }
            else if (v18)
            {
              return 0;
            }
            uint64_t result = 1;
            if (v3 != v2) {
              continue;
            }
          }
          break;
      }
    }
    return result;
  }
}

uint64_t sub_1000B660C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 24);
  int64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    int v23 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10007C4E4(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v7 = (__int16 *)(v4 + 32);
    do
    {
      __int16 v8 = *v7++;
      __int16 v21 = v8;
      sub_1000B84F8((uint64_t)&v21, &v22);
      uint64_t v9 = v22;
      int v23 = v6;
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        sub_10007C4E4(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v23;
      }
      v6[2] = v11 + 1;
      v6[v11 + 4] = v9;
      --v5;
    }
    while (v5);
    sub_10004EC5C((uint64_t)&v24);
  }
  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  int v12 = *(unsigned __int8 *)(v2 + 32);
  if (*(void *)(v2 + 40)) {
    uint64_t v13 = *(void **)(v2 + 40);
  }
  else {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  uint64_t v14 = *(unsigned __int8 *)(v2 + 3);
  uint64_t v15 = *(unsigned __int8 *)(v2 + 4);
  uint64_t v16 = *(void *)(v2 + 8);
  char v17 = *(unsigned char *)(v2 + 16);
  char v18 = *(unsigned char *)(v2 + 17);
  if (v13[2])
  {
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v13 = 0;
  }
  *(void *)a1 = v15;
  if (v12) {
    int v20 = v12;
  }
  else {
    int v20 = -65536;
  }
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v14;
  *(_WORD *)(a1 + 24) = v20;
  *(unsigned char *)(a1 + 26) = BYTE2(v20);
  *(void *)(a1 + 32) = v16;
  *(unsigned char *)(a1 + 40) = v17;
  *(unsigned char *)(a1 + 41) = v18;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v13;
  return result;
}

__n128 sub_1000B679C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(unsigned __int8 *)(v1 + 3);
  int v5 = *(unsigned __int16 *)(v1 + 4);
  if (*(unsigned char *)(v1 + 6) != 1) {
    sub_10005B1DC(v43, 17);
  }
  if (*(unsigned char *)(v1 + 11) != 1) {
    sub_10005B1DC(v43, 19);
  }
  uint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v41 = a1;
  uint64_t v40 = v4;
  uint64_t v42 = v1;
  switch(v5)
  {
    case 1:
      goto LABEL_9;
    case 2:
      unint64_t v7 = *(void *)(*(void *)(v1 + 56) + 16);
      if (v7 >= 0x100) {
        goto LABEL_51;
      }
      if ((v7 & 0xFC) != 0) {
        sub_10005B1DC(v43, 18);
      }
LABEL_9:
      sub_10000AC7C(&qword_10012A4E8);
      uint64_t v8 = swift_allocObject();
      uint64_t v9 = (void *)v8;
      *(_OWORD *)(v8 + 16) = xmmword_1000EA840;
      *(unsigned char *)(v8 + 32) = 1;
      *(unsigned char *)(v8 + 35) = 80;
      *(_WORD *)(v8 + 33) = 257;
      uint64_t v10 = 2;
      *(unsigned char *)(v8 + 36) = 2;
      __int16 v11 = 577;
      goto LABEL_18;
    case 3:
      unint64_t v13 = *(void *)(*(void *)(v1 + 56) + 16);
      if (v13 >= 0x100) {
        goto LABEL_51;
      }
      if (v13) {
        sub_10005B1DC(v43, 18);
      }
      sub_10000AC7C(&qword_10012A4E8);
      uint64_t v8 = swift_allocObject();
      uint64_t v9 = (void *)v8;
      *(_OWORD *)(v8 + 16) = xmmword_1000EA840;
      *(unsigned char *)(v8 + 32) = 1;
      *(unsigned char *)(v8 + 35) = 80;
      *(_WORD *)(v8 + 33) = 257;
      uint64_t v10 = 2;
      *(unsigned char *)(v8 + 36) = 2;
      __int16 v11 = 641;
LABEL_18:
      *(unsigned char *)(v8 + 39) = 96;
      *(_WORD *)(v8 + 37) = v11;
      break;
    case 4:
      sub_10005B1DC(v43, 21);
      unint64_t v14 = *(void *)(*(void *)(v1 + 56) + 16);
      if (v14 >= 0x100) {
        goto LABEL_51;
      }
      if (v14) {
        sub_10005B1DC(v43, 18);
      }
      sub_10000AC7C(&qword_10012A4E8);
      uint64_t v9 = (void *)swift_allocObject();
      *((_OWORD *)v9 + 1) = xmmword_1000EB1F0;
      *((unsigned char *)v9 + 32) = 1;
      *((unsigned char *)v9 + 35) = 80;
      *(_WORD *)((char *)v9 + 33) = 257;
      *((unsigned char *)v9 + 36) = 2;
      *(_WORD *)((char *)v9 + 37) = 193;
      *(_DWORD *)((char *)v9 + 39) = 33621088;
      *((unsigned char *)v9 + 43) = 112;
      *((unsigned char *)v9 + 44) = 8;
      *(_DWORD *)((char *)v9 + 45) = 275841857;
      *((unsigned char *)v9 + 51) = 112;
      uint64_t v10 = 5;
      *(_WORD *)((char *)v9 + 49) = 1153;
      break;
    case 5:
      unint64_t v12 = *(void *)(*(void *)(v1 + 56) + 16);
      if (v12 >= 0x100) {
        goto LABEL_51;
      }
      if (v12) {
        sub_10005B1DC(v43, 18);
      }
      sub_10000AC7C(&qword_10012A4E8);
      uint64_t v9 = (void *)swift_allocObject();
      *((_OWORD *)v9 + 1) = xmmword_1000EA830;
      *((unsigned char *)v9 + 32) = 1;
      *((unsigned char *)v9 + 35) = 80;
      *(_WORD *)((char *)v9 + 33) = 257;
      *((unsigned char *)v9 + 36) = 2;
      *((unsigned char *)v9 + 39) = 112;
      *(_WORD *)((char *)v9 + 37) = 513;
      uint64_t v10 = 4;
      *((unsigned char *)v9 + 40) = 4;
      *((unsigned char *)v9 + 43) = -127;
      *(_WORD *)((char *)v9 + 41) = 897;
      *((unsigned char *)v9 + 44) = 8;
      *((unsigned char *)v9 + 47) = -127;
      *(_WORD *)((char *)v9 + 45) = 1217;
      break;
    case 6:
      unint64_t v15 = *(void *)(*(void *)(v1 + 56) + 16);
      if (v15 >= 0x100) {
        goto LABEL_51;
      }
      if (v15) {
        sub_10005B1DC(v43, 18);
      }
      sub_10000AC7C(&qword_10012A4E8);
      uint64_t v9 = (void *)swift_allocObject();
      *((_OWORD *)v9 + 1) = xmmword_1000EB1E0;
      *((unsigned char *)v9 + 32) = 1;
      *((unsigned char *)v9 + 35) = 80;
      *(_WORD *)((char *)v9 + 33) = 257;
      *((unsigned char *)v9 + 36) = 2;
      *((unsigned char *)v9 + 39) = -111;
      *(_WORD *)((char *)v9 + 37) = 513;
      *((unsigned char *)v9 + 40) = 4;
      *((unsigned char *)v9 + 43) = -111;
      *(_WORD *)((char *)v9 + 41) = 833;
      *((unsigned char *)v9 + 44) = 8;
      *(_WORD *)((char *)v9 + 45) = 1153;
      *(_WORD *)((char *)v9 + 47) = 4241;
      *(_WORD *)((char *)v9 + 49) = 1473;
      *(_DWORD *)((char *)v9 + 51) = 100737169;
      uint64_t v10 = 6;
      *((unsigned char *)v9 + 55) = -95;
      break;
    default:
      sub_10005B1DC(v43, 16);
      uint64_t v10 = _swiftEmptyArrayStorage[2];
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (!v10) {
        goto LABEL_39;
      }
      break;
  }
  uint64_t v16 = *(void *)(v2 + 40);
  if (!*(void *)(v16 + 16))
  {
    __break(1u);
LABEL_51:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1000B6E64);
  }
  unsigned __int8 v17 = *(unsigned char *)(v16 + 32);
  char v18 = (unsigned __int16 *)((char *)v9 + 33);
  do
  {
    if ((*((unsigned char *)v18 - 1) & v17) != 0)
    {
      int v20 = *((unsigned __int8 *)v18 + 2);
      int v21 = *v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_100058F88(0, v6[2] + 1, 1, v6);
      }
      unint64_t v23 = v6[2];
      unint64_t v22 = v6[3];
      if (v23 >= v22 >> 1) {
        uint64_t v6 = sub_100058F88((void *)(v22 > 1), v23 + 1, 1, v6);
      }
      v6[2] = v23 + 1;
      uint64_t v19 = (char *)v6 + 3 * v23;
      v19[34] = (v21 | (v20 << 16)) >> 16;
      *((_WORD *)v19 + 16) = v21;
    }
    v18 += 2;
    --v10;
  }
  while (v10);
  uint64_t v2 = v42;
LABEL_39:
  swift_bridgeObjectRelease();
  int v24 = *(unsigned __int8 *)(v2 + 48);
  uint64_t v25 = *(void *)(v2 + 32);
  uint64_t v26 = *(void *)(v2 + 56);
  uint64_t v44 = v26;
  int64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100053BD8((uint64_t)&v44);
    *(void *)&v43[0] = _swiftEmptyArrayStorage;
    sub_10007C504(0, v27, 0);
    uint64_t v28 = *(void **)&v43[0];
    int v29 = (unsigned __int16 *)(v26 + 32);
    unint64_t v30 = *(void *)(*(void *)&v43[0] + 16);
    do
    {
      int v32 = *v29++;
      int v31 = v32;
      *(void *)&v43[0] = v28;
      unint64_t v33 = v28[3];
      if (v30 >= v33 >> 1)
      {
        sub_10007C504(v33 > 1, v30 + 1, 1);
        uint64_t v28 = *(void **)&v43[0];
      }
      v28[2] = v30 + 1;
      *((_DWORD *)v28 + v30++ + 8) = v31;
      --v27;
    }
    while (v27);
    sub_10004EC5C((uint64_t)&v44);
    swift_bridgeObjectRelease();
    uint64_t v2 = v42;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _swiftEmptyArrayStorage;
  }
  uint64_t v34 = *(void *)(v2 + 16);
  __int16 v35 = *(_WORD *)(v2 + 24);
  uint64_t v36 = sub_10005AD1C((uint64_t)&_swiftEmptySetSingleton);
  swift_bridgeObjectRelease();
  if (v24) {
    int v37 = v24;
  }
  else {
    int v37 = 16711680;
  }
  sub_1000C10F0(v40, 0, v25, (uint64_t)v6, v37, (uint64_t)v28, v34, v35, (uint64_t)v43, (uint64_t)v36);
  long long v38 = v43[3];
  *(_OWORD *)(v41 + 32) = v43[2];
  *(_OWORD *)(v41 + 48) = v38;
  *(_OWORD *)(v41 + 64) = v43[4];
  __n128 result = (__n128)v43[1];
  *(_OWORD *)uint64_t v41 = v43[0];
  *(__n128 *)(v41 + 16) = result;
  return result;
}

uint64_t static ADC1AssembledFormatTypeIDescriptor.assemble(_:)(unsigned char *a1, __int16 a2)
{
  uint64_t result = sub_1000BB988(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007AC50, 686);
  if (v2) {
    return v4;
  }
  return result;
}

unint64_t ADC1AssembledFormatTypeIDescriptor.bSubframeSize.getter(unint64_t a1)
{
  return a1 >> 40;
}

unint64_t ADC1AssembledFormatTypeIDescriptor.bNrChannels.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

Swift::Int ADC1ACInterfaceHeaderDescriptor.hashValue.getter(unint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100048918((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1000B6F14()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_100048918((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ACInterfaceHeaderDescriptor(uint64_t a1)
{
  return sub_100048918(a1, *v1);
}

Swift::Int sub_1000B6F64()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_100048918((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ACInterfaceHeaderDescriptor(unint64_t *a1, unint64_t *a2)
{
  return sub_10003EA64(*a1, *a2);
}

Swift::Int ADC1InputTerminalDescriptor.hashValue.getter(unint64_t a1, unsigned int a2)
{
  Hasher.init(_seed:)();
  sub_10004B258((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_1000B7004()
{
  unint64_t v1 = *(void *)v0;
  unsigned int v2 = *(_DWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004B258((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1InputTerminalDescriptor(uint64_t a1)
{
  return sub_10004B258(a1, *(void *)v1, *(_DWORD *)(v1 + 8));
}

Swift::Int sub_1000B7060()
{
  unint64_t v1 = *(void *)v0;
  unsigned int v2 = *(_DWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004B258((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1InputTerminalDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_10004219C(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)a2, *(_DWORD *)(a2 + 8));
}

Swift::Int ADC1OutputTerminalDescriptor.hashValue.getter(unint64_t a1, int a2)
{
  Hasher.init(_seed:)();
  sub_10004A1F4((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_1000B7118()
{
  unint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004A1F4((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1OutputTerminalDescriptor(uint64_t a1)
{
  return sub_10004A1F4(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

Swift::Int sub_1000B7174()
{
  unint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004A1F4((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1OutputTerminalDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_100040B34(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

Swift::Int ADC1MixerUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000B7348(a1, (void (*)(unsigned char *, uint64_t))sub_10004CC90);
}

Swift::Int sub_1000B71F0(uint64_t a1, uint64_t a2)
{
  return sub_1000B73B0(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004CC90);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1MixerUnitDescriptor(uint64_t a1)
{
  return sub_10004CC90(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_1000B7218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7434(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004CC90);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1MixerUnitDescriptor(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B74A4(a1, a2, a3, a4, sub_1000443C0);
}

Swift::Int ADC1MixerUnitDescriptorPart2.hashValue.getter(unsigned int a1)
{
  Hasher.init(_seed:)();
  sub_10004A3D8((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1000B7290()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  sub_10004A3D8((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1MixerUnitDescriptorPart2(uint64_t a1)
{
  return sub_10004A3D8(a1, *v1);
}

Swift::Int sub_1000B72E0()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  sub_10004A3D8((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1MixerUnitDescriptorPart2(unsigned int *a1, unsigned int *a2)
{
  return sub_100040DC0(*a1, *a2);
}

Swift::Int ADC1SelectorUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000B7348(a1, (void (*)(unsigned char *, uint64_t))sub_10004B884);
}

Swift::Int sub_1000B7348(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1 & 0xFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000B7398(uint64_t a1, uint64_t a2)
{
  return sub_1000B73B0(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004B884);
}

Swift::Int sub_1000B73B0(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(unsigned int *)(v3 + 1);
  Hasher.init(_seed:)();
  a3(v8, v5 | (v6 << 8));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1SelectorUnitDescriptor(uint64_t a1)
{
  return sub_10004B884(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_1000B741C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7434(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004B884);
}

Swift::Int sub_1000B7434(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = *(unsigned int *)(v4 + 1);
  Hasher.init(_seed:)();
  a4(v9, v6 | (v7 << 8));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1SelectorUnitDescriptor(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B74A4(a1, a2, a3, a4, sub_100042978);
}

uint64_t sub_1000B74A4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 8), *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 8));
}

Swift::Int ADC1FeatureUnitDescriptor.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_10004C2BC((uint64_t)v3, a1 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000B750C()
{
  uint64_t v1 = *(unsigned int *)(v0 + 1);
  uint64_t v2 = *v0;
  Hasher.init(_seed:)();
  sub_10004C2BC((uint64_t)v4, v2 | (v1 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1FeatureUnitDescriptor(uint64_t a1)
{
  return sub_10004C2BC(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

Swift::Int sub_1000B7568()
{
  uint64_t v1 = *(unsigned int *)(v0 + 1);
  uint64_t v2 = *v0;
  Hasher.init(_seed:)();
  sub_10004C2BC((uint64_t)v4, v2 | (v1 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1FeatureUnitDescriptor(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_1000436F8(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16), *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16));
}

Swift::Int ADC1ExtensionUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000B7A0C(a1, (void (*)(unsigned char *, uint64_t))sub_10004B474);
}

Swift::Int sub_1000B75E4(uint64_t a1, uint64_t a2)
{
  return sub_1000B76EC(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004B474);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ExtensionUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7768(a1, a2, a3, sub_10004B474);
}

Swift::Int sub_1000B7614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B779C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004B474);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ExtensionUnitDescriptor(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B7814(a1, a2, a3, a4, sub_10004247C);
}

Swift::Int ADC1ExtensionUnitDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_1000B785C(a1, (void (*)(unsigned char *, uint64_t))sub_100048394);
}

Swift::Int sub_1000B765C(uint64_t a1, uint64_t a2)
{
  return sub_1000B78C4(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100048394);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ExtensionUnitDescriptorPart2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7938(a1, a2, a3, sub_100048394);
}

Swift::Int sub_1000B768C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7964(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100048394);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ExtensionUnitDescriptorPart2(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B79D4(a1, a2, a3, a4, sub_10003E390);
}

Swift::Int ADC1ProcessingUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000B7A0C(a1, (void (*)(unsigned char *, uint64_t))sub_10004A1DC);
}

Swift::Int sub_1000B76D4(uint64_t a1, uint64_t a2)
{
  return sub_1000B76EC(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004A1DC);
}

Swift::Int sub_1000B76EC(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *((unsigned __int16 *)v3 + 2);
  uint64_t v6 = *((unsigned __int8 *)v3 + 6);
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  a3(v9, v7 | (v5 << 32) | (v6 << 48));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ProcessingUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7768(a1, a2, a3, sub_10004A1DC);
}

uint64_t sub_1000B7768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  return a4(a1, *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v4 + 6) << 48));
}

Swift::Int sub_1000B7784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B779C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004A1DC);
}

Swift::Int sub_1000B779C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *((unsigned __int16 *)v4 + 2);
  uint64_t v7 = *((unsigned __int8 *)v4 + 6);
  uint64_t v8 = *v4;
  Hasher.init(_seed:)();
  a4(v10, v8 | (v6 << 32) | (v7 << 48));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ProcessingUnitDescriptor(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B7814(a1, a2, a3, a4, sub_100040B1C);
}

uint64_t sub_1000B7814(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48), *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48));
}

Swift::Int ADC1ProcessingUnitDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_1000B785C(a1, (void (*)(unsigned char *, uint64_t))sub_100047BE8);
}

Swift::Int sub_1000B785C(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1 & 0xFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000B78AC(uint64_t a1, uint64_t a2)
{
  return sub_1000B78C4(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100047BE8);
}

Swift::Int sub_1000B78C4(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *((unsigned __int8 *)v3 + 4);
  uint64_t v6 = *v3;
  Hasher.init(_seed:)();
  a3(v8, v6 | (v5 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ProcessingUnitDescriptorPart2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7938(a1, a2, a3, sub_100047BE8);
}

uint64_t sub_1000B7938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  return a4(a1, *v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32));
}

Swift::Int sub_1000B794C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7964(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100047BE8);
}

Swift::Int sub_1000B7964(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *((unsigned __int8 *)v4 + 4);
  uint64_t v7 = *v4;
  Hasher.init(_seed:)();
  a4(v9, v7 | (v6 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ProcessingUnitDescriptorPart2(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B79D4(a1, a2, a3, a4, sub_10003D978);
}

uint64_t sub_1000B79D4(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32));
}

Swift::Int ADC1ASInterfaceDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000B7A0C(a1, (void (*)(unsigned char *, uint64_t))sub_10004C488);
}

Swift::Int sub_1000B7A0C(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1 & 0xFFFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000B7A5C()
{
  uint64_t v1 = *((unsigned __int8 *)v0 + 4);
  uint64_t v2 = *(unsigned __int16 *)((char *)v0 + 5);
  uint64_t v3 = *v0;
  Hasher.init(_seed:)();
  sub_10004C488((uint64_t)v5, v3 | (v1 << 32) | (v2 << 40));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ASInterfaceDescriptor(uint64_t a1)
{
  return sub_10004C488(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*(unsigned __int16 *)((char *)v1 + 5) << 40));
}

Swift::Int sub_1000B7AD0()
{
  uint64_t v1 = *((unsigned __int8 *)v0 + 4);
  uint64_t v2 = *(unsigned __int16 *)((char *)v0 + 5);
  uint64_t v3 = *v0;
  Hasher.init(_seed:)();
  sub_10004C488((uint64_t)v5, v3 | (v1 << 32) | (v2 << 40));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ASInterfaceDescriptor(unsigned int *a1, unsigned int *a2)
{
  return sub_10004394C(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + 5) << 40), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*(unsigned __int16 *)((char *)a2 + 5) << 40));
}

Swift::Int ADC1FormatTypeIDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000B7BC8(a1, (void (*)(unsigned char *, uint64_t))sub_10004C0B0);
}

Swift::Int sub_1000B7B6C(uint64_t a1, uint64_t a2)
{
  return sub_1000B7C30(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004C0B0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1FormatTypeIDescriptor(uint64_t a1)
{
  return sub_10004C0B0(a1, *v1);
}

Swift::Int sub_1000B7B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7CA0(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004C0B0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1FormatTypeIDescriptor(unint64_t *a1, unint64_t *a2)
{
  return sub_100043448(*a1, *a2);
}

Swift::Int ADC1FormatTypeIIIDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000B7BC8(a1, (void (*)(unsigned char *, uint64_t))sub_10004B45C);
}

Swift::Int sub_1000B7BC8(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1000B7C18(uint64_t a1, uint64_t a2)
{
  return sub_1000B7C30(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004B45C);
}

Swift::Int sub_1000B7C30(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v7, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1FormatTypeIIIDescriptor(uint64_t a1)
{
  return sub_10004B45C(a1, *v1);
}

Swift::Int sub_1000B7C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7CA0(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004B45C);
}

Swift::Int sub_1000B7CA0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v8, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1FormatTypeIIIDescriptor(unint64_t *a1, unint64_t *a2)
{
  return sub_100042464(*a1, *a2);
}

Swift::Int ADC1ASFormatTypeDescriptorHeader.hashValue.getter(unsigned int a1)
{
  Hasher.init(_seed:)();
  sub_100048568((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1000B7D40()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  sub_100048568((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ASFormatTypeDescriptorHeader(uint64_t a1)
{
  return sub_100048568(a1, *v1);
}

Swift::Int sub_1000B7D90()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  sub_100048568((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ASFormatTypeDescriptorHeader(unsigned int *a1, unsigned int *a2)
{
  return sub_10003E5D0(*a1, *a2);
}

uint64_t sub_1000B7DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_10007A960(1, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      uint64_t v9 = v7;
      uint64_t v10 = v8;
      v4.i32[0] = *(_DWORD *)(result + 32);
      uint64_t v11 = *(unsigned __int8 *)(result + 36);
      swift_bridgeObjectRelease();
      unint64_t v12 = sub_1000781B8(v11, v9, v10);
      uint64_t result = (uint64_t)sub_10007A900(1, v13, v14);
      if (*(void *)(result + 16))
      {
        unsigned __int8 v17 = v15;
        uint64_t v18 = v16;
        int16x8_t v26 = (int16x8_t)vmovl_u8(v4);
        char v19 = *(unsigned char *)(result + 32);
        __int16 v20 = *(_WORD *)(result + 33);
        char v21 = *(unsigned char *)(result + 35);
        uint64_t result = swift_bridgeObjectRelease();
        if (((v26.u16[0] - 10) & 0xFFFFFF00) == 0)
        {
          if ((((v26.i8[0] - 10) - v11) & 0xFFFFFF00) == 0)
          {
            unint64_t v22 = sub_1000781B8((v26.i8[0] - 10 - v11), v17, v18);
            uint64_t result = (uint64_t)sub_1000781B8(1, v23, v24);
            if (*(void *)(result + 16))
            {
              char v25 = *(unsigned char *)(result + 32);
              uint64_t result = swift_bridgeObjectRelease();
              *(_DWORD *)a3 = vmovn_s16(v26).u32[0];
              *(unsigned char *)(a3 + 4) = v11;
              *(void *)(a3 + 8) = v12;
              *(unsigned char *)(a3 + 16) = v19;
              *(_WORD *)(a3 + 17) = v20;
              *(unsigned char *)(a3 + 19) = v21;
              *(void *)(a3 + 24) = v22;
              *(unsigned char *)(a3 + 32) = v25;
              return result;
            }
            goto LABEL_14;
          }
LABEL_13:
          __break(1u);
LABEL_14:
          __break(1u);
          return result;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1000B7F80@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_10007AA48(1, a1, a2);
  if (!v3)
  {
    unint64_t v14 = *(void *)(result + 16);
    if (v14)
    {
      unint64_t v15 = v12;
      uint64_t v6 = v13;
      v9.i32[0] = *(_DWORD *)(result + 32);
      uint64_t v7 = (void *)*(unsigned __int8 *)(result + 36);
      uint64_t v5 = *(unsigned __int8 *)(result + 37);
      swift_bridgeObjectRelease();
      if (!v5)
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v17 = 20;
        *(void *)(v17 + 8) = 0;
        *(void *)(v17 + 16) = 0xE000000000000000;
        strcpy((char *)(v17 + 24), "assemble(_:)");
        *(unsigned char *)(v17 + 37) = 0;
        *(_WORD *)(v17 + 38) = -5120;
        *(void *)(v17 + 40) = 0xD00000000000001FLL;
        *(void *)(v17 + 48) = 0x80000001000E6A40;
        uint64_t v18 = 342;
        goto LABEL_8;
      }
      uint16x8_t v16 = vmovl_u8(v9);
      unint64_t v14 = v16.u16[0];
      unint64_t v4 = v16.u16[0] - 7;
      if ((v4 & 0xFFFFFF00) == 0)
      {
        uint64_t v8 = (v16.i8[0] - 7) / v5;
        if ((v16.i8[0] - 7) % v5)
        {
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v17 = 20;
          *(void *)(v17 + 8) = 0;
          *(void *)(v17 + 16) = 0xE000000000000000;
          strcpy((char *)(v17 + 24), "assemble(_:)");
          *(unsigned char *)(v17 + 37) = 0;
          *(_WORD *)(v17 + 38) = -5120;
          *(void *)(v17 + 40) = 0xD00000000000001FLL;
          *(void *)(v17 + 48) = 0x80000001000E6A40;
          uint64_t v18 = 350;
LABEL_8:
          *(void *)(v17 + 56) = v18;
          return swift_willThrow();
        }
        char v45 = (char)v7;
        int16x8_t v44 = (int16x8_t)v16;
        if (v5 == 2)
        {
          char v25 = sub_100075CE8((__int16 *)v8, v15, v6);
          char v21 = v29;
          uint64_t v6 = v30;
LABEL_40:
          uint64_t v41 = sub_1000781B8(1, v21, v6);
          if (*((void *)v41 + 2))
          {
            char v42 = v41[32];
            uint64_t result = swift_bridgeObjectRelease();
            *(_DWORD *)a3 = vmovn_s16(v44).u32[0];
            *(unsigned char *)(a3 + 4) = v45;
            *(unsigned char *)(a3 + 5) = v5;
            *(void *)(a3 + 8) = v25;
            *(unsigned char *)(a3 + 16) = v42;
            return result;
          }
          __break(1u);
          goto LABEL_51;
        }
        uint64_t v46 = v5;
        if (v5 == 1)
        {
          __int16 v20 = sub_1000781B8(v8, v15, v6);
          char v21 = v19;
          uint64_t v6 = v22;
          int64_t v23 = *((void *)v20 + 2);
          if (!v23)
          {
            swift_bridgeObjectRelease();
            char v25 = (__int16 *)_swiftEmptyArrayStorage;
            goto LABEL_40;
          }
          uint64_t v47 = v19;
          unint64_t v43 = a3;
          uint64_t v48 = (__int16 *)_swiftEmptyArrayStorage;
          sub_10007C40C(0, v23, 0);
          uint64_t v24 = 0;
          char v25 = (__int16 *)_swiftEmptyArrayStorage;
          unint64_t v26 = _swiftEmptyArrayStorage[2];
          do
          {
            __int16 v27 = v20[v24 + 32];
            uint64_t v48 = v25;
            unint64_t v28 = *((void *)v25 + 3);
            if (v26 >= v28 >> 1)
            {
              sub_10007C40C(v28 > 1, v26 + 1, 1);
              char v25 = v48;
            }
            ++v24;
            *((void *)v25 + 2) = v26 + 1;
            v25[v26++ + 16] = v27;
          }
          while (v23 != v24);
          swift_bridgeObjectRelease();
          goto LABEL_39;
        }
        sub_10005B1DC(&v48, 19);
        if (v5 <= v4)
        {
          uint64_t v7 = _swiftEmptyArrayStorage;
          LOBYTE(v31) = 1;
          while (1)
          {
            int v32 = sub_1000781B8(v5, v15, v6);
            unint64_t v4 = *((void *)v32 + 2);
            if (!v4)
            {
              __break(1u);
LABEL_44:
              __break(1u);
LABEL_45:
              __break(1u);
              goto LABEL_46;
            }
            unint64_t v15 = v33;
            uint64_t v6 = v34;
            LODWORD(v5) = v32[32];
            swift_bridgeObjectRelease();
            if (v4 == 1) {
              goto LABEL_44;
            }
            uint64_t v47 = v15;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v7 = sub_10005A66C(0, v7[2] + 1, 1, v7);
            }
            unint64_t v4 = v7[2];
            unint64_t v35 = v7[3];
            if (v4 >= v35 >> 1) {
              uint64_t v7 = sub_10005A66C((void *)(v35 > 1), v4 + 1, 1, v7);
            }
            v7[2] = v4 + 1;
            *((_DWORD *)v7 + v4 + 8) = v5;
            if (v8 == v31) {
              break;
            }
            unint64_t v14 = v31;
            __int16 v31 = v31 + 1;
            uint64_t v5 = v46;
            if ((v31 & 0x100) != 0) {
              goto LABEL_45;
            }
          }
          unint64_t v43 = a3;
          uint64_t v48 = (__int16 *)_swiftEmptyArrayStorage;
          swift_bridgeObjectRetain();
          sub_10007C40C(0, v4 + 1, 0);
          LODWORD(v5) = *((_DWORD *)v7 + 8);
          if (WORD1(v5)) {
            goto LABEL_51;
          }
          char v25 = v48;
          a3 = *((void *)v48 + 2);
          unint64_t v14 = *((void *)v48 + 3);
          uint64_t v8 = a3 + 1;
          if (a3 < v14 >> 1) {
            goto LABEL_32;
          }
          goto LABEL_49;
        }
LABEL_48:
        __break(1u);
LABEL_49:
        sub_10007C40C(v14 > 1, v8, 1);
        char v25 = v48;
LABEL_32:
        *((void *)v25 + 2) = v8;
        v25[a3 + 16] = v5;
        if (v4)
        {
          unint64_t v36 = a3 + 17;
          int v37 = (unsigned int *)v7 + 9;
          while (1)
          {
            unsigned int v39 = *v37++;
            __int16 v38 = v39;
            if (HIWORD(v39)) {
              break;
            }
            uint64_t v48 = v25;
            unint64_t v40 = *((void *)v25 + 3);
            if (v36 - 16 >= v40 >> 1)
            {
              sub_10007C40C(v40 > 1, v36 - 15, 1);
              char v25 = v48;
            }
            *((void *)v25 + 2) = v36 - 15;
            v25[v36++] = v38;
            if (!--v4) {
              goto LABEL_38;
            }
          }
LABEL_51:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
LABEL_38:
        swift_bridgeObjectRelease_n();
LABEL_39:
        a3 = v43;
        LOBYTE(v5) = v46;
        char v21 = v47;
        goto LABEL_40;
      }
    }
    else
    {
LABEL_46:
      __break(1u);
    }
    __break(1u);
    goto LABEL_48;
  }
  return result;
}

uint64_t sub_1000B84F8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = 0;
  unsigned __int16 v4 = *(_WORD *)result;
  int v13 = 25231361;
  char v14 = 16;
  int v15 = 46202882;
  char v16 = 17;
  int v17 = 50397188;
  char v18 = 32;
  __int16 v19 = 8;
  __int16 v20 = 1089;
  char v21 = 32;
  __int16 v22 = 16;
  char v24 = 32;
  __int16 v23 = 1409;
  int v25 = 113311776;
  char v26 = 37;
  int v27 = 117506112;
  char v28 = 48;
  int v29 = 138477696;
  char v30 = 49;
  __int16 v31 = 256;
  char v33 = 48;
  __int16 v32 = 2433;
  __int16 v34 = 512;
  char v36 = 48;
  __int16 v35 = 2753;
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v7 = &v12[v3];
    if ((*(_WORD *)&v12[v3 + 32] & v4) != 0)
    {
      int v8 = v7[36];
      int v9 = *((unsigned __int16 *)v7 + 17);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100058F88(0, v5[2] + 1, 1, v5);
        uint64_t v5 = (void *)result;
      }
      unint64_t v11 = v5[2];
      unint64_t v10 = v5[3];
      if (v11 >= v10 >> 1)
      {
        uint64_t result = (uint64_t)sub_100058F88((void *)(v10 > 1), v11 + 1, 1, v5);
        uint64_t v5 = (void *)result;
      }
      v5[2] = v11 + 1;
      uint64_t v6 = (char *)v5 + 3 * v11;
      v6[34] = (v9 | (v8 << 16)) >> 16;
      *((_WORD *)v6 + 16) = v9;
    }
    v3 += 6;
  }
  while (v3 != 60);
  *a2 = v5;
  return result;
}

void *sub_1000B86DC@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10007AB1C(1, a1, a2);
  if (!v3)
  {
    if (result[2])
    {
      int v9 = v7;
      uint64_t v10 = v8;
      v4.i32[0] = *((_DWORD *)result + 8);
      int v11 = *((unsigned __int16 *)result + 18);
      uint64_t v12 = *((unsigned __int8 *)result + 38);
      swift_bridgeObjectRelease();
      int v13 = sub_1000781B8(v12, v9, v10);
      uint64_t result = sub_10007AAA8(1, v14, v15);
      if (result[2])
      {
        char v18 = v16;
        uint64_t v19 = v17;
        __int16 v37 = *(_WORD *)((char *)result + 33);
        char v38 = *((unsigned char *)result + 32);
        char v20 = *((unsigned char *)result + 35);
        uint64_t v21 = *((unsigned __int8 *)result + 36);
        swift_bridgeObjectRelease();
        __int16 v22 = sub_1000781B8(v21, v18, v19);
        char v36 = v21;
        char v23 = v20;
        uint64_t result = sub_1000781B8(1, v24, v25);
        if (result[2])
        {
          char v28 = v26;
          uint64_t v29 = v27;
          char v35 = *((unsigned char *)result + 32);
          swift_bridgeObjectRelease();
          if ((v11 - 1) >= 2)
          {
            uint64_t result = _swiftEmptyArrayStorage;
            goto LABEL_10;
          }
          uint64_t result = sub_1000781B8(1, v28, v29);
          if (result[2])
          {
            __int16 v32 = v30;
            uint64_t v33 = v31;
            __int16 v34 = (__int16 *)*((unsigned __int8 *)result + 32);
            swift_bridgeObjectRelease();
            uint64_t result = sub_100075CE8(v34, v32, v33);
LABEL_10:
            *(_DWORD *)a3 = vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0];
            *(_WORD *)(a3 + 4) = v11;
            *(unsigned char *)(a3 + 6) = v12;
            *(void *)(a3 + 8) = v13;
            *(unsigned char *)(a3 + 16) = v38;
            *(_WORD *)(a3 + 17) = v37;
            *(unsigned char *)(a3 + 19) = v23;
            *(unsigned char *)(a3 + 20) = v36;
            *(void *)(a3 + 24) = v22;
            *(unsigned char *)(a3 + 32) = v35;
            *(void *)(a3 + 40) = result;
            return result;
          }
          goto LABEL_14;
        }
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_1000B88FC@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_10007ABF0(1, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      int v9 = v7;
      uint64_t v10 = v8;
      v4.i32[0] = *(_DWORD *)(result + 32);
      __int16 v11 = *(_WORD *)(result + 36);
      uint64_t v12 = *(unsigned __int8 *)(result + 38);
      swift_bridgeObjectRelease();
      int v13 = sub_1000781B8(v12, v9, v10);
      uint64_t result = (uint64_t)sub_10007AB7C(1, v14, v15);
      if (*(void *)(result + 16))
      {
        char v18 = v16;
        uint64_t v19 = v17;
        __int16 v26 = *(_WORD *)(result + 33);
        char v27 = *(unsigned char *)(result + 32);
        char v20 = *(unsigned char *)(result + 35);
        uint64_t v21 = *(unsigned __int8 *)(result + 36);
        swift_bridgeObjectRelease();
        __int16 v22 = sub_1000781B8(v21, v18, v19);
        uint64_t result = (uint64_t)sub_1000781B8(1, v23, v24);
        if (*(void *)(result + 16))
        {
          char v25 = *(unsigned char *)(result + 32);
          uint64_t result = swift_bridgeObjectRelease();
          *(_DWORD *)a3 = vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0];
          *(_WORD *)(a3 + 4) = v11;
          *(unsigned char *)(a3 + 6) = v12;
          *(void *)(a3 + 8) = v13;
          *(unsigned char *)(a3 + 16) = v27;
          *(_WORD *)(a3 + 17) = v26;
          *(unsigned char *)(a3 + 19) = v20;
          *(unsigned char *)(a3 + 20) = v21;
          *(void *)(a3 + 24) = v22;
          *(unsigned char *)(a3 + 32) = v25;
          return result;
        }
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  return result;
}

void ADC1AssembledFormatTypeIDescriptor.hash(into:)(uint64_t a1, unint64_t a2, Swift::UInt a3, __int16 a4, uint64_t a5)
{
  sub_10004C0B0(a1, a2);
  USBDescriptor.hash(into:)(a1, a3, a4);
  Swift::UInt v9 = *(void *)(a5 + 16);
  Hasher._combine(_:)(v9);
  if (v9)
  {
    uint64_t v10 = (Swift::UInt *)(a5 + 48);
    do
    {
      Swift::UInt v11 = *(v10 - 2);
      Swift::UInt v12 = *(v10 - 1);
      Swift::UInt v13 = *v10;
      v10 += 3;
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      Hasher._combine(_:)(v13);
      --v9;
    }
    while (v9);
  }
}

BOOL static ADC1AssembledFormatTypeIDescriptor.__derived_struct_equals(_:_:)(unint64_t a1, uint64_t a2, __int16 a3, int64x2_t *a4, unint64_t a5, uint64_t a6, __int16 a7, int64x2_t *a8)
{
  if ((sub_100043448(a1, a5) & 1) == 0
    || !_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(a2, a3, a6, a7))
  {
    return 0;
  }

  return sub_1000B5CF4(a4, a8);
}

Swift::Int ADC1AssembledFormatTypeIDescriptor.hashValue.getter(unint64_t a1, Swift::UInt a2, __int16 a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  sub_10004C0B0((uint64_t)v14, a1);
  USBDescriptor.hash(into:)((uint64_t)v14, a2, a3);
  Swift::UInt v8 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    Swift::UInt v9 = (Swift::UInt *)(a4 + 48);
    do
    {
      Swift::UInt v10 = *(v9 - 2);
      Swift::UInt v11 = *(v9 - 1);
      Swift::UInt v12 = *v9;
      v9 += 3;
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      --v8;
    }
    while (v8);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1000B8C74()
{
  return ADC1AssembledFormatTypeIDescriptor.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(_WORD *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000B8C84(uint64_t a1)
{
  ADC1AssembledFormatTypeIDescriptor.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(_WORD *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int sub_1000B8C94()
{
  unint64_t v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 24);
  __int16 v4 = *(_WORD *)(v0 + 16);
  Hasher.init(_seed:)();
  ADC1AssembledFormatTypeIDescriptor.hash(into:)((uint64_t)v6, v1, v2, v4, v3);
  return Hasher._finalize()();
}

BOOL sub_1000B8CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  __int16 v3 = *(unsigned __int8 *)(a1 + 16);
  __int16 v4 = *(unsigned __int8 *)(a1 + 17);
  uint64_t v5 = *(int64x2_t **)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 8);
  __int16 v7 = *(unsigned __int8 *)(a2 + 16);
  __int16 v8 = *(unsigned __int8 *)(a2 + 17);
  Swift::UInt v9 = *(int64x2_t **)(a2 + 24);
  if ((sub_100043448(*(void *)a1, *(void *)a2) & 1) == 0
    || !_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(v2, v3 | (v4 << 8), v6, v7 | (v8 << 8)))
  {
    return 0;
  }

  return sub_1000B5CF4(v5, v9);
}

uint64_t sub_1000B8DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t result = a3(1, a1, a2);
  if (v7) {
    return result;
  }
  unint64_t v16 = *(void *)(result + 16);
  if (!v16) {
    goto LABEL_18;
  }
  Swift::UInt v9 = v14;
  uint64_t v10 = v15;
  uint64_t v31 = *(void *)(result + 32);
  swift_bridgeObjectRelease();
  if (HIBYTE(v31))
  {
    char v30 = a5;
    int v17 = 0;
    __int16 v8 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      char v18 = sub_1000781B8(3, v9, v10);
      unint64_t v16 = *((void *)v18 + 2);
      if (v16 < 3) {
        break;
      }
      Swift::UInt v9 = v19;
      uint64_t v10 = v20;
      uint64_t v21 = v18[34];
      uint64_t v22 = v18[33];
      unint64_t v5 = v18[32];
      swift_bridgeObjectRelease();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10005A77C(0, *((void *)v8 + 2) + 1, 1, v8);
        __int16 v8 = (char *)result;
      }
      unint64_t v6 = *((void *)v8 + 2);
      unint64_t v23 = *((void *)v8 + 3);
      if (v6 >= v23 >> 1)
      {
        uint64_t result = (uint64_t)sub_10005A77C((void *)(v23 > 1), v6 + 1, 1, v8);
        __int16 v8 = (char *)result;
      }
      ++v17;
      *((void *)v8 + 2) = v6 + 1;
      uint64_t v24 = (int64x2_t *)&v8[24 * v6];
      v24[2] = vdupq_n_s64((v21 << 16) | (v22 << 8) | v5);
      v24[3].i64[0] = 0;
      if (v17 == HIBYTE(v31)) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  __int16 v8 = sub_1000781B8(3, v9, v10);
  Swift::UInt v9 = sub_1000781B8(3, v25, v26);
  sub_10002E9F4(0xD00000000000001ELL, 0x80000001000E6A20, 0x656C626D65737361, (void *)0xEC000000293A5F28, 0xD00000000000001FLL, 0x80000001000E6A40, a4);
  unint64_t v16 = *((void *)v8 + 2);
  if (v16 < 3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v10 = v8[34];
  unint64_t v6 = v8[33];
  unint64_t v5 = v8[32];
  swift_bridgeObjectRelease();
  unint64_t v16 = *((void *)v9 + 2);
  if (v16 >= 3)
  {
    char v30 = a5;
    v5 |= (v10 << 16) | (v6 << 8);
    unint64_t v27 = ((unint64_t)v9[34] << 16) | ((unint64_t)v9[33] << 8);
    uint64_t v28 = v9[32];
    swift_bridgeObjectRelease();
    uint64_t v10 = v27 | v28;
    uint64_t result = (uint64_t)sub_10005A77C(0, 1, 1, _swiftEmptyArrayStorage);
    __int16 v8 = (char *)result;
    unint64_t v6 = *(void *)(result + 16);
    unint64_t v16 = *(void *)(result + 24);
    Swift::UInt v9 = (char *)(v6 + 1);
    if (v6 < v16 >> 1) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = (uint64_t)sub_10005A77C((void *)(v16 > 1), (int64_t)v9, 1, v8);
  __int16 v8 = (char *)result;
LABEL_15:
  *((void *)v8 + 2) = v9;
  uint64_t v29 = &v8[24 * v6];
  *((void *)v29 + 4) = v5;
  *((void *)v29 + 5) = v10;
  *((void *)v29 + 6) = 1;
LABEL_16:
  *char v30 = v31;
  v30[1] = v8;
  return result;
}

uint64_t sub_1000B90B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v7 = (unsigned char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v10 = __DataStorage._length.getter();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  Swift::UInt v12 = &v7[v11];
  if (v7) {
    uint64_t v13 = (uint64_t)v12;
  }
  else {
    uint64_t v13 = 0;
  }
  return sub_1000B7F80(v7, v13, a3);
}

unint64_t sub_1000B9154(unsigned char *a1, __int16 a2)
{
  uint64_t v3 = sub_100089F98(a1, a2);
  if (v4 >> 60 == 15) {
LABEL_44:
  }
    __break(1u);
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  switch(v4 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      memset(v34, 0, 14);
      uint64_t v7 = sub_100076460(1, v34, (uint64_t)v34);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_34;
      }
      goto LABEL_42;
    default:
      v34[0] = v3;
      LOWORD(v34[1]) = v4;
      BYTE2(v34[1]) = BYTE2(v4);
      BYTE3(v34[1]) = BYTE3(v4);
      BYTE4(v34[1]) = BYTE4(v4);
      BYTE5(v34[1]) = BYTE5(v4);
      uint64_t v7 = sub_100076460(1, v34, (uint64_t)v34 + BYTE6(v4));
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_34;
      }
      __break(1u);
LABEL_6:
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      BOOL v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v6, v9))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        v8 += (int)v6 - v9;
      }
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v6 >> 32) - (int)v6) {
        uint64_t v11 = (v6 >> 32) - (int)v6;
      }
      else {
        uint64_t v11 = v10;
      }
      Swift::UInt v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = (uint64_t)v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v7 = sub_100076460(1, v8, v13);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (!*((void *)v7 + 2))
      {
        __break(1u);
LABEL_19:
        uint64_t v14 = *(void *)(v6 + 16);
        uint64_t v15 = *(void *)(v6 + 24);
        swift_retain();
        swift_retain();
        unint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
        if (v16)
        {
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v14, v17)) {
            goto LABEL_41;
          }
          v16 += v14 - v17;
        }
        BOOL v18 = __OFSUB__(v15, v14);
        uint64_t v19 = v15 - v14;
        if (!v18)
        {
          uint64_t v20 = __DataStorage._length.getter();
          if (v20 >= v19) {
            uint64_t v21 = v19;
          }
          else {
            uint64_t v21 = v20;
          }
          uint64_t v22 = &v16[v21];
          if (v16) {
            uint64_t v23 = (uint64_t)v22;
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = sub_100076460(1, v16, v23);
          if (v2)
          {
            swift_release();
            swift_release();
            return sub_1000541C0(v6, v5);
          }
          if (*((void *)v24 + 2))
          {
            unsigned int v32 = *((unsigned __int8 *)v24 + 35);
            unsigned int v33 = *((unsigned __int8 *)v24 + 34);
            uint64_t v31 = *((unsigned __int16 *)v24 + 18);
            uint64_t v30 = *((unsigned __int8 *)v24 + 38);
            uint64_t v29 = *((unsigned __int8 *)v24 + 39);
            unsigned int v28 = *((unsigned __int8 *)v24 + 33);
            unsigned int v26 = *((unsigned __int8 *)v24 + 32);
            swift_release();
            swift_release();
            unsigned int v27 = v28;
            goto LABEL_37;
          }
          goto LABEL_43;
        }
        goto LABEL_39;
      }
LABEL_34:
      unsigned int v26 = *((unsigned __int8 *)v7 + 32);
      unsigned int v27 = *((unsigned __int8 *)v7 + 33);
      unsigned int v32 = *((unsigned __int8 *)v7 + 35);
      unsigned int v33 = *((unsigned __int8 *)v7 + 34);
      uint64_t v31 = *((unsigned __int16 *)v7 + 18);
      uint64_t v30 = *((unsigned __int8 *)v7 + 38);
      uint64_t v29 = *((unsigned __int8 *)v7 + 39);
LABEL_37:
      swift_bridgeObjectRelease();
      sub_1000541C0(v6, v5);
      return v26 | ((unint64_t)v27 << 8) | ((unint64_t)v33 << 16) | ((unint64_t)v32 << 24) | (v31 << 32) | (v30 << 48) | (v29 << 56);
  }
}

unint64_t sub_1000B9500(unsigned char *a1, __int16 a2)
{
  uint64_t v3 = sub_100089F98(a1, a2);
  if (v4 >> 60 == 15) {
LABEL_44:
  }
    __break(1u);
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  switch(v4 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      memset(v34, 0, 14);
      uint64_t v7 = sub_1000764C0(1, v34, (uint64_t)v34);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_34;
      }
      goto LABEL_42;
    default:
      v34[0] = v3;
      LOWORD(v34[1]) = v4;
      BYTE2(v34[1]) = BYTE2(v4);
      BYTE3(v34[1]) = BYTE3(v4);
      BYTE4(v34[1]) = BYTE4(v4);
      BYTE5(v34[1]) = BYTE5(v4);
      uint64_t v7 = sub_1000764C0(1, v34, (uint64_t)v34 + BYTE6(v4));
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_34;
      }
      __break(1u);
LABEL_6:
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      BOOL v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v6, v9))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        v8 += (int)v6 - v9;
      }
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v6 >> 32) - (int)v6) {
        uint64_t v11 = (v6 >> 32) - (int)v6;
      }
      else {
        uint64_t v11 = v10;
      }
      Swift::UInt v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = (uint64_t)v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v7 = sub_1000764C0(1, v8, v13);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (!*((void *)v7 + 2))
      {
        __break(1u);
LABEL_19:
        uint64_t v14 = *(void *)(v6 + 16);
        uint64_t v15 = *(void *)(v6 + 24);
        swift_retain();
        swift_retain();
        unint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
        if (v16)
        {
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v14, v17)) {
            goto LABEL_41;
          }
          v16 += v14 - v17;
        }
        BOOL v18 = __OFSUB__(v15, v14);
        uint64_t v19 = v15 - v14;
        if (!v18)
        {
          uint64_t v20 = __DataStorage._length.getter();
          if (v20 >= v19) {
            uint64_t v21 = v19;
          }
          else {
            uint64_t v21 = v20;
          }
          uint64_t v22 = &v16[v21];
          if (v16) {
            uint64_t v23 = (uint64_t)v22;
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = sub_1000764C0(1, v16, v23);
          if (v2)
          {
            swift_release();
            swift_release();
            return sub_1000541C0(v6, v5);
          }
          if (*((void *)v24 + 2))
          {
            unsigned int v29 = *((unsigned __int8 *)v24 + 33);
            unsigned int v32 = *((unsigned __int8 *)v24 + 35);
            unsigned int v33 = *((unsigned __int8 *)v24 + 34);
            uint64_t v31 = *((unsigned __int16 *)v24 + 18);
            uint64_t v30 = *((unsigned __int8 *)v24 + 38);
            uint64_t v28 = *((unsigned __int8 *)v24 + 39);
            unsigned int v26 = *((unsigned __int8 *)v24 + 32);
            swift_release();
            swift_release();
            unsigned int v27 = v29;
            goto LABEL_37;
          }
          goto LABEL_43;
        }
        goto LABEL_39;
      }
LABEL_34:
      unsigned int v26 = *((unsigned __int8 *)v7 + 32);
      unsigned int v27 = *((unsigned __int8 *)v7 + 33);
      unsigned int v32 = *((unsigned __int8 *)v7 + 35);
      unsigned int v33 = *((unsigned __int8 *)v7 + 34);
      uint64_t v31 = *((unsigned __int16 *)v7 + 18);
      uint64_t v30 = *((unsigned __int8 *)v7 + 38);
      uint64_t v28 = *((unsigned __int8 *)v7 + 39);
LABEL_37:
      swift_bridgeObjectRelease();
      sub_1000541C0(v6, v5);
      return v26 | ((unint64_t)v27 << 8) | ((unint64_t)v33 << 16) | ((unint64_t)v32 << 24) | (v31 << 32) | (v30 << 48) | (v28 << 56);
  }
}

uint8x8_t sub_1000B9884@<D0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v4 = a2;
  uint64_t v6 = sub_100089F98(a1, a2);
  if (v7 >> 60 == 15) {
LABEL_42:
  }
    __break(1u);
  unint64_t v8 = v7;
  uint64_t v9 = v6;
  switch(v7 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (v6 >> 32) - (int)v6;
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v13 = __DataStorage._bytes.getter();
      if (v13)
      {
        uint64_t v14 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v9, v14))
        {
          v13 += (int)v9 - v14;
          goto LABEL_8;
        }
        goto LABEL_41;
      }
LABEL_8:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (v9 >> 32) - (int)v9;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = (char *)(v13 + v16);
      if (v13) {
        uint64_t v10 = v17;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = (void *)v13;
LABEL_28:
      sub_1000B7DE0((uint64_t)v11, (uint64_t)v10, (uint64_t)&v47);
      sub_1000541C0(v9, v8);
      if (!v3)
      {
LABEL_29:
        result.i32[0] = (int)v47;
        int16x8_t v39 = (int16x8_t)vmovl_u8(result);
        char v27 = BYTE4(v47);
        uint64_t v28 = v48;
        __int16 v41 = v50;
        char v42 = v49;
        char v40 = v51;
        uint64_t v29 = v52;
        char v30 = v53;
        int64_t v31 = *(void *)(v48 + 16);
        if (v31)
        {
          char v37 = BYTE4(v47);
          uint64_t v38 = v52;
          __int16 v44 = v4;
          uint64_t v47 = _swiftEmptyArrayStorage;
          sub_10007C4BC(0, v31, 0);
          uint64_t v32 = 0;
          unsigned int v33 = v47;
          unint64_t v34 = v47[2];
          do
          {
            uint64_t v35 = *(unsigned __int8 *)(v28 + v32 + 32);
            uint64_t v47 = v33;
            unint64_t v36 = v33[3];
            if (v34 >= v36 >> 1)
            {
              sub_10007C4BC(v36 > 1, v34 + 1, 1);
              unsigned int v33 = v47;
            }
            ++v32;
            void v33[2] = v34 + 1;
            v33[v34++ + 4] = v35;
          }
          while (v31 != v32);
          swift_bridgeObjectRelease();
          __int16 v4 = v44;
          uint64_t v29 = v38;
          char v27 = v37;
        }
        else
        {
          swift_bridgeObjectRelease();
          unsigned int v33 = _swiftEmptyArrayStorage;
        }
        uint8x8_t result = (uint8x8_t)vmovn_s16(v39);
        *(_DWORD *)a3 = result.i32[0];
        *(unsigned char *)(a3 + 4) = v27;
        *(unsigned char *)(a3 + 5) = v42;
        *(_WORD *)(a3 + 6) = v41;
        *(unsigned char *)(a3 + 8) = v40;
        *(void *)(a3 + 16) = a1;
        *(_WORD *)(a3 + 24) = v4;
        *(void *)(a3 + 32) = v33;
        *(void *)(a3 + 40) = v29;
        *(unsigned char *)(a3 + 48) = v30;
      }
      return result;
    case 2uLL:
      __int16 v43 = v4;
      uint64_t v18 = *(void *)(v6 + 16);
      uint64_t v19 = *(void *)(v6 + 24);
      swift_retain();
      swift_retain();
      uint64_t v20 = __DataStorage._bytes.getter();
      if (!v20) {
        goto LABEL_18;
      }
      uint64_t v21 = __DataStorage._offset.getter();
      if (__OFSUB__(v18, v21)) {
        goto LABEL_40;
      }
      v20 += v18 - v21;
LABEL_18:
      if (__OFSUB__(v19, v18)) {
        goto LABEL_39;
      }
      uint64_t v22 = __DataStorage._length.getter();
      if (v22 >= v19 - v18) {
        uint64_t v23 = v19 - v18;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = v20 + v23;
      if (v20) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      sub_1000B7DE0(v20, v25, (uint64_t)&v47);
      swift_release();
      swift_release();
      sub_1000541C0(v9, v8);
      __int16 v4 = v43;
      if (!v3) {
        goto LABEL_29;
      }
      return result;
    case 3uLL:
      memset(v46, 0, 14);
      uint64_t v11 = v46;
      uint64_t v10 = (char *)v46;
      goto LABEL_28;
    default:
      v46[0] = v6;
      LOWORD(v46[1]) = v7;
      BYTE2(v46[1]) = BYTE2(v7);
      BYTE3(v46[1]) = BYTE3(v7);
      BYTE4(v46[1]) = BYTE4(v7);
      BYTE5(v46[1]) = BYTE5(v7);
      uint64_t v10 = (char *)v46 + BYTE6(v7);
      uint64_t v11 = v46;
      goto LABEL_28;
  }
}

uint64_t sub_1000B9C38@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1;
  uint64_t v8 = sub_100089F98(a1, a2);
  if (v9 >> 60 == 15) {
LABEL_65:
  }
    __break(1u);
  unint64_t v10 = v9;
  uint64_t v11 = v8;
  switch(v9 >> 62)
  {
    case 1uLL:
      uint64_t v25 = (v8 >> 32) - (int)v8;
      if (v8 >> 32 < (int)v8)
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      int16x8_t v81 = v6;
      uint64_t v26 = __DataStorage._bytes.getter();
      if (!v26) {
        goto LABEL_11;
      }
      uint64_t v27 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v11, v27)) {
        goto LABEL_55;
      }
      v26 += (int)v11 - v27;
LABEL_11:
      uint64_t v28 = __DataStorage._length.getter();
      if (v28 >= v25) {
        uint64_t v29 = (v11 >> 32) - (int)v11;
      }
      else {
        uint64_t v29 = v28;
      }
      uint64_t v30 = v26 + v29;
      if (v26) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v32 = sub_10007A9D4(1, v26, v31);
      if (v3) {
        return sub_1000541C0(v11, v10);
      }
      if (!*((void *)v32 + 2))
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      uint64_t v35 = v33;
      uint64_t v36 = v34;
      uint64_t v37 = a3;
      v4.i32[0] = *((_DWORD *)v32 + 8);
      uint64_t v38 = v32[36];
      swift_bridgeObjectRelease();
      uint64_t v19 = sub_1000781B8(v38, v35, v36);
      __int16 v41 = sub_1000781B8(1, v39, v40);
      if (!*((void *)v41 + 2))
      {
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      int16x8_t v77 = (int16x8_t)vmovl_u8(v4);
      char v24 = v41[32];
      swift_bridgeObjectRelease();
      sub_1000541C0(v11, v10);
      char v78 = v38;
      a3 = v37;
      uint64_t v6 = v81;
LABEL_46:
      int64_t v70 = *((void *)v19 + 2);
      if (v70)
      {
        char v76 = v24;
        __int16 v83 = v6;
        v84[0] = _swiftEmptyArrayStorage;
        sub_10007C4BC(0, v70, 0);
        uint64_t v71 = 0;
        uint64_t v72 = (void *)v84[0];
        unint64_t v73 = *(void *)(v84[0] + 16);
        do
        {
          uint64_t v74 = v19[v71 + 32];
          v84[0] = v72;
          unint64_t v75 = v72[3];
          if (v73 >= v75 >> 1)
          {
            sub_10007C4BC(v75 > 1, v73 + 1, 1);
            uint64_t v72 = (void *)v84[0];
          }
          ++v71;
          v72[2] = v73 + 1;
          v72[v73++ + 4] = v74;
        }
        while (v70 != v71);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v6 = v83;
        char v24 = v76;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v72 = _swiftEmptyArrayStorage;
      }
      *(_DWORD *)a3 = vmovn_s16(v77).u32[0];
      *(unsigned char *)(a3 + 4) = v78;
      *(void *)(a3 + 8) = v6;
      *(_WORD *)(a3 + 16) = a2;
      *(void *)(a3 + 24) = v72;
      *(unsigned char *)(a3 + 32) = v24;
      return result;
    case 2uLL:
      uint64_t v80 = a3;
      __int16 v82 = v6;
      uint64_t v43 = *(void *)(v8 + 16);
      uint64_t v42 = *(void *)(v8 + 24);
      swift_retain();
      swift_retain();
      uint64_t v44 = __DataStorage._bytes.getter();
      if (v44)
      {
        uint64_t v47 = v44;
        uint64_t v44 = __DataStorage._offset.getter();
        if (__OFSUB__(v43, v44)) {
          goto LABEL_56;
        }
        uint64_t v48 = v47 + v43 - v44;
        uint64_t v49 = v42 - v43;
        if (!__OFSUB__(v42, v43)) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v48 = 0;
        uint64_t v49 = v42 - v43;
        if (!__OFSUB__(v42, v43))
        {
LABEL_24:
          uint64_t v50 = __DataStorage._length.getter();
          if (v50 >= v49) {
            uint64_t v51 = v49;
          }
          else {
            uint64_t v51 = v50;
          }
          uint64_t v52 = v48 + v51;
          if (v48) {
            uint64_t v53 = v52;
          }
          else {
            uint64_t v53 = 0;
          }
          int v54 = sub_10007A9D4(1, v48, v53);
          if (v3)
          {
            swift_release();
            swift_release();
            return sub_1000541C0(v11, v10);
          }
          if (!*((void *)v54 + 2)) {
            goto LABEL_60;
          }
          uint64_t v57 = v55;
          uint64_t v58 = v56;
          v4.i32[0] = *((_DWORD *)v54 + 8);
          uint64_t v43 = v54[36];
          swift_bridgeObjectRelease();
          uint64_t v44 = (uint64_t)sub_1000781B8(v43, v57, v58);
LABEL_41:
          uint64_t v19 = (char *)v44;
          uint64_t v68 = sub_1000781B8(1, v45, v46);
          if (!v3)
          {
            if (*((void *)v68 + 2))
            {
              int16x8_t v77 = (int16x8_t)vmovl_u8(v4);
              char v24 = v68[32];
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              sub_1000541C0(v11, v10);
              char v78 = v43;
              a3 = v80;
              uint64_t v6 = v82;
              goto LABEL_46;
            }
            goto LABEL_64;
          }
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return sub_1000541C0(v11, v10);
        }
      }
      __break(1u);
      goto LABEL_41;
    case 3uLL:
      memset(v84, 0, 14);
      uint64_t v59 = sub_10007A9D4(1, (uint64_t)v84, (uint64_t)v84);
      if (v3) {
        return sub_1000541C0(v11, v10);
      }
      if (!*((void *)v59 + 2)) {
        goto LABEL_58;
      }
      uint64_t v62 = v60;
      uint64_t v63 = v61;
      v4.i32[0] = *((_DWORD *)v59 + 8);
      uint64_t v64 = v59[36];
      swift_bridgeObjectRelease();
      uint64_t v19 = sub_1000781B8(v64, v62, v63);
      uint64_t v67 = sub_1000781B8(1, v65, v66);
      char v78 = v64;
      if (!*((void *)v67 + 2)) {
        goto LABEL_63;
      }
      int16x8_t v77 = (int16x8_t)vmovl_u8(v4);
      char v24 = v67[32];
      swift_bridgeObjectRelease();
      sub_1000541C0(v11, v10);
      goto LABEL_46;
    default:
      uint64_t v12 = v6;
      v84[0] = v8;
      LOWORD(v84[1]) = v9;
      BYTE2(v84[1]) = BYTE2(v9);
      BYTE3(v84[1]) = BYTE3(v9);
      BYTE4(v84[1]) = BYTE4(v9);
      BYTE5(v84[1]) = BYTE5(v9);
      uint64_t v13 = sub_10007A9D4(1, (uint64_t)v84, (uint64_t)v84 + BYTE6(v9));
      if (v3) {
        return sub_1000541C0(v11, v10);
      }
      uint64_t v79 = a3;
      if (!*((void *)v13 + 2)) {
        goto LABEL_57;
      }
      uint64_t v16 = v14;
      uint64_t v17 = v15;
      v4.i32[0] = *((_DWORD *)v13 + 8);
      uint64_t v18 = v13[36];
      swift_bridgeObjectRelease();
      uint64_t v19 = sub_1000781B8(v18, v16, v17);
      uint64_t v22 = sub_1000781B8(1, v20, v21);
      if (!*((void *)v22 + 2)) {
        goto LABEL_61;
      }
      int16x8_t v77 = (int16x8_t)vmovl_u8(v4);
      char v23 = v22[32];
      swift_bridgeObjectRelease();
      sub_1000541C0(v11, v10);
      char v78 = v18;
      a3 = v79;
      uint64_t v6 = v12;
      char v24 = v23;
      goto LABEL_46;
  }
}

uint64_t sub_1000BA220@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  v27[2] = &_swiftEmptySetSingleton;
  uint64_t v8 = sub_100089F98(a1, a2);
  if (v9 >> 60 == 15) {
LABEL_16:
  }
    __break(1u);
  unint64_t v10 = v9;
  uint64_t v11 = v8;
  switch(v9 >> 62)
  {
    case 1uLL:
      uint64_t v8 = (int)v8;
      if (v11 >> 32 < (int)v11)
      {
        __break(1u);
        goto LABEL_16;
      }
      sub_1000B90B0(v8, v11 >> 32, (unint64_t)&v28);
LABEL_9:
      uint64_t v4 = v3;
LABEL_10:
      sub_1000541C0(v11, v10);
      if (v4) {
        return swift_bridgeObjectRelease();
      }
      uint64_t v25 = a1;
      __int16 v26 = a2;
      v15.i32[0] = v28;
      int16x8_t v24 = (int16x8_t)vmovl_u8(v15);
      char v17 = v29;
      char v18 = v30;
      uint64_t v19 = v31;
      char v20 = v32;
      uint64_t v21 = swift_bridgeObjectRetain();
      uint64_t v22 = sub_10005AD1C(v21);
      swift_bridgeObjectRelease();
      uint64_t v23 = v22[2];
      uint64_t result = swift_bridgeObjectRelease();
      if (!v23)
      {
        uint64_t result = swift_release();
        uint64_t v22 = 0;
      }
      *(_DWORD *)a3 = vmovn_s16(v24).u32[0];
      *(unsigned char *)(a3 + 4) = v17;
      *(unsigned char *)(a3 + 5) = v18;
      *(void *)(a3 + 8) = v25;
      *(_WORD *)(a3 + 16) = v26;
      *(void *)(a3 + 24) = v19;
      *(unsigned char *)(a3 + 32) = v20;
      *(void *)(a3 + 40) = v22;
      return result;
    case 2uLL:
      uint64_t v13 = *(void *)(v8 + 16);
      uint64_t v14 = *(void *)(v8 + 24);
      swift_retain();
      swift_retain();
      sub_1000B90B0(v13, v14, (unint64_t)&v28);
      swift_release();
      swift_release();
      goto LABEL_10;
    case 3uLL:
      memset(v27, 0, 14);
      uint64_t v12 = (char *)v27;
      goto LABEL_8;
    default:
      v27[0] = v8;
      LOWORD(v27[1]) = v9;
      BYTE2(v27[1]) = BYTE2(v9);
      BYTE3(v27[1]) = BYTE3(v9);
      BYTE4(v27[1]) = BYTE4(v9);
      BYTE5(v27[1]) = BYTE5(v9);
      uint64_t v12 = (char *)v27 + BYTE6(v9);
LABEL_8:
      sub_1000B7F80(v27, (uint64_t)v12, (unint64_t)&v28);
      goto LABEL_9;
  }
}

uint8x8_t sub_1000BA4CC@<D0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v4 = a2;
  uint64_t v6 = sub_100089F98(a1, a2);
  if (v7 >> 60 == 15) {
LABEL_42:
  }
    __break(1u);
  unint64_t v8 = v7;
  uint64_t v9 = v6;
  switch(v7 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (v6 >> 32) - (int)v6;
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v13 = __DataStorage._bytes.getter();
      if (v13)
      {
        uint64_t v14 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v9, v14))
        {
          v13 += (int)v9 - v14;
          goto LABEL_8;
        }
        goto LABEL_41;
      }
LABEL_8:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (v9 >> 32) - (int)v9;
      }
      else {
        uint64_t v16 = v15;
      }
      char v17 = (char *)(v13 + v16);
      if (v13) {
        unint64_t v10 = v17;
      }
      else {
        unint64_t v10 = 0;
      }
      uint64_t v11 = (unsigned char *)v13;
LABEL_28:
      sub_1000B86DC(v11, (uint64_t)v10, (uint64_t)&v50);
      sub_1000541C0(v9, v8);
      if (!v3)
      {
LABEL_29:
        result.i32[0] = (int)v50;
        int16x8_t v39 = (int16x8_t)vmovl_u8(result);
        char v44 = BYTE6(v50);
        __int16 v45 = WORD2(v50);
        uint64_t v27 = v51;
        __int16 v42 = v53;
        char v43 = v52;
        char v40 = v55;
        char v41 = v54;
        uint64_t v28 = v56;
        char v29 = v57;
        uint64_t v30 = v58;
        int64_t v31 = *(void *)(v51 + 16);
        if (v31)
        {
          uint64_t v37 = v58;
          uint64_t v38 = v56;
          __int16 v47 = v4;
          uint64_t v50 = _swiftEmptyArrayStorage;
          sub_10007C4BC(0, v31, 0);
          uint64_t v32 = 0;
          unsigned int v33 = v50;
          unint64_t v34 = v50[2];
          do
          {
            uint64_t v35 = *(unsigned __int8 *)(v27 + v32 + 32);
            uint64_t v50 = v33;
            unint64_t v36 = v33[3];
            if (v34 >= v36 >> 1)
            {
              sub_10007C4BC(v36 > 1, v34 + 1, 1);
              unsigned int v33 = v50;
            }
            ++v32;
            void v33[2] = v34 + 1;
            v33[v34++ + 4] = v35;
          }
          while (v31 != v32);
          swift_bridgeObjectRelease();
          __int16 v4 = v47;
          uint64_t v28 = v38;
          uint64_t v30 = v37;
        }
        else
        {
          swift_bridgeObjectRelease();
          unsigned int v33 = _swiftEmptyArrayStorage;
        }
        uint8x8_t result = (uint8x8_t)vmovn_s16(v39);
        *(_DWORD *)a3 = result.i32[0];
        *(_WORD *)(a3 + 4) = v45;
        *(unsigned char *)(a3 + 6) = v44;
        *(unsigned char *)(a3 + 7) = v43;
        *(_WORD *)(a3 + 8) = v42;
        *(unsigned char *)(a3 + 10) = v41;
        *(unsigned char *)(a3 + 11) = v40;
        *(void *)(a3 + 16) = a1;
        *(_WORD *)(a3 + 24) = v4;
        *(void *)(a3 + 32) = v33;
        *(void *)(a3 + 40) = v28;
        *(unsigned char *)(a3 + 48) = v29;
        *(void *)(a3 + 56) = v30;
      }
      return result;
    case 2uLL:
      __int16 v46 = v4;
      uint64_t v18 = *(void *)(v6 + 16);
      uint64_t v19 = *(void *)(v6 + 24);
      swift_retain();
      swift_retain();
      char v20 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v20) {
        goto LABEL_18;
      }
      uint64_t v21 = __DataStorage._offset.getter();
      if (__OFSUB__(v18, v21)) {
        goto LABEL_40;
      }
      v20 += v18 - v21;
LABEL_18:
      if (__OFSUB__(v19, v18)) {
        goto LABEL_39;
      }
      uint64_t v22 = __DataStorage._length.getter();
      if (v22 >= v19 - v18) {
        uint64_t v23 = v19 - v18;
      }
      else {
        uint64_t v23 = v22;
      }
      int16x8_t v24 = &v20[v23];
      if (v20) {
        uint64_t v25 = (uint64_t)v24;
      }
      else {
        uint64_t v25 = 0;
      }
      sub_1000B86DC(v20, v25, (uint64_t)&v50);
      swift_release();
      swift_release();
      sub_1000541C0(v9, v8);
      __int16 v4 = v46;
      if (!v3) {
        goto LABEL_29;
      }
      return result;
    case 3uLL:
      memset(v49, 0, 14);
      uint64_t v11 = v49;
      unint64_t v10 = (char *)v49;
      goto LABEL_28;
    default:
      v49[0] = v6;
      LOWORD(v49[1]) = v7;
      BYTE2(v49[1]) = BYTE2(v7);
      BYTE3(v49[1]) = BYTE3(v7);
      BYTE4(v49[1]) = BYTE4(v7);
      BYTE5(v49[1]) = BYTE5(v7);
      unint64_t v10 = (char *)v49 + BYTE6(v7);
      uint64_t v11 = v49;
      goto LABEL_28;
  }
}

uint8x8_t sub_1000BA8B0@<D0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v4 = a2;
  uint64_t v6 = sub_100089F98(a1, a2);
  if (v7 >> 60 == 15) {
LABEL_42:
  }
    __break(1u);
  unint64_t v8 = v7;
  uint64_t v9 = v6;
  switch(v7 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (v6 >> 32) - (int)v6;
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v13 = __DataStorage._bytes.getter();
      if (v13)
      {
        uint64_t v14 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v9, v14))
        {
          v13 += (int)v9 - v14;
          goto LABEL_8;
        }
        goto LABEL_41;
      }
LABEL_8:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (v9 >> 32) - (int)v9;
      }
      else {
        uint64_t v16 = v15;
      }
      char v17 = (char *)(v13 + v16);
      if (v13) {
        unint64_t v10 = v17;
      }
      else {
        unint64_t v10 = 0;
      }
      uint64_t v11 = (unsigned char *)v13;
LABEL_28:
      sub_1000B88FC(v11, (uint64_t)v10, (uint64_t)&v49);
      sub_1000541C0(v9, v8);
      if (!v3)
      {
LABEL_29:
        result.i32[0] = (int)v49;
        int16x8_t v39 = (int16x8_t)vmovl_u8(result);
        __int16 v27 = WORD2(v49);
        uint64_t v28 = v50;
        char v43 = v51;
        char v44 = BYTE6(v49);
        char v41 = v53;
        __int16 v42 = v52;
        char v40 = v54;
        uint64_t v29 = v55;
        char v30 = v56;
        int64_t v31 = *(void *)(v50 + 16);
        if (v31)
        {
          __int16 v37 = WORD2(v49);
          uint64_t v38 = v55;
          __int16 v46 = v4;
          uint64_t v49 = _swiftEmptyArrayStorage;
          sub_10007C4BC(0, v31, 0);
          uint64_t v32 = 0;
          unsigned int v33 = v49;
          unint64_t v34 = v49[2];
          do
          {
            uint64_t v35 = *(unsigned __int8 *)(v28 + v32 + 32);
            uint64_t v49 = v33;
            unint64_t v36 = v33[3];
            if (v34 >= v36 >> 1)
            {
              sub_10007C4BC(v36 > 1, v34 + 1, 1);
              unsigned int v33 = v49;
            }
            ++v32;
            void v33[2] = v34 + 1;
            v33[v34++ + 4] = v35;
          }
          while (v31 != v32);
          swift_bridgeObjectRelease();
          __int16 v4 = v46;
          uint64_t v29 = v38;
          __int16 v27 = v37;
        }
        else
        {
          swift_bridgeObjectRelease();
          unsigned int v33 = _swiftEmptyArrayStorage;
        }
        uint8x8_t result = (uint8x8_t)vmovn_s16(v39);
        *(_DWORD *)a3 = result.i32[0];
        *(_WORD *)(a3 + 4) = v27;
        *(unsigned char *)(a3 + 6) = v44;
        *(unsigned char *)(a3 + 7) = v43;
        *(_WORD *)(a3 + 8) = v42;
        *(unsigned char *)(a3 + 10) = v41;
        *(unsigned char *)(a3 + 11) = v40;
        *(void *)(a3 + 16) = a1;
        *(_WORD *)(a3 + 24) = v4;
        *(void *)(a3 + 32) = v33;
        *(void *)(a3 + 40) = v29;
        *(unsigned char *)(a3 + 48) = v30;
      }
      return result;
    case 2uLL:
      __int16 v45 = v4;
      uint64_t v18 = *(void *)(v6 + 16);
      uint64_t v19 = *(void *)(v6 + 24);
      swift_retain();
      swift_retain();
      char v20 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v20) {
        goto LABEL_18;
      }
      uint64_t v21 = __DataStorage._offset.getter();
      if (__OFSUB__(v18, v21)) {
        goto LABEL_40;
      }
      v20 += v18 - v21;
LABEL_18:
      if (__OFSUB__(v19, v18)) {
        goto LABEL_39;
      }
      uint64_t v22 = __DataStorage._length.getter();
      if (v22 >= v19 - v18) {
        uint64_t v23 = v19 - v18;
      }
      else {
        uint64_t v23 = v22;
      }
      int16x8_t v24 = &v20[v23];
      if (v20) {
        uint64_t v25 = (uint64_t)v24;
      }
      else {
        uint64_t v25 = 0;
      }
      sub_1000B88FC(v20, v25, (uint64_t)&v49);
      swift_release();
      swift_release();
      sub_1000541C0(v9, v8);
      __int16 v4 = v45;
      if (!v3) {
        goto LABEL_29;
      }
      return result;
    case 3uLL:
      memset(v48, 0, 14);
      uint64_t v11 = v48;
      unint64_t v10 = (char *)v48;
      goto LABEL_28;
    default:
      v48[0] = v6;
      LOWORD(v48[1]) = v7;
      BYTE2(v48[1]) = BYTE2(v7);
      BYTE3(v48[1]) = BYTE3(v7);
      BYTE4(v48[1]) = BYTE4(v7);
      BYTE5(v48[1]) = BYTE5(v7);
      unint64_t v10 = (char *)v48 + BYTE6(v7);
      uint64_t v11 = v48;
      goto LABEL_28;
  }
}

uint64_t sub_1000BAC80(unsigned char *a1, __int16 a2)
{
  return sub_1000BB988(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007AC50, 686);
}

uint64_t sub_1000BACE4(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A3E8, type metadata accessor for ADC1ACInterfaceHeaderDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BAD3C()
{
  return sub_1000BB644(&qword_10012A3F0, type metadata accessor for ADC1ACInterfaceHeaderDescriptor);
}

uint64_t sub_1000BAD84(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A3F8, type metadata accessor for ADC1InputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BADDC()
{
  return sub_1000BB644(&qword_10012A400, type metadata accessor for ADC1InputTerminalDescriptor);
}

uint64_t sub_1000BAE24(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A408, type metadata accessor for ADC1OutputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BAE7C()
{
  return sub_1000BB644(&qword_10012A410, type metadata accessor for ADC1OutputTerminalDescriptor);
}

uint64_t sub_1000BAEC4(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A418, type metadata accessor for ADC1MixerUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BAF1C()
{
  return sub_1000BB644(&qword_10012A420, type metadata accessor for ADC1MixerUnitDescriptor);
}

uint64_t sub_1000BAF64(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A428, type metadata accessor for ADC1MixerUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BAFBC()
{
  return sub_1000BB644(&qword_10012A430, type metadata accessor for ADC1MixerUnitDescriptorPart2);
}

uint64_t sub_1000BB004(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A438, type metadata accessor for ADC1SelectorUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BB05C()
{
  return sub_1000BB644(&qword_10012A440, type metadata accessor for ADC1SelectorUnitDescriptor);
}

uint64_t sub_1000BB0A4(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A448, type metadata accessor for ADC1FeatureUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BB0FC()
{
  return sub_1000BB644(&qword_10012A450, type metadata accessor for ADC1FeatureUnitDescriptor);
}

uint64_t sub_1000BB144(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A458, type metadata accessor for ADC1ExtensionUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BB19C()
{
  return sub_1000BB644(&qword_10012A460, type metadata accessor for ADC1ExtensionUnitDescriptor);
}

uint64_t sub_1000BB1E4(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A468, type metadata accessor for ADC1ExtensionUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BB23C()
{
  return sub_1000BB644(&qword_10012A470, type metadata accessor for ADC1ExtensionUnitDescriptorPart2);
}

uint64_t sub_1000BB284(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A478, type metadata accessor for ADC1ProcessingUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BB2DC()
{
  return sub_1000BB644(&qword_10012A480, type metadata accessor for ADC1ProcessingUnitDescriptor);
}

uint64_t sub_1000BB324(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A488, type metadata accessor for ADC1ProcessingUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BB37C()
{
  return sub_1000BB644(&qword_10012A490, type metadata accessor for ADC1ProcessingUnitDescriptorPart2);
}

uint64_t sub_1000BB3C4(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A498, type metadata accessor for ADC1ASInterfaceDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BB41C()
{
  return sub_1000BB644(&qword_10012A4A0, type metadata accessor for ADC1ASInterfaceDescriptor);
}

uint64_t sub_1000BB464(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A4A8, type metadata accessor for ADC1FormatTypeIDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BB4BC()
{
  return sub_1000BB644(&qword_10012A4B0, type metadata accessor for ADC1FormatTypeIDescriptor);
}

uint64_t sub_1000BB504(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A4B8, type metadata accessor for ADC1FormatTypeIIIDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BB55C()
{
  return sub_1000BB644(&qword_10012A4C0, type metadata accessor for ADC1FormatTypeIIIDescriptor);
}

uint64_t sub_1000BB5A4(uint64_t a1)
{
  uint64_t result = sub_1000BB644(&qword_10012A4C8, type metadata accessor for ADC1ASFormatTypeDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BB5FC()
{
  return sub_1000BB644(&qword_10012A4D0, type metadata accessor for ADC1ASFormatTypeDescriptorHeader);
}

uint64_t sub_1000BB644(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000BB68C(uint64_t a1)
{
  unint64_t result = sub_1000BB6B4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000BB6B4()
{
  unint64_t result = qword_10012A4D8;
  if (!qword_10012A4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A4D8);
  }
  return result;
}

unint64_t sub_1000BB70C()
{
  unint64_t result = qword_10012A4E0;
  if (!qword_10012A4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A4E0);
  }
  return result;
}

uint64_t destroy for ADC1AssembledFormatTypeIDescriptor()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ADC1AssembledFormatTypeIDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ADC1AssembledFormatTypeIDescriptor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7) = *(unsigned char *)(a2 + 7);
  uint64_t v3 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ADC1AssembledFormatTypeIDescriptor(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for ADC1AssembledFormatTypeIDescriptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ADC1AssembledFormatTypeIDescriptor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ADC1AssembledFormatTypeIDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ADC1AssembledFormatTypeIDescriptor()
{
  return &type metadata for ADC1AssembledFormatTypeIDescriptor;
}

uint64_t sub_1000BB924(unsigned char *a1, __int16 a2)
{
  return sub_1000BB988(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007AFF0, 750);
}

uint64_t sub_1000BB988(unsigned char *a1, __int16 a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_100089F98(a1, a2);
  if (v8 >> 60 == 15) {
LABEL_36:
  }
    __break(1u);
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v13 = (v7 >> 32) - (int)v7;
      if (v7 >> 32 < (int)v7)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v14 = __DataStorage._bytes.getter();
      if (!v14) {
        goto LABEL_8;
      }
      uint64_t v15 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v10, v15)) {
        goto LABEL_35;
      }
      v14 += (int)v10 - v15;
LABEL_8:
      uint64_t v16 = __DataStorage._length.getter();
      if (v16 >= v13) {
        uint64_t v17 = (v10 >> 32) - (int)v10;
      }
      else {
        uint64_t v17 = v16;
      }
      uint64_t v18 = (char *)(v14 + v17);
      if (v14) {
        uint64_t v11 = v18;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = (void *)v14;
      uint64_t v19 = a3;
      uint64_t v20 = a4;
LABEL_28:
      sub_1000B8DA4((uint64_t)v12, (uint64_t)v11, v19, v20, &v34);
      uint64_t v30 = v4;
LABEL_29:
      uint64_t result = sub_1000541C0(v10, v9);
      if (!v30) {
        return v34;
      }
      return result;
    case 2uLL:
      uint64_t v21 = *(void *)(v7 + 16);
      uint64_t v32 = *(void *)(v7 + 24);
      swift_retain();
      swift_retain();
      uint64_t v22 = __DataStorage._bytes.getter();
      if (!v22) {
        goto LABEL_18;
      }
      uint64_t v23 = __DataStorage._offset.getter();
      if (__OFSUB__(v21, v23)) {
        goto LABEL_34;
      }
      v22 += v21 - v23;
LABEL_18:
      BOOL v24 = __OFSUB__(v32, v21);
      uint64_t v25 = v32 - v21;
      if (v24) {
        goto LABEL_33;
      }
      uint64_t v26 = __DataStorage._length.getter();
      if (v26 >= v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = v22 + v27;
      if (v22) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      sub_1000B8DA4(v22, v29, a3, a4, &v34);
      uint64_t v30 = v4;
      swift_release();
      swift_release();
      goto LABEL_29;
    case 3uLL:
      memset(v33, 0, 14);
      uint64_t v12 = v33;
      uint64_t v11 = (char *)v33;
      goto LABEL_27;
    default:
      v33[0] = v7;
      LOWORD(v33[1]) = v8;
      BYTE2(v33[1]) = BYTE2(v8);
      BYTE3(v33[1]) = BYTE3(v8);
      BYTE4(v33[1]) = BYTE4(v8);
      BYTE5(v33[1]) = BYTE5(v8);
      uint64_t v11 = (char *)v33 + BYTE6(v8);
      uint64_t v12 = v33;
LABEL_27:
      uint64_t v19 = a3;
      uint64_t v20 = a4;
      goto LABEL_28;
  }
}

uint64_t getEnumTagSinglePayload for USBAudioErrata(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE2) {
    goto LABEL_17;
  }
  if (a2 + 30 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 30) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 30;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 30;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 30;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1F;
  int v8 = v6 - 31;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for USBAudioErrata(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 30 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 30) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE1)
  {
    unsigned int v6 = ((a2 - 226) >> 8) + 1;
    *uint64_t result = a2 + 30;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BBD8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 30;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for USBAudioErrata()
{
  return &type metadata for USBAudioErrata;
}

unint64_t sub_1000BBDC8()
{
  unint64_t result = qword_10012A4F0;
  if (!qword_10012A4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A4F0);
  }
  return result;
}

BOOL sub_1000BBE1C(char *a1, char *a2)
{
  return word_1000EE916[*a1] == word_1000EE916[*a2];
}

Swift::Int sub_1000BBE40()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1000EE916[v1]);
  return Hasher._finalize()();
}

void sub_1000BBE90()
{
  Hasher._combine(_:)(word_1000EE916[*v0]);
}

Swift::Int sub_1000BBEC8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1000EE916[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1000BBF14@<X0>(unsigned __int16 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000BCF84(*a1);
  *a2 = result;
  return result;
}

void sub_1000BBF40(_WORD *a1@<X8>)
{
  *a1 = word_1000EE916[*v1];
}

BOOL sub_1000BBF58(char *a1, char *a2)
{
  return word_1000EE95C[*a1] == word_1000EE95C[*a2];
}

Swift::Int sub_1000BBF7C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1000EE95C[v1]);
  return Hasher._finalize()();
}

void sub_1000BBFCC()
{
  Hasher._combine(_:)(word_1000EE95C[*v0]);
}

Swift::Int sub_1000BC004()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1000EE95C[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1000BC050@<X0>(unsigned __int16 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000BD27C(*a1);
  *a2 = result;
  return result;
}

void sub_1000BC07C(_WORD *a1@<X8>)
{
  *a1 = word_1000EE95C[*v1];
}

Swift::Int sub_1000BC094()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1000EE916[v1]);
  Hasher._combine(_:)(word_1000EE95C[v2]);
  return Hasher._finalize()();
}

void sub_1000BC104()
{
  uint64_t v1 = v0[1];
  Hasher._combine(_:)(word_1000EE916[*v0]);
  Hasher._combine(_:)(word_1000EE95C[v1]);
}

Swift::Int sub_1000BC158()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1000EE916[v1]);
  Hasher._combine(_:)(word_1000EE95C[v2]);
  return Hasher._finalize()();
}

BOOL sub_1000BC1C4(char *a1, char *a2)
{
  return word_1000EE916[*a1] == word_1000EE916[*a2] && word_1000EE95C[a1[1]] == word_1000EE95C[a2[1]];
}

uint64_t sub_1000BC210()
{
  sub_10000AC7C(&qword_10012A4F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000EE6C0;
  *(_WORD *)(inited + 32) = 779;
  sub_10000AC7C(&qword_10012A500);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v1 + 32) = -65536;
  *(void *)(v1 + 40) = &off_1001123A8;
  *(void *)(inited + 40) = v1;
  *(_WORD *)(inited + 48) = 7441;
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v2 + 32) = -65536;
  *(void *)(v2 + 40) = &off_1001123D0;
  *(void *)(inited + 56) = v2;
  *(_WORD *)(inited + 64) = 1800;
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v3 + 32) = -65536;
  *(void *)(v3 + 40) = &off_1001123F8;
  *(void *)(inited + 72) = v3;
  *(_WORD *)(inited + 80) = 513;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v4 + 32) = -65536;
  *(void *)(v4 + 40) = &off_100112420;
  *(void *)(inited + 88) = v4;
  *(_WORD *)(inited + 96) = 10263;
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v5 + 32) = -65536;
  *(void *)(v5 + 40) = &off_100112448;
  *(void *)(inited + 104) = v5;
  *(_WORD *)(inited + 112) = 257;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v6 + 32) = -65536;
  *(void *)(v6 + 40) = &off_100112470;
  *(void *)(inited + 120) = v6;
  *(_WORD *)(inited + 128) = 770;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v7 + 32) = -65536;
  *(void *)(v7 + 40) = &off_100112498;
  *(void *)(inited + 136) = v7;
  *(_WORD *)(inited + 144) = 1026;
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v8 + 32) = -65536;
  *(void *)(v8 + 40) = &off_1001124C0;
  *(void *)(inited + 152) = v8;
  *(_WORD *)(inited + 160) = 1283;
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v9 + 32) = -65536;
  *(void *)(v9 + 40) = &off_1001124E8;
  *(void *)(inited + 168) = v9;
  *(_WORD *)(inited + 176) = 1539;
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v10 + 32) = -65536;
  *(void *)(v10 + 40) = &off_100112510;
  *(void *)(inited + 184) = v10;
  *(_WORD *)(inited + 192) = 4620;
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v11 + 32) = -65536;
  *(void *)(v11 + 40) = &off_100112538;
  *(void *)(inited + 200) = v11;
  *(_WORD *)(inited + 208) = 2567;
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v12 + 32) = -65536;
  *(void *)(v12 + 40) = &off_100112560;
  *(void *)(inited + 216) = v12;
  *(_WORD *)(inited + 224) = 2311;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v13 + 32) = -65536;
  *(void *)(v13 + 40) = &off_100112588;
  *(void *)(inited + 232) = v13;
  *(_WORD *)(inited + 240) = 5645;
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v14 + 32) = -65536;
  *(void *)(v14 + 40) = &off_1001125B0;
  *(void *)(inited + 248) = v14;
  *(_WORD *)(inited + 256) = 7186;
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v15 + 32) = -65536;
  *(void *)(v15 + 40) = &off_1001125D8;
  *(void *)(inited + 264) = v15;
  *(_WORD *)(inited + 272) = 5902;
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v16 + 32) = -65536;
  *(void *)(v16 + 40) = &off_100112600;
  *(void *)(inited + 280) = v16;
  *(_WORD *)(inited + 288) = 7699;
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v17 + 32) = -65536;
  *(void *)(v17 + 40) = &off_100112628;
  *(void *)(inited + 296) = v17;
  *(_WORD *)(inited + 304) = 7956;
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v18 + 32) = -65536;
  *(void *)(v18 + 40) = &off_100112650;
  *(void *)(inited + 312) = v18;
  *(_WORD *)(inited + 320) = 8212;
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v19 + 32) = -65536;
  *(void *)(v19 + 40) = &off_100112678;
  *(void *)(inited + 328) = v19;
  *(_WORD *)(inited + 336) = 12549;
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v20 + 32) = -65536;
  *(void *)(v20 + 40) = &off_1001126A0;
  *(void *)(inited + 344) = v20;
  *(_WORD *)(inited + 352) = 13084;
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v21 + 32) = -65536;
  *(void *)(v21 + 40) = &off_1001126C8;
  *(void *)(inited + 360) = v21;
  *(_WORD *)(inited + 368) = 2054;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v22 + 32) = -65536;
  *(void *)(v22 + 40) = &off_1001126F0;
  *(void *)(inited + 376) = v22;
  *(_WORD *)(inited + 384) = 3339;
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v23 + 32) = -65536;
  *(void *)(v23 + 40) = &off_100112718;
  *(void *)(inited + 392) = v23;
  *(_WORD *)(inited + 400) = 3596;
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v24 + 32) = -65536;
  *(void *)(v24 + 40) = &off_100112740;
  *(void *)(inited + 408) = v24;
  *(_WORD *)(inited + 416) = 3852;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v25 + 32) = -65536;
  *(void *)(v25 + 40) = &off_100112768;
  *(void *)(inited + 424) = v25;
  *(_WORD *)(inited + 432) = 4108;
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v26 + 32) = -65536;
  *(void *)(v26 + 40) = &off_100112790;
  *(void *)(inited + 440) = v26;
  *(_WORD *)(inited + 448) = 4364;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v27 + 32) = -65536;
  *(void *)(v27 + 40) = &off_1001127B8;
  *(void *)(inited + 456) = v27;
  *(_WORD *)(inited + 464) = 4876;
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v28 + 32) = -65536;
  *(void *)(v28 + 40) = &off_1001127E0;
  *(void *)(inited + 472) = v28;
  *(_WORD *)(inited + 480) = 5132;
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v29 + 32) = -65536;
  *(void *)(v29 + 40) = &off_100112808;
  *(void *)(inited + 488) = v29;
  *(_WORD *)(inited + 496) = 5388;
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v30 + 32) = -65536;
  *(void *)(v30 + 40) = &off_100112830;
  *(void *)(inited + 504) = v30;
  *(_WORD *)(inited + 512) = 6416;
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v31 + 32) = -65536;
  *(void *)(v31 + 40) = &off_100112858;
  *(void *)(inited + 520) = v31;
  *(_WORD *)(inited + 528) = 6929;
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v32 + 32) = -65536;
  *(void *)(v32 + 40) = &off_100112880;
  *(void *)(inited + 536) = v32;
  *(_WORD *)(inited + 544) = 8452;
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v33 + 32) = -65536;
  *(void *)(v33 + 40) = &off_1001128A8;
  *(void *)(inited + 552) = v33;
  *(_WORD *)(inited + 560) = 8981;
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v34 + 32) = -65536;
  *(void *)(v34 + 40) = &off_1001128D0;
  *(void *)(inited + 568) = v34;
  *(_WORD *)(inited + 576) = 9480;
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1000EA840;
  *(_DWORD *)(v35 + 32) = 0;
  *(void *)(v35 + 40) = &off_1001128F8;
  *(_DWORD *)(v35 + 48) = -65536;
  *(void *)(v35 + 56) = &off_100112920;
  *(void *)(inited + 584) = v35;
  *(_WORD *)(inited + 592) = 9992;
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v36 + 32) = -65536;
  *(void *)(v36 + 40) = &off_100112948;
  *(void *)(inited + 600) = v36;
  *(_WORD *)(inited + 608) = 9736;
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v37 + 32) = -65536;
  *(void *)(v37 + 40) = &off_100112970;
  *(void *)(inited + 616) = v37;
  *(_WORD *)(inited + 624) = 11289;
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v38 + 32) = -65536;
  *(void *)(v38 + 40) = &off_100112998;
  *(void *)(inited + 632) = v38;
  *(_WORD *)(inited + 640) = 11546;
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v39 + 32) = -65536;
  *(void *)(v39 + 40) = &off_1001129C0;
  *(void *)(inited + 648) = v39;
  *(_WORD *)(inited + 656) = 10520;
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v40 + 32) = -65536;
  *(void *)(v40 + 40) = &off_1001129E8;
  *(void *)(inited + 664) = v40;
  *(_WORD *)(inited + 672) = 10776;
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v41 + 32) = -65536;
  *(void *)(v41 + 40) = &off_100112A10;
  *(void *)(inited + 680) = v41;
  *(_WORD *)(inited + 688) = 11032;
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_1000E8090;
  *(_DWORD *)(v42 + 32) = -65536;
  *(void *)(v42 + 40) = &off_100112A38;
  *(void *)(inited + 696) = v42;
  *(_WORD *)(inited + 704) = 11803;
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1000E8090;
  *(_WORD *)(v43 + 32) = 0;
  *(_WORD *)(v43 + 34) = -1;
  *(void *)(v43 + 40) = &off_100112A60;
  *(void *)(inited + 712) = v43;
  *(_WORD *)(inited + 720) = 12059;
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_1000E8090;
  *(_WORD *)(v44 + 32) = 0;
  *(_WORD *)(v44 + 34) = -1;
  *(void *)(v44 + 40) = &off_100112A88;
  *(void *)(inited + 728) = v44;
  *(_WORD *)(inited + 736) = 9233;
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_1000E8090;
  *(_WORD *)(v45 + 32) = 0;
  *(_WORD *)(v45 + 34) = -1;
  *(void *)(v45 + 40) = &off_100112AB0;
  *(void *)(inited + 744) = v45;
  *(_WORD *)(inited + 752) = 12827;
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1000E8090;
  *(_WORD *)(v46 + 32) = 0;
  *(_WORD *)(v46 + 34) = -1;
  *(void *)(v46 + 40) = &off_100112AD8;
  *(void *)(inited + 760) = v46;
  *(_WORD *)(inited + 768) = 12296;
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1000E8090;
  *(_WORD *)(v47 + 32) = 0;
  *(_WORD *)(v47 + 34) = -1;
  *(void *)(v47 + 40) = &off_100112B00;
  *(void *)(inited + 776) = v47;
  *(_WORD *)(inited + 784) = 13341;
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_1000E8090;
  *(_WORD *)(v48 + 32) = 0;
  *(_WORD *)(v48 + 34) = -1;
  *(void *)(v48 + 40) = &off_100112B28;
  *(void *)(inited + 792) = v48;
  *(_WORD *)(inited + 800) = 13592;
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_1000E8090;
  *(_WORD *)(v49 + 32) = 0;
  *(_WORD *)(v49 + 34) = -1;
  *(void *)(v49 + 40) = &off_100112B50;
  *(void *)(inited + 808) = v49;
  *(_WORD *)(inited + 816) = 13854;
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_1000E8090;
  *(_WORD *)(v50 + 32) = 0;
  *(_WORD *)(v50 + 34) = -1;
  *(void *)(v50 + 40) = &off_100112B78;
  *(void *)(inited + 824) = v50;
  *(_WORD *)(inited + 832) = 14111;
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_1000E8090;
  *(_WORD *)(v51 + 32) = 0;
  *(_WORD *)(v51 + 34) = -1;
  *(void *)(v51 + 40) = &off_100112BA0;
  *(void *)(inited + 840) = v51;
  *(_WORD *)(inited + 848) = 14368;
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1000E8090;
  *(_WORD *)(v52 + 32) = 0;
  *(_WORD *)(v52 + 34) = -1;
  *(void *)(v52 + 40) = &off_100112BC8;
  *(void *)(inited + 856) = v52;
  *(_WORD *)(inited + 864) = 14882;
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_1000E8090;
  *(_WORD *)(v53 + 32) = 0;
  *(_WORD *)(v53 + 34) = -1;
  *(void *)(v53 + 40) = &off_100112BF0;
  *(void *)(inited + 872) = v53;
  *(_WORD *)(inited + 880) = 14625;
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_1000E8090;
  *(_WORD *)(v54 + 32) = 0;
  *(_WORD *)(v54 + 34) = -1;
  *(void *)(v54 + 40) = &off_100112C18;
  *(void *)(inited + 888) = v54;
  *(_WORD *)(inited + 896) = 15137;
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_1000E8090;
  *(_WORD *)(v55 + 32) = 0;
  *(_WORD *)(v55 + 34) = -1;
  *(void *)(v55 + 40) = &off_100112C40;
  *(void *)(inited + 904) = v55;
  *(_WORD *)(inited + 912) = 15393;
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_1000E8090;
  *(_WORD *)(v56 + 32) = 0;
  *(_WORD *)(v56 + 34) = -1;
  *(void *)(v56 + 40) = &off_100112C68;
  *(void *)(inited + 920) = v56;
  *(_WORD *)(inited + 928) = 15649;
  uint64_t v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_1000E8090;
  *(_WORD *)(v57 + 32) = 0;
  *(_WORD *)(v57 + 34) = -1;
  *(void *)(v57 + 40) = &off_100112C90;
  *(void *)(inited + 936) = v57;
  *(_WORD *)(inited + 944) = 15880;
  uint64_t v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = xmmword_1000E8090;
  *(_WORD *)(v58 + 32) = 0;
  *(_WORD *)(v58 + 34) = -1;
  *(void *)(v58 + 40) = &off_100112CB8;
  *(void *)(inited + 952) = v58;
  *(_WORD *)(inited + 960) = 16136;
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_1000E8090;
  *(_WORD *)(v59 + 32) = 0;
  *(_WORD *)(v59 + 34) = -1;
  *(void *)(v59 + 40) = &off_100112CE0;
  *(void *)(inited + 968) = v59;
  *(_WORD *)(inited + 976) = 2825;
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_1000E8090;
  *(_WORD *)(v60 + 32) = 0;
  *(_WORD *)(v60 + 34) = -1;
  *(void *)(v60 + 40) = &off_100112D08;
  *(void *)(inited + 984) = v60;
  *(_WORD *)(inited + 992) = 16388;
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_1000E8090;
  *(_WORD *)(v61 + 32) = 0;
  *(_WORD *)(v61 + 34) = -1;
  *(void *)(v61 + 40) = &off_100112D30;
  *(void *)(inited + 1000) = v61;
  unint64_t v62 = sub_10000D05C(inited);
  swift_setDeallocating();
  sub_10000AC7C(&qword_10012A508);
  uint64_t result = swift_arrayDestroy();
  qword_10012B2A0 = v62;
  return result;
}

uint64_t sub_1000BCF84(unsigned __int16 a1)
{
  if (a1 <= 0x869u)
  {
    if (a1 <= 0x581u)
    {
      if (a1 > 0x47Eu)
      {
        if (a1 > 0x4E7u)
        {
          if (a1 == 1256) {
            return 29;
          }
          if (a1 == 1378) {
            return 6;
          }
        }
        else
        {
          if (a1 == 1151) {
            return 5;
          }
          if (a1 == 1177) {
            return 20;
          }
        }
      }
      else if (a1 > 0x43Du)
      {
        if (a1 == 1086) {
          return 33;
        }
        if (a1 == 1133) {
          return 4;
        }
      }
      else
      {
        if (!a1) {
          return 0;
        }
        if (a1 == 1054) {
          return 19;
        }
      }
    }
    else if (a1 <= 0x6E5u)
    {
      if (a1 > 0x5ABu)
      {
        if (a1 == 1452) {
          return 8;
        }
        if (a1 == 1532) {
          return 9;
        }
      }
      else
      {
        if (a1 == 1410) {
          return 12;
        }
        if (a1 == 1447) {
          return 14;
        }
      }
    }
    else if (a1 <= 0x74Cu)
    {
      if (a1 == 1766) {
        return 10;
      }
      if (a1 == 1862) {
        return 7;
      }
    }
    else
    {
      switch(a1)
      {
        case 0x74Du:
          return 15;
        case 0x763u:
          return 1;
        case 0x7FDu:
          return 22;
      }
    }
  }
  else if (a1 > 0x1531u)
  {
    if (a1 <= 0x1962u)
    {
      if (a1 > 0x170Cu)
      {
        if (a1 == 5901) {
          return 25;
        }
        if (a1 == 6479) {
          return 11;
        }
      }
      else
      {
        if (a1 == 5426) {
          return 18;
        }
        if (a1 == 5454) {
          return 21;
        }
      }
    }
    else if (a1 <= 0x2919u)
    {
      if (a1 == 6499) {
        return 32;
      }
      if (a1 == 8628) {
        return 24;
      }
    }
    else
    {
      switch(a1)
      {
        case 0x291Au:
          return 26;
        case 0x2E1Au:
          return 31;
        case 0x328Fu:
          return 34;
      }
    }
  }
  else if (a1 <= 0xFD8u)
  {
    if (a1 > 0x943u)
    {
      if (a1 == 2372) {
        return 16;
      }
      if (a1 == 3168) {
        return 17;
      }
    }
    else
    {
      if (a1 == 2154) {
        return 2;
      }
      if (a1 == 2276) {
        return 23;
      }
    }
  }
  else if (a1 <= 0x13B1u)
  {
    if (a1 == 4057) {
      return 30;
    }
    if (a1 == 4661) {
      return 28;
    }
  }
  else
  {
    switch(a1)
    {
      case 0x13B2u:
        return 3;
      case 0x1460u:
        return 13;
      case 0x14EDu:
        return 27;
    }
  }
  return 35;
}

uint64_t sub_1000BD27C(unsigned __int16 a1)
{
  if (a1 <= 0x856u)
  {
    if (a1 > 0xE6u)
    {
      if (a1 > 0x300u)
      {
        if (a1 > 0x501u)
        {
          switch(a1)
          {
            case 0x502u:
              return 28;
            case 0x547u:
              return 44;
            case 0x601u:
              return 34;
          }
        }
        else
        {
          switch(a1)
          {
            case 0x301u:
              return 13;
            case 0x320u:
              return 8;
            case 0x401u:
              return 11;
          }
        }
      }
      else if (a1 > 0x14Cu)
      {
        switch(a1)
        {
          case 0x14Du:
            return 40;
          case 0x243u:
            return 53;
          case 0x300u:
            return 25;
        }
      }
      else
      {
        switch(a1)
        {
          case 0xE7u:
            return 15;
          case 0x103u:
            return 3;
          case 0x111u:
            return 4;
        }
      }
      return 65;
    }
    switch(a1)
    {
      case 0u:
        uint64_t result = 0;
        break;
      case 3u:
        uint64_t result = 26;
        break;
      case 6u:
        uint64_t result = 17;
        break;
      case 8u:
        uint64_t result = 5;
        break;
      case 0xAu:
        uint64_t result = 6;
        break;
      case 0x10u:
        uint64_t result = 29;
        break;
      case 0x17u:
        uint64_t result = 36;
        break;
      case 0x19u:
        uint64_t result = 16;
        break;
      case 0x1Au:
        uint64_t result = 18;
        break;
      case 0x1Fu:
        uint64_t result = 27;
        break;
      case 0x51u:
        uint64_t result = 21;
        break;
      case 0x5Cu:
        uint64_t result = 56;
        break;
      case 0x6Du:
        uint64_t result = 58;
        break;
      case 0x70u:
        uint64_t result = 54;
        break;
      case 0x73u:
        uint64_t result = 20;
        break;
      case 0x81u:
        uint64_t result = 41;
        break;
      case 0x82u:
        uint64_t result = 42;
        break;
      case 0x83u:
        uint64_t result = 43;
        break;
      case 0x97u:
        uint64_t result = 14;
        break;
      case 0xA4u:
        uint64_t result = 19;
        break;
      default:
        return 65;
    }
  }
  else if (a1 > 0x3004u)
  {
    if (a1 <= 0x9A41u)
    {
      if (a1 > 0x4C00u)
      {
        if (a1 > 0x8177u)
        {
          if (a1 == 33144) {
            return 45;
          }
          if (a1 == 33292) {
            return 51;
          }
        }
        else
        {
          if (a1 == 19457) {
            return 55;
          }
          if (a1 == 21778) {
            return 10;
          }
        }
      }
      else if (a1 > 0x3285u)
      {
        if (a1 == 12934) {
          return 22;
        }
        if (a1 == 13074) {
          return 9;
        }
      }
      else
      {
        if (a1 == 12293) {
          return 35;
        }
        if (a1 == 12858) {
          return 30;
        }
      }
      return 65;
    }
    if (a1 > 0xA050u)
    {
      if (a1 > 0xC008u)
      {
        if (a1 == 49161) {
          return 49;
        }
        if (a1 == 49664) {
          return 12;
        }
      }
      else
      {
        if (a1 == 41041) {
          return 52;
        }
        if (a1 == 42257) {
          return 24;
        }
      }
      return 65;
    }
    switch(a1)
    {
      case 0x9A42u:
        uint64_t result = 59;
        break;
      case 0x9A4Bu:
        uint64_t result = 60;
        break;
      case 0x9A64u:
        uint64_t result = 61;
        break;
      case 0x9A66u:
        uint64_t result = 57;
        break;
      default:
        return 65;
    }
  }
  else
  {
    if (a1 > 0x170Bu)
    {
      if (a1 <= 0x1867u)
      {
        switch(a1)
        {
          case 0x170Cu:
            return 32;
          case 0x1710u:
            return 39;
          case 0x1711u:
            return 31;
        }
      }
      else if (a1 > 0x2011u)
      {
        if (a1 == 8210) {
          return 2;
        }
        if (a1 == 10514) {
          return 7;
        }
      }
      else
      {
        if (a1 == 6248) {
          return 23;
        }
        if (a1 == 8207) {
          return 1;
        }
      }
      return 65;
    }
    if (a1 <= 0x1001u)
    {
      switch(a1)
      {
        case 0x857u:
          return 33;
        case 0xA37u:
          return 64;
        case 0x1000u:
          return 47;
      }
      return 65;
    }
    switch(a1)
    {
      case 0x1105u:
        return 62;
      case 0x1106u:
      case 0x1108u:
      case 0x1109u:
      case 0x110Cu:
      case 0x110Du:
      case 0x110Eu:
      case 0x110Fu:
      case 0x1110u:
      case 0x1111u:
      case 0x1112u:
      case 0x1113u:
        return 65;
      case 0x1107u:
        return 63;
      case 0x110Au:
        return 37;
      case 0x110Bu:
        return 38;
      case 0x1114u:
        return 48;
      default:
        if (a1 == 8455)
        {
          uint64_t result = 46;
        }
        else
        {
          if (a1 != 8457) {
            return 65;
          }
          uint64_t result = 50;
        }
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ErrataKey(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDE) {
    goto LABEL_17;
  }
  if (a2 + 65314 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65314 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65314;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65314;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65314;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 0x23;
  int v8 = v6 - 35;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ErrataKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65314 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65314 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDD)
  {
    unsigned int v6 = ((a2 - 222) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 222;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BDC04);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 34;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ErrataKey()
{
  return &type metadata for ErrataKey;
}

unint64_t sub_1000BDC40()
{
  unint64_t result = qword_10012A510;
  if (!qword_10012A510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A510);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ProductID(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xC0) {
    goto LABEL_17;
  }
  if (a2 + 64 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 64) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 64;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 64;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 64;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x41;
  int v8 = v6 - 65;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ProductID(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 64 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 64) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xC0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xBF)
  {
    unsigned int v6 = ((a2 - 192) >> 8) + 1;
    *unint64_t result = a2 + 64;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BDDF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 64;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProductID()
{
  return &type metadata for ProductID;
}

uint64_t getEnumTagSinglePayload for VendorID(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDE) {
    goto LABEL_17;
  }
  if (a2 + 34 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 34) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 34;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 34;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 34;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x23;
  int v8 = v6 - 35;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for VendorID(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 34 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 34) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDD)
  {
    unsigned int v6 = ((a2 - 222) >> 8) + 1;
    *unint64_t result = a2 + 34;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BDF84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 34;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VendorID()
{
  return &type metadata for VendorID;
}

unint64_t sub_1000BDFC0()
{
  unint64_t result = qword_10012A518;
  if (!qword_10012A518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A518);
  }
  return result;
}

unint64_t sub_1000BE018()
{
  unint64_t result = qword_10012A520;
  if (!qword_10012A520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A520);
  }
  return result;
}

uint64_t OutputTerminal.nameStringIndex.getter()
{
  return *(unsigned __int16 *)(v0 + 32) | (*(unsigned __int8 *)(v0 + 34) << 16);
}

uint64_t InputTerminal.usbDescriptor.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t InputTerminal.controls.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t InputTerminal.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 96) = a1;
  return result;
}

uint64_t (*InputTerminal.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t InputTerminal.clusterDescription(altSetting:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 64);
  unint64_t v3 = *(void *)(v2 + 16);
  if (v3 == 1) {
    return *(void *)(v2 + 32);
  }
  if (!(_BYTE)result)
  {
    if (!v3)
    {
      __break(1u);
      return result;
    }
    return *(void *)(v2 + 32);
  }
  if (v3 >= result) {
    return *(void *)(v2 + 12 * result + 20);
  }
  sub_10002E81C(0xD000000000000018, 0x80000001000E6A60, 0xD00000000000001FLL, (void *)0x80000001000E6A80, 0xD000000000000016, 0x80000001000E6AA0, 185);
  return 0;
}

uint64_t InputTerminal.clusterDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if (*(void *)(v1 + 16)) {
    return *(void *)(v1 + 32);
  }
  __break(1u);
  return result;
}

uint64_t InputTerminal.activate(onDevice:controlInterface:addLatencyControl:)@<X0>(void *a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  sub_1000C14B4((uint64_t)v54);
  uint64_t v35 = v54[0];
  uint64_t v37 = v54[1];
  int v6 = v57;
  uint64_t v43 = v56;
  uint64_t v46 = v58;
  unint64_t v7 = v60;
  uint64_t v49 = v59;
  char v51 = v55;
  uint64_t v9 = v61;
  uint64_t v8 = v62;
  unint64_t v11 = v63;
  uint64_t v10 = v64;
  uint64_t v12 = v65;
  sub_10005415C((uint64_t)v54, (uint64_t)v66, &qword_1001290F8);
  uint64_t v34 = a4;
  if (v67)
  {
    unint64_t v13 = v7 >> 8;
    char v14 = a3;
    uint64_t v16 = v46;
    uint64_t v15 = v49;
    uint64_t v17 = v43;
    char v18 = v51;
    uint64_t v19 = v35;
    uint64_t v20 = v37;
  }
  else
  {
    uint64_t v10 = *(void *)(v4 + 88);
    uint64_t v12 = *(void *)(v4 + 96);
    unint64_t v11 = *(void *)(v4 + 80);
    LOBYTE(v7) = *(unsigned char *)(v4 + 56);
    char v36 = *(unsigned char *)(v4 + 57);
    uint64_t v38 = *(void *)(v4 + 64);
    uint64_t v50 = *(void *)(v4 + 48);
    uint64_t v52 = *(void *)(v4 + 72);
    int v6 = *(unsigned __int16 *)(v4 + 32) | (*(unsigned __int8 *)(v4 + 34) << 16);
    uint64_t v44 = *(void *)(v4 + 24);
    uint64_t v47 = *(void *)(v4 + 40);
    char v21 = *(unsigned char *)(v4 + 16);
    uint64_t v22 = *(void *)v4;
    uint64_t v20 = *(void *)(v4 + 8);
    sub_100054090(v4);
    uint64_t v19 = v22;
    char v18 = v21;
    uint64_t v17 = v44;
    uint64_t v16 = v47;
    uint64_t v15 = v50;
    uint64_t v8 = v52;
    LOBYTE(v13) = v36;
    uint64_t v9 = v38;
    char v14 = a3;
  }
  v69[0] = v19;
  v69[1] = v20;
  char v70 = v18;
  uint64_t v71 = v17;
  __int16 v72 = v6;
  char v73 = BYTE2(v6);
  uint64_t v74 = v16;
  uint64_t v75 = v15;
  char v76 = v7;
  char v77 = v13;
  uint64_t v78 = v9;
  uint64_t v79 = v8;
  unint64_t v80 = v11;
  uint64_t v81 = v10;
  uint64_t v82 = v12;
  uint64_t v53 = v8;
  if (v14)
  {
    sub_1000C1AB4((uint64_t *)(v4 + 48), (uint64_t)v68);
    sub_1000C1AB4(v68, (uint64_t)v83);
    uint64_t v24 = a1;
    uint64_t v23 = v41;
    if (v83[9] == 33)
    {
      sub_10000AC7C(&qword_100128E78);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_1000E8090;
      *(unsigned char *)(v25 + 34) = -62;
      *(_WORD *)(v25 + 32) = 1920;
    }
    else
    {
      uint64_t v25 = 0;
    }
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v24 = a1;
    uint64_t v23 = v41;
  }
  id v26 = v24;
  sub_100035ECC(a2);
  uint64_t v27 = swift_bridgeObjectRetain();
  uint64_t v48 = sub_1000C1800(v27, (uint64_t)v26, (uint64_t)a2);
  sub_100035FC8(a2);
  if (v23)
  {
    swift_bridgeObjectRelease();

    sub_1000541C0(v8, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();

    if (*(void *)(v4 + 88)) {
      uint64_t v29 = *(void **)(v4 + 88);
    }
    else {
      uint64_t v29 = _swiftEmptyArrayStorage;
    }
    if (v25) {
      uint64_t v30 = (void *)v25;
    }
    else {
      uint64_t v30 = _swiftEmptyArrayStorage;
    }
    __int16 v84 = v29;
    swift_bridgeObjectRetain();
    sub_1000A1FD8((uint64_t)v30);
    uint64_t v45 = (uint64_t)v84;
    uint64_t active = type metadata accessor for ActiveInputTerminal();
    swift_allocObject();
    uint64_t v32 = (char *)v26;
    swift_bridgeObjectRetain();
    sub_1000540F0(v53, v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_1000A0114(v32, (uint64_t)v69, (uint64_t)v48, v45);
    v34[3] = active;
    v34[4] = (uint64_t)&protocol witness table for ActiveInputTerminal;
    swift_bridgeObjectRelease();
    sub_1000541C0(v53, v11);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v34 = v33;
  }
  return result;
}

Swift::Int InputTerminal.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_1000BE548@<X0>(void *a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  return InputTerminal.activate(onDevice:controlInterface:addLatencyControl:)(a1, a2, a3, a4);
}

Swift::Int sub_1000BE594()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InputTerminal()
{
  return sub_10004DCA4();
}

Swift::Int sub_1000BE648()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InputTerminal(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  void v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  uint64_t v12 = *(void *)(a1 + 96);
  long long v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  void v11[3] = v4;
  long long v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 96);
  void v13[4] = v8;
  v13[5] = v9;
  void v13[2] = v6;
  _OWORD v13[3] = v7;
  return sub_1000457F8((uint64_t)v11, (uint64_t)v13) & 1;
}

uint64_t OutputTerminal.sourceID.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t OutputTerminal.usbDescriptor.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t (*OutputTerminal.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t OutputTerminal.clusterDescription(altSetting:)()
{
  return 0;
}

void OutputTerminal.clusterDescription.getter()
{
}

uint64_t OutputTerminal.activate(onDevice:controlInterface:addLatencyControl:)@<X0>(void *a1@<X0>, char a2@<W2>, uint64_t *a3@<X8>)
{
  sub_1000C1B10(v36);
  uint64_t v5 = v36[0];
  uint64_t v4 = v36[1];
  uint64_t v6 = v38;
  int v7 = v39;
  uint64_t v26 = v40;
  char v28 = v37;
  char v9 = v41;
  uint64_t v8 = v42;
  uint64_t v10 = v44;
  uint64_t v33 = v43;
  unint64_t v11 = v45;
  uint64_t v12 = v46;
  sub_10005415C((uint64_t)v36, (uint64_t)v47, &qword_10012A528);
  if (v48 == 1)
  {
    uint64_t v27 = *(void *)(v3 + 72);
    uint64_t v29 = *(void *)(v3 + 88);
    LOBYTE(v11) = *(unsigned char *)(v3 + 80);
    char v25 = *(unsigned char *)(v3 + 81);
    uint64_t v8 = *(void *)(v3 + 56);
    uint64_t v34 = *(void *)(v3 + 64);
    uint64_t v13 = *(void *)(v3 + 40);
    char v14 = *(unsigned char *)(v3 + 48);
    int v7 = *(unsigned __int16 *)(v3 + 32) | (*(unsigned __int8 *)(v3 + 34) << 16);
    uint64_t v6 = *(void *)(v3 + 24);
    char v15 = *(unsigned char *)(v3 + 16);
    uint64_t v5 = *(void *)v3;
    uint64_t v4 = *(void *)(v3 + 8);
    sub_100053FF8(v3);
    char v16 = v14;
    LOBYTE(v17) = v25;
    uint64_t v10 = v27;
    char v18 = v15;
    uint64_t v19 = v34;
    uint64_t v12 = v29;
    char v20 = a2;
  }
  else
  {
    char v16 = v9 & 1;
    unint64_t v17 = v11 >> 8;
    char v20 = a2;
    uint64_t v19 = v33;
    uint64_t v13 = v26;
    char v18 = v28;
  }
  v50[0] = v5;
  v50[1] = v4;
  char v51 = v18;
  uint64_t v52 = v6;
  __int16 v53 = v7;
  char v54 = BYTE2(v7);
  uint64_t v55 = v13;
  char v56 = v16;
  uint64_t v57 = v8;
  uint64_t v58 = v19;
  uint64_t v59 = v10;
  char v60 = v11;
  char v61 = v17;
  uint64_t v62 = v12;
  if ((v20 & 1) != 0
    && (sub_1000C1AB4((uint64_t *)(v3 + 72), (uint64_t)v49), sub_1000C1AB4(v49, (uint64_t)v63), v63[9] == 34))
  {
    sub_10000AC7C(&qword_100128E78);
    char v21 = (void *)swift_allocObject();
    *((_OWORD *)v21 + 1) = xmmword_1000E8090;
    *((unsigned char *)v21 + 34) = -62;
    *((_WORD *)v21 + 16) = 1920;
    uint64_t v22 = _swiftEmptyArrayStorage;
    if (*(void *)(v3 + 64)) {
      uint64_t v22 = *(void **)(v3 + 64);
    }
  }
  else
  {
    char v21 = _swiftEmptyArrayStorage;
    if (*(void *)(v3 + 64)) {
      uint64_t v22 = *(void **)(v3 + 64);
    }
    else {
      uint64_t v22 = _swiftEmptyArrayStorage;
    }
  }
  uint64_t v35 = (uint64_t)v22;
  swift_bridgeObjectRetain();
  sub_1000A1FD8((uint64_t)v21);
  uint64_t active = type metadata accessor for ActiveOutputTerminal();
  swift_allocObject();
  uint64_t result = sub_1000A0858((char *)a1, (uint64_t)v50, v35);
  a3[3] = active;
  a3[4] = (uint64_t)&protocol witness table for ActiveOutputTerminal;
  *a3 = result;
  return result;
}

Swift::Int OutputTerminal.hashValue.getter()
{
  return sub_1000BF7DC((void (*)(unsigned char *))sub_10004DC7C);
}

uint64_t sub_1000BE9EC@<X0>(void *a1@<X0>, char a2@<W2>, uint64_t *a3@<X8>)
{
  return OutputTerminal.activate(onDevice:controlInterface:addLatencyControl:)(a1, a2, a3);
}

Swift::Int sub_1000BEA38()
{
  long long v1 = v0[3];
  long long v8 = v0[2];
  long long v9 = v1;
  long long v2 = v0[5];
  long long v10 = v0[4];
  long long v11 = v2;
  long long v3 = v0[1];
  long long v6 = *v0;
  long long v7 = v3;
  Hasher.init(_seed:)();
  sub_10004DC7C((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OutputTerminal(uint64_t a1)
{
  return sub_10004DC7C(a1);
}

Swift::Int sub_1000BEADC()
{
  long long v1 = v0[3];
  long long v8 = v0[2];
  long long v9 = v1;
  long long v2 = v0[5];
  long long v10 = v0[4];
  long long v11 = v2;
  long long v3 = v0[1];
  long long v6 = *v0;
  long long v7 = v3;
  Hasher.init(_seed:)();
  sub_10004DC7C((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OutputTerminal(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  long long v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  long long v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  long long v5 = a2[3];
  void v10[2] = a2[2];
  v10[3] = v5;
  long long v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  long long v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_1000457D0(v9, v10) & 1;
}

uint64_t MixerUnit.sourceID.getter()
{
  return *(void *)v0;
}

uint64_t MixerUnit.nameStringIndex.getter()
{
  return *(unsigned __int16 *)(v0 + 24) | (*(unsigned __int8 *)(v0 + 26) << 16);
}

uint64_t MixerUnit.usbDescriptor.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t FeatureUnit.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*SelectorUnit.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

unint64_t FeatureUnit.activate(onDevice:controlInterface:addLatencyControl:)@<X0>(char a1@<W2>, uint64_t *a2@<X8>)
{
  sub_1000C133C((uint64_t)&v21);
  uint64_t v6 = v21;
  char v5 = v22;
  uint64_t v7 = v23;
  int v8 = v24;
  uint64_t v9 = v25;
  unint64_t v10 = v26;
  uint64_t v11 = v29;
  uint64_t v19 = v27;
  uint64_t v20 = v28;
  sub_10005415C((uint64_t)&v21, (uint64_t)v30, &qword_10012A530);
  if (v31)
  {
    uint64_t v18 = v11;
    char v12 = v5 & 1;
    unint64_t v17 = v10 >> 8;
    if ((a1 & 1) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v20 = *(void *)(v2 + 56);
    uint64_t v18 = *(void *)(v2 + 64);
    uint64_t v19 = *(void *)(v2 + 48);
    uint64_t v9 = *(void *)(v2 + 32);
    LOBYTE(v10) = *(unsigned char *)(v2 + 40);
    LOBYTE(v17) = *(unsigned char *)(v2 + 41);
    int v8 = *(unsigned __int16 *)(v2 + 24) | (*(unsigned __int8 *)(v2 + 26) << 16);
    uint64_t v7 = *(void *)(v2 + 16);
    uint64_t v6 = *(void *)v2;
    char v12 = *(unsigned char *)(v2 + 8);
    sub_100053F70(v2);
    if ((a1 & 1) == 0) {
      goto LABEL_7;
    }
  }
  sub_1000C1AB4((uint64_t *)(v2 + 32), (uint64_t)v32);
  sub_1000C1AB4(v32, (uint64_t)v33);
  if (v33[9] == 37)
  {
    sub_10000AC7C(&qword_100128E78);
    uint64_t v13 = (void *)swift_allocObject();
    *((_OWORD *)v13 + 1) = xmmword_1000E8090;
    *((unsigned char *)v13 + 34) = -62;
    *((_WORD *)v13 + 16) = 4224;
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v13 = _swiftEmptyArrayStorage;
LABEL_8:
  uint64_t active = type metadata accessor for ActiveFeatureUnit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 24) = 0;
  swift_unknownObjectWeakInit();
  unint64_t result = sub_10000B80C((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v15 + 112) = result;
  *(void *)(v15 + 32) = v6;
  *(unsigned char *)(v15 + 40) = v12;
  *(void *)(v15 + 48) = v7;
  *(unsigned char *)(v15 + 58) = BYTE2(v8);
  *(_WORD *)(v15 + 56) = v8;
  *(void *)(v15 + 64) = v9;
  *(unsigned char *)(v15 + 72) = v10;
  *(unsigned char *)(v15 + 73) = v17;
  *(void *)(v15 + 80) = v19;
  *(void *)(v15 + 88) = v20;
  *(void *)(v15 + 96) = v18;
  if (!v13[2])
  {
    unint64_t result = swift_bridgeObjectRelease();
    uint64_t v13 = 0;
  }
  *(void *)(v15 + 104) = v13;
  a2[3] = active;
  a2[4] = (uint64_t)&protocol witness table for ActiveFeatureUnit;
  *a2 = v15;
  return result;
}

Swift::Int FeatureUnit.hashValue.getter()
{
  return sub_1000BFFE4((void (*)(unsigned char *))sub_10004E620);
}

unint64_t sub_1000BEE10@<X0>(char a1@<W2>, uint64_t *a2@<X8>)
{
  return FeatureUnit.activate(onDevice:controlInterface:addLatencyControl:)(a1, a2);
}

Swift::Int sub_1000BEE5C(uint64_t a1, uint64_t a2)
{
  return sub_1000BF54C(a1, a2, (void (*)(unsigned char *))sub_10004E620);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FeatureUnit(uint64_t a1)
{
  return sub_10004E620(a1);
}

Swift::Int sub_1000BEEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BF60C(a1, a2, a3, (void (*)(unsigned char *))sub_10004E620);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FeatureUnit(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_100046448((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t MixerUnit.clusterDescription.getter()
{
  return *(void *)(v0 + 44);
}

uint64_t MixerUnit.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t (*MixerUnit.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

void MixerUnit.activate(onDevice:controlInterface:addLatencyControl:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_1000D24B4(a1, a2, *(void *)(v3 + 44), *(_WORD *)(v3 + 52));
  if (!v4)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v7;
    char v11 = v8;
    uint64_t active = type metadata accessor for ActiveMixerUnit();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 24) = 0;
    swift_unknownObjectWeakInit();
    long long v14 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(v13 + 64) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(v13 + 80) = v14;
    *(_OWORD *)(v13 + 96) = *(_OWORD *)(v3 + 64);
    uint64_t v15 = *(void *)(v3 + 80);
    long long v16 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(v13 + 32) = *(_OWORD *)v3;
    *(_OWORD *)(v13 + 48) = v16;
    *(void *)(v13 + 112) = v15;
    *(void *)(v13 + 120) = v9;
    *(void *)(v13 + 128) = v10;
    *(unsigned char *)(v13 + 136) = v11;
    a3[3] = active;
    a3[4] = (uint64_t)&protocol witness table for ActiveMixerUnit;
    *a3 = v13;
    sub_100053ED4(v3);
  }
}

Swift::Int MixerUnit.hashValue.getter()
{
  return Hasher._finalize()();
}

void sub_1000BF084(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v23 = *v3;
  char v22 = *((unsigned char *)v3 + 8);
  uint64_t v21 = v3[2];
  int v6 = *((unsigned __int8 *)v3 + 26);
  int v7 = *((unsigned __int16 *)v3 + 12);
  char v24 = *((unsigned char *)v3 + 41);
  char v25 = *((unsigned char *)v3 + 40);
  uint64_t v8 = *(uint64_t *)((char *)v3 + 44);
  __int16 v9 = *((unsigned __int8 *)v3 + 52);
  __int16 v10 = *((unsigned __int8 *)v3 + 53);
  uint64_t v26 = v3[4];
  uint64_t v27 = v3[7];
  uint64_t v28 = v3[8];
  uint64_t v11 = v3[10];
  uint64_t v29 = v3[9];
  sub_1000D24B4(a1, a2, v8, v9 | (v10 << 8));
  if (!v4)
  {
    char v15 = v14;
    int v16 = v7 | (v6 << 16);
    uint64_t v19 = v13;
    uint64_t v20 = v12;
    uint64_t active = type metadata accessor for ActiveMixerUnit();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 24) = 0;
    swift_unknownObjectWeakInit();
    *(void *)(v18 + 32) = v23;
    *(unsigned char *)(v18 + 40) = v22;
    *(void *)(v18 + 48) = v21;
    *(unsigned char *)(v18 + 58) = BYTE2(v16);
    *(_WORD *)(v18 + 56) = v16;
    *(void *)(v18 + 64) = v26;
    *(unsigned char *)(v18 + 72) = v25;
    *(unsigned char *)(v18 + 73) = v24;
    *(void *)(v18 + 76) = v8;
    *(unsigned char *)(v18 + 84) = v9;
    *(unsigned char *)(v18 + 85) = v10;
    *(void *)(v18 + 88) = v27;
    *(void *)(v18 + 96) = v28;
    *(void *)(v18 + 104) = v29;
    *(void *)(v18 + 112) = v11;
    *(void *)(v18 + 120) = v20;
    *(void *)(v18 + 128) = v19;
    *(unsigned char *)(v18 + 136) = v15;
    a3[3] = active;
    a3[4] = (uint64_t)&protocol witness table for ActiveMixerUnit;
    *a3 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
}

Swift::Int sub_1000BF208()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MixerUnit()
{
  return sub_10004D3B8();
}

Swift::Int sub_1000BF2B8()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MixerUnit(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  _OWORD v7[4] = *(_OWORD *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  _OWORD v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_100044C60((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t SampleRateConverter.exceptionList.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SelectorUnit.activate(onDevice:controlInterface:addLatencyControl:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t active = type metadata accessor for ActiveSelectorUnit();
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 88) = 1;
  *(void *)(v4 + 104) = 0;
  swift_unknownObjectWeakInit();
  long long v5 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v4 + 64) = v5;
  *(void *)(v4 + 80) = *(void *)(v1 + 64);
  long long v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v4 + 32) = v6;
  a1[3] = active;
  a1[4] = (uint64_t)&protocol witness table for ActiveSelectorUnit;
  *a1 = v4;
  return sub_100053F70(v1);
}

Swift::Int SelectorUnit.hashValue.getter()
{
  return sub_1000BFFE4((void (*)(unsigned char *))sub_10004E268);
}

uint64_t sub_1000BF430@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((unsigned char *)v1 + 8);
  uint64_t v5 = v1[2];
  __int16 v15 = *((_WORD *)v1 + 12);
  char v6 = *((unsigned char *)v1 + 26);
  uint64_t v14 = v1[4];
  __int16 v13 = *((_WORD *)v1 + 20);
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t active = type metadata accessor for ActiveSelectorUnit();
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 88) = 1;
  *(void *)(v11 + 104) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v11 + 16) = v3;
  *(unsigned char *)(v11 + 24) = v4;
  *(void *)(v11 + 32) = v5;
  *(unsigned char *)(v11 + 42) = v6;
  *(_WORD *)(v11 + 40) = v15;
  *(void *)(v11 + 48) = v14;
  *(_WORD *)(v11 + 56) = v13;
  *(void *)(v11 + 64) = v7;
  *(void *)(v11 + 72) = v8;
  *(void *)(v11 + 80) = v9;
  a1[3] = active;
  a1[4] = (uint64_t)&protocol witness table for ActiveSelectorUnit;
  *a1 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

Swift::Int sub_1000BF534(uint64_t a1, uint64_t a2)
{
  return sub_1000BF54C(a1, a2, (void (*)(unsigned char *))sub_10004E268);
}

Swift::Int sub_1000BF54C(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  long long v5 = v3[3];
  long long v11 = v3[2];
  long long v12 = v5;
  uint64_t v13 = *((void *)v3 + 8);
  long long v6 = v3[1];
  long long v9 = *v3;
  long long v10 = v6;
  Hasher.init(_seed:)();
  a3(v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SelectorUnit(uint64_t a1)
{
  return sub_10004E268(a1);
}

Swift::Int sub_1000BF5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BF60C(a1, a2, a3, (void (*)(unsigned char *))sub_10004E268);
}

Swift::Int sub_1000BF60C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  long long v6 = v4[3];
  long long v12 = v4[2];
  long long v13 = v6;
  uint64_t v14 = *((void *)v4 + 8);
  long long v7 = v4[1];
  long long v10 = *v4;
  long long v11 = v7;
  Hasher.init(_seed:)();
  a4(v9);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SelectorUnit(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_100045F7C((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t ExtensionUnit.cluster.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExtensionUnit.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 88) = a1;
  return result;
}

uint64_t ExtensionUnit.activate(onDevice:controlInterface:addLatencyControl:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t active = type metadata accessor for ActiveExtensionUnit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 120) = 0;
  swift_unknownObjectWeakInit();
  long long v5 = v1[3];
  *(_OWORD *)(v4 + 48) = v1[2];
  *(_OWORD *)(v4 + 64) = v5;
  long long v6 = v1[5];
  *(_OWORD *)(v4 + 80) = v1[4];
  *(_OWORD *)(v4 + 96) = v6;
  long long v7 = v1[1];
  *(_OWORD *)(v4 + 16) = *v1;
  *(_OWORD *)(v4 + 32) = v7;
  a1[3] = active;
  a1[4] = (uint64_t)&protocol witness table for ActiveExtensionUnit;
  *a1 = v4;

  return sub_100053E2C((uint64_t)v1);
}

Swift::Int ExtensionUnit.hashValue.getter()
{
  return sub_1000BF7DC((void (*)(unsigned char *))sub_10004DE68);
}

Swift::Int sub_1000BF7DC(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000BF824@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((unsigned char *)v1 + 8);
  __int16 v18 = *((_WORD *)v1 + 12);
  char v5 = *((unsigned char *)v1 + 26);
  uint64_t v16 = v1[4];
  uint64_t v17 = v1[2];
  __int16 v15 = *((_WORD *)v1 + 20);
  uint64_t v6 = v1[6];
  uint64_t v14 = v1[7];
  uint64_t v7 = v1[8];
  char v13 = *((unsigned char *)v1 + 72);
  uint64_t v9 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t active = type metadata accessor for ActiveExtensionUnit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 120) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v11 + 16) = v3;
  *(unsigned char *)(v11 + 24) = v4;
  *(void *)(v11 + 32) = v17;
  *(unsigned char *)(v11 + 42) = v5;
  *(_WORD *)(v11 + 40) = v18;
  *(void *)(v11 + 48) = v16;
  *(_WORD *)(v11 + 56) = v15;
  *(void *)(v11 + 64) = v6;
  *(void *)(v11 + 72) = v14;
  *(void *)(v11 + 80) = v7;
  *(unsigned char *)(v11 + 88) = v13;
  *(void *)(v11 + 96) = v9;
  *(void *)(v11 + 104) = v8;
  a1[3] = active;
  a1[4] = (uint64_t)&protocol witness table for ActiveExtensionUnit;
  *a1 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

Swift::Int sub_1000BF94C()
{
  long long v1 = v0[3];
  long long v8 = v0[2];
  long long v9 = v1;
  long long v2 = v0[5];
  long long v10 = v0[4];
  long long v11 = v2;
  long long v3 = v0[1];
  long long v6 = *v0;
  long long v7 = v3;
  Hasher.init(_seed:)();
  sub_10004DE68((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExtensionUnit(uint64_t a1)
{
  return sub_10004DE68(a1);
}

Swift::Int sub_1000BF9F0()
{
  long long v1 = v0[3];
  long long v8 = v0[2];
  long long v9 = v1;
  long long v2 = v0[5];
  long long v10 = v0[4];
  long long v11 = v2;
  long long v3 = v0[1];
  long long v6 = *v0;
  long long v7 = v3;
  Hasher.init(_seed:)();
  sub_10004DE68((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExtensionUnit(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  long long v3 = a1[5];
  _OWORD v9[4] = a1[4];
  _OWORD v9[5] = v3;
  long long v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  long long v5 = a2[3];
  void v10[2] = a2[2];
  v10[3] = v5;
  long long v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  long long v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_100045A48(v9, v10) & 1;
}

uint64_t EffectUnit.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*EffectUnit.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

double ClockMultiplier.activate(onDevice:controlInterface:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

Swift::Int EffectUnit.hashValue.getter()
{
  return sub_1000C05A0((void (*)(unsigned char *))sub_10004E7E8);
}

Swift::Int sub_1000BFB1C()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EffectUnit()
{
  return sub_10004E7E8();
}

Swift::Int sub_1000BFBAC()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EffectUnit(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  _OWORD v8[2] = a2[2];
  void v8[3] = v5;
  return sub_10004668C((uint64_t)v7, (uint64_t)v8) & 1;
}

uint64_t SampleRateConverter.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*SampleRateConverter.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t ProcessingUnit.numberOfModes.getter()
{
  return *(void *)(*(void *)(v0 + 72) + 16);
}

uint64_t ProcessingUnit.activate(onDevice:controlInterface:addLatencyControl:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t active = type metadata accessor for ActiveProcessingUnit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 104) = 0;
  swift_unknownObjectWeakInit();
  long long v5 = v1[3];
  *(_OWORD *)(v4 + 48) = v1[2];
  *(_OWORD *)(v4 + 64) = v5;
  *(_OWORD *)(v4 + 80) = v1[4];
  long long v6 = v1[1];
  *(_OWORD *)(v4 + 16) = *v1;
  *(_OWORD *)(v4 + 32) = v6;
  a1[3] = active;
  a1[4] = (uint64_t)&off_100119048;
  *a1 = v4;

  return sub_100053D48((uint64_t)v1);
}

Swift::Int ProcessingUnit.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_1000BFD70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((unsigned char *)v1 + 8);
  __int16 v16 = *((_WORD *)v1 + 12);
  char v5 = *((unsigned char *)v1 + 26);
  uint64_t v14 = v1[4];
  uint64_t v15 = v1[2];
  __int16 v13 = *((_WORD *)v1 + 20);
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v8 = v1[9];
  uint64_t active = type metadata accessor for ActiveProcessingUnit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 104) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v11 + 16) = v3;
  *(unsigned char *)(v11 + 24) = v4;
  *(void *)(v11 + 32) = v15;
  *(unsigned char *)(v11 + 42) = v5;
  *(_WORD *)(v11 + 40) = v16;
  *(void *)(v11 + 48) = v14;
  *(_WORD *)(v11 + 56) = v13;
  *(void *)(v11 + 64) = v6;
  *(void *)(v11 + 72) = v7;
  *(void *)(v11 + 80) = v9;
  *(void *)(v11 + 88) = v8;
  a1[3] = active;
  a1[4] = (uint64_t)&off_100119048;
  *a1 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

Swift::Int sub_1000BFE78()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ProcessingUnit()
{
  return sub_10004DAC0();
}

Swift::Int sub_1000BFF18()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ProcessingUnit(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  _OWORD v8[2] = a1[2];
  void v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  _OWORD v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  _OWORD v8[4] = v3;
  v9[0] = v6;
  return sub_100045590(v8, v9) & 1;
}

Swift::Int SampleRateConverter.hashValue.getter()
{
  return sub_1000BFFE4((void (*)(unsigned char *))sub_10004D57C);
}

Swift::Int sub_1000BFFE4(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int sub_1000C002C()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SampleRateConverter()
{
  return sub_10004D57C();
}

Swift::Int sub_1000C00CC()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SampleRateConverter(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_100044EB0((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t PowerDomain.nameStringIndex.getter()
{
  return *(unsigned __int16 *)(v0 + 8) | (*(unsigned __int8 *)(v0 + 10) << 16);
}

uint64_t ClockMultiplier.usbDescriptor.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t ClockSelector.inputClockIDs.getter()
{
  return swift_bridgeObjectRetain();
}

Swift::Int PowerDomain.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000C01E4()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PowerDomain()
{
  return sub_10004E43C();
}

Swift::Int sub_1000C0274()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PowerDomain(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  _OWORD v8[2] = v5;
  return sub_1000461C4((uint64_t)v7, (uint64_t)v8) & 1;
}

uint64_t ClockMultiplier.nameStringIndex.getter()
{
  return *v0 | (*((unsigned __int8 *)v0 + 2) << 16);
}

uint64_t ClockSource.isSynchronizedToSOF.getter()
{
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t ClockSource.activate(onDevice:controlInterface:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  if (*(void *)(v6 + 40)) {
    uint64_t v9 = *(void **)(v6 + 40);
  }
  else {
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  if (*(unsigned char *)(*(void *)a2 + 7) == 64)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    swift_bridgeObjectRetain();
    char v12 = sub_10003792C(v11, 1, a1, a2);
    if (v5)
    {
      sub_10000AC7C(&qword_100127410);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_1000E8090;
      *(void *)(v13 + 56) = &type metadata for String;
      *(void *)(v13 + 32) = 0xD00000000000001BLL;
      *(void *)(v13 + 40) = 0x80000001000E6AC0;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      uint64_t v5 = 0;
    }
    else
    {
      char v14 = v12;
      swift_bridgeObjectRelease();
      sub_10000AC7C(&qword_100128E78);
      uint64_t v9 = (void *)swift_allocObject();
      *((_OWORD *)v9 + 1) = xmmword_1000EA840;
      *((unsigned char *)v9 + 34) = 80;
      *((_WORD *)v9 + 16) = 704;
      *((unsigned char *)v9 + 37) = 82;
      *(_WORD *)((char *)v9 + 35) = v14 & 1 | 0x180;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  sub_10005415C(v6, (uint64_t)v21, &qword_10012A538);
  sub_10005415C((uint64_t)v21, (uint64_t)&v22, &qword_10012A538);
  if (v23 == 255)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject);
    if (v15)
    {
      unint64_t v17 = sub_1000C545C(v22 | (v23 << 16) & 0x1FFFFu);
      if (v5) {
        return swift_bridgeObjectRelease();
      }
      uint64_t v15 = v17;
      uint64_t v16 = v18;
    }
    else
    {
      uint64_t v16 = 0;
    }
  }
  uint64_t active = type metadata accessor for ActiveClockSource();
  swift_allocObject();
  sub_100053C0C(v6);
  uint64_t result = sub_1000238BC((_OWORD *)v6, v15, v16, (uint64_t)v9);
  if (!v5)
  {
    a3[3] = active;
    a3[4] = (uint64_t)&protocol witness table for ActiveClockSource;
    *a3 = result;
  }
  return result;
}

Swift::Int ClockSource.hashValue.getter()
{
  return sub_1000C05A0((void (*)(unsigned char *))sub_10004E634);
}

Swift::Int sub_1000C05A0(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000C05E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return ClockSource.activate(onDevice:controlInterface:)(a1, a2, a3);
}

Swift::Int sub_1000C0624()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ClockSource()
{
  return sub_10004E634();
}

Swift::Int sub_1000C06B4()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ClockSource(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  v7[2] = a1[2];
  _OWORD v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  _OWORD v8[2] = a2[2];
  _OWORD v8[3] = v5;
  return sub_10004645C(v7, v8) & 1;
}

unint64_t ClockSelector.activate(onDevice:controlInterface:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2;
  sub_10005415C(v4, (uint64_t)v16, &qword_10012A538);
  sub_10005415C((uint64_t)v16, (uint64_t)&v17, &qword_10012A538);
  if (v18 == 255)
  {
    unint64_t v7 = 0;
LABEL_6:
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  unint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject);
  if (!v7) {
    goto LABEL_6;
  }
  unint64_t result = sub_1000C545C(v17 | (v18 << 16) & 0x1FFFFu);
  if (v3) {
    return result;
  }
  unint64_t v7 = result;
  uint64_t v10 = v9;
LABEL_7:
  sub_10005415C(v4 + 32, (uint64_t)v15, &qword_1001288F0);
  uint64_t v14 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain_n();
  sub_100053BD8((uint64_t)v15);
  sub_100053BD8((uint64_t)&v14);
  swift_bridgeObjectRelease();
  uint64_t active = type metadata accessor for ActiveClockSelector();
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 72) = 1;
  *(void *)(v12 + 104) = 0;
  unint64_t result = swift_unknownObjectWeakInit();
  *(void *)(v12 + 112) = 0;
  long long v13 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)v4;
  *(_OWORD *)(v12 + 32) = v13;
  *(_OWORD *)(v12 + 48) = *(_OWORD *)(v4 + 32);
  *(void *)(v12 + 64) = *(void *)(v4 + 48);
  *(void *)(v12 + 80) = v7;
  *(void *)(v12 + 88) = v10;
  a2[3] = active;
  a2[4] = (uint64_t)&protocol witness table for ActiveClockSelector;
  *a2 = v12;
  return result;
}

Swift::Int ClockSelector.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t sub_1000C0918@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return ClockSelector.activate(onDevice:controlInterface:)(a1, a2);
}

Swift::Int sub_1000C095C()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ClockSelector()
{
  return sub_10004E060();
}

Swift::Int sub_1000C09FC()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ClockSelector(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_100045CB4((uint64_t)v5, (uint64_t)v7) & 1;
}

Swift::Int ClockMultiplier.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000C0AF0()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ClockMultiplier()
{
  return sub_10004D904();
}

Swift::Int sub_1000C0B90()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ClockMultiplier(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  int v6 = *(_DWORD *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  int v8 = *(_DWORD *)(a2 + 48);
  return sub_100045350((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_1000C0C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, __int16 a13, uint64_t a14)
{
  uint64_t v16 = a6;
  uint64_t v18 = a14;
  if (*(void *)(a6 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1000540F0(a10, a11);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1000540F0(a10, a11);
    swift_bridgeObjectRelease();
    uint64_t v16 = 0;
  }
  if (*(void *)(a14 + 16))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
  }
  swift_bridgeObjectRetain();
  sub_1000540F0(a10, a11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000541C0(a10, a11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  sub_1000541C0(a10, a11);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a9 = a3;
  *(void *)(a9 + 8) = a4;
  *(unsigned char *)(a9 + 16) = a5;
  *(void *)(a9 + 24) = a2;
  *(unsigned char *)(a9 + 34) = BYTE2(a7);
  *(_WORD *)(a9 + 32) = a7;
  *(void *)(a9 + 40) = a1;
  *(void *)(a9 + 48) = a12;
  *(_WORD *)(a9 + 56) = a13;
  *(void *)(a9 + 64) = a8;
  *(void *)(a9 + 72) = a10;
  *(void *)(a9 + 80) = a11;
  *(void *)(a9 + 88) = v16;
  *(void *)(a9 + 96) = v18;
  return result;
}

uint64_t sub_1000C0DC8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int16 a11, uint64_t a12)
{
  uint64_t v12 = a8;
  uint64_t v19 = a12;
  if (!*(void *)(a8 + 16))
  {
    uint64_t v20 = result;
    uint64_t v21 = a5;
    swift_bridgeObjectRelease();
    a5 = v21;
    uint64_t result = v20;
    uint64_t v12 = 0;
  }
  if (!*(void *)(a12 + 16))
  {
    char v25 = a6;
    uint64_t v22 = a3;
    uint64_t v23 = result;
    uint64_t v24 = a5;
    swift_bridgeObjectRelease();
    a5 = v24;
    uint64_t result = v23;
    a3 = v22;
    a6 = v25;
    uint64_t v19 = 0;
  }
  *(void *)a9 = a4;
  *(void *)(a9 + 8) = a5;
  *(unsigned char *)(a9 + 16) = a6;
  *(void *)(a9 + 24) = a2;
  *(_WORD *)(a9 + 32) = a7;
  *(unsigned char *)(a9 + 34) = BYTE2(a7);
  *(void *)(a9 + 40) = a3;
  *(unsigned char *)(a9 + 48) = 0;
  *(void *)(a9 + 56) = result;
  *(void *)(a9 + 64) = v12;
  *(void *)(a9 + 72) = a10;
  *(_WORD *)(a9 + 80) = a11;
  *(void *)(a9 + 88) = v19;
  return result;
}

uint64_t sub_1000C0EC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int16 a10, uint64_t a11)
{
  uint64_t v12 = a6;
  uint64_t v17 = a11;
  if (!*(void *)(a6 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v12 = 0;
    if (*(void *)(a11 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v17 = 0;
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!*(void *)(a11 + 16)) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRetain();
LABEL_6:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a9 = 0;
  *(unsigned char *)(a9 + 8) = 1;
  *(void *)(a9 + 16) = a1;
  *(unsigned char *)(a9 + 26) = BYTE2(a7);
  *(_WORD *)(a9 + 24) = a7;
  *(void *)(a9 + 32) = a8;
  *(_WORD *)(a9 + 40) = a10;
  *(void *)(a9 + 44) = a2;
  *(_WORD *)(a9 + 52) = a3;
  *(void *)(a9 + 56) = a4;
  *(void *)(a9 + 64) = a5;
  *(void *)(a9 + 72) = v12;
  *(void *)(a9 + 80) = v17;
  return result;
}

uint64_t sub_1000C0FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, __int16 a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12 = a3;
  if (!*(void *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v12 = 0;
    if (*(void *)(a7 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a7 = 0;
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  if (!*(void *)(a7 + 16)) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRetain();
LABEL_6:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a8 = 0;
  *(unsigned char *)(a8 + 8) = 1;
  *(void *)(a8 + 16) = a1;
  *(unsigned char *)(a8 + 26) = BYTE2(a4);
  *(_WORD *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(_WORD *)(a8 + 40) = a6;
  *(void *)(a8 + 48) = a2;
  *(void *)(a8 + 56) = v12;
  *(void *)(a8 + 64) = a7;
  return result;
}

uint64_t sub_1000C10F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13 = a4;
  uint64_t v18 = a10;
  if (!*(void *)(a4 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v13 = 0;
    if (*(void *)(a10 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  if (!*(void *)(a10 + 16)) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRetain();
LABEL_6:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)a9 = a2;
  *(unsigned char *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = a1;
  *(unsigned char *)(a9 + 26) = BYTE2(a5);
  *(_WORD *)(a9 + 24) = a5;
  *(void *)(a9 + 32) = a7;
  *(_WORD *)(a9 + 40) = a8;
  *(void *)(a9 + 48) = v18;
  *(void *)(a9 + 56) = a3;
  *(void *)(a9 + 64) = v13;
  *(void *)(a9 + 72) = a6;
  return result;
}

uint64_t sub_1000C1210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, __int16 a11, uint64_t a12)
{
  uint64_t v13 = a7;
  uint64_t v18 = a12;
  if (*(void *)(a7 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v13 = 0;
  }
  if (*(void *)(a12 + 16))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a9 = a2;
  *(unsigned char *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = a1;
  *(unsigned char *)(a9 + 26) = BYTE2(a8);
  *(_WORD *)(a9 + 24) = a8;
  *(void *)(a9 + 32) = a10;
  *(_WORD *)(a9 + 40) = a11;
  *(void *)(a9 + 48) = a3;
  *(void *)(a9 + 56) = a4;
  *(void *)(a9 + 64) = a5;
  *(unsigned char *)(a9 + 72) = a6;
  *(void *)(a9 + 80) = v13;
  *(void *)(a9 + 88) = v18;
  return result;
}

uint64_t sub_1000C133C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = *((unsigned __int8 *)v1 + 40);
  int v5 = *((unsigned __int8 *)v1 + 41);
  if (USBDescriptor.descriptorTypeName.getter(v3, v4 | (v5 << 8)) == 0x7461654634434441
    && v6 == 0xEF74696E55657275)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v3 = 0;
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      long long v14 = 0uLL;
      goto LABEL_18;
    }
  }
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *v1;
  }
  if (v1[8]) {
    uint64_t v13 = (void *)v1[8];
  }
  else {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  uint64_t v15 = v1[2];
  uint64_t v12 = v1[6];
  if (v13[2])
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v13 = 0;
  }
  unint64_t v11 = v4 | ((unint64_t)v5 << 8);
  *((void *)&v14 + 1) = 16711680;
  *(void *)&long long v14 = v15;
LABEL_18:
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = v14;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v13;
  return result;
}

uint64_t sub_1000C14B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(unsigned char **)(v1 + 48);
  unsigned __int16 v5 = *(_WORD *)(v1 + 56);
  if (USBDescriptor.descriptorTypeName.getter((uint64_t)v4, v5) == 0xD000000000000011 && v6 == 0x80000001000E6B20)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      long long v14 = 0uLL;
      long long v15 = 0uLL;
      long long v16 = 0uLL;
      long long v17 = 0uLL;
      goto LABEL_22;
    }
  }
  sub_1000D1078(v4, v5, (uint64_t)v43);
  uint64_t v42 = (uint64_t)v4;
  uint64_t v18 = v44;
  uint64_t v57 = v44;
  int64_t v19 = *(void *)(v44 + 16);
  uint64_t v20 = _swiftEmptyArrayStorage;
  if (v19)
  {
    *(void *)&long long v46 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10007C664(0, v19, 0);
    uint64_t v21 = (void *)v46;
    uint64_t v22 = (unsigned __int16 *)(v18 + 32);
    unint64_t v23 = *(void *)(v46 + 16);
    uint64_t v24 = 12 * v23;
    do
    {
      unsigned int v26 = *v22++;
      uint64_t v25 = v26;
      *(void *)&long long v46 = v21;
      unint64_t v27 = v21[3];
      unint64_t v28 = v23 + 1;
      if (v23 >= v27 >> 1)
      {
        sub_10007C664(v27 > 1, v23 + 1, 1);
        uint64_t v21 = (void *)v46;
      }
      v21[2] = v28;
      uint64_t v29 = (char *)v21 + v24;
      *((void *)v29 + 4) = v25;
      *((_WORD *)v29 + 20) = 768;
      v24 += 12;
      unint64_t v23 = v28;
      --v19;
    }
    while (v19);
    sub_10004EC5C((uint64_t)&v57);
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
  }
  unsigned __int8 v30 = *(unsigned char *)(v2 + 16);
  sub_1000C4B40(&v45, &v56);
  sub_1000C4B40(&v56, v58);
  unsigned __int8 v31 = v58[0].n128_u8[0];
  if (v58[0].n128_u64[0] >> 62) {
    unsigned __int8 v31 = v30;
  }
  char v41 = v31;
  sub_10008CC24((uint64_t)v43);
  if (*(void *)(v2 + 88)) {
    uint64_t v32 = *(void **)(v2 + 88);
  }
  else {
    uint64_t v32 = _swiftEmptyArrayStorage;
  }
  if (*(void *)(v2 + 96)) {
    uint64_t v20 = *(void **)(v2 + 96);
  }
  uint64_t v39 = *(void *)(v2 + 40);
  uint64_t v40 = (uint64_t)v32;
  uint64_t v38 = *(void *)(v2 + 24);
  uint64_t v33 = *(void *)v2;
  uint64_t v34 = *(void *)(v2 + 8);
  int v35 = *(unsigned __int16 *)(v2 + 32) | (*(unsigned __int8 *)(v2 + 34) << 16);
  uint64_t v37 = *(void *)(v2 + 72);
  unint64_t v36 = *(void *)(v2 + 80);
  swift_bridgeObjectRetain();
  sub_1000540F0(v37, v36);
  swift_bridgeObjectRetain();
  uint64_t result = sub_1000C0C44(v39, v38, v33, v34, v41, v40, v35, (uint64_t)v21, (uint64_t)&v46, v37, v36, v42, v5, (uint64_t)v20);
  long long v14 = v46;
  uint64_t v9 = v47;
  uint64_t v10 = v48;
  unint64_t v11 = v49 | ((unint64_t)v50 << 16);
  long long v15 = v51;
  uint64_t v13 = v53;
  long long v16 = v54;
  long long v17 = v55;
  uint64_t v12 = v52;
LABEL_22:
  *(_OWORD *)a1 = v14;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 40) = v15;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 88) = v17;
  return result;
}

void *sub_1000C1800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = (unsigned char *)(swift_bridgeObjectRetain() + 41);
    char v7 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v9 = *(void *)(v6 - 9);
      switch(*v6)
      {
        case 1:
          uint64_t v10 = sub_1000D4898(a2, v9, HIDWORD(v9), *(v6 - 1));
          if (v4) {
            goto LABEL_21;
          }
          goto LABEL_9;
        case 2:
          long long v16 = (void *)sub_10003BB14(*(void *)(v6 - 9), a2, (id)*(unsigned __int8 *)(*(void *)a3 + 2));
          if (v4) {
            goto LABEL_21;
          }
          id v17 = v16;
          sub_1000B15F4([v17 bytes], 18944, (uint64_t)v27);
          uint64_t v18 = v28;
          swift_bridgeObjectRetain();
          sub_1000C4B9C((uint64_t)v27);
          int64_t v19 = sub_1000D30C4(v18);
          goto LABEL_15;
        case 3:
          sub_1000370E0(*(void *)(v6 - 9), a2, a3);
          if (v4) {
            goto LABEL_21;
          }
          id v17 = v20;
          sub_1000CFCF8([v17 bytes], 21248, v29);
          uint64_t v21 = v30;
          swift_bridgeObjectRetain();
          sub_10008D0A8((uint64_t)v29);
          int64_t v19 = sub_1000D3200(v21);
LABEL_15:
          long long v14 = v19;
          uint64_t v4 = 0;
          swift_bridgeObjectRelease();

          uint64_t v13 = 0;
          char v15 = 0;
          goto LABEL_16;
        default:
          uint64_t v10 = sub_1000D44BC(a2, v9, WORD1(v9), BYTE4(v9));
          if (v4)
          {
LABEL_21:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v7;
          }
LABEL_9:
          uint64_t v13 = v10;
          long long v14 = v11;
          if (v11)
          {
            char v15 = v12 & 1;
LABEL_16:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v7 = sub_1000596E0(0, v7[2] + 1, 1, v7);
            }
            unint64_t v23 = v7[2];
            unint64_t v22 = v7[3];
            if (v23 >= v22 >> 1) {
              char v7 = sub_1000596E0((void *)(v22 > 1), v23 + 1, 1, v7);
            }
            v7[2] = v23 + 1;
            char v8 = &v7[3 * v23];
            _OWORD v8[4] = v13;
            _OWORD v8[5] = v14;
            *((unsigned char *)v8 + 48) = v15;
          }
          v6 += 12;
          if (!--v5)
          {
            swift_bridgeObjectRelease();
            return v7;
          }
          break;
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000C1AB4(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000C1B10@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)v1[9];
  uint64_t v4 = *((unsigned __int8 *)v1 + 80);
  int v5 = *((unsigned __int8 *)v1 + 81);
  if (USBDescriptor.descriptorTypeName.getter((uint64_t)v3, v4 | (v5 << 8)) == 0xD000000000000012
    && v6 == 0x80000001000E6AE0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v3 = 0;
      unint64_t v16 = 0;
      id v17 = 0;
      uint64_t v18 = 1;
      goto LABEL_23;
    }
  }
  sub_1000D134C(v3, v4 | ((_WORD)v5 << 8), (uint64_t)v28);
  unsigned __int8 v19 = *((unsigned char *)v1 + 16);
  sub_1000C4B40(&v29, &v30);
  sub_1000C4B40(&v30, &v31);
  uint64_t v27 = v4;
  if (v31.n128_u64[0] >> 62)
  {
    unsigned __int8 v22 = v19;
    sub_10008CB48((uint64_t)v28);
  }
  else
  {
    unsigned __int8 v22 = v31.n128_u8[0];
  }
  uint64_t v20 = v1[5];
  if (*((unsigned char *)v1 + 48)) {
    uint64_t v20 = 0;
  }
  uint64_t v26 = v20;
  uint64_t v25 = v1[7];
  if (v1[8]) {
    uint64_t v18 = v1[8];
  }
  else {
    uint64_t v18 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if (v1[11]) {
    id v17 = (void *)v1[11];
  }
  else {
    id v17 = _swiftEmptyArrayStorage;
  }
  uint64_t v12 = v1[3];
  uint64_t v9 = *v1;
  uint64_t v10 = v1[1];
  int v23 = *((unsigned __int16 *)v1 + 16);
  int v24 = *((unsigned __int8 *)v1 + 34);
  uint64_t v21 = *(void *)(v18 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  if (!v21)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v18 = 0;
  }
  if (!v17[2])
  {
    uint64_t result = swift_bridgeObjectRelease();
    id v17 = 0;
  }
  uint64_t v11 = v22;
  uint64_t v13 = (v23 | (v24 << 16)) & 0xFFFFFF;
  uint64_t v14 = v26;
  unint64_t v16 = v27 | ((unint64_t)v5 << 8);
  uint64_t v15 = v25;
LABEL_23:
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v11;
  a1[3] = v12;
  a1[4] = v13;
  a1[5] = v14;
  a1[6] = 0;
  a1[7] = v15;
  a1[8] = v18;
  a1[9] = v3;
  a1[10] = v16;
  a1[11] = v17;
  return result;
}

unint64_t sub_1000C1D90(uint64_t a1)
{
  unint64_t result = sub_1000A0ED8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C1DB8(uint64_t a1)
{
  unint64_t result = sub_10008CC68();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C1DE0(uint64_t a1)
{
  unint64_t result = sub_1000C1E08();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C1E08()
{
  unint64_t result = qword_10012A540;
  if (!qword_10012A540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A540);
  }
  return result;
}

unint64_t sub_1000C1E60()
{
  unint64_t result = qword_10012A548;
  if (!qword_10012A548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A548);
  }
  return result;
}

unint64_t sub_1000C1EB4(uint64_t a1)
{
  unint64_t result = sub_10006D5A0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C1EDC(uint64_t a1)
{
  unint64_t result = sub_1000C1F04();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C1F04()
{
  unint64_t result = qword_10012A550;
  if (!qword_10012A550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A550);
  }
  return result;
}

unint64_t sub_1000C1F58(uint64_t a1)
{
  unint64_t result = sub_10008CB90();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C1F84()
{
  unint64_t result = qword_10012A558;
  if (!qword_10012A558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A558);
  }
  return result;
}

unint64_t sub_1000C1FD8(uint64_t a1)
{
  unint64_t result = sub_10008CAF0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C2000(uint64_t a1)
{
  unint64_t result = sub_1000C2028();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C2028()
{
  unint64_t result = qword_10012A560;
  if (!qword_10012A560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A560);
  }
  return result;
}

unint64_t sub_1000C2080()
{
  unint64_t result = qword_10012A568;
  if (!qword_10012A568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A568);
  }
  return result;
}

unint64_t sub_1000C20D4(uint64_t a1)
{
  unint64_t result = sub_10001D8D8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C20FC(uint64_t a1)
{
  unint64_t result = sub_1000C2124();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C2124()
{
  unint64_t result = qword_10012A570;
  if (!qword_10012A570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A570);
  }
  return result;
}

unint64_t sub_1000C217C()
{
  unint64_t result = qword_10012A578;
  if (!qword_10012A578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A578);
  }
  return result;
}

unint64_t sub_1000C21D0(uint64_t a1)
{
  unint64_t result = sub_10001EB00();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C21F8(uint64_t a1)
{
  unint64_t result = sub_1000C2220();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C2220()
{
  unint64_t result = qword_10012A580;
  if (!qword_10012A580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A580);
  }
  return result;
}

unint64_t sub_1000C2278()
{
  unint64_t result = qword_10012A588;
  if (!qword_10012A588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A588);
  }
  return result;
}

unint64_t sub_1000C22CC(uint64_t a1)
{
  unint64_t result = sub_100057E68();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C22F4(uint64_t a1)
{
  unint64_t result = sub_1000C231C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C231C()
{
  unint64_t result = qword_10012A590;
  if (!qword_10012A590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A590);
  }
  return result;
}

unint64_t sub_1000C2374()
{
  unint64_t result = qword_10012A598;
  if (!qword_10012A598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A598);
  }
  return result;
}

unint64_t sub_1000C23C8(uint64_t a1)
{
  unint64_t result = sub_10005826C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C23F0(uint64_t a1)
{
  unint64_t result = sub_1000C2418();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C2418()
{
  unint64_t result = qword_10012A5A0;
  if (!qword_10012A5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A5A0);
  }
  return result;
}

unint64_t sub_1000C2470()
{
  unint64_t result = qword_10012A5A8;
  if (!qword_10012A5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A5A8);
  }
  return result;
}

unint64_t sub_1000C24C4(uint64_t a1)
{
  unint64_t result = sub_100058054();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C24EC(uint64_t a1)
{
  unint64_t result = sub_1000C2514();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C2514()
{
  unint64_t result = qword_10012A5B0;
  if (!qword_10012A5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A5B0);
  }
  return result;
}

unint64_t sub_1000C256C()
{
  unint64_t result = qword_10012A5B8;
  if (!qword_10012A5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A5B8);
  }
  return result;
}

unint64_t sub_1000C25C0(uint64_t a1)
{
  unint64_t result = sub_100058184();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C25E8(uint64_t a1)
{
  unint64_t result = sub_1000C2610();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C2610()
{
  unint64_t result = qword_10012A5C0;
  if (!qword_10012A5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A5C0);
  }
  return result;
}

unint64_t sub_1000C2668()
{
  unint64_t result = qword_10012A5C8;
  if (!qword_10012A5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A5C8);
  }
  return result;
}

unint64_t sub_1000C26BC()
{
  unint64_t result = qword_10012A5D0;
  if (!qword_10012A5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A5D0);
  }
  return result;
}

unint64_t sub_1000C2710(uint64_t a1)
{
  unint64_t result = sub_1000C26BC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C273C()
{
  unint64_t result = qword_10012A5D8;
  if (!qword_10012A5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A5D8);
  }
  return result;
}

unint64_t sub_1000C2790(uint64_t a1)
{
  unint64_t result = sub_100023848();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C27B8(uint64_t a1)
{
  unint64_t result = sub_1000C27E0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C27E0()
{
  unint64_t result = qword_10012A5E0;
  if (!qword_10012A5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A5E0);
  }
  return result;
}

unint64_t sub_1000C2838()
{
  unint64_t result = qword_10012A5E8;
  if (!qword_10012A5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A5E8);
  }
  return result;
}

unint64_t sub_1000C288C(uint64_t a1)
{
  unint64_t result = sub_10002D55C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C28B4(uint64_t a1)
{
  unint64_t result = sub_1000C28DC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C28DC()
{
  unint64_t result = qword_10012A5F0;
  if (!qword_10012A5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A5F0);
  }
  return result;
}

unint64_t sub_1000C2934()
{
  unint64_t result = qword_10012A5F8;
  if (!qword_10012A5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A5F8);
  }
  return result;
}

unint64_t sub_1000C2988(uint64_t a1)
{
  unint64_t result = sub_10008CDA0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C29B0(uint64_t a1)
{
  unint64_t result = sub_1000C29D8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C29D8()
{
  unint64_t result = qword_10012A600;
  if (!qword_10012A600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A600);
  }
  return result;
}

unint64_t sub_1000C2A30()
{
  unint64_t result = qword_10012A608;
  if (!qword_10012A608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A608);
  }
  return result;
}

uint64_t destroy for InputTerminal(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >> 60 != 15) {
    sub_100038688(*(void *)(a1 + 72), v2);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InputTerminal(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  int v5 = (_OWORD *)(a2 + 72);
  unint64_t v6 = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *v5;
  }
  else
  {
    uint64_t v7 = *(void *)v5;
    sub_100054104(v7, v6);
    *(void *)(a1 + 72) = v7;
    *(void *)(a1 + 80) = v6;
  }
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InputTerminal(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  __int16 v4 = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(_WORD *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v6 = (uint64_t *)(a2 + 72);
  unint64_t v7 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >> 60 != 15)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v9 = *v6;
      sub_100054104(*v6, *(void *)(a2 + 80));
      uint64_t v10 = *(void *)(a1 + 72);
      unint64_t v11 = *(void *)(a1 + 80);
      *(void *)(a1 + 72) = v9;
      *(void *)(a1 + 80) = v7;
      sub_100038688(v10, v11);
      goto LABEL_8;
    }
    sub_10006CC54(a1 + 72);
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v6;
    goto LABEL_8;
  }
  uint64_t v8 = *v6;
  sub_100054104(*v6, *(void *)(a2 + 80));
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v7;
LABEL_8:
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for InputTerminal(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for InputTerminal(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  long long v5 = (void *)(a2 + 72);
  unint64_t v6 = *(void *)(a1 + 80);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 80);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = *v5;
      *(void *)(a1 + 80) = v7;
      sub_100038688(v8, v6);
      goto LABEL_6;
    }
    sub_10006CC54(a1 + 72);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v5;
LABEL_6:
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InputTerminal(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InputTerminal(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InputTerminal()
{
  return &type metadata for InputTerminal;
}

uint64_t destroy for OutputTerminal()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OutputTerminal(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OutputTerminal(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  __int16 v4 = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(_WORD *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for OutputTerminal(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for OutputTerminal(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OutputTerminal(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OutputTerminal(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 64) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OutputTerminal()
{
  return &type metadata for OutputTerminal;
}

__n128 initializeWithTake for SelectorUnit(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for FeatureUnit()
{
  return &type metadata for FeatureUnit;
}

uint64_t destroy for MixerUnit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MixerUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  uint64_t v3 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v3;
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MixerUnit(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  LOWORD(v4) = *((_WORD *)a2 + 12);
  *(unsigned char *)(a1 + 26) = *((unsigned char *)a2 + 26);
  *(_WORD *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(uint64_t *)((char *)a2 + 44);
  *(_WORD *)(a1 + 52) = *((_WORD *)a2 + 26);
  *(void *)(a1 + 44) = v6;
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MixerUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MixerUnit(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MixerUnit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MixerUnit()
{
  return &type metadata for MixerUnit;
}

uint64_t _s9AUASDCore12SelectorUnitVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s9AUASDCore12SelectorUnitVwcp_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s9AUASDCore12SelectorUnitVwca_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  LOWORD(v4) = *((_WORD *)a2 + 12);
  *(unsigned char *)(a1 + 26) = *((unsigned char *)a2 + 26);
  *(_WORD *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9AUASDCore12SelectorUnitVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9AUASDCore12SelectorUnitVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000C374C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SelectorUnit()
{
  return &type metadata for SelectorUnit;
}

uint64_t destroy for ExtensionUnit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExtensionUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExtensionUnit(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  LOWORD(v4) = *((_WORD *)a2 + 12);
  *(unsigned char *)(a1 + 26) = *((unsigned char *)a2 + 26);
  *(_WORD *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ExtensionUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtensionUnit(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionUnit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionUnit()
{
  return &type metadata for ExtensionUnit;
}

uint64_t destroy for EffectUnit()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EffectUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EffectUnit(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  LOWORD(v4) = *((_WORD *)a2 + 12);
  *(unsigned char *)(a1 + 26) = *((unsigned char *)a2 + 26);
  *(_WORD *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EffectUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EffectUnit(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EffectUnit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EffectUnit()
{
  return &type metadata for EffectUnit;
}

uint64_t destroy for ProcessingUnit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ProcessingUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ProcessingUnit(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  LOWORD(v4) = *((_WORD *)a2 + 12);
  *(unsigned char *)(a1 + 26) = *((unsigned char *)a2 + 26);
  *(_WORD *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ProcessingUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ProcessingUnit()
{
  return &type metadata for ProcessingUnit;
}

uint64_t destroy for SampleRateConverter()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SampleRateConverter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SampleRateConverter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  LOWORD(v4) = *((_WORD *)a2 + 12);
  *(unsigned char *)(a1 + 26) = *((unsigned char *)a2 + 26);
  *(_WORD *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  return a1;
}

uint64_t assignWithTake for SampleRateConverter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for SampleRateConverter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SampleRateConverter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SampleRateConverter()
{
  return &type metadata for SampleRateConverter;
}

uint64_t initializeWithCopy for PowerDomain(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PowerDomain(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int16 v4 = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(_WORD *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PowerDomain(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PowerDomain(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PowerDomain(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PowerDomain(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PowerDomain()
{
  return &type metadata for PowerDomain;
}

uint64_t _s9AUASDCore11ClockSourceVwxx_0()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClockSource(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClockSource(uint64_t a1, __int16 *a2)
{
  __int16 v4 = *a2;
  *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  *(_WORD *)(a1 + 24) = a2[12];
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(unsigned char *)(a1 + 49) = *((unsigned char *)a2 + 49);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  return a1;
}

uint64_t assignWithTake for ClockSource(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClockSource(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClockSource()
{
  return &type metadata for ClockSource;
}

uint64_t destroy for ClockSelector()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClockSelector(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClockSelector(uint64_t a1, __int16 *a2)
{
  __int16 v4 = *a2;
  *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  *(_WORD *)(a1 + 24) = a2[12];
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ClockSelector(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ClockSelector(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClockSelector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockSelector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClockSelector()
{
  return &type metadata for ClockSelector;
}

uint64_t destroy for ClockMultiplier()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClockMultiplier(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClockMultiplier(uint64_t a1, __int16 *a2)
{
  __int16 v4 = *a2;
  *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  *(_WORD *)(a1 + 24) = a2[12];
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(unsigned char *)(a1 + 49) = *((unsigned char *)a2 + 49);
  *(unsigned char *)(a1 + 50) = *((unsigned char *)a2 + 50);
  *(unsigned char *)(a1 + 51) = *((unsigned char *)a2 + 51);
  return a1;
}

__n128 initializeWithTake for ClockMultiplier(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ClockMultiplier(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 51);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClockMultiplier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 52)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockMultiplier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 52) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 52) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClockMultiplier()
{
  return &type metadata for ClockMultiplier;
}

__n128 *sub_1000C4B40(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_1000C4B9C(uint64_t a1)
{
  return a1;
}

uint64_t static DriverVariant.loadDriverVariant()()
{
  int v0 = sub_1000C4C50();
  if ((v0 & 0x100) != 0) {
    int v1 = 2;
  }
  else {
    int v1 = 1;
  }
  return (v0 << 31 >> 31) & v1;
}

uint64_t sub_1000C4C50()
{
  uint64_t v16 = 0;
  NSString v0 = String._bridgeToObjectiveC()();
  unsigned int v1 = AUAGetBootArg(v0, (uint64_t)&v16);

  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  uint64_t v14 = 0xD00000000000001DLL;
  uint64_t v15 = 0x80000001000E6B40;
  if (v1) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x203A65756C617620;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  uint64_t v6 = v16;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_10002E804(v14, v15, 0xD000000000000014, (void *)0x80000001000E6B60, 0xD00000000000001DLL, 0x80000001000E6B80, 134);
  swift_bridgeObjectRelease();
  if (v6 == 1) {
    unsigned int v8 = v1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8)
  {
    uint64_t v14 = 0;
    NSString v9 = String._bridgeToObjectiveC()();
    char v10 = AUAGetBootArg(v9, (uint64_t)&v14);

    if (v14 == 1) {
      char v11 = v10;
    }
    else {
      char v11 = 0;
    }
    if (v11) {
      int v12 = 256;
    }
    else {
      int v12 = 0;
    }
  }
  else
  {
    int v12 = 0;
  }
  return v12 | v8;
}

unint64_t sub_1000C4E60()
{
  unint64_t result = qword_10012A610;
  if (!qword_10012A610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A610);
  }
  return result;
}

ValueMetadata *type metadata accessor for DriverVariant()
{
  return &type metadata for DriverVariant;
}

unsigned char *storeEnumTagSinglePayload for DriverVariant.Configuration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C4F90);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DriverVariant.Configuration()
{
  return &type metadata for DriverVariant.Configuration;
}

Class sub_1000C4FC8(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_10000CECC(0, &qword_10012A6B8);
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_1000C5064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v5 = sub_1000199D0(a2), (v6 & 1) != 0)) {
    sub_10001A1C8(*(void *)(a1 + 56) + 32 * v5, (uint64_t)v11);
  }
  else {
    memset(v11, 0, sizeof(v11));
  }
  sub_100038EBC((uint64_t)v11, (uint64_t)&v9);
  if (v10)
  {
    sub_10000CDA8(&v9, a3);
  }
  else
  {
    sub_100038E5C((uint64_t)&v9);
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v7 = 4;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0xE000000000000000;
    strcpy((char *)(v7 + 24), "tryUnwrap(_:)");
    *(_WORD *)(v7 + 38) = -4864;
    *(void *)(v7 + 40) = 0xD00000000000001DLL;
    *(void *)(v7 + 48) = 0x80000001000E72B0;
    *(void *)(v7 + 56) = 23;
    swift_willThrow();
  }
  return sub_100038E5C((uint64_t)v11);
}

uint64_t sub_1000C5184(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) && (uint64_t v2 = a1, v4 = sub_1000199D0(a2), (v5 & 1) != 0)) {
    sub_10001A1C8(*(void *)(v2 + 56) + 32 * v4, (uint64_t)v11);
  }
  else {
    memset(v11, 0, sizeof(v11));
  }
  sub_100038EBC((uint64_t)v11, (uint64_t)&v8);
  if (!v9)
  {
    sub_100038E5C((uint64_t)&v8);
    uint64_t v2 = 0;
LABEL_10:
    sub_100038E5C((uint64_t)v11);
    return v2;
  }
  sub_10000CDA8(&v8, v10);
  uint64_t v6 = sub_1000C5268((uint64_t)v10);
  if (!v3)
  {
    uint64_t v2 = v6;
    sub_10001ABC4((uint64_t)v10);
    goto LABEL_10;
  }
  sub_10001ABC4((uint64_t)v10);
  sub_100038E5C((uint64_t)v11);
  return v2;
}

uint64_t sub_1000C5268(uint64_t a1)
{
  sub_10001A1C8(a1, (uint64_t)v4);
  if (swift_dynamicCast()) {
    return v3;
  }
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v2 = 4;
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = 0xE000000000000000;
  strcpy((char *)(v2 + 24), "coerce(_:to:)");
  *(_WORD *)(v2 + 38) = -4864;
  *(void *)(v2 + 40) = 0xD000000000000019;
  *(void *)(v2 + 48) = 0x80000001000E7310;
  *(void *)(v2 + 56) = 34;
  return swift_willThrow();
}

uint64_t sub_1000C534C(uint64_t a1)
{
  sub_10001A1C8(a1, (uint64_t)v3);
  sub_10000CECC(0, (unint64_t *)&qword_100127470);
  if (swift_dynamicCast()) {
    return v3[5];
  }
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v2 = 4;
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = 0xE000000000000000;
  strcpy((char *)(v2 + 24), "coerce(_:to:)");
  *(_WORD *)(v2 + 38) = -4864;
  *(void *)(v2 + 40) = 0xD000000000000019;
  *(void *)(v2 + 48) = 0x80000001000E7310;
  *(void *)(v2 + 56) = 34;
  return swift_willThrow();
}

uint64_t static USBDevice.create(hostObject:requireHostInterfaces:analyticsOnly:deviceService:plugin:)(void *a1, char a2, char a3, void *a4, void *a5)
{
  return sub_1000CB040(a1, a2, a3, a4, a5);
}

unint64_t sub_1000C545C(int a1)
{
  if ((a1 & 0x10000) != 0)
  {
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    return 0xD000000000000010;
  }
  else
  {
    id v11 = 0;
    id v2 = [v1 stringWithIndex:a1 languageID:1033 error:&v11];
    id v3 = v11;
    if (v2)
    {
      unint64_t v4 = v2;
      id v5 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v6 = v3;
    }
    else
    {
      id v8 = v11;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v9 = (void *)_convertErrorToNSError(_:)();
      id v5 = [v9 code];

      if (v5 == (id)-536870206 || v5 == (id)-536850432)
      {
        swift_errorRelease();
        return 0;
      }
      else
      {
        swift_willThrow();
      }
    }
  }
  return (unint64_t)v5;
}

uint64_t USBDevice.speed.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_speed);
}

uint64_t USBDevice.deviceDescriptor.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor);
}

uint64_t USBDevice.bosDescriptor.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_bosDescriptor);
}

uint64_t USBDevice.configList.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t USBDevice.configList.setter(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_configList);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*USBDevice.configList.modify())()
{
  return j__swift_endAccess;
}

uint64_t USBDevice.activeConfig.getter()
{
  return swift_retain();
}

uint64_t USBDevice.activeConfig.setter(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*USBDevice.activeConfig.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t USBDevice.deviceAddress.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceAddress);
}

uint64_t USBDevice.curConfigNum.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_curConfigNum);
}

uint64_t USBDevice.vendorID.getter()
{
  return *(unsigned __int16 *)(*(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor) + 8);
}

uint64_t USBDevice.productID.getter()
{
  return *(unsigned __int16 *)(*(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor) + 10);
}

uint64_t USBDevice.bcdDevice.getter()
{
  return *(unsigned __int16 *)(*(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor) + 12);
}

id USBDevice.locationID.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceService);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 propertyForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_10005415C((uint64_t)v7, (uint64_t)v8, (uint64_t *)&unk_100129170);
  if (!v9)
  {
    sub_100038E5C((uint64_t)v8);
    return 0;
  }
  sub_10000CECC(0, (unint64_t *)&qword_100127470);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  id v4 = [v6 unsignedIntegerValue];

  return v4;
}

uint64_t USBDevice.highestExceptionLevel.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig;
  swift_beginAccess();
  if (!*(void *)v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return 0;
  }
  swift_bridgeObjectRetain();
  LOBYTE(v4) = 0;
  uint64_t v5 = 32;
  do
  {
    long long v6 = *(_OWORD *)(v2 + v5);
    long long v7 = *(_OWORD *)(v2 + v5 + 32);
    v16[1] = *(_OWORD *)(v2 + v5 + 16);
    v16[2] = v7;
    v16[0] = v6;
    long long v8 = *(_OWORD *)(v2 + v5 + 48);
    long long v9 = *(_OWORD *)(v2 + v5 + 64);
    long long v10 = *(_OWORD *)(v2 + v5 + 96);
    void v16[5] = *(_OWORD *)(v2 + v5 + 80);
    v16[6] = v10;
    v16[3] = v8;
    unsigned char v16[4] = v9;
    long long v11 = *(_OWORD *)(v2 + v5 + 112);
    long long v12 = *(_OWORD *)(v2 + v5 + 128);
    long long v13 = *(_OWORD *)(v2 + v5 + 144);
    uint64_t v17 = *(void *)(v2 + v5 + 160);
    v16[8] = v12;
    v16[9] = v13;
    v16[7] = v11;
    sub_10006CF24(v16);
    unsigned int v14 = Function.highestExceptionLevel.getter();
    sub_10001D0D8(v16);
    if (v4 <= v14) {
      uint64_t v4 = v14;
    }
    else {
      uint64_t v4 = v4;
    }
    v5 += 168;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v4;
}

void *USBDevice.usbHostObject.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject);
  id v2 = v1;
  return v1;
}

id USBDevice.deviceService.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceService);
}

id USBDevice.timeCorrelater.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_timeCorrelater);
}

char *sub_1000C5B18(unsigned __int8 a1, void *a2, uint64_t a3, uint64_t a4)
{
  long long v9 = *(void **)(v4 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceService);
  id aBlock = 0;
  id v10 = [v9 childIteratorInServicePlaneWithError:&aBlock];
  id v11 = aBlock;
  if (!v10)
  {
    uint64_t v15 = (char *)aBlock;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v15;
  }
  long long v12 = v10;
  uint64_t v43 = a2;
  id aBlock = 0;
  uint64_t v48 = 0xE000000000000000;
  id v13 = v11;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  id aBlock = (id)0xD00000000000001DLL;
  uint64_t v48 = 0x80000001000E7040;
  LOBYTE(v53[0]) = a1;
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = "looking for interface number ";
  sub_10002E804((uint64_t)aBlock, v48, 0xD000000000000038, (void *)0x80000001000E7060, 0xD000000000000019, 0x80000001000E6D10, 146);
  swift_bridgeObjectRelease();
  id v16 = [v12 nextObject];
  if (!v16)
  {
LABEL_29:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v37 = 70;
    *(void *)(v37 + 8) = 0;
    *(void *)(v37 + 16) = 0xE000000000000000;
    *(void *)(v37 + 24) = 0xD000000000000038;
    *(void *)(v37 + 32) = 0x80000001000E7060;
    *(void *)(v37 + 40) = 0xD000000000000019;
    *(void *)(v37 + 48) = 0x80000001000E6D10;
    *(void *)(v37 + 56) = 167;
    swift_willThrow();

    return v15;
  }
  unsigned __int8 v17 = a1;
  id v18 = v16;
  unsigned __int8 v41 = v17;
  uint64_t v42 = a4;
  unsigned __int8 v19 = 0;
  unint64_t v45 = v17;
  while (2)
  {
    uint64_t v44 = v19;
    while (1)
    {
      NSString v20 = String._bridgeToObjectiveC()();
      unsigned int v21 = [v18 conformsToIOClassName:v20];

      if (!v21) {
        goto LABEL_7;
      }
      if (qword_1001268F0 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_10000AD60(v22, (uint64_t)qword_10012B1F8);
      int v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        id aBlock = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136446210;
        uint64_t v26 = sub_10002E8A0(0xD00000000000001BLL, 0x80000001000E70A0, 0xD000000000000038, (void *)0x80000001000E7060);
        *(void *)(v25 + 4) = sub_1000192BC(v26, v27, (uint64_t *)&aBlock);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s", (uint8_t *)v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      self;
      uint64_t v28 = swift_dynamicCastObjCClass();
      if (!v28) {
        goto LABEL_7;
      }
      __n128 v29 = (void *)v28;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v18 = v18;
      NSString v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v31 = [v29 propertyForKey:v30];

      if (v31)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v53, 0, sizeof(v53));
      }
      sub_10005415C((uint64_t)v53, (uint64_t)&aBlock, (uint64_t *)&unk_100129170);
      if (!v50)
      {

        sub_100038E5C((uint64_t)&aBlock);
        goto LABEL_8;
      }
      sub_10000CECC(0, (unint64_t *)&qword_100127470);
      if (swift_dynamicCast()) {
        break;
      }
LABEL_6:

LABEL_7:
LABEL_8:
      id v18 = [v12 nextObject];
      if (!v18)
      {
        uint64_t v15 = v44;
        goto LABEL_27;
      }
    }
    if ([v46 integerValue] != (id)v45)
    {

      goto LABEL_6;
    }
    id aBlock = 0;
    uint64_t v48 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    id aBlock = (id)0xD00000000000002ALL;
    uint64_t v48 = 0x80000001000E70C0;
    LOBYTE(v53[0]) = v41;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    sub_10002E804((uint64_t)aBlock, v48, 0xD000000000000038, (void *)0x80000001000E7060, 0xD000000000000019, 0x80000001000E6D10, 158);
    swift_bridgeObjectRelease();
    unsigned int v40 = [v18 object];
    id v33 = objc_allocWithZone((Class)IOUSBHostInterface);
    uint64_t v51 = a3;
    uint64_t v52 = v42;
    id aBlock = _NSConcreteStackBlock;
    uint64_t v48 = 1107296256;
    unsigned __int16 v49 = sub_1000C9D5C;
    unsigned __int8 v50 = &unk_10011C448;
    uint64_t v34 = _Block_copy(&aBlock);
    swift_retain();
    int v35 = v43;
    swift_release();
    id aBlock = 0;
    uint64_t v15 = (char *)[v33 initWithIOService:v40 options:0 queue:v35 error:&aBlock interestHandler:v34];
    _Block_release(v34);
    id v36 = aBlock;
    if (!v15)
    {
      uint64_t v39 = v36;
      uint64_t v15 = v35;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return v15;
    }

    id v18 = [v12 nextObject];
    unsigned __int8 v19 = v15;
    if (v18) {
      continue;
    }
    break;
  }
LABEL_27:
  if (!v15) {
    goto LABEL_29;
  }

  return v15;
}

void sub_1000C62A0(void *a1, void *a2, char a3, char a4, uint64_t a5, uint64_t a6, void *a7)
{
  *(void *)&v7[OBJC_IVAR____TtC9AUASDCore9USBDevice_configList] = _swiftEmptyArrayStorage;
  *(void *)&v7[OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig] = 0;
  long long v145 = &v7[OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlConfig];
  *(_OWORD *)&v7[OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlConfig] = xmmword_1000EF510;
  id v162 = (id)OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlDescriptorData;
  *(void *)&v7[OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlDescriptorData] = _swiftEmptyArrayStorage;
  Swift::String v14 = v7;
  sub_1000CAF08(a2, &v151);
  if (v8)
  {
    swift_bridgeObjectRelease();

LABEL_3:
    type metadata accessor for USBDevice();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000541C0(*(void *)v145, *((void *)v145 + 1));
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return;
  }
  int v141 = a2;
  uint64_t v142 = v14;
  char v138 = a3;
  char v139 = a4;
  uint64_t v15 = (unsigned __int16 *)[a1 deviceDescriptor];
  if (!v15)
  {
    swift_bridgeObjectRelease();

    sub_1000CB8AC((uint64_t)&v151);
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v26 = 65;
    *(void *)(v26 + 8) = 0;
    *(void *)(v26 + 16) = 0xE000000000000000;
    *(void *)(v26 + 24) = 0xD000000000000051;
    *(void *)(v26 + 32) = 0x80000001000E71D0;
    *(void *)(v26 + 40) = 0xD000000000000019;
    *(void *)(v26 + 48) = 0x80000001000E6D10;
    *(void *)(v26 + 56) = 264;
    swift_willThrow();

    goto LABEL_3;
  }
  id v16 = v15;
  uint64_t v140 = a7;
  unsigned int v17 = v15[1];
  unsigned __int16 v136 = v15[4];
  unsigned __int16 v18 = v15[5];
  unsigned int v19 = v15[6];
  uint64_t v134 = *((unsigned __int8 *)v15 + 15);
  int v20 = *((unsigned __int8 *)v15 + 17);
  self;
  unsigned int v21 = (void *)swift_dynamicCastObjCClass();
  if (v21)
  {
    id v22 = a1;
    int v23 = (unsigned __int8 *)[v21 configurationDescriptor];
    if (v23)
    {
      os_log_type_t v24 = v23;
      __int16 v131 = *((unsigned __int8 *)[v21 interfaceDescriptor] + 2);

      if (v20) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
    swift_bridgeObjectRelease();

    sub_1000CB8AC((uint64_t)&v151);
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v32 = 71;
    *(void *)(v32 + 8) = 0;
    *(void *)(v32 + 16) = 0xE000000000000000;
    *(void *)(v32 + 24) = 0xD000000000000051;
    *(void *)(v32 + 32) = 0x80000001000E71D0;
    *(void *)(v32 + 40) = 0xD000000000000019;
    *(void *)(v32 + 48) = 0x80000001000E6D10;
    uint64_t v33 = 273;
LABEL_40:
    *(void *)(v32 + 56) = v33;
    swift_willThrow();

    goto LABEL_41;
  }
  self;
  uint64_t v27 = swift_dynamicCastObjCClass();
  if (!v27)
  {
    swift_bridgeObjectRelease();

    sub_1000CB8AC((uint64_t)&v151);
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v30 = 5;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0xE000000000000000;
    *(void *)(v30 + 24) = 0xD000000000000051;
    *(void *)(v30 + 32) = 0x80000001000E71D0;
    *(void *)(v30 + 40) = 0xD000000000000019;
    *(void *)(v30 + 48) = 0x80000001000E6D10;
    uint64_t v31 = 289;
    goto LABEL_38;
  }
  uint64_t v28 = (void *)v27;
  id v22 = a1;
  __n128 v29 = (unsigned __int8 *)[v28 configurationDescriptor];
  if (!v29)
  {
    swift_bridgeObjectRelease();

    sub_1000CB8AC((uint64_t)&v151);
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v32 = 71;
    *(void *)(v32 + 8) = 0;
    *(void *)(v32 + 16) = 0xE000000000000000;
    *(void *)(v32 + 24) = 0xD000000000000051;
    *(void *)(v32 + 32) = 0x80000001000E71D0;
    *(void *)(v32 + 40) = 0xD000000000000019;
    *(void *)(v32 + 48) = 0x80000001000E6D10;
    uint64_t v33 = 282;
    goto LABEL_40;
  }
  os_log_type_t v24 = v29;
  __int16 v131 = 0;

  if (!v20)
  {
LABEL_14:
    swift_bridgeObjectRelease();

    sub_1000CB8AC((uint64_t)&v151);
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v30 = 66;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0xE000000000000000;
    *(void *)(v30 + 24) = 0xD000000000000051;
    *(void *)(v30 + 32) = 0x80000001000E71D0;
    *(void *)(v30 + 40) = 0xD000000000000019;
    *(void *)(v30 + 48) = 0x80000001000E6D10;
    uint64_t v31 = 293;
LABEL_38:
    *(void *)(v30 + 56) = v31;
    swift_willThrow();

LABEL_41:
    goto LABEL_3;
  }
LABEL_8:
  uint64_t v130 = v21;
  __int16 v132 = v20;
  if (v17 < 0x201) {
    id v25 = 0;
  }
  else {
    id v25 = [a1 capabilityDescriptors];
  }
  *(void *)&v142[OBJC_IVAR____TtC9AUASDCore9USBDevice_bosDescriptor] = v25;
  *(void *)&v142[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor] = v16;
  uint64_t v34 = v153;
  int v35 = &v142[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName];
  *(void *)int v35 = v152;
  *((void *)v35 + 1) = v34;
  *(void *)&v142[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject] = a1;
  *(_DWORD *)&v142[OBJC_IVAR____TtC9AUASDCore9USBDevice_speed] = v151;
  *(void *)&v142[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceService] = v141;
  id v36 = a1;
  swift_bridgeObjectRetain();
  id v37 = v141;
  unint64_t v38 = (unint64_t)[v36 deviceAddress];
  if ((v38 & 0x8000000000000000) != 0) {
    goto LABEL_98;
  }
  *(void *)&v142[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceAddress] = v38;
  *(void *)&v142[OBJC_IVAR____TtC9AUASDCore9USBDevice_curConfigNum] = v24[5];
  id v39 = [objc_allocWithZone((Class)USBFrameTimeCorrelater) initWithIOUSBHostObject:v36];
  *(void *)&v142[OBJC_IVAR____TtC9AUASDCore9USBDevice_timeCorrelater] = v39;
  long long v150 = _swiftEmptyArrayStorage;
  if (qword_100126930 != -1) {
    swift_once();
  }
  uint64_t v40 = qword_10012B2A0;
  char v41 = sub_1000BCF84(v136);
  int v42 = sub_1000BD27C(v18);
  uint64_t v43 = _swiftEmptyArrayStorage;
  if (*(void *)(v40 + 16))
  {
    int v44 = v42 == 65 ? 0 : v42;
    unsigned __int8 v45 = v41 == 35 ? 0 : v41;
    unint64_t v46 = sub_100019A58(v45 | (v44 << 8));
    if (v47)
    {
      uint64_t v48 = *(void *)(*(void *)(v40 + 56) + 8 * v46);
      uint64_t v49 = *(void *)(v48 + 16);
      if (v49)
      {
        id v50 = v36;
        swift_bridgeObjectRetain();
        uint64_t v51 = v48 + 40;
        do
        {
          if (v19 >= *(unsigned __int16 *)(v51 - 8) && *(unsigned __int16 *)(v51 - 6) >= v19)
          {
            uint64_t v53 = swift_bridgeObjectRetain();
            sub_1000A213C(v53);
          }
          v51 += 16;
          --v49;
        }
        while (v49);
        swift_bridgeObjectRelease();
        id v36 = v50;
        uint64_t v43 = v150;
      }
    }
  }
  long long v54 = (void *)v43[2];
  if (v54)
  {
    swift_bridgeObjectRetain();
    long long v54 = v43;
  }
  *(void *)&v142[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList] = v54;

  NSString v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v149.receiver = v142;
  v149.super_class = (Class)type metadata accessor for USBDevice();
  id v56 = objc_msgSendSuper2(&v149, "initWithBoxUID:withPlugin:", v55, v140);

  if (!v56)
  {
    __break(1u);
LABEL_98:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_99;
  }
  id v162 = v37;
  swift_bridgeObjectRetain();
  id v57 = v56;
  NSString v58 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v57 setManufacturerName:v58];

  sub_10005415C((uint64_t)&v156, (uint64_t)v159, &qword_100127B18);
  sub_10005415C((uint64_t)v159, (uint64_t)v160, &qword_100127B18);
  NSString v59 = v161;
  char v60 = v36;
  if (v161)
  {
    id v61 = v57;
    sub_1000CB8F8((uint64_t)v159);
    NSString v59 = String._bridgeToObjectiveC()();
    sub_1000CB924((uint64_t)v159);
  }
  else
  {
    id v62 = v57;
  }
  [v57 setSerialNumber:v59];

  sub_10000AC7C(&qword_100127420);
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_1000E8090;
  uint64_t v64 = *((void *)&v151 + 1);
  *(void *)(v63 + 56) = &type metadata for Int;
  *(void *)(v63 + 64) = &protocol witness table for Int;
  *(void *)(v63 + 32) = v64;
  id v65 = v57;
  String.init(format:_:)();
  NSString v66 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v65 setFirmwareVersion:v66];

  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_1000EA840;
  *(void *)(v67 + 56) = &type metadata for Int;
  *(void *)(v67 + 64) = &protocol witness table for Int;
  uint64_t v68 = v154;
  *(void *)(v67 + 32) = v155;
  *(void *)(v67 + 96) = &type metadata for Int;
  *(void *)(v67 + 104) = &protocol witness table for Int;
  *(void *)(v67 + 72) = v68;
  uint64_t v69 = String.init(format:_:)();
  uint64_t v71 = v70;
  __int16 v72 = (char *)v65;
  NSString v73 = String._bridgeToObjectiveC()();
  [v72 setModelUID:v73];

  id v74 = v60;
  uint64_t v75 = sub_1000C9DE0(v132 << 8, v74);
  uint64_t v129 = v69;

  char v76 = v140;
  id v77 = v162;
  uint64_t v143 = v75[2];
  if (!v143)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000CB8AC((uint64_t)&v151);
    swift_bridgeObjectRelease();

    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v104 = 66;
    *(void *)(v104 + 8) = 0;
    *(void *)(v104 + 16) = 0xE000000000000000;
    *(void *)(v104 + 24) = 0xD000000000000051;
    *(void *)(v104 + 32) = 0x80000001000E71D0;
    *(void *)(v104 + 40) = 0xD000000000000019;
    *(void *)(v104 + 48) = 0x80000001000E6D10;
    uint64_t v105 = 345;
LABEL_66:
    *(void *)(v104 + 56) = v105;
    swift_willThrow();

    return;
  }
  long long v133 = v71;
  uint64_t v78 = v75 + 4;
  swift_bridgeObjectRetain();
  uint64_t v79 = 0;
  long long v146 = _swiftEmptyArrayStorage;
  uint64_t v135 = v74;
  long long v137 = v75 + 4;
  unint64_t v80 = &qword_10012A000;
  do
  {
    uint64_t v147 = v79;
    long long v144 = (const IOUSBConfigurationDescriptor *)v78[v79];
    uint64_t v81 = sub_10009E694(v144);
    uint64_t v82 = sub_10009EE6C((uint64_t)v81);
    __int16 v83 = _s9AUASDCore15DescriptorUtilsV27usbAudioFunctionDescriptorsySaySayAA13USBDescriptorOG07controlG0_SayAF15streamInterface_SayAGG0J10AlternatestG0jG0tGAGFZ_0((uint64_t)v81);
    swift_bridgeObjectRelease();
    int64_t v84 = v83[2];
    if (v84)
    {
      sub_10007C86C(0, v84, 0);
      __int16 v85 = v83 + 5;
      do
      {
        uint64_t v86 = *(v85 - 1);
        uint64_t v87 = *v85;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        sub_10006A97C(v86, v87, (uint64_t)v82, (uint64_t)v157);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v89 = _swiftEmptyArrayStorage[2];
        unint64_t v88 = _swiftEmptyArrayStorage[3];
        if (v89 >= v88 >> 1) {
          sub_10007C86C(v88 > 1, v89 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v89 + 1;
        __int16 v90 = &_swiftEmptyArrayStorage[21 * v89];
        long long v91 = v157[0];
        long long v92 = v157[2];
        *((_OWORD *)v90 + 3) = v157[1];
        *((_OWORD *)v90 + 4) = v92;
        *((_OWORD *)v90 + 2) = v91;
        long long v93 = v157[3];
        long long v94 = v157[4];
        long long v95 = v157[6];
        *((_OWORD *)v90 + 7) = v157[5];
        *((_OWORD *)v90 + 8) = v95;
        *((_OWORD *)v90 + 5) = v93;
        *((_OWORD *)v90 + 6) = v94;
        long long v96 = v157[7];
        long long v97 = v157[8];
        long long v98 = v157[9];
        v90[24] = v158;
        *((_OWORD *)v90 + 10) = v97;
        *((_OWORD *)v90 + 11) = v98;
        *((_OWORD *)v90 + 9) = v96;
        v85 += 2;
        --v84;
      }
      while (v84);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v99 = v146;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v99 = sub_100059EC4(0, v146[2] + 1, 1, v146);
      }
      id v77 = v162;
      uint64_t v78 = v137;
      unint64_t v102 = v99[2];
      unint64_t v101 = v99[3];
      long long v146 = v99;
      unint64_t v80 = &qword_10012A000;
      if (v102 >= v101 >> 1)
      {
        uint64_t v78 = v137;
        long long v146 = sub_100059EC4((void *)(v101 > 1), v102 + 1, 1, v99);
      }
      v146[2] = v102 + 1;
      __int16 v103 = &v146[2 * v102];
      v103[4] = v144;
      v103[5] = _swiftEmptyArrayStorage;
      id v74 = v135;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v77 = v162;
      uint64_t v78 = v137;
    }
    uint64_t v79 = v147 + 1;
    char v76 = v140;
  }
  while (v147 + 1 != v143);
  swift_bridgeObjectRelease_n();
  if (!v146[2])
  {
    swift_bridgeObjectRelease();
    sub_1000CB8AC((uint64_t)&v151);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v104 = 67;
    *(void *)(v104 + 8) = 0;
    *(void *)(v104 + 16) = 0xE000000000000000;
    *(void *)(v104 + 24) = 0xD000000000000051;
    *(void *)(v104 + 32) = 0x80000001000E71D0;
    *(void *)(v104 + 40) = 0xD000000000000019;
    *(void *)(v104 + 48) = 0x80000001000E6D10;
    uint64_t v105 = 352;
    goto LABEL_66;
  }
  uint64_t v106 = &v72[v80[198]];
  swift_beginAccess();
  *(void *)uint64_t v106 = v146;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v107 = v146[2];
  if (!v107)
  {
LABEL_72:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1000CB8AC((uint64_t)&v151);
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v108 = OBJC_IVAR____TtC9AUASDCore9USBDevice_curConfigNum;
  int v109 = v146 + 5;
  while (1)
  {
    uint64_t v110 = *(v109 - 1);
    if (*(void *)&v72[OBJC_IVAR____TtC9AUASDCore9USBDevice_curConfigNum] == *(unsigned __int8 *)(v110 + 5)) {
      break;
    }
    v109 += 2;
    if (!--v107) {
      goto LABEL_72;
    }
  }
  uint64_t v111 = *v109;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v148 = v111;
  if (!*(void *)(v111 + 16))
  {
LABEL_83:
    sub_1000CB8AC((uint64_t)&v151);
    goto LABEL_84;
  }
  int v112 = *(unsigned __int8 *)(*(void *)(v111 + 32) + 8);
  if (!v112 || (v139 & 1) != 0)
  {
    if (v134)
    {
      swift_bridgeObjectRetain();
      sub_1000CB8AC((uint64_t)&v151);
      char v113 = v139;
      goto LABEL_85;
    }
    goto LABEL_83;
  }
  sub_1000CB8AC((uint64_t)&v151);
  sub_1000C545C(v112);
  if (v114)
  {
    char v113 = v139;
    goto LABEL_85;
  }
LABEL_84:
  char v113 = v139;
LABEL_85:
  int v115 = v72;
  NSString v116 = String._bridgeToObjectiveC()();
  [v115 setBoxName:v116];

  uint64_t v117 = v115;
  v118._countAndFlagsBits = 58;
  v118._object = (void *)0xE100000000000000;
  String.append(_:)(v118);
  v119._countAndFlagsBits = v129;
  v119._object = v133;
  String.append(_:)(v119);
  swift_bridgeObjectRelease();
  NSString v120 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v117 setModelName:v120];

  if ((v113 & 1) != 0 || (sub_10009E628(v131 | (unsigned __int16)((v130 == 0) << 8), v110, v148) & 1) == 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    id v123 = v162;
LABEL_90:

    return;
  }
  if (*(void *)&v72[v108] != *(unsigned __int8 *)(v110 + 5))
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v124 = 52;
    *(void *)(v124 + 8) = 0;
    *(void *)(v124 + 16) = 0xE000000000000000;
    *(void *)(v124 + 24) = 0xD000000000000023;
    *(void *)(v124 + 32) = 0x80000001000E7230;
    *(void *)(v124 + 40) = 0xD00000000000001DLL;
    *(void *)(v124 + 48) = 0x80000001000E5E30;
    *(void *)(v124 + 56) = 176;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v121 = v117;
  uint64_t v122 = swift_bridgeObjectRetain();
  unint64_t v125 = sub_1000CA894(v122, v121, v138 & 1);
  swift_bridgeObjectRelease();

  type metadata accessor for ActiveConfiguration();
  uint64_t v126 = (void *)swift_allocObject();
  v126[2] = v110;
  v126[3] = v122;
  void v126[4] = v125;
  uint64_t v127 = &v121[OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig];
  swift_beginAccess();
  *(void *)uint64_t v127 = v126;
  swift_release();
  if (!*(void *)v127)
  {

    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v128 = 68;
    *(void *)(v128 + 8) = 0;
    *(void *)(v128 + 16) = 0xE000000000000000;
    *(void *)(v128 + 24) = 0xD000000000000051;
    *(void *)(v128 + 32) = 0x80000001000E71D0;
    *(void *)(v128 + 40) = 0xD000000000000019;
    *(void *)(v128 + 48) = 0x80000001000E6D10;
    *(void *)(v128 + 56) = 391;
    swift_willThrow();

    return;
  }
  sub_1000C79AC();
  if (*(void *)v127)
  {
    swift_retain();
    swift_bridgeObjectRelease();
    sub_10001D234();

    swift_release();
    id v123 = v140;
    goto LABEL_90;
  }
LABEL_99:
  __break(1u);
}

id sub_1000C7728(uint64_t (*a1)(void, void), uint64_t a2)
{
  uint64_t v4 = v2;
  id result = [v4 audioDevices];
  if (result)
  {
    uint64_t v8 = result;
    sub_10000CECC(0, &qword_100128590);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_unknownObjectRetain();
    unint64_t v10 = (unint64_t)sub_1000CA51C(v9, a1, a2);
    swift_bridgeObjectRelease();
    id result = (id)swift_unknownObjectRelease();
    if (v3) {
      return a1;
    }
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      a1 = (uint64_t (*)(void, void))_CocoaArrayWrapper.endIndex.getter();
      id result = (id)swift_bridgeObjectRelease();
      if (a1 != (uint64_t (*)(void, void))1)
      {
LABEL_5:
        if (a1)
        {
          swift_bridgeObjectRelease();
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v11 = 1;
          *(void *)(v11 + 8) = 0;
          *(void *)(v11 + 16) = 0xE000000000000000;
          *(void *)(v11 + 24) = 0xD00000000000001BLL;
          *(void *)(v11 + 32) = 0x80000001000E7020;
          *(void *)(v11 + 40) = 0xD000000000000019;
          *(void *)(v11 + 48) = 0x80000001000E6D10;
          *(void *)(v11 + 56) = 409;
          swift_willThrow();
          return a1;
        }
LABEL_16:
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      a1 = *(uint64_t (**)(void, void))((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (a1 != (uint64_t (*)(void, void))1) {
        goto LABEL_5;
      }
    }
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      a1 = (uint64_t (*)(void, void))_CocoaArrayWrapper.endIndex.getter();
      id result = (id)swift_bridgeObjectRelease();
      if (!a1) {
        goto LABEL_16;
      }
    }
    else
    {
      a1 = *(uint64_t (**)(void, void))((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!a1) {
        goto LABEL_16;
      }
    }
    if ((v10 & 0xC000000000000001) != 0)
    {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_15;
    }
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v12 = *(id *)(v10 + 32);
LABEL_15:
      a1 = (uint64_t (*)(void, void))v12;
      goto LABEL_16;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall USBDevice.cleanup()()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig);
  swift_beginAccess();
  if (*v1)
  {
    swift_retain();
    sub_10001D2EC();
    swift_release();
  }
  *uint64_t v1 = 0;
  swift_release();
}

void sub_1000C79AC()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject];
  if (v1)
  {
    id v2 = v0;
    id v3 = v1;
    id v4 = [objc_allocWithZone((Class)NSMutableData) initWithLength:64];
    uint64_t v50 = 0;
    id aBlock = 0;
    unsigned int v5 = [v3 sendDeviceRequest:0x40000003000680 data:v4 bytesTransferred:&v50 completionTimeout:&aBlock error:5.0];
    long long v6 = aBlock;
    if (v5)
    {
      if (v50 < 4)
      {
        uint64_t v26 = aBlock;

LABEL_14:
        id v3 = v4;
LABEL_16:

        return;
      }
      if (!v4)
      {
        uint64_t v27 = aBlock;
        goto LABEL_16;
      }
      id v7 = v4;
      uint64_t v8 = v6;
      id v4 = v7;
      unint64_t v9 = [v4 bytes];
      id v10 = [v4 length];
      if (v9) {
        uint64_t v11 = (uint64_t)v10 + (void)v9;
      }
      else {
        uint64_t v11 = 0;
      }
      id v12 = sub_1000781B8(1, v9, v11);
      if (*((void *)v12 + 2))
      {
        uint64_t v15 = v13;
        uint64_t v16 = v14;
        int v17 = v12[32];
        swift_bridgeObjectRelease();
        unsigned __int16 v18 = sub_1000781B8(1, v15, v16);
        if (*((void *)v18 + 2))
        {
          unsigned int v21 = v19;
          uint64_t v22 = v20;
          int v23 = v18[32];
          swift_bridgeObjectRelease();
          if (v23 == 3)
          {
            os_log_type_t v24 = sub_100075CE8((__int16 *)((uint64_t)(int)(v17 - 2 + (((v17 - 2) & 0x8000u) >> 15)) >> 1), v21, v22);
            uint64_t v30 = v24;
            uint64_t v31 = *((void *)v24 + 2);
            if (v31 && (v31 != 1 || v24[16] != 1033))
            {
              id aBlock = 0;
              uint64_t v45 = 0xE000000000000000;
              _StringGuts.grow(_:)(71);
              v32._countAndFlagsBits = 0x206120646E756F46;
              v32._object = (void *)0xEF20656369766564;
              String.append(_:)(v32);
              id v33 = [v2 boxName];
              if (v33)
              {
                uint64_t v34 = v33;
                uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                id v37 = v36;
              }
              else
              {
                id v37 = (void *)0xEE00656369766564;
                uint64_t v35 = 0x206E776F6E6B6E55;
              }
              v38._countAndFlagsBits = v35;
              v38._object = v37;
              String.append(_:)(v38);
              swift_bridgeObjectRelease();
              v39._countAndFlagsBits = 0xD000000000000036;
              v39._object = (void *)0x80000001000E6FB0;
              String.append(_:)(v39);
              sub_10002E81C((uint64_t)aBlock, v45, 0xD000000000000010, (void *)0x80000001000E6F90, 0xD000000000000019, 0x80000001000E6D10, 486);
              swift_bridgeObjectRelease();
              NSString v40 = String._bridgeToObjectiveC()();
              uint64_t v41 = swift_allocObject();
              *(void *)(v41 + 16) = v2;
              *(void *)(v41 + 24) = v30;
              uint64_t v48 = sub_1000CB8A4;
              uint64_t v49 = v41;
              id aBlock = _NSConcreteStackBlock;
              uint64_t v45 = 1107296256;
              unint64_t v46 = sub_1000C4FC8;
              char v47 = &unk_10011C420;
              int v42 = _Block_copy(&aBlock);
              id v43 = v2;
              swift_release();
              AnalyticsSendEventLazy();

              _Block_release(v42);
              id v3 = v40;
              goto LABEL_16;
            }
            swift_bridgeObjectRelease();

            goto LABEL_14;
          }
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v28 = 1;
          *(void *)(v28 + 8) = 0;
          *(void *)(v28 + 16) = 0xE000000000000000;
          *(void *)(v28 + 24) = 0xD000000000000010;
          *(void *)(v28 + 32) = 0x80000001000E6F90;
          *(void *)(v28 + 40) = 0xD000000000000019;
          *(void *)(v28 + 48) = 0x80000001000E6D10;
          *(void *)(v28 + 56) = 480;
          swift_willThrow();

          goto LABEL_18;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
    id v25 = aBlock;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_18:

    sub_10000AC7C(&qword_100127410);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_1000E8090;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 32) = 0xD000000000000026;
    *(void *)(v29 + 40) = 0x80000001000E6F60;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();

    swift_errorRelease();
  }
}

unint64_t sub_1000C7EE4(char *a1, uint64_t a2)
{
  id v4 = [a1 boxName];
  if (!v4)
  {
    sub_10000CECC(0, (unint64_t *)&unk_100129180);
    id v4 = (id)NSString.init(stringLiteral:)();
  }
  sub_10000AC7C((uint64_t *)&unk_100129190);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000EB1F0;
  *(void *)(inited + 32) = 4475222;
  *(void *)(inited + 40) = 0xE300000000000000;
  uint64_t v6 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor];
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(unsigned __int16 *)(v6 + 8)];
  *(void *)(inited + 56) = 4475216;
  *(void *)(inited + 64) = 0xE300000000000000;
  *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(unsigned __int16 *)(v6 + 10)];
  strcpy((char *)(inited + 80), "productString");
  *(_WORD *)(inited + 94) = -4864;
  *(void *)(inited + 96) = v4;
  strcpy((char *)(inited + 104), "languageCount");
  *(_WORD *)(inited + 118) = -4864;
  uint64_t v7 = *(void *)(a2 + 16);
  id v8 = objc_allocWithZone((Class)NSNumber);
  id v9 = v4;
  *(void *)(inited + 120) = [v8 initWithInteger:v7];
  *(void *)(inited + 128) = 0x65676175676E616CLL;
  *(void *)(inited + 136) = 0xE900000000000073;
  *(NSArray *)(inited + 144) = Array._bridgeToObjectiveC()();
  unint64_t v10 = sub_100008AF4(inited);

  return v10;
}

void sub_1000C80AC(unsigned __int8 a1, char a2, char a3, __int16 a4, unint64_t a5, unint64_t a6, unsigned __int8 a7, void *a8, uint64_t a9)
{
  if (a5 >= 0x10000) {
    goto LABEL_25;
  }
  __int16 v10 = a6;
  if (a6 >= 0x10000) {
    goto LABEL_25;
  }
  __int16 v13 = a5;
  char v14 = a3;
  if (!a8)
  {
    unint64_t v24 = 0;
    goto LABEL_13;
  }
  char v51 = a2;
  __int16 v52 = a4;
  id v16 = a8;
  uint64_t v17 = NSData.startIndex.getter();
  uint64_t v18 = NSData.endIndex.getter();
  uint64_t v19 = NSData.startIndex.getter();
  uint64_t v20 = NSData.endIndex.getter();
  if (v17 < v19 || v20 < v17)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unsigned __int8 v49 = a1;
  unsigned __int8 v21 = a7;
  uint64_t v22 = NSData.startIndex.getter();
  uint64_t v23 = NSData.endIndex.getter();

  if (v18 < v22 || v23 < v18) {
    goto LABEL_23;
  }
  unint64_t v24 = v18 - v17;
  if (__OFSUB__(v18, v17))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if ((v24 & 0x8000000000000000) != 0) {
    goto LABEL_25;
  }
  a7 = v21;
  a1 = v49;
  a2 = v51;
  a4 = v52;
  char v14 = a3;
  if (v24 >= 0x10000) {
    goto LABEL_25;
  }
LABEL_13:
  unsigned __int8 v25 = v14 & 0x1F | (a2 << 7) | 0x20;
  unsigned __int16 v26 = v13 | (a4 << 8);
  unsigned __int16 v27 = a7 | (unsigned __int16)(v10 << 8);
  sub_1000C90C4(((unint64_t)v27 << 32) | (v24 << 48) | ((unint64_t)v26 << 16) | ((unint64_t)a1 << 8) | v25, (uint64_t)a8, a9);
  if (v9)
  {
    unsigned __int8 v53 = v25;
    unsigned __int16 v54 = v27;
    uint64_t v28 = (void *)_convertErrorToNSError(_:)();
    id v29 = [v28 code];

    id v30 = [v55 boxName];
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v34 = v33;
    }
    else
    {
      uint64_t v34 = (void *)0xEE00656369766544;
      uint64_t v32 = 0x206E776F6E6B6E55;
    }
    if (v29 == (id)-536850432)
    {
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = v32;
      v35._object = v34;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._countAndFlagsBits = 0x64656C6C61745320;
      v36._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v36);
      sub_10000AC7C(&qword_100127420);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_1000EB1F0;
      *(void *)(v37 + 56) = &type metadata for UInt8;
      *(void *)(v37 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v37 + 32) = v53;
      *(void *)(v37 + 96) = &type metadata for UInt8;
      *(void *)(v37 + 104) = &protocol witness table for UInt8;
      *(unsigned char *)(v37 + 72) = a1;
      *(void *)(v37 + 136) = &type metadata for UInt16;
      *(void *)(v37 + 144) = &protocol witness table for UInt16;
      *(_WORD *)(v37 + 112) = v26;
      *(void *)(v37 + 176) = &type metadata for UInt16;
      *(void *)(v37 + 184) = &protocol witness table for UInt16;
      *(_WORD *)(v37 + 152) = v54;
      *(void *)(v37 + 216) = &type metadata for UInt16;
      *(void *)(v37 + 224) = &protocol witness table for UInt16;
      *(_WORD *)(v37 + 192) = v24;
      v38._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      uint64_t v39 = 0xD000000000000012;
      uint64_t v40 = 0x80000001000E6F40;
      uint64_t v41 = 535;
    }
    else
    {
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      sub_10000AC7C(&qword_100127420);
      uint64_t v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_1000E8090;
      *(void *)(v42 + 56) = &type metadata for Int;
      *(void *)(v42 + 64) = &protocol witness table for Int;
      *(void *)(v42 + 32) = v29;
      v43._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v44._countAndFlagsBits = 0xD000000000000020;
      v44._object = (void *)0x80000001000E6DD0;
      String.append(_:)(v44);
      v45._countAndFlagsBits = v32;
      v45._object = v34;
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      v46._countAndFlagsBits = 58;
      v46._object = (void *)0xE100000000000000;
      String.append(_:)(v46);
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_1000EB1F0;
      *(void *)(v47 + 56) = &type metadata for UInt8;
      *(void *)(v47 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v47 + 32) = v53;
      *(void *)(v47 + 96) = &type metadata for UInt8;
      *(void *)(v47 + 104) = &protocol witness table for UInt8;
      *(unsigned char *)(v47 + 72) = a1;
      *(void *)(v47 + 136) = &type metadata for UInt16;
      *(void *)(v47 + 144) = &protocol witness table for UInt16;
      *(_WORD *)(v47 + 112) = v26;
      *(void *)(v47 + 176) = &type metadata for UInt16;
      *(void *)(v47 + 184) = &protocol witness table for UInt16;
      *(_WORD *)(v47 + 152) = v54;
      *(void *)(v47 + 216) = &type metadata for UInt16;
      *(void *)(v47 + 224) = &protocol witness table for UInt16;
      *(_WORD *)(v47 + 192) = v24;
      v48._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      uint64_t v39 = 0x20726F727245;
      uint64_t v40 = 0xE600000000000000;
      uint64_t v41 = 537;
    }
    sub_10002E81C(v39, v40, 0xD000000000000082, (void *)0x80000001000E6EB0, 0xD000000000000019, 0x80000001000E6D10, v41);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

void sub_1000C864C(unsigned __int8 a1, char a2, char a3, unsigned __int16 a4, unint64_t a5, unsigned __int8 a6, void *a7, uint64_t a8)
{
  if (a5 >= 0x10000) {
    goto LABEL_24;
  }
  __int16 v11 = a5;
  unsigned __int8 v14 = a1;
  if (!a7)
  {
    unint64_t v24 = 0;
    goto LABEL_12;
  }
  char v49 = a3;
  uint64_t v50 = a8;
  id v15 = a7;
  uint64_t v16 = NSData.startIndex.getter();
  uint64_t v17 = NSData.endIndex.getter();
  uint64_t v18 = NSData.startIndex.getter();
  uint64_t v19 = NSData.endIndex.getter();
  if (v16 < v18 || v19 < v16)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  char v48 = a2;
  unsigned __int16 v20 = a4;
  unsigned __int8 v21 = a6;
  uint64_t v22 = NSData.startIndex.getter();
  uint64_t v23 = NSData.endIndex.getter();

  if (v17 < v22 || v23 < v17) {
    goto LABEL_22;
  }
  unint64_t v24 = v17 - v16;
  if (__OFSUB__(v17, v16))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if ((v24 & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
  a6 = v21;
  a4 = v20;
  unsigned __int8 v14 = a1;
  a8 = v50;
  a2 = v48;
  a3 = v49;
  if (v24 >= 0x10000) {
    goto LABEL_24;
  }
LABEL_12:
  unsigned __int8 v25 = a3 & 0x1F | (a2 << 7) | 0x20;
  unsigned __int16 v26 = a6 | (unsigned __int16)(v11 << 8);
  sub_1000C90C4(((unint64_t)v26 << 32) | (v24 << 48) | ((unint64_t)a4 << 16) | ((unint64_t)v14 << 8) | v25, (uint64_t)a7, a8);
  if (v8)
  {
    unsigned __int16 v51 = v26;
    unsigned __int16 v27 = (void *)_convertErrorToNSError(_:)();
    id v28 = [v27 code];

    id v29 = [v52 boxName];
    if (v29)
    {
      id v30 = v29;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v33 = v32;
    }
    else
    {
      id v33 = (void *)0xEE00656369766544;
      uint64_t v31 = 0x206E776F6E6B6E55;
    }
    if (v28 == (id)-536850432)
    {
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      v34._countAndFlagsBits = v31;
      v34._object = v33;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = 0x64656C6C61745320;
      v35._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v35);
      sub_10000AC7C(&qword_100127420);
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1000EB1F0;
      *(void *)(v36 + 56) = &type metadata for UInt8;
      *(void *)(v36 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v36 + 32) = v25;
      *(void *)(v36 + 96) = &type metadata for UInt8;
      *(void *)(v36 + 104) = &protocol witness table for UInt8;
      *(unsigned char *)(v36 + 72) = a1;
      *(void *)(v36 + 136) = &type metadata for UInt16;
      *(void *)(v36 + 144) = &protocol witness table for UInt16;
      *(_WORD *)(v36 + 112) = a4;
      *(void *)(v36 + 176) = &type metadata for UInt16;
      *(void *)(v36 + 184) = &protocol witness table for UInt16;
      *(_WORD *)(v36 + 152) = v51;
      *(void *)(v36 + 216) = &type metadata for UInt16;
      *(void *)(v36 + 224) = &protocol witness table for UInt16;
      *(_WORD *)(v36 + 192) = v24;
      v37._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      uint64_t v38 = 0xD000000000000019;
      uint64_t v39 = 0x80000001000E6E90;
      uint64_t v40 = 570;
    }
    else
    {
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      sub_10000AC7C(&qword_100127420);
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_1000E8090;
      *(void *)(v41 + 56) = &type metadata for Int;
      *(void *)(v41 + 64) = &protocol witness table for Int;
      *(void *)(v41 + 32) = v28;
      v42._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._countAndFlagsBits = 0xD000000000000020;
      v43._object = (void *)0x80000001000E6DD0;
      String.append(_:)(v43);
      v44._countAndFlagsBits = v31;
      v44._object = v33;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._countAndFlagsBits = 58;
      v45._object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = xmmword_1000EB1F0;
      *(void *)(v46 + 56) = &type metadata for UInt8;
      *(void *)(v46 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v46 + 32) = v25;
      *(void *)(v46 + 96) = &type metadata for UInt8;
      *(void *)(v46 + 104) = &protocol witness table for UInt8;
      *(unsigned char *)(v46 + 72) = a1;
      *(void *)(v46 + 136) = &type metadata for UInt16;
      *(void *)(v46 + 144) = &protocol witness table for UInt16;
      *(_WORD *)(v46 + 112) = a4;
      *(void *)(v46 + 176) = &type metadata for UInt16;
      *(void *)(v46 + 184) = &protocol witness table for UInt16;
      *(_WORD *)(v46 + 152) = v51;
      *(void *)(v46 + 216) = &type metadata for UInt16;
      *(void *)(v46 + 224) = &protocol witness table for UInt16;
      *(_WORD *)(v46 + 192) = v24;
      v47._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      uint64_t v38 = 0x20726F727245;
      uint64_t v39 = 0xE600000000000000;
      uint64_t v40 = 572;
    }
    sub_10002E81C(v38, v39, 0xD000000000000066, (void *)0x80000001000E6E20, 0xD000000000000019, 0x80000001000E6D10, v40);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

void sub_1000C8BE0(uint64_t a1)
{
  uint64_t v18 = 0;
  id v3 = [objc_allocWithZone((Class)NSMutableData) initWithLength:1];
  if (!v3)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v5 = 29;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0xE000000000000000;
    *(void *)(v5 + 24) = 0xD000000000000012;
    *(void *)(v5 + 32) = 0x80000001000E47D0;
    *(void *)(v5 + 40) = 0xD00000000000001ELL;
    *(void *)(v5 + 48) = 0x80000001000E4750;
    *(void *)(v5 + 56) = 245;
    swift_willThrow();
    return;
  }
  id v4 = v3;
  sub_1000C80AC(0xFFu, 1, 1, 0, 0, 0, *(unsigned char *)(*(void *)a1 + 2), v3, (uint64_t)&v18);
  if (v1)
  {

    return;
  }
  uint64_t v6 = v18;
  id v7 = v4;
  uint64_t v8 = NSData.startIndex.getter();
  uint64_t v9 = NSData.endIndex.getter();
  uint64_t v10 = NSData.startIndex.getter();
  uint64_t v11 = NSData.endIndex.getter();
  if (v8 < v10 || v11 < v8)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  uint64_t v13 = NSData.startIndex.getter();
  uint64_t v14 = NSData.endIndex.getter();

  if (v9 < v13 || v14 < v9) {
    goto LABEL_19;
  }
  if (__OFSUB__(v9, v8)) {
    goto LABEL_20;
  }
  if (v6 == v9 - v8)
  {
    id v7 = v7;
    id v15 = [v7 bytes];
    unsigned __int16 v20 = &type metadata for UInt8;
    unint64_t v21 = sub_100074F88();
    LOBYTE(v19) = *v15;
    sub_10000CF6C(&v19, (uint64_t)v22);
    sub_10000AC7C(&qword_100127EB8);
    if (swift_dynamicCast())
    {

      return;
    }
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v16 = 1;
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = 0xE000000000000000;
    *(void *)(v16 + 24) = 0xD000000000000033;
    *(void *)(v16 + 32) = 0x80000001000E6D90;
    *(void *)(v16 + 40) = 0xD000000000000019;
    *(void *)(v16 + 48) = 0x80000001000E6D10;
    uint64_t v17 = 592;
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v16 = 28;
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = 0xE000000000000000;
    *(void *)(v16 + 24) = 0xD000000000000033;
    *(void *)(v16 + 32) = 0x80000001000E6D90;
    *(void *)(v16 + 40) = 0xD000000000000019;
    *(void *)(v16 + 48) = 0x80000001000E6D10;
    uint64_t v17 = 591;
  }
  *(void *)(v16 + 56) = v17;
  swift_willThrow();
}

void sub_1000C8F0C(uint64_t a1, char a2)
{
  uint64_t v10 = 0;
  id v4 = [objc_allocWithZone((Class)NSMutableData) initWithLength:1];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = v4;
    *(unsigned char *)[v6 bytes] = a2;
    unsigned __int8 v7 = *(unsigned char *)(*(void *)a1 + 2);
    id v8 = v6;
    sub_1000C80AC(0xFFu, 0, 1, 0, 0, 0, v7, v5, (uint64_t)&v10);
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v9 = 29;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0xE000000000000000;
    *(void *)(v9 + 24) = 0xD000000000000012;
    *(void *)(v9 + 32) = 0x80000001000E47D0;
    *(void *)(v9 + 40) = 0xD00000000000001ELL;
    *(void *)(v9 + 48) = 0x80000001000E4750;
    *(void *)(v9 + 56) = 245;
    swift_willThrow();
  }
}

unint64_t USBDevice.string(forIndex:)(int a1)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject)) {
    return sub_1000C545C(a1 & 0x1FFFF);
  }
  else {
    return 0;
  }
}

void sub_1000C90C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(v3 + OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject);
  if (!v4)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v18 = 51;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 0xE000000000000000;
    *(void *)(v18 + 24) = 0xD00000000000002DLL;
    *(void *)(v18 + 32) = 0x80000001000E6CE0;
    *(void *)(v18 + 40) = 0xD000000000000019;
    *(void *)(v18 + 48) = 0x80000001000E6D10;
    *(void *)(v18 + 56) = 624;
    swift_willThrow();
    return;
  }
  uint64_t v35 = OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList;
  id v8 = v4;
  uint64_t v9 = mach_absolute_time();
  id aBlock = 0;
  unsigned __int8 v10 = [v8 sendDeviceRequest:a1 data:a2 bytesTransferred:a3 completionTimeout:&aBlock error:5.0];
  uint64_t v11 = aBlock;
  if (v10)
  {
LABEL_3:
    id v12 = v11;
    uint64_t v13 = mach_absolute_time();
    unint64_t p_name = v13 - v9;
    if (v13 >= v9)
    {
      if (qword_100126948 == -1) {
        goto LABEL_5;
      }
      goto LABEL_36;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    swift_once();
LABEL_5:
    if (qword_10012B2D0 == HIDWORD(qword_10012B2D0)) {
      goto LABEL_9;
    }
    if (is_mul_ok(p_name, qword_10012B2D0))
    {
      if (HIDWORD(qword_10012B2D0))
      {
        unint64_t p_name = p_name * qword_10012B2D0 / HIDWORD(qword_10012B2D0);
LABEL_9:
        if (p_name < 0x6052340)
        {
        }
        else
        {
          NSString v36 = String._bridgeToObjectiveC()();
          id v15 = (void *)swift_allocObject();
          v15[2] = v38;
          v15[3] = p_name / 0xF4240;
          v15[4] = a1;
          Swift::String v43 = sub_1000CB858;
          Swift::String v44 = v15;
          id aBlock = _NSConcreteStackBlock;
          uint64_t v40 = 1107296256;
          uint64_t v41 = sub_1000C4FC8;
          Swift::String v42 = &unk_10011C3D0;
          uint64_t v16 = _Block_copy(&aBlock);
          uint64_t v17 = v38;
          swift_release();
          AnalyticsSendEventLazy();

          _Block_release(v16);
        }
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  uint64_t v19 = 1;
  unint64_t p_name = (unint64_t)&StreamingInterfaceUtil.name;
  while (1)
  {
    unsigned __int16 v20 = v11;
    uint64_t v21 = _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v46 = v21;
    swift_errorRetain();
    sub_10000AC7C(&qword_100127400);
    sub_10000CECC(0, (unint64_t *)&qword_100127408);
    if (!swift_dynamicCast()) {
      goto LABEL_32;
    }
    swift_errorRelease();
    id v22 = v45;
    if ([v45 code] == (id)-536870163)
    {
      uint64_t v23 = *(void *)&v38[v35];
      if (!v23) {
        goto LABEL_31;
      }
      uint64_t v24 = *(void *)(v23 + 16);
      if (!v24) {
        goto LABEL_31;
      }
      if (*(unsigned char *)(v23 + 32) != 30)
      {
        if (v24 == 1) {
          goto LABEL_31;
        }
        if (*(unsigned char *)(v23 + 33) != 30) {
          break;
        }
      }
    }
LABEL_20:
    if ([v22 code] == (id)-536850432 || v19 == 3) {
      goto LABEL_31;
    }
    usleep(0x186A0u);

    swift_errorRelease();
    ++v19;
    id v26 = v8;
    uint64_t v9 = mach_absolute_time();
    id aBlock = 0;
    unsigned __int8 v27 = [v26 sendDeviceRequest:a1 data:a2 bytesTransferred:a3 completionTimeout:&aBlock error:5.0];
    uint64_t v11 = aBlock;
    if (v27) {
      goto LABEL_3;
    }
  }
  if (v24 != 2)
  {
    uint64_t v28 = 34;
    while (1)
    {
      uint64_t v29 = v28 - 31;
      if (__OFADD__(v28 - 32, 1)) {
        break;
      }
      if (*(unsigned char *)(v23 + v28) == 30) {
        goto LABEL_20;
      }
      ++v28;
      if (v29 == v24) {
        goto LABEL_31;
      }
    }
    __break(1u);
    goto LABEL_35;
  }
LABEL_31:
  NSString v37 = String._bridgeToObjectiveC()();
  id v30 = (void *)swift_allocObject();
  v30[2] = v38;
  v30[3] = v19;
  v30[4] = v22;
  v30[5] = a1;
  Swift::String v43 = sub_1000CB7FC;
  Swift::String v44 = v30;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256;
  uint64_t v41 = sub_1000C4FC8;
  Swift::String v42 = &unk_10011C380;
  uint64_t v31 = _Block_copy(&aBlock);
  uint64_t v32 = v38;
  id v33 = v22;
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v31);

  id v34 = v33;
  swift_willThrow();

LABEL_32:
  swift_errorRelease();
}

unint64_t sub_1000C9674(char *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [a1 boxName];
  if (!v6)
  {
    sub_10000CECC(0, (unint64_t *)&unk_100129180);
    id v6 = (id)NSString.init(stringLiteral:)();
  }
  sub_10000AC7C((uint64_t *)&unk_100129190);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000EB210;
  *(void *)(inited + 32) = 4475222;
  *(void *)(inited + 40) = 0xE300000000000000;
  uint64_t v8 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor];
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(unsigned __int16 *)(v8 + 8)];
  *(void *)(inited + 56) = 4475216;
  *(void *)(inited + 64) = 0xE300000000000000;
  *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(unsigned __int16 *)(v8 + 10)];
  strcpy((char *)(inited + 80), "productString");
  *(_WORD *)(inited + 94) = -4864;
  *(void *)(inited + 96) = v6;
  *(void *)(inited + 104) = 0x4D64657370616C65;
  *(void *)(inited + 112) = 0xE900000000000053;
  id v9 = objc_allocWithZone((Class)NSNumber);
  id v10 = v6;
  *(void *)(inited + 120) = [v9 initWithUnsignedLongLong:a2];
  strcpy((char *)(inited + 128), "bmRequestType");
  *(_WORD *)(inited + 142) = -4864;
  *(void *)(inited + 144) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedChar:a3];
  *(void *)(inited + 152) = 0x7473657571655262;
  *(void *)(inited + 160) = 0xE800000000000000;
  *(void *)(inited + 168) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedChar:BYTE1(a3)];
  *(void *)(inited + 176) = 0x65756C615677;
  *(void *)(inited + 184) = 0xE600000000000000;
  *(void *)(inited + 192) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedShort:WORD1(a3)];
  *(void *)(inited + 200) = 0x7865646E4977;
  *(void *)(inited + 208) = 0xE600000000000000;
  *(void *)(inited + 216) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedShort:WORD2(a3)];
  unint64_t v11 = sub_100008AF4(inited);

  return v11;
}

unint64_t sub_1000C98E0(char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = [a1 boxName];
  if (!v7)
  {
    sub_10000CECC(0, (unint64_t *)&unk_100129180);
    id v7 = (id)NSString.init(stringLiteral:)();
  }
  sub_10000AC7C((uint64_t *)&unk_100129190);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000EF520;
  *(void *)(inited + 32) = 4475222;
  *(void *)(inited + 40) = 0xE300000000000000;
  uint64_t v9 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor];
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(unsigned __int16 *)(v9 + 8)];
  *(void *)(inited + 56) = 4475216;
  *(void *)(inited + 64) = 0xE300000000000000;
  *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(unsigned __int16 *)(v9 + 10)];
  strcpy((char *)(inited + 80), "productString");
  *(_WORD *)(inited + 94) = -4864;
  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = 0x74706D65747461;
  *(void *)(inited + 112) = 0xE700000000000000;
  id v10 = objc_allocWithZone((Class)NSNumber);
  id v11 = v7;
  *(void *)(inited + 120) = [v10 initWithInteger:a2];
  *(void *)(inited + 128) = 0x726F727265;
  *(void *)(inited + 136) = 0xE500000000000000;
  *(void *)(inited + 144) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", objc_msgSend(a3, "code"));
  strcpy((char *)(inited + 152), "bmRequestType");
  *(_WORD *)(inited + 166) = -4864;
  *(void *)(inited + 168) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedChar:a4];
  *(void *)(inited + 176) = 0x7473657571655262;
  *(void *)(inited + 184) = 0xE800000000000000;
  *(void *)(inited + 192) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedChar:BYTE1(a4)];
  *(void *)(inited + 200) = 0x65756C615677;
  *(void *)(inited + 208) = 0xE600000000000000;
  *(void *)(inited + 216) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedShort:WORD1(a4)];
  *(void *)(inited + 224) = 0x7865646E4977;
  *(void *)(inited + 232) = 0xE600000000000000;
  *(void *)(inited + 240) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedShort:WORD2(a4)];
  unint64_t v12 = sub_100008AF4(inited);

  return v12;
}

id USBDevice.__allocating_init(boxUID:with:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }
  id v7 = [objc_allocWithZone(v4) initWithBoxUID:v6 withPlugin:a3];

  return v7;
}

void USBDevice.init(boxUID:with:)()
{
}

id USBDevice.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for USBDevice();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000C9D5C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void *sub_1000C9DE0(__int16 a1, void *a2)
{
  unsigned int v17 = a1;
  unsigned int v19 = HIBYTE(a1);
  uint64_t v2 = HIBYTE(a1) - a1;
  if (HIBYTE(a1) < a1) {
    uint64_t v3 = -(uint64_t)(a1 - HIBYTE(a1));
  }
  else {
    uint64_t v3 = HIBYTE(a1) - a1;
  }
  id v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    LOBYTE(v5) = a1;
    id v22 = _swiftEmptyArrayStorage;
    sub_10007C8DC(0, v3 & ~(v3 >> 63), 0);
    if ((v3 & 0x8000000000000000) == 0)
    {
      id v4 = v22;
      uint64_t v5 = v5;
      if (v19 <= v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = v19;
      }
      uint64_t v16 = v6;
      while (v3)
      {
        id v21 = 0;
        id v7 = [a2 configurationDescriptorWithIndex:v5 error:&v21];
        if (!v7)
        {
          id v12 = v21;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          sub_10000AC7C(&qword_100127410);
          uint64_t v13 = swift_allocObject();
          *(_OWORD *)(v13 + 16) = xmmword_1000E8090;
          swift_getErrorValue();
          *(void *)(v13 + 56) = v20;
          uint64_t v14 = sub_10002D9D4((uint64_t *)(v13 + 32));
          (*(void (**)(uint64_t *))(*(void *)(v20 - 8) + 16))(v14);
          print(_:separator:terminator:)();
          swift_bridgeObjectRelease();
          swift_willThrow();
          swift_release();
          return v4;
        }
        id v8 = v7;
        id v22 = v4;
        unint64_t v9 = v4[2];
        unint64_t v10 = v4[3];
        id v11 = v21;
        if (v9 >= v10 >> 1)
        {
          sub_10007C8DC(v10 > 1, v9 + 1, 1);
          id v4 = v22;
        }
        v4[2] = v9 + 1;
        v4[v9 + 4] = v8;
        if (v19 < v17) {
          goto LABEL_21;
        }
        if (v16 == v5) {
          goto LABEL_22;
        }
        ++v5;
        --v3;
        if (!--v2) {
          return v4;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
    }
    __break(1u);
  }
  return v4;
}

void *sub_1000CA048(void *a1)
{
  id v25 = 0;
  id v1 = [a1 parentEntryInServicePlaneWithError:&v25];
  if (!v1)
  {
    id v16 = v25;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_21:
    uint64_t v18 = 0x6E776F6E6B6E55;
    sub_10002E81C(0xD000000000000024, 0x80000001000E70F0, 0xD000000000000013, (void *)0x80000001000E7120, 0xD000000000000019, 0x80000001000E6D10, 712);
    swift_errorRelease();
    return (void *)v18;
  }
  uint64_t v2 = v1;
  id v3 = v25;
  while (1)
  {
    id v4 = [v2 name];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      if (v6 == 1953460050 && v8 == 0xE400000000000000)
      {
        uint64_t v18 = 0x6E776F6E6B6E55;

        swift_bridgeObjectRelease();
        return (void *)v18;
      }
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v10)
      {
        uint64_t v18 = 0x6E776F6E6B6E55;

        return (void *)v18;
      }
    }
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v2 propertyForKey:v11];

    if (v12)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v24, 0, sizeof(v24));
    }
    sub_10005415C((uint64_t)v24, (uint64_t)&v25, (uint64_t *)&unk_100129170);
    if (v27) {
      break;
    }
    sub_100038E5C((uint64_t)&v25);
LABEL_17:
    id v25 = 0;
    id v13 = [v2 parentEntryInServicePlaneWithError:&v25];
    if (!v13)
    {
      id v17 = v25;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      goto LABEL_21;
    }
    id v14 = v13;
    id v15 = v25;

    uint64_t v2 = v14;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_17;
  }
  id v25 = v22;
  uint64_t v26 = v23;
  *(void *)&v24[0] = 4801352;
  *((void *)&v24[0] + 1) = 0xE300000000000000;
  sub_10002EC48();
  if ((StringProtocol.contains<A>(_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v18 = 1229146181;
  id v25 = v22;
  uint64_t v26 = v23;
  uint64_t v20 = 1229146200;
  *(void *)&v24[0] = 1229146200;
  *((void *)&v24[0] + 1) = 0xE400000000000000;
  if (StringProtocol.contains<A>(_:)()) {
    goto LABEL_26;
  }
  id v25 = v22;
  uint64_t v26 = v23;
  *(void *)&v24[0] = 1229146181;
  *((void *)&v24[0] + 1) = 0xE400000000000000;
  if (StringProtocol.contains<A>(_:)())
  {
LABEL_28:

    swift_bridgeObjectRelease();
  }
  else
  {
    id v25 = v22;
    uint64_t v26 = v23;
    uint64_t v20 = 1229146191;
    *(void *)&v24[0] = 1229146191;
    *((void *)&v24[0] + 1) = 0xE400000000000000;
    if ((StringProtocol.contains<A>(_:)() & 1) != 0
      || (id v25 = v22,
          uint64_t v26 = v23,
          uint64_t v20 = 1229146197,
          *(void *)&v24[0] = 1229146197,
          *((void *)&v24[0] + 1) = 0xE400000000000000,
          (StringProtocol.contains<A>(_:)() & 1) != 0))
    {
LABEL_26:

      swift_bridgeObjectRelease();
      return (void *)v20;
    }
    else
    {
      id v25 = v22;
      uint64_t v26 = v23;
      uint64_t v18 = 1229146198;
      *(void *)&v24[0] = 1229146198;
      *((void *)&v24[0] + 1) = 0xE400000000000000;
      if (StringProtocol.contains<A>(_:)()) {
        goto LABEL_28;
      }
      uint64_t v18 = 0x49434872657355;
      id v25 = v22;
      uint64_t v26 = v23;
      *(void *)&v24[0] = 0x49434872657355;
      *((void *)&v24[0] + 1) = 0xE700000000000000;
      char v21 = StringProtocol.contains<A>(_:)();

      if (v21) {
        swift_bridgeObjectRelease();
      }
      else {
        return v22;
      }
    }
  }
  return (void *)v18;
}

void *sub_1000CA51C(unint64_t a1, uint64_t (*a2)(void, void), uint64_t a3)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v6)
  {
    uint64_t v23 = a2;
    uint64_t v7 = 0;
    unint64_t v30 = v5 & 0xC000000000000001;
    uint64_t v26 = v6;
    unint64_t v27 = v5 + 32;
    uint64_t v24 = a3;
    unint64_t v25 = v5;
    while (1)
    {
      if (v30) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v27 + 8 * v7);
      }
      unint64_t v9 = v8;
      if (__OFADD__(v7++, 1))
      {
        __break(1u);
        goto LABEL_34;
      }
      type metadata accessor for AUAAudioDevice(0);
      if (!swift_dynamicCastClass())
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v21 = 1;
        *(void *)(v21 + 8) = 0;
        *(void *)(v21 + 16) = 0xE000000000000000;
        *(void *)(v21 + 24) = 0xD00000000000001BLL;
        *(void *)(v21 + 32) = 0x80000001000E7020;
        *(void *)(v21 + 40) = 0xD000000000000019;
        *(void *)(v21 + 48) = 0x80000001000E6D10;
        *(void *)(v21 + 56) = 402;
        swift_willThrow();
        swift_bridgeObjectRelease();

        return (void *)swift_bridgeObjectRelease();
      }
      type metadata accessor for ActiveClockSource();
      uint64_t v11 = swift_dynamicCastClass();
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 40);
        uint64_t ObjectType = swift_getObjectType();
        if (v12 == (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 48))(ObjectType)) {
          goto LABEL_21;
        }
        goto LABEL_5;
      }
      type metadata accessor for ActiveClockSelector();
      uint64_t v14 = swift_dynamicCastClass();
      if (!v14)
      {

        uint64_t v6 = v26;
        goto LABEL_6;
      }
      uint64_t v15 = v14;
      uint64_t v29 = swift_getObjectType();
      a3 = *(void *)(a3 + 8);
      unint64_t v5 = a3 + 48;
      a2 = *(uint64_t (**)(void, void))(a3 + 48);
      id v28 = v9;
      swift_unknownObjectRetain();
      uint64_t v16 = a2(v29, a3);
      id v17 = *(void **)(v15 + 56);
      uint64_t v18 = v17[2];
      if (v18)
      {
        if (v17[4] == v16) {
          goto LABEL_20;
        }
        if (v18 != 1)
        {
          if (v17[5] == v16)
          {
LABEL_20:

            swift_unknownObjectRelease();
            a3 = v24;
            unint64_t v5 = v25;
            a2 = v23;
            uint64_t v6 = v26;
LABEL_21:
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            goto LABEL_6;
          }
          if (v18 != 2) {
            break;
          }
        }
      }
LABEL_4:

      swift_unknownObjectRelease();
      a3 = v24;
      unint64_t v5 = v25;
      a2 = v23;
      uint64_t v6 = v26;
LABEL_5:

LABEL_6:
      if (v7 == v6) {
        goto LABEL_36;
      }
    }
    uint64_t v19 = 6;
    while (1)
    {
      uint64_t v20 = v19 - 3;
      if (__OFADD__(v19 - 4, 1)) {
        break;
      }
      if (v17[v19] == v16) {
        goto LABEL_20;
      }
      ++v19;
      if (v20 == v18) {
        goto LABEL_4;
      }
    }
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_36:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_1000CA894(uint64_t a1, char *a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v25 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  id v8 = _swiftEmptyArrayStorage;
  uint64_t v9 = 32;
  do
  {
    long long v11 = *(_OWORD *)(a1 + v9 + 144);
    v23[8] = *(_OWORD *)(a1 + v9 + 128);
    v23[9] = v11;
    uint64_t v24 = *(void *)(a1 + v9 + 160);
    long long v12 = *(_OWORD *)(a1 + v9 + 80);
    v23[4] = *(_OWORD *)(a1 + v9 + 64);
    v23[5] = v12;
    long long v13 = *(_OWORD *)(a1 + v9 + 112);
    v23[6] = *(_OWORD *)(a1 + v9 + 96);
    v23[7] = v13;
    long long v14 = *(_OWORD *)(a1 + v9 + 16);
    v23[0] = *(_OWORD *)(a1 + v9);
    v23[1] = v14;
    long long v15 = *(_OWORD *)(a1 + v9 + 48);
    v23[2] = *(_OWORD *)(a1 + v9 + 32);
    v23[3] = v15;
    sub_10006CF24(v23);
    uint64_t v16 = sub_100069CCC(v25, a3 & 1);
    if (v4)
    {
      sub_10001D0D8(v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    uint64_t v18 = v16;
    uint64_t v19 = v17;
    sub_10001D0D8(v23);
    if (v18)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v8 = sub_100059EB0(0, v8[2] + 1, 1, v8);
      }
      unint64_t v21 = v8[2];
      unint64_t v20 = v8[3];
      if (v21 >= v20 >> 1) {
        id v8 = sub_100059EB0((void *)(v20 > 1), v21 + 1, 1, v8);
      }
      _OWORD v8[2] = v21 + 1;
      char v10 = &v8[2 * v21];
      v10[4] = v18;
      v10[5] = v19;
    }
    v9 += 168;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1000CAA24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&v22[0] = 0x6465657053425355;
  *((void *)&v22[0] + 1) = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  sub_1000C5064(a1, (uint64_t)v23, v22);
  if (v2) {
    return sub_10001A174((uint64_t)v23);
  }
  uint64_t v5 = (void *)sub_1000C534C((uint64_t)v22);
  sub_10001ABC4((uint64_t)v22);
  sub_10001A174((uint64_t)v23);
  unint64_t v6 = (unint64_t)[v5 integerValue];

  if ((v6 & 0x8000000000000000) != 0 || HIDWORD(v6))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(void *)&v22[0] = 0x6369766544646362;
    *((void *)&v22[0] + 1) = 0xE900000000000065;
    AnyHashable.init<A>(_:)();
    sub_1000C5064(a1, (uint64_t)v23, v22);
    id v8 = (void *)sub_1000C534C((uint64_t)v22);
    sub_10001ABC4((uint64_t)v22);
    sub_10001A174((uint64_t)v23);
    id v24 = [v8 integerValue];

    *(void *)&v22[0] = 0xD000000000000011;
    *((void *)&v22[0] + 1) = 0x80000001000E4220;
    AnyHashable.init<A>(_:)();
    uint64_t v9 = sub_1000C5184(a1, (uint64_t)v23);
    unint64_t v11 = v10;
    sub_10001A174((uint64_t)v23);
    if (!v11)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = 0xD000000000000018;
      unint64_t v11 = 0x80000001000E7190;
    }
    *(void *)&v22[0] = 0x6375646F72506469;
    *((void *)&v22[0] + 1) = 0xE900000000000074;
    AnyHashable.init<A>(_:)();
    sub_1000C5064(a1, (uint64_t)v23, v22);
    long long v12 = (void *)sub_1000C534C((uint64_t)v22);
    sub_10001ABC4((uint64_t)v22);
    sub_10001A174((uint64_t)v23);
    id v21 = [v12 integerValue];

    *(void *)&v22[0] = 0x726F646E65566469;
    *((void *)&v22[0] + 1) = 0xE800000000000000;
    AnyHashable.init<A>(_:)();
    sub_1000C5064(a1, (uint64_t)v23, v22);
    long long v13 = (void *)sub_1000C534C((uint64_t)v22);
    sub_10001ABC4((uint64_t)v22);
    sub_10001A174((uint64_t)v23);
    id v14 = [v13 integerValue];

    *(void *)&v22[0] = 0xD000000000000010;
    *((void *)&v22[0] + 1) = 0x80000001000E72D0;
    AnyHashable.init<A>(_:)();
    uint64_t v20 = sub_1000C5184(a1, (uint64_t)v23);
    uint64_t v16 = v15;
    sub_10001A174((uint64_t)v23);
    *(void *)&v22[0] = 0xD000000000000016;
    *((void *)&v22[0] + 1) = 0x80000001000E72F0;
    AnyHashable.init<A>(_:)();
    uint64_t v17 = sub_1000C5184(a1, (uint64_t)v23);
    uint64_t v19 = v18;
    uint64_t result = sub_10001A174((uint64_t)v23);
    *(_DWORD *)a2 = v6;
    *(void *)(a2 + 8) = v24;
    *(void *)(a2 + 16) = v9;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v21;
    *(void *)(a2 + 40) = v14;
    *(void *)(a2 + 48) = v20;
    *(void *)(a2 + 56) = v16;
    *(void *)(a2 + 64) = v17;
    *(void *)(a2 + 72) = v19;
  }
  return result;
}

uint64_t sub_1000CAF08@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4 = [a1 properties];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000CAA24(v6, (uint64_t)v11);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v2)
    {
      long long v8 = v11[3];
      a2[2] = v11[2];
      a2[3] = v8;
      a2[4] = v11[4];
      long long v9 = v11[1];
      *a2 = v11[0];
      a2[1] = v9;
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v10 = 4;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0xE000000000000000;
    strcpy((char *)(v10 + 24), "tryUnwrap(_:)");
    *(_WORD *)(v10 + 38) = -4864;
    *(void *)(v10 + 40) = 0xD00000000000001DLL;
    *(void *)(v10 + 48) = 0x80000001000E72B0;
    *(void *)(v10 + 56) = 23;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1000CB040(void *a1, char a2, char a3, void *a4, void *a5)
{
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [a4 propertyForKey:v10];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v51 = 0u;
    long long v52 = 0u;
  }
  unint64_t v12 = 0xD000000000000018;
  sub_10005415C((uint64_t)&v51, (uint64_t)&v53, (uint64_t *)&unk_100129170);
  if (!v55)
  {
    sub_100038E5C((uint64_t)&v53);
    goto LABEL_9;
  }
  id v56 = a1;
  sub_10000CECC(0, (unint64_t *)&qword_100127470);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v15 = 3;
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0xE000000000000000;
    *(void *)(v15 + 24) = 0xD00000000000004CLL;
    *(void *)(v15 + 32) = 0x80000001000E7140;
    *(void *)(v15 + 40) = 0xD000000000000019;
    *(void *)(v15 + 48) = 0x80000001000E6D10;
    *(void *)(v15 + 56) = 118;
    swift_willThrow();
    return v12;
  }
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [a4 propertyForKey:v13];

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v51 = 0u;
    long long v52 = 0u;
  }
  sub_10005415C((uint64_t)&v51, (uint64_t)&v53, (uint64_t *)&unk_100129170);
  char v46 = a2;
  char v47 = a3;
  id v45 = a5;
  if (v55)
  {
    if (swift_dynamicCast())
    {
      unint64_t v16 = (unint64_t)v49;
      unint64_t v17 = v50;
      goto LABEL_16;
    }
  }
  else
  {
    sub_100038E5C((uint64_t)&v53);
  }
  unint64_t v16 = 0;
  unint64_t v17 = 0;
LABEL_16:
  sub_10000AC7C(&qword_100127420);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1000E8090;
  id v19 = [v49 integerValue];
  *(void *)(v18 + 56) = &type metadata for Int;
  *(void *)(v18 + 64) = &protocol witness table for Int;
  *(void *)(v18 + 32) = v19;
  uint64_t v20 = String.init(format:_:)();
  id v22 = v21;
  uint64_t v53 = 0;
  unsigned __int16 v54 = (void *)0xE000000000000000;
  if (v17) {
    unint64_t v23 = v16;
  }
  else {
    unint64_t v23 = 0xD000000000000018;
  }
  if (!v17) {
    unint64_t v17 = 0x80000001000E7190;
  }
  unint64_t v24 = v17;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 64;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = v20;
  v26._object = v22;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  uint64_t v27 = v53;
  char v48 = v54;
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [a4 propertyForKey:v28];

  if (v29)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v51 = 0u;
    long long v52 = 0u;
  }
  sub_10005415C((uint64_t)&v51, (uint64_t)&v53, (uint64_t *)&unk_100129170);
  if (v55)
  {
    if (swift_dynamicCast())
    {
      id v30 = [v49 unsignedIntegerValue];

      char v31 = 0;
      goto LABEL_29;
    }
  }
  else
  {
    sub_100038E5C((uint64_t)&v53);
  }
  id v30 = 0;
  char v31 = 1;
LABEL_29:
  NSString v32 = String._bridgeToObjectiveC()();
  id v33 = [a4 propertyForKey:v32];

  if (v33)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v51 = 0u;
    long long v52 = 0u;
  }
  sub_10005415C((uint64_t)&v51, (uint64_t)&v53, (uint64_t *)&unk_100129170);
  if (v55)
  {
    if (swift_dynamicCast())
    {
      id v34 = [v49 unsignedIntegerValue];

      char v35 = 0;
      goto LABEL_37;
    }
  }
  else
  {
    sub_100038E5C((uint64_t)&v53);
  }
  id v34 = 0;
  char v35 = 1;
LABEL_37:
  uint64_t v53 = 0;
  unsigned __int16 v54 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v36._object = (void *)0x80000001000E71B0;
  v36._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v36);
  v37._countAndFlagsBits = v27;
  v37._object = v48;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x49726F646E657620;
  v38._object = (void *)0xEA00000000002044;
  String.append(_:)(v38);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1000E8090;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(void *)(result + 56) = &type metadata for UInt;
    *(void *)(result + 64) = &protocol witness table for UInt;
    *(void *)(result + 32) = v30;
    v40._countAndFlagsBits = String.init(format:_:)();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 0x746375646F727020;
    v41._object = (void *)0xEB00000000204449;
    String.append(_:)(v41);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1000E8090;
    if ((v35 & 1) == 0)
    {
      *(void *)(result + 56) = &type metadata for UInt;
      *(void *)(result + 64) = &protocol witness table for UInt;
      *(void *)(result + 32) = v34;
      v42._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      sub_10002E804(v53, (uint64_t)v54, 0xD00000000000004CLL, (void *)0x80000001000E7140, 0xD000000000000019, 0x80000001000E6D10, 128);
      swift_bridgeObjectRelease();
      id v43 = objc_allocWithZone((Class)type metadata accessor for USBDevice());
      sub_1000C62A0(v56, a4, v46 & 1, v47 & 1, v27, (uint64_t)v48, v45);
      unint64_t v12 = v44;

      return v12;
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for USBDevice()
{
  return self;
}

unint64_t sub_1000CB764()
{
  unint64_t result = qword_10012A668;
  if (!qword_10012A668)
  {
    type metadata accessor for tIOUSBHostConnectionSpeed(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A668);
  }
  return result;
}

uint64_t sub_1000CB7BC()
{
  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1000CB7FC()
{
  return sub_1000C98E0(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000CB808(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000CB818()
{
  return swift_release();
}

uint64_t sub_1000CB820()
{
  return _swift_deallocObject(v0, 40, 7);
}

unint64_t sub_1000CB858()
{
  return sub_1000C9674(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000CB864()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000CB8A4()
{
  return sub_1000C7EE4(*(char **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000CB8AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000CB8F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000CB924(uint64_t a1)
{
  return a1;
}

void sub_1000CB968()
{
  type metadata accessor for AUAUserDefaults();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  id v1 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithSuiteName:v2];

  *(void *)(v0 + 16) = v3;
  qword_10012B2A8 = v0;
}

BOOL sub_1000CB9FC()
{
  id v1 = *(void **)(v0 + 16);
  if (!v1) {
    return 0;
  }
  id v3 = v1;
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 objectForKey:v4];

  BOOL v2 = v5 != 0;
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();

    swift_unknownObjectRelease();
  }
  else
  {

    memset(v7, 0, sizeof(v7));
  }
  sub_100038E5C((uint64_t)v7);
  return v2;
}

uint64_t sub_1000CBBA8()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AUAUserDefaults()
{
  return self;
}

void sub_1000CBC04(uint64_t a1@<X8>)
{
  __int16 v3 = *(_WORD *)(v1 + 8);
  uint64_t v4 = *(unsigned __int16 *)(v1 + 10);
  uint64_t v5 = *(void *)(v1 + 40);
  int64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    sub_1000D2148(v1);
    sub_10007C4BC(0, v6, 0);
    uint64_t v7 = (unsigned __int16 *)(v5 + 32);
    unint64_t v8 = _swiftEmptyArrayStorage[2];
    do
    {
      unsigned int v10 = *v7++;
      uint64_t v9 = v10;
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v8 >= v11 >> 1) {
        sub_10007C4BC(v11 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      _swiftEmptyArrayStorage[v8++ + 4] = v9;
      --v6;
    }
    while (v6);
    sub_10008CD1C(v1);
    uint64_t v4 = v14;
  }
  uint64_t v12 = *(void *)(v1 + 24);
  __int16 v13 = *(_WORD *)(v1 + 32);
  *(unsigned char *)(a1 + 2) = 1;
  *(_WORD *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v12;
  *(_WORD *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  *(void *)(a1 + 48) = 0;
}

Swift::Int ADC4ClassSpecificAudioControlInterfaceDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000CD72C(a1, (void (*)(unsigned char *, uint64_t))sub_100046C60);
}

Swift::Int sub_1000CBD38(uint64_t a1, uint64_t a2)
{
  return sub_1000CD794(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100046C60);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClassSpecificAudioControlInterfaceDescriptor(uint64_t a1)
{
  return sub_100046C60(a1, *v1);
}

Swift::Int sub_1000CBD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDC2C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100046C60);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClassSpecificAudioControlInterfaceDescriptor(unsigned int *a1, unsigned int *a2)
{
  return sub_10003C5B8(*a1, *a2);
}

Swift::Int ADC4AudioControlSelfDescriptor.hashValue.getter(unint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  sub_100048AE4((uint64_t)v5, a1, a2 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000CBDCC()
{
  unint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned __int16 *)(v0 + 8);
  uint64_t v3 = *(unsigned int *)(v0 + 10);
  Hasher.init(_seed:)();
  sub_100048AE4((uint64_t)v5, v1, v2 | (v3 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4AudioControlSelfDescriptor(uint64_t a1)
{
  return sub_100048AE4(a1, *(void *)v1, *(unsigned __int16 *)(v1 + 8) | ((unint64_t)*(unsigned int *)(v1 + 10) << 16));
}

Swift::Int sub_1000CBE3C()
{
  unint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned __int16 *)(v0 + 8);
  uint64_t v3 = *(unsigned int *)(v0 + 10);
  Hasher.init(_seed:)();
  sub_100048AE4((uint64_t)v5, v1, v2 | (v3 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4AudioControlSelfDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_10003ECB8(*(void *)a1, *(unsigned __int16 *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 10) << 16), *(void *)a2, *(unsigned __int16 *)(a2 + 8) | ((unint64_t)*(unsigned int *)(a2 + 10) << 16));
}

Swift::Int ADC4InputTerminalDescriptor.hashValue.getter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1000CC374(a1, a2, a3, (void (*)(long long *, uint64_t, void, void))sub_10004A57C);
}

Swift::Int sub_1000CBED4(uint64_t a1, uint64_t a2)
{
  return sub_1000CC42C(a1, a2, (void (*)(unsigned char *, uint64_t, void, void))sub_10004A57C);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4InputTerminalDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC4C8(a1, a2, a3, sub_10004A57C);
}

Swift::Int sub_1000CBF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC514(a1, a2, a3, (void (*)(unsigned char *, uint64_t, void, void))sub_10004A57C);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4InputTerminalDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CC5AC(a1, a2, a3, a4, sub_100040FC4);
}

Swift::Int ADC4InputTerminalDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_1000CDB54(a1, (void (*)(unsigned char *, uint64_t))sub_100047DA4);
}

Swift::Int sub_1000CBF4C(uint64_t a1, uint64_t a2)
{
  return sub_1000CDBBC(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100047DA4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4InputTerminalDescriptorPart2(uint64_t a1)
{
  return sub_100047DA4(a1, *v1);
}

Swift::Int sub_1000CBF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDC2C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100047DA4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4InputTerminalDescriptorPart2(unsigned int *a1, unsigned int *a2)
{
  return sub_10003DB94(*a1, *a2);
}

Swift::Int ADC4OutputTerminalDescriptor.hashValue.getter(unint64_t a1, unint64_t a2, unint64_t a3)
{
  Hasher.init(_seed:)();
  sub_10004948C((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1000CBFF0()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  sub_10004948C((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4OutputTerminalDescriptor(uint64_t a1)
{
  return sub_10004948C(a1, *v1, v1[1], v1[2]);
}

Swift::Int sub_1000CC058()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  sub_10004948C((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4OutputTerminalDescriptor(unint64_t *a1, unint64_t *a2)
{
  return sub_10003F98C(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

Swift::Int ADC4MixerUnitDescriptor.hashValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  Hasher.init(_seed:)();
  sub_10004CA68((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1000CC12C()
{
  unsigned int v1 = *(_DWORD *)(v0 + 16);
  unint64_t v3 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004CA68((uint64_t)v5, v3, v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4MixerUnitDescriptor(uint64_t a1)
{
  return sub_10004CA68(a1, *(void *)v1, *(void *)(v1 + 8), *(_DWORD *)(v1 + 16));
}

Swift::Int sub_1000CC194()
{
  unsigned int v1 = *(_DWORD *)(v0 + 16);
  unint64_t v3 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10004CA68((uint64_t)v5, v3, v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4MixerUnitDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_1000440E8(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16));
}

Swift::Int ADC4SelectorUnitDescriptor.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC8A4(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))sub_10004B48C);
}

Swift::Int sub_1000CC220(uint64_t a1, uint64_t a2)
{
  return sub_1000CC924(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))sub_10004B48C);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4SelectorUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC9A0(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void))sub_10004B48C);
}

Swift::Int sub_1000CC250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC9CC(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))sub_10004B48C);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4SelectorUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CCA44(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_100042494);
}

Swift::Int ADC4FeatureUnitDescriptor.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000CCD68(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))sub_10004B89C);
}

Swift::Int sub_1000CC298(uint64_t a1, uint64_t a2)
{
  return sub_1000CCDE0(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))sub_10004B89C);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4FeatureUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CCE5C(a1, a2, a3, sub_10004B89C);
}

Swift::Int sub_1000CC2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CCE8C(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))sub_10004B89C);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4FeatureUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CCF04(a1, a2, a3, a4, sub_100042990);
}

Swift::Int ADC4EffectUnitDescriptor.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000CDC9C(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))sub_10004C654);
}

Swift::Int sub_1000CC310(uint64_t a1, uint64_t a2)
{
  return sub_1000CDD14(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))sub_10004C654);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4EffectUnitDescriptor(uint64_t a1)
{
  return sub_10004C654(a1, *v1, v1[1]);
}

Swift::Int sub_1000CC330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDD90(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))sub_10004C654);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4EffectUnitDescriptor(unint64_t *a1, unint64_t *a2)
{
  return sub_100043BA0(*a1, a1[1], *a2, a2[1]);
}

Swift::Int ADC4ProcessingUnitDescriptor.hashValue.getter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1000CC374(a1, a2, a3, (void (*)(long long *, uint64_t, void, void))sub_100049474);
}

Swift::Int sub_1000CC374(uint64_t a1, unint64_t a2, unint64_t a3, void (*a4)(long long *, uint64_t, void, void))
{
  __int16 v5 = a2;
  *(void *)&long long v13 = a2;
  *((void *)&v13 + 1) = a3;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a3 >> 16;
  unint64_t v10 = HIDWORD(a3);
  Hasher.init(_seed:)();
  LOWORD(v12) = v5;
  WORD1(v12) = v7;
  WORD2(v12) = v8;
  *(_DWORD *)((char *)&v12 + 6) = *(_DWORD *)((char *)&v13 + 6);
  WORD5(v12) = v9;
  WORD6(v12) = v10;
  a4(&v13, a1, v12, *((void *)&v12 + 1));
  return Hasher._finalize()();
}

Swift::Int sub_1000CC414(uint64_t a1, uint64_t a2)
{
  return sub_1000CC42C(a1, a2, (void (*)(unsigned char *, uint64_t, void, void))sub_100049474);
}

Swift::Int sub_1000CC42C(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, void, void))
{
  uint64_t v5 = *v3;
  int v6 = *((_DWORD *)v3 + 2);
  __int16 v7 = *((_WORD *)v3 + 6);
  unsigned int v8 = *(_DWORD *)((char *)v3 + 14);
  unsigned int v9 = *(_DWORD *)((char *)v3 + 18);
  Hasher.init(_seed:)();
  LODWORD(v11) = v6;
  WORD2(v11) = v7;
  *(void *)((char *)&v11 + 6) = __PAIR64__(v9, v8);
  a3(v12, v5, v11, *((void *)&v11 + 1));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ProcessingUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC4C8(a1, a2, a3, sub_100049474);
}

uint64_t sub_1000CC4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void))
{
  WORD2(v6) = *(_WORD *)(v4 + 12);
  *(void *)((char *)&v6 + 6) = *(void *)(v4 + 14);
  return a4(a1, *(void *)v4, v6, *((void *)&v6 + 1));
}

Swift::Int sub_1000CC4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC514(a1, a2, a3, (void (*)(unsigned char *, uint64_t, void, void))sub_100049474);
}

Swift::Int sub_1000CC514(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t, void, void))
{
  uint64_t v6 = *v4;
  int v7 = *((_DWORD *)v4 + 2);
  __int16 v8 = *((_WORD *)v4 + 6);
  unsigned int v9 = *(_DWORD *)((char *)v4 + 14);
  unsigned int v10 = *(_DWORD *)((char *)v4 + 18);
  Hasher.init(_seed:)();
  LODWORD(v12) = v7;
  WORD2(v12) = v8;
  *(void *)((char *)&v12 + 6) = __PAIR64__(v10, v9);
  a4(v13, v6, v12, *((void *)&v12 + 1));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ProcessingUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CC5AC(a1, a2, a3, a4, sub_10003F974);
}

uint64_t sub_1000CC5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  WORD2(v7) = *(_WORD *)(a1 + 12);
  *(void *)((char *)&v7 + 6) = *(void *)(a1 + 14);
  long long v5 = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 8);
  WORD2(v7) = *(_WORD *)(a2 + 12);
  *(void *)((char *)&v7 + 6) = *(void *)(a2 + 14);
  return a5(*(void *)a1, v5, *((void *)&v5 + 1), *(void *)a2, v7, *((void *)&v7 + 1));
}

Swift::Int ADC4ExtensionUnitDescriptor.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000CC64C()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ExtensionUnitDescriptor()
{
  return sub_10004A7AC();
}

Swift::Int sub_1000CC6DC()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ExtensionUnitDescriptor(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  int v6 = *(_DWORD *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  int v8 = *(_DWORD *)(a2 + 32);
  return sub_1000412BC((uint64_t)v5, (uint64_t)v7) & 1;
}

Swift::Int ADC4ClockSourceDescriptor.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CCA80(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))sub_10004BA9C);
}

Swift::Int sub_1000CC790()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned int *)(v0 + 16);
  uint64_t v4 = *(unsigned __int16 *)(v0 + 20);
  Hasher.init(_seed:)();
  sub_10004BA9C((uint64_t)v6, v1, v2, v3 | (v4 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClockSourceDescriptor(uint64_t a1)
{
  return sub_10004BA9C(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int16 *)(v1 + 20) << 32));
}

Swift::Int sub_1000CC804()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned int *)(v0 + 16);
  uint64_t v4 = *(unsigned __int16 *)(v0 + 20);
  Hasher.init(_seed:)();
  sub_10004BA9C((uint64_t)v6, v1, v2, v3 | (v4 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClockSourceDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_100042C28(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32));
}

Swift::Int ADC4ClockSelectorDescriptor.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC8A4(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))sub_10004ABE8);
}

Swift::Int sub_1000CC8A4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t, uint64_t, uint64_t))
{
  Hasher.init(_seed:)();
  a4(v9, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1000CC90C(uint64_t a1, uint64_t a2)
{
  return sub_1000CC924(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))sub_10004ABE8);
}

Swift::Int sub_1000CC924(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v7 = *((unsigned __int16 *)v3 + 8);
  Hasher.init(_seed:)();
  a3(v9, v5, v6, v7);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClockSelectorDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC9A0(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void))sub_10004ABE8);
}

uint64_t sub_1000CC9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void))
{
  return a4(a1, *(void *)v4, *(void *)(v4 + 8), *(unsigned __int16 *)(v4 + 16));
}

Swift::Int sub_1000CC9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC9CC(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))sub_10004ABE8);
}

Swift::Int sub_1000CC9CC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  uint64_t v8 = *((unsigned __int16 *)v4 + 8);
  Hasher.init(_seed:)();
  a4(v10, v6, v7, v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClockSelectorDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CCA44(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_1000418A4);
}

uint64_t sub_1000CCA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int16 *)(a2 + 16));
}

Swift::Int ADC4SamplingRateConverterUnitDescriptor.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CCA80(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))sub_100047218);
}

Swift::Int sub_1000CCA80(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t, uint64_t, uint64_t))
{
  Hasher.init(_seed:)();
  a4(v9, a1, a2, a3 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000CCAE8()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int16 *)(v0 + 16);
  uint64_t v4 = *(unsigned int *)(v0 + 18);
  Hasher.init(_seed:)();
  sub_100047218((uint64_t)v6, v1, v2, v3 | (v4 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4SamplingRateConverterUnitDescriptor(uint64_t a1)
{
  return sub_100047218(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int16 *)(v1 + 16) | ((unint64_t)*(unsigned int *)(v1 + 18) << 16));
}

Swift::Int sub_1000CCB5C()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int16 *)(v0 + 16);
  uint64_t v4 = *(unsigned int *)(v0 + 18);
  Hasher.init(_seed:)();
  sub_100047218((uint64_t)v6, v1, v2, v3 | (v4 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4SamplingRateConverterUnitDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_10003CCF4(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 16) | ((unint64_t)*(unsigned int *)(a1 + 18) << 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int16 *)(a2 + 16) | ((unint64_t)*(unsigned int *)(a2 + 18) << 16));
}

Swift::Int ADC4PowerDomainEntityDescriptor.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000CCC24()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4PowerDomainEntityDescriptor()
{
  return sub_10004873C();
}

Swift::Int sub_1000CCCB4()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4PowerDomainEntityDescriptor(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  __int16 v6 = *(_WORD *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  __int16 v8 = *(_WORD *)(a2 + 32);
  return sub_10003E814((uint64_t)v5, (uint64_t)v7) & 1;
}

Swift::Int ADC4TerminalCompanionDescriptorHeader.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000CCD68(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))sub_100047434);
}

Swift::Int sub_1000CCD68(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t))
{
  Hasher.init(_seed:)();
  a3(v7, a1, a2 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000CCDC8(uint64_t a1, uint64_t a2)
{
  return sub_1000CCDE0(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))sub_100047434);
}

Swift::Int sub_1000CCDE0(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = *((unsigned int *)v3 + 2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 6);
  Hasher.init(_seed:)();
  a3(v9, v5, v6 | (v7 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionDescriptorHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CCE5C(a1, a2, a3, sub_100047434);
}

uint64_t sub_1000CCE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, unint64_t))
{
  return a4(a1, *(void *)v4, *(unsigned int *)(v4 + 8) | ((unint64_t)*(unsigned __int16 *)(v4 + 12) << 32));
}

Swift::Int sub_1000CCE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CCE8C(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))sub_100047434);
}

Swift::Int sub_1000CCE8C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = *((unsigned int *)v4 + 2);
  uint64_t v8 = *((unsigned __int16 *)v4 + 6);
  Hasher.init(_seed:)();
  a4(v10, v6, v7 | (v8 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionDescriptorHeader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CCF04(a1, a2, a3, a4, sub_10003CFD4);
}

uint64_t sub_1000CCF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, unint64_t, void, unint64_t))
{
  return a5(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32), *(void *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int16 *)(a2 + 12) << 32));
}

Swift::Int ADC4TerminalCompanionDescriptorSegmentHeader.hashValue.getter(uint64_t a1)
{
  return sub_1000CDB54(a1, (void (*)(unsigned char *, uint64_t))sub_100047038);
}

Swift::Int sub_1000CCF48(uint64_t a1, uint64_t a2)
{
  return sub_1000CDBBC(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100047038);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionDescriptorSegmentHeader(uint64_t a1)
{
  return sub_100047038(a1, *v1);
}

Swift::Int sub_1000CCF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDC2C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100047038);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionDescriptorSegmentHeader(unsigned int *a1, unsigned int *a2)
{
  return sub_10003CAB0(*a1, *a2);
}

Swift::Int ADC4TerminalCompanionEN50322_2Segment.hashValue.getter(uint64_t a1)
{
  return sub_1000CDE14(a1, (void (*)(unsigned char *, uint64_t))sub_10004741C);
}

Swift::Int sub_1000CCFA4(uint64_t a1, uint64_t a2)
{
  return sub_1000CDF10(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004741C);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionEN50322_2Segment(uint64_t a1)
{
  return sub_10004741C(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

Swift::Int sub_1000CCFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDF94(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004741C);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionEN50322_2Segment(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CE004(a1, a2, a3, a4, sub_10003CFBC);
}

Swift::Int ADC4TerminalCompanionChannelBandwidthSegment.hashValue.getter(unint64_t a1, int a2)
{
  Hasher.init(_seed:)();
  sub_100047068((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_1000CD04C()
{
  int v1 = *(_DWORD *)(v0 + 8);
  unint64_t v2 = *(void *)v0;
  Hasher.init(_seed:)();
  sub_100047068((uint64_t)v4, v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelBandwidthSegment(uint64_t a1)
{
  return sub_100047068(a1, *(void *)v1, *(_DWORD *)(v1 + 8));
}

Swift::Int sub_1000CD0A8()
{
  int v1 = *(_DWORD *)(v0 + 8);
  unint64_t v2 = *(void *)v0;
  Hasher.init(_seed:)();
  sub_100047068((uint64_t)v4, v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelBandwidthSegment(uint64_t a1, uint64_t a2)
{
  return sub_10003CAE0(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)a2, *(_DWORD *)(a2 + 8));
}

Swift::Int ADC4TerminalCompanionChannelMagnitudeSegment.hashValue.getter(uint64_t a1)
{
  return sub_1000CDB54(a1, (void (*)(unsigned char *, uint64_t))sub_100047050);
}

Swift::Int sub_1000CD124(uint64_t a1, uint64_t a2)
{
  return sub_1000CDBBC(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100047050);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelMagnitudeSegment(uint64_t a1)
{
  return sub_100047050(a1, *v1);
}

Swift::Int sub_1000CD144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDC2C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100047050);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelMagnitudeSegment(unsigned int *a1, unsigned int *a2)
{
  return sub_10003CAC8(*a1, *a2);
}

Swift::Int ADC4TerminalCompanionChannelMagnitudeSegmentPoint.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100046C30((uint64_t)v3, a1 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000CD1B0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int16 *)v0 + 2);
  Hasher.init(_seed:)();
  sub_100046C30((uint64_t)v4, v1 | (v2 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelMagnitudeSegmentPoint(uint64_t a1)
{
  return sub_100046C30(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32));
}

Swift::Int sub_1000CD20C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int16 *)v0 + 2);
  Hasher.init(_seed:)();
  sub_100046C30((uint64_t)v4, v1 | (v2 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelMagnitudeSegmentPoint(unsigned int *a1, unsigned int *a2)
{
  return sub_10003C588(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32), *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
}

Swift::Int ADC4TerminalCompanionChannelMagnitudePhaseSegment.hashValue.getter(uint64_t a1)
{
  return sub_1000CDB54(a1, (void (*)(unsigned char *, uint64_t))sub_100046C48);
}

Swift::Int sub_1000CD288(uint64_t a1, uint64_t a2)
{
  return sub_1000CDBBC(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100046C48);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelMagnitudePhaseSegment(uint64_t a1)
{
  return sub_100046C48(a1, *v1);
}

Swift::Int sub_1000CD2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDC2C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100046C48);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelMagnitudePhaseSegment(unsigned int *a1, unsigned int *a2)
{
  return sub_10003C5A0(*a1, *a2);
}

Swift::Int ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint.hashValue.getter(unint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100046A5C((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1000CD314()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_100046A5C((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint(uint64_t a1)
{
  return sub_100046A5C(a1, *v1);
}

Swift::Int sub_1000CD364()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_100046A5C((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint(unint64_t *a1, unint64_t *a2)
{
  return sub_10003C354(*a1, *a2);
}

Swift::Int ADC4TerminalCompanionChannelPositionXYZSegment.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000CD444(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))sub_100046E58);
}

Swift::Int sub_1000CD3CC(uint64_t a1, uint64_t a2)
{
  return sub_1000CD4BC(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))sub_100046E58);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelPositionXYZSegment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CD530(a1, a2, a3, sub_100046E58);
}

Swift::Int sub_1000CD3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CD554(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))sub_100046E58);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelPositionXYZSegment(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CD5C4(a1, a2, a3, a4, sub_10003C858);
}

Swift::Int ADC4TerminalCompanionChannelPositionRThetaPhiSegment.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000CD444(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))sub_100046C00);
}

Swift::Int sub_1000CD444(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t))
{
  Hasher.init(_seed:)();
  a3(v7, a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_1000CD4A4(uint64_t a1, uint64_t a2)
{
  return sub_1000CD4BC(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))sub_100046C00);
}

Swift::Int sub_1000CD4BC(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v7 = v3;
  uint64_t v5 = *v3;
  uint64_t v6 = v7[1];
  Hasher.init(_seed:)();
  a3(v9, v5, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelPositionRThetaPhiSegment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CD530(a1, a2, a3, sub_100046C00);
}

uint64_t sub_1000CD530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void))
{
  return a4(a1, *v4, v4[1]);
}

Swift::Int sub_1000CD53C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CD554(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))sub_100046C00);
}

Swift::Int sub_1000CD554(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v8 = v4;
  uint64_t v6 = *v4;
  uint64_t v7 = v8[1];
  Hasher.init(_seed:)();
  a4(v10, v6, v7);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelPositionRThetaPhiSegment(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CD5C4(a1, a2, a3, a4, sub_10003C558);
}

uint64_t sub_1000CD5C4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void))
{
  return a5(*a1, a1[1], *a2, a2[1]);
}

Swift::Int ADC4ConnectorEntityDescriptor.hashValue.getter(unint64_t a1, unint64_t a2, unint64_t a3)
{
  Hasher.init(_seed:)();
  sub_100048CB0((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1000CD638()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  sub_100048CB0((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ConnectorEntityDescriptor(uint64_t a1)
{
  return sub_100048CB0(a1, *v1, v1[1], v1[2]);
}

Swift::Int sub_1000CD6A0()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  sub_100048CB0((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ConnectorEntityDescriptor(unint64_t *a1, unint64_t *a2)
{
  return sub_10003EF10(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

Swift::Int ADC4ClassSpecificAudioStreamingInterfaceDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000CD72C(a1, (void (*)(unsigned char *, uint64_t))sub_100046C18);
}

Swift::Int sub_1000CD72C(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1000CD77C(uint64_t a1, uint64_t a2)
{
  return sub_1000CD794(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100046C18);
}

Swift::Int sub_1000CD794(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v7, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClassSpecificAudioStreamingInterfaceDescriptor(uint64_t a1)
{
  return sub_100046C18(a1, *v1);
}

Swift::Int sub_1000CD7EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDC2C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100046C18);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClassSpecificAudioStreamingInterfaceDescriptor(unsigned int *a1, unsigned int *a2)
{
  return sub_10003C570(*a1, *a2);
}

Swift::Int ADC4AudioStreamingSelfDescriptor.hashValue.getter(unint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  Hasher.init(_seed:)();
  sub_100047DBC((uint64_t)v9, a1, a2, a3, a4);
  return Hasher._finalize()();
}

Swift::Int sub_1000CD878()
{
  unsigned int v1 = *(_DWORD *)(v0 + 24);
  unint64_t v2 = *(void *)v0;
  uint64_t v5 = v0 + 8;
  unint64_t v4 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v5 + 8);
  Hasher.init(_seed:)();
  sub_100047DBC((uint64_t)v7, v2, v4, v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4AudioStreamingSelfDescriptor(uint64_t a1)
{
  return sub_100047DBC(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(_DWORD *)(v1 + 24));
}

Swift::Int sub_1000CD8EC()
{
  unsigned int v1 = *(_DWORD *)(v0 + 24);
  unint64_t v2 = *(void *)v0;
  uint64_t v5 = v0 + 8;
  unint64_t v4 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v5 + 8);
  Hasher.init(_seed:)();
  sub_100047DBC((uint64_t)v7, v2, v4, v3, v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4AudioStreamingSelfDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_10003DBAC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(_DWORD *)(a2 + 24));
}

Swift::Int ADC4AudioStreamingValidFrequencyRangeDescriptor.hashValue.getter(unint64_t a1, unint64_t a2, __int16 a3)
{
  __int16 v3 = a2;
  *(void *)uint64_t v8 = a2;
  *(_WORD *)&v8[8] = a3;
  unint64_t v5 = a2 >> 16;
  Hasher.init(_seed:)();
  LOWORD(v7) = v3;
  *(void *)((char *)&v7 + 2) = __PAIR64__(*(unsigned int *)&v8[6], v5);
  sub_100046C78((uint64_t)v8, a1, v7, *(__int16 *)&v8[8]);
  return Hasher._finalize()();
}

Swift::Int sub_1000CD9E8()
{
  unint64_t v1 = *(void *)v0;
  __int16 v2 = *(_WORD *)(v0 + 8);
  unsigned int v3 = *(_DWORD *)(v0 + 10);
  unsigned int v4 = *(_DWORD *)(v0 + 14);
  Hasher.init(_seed:)();
  LOWORD(v6) = v2;
  *(void *)((char *)&v6 + 2) = __PAIR64__(v4, v3);
  sub_100046C78((uint64_t)v7, v1, v6, SHIWORD(v4));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4AudioStreamingValidFrequencyRangeDescriptor(uint64_t a1)
{
  *(void *)&v3[2] = *(void *)(v1 + 10);
  return sub_100046C78(a1, *(void *)v1, *(unint64_t *)v3, HIWORD(*(_DWORD *)(v1 + 14)));
}

Swift::Int sub_1000CDA80()
{
  unint64_t v1 = *(void *)v0;
  __int16 v2 = *(_WORD *)(v0 + 8);
  unsigned int v3 = *(_DWORD *)(v0 + 10);
  unsigned int v4 = *(_DWORD *)(v0 + 14);
  Hasher.init(_seed:)();
  LOWORD(v6) = v2;
  *(void *)((char *)&v6 + 2) = __PAIR64__(v4, v3);
  sub_100046C78((uint64_t)v7, v1, v6, SHIWORD(v4));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4AudioStreamingValidFrequencyRangeDescriptor(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)a2;
  __int16 v3 = *(_WORD *)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(a2 + 10);
  unsigned int v5 = *(_DWORD *)(a2 + 14);
  *(_DWORD *)((char *)&v8 + 2) = *(_DWORD *)(a1 + 10);
  HIWORD(v8) = *(_DWORD *)(a1 + 14);
  unint64_t v6 = v8;
  LOWORD(v9) = v3;
  *(void *)((char *)&v9 + 2) = __PAIR64__(v5, v4);
  return sub_10003C5D0(*(void *)a1, v6, HIWORD(*(_DWORD *)(a1 + 14)), v2, v9, SHIWORD(v5));
}

Swift::Int ADC4ClusterEndBlockSegment.hashValue.getter(uint64_t a1)
{
  return sub_1000CDB54(a1, (void (*)(unsigned char *, uint64_t))sub_10004B698);
}

Swift::Int sub_1000CDB54(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1000CDBA4(uint64_t a1, uint64_t a2)
{
  return sub_1000CDBBC(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004B698);
}

Swift::Int sub_1000CDBBC(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v7, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClusterEndBlockSegment(uint64_t a1)
{
  return sub_10004B698(a1, *v1);
}

Swift::Int sub_1000CDC14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDC2C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004B698);
}

Swift::Int sub_1000CDC2C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v8, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClusterEndBlockSegment(unsigned int *a1, unsigned int *a2)
{
  return sub_100042738(*a1, *a2);
}

Swift::Int ADC4ClusterChannelAmbisonicSegment.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000CDC9C(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))sub_1000479E8);
}

Swift::Int sub_1000CDC9C(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t))
{
  Hasher.init(_seed:)();
  a3(v7, a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_1000CDCFC(uint64_t a1, uint64_t a2)
{
  return sub_1000CDD14(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))sub_1000479E8);
}

Swift::Int sub_1000CDD14(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v6 = *v3;
  uint64_t v5 = v3[1];
  Hasher.init(_seed:)();
  a3(v8, v6, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClusterChannelAmbisonicSegment(uint64_t a1)
{
  return sub_1000479E8(a1, *v1, v1[1]);
}

Swift::Int sub_1000CDD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDD90(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))sub_1000479E8);
}

Swift::Int sub_1000CDD90(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v7 = *v4;
  uint64_t v6 = v4[1];
  Hasher.init(_seed:)();
  a4(v9, v7, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClusterChannelAmbisonicSegment(unint64_t *a1, unint64_t *a2)
{
  return sub_10003D6E4(*a1, a1[1], *a2, a2[1]);
}

Swift::Int ADC4ClusterChannelDescriptionSegment.hashValue.getter(uint64_t a1)
{
  return sub_1000CDE14(a1, (void (*)(unsigned char *, uint64_t))sub_100047464);
}

Swift::Int sub_1000CDE14(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

void sub_1000CDE64(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __int16 v3 = a2;
  if (a2 >> 62)
  {
    if (a2 >> 62 == 1)
    {
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v3);
      Swift::UInt v5 = *(void *)(a3 + 16);
      Hasher._combine(_:)(v5);
      if (v5)
      {
        uint64_t v6 = (Swift::UInt16 *)(a3 + 32);
        do
        {
          Swift::UInt16 v7 = *v6++;
          Hasher._combine(_:)(v7);
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v3);
  }
}

Swift::Int sub_1000CDEF8(uint64_t a1, uint64_t a2)
{
  return sub_1000CDF10(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100047464);
}

Swift::Int sub_1000CDF10(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(unsigned int *)(v3 + 1);
  Hasher.init(_seed:)();
  a3(v8, v5 | (v6 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClusterChannelDescriptionSegment(uint64_t a1)
{
  return sub_100047464(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

Swift::Int sub_1000CDF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDF94(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100047464);
}

Swift::Int sub_1000CDF94(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = *(unsigned int *)(v4 + 1);
  Hasher.init(_seed:)();
  a4(v9, v6 | (v7 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClusterChannelDescriptionSegment(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CE004(a1, a2, a3, a4, sub_10003D004);
}

uint64_t sub_1000CE004(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16), *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16));
}

uint64_t sub_1000CE024(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A798, type metadata accessor for ADC4ClassSpecificAudioControlInterfaceDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE07C()
{
  return sub_1000CF424(&qword_10012A7A0, type metadata accessor for ADC4ClassSpecificAudioControlInterfaceDescriptor);
}

uint64_t sub_1000CE0C4(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A7A8, type metadata accessor for ADC4AudioControlSelfDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE11C()
{
  return sub_1000CF424(&qword_10012A7B0, type metadata accessor for ADC4AudioControlSelfDescriptor);
}

uint64_t sub_1000CE164(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A7B8, type metadata accessor for ADC4InputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE1BC()
{
  return sub_1000CF424(&qword_10012A7C0, type metadata accessor for ADC4InputTerminalDescriptor);
}

uint64_t sub_1000CE204(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A7C8, type metadata accessor for ADC4InputTerminalDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE25C()
{
  return sub_1000CF424(&qword_10012A7D0, type metadata accessor for ADC4InputTerminalDescriptorPart2);
}

uint64_t sub_1000CE2A4(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A7D8, type metadata accessor for ADC4OutputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE2FC()
{
  return sub_1000CF424(&qword_10012A7E0, type metadata accessor for ADC4OutputTerminalDescriptor);
}

uint64_t sub_1000CE344(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A7E8, type metadata accessor for ADC4MixerUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE39C()
{
  return sub_1000CF424(&qword_10012A7F0, type metadata accessor for ADC4MixerUnitDescriptor);
}

uint64_t sub_1000CE3E4(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A7F8, type metadata accessor for ADC4SelectorUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE43C()
{
  return sub_1000CF424(&qword_10012A800, type metadata accessor for ADC4SelectorUnitDescriptor);
}

uint64_t sub_1000CE484(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A808, type metadata accessor for ADC4FeatureUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE4DC()
{
  return sub_1000CF424(&qword_10012A810, type metadata accessor for ADC4FeatureUnitDescriptor);
}

uint64_t sub_1000CE524(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A818, type metadata accessor for ADC4EffectUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE57C()
{
  return sub_1000CF424(&qword_10012A820, type metadata accessor for ADC4EffectUnitDescriptor);
}

uint64_t sub_1000CE5C4(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A828, type metadata accessor for ADC4ProcessingUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE61C()
{
  return sub_1000CF424(&qword_10012A830, type metadata accessor for ADC4ProcessingUnitDescriptor);
}

uint64_t sub_1000CE664(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A838, type metadata accessor for ADC4ExtensionUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE6BC()
{
  return sub_1000CF424(&qword_10012A840, type metadata accessor for ADC4ExtensionUnitDescriptor);
}

uint64_t sub_1000CE704(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A848, type metadata accessor for ADC4ClockSourceDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE75C()
{
  return sub_1000CF424(&qword_10012A850, type metadata accessor for ADC4ClockSourceDescriptor);
}

uint64_t sub_1000CE7A4(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A858, type metadata accessor for ADC4ClockSelectorDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE7FC()
{
  return sub_1000CF424(&qword_10012A860, type metadata accessor for ADC4ClockSelectorDescriptor);
}

uint64_t sub_1000CE844(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A868, type metadata accessor for ADC4SamplingRateConverterUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE89C()
{
  return sub_1000CF424(&qword_10012A870, type metadata accessor for ADC4SamplingRateConverterUnitDescriptor);
}

uint64_t sub_1000CE8E4(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A878, type metadata accessor for ADC4PowerDomainEntityDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE93C()
{
  return sub_1000CF424(&qword_10012A880, type metadata accessor for ADC4PowerDomainEntityDescriptor);
}

uint64_t sub_1000CE984(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A888, type metadata accessor for ADC4TerminalCompanionDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE9DC()
{
  return sub_1000CF424(&qword_10012A890, type metadata accessor for ADC4TerminalCompanionDescriptorHeader);
}

uint64_t sub_1000CEA24(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A898, type metadata accessor for ADC4TerminalCompanionDescriptorSegmentHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CEA7C()
{
  return sub_1000CF424(&qword_10012A8A0, type metadata accessor for ADC4TerminalCompanionDescriptorSegmentHeader);
}

uint64_t sub_1000CEAC4(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A8A8, type metadata accessor for ADC4TerminalCompanionEN50322_2Segment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CEB1C()
{
  return sub_1000CF424(&qword_10012A8B0, type metadata accessor for ADC4TerminalCompanionEN50322_2Segment);
}

uint64_t sub_1000CEB64(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A8B8, type metadata accessor for ADC4TerminalCompanionChannelBandwidthSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CEBBC()
{
  return sub_1000CF424(&qword_10012A8C0, type metadata accessor for ADC4TerminalCompanionChannelBandwidthSegment);
}

uint64_t sub_1000CEC04(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A8C8, type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CEC5C()
{
  return sub_1000CF424(&qword_10012A8D0, type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegment);
}

uint64_t sub_1000CECA4(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A8D8, type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegmentPoint);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CECFC()
{
  return sub_1000CF424(&qword_10012A8E0, type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegmentPoint);
}

uint64_t sub_1000CED44(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A8E8, type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CED9C()
{
  return sub_1000CF424(&qword_10012A8F0, type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegment);
}

uint64_t sub_1000CEDE4(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A8F8, type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CEE3C()
{
  return sub_1000CF424(&qword_10012A900, type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint);
}

uint64_t sub_1000CEE84(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A908, type metadata accessor for ADC4TerminalCompanionChannelPositionXYZSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CEEDC()
{
  return sub_1000CF424(&qword_10012A910, type metadata accessor for ADC4TerminalCompanionChannelPositionXYZSegment);
}

uint64_t sub_1000CEF24(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A918, type metadata accessor for ADC4TerminalCompanionChannelPositionRThetaPhiSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CEF7C()
{
  return sub_1000CF424(&qword_10012A920, type metadata accessor for ADC4TerminalCompanionChannelPositionRThetaPhiSegment);
}

uint64_t sub_1000CEFC4(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A928, type metadata accessor for ADC4ConnectorEntityDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CF01C()
{
  return sub_1000CF424(&qword_10012A930, type metadata accessor for ADC4ConnectorEntityDescriptor);
}

uint64_t sub_1000CF064(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A938, type metadata accessor for ADC4ClassSpecificAudioStreamingInterfaceDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CF0BC()
{
  return sub_1000CF424(&qword_10012A940, type metadata accessor for ADC4ClassSpecificAudioStreamingInterfaceDescriptor);
}

uint64_t sub_1000CF104(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A948, type metadata accessor for ADC4AudioStreamingSelfDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CF15C()
{
  return sub_1000CF424(&qword_10012A950, type metadata accessor for ADC4AudioStreamingSelfDescriptor);
}

uint64_t sub_1000CF1A4(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A958, type metadata accessor for ADC4AudioStreamingValidFrequencyRangeDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CF1FC()
{
  return sub_1000CF424(&qword_10012A960, type metadata accessor for ADC4AudioStreamingValidFrequencyRangeDescriptor);
}

uint64_t sub_1000CF244(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A968, type metadata accessor for ADC4ClusterEndBlockSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CF29C()
{
  return sub_1000CF424(&qword_10012A970, type metadata accessor for ADC4ClusterEndBlockSegment);
}

uint64_t sub_1000CF2E4(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A978, type metadata accessor for ADC4ClusterChannelAmbisonicSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CF33C()
{
  return sub_1000CF424(&qword_10012A980, type metadata accessor for ADC4ClusterChannelAmbisonicSegment);
}

uint64_t sub_1000CF384(uint64_t a1)
{
  uint64_t result = sub_1000CF424(&qword_10012A988, type metadata accessor for ADC4ClusterChannelDescriptionSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CF3DC()
{
  return sub_1000CF424(&qword_10012A990, type metadata accessor for ADC4ClusterChannelDescriptionSegment);
}

uint64_t sub_1000CF424(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_1000CF46C()
{
  unint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  sub_1000CDE64((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_1000CF4B8(uint64_t a1)
{
  sub_1000CDE64(a1, *(void *)v1, *(void *)(v1 + 8));
}

Swift::Int sub_1000CF4C0()
{
  unint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  sub_1000CDE64((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

BOOL sub_1000CF508(void *a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *a1 >> 62;
  if (!v3)
  {
    if (!(v2 >> 62)) {
      return *a1 == v2;
    }
    return 0;
  }
  uint64_t v4 = a2[1];
  if (v3 == 1)
  {
    if (v2 >> 62 == 1 && (unsigned __int16)*a1 == (unsigned __int16)v2) {
      return sub_1000B5F54(a1[1], v4);
    }
    return 0;
  }
  return v2 >> 62 == 2 && v2 == 0x8000000000000000 && v4 == 0;
}

char *sub_1000CF584@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (char *)sub_10007B0C4(1, a1, a2);
  if (!v3)
  {
    if (*((void *)result + 2))
    {
      uint64_t v7 = v5;
      uint64_t v8 = v6;
      uint64_t v9 = *((void *)result + 4);
      __int16 v10 = *((_WORD *)result + 20);
      __int16 v11 = *((_WORD *)result + 21);
      __int16 v12 = *((_WORD *)result + 22);
      int v13 = *(_DWORD *)(result + 46);
      __int16 v14 = *((_WORD *)result + 25);
      uint64_t v15 = (__int16 *)*((unsigned __int16 *)result + 26);
      swift_bridgeObjectRelease();
      unint64_t v16 = sub_100075CE8(v15, v7, v8);
      __int16 v32 = v11;
      __int16 v33 = v12;
      __int16 v34 = v14;
      int v35 = v13;
      uint64_t result = sub_10007B050(1, v17, v18);
      if (*((void *)result + 2))
      {
        id v21 = v19;
        uint64_t v22 = v20;
        __int16 v23 = *((_WORD *)result + 16);
        unint64_t v24 = (char *)*((unsigned __int16 *)result + 17);
        swift_bridgeObjectRelease();
        if (!v24)
        {
          uint64_t v30 = 0x8000000000000000;
          uint64_t result = v24;
          goto LABEL_14;
        }
        if (v24 != 1)
        {
          if (v24 != 2)
          {
            swift_bridgeObjectRelease();
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v31 = 36;
            *(void *)(v31 + 8) = 0;
            *(void *)(v31 + 16) = 0xE000000000000000;
            strcpy((char *)(v31 + 24), "assemble(_:)");
            *(unsigned char *)(v31 + 37) = 0;
            *(_WORD *)(v31 + 38) = -5120;
            *(void *)(v31 + 40) = 0xD00000000000001FLL;
            *(void *)(v31 + 48) = 0x80000001000E36A0;
            *(void *)(v31 + 56) = 184;
            return (char *)swift_willThrow();
          }
          uint64_t result = (char *)sub_100075CE8((__int16 *)1, v21, v22);
          if (*((void *)result + 2))
          {
            uint64_t v27 = v25;
            uint64_t v28 = v26;
            unint64_t v29 = *((unsigned __int16 *)result + 16);
            swift_bridgeObjectRelease();
            uint64_t result = (char *)sub_100075CE8((__int16 *)v29, v27, v28);
            uint64_t v30 = v29 | 0x4000000000000000;
LABEL_14:
            *(void *)a3 = v9;
            *(_WORD *)(a3 + 8) = v10;
            *(_WORD *)(a3 + 10) = v32;
            *(_WORD *)(a3 + 12) = v33;
            *(_DWORD *)(a3 + 14) = v35;
            *(_WORD *)(a3 + 18) = v34;
            *(_WORD *)(a3 + 20) = (_WORD)v15;
            *(void *)(a3 + 24) = v16;
            *(_WORD *)(a3 + 32) = v23;
            *(_WORD *)(a3 + 34) = (_WORD)v24;
            *(void *)(a3 + 40) = v30;
            *(void *)(a3 + 48) = result;
            return result;
          }
          goto LABEL_19;
        }
        uint64_t result = sub_1000781B8(1, v21, v22);
        if (*((void *)result + 2))
        {
          uint64_t v30 = result[32];
          swift_bridgeObjectRelease();
          uint64_t result = 0;
          goto LABEL_14;
        }
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

unsigned __int16 *sub_1000CF804@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (unsigned __int16 *)sub_10007B460(1, a1, a2);
  if (!v3)
  {
    if (*((void *)result + 2))
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      long long v20 = *((_OWORD *)result + 2);
      int v10 = *((_DWORD *)result + 12);
      unsigned __int16 v11 = result[26];
      __int16 v12 = (unsigned __int16 *)result[27];
      swift_bridgeObjectRelease();
      if (!v12)
      {
        uint64_t v13 = 0x8000000000000000;
        uint64_t result = v12;
        goto LABEL_9;
      }
      if (v12 == 2)
      {
        uint64_t result = (unsigned __int16 *)sub_100075CE8((__int16 *)1, v8, v9);
        if (*((void *)result + 2))
        {
          unint64_t v16 = v14;
          uint64_t v17 = v15;
          unint64_t v18 = result[16];
          swift_bridgeObjectRelease();
          uint64_t result = (unsigned __int16 *)sub_100075CE8((__int16 *)v18, v16, v17);
          uint64_t v13 = v18 | 0x4000000000000000;
          goto LABEL_9;
        }
        goto LABEL_15;
      }
      if (v12 != 1)
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v19 = 36;
        *(void *)(v19 + 8) = 0;
        *(void *)(v19 + 16) = 0xE000000000000000;
        strcpy((char *)(v19 + 24), "assemble(_:)");
        *(unsigned char *)(v19 + 37) = 0;
        *(_WORD *)(v19 + 38) = -5120;
        *(void *)(v19 + 40) = 0xD00000000000001FLL;
        *(void *)(v19 + 48) = 0x80000001000E36A0;
        *(void *)(v19 + 56) = 268;
        return (unsigned __int16 *)swift_willThrow();
      }
      uint64_t result = (unsigned __int16 *)sub_1000781B8(1, v8, v9);
      if (*((void *)result + 2))
      {
        uint64_t v13 = *((unsigned __int8 *)result + 32);
        swift_bridgeObjectRelease();
        uint64_t result = 0;
LABEL_9:
        *(_OWORD *)a3 = v20;
        *(_DWORD *)(a3 + 16) = v10;
        *(_WORD *)(a3 + 20) = v11;
        *(_WORD *)(a3 + 22) = (_WORD)v12;
        *(void *)(a3 + 24) = v13;
        *(void *)(a3 + 32) = result;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

Swift::Int sub_1000CF9D8()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  switch(v3)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      sub_10004744C((uint64_t)v5, v1, v2 & 0xFFFFFFFFFFFFLL);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      sub_1000479E8((uint64_t)v5, v1, v2);
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      sub_100047464((uint64_t)v5, v1 & 0xFFFFFFFFFFFFLL);
      break;
    default:
      Hasher._combine(_:)(0);
      sub_10004B698((uint64_t)v5, v1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_1000CFAC8(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  switch(*(unsigned char *)(v1 + 16))
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      uint64_t result = sub_10004744C(a1, v2, v3 & 0xFFFFFFFFFFFFLL);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      uint64_t result = sub_1000479E8(a1, v2, v3);
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      uint64_t result = sub_100047464(a1, v2 & 0xFFFFFFFFFFFFLL);
      break;
    default:
      Hasher._combine(_:)(0);
      uint64_t result = sub_10004B698(a1, v2);
      break;
  }
  return result;
}

Swift::Int sub_1000CFBF0()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  switch(v3)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      sub_10004744C((uint64_t)v5, v1, v2 & 0xFFFFFFFFFFFFLL);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      sub_1000479E8((uint64_t)v5, v1, v2);
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      sub_100047464((uint64_t)v5, v1 & 0xFFFFFFFFFFFFLL);
      break;
    default:
      Hasher._combine(_:)(0);
      sub_10004B698((uint64_t)v5, v1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_1000CFCDC(uint64_t a1, uint64_t a2)
{
  return sub_1000D1E64(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

__n128 sub_1000CFCF8@<Q0>(unsigned char *a1@<X0>, __int16 a2@<W1>, __n128 *a3@<X8>)
{
  uint64_t v5 = a1;
  uint64_t v7 = sub_100089F98(a1, a2);
  if (v8 >> 60 == 15) {
LABEL_36:
  }
    __break(1u);
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (v7 >> 32) - (int)v7;
      if (v7 >> 32 < (int)v7)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v31 = v5;
      uint64_t v13 = (unsigned char *)__DataStorage._bytes.getter();
      if (v13)
      {
        uint64_t v14 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v10, v14))
        {
          v13 += (int)v10 - v14;
          goto LABEL_8;
        }
        goto LABEL_35;
      }
LABEL_8:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (v10 >> 32) - (int)v10;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = &v13[v16];
      if (v13) {
        uint64_t v18 = (uint64_t)v17;
      }
      else {
        uint64_t v18 = 0;
      }
      sub_1000CFFAC(v13, v18, (uint64_t)&v33);
LABEL_26:
      sub_1000541C0(v10, v9);
      uint64_t v5 = v31;
      if (!v3)
      {
LABEL_30:
        unsigned __int32 v30 = v34;
        __n128 result = v35;
        a3->n128_u64[0] = v33;
        a3->n128_u32[2] = v30;
        a3[1].n128_u64[0] = (unint64_t)v5;
        a3[1].n128_u16[4] = a2;
        a3[2] = result;
      }
      return result;
    case 2uLL:
      uint64_t v31 = v5;
      uint64_t v20 = *(void *)(v7 + 16);
      uint64_t v19 = *(void *)(v7 + 24);
      swift_retain();
      swift_retain();
      id v21 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v21) {
        goto LABEL_18;
      }
      uint64_t v22 = __DataStorage._offset.getter();
      if (__OFSUB__(v20, v22)) {
        goto LABEL_34;
      }
      v21 += v20 - v22;
LABEL_18:
      BOOL v23 = __OFSUB__(v19, v20);
      uint64_t v24 = v19 - v20;
      if (v23) {
        goto LABEL_33;
      }
      uint64_t v25 = __DataStorage._length.getter();
      if (v25 >= v24) {
        uint64_t v26 = v24;
      }
      else {
        uint64_t v26 = v25;
      }
      uint64_t v27 = &v21[v26];
      if (v21) {
        uint64_t v28 = (uint64_t)v27;
      }
      else {
        uint64_t v28 = 0;
      }
      sub_1000CFFAC(v21, v28, (uint64_t)&v33);
      swift_release();
      swift_release();
      goto LABEL_26;
    case 3uLL:
      memset(v32, 0, 14);
      unsigned __int16 v11 = (char *)v32;
      goto LABEL_29;
    default:
      v32[0] = v7;
      LOWORD(v32[1]) = v8;
      BYTE2(v32[1]) = BYTE2(v8);
      BYTE3(v32[1]) = BYTE3(v8);
      BYTE4(v32[1]) = BYTE4(v8);
      BYTE5(v32[1]) = BYTE5(v8);
      unsigned __int16 v11 = (char *)v32 + BYTE6(v8);
LABEL_29:
      sub_1000CFFAC(v32, (uint64_t)v11, (uint64_t)&v33);
      sub_1000541C0(v10, v9);
      if (!v3) {
        goto LABEL_30;
      }
      return result;
  }
}

uint64_t sub_1000CFFAC@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_10007BF74(1, a1, a2);
  if (!v4)
  {
    unint64_t v14 = *(void *)(result + 16);
    if (!v14)
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    unint64_t v3 = v11;
    uint64_t v5 = v12;
    uint64_t v8 = *(void *)(result + 32);
    unsigned int v15 = *(unsigned __int16 *)(result + 40);
    unsigned int v16 = *(unsigned __int16 *)(result + 42);
    swift_bridgeObjectRelease();
    id v65 = (unsigned char *)v3;
    NSString v66 = v5;
    uint64_t v6 = (uint64_t)sub_1000D1F00((uint64_t *)&v65);
    uint64_t v7 = v17;
    char v19 = v18;
    unsigned int v59 = v15;
    unsigned int v62 = v16;
    if (!v18)
    {
      uint64_t v13 = sub_10005A8A4(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v3 = v13[2];
      unint64_t v14 = v13[3];
      uint64_t v5 = (void *)(v3 + 1);
      if (v3 >= v14 >> 1) {
        goto LABEL_46;
      }
      goto LABEL_35;
    }
    for (uint64_t i = _swiftEmptyArrayStorage; ; uint64_t i = (void *)v3)
    {
      sub_10000AC7C(&qword_100128E70);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_1000E8090;
      *(void *)(v20 + 32) = v6;
      *(void *)(v20 + 40) = v7;
      *(unsigned char *)(v20 + 48) = v19;
      unint64_t v14 = v62;
      if (v62) {
        break;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      uint64_t v13 = sub_10005A8A4((void *)(v14 > 1), (int64_t)v5, 1, v13);
LABEL_35:
      void v13[2] = v5;
      uint64_t v55 = (char *)v13 + 17 * v3;
      *((void *)v55 + 4) = v6;
      *((void *)v55 + 5) = v7;
      v55[48] = 0;
      unint64_t v3 = (unint64_t)v13;
      uint64_t v6 = (uint64_t)sub_1000D1F00((uint64_t *)&v65);
      uint64_t v7 = v56;
      char v19 = v57;
    }
    uint64_t v5 = (void *)v20;
    LOWORD(v21) = 1;
    uint64_t v63 = _swiftEmptyArrayStorage;
    uint64_t v64 = a3;
    while (2)
    {
      unsigned __int16 v60 = v21;
      do
      {
        uint64_t v22 = v65;
        uint64_t v7 = (uint64_t)v66;
        BOOL v23 = sub_10007BF00(1, (uint64_t)v65, (uint64_t)v66);
        unint64_t v14 = *((void *)v23 + 2);
        if (!v14)
        {
          __break(1u);
          goto LABEL_40;
        }
        unint64_t v3 = *((unsigned __int16 *)v23 + 17);
        swift_bridgeObjectRelease();
        if ((int)v3 > 258)
        {
          if (v3 == 259)
          {
            id v43 = sub_10007B7E0(1, v22, v7);
            unint64_t v14 = *((void *)v43 + 2);
            if (!v14) {
              goto LABEL_44;
            }
            uint64_t v46 = v44;
            uint64_t v47 = v45;
            uint64_t v48 = *((unsigned int *)v43 + 8);
            uint64_t v49 = *((unsigned __int16 *)v43 + 18);
            swift_bridgeObjectRelease();
            uint64_t v29 = 0;
            uint64_t v6 = 0;
            id v65 = (unsigned char *)v46;
            NSString v66 = (void *)v47;
            char v30 = 3;
            unint64_t v3 = v48 | (v49 << 32);
            a3 = v64;
          }
          else
          {
            if (v3 != 0xFFFF)
            {
LABEL_36:
              sub_10000CD54();
              swift_allocError();
              *(unsigned char *)uint64_t v58 = 37;
              *(void *)(v58 + 8) = 0;
              *(void *)(v58 + 16) = 0xE000000000000000;
              *(void *)(v58 + 24) = 0xD000000000000012;
              *(void *)(v58 + 32) = 0x80000001000E69E0;
              *(void *)(v58 + 40) = 0xD00000000000001FLL;
              *(void *)(v58 + 48) = 0x80000001000E36A0;
              *(void *)(v58 + 56) = 1266;
              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
            uint64_t v31 = sub_10007B780(1, v22, v7);
            unint64_t v14 = *((void *)v31 + 2);
            if (!v14) {
              goto LABEL_42;
            }
            uint64_t v34 = v32;
            uint64_t v35 = v33;
            unint64_t v3 = *((unsigned int *)v31 + 8);
            swift_bridgeObjectRelease();
            uint64_t v29 = 0;
            char v30 = 0;
            id v65 = (unsigned char *)v34;
            NSString v66 = (void *)v35;
            uint64_t v6 = 1;
          }
        }
        else if (v3 == 257)
        {
          Swift::String v36 = sub_10007BB60(1, v22, v7);
          unint64_t v14 = *((void *)v36 + 2);
          if (!v14) {
            goto LABEL_43;
          }
          uint64_t v39 = v37;
          uint64_t v40 = v38;
          unint64_t v3 = *((void *)v36 + 4);
          uint64_t v41 = *((unsigned int *)v36 + 10);
          uint64_t v42 = *((unsigned __int16 *)v36 + 22);
          swift_bridgeObjectRelease();
          uint64_t v6 = 0;
          id v65 = (unsigned char *)v39;
          NSString v66 = (void *)v40;
          uint64_t v29 = v41 | (v42 << 32);
          char v30 = 1;
        }
        else
        {
          if (v3 != 258) {
            goto LABEL_36;
          }
          uint64_t v24 = sub_10007B840((long long *)1, v22, v7);
          unint64_t v14 = *((void *)v24 + 2);
          if (!v14) {
            goto LABEL_41;
          }
          uint64_t v27 = v25;
          uint64_t v28 = v26;
          unint64_t v3 = *((void *)v24 + 4);
          uint64_t v29 = *((void *)v24 + 5);
          swift_bridgeObjectRelease();
          uint64_t v6 = 0;
          id v65 = (unsigned char *)v27;
          NSString v66 = (void *)v28;
          char v30 = 2;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = sub_10005A8A4(0, v5[2] + 1, 1, v5);
        }
        unint64_t v51 = v5[2];
        unint64_t v50 = v5[3];
        if (v51 >= v50 >> 1) {
          uint64_t v5 = sub_10005A8A4((void *)(v50 > 1), v51 + 1, 1, v5);
        }
        _OWORD v5[2] = v51 + 1;
        long long v52 = (char *)v5 + 17 * v51;
        *((void *)v52 + 4) = v3;
        *((void *)v52 + 5) = v29;
        v52[48] = v30;
      }
      while (!v6);
      swift_bridgeObjectRetain();
      uint64_t v53 = v63;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v53 = sub_10005A9BC(0, v63[2] + 1, 1, v63);
      }
      unint64_t v3 = v53[2];
      unint64_t v54 = v53[3];
      uint64_t v6 = v59;
      if (v3 >= v54 >> 1) {
        uint64_t v53 = sub_10005A9BC((void *)(v54 > 1), v3 + 1, 1, v53);
      }
      _OWORD v53[2] = v3 + 1;
      v53[v3 + 4] = v5;
      uint64_t result = swift_bridgeObjectRelease();
      if (v62 == v60)
      {
        *(void *)a3 = v8;
        *(_WORD *)(a3 + 8) = v59;
        *(_WORD *)(a3 + 10) = v62;
        *(void *)(a3 + 16) = i;
        *(void *)(a3 + 24) = v53;
      }
      else
      {
        uint64_t v63 = v53;
        int v21 = v60 + 1;
        uint64_t v5 = _swiftEmptyArrayStorage;
        if ((v21 & 0x10000) == 0) {
          continue;
        }
        __break(1u);
      }
      break;
    }
  }
  return result;
}

uint64_t sub_1000D04C8(unsigned char *a1, __int16 a2)
{
  uint64_t v3 = sub_100089F98(a1, a2);
  if (v4 >> 60 == 15) {
LABEL_45:
  }
    __break(1u);
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  switch(v4 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      uint64_t v16 = *(void *)(v3 + 16);
      uint64_t v17 = *(void *)(v3 + 24);
      swift_retain();
      swift_retain();
      uint64_t v18 = __DataStorage._bytes.getter();
      if (!v18) {
        goto LABEL_22;
      }
      uint64_t v19 = __DataStorage._offset.getter();
      if (__OFSUB__(v16, v19)) {
        goto LABEL_41;
      }
      v18 += v16 - v19;
LABEL_22:
      BOOL v20 = __OFSUB__(v17, v16);
      uint64_t v21 = v17 - v16;
      if (v20) {
        goto LABEL_39;
      }
      uint64_t v22 = __DataStorage._length.getter();
      if (v22 >= v21) {
        uint64_t v23 = v21;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = v18 + v23;
      if (v18) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v26 = sub_100076074(1, v18, v25);
      if (v2)
      {
        swift_release();
        swift_release();
        return sub_1000541C0(v6, v5);
      }
      if (!*((void *)v26 + 2))
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      int v39 = v26[33];
      int v37 = v26[32];
      int v38 = v26[34];
      uint64_t v31 = (__int16 *)v26[35];
      swift_bridgeObjectRelease();
      sub_100075CE8(v31, v29, v30);
      swift_release();
      swift_release();
      sub_1000541C0(v6, v5);
      LODWORD(v35) = v31;
      int v36 = v37;
      return v36 | (v39 << 8) | (v38 << 16) | (v35 << 24);
    case 3uLL:
      memset(v40, 0, 14);
      uint64_t v7 = sub_100076074(1, (uint64_t)v40, (uint64_t)v40);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_35;
      }
      goto LABEL_42;
    default:
      v40[0] = v3;
      LOWORD(v40[1]) = v4;
      BYTE2(v40[1]) = BYTE2(v4);
      BYTE3(v40[1]) = BYTE3(v4);
      BYTE4(v40[1]) = BYTE4(v4);
      BYTE5(v40[1]) = BYTE5(v4);
      uint64_t v7 = sub_100076074(1, (uint64_t)v40, (uint64_t)v40 + BYTE6(v4));
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_35;
      }
      __break(1u);
LABEL_6:
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
      }
      else
      {
        uint64_t v10 = __DataStorage._bytes.getter();
        if (!v10)
        {
LABEL_10:
          uint64_t v12 = __DataStorage._length.getter();
          if (v12 >= (v6 >> 32) - (int)v6) {
            uint64_t v13 = (v6 >> 32) - (int)v6;
          }
          else {
            uint64_t v13 = v12;
          }
          uint64_t v14 = v10 + v13;
          if (v10) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v7 = sub_100076074(1, v10, v15);
          if (v2) {
            return sub_1000541C0(v6, v5);
          }
          if (*((void *)v7 + 2))
          {
LABEL_35:
            uint64_t v32 = v8;
            uint64_t v33 = v9;
            int v36 = v7[32];
            int v38 = v7[34];
            int v39 = v7[33];
            uint64_t v35 = (__int16 *)v7[35];
            swift_bridgeObjectRelease();
            sub_100075CE8(v35, v32, v33);
            sub_1000541C0(v6, v5);
            return v36 | (v39 << 8) | (v38 << 16) | (v35 << 24);
          }
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        uint64_t v11 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v6, v11))
        {
          v10 += (int)v6 - v11;
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
  }
}

uint64_t sub_1000D08A0@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1;
  uint64_t v7 = sub_100089F98(a1, a2);
  if (v8 >> 60 == 15) {
    goto LABEL_46;
  }
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      uint64_t v33 = v5;
      uint64_t v21 = *(void *)(v7 + 16);
      uint64_t v22 = *(void *)(v7 + 24);
      swift_retain();
      swift_retain();
      uint64_t v23 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v23) {
        goto LABEL_22;
      }
      uint64_t v24 = __DataStorage._offset.getter();
      if (__OFSUB__(v21, v24)) {
        goto LABEL_42;
      }
      v23 += v21 - v24;
LABEL_22:
      BOOL v25 = __OFSUB__(v22, v21);
      uint64_t v26 = v22 - v21;
      if (v25) {
        goto LABEL_40;
      }
      uint64_t v27 = __DataStorage._length.getter();
      if (v27 >= v26) {
        uint64_t v28 = v26;
      }
      else {
        uint64_t v28 = v27;
      }
      uint64_t v29 = &v23[v28];
      if (v23) {
        uint64_t v30 = (uint64_t)v29;
      }
      else {
        uint64_t v30 = 0;
      }
      uint64_t v31 = sub_1000772B4(1, v23, v30);
      if (v3)
      {
        swift_release();
        swift_release();
        return sub_1000541C0(v10, v9);
      }
      if (!*((void *)v31 + 2)) {
        goto LABEL_45;
      }
      long long v34 = *((_OWORD *)v31 + 2);
      int v19 = *((_DWORD *)v31 + 12);
      __int16 v20 = *((_WORD *)v31 + 26);
      swift_release();
      swift_release();
      goto LABEL_37;
    case 3uLL:
      memset(v35, 0, 14);
      uint64_t v11 = sub_1000772B4(1, v35, (uint64_t)v35);
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (*((void *)v11 + 2)) {
        goto LABEL_34;
      }
      goto LABEL_43;
    default:
      v35[0] = v7;
      LOWORD(v35[1]) = v8;
      BYTE2(v35[1]) = BYTE2(v8);
      BYTE3(v35[1]) = BYTE3(v8);
      BYTE4(v35[1]) = BYTE4(v8);
      BYTE5(v35[1]) = BYTE5(v8);
      uint64_t v11 = sub_1000772B4(1, v35, (uint64_t)v35 + BYTE6(v8));
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (*((void *)v11 + 2))
      {
LABEL_34:
        long long v34 = *((_OWORD *)v11 + 2);
        int v19 = *((_DWORD *)v11 + 12);
        __int16 v20 = *((_WORD *)v11 + 26);
        swift_bridgeObjectRelease();
        uint64_t result = sub_1000541C0(v10, v9);
        goto LABEL_38;
      }
      __break(1u);
LABEL_6:
      if (v10 >> 32 < (int)v10)
      {
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v33 = v5;
      uint64_t v12 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v12) {
        goto LABEL_10;
      }
      uint64_t v13 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v10, v13))
      {
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      v12 += (int)v10 - v13;
LABEL_10:
      uint64_t v14 = __DataStorage._length.getter();
      if (v14 >= (v10 >> 32) - (int)v10) {
        uint64_t v15 = (v10 >> 32) - (int)v10;
      }
      else {
        uint64_t v15 = v14;
      }
      uint64_t v16 = &v12[v15];
      if (v12) {
        uint64_t v17 = (uint64_t)v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = sub_1000772B4(1, v12, v17);
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (!*((void *)v18 + 2))
      {
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
      }
      long long v34 = *((_OWORD *)v18 + 2);
      int v19 = *((_DWORD *)v18 + 12);
      __int16 v20 = *((_WORD *)v18 + 26);
LABEL_37:
      swift_bridgeObjectRelease();
      uint64_t result = sub_1000541C0(v10, v9);
      unint64_t v5 = v33;
LABEL_38:
      *(_OWORD *)a3 = v34;
      *(_DWORD *)(a3 + 16) = v19;
      *(_WORD *)(a3 + 20) = v20;
      *(void *)(a3 + 24) = v5;
      *(_WORD *)(a3 + 32) = a2;
      return result;
  }
}

uint64_t sub_1000D0BF0@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1;
  uint64_t v7 = sub_100089F98(a1, a2);
  if (v8 >> 60 == 15) {
LABEL_47:
  }
    __break(1u);
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v20 = (v7 >> 32) - (int)v7;
      if (v7 >> 32 < (int)v7)
      {
        __break(1u);
LABEL_40:
        __break(1u);
      }
      else
      {
        uint64_t v21 = (unsigned char *)__DataStorage._bytes.getter();
        if (!v21) {
          goto LABEL_10;
        }
        uint64_t v22 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v10, v22))
        {
          v21 += (int)v10 - v22;
LABEL_10:
          uint64_t v23 = __DataStorage._length.getter();
          if (v23 >= v20) {
            uint64_t v24 = (v10 >> 32) - (int)v10;
          }
          else {
            uint64_t v24 = v23;
          }
          BOOL v25 = &v21[v24];
          if (v21) {
            uint64_t v26 = (uint64_t)v25;
          }
          else {
            uint64_t v26 = 0;
          }
          uint64_t v27 = sub_100077314(1, v21, v26);
          if (!v3)
          {
            if (v27[2])
            {
              uint64_t v30 = v28;
              uint64_t v31 = v29;
              uint64_t v16 = v27[4];
              __int16 v59 = *((_WORD *)v27 + 21);
              __int16 v55 = *((_WORD *)v27 + 20);
              int v58 = *((_DWORD *)v27 + 11);
              uint64_t v17 = (__int16 *)*((unsigned __int16 *)v27 + 24);
              swift_bridgeObjectRelease();
              uint64_t v18 = sub_100075CE8(v17, v30, v31);
              uint64_t result = sub_1000541C0(v10, v9);
LABEL_19:
              __int16 v32 = v55;
              goto LABEL_38;
            }
            goto LABEL_45;
          }
          return sub_1000541C0(v10, v9);
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    case 2uLL:
      unint64_t v54 = v5;
      uint64_t v34 = *(void *)(v7 + 16);
      uint64_t v33 = *(void *)(v7 + 24);
      swift_retain();
      swift_retain();
      uint64_t v35 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v35) {
        goto LABEL_23;
      }
      uint64_t v36 = __DataStorage._offset.getter();
      if (__OFSUB__(v34, v36)) {
        goto LABEL_42;
      }
      v35 += v34 - v36;
LABEL_23:
      BOOL v37 = __OFSUB__(v33, v34);
      uint64_t v38 = v33 - v34;
      if (v37) {
        goto LABEL_40;
      }
      uint64_t v39 = __DataStorage._length.getter();
      if (v39 >= v38) {
        uint64_t v40 = v38;
      }
      else {
        uint64_t v40 = v39;
      }
      uint64_t v41 = &v35[v40];
      if (v35) {
        uint64_t v42 = (uint64_t)v41;
      }
      else {
        uint64_t v42 = 0;
      }
      id v43 = sub_100077314(1, v35, v42);
      if (v3)
      {
        swift_release();
        swift_release();
        return sub_1000541C0(v10, v9);
      }
      if (!v43[2])
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      uint64_t v46 = v44;
      uint64_t v47 = v45;
      uint64_t v16 = v43[4];
      __int16 v59 = *((_WORD *)v43 + 21);
      __int16 v56 = *((_WORD *)v43 + 20);
      int v58 = *((_DWORD *)v43 + 11);
      uint64_t v48 = (__int16 *)*((unsigned __int16 *)v43 + 24);
      swift_bridgeObjectRelease();
      uint64_t v18 = sub_100075CE8(v48, v46, v47);
      __int16 v32 = v56;
      swift_release();
      swift_release();
      uint64_t result = sub_1000541C0(v10, v9);
      LOWORD(v17) = (_WORD)v48;
      unint64_t v5 = v54;
LABEL_38:
      *(void *)a3 = v16;
      *(_WORD *)(a3 + 8) = v32;
      *(_WORD *)(a3 + 10) = v59;
      *(_DWORD *)(a3 + 12) = v58;
      *(_WORD *)(a3 + 16) = (_WORD)v17;
      *(void *)(a3 + 24) = v5;
      *(_WORD *)(a3 + 32) = a2;
      *(void *)(a3 + 40) = v18;
      return result;
    case 3uLL:
      memset(v60, 0, 14);
      uint64_t v49 = sub_100077314(1, v60, (uint64_t)v60);
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (!v49[2]) {
        goto LABEL_44;
      }
      long long v52 = v50;
      uint64_t v53 = v51;
      uint64_t v16 = v49[4];
      __int16 v59 = *((_WORD *)v49 + 21);
      __int16 v57 = *((_WORD *)v49 + 20);
      int v58 = *((_DWORD *)v49 + 11);
      uint64_t v17 = (__int16 *)*((unsigned __int16 *)v49 + 24);
      swift_bridgeObjectRelease();
      uint64_t v18 = sub_100075CE8(v17, v52, v53);
      __int16 v32 = v57;
      uint64_t result = sub_1000541C0(v10, v9);
      goto LABEL_38;
    default:
      v60[0] = v7;
      LOWORD(v60[1]) = v8;
      BYTE2(v60[1]) = BYTE2(v8);
      BYTE3(v60[1]) = BYTE3(v8);
      BYTE4(v60[1]) = BYTE4(v8);
      BYTE5(v60[1]) = BYTE5(v8);
      uint64_t v11 = sub_100077314(1, v60, (uint64_t)v60 + BYTE6(v8));
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (!v11[2]) {
        goto LABEL_43;
      }
      uint64_t v14 = v12;
      uint64_t v15 = v13;
      uint64_t v16 = v11[4];
      __int16 v59 = *((_WORD *)v11 + 21);
      __int16 v55 = *((_WORD *)v11 + 20);
      int v58 = *((_DWORD *)v11 + 11);
      uint64_t v17 = (__int16 *)*((unsigned __int16 *)v11 + 24);
      swift_bridgeObjectRelease();
      uint64_t v18 = sub_100075CE8(v17, v14, v15);
      uint64_t result = sub_1000541C0(v10, v9);
      goto LABEL_19;
  }
}

__n128 sub_1000D1078@<Q0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1;
  uint64_t v7 = sub_100089F98(a1, a2);
  if (v8 >> 60 == 15) {
LABEL_36:
  }
    __break(1u);
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (v7 >> 32) - (int)v7;
      if (v7 >> 32 < (int)v7)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v35 = v5;
      uint64_t v13 = (unsigned char *)__DataStorage._bytes.getter();
      if (v13)
      {
        uint64_t v14 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v10, v14))
        {
          v13 += (int)v10 - v14;
          goto LABEL_8;
        }
        goto LABEL_35;
      }
LABEL_8:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (v10 >> 32) - (int)v10;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = &v13[v16];
      if (v13) {
        uint64_t v18 = (uint64_t)v17;
      }
      else {
        uint64_t v18 = 0;
      }
      sub_1000CF584(v13, v18, (uint64_t)&v37);
LABEL_26:
      sub_1000541C0(v10, v9);
      unint64_t v5 = v35;
      if (!v3)
      {
LABEL_30:
        int v30 = v38;
        __int16 v31 = v39;
        uint64_t v32 = v40;
        uint64_t v33 = v41;
        int v34 = v42;
        __n128 result = v43;
        *(void *)a3 = v37;
        *(_DWORD *)(a3 + 8) = v30;
        *(_WORD *)(a3 + 12) = v31;
        *(void *)(a3 + 14) = v32;
        *(_DWORD *)(a3 + 22) = v34;
        *(void *)(a3 + 32) = v5;
        *(_WORD *)(a3 + 40) = a2;
        *(void *)(a3 + 48) = v33;
        *(__n128 *)(a3 + 56) = result;
      }
      return result;
    case 2uLL:
      uint64_t v35 = v5;
      uint64_t v20 = *(void *)(v7 + 16);
      uint64_t v19 = *(void *)(v7 + 24);
      swift_retain();
      swift_retain();
      uint64_t v21 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v21) {
        goto LABEL_18;
      }
      uint64_t v22 = __DataStorage._offset.getter();
      if (__OFSUB__(v20, v22)) {
        goto LABEL_34;
      }
      v21 += v20 - v22;
LABEL_18:
      BOOL v23 = __OFSUB__(v19, v20);
      uint64_t v24 = v19 - v20;
      if (v23) {
        goto LABEL_33;
      }
      uint64_t v25 = __DataStorage._length.getter();
      if (v25 >= v24) {
        uint64_t v26 = v24;
      }
      else {
        uint64_t v26 = v25;
      }
      uint64_t v27 = &v21[v26];
      if (v21) {
        uint64_t v28 = (uint64_t)v27;
      }
      else {
        uint64_t v28 = 0;
      }
      sub_1000CF584(v21, v28, (uint64_t)&v37);
      swift_release();
      swift_release();
      goto LABEL_26;
    case 3uLL:
      memset(v36, 0, 14);
      uint64_t v11 = (char *)v36;
      goto LABEL_29;
    default:
      v36[0] = v7;
      LOWORD(v36[1]) = v8;
      BYTE2(v36[1]) = BYTE2(v8);
      BYTE3(v36[1]) = BYTE3(v8);
      BYTE4(v36[1]) = BYTE4(v8);
      BYTE5(v36[1]) = BYTE5(v8);
      uint64_t v11 = (char *)v36 + BYTE6(v8);
LABEL_29:
      sub_1000CF584(v36, (uint64_t)v11, (uint64_t)&v37);
      sub_1000541C0(v10, v9);
      if (!v3) {
        goto LABEL_30;
      }
      return result;
  }
}

__n128 sub_1000D134C@<Q0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1;
  uint64_t v7 = sub_100089F98(a1, a2);
  if (v8 >> 60 == 15) {
LABEL_36:
  }
    __break(1u);
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (v7 >> 32) - (int)v7;
      if (v7 >> 32 < (int)v7)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v32 = v5;
      uint64_t v13 = (unsigned char *)__DataStorage._bytes.getter();
      if (v13)
      {
        uint64_t v14 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v10, v14))
        {
          v13 += (int)v10 - v14;
          goto LABEL_8;
        }
        goto LABEL_35;
      }
LABEL_8:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (v10 >> 32) - (int)v10;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = &v13[v16];
      if (v13) {
        uint64_t v18 = (uint64_t)v17;
      }
      else {
        uint64_t v18 = 0;
      }
      sub_1000CF804(v13, v18, (uint64_t)&v34);
LABEL_26:
      sub_1000541C0(v10, v9);
      unint64_t v5 = v32;
      if (!v3)
      {
LABEL_30:
        int v30 = v35;
        int v31 = v36;
        __n128 result = v37;
        *(_OWORD *)a3 = v34;
        *(_DWORD *)(a3 + 16) = v30;
        *(_DWORD *)(a3 + 20) = v31;
        *(void *)(a3 + 24) = v5;
        *(_WORD *)(a3 + 32) = a2;
        *(__n128 *)(a3 + 40) = result;
      }
      return result;
    case 2uLL:
      uint64_t v32 = v5;
      uint64_t v20 = *(void *)(v7 + 16);
      uint64_t v19 = *(void *)(v7 + 24);
      swift_retain();
      swift_retain();
      uint64_t v21 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v21) {
        goto LABEL_18;
      }
      uint64_t v22 = __DataStorage._offset.getter();
      if (__OFSUB__(v20, v22)) {
        goto LABEL_34;
      }
      v21 += v20 - v22;
LABEL_18:
      BOOL v23 = __OFSUB__(v19, v20);
      uint64_t v24 = v19 - v20;
      if (v23) {
        goto LABEL_33;
      }
      uint64_t v25 = __DataStorage._length.getter();
      if (v25 >= v24) {
        uint64_t v26 = v24;
      }
      else {
        uint64_t v26 = v25;
      }
      uint64_t v27 = &v21[v26];
      if (v21) {
        uint64_t v28 = (uint64_t)v27;
      }
      else {
        uint64_t v28 = 0;
      }
      sub_1000CF804(v21, v28, (uint64_t)&v34);
      swift_release();
      swift_release();
      goto LABEL_26;
    case 3uLL:
      memset(v33, 0, 14);
      uint64_t v11 = (char *)v33;
      goto LABEL_29;
    default:
      v33[0] = v7;
      LOWORD(v33[1]) = v8;
      BYTE2(v33[1]) = BYTE2(v8);
      BYTE3(v33[1]) = BYTE3(v8);
      BYTE4(v33[1]) = BYTE4(v8);
      BYTE5(v33[1]) = BYTE5(v8);
      uint64_t v11 = (char *)v33 + BYTE6(v8);
LABEL_29:
      sub_1000CF804(v33, (uint64_t)v11, (uint64_t)&v34);
      sub_1000541C0(v10, v9);
      if (!v3) {
        goto LABEL_30;
      }
      return result;
  }
}

uint64_t sub_1000D1600@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100089F98(a1, a2);
  if (v8 >> 60 == 15) {
LABEL_53:
  }
    __break(1u);
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      goto LABEL_7;
    case 2uLL:
      uint64_t v53 = a3;
      uint64_t v30 = *(void *)(v7 + 16);
      uint64_t v29 = *(void *)(v7 + 24);
      swift_retain();
      swift_retain();
      int v31 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v31) {
        goto LABEL_24;
      }
      uint64_t v32 = __DataStorage._offset.getter();
      if (__OFSUB__(v30, v32)) {
        goto LABEL_45;
      }
      v31 += v30 - v32;
LABEL_24:
      BOOL v33 = __OFSUB__(v29, v30);
      uint64_t v34 = v29 - v30;
      if (v33) {
        goto LABEL_43;
      }
      uint64_t v35 = __DataStorage._length.getter();
      if (v35 >= v34) {
        uint64_t v36 = v34;
      }
      else {
        uint64_t v36 = v35;
      }
      __n128 v37 = &v31[v36];
      if (v31) {
        uint64_t v38 = (uint64_t)v37;
      }
      else {
        uint64_t v38 = 0;
      }
      __int16 v39 = sub_1000779D4(1, v31, v38);
      if (!v3)
      {
        if (*((void *)v39 + 2))
        {
          int v42 = v40;
          uint64_t v43 = v41;
          uint64_t v54 = *((void *)v39 + 4);
          __int16 v50 = *((_WORD *)v39 + 20);
          __int16 v44 = *((_WORD *)v39 + 21);
          __int16 v52 = *((_WORD *)v39 + 22);
          swift_bridgeObjectRelease();
          if ((((unsigned __int16)v54 - 14) & 0xFFFF0000) == 0)
          {
            uint64_t v27 = sub_100077634((unsigned __int16)(v54 - 14) >> 2, v42, v43);
            __int16 v51 = v44;
            swift_release();
            swift_release();
            uint64_t result = sub_1000541C0(v10, v9);
            a3 = v53;
            __int16 v16 = v50;
            goto LABEL_41;
          }
          goto LABEL_52;
        }
        goto LABEL_48;
      }
      swift_release();
      swift_release();
      return sub_1000541C0(v10, v9);
    case 3uLL:
      memset(v55, 0, 14);
      uint64_t v45 = sub_1000779D4(1, v55, (uint64_t)v55);
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (!*((void *)v45 + 2)) {
        goto LABEL_49;
      }
      uint64_t v48 = v46;
      uint64_t v49 = v47;
      uint64_t v54 = *((void *)v45 + 4);
      __int16 v16 = *((_WORD *)v45 + 20);
      __int16 v51 = *((_WORD *)v45 + 21);
      __int16 v52 = *((_WORD *)v45 + 22);
      swift_bridgeObjectRelease();
      if ((((unsigned __int16)v54 - 14) & 0xFFFF0000) != 0) {
        goto LABEL_50;
      }
      uint64_t v27 = sub_100077634((unsigned __int16)(v54 - 14) >> 2, v48, v49);
      uint64_t result = sub_1000541C0(v10, v9);
      goto LABEL_41;
    default:
      v55[0] = v7;
      LOWORD(v55[1]) = v8;
      BYTE2(v55[1]) = BYTE2(v8);
      BYTE3(v55[1]) = BYTE3(v8);
      BYTE4(v55[1]) = BYTE4(v8);
      BYTE5(v55[1]) = BYTE5(v8);
      uint64_t v11 = sub_1000779D4(1, v55, (uint64_t)v55 + BYTE6(v8));
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (!*((void *)v11 + 2)) {
        goto LABEL_46;
      }
      uint64_t v14 = v12;
      uint64_t v15 = v13;
      uint64_t v54 = *((void *)v11 + 4);
      __int16 v16 = *((_WORD *)v11 + 20);
      __int16 v51 = *((_WORD *)v11 + 21);
      __int16 v52 = *((_WORD *)v11 + 22);
      swift_bridgeObjectRelease();
      int v17 = (unsigned __int16)v54 - 14;
      if ((v17 & 0xFFFF0000) == 0) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_7:
      if (v10 >> 32 < (int)v10)
      {
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      uint64_t v18 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v18) {
        goto LABEL_11;
      }
      uint64_t v19 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v10, v19))
      {
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      v18 += (int)v10 - v19;
LABEL_11:
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= (v10 >> 32) - (int)v10) {
        uint64_t v21 = (v10 >> 32) - (int)v10;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v18[v21];
      if (v18) {
        uint64_t v23 = (uint64_t)v22;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = sub_1000779D4(1, v18, v23);
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (!*((void *)v24 + 2))
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      uint64_t v14 = v25;
      uint64_t v15 = v26;
      uint64_t v54 = *((void *)v24 + 4);
      __int16 v16 = *((_WORD *)v24 + 20);
      __int16 v51 = *((_WORD *)v24 + 21);
      __int16 v52 = *((_WORD *)v24 + 22);
      swift_bridgeObjectRelease();
      int v17 = (unsigned __int16)v54 - 14;
      if ((v17 & 0xFFFF0000) != 0)
      {
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
LABEL_20:
      uint64_t v27 = sub_100077634((unsigned __int16)v17 >> 2, v14, v15);
      uint64_t result = sub_1000541C0(v10, v9);
LABEL_41:
      *(void *)a3 = v54;
      *(_WORD *)(a3 + 8) = v16;
      *(_WORD *)(a3 + 10) = v51;
      *(_WORD *)(a3 + 12) = v52;
      *(void *)(a3 + 16) = a1;
      *(_WORD *)(a3 + 24) = a2;
      *(void *)(a3 + 32) = v27;
      return result;
  }
}

uint64_t sub_1000D1A8C(unsigned char *a1, __int16 a2)
{
  uint64_t v3 = sub_100089F98(a1, a2);
  if (v4 >> 60 == 15) {
LABEL_45:
  }
    __break(1u);
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  switch(v4 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      uint64_t v16 = *(void *)(v3 + 16);
      uint64_t v17 = *(void *)(v3 + 24);
      swift_retain();
      swift_retain();
      uint64_t v18 = __DataStorage._bytes.getter();
      if (!v18) {
        goto LABEL_22;
      }
      uint64_t v19 = __DataStorage._offset.getter();
      if (__OFSUB__(v16, v19)) {
        goto LABEL_41;
      }
      v18 += v16 - v19;
LABEL_22:
      BOOL v20 = __OFSUB__(v17, v16);
      uint64_t v21 = v17 - v16;
      if (v20) {
        goto LABEL_39;
      }
      uint64_t v22 = __DataStorage._length.getter();
      if (v22 >= v21) {
        uint64_t v23 = v21;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = v18 + v23;
      if (v18) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v26 = sub_100076000(1, v18, v25);
      if (v2)
      {
        swift_release();
        swift_release();
        return sub_1000541C0(v6, v5);
      }
      if (!*((void *)v26 + 2))
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      int v39 = v26[33];
      int v37 = v26[32];
      int v38 = v26[34];
      int v31 = (__int16 *)v26[35];
      swift_bridgeObjectRelease();
      sub_100075CE8(v31, v29, v30);
      swift_release();
      swift_release();
      sub_1000541C0(v6, v5);
      LODWORD(v35) = v31;
      int v36 = v37;
      return v36 | (v39 << 8) | (v38 << 16) | (v35 << 24);
    case 3uLL:
      memset(v40, 0, 14);
      uint64_t v7 = sub_100076000(1, (uint64_t)v40, (uint64_t)v40);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_35;
      }
      goto LABEL_42;
    default:
      v40[0] = v3;
      LOWORD(v40[1]) = v4;
      BYTE2(v40[1]) = BYTE2(v4);
      BYTE3(v40[1]) = BYTE3(v4);
      BYTE4(v40[1]) = BYTE4(v4);
      BYTE5(v40[1]) = BYTE5(v4);
      uint64_t v7 = sub_100076000(1, (uint64_t)v40, (uint64_t)v40 + BYTE6(v4));
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_35;
      }
      __break(1u);
LABEL_6:
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
      }
      else
      {
        uint64_t v10 = __DataStorage._bytes.getter();
        if (!v10)
        {
LABEL_10:
          uint64_t v12 = __DataStorage._length.getter();
          if (v12 >= (v6 >> 32) - (int)v6) {
            uint64_t v13 = (v6 >> 32) - (int)v6;
          }
          else {
            uint64_t v13 = v12;
          }
          uint64_t v14 = v10 + v13;
          if (v10) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v7 = sub_100076000(1, v10, v15);
          if (v2) {
            return sub_1000541C0(v6, v5);
          }
          if (*((void *)v7 + 2))
          {
LABEL_35:
            uint64_t v32 = v8;
            uint64_t v33 = v9;
            int v36 = v7[32];
            int v38 = v7[34];
            int v39 = v7[33];
            uint64_t v35 = (__int16 *)v7[35];
            swift_bridgeObjectRelease();
            sub_100075CE8(v35, v32, v33);
            sub_1000541C0(v6, v5);
            return v36 | (v39 << 8) | (v38 << 16) | (v35 << 24);
          }
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        uint64_t v11 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v6, v11))
        {
          v10 += (int)v6 - v11;
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
  }
}

uint64_t sub_1000D1E64(unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        goto LABEL_10;
      }
      uint64_t result = sub_10003CFEC(a1, a2 & 0xFFFFFFFFFFFFLL, a4, a5 & 0xFFFFFFFFFFFFLL);
      break;
    case 2:
      if (a6 != 2) {
        goto LABEL_10;
      }
      uint64_t result = sub_10003D6E4(a1, a2, a4, a5);
      break;
    case 3:
      if (a6 != 3) {
        goto LABEL_10;
      }
      uint64_t result = sub_10003D004(a1 & 0xFFFFFFFFFFFFLL, a4 & 0xFFFFFFFFFFFFLL);
      break;
    default:
      if (a6) {
LABEL_10:
      }
        uint64_t result = 0;
      else {
        uint64_t result = sub_100042738(a1, a4);
      }
      break;
  }
  return result;
}

void *sub_1000D1F00(uint64_t *a1)
{
  unint64_t v4 = (unsigned char *)*a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_10007BF00(1, *a1, v3);
  if (v1) {
    return (void *)v3;
  }
  if (!result[2])
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int v6 = *((unsigned __int16 *)result + 17);
  swift_bridgeObjectRelease();
  if (v6 <= 258)
  {
    if (v6 == 257)
    {
      uint64_t result = sub_10007BB60(1, v4, v3);
      if (result[2])
      {
        uint64_t v17 = v15;
        uint64_t v18 = v16;
        uint64_t v3 = result[4];
        swift_bridgeObjectRelease();
        *a1 = v17;
        a1[1] = v18;
        return (void *)v3;
      }
      goto LABEL_25;
    }
    if (v6 == 258)
    {
      uint64_t result = sub_10007B840((long long *)1, v4, v3);
      if (result[2])
      {
        uint64_t v9 = v7;
        uint64_t v10 = v8;
        uint64_t v3 = result[4];
        swift_bridgeObjectRelease();
        *a1 = v9;
        a1[1] = v10;
        return (void *)v3;
      }
      goto LABEL_23;
    }
LABEL_21:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v25 = 37;
    *(void *)(v25 + 8) = 0;
    *(void *)(v25 + 16) = 0xE000000000000000;
    *(void *)(v25 + 24) = 0xD000000000000012;
    *(void *)(v25 + 32) = 0x80000001000E69E0;
    *(void *)(v25 + 40) = 0xD00000000000001FLL;
    *(void *)(v25 + 48) = 0x80000001000E36A0;
    *(void *)(v25 + 56) = 1266;
    swift_willThrow();
    return (void *)v3;
  }
  if (v6 != 259)
  {
    if (v6 == 0xFFFF)
    {
      uint64_t result = sub_10007B780(1, v4, v3);
      if (result[2])
      {
        uint64_t v13 = v11;
        uint64_t v14 = v12;
        uint64_t v3 = *((unsigned int *)result + 8);
        swift_bridgeObjectRelease();
        *a1 = v13;
        a1[1] = v14;
        return (void *)v3;
      }
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  uint64_t result = sub_10007B7E0(1, v4, v3);
  if (result[2])
  {
    uint64_t v21 = v19;
    uint64_t v22 = v20;
    uint64_t v23 = *((unsigned int *)result + 8);
    uint64_t v24 = *((unsigned __int16 *)result + 18);
    swift_bridgeObjectRelease();
    *a1 = v21;
    a1[1] = v22;
    return (void *)(v23 | (v24 << 32));
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000D2148(uint64_t a1)
{
  return a1;
}

unint64_t *initializeBufferWithCopyOfBuffer for ADC4TerminalVariant(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1000D21B4(*a2);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

unint64_t sub_1000D21B4(unint64_t result)
{
  if (result >> 62 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t destroy for ADC4TerminalVariant(unint64_t *a1)
{
  return sub_10008CB78(*a1);
}

unint64_t *assignWithCopy for ADC4TerminalVariant(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1000D21B4(*a2);
  unint64_t v5 = *a1;
  *a1 = v3;
  a1[1] = v4;
  sub_10008CB78(v5);
  return a1;
}

unint64_t *assignWithTake for ADC4TerminalVariant(unint64_t *a1, _OWORD *a2)
{
  unint64_t v3 = *a1;
  *(_OWORD *)a1 = *a2;
  sub_10008CB78(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ADC4TerminalVariant(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 2);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ADC4TerminalVariant(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (unint64_t)-a2 << 16;
      *(void *)(result + 8) = 0;
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1000D22E8(uint64_t a1)
{
  uint64_t v1 = *(void *)a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return ((unsigned __int16)*(void *)a1 | ((unsigned __int16)*(_DWORD *)(a1 + 8) << 16)) + 2;
  }
}

void *sub_1000D2308(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1000D2318(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    *uint64_t result = *(unsigned __int16 *)result | (unint64_t)(a2 << 62);
  }
  else
  {
    *uint64_t result = (unsigned __int16)(a2 - 2) | 0x8000000000000000;
    result[1] = (unint64_t)(a2 - 2) >> 16;
  }
  return result;
}

ValueMetadata *type metadata accessor for ADC4TerminalVariant()
{
  return &type metadata for ADC4TerminalVariant;
}

uint64_t getEnumTagSinglePayload for ADC4ClusterDescriptorSegment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ADC4ClusterDescriptorSegment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000D23E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000D23E8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ADC4ClusterDescriptorSegment()
{
  return &type metadata for ADC4ClusterDescriptorSegment;
}

unint64_t sub_1000D2404()
{
  unint64_t result = qword_10012A998;
  if (!qword_10012A998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A998);
  }
  return result;
}

unint64_t sub_1000D245C()
{
  unint64_t result = qword_10012A9A0;
  if (!qword_10012A9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A9A0);
  }
  return result;
}

void sub_1000D24B4(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  switch(HIBYTE(a4))
  {
    case 1:
      sub_1000D4898(a1, a3, BYTE4(a3), a4);
      break;
    case 2:
      unint64_t v5 = (void *)sub_10003BB14(a3, a1, (id)*(unsigned __int8 *)(*(void *)a2 + 2));
      if (!v4)
      {
        id v6 = v5;
        sub_1000B15F4([v6 bytes], 18944, (uint64_t)v10);
        uint64_t v7 = v11;
        swift_bridgeObjectRetain();
        sub_1000C4B9C((uint64_t)v10);
        sub_1000D30C4(v7);
        goto LABEL_9;
      }
      break;
    case 3:
      sub_1000370E0(a3, a1, a2);
      if (!v4)
      {
        id v6 = v8;
        sub_1000CFCF8([v6 bytes], 21248, v12);
        uint64_t v9 = v13;
        swift_bridgeObjectRetain();
        sub_10008D0A8((uint64_t)v12);
        sub_1000D3200(v9);
LABEL_9:
        swift_bridgeObjectRelease();
      }
      break;
    default:
      sub_1000D44BC(a1, a3, WORD1(a3), BYTE4(a3));
      break;
  }
}

uint64_t ChannelRelationship.audioChannelLabel.getter(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = 42;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
    case 10:
    case 69:
      uint64_t result = 1;
      break;
    case 2:
    case 11:
    case 70:
      uint64_t result = 2;
      break;
    case 4:
      uint64_t result = 206;
      break;
    case 5:
      uint64_t result = 207;
      break;
    case 12:
      uint64_t result = 3;
      break;
    case 13:
      uint64_t result = 7;
      break;
    case 14:
      uint64_t result = 8;
      break;
    case 15:
      uint64_t result = 65;
      break;
    case 16:
      uint64_t result = 66;
      break;
    case 17:
      uint64_t result = 10;
      break;
    case 18:
      uint64_t result = 11;
      break;
    case 21:
      uint64_t result = 5;
      break;
    case 22:
      uint64_t result = 6;
      break;
    case 36:
      uint64_t result = 49;
      break;
    case 37:
      uint64_t result = 51;
      break;
    case 66:
      uint64_t result = 4;
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t ChannelRelationship.description.getter()
{
  return 0x6E776F6E6B6E55;
}

uint64_t sub_1000D3090()
{
  return ChannelRelationship.description.getter();
}

Swift::UInt_optional __swiftcall ClusterDescription.numChannels()()
{
  if (HIBYTE(v1) >= 2u) {
    unsigned __int8 v2 = 0;
  }
  else {
    unsigned __int8 v2 = v0;
  }
  Swift::Bool v3 = HIBYTE(v1) >= 2u;
  Swift::UInt v4 = v2;
  result.value = v4;
  result.is_nil = v3;
  return result;
}

void *sub_1000D30C4(uint64_t a1)
{
  sub_10007C684(0, 0, 0);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 32;
    do
    {
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      uint64_t v6 = *(void *)(v5 + 16);
      if (v6)
      {
        int v7 = 0;
        uint64_t v8 = (unsigned __int8 *)(v5 + 39);
        uint64_t v9 = (unsigned __int8 *)(v5 + 39);
        do
        {
          int v10 = *v9;
          v9 += 8;
          if (v10 == 1) {
            int v7 = *(v8 - 3);
          }
          uint64_t v8 = v9;
          --v6;
        }
        while (v6);
      }
      else
      {
        int v7 = 0;
      }
      uint64_t v11 = ChannelRelationship.description.getter();
      uint64_t v13 = v12;
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1) {
        sub_10007C684(v14 > 1, v15 + 1, 1);
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      uint64_t v16 = &_swiftEmptyArrayStorage[4 * v15];
      unsigned char v16[4] = v3;
      void v16[5] = v11;
      v16[6] = v13;
      *((_DWORD *)v16 + 14) = v7;
    }
    while (v3 != v2);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_1000D3200(uint64_t a1)
{
  sub_10007C684(0, 0, 0);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 32;
    do
    {
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      uint64_t v6 = *(void *)(v5 + 16);
      if (v6)
      {
        int v7 = 0;
        uint64_t v8 = (unsigned __int8 *)(v5 + 48);
        uint64_t v9 = (unsigned __int8 *)(v5 + 48);
        do
        {
          int v10 = *v9;
          v9 += 17;
          if (v10 == 1) {
            int v7 = *((unsigned __int16 *)v8 - 5);
          }
          uint64_t v8 = v9;
          --v6;
        }
        while (v6);
      }
      else
      {
        int v7 = 0;
      }
      uint64_t v11 = ChannelRelationship.description.getter();
      uint64_t v13 = v12;
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1) {
        sub_10007C684(v14 > 1, v15 + 1, 1);
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      uint64_t v16 = &_swiftEmptyArrayStorage[4 * v15];
      unsigned char v16[4] = v3;
      void v16[5] = v11;
      v16[6] = v13;
      *((_DWORD *)v16 + 14) = v7;
    }
    while (v3 != v2);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void ClusterDescription.hash(into:)(uint64_t a1, unint64_t a2, __int16 a3)
{
  switch(HIBYTE(a3))
  {
    case 1:
      char v6 = a3;
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(a2);
      Hasher._combine(_:)(HIDWORD(a2));
      LOBYTE(v4) = v6;
      goto LABEL_7;
    case 2:
      Swift::UInt v5 = 2;
      goto LABEL_5;
    case 3:
      Swift::UInt v5 = 3;
LABEL_5:
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(a2);
      break;
    default:
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(a2);
      Hasher._combine(_:)(WORD1(a2));
      unint64_t v4 = HIDWORD(a2);
LABEL_7:
      Hasher._combine(_:)(v4);
      break;
  }
}

Swift::Int ClusterDescription.hashValue.getter(unint64_t a1, __int16 a2)
{
  char v2 = a2;
  uint64_t v4 = HIBYTE(a2);
  Hasher.init(_seed:)();
  switch(v4)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(a1);
      Hasher._combine(_:)(HIDWORD(a1));
      LOBYTE(v5) = v2;
      goto LABEL_7;
    case 2:
      Swift::UInt v6 = 2;
      goto LABEL_5;
    case 3:
      Swift::UInt v6 = 3;
LABEL_5:
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(a1);
      break;
    default:
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(a1);
      Hasher._combine(_:)(WORD1(a1));
      unint64_t v5 = HIDWORD(a1);
LABEL_7:
      Hasher._combine(_:)(v5);
      break;
  }
  return Hasher._finalize()();
}

Swift::Int sub_1000D351C()
{
  return ClusterDescription.hashValue.getter(*(void *)v0, *(_WORD *)(v0 + 8));
}

void sub_1000D3528()
{
  unint64_t v1 = *v0;
  switch(*((unsigned char *)v0 + 9))
  {
    case 1:
      char v4 = *((unsigned char *)v0 + 8);
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v1);
      Hasher._combine(_:)(HIDWORD(v1));
      LOBYTE(v2) = v4;
      goto LABEL_7;
    case 2:
      Swift::UInt v3 = 2;
      goto LABEL_5;
    case 3:
      Swift::UInt v3 = 3;
LABEL_5:
      Hasher._combine(_:)(v3);
      Hasher._combine(_:)(v1);
      break;
    default:
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v1);
      Hasher._combine(_:)(WORD1(v1));
      unint64_t v2 = HIDWORD(v1);
LABEL_7:
      Hasher._combine(_:)(v2);
      break;
  }
}

Swift::Int sub_1000D35F8()
{
  unint64_t v1 = *v0;
  char v2 = *((unsigned char *)v0 + 8);
  uint64_t v3 = *((unsigned __int8 *)v0 + 9);
  Hasher.init(_seed:)();
  switch(v3)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v1);
      Hasher._combine(_:)(HIDWORD(v1));
      LOBYTE(v4) = v2;
      goto LABEL_7;
    case 2:
      Swift::UInt v5 = 2;
      goto LABEL_5;
    case 3:
      Swift::UInt v5 = 3;
LABEL_5:
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v1);
      break;
    default:
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v1);
      Hasher._combine(_:)(WORD1(v1));
      unint64_t v4 = HIDWORD(v1);
LABEL_7:
      Hasher._combine(_:)(v4);
      break;
  }
  return Hasher._finalize()();
}

BOOL sub_1000D3708(uint64_t a1, uint64_t a2)
{
  return _s9AUASDCore18ClusterDescriptionO21__derived_enum_equalsySbAC_ACtFZ_0(*(void *)a1, *(_WORD *)(a1 + 8), *(void *)a2, *(_WORD *)(a2 + 8));
}

uint64_t ClusterChannelInfo.chName.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ClusterChannelInfo.chRelationship.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

void ClusterChannelInfo.hash(into:)(int a1, Swift::UInt a2, uint64_t a3, uint64_t a4, Swift::UInt32 a5)
{
  if (a4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(a5);
}

Swift::Int ClusterChannelInfo.hashValue.getter(Swift::UInt a1, uint64_t a2, uint64_t a3, Swift::UInt32 a4)
{
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(a4);
  return Hasher._finalize()();
}

Swift::Int sub_1000D3888()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000D3930()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 24);
  Hasher._combine(_:)(*(void *)v0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int sub_1000D39AC()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_1000D3A50(uint64_t a1, uint64_t a2)
{
  return _s9AUASDCore18ClusterChannelInfoV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(_DWORD *)(a2 + 24));
}

uint64_t Cluster.hasException.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

void Cluster.hash(into:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4)
{
}

uint64_t static Cluster.__derived_struct_equals(_:_:)(uint64_t a1, void *a2, char a3, uint64_t a4, void *a5, char a6)
{
  if (a1 != a4) {
    return 0;
  }
  char v8 = sub_1000B5DFC(a2, a5);
  char v9 = a3 ^ a6 ^ 1;
  if ((v8 & 1) == 0) {
    char v9 = 0;
  }
  return v9 & 1;
}

Swift::Int Cluster.hashValue.getter(Swift::UInt a1, uint64_t a2, char a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain();
  sub_1000D3D58((uint64_t)v7, a2);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3 & 1);
  return Hasher._finalize()();
}

Swift::Int sub_1000D3BB0()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  sub_1000D3D58((uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000D3C2C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt8 v4 = *(unsigned char *)(v1 + 16);
  Hasher._combine(_:)(*(void *)v1);
  swift_bridgeObjectRetain();
  sub_1000D3D58(a1, v3);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
}

Swift::Int sub_1000D3C88()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  sub_1000D3D58((uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000D3D00(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (sub_1000B5DFC(*(void **)(a1 + 8), *(void **)(a2 + 8))) {
    return v2 ^ v3 ^ 1u;
  }
  else {
    return 0;
  }
}

void sub_1000D3D58(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::UInt8 v4 = (Swift::UInt32 *)(a2 + 56);
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      Swift::UInt32 v6 = *v4;
      Hasher._combine(_:)(*((void *)v4 - 3));
      if (v5)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v4 += 8;
      Hasher._combine(_:)(v6);
      swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
  }
}

BOOL _s9AUASDCore18ClusterChannelInfoV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  if (a1 != a5) {
    return 0;
  }
  if (!a3)
  {
    if (!a7) {
      return a4 == a8;
    }
    return 0;
  }
  if (!a7) {
    return 0;
  }
  if (a2 == a6 && a3 == a7) {
    return a4 == a8;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v10) {
    return a4 == a8;
  }
  return result;
}

BOOL _s9AUASDCore18ClusterDescriptionO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4)
{
  switch(HIBYTE(a2))
  {
    case 1:
      BOOL v8 = a1 == a3
        && HIDWORD(a1) == HIDWORD(a3)
        && a2 == a4;
      BOOL result = HIBYTE(a4) == 1 && v8;
      break;
    case 2:
      BOOL result = HIBYTE(a4) == 2 && (unsigned __int16)a1 == (unsigned __int16)a3;
      break;
    case 3:
      BOOL result = HIBYTE(a4) == 3 && (unsigned __int16)a1 == (unsigned __int16)a3;
      break;
    default:
      BOOL v4 = WORD1(a1) == WORD1(a3) && BYTE4(a1) == BYTE4(a3);
      if (a1 != a3) {
        BOOL v4 = 0;
      }
      if (HIBYTE(a4)) {
        BOOL result = 0;
      }
      else {
        BOOL result = v4;
      }
      break;
  }
  return result;
}

unint64_t sub_1000D3F64()
{
  unint64_t result = qword_10012A9A8;
  if (!qword_10012A9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A9A8);
  }
  return result;
}

unint64_t sub_1000D3FBC()
{
  unint64_t result = qword_10012A9B0;
  if (!qword_10012A9B0)
  {
    type metadata accessor for ChannelRelationship(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A9B0);
  }
  return result;
}

unint64_t sub_1000D4018()
{
  unint64_t result = qword_10012A9B8;
  if (!qword_10012A9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A9B8);
  }
  return result;
}

unint64_t sub_1000D4070()
{
  unint64_t result = qword_10012A9C0;
  if (!qword_10012A9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A9C0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ClusterDescription(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ClusterDescription(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusterDescription(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClusterDescription()
{
  return &type metadata for ClusterDescription;
}

uint64_t destroy for ClusterChannelInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClusterChannelInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClusterChannelInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for ClusterChannelInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ClusterChannelInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClusterChannelInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusterChannelInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClusterChannelInfo()
{
  return &type metadata for ClusterChannelInfo;
}

uint64_t sub_1000D4340(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Cluster(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for Cluster(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for Cluster(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Cluster(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Cluster(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Cluster()
{
  return &type metadata for Cluster;
}

uint64_t sub_1000D44BC(uint64_t a1, unsigned __int8 a2, unsigned __int16 a3, unsigned __int8 a4)
{
  unsigned __int8 v4 = a4;
  unint64_t v6 = 0;
  unsigned int v40 = a3;
  int v7 = _swiftEmptyArrayStorage;
  LOBYTE(v8) = 1;
  while (v8 <= a2 && v6 <= 0x10)
  {
    if (v6 <= 0xF)
    {
      if ((v40 >> v6))
      {
        if (v6 > 0xB) {
          goto LABEL_44;
        }
        int v10 = *((_DWORD *)&off_100112038 + v6 + 8);
        uint64_t v11 = ChannelRelationship.description.getter();
        uint64_t v13 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v7 = sub_100059804(0, v7[2] + 1, 1, v7);
        }
        unint64_t v15 = v7[2];
        unint64_t v14 = v7[3];
        if (v15 >= v14 >> 1) {
          int v7 = sub_100059804((void *)(v14 > 1), v15 + 1, 1, v7);
        }
        _OWORD v7[2] = v15 + 1;
        uint64_t v16 = &v7[4 * v15];
        unsigned char v16[4] = v8;
        void v16[5] = v11;
        v16[6] = v13;
        *((_DWORD *)v16 + 14) = v10;
        __int16 v8 = v8 + 1;
        unsigned __int8 v4 = a4;
        if ((v8 & 0x100) != 0) {
          goto LABEL_45;
        }
      }
      break;
    }
LABEL_15:
    if (__OFADD__(v6++, 1))
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
  }
  if (v6 != 11) {
    goto LABEL_15;
  }
  if (((v8 - 1) & 0xFFFFFF00) != 0) {
    goto LABEL_47;
  }
  if (a2 <= (v8 - 1)) {
    return 0;
  }
  int v18 = (a2 - (v8 - 1)) - 1;
  if ((v18 & 0xFFFFFF00) != 0) {
LABEL_48:
  }
    __break(1u);
  unsigned __int8 v19 = 0;
  uint64_t v20 = v8;
  uint64_t v41 = OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject;
  while (2)
  {
    if (!v4)
    {
      uint64_t v42 = 0x206C656E6E616843;
      unint64_t v43 = 0xE800000000000000;
      v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      uint64_t v25 = v42;
      unint64_t v27 = v43;
      goto LABEL_32;
    }
    if (((v4 + (unsigned __int16)v19) & 0x100) != 0) {
      goto LABEL_46;
    }
    uint64_t v21 = *(void **)(a1 + v41);
    if (!v21)
    {
LABEL_31:
      uint64_t v25 = 0;
      unint64_t v27 = 0;
LABEL_32:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v7 = sub_100059804(0, v7[2] + 1, 1, v7);
      }
      unint64_t v34 = v7[2];
      unint64_t v33 = v7[3];
      if (v34 >= v33 >> 1) {
        int v7 = sub_100059804((void *)(v33 > 1), v34 + 1, 1, v7);
      }
      _OWORD v7[2] = v34 + 1;
      uint64_t v35 = &v7[4 * v34];
      v35[4] = v20;
      v35[5] = v25;
      v35[6] = v27;
      *((_DWORD *)v35 + 14) = 0;
      if ((_BYTE)v20 == 0xFF) {
        goto LABEL_42;
      }
      __int16 v36 = v19;
      if (v19 == v18) {
        return 0;
      }
      ++v19;
      ++v20;
      if (((v36 + 1) & 0x100) != 0) {
        goto LABEL_43;
      }
      continue;
    }
    break;
  }
  uint64_t v42 = 0;
  id v22 = [v21 stringWithIndex:(v4 + v19) languageID:1033 error:&v42];
  id v23 = (id)v42;
  if (v22)
  {
    uint64_t v24 = v22;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;
    id v28 = v23;

    goto LABEL_32;
  }
  id v30 = (id)v42;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  int v31 = (void *)_convertErrorToNSError(_:)();
  id v32 = [v31 code];

  if (v32 == (id)-536870206 || v32 == (id)-536850432)
  {
    swift_errorRelease();
    goto LABEL_31;
  }
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D4898(uint64_t a1, unsigned __int8 a2, unsigned int a3, unsigned __int8 a4)
{
  unint64_t v5 = 0;
  unint64_t v6 = _swiftEmptyArrayStorage;
  LOBYTE(v7) = 1;
  while (v7 <= a2 && v5 <= 0x20)
  {
    if (v5 <= 0x1F)
    {
      if ((a3 >> v5))
      {
        if (v5 > 0x1A) {
          goto LABEL_40;
        }
        int v8 = *((_DWORD *)&off_100112088 + v5 + 8);
        uint64_t v9 = ChannelRelationship.description.getter();
        uint64_t v11 = v10;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v6 = sub_100059804(0, v6[2] + 1, 1, v6);
        }
        unint64_t v13 = v6[2];
        unint64_t v12 = v6[3];
        if (v13 >= v12 >> 1) {
          unint64_t v6 = sub_100059804((void *)(v12 > 1), v13 + 1, 1, v6);
        }
        v6[2] = v13 + 1;
        unint64_t v14 = &v6[4 * v13];
        v14[4] = v7;
        void v14[5] = v9;
        v14[6] = v11;
        *((_DWORD *)v14 + 14) = v8;
        LOWORD(v7) = v7 + 1;
        if ((v7 & 0x100) != 0) {
          goto LABEL_41;
        }
      }
      break;
    }
LABEL_13:
    if (__OFADD__(v5++, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
  }
  if (v5 != 26) {
    goto LABEL_13;
  }
  if (((v7 - 1) & 0xFFFFFF00) != 0) {
    goto LABEL_43;
  }
  if (a2 <= (v7 - 1)) {
    return 0;
  }
  unsigned __int8 v16 = 0;
  unsigned __int8 v17 = a2 - (v7 - 1);
  uint64_t v37 = OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject;
  uint64_t v7 = v7;
  while (2)
  {
    if (v16 >= v17) {
      goto LABEL_38;
    }
    if (!a4)
    {
      uint64_t v38 = 0x206C656E6E616843;
      unint64_t v39 = 0xE800000000000000;
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      uint64_t v22 = v38;
      unint64_t v24 = v39;
      goto LABEL_30;
    }
    if (((a4 + (unsigned __int16)v16) & 0x100) != 0) {
      goto LABEL_42;
    }
    int v18 = *(void **)(a1 + v37);
    if (!v18)
    {
LABEL_29:
      uint64_t v22 = 0;
      unint64_t v24 = 0;
      goto LABEL_30;
    }
    uint64_t v38 = 0;
    id v19 = [v18 stringWithIndex:(a4 + v16) languageID:1033 error:&v38];
    id v20 = (id)v38;
    if (v19)
    {
      uint64_t v21 = v19;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;
      id v25 = v20;

LABEL_30:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v6 = sub_100059804(0, v6[2] + 1, 1, v6);
      }
      unint64_t v31 = v6[2];
      unint64_t v30 = v6[3];
      if (v31 >= v30 >> 1) {
        unint64_t v6 = sub_100059804((void *)(v30 > 1), v31 + 1, 1, v6);
      }
      v6[2] = v31 + 1;
      id v32 = &v6[4 * v31];
      v32[4] = v7;
      v32[5] = v22;
      v32[6] = v24;
      *((_DWORD *)v32 + 14) = 0;
      if ((_BYTE)v7 == 0xFF) {
        goto LABEL_39;
      }
      ++v16;
      ++v7;
      if (v16 == v17) {
        return 0;
      }
      continue;
    }
    break;
  }
  id v27 = (id)v38;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  id v28 = (void *)_convertErrorToNSError(_:)();
  id v29 = [v28 code];

  if (v29 == (id)-536870206 || v29 == (id)-536850432)
  {
    swift_errorRelease();
    goto LABEL_29;
  }
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t ActiveStreamingInterface.staticStreamingInterface.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v2 = *(void *)(v1 + 40);
  char v4 = *(unsigned char *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t ActiveStreamingInterface.usbDevice.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

void ActiveStreamingInterface.usbDevice.setter(void *a1)
{
}

void (*ActiveStreamingInterface.usbDevice.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return sub_1000D4DC4;
}

void sub_1000D4DC4(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }

  free(v3);
}

uint64_t ActiveStreamingInterface.interfaceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ActiveStreamingInterface.interfaceProtocol.getter()
{
  return *(unsigned __int8 *)(*(void *)(v0 + 32) + 7);
}

uint64_t ActiveStreamingInterface.terminal.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  if (v1[2])
  {
    uint64_t v4 = v1[3];
    uint64_t v5 = v1[9];
    if ((v5 & 0xC000000000000001) != 0)
    {
      swift_unknownObjectRetain();
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_5;
    }
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v6 = *(void *)(v5 + 32);
      swift_unknownObjectRetain();
      swift_retain();
LABEL_5:
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 168))(v6, ObjectType, v4);
      swift_release();
      return swift_unknownObjectRelease();
    }
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

id ActiveStreamingInterface.ioQueue.getter()
{
  return *(id *)(v0 + 104);
}

void *ActiveStreamingInterface.usbHostInterface.getter()
{
  uint64_t v1 = *(void **)(v0 + 112);
  id v2 = v1;
  return v1;
}

void ActiveStreamingInterface.auaStream.getter()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v3 = Strong;
  id v4 = [Strong audioDevices];

  if (!v4) {
    return;
  }
  sub_10000CECC(0, &qword_100128590);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
LABEL_39:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    goto LABEL_39;
  }
LABEL_5:
  unint64_t v7 = 0;
  uint64_t v29 = v6;
  unint64_t v30 = v5 & 0xC000000000000001;
  unint64_t v27 = v5 + 32;
  uint64_t v28 = v5 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if (v30)
    {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_12;
    }
    if (v7 >= *(void *)(v28 + 16)) {
      break;
    }
    id v8 = *(id *)(v27 + 8 * v7);
LABEL_12:
    uint64_t v9 = v8;
    if (__OFADD__(v7++, 1)) {
      goto LABEL_37;
    }
    id v11 = [v8 inputStreams];
    if (!v11) {
      goto LABEL_42;
    }
    unint64_t v12 = v11;
    sub_10000CECC(0, (unint64_t *)&qword_100127B00);
    unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v14 = [v9 outputStreams];
    if (!v14) {
      goto LABEL_43;
    }
    unint64_t v15 = v14;
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000A1900(v16);
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17)
      {
LABEL_17:
        if ((v13 & 0xC000000000000001) != 0)
        {
          uint64_t v18 = 0;
          while (1)
          {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v19 = v18 + 1;
            if (__OFADD__(v18, 1)) {
              break;
            }
            type metadata accessor for AUAStream(0);
            uint64_t v20 = swift_dynamicCastClass();
            if (v20
              && *(unsigned __int8 *)(*(void *)(*(void *)(v20 + OBJC_IVAR___AUAStream_interface) + 32) + 2) == *(unsigned __int8 *)(*(void *)(v1 + 32) + 2))
            {
              swift_bridgeObjectRelease();
              goto LABEL_34;
            }
            swift_unknownObjectRelease();
            ++v18;
            if (v19 == v17)
            {

              swift_bridgeObjectRelease();
              uint64_t v6 = v29;
              goto LABEL_7;
            }
          }
          __break(1u);
        }
        else
        {
          unint64_t v26 = v5;
          uint64_t v21 = 0;
          uint64_t v22 = OBJC_IVAR___AUAStream_interface;
          while (1)
          {
            unint64_t v5 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              break;
            }
            unint64_t v23 = *(void **)(v13 + 8 * v21 + 32);
            type metadata accessor for AUAStream(0);
            uint64_t v24 = swift_dynamicCastClass();
            if (v24
              && *(unsigned __int8 *)(*(void *)(*(void *)(v24 + v22) + 32) + 2) == *(unsigned __int8 *)(*(void *)(v1 + 32) + 2))
            {
              id v25 = v23;
              swift_bridgeObjectRelease();
LABEL_34:

              swift_bridgeObjectRelease();
              return;
            }
            ++v21;
            if (v5 == v17)
            {

              swift_bridgeObjectRelease();
              unint64_t v5 = v26;
              uint64_t v6 = v29;
              goto LABEL_7;
            }
          }
        }
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v17) {
        goto LABEL_17;
      }
    }

    swift_bridgeObjectRelease();
LABEL_7:
    if (v7 == v6) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
}

uint64_t ActiveStreamingInterface.clock()()
{
  if (v0[15])
  {
    uint64_t v0 = (void *)v0[15];
LABEL_3:
    swift_retain();
    return (uint64_t)v0;
  }
  uint64_t result = swift_beginAccess();
  id v2 = (void *)v0[2];
  if (!v2)
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    goto LABEL_12;
  }
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[9];
  if ((v4 & 0xC000000000000001) != 0)
  {
    swift_unknownObjectRetain();
    uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_8:
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v0 = v2;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v3 + 168))(&v12, v5, ObjectType, v3);
    swift_release();
    swift_unknownObjectRelease();
    if (*((void *)&v13 + 1))
    {
      sub_10000CF6C(&v12, (uint64_t)v15);
      uint64_t v7 = v16;
      uint64_t v8 = v17;
      uint64_t v0 = sub_10001A974(v15, v16);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
      if (v9)
      {
        uint64_t v0 = (void *)v9;
        sub_10001ABC4((uint64_t)v15);
        goto LABEL_3;
      }
      sub_10001ABC4((uint64_t)v15);
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v10 = 78;
      uint64_t v11 = 88;
LABEL_13:
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0xE000000000000000;
      *(void *)(v10 + 24) = 0x29286B636F6C63;
      *(void *)(v10 + 32) = 0xE700000000000000;
      *(void *)(v10 + 40) = 0xD000000000000028;
      *(void *)(v10 + 48) = 0x80000001000E68C0;
      *(void *)(v10 + 56) = v11;
      swift_willThrow();
      return (uint64_t)v0;
    }
LABEL_12:
    sub_10001A918((uint64_t)&v12, &qword_100128528);
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v10 = 77;
    uint64_t v11 = 86;
    goto LABEL_13;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v5 = *(void *)(v4 + 32);
    swift_unknownObjectRetain();
    swift_retain();
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

Swift::Int ActiveStreamingInterface.getCur(forControl:)(unsigned int a1)
{
  int v1 = (a1 >> 18) & 0x3C | (a1 >> 6);
  if (v1 == 52) {
    return 0;
  }
  if (v1 == 51) {
    return ActiveStreamingInterface.getValidAlternateSettings()();
  }
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v3 = 28;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0xE000000000000000;
  *(void *)(v3 + 24) = 0xD000000000000013;
  *(void *)(v3 + 32) = 0x80000001000E7880;
  *(void *)(v3 + 40) = 0xD000000000000028;
  *(void *)(v3 + 48) = 0x80000001000E68C0;
  *(void *)(v3 + 56) = 100;
  return swift_willThrow();
}

uint64_t ActiveStreamingInterface.hasValidAlternateSettingsControl.getter()
{
  uint64_t v30 = type metadata accessor for Mirror();
  __chkstk_darwin(v30);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v0 + 64);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 16)) == 0)
  {
    char v16 = 0;
    return v16 & 1;
  }
  uint64_t v24 = v0;
  unint64_t v27 = &v36;
  uint64_t v29 = (void (**)(char *, uint64_t))(v1 + 8);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = 32;
  unint64_t v26 = "activeAlternateSetting";
  unint64_t v25 = 0x80000001000E3E90;
  uint64_t v28 = v6;
  while (1)
  {
    uint64_t v31 = v5;
    __int16 v8 = *(_WORD *)(v6 + v7);
    char v9 = *(unsigned char *)(v6 + v7 + 2);
    *((void *)&v36 + 1) = &type metadata for USBDescriptorControl;
    BYTE2(v35) = v9;
    LOWORD(v35) = v8;
    Mirror.init(reflecting:)();
    uint64_t v10 = v3;
    Mirror.children.getter();
    swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v11 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
    if (v11 != result)
    {
      __break(1u);
      return result;
    }
    char v13 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v13)
    {
      swift_unknownObjectRelease();
      long long v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v35 = v32;
      long long v36 = v33;
      long long v37 = v34;
      swift_unknownObjectRelease();
    }
    uint64_t v3 = v10;
    swift_release();
    (*v29)(v10, v30);
    if (!*((void *)&v37 + 1))
    {
      sub_10001A918((uint64_t)&v35, &qword_100127CD0);
      goto LABEL_5;
    }
    long long v14 = v35;
    sub_10001ABC4((uint64_t)v27);
    if (!*((void *)&v14 + 1)) {
      goto LABEL_5;
    }
    if (v14 == __PAIR128__(v25, 0xD000000000000016)) {
      break;
    }
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_18;
    }
LABEL_5:
    v7 += 3;
    uint64_t v5 = v31 - 1;
    uint64_t v6 = v28;
    if (v31 == 1)
    {
      swift_bridgeObjectRelease();
      char v16 = 0;
      return v16 & 1;
    }
  }
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRelease();
  uint64_t v17 = v24;
  swift_beginAccess();
  if (*(void *)(v17 + 16))
  {
    uint64_t v18 = *(void *)(v17 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 16);
    swift_unknownObjectRetain();
    uint64_t v21 = (char *)v20(ObjectType, v18);
    swift_unknownObjectRelease();
    if (v21)
    {
      uint64_t v22 = *(void *)&v21[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
      if (v22)
      {
        BOOL v23 = sub_10001925C(7, v22);

        char v16 = !v23;
        return v16 & 1;
      }
    }
  }
  char v16 = 1;
  return v16 & 1;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveStreamingInterface.getValidAlternateSettings()()
{
  uint64_t v2 = v1;
  unint64_t v89 = (void (*)(unsigned char *, void (*)(uint64_t, uint64_t), uint64_t))type metadata accessor for Mirror();
  __chkstk_darwin(v89);
  uint64_t v5 = &v76[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(void *)(v0 + 64);
  if (!v6 || (uint64_t v7 = *(char **)(v6 + 16)) == 0)
  {
LABEL_17:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v20 = 8;
    *(void *)(v20 + 8) = 0;
    *(void *)(v20 + 16) = 0xE000000000000000;
    *(void *)(v20 + 24) = 0xD00000000000001BLL;
    *(void *)(v20 + 32) = 0x80000001000E7C70;
    *(void *)(v20 + 40) = 0xD000000000000028;
    *(void *)(v20 + 48) = 0x80000001000E68C0;
    uint64_t v21 = 120;
LABEL_18:
    *(void *)(v20 + 56) = v21;
    swift_willThrow();
    return v0;
  }
  uint64_t v81 = (unsigned char *)v0;
  unint64_t v80 = v2;
  int64_t v84 = &v97;
  uint64_t v87 = (unsigned char *)(v3 + 8);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = 32;
  __int16 v83 = "activeAlternateSetting";
  unint64_t v82 = 0x80000001000E3E90;
  unint64_t v88 = (void (*)(uint64_t, uint64_t))v8;
  while (1)
  {
    __int16 v90 = (unsigned char *)v9;
    long long v91 = v7;
    uint64_t v10 = (unsigned __int16 *)(v8 + v9);
    int v11 = *(unsigned __int8 *)(v8 + v9 + 2);
    LODWORD(v10) = *v10;
    *((void *)&v97 + 1) = &type metadata for USBDescriptorControl;
    LODWORD(v86) = v11;
    BYTE2(v96) = v11;
    LODWORD(v85) = v10;
    LOWORD(v96) = (_WORD)v10;
    Mirror.init(reflecting:)();
    long long v12 = v5;
    char v13 = (void *)Mirror.children.getter();
    long long v14 = (unsigned char *)v13[3];
    char v15 = (unsigned char *)v13[4];
    char v16 = (unsigned char *)v13[5];
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v18 = (void (*)(uint64_t, uint64_t))dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    if (v18 != (void (*)(uint64_t, uint64_t))dispatch thunk of _AnyIndexBox._typeID.getter())
    {
      __break(1u);
      goto LABEL_34;
    }
    Swift::Int v0 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v0)
    {
      swift_unknownObjectRelease();
      long long v97 = 0u;
      long long v98 = 0u;
      long long v96 = 0u;
    }
    else
    {
      Swift::Int v0 = (Swift::Int)v13;
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v96 = v93;
      long long v97 = v94;
      long long v98 = v95;
      swift_unknownObjectRelease();
    }
    uint64_t v5 = v12;
    swift_release();
    (*(void (**)(unsigned char *, void (*)(unsigned char *, void (*)(uint64_t, uint64_t), uint64_t)))v87)(v12, v89);
    if (!*((void *)&v98 + 1))
    {
      sub_10001A918((uint64_t)&v96, &qword_100127CD0);
      goto LABEL_5;
    }
    uint64_t v19 = *((void *)&v96 + 1);
    Swift::Int v0 = v96;
    sub_10001ABC4((uint64_t)v84);
    if (!v19) {
      goto LABEL_5;
    }
    if (v0 == 0xD000000000000016 && v19 == v82) {
      break;
    }
    Swift::Int v0 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v0) {
      goto LABEL_21;
    }
LABEL_5:
    uint64_t v9 = (uint64_t)(v90 + 3);
    uint64_t v7 = v91 - 1;
    uint64_t v8 = (uint64_t)v88;
    if (v91 == (char *)1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
LABEL_21:
  swift_bridgeObjectRelease();
  BOOL v23 = v81;
  swift_beginAccess();
  Swift::Int v0 = *((void *)v23 + 2);
  if (!v0)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v20 = 61;
    *(void *)(v20 + 8) = 0;
    *(void *)(v20 + 16) = 0xE000000000000000;
    *(void *)(v20 + 24) = 0xD00000000000001BLL;
    *(void *)(v20 + 32) = 0x80000001000E7C70;
    *(void *)(v20 + 40) = 0xD000000000000028;
    *(void *)(v20 + 48) = 0x80000001000E68C0;
    uint64_t v21 = 123;
    goto LABEL_18;
  }
  unsigned int v24 = v85 | (v86 << 16);
  uint64_t v25 = *((void *)v23 + 3);
  uint64_t v26 = swift_getObjectType();
  unint64_t v27 = *(uint64_t (**)(void, unsigned char *, uint64_t, uint64_t))(v25 + 152);
  swift_unknownObjectRetain();
  uint64_t v28 = v80;
  __int16 v29 = v27(v24 & 0xFFFFFF, v23, v26, v25);
  uint64_t v31 = v30;
  swift_unknownObjectRelease();
  if (v28) {
    return v0;
  }
  id v32 = v31;
  ADCControlRequestParameterBlock.getCur()(v32, v29 & 0x1FF, (uint64_t)&v96);
  int64_t v84 = (long long *)v32;

  uint64_t v33 = *((void *)&v97 + 1);
  long long v34 = sub_10001A974(&v96, *((uint64_t *)&v97 + 1));
  __int16 v85 = v76;
  uint64_t v35 = *(void *)(v33 - 8);
  long long v36 = *(unsigned char **)(v35 + 64);
  __chkstk_darwin(v34);
  unint64_t v37 = (unint64_t)(v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v87 = (unsigned char *)v35;
  uint64_t v38 = *(void (**)(unsigned char *))(v35 + 16);
  v38(&v76[-v37]);
  uint64_t v39 = dispatch thunk of static BinaryInteger.isSigned.getter();
  char v40 = v39;
  __int16 v83 = v76;
  uint64_t v86 = v36;
  uint64_t ObjectType = v33;
  __chkstk_darwin(v39);
  uint64_t v41 = &v76[-v37];
  unint64_t v88 = (void (*)(uint64_t, uint64_t))&v76[-v37];
  unint64_t v89 = (void (*)(unsigned char *, void (*)(uint64_t, uint64_t), uint64_t))v38;
  __int16 v90 = (unsigned char *)(v35 + 16);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v38)(&v76[-v37], &v76[-v37], ObjectType);
  if ((v40 & 1) == 0)
  {
    char v16 = v87;
    long long v91 = (char *)*((void *)v87 + 1);
    ((void (*)(unsigned char *, uint64_t))v91)(v41, ObjectType);
    uint64_t v18 = v88;
    long long v14 = v86;
    goto LABEL_48;
  }
  uint64_t v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
  char v16 = v87;
  unint64_t v43 = v87 + 8;
  long long v91 = (char *)*((void *)v87 + 1);
  uint64_t v44 = ((uint64_t (*)(unsigned char *, uint64_t))v91)(v41, ObjectType);
  if (v42 <= 64)
  {
    uint64_t v18 = v88;
    long long v14 = v86;
    goto LABEL_48;
  }
  unint64_t v82 = (unint64_t)v43;
  char v13 = v76;
  long long v14 = v86;
  __chkstk_darwin(v44);
  char v15 = &v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = v88;
  v89(v15, v88, ObjectType);
  int64_t v99 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
LABEL_34:
    unint64_t v80 = v13;
    char v49 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v81 = v15;
    uint64_t v50 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v47 = v91;
    if (v49)
    {
      if (v50 > 64)
      {
        __chkstk_darwin(v50);
        sub_100020748();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        __int16 v51 = v81;
        char v52 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v53 = v91;
        ((void (*)(unsigned char *, uint64_t))v91)(&v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
        ((void (*)(unsigned char *, uint64_t))v53)(v51, ObjectType);
        char v16 = v87;
        uint64_t v18 = v88;
        uint64_t v48 = &v100;
        if ((v52 & 1) == 0) {
          goto LABEL_48;
        }
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v79 = v76;
      __chkstk_darwin(AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v61 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v78 = v76;
      __chkstk_darwin(v61);
      unint64_t v62 = (unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v63 = v81;
      int v77 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v18 = (void (*)(uint64_t, uint64_t))v91;
      uint64_t v64 = ((uint64_t (*)(unsigned char *, uint64_t))v91)(&v76[-v62], ObjectType);
      uint64_t v79 = v76;
      __chkstk_darwin(v64);
      uint64_t v65 = (uint64_t)&v76[-v62];
      (*((void (**)(unsigned char *, unsigned char *, uint64_t))v87 + 4))(&v76[-v62], v63, ObjectType);
      if (v77) {
        goto LABEL_62;
      }
      int64_t v66 = v99;
      uint64_t v67 = dispatch thunk of BinaryInteger._lowWord.getter();
      v18(v65, ObjectType);
      BOOL v59 = v67 < v66;
      char v16 = v87;
      uint64_t v18 = v88;
    }
    else
    {
      uint64_t v48 = &v101;
      if (v50 >= 64)
      {
LABEL_47:
        ((void (*)(void, uint64_t))v47)(*(v48 - 32), ObjectType);
        goto LABEL_48;
      }
      __int16 v56 = v81;
      __int16 v57 = v91;
      uint64_t v58 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(unsigned char *, uint64_t))v57)(v56, ObjectType);
      BOOL v59 = v58 < v99;
    }
    uint64_t v48 = &v100;
    if (v59) {
      goto LABEL_46;
    }
    goto LABEL_48;
  }
  uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v45 >= 64)
  {
    uint64_t v81 = v76;
    __chkstk_darwin(v45);
    sub_100020748();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v54 = dispatch thunk of static Comparable.< infix(_:_:)();
    __int16 v55 = v91;
    ((void (*)(unsigned char *, uint64_t))v91)(&v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
    ((void (*)(unsigned char *, uint64_t))v55)(&v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
    uint64_t v48 = (uint64_t *)v81;
    char v16 = v87;
    uint64_t v18 = v88;
    if ((v54 & 1) == 0) {
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  uint64_t v46 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(unsigned char *, uint64_t))v91)(&v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
  uint64_t v48 = (uint64_t *)v99;
  if (v46 < v99) {
    goto LABEL_46;
  }
LABEL_48:
  uint64_t v68 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v87 = v76;
  __chkstk_darwin(v68);
  v89(&v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v18, ObjectType);
  if (v68 >= 65)
  {
    uint64_t v69 = v91;
    uint64_t v70 = ((uint64_t (*)(unsigned char *, uint64_t))v91)(&v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
    goto LABEL_50;
  }
  uint64_t v73 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v69 = v91;
  ((void (*)(unsigned char *, uint64_t))v91)(&v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
  if (v73 != 64 || (uint64_t v70 = dispatch thunk of static BinaryInteger.isSigned.getter(), (v70 & 1) != 0))
  {
LABEL_60:
    Swift::Int v0 = dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(void, uint64_t))v69)(v18, ObjectType);

    sub_10001ABC4((uint64_t)&v96);
    return v0;
  }
LABEL_50:
  uint64_t v86 = v76;
  __chkstk_darwin(v70);
  v89(&v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v18, ObjectType);
  int64_t v99 = 0x7FFFFFFFFFFFFFFFLL;
  char v71 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v72 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v71)
  {
    if (v72 > 64)
    {
      __chkstk_darwin(v72);
      sub_100020748();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v65 = dispatch thunk of static Comparable.< infix(_:_:)();
      ((void (*)(unsigned char *, uint64_t))v91)(&v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
      ((void (*)(unsigned char *, uint64_t))v91)(&v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
      uint64_t v69 = v91;
      goto LABEL_59;
    }
LABEL_57:
    dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(unsigned char *, uint64_t))v69)(&v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
    uint64_t v18 = v88;
    goto LABEL_60;
  }
  if (v72 <= 63) {
    goto LABEL_57;
  }
  __int16 v90 = v76;
  uint64_t v92 = 0x7FFFFFFFFFFFFFFFLL;
  __chkstk_darwin(v72);
  id v74 = &v76[-((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v75 = (*((uint64_t (**)(unsigned char *, unsigned char *, uint64_t))v16 + 4))(v74, v74, ObjectType);
  __chkstk_darwin(v75);
  sub_100020748();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v65 = dispatch thunk of static Comparable.< infix(_:_:)();
  ((void (*)(unsigned char *, uint64_t))v91)(v74, ObjectType);
  ((void (*)(unsigned char *, uint64_t))v91)(v74, ObjectType);
  uint64_t v69 = v91;
LABEL_59:
  uint64_t v18 = v88;
  if ((v65 & 1) == 0) {
    goto LABEL_60;
  }
  __break(1u);
LABEL_62:
  Swift::Int result = ((uint64_t (*)(uint64_t, uint64_t))v18)(v65, ObjectType);
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveStreamingInterface.processInterrupt(attribute:controlSelector:)(AUASDCore::AUAInterruptAttribute_optional attribute, Swift::UInt_optional controlSelector)
{
}

void sub_1000D6970()
{
  AUAAudioDevice.publishStreamFormats()();
  if (v0)
  {
    sub_10002E81C(0xD00000000000002FLL, 0x80000001000E7C40, 0xD00000000000002CLL, (void *)0x80000001000E4BF0, 0xD000000000000028, 0x80000001000E68C0, 158);
    swift_errorRelease();
  }
}

void *ActiveStreamingInterface.streamFormats(forSamplingRate:inClockRateRange:nonStreamingTerminal:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  unint64_t v105 = a4;
  unint64_t v107 = a3;
  unint64_t v106 = a2;
  unint64_t v117 = a1;
  uint64_t v115 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  long long v12 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v122 = (unint64_t)_swiftEmptyArrayStorage;
  int v112 = (void **)(v5 + 16);
  swift_beginAccess();
  unint64_t v13 = *(void *)(v5 + 16);
  uint64_t v113 = v5;
  if (!v13)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v30 = 61;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0xE000000000000000;
    *(void *)(v30 + 24) = 0xD000000000000045;
    *(void *)(v30 + 32) = 0x80000001000E79D0;
    *(void *)(v30 + 40) = 0xD000000000000028;
    *(void *)(v30 + 48) = 0x80000001000E68C0;
    *(void *)(v30 + 56) = 174;
    swift_willThrow();
    goto LABEL_18;
  }
  unint64_t v114 = (unint64_t)v12;
  uint64_t v14 = *(void *)(v5 + 24);
  uint64_t v15 = a5[3];
  uint64_t v16 = a5[4];
  sub_10001A974(a5, v15);
  swift_unknownObjectRetain();
  uint64_t v17 = sub_10009F248(v15, v16);
  if (!v17)
  {
    swift_unknownObjectRelease();
LABEL_21:
    unint64_t v23 = v117;
    goto LABEL_23;
  }
  uint64_t v18 = v17;
  unint64_t v19 = *(void *)(v17 + 16);
  if (!v19)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  uint64_t v100 = v14;
  uint64_t v101 = a5;
  unint64_t v103 = v13;
  unint64_t v102 = v6;
  uint64_t v104 = &v127;
  uint64_t v111 = v10 + 8;
  uint64_t v20 = 32;
  uint64_t v110 = v17;
  do
  {
    unint64_t v116 = v19;
    int v21 = *(unsigned __int8 *)(v18 + v20 + 2);
    int v22 = *(unsigned __int16 *)(v18 + v20);
    *((void *)&v127 + 1) = &type metadata for USBDescriptorControl;
    int v109 = v21;
    BYTE2(v126) = v21;
    LODWORD(v108) = v22;
    LOWORD(v126) = v22;
    Mirror.init(reflecting:)();
    unint64_t v23 = Mirror.children.getter();
    unint64_t v24 = *(void *)(v23 + 16);
    uint64_t v8 = *(void *)(v23 + 32);
    swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v7 = (objc_class *)dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    uint64_t v25 = v8;
    if (v7 != (objc_class *)dispatch thunk of _AnyIndexBox._typeID.getter())
    {
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
    char v26 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v26)
    {
      swift_unknownObjectRelease();
      long long v127 = 0u;
      long long v128 = 0u;
      long long v126 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v126 = v123;
      long long v127 = v124;
      long long v128 = v125;
      swift_unknownObjectRelease();
    }
    uint64_t v8 = v113;
    unint64_t v27 = v114;
    swift_release();
    (*(void (**)(unint64_t, uint64_t))v111)(v27, v115);
    if (*((void *)&v128 + 1))
    {
      long long v28 = v126;
      sub_10001ABC4((uint64_t)v104);
      if (*((void *)&v28 + 1))
      {
        if (v28 == __PAIR128__(0xE900000000000072, 0x6F7463656E6E6F63))
        {
          swift_bridgeObjectRelease();
LABEL_144:
          int v88 = v108 | (v109 << 16);
          swift_bridgeObjectRelease();
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v90 = v101[3];
          uint64_t v91 = v101[4];
          uint64_t v92 = sub_10001A974(v101, v90);
          *((void *)&v127 + 1) = v90;
          *(void *)&long long v128 = *(void *)(v91 + 8);
          long long v93 = sub_10002D9D4((uint64_t *)&v126);
          (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v90 - 8) + 16))(v93, v92, v90);
          long long v94 = v102;
          __int16 v95 = (*(uint64_t (**)(void, void, void, long long *, uint64_t))(v100 + 144))(v88 & 0xFFFFFF, 0, 0, &v126, ObjectType);
          if (!v94)
          {
            __int16 v97 = v95;
            unint64_t v43 = v96;
            sub_10001ABC4((uint64_t)&v126);
            char v41 = sub_1000754B4(v97 & 0x1FF, v43);
            uint64_t v7 = 0;
            goto LABEL_148;
          }
          swift_unknownObjectRelease();
          sub_10001ABC4((uint64_t)&v126);
LABEL_18:
          uint64_t v7 = 0;
          unint64_t v23 = v117;
          sub_10002E81C(0xD000000000000024, 0x80000001000E7A20, 0xD000000000000045, (void *)0x80000001000E79D0, 0xD000000000000028, 0x80000001000E68C0, 190);
          swift_errorRelease();
          goto LABEL_23;
        }
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v29) {
          goto LABEL_144;
        }
      }
    }
    else
    {
      sub_10001A918((uint64_t)&v126, &qword_100127CD0);
    }
    v20 += 3;
    unint64_t v19 = v116 - 1;
    uint64_t v18 = v110;
  }
  while (v116 != 1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v23 = v117;
  uint64_t v7 = v102;
  do
  {
LABEL_23:
    if (ActiveStreamingInterface.hasValidAlternateSettingsControl.getter())
    {
      Swift::Int active = ActiveStreamingInterface.getValidAlternateSettings()();
      uint64_t v7 = v32;
      if (v32) {
        return (void *)swift_bridgeObjectRelease();
      }
      uint64_t v25 = active;
    }
    else
    {
      uint64_t v25 = 255;
    }
    unint64_t v24 = *(void *)(v8 + 72);
    if (v24 >> 62)
    {
LABEL_161:
      swift_bridgeObjectRetain_n();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v34 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    unint64_t v114 = v24;
    unint64_t v102 = v7;
    if (!v34)
    {
LABEL_142:
      swift_bridgeObjectRelease();
      return (void *)v122;
    }
    unint64_t v108 = v25;
    unint64_t v35 = 0;
    unint64_t v116 = v114 & 0xC000000000000001;
    uint64_t v111 = v114 & 0xFFFFFFFFFFFFFF8;
    double v36 = (double)v23;
    uint64_t v110 = v114 + 32;
    double v37 = (double)v106;
    double v38 = (double)v107;
    uint64_t v115 = v34;
    while (1)
    {
      if (v116)
      {
        uint64_t v39 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v40 = __OFADD__(v35++, 1);
        if (v40) {
          goto LABEL_150;
        }
      }
      else
      {
        if (v35 >= *(void *)(v111 + 16)) {
          goto LABEL_159;
        }
        uint64_t v39 = *(void *)(v110 + 8 * v35);
        swift_retain();
        BOOL v40 = __OFADD__(v35++, 1);
        if (v40)
        {
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
      }
      unint64_t v24 = *(void *)(v39 + 104);
      swift_retain();
      uint64_t v25 = v8;
      char v41 = ActiveStreamingInterface.hasValidAlternateSettingsControl.getter();
      if (v41)
      {
        unsigned int v42 = *(unsigned __int8 *)(*(void *)(v39 + 16) + 3);
        if (v42 >= 0x40 || ((v108 >> v42) & 1) == 0) {
          goto LABEL_32;
        }
      }
      unint64_t v43 = *v112;
      if (!*v112) {
        goto LABEL_53;
      }
      uint64_t v44 = *(void *)(v8 + 24);
      uint64_t v45 = swift_getObjectType();
      uint64_t v7 = (objc_class *)(v44 + 16);
      uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 16);
      swift_unknownObjectRetain();
      uint64_t v25 = v46(v45, v44);
      char v41 = swift_unknownObjectRelease();
      if (v25) {
        break;
      }
      unint64_t v23 = v117;
      uint64_t v34 = v115;
LABEL_53:
      uint64_t v50 = *(void *)(v24 + 80);
      if (v50) {
        goto LABEL_57;
      }
LABEL_68:
      unint64_t v55 = *(void *)(v24 + 96);
      unint64_t v56 = *(void *)(v24 + 104);
      if (!is_mul_ok(v56, v55)) {
        goto LABEL_152;
      }
      if (!(v56 * v55))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v87 = 0;
        *(void *)(v87 + 8) = 0;
        *(void *)(v87 + 16) = 0xE000000000000000;
        *(void *)(v87 + 24) = 0xD000000000000045;
        *(void *)(v87 + 32) = 0x80000001000E79D0;
        *(void *)(v87 + 40) = 0xD000000000000028;
        *(void *)(v87 + 48) = 0x80000001000E68C0;
        *(void *)(v87 + 56) = 214;
        swift_willThrow();
        swift_release();
        return (void *)swift_release();
      }
      uint64_t v57 = *(void *)(v39 + 128);
      if (v57)
      {
        unint64_t v58 = *(void *)(v57 + 16);
        unint64_t v59 = *(void *)(v39 + 40);
        if ((v59 & 0x8000000000000000) != 0) {
          goto LABEL_170;
        }
      }
      else
      {
        unint64_t v58 = 0;
        unint64_t v59 = *(void *)(v39 + 40);
        if ((v59 & 0x8000000000000000) != 0) {
          goto LABEL_170;
        }
      }
      if (HIDWORD(v59)) {
        goto LABEL_170;
      }
      unint64_t v23 = v58 * v59;
      if ((unsigned __int128)((uint64_t)v58 * (__int128)(uint64_t)v59) >> 64 != (uint64_t)(v58 * v59) >> 63) {
        goto LABEL_153;
      }
      if ((v23 & 0x8000000000000000) != 0 || HIDWORD(v23)) {
        goto LABEL_170;
      }
      if (!v56) {
        goto LABEL_154;
      }
      unint64_t v60 = 0x3E8 / v56;
      if (!is_mul_ok(v60, v55)) {
        goto LABEL_155;
      }
      unint64_t v61 = v60 * v55;
      if (HIDWORD(v61)) {
        goto LABEL_170;
      }
      uint64_t v62 = *(void *)(v39 + 48);
      switch(*(unsigned char *)(v39 + 24))
      {
        case 1:
          if (v59 >> 29)
          {
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
          }
          if (8 * v59 == v62) {
            unsigned int v65 = 12;
          }
          else {
            unsigned int v65 = 20;
          }
          if (HIDWORD(v117)) {
            goto LABEL_170;
          }
          uint64_t v25 = 1819304813;
          int v64 = 1;
LABEL_94:
          int v63 = 1;
LABEL_98:
          unsigned int v66 = v58 * v59;
          int v67 = v61 - 1;
          if (v61) {
            goto LABEL_99;
          }
          goto LABEL_156;
        case 2:
          if (HIDWORD(v117)) {
            goto LABEL_170;
          }
          uint64_t v25 = 1819304813;
          int v64 = 1;
          unsigned int v65 = 1;
          goto LABEL_94;
        case 3:
          if (HIDWORD(v117)) {
            goto LABEL_170;
          }
          int v63 = 0;
          uint64_t v25 = 1970037111;
          goto LABEL_97;
        case 4:
          if (HIDWORD(v117)) {
            goto LABEL_170;
          }
          int v63 = 0;
          uint64_t v25 = 1634492791;
          goto LABEL_97;
        case 5:
          if (v59 >> 29) {
            goto LABEL_163;
          }
          if (8 * v59 == v62) {
            unsigned int v65 = 76;
          }
          else {
            unsigned int v65 = 84;
          }
          uint64_t v82 = 1536 * v58;
          if ((unsigned __int128)((uint64_t)v58 * (__int128)1536) >> 64 != (uint64_t)(1536 * v58) >> 63) {
            goto LABEL_164;
          }
          uint64_t v83 = v62 + 7;
          if (v62 >= 0) {
            uint64_t v83 = *(void *)(v39 + 48);
          }
          uint64_t v84 = v83 >> 3;
          unint64_t v23 = v82 * v84;
          if ((unsigned __int128)(v82 * (__int128)v84) >> 64 != (v82 * v84) >> 63) {
            goto LABEL_165;
          }
          if ((v23 & 0x8000000000000000) != 0 || HIDWORD(v23) || HIDWORD(v117)) {
            goto LABEL_170;
          }
          int v63 = 0;
          unsigned int v66 = 0;
          uint64_t v25 = 1667326771;
          int v64 = 1536;
          int v67 = v61 - 1;
          if (!v61) {
            goto LABEL_156;
          }
LABEL_99:
          BOOL v68 = __CFADD__(v117, v67);
          unsigned int v69 = v117 + v67;
          if (v68) {
            goto LABEL_157;
          }
          unint64_t v70 = v69 / v61 * (unint64_t)v66;
          if ((v70 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_158;
          }
          if (*(void *)(v24 + 112) >= (unint64_t)v70)
          {
            if (HIDWORD(v58)) {
              goto LABEL_170;
            }
            if (v62 < 0) {
              goto LABEL_170;
            }
            int v109 = v63;
            if (HIDWORD(v62)) {
              goto LABEL_170;
            }
            *(double *)&long long v123 = v36;
            *((void *)&v123 + 1) = __PAIR64__(v65, v25);
            *(void *)&long long v124 = __PAIR64__(v64, v23);
            *((void *)&v124 + 1) = __PAIR64__(v58, v66);
            *(void *)&long long v125 = v62;
            unsigned int v71 = v65;
            uint64_t v104 = (long long *)v62;
            unint64_t v103 = v58;
            uint64_t v7 = (objc_class *)type metadata accessor for AUAStreamFormat();
            uint64_t v72 = (char *)objc_allocWithZone(v7);
            *(void *)&v72[OBJC_IVAR___AUAStreamFormat_altSetting] = v39;
            uint64_t v73 = (unint64_t *)&v72[OBJC_IVAR___AUAStreamFormat_rateRange];
            unint64_t v74 = v106;
            unint64_t v75 = v107;
            unint64_t *v73 = v106;
            v73[1] = v75;
            v73[2] = v105;
            if (v75 == v74)
            {
              v118.receiver = v72;
              v118.super_class = v7;
              swift_retain_n();
              id v76 = objc_msgSendSuper2(&v118, "initWithAudioStreamBasicDescription:", &v123);
              uint64_t v34 = v115;
              if (!v76)
              {
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
LABEL_170:
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                JUMPOUT(0x1000D7B14);
              }
              swift_release();
            }
            else
            {
              *(void *)&long long v123 = 0;
              *(void *)&long long v126 = 0;
              *((void *)&v126 + 1) = __PAIR64__(v71, v25);
              *(void *)&long long v127 = __PAIR64__(v64, v23);
              *((void *)&v127 + 1) = __PAIR64__(v103, v66);
              *(void *)&long long v128 = v104;
              *((double *)&v128 + 1) = v37;
              double v129 = v38;
              v121.receiver = v72;
              v121.super_class = v7;
              swift_retain_n();
              if (!objc_msgSendSuper2(&v121, "initWithAudioStreamRangedDescription:", &v126)) {
                goto LABEL_167;
              }
              swift_release();
              uint64_t v34 = v115;
            }
            uint64_t v25 = (uint64_t)&v122;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            if (v109)
            {
              int v77 = HIDWORD(v123) | 0x40;
              HIDWORD(v123) |= 0x40u;
              uint64_t v78 = (char *)objc_allocWithZone(v7);
              *(void *)&v78[OBJC_IVAR___AUAStreamFormat_altSetting] = v39;
              uint64_t v79 = (unint64_t *)&v78[OBJC_IVAR___AUAStreamFormat_rateRange];
              unint64_t v80 = v106;
              unint64_t v81 = v107;
              unint64_t *v79 = v106;
              v79[1] = v81;
              v79[2] = v105;
              if (v81 == v80)
              {
                v119.receiver = v78;
                v119.super_class = v7;
                swift_retain();
                if (!objc_msgSendSuper2(&v119, "initWithAudioStreamBasicDescription:", &v123)) {
                  goto LABEL_168;
                }
              }
              else
              {
                *(void *)&long long v126 = 0;
                *((void *)&v126 + 1) = __PAIR64__(v77, DWORD2(v123));
                long long v127 = v124;
                *(void *)&long long v128 = v125;
                *((double *)&v128 + 1) = v37;
                double v129 = v38;
                v120.receiver = v78;
                v120.super_class = v7;
                swift_retain();
                if (!objc_msgSendSuper2(&v120, "initWithAudioStreamRangedDescription:", &v126)) {
                  goto LABEL_169;
                }
              }
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            swift_release();
            swift_release();
            uint64_t v8 = v113;
            unint64_t v23 = v117;
          }
          else
          {
            swift_release();
            swift_release();
            unint64_t v23 = v117;
            uint64_t v34 = v115;
          }
          break;
        default:
          if (HIDWORD(v117)) {
            goto LABEL_170;
          }
          int v63 = 0;
          uint64_t v25 = 4;
LABEL_97:
          unsigned int v65 = 0x80000000;
          int v64 = 1;
          goto LABEL_98;
      }
LABEL_33:
      if (v35 == v34) {
        goto LABEL_142;
      }
    }
    uint64_t v47 = *(void *)(v25 + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    unint64_t v23 = v117;
    uint64_t v34 = v115;
    if (!v47) {
      goto LABEL_56;
    }
    uint64_t v48 = *(void *)(v47 + 16);
    if (!v48) {
      goto LABEL_56;
    }
    if (*(unsigned char *)(v47 + 32) == 2) {
      goto LABEL_48;
    }
    if (v48 == 1) {
      goto LABEL_56;
    }
    if (*(unsigned char *)(v47 + 33) == 2)
    {
LABEL_48:
      unint64_t v43 = (void *)IOUSBGetEndpointDirection(*(const IOUSBEndpointDescriptor **)(v24 + 16));

      if (!v43)
      {
        uint64_t v49 = *(void *)(v39 + 128);
        if (v49)
        {
          if (*(void *)(v49 + 16) == 1) {
            goto LABEL_32;
          }
        }
      }
      goto LABEL_53;
    }
    if (v48 != 2)
    {
      uint64_t v85 = 34;
      do
      {
        uint64_t v86 = v85 - 31;
        if (__OFADD__(v85 - 32, 1)) {
          goto LABEL_160;
        }
        if (*(unsigned char *)(v47 + v85) == 2) {
          goto LABEL_48;
        }
        ++v85;
      }
      while (v86 != v48);
    }
LABEL_56:

    uint64_t v50 = *(void *)(v24 + 80);
    if (!v50) {
      goto LABEL_68;
    }
LABEL_57:
    uint64_t v51 = *(void *)(v50 + 16);
    if (!v51)
    {
LABEL_32:
      swift_release();
      swift_release();
      goto LABEL_33;
    }
    BOOL v52 = 0;
    uint64_t v53 = (unint64_t *)(v50 + 40);
    uint64_t v54 = 1;
    do
    {
      if (v52)
      {
        if (v51 == v54) {
          goto LABEL_68;
        }
        BOOL v52 = 1;
      }
      else if (*(v53 - 1) <= v23)
      {
        BOOL v52 = *v53 >= v23;
        if (v51 == v54)
        {
          if (*v53 < v23) {
            goto LABEL_32;
          }
          goto LABEL_68;
        }
      }
      else
      {
        if (v51 == v54) {
          goto LABEL_32;
        }
        BOOL v52 = 0;
      }
      v53 += 3;
      BOOL v40 = __OFADD__(v54++, 1);
    }
    while (!v40);
    __break(1u);
LABEL_148:
    char v98 = v41;
    swift_unknownObjectRelease();

    unint64_t v23 = v117;
  }
  while (v98);
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveStreamingInterface.channelCount()()
{
  unint64_t v1 = *(void *)(v0 + 72);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v2) {
      goto LABEL_3;
    }
LABEL_27:
    Swift::Int v4 = 0;
    goto LABEL_28;
  }
LABEL_26:
  swift_bridgeObjectRetain_n();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_27;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    Swift::Int v4 = 0;
    uint64_t v5 = 1;
    while (1)
    {
      uint64_t v6 = *(void *)(v3 + 128);
      if (v6)
      {
        Swift::Int v7 = *(void *)(v6 + 16);
        swift_unknownObjectRelease();
        if (v7 > v4) {
          Swift::Int v4 = v7;
        }
      }
      else
      {
        swift_unknownObjectRelease();
        if (v4 <= 0) {
          Swift::Int v4 = 0;
        }
      }
      if (v2 == v5) {
        break;
      }
      uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_15:
    uint64_t v9 = 0;
    Swift::Int v4 = 0;
    while (1)
    {
      uint64_t v10 = *(void *)(*(void *)(v1 + 32 + 8 * v9) + 128);
      if (v10)
      {
        Swift::Int v11 = *(void *)(v10 + 16);
        if (v11 > v4) {
          Swift::Int v4 = v11;
        }
      }
      else if (v4 < 1)
      {
        Swift::Int v4 = 0;
      }
      if (v2 - 1 == v9) {
        break;
      }
      if (__OFADD__(++v9, 1))
      {
        __break(1u);
        goto LABEL_26;
      }
    }
  }
LABEL_28:
  swift_bridgeObjectRelease_n();
  return v4;
}

uint64_t ActiveStreamingInterface.deinit()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

  swift_release();
  return v0;
}

uint64_t ActiveStreamingInterface.__deallocating_deinit()
{
  ActiveStreamingInterface.deinit();

  return swift_deallocClassInstance();
}

uint64_t ActiveStreamingAltInterface.staticStreamingAltInterface.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DAAB4(v1 + 16, a1);
}

uint64_t ActiveStreamingAltInterface.format.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t ActiveStreamingAltInterface.interfaceNumber.getter()
{
  return *(unsigned __int8 *)(*(void *)(v0 + 16) + 2);
}

uint64_t ActiveStreamingAltInterface.altSetting.getter()
{
  return *(unsigned __int8 *)(*(void *)(v0 + 16) + 3);
}

uint64_t ActiveStreamingAltInterface.function.getter()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v1 = Strong;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_unknownObjectRetain();
  swift_release();
  return v2;
}

uint64_t ActiveStreamingAltInterface.dataEndpoint.getter()
{
  return swift_retain();
}

uint64_t ActiveStreamingAltInterface.feedbackEndpoint.getter()
{
  return swift_retain();
}

uint64_t ActiveStreamingAltInterface.channelCount.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  if (v1) {
    return *(void *)(v1 + 16);
  }
  else {
    return 0;
  }
}

uint64_t ActiveStreamingAltInterface.streamingInterface.getter()
{
  return swift_weakLoadStrong();
}

uint64_t ActiveStreamingAltInterface.streamingInterface.setter()
{
  return swift_release();
}

void (*ActiveStreamingAltInterface.streamingInterface.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return sub_1000D7F28;
}

void sub_1000D7F28(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }

  free(v3);
}

uint64_t sub_1000D7FA8(_OWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  swift_weakInit();
  long long v13 = a1[3];
  *(_OWORD *)(v6 + 48) = a1[2];
  *(_OWORD *)(v6 + 64) = v13;
  *(_OWORD *)(v6 + 80) = a1[4];
  long long v14 = a1[1];
  *(_OWORD *)(v6 + 16) = *a1;
  *(_OWORD *)(v6 + 32) = v14;
  *(void *)(v6 + 96) = a2;
  *(void *)(v6 + 120) = a3;
  *(void *)(v6 + 128) = a4;
  *(unsigned char *)(v6 + 136) = a5;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v15 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  uint64_t v15 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v15) {
    goto LABEL_47;
  }
LABEL_3:
  if (v15 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v30 = a6;
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    while (1)
    {
      uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      int v21 = *(const IOUSBEndpointDescriptor **)(v20 + 16);
      if (IOUSBGetEndpointType(v21) == 1)
      {
        if (!IOUSBGetEndpointUsageType(v21) && v21->wMaxPacketSize > 8u || IOUSBGetEndpointUsageType(v21) == 2)
        {
          if (!v18)
          {
            uint64_t v18 = v20;
            goto LABEL_8;
          }
        }
        else
        {
          int v22 = IOUSBGetEndpointUsageType(v21);
          if (v22 == 1)
          {
            if (!v17) {
              goto LABEL_23;
            }
          }
          else if (!v22 && v21->wMaxPacketSize <= 8u && v17 == 0)
          {
LABEL_23:
            uint64_t v17 = v20;
            goto LABEL_8;
          }
        }
      }
      swift_unknownObjectRelease();
LABEL_8:
      if (v15 == ++v19) {
        goto LABEL_43;
      }
    }
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  for (uint64_t i = 0; i != v15; ++i)
  {
    uint64_t v25 = *(void *)(a2 + 8 * i + 32);
    char v26 = *(const IOUSBEndpointDescriptor **)(v25 + 16);
    swift_retain();
    if (IOUSBGetEndpointType(v26) != 1)
    {
LABEL_26:
      swift_release();
      continue;
    }
    if (!IOUSBGetEndpointUsageType(v26) && v26->wMaxPacketSize > 8u || IOUSBGetEndpointUsageType(v26) == 2)
    {
      if (v18) {
        goto LABEL_26;
      }
      uint64_t v18 = v25;
    }
    else
    {
      int v27 = IOUSBGetEndpointUsageType(v26);
      if (v27 == 1)
      {
        if (v17) {
          goto LABEL_26;
        }
      }
      else
      {
        if (v27) {
          goto LABEL_26;
        }
        if (v26->wMaxPacketSize > 8u || v17 != 0) {
          goto LABEL_26;
        }
      }
      uint64_t v17 = v25;
    }
  }
LABEL_43:
  swift_bridgeObjectRelease();
  if (v18)
  {

    *(void *)(v6 + 104) = v18;
    *(void *)(v6 + 112) = v17;
    return v6;
  }
  a6 = v30;
LABEL_48:
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v29 = 81;
  *(void *)(v29 + 8) = 0;
  *(void *)(v29 + 16) = 0xE000000000000000;
  *(void *)(v29 + 24) = 0xD000000000000042;
  *(void *)(v29 + 32) = 0x80000001000E7C90;
  *(void *)(v29 + 40) = 0xD000000000000028;
  *(void *)(v29 + 48) = 0x80000001000E68C0;
  *(void *)(v29 + 56) = 346;
  swift_willThrow();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  type metadata accessor for ActiveStreamingAltInterface();
  swift_deallocPartialClassInstance();
  return v6;
}

uint64_t ActiveStreamingAltInterface.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return v0;
}

uint64_t ActiveStreamingAltInterface.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

Swift::Int sub_1000D83E0(Swift::Int result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  Swift::Int v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  Swift::Int v27 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v28 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = a2 + 56;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v28) {
      return 1;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v28) {
        return 1;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v28) {
          return 1;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v11 + 3;
          if (v11 + 3 >= v28) {
            return 1;
          }
          unint64_t v12 = *(void *)(v27 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    long long v14 = (Swift::UInt *)(*(void *)(v3 + 48) + 24 * v10);
    Swift::UInt v15 = *v14;
    Swift::UInt v16 = v14[1];
    Swift::UInt v17 = v14[2];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v17);
    uint64_t result = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v19 = result & ~v18;
    if (((*(void *)(v8 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      return 0;
    }
    uint64_t v20 = ~v18;
    while (1)
    {
      int v21 = (uint64_t *)(*(void *)(a2 + 48) + 24 * v19);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      uint64_t v24 = v21[2];
      BOOL v25 = v22 == v15 && v23 == v16;
      if (v25 && v24 == v17) {
        break;
      }
      unint64_t v19 = (v19 + 1) & v20;
      if (((*(void *)(v8 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        return 0;
      }
    }
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v28) {
    return 1;
  }
  unint64_t v12 = *(void *)(v27 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v28) {
      return 1;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000D8638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  swift_unknownObjectWeakInit();
  long long v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v8 + 48) = v15;
  *(void *)(v8 + 64) = *(void *)(a1 + 32);
  *(void *)(v8 + 72) = a2;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  Swift::UInt v16 = 0;
  *(void *)(v8 + 104) = a7;
  *(void *)(v8 + 112) = a4;
  *(void *)(v8 + 88) = a5;
  *(void *)(v8 + 96) = a6;
  if (!*(unsigned char *)(*(void *)a1 + 7))
  {
    type metadata accessor for EndpointClock();
    swift_allocObject();
    unint64_t v17 = swift_bridgeObjectRetain();
    Swift::UInt v16 = sub_1000DBAD4(v17);
  }
  *(void *)(v8 + 120) = v16;
  return v8;
}

uint64_t sub_1000D8724(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2 >> 62) {
    goto LABEL_31;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = 0;
    uint64_t v33 = v2 & 0xFFFFFFFFFFFFFF8;
    unint64_t v34 = v2 & 0xC000000000000001;
    unint64_t v32 = v2;
    while (v34)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v5 = __OFADD__(v4++, 1);
      if (v5) {
        goto LABEL_29;
      }
LABEL_10:
      ActiveStreamingInterface.clock()();
      uint64_t v7 = v6;
      uint64_t ObjectType = swift_getObjectType();
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 96))(ObjectType, v7) & 1) != 0
        && (uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(ObjectType, v7)) != 0)
      {
        uint64_t v10 = v9;
        sub_1000DACD8();
        uint64_t v11 = Set.init(minimumCapacity:)();
        double v36 = (void *)v11;
        uint64_t v12 = *(void *)(v10 + 16);
        if (v12)
        {
          int64_t v13 = (Swift::UInt *)(v10 + 48);
          do
          {
            Swift::UInt v14 = *(v13 - 2);
            Swift::UInt v15 = *(v13 - 1);
            Swift::UInt v16 = *v13;
            v13 += 3;
            sub_10005AF78(v35, v14, v15, v16);
            --v12;
          }
          while (v12);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v17 = v36;
        }
        else
        {
          unint64_t v17 = (void *)v11;
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
        unint64_t v17 = &_swiftEmptySetSingleton;
      }
      ActiveStreamingInterface.clock()();
      uint64_t v19 = v18;
      uint64_t v20 = swift_getObjectType();
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 96))(v20, v19) & 1) != 0
        && (uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 40))(v20, v19)) != 0)
      {
        uint64_t v22 = v21;
        sub_1000DACD8();
        uint64_t v23 = Set.init(minimumCapacity:)();
        double v36 = (void *)v23;
        uint64_t v24 = *(void *)(v22 + 16);
        if (v24)
        {
          BOOL v25 = (Swift::UInt *)(v22 + 48);
          do
          {
            Swift::UInt v26 = *(v25 - 2);
            Swift::UInt v27 = *(v25 - 1);
            Swift::UInt v28 = *v25;
            v25 += 3;
            sub_10005AF78(v35, v26, v27, v28);
            --v24;
          }
          while (v24);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v29 = v36;
          unint64_t v2 = v32;
        }
        else
        {
          uint64_t v29 = (void *)v23;
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
        uint64_t v29 = &_swiftEmptySetSingleton;
      }
      char v30 = sub_1000D83E0((Swift::Int)v17, (uint64_t)v29);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v30 & 1) != 0 || v4 == v3) {
        goto LABEL_33;
      }
    }
    if (v4 >= *(void *)(v33 + 16)) {
      goto LABEL_30;
    }
    swift_retain();
    BOOL v5 = __OFADD__(v4++, 1);
    if (!v5) {
      goto LABEL_10;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
  }
  char v30 = 0;
LABEL_33:
  swift_bridgeObjectRelease();
  return v30 & 1;
}

uint64_t sub_1000D8B24(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2 >> 62) {
    goto LABEL_31;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = 0;
    uint64_t v33 = v2 & 0xFFFFFFFFFFFFFF8;
    unint64_t v34 = v2 & 0xC000000000000001;
    unint64_t v32 = v2;
    while (v34)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v5 = __OFADD__(v4++, 1);
      if (v5) {
        goto LABEL_29;
      }
LABEL_10:
      ActiveStreamingInterface.clock()();
      uint64_t v7 = v6;
      uint64_t ObjectType = swift_getObjectType();
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 96))(ObjectType, v7) & 1) != 0
        && (uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(ObjectType, v7)) != 0)
      {
        uint64_t v10 = v9;
        sub_1000DACD8();
        uint64_t v11 = Set.init(minimumCapacity:)();
        double v36 = (void *)v11;
        uint64_t v12 = *(void *)(v10 + 16);
        if (v12)
        {
          int64_t v13 = (Swift::UInt *)(v10 + 48);
          do
          {
            Swift::UInt v14 = *(v13 - 2);
            Swift::UInt v15 = *(v13 - 1);
            Swift::UInt v16 = *v13;
            v13 += 3;
            sub_10005AF78(v35, v14, v15, v16);
            --v12;
          }
          while (v12);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v17 = v36;
        }
        else
        {
          unint64_t v17 = (void *)v11;
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
        unint64_t v17 = &_swiftEmptySetSingleton;
      }
      ActiveStreamingInterface.clock()();
      uint64_t v19 = v18;
      uint64_t v20 = swift_getObjectType();
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 96))(v20, v19) & 1) != 0
        && (uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 40))(v20, v19)) != 0)
      {
        uint64_t v22 = v21;
        sub_1000DACD8();
        uint64_t v23 = Set.init(minimumCapacity:)();
        double v36 = (void *)v23;
        uint64_t v24 = *(void *)(v22 + 16);
        if (v24)
        {
          BOOL v25 = (Swift::UInt *)(v22 + 48);
          do
          {
            Swift::UInt v26 = *(v25 - 2);
            Swift::UInt v27 = *(v25 - 1);
            Swift::UInt v28 = *v25;
            v25 += 3;
            sub_10005AF78(v35, v26, v27, v28);
            --v24;
          }
          while (v24);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v29 = v36;
          unint64_t v2 = v32;
        }
        else
        {
          uint64_t v29 = (void *)v23;
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
        uint64_t v29 = &_swiftEmptySetSingleton;
      }
      char v30 = sub_1000D83E0((Swift::Int)v17, (uint64_t)v29);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v30 & 1) == 0 || v4 == v3) {
        goto LABEL_33;
      }
    }
    if (v4 >= *(void *)(v33 + 16)) {
      goto LABEL_30;
    }
    swift_retain();
    BOOL v5 = __OFADD__(v4++, 1);
    if (!v5) {
      goto LABEL_10;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
  }
  char v30 = 1;
LABEL_33:
  swift_bridgeObjectRelease();
  return v30 & 1;
}

void *sub_1000D8F24(unint64_t *a1)
{
  unint64_t v2 = *a1;
  if (*a1 >> 62) {
    goto LABEL_46;
  }
  if (*(uint64_t *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1)
  {
LABEL_47:
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
      goto LABEL_30;
    }
LABEL_48:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_39;
    }
LABEL_31:
    unint64_t v13 = (unint64_t)_swiftEmptyArrayStorage >> 62;
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17 < 1) {
        goto LABEL_39;
      }
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      if (!v18)
      {
LABEL_63:
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v13 = (unint64_t)_swiftEmptyArrayStorage >> 62;
      if (!v19)
      {
        __break(1u);
        goto LABEL_57;
      }
    }
    else if (!*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_39;
    }
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) == 0)
    {
      if (!*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      swift_retain();
      if (!v13) {
        goto LABEL_36;
      }
      goto LABEL_58;
    }
LABEL_57:
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    if (!v13)
    {
LABEL_36:
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_37;
      }
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
LABEL_58:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
    {
LABEL_37:
      sub_1000AA480(0, 1);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_38:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_39;
      }
LABEL_61:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      goto LABEL_38;
    }
    goto LABEL_59;
  }
  do
  {
    while (1)
    {
      while (1)
      {
        unint64_t v3 = v2 >> 62;
        if (v2 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          if (!v6)
          {
            __break(1u);
            goto LABEL_63;
          }
          swift_bridgeObjectRetain();
          uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v8) {
            goto LABEL_43;
          }
        }
        else if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        if ((v2 & 0xC000000000000001) != 0) {
          break;
        }
        if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v4 = *(void *)(v2 + 32);
          swift_retain();
          if (!v3) {
            goto LABEL_8;
          }
          goto LABEL_13;
        }
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v14 < 1) {
          goto LABEL_47;
        }
      }
      uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      if (!v3)
      {
LABEL_8:
        uint64_t v5 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_14;
      }
LABEL_13:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_14:
      if (!v5) {
        goto LABEL_45;
      }
      sub_1000AA480(0, 1);
      if ((unint64_t)_swiftEmptyArrayStorage >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v10)
        {
LABEL_17:
          swift_bridgeObjectRetain();
          char v9 = sub_1000D8B24(v4, (unint64_t)_swiftEmptyArrayStorage);
          swift_bridgeObjectRelease();
          swift_retain();
          if (v9) {
            goto LABEL_18;
          }
          goto LABEL_23;
        }
      }
      else if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_17;
      }
      char v11 = sub_1000D8724(v4, *a1);
      swift_retain();
      if (v11)
      {
LABEL_18:
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        goto LABEL_25;
      }
LABEL_23:
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
LABEL_25:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      unint64_t v2 = *a1;
      if (*a1 >> 62) {
        break;
      }
      if (*(uint64_t *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 0) {
        goto LABEL_29;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  while (v12 > 0);
LABEL_29:
  if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
    goto LABEL_48;
  }
LABEL_30:
  if (!*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_31;
  }
LABEL_39:
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16 < 1) {
      goto LABEL_51;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    *a1 = (unint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    if (*(uint64_t *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1) {
      goto LABEL_41;
    }
LABEL_51:
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1000D946C(unint64_t *a1)
{
  unint64_t v57 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v58 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v55 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v56 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v53 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v54 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v5 = *a1;
  if (*a1 >> 62) {
    goto LABEL_91;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_92:
    swift_bridgeObjectRelease_n();
    unint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
      goto LABEL_93;
    }
LABEL_83:
    if (*(uint64_t *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1) {
      goto LABEL_84;
    }
LABEL_94:
    unint64_t active = v58;
    if (!(v58 >> 62))
    {
      uint64_t v31 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_96;
    }
LABEL_119:
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_96:
    if (v31 >= 1)
    {
      unint64_t v32 = v57;
LABEL_101:
      sub_1000A1B14(active);
      unint64_t v34 = swift_bridgeObjectRetain();
      sub_1000A1B14(v34);
      sub_1000A1B14(v32);
      unint64_t v35 = swift_bridgeObjectRetain();
LABEL_102:
      sub_1000A1B14(v35);
      sub_1000A1B14(v10);
      unint64_t v29 = v55;
      goto LABEL_103;
    }
    if (v54 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v33 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v32 = v57;
    if (v33 >= 1) {
      goto LABEL_101;
    }
    if (v57 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v37 = *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v37 > 0)
    {
LABEL_110:
      sub_1000A1B14(v32);
      unint64_t v38 = swift_bridgeObjectRetain();
      sub_1000A1B14(v38);
      sub_1000A1B14(active);
      unint64_t v35 = swift_bridgeObjectRetain();
      goto LABEL_102;
    }
    if (v53 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v39 >= 1) {
        goto LABEL_110;
      }
    }
    else if (*(uint64_t *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
    {
      goto LABEL_110;
    }
    swift_bridgeObjectRelease();
    unint64_t v40 = v55;
    if (v55 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v43 >= 1) {
        goto LABEL_125;
      }
    }
    else if (*(uint64_t *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
    {
LABEL_125:
      sub_1000A1B14(v40);
      unint64_t v41 = swift_bridgeObjectRetain();
      sub_1000A1B14(v41);
      sub_1000A1B14(active);
      unint64_t v42 = swift_bridgeObjectRetain();
      sub_1000A1B14(v42);
      unint64_t v29 = v10;
      goto LABEL_103;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_104;
  }
LABEL_3:
  unint64_t v49 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_113;
    }
    uint64_t v3 = *(void *)(v5 + 32);
    swift_retain();
  }
  unint64_t v1 = *(void *)(v3 + 72);
  if (!(v1 >> 62))
  {
    uint64_t v7 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_8;
    }
LABEL_114:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_115;
  }
LABEL_113:
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_114;
  }
LABEL_8:
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_115:
    uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_11;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_117:
    swift_bridgeObjectRetain_n();
    unint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_13;
    }
    goto LABEL_118;
  }
  uint64_t v8 = *(void *)(v1 + 32);
  swift_retain();
LABEL_11:
  swift_bridgeObjectRelease();
  char v9 = *(unint64_t **)(v8 + 104);
  swift_retain();
  swift_release();
  unint64_t v1 = (unint64_t)v9;
  unint64_t active = ActiveEndpoint.synchronizationType.getter();
  swift_release();
  unint64_t v4 = *(void *)(v3 + 72);
  if (v4 >> 62) {
    goto LABEL_117;
  }
  unint64_t v10 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v10)
  {
LABEL_118:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_119;
  }
LABEL_13:
  unint64_t v45 = v5 + 32;
  uint64_t v46 = v5 & 0xFFFFFFFFFFFFFF8;
  uint64_t v11 = 1;
  uint64_t v47 = v6;
  unint64_t v48 = v5;
  while (1)
  {
    unint64_t v52 = v11;
    if ((v4 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_87;
      }
      uint64_t v12 = *(void *)(v4 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v12 + 104);
    swift_retain();
    swift_release();
    unint64_t v1 = IOUSBGetEndpointDirection(*(const IOUSBEndpointDescriptor **)(v13 + 16));
    swift_release();
    unint64_t v14 = *(void *)(v3 + 72);
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v15)
      {
LABEL_41:
        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v15) {
        goto LABEL_41;
      }
    }
    unsigned int v50 = v1;
    unint64_t v1 = 0;
    unint64_t v5 = v14 & 0xC000000000000001;
    char v16 = 1;
LABEL_20:
    char v51 = v16;
    unint64_t v17 = v1;
    do
    {
      if (v5)
      {
        uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v1 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_85;
        }
      }
      else
      {
        if (v17 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_86;
        }
        uint64_t v3 = *(void *)(v14 + 8 * v17 + 32);
        swift_retain();
        unint64_t v1 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          swift_bridgeObjectRetain_n();
          uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v6) {
            goto LABEL_92;
          }
          goto LABEL_3;
        }
      }
      unint64_t v4 = *(void *)(*(void *)(v3 + 104) + 16);
      swift_retain();
      int v18 = IOUSBGetEndpointSynchronizationType((const IOUSBEndpointDescriptor *)v4);
      if (v18)
      {
        int v19 = v18;
        swift_release();
        swift_release();
      }
      else
      {
        int v20 = IOUSBGetEndpointDirection((const IOUSBEndpointDescriptor *)v4);
        swift_release();
        swift_release();
        if (v20 == 1) {
          int v19 = 1;
        }
        else {
          int v19 = 3;
        }
      }
      if (v19 != active)
      {
        char v16 = 0;
        if (v1 != v15) {
          goto LABEL_20;
        }
        swift_bridgeObjectRelease();
        uint64_t v6 = v47;
        unint64_t v5 = v48;
        unint64_t v1 = v50;
LABEL_38:
        sub_10002E804(0xD00000000000002ALL, 0x80000001000E7A50, 0xD000000000000026, (void *)0x80000001000E7A80, 0xD000000000000028, 0x80000001000E68C0, 492);
        goto LABEL_42;
      }
      ++v17;
    }
    while (v1 != v15);
    swift_bridgeObjectRelease();
    uint64_t v6 = v47;
    unint64_t v5 = v48;
    unint64_t v1 = v50;
    if ((v51 & 1) == 0) {
      goto LABEL_38;
    }
LABEL_42:
    switch((char)active)
    {
      case 0:
        sub_10002E804(0xD000000000000039, 0x80000001000E7AD0, 0xD000000000000026, (void *)0x80000001000E7A80, 0xD000000000000028, 0x80000001000E68C0, 497);
        goto LABEL_44;
      case 1:
        swift_retain();
        if (v1 == 1)
        {
          unint64_t v1 = (unint64_t)&v56;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v21 = v56;
        }
        else
        {
          unint64_t v1 = (unint64_t)&v55;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v21 = v55;
        }
        goto LABEL_54;
      case 2:
        swift_retain();
        if (v1 == 1)
        {
          unint64_t v1 = (unint64_t)&v54;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v21 = v54;
        }
        else
        {
          unint64_t v1 = (unint64_t)&v53;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v21 = v53;
        }
        goto LABEL_54;
      case 3:
LABEL_44:
        swift_retain();
        if (v1 == 1)
        {
          unint64_t v1 = (unint64_t)&v58;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v21 = v58;
        }
        else
        {
          unint64_t v1 = (unint64_t)&v57;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v21 = v57;
        }
LABEL_54:
        if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        break;
      default:
        sub_10002E804(0xD00000000000001CLL, 0x80000001000E7AB0, 0xD000000000000026, (void *)0x80000001000E7A80, 0xD000000000000028, 0x80000001000E68C0, 532);
        break;
    }
    swift_release();
    if (v52 == v6) {
      break;
    }
    if (v49)
    {
      uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v11 = v52 + 1;
      if (__OFADD__(v52, 1)) {
        goto LABEL_88;
      }
    }
    else
    {
      if (v52 >= *(void *)(v46 + 16)) {
        goto LABEL_90;
      }
      uint64_t v3 = *(void *)(v45 + 8 * v52);
      swift_retain();
      uint64_t v11 = v52 + 1;
      if (__OFADD__(v52, 1)) {
        goto LABEL_88;
      }
    }
    unint64_t v1 = *(void *)(v3 + 72);
    if (v1 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v27) {
        goto LABEL_114;
      }
    }
    else
    {
      uint64_t v22 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v22) {
        goto LABEL_114;
      }
    }
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v23 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_89;
      }
      uint64_t v23 = *(void *)(v1 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(v23 + 104);
    swift_retain();
    swift_release();
    BOOL v25 = *(const IOUSBEndpointDescriptor **)(v24 + 16);
    unint64_t v26 = IOUSBGetEndpointSynchronizationType(v25);
    if (v26)
    {
      unint64_t active = v26;
      swift_release();
    }
    else
    {
      unint64_t v1 = IOUSBGetEndpointDirection(v25);
      swift_release();
      if (v1 == 1) {
        unint64_t active = 1;
      }
      else {
        unint64_t active = 3;
      }
    }
    unint64_t v4 = *(void *)(v3 + 72);
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v10) {
        goto LABEL_118;
      }
    }
    else
    {
      unint64_t v10 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v10) {
        goto LABEL_118;
      }
    }
  }
  swift_bridgeObjectRelease_n();
  unint64_t v10 = v56;
  if (!(v56 >> 62)) {
    goto LABEL_83;
  }
LABEL_93:
  swift_bridgeObjectRetain();
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v30 < 1) {
    goto LABEL_94;
  }
LABEL_84:
  sub_1000A1B14(v10);
  sub_1000A1B14(v55);
  sub_1000A1B14(v58);
  unint64_t v28 = swift_bridgeObjectRetain();
  sub_1000A1B14(v28);
  sub_1000A1B14(v57);
  unint64_t v29 = swift_bridgeObjectRetain();
LABEL_103:
  sub_1000A1B14(v29);
LABEL_104:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a1 = (unint64_t)_swiftEmptyArrayStorage;
  return _swiftEmptyArrayStorage;
}

void sub_1000D9F60(uint64_t a1, char a2)
{
  uint64_t v4 = v3;
  uint64_t v80 = type metadata accessor for Mirror();
  uint64_t v7 = __chkstk_darwin(v80);
  uint64_t v87 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  if (a2)
  {
    sub_10000CD54();
    swift_allocError();
    uint64_t v17 = 130;
    goto LABEL_7;
  }
  unint64_t v75 = v10;
  uint64_t v79 = (char *)&v69 - v9;
  swift_beginAccess();
  if (!*(void *)(v2 + 16)) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v76 = v2;
  uint64_t v77 = v4;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 232);
  swift_unknownObjectRetain();
  char v14 = v13(a1, ObjectType, v11);
  swift_unknownObjectRelease();
  uint64_t v15 = v76;
  if (v14 == 3)
  {
LABEL_5:
    sub_10000CD54();
    swift_allocError();
    uint64_t v17 = 131;
    goto LABEL_7;
  }
  unint64_t v74 = (unint64_t)"interruptSource()";
  sub_10002E804(0xD000000000000029, 0x80000001000E7B80, 0xD00000000000002CLL, (void *)0x80000001000E4BF0, 0xD000000000000028, 0x80000001000E68C0, 132);
  if (v14)
  {
    if (v14 == 1)
    {
      int v18 = (void *)0xEE00656369766544;
      uint64_t v19 = 0x206E776F6E6B6E55;
      *(void *)&long long v84 = 0;
      *((void *)&v84 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(36);
      swift_beginAccess();
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        unint64_t v21 = Strong;
        id v22 = [Strong boxName];

        if (v22)
        {
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          int v18 = v23;
        }
      }
      v24._countAndFlagsBits = v19;
      v24._object = v18;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 0xD000000000000022;
      v25._object = (void *)0x80000001000E7BE0;
      String.append(_:)(v25);
      unint64_t v70 = (unint64_t)"usbHostInterface";
      sub_10002E804(v84, *((uint64_t *)&v84 + 1), 0xD00000000000002CLL, (void *)0x80000001000E4BF0, 0xD000000000000028, v74 | 0x8000000000000000, 140);
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(v76 + 64);
      if (v26)
      {
        uint64_t v27 = *(char **)(v26 + 16);
        if (v27)
        {
          uint64_t v72 = &v85;
          ++v75;
          uint64_t v28 = swift_bridgeObjectRetain();
          uint64_t v29 = 32;
          unint64_t v73 = 0xD000000000000016;
          unsigned int v71 = "activeAlternateSetting";
          unint64_t v69 = 0x80000001000E3E90;
          uint64_t v78 = v28;
          while (1)
          {
            uint64_t v79 = v27;
            __int16 v30 = *(_WORD *)(v28 + v29);
            char v31 = *(unsigned char *)(v28 + v29 + 2);
            *((void *)&v85 + 1) = &type metadata for USBDescriptorControl;
            BYTE2(v84) = v31;
            LOWORD(v84) = v30;
            Mirror.init(reflecting:)();
            Mirror.children.getter();
            swift_getObjectType();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            uint64_t v32 = dispatch thunk of _AnyIndexBox._typeID.getter();
            swift_getObjectType();
            if (v32 != dispatch thunk of _AnyIndexBox._typeID.getter()) {
              break;
            }
            char v33 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
            swift_unknownObjectRelease();
            if (v33)
            {
              swift_unknownObjectRelease();
              long long v85 = 0u;
              long long v86 = 0u;
              long long v84 = 0u;
            }
            else
            {
              dispatch thunk of _AnyCollectionBox.subscript.getter();
              long long v84 = v81;
              long long v85 = v82;
              long long v86 = v83;
              swift_unknownObjectRelease();
            }
            swift_release();
            (*v75)(v87, v80);
            if (*((void *)&v86 + 1))
            {
              long long v34 = v84;
              sub_10001ABC4((uint64_t)v72);
              if (*((void *)&v34 + 1))
              {
                if (v34 == __PAIR128__(v69, v73)) {
                  goto LABEL_50;
                }
                char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v35) {
                  goto LABEL_51;
                }
              }
            }
            else
            {
              sub_10001A918((uint64_t)&v84, &qword_100127CD0);
            }
            v29 += 3;
            uint64_t v27 = v79 - 1;
            uint64_t v28 = v78;
            if (v79 == (char *)1) {
              goto LABEL_49;
            }
          }
          __break(1u);
LABEL_56:
          __break(1u);
          return;
        }
      }
      return;
    }
    unint64_t v55 = (void *)0xEE00656369766544;
    uint64_t v56 = 0x206E776F6E6B6E55;
    *(void *)&long long v84 = 0;
    *((void *)&v84 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    long long v81 = v84;
    swift_beginAccess();
    unint64_t v57 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v57)
    {
      unint64_t v58 = v57;
      id v59 = [v57 boxName];

      if (v59)
      {
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v55 = v60;
      }
    }
    v61._countAndFlagsBits = v56;
    v61._object = v55;
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._countAndFlagsBits = 0xD000000000000027;
    v62._object = (void *)0x80000001000E7BB0;
    String.append(_:)(v62);
    sub_10002E804(v81, *((uint64_t *)&v81 + 1), 0xD00000000000002CLL, (void *)0x80000001000E4BF0, 0xD000000000000028, v74 | 0x8000000000000000, 143);
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    uint64_t v17 = 144;
LABEL_7:
    *(unsigned char *)uint64_t v16 = 2;
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = 0xE000000000000000;
    *(void *)(v16 + 24) = 0xD00000000000002CLL;
    *(void *)(v16 + 32) = 0x80000001000E4BF0;
    *(void *)(v16 + 40) = 0xD000000000000028;
    *(void *)(v16 + 48) = 0x80000001000E68C0;
    *(void *)(v16 + 56) = v17;
    swift_willThrow();
    return;
  }
  double v36 = (void *)0xEE00656369766544;
  uint64_t v37 = 0x206E776F6E6B6E55;
  *(void *)&long long v84 = 0;
  *((void *)&v84 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_beginAccess();
  unint64_t v38 = (void *)swift_unknownObjectWeakLoadStrong();
  if (v38)
  {
    uint64_t v39 = v38;
    id v40 = [v38 boxName];

    if (v40)
    {
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      double v36 = v41;
    }
  }
  v42._countAndFlagsBits = v37;
  v42._object = v36;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 0xD000000000000022;
  v43._object = (void *)0x80000001000E7C10;
  String.append(_:)(v43);
  unint64_t v70 = (unint64_t)"usbHostInterface";
  sub_10002E804(v84, *((uint64_t *)&v84 + 1), 0xD00000000000002CLL, (void *)0x80000001000E4BF0, 0xD000000000000028, v74 | 0x8000000000000000, 137);
  swift_bridgeObjectRelease();
  uint64_t v44 = *(void *)(v15 + 64);
  if (v44)
  {
    unint64_t v45 = *(char **)(v44 + 16);
    if (v45)
    {
      uint64_t v72 = &v85;
      ++v75;
      uint64_t v46 = swift_bridgeObjectRetain();
      uint64_t v47 = 32;
      unint64_t v73 = 0xD000000000000016;
      unsigned int v71 = "Descriptors:audioProtocol:)";
      unint64_t v69 = 0x80000001000E3E70;
      uint64_t v78 = v46;
      while (1)
      {
        uint64_t v87 = v45;
        __int16 v48 = *(_WORD *)(v46 + v47);
        char v49 = *(unsigned char *)(v46 + v47 + 2);
        *((void *)&v85 + 1) = &type metadata for USBDescriptorControl;
        BYTE2(v84) = v49;
        LOWORD(v84) = v48;
        Mirror.init(reflecting:)();
        Mirror.children.getter();
        swift_getObjectType();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v50 = dispatch thunk of _AnyIndexBox._typeID.getter();
        swift_getObjectType();
        if (v50 != dispatch thunk of _AnyIndexBox._typeID.getter()) {
          goto LABEL_56;
        }
        char v51 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
        swift_unknownObjectRelease();
        if (v51)
        {
          swift_unknownObjectRelease();
          long long v85 = 0u;
          long long v86 = 0u;
          long long v84 = 0u;
        }
        else
        {
          dispatch thunk of _AnyCollectionBox.subscript.getter();
          long long v84 = v81;
          long long v85 = v82;
          long long v86 = v83;
          swift_unknownObjectRelease();
        }
        unint64_t v52 = v79;
        swift_release();
        (*v75)(v52, v80);
        if (*((void *)&v86 + 1))
        {
          long long v53 = v84;
          sub_10001ABC4((uint64_t)v72);
          if (*((void *)&v53 + 1))
          {
            if (v53 == __PAIR128__(v69, v73))
            {
LABEL_50:
              swift_bridgeObjectRelease();
LABEL_51:
              swift_bridgeObjectRelease();
              ActiveStreamingInterface.auaStream.getter();
              if (v63)
              {
                int v64 = v63;
                uint64_t v65 = swift_unknownObjectWeakLoadStrong();
                if (v65)
                {
                  unsigned int v66 = (void *)v65;
                  uint64_t v67 = swift_allocObject();
                  *(void *)(v67 + 16) = v66;
                  id v68 = v66;
                  AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(0xD00000000000002CLL, v70 | 0x8000000000000000, 0xD000000000000028, v74 | 0x8000000000000000, 154, (uint64_t)sub_1000DAD64, v67);

                  swift_release();
                }
              }
              return;
            }
            char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v54) {
              goto LABEL_51;
            }
          }
        }
        else
        {
          sub_10001A918((uint64_t)&v84, &qword_100127CD0);
        }
        v47 += 3;
        unint64_t v45 = v87 - 1;
        uint64_t v46 = v78;
        if (v87 == (char *)1)
        {
LABEL_49:
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
  }
}

uint64_t sub_1000DAAB4(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1000DAB14()
{
  unint64_t result = qword_10012A9C8;
  if (!qword_10012A9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012A9C8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AUAStreamingInterfaceControlSelector(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DAC34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AUAStreamingInterfaceControlSelector()
{
  return &type metadata for AUAStreamingInterfaceControlSelector;
}

uint64_t type metadata accessor for ActiveStreamingInterface()
{
  return self;
}

uint64_t type metadata accessor for ActiveStreamingAltInterface()
{
  return self;
}

uint64_t type metadata accessor for StreamingInterfaceUtil()
{
  return self;
}

unint64_t sub_1000DACD8()
{
  unint64_t result = qword_10012ACF8;
  if (!qword_10012ACF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012ACF8);
  }
  return result;
}

uint64_t sub_1000DAD2C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000DAD64()
{
}

uint64_t sub_1000DAD6C()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_10001AC94(v0, qword_10012B2B0);
  sub_10000AD60(v0, (uint64_t)qword_10012B2B0);
  return OSSignposter.init(subsystem:category:)();
}

id sub_1000DADF0()
{
  unint64_t v1 = *(void **)(v0 + 24);
  id v5 = 0;
  if ([v1 abortWithOption:1 error:&v5])
  {
    id v2 = v5;
  }
  else
  {
    id v3 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10002E81C(0xD000000000000011, 0x80000001000E7F20, 0x292874726F6261, (void *)0xE700000000000000, 0xD00000000000001ELL, 0x80000001000E7DC0, 35);
    swift_errorRelease();
  }
  return [*(id *)(v0 + 16) wait];
}

id sub_1000DAEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  char v14 = *(void **)(v7 + 16);
  id result = [v14 increment];
  if (result)
  {
    unint64_t v21 = *(void **)(v7 + 24);
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = a6;
    v16[3] = a7;
    unsigned char v16[4] = v7;
    aBlock[4] = sub_1000DD93C;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000DB0EC;
    aBlock[3] = &unk_10011CC30;
    unsigned int v20 = a5;
    uint64_t v17 = _Block_copy(aBlock);
    sub_10001A060(a6);
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    unsigned int v18 = [v21 enqueueIORequestWithData:a1 transactionList:a2 transactionListCount:a3 firstFrameNumber:a4 options:v20 error:aBlock completionHandler:v17];
    _Block_release(v17);
    id result = aBlock[0];
    if (!v18)
    {
      uint64_t v19 = result;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      [v14 decrement];
      return (id)swift_willThrow();
    }
  }
  return result;
}

id sub_1000DB0D0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  return sub_1000DB2A0(a1, a2, a3, a4, a5, 50545, (void (*)(void, uint64_t))sub_1000DE5A4);
}

uint64_t sub_1000DB0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DB33C(a1, a2, a3);
}

id sub_1000DB0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void **)(v3 + 16);
  id result = [v7 increment];
  if (result)
  {
    uint64_t v9 = *(void **)(v3 + 24);
    unint64_t v10 = (void *)swift_allocObject();
    _OWORD v10[2] = a2;
    v10[3] = a3;
    v10[4] = v3;
    aBlock[4] = sub_1000DD8A0;
    aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000DB334;
    aBlock[3] = &unk_10011CBE0;
    uint64_t v11 = _Block_copy(aBlock);
    sub_10001A060(a2);
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    unsigned int v12 = [v9 enqueueIORequestWithData:a1 completionTimeout:aBlock error:v11 completionHandler:0.0];
    _Block_release(v11);
    id result = aBlock[0];
    if (!v12)
    {
      uint64_t v13 = result;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      [v7 decrement];
      return (id)swift_willThrow();
    }
  }
  return result;
}

id sub_1000DB2A0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void, uint64_t))
{
  if (a3)
  {
    swift_retain();
    a3(a1, a2);
    a7(a3, a4);
  }
  uint64_t v13 = *(void **)(a5 + 16);

  return [v13 decrement];
}

uint64_t sub_1000DB334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DB33C(a1, a2, a3);
}

uint64_t sub_1000DB33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t sub_1000DB3A4()
{
  return swift_deallocClassInstance();
}

uint64_t ActiveEndpoint.staticEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DB3F0(v1 + 16, a1);
}

uint64_t sub_1000DB3F0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ActiveEndpoint.transfersPerMS.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t ActiveEndpoint.MSPerTransfer.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t ActiveEndpoint.direction.getter()
{
  return IOUSBGetEndpointDirection(*(const IOUSBEndpointDescriptor **)(v0 + 16));
}

uint64_t ActiveEndpoint.maxTransferSize.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t ActiveEndpoint.transferType.getter()
{
  return IOUSBGetEndpointType(*(const IOUSBEndpointDescriptor **)(v0 + 16));
}

uint64_t ActiveEndpoint.usageType.getter()
{
  uint64_t v1 = *(const IOUSBEndpointDescriptor **)(v0 + 16);
  uint64_t result = IOUSBGetEndpointUsageType(v1);
  if (!result) {
    return v1->wMaxPacketSize < 9u;
  }
  return result;
}

uint64_t ActiveEndpoint.synchronizationType.getter()
{
  uint64_t v1 = *(const IOUSBEndpointDescriptor **)(v0 + 16);
  uint64_t result = IOUSBGetEndpointSynchronizationType(v1);
  if (!result)
  {
    if (IOUSBGetEndpointDirection(v1) == 1) {
      return 1;
    }
    else {
      return 3;
    }
  }
  return result;
}

uint64_t ActiveEndpoint.address.getter()
{
  return IOUSBGetEndpointAddress(*(const IOUSBEndpointDescriptor **)(v0 + 16));
}

id ActiveEndpoint.usbDevice.getter()
{
  return *(id *)(v0 + 128);
}

uint64_t ActiveEndpoint.lockDelay.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

void sub_1000DB544(uint64_t a1, char *a2, unsigned __int8 a3)
{
  int v6 = a3;
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 64) = v8;
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 32) = v7;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = a2;
  uint64_t v9 = OBJC_IVAR____TtC9AUASDCore9USBDevice_speed;
  uint32_t v10 = *(_DWORD *)&a2[OBJC_IVAR____TtC9AUASDCore9USBDevice_speed];
  uint64_t v11 = *(const IOUSBEndpointDescriptor **)a1;
  unsigned int v12 = *(const IOUSBSuperSpeedEndpointCompanionDescriptor **)(a1 + 8);
  uint64_t v13 = *(const IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor **)(a1 + 16);
  sub_10005FDF4(a1);
  char v14 = a2;
  *(void *)(v3 + 112) = IOUSBGetEndpointBurstSize(v10, v11, v12, v13);
  if (!v6)
  {

    sub_10005FE3C(a1);
    if (*(unsigned char *)(v3 + 41) == 1)
    {
      *(int64x2_t *)(v3 + 96) = vdupq_n_s64(1uLL);
      return;
    }
    unsigned int v19 = *(unsigned __int8 *)(v3 + 40);
    if (v19 >= 0x40) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = 1 << v19;
    }
    goto LABEL_17;
  }
  unsigned int bInterval = v11->bInterval;
  sub_10005FE3C(a1);
  int v16 = *(_DWORD *)&a2[v9];
  if ((v16 - 3) >= 4)
  {
    if (v16 != 1)
    {
      sub_10002E804(0xD000000000000021, 0x80000001000E7F90, 0xD000000000000032, (void *)0x80000001000E7FC0, 0xD00000000000001ELL, 0x80000001000E7DC0, 155);

      *(void *)(v3 + 96) = 0;
      *(void *)(v3 + 104) = 0;
      return;
    }

    char v17 = bInterval - 1;
    if (((bInterval - 1) & 0xFFFFFF00) == 0)
    {
LABEL_9:
      if ((v17 & 0xC0) != 0) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = 1 << v17;
      }
LABEL_17:
      *(void *)(v3 + 96) = 1;
      *(void *)(v3 + 104) = v18;
      return;
    }
  }
  else
  {

    if (bInterval >= 5)
    {
      char v17 = bInterval - 4;
      goto LABEL_9;
    }
    *(void *)(v3 + 104) = 1;
    if (((bInterval - 1) & 0xFFFFFF00) == 0)
    {
      *(void *)(v3 + 96) = 8uLL >> (bInterval - 1);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_1000DB718(void *a1, char a2)
{
  unsigned int v5 = IOUSBGetEndpointAddress(*(const IOUSBEndpointDescriptor **)(v2 + 16));
  id v26 = 0;
  id v6 = [a1 copyPipeWithAddress:v5 error:&v26];
  id v7 = v26;
  if (v6)
  {
    long long v8 = v6;
    type metadata accessor for AbortSafeUSBHostPipe();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 24) = v8;
    id v10 = objc_allocWithZone((Class)AbortWaitLock);
    id v11 = v7;
    id v12 = v8;
    *(void *)(v9 + 16) = [v10 init];
    [v12 idleTimeout];
    *(void *)(v2 + 120) = v9;
    swift_release();
    if ((a2 & 1) == 0) {
      goto LABEL_7;
    }
    uint64_t v13 = *(void *)(*(void *)(v2 + 128) + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (!v13 || !sub_10001925C(17, v13)) {
      goto LABEL_7;
    }
    id v26 = 0;
    if ([v12 setIdleTimeout:&v26 error:2000.0])
    {
      id v14 = v26;
LABEL_7:

      return;
    }
    id v16 = v26;
    uint64_t v17 = _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v29 = v17;
    swift_errorRetain();
    sub_10000AC7C(&qword_100127400);
    sub_10001D098();
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      uint64_t v18 = v28;
      id v26 = 0;
      uint64_t v27 = 0xE000000000000000;
      _StringGuts.grow(_:)(54);
      v19._countAndFlagsBits = 0x20726F727245;
      v19._object = (void *)0xE600000000000000;
      String.append(_:)(v19);
      id v20 = [v18 description];
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;

      v24._countAndFlagsBits = v21;
      v24._object = v23;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 0xD00000000000002ELL;
      v25._object = (void *)0x80000001000E7EC0;
      String.append(_:)(v25);
      sub_10002E81C((uint64_t)v26, v27, 0xD000000000000019, (void *)0x80000001000E7EF0, 0xD00000000000001ELL, 0x80000001000E7DC0, 173);

      swift_bridgeObjectRelease();
    }

    swift_errorRelease();
  }
  else
  {
    id v15 = v26;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t ActiveEndpoint.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v0;
}

uint64_t ActiveEndpoint.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

Swift::UInt *sub_1000DBAD4(unint64_t a1)
{
  uint64_t v2 = v1;
  v1[2] = 0;
  if (qword_100126940 != -1) {
    goto LABEL_33;
  }
  while (1)
  {
    uint64_t v4 = type metadata accessor for OSSignposter();
    sub_10000AD60(v4, (uint64_t)qword_10012B2B0);
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    *(Swift::UInt *)((char *)v2 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_lastSamplingRateChangedTimestamp) = 0;
    unsigned int v5 = &qword_10012A000;
    id v6 = (char *)v2 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_cachedSamplingRate;
    *(void *)id v6 = 0;
    v6[8] = 1;
    *(Swift::UInt *)((char *)v2 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_altSettings) = a1;
    long long v34 = &_swiftEmptySetSingleton;
    if (!(a1 >> 62))
    {
      uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v7) {
        break;
      }
      goto LABEL_4;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (!v7) {
      break;
    }
LABEL_4:
    unint64_t v8 = 0;
    unint64_t v31 = a1;
    unint64_t v32 = a1 & 0xC000000000000001;
    uint64_t v29 = a1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v30 = v7;
    uint64_t v27 = v2;
    unint64_t v28 = a1 + 32;
    while (v32)
    {
      uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v10 = __OFADD__(v8++, 1);
      if (v10) {
        goto LABEL_31;
      }
LABEL_13:
      unint64_t v11 = *(void *)(v9 + 96);
      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        if (v12)
        {
LABEL_15:
          uint64_t v2 = (Swift::UInt *)(v11 & 0xC000000000000001);
          a1 = 4;
          while (1)
          {
            unint64_t v13 = a1 - 4;
            if (v2)
            {
              uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              unint64_t v15 = a1 - 3;
              if (__OFADD__(v13, 1)) {
                goto LABEL_30;
              }
            }
            else
            {
              uint64_t v14 = *(void *)(v11 + 8 * a1);
              swift_retain();
              unint64_t v15 = a1 - 3;
              if (__OFADD__(v13, 1))
              {
LABEL_30:
                __break(1u);
                goto LABEL_31;
              }
            }
            uint64_t v16 = *(void *)(v14 + 80);
            if (v16)
            {
              uint64_t v17 = *(void *)(v16 + 16);
              if (v17) {
                break;
              }
            }
            swift_release();
            ++a1;
            if (v15 == v12)
            {
              swift_release();
              swift_bridgeObjectRelease();
              uint64_t v7 = v30;
              a1 = v31;
              goto LABEL_6;
            }
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v2 = (Swift::UInt *)(v16 + 48);
          a1 = v31;
          do
          {
            Swift::UInt v18 = *(v2 - 2);
            Swift::UInt v19 = *(v2 - 1);
            Swift::UInt v20 = *v2;
            v2 += 3;
            sub_10005AF78((Swift::UInt *)v33, v18, v19, v20);
            --v17;
          }
          while (v17);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v7 = v30;
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v12) {
          goto LABEL_15;
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
LABEL_6:
      if (v8 == v7)
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = v34;
        uint64_t v2 = v27;
        unsigned int v5 = &qword_10012A000;
        goto LABEL_36;
      }
    }
    if (v8 >= *(void *)(v29 + 16)) {
      goto LABEL_32;
    }
    uint64_t v9 = *(void *)(v28 + 8 * v8);
    swift_retain();
    BOOL v10 = __OFADD__(v8++, 1);
    if (!v10) {
      goto LABEL_13;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once();
  }
  swift_bridgeObjectRelease();
  uint64_t v21 = &_swiftEmptySetSingleton;
LABEL_36:
  swift_bridgeObjectRetain_n();
  id v22 = sub_10005AB3C((uint64_t)v21);
  swift_bridgeObjectRelease();
  v33[0] = (uint64_t)v22;
  sub_1000DD974(v33);
  swift_bridgeObjectRelease_n();
  uint64_t v23 = v33[0];
  uint64_t v24 = sub_10002755C(0, v33[0]);
  Swift::String v25 = (char *)v2 + v5[480];
  *(void *)Swift::String v25 = v24;
  v25[8] = 0;
  v2[2] = v23;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1000DBE4C(uint64_t ObjectType, int a2)
{
  unint64_t v3 = v2;
  LODWORD(v4) = a2;
  unint64_t v6 = 0xD00000000000001ELL;
  uint64_t v7 = 0x6C706D6153727563;
  uint64_t v92 = type metadata accessor for Mirror();
  unint64_t v8 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  BOOL v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OSSignpostID();
  unint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v17 = (unint64_t)"AUASDCore/ActiveEndpoint.swift";
  if (v4)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 0xE000000000000000;
    *(void *)(v18 + 24) = 0x6C706D6153727563;
    *(void *)(v18 + 32) = 0xEF65746152676E69;
    *(void *)(v18 + 40) = 0xD00000000000001ELL;
    *(void *)(v18 + 48) = 0x80000001000E7DC0;
    *(void *)(v18 + 56) = 232;
    swift_willThrow();
    unint64_t v19 = 0;
    goto LABEL_45;
  }
  uint64_t v20 = *(void *)(v3 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_altSettings);
  uint64_t v91 = v10;
  uint64_t v83 = v14;
  long long v82 = (char *)&v59 - v15;
  long long v81 = v16;
  if ((v20 & 0xC000000000000001) != 0)
  {
LABEL_52:
    unint64_t v6 = ObjectType;
    BOOL v10 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    unint64_t v6 = ObjectType;
    BOOL v10 = *(char **)(v20 + 32);
    swift_retain();
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong
    || (uint64_t v22 = Strong,
        swift_beginAccess(),
        uint64_t v23 = *(void *)(v22 + 16),
        uint64_t v75 = *(void *)(v22 + 24),
        swift_unknownObjectRetain(),
        swift_release(),
        (uint64_t v80 = v23) == 0))
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v53 = 13;
    *(void *)(v53 + 8) = 0;
    *(void *)(v53 + 16) = 0xE000000000000000;
    *(void *)(v53 + 24) = v7;
    *(void *)(v53 + 32) = 0xEF65746152676E69;
    *(void *)(v53 + 40) = 0xD00000000000001ELL;
    *(void *)(v53 + 48) = 0x80000001000E7DC0;
    *(void *)(v53 + 56) = 235;
    swift_willThrow();
    swift_release();
    uint64_t ObjectType = v6;
    unint64_t v19 = v6;
    goto LABEL_45;
  }
  unint64_t v17 = *((void *)v10 + 12);
  if (!(v17 >> 62))
  {
    uint64_t v24 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_10;
  }
LABEL_55:
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
LABEL_10:
  uint64_t ObjectType = v6;
  unint64_t v6 = 0xD00000000000001ELL;
  if (!v24)
  {
LABEL_47:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_46;
  }
  uint64_t v65 = 0;
  uint64_t v74 = v3 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_signpostID;
  uint64_t v77 = v17 & 0xFFFFFFFFFFFFFF8;
  uint64_t v76 = (const char *)(v17 + 32);
  unint64_t v73 = (void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v72 = (void (**)(char *, uint64_t))(v12 + 8);
  unint64_t v12 = v17 & 0xC000000000000001;
  Swift::String v62 = (char *)&v96 + 8;
  long long v86 = &v97;
  unint64_t v89 = (void (**)(char *, uint64_t))(v8 + 8);
  unint64_t v8 = 0;
  *(void *)&long long v25 = 134217984;
  long long v61 = v25;
  unint64_t v71 = 0x80000001000E7E50;
  unint64_t v63 = (unint64_t)"MultiClock";
  uint64_t v70 = 0x80000001000E7DC0;
  long long v85 = "iting sample rate ";
  unint64_t v84 = 0x80000001000E7E80;
  int v69 = v4;
  unint64_t v79 = v3;
  uint64_t v67 = ObjectType;
  unsigned int v66 = v10;
  id v68 = (const char *)v17;
  uint64_t v60 = v24;
  unint64_t v59 = v17 & 0xC000000000000001;
  while (1)
  {
    if (v12)
    {
      uint64_t v26 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v27 = __OFADD__(v8++, 1);
      if (v27) {
        goto LABEL_51;
      }
    }
    else
    {
      if (v8 >= *(void *)(v77 + 16)) {
        goto LABEL_54;
      }
      uint64_t v26 = swift_retain();
      BOOL v27 = __OFADD__(v8++, 1);
      if (v27)
      {
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
    }
    uint64_t v28 = *(void *)(v26 + 72);
    if (v28)
    {
      uint64_t v29 = *(void *)(v26 + 80);
      if (v29)
      {
        if (*(void *)(v29 + 16)) {
          break;
        }
      }
    }
LABEL_12:
    swift_release();
    if (v8 == v24) {
      goto LABEL_47;
    }
  }
  uint64_t v78 = v26;
  unint64_t v64 = v8;
  uint64_t v30 = qword_100126940;
  uint64_t v90 = v28;
  swift_bridgeObjectRetain();
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for OSSignposter();
  sub_10000AD60(v31, (uint64_t)qword_10012B2B0);
  unint64_t v32 = *v73;
  char v33 = v82;
  uint64_t v34 = v83;
  (*v73)(v82, v74, v83);
  char v35 = OSSignposter.logHandle.getter();
  int v88 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    double v36 = v81;
    v32(v81, (uint64_t)v33, v34);
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = v61;
    *(void *)&long long v96 = ObjectType;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_signpost_id_t v38 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, (os_signpost_type_t)v88, v38, "EndpointClock_setCurSampleRate", "samplingRate %lu", v37, 0xCu);
    swift_slowDealloc();

    uint64_t v39 = *v72;
    (*v72)(v33, v34);
    v39(v36, v34);
  }
  else
  {

    (*v72)(v33, v34);
  }
  unint64_t v3 = v79;
  *(void *)&long long v96 = 0;
  *((void *)&v96 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  *(void *)&long long v96 = 0xD000000000000022;
  *((void *)&v96 + 1) = v71;
  *(void *)&long long v93 = ObjectType;
  v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  sub_10002E804(v96, *((uint64_t *)&v96 + 1), 0x6C706D6153727563, (void *)0xEF65746152676E69, 0xD00000000000001ELL, v70, 241);
  swift_bridgeObjectRelease();
  unint64_t v12 = *(void *)(v90 + 16);
  if (!v12)
  {
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v54 = 13;
    *(void *)(v54 + 8) = 0;
    *(void *)(v54 + 16) = 0xE000000000000000;
    *(void *)(v54 + 24) = v7;
    *(void *)(v54 + 32) = 0xEF65746152676E69;
    unint64_t v55 = v63 | 0x8000000000000000;
    *(void *)(v54 + 40) = 0xD00000000000001ELL;
    *(void *)(v54 + 48) = v55;
    *(void *)(v54 + 56) = 243;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    unint64_t v19 = ObjectType;
    LOBYTE(v4) = v69;
    goto LABEL_45;
  }
  swift_bridgeObjectRetain();
  uint64_t v41 = 32;
  while (1)
  {
    int v42 = *(unsigned __int8 *)(v90 + v41 + 2);
    int v43 = *(unsigned __int16 *)(v90 + v41);
    *((void *)&v97 + 1) = &type metadata for USBDescriptorControl;
    int v88 = v42;
    BYTE2(v96) = v42;
    int v87 = v43;
    LOWORD(v96) = v43;
    Mirror.init(reflecting:)();
    uint64_t v7 = Mirror.children.getter();
    uint64_t v4 = *(void *)(v7 + 16);
    unint64_t v3 = *(void *)(v7 + 32);
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v44 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    unint64_t v8 = v3;
    if (v44 != dispatch thunk of _AnyIndexBox._typeID.getter())
    {
      __break(1u);
      goto LABEL_51;
    }
    char v45 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v45)
    {
      swift_unknownObjectRelease();
      long long v97 = 0u;
      long long v98 = 0u;
      long long v96 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v96 = v93;
      long long v97 = v94;
      long long v98 = v95;
      swift_unknownObjectRelease();
    }
    swift_release();
    (*v89)(v91, v92);
    if (!*((void *)&v98 + 1))
    {
      sub_100062BB0((uint64_t)&v96);
      uint64_t v7 = 0x6C706D6153727563;
      goto LABEL_30;
    }
    long long v46 = v96;
    sub_10001ABC4((uint64_t)v86);
    uint64_t v7 = 0x6C706D6153727563;
    if (!*((void *)&v46 + 1)) {
      goto LABEL_30;
    }
    if (v46 == __PAIR128__(v84, 0xD000000000000013)) {
      break;
    }
    char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v47) {
      goto LABEL_40;
    }
LABEL_30:
    v41 += 3;
    if (!--v12)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v3 = v79;
      uint64_t ObjectType = v67;
      goto LABEL_44;
    }
  }
  swift_bridgeObjectRelease();
LABEL_40:
  int v48 = v87 | (v88 << 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v49 = swift_getObjectType();
  uint8_t v50 = IOUSBGetEndpointAddress(*(const IOUSBEndpointDescriptor **)(v78 + 16));
  int v51 = v48 & 0xFFFFFF;
  uint64_t ObjectType = v67;
  uint64_t v52 = v65;
  sub_1000349A0(v51, v50, v67, v49, v75);
  LODWORD(v4) = v69;
  unint64_t v3 = v79;
  unint64_t v6 = 0xD00000000000001ELL;
  BOOL v10 = v66;
  uint64_t v65 = v52;
  unint64_t v17 = (unint64_t)v68;
  if (!v52)
  {
    uint64_t v24 = v60;
    unint64_t v8 = v64;
    unint64_t v12 = v59;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  unint64_t v19 = ObjectType;
LABEL_45:
  *(void *)&long long v96 = 0;
  *((void *)&v96 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  *(void *)&long long v96 = 0xD000000000000028;
  *((void *)&v96 + 1) = 0x80000001000E7E20;
  *(void *)&long long v93 = v19;
  v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  sub_10002E81C(v96, *((uint64_t *)&v96 + 1), 0x6C706D6153727563, (void *)0xEF65746152676E69, 0xD00000000000001ELL, 0x80000001000E7DC0, 250);
  swift_bridgeObjectRelease();
  swift_errorRelease();
LABEL_46:
  uint64_t result = mach_absolute_time();
  *(void *)(v3 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_lastSamplingRateChangedTimestamp) = result;
  unint64_t v58 = v3 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_cachedSamplingRate;
  *(void *)unint64_t v58 = ObjectType;
  *(unsigned char *)(v58 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000DCB20(unint64_t a1)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  BOOL v10 = (char *)v24 - v9;
  uint64_t result = mach_absolute_time();
  unint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_lastSamplingRateChangedTimestamp);
  unint64_t v13 = result - v12;
  if (result < v12)
  {
    __break(1u);
  }
  else if (qword_100126948 == -1)
  {
    goto LABEL_3;
  }
  uint64_t result = swift_once();
LABEL_3:
  if (qword_10012B2D0 != HIDWORD(qword_10012B2D0))
  {
    if (!is_mul_ok(v13, qword_10012B2D0))
    {
      __break(1u);
      goto LABEL_18;
    }
    if (!HIDWORD(qword_10012B2D0))
    {
      __break(1u);
      goto LABEL_20;
    }
    unint64_t v13 = v13 * qword_10012B2D0 / HIDWORD(qword_10012B2D0);
  }
  BOOL v14 = a1 > v13 / 0x3E8;
  a1 -= v13 / 0x3E8;
  if (!v14) {
    return result;
  }
  if (HIDWORD(a1))
  {
LABEL_20:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v24[1] = v2;
  if (qword_100126940 != -1) {
LABEL_18:
  }
    swift_once();
  uint64_t v15 = type metadata accessor for OSSignposter();
  sub_10000AD60(v15, (uint64_t)qword_10012B2B0);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16(v10, v1 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_signpostID, v4);
  unint64_t v17 = OSSignposter.logHandle.getter();
  int v27 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    v16(v8, (uint64_t)v10, v4);
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 67109120;
    LODWORD(v25) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, (os_signpost_type_t)v27, v19, "EndpointClock_finalizeClock", "delay %u us", v18, 8u);
    swift_slowDealloc();

    uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v10, v4);
    v20(v8, v4);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  v21._countAndFlagsBits = 0x676E6979616C6544;
  v21._object = (void *)0xE900000000000020;
  String.append(_:)(v21);
  int v28 = a1;
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0xD00000000000002ALL;
  v23._object = (void *)0x80000001000E2930;
  String.append(_:)(v23);
  sub_10002E804(v25, v26, 0xD000000000000016, (void *)0x80000001000E29A0, 0xD00000000000001ELL, 0x80000001000E7DC0, 269);
  swift_bridgeObjectRelease();
  return usleep(a1);
}

uint64_t sub_1000DCF60()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_signpostID;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000DD018()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_cachedSamplingRate);
}

uint64_t sub_1000DD030(uint64_t a1, char a2)
{
  return sub_1000DBE4C(a1, a2 & 1);
}

uint64_t (*sub_1000DD038(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_cachedSamplingRate + 8);
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_cachedSamplingRate);
  *(unsigned char *)(a1 + 8) = v2;
  return sub_1000DD078;
}

uint64_t sub_1000DD078(uint64_t a1)
{
  return sub_1000DBE4C(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000DD0A8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000DD0B0(unint64_t a1)
{
  return sub_1000DCB20(a1);
}

void sub_1000DD0C8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_cachedSamplingRate;
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t sub_1000DD0E4(uint64_t result, char a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t v6 = a2 & 1;
    swift_bridgeObjectRetain();
    uint64_t v7 = (uint64_t *)(v3 + 40);
    do
    {
      uint64_t v8 = *v7;
      uint64_t ObjectType = swift_getObjectType();
      BOOL v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24);
      swift_unknownObjectRetain();
      v10(v5, v6, ObjectType, v8);
      swift_unknownObjectRelease();
      v7 += 2;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000DD1C0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  swift_unknownObjectRetain();
  uint64_t v5 = v4(ObjectType, v2);
  swift_unknownObjectRelease();
  return v5;
}

void sub_1000DD250()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = (uint64_t *)(v1 + 40);
    do
    {
      uint64_t v4 = *v3;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 88);
      swift_unknownObjectRetain();
      v6(ObjectType, v4);
      swift_unknownObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000DD310()
{
  uint64_t v1 = &_swiftEmptySetSingleton;
  unint64_t v17 = &_swiftEmptySetSingleton;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v5 = 0;
    while (v5 < *(void *)(v2 + 16))
    {
      uint64_t v6 = *(void *)(v2 + 32 + 16 * v5 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 40);
      swift_unknownObjectRetain();
      uint64_t v9 = v8(ObjectType, v6);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 16);
        if (v10)
        {
          uint64_t v11 = (Swift::UInt *)(v9 + 48);
          do
          {
            Swift::UInt v12 = *(v11 - 2);
            Swift::UInt v13 = *(v11 - 1);
            Swift::UInt v14 = *v11;
            v11 += 3;
            sub_10005AF78(v16, v12, v13, v14);
            --v10;
          }
          while (v10);
        }
        swift_unknownObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t result = swift_unknownObjectRelease();
      }
      if (++v5 == v3)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v17;
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    if (v1[2])
    {
      uint64_t v15 = sub_10005AB3C((uint64_t)v1);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    return (uint64_t)v15;
  }
  return result;
}

uint64_t sub_1000DD460(uint64_t a1)
{
  uint64_t result = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    for (uint64_t i = (uint64_t *)(swift_bridgeObjectRetain() + 40); ; i += 2)
    {
      uint64_t v7 = *i;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 72);
      swift_unknownObjectRetain();
      v9(a1, ObjectType, v7);
      if (v2) {
        break;
      }
      swift_unknownObjectRelease();
      if (!--v5) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000DD534(uint64_t a1)
{
  uint64_t result = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    for (uint64_t i = (uint64_t *)(swift_bridgeObjectRetain() + 40); ; i += 2)
    {
      uint64_t v7 = *i;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 80);
      swift_unknownObjectRetain();
      v9(a1, ObjectType, v7);
      if (v2) {
        break;
      }
      swift_unknownObjectRelease();
      if (!--v5) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000DD608()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000DD640()
{
  return sub_1000DD1C0();
}

uint64_t sub_1000DD65C(uint64_t a1, char a2)
{
  return sub_1000DD0E4(a1, a2 & 1);
}

uint64_t (*sub_1000DD664(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = sub_1000DD1C0();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return sub_1000DD6B4;
}

uint64_t sub_1000DD6B4(uint64_t a1)
{
  return sub_1000DD0E4(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_1000DD6E8(uint64_t a1)
{
  return sub_1000DD460(a1);
}

uint64_t sub_1000DD700(uint64_t a1)
{
  return sub_1000DD534(a1);
}

uint64_t type metadata accessor for AbortSafeUSBHostPipe()
{
  return self;
}

uint64_t type metadata accessor for ActiveEndpoint()
{
  return self;
}

uint64_t sub_1000DD764()
{
  return type metadata accessor for EndpointClock();
}

uint64_t type metadata accessor for EndpointClock()
{
  uint64_t result = qword_10012AF30;
  if (!qword_10012AF30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000DD7B8()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MultiClock()
{
  return self;
}

id sub_1000DD8A0(uint64_t a1, uint64_t a2)
{
  return sub_1000DB2A0(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), 21669, (void (*)(void, uint64_t))sub_10001AA54);
}

uint64_t sub_1000DD8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000DD8E8()
{
  return swift_release();
}

uint64_t sub_1000DD8F4()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_1000DD93C(uint64_t a1, uint64_t a2)
{
  return sub_1000DB2A0(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), 50545, (void (*)(void, uint64_t))sub_1000DE5A4);
}

Swift::Int sub_1000DD974(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000DE590(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1000DD9E0(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000DD9E0(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v87 = 0;
      uint64_t v88 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unint64_t v90 = *(void *)(v88 + 24 * i);
        uint64_t v91 = v87;
        do
        {
          uint64_t v92 = v88 + v91;
          if (v90 >= *(void *)(v88 + v91)) {
            break;
          }
          if (!v88) {
            goto LABEL_140;
          }
          uint64_t v93 = v88 + v91;
          long long v94 = *(_OWORD *)(v88 + v91 + 32);
          *(_OWORD *)(v88 + v91 + 24) = *(_OWORD *)v92;
          *(void *)(v88 + v91 + 40) = *(void *)(v92 + 16);
          *(void *)uint64_t v93 = v90;
          *(_OWORD *)(v93 + 8) = v94;
          v91 -= 24;
        }
        while (v91 != -24);
        v87 += 24;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v6 = result;
  uint64_t v104 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      Swift::UInt v12 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      long long v95 = v12;
      unint64_t v106 = v9;
      if (v13 >= 2)
      {
        uint64_t v96 = *v104;
        do
        {
          unint64_t v97 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v96) {
            goto LABEL_144;
          }
          long long v98 = v95;
          uint64_t v99 = *(void *)&v95[16 * v97 + 32];
          uint64_t v100 = *(void *)&v95[16 * v13 + 24];
          sub_1000DE0F8((char *)(v96 + 24 * v99), (char *)(v96 + 24 * *(void *)&v95[16 * v13 + 16]), v96 + 24 * v100, __dst);
          if (v1) {
            break;
          }
          if (v100 < v99) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v98 = sub_1000DE57C((uint64_t)v98);
          }
          if (v97 >= *((void *)v98 + 2)) {
            goto LABEL_133;
          }
          uint64_t v101 = &v98[16 * v97 + 32];
          *(void *)uint64_t v101 = v99;
          *((void *)v101 + 1) = v100;
          unint64_t v102 = *((void *)v98 + 2);
          if (v13 > v102) {
            goto LABEL_134;
          }
          memmove(&v98[16 * v13 + 16], &v98[16 * v13 + 32], 16 * (v102 - v13));
          long long v95 = v98;
          *((void *)v98 + 2) = v102 - 1;
          unint64_t v13 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v106[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v106 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    unint64_t v106 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v105 = *a1 + 48;
  uint64_t v103 = *a1 - 24;
  Swift::UInt v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v107 = v6;
  Swift::Int v108 = v3;
  uint64_t v109 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      unint64_t v15 = *(void *)(v11 + 24 * v10);
      unint64_t v16 = *(void *)(v11 + 24 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        unint64_t v17 = (unint64_t *)(v105 + 24 * v14);
        unint64_t v18 = v15;
        while (1)
        {
          unint64_t v20 = *v17;
          v17 += 3;
          unint64_t v19 = v20;
          if (v15 < v16 == v20 >= v18) {
            break;
          }
          ++v10;
          unint64_t v18 = v19;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          uint64_t v21 = 24 * v10;
          uint64_t v22 = 24 * v14;
          Swift::Int v23 = v10;
          Swift::Int v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = v11 + v22;
              uint64_t v26 = v11 + v21;
              uint64_t v27 = *(void *)(v11 + v22 + 16);
              long long v28 = *(_OWORD *)(v11 + v22);
              uint64_t v29 = *(void *)(v11 + v21 - 8);
              *(_OWORD *)uint64_t v25 = *(_OWORD *)(v11 + v21 - 24);
              *(void *)(v25 + 16) = v29;
              *(_OWORD *)(v26 - 24) = v28;
              *(void *)(v26 - 8) = v27;
            }
            ++v24;
            v21 -= 24;
            v22 += 24;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v30 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v30 >= v3) {
      Swift::Int v30 = v3;
    }
    if (v30 < v14) {
      break;
    }
    if (v10 != v30)
    {
      uint64_t v31 = v103 + 24 * v10;
      do
      {
        unint64_t v32 = *(void *)(v11 + 24 * v10);
        Swift::Int v33 = v14;
        uint64_t v34 = v31;
        do
        {
          if (v32 >= *(void *)v34) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          long long v35 = *(_OWORD *)(v34 + 32);
          *(_OWORD *)(v34 + 24) = *(_OWORD *)v34;
          *(void *)(v34 + 40) = *(void *)(v34 + 16);
          *(void *)uint64_t v34 = v32;
          *(_OWORD *)(v34 + 8) = v35;
          v34 -= 24;
          ++v33;
        }
        while (v10 != v33);
        ++v10;
        v31 += 24;
      }
      while (v10 != v30);
      Swift::Int v10 = v30;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::UInt v12 = sub_1000DE3B0(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v37 = *((void *)v12 + 2);
    unint64_t v36 = *((void *)v12 + 3);
    unint64_t v13 = v37 + 1;
    uint64_t v11 = v109;
    if (v37 >= v36 >> 1)
    {
      long long v86 = sub_1000DE3B0((char *)(v36 > 1), v37 + 1, 1, v12);
      uint64_t v11 = v109;
      Swift::UInt v12 = v86;
    }
    *((void *)v12 + 2) = v13;
    os_signpost_id_t v38 = v12 + 32;
    uint64_t v39 = &v12[16 * v37 + 32];
    *(void *)uint64_t v39 = v14;
    *((void *)v39 + 1) = v10;
    if (v37)
    {
      while (1)
      {
        unint64_t v40 = v13 - 1;
        if (v13 >= 4)
        {
          char v45 = &v38[16 * v13];
          uint64_t v46 = *((void *)v45 - 8);
          uint64_t v47 = *((void *)v45 - 7);
          BOOL v51 = __OFSUB__(v47, v46);
          uint64_t v48 = v47 - v46;
          if (v51) {
            goto LABEL_119;
          }
          uint64_t v50 = *((void *)v45 - 6);
          uint64_t v49 = *((void *)v45 - 5);
          BOOL v51 = __OFSUB__(v49, v50);
          uint64_t v43 = v49 - v50;
          char v44 = v51;
          if (v51) {
            goto LABEL_120;
          }
          unint64_t v52 = v13 - 2;
          uint64_t v53 = &v38[16 * v13 - 32];
          uint64_t v55 = *(void *)v53;
          uint64_t v54 = *((void *)v53 + 1);
          BOOL v51 = __OFSUB__(v54, v55);
          uint64_t v56 = v54 - v55;
          if (v51) {
            goto LABEL_122;
          }
          BOOL v51 = __OFADD__(v43, v56);
          uint64_t v57 = v43 + v56;
          if (v51) {
            goto LABEL_125;
          }
          if (v57 >= v48)
          {
            uint64_t v75 = &v38[16 * v40];
            uint64_t v77 = *(void *)v75;
            uint64_t v76 = *((void *)v75 + 1);
            BOOL v51 = __OFSUB__(v76, v77);
            uint64_t v78 = v76 - v77;
            if (v51) {
              goto LABEL_129;
            }
            BOOL v68 = v43 < v78;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v69 = *((void *)v12 + 4);
            uint64_t v70 = *((void *)v12 + 5);
            BOOL v51 = __OFSUB__(v70, v69);
            uint64_t v62 = v70 - v69;
            char v63 = v51;
            goto LABEL_77;
          }
          uint64_t v42 = *((void *)v12 + 4);
          uint64_t v41 = *((void *)v12 + 5);
          BOOL v51 = __OFSUB__(v41, v42);
          uint64_t v43 = v41 - v42;
          char v44 = v51;
        }
        if (v44) {
          goto LABEL_121;
        }
        unint64_t v52 = v13 - 2;
        unint64_t v58 = &v38[16 * v13 - 32];
        uint64_t v60 = *(void *)v58;
        uint64_t v59 = *((void *)v58 + 1);
        BOOL v61 = __OFSUB__(v59, v60);
        uint64_t v62 = v59 - v60;
        char v63 = v61;
        if (v61) {
          goto LABEL_124;
        }
        unint64_t v64 = &v38[16 * v40];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v51 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v51) {
          goto LABEL_127;
        }
        if (__OFADD__(v62, v67)) {
          goto LABEL_128;
        }
        if (v62 + v67 >= v43)
        {
          BOOL v68 = v43 < v67;
LABEL_83:
          if (v68) {
            unint64_t v40 = v52;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v63) {
          goto LABEL_123;
        }
        unint64_t v71 = &v38[16 * v40];
        uint64_t v73 = *(void *)v71;
        uint64_t v72 = *((void *)v71 + 1);
        BOOL v51 = __OFSUB__(v72, v73);
        uint64_t v74 = v72 - v73;
        if (v51) {
          goto LABEL_126;
        }
        if (v74 < v62) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v79 = v40 - 1;
        if (v40 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        uint64_t v80 = v12;
        long long v81 = &v38[16 * v79];
        uint64_t v82 = *(void *)v81;
        uint64_t v83 = &v38[16 * v40];
        uint64_t v84 = *((void *)v83 + 1);
        sub_1000DE0F8((char *)(v11 + 24 * *(void *)v81), (char *)(v11 + 24 * *(void *)v83), v11 + 24 * v84, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v84 < v82) {
          goto LABEL_116;
        }
        if (v40 > *((void *)v80 + 2)) {
          goto LABEL_117;
        }
        *(void *)long long v81 = v82;
        *(void *)&v38[16 * v79 + 8] = v84;
        unint64_t v85 = *((void *)v80 + 2);
        if (v40 >= v85) {
          goto LABEL_118;
        }
        Swift::UInt v12 = v80;
        unint64_t v13 = v85 - 1;
        memmove(&v38[16 * v40], v83 + 16, 16 * (v85 - 1 - v40));
        *((void *)v80 + 2) = v85 - 1;
        uint64_t v11 = v109;
        if (v85 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v107;
    Swift::Int v3 = v108;
    if (v10 >= v108)
    {
      uint64_t v9 = v106;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000DE0F8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v26 = __src;
  uint64_t v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      unint64_t v16 = &v4[24 * v11];
      Swift::Int v24 = v16;
      uint64_t v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v17 = a3 - 24;
        unint64_t v18 = v6;
        while (1)
        {
          unint64_t v19 = (char *)(v17 + 24);
          unint64_t v20 = *((void *)v18 - 3);
          v18 -= 24;
          if (*((void *)v16 - 3) >= v20)
          {
            Swift::Int v24 = v16 - 24;
            if (v19 < v16 || v17 >= (unint64_t)v16 || v19 != v16)
            {
              long long v22 = *(_OWORD *)(v16 - 24);
              *(void *)(v17 + 16) = *((void *)v16 - 1);
              *(_OWORD *)unint64_t v17 = v22;
            }
            unint64_t v18 = v6;
            v16 -= 24;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }
          else
          {
            if (v19 != v6 || v17 >= (unint64_t)v6)
            {
              long long v21 = *(_OWORD *)v18;
              *(void *)(v17 + 16) = *((void *)v18 + 2);
              *(_OWORD *)unint64_t v17 = v21;
            }
            uint64_t v26 = v18;
            if (v18 <= v7) {
              goto LABEL_38;
            }
          }
          v17 -= 24;
          Swift::Int v6 = v18;
          if (v16 <= v4) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    Swift::UInt v12 = &v4[24 * v9];
    Swift::Int v24 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4)
          {
            long long v15 = *(_OWORD *)v4;
            *((void *)v7 + 2) = *((void *)v4 + 2);
            *(_OWORD *)uint64_t v7 = v15;
          }
          v4 += 24;
          uint64_t v25 = v4;
          unint64_t v13 = v6;
        }
        else
        {
          unint64_t v13 = v6 + 24;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
          {
            long long v14 = *(_OWORD *)v6;
            *((void *)v7 + 2) = *((void *)v6 + 2);
            *(_OWORD *)uint64_t v7 = v14;
          }
        }
        v7 += 24;
        if (v4 >= v12) {
          break;
        }
        Swift::Int v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      uint64_t v26 = v7;
    }
LABEL_38:
    sub_1000DE4AC((void **)&v26, (const void **)&v25, &v24);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000DE3B0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_10012B148);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  long long v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000DE4AC(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
    {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }
  return result;
}

char *sub_1000DE57C(uint64_t a1)
{
  return sub_1000DE3B0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000DE590(uint64_t a1)
{
  return sub_10007D040(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t static MachAbsoluteUtils.machAbsoluteToNanoseconds(machAbsolute:)(unint64_t result)
{
  unint64_t v1 = result;
  if (qword_100126948 != -1) {
    uint64_t result = swift_once();
  }
  if (qword_10012B2D0 == HIDWORD(qword_10012B2D0)) {
    return v1;
  }
  if (is_mul_ok(v1, qword_10012B2D0))
  {
    if (HIDWORD(qword_10012B2D0)) {
      return v1 * qword_10012B2D0 / HIDWORD(qword_10012B2D0);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t static MachAbsoluteUtils.nanosecondsToMachAbsolute(nanoseconds:)(unint64_t result)
{
  unint64_t v1 = result;
  if (qword_100126948 != -1) {
    uint64_t result = swift_once();
  }
  if (qword_10012B2D0 == HIDWORD(qword_10012B2D0)) {
    return v1;
  }
  if (is_mul_ok(v1, HIDWORD(qword_10012B2D0)))
  {
    if (qword_10012B2D0) {
      return v1 * HIDWORD(qword_10012B2D0) / qword_10012B2D0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_1000DE6C0()
{
  double v1 = 0.0;
  mach_timebase_info((mach_timebase_info_t)&v1);
  double result = v1;
  qword_10012B2D0 = *(void *)&v1;
  return result;
}

ValueMetadata *type metadata accessor for MachAbsoluteUtils()
{
  return &type metadata for MachAbsoluteUtils;
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return __DataStorage.init(bytes:length:copy:deallocator:offset:)();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage.init(length:)()
{
  return __DataStorage.init(length:)();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return Data._Representation.replaceSubrange(_:with:count:)();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t Data.withUnsafeBytes<A, B>(_:)()
{
  return Data.withUnsafeBytes<A, B>(_:)();
}

uint64_t Data.withUnsafeBytes<A>(_:)()
{
  return Data.withUnsafeBytes<A>(_:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.subscript.getter()
{
  return Data.subscript.getter();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t OSSignpostID.init(log:)()
{
  return OSSignpostID.init(log:)();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignposter.logHandle.getter()
{
  return OSSignposter.logHandle.getter();
}

uint64_t OSSignposter.init(subsystem:category:)()
{
  return OSSignposter.init(subsystem:category:)();
}

uint64_t type metadata accessor for OSSignposter()
{
  return type metadata accessor for OSSignposter();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t static DispatchTimeoutResult.== infix(_:_:)()
{
  return static DispatchTimeoutResult.== infix(_:_:)();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return static DispatchQoS.userInteractive.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.> infix(_:_:)()
{
  return dispatch thunk of static Comparable.> infix(_:_:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return dispatch thunk of static Comparable.>= infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t Array.subscript.getter()
{
  return Array.subscript.getter();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t static Bool._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Bool._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t Float.write<A>(to:)()
{
  return Float.write<A>(to:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return static os_signpost_type_t.event.getter();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return OS_dispatch_semaphore.wait(timeout:)();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t NSData.startIndex.getter()
{
  return NSData.startIndex.getter();
}

uint64_t NSData.endIndex.getter()
{
  return NSData.endIndex.getter();
}

uint64_t NSData.subscript.getter()
{
  return NSData.subscript.getter();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSString.init(stringLiteral:)()
{
  return NSString.init(stringLiteral:)();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t static OS_os_log.default.getter()
{
  return static OS_os_log.default.getter();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return dispatch thunk of BinaryInteger._lowWord.getter();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return dispatch thunk of static BinaryInteger.isSigned.getter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.hash(into:)()
{
  return AnyHashable.hash(into:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t dispatch thunk of _AnyIndexBox._typeID.getter()
{
  return dispatch thunk of _AnyIndexBox._typeID.getter();
}

uint64_t dispatch thunk of _AnyIndexBox._isEqual(to:)()
{
  return dispatch thunk of _AnyIndexBox._isEqual(to:)();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t ContiguousArray.append(_:)()
{
  return ContiguousArray.append(_:)();
}

uint64_t ContiguousArray.init()()
{
  return ContiguousArray.init()();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return type metadata accessor for ContiguousArray();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return dispatch thunk of _AnySequenceBox._makeIterator()();
}

uint64_t dispatch thunk of _AnySequenceBox._map<A>(_:)()
{
  return dispatch thunk of _AnySequenceBox._map<A>(_:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t dispatch thunk of _AnyCollectionBox.subscript.getter()
{
  return dispatch thunk of _AnyCollectionBox.subscript.getter();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return dispatch thunk of _AnyIteratorBoxBase.next()();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

NSNumber __swiftcall UInt8._bridgeToObjectiveC()()
{
  return (NSNumber)UInt8._bridgeToObjectiveC()();
}

uint64_t print(_:separator:terminator:)()
{
  return print(_:separator:terminator:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt16 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Mirror.init(reflecting:)()
{
  return Mirror.init(reflecting:)();
}

uint64_t Mirror.children.getter()
{
  return Mirror.children.getter();
}

uint64_t type metadata accessor for Mirror()
{
  return type metadata accessor for Mirror();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t AudioServerPlugInRegisterRemote()
{
  return _AudioServerPlugInRegisterRemote();
}

uint8_t IOUSBGetEndpointAddress(const IOUSBEndpointDescriptor *descriptor)
{
  return _IOUSBGetEndpointAddress(descriptor);
}

uint32_t IOUSBGetEndpointBurstSize(uint32_t usbDeviceSpeed, const IOUSBEndpointDescriptor *descriptor, const IOUSBSuperSpeedEndpointCompanionDescriptor *companionDescriptor, const IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor *sspCompanionDescriptor)
{
  return _IOUSBGetEndpointBurstSize(usbDeviceSpeed, descriptor, companionDescriptor, sspCompanionDescriptor);
}

uint8_t IOUSBGetEndpointDirection(const IOUSBEndpointDescriptor *descriptor)
{
  return _IOUSBGetEndpointDirection(descriptor);
}

uint8_t IOUSBGetEndpointSynchronizationType(const IOUSBEndpointDescriptor *descriptor)
{
  return _IOUSBGetEndpointSynchronizationType(descriptor);
}

uint8_t IOUSBGetEndpointType(const IOUSBEndpointDescriptor *descriptor)
{
  return _IOUSBGetEndpointType(descriptor);
}

uint8_t IOUSBGetEndpointUsageType(const IOUSBEndpointDescriptor *descriptor)
{
  return _IOUSBGetEndpointUsageType(descriptor);
}

const IOUSBDeviceCapabilityDescriptorHeader *__cdecl IOUSBGetNextCapabilityDescriptor(const IOUSBBOSDescriptor *bosDescriptor, const IOUSBDeviceCapabilityDescriptorHeader *currentDescriptor)
{
  return _IOUSBGetNextCapabilityDescriptor(bosDescriptor, currentDescriptor);
}

const IOUSBDescriptorHeader *__cdecl IOUSBGetNextDescriptor(const IOUSBConfigurationDescriptor *configurationDescriptor, const IOUSBDescriptorHeader *currentDescriptor)
{
  return _IOUSBGetNextDescriptor(configurationDescriptor, currentDescriptor);
}

uint64_t MobileGestalt_get_current_device()
{
  return _MobileGestalt_get_current_device();
}

uint64_t MobileGestalt_get_deviceClassNumber()
{
  return _MobileGestalt_get_deviceClassNumber();
}

void NSLog(NSString *format, ...)
{
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

void std::terminate(void)
{
}

void operator delete()
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return ___cxa_guard_acquire((uint64_t *)a1);
}

void __cxa_guard_release(__guard *a1)
{
}

{
}

{
}

uint64_t _os_assert_log()
{
  return __os_assert_log();
}

uint64_t _os_crash()
{
  return __os_crash();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return _bootstrap_look_up(bp, service_name, sp);
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_main(void)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return _dispatch_queue_attr_make_initially_inactive(attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return _dispatch_workloop_create_inactive(label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return _dispatch_workloop_set_scheduler_priority();
}

void free(void *a1)
{
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

mach_port_t mach_thread_self(void)
{
  return _mach_thread_self();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

uint64_t os_workgroup_interval_create()
{
  return _os_workgroup_interval_create();
}

int os_workgroup_interval_finish(os_workgroup_interval_t wg, os_workgroup_interval_data_t data)
{
  return _os_workgroup_interval_finish(wg, data);
}

int os_workgroup_interval_start(os_workgroup_interval_t wg, uint64_t start, uint64_t deadline, os_workgroup_interval_data_t data)
{
  return _os_workgroup_interval_start(wg, start, deadline, data);
}

int os_workgroup_join(os_workgroup_t wg, os_workgroup_join_token_t token_out)
{
  return _os_workgroup_join(wg, token_out);
}

void os_workgroup_leave(os_workgroup_t wg, os_workgroup_join_token_t token)
{
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return _pthread_attr_destroy(a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return _pthread_attr_init(a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return _pthread_cond_destroy(a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return _pthread_cond_init(a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return _pthread_cond_signal(a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return _pthread_cond_timedwait_relative_np(a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return _pthread_cond_wait(a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return _pthread_create(a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return _pthread_join(a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return _pthread_mutex_destroy(a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return _pthread_mutex_init(a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return _pthread_mutex_lock(a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return _pthread_mutex_unlock(a1);
}

pthread_t pthread_self(void)
{
  return _pthread_self();
}

int pthread_setname_np(const char *a1)
{
  return _pthread_setname_np(a1);
}

int sched_yield(void)
{
  return _sched_yield();
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return _swift_unknownObjectWeakCopyAssign();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return _swift_unknownObjectWeakCopyInit();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return _swift_unknownObjectWeakTakeAssign();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return _swift_unknownObjectWeakTakeInit();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakAssign()
{
  return _swift_weakAssign();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return _thread_policy_set(thread, flavor, policy_info, policy_infoCnt);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_fnHALInitializeWithPluginHost(void *a1, const char *a2, ...)
{
  return _[a1 fnHALInitializeWithPluginHost];
}

id objc_msgSend_frameNumberWithTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameNumberWithTime:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_seed(void *a1, const char *a2, ...)
{
  return _[a1 seed];
}

id objc_msgSend_start_maxPeriodMach_eventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start:maxPeriodMach:eventHandler:");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_timestamps(void *a1, const char *a2, ...)
{
  return _[a1 timestamps];
}

id objc_msgSend_updateTimes(void *a1, const char *a2, ...)
{
  return _[a1 updateTimes];
}

id objc_msgSend_updateTimesWithRetries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTimesWithRetries:");
}