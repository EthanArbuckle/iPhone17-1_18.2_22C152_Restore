uint64_t CAHDecCatnipAvc::getSWRStride(CAHDecCatnipAvc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v11;
  int v12;
  int v13;
  const char *v14;
  __int16 v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x263EF8340];
  v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1482) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    v6 = a4;
  }
  else {
    v6 = a3;
  }
  v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    v8 = v7;
  }
  else {
    v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      result = 0;
      *((_DWORD *)this + 2964) = (a2 + 63) & 0xFFFFFFC0;
      v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      result = 0;
      *((_DWORD *)this + 2964) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      result = 0;
      *((_DWORD *)this + 2964) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      result = 0;
      *((_DWORD *)this + 2964) = (2 * a2 + 63) & 0xFFFFFFC0;
      v11 = 4 * a2;
LABEL_17:
      v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 2965) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        v13 = 136315394;
        v14 = "getSWRStride";
        v15 = 1024;
        v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecCatnipAvc::getTileStartCTU(CAHDecCatnipAvc *this, unsigned int a2, int a3)
{
  v3 = (unsigned __int16 *)(*((void *)this + 33) + 888);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecCatnipAvc::getTileEndCTU(CAHDecCatnipAvc *this, unsigned int a2, int a3)
{
  v3 = (unsigned __int16 *)(*((void *)this + 33) + 888);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecCatnipAvc::getTileIdxAbove(CAHDecCatnipAvc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 888);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecCatnipAvc::populateAvdWork(CAHDecCatnipAvc *this, unsigned int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v3 + 3312);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 7500);
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    v9 = (int *)(v2 + 3040);
    v10 = (int *)(v4 + 20);
    __int16 v22 = a2;
    uint64_t v11 = 44 * a2;
    uint64_t v12 = v2 + 956 * v5;
    while (1)
    {
      uint64_t v13 = v12 + v7;
      *(_WORD *)(v13 + 2108) = v8;
      *(_WORD *)(v13 + 2110) = 0;
      *(_WORD *)(v13 + 2112) = v8;
      *(_DWORD *)(v12 + v7 + 2114) = 0;
      int v14 = *v9;
      if (!CAVDAvcDecoder::GetSDataMemInfo(*((void *)this + 32), v8, &v24, &v23)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *v10;
      *(_DWORD *)(v13 + 2136) = *v10;
      *(_DWORD *)(v13 + 2140) = v15;
      *(_DWORD *)(v13 + 2144) = 0;
      if (v7) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = 15;
      }
      *(_WORD *)(v13 + 2118) = v16;
      uint64_t v17 = v24;
      if (*(void *)v24 || *(_DWORD *)(v24 + 152) || *(_DWORD *)(v24 + 156))
      {
        int v18 = v23;
        if (HIDWORD(v23) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v26 = "populateAvdWork";
          __int16 v27 = 1024;
          int v28 = 1896;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          int v18 = v23;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 575726, v18, 0x3FFFFFFFFFFLL, 32, -1, 2);
        if (result) {
          return result;
        }
        uint64_t v17 = v24;
        if (*(void *)v24) {
          goto LABEL_17;
        }
      }
      if (*(_DWORD *)(v17 + 152) || *(_DWORD *)(v17 + 156))
      {
LABEL_17:
        int v20 = v23;
        if (HIDWORD(v23))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            v26 = "populateAvdWork";
            __int16 v27 = 1024;
            int v28 = 1897;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v20 = v23;
          }
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 575728, v20, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
      v9 += 239;
      *(_DWORD *)(v12 + v7 + 2132) = v14;
      ++v8;
      v7 += 44;
      v10 += 462;
      if (v11 == v7)
      {
        uint64_t v2 = *((void *)this + 33);
        __int16 v21 = v22;
        goto LABEL_24;
      }
    }
  }
  else
  {
    __int16 v21 = 0;
LABEL_24:
    uint64_t result = 0;
    *(_WORD *)(v2 + 28) = v21;
    *(_DWORD *)(v2 + 32) = 575704;
  }
  return result;
}

uint64_t CAHDecCatnipAvc::allocWorkBuf_SPS(CAHDecCatnipAvc *this, unsigned char *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v3 = a2[4];
  unsigned int v4 = *((unsigned __int16 *)a2 + 779);
  int v5 = 16 * v4;
  unsigned int v6 = *((unsigned __int16 *)a2 + 780);
  unsigned int v7 = 32 - __clz(((16 * v4 + 47) >> 5) - 1);
  if (v4 < 2) {
    LOBYTE(v7) = 0;
  }
  unsigned int v8 = 32 - __clz(((16 * v6 + 47) >> 5) - 1);
  if (v6 < 2) {
    LOBYTE(v8) = 0;
  }
  unsigned int v9 = ((32 << (v8 + v7)) + 127) & 0xFFFFFF80;
  if (a2[4])
  {
    unsigned int v10 = (v5 + 16) << (v3 == 3);
    unsigned int v11 = ((((16 * v6 + 16) | (v3 == 1)) >> (v3 == 1)) + 15) >> 4;
    if (v10 > 0x20)
    {
      unsigned int v12 = 32 - __clz(((v10 + 31) >> 5) - 1);
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  LOBYTE(v12) = 0;
LABEL_10:
  unsigned int v13 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  unsigned int v15 = ((8 << (v14 + v12)) + 127) & 0xFFFFFF80;
  if (a2[4]) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = 0;
  }
  *((_DWORD *)this + 2956) = v9;
  *((_DWORD *)this + 2957) = v16;
  *((void *)this + 1479) = 0;
  int v17 = (v4 << 6) + 64;
  *((_DWORD *)this + 2962) = v17;
  unsigned int v18 = v17 + v17 * v6;
  *((_DWORD *)this + 2961) = v18;
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    uint64_t v19 = 24;
    int v20 = this;
    while (1)
    {
      uint64_t v21 = *((unsigned int *)this + 2956);
      if (v21
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 35, v21, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_34;
        }
        int v27 = 136315650;
        int v28 = "allocWorkBuf_SPS";
        __int16 v29 = 1024;
        int v30 = 2137;
        __int16 v31 = 2080;
        v32 = "HdrY";
        v25 = &_os_log_internal;
        goto LABEL_33;
      }
      uint64_t v22 = *((unsigned int *)this + 2957);
      if (v22)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 299, v22, 7, 1, 0)) {
          break;
        }
      }
      int v20 = (CAHDecCatnipAvc *)((char *)v20 + 176);
      if (!--v19)
      {
        unsigned int v18 = *((_DWORD *)this + 2961);
        goto LABEL_24;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    int v27 = 136315650;
    int v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2138;
    __int16 v31 = 2080;
    v32 = "HdrC";
    v25 = &_os_log_internal;
    goto LABEL_33;
  }
LABEL_24:
  int v23 = (*MEMORY[0x263EF8AD0] + v18) & ~*MEMORY[0x263EF8AD0];
  *((_DWORD *)this + 2961) = v23;
  uint64_t v24 = (24 * v23);
  if (!v24
    || !CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 728, v24, 7, 1, 32))
  {
    uint64_t result = 0;
    *((_DWORD *)this + 2966) = 0;
    *((_DWORD *)this + 2967) = v5 | (v6 << 20) | 0xF000F;
    return result;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 136315650;
    int v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2156;
    __int16 v31 = 2080;
    v32 = "MvColo";
    v25 = &_os_log_internal;
LABEL_33:
    _os_log_impl(&dword_223977000, v25, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v27, 0x1Cu);
  }
LABEL_34:
  (*(void (**)(CAHDecCatnipAvc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecCatnipAvc::allocWorkBuf_PPS(CAHDecCatnipAvc *this, unsigned char *a2, void *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = 16 * *((unsigned __int16 *)a2 + 779);
  if (((a2[6] + 9) & 0x1FEu) <= ((a2[7] + 9) & 0x1FEu)) {
    int v6 = (a2[7] + 9) & 0x1FE;
  }
  else {
    int v6 = (a2[6] + 9) & 0x1FE;
  }
  int v7 = a2[4];
  if (v7 == 3) {
    int v8 = 48;
  }
  else {
    int v8 = 32;
  }
  if (v7 == 3) {
    int v9 = 192;
  }
  else {
    int v9 = 128;
  }
  if (a2[4]) {
    int v10 = v8;
  }
  else {
    int v10 = 16;
  }
  if (a2[4]) {
    int v11 = v9;
  }
  else {
    int v11 = 64;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 651, 4 * (((unint64_t)(v5 + 16) >> 2) + ((unint64_t)(v5 + 16) >> 4)), 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_20:
      (*(void (**)(CAHDecCatnipAvc *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2279;
    __int16 v21 = 2080;
    uint64_t v22 = "AvpAboveInfo";
    unsigned int v12 = &_os_log_internal;
LABEL_19:
    _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v17, 0x1Cu);
    goto LABEL_20;
  }
  unsigned int v14 = (v5 + 31) >> 4;
  uint64_t v15 = ((v6 * v10) >> 3) * v14;
  if (v15 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 662, v15, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2283;
    __int16 v21 = 2080;
    uint64_t v22 = "IpAbove";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t v16 = ((v6 * v11) >> 3) * v14;
  if (v16 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 673, v16, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2284;
    __int16 v21 = 2080;
    uint64_t v22 = "LfAbovePix";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 684, 32 * v14, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2285;
    __int16 v21 = 2080;
    uint64_t v22 = "LfAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 640, 32 * v14, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2288;
    __int16 v21 = 2080;
    uint64_t v22 = "MvAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  return result;
}

uint64_t CAHDecCatnipAvc::freeWorkBuf_SPS(CAHDecCatnipAvc *this)
{
  uint64_t v2 = 24;
  int v3 = this;
  do
  {
    uint64_t result = *((void *)this + 32);
    if (!*(_DWORD *)(result + 2648))
    {
      if (*((void *)v3 + 70))
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(result, (uint64_t *)v3 + 70);
        *((void *)v3 + 70) = 0;
      }
      if (*((void *)v3 + 598))
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)v3 + 598);
        *((void *)v3 + 598) = 0;
      }
    }
    int v3 = (CAHDecCatnipAvc *)((char *)v3 + 176);
    --v2;
  }
  while (v2);
  if (*((void *)this + 1456))
  {
    uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 1456);
    *((void *)this + 1456) = 0;
  }
  return result;
}

uint64_t *CAHDecCatnipAvc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[1302])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1302);
    v2[1302] = 0;
  }
  if (v2[1324])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1324);
    v2[1324] = 0;
  }
  if (v2[1280])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1280);
    v2[1280] = 0;
  }
  if (v2[1346])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1346);
    v2[1346] = 0;
  }
  if (v2[1368])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1368);
    v2[1368] = 0;
  }
  if (v2[1390])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1390);
    v2[1390] = 0;
  }
  if (v2[1412])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1412);
    v2[1412] = 0;
  }
  if (v2[1434])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1434);
    v2[1434] = 0;
  }
  return this;
}

uint64_t CAHDecCatnipAvc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 9008;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 11840) = a2;
  return this;
}

uint64_t CAHDecCatnipAvc::decodeBuffer(CAHDecCatnipAvc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecCatnipAvc::decodeBufferSize(CAHDecCatnipAvc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecCatnipAvc::decHdrYLinAddr(CAHDecCatnipAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 70);
}

uint64_t CAHDecCatnipAvc::decHdrCLinAddr(CAHDecCatnipAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 598);
}

uint64_t CAHDecCatnipAvc::decHdrYSize(CAHDecCatnipAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 151);
}

uint64_t CAHDecCatnipAvc::decHdrCSize(CAHDecCatnipAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 1207);
}

uint64_t CAHDecCatnipAvc::decHdrYStride(CAHDecCatnipAvc *this)
{
  return *((unsigned int *)this + 2958);
}

uint64_t CAHDecCatnipAvc::decHdrCStride(CAHDecCatnipAvc *this)
{
  return *((unsigned int *)this + 2959);
}

CAHDecCatnipLgh *createCatnipLghDecoder(CAVDLghDecoder *a1)
{
  uint64_t v2 = (CAHDecCatnipLgh *)operator new(0xC48uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecCatnipLgh::CAHDecCatnipLgh(v2, a1);
  }
  return v3;
}

void sub_2239F485C(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecCatnipLgh::CAHDecCatnipLgh(CAHDecCatnipLgh *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73F110;
  *(_DWORD *)(v1 + 456) = 151364;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecCatnipLgh::CAHDecCatnipLgh(CAHDecCatnipLgh *this, CAVDLghDecoder *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73F110;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 151364;
  *(_DWORD *)(v4 + 8) = 836;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 151364, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      int v17 = "CAHDecCatnipLgh";
      __int16 v18 = 1024;
      int v19 = 0;
      uint64_t v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
LABEL_16:
      _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v7);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v8;
    *((void *)this + 34) = v8;
    uint64_t v9 = *((void *)this + 32);
    *(_DWORD *)(v9 + 17552) = 0;
    bzero((void *)(v9 + 11792), 0xB00uLL);
    *(_OWORD *)(v9 + 5712) = 0u;
    bzero((void *)(*((void *)this + 32) + 14608), 0xB00uLL);
    bzero((char *)this + 464, 0x4D0uLL);
    int v10 = (_OWORD *)*((void *)this + 32);
    v10[356] = 0u;
    v10[355] = 0u;
    v10[354] = 0u;
    v10[353] = 0u;
    v10[352] = 0u;
    v10[351] = 0u;
    v10[350] = 0u;
    v10[349] = 0u;
    v10[348] = 0u;
    v10[347] = 0u;
    v10[346] = 0u;
    v10[345] = 0u;
    v10[344] = 0u;
    v10[343] = 0u;
    v10[342] = 0u;
    v10[341] = 0u;
    v10[340] = 0u;
    v10[339] = 0u;
    v10[338] = 0u;
    v10[337] = 0u;
    v10[336] = 0u;
    v10[335] = 0u;
    bzero((char *)this + 1696, 0x580uLL);
    for (uint64_t i = 3072; i != 3776; i += 176)
    {
      unsigned int v12 = (_OWORD *)(*((void *)this + 32) + i);
      v12[9] = 0uLL;
      v12[10] = 0uLL;
      v12[7] = 0uLL;
      v12[8] = 0uLL;
      v12[5] = 0uLL;
      v12[6] = 0uLL;
      v12[3] = 0uLL;
      v12[4] = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *unsigned int v12 = 0uLL;
    }
    do
    {
      unsigned int v13 = (_OWORD *)(*((void *)this + 32) + i);
      v13[9] = 0uLL;
      v13[10] = 0uLL;
      v13[7] = 0uLL;
      v13[8] = 0uLL;
      v13[5] = 0uLL;
      v13[6] = 0uLL;
      v13[3] = 0uLL;
      v13[4] = 0uLL;
      v13[1] = 0uLL;
      v13[2] = 0uLL;
      *unsigned int v13 = 0uLL;
      i += 176;
    }
    while (i != 5184);
    unsigned int v14 = (_OWORD *)*((void *)this + 32);
    v14[334] = 0u;
    v14[333] = 0u;
    v14[332] = 0u;
    v14[331] = 0u;
    v14[330] = 0u;
    v14[329] = 0u;
    v14[328] = 0u;
    v14[327] = 0u;
    v14[326] = 0u;
    v14[325] = 0u;
    uint64_t v15 = 3072;
    v14[324] = 0u;
    do
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), 1913, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        int v16 = 136315650;
        int v17 = "CAHDecCatnipLgh";
        __int16 v18 = 1024;
        int v19 = 173;
        __int16 v20 = 2080;
        __int16 v21 = "probBuf";
        uint64_t v5 = &_os_log_internal;
        int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
        goto LABEL_15;
      }
      v15 += 176;
    }
    while (v15 != 3776);
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 5184), 12284, 7, 1, 0))return; {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    }
    {
      int v16 = 136315650;
      int v17 = "CAHDecCatnipLgh";
      __int16 v18 = 1024;
      int v19 = 175;
      __int16 v20 = 2080;
      __int16 v21 = "stateBuf";
      uint64_t v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_15:
      uint32_t v7 = 28;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_2239F4C94(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecCatnipLgh::~CAHDecCatnipLgh(CAHDecCatnipLgh *this)
{
  *(void *)this = &unk_26D73F110;
  CAHDecCatnipLgh::freeWorkBuf_SPS(this);
  uint64_t v2 = *((void *)this + 32);
  for (uint64_t i = 3072; i != 3776; i += 176)
  {
    if (*(void *)(v2 + i))
    {
      CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + i));
      uint64_t v2 = *((void *)this + 32);
      *(void *)(v2 + i) = 0;
    }
  }
  if (*(void *)(v2 + 5184))
  {
    CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + 5184));
    *(void *)(*((void *)this + 32) + 5184) = 0;
  }
  (*(void (**)(CAHDecCatnipLgh *, void))(*(void *)this + 152))(this, 0);
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecCatnipLgh::~CAHDecCatnipLgh(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecCatnipLgh::DecodePicture(CAHDecCatnipLgh *this, uint64_t a2)
{
  if (CAHDecClaryLgh::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecCatnipLgh *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecCatnipLgh *))(*(void *)this + 48))(this);
  (*(void (**)(CAHDecCatnipLgh *))(*(void *)this + 56))(this);
  CAHDecClaryLgh::populateTiles(this);
  (*(void (**)(CAHDecCatnipLgh *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecCatnipLgh *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecCatnipLgh::populateCommonRegisters(CAHDecCatnipLgh *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000002;
  return 0;
}

uint64_t CAHDecCatnipLgh::updateCommonRegisters(CAHDecCatnipLgh *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecCatnipLgh::populateSequenceRegisters(CAHDecCatnipLgh *this)
{
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  *(_DWORD *)(v1 + 40) = 0;
  unsigned __int16 v3 = *(_DWORD *)(v2 + 108) - 1;
  *(_DWORD *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 40) = (v3 | ((unsigned __int16)*(_DWORD *)(v2 + 112) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 304);
  if (v4 >= 3) {
    int v5 = 6528;
  }
  else {
    int v5 = ((v4 & 3) << 7) | 0x1800;
  }
  *(_DWORD *)(v1 + 44) = v5;
  unsigned int v6 = v5 & 0xFFF87FFF | (((*(unsigned char *)(v2 + 105) + 8) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFF87FFFF | (((*(unsigned __int8 *)(v2 + 105) + 8) & 0xF) << 19) | 0x1000000;
  *(_DWORD *)(v1 + 44) = v7;
  *(_DWORD *)(v1 + 44) = v7 & 0xFDFFFFFF | (*(unsigned char *)(v2 + 304) == 4);
  return 0;
}

uint64_t CAHDecCatnipLgh::populatePictureRegisters(CAHDecCatnipLgh *this)
{
  uint64_t v394 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v2 + 17560);
  if (*(unsigned char *)(v4 + 37)) {
    BOOL v5 = *(unsigned char *)(v4 + 40) != 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = *(_DWORD *)(v2 + 11748);
  int v7 = *(_DWORD *)(v4 + 100);
  int v388 = *(_DWORD *)(v4 + 96);
  int v387 = 1 << v7;
  char v8 = *(unsigned char *)(v2 + 2675);
  char v9 = *(unsigned char *)(v2 + 2674);
  if (v5) {
    int v10 = 766517248;
  }
  else {
    int v10 = 766509056;
  }
  *(_DWORD *)(v3 + 48) = v10;
  int v11 = v10 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v3 + 48) = v11;
  if (*(_DWORD *)(*((void *)this + 32) + 2644) == 1) {
    int v12 = 1024;
  }
  else {
    int v12 = 1;
  }
  unsigned int v13 = v12 & 0xFFFFFFF0 | (4 * (v8 & 3)) | v9 & 3 | v11 | 0x2E0;
  *(_DWORD *)(v3 + 48) = v13;
  unsigned int v14 = (unsigned char *)*((void *)this + 32);
  int v15 = v13 | ((v14[2652] & 1) << 19);
  *(_DWORD *)(v3 + 48) = v15;
  int v16 = v15 | ((v14[2653] & 1) << 18);
  *(_DWORD *)(v3 + 48) = v16;
  *(_DWORD *)(v3 + 48) = v16 | ((v14[2654] & 1) << 17);
  *(void *)(v3 + 52) = 0x2000000;
  LOWORD(v16) = *(_DWORD *)(v4 + 108) - 1;
  *(_DWORD *)(v3 + 56) = (unsigned __int16)v16;
  *(_DWORD *)(v3 + 56) = ((unsigned __int16)v16 | ((unsigned __int16)*(_DWORD *)(v4 + 112) << 16)) - 0x10000;
  *(void *)(v3 + 60) = 0;
  int v17 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2688) & 7;
  *(_DWORD *)(v3 + 64) = v17;
  unsigned int v18 = v17 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2692) & 1));
  *(_DWORD *)(v3 + 64) = v18;
  unsigned int v19 = v18 & 0xFFFFFF8F | (16 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2696) & 7));
  *(_DWORD *)(v3 + 64) = v19;
  unsigned int v20 = v19 & 0xFFFFFF7F | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2700) & 1) << 7);
  *(_DWORD *)(v3 + 64) = v20;
  unsigned int v21 = v20 & 0xFFFFF8FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2704) & 7) << 8);
  *(_DWORD *)(v3 + 64) = v21;
  unsigned int v22 = v21 & 0xFFFFF7FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2708) & 1) << 11);
  *(_DWORD *)(v3 + 64) = v22;
  unsigned int v23 = v22 & 0xFFFFCFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2712) & 3) << 12);
  *(_DWORD *)(v3 + 64) = v23;
  unsigned int v24 = v23 & 0xFFFFBFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2716) & 1) << 14);
  *(_DWORD *)(v3 + 64) = v24;
  unsigned int v25 = v24 & 0xFFFF7FFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2720) & 1) << 15);
  *(_DWORD *)(v3 + 64) = v25;
  unsigned int v26 = v25 & 0xFFF8FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2724) & 7) << 16);
  *(_DWORD *)(v3 + 64) = v26;
  unsigned int v27 = v26 & 0xFFF7FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2728) & 1) << 19);
  *(_DWORD *)(v3 + 64) = v27;
  unsigned int v28 = v27 & 0xFFEFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2732) & 1) << 20);
  *(_DWORD *)(v3 + 64) = v28;
  unsigned int v29 = v28 & 0xFFDFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2736) & 1) << 21);
  *(_DWORD *)(v3 + 64) = v29;
  unsigned int v30 = v29 & 0xFFBFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2740) & 1) << 22);
  *(_DWORD *)(v3 + 64) = v30;
  unsigned int v31 = v30 & 0xFF7FFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2744) & 1) << 23);
  *(_DWORD *)(v3 + 64) = v31;
  unsigned int v32 = v31 & 0xFEFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2748) & 1) << 24);
  *(_DWORD *)(v3 + 64) = v32;
  unsigned int v33 = v32 & 0xFDFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2752) & 1) << 25);
  *(_DWORD *)(v3 + 64) = v33;
  *(_DWORD *)(v3 + 64) = v33 & 0xFBFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2756) & 1) << 26);
  *(void *)(v3 + 68) = 0;
  if (*(unsigned char *)(v4 + 60))
  {
    int v34 = *(unsigned char *)(v4 + 69) & 0x7F;
    *(_DWORD *)(v3 + 68) = v34;
    unsigned int v35 = v34 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 68) & 0x7F) << 7);
    *(_DWORD *)(v3 + 68) = v35;
    unsigned int v36 = v35 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 67) & 0x7F) << 14);
    *(_DWORD *)(v3 + 68) = v36;
    unsigned int v37 = v36 & 0xF01FFFFF | ((*(unsigned char *)(v4 + 66) & 0x7F) << 21);
    *(_DWORD *)(v3 + 68) = v37;
    *(_DWORD *)(v3 + 68) = v37 & 0x8FFFFFFF | ((*(unsigned char *)(v4 + 59) & 7) << 28);
    int v38 = *(unsigned char *)(v4 + 73) & 0x7F;
    *(_DWORD *)(v3 + 72) = v38;
    unsigned int v39 = v38 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 72) & 0x7F) << 7);
    *(_DWORD *)(v3 + 72) = v39;
    unsigned int v40 = v39 & 0xFFF03FFF | ((*(unsigned char *)(v4 + 58) & 0x3F) << 14);
  }
  else
  {
    *(_DWORD *)(v3 + 68) = (*(unsigned char *)(v4 + 59) & 7) << 28;
    unsigned int v40 = (*(unsigned char *)(v4 + 58) & 0x3F) << 14;
  }
  uint64_t v41 = 0;
  int v389 = 1 << v388;
  int v386 = v7;
  int v385 = 1 << v388 << v7;
  *(_DWORD *)(v3 + 72) = v40;
  *(_DWORD *)(v3 + 76) = 0;
  int v42 = *(unsigned char *)(v4 + 77) & 0x1F;
  *(_DWORD *)(v3 + 76) = v42;
  unsigned int v43 = v42 & 0xFFFFFC1F | (32 * (*(unsigned char *)(v4 + 76) & 0x1F));
  *(_DWORD *)(v3 + 76) = v43;
  unsigned int v44 = v43 & 0xFFFF83FF | ((*(unsigned char *)(v4 + 75) & 0x1F) << 10);
  *(_DWORD *)(v3 + 76) = v44;
  *(_DWORD *)(v3 + 76) = v44 | (*(unsigned __int8 *)(v4 + 74) << 15);
  uint64_t v45 = v3 + 80;
  v46 = (_WORD *)(v4 + 242);
  uint64_t v47 = v4 + 208;
  do
  {
    int v48 = *(unsigned __int8 *)(v4 + 78);
    *(_DWORD *)(v45 + v41) = 0;
    if (v48)
    {
      BOOL v49 = *(unsigned char *)(v47 + v41) != 0;
      *(_DWORD *)(v45 + v41) = v49;
      BOOL v50 = *(unsigned __int8 *)(v47 + v41 - 1) != 0;
    }
    else
    {
      BOOL v49 = 0;
      BOOL v50 = 0;
    }
    int v51 = v49 | (8 * v50);
    *(_DWORD *)(v45 + v41) = v51;
    unsigned int v52 = v51 & 0xFFFFFFF9 | (2 * (*v46 & 3));
    *(_DWORD *)(v45 + v41) = v52;
    if (v48)
    {
      int v53 = *(unsigned __int8 *)(v47 + v41 - 2);
      int v54 = v52 | ((*(unsigned char *)(v47 + v41 - 2) != 0) << 11);
      *(_DWORD *)(v45 + v41) = v54;
      if (v53) {
        LOWORD(v53) = *(v46 - 1);
      }
      unsigned int v55 = (16 * (v53 & 0x7F)) | v54 & 0xFFFFF80F;
      *(_DWORD *)(v45 + v41) = v55;
      int v48 = *(unsigned __int8 *)(v47 + v41 - 3);
      unsigned int v52 = v55 | ((v48 != 0) << 21);
      *(_DWORD *)(v45 + v41) = v52;
      if (v48) {
        LOWORD(v48) = *(v46 - 2);
      }
    }
    *(_DWORD *)(v45 + v41) = v52 & 0xFFE00FFF | ((v48 & 0x1FF) << 12);
    v41 += 4;
    v46 += 4;
  }
  while (v41 != 32);
  *(_DWORD *)(v3 + 152) = 0x20000;
  uint64_t v390 = v4;
  BOOL v383 = v5;
  if (v5)
  {
    uint64_t v384 = 8;
  }
  else
  {
    v56 = (_DWORD *)(v3 + 112);
    uint64_t v57 = 2178;
    uint64_t v384 = 3;
    v58 = &_os_log_internal;
    do
    {
      v56[11] = 0x1000000;
      _DWORD *v56 = 0;
      unsigned __int16 v59 = **(_DWORD **)(*((void *)this + 32) + 8 * v57) - 1;
      _DWORD *v56 = v59;
      _DWORD *v56 = (v59 | ((unsigned __int16)*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 16))
           - 0x10000;
      v56[3] = 0;
      int v60 = (unsigned __int16)((**(_DWORD **)(*((void *)this + 32) + 8 * v57) << 14) / *(_DWORD *)(v4 + 108));
      v56[3] = v60;
      int v61 = v60 | ((unsigned __int16)((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 14)
                                    / *(_DWORD *)(v4 + 112)) << 16);
      v56[3] = v61;
      if ((v60 - 1024) >= 0x7C01 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 544;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
        int v61 = v56[3];
      }
      if ((v61 - 0x4000000) >= 0x7C010000 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 545;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
      }
      ++v57;
      ++v56;
      uint64_t v4 = v390;
    }
    while (v57 != 2181);
  }
  *(void *)(v3 + 144) = 0;
  int v62 = *(unsigned __int16 *)(v4 + 2672);
  *(_DWORD *)(v3 + 144) = v62;
  *(_DWORD *)(v3 + 144) = v62 | (*(_DWORD *)(v4 + 2676) << 16);
  int v63 = *(unsigned __int16 *)(v4 + 2680);
  *(_DWORD *)(v3 + 148) = v63;
  *(_DWORD *)(v3 + 148) = v63 | (*(_DWORD *)(v4 + 2684) << 16);
  v64 = (char *)this + 464;
  for (uint64_t i = 196; i != 224; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i - 28) = 0;
    uint64_t v66 = *((void *)this + 33) + i;
    int v67 = *(_DWORD *)(v66 - 28);
    *(_DWORD *)(v66 - 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i - 28) ^= 0xFFFFFF00;
    uint64_t v68 = *((void *)this + 33) + i;
    int v69 = *(_DWORD *)(v68 - 28);
    *(_DWORD *)(v68 - 28) = v67;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)i - 28, 0, 0xFFFFFFFFLL, 8, v69, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) = *(_DWORD *)(*((void *)this + 33) + i) & 0x800001FF | (((*((_DWORD *)this + 780) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + i + 180) = 0;
    uint64_t v71 = *((void *)this + 33) + i;
    int v72 = *(_DWORD *)(v71 + 180);
    *(_DWORD *)(v71 + 180) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 180) ^= 0x3FFu;
    uint64_t v73 = *((void *)this + 33) + i;
    int v74 = *(_DWORD *)(v73 + 180);
    *(_DWORD *)(v73 + 180) = v72;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)i + 180, 0, 0x3FFFFFFFFFFLL, 32, v74, 4);
      if (result) {
        return result;
      }
    }
    v64 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 224) = 0;
  uint64_t v75 = *((void *)this + 33);
  int v76 = *(_DWORD *)(v75 + 224);
  *(_DWORD *)(v75 + 224) = 0;
  *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFF00;
  uint64_t v77 = *((void *)this + 33);
  int v78 = *(_DWORD *)(v77 + 224);
  *(_DWORD *)(v77 + 224) = v76;
  uint64_t v79 = *((void *)this + 32);
  if (*(void *)(v79 + 5184) || *(_DWORD *)(v79 + 5336) || *(_DWORD *)(v79 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v79 + 5184), 224, 0, 0xFFFFFFFFLL, 8, v78, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 404) = 0;
  uint64_t v80 = *((void *)this + 33);
  int v81 = *(_DWORD *)(v80 + 404);
  *(_DWORD *)(v80 + 404) = 0;
  *(_DWORD *)(*((void *)this + 33) + 404) ^= 0x3FFu;
  uint64_t v82 = *((void *)this + 33);
  int v83 = *(_DWORD *)(v82 + 404);
  *(_DWORD *)(v82 + 404) = v81;
  uint64_t v84 = *((void *)this + 32);
  if (*(void *)(v84 + 5184) || *(_DWORD *)(v84 + 5336) || *(_DWORD *)(v84 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v84 + 5184), 404, 0, 0x3FFFFFFFFFFLL, 32, v83, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 228) = 0;
  *(_DWORD *)(*((void *)this + 33) + 408) = 0;
  if ((*(unsigned char *)(v3 + 50) & 8) != 0)
  {
    uint64_t v85 = *((void *)this + 33);
    uint64_t v86 = *(void *)(*((void *)this + 32) + 2680);
    long long v392 = 0u;
    long long v393 = 0u;
    memset(buf, 0, sizeof(buf));
    int v87 = (*(_DWORD *)(v85 + 16) & 0xF) << 9;
    *(void *)&buf[0] = v86;
    int v88 = *(_DWORD *)(v85 + 228);
    *(_DWORD *)(v85 + 228) = 0;
    *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFF00;
    uint64_t v89 = *((void *)this + 33);
    int v90 = *(_DWORD *)(v89 + 228);
    *(_DWORD *)(v89 + 228) = v88;
    if (v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 228, v87, 0xFFFFFFFFLL, 8, v90, 4);
      if (result) {
        return result;
      }
      uint64_t v91 = *(void *)&buf[0];
      int v92 = DWORD2(v392);
      LODWORD(v86) = HIDWORD(v392);
    }
    else
    {
      int v92 = 0;
      uint64_t v91 = 0;
    }
    uint64_t v93 = *((void *)this + 33);
    int v94 = *(_DWORD *)(v93 + 408);
    *(_DWORD *)(v93 + 408) = 0;
    *(_DWORD *)(*((void *)this + 33) + 408) ^= 0x3FFu;
    uint64_t v95 = *((void *)this + 33);
    int v96 = *(_DWORD *)(v95 + 408);
    *(_DWORD *)(v95 + 408) = v94;
    if (v91 || v92 || v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 408, v87, 0x3FFFFFFFFFFLL, 32, v96, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 280) = 0;
  uint64_t v97 = *((void *)this + 33);
  int v98 = *(_DWORD *)(v97 + 280);
  *(_DWORD *)(v97 + 280) = 0;
  *(_DWORD *)(*((void *)this + 33) + 280) ^= 0xFFFFFF00;
  uint64_t v99 = *((void *)this + 33);
  int v100 = *(_DWORD *)(v99 + 280);
  *(_DWORD *)(v99 + 280) = v98;
  if (*((void *)this + 278) || *((_DWORD *)this + 594) || *((_DWORD *)this + 595))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 280, 0, 0xFFFFFFFFLL, 8, v100, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 460) = 0;
  uint64_t v101 = *((void *)this + 33);
  int v102 = *(_DWORD *)(v101 + 460);
  *(_DWORD *)(v101 + 460) = 0;
  *(_DWORD *)(*((void *)this + 33) + 460) ^= 0x3FFu;
  uint64_t v103 = *((void *)this + 33);
  int v104 = *(_DWORD *)(v103 + 460);
  *(_DWORD *)(v103 + 460) = v102;
  if (*((void *)this + 278) || *((_DWORD *)this + 594) || *((_DWORD *)this + 595))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 460, 0, 0x3FFFFFFFFFFLL, 32, v104, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 232) = 0;
  uint64_t v105 = *((void *)this + 33);
  int v106 = *(_DWORD *)(v105 + 232);
  *(_DWORD *)(v105 + 232) = 0;
  *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFF00;
  uint64_t v107 = *((void *)this + 33);
  int v108 = *(_DWORD *)(v107 + 232);
  *(_DWORD *)(v107 + 232) = v106;
  if (*((void *)this + 234) || *((_DWORD *)this + 506) || *((_DWORD *)this + 507))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 232, 0, 0xFFFFFFFFLL, 8, v108, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 412) = 0;
  uint64_t v109 = *((void *)this + 33);
  int v110 = *(_DWORD *)(v109 + 412);
  *(_DWORD *)(v109 + 412) = 0;
  *(_DWORD *)(*((void *)this + 33) + 412) ^= 0x3FFu;
  uint64_t v111 = *((void *)this + 33);
  int v112 = *(_DWORD *)(v111 + 412);
  *(_DWORD *)(v111 + 412) = v110;
  if (*((void *)this + 234) || *((_DWORD *)this + 506) || *((_DWORD *)this + 507))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 412, 0, 0x3FFFFFFFFFFLL, 32, v112, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 236) = 0;
  uint64_t v113 = *((void *)this + 33);
  int v114 = *(_DWORD *)(v113 + 236);
  *(_DWORD *)(v113 + 236) = 0;
  *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFF00;
  uint64_t v115 = *((void *)this + 33);
  int v116 = *(_DWORD *)(v115 + 236);
  *(_DWORD *)(v115 + 236) = v114;
  if (*((void *)this + 256) || *((_DWORD *)this + 550) || *((_DWORD *)this + 551))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 236, 0, 0xFFFFFFFFLL, 8, v116, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 416) = 0;
  uint64_t v117 = *((void *)this + 33);
  int v118 = *(_DWORD *)(v117 + 416);
  *(_DWORD *)(v117 + 416) = 0;
  *(_DWORD *)(*((void *)this + 33) + 416) ^= 0x3FFu;
  uint64_t v119 = *((void *)this + 33);
  int v120 = *(_DWORD *)(v119 + 416);
  *(_DWORD *)(v119 + 416) = v118;
  if (*((void *)this + 256) || *((_DWORD *)this + 550) || *((_DWORD *)this + 551))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 416, 0, 0x3FFFFFFFFFFLL, 32, v120, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 240) = 0;
  *(_DWORD *)(*((void *)this + 33) + 420) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) = 0;
  uint64_t v121 = *((void *)this + 33);
  int v122 = *(_DWORD *)(v121 + 244);
  *(_DWORD *)(v121 + 244) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFF00;
  uint64_t v123 = *((void *)this + 33);
  int v124 = *(_DWORD *)(v123 + 244);
  *(_DWORD *)(v123 + 244) = v122;
  if (*((void *)this + 300) || *((_DWORD *)this + 638) || *((_DWORD *)this + 639))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 244, 0, 0xFFFFFFFFLL, 8, v124, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 424) = 0;
  uint64_t v125 = *((void *)this + 33);
  int v126 = *(_DWORD *)(v125 + 424);
  *(_DWORD *)(v125 + 424) = 0;
  *(_DWORD *)(*((void *)this + 33) + 424) ^= 0x3FFu;
  uint64_t v127 = *((void *)this + 33);
  int v128 = *(_DWORD *)(v127 + 424);
  *(_DWORD *)(v127 + 424) = v126;
  if (*((void *)this + 300) || *((_DWORD *)this + 638) || *((_DWORD *)this + 639))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 424, 0, 0x3FFFFFFFFFFLL, 32, v128, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 248) = 0;
  uint64_t v129 = *((void *)this + 33);
  int v130 = *(_DWORD *)(v129 + 248);
  *(_DWORD *)(v129 + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFF00;
  uint64_t v131 = *((void *)this + 33);
  int v132 = *(_DWORD *)(v131 + 248);
  *(_DWORD *)(v131 + 248) = v130;
  if (*((void *)this + 322) || *((_DWORD *)this + 682) || *((_DWORD *)this + 683))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 248, 0, 0xFFFFFFFFLL, 8, v132, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 428) = 0;
  uint64_t v133 = *((void *)this + 33);
  int v134 = *(_DWORD *)(v133 + 428);
  *(_DWORD *)(v133 + 428) = 0;
  *(_DWORD *)(*((void *)this + 33) + 428) ^= 0x3FFu;
  uint64_t v135 = *((void *)this + 33);
  int v136 = *(_DWORD *)(v135 + 428);
  *(_DWORD *)(v135 + 428) = v134;
  if (*((void *)this + 322) || *((_DWORD *)this + 682) || *((_DWORD *)this + 683))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 428, 0, 0x3FFFFFFFFFFLL, 32, v136, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 432) = 0;
  uint64_t v137 = *((void *)this + 33);
  int v138 = *(_DWORD *)(v137 + 252);
  *(_DWORD *)(v137 + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFF00;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 252);
  *(_DWORD *)(v139 + 252) = v138;
  if (*((void *)this + 344) || *((_DWORD *)this + 726) || *((_DWORD *)this + 727))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 252, 0, 0xFFFFFFFFLL, 8, v140, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 432);
  *(_DWORD *)(v141 + 432) = 0;
  *(_DWORD *)(*((void *)this + 33) + 432) ^= 0x3FFu;
  uint64_t v143 = *((void *)this + 33);
  int v144 = *(_DWORD *)(v143 + 432);
  *(_DWORD *)(v143 + 432) = v142;
  if (*((void *)this + 344) || *((_DWORD *)this + 726) || *((_DWORD *)this + 727))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 432, 0, 0x3FFFFFFFFFFLL, 32, v144, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 256) = 0;
  uint64_t v145 = *((void *)this + 33);
  int v146 = *(_DWORD *)(v145 + 256);
  *(_DWORD *)(v145 + 256) = 0;
  *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFF00;
  uint64_t v147 = *((void *)this + 33);
  int v148 = *(_DWORD *)(v147 + 256);
  *(_DWORD *)(v147 + 256) = v146;
  if (*((void *)this + 366) || *((_DWORD *)this + 770) || *((_DWORD *)this + 771))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 256, 0, 0xFFFFFFFFLL, 8, v148, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 436) = 0;
  uint64_t v149 = *((void *)this + 33);
  int v150 = *(_DWORD *)(v149 + 436);
  *(_DWORD *)(v149 + 436) = 0;
  *(_DWORD *)(*((void *)this + 33) + 436) ^= 0x3FFu;
  uint64_t v151 = *((void *)this + 33);
  int v152 = *(_DWORD *)(v151 + 436);
  *(_DWORD *)(v151 + 436) = v150;
  if (*((void *)this + 366) || *((_DWORD *)this + 770) || *((_DWORD *)this + 771))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 436, 0, 0x3FFFFFFFFFFLL, 32, v152, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 260) = 0;
  uint64_t v153 = *((void *)this + 33);
  int v154 = *(_DWORD *)(v153 + 260);
  *(_DWORD *)(v153 + 260) = 0;
  *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFF00;
  uint64_t v155 = *((void *)this + 33);
  int v156 = *(_DWORD *)(v155 + 260);
  *(_DWORD *)(v155 + 260) = v154;
  uint64_t v157 = *((void *)this + 32);
  unsigned int v158 = *(_DWORD *)(v157 + 17568);
  uint64_t v159 = v157 + 176 * v158;
  if (*(void *)(v159 + 3072) || *(_DWORD *)(v157 + 176 * v158 + 3224) || *(_DWORD *)(v157 + 176 * v158 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v159 + 3072), 260, 0, 0xFFFFFFFFLL, 8, v156, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 440) = 0;
  uint64_t v160 = *((void *)this + 33);
  int v161 = *(_DWORD *)(v160 + 440);
  *(_DWORD *)(v160 + 440) = 0;
  *(_DWORD *)(*((void *)this + 33) + 440) ^= 0x3FFu;
  uint64_t v162 = *((void *)this + 33);
  int v163 = *(_DWORD *)(v162 + 440);
  *(_DWORD *)(v162 + 440) = v161;
  uint64_t v164 = *((void *)this + 32);
  unsigned int v165 = *(_DWORD *)(v164 + 17568);
  uint64_t v166 = v164 + 176 * v165;
  if (*(void *)(v166 + 3072) || *(_DWORD *)(v164 + 176 * v165 + 3224) || *(_DWORD *)(v164 + 176 * v165 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v166 + 3072), 440, 0, 0x3FFFFFFFFFFLL, 32, v163, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 264) = 0;
  uint64_t v167 = *((void *)this + 33);
  int v168 = *(_DWORD *)(v167 + 264);
  *(_DWORD *)(v167 + 264) = 0;
  *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFF00;
  uint64_t v169 = *((void *)this + 33);
  int v170 = *(_DWORD *)(v169 + 264);
  *(_DWORD *)(v169 + 264) = v168;
  uint64_t v171 = *((void *)this + 32);
  int v172 = *(_DWORD *)(v171 + 5724);
  uint64_t v173 = v171 + 176 * v172;
  if (*(void *)(v173 + 3776) || *(_DWORD *)(v171 + 176 * v172 + 3928) || *(_DWORD *)(v171 + 176 * v172 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v173 + 3776), 264, 0, 0xFFFFFFFFLL, 8, v170, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 444) = 0;
  uint64_t v174 = *((void *)this + 33);
  int v175 = *(_DWORD *)(v174 + 444);
  *(_DWORD *)(v174 + 444) = 0;
  *(_DWORD *)(*((void *)this + 33) + 444) ^= 0x3FFu;
  uint64_t v176 = *((void *)this + 33);
  int v177 = *(_DWORD *)(v176 + 444);
  *(_DWORD *)(v176 + 444) = v175;
  uint64_t v178 = *((void *)this + 32);
  int v179 = *(_DWORD *)(v178 + 5724);
  uint64_t v180 = v178 + 176 * v179;
  if (*(void *)(v180 + 3776) || *(_DWORD *)(v178 + 176 * v179 + 3928) || *(_DWORD *)(v178 + 176 * v179 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v180 + 3776), 444, 0, 0x3FFFFFFFFFFLL, 32, v177, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 268) = 0;
  uint64_t v181 = *((void *)this + 33);
  int v182 = *(_DWORD *)(v181 + 268);
  *(_DWORD *)(v181 + 268) = 0;
  *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFF00;
  uint64_t v183 = *((void *)this + 33);
  int v184 = *(_DWORD *)(v183 + 268);
  *(_DWORD *)(v183 + 268) = v182;
  uint64_t v185 = *((void *)this + 32);
  int v186 = *(_DWORD *)(v185 + 5720);
  uint64_t v187 = v185 + 176 * v186;
  if (*(void *)(v187 + 3776) || *(_DWORD *)(v185 + 176 * v186 + 3928) || *(_DWORD *)(v185 + 176 * v186 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v187 + 3776), 268, 0, 0xFFFFFFFFLL, 8, v184, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 448) = 0;
  uint64_t v188 = *((void *)this + 33);
  int v189 = *(_DWORD *)(v188 + 448);
  *(_DWORD *)(v188 + 448) = 0;
  *(_DWORD *)(*((void *)this + 33) + 448) ^= 0x3FFu;
  uint64_t v190 = *((void *)this + 33);
  int v191 = *(_DWORD *)(v190 + 448);
  *(_DWORD *)(v190 + 448) = v189;
  uint64_t v192 = *((void *)this + 32);
  int v193 = *(_DWORD *)(v192 + 5720);
  uint64_t v194 = v192 + 176 * v193;
  if (*(void *)(v194 + 3776) || *(_DWORD *)(v192 + 176 * v193 + 3928) || *(_DWORD *)(v192 + 176 * v193 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v194 + 3776), 448, 0, 0x3FFFFFFFFFFLL, 32, v191, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 272) = 0;
  uint64_t v195 = *((void *)this + 33);
  int v196 = *(_DWORD *)(v195 + 272);
  *(_DWORD *)(v195 + 272) = 0;
  *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFF00;
  uint64_t v197 = *((void *)this + 33);
  int v198 = *(_DWORD *)(v197 + 272);
  *(_DWORD *)(v197 + 272) = v196;
  uint64_t v199 = *((void *)this + 32);
  int v200 = *(_DWORD *)(v199 + 5716);
  uint64_t v201 = v199 + 176 * v200;
  if (*(void *)(v201 + 5360) || *(_DWORD *)(v199 + 176 * v200 + 5512) || *(_DWORD *)(v199 + 176 * v200 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v201 + 5360), 272, 0, 0xFFFFFFFFLL, 8, v198, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 452) = 0;
  uint64_t v202 = *((void *)this + 33);
  int v203 = *(_DWORD *)(v202 + 452);
  *(_DWORD *)(v202 + 452) = 0;
  *(_DWORD *)(*((void *)this + 33) + 452) ^= 0x3FFu;
  uint64_t v204 = *((void *)this + 33);
  int v205 = *(_DWORD *)(v204 + 452);
  *(_DWORD *)(v204 + 452) = v203;
  uint64_t v206 = *((void *)this + 32);
  int v207 = *(_DWORD *)(v206 + 5716);
  uint64_t v208 = v206 + 176 * v207;
  if (*(void *)(v208 + 5360) || *(_DWORD *)(v206 + 176 * v207 + 5512) || *(_DWORD *)(v206 + 176 * v207 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v208 + 5360), 452, 0, 0x3FFFFFFFFFFLL, 32, v205, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 276) = 0;
  uint64_t v209 = *((void *)this + 33);
  int v210 = *(_DWORD *)(v209 + 276);
  *(_DWORD *)(v209 + 276) = 0;
  *(_DWORD *)(*((void *)this + 33) + 276) ^= 0xFFFFFF00;
  uint64_t v211 = *((void *)this + 33);
  int v212 = *(_DWORD *)(v211 + 276);
  *(_DWORD *)(v211 + 276) = v210;
  uint64_t v213 = *((void *)this + 32);
  int v214 = *(_DWORD *)(v213 + 5712);
  uint64_t v215 = v213 + 176 * v214;
  if (*(void *)(v215 + 5360) || *(_DWORD *)(v213 + 176 * v214 + 5512) || *(_DWORD *)(v213 + 176 * v214 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v215 + 5360), 276, 0, 0xFFFFFFFFLL, 8, v212, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 456) = 0;
  uint64_t v216 = *((void *)this + 33);
  int v217 = *(_DWORD *)(v216 + 456);
  *(_DWORD *)(v216 + 456) = 0;
  *(_DWORD *)(*((void *)this + 33) + 456) ^= 0x3FFu;
  uint64_t v218 = *((void *)this + 33);
  int v219 = *(_DWORD *)(v218 + 456);
  *(_DWORD *)(v218 + 456) = v217;
  uint64_t v220 = *((void *)this + 32);
  int v221 = *(_DWORD *)(v220 + 5712);
  uint64_t v222 = v220 + 176 * v221;
  if (*(void *)(v222 + 5360) || *(_DWORD *)(v220 + 176 * v221 + 5512) || *(_DWORD *)(v220 + 176 * v221 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v222 + 5360), 456, 0, 0x3FFFFFFFFFFLL, 32, v219, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 464) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 468) = 0;
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 472) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 476) = 0;
  uint64_t v223 = *((void *)this + 33);
  int v224 = *(_DWORD *)(v223 + 288);
  *(_DWORD *)(v223 + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) ^= 0xFFFFFF80;
  uint64_t v225 = *((void *)this + 33);
  int v226 = *(_DWORD *)(v225 + 288);
  *(_DWORD *)(v225 + 288) = v224;
  uint64_t v227 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v227 || *(_DWORD *)(v227 + 152) || *(_DWORD *)(v227 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v227, 288, *(_DWORD *)(v227 + 52), 0xFFFFFFFFLL, 7, v226, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v228 = *((void *)this + 33);
  int v229 = *(_DWORD *)(v228 + 468);
  *(_DWORD *)(v228 + 468) = 0;
  *(_DWORD *)(*((void *)this + 33) + 468) ^= 0x3FFu;
  uint64_t v230 = *((void *)this + 33);
  int v231 = *(_DWORD *)(v230 + 468);
  *(_DWORD *)(v230 + 468) = v229;
  uint64_t v232 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v232 || *(_DWORD *)(v232 + 152) || *(_DWORD *)(v232 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v232, 468, *(_DWORD *)(v232 + 52), 0x3FFFFFFFFFFLL, 32, v231, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v233 = *((void *)this + 33);
  int v234 = *(_DWORD *)(v233 + 296);
  *(_DWORD *)(v233 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0xFFFFFF80;
  uint64_t v235 = *((void *)this + 33);
  int v236 = *(_DWORD *)(v235 + 296);
  *(_DWORD *)(v235 + 296) = v234;
  uint64_t v237 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v237 || *(_DWORD *)(v237 + 152) || *(_DWORD *)(v237 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v237, 296, *(_DWORD *)(v237 + 56), 0xFFFFFFFFLL, 7, v236, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v238 = v3;
  uint64_t v239 = *((void *)this + 33);
  int v240 = *(_DWORD *)(v239 + 476);
  *(_DWORD *)(v239 + 476) = 0;
  *(_DWORD *)(*((void *)this + 33) + 476) ^= 0x3FFu;
  uint64_t v241 = *((void *)this + 33);
  int v242 = *(_DWORD *)(v241 + 476);
  *(_DWORD *)(v241 + 476) = v240;
  uint64_t v243 = *((void *)this + 32);
  uint64_t v244 = *(void *)(v243 + 376 * v6 + 5736);
  if (*(void *)v244 || *(_DWORD *)(v244 + 152) || *(_DWORD *)(v244 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v244, 476, *(_DWORD *)(v244 + 56), 0x3FFFFFFFFFFLL, 32, v242, 4);
    if (result) {
      return result;
    }
    uint64_t v243 = *((void *)this + 32);
  }
  int v245 = *(_DWORD *)(v243 + 2648);
  uint64_t v246 = *((void *)this + 33);
  int v247 = *(_DWORD *)(v246 + 284);
  *(_DWORD *)(v246 + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 284) ^= 0xFFFFFF80;
  uint64_t v248 = *((void *)this + 33);
  int v249 = *(_DWORD *)(v248 + 284);
  *(_DWORD *)(v248 + 284) = v247;
  uint64_t v250 = *((void *)this + 32);
  if (v245 == 1)
  {
    uint64_t v251 = *(void *)(v250 + 376 * v6 + 5736);
    if (*(void *)v251 || *(_DWORD *)(v251 + 152) || *(_DWORD *)(v251 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v251, 284, *(_DWORD *)(v251 + 64), 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v252 = *((void *)this + 33);
    int v253 = *(_DWORD *)(v252 + 464);
    *(_DWORD *)(v252 + 464) = 0;
    *(_DWORD *)(*((void *)this + 33) + 464) ^= 0x3FFu;
    uint64_t v254 = *((void *)this + 33);
    int v255 = *(_DWORD *)(v254 + 464);
    *(_DWORD *)(v254 + 464) = v253;
    uint64_t v256 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v256 || *(_DWORD *)(v256 + 152) || *(_DWORD *)(v256 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v256, 464, *(_DWORD *)(v256 + 64), 0x3FFFFFFFFFFLL, 32, v255, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v257 = *((void *)this + 33);
    int v258 = *(_DWORD *)(v257 + 292);
    *(_DWORD *)(v257 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF80;
    uint64_t v259 = *((void *)this + 33);
    int v260 = *(_DWORD *)(v259 + 292);
    *(_DWORD *)(v259 + 292) = v258;
    uint64_t v261 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v261 || *(_DWORD *)(v261 + 152) || *(_DWORD *)(v261 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v261, 292, *(_DWORD *)(v261 + 68), 0xFFFFFFFFLL, 7, v260, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v262 = *((void *)this + 33);
    int v263 = *(_DWORD *)(v262 + 472);
    *(_DWORD *)(v262 + 472) = 0;
    *(_DWORD *)(*((void *)this + 33) + 472) ^= 0x3FFu;
    uint64_t v264 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v264 + 472);
    *(_DWORD *)(v264 + 472) = v263;
    uint64_t v266 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v266 || *(_DWORD *)(v266 + 152) || *(_DWORD *)(v266 + 156))
    {
      int v267 = *(_DWORD *)(v266 + 68);
      v268 = this;
      goto LABEL_207;
    }
  }
  else
  {
    uint64_t v269 = v250 + 376 * v6;
    if (*(void *)(v269 + 5752) || *(_DWORD *)(v250 + 376 * v6 + 5904) || *(_DWORD *)(v250 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v269 + 5752), 284, 0, 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v270 = *((void *)this + 33);
    int v271 = *(_DWORD *)(v270 + 464);
    *(_DWORD *)(v270 + 464) = 0;
    *(_DWORD *)(*((void *)this + 33) + 464) ^= 0x3FFu;
    uint64_t v272 = *((void *)this + 33);
    int v273 = *(_DWORD *)(v272 + 464);
    *(_DWORD *)(v272 + 464) = v271;
    uint64_t v274 = *((void *)this + 32);
    uint64_t v275 = v274 + 376 * v6;
    if (*(void *)(v275 + 5752) || *(_DWORD *)(v274 + 376 * v6 + 5904) || *(_DWORD *)(v274 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v275 + 5752), 464, 0, 0x3FFFFFFFFFFLL, 32, v273, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v276 = *((void *)this + 33);
    int v277 = *(_DWORD *)(v276 + 292);
    *(_DWORD *)(v276 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF80;
    uint64_t v278 = *((void *)this + 33);
    int v279 = *(_DWORD *)(v278 + 292);
    *(_DWORD *)(v278 + 292) = v277;
    uint64_t v280 = *((void *)this + 32);
    uint64_t v281 = v280 + 376 * v6;
    if (*(void *)(v281 + 5928) || *(_DWORD *)(v280 + 376 * v6 + 6080) || *(_DWORD *)(v280 + 376 * v6 + 6084))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v281 + 5928), 292, 0, 0xFFFFFFFFLL, 7, v279, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v282 = *((void *)this + 33);
    int v283 = *(_DWORD *)(v282 + 472);
    *(_DWORD *)(v282 + 472) = 0;
    *(_DWORD *)(*((void *)this + 33) + 472) ^= 0x3FFu;
    uint64_t v284 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v284 + 472);
    *(_DWORD *)(v284 + 472) = v283;
    uint64_t v285 = *((void *)this + 32);
    uint64_t v286 = v285 + 376 * v6;
    if (*(void *)(v286 + 5928) || *(_DWORD *)(v285 + 376 * v6 + 6080) || *(_DWORD *)(v285 + 376 * v6 + 6084))
    {
      uint64_t v266 = v286 + 5928;
      v268 = this;
      int v267 = 0;
LABEL_207:
      uint64_t result = CAHDec::addToPatcherList((uint64_t)v268, (void *)v266, 472, v267, 0x3FFFFFFFFFFLL, 32, v265, 4);
      if (result) {
        return result;
      }
    }
  }
  if (!v383)
  {
    uint64_t v319 = 0;
    uint64_t v320 = 17424;
    do
    {
      uint64_t v321 = *(void *)(*(void *)(*((void *)this + 32) + v320) + 40);
      *(_DWORD *)(*((void *)this + 33) + v319 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 480) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 492) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 336) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 504) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 516) = 0;
      uint64_t v322 = *((void *)this + 33) + v319;
      int v323 = *(_DWORD *)(v322 + 324);
      *(_DWORD *)(v322 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 324) ^= 0xFFFFFF80;
      uint64_t v324 = *((void *)this + 33) + v319;
      int v325 = *(_DWORD *)(v324 + 324);
      *(_DWORD *)(v324 + 324) = v323;
      uint64_t v326 = *(void *)(v321 + 8);
      if (*(void *)v326 || *(_DWORD *)(v326 + 152) || *(_DWORD *)(v326 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v326, (int)v319 + 324, *(_DWORD *)(v326 + 52), 0xFFFFFFFFLL, 7, v325, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v327 = *((void *)this + 33) + v319;
      int v328 = *(_DWORD *)(v327 + 492);
      *(_DWORD *)(v327 + 492) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 492) ^= 0x3FFu;
      uint64_t v329 = *((void *)this + 33) + v319;
      int v330 = *(_DWORD *)(v329 + 492);
      *(_DWORD *)(v329 + 492) = v328;
      uint64_t v331 = *(void *)(v321 + 8);
      if (*(void *)v331 || *(_DWORD *)(v331 + 152) || *(_DWORD *)(v331 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v331, (int)v319 + 492, *(_DWORD *)(v331 + 52), 0x3FFFFFFFFFFLL, 32, v330, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v332 = *((void *)this + 33) + v319;
      int v333 = *(_DWORD *)(v332 + 348);
      *(_DWORD *)(v332 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 348) ^= 0xFFFFFF80;
      uint64_t v334 = *((void *)this + 33) + v319;
      int v335 = *(_DWORD *)(v334 + 348);
      *(_DWORD *)(v334 + 348) = v333;
      uint64_t v336 = *(void *)(v321 + 8);
      if (*(void *)v336 || *(_DWORD *)(v336 + 152) || *(_DWORD *)(v336 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v336, (int)v319 + 348, *(_DWORD *)(v336 + 56), 0xFFFFFFFFLL, 7, v335, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v337 = *((void *)this + 33) + v319;
      int v338 = *(_DWORD *)(v337 + 516);
      *(_DWORD *)(v337 + 516) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 516) ^= 0x3FFu;
      uint64_t v339 = *((void *)this + 33) + v319;
      int v340 = *(_DWORD *)(v339 + 516);
      *(_DWORD *)(v339 + 516) = v338;
      uint64_t v341 = *(void *)(v321 + 8);
      if (*(void *)v341 || *(_DWORD *)(v341 + 152) || *(_DWORD *)(v341 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v341, (int)v319 + 516, *(_DWORD *)(v341 + 56), 0x3FFFFFFFFFFLL, 32, v340, 4);
        if (result) {
          return result;
        }
      }
      int v342 = *(_DWORD *)(*((void *)this + 32) + 2648);
      uint64_t v343 = *((void *)this + 33) + v319;
      int v344 = *(_DWORD *)(v343 + 312);
      *(_DWORD *)(v343 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 312) ^= 0xFFFFFF80;
      uint64_t v345 = *((void *)this + 33) + v319;
      int v346 = *(_DWORD *)(v345 + 312);
      *(_DWORD *)(v345 + 312) = v344;
      if (v342 == 1)
      {
        uint64_t v347 = *(void *)(v321 + 8);
        if (*(void *)v347 || *(_DWORD *)(v347 + 152) || *(_DWORD *)(v347 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v347, (int)v319 + 312, *(_DWORD *)(v347 + 64), 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v348 = *((void *)this + 33) + v319;
        int v349 = *(_DWORD *)(v348 + 480);
        *(_DWORD *)(v348 + 480) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 480) ^= 0x3FFu;
        uint64_t v350 = *((void *)this + 33) + v319;
        int v351 = *(_DWORD *)(v350 + 480);
        *(_DWORD *)(v350 + 480) = v349;
        uint64_t v352 = *(void *)(v321 + 8);
        if (*(void *)v352 || *(_DWORD *)(v352 + 152) || *(_DWORD *)(v352 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v352, (int)v319 + 480, *(_DWORD *)(v352 + 64), 0x3FFFFFFFFFFLL, 32, v351, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v353 = *((void *)this + 33) + v319;
        int v354 = *(_DWORD *)(v353 + 336);
        *(_DWORD *)(v353 + 336) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 336) ^= 0xFFFFFF80;
        uint64_t v355 = *((void *)this + 33) + v319;
        int v356 = *(_DWORD *)(v355 + 336);
        *(_DWORD *)(v355 + 336) = v354;
        uint64_t v357 = *(void *)(v321 + 8);
        if (*(void *)v357 || *(_DWORD *)(v357 + 152) || *(_DWORD *)(v357 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v357, (int)v319 + 336, *(_DWORD *)(v357 + 68), 0xFFFFFFFFLL, 7, v356, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v358 = *((void *)this + 33) + v319;
        int v359 = *(_DWORD *)(v358 + 504);
        *(_DWORD *)(v358 + 504) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 504) ^= 0x3FFu;
        uint64_t v360 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v360 + 504);
        *(_DWORD *)(v360 + 504) = v359;
        uint64_t v362 = *(void *)(v321 + 8);
        if (*(void *)v362 || *(_DWORD *)(v362 + 152) || *(_DWORD *)(v362 + 156))
        {
          int v363 = *(_DWORD *)(v362 + 68);
          int v364 = v319 + 504;
          v365 = this;
          goto LABEL_298;
        }
      }
      else
      {
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 312, 0, 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v366 = *((void *)this + 33) + v319;
        int v367 = *(_DWORD *)(v366 + 480);
        *(_DWORD *)(v366 + 480) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 480) ^= 0x3FFu;
        uint64_t v368 = *((void *)this + 33) + v319;
        int v369 = *(_DWORD *)(v368 + 480);
        *(_DWORD *)(v368 + 480) = v367;
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 480, 0, 0x3FFFFFFFFFFLL, 32, v369, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v370 = *((void *)this + 33) + v319;
        int v371 = *(_DWORD *)(v370 + 336);
        *(_DWORD *)(v370 + 336) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 336) ^= 0xFFFFFF80;
        uint64_t v372 = *((void *)this + 33) + v319;
        int v373 = *(_DWORD *)(v372 + 336);
        *(_DWORD *)(v372 + 336) = v371;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 200), (int)v319 + 336, 0, 0xFFFFFFFFLL, 7, v373, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v374 = *((void *)this + 33) + v319;
        int v375 = *(_DWORD *)(v374 + 504);
        *(_DWORD *)(v374 + 504) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 504) ^= 0x3FFu;
        uint64_t v376 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v376 + 504);
        *(_DWORD *)(v376 + 504) = v375;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          int v364 = v319 + 504;
          v365 = this;
          uint64_t v362 = v321 + 200;
          int v363 = 0;
LABEL_298:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v365, (void *)v362, v364, v363, 0x3FFFFFFFFFFLL, 32, v361, 4);
          if (result) {
            return result;
          }
        }
      }
      v320 += 8;
      v319 += 4;
    }
    while (v319 != 12);
  }
  unsigned int v287 = subWidth[*(int *)(*(void *)(*((void *)this + 32) + 17560) + 4)];
  *(_DWORD *)(*((void *)this + 33) + 360) = 0;
  *(_DWORD *)(*((void *)this + 33) + 528) = 0;
  *(_DWORD *)(*((void *)this + 33) + 364) = 0;
  *(_DWORD *)(*((void *)this + 33) + 532) = 0;
  *(_DWORD *)(*((void *)this + 33) + 368) = 0;
  *(_DWORD *)(*((void *)this + 33) + 372) = 0;
  if (*(_DWORD *)(*((void *)this + 32) + 2644))
  {
    uint64_t v288 = *((void *)this + 33);
    int v289 = *(_DWORD *)(v288 + 360);
    *(_DWORD *)(v288 + 360) = 0;
    *(_DWORD *)(*((void *)this + 33) + 360) ^= 0xFFFFFFC0;
    uint64_t v290 = *((void *)this + 33);
    int v291 = *(_DWORD *)(v290 + 360);
    *(_DWORD *)(v290 + 360) = v289;
    uint64_t v292 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v292 || *(_DWORD *)(v292 + 152) || *(_DWORD *)(v292 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v292, 360, *(_DWORD *)(v292 + 52), 0xFFFFFFFFLL, 6, v291, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v293 = *((void *)this + 33);
    int v294 = *(_DWORD *)(v293 + 528);
    *(_DWORD *)(v293 + 528) = 0;
    *(_DWORD *)(*((void *)this + 33) + 528) ^= 0x3FFu;
    uint64_t v295 = *((void *)this + 33);
    int v296 = *(_DWORD *)(v295 + 528);
    *(_DWORD *)(v295 + 528) = v294;
    uint64_t v297 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v297 || *(_DWORD *)(v297 + 152) || *(_DWORD *)(v297 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v297, 528, *(_DWORD *)(v297 + 52), 0x3FFFFFFFFFFLL, 32, v296, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v298 = *((void *)this + 33);
    int v299 = *(_DWORD *)(v298 + 364);
    *(_DWORD *)(v298 + 364) = 0;
    *(_DWORD *)(*((void *)this + 33) + 364) ^= 0xFFFFFFC0;
    uint64_t v300 = *((void *)this + 33);
    int v301 = *(_DWORD *)(v300 + 364);
    *(_DWORD *)(v300 + 364) = v299;
    uint64_t v302 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v302 || *(_DWORD *)(v302 + 152) || *(_DWORD *)(v302 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v302, 364, *(_DWORD *)(v302 + 56), 0xFFFFFFFFLL, 6, v301, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v303 = *((void *)this + 33);
    int v304 = *(_DWORD *)(v303 + 532);
    *(_DWORD *)(v303 + 532) = 0;
    *(_DWORD *)(*((void *)this + 33) + 532) ^= 0x3FFu;
    uint64_t v305 = *((void *)this + 33);
    int v306 = *(_DWORD *)(v305 + 532);
    *(_DWORD *)(v305 + 532) = v304;
    uint64_t v307 = *((void *)this + 32);
    uint64_t v308 = *(void *)(v307 + 11768);
    if (*(void *)v308 || *(_DWORD *)(v308 + 152) || *(_DWORD *)(v308 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v308, 532, *(_DWORD *)(v308 + 56), 0x3FFFFFFFFFFLL, 32, v306, 4);
      if (result) {
        return result;
      }
      uint64_t v307 = *((void *)this + 32);
    }
    if (*(unsigned char *)(v307 + 8))
    {
      *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33) + 368) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(v307 + 11768) + 76) >> 6) & 0xFFF) << 6);
      v309 = (_DWORD *)(*(void *)(*((void *)this + 32) + 11768) + 80);
    }
    else
    {
      if (CAHDecCatnipLgh::getSWRStride(this, *(unsigned __int16 *)(v238 + 148) + 1, *(unsigned __int8 *)(v390 + 105) - 8, *(unsigned __int8 *)(v390 + 105) - 8, v287))return 0xFFFFFFFFLL; {
      *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33) + 368) & 0xFFFC003F | (((*((_DWORD *)this + 783) >> 6) & 0xFFF) << 6);
      }
      v309 = (_DWORD *)((char *)this + 3136);
    }
    *(_DWORD *)(*((void *)this + 33) + 372) = *(_DWORD *)(*((void *)this + 33) + 372) & 0xFFF8003F | (((*v309 >> 6) & 0x1FFF) << 6);
  }
  if (v385 < 2)
  {
    uint64_t v310 = *((void *)this + 33);
    *(_DWORD *)(v310 + 536) = 65537;
    *(_WORD *)(v310 + 540) = 0;
    *(_WORD *)(v310 + 542) = *(_DWORD *)(v390 + 108) >> 6;
    *(_WORD *)(v310 + 670) = 0;
    *(_WORD *)(v310 + 672) = *(_DWORD *)(v390 + 112) >> 6;
    uint64_t v311 = *((void *)this + 32);
  }
  else
  {
    uint64_t v310 = *((void *)this + 33);
    *(_WORD *)(v310 + 536) = v389;
    uint64_t v311 = *((void *)this + 32);
    if (v386 != 31)
    {
      if (v387 <= 1) {
        uint64_t v312 = 1;
      }
      else {
        uint64_t v312 = v387;
      }
      v313 = (unsigned char *)(*(void *)(v311 + 17560) + 2786);
      do
      {
        if (!*v313) {
          *(_WORD *)(v310 + 2 * v384 + 670) = *(_DWORD *)(v313 - 26) >> 3;
        }
        v313 += 1792;
        --v312;
      }
      while (v312);
    }
    *(_WORD *)(v310 + 538) = v387;
    if (v388 != 31)
    {
      uint64_t v314 = *(void *)(v311 + 17560);
      if (v389 <= 1) {
        uint64_t v315 = 1;
      }
      else {
        uint64_t v315 = v389;
      }
      v316 = (unsigned __int8 *)(v314 + 2786);
      v317 = (unsigned __int8 *)(v314 + 2786);
      do
      {
        int v318 = *v317;
        v317 += 28;
        if (!v318) {
          *(_WORD *)(v310 + 2 * v384 + 540) = *(_DWORD *)(v316 - 18) >> 3;
        }
        v316 = v317;
        --v315;
      }
      while (v315);
    }
  }
  if (*(_DWORD *)(v311 + 2360) != 1) {
    return 0;
  }
  *(_DWORD *)(v310 + 684) = *(_DWORD *)(v310 + 684) & 0xFFFFFFFE | *(_DWORD *)(v311 + 2508) & 1;
  if (*(_DWORD *)(v311 + 2508))
  {
    *(_DWORD *)(v310 + 692) = 0x10000000;
    *(_DWORD *)(v310 + 696) = *(_DWORD *)(v311 + 2368);
    *(void *)(v310 + 704) = 0;
    *(_DWORD *)(v310 + 700) = 0;
    *(_OWORD *)(v310 + 712) = *(_OWORD *)(v311 + 2372);
    long long v377 = *(_OWORD *)(v311 + 2388);
    *(_OWORD *)(v310 + 744) = *(_OWORD *)(v311 + 2404);
    *(_OWORD *)(v310 + 728) = v377;
  }
  *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v311 + 2512) & 1));
  if (*(_DWORD *)(v311 + 2512))
  {
    *(_DWORD *)(v310 + 760) = 0;
    char v378 = *(_DWORD *)(v311 + 2424);
    *(_DWORD *)(v310 + 760) = (*(_DWORD *)(v311 + 2424) & 1) << 22;
    int v379 = ((*(_DWORD *)(v311 + 2420) & 1) << 23) | ((v378 & 1) << 22) | 0x20000000;
    *(_DWORD *)(v310 + 760) = v379;
    *(_DWORD *)(v310 + 760) = v379 | (*(_DWORD *)(v311 + 2364) == 0);
    long long v380 = *(_OWORD *)(v311 + 2428);
    long long v381 = *(_OWORD *)(v311 + 2444);
    *(_OWORD *)(v310 + 796) = *(_OWORD *)(v311 + 2460);
    *(_OWORD *)(v310 + 780) = v381;
    *(_OWORD *)(v310 + 764) = v380;
  }
  *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v311 + 2516) & 1));
  *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v311 + 2520) & 1));
  *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v311 + 2524) & 1));
  if (!*(_DWORD *)(v311 + 2516)) {
    return 0;
  }
  *(_DWORD *)(v310 + 816) = 0;
  if (*(_DWORD *)(v311 + 2476) == 2) {
    int v382 = 805306368;
  }
  else {
    int v382 = 813694976;
  }
  *(_DWORD *)(v310 + 816) = v382;
  memcpy((void *)(v310 + 820), (const void *)(v311 + 2480), 4 * *(unsigned int *)(v311 + 2476));
  uint64_t result = 0;
  *(_DWORD *)(v311 + 2516) = 0;
  return result;
}

uint64_t CAHDecCatnipLgh::getSWRStride(CAHDecCatnipLgh *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *(void *)((char *)this + 3132) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 784) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        unsigned int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecCatnipLgh::getTileStartCTU(CAHDecCatnipLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 536);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecCatnipLgh::getTileEndCTU(CAHDecCatnipLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 536);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecCatnipLgh::populateAvdWork(CAHDecCatnipLgh *this)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  unint64_t v3 = *(unsigned int *)(v2 + 312);
  if (v3)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    LODWORD(v7) = 0;
    int v8 = 0;
    uint64_t v9 = v1 + 3908;
    uint64_t v39 = *(void *)(v2 + 16);
    unint64_t v40 = 0;
    unint64_t v10 = *(unsigned int *)(v2 + 316);
    unint64_t v11 = v10;
    uint64_t v37 = v9;
    uint64_t v38 = *(void *)(*((void *)this + 32) + 17560);
    do
    {
      uint64_t v36 = v5;
      if (v11)
      {
        unint64_t v12 = 0;
        do
        {
          uint64_t v13 = *((void *)this + 32);
          uint64_t v14 = *(void *)(v13 + 17560);
          uint64_t v15 = v14 + v5;
          if (!*(unsigned char *)(v14 + v5 + 2786))
          {
            *(_WORD *)(v9 + 4) = v8;
            *(_WORD *)(v9 + 6) = 0;
            *(_WORD *)(v9 + 10) = v6;
            int v41 = v6;
            int v42 = v8;
            if (*(unsigned char *)(v13 + 2834)) {
              uint64_t v16 = *(void *)(v13 + 2840);
            }
            else {
              uint64_t v16 = *(void *)(v13 + 1048) + 8;
            }
            unint64_t v17 = v39 + *(unsigned int *)(v15 + 2780) - *(void *)v16;
            int v18 = 36 * v7;
            unint64_t v19 = HIDWORD(v17);
            if (*(void *)v16 || *(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1101;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 3926, v17, 0x3FFFFFFFFFFLL, 32, -1, 2);
              if (result) {
                return result;
              }
              if (*(void *)v16) {
                goto LABEL_46;
              }
            }
            if (*(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
LABEL_46:
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1102;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 3928, v17, 0xFFFFFFFFLL, 0, -1, 4);
              if (result) {
                return result;
              }
            }
            unsigned int v21 = (_DWORD *)(v14 + v5);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v14 + v5 + 2776);
            int v22 = *(_DWORD *)(v15 + 2760);
            int v23 = v22 + 7;
            if (v22 >= 0) {
              int v23 = *(_DWORD *)(v15 + 2760);
            }
            int v24 = v21[692];
            *(_DWORD *)(v9 + 28) = (v23 << 13) & 0xFFFF0000 | (v24 / 8);
            int v25 = v21[691];
            int v27 = v25 - 1;
            BOOL v26 = v25 < 1;
            int v28 = v25 + 6;
            if (!v26) {
              int v28 = v27;
            }
            unsigned int v29 = (v28 << 13) & 0xFFFF0000;
            int v30 = v21[693];
            int v31 = v30 - 1;
            BOOL v26 = v30 < 1;
            int v32 = v30 + 6;
            if (!v26) {
              int v32 = v31;
            }
            *(_DWORD *)(v9 + 32) = v29 | (v32 >> 3);
            if (v22 + v24) {
              __int16 v33 = 4;
            }
            else {
              __int16 v33 = 5;
            }
            *(_WORD *)(v9 + 12) = v33;
            unint64_t v3 = *(unsigned int *)(v38 + 312);
            unint64_t v10 = *(unsigned int *)(v38 + 316);
            if (v12 == v10 && v40 == v3) {
              __int16 v35 = 5;
            }
            else {
              __int16 v35 = 4;
            }
            *(_WORD *)(v9 + 14) = v35;
            int v6 = v41 + 1;
            int v8 = v42 + 1;
            v9 += 36;
            unint64_t v7 = 0x8E38E38E38E38E39 * ((v9 - v37) >> 2);
          }
          ++v12;
          v5 += 28;
          unint64_t v11 = v10;
        }
        while (v12 < v10);
      }
      uint64_t v5 = v36 + 1792;
      ++v40;
    }
    while (v40 < v3);
    uint64_t v1 = *((void *)this + 33);
  }
  else
  {
    LOWORD(v8) = 0;
  }
  uint64_t result = 0;
  *(_WORD *)(v1 + 26) = v8;
  *(_DWORD *)(v1 + 32) = 3908;
  return result;
}

unsigned __int8 *CAHDecCatnipLgh::getTileAddr(CAHDecCatnipLgh *this, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  if (*(unsigned char *)(v2 + 2834))
  {
    unint64_t v3 = *(void **)(v2 + 2840);
    uint64_t v4 = &a2[-*v3];
    uint64_t v5 = &v4[v3[2]];
    if ((unint64_t)v5 >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1202;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      unint64_t v7 = (void *)(*(void *)(*((void *)this + 32) + 2840) + 16);
      return &v4[*v7];
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 1048);
    uint64_t v9 = *(void *)(v8 + 24);
    unint64_t v7 = (void *)(v8 + 24);
    uint64_t v4 = &a2[-*(v7 - 2)];
    uint64_t v5 = &v4[v9];
    if ((unint64_t)&v4[v9] >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1219;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      return &v4[*v7];
    }
  }
  return v5;
}

uint64_t CAHDecCatnipLgh::allocWorkBuf_SPS(CAHDecCatnipLgh *this, int *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = *a2 + 31;
  if (*a2 < -31) {
    int v5 = *a2 + 62;
  }
  unsigned int v6 = v5 >> 5;
  int v7 = v4 + 31;
  if (v4 < -31) {
    int v7 = v4 + 62;
  }
  unsigned int v8 = v7 >> 5;
  unsigned int v9 = 32 - __clz(v6 - 1);
  if (v6 >= 2) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  unsigned int v11 = 32 - __clz(v8 - 1);
  if (v8 >= 2) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unsigned int v13 = ((32 << (v12 + v10)) + 127) & 0xFFFFFF80;
  int v14 = 2 * v3 + 62;
  if (2 * v3 >= -31) {
    int v14 = 2 * v3 + 31;
  }
  unsigned int v15 = v14 >> 5;
  int v16 = v4 + 15;
  if (v4 < -15) {
    int v16 = v4 + 30;
  }
  unsigned int v17 = v16 >> 4;
  unsigned int v18 = 32 - __clz(v15 - 1);
  if (v15 >= 2) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  unsigned int v20 = 32 - __clz(v17 - 1);
  if (v17 >= 2) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  *((_DWORD *)this + 776) = v13;
  *((_DWORD *)this + 777) = ((8 << (v19 + v21)) + 127) & 0xFFFFFF80;
  unsigned int v22 = ((v4 + 63) >> 6) * ((v3 + 63) >> 6);
  *((_DWORD *)this + 781) = 576 * v22;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_28:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      char v29 = v28;
      uint64_t v30 = *((unsigned int *)this + 781);
      if (v30
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 176 * v27 + 5360), v30, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1425;
        __int16 v39 = 2080;
        unint64_t v40 = "MvColo";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v29 & 1) != 0);
    unsigned int v31 = 24 * v22;
    *((_DWORD *)this + 785) = 24 * v22;
    uint64_t v32 = 3776;
    if (!v31) {
      goto LABEL_34;
    }
LABEL_33:
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v32), v31, 7, 1, 0))
    {
LABEL_34:
      while (v32 != 5008)
      {
        unsigned int v31 = *((_DWORD *)this + 785);
        v32 += 176;
        if (v31) {
          goto LABEL_33;
        }
      }
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1430;
    __int16 v39 = 2080;
    unint64_t v40 = "segMap";
    __int16 v33 = &_os_log_internal;
  }
  else
  {
    uint64_t v23 = 14608;
    uint64_t v24 = 16;
    while (1)
    {
      uint64_t v25 = *((unsigned int *)this + 776);
      if (v25
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23 - 2816), v25, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1409;
        __int16 v39 = 2080;
        unint64_t v40 = "HdrY";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      uint64_t v26 = *((unsigned int *)this + 777);
      if (v26)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23), v26, 7, 1, 0))break; {
      }
        }
      v23 += 176;
      if (!--v24) {
        goto LABEL_28;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1414;
    __int16 v39 = 2080;
    unint64_t v40 = "HdrC";
    __int16 v33 = &_os_log_internal;
  }
LABEL_46:
  _os_log_impl(&dword_223977000, v33, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v35, 0x1Cu);
LABEL_47:
  (*(void (**)(CAHDecCatnipLgh *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecCatnipLgh::allocWorkBuf_PPS(CAHDecCatnipLgh *this, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = *(void *)(v5 + 17560);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 100);
  unsigned int v9 = (*(unsigned __int8 *)(v6 + 105) + 1) & 0x1FE;
  if (v7 == 3) {
    int v10 = 48;
  }
  else {
    int v10 = 32;
  }
  if (!v7) {
    int v10 = 16;
  }
  int v12 = *(_DWORD *)(v6 + 108);
  int v11 = *(_DWORD *)(v6 + 112);
  unsigned int v13 = (v12 + 15) >> 4;
  int v14 = ~(-1 << *(_DWORD *)(v6 + 96));
  signed int v15 = v13 * ((v10 * v9) >> 3) + (v14 << 7);
  if (v15)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 117, v15, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1506;
        __int16 v27 = 2080;
        char v28 = "IpAbove";
        int v16 = &_os_log_internal;
LABEL_34:
        _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  int v17 = 16 * v9;
  if ((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 != 192)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 128, (int)((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 - 192), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1509;
        __int16 v27 = 2080;
        char v28 = "LfAbovePix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
LABEL_35:
      (*(void (**)(CAHDecCatnipLgh *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  signed int v18 = 288 * ((v12 + 63) >> 6) + (v14 << 7);
  if (v18)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 139, v18, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1515;
        __int16 v27 = 2080;
        char v28 = "LfAboveInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  unsigned int v19 = (v11 + 7) >> 3;
  if (v19 * v17)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 150, (int)(v19 * v17), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1521;
        __int16 v27 = 2080;
        char v28 = "LfLeftPix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  uint64_t v20 = ((v11 + 63) >> 2) & 0x3FFFFFF0;
  if (v20)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 161, v20, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1529;
        __int16 v27 = 2080;
        char v28 = "LfLeftInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 172, (int)(24 * v13 + 30), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 1537;
      __int16 v27 = 2080;
      char v28 = "SwLeftPix";
      int v16 = &_os_log_internal;
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  int v22 = 192 * v9 + (v19 + 2) * (((v9 >> 1) << 8) | 8);
  if (!v22) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 183, v22, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 1543;
    __int16 v27 = 2080;
    char v28 = "AZLeftPix";
    int v16 = &_os_log_internal;
    goto LABEL_34;
  }
  return result;
}

uint64_t CAHDecCatnipLgh::freeWorkBuf_SPS(CAHDecCatnipLgh *this)
{
  uint64_t result = *((void *)this + 32);
  if (!*(_DWORD *)(result + 2648))
  {
    uint64_t v3 = 14608;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = (uint64_t *)(result + v3 - 2816);
      if (*v5)
      {
        CAVDDecoder::deallocAVDMem(result, v5);
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3 - 2816) = 0;
      }
      if (*(void *)(result + v3))
      {
        CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + v3));
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3) = 0;
      }
      v3 += 176;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = result + 176 * v6;
    if (*(void *)(v9 + 5360))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(v9 + 5360));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + 176 * v6 + 5360) = 0;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  for (uint64_t i = 3776; i != 5184; i += 176)
  {
    if (*(void *)(result + i))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + i));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + i) = 0;
    }
  }
  return result;
}

uint64_t *CAHDecCatnipLgh::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[256])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 256);
    v2[256] = 0;
  }
  if (v2[278])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 278);
    v2[278] = 0;
  }
  if (v2[234])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 234);
    v2[234] = 0;
  }
  if (v2[300])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 300);
    v2[300] = 0;
  }
  if (v2[322])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 322);
    v2[322] = 0;
  }
  if (v2[344])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 344);
    v2[344] = 0;
  }
  if (v2[366])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 366);
    v2[366] = 0;
  }
  return this;
}

uint64_t CAHDecCatnipLgh::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 3120) = a2;
  return this;
}

uint64_t CAHDecCatnipLgh::initPicture(CAHDecCatnipLgh *this)
{
  return 0;
}

uint64_t CAHDecCatnipLgh::populateSlices(CAHDecCatnipLgh *this)
{
  return 0;
}

uint64_t CAHDecCatnipLgh::getTileIdxAbove(CAHDecCatnipLgh *this)
{
  return 0;
}

uint64_t CAHDecCatnipLgh::decodeBuffer(CAHDecCatnipLgh *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecCatnipLgh::decodeBufferSize(CAHDecCatnipLgh *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecCatnipLgh::decHdrYLinAddr(CAHDecCatnipLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 11792);
}

uint64_t CAHDecCatnipLgh::decHdrCLinAddr(CAHDecCatnipLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 14608);
}

uint64_t CAHDecCatnipLgh::decHdrYSize(CAHDecCatnipLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 11836);
}

uint64_t CAHDecCatnipLgh::decHdrCSize(CAHDecCatnipLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 14652);
}

uint64_t CAHDecCatnipLgh::decHdrYStride(CAHDecCatnipLgh *this)
{
  return *((unsigned int *)this + 778);
}

uint64_t CAHDecCatnipLgh::decHdrCStride(CAHDecCatnipLgh *this)
{
  return *((unsigned int *)this + 779);
}

void CAHDecCatnipLgh::clearSegBuffer(CAHDecCatnipLgh *this)
{
}

double AV1_RLM::AV1_RLM(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 120) = a2;
  *(void *)(a1 + 104) = a3;
  if (a3) {
    uint64_t v3 = *(void *)(a3 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  *(void *)(a1 + 96) = v3;
  *(void *)a1 = 0;
  double result = NAN;
  *(void *)(a1 + 112) = 0xFFFFFFFF00000000;
  return result;
}

void AV1_RLM::~AV1_RLM(AV1_RLM *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((~*((_DWORD *)this + 30) & 0x80002) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315138;
    *(void *)int v10 = "~AV1_RLM";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: fb refcnt\n", (uint8_t *)&v9, 0xCu);
  }
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = &_os_log_internal;
    do
    {
      if (v4 >= *(unsigned int *)(v2 + 4)) {
        break;
      }
      if ((~*((_DWORD *)this + 30) & 0x80002) == 0 && os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *((void *)this + 12);
        if (v6) {
          int v7 = *(_DWORD *)(v6 + v3);
        }
        else {
          int v7 = 0;
        }
        int v8 = *(_DWORD *)(v6 + v3 + 4);
        int v9 = 67109888;
        *(_DWORD *)int v10 = v4;
        *(_WORD *)&v10[4] = 2048;
        *(void *)&v10[6] = v3 + v6;
        __int16 v11 = 1024;
        int v12 = v7;
        __int16 v13 = 1024;
        int v14 = v8;
        _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, "AppleAVD: buf[%2d]=%p ref_count = %2d order_hint=%d\n", (uint8_t *)&v9, 0x1Eu);
        uint64_t v2 = *((void *)this + 13);
      }
      ++v4;
      v3 += 2032;
    }
    while (v2);
  }
  if ((~*((_DWORD *)this + 30) & 0x80002) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: \n", (uint8_t *)&v9, 2u);
  }
}

uint64_t AV1_RLM::Assign_Cur_Frame_New_FB(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int available_frame_buffer = AV1_RLM::find_available_frame_buffer((AV1_RLM *)a1);
  if (available_frame_buffer == -1) {
    return 0;
  }
  int v5 = available_frame_buffer;
  uint64_t v6 = *(void *)(a1 + 96) + 2032 * available_frame_buffer;
  *(void *)(a2 + 120) = v6;
  *(_DWORD *)(v6 + 2024) = available_frame_buffer;
  *(void *)(v6 + 2008) = 0;
  if ((~*(_DWORD *)(a1 + 120) & 0x80002) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315650;
    int v9 = "Assign_Cur_Frame_New_FB";
    __int16 v10 = 1024;
    int v11 = v5;
    __int16 v12 = 2048;
    uint64_t v13 = v6;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: pool[%d] = %p\n", (uint8_t *)&v8, 0x1Cu);
    return *(void *)(a2 + 120);
  }
  return v6;
}

uint64_t AV1_RLM::find_available_frame_buffer(AV1_RLM *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 13);
  uint64_t v2 = *(unsigned int *)(v1 + 16);
  unsigned int v3 = *(_DWORD *)(v1 + 4);
  if (v3 > v2)
  {
    unint64_t v4 = (_DWORD *)(*((void *)this + 12) + 2032 * v2);
    int v5 = v3 - v2;
    uint64_t v6 = *(unsigned int *)(v1 + 16);
    while (*v4)
    {
      v4 += 508;
      ++v6;
      if (!--v5) {
        goto LABEL_5;
      }
    }
    goto LABEL_15;
  }
LABEL_5:
  if (v2)
  {
    uint64_t v6 = 0;
    int v7 = (_DWORD *)*((void *)this + 12);
    while (*v7)
    {
      v7 += 508;
      if (v2 == ++v6) {
        goto LABEL_9;
      }
    }
LABEL_15:
    if (v6 + 1 == v3) {
      int v8 = 0;
    }
    else {
      int v8 = v6 + 1;
    }
    *(_DWORD *)(v1 + 16) = v8;
    uint64_t v9 = *((void *)this + 12) + 2032 * v6;
    *(_DWORD *)uint64_t v9 = 1;
    *(_DWORD *)(v9 + 2028) = 1;
    *(void *)(v9 + 2016) = 0;
    return v6;
  }
LABEL_9:
  if ((*((unsigned char *)this + 122) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315138;
    __int16 v12 = "find_available_frame_buffer";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: no frame buffer available\n", (uint8_t *)&v11, 0xCu);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315394;
    __int16 v12 = "find_available_frame_buffer";
    __int16 v13 = 1024;
    int v14 = 437;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v11, 0x12u);
  }
  return 0xFFFFFFFFLL;
}

void AV1_RLM::Swap_Frame_Bufs(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v5 = (_DWORD *)(a2 + 1800);
  int v6 = *(_DWORD *)(a2 + 3144);
  if (!a3) {
    goto LABEL_26;
  }
  if (v6) {
    goto LABEL_3;
  }
  int v9 = *(_DWORD *)(a2 + 1904);
  if (!v9) {
    goto LABEL_3;
  }
  unint64_t v10 = 0;
  uint64_t v11 = a2 + 3648;
  __int16 v12 = &_os_log_internal;
  while ((v9 & 1) == 0)
  {
LABEL_15:
    ++v10;
    BOOL v16 = v9 > 1;
    v9 >>= 1;
    if (!v16) {
      goto LABEL_3;
    }
  }
  if (v10 < 8)
  {
    AV1_RLM::release_frame_buffer(a1, *(int **)(v11 + 8 * v10));
    uint64_t v13 = *(void *)(a2 + 1920);
    *(void *)(v11 + 8 * v10) = v13;
    ++*(_DWORD *)v13;
    if ((~*(_DWORD *)(a1 + 120) & 0x80002) == 0 && os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(_DWORD *)(v13 + 2024);
      uint64_t v15 = *(void *)(v13 + 2016);
      *(_DWORD *)buf = 136316162;
      unsigned int v19 = "Swap_Frame_Bufs";
      __int16 v20 = 1024;
      int v21 = v10;
      __int16 v22 = 1024;
      int v23 = v14;
      __int16 v24 = 2048;
      uint64_t v25 = v13;
      __int16 v26 = 2048;
      uint64_t v27 = v15;
      _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: ref_frame_map[%d] pool[%d] = %p/%p\n", buf, 0x2Cu);
    }
    goto LABEL_15;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v19 = "Swap_Frame_Bufs";
    __int16 v20 = 1024;
    int v21 = 98;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
  }
LABEL_3:
  if (!*v5 && !*(_DWORD *)(a2 + 1932)) {
    goto LABEL_26;
  }
  int v7 = *(_DWORD *)(a1 + 112);
  if (*(_DWORD *)(a2 + 4756))
  {
    int v8 = *(int **)a1;
    if (v7 >= 4)
    {
      AV1_RLM::release_frame_buffer(a1, v8);
      goto LABEL_25;
    }
    *(void *)(a1 + 8 * v7 + 64) = v8;
    int v17 = v7 + 1;
  }
  else
  {
    if (v7 >= 2 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v19 = "Swap_Frame_Bufs";
      __int16 v20 = 1024;
      int v21 = 133;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
      int v7 = *(_DWORD *)(a1 + 112);
    }
    if (v7 >= 1) {
      AV1_RLM::release_frame_buffer(a1, *(int **)(a1 + 64));
    }
    *(void *)(a1 + 64) = *(void *)a1;
    int v17 = 1;
  }
  *(_DWORD *)(a1 + 112) = v17;
LABEL_25:
  if (*v5) {
LABEL_26:
  }
    AV1_RLM::release_frame_buffer(a1, *(int **)(a2 + 1920));
  *(void *)(a2 + 1920) = 0;
  if (!v6)
  {
    *(_DWORD *)(a2 + 3516) = -1;
    *(void *)(a2 + 3500) = -1;
    *(void *)(a2 + 3508) = -1;
    *(void *)(a2 + 3492) = -1;
  }
  AV1_RLM::dump_fb_info(a1, (uint64_t)v5);
}

void AV1_RLM::release_frame_buffer(uint64_t a1, int *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a2) {
    return;
  }
  int v4 = *a2;
  if (*a2 < 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315394;
    *(void *)BOOL v16 = "release_frame_buffer";
    *(_WORD *)&v16[8] = 1024;
    *(_DWORD *)&v16[10] = 473;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v15, 0x12u);
    int v4 = *a2;
  }
  *a2 = v4 - 1;
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    return;
  }
  if (!*(void *)(v5 + 32) || v4 != 1) {
    return;
  }
  if (!*(_DWORD *)(v5 + 4)) {
    goto LABEL_21;
  }
  unint64_t v7 = 0;
  uint64_t v8 = 1960;
  int v9 = &_os_log_internal;
  while (1)
  {
    if ((~*(_DWORD *)(a1 + 120) & 0x80004) == 0 && os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = a2[506];
      uint64_t v11 = **((void **)a2 + 245);
      uint64_t v12 = **(void **)(*(void *)(a1 + 96) + v8);
      int v15 = 67109888;
      *(_DWORD *)BOOL v16 = v10;
      *(_WORD *)&v16[4] = 2048;
      *(void *)&v16[6] = v11;
      __int16 v17 = 1024;
      int v18 = v7;
      __int16 v19 = 2048;
      uint64_t v20 = v12;
      _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, "AppleAVD: release fb %d fci_wr fc %p, copy to pool[%d] fci_wr fc %p\n", (uint8_t *)&v15, 0x22u);
    }
    uint64_t v13 = *(void *)(a1 + 96);
    if (!*(_DWORD *)(v13 + v8 - 1960))
    {
      uint64_t v5 = *(void *)(a1 + 104);
      goto LABEL_20;
    }
    uint64_t v14 = *(void *)(v13 + v8 + 8);
    uint64_t v5 = *(void *)(a1 + 104);
    if (v14 == *((void *)a2 + 245)) {
      break;
    }
LABEL_20:
    ++v7;
    v8 += 2032;
    if (v7 >= *(unsigned int *)(v5 + 4)) {
      goto LABEL_21;
    }
  }
  *((void *)a2 + 245) = *(void *)(v13 + v8);
  *(void *)(v13 + v8) = v14;
LABEL_21:
  (*(void (**)(int *, void))(v5 + 32))(a2, *(void *)(v5 + 24));
}

void AV1_RLM::dump_fb_info(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((~*(_DWORD *)(a1 + 120) & 0x80002) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)BOOL v16 = "dump_fb_info";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: ref frame map\n", buf, 0xCu);
  }
  uint64_t v4 = 0;
  uint64_t v5 = a2 + 1848;
  int v6 = &_os_log_internal;
  do
  {
    if ((~*(_DWORD *)(a1 + 120) & 0x80002) == 0 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(v5 + 8 * v4);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)BOOL v16 = v4;
      *(_WORD *)&v16[4] = 2048;
      *(void *)&v16[6] = v7;
      _os_log_impl(&dword_223977000, v6, OS_LOG_TYPE_DEFAULT, "AppleAVD: uncomp_hdr->ref_frame_map[%d] = %p\n", buf, 0x12u);
    }
    ++v4;
  }
  while (v4 != 8);
  if ((~*(_DWORD *)(a1 + 120) & 0x80002) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)BOOL v16 = "dump_fb_info";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: fb refcnt\n", buf, 0xCu);
  }
  uint64_t v8 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = &_os_log_internal;
    do
    {
      if (v10 >= *(unsigned int *)(v8 + 4)) {
        break;
      }
      if ((~*(_DWORD *)(a1 + 120) & 0x80002) == 0 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 96);
        if (v12) {
          int v13 = *(_DWORD *)(v12 + v9);
        }
        else {
          int v13 = 0;
        }
        int v14 = *(_DWORD *)(v12 + v9 + 4);
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)BOOL v16 = v10;
        *(_WORD *)&v16[4] = 2048;
        *(void *)&v16[6] = v9 + v12;
        __int16 v17 = 1024;
        int v18 = v13;
        __int16 v19 = 1024;
        int v20 = v14;
        _os_log_impl(&dword_223977000, v11, OS_LOG_TYPE_DEFAULT, "AppleAVD: buf[%2d]=%p ref_count = %2d order_hint=%d\n", buf, 0x1Eu);
        uint64_t v8 = *(void *)(a1 + 104);
      }
      ++v10;
      v9 += 2032;
    }
    while (v8);
  }
  if ((~*(_DWORD *)(a1 + 120) & 0x80002) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: \n", buf, 2u);
  }
}

void AV1_RLM::Rel_Frame_Buffer(uint64_t a1, int *a2)
{
  if (a2 && *a2)
  {
    if (*(void *)(a1 + 104)) {
      AV1_RLM::release_frame_buffer(a1, a2);
    }
  }
}

void AV1_RLM::Rel_Output_Frames_Bufs(AV1_RLM *this)
{
  int v2 = *((_DWORD *)this + 28);
  if (v2 >= 1)
  {
    uint64_t v3 = 8;
    do
    {
      uint64_t v4 = (int *)*((void *)this + v3);
      if (v4 && *v4 && *((void *)this + 13))
      {
        AV1_RLM::release_frame_buffer((uint64_t)this, v4);
        int v2 = *((_DWORD *)this + 28);
      }
      uint64_t v5 = v3 - 7;
      ++v3;
    }
    while (v5 < v2);
  }
  *((_DWORD *)this + 28) = 0;
}

uint64_t AV1_RLM::Get_Num_Output_Frames(AV1_RLM *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t AV1_RLM::Get_Output_Frames(AV1_RLM *this)
{
  *((_DWORD *)this + 28) = 0;
  return (uint64_t)this + 64;
}

uint64_t AV1_RLM::Update_Frame_Bufs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 116) = -1;
  *(void *)a1 = 0;
  if (!a2 || !a3 || (uint64_t v6 = *(void *)(a1 + 96)) == 0)
  {
    if ((*(unsigned char *)(a1 + 122) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v13 = *(void *)(a1 + 96);
    *(_DWORD *)buf = 136315906;
    unsigned int v52 = "Update_Frame_Bufs";
    __int16 v53 = 2048;
    *(void *)int v54 = a2;
    *(_WORD *)&v54[8] = 2048;
    *(void *)&v54[10] = a3;
    *(_WORD *)&v54[18] = 2048;
    *(void *)&v54[20] = v13;
    int v14 = &_os_log_internal;
    int v15 = "AppleAVD: %s: invalid hdr %p buffer pointer %p pool %p\n";
    uint32_t v16 = 42;
LABEL_13:
    _os_log_impl(&dword_223977000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, v16);
    return 0xFFFFFFFFLL;
  }
  if (!*(_DWORD *)(a2 + 1800))
  {
    __int16 v17 = *(_DWORD **)(a2 + 1920);
    int v18 = v17[506];
    *(_DWORD *)(a1 + 116) = v18;
    if (v18 == -1)
    {
      if (*(unsigned char *)(a1 + 122))
      {
        uint64_t v10 = 0xFFFFFFFFLL;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          unsigned int v52 = "Update_Frame_Bufs";
          __int16 v53 = 1024;
          *(_DWORD *)int v54 = -1;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: AV1 Internal bufferpool is full, invalid index %d\n", buf, 0x12u);
        }
        return v10;
      }
    }
    else
    {
      int v19 = v18;
      ++*v17;
      if (*(_DWORD *)(a2 + 1932)) {
        *(void *)a1 = v6 + 2032 * v18;
      }
      uint64_t v20 = v6 + 2032 * v18;
      *(void *)(v20 + 724) = *(void *)(a2 + 2176);
      *(void *)(v20 + 1924) = *(void *)(a2 + 2156);
      *(unsigned char *)(v20 + 1920) = *(_DWORD *)(a2 + 128);
      *(void *)&long long v21 = *(void *)(a2 + 132);
      DWORD2(v21) = *(_DWORD *)(a2 + 108);
      HIDWORD(v21) = *(_DWORD *)(a2 + 116);
      *(_OWORD *)(v20 + 1888) = v21;
      if ((~*(_DWORD *)(a1 + 120) & 0x80002) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        unsigned int v52 = "Update_Frame_Bufs";
        __int16 v53 = 1024;
        *(_DWORD *)int v54 = v18;
        *(_WORD *)&v54[4] = 2048;
        *(void *)&v54[6] = v6 + 2032 * v18;
        *(_WORD *)&v54[14] = 2048;
        *(void *)&v54[16] = a3;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: cur_frame pool[%d] = %p/%p\n", buf, 0x26u);
        uint64_t v6 = *(void *)(a1 + 96);
        int v18 = *(_DWORD *)(a1 + 116);
        int v19 = v18;
      }
      *(void *)(v6 + 2032 * v19 + 2016) = a3;
      __int16 v22 = *(_DWORD **)(a2 + 1912);
      if (v22)
      {
        ++*v22;
        *(void *)(v6 + 2032 * v19 + 2008) = v22;
      }
      if (!*(_DWORD *)(a2 + 1868))
      {
        uint64_t v10 = 0;
        *(void *)(a1 + 56) = 0;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 8) = 0u;
        return v10;
      }
      if (*(unsigned char *)(a2 + 4748)) {
        return 0;
      }
      uint64_t v24 = 0;
      int v50 = 0;
      while (1)
      {
        uint64_t v25 = *(unsigned int *)(a2 + 3492 + 4 * v24);
        if (v25 == -1) {
          break;
        }
        uint64_t v26 = *(void *)(a2 + 8 * v25 + 3648);
        int v27 = *(_DWORD *)(a1 + 120);
        if (!v26) {
          goto LABEL_66;
        }
        if ((~v27 & 0x80002) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v28 = *(_DWORD *)(v26 + 2024);
          uint64_t v29 = *(void *)(v26 + 2016);
          *(_DWORD *)buf = 136316418;
          unsigned int v52 = "Update_Frame_Bufs";
          __int16 v53 = 1024;
          *(_DWORD *)int v54 = v24;
          *(_WORD *)&v54[4] = 1024;
          *(_DWORD *)&v54[6] = v25;
          *(_WORD *)&v54[10] = 1024;
          *(_DWORD *)&v54[12] = v28;
          *(_WORD *)&v54[16] = 2048;
          *(void *)&v54[18] = v26;
          *(_WORD *)&v54[26] = 2048;
          *(void *)&v54[28] = v29;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: ref_frame_idx[%d] = %d, pool[%d] = %p/%p\n", buf, 0x32u);
          uint64_t v6 = *(void *)(a1 + 96);
          int v18 = *(_DWORD *)(a1 + 116);
        }
        uint64_t v30 = *(_DWORD **)(a2 + 1920);
        int v31 = v30[474];
        int v32 = *(_DWORD *)(v26 + 1896);
        if (v31 != v32) {
          goto LABEL_62;
        }
        if (v30[472] != *(_DWORD *)(v26 + 1888) || v30[473] != *(_DWORD *)(v26 + 1892))
        {
          int v32 = v30[474];
LABEL_62:
          if ((*(unsigned char *)(a1 + 122) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v46 = v30[472];
            int v47 = *(_DWORD *)(v26 + 1888);
            int v48 = v30[473];
            int v49 = *(_DWORD *)(v26 + 1892);
            *(_DWORD *)buf = 136316674;
            unsigned int v52 = "Update_Frame_Bufs";
            __int16 v53 = 1024;
            *(_DWORD *)int v54 = v31;
            *(_WORD *)&v54[4] = 1024;
            *(_DWORD *)&v54[6] = v32;
            *(_WORD *)&v54[10] = 1024;
            *(_DWORD *)&v54[12] = v46;
            *(_WORD *)&v54[16] = 1024;
            *(_DWORD *)&v54[18] = v47;
            *(_WORD *)&v54[22] = 1024;
            *(_DWORD *)&v54[24] = v48;
            *(_WORD *)&v54[28] = 1024;
            *(_DWORD *)&v54[30] = v49;
            int v14 = &_os_log_internal;
            int v15 = "AppleAVD: %s: cur and ref frame format mismatch bd %d-%d ssx %d-%d ssy %d-%d\n";
            uint32_t v16 = 48;
            goto LABEL_13;
          }
          return 0xFFFFFFFFLL;
        }
        int v33 = *(_DWORD *)(v6 + 2032 * v18 + 724);
        int v34 = *(_DWORD *)(v26 + 1760);
        if (v34 <= 2 * v33)
        {
          int v35 = *(_DWORD *)(v6 + 2032 * v18 + 728);
          int v36 = *(_DWORD *)(v26 + 1768);
          int v37 = 16 * v34;
          BOOL v39 = v35 > 16 * v36 || v33 > v37 || 2 * v35 < v36;
          int v40 = v50;
          if (!v39) {
            int v40 = 1;
          }
          int v50 = v40;
        }
        if (++v24 == 7)
        {
          if (v50)
          {
            uint64_t v41 = 0;
            int v42 = &_os_log_internal;
            do
            {
              uint64_t v43 = *(void *)(a2 + 8 * *(int *)(a2 + 3492 + 4 * v41) + 3648);
              *(void *)(a1 + 8 + 8 * v41) = v43;
              if ((~*(_DWORD *)(a1 + 120) & 0x80002) == 0 && os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
              {
                int v44 = *(_DWORD *)(v43 + 2024);
                uint64_t v45 = *(void *)(v43 + 2016);
                *(_DWORD *)buf = 136316162;
                unsigned int v52 = "Update_Frame_Bufs";
                __int16 v53 = 1024;
                *(_DWORD *)int v54 = v41;
                *(_WORD *)&v54[4] = 1024;
                *(_DWORD *)&v54[6] = v44;
                *(_WORD *)&v54[10] = 2048;
                *(void *)&v54[12] = v43;
                *(_WORD *)&v54[20] = 2048;
                *(void *)&v54[22] = v45;
                _os_log_impl(&dword_223977000, v42, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: m_frame_refs[%d] pool[%d] = %p/%p\n", buf, 0x2Cu);
              }
              uint64_t v10 = 0;
              ++v41;
            }
            while (v41 != 7);
            return v10;
          }
          if ((*(unsigned char *)(a1 + 122) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            unsigned int v52 = "Update_Frame_Bufs";
            int v14 = &_os_log_internal;
            int v15 = "AppleAVD: %s: no reference frame has valid dimensions\n";
            uint32_t v16 = 12;
            goto LABEL_13;
          }
          return 0xFFFFFFFFLL;
        }
      }
      int v27 = *(_DWORD *)(a1 + 120);
LABEL_66:
      if ((v27 & 0x10000) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        unsigned int v52 = "Update_Frame_Bufs";
        __int16 v53 = 1024;
        *(_DWORD *)int v54 = v24;
        *(_WORD *)&v54[4] = 1024;
        *(_DWORD *)&v54[6] = v25;
        int v14 = &_os_log_internal;
        int v15 = "AppleAVD: %s: invalid ref_frame_idx[%d] %d\n";
        uint32_t v16 = 24;
        goto LABEL_13;
      }
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 3472);
  uint64_t v8 = *(int **)(a2 + 8 * v7 + 3648);
  if (!v8 || (int v9 = *v8) == 0)
  {
    if ((*(unsigned char *)(a1 + 122) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)buf = 136315394;
    unsigned int v52 = "Update_Frame_Bufs";
    __int16 v53 = 1024;
    *(_DWORD *)int v54 = v7;
    int v14 = &_os_log_internal;
    int v15 = "AppleAVD: %s: invalid frame to show map idx %d\n";
    uint32_t v16 = 18;
    goto LABEL_13;
  }
  *(void *)a1 = v8;
  *uint64_t v8 = v9 + 1;
  if ((~*(_DWORD *)(a1 + 120) & 0x80002) != 0) {
    return 0;
  }
  uint64_t v10 = 0;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = v8[506];
    uint64_t v12 = *((void *)v8 + 252);
    *(_DWORD *)buf = 136315906;
    unsigned int v52 = "Update_Frame_Bufs";
    __int16 v53 = 1024;
    *(_DWORD *)int v54 = v11;
    *(_WORD *)&v54[4] = 2048;
    *(void *)&v54[6] = v8;
    *(_WORD *)&v54[14] = 2048;
    *(void *)&v54[16] = v12;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: frame_to_show pool[%d] = %p/%p\n", buf, 0x26u);
    return 0;
  }
  return v10;
}

uint64_t AV1_RLM::Get_Ref_Pic_List(AV1_RLM *this)
{
  return (uint64_t)this + 8;
}

uint64_t AV1_RLM::Get_Disp_Buf(AV1_RLM *this)
{
  *((_DWORD *)this + 28) = 0;
  return *(void *)this;
}

uint64_t AV1_RLM::get_ref_frame_map_idx(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned int v3 = a3 - 1;
  if (v3 > 6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(a2 + 4 * v3 + 1692);
  }
}

double AV1_RLM::flush_RLM(AV1_RLM *this, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2 + 1848;
  uint64_t v6 = &_os_log_internal;
  do
  {
    if (a2)
    {
      uint64_t v7 = *(int **)(v5 + 8 * v4);
      if (v7)
      {
        if ((~*((_DWORD *)this + 30) & 0x80002) == 0 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *v7;
          *(_DWORD *)buf = 136315906;
          int v11 = "flush_RLM";
          __int16 v12 = 1024;
          int v13 = v4;
          __int16 v14 = 2048;
          int v15 = v7;
          __int16 v16 = 1024;
          int v17 = v8;
          _os_log_impl(&dword_223977000, v6, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: ref_frame_map[%d] %p ref_count %d\n", buf, 0x22u);
        }
        if (*v7) {
          AV1_RLM::release_frame_buffer((uint64_t)this, v7);
        }
        *(void *)(v5 + 8 * v4) = 0;
      }
    }
    ++v4;
  }
  while (v4 != 8);
  AV1_RLM::Rel_Output_Frames_Bufs(this);
  *((_DWORD *)this + 29) = -1;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return result;
}

void AV1_RLM::decrease_ref_count(uint64_t a1, _DWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2)
  {
    int v2 = (*a2)--;
    if (v2 <= 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315394;
      uint64_t v4 = "decrease_ref_count";
      __int16 v5 = 1024;
      int v6 = 527;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v3, 0x12u);
    }
  }
}

void AV1_RLM::reset_ref_frame_map(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = a2 + 1848;
  do
  {
    AV1_RLM::decrease_ref_count(a1, *(_DWORD **)(v3 + v2));
    *(void *)(v3 + v2) = 0;
    v2 += 8;
  }
  while (v2 != 64);
}

uint64_t AV1_RLM::get_ref_frame_buf(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned int v3 = a3 - 1;
  if (v3 > 6) {
    return 0;
  }
  uint64_t v4 = *(int *)(a2 + 4 * v3 + 1692);
  if (v4 == -1) {
    return 0;
  }
  else {
    return *(void *)(a2 + 8 * v4 + 1848);
  }
}

void av1_fb_rel_cb(uint64_t a1, void *a2)
{
  if (a2)
  {
    unsigned int v3 = *(unsigned int **)(a1 + 2016);
    if (v3)
    {
      (*(void (**)(void *, void, void))(*a2 + 40))(a2, *v3, 0);
      CAVDAvxDecoder::ReleaseDisplayBuffer(a2, a1);
    }
  }
}

void CAVDAvxDecoder::ReleaseDisplayBuffer(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 && *(int *)(a2 + 2028) >= 1)
  {
    unsigned int v3 = *(unsigned int **)(a2 + 2016);
    if (v3)
    {
      if (*(unsigned char *)(a1[293] + 6032))
      {
        uint64_t v4 = *v3;
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v4 = v3[1];
        uint64_t v5 = 1;
      }
      (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, v4, v5);
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "ReleaseDisplayBuffer";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): fb->buffer is NULL!!", (uint8_t *)&v6, 0xCu);
    }
    --*(_DWORD *)(a2 + 2028);
  }
}

void CAVDAvxDecoder::CAVDAvxDecoder(CAVDAvxDecoder *this, void *a2, int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v5 = (char *)this + 42388;
  CAVDDecoder::CAVDDecoder(this, a2, a3);
  *(void *)uint64_t v6 = &unk_26D73ECD0;
  *(void *)(v6 + 8000) = 0;
  v5[156] = 0;
  *((_DWORD *)v5 + 83) = 0;
  *(void *)(v6 + 15944) = 0;
  *(_OWORD *)(v6 + 15952) = 0u;
  *(_OWORD *)(v5 + 36) = 0u;
  *(_OWORD *)(v5 + 164) = 0u;
  *(void *)(v6 + 42740) = 0;
  *(void *)(v6 + 42745) = 0;
  *(_OWORD *)(v6 + 42756) = 0u;
  *(_WORD *)(v6 + 42772) = 0;
  v5[386] = 1;
  *(void *)(v6 + 2344) = a2;
  if (!CAVDAvxDecoder::VAInit((CAVDAvxDecoder *)v6)) {
    operator new();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315138;
    int v9 = "CAVDAvxDecoder::CAVDAvxDecoder(void *, uint32_t, BOOL)";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): VAInit failed", (uint8_t *)&v8, 0xCu);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315394;
    int v9 = "CAVDAvxDecoder";
    __int16 v10 = 1024;
    int v11 = 301;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): error creating context %d", (uint8_t *)&v8, 0x12u);
  }
  *((_DWORD *)this + 705) = 301;
}

void sub_2239FA7A8(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v2, 0x1020C400907FE00);
  CAVDDecoder::~CAVDDecoder(v1);
  _Unwind_Resume(a1);
}

uint64_t CAVDAvxDecoder::VAInit(CAVDAvxDecoder *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = malloc_type_calloc(0x135D8uLL, 1uLL, 0x11EC1F37uLL);
  *((void *)this + 1993) = v2;
  if (!v2)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v10 = 136315138;
    int v11 = "int CAVDAvxDecoder::VAInit()";
    int v8 = &_os_log_internal;
    int v9 = "AppleAVD: ERROR: %s(): m_cur_pic_info allocation failed";
LABEL_17:
    _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v10, 0xCu);
    return 304;
  }
  unsigned int v3 = malloc_type_calloc(0x16878uLL, 1uLL, 0x3ACBE706uLL);
  *((void *)this + 5303) = v3;
  if (!v3)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v10 = 136315138;
    int v11 = "int CAVDAvxDecoder::VAInit()";
    int v8 = &_os_log_internal;
    int v9 = "AppleAVD: ERROR: %s(): m_av1_header allocation failed";
    goto LABEL_17;
  }
  uint64_t v4 = malloc_type_calloc(0x1E88uLL, 1uLL, 0xA3037E42uLL);
  *((void *)this + 5319) = v4;
  if (!v4)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v10 = 136315138;
    int v11 = "int CAVDAvxDecoder::VAInit()";
    int v8 = &_os_log_internal;
    int v9 = "AppleAVD: ERROR: %s(): m_disp_q allocation failed";
    goto LABEL_17;
  }
  uint64_t v5 = malloc_type_calloc(0x1E88uLL, 1uLL, 0x347B6FF0uLL);
  *((void *)this + 5320) = v5;
  if (!v5)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v10 = 136315138;
    int v11 = "int CAVDAvxDecoder::VAInit()";
    int v8 = &_os_log_internal;
    int v9 = "AppleAVD: ERROR: %s(): m_dec_q allocation failed";
    goto LABEL_17;
  }
  uint64_t v6 = malloc_type_malloc(0x1500uLL, 0x102004010603825uLL);
  *((void *)this + 1000) = v6;
  if (v6) {
    return 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315138;
    int v11 = "int CAVDAvxDecoder::VAInit()";
    int v8 = &_os_log_internal;
    int v9 = "AppleAVD: ERROR: %s(): m_dec_bufs allocation failed";
    goto LABEL_17;
  }
  return 304;
}

void CAVDAvxDecoder::~CAVDAvxDecoder(CAVDAvxDecoder *this)
{
  *(void *)this = &unk_26D73ECD0;
  pthread_mutex_destroy((pthread_mutex_t *)this + 42);
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 2752));
  uint64_t v2 = (void *)((char *)this + 42392);
  for (uint64_t i = 24; i != 1056; i += 8)
  {
    uint64_t v4 = *(void *)((char *)this + i);
    if (v4)
    {
      CAVDDecoder::unmapAVDMemory((uint64_t)this, *((mach_port_t ***)this + 293), (_OWORD *)(v4 + 8), 1);
      free((void *)v4);
    }
    *(void *)((char *)this + i) = 0;
  }
  do
  {
    uint64_t v5 = *(void *)((char *)this + i);
    if (v5)
    {
      CAVDDecoder::unmapAVDMemory((uint64_t)this, *((mach_port_t ***)this + 293), (_OWORD *)(v5 + 8), *(unsigned char *)(v5 + 169));
      free((void *)v5);
    }
    *(void *)((char *)this + i) = 0;
    i += 8;
  }
  while (i != 2088);
  uint64_t v6 = *((void *)this + 262);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 136))(v6);
    (*(void (**)(void, void))(**((void **)this + 262) + 152))(*((void *)this + 262), 0);
    uint64_t v7 = *((void *)this + 262);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    *((void *)this + 262) = 0;
  }
  uint64_t v8 = *((void *)this + 1994);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    *((void *)this + 1994) = 0;
  }
  int v9 = (AV1_RLM *)*((void *)this + 1995);
  if (v9)
  {
    AV1_RLM::~AV1_RLM(v9);
    MEMORY[0x223CBAD30]();
    *((void *)this + 1995) = 0;
  }
  if (*v2) {
    *uint64_t v2 = 0;
  }
  free(*((void **)this + 1993));
  *((void *)this + 1993) = 0;
  free(*((void **)this + 5303));
  *((void *)this + 5303) = 0;
  free(*((void **)this + 5319));
  *((void *)this + 5319) = 0;
  free(*((void **)this + 5320));
  *((void *)this + 5320) = 0;
  free(*((void **)this + 1000));
  *((void *)this + 1000) = 0;

  CAVDDecoder::~CAVDDecoder(this);
}

{
  uint64_t vars8;

  CAVDAvxDecoder::~CAVDAvxDecoder(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAVDAvxDecoder::ReleaseDisplayBufferWithIdx(CAVDAvxDecoder *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 40))();
}

uint64_t CAVDAvxDecoder::VAStartDecode(CAVDAvxDecoder *this, unsigned __int8 *a2, int a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v6 = (_DWORD **)((char *)this + 42424);
  *(void *)int v19 = 0;
  char v7 = 1;
  char v8 = 8;
  int v17 = 8;
  int v18 = 1;
  *(void *)__int16 v16 = 0;
  *((unsigned char *)this + 2824) = 0;
  AppleAVDCommandBuilder::getWidthAndHeight(*((void *)this + 293), &v19[1], v19);
  AppleAVDCommandBuilder::getLumaDepthMinus8(*((void *)this + 293), &v16[1]);
  AppleAVDCommandBuilder::getChromaFormat(*((void *)this + 293), v16);
  *((_DWORD *)this + 756) = v19[1];
  *((_DWORD *)this + 757) = v19[0];
  *((_DWORD *)this + 758) = v16[1];
  *((_DWORD *)this + 759) = v16[0];
  AV1_Syntax::Set_File_Type(*((void *)this + 1994), 0);
  AV1_Syntax::Set_Is_Annexb(*((void *)this + 1994), *((unsigned __int8 *)this + 11));
  AV1_Syntax::Set_Operating_Point(*((void *)this + 1994), 0);
  AV1_Syntax::Set_Output_All_Layers(*((void *)this + 1994), (uint64_t)*v6, 1);
  AV1_RLM::Assign_Cur_Frame_New_FB(*((void *)this + 1995), (uint64_t)(*v6 + 450));
  if (a3 >= 1)
  {
    uint64_t v9 = AV1_Syntax::Parse_Header(*((AV1_Syntax **)this + 1994), a2, a3, *v6, 1);
    if ((int)v9 <= 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        long long v21 = "virtual int CAVDAvxDecoder::VAStartDecode(unsigned char *, int)";
        int v11 = &_os_log_internal;
        uint64_t v12 = "AppleAVD: %s: parse av1 header error\n";
        goto LABEL_11;
      }
LABEL_12:
      AV1_RLM::Swap_Frame_Bufs(*((void *)this + 1995), (uint64_t)*v6, 0);
      return 0xFFFFFFFFLL;
    }
    uint64_t ChromaFormat = CAVDAvxDecoder::getChromaFormat(v9, (uint64_t)(*v6 + 8), &v18);
    if (ChromaFormat)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        long long v21 = "virtual int CAVDAvxDecoder::VAStartDecode(unsigned char *, int)";
        int v11 = &_os_log_internal;
        uint64_t v12 = "AppleAVD: %s: fail to get chroma format idc from parsed header\n";
LABEL_11:
        _os_log_impl(&dword_223977000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 0xCu);
        goto LABEL_12;
      }
      goto LABEL_12;
    }
    if (CAVDAvxDecoder::getBitDepth(ChromaFormat, (uint64_t)(*v6 + 8), &v17))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        long long v21 = "virtual int CAVDAvxDecoder::VAStartDecode(unsigned char *, int)";
        int v11 = &_os_log_internal;
        uint64_t v12 = "AppleAVD: %s: fail to get bitdepth from parsed header\n";
        goto LABEL_11;
      }
      goto LABEL_12;
    }
    char v8 = v17;
    char v7 = v18;
  }
  uint64_t v14 = (uint64_t)*v6;
  *((_DWORD *)v6 + 84) = (*v6)[*((unsigned int *)v6 + 83) + 38];
  CAVDAvxDecoder::copySeqParams((uint64_t)this, (uint64_t)(v6 + 18), v14);
  v6[18] = *(_DWORD **)((char *)v6 + 236);
  *((unsigned char *)v6 + 176) = v7;
  *((unsigned char *)v6 + 178) = v8;
  *((unsigned char *)v6 + 177) = v8;
  CAVDAvxDecoder::copySeqParams((uint64_t)this, (uint64_t)(v6 + 2), (uint64_t)*v6);
  uint32x2_t v15 = *(uint32x2_t *)((char *)v6 + 108);
  v6[2] = (_DWORD *)v15;
  *((uint32x2_t *)this + 378) = vmax_u32(v15, *(uint32x2_t *)((char *)this + 3024));
  AV1_RLM::Swap_Frame_Bufs(*((void *)this + 1995), (uint64_t)*v6, 0);
  bzero(*v6, 0x16878uLL);
  *(_DWORD **)((char *)v6 + 340) = *(_DWORD **)((char *)v6 + 108);
  if (CAVDDecoder::isADSDecryption(this)) {
    *((_DWORD *)v6 + 74) = 0;
  }
  uint64_t result = 0;
  *((_DWORD *)this + 713) = 0;
  *((unsigned char *)this + 2824) = 1;
  return result;
}

uint64_t CAVDAvxDecoder::getChromaFormat(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 81))
  {
    uint64_t result = 0;
    *a3 = 0;
    return result;
  }
  int v5 = *(_DWORD *)(a2 + 104);
  if (*(_DWORD *)(a2 + 100) == 1)
  {
    uint64_t result = 0;
    if (v5 == 1) {
      int v6 = 1;
    }
    else {
      int v6 = 2;
    }
    goto LABEL_12;
  }
  if (!v5)
  {
    uint64_t result = 0;
    int v6 = 3;
LABEL_12:
    *a3 = v6;
    return result;
  }
  *a3 = 0;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a2 + 100);
    int v8 = *(_DWORD *)(a2 + 104);
    int v9 = 136315650;
    int v10 = "int CAVDAvxDecoder::getChromaFormat(av1_sequence_header *, int *)";
    __int16 v11 = 1024;
    int v12 = v7;
    __int16 v13 = 1024;
    int v14 = v8;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: subsampling x/y %d/%d, unsupported chroma format idc\n", (uint8_t *)&v9, 0x18u);
  }
  return 0xFFFFFFFFLL;
}

uint64_t CAVDAvxDecoder::getBitDepth(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(a2 + 76);
  switch(v3)
  {
    case 12:
      uint64_t result = 0;
      int v5 = 4;
LABEL_7:
      *a3 = v5;
      return result;
    case 10:
      uint64_t result = 0;
      int v5 = 2;
      goto LABEL_7;
    case 8:
      uint64_t result = 0;
      *a3 = 0;
      break;
    default:
      *a3 = 0;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315394;
        int v7 = "int CAVDAvxDecoder::getBitDepth(av1_sequence_header *, int *)";
        __int16 v8 = 1024;
        int v9 = v3;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: bit depth %d not recognized\n", (uint8_t *)&v6, 0x12u);
      }
      return 0xFFFFFFFFLL;
  }
  return result;
}

double CAVDAvxDecoder::copySeqParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    *(void *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    double result = *(double *)(a3 + 2164);
    *(double *)a2 = result;
    *(unsigned char *)(a2 + 32) = *(_DWORD *)(a1 + 3036);
    char v4 = *(unsigned char *)(a1 + 3032);
    *(unsigned char *)(a2 + 33) = v4;
    *(unsigned char *)(a2 + 34) = v4;
    if (*(_DWORD *)(a3 + 60) == 15) {
      __int16 v5 = 128;
    }
    else {
      __int16 v5 = 64;
    }
    *(_WORD *)(a2 + 28) = v5;
    *(unsigned char *)(a2 + 89) = *(_DWORD *)(a3 + 128);
    int v7 = *(_DWORD *)(a3 + 40);
    int v6 = *(_DWORD *)(a3 + 44);
    *(_DWORD *)(a2 + 92) = v7;
    *(_DWORD *)(a2 + 96) = v6;
    if (*(unsigned char *)(a1 + 10) && v7 == 0x10000 && v6 == 0x10000)
    {
      *(void *)&double result = 0x87000000F00;
      *(void *)(a2 + 92) = 0x87000000F00;
      *(void *)a2 = 0x87000000F00;
    }
  }
  return result;
}

uint64_t CAVDAvxDecoder::VAStopDecode(AV1_RLM **this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 2824))
  {
    AV1_RLM::flush_RLM(this[1995], (uint64_t)this[5303] + 1800);
    int v3 = 0x7FFFFFFF;
    while (!CAVDAvxDecoder::getDispFrameParams((uint64_t)this, &v3))
      (*((void (**)(AV1_RLM **, void))*this + 10))(this, v5);
    return 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      char v4 = "VAStopDecode";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: bailing out of %s because start didn't complete", (uint8_t *)&v3, 0xCu);
    }
    return 305;
  }
}

uint64_t CAVDAvxDecoder::getDispFrameParams(uint64_t a1, void *a2)
{
  char v4 = (unsigned int **)(a1 + 42552);
  memcpy(__dst, a2, sizeof(__dst));
  while (!CAVDAvxDecoder::removeFrame(a1, v4[1], __dst))
    ;
  unsigned int v5 = *v4;

  return CAVDAvxDecoder::removeFrame(a1, v5, (unsigned int *)a2);
}

uint64_t CAVDAvxDecoder::queueTrace(CAVDAvxDecoder *this)
{
  return 0;
}

uint64_t CAVDAvxDecoder::initPicture(CAVDAvxDecoder *this, unsigned int a2)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  char v4 = (char *)this + 42392;
  uint64_t v87 = 0;
  uint64_t ChromaFormat = CAVDAvxDecoder::getChromaFormat((uint64_t)this, *((void *)this + 5303) + 32, (int *)&v87 + 1);
  if (ChromaFormat)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "int CAVDAvxDecoder::initPicture(uint32_t)";
      uint64_t v6 = &_os_log_internal;
      int v7 = "AppleAVD: %s: failed to get chroma format idc from parsed header\n";
LABEL_10:
      uint64_t v10 = buf;
LABEL_11:
      uint32_t v11 = 12;
LABEL_12:
      _os_log_impl(&dword_223977000, v6, OS_LOG_TYPE_DEFAULT, v7, v10, v11);
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  int v8 = HIDWORD(v87);
  int v9 = *(unsigned __int8 *)(*((void *)this + 1993) + 56);
  if (HIDWORD(v87) != v9)
  {
    uint64_t ChromaFormat = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    if (ChromaFormat)
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "initPicture";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v8;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v9;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ChrFmt changed: %d vs %d", buf, 0x18u);
    }
  }
  if (CAVDAvxDecoder::getBitDepth(ChromaFormat, *((void *)v4 + 4) + 32, (int *)&v87))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "int CAVDAvxDecoder::initPicture(uint32_t)";
      uint64_t v6 = &_os_log_internal;
      int v7 = "AppleAVD: %s: failed to get bitdepth from parsed header\n";
      goto LABEL_10;
    }
    return 0xFFFFFFFFLL;
  }
  int v13 = v87;
  int v14 = *(unsigned __int8 *)(*((void *)this + 1993) + 57);
  if (v87 != v14 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "initPicture";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v13;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v14;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bd changed: %d vs %d", buf, 0x18u);
  }
  CAVDAvxDecoder::copySeqParams((uint64_t)this, (uint64_t)buf, *((void *)v4 + 4));
  if (*((_DWORD *)v4 + 88)
    && ((int v15 = *(_DWORD *)buf, v16 = *((_DWORD *)v4 + 44), *(_DWORD *)buf > v16)
     || *(_DWORD *)&buf[4] > *((_DWORD *)v4 + 45)
     || v107 > v4[208]
     || BYTE1(v107) > v4[209]
     || BYTE2(v107) > v4[210]
     || *(unsigned __int16 *)&buf[28] > *((unsigned __int16 *)v4 + 102)))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v100 = 136315650;
      uint64_t v101 = "initPicture";
      __int16 v102 = 1024;
      int v103 = v15;
      __int16 v104 = 1024;
      unsigned int v105 = v16;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): spsChanged - width : %d vs %d", v100, 0x18u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v17 = *((_DWORD *)v4 + 45);
      *(_DWORD *)int v100 = 136315650;
      uint64_t v101 = "initPicture";
      __int16 v102 = 1024;
      int v103 = *(_DWORD *)&buf[4];
      __int16 v104 = 1024;
      unsigned int v105 = v17;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): spsChanged - height: %d vs %d", v100, 0x18u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v18 = v4[208];
      *(_DWORD *)int v100 = 136315650;
      uint64_t v101 = "initPicture";
      __int16 v102 = 1024;
      int v103 = v107;
      __int16 v104 = 1024;
      unsigned int v105 = v18;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): spsChanged - ch_idc: %d vs %d", v100, 0x18u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = v4[209];
      *(_DWORD *)int v100 = 136315650;
      uint64_t v101 = "initPicture";
      __int16 v102 = 1024;
      int v103 = BYTE1(v107);
      __int16 v104 = 1024;
      unsigned int v105 = v19;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): spsChanged - bdY-8 : %d vs %d", v100, 0x18u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v20 = v4[210];
      *(_DWORD *)int v100 = 136315650;
      uint64_t v101 = "initPicture";
      __int16 v102 = 1024;
      int v103 = BYTE2(v107);
      __int16 v104 = 1024;
      unsigned int v105 = v20;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): spsChanged - bdC-8 : %d vs %d", v100, 0x18u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v21 = *((unsigned __int16 *)v4 + 102);
      *(_DWORD *)int v100 = 136315650;
      uint64_t v101 = "initPicture";
      __int16 v102 = 1024;
      int v103 = *(unsigned __int16 *)&buf[28];
      __int16 v104 = 1024;
      unsigned int v105 = v21;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): spsChanged - maxBlk: %d vs %d", v100, 0x18u);
    }
    int v22 = 1;
  }
  else
  {
    int v22 = 0;
  }
  if (v13 == v14) {
    int v23 = v22;
  }
  else {
    int v23 = 1;
  }
  if (v8 != v9) {
    int v23 = 1;
  }
  if (a2 >= 2)
  {
    if (v23)
    {
      int v24 = AppleAVDCommandBuilder::waitNumInFlight(*((AppleAVDCommandBuilder **)this + 293), 1u);
      if (v24)
      {
        int v25 = v24;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        *(_DWORD *)int v100 = 136315394;
        uint64_t v101 = "initPicture";
        __int16 v102 = 1024;
        int v103 = v25;
        uint64_t v6 = &_os_log_internal;
        int v7 = "AppleAVD: WARNING: %s(): timeout status: %d";
        uint64_t v10 = v100;
        goto LABEL_77;
      }
    }
  }
  if (((*((_DWORD *)v4 + 88) != 0) & ~v22) == 0)
  {
    *((uint32x2_t *)v4 + 22) = vmax_u32(*(uint32x2_t *)(v4 + 176), *(uint32x2_t *)buf);
    unsigned int v26 = v4[208];
    if (v26 <= v107) {
      LOBYTE(v26) = v107;
    }
    v4[208] = v26;
    unsigned int v27 = v4[209];
    if (v27 <= BYTE1(v107)) {
      LOBYTE(v27) = BYTE1(v107);
    }
    v4[209] = v27;
    unsigned int v28 = v4[210];
    if (v28 <= BYTE2(v107)) {
      LOBYTE(v28) = BYTE2(v107);
    }
    v4[210] = v28;
    unsigned int v29 = *((unsigned __int16 *)v4 + 102);
    if (v29 <= *(unsigned __int16 *)&buf[28]) {
      LOWORD(v29) = *(_WORD *)&buf[28];
    }
    *((_WORD *)v4 + 102) = v29;
    *(uint32x2_t *)(v4 + 268) = vmax_u32(*(uint32x2_t *)(v4 + 268), *(uint32x2_t *)(v4 + 140));
    if (v22) {
      (*(void (**)(void))(**((void **)this + 262) + 136))(*((void *)this + 262));
    }
    if ((*(unsigned int (**)(void, char *))(**((void **)this + 262) + 128))(*((void *)this + 262), v4 + 176))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)int v100 = 136315138;
      uint64_t v101 = "int CAVDAvxDecoder::initPicture(uint32_t)";
      uint64_t v6 = &_os_log_internal;
      int v7 = "AppleAVD: %s fail to allocate work buffer for sps\n";
      uint64_t v10 = v100;
      goto LABEL_11;
    }
    *((_DWORD *)v4 + 88) = 1;
    if (*(void *)v4)
    {
      uint64_t v30 = (char *)this + 8008;
      int v31 = (char *)this + 13424;
      uint64_t v32 = -26416;
      uint64_t v33 = 496;
      do
      {
        if (*(void *)v30)
        {
          uint64_t v34 = *(void *)v4 + v32;
          *(void *)(v34 + 26544) = *(void *)v30;
          long long v35 = *((_OWORD *)v30 + 6);
          long long v37 = *((_OWORD *)v30 + 3);
          long long v36 = *((_OWORD *)v30 + 4);
          *(_OWORD *)(v34 + 26632) = *((_OWORD *)v30 + 5);
          *(_OWORD *)(v34 + 26648) = v35;
          *(_OWORD *)(v34 + 26600) = v37;
          *(_OWORD *)(v34 + 26616) = v36;
          long long v38 = *((_OWORD *)v30 + 10);
          long long v40 = *((_OWORD *)v30 + 7);
          long long v39 = *((_OWORD *)v30 + 8);
          *(_OWORD *)(v34 + 26696) = *((_OWORD *)v30 + 9);
          *(_OWORD *)(v34 + 26712) = v38;
          *(_OWORD *)(v34 + 26664) = v40;
          *(_OWORD *)(v34 + 26680) = v39;
          long long v41 = *(_OWORD *)v30;
          long long v42 = *((_OWORD *)v30 + 2);
          *(_OWORD *)(v34 + 26568) = *((_OWORD *)v30 + 1);
          *(_OWORD *)(v34 + 26584) = v42;
          *(_OWORD *)(v34 + 26552) = v41;
        }
        if (*(void *)v31)
        {
          uint64_t v43 = *(void *)v4 + v32;
          *(void *)(v43 + 26728) = *(void *)v31;
          long long v44 = *((_OWORD *)v31 + 5);
          long long v45 = *((_OWORD *)v31 + 6);
          long long v46 = *((_OWORD *)v31 + 4);
          *(_OWORD *)(v43 + 26784) = *((_OWORD *)v31 + 3);
          *(_OWORD *)(v43 + 26832) = v45;
          *(_OWORD *)(v43 + 26816) = v44;
          *(_OWORD *)(v43 + 26800) = v46;
          long long v47 = *((_OWORD *)v31 + 9);
          long long v48 = *((_OWORD *)v31 + 10);
          long long v49 = *((_OWORD *)v31 + 8);
          *(_OWORD *)(v43 + 26848) = *((_OWORD *)v31 + 7);
          *(_OWORD *)(v43 + 26896) = v48;
          *(_OWORD *)(v43 + 26880) = v47;
          *(_OWORD *)(v43 + 26864) = v49;
          long long v50 = *(_OWORD *)v31;
          long long v51 = *((_OWORD *)v31 + 1);
          *(_OWORD *)(v43 + 26768) = *((_OWORD *)v31 + 2);
          *(_OWORD *)(v43 + 26752) = v51;
          *(_OWORD *)(v43 + 26736) = v50;
          uint64_t v52 = *(void *)v4;
          *(_DWORD *)(v52 + v33) = -1;
          *(void *)(v52 + v32 + 26920) = 0;
        }
        v30 += 176;
        v31 += 176;
        v33 += 2032;
        v32 += 2032;
      }
      while (v32);
    }
  }
  uint64_t v53 = *((void *)this + 1993);
  *(void *)(v53 + 8) = *(void *)(*((void *)v4 + 4) + 2176);
  long long v54 = *(_OWORD *)&buf[16];
  *(_OWORD *)(v53 + 56) = v107;
  *(void *)(v53 + 120) = v111;
  *(_OWORD *)(v53 + 40) = v54;
  long long v55 = *(_OWORD *)buf;
  *(_OWORD *)(v53 + 24) = *(_OWORD *)buf;
  *(_OWORD *)(v53 + 104) = v110;
  long long v56 = v108;
  *(_OWORD *)(v53 + 88) = v109;
  long long v57 = v107;
  *(_OWORD *)(v53 + 72) = v108;
  long long v58 = *(_OWORD *)&buf[16];
  *(_OWORD *)((char *)this + 42440) = v55;
  *(_OWORD *)((char *)this + 42456) = v58;
  long long v59 = v110;
  *(_OWORD *)((char *)this + 42504) = v109;
  *(_OWORD *)((char *)this + 42520) = v59;
  *((void *)this + 5317) = v111;
  *(_OWORD *)((char *)this + 42472) = v57;
  *(_OWORD *)((char *)this + 42488) = v56;
  (*(void (**)(void))(**((void **)this + 262) + 272))();
  if (*((_DWORD *)v4 + 87)
    && (*(unsigned int (**)(void, uint64_t, uint8_t *))(**((void **)this + 262) + 280))(*((void *)this + 262), *((void *)this + 1993) + 79236, v100))
  {
    int v22 = 1;
  }
  if (a2 >= 2)
  {
    if (v22)
    {
      int v60 = AppleAVDCommandBuilder::waitNumInFlight(*((AppleAVDCommandBuilder **)this + 293), 1u);
      if (v60)
      {
        int v61 = v60;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        *(_DWORD *)int v88 = 136315394;
        uint64_t v89 = "initPicture";
        __int16 v90 = 1024;
        int v91 = v61;
        uint64_t v6 = &_os_log_internal;
        int v7 = "AppleAVD: WARNING: %s(): timeout status: %d";
        uint64_t v10 = v88;
LABEL_77:
        uint32_t v11 = 18;
        goto LABEL_12;
      }
    }
  }
  if (((*((_DWORD *)v4 + 87) != 0) & ~v22) == 0)
  {
    if (v22) {
      (*(void (**)(void, uint8_t *))(**((void **)this + 262) + 152))(*((void *)this + 262), v100);
    }
    if ((*(unsigned int (**)(void, uint64_t, void, uint8_t *))(**((void **)this + 262) + 144))(*((void *)this + 262), *((void *)this + 1993) + 24, 0, v100))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v88 = 136315138;
        uint64_t v89 = "int CAVDAvxDecoder::initPicture(uint32_t)";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s fail to allocate work buffer for pps\n", v88, 0xCu);
      }
      (*(void (**)(void, void))(**((void **)this + 262) + 152))(*((void *)this + 262), 0);
      uint64_t v62 = *((void *)this + 1993) + 79236;
      *(_DWORD *)(v62 + 48) = 0;
      *(_OWORD *)(v62 + 16) = 0u;
      *(_OWORD *)(v62 + 32) = 0u;
      *(_OWORD *)uint64_t v62 = 0u;
      *((_DWORD *)v4 + 87) = 0;
      return 0xFFFFFFFFLL;
    }
    *((_DWORD *)v4 + 87) = 1;
  }
  unsigned __int8 v86 = v13;
  memcpy((void *)(*((void *)this + 1993) + 136), (const void *)(*((void *)v4 + 4) + 13928), 0x13210uLL);
  uint64_t v63 = *((void *)v4 + 4);
  uint64_t v64 = *((void *)this + 1993);
  *(unsigned char *)(v64 + 128) = (*(_DWORD *)(v63 + 1868) & 0xFFFFFFFD) == 0;
  int v65 = *(unsigned __int8 *)(v63 + 2284);
  if (*(unsigned char *)(v63 + 2284)
    && (uint64_t v66 = *(void *)(v63 + 1912)) != 0
    && ((uint64_t v67 = *(void *)(v63 + 1920), v68 = *(_DWORD *)(v67 + 716), v68 != *(_DWORD *)(v66 + 716))
     || *(_DWORD *)(v67 + 720) != *(_DWORD *)(v66 + 720)))
  {
    int v85 = *(_DWORD *)(v66 + 716);
    int v69 = 1;
    *(unsigned char *)(v64 + 16) = 1;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v74 = *(_DWORD *)(v67 + 720);
      int v75 = *(_DWORD *)(v66 + 720);
      *(_DWORD *)int v88 = 136316418;
      uint64_t v89 = "initPicture";
      __int16 v90 = 1024;
      int v91 = v65;
      __int16 v92 = 1024;
      int v93 = v68;
      __int16 v94 = 1024;
      int v95 = v74;
      __int16 v96 = 1024;
      int v97 = v85;
      __int16 v98 = 1024;
      int v99 = v75;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): resolution_change=1, segEn=%d, mi curr %4d x %4d, prev %4d x %4d", v88, 0x2Au);
      uint64_t v64 = *((void *)this + 1993);
      uint64_t v63 = *((void *)v4 + 4);
      int v69 = *(unsigned __int8 *)(v63 + 2284);
    }
  }
  else
  {
    *(unsigned char *)(v64 + 16) = 0;
    int v69 = v65;
  }
  v70 = (_DWORD *)(v64 + 79300);
  *(_DWORD *)(v64 + 79316) = 0;
  *(_OWORD *)(v64 + 79300) = 0u;
  uint64_t v71 = *(void *)(v63 + 1920);
  *(void *)(v71 + 504) = 0;
  if (v69)
  {
    uint64_t v72 = *(void *)(v63 + 1912);
    if (v72) {
      BOOL v73 = *(void *)(v72 + 504) != 0;
    }
    else {
      BOOL v73 = 0;
    }
    if (*(unsigned char *)(v64 + 128)) {
      goto LABEL_103;
    }
    if (*(unsigned char *)(v63 + 1940)) {
      BOOL v73 = 0;
    }
    if (!v73)
    {
LABEL_103:
      _DWORD *v70 = 1;
    }
    else
    {
      int v76 = *(unsigned __int8 *)(v64 + 16);
      _DWORD *v70 = v76;
      if (!v76)
      {
        uint64_t v77 = *(void *)(v72 + 504);
        *(void *)(v71 + 504) = v77;
        *(void *)(v64 + 79304) = v77;
      }
    }
    if (*(unsigned char *)(v63 + 2285))
    {
      *(_DWORD *)(v71 + 496) = *(_DWORD *)(v71 + 2024);
      *(void *)(v71 + 504) = v71 + 312;
      *(void *)(v64 + 79312) = v71 + 312;
    }
  }
  *(unsigned char *)(v64 + 56) = v8;
  *(unsigned char *)(v64 + 58) = v86;
  *(unsigned char *)(v64 + 57) = v86;
  *(_DWORD *)(v64 + 78496) = 0;
  unint64_t v78 = *(void *)&vadd_s32(*(int32x2_t *)(v63 + 2164), (int32x2_t)0x100000001) & 0xFFFFFFFEFFFFFFFELL;
  *(void *)(v64 + 78488) = 0;
  *(int32x2_t *)(v64 + 78500) = vadd_s32((int32x2_t)v78, (int32x2_t)-1);
  if (CAVDAvxDecoder::getSWRStride(this, v78, v86, v86, subWidth[v8]))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)int v88 = 136315138;
    uint64_t v89 = "int CAVDAvxDecoder::initPicture(uint32_t)";
    uint64_t v6 = &_os_log_internal;
    int v7 = "AppleAVD: %s fail to get SWR stride for the picture\n";
    goto LABEL_120;
  }
  CAVDAvxDecoder::getMotionFieldInfo(this);
  unsigned int v79 = *(_DWORD *)(*((void *)v4 + 4) + 3164) - 2;
  if (v79 > 6) {
    int v80 = 0;
  }
  else {
    int v80 = dword_223AD0B7C[v79];
  }
  *(_DWORD *)(*((void *)this + 1993) + 79200) = v80;
  if (CAVDAvxDecoder::getDeltaLfRes(this))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)int v88 = 136315138;
    uint64_t v89 = "int CAVDAvxDecoder::initPicture(uint32_t)";
    uint64_t v6 = &_os_log_internal;
    int v7 = "AppleAVD: %s fail to get delta lf res\n";
    goto LABEL_120;
  }
  if (CAVDAvxDecoder::getRestorationUnitSize(this, 0)
    || CAVDAvxDecoder::getRestorationUnitSize(this, 1)
    || CAVDAvxDecoder::getRestorationUnitSize(this, 2))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)int v88 = 136315138;
    uint64_t v89 = "int CAVDAvxDecoder::initPicture(uint32_t)";
    uint64_t v6 = &_os_log_internal;
    int v7 = "AppleAVD: %s fail to get restoration unit size\n";
    goto LABEL_120;
  }
  *(void *)(*((void *)this + 1993) + 79224) = AV1_RLM::Get_Ref_Pic_List(*((AV1_RLM **)this + 1995));
  uint64_t Cur_Frame_Context_Info = AV1_Syntax::Get_Cur_Frame_Context_Info(*((AV1_Syntax **)this + 1994));
  uint64_t v82 = *((void *)this + 1993) + 79288;
  *(void *)uint64_t v82 = Cur_Frame_Context_Info;
  if (!Cur_Frame_Context_Info)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)int v88 = 136315138;
    uint64_t v89 = "int CAVDAvxDecoder::initPicture(uint32_t)";
    uint64_t v6 = &_os_log_internal;
    int v7 = "AppleAVD: %s(): fail to get probs info for current frame\n";
LABEL_120:
    uint64_t v10 = v88;
    goto LABEL_11;
  }
  int v83 = (_DWORD *)(*(void *)v4 + 2024);
  uint64_t v84 = 13;
  while (Cur_Frame_Context_Info != *((void *)v83 - 8))
  {
    v83 += 508;
    if (!--v84) {
      goto LABEL_129;
    }
  }
  *(_DWORD *)(v82 + 8) = *v83;
LABEL_129:
  uint64_t result = 0;
  if (*((unsigned char *)this + 10)) {
    *((_DWORD *)this + 764) = 1;
  }
  return result;
}

BOOL CAVDAvxDecoder::isIntraOnly(CAVDAvxDecoder *this)
{
  return (*(_DWORD *)(*((void *)this + 5303) + 1868) & 0xFFFFFFFD) == 0;
}

uint64_t CAVDAvxDecoder::getCropRegion(CAVDAvxDecoder *this)
{
  uint64_t v1 = (int32x2_t *)(*((void *)this + 5303) + 2164);
  uint64_t v2 = *((void *)this + 1993) + 78488;
  *(_DWORD *)(v2 + 8) = 0;
  int32x2_t v3 = vadd_s32((int32x2_t)(*(void *)&vadd_s32(*v1, (int32x2_t)0x100000001) & 0xFFFFFFFEFFFFFFFELL), (int32x2_t)-1);
  *(void *)uint64_t v2 = 0;
  *(int32x2_t *)(v2 + 12) = v3;
  return 0;
}

uint64_t CAVDAvxDecoder::getSWRStride(CAVDAvxDecoder *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v5 = *((_DWORD *)this + 661);
  if (v5)
  {
    if (a3 <= a4) {
      unsigned int v6 = a4;
    }
    else {
      unsigned int v6 = a3;
    }
    unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
    if (v5 == 1) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
    }
    switch(v8)
    {
      case 0u:
        unsigned int v9 = 2 * a2;
        goto LABEL_17;
      case 2u:
        unsigned int v12 = 2 * a2;
        a2 = (2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC;
        int v13 = (2 * ((2863311531u * (unint64_t)(v12 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
        goto LABEL_18;
      case 4u:
        unsigned int v14 = 2 * a2;
        a2 = (2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8;
        int v13 = (2 * ((3435973837u * (unint64_t)(v14 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
        goto LABEL_18;
      case 8u:
        unsigned int v9 = 4 * a2;
        a2 *= 2;
LABEL_17:
        int v13 = v9 / a5;
LABEL_18:
        unsigned int v11 = (v13 + 63) & 0xFFFFFFC0;
        unsigned int v10 = (a2 + 63) & 0xFFFFFFC0;
        goto LABEL_19;
      default:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v18 = 136315394;
          unsigned int v19 = "int CAVDAvxDecoder::getSWRStride(uint32_t, uint32_t, uint32_t, uint32_t)";
          __int16 v20 = 1024;
          unsigned int v21 = v8 + 8;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: bad swr bit depth %d\n", (uint8_t *)&v18, 0x12u);
        }
        return 0xFFFFFFFFLL;
    }
  }
  unsigned int v10 = 0;
  unsigned int v11 = 0;
LABEL_19:
  uint64_t v15 = 0;
  uint64_t v16 = *((void *)this + 1993);
  if (!*(unsigned char *)(v16 + 56)) {
    unsigned int v11 = 0;
  }
  *(_DWORD *)(v16 + 78508) = v10;
  *(_DWORD *)(v16 + 78512) = v11;
  return v15;
}

void CAVDAvxDecoder::getMotionFieldInfo(CAVDAvxDecoder *this)
{
  bzero((void *)(*((void *)this + 1993) + 78528), 0x2A0uLL);
  uint64_t v2 = 0;
  int32x2_t v3 = (uint64_t *)((char *)this + 42424);
  uint64_t v4 = 78532;
  do
  {
    uint64_t v5 = *v3;
    uint64_t v6 = *v3 + v2;
    int v7 = *(char *)(v6 + 1928);
    if (*(unsigned char *)(v6 + 1928)) {
      uint64_t v8 = *(void *)(*(void *)(v5 + 1920) + 8 * (v7 - 1) + 72);
    }
    else {
      uint64_t v8 = 0;
    }
    if (!*(unsigned char *)(v5 + 1957)) {
      int v7 = 0;
    }
    uint64_t v9 = *((void *)this + 1993);
    *(_DWORD *)(v9 + 224 * v2 + 78528) = v7;
    if (v8)
    {
      for (uint64_t i = 0; i != 28; i += 4)
        *(_DWORD *)(v9 + v4 + i) = *(_DWORD *)(v8 + 8 + i);
      uint64_t v11 = v9 + 78528 + 224 * v2;
      *(void *)(v11 + 32) = *(void *)(v8 + 128);
      long long v12 = *(_OWORD *)(v8 + 200);
      long long v13 = *(_OWORD *)(v8 + 216);
      long long v14 = *(_OWORD *)(v8 + 232);
      *(_OWORD *)(v11 + 88) = *(_OWORD *)(v8 + 184);
      *(_OWORD *)(v11 + 136) = v14;
      *(_OWORD *)(v11 + 120) = v13;
      *(_OWORD *)(v11 + 104) = v12;
      long long v15 = *(_OWORD *)(v8 + 264);
      long long v16 = *(_OWORD *)(v8 + 280);
      long long v17 = *(_OWORD *)(v8 + 296);
      *(_OWORD *)(v11 + 152) = *(_OWORD *)(v8 + 248);
      *(_OWORD *)(v11 + 200) = v17;
      *(_OWORD *)(v11 + 184) = v16;
      *(_OWORD *)(v11 + 168) = v15;
      long long v18 = *(_OWORD *)(v8 + 136);
      long long v19 = *(_OWORD *)(v8 + 152);
      *(_OWORD *)(v11 + 72) = *(_OWORD *)(v8 + 168);
      *(_OWORD *)(v11 + 56) = v19;
      *(_OWORD *)(v11 + 40) = v18;
      *(_DWORD *)(*((void *)this + 1993) + 224 * v2 + 78744) = *(_DWORD *)(v8 + 2024);
    }
    ++v2;
    v4 += 224;
  }
  while (v2 != 3);
}

uint64_t CAVDAvxDecoder::getDeltaQRes(CAVDAvxDecoder *this)
{
  int v1 = *(_DWORD *)(*((void *)this + 5303) + 3164) - 2;
  if (v1 > 6) {
    int v2 = 0;
  }
  else {
    int v2 = dword_223AD0B7C[v1];
  }
  *(_DWORD *)(*((void *)this + 1993) + 79200) = v2;
  return 0;
}

uint64_t CAVDAvxDecoder::getDeltaLfRes(CAVDAvxDecoder *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 5303);
  if (*(unsigned char *)(v1 + 1956))
  {
    int v2 = 0;
LABEL_3:
    uint64_t v3 = 0;
    *(_DWORD *)(*((void *)this + 1993) + 79204) = v2;
    return v3;
  }
  int v2 = *(_DWORD *)(v1 + 3160);
  if (!v2) {
    goto LABEL_3;
  }
  int v2 = *(_DWORD *)(v1 + 3168);
  if (!v2) {
    goto LABEL_3;
  }
  int v5 = *(_DWORD *)(v1 + 3172);
  int v6 = v5 - 1;
  if (v5 - 1) < 8 && ((0x8Bu >> v6))
  {
    int v2 = dword_223AD0B98[v6];
    goto LABEL_3;
  }
  *(_DWORD *)(*((void *)this + 1993) + 79204) = 0;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    uint64_t v8 = "int CAVDAvxDecoder::getDeltaLfRes()";
    __int16 v9 = 1024;
    int v10 = v5;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid delta lf res %d\n", (uint8_t *)&v7, 0x12u);
  }
  return 0xFFFFFFFFLL;
}

uint64_t CAVDAvxDecoder::getRestorationUnitSize(CAVDAvxDecoder *this, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 5303);
  if (*(unsigned char *)(v3 + 1963) || *(unsigned char *)(v3 + 1956) || !*(unsigned char *)(v3 + 100) || *(_DWORD *)(v3 + 2240) < a2)
  {
    uint64_t result = 0;
    *(_DWORD *)(*((void *)this + 1993) + 4 * a2 + 79208) = 0;
  }
  else
  {
    int v5 = *(_DWORD *)(v3 + 4 * a2 + 3460);
    switch(v5)
    {
      case 64:
        uint64_t result = 0;
        uint64_t v6 = *((void *)this + 1993) + 4 * a2;
        int v7 = 1;
        goto LABEL_13;
      case 128:
        uint64_t result = 0;
        uint64_t v6 = *((void *)this + 1993) + 4 * a2;
        int v7 = 2;
        goto LABEL_13;
      case 256:
        uint64_t result = 0;
        uint64_t v6 = *((void *)this + 1993) + 4 * a2;
        int v7 = 3;
LABEL_13:
        *(_DWORD *)(v6 + 79208) = v7;
        return result;
    }
    uint64_t result = 0;
    *(_DWORD *)(*((void *)this + 1993) + 4 * a2 + 79208) = 0;
    if (!a2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(_DWORD *)(v3 + 3460);
        int v9 = 136315394;
        int v10 = "int CAVDAvxDecoder::getRestorationUnitSize(int)";
        __int16 v11 = 1024;
        int v12 = v8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid restoration unit size for Y plane %d\n", (uint8_t *)&v9, 0x12u);
      }
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t CAVDAvxDecoder::VADecodeFrameHeader(CAVDAvxDecoder *this, unsigned __int8 *a2, int a3, int a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v8 = (char *)this + 42424;
  uint64_t v9 = AV1_RLM::Assign_Cur_Frame_New_FB(*((void *)this + 1995), *((void *)this + 5303) + 1800);
  *((void *)v8 + 1) = v9;
  if (v9)
  {
    v8[348] = 0;
    int v10 = AV1_Syntax::Parse_Header(*((AV1_Syntax **)this + 1994), a2, a3, *(_DWORD **)v8, 0);
    if (v10 <= 0)
    {
      int v11 = v10;
      AV1_RLM::Swap_Frame_Bufs(*((void *)this + 1995), *(void *)v8, 0);
      if (v11 == -2 || v11 == 0)
      {
        v8[348] = 1;
      }
      else if (v11 == -1)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v18) = 0;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: fail to parse av1 header\n", (uint8_t *)&v18, 2u);
        }
        return 305;
      }
    }
    v8[349] = 0;
    uint64_t v14 = *(void *)v8;
    int v15 = *(_DWORD *)(*(void *)v8 + 2176);
    if (*((_DWORD *)v8 + 85) == v15)
    {
      int v16 = *((_DWORD *)v8 + 86);
      int v17 = *(_DWORD *)(v14 + 2180);
      if (v16 == v17) {
        goto LABEL_21;
      }
    }
    else
    {
      int v17 = *(_DWORD *)(v14 + 2180);
    }
    v8[349] = 1;
    int v16 = v17;
LABEL_21:
    uint64_t result = 0;
    *((_DWORD *)v8 + 85) = v15;
    *((_DWORD *)v8 + 86) = v16;
    return result;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 136315394;
    long long v19 = "VADecodeFrameHeader";
    __int16 v20 = 1024;
    int v21 = a4;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): [ERROR] fno: %8d Assign_Cur_Frame_New_FB return NULL", (uint8_t *)&v18, 0x12u);
  }
  return 304;
}

uint64_t CAVDAvxDecoder::VADecodeFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  uint64_t v8 = a1 + 42688;
  if (*(unsigned char *)(a1 + 42772)) {
    return 409;
  }
  uint64_t v14 = a1 + 42424;
  int v15 = *(_DWORD *)(*(void *)(a1 + 2344) + 6252);
  if (*(unsigned char *)(a1 + 2833))
  {
    if (*(_DWORD *)(*(void *)v14 + 1868))
    {
      AV1_RLM::Swap_Frame_Bufs(*(void *)(a1 + 15960), *(void *)v14, 0);
      goto LABEL_61;
    }
    *(unsigned char *)(a1 + 2833) = 0;
  }
  uint64_t v16 = *(void *)v14;
  if (*(unsigned char *)(a1 + 3004) == 1 && (*(_DWORD *)(v16 + 1868) & 0xFFFFFFFD) != 0)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "VADecodeFrame";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 0;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a4;
    int v17 = &_os_log_internal;
    int v18 = "AppleAVD: %s() : clientID: %2d. For AVIFs, only intra-frames are supported, frameNum : %d";
LABEL_59:
    uint32_t v23 = 24;
LABEL_60:
    _os_log_impl(&dword_223977000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v23);
    goto LABEL_61;
  }
  int v132 = v15;
  *(_DWORD *)int v138 = 0;
  CAVDAvxDecoder::getBitDepth(a1, v16 + 32, (int *)v138);
  if (CAVDAvxDecoder::checkVideoResolution((CAVDAvxDecoder *)a1, *(_DWORD *)(*(void *)v14 + 2176), *(_DWORD *)(*(void *)v14 + 2180), *(int *)v138))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_61;
    }
    int v19 = *(_DWORD *)(a1 + 3024);
    int v20 = *(_DWORD *)(a1 + 3028);
    int v21 = *(_DWORD *)(*(void *)v14 + 2176);
    int v22 = *(_DWORD *)(*(void *)v14 + 2180);
    *(_DWORD *)buf = 136316674;
    *(void *)&uint8_t buf[4] = "VADecodeFrame";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 0;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a4;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v19;
    *(_WORD *)&buf[30] = 1024;
    *(_DWORD *)&unsigned char buf[32] = v20;
    *(_WORD *)&buf[36] = 1024;
    *(_DWORD *)&buf[38] = v21;
    *(_WORD *)&buf[42] = 1024;
    *(_DWORD *)&buf[44] = v22;
    int v17 = &_os_log_internal;
    int v18 = "AppleAVD: %s(): clientID : %2d, #### <WARNING> Frame resolutions exceed allocated storage frameNum:%d old (%dx%d) new (%dx%d)";
    uint32_t v23 = 48;
    goto LABEL_60;
  }
  if (*(unsigned char *)(a1 + 10) && CAVDDecoder::isADSDecryption((CAVDDecoder *)a1)) {
    *(_DWORD *)(a1 + 3056) = -1;
  }
  uint64_t v24 = *(void *)v14;
  uint64_t v25 = *(void *)(a1 + 3048);
  uint64_t v26 = *(void *)(a1 + 3040);
  unsigned int v27 = *(_DWORD *)(a1 + 3056);
  unsigned int v28 = *(_DWORD *)(*(void *)v14 + 13928);
  uint64_t v137 = v14;
  unsigned int v131 = a5;
  if (v27 == -1 && *(unsigned char *)(a1 + 10))
  {
    if (v28)
    {
      unsigned int v29 = 0;
      int v30 = 0;
      unsigned int v31 = *(_DWORD *)(v24 + 13932);
      do
      {
        if (v31)
        {
          uint64_t v32 = 0;
          do
          {
            unsigned int v33 = v32;
            *(_WORD *)(v24 + 79992 + 2 * v30 + 2 * v32) = 0;
            *(unsigned char *)(v24 + 88184 + v30 + v32++) = 1;
            unsigned int v31 = *(_DWORD *)(v24 + 13932);
          }
          while (v33 <= 0x3E && v32 < v31);
          v30 += v32;
          unsigned int v28 = *(_DWORD *)(v24 + 13928);
        }
        if (v29 > 0x3E) {
          break;
        }
        ++v29;
      }
      while (v29 < v28);
    }
  }
  else if (v28)
  {
    unsigned int v34 = 0;
    int v35 = 0;
    int v36 = 0;
    unsigned int v37 = *(_DWORD *)(v24 + 13932);
    do
    {
      if (v37)
      {
        uint64_t v38 = a4;
        uint64_t v39 = 0;
        uint64_t v40 = v24 + 88184 + v36;
        uint64_t v41 = v24 + 79992 + 2 * v36;
        do
        {
          *(_WORD *)(v41 + 2 * v39) = 0;
          *(unsigned char *)(v40 + v39) = 0;
          if (v27 > v35 + (int)v39)
          {
            unint64_t v42 = *(unsigned int *)(v26 + 4 * v35 + 4 * v39);
            if (v42)
            {
              unint64_t v43 = *(void *)(v24 + 46704 + 8 * v36 + 8 * v39);
              if (v43 >= v42)
              {
                uint64_t v44 = *(unsigned int *)(v25 + 4 * v35 + 4 * v39);
                uint64_t v45 = *(void *)(v24 + 13936 + 8 * v36 + 8 * v39);
                uint64_t v46 = v44 - v45;
                unint64_t v47 = v43 + v45;
                unint64_t v48 = (v44 + v42);
                if (v46 <= 1023 && v47 >= v48)
                {
                  *(_WORD *)(v41 + 2 * v39) = v46;
                  *(unsigned char *)(v40 + v39) = 1;
                }
              }
            }
          }
          unsigned int v50 = v39 + 1;
          unsigned int v37 = *(_DWORD *)(v24 + 13932);
          if (v39 > 0x3E) {
            break;
          }
          ++v39;
        }
        while (v50 < v37);
        v36 += v50;
        v35 += v50;
        unsigned int v28 = *(_DWORD *)(v24 + 13928);
        a4 = v38;
        uint64_t v14 = v137;
      }
      if (v34 > 0x3E) {
        break;
      }
      ++v34;
    }
    while (v34 < v28);
  }
  if (v131 == -1)
  {
    uint64_t v51 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)uint64_t v8 = 0xFFFFFFFF00000000;
  }
  else
  {
    *(void *)buf = 0;
    if (!(*(unsigned int (**)(uint64_t, void, uint8_t *, uint64_t))(*(void *)a1 + 112))(a1, v131, buf, 1))
    {
      *(void *)(v8 + 8) = 0;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 0;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a4;
      int v17 = &_os_log_internal;
      int v18 = "AppleAVD: %s() : clientID: %2d Error getting display buffer!, frameNum : %d";
      goto LABEL_59;
    }
    *(_DWORD *)uint64_t v8 = 1;
    *(_DWORD *)(v8 + 4) = v131;
    uint64_t v51 = *(void *)buf;
    *(void *)(v8 + 8) = *(void *)buf + 8;
  }
  *(void *)buf = 0;
  uint64_t v52 = (CAVDAvxDecoder *)(*(uint64_t (**)(uint64_t, void, uint8_t *, void))(*(void *)a1 + 112))(a1, a6, buf, 0);
  if ((v52 & 1) == 0)
  {
    *(void *)(v14 + 256) = 0;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "VADecodeFrame";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 0;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a4;
    int v17 = &_os_log_internal;
    int v18 = "AppleAVD: %s() : clientID: %2d Error getting decoder buffer!, frameNum : %d";
    goto LABEL_59;
  }
  *(_DWORD *)(v14 + 248) = 0;
  *(_DWORD *)(v14 + 252) = a6;
  uint64_t v53 = *(void *)buf;
  uint64_t v54 = *(void *)buf + 8;
  *(void *)(a1 + 2088) = *(void *)buf;
  *(void *)(v14 + 256) = v54;
  *(void *)(v53 + 204) = *(void *)(a1 + 2856);
  uint64_t v55 = *(unsigned int *)(v14 + 252);
  *(_DWORD *)(a1 + 2648) = *(unsigned __int8 *)(v53 + 168);
  uint64_t v56 = *(void *)(v8 + 8);
  if (*(unsigned char *)(a1 + 9))
  {
    if (v56) {
      goto LABEL_74;
    }
    goto LABEL_72;
  }
  if (!v56)
  {
LABEL_72:
    int DisplayMode = 0;
    goto LABEL_73;
  }
  int DisplayMode = CAVDAvxDecoder::getDisplayMode(v52, *(_DWORD *)(v56 + 148));
  uint64_t v54 = v56;
LABEL_73:
  *(_DWORD *)(a1 + 2644) = DisplayMode;
  uint64_t v56 = v54;
LABEL_74:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 23, v56 + 148);
  uint64_t v14 = v137;
  if (*(_DWORD *)(*(void *)v137 + 1800))
  {
    AV1_RLM::Update_Frame_Bufs(*(void *)(a1 + 15960), *(void *)v137, *(void *)(a1 + 8000) + 384 * *(unsigned int *)(v137 + 252));
    AV1_RLM::Swap_Frame_Bufs(*(void *)(a1 + 15960), *(void *)v137, 1);
    uint64_t Disp_Buf = AV1_RLM::Get_Disp_Buf(*(AV1_RLM **)(a1 + 15960));
    if (Disp_Buf)
    {
      uint64_t v61 = Disp_Buf;
      if (*(void *)(Disp_Buf + 2016))
      {
        CAVDAvxDecoder::insertFrame(Disp_Buf, *(_DWORD **)(v137 + 128), Disp_Buf);
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v62 = *(_DWORD *)(v61 + 2024);
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VADecodeFrame";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v62;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): show_existing - frame_to_show w/ nil buffer for buf_idx=%4d", buf, 0x12u);
      }
    }
    CAVDAvxDecoder::sendDisplayBuffer((CAVDAvxDecoder *)a1, a4);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 40))(a1, v55, 0);
    if (*(unsigned char *)(*(void *)(a1 + 2344) + 6032))
    {
      uint64_t v63 = a6;
      uint64_t v64 = 0;
    }
    else
    {
      uint64_t v63 = v131;
      uint64_t v64 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v63, v64);
    return 51;
  }
  if (CAVDAvxDecoder::initPicture((CAVDAvxDecoder *)a1, a4))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "virtual int CAVDAvxDecoder::VADecodeFrame(unsigned char *, int, uint32_t, int, int, int, avd_seq_params *)";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: fail to init picture\n", buf, 0xCu);
    }
    return 305;
  }
  uint64_t v65 = (int)v55;
  uint64_t v136 = v8 + 8;
  int v66 = v55;
  if (a8)
  {
    long long v67 = *(_OWORD *)(a1 + 42440);
    long long v68 = *(_OWORD *)(a1 + 42472);
    *(_OWORD *)(a8 + 16) = *(_OWORD *)(a1 + 42456);
    *(_OWORD *)(a8 + 32) = v68;
    *(_OWORD *)a8 = v67;
    long long v69 = *(_OWORD *)(a1 + 42488);
    long long v70 = *(_OWORD *)(a1 + 42504);
    long long v71 = *(_OWORD *)(a1 + 42520);
    *(void *)(a8 + 96) = *(void *)(a1 + 42536);
    *(_OWORD *)(a8 + 64) = v70;
    *(_OWORD *)(a8 + 80) = v71;
    *(_OWORD *)(a8 + 48) = v69;
    uint64_t v72 = *(void *)v137;
    *(void *)a8 = *(void *)(*(void *)v137 + 2164);
    char v73 = *(unsigned char *)(v72 + 108) - 8;
    *(unsigned char *)(a8 + 34) = v73;
    *(unsigned char *)(a8 + 33) = v73;
    *(unsigned char *)(a8 + 32) = *(unsigned char *)(*(void *)(a1 + 15944) + 56);
    *(unsigned char *)(a8 + 102) = *(unsigned char *)(v72 + 145) != 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 0;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a4;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): clientID : %2d, frameInfoOut is NULL!!!, frameNum:%d", buf, 0x18u);
    }
    uint64_t v72 = *(void *)v137;
    uint64_t v96 = *(void *)(*(void *)v137 + 1920);
    if (v96 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v97 = *(_DWORD *)(v96 + 1944);
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v97;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): frameType :%d ", buf, 0x12u);
      uint64_t v72 = *(void *)v137;
    }
  }
  **(void **)(a1 + 15944) = a2;
  AV1_RLM::Update_Frame_Bufs(*(void *)(a1 + 15960), v72, *(void *)(a1 + 8000) + 384 * *(unsigned int *)(v137 + 252));
  uint64_t v74 = *(void *)(a1 + 8000) + 384 * v65;
  *(void *)(v74 + 8) = *(void *)(v137 + 256);
  *(void *)(v74 + 16) = *(void *)v136;
  int v75 = (_OWORD *)(a1 + 176 * (int)v65);
  long long v76 = v75[194];
  long long v77 = v75[192];
  *(_OWORD *)(v74 + 40) = v75[193];
  *(_OWORD *)(v74 + 24) = v77;
  *(_OWORD *)(v74 + 56) = v76;
  long long v78 = v75[196];
  long long v79 = v75[197];
  long long v80 = v75[198];
  *(_OWORD *)(v74 + 72) = v75[195];
  *(_OWORD *)(v74 + 120) = v80;
  *(_OWORD *)(v74 + 104) = v79;
  *(_OWORD *)(v74 + 88) = v78;
  long long v81 = v75[200];
  long long v82 = v75[201];
  long long v83 = v75[202];
  *(_OWORD *)(v74 + 136) = v75[199];
  *(_OWORD *)(v74 + 184) = v83;
  *(_OWORD *)(v74 + 168) = v82;
  *(_OWORD *)(v74 + 152) = v81;
  uint64_t v84 = *(void *)(a1 + 8000) + 384 * v65;
  long long v85 = v75[346];
  long long v86 = v75[347];
  *(_OWORD *)(v84 + 232) = v75[348];
  *(_OWORD *)(v84 + 216) = v86;
  *(_OWORD *)(v84 + 200) = v85;
  long long v87 = v75[350];
  long long v88 = v75[351];
  long long v89 = v75[352];
  *(_OWORD *)(v84 + 248) = v75[349];
  *(_OWORD *)(v84 + 280) = v88;
  *(_OWORD *)(v84 + 296) = v89;
  *(_OWORD *)(v84 + 264) = v87;
  long long v90 = v75[353];
  long long v91 = v75[354];
  long long v92 = v75[356];
  *(_OWORD *)(v84 + 344) = v75[355];
  *(_OWORD *)(v84 + 360) = v92;
  *(_OWORD *)(v84 + 312) = v90;
  *(_OWORD *)(v84 + 328) = v91;
  uint64_t v93 = *(void *)(a1 + 8000);
  __int16 v94 = (_DWORD *)(v93 + 384 * v65);
  *__int16 v94 = v66;
  v94[94] = a4;
  if (*(_DWORD *)(a1 + 2644))
  {
    *(_DWORD *)(v93 + 384 * (int)v65 + 4) = *(_DWORD *)(v8 + 4);
    int v95 = (void *)(v8 + 8);
  }
  else
  {
    int v95 = (void *)(v137 + 256);
    *__int16 v94 = *(_DWORD *)(v137 + 252);
  }
  *(void *)(v93 + 384 * (int)v65 + 16) = *v95;
  if (!*(unsigned char *)(a1 + 3004)) {
    goto LABEL_116;
  }
  if (!v51)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "vSurfInfoDisp is NULL";
    int v17 = &_os_log_internal;
    int v18 = "AppleAVD: ERROR: [CAVDAvxDecErr] %s";
    goto LABEL_106;
  }
  IOSurfaceRef v98 = IOSurfaceLookup(*(_DWORD *)(v51 + 160));
  if (!v98)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      int v17 = &_os_log_internal;
      int v18 = "AppleAVD: bad IOSurface* in tile offset check";
      uint32_t v23 = 2;
      goto LABEL_60;
    }
LABEL_61:
    if (*(unsigned char *)(a1 + 2832))
    {
      int v57 = 0;
      uint64_t v9 = 305;
    }
    else
    {
      int v57 = *(unsigned __int8 *)(a1 + 2833);
      if (*(unsigned char *)(a1 + 2833))
      {
        uint64_t v9 = 316;
LABEL_66:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VADecodeFrame";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 0;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v9;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v57;
          *(_WORD *)&buf[30] = 1024;
          *(_DWORD *)&unsigned char buf[32] = a4;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s():clientID: %2d,DecodeError: %d,skipToIDR:%d,frameNum :%d", buf, 0x24u);
        }
        return v9;
      }
      AV1_RLM::flush_RLM(*(AV1_RLM **)(a1 + 15960), *(void *)v14 + 1800);
      uint64_t v9 = 316;
      int v57 = 1;
    }
    *(unsigned char *)(a1 + 2833) = v57;
    goto LABEL_66;
  }
  IOSurfaceRef v99 = v98;
  unint64_t SizeOfPlane = IOSurfaceGetSizeOfPlane();
  CFRelease(v99);
  int v100 = *(_DWORD *)(a1 + 3008);
  uint64_t v101 = *(void *)(a1 + 15944);
  int v102 = *(_DWORD *)(v101 + 24);
  uint64_t v130 = v51;
  if (__CFADD__(v100, v102 - 1))
  {
    unint64_t v103 = 0;
    unsigned int v104 = 0;
    LODWORD(v105) = 0;
    int v106 = 1;
    goto LABEL_141;
  }
  unsigned int v107 = *(_DWORD *)(a1 + 3012);
  int v108 = *(_DWORD *)(v101 + 28) - 1;
  if (__CFADD__(v107, v108))
  {
    unint64_t v103 = 0;
    LODWORD(v105) = 0;
    int v106 = 2;
    unsigned int v104 = v107 + v108;
    goto LABEL_141;
  }
  unint64_t v105 = *(unsigned int *)(v51 + 84) * (unint64_t)(v107 + v108);
  if ((v105 & 0xFFFFFFFF00000000) != 0)
  {
    unint64_t v103 = 0;
    int v106 = 4;
LABEL_140:
    unsigned int v104 = v107 + v108;
LABEL_141:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v121 = *(_DWORD *)(a1 + 3012);
      int v122 = *(_DWORD *)(v101 + 28);
      int v123 = *(_DWORD *)(v130 + 84);
      *(_DWORD *)buf = 67111680;
      *(_DWORD *)&uint8_t buf[4] = v100;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v121;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v102;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v122;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&buf[28] = v123;
      *(_WORD *)&unsigned char buf[32] = 2048;
      *(void *)&buf[34] = v103;
      *(_WORD *)&buf[42] = 2048;
      *(void *)&buf[44] = SizeOfPlane;
      *(_WORD *)&buf[52] = 1024;
      *(_DWORD *)&buf[54] = v106;
      *(_WORD *)&buf[58] = 1024;
      *(_DWORD *)&buf[60] = v100 + v102 - 1;
      LOWORD(v143) = 1024;
      *(_DWORD *)((char *)&v143 + 2) = v104;
      WORD3(v143) = 1024;
      DWORD2(v143) = v105;
      int v17 = &_os_log_internal;
      int v18 = "AppleAVD: tile offset out of bounds! [%u %u] + [%u %u], %u, %zu >= %zu ?, %u; %u %u %u";
      uint32_t v23 = 76;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  if (v105 + (unint64_t)(v100 + v102 - 1) >= SizeOfPlane)
  {
    unint64_t v103 = v105 + (unint64_t)(v100 + v102 - 1);
    int v106 = 6;
    goto LABEL_140;
  }
  if ((CAVDDecoder::calcLumaChromaTileOffset((CAVDDecoder *)a1, v100, v107, *(_DWORD *)(*(void *)v136 + 76), *(_DWORD *)(*(void *)v136 + 80), *(unsigned __int8 *)(v101 + 56), (unsigned int *)(a1 + 3016), (unsigned int *)(a1 + 3020)) & 1) == 0)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "VADecodeFrame";
    int v17 = &_os_log_internal;
    int v18 = "AppleAVD: %s(): calcLumaChromaTileOffset returns fail";
LABEL_106:
    uint32_t v23 = 12;
    goto LABEL_60;
  }
LABEL_116:
  int v109 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 2096) + 240))(*(void *)(a1 + 2096), a4, *(unsigned int *)(a1 + 3056));
  uint64_t v110 = *(void *)(a1 + 2096);
  *(_DWORD *)(v110 + 12) = *(_DWORD *)(*(void *)(a1 + 15944) + 140) * *(_DWORD *)(*(void *)(a1 + 15944) + 136);
  AppleAVDCommandBuilder::setDecodeBufferSections(*(void *)(a1 + 2344), v110 + 8);
  if (v109)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v109;
      int v17 = &_os_log_internal;
      int v18 = "AppleAVD: %s(): hwD->DecodePicture return %d";
      uint32_t v23 = 18;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  uint64_t v111 = *(void *)v137;
  int v112 = *(_DWORD *)(*(void *)v137 + 1932);
  if ((v112 || *(_DWORD *)(v111 + 1936)) && (!*(unsigned char *)(v8 + 64) || *(_DWORD *)(v8 + 60) != *(_DWORD *)(v111 + 4096)))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v113 = *(_DWORD *)(v111 + 1936);
      int v114 = *(unsigned __int8 *)(v111 + 145);
      int v115 = *(_DWORD *)(v111 + 4096);
      *(_DWORD *)buf = 136316674;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v112;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v113;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v132;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&unsigned char buf[32] = v114;
      *(_WORD *)&buf[36] = 1024;
      *(_DWORD *)&buf[38] = v115;
      *(_WORD *)&buf[42] = 1024;
      *(_DWORD *)&buf[44] = a4;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): show %d, showable %d, filmGrainMode = %d, params_present %d, apply_grain %d, frame %d", buf, 0x30u);
      uint64_t v111 = *(void *)v137;
    }
    *(unsigned char *)(v8 + 64) = 1;
    *(_DWORD *)(v8 + 60) = *(_DWORD *)(v111 + 4096);
  }
  if (v132 != 2 && *(unsigned char *)(v111 + 145) && *(_DWORD *)(v111 + 4096) == 1)
  {
    if (!*(_DWORD *)(v111 + 1932) && !*(_DWORD *)(v111 + 1800) && !*(_DWORD *)(v111 + 1936))
    {
      uint64_t v14 = v137;
      goto LABEL_152;
    }
    int v149 = 0;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long v143 = 0u;
    long long v144 = 0u;
    memset(buf, 0, sizeof(buf));
    if (av1_populate_film_grain_params((uint64_t)buf, (int *)v111))
    {
      if (v131 == -1) {
        uint64_t v51 = *(void *)(a1 + 2088);
      }
      IOSurfaceRef v116 = IOSurfaceLookup(*(_DWORD *)(v51 + 160));
      if (v116)
      {
        IOSurfaceRef v117 = v116;
        int v118 = IOSurfaceSetDataProperty();
        CFRelease(v117);
        if (!v118 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_151;
        }
        *(_DWORD *)int v138 = 136315394;
        uint64_t v139 = "VADecodeFrame";
        __int16 v140 = 1024;
        int v141 = v118;
        uint64_t v119 = &_os_log_internal;
        int v120 = "AppleAVD: %s(): setDataProperty failed, error=%d\n";
        goto LABEL_149;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v125 = *(_DWORD *)(v51 + 160);
        *(_DWORD *)int v138 = 136315394;
        uint64_t v139 = "VADecodeFrame";
        __int16 v140 = 1024;
        int v141 = v125;
        uint64_t v119 = &_os_log_internal;
        int v120 = "AppleAVD: %s(): setDataProperty(AV1FilmGrain) failed, IOSurface look up for ioSurfID 0x%x failed\n";
LABEL_149:
        uint32_t v124 = 18;
        goto LABEL_150;
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v138 = 136315138;
      uint64_t v139 = "VADecodeFrame";
      uint64_t v119 = &_os_log_internal;
      int v120 = "AppleAVD: %s(): av1_populate_film_grain_params returned false";
      uint32_t v124 = 12;
LABEL_150:
      _os_log_impl(&dword_223977000, v119, OS_LOG_TYPE_DEFAULT, v120, v138, v124);
    }
LABEL_151:
    uint64_t v14 = v137;
    uint64_t v111 = *(void *)v137;
  }
LABEL_152:
  AV1_RLM::Swap_Frame_Bufs(*(void *)(a1 + 15960), v111, 1);
  uint64_t v126 = AV1_RLM::Get_Disp_Buf(*(AV1_RLM **)(a1 + 15960));
  if (v126)
  {
    uint64_t v127 = v126;
    if (*(void *)(v126 + 2016))
    {
      CAVDAvxDecoder::insertFrame(v126, *(_DWORD **)(v14 + 128), v126);
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v128 = *(_DWORD *)(v127 + 2024);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a4;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v128;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): frm %8d decoded - frame_to_show w/ nil buffer for buf_idx=%4d", buf, 0x18u);
    }
  }
  CAVDAvxDecoder::sendDisplayBuffer((CAVDAvxDecoder *)a1, a4);
  CAVDAvxDecoder::insertFrame(v129, *(_DWORD **)(v14 + 136), *(void *)(v14 + 8));
  return 0;
}

uint64_t CAVDAvxDecoder::checkVideoResolution(CAVDAvxDecoder *this, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a4 < 1 || *((_DWORD *)this + 758))
  {
    unsigned int v11 = *((_DWORD *)this + 756);
    if (v11 >= a2 && *((_DWORD *)this + 757) >= a3) {
      return 0;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *((_DWORD *)this + 757);
      int v14 = 136316162;
      int v15 = "checkVideoResolution";
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 1024;
      unsigned int v19 = a3;
      __int16 v20 = 1024;
      unsigned int v21 = v11;
      __int16 v22 = 1024;
      int v23 = v12;
      uint64_t v8 = &_os_log_internal;
      uint64_t v9 = "AppleAVD: ERROR: %s(): ERROR, video resolution %ux%u exceeds allocated size %ux%u\n";
      uint32_t v10 = 36;
      goto LABEL_9;
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 136315394;
    int v15 = "checkVideoResolution";
    __int16 v16 = 1024;
    int v17 = a4;
    uint64_t v8 = &_os_log_internal;
    uint64_t v9 = "AppleAVD: ERROR: %s(): ERROR, bit depth %d exceeds allocated depth 0\n";
    uint32_t v10 = 18;
LABEL_9:
    _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, v10);
  }
  return 308;
}

uint64_t CAVDAvxDecoder::setPixelBuffer(uint64_t result, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  if (a2)
  {
    int v7 = a3;
    uint64_t v10 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)result + 112))(result, a3, &v10);
    if (result)
    {
      *(_DWORD *)a2 = a4;
      *(_DWORD *)(a2 + 4) = v7;
      uint64_t v9 = v10;
      *(void *)(a2 + 8) = v10 + 8;
      *a5 = v9;
    }
    else
    {
      *(void *)(a2 + 8) = 0;
    }
  }
  return result;
}

uint64_t CAVDAvxDecoder::getDisplayMode(CAVDAvxDecoder *this, int a2)
{
  uint64_t result = 1;
  if (a2 > 1885745711)
  {
    if (a2 != 1885745712 && a2 != 1885745714)
    {
      int v3 = 1885746228;
LABEL_8:
      if (a2 != v3) {
        return 2;
      }
    }
  }
  else if (a2 != 1882468912 && a2 != 1882468914)
  {
    int v3 = 1882469428;
    goto LABEL_8;
  }
  return result;
}

uint64_t CAVDAvxDecoder::insertFrame(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a3 + 2016);
  unsigned int v6 = a2[1];
  if (v6 - *a2 >= 0xD && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315394;
    uint64_t v13 = "insertFrame";
    __int16 v14 = 1024;
    int v15 = 2397;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v12, 0x12u);
  }
  int v7 = &a2[150 * (v6 % 0xD)];
  v7[2] = *(_DWORD *)(v5 + 376);
  v7[12] = 1;
  int v8 = a2[1952];
  int v9 = *(_DWORD *)(v5 + 4 * (v8 == 1));
  v7[14] = v8;
  v7[15] = v9;
  *((void *)v7 + 9) = a3;
  uint64_t v10 = 8;
  if (v8 == 1) {
    uint64_t v10 = 16;
  }
  *((void *)v7 + 8) = *(void *)(*(void *)(a3 + 2016) + v10);
  ++a2[1];
  return 0;
}

void CAVDAvxDecoder::sendDisplayBuffer(CAVDAvxDecoder *this, int a2)
{
  int v2 = this;
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(*((void *)this + 293) + 6032);
  v5[0] = a2;
  while (!CAVDAvxDecoder::getDispFrameParams((uint64_t)this, v5))
  {
    if (!v6 || (uint64_t v4 = *(void *)(v6 + 2016)) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        int v8 = "sendDisplayBuffer";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: ERROR, decoder buffer is NULL, no frame will be sent to display", buf, 0xCu);
      }
      return;
    }
    (*(void (**)(CAVDAvxDecoder *, void))(*(void *)v2 + 80))(v2, *(unsigned int *)(v4 + 4 * (v3 == 0)));
    this = v2;
  }
}

uint64_t CAVDAvxDecoder::VAReleaseOutputSurface(AppleAVDCommandBuilder **this, int a2, unsigned int a3)
{
  if (a3 != 1 || *((_DWORD *)this + 661)) {
    AppleAVDCommandBuilder::setReleaseCVPixelBufferIndex(this[292], a2, a3);
  }
  return 0;
}

uint64_t CAVDAvxDecoder::VADisplaySurface(CAVDAvxDecoder *this, int a2)
{
  return 0;
}

BOOL CAVDAvxDecoder::VAIsSurfaceListIndexMapped(CAVDAvxDecoder *this, int a2, int a3)
{
  if (a2 > 128) {
    return 0;
  }
  int v3 = (char *)this + 24;
  if (a3 != 1) {
    int v3 = (char *)this + 1056;
  }
  return *(void *)&v3[8 * a2] != 0;
}

uint64_t CAVDAvxDecoder::VAGetIOSurfaceIDForBufferIndex(CAVDAvxDecoder *this, unsigned int a2, int a3)
{
  if (a2 > 0x80) {
    return 0;
  }
  int v3 = (char *)this + 24;
  if (a3 != 1) {
    int v3 = (char *)this + 1056;
  }
  uint64_t v4 = *(void *)&v3[8 * a2];
  if (v4) {
    return *(unsigned int *)(v4 + 160);
  }
  else {
    return 0;
  }
}

uint64_t CAVDAvxDecoder::VAGetParams(CAVDAvxDecoder *this, int a2, unsigned int *a3)
{
  uint64_t result = 0;
  uint64_t v6 = (char *)this + 42424;
  switch(a2)
  {
    case 0:
      uint64_t result = 0;
      unsigned int Frame_Size_Override_Flag = 13;
      goto LABEL_22;
    case 1:
      return CAVDAvxDecoder::getDispFrameParams((uint64_t)this, a3);
    case 2:
      *(void *)a3 = (*(uint64_t (**)(void))(**((void **)this + 262) + 160))(*((void *)this + 262));
      unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 262) + 168))(*((void *)this + 262));
      uint64_t result = 0;
      a3[2] = v8;
      return result;
    case 3:
      uint64_t result = 0;
      *((unsigned char *)a3 + 88) = 0;
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
      *((_WORD *)a3 + 16) = *((_WORD *)this + 21236);
      *((unsigned char *)a3 + 34) = *((unsigned char *)this + 42474);
      *((unsigned char *)a3 + 89) = *((unsigned char *)this + 42529);
      *(void *)a3 = *((void *)this + 5305);
      *(void *)(a3 + 23) = *(void *)((char *)this + 42532);
      *((_WORD *)a3 + 50) = *((_DWORD *)this + 10690);
      return result;
    case 4:
      uint64_t result = 0;
      *a3 = *((_DWORD *)this + 703);
      *((_WORD *)a3 + 2) = *((_WORD *)this + 1408);
      return result;
    case 5:
      uint64_t result = 0;
      unsigned int Frame_Size_Override_Flag = 1;
      goto LABEL_22;
    case 6:
    case 7:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return result;
    case 8:
      if (!a3) {
        goto LABEL_24;
      }
      uint64_t result = 0;
      unsigned int Frame_Size_Override_Flag = *((_DWORD *)this + 717);
      goto LABEL_22;
    case 9:
      uint64_t result = 0;
      unsigned int Frame_Size_Override_Flag = *((unsigned __int8 *)this + 12);
      goto LABEL_22;
    case 10:
      uint64_t result = 0;
      unsigned int Frame_Size_Override_Flag = *((_DWORD *)this + 4);
      goto LABEL_22;
    case 23:
      if (a3)
      {
        uint64_t result = 0;
        unsigned int Frame_Size_Override_Flag = *((_DWORD *)this + 750);
        goto LABEL_22;
      }
LABEL_24:
      uint64_t result = 0;
      break;
    default:
      if (a2 == 55)
      {
        unsigned int Frame_Size_Override_Flag = AV1_Syntax::Get_Frame_Size_Override_Flag(*((AV1_Syntax **)this + 1994));
        uint64_t result = 0;
LABEL_22:
        *a3 = Frame_Size_Override_Flag;
      }
      else if (a2 == 56)
      {
        uint64_t result = 0;
        if (a3)
        {
          if (*(void *)v6)
          {
            *(void *)a3 = *(void *)(*(void *)v6 + 2176);
            *((unsigned char *)a3 + 8) = *((unsigned char *)this + 42773);
            uint64_t result = 1;
          }
        }
      }
      break;
  }
  return result;
}

uint64_t CAVDAvxDecoder::VASetParams(CAVDAvxDecoder *this, int a2, unsigned int *a3)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 12:
      uint64_t result = 0;
      *((unsigned char *)this + 2832) = *(unsigned char *)a3;
      return result;
    case 13:
      uint64_t result = 0;
      *((_DWORD *)this + 714) = *a3;
      *((_DWORD *)this + 715) = a3[1];
      return result;
    case 16:
      uint64_t result = 0;
      *((void *)this + 357) = *(void *)(a3 + 1);
      *((_DWORD *)this + 716) = *a3;
      return result;
    case 17:
      uint64_t result = 0;
      *((unsigned char *)this + 2834) = 1;
      *((void *)this + 355) = a3;
      return result;
    case 18:
      uint64_t result = 0;
      *((_DWORD *)this + 712) = *a3;
      return result;
    case 19:
      if (*((unsigned char *)this + 2832)) {
        return 0;
      }
      uint64_t result = 0;
      *((unsigned char *)this + 2833) = *(unsigned char *)a3;
      return result;
    case 21:
      uint64_t result = 0;
      *((unsigned char *)this + 3004) = *(unsigned char *)a3;
      *((void *)this + 376) = *(void *)(a3 + 1);
      return result;
    case 22:
    case 28:
    case 58:
      return result;
    case 23:
      if (!a3) {
        return 0;
      }
      uint64_t result = 0;
      *((_DWORD *)this + 750) = *a3;
      return result;
    case 24:
      uint64_t result = 0;
      *((_DWORD *)this + 702) = *a3;
      return result;
    case 25:
      uint64_t result = 0;
      int v6 = *(unsigned __int8 *)a3;
      *((unsigned char *)this + 12) = v6;
      goto LABEL_16;
    case 26:
      uint64_t result = 0;
      int v6 = *a3;
LABEL_16:
      *((_DWORD *)this + 4) = v6;
      return result;
    case 27:
      if (a3[5] <= *(_DWORD *)(*((void *)this + 260) + 56))
      {
        uint64_t v7 = **((void **)this + 292);
        unsigned int v8 = *(void **)(v7 + 3688);
        IOSurfaceLock(*(IOSurfaceRef *)(v7 + 3680), 0, 0);
        memcpy(v8, *((const void **)a3 + 1), a3[5]);
        IOSurfaceUnlock(*(IOSurfaceRef *)(**((void **)this + 292) + 3680), 0, 0);
      }
      return 0;
    case 29:
      uint64_t result = 0;
      *((_DWORD *)this + 724) = *a3;
      *((void *)this + 360) = *((void *)a3 + 1);
      long long v9 = *(_OWORD *)(a3 + 18);
      long long v10 = *(_OWORD *)(a3 + 26);
      long long v11 = *(_OWORD *)(a3 + 14);
      *(_OWORD *)((char *)this + 2968) = *(_OWORD *)(a3 + 22);
      *(_OWORD *)((char *)this + 2984) = v10;
      *(_OWORD *)((char *)this + 2936) = v11;
      *(_OWORD *)((char *)this + 2952) = v9;
      long long v12 = *(_OWORD *)(a3 + 10);
      *(_OWORD *)((char *)this + 2904) = *(_OWORD *)(a3 + 6);
      *(_OWORD *)((char *)this + 2920) = v12;
      return result;
    case 31:
      uint64_t result = 0;
      *((unsigned char *)this + 10) = *(unsigned char *)a3;
      return result;
    case 34:
      *((_DWORD *)this + 701) = *a3;
      BOOL isADSDecryption = CAVDDecoder::isADSDecryption(this);
      uint64_t result = 0;
      *((_DWORD *)this + 590) = isADSDecryption;
      return result;
    case 35:
      uint64_t result = 0;
      long long v14 = *(_OWORD *)a3;
      long long v15 = *((_OWORD *)a3 + 1);
      long long v16 = *((_OWORD *)a3 + 2);
      *(void *)((char *)this + 2412) = *((void *)a3 + 6);
      *(_OWORD *)((char *)this + 2396) = v16;
      *(_OWORD *)((char *)this + 2380) = v15;
      *(_OWORD *)((char *)this + 2364) = v14;
      *((_DWORD *)this + 627) = 1;
      return result;
    case 36:
      uint64_t result = 0;
      long long v17 = *(_OWORD *)a3;
      long long v18 = *((_OWORD *)a3 + 1);
      long long v19 = *((_OWORD *)a3 + 2);
      *(void *)((char *)this + 2468) = *((void *)a3 + 6);
      *(_OWORD *)((char *)this + 2452) = v19;
      *(_OWORD *)((char *)this + 2436) = v18;
      *(_OWORD *)((char *)this + 2420) = v17;
      *((_DWORD *)this + 628) = 1;
      return result;
    case 37:
      uint64_t result = 0;
      long long v20 = *(_OWORD *)a3;
      *(_OWORD *)((char *)this + 2488) = *(_OWORD *)(a3 + 3);
      *(_OWORD *)((char *)this + 2476) = v20;
      *((_DWORD *)this + 629) = 1;
      *((void *)this + 315) = *((void *)this + 312);
      return result;
    case 38:
      uint64_t result = 0;
      *((_DWORD *)this + 629) = 1;
      return result;
    case 39:
      uint64_t result = 0;
      *((_DWORD *)this + 626) = *a3;
      return result;
    case 40:
      uint64_t result = 0;
      *((_DWORD *)this + 764) = *a3;
      return result;
    case 41:
      uint64_t result = 0;
      *((void *)this + 380) = a3;
      return result;
    case 42:
      uint64_t result = 0;
      *((void *)this + 381) = a3;
      return result;
    case 44:
      uint64_t result = 0;
      long long v21 = *(_OWORD *)a3;
      *((_OWORD *)this + 159) = *((_OWORD *)a3 + 1);
      *((_OWORD *)this + 158) = v21;
      long long v22 = *((_OWORD *)a3 + 2);
      long long v23 = *((_OWORD *)a3 + 3);
      long long v24 = *((_OWORD *)a3 + 4);
      *((_DWORD *)this + 652) = a3[20];
      *((_DWORD *)this + 658) = 1;
      *((_OWORD *)this + 162) = v24;
      *((_OWORD *)this + 161) = v23;
      *((_OWORD *)this + 160) = v22;
      return result;
    case 45:
      uint64_t result = 0;
      long long v25 = *(_OWORD *)a3;
      *((_DWORD *)this + 657) = a3[4];
      *(_OWORD *)((char *)this + 2612) = v25;
      *((_DWORD *)this + 659) = 1;
      return result;
    case 46:
      uint64_t result = 0;
      *((unsigned char *)this + 3060) = *(unsigned char *)a3;
      *((_DWORD *)this + 766) = a3[1];
      return result;
    case 48:
      uint64_t result = 0;
      *((_DWORD *)this + 663) = *a3;
      return result;
    case 49:
      uint64_t result = 0;
      *((_OWORD *)this + 166) = *(_OWORD *)a3;
      return result;
    case 50:
      uint64_t result = 0;
      *((unsigned char *)this + 2674) = *(unsigned char *)a3;
      return result;
    case 51:
      uint64_t result = 0;
      *((unsigned char *)this + 2675) = *(unsigned char *)a3;
      return result;
    case 52:
      uint64_t result = 0;
      *((void *)this + 335) = a3;
      return result;
    case 53:
      uint64_t result = 0;
      long long v26 = *(_OWORD *)a3;
      long long v27 = *((_OWORD *)a3 + 2);
      *(_OWORD *)((char *)this + 42584) = *((_OWORD *)a3 + 1);
      *(_OWORD *)((char *)this + 42600) = v27;
      *(_OWORD *)((char *)this + 42568) = v26;
      long long v28 = *((_OWORD *)a3 + 3);
      long long v29 = *((_OWORD *)a3 + 4);
      long long v30 = *((_OWORD *)a3 + 5);
      *((void *)this + 5333) = *((void *)a3 + 12);
      *(_OWORD *)((char *)this + 42632) = v29;
      *(_OWORD *)((char *)this + 42648) = v30;
      *(_OWORD *)((char *)this + 42616) = v28;
      return result;
    case 54:
      uint64_t result = 0;
      int v31 = *a3;
      if (*a3 > 0x1F) {
        int v31 = 0;
      }
      *((_DWORD *)this + 10689) = v31;
      return result;
    case 57:
      BOOL v32 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v32) {
        return result;
      }
      *(_WORD *)unsigned int v33 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: INFO: Av1 decoder does not support kVASetSliceHeaderThreshold, command has been ignored", v33, 2u);
      return 0;
    default:
      return 308;
  }
}

uint64_t CAVDAvxDecoder::VAGetError(CAVDAvxDecoder *this)
{
  return *((unsigned int *)this + 705);
}

BOOL CAVDAvxDecoder::decodeGetRenderTarget(uint64_t a1, unsigned int a2, void *a3, int a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2 > 0x80)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      long long v12 = "decodeGetRenderTarget";
      __int16 v13 = 1024;
      unsigned int v14 = a2;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s bad index %u", (uint8_t *)&v11, 0x12u);
    }
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v6 = a1 + 8 * a2;
    uint64_t v7 = (uint64_t *)(v6 + 24);
    unsigned int v8 = (uint64_t *)(v6 + 1056);
    if (a4 == 1) {
      unsigned int v8 = v7;
    }
    uint64_t v9 = *v8;
  }
  *a3 = v9;
  return v9 != 0;
}

uint64_t CAVDAvxDecoder::decodeGetRenderTargetRef()
{
  return 1;
}

uint64_t CAVDAvxDecoder::removeFrame(uint64_t a1, unsigned int *a2, unsigned int *__dst)
{
  unsigned int v3 = *a2;
  if (*a2 >= a2[1]) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = v3 % 0xD;
  uint64_t v6 = &a2[150 * (v3 % 0xD)];
  unsigned int v8 = v6[2];
  uint64_t v7 = v6 + 2;
  if (*__dst < v8) {
    return 0xFFFFFFFFLL;
  }
  memcpy(__dst, v7, 0x258uLL);
  uint64_t v11 = *(void *)&a2[150 * v5 + 18];
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 15960);
    if (v12)
    {
      if (!a2[1952])
      {
        AV1_RLM::Rel_Frame_Buffer(v12, *(int **)(v11 + 2008));
        uint64_t v12 = *(void *)(a1 + 15960);
      }
      AV1_RLM::Rel_Frame_Buffer(v12, (int *)v11);
    }
  }
  uint64_t result = 0;
  ++*a2;
  return result;
}

uint64_t CAVDAvxDecoder::getFrameParams(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 42680)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 40) = *(unsigned __int8 *)(*(void *)(a1 + 15944) + 79232);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 42672);
  return result;
}

__n128 CAVDAvxDecoder::populateSnapshotStruct(CAVDAvxDecoder *this, unsigned int a2, int a3)
{
  *((unsigned char *)this + 15940) = (*(_DWORD *)(*((void *)this + 5303) + 1868) & 0xFFFFFFFD) == 0;
  *((_DWORD *)this + 3984) = 0;
  uint64_t v3 = *((void *)this + 261);
  long long v4 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)((char *)this + 2104) = *(_OWORD *)v3;
  *(_OWORD *)((char *)this + 2120) = v4;
  long long v5 = *(_OWORD *)(v3 + 32);
  long long v6 = *(_OWORD *)(v3 + 48);
  long long v7 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)((char *)this + 2168) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)((char *)this + 2184) = v7;
  *(_OWORD *)((char *)this + 2136) = v5;
  *(_OWORD *)((char *)this + 2152) = v6;
  long long v8 = *(_OWORD *)(v3 + 96);
  long long v9 = *(_OWORD *)(v3 + 112);
  long long v10 = *(_OWORD *)(v3 + 144);
  *(_OWORD *)((char *)this + 2232) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)((char *)this + 2248) = v10;
  *(_OWORD *)((char *)this + 2200) = v8;
  *(_OWORD *)((char *)this + 2216) = v9;
  __n128 result = *(__n128 *)(v3 + 160);
  long long v12 = *(_OWORD *)(v3 + 176);
  long long v13 = *(_OWORD *)(v3 + 208);
  *(_OWORD *)((char *)this + 2296) = *(_OWORD *)(v3 + 192);
  *(_OWORD *)((char *)this + 2312) = v13;
  *(__n128 *)((char *)this + 2264) = result;
  *(_OWORD *)((char *)this + 2280) = v12;
  *((_DWORD *)this + 582) = a3;
  return result;
}

uint64_t CAVDAvxDecoder::getRefBufIndex(CAVDAvxDecoder *this, unsigned int a2)
{
  return *((unsigned int *)this + 4 * a2 + 3958);
}

uint64_t CAVDAvxDecoder::getRefPicsNum(CAVDAvxDecoder *this)
{
  if (*((unsigned char *)this + 15940)) {
    return 0;
  }
  else {
    return *((unsigned int *)this + 3984);
  }
}

uint64_t CAVDAvxDecoder::setRefDartVAddr(uint64_t this, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(this + 16 * a2 + 15824) + 16) = a3;
  return this;
}

uint64_t CAVDAvxDecoder::isAsyncDecode(CAVDAvxDecoder *this)
{
  return (*((unsigned __int8 *)this + 42720) >> 4) & 1;
}

BOOL CAVDAvxDecoder::isParallelDecode(CAVDAvxDecoder *this)
{
  return *(_DWORD *)(*((void *)this + 5303) + 1944) != 1;
}

uint64_t AV1_Syntax::get_ref_frame_map_idx(AV1_Syntax *this, unsigned __int8 a2)
{
  unsigned int v2 = a2 - 1;
  if (v2 > 7) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(*((void *)this + 12) + 4 * v2 + 1692);
  }
}

uint64_t AV1_Syntax::get_ref_scale_factors(AV1_Syntax *this, unsigned __int8 a2)
{
  unsigned int v2 = a2 - 1;
  if (v2 > 7) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 12);
  uint64_t v4 = *(unsigned int *)(v3 + 4 * v2 + 1692);
  if (v4 > 7) {
    return 0;
  }
  else {
    return v3 + 16 * v4 + 1720;
  }
}

uint64_t AV1_Syntax::get_primary_ref_frame_buf(AV1_Syntax *this)
{
  uint64_t v1 = *((void *)this + 12);
  int v2 = *(_DWORD *)(v1 + 152);
  if (v2 == 7 || (*(_DWORD *)(v1 + 152) & 0xF8) != 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(v1 + 4 * v2 + 1692);
  if (v4 == -1) {
    return 0;
  }
  else {
    return *(void *)(v1 + 8 * v4 + 1848);
  }
}

uint64_t AV1_Syntax::get_ref_frame_buf(AV1_Syntax *this, unsigned __int8 a2)
{
  unsigned int v2 = a2 - 1;
  if (v2 > 7) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 12);
  uint64_t v4 = *(int *)(v3 + 4 * v2 + 1692);
  if (v4 == -1) {
    return 0;
  }
  else {
    return *(void *)(v3 + 8 * v4 + 1848);
  }
}

void AV1_Syntax::decrease_ref_count(uint64_t a1, _DWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2)
  {
    int v2 = (*a2)--;
    if (v2 <= 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315394;
      uint64_t v4 = "decrease_ref_count";
      __int16 v5 = 1024;
      int v6 = 1437;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v3, 0x12u);
    }
  }
}

void AV1_Syntax::assign_frame_buffer(uint64_t a1, int **a2, int *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  __int16 v5 = *a2;
  if (*a2)
  {
    int v6 = *v5;
    if (*v5 > 0
      || os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)
      && (int v7 = 136315394,
          long long v8 = "assign_frame_buffer",
          __int16 v9 = 1024,
          int v10 = 1446,
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v7, 0x12u), int v6 = *v5, *v5 >= 1))
    {
      *__int16 v5 = v6 - 1;
    }
  }
  *a2 = a3;
  ++*a3;
}

uint64_t AV1_Syntax::setup_frame_buf_refs(uint64_t this)
{
  uint64_t v1 = 0;
  uint64_t v2 = *(void *)(this + 96);
  uint64_t v3 = *(void *)(v2 + 120);
  int v4 = *(_DWORD *)(v2 + 76);
  LODWORD(v2) = *(_DWORD *)(v2 + 80);
  *(_DWORD *)(v3 + 4) = v4;
  *(_DWORD *)(v3 + 36) = v2;
  do
  {
    uint64_t v5 = *(void *)(this + 96);
    uint64_t v6 = *(int *)(v5 + 4 * v1 + 1692);
    if (v6 == -1)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6 + 1848);
      if (v7)
      {
        uint64_t v8 = *(void *)(v5 + 120) + 4 * v1;
        *(_DWORD *)(v8 + 8) = *(_DWORD *)(v7 + 4);
        *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 36);
      }
    }
    *(void *)(*(void *)(v5 + 120) + 8 * v1++ + 72) = v7;
  }
  while (v1 != 7);
  return this;
}

void AV1_Syntax::show_existing_frame_reset(AV1_Syntax *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 12);
  if (!*(_DWORD *)v1 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = "show_existing_frame_reset";
    __int16 v7 = 1024;
    int v8 = 1482;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v5, 0x12u);
    uint64_t v1 = *((void *)this + 12);
  }
  uint64_t v3 = 0;
  *(_DWORD *)(v1 + 104) = 255;
  *(void *)(v1 + 1692) = -1;
  *(void *)(v1 + 1700) = -1;
  *(void *)(v1 + 1708) = -1;
  *(_DWORD *)(v1 + 68) = 0;
  *(_DWORD *)(v1 + 1716) = -1;
  *(_DWORD *)(v1 + 172) = *(_DWORD *)(v1 + 4 * *(unsigned __int8 *)(v1 + 1672) + 4);
  do
  {
    if ((v3 & 0xFFFFFFF8) == 0)
    {
      uint64_t v4 = v1 + 4 * v3;
      *(_DWORD *)(v4 + 4) = *(_DWORD *)(v1 + 172);
      *(_DWORD *)(v4 + 36) = 1;
    }
    ++v3;
  }
  while (v3 != 8);
}

void AV1_Syntax::setup_scale_factors_for_frame(uint64_t a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = -1;
  if (a3 > 2 * a5 || 2 * a6 < a4 || 16 * a3 < a5)
  {
    int v7 = -1;
  }
  else
  {
    int v7 = -1;
    if (16 * a4 >= a6)
    {
      if (a5 >= 0) {
        int v8 = a5;
      }
      else {
        int v8 = a5 + 1;
      }
      int v6 = ((v8 >> 1) + (a3 << 14)) / a5;
      if (a6 >= 0) {
        int v9 = a6;
      }
      else {
        int v9 = a6 + 1;
      }
      int v7 = ((v9 >> 1) + (a4 << 14)) / a6;
      a2[2] = (v6 + 8) >> 4;
      a2[3] = (v7 + 8) >> 4;
    }
  }
  *a2 = v6;
  a2[1] = v7;
}

BOOL AV1_Syntax::frame_might_allow_ref_frame_mvs(AV1_Syntax *this)
{
  uint64_t v1 = *((void *)this + 12);
  if (!*(unsigned char *)(v1 + 140) && (uint64_t v3 = *((void *)this + 11), *(_DWORD *)(v3 + 52)) && *(_DWORD *)(v3 + 40)) {
    return (*(_DWORD *)(v1 + 68) & 0xFFFFFFFD) != 0;
  }
  else {
    return 0;
  }
}

uint64_t AV1_Syntax::setup_frame_sign_bias(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 96);
  for (uint64_t i = 1692; i != 1720; i += 4)
  {
    uint64_t v4 = *(int *)(v2 + i);
    if (v4 == -1
      || ((uint64_t v5 = *(void *)(v2 + 8 * v4 + 1848),
           uint64_t v6 = *(void *)(v1 + 88),
           int v8 = *(_DWORD *)(v6 + 40),
           int v7 = (_DWORD *)(v6 + 40),
           v8)
        ? (BOOL v9 = v5 == 0)
        : (BOOL v9 = 1),
          v9))
    {
      BOOL v10 = 0;
    }
    else
    {
      this = AV1_Syntax::get_relative_dist(v1, v7, *(_DWORD *)(v5 + 4), *(_DWORD *)(v2 + 76));
      BOOL v10 = (int)this > 0;
      uint64_t v2 = *(void *)(v1 + 96);
    }
    *(_DWORD *)(v2 + i - 1376) = v10;
  }
  return this;
}

uint64_t AV1_Syntax::get_relative_dist(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!*a2) {
    return 0;
  }
  int v6 = a2[1];
  if (v6 < 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315394;
    BOOL v10 = "get_relative_dist";
    __int16 v11 = 1024;
    int v12 = 3364;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v9, 0x12u);
  }
  int v7 = 1 << (v6 + 1);
  if ((a3 < 0 || v7 <= a3) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315394;
    BOOL v10 = "get_relative_dist";
    __int16 v11 = 1024;
    int v12 = 3365;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v9, 0x12u);
  }
  if ((a4 < 0 || v7 <= a4) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315394;
    BOOL v10 = "get_relative_dist";
    __int16 v11 = 1024;
    int v12 = 3366;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v9, 0x12u);
  }
  return (((1 << v6) - 1) & (a3 - a4)) - ((1 << v6) & (a3 - a4));
}

uint64_t AV1_Syntax::uncompressed_header(AV1_Syntax *this)
{
  uint64_t v156 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = *((unsigned int *)this + 2);
  int v3 = *((_DWORD *)this + 11);
  uint64_t v4 = *((void *)this + 12);
  *(void *)((char *)this + 15516) = 0;
  if (!*((_DWORD *)this + 3873))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v151 = "uncompressed_header";
      __int16 v152 = 1024;
      int v153 = 1588;
      __int16 v11 = &_os_log_internal;
      int v12 = "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n";
      goto LABEL_13;
    }
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(*((void *)this + 11) + 58))
  {
    *(_DWORD *)uint64_t v4 = 0;
    *(_DWORD *)(v4 + 132) = 1;
    *(_DWORD *)(v4 + 68) = 0;
    *(unsigned char *)(v4 + 2948) = 1;
    if (*((_DWORD *)this + 3874)) {
      *((void *)this + 1937) = 0x100000000;
    }
    *(unsigned char *)(v4 + 140) = 1;
    uint64_t v6 = v4;
    goto LABEL_6;
  }
  int bits = AV1_Syntax::get_bits(this, "show_existing_frame", 1u);
  **((_DWORD **)this + 12) = bits;
  *((_DWORD *)this + 3876) = 0;
  if (!bits)
  {
    unsigned int v34 = AV1_Syntax::get_bits(this, "frame_type", 2u);
    unsigned int v33 = v34;
    *(_DWORD *)(v4 + 68) = v34;
    if (v34 >= 4)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_192;
    }
    BOOL v40 = v34 == 2 || v34 == 0;
    *(unsigned char *)(*((void *)this + 12) + 2948) = v40;
    if (*((_DWORD *)this + 3874))
    {
      if (v34) {
        return 0xFFFFFFFFLL;
      }
      *((void *)this + 1937) = 0x100000000;
    }
    int v41 = AV1_Syntax::get_bits(this, "show_frame", 1u);
    int v42 = v41;
    uint64_t v6 = *((void *)this + 12);
    *(_DWORD *)(v6 + 132) = v41;
    if (v41)
    {
      int v43 = *(_DWORD *)(v6 + 68);
    }
    else
    {
      *((_DWORD *)this + 3877) = 1;
      int v43 = *(_DWORD *)(v6 + 68);
      if (!v43)
      {
        *((_DWORD *)this + 3878) = 1;
        goto LABEL_217;
      }
    }
    if (v43 == 3)
    {
      *((_DWORD *)this + 3879) = 1;
      *((_DWORD *)this + 3880) = v41 == 0;
    }
LABEL_217:
    uint64_t v98 = *((void *)this + 11);
    int v99 = *(_DWORD *)(v4 + 68);
    if (*(unsigned char *)(v98 + 57))
    {
      uint64_t result = 0xFFFFFFFFLL;
      if (!v42 || v99) {
        return result;
      }
      *(_DWORD *)(v6 + 136) = 0;
    }
    else
    {
      *(_DWORD *)(v6 + 136) = v99 != 0;
      if (!v41)
      {
        int v100 = AV1_Syntax::get_bits(this, "showable_frame", 1u);
        uint64_t v6 = *((void *)this + 12);
        *(_DWORD *)(v6 + 136) = v100;
LABEL_226:
        *(_DWORD *)(*(void *)(v6 + 120) + 1084) = *(_DWORD *)(v6 + 136);
        int v101 = *(_DWORD *)(v6 + 68);
        if (v101 == 3 || !v101 && *(_DWORD *)(v6 + 132))
        {
          BOOL v102 = 1;
        }
        else
        {
          BOOL v102 = AV1_Syntax::get_bits(this, "error_resilient_mode", 1u) != 0;
          uint64_t v6 = *((void *)this + 12);
        }
        *(unsigned char *)(v6 + 140) = v102;
LABEL_6:
        if (!*(_DWORD *)(v4 + 68) && *(_DWORD *)(v6 + 132))
        {
          *(_OWORD *)(v6 + 52) = 0u;
          *(_OWORD *)(v6 + 36) = 0u;
        }
        BOOL v7 = AV1_Syntax::get_bits(this, "disable_cdf_update", 1u) != 0;
        uint64_t v8 = *((void *)this + 12);
        *(unsigned char *)(v8 + 141) = v7;
        int v9 = *(unsigned __int8 *)(*((void *)this + 11) + 56);
        if (v9 == 2)
        {
          BOOL v10 = AV1_Syntax::get_bits(this, "allow_screen_content_tools", 1u) != 0;
          uint64_t v8 = *((void *)this + 12);
        }
        else
        {
          BOOL v10 = v9 != 0;
        }
        *(unsigned char *)(v8 + 142) = v10;
        if (v10)
        {
          int v16 = *(unsigned __int8 *)(*((void *)this + 11) + 59);
          if (v16 == 2)
          {
            BOOL v17 = AV1_Syntax::get_bits(this, "force_integer_mv", 1u) != 0;
            uint64_t v8 = *((void *)this + 12);
          }
          else
          {
            BOOL v17 = v16 != 0;
          }
          *(unsigned char *)(v8 + 148) = v17;
        }
        else
        {
          *(unsigned char *)(v8 + 148) = 0;
        }
        *(unsigned char *)(v8 + 1680) = 0;
        *(unsigned char *)(v8 + 156) = 0;
        *(_DWORD *)(v8 + 152) = 7;
        uint64_t v18 = *((void *)this + 11);
        if (*(unsigned char *)(v18 + 58))
        {
LABEL_29:
          if (*(unsigned char *)(v18 + 268))
          {
            int v19 = AV1_Syntax::get_bits(this, "buffer_removal_time_present_flag", 1u);
            uint64_t v8 = *((void *)this + 12);
            *(unsigned char *)(v8 + 176) = v19 != 0;
            if (v19)
            {
              uint64_t v20 = *((void *)this + 11);
              if ((*(_DWORD *)(v20 + 116) & 0x80000000) == 0)
              {
                uint64_t v21 = 0;
                uint64_t v22 = 448;
                uint64_t v23 = v8;
                while (1)
                {
                  uint64_t v24 = v8;
                  if (!*(unsigned char *)(v20 + v22)) {
                    break;
                  }
                  unsigned int v25 = *(_DWORD *)(v20 + 4 * v21 + 120);
                  if ((v25 >> *(_DWORD *)(v23 + 348)))
                  {
                    if (v25) {
                      BOOL v26 = ((1 << (*(_DWORD *)(v23 + 352) + 8)) & v25) == 0;
                    }
                    else {
                      BOOL v26 = 0;
                    }
                    uint64_t v24 = v23;
                    if (v26) {
                      break;
                    }
                  }
                  else
                  {
                    uint64_t v24 = v23;
                    if (v25) {
                      break;
                    }
                  }
                  unsigned int v27 = AV1_Syntax::get_bits(this, "buffer_removal_time", *(unsigned __int8 *)(v20 + 277));
                  uint64_t v8 = *((void *)this + 12);
                  *(_DWORD *)(v8 + 4 * v21 + 180) = v27;
                  uint64_t v20 = *((void *)this + 11);
                  if ((unint64_t)v27 >> *(unsigned char *)(v20 + 277))
                  {
                    int v46 = v27;
                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_349;
                    }
                    return 0xFFFFFFFFLL;
                  }
                  uint64_t v24 = v8;
LABEL_43:
                  v22 += 40;
                  uint64_t v23 = v24;
                  BOOL v55 = v21++ < *(int *)(v20 + 116);
                  if (!v55) {
                    goto LABEL_44;
                  }
                }
                *(_DWORD *)(v24 + 4 * v21 + 180) = 0;
                goto LABEL_43;
              }
            }
          }
LABEL_44:
          int v28 = *(_DWORD *)(v4 + 68);
          if (v28 == 2)
          {
            unsigned int v32 = AV1_Syntax::get_bits(this, "refresh_frame_flags", 8u);
            unsigned int v33 = v32;
            *(_DWORD *)(v4 + 104) = v32;
            if (v32 >= 0x100)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              goto LABEL_192;
            }
            if (v32 == 255) {
              return 0xFFFFFFFFLL;
            }
          }
          else if (v28)
          {
            if (*(_DWORD *)(v8 + 68) == 3)
            {
              *(_DWORD *)(v4 + 104) = 255;
            }
            else
            {
              unsigned int v38 = AV1_Syntax::get_bits(this, "refresh_frame_flags", 8u);
              *(_DWORD *)(v4 + 104) = v38;
              if (v38 >= 0x100)
              {
                unsigned int v33 = v38;
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  return 0xFFFFFFFFLL;
                }
                goto LABEL_192;
              }
            }
          }
          else
          {
            if (*(_DWORD *)(v8 + 132))
            {
              *(_DWORD *)(v4 + 104) = 255;
            }
            else
            {
              unsigned int v49 = AV1_Syntax::get_bits(this, "refresh_frame_flags", 8u);
              *(_DWORD *)(v4 + 104) = v49;
              if (v49 > 0xFF)
              {
                unsigned int v33 = v49;
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  return 0xFFFFFFFFLL;
                }
                goto LABEL_192;
              }
              uint64_t v8 = *((void *)this + 12);
            }
            *(_DWORD *)(v8 + 1716) = -1;
            *(void *)(v8 + 1700) = -1;
            *(void *)(v8 + 1708) = -1;
            *(void *)(v8 + 1692) = -1;
            if ((~*((_DWORD *)this + 3881) & 0x80002) == 0
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              uint64_t v151 = "uncompressed_header";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: reset all ref_frame_idx to AV1_INVALID_IDX for key frame\n", buf, 0xCu);
            }
          }
          uint64_t v65 = *((void *)this + 12);
          if ((!*(unsigned char *)(v65 + 2948) || *(_DWORD *)(v4 + 104) != 255)
            && *(unsigned char *)(v65 + 140)
            && *(_DWORD *)(*((void *)this + 11) + 40))
          {
            uint64_t v66 = 1912;
            while (1)
            {
              unsigned int v67 = AV1_Syntax::get_bits(this, "ref_order_hint", *(_DWORD *)(*((void *)this + 11) + 44) + 1);
              uint64_t v65 = *((void *)this + 12);
              *(_DWORD *)(v65 + v66) = v67;
              if (v67 >= 0x100) {
                break;
              }
              v66 += 4;
              if (v66 == 1944) {
                goto LABEL_142;
              }
            }
            unsigned int v33 = v67;
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
LABEL_192:
            *(_DWORD *)buf = 136315394;
            uint64_t v151 = "uncompressed_header";
            __int16 v152 = 1024;
            int v153 = v33;
            __int16 v11 = &_os_log_internal;
            int v12 = "AppleAVD: %s: value %d out of range!\n";
            goto LABEL_13;
          }
LABEL_142:
          int v68 = *(_DWORD *)(v4 + 68);
          if (!v68)
          {
            AV1_Syntax::frame_size(this);
            if (v72 == -1)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                uint64_t v151 = "uncompressed_header";
                __int16 v152 = 1024;
                int v153 = 1938;
                __int16 v11 = &_os_log_internal;
                int v12 = "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n";
                goto LABEL_13;
              }
              return 0xFFFFFFFFLL;
            }
            uint64_t v73 = *((void *)this + 12);
            if (*(unsigned char *)(v73 + 142) && *(_DWORD *)(v73 + 364) == *(_DWORD *)(v73 + 376))
            {
              BOOL v74 = AV1_Syntax::get_bits(this, "allow_intrabc", 1u) != 0;
              uint64_t v73 = *((void *)this + 12);
              *(unsigned char *)(v73 + 156) = v74;
            }
            *(unsigned char *)(v73 + 157) = 0;
            *(void *)(v73 + 112) = 0;
            goto LABEL_262;
          }
          *(unsigned char *)(v65 + 157) = 0;
          uint64_t v69 = *((void *)this + 11);
          if (v68 == 2)
          {
            *(unsigned char *)(*(void *)(v65 + 120) + 1088) = *(unsigned char *)(v69 + 113);
            AV1_Syntax::frame_size(this);
            if (v70 == -1)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                uint64_t v151 = "uncompressed_header";
                __int16 v152 = 1024;
                int v153 = 1958;
                __int16 v11 = &_os_log_internal;
                int v12 = "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n";
                goto LABEL_13;
              }
              return 0xFFFFFFFFLL;
            }
            uint64_t v71 = *((void *)this + 12);
            if (*(unsigned char *)(v71 + 142) && *(_DWORD *)(v71 + 364) == *(_DWORD *)(v71 + 376))
            {
              uint64_t v70 = AV1_Syntax::get_bits(this, "allow_intrabc", 1u);
              uint64_t v71 = *((void *)this + 12);
              *(unsigned char *)(v71 + 156) = v70 != 0;
            }
LABEL_241:
            int v105 = *(_DWORD *)(v71 + 152);
            BOOL v106 = v105 != 7 && (*(_DWORD *)(v71 + 152) & 0xF8) == 0;
            if (!v106 || (uint64_t v107 = *(int *)(v71 + 4 * v105 + 1692), v107 == -1)) {
              uint64_t v108 = 0;
            }
            else {
              uint64_t v108 = *(void *)(v71 + 8 * v107 + 1848);
            }
            *(void *)(v71 + 112) = v108;
            if (*(_DWORD *)(v4 + 68) != 2)
            {
              if (!*(unsigned char *)(v71 + 140)
                && (uint64_t v126 = *((void *)this + 11), *(_DWORD *)(v126 + 52))
                && *(_DWORD *)(v126 + 40)
                && (*(_DWORD *)(v71 + 68) & 0xFFFFFFFD) != 0)
              {
                uint64_t v70 = AV1_Syntax::get_bits(this, "use_ref_frame_mvs", 1u);
                *(unsigned char *)(*((void *)this + 12) + 157) = v70 != 0;
              }
              else
              {
                *(unsigned char *)(v71 + 157) = 0;
              }
              uint64_t v109 = 423;
              do
              {
                if ((v109 + 90) - 1 <= 7)
                {
                  uint64_t v110 = *((void *)this + 12);
                  uint64_t v111 = *(int *)(v110 + 4 * v109);
                  if (v111 != -1)
                  {
                    uint64_t v112 = *(void *)(v110 + 8 * v111 + 1848);
                    if (v112)
                    {
                      int v113 = v111 >= 8
                           ? 0
                           : (int *)(v110 + 16 * *(unsigned int *)(v110 + 4 * v109) + 1720);
                      AV1_Syntax::setup_scale_factors_for_frame(v70, v113, *(_DWORD *)(v112 + 1760), *(_DWORD *)(v112 + 1768), *(_DWORD *)(v110 + 376), *(_DWORD *)(v110 + 380));
                      if (*v113 == -1 || v113[1] == -1) {
                        return 0xFFFFFFFFLL;
                      }
                    }
                  }
                }
              }
              while (++v109 != 430);
            }
LABEL_262:
            AV1_Syntax::setup_frame_buf_refs((uint64_t)this);
            AV1_Syntax::setup_frame_sign_bias((uint64_t)this);
            uint64_t v114 = 0;
            uint64_t v115 = *((void *)this + 12);
            uint64_t v116 = *(void *)(v115 + 120);
            *(_DWORD *)(v116 + 1944) = *(_DWORD *)(v4 + 68);
            unsigned int v117 = *(_DWORD *)(v115 + 104);
            do
            {
              if ((v117 >> v114))
              {
                uint64_t v118 = v115 + 4 * v114;
                *(_DWORD *)(v118 + 4) = *(_DWORD *)(v115 + 172);
                *(_DWORD *)(v118 + 36) = 1;
              }
              ++v114;
            }
            while (v114 != 8);
            uint64_t v119 = *((void *)this + 11);
            if (*(unsigned char *)(v119 + 58) || *(unsigned char *)(v115 + 141))
            {
              *(_DWORD *)(v115 + 144) = 0;
            }
            else
            {
              BOOL v125 = AV1_Syntax::get_bits(this, "refresh_frame_context", 1u) == 0;
              uint64_t v115 = *((void *)this + 12);
              *(_DWORD *)(v115 + 144) = v125;
              uint64_t v119 = *((void *)this + 11);
              uint64_t v116 = *(void *)(v115 + 120);
            }
            *(_DWORD *)(v116 + 1896) = *(_DWORD *)(v119 + 76);
            *(void *)(v116 + 1900) = *(void *)(v119 + 84);
            *(_DWORD *)(v116 + 1908) = *(_DWORD *)(v119 + 92);
            *(unsigned char *)(v116 + 1912) = *(unsigned char *)(v119 + 81);
            *(_DWORD *)(v116 + 1916) = *(_DWORD *)(v119 + 108);
            *(unsigned char *)(v116 + 1920) = *(_DWORD *)(v119 + 96);
            *(_DWORD *)(v116 + 1924) = *(_DWORD *)(v115 + 356);
            *(_DWORD *)(v116 + 1928) = *(_DWORD *)(v115 + 360);
            if (*(unsigned char *)(v115 + 156))
            {
              *(void *)(v115 + 396) = 0;
              *(_DWORD *)(v115 + 1392) = 0;
              *(_DWORD *)(v115 + 1456) = 0;
              *(void *)(v115 + 1384) = 0x100000000;
              *(_DWORD *)(v115 + 1520) = 0;
              *(_DWORD *)(v115 + 1584) = 0;
              *(void *)(v115 + 1648) = 0;
              *(_DWORD *)(v115 + 1656) = 0;
            }
            if (AV1_Syntax::tile_info(this)) {
              return 0xFFFFFFFFLL;
            }
            int v120 = (_DWORD *)*((void *)this + 12);
            if (v120[191] != 1 && 64 << (v120[94] != v120[91]) > 4 * v120[195]) {
              return 0xFFFFFFFFLL;
            }
            AV1_Syntax::quantization_params(this);
            *(_DWORD *)(v4 + 688) = *(_DWORD *)(*((void *)this + 11) + 76);
            if (*(_DWORD *)(*((void *)this + 12) + 152) == 7) {
              AV1_Syntax::setup_past_independence(this);
            }
            AV1_Syntax::segmentation_params(this);
            uint64_t v121 = *((void *)this + 12);
            *(_OWORD *)(v121 + 1360) = xmmword_223AD0C20;
            *(_DWORD *)(v121 + 1376) = 0;
            if (*(int *)(v121 + 444) < 1) {
              goto LABEL_297;
            }
            int v122 = AV1_Syntax::get_bits(this, "delta_q_present", 1u);
            uint64_t v121 = *((void *)this + 12);
            *(_DWORD *)(v121 + 1360) = v122;
            if (!v122) {
              goto LABEL_297;
            }
            *(_DWORD *)(v4 + 756) = *(_DWORD *)(v121 + 444);
            int v123 = AV1_Syntax::get_bits(this, "delta_q_res", 2u);
            int v46 = 1 << v123;
            uint64_t v121 = *((void *)this + 12);
            *(_DWORD *)(v121 + 1364) = 1 << v123;
            if (v123 == 31 || v46 >= 9)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_349;
              }
              return 0xFFFFFFFFLL;
            }
            if (*(unsigned char *)(v121 + 156))
            {
              int v124 = *(_DWORD *)(v121 + 1368);
            }
            else
            {
              int v124 = AV1_Syntax::get_bits(this, "delta_lf_present", 1u);
              uint64_t v121 = *((void *)this + 12);
              *(_DWORD *)(v121 + 1368) = v124;
            }
            if (!v124)
            {
LABEL_297:
              uint64_t v129 = 0;
              *(_DWORD *)(v4 + 760) = *(unsigned __int8 *)(v121 + 148);
              int v130 = *(unsigned __int8 *)(v121 + 484);
              unsigned int v131 = (BOOL *)(v4 + 724);
              uint64_t v132 = v121 + 558;
              do
              {
                int v133 = *(_DWORD *)(v121 + 444);
                if (v130 && *(unsigned char *)(v132 + v129 - 65))
                {
                  int v134 = v133 + *(__int16 *)(v132 + 2 * v129);
                  if (v134 >= 255) {
                    int v134 = 255;
                  }
                  int v133 = v134 & ~(v134 >> 31);
                }
                BOOL v135 = !v133
                    && !*(_DWORD *)(v121 + 448)
                    && !*(_DWORD *)(v121 + 452)
                    && !*(_DWORD *)(v121 + 460)
                    && !*(_DWORD *)(v121 + 456)
                    && *(_DWORD *)(v121 + 464) == 0;
                *unsigned int v131 = v135;
                *(v131 - 8) = v133;
                v129 += 8;
                ++v131;
              }
              while (v129 != 64);
              if (v130)
              {
                uint64_t v136 = 0;
                while (*(_DWORD *)(v121 + 724 + v136))
                {
                  v136 += 4;
                  if (v136 == 32)
                  {
                    *(unsigned char *)(v121 + 162) = 1;
                    goto LABEL_318;
                  }
                }
                *(unsigned char *)(v121 + 162) = 0;
              }
              else
              {
                int v137 = *(_DWORD *)(v121 + 724);
                *(unsigned char *)(v121 + 162) = v137 != 0;
                if (v137)
                {
LABEL_318:
                  int v138 = *(_DWORD *)(v121 + 364);
                  int v139 = *(_DWORD *)(v121 + 376);
                  *(void *)(v121 + 396) = 0;
                  *(_DWORD *)(v121 + 1384) = 0;
                  *(_DWORD *)(v121 + 1392) = 0;
                  *(_DWORD *)(v121 + 1456) = 0;
                  *(_DWORD *)(v121 + 1520) = 0;
                  *(_DWORD *)(v121 + 1584) = 0;
                  *(unsigned char *)(v121 + 163) = v138 == v139;
                  if (v138 == v139) {
                    goto LABEL_324;
                  }
                  uint64_t v140 = *((void *)this + 11);
LABEL_323:
                  if (*(unsigned char *)(v140 + 68))
                  {
LABEL_325:
                    AV1_Syntax::loop_filter_params(this);
                    uint64_t v141 = *((void *)this + 12);
                    if (!*(unsigned char *)(v141 + 162) && *(unsigned char *)(*((void *)this + 11) + 67))
                    {
                      AV1_Syntax::cdef_params(this);
                      uint64_t v141 = *((void *)this + 12);
                    }
                    if (!*(unsigned char *)(v141 + 163) && *(unsigned char *)(*((void *)this + 11) + 68)) {
                      AV1_Syntax::lr_params(this);
                    }
                    AV1_Syntax::read_tx_mode(this);
                    AV1_Syntax::frame_reference_mode(this);
                    AV1_Syntax::skip_mode_params((uint64_t)this);
                    uint64_t v142 = *((void *)this + 12);
                    if (*(_DWORD *)(v142 + 88))
                    {
                      int v143 = AV1_Syntax::get_bits(this, "skip_mode_present", 1u);
                      uint64_t v142 = *((void *)this + 12);
                    }
                    else
                    {
                      int v143 = 0;
                    }
                    *(_DWORD *)(v142 + 92) = v143;
                    if (*(unsigned char *)(v142 + 2948) || *(unsigned char *)(v142 + 140) || !*(unsigned char *)(*((void *)this + 11) + 65)) {
                      *(unsigned char *)(v142 + 160) = 0;
                    }
                    else {
                      *(unsigned char *)(*((void *)this + 12) + 160) = AV1_Syntax::get_bits(this, "allow_warped_motion", 1u) != 0;
                    }
                    BOOL v144 = AV1_Syntax::get_bits(this, "reduced_tx_set", 1u) != 0;
                    uint64_t v145 = *((void *)this + 12);
                    *(unsigned char *)(v145 + 161) = v144;
                    if ((*(_DWORD *)(v145 + 68) | 2) != 2)
                    {
                      AV1_Syntax::global_motion_params(this);
                      uint64_t v145 = *((void *)this + 12);
                    }
                    int v146 = *(unsigned __int8 *)(*((void *)this + 11) + 113);
                    *(unsigned char *)(*(void *)(v145 + 120) + 1088) = v146;
                    if (v146 && (*(_DWORD *)(v145 + 132) || *(_DWORD *)(v145 + 136)))
                    {
                      uint64_t result = AV1_Syntax::film_grain_params(this);
                      if (result == -1) {
                        return result;
                      }
                    }
                    else
                    {
                      bzero((void *)(v145 + 2296), 0x28CuLL);
                    }
                    uint64_t v147 = *((void *)this + 12);
                    *(_DWORD *)(v147 + 2944) = *(_DWORD *)(*((void *)this + 11) + 76);
                    memcpy((void *)(*(void *)(v147 + 120) + 1092), (const void *)(v147 + 2296), 0x28CuLL);
                    AV1_Syntax::setup_motion_field_info((uint64_t)this);
                    return (*((_DWORD *)this + 4)
                          - *((_DWORD *)this + 2)
                          + ((v3 + 8 * (v2 - v1) - *((_DWORD *)this + 11) + 7) >> 3)) & 0x1FFFFFFF;
                  }
LABEL_324:
                  *(void *)(v121 + 1648) = 0;
                  *(_DWORD *)(v121 + 1656) = 0;
                  goto LABEL_325;
                }
              }
              *(unsigned char *)(v121 + 163) = 0;
              uint64_t v140 = *((void *)this + 11);
              if (!*(unsigned char *)(v140 + 67))
              {
                *(_DWORD *)(v121 + 1384) = 0;
                *(_DWORD *)(v121 + 1392) = 0;
                *(_DWORD *)(v121 + 1456) = 0;
                *(_DWORD *)(v121 + 1520) = 0;
                *(_DWORD *)(v121 + 1584) = 0;
              }
              goto LABEL_323;
            }
            int v127 = AV1_Syntax::get_bits(this, "delta_lf_res", 2u);
            int v46 = 1 << v127;
            *(_DWORD *)(*((void *)this + 12) + 1372) = 1 << v127;
            if (v127 != 31 && v46 < 9)
            {
              int v128 = AV1_Syntax::get_bits(this, "delta_lf_multi", 1u);
              uint64_t v121 = *((void *)this + 12);
              *(_DWORD *)(v121 + 1376) = v128;
              goto LABEL_297;
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
LABEL_349:
            *(_DWORD *)buf = 136315394;
            uint64_t v151 = "uncompressed_header";
            __int16 v152 = 1024;
            int v153 = v46;
            __int16 v11 = &_os_log_internal;
            int v12 = "AppleAVD: %s: value %d out of range!\n";
            goto LABEL_13;
          }
          if (!*(_DWORD *)(v69 + 40))
          {
            int v148 = v3;
            uint64_t v75 = 1;
            goto LABEL_170;
          }
          uint64_t v75 = 1;
          if (!AV1_Syntax::get_bits(this, "frame_refs_short_signaling", 1u))
          {
            int v148 = v3;
            goto LABEL_170;
          }
          unsigned int v76 = AV1_Syntax::get_bits(this, "last_frame_idx", 3u);
          unsigned int v33 = v76;
          uint64_t v77 = *((void *)this + 12);
          *(_DWORD *)(v77 + 1684) = v76;
          if (v76 >= 8)
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            goto LABEL_192;
          }
          uint64_t v94 = *(void *)(v77 + 8 * v76 + 1848);
          unsigned int v95 = AV1_Syntax::get_bits(this, "gold_frame_idx", 3u);
          unsigned int v33 = v95;
          uint64_t v96 = *((void *)this + 12);
          *(_DWORD *)(v96 + 1688) = v95;
          if (v95 >= 8)
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            goto LABEL_192;
          }
          if (v94)
          {
            if (*(void *)(v96 + 8 * v95 + 1848))
            {
              int v148 = v3;
              AV1_Syntax::set_frame_refs(this);
              uint64_t v75 = 0;
LABEL_170:
              uint64_t v78 = 0;
              long long v79 = &_os_log_internal;
              uint64_t v149 = v4;
              do
              {
                if (v75)
                {
                  unsigned int v80 = AV1_Syntax::get_bits(this, "ref_frame_idx", 3u);
                  signed int v81 = v80;
                  if (v80 >= 8)
                  {
                    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                      return 0xFFFFFFFFLL;
                    }
                    *(_DWORD *)buf = 136315394;
                    uint64_t v151 = "uncompressed_header";
                    __int16 v152 = 1024;
                    int v153 = v81;
                    __int16 v11 = &_os_log_internal;
                    int v12 = "AppleAVD: %s: value %d out of range!\n";
                    goto LABEL_13;
                  }
                  uint64_t v82 = *((void *)this + 12);
                  *(_DWORD *)(v82 + 4 * v78 + 1692) = v80;
                  if ((~*((_DWORD *)this + 3881) & 0x80002) == 0 && os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136315650;
                    uint64_t v151 = "uncompressed_header";
                    __int16 v152 = 1024;
                    int v153 = v78;
                    __int16 v154 = 1024;
                    signed int v155 = v81;
                    _os_log_impl(&dword_223977000, v79, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: !frame_refs_short_signaling, ref_frame_idx[%d] = %d\n", buf, 0x18u);
                    uint64_t v82 = *((void *)this + 12);
                  }
                }
                else
                {
                  uint64_t v82 = *((void *)this + 12);
                  signed int v81 = *(_DWORD *)(v82 + 4 * v78 + 1692);
                }
                if (!*(_DWORD *)(v82 + 4 * v81 + 36)) {
                  return 0xFFFFFFFFLL;
                }
                *(_DWORD *)(v82 + 4 * v78 + 316) = 0;
                uint64_t v83 = *((void *)this + 11);
                if (*(unsigned char *)(v83 + 16))
                {
                  uint64_t v84 = v75;
                  uint64_t v85 = v2;
                  uint64_t v86 = v1;
                  long long v87 = v79;
                  int v88 = *(_DWORD *)(v83 + 20);
                  unsigned int v89 = *(_DWORD *)(v83 + 24);
                  unsigned int v90 = AV1_Syntax::get_bits(this, "delta_frame_id_minus_1", v89);
                  int v91 = v90;
                  if ((v90 & 0x80000000) != 0 || (unint64_t)v90 >> v89)
                  {
                    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                      return 0xFFFFFFFFLL;
                    }
                    *(_DWORD *)buf = 136315394;
                    uint64_t v151 = "uncompressed_header";
                    __int16 v152 = 1024;
                    int v153 = v91;
                    __int16 v11 = &_os_log_internal;
                    int v12 = "AppleAVD: %s: value %d out of range!\n";
                    goto LABEL_13;
                  }
                  uint64_t v82 = *((void *)this + 12);
                  int v92 = (int)((1 << v88) + *(_DWORD *)(v82 + 172) + ~v90) % (1 << v88);
                  long long v79 = v87;
                  uint64_t v1 = v86;
                  uint64_t v2 = v85;
                  uint64_t v75 = v84;
                  uint64_t v4 = v149;
                  if (v92 != *(_DWORD *)(v82 + 4 * v81 + 4)) {
                    return 0xFFFFFFFFLL;
                  }
                }
                ++v78;
              }
              while (v78 != 7);
              if (*(unsigned char *)(v82 + 140) || !*(unsigned char *)(v82 + 1680))
              {
                AV1_Syntax::frame_size(this);
                if (v93 == -1)
                {
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    return 0xFFFFFFFFLL;
                  }
                  *(_DWORD *)buf = 136315394;
                  uint64_t v151 = "uncompressed_header";
                  __int16 v152 = 1024;
                  int v153 = 2058;
                  __int16 v11 = &_os_log_internal;
                  int v12 = "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n";
                  goto LABEL_13;
                }
LABEL_234:
                uint64_t v104 = *((void *)this + 12);
                if (*(unsigned char *)(v104 + 148)) {
                  *(unsigned char *)(v104 + 158) = 0;
                }
                else {
                  *(unsigned char *)(*((void *)this + 12) + 158) = AV1_Syntax::get_bits(this, "allow_high_precision_mv", 1u) != 0;
                }
                int v3 = v148;
                AV1_Syntax::read_interpolation_filter(this);
                uint64_t v70 = AV1_Syntax::get_bits(this, "is_motion_mode_switchable", 1u);
                uint64_t v71 = *((void *)this + 12);
                *(unsigned char *)(v71 + 159) = v70 != 0;
                goto LABEL_241;
              }
              AV1_Syntax::frame_size_with_refs(this);
              if (v103 != -1) {
                goto LABEL_234;
              }
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              *(_DWORD *)buf = 136315394;
              uint64_t v151 = "uncompressed_header";
              __int16 v152 = 1024;
              int v153 = 2050;
              __int16 v11 = &_os_log_internal;
              int v12 = "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n";
LABEL_13:
              uint32_t v13 = 18;
              goto LABEL_14;
            }
            if ((*((unsigned char *)this + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            *(_DWORD *)buf = 136315138;
            uint64_t v151 = "uncompressed_header";
            __int16 v11 = &_os_log_internal;
            int v12 = "AppleAVD: %s: Corrupted frame. Inter frame requests nonexistent reference.\n";
          }
          else
          {
            if ((*((unsigned char *)this + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            *(_DWORD *)buf = 136315138;
            uint64_t v151 = "uncompressed_header";
            __int16 v11 = &_os_log_internal;
            int v12 = "AppleAVD: %s: Corrupted frame. Inter frame requests nonexistent reference.\n";
          }
LABEL_196:
          uint32_t v13 = 12;
LABEL_14:
          _os_log_impl(&dword_223977000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, v13);
          return 0xFFFFFFFFLL;
        }
        if (!*(unsigned char *)(v18 + 16))
        {
LABEL_110:
          if (*(_DWORD *)(v8 + 68) == 3)
          {
            char v57 = 1;
          }
          else
          {
            char v57 = AV1_Syntax::get_bits(this, "frame_size_override_flag", 1u);
            uint64_t v8 = *((void *)this + 12);
          }
          *(unsigned char *)(v8 + 1680) = v57;
          unsigned int v58 = AV1_Syntax::get_bits(this, "order_hint", *(_DWORD *)(*((void *)this + 11) + 44) + 1);
          unsigned int v33 = v58;
          uint64_t v8 = *((void *)this + 12);
          *(_DWORD *)(v8 + 76) = v58;
          uint64_t v18 = *((void *)this + 11);
          if ((unint64_t)v58 >> (*(unsigned char *)(v18 + 44) + 1))
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            goto LABEL_192;
          }
          *(_DWORD *)(v8 + 84) = v58;
          if (!*(unsigned char *)(v8 + 140) && !*(unsigned char *)(v8 + 2948))
          {
            unsigned int v59 = AV1_Syntax::get_bits(this, "primary_ref_frame", 3u);
            uint64_t v8 = *((void *)this + 12);
            *(_DWORD *)(v8 + 152) = v59;
            if (v59 > 7)
            {
              unsigned int v33 = v59;
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              goto LABEL_192;
            }
            uint64_t v18 = *((void *)this + 11);
          }
          goto LABEL_29;
        }
        int v29 = *(_DWORD *)(v18 + 20);
        if (*((_DWORD *)this + 3875) || !*(_DWORD *)(v4 + 68) && *(_DWORD *)(v8 + 132))
        {
          char v30 = 0;
          int v31 = 0;
        }
        else
        {
          int v31 = *(_DWORD *)(v8 + 172);
          char v30 = 1;
        }
        int v44 = *(_DWORD *)(v18 + 24);
        int v45 = AV1_Syntax::get_bits(this, "current_frame_id", *(_DWORD *)(v18 + 20));
        int v46 = v45;
        uint64_t v8 = *((void *)this + 12);
        *(_DWORD *)(v8 + 172) = v45;
        if (v45 < 0 || (unint64_t)v45 >> v29)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_349;
        }
        if (v30)
        {
          if (v45 == v31) {
            return 0xFFFFFFFFLL;
          }
          int v47 = 1 << v29;
          int v48 = v45 <= v31 ? 1 << v29 : 0;
          if (v45 - v31 + v48 >= 1 << (v29 - 1)) {
            return 0xFFFFFFFFLL;
          }
        }
        else
        {
          int v47 = 1 << v29;
        }
        uint64_t v50 = 0;
        int v51 = 1 << v44;
        int v52 = v47 - (1 << v44);
        while (1)
        {
          int v53 = *(_DWORD *)(v8 + 172);
          int v54 = *(_DWORD *)(v8 + v50 + 4);
          if (v53 - v51 < 1)
          {
            if (v54 <= v53 || v54 >= v52 + v53) {
              goto LABEL_103;
            }
          }
          else
          {
            BOOL v55 = v54 > v53 || v54 < v53 - v51;
            if (!v55) {
              goto LABEL_103;
            }
          }
          *(_DWORD *)(v8 + v50 + 36) = 0;
LABEL_103:
          v50 += 4;
          if (v50 == 32) {
            goto LABEL_110;
          }
        }
      }
    }
    if (*(unsigned char *)(v98 + 268) && !*(_DWORD *)(v98 + 260))
    {
      AV1_Syntax::temporal_point_info(this);
      uint64_t v6 = *((void *)this + 12);
    }
    goto LABEL_226;
  }
  if (*((_DWORD *)this + 3874))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v151 = "uncompressed_header";
      __int16 v152 = 1024;
      int v153 = 1614;
      __int16 v11 = &_os_log_internal;
      int v12 = "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n";
      goto LABEL_13;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v35 = AV1_Syntax::get_bits(this, "frame_to_show_map_idx", 3u);
  unsigned __int8 v36 = v35;
  uint64_t v37 = *((void *)this + 12);
  *(unsigned char *)(v37 + 1672) = v35;
  if ((v35 & 0xF8) != 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v151 = "uncompressed_header";
      __int16 v152 = 1024;
      int v153 = v36;
      __int16 v11 = &_os_log_internal;
      int v12 = "AppleAVD: %s: value %d out of range!\n";
      goto LABEL_13;
    }
    return 0xFFFFFFFFLL;
  }
  int v60 = *(int **)(v37 + 8 * v35 + 1848);
  if (!v60)
  {
    if ((*((unsigned char *)this + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v151 = "uncompressed_header";
    __int16 v11 = &_os_log_internal;
    int v12 = "AppleAVD: %s: Unsupported bitstream. Buffer does not contain a decoded frame.\n";
    goto LABEL_196;
  }
  uint64_t v61 = *((void *)this + 11);
  if (*(unsigned char *)(v61 + 268) && !*(_DWORD *)(v61 + 260))
  {
    uint64_t v35 = AV1_Syntax::temporal_point_info(this);
    uint64_t v61 = *((void *)this + 11);
  }
  if (*(unsigned char *)(v61 + 16))
  {
    unsigned int v62 = *(_DWORD *)(v61 + 20);
    uint64_t v35 = AV1_Syntax::get_bits(this, "display_frame_id", v62);
    int v46 = v35;
    uint64_t v63 = *((void *)this + 12);
    *(_DWORD *)(v63 + 1676) = v35;
    if ((v35 & 0x80000000) != 0 || (unint64_t)v35 >> v62)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_349;
      }
      return 0xFFFFFFFFLL;
    }
    uint64_t v64 = v63 + 4 * *(unsigned __int8 *)(v63 + 1672);
    if (v35 != *(_DWORD *)(v64 + 4) || !*(_DWORD *)(v64 + 36)) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v63 = *((void *)this + 12);
  }
  if (**(_DWORD **)(v63 + 120) != 1)
  {
    uint64_t v35 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    if (v35)
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v151 = "uncompressed_header";
      __int16 v152 = 1024;
      int v153 = 1646;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
    }
  }
  if (*v60 <= 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v151 = "uncompressed_header";
      __int16 v152 = 1024;
      int v153 = 1649;
      __int16 v11 = &_os_log_internal;
      int v12 = "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n";
      goto LABEL_13;
    }
    return 0xFFFFFFFFLL;
  }
  AV1_Syntax::assign_frame_buffer(v35, (int **)(*((void *)this + 12) + 120), v60);
  *((_DWORD *)this + 3876) = v60[486] == 0;
  uint64_t v97 = *((void *)this + 12);
  *(void *)(v97 + 396) = 0;
  *(_DWORD *)(v97 + 132) = 1;
  if (!v60[271]) {
    return 0xFFFFFFFFLL;
  }
  if (*((_DWORD *)this + 3876)) {
    v60[271] = 0;
  }
  memcpy((void *)(v97 + 2296), v60 + 273, 0x28CuLL);
  if (*((_DWORD *)this + 3876))
  {
    AV1_Syntax::show_existing_frame_reset(this);
    return 0;
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)(v4 + 104) = 0;
  }
  return result;
}

uint64_t AV1_Syntax::Get_Position(AV1_Syntax *this)
{
  return (8 * (*((_DWORD *)this + 4) - *((_DWORD *)this + 2)) - *((_DWORD *)this + 11));
}

uint64_t AV1_Syntax::temporal_point_info(AV1_Syntax *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unsigned int v2 = *(unsigned __int8 *)(*((void *)this + 11) + 278);
  unsigned int bits = AV1_Syntax::get_bits(this, "frame_presentation_time", v2);
  *(_DWORD *)(*((void *)this + 12) + 344) = bits;
  if (!((unint64_t)bits >> v2)) {
    return 0;
  }
  unsigned int v4 = bits;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    BOOL v7 = "temporal_point_info";
    __int16 v8 = 1024;
    unsigned int v9 = v4;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v6, 0x12u);
  }
  return 0xFFFFFFFFLL;
}

double AV1_Syntax::frame_size(AV1_Syntax *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unsigned int v2 = (unsigned int *)*((void *)this + 11);
  if (!*(unsigned char *)(*((void *)this + 12) + 1680))
  {
    int v11 = v2[2];
    int v26 = v2[3];
    int v27 = v11;
    goto LABEL_9;
  }
  unsigned int v4 = *v2;
  unsigned int v3 = v2[1];
  unsigned int bits = AV1_Syntax::get_bits(this, "frame_width_minus_1", *v2);
  unint64_t v6 = bits + 1;
  int v27 = bits + 1;
  if (bits > 0x7FFFFFFE || v6 >> v4 != 0)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return result;
    }
    *(_DWORD *)buf = 136315394;
    int v29 = "frame_size";
    __int16 v30 = 1024;
    int v31 = v6;
    unsigned int v9 = &_os_log_internal;
    uint64_t v10 = "AppleAVD: %s: value %d out of range!\n";
LABEL_18:
    uint32_t v19 = 18;
LABEL_19:
    _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, v19);
    return result;
  }
  unsigned int v16 = AV1_Syntax::get_bits(this, "frame_height_minus_1", v3);
  unint64_t v17 = v16 + 1;
  int v26 = v16 + 1;
  if (v16 > 0x7FFFFFFE || v17 >> v3 != 0)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return result;
    }
    *(_DWORD *)buf = 136315394;
    int v29 = "frame_size";
    __int16 v30 = 1024;
    int v31 = v17;
    unsigned int v9 = &_os_log_internal;
    uint64_t v10 = "AppleAVD: %s: value %d out of range!\n";
    goto LABEL_18;
  }
  uint64_t v25 = *((void *)this + 11);
  if ((int)v6 <= *(_DWORD *)(v25 + 8) && (int)v17 <= *(_DWORD *)(v25 + 12))
  {
LABEL_9:
    AV1_Syntax::superres_params(this, &v27, &v26);
    int v13 = v26;
    int v12 = v27;
    uint64_t v14 = *((void *)this + 12);
    if (*(_DWORD *)(v14 + 376) == v27 && *(_DWORD *)(v14 + 380) == v26)
    {
      unsigned int v15 = *(_DWORD *)(v14 + 388);
    }
    else
    {
      *(_DWORD *)(v14 + 384) = ((v27 + 7) >> 2) & 0xFFFFFFFE;
      unsigned int v15 = ((v13 + 7) >> 2) & 0xFFFFFFFE;
      *(_DWORD *)(v14 + 388) = v15;
      *(_DWORD *)(v14 + 376) = v12;
      *(_DWORD *)(v14 + 380) = v13;
    }
    uint64_t v20 = *(_DWORD **)(v14 + 120);
    if (v20[179] == v15)
    {
      int v21 = *(_DWORD *)(v14 + 384);
      if (v20[180] == v21) {
        goto LABEL_27;
      }
    }
    else
    {
      int v21 = *(_DWORD *)(v14 + 384);
    }
    v20[179] = v15;
    v20[180] = v21;
LABEL_27:
    v20[181] = v12;
    v20[182] = v13;
    AV1_Syntax::render_size(this);
    *(_DWORD *)(*(void *)(*((void *)this + 12) + 120) + 1760) = *(_DWORD *)(*((void *)this + 12) + 364);
    *(_DWORD *)(*(void *)(*((void *)this + 12) + 120) + 1768) = *(_DWORD *)(*((void *)this + 12) + 368);
    uint64_t v22 = *((void *)this + 11);
    uint64_t v23 = *((void *)this + 12);
    uint64_t v24 = *(void *)(v23 + 120);
    *(void *)(v24 + 1888) = *(void *)(v22 + 100);
    *(_DWORD *)(v24 + 1896) = *(_DWORD *)(v22 + 76);
    double result = *(double *)(v22 + 84);
    *(double *)(v24 + 1900) = result;
    *(_DWORD *)(v24 + 1908) = *(_DWORD *)(v22 + 92);
    *(unsigned char *)(v24 + 1912) = *(unsigned char *)(v22 + 81);
    *(_DWORD *)(v24 + 1916) = *(_DWORD *)(v22 + 108);
    *(unsigned char *)(v24 + 1920) = *(_DWORD *)(v22 + 96);
    *(_DWORD *)(v24 + 1924) = *(_DWORD *)(v23 + 356);
    *(_DWORD *)(v24 + 1928) = *(_DWORD *)(v23 + 360);
    return result;
  }
  if ((*((unsigned char *)this + 15526) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    int v29 = "frame_size";
    __int16 v30 = 1024;
    int v31 = v6;
    __int16 v32 = 1024;
    int v33 = v17;
    unsigned int v9 = &_os_log_internal;
    uint64_t v10 = "AppleAVD: %s: Frame dimensions are larger than the maximum values: width %d height %d\n";
    uint32_t v19 = 24;
    goto LABEL_19;
  }
  return result;
}

uint64_t AV1_Syntax::set_frame_refs(AV1_Syntax *this)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 11);
  uint64_t v2 = *((void *)this + 12);
  uint64_t v4 = *(unsigned int *)(v2 + 1684);
  uint64_t v5 = *(unsigned int *)(v2 + 1688);
  if (!*(_DWORD *)(v3 + 40) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v63 = "set_frame_refs";
    __int16 v64 = 1024;
    v65[0] = 5013;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
    uint64_t v3 = *((void *)this + 11);
  }
  int v6 = *(_DWORD *)(v3 + 44);
  if (v6 < 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v63 = "set_frame_refs";
    __int16 v64 = 1024;
    v65[0] = 5014;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
    int v6 = *(_DWORD *)(*((void *)this + 11) + 44);
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v50 = *(_DWORD *)(*((void *)this + 12) + 76);
  int v51 = 1 << v6;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  int v61 = 0;
  uint64_t v60 = 0;
  int v47 = v5;
  int v48 = v4;
  uint64_t v9 = 24 * v5;
  uint64_t v10 = 24 * v4;
  int v49 = -1;
  int v11 = -1;
  do
  {
    int v12 = &buf[v7];
    *(_DWORD *)int v12 = v8;
    *((_DWORD *)v12 + 4) = -1;
    int v13 = *(int **)(*((void *)this + 12) + 8 * v8 + 1848);
    *((void *)v12 + 1) = v13;
    if (v13)
    {
      if (*v13 <= 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v52 = 136315394;
        int v53 = "set_frame_refs";
        __int16 v54 = 1024;
        int v55 = 5033;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", v52, 0x12u);
      }
      int v14 = v13[1];
      if (v14 == -1)
      {
        *((_DWORD *)v12 + 4) = -1;
      }
      else
      {
        int relative_dist = AV1_Syntax::get_relative_dist((uint64_t)this, (_DWORD *)(*((void *)this + 11) + 40), v14, v50);
        *((_DWORD *)v12 + 4) = relative_dist + v51;
        if (relative_dist + v51 <= -2 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v52 = 136315394;
          int v53 = "set_frame_refs";
          __int16 v54 = 1024;
          int v55 = 5037;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", v52, 0x12u);
        }
      }
      if (v10 == v7) {
        int v11 = *((_DWORD *)v12 + 4);
      }
      if (v9 == v7) {
        int v49 = *((_DWORD *)v12 + 4);
      }
    }
    ++v8;
    v7 += 24;
  }
  while (v7 != 192);
  uint64_t result = 0xFFFFFFFFLL;
  if (v11 == -1 || v11 >= v51) {
    return result;
  }
  if ((v49 == -1 || v49 >= v51) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v52 = 136315394;
    int v53 = "set_frame_refs";
    __int16 v54 = 1024;
    int v55 = 5052;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", v52, 0x12u);
  }
  qsort(buf, 8uLL, 0x18uLL, (int (__cdecl *)(const void *, const void *))AV1_Syntax::set_frame_refs(void)::{lambda(void const*,void const*)#1}::__invoke);
  uint64_t v17 = 0;
  int v18 = 0;
  uint32_t v19 = (_DWORD *)((char *)v65 + 2);
  do
  {
    int v21 = *v19;
    v19 += 6;
    int v20 = v21;
    if (v21 == -1)
    {
      ++v18;
    }
    else if (v20 >= v51)
    {
      uint64_t v22 = ~v17;
      goto LABEL_35;
    }
    --v17;
  }
  while (v17 != -8);
  uint64_t v22 = 7;
LABEL_35:
  uint64_t v23 = 0;
  uint64_t v24 = &_os_log_internal;
  do
  {
    if ((~*((_DWORD *)this + 3881) & 0x80002) == 0 && os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(_DWORD *)(*((void *)this + 12) + 4 * v23 + 1692);
      *(_DWORD *)int v52 = 136315650;
      int v53 = "set_frame_refs";
      __int16 v54 = 1024;
      int v55 = v23;
      __int16 v56 = 1024;
      int v57 = v25;
      _os_log_impl(&dword_223977000, v24, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: begin ref_frame_idx[%d] = %d\n", v52, 0x18u);
    }
    ++v23;
  }
  while (v23 != 7);
  uint64_t v26 = (int)v22 + 1;
  if ((int)v22 >= 7)
  {
    int v27 = 7;
  }
  else
  {
    *(_DWORD *)(*((void *)this + 12) + 1716) = *(_DWORD *)((char *)&v65[38] + 2);
    int v61 = 1;
    int v27 = 6;
  }
  if ((int)v22 < v27)
  {
    *(_DWORD *)(*((void *)this + 12) + 1708) = *(_DWORD *)&buf[24 * v26];
    LODWORD(v60) = 1;
    LODWORD(v26) = v22 + 2;
  }
  if ((int)v26 <= v27)
  {
    *(_DWORD *)(*((void *)this + 12) + 1712) = *(_DWORD *)&buf[24 * (int)v26];
    HIDWORD(v60) = 1;
  }
  if (v18 <= (int)v22)
  {
    int v28 = 0;
    int v29 = 0;
    __int16 v30 = &buf[24 * v18];
    int v31 = v22 - v18 + 1;
    do
    {
      int v32 = *(_DWORD *)v30;
      if (*(_DWORD *)v30 == v48)
      {
        *(_DWORD *)(*((void *)this + 12) + 1692) = v48;
        int v32 = *(_DWORD *)v30;
        int v29 = 1;
      }
      if (v32 == v47)
      {
        *(_DWORD *)(*((void *)this + 12) + 1704) = v47;
        int v28 = 1;
      }
      v30 += 24;
      --v31;
    }
    while (v31);
    HIDWORD(v59) = v28;
    LODWORD(v58) = v29;
    if (v29 == 1 && v28 == 1) {
      goto LABEL_59;
    }
  }
  else
  {
    LODWORD(v58) = 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v52 = 136315394;
    int v53 = "set_frame_refs";
    __int16 v54 = 1024;
    int v55 = 5169;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", v52, 0x12u);
  }
LABEL_59:
  uint64_t v33 = 0;
  while (1)
  {
    uint64_t v34 = AV1_Syntax::set_frame_refs(void)::ref_frame_list[v33] - 1;
    if (*((_DWORD *)&v58 + v34) != 1) {
      break;
    }
LABEL_70:
    if (++v33 == 5) {
      goto LABEL_77;
    }
  }
  if (v18 <= (int)v22)
  {
    uint64_t v35 = v22 << 32;
    unsigned __int8 v36 = &buf[24 * (int)v22];
    uint64_t v37 = (int)v22 + 1;
    uint64_t v22 = (v22 - 1);
    while (1)
    {
      int v39 = *(_DWORD *)v36;
      v36 -= 24;
      int v38 = v39;
      if (v39 != v48 && v38 != v47) {
        break;
      }
      v35 -= 0x100000000;
      uint64_t v22 = (v22 - 1);
      if (--v37 <= v18) {
        goto LABEL_72;
      }
    }
    *(_DWORD *)(*((void *)this + 12) + 4 * v34 + 1692) = *(_DWORD *)&buf[24 * SHIDWORD(v35)];
    *((_DWORD *)&v58 + v34) = 1;
    goto LABEL_70;
  }
LABEL_72:
  if (v33 <= 4)
  {
    uint64_t v33 = v33;
    do
    {
      uint64_t v41 = AV1_Syntax::set_frame_refs(void)::ref_frame_list[v33] - 1;
      if (*((_DWORD *)&v58 + v41) != 1)
      {
        *(_DWORD *)(*((void *)this + 12) + 4 * v41 + 1692) = *(_DWORD *)&buf[24 * v18];
        *((_DWORD *)&v58 + v41) = 1;
      }
      ++v33;
    }
    while (v33 != 5);
  }
LABEL_77:
  uint64_t v42 = 0;
  int v43 = &_os_log_internal;
  do
  {
    if (*(_DWORD *)((char *)&v58 + v42) != 1 && os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v52 = 136315394;
      int v53 = "set_frame_refs";
      __int16 v54 = 1024;
      int v55 = 5223;
      _os_log_impl(&dword_223977000, v43, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", v52, 0x12u);
    }
    v42 += 4;
  }
  while (v42 != 28);
  uint64_t v44 = 0;
  int v45 = &_os_log_internal;
  do
  {
    if ((~*((_DWORD *)this + 3881) & 0x80002) == 0 && os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      int v46 = *(_DWORD *)(*((void *)this + 12) + 4 * v44 + 1692);
      *(_DWORD *)int v52 = 136315650;
      int v53 = "set_frame_refs";
      __int16 v54 = 1024;
      int v55 = v44;
      __int16 v56 = 1024;
      int v57 = v46;
      _os_log_impl(&dword_223977000, v45, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: end ref_frame_idx[%d] = %d\n", v52, 0x18u);
    }
    ++v44;
  }
  while (v44 != 7);
  return 0;
}

double AV1_Syntax::frame_size_with_refs(AV1_Syntax *this)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  *(void *)int v39 = 0;
  uint64_t v2 = 423;
  while (!AV1_Syntax::get_bits(this, "found_ref", 1u))
  {
    if (++v2 == 430)
    {
      uint64_t v3 = (unsigned int *)*((void *)this + 11);
      unsigned int v5 = *v3;
      unsigned int v4 = v3[1];
      unsigned int bits = AV1_Syntax::get_bits(this, "frame_width_minus_1", *v3);
      unint64_t v7 = bits + 1;
      v39[1] = bits + 1;
      if (bits > 0x7FFFFFFE || v7 >> v5 != 0)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return result;
        }
        *(_DWORD *)buf = 136315394;
        uint64_t v41 = "frame_size_with_refs";
        __int16 v42 = 1024;
        int v43 = v7;
        uint64_t v10 = &_os_log_internal;
        int v11 = "AppleAVD: %s: value %d out of range!\n";
LABEL_24:
        _os_log_impl(&dword_223977000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0x12u);
        return result;
      }
      unsigned int v20 = AV1_Syntax::get_bits(this, "frame_height_minus_1", v4);
      unint64_t v21 = v20 + 1;
      v39[0] = v20 + 1;
      if (v20 > 0x7FFFFFFE || v21 >> v4 != 0)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return result;
        }
        *(_DWORD *)buf = 136315394;
        uint64_t v41 = "frame_size_with_refs";
        __int16 v42 = 1024;
        int v43 = v21;
        uint64_t v10 = &_os_log_internal;
        int v11 = "AppleAVD: %s: value %d out of range!\n";
        goto LABEL_24;
      }
      AV1_Syntax::superres_params(this, &v39[1], v39);
      int v24 = v39[0];
      int v23 = v39[1];
      uint64_t v25 = *((void *)this + 12);
      if (*(_DWORD *)(v25 + 376) == v39[1] && *(_DWORD *)(v25 + 380) == v39[0])
      {
        unsigned int v26 = *(_DWORD *)(v25 + 388);
      }
      else
      {
        *(_DWORD *)(v25 + 384) = ((v39[1] + 7) >> 2) & 0xFFFFFFFE;
        unsigned int v26 = ((v24 + 7) >> 2) & 0xFFFFFFFE;
        *(_DWORD *)(v25 + 388) = v26;
        *(_DWORD *)(v25 + 376) = v23;
        *(_DWORD *)(v25 + 380) = v24;
      }
      int v27 = *(_DWORD **)(v25 + 120);
      if (v27[179] == v26)
      {
        int v28 = *(_DWORD *)(v25 + 384);
        if (v27[180] == v28) {
          goto LABEL_39;
        }
      }
      else
      {
        int v28 = *(_DWORD *)(v25 + 384);
      }
      v27[179] = v26;
      v27[180] = v28;
LABEL_39:
      v27[181] = v23;
      v27[182] = v24;
      AV1_Syntax::render_size(this);
      int v16 = v39[0];
      int v17 = v39[1];
      goto LABEL_43;
    }
  }
  if ((v2 + 90) - 1 > 7
    || (uint64_t v12 = *((void *)this + 12), v13 = *(int *)(v12 + 4 * v2), v13 == -1)
    || (int v14 = *(_DWORD **)(v12 + 8 * v13 + 1848)) == 0)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return result;
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v41 = "frame_size_with_refs";
    __int16 v42 = 1024;
    int v43 = 3457;
    uint64_t v10 = &_os_log_internal;
    int v11 = "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n";
    goto LABEL_24;
  }
  int v15 = v14[440];
  v39[0] = v14[442];
  v39[1] = v15;
  *(_DWORD *)(v12 + 356) = v14[481];
  *(_DWORD *)(v12 + 360) = v14[482];
  AV1_Syntax::superres_params(this, &v39[1], v39);
  int v16 = v39[0];
  int v17 = v39[1];
  uint64_t v18 = *((void *)this + 12);
  if (*(_DWORD *)(v18 + 376) == v39[1] && *(_DWORD *)(v18 + 380) == v39[0])
  {
    unsigned int v19 = *(_DWORD *)(v18 + 388);
  }
  else
  {
    *(_DWORD *)(v18 + 384) = ((v39[1] + 7) >> 2) & 0xFFFFFFFE;
    unsigned int v19 = ((v16 + 7) >> 2) & 0xFFFFFFFE;
    *(_DWORD *)(v18 + 388) = v19;
    *(_DWORD *)(v18 + 376) = v17;
    *(_DWORD *)(v18 + 380) = v16;
  }
  int v29 = *(_DWORD **)(v18 + 120);
  if (v29[179] == v19)
  {
    int v30 = *(_DWORD *)(v18 + 384);
    if (v29[180] == v30) {
      goto LABEL_42;
    }
  }
  else
  {
    int v30 = *(_DWORD *)(v18 + 384);
  }
  v29[179] = v19;
  v29[180] = v30;
LABEL_42:
  v29[181] = v17;
  v29[182] = v16;
LABEL_43:
  if ((v17 < 1 || v16 <= 0) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v41 = "frame_size_with_refs";
    __int16 v42 = 1024;
    int v43 = 3490;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
  }
  uint64_t v31 = 423;
  while (1)
  {
    if ((v31 + 90) - 1 <= 7)
    {
      uint64_t v32 = *((void *)this + 12);
      uint64_t v33 = *(int *)(v32 + 4 * v31);
      if (v33 != -1)
      {
        uint64_t v34 = *(_DWORD **)(v32 + 8 * v33 + 1848);
        if (v34)
        {
          uint64_t v35 = (_DWORD *)*((void *)this + 11);
          if (v34[474] != v35[19] || v34[472] != v35[25] || v34[473] != v35[26]) {
            break;
          }
        }
      }
    }
    if (++v31 == 430)
    {
      *(_DWORD *)(*(void *)(*((void *)this + 12) + 120) + 1760) = *(_DWORD *)(*((void *)this + 12) + 364);
      *(_DWORD *)(*(void *)(*((void *)this + 12) + 120) + 1768) = *(_DWORD *)(*((void *)this + 12) + 368);
      uint64_t v36 = *((void *)this + 11);
      uint64_t v37 = *((void *)this + 12);
      uint64_t v38 = *(void *)(v37 + 120);
      *(void *)(v38 + 1888) = *(void *)(v36 + 100);
      *(_DWORD *)(v38 + 1896) = *(_DWORD *)(v36 + 76);
      double result = *(double *)(v36 + 84);
      *(double *)(v38 + 1900) = result;
      *(_DWORD *)(v38 + 1908) = *(_DWORD *)(v36 + 92);
      *(unsigned char *)(v38 + 1912) = *(unsigned char *)(v36 + 81);
      *(_DWORD *)(v38 + 1916) = *(_DWORD *)(v36 + 108);
      *(unsigned char *)(v38 + 1920) = *(_DWORD *)(v36 + 96);
      *(_DWORD *)(v38 + 1924) = *(_DWORD *)(v37 + 356);
      *(_DWORD *)(v38 + 1928) = *(_DWORD *)(v37 + 360);
      return result;
    }
  }
  return result;
}

uint64_t AV1_Syntax::read_interpolation_filter(AV1_Syntax *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (AV1_Syntax::get_bits(this, "is_filter_switchable", 1u))
  {
    uint64_t result = 0;
    *(unsigned char *)(*((void *)this + 12) + 392) = 4;
  }
  else
  {
    unsigned __int8 bits = AV1_Syntax::get_bits(this, "interpolation_filter", 2u);
    *(unsigned char *)(*((void *)this + 12) + 392) = bits;
    if ((bits & 0xFC) != 0)
    {
      unsigned __int8 v4 = bits;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315394;
        int v6 = "read_interpolation_filter";
        __int16 v7 = 1024;
        int v8 = v4;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v5, 0x12u);
      }
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AV1_Syntax::tile_info(AV1_Syntax *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = (_DWORD *)*((void *)this + 12);
  AV1_Syntax::read_tile_info_max_tile(this);
  uint64_t result = 0;
  *(_DWORD *)(*((void *)this + 12) + 1356) = 0;
  if (v2[191] * v2[192] >= 2)
  {
    int bits = AV1_Syntax::get_bits(this, "context_update_tile_id", v2[198] + v2[197]);
    int v5 = bits;
    *(_DWORD *)(*((void *)this + 12) + 1356) = bits;
    if (bits < 0 || (unint64_t)bits >> (v2[198] + *((unsigned char *)v2 + 788)))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      if (bits >= v2[191] * v2[192])
      {
        if ((*((unsigned char *)this + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        int v9 = 136315394;
        uint64_t v10 = "tile_info";
        __int16 v11 = 1024;
        int v12 = v5;
        int v6 = &_os_log_internal;
        __int16 v7 = "AppleAVD: %s: Corrupted frame. Invalid context_update_tile_id %d \n";
        goto LABEL_6;
      }
      unsigned int v8 = AV1_Syntax::get_bits(this, "tile_size_bytes_minus_1", 2u);
      int v5 = v8 + 1;
      *(_DWORD *)(*((void *)this + 12) + 1352) = v8 + 1;
      if (v8 < 4) {
        return 0;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
    }
    int v9 = 136315394;
    uint64_t v10 = "tile_info";
    __int16 v11 = 1024;
    int v12 = v5;
    int v6 = &_os_log_internal;
    __int16 v7 = "AppleAVD: %s: value %d out of range!\n";
LABEL_6:
    _os_log_impl(&dword_223977000, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v9, 0x12u);
    return 0xFFFFFFFFLL;
  }
  return result;
}

BOOL AV1_Syntax::is_min_tile_width_satisfied(AV1_Syntax *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 12);
  return v1[191] == 1 || 64 << (v1[94] != v1[91]) <= 4 * v1[195];
}

uint64_t AV1_Syntax::quantization_params(AV1_Syntax *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unsigned int bits = AV1_Syntax::get_bits(this, "base_q_idx", 8u);
  unsigned int v3 = bits;
  *(_DWORD *)(*((void *)this + 12) + 444) = bits;
  if (bits >= 0x100)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_72;
    }
    return 0xFFFFFFFFLL;
  }
  if (bits > 0x14)
  {
    if (bits > 0x3C)
    {
      if (bits > 0x78) {
        int v4 = 3;
      }
      else {
        int v4 = 2;
      }
    }
    else
    {
      int v4 = 1;
    }
    *((_DWORD *)this + 3058) = v4;
  }
  else
  {
    *((_DWORD *)this + 3058) = 0;
  }
  if (AV1_Syntax::get_bits(this, "delta_coded", 1u))
  {
    int v5 = AV1_Syntax::get_bits(this, "delta_q", 7u);
    int v6 = ((v5 << 25 >> 31) & 0xFFFFFF80) + v5;
    if (v6 != (char)(((v5 << 25 >> 31) & 0x80) + v5))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 136315394;
        int v27 = "read_delta_q";
        __int16 v28 = 1024;
        unsigned int v29 = v6;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v26, 0x12u);
      }
      int v6 = -1;
    }
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *((void *)this + 12);
  *(_DWORD *)(v7 + 448) = v6;
  if (*(int *)(v7 + 440) < 2)
  {
    *(void *)(v7 + 460) = 0;
    *(void *)(v7 + 452) = 0;
    goto LABEL_61;
  }
  if (!*(unsigned char *)(*((void *)this + 11) + 112))
  {
    if (AV1_Syntax::get_bits(this, "delta_coded", 1u))
    {
      int v11 = AV1_Syntax::get_bits(this, "delta_q", 7u);
      int v12 = ((v11 << 25 >> 31) & 0xFFFFFF80) + v11;
      if (v12 != (char)(((v11 << 25 >> 31) & 0x80) + v11))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = 136315394;
          int v27 = "read_delta_q";
          __int16 v28 = 1024;
          unsigned int v29 = v12;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v26, 0x12u);
        }
        int v12 = -1;
      }
    }
    else
    {
      int v12 = 0;
    }
    *(_DWORD *)(*((void *)this + 12) + 452) = v12;
    if (AV1_Syntax::get_bits(this, "delta_coded", 1u))
    {
      int v20 = AV1_Syntax::get_bits(this, "delta_q", 7u);
      int v14 = ((v20 << 25 >> 31) & 0xFFFFFF80) + v20;
      if (v14 != (char)(((v20 << 25 >> 31) & 0x80) + v20))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = 136315394;
          int v27 = "read_delta_q";
          __int16 v28 = 1024;
          unsigned int v29 = v14;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v26, 0x12u);
        }
        int v14 = -1;
      }
    }
    else
    {
      int v14 = 0;
    }
    int v15 = (_DWORD *)*((void *)this + 12);
    v15[115] = v14;
    goto LABEL_60;
  }
  int v8 = AV1_Syntax::get_bits(this, "diff_uv_delta", 1u);
  if (AV1_Syntax::get_bits(this, "delta_coded", 1u))
  {
    int v9 = AV1_Syntax::get_bits(this, "delta_q", 7u);
    int v10 = ((v9 << 25 >> 31) & 0xFFFFFF80) + v9;
    if (v10 != (char)(((v9 << 25 >> 31) & 0x80) + v9))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 136315394;
        int v27 = "read_delta_q";
        __int16 v28 = 1024;
        unsigned int v29 = v10;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v26, 0x12u);
      }
      int v10 = -1;
    }
  }
  else
  {
    int v10 = 0;
  }
  *(_DWORD *)(*((void *)this + 12) + 452) = v10;
  if (AV1_Syntax::get_bits(this, "delta_coded", 1u))
  {
    int v13 = AV1_Syntax::get_bits(this, "delta_q", 7u);
    int v14 = ((v13 << 25 >> 31) & 0xFFFFFF80) + v13;
    if (v14 != (char)(((v13 << 25 >> 31) & 0x80) + v13))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 136315394;
        int v27 = "read_delta_q";
        __int16 v28 = 1024;
        unsigned int v29 = v14;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v26, 0x12u);
      }
      int v14 = -1;
    }
  }
  else
  {
    int v14 = 0;
  }
  int v15 = (_DWORD *)*((void *)this + 12);
  v15[115] = v14;
  if (!v8)
  {
LABEL_60:
    v15[114] = v15[113];
    v15[116] = v14;
    goto LABEL_61;
  }
  if (AV1_Syntax::get_bits(this, "delta_coded", 1u))
  {
    int v16 = AV1_Syntax::get_bits(this, "delta_q", 7u);
    int v17 = ((v16 << 25 >> 31) & 0xFFFFFF80) + v16;
    if (v17 != (char)(((v16 << 25 >> 31) & 0x80) + v16))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 136315394;
        int v27 = "read_delta_q";
        __int16 v28 = 1024;
        unsigned int v29 = v17;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v26, 0x12u);
      }
      int v17 = -1;
    }
  }
  else
  {
    int v17 = 0;
  }
  *(_DWORD *)(*((void *)this + 12) + 456) = v17;
  if (AV1_Syntax::get_bits(this, "delta_coded", 1u))
  {
    int v18 = AV1_Syntax::get_bits(this, "delta_q", 7u);
    int v19 = ((v18 << 25 >> 31) & 0xFFFFFF80) + v18;
    if (v19 != (char)(((v18 << 25 >> 31) & 0x80) + v18))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 136315394;
        int v27 = "read_delta_q";
        __int16 v28 = 1024;
        unsigned int v29 = v19;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v26, 0x12u);
      }
      int v19 = -1;
    }
  }
  else
  {
    int v19 = 0;
  }
  *(_DWORD *)(*((void *)this + 12) + 464) = v19;
LABEL_61:
  uint64_t result = AV1_Syntax::get_bits(this, "using_qmatrix", 1u);
  uint64_t v22 = *((void *)this + 12);
  *(unsigned char *)(v22 + 468) = result != 0;
  if (!result)
  {
    *(void *)(v22 + 472) = 0;
    *(_DWORD *)(v22 + 480) = 0;
    return result;
  }
  unsigned int v23 = AV1_Syntax::get_bits(this, "qm_y", 4u);
  *(_DWORD *)(*((void *)this + 12) + 472) = v23;
  if (v23 >= 0x10)
  {
    unsigned int v3 = v23;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_72;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v3 = AV1_Syntax::get_bits(this, "qm_u", 4u);
  uint64_t v24 = *((void *)this + 12);
  *(_DWORD *)(v24 + 476) = v3;
  if (v3 >= 0x10)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_72;
    }
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(*((void *)this + 11) + 112))
  {
    unsigned int v25 = AV1_Syntax::get_bits(this, "qm_v", 4u);
    *(_DWORD *)(*((void *)this + 12) + 480) = v25;
    if (v25 >= 0x10)
    {
      unsigned int v3 = v25;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
LABEL_72:
        int v26 = 136315394;
        int v27 = "quantization_params";
        __int16 v28 = 1024;
        unsigned int v29 = v3;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v26, 0x12u);
      }
      return 0xFFFFFFFFLL;
    }
    return 0;
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)(v24 + 480) = v3;
  }
  return result;
}

double AV1_Syntax::setup_past_independence(AV1_Syntax *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = *((void *)this + 12);
  uint64_t v3 = 279;
  do
  {
    uint64_t v4 = 8;
    uint64_t v5 = v3;
    do
    {
      *(unsigned char *)(v2 + v5 + 214) = 0;
      uint64_t v2 = *((void *)this + 12);
      *(_WORD *)(v2 + 2 * v5++) = 0;
      --v4;
    }
    while (v4);
    ++v1;
    v3 += 8;
  }
  while (v1 != 8);
  double result = NAN;
  *(void *)(*(void *)(v2 + 120) + 1948) = 0xFFFF00FF00000001;
  *(_WORD *)(*(void *)(*((void *)this + 12) + 120) + 1956) = 0;
  uint64_t v7 = *((void *)this + 12);
  *(_WORD *)(v7 + 416) = 257;
  *(void *)(v7 + 426) = 0xFFFF00FF00000001;
  *(_WORD *)(*((void *)this + 12) + 436) = 0;
  return result;
}

uint64_t AV1_Syntax::segmentation_params(AV1_Syntax *this)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 12);
  *(_WORD *)(v2 + 485) = 0;
  *(unsigned char *)(v2 + 487) = 0;
  char bits = AV1_Syntax::get_bits(this, "segmentation_enabled", 1u);
  uint64_t v4 = *((void *)this + 12);
  *(unsigned char *)(v4 + 484) = bits;
  if (!bits)
  {
    uint64_t v5 = 0;
    *(unsigned char *)(v4 + 492) = 0;
    *(void *)(v4 + 484) = 0;
    uint64_t v6 = 279;
    do
    {
      uint64_t v7 = 8;
      uint64_t v8 = v6;
      do
      {
        *(unsigned char *)(v4 + v8 + 214) = 0;
        uint64_t v4 = *((void *)this + 12);
        *(_WORD *)(v4 + 2 * v8++) = 0;
        --v7;
      }
      while (v7);
      ++v5;
      v6 += 8;
    }
    while (v5 != 8);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(v4 + 120);
    *(_DWORD *)(v11 + 516) = *(_DWORD *)(v4 + 488);
    *(unsigned char *)(v11 + 520) = *(unsigned char *)(v4 + 492);
    do
    {
      uint64_t v12 = 8;
      uint64_t v13 = v9;
      do
      {
        *(unsigned char *)(v11 + v13 + 521) = *(unsigned char *)(v4 + v13 + 493);
        uint64_t v4 = *((void *)this + 12);
        uint64_t v11 = *(void *)(v4 + 120);
        *(_WORD *)(v11 + 2 * v13 + 586) = *(_WORD *)(v4 + 2 * v13 + 558);
        ++v13;
        --v12;
      }
      while (v12);
      ++v10;
      v9 += 8;
    }
    while (v10 != 8);
    return 0;
  }
  if (*(_DWORD *)(v4 + 152) == 7)
  {
    *(_WORD *)(v4 + 485) = 257;
    *(unsigned char *)(v4 + 487) = 0;
  }
  else
  {
    char v14 = AV1_Syntax::get_bits(this, "segmentation_update_map", 1u);
    uint64_t v15 = *((void *)this + 12);
    *(unsigned char *)(v15 + 485) = v14;
    if (v14)
    {
      char v16 = AV1_Syntax::get_bits(this, "segmentation_temporal_update", 1u);
      uint64_t v15 = *((void *)this + 12);
    }
    else
    {
      char v16 = 0;
    }
    *(unsigned char *)(v15 + 487) = v16;
    char v17 = AV1_Syntax::get_bits(this, "segmentation_update_data", 1u);
    uint64_t v4 = *((void *)this + 12);
    *(unsigned char *)(v4 + 486) = v17;
    if (!v17)
    {
      uint64_t v40 = *(void *)(v4 + 112);
      if (v40)
      {
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        *(_DWORD *)(v4 + 488) = *(_DWORD *)(v40 + 516);
        *(unsigned char *)(v4 + 492) = *(unsigned char *)(v40 + 520);
        do
        {
          uint64_t v43 = 8;
          uint64_t v44 = v41;
          do
          {
            *(unsigned char *)(v4 + v44 + 493) = *(unsigned char *)(v40 + v44 + 521);
            uint64_t v4 = *((void *)this + 12);
            uint64_t v40 = *(void *)(v4 + 112);
            *(_WORD *)(v4 + 2 * v44 + 558) = *(_WORD *)(v40 + 2 * v44 + 586);
            ++v44;
            --v43;
          }
          while (v43);
          ++v42;
          v41 += 8;
        }
        while (v42 != 8);
      }
      goto LABEL_55;
    }
  }
  uint64_t v18 = 0;
  uint64_t v19 = 279;
  do
  {
    uint64_t v20 = 8;
    uint64_t v21 = v19;
    do
    {
      *(unsigned char *)(v4 + v21 + 214) = 0;
      uint64_t v4 = *((void *)this + 12);
      *(_WORD *)(v4 + 2 * v21++) = 0;
      --v20;
    }
    while (v20);
    ++v18;
    v19 += 8;
  }
  while (v18 != 8);
  uint64_t v22 = 0;
  unsigned int v23 = &segmentation_feature_data_max;
  uint64_t v24 = (unsigned int *)&segmentation_feature_bits;
  uint64_t v25 = 279;
  while (2)
  {
    uint64_t v50 = v22;
    unint64_t v26 = 0;
    uint64_t v27 = v25;
    do
    {
      int v28 = AV1_Syntax::get_bits(this, "feature_enabled", 1u);
      *(unsigned char *)(*((void *)this + 12) + v27 + 214) = v28;
      if (v28 != 1)
      {
        LOWORD(v33) = 0;
        goto LABEL_36;
      }
      unsigned int v29 = *v24;
      signed int v30 = *v23;
      if (v26 > 4)
      {
        unsigned int v34 = AV1_Syntax::get_bits(this, "feature_value", *v24);
        int v32 = v34;
        if (v34 < 0x100)
        {
          if ((int)v34 >= v30) {
            LOWORD(v33) = v30;
          }
          else {
            LOWORD(v33) = v34;
          }
          goto LABEL_36;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_48;
        }
        return 0xFFFFFFFFLL;
      }
      unsigned int v31 = AV1_Syntax::get_bits(this, "feature_value", v29 + 1);
      int v32 = (((int)(v31 >> v29 << 31) >> 31) & (-2 << v29)) + v31;
      if ((v32 - 256) <= 0xFFFFFDFF)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
LABEL_48:
          *(_DWORD *)buf = 136315394;
          int v52 = "segmentation_params";
          __int16 v53 = 1024;
          int v54 = v32;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", buf, 0x12u);
        }
        return 0xFFFFFFFFLL;
      }
      if (v32 >= v30) {
        LOWORD(v33) = v30;
      }
      else {
        LOWORD(v33) = v32;
      }
      if (v32 < -v30) {
        int v33 = -v30;
      }
LABEL_36:
      uint64_t v4 = *((void *)this + 12);
      *(_WORD *)(v4 + 2 * v27) = v33;
      ++v26;
      ++v23;
      ++v24;
      ++v27;
    }
    while (v26 != 8);
    uint64_t v22 = v50 + 1;
    v25 += 8;
    unsigned int v23 = &segmentation_feature_data_max;
    uint64_t v24 = (unsigned int *)&segmentation_feature_bits;
    if (v50 != 7) {
      continue;
    }
    break;
  }
  int v35 = 0;
  uint64_t v36 = 0;
  *(unsigned char *)(v4 + 492) = 0;
  *(_DWORD *)(v4 + 488) = 0;
  uint64_t v37 = v4 + 493;
  do
  {
    for (unint64_t i = 0; i != 8; ++i)
    {
      if (*(unsigned char *)(v37 + i))
      {
        v35 |= i > 4;
        *(unsigned char *)(v4 + 492) = v35;
        *(_DWORD *)(v4 + 488) = v36;
      }
    }
    ++v36;
    v37 += 8;
  }
  while (v36 != 8);
LABEL_55:
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = *(void *)(v4 + 120);
  *(_DWORD *)(v47 + 516) = *(_DWORD *)(v4 + 488);
  *(unsigned char *)(v47 + 520) = *(unsigned char *)(v4 + 492);
  do
  {
    uint64_t v48 = 8;
    uint64_t v49 = v45;
    do
    {
      *(unsigned char *)(v47 + v49 + 521) = *(unsigned char *)(v4 + v49 + 493);
      uint64_t v4 = *((void *)this + 12);
      uint64_t v47 = *(void *)(v4 + 120);
      *(_WORD *)(v47 + 2 * v49 + 586) = *(_WORD *)(v4 + 2 * v49 + 558);
      ++v49;
      --v48;
    }
    while (v48);
    ++v46;
    v45 += 8;
  }
  while (v46 != 8);
  return 0;
}

uint64_t AV1_Syntax::loop_filter_params(AV1_Syntax *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 12);
  if (*(unsigned char *)(v2 + 162) || *(unsigned char *)(v2 + 156))
  {
    uint64_t result = 0;
    *(void *)(*(void *)(v2 + 120) + 1948) = 0xFFFF00FF00000001;
    *(_WORD *)(*(void *)(*((void *)this + 12) + 120) + 1956) = 0;
    return result;
  }
  uint64_t v4 = *(void *)(v2 + 112);
  uint64_t v5 = (void *)(v2 + 426);
  if (v4)
  {
    *uint64_t v5 = *(void *)(v4 + 1948);
    *(_WORD *)(*((void *)this + 12) + 436) = *(_WORD *)(*(void *)(*((void *)this + 12) + 112) + 1956);
  }
  else
  {
    *uint64_t v5 = 0xFFFF00FF00000001;
    *(_WORD *)(*((void *)this + 12) + 436) = 0;
  }
  unsigned int bits = AV1_Syntax::get_bits(this, "loop_filter_level_0", 6u);
  *(_DWORD *)(*((void *)this + 12) + 396) = bits;
  if (bits >= 0x40)
  {
    unsigned int v7 = bits;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_23;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v8 = AV1_Syntax::get_bits(this, "loop_filter_level_1", 6u);
  unsigned int v7 = v8;
  uint64_t v9 = (_DWORD *)*((void *)this + 12);
  v9[100] = v8;
  if (v8 >= 0x40)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
LABEL_23:
    int v26 = 136315394;
    uint64_t v27 = "loop_filter_params";
    __int16 v28 = 1024;
    unsigned int v29 = v7;
    char v14 = &_os_log_internal;
LABEL_24:
    _os_log_impl(&dword_223977000, v14, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v26, 0x12u);
    return 0xFFFFFFFFLL;
  }
  if ((int)v9[110] >= 2 && v9[99] | v8)
  {
    unsigned int v10 = AV1_Syntax::get_bits(this, "loop_filter_level_2", 6u);
    *(_DWORD *)(*((void *)this + 12) + 404) = v10;
    if (v10 >= 0x40)
    {
      unsigned int v7 = v10;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_23;
    }
    unsigned int v11 = AV1_Syntax::get_bits(this, "loop_filter_level_3", 6u);
    *(_DWORD *)(*((void *)this + 12) + 408) = v11;
    if (v11 >= 0x40)
    {
      unsigned int v7 = v11;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_23;
    }
  }
  unsigned int v12 = AV1_Syntax::get_bits(this, "loop_filter_sharpness", 3u);
  uint64_t v13 = *((void *)this + 12);
  *(_DWORD *)(v13 + 412) = v12;
  if (v12 >= 8)
  {
    unsigned int v7 = v12;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_23;
    }
    return 0xFFFFFFFFLL;
  }
  *(unsigned char *)(v13 + 417) = 0;
  char v15 = AV1_Syntax::get_bits(this, "loop_filter_delta_enabled", 1u);
  uint64_t v16 = *((void *)this + 12);
  *(unsigned char *)(v16 + 416) = v15;
  if (v15)
  {
    char v17 = AV1_Syntax::get_bits(this, "loop_filter_delta_update", 1u);
    uint64_t v16 = *((void *)this + 12);
    *(unsigned char *)(v16 + 417) = v17;
    if (v17)
    {
      for (uint64_t i = 418; i != 426; ++i)
      {
        *(unsigned char *)(*((void *)this + 12) + i) = AV1_Syntax::get_bits(this, "update_ref_delta", 1u);
        if (*(unsigned char *)(*((void *)this + 12) + i) == 1)
        {
          char v19 = AV1_Syntax::get_bits(this, "loop_filter_ref_deltas", 7u);
          *(unsigned char *)(*((void *)this + 12) + i + 8) = ((2 * v19) & 0x80) + v19;
          unsigned int v20 = *(char *)(*((void *)this + 12) + i + 8);
          if (((v20 - 64) & 0x80) == 0)
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            int v26 = 136315394;
            uint64_t v27 = "loop_filter_params";
            __int16 v28 = 1024;
            unsigned int v29 = v20;
            char v14 = &_os_log_internal;
            goto LABEL_24;
          }
        }
      }
      uint64_t v21 = 0;
      char v22 = 1;
      while (1)
      {
        char v23 = v22;
        *(unsigned char *)(*((void *)this + 12) + v21 + 434) = AV1_Syntax::get_bits(this, "update_mode_delta", 1u);
        uint64_t v16 = *((void *)this + 12);
        if (*(unsigned char *)(v16 + v21 + 434) == 1)
        {
          char v24 = AV1_Syntax::get_bits(this, "loop_filter_mode_deltas", 7u);
          *(unsigned char *)(*((void *)this + 12) + v21 + 436) = ((2 * v24) & 0x80) + v24;
          uint64_t v16 = *((void *)this + 12);
          unsigned int v25 = *(char *)(v16 + v21 + 436);
          if (((v25 - 64) & 0x80) == 0) {
            break;
          }
        }
        char v22 = 0;
        uint64_t v21 = 1;
        if ((v23 & 1) == 0) {
          goto LABEL_36;
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 136315394;
        uint64_t v27 = "loop_filter_params";
        __int16 v28 = 1024;
        unsigned int v29 = v25;
        char v14 = &_os_log_internal;
        goto LABEL_24;
      }
      return 0xFFFFFFFFLL;
    }
  }
LABEL_36:
  uint64_t result = 0;
  *(void *)(*(void *)(v16 + 120) + 1948) = *(void *)(v16 + 426);
  *(_WORD *)(*(void *)(*((void *)this + 12) + 120) + 1956) = *(_WORD *)(*((void *)this + 12) + 436);
  return result;
}

uint64_t AV1_Syntax::cdef_params(AV1_Syntax *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(*((void *)this + 12) + 156)) {
    return 0;
  }
  unsigned int bits = AV1_Syntax::get_bits(this, "cdef_damping_minus_3", 2u);
  unsigned int v4 = bits + 3;
  *(_DWORD *)(*((void *)this + 12) + 1380) = bits + 3;
  if (bits >= 4)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
LABEL_5:
    int v17 = 136315394;
    uint64_t v18 = "cdef_params";
    __int16 v19 = 1024;
    unsigned int v20 = v4;
    uint64_t v5 = &_os_log_internal;
LABEL_27:
    _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v17, 0x12u);
    return 0xFFFFFFFFLL;
  }
  unsigned int v6 = AV1_Syntax::get_bits(this, "cdef_bits", 2u);
  unsigned int v4 = v6;
  uint64_t v7 = *((void *)this + 12);
  *(_DWORD *)(v7 + 1384) = v6;
  if (v6 >= 4)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_5;
  }
  uint64_t v8 = 0;
  *(_DWORD *)(v7 + 1388) = 1 << v6;
  while (1)
  {
    unsigned int v9 = AV1_Syntax::get_bits(this, "cdef_y_pri_strength", 4u);
    *(_DWORD *)(*((void *)this + 12) + 4 * v8 + 1392) = v9;
    if (v9 >= 0x10)
    {
      unsigned int v15 = v9;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_26;
    }
    unsigned int v10 = AV1_Syntax::get_bits(this, "cdef_y_sec_strength", 2u);
    uint64_t v11 = *((void *)this + 12);
    *(_DWORD *)(v11 + 4 * v8 + 1456) = v10;
    if (v10 >= 4)
    {
      unsigned int v15 = v10;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_26;
    }
    if (*(int *)(v11 + 440) < 2)
    {
      uint64_t v14 = v11 + 4 * v8;
      *(_DWORD *)(v14 + 1520) = 0;
      *(_DWORD *)(v14 + 1584) = 0;
      goto LABEL_17;
    }
    unsigned int v12 = AV1_Syntax::get_bits(this, "cdef_uv_pri_strength", 4u);
    *(_DWORD *)(*((void *)this + 12) + 4 * v8 + 1520) = v12;
    if (v12 >= 0x10)
    {
      unsigned int v15 = v12;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_26;
    }
    unsigned int v13 = AV1_Syntax::get_bits(this, "cdef_uv_sec_strength", 2u);
    uint64_t v11 = *((void *)this + 12);
    *(_DWORD *)(v11 + 4 * v8 + 1584) = v13;
    if (v13 >= 4) {
      break;
    }
LABEL_17:
    uint64_t result = 0;
    if (++v8 >= 1 << *(_DWORD *)(v11 + 1384)) {
      return result;
    }
  }
  unsigned int v15 = v13;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
LABEL_26:
    int v17 = 136315394;
    uint64_t v18 = "cdef_params";
    __int16 v19 = 1024;
    unsigned int v20 = v15;
    uint64_t v5 = &_os_log_internal;
    goto LABEL_27;
  }
  return 0xFFFFFFFFLL;
}

void AV1_Syntax::lr_params(AV1_Syntax *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 12);
  if (*(unsigned char *)(v2 + 163) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v30 = 136315394;
    unsigned int v31 = "lr_params";
    __int16 v32 = 1024;
    int v33 = 4307;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v30, 0x12u);
    uint64_t v2 = *((void *)this + 12);
  }
  uint64_t v3 = *(unsigned int *)(v2 + 440);
  if (*(unsigned char *)(v2 + 156)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = (int)v3 < 1;
  }
  if (!v4)
  {
    uint64_t v5 = 0;
    int v6 = 1;
    int v7 = 1;
    do
    {
      while (1)
      {
        int bits = AV1_Syntax::get_bits(this, "lr_type", 1u);
        int v9 = AV1_Syntax::get_bits(this, "lr_type", 1u);
        uint64_t v10 = *((void *)this + 12);
        uint64_t v11 = (int *)(v10 + 4 * v5 + 1648);
        int v12 = v5 == 0;
        if (!bits) {
          break;
        }
        int v7 = 0;
        if (v9) {
          int v13 = 2;
        }
        else {
          int v13 = 1;
        }
        *uint64_t v11 = v13;
        v6 &= v12;
        if (++v5 == v3) {
          goto LABEL_24;
        }
      }
      if (v9) {
        int v14 = 3;
      }
      else {
        int v14 = 0;
      }
      *uint64_t v11 = v14;
      if (v9) {
        int v7 = 0;
      }
      else {
        int v12 = -1;
      }
      v6 &= v12;
      ++v5;
    }
    while (v5 != v3);
    if (v7)
    {
      memset_pattern16((void *)(v10 + 1660), &unk_223AD0C30, 4 * v3);
      goto LABEL_39;
    }
LABEL_24:
    int v15 = *(_DWORD *)(*((void *)this + 11) + 28);
    if (v15 != 12 && v15 != 15 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = 136315394;
      unsigned int v31 = "lr_params";
      __int16 v32 = 1024;
      int v33 = 4329;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v30, 0x12u);
      int v15 = *(_DWORD *)(*((void *)this + 11) + 28);
    }
    if (v15 == 15) {
      int v17 = 128;
    }
    else {
      int v17 = 64;
    }
    uint64_t v18 = (int *)(*((void *)this + 12) + 1660);
    uint64_t v19 = v3;
    do
    {
      *v18++ = v17;
      --v19;
    }
    while (v19);
    if (v15 == 15)
    {
      uint64_t v10 = *((void *)this + 12);
      int v20 = *(_DWORD *)(v10 + 1660);
    }
    else
    {
      char v21 = AV1_Syntax::get_bits(this, "lr_unit_shift", 1u);
      uint64_t v10 = *((void *)this + 12);
      int v20 = *(_DWORD *)(v10 + 1660) << v21;
      *(_DWORD *)(v10 + 1660) = v20;
    }
    if (v20 >= 65)
    {
      char v22 = AV1_Syntax::get_bits(this, "lr_unit_shift", 1u);
      uint64_t v10 = *((void *)this + 12);
      *(_DWORD *)(v10 + 1660) <<= v22;
    }
LABEL_39:
    if ((int)v3 < 2)
    {
      if (v3 == 1) {
        *(void *)(v10 + 1652) = 0;
      }
    }
    else
    {
      uint64_t v23 = *((void *)this + 11);
      int v25 = *(_DWORD *)(v23 + 100);
      int v24 = *(_DWORD *)(v23 + 104);
      if (v25 >= v24) {
        int v26 = v24;
      }
      else {
        int v26 = v25;
      }
      int v27 = *(_DWORD *)(v10 + 1660);
      if (v26) {
        BOOL v28 = v6 == 0;
      }
      else {
        BOOL v28 = 0;
      }
      if (v28)
      {
        v27 >>= AV1_Syntax::get_bits(this, "lr_uv_shift", 1u) * v26;
        uint64_t v10 = *((void *)this + 12);
      }
      *(_DWORD *)(v10 + 1664) = v27;
      *(_DWORD *)(v10 + 1668) = v27;
    }
  }
}

void *AV1_Syntax::read_tx_mode(void *this)
{
  uint64_t v1 = this[12];
  if (*(unsigned char *)(v1 + 162))
  {
    *(_DWORD *)(v1 + 164) = 0;
  }
  else
  {
    uint64_t v2 = this;
    this = (void *)AV1_Syntax::get_bits((AV1_Syntax *)this, "tx_mode_select", 1u);
    uint64_t v3 = v2[12];
    if (this) {
      *(_DWORD *)(v3 + 164) = 2;
    }
    else {
      *(_DWORD *)(v3 + 164) = 1;
    }
  }
  return this;
}

void *AV1_Syntax::frame_reference_mode(void *this)
{
  uint64_t v1 = this[12];
  if (*(unsigned char *)(v1 + 2948))
  {
    int v2 = 0;
  }
  else
  {
    uint64_t v3 = this;
    this = (void *)AV1_Syntax::get_bits((AV1_Syntax *)this, "reference_select", 1u);
    int v2 = 2 * (this != 0);
    uint64_t v1 = v3[12];
  }
  *(_DWORD *)(v1 + 72) = v2;
  return this;
}

uint64_t AV1_Syntax::skip_mode_params(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 88);
  uint64_t v2 = *(void *)(this + 96);
  *(void *)(v2 + 96) = -1;
  int v4 = *(_DWORD *)(v1 + 40);
  uint64_t v3 = (_DWORD *)(v1 + 40);
  *(_DWORD *)(v2 + 88) = 0;
  if (v4 && (*(_DWORD *)(v2 + 68) | 2) != 2 && *(_DWORD *)(v2 + 72))
  {
    uint64_t v5 = this;
    uint64_t v6 = 0;
    int v7 = *(_DWORD *)(v2 + 76);
    int v8 = -1;
    int v9 = -1;
    int v10 = -1;
    int v11 = 0x7FFFFFFF;
    do
    {
      uint64_t v12 = *(void *)(v5 + 96);
      uint64_t v13 = *(int *)(v12 + 4 * v6 + 1692);
      if (v13 != -1)
      {
        uint64_t v14 = *(void *)(v12 + 8 * v13 + 1848);
        if (v14)
        {
          int v15 = *(_DWORD *)(v14 + 4);
          this = AV1_Syntax::get_relative_dist(v5, v3, v15, v7);
          if ((this & 0x80000000) != 0)
          {
            if (v10 == -1 || (this = AV1_Syntax::get_relative_dist(v5, v3, v15, v10), (int)this >= 1))
            {
              int v10 = v15;
              int v8 = v6;
            }
          }
          else
          {
            this = AV1_Syntax::get_relative_dist(v5, v3, v15, v7);
            if ((int)this >= 1)
            {
              if (v11 == 0x7FFFFFFF
                || (this = AV1_Syntax::get_relative_dist(v5, v3, v15, v11), (this & 0x80000000) != 0))
              {
                int v11 = v15;
                int v9 = v6;
              }
            }
          }
        }
      }
      ++v6;
    }
    while (v6 != 7);
    if (v8 != -1 && v9 != -1) {
      goto LABEL_31;
    }
    if (v8 != -1 && v9 == -1)
    {
      uint64_t v16 = 0;
      int v17 = -1;
      do
      {
        uint64_t v18 = *(void *)(v5 + 96);
        uint64_t v19 = *(int *)(v18 + 4 * v16 + 1692);
        if (v19 != -1)
        {
          uint64_t v20 = *(void *)(v18 + 8 * v19 + 1848);
          if (v20)
          {
            if (v10 != -1)
            {
              int v21 = *(_DWORD *)(v20 + 4);
              this = AV1_Syntax::get_relative_dist(v5, v3, v21, v10);
              if ((this & 0x80000000) != 0)
              {
                if (v17 == -1 || (this = AV1_Syntax::get_relative_dist(v5, v3, v21, v17), (int)this >= 1))
                {
                  int v17 = v21;
                  int v9 = v16;
                }
              }
            }
          }
        }
        ++v16;
      }
      while (v16 != 7);
      if (v17 != -1)
      {
LABEL_31:
        *(_DWORD *)(v2 + 88) = 1;
        if (v8 >= v9) {
          int v22 = v9;
        }
        else {
          int v22 = v8;
        }
        if (v8 <= v9) {
          int v23 = v9;
        }
        else {
          int v23 = v8;
        }
        *(_DWORD *)(v2 + 96) = v22;
        *(_DWORD *)(v2 + 100) = v23;
      }
    }
  }
  return this;
}

AV1_Syntax *AV1_Syntax::global_motion_params(AV1_Syntax *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 12);
  uint64_t v3 = -308;
  do
  {
    int v4 = (void *)(v2 + v3);
    v4[287] = 0;
    v4[288] = 0x10000;
    v4[289] = 0x1000000000000;
    v4[290] = 0;
    v3 += 44;
  }
  while (v3);
  if (!*(unsigned char *)(v2 + 2948))
  {
    for (uint64_t i = 2029; i != 2337; i += 44)
    {
      uint64_t v6 = *((void *)v1 + 12);
      uint64_t v7 = *(void *)(v6 + 112);
      if (v7) {
        int v8 = (int *)(v7 + i - 1253);
      }
      else {
        int v8 = (int *)&av1_default_warp_params;
      }
      if (!AV1_Syntax::read_global_motion_params(v1, v6 + i - 41, v8)) {
        *(unsigned char *)(*((void *)v1 + 12) + i) = 1;
      }
    }
    uint64_t v9 = *((void *)v1 + 12);
    int v10 = (void *)(*(void *)(v9 + 120) + 732);
    return (AV1_Syntax *)memcpy(v10, (const void *)(v9 + 1944), 0x160uLL);
  }
  return this;
}

uint64_t AV1_Syntax::film_grain_params(AV1_Syntax *this)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 12);
  if (!*(unsigned char *)(*((void *)this + 11) + 113)
    || !*(void *)(v1 + 132)
    || (int bits = AV1_Syntax::get_bits(this, "apply_grain", 1u),
        uint64_t v1 = *((void *)this + 12),
        (*(_DWORD *)(v1 + 2296) = bits) == 0))
  {
    bzero((void *)(v1 + 2296), 0x288uLL);
    return 0;
  }
  unsigned int v4 = AV1_Syntax::get_bits(this, "grain_seed", 0x10u);
  uint64_t v5 = (_DWORD *)*((void *)this + 12);
  v5[575] = v4;
  if (v4 >= 0x10000)
  {
    unsigned int v6 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_16;
    }
    return 0xFFFFFFFFLL;
  }
  if (v5[17] != 1)
  {
    v5[576] = 1;
    v5[736] = *(_DWORD *)(*((void *)this + 11) + 76);
LABEL_14:
    unsigned int v11 = AV1_Syntax::get_bits(this, "num_y_points", 4u);
    unsigned int v6 = v11;
    uint64_t v12 = (_DWORD *)*((void *)this + 12);
    v12[578] = v11;
    if (v11 > 0xE)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
LABEL_16:
        int v63 = 136315394;
        __int16 v64 = "film_grain_params";
        __int16 v65 = 1024;
        unsigned int v66 = v6;
        uint64_t v13 = &_os_log_internal;
LABEL_17:
        _os_log_impl(&dword_223977000, v13, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v63, 0x12u);
      }
      return 0xFFFFFFFFLL;
    }
    if (v11)
    {
      uint64_t v14 = 0;
      while (1)
      {
        unsigned int v15 = AV1_Syntax::get_bits(this, "point_y_value", 8u);
        unsigned int v16 = v15;
        uint64_t v17 = *((void *)this + 12);
        *(_DWORD *)(v17 + 4 * v14 + 2372) = v15;
        if (v15 >= 0x100)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_137;
        }
        if (v14 && *(_DWORD *)(v17 + 4 * v14 + 2368) >= (signed int)v15) {
          return 0xFFFFFFFFLL;
        }
        unsigned int v18 = AV1_Syntax::get_bits(this, "point_y_scaling", 8u);
        uint64_t v12 = (_DWORD *)*((void *)this + 12);
        v12[v14 + 579] = v18;
        if (v18 >= 0x100) {
          break;
        }
        if (++v14 >= (int)v12[578]) {
          goto LABEL_28;
        }
      }
      unsigned int v16 = v18;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_137;
    }
    LODWORD(v14) = 0;
LABEL_28:
    if (*(unsigned char *)(*((void *)this + 11) + 81))
    {
      v12[607] = 0;
    }
    else
    {
      int v23 = AV1_Syntax::get_bits(this, "chroma_scaling_from_luma", 1u);
      uint64_t v12 = (_DWORD *)*((void *)this + 12);
      v12[607] = v23;
      uint64_t v24 = *((void *)this + 11);
      if (!*(unsigned char *)(v24 + 81) && !v23 && (*(_DWORD *)(v24 + 100) != 1 || *(_DWORD *)(v24 + 104) != 1 || v12[578]))
      {
        unsigned int v25 = AV1_Syntax::get_bits(this, "num_cb_points", 4u);
        unsigned int v6 = v25;
        *(_DWORD *)(*((void *)this + 12) + 2432) = v25;
        if (v25 > 0xA)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_16;
        }
        if (v25)
        {
          uint64_t v34 = 0;
          while (1)
          {
            unsigned int v35 = AV1_Syntax::get_bits(this, "point_cb_value", 8u);
            unsigned int v16 = v35;
            uint64_t v36 = *((void *)this + 12);
            *(_DWORD *)(v36 + 4 * v34 + 2436) = v35;
            if (v35 >= 0x100)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              goto LABEL_137;
            }
            if (v34 && *(_DWORD *)(v36 + 4 * v34 + 2432) >= (signed int)v35) {
              return 0xFFFFFFFFLL;
            }
            unsigned int v37 = AV1_Syntax::get_bits(this, "point_cb_scaling", 8u);
            uint64_t v38 = *((void *)this + 12);
            *(_DWORD *)(v38 + 4 * v34 + 2476) = v37;
            if (v37 >= 0x100) {
              break;
            }
            if (++v34 >= *(int *)(v38 + 2432)) {
              goto LABEL_73;
            }
          }
          unsigned int v16 = v37;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
        }
        else
        {
LABEL_73:
          unsigned int v39 = AV1_Syntax::get_bits(this, "num_cr_points", 4u);
          unsigned int v6 = v39;
          uint64_t v40 = *((void *)this + 12);
          *(_DWORD *)(v40 + 2516) = v39;
          if (v39 > 0xA)
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            goto LABEL_16;
          }
          if (!v39)
          {
            LODWORD(v14) = 0;
            LODWORD(v54) = 0;
LABEL_122:
            uint64_t v57 = *((void *)this + 11);
            if (*(_DWORD *)(v57 + 100) == 1 && *(_DWORD *)(v57 + 104) == 1)
            {
              BOOL v58 = *(_DWORD *)(v40 + 2432) == 0;
              char v59 = !v58;
              if (!v54) {
                BOOL v58 = v59;
              }
              if (v58) {
                return 0xFFFFFFFFLL;
              }
            }
LABEL_31:
            unsigned int v19 = AV1_Syntax::get_bits(this, "grain_scaling_minus_8", 2u);
            unsigned int v6 = v19 + 8;
            *(_DWORD *)(*((void *)this + 12) + 2600) = v19 + 8;
            if (v19 >= 4)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              goto LABEL_16;
            }
            unsigned int v21 = AV1_Syntax::get_bits(this, "ar_coeff_lag", 2u);
            unsigned int v6 = v21;
            int v22 = (_DWORD *)*((void *)this + 12);
            v22[651] = v21;
            if (v21 >= 4)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              goto LABEL_16;
            }
            unsigned int v28 = v21 + v21 * v21;
            int v29 = v22[578];
            BOOL v30 = v29 > 0;
            if (v29)
            {
              if (v21)
              {
                uint64_t v31 = 0;
                do
                {
                  int v32 = AV1_Syntax::get_bits(this, "ar_coeffs_y_plus_128", 8u);
                  int v22 = (_DWORD *)*((void *)this + 12);
                  v22[v31 + 652] = v32 - 128;
                  ++v31;
                }
                while (2 * v28 != v31);
              }
              unsigned int v6 = v22[v14 + 652];
              if (v6 != (char)v6)
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  return 0xFFFFFFFFLL;
                }
                goto LABEL_16;
              }
            }
            uint64_t v33 = v30 | (2 * v28);
            if (v22[607])
            {
              if ((int)v33 < 1) {
                goto LABEL_93;
              }
            }
            else
            {
              if (v22[608]) {
                BOOL v41 = (int)v33 <= 0;
              }
              else {
                BOOL v41 = 1;
              }
              if (v41)
              {
LABEL_86:
                if (v22[629]) {
                  BOOL v45 = (int)v33 <= 0;
                }
                else {
                  BOOL v45 = 1;
                }
                if (!v45)
                {
LABEL_90:
                  uint64_t v46 = 0;
                  while (1)
                  {
                    unsigned int v47 = AV1_Syntax::get_bits(this, "ar_coeffs_cr_plus_128", 8u);
                    unsigned int v44 = v47 - 128;
                    *(_DWORD *)(*((void *)this + 12) + 4 * v46 + 2804) = v47 - 128;
                    if (v47 >= 0x100) {
                      break;
                    }
                    if (v33 == ++v46) {
                      goto LABEL_93;
                    }
                  }
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    return 0xFFFFFFFFLL;
                  }
LABEL_97:
                  int v63 = 136315394;
                  __int16 v64 = "film_grain_params";
                  __int16 v65 = 1024;
                  unsigned int v66 = v44;
                  uint64_t v13 = &_os_log_internal;
                  goto LABEL_17;
                }
LABEL_93:
                unsigned int v48 = AV1_Syntax::get_bits(this, "ar_coeff_shift_minus_6", 2u);
                unsigned int v6 = v48 + 6;
                *(_DWORD *)(*((void *)this + 12) + 2904) = v48 + 6;
                if (v48 >= 4)
                {
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    return 0xFFFFFFFFLL;
                  }
                  goto LABEL_16;
                }
                unsigned int v49 = AV1_Syntax::get_bits(this, "grain_scale_shift", 2u);
                uint64_t v50 = (_DWORD *)*((void *)this + 12);
                v50[727] = v49;
                if (v49 >= 4)
                {
                  unsigned int v6 = v49;
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    return 0xFFFFFFFFLL;
                  }
                  goto LABEL_16;
                }
                if (v50[608])
                {
                  *(_DWORD *)(*((void *)this + 12) + 2912) = AV1_Syntax::get_bits(this, "cb_mult", 8u);
                  *(_DWORD *)(*((void *)this + 12) + 2916) = AV1_Syntax::get_bits(this, "cb_luma_mult", 8u);
                  int v55 = AV1_Syntax::get_bits(this, "cb_offset", 9u);
                  uint64_t v50 = (_DWORD *)*((void *)this + 12);
                  v50[730] = v55;
                }
                if (v50[629])
                {
                  unsigned int v56 = AV1_Syntax::get_bits(this, "cr_mult", 8u);
                  *(_DWORD *)(*((void *)this + 12) + 2924) = v56;
                  if (v56 >= 0x100)
                  {
                    unsigned int v6 = v56;
                    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                      return 0xFFFFFFFFLL;
                    }
                    goto LABEL_16;
                  }
                  unsigned int v60 = AV1_Syntax::get_bits(this, "cr_luma_mult", 8u);
                  *(_DWORD *)(*((void *)this + 12) + 2928) = v60;
                  if (v60 >= 0x100)
                  {
                    unsigned int v6 = v60;
                    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                      return 0xFFFFFFFFLL;
                    }
                    goto LABEL_16;
                  }
                  unsigned int v61 = AV1_Syntax::get_bits(this, "cr_offset", 9u);
                  *(_DWORD *)(*((void *)this + 12) + 2932) = v61;
                  if (v61 >= 0x200)
                  {
                    unsigned int v6 = v61;
                    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                      return 0xFFFFFFFFLL;
                    }
                    goto LABEL_16;
                  }
                }
                *(_DWORD *)(*((void *)this + 12) + 2936) = AV1_Syntax::get_bits(this, "overlap_flag", 1u);
                int v62 = AV1_Syntax::get_bits(this, "clip_to_restricted_range", 1u);
                uint64_t result = 0;
                *(_DWORD *)(*((void *)this + 12) + 2940) = v62;
                return result;
              }
            }
            uint64_t v42 = 0;
            do
            {
              unsigned int v43 = AV1_Syntax::get_bits(this, "ar_coeffs_cb_plus_128", 8u);
              unsigned int v44 = v43 - 128;
              int v22 = (_DWORD *)*((void *)this + 12);
              v22[v42 + 676] = v43 - 128;
              if (v43 >= 0x100)
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  return 0xFFFFFFFFLL;
                }
                goto LABEL_97;
              }
              ++v42;
            }
            while (v33 != v42);
            if (!v22[607]) {
              goto LABEL_86;
            }
            if ((int)v33 >= 1) {
              goto LABEL_90;
            }
            goto LABEL_93;
          }
          uint64_t v14 = 0;
          while (1)
          {
            unsigned int v51 = AV1_Syntax::get_bits(this, "point_cr_value", 8u);
            unsigned int v16 = v51;
            uint64_t v52 = *((void *)this + 12);
            *(_DWORD *)(v52 + 4 * v14 + 2520) = v51;
            if (v51 >= 0x100)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              goto LABEL_137;
            }
            if (v14 && *(_DWORD *)(v52 + 4 * v14 + 2516) >= (signed int)v51) {
              return 0xFFFFFFFFLL;
            }
            unsigned int v53 = AV1_Syntax::get_bits(this, "point_cr_scaling", 8u);
            uint64_t v40 = *((void *)this + 12);
            *(_DWORD *)(v40 + 4 * v14 + 2560) = v53;
            if (v53 >= 0x100) {
              break;
            }
            ++v14;
            uint64_t v54 = *(int *)(v40 + 2516);
            if (v14 >= v54) {
              goto LABEL_122;
            }
          }
          unsigned int v16 = v53;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
        }
LABEL_137:
        int v63 = 136315394;
        __int16 v64 = "film_grain_params";
        __int16 v65 = 1024;
        unsigned int v66 = v16;
        uint64_t v13 = &_os_log_internal;
        goto LABEL_17;
      }
    }
    v12[608] = 0;
    v12[629] = 0;
    goto LABEL_31;
  }
  int v8 = AV1_Syntax::get_bits(this, "update_grain", 1u);
  uint64_t v9 = *((void *)this + 12);
  *(_DWORD *)(v9 + 2304) = v8;
  *(_DWORD *)(v9 + 2944) = *(_DWORD *)(*((void *)this + 11) + 76);
  if (v8) {
    goto LABEL_14;
  }
  unsigned int v6 = AV1_Syntax::get_bits(this, "film_grain_params_ref_idx", 3u);
  uint64_t v10 = *((void *)this + 12);
  *(_DWORD *)(v10 + 2308) = v6;
  if (v6 > 7)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_16;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v20 = 0;
  uint64_t result = 0xFFFFFFFFLL;
  while (v6 != *(_DWORD *)(v10 + 1692 + v20))
  {
    v20 += 4;
    if (v20 == 28) {
      return result;
    }
  }
  uint64_t v26 = *(void *)(v10 + 8 * (int)v6 + 1848);
  if (!v26 || !*(unsigned char *)(v26 + 1088)) {
    return 0xFFFFFFFFLL;
  }
  int v27 = *(unsigned __int16 *)(v10 + 2300);
  memcpy((void *)(v10 + 2296), (const void *)(v26 + 1092), 0x28CuLL);
  uint64_t result = 0;
  *(_DWORD *)(*((void *)this + 12) + 2300) = v27;
  return result;
}

uint64_t AV1_Syntax::setup_motion_field_info(uint64_t this)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(this + 88);
  uint64_t v1 = *(void *)(this + 96);
  *(unsigned char *)(v1 + 130) = 0;
  *(_WORD *)(v1 + 128) = 0;
  int v4 = *(_DWORD *)(v2 + 40);
  uint64_t v3 = (_DWORD *)(v2 + 40);
  if (v4)
  {
    uint64_t v5 = (AV1_Syntax *)this;
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(this + 96);
    uint64_t v8 = *(void *)(v7 + 120);
    int v9 = *(_DWORD *)(v8 + 4);
    uint64_t v19 = 0;
    memset(v18, 0, sizeof(v18));
    uint64_t v10 = v8 + 72;
    do
    {
      uint64_t v11 = *(void *)(v10 + 8 * v6);
      *((void *)v18 + v6) = v11;
      if (v11) {
        LODWORD(v11) = *(_DWORD *)(v10 + 4 * v6 - 64);
      }
      v17[v6++] = v11;
    }
    while (v6 != 7);
    if (*(void *)&v18[0])
    {
      if (*(_DWORD *)(*(void *)&v18[0] + 32) == v17[3])
      {
        unsigned int v12 = 0;
        int v13 = 1;
      }
      else
      {
        int v13 = 1;
        if (AV1_Syntax::is_projection_valid((AV1_Syntax *)this, 1u))
        {
          *(unsigned char *)(v7 + 128) = 1;
          unsigned int v12 = 1;
        }
        else
        {
          unsigned int v12 = 0;
        }
      }
    }
    else
    {
      unsigned int v12 = 0;
      int v13 = 2;
    }
    if ((int)AV1_Syntax::get_relative_dist((uint64_t)v5, v3, v17[4], v9) >= 1 && AV1_Syntax::is_projection_valid(v5, 5u))
    {
      uint64_t v14 = *((void *)v5 + 12) + v12++;
      *(unsigned char *)(v14 + 128) = 5;
      --v13;
    }
    if ((int)AV1_Syntax::get_relative_dist((uint64_t)v5, v3, v17[5], v9) >= 1 && AV1_Syntax::is_projection_valid(v5, 6u))
    {
      uint64_t v15 = *((void *)v5 + 12) + v12++;
      *(unsigned char *)(v15 + 128) = 6;
      --v13;
    }
    this = AV1_Syntax::get_relative_dist((uint64_t)v5, v3, v17[6], v9);
    if ((int)this >= 1 && (v13 & 0x80000000) == 0)
    {
      this = AV1_Syntax::is_projection_valid(v5, 7u);
      if (!this)
      {
LABEL_24:
        this = AV1_Syntax::is_projection_valid(v5, 2u);
        if (this) {
          *(unsigned char *)(*((void *)v5 + 12) + v12 + 128) = 2;
        }
        return this;
      }
      uint64_t v16 = *((void *)v5 + 12) + v12++;
      *(unsigned char *)(v16 + 128) = 7;
      --v13;
    }
    if (v13 < 0) {
      return this;
    }
    goto LABEL_24;
  }
  return this;
}

BOOL AV1_Syntax::is_projection_valid(AV1_Syntax *this, unsigned __int8 a2)
{
  unsigned int v2 = a2 - 1;
  if (v2 > 7) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 12);
  uint64_t v4 = *(int *)(v3 + 4 * v2 + 1692);
  if (v4 == -1) {
    return 0;
  }
  uint64_t v5 = *(_DWORD **)(v3 + 8 * v4 + 1848);
  if (!v5) {
    return 0;
  }
  if ((v5[486] | 2) == 2) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 120);
  return v5[179] == *(_DWORD *)(v6 + 716) && v5[180] == *(_DWORD *)(v6 + 720);
}

void AV1_Syntax::tile_set_row(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 96);
  if (*(_DWORD *)(v6 + 768) <= a3 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315394;
    unsigned int v12 = "tile_set_row";
    __int16 v13 = 1024;
    int v14 = 4164;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v11, 0x12u);
    uint64_t v6 = *(void *)(a1 + 96);
  }
  uint64_t v7 = v6 + 4 * a3;
  char v8 = *(_DWORD *)(*(void *)(a1 + 88) + 36);
  int v9 = *(_DWORD *)(v7 + 1084) << v8;
  unsigned int v10 = *(_DWORD *)(v7 + 1088) << v8;
  a2[4] = a3;
  *a2 = v9;
  if (v10 >= *(_DWORD *)(v6 + 388)) {
    unsigned int v10 = *(_DWORD *)(v6 + 388);
  }
  a2[1] = v10;
  if ((int)v10 <= v9 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315394;
    unsigned int v12 = "tile_set_row";
    __int16 v13 = 1024;
    int v14 = 4170;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v11, 0x12u);
  }
}

void AV1_Syntax::tile_set_col(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 96);
  if (*(_DWORD *)(v6 + 764) <= a3 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315394;
    unsigned int v12 = "tile_set_col";
    __int16 v13 = 1024;
    int v14 = 4175;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v11, 0x12u);
    uint64_t v6 = *(void *)(a1 + 96);
  }
  uint64_t v7 = v6 + 4 * a3;
  char v8 = *(_DWORD *)(*(void *)(a1 + 88) + 36);
  int v9 = *(_DWORD *)(v7 + 824) << v8;
  unsigned int v10 = *(_DWORD *)(v7 + 828) << v8;
  a2[5] = a3;
  a2[2] = v9;
  if (v10 >= *(_DWORD *)(v6 + 384)) {
    unsigned int v10 = *(_DWORD *)(v6 + 384);
  }
  a2[3] = v10;
  if ((int)v10 <= v9 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315394;
    unsigned int v12 = "tile_set_col";
    __int16 v13 = 1024;
    int v14 = 4181;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v11, 0x12u);
  }
}

unint64_t AV1_Syntax::av1_read_le(AV1_Syntax *this, unsigned __int8 *a2, int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  AV1_Syntax::skip_bytes(this, a3);
  switch(a3)
  {
    case 1:
      unint64_t result = *a2;
      break;
    case 2:
      unint64_t result = *(unsigned __int16 *)a2;
      break;
    case 3:
      unint64_t result = ((unint64_t)a2[2] << 16) | ((unint64_t)a2[1] << 8) | *a2;
      break;
    case 4:
      unint64_t result = *(unsigned int *)a2;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315394;
        uint64_t v7 = "av1_read_le";
        __int16 v8 = 1024;
        int v9 = 4193;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v6, 0x12u);
      }
      unint64_t result = -1;
      break;
  }
  return result;
}

void AV1_Syntax::skip_bytes(AV1_Syntax *this, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a2 >= 1)
  {
    unsigned int v4 = *((_DWORD *)this + 11);
    if ((v4 & 7) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315394;
      *(void *)int v14 = "skip_bytes";
      *(_WORD *)&v14[8] = 1024;
      int v15 = 203;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v13, 0x12u);
      unsigned int v4 = *((_DWORD *)this + 11);
    }
    int v5 = 8 * a2;
    unsigned int v6 = 8 * a2 - v4;
    if (8 * a2 <= v4)
    {
      int v12 = *((_DWORD *)this + 10) << v5;
    }
    else
    {
      *((void *)this + 5) = 0;
      if ((v6 & 7) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        *(void *)int v14 = "skip_bytes";
        *(_WORD *)&v14[8] = 1024;
        int v15 = 216;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v13, 0x12u);
      }
      unsigned int v4 = 0;
      int v7 = 0;
      unint64_t v8 = *((void *)this + 3);
      int v9 = (unsigned __int8 *)(*((void *)this + 2) + ((v6 >> 3) & 0x1FFFFFFC));
      if ((unint64_t)v9 > v8) {
        int v9 = (unsigned __int8 *)*((void *)this + 3);
      }
      *((void *)this + 2) = v9;
      *((_DWORD *)this + 11) = 0;
      int v10 = 4;
      do
      {
        v7 <<= 8;
        if ((unint64_t)v9 < v8)
        {
          v4 += 8;
          *((_DWORD *)this + 11) = v4;
          *((void *)this + 2) = v9 + 1;
          v7 |= *v9++;
        }
        --v10;
      }
      while (v10);
      unsigned int v11 = v6 & 0x1F;
      if ((~*((_DWORD *)this + 3881) & 0x80001) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 67109376;
        *(_DWORD *)int v14 = v7;
        *(_WORD *)&v14[4] = 1024;
        *(_DWORD *)&v14[6] = v4;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: next_32bits: %x m_bits_left %d\n", (uint8_t *)&v13, 0xEu);
        unsigned int v4 = *((_DWORD *)this + 11);
      }
      if (v11 >= v4) {
        int v5 = v4;
      }
      else {
        int v5 = v11;
      }
      int v12 = v7 << v5;
    }
    *((_DWORD *)this + 10) = v12;
    *((_DWORD *)this + 11) = v4 - v5;
  }
}

uint64_t AV1_Syntax::get_tile_info(AV1_Syntax *this, unsigned __int8 *a2, unint64_t a3, int a4, int a5, _DWORD *a6)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unint64_t v8 = a6 + 19868;
  unsigned int v9 = a6[642];
  a6[3482] = v9;
  unsigned int v10 = a6[641];
  a6[3483] = v10;
  if (!v9)
  {
LABEL_22:
    if (v10)
    {
      unint64_t v26 = 0;
      int v27 = v8 + 65;
      do
      {
        AV1_Syntax::tile_set_col((uint64_t)this, &buf, v26++);
        *int v27 = *((void *)&buf + 1);
        int v27 = (void *)((char *)v27 + 4);
      }
      while (v26 < a6[3483]);
    }
    return 0;
  }
  int v13 = 0;
  int v14 = 0;
  uint64_t v15 = a5;
  uint64_t v16 = a4;
  uint64_t v33 = a6 + 3484;
  uint64_t v31 = a6 + 19868;
  int v32 = a6 + 11676;
  unsigned int v17 = v10;
  while (!v17)
  {
LABEL_17:
    if (++v13 >= v9)
    {
      unint64_t v8 = v31;
      if (v9)
      {
        unint64_t v24 = 0;
        unsigned int v25 = v31;
        do
        {
          AV1_Syntax::tile_set_row((uint64_t)this, &buf, v24++);
          void *v25 = buf;
          unsigned int v25 = (void *)((char *)v25 + 4);
        }
        while (v24 < a6[3482]);
        unsigned int v10 = a6[3483];
      }
      goto LABEL_22;
    }
  }
  int v35 = v13;
  uint64_t v18 = 0;
  uint64_t v19 = v14;
  uint64_t v20 = v15 - v14;
  uint64_t v36 = &v33[2 * v14];
  int v34 = v14;
  unsigned int v21 = &v32[2 * v14];
  while (1)
  {
    if (v19 + v18 < v16 || v19 + v18 > v15) {
      goto LABEL_15;
    }
    if ((unint64_t)a2 >= a3) {
      break;
    }
    if (v20 == v18)
    {
      unint64_t v23 = a3 - (void)a2;
    }
    else
    {
      unint64_t v23 = AV1_Syntax::av1_read_le(this, a2, a6[788]) + 1;
      a2 += (int)a6[788];
      if (v23 > a3 - (unint64_t)a2)
      {
        if ((*((unsigned char *)this + 15526) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = "get_tile_info";
          int v29 = &_os_log_internal;
          BOOL v30 = "AppleAVD: %s: Truncated packet or corrupt tile size.\n";
          goto LABEL_32;
        }
        return 0xFFFFFFFFLL;
      }
    }
    *(void *)&v36[2 * v18] = &a2[-*((void *)this + 1)];
    *(void *)&v21[2 * v18] = v23;
    a2 += v23;
    AV1_Syntax::skip_bytes(this, v23);
    unsigned int v10 = a6[3483];
LABEL_15:
    if (++v18 >= v10)
    {
      int v14 = v34 + v18;
      unsigned int v9 = a6[3482];
      unsigned int v17 = v10;
      int v13 = v35;
      goto LABEL_17;
    }
  }
  if ((*((unsigned char *)this + 15526) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "get_tile_info";
    int v29 = &_os_log_internal;
    BOOL v30 = "AppleAVD: %s: Data ended before all tiles were read.\n";
LABEL_32:
    _os_log_impl(&dword_223977000, v29, OS_LOG_TYPE_DEFAULT, v30, (uint8_t *)&buf, 0xCu);
  }
  return 0xFFFFFFFFLL;
}

void AV1_Syntax::AV1_Syntax(AV1_Syntax *this, int a2)
{
  *(void *)this = &unk_26D73E370;
  *((_DWORD *)this + 62) = 0;
  *((unsigned char *)this + 252) = 0;
  *(_OWORD *)((char *)this + 662) = 0u;
  *(_OWORD *)((char *)this + 678) = 0u;
  *(_OWORD *)((char *)this + 694) = 0u;
  *(_OWORD *)((char *)this + 710) = 0u;
  *(_OWORD *)((char *)this + 726) = 0u;
  *(_OWORD *)((char *)this + 742) = 0u;
  *(_OWORD *)((char *)this + 758) = 0u;
  *(_OWORD *)((char *)this + 774) = 0u;
  *((_DWORD *)this + 445) = 0;
  *((unsigned char *)this + 1784) = 0;
  *((_DWORD *)this + 3058) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 54) = 0u;
  *(_DWORD *)((char *)this + 231) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_DWORD *)((char *)this + 243) = 0;
  *(void *)((char *)this + 236) = 0;
  *((unsigned char *)this + 280) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 32) = 0;
  *((unsigned char *)this + 476) = 0;
  *(_OWORD *)((char *)this + 284) = 0u;
  *(_OWORD *)((char *)this + 444) = 0u;
  *(_OWORD *)((char *)this + 460) = 0u;
  *(_OWORD *)((char *)this + 412) = 0u;
  *(_OWORD *)((char *)this + 428) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *(_OWORD *)((char *)this + 396) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  *(_OWORD *)((char *)this + 316) = 0u;
  *(_OWORD *)((char *)this + 332) = 0u;
  *(_OWORD *)((char *)this + 300) = 0u;
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  *((unsigned char *)this + 496) = 0;
  *(_OWORD *)((char *)this + 500) = 0u;
  *(_OWORD *)((char *)this + 516) = 0u;
  *(_OWORD *)((char *)this + 526) = 0u;
  *((void *)this + 69) = 0;
  *((void *)this + 68) = 0;
  *(void *)((char *)this + 565) = 0;
  *((void *)this + 70) = 0;
  *(void *)((char *)this + 653) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 36) = 0u;
  bzero((char *)this + 792, 0x3D9uLL);
  bzero((char *)this + 1788, 0x4F1uLL);
  bzero((char *)this + 3056, 0x23D6uLL);
  *((_OWORD *)this + 773) = 0u;
  *((_OWORD *)this + 772) = 0u;
  *((_OWORD *)this + 771) = 0u;
  *((_OWORD *)this + 770) = 0u;
  *((_OWORD *)this + 769) = 0u;
  *((_OWORD *)this + 768) = 0u;
  *((_OWORD *)this + 767) = 0u;
  *((_OWORD *)this + 766) = 0u;
  *((_OWORD *)this + 765) = 0u;
  bzero((char *)this + 12392, 0xC40uLL);
  *((_DWORD *)this + 3881) = a2;
  *((void *)this + 1937) = 0x100000000;
  *((_DWORD *)this + 3096) = 0;
}

void AV1_Syntax::~AV1_Syntax(AV1_Syntax *this)
{
}

void AV1_Syntax::Set_Default_Frame_Context_Info(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  *(void *)(a1 + 8 * a3 + 12240) = a2;
  AV1_Syntax::init_coeff_cdfs(a1, a3, *a2);
  uint64_t v5 = *a2;

  AV1_Syntax::init_non_coeff_cdfs(a1, v5);
}

uint64_t AV1_Syntax::init_coeff_cdfs(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v3 = 0;
  unsigned int v4 = (char *)&Default_Txb_Skip_Cdf + 390 * a2;
  uint64_t v5 = a3 + 4588;
  do
  {
    uint64_t v6 = 0;
    int v7 = (__int16 *)v4;
    do
    {
      __int16 v8 = *v7;
      v7 += 3;
      *(_WORD *)(v5 + v6) = v8;
      v6 += 2;
    }
    while (v6 != 26);
    ++v3;
    v4 += 78;
    v5 += 26;
  }
  while (v3 != 5);
  uint64_t v9 = 0;
  unsigned int v10 = (char *)&Default_Eob_Pt_16_Cdf + 48 * a2;
  unsigned int v11 = (void *)(a3 + 4726);
  do
  {
    *(v11 - 1) = *(void *)&v10[v9];
    *unsigned int v11 = *(void *)&v10[v9 + 12];
    v11 += 2;
    v9 += 24;
  }
  while (v9 != 48);
  uint64_t v12 = 0;
  int v13 = (char *)&Default_Eob_Pt_32_Cdf + 56 * a2;
  uint64_t v14 = a3 + 4760;
  do
  {
    *(void *)(v14 - 10) = *(void *)&v13[v12];
    *(_WORD *)(v14 - 2) = *(_WORD *)&v13[v12 + 8];
    *(void *)uint64_t v14 = *(void *)&v13[v12 + 14];
    *(_WORD *)(v14 + 8) = *(_WORD *)&v13[v12 + 22];
    v12 += 28;
    v14 += 20;
  }
  while (v12 != 56);
  uint64_t v15 = 0;
  uint64_t v16 = (char *)&Default_Eob_Pt_64_Cdf + 64 * (unint64_t)a2;
  uint64_t v17 = a3 + 4802;
  do
  {
    *(void *)(v17 - 12) = *(void *)&v16[v15];
    *(_DWORD *)(v17 - 4) = *(_DWORD *)&v16[v15 + 8];
    *(void *)uint64_t v17 = *(void *)&v16[v15 + 16];
    *(_DWORD *)(v17 + 8) = *(_DWORD *)&v16[v15 + 24];
    v15 += 32;
    v17 += 24;
  }
  while (v15 != 64);
  uint64_t v18 = 0;
  uint64_t v19 = (char *)&Default_Eob_Pt_128_Cdf + 72 * a2;
  uint64_t v20 = (void *)(a3 + 4852);
  do
  {
    *(void *)((char *)v20 - 14) = *(void *)&v19[v18];
    *(v20 - 1) = *(void *)&v19[v18 + 6];
    *uint64_t v20 = *(void *)&v19[v18 + 18];
    *(void *)((char *)v20 + 6) = *(void *)&v19[v18 + 24];
    v18 += 36;
    uint64_t v20 = (void *)((char *)v20 + 28);
  }
  while (v18 != 72);
  uint64_t v21 = 0;
  int v22 = (char *)&Default_Eob_Pt_256_Cdf + 80 * a2;
  unint64_t v23 = (_OWORD *)(a3 + 4910);
  do
  {
    *(v23 - 1) = *(_OWORD *)&v22[v21];
    *unint64_t v23 = *(_OWORD *)&v22[v21 + 20];
    v23 += 2;
    v21 += 40;
  }
  while (v21 != 80);
  uint64_t v24 = 0;
  unsigned int v25 = (char *)&Default_Eob_Pt_512_Cdf + 44 * a2;
  *(_OWORD *)(a3 + 4958) = *(_OWORD *)v25;
  *(_WORD *)(a3 + 4974) = *((_WORD *)v25 + 8);
  *(_OWORD *)(a3 + 4976) = *(_OWORD *)(v25 + 22);
  *(_WORD *)(a3 + 4992) = *((_WORD *)v25 + 19);
  unint64_t v26 = (char *)&Default_Eob_Pt_1024_Cdf + 48 * a2;
  *(_OWORD *)(a3 + 4994) = *(_OWORD *)v26;
  *(_DWORD *)(a3 + 5010) = *((_DWORD *)v26 + 4);
  *(_DWORD *)(a3 + 5030) = *((_DWORD *)v26 + 10);
  *(_OWORD *)(a3 + 5014) = *(_OWORD *)(v26 + 24);
  int v27 = (char *)&Default_Eob_Extra_Cdf + 540 * a2;
  uint64_t v28 = a3 + 5034;
  do
  {
    uint64_t v29 = 0;
    uint64_t v30 = v28;
    uint64_t v31 = (__int16 *)v27;
    do
    {
      uint64_t v32 = 0;
      uint64_t v33 = v31;
      do
      {
        __int16 v34 = *v33;
        v33 += 3;
        *(_WORD *)(v30 + v32) = v34;
        v32 += 2;
      }
      while (v32 != 18);
      ++v29;
      v31 += 27;
      v30 += 18;
    }
    while (v29 != 2);
    ++v24;
    v27 += 108;
    v28 += 36;
  }
  while (v24 != 5);
  uint64_t v35 = 0;
  uint64_t v36 = (char *)&Default_Dc_Sign_Cdf + 36 * a2;
  uint64_t v37 = a3 + 5214;
  do
  {
    uint64_t v38 = 0;
    unsigned int v39 = (__int16 *)v36;
    do
    {
      __int16 v40 = *v39;
      v39 += 3;
      *(_WORD *)(v37 + v38) = v40;
      v38 += 2;
    }
    while (v38 != 6);
    ++v35;
    v36 += 18;
    v37 += 6;
  }
  while (v35 != 2);
  uint64_t v41 = 0;
  uint64_t v42 = (char *)&Default_Coeff_Base_Eob_Cdf + 320 * a2;
  uint64_t v43 = a3 + 5226;
  do
  {
    uint64_t v44 = 0;
    uint64_t v45 = v43;
    uint64_t v46 = (int *)v42;
    do
    {
      uint64_t v47 = 0;
      unsigned int v48 = v46;
      do
      {
        int v49 = *v48;
        v48 += 2;
        *(_DWORD *)(v45 + v47) = v49;
        v47 += 4;
      }
      while (v47 != 16);
      ++v44;
      v46 += 8;
      v45 += 16;
    }
    while (v44 != 2);
    ++v41;
    v42 += 64;
    v43 += 32;
  }
  while (v41 != 5);
  uint64_t v50 = 0;
  unsigned int v51 = (char *)&Default_Coeff_Base_Cdf + 4200 * a2;
  uint64_t v52 = a3 + 6646;
  do
  {
    uint64_t v53 = 0;
    uint64_t v54 = v52;
    int v55 = v51;
    do
    {
      uint64_t v56 = 0;
      uint64_t v57 = v55;
      do
      {
        uint64_t v58 = v54 + v56;
        *(_DWORD *)uint64_t v58 = *(_DWORD *)v57;
        uint64_t result = *((unsigned __int16 *)v57 + 2);
        *(_WORD *)(v58 + 4) = result;
        v57 += 10;
        v56 += 6;
      }
      while (v56 != 252);
      ++v53;
      v55 += 420;
      v54 += 252;
    }
    while (v53 != 2);
    ++v50;
    v51 += 840;
    v52 += 504;
  }
  while (v50 != 5);
  uint64_t v60 = 0;
  unsigned int v61 = (char *)&Default_Coeff_Br_Cdf + 2100 * a2;
  uint64_t v62 = a3 + 5386;
  do
  {
    uint64_t v63 = 0;
    uint64_t v64 = v62;
    __int16 v65 = v61;
    do
    {
      uint64_t v66 = 0;
      uint64_t v67 = v65;
      do
      {
        uint64_t v68 = v64 + v66;
        *(_DWORD *)uint64_t v68 = *(_DWORD *)v67;
        *(_WORD *)(v68 + 4) = *((_WORD *)v67 + 2);
        v67 += 10;
        v66 += 6;
      }
      while (v66 != 126);
      ++v63;
      v65 += 210;
      v64 += 126;
    }
    while (v63 != 2);
    ++v60;
    v61 += 420;
    v62 += 252;
  }
  while (v60 != 5);
  return result;
}

void AV1_Syntax::init_non_coeff_cdfs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  unsigned int v4 = (void *)(a2 + 1146);
  uint64_t v5 = &Default_Y_Mode_Cdf;
  do
  {
    uint64_t v6 = a2 + v3;
    *(_OWORD *)uint64_t v6 = *v5;
    *(void *)(v6 + 16) = *((void *)v5 + 2);
    uint64_t v5 = (long long *)((char *)v5 + 28);
    v3 += 24;
  }
  while (v3 != 96);
  int v7 = &Default_Uv_Mode_Cdf;
  for (uint64_t i = 96; i != 408; i += 24)
  {
    uint64_t v9 = a2 + i;
    *(_OWORD *)uint64_t v9 = *v7;
    *(void *)(v9 + 16) = *((void *)v7 + 2);
    int v7 = (long long *)((char *)v7 + 30);
  }
  uint64_t v10 = 0;
  unsigned int v11 = &xmmword_223AD8DE2;
  do
  {
    uint64_t v12 = (long long *)(a2 + 408 + v10);
    *uint64_t v12 = *v11;
    *(long long *)((char *)v12 + 10) = *(long long *)((char *)v11 + 10);
    unsigned int v11 = (long long *)((char *)v11 + 30);
    v10 += 26;
  }
  while (v10 != 338);
  uint64_t v13 = 0;
  uint64_t v14 = &Default_Angle_Delta_Cdf;
  do
  {
    uint64_t v15 = a2 + 746 + v13;
    *(void *)uint64_t v15 = *v14;
    *(_DWORD *)(v15 + 8) = *((_DWORD *)v14 + 2);
    v14 += 2;
    v13 += 12;
  }
  while (v13 != 96);
  uint64_t v16 = 0;
  *(_WORD *)(a2 + 842) = 2237;
  uint64_t v17 = &Default_Partition_W8_Cdf;
  do
  {
    uint64_t v18 = a2 + 844 + v16;
    *(_DWORD *)uint64_t v18 = *v17;
    *(_WORD *)(v18 + 4) = *((_WORD *)v17 + 2);
    uint64_t v17 = (int *)((char *)v17 + 10);
    v16 += 6;
  }
  while (v16 != 24);
  uint64_t v19 = 0;
  uint64_t v20 = &Default_Partition_W16_Cdf;
  do
  {
    uint64_t v21 = a2 + 868 + v19;
    *(_OWORD *)uint64_t v21 = *v20;
    *(_WORD *)(v21 + 16) = *((_WORD *)v20 + 8);
    uint64_t v20 = (long long *)((char *)v20 + 22);
    v19 += 18;
  }
  while (v19 != 72);
  uint64_t v22 = 0;
  unint64_t v23 = &Default_Partition_W32_Cdf;
  do
  {
    uint64_t v24 = a2 + 940 + v22;
    *(_OWORD *)uint64_t v24 = *v23;
    *(_WORD *)(v24 + 16) = *((_WORD *)v23 + 8);
    unint64_t v23 = (long long *)((char *)v23 + 22);
    v22 += 18;
  }
  while (v22 != 72);
  uint64_t v25 = 0;
  unint64_t v26 = &Default_Partition_W64_Cdf;
  do
  {
    uint64_t v27 = a2 + 1012 + v25;
    *(_OWORD *)uint64_t v27 = *v26;
    *(_WORD *)(v27 + 16) = *((_WORD *)v26 + 8);
    unint64_t v26 = (long long *)((char *)v26 + 22);
    v25 += 18;
  }
  while (v25 != 72);
  uint64_t v28 = 0;
  uint64_t v29 = &Default_Partition_W128_Cdf;
  do
  {
    uint64_t v30 = (uint64_t *)(a2 + 1084 + v28);
    *uint64_t v30 = *v29;
    *(uint64_t *)((char *)v30 + 6) = *(uint64_t *)((char *)v29 + 6);
    uint64_t v29 = (uint64_t *)((char *)v29 + 18);
    v28 += 14;
  }
  while (v28 != 56);
  uint64_t v31 = 0;
  uint64_t v32 = &Default_Tx_8x8_Cdf;
  do
  {
    __int16 v33 = *v32;
    v32 += 3;
    *(_WORD *)(a2 + 1140 + v31) = v33;
    v31 += 2;
  }
  while (v31 != 6);
  uint64_t v34 = 0;
  *unsigned int v4 = 0xA2450100A245010;
  *(void *)(a2 + 1154) = 0x44B44D460780370BLL;
  *(void *)(a2 + 1162) = 0x1BFE211244B44D46;
  *(void *)(a2 + 1170) = 0x532D696A532D696ALL;
  uint64_t v35 = &Default_Txfm_Split_Cdf;
  *(_DWORD *)(a2 + 1178) = 655965789;
  do
  {
    __int16 v36 = *v35;
    v35 += 3;
    *(_WORD *)(a2 + 1182 + v34) = v36;
    v34 += 2;
  }
  while (v34 != 42);
  uint64_t v37 = 0;
  *(void *)(a2 + 1224) = 0xC8A3CC54E185D0BLL;
  uint64_t v38 = &Default_Filter_Intra_Cdf;
  do
  {
    __int16 v39 = *v38;
    v38 += 3;
    *(_WORD *)(a2 + 1232 + v37) = v39;
    v37 += 2;
  }
  while (v37 != 44);
  uint64_t v40 = 0;
  uint64_t v41 = &Default_Segment_Id_Cdf;
  do
  {
    uint64_t v42 = (uint64_t *)(a2 + 1276 + v40);
    *uint64_t v42 = *v41;
    *(uint64_t *)((char *)v42 + 6) = *(uint64_t *)((char *)v41 + 6);
    uint64_t v41 = (uint64_t *)((char *)v41 + 18);
    v40 += 14;
  }
  while (v40 != 42);
  uint64_t v43 = 0;
  uint64_t v44 = &Default_Segment_Id_Predicted_Cdf;
  do
  {
    __int16 v45 = *v44;
    v44 += 3;
    *(_WORD *)(a2 + 1318 + v43) = v45;
    v43 += 2;
  }
  while (v43 != 6);
  for (uint64_t j = 0; j != 8; j += 4)
    memset_pattern16((void *)(a2 + 1324 + j), &unk_223AD0C40, 4uLL);
  for (uint64_t k = 0; k != 8; k += 4)
    memset_pattern16((void *)(a2 + 1332 + k), &unk_223AD0C50, 4uLL);
  for (uint64_t m = 0; m != 8; m += 4)
    memset_pattern16((void *)(a2 + 1340 + m), &unk_223AD0C50, 4uLL);
  uint64_t v49 = 0;
  uint64_t v50 = a2 + 1348;
  do
  {
    uint64_t v51 = 0;
    uint64_t v52 = v50;
    do
    {
      uint64_t v53 = 0;
      uint64_t v54 = &Default_Mv_Bit_Cdf;
      do
      {
        __int16 v55 = *v54;
        v54 += 3;
        *(_WORD *)(v52 + v53) = v55;
        v53 += 2;
      }
      while (v53 != 20);
      ++v51;
      v52 += 20;
    }
    while (v51 != 2);
    ++v49;
    v50 += 40;
  }
  while (v49 != 2);
  for (uint64_t n = 0; n != 8; n += 4)
    memset_pattern16((void *)(a2 + 1428 + n), &unk_223AD0C60, 4uLL);
  uint64_t v57 = 0;
  uint64_t v58 = &Default_New_Mv_Cdf;
  do
  {
    __int16 v59 = *v58;
    v58 += 3;
    *(_WORD *)(a2 + 1436 + v57) = v59;
    v57 += 2;
  }
  while (v57 != 12);
  uint64_t v60 = 0;
  unsigned int v61 = &Default_Zero_Mv_Cdf;
  do
  {
    __int16 v62 = *v61;
    v61 += 3;
    *(_WORD *)(a2 + 1448 + v60) = v62;
    v60 += 2;
  }
  while (v60 != 4);
  uint64_t v63 = 0;
  uint64_t v64 = &Default_Ref_Mv_Cdf;
  do
  {
    __int16 v65 = *v64;
    v64 += 3;
    *(_WORD *)(a2 + 1452 + v63) = v65;
    v63 += 2;
  }
  while (v63 != 12);
  uint64_t v66 = 0;
  uint64_t v67 = &Default_Drl_Mode_Cdf;
  do
  {
    __int16 v68 = *v67;
    v67 += 3;
    *(_WORD *)(a2 + 1464 + v66) = v68;
    v66 += 2;
  }
  while (v66 != 6);
  uint64_t v69 = 0;
  *(void *)((char *)v4 + 324) = 0x185631263EEA7CDALL;
  uint64_t v70 = &Default_Comp_Mode_Cdf;
  do
  {
    __int16 v71 = *v70;
    v70 += 3;
    *(_WORD *)(a2 + 1478 + v69) = v71;
    v69 += 2;
  }
  while (v69 != 10);
  uint64_t v72 = 0;
  uint64_t v73 = &Default_Skip_Mode_Cdf;
  do
  {
    __int16 v74 = *v73;
    v73 += 3;
    *(_WORD *)(a2 + 1488 + v72) = v74;
    v72 += 2;
  }
  while (v72 != 6);
  uint64_t v75 = 0;
  unsigned int v76 = &Default_Skip_Cdf;
  do
  {
    __int16 v77 = *v76;
    v76 += 3;
    *(_WORD *)(a2 + 1494 + v75) = v77;
    v75 += 2;
  }
  while (v75 != 6);
  uint64_t v78 = 0;
  uint64_t v79 = a2 + 1500;
  unsigned int v80 = &Default_Comp_Ref_Cdf;
  do
  {
    uint64_t v81 = 0;
    uint64_t v82 = v80;
    do
    {
      __int16 v83 = *v82;
      v82 += 3;
      *(_WORD *)(v79 + v81) = v83;
      v81 += 2;
    }
    while (v81 != 6);
    ++v78;
    v80 += 9;
    v79 += 6;
  }
  while (v78 != 3);
  uint64_t v84 = 0;
  uint64_t v85 = a2 + 1518;
  uint64_t v86 = &Default_Comp_Bwd_Ref_Cdf;
  do
  {
    uint64_t v87 = 0;
    int v88 = v86;
    do
    {
      __int16 v89 = *v88;
      v88 += 3;
      *(_WORD *)(v85 + v87) = v89;
      v87 += 2;
    }
    while (v87 != 4);
    ++v84;
    v86 += 6;
    v85 += 4;
  }
  while (v84 != 3);
  uint64_t v90 = 0;
  uint64_t v91 = a2 + 1530;
  int v92 = &Default_Single_Ref_Cdf;
  do
  {
    uint64_t v93 = 0;
    uint64_t v94 = v92;
    do
    {
      __int16 v95 = *v94;
      v94 += 3;
      *(_WORD *)(v91 + v93) = v95;
      v93 += 2;
    }
    while (v93 != 12);
    ++v90;
    v92 += 18;
    v91 += 12;
  }
  while (v90 != 3);
  uint64_t v96 = 0;
  uint64_t v97 = &Default_Compound_Mode_Cdf;
  do
  {
    uint64_t v98 = (uint64_t *)(a2 + 1566 + v96);
    *uint64_t v98 = *v97;
    *(uint64_t *)((char *)v98 + 6) = *(uint64_t *)((char *)v97 + 6);
    uint64_t v97 = (uint64_t *)((char *)v97 + 18);
    v96 += 14;
  }
  while (v96 != 112);
  uint64_t v99 = 0;
  int v100 = &Default_Interp_Filter_Cdf;
  do
  {
    int v101 = *v100;
    v100 += 2;
    *(_DWORD *)(a2 + 1678 + v99) = v101;
    v99 += 4;
  }
  while (v99 != 64);
  uint64_t v102 = 0;
  int v103 = &Default_Motion_Mode_Cdf;
  do
  {
    int v104 = *v103;
    v103 += 2;
    *(_DWORD *)(a2 + 1742 + v102) = v104;
    v102 += 4;
  }
  while (v102 != 88);
  uint64_t v105 = 0;
  *(_WORD *)(a2 + 1834) = 13440;
  *(_DWORD *)(a2 + 1830) = 1409314816;
  *(_DWORD *)(a2 + 1836) = 1409314816;
  *(_WORD *)(a2 + 1840) = 13440;
  do
  {
    uint64_t v106 = a2 + v105 + 1842;
    *(_OWORD *)uint64_t v106 = Default_Mv_Class_Cdf;
    *(_DWORD *)(v106 + 16) = 65542;
    uint64_t v107 = a2 + v105 + 1862;
    *(_DWORD *)(v107 + 16) = 65542;
    *(_OWORD *)uint64_t v107 = unk_223AD9648;
    v105 += 40;
  }
  while (v105 != 80);
  uint64_t v108 = 0;
  uint64_t v109 = a2 + 1922;
  do
  {
    uint64_t v110 = 0;
    uint64_t v111 = &Default_Mv_Class0_Fr_Cdf;
    do
    {
      uint64_t v112 = v109 + v110;
      *(_DWORD *)uint64_t v112 = *v111;
      *(_WORD *)(v112 + 4) = *((_WORD *)v111 + 2);
      *(_DWORD *)(v112 + 6) = *(int *)((char *)v111 + 10);
      *(_WORD *)(v112 + 10) = *((_WORD *)v111 + 7);
      v110 += 12;
      v111 += 5;
    }
    while (v110 != 24);
    ++v108;
    v109 += 24;
  }
  while (v108 != 2);
  for (iuint64_t i = 0; ii != 24; ii += 12)
  {
    uint64_t v114 = a2 + ii;
    *(_WORD *)(v114 + 1974) = 11520;
    *(_DWORD *)(a2 + ii + 1970) = 1006657536;
    *(_DWORD *)(v114 + 1976) = 1006657536;
    *(_WORD *)(v114 + 1980) = 11520;
  }
  uint64_t v115 = 0;
  uint64_t v116 = &Default_Palette_Y_Size_Cdf;
  do
  {
    uint64_t v117 = a2 + 1994 + v115;
    *(void *)uint64_t v117 = *v116;
    *(_DWORD *)(v117 + 8) = *((_DWORD *)v116 + 2);
    v116 += 2;
    v115 += 12;
  }
  while (v115 != 84);
  uint64_t v118 = 0;
  uint64_t v119 = &Default_Palette_Uv_Size_Cdf;
  do
  {
    uint64_t v120 = a2 + 2078 + v118;
    *(void *)uint64_t v120 = *v119;
    *(_DWORD *)(v120 + 8) = *((_DWORD *)v119 + 2);
    v119 += 2;
    v118 += 12;
  }
  while (v118 != 84);
  uint64_t v121 = 0;
  int v122 = &Default_Palette_Size_2_Y_Color_Cdf;
  do
  {
    __int16 v123 = *v122;
    v122 += 3;
    *(_WORD *)(a2 + 2162 + v121) = v123;
    v121 += 2;
  }
  while (v121 != 10);
  uint64_t v124 = 0;
  BOOL v125 = &Default_Palette_Size_3_Y_Color_Cdf;
  do
  {
    int v126 = *v125;
    v125 += 2;
    *(_DWORD *)(a2 + 2172 + v124) = v126;
    v124 += 4;
  }
  while (v124 != 20);
  uint64_t v127 = 0;
  int v128 = &Default_Palette_Size_4_Y_Color_Cdf;
  do
  {
    uint64_t v129 = a2 + 2192 + v127;
    *(_DWORD *)uint64_t v129 = *v128;
    *(_WORD *)(v129 + 4) = *((_WORD *)v128 + 2);
    int v128 = (int *)((char *)v128 + 10);
    v127 += 6;
  }
  while (v127 != 30);
  uint64_t v130 = 0;
  unsigned int v131 = &Default_Palette_Size_5_Y_Color_Cdf;
  do
  {
    uint64_t v132 = *v131;
    unsigned int v131 = (uint64_t *)((char *)v131 + 12);
    *(void *)(a2 + 2222 + v130) = v132;
    v130 += 8;
  }
  while (v130 != 40);
  uint64_t v133 = 0;
  int v134 = &Default_Palette_Size_6_Y_Color_Cdf;
  do
  {
    uint64_t v135 = a2 + 2262 + v133;
    *(void *)uint64_t v135 = *v134;
    *(_WORD *)(v135 + 8) = *((_WORD *)v134 + 4);
    int v134 = (uint64_t *)((char *)v134 + 14);
    v133 += 10;
  }
  while (v133 != 50);
  uint64_t v136 = 0;
  int v137 = &Default_Palette_Size_7_Y_Color_Cdf;
  do
  {
    uint64_t v138 = a2 + 2312 + v136;
    *(void *)uint64_t v138 = *v137;
    *(_DWORD *)(v138 + 8) = *((_DWORD *)v137 + 2);
    v137 += 2;
    v136 += 12;
  }
  while (v136 != 60);
  uint64_t v139 = 0;
  uint64_t v140 = &Default_Palette_Size_8_Y_Color_Cdf;
  do
  {
    uint64_t v141 = (uint64_t *)(a2 + 2372 + v139);
    *uint64_t v141 = *v140;
    *(uint64_t *)((char *)v141 + 6) = *(uint64_t *)((char *)v140 + 6);
    uint64_t v140 = (uint64_t *)((char *)v140 + 18);
    v139 += 14;
  }
  while (v139 != 70);
  uint64_t v142 = 0;
  int v143 = &Default_Palette_Size_2_Uv_Color_Cdf;
  do
  {
    __int16 v144 = *v143;
    v143 += 3;
    *(_WORD *)(a2 + 2442 + v142) = v144;
    v142 += 2;
  }
  while (v142 != 10);
  uint64_t v145 = 0;
  int v146 = &Default_Palette_Size_3_Uv_Color_Cdf;
  do
  {
    int v147 = *v146;
    v146 += 2;
    *(_DWORD *)(a2 + 2452 + v145) = v147;
    v145 += 4;
  }
  while (v145 != 20);
  uint64_t v148 = 0;
  uint64_t v149 = &Default_Palette_Size_4_Uv_Color_Cdf;
  do
  {
    uint64_t v150 = a2 + 2472 + v148;
    *(_DWORD *)uint64_t v150 = *v149;
    *(_WORD *)(v150 + 4) = *((_WORD *)v149 + 2);
    uint64_t v149 = (int *)((char *)v149 + 10);
    v148 += 6;
  }
  while (v148 != 30);
  uint64_t v151 = 0;
  __int16 v152 = &Default_Palette_Size_5_Uv_Color_Cdf;
  do
  {
    uint64_t v153 = *v152;
    __int16 v152 = (uint64_t *)((char *)v152 + 12);
    *(void *)(a2 + 2502 + v151) = v153;
    v151 += 8;
  }
  while (v151 != 40);
  uint64_t v154 = 0;
  signed int v155 = &Default_Palette_Size_6_Uv_Color_Cdf;
  do
  {
    uint64_t v156 = a2 + 2542 + v154;
    *(void *)uint64_t v156 = *v155;
    *(_WORD *)(v156 + 8) = *((_WORD *)v155 + 4);
    signed int v155 = (uint64_t *)((char *)v155 + 14);
    v154 += 10;
  }
  while (v154 != 50);
  uint64_t v157 = 0;
  unsigned int v158 = &Default_Palette_Size_7_Uv_Color_Cdf;
  do
  {
    uint64_t v159 = a2 + 2592 + v157;
    *(void *)uint64_t v159 = *v158;
    *(_DWORD *)(v159 + 8) = *((_DWORD *)v158 + 2);
    v158 += 2;
    v157 += 12;
  }
  while (v157 != 60);
  uint64_t v160 = 0;
  int v161 = &Default_Palette_Size_8_Uv_Color_Cdf;
  do
  {
    uint64_t v162 = (uint64_t *)(a2 + 2652 + v160);
    *uint64_t v162 = *v161;
    *(uint64_t *)((char *)v162 + 6) = *(uint64_t *)((char *)v161 + 6);
    int v161 = (uint64_t *)((char *)v161 + 18);
    v160 += 14;
  }
  while (v160 != 70);
  uint64_t v163 = 0;
  uint64_t v164 = a2 + 2722;
  unsigned int v165 = &Default_Palette_Y_Mode_Cdf;
  do
  {
    uint64_t v166 = 0;
    uint64_t v167 = v165;
    do
    {
      __int16 v168 = *v167;
      v167 += 3;
      *(_WORD *)(v164 + v166) = v168;
      v166 += 2;
    }
    while (v166 != 6);
    ++v163;
    v165 += 9;
    v164 += 6;
  }
  while (v163 != 7);
  uint64_t v169 = 0;
  int v170 = &Default_Palette_Uv_Mode_Cdf;
  do
  {
    __int16 v171 = *v170;
    v170 += 3;
    *(_WORD *)(a2 + 2764 + v169) = v171;
    v169 += 2;
  }
  while (v169 != 4);
  uint64_t v172 = 0;
  *(_WORD *)(a2 + 2772) = 91;
  *(_DWORD *)(a2 + 2768) = 42471936;
  *(_WORD *)(a2 + 2778) = 91;
  *(_DWORD *)(a2 + 2774) = 42471936;
  uint64_t v173 = &Default_Delta_Lf_Multi_Cdf;
  do
  {
    uint64_t v174 = a2 + 2780 + v172;
    *(_DWORD *)uint64_t v174 = *v173;
    *(_WORD *)(v174 + 4) = *((_WORD *)v173 + 2);
    uint64_t v173 = (int *)((char *)v173 + 10);
    v172 += 6;
  }
  while (v172 != 24);
  uint64_t v175 = 0;
  uint64_t v176 = a2 + 2804;
  int v177 = &Default_Intra_Tx_Type_Set1_Cdf;
  do
  {
    uint64_t v178 = 0;
    int v179 = v177;
    do
    {
      uint64_t v180 = v176 + v178;
      *(void *)uint64_t v180 = *v179;
      *(_DWORD *)(v180 + 8) = *((_DWORD *)v179 + 2);
      v179 += 2;
      v178 += 12;
    }
    while (v178 != 156);
    ++v175;
    v177 += 26;
    v176 += 156;
  }
  while (v175 != 2);
  uint64_t v181 = 0;
  uint64_t v182 = a2 + 3116;
  uint64_t v183 = &Default_Intra_Tx_Type_Set2_Cdf;
  do
  {
    uint64_t v184 = 0;
    uint64_t v185 = v183;
    do
    {
      uint64_t v186 = *v185;
      uint64_t v185 = (uint64_t *)((char *)v185 + 12);
      *(void *)(v182 + v184) = v186;
      v184 += 8;
    }
    while (v184 != 104);
    ++v181;
    uint64_t v183 = (uint64_t *)((char *)v183 + 156);
    v182 += 104;
  }
  while (v181 != 3);
  uint64_t v187 = 0;
  *(_OWORD *)(a2 + 3488) = Default_Inter_Tx_Type_Set2_Cdf;
  *(void *)(a2 + 3502) = 0x8BF1092181D21E7;
  *(_OWORD *)(a2 + 3428) = Default_Inter_Tx_Type_Set1_Cdf;
  *(_OWORD *)(a2 + 3442) = *(long long *)((char *)&Default_Inter_Tx_Type_Set1_Cdf + 14);
  *(_OWORD *)(a2 + 3458) = unk_223AD9F16;
  *(_OWORD *)(a2 + 3472) = xmmword_223AD9F24;
  *(void *)((char *)v4 + 2364) = 0x7D1478326FB94000;
  uint64_t v188 = &Default_Compound_Idx_Cdf;
  do
  {
    __int16 v189 = *v188;
    v188 += 3;
    *(_WORD *)(a2 + 3518 + v187) = v189;
    v187 += 2;
  }
  while (v187 != 12);
  uint64_t v190 = 0;
  int v191 = &Default_Comp_Group_Idx_Cdf;
  do
  {
    __int16 v192 = *v191;
    v191 += 3;
    *(_WORD *)(a2 + 3530 + v190) = v192;
    v190 += 2;
  }
  while (v190 != 12);
  uint64_t v193 = 0;
  uint64_t v194 = &Default_Compound_Type_Cdf;
  do
  {
    __int16 v195 = *v194;
    v194 += 3;
    *(_WORD *)(a2 + 3542 + v193) = v195;
    v193 += 2;
  }
  while (v193 != 44);
  uint64_t v196 = 0;
  uint64_t v197 = &word_223ADA024;
  do
  {
    __int16 v198 = *v197;
    v197 += 3;
    *(_WORD *)(a2 + 3586 + v196) = v198;
    v196 += 2;
  }
  while (v196 != 6);
  uint64_t v199 = 0;
  int v200 = &dword_223ADA040;
  do
  {
    uint64_t v201 = a2 + 3592 + v199;
    *(_DWORD *)uint64_t v201 = *v200;
    *(_WORD *)(v201 + 4) = *((_WORD *)v200 + 2);
    int v200 = (int *)((char *)v200 + 10);
    v199 += 6;
  }
  while (v199 != 18);
  uint64_t v202 = 0;
  int v203 = &Default_Wedge_Index_Cdf;
  do
  {
    uint64_t v204 = (long long *)(a2 + 3610 + v202);
    *uint64_t v204 = *v203;
    *(long long *)((char *)v204 + 14) = *(long long *)((char *)v203 + 14);
    int v203 = (long long *)((char *)v203 + 34);
    v202 += 30;
  }
  while (v202 != 660);
  uint64_t v205 = 0;
  uint64_t v206 = &Default_Wedge_Inter_Intra_Cdf;
  do
  {
    __int16 v207 = *v206;
    v206 += 3;
    *(_WORD *)(a2 + 4270 + v205) = v207;
    v205 += 2;
  }
  while (v205 != 44);
  uint64_t v208 = 0;
  uint64_t v209 = &Default_Use_Obmc_Cdf;
  do
  {
    __int16 v210 = *v209;
    v209 += 3;
    *(_WORD *)(a2 + 4314 + v208) = v210;
    v208 += 2;
  }
  while (v208 != 44);
  uint64_t v211 = 0;
  int v212 = &Default_Comp_Ref_Type_Cdf;
  do
  {
    __int16 v213 = *v212;
    v212 += 3;
    *(_WORD *)(a2 + 4358 + v211) = v213;
    v211 += 2;
  }
  while (v211 != 10);
  uint64_t v214 = 0;
  uint64_t v215 = a2 + 4368;
  uint64_t v216 = &Default_Uni_Comp_Ref_Cdf;
  do
  {
    uint64_t v217 = 0;
    uint64_t v218 = v216;
    do
    {
      __int16 v219 = *v218;
      v218 += 3;
      *(_WORD *)(v215 + v217) = v219;
      v217 += 2;
    }
    while (v217 != 6);
    ++v214;
    v216 += 9;
    v215 += 6;
  }
  while (v214 != 3);
  uint64_t v220 = 0;
  *(void *)(a2 + 4386) = 0x381B4BE477B57A76;
  *(void *)(a2 + 4392) = 0x1DA114916A4381BLL;
  int v221 = &Default_Cfl_Alpha_Cdf;
  do
  {
    uint64_t v222 = (long long *)(a2 + 4400 + v220);
    *uint64_t v222 = *v221;
    *(long long *)((char *)v222 + 14) = *(long long *)((char *)v221 + 14);
    int v221 = (long long *)((char *)v221 + 34);
    v220 += 30;
  }
  while (v220 != 180);
  *(void *)(a2 + 4580) = 0x27CB5B3B3E2952CELL;
}

uint64_t AV1_Syntax::Get_Available_Bits(AV1_Syntax *this)
{
  unint64_t v1 = *((void *)this + 2);
  unint64_t v2 = *((void *)this + 3);
  if (v1 >= v2) {
    return *((unsigned int *)this + 11);
  }
  else {
    return (*((_DWORD *)this + 11) + 8 * (v2 - v1));
  }
}

uint64_t AV1_Syntax::Get_Cur_Frame_Context_Info(AV1_Syntax *this)
{
  return *((void *)this + 1534);
}

BOOL AV1_Syntax::Get_Frame_Size_Override_Flag(AV1_Syntax *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 12);
  if (v1) {
    return *(unsigned char *)(v1 + 1680) != 0;
  }
  BOOL v3 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v3)
  {
    int v4 = 136315138;
    uint64_t v5 = "Get_Frame_Size_Override_Flag";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): NULL uncompressed header!\n", (uint8_t *)&v4, 0xCu);
    return 0;
  }
  return result;
}

uint64_t AV1_Syntax::Set_File_Type(uint64_t result, int a2)
{
  *(_DWORD *)(result + 15476) = a2;
  return result;
}

uint64_t AV1_Syntax::Set_Is_Annexb(uint64_t this, int a2)
{
  *(_DWORD *)(this + 15480) = a2;
  return this;
}

uint64_t AV1_Syntax::Set_Operating_Point(uint64_t this, int a2)
{
  *(_DWORD *)(this + 15484) = a2;
  return this;
}

uint64_t AV1_Syntax::Set_Output_All_Layers(uint64_t result, uint64_t a2, int a3)
{
  *(void *)(result + 96) = a2 + 1800;
  *(_DWORD *)(a2 + 4756) = a3;
  return result;
}

BOOL AV1_Syntax::is_obu_in_current_operating_point(AV1_Syntax *this)
{
  unsigned int v1 = *((_DWORD *)this + 3872);
  BOOL result = 1;
  if (v1)
  {
    uint64_t v2 = *((void *)this + 10);
    if (((v1 >> *(_DWORD *)(v2 + 20)) & 1) == 0 || ((v1 >> (*(unsigned char *)(v2 + 24) + 8)) & 1) == 0) {
      return 0;
    }
  }
  return result;
}

uint64_t AV1_Syntax::Parse_Header(AV1_Syntax *this, unsigned __int8 *a2, unint64_t a3, _DWORD *a4, char a5)
{
  unint64_t v6 = a3;
  uint64_t v7 = (uint64_t)a2;
  int v9 = 0;
  int v10 = 0;
  uint64_t v53 = *MEMORY[0x263EF8340];
  *((void *)this + 10) = a4;
  *((void *)this + 11) = a4 + 8;
  *((void *)this + 12) = a4 + 450;
  a4[1188] = 0;
  unint64_t v11 = (unint64_t)&a2[a3];
  *((void *)this + 3) = &a2[a3];
  *((void *)this + 4) = a3;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 11) = 0;
  int v12 = 4;
  uint64_t v13 = a2;
  do
  {
    v10 <<= 8;
    if ((unint64_t)v13 < v11)
    {
      v9 += 8;
      *((_DWORD *)this + 11) = v9;
      *((void *)this + 2) = v13 + 1;
      v10 |= *v13++;
    }
    --v12;
  }
  while (v12);
  uint64_t v14 = a4;
  if ((~*((_DWORD *)this + 3881) & 0x80001) == 0)
  {
    BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t v14 = a4;
    if (v15)
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)uint64_t v51 = v10;
      *(_WORD *)&v51[4] = 1024;
      *(_DWORD *)&v51[6] = v9;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: next_32bits: %x m_bits_left %d\n", buf, 0xEu);
      uint64_t v14 = (_DWORD *)*((void *)this + 10);
    }
  }
  *((_DWORD *)this + 10) = v10;
  unsigned int v49 = 0;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = 0;
  v14[6] = 0;
  *((_DWORD *)this + 3086) = 0;
  if ((v6 & 0x8000000000000000) != 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)uint64_t v51 = "Parse_Header";
      *(_WORD *)&v51[8] = 1024;
      int v52 = 5601;
      __int16 v39 = &_os_log_internal;
      uint64_t v40 = "AppleAVD: %s(): error. Line: %d\n";
      goto LABEL_86;
    }
    return 0xFFFFFFFFLL;
  }
  if (!v6) {
    return 0;
  }
  __uint64_t n = 0;
  uint64_t v16 = &_os_log_internal;
  __s2 = (void *)v7;
  while (2)
  {
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    if (v11 == v7 && !*((_DWORD *)this + 3086)) {
      return 0;
    }
    if (AV1_Syntax::read_obu_header_and_size(this, v7, v6, *((_DWORD *)this + 3870), *((void *)this + 10), &v48, &v47))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)uint64_t v51 = "Parse_Header";
      *(_WORD *)&v51[8] = 1024;
      int v52 = 5623;
      __int16 v39 = &_os_log_internal;
      uint64_t v40 = "AppleAVD: %s(): error. Line: %d\n";
LABEL_86:
      uint32_t v42 = 18;
      goto LABEL_87;
    }
    uint64_t v18 = v47;
    unint64_t v17 = v48;
    uint64_t v19 = (void *)(v7 + v47);
    if (v11 - (v7 + v47) < v48)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)uint64_t v51 = "Parse_Header";
      *(_WORD *)&v51[8] = 1024;
      int v52 = 5632;
      __int16 v39 = &_os_log_internal;
      uint64_t v40 = "AppleAVD: %s(): error. Line: %d\n";
      goto LABEL_86;
    }
    v6 -= v47;
    uint64_t v20 = *((void *)this + 10);
    int v21 = *(_DWORD *)(v20 + 8);
    if ((v21 - 1) >= 2)
    {
      unsigned int v22 = *((_DWORD *)this + 3872);
      if (v22)
      {
        if (((v22 >> *(_DWORD *)(v20 + 20)) & 1) == 0 || ((v22 >> (*(unsigned char *)(v20 + 24) + 8)) & 1) == 0)
        {
          AV1_Syntax::skip_bytes(this, v48);
          uint64_t v7 = (uint64_t)v19 + v48;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315138;
            *(void *)uint64_t v51 = "Parse_Header";
            _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Outside of current operating range\n", buf, 0xCu);
          }
          goto LABEL_73;
        }
      }
    }
    *(void *)(*((void *)this + 12) + 348) = *(void *)(v20 + 20);
    unint64_t v23 = 0;
    switch(v21)
    {
      case 1:
        uint64_t result = AV1_Syntax::sequence_header_obu((const void **)this);
        if (result != -1)
        {
          unint64_t v17 = (int)result;
          if (*((_DWORD *)this + 3874))
          {
            int v28 = *((_DWORD *)this + 3086);
            uint64_t v16 = &_os_log_internal;
            if (!v28 && (a5 & 1) == 0) {
              goto LABEL_67;
            }
            if (v28) {
              return 0xFFFFFFFFLL;
            }
            else {
              return 1;
            }
          }
          else
          {
            uint64_t v16 = &_os_log_internal;
            if ((a5 & 1) == 0) {
              goto LABEL_67;
            }
            return 1;
          }
        }
        return result;
      case 2:
        unint64_t v17 = 0;
        *((_DWORD *)this + 3086) = 0;
        goto LABEL_57;
      case 3:
      case 6:
        if (*((_DWORD *)this + 3086)) {
          return 0xFFFFFFFFLL;
        }
        unsigned int v24 = AV1_Syntax::frame_header_obu(this);
        if (v24 == -1)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)uint64_t v51 = "Parse_Header";
          __int16 v39 = &_os_log_internal;
          uint64_t v40 = "AppleAVD: %s(): frame_header_obu returned -1\n";
          goto LABEL_114;
        }
        unsigned int v25 = v24;
        *((_DWORD *)this + 3086) = 1;
        __s2 = v19;
LABEL_23:
        __uint64_t n = v25;
        unint64_t v23 = v25;
        int v26 = *(_DWORD *)(*((void *)this + 10) + 8);
        if (**((_DWORD **)this + 12))
        {
          if (v26 != 6)
          {
            unsigned int v49 = 1;
            *((_DWORD *)this + 3086) = 0;
LABEL_66:
            unint64_t v17 = v25;
            uint64_t v16 = &_os_log_internal;
            goto LABEL_67;
          }
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)uint64_t v51 = "Parse_Header";
          *(_WORD *)&v51[8] = 1024;
          int v52 = 5732;
          __int16 v39 = &_os_log_internal;
          uint64_t v40 = "AppleAVD: %s(): error. Line: %d\n";
        }
        else
        {
          if (v26 != 6) {
            goto LABEL_66;
          }
          if (AV1_Syntax::obu_byte_alignment(this))
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)uint64_t v51 = "Parse_Header";
            *(_WORD *)&v51[8] = 1024;
            int v52 = 5745;
            __int16 v39 = &_os_log_internal;
            uint64_t v40 = "AppleAVD: %s(): error. Line: %d\n";
            goto LABEL_86;
          }
LABEL_60:
          if (*((_DWORD *)this + 3086))
          {
            if (v48 >= v23)
            {
              unsigned int v36 = AV1_Syntax::tile_group_obu(this, (uint64_t)v19 + v23, &v49, *(_DWORD *)(*((void *)this + 10) + 8) == 6, (int)v48 - (int)v23, a4);
              if (!v36)
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  return 0xFFFFFFFFLL;
                }
                *(_DWORD *)long long buf = 136315138;
                *(void *)uint64_t v51 = "Parse_Header";
                __int16 v39 = &_os_log_internal;
                uint64_t v40 = "AppleAVD: %s(): tile_group_obu returned error.\n";
LABEL_114:
                uint32_t v42 = 12;
LABEL_87:
                _os_log_impl(&dword_223977000, v39, OS_LOG_TYPE_DEFAULT, v40, buf, v42);
                return 0xFFFFFFFFLL;
              }
              unint64_t v17 = v23 + v36;
              if (v49)
              {
                *((_DWORD *)this + 3086) = 0;
                *((_DWORD *)this + 3096) = 0;
              }
LABEL_65:
              uint64_t v16 = &_os_log_internal;
LABEL_67:
              if (v17 <= v48) {
                goto LABEL_68;
              }
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              *(_DWORD *)long long buf = 136315394;
              *(void *)uint64_t v51 = "Parse_Header";
              *(_WORD *)&v51[8] = 1024;
              int v52 = 5830;
              __int16 v39 = &_os_log_internal;
              uint64_t v40 = "AppleAVD: %s(): error. Line: %d\n";
              goto LABEL_86;
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)uint64_t v51 = "Parse_Header";
            *(_WORD *)&v51[8] = 1024;
            int v52 = 5758;
            __int16 v39 = &_os_log_internal;
            uint64_t v40 = "AppleAVD: %s(): error. Line: %d\n";
          }
          else
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)uint64_t v51 = "Parse_Header";
            *(_WORD *)&v51[8] = 1024;
            int v52 = 5753;
            __int16 v39 = &_os_log_internal;
            uint64_t v40 = "AppleAVD: %s(): error. Line: %d\n";
          }
        }
        goto LABEL_86;
      case 4:
        goto LABEL_60;
      case 5:
        int v29 = AV1_Syntax::metadata_obu(this, v17);
        if (v29 == -1)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)uint64_t v51 = "Parse_Header";
          *(_WORD *)&v51[8] = 1024;
          int v52 = 5786;
          __int16 v39 = &_os_log_internal;
          uint64_t v40 = "AppleAVD: %s(): error. Line: %d\n";
          goto LABEL_86;
        }
        unint64_t v17 = v29;
        goto LABEL_65;
      case 7:
        if (!*((_DWORD *)this + 3086)) {
          return 0xFFFFFFFFLL;
        }
        unsigned int v25 = __n;
        if (v17 < __n || memcmp(v19, __s2, __n)) {
          return 0xFFFFFFFFLL;
        }
        unsigned int v30 = __n;
        if (!__n) {
          goto LABEL_23;
        }
        while (1)
        {
          unsigned int bits = AV1_Syntax::get_bits(this, "REDUNDANT_FRAME_HEADER", 8u);
          if (bits >= 0x100) {
            break;
          }
          if (!--v30) {
            goto LABEL_23;
          }
        }
        unsigned int v43 = bits;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)uint64_t v51 = "Parse_Header";
        *(_WORD *)&v51[8] = 1024;
        int v52 = v43;
        __int16 v39 = &_os_log_internal;
        uint64_t v40 = "AppleAVD: %s: value %d out of range!\n";
        goto LABEL_86;
      case 8:
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)uint64_t v51 = "Parse_Header";
        __int16 v39 = &_os_log_internal;
        uint64_t v40 = "AppleAVD: %s(): Large Scale Tile decoding is not supported!\n";
        goto LABEL_114;
      case 15:
        if (v17)
        {
          unint64_t v32 = v17;
          do
          {
            AV1_Syntax::get_bits(this, "obu_padding_byte", 8u);
            --v32;
          }
          while (v32);
          unint64_t v33 = v17;
          uint64_t v16 = &_os_log_internal;
          do
          {
            if (!v33) {
              goto LABEL_90;
            }
            int v34 = *(unsigned __int8 *)(v7 + v18 - 1 + v33--);
          }
          while (!v34);
          if (v34 != 128 || v17 == -1)
          {
LABEL_90:
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)uint64_t v51 = "Parse_Header";
            *(_WORD *)&v51[8] = 1024;
            int v52 = 5814;
            __int16 v39 = &_os_log_internal;
            uint64_t v40 = "AppleAVD: %s(): error. Line: %d\n";
            goto LABEL_86;
          }
          goto LABEL_67;
        }
LABEL_57:
        uint64_t v16 = &_os_log_internal;
LABEL_68:
        unint64_t v37 = v17 - 1;
LABEL_69:
        if (++v37 >= v48)
        {
          uint64_t v7 = (uint64_t)v19 + v48;
          v6 -= v48;
LABEL_73:
          uint64_t result = v49;
          if (v49) {
            BOOL v38 = 1;
          }
          else {
            BOOL v38 = v6 == 0;
          }
          if (v38)
          {
            if (v49) {
              *((_DWORD *)this + 3875) = 0;
            }
            return result;
          }
          continue;
        }
        if (!AV1_Syntax::get_bits(this, "padding", 8u)) {
          goto LABEL_69;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)uint64_t v51 = "Parse_Header";
          *(_WORD *)&v51[8] = 1024;
          int v52 = 5841;
          __int16 v39 = &_os_log_internal;
          uint64_t v40 = "AppleAVD: %s(): error. Line: %d\n";
          goto LABEL_86;
        }
        return 0xFFFFFFFFLL;
      default:
        uint64_t v16 = &_os_log_internal;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)uint64_t v51 = v21;
          _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: Unrecognized OBU type %d will be dropped\n", buf, 8u);
          LODWORD(v17) = v48;
        }
        AV1_Syntax::skip_bytes(this, v17);
        unint64_t v17 = v48;
        goto LABEL_67;
    }
  }
}

uint64_t AV1_Syntax::read_obu_header_and_size(AV1_Syntax *this, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6, void *a7)
{
  uint64_t v7 = a7;
  __int16 v8 = a6;
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (a4)
  {
    if (!a2) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v13 = a3 >= 8 ? 8 : a3;
    if (!v13) {
      return 0xFFFFFFFFLL;
    }
    char v15 = 0;
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    while (1)
    {
      char bits = AV1_Syntax::get_bits(this, "obu_size", 8u);
      v16 |= (unint64_t)(bits & 0x7F) << v15;
      ++v17;
      if ((bits & 0x80) == 0) {
        break;
      }
      v15 += 7;
      if (v13 == v17) {
        return 0xFFFFFFFFLL;
      }
    }
    if (HIDWORD(v16)) {
      return 0xFFFFFFFFLL;
    }
    unint64_t v27 = *((void *)this + 2);
    unint64_t v28 = *((void *)this + 3);
    if (v27 >= v28) {
      unsigned int v29 = *((_DWORD *)this + 11);
    }
    else {
      unsigned int v29 = *((_DWORD *)this + 11) + 8 * (v28 - v27);
    }
    uint64_t v7 = a7;
    __int16 v8 = a6;
    if (8 * v16 > v29)
    {
LABEL_29:
      if ((*((unsigned char *)this + 15526) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        unsigned int v36 = "read_obu_size";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: ERROR, obu size can't be larger than size of buffer\n", buf, 0xCu);
      }
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v17 = 0;
    unint64_t v16 = 0;
  }
  if (v17 + 1 <= a3 && !AV1_Syntax::read_obu_header(this))
  {
    uint64_t v19 = (unsigned int *)*((void *)this + 10);
    if (v19[3])
    {
      if (!a2) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v20 = v7;
      uint64_t v21 = a3 - (v17 + *v19) >= 8 ? 8 : a3 - (v17 + *v19);
      if (!v21) {
        return 0xFFFFFFFFLL;
      }
      char v22 = 0;
      unint64_t v23 = 0;
      uint64_t v24 = 0;
      while (1)
      {
        char v25 = AV1_Syntax::get_bits(this, "obu_size", 8u);
        v23 |= (unint64_t)(v25 & 0x7F) << v22;
        ++v24;
        if ((v25 & 0x80) == 0) {
          break;
        }
        v22 += 7;
        uint64_t result = 0xFFFFFFFFLL;
        if (v21 == v24) {
          return result;
        }
      }
      if (HIDWORD(v23)) {
        return 0xFFFFFFFFLL;
      }
      unint64_t v31 = *((void *)this + 2);
      unint64_t v32 = *((void *)this + 3);
      if (v31 >= v32) {
        unsigned int v33 = *((_DWORD *)this + 11);
      }
      else {
        unsigned int v33 = *((_DWORD *)this + 11) + 8 * (v32 - v31);
      }
      uint64_t v7 = v20;
      if (8 * v23 > v33) {
        goto LABEL_29;
      }
      unint64_t v30 = **((unsigned int **)this + 10);
    }
    else
    {
      if (!a4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        unsigned int v36 = "read_obu_header_and_size";
        __int16 v37 = 1024;
        int v38 = 5532;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
        uint64_t v19 = (unsigned int *)*((void *)this + 10);
      }
      unint64_t v30 = *v19;
      unint64_t v23 = v16 - v30;
      if (v16 < v30) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v24 = 0;
    }
    uint64_t result = 0;
    *__int16 v8 = v23;
    *uint64_t v7 = v24 + v17 + v30;
    return result;
  }
  return 0xFFFFFFFFLL;
}

uint64_t AV1_Syntax::sequence_header_obu(const void **this)
{
  __dst[221] = *MEMORY[0x263EF8340];
  memcpy(__dst, this[11], 0x6E8uLL);
  int v2 = *((_DWORD *)this + 4);
  int v3 = *((_DWORD *)this + 2);
  int v4 = *((_DWORD *)this + 11);
  unsigned int bits = AV1_Syntax::get_bits((AV1_Syntax *)this, "seq_profile", 3u);
  LODWORD(__dst[9]) = bits;
  if (bits >= 3)
  {
    unsigned int v6 = bits;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
LABEL_3:
    int v56 = 136315394;
    uint64_t v57 = "sequence_header_obu";
    __int16 v58 = 1024;
    int v59 = v6;
    uint64_t v7 = &_os_log_internal;
    __int16 v8 = "AppleAVD: %s: value %d out of range!\n";
LABEL_4:
    uint32_t v9 = 18;
    goto LABEL_5;
  }
  unsigned __int8 v10 = AV1_Syntax::get_bits((AV1_Syntax *)this, "still_picture", 1u);
  BYTE1(__dst[7]) = v10;
  unsigned __int8 v11 = AV1_Syntax::get_bits((AV1_Syntax *)this, "reduced_still_picture_header", 1u);
  BYTE2(__dst[7]) = v11;
  if (v11 && !v10)
  {
    if (*((unsigned char *)this + 15526))
    {
      unsigned __int8 v12 = v11;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v56 = 136315650;
        uint64_t v57 = "sequence_header_obu";
        __int16 v58 = 1024;
        int v59 = v12;
        __int16 v60 = 1024;
        unsigned int v61 = v10;
        uint64_t v7 = &_os_log_internal;
        __int16 v8 = "AppleAVD: %s: Unsupported bitstream. seq_header->reduced_still_picture_hdr = %d seq_header->still_picture= %d\n";
        goto LABEL_11;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (v11)
  {
    LODWORD(__dst[31]) = 0;
    BYTE4(__dst[33]) = 0;
    LOBYTE(__dst[35]) = 0;
    HIDWORD(__dst[14]) = 0;
    LODWORD(__dst[15]) = 0;
    unsigned int v13 = AV1_Syntax::get_bits((AV1_Syntax *)this, "seq_level_idx[0]", 5u);
    unsigned int v6 = v13;
    HIDWORD(__dst[35]) = v13;
    if (v13 >= 0x20)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_3;
    }
    if (v13 != 31 && v13 >= 0x18)
    {
      if ((*((unsigned char *)this + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v56 = 136315394;
      uint64_t v57 = "sequence_header_obu";
      __int16 v58 = 1024;
      int v59 = v6;
      uint64_t v7 = &_os_log_internal;
      __int16 v8 = "AppleAVD: %s: Unsupported bitstream. seq_header->seq_level_idx[0] %d\n";
      goto LABEL_4;
    }
    int v16 = 0;
    BYTE4(__dst[51]) = 0;
    LOBYTE(__dst[56]) = 0;
    BYTE1(__dst[60]) = 0;
LABEL_27:
    int v17 = *((_DWORD *)this + 3871);
    if (v17 > v16 || v17 < 0) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = *((unsigned int *)this + 3871);
    }
    *((_DWORD *)this + 3872) = *((_DWORD *)&__dst[15] + v19);
    unsigned int v20 = AV1_Syntax::get_bits((AV1_Syntax *)this, "frame_width_bits_minus_1", 4u);
    unsigned int v6 = v20 + 1;
    if (v20 >= 0x10)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_3;
    }
    unsigned int v35 = AV1_Syntax::get_bits((AV1_Syntax *)this, "frame_height_bits_minus_1", 4u);
    unsigned int v36 = v35 + 1;
    if (v35 >= 0x10)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v56 = 136315394;
      uint64_t v57 = "sequence_header_obu";
      __int16 v58 = 1024;
      int v59 = v36;
      uint64_t v7 = &_os_log_internal;
      __int16 v8 = "AppleAVD: %s: value %d out of range!\n";
      goto LABEL_4;
    }
    unsigned int v38 = AV1_Syntax::get_bits((AV1_Syntax *)this, "max_frame_width_minus_1", v6);
    unint64_t v39 = v38 + 1;
    if (v38 > 0x7FFFFFFE || 1 << v6 < v39)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v56 = 136315394;
      uint64_t v57 = "sequence_header_obu";
      __int16 v58 = 1024;
      int v59 = v39;
      uint64_t v7 = &_os_log_internal;
      __int16 v8 = "AppleAVD: %s: value %d out of range!\n";
      goto LABEL_4;
    }
    unsigned int v40 = AV1_Syntax::get_bits((AV1_Syntax *)this, "max_frame_height_minus_1", v36);
    unint64_t v41 = v40 + 1;
    if (v40 > 0x7FFFFFFE || 1 << v36 < v41)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v56 = 136315394;
      uint64_t v57 = "sequence_header_obu";
      __int16 v58 = 1024;
      int v59 = v41;
      uint64_t v7 = &_os_log_internal;
      __int16 v8 = "AppleAVD: %s: value %d out of range!\n";
      goto LABEL_4;
    }
    __dst[0] = __PAIR64__(v36, v6);
    __dst[1] = __PAIR64__(v41, v39);
    if (BYTE2(__dst[7]))
    {
      LOBYTE(__dst[2]) = 0;
    }
    else
    {
      LOBYTE(__dst[2]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "frame_id_numbers_present_flag", 1u);
      if (LOBYTE(__dst[2]))
      {
        unsigned int v47 = AV1_Syntax::get_bits((AV1_Syntax *)this, "delta_frame_id_length_minus_2", 4u);
        unsigned int v6 = v47 + 2;
        LODWORD(__dst[3]) = v47 + 2;
        if (v47 >= 0x10)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_3;
        }
        int v49 = AV1_Syntax::get_bits((AV1_Syntax *)this, "additional_frame_id_length_minus_1", 3u);
        unsigned int v6 = LODWORD(__dst[3]) + v49 + 1;
        HIDWORD(__dst[2]) = v6;
        if ((LODWORD(__dst[3]) + v49) >= 0x10)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_3;
        }
      }
    }
    if (AV1_Syntax::get_bits((AV1_Syntax *)this, "use_128x128_superblock", 1u)) {
      unsigned int v42 = 15;
    }
    else {
      unsigned int v42 = 12;
    }
    int v43 = av1_mi_size_wide[v42];
    HIDWORD(__dst[3]) = v42;
    LODWORD(__dst[4]) = v43;
    HIDWORD(__dst[4]) = av1_mi_size_wide_log2[v42];
    BYTE4(__dst[7]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "enable_filter_intra", 1u);
    BYTE5(__dst[7]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "enable_intra_edge_filter", 1u);
    if (BYTE2(__dst[7]))
    {
      __dst[6] = 0;
      LODWORD(__dst[5]) = 0;
      *(_DWORD *)((char *)&__dst[7] + 6) = 0;
      LOBYTE(__dst[7]) = 2;
      int v44 = -1;
      BYTE3(__dst[7]) = 2;
LABEL_116:
      HIDWORD(__dst[5]) = v44;
      BYTE2(__dst[8]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "enable_superres", 1u);
      BYTE3(__dst[8]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "enable_cdef", 1u);
      BYTE4(__dst[8]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "enable_restoration", 1u);
      AV1_Syntax::color_config((uint64_t)this, (uint64_t)__dst, 1);
      int v52 = HIDWORD(__dst[12]);
      unsigned int v51 = __dst[13];
      if (!*(void *)((char *)&__dst[12] + 4) || HIDWORD(__dst[12]) == 1 && LODWORD(__dst[13]) < 2)
      {
        BYTE1(__dst[14]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "film_grain_params_present", 1u);
        if (AV1_Syntax::check_trailing_bits((AV1_Syntax *)this)) {
          return 0xFFFFFFFFLL;
        }
        if (*((_DWORD *)this + 3873) && memcmp(this[11], __dst, 0x1C0uLL)) {
          *((_DWORD *)this + 3874) = 1;
        }
        int v53 = 8 * (v2 - v3) - v4;
        if (!*((_DWORD *)this + 3086)) {
          memcpy((void *)this[11], __dst, 0x6E8uLL);
        }
        *((_DWORD *)this + 3873) = 1;
        int v54 = v53 + *((_DWORD *)this + 11);
        if ((-v54 & 7) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v56 = 136315394;
          uint64_t v57 = "sequence_header_obu";
          __int16 v58 = 1024;
          int v59 = 807;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v56, 0x12u);
          int v54 = *((_DWORD *)this + 11) + v53;
        }
        return (8 * (*((_DWORD *)this + 4) - *((_DWORD *)this + 2)) - v54) >> 3;
      }
      if ((*((unsigned char *)this + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v56 = 136315650;
      uint64_t v57 = "sequence_header_obu";
      __int16 v58 = 1024;
      int v59 = v52;
      __int16 v60 = 1024;
      unsigned int v61 = v51;
      uint64_t v7 = &_os_log_internal;
      __int16 v8 = "AppleAVD: %s: Only 4:4:4, 4:2:2 and 4:2:0 are currently supported, %d %d subsampling is not supported.\n";
LABEL_11:
      uint32_t v9 = 24;
LABEL_5:
      _os_log_impl(&dword_223977000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v56, v9);
      return 0xFFFFFFFFLL;
    }
    BYTE6(__dst[7]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "enable_interintra_compound", 1u);
    HIBYTE(__dst[7]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "enable_masked_compound", 1u);
    BYTE1(__dst[8]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "enable_warped_motion", 1u);
    LOBYTE(__dst[8]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "enable_dual_filter", 1u);
    int v48 = AV1_Syntax::get_bits((AV1_Syntax *)this, "enable_order_hint", 1u);
    LODWORD(__dst[5]) = v48;
    if (v48)
    {
      LODWORD(__dst[6]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "enable_jnt_comp", 1u);
      if (LODWORD(__dst[5])) {
        int v48 = AV1_Syntax::get_bits((AV1_Syntax *)this, "enable_ref_frame_mvs", 1u);
      }
      else {
        int v48 = 0;
      }
    }
    else
    {
      LODWORD(__dst[6]) = 0;
    }
    HIDWORD(__dst[6]) = v48;
    if (AV1_Syntax::get_bits((AV1_Syntax *)this, "seq_choose_screen_content_tools", 1u))
    {
      LOBYTE(__dst[7]) = 2;
    }
    else
    {
      LOBYTE(__dst[7]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "seq_force_screen_content_tools", 1u);
      if (!LOBYTE(__dst[7])) {
        goto LABEL_111;
      }
    }
    if (!AV1_Syntax::get_bits((AV1_Syntax *)this, "seq_choose_integer_mv", 1u))
    {
      char v50 = AV1_Syntax::get_bits((AV1_Syntax *)this, "seq_force_integer_mv", 1u);
LABEL_113:
      BYTE3(__dst[7]) = v50;
      if (LODWORD(__dst[5])) {
        int v44 = AV1_Syntax::get_bits((AV1_Syntax *)this, "order_hint_bits_minus_1", 3u);
      }
      else {
        int v44 = -1;
      }
      goto LABEL_116;
    }
LABEL_111:
    char v50 = 2;
    goto LABEL_113;
  }
  LODWORD(__dst[31]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "timing_info_present_flag", 1u);
  if (LODWORD(__dst[31]))
  {
    AV1_Syntax::timing_info((AV1_Syntax *)this, (_DWORD *)&__dst[31] + 1);
    BYTE4(__dst[33]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "decoder_model_info_present_flag", 1u);
    if (BYTE4(__dst[33]))
    {
      unsigned __int8 v14 = AV1_Syntax::get_bits((AV1_Syntax *)this, "buffer_delay_length_minus_1", 5u);
      unsigned __int8 v15 = v14 + 1;
      BYTE4(__dst[34]) = v14 + 1;
      if (v14 >= 0x20u)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
LABEL_81:
        int v56 = 136315394;
        uint64_t v57 = "sequence_header_obu";
        __int16 v58 = 1024;
        int v59 = v15;
        uint64_t v7 = &_os_log_internal;
        __int16 v8 = "AppleAVD: %s: value %d out of range!\n";
        goto LABEL_4;
      }
      LODWORD(__dst[34]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "num_units_in_decoding_tick", 0x20u);
      unsigned __int8 v37 = AV1_Syntax::get_bits((AV1_Syntax *)this, "buffer_removal_time_length_minus_1", 5u);
      unsigned __int8 v15 = v37 + 1;
      BYTE5(__dst[34]) = v37 + 1;
      if (v37 >= 0x20u)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_81;
      }
      unsigned __int8 v45 = AV1_Syntax::get_bits((AV1_Syntax *)this, "frame_presentation_time_length_minus_1", 5u);
      unsigned __int8 v15 = v45 + 1;
      BYTE6(__dst[34]) = v45 + 1;
      if (v45 >= 0x20u)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_81;
      }
    }
  }
  else
  {
    BYTE4(__dst[33]) = 0;
  }
  LOBYTE(__dst[35]) = AV1_Syntax::get_bits((AV1_Syntax *)this, "initial_display_delay_present_flag", 1u);
  unsigned int v21 = AV1_Syntax::get_bits((AV1_Syntax *)this, "operating_points_cnt_minus_1", 5u);
  HIDWORD(__dst[14]) = v21;
  if (v21 > 0x1F)
  {
    unsigned int v6 = v21;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_3;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 284;
  while (1)
  {
    unsigned int v25 = AV1_Syntax::get_bits((AV1_Syntax *)this, "operating_point_idc[ i ]", 0xCu);
    *(_DWORD *)((char *)&__dst[-20] + v24 - 4) = v25;
    if (v25 >= 0x1000)
    {
      unsigned int v27 = v25;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_83;
    }
    unsigned int v26 = AV1_Syntax::get_bits((AV1_Syntax *)this, "seq_level_idx[ i ]", 5u);
    unsigned int v27 = v26;
    *(_DWORD *)((char *)__dst + v24) = v26;
    if (v26 >= 0x20)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
LABEL_83:
      int v56 = 136315394;
      uint64_t v57 = "sequence_header_obu";
      __int16 v58 = 1024;
      int v59 = v27;
      uint64_t v7 = &_os_log_internal;
      __int16 v8 = "AppleAVD: %s: value %d out of range!\n";
      goto LABEL_4;
    }
    if (v26 != 31 && v26 >= 0x18) {
      break;
    }
    if (v26 < 8) {
      char v28 = 0;
    }
    else {
      char v28 = AV1_Syntax::get_bits((AV1_Syntax *)this, "seq_tier", 1u);
    }
    *((unsigned char *)&__dst[51] + v23 + 4) = v28;
    if (BYTE4(__dst[33]))
    {
      char v29 = AV1_Syntax::get_bits((AV1_Syntax *)this, "decoder_model_present_for_this_op", 1u);
      LOBYTE(__dst[v22 + 56]) = v29;
      if (v29) {
        AV1_Syntax::op_parameters_info((AV1_Syntax *)this, (uint64_t)__dst, (uint64_t)&__dst[v22 + 56]);
      }
    }
    else
    {
      LOBYTE(__dst[v22 + 56]) = 0;
      if (LODWORD(__dst[31]) && HIDWORD(__dst[32]))
      {
        unint64_t v30 = &__dst[v22];
        v30[59] = 85899345990000;
        *((unsigned char *)v30 + 480) = 0;
      }
    }
    if (!LOBYTE(__dst[35]))
    {
      BYTE1(__dst[v22 + 60]) = 0;
LABEL_59:
      BYTE2(__dst[v22 + 60]) = 10;
      goto LABEL_60;
    }
    char v31 = AV1_Syntax::get_bits((AV1_Syntax *)this, "initial_display_delay_present_for_this_op[ i ]", 1u);
    BYTE1(__dst[v22 + 60]) = v31;
    if (!v31) {
      goto LABEL_59;
    }
    unsigned __int8 v32 = AV1_Syntax::get_bits((AV1_Syntax *)this, "initial_display_delay_minus_1", 4u);
    unsigned __int8 v33 = v32 + 1;
    BYTE2(__dst[v22 + 60]) = v32 + 1;
    if (v32 >= 0xAu)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v56 = 136315394;
      uint64_t v57 = "sequence_header_obu";
      __int16 v58 = 1024;
      int v59 = v33;
      uint64_t v7 = &_os_log_internal;
      __int16 v8 = "AppleAVD: %s: value %d out of range!\n";
      goto LABEL_4;
    }
LABEL_60:
    int v16 = HIDWORD(__dst[14]);
    v22 += 5;
    v24 += 4;
    if (v23++ >= SHIDWORD(__dst[14])) {
      goto LABEL_27;
    }
  }
  if ((*((unsigned char *)this + 15526) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v56 = 136315650;
    uint64_t v57 = "sequence_header_obu";
    __int16 v58 = 1024;
    int v59 = v23;
    __int16 v60 = 1024;
    unsigned int v61 = v27;
    uint64_t v7 = &_os_log_internal;
    __int16 v8 = "AppleAVD: %s: Unsupported bitstream. seq_header->seq_level_idx[%d] = %d\n";
    goto LABEL_11;
  }
  return 0xFFFFFFFFLL;
}

uint64_t AV1_Syntax::frame_header_obu(AV1_Syntax *this)
{
  *(void *)&v32[5] = *MEMORY[0x263EF8340];
  int v2 = *((_DWORD *)this + 11) + 8 * (*((_DWORD *)this + 2) - *((_DWORD *)this + 4));
  if (*((_DWORD *)this + 3086) == 1)
  {
    memcpy(*((void **)this + 12), (char *)this + 104, 0x2F60uLL);
    goto LABEL_3;
  }
  *((_DWORD *)this + 3086) = 1;
  if (!*(void *)(*((void *)this + 12) + 120))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v31) = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: frame_header_obu: ERROR, cur_frame isn't valid\n", (uint8_t *)&v31, 2u);
    }
    return 0xFFFFFFFFLL;
  }
  for (uint64_t i = 1988; i != 2296; i += 44)
  {
    uint64_t v5 = (_OWORD *)(*((void *)this + 12) + i);
    *uint64_t v5 = av1_default_warp_params;
    v5[1] = unk_223AD0CD0;
    *(_OWORD *)((char *)v5 + 28) = unk_223AD0CDC;
    unsigned int v6 = (_OWORD *)(*(void *)(*((void *)this + 12) + 120) + i - 1212);
    *(_OWORD *)((char *)v6 + 28) = unk_223AD0CDC;
    *unsigned int v6 = av1_default_warp_params;
    v6[1] = unk_223AD0CD0;
  }
  uint64_t result = AV1_Syntax::uncompressed_header(this);
  if (result != -1)
  {
    if (*(_DWORD *)(*((void *)this + 10) + 8) == 6)
    {
      while ((-*((_DWORD *)this + 11) & 7) != 0)
      {
        if (AV1_Syntax::get_bits(this, "zero_bit", 1u)) {
          return 0xFFFFFFFFLL;
        }
      }
LABEL_15:
      __int16 v8 = (_DWORD *)*((void *)this + 12);
      memcpy((char *)this + 104, v8, 0x2F60uLL);
      if (*v8)
      {
        *((_DWORD *)this + 3086) = 0;
        uint64_t result = (*((_DWORD *)this + 4) - *((_DWORD *)this + 2) + ((v2 - *((_DWORD *)this + 11) + 7) >> 3)) & 0x1FFFFFFF;
        v8[738] = result;
        return result;
      }
      *((void *)this + 1543) = 1;
      int v9 = v8[38];
      if (v9 == 7)
      {
        uint64_t v10 = *((int *)this + 3058);
        unsigned __int8 v11 = (char *)this + 8 * v10;
        *((void *)this + 1534) = *((void *)v11 + 1530);
        if ((~*((_DWORD *)this + 3881) & 0x80004) != 0
          || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          goto LABEL_29;
        }
        uint64_t v12 = **((void **)v11 + 1530);
        int v31 = 67109376;
        v32[0] = v10;
        LOWORD(v32[1]) = 2048;
        *(void *)((char *)&v32[1] + 2) = v12;
        unsigned int v13 = &_os_log_internal;
        unsigned __int8 v14 = "AppleAVD: ref none, default %d fc %p\n";
      }
      else
      {
        if ((v9 & 0xF8) == 0)
        {
          uint64_t v27 = (int)v8[v9 + 423];
          if (v27 != -1)
          {
            uint64_t v28 = *(void *)&v8[2 * v27 + 462];
            if (v28)
            {
              char v29 = *(uint64_t **)(v28 + 1968);
              *((void *)this + 1534) = v29;
              if ((~*((_DWORD *)this + 3881) & 0x80004) != 0
                || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                goto LABEL_29;
              }
              uint64_t v30 = *v29;
              int v31 = 134217984;
              *(void *)unsigned __int8 v32 = v30;
              unsigned int v13 = &_os_log_internal;
              unsigned __int8 v14 = "AppleAVD: primary ref fc %p\n";
              uint32_t v18 = 12;
              goto LABEL_28;
            }
          }
        }
        uint64_t v15 = *((int *)this + 3058);
        int v16 = (char *)this + 8 * v15;
        *((void *)this + 1534) = *((void *)v16 + 1530);
        if ((~*((_DWORD *)this + 3881) & 0x80004) != 0
          || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          goto LABEL_29;
        }
        uint64_t v17 = **((void **)v16 + 1530);
        int v31 = 67109376;
        v32[0] = v15;
        LOWORD(v32[1]) = 2048;
        *(void *)((char *)&v32[1] + 2) = v17;
        unsigned int v13 = &_os_log_internal;
        unsigned __int8 v14 = "AppleAVD: primary ref no fb, default %d fc %p\n";
      }
      uint32_t v18 = 18;
LABEL_28:
      _os_log_impl(&dword_223977000, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v31, v18);
LABEL_29:
      uint64_t v19 = *((void *)this + 12);
      if (*(_DWORD *)(v19 + 144) == 1)
      {
        uint64_t v20 = *(void *)(v19 + 120);
        unsigned int v21 = *(uint64_t **)(v20 + 1960);
        *(void *)(v20 + 1968) = v21;
        if ((~*((_DWORD *)this + 3881) & 0x80004) != 0
          || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          goto LABEL_3;
        }
        uint64_t v22 = *v21;
        int v31 = 134217984;
        *(void *)unsigned __int8 v32 = v22;
        uint64_t v23 = &_os_log_internal;
        uint64_t v24 = "AppleAVD: backward refresh 1 fci_ref fc %p\n";
      }
      else
      {
        unsigned int v25 = (uint64_t *)*((void *)this + 1534);
        *(void *)(*(void *)(v19 + 120) + 1968) = v25;
        if ((~*((_DWORD *)this + 3881) & 0x80004) != 0
          || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          goto LABEL_3;
        }
        uint64_t v26 = *v25;
        int v31 = 134217984;
        *(void *)unsigned __int8 v32 = v26;
        uint64_t v23 = &_os_log_internal;
        uint64_t v24 = "AppleAVD: backward refresh 0 fci_ref fc %p\n";
      }
      _os_log_impl(&dword_223977000, v23, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v31, 0xCu);
LABEL_3:
      uint64_t result = (*((_DWORD *)this + 4) - *((_DWORD *)this + 2) + ((v2 - *((_DWORD *)this + 11) + 7) >> 3)) & 0x1FFFFFFF;
      *(_DWORD *)(*((void *)this + 12) + 2952) = result;
      return result;
    }
    int v7 = -*((_DWORD *)this + 11) & 7;
    if (AV1_Syntax::get_bits(this, "trailing", 8 - v7) == 1 << (v7 ^ 7)) {
      goto LABEL_15;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t AV1_Syntax::obu_byte_alignment(AV1_Syntax *this)
{
  while ((-*((_DWORD *)this + 11) & 7) != 0)
  {
    if (AV1_Syntax::get_bits(this, "zero_bit", 1u)) {
      return 0xFFFFFFFFLL;
    }
  }
  return 0;
}

uint64_t AV1_Syntax::tile_group_obu(AV1_Syntax *this, uint64_t a2, _DWORD *a3, int a4, unsigned int a5, _DWORD *a6)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v22 = 0;
  unsigned int v21 = 0;
  if ((-*((_DWORD *)this + 11) & 7) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v24 = "tile_group_obu";
    __int16 v25 = 1024;
    int v26 = 5242;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
  }
  if (AV1_Syntax::read_tile_group_header(this, &v22[1], v22, a4, &v21)) {
    goto LABEL_9;
  }
  while ((-*((_DWORD *)this + 11) & 7) != 0)
  {
    if (AV1_Syntax::get_bits(this, "zero_bit", 1u)) {
      goto LABEL_9;
    }
  }
  uint64_t v12 = v21;
  if (a5 < v21)
  {
LABEL_9:
    if ((*((unsigned char *)this + 15526) & 1) == 0) {
      return 0;
    }
    BOOL v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v24 = "tile_group_obu";
    uint64_t v15 = &_os_log_internal;
    int v16 = "AppleAVD: %s: Unsupported bitstream. header_size or obu_byte_alignment = -1 or sz < header_size\n";
LABEL_12:
    _os_log_impl(&dword_223977000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 0xCu);
    return 0;
  }
  uint64_t v17 = a5 - v21;
  uint32_t v18 = (unsigned __int8 *)(a2 + v21);
  *((void *)this + 1549) = v18;
  int v19 = a2 + v12 + v17;
  if (!AV1_Syntax::get_tile_info(this, v18, a2 + v12 + v17, v22[1], v22[0], a6))
  {
    *a3 = v22[0] == *(_DWORD *)(*((void *)this + 12) + 764) * *(_DWORD *)(*((void *)this + 12) + 768) - 1;
    AV1_Syntax::skip_bytes(this, v19 + (*((_DWORD *)this + 11) >> 3) - *((_DWORD *)this + 4));
    return v21 + v17;
  }
  if ((*((unsigned char *)this + 15526) & 1) == 0) {
    return 0;
  }
  BOOL v20 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v20)
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v24 = "tile_group_obu";
    uint64_t v15 = &_os_log_internal;
    int v16 = "AppleAVD: %s: Unsupported bitstream. tile_info not correct\n";
    goto LABEL_12;
  }
  return result;
}

unint64_t AV1_Syntax::metadata_obu(AV1_Syntax *this, unint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v3 = a2;
  uint64_t v4 = 8;
  if (a2 < 8) {
    uint64_t v4 = a2;
  }
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  int v8 = *((_DWORD *)this + 11) + 8 * (*((_DWORD *)this + 2) - v2);
  uint64_t v9 = 7 * v4;
  for (unint64_t i = a2; ; --i)
  {
    char bits = AV1_Syntax::get_bits(this, "metadata_type", 8u);
    v7 |= (unint64_t)(bits & 0x7F) << v6;
    if ((bits & 0x80) == 0) {
      break;
    }
    v6 += 7;
    if (v9 == v6) {
      return 0xFFFFFFFFLL;
    }
  }
  if (HIDWORD(v7)) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 3070) = v7;
  if ((v7 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if ((v7 - 6) <= 0xFFFFFFFA)
  {
    unint64_t v12 = i;
    while (v12 != 1)
    {
      if (*(unsigned __int8 *)(*((void *)this + 2) - ((unint64_t)*((unsigned int *)this + 11) >> 3) - 2 + v12--))
      {
        AV1_Syntax::skip_bytes(this, i - 1);
        return v3;
      }
    }
    return 0xFFFFFFFFLL;
  }
  switch((int)v7)
  {
    case 1:
      AV1_Syntax::metadata_hdr_cll(this);
      break;
    case 2:
      uint64_t v15 = -12;
      do
      {
        *(_DWORD *)((char *)this + v15 + 12312) = AV1_Syntax::get_bits(this, "primary_chromaticity_x", 0x10u);
        *(_DWORD *)((char *)this + v15 + 12324) = AV1_Syntax::get_bits(this, "primary_chromaticity_y", 0x10u);
        v15 += 4;
      }
      while (v15);
      *((_DWORD *)this + 3081) = AV1_Syntax::get_bits(this, "white_point_chromaticity_x", 0x10u);
      *((_DWORD *)this + 3082) = AV1_Syntax::get_bits(this, "white_point_chromaticity_y", 0x10u);
      *((_DWORD *)this + 3083) = AV1_Syntax::get_bits(this, "luminance_max", 0x20u);
      *((_DWORD *)this + 3084) = AV1_Syntax::get_bits(this, "luminance_min", 0x20u);
      break;
    case 3:
      unsigned int v16 = AV1_Syntax::get_bits(this, "scalability_mode_idc", 8u);
      unsigned int v17 = v16;
      *((_DWORD *)this + 3085) = v16;
      if (v16 < 0x100)
      {
        if (v16 == 14) {
          AV1_Syntax::scalability_structure(this);
        }
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = 136315394;
        unsigned int v21 = "metadata_scalability";
        __int16 v22 = 1024;
        unsigned int v23 = v17;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v20, 0x12u);
      }
      break;
    case 4:
      AV1_Syntax::metadata_itut_t35(this, i - 1);
      break;
    case 5:
      AV1_Syntax::metadata_timecode(this);
      break;
    default:
      break;
  }
  int v18 = -*((_DWORD *)this + 11) & 7;
  if (AV1_Syntax::get_bits(this, "trailing", 8 - v18) != 1 << (v18 ^ 7))
  {
    int v19 = v3
        - ((*((_DWORD *)this + 4) - *((_DWORD *)this + 2) + ((v8 - *((_DWORD *)this + 11)) >> 3)) & 0x1FFFFFFF);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v20) = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: Corrupted metadata OBU\n", (uint8_t *)&v20, 2u);
    }
    AV1_Syntax::skip_bytes(this, v19);
  }
  return (*((_DWORD *)this + 4) - *((_DWORD *)this + 2) + ((v8 - *((_DWORD *)this + 11)) >> 3)) & 0x1FFFFFFF;
}

uint64_t AV1_Syntax::get_bits(AV1_Syntax *this, const char *a2, unsigned int a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  unsigned int v6 = *((_DWORD *)this + 11);
  if (!v6)
  {
    unsigned int v7 = 0;
    *((_DWORD *)this + 11) = 0;
    int v8 = 4;
    uint64_t v10 = (unsigned __int8 *)*((void *)this + 2);
    unint64_t v9 = *((void *)this + 3);
    do
    {
      v7 <<= 8;
      if ((unint64_t)v10 < v9)
      {
        v6 += 8;
        *((_DWORD *)this + 11) = v6;
        *((void *)this + 2) = v10 + 1;
        v7 |= *v10++;
      }
      --v8;
    }
    while (v8);
    if ((~*((_DWORD *)this + 3881) & 0x80001) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = 67109376;
      unsigned int v26 = v7;
      __int16 v27 = 1024;
      unsigned int v28 = v6;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: next_32bits: %x m_bits_left %d\n", (uint8_t *)&v25, 0xEu);
      unsigned int v6 = *((_DWORD *)this + 11);
    }
    *((_DWORD *)this + 10) = v7;
  }
  unsigned int v11 = *((_DWORD *)this + 10);
  unsigned int v12 = a3 - v6;
  if (a3 <= v6)
  {
    unsigned int v18 = 0;
    unsigned int v13 = *((_DWORD *)this + 10);
    unsigned int v12 = a3;
  }
  else
  {
    unsigned int v13 = 0;
    char v14 = 32 - v6;
    *((_DWORD *)this + 11) = 0;
    unsigned int v16 = (unsigned __int8 *)*((void *)this + 2);
    unint64_t v15 = *((void *)this + 3);
    int v17 = 4;
    unsigned int v6 = 0;
    do
    {
      v13 <<= 8;
      if ((unint64_t)v16 < v15)
      {
        v6 += 8;
        *((_DWORD *)this + 11) = v6;
        *((void *)this + 2) = v16 + 1;
        v13 |= *v16++;
      }
      --v17;
    }
    while (v17);
    unsigned int v18 = v11 >> v14 << v12;
    if ((~*((_DWORD *)this + 3881) & 0x80001) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = 67109376;
      unsigned int v26 = v13;
      __int16 v27 = 1024;
      unsigned int v28 = v6;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: next_32bits: %x m_bits_left %d\n", (uint8_t *)&v25, 0xEu);
      unsigned int v6 = *((_DWORD *)this + 11);
    }
  }
  if (v12 >= v6) {
    unsigned int v20 = v6;
  }
  else {
    unsigned int v20 = v12;
  }
  uint64_t v19 = (v13 >> -(char)v20) | v18;
  unsigned int v21 = v6 - v20;
  *((_DWORD *)this + 10) = v13 << v20;
  *((_DWORD *)this + 11) = v21;
  if ((~*((_DWORD *)this + 3881) & 0x80001) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = *((void *)this + 2);
    unsigned int v23 = 8 * (v22 - *((_DWORD *)this + 2)) - (v21 + a3);
    int v25 = 67110402;
    unsigned int v26 = v23;
    __int16 v27 = 1024;
    unsigned int v28 = a3;
    __int16 v29 = 2080;
    uint64_t v30 = a2;
    __int16 v31 = 1024;
    int v32 = v19;
    __int16 v33 = 1024;
    unsigned int v34 = v21;
    __int16 v35 = 2048;
    uint64_t v36 = v22 - 4;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %d: get_bits(%d): %s = %d, m_bits_left %d from buffer: %p\n", (uint8_t *)&v25, 0x2Eu);
  }
  return v19;
}

uint64_t AV1_Syntax::superres_params(AV1_Syntax *this, int *a2, int *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 12);
  *(_DWORD *)(v3 + 364) = *a2;
  *(_DWORD *)(v3 + 368) = *a3;
  if (!*(unsigned char *)(*((void *)this + 11) + 66)) {
    return 0;
  }
  uint64_t result = AV1_Syntax::get_bits(this, "use_superres", 1u);
  if (result)
  {
    unsigned __int8 bits = AV1_Syntax::get_bits(this, "coded_denom", 3u);
    uint64_t v8 = *((void *)this + 12);
    *(unsigned char *)(v8 + 372) = bits;
    if ((bits & 0xF8) != 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 136315394;
        unsigned int v12 = "superres_params";
        __int16 v13 = 1024;
        int v14 = bits;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v11, 0x12u);
      }
      return 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t result = 0;
      *(unsigned char *)(v8 + 372) = bits + 9;
      if (*a2 >= 16) {
        int v9 = 16;
      }
      else {
        int v9 = *a2;
      }
      signed int v10 = (8 * *a2 + ((bits + 9) >> 1)) / (bits + 9);
      if (v10 <= v9) {
        signed int v10 = v9;
      }
      *a2 = v10;
    }
  }
  else
  {
    *(unsigned char *)(*((void *)this + 12) + 372) = 8;
  }
  return result;
}

uint64_t AV1_Syntax::render_size(AV1_Syntax *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AV1_Syntax::get_bits(this, "render_and_frame_size_different", 1u);
  if (!result)
  {
    uint64_t v5 = (_DWORD *)*((void *)this + 12);
    v5[89] = v5[91];
    v5[90] = v5[92];
    return result;
  }
  unsigned int bits = AV1_Syntax::get_bits(this, "render_width_minus_1", 0x10u);
  unsigned int v4 = bits + 1;
  *(_DWORD *)(*((void *)this + 12) + 356) = bits + 1;
  if (bits >= 0x10000)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_8;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v6 = AV1_Syntax::get_bits(this, "render_height_minus_1", 0x10u);
  unsigned int v4 = v6 + 1;
  *(_DWORD *)(*((void *)this + 12) + 360) = v6 + 1;
  if (v6 >= 0x10000)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_8:
      int v7 = 136315394;
      uint64_t v8 = "render_size";
      __int16 v9 = 1024;
      unsigned int v10 = v4;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return 0;
}

void AV1_Syntax::read_tile_info_max_tile(AV1_Syntax *this)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 12);
  int v3 = *(_DWORD *)(*((void *)this + 11) + 36);
  unsigned int v4 = -1;
  int v5 = ~(-1 << v3);
  int v6 = (v2[97] + v5) & (-1 << v3);
  int v7 = ((v2[96] + v5) & (-1 << v3)) >> v3;
  char v8 = v3 + 2;
  unsigned int v9 = 0x1000u >> (v3 + 2);
  v2[193] = v9;
  do
    ++v4;
  while ((int)(v9 << v4) < v7);
  int v10 = v6 >> v3;
  v2[201] = v4;
  if (v7 >= 64) {
    int v11 = 64;
  }
  else {
    int v11 = v7;
  }
  int v12 = -1;
  do
    ++v12;
  while (1 << v12 < v11);
  v2[203] = v12;
  if (v10 >= 64) {
    int v13 = 64;
  }
  else {
    int v13 = v10;
  }
  int v14 = -1;
  do
    ++v14;
  while (1 << v14 < v13);
  unsigned int v15 = 0x900000u >> (2 * v8);
  v2[204] = v14;
  unsigned int v16 = -1;
  do
    ++v16;
  while ((int)(v15 << v16) < v7 * v10);
  if (v16 > v4) {
    unsigned int v4 = v16;
  }
  v2[205] = v4;
  int bits = AV1_Syntax::get_bits(this, "uniform_tile_spacing_flag", 1u);
  v2[196] = bits;
  if (bits)
  {
    int v18 = v2[201];
    v2[197] = v18;
    if (v18 < v2[203])
    {
      do
      {
        if (!AV1_Syntax::get_bits(this, "increment_tile_cols_log2", 1u)) {
          break;
        }
        int v19 = v2[197] + 1;
        v2[197] = v19;
      }
      while (v19 < v2[203]);
    }
  }
  else
  {
    if (v7 < 1)
    {
      int v28 = 0;
      int v21 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      int v21 = 0;
      do
      {
        int v22 = v2[193];
        unsigned int v23 = -1;
        if (v7 < v22) {
          int v22 = v7;
        }
        if (v22)
        {
          int v24 = v22;
          do
          {
            ++v23;
            BOOL v25 = v24 > 1;
            v24 >>= 1;
          }
          while (v25);
        }
        unsigned int v26 = (1 << (v23 + 1)) - v22;
        unsigned int v27 = AV1_Syntax::get_bits(this, "width_in_sbs_minus_1", v23);
        if (v27 >= v26) {
          unsigned int v27 = AV1_Syntax::get_bits(this, "width_in_sbs_minus_1", 1u) - v26 + 2 * v27;
        }
        v2[v20 + 206] = v21;
        v21 += v27 + 1;
        v7 -= v27 + 1;
        int v28 = v20 + 1;
        if (v7 < 1) {
          break;
        }
        BOOL v29 = v20++ >= 0x3F;
      }
      while (!v29);
    }
    v2[191] = v28;
    v2[v28 + 206] = v21 + v7;
  }
  AV1_Syntax::calculate_tile_cols(this);
  if (v2[196])
  {
    int v30 = v2[202];
    v2[198] = v30;
    if (v30 < v2[204])
    {
      do
      {
        if (!AV1_Syntax::get_bits(this, "increment_tile_rows_log2", 1u)) {
          break;
        }
        int v31 = v2[198] + 1;
        v2[198] = v31;
      }
      while (v31 < v2[204]);
    }
  }
  else
  {
    if (v10 < 1)
    {
      int v39 = 0;
      int v33 = 0;
    }
    else
    {
      unint64_t v32 = 0;
      int v33 = 0;
      do
      {
        int v34 = v2[194];
        unsigned int v35 = -1;
        if (v10 < v34) {
          int v34 = v10;
        }
        if (v34)
        {
          int v36 = v34;
          do
          {
            ++v35;
            BOOL v25 = v36 > 1;
            v36 >>= 1;
          }
          while (v25);
        }
        unsigned int v37 = (1 << (v35 + 1)) - v34;
        unsigned int v38 = AV1_Syntax::get_bits(this, "height_in_sbs_minus_1", v35);
        if (v38 >= v37) {
          unsigned int v38 = AV1_Syntax::get_bits(this, "height_in_sbs_minus_1", 1u) - v37 + 2 * v38;
        }
        v2[v32 + 271] = v33;
        v33 += v38 + 1;
        v10 -= v38 + 1;
        int v39 = v32 + 1;
        if (v10 < 1) {
          break;
        }
        BOOL v29 = v32++ >= 0x3F;
      }
      while (!v29);
    }
    v2[192] = v39;
    v2[v39 + 271] = v33 + v10;
  }

  AV1_Syntax::calculate_tile_rows(this);
}

void AV1_Syntax::calculate_tile_cols(AV1_Syntax *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unsigned int v1 = (_DWORD *)*((void *)this + 12);
  int v2 = *(_DWORD *)(*((void *)this + 11) + 36);
  int v3 = ~(-1 << v2);
  int v4 = ((v1[96] + v3) & (-1 << v2)) >> v2;
  int v5 = ((v1[97] + v3) & (-1 << v2)) >> v2;
  v1[195] = -1;
  if (v1[196])
  {
    int v7 = ((v4 + ~(-1 << v1[197])) & (-1 << v1[197])) >> v1[197];
    if (v7 <= 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = 136315394;
      unsigned int v27 = "calculate_tile_cols";
      __int16 v28 = 1024;
      int v29 = 3957;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v26, 0x12u);
    }
    if (v4 < 1)
    {
      LODWORD(v8) = 0;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 0;
      if (v7 <= v4) {
        int v10 = v4;
      }
      else {
        int v10 = v7;
      }
      uint64_t v11 = (v10 - 1) / v7 + 1;
      do
      {
        v1[v8 + 206] = v9;
        v9 += v7;
        ++v8;
      }
      while (v11 != v8);
    }
    v1[191] = v8;
    v1[v8 + 206] = v4;
    int v20 = v1[205] - v1[197];
    int v21 = v20 & ~(v20 >> 31);
    v1[202] = v21;
    v1[194] = v5 >> v21;
    unsigned int v22 = v7 << *(_DWORD *)(*((void *)this + 11) + 36);
    if (v22 >= *(_DWORD *)(*((void *)this + 12) + 384)) {
      unsigned int v22 = *(_DWORD *)(*((void *)this + 12) + 384);
    }
    v1[199] = v22;
    if (v8 <= 1) {
      return;
    }
LABEL_37:
    v1[195] = v22;
    return;
  }
  uint64_t v12 = v1[191];
  int v13 = -1;
  do
    ++v13;
  while (1 << v13 < (int)v12);
  v1[197] = v13;
  if ((int)v12 < 1)
  {
    int v17 = 0x10000;
    int v16 = 1;
  }
  else
  {
    unint64_t v14 = 0;
    int v15 = v1[206];
    int v16 = 1;
    int v17 = 0x10000;
    do
    {
      int v18 = v1[v14 + 207] - v15;
      if (v16 <= v18) {
        int v16 = v18;
      }
      if (v17 < v18) {
        int v18 = v17;
      }
      unint64_t v19 = v14 + 1;
      if (v14 < (v12 - 1)) {
        int v17 = v18;
      }
      int v15 = v1[v14++ + 207];
    }
    while (v12 != v19);
  }
  int v23 = v1[205];
  if (v23) {
    char v24 = v23 + 1;
  }
  else {
    char v24 = 0;
  }
  int v25 = ((v5 * v4) >> v24) / v16;
  if (v25 <= 1) {
    int v25 = 1;
  }
  v1[194] = v25;
  if ((int)v12 > 1)
  {
    unsigned int v22 = v17 << v2;
    goto LABEL_37;
  }
}

void AV1_Syntax::calculate_tile_rows(AV1_Syntax *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned int v1 = (_DWORD *)*((void *)this + 12);
  if (v1[196])
  {
    char v3 = *(_DWORD *)(*((void *)this + 11) + 36);
    int v4 = ((v1[97] + ~(-1 << v3)) & (-1 << v3)) >> v3;
    int v5 = ((v4 + ~(-1 << v1[198])) & (-1 << v1[198])) >> v1[198];
    if (v5 <= 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315394;
      int v13 = "calculate_tile_rows";
      __int16 v14 = 1024;
      int v15 = 4013;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v12, 0x12u);
    }
    if (v4 < 1)
    {
      LODWORD(v6) = 0;
    }
    else
    {
      uint64_t v6 = 0;
      int v7 = 0;
      if (v5 <= v4) {
        int v8 = v4;
      }
      else {
        int v8 = v5;
      }
      uint64_t v9 = (v8 - 1) / v5 + 1;
      do
      {
        v1[v6 + 271] = v7;
        v7 += v5;
        ++v6;
      }
      while (v9 != v6);
    }
    v1[192] = v6;
    v1[v6 + 271] = v4;
    unsigned int v11 = v5 << *(_DWORD *)(*((void *)this + 11) + 36);
    if (v11 >= *(_DWORD *)(*((void *)this + 12) + 388)) {
      unsigned int v11 = *(_DWORD *)(*((void *)this + 12) + 388);
    }
    v1[200] = v11;
  }
  else
  {
    int v10 = -1;
    do
      ++v10;
    while (1 << v10 < v1[192]);
    v1[198] = v10;
  }
}

BOOL AV1_Syntax::read_global_motion_params(AV1_Syntax *a1, uint64_t a2, int *a3)
{
  if (!AV1_Syntax::get_bits(a1, "is_global", 1u))
  {
    *(_OWORD *)(a2 + 28) = unk_223AD0CDC;
    *(_OWORD *)a2 = av1_default_warp_params;
    *(_OWORD *)(a2 + 16) = unk_223AD0CD0;
    *(unsigned char *)(a2 + 40) = 0;
    *(void *)(a2 + 16) = 0x1000000000000;
    goto LABEL_169;
  }
  int bits = AV1_Syntax::get_bits(a1, "is_rot_zoom", 1u);
  uint64_t v150 = a2;
  if (bits)
  {
    char v6 = 2;
  }
  else
  {
    if (AV1_Syntax::get_bits(a1, "is_translation", 1u))
    {
      *(_OWORD *)(a2 + 28) = unk_223AD0CDC;
      *(_OWORD *)a2 = av1_default_warp_params;
      *(_OWORD *)(a2 + 16) = unk_223AD0CD0;
      *(unsigned char *)(a2 + 40) = 1;
      *(void *)(a2 + 16) = 0x1000000000000;
      int v17 = *(unsigned __int8 *)(*((void *)a1 + 12) + 158);
      BOOL v18 = v17 == 0;
      char v19 = v17 | 8;
      int v149 = 0x2000 << (*(unsigned char *)(*((void *)a1 + 12) + 158) == 0);
      if (v18) {
        char v20 = 14;
      }
      else {
        char v20 = 13;
      }
      goto LABEL_115;
    }
    char v6 = 3;
  }
  int v7 = 0;
  int v8 = 0;
  *(_OWORD *)(a2 + 28) = unk_223AD0CDC;
  *(_OWORD *)a2 = av1_default_warp_params;
  *(_OWORD *)(a2 + 16) = unk_223AD0CD0;
  *(unsigned char *)(a2 + 40) = v6;
  unsigned int v9 = a3[2];
  int v10 = (v9 >> 1) - 28672;
  unsigned int v11 = 3;
  do
  {
    if (!AV1_Syntax::get_bits(a1, "subexpfin-1", 1u))
    {
      int v16 = AV1_Syntax::get_bits(a1, "subexpfin-2", v11) + v7;
      goto LABEL_24;
    }
    int v12 = 1 << v11;
    unsigned int v11 = v8 + 3;
    int v13 = 24 << v8++;
    v7 += v12;
  }
  while (v13 + v7 <= 0x2000);
  unsigned int v14 = (unsigned __int16)(8193 - v7);
  if (v14 >= 2)
  {
    unsigned int v21 = 0;
    int v22 = 4;
    unsigned int v23 = (unsigned __int16)(8193 - v7);
    do
    {
      int v24 = 1 << v22;
      unsigned int v25 = v23 >> (1 << v22);
      if (!v25) {
        int v24 = 0;
      }
      v21 += v24;
      if (v25) {
        v23 >>= 1 << v22;
      }
      --v22;
    }
    while (v22 != -1);
    signed int v26 = (1 << (v21 + 1)) - v14;
    signed int v15 = AV1_Syntax::get_bits(a1, "quniform-1", v21);
    if (v15 >= v26) {
      signed int v15 = AV1_Syntax::get_bits(a1, "quniform-2", 1u) - v26 + 2 * v15;
    }
  }
  else
  {
    signed int v15 = 0;
  }
  int v16 = v15 + v7;
LABEL_24:
  int v27 = 0;
  int v28 = 0;
  int v29 = -28672 - (v9 >> 1);
  unsigned int v30 = (unsigned __int16)v16 + 1;
  int v31 = v29 - (v30 >> 1);
  if ((v16 & 1) == 0) {
    int v31 = v29 + ((unsigned __int16)(v16 & 0xFFFE) >> 1);
  }
  if ((unsigned __int16)v16 <= 2 * (unsigned __int16)v29) {
    int v32 = v31;
  }
  else {
    int v32 = v16;
  }
  int v33 = 0x2000 - v32;
  int v34 = v10 - (v30 >> 1);
  if ((v16 & 1) == 0) {
    int v34 = v10 + ((unsigned __int16)(v16 & 0xFFFE) >> 1);
  }
  if ((unsigned __int16)v16 <= 2 * (unsigned __int16)v10) {
    int v16 = v34;
  }
  if ((unsigned __int16)((v9 >> 1) - 28672) > 0x1000u) {
    int v16 = v33;
  }
  *(_DWORD *)(v150 + 8) = ((v16 - 4096) << 16 >> 15) + 0x10000;
  unsigned int v35 = a3[3];
  int v36 = (v35 >> 1) + 4096;
  unsigned int v37 = 3;
  do
  {
    if (!AV1_Syntax::get_bits(a1, "subexpfin-1", 1u))
    {
      int v42 = AV1_Syntax::get_bits(a1, "subexpfin-2", v37) + v27;
      goto LABEL_50;
    }
    int v38 = 1 << v37;
    unsigned int v37 = v28 + 3;
    int v39 = 24 << v28++;
    v27 += v38;
  }
  while (v39 + v27 <= 0x2000);
  unsigned int v40 = (unsigned __int16)(8193 - v27);
  if (v40 >= 2)
  {
    unsigned int v43 = 0;
    int v44 = 4;
    unsigned int v45 = (unsigned __int16)(8193 - v27);
    do
    {
      int v46 = 1 << v44;
      unsigned int v47 = v45 >> (1 << v44);
      if (!v47) {
        int v46 = 0;
      }
      v43 += v46;
      if (v47) {
        v45 >>= 1 << v44;
      }
      --v44;
    }
    while (v44 != -1);
    signed int v48 = (1 << (v43 + 1)) - v40;
    signed int v41 = AV1_Syntax::get_bits(a1, "quniform-1", v43);
    if (v41 >= v48) {
      signed int v41 = AV1_Syntax::get_bits(a1, "quniform-2", 1u) - v48 + 2 * v41;
    }
  }
  else
  {
    signed int v41 = 0;
  }
  int v42 = v41 + v27;
LABEL_50:
  int v49 = 4096 - (v35 >> 1);
  unsigned int v50 = (unsigned __int16)v42 + 1;
  int v51 = v49 - (v50 >> 1);
  if ((v42 & 1) == 0) {
    int v51 = v49 + ((unsigned __int16)(v42 & 0xFFFE) >> 1);
  }
  if ((unsigned __int16)v42 <= 2 * (unsigned __int16)v49) {
    int v52 = v51;
  }
  else {
    int v52 = v42;
  }
  int v53 = 0x2000 - v52;
  int v54 = v36 - (v50 >> 1);
  if ((v42 & 1) == 0) {
    int v54 = v36 + ((unsigned __int16)(v42 & 0xFFFE) >> 1);
  }
  if ((unsigned __int16)v42 <= 2 * (unsigned __int16)v36) {
    int v42 = v54;
  }
  if ((unsigned __int16)((v35 >> 1) + 4096) > 0x1000u) {
    int v42 = v53;
  }
  int v55 = (v42 - 4096) << 16 >> 15;
  *(_DWORD *)(v150 + 12) = v55;
  if (bits)
  {
    int v56 = *(_DWORD *)(v150 + 8);
    *(_DWORD *)(v150 + 16) = -v55;
    *(_DWORD *)(v150 + 20) = v56;
  }
  else
  {
    int v57 = 0;
    int v58 = 0;
    unsigned int v59 = a3[4];
    int v60 = (v59 >> 1) + 4096;
    unsigned int v61 = 3;
    do
    {
      if (!AV1_Syntax::get_bits(a1, "subexpfin-1", 1u))
      {
        int v67 = AV1_Syntax::get_bits(a1, "subexpfin-2", v61) + v57;
        uint64_t v66 = v150;
        goto LABEL_79;
      }
      int v62 = 1 << v61;
      unsigned int v61 = v58 + 3;
      int v63 = 24 << v58++;
      v57 += v62;
    }
    while (v63 + v57 <= 0x2000);
    unsigned int v64 = (unsigned __int16)(8193 - v57);
    if (v64 >= 2)
    {
      unsigned int v68 = 0;
      int v69 = 4;
      unsigned int v70 = (unsigned __int16)(8193 - v57);
      do
      {
        int v71 = 1 << v69;
        unsigned int v72 = v70 >> (1 << v69);
        if (!v72) {
          int v71 = 0;
        }
        v68 += v71;
        if (v72) {
          v70 >>= 1 << v69;
        }
        --v69;
      }
      while (v69 != -1);
      signed int v73 = (1 << (v68 + 1)) - v64;
      signed int v65 = AV1_Syntax::get_bits(a1, "quniform-1", v68);
      uint64_t v66 = v150;
      if (v65 >= v73) {
        signed int v65 = AV1_Syntax::get_bits(a1, "quniform-2", 1u) - v73 + 2 * v65;
      }
    }
    else
    {
      signed int v65 = 0;
      uint64_t v66 = v150;
    }
    int v67 = v65 + v57;
LABEL_79:
    int v74 = 0;
    int v75 = 0;
    int v76 = 4096 - (v59 >> 1);
    unsigned int v77 = (unsigned __int16)v67 + 1;
    int v78 = v76 - (v77 >> 1);
    if ((v67 & 1) == 0) {
      int v78 = v76 + ((unsigned __int16)(v67 & 0xFFFE) >> 1);
    }
    if ((unsigned __int16)v67 <= 2 * (unsigned __int16)v76) {
      int v79 = v78;
    }
    else {
      int v79 = v67;
    }
    int v80 = 0x2000 - v79;
    int v81 = v60 - (v77 >> 1);
    if ((v67 & 1) == 0) {
      int v81 = v60 + ((unsigned __int16)(v67 & 0xFFFE) >> 1);
    }
    if ((unsigned __int16)v67 <= 2 * (unsigned __int16)v60) {
      int v67 = v81;
    }
    if ((unsigned __int16)((v59 >> 1) + 4096) > 0x1000u) {
      int v67 = v80;
    }
    *(_DWORD *)(v66 + 16) = (v67 - 4096) << 16 >> 15;
    unsigned int v82 = a3[5];
    int v83 = (v82 >> 1) - 28672;
    unsigned int v84 = 3;
    do
    {
      if (!AV1_Syntax::get_bits(a1, "subexpfin-1", 1u))
      {
        int v90 = AV1_Syntax::get_bits(a1, "subexpfin-2", v84) + v74;
        uint64_t v89 = v150;
        goto LABEL_105;
      }
      int v85 = 1 << v84;
      unsigned int v84 = v75 + 3;
      int v86 = 24 << v75++;
      v74 += v85;
    }
    while (v86 + v74 <= 0x2000);
    unsigned int v87 = (unsigned __int16)(8193 - v74);
    if (v87 >= 2)
    {
      unsigned int v91 = 0;
      int v92 = 4;
      unsigned int v93 = (unsigned __int16)(8193 - v74);
      do
      {
        int v94 = 1 << v92;
        unsigned int v95 = v93 >> (1 << v92);
        if (!v95) {
          int v94 = 0;
        }
        v91 += v94;
        if (v95) {
          v93 >>= 1 << v92;
        }
        --v92;
      }
      while (v92 != -1);
      signed int v96 = (1 << (v91 + 1)) - v87;
      signed int v88 = AV1_Syntax::get_bits(a1, "quniform-1", v91);
      uint64_t v89 = v150;
      if (v88 >= v96) {
        signed int v88 = AV1_Syntax::get_bits(a1, "quniform-2", 1u) - v96 + 2 * v88;
      }
    }
    else
    {
      signed int v88 = 0;
      uint64_t v89 = v150;
    }
    int v90 = v88 + v74;
LABEL_105:
    if ((unsigned __int16)((v82 >> 1) - 28672) <= 0x1000u)
    {
      int v99 = (unsigned __int16)v90;
      if ((unsigned __int16)v90 <= 2 * (unsigned __int16)v83)
      {
        int v90 = v83 + ((unsigned __int16)(v90 & 0xFFFE) >> 1);
        if (v99) {
          int v90 = v83 - ((v99 + 1) >> 1);
        }
      }
    }
    else
    {
      int v97 = -28672 - (v82 >> 1);
      int v98 = (unsigned __int16)v90;
      if ((unsigned __int16)v90 <= 2 * (unsigned __int16)(-28672 - (v82 >> 1)))
      {
        int v90 = v97 + ((unsigned __int16)(v90 & 0xFFFE) >> 1);
        if (v98) {
          int v90 = v97 - ((v98 + 1) >> 1);
        }
      }
      int v90 = 0x2000 - v90;
    }
    *(_DWORD *)(v89 + 20) = ((v90 - 4096) << 16 >> 15) + 0x10000;
  }
  char v20 = 10;
  char v19 = 12;
  int v149 = 1024;
LABEL_115:
  int v100 = 0;
  int v101 = 0;
  int v102 = 1 << v19;
  int v103 = (*a3 >> v20) + (1 << v19);
  char v147 = v20;
  int v148 = 2 * (1 << v19);
  int v104 = (unsigned __int16)(2 * (1 << v19)) | 1;
  unsigned int v105 = 3;
  do
  {
    if (!AV1_Syntax::get_bits(a1, "subexpfin-1", 1u))
    {
      int v110 = AV1_Syntax::get_bits(a1, "subexpfin-2", v105) + v100;
      char v111 = v147;
      goto LABEL_130;
    }
    int v106 = 1 << v105;
    unsigned int v105 = v101 + 3;
    int v107 = 24 << v101++;
    v100 += v106;
  }
  while (v107 + v100 < v104);
  unsigned int v108 = (unsigned __int16)(v104 - v100);
  if (v108 >= 2)
  {
    unsigned int v112 = 0;
    int v113 = 4;
    unsigned int v114 = (unsigned __int16)(v104 - v100);
    do
    {
      int v115 = 1 << v113;
      unsigned int v116 = v114 >> (1 << v113);
      if (!v116) {
        int v115 = 0;
      }
      v112 += v115;
      if (v116) {
        v114 >>= 1 << v113;
      }
      --v113;
    }
    while (v113 != -1);
    signed int v117 = (1 << (v112 + 1)) - v108;
    signed int v109 = AV1_Syntax::get_bits(a1, "quniform-1", v112);
    if (v109 >= v117) {
      signed int v109 = AV1_Syntax::get_bits(a1, "quniform-2", 1u) - v117 + 2 * v109;
    }
  }
  else
  {
    LOWORD(v109) = 0;
  }
  char v111 = v147;
  LOWORD(v110) = v109 + v100;
LABEL_130:
  int v118 = 0;
  int v119 = 0;
  unsigned int v120 = (unsigned __int16)v110 + 1;
  int v121 = v148 - v103 - (v120 >> 1);
  if ((v110 & 1) == 0) {
    int v121 = v148 - v103 + ((unsigned __int16)(v110 & 0xFFFE) >> 1);
  }
  unsigned int v122 = 2 * (unsigned __int16)v103;
  if ((unsigned __int16)v110 > 2 * (unsigned __int16)(v148 - v103)) {
    LOWORD(v121) = v110;
  }
  __int16 v123 = v148 - v121;
  unsigned int v124 = v103 - (v120 >> 1);
  if (v110) {
    LOWORD(v125) = v124;
  }
  else {
    int v125 = v103 + ((unsigned __int16)(v110 & 0xFFFE) >> 1);
  }
  if (v122 >= (unsigned __int16)v110) {
    LOWORD(v110) = v125;
  }
  if (v122 > v104) {
    LOWORD(v110) = v123;
  }
  *(_DWORD *)uint64_t v150 = v149 * (__int16)(v110 - v102);
  int v126 = (a3[1] >> v111) + v102;
  unsigned int v127 = 3;
  do
  {
    if (!AV1_Syntax::get_bits(a1, "subexpfin-1", 1u))
    {
      int v132 = AV1_Syntax::get_bits(a1, "subexpfin-2", v127) + v118;
      goto LABEL_156;
    }
    int v128 = 1 << v127;
    unsigned int v127 = v119 + 3;
    int v129 = 24 << v119++;
    v118 += v128;
  }
  while (v129 + v118 < v104);
  unsigned int v130 = (unsigned __int16)(v104 - v118);
  if (v130 >= 2)
  {
    unsigned int v133 = 0;
    int v134 = 4;
    unsigned int v135 = (unsigned __int16)(v104 - v118);
    do
    {
      int v136 = 1 << v134;
      unsigned int v137 = v135 >> (1 << v134);
      if (!v137) {
        int v136 = 0;
      }
      v133 += v136;
      if (v137) {
        v135 >>= 1 << v134;
      }
      --v134;
    }
    while (v134 != -1);
    signed int v138 = (1 << (v133 + 1)) - v130;
    signed int v131 = AV1_Syntax::get_bits(a1, "quniform-1", v133);
    if (v131 >= v138) {
      signed int v131 = AV1_Syntax::get_bits(a1, "quniform-2", 1u) - v138 + 2 * v131;
    }
  }
  else
  {
    LOWORD(v131) = 0;
  }
  LOWORD(v132) = v131 + v118;
LABEL_156:
  unsigned int v139 = 2 * (unsigned __int16)v126;
  unsigned int v140 = (unsigned __int16)v132 + 1;
  int v141 = v148 - v126 - (v140 >> 1);
  if ((v132 & 1) == 0) {
    int v141 = v148 - v126 + ((unsigned __int16)(v132 & 0xFFFE) >> 1);
  }
  if ((unsigned __int16)v132 <= 2 * (unsigned __int16)(v148 - v126)) {
    __int16 v142 = v141;
  }
  else {
    __int16 v142 = v132;
  }
  __int16 v143 = v148 - v142;
  unsigned int v144 = v126 - (v140 >> 1);
  if (v132) {
    LOWORD(v145) = v144;
  }
  else {
    int v145 = v126 + ((unsigned __int16)(v132 & 0xFFFE) >> 1);
  }
  if (v139 >= (unsigned __int16)v132) {
    LOWORD(v132) = v145;
  }
  if (v139 > v104) {
    LOWORD(v132) = v143;
  }
  a2 = v150;
  *(_DWORD *)(v150 + 4) = v149 * (__int16)(v132 - v102);
  if (*(char *)(v150 + 40) <= 3)
  {
LABEL_169:
    BOOL result = AV1_Syntax::av1_get_shear_params(a1, a2);
    if (!result) {
      return result;
    }
  }
  return 1;
}

BOOL AV1_Syntax::av1_get_shear_params(AV1_Syntax *a1, uint64_t a2)
{
  signed int v3 = *(_DWORD *)(a2 + 8);
  if (v3 < 1) {
    return 0;
  }
  v4.i32[0] = v3;
  v4.i32[1] = *(_DWORD *)(a2 + 12);
  int32x2_t v5 = vmax_s32(vmin_s32(v4, (int32x2_t)0x7FFF00017FFFLL), (int32x2_t)0xFFFF800000008000);
  *(_WORD *)(a2 + 34) = v5.i16[2];
  *(_WORD *)(a2 + 32) = v5.i16[0];
  __int16 v24 = 0;
  int v6 = AV1_Syntax::resolve_divisor_32(a1, v3, &v24);
  if (*(int *)(a2 + 8) >= 0) {
    LOWORD(v7) = v6;
  }
  else {
    int v7 = -v6;
  }
  int v8 = *(_DWORD *)(a2 + 16);
  uint64_t v9 = (v8 * (uint64_t)(__int16)v7) << 16;
  uint64_t v10 = 1 << v24 >> 1;
  uint64_t v11 = (v10 + v9) >> v24;
  uint64_t v12 = (v10 - v9) >> v24;
  if (((v8 * (uint64_t)(__int16)v7) & 0x800000000000) != 0) {
    uint64_t v13 = -v12;
  }
  else {
    LODWORD(v13) = v11;
  }
  if ((int)v13 >= 0x7FFF) {
    LODWORD(v13) = 0x7FFF;
  }
  if ((int)v13 <= -32768) {
    LODWORD(v13) = -32768;
  }
  uint64_t v14 = (__int16)v7 * (uint64_t)v8 * *(int *)(a2 + 12);
  if (v14 < 0) {
    uint64_t v15 = -((v10 - v14) >> v24);
  }
  else {
    uint64_t v15 = (v10 + v14) >> v24;
  }
  int v16 = *(_DWORD *)(a2 + 20) - v15;
  if (v16 >= 98303) {
    int v16 = 98303;
  }
  if (v16 <= 0x8000) {
    LOWORD(v16) = 0x8000;
  }
  int v17 = *(unsigned __int16 *)(a2 + 32);
  if (*(__int16 *)(a2 + 32) < 0) {
    unsigned int v18 = -((32 - v17) >> 6);
  }
  else {
    unsigned int v18 = (v17 + 32) >> 6;
  }
  LOWORD(v18) = (_WORD)v18 << 6;
  *(_WORD *)(a2 + 32) = v18;
  int v19 = *(unsigned __int16 *)(a2 + 34);
  if ((v19 & 0x8000) != 0) {
    unsigned int v20 = -((32 - v19) >> 6);
  }
  else {
    unsigned int v20 = (v19 + 32) >> 6;
  }
  LOWORD(v20) = (_WORD)v20 << 6;
  *(_WORD *)(a2 + 34) = v20;
  if ((v13 & 0x8000) != 0) {
    unsigned int v21 = -((32 - v13) >> 6);
  }
  else {
    unsigned int v21 = (v13 + 32) >> 6;
  }
  LOWORD(v21) = (_WORD)v21 << 6;
  *(_WORD *)(a2 + 36) = v21;
  if ((v16 & 0x8000) != 0) {
    unsigned int v22 = -((32 - (__int16)v16) >> 6);
  }
  else {
    unsigned int v22 = ((__int16)v16 + 32) >> 6;
  }
  LOWORD(v22) = (_WORD)v22 << 6;
  *(_WORD *)(a2 + 38) = v22;
  unsigned int v18 = (__int16)v18;
  if ((v18 & 0x8000u) != 0) {
    unsigned int v18 = -(__int16)v18;
  }
  unsigned int v20 = (__int16)v20;
  if ((v20 & 0x8000u) != 0) {
    unsigned int v20 = -(__int16)v20;
  }
  if ((7 * v20 + 4 * v18) >> 16) {
    return 0;
  }
  unsigned int v21 = (__int16)v21;
  if ((v21 & 0x8000u) != 0) {
    unsigned int v21 = -(__int16)v21;
  }
  unsigned int v22 = (__int16)v22;
  if ((v22 & 0x8000u) != 0) {
    unsigned int v22 = -(__int16)v22;
  }
  return v22 + v21 < 0x4000;
}

uint64_t AV1_Syntax::resolve_divisor_32(AV1_Syntax *this, unsigned int a2, __int16 *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a2 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315394;
    uint64_t v14 = "get_msb";
    __int16 v15 = 1024;
    int v16 = 4495;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v13, 0x12u);
  }
  int v5 = 0;
  int v6 = 4;
  unsigned int v7 = a2;
  do
  {
    int v8 = 1 << v6;
    unsigned int v9 = v7 >> (1 << v6);
    if (!v9) {
      int v8 = 0;
    }
    v5 += v8;
    if (v9) {
      v7 >>= 1 << v6;
    }
    --v6;
  }
  while (v6 != -1);
  *a3 = v5;
  unsigned int v10 = (-1 << v5) + a2;
  if (v5 << 16 > 0x80000) {
    int v11 = (int)(v10 + (1 << (v5 - 8) >> 1)) >> (v5 - 8);
  }
  else {
    int v11 = v10 << (8 - v5);
  }
  if (v11 >= 257 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315394;
    uint64_t v14 = "resolve_divisor_32";
    __int16 v15 = 1024;
    int v16 = 4597;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v13, 0x12u);
    LOWORD(v5) = *a3;
  }
  *a3 = v5 + 14;
  return av1_div_lut[v11];
}

uint64_t AV1_Syntax::set_frame_refs(void)::{lambda(void const*,void const*)#1}::__invoke(_DWORD *a1, _DWORD *a2)
{
  int v3 = a1[4];
  int v4 = a2[4];
  uint64_t result = (v3 - v4);
  if (v3 == v4) {
    return (*a1 - *a2);
  }
  return result;
}

uint64_t AV1_Syntax::read_obu_header(AV1_Syntax *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  **((_DWORD **)this + 10) = 1;
  *(_DWORD *)(*((void *)this + 10) + 4) = AV1_Syntax::get_bits(this, "obu_forbidden_bit", 1u);
  *(_DWORD *)(*((void *)this + 10) + 8) = AV1_Syntax::get_bits(this, "obu_type", 4u);
  *(_DWORD *)(*((void *)this + 10) + 16) = AV1_Syntax::get_bits(this, "obu_extension_flag", 1u);
  *(_DWORD *)(*((void *)this + 10) + 12) = AV1_Syntax::get_bits(this, "obu_has_size_field", 1u);
  int bits = AV1_Syntax::get_bits(this, "obu_reserved_1bit", 1u);
  if (bits)
  {
    if ((*((unsigned char *)this + 15526) & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
    int v3 = bits;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    int v14 = 136315394;
    __int16 v15 = "read_obu_header";
    __int16 v16 = 1024;
    LODWORD(v17) = v3;
    int v4 = &_os_log_internal;
    int v5 = "AppleAVD: %s: obu_reserved_1bit must be set to 0. obu_reserved_1bit %d\n";
    goto LABEL_19;
  }
  int v6 = (_DWORD *)*((void *)this + 10);
  v6[5] = 0;
  v6[6] = 0;
  if (!v6[4]) {
    return 0;
  }
  if (*((_DWORD *)this + 11) <= 7u && (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) <= 0)
  {
    if ((*((unsigned char *)this + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v13 = *((void *)this + 4);
    int v14 = 136315394;
    __int16 v15 = "read_obu_header";
    __int16 v16 = 2048;
    uint64_t v17 = v13;
    int v4 = &_os_log_internal;
    int v5 = "AppleAVD: %s: m_buf_len should > 1 byte because there is extension header. m_buf_len = %lu\n";
    uint32_t v12 = 22;
    goto LABEL_20;
  }
  ++*v6;
  unsigned int v7 = AV1_Syntax::get_bits(this, "temporal_id", 3u);
  *(_DWORD *)(*((void *)this + 10) + 20) = v7;
  if (v7 < 8)
  {
    unsigned int v10 = AV1_Syntax::get_bits(this, "spatial_id", 2u);
    *(_DWORD *)(*((void *)this + 10) + 24) = v10;
    if (v10 < 4)
    {
      uint64_t result = AV1_Syntax::get_bits(this, "extension_header_reserved_3bits", 3u);
      if (!result) {
        return result;
      }
      if (*((unsigned char *)this + 15526))
      {
        int v11 = result;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = 136315394;
          __int16 v15 = "read_obu_header";
          __int16 v16 = 1024;
          LODWORD(v17) = v11;
          int v4 = &_os_log_internal;
          int v5 = "AppleAVD: %s: extension_header_reserved_3bits must be set to 0. extension_header_reserved_3bits %d\n";
          goto LABEL_19;
        }
      }
    }
    else
    {
      unsigned int v8 = v10;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v8 = v7;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_10:
      int v14 = 136315394;
      __int16 v15 = "read_obu_header";
      __int16 v16 = 1024;
      LODWORD(v17) = v8;
      int v4 = &_os_log_internal;
      int v5 = "AppleAVD: %s: value %d out of range!\n";
LABEL_19:
      uint32_t v12 = 18;
LABEL_20:
      _os_log_impl(&dword_223977000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v14, v12);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t AV1_Syntax::timing_info(AV1_Syntax *a1, _DWORD *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int bits = AV1_Syntax::get_bits(a1, "num_units_in_display_tick", 0x20u);
  *a2 = bits;
  if (!bits)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    return 0xFFFFFFFFLL;
  }
  int v5 = AV1_Syntax::get_bits(a1, "time_scale", 0x20u);
  a2[1] = v5;
  if (!v5)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_12:
      int v15 = 136315394;
      __int16 v16 = "timing_info";
      __int16 v17 = 1024;
      int v18 = 0;
      unsigned int v8 = &_os_log_internal;
      unsigned int v9 = "AppleAVD: %s: value %d out of range!\n";
      uint32_t v10 = 18;
LABEL_13:
      _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v15, v10);
    }
    return 0xFFFFFFFFLL;
  }
  if (!*a2)
  {
    if ((*((unsigned char *)a1 + 15526) & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
    int v13 = v5;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    int v15 = 136315650;
    __int16 v16 = "timing_info";
    __int16 v17 = 1024;
    int v18 = 0;
    __int16 v19 = 1024;
    int v20 = v13;
    unsigned int v8 = &_os_log_internal;
    unsigned int v9 = "AppleAVD: %s: num_units_in_display_tick and time_scale must be greater than 0. num_units_in_display_tick %d time_scale %d\n";
    uint32_t v10 = 24;
    goto LABEL_13;
  }
  int v6 = AV1_Syntax::get_bits(a1, "equal_picture_interval", 1u);
  a2[2] = v6;
  if (!v6) {
    return 0;
  }
  unsigned int v7 = 0;
  while (!AV1_Syntax::get_bits(a1, "num_ticks_per_picture_minus_1", 1u))
  {
    if (++v7 == 32) {
      goto LABEL_22;
    }
  }
  int v14 = AV1_Syntax::get_bits(a1, "num_ticks_per_picture_minus_1", v7);
  if (v14 + ~(-1 << v7) != -1)
  {
    uint64_t v11 = 0;
    a2[3] = v14 - (-1 << v7);
    return v11;
  }
LABEL_22:
  if ((*((unsigned char *)a1 + 15526) & 1) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = 0xFFFFFFFFLL;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315394;
    __int16 v16 = "timing_info";
    __int16 v17 = 1024;
    int v18 = -1;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: um_ticks_per_picture_minus_1 cannot be (1 << 32) − 1. num_ticks_per_picture_minus_1 %d\n", (uint8_t *)&v15, 0x12u);
  }
  return v11;
}

uint64_t AV1_Syntax::op_parameters_info(AV1_Syntax *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned int v5 = *(unsigned __int8 *)(a2 + 276);
  unsigned int bits = AV1_Syntax::get_bits(a1, "decoder_buffer_delay", v5);
  *(_DWORD *)(a3 + 24) = bits;
  unint64_t v7 = ~(-1 << v5);
  if (bits > v7)
  {
    unsigned int v8 = bits;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v9 = AV1_Syntax::get_bits(a1, "encoder_buffer_delay", v5);
  *(_DWORD *)(a3 + 28) = v9;
  if (v9 > v7)
  {
    unsigned int v8 = v9;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_6:
      int v12 = 136315394;
      int v13 = "op_parameters_info";
      __int16 v14 = 1024;
      unsigned int v15 = v8;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v12, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  char v11 = AV1_Syntax::get_bits(a1, "low_delay_mode_flag", 1u);
  uint64_t result = 0;
  *(unsigned char *)(a3 + 32) = v11;
  return result;
}

uint64_t AV1_Syntax::color_config(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int bits = AV1_Syntax::get_bits((AV1_Syntax *)a1, "high_bitdepth", 1u);
  int v7 = *(_DWORD *)(a2 + 72);
  BOOL v8 = bits != 0;
  if (v7 != 2 || bits == 0)
  {
    if (v7 > 2)
    {
      if ((*(unsigned char *)(a1 + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v31 = 136315394;
      int v32 = "color_config";
      __int16 v33 = 1024;
      unsigned int v34 = v7;
      int v20 = &_os_log_internal;
      uint64_t v21 = "AppleAVD: %s: Unsupported profile/bit-depth combination. seq_params->profile %d\n";
      goto LABEL_66;
    }
    if (bits) {
      int v10 = 10;
    }
    else {
      int v10 = 8;
    }
    *(_DWORD *)(a2 + 76) = v10;
  }
  else
  {
    BOOL v8 = 1;
    if (AV1_Syntax::get_bits((AV1_Syntax *)a1, "twelve_bit", 1u)) {
      int v12 = 12;
    }
    else {
      int v12 = 10;
    }
    *(_DWORD *)(a2 + 76) = v12;
    int v7 = *(_DWORD *)(a2 + 72);
  }
  if (a3) {
    char v13 = v8;
  }
  else {
    char v13 = 1;
  }
  *(unsigned char *)(a2 + 80) = v13;
  if (v7 == 1) {
    char v14 = 0;
  }
  else {
    char v14 = AV1_Syntax::get_bits((AV1_Syntax *)a1, "mono_chrome", 1u);
  }
  *(unsigned char *)(a2 + 81) = v14;
  if (v14) {
    int v15 = 1;
  }
  else {
    int v15 = 3;
  }
  *(_DWORD *)(*(void *)(a1 + 96) + 440) = v15;
  if (AV1_Syntax::get_bits((AV1_Syntax *)a1, "color_description_present_flag", 1u))
  {
    unsigned int v16 = AV1_Syntax::get_bits((AV1_Syntax *)a1, "color_primaries", 8u);
    *(_DWORD *)(a2 + 84) = v16;
    if (v16 >= 0x100)
    {
      unsigned int v17 = v16;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_65;
      }
      return 0xFFFFFFFFLL;
    }
    unsigned int v22 = AV1_Syntax::get_bits((AV1_Syntax *)a1, "transfer_characteristics", 8u);
    *(_DWORD *)(a2 + 88) = v22;
    if (v22 >= 0x100)
    {
      unsigned int v17 = v22;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_65;
      }
      return 0xFFFFFFFFLL;
    }
    unsigned int v17 = AV1_Syntax::get_bits((AV1_Syntax *)a1, "matrix_coefficients", 8u);
    *(_DWORD *)(a2 + 92) = v17;
    if (v17 >= 0x100)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_65;
      }
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(void *)(a2 + 84) = 0x200000002;
    unsigned int v17 = 2;
    *(_DWORD *)(a2 + 92) = 2;
  }
  if (*(unsigned char *)(a2 + 81))
  {
    int v18 = AV1_Syntax::get_bits((AV1_Syntax *)a1, "color_range", 1u);
    uint64_t result = 0;
    *(_DWORD *)(a2 + 96) = v18;
    *(void *)(a2 + 100) = 0x100000001;
    *(_DWORD *)(a2 + 108) = 0;
    *(unsigned char *)(a2 + 112) = 0;
    return result;
  }
  if (*(_DWORD *)(a2 + 84) == 1 && *(_DWORD *)(a2 + 88) == 13 && !v17)
  {
    *(_DWORD *)(a2 + 104) = 0;
    *(void *)(a2 + 96) = 1;
    int v23 = *(_DWORD *)(a2 + 72);
    if (v23 != 1 && (v23 != 2 || *(_DWORD *)(a2 + 76) != 12))
    {
      if ((*(unsigned char *)(a1 + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v31 = 136315138;
      int v32 = "color_config";
      int v20 = &_os_log_internal;
      uint64_t v21 = "AppleAVD: %s: Unsupported bitstream, sRGB colorspace not compatible with specified profile\n";
      goto LABEL_76;
    }
    goto LABEL_72;
  }
  *(_DWORD *)(a2 + 96) = AV1_Syntax::get_bits((AV1_Syntax *)a1, "color_range", 1u);
  int v24 = *(_DWORD *)(a2 + 72);
  if (v24 == 1)
  {
    *(_DWORD *)(a2 + 100) = 0;
    *(_DWORD *)(a2 + 104) = 0;
    goto LABEL_59;
  }
  if (!v24)
  {
    *(void *)(a2 + 100) = 0x100000001;
    goto LABEL_59;
  }
  if (*(_DWORD *)(a2 + 76) == 12)
  {
    int v25 = AV1_Syntax::get_bits((AV1_Syntax *)a1, "subsampling_x", 1u);
    *(_DWORD *)(a2 + 100) = v25;
    if (v25)
    {
      int v26 = AV1_Syntax::get_bits((AV1_Syntax *)a1, "subsampling_y", 1u);
      *(_DWORD *)(a2 + 104) = v26;
      LOBYTE(v24) = v26 == 0;
      goto LABEL_59;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  else
  {
    *(void *)(a2 + 100) = 1;
  }
  LOBYTE(v24) = 1;
LABEL_59:
  int v27 = *(_DWORD *)(a2 + 100);
  if (*(_DWORD *)(a2 + 92))
  {
    if (!v27) {
      LOBYTE(v24) = 1;
    }
    if ((v24 & 1) == 0)
    {
      unsigned int v28 = AV1_Syntax::get_bits((AV1_Syntax *)a1, "chroma_sample_position", 2u);
      *(_DWORD *)(a2 + 108) = v28;
      if (v28 >= 3)
      {
        unsigned int v17 = v28;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
LABEL_65:
          int v31 = 136315394;
          int v32 = "color_config";
          __int16 v33 = 1024;
          unsigned int v34 = v17;
          int v20 = &_os_log_internal;
          uint64_t v21 = "AppleAVD: %s: value %d out of range!\n";
LABEL_66:
          uint32_t v29 = 18;
LABEL_67:
          _os_log_impl(&dword_223977000, v20, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)&v31, v29);
        }
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if (v27) {
      LOBYTE(v24) = 0;
    }
    if ((v24 & 1) == 0)
    {
      if ((*(unsigned char *)(a1 + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v31 = 136315138;
      int v32 = "color_config";
      int v20 = &_os_log_internal;
      uint64_t v21 = "AppleAVD: %s: Unsupported bitstream. Identity CICP Matrix incompatible with non 4:4:4 color sampling\n";
LABEL_76:
      uint32_t v29 = 12;
      goto LABEL_67;
    }
  }
LABEL_72:
  char v30 = AV1_Syntax::get_bits((AV1_Syntax *)a1, "separate_uv_delta_q", 1u);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 112) = v30;
  return result;
}

uint64_t AV1_Syntax::check_trailing_bits(AV1_Syntax *this)
{
  int v1 = -*((_DWORD *)this + 11) & 7;
  if (AV1_Syntax::get_bits(this, "trailing", 8 - v1) == 1 << (v1 ^ 7)) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t AV1_Syntax::read_tile_group_header(AV1_Syntax *this, int *a2, int *a3, int a4, unsigned int *a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  int v9 = *((_DWORD *)this + 4);
  int v10 = *((_DWORD *)this + 2);
  int v11 = *((_DWORD *)this + 11);
  int v12 = (_DWORD *)*((void *)this + 12);
  int v13 = v12[191] * v12[192];
  if (v12[336]) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = v13 < 2;
  }
  if (v14) {
    goto LABEL_15;
  }
  int bits = AV1_Syntax::get_bits(this, "tile_start_and_end_present_flag", 1u);
  if (a4 && bits)
  {
    if ((*((unsigned char *)this + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    int v32 = 136315138;
    __int16 v33 = "read_tile_group_header";
    unsigned int v17 = &_os_log_internal;
    int v18 = "AppleAVD: %s: For OBU_FRAME type obu tile_start_and_end_present_flag must be 0. \n";
    uint32_t v19 = 12;
    goto LABEL_36;
  }
  int v20 = (_DWORD *)*((void *)this + 12);
  if (v20[336] || bits == 0)
  {
LABEL_15:
    *a2 = 0;
    int v22 = v13 - 1;
    *a3 = v13 - 1;
  }
  else
  {
    unsigned int v29 = v20[197] + v20[198];
    int v30 = AV1_Syntax::get_bits(this, "tile_bits", v29);
    int v22 = v30;
    *a2 = v30;
    if (v30 < 0 || v30 > *((_DWORD *)this + 3096))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_35;
    }
    int v31 = AV1_Syntax::get_bits(this, "tile_bits", v29);
    int v22 = v31;
    *a3 = v31;
    if (v31 < 0 || v31 > v13)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
LABEL_35:
      int v32 = 136315394;
      __int16 v33 = "read_tile_group_header";
      __int16 v34 = 1024;
      int v35 = v22;
      unsigned int v17 = &_os_log_internal;
      int v18 = "AppleAVD: %s: value %d out of range!\n";
      uint32_t v19 = 18;
      goto LABEL_36;
    }
  }
  int v23 = *a2;
  int v24 = *((_DWORD *)this + 3096);
  if (v23 != v24)
  {
    if ((*((unsigned char *)this + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    int v32 = 136315650;
    __int16 v33 = "read_tile_group_header";
    __int16 v34 = 1024;
    int v35 = v23;
    __int16 v36 = 1024;
    int v37 = v24;
    unsigned int v17 = &_os_log_internal;
    int v18 = "AppleAVD: %s: tg_start (%d) must be equal to %d \n";
LABEL_24:
    uint32_t v19 = 24;
LABEL_36:
    _os_log_impl(&dword_223977000, v17, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v32, v19);
    return 0xFFFFFFFFLL;
  }
  if (v23 > v22)
  {
    if ((*((unsigned char *)this + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    int v32 = 136315650;
    __int16 v33 = "read_tile_group_header";
    __int16 v34 = 1024;
    int v35 = v22;
    __int16 v36 = 1024;
    int v37 = v23;
    unsigned int v17 = &_os_log_internal;
    int v18 = "AppleAVD: %s: tg_end (%d) must be greater than or equal to tg_start (%d) \n";
    goto LABEL_24;
  }
  if (v22 >= v13)
  {
    if ((*((unsigned char *)this + 15526) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    int v32 = 136315650;
    __int16 v33 = "read_tile_group_header";
    __int16 v34 = 1024;
    int v35 = v22;
    __int16 v36 = 1024;
    int v37 = v13;
    unsigned int v17 = &_os_log_internal;
    int v18 = "AppleAVD: %s: tg_end (%d) must be less than NumTiles (%d) \n";
    goto LABEL_24;
  }
  int v25 = 8 * (v9 - v10) - v11;
  if (v22 == v13 - 1) {
    int v26 = 0;
  }
  else {
    int v26 = v22 + 1;
  }
  *((_DWORD *)this + 3096) = v26;
  int v27 = v25 + *((_DWORD *)this + 11);
  if ((-v27 & 7) != 0)
  {
    AV1_Syntax::get_bits(this, "skip bits", 8 - (-v27 & 7));
    int v27 = v25 + *((_DWORD *)this + 11);
  }
  uint64_t result = 0;
  *a5 = (8 * (*((_DWORD *)this + 4) - *((_DWORD *)this + 2)) - v27 + 7) >> 3;
  return result;
}

uint64_t AV1_Syntax::metadata_itut_t35(AV1_Syntax *this, int a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned int bits = AV1_Syntax::get_bits(this, "itu_t_t35_country_code", 8u);
  unsigned int v5 = bits;
  *((_DWORD *)this + 3071) = bits;
  if (bits >= 0x100)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    return 0xFFFFFFFFLL;
  }
  if (bits == 255)
  {
    unsigned int v6 = AV1_Syntax::get_bits(this, "itu_t_t35_country_code_extension_byte", 8u);
    *((_DWORD *)this + 3072) = v6;
    if (v6 >= 0x100)
    {
      unsigned int v5 = v6;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
LABEL_7:
        int v14 = 136315394;
        int v15 = "metadata_itut_t35";
        __int16 v16 = 1024;
        int v17 = v5;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v14, 0x12u);
      }
      return 0xFFFFFFFFLL;
    }
    int v8 = a2 - 2;
  }
  else
  {
    int v8 = a2 - 1;
  }
  unsigned int v9 = *((_DWORD *)this + 11);
  if ((v9 & 7) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 136315394;
    int v15 = "metadata_itut_t35";
    __int16 v16 = 1024;
    int v17 = 1101;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v14, 0x12u);
    unsigned int v9 = *((_DWORD *)this + 11);
  }
  int v10 = (v8 & (v8 >> 31)) - 1;
  uint64_t v11 = v8 - 1;
  while (1)
  {
    BOOL v12 = __OFSUB__(v8--, 1);
    if (v8 < 0 != v12) {
      break;
    }
    if (*(unsigned __int8 *)(*((void *)this + 2) - (v9 >> 3) + v11--)) {
      goto LABEL_19;
    }
  }
  int v8 = v10;
LABEL_19:
  if (v8 >= 1)
  {
    do
    {
      AV1_Syntax::get_bits(this, "itu_t_t35_payload_bytes", 8u);
      --v8;
    }
    while (v8);
  }
  return 0;
}

uint64_t AV1_Syntax::metadata_hdr_cll(AV1_Syntax *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unsigned int bits = AV1_Syntax::get_bits(this, "max_cll", 0x10u);
  *((_DWORD *)this + 3073) = bits;
  if (bits >= 0x10000)
  {
    unsigned int v3 = bits;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v4 = AV1_Syntax::get_bits(this, "max_fall", 0x10u);
  *((_DWORD *)this + 3074) = v4;
  if (v4 >= 0x10000)
  {
    unsigned int v3 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_6:
      int v6 = 136315394;
      int v7 = "metadata_hdr_cll";
      __int16 v8 = 1024;
      unsigned int v9 = v3;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v6, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t AV1_Syntax::metadata_timecode(AV1_Syntax *this)
{
  AV1_Syntax::get_bits(this, "counting_type", 5u);
  int bits = AV1_Syntax::get_bits(this, "full_timestamp_flag", 1u);
  AV1_Syntax::get_bits(this, "discontinuity_flag", 1u);
  AV1_Syntax::get_bits(this, "cnt_dropped_flag", 1u);
  AV1_Syntax::get_bits(this, "n_frames", 9u);
  if (bits)
  {
    AV1_Syntax::get_bits(this, "seconds_value", 6u);
    AV1_Syntax::get_bits(this, "minutes_value", 6u);
LABEL_3:
    AV1_Syntax::get_bits(this, "hours_value", 5u);
    goto LABEL_4;
  }
  if (AV1_Syntax::get_bits(this, "seconds_flag", 1u))
  {
    AV1_Syntax::get_bits(this, "seconds_value", 6u);
    if (AV1_Syntax::get_bits(this, "minutes_flag", 1u))
    {
      AV1_Syntax::get_bits(this, "minutes_value", 6u);
      if (AV1_Syntax::get_bits(this, "hours_flag", 1u)) {
        goto LABEL_3;
      }
    }
  }
LABEL_4:
  uint64_t result = AV1_Syntax::get_bits(this, "time_offset_length", 5u);
  if (result)
  {
    return AV1_Syntax::get_bits(this, "time_offset_value", result);
  }
  return result;
}

uint64_t AV1_Syntax::scalability_structure(AV1_Syntax *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unsigned int bits = AV1_Syntax::get_bits(this, "spatial_layers_cnt_minus_1", 2u);
  if (bits >= 4)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
LABEL_3:
    int v21 = 136315394;
    int v22 = "scalability_structure";
    __int16 v23 = 1024;
    unsigned int v24 = bits;
    unsigned int v3 = &_os_log_internal;
    goto LABEL_4;
  }
  int v5 = AV1_Syntax::get_bits(this, "spatial_layer_dimensions_present_flag", 1u);
  int v6 = AV1_Syntax::get_bits(this, "spatial_layer_description_present_flag", 1u);
  int v7 = AV1_Syntax::get_bits(this, "temporal_group_description_present_flag", 1u);
  AV1_Syntax::get_bits(this, "scalability_structure_reserved_3bits", 3u);
  if (v5)
  {
    unsigned int v8 = bits + 1;
    while (1)
    {
      unsigned int v9 = AV1_Syntax::get_bits(this, "spatial_layer_max_width", 0x10u);
      if (v9 >= 0x10000)
      {
        unsigned int v14 = v9;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_20;
      }
      unsigned int v10 = AV1_Syntax::get_bits(this, "spatial_layer_max_height", 0x10u);
      if (v10 >= 0x10000) {
        break;
      }
      if (!--v8) {
        goto LABEL_11;
      }
    }
    unsigned int v14 = v10;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
LABEL_20:
    int v21 = 136315394;
    int v22 = "scalability_structure";
    __int16 v23 = 1024;
    unsigned int v24 = v14;
    unsigned int v3 = &_os_log_internal;
LABEL_4:
    _os_log_impl(&dword_223977000, v3, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: value %d out of range!\n", (uint8_t *)&v21, 0x12u);
    return 0xFFFFFFFFLL;
  }
LABEL_11:
  if (v6)
  {
    unsigned int v11 = bits + 1;
    while (1)
    {
      unsigned int v12 = AV1_Syntax::get_bits(this, "spatial_layer_ref_id", 8u);
      if (v12 >= 0x100) {
        break;
      }
      if (!--v11) {
        goto LABEL_15;
      }
    }
    unsigned int bits = v12;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_3;
  }
LABEL_15:
  if (!v7) {
    return 0;
  }
  unsigned int v13 = AV1_Syntax::get_bits(this, "temporal_group_size", 8u);
  unsigned int bits = v13;
  if (v13 > 0xFF)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_3;
  }
  if (!v13) {
    return 0;
  }
  int v15 = 0;
  while (1)
  {
    unsigned int v16 = AV1_Syntax::get_bits(this, "temporal_group_temporal_id", 3u);
    if (v16 >= 8)
    {
      unsigned int v18 = v16;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_38;
    }
    AV1_Syntax::get_bits(this, "temporal_group_temporal_switching_up_point_flag", 1u);
    AV1_Syntax::get_bits(this, "temporal_group_spatial_switching_up_point_flag", 1u);
    unsigned int v17 = AV1_Syntax::get_bits(this, "temporal_group_ref_cnt", 3u);
    unsigned int v18 = v17;
    if (v17 > 7)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
LABEL_38:
      int v21 = 136315394;
      int v22 = "scalability_structure";
      __int16 v23 = 1024;
      unsigned int v24 = v18;
      unsigned int v3 = &_os_log_internal;
      goto LABEL_4;
    }
    if (v17) {
      break;
    }
LABEL_32:
    uint64_t result = 0;
    if (++v15 == bits) {
      return result;
    }
  }
  while (1)
  {
    unsigned int v19 = AV1_Syntax::get_bits(this, "temporal_group_ref_pic_diff", 8u);
    if (v19 >= 0x100) {
      break;
    }
    if (!--v18) {
      goto LABEL_32;
    }
  }
  unsigned int v20 = v19;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 136315394;
    int v22 = "scalability_structure";
    __int16 v23 = 1024;
    unsigned int v24 = v20;
    unsigned int v3 = &_os_log_internal;
    goto LABEL_4;
  }
  return 0xFFFFFFFFLL;
}

CAHDecThymeAvc *createThymeAvcDecoder(CAVDAvcDecoder *a1)
{
  int v2 = (CAHDecThymeAvc *)operator new(0x3EE0uLL, MEMORY[0x263F8C180]);
  unsigned int v3 = v2;
  if (v2) {
    CAHDecThymeAvc::CAHDecThymeAvc(v2, a1);
  }
  return v3;
}

void sub_223A0D6BC(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecThymeAvc::CAHDecThymeAvc(CAHDecThymeAvc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D7410D8;
  *(_DWORD *)(v1 + 456) = 956 * *(unsigned __int16 *)(*(void *)(v1 + 256) + 7500) + 266208;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecThymeAvc::CAHDecThymeAvc(CAHDecThymeAvc *this, CAVDAvcDecoder *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D7410D8;
  *(void *)(v4 + 256) = a2;
  uint64_t v5 = 956 * *((unsigned __int16 *)a2 + 3750) + 266208;
  *(_DWORD *)(v4 + 456) = v5;
  *(_DWORD *)(v4 + 8) = 2208;
  *(_OWORD *)(v4 + 16) = xmmword_223AD04F0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), v5, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      unsigned int v8 = "CAHDecThymeAvc";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v7, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v6 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v6;
    *((void *)this + 34) = v6;
    *((_OWORD *)this + 995) = 0u;
    *((_OWORD *)this + 996) = 0u;
    *((_OWORD *)this + 997) = 0u;
    *((_OWORD *)this + 998) = 0u;
    *((_OWORD *)this + 999) = 0u;
    *((_OWORD *)this + 1000) = 0u;
    *((_OWORD *)this + 1001) = 0u;
    *((_OWORD *)this + 1002) = 0u;
    *((_OWORD *)this + 1003) = 0u;
    *((_OWORD *)this + 1004) = 0u;
    *((_OWORD *)this + 1005) = 0u;
    bzero((char *)this + 560, 0x3BD0uLL);
  }
}

void sub_223A0D8C4(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecThymeAvc::~CAHDecThymeAvc(CAHDecThymeAvc *this)
{
  *(void *)this = &unk_26D7410D8;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecThymeAvc::~CAHDecThymeAvc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecThymeAvc::initPicture(CAHDecThymeAvc *this, int a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v5 = 956 * *(unsigned __int16 *)(*((void *)this + 32) + 7500) + 266208;
  *((_DWORD *)this + 114) = v5;
  *((_DWORD *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v6;
  if (v6)
  {
    bzero(v6, v5);
    uint64_t v8 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v8 + 16) = a2;
    *(_WORD *)(v8 + 24) = 257;
    *(_WORD *)(v8 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 3975) = 0;
    *((void *)this + 1995) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "initPicture";
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v10, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecThymeAvc::populateSlices(CAHDecThymeAvc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2208;
    uint64_t v5 = a2;
    do
    {
      CAHDecThymeAvc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 956;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecThymeAvc::populateSliceRegisters(uint64_t a1, uint64_t a2, signed int a3)
{
  char v6 = 0;
  uint64_t v135 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 256);
  int v119 = *(_DWORD *)(v7 + 3616);
  int v117 = *(_DWORD *)(v7 + 3612);
  uint64_t v118 = *(void *)(v7 + 3304);
  uint64_t v116 = *(void *)(v7 + 3296);
  uint64_t v8 = *(void *)(v7 + 3312);
  uint64_t v9 = *(unsigned int *)(v7 + 7064);
  uint64_t v10 = *(void *)(v7 + 3320);
  *(_DWORD *)(a2 + 4) = 0;
  uint64_t v12 = v8 + 1848 * a3;
  int v13 = 32 * (*(unsigned char *)(v12 + 1424) & 3);
  *(_DWORD *)(a2 + 4) = v13;
  int v15 = *(unsigned __int8 *)(v12 + 24);
  uint64_t v14 = (unsigned char *)(v12 + 24);
  if (v15 != 2) {
    char v6 = *(unsigned char *)(v8 + 1848 * a3 + 63);
  }
  unsigned int v16 = v13 & 0xFFFF87FF | ((v6 & 0xF) << 11);
  *(_DWORD *)(a2 + 4) = v16;
  if (*v14 == 1) {
    char v17 = *(unsigned char *)(v8 + 1848 * a3 + 64);
  }
  else {
    char v17 = 0;
  }
  int v18 = ((v17 & 0xF) << 7) | v16;
  *(_DWORD *)(a2 + 4) = v18;
  if (*v14 == 1 && !*(unsigned char *)(v8 + 1848 * a3 + 61)) {
    int v19 = 0x8000;
  }
  else {
    int v19 = 0;
  }
  int v20 = v19 | v18;
  *(_DWORD *)(a2 + 4) = v20;
  if (*v14) {
    int v21 = 0x20000;
  }
  else {
    int v21 = 0x10000;
  }
  if (*v14 == 1) {
    int v22 = 0;
  }
  else {
    int v22 = v21;
  }
  *(_DWORD *)(a2 + 4) = v22 | v20;
  if (*v14 == 1)
  {
    uint64_t v23 = v10 + 13040 * a3 + 7224;
    uint64_t v24 = v8 + 1848 * a3;
    *(void *)(v24 + 1832) = v23;
    if (*(unsigned char *)(v10 + 13040 * a3 + 7227)
      || (uint64_t v25 = *(unsigned int *)(v10 + 13040 * a3 + 7256), *(_DWORD *)(a1 + 4 * v25 + 464)))
    {
      int v26 = 16;
LABEL_19:
      *(_DWORD *)(a2 + 4) |= v26;
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 15900)
      || (*(void *)(a1 + 15960) = *(void *)(v10 + 13040 * a3 + 7264),
          *(_DWORD *)(a1 + 15952) = v25,
          *(_DWORD *)(a1 + 15900) = 1,
          *(_DWORD *)(a2 + 4) |= 0x40000u,
          (uint64_t v23 = *(void *)(v24 + 1832)) != 0)
      && *(_DWORD *)(a1 + 15900))
    {
      uint64_t v110 = *(void *)(v23 + 40);
      if (v110 != *(void *)(a1 + 15960))
      {
        *(void *)(a1 + 15960) = v110;
        *(_DWORD *)(a1 + 15952) = *(_DWORD *)(v23 + 32);
        int v26 = 0x40000;
        goto LABEL_19;
      }
    }
  }
LABEL_20:
  *(_DWORD *)(a2 + 920) = 0;
  *(_DWORD *)(a2 + 952) = 0;
  int v27 = *(_DWORD *)(a2 + 4);
  if (*v14 != 1 || (v27 & 0x40000) == 0) {
    goto LABEL_34;
  }
  unsigned int v29 = (_OWORD *)(a1 + 176 * *(unsigned int *)(*(void *)(v8 + 1848 * a3 + 1832) + 32));
  long long v30 = v29[658];
  long long v31 = v29[660];
  long long v132 = v29[659];
  long long v133 = v31;
  long long v134 = v29[661];
  long long v32 = v29[654];
  long long v33 = v29[656];
  long long v128 = v29[655];
  long long v129 = v33;
  long long v130 = v29[657];
  long long v131 = v30;
  long long v34 = v29[652];
  *(_OWORD *)long long buf = v29[651];
  *(_OWORD *)&buf[16] = v34;
  long long v126 = v29[653];
  long long v127 = v32;
  *(_DWORD *)(a1 + 15900) = 1;
  int v35 = 956 * a3;
  if (*(void *)buf || DWORD2(v133) || (int v36 = HIDWORD(v133)) != 0)
  {
    uint64_t result = CAHDec::addToPatcherList(a1, buf, v35 + 3128, 0, 0xFFFFFFFFLL, 8, -256, 4);
    if (result) {
      return result;
    }
    int v37 = DWORD2(v133);
    int v36 = HIDWORD(v133);
    if (*(void *)buf)
    {
LABEL_32:
      uint64_t result = CAHDec::addToPatcherList(a1, buf, v35 + 3160, 0, 0x3FFFFFFFFFFLL, 32, 1023, 4);
      if (result) {
        return result;
      }
      goto LABEL_33;
    }
  }
  else
  {
    int v37 = 0;
  }
  if (v37 || v36) {
    goto LABEL_32;
  }
LABEL_33:
  int v27 = *(_DWORD *)(a2 + 4);
LABEL_34:
  uint64_t v121 = v10;
  unsigned int v114 = a3;
  int v115 = v14;
  uint64_t v120 = a1;
  *(_DWORD *)(a2 + 4) = v27 & 0x77FFFF | 0x2D000000;
  unsigned int v39 = *v14;
  if (v39 <= 1)
  {
    uint64_t v40 = v7 + 6872;
    uint64_t v41 = v10 + 13040 * a3;
    if (*(_DWORD *)(v41 + 13032))
    {
      unint64_t v42 = 0;
      unsigned int v43 = (unsigned int *)(v41 + 13032);
      uint64_t v44 = v121 + 13040 * a3 + 1416;
      unsigned int v45 = &_os_log_internal;
      do
      {
        uint64_t v46 = a2 + 4 * v42;
        int v47 = (16 * (v42 & 0xF)) | 0x2DC00000;
        *(_DWORD *)(v46 + 8) = v47;
        signed int v48 = (_DWORD *)(v46 + 8);
        if (v9)
        {
          uint64_t v49 = 0;
          while (*(_DWORD *)(*(void *)(v40 + 8 * v49) + 12) != *(_DWORD *)(v44 + 176 * v42 + 12))
          {
            if (v9 == ++v49) {
              goto LABEL_41;
            }
          }
          *signed int v48 = v49 & 0xF | v47;
        }
        else
        {
LABEL_41:
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            int v50 = *(_DWORD *)(v44 + 176 * v42 + 32);
            *(_DWORD *)long long buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v42;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v50;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&buf[16] = v9;
            _os_log_impl(&dword_223977000, v45, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-0 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
          }
        }
        ++v42;
      }
      while (v42 < *v43);
      unsigned int v39 = *v14;
    }
    else
    {
      LODWORD(v42) = 0;
    }
    if (v39 == 1)
    {
      uint64_t v51 = v121 + 13040 * a3;
      if (*(_DWORD *)(v51 + 13036))
      {
        unint64_t v52 = 0;
        int v53 = (unsigned int *)(v51 + 13036);
        int v54 = &_os_log_internal;
        do
        {
          uint64_t v55 = a2 + 4 * v42;
          int v56 = (16 * (v52 & 0xF)) | 0x2DC00100;
          *(_DWORD *)(v55 + 8) = v56;
          int v57 = (_DWORD *)(v55 + 8);
          if (v9)
          {
            uint64_t v58 = 0;
            while (*(_DWORD *)(*(void *)(v40 + 8 * v58) + 12) != *(_DWORD *)(v121 + 13040 * a3 + 176 * v52 + 7236))
            {
              if (v9 == ++v58) {
                goto LABEL_55;
              }
            }
            *int v57 = v58 & 0xF | v56;
          }
          else
          {
LABEL_55:
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              int v59 = *(_DWORD *)(v121 + 13040 * a3 + 176 * v52 + 7256);
              *(_DWORD *)long long buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v42;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v59;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&buf[16] = v9;
              _os_log_impl(&dword_223977000, v54, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-1 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
            }
          }
          LODWORD(v42) = v42 + 1;
          ++v52;
        }
        while (v52 < *v53);
      }
    }
  }
  *(void *)(a2 + 136) = 0x2DD0000000000000;
  uint64_t v60 = v118 + 604 * v119;
  unsigned int v61 = (char *)(v60 + 88);
  int v62 = (char *)(v60 + 87);
  if (*v115 == 1) {
    int v63 = v61;
  }
  else {
    int v63 = v62;
  }
  char v64 = *v63;
  *(_DWORD *)(a2 + 140) = ((v64 & 3) << 6) | 0x2DD00000;
  int v65 = ((v64 & 3) << 6) | 0x2DD00000 | (8 * (*(unsigned char *)(v8 + 1848 * a3 + 376) & 7));
  *(_DWORD *)(a2 + 140) = v65;
  char v66 = *(unsigned char *)(v116 + 2224 * v117 + 4);
  if (v66) {
    char v66 = *(unsigned char *)(v8 + 1848 * a3 + 377);
  }
  *(_DWORD *)(a2 + 140) = v66 & 7 | v65;
  int v67 = *v115;
  if (v67 != 1) {
    goto LABEL_147;
  }
  int v68 = *v61;
  if (v68 != 2) {
    goto LABEL_68;
  }
  *(_DWORD *)(a2 + 140) = ((v64 & 3) << 6) | 0x2DD0002D;
  int v67 = *v115;
  if (v67 != 1)
  {
LABEL_147:
    if (v67 || !*v62) {
      goto LABEL_88;
    }
LABEL_72:
    unsigned int v69 = 0;
    unsigned int v70 = 0;
    do
    {
      uint64_t v71 = v69;
      if (*(unsigned char *)(v8 + 1848 * a3 + v69 + 378))
      {
        int v72 = ((v69 & 0xF) << 9) | 0x2DE04000;
        uint64_t v73 = a2 + 4 * v70;
        *(_DWORD *)(v73 + 144) = v72;
        uint64_t v74 = v8 + 1848 * a3 + 2 * v71;
        *(_DWORD *)(v73 + 144) = v72 | *(_WORD *)(v74 + 394) & 0x1FF;
        *(_DWORD *)(v73 + 528) = 770703360;
        *(_DWORD *)(v73 + 528) = *(unsigned __int16 *)(v74 + 426) | 0x2DF00000;
        ++v70;
      }
      if (*(unsigned char *)(v8 + 1848 * a3 + v71 + 458))
      {
        uint64_t v75 = 0;
        char v76 = 1;
        do
        {
          char v77 = v76;
          int v78 = ((v71 & 0xF) << 9) | (v75 << 14) | 0x2DE08000;
          uint64_t v79 = a2 + 4 * v70;
          *(_DWORD *)(v79 + 144) = v78;
          uint64_t v80 = v8 + 1848 * a3 + 4 * v71 + 2 * v75;
          *(_DWORD *)(v79 + 144) = v78 | *(_WORD *)(v80 + 474) & 0x1FF;
          *(_DWORD *)(v79 + 528) = 770703360;
          *(_DWORD *)(v79 + 528) = *(unsigned __int16 *)(v80 + 538) | 0x2DF00000;
          ++v70;
          uint64_t v75 = 1;
          char v76 = 0;
        }
        while ((v77 & 1) != 0);
      }
      unsigned int v69 = v71 + 1;
    }
    while ((int)v71 + 1 <= *(char *)(v8 + 1848 * a3 + 63));
    if (*v115 == 1)
    {
      unsigned int v81 = 0;
      do
      {
        uint64_t v82 = v81;
        if (*(unsigned char *)(v8 + 1848 * a3 + v81 + 602))
        {
          int v83 = ((v81 & 0xF) << 9) | 0x2DE06000;
          uint64_t v84 = a2 + 4 * v70;
          *(_DWORD *)(v84 + 144) = v83;
          uint64_t v85 = v8 + 1848 * a3 + 2 * v82;
          *(_DWORD *)(v84 + 144) = v83 | *(_WORD *)(v85 + 618) & 0x1FF;
          *(_DWORD *)(v84 + 528) = 770703360;
          *(_DWORD *)(v84 + 528) = *(unsigned __int16 *)(v85 + 650) | 0x2DF00000;
          ++v70;
        }
        if (*(unsigned char *)(v8 + 1848 * a3 + v82 + 682))
        {
          uint64_t v86 = 0;
          char v87 = 1;
          do
          {
            char v88 = v87;
            int v89 = ((v82 & 0xF) << 9) | (v86 << 14) | 0x2DE0A000;
            uint64_t v90 = a2 + 4 * v70;
            *(_DWORD *)(v90 + 144) = v89;
            uint64_t v91 = v8 + 1848 * a3 + 4 * v82 + 2 * v86;
            *(_DWORD *)(v90 + 144) = v89 | *(_WORD *)(v91 + 698) & 0x1FF;
            *(_DWORD *)(v90 + 528) = 770703360;
            *(_DWORD *)(v90 + 528) = *(unsigned __int16 *)(v91 + 762) | 0x2DF00000;
            ++v70;
            uint64_t v86 = 1;
            char v87 = 0;
          }
          while ((v88 & 1) != 0);
        }
        unsigned int v81 = v82 + 1;
      }
      while ((int)v82 + 1 <= *(char *)(v8 + 1848 * a3 + 64));
    }
    *(_DWORD *)(a2 + 136) = v70;
    goto LABEL_88;
  }
  int v68 = *v61;
LABEL_68:
  if (v68 == 1) {
    goto LABEL_72;
  }
LABEL_88:
  *(_DWORD *)(a2 + 912) = 0;
  uint64_t v92 = v8 + 1848 * a3;
  *(_DWORD *)(a2 + 912) = (((*(unsigned __int8 *)(v118 + 604 * v119 + 89) + *(unsigned __int8 *)(v92 + 1425)) << 10)
                         + 26624) & 0x1FC00 | 0x2D900000;
  *(_DWORD *)(a2 + 916) = 0;
  int v93 = (*(unsigned char *)(v92 + 1428) == 0) << 17;
  *(_DWORD *)(a2 + 916) = v93;
  if (*(unsigned char *)(v92 + 1428) != 1)
  {
    int v94 = v93 | 0x10000;
    *(_DWORD *)(a2 + 916) = v94;
    uint64_t v95 = v8 + 1848 * a3;
    int v96 = v94 | ((*(unsigned char *)(v95 + 1429) & 0xF) << 8);
    *(_DWORD *)(a2 + 916) = v96;
    int v93 = v96 | ((*(unsigned char *)(v95 + 1430) & 0xF) << 12);
  }
  *(_DWORD *)(a2 + 916) = v93 | 0x2DA00000;
  int v97 = (unsigned int *)(v8 + 1848 * a3 + 1436);
  unsigned int v98 = *v97;
  if (*(unsigned char *)(v118 + 604 * v119 + 3))
  {
    int v99 = 0;
    if ((v98 & 7) != 0) {
      *int v97 = (v98 + 7) & 0xFFFFFFF8;
    }
  }
  else
  {
    int v99 = *v97 & 7;
  }
  *(_DWORD *)(a2 + 924) = (v99 << 15) | 0x2D800000;
  uint64_t v100 = *(void *)(v120 + 256);
  unsigned int v101 = *(_DWORD *)(v100 + 2504);
  unint64_t v123 = 0;
  uint64_t v124 = 0;
  if (!CAVDAvcDecoder::GetSDataMemInfo(v100, v114, &v124, &v123)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v122 = v101;
  int v102 = 956 * v114;
  uint64_t v103 = v124;
  if (!*(void *)v124 && !*(_DWORD *)(v124 + 152) && !*(_DWORD *)(v124 + 156)) {
    goto LABEL_104;
  }
  int v104 = v123;
  if (HIDWORD(v123) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "populateSliceRegisters";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1810;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v104 = v123;
  }
  uint64_t result = CAHDec::addToPatcherList(v120, (void *)v103, v102 + 3132, v104, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  if (result) {
    return result;
  }
  uint64_t v103 = v124;
  if (!*(void *)v124)
  {
LABEL_104:
    if (!*(_DWORD *)(v103 + 152) && !*(_DWORD *)(v103 + 156)) {
      goto LABEL_109;
    }
  }
  int v105 = v123;
  if (HIDWORD(v123) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "populateSliceRegisters";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1811;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v105 = v123;
  }
  uint64_t result = CAHDec::addToPatcherList(v120, (void *)v103, v102 + 3140, v105, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result)
  {
LABEL_109:
    unsigned int v106 = *(_DWORD *)(v8 + 1848 * a3 + 16) - (*v97 >> 3);
    *(_DWORD *)(a2 + 936) = v106;
    if (*(_DWORD *)(v100 + 2360) != 1) {
      return 0;
    }
    *(void *)(a2 + 944) = 0;
    if (*(_DWORD *)(v100 + 2640))
    {
      unsigned int v107 = v122;
      if ((*(unsigned char *)(v100 + 2612) & 1) == 0)
      {
LABEL_112:
        unsigned int v108 = *(unsigned __int16 *)(v8 + 1848 * a3 + 1840);
        int v109 = 0;
        if ((v107 & 0x200000) != 0)
        {
          if (v99 && !*(_WORD *)(v8 + 1848 * a3 + 1840))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = "int CAHDecThymeAvc::populateSliceRegisters(AvcSliceRegisters *, int)";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect off_to_prot_data to be set when slice header is not byte aligned\n", buf, 0xCu);
              unsigned int v106 = *(_DWORD *)(a2 + 936);
              int v109 = *(_DWORD *)(a2 + 948) & 0x1F0000;
            }
            else
            {
              int v109 = 0;
            }
            unsigned int v108 = 1;
          }
        }
        else if (v99)
        {
          ++v108;
        }
        uint64_t result = 0;
        if (v108 >= v106) {
          unsigned int v108 = v106;
        }
        unsigned int v113 = v109 & 0xFFDFFFFF | (v108 << 22) | (unsigned __int16)v107 | (((v107 >> 20) & 1) << 21);
LABEL_144:
        *(_DWORD *)(a2 + 948) = v113;
        return result;
      }
    }
    else
    {
      unsigned int v107 = v122;
      if (!*(_DWORD *)(v100 + 2420)) {
        goto LABEL_112;
      }
    }
    uint64_t result = 0;
    unsigned int v111 = *(unsigned __int16 *)(v8 + 1848 * a3 + 1840);
    if (v106 < v111) {
      unsigned int v111 = v106;
    }
    if (v99) {
      BOOL v112 = v111 == 0;
    }
    else {
      BOOL v112 = 0;
    }
    if (v112) {
      unsigned int v111 = 1;
    }
    unsigned int v113 = v107 & 0x10000 | v111;
    goto LABEL_144;
  }
  return result;
}

uint64_t CAHDecThymeAvc::populateCommonRegisters(CAHDecThymeAvc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000001;
  return 0;
}

uint64_t CAHDecThymeAvc::updateCommonRegisters(CAHDecThymeAvc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

void CAHDecThymeAvc::copyScalingList(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = *a2 & 0xFEFFFFC0 | 0x1000000;
  *a2 = v8;
  do
  {
    v8 |= (*(unsigned char *)(a4 + v7) == 0) << v7;
    *a2 = v8;
    ++v7;
  }
  while (v7 != 6);
  unsigned int v9 = v8 & 0xFFFFF03F;
  *a2 = v8 & 0xFFFFF03F;
  if (a7 >= 7)
  {
    uint64_t v10 = (a7 - 6);
    uint64_t v11 = (unsigned __int8 *)(a4 + 6);
    uint64_t v12 = &dword_223ADA5B0;
    do
    {
      int v13 = *v11++;
      BOOL v14 = v13 == 0;
      int v16 = *v12++;
      char v15 = v16;
      int v17 = v14;
      v9 |= ((v17 << v15) & 0x3F) << 6;
      *a2 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 1;
  uint64_t v20 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v22 = *(_DWORD *)(v20 + i) & 0xFFFFFF | (*(unsigned __int8 *)(v19 + i - 1) << 24);
      *(_DWORD *)(v20 + i) = v22;
      unsigned int v23 = v22 & 0xFF00FFFF | (*(unsigned __int8 *)(v19 + i) << 16);
      *(_DWORD *)(v20 + i) = v23;
      unsigned int v24 = v23 & 0xFFFF00FF | (*(unsigned __int8 *)(v19 + i + 1) << 8);
      *(_DWORD *)(v20 + i) = v24;
      *(_DWORD *)(v20 + i) = v24 & 0xFFFFFF00 | *(unsigned __int8 *)(v19 + i + 2);
    }
    ++v18;
    v20 += 16;
    v19 += 16;
  }
  while (v18 != 6);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 96;
  do
  {
    int v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = a6 + ((uint64_t)dword_223ADA5C8[v25] << 6);
    do
    {
      long long v31 = (unsigned __int8 *)(v30 + (v28 & 0x7FFFFFE0 | v29 & 4 | v27 & 0x18));
      int v32 = *(_DWORD *)(v26 + v28) & 0xFFFFFF | (*v31 << 24);
      *(_DWORD *)(v26 + v28) = v32;
      unsigned int v33 = v32 & 0xFF00FFFF | (v31[1] << 16);
      *(_DWORD *)(v26 + v28) = v33;
      unsigned int v34 = v33 & 0xFFFF00FF | (v31[2] << 8);
      *(_DWORD *)(v26 + v28) = v34;
      *(_DWORD *)(v26 + v28) = v34 & 0xFFFFFF00 | v31[3];
      ++v29;
      v28 += 4;
      v27 += 8;
    }
    while (v28 != 64);
    ++v25;
    v26 += 64;
  }
  while (v25 != 6);
}

uint64_t CAHDecThymeAvc::AvcSeqScalingListFallBack(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v3 = 12;
    }
    uint64_t v4 = a2 + 22;
    uint64_t v5 = (_OWORD *)(a2 + 34);
    while (v2 > 5)
    {
      if (*(unsigned char *)(v4 + v2 - 12))
      {
        if (*(unsigned char *)(v4 + v2) == 2)
        {
          unsigned int v9 = (_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 130);
          if (v2 == 6 || (v2 & 0x7FFFFFFD) == 8)
          {
            _OWORD *v9 = avcDefaultIntraScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADA630;
            long long v10 = xmmword_223ADA640;
            long long v11 = unk_223ADA650;
          }
          else
          {
            _OWORD *v9 = avcDefaultInterScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADA5F0;
            long long v10 = xmmword_223ADA600;
            long long v11 = unk_223ADA610;
          }
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 162) = v10;
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 178) = v11;
        }
        goto LABEL_24;
      }
      if ((v2 - 8) <= 0xFFFFFFFD)
      {
        uint64_t result = a2 + 130;
        int v13 = (_OWORD *)(a2 + 130 + ((unint64_t)(v2 - 6) << 6));
        BOOL v14 = (long long *)(a2 + 130 + ((unint64_t)(v2 - 8) << 6));
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[3];
        v13[2] = v14[2];
        v13[3] = v17;
        *int v13 = v15;
        v13[1] = v16;
        uint64_t v8 = (v2 - 2);
LABEL_21:
        *(unsigned char *)(v4 + v2) = *(unsigned char *)(a2 + v8 + 22);
      }
LABEL_24:
      ++v2;
      ++v5;
      if (v3 == v2) {
        return result;
      }
    }
    if (*(unsigned char *)(v4 + v2 - 12)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (v6 || v2 == 3) {
      goto LABEL_24;
    }
    uint64_t v8 = (v2 - 1);
    *uint64_t v5 = *(_OWORD *)(a2 + 16 * v8 + 34);
    goto LABEL_21;
  }
  return result;
}

long long *CAHDecThymeAvc::AvcPicScalingListFallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 96))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = a3 + 97;
    uint64_t v6 = -96;
    uint64_t result = &avcDefaultIntraScalingList8x8;
    do
    {
      if (v3 > 5)
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if (*(unsigned char *)(v5 + v3 + 12) == 2)
          {
            unsigned int v9 = (_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 217);
            if (v3 == 6 || (v3 & 0x7FFFFFFD) == 8)
            {
              _OWORD *v9 = avcDefaultIntraScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADA630;
              long long v10 = xmmword_223ADA640;
              long long v11 = unk_223ADA650;
            }
            else
            {
              _OWORD *v9 = avcDefaultInterScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADA5F0;
              long long v10 = xmmword_223ADA600;
              long long v11 = unk_223ADA610;
            }
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 249) = v10;
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 265) = v11;
          }
          goto LABEL_31;
        }
        if ((v3 - 8) <= 0xFFFFFFFD)
        {
          uint64_t v12 = (_OWORD *)(a3 + 217 + ((unint64_t)(v3 - 6) << 6));
          int v13 = (long long *)(a3 + 217 + ((unint64_t)(v3 - 8) << 6));
          long long v14 = *v13;
          long long v15 = v13[1];
          long long v16 = v13[3];
          v12[2] = v13[2];
          v12[3] = v16;
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v17 = a3 + (v3 - 2);
          goto LABEL_29;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          uint64_t v18 = (v3 - 6);
          uint64_t v19 = a3 + (v18 << 6);
          uint64_t v20 = a2 + (v18 << 6);
          long long v21 = *(_OWORD *)(v20 + 130);
          long long v22 = *(_OWORD *)(v20 + 146);
          long long v23 = *(_OWORD *)(v20 + 162);
          *(_OWORD *)(v19 + 265) = *(_OWORD *)(v20 + 178);
          *(_OWORD *)(v19 + 249) = v23;
          *(_OWORD *)(v19 + 233) = v22;
          *(_OWORD *)(v19 + 217) = v21;
LABEL_23:
          char v24 = *(unsigned char *)(a2 + 22 + v3);
LABEL_30:
          *(unsigned char *)(v5 + v3 + 12) = v24;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if ((*(unsigned char *)(v5 + v3 + 12) & 2) != 0)
          {
            if (v3 > 2) {
              long long v8 = avcDefaultInterScalingList4x4;
            }
            else {
              long long v8 = avcDefaultIntraScalingList4x4;
            }
            *(_OWORD *)(v5 + v6 + 120) = v8;
          }
          goto LABEL_31;
        }
        if (v3 && v3 != 3)
        {
          uint64_t v25 = (v3 - 1);
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a3 + 16 * v25 + 121);
          uint64_t v17 = a3 + v25;
LABEL_29:
          char v24 = *(unsigned char *)(v17 + 109);
          goto LABEL_30;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a2 + v6 + 130);
          goto LABEL_23;
        }
      }
LABEL_31:
      ++v3;
      v6 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CAHDecThymeAvc::populateSequenceRegisters(CAHDecThymeAvc *this)
{
  uint64_t v2 = *((void *)this + 32);
  unint64_t v3 = (_DWORD *)*((void *)this + 33);
  int v4 = *(_DWORD *)(v2 + 3612);
  int v5 = *(_DWORD *)(v2 + 3616);
  uint64_t v6 = *(void *)(v2 + 3296);
  uint64_t v7 = *(void *)(v2 + 3304);
  uint64_t v8 = v6 + 2224 * v4;
  v3[10] = 0;
  __int16 v9 = *(_WORD *)(v8 + 1558);
  v3[10] = (2 * (v9 & 0xFFF)) | 1;
  v3[10] = ((*(_WORD *)(v8 + 1560) & 0xFFF) << 17) | (2 * (v9 & 0xFFF)) | 0x10001;
  v3[11] = 0;
  int v10 = *(unsigned char *)(v8 + 1564) & 1;
  v3[11] = v10;
  int v11 = v10 | ((*(unsigned char *)(v7 + 604 * v5 + 95) != 0) << 7) | 0x2800;
  v3[11] = v11;
  uint64_t v12 = (unsigned char *)(v8 + 4);
  int v13 = *(unsigned __int8 *)(v8 + 4);
  if (*(unsigned char *)(v8 + 4)) {
    int v13 = (*(unsigned char *)(v6 + 2224 * v4 + 7) & 0xF) << 15;
  }
  int v14 = v13 | v11;
  v3[11] = v14;
  long long v15 = (unsigned char *)(v6 + 2224 * v4);
  int v16 = v14 & 0x7F87A881 | ((v15[6] & 0xF) << 19);
  v3[11] = v16;
  unsigned int v17 = v16 & 0xFF7FFFFF | ((v15[5] & 1) << 23);
  v3[11] = v17;
  v3[11] = v17 & 0xFCFFFFFF | ((*v12 & 3) << 24);
  if (v15[9])
  {
    if (*v12 == 3) {
      int v18 = 12;
    }
    else {
      int v18 = 8;
    }
    uint64_t v19 = CAHDecThymeAvc::AvcSeqScalingListFallBack((uint64_t)this, v8);
    CAHDecThymeAvc::copyScalingList(v19, v3 + 12, *((void *)this + 33) + 992, v6 + 2224 * v4 + 22, v6 + 2224 * v4 + 34, v6 + 2224 * v4 + 130, v18);
  }
  return 0;
}

uint64_t CAHDecThymeAvc::populatePictureRegisters(CAHDecThymeAvc *this)
{
  uint64_t v319 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 3612);
  int v4 = *(_DWORD *)(v2 + 3616);
  uint64_t v5 = *(void *)(v2 + 3296);
  uint64_t v6 = *(void *)(v2 + 3304);
  uint64_t v296 = *(void *)(v2 + 2088);
  int v299 = *(_DWORD *)(v2 + 3132);
  uint64_t v300 = *(unsigned int *)(v2 + 3152);
  int v303 = *(_DWORD *)(v2 + 2644);
  int v7 = *(unsigned __int8 *)(v2 + 8);
  long long v8 = *(_OWORD *)(v2 + 7016);
  v318[8] = *(_OWORD *)(v2 + 7000);
  v318[9] = v8;
  long long v9 = *(_OWORD *)(v2 + 7048);
  v318[10] = *(_OWORD *)(v2 + 7032);
  v318[11] = v9;
  long long v10 = *(_OWORD *)(v2 + 6952);
  v318[4] = *(_OWORD *)(v2 + 6936);
  v318[5] = v10;
  long long v11 = *(_OWORD *)(v2 + 6984);
  v318[6] = *(_OWORD *)(v2 + 6968);
  v318[7] = v11;
  long long v12 = *(_OWORD *)(v2 + 6888);
  v318[0] = *(_OWORD *)(v2 + 6872);
  v318[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 6920);
  v318[2] = *(_OWORD *)(v2 + 6904);
  v318[3] = v13;
  uint64_t v298 = *(unsigned int *)(v2 + 7064);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  long long v15 = (unsigned __int8 *)*((void *)this + 32);
  uint64_t v16 = *((void *)this + 33);
  int v17 = v15[2675];
  unsigned int v18 = v15[2674];
  if (!(v17 | v18)) {
    goto LABEL_41;
  }
  uint64_t v19 = v5 + 2224 * v3;
  unsigned int v20 = *(unsigned __int8 *)(v19 + 6);
  unsigned int v21 = *(unsigned __int8 *)(v19 + 7);
  if (v20 > v21) {
    LOWORD(v21) = v20;
  }
  int v22 = ((_WORD)v21 + 9) & 0x1FE;
  if (v22 == 8)
  {
    int v24 = v7;
    unsigned int v28 = 1;
    int v26 = 8;
    if (!v15[2675]) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  int v23 = v15[2672];
  int v24 = v7;
  if (v22 != 12)
  {
    if (v22 == 10)
    {
      BOOL v25 = v23 == 0;
      if (v23) {
        int v26 = 10;
      }
      else {
        int v26 = 9;
      }
      int v27 = 2;
      goto LABEL_15;
    }
    int v26 = 27;
    unsigned int v28 = 27;
    if (!v17) {
      goto LABEL_30;
    }
LABEL_23:
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) && (v17 == 2 && v26 == 8 || v17 == 3 && (v26 - 9) <= 1))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = "populatePictureRegisters";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = v26;
      WORD1(buf[2]) = 1024;
      HIDWORD(buf[2]) = v17;
      int v29 = &_os_log_internal;
      uint64_t v30 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
      goto LABEL_38;
    }
    goto LABEL_30;
  }
  BOOL v25 = v23 == 0;
  if (v23) {
    int v26 = 12;
  }
  else {
    int v26 = 11;
  }
  int v27 = 4;
LABEL_15:
  if (v25) {
    unsigned int v28 = v27;
  }
  else {
    unsigned int v28 = v27 + 1;
  }
  if (v17) {
    goto LABEL_23;
  }
LABEL_30:
  int v7 = v24;
  if (v18 && (v18 == 3 && v28 - 9 < 2 || v28 <= 0x1A && ((1 << v28) & 0x4C00000) != 0 && v18 <= 2))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "populatePictureRegisters";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = v28;
    WORD1(buf[2]) = 1024;
    HIDWORD(buf[2]) = v18;
    int v29 = &_os_log_internal;
    uint64_t v30 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
LABEL_38:
    long long v31 = (uint8_t *)buf;
    uint32_t v32 = 24;
    goto LABEL_39;
  }
LABEL_41:
  unsigned int v34 = (char *)this + 264;
  *(_DWORD *)(v16 + 52) = 766509056;
  if (**(_DWORD **)(*((void *)this + 32) + 3312) == 5) {
    int v35 = 766517248;
  }
  else {
    int v35 = 766509056;
  }
  int v295 = v14;
  if (v14) {
    int v36 = 688;
  }
  else {
    int v36 = 672;
  }
  if (v303) {
    int v37 = 4160;
  }
  else {
    int v37 = 64;
  }
  unsigned int v38 = v37 & 0xFFFFFFF0 | ((v303 == 1) << 10) | v36 & 0xFFFFFFF0 | (4 * (v17 & 3)) | v18 & 3 | v35;
  *(_DWORD *)(v16 + 52) = v38;
  unsigned int v39 = (unsigned char *)*((void *)this + 32);
  int v40 = v38 | ((v39[2652] & 1) << 19);
  *(_DWORD *)(v16 + 52) = v40;
  unsigned int v41 = v40 & 0xFFFBFFFF | ((v39[2653] & 1) << 18);
  *(_DWORD *)(v16 + 52) = v41;
  *(_DWORD *)(v16 + 52) = v41 & 0xFFFDFFFF | ((v39[2654] & 1) << 17);
  *(void *)(v16 + 56) = 0x1000000;
  uint64_t v42 = v5 + 2224 * v3;
  int v43 = (16 * (*(_WORD *)(v42 + 1558) & 0xFFF)) | 0xF;
  *(_DWORD *)(v16 + 60) = v43;
  LODWORD(v39) = v43 | (*(unsigned __int16 *)(v42 + 1560) << 20) | 0xF0000;
  *(void *)(v16 + 64) = 0;
  *(_DWORD *)(v16 + 60) = v39;
  LODWORD(v42) = (*(unsigned char *)(v42 + 8) & 1) << 18;
  *(_DWORD *)(v16 + 68) = v42;
  uint64_t v44 = (unsigned char *)(v6 + 604 * v4);
  LODWORD(v42) = v42 & 0xFFF7FFFF | ((v44[93] & 1) << 19);
  *(_DWORD *)(v16 + 68) = v42;
  LODWORD(v42) = v42 & 0xFFEFFFFF | ((v44[3] & 1) << 20);
  *(_DWORD *)(v16 + 68) = v42;
  *(_DWORD *)(v16 + 68) = v42 | ((**(_DWORD **)(*((void *)this + 32) + 3312) != 5) << 21);
  unsigned int v45 = *(_DWORD *)(v16 + 72) & 0xFFFFFC1F | (32 * (v44[91] & 0x1F));
  *(_DWORD *)(v16 + 72) = v45;
  *(_DWORD *)(v16 + 72) = v45 & 0xFFFFFFE0 | v44[601] & 0x1F;
  if (v44[96])
  {
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) == 3) {
      int v46 = 12;
    }
    else {
      int v46 = 8;
    }
    uint64_t v47 = *(void *)v34 + 1476;
    signed int v48 = CAHDecThymeAvc::AvcPicScalingListFallBack(v14, v5 + 2224 * v3, v6 + 604 * v4);
    CAHDecThymeAvc::copyScalingList((uint64_t)v48, (unsigned int *)(v16 + 76), v47, v6 + 604 * v4 + 109, v6 + 604 * v4 + 121, v6 + 604 * v4 + 217, v46);
  }
  uint64_t v49 = 0;
  *(_DWORD *)(v16 + 80) = *((_DWORD *)this + 3978);
  *(_DWORD *)(v16 + 84) = *((_DWORD *)this + 3979);
  *(_DWORD *)(v16 + 88) = 3145786;
  int v50 = (char *)this + 9008;
  do
  {
    *(_DWORD *)(*(void *)v34 + v49 + 92) = 0;
    uint64_t v51 = *(void *)v34 + v49;
    int v52 = *(_DWORD *)(v51 + 92);
    *(_DWORD *)(v51 + 92) = 0;
    *(_DWORD *)(*(void *)v34 + v49 + 92) ^= 0xFFFFFF00;
    uint64_t v53 = *(void *)v34 + v49;
    int v54 = *(_DWORD *)(v53 + 92);
    *(_DWORD *)(v53 + 92) = v52;
    if (*(void *)v50 || *((_DWORD *)v50 + 38) || *((_DWORD *)v50 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v50, (int)v49 + 92, 0, 0xFFFFFFFFLL, 8, v54, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v49 + 120) = 0;
    *(_DWORD *)(*((void *)this + 33) + v49 + 120) = *(_DWORD *)(*((void *)this + 33) + v49 + 120) & 0x800001FF | (((*((_DWORD *)this + 3972) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v49 + 540) = 0;
    uint64_t v55 = *((void *)this + 33) + v49;
    int v56 = *(_DWORD *)(v55 + 540);
    *(_DWORD *)(v55 + 540) = 0;
    *(_DWORD *)(*((void *)this + 33) + v49 + 540) ^= 0x3FFu;
    uint64_t v57 = *((void *)this + 33) + v49;
    int v58 = *(_DWORD *)(v57 + 540);
    *(_DWORD *)(v57 + 540) = v56;
    if (*(void *)v50 || *((_DWORD *)v50 + 38) || *((_DWORD *)v50 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v50, (int)v49 + 540, 0, 0x3FFFFFFFFFFLL, 32, v58, 4);
      if (result) {
        return result;
      }
    }
    v49 += 4;
    v50 += 176;
  }
  while (v49 != 28);
  *(_DWORD *)(*(void *)v34 + 148) = 0;
  *(_DWORD *)(*(void *)v34 + 568) = 0;
  if ((*(unsigned char *)(v16 + 54) & 8) == 0) {
    goto LABEL_363;
  }
  uint64_t v59 = *((void *)this + 33);
  uint64_t v60 = *(void *)(*((void *)this + 32) + 2680);
  long long v315 = 0u;
  long long v316 = 0u;
  long long v313 = 0u;
  long long v314 = 0u;
  long long v311 = 0u;
  long long v312 = 0u;
  long long v309 = 0u;
  long long v310 = 0u;
  long long v308 = 0u;
  memset(buf, 0, sizeof(buf));
  int v61 = (*(_DWORD *)(v59 + 16) & 0xF) << 9;
  buf[0] = v60;
  int v62 = *(_DWORD *)(v59 + 148);
  *(_DWORD *)(v59 + 148) = 0;
  *(_DWORD *)(*((void *)this + 33) + 148) ^= 0xFFFFFF00;
  uint64_t v63 = *((void *)this + 33);
  int v64 = *(_DWORD *)(v63 + 148);
  *(_DWORD *)(v63 + 148) = v62;
  if (v60 || DWORD2(v315) || (int v65 = HIDWORD(v315)) != 0)
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 148, v61, 0xFFFFFFFFLL, 8, v64, 4);
    if (result) {
      return result;
    }
    uint64_t v67 = buf[0];
    int v66 = DWORD2(v315);
    int v65 = HIDWORD(v315);
  }
  else
  {
    int v66 = 0;
    uint64_t v67 = 0;
  }
  if ((*(_DWORD *)(*(void *)v34 + 568) = 0,
        int v68 = *(_DWORD *)(*(void *)v34 + 568),
        *(_DWORD *)(*(void *)v34 + 568) = 0,
        *(_DWORD *)(*(void *)v34 + 568) ^= 0x3FFu,
        int v69 = *(_DWORD *)(*(void *)v34 + 568),
        *(_DWORD *)(*(void *)v34 + 568) = v68,
        !v67)
    && !v66
    && !v65
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 568, v61, 0x3FFFFFFFFFFLL, 32, v69, 4), !result))
  {
LABEL_363:
    int v70 = v7;
    *(_DWORD *)(*((void *)this + 33) + 152) = 0;
    uint64_t v71 = *((void *)this + 33);
    int v72 = *(_DWORD *)(v71 + 152);
    *(_DWORD *)(v71 + 152) = 0;
    *(_DWORD *)(*((void *)this + 33) + 152) ^= 0xFFFFFF00;
    uint64_t v73 = *((void *)this + 33);
    int v74 = *(_DWORD *)(v73 + 152);
    *(_DWORD *)(v73 + 152) = v72;
    if (!*((void *)this + 1830) && !*((_DWORD *)this + 3698) && !*((_DWORD *)this + 3699)) {
      goto LABEL_364;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1830, 152, 0, 0xFFFFFFFFLL, 8, v74, 4);
    if (!result)
    {
LABEL_364:
      if ((*(_DWORD *)(*(void *)v34 + 572) = 0,
            int v75 = *(_DWORD *)(*(void *)v34 + 572),
            *(_DWORD *)(*(void *)v34 + 572) = 0,
            *(_DWORD *)(*(void *)v34 + 572) ^= 0x3FFu,
            int v76 = *(_DWORD *)(*(void *)v34 + 572),
            *(_DWORD *)(*(void *)v34 + 572) = v75,
            !*((void *)this + 1830))
        && !*((_DWORD *)this + 3698)
        && !*((_DWORD *)this + 3699)
        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1830, 572, 0, 0x3FFFFFFFFFFLL, 32, v76, 4),
            !result))
      {
        *(_DWORD *)(*((void *)this + 33) + 156) = 0;
        uint64_t v77 = *((void *)this + 33);
        int v78 = *(_DWORD *)(v77 + 156);
        *(_DWORD *)(v77 + 156) = 0;
        *(_DWORD *)(*((void *)this + 33) + 156) ^= 0xFFFFFF00;
        uint64_t v79 = *((void *)this + 33);
        int v80 = *(_DWORD *)(v79 + 156);
        *(_DWORD *)(v79 + 156) = v78;
        if (!*((void *)this + 1852) && !*((_DWORD *)this + 3742) && !*((_DWORD *)this + 3743)) {
          goto LABEL_365;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1852, 156, 0, 0xFFFFFFFFLL, 8, v80, 4);
        if (!result)
        {
LABEL_365:
          if ((*(_DWORD *)(*(void *)v34 + 576) = 0,
                int v81 = *(_DWORD *)(*(void *)v34 + 576),
                *(_DWORD *)(*(void *)v34 + 576) = 0,
                *(_DWORD *)(*(void *)v34 + 576) ^= 0x3FFu,
                int v82 = *(_DWORD *)(*(void *)v34 + 576),
                *(_DWORD *)(*(void *)v34 + 576) = v81,
                !*((void *)this + 1852))
            && !*((_DWORD *)this + 3742)
            && !*((_DWORD *)this + 3743)
            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1852, 576, 0, 0x3FFFFFFFFFFLL, 32, v82, 4), !result))
          {
            *(_DWORD *)(*((void *)this + 33) + 160) = 0;
            uint64_t v83 = *((void *)this + 33);
            int v84 = *(_DWORD *)(v83 + 160);
            *(_DWORD *)(v83 + 160) = 0;
            *(_DWORD *)(*((void *)this + 33) + 160) ^= 0xFFFFFF00;
            uint64_t v85 = *((void *)this + 33);
            int v86 = *(_DWORD *)(v85 + 160);
            *(_DWORD *)(v85 + 160) = v84;
            if (!*((void *)this + 1874) && !*((_DWORD *)this + 3786) && !*((_DWORD *)this + 3787)) {
              goto LABEL_366;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1874, 160, 0, 0xFFFFFFFFLL, 8, v86, 4);
            if (!result)
            {
LABEL_366:
              if ((*(_DWORD *)(*(void *)v34 + 580) = 0,
                    int v87 = *(_DWORD *)(*(void *)v34 + 580),
                    *(_DWORD *)(*(void *)v34 + 580) = 0,
                    *(_DWORD *)(*(void *)v34 + 580) ^= 0x3FFu,
                    int v88 = *(_DWORD *)(*(void *)v34 + 580),
                    *(_DWORD *)(*(void *)v34 + 580) = v87,
                    !*((void *)this + 1874))
                && !*((_DWORD *)this + 3786)
                && !*((_DWORD *)this + 3787)
                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1874, 580, 0, 0x3FFFFFFFFFFLL, 32, v88, 4), !result))
              {
                *(_DWORD *)(*((void *)this + 33) + 164) = 0;
                uint64_t v89 = *((void *)this + 33);
                int v90 = *(_DWORD *)(v89 + 164);
                *(_DWORD *)(v89 + 164) = 0;
                *(_DWORD *)(*((void *)this + 33) + 164) ^= 0xFFFFFF00;
                uint64_t v91 = *((void *)this + 33);
                int v92 = *(_DWORD *)(v91 + 164);
                *(_DWORD *)(v91 + 164) = v90;
                if (!*((void *)this + 1896) && !*((_DWORD *)this + 3830) && !*((_DWORD *)this + 3831)) {
                  goto LABEL_367;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1896, 164, 0, 0xFFFFFFFFLL, 8, v92, 4);
                if (!result)
                {
LABEL_367:
                  if ((*(_DWORD *)(*(void *)v34 + 584) = 0,
                        int v93 = *(_DWORD *)(*(void *)v34 + 584),
                        *(_DWORD *)(*(void *)v34 + 584) = 0,
                        *(_DWORD *)(*(void *)v34 + 584) ^= 0x3FFu,
                        int v94 = *(_DWORD *)(*(void *)v34 + 584),
                        *(_DWORD *)(*(void *)v34 + 584) = v93,
                        !*((void *)this + 1896))
                    && !*((_DWORD *)this + 3830)
                    && !*((_DWORD *)this + 3831)
                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1896, 584, 0, 0x3FFFFFFFFFFLL, 32, v94, 4), !result))
                  {
                    *(_DWORD *)(*((void *)this + 33) + 168) = 0;
                    uint64_t v95 = *((void *)this + 33);
                    int v96 = *(_DWORD *)(v95 + 168);
                    *(_DWORD *)(v95 + 168) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 168) ^= 0xFFFFFF00;
                    uint64_t v97 = *((void *)this + 33);
                    int v98 = *(_DWORD *)(v97 + 168);
                    *(_DWORD *)(v97 + 168) = v96;
                    if (!*((void *)this + 1918) && !*((_DWORD *)this + 3874) && !*((_DWORD *)this + 3875)) {
                      goto LABEL_368;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1918, 168, 0, 0xFFFFFFFFLL, 8, v98, 4);
                    if (!result)
                    {
LABEL_368:
                      if ((*(_DWORD *)(*(void *)v34 + 588) = 0,
                            int v99 = *(_DWORD *)(*(void *)v34 + 588),
                            *(_DWORD *)(*(void *)v34 + 588) = 0,
                            *(_DWORD *)(*(void *)v34 + 588) ^= 0x3FFu,
                            int v100 = *(_DWORD *)(*(void *)v34 + 588),
                            *(_DWORD *)(*(void *)v34 + 588) = v99,
                            !*((void *)this + 1918))
                        && !*((_DWORD *)this + 3874)
                        && !*((_DWORD *)this + 3875)
                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1918, 588, 0, 0x3FFFFFFFFFFLL, 32, v100, 4), !result))
                      {
                        *(_DWORD *)(*((void *)this + 33) + 172) = 0;
                        uint64_t v101 = *((void *)this + 33);
                        int v102 = *(_DWORD *)(v101 + 172);
                        *(_DWORD *)(v101 + 172) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 172) ^= 0xFFFFFF00;
                        uint64_t v103 = *((void *)this + 33);
                        int v104 = *(_DWORD *)(v103 + 172);
                        *(_DWORD *)(v103 + 172) = v102;
                        if (!*((void *)this + 1940) && !*((_DWORD *)this + 3918) && !*((_DWORD *)this + 3919)) {
                          goto LABEL_369;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1940, 172, 0, 0xFFFFFFFFLL, 8, v104, 4);
                        if (!result)
                        {
LABEL_369:
                          if ((*(_DWORD *)(*(void *)v34 + 592) = 0,
                                int v105 = *(_DWORD *)(*(void *)v34 + 592),
                                *(_DWORD *)(*(void *)v34 + 592) = 0,
                                *(_DWORD *)(*(void *)v34 + 592) ^= 0x3FFu,
                                int v106 = *(_DWORD *)(*(void *)v34 + 592),
                                *(_DWORD *)(*(void *)v34 + 592) = v105,
                                !*((void *)this + 1940))
                            && !*((_DWORD *)this + 3918)
                            && !*((_DWORD *)this + 3919)
                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1940, 592, 0, 0x3FFFFFFFFFFLL, 32, v106, 4), !result))
                          {
                            *(_DWORD *)(*((void *)this + 33) + 176) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 596) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 180) = 0;
                            uint64_t v107 = *((void *)this + 33);
                            int v108 = *(_DWORD *)(v107 + 180);
                            *(_DWORD *)(v107 + 180) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 180) ^= 0xFFFFFF00;
                            uint64_t v109 = *((void *)this + 33);
                            int v110 = *(_DWORD *)(v109 + 180);
                            *(_DWORD *)(v109 + 180) = v108;
                            if (!*((void *)this + 1280) && !*((_DWORD *)this + 2598) && !*((_DWORD *)this + 2599)) {
                              goto LABEL_370;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1280, 180, 0, 0xFFFFFFFFLL, 8, v110, 4);
                            if (!result)
                            {
LABEL_370:
                              if ((*(_DWORD *)(*(void *)v34 + 600) = 0,
                                    int v111 = *(_DWORD *)(*(void *)v34 + 600),
                                    *(_DWORD *)(*(void *)v34 + 600) = 0,
                                    *(_DWORD *)(*(void *)v34 + 600) ^= 0x3FFu,
                                    int v112 = *(_DWORD *)(*(void *)v34 + 600),
                                    *(_DWORD *)(*(void *)v34 + 600) = v111,
                                    !*((void *)this + 1280))
                                && !*((_DWORD *)this + 2598)
                                && !*((_DWORD *)this + 2599)
                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1280, 600, 0, 0x3FFFFFFFFFFLL, 32, v112, 4), !result))
                              {
                                *(_DWORD *)(*((void *)this + 33) + 184) = 0;
                                uint64_t v113 = *((void *)this + 33);
                                int v114 = *(_DWORD *)(v113 + 184);
                                *(_DWORD *)(v113 + 184) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 184) ^= 0xFFFFFF00;
                                uint64_t v115 = *((void *)this + 33);
                                int v116 = *(_DWORD *)(v115 + 184);
                                *(_DWORD *)(v115 + 184) = v114;
                                int v117 = (void *)((char *)this + 176 * v300 + 10416);
                                if (!*v117
                                  && !*((_DWORD *)this + 44 * v300 + 2642)
                                  && !*((_DWORD *)this + 44 * v300 + 2643))
                                {
                                  goto LABEL_371;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v300 + 1302, 184, 0, 0xFFFFFFFFLL, 8, v116, 4);
                                if (!result)
                                {
LABEL_371:
                                  if ((*(_DWORD *)(*(void *)v34 + 604) = 0,
                                        int v118 = *(_DWORD *)(*(void *)v34 + 604),
                                        *(_DWORD *)(*(void *)v34 + 604) = 0,
                                        *(_DWORD *)(*(void *)v34 + 604) ^= 0x3FFu,
                                        int v119 = *(_DWORD *)(*(void *)v34 + 604),
                                        *(_DWORD *)(*(void *)v34 + 604) = v118,
                                        !*v117)
                                    && !*((_DWORD *)this + 44 * v300 + 2642)
                                    && !*((_DWORD *)this + 44 * v300 + 2643)
                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v117, 604, 0, 0x3FFFFFFFFFFLL, 32, v119, 4), !result))
                                  {
                                    *(_DWORD *)(*((void *)this + 33) + 188) = 0;
                                    uint64_t v120 = *((void *)this + 33);
                                    int v121 = *(_DWORD *)(v120 + 188);
                                    *(_DWORD *)(v120 + 188) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 188) ^= 0xFFFFFF80;
                                    uint64_t v122 = *((void *)this + 33);
                                    int v123 = *(_DWORD *)(v122 + 188);
                                    *(_DWORD *)(v122 + 188) = v121;
                                    uint64_t v124 = (void *)((char *)this + 176 * v300 + 560);
                                    if (!*v124
                                      && !*((_DWORD *)this + 44 * v300 + 178)
                                      && !*((_DWORD *)this + 44 * v300 + 179))
                                    {
                                      goto LABEL_372;
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v300 + 70, 188, 0, 0xFFFFFFFFLL, 7, v123, 4);
                                    if (!result)
                                    {
LABEL_372:
                                      if ((*(_DWORD *)(*(void *)v34 + 608) = 0,
                                            int v125 = *(_DWORD *)(*(void *)v34 + 608),
                                            *(_DWORD *)(*(void *)v34 + 608) = 0,
                                            *(_DWORD *)(*(void *)v34 + 608) ^= 0x3FFu,
                                            int v126 = *(_DWORD *)(*(void *)v34 + 608),
                                            *(_DWORD *)(*(void *)v34 + 608) = v125,
                                            !*v124)
                                        && !*((_DWORD *)this + 44 * v300 + 178)
                                        && !*((_DWORD *)this + 44 * v300 + 179)
                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v124, 608, 0, 0x3FFFFFFFFFFLL, 32, v126, 4), !result))
                                      {
                                        *(_DWORD *)(*(void *)v34 + 192) = 0;
                                        int v127 = *(_DWORD *)(*(void *)v34 + 192);
                                        *(_DWORD *)(*(void *)v34 + 192) = 0;
                                        *(_DWORD *)(*(void *)v34 + 192) ^= 0xFFFFFF80;
                                        int v128 = *(_DWORD *)(*(void *)v34 + 192);
                                        *(_DWORD *)(*(void *)v34 + 192) = v127;
                                        long long v129 = (void *)(v296 + 8);
                                        if (!*(void *)(v296 + 8)
                                          && !*(_DWORD *)(v296 + 160)
                                          && !*(_DWORD *)(v296 + 164))
                                        {
                                          goto LABEL_373;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v296 + 8), 192, *(_DWORD *)(v296 + 60), 0xFFFFFFFFLL, 7, v128, 4);
                                        if (!result)
                                        {
LABEL_373:
                                          if ((*(_DWORD *)(*(void *)v34 + 612) = 0,
                                                int v130 = *(_DWORD *)(*(void *)v34 + 612),
                                                *(_DWORD *)(*(void *)v34 + 612) = 0,
                                                *(_DWORD *)(*(void *)v34 + 612) ^= 0x3FFu,
                                                int v131 = *(_DWORD *)(*(void *)v34 + 612),
                                                *(_DWORD *)(*(void *)v34 + 612) = v130,
                                                !*v129)
                                            && !*(_DWORD *)(v296 + 160)
                                            && !*(_DWORD *)(v296 + 164)
                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, 612, *(_DWORD *)(v296 + 60), 0x3FFFFFFFFFFLL, 32, v131, 4), !result))
                                          {
                                            *(_DWORD *)(*((void *)this + 33) + 196) = 0;
                                            uint64_t v132 = *((void *)this + 33);
                                            int v133 = *(_DWORD *)(v132 + 196);
                                            *(_DWORD *)(v132 + 196) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 196) ^= 0xFFFFFF80;
                                            uint64_t v134 = *((void *)this + 33);
                                            int v135 = *(_DWORD *)(v134 + 196);
                                            *(_DWORD *)(v134 + 196) = v133;
                                            int v136 = (void *)((char *)this + 176 * v300 + 4784);
                                            if (!*v136
                                              && !*((_DWORD *)this + 44 * v300 + 1234)
                                              && !*((_DWORD *)this + 44 * v300 + 1235))
                                            {
                                              goto LABEL_374;
                                            }
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v300 + 598, 196, 0, 0xFFFFFFFFLL, 7, v135, 4);
                                            if (!result)
                                            {
LABEL_374:
                                              if ((*(_DWORD *)(*(void *)v34 + 616) = 0,
                                                    int v137 = *(_DWORD *)(*(void *)v34 + 616),
                                                    *(_DWORD *)(*(void *)v34 + 616) = 0,
                                                    *(_DWORD *)(*(void *)v34 + 616) ^= 0x3FFu,
                                                    int v138 = *(_DWORD *)(*(void *)v34 + 616),
                                                    *(_DWORD *)(*(void *)v34 + 616) = v137,
                                                    !*v136)
                                                && !*((_DWORD *)this + 44 * v300 + 1234)
                                                && !*((_DWORD *)this + 44 * v300 + 1235)
                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v136, 616, 0, 0x3FFFFFFFFFFLL, 32, v138, 4), !result))
                                              {
                                                if ((*(_DWORD *)(*(void *)v34 + 200) = 0,
                                                      int v139 = *(_DWORD *)(*(void *)v34 + 200),
                                                      *(_DWORD *)(*(void *)v34 + 200) = 0,
                                                      *(_DWORD *)(*(void *)v34 + 200) ^= 0xFFFFFF80,
                                                      int v140 = *(_DWORD *)(*(void *)v34 + 200),
                                                      *(_DWORD *)(*(void *)v34 + 200) = v139,
                                                      !*v129)
                                                  && !*(_DWORD *)(v296 + 160)
                                                  && !*(_DWORD *)(v296 + 164)
                                                  || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, 200, *(_DWORD *)(v296 + 64), 0xFFFFFFFFLL, 7, v140, 4), !result))
                                                {
                                                  if ((*(_DWORD *)(*(void *)v34 + 620) = 0,
                                                        int v141 = *(_DWORD *)(*(void *)v34 + 620),
                                                        *(_DWORD *)(*(void *)v34 + 620) = 0,
                                                        *(_DWORD *)(*(void *)v34 + 620) ^= 0x3FFu,
                                                        int v142 = *(_DWORD *)(*(void *)v34 + 620),
                                                        *(_DWORD *)(*(void *)v34 + 620) = v141,
                                                        !*v129)
                                                    && !*(_DWORD *)(v296 + 160)
                                                    && !*(_DWORD *)(v296 + 164)
                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, 620, *(_DWORD *)(v296 + 64), 0x3FFFFFFFFFFLL, 32, v142, 4), !result))
                                                  {
                                                    if (*(_DWORD *)(*((void *)this + 32) + 2648) != 1) {
                                                      goto LABEL_375;
                                                    }
                                                    if ((int v143 = *(_DWORD *)(*(void *)v34 + 192),
                                                          *(_DWORD *)(*(void *)v34 + 192) = 0,
                                                          *(_DWORD *)(*(void *)v34 + 192) ^= 0xFFFFFF80,
                                                          int v144 = *(_DWORD *)(*(void *)v34 + 192),
                                                          *(_DWORD *)(*(void *)v34 + 192) = v143,
                                                          !*v129)
                                                      && !*(_DWORD *)(v296 + 160)
                                                      && !*(_DWORD *)(v296 + 164)
                                                      || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, 192, *(_DWORD *)(v296 + 60), 0xFFFFFFFFLL, 7, v144, 4), !result))
                                                    {
                                                      if ((int v145 = *(_DWORD *)(*(void *)v34 + 612),
                                                            *(_DWORD *)(*(void *)v34 + 612) = 0,
                                                            *(_DWORD *)(*(void *)v34 + 612) ^= 0x3FFu,
                                                            int v146 = *(_DWORD *)(*(void *)v34 + 612),
                                                            *(_DWORD *)(*(void *)v34 + 612) = v145,
                                                            !*v129)
                                                        && !*(_DWORD *)(v296 + 160)
                                                        && !*(_DWORD *)(v296 + 164)
                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, 612, *(_DWORD *)(v296 + 60), 0x3FFFFFFFFFFLL, 32, v146, 4), !result))
                                                      {
                                                        if ((int v147 = *(_DWORD *)(*(void *)v34 + 200),
                                                              *(_DWORD *)(*(void *)v34 + 200) = 0,
                                                              *(_DWORD *)(*(void *)v34 + 200) ^= 0xFFFFFF80,
                                                              int v148 = *(_DWORD *)(*(void *)v34 + 200),
                                                              *(_DWORD *)(*(void *)v34 + 200) = v147,
                                                              !*v129)
                                                          && !*(_DWORD *)(v296 + 160)
                                                          && !*(_DWORD *)(v296 + 164)
                                                          || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, 200, *(_DWORD *)(v296 + 64), 0xFFFFFFFFLL, 7, v148, 4), !result))
                                                        {
                                                          if ((int v149 = *(_DWORD *)(*(void *)v34 + 620),
                                                                *(_DWORD *)(*(void *)v34 + 620) = 0,
                                                                *(_DWORD *)(*(void *)v34 + 620) ^= 0x3FFu,
                                                                int v150 = *(_DWORD *)(*(void *)v34 + 620),
                                                                *(_DWORD *)(*(void *)v34 + 620) = v149,
                                                                !*v129)
                                                            && !*(_DWORD *)(v296 + 160)
                                                            && !*(_DWORD *)(v296 + 164)
                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, 620, *(_DWORD *)(v296 + 64), 0x3FFFFFFFFFFLL, 32, v150, 4), !result))
                                                          {
                                                            if ((int v151 = *(_DWORD *)(*(void *)v34 + 188),
                                                                  *(_DWORD *)(*(void *)v34 + 188) = 0,
                                                                  *(_DWORD *)(*(void *)v34 + 188) ^= 0xFFFFFF80,
                                                                  int v152 = *(_DWORD *)(*(void *)v34 + 188),
                                                                  *(_DWORD *)(*(void *)v34 + 188) = v151,
                                                                  !*v129)
                                                              && !*(_DWORD *)(v296 + 160)
                                                              && !*(_DWORD *)(v296 + 164)
                                                              || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, 188, *(_DWORD *)(v296 + 72), 0xFFFFFFFFLL, 7, v152, 4), !result))
                                                            {
                                                              if ((int v153 = *(_DWORD *)(*(void *)v34 + 608),
                                                                    *(_DWORD *)(*(void *)v34 + 608) = 0,
                                                                    *(_DWORD *)(*(void *)v34 + 608) ^= 0x3FFu,
                                                                    int v154 = *(_DWORD *)(*(void *)v34 + 608),
                                                                    *(_DWORD *)(*(void *)v34 + 608) = v153,
                                                                    !*v129)
                                                                && !*(_DWORD *)(v296 + 160)
                                                                && !*(_DWORD *)(v296 + 164)
                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, 608, *(_DWORD *)(v296 + 72), 0x3FFFFFFFFFFLL, 32, v154, 4), !result))
                                                              {
                                                                if ((int v155 = *(_DWORD *)(*(void *)v34 + 196),
                                                                      *(_DWORD *)(*(void *)v34 + 196) = 0,
                                                                      *(_DWORD *)(*(void *)v34 + 196) ^= 0xFFFFFF80,
                                                                      int v156 = *(_DWORD *)(*(void *)v34 + 196),
                                                                      *(_DWORD *)(*(void *)v34 + 196) = v155,
                                                                      !*v129)
                                                                  && !*(_DWORD *)(v296 + 160)
                                                                  && !*(_DWORD *)(v296 + 164)
                                                                  || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, 196, *(_DWORD *)(v296 + 76), 0xFFFFFFFFLL, 7, v156, 4), !result))
                                                                {
                                                                  if ((int v157 = *(_DWORD *)(*(void *)v34 + 616),
                                                                        *(_DWORD *)(*(void *)v34 + 616) = 0,
                                                                        *(_DWORD *)(*(void *)v34 + 616) ^= 0x3FFu,
                                                                        int v158 = *(_DWORD *)(*(void *)v34 + 616),
                                                                        *(_DWORD *)(*(void *)v34 + 616) = v157,
                                                                        !*v129)
                                                                    && !*(_DWORD *)(v296 + 160)
                                                                    && !*(_DWORD *)(v296 + 164)
                                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, 616, *(_DWORD *)(v296 + 76), 0x3FFFFFFFFFFLL, 32, v158, 4), !result))
                                                                  {
LABEL_375:
                                                                    if (*(_DWORD *)(v16 + 52) & 0x2000 | v298)
                                                                    {
                                                                      *((_DWORD *)this + v300 + 116) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 204) = 0;
                                                                      if (v298)
                                                                      {
                                                                        uint64_t v159 = 0;
                                                                        if (v295) {
                                                                          int v160 = 0x2000000;
                                                                        }
                                                                        else {
                                                                          int v160 = 0;
                                                                        }
                                                                        int v291 = v160;
                                                                        do
                                                                        {
                                                                          uint64_t v161 = *((void *)v318 + v159);
                                                                          uint64_t v162 = *(unsigned int *)(v161 + 32);
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 204) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v159 + 204) & 0xFFFFFFF | ((v298 << 28) - 0x10000000);
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 204) &= 0xF3FFFFFF;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v159 + 204) & 0xFDFFFFFF | v291;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 204) |= 0x1000000u;
                                                                          int v163 = v299 - *(_DWORD *)(v161 + 12);
                                                                          int v164 = v163 & 0x1FFFF;
                                                                          if (v163 < -32768) {
                                                                            int v164 = 98304;
                                                                          }
                                                                          if (v163 < 0x8000) {
                                                                            int v165 = v164;
                                                                          }
                                                                          else {
                                                                            int v165 = 0x7FFF;
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v159 + 204) & 0xFFFE0000 | v165;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v159 + 204) & 0xFFFDFFFF | (*(unsigned __int8 *)(v161 + 1) << 17);
                                                                          if (*(_DWORD *)(v161 + 28) == 1)
                                                                          {
                                                                            long long v316 = 0u;
                                                                            long long v317 = 0u;
                                                                            long long v314 = 0u;
                                                                            long long v315 = 0u;
                                                                            long long v312 = 0u;
                                                                            long long v313 = 0u;
                                                                            long long v310 = 0u;
                                                                            long long v311 = 0u;
                                                                            long long v308 = 0u;
                                                                            long long v309 = 0u;
                                                                            memset(buf, 0, sizeof(buf));
                                                                            int DPB = AVC_RLM::getDPB(*(void *)(*((void *)this + 32)+ 3104), buf);
                                                                            if (DPB < 1)
                                                                            {
                                                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                              int v305 = 136315138;
                                                                              }
                                                                              int v306 = "populatePictureRegisters";
                                                                              int v29 = &_os_log_internal;
                                                                              uint64_t v30 = "AppleAVD: ERROR: %s: No ref pics found!\n";
                                                                            }
                                                                            else
                                                                            {
                                                                              uint64_t v167 = DPB;
                                                                              while (v167-- >= 1)
                                                                              {
                                                                                uint64_t v161 = buf[v167];
                                                                                if (!*(_DWORD *)(v161 + 28))
                                                                                {
                                                                                  uint64_t v162 = *(unsigned int *)(v161 + 32);
                                                                                  goto LABEL_224;
                                                                                }
                                                                              }
                                                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                              int v305 = 136315138;
                                                                              }
                                                                              int v306 = "populatePictureRegisters";
                                                                              int v29 = &_os_log_internal;
                                                                              uint64_t v30 = "AppleAVD: ERROR: %s: No non-existing"
                                                                                    " ref frames found!\n";
                                                                            }
                                                                            long long v31 = (uint8_t *)&v305;
                                                                            goto LABEL_354;
                                                                          }
LABEL_224:
                                                                          if (v295)
                                                                          {
                                                                            buf[0] = 0;
                                                                            if (!CAVDAvcDecoder::decodeGetRenderTargetRef(*((void *)this + 32), v162, *(_DWORD *)(v161 + 56), *(_DWORD *)(v161 + 64), buf))
                                                                            {
                                                                              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                              {
                                                                                LOWORD(v305) = 0;
                                                                                int v29 = &_os_log_internal;
                                                                                uint64_t v30 = "AppleAVD: decodeGetRenderTargetRef"
                                                                                      " RETURNED ERROR\n";
                                                                                long long v31 = (uint8_t *)&v305;
                                                                                uint32_t v32 = 2;
                                                                                goto LABEL_39;
                                                                              }
                                                                              return 0xFFFFFFFFLL;
                                                                            }
                                                                            *(void *)(v161 + 40) = buf[0] + 8;
                                                                          }
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v159
                                                                                    + 268) = 0;
                                                                          int v169 = 4 * v159;
                                                                          int v297 = 4 * v159 + 268;
                                                                          uint64_t v170 = *((void *)this + 33) + 4 * v159;
                                                                          int v171 = *(_DWORD *)(v170 + 268);
                                                                          *(_DWORD *)(v170 + 268) = 0;
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v159
                                                                                    + 268) ^= 0xFFFFFF80;
                                                                          uint64_t v172 = *((void *)this + 33) + 4 * v159;
                                                                          int v173 = *(_DWORD *)(v172 + 268);
                                                                          *(_DWORD *)(v172 + 268) = v171;
                                                                          unsigned int v301 = v162;
                                                                          uint64_t v174 = (void *)((char *)this
                                                                                          + 176 * v162
                                                                                          + 560);
                                                                          if (*v174
                                                                            || *((_DWORD *)this + 44 * v301 + 178)
                                                                            || *((_DWORD *)this + 44 * v301 + 179))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v174, v297, 0, 0xFFFFFFFFLL, 7, v173, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 624) = 0;
                                                                          int v294 = v169 + 624;
                                                                          uint64_t v175 = *(void *)v34 + 4 * v159;
                                                                          int v176 = *(_DWORD *)(v175 + 624);
                                                                          *(_DWORD *)(v175 + 624) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 624) ^= 0x3FFu;
                                                                          uint64_t v177 = *(void *)v34 + 4 * v159;
                                                                          int v178 = *(_DWORD *)(v177 + 624);
                                                                          *(_DWORD *)(v177 + 624) = v176;
                                                                          if (*v174
                                                                            || *((_DWORD *)this + 44 * v301 + 178)
                                                                            || *((_DWORD *)this + 44 * v301 + 179))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v174, v294, 0, 0x3FFFFFFFFFFLL, 32, v178, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 332) = 0;
                                                                          int v293 = v169 + 332;
                                                                          uint64_t v179 = *(void *)v34 + 4 * v159;
                                                                          int v180 = *(_DWORD *)(v179 + 332);
                                                                          *(_DWORD *)(v179 + 332) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 332) ^= 0xFFFFFF80;
                                                                          uint64_t v181 = *(void *)v34 + 4 * v159;
                                                                          int v182 = *(_DWORD *)(v181 + 332);
                                                                          *(_DWORD *)(v181 + 332) = v180;
                                                                          uint64_t v183 = *(void *)(v161 + 40);
                                                                          if (*(void *)v183
                                                                            || *(_DWORD *)(v183 + 152)
                                                                            || *(_DWORD *)(v183 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v183, v293, *(_DWORD *)(v183 + 52), 0xFFFFFFFFLL, 7, v182, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 688) = 0;
                                                                          int v292 = v169 + 688;
                                                                          uint64_t v184 = *(void *)v34 + 4 * v159;
                                                                          int v185 = *(_DWORD *)(v184 + 688);
                                                                          *(_DWORD *)(v184 + 688) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 688) ^= 0x3FFu;
                                                                          uint64_t v186 = *(void *)v34 + 4 * v159;
                                                                          int v187 = *(_DWORD *)(v186 + 688);
                                                                          *(_DWORD *)(v186 + 688) = v185;
                                                                          uint64_t v188 = *(void *)(v161 + 40);
                                                                          if (*(void *)v188
                                                                            || *(_DWORD *)(v188 + 152)
                                                                            || *(_DWORD *)(v188 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v188, v292, *(_DWORD *)(v188 + 52), 0x3FFFFFFFFFFLL, 32, v187, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v159
                                                                                    + 396) = 0;
                                                                          int v290 = v169 + 396;
                                                                          uint64_t v189 = *((void *)this + 33) + 4 * v159;
                                                                          int v190 = *(_DWORD *)(v189 + 396);
                                                                          *(_DWORD *)(v189 + 396) = 0;
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v159
                                                                                    + 396) ^= 0xFFFFFF80;
                                                                          uint64_t v191 = *((void *)this + 33) + 4 * v159;
                                                                          int v192 = *(_DWORD *)(v191 + 396);
                                                                          *(_DWORD *)(v191 + 396) = v190;
                                                                          uint64_t v193 = (void *)((char *)this
                                                                                          + 176 * v301
                                                                                          + 4784);
                                                                          if (*v193
                                                                            || *((_DWORD *)this + 44 * v301 + 1234)
                                                                            || *((_DWORD *)this + 44 * v301 + 1235))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v301 + 598, v290, 0, 0xFFFFFFFFLL, 7, v192, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 752) = 0;
                                                                          int v289 = v169 + 752;
                                                                          uint64_t v194 = *(void *)v34 + 4 * v159;
                                                                          int v195 = *(_DWORD *)(v194 + 752);
                                                                          *(_DWORD *)(v194 + 752) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 752) ^= 0x3FFu;
                                                                          uint64_t v196 = *(void *)v34 + 4 * v159;
                                                                          int v197 = *(_DWORD *)(v196 + 752);
                                                                          *(_DWORD *)(v196 + 752) = v195;
                                                                          if (*v193
                                                                            || *((_DWORD *)this + 44 * v301 + 1234)
                                                                            || *((_DWORD *)this + 44 * v301 + 1235))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v193, v289, 0, 0x3FFFFFFFFFFLL, 32, v197, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 460) = 0;
                                                                          int v198 = v169 + 460;
                                                                          uint64_t v199 = *(void *)v34 + 4 * v159;
                                                                          int v200 = *(_DWORD *)(v199 + 460);
                                                                          *(_DWORD *)(v199 + 460) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 460) ^= 0xFFFFFF80;
                                                                          uint64_t v201 = *(void *)v34 + 4 * v159;
                                                                          int v202 = *(_DWORD *)(v201 + 460);
                                                                          *(_DWORD *)(v201 + 460) = v200;
                                                                          uint64_t v203 = *(void *)(v161 + 40);
                                                                          if (*(void *)v203
                                                                            || *(_DWORD *)(v203 + 152)
                                                                            || *(_DWORD *)(v203 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v203, v169 + 460, *(_DWORD *)(v203 + 56), 0xFFFFFFFFLL, 7, v202, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 816) = 0;
                                                                          int v204 = v169 + 816;
                                                                          uint64_t v205 = *(void *)v34 + 4 * v159;
                                                                          int v206 = *(_DWORD *)(v205 + 816);
                                                                          *(_DWORD *)(v205 + 816) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v159 + 816) ^= 0x3FFu;
                                                                          uint64_t v207 = *(void *)v34 + 4 * v159;
                                                                          int v208 = *(_DWORD *)(v207 + 816);
                                                                          *(_DWORD *)(v207 + 816) = v206;
                                                                          uint64_t v209 = *(void *)(v161 + 40);
                                                                          if (*(void *)v209
                                                                            || *(_DWORD *)(v209 + 152)
                                                                            || *(_DWORD *)(v209 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v209, v204, *(_DWORD *)(v209 + 56), 0x3FFFFFFFFFFLL, 32, v208, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          if (*(_DWORD *)(*((void *)this + 32)
                                                                                         + 2648) == 1)
                                                                          {
                                                                            uint64_t v210 = *(void *)v34 + 4 * v159;
                                                                            int v211 = *(_DWORD *)(v210 + 332);
                                                                            *(_DWORD *)(v210 + 332) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v159 + 332) ^= 0xFFFFFF80;
                                                                            uint64_t v212 = *(void *)v34 + 4 * v159;
                                                                            int v213 = *(_DWORD *)(v212 + 332);
                                                                            *(_DWORD *)(v212 + 332) = v211;
                                                                            uint64_t v214 = *(void *)(v161 + 40);
                                                                            if (*(void *)v214
                                                                              || *(_DWORD *)(v214 + 152)
                                                                              || *(_DWORD *)(v214 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v214, v293, *(_DWORD *)(v214 + 52), 0xFFFFFFFFLL, 7, v213, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v215 = *(void *)v34 + 4 * v159;
                                                                            int v216 = *(_DWORD *)(v215 + 688);
                                                                            *(_DWORD *)(v215 + 688) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v159 + 688) ^= 0x3FFu;
                                                                            uint64_t v217 = *(void *)v34 + 4 * v159;
                                                                            int v218 = *(_DWORD *)(v217 + 688);
                                                                            *(_DWORD *)(v217 + 688) = v216;
                                                                            uint64_t v219 = *(void *)(v161 + 40);
                                                                            if (*(void *)v219
                                                                              || *(_DWORD *)(v219 + 152)
                                                                              || *(_DWORD *)(v219 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v219, v292, *(_DWORD *)(v219 + 52), 0x3FFFFFFFFFFLL, 32, v218, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v220 = *(void *)v34 + 4 * v159;
                                                                            int v221 = *(_DWORD *)(v220 + 460);
                                                                            *(_DWORD *)(v220 + 460) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v159 + 460) ^= 0xFFFFFF80;
                                                                            uint64_t v222 = *(void *)v34 + 4 * v159;
                                                                            int v223 = *(_DWORD *)(v222 + 460);
                                                                            *(_DWORD *)(v222 + 460) = v221;
                                                                            uint64_t v224 = *(void *)(v161 + 40);
                                                                            if (*(void *)v224
                                                                              || *(_DWORD *)(v224 + 152)
                                                                              || *(_DWORD *)(v224 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v224, v198, *(_DWORD *)(v224 + 56), 0xFFFFFFFFLL, 7, v223, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v225 = *(void *)v34 + 4 * v159;
                                                                            int v226 = *(_DWORD *)(v225 + 816);
                                                                            *(_DWORD *)(v225 + 816) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v159 + 816) ^= 0x3FFu;
                                                                            uint64_t v227 = *(void *)v34 + 4 * v159;
                                                                            int v228 = *(_DWORD *)(v227 + 816);
                                                                            *(_DWORD *)(v227 + 816) = v226;
                                                                            uint64_t v229 = *(void *)(v161 + 40);
                                                                            if (*(void *)v229
                                                                              || *(_DWORD *)(v229 + 152)
                                                                              || *(_DWORD *)(v229 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v229, v204, *(_DWORD *)(v229 + 56), 0x3FFFFFFFFFFLL, 32, v228, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v230 = *(void *)v34 + 4 * v159;
                                                                            int v231 = *(_DWORD *)(v230 + 268);
                                                                            *(_DWORD *)(v230 + 268) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v159 + 268) ^= 0xFFFFFF80;
                                                                            uint64_t v232 = *(void *)v34 + 4 * v159;
                                                                            int v233 = *(_DWORD *)(v232 + 268);
                                                                            *(_DWORD *)(v232 + 268) = v231;
                                                                            uint64_t v234 = *(void *)(v161 + 40);
                                                                            if (*(void *)v234
                                                                              || *(_DWORD *)(v234 + 152)
                                                                              || *(_DWORD *)(v234 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v234, v297, *(_DWORD *)(v234 + 64), 0xFFFFFFFFLL, 7, v233, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v235 = *(void *)v34 + 4 * v159;
                                                                            int v236 = *(_DWORD *)(v235 + 624);
                                                                            *(_DWORD *)(v235 + 624) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v159 + 624) ^= 0x3FFu;
                                                                            uint64_t v237 = *(void *)v34 + 4 * v159;
                                                                            int v238 = *(_DWORD *)(v237 + 624);
                                                                            *(_DWORD *)(v237 + 624) = v236;
                                                                            uint64_t v239 = *(void *)(v161 + 40);
                                                                            if (*(void *)v239
                                                                              || *(_DWORD *)(v239 + 152)
                                                                              || *(_DWORD *)(v239 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v239, v294, *(_DWORD *)(v239 + 64), 0x3FFFFFFFFFFLL, 32, v238, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v240 = *(void *)v34 + 4 * v159;
                                                                            int v241 = *(_DWORD *)(v240 + 396);
                                                                            *(_DWORD *)(v240 + 396) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v159 + 396) ^= 0xFFFFFF80;
                                                                            uint64_t v242 = *(void *)v34 + 4 * v159;
                                                                            int v243 = *(_DWORD *)(v242 + 396);
                                                                            *(_DWORD *)(v242 + 396) = v241;
                                                                            uint64_t v244 = *(void *)(v161 + 40);
                                                                            if (*(void *)v244
                                                                              || *(_DWORD *)(v244 + 152)
                                                                              || *(_DWORD *)(v244 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v244, v290, *(_DWORD *)(v244 + 68), 0xFFFFFFFFLL, 7, v243, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v245 = *(void *)v34 + 4 * v159;
                                                                            int v246 = *(_DWORD *)(v245 + 752);
                                                                            *(_DWORD *)(v245 + 752) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v159 + 752) ^= 0x3FFu;
                                                                            uint64_t v247 = *(void *)v34 + 4 * v159;
                                                                            int v248 = *(_DWORD *)(v247 + 752);
                                                                            *(_DWORD *)(v247 + 752) = v246;
                                                                            uint64_t v249 = *(void *)(v161 + 40);
                                                                            if (*(void *)v249
                                                                              || *(_DWORD *)(v249 + 152)
                                                                              || *(_DWORD *)(v249 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v249, v289, *(_DWORD *)(v249 + 68), 0x3FFFFFFFFFFLL, 32, v248, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                          }
                                                                          ++v159;
                                                                        }
                                                                        while (v159 != v298);
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      *(_DWORD *)(v16 + 52) |= 0x2000u;
                                                                      *((_DWORD *)this + v300 + 116) = 1;
                                                                      *(_DWORD *)(*((void *)this + 33) + 204) = 0;
                                                                    }
                                                                    *(_DWORD *)(*(void *)v34 + 524) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 880) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 528) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 884) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 532) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 536) = 0;
                                                                    if (v303)
                                                                    {
                                                                      uint64_t v250 = *((void *)this + 32);
                                                                      unsigned int v251 = *(unsigned __int8 *)(v250 + 3004);
                                                                      if (*(unsigned char *)(v250 + 3004))
                                                                      {
                                                                        unsigned int v251 = *(_DWORD *)(v250 + 3016);
                                                                        unsigned int v302 = *(_DWORD *)(v250 + 3020);
                                                                      }
                                                                      else
                                                                      {
                                                                        unsigned int v302 = 0;
                                                                      }
                                                                      uint64_t v252 = *(void *)(v250 + 3656);
                                                                      uint64_t v304 = *(unsigned int *)(v252 + 56);
                                                                      unint64_t v253 = *(unsigned int *)(v252 + 52)
                                                                           + (unint64_t)v251;
                                                                      uint64_t v254 = *((void *)this + 33);
                                                                      int v255 = *(_DWORD *)(v254 + 524);
                                                                      *(_DWORD *)(v254 + 524) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 524) ^= 0xFFFFFFC0;
                                                                      uint64_t v256 = *((void *)this + 33);
                                                                      int v257 = *(_DWORD *)(v256 + 524);
                                                                      *(_DWORD *)(v256 + 524) = v255;
                                                                      uint64_t v258 = *(void *)(*((void *)this + 32) + 3656);
                                                                      unint64_t v259 = HIDWORD(v253);
                                                                      if (*(void *)v258
                                                                        || *(_DWORD *)(v258 + 152)
                                                                        || *(_DWORD *)(v258 + 156))
                                                                      {
                                                                        if (v259
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1255;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v258, 524, v253, 0xFFFFFFFFLL, 6, v257, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      uint64_t v260 = *((void *)this + 33);
                                                                      int v261 = *(_DWORD *)(v260 + 880);
                                                                      *(_DWORD *)(v260 + 880) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 880) ^= 0x3FFu;
                                                                      uint64_t v262 = *((void *)this + 33);
                                                                      int v263 = *(_DWORD *)(v262 + 880);
                                                                      *(_DWORD *)(v262 + 880) = v261;
                                                                      uint64_t v264 = *(void *)(*((void *)this + 32) + 3656);
                                                                      if (*(void *)v264
                                                                        || *(_DWORD *)(v264 + 152)
                                                                        || *(_DWORD *)(v264 + 156))
                                                                      {
                                                                        if (v259
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1257;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v264, 880, v253, 0x3FFFFFFFFFFLL, 32, v263, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      unint64_t v265 = v304 + v302;
                                                                      uint64_t v266 = *((void *)this + 33);
                                                                      int v267 = *(_DWORD *)(v266 + 528);
                                                                      *(_DWORD *)(v266 + 528) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 528) ^= 0xFFFFFFC0;
                                                                      uint64_t v268 = *((void *)this + 33);
                                                                      int v269 = *(_DWORD *)(v268 + 528);
                                                                      *(_DWORD *)(v268 + 528) = v267;
                                                                      uint64_t v270 = *(void *)(*((void *)this + 32) + 3656);
                                                                      unint64_t v271 = HIDWORD(v265);
                                                                      if (*(void *)v270
                                                                        || *(_DWORD *)(v270 + 152)
                                                                        || *(_DWORD *)(v270 + 156))
                                                                      {
                                                                        if (v271
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1260;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v270, 528, v265, 0xFFFFFFFFLL, 6, v269, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      uint64_t v272 = *((void *)this + 33);
                                                                      int v273 = *(_DWORD *)(v272 + 884);
                                                                      *(_DWORD *)(v272 + 884) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 884) ^= 0x3FFu;
                                                                      uint64_t v274 = *((void *)this + 33);
                                                                      int v275 = *(_DWORD *)(v274 + 884);
                                                                      *(_DWORD *)(v274 + 884) = v273;
                                                                      uint64_t v276 = *(void *)(*((void *)this + 32) + 3656);
                                                                      if (*(void *)v276
                                                                        || *(_DWORD *)(v276 + 152)
                                                                        || *(_DWORD *)(v276 + 156))
                                                                      {
                                                                        if (v271
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1262;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v276, 884, v265, 0x3FFFFFFFFFFLL, 32, v275, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      if (v70)
                                                                      {
                                                                        *(_DWORD *)(*((void *)this + 33) + 532) = *(_DWORD *)(*((void *)this + 33) + 532) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 76) >> 6) & 0xFFF) << 6);
                                                                        int v277 = (_DWORD *)(*(void *)(*((void *)this + 32) + 3656)
                                                                                        + 80);
                                                                      }
                                                                      else
                                                                      {
                                                                        if (CAHDecThymeAvc::getSWRStride(this, *(unsigned __int16 *)(v16 + 84)- *(unsigned __int16 *)(v16 + 80)+ 1, *(unsigned __int8 *)(v5 + 2224 * v3 + 6), *(unsigned __int8 *)(v5 + 2224 * v3 + 7), *(_DWORD *)(v5 + 2224 * v3 + 2212)))return 0xFFFFFFFFLL; {
                                                                        *(_DWORD *)(*((void *)this + 33) + 532) = *(_DWORD *)(*((void *)this + 33) + 532) & 0xFFFC003F | (((*((_DWORD *)this + 3976) >> 6) & 0xFFF) << 6);
                                                                        }
                                                                        int v277 = (_DWORD *)((char *)this + 15908);
                                                                      }
                                                                      *(_DWORD *)(*(void *)v34 + 536) = *(_DWORD *)(*(void *)v34 + 536) & 0xFFF8003F | (((*v277 >> 6) & 0x1FFF) << 6);
                                                                    }
                                                                    uint64_t v278 = *((void *)this + 32);
                                                                    if (*(_DWORD *)(v278 + 2360) == 1)
                                                                    {
                                                                      uint64_t v279 = *(void *)v34;
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFFE | *(_DWORD *)(v278 + 2508) & 1;
                                                                      if (*(_DWORD *)(v278 + 2508))
                                                                      {
                                                                        *(_DWORD *)(v279 + 1960) = 0x10000000;
                                                                        *(_DWORD *)(v279 + 1964) = *(_DWORD *)(v278 + 2368);
                                                                        *(_DWORD *)(v279 + 1976) = 0;
                                                                        *(void *)(v279 + 1968) = 0;
                                                                        *(_OWORD *)(v279 + 1980) = *(_OWORD *)(v278 + 2372);
                                                                        long long v280 = *(_OWORD *)(v278 + 2404);
                                                                        *(_OWORD *)(v279 + 1996) = *(_OWORD *)(v278 + 2388);
                                                                        *(_OWORD *)(v279 + 2012) = v280;
                                                                      }
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v278 + 2512) & 1));
                                                                      if (*(_DWORD *)(v278 + 2512))
                                                                      {
                                                                        *(_DWORD *)(v279 + 2028) = 0;
                                                                        if (!*(_DWORD *)(v278 + 2424))
                                                                        {
                                                                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                          LODWORD(buf[0]) = 136315138;
                                                                          }
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          int v29 = &_os_log_internal;
                                                                          uint64_t v30 = "AppleAVD: %s(): H13A descrambler is not supported\n";
                                                                          goto LABEL_353;
                                                                        }
                                                                        *(_DWORD *)(v278 + 2640) = 0;
                                                                        int v281 = *(_DWORD *)(v279 + 2028) & 0xF7FFFFF | ((*(_DWORD *)(v278 + 2420) & 1) << 23) | 0x20000000;
                                                                        *(_DWORD *)(v279 + 2028) = v281;
                                                                        *(_DWORD *)(v279 + 2028) = v281 & 0xFFC00000 | (*(_DWORD *)(v278 + 2364) == 0);
                                                                        long long v282 = *(_OWORD *)(v278 + 2428);
                                                                        long long v283 = *(_OWORD *)(v278 + 2444);
                                                                        *(_OWORD *)(v279 + 2064) = *(_OWORD *)(v278 + 2460);
                                                                        *(_OWORD *)(v279 + 2048) = v283;
                                                                        *(_OWORD *)(v279 + 2032) = v282;
                                                                      }
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v278 + 2516) & 1));
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v278 + 2520) & 1));
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v278 + 2524) & 1));
                                                                      if (*(_DWORD *)(v278 + 2516))
                                                                      {
                                                                        *(_DWORD *)(v279 + 2188) = 0;
                                                                        if (*(_DWORD *)(v278 + 2476) == 2) {
                                                                          int v284 = 805306368;
                                                                        }
                                                                        else {
                                                                          int v284 = 813694976;
                                                                        }
                                                                        *(_DWORD *)(v279 + 2188) = v284;
                                                                        memcpy((void *)(v279 + 2192), (const void *)(v278 + 2480), 4 * *(unsigned int *)(v278 + 2476));
                                                                        *(_DWORD *)(v278 + 2516) = 0;
                                                                      }
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFDF | (32 * (*(_DWORD *)(v278 + 2632) & 1));
                                                                      if (*(_DWORD *)(v278 + 2632))
                                                                      {
                                                                        *(_DWORD *)(v279 + 2080) = 0x80000000;
                                                                        unsigned int v285 = ((*(_DWORD *)(v278 + 2528) & 1) << 27) | 0x80000000;
                                                                        *(_DWORD *)(v279 + 2080) = v285;
                                                                        *(_DWORD *)(v279 + 2080) = v285 | (((2 * *(_DWORD *)(v278 + 2528)) & 4 | (*(_DWORD *)(v278 + 2528) >> 1) & 2 | (*(_DWORD *)(v278 + 2528) >> 3) & 1) << 24);
                                                                        long long v286 = *(_OWORD *)(v278 + 2532);
                                                                        long long v287 = *(_OWORD *)(v278 + 2548);
                                                                        *(_OWORD *)(v279 + 2116) = *(_OWORD *)(v278 + 2564);
                                                                        *(_OWORD *)(v279 + 2100) = v287;
                                                                        *(_OWORD *)(v279 + 2084) = v286;
                                                                        *(void *)(v279 + 2132) = *(void *)(v278 + 2580);
                                                                        *(void *)(v279 + 2140) = *(void *)(v278 + 2588);
                                                                        int v288 = *(_DWORD *)(v278 + 2528);
                                                                        if ((v288 & 6) != 0 && (v288 & 8) == 0)
                                                                        {
                                                                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                          LODWORD(buf[0]) = 136315138;
                                                                          }
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          int v29 = &_os_log_internal;
                                                                          uint64_t v30 = "AppleAVD: %s(): chip id is not used whil"
                                                                                "e ecid and/or board id is used\n";
LABEL_353:
                                                                          long long v31 = (uint8_t *)buf;
LABEL_354:
                                                                          uint32_t v32 = 12;
LABEL_39:
                                                                          _os_log_impl(&dword_223977000, v29, OS_LOG_TYPE_DEFAULT, v30, v31, v32);
                                                                          return 0xFFFFFFFFLL;
                                                                        }
                                                                        *(_OWORD *)(v279 + 2148) = *(_OWORD *)(v278 + 2596);
                                                                      }
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFBF | ((*(_DWORD *)(v278 + 2636) & 1) << 6);
                                                                      if (*(_DWORD *)(v278 + 2636))
                                                                      {
                                                                        uint64_t result = 0;
                                                                        *(_DWORD *)(v279 + 2164) = -1879048192;
                                                                        *(_DWORD *)(v279 + 2164) = ((*(_DWORD *)(v278 + 2612) & 1) << 23) | 0x90000000;
                                                                        *(_OWORD *)(v279 + 2168) = *(_OWORD *)(v278 + 2616);
                                                                        *(_DWORD *)(v278 + 2640) = 1;
                                                                        return result;
                                                                      }
                                                                    }
                                                                    return 0;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecThymeAvc::getSWRStride(CAHDecThymeAvc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1988) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3977) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecThymeAvc::getTileStartCTU(CAHDecThymeAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 888);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecThymeAvc::getTileEndCTU(CAHDecThymeAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 888);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecThymeAvc::getTileIdxAbove(CAHDecThymeAvc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 888);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecThymeAvc::populateAvdWork(CAHDecThymeAvc *this, unsigned int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v3 + 3312);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 7500);
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    long long v9 = (int *)(v2 + 3144);
    long long v10 = (int *)(v4 + 20);
    __int16 v22 = a2;
    uint64_t v11 = 44 * a2;
    uint64_t v12 = v2 + 956 * v5;
    while (1)
    {
      uint64_t v13 = v12 + v7;
      *(_WORD *)(v13 + 2212) = v8;
      *(_WORD *)(v13 + 2214) = 0;
      *(_WORD *)(v13 + 2216) = v8;
      *(_DWORD *)(v12 + v7 + 2218) = 0;
      int v14 = *v9;
      if (!CAVDAvcDecoder::GetSDataMemInfo(*((void *)this + 32), v8, &v24, &v23)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *v10;
      *(_DWORD *)(v13 + 2240) = *v10;
      *(_DWORD *)(v13 + 2244) = v15;
      *(_DWORD *)(v13 + 2248) = 0;
      if (v7) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = 15;
      }
      *(_WORD *)(v13 + 2222) = v16;
      uint64_t v17 = v24;
      if (*(void *)v24 || *(_DWORD *)(v24 + 152) || *(_DWORD *)(v24 + 156))
      {
        int v18 = v23;
        if (HIDWORD(v23) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          int v26 = "populateAvdWork";
          __int16 v27 = 1024;
          int v28 = 1994;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          int v18 = v23;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 862630, v18, 0x3FFFFFFFFFFLL, 32, -1, 2);
        if (result) {
          return result;
        }
        uint64_t v17 = v24;
        if (*(void *)v24) {
          goto LABEL_17;
        }
      }
      if (*(_DWORD *)(v17 + 152) || *(_DWORD *)(v17 + 156))
      {
LABEL_17:
        int v20 = v23;
        if (HIDWORD(v23))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            int v26 = "populateAvdWork";
            __int16 v27 = 1024;
            int v28 = 1995;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v20 = v23;
          }
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 862632, v20, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
      v9 += 239;
      *(_DWORD *)(v12 + v7 + 2236) = v14;
      ++v8;
      v7 += 44;
      v10 += 462;
      if (v11 == v7)
      {
        uint64_t v2 = *((void *)this + 33);
        __int16 v21 = v22;
        goto LABEL_24;
      }
    }
  }
  else
  {
    __int16 v21 = 0;
LABEL_24:
    uint64_t result = 0;
    *(_WORD *)(v2 + 28) = v21;
    *(_DWORD *)(v2 + 32) = 862608;
  }
  return result;
}

uint64_t CAHDecThymeAvc::allocWorkBuf_SPS(CAHDecThymeAvc *this, unsigned char *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v3 = a2[4];
  unsigned int v4 = *((unsigned __int16 *)a2 + 779);
  int v5 = 16 * v4;
  unsigned int v6 = *((unsigned __int16 *)a2 + 780);
  unsigned int v7 = 32 - __clz(((16 * v4 + 47) >> 5) - 1);
  if (v4 < 2) {
    LOBYTE(v7) = 0;
  }
  unsigned int v8 = 32 - __clz(((16 * v6 + 47) >> 5) - 1);
  if (v6 < 2) {
    LOBYTE(v8) = 0;
  }
  unsigned int v9 = ((32 << (v8 + v7)) + 127) & 0xFFFFFF80;
  if (a2[4])
  {
    unsigned int v10 = (v5 + 16) << (v3 == 3);
    unsigned int v11 = ((((16 * v6 + 16) | (v3 == 1)) >> (v3 == 1)) + 15) >> 4;
    if (v10 > 0x20)
    {
      unsigned int v12 = 32 - __clz(((v10 + 31) >> 5) - 1);
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  LOBYTE(v12) = 0;
LABEL_10:
  unsigned int v13 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  unsigned int v15 = ((8 << (v14 + v12)) + 127) & 0xFFFFFF80;
  if (a2[4]) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = 0;
  }
  *((_DWORD *)this + 3968) = v9;
  *((_DWORD *)this + 3969) = v16;
  *((void *)this + 1985) = 0;
  int v17 = 76 * v4 + 76;
  *((_DWORD *)this + 3974) = v17;
  *((_DWORD *)this + 3973) = v17 + v17 * v6;
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    uint64_t v18 = 24;
    uint64_t v19 = this;
    while (1)
    {
      uint64_t v20 = *((unsigned int *)this + 3968);
      if (v20
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v19 + 35, v20, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_35;
        }
        int v27 = 136315650;
        int v28 = "allocWorkBuf_SPS";
        __int16 v29 = 1024;
        int v30 = 2233;
        __int16 v31 = 2080;
        uint32_t v32 = "HdrY";
        int v26 = &_os_log_internal;
        goto LABEL_34;
      }
      uint64_t v21 = *((unsigned int *)this + 3969);
      if (v21)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v19 + 299, v21, 7, 1, 0)) {
          break;
        }
      }
      uint64_t v19 = (CAHDecThymeAvc *)((char *)v19 + 176);
      if (!--v18) {
        goto LABEL_23;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v27 = 136315650;
    int v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2234;
    __int16 v31 = 2080;
    uint32_t v32 = "HdrC";
    int v26 = &_os_log_internal;
    goto LABEL_34;
  }
LABEL_23:
  __int16 v22 = (_OWORD *)((char *)this + 10416);
  uint64_t v23 = 24;
  while (1)
  {
    uint64_t v24 = *((unsigned int *)this + 3973);
    if (v24)
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), v22, v24, 7, 1, 0)) {
        break;
      }
    }
    v22 += 11;
    if (!--v23)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 3978) = 0;
      *((_DWORD *)this + 3979) = v5 | (v6 << 20) | 0xF000F;
      return result;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 136315650;
    int v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2240;
    __int16 v31 = 2080;
    uint32_t v32 = "MvColo";
    int v26 = &_os_log_internal;
LABEL_34:
    _os_log_impl(&dword_223977000, v26, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v27, 0x1Cu);
  }
LABEL_35:
  (*(void (**)(CAHDecThymeAvc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecThymeAvc::allocWorkBuf_PPS(CAHDecThymeAvc *this, unsigned char *a2, void *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = 16 * *((unsigned __int16 *)a2 + 779);
  if (((a2[6] + 9) & 0x1FEu) <= ((a2[7] + 9) & 0x1FEu)) {
    int v6 = (a2[7] + 9) & 0x1FE;
  }
  else {
    int v6 = (a2[6] + 9) & 0x1FE;
  }
  int v7 = a2[4];
  if (v7 == 3) {
    int v8 = 48;
  }
  else {
    int v8 = 32;
  }
  if (v7 == 3) {
    int v9 = 192;
  }
  else {
    int v9 = 128;
  }
  if (a2[4]) {
    int v10 = v8;
  }
  else {
    int v10 = 16;
  }
  if (a2[4]) {
    int v11 = v9;
  }
  else {
    int v11 = 64;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 915, 4 * (((unint64_t)(v5 + 16) >> 2) + ((unint64_t)(v5 + 16) >> 4)), 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_20:
      (*(void (**)(CAHDecThymeAvc *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2359;
    __int16 v21 = 2080;
    __int16 v22 = "AvpAboveInfo";
    unsigned int v12 = &_os_log_internal;
LABEL_19:
    _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v17, 0x1Cu);
    goto LABEL_20;
  }
  unsigned int v14 = v5 + 31;
  uint64_t v15 = ((v6 * v10) >> 3) * (v14 >> 4);
  if (v15 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 926, v15, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2363;
    __int16 v21 = 2080;
    __int16 v22 = "IpAbove";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t v16 = ((v6 * v11) >> 3) * (v14 >> 4);
  if (v16 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 937, v16, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2364;
    __int16 v21 = 2080;
    __int16 v22 = "LfAbovePix";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 948, 36 * (v14 >> 4), 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2365;
    __int16 v21 = 2080;
    __int16 v22 = "LfAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 640, 36 * (v14 >> 4), 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2368;
    __int16 v21 = 2080;
    __int16 v22 = "MvAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  return result;
}

uint64_t CAHDecThymeAvc::freeWorkBuf_SPS(CAHDecThymeAvc *this)
{
  uint64_t v2 = 24;
  int v3 = (uint64_t *)this;
  do
  {
    uint64_t result = *((void *)this + 32);
    if (!*(_DWORD *)(result + 2648))
    {
      if (v3[70])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(result, v3 + 70);
        v3[70] = 0;
      }
      if (v3[598])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 598);
        v3[598] = 0;
      }
    }
    if (v3[1302])
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 1302);
      v3[1302] = 0;
    }
    v3 += 22;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t *CAHDecThymeAvc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[1830])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1830);
    v2[1830] = 0;
  }
  if (v2[1852])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1852);
    v2[1852] = 0;
  }
  if (v2[1280])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1280);
    v2[1280] = 0;
  }
  if (v2[1874])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1874);
    v2[1874] = 0;
  }
  if (v2[1896])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1896);
    v2[1896] = 0;
  }
  if (v2[1918])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1918);
    v2[1918] = 0;
  }
  if (v2[1940])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1940);
    v2[1940] = 0;
  }
  if (v2[1962])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1962);
    v2[1962] = 0;
  }
  return this;
}

uint64_t CAHDecThymeAvc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 9008;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 15888) = a2;
  return this;
}

uint64_t CAHDecThymeAvc::decodeBuffer(CAHDecThymeAvc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecThymeAvc::decodeBufferSize(CAHDecThymeAvc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecThymeAvc::decHdrYLinAddr(CAHDecThymeAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 70);
}

uint64_t CAHDecThymeAvc::decHdrCLinAddr(CAHDecThymeAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 598);
}

uint64_t CAHDecThymeAvc::decHdrYSize(CAHDecThymeAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 151);
}

uint64_t CAHDecThymeAvc::decHdrCSize(CAHDecThymeAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 1207);
}

uint64_t CAHDecThymeAvc::decHdrYStride(CAHDecThymeAvc *this)
{
  return *((unsigned int *)this + 3970);
}

uint64_t CAHDecThymeAvc::decHdrCStride(CAHDecThymeAvc *this)
{
  return *((unsigned int *)this + 3971);
}

CAHDecIxoraAvc *createIxoraAvcDecoder(CAVDAvcDecoder *a1)
{
  uint64_t v2 = (CAHDecIxoraAvc *)operator new(0x36A0uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecIxoraAvc::CAHDecIxoraAvc(v2, a1);
  }
  return v3;
}

void sub_223A12570(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecIxoraAvc::CAHDecIxoraAvc(CAHDecIxoraAvc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D741228;
  *(_DWORD *)(v1 + 456) = 956 * *(unsigned __int16 *)(*(void *)(v1 + 256) + 7500) + 182448;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecIxoraAvc::CAHDecIxoraAvc(CAHDecIxoraAvc *this, CAVDAvcDecoder *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D741228;
  *(void *)(v4 + 256) = a2;
  uint64_t v5 = 956 * *((unsigned __int16 *)a2 + 3750) + 182448;
  *(_DWORD *)(v4 + 456) = v5;
  *(_DWORD *)(v4 + 8) = 2224;
  *(_OWORD *)(v4 + 16) = xmmword_223AD04F0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), v5, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      int v8 = "CAHDecIxoraAvc";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v7, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v6 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v6;
    *((void *)this + 34) = v6;
    *((_OWORD *)this + 863) = 0u;
    *((_OWORD *)this + 864) = 0u;
    *((_OWORD *)this + 865) = 0u;
    *((_OWORD *)this + 866) = 0u;
    *((_OWORD *)this + 867) = 0u;
    *((_OWORD *)this + 868) = 0u;
    *((_OWORD *)this + 869) = 0u;
    *((_OWORD *)this + 870) = 0u;
    *((_OWORD *)this + 871) = 0u;
    *((_OWORD *)this + 872) = 0u;
    *((_OWORD *)this + 873) = 0u;
    bzero((char *)this + 560, 0x3390uLL);
  }
}

void sub_223A12778(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecIxoraAvc::~CAHDecIxoraAvc(CAHDecIxoraAvc *this)
{
  *(void *)this = &unk_26D741228;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecIxoraAvc::~CAHDecIxoraAvc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecIxoraAvc::initPicture(CAHDecIxoraAvc *this, int a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v5 = 956 * *(unsigned __int16 *)(*((void *)this + 32) + 7500) + 182448;
  *((_DWORD *)this + 114) = v5;
  *((_DWORD *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v6;
  if (v6)
  {
    bzero(v6, v5);
    uint64_t v8 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v8 + 16) = a2;
    *(_WORD *)(v8 + 24) = 257;
    *(_WORD *)(v8 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 3447) = 0;
    *((void *)this + 1731) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "initPicture";
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v10, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecIxoraAvc::populateSlices(CAHDecIxoraAvc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2224;
    uint64_t v5 = a2;
    do
    {
      CAHDecIxoraAvc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 956;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecIxoraAvc::populateSliceRegisters(uint64_t a1, uint64_t a2, signed int a3)
{
  char v6 = 0;
  uint64_t v123 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 256);
  int v8 = *(_DWORD *)(v7 + 3616);
  uint64_t v9 = *(void *)(v7 + 3304);
  uint64_t v110 = *(void *)(v7 + 3296);
  int v111 = *(_DWORD *)(v7 + 3612);
  uint64_t v10 = *(void *)(v7 + 3312);
  uint64_t v11 = *(unsigned int *)(v7 + 7064);
  uint64_t v12 = *(void *)(v7 + 3320);
  *(_DWORD *)(a2 + 4) = 0;
  uint64_t v14 = v10 + 1848 * a3;
  int v15 = 32 * (*(unsigned char *)(v14 + 1424) & 3);
  *(_DWORD *)(a2 + 4) = v15;
  int v17 = *(unsigned __int8 *)(v14 + 24);
  uint64_t v16 = (unsigned char *)(v14 + 24);
  if (v17 != 2) {
    char v6 = *(unsigned char *)(v10 + 1848 * a3 + 63);
  }
  unsigned int v18 = v15 & 0xFFFF87FF | ((v6 & 0xF) << 11);
  *(_DWORD *)(a2 + 4) = v18;
  if (*v16 == 1) {
    char v19 = *(unsigned char *)(v10 + 1848 * a3 + 64);
  }
  else {
    char v19 = 0;
  }
  int v20 = ((v19 & 0xF) << 7) | v18;
  *(_DWORD *)(a2 + 4) = v20;
  if (*v16 == 1 && !*(unsigned char *)(v10 + 1848 * a3 + 61)) {
    int v21 = 0x8000;
  }
  else {
    int v21 = 0;
  }
  uint64_t v112 = v9;
  int v113 = v8;
  int v22 = v21 | v20;
  *(_DWORD *)(a2 + 4) = v22;
  if (*v16) {
    int v23 = 0x20000;
  }
  else {
    int v23 = 0x10000;
  }
  if (*v16 == 1) {
    int v24 = 0;
  }
  else {
    int v24 = v23;
  }
  *(_DWORD *)(a2 + 4) = v24 | v22;
  if (*v16 != 1) {
    goto LABEL_20;
  }
  uint64_t v25 = v12 + 13040 * a3 + 7224;
  uint64_t v26 = v10 + 1848 * a3;
  *(void *)(v26 + 1832) = v25;
  if (*(unsigned char *)(v12 + 13040 * a3 + 7227)
    || (uint64_t v27 = *(unsigned int *)(v12 + 13040 * a3 + 7256), *(_DWORD *)(a1 + 4 * v27 + 464)))
  {
    int v28 = 16;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 13788))
    {
      *(void *)(a1 + 13848) = *(void *)(v12 + 13040 * a3 + 7264);
      *(_DWORD *)(a1 + 13840) = v27;
      *(_DWORD *)(a1 + 13788) = 1;
      *(_DWORD *)(a2 + 4) |= 0x40000u;
      uint64_t v25 = *(void *)(v26 + 1832);
      if (!v25 || !*(_DWORD *)(a1 + 13788)) {
        goto LABEL_20;
      }
    }
    uint64_t v107 = *(void *)(v25 + 40);
    if (v107 == *(void *)(a1 + 13848)) {
      goto LABEL_20;
    }
    *(void *)(a1 + 13848) = v107;
    *(_DWORD *)(a1 + 13840) = *(_DWORD *)(v25 + 32);
    int v28 = 0x40000;
  }
  *(_DWORD *)(a2 + 4) |= v28;
LABEL_20:
  uint64_t v116 = v12;
  *(_DWORD *)(a2 + 920) = 0;
  *(_DWORD *)(a2 + 952) = 0;
  uint64_t v115 = v16;
  if (*v16 == 1 && (*(unsigned char *)(a2 + 6) & 4) != 0)
  {
    int v41 = *(_DWORD *)(*(void *)(v10 + 1848 * a3 + 1832) + 32);
    *(_DWORD *)(a1 + 13788) = 1;
    int v42 = *(_DWORD *)(a1 + 13780) * v41;
    int v43 = 956 * a3;
    uint64_t v44 = (void *)(a1 + 13584);
    if (*(void *)(a1 + 13584) || *(_DWORD *)(a1 + 13736) || *(_DWORD *)(a1 + 13740))
    {
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)(a1 + 13584), v43 + 3144, v42, 0xFFFFFFFFLL, 8, -256, 4);
      if (result) {
        return result;
      }
      if (*v44) {
        goto LABEL_41;
      }
    }
    if (*(_DWORD *)(a1 + 13736) || *(_DWORD *)(a1 + 13740))
    {
LABEL_41:
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)(a1 + 13584), v43 + 3176, v42, 0x3FFFFFFFFFFLL, 32, 1023, 4);
      if (result) {
        return result;
      }
    }
  }
  unsigned int v109 = a3;
  uint64_t v114 = a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
  unsigned int v29 = *v115;
  if (v29 <= 1)
  {
    uint64_t v30 = v7 + 6872;
    uint64_t v31 = v116 + 13040 * a3;
    if (*(_DWORD *)(v31 + 13032))
    {
      unint64_t v32 = 0;
      uint64_t v33 = (unsigned int *)(v31 + 13032);
      uint64_t v34 = v116 + 13040 * a3 + 1416;
      int v35 = &_os_log_internal;
      do
      {
        uint64_t v36 = a2 + 4 * v32;
        int v37 = (16 * (v32 & 0xF)) | 0x2DC00000;
        *(_DWORD *)(v36 + 8) = v37;
        unsigned int v38 = (_DWORD *)(v36 + 8);
        if (v11)
        {
          uint64_t v39 = 0;
          while (*(_DWORD *)(*(void *)(v30 + 8 * v39) + 12) != *(_DWORD *)(v34 + 176 * v32 + 12))
          {
            if (v11 == ++v39) {
              goto LABEL_29;
            }
          }
          *unsigned int v38 = v39 & 0xF | v37;
        }
        else
        {
LABEL_29:
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            int v40 = *(_DWORD *)(v34 + 176 * v32 + 32);
            *(_DWORD *)long long buf = 67109632;
            *(_DWORD *)int v121 = v32;
            *(_WORD *)&v121[4] = 1024;
            *(_DWORD *)&v121[6] = v40;
            LOWORD(v122[0]) = 1024;
            *(_DWORD *)((char *)v122 + 2) = v11;
            _os_log_impl(&dword_223977000, v35, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-0 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
          }
        }
        ++v32;
      }
      while (v32 < *v33);
      unsigned int v29 = *v115;
    }
    else
    {
      LODWORD(v32) = 0;
    }
    if (v29 == 1)
    {
      uint64_t v46 = v116 + 13040 * a3;
      if (*(_DWORD *)(v46 + 13036))
      {
        unint64_t v47 = 0;
        signed int v48 = (unsigned int *)(v46 + 13036);
        uint64_t v49 = &_os_log_internal;
        do
        {
          uint64_t v50 = a2 + 4 * v32;
          int v51 = (16 * (v47 & 0xF)) | 0x2DC00100;
          *(_DWORD *)(v50 + 8) = v51;
          int v52 = (_DWORD *)(v50 + 8);
          if (v11)
          {
            uint64_t v53 = 0;
            while (*(_DWORD *)(*(void *)(v30 + 8 * v53) + 12) != *(_DWORD *)(v116 + 13040 * a3 + 176 * v47 + 7236))
            {
              if (v11 == ++v53) {
                goto LABEL_52;
              }
            }
            *int v52 = v53 & 0xF | v51;
          }
          else
          {
LABEL_52:
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            {
              int v54 = *(_DWORD *)(v116 + 13040 * a3 + 176 * v47 + 7256);
              *(_DWORD *)long long buf = 67109632;
              *(_DWORD *)int v121 = v32;
              *(_WORD *)&v121[4] = 1024;
              *(_DWORD *)&v121[6] = v54;
              LOWORD(v122[0]) = 1024;
              *(_DWORD *)((char *)v122 + 2) = v11;
              _os_log_impl(&dword_223977000, v49, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-1 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
            }
          }
          LODWORD(v32) = v32 + 1;
          ++v47;
        }
        while (v47 < *v48);
      }
    }
  }
  *(void *)(a2 + 136) = 0x2DD0000000000000;
  uint64_t v55 = v112 + 604 * v113;
  int v56 = (char *)(v55 + 88);
  uint64_t v57 = (char *)(v55 + 87);
  if (*v115 == 1) {
    int v58 = v56;
  }
  else {
    int v58 = v57;
  }
  char v59 = *v58;
  *(_DWORD *)(a2 + 140) = ((v59 & 3) << 6) | 0x2DD00000;
  int v60 = ((v59 & 3) << 6) | 0x2DD00000 | (8 * (*(unsigned char *)(v10 + 1848 * a3 + 376) & 7));
  *(_DWORD *)(a2 + 140) = v60;
  char v61 = *(unsigned char *)(v110 + 2224 * v111 + 4);
  if (v61) {
    char v61 = *(unsigned char *)(v10 + 1848 * a3 + 377);
  }
  *(_DWORD *)(a2 + 140) = v61 & 7 | v60;
  int v62 = *v115;
  if (v62 != 1) {
    goto LABEL_143;
  }
  int v63 = *v56;
  if (v63 != 2) {
    goto LABEL_65;
  }
  *(_DWORD *)(a2 + 140) = ((v59 & 3) << 6) | 0x2DD0002D;
  int v62 = *v115;
  if (v62 != 1)
  {
LABEL_143:
    if (v62 || !*v57) {
      goto LABEL_85;
    }
    goto LABEL_69;
  }
  int v63 = *v56;
LABEL_65:
  if (v63 != 1) {
    goto LABEL_85;
  }
LABEL_69:
  unsigned int v64 = 0;
  unsigned int v65 = 0;
  do
  {
    uint64_t v66 = v64;
    if (*(unsigned char *)(v10 + 1848 * a3 + v64 + 378))
    {
      int v67 = ((v64 & 0xF) << 9) | 0x2DE04000;
      uint64_t v68 = a2 + 4 * v65;
      *(_DWORD *)(v68 + 144) = v67;
      uint64_t v69 = v10 + 1848 * a3 + 2 * v66;
      *(_DWORD *)(v68 + 144) = v67 | *(_WORD *)(v69 + 394) & 0x1FF;
      *(_DWORD *)(v68 + 528) = 770703360;
      *(_DWORD *)(v68 + 528) = *(unsigned __int16 *)(v69 + 426) | 0x2DF00000;
      ++v65;
    }
    if (*(unsigned char *)(v10 + 1848 * a3 + v66 + 458))
    {
      uint64_t v70 = 0;
      char v71 = 1;
      do
      {
        char v72 = v71;
        int v73 = ((v66 & 0xF) << 9) | (v70 << 14) | 0x2DE08000;
        uint64_t v74 = a2 + 4 * v65;
        *(_DWORD *)(v74 + 144) = v73;
        uint64_t v75 = v10 + 1848 * a3 + 4 * v66 + 2 * v70;
        *(_DWORD *)(v74 + 144) = v73 | *(_WORD *)(v75 + 474) & 0x1FF;
        *(_DWORD *)(v74 + 528) = 770703360;
        *(_DWORD *)(v74 + 528) = *(unsigned __int16 *)(v75 + 538) | 0x2DF00000;
        ++v65;
        uint64_t v70 = 1;
        char v71 = 0;
      }
      while ((v72 & 1) != 0);
    }
    unsigned int v64 = v66 + 1;
  }
  while ((int)v66 + 1 <= *(char *)(v10 + 1848 * a3 + 63));
  if (*v115 == 1)
  {
    unsigned int v76 = 0;
    do
    {
      uint64_t v77 = v76;
      if (*(unsigned char *)(v10 + 1848 * a3 + v76 + 602))
      {
        int v78 = ((v76 & 0xF) << 9) | 0x2DE06000;
        uint64_t v79 = a2 + 4 * v65;
        *(_DWORD *)(v79 + 144) = v78;
        uint64_t v80 = v10 + 1848 * a3 + 2 * v77;
        *(_DWORD *)(v79 + 144) = v78 | *(_WORD *)(v80 + 618) & 0x1FF;
        *(_DWORD *)(v79 + 528) = 770703360;
        *(_DWORD *)(v79 + 528) = *(unsigned __int16 *)(v80 + 650) | 0x2DF00000;
        ++v65;
      }
      if (*(unsigned char *)(v10 + 1848 * a3 + v77 + 682))
      {
        uint64_t v81 = 0;
        char v82 = 1;
        do
        {
          char v83 = v82;
          int v84 = ((v77 & 0xF) << 9) | (v81 << 14) | 0x2DE0A000;
          uint64_t v85 = a2 + 4 * v65;
          *(_DWORD *)(v85 + 144) = v84;
          uint64_t v86 = v10 + 1848 * a3 + 4 * v77 + 2 * v81;
          *(_DWORD *)(v85 + 144) = v84 | *(_WORD *)(v86 + 698) & 0x1FF;
          *(_DWORD *)(v85 + 528) = 770703360;
          *(_DWORD *)(v85 + 528) = *(unsigned __int16 *)(v86 + 762) | 0x2DF00000;
          ++v65;
          uint64_t v81 = 1;
          char v82 = 0;
        }
        while ((v83 & 1) != 0);
      }
      unsigned int v76 = v77 + 1;
    }
    while ((int)v77 + 1 <= *(char *)(v10 + 1848 * a3 + 64));
  }
  *(_DWORD *)(a2 + 136) = v65;
LABEL_85:
  *(_DWORD *)(a2 + 912) = 0;
  uint64_t v87 = v10 + 1848 * a3;
  *(_DWORD *)(a2 + 912) = (((*(unsigned __int8 *)(v112 + 604 * v113 + 89) + *(unsigned __int8 *)(v87 + 1425)) << 10)
                         + 26624) & 0x1FC00 | 0x2D900000;
  *(_DWORD *)(a2 + 916) = 0;
  int v88 = (*(unsigned char *)(v87 + 1428) == 0) << 17;
  *(_DWORD *)(a2 + 916) = v88;
  if (*(unsigned char *)(v87 + 1428) != 1)
  {
    int v89 = v88 | 0x10000;
    *(_DWORD *)(a2 + 916) = v89;
    uint64_t v90 = v10 + 1848 * a3;
    int v91 = v89 | ((*(unsigned char *)(v90 + 1429) & 0xF) << 8);
    *(_DWORD *)(a2 + 916) = v91;
    int v88 = v91 | ((*(unsigned char *)(v90 + 1430) & 0xF) << 12);
  }
  *(_DWORD *)(a2 + 916) = v88 | 0x2DA00000;
  int v92 = (unsigned int *)(v10 + 1848 * a3 + 1436);
  unsigned int v93 = *v92;
  if (*(unsigned char *)(v112 + 604 * v113 + 3))
  {
    int v94 = 0;
    if ((v93 & 7) != 0) {
      *int v92 = (v93 + 7) & 0xFFFFFFF8;
    }
  }
  else
  {
    int v94 = *v92 & 7;
  }
  *(_DWORD *)(a2 + 924) = (v94 << 15) | 0x2D800000;
  uint64_t v95 = *(_DWORD **)(v114 + 256);
  unsigned int v96 = v95[626];
  unint64_t v118 = 0;
  uint64_t v119 = 0;
  if (!CAVDAvcDecoder::GetSDataMemInfo((uint64_t)v95, v109, &v119, &v118)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v117 = v96;
  int v97 = 956 * v109;
  uint64_t v98 = v119;
  if (!*(void *)v119 && !*(_DWORD *)(v119 + 152) && !*(_DWORD *)(v119 + 156)) {
    goto LABEL_101;
  }
  int v99 = v118;
  if (HIDWORD(v118) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)int v121 = "populateSliceRegisters";
    *(_WORD *)&v121[8] = 1024;
    v122[0] = 1770;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v99 = v118;
  }
  uint64_t result = CAHDec::addToPatcherList(v114, (void *)v98, v97 + 3148, v99, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  if (result) {
    return result;
  }
  uint64_t v98 = v119;
  if (!*(void *)v119)
  {
LABEL_101:
    if (!*(_DWORD *)(v98 + 152) && !*(_DWORD *)(v98 + 156))
    {
LABEL_109:
      unsigned int v103 = *(_DWORD *)(v10 + 1848 * a3 + 16) - (*v92 >> 3);
      *(_DWORD *)(a2 + 936) = v103;
      if (v95[590] != 1) {
        return 0;
      }
      *(void *)(a2 + 944) = 0;
      unsigned int v104 = *(unsigned __int16 *)(v10 + 1848 * a3 + 1840);
      if (v95[605])
      {
        uint64_t result = 0;
        if (v103 < v104) {
          unsigned int v104 = v103;
        }
        if (v94) {
          BOOL v105 = v104 == 0;
        }
        else {
          BOOL v105 = 0;
        }
        if (v105) {
          unsigned int v104 = 1;
        }
        unsigned int v106 = v117 & 0x10000 | v104;
      }
      else
      {
        if ((v117 & 0x200000) != 0)
        {
          int v108 = 0;
          if (v94 && !*(_WORD *)(v10 + 1848 * a3 + 1840))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)int v121 = "int CAHDecIxoraAvc::populateSliceRegisters(AvcSliceRegisters *, int)";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect off_to_prot_data to be set when slice header is not byte aligned\n", buf, 0xCu);
              unsigned int v103 = *(_DWORD *)(a2 + 936);
              int v108 = *(_DWORD *)(a2 + 948) & 0x1F0000;
            }
            else
            {
              int v108 = 0;
            }
            unsigned int v104 = 1;
          }
        }
        else
        {
          int v108 = 0;
          if (v94) {
            ++v104;
          }
        }
        uint64_t result = 0;
        if (v104 >= v103) {
          unsigned int v104 = v103;
        }
        unsigned int v106 = v108 & 0xFFDFFFFF | (v104 << 22) | (unsigned __int16)v117 | (((v117 >> 20) & 1) << 21);
      }
      *(_DWORD *)(a2 + 948) = v106;
      return result;
    }
  }
  int v100 = v97 + 3156;
  int v101 = v118;
  if (HIDWORD(v118))
  {
    uint64_t v102 = v114;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)int v121 = "populateSliceRegisters";
      *(_WORD *)&v121[8] = 1024;
      v122[0] = 1771;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      int v101 = v118;
    }
  }
  else
  {
    uint64_t v102 = v114;
  }
  uint64_t result = CAHDec::addToPatcherList(v102, (void *)v98, v100, v101, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result) {
    goto LABEL_109;
  }
  return result;
}

uint64_t CAHDecIxoraAvc::populateCommonRegisters(CAHDecIxoraAvc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000001;
  return 0;
}

uint64_t CAHDecIxoraAvc::updateCommonRegisters(CAHDecIxoraAvc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -889266515;
  return 0;
}

void CAHDecIxoraAvc::copyScalingList(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = *a2 & 0xFEFFFFC0 | 0x1000000;
  *a2 = v8;
  do
  {
    v8 |= (*(unsigned char *)(a4 + v7) == 0) << v7;
    *a2 = v8;
    ++v7;
  }
  while (v7 != 6);
  unsigned int v9 = v8 & 0xFFFFF03F;
  *a2 = v8 & 0xFFFFF03F;
  if (a7 >= 7)
  {
    uint64_t v10 = (a7 - 6);
    uint64_t v11 = (unsigned __int8 *)(a4 + 6);
    uint64_t v12 = &dword_223ADA694;
    do
    {
      int v13 = *v11++;
      BOOL v14 = v13 == 0;
      int v16 = *v12++;
      char v15 = v16;
      int v17 = v14;
      v9 |= ((v17 << v15) & 0x3F) << 6;
      *a2 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 1;
  uint64_t v20 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v22 = *(_DWORD *)(v20 + i) & 0xFFFFFF | (*(unsigned __int8 *)(v19 + i - 1) << 24);
      *(_DWORD *)(v20 + i) = v22;
      unsigned int v23 = v22 & 0xFF00FFFF | (*(unsigned __int8 *)(v19 + i) << 16);
      *(_DWORD *)(v20 + i) = v23;
      unsigned int v24 = v23 & 0xFFFF00FF | (*(unsigned __int8 *)(v19 + i + 1) << 8);
      *(_DWORD *)(v20 + i) = v24;
      *(_DWORD *)(v20 + i) = v24 & 0xFFFFFF00 | *(unsigned __int8 *)(v19 + i + 2);
    }
    ++v18;
    v20 += 16;
    v19 += 16;
  }
  while (v18 != 6);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 96;
  do
  {
    int v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = a6 + ((uint64_t)dword_223ADA6AC[v25] << 6);
    do
    {
      uint64_t v31 = (unsigned __int8 *)(v30 + (v28 & 0x7FFFFFE0 | v29 & 4 | v27 & 0x18));
      int v32 = *(_DWORD *)(v26 + v28) & 0xFFFFFF | (*v31 << 24);
      *(_DWORD *)(v26 + v28) = v32;
      unsigned int v33 = v32 & 0xFF00FFFF | (v31[1] << 16);
      *(_DWORD *)(v26 + v28) = v33;
      unsigned int v34 = v33 & 0xFFFF00FF | (v31[2] << 8);
      *(_DWORD *)(v26 + v28) = v34;
      *(_DWORD *)(v26 + v28) = v34 & 0xFFFFFF00 | v31[3];
      ++v29;
      v28 += 4;
      v27 += 8;
    }
    while (v28 != 64);
    ++v25;
    v26 += 64;
  }
  while (v25 != 6);
}

uint64_t CAHDecIxoraAvc::AvcSeqScalingListFallBack(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v3 = 12;
    }
    uint64_t v4 = a2 + 22;
    uint64_t v5 = (_OWORD *)(a2 + 34);
    while (v2 > 5)
    {
      if (*(unsigned char *)(v4 + v2 - 12))
      {
        if (*(unsigned char *)(v4 + v2) == 2)
        {
          unsigned int v9 = (_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 130);
          if (v2 == 6 || (v2 & 0x7FFFFFFD) == 8)
          {
            _OWORD *v9 = avcDefaultIntraScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADA714;
            long long v10 = xmmword_223ADA724;
            long long v11 = unk_223ADA734;
          }
          else
          {
            _OWORD *v9 = avcDefaultInterScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADA6D4;
            long long v10 = xmmword_223ADA6E4;
            long long v11 = unk_223ADA6F4;
          }
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 162) = v10;
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 178) = v11;
        }
        goto LABEL_24;
      }
      if ((v2 - 8) <= 0xFFFFFFFD)
      {
        uint64_t result = a2 + 130;
        int v13 = (_OWORD *)(a2 + 130 + ((unint64_t)(v2 - 6) << 6));
        BOOL v14 = (long long *)(a2 + 130 + ((unint64_t)(v2 - 8) << 6));
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[3];
        v13[2] = v14[2];
        v13[3] = v17;
        *int v13 = v15;
        v13[1] = v16;
        uint64_t v8 = (v2 - 2);
LABEL_21:
        *(unsigned char *)(v4 + v2) = *(unsigned char *)(a2 + v8 + 22);
      }
LABEL_24:
      ++v2;
      ++v5;
      if (v3 == v2) {
        return result;
      }
    }
    if (*(unsigned char *)(v4 + v2 - 12)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (v6 || v2 == 3) {
      goto LABEL_24;
    }
    uint64_t v8 = (v2 - 1);
    *uint64_t v5 = *(_OWORD *)(a2 + 16 * v8 + 34);
    goto LABEL_21;
  }
  return result;
}

long long *CAHDecIxoraAvc::AvcPicScalingListFallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 96))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = a3 + 97;
    uint64_t v6 = -96;
    uint64_t result = &avcDefaultIntraScalingList8x8;
    do
    {
      if (v3 > 5)
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if (*(unsigned char *)(v5 + v3 + 12) == 2)
          {
            unsigned int v9 = (_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 217);
            if (v3 == 6 || (v3 & 0x7FFFFFFD) == 8)
            {
              _OWORD *v9 = avcDefaultIntraScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADA714;
              long long v10 = xmmword_223ADA724;
              long long v11 = unk_223ADA734;
            }
            else
            {
              _OWORD *v9 = avcDefaultInterScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADA6D4;
              long long v10 = xmmword_223ADA6E4;
              long long v11 = unk_223ADA6F4;
            }
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 249) = v10;
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 265) = v11;
          }
          goto LABEL_31;
        }
        if ((v3 - 8) <= 0xFFFFFFFD)
        {
          uint64_t v12 = (_OWORD *)(a3 + 217 + ((unint64_t)(v3 - 6) << 6));
          int v13 = (long long *)(a3 + 217 + ((unint64_t)(v3 - 8) << 6));
          long long v14 = *v13;
          long long v15 = v13[1];
          long long v16 = v13[3];
          v12[2] = v13[2];
          v12[3] = v16;
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v17 = a3 + (v3 - 2);
          goto LABEL_29;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          uint64_t v18 = (v3 - 6);
          uint64_t v19 = a3 + (v18 << 6);
          uint64_t v20 = a2 + (v18 << 6);
          long long v21 = *(_OWORD *)(v20 + 130);
          long long v22 = *(_OWORD *)(v20 + 146);
          long long v23 = *(_OWORD *)(v20 + 162);
          *(_OWORD *)(v19 + 265) = *(_OWORD *)(v20 + 178);
          *(_OWORD *)(v19 + 249) = v23;
          *(_OWORD *)(v19 + 233) = v22;
          *(_OWORD *)(v19 + 217) = v21;
LABEL_23:
          char v24 = *(unsigned char *)(a2 + 22 + v3);
LABEL_30:
          *(unsigned char *)(v5 + v3 + 12) = v24;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if ((*(unsigned char *)(v5 + v3 + 12) & 2) != 0)
          {
            if (v3 > 2) {
              long long v8 = avcDefaultInterScalingList4x4;
            }
            else {
              long long v8 = avcDefaultIntraScalingList4x4;
            }
            *(_OWORD *)(v5 + v6 + 120) = v8;
          }
          goto LABEL_31;
        }
        if (v3 && v3 != 3)
        {
          uint64_t v25 = (v3 - 1);
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a3 + 16 * v25 + 121);
          uint64_t v17 = a3 + v25;
LABEL_29:
          char v24 = *(unsigned char *)(v17 + 109);
          goto LABEL_30;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a2 + v6 + 130);
          goto LABEL_23;
        }
      }
LABEL_31:
      ++v3;
      v6 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CAHDecIxoraAvc::populateSequenceRegisters(CAHDecIxoraAvc *this)
{
  uint64_t v2 = *((void *)this + 32);
  unint64_t v3 = (_DWORD *)*((void *)this + 33);
  int v4 = *(_DWORD *)(v2 + 3612);
  int v5 = *(_DWORD *)(v2 + 3616);
  uint64_t v6 = *(void *)(v2 + 3296);
  uint64_t v7 = *(void *)(v2 + 3304);
  uint64_t v8 = v6 + 2224 * v4;
  v3[10] = 0;
  __int16 v9 = *(_WORD *)(v8 + 1558);
  v3[10] = (2 * (v9 & 0xFFF)) | 1;
  v3[10] = ((*(_WORD *)(v8 + 1560) & 0xFFF) << 17) | (2 * (v9 & 0xFFF)) | 0x10001;
  v3[11] = 0;
  int v10 = *(unsigned char *)(v8 + 1564) & 1;
  v3[11] = v10;
  int v11 = v10 | ((*(unsigned char *)(v7 + 604 * v5 + 95) != 0) << 7) | 0x2800;
  v3[11] = v11;
  uint64_t v12 = (unsigned char *)(v8 + 4);
  int v13 = *(unsigned __int8 *)(v8 + 4);
  if (*(unsigned char *)(v8 + 4)) {
    int v13 = (*(unsigned char *)(v6 + 2224 * v4 + 7) & 0xF) << 15;
  }
  int v14 = v13 | v11;
  v3[11] = v14;
  long long v15 = (unsigned char *)(v6 + 2224 * v4);
  int v16 = v14 & 0x7F87A881 | ((v15[6] & 0xF) << 19);
  v3[11] = v16;
  unsigned int v17 = v16 & 0xFF7FFFFF | ((v15[5] & 1) << 23);
  v3[11] = v17;
  v3[11] = v17 & 0xFCFFFFFF | ((*v12 & 3) << 24);
  if (v15[9])
  {
    if (*v12 == 3) {
      int v18 = 12;
    }
    else {
      int v18 = 8;
    }
    uint64_t v19 = CAHDecIxoraAvc::AvcSeqScalingListFallBack((uint64_t)this, v8);
    CAHDecIxoraAvc::copyScalingList(v19, v3 + 12, *((void *)this + 33) + 1112, v6 + 2224 * v4 + 22, v6 + 2224 * v4 + 34, v6 + 2224 * v4 + 130, v18);
  }
  return 0;
}

uint64_t CAHDecIxoraAvc::populatePictureRegisters(CAHDecIxoraAvc *this)
{
  uint64_t v319 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 3612);
  int v4 = *(_DWORD *)(v2 + 3616);
  uint64_t v5 = *(void *)(v2 + 3296);
  uint64_t v6 = *(void *)(v2 + 3304);
  uint64_t v296 = *(void *)(v2 + 2088);
  uint64_t v302 = *(unsigned int *)(v2 + 3152);
  int v299 = *(_DWORD *)(v2 + 3132);
  int v300 = *(_DWORD *)(v2 + 2644);
  int v7 = *(unsigned __int8 *)(v2 + 8);
  long long v8 = *(_OWORD *)(v2 + 7016);
  v318[8] = *(_OWORD *)(v2 + 7000);
  v318[9] = v8;
  long long v9 = *(_OWORD *)(v2 + 7048);
  v318[10] = *(_OWORD *)(v2 + 7032);
  v318[11] = v9;
  long long v10 = *(_OWORD *)(v2 + 6952);
  v318[4] = *(_OWORD *)(v2 + 6936);
  v318[5] = v10;
  long long v11 = *(_OWORD *)(v2 + 6984);
  v318[6] = *(_OWORD *)(v2 + 6968);
  v318[7] = v11;
  long long v12 = *(_OWORD *)(v2 + 6888);
  v318[0] = *(_OWORD *)(v2 + 6872);
  v318[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 6920);
  v318[2] = *(_OWORD *)(v2 + 6904);
  v318[3] = v13;
  uint64_t v298 = *(unsigned int *)(v2 + 7064);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  long long v15 = (unsigned __int8 *)*((void *)this + 32);
  uint64_t v16 = *((void *)this + 33);
  int v17 = v15[2675];
  unsigned int v18 = v15[2674];
  if (!(v17 | v18)) {
    goto LABEL_42;
  }
  uint64_t v19 = v5 + 2224 * v3;
  unsigned int v20 = *(unsigned __int8 *)(v19 + 6);
  unsigned int v21 = *(unsigned __int8 *)(v19 + 7);
  if (v20 > v21) {
    LOWORD(v21) = v20;
  }
  int v22 = ((_WORD)v21 + 9) & 0x1FE;
  if (v22 == 8)
  {
    int v24 = v7;
    unsigned int v28 = 1;
    int v26 = 8;
    if (!v15[2675]) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  int v23 = v15[2672];
  int v24 = v7;
  if (v22 != 12)
  {
    if (v22 == 10)
    {
      BOOL v25 = v23 == 0;
      if (v23) {
        int v26 = 10;
      }
      else {
        int v26 = 9;
      }
      int v27 = 2;
      goto LABEL_15;
    }
    int v26 = 27;
    unsigned int v28 = 27;
    if (!v17) {
      goto LABEL_30;
    }
LABEL_23:
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) && (v17 == 2 && v26 == 8 || v17 == 3 && (v26 - 9) <= 1))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = "populatePictureRegisters";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = v26;
      WORD1(buf[2]) = 1024;
      HIDWORD(buf[2]) = v17;
      int v29 = &_os_log_internal;
      uint64_t v30 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
      goto LABEL_38;
    }
    goto LABEL_30;
  }
  BOOL v25 = v23 == 0;
  if (v23) {
    int v26 = 12;
  }
  else {
    int v26 = 11;
  }
  int v27 = 4;
LABEL_15:
  if (v25) {
    unsigned int v28 = v27;
  }
  else {
    unsigned int v28 = v27 + 1;
  }
  if (v17) {
    goto LABEL_23;
  }
LABEL_30:
  int v7 = v24;
  if (v18 && (v18 == 3 && v28 - 9 < 2 || v28 <= 0x1A && ((1 << v28) & 0x4C00000) != 0 && v18 <= 2))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "populatePictureRegisters";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = v28;
    WORD1(buf[2]) = 1024;
    HIDWORD(buf[2]) = v18;
    int v29 = &_os_log_internal;
    uint64_t v30 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
LABEL_38:
    uint64_t v31 = (uint8_t *)buf;
    uint32_t v32 = 24;
    goto LABEL_39;
  }
LABEL_42:
  int v293 = v14;
  int v294 = *((_DWORD *)this + 3445) * v302;
  unsigned int v34 = (char *)this + 264;
  *(_DWORD *)(v16 + 52) = 766509056;
  if (**(_DWORD **)(*((void *)this + 32) + 3312) == 5) {
    int v35 = 766517248;
  }
  else {
    int v35 = 766509056;
  }
  if (v14) {
    int v36 = 688;
  }
  else {
    int v36 = 672;
  }
  if (v300) {
    int v37 = 4160;
  }
  else {
    int v37 = 64;
  }
  unsigned int v38 = v37 & 0xFFFFFFF0 | ((v300 == 1) << 10) | v36 & 0xFFFFFFF0 | (4 * (v17 & 3)) | v18 & 3 | v35;
  *(_DWORD *)(v16 + 52) = v38;
  uint64_t v39 = (unsigned char *)*((void *)this + 32);
  int v40 = v38 | ((v39[2652] & 1) << 19);
  *(_DWORD *)(v16 + 52) = v40;
  unsigned int v41 = v40 & 0xFFFBFFFF | ((v39[2653] & 1) << 18);
  *(_DWORD *)(v16 + 52) = v41;
  *(_DWORD *)(v16 + 52) = v41 & 0xFFFDFFFF | ((v39[2654] & 1) << 17);
  *(void *)(v16 + 56) = 0x1000000;
  uint64_t v42 = v5 + 2224 * v3;
  int v43 = (16 * (*(_WORD *)(v42 + 1558) & 0xFFF)) | 0xF;
  *(_DWORD *)(v16 + 60) = v43;
  LODWORD(v39) = v43 | (*(unsigned __int16 *)(v42 + 1560) << 20) | 0xF0000;
  *(void *)(v16 + 64) = 0;
  *(_DWORD *)(v16 + 60) = v39;
  LODWORD(v42) = (*(unsigned char *)(v42 + 8) & 1) << 18;
  *(_DWORD *)(v16 + 68) = v42;
  uint64_t v44 = (unsigned char *)(v6 + 604 * v4);
  LODWORD(v42) = v42 & 0xFFF7FFFF | ((v44[93] & 1) << 19);
  *(_DWORD *)(v16 + 68) = v42;
  LODWORD(v42) = v42 & 0xFFEFFFFF | ((v44[3] & 1) << 20);
  *(_DWORD *)(v16 + 68) = v42;
  *(_DWORD *)(v16 + 68) = v42 | ((**(_DWORD **)(*((void *)this + 32) + 3312) != 5) << 21);
  unsigned int v45 = *(_DWORD *)(v16 + 72) & 0xFFFFFC1F | (32 * (v44[91] & 0x1F));
  *(_DWORD *)(v16 + 72) = v45;
  *(_DWORD *)(v16 + 72) = v45 & 0xFFFFFFE0 | v44[601] & 0x1F;
  if (v44[96])
  {
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) == 3) {
      int v46 = 12;
    }
    else {
      int v46 = 8;
    }
    uint64_t v47 = *(void *)v34 + 1596;
    signed int v48 = CAHDecIxoraAvc::AvcPicScalingListFallBack(v14, v5 + 2224 * v3, v6 + 604 * v4);
    CAHDecIxoraAvc::copyScalingList((uint64_t)v48, (unsigned int *)(v16 + 76), v47, v6 + 604 * v4 + 109, v6 + 604 * v4 + 121, v6 + 604 * v4 + 217, v46);
  }
  uint64_t v49 = 0;
  *(_DWORD *)(v16 + 80) = *((_DWORD *)this + 3450);
  *(_DWORD *)(v16 + 84) = *((_DWORD *)this + 3451);
  *(_DWORD *)(v16 + 88) = 3145786;
  uint64_t v50 = (char *)this + 9008;
  do
  {
    *(_DWORD *)(*(void *)v34 + v49 + 92) = 0;
    uint64_t v51 = *(void *)v34 + v49;
    int v52 = *(_DWORD *)(v51 + 92);
    *(_DWORD *)(v51 + 92) = 0;
    *(_DWORD *)(*(void *)v34 + v49 + 92) ^= 0xFFFFFF00;
    uint64_t v53 = *(void *)v34 + v49;
    int v54 = *(_DWORD *)(v53 + 92);
    *(_DWORD *)(v53 + 92) = v52;
    if (*(void *)v50 || *((_DWORD *)v50 + 38) || *((_DWORD *)v50 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v50, (int)v49 + 92, 0, 0xFFFFFFFFLL, 8, v54, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v49 + 152) = 0;
    *(_DWORD *)(*((void *)this + 33) + v49 + 152) = *(_DWORD *)(*((void *)this + 33) + v49 + 152) & 0x800001FF | (((*((_DWORD *)this + 3444) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v49 + 616) = 0;
    uint64_t v55 = *((void *)this + 33) + v49;
    int v56 = *(_DWORD *)(v55 + 616);
    *(_DWORD *)(v55 + 616) = 0;
    *(_DWORD *)(*((void *)this + 33) + v49 + 616) ^= 0x3FFu;
    uint64_t v57 = *((void *)this + 33) + v49;
    int v58 = *(_DWORD *)(v57 + 616);
    *(_DWORD *)(v57 + 616) = v56;
    if (*(void *)v50 || *((_DWORD *)v50 + 38) || *((_DWORD *)v50 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v50, (int)v49 + 616, 0, 0x3FFFFFFFFFFLL, 32, v58, 4);
      if (result) {
        return result;
      }
    }
    v49 += 4;
    v50 += 176;
  }
  while (v49 != 60);
  *(_DWORD *)(*(void *)v34 + 212) = 0;
  *(_DWORD *)(*(void *)v34 + 676) = 0;
  if ((*(unsigned char *)(v16 + 54) & 8) == 0) {
    goto LABEL_75;
  }
  uint64_t v59 = *((void *)this + 33);
  uint64_t v60 = *(void *)(*((void *)this + 32) + 2680);
  long long v315 = 0u;
  long long v316 = 0u;
  long long v313 = 0u;
  long long v314 = 0u;
  long long v311 = 0u;
  long long v312 = 0u;
  long long v309 = 0u;
  long long v310 = 0u;
  long long v308 = 0u;
  memset(buf, 0, sizeof(buf));
  int v61 = (*(_DWORD *)(v59 + 16) & 0xF) << 9;
  buf[0] = v60;
  int v62 = *(_DWORD *)(v59 + 212);
  *(_DWORD *)(v59 + 212) = 0;
  *(_DWORD *)(*((void *)this + 33) + 212) ^= 0xFFFFFF00;
  uint64_t v63 = *((void *)this + 33);
  int v64 = *(_DWORD *)(v63 + 212);
  *(_DWORD *)(v63 + 212) = v62;
  if (v60)
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 212, v61, 0xFFFFFFFFLL, 8, v64, 4);
    if (result) {
      return result;
    }
    uint64_t v65 = buf[0];
    int v66 = DWORD2(v315);
    LODWORD(v60) = HIDWORD(v315);
  }
  else
  {
    int v66 = 0;
    uint64_t v65 = 0;
  }
  if ((int v67 = *(_DWORD *)(*(void *)v34 + 676),
        *(_DWORD *)(*(void *)v34 + 676) = 0,
        *(_DWORD *)(*(void *)v34 + 676) ^= 0x3FFu,
        int v68 = *(_DWORD *)(*(void *)v34 + 676),
        *(_DWORD *)(*(void *)v34 + 676) = v67,
        !v65)
    && !v66
    && !v60
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 676, v61, 0x3FFFFFFFFFFLL, 32, v68, 4), !result))
  {
LABEL_75:
    uint64_t v69 = 0;
    uint64_t v70 = (char *)this + 11824;
    do
    {
      *(_DWORD *)(*(void *)v34 + v69 + 216) = 0;
      uint64_t v71 = *(void *)v34 + v69;
      int v72 = *(_DWORD *)(v71 + 216);
      *(_DWORD *)(v71 + 216) = 0;
      *(_DWORD *)(*(void *)v34 + v69 + 216) ^= 0xFFFFFF00;
      uint64_t v73 = *(void *)v34 + v69;
      int v74 = *(_DWORD *)(v73 + 216);
      *(_DWORD *)(v73 + 216) = v72;
      if (*(void *)v70 || *((_DWORD *)v70 + 38) || *((_DWORD *)v70 + 39))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v70, (int)v69 + 216, 0, 0xFFFFFFFFLL, 8, v74, 4);
        if (result) {
          return result;
        }
      }
      *(_DWORD *)(*(void *)v34 + v69 + 680) = 0;
      uint64_t v75 = *(void *)v34 + v69;
      int v76 = *(_DWORD *)(v75 + 680);
      *(_DWORD *)(v75 + 680) = 0;
      *(_DWORD *)(*(void *)v34 + v69 + 680) ^= 0x3FFu;
      uint64_t v77 = *(void *)v34 + v69;
      int v78 = *(_DWORD *)(v77 + 680);
      *(_DWORD *)(v77 + 680) = v76;
      if (*(void *)v70 || *((_DWORD *)v70 + 38) || *((_DWORD *)v70 + 39))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v70, (int)v69 + 680, 0, 0x3FFFFFFFFFFLL, 32, v78, 4);
        if (result) {
          return result;
        }
      }
      v69 += 4;
      v70 += 176;
    }
    while (v69 != 16);
    int v79 = v7;
    *(_DWORD *)(*((void *)this + 33) + 232) = 0;
    uint64_t v80 = *((void *)this + 33);
    int v81 = *(_DWORD *)(v80 + 232);
    *(_DWORD *)(v80 + 232) = 0;
    *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFF00;
    uint64_t v82 = *((void *)this + 33);
    int v83 = *(_DWORD *)(v82 + 232);
    *(_DWORD *)(v82 + 232) = v81;
    if (*((void *)this + 1566) || *((_DWORD *)this + 3170) || *((_DWORD *)this + 3171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1566, 232, 0, 0xFFFFFFFFLL, 8, v83, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 696) = 0;
    int v84 = *(_DWORD *)(*(void *)v34 + 696);
    *(_DWORD *)(*(void *)v34 + 696) = 0;
    *(_DWORD *)(*(void *)v34 + 696) ^= 0x3FFu;
    int v85 = *(_DWORD *)(*(void *)v34 + 696);
    *(_DWORD *)(*(void *)v34 + 696) = v84;
    if (*((void *)this + 1566) || *((_DWORD *)this + 3170) || *((_DWORD *)this + 3171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1566, 696, 0, 0x3FFFFFFFFFFLL, 32, v85, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 236) = 0;
    uint64_t v86 = *((void *)this + 33);
    int v87 = *(_DWORD *)(v86 + 236);
    *(_DWORD *)(v86 + 236) = 0;
    *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFF00;
    uint64_t v88 = *((void *)this + 33);
    int v89 = *(_DWORD *)(v88 + 236);
    *(_DWORD *)(v88 + 236) = v87;
    if (*((void *)this + 1588) || *((_DWORD *)this + 3214) || *((_DWORD *)this + 3215))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1588, 236, 0, 0xFFFFFFFFLL, 8, v89, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 700) = 0;
    int v90 = *(_DWORD *)(*(void *)v34 + 700);
    *(_DWORD *)(*(void *)v34 + 700) = 0;
    *(_DWORD *)(*(void *)v34 + 700) ^= 0x3FFu;
    int v91 = *(_DWORD *)(*(void *)v34 + 700);
    *(_DWORD *)(*(void *)v34 + 700) = v90;
    if (*((void *)this + 1588) || *((_DWORD *)this + 3214) || *((_DWORD *)this + 3215))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1588, 700, 0, 0x3FFFFFFFFFFLL, 32, v91, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 240) = 0;
    uint64_t v92 = *((void *)this + 33);
    int v93 = *(_DWORD *)(v92 + 240);
    *(_DWORD *)(v92 + 240) = 0;
    *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFF00;
    uint64_t v94 = *((void *)this + 33);
    int v95 = *(_DWORD *)(v94 + 240);
    *(_DWORD *)(v94 + 240) = v93;
    if (*((void *)this + 1610) || *((_DWORD *)this + 3258) || *((_DWORD *)this + 3259))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1610, 240, 0, 0xFFFFFFFFLL, 8, v95, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 704) = 0;
    int v96 = *(_DWORD *)(*(void *)v34 + 704);
    *(_DWORD *)(*(void *)v34 + 704) = 0;
    *(_DWORD *)(*(void *)v34 + 704) ^= 0x3FFu;
    int v97 = *(_DWORD *)(*(void *)v34 + 704);
    *(_DWORD *)(*(void *)v34 + 704) = v96;
    if (*((void *)this + 1610) || *((_DWORD *)this + 3258) || *((_DWORD *)this + 3259))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1610, 704, 0, 0x3FFFFFFFFFFLL, 32, v97, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 244) = 0;
    uint64_t v98 = *((void *)this + 33);
    int v99 = *(_DWORD *)(v98 + 244);
    *(_DWORD *)(v98 + 244) = 0;
    *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFF00;
    uint64_t v100 = *((void *)this + 33);
    int v101 = *(_DWORD *)(v100 + 244);
    *(_DWORD *)(v100 + 244) = v99;
    if (*((void *)this + 1632) || *((_DWORD *)this + 3302) || *((_DWORD *)this + 3303))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1632, 244, 0, 0xFFFFFFFFLL, 8, v101, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 708) = 0;
    int v102 = *(_DWORD *)(*(void *)v34 + 708);
    *(_DWORD *)(*(void *)v34 + 708) = 0;
    *(_DWORD *)(*(void *)v34 + 708) ^= 0x3FFu;
    int v103 = *(_DWORD *)(*(void *)v34 + 708);
    *(_DWORD *)(*(void *)v34 + 708) = v102;
    if (*((void *)this + 1632) || *((_DWORD *)this + 3302) || *((_DWORD *)this + 3303))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1632, 708, 0, 0x3FFFFFFFFFFLL, 32, v103, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 248) = 0;
    uint64_t v104 = *((void *)this + 33);
    int v105 = *(_DWORD *)(v104 + 248);
    *(_DWORD *)(v104 + 248) = 0;
    *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFF00;
    uint64_t v106 = *((void *)this + 33);
    int v107 = *(_DWORD *)(v106 + 248);
    *(_DWORD *)(v106 + 248) = v105;
    if (*((void *)this + 1654) || *((_DWORD *)this + 3346) || *((_DWORD *)this + 3347))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1654, 248, 0, 0xFFFFFFFFLL, 8, v107, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 712) = 0;
    int v108 = *(_DWORD *)(*(void *)v34 + 712);
    *(_DWORD *)(*(void *)v34 + 712) = 0;
    *(_DWORD *)(*(void *)v34 + 712) ^= 0x3FFu;
    int v109 = *(_DWORD *)(*(void *)v34 + 712);
    *(_DWORD *)(*(void *)v34 + 712) = v108;
    if (*((void *)this + 1654) || *((_DWORD *)this + 3346) || *((_DWORD *)this + 3347))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1654, 712, 0, 0x3FFFFFFFFFFLL, 32, v109, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 252) = 0;
    *(_DWORD *)(*((void *)this + 33) + 716) = 0;
    *(_DWORD *)(*((void *)this + 33) + 256) = 0;
    uint64_t v110 = *((void *)this + 33);
    int v111 = *(_DWORD *)(v110 + 256);
    *(_DWORD *)(v110 + 256) = 0;
    *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFF00;
    uint64_t v112 = *((void *)this + 33);
    int v113 = *(_DWORD *)(v112 + 256);
    *(_DWORD *)(v112 + 256) = v111;
    if (*((void *)this + 1456) || *((_DWORD *)this + 2950) || *((_DWORD *)this + 2951))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 256, 0, 0xFFFFFFFFLL, 8, v113, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 720) = 0;
    int v114 = *(_DWORD *)(*(void *)v34 + 720);
    *(_DWORD *)(*(void *)v34 + 720) = 0;
    *(_DWORD *)(*(void *)v34 + 720) ^= 0x3FFu;
    int v115 = *(_DWORD *)(*(void *)v34 + 720);
    *(_DWORD *)(*(void *)v34 + 720) = v114;
    if (*((void *)this + 1456) || *((_DWORD *)this + 2950) || *((_DWORD *)this + 2951))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 720, 0, 0x3FFFFFFFFFFLL, 32, v115, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 260) = 0;
    uint64_t v116 = *((void *)this + 33);
    int v117 = *(_DWORD *)(v116 + 260);
    *(_DWORD *)(v116 + 260) = 0;
    *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFF00;
    uint64_t v118 = *((void *)this + 33);
    int v119 = *(_DWORD *)(v118 + 260);
    *(_DWORD *)(v118 + 260) = v117;
    if (*((void *)this + 1698) || *((_DWORD *)this + 3434) || *((_DWORD *)this + 3435))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1698, 260, v294, 0xFFFFFFFFLL, 8, v119, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 724) = 0;
    int v120 = *(_DWORD *)(*(void *)v34 + 724);
    *(_DWORD *)(*(void *)v34 + 724) = 0;
    *(_DWORD *)(*(void *)v34 + 724) ^= 0x3FFu;
    int v121 = *(_DWORD *)(*(void *)v34 + 724);
    *(_DWORD *)(*(void *)v34 + 724) = v120;
    if (*((void *)this + 1698) || *((_DWORD *)this + 3434) || *((_DWORD *)this + 3435))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1698, 724, v294, 0x3FFFFFFFFFFLL, 32, v121, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 264) = 0;
    uint64_t v122 = *((void *)this + 33);
    int v123 = *(_DWORD *)(v122 + 264);
    *(_DWORD *)(v122 + 264) = 0;
    *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFF80;
    uint64_t v124 = *((void *)this + 33);
    int v125 = *(_DWORD *)(v124 + 264);
    *(_DWORD *)(v124 + 264) = v123;
    int v126 = (void *)((char *)this + 176 * v302 + 560);
    if (*v126 || *((_DWORD *)this + 44 * v302 + 178) || *((_DWORD *)this + 44 * v302 + 179))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v302 + 70, 264, 0, 0xFFFFFFFFLL, 7, v125, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 728) = 0;
    int v127 = *(_DWORD *)(*(void *)v34 + 728);
    *(_DWORD *)(*(void *)v34 + 728) = 0;
    *(_DWORD *)(*(void *)v34 + 728) ^= 0x3FFu;
    int v128 = *(_DWORD *)(*(void *)v34 + 728);
    *(_DWORD *)(*(void *)v34 + 728) = v127;
    if (*v126 || *((_DWORD *)this + 44 * v302 + 178) || *((_DWORD *)this + 44 * v302 + 179))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v126, 728, 0, 0x3FFFFFFFFFFLL, 32, v128, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 268) = 0;
    int v129 = *(_DWORD *)(*(void *)v34 + 268);
    *(_DWORD *)(*(void *)v34 + 268) = 0;
    *(_DWORD *)(*(void *)v34 + 268) ^= 0xFFFFFF80;
    int v130 = *(_DWORD *)(*(void *)v34 + 268);
    *(_DWORD *)(*(void *)v34 + 268) = v129;
    int v131 = (void *)(v296 + 8);
    if (*(void *)(v296 + 8) || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v296 + 8), 268, *(_DWORD *)(v296 + 60), 0xFFFFFFFFLL, 7, v130, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 732) = 0;
    int v132 = *(_DWORD *)(*(void *)v34 + 732);
    *(_DWORD *)(*(void *)v34 + 732) = 0;
    *(_DWORD *)(*(void *)v34 + 732) ^= 0x3FFu;
    int v133 = *(_DWORD *)(*(void *)v34 + 732);
    *(_DWORD *)(*(void *)v34 + 732) = v132;
    if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 732, *(_DWORD *)(v296 + 60), 0x3FFFFFFFFFFLL, 32, v133, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 272) = 0;
    uint64_t v134 = *((void *)this + 33);
    int v135 = *(_DWORD *)(v134 + 272);
    *(_DWORD *)(v134 + 272) = 0;
    *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFF80;
    uint64_t v136 = *((void *)this + 33);
    int v137 = *(_DWORD *)(v136 + 272);
    *(_DWORD *)(v136 + 272) = v135;
    int v138 = (void *)((char *)this + 176 * v302 + 4784);
    if (*v138
      || *((_DWORD *)this + 44 * v302 + 1234)
      || *((_DWORD *)this + 44 * v302 + 1235))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v302 + 598, 272, 0, 0xFFFFFFFFLL, 7, v137, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 736) = 0;
    int v139 = *(_DWORD *)(*(void *)v34 + 736);
    *(_DWORD *)(*(void *)v34 + 736) = 0;
    *(_DWORD *)(*(void *)v34 + 736) ^= 0x3FFu;
    int v140 = *(_DWORD *)(*(void *)v34 + 736);
    *(_DWORD *)(*(void *)v34 + 736) = v139;
    if (*v138
      || *((_DWORD *)this + 44 * v302 + 1234)
      || *((_DWORD *)this + 44 * v302 + 1235))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v138, 736, 0, 0x3FFFFFFFFFFLL, 32, v140, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 276) = 0;
    int v141 = *(_DWORD *)(*(void *)v34 + 276);
    *(_DWORD *)(*(void *)v34 + 276) = 0;
    *(_DWORD *)(*(void *)v34 + 276) ^= 0xFFFFFF80;
    int v142 = *(_DWORD *)(*(void *)v34 + 276);
    *(_DWORD *)(*(void *)v34 + 276) = v141;
    if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 276, *(_DWORD *)(v296 + 64), 0xFFFFFFFFLL, 7, v142, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 740) = 0;
    int v143 = *(_DWORD *)(*(void *)v34 + 740);
    *(_DWORD *)(*(void *)v34 + 740) = 0;
    *(_DWORD *)(*(void *)v34 + 740) ^= 0x3FFu;
    int v144 = *(_DWORD *)(*(void *)v34 + 740);
    *(_DWORD *)(*(void *)v34 + 740) = v143;
    if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 740, *(_DWORD *)(v296 + 64), 0x3FFFFFFFFFFLL, 32, v144, 4);
      if (result) {
        return result;
      }
    }
    if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
    {
      int v145 = *(_DWORD *)(*(void *)v34 + 268);
      *(_DWORD *)(*(void *)v34 + 268) = 0;
      *(_DWORD *)(*(void *)v34 + 268) ^= 0xFFFFFF80;
      int v146 = *(_DWORD *)(*(void *)v34 + 268);
      *(_DWORD *)(*(void *)v34 + 268) = v145;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 268, *(_DWORD *)(v296 + 60), 0xFFFFFFFFLL, 7, v146, 4);
        if (result) {
          return result;
        }
      }
      int v147 = *(_DWORD *)(*(void *)v34 + 732);
      *(_DWORD *)(*(void *)v34 + 732) = 0;
      *(_DWORD *)(*(void *)v34 + 732) ^= 0x3FFu;
      int v148 = *(_DWORD *)(*(void *)v34 + 732);
      *(_DWORD *)(*(void *)v34 + 732) = v147;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 732, *(_DWORD *)(v296 + 60), 0x3FFFFFFFFFFLL, 32, v148, 4);
        if (result) {
          return result;
        }
      }
      int v149 = *(_DWORD *)(*(void *)v34 + 276);
      *(_DWORD *)(*(void *)v34 + 276) = 0;
      *(_DWORD *)(*(void *)v34 + 276) ^= 0xFFFFFF80;
      int v150 = *(_DWORD *)(*(void *)v34 + 276);
      *(_DWORD *)(*(void *)v34 + 276) = v149;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 276, *(_DWORD *)(v296 + 64), 0xFFFFFFFFLL, 7, v150, 4);
        if (result) {
          return result;
        }
      }
      int v151 = *(_DWORD *)(*(void *)v34 + 740);
      *(_DWORD *)(*(void *)v34 + 740) = 0;
      *(_DWORD *)(*(void *)v34 + 740) ^= 0x3FFu;
      int v152 = *(_DWORD *)(*(void *)v34 + 740);
      *(_DWORD *)(*(void *)v34 + 740) = v151;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 740, *(_DWORD *)(v296 + 64), 0x3FFFFFFFFFFLL, 32, v152, 4);
        if (result) {
          return result;
        }
      }
      int v153 = *(_DWORD *)(*(void *)v34 + 264);
      *(_DWORD *)(*(void *)v34 + 264) = 0;
      *(_DWORD *)(*(void *)v34 + 264) ^= 0xFFFFFF80;
      int v154 = *(_DWORD *)(*(void *)v34 + 264);
      *(_DWORD *)(*(void *)v34 + 264) = v153;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 264, *(_DWORD *)(v296 + 72), 0xFFFFFFFFLL, 7, v154, 4);
        if (result) {
          return result;
        }
      }
      int v155 = *(_DWORD *)(*(void *)v34 + 728);
      *(_DWORD *)(*(void *)v34 + 728) = 0;
      *(_DWORD *)(*(void *)v34 + 728) ^= 0x3FFu;
      int v156 = *(_DWORD *)(*(void *)v34 + 728);
      *(_DWORD *)(*(void *)v34 + 728) = v155;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 728, *(_DWORD *)(v296 + 72), 0x3FFFFFFFFFFLL, 32, v156, 4);
        if (result) {
          return result;
        }
      }
      int v157 = *(_DWORD *)(*(void *)v34 + 272);
      *(_DWORD *)(*(void *)v34 + 272) = 0;
      *(_DWORD *)(*(void *)v34 + 272) ^= 0xFFFFFF80;
      int v158 = *(_DWORD *)(*(void *)v34 + 272);
      *(_DWORD *)(*(void *)v34 + 272) = v157;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 272, *(_DWORD *)(v296 + 76), 0xFFFFFFFFLL, 7, v158, 4);
        if (result) {
          return result;
        }
      }
      int v159 = *(_DWORD *)(*(void *)v34 + 736);
      *(_DWORD *)(*(void *)v34 + 736) = 0;
      *(_DWORD *)(*(void *)v34 + 736) ^= 0x3FFu;
      int v160 = *(_DWORD *)(*(void *)v34 + 736);
      *(_DWORD *)(*(void *)v34 + 736) = v159;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 736, *(_DWORD *)(v296 + 76), 0x3FFFFFFFFFFLL, 32, v160, 4);
        if (result) {
          return result;
        }
      }
    }
    if (*(_DWORD *)(v16 + 52) & 0x2000 | v298)
    {
      *((_DWORD *)this + v302 + 116) = 0;
      *(_DWORD *)(*((void *)this + 33) + 280) = 0;
      if (v298)
      {
        uint64_t v161 = 0;
        if (v293) {
          int v162 = 0x2000000;
        }
        else {
          int v162 = 0;
        }
        int v289 = v162;
        do
        {
          uint64_t v163 = *((void *)v318 + v161);
          uint64_t v164 = *(unsigned int *)(v163 + 32);
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) = *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) & 0xFFFFFFF | ((v298 << 28) - 0x10000000);
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) &= 0xF3FFFFFF;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) = *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) & 0xFDFFFFFF | v289;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) |= 0x1000000u;
          int v165 = v299 - *(_DWORD *)(v163 + 12);
          int v166 = v165 & 0x1FFFF;
          if (v165 < -32768) {
            int v166 = 98304;
          }
          if (v165 < 0x8000) {
            int v167 = v166;
          }
          else {
            int v167 = 0x7FFF;
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) = *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) & 0xFFFE0000 | v167;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) = *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) & 0xFFFDFFFF | (*(unsigned __int8 *)(v163 + 1) << 17);
          if (*(_DWORD *)(v163 + 28) == 1)
          {
            long long v316 = 0u;
            long long v317 = 0u;
            long long v314 = 0u;
            long long v315 = 0u;
            long long v312 = 0u;
            long long v313 = 0u;
            long long v310 = 0u;
            long long v311 = 0u;
            long long v308 = 0u;
            long long v309 = 0u;
            memset(buf, 0, sizeof(buf));
            int DPB = AVC_RLM::getDPB(*(void *)(*((void *)this + 32) + 3104), buf);
            if (DPB < 1)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              int v305 = 136315138;
              int v306 = "populatePictureRegisters";
              int v29 = &_os_log_internal;
              uint64_t v30 = "AppleAVD: ERROR: %s: No ref pics found!\n";
            }
            else
            {
              uint64_t v169 = DPB;
              while (v169-- >= 1)
              {
                uint64_t v163 = buf[v169];
                if (!*(_DWORD *)(v163 + 28))
                {
                  uint64_t v164 = *(unsigned int *)(v163 + 32);
                  goto LABEL_224;
                }
              }
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              int v305 = 136315138;
              int v306 = "populatePictureRegisters";
              int v29 = &_os_log_internal;
              uint64_t v30 = "AppleAVD: ERROR: %s: No non-existing ref frames found!\n";
            }
            uint64_t v31 = (uint8_t *)&v305;
            uint32_t v32 = 12;
            goto LABEL_39;
          }
LABEL_224:
          if (v293)
          {
            buf[0] = 0;
            if (!CAVDAvcDecoder::decodeGetRenderTargetRef(*((void *)this + 32), v164, *(_DWORD *)(v163 + 56), *(_DWORD *)(v163 + 64), buf))
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v305) = 0;
                int v29 = &_os_log_internal;
                uint64_t v30 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
                uint64_t v31 = (uint8_t *)&v305;
                uint32_t v32 = 2;
LABEL_39:
                _os_log_impl(&dword_223977000, v29, OS_LOG_TYPE_DEFAULT, v30, v31, v32);
              }
              return 0xFFFFFFFFLL;
            }
            *(void *)(v163 + 40) = buf[0] + 8;
          }
          *(_DWORD *)(*((void *)this + 33) + 4 * v161 + 344) = 0;
          int v303 = 4 * v161;
          int v295 = 4 * v161 + 344;
          uint64_t v171 = *((void *)this + 33) + 4 * v161;
          int v172 = *(_DWORD *)(v171 + 344);
          *(_DWORD *)(v171 + 344) = 0;
          *(_DWORD *)(*((void *)this + 33) + 4 * v161 + 344) ^= 0xFFFFFF80;
          uint64_t v173 = *((void *)this + 33) + 4 * v161;
          int v174 = *(_DWORD *)(v173 + 344);
          *(_DWORD *)(v173 + 344) = v172;
          unsigned int v297 = v164;
          uint64_t v175 = (void *)((char *)this + 176 * v164 + 560);
          if (*v175
            || *((_DWORD *)this + 44 * v164 + 178)
            || *((_DWORD *)this + 44 * v164 + 179))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v164 + 70, v295, 0, 0xFFFFFFFFLL, 7, v174, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 744) = 0;
          int v292 = v303 + 744;
          uint64_t v176 = *(void *)v34 + 4 * v161;
          int v177 = *(_DWORD *)(v176 + 744);
          *(_DWORD *)(v176 + 744) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 744) ^= 0x3FFu;
          uint64_t v178 = *(void *)v34 + 4 * v161;
          int v179 = *(_DWORD *)(v178 + 744);
          *(_DWORD *)(v178 + 744) = v177;
          if (*v175
            || *((_DWORD *)this + 44 * v164 + 178)
            || *((_DWORD *)this + 44 * v164 + 179))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v164 + 70, v292, 0, 0x3FFFFFFFFFFLL, 32, v179, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 408) = 0;
          int v291 = v303 + 408;
          uint64_t v180 = *(void *)v34 + 4 * v161;
          int v181 = *(_DWORD *)(v180 + 408);
          *(_DWORD *)(v180 + 408) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 408) ^= 0xFFFFFF80;
          uint64_t v182 = *(void *)v34 + 4 * v161;
          int v183 = *(_DWORD *)(v182 + 408);
          *(_DWORD *)(v182 + 408) = v181;
          uint64_t v184 = *(void *)(v163 + 40);
          if (*(void *)v184 || *(_DWORD *)(v184 + 152) || *(_DWORD *)(v184 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v184, v291, *(_DWORD *)(v184 + 52), 0xFFFFFFFFLL, 7, v183, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 808) = 0;
          int v290 = v303 + 808;
          uint64_t v185 = *(void *)v34 + 4 * v161;
          int v186 = *(_DWORD *)(v185 + 808);
          *(_DWORD *)(v185 + 808) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 808) ^= 0x3FFu;
          uint64_t v187 = *(void *)v34 + 4 * v161;
          int v188 = *(_DWORD *)(v187 + 808);
          *(_DWORD *)(v187 + 808) = v186;
          uint64_t v189 = *(void *)(v163 + 40);
          if (*(void *)v189 || *(_DWORD *)(v189 + 152) || *(_DWORD *)(v189 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v189, v290, *(_DWORD *)(v189 + 52), 0x3FFFFFFFFFFLL, 32, v188, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*((void *)this + 33) + 4 * v161 + 472) = 0;
          int v288 = v303 + 472;
          uint64_t v190 = *((void *)this + 33) + 4 * v161;
          int v191 = *(_DWORD *)(v190 + 472);
          *(_DWORD *)(v190 + 472) = 0;
          *(_DWORD *)(*((void *)this + 33) + 4 * v161 + 472) ^= 0xFFFFFF80;
          uint64_t v192 = *((void *)this + 33) + 4 * v161;
          int v193 = *(_DWORD *)(v192 + 472);
          *(_DWORD *)(v192 + 472) = v191;
          uint64_t v194 = (void *)((char *)this + 176 * v164 + 4784);
          if (*v194 || *((_DWORD *)this + 44 * v297 + 1234) || *((_DWORD *)this + 44 * v297 + 1235))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v297 + 598, v288, 0, 0xFFFFFFFFLL, 7, v193, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 872) = 0;
          int v287 = v303 + 872;
          uint64_t v195 = *(void *)v34 + 4 * v161;
          int v196 = *(_DWORD *)(v195 + 872);
          *(_DWORD *)(v195 + 872) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 872) ^= 0x3FFu;
          uint64_t v197 = *(void *)v34 + 4 * v161;
          int v198 = *(_DWORD *)(v197 + 872);
          *(_DWORD *)(v197 + 872) = v196;
          if (*v194 || *((_DWORD *)this + 44 * v297 + 1234) || *((_DWORD *)this + 44 * v297 + 1235))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v194, v287, 0, 0x3FFFFFFFFFFLL, 32, v198, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 536) = 0;
          int v199 = v303 + 536;
          uint64_t v200 = *(void *)v34 + 4 * v161;
          int v201 = *(_DWORD *)(v200 + 536);
          *(_DWORD *)(v200 + 536) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 536) ^= 0xFFFFFF80;
          uint64_t v202 = *(void *)v34 + 4 * v161;
          int v203 = *(_DWORD *)(v202 + 536);
          *(_DWORD *)(v202 + 536) = v201;
          uint64_t v204 = *(void *)(v163 + 40);
          if (*(void *)v204 || *(_DWORD *)(v204 + 152) || *(_DWORD *)(v204 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v204, v199, *(_DWORD *)(v204 + 56), 0xFFFFFFFFLL, 7, v203, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 936) = 0;
          int v205 = v303 + 936;
          uint64_t v206 = *(void *)v34 + 4 * v161;
          int v207 = *(_DWORD *)(v206 + 936);
          *(_DWORD *)(v206 + 936) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 936) ^= 0x3FFu;
          uint64_t v208 = *(void *)v34 + 4 * v161;
          int v209 = *(_DWORD *)(v208 + 936);
          *(_DWORD *)(v208 + 936) = v207;
          uint64_t v210 = *(void *)(v163 + 40);
          if (*(void *)v210 || *(_DWORD *)(v210 + 152) || *(_DWORD *)(v210 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v210, v205, *(_DWORD *)(v210 + 56), 0x3FFFFFFFFFFLL, 32, v209, 4);
            if (result) {
              return result;
            }
          }
          if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
          {
            uint64_t v211 = *(void *)v34 + 4 * v161;
            int v212 = *(_DWORD *)(v211 + 408);
            *(_DWORD *)(v211 + 408) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 408) ^= 0xFFFFFF80;
            uint64_t v213 = *(void *)v34 + 4 * v161;
            int v214 = *(_DWORD *)(v213 + 408);
            *(_DWORD *)(v213 + 408) = v212;
            uint64_t v215 = *(void *)(v163 + 40);
            if (*(void *)v215 || *(_DWORD *)(v215 + 152) || *(_DWORD *)(v215 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v215, v291, *(_DWORD *)(v215 + 52), 0xFFFFFFFFLL, 7, v214, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v216 = *(void *)v34 + 4 * v161;
            int v217 = *(_DWORD *)(v216 + 808);
            *(_DWORD *)(v216 + 808) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 808) ^= 0x3FFu;
            uint64_t v218 = *(void *)v34 + 4 * v161;
            int v219 = *(_DWORD *)(v218 + 808);
            *(_DWORD *)(v218 + 808) = v217;
            uint64_t v220 = *(void *)(v163 + 40);
            if (*(void *)v220 || *(_DWORD *)(v220 + 152) || *(_DWORD *)(v220 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v220, v290, *(_DWORD *)(v220 + 52), 0x3FFFFFFFFFFLL, 32, v219, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v221 = *(void *)v34 + 4 * v161;
            int v222 = *(_DWORD *)(v221 + 536);
            *(_DWORD *)(v221 + 536) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 536) ^= 0xFFFFFF80;
            uint64_t v223 = *(void *)v34 + 4 * v161;
            int v224 = *(_DWORD *)(v223 + 536);
            *(_DWORD *)(v223 + 536) = v222;
            uint64_t v225 = *(void *)(v163 + 40);
            if (*(void *)v225 || *(_DWORD *)(v225 + 152) || *(_DWORD *)(v225 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v225, v199, *(_DWORD *)(v225 + 56), 0xFFFFFFFFLL, 7, v224, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v226 = *(void *)v34 + 4 * v161;
            int v227 = *(_DWORD *)(v226 + 936);
            *(_DWORD *)(v226 + 936) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 936) ^= 0x3FFu;
            uint64_t v228 = *(void *)v34 + 4 * v161;
            int v229 = *(_DWORD *)(v228 + 936);
            *(_DWORD *)(v228 + 936) = v227;
            uint64_t v230 = *(void *)(v163 + 40);
            if (*(void *)v230 || *(_DWORD *)(v230 + 152) || *(_DWORD *)(v230 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v230, v205, *(_DWORD *)(v230 + 56), 0x3FFFFFFFFFFLL, 32, v229, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v231 = *(void *)v34 + 4 * v161;
            int v232 = *(_DWORD *)(v231 + 344);
            *(_DWORD *)(v231 + 344) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 344) ^= 0xFFFFFF80;
            uint64_t v233 = *(void *)v34 + 4 * v161;
            int v234 = *(_DWORD *)(v233 + 344);
            *(_DWORD *)(v233 + 344) = v232;
            uint64_t v235 = *(void *)(v163 + 40);
            if (*(void *)v235 || *(_DWORD *)(v235 + 152) || *(_DWORD *)(v235 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v235, v295, *(_DWORD *)(v235 + 64), 0xFFFFFFFFLL, 7, v234, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v236 = *(void *)v34 + 4 * v161;
            int v237 = *(_DWORD *)(v236 + 744);
            *(_DWORD *)(v236 + 744) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 744) ^= 0x3FFu;
            uint64_t v238 = *(void *)v34 + 4 * v161;
            int v239 = *(_DWORD *)(v238 + 744);
            *(_DWORD *)(v238 + 744) = v237;
            uint64_t v240 = *(void *)(v163 + 40);
            if (*(void *)v240 || *(_DWORD *)(v240 + 152) || *(_DWORD *)(v240 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v240, v292, *(_DWORD *)(v240 + 64), 0x3FFFFFFFFFFLL, 32, v239, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v241 = *(void *)v34 + 4 * v161;
            int v242 = *(_DWORD *)(v241 + 472);
            *(_DWORD *)(v241 + 472) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 472) ^= 0xFFFFFF80;
            uint64_t v243 = *(void *)v34 + 4 * v161;
            int v244 = *(_DWORD *)(v243 + 472);
            *(_DWORD *)(v243 + 472) = v242;
            uint64_t v245 = *(void *)(v163 + 40);
            if (*(void *)v245 || *(_DWORD *)(v245 + 152) || *(_DWORD *)(v245 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v245, v288, *(_DWORD *)(v245 + 68), 0xFFFFFFFFLL, 7, v244, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v246 = *(void *)v34 + 4 * v161;
            int v247 = *(_DWORD *)(v246 + 872);
            *(_DWORD *)(v246 + 872) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 872) ^= 0x3FFu;
            uint64_t v248 = *(void *)v34 + 4 * v161;
            int v249 = *(_DWORD *)(v248 + 872);
            *(_DWORD *)(v248 + 872) = v247;
            uint64_t v250 = *(void *)(v163 + 40);
            if (*(void *)v250 || *(_DWORD *)(v250 + 152) || *(_DWORD *)(v250 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v250, v287, *(_DWORD *)(v250 + 68), 0x3FFFFFFFFFFLL, 32, v249, 4);
              if (result) {
                return result;
              }
            }
          }
          ++v161;
        }
        while (v161 != v298);
      }
    }
    else
    {
      *(_DWORD *)(v16 + 52) |= 0x2000u;
      *((_DWORD *)this + v302 + 116) = 1;
      *(_DWORD *)(*((void *)this + 33) + 280) = 0;
    }
    *(_DWORD *)(*(void *)v34 + 600) = 0;
    *(_DWORD *)(*(void *)v34 + 1000) = 0;
    *(_DWORD *)(*(void *)v34 + 604) = 0;
    *(_DWORD *)(*(void *)v34 + 1004) = 0;
    *(_DWORD *)(*(void *)v34 + 608) = 0;
    *(_DWORD *)(*(void *)v34 + 612) = 0;
    if (v300)
    {
      uint64_t v251 = *((void *)this + 32);
      unsigned int v252 = *(unsigned __int8 *)(v251 + 3004);
      if (*(unsigned char *)(v251 + 3004))
      {
        unsigned int v252 = *(_DWORD *)(v251 + 3016);
        unsigned int v301 = *(_DWORD *)(v251 + 3020);
      }
      else
      {
        unsigned int v301 = 0;
      }
      uint64_t v253 = *(void *)(v251 + 3656);
      uint64_t v304 = *(unsigned int *)(v253 + 56);
      unint64_t v254 = *(unsigned int *)(v253 + 52) + (unint64_t)v252;
      uint64_t v255 = *((void *)this + 33);
      int v256 = *(_DWORD *)(v255 + 600);
      *(_DWORD *)(v255 + 600) = 0;
      *(_DWORD *)(*((void *)this + 33) + 600) ^= 0xFFFFFFC0;
      uint64_t v257 = *((void *)this + 33);
      int v258 = *(_DWORD *)(v257 + 600);
      *(_DWORD *)(v257 + 600) = v256;
      uint64_t v259 = *(void *)(*((void *)this + 32) + 3656);
      unint64_t v260 = HIDWORD(v254);
      if (*(void *)v259 || *(_DWORD *)(v259 + 152) || *(_DWORD *)(v259 + 156))
      {
        if (v260 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 1295;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v259, 600, v254, 0xFFFFFFFFLL, 6, v258, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v261 = *((void *)this + 33);
      int v262 = *(_DWORD *)(v261 + 1000);
      *(_DWORD *)(v261 + 1000) = 0;
      *(_DWORD *)(*((void *)this + 33) + 1000) ^= 0x3FFu;
      uint64_t v263 = *((void *)this + 33);
      int v264 = *(_DWORD *)(v263 + 1000);
      *(_DWORD *)(v263 + 1000) = v262;
      uint64_t v265 = *(void *)(*((void *)this + 32) + 3656);
      if (*(void *)v265 || *(_DWORD *)(v265 + 152) || *(_DWORD *)(v265 + 156))
      {
        if (v260 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 1297;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v265, 1000, v254, 0x3FFFFFFFFFFLL, 32, v264, 4);
        if (result) {
          return result;
        }
      }
      unint64_t v266 = v304 + v301;
      uint64_t v267 = *((void *)this + 33);
      int v268 = *(_DWORD *)(v267 + 604);
      *(_DWORD *)(v267 + 604) = 0;
      *(_DWORD *)(*((void *)this + 33) + 604) ^= 0xFFFFFFC0;
      uint64_t v269 = *((void *)this + 33);
      int v270 = *(_DWORD *)(v269 + 604);
      *(_DWORD *)(v269 + 604) = v268;
      uint64_t v271 = *(void *)(*((void *)this + 32) + 3656);
      unint64_t v272 = HIDWORD(v266);
      if (*(void *)v271 || *(_DWORD *)(v271 + 152) || *(_DWORD *)(v271 + 156))
      {
        if (v272 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 1300;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v271, 604, v266, 0xFFFFFFFFLL, 6, v270, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v273 = *((void *)this + 33);
      int v274 = *(_DWORD *)(v273 + 1004);
      *(_DWORD *)(v273 + 1004) = 0;
      *(_DWORD *)(*((void *)this + 33) + 1004) ^= 0x3FFu;
      uint64_t v275 = *((void *)this + 33);
      int v276 = *(_DWORD *)(v275 + 1004);
      *(_DWORD *)(v275 + 1004) = v274;
      uint64_t v277 = *(void *)(*((void *)this + 32) + 3656);
      if (*(void *)v277 || *(_DWORD *)(v277 + 152) || *(_DWORD *)(v277 + 156))
      {
        if (v272 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 1302;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v277, 1004, v266, 0x3FFFFFFFFFFLL, 32, v276, 4);
        if (result) {
          return result;
        }
      }
      if (v79)
      {
        *(_DWORD *)(*((void *)this + 33) + 608) = *(_DWORD *)(*((void *)this + 33) + 608) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 76) >> 6) & 0xFFF) << 6);
        uint64_t v278 = (_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 80);
      }
      else
      {
        if (CAHDecIxoraAvc::getSWRStride(this, *(unsigned __int16 *)(v16 + 84) - *(unsigned __int16 *)(v16 + 80) + 1, *(unsigned __int8 *)(v5 + 2224 * v3 + 6), *(unsigned __int8 *)(v5 + 2224 * v3 + 7), *(_DWORD *)(v5 + 2224 * v3 + 2212)))return 0xFFFFFFFFLL; {
        *(_DWORD *)(*((void *)this + 33) + 608) = *(_DWORD *)(*((void *)this + 33) + 608) & 0xFFFC003F | (((*((_DWORD *)this + 3448) >> 6) & 0xFFF) << 6);
        }
        uint64_t v278 = (_DWORD *)((char *)this + 13796);
      }
      *(_DWORD *)(*(void *)v34 + 612) = *(_DWORD *)(*(void *)v34 + 612) & 0xFFF8003F | (((*v278 >> 6) & 0x1FFF) << 6);
    }
    uint64_t v279 = *((void *)this + 32);
    if (*(_DWORD *)(v279 + 2360) != 1) {
      return 0;
    }
    uint64_t v280 = *(void *)v34;
    *(_DWORD *)(*(void *)v34 + 1104) = *(_DWORD *)(*(void *)v34 + 1104) & 0xFFFFFFFE | *(_DWORD *)(v279 + 2508) & 1;
    if (*(_DWORD *)(v279 + 2508))
    {
      *(_DWORD *)(v280 + 2080) = 0x10000000;
      *(_DWORD *)(v280 + 2084) = *(_DWORD *)(v279 + 2368);
      *(_DWORD *)(v280 + 2096) = 0;
      *(void *)(v280 + 2088) = 0;
      *(_OWORD *)(v280 + 2100) = *(_OWORD *)(v279 + 2372);
      long long v281 = *(_OWORD *)(v279 + 2404);
      *(_OWORD *)(v280 + 2116) = *(_OWORD *)(v279 + 2388);
      *(_OWORD *)(v280 + 2132) = v281;
    }
    *(_DWORD *)(*(void *)v34 + 1104) = *(_DWORD *)(*(void *)v34 + 1104) & 0xFFFFFFFD | (2
                                                                                              * (*(_DWORD *)(v279 + 2512) & 1));
    if (*(_DWORD *)(v279 + 2512))
    {
      *(_DWORD *)(v280 + 2148) = 0;
      char v282 = *(_DWORD *)(v279 + 2424);
      *(_DWORD *)(v280 + 2148) = (*(_DWORD *)(v279 + 2424) & 1) << 22;
      int v283 = ((*(_DWORD *)(v279 + 2420) & 1) << 23) | ((v282 & 1) << 22) | 0x20000000;
      *(_DWORD *)(v280 + 2148) = v283;
      *(_DWORD *)(v280 + 2148) = v283 | (*(_DWORD *)(v279 + 2364) == 0);
      long long v284 = *(_OWORD *)(v279 + 2428);
      long long v285 = *(_OWORD *)(v279 + 2444);
      *(_OWORD *)(v280 + 2184) = *(_OWORD *)(v279 + 2460);
      *(_OWORD *)(v280 + 2168) = v285;
      *(_OWORD *)(v280 + 2152) = v284;
    }
    *(_DWORD *)(*(void *)v34 + 1104) = *(_DWORD *)(*(void *)v34 + 1104) & 0xFFFFFFFB | (4
                                                                                              * (*(_DWORD *)(v279 + 2516) & 1));
    *(_DWORD *)(*(void *)v34 + 1104) = *(_DWORD *)(*(void *)v34 + 1104) & 0xFFFFFFF7 | (8
                                                                                              * (*(_DWORD *)(v279 + 2520) & 1));
    *(_DWORD *)(*(void *)v34 + 1104) = *(_DWORD *)(*(void *)v34 + 1104) & 0xFFFFFFEF | (16
                                                                                              * (*(_DWORD *)(v279 + 2524) & 1));
    if (*(_DWORD *)(v279 + 2516))
    {
      *(_DWORD *)(v280 + 2204) = 0;
      if (*(_DWORD *)(v279 + 2476) == 2) {
        int v286 = 805306368;
      }
      else {
        int v286 = 813694976;
      }
      *(_DWORD *)(v280 + 2204) = v286;
      memcpy((void *)(v280 + 2208), (const void *)(v279 + 2480), 4 * *(unsigned int *)(v279 + 2476));
      uint64_t result = 0;
      *(_DWORD *)(v279 + 2516) = 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecIxoraAvc::getSWRStride(CAHDecIxoraAvc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1724) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 3448) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 3448) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 3448) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 3448) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3449) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecIxoraAvc::getTileStartCTU(CAHDecIxoraAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 1008);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecIxoraAvc::getTileEndCTU(CAHDecIxoraAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 1008);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecIxoraAvc::getTileIdxAbove(CAHDecIxoraAvc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 1008);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecIxoraAvc::populateAvdWork(CAHDecIxoraAvc *this, unsigned int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v3 + 3312);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 7500);
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    long long v9 = (int *)(v2 + 3160);
    long long v10 = (int *)(v4 + 20);
    __int16 v22 = a2;
    uint64_t v11 = 44 * a2;
    uint64_t v12 = v2 + 956 * v5;
    while (1)
    {
      uint64_t v13 = v12 + v7;
      *(_WORD *)(v13 + 2228) = v8;
      *(_WORD *)(v13 + 2230) = 0;
      *(_WORD *)(v13 + 2232) = v8;
      *(_DWORD *)(v12 + v7 + 2234) = 0;
      int v14 = *v9;
      if (!CAVDAvcDecoder::GetSDataMemInfo(*((void *)this + 32), v8, &v24, &v23)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *v10;
      *(_DWORD *)(v13 + 2256) = *v10;
      *(_DWORD *)(v13 + 2260) = v15;
      *(_DWORD *)(v13 + 2264) = 0;
      if (v7) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = 15;
      }
      *(_WORD *)(v13 + 2238) = v16;
      uint64_t v17 = v24;
      if (*(void *)v24 || *(_DWORD *)(v24 + 152) || *(_DWORD *)(v24 + 156))
      {
        int v18 = v23;
        if (HIDWORD(v23) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          int v26 = "populateAvdWork";
          __int16 v27 = 1024;
          int v28 = 1948;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          int v18 = v23;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 575846, v18, 0x3FFFFFFFFFFLL, 32, -1, 2);
        if (result) {
          return result;
        }
        uint64_t v17 = v24;
        if (*(void *)v24) {
          goto LABEL_17;
        }
      }
      if (*(_DWORD *)(v17 + 152) || *(_DWORD *)(v17 + 156))
      {
LABEL_17:
        int v20 = v23;
        if (HIDWORD(v23))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            int v26 = "populateAvdWork";
            __int16 v27 = 1024;
            int v28 = 1949;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v20 = v23;
          }
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 575848, v20, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
      v9 += 239;
      *(_DWORD *)(v12 + v7 + 2252) = v14;
      ++v8;
      v7 += 44;
      v10 += 462;
      if (v11 == v7)
      {
        uint64_t v2 = *((void *)this + 33);
        __int16 v21 = v22;
        goto LABEL_24;
      }
    }
  }
  else
  {
    __int16 v21 = 0;
LABEL_24:
    uint64_t result = 0;
    *(_WORD *)(v2 + 28) = v21;
    *(_DWORD *)(v2 + 32) = 575824;
  }
  return result;
}

uint64_t CAHDecIxoraAvc::allocWorkBuf_SPS(CAHDecIxoraAvc *this, unsigned char *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v3 = a2[4];
  unsigned int v4 = *((unsigned __int16 *)a2 + 779);
  int v5 = 16 * v4;
  unsigned int v6 = *((unsigned __int16 *)a2 + 780);
  unsigned int v7 = 32 - __clz(((16 * v4 + 47) >> 5) - 1);
  if (v4 < 2) {
    LOBYTE(v7) = 0;
  }
  unsigned int v8 = 32 - __clz(((16 * v6 + 47) >> 5) - 1);
  if (v6 < 2) {
    LOBYTE(v8) = 0;
  }
  unsigned int v9 = ((32 << (v8 + v7)) + 127) & 0xFFFFFF80;
  if (a2[4])
  {
    unsigned int v10 = (v5 + 16) << (v3 == 3);
    unsigned int v11 = ((((16 * v6 + 16) | (v3 == 1)) >> (v3 == 1)) + 15) >> 4;
    if (v10 > 0x20)
    {
      unsigned int v12 = 32 - __clz(((v10 + 31) >> 5) - 1);
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  LOBYTE(v12) = 0;
LABEL_10:
  unsigned int v13 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  unsigned int v15 = ((8 << (v14 + v12)) + 127) & 0xFFFFFF80;
  if (a2[4]) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = 0;
  }
  *((_DWORD *)this + 3440) = v9;
  *((_DWORD *)this + 3441) = v16;
  *((void *)this + 1721) = 0;
  int v17 = (v4 << 6) + 64;
  *((_DWORD *)this + 3446) = v17;
  unsigned int v18 = v17 + v17 * v6;
  *((_DWORD *)this + 3445) = v18;
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    uint64_t v19 = 24;
    int v20 = this;
    while (1)
    {
      uint64_t v21 = *((unsigned int *)this + 3440);
      if (v21
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 35, v21, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_34;
        }
        int v27 = 136315650;
        int v28 = "allocWorkBuf_SPS";
        __int16 v29 = 1024;
        int v30 = 2190;
        __int16 v31 = 2080;
        uint32_t v32 = "HdrY";
        BOOL v25 = &_os_log_internal;
        goto LABEL_33;
      }
      uint64_t v22 = *((unsigned int *)this + 3441);
      if (v22)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 299, v22, 7, 1, 0)) {
          break;
        }
      }
      int v20 = (CAHDecIxoraAvc *)((char *)v20 + 176);
      if (!--v19)
      {
        unsigned int v18 = *((_DWORD *)this + 3445);
        goto LABEL_24;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    int v27 = 136315650;
    int v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2191;
    __int16 v31 = 2080;
    uint32_t v32 = "HdrC";
    BOOL v25 = &_os_log_internal;
    goto LABEL_33;
  }
LABEL_24:
  int v23 = (*MEMORY[0x263EF8AD0] + v18) & ~*MEMORY[0x263EF8AD0];
  *((_DWORD *)this + 3445) = v23;
  uint64_t v24 = (24 * v23);
  if (!v24
    || !CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 849, v24, 7, 1, 32))
  {
    uint64_t result = 0;
    *((_DWORD *)this + 3450) = 0;
    *((_DWORD *)this + 3451) = v5 | (v6 << 20) | 0xF000F;
    return result;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 136315650;
    int v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2209;
    __int16 v31 = 2080;
    uint32_t v32 = "MvColo";
    BOOL v25 = &_os_log_internal;
LABEL_33:
    _os_log_impl(&dword_223977000, v25, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v27, 0x1Cu);
  }
LABEL_34:
  (*(void (**)(CAHDecIxoraAvc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecIxoraAvc::allocWorkBuf_PPS(CAHDecIxoraAvc *this, unsigned char *a2, void *a3, void *a4)
{
  uint64_t v5 = 0;
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v6 = a2[4];
  uint64_t v7 = 16 * *((unsigned __int16 *)a2 + 779);
  unsigned int v8 = (a2[6] + 9) & 0x1FE;
  if (v8 <= ((a2[7] + 9) & 0x1FEu)) {
    unsigned int v8 = (a2[7] + 9) & 0x1FE;
  }
  if (v6 == 3) {
    int v9 = 48;
  }
  else {
    int v9 = 32;
  }
  if (v6 == 3) {
    int v10 = 192;
  }
  else {
    int v10 = 128;
  }
  unint64_t v11 = v7 + 16;
  BOOL v12 = v6 == 0;
  if (a2[4]) {
    int v13 = v9;
  }
  else {
    int v13 = 16;
  }
  unsigned int v14 = (v7 + 31) >> 4;
  uint64_t v15 = ((v8 * v13) >> 3) * v14;
  if (v12) {
    int v16 = 64;
  }
  else {
    int v16 = v10;
  }
  uint64_t v17 = 32 * v14;
  uint64_t v18 = ((v8 * v16) >> 3) * v14;
  uint64_t v19 = 4 * ((v11 >> 2) + (v11 >> 4));
  int v20 = (char *)this + 11824;
  do
  {
    if (CAVDDecoder::allocAVDMem(*((void *)this + 32), &v20[v5], v19, 7, 1, 0))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_25;
      }
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 2357;
      __int16 v27 = 2080;
      int v28 = "AvpAboveInfo";
      uint64_t v21 = &_os_log_internal;
LABEL_24:
      _os_log_impl(&dword_223977000, v21, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
      goto LABEL_25;
    }
    v5 += 176;
  }
  while (v5 != 704);
  if (v15 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 783, v15, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 2361;
      __int16 v27 = 2080;
      int v28 = "IpAbove";
      uint64_t v21 = &_os_log_internal;
      goto LABEL_24;
    }
LABEL_25:
    (*(void (**)(CAHDecIxoraAvc *, void))(*(void *)this + 152))(this, 0);
    return 0xFFFFFFFFLL;
  }
  if (v18 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 794, v18, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 2362;
    __int16 v27 = 2080;
    int v28 = "LfAbovePix";
    uint64_t v21 = &_os_log_internal;
    goto LABEL_24;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 805, v17, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 2363;
    __int16 v27 = 2080;
    int v28 = "LfAboveInfo";
    uint64_t v21 = &_os_log_internal;
    goto LABEL_24;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 728, v17, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 2366;
    __int16 v27 = 2080;
    int v28 = "MvAboveInfo";
    uint64_t v21 = &_os_log_internal;
    goto LABEL_24;
  }
  return result;
}

uint64_t CAHDecIxoraAvc::freeWorkBuf_SPS(CAHDecIxoraAvc *this)
{
  uint64_t v2 = 24;
  int v3 = this;
  do
  {
    uint64_t result = *((void *)this + 32);
    if (!*(_DWORD *)(result + 2648))
    {
      if (*((void *)v3 + 70))
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(result, (uint64_t *)v3 + 70);
        *((void *)v3 + 70) = 0;
      }
      if (*((void *)v3 + 598))
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)v3 + 598);
        *((void *)v3 + 598) = 0;
      }
    }
    int v3 = (CAHDecIxoraAvc *)((char *)v3 + 176);
    --v2;
  }
  while (v2);
  if (*((void *)this + 1698))
  {
    uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 1698);
    *((void *)this + 1698) = 0;
  }
  return result;
}

uint64_t *CAHDecIxoraAvc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = 0;
  unsigned int v4 = this + 1478;
  do
  {
    if (v4[v3])
    {
      this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], &v4[v3]);
      v4[v3] = 0;
    }
    v3 += 22;
  }
  while (v3 != 88);
  if (v2[1566])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1566);
    v2[1566] = 0;
  }
  if (v2[1456])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1456);
    v2[1456] = 0;
  }
  if (v2[1588])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1588);
    v2[1588] = 0;
  }
  if (v2[1610])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1610);
    v2[1610] = 0;
  }
  if (v2[1632])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1632);
    v2[1632] = 0;
  }
  if (v2[1654])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1654);
    v2[1654] = 0;
  }
  if (v2[1676])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1676);
    v2[1676] = 0;
  }
  return this;
}

uint64_t CAHDecIxoraAvc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 9008;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 13776) = a2;
  return this;
}

uint64_t CAHDecIxoraAvc::decodeBuffer(CAHDecIxoraAvc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecIxoraAvc::decodeBufferSize(CAHDecIxoraAvc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecIxoraAvc::decHdrYLinAddr(CAHDecIxoraAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 70);
}

uint64_t CAHDecIxoraAvc::decHdrCLinAddr(CAHDecIxoraAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 598);
}

uint64_t CAHDecIxoraAvc::decHdrYSize(CAHDecIxoraAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 151);
}

uint64_t CAHDecIxoraAvc::decHdrCSize(CAHDecIxoraAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 1207);
}

uint64_t CAHDecIxoraAvc::decHdrYStride(CAHDecIxoraAvc *this)
{
  return *((unsigned int *)this + 3442);
}

uint64_t CAHDecIxoraAvc::decHdrCStride(CAHDecIxoraAvc *this)
{
  return *((unsigned int *)this + 3443);
}

CAHDecIxoraHevc *createIxoraHevcDecoder(CAVDHevcDecoder *a1)
{
  uint64_t v2 = (CAHDecIxoraHevc *)operator new(0x33B8uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecIxoraHevc::CAHDecIxoraHevc(v2, a1);
  }
  return v3;
}

void sub_223A1728C(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecIxoraHevc::CAHDecIxoraHevc(CAHDecIxoraHevc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D741378;
  *(_DWORD *)(v1 + 456) = 420428;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = 0;
  *(void *)(v1 + 272) = 0;
}

void CAHDecIxoraHevc::CAHDecIxoraHevc(CAHDecIxoraHevc *this, CAVDHevcDecoder *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D741378;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 420428;
  *(_DWORD *)(v4 + 8) = 3020;
  *(_OWORD *)(v4 + 16) = xmmword_223AD0620;
  *(_DWORD *)(v4 + 32) = 4;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 420428, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      uint64_t v7 = "CAHDecIxoraHevc";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v6, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v5 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v5;
    *((void *)this + 34) = v5;
    bzero((char *)this + 528, 0x3180uLL);
  }
}

void sub_223A1744C(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecIxoraHevc::~CAHDecIxoraHevc(CAHDecIxoraHevc *this)
{
  *(void *)this = &unk_26D741378;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecIxoraHevc::~CAHDecIxoraHevc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecIxoraHevc::initPicture(CAHDecIxoraHevc *this, int a2, __int16 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 114) = 420428;
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v4;
  if (v4)
  {
    bzero(v4, 0x66A4CuLL);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v7 + 16) = a2;
    *(_WORD *)(v7 + 24) = 257;
    *(_WORD *)(v7 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 3307) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "initPicture";
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v9, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecIxoraHevc::populateSlices(CAHDecIxoraHevc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 3020;
    uint64_t v5 = a2;
    do
    {
      CAHDecIxoraHevc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 368;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecIxoraHevc::populateSliceRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 256);
  int v6 = *(_DWORD *)(v5 + 8320);
  int v7 = *(_DWORD *)(v5 + 8324);
  uint64_t v8 = *(void *)(v5 + 8288);
  uint64_t v9 = *(void *)(v5 + 8280);
  uint64_t v10 = *(void *)(v5 + 8296);
  int v11 = a3;
  uint64_t v12 = v9 + 23176 * v6;
  *(_DWORD *)(a1 + 460) = 6 * *(_DWORD *)(v12 + 3636);
  LODWORD(v12) = *(_DWORD *)(v12 + 22880);
  *(_DWORD *)(a2 + 352) = 0x1000000;
  uint64_t v13 = v10 + 2360 * (int)a3;
  unsigned int v14 = (((*(_DWORD *)(v13 + 36) / v12) & 0xFFF) << 12) | 0x1000000;
  *(_DWORD *)(a2 + 352) = v14;
  *(_DWORD *)(a2 + 352) = v14 & 0xFFFFF000 | (*(_DWORD *)(v13 + 36) % v12) & 0xFFF;
  *(_DWORD *)(a2 + 4) = 0;
  char v15 = *(unsigned char *)(v8 + 9856 * v7 + 6477);
  if (v15) {
    char v15 = *(unsigned char *)(v10 + 2360 * (int)a3 + 1880);
  }
  int v16 = v15 & 1;
  *(_DWORD *)(a2 + 4) = v16;
  uint64_t v17 = v10 + 2360 * (int)a3;
  int v19 = *(_DWORD *)(v17 + 44);
  uint64_t v18 = (int *)(v17 + 44);
  if (v19 == 2) {
    LOBYTE(v20) = 0;
  }
  else {
    int v20 = 5 - *(_DWORD *)(v10 + 2360 * (int)a3 + 1864);
  }
  unsigned int v21 = v16 & 0xFFFFFFF1 | (2 * (v20 & 7));
  *(_DWORD *)(a2 + 4) = v21;
  if (*v18)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *(unsigned __int8 *)(v10 + 2360 * (int)a3 + 616);
    if (*(unsigned char *)(v10 + 2360 * (int)a3 + 616)) {
      int v22 = *(unsigned char *)(v10 + 2360 * (int)a3 + 762) == 0;
    }
  }
  int v23 = v21 | (16 * v22);
  *(_DWORD *)(a2 + 4) = v23;
  if (*v18 == 2)
  {
    char v24 = 0;
  }
  else
  {
    char v24 = *(unsigned char *)(v8 + 9856 * v7 + 17);
    if (v24) {
      char v24 = *(unsigned char *)(v10 + 2360 * (int)a3 + 761);
    }
  }
  unsigned int v25 = v23 & 0xFFFFFFDF | (32 * (v24 & 1));
  *(_DWORD *)(a2 + 4) = v25;
  if (*v18) {
    int v26 = 0;
  }
  else {
    int v26 = *(unsigned char *)(v10 + 2360 * (int)a3 + 760) == 0;
  }
  char v27 = 0;
  int v28 = v25 | (v26 << 6);
  *(_DWORD *)(a2 + 4) = v28;
  uint64_t v29 = v10 + 2360 * (int)a3;
  int v30 = (*(_DWORD *)(v29 + 624) & 0xF) << 7;
  if (*(_DWORD *)(v29 + 624) == -1) {
    int v30 = 0;
  }
  int v31 = v30 | v28;
  *(_DWORD *)(a2 + 4) = v31;
  int v32 = (*(_DWORD *)(v29 + 620) & 0xF) << 11;
  if (*(_DWORD *)(v29 + 620) == -1) {
    int v32 = 0;
  }
  int v33 = v31 | v32;
  *(_DWORD *)(a2 + 4) = v33;
  if (*v18 != 2)
  {
    char v27 = *(unsigned char *)(v9 + 23176 * v6 + 22284);
    if (v27) {
      char v27 = *(unsigned char *)(v10 + 2360 * (int)a3 + 616);
    }
  }
  uint64_t v133 = v9;
  int v134 = v6;
  unsigned int v34 = v33 & 0xFFFF7FFF | ((v27 & 1) << 15);
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a2 + 4) = v34 & 0xFFFCFFFF | ((*v18 & 3) << 16);
  *(_DWORD *)(a2 + 336) = 0;
  if (*v18 <= 1)
  {
    if (*(void *)(v10 + 2360 * (int)a3 + 2344))
    {
      if (!*(_DWORD *)(a1 + 13228))
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 256) + 344))(*(void *)(a1 + 256), a3);
        uint64_t v4 = a1;
        uint64_t v35 = *(void *)(a1 + 256);
        if (!*(_DWORD *)(v35 + 9032))
        {
          *(_DWORD *)(a1 + 13228) = 1;
          *(_DWORD *)(a2 + 4) |= 0x40000u;
          int v132 = 368 * a3;
          if (*(void *)(v35 + 8856) || *(_DWORD *)(v35 + 9008) || *(_DWORD *)(v35 + 9012))
          {
            uint64_t result = CAHDec::addToPatcherList(a1, (void *)(v35 + 8856), v132 + 3356, 0, 0xFFFFFFFFLL, 8, -256, 4);
            int v132 = 368 * a3;
            uint64_t v4 = a1;
            if (result) {
              return result;
            }
            if (*(void *)(v35 + 8856)) {
              goto LABEL_136;
            }
          }
          if (*(_DWORD *)(v35 + 9008) || *(_DWORD *)(v35 + 9012))
          {
LABEL_136:
            uint64_t result = CAHDec::addToPatcherList(v4, (void *)(v35 + 8856), v132 + 3384, 0, 0x3FFFFFFFFFFLL, 32, 1023, 4);
            uint64_t v4 = a1;
            if (result) {
              return result;
            }
          }
        }
      }
    }
  }
  int v36 = (unsigned int *)(v29 + 624);
  int v37 = (unsigned int *)(v29 + 620);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
  (*(void (**)(void, void))(**(void **)(v4 + 256) + 352))(*(void *)(v4 + 256), 0);
  if (*v18 <= 1)
  {
    uint64_t v38 = v5 + 8456;
    if ((*v37 & 0x80000000) != 0)
    {
      uint64_t v40 = 0;
      if (*v18) {
        goto LABEL_38;
      }
    }
    else
    {
      int v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = a2 + 8;
      do
      {
        uint64_t v42 = v40;
        *(_DWORD *)(v41 + 4 * v40) = v39 & 0xF0 | 0x2DC00000;
        *(_DWORD *)(v41 + 4 * v40) = v39 & 0xF0 | 0x2DC00000 | *(_DWORD *)(v38 + 4 * v40) & 0xF;
        ++v40;
        v39 += 16;
      }
      while (v42 < (int)*v37);
      if (*v18) {
        goto LABEL_38;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 256) + 352))(*(void *)(a1 + 256), 1, a3);
    if ((*v36 & 0x80000000) == 0)
    {
      int v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = a2 + 4 * v40 + 8;
      do
      {
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100;
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100 | *(_DWORD *)(v38 + 4 * v44) & 0xF;
        v43 += 16;
      }
      while (v44++ < (int)*v36);
    }
  }
LABEL_38:
  *(void *)(a2 + 128) = 0x2DD0000000000000;
  int v47 = *v18;
  if (*v18)
  {
    uint64_t v48 = a1;
    uint64_t v50 = v133;
    int v49 = v134;
    if (v47 != 1 || !*(unsigned char *)(v8 + 9856 * v7 + 49)) {
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v48 = a1;
    uint64_t v50 = v133;
    int v49 = v134;
    if (!*(unsigned char *)(v8 + 9856 * v7 + 50)) {
      goto LABEL_62;
    }
  }
  unsigned int v51 = 0;
  unsigned int v52 = 0;
  uint64_t v53 = v10 + 2360 * v11;
  uint64_t v54 = v8 + 9856 * v7;
  uint64_t v55 = (unsigned char *)(v54 + 50);
  int v56 = (unsigned char *)(v54 + 49);
  if (v47) {
    uint64_t v57 = v56;
  }
  else {
    uint64_t v57 = v55;
  }
  int v58 = ((*v57 & 1) << 6) | 0x2DD00000;
  *(_DWORD *)(a2 + 132) = v58;
  char v59 = *(_DWORD *)(v53 + 768);
  unsigned int v60 = v58 & 0xFFFFFFC7 | (8 * (*(_DWORD *)(v53 + 768) & 7));
  *(_DWORD *)(a2 + 132) = v60;
  unsigned __int8 v61 = (*(_DWORD *)(v53 + 772) + *(_DWORD *)(v53 + 768)) & 7;
  *(_DWORD *)(a2 + 132) = v60 & 0xFFFFFFF8 | v61;
  int v62 = 1 << (v59 & 7);
  int v63 = 1 << v61;
  do
  {
    uint64_t v64 = v51;
    if (*(unsigned char *)(v10 + 2360 * v11 + v51 + 776))
    {
      int v65 = ((v51 & 0xF) << 9) | 0x2DE04000;
      uint64_t v66 = a2 + 4 * v52;
      *(_DWORD *)(v66 + 136) = v65;
      uint64_t v67 = v10 + 2360 * v11 + 4 * v64;
      *(_DWORD *)(v66 + 136) = ((unsigned __int16)*(_DWORD *)(v67 + 808) + (_WORD)v62) & 0x1FF | v65;
      *(_DWORD *)(v66 + 232) = 770703360;
      *(_DWORD *)(v66 + 232) = *(unsigned __int16 *)(v67 + 872) | 0x2DF00000;
      ++v52;
    }
    if (*(unsigned char *)(v10 + 2360 * v11 + v64 + 792))
    {
      uint64_t v68 = 0;
      char v69 = 1;
      do
      {
        char v70 = v69;
        int v71 = ((v64 & 0xF) << 9) | (v68 << 14) | 0x2DE08000;
        uint64_t v72 = a2 + 4 * v52;
        *(_DWORD *)(v72 + 136) = v71;
        uint64_t v73 = v10 + 2360 * v11 + 8 * v64 + 4 * v68;
        *(_DWORD *)(v72 + 136) = ((unsigned __int16)*(_DWORD *)(v73 + 936) + (_WORD)v63) & 0x1FF | v71;
        *(_DWORD *)(v72 + 232) = 770703360;
        *(_DWORD *)(v72 + 232) = *(unsigned __int16 *)(v73 + 1608) | 0x2DF00000;
        ++v52;
        uint64_t v68 = 1;
        char v69 = 0;
      }
      while ((v70 & 1) != 0);
    }
    unsigned int v51 = v64 + 1;
  }
  while ((int)v64 + 1 <= *v37);
  if (!*v18)
  {
    unsigned int v74 = 0;
    do
    {
      uint64_t v75 = v74;
      if (*(unsigned char *)(v10 + 2360 * v11 + v74 + 1192))
      {
        int v76 = ((v74 & 0xF) << 9) | 0x2DE06000;
        uint64_t v77 = a2 + 4 * v52;
        *(_DWORD *)(v77 + 136) = v76;
        uint64_t v78 = v10 + 2360 * v11 + 4 * v75;
        *(_DWORD *)(v77 + 136) = ((unsigned __int16)*(_DWORD *)(v78 + 1224) + (_WORD)v62) & 0x1FF | v76;
        *(_DWORD *)(v77 + 232) = 770703360;
        *(_DWORD *)(v77 + 232) = *(unsigned __int16 *)(v78 + 1288) | 0x2DF00000;
        ++v52;
      }
      if (*(unsigned char *)(v10 + 2360 * v11 + v75 + 1208))
      {
        uint64_t v79 = 0;
        char v80 = 1;
        do
        {
          char v81 = v80;
          int v82 = ((v75 & 0xF) << 9) | (v79 << 14) | 0x2DE0A000;
          uint64_t v83 = a2 + 4 * v52;
          *(_DWORD *)(v83 + 136) = v82;
          uint64_t v84 = v10 + 2360 * v11 + 8 * v75 + 4 * v79;
          *(_DWORD *)(v83 + 136) = ((unsigned __int16)*(_DWORD *)(v84 + 1352) + (_WORD)v63) & 0x1FF | v82;
          *(_DWORD *)(v83 + 232) = 770703360;
          *(_DWORD *)(v83 + 232) = *(unsigned __int16 *)(v84 + 1736) | 0x2DF00000;
          ++v52;
          uint64_t v79 = 1;
          char v80 = 0;
        }
        while ((v81 & 1) != 0);
      }
      unsigned int v74 = v75 + 1;
    }
    while ((int)v75 + 1 <= *v36);
  }
  *(_DWORD *)(a2 + 128) = v52;
LABEL_62:
  uint64_t v85 = v8 + 9856 * v7;
  int v88 = *(unsigned __int8 *)(v85 + 48);
  uint64_t v86 = (unsigned __int8 *)(v85 + 48);
  LOBYTE(v87) = v88;
  if (v88) {
    int v87 = *(_DWORD *)(v10 + 2360 * v11 + 1876);
  }
  unsigned int v89 = *(_DWORD *)(a2 + 328) & 0xFFFFFFE0 | ((_BYTE)v87 + *((_DWORD *)v86 - 1)) & 0x1F;
  *(_DWORD *)(a2 + 328) = v89;
  int v90 = *v86;
  if (v90) {
    int v90 = *(_DWORD *)(v10 + 2360 * v11 + 1872);
  }
  unsigned int v91 = v89 & 0xFFFFFC1F | (32 * (((_BYTE)v90 + *(_DWORD *)(v8 + 9856 * v7 + 40)) & 0x1F));
  *(_DWORD *)(a2 + 328) = v91;
  uint64_t v92 = (_DWORD *)(v8 + 9856 * v7);
  int v93 = v92[7] + *(_DWORD *)(v10 + 2360 * v11 + 1868) + 26;
  *(_DWORD *)(a2 + 328) = v91 & 0xE03FF | ((v93 & 0x7F) << 10) | 0x2D900000;
  *(_DWORD *)(*(void *)(v48 + 256) + 2868) = *(_DWORD *)(v48 + 460) + (v93 << 25 >> 25);
  *(_DWORD *)(a2 + 332) = 0;
  int v94 = v92[1635] & 7;
  *(_DWORD *)(a2 + 332) = v94;
  unsigned int v95 = v94 & 0xFFFFFFC7 | (8 * (v92[1634] & 7));
  *(_DWORD *)(a2 + 332) = v95;
  int v96 = (char *)(v50 + 23176 * v49 + 10649);
  char v97 = *v96;
  if (*v96) {
    char v97 = *(unsigned char *)(v10 + 2360 * v11 + 618);
  }
  unsigned int v98 = v95 & 0xFFFFFFBF | ((v97 & 1) << 6);
  *(_DWORD *)(a2 + 332) = v98;
  if (*v96) {
    char v99 = *(unsigned char *)(v10 + 2360 * v11 + 617);
  }
  else {
    char v99 = 0;
  }
  int v100 = (v97 & 1) << 6;
  int v101 = (v99 & 1) << 7;
  unsigned int v102 = v98 & 0xFFFFFF7F | v101;
  *(_DWORD *)(a2 + 332) = v102;
  uint64_t v103 = v10 + 2360 * v11;
  uint64_t v104 = v8 + 9856 * v7;
  if (*(unsigned char *)(v103 + 1881)) {
    int v105 = (_DWORD *)(v103 + 1888);
  }
  else {
    int v105 = (_DWORD *)(v104 + 248);
  }
  unsigned int v106 = v102 & 0xFFFFF0FF | ((*v105 & 0xF) << 8);
  *(_DWORD *)(a2 + 332) = v106;
  if (*(unsigned char *)(v103 + 1881)) {
    int v107 = (_DWORD *)(v103 + 1884);
  }
  else {
    int v107 = (_DWORD *)(v104 + 244);
  }
  unsigned int v108 = v106 & 0xFFFF0FFF | ((*v107 & 0xF) << 12);
  *(_DWORD *)(a2 + 332) = v108;
  if (*(unsigned char *)(v104 + 239) && *(unsigned char *)(v103 + 1881)) {
    int v109 = (unsigned __int8 *)(v10 + 2360 * v11 + 1882);
  }
  else {
    int v109 = (unsigned __int8 *)(v8 + 9856 * v7 + 240);
  }
  int v110 = *v109;
  BOOL v111 = (v101 | v100) != 0;
  int v112 = v108 | ((v110 == 0) << 16);
  *(_DWORD *)(a2 + 332) = v112;
  if (!v110) {
    BOOL v111 = 1;
  }
  uint64_t v113 = v8 + 9856 * v7;
  if (v111) {
    int v114 = (unsigned char *)(v10 + 2360 * v11 + 1892);
  }
  else {
    int v114 = (unsigned char *)(v113 + 237);
  }
  unsigned int v115 = v112 & 0xFFFDFFFF | ((*v114 & 1) << 17);
  *(_DWORD *)(a2 + 332) = v115;
  if (*(unsigned char *)(v113 + 52)) {
    char v116 = *(unsigned char *)(v8 + 9856 * v7 + 236);
  }
  else {
    char v116 = 1;
  }
  unsigned int v117 = v115 & 0xFFFBFFFF | ((v116 & 1) << 18);
  *(_DWORD *)(a2 + 332) = v117;
  int v118 = *(unsigned __int8 *)(v50 + 23176 * v49 + 10650);
  if (*(unsigned char *)(v50 + 23176 * v49 + 10650)) {
    int v118 = *(unsigned char *)(v50 + 23176 * v49 + 10668) == 0;
  }
  *(_DWORD *)(a2 + 332) = v117 | (v118 << 19) | 0x2DA00000;
  int v119 = *(_DWORD **)(v48 + 256);
  int v120 = v119[626];
  if (v119[590] != 1)
  {
    unint64_t v137 = 0;
    uint64_t v138 = 0;
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))
    {
      int v128 = 368 * a3;
      *(_DWORD *)(a2 + 340) = 0;
      uint64_t v122 = v138;
      if (!*(void *)v138 && !*(_DWORD *)(v138 + 152) && !*(_DWORD *)(v138 + 156)) {
        goto LABEL_116;
      }
      int v129 = v137;
      if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        int v140 = "populateSliceRegisters";
        __int16 v141 = 1024;
        int v142 = 1639;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        int v129 = v137;
      }
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v128 + 3360, v129, 0x3FFFFFFFFFFLL, 32, 1023, 4);
      if (result) {
        return result;
      }
      uint64_t v122 = v138;
      if (!*(void *)v138)
      {
LABEL_116:
        if (!*(_DWORD *)(v122 + 152) && !*(_DWORD *)(v122 + 156)) {
          goto LABEL_122;
        }
      }
      int v125 = v128 + 3364;
      int v126 = v137;
      if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        int v140 = "populateSliceRegisters";
        __int16 v141 = 1024;
        int v142 = 1640;
        int v127 = &_os_log_internal;
        goto LABEL_120;
      }
LABEL_121:
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v125, v126, 0xFFFFFFFFLL, 0, -1, 4);
      if (result) {
        return result;
      }
      goto LABEL_122;
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t v137 = 0;
  uint64_t v138 = 0;
  if (!(*(unsigned int (**)(_DWORD *, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))return 0xFFFFFFFFLL; {
  int v121 = 368 * a3;
  }
  *(_DWORD *)(a2 + 340) = 0;
  uint64_t v122 = v138;
  if (!*(void *)v138 && !*(_DWORD *)(v138 + 152) && !*(_DWORD *)(v138 + 156)) {
    goto LABEL_101;
  }
  int v123 = v137;
  if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    int v140 = "populateSliceRegisters";
    __int16 v141 = 1024;
    int v142 = 1620;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v123 = v137;
  }
  uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v121 + 3360, v123, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  if (!result)
  {
    uint64_t v122 = v138;
    if (*(void *)v138) {
      goto LABEL_103;
    }
LABEL_101:
    if (*(_DWORD *)(v122 + 152) || *(_DWORD *)(v122 + 156))
    {
LABEL_103:
      int v125 = v121 + 3364;
      int v126 = v137;
      if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        int v140 = "populateSliceRegisters";
        __int16 v141 = 1024;
        int v142 = 1621;
        int v127 = &_os_log_internal;
LABEL_120:
        _os_log_impl(&dword_223977000, v127, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        int v126 = v137;
        goto LABEL_121;
      }
      goto LABEL_121;
    }
LABEL_122:
    unsigned int v130 = *(_DWORD *)(v10 + 2360 * v11 + 16) - (*(_DWORD *)(v10 + 2360 * v11 + 2080) >> 3);
    *(_DWORD *)(a2 + 348) = v130;
    if (v119[590] == 1)
    {
      *(void *)(a2 + 356) = 0;
      if (v130 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
        unsigned int v130 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
      }
      uint64_t result = 0;
      if (v119[605]) {
        int v131 = v130 | v120 & 0x10000;
      }
      else {
        int v131 = (unsigned __int16)v120 | (v130 << 22);
      }
      *(_DWORD *)(a2 + 360) = v131;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecIxoraHevc::populateCommonRegisters(CAHDecIxoraHevc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000000;
  return 0;
}

uint64_t CAHDecIxoraHevc::updateCommonRegisters(CAHDecIxoraHevc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -889266515;
  return 0;
}

uint64_t CAHDecIxoraHevc::populateSequenceRegisters(CAHDecIxoraHevc *this)
{
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)*((void *)this + 33);
  int v3 = *(_DWORD *)(v1 + 8320);
  uint64_t v4 = *(void *)(v1 + 8280);
  v2[13] = 0;
  uint64_t v5 = v4 + 23176 * v3;
  __int16 v6 = (*(_DWORD *)(v5 + 3608) >> 3) - 1;
  v2[13] = v6 & 0x1FFF;
  v2[13] = ((*(_DWORD *)(v5 + 3612) << 13) + 536805376) & 0x1FFF0000 | v6 & 0x1FFF;
  v2[14] = 0;
  int v7 = *(unsigned char *)(v5 + 10648) & 1;
  v2[14] = v7;
  unsigned int v8 = v7 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v5 + 4440) & 7));
  v2[14] = v8;
  unsigned int v9 = v8 & 0xFFFFFF8F | (16 * (*(_DWORD *)(v5 + 4436) & 7));
  v2[14] = v9;
  unsigned int v10 = v9 & 0xFFFFFE7F | (((*(_DWORD *)(v5 + 4428) + *(_DWORD *)(v5 + 4432)) & 3) << 7);
  v2[14] = v10;
  unsigned int v11 = v10 & 0xFFFFF9FF | ((*(_DWORD *)(v5 + 4428) & 3) << 9);
  v2[14] = v11;
  unsigned int v12 = v11 & 0xFFFFE7FF | (((*(_DWORD *)(v5 + 4424) + *(_DWORD *)(v5 + 4420)) & 3) << 11);
  v2[14] = v12;
  unsigned int v13 = v12 & 0xFFFF9FFF | ((*(_DWORD *)(v5 + 4420) & 3) << 13);
  v2[14] = v13;
  unsigned int v14 = v13 & 0xFFF87FFF | ((*(_DWORD *)(v5 + 3640) & 0xF) << 15);
  v2[14] = v14;
  unsigned int v15 = v14 & 0xFF87FFFF | ((*(_DWORD *)(v5 + 3636) & 0xF) << 19);
  v2[14] = v15;
  unsigned int v16 = v15 & 0xFF7FFFFF | ((*(unsigned char *)(v5 + 3604) & 1) << 23);
  v2[14] = v16;
  v2[14] = v16 & 0xFCFFFFFF | ((*(_DWORD *)(v5 + 3600) & 3) << 24);
  v2[15] = 0;
  if (*(unsigned char *)(v5 + 10650))
  {
    v2[15] = 4096;
    uint64_t v17 = (_DWORD *)(v4 + 23176 * v3);
    int v18 = (v17[2666] + v17[2665]) & 3 | 0x1000;
    v2[15] = v18;
    unsigned int v19 = v18 & 0xFFFFFFF3 | (4 * (v17[2665] & 3));
    v2[15] = v19;
    unsigned int v20 = v19 & 0xFFFFFF0F | (16 * (v17[2664] & 0xF));
    v2[15] = v20;
    v2[15] = v20 & 0xFFFFF0FF | ((v17[2663] & 0xF) << 8);
  }
  v2[16] = 0;
  if (*(unsigned char *)(v4 + 23176 * v3 + 22833))
  {
    int v21 = *(unsigned char *)(v4 + 23176 * v3 + 22844) & 1;
    v2[16] = v21;
    unsigned int v22 = v21 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v4 + 23176 * v3 + 22843) & 1));
    v2[16] = v22;
    unsigned int v23 = v22 & 0xFFFFFFFB | (4 * (*(unsigned char *)(v4 + 23176 * v3 + 22842) & 1));
    v2[16] = v23;
    int v24 = v23 | (8 * (*(unsigned char *)(v4 + 23176 * v3 + 22841) == 0));
    v2[16] = v24;
    unsigned int v25 = v24 & 0xFFFFFFEF | (16 * (*(unsigned char *)(v4 + 23176 * v3 + 22840) & 1));
    v2[16] = v25;
    unsigned int v26 = v25 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v4 + 23176 * v3 + 22839) & 1));
    v2[16] = v26;
    unsigned int v27 = v26 & 0xFFFFFFBF | ((*(unsigned char *)(v4 + 23176 * v3 + 22838) & 1) << 6);
    v2[16] = v27;
    int v28 = v27 | ((*(unsigned char *)(v4 + 23176 * v3 + 22837) & 1) << 7);
    v2[16] = v28;
    int v29 = v28 | ((*(unsigned char *)(v4 + 23176 * v3 + 22836) & 1) << 8);
  }
  else
  {
    int v29 = 8;
  }
  v2[16] = v29;
  uint64_t v30 = v4 + 23176 * v3;
  v2[16] = v29 & 0xFFFFFDFF | ((*(unsigned char *)(v30 + 22285) & 1) << 9);
  if (*(unsigned char *)(v30 + 4444)) {
    CAHDecTansyHevc::copyScalingList((uint64_t)this, (uint64_t)(v2 + 17), *((void *)this + 33) + 884, *(_DWORD *)(v5 + 3600), v4 + 23176 * v3 + 4448);
  }
  return 0;
}

uint64_t CAHDecIxoraHevc::getTileHdrMemInfo(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 176 * a2;
  *a3 = v3 + 528;
  a3[1] = v3 + 3344;
  return result;
}

__n128 CAHDecIxoraHevc::getMVmemInfo(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1 + 176 * a2;
  long long v5 = *(_OWORD *)(v4 + 8976);
  long long v6 = *(_OWORD *)(v4 + 9008);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 8992);
  *(_OWORD *)(a3 + 32) = v6;
  *(_OWORD *)a3 = v5;
  long long v7 = *(_OWORD *)(v4 + 9024);
  long long v8 = *(_OWORD *)(v4 + 9040);
  long long v9 = *(_OWORD *)(v4 + 9072);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(v4 + 9056);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_OWORD *)(a3 + 64) = v8;
  __n128 result = *(__n128 *)(v4 + 9088);
  long long v11 = *(_OWORD *)(v4 + 9104);
  long long v12 = *(_OWORD *)(v4 + 9136);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v4 + 9120);
  *(_OWORD *)(a3 + 160) = v12;
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v11;
  *a4 = *(_DWORD *)(a1 + 4 * a2 + 464);
  return result;
}

uint64_t CAHDecIxoraHevc::populatePictureRegisters(CAHDecIxoraHevc *this)
{
  uint64_t v466 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 8320);
  int v4 = *(_DWORD *)(v2 + 8324);
  uint64_t v5 = *(void *)(v2 + 8280);
  uint64_t v6 = *(void *)(v2 + 8288);
  unsigned int v444 = *(_DWORD *)(v2 + 9036);
  unsigned int v7 = *(_DWORD *)(v2 + 3068);
  int v449 = *(_DWORD *)(v2 + 3072);
  int v8 = *(unsigned __int8 *)(v2 + 3060);
  int v9 = *(_DWORD *)(v2 + 3064);
  uint64_t v439 = *(void *)(v2 + 8392);
  int v440 = *(_DWORD *)(v2 + 3036);
  uint64_t v10 = *(void *)(v2 + 2088);
  int v435 = *(_DWORD *)(v2 + 3660);
  int v436 = *(unsigned __int8 *)(v2 + 9098);
  int v447 = *(_DWORD *)(v2 + 2644);
  uint64_t v442 = *(unsigned int *)(v2 + 8424);
  int v11 = *(unsigned __int8 *)(v2 + 8);
  long long v12 = *(_OWORD *)(v2 + 8536);
  v465[0] = *(_OWORD *)(v2 + 8520);
  v465[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 8568);
  v465[2] = *(_OWORD *)(v2 + 8552);
  v465[3] = v13;
  uint64_t v433 = v10;
  uint64_t v434 = *(unsigned int *)(v2 + 8720);
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  unsigned int v15 = (char *)this + 264;
  int v445 = *(_DWORD *)(v5 + 23176 * v3 + 4424) + *(_DWORD *)(v5 + 23176 * v3 + 4420);
  int v446 = v14;
  memset(v464, 0, sizeof(v464));
  memset(v463, 0, sizeof(v463));
  uint64_t v451 = *((void *)this + 33);
  (*(void (**)(void))(**((void **)this + 32) + 336))();
  uint64_t v16 = 0;
  uint64_t v17 = (unsigned __int8 *)*((void *)this + 32);
  int v18 = (const double *)(v17 + 8728);
  do
  {
    float64x2x2_t v467 = vld2q_f64(v18);
    v18 += 4;
    v464[v16] = v467.val[0];
    v463[v16++] = v467.val[1];
  }
  while (v16 != 4);
  uint64_t v19 = v6 + 9856 * v4;
  int v21 = *(unsigned __int8 *)(v19 + 52);
  unsigned int v20 = (unsigned char *)(v19 + 52);
  v448 = (char *)this + 264;
  int v441 = v11;
  int v437 = v8;
  int v438 = v9;
  unsigned int v443 = v7;
  if (v21)
  {
    unint64_t v22 = 0;
    uint64_t v23 = v6 + 9856 * v4;
    unsigned __int16 v24 = *(_WORD *)(v23 + 56) + 1;
    uint64_t v25 = *(void *)v15;
    *(_WORD *)(*(void *)v15 + 780) = v24;
    uint64_t v26 = v23 + 9676;
    do
    {
      *(_WORD *)(v25 + 784 + 2 * v22) = *(_DWORD *)(v26 + 4 * v22);
      BOOL v27 = v22++ >= v24;
    }
    while (!v27);
    unint64_t v28 = 0;
    uint64_t v29 = v6 + 9856 * v4;
    unsigned __int16 v30 = *(_WORD *)(v29 + 60) + 1;
    *(_WORD *)(v25 + 782) = v30;
    int v31 = v30;
    uint64_t v32 = v29 + 9760;
    uint64_t v33 = v25 + 826;
    do
    {
      *(_WORD *)(v33 + 2 * v28) = *(_DWORD *)(v32 + 4 * v28);
      BOOL v27 = v28++ >= v30;
    }
    while (!v27);
    uint64_t v34 = v5;
    int v35 = v3;
  }
  else
  {
    uint64_t v36 = *(void *)v15;
    *(_DWORD *)(v36 + 780) = 65537;
    *(_WORD *)(v36 + 784) = 0;
    int v35 = v3;
    uint64_t v34 = v5;
    uint64_t v37 = v5 + 23176 * v3;
    *(_WORD *)(v36 + 786) = *(_DWORD *)(v37 + 22880);
    *(_WORD *)(v36 + 826) = 0;
    *(_WORD *)(v36 + 828) = *(_DWORD *)(v37 + 22888);
    int v31 = 1;
    unsigned __int16 v24 = 1;
  }
  int v38 = v17[2675];
  unsigned int v39 = v17[2674];
  if (v38 | v39)
  {
    uint64_t v40 = v34 + 23176 * v35;
    unsigned int v41 = *(_DWORD *)(v40 + 3636);
    unsigned int v42 = *(_DWORD *)(v40 + 3640);
    if (v41 > v42) {
      unsigned int v42 = v41;
    }
    unsigned int v43 = (v42 + 9) & 0xFFFFFFFE;
    if (v43 == 8)
    {
      unsigned int v52 = 1;
      int v51 = 8;
      if (!v17[2675]) {
        goto LABEL_47;
      }
    }
    else
    {
      int v44 = v17[2672];
      if (v44) {
        int v45 = 12;
      }
      else {
        int v45 = 11;
      }
      if (v44) {
        int v46 = 5;
      }
      else {
        int v46 = 4;
      }
      BOOL v47 = v44 == 0;
      if (v44) {
        int v48 = 10;
      }
      else {
        int v48 = 9;
      }
      if (v47) {
        int v49 = 2;
      }
      else {
        int v49 = 3;
      }
      if (v43 == 10)
      {
        int v50 = v49;
      }
      else
      {
        int v48 = 27;
        int v50 = 27;
      }
      if (v43 == 12) {
        int v51 = v45;
      }
      else {
        int v51 = v48;
      }
      if (v43 == 12) {
        unsigned int v52 = v46;
      }
      else {
        unsigned int v52 = v50;
      }
      if (!v38) {
        goto LABEL_47;
      }
    }
    if (*(_DWORD *)(v34 + 23176 * v35 + 3600) && (v38 == 2 && v51 == 8 || v38 == 3 && (v51 - 9) <= 1))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v51;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v38;
        uint64_t v53 = &_os_log_internal;
        uint64_t v54 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
        goto LABEL_123;
      }
      return 0xFFFFFFFFLL;
    }
LABEL_47:
    if (v39 && (v39 == 3 && v52 - 9 < 2 || v52 <= 0x1A && ((1 << v52) & 0x4C00000) != 0 && v39 <= 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v52;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v39;
        uint64_t v53 = &_os_log_internal;
        uint64_t v54 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
        goto LABEL_123;
      }
      return 0xFFFFFFFFLL;
    }
  }
  unsigned __int16 v432 = v24;
  uint64_t v55 = v20;
  *(_DWORD *)(v451 + 88) = 766509056;
  uint64_t v56 = (*(uint64_t (**)(void))(**((void **)this + 32) + 216))(*((void *)this + 32));
  if (v56) {
    int v57 = (*(_DWORD *)(*((void *)this + 32) + 3092) == 2) << 13;
  }
  else {
    int v57 = 0;
  }
  unsigned int v58 = v444 >> 28;
  unsigned int v59 = *(_DWORD *)(v451 + 88) & 0xFFFFC100;
  if (v446) {
    int v60 = 688;
  }
  else {
    int v60 = 672;
  }
  if (v447) {
    int v61 = 4160;
  }
  else {
    int v61 = 64;
  }
  unsigned int v62 = v61 & 0xFFFFFFF0 | ((v447 == 1) << 10) | v60 & 0xFFFFFFF0 | (4 * (v38 & 3)) | v39 & 3 | v57;
  int v63 = v62 | v59;
  *(_DWORD *)(v451 + 88) = v62 | v59;
  uint64_t v64 = (unsigned char *)*((void *)this + 32);
  unsigned int v65 = v63 & 0xFFF7FFFF | ((v64[2652] & 1) << 19);
  *(_DWORD *)(v451 + 88) = v65;
  unsigned int v66 = v65 & 0xFFFBFFFF | ((v64[2653] & 1) << 18);
  *(_DWORD *)(v451 + 88) = v66;
  unsigned int v67 = v66 & 0xFFFDFFFF | ((v64[2654] & 1) << 17);
  *(void *)(v451 + 88) = v67;
  if ((v444 & 1) != 0 && *(unsigned char *)(v6 + 9856 * v4 + 53) && *(_DWORD *)(v34 + 23176 * v35 + 22888) > v58 + 1
    || (v444 & 2) != 0 && !*(unsigned char *)(v6 + 9856 * v4 + 53) && *v55 && v31 * v432 > v58 + 1)
  {
    goto LABEL_77;
  }
  if ((v444 & 0x20) == 0 || (int v68 = *(unsigned __int8 *)(v6 + 9856 * v4 + 53), *(unsigned char *)(v6 + 9856 * v4 + 53)))
  {
    int v68 = 0;
    goto LABEL_78;
  }
  if (!*v55 && v443 > v58 + 1) {
LABEL_77:
  }
    int v68 = (v449 == 0) << 27;
LABEL_78:
  *(_DWORD *)(v451 + 92) = v68;
  *(_DWORD *)(v451 + 96) = 0;
  uint64_t v69 = v34 + 23176 * v35;
  unsigned __int16 v70 = *(_DWORD *)(v69 + 3608) - 1;
  *(_DWORD *)(v451 + 96) = v70;
  int v71 = (v70 | ((unsigned __int16)*(_DWORD *)(v69 + 3612) << 16)) - 0x10000;
  *(_DWORD *)(v451 + 100) = 0;
  *(_DWORD *)(v451 + 104) = 0;
  *(_DWORD *)(v451 + 96) = v71;
  if (*(unsigned char *)(v6 + 9856 * v4 + 6466))
  {
    uint64_t v72 = (unsigned char *)(v6 + 9856 * v4 + 6477);
    int v73 = 32 * (*v72 & 1);
    *(_DWORD *)(v451 + 104) = v73;
    LOBYTE(v74) = *v72;
    if (*v72) {
      int v74 = *(_DWORD *)(v6 + 9856 * v4 + 6484);
    }
    unint64_t v75 = v74 & 7;
    int v76 = v75 | v73;
    *(_DWORD *)(v451 + 104) = v75 | v73;
    if (v73)
    {
      uint64_t v77 = (_DWORD *)(v6 + 9856 * v4 + 6512);
      uint64_t v78 = (unsigned int *)(v451 + 112);
      unint64_t v79 = -1;
      do
      {
        unsigned int v80 = *v78 & 0xFFFFFFE0 | *v77 & 0x1F;
        *uint64_t v78 = v80;
        uint64_t v56 = v80 & 0xFFFFFC1F | (32 * (*(v77 - 6) & 0x1F));
        *v78++ = v56;
        ++v79;
        ++v77;
      }
      while (v79 < v75);
    }
    int v81 = *v72;
    if (v81) {
      int v81 = *(_DWORD *)(v6 + 9856 * v4 + 6480);
    }
    int v82 = (8 * (((_BYTE)v445 - (_BYTE)v81) & 3)) | v76;
    *(_DWORD *)(v451 + 104) = v82;
    unsigned int v83 = v82 & 0xFFFFFFBF | ((*(unsigned char *)(v6 + 9856 * v4 + 6476) & 1) << 6);
    *(_DWORD *)(v451 + 104) = v83;
    unsigned int v84 = v83 & 0xFFFFFE7F | ((*(_DWORD *)(v6 + 9856 * v4 + 6472) & 3) << 7);
  }
  else
  {
    unsigned int v84 = 8 * (v445 & 3);
  }
  *(_DWORD *)(v451 + 104) = v84;
  uint64_t v85 = v6 + 9856 * v4;
  int v88 = *(unsigned __int8 *)(v85 + 34);
  uint64_t v86 = (unsigned char *)(v85 + 34);
  LOBYTE(v87) = v88;
  if (v88) {
    int v87 = *(_DWORD *)(v6 + 9856 * v4 + 36);
  }
  unsigned int v89 = v84 & 0xFFFE7FFF | ((((_BYTE)v445 - (_BYTE)v87) & 3) << 15);
  *(_DWORD *)(v451 + 104) = v89;
  uint64_t v90 = v6 + 9856 * v4;
  unsigned int v91 = v89 & 0xFFFFF1FF | ((*(_DWORD *)(v90 + 6460) & 7) << 9);
  *(_DWORD *)(v451 + 104) = v91;
  unsigned int v92 = v91 & 0xFFFFEFFF | ((*(unsigned char *)(v90 + 53) & 1) << 12);
  *(_DWORD *)(v451 + 104) = v92;
  unsigned int v93 = v92 & 0xFFFFDFFF | ((*v55 & 1) << 13);
  *(_DWORD *)(v451 + 104) = v93;
  unsigned int v94 = v93 & 0xFFFFBFFF | ((*(unsigned char *)(v90 + 51) & 1) << 14);
  *(_DWORD *)(v451 + 104) = v94;
  unsigned int v95 = v94 & 0xFFFDFFFF | ((*v86 & 1) << 17);
  *(_DWORD *)(v451 + 104) = v95;
  unsigned int v96 = v95 & 0xFFFBFFFF | ((*(unsigned char *)(v90 + 33) & 1) << 18);
  *(_DWORD *)(v451 + 104) = v96;
  unsigned int v97 = v96 & 0xFFF7FFFF | ((*(unsigned char *)(v90 + 32) & 1) << 19);
  *(_DWORD *)(v451 + 104) = v97;
  unsigned int v98 = v97 & 0xFFEFFFFF | ((*(unsigned char *)(v90 + 16) & 1) << 20);
  *(_DWORD *)(v451 + 104) = v98;
  if (v62 >> 13) {
    BOOL v99 = 0;
  }
  else {
    BOOL v99 = *(unsigned char *)(v34 + 23176 * v35 + 22284) != 0;
  }
  *(_DWORD *)(v451 + 104) = v98 & 0xFFDFFFFF | (v99 << 21);
  uint64_t v100 = v6 + 9856 * v4;
  unsigned int v101 = *(_DWORD *)(v451 + 108) & 0xFFFFFFE0 | *(_DWORD *)(v100 + 44) & 0x1F;
  *(_DWORD *)(v451 + 108) = v101;
  *(_DWORD *)(v451 + 108) = v101 & 0xFFFFFC1F | (32 * (*(_DWORD *)(v100 + 40) & 0x1F));
  if (*(unsigned char *)(v100 + 252))
  {
    CAHDecTansyHevc::copyScalingList(v56, v451 + 136, *(void *)v448 + 1880, *(_DWORD *)(v34 + 23176 * v35 + 3600), v6 + 9856 * v4 + 256);
    unsigned int v67 = *(_DWORD *)(v451 + 88);
  }
  if ((~v67 & 0xC0000) != 0)
  {
    int v106 = 0;
    int v108 = 0;
    *(_DWORD *)(v451 + 156) = 0;
    *(_DWORD *)(v451 + 160) = 0;
  }
  else
  {
    unsigned int v102 = (_DWORD *)*((void *)this + 32);
    int v103 = v102[664];
    if (!v103 || !v102[665])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v134 = v102[665];
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v103;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v134;
        uint64_t v53 = &_os_log_internal;
        uint64_t v54 = "AppleAVD: %s(): invalid stat crop width/height %d/%d";
LABEL_123:
        int v135 = buf;
        uint32_t v136 = 24;
LABEL_124:
        _os_log_impl(&dword_223977000, v53, OS_LOG_TYPE_DEFAULT, v54, v135, v136);
      }
      return 0xFFFFFFFFLL;
    }
    unsigned __int16 v104 = v102[666];
    *(_WORD *)(v451 + 156) = v104;
    int v105 = v102[667];
    int v106 = v105 << 16;
    *(_DWORD *)(v451 + 156) = v104 | ((unsigned __int16)v105 << 16);
    unsigned __int16 v107 = v102[666] + v102[664] - 1;
    *(_WORD *)(v451 + 160) = v107;
    int v108 = (v107 | ((unsigned __int16)(*((_WORD *)v102 + 1330) + *((_WORD *)v102 + 1334)) << 16)) - 0x10000;
    *(_DWORD *)(v451 + 160) = v108;
  }
  if (v449) {
    int v109 = 7340080;
  }
  else {
    int v109 = 3145776;
  }
  *(_DWORD *)(v451 + 164) = v109;
  if (!*(unsigned char *)(*((void *)this + 32) + 3004))
  {
    unsigned __int16 v110 = *(_DWORD *)(v69 + 3608) - 1;
    *(_DWORD *)(v451 + 160) = v108 & 0xFFFF0000 | v110;
    int v111 = (*(_DWORD *)(v69 + 3612) << 16) - 0x10000;
    *(_DWORD *)(v451 + 160) = v111 & 0xFFFF0000 | v110;
    if (*(unsigned char *)(v34 + 23176 * v35 + 3616))
    {
      if ((v67 & 0x800) != 0)
      {
        uint64_t v112 = v34 + 23176 * v35;
        unsigned __int16 v113 = *(_DWORD *)(v112 + 3620) * *(_DWORD *)(v112 + 22852);
        *(_DWORD *)(v451 + 156) = v106 | v113;
        *(_DWORD *)(v451 + 156) = v113 | ((unsigned __int16)(*(_WORD *)(v112 + 22856) * *(_DWORD *)(v112 + 3628)) << 16);
        unsigned __int16 v114 = *(_DWORD *)(v69 + 3608) + ~(*(_DWORD *)(v112 + 3624) * *(_DWORD *)(v112 + 22852));
        *(_DWORD *)(v451 + 160) = v114 | v111;
        *(_DWORD *)(v451 + 160) = v114 | ((unsigned __int16)(*(_WORD *)(v69 + 3612)
                                                           + ~(*(_WORD *)(v112 + 3632) * *(_WORD *)(v112 + 22856))) << 16);
      }
    }
  }
  uint64_t v115 = 0;
  char v116 = (char *)this + 6160;
  do
  {
    *(_DWORD *)(*(void *)v448 + v115 + 168) = 0;
    uint64_t v117 = *(void *)v448 + v115;
    int v118 = *(_DWORD *)(v117 + 168);
    *(_DWORD *)(v117 + 168) = 0;
    *(_DWORD *)(*(void *)v448 + v115 + 168) ^= 0xFFFFFF00;
    uint64_t v119 = *(void *)v448 + v115;
    int v120 = *(_DWORD *)(v119 + 168);
    *(_DWORD *)(v119 + 168) = v118;
    if (*(void *)v116 || *((_DWORD *)v116 + 38) || *((_DWORD *)v116 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v116, (int)v115 + 168, 0, 0xFFFFFFFFLL, 8, v120, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v115 + 228) = 0;
    *(_DWORD *)(*((void *)this + 33) + v115 + 228) = *(_DWORD *)(*((void *)this + 33) + v115 + 228) & 0x800001FF | (((*((_DWORD *)this + 3304) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v115 + 524) = 0;
    uint64_t v122 = *((void *)this + 33) + v115;
    int v123 = *(_DWORD *)(v122 + 524);
    *(_DWORD *)(v122 + 524) = 0;
    *(_DWORD *)(*((void *)this + 33) + v115 + 524) ^= 0x3FFu;
    uint64_t v124 = *((void *)this + 33) + v115;
    int v125 = *(_DWORD *)(v124 + 524);
    *(_DWORD *)(v124 + 524) = v123;
    if (*(void *)v116 || *((_DWORD *)v116 + 38) || *((_DWORD *)v116 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v116, (int)v115 + 524, 0, 0x3FFFFFFFFFFLL, 32, v125, 4);
      if (result) {
        return result;
      }
    }
    v115 += 4;
    v116 += 176;
  }
  while (v115 != 60);
  *(_DWORD *)(*(void *)v448 + 288) = 0;
  *(_DWORD *)(*(void *)v448 + 584) = 0;
  if ((*(unsigned char *)(v451 + 90) & 8) != 0)
  {
    uint64_t v126 = *((void *)this + 33);
    uint64_t v127 = *(void *)(*((void *)this + 32) + 2680);
    long long v461 = 0u;
    long long v462 = 0u;
    long long v459 = 0u;
    long long v460 = 0u;
    long long v457 = 0u;
    long long v458 = 0u;
    long long v455 = 0u;
    long long v456 = 0u;
    long long v454 = 0u;
    memset(buf, 0, sizeof(buf));
    int v128 = (*(_DWORD *)(v126 + 16) & 0xF) << 9;
    *(void *)long long buf = v127;
    int v129 = *(_DWORD *)(v126 + 288);
    *(_DWORD *)(v126 + 288) = 0;
    *(_DWORD *)(*((void *)this + 33) + 288) ^= 0xFFFFFF00;
    uint64_t v130 = *((void *)this + 33);
    int v131 = *(_DWORD *)(v130 + 288);
    *(_DWORD *)(v130 + 288) = v129;
    if (v127)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 288, v128, 0xFFFFFFFFLL, 8, v131, 4);
      if (result) {
        return result;
      }
      uint64_t v132 = *(void *)buf;
      int v133 = DWORD2(v461);
      LODWORD(v127) = HIDWORD(v461);
    }
    else
    {
      int v133 = 0;
      uint64_t v132 = 0;
    }
    int v137 = *(_DWORD *)(*(void *)v448 + 584);
    *(_DWORD *)(*(void *)v448 + 584) = 0;
    *(_DWORD *)(*(void *)v448 + 584) ^= 0x3FFu;
    int v138 = *(_DWORD *)(*(void *)v448 + 584);
    *(_DWORD *)(*(void *)v448 + 584) = v137;
    if (v132 || v133 || v127)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 584, v128, 0x3FFFFFFFFFFLL, 32, v138, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 292);
  *(_DWORD *)(v139 + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF00;
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 292);
  *(_DWORD *)(v141 + 292) = v140;
  if (*((void *)this + 1474) || *((_DWORD *)this + 2986) || *((_DWORD *)this + 2987))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1474, 292, 0, 0xFFFFFFFFLL, 8, v142, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 588) = 0;
  int v143 = *(_DWORD *)(*(void *)v448 + 588);
  *(_DWORD *)(*(void *)v448 + 588) = 0;
  *(_DWORD *)(*(void *)v448 + 588) ^= 0x3FFu;
  int v144 = *(_DWORD *)(*(void *)v448 + 588);
  *(_DWORD *)(*(void *)v448 + 588) = v143;
  if (*((void *)this + 1474) || *((_DWORD *)this + 2986) || *((_DWORD *)this + 2987))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1474, 588, 0, 0x3FFFFFFFFFFLL, 32, v144, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  uint64_t v145 = *((void *)this + 33);
  int v146 = *(_DWORD *)(v145 + 296);
  *(_DWORD *)(v145 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0xFFFFFF00;
  uint64_t v147 = *((void *)this + 33);
  int v148 = *(_DWORD *)(v147 + 296);
  *(_DWORD *)(v147 + 296) = v146;
  if (*((void *)this + 1496) || *((_DWORD *)this + 3030) || *((_DWORD *)this + 3031))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1496, 296, 0, 0xFFFFFFFFLL, 8, v148, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 592) = 0;
  int v149 = *(_DWORD *)(*(void *)v448 + 592);
  *(_DWORD *)(*(void *)v448 + 592) = 0;
  *(_DWORD *)(*(void *)v448 + 592) ^= 0x3FFu;
  int v150 = *(_DWORD *)(*(void *)v448 + 592);
  *(_DWORD *)(*(void *)v448 + 592) = v149;
  if (*((void *)this + 1496) || *((_DWORD *)this + 3030) || *((_DWORD *)this + 3031))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1496, 592, 0, 0x3FFFFFFFFFFLL, 32, v150, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 300) = 0;
  uint64_t v151 = *((void *)this + 33);
  int v152 = *(_DWORD *)(v151 + 300);
  *(_DWORD *)(v151 + 300) = 0;
  *(_DWORD *)(*((void *)this + 33) + 300) ^= 0xFFFFFF00;
  uint64_t v153 = *((void *)this + 33);
  int v154 = *(_DWORD *)(v153 + 300);
  *(_DWORD *)(v153 + 300) = v152;
  if (*((void *)this + 1518) || *((_DWORD *)this + 3074) || *((_DWORD *)this + 3075))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1518, 300, 0, 0xFFFFFFFFLL, 8, v154, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 596) = 0;
  int v155 = *(_DWORD *)(*(void *)v448 + 596);
  *(_DWORD *)(*(void *)v448 + 596) = 0;
  *(_DWORD *)(*(void *)v448 + 596) ^= 0x3FFu;
  int v156 = *(_DWORD *)(*(void *)v448 + 596);
  *(_DWORD *)(*(void *)v448 + 596) = v155;
  if (*((void *)this + 1518) || *((_DWORD *)this + 3074) || *((_DWORD *)this + 3075))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1518, 596, 0, 0x3FFFFFFFFFFLL, 32, v156, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 304) = 0;
  uint64_t v157 = *((void *)this + 33);
  int v158 = *(_DWORD *)(v157 + 304);
  *(_DWORD *)(v157 + 304) = 0;
  *(_DWORD *)(*((void *)this + 33) + 304) ^= 0xFFFFFF00;
  uint64_t v159 = *((void *)this + 33);
  int v160 = *(_DWORD *)(v159 + 304);
  *(_DWORD *)(v159 + 304) = v158;
  if (*((void *)this + 1540) || *((_DWORD *)this + 3118) || *((_DWORD *)this + 3119))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1540, 304, 0, 0xFFFFFFFFLL, 8, v160, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 600) = 0;
  int v161 = *(_DWORD *)(*(void *)v448 + 600);
  *(_DWORD *)(*(void *)v448 + 600) = 0;
  *(_DWORD *)(*(void *)v448 + 600) ^= 0x3FFu;
  int v162 = *(_DWORD *)(*(void *)v448 + 600);
  *(_DWORD *)(*(void *)v448 + 600) = v161;
  if (*((void *)this + 1540) || *((_DWORD *)this + 3118) || *((_DWORD *)this + 3119))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1540, 600, 0, 0x3FFFFFFFFFFLL, 32, v162, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 308) = 0;
  uint64_t v163 = *((void *)this + 33);
  int v164 = *(_DWORD *)(v163 + 308);
  *(_DWORD *)(v163 + 308) = 0;
  *(_DWORD *)(*((void *)this + 33) + 308) ^= 0xFFFFFF00;
  uint64_t v165 = *((void *)this + 33);
  int v166 = *(_DWORD *)(v165 + 308);
  *(_DWORD *)(v165 + 308) = v164;
  if (*((void *)this + 1562) || *((_DWORD *)this + 3162) || *((_DWORD *)this + 3163))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1562, 308, 0, 0xFFFFFFFFLL, 8, v166, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 604) = 0;
  int v167 = *(_DWORD *)(*(void *)v448 + 604);
  *(_DWORD *)(*(void *)v448 + 604) = 0;
  *(_DWORD *)(*(void *)v448 + 604) ^= 0x3FFu;
  int v168 = *(_DWORD *)(*(void *)v448 + 604);
  *(_DWORD *)(*(void *)v448 + 604) = v167;
  if (*((void *)this + 1562) || *((_DWORD *)this + 3162) || *((_DWORD *)this + 3163))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1562, 604, 0, 0x3FFFFFFFFFFLL, 32, v168, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 312) = 0;
  *(_DWORD *)(*((void *)this + 33) + 608) = 0;
  uint64_t v169 = *((void *)this + 33);
  int v170 = *(_DWORD *)(v169 + 312);
  *(_DWORD *)(v169 + 312) = 0;
  *(_DWORD *)(*((void *)this + 33) + 312) ^= 0xFFFFFF00;
  uint64_t v171 = *((void *)this + 33);
  int v172 = *(_DWORD *)(v171 + 312);
  *(_DWORD *)(v171 + 312) = v170;
  if (*((void *)this + 1584) || *((_DWORD *)this + 3206) || *((_DWORD *)this + 3207))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1584, 312, 0, 0xFFFFFFFFLL, 8, v172, 4);
    if (result) {
      return result;
    }
  }
  int v173 = *(_DWORD *)(*(void *)v448 + 608);
  *(_DWORD *)(*(void *)v448 + 608) = 0;
  *(_DWORD *)(*(void *)v448 + 608) ^= 0x3FFu;
  int v174 = *(_DWORD *)(*(void *)v448 + 608);
  *(_DWORD *)(*(void *)v448 + 608) = v173;
  if (*((void *)this + 1584) || *((_DWORD *)this + 3206) || *((_DWORD *)this + 3207))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1584, 608, 0, 0x3FFFFFFFFFFLL, 32, v174, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 316) = 0;
  uint64_t v175 = *((void *)this + 33);
  int v176 = *(_DWORD *)(v175 + 316);
  *(_DWORD *)(v175 + 316) = 0;
  *(_DWORD *)(*((void *)this + 33) + 316) ^= 0xFFFFFF00;
  uint64_t v177 = *((void *)this + 33);
  int v178 = *(_DWORD *)(v177 + 316);
  *(_DWORD *)(v177 + 316) = v176;
  if (*((void *)this + 1100) || *((_DWORD *)this + 2238) || *((_DWORD *)this + 2239))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1100, 316, 0, 0xFFFFFFFFLL, 8, v178, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 612) = 0;
  int v179 = *(_DWORD *)(*(void *)v448 + 612);
  *(_DWORD *)(*(void *)v448 + 612) = 0;
  *(_DWORD *)(*(void *)v448 + 612) ^= 0x3FFu;
  int v180 = *(_DWORD *)(*(void *)v448 + 612);
  *(_DWORD *)(*(void *)v448 + 612) = v179;
  if (*((void *)this + 1100) || *((_DWORD *)this + 2238) || *((_DWORD *)this + 2239))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1100, 612, 0, 0x3FFFFFFFFFFLL, 32, v180, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 320) = 0;
  uint64_t v181 = *((void *)this + 33);
  int v182 = *(_DWORD *)(v181 + 320);
  *(_DWORD *)(v181 + 320) = 0;
  *(_DWORD *)(*((void *)this + 33) + 320) ^= 0xFFFFFF00;
  uint64_t v183 = *((void *)this + 33);
  int v184 = *(_DWORD *)(v183 + 320);
  *(_DWORD *)(v183 + 320) = v182;
  uint64_t v185 = (void *)((char *)this + 176 * v442 + 8976);
  if (*v185 || *((_DWORD *)this + 44 * v442 + 2282) || *((_DWORD *)this + 44 * v442 + 2283))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v442 + 1122, 320, 0, 0xFFFFFFFFLL, 8, v184, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 616) = 0;
  int v186 = *(_DWORD *)(*(void *)v448 + 616);
  *(_DWORD *)(*(void *)v448 + 616) = 0;
  *(_DWORD *)(*(void *)v448 + 616) ^= 0x3FFu;
  int v187 = *(_DWORD *)(*(void *)v448 + 616);
  *(_DWORD *)(*(void *)v448 + 616) = v186;
  if (*v185 || *((_DWORD *)this + 44 * v442 + 2282) || *((_DWORD *)this + 44 * v442 + 2283))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v185, 616, 0, 0x3FFFFFFFFFFLL, 32, v187, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 324) = 0;
  uint64_t v188 = *((void *)this + 33);
  int v189 = *(_DWORD *)(v188 + 324);
  *(_DWORD *)(v188 + 324) = 0;
  *(_DWORD *)(*((void *)this + 33) + 324) ^= 0xFFFFFF00;
  uint64_t v190 = *((void *)this + 33);
  int v191 = *(_DWORD *)(v190 + 324);
  *(_DWORD *)(v190 + 324) = v189;
  if (*((void *)this + 1606) || *((_DWORD *)this + 3250) || *((_DWORD *)this + 3251))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1606, 324, 0, 0xFFFFFFFFLL, 8, v191, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 620) = 0;
  int v192 = *(_DWORD *)(*(void *)v448 + 620);
  *(_DWORD *)(*(void *)v448 + 620) = 0;
  *(_DWORD *)(*(void *)v448 + 620) ^= 0x3FFu;
  int v193 = *(_DWORD *)(*(void *)v448 + 620);
  *(_DWORD *)(*(void *)v448 + 620) = v192;
  if (*((void *)this + 1606) || *((_DWORD *)this + 3250) || *((_DWORD *)this + 3251))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1606, 620, 0, 0x3FFFFFFFFFFLL, 32, v193, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 328) = 0;
  uint64_t v194 = *((void *)this + 33);
  int v195 = *(_DWORD *)(v194 + 328);
  *(_DWORD *)(v194 + 328) = 0;
  *(_DWORD *)(*((void *)this + 33) + 328) ^= 0xFFFFFF00;
  uint64_t v196 = *((void *)this + 33);
  int v197 = *(_DWORD *)(v196 + 328);
  *(_DWORD *)(v196 + 328) = v195;
  if (*((void *)this + 1628) || *((_DWORD *)this + 3294) || *((_DWORD *)this + 3295))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1628, 328, 0, 0xFFFFFFFFLL, 8, v197, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 624) = 0;
  int v198 = *(_DWORD *)(*(void *)v448 + 624);
  *(_DWORD *)(*(void *)v448 + 624) = 0;
  *(_DWORD *)(*(void *)v448 + 624) ^= 0x3FFu;
  int v199 = *(_DWORD *)(*(void *)v448 + 624);
  *(_DWORD *)(*(void *)v448 + 624) = v198;
  if (*((void *)this + 1628) || *((_DWORD *)this + 3294) || *((_DWORD *)this + 3295))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1628, 624, 0, 0x3FFFFFFFFFFLL, 32, v199, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 332) = 0;
  *(_DWORD *)(*((void *)this + 33) + 628) = 0;
  *(_DWORD *)(*((void *)this + 33) + 336) = 0;
  *(_DWORD *)(*((void *)this + 33) + 632) = 0;
  *(_DWORD *)(*((void *)this + 33) + 340) = 0;
  *(_DWORD *)(*((void *)this + 33) + 636) = 0;
  *(_DWORD *)(*((void *)this + 33) + 344) = 0;
  *(_DWORD *)(*((void *)this + 33) + 640) = 0;
  uint64_t v200 = *((void *)this + 33);
  if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
  {
    int v201 = *(_DWORD *)(v200 + 336);
    *(_DWORD *)(v200 + 336) = 0;
    *(_DWORD *)(*(void *)v448 + 336) ^= 0xFFFFFF80;
    int v202 = *(_DWORD *)(*(void *)v448 + 336);
    *(_DWORD *)(*(void *)v448 + 336) = v201;
    uint64_t v204 = (void *)(v433 + 8);
    uint64_t v203 = *(void *)(v433 + 8);
    if (v436)
    {
      if (v203 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v433 + 8), 336, *(_DWORD *)(v433 + 68), 0xFFFFFFFFLL, 7, v202, 4);
        if (result) {
          return result;
        }
      }
      int v205 = *(_DWORD *)(*(void *)v448 + 632);
      *(_DWORD *)(*(void *)v448 + 632) = 0;
      *(_DWORD *)(*(void *)v448 + 632) ^= 0x3FFu;
      int v206 = *(_DWORD *)(*(void *)v448 + 632);
      *(_DWORD *)(*(void *)v448 + 632) = v205;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 632, *(_DWORD *)(v433 + 68), 0x3FFFFFFFFFFLL, 32, v206, 4);
        if (result) {
          return result;
        }
      }
      int v207 = *(_DWORD *)(*(void *)v448 + 332);
      *(_DWORD *)(*(void *)v448 + 332) = 0;
      *(_DWORD *)(*(void *)v448 + 332) ^= 0xFFFFFF80;
      int v208 = *(_DWORD *)(*(void *)v448 + 332);
      *(_DWORD *)(*(void *)v448 + 332) = v207;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 332, *(_DWORD *)(v433 + 80), 0xFFFFFFFFLL, 7, v208, 4);
        if (result) {
          return result;
        }
      }
      int v209 = *(_DWORD *)(*(void *)v448 + 628);
      *(_DWORD *)(*(void *)v448 + 628) = 0;
      *(_DWORD *)(*(void *)v448 + 628) ^= 0x3FFu;
      int v210 = *(_DWORD *)(*(void *)v448 + 628);
      *(_DWORD *)(*(void *)v448 + 628) = v209;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 628, *(_DWORD *)(v433 + 80), 0x3FFFFFFFFFFLL, 32, v210, 4);
        if (result) {
          return result;
        }
      }
      if (v440)
      {
        int v211 = *(_DWORD *)(*(void *)v448 + 344);
        *(_DWORD *)(*(void *)v448 + 344) = 0;
        *(_DWORD *)(*(void *)v448 + 344) ^= 0xFFFFFF80;
        int v212 = *(_DWORD *)(*(void *)v448 + 344);
        *(_DWORD *)(*(void *)v448 + 344) = v211;
        if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 344, *(_DWORD *)(v439 + 56), 0xFFFFFFFFLL, 7, v212, 4);
          if (result) {
            return result;
          }
        }
        int v213 = *(_DWORD *)(*(void *)v448 + 640);
        *(_DWORD *)(*(void *)v448 + 640) = 0;
        *(_DWORD *)(*(void *)v448 + 640) ^= 0x3FFu;
        int v214 = *(_DWORD *)(*(void *)v448 + 640);
        *(_DWORD *)(*(void *)v448 + 640) = v213;
        if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 640, *(_DWORD *)(v439 + 56), 0x3FFFFFFFFFFLL, 32, v214, 4);
          if (result) {
            return result;
          }
        }
        int v215 = *(_DWORD *)(*(void *)v448 + 340);
        *(_DWORD *)(*(void *)v448 + 340) = 0;
        *(_DWORD *)(*(void *)v448 + 340) ^= 0xFFFFFF80;
        int v216 = *(_DWORD *)(*(void *)v448 + 340);
        *(_DWORD *)(*(void *)v448 + 340) = v215;
        if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 340, *(_DWORD *)(v439 + 68), 0xFFFFFFFFLL, 7, v216, 4);
          if (result) {
            return result;
          }
        }
        int v217 = *(_DWORD *)(*(void *)v448 + 636);
        *(_DWORD *)(*(void *)v448 + 636) = 0;
        *(_DWORD *)(*(void *)v448 + 636) ^= 0x3FFu;
        int v218 = *(_DWORD *)(*(void *)v448 + 636);
        *(_DWORD *)(*(void *)v448 + 636) = v217;
        if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
        {
          int v219 = (void *)v439;
          int v220 = *(_DWORD *)(v439 + 68);
          uint64_t v221 = this;
LABEL_311:
          int v243 = 636;
LABEL_312:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v221, v219, v243, v220, 0x3FFFFFFFFFFLL, 32, v218, 4);
          if (result) {
            return result;
          }
        }
      }
    }
    else
    {
      if (v203 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v433 + 8), 336, *(_DWORD *)(v433 + 60), 0xFFFFFFFFLL, 7, v202, 4);
        if (result) {
          return result;
        }
      }
      int v244 = *(_DWORD *)(*(void *)v448 + 344);
      *(_DWORD *)(*(void *)v448 + 344) = 0;
      *(_DWORD *)(*(void *)v448 + 344) ^= 0xFFFFFF80;
      int v245 = *(_DWORD *)(*(void *)v448 + 344);
      *(_DWORD *)(*(void *)v448 + 344) = v244;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 344, *(_DWORD *)(v433 + 64), 0xFFFFFFFFLL, 7, v245, 4);
        if (result) {
          return result;
        }
      }
      int v246 = *(_DWORD *)(*(void *)v448 + 332);
      *(_DWORD *)(*(void *)v448 + 332) = 0;
      *(_DWORD *)(*(void *)v448 + 332) ^= 0xFFFFFF80;
      int v247 = *(_DWORD *)(*(void *)v448 + 332);
      *(_DWORD *)(*(void *)v448 + 332) = v246;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 332, *(_DWORD *)(v433 + 72), 0xFFFFFFFFLL, 7, v247, 4);
        if (result) {
          return result;
        }
      }
      int v248 = *(_DWORD *)(*(void *)v448 + 340);
      *(_DWORD *)(*(void *)v448 + 340) = 0;
      *(_DWORD *)(*(void *)v448 + 340) ^= 0xFFFFFF80;
      int v249 = *(_DWORD *)(*(void *)v448 + 340);
      *(_DWORD *)(*(void *)v448 + 340) = v248;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 340, *(_DWORD *)(v433 + 76), 0xFFFFFFFFLL, 7, v249, 4);
        if (result) {
          return result;
        }
      }
      int v250 = *(_DWORD *)(*(void *)v448 + 632);
      *(_DWORD *)(*(void *)v448 + 632) = 0;
      *(_DWORD *)(*(void *)v448 + 632) ^= 0x3FFu;
      int v251 = *(_DWORD *)(*(void *)v448 + 632);
      *(_DWORD *)(*(void *)v448 + 632) = v250;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 632, *(_DWORD *)(v433 + 60), 0x3FFFFFFFFFFLL, 32, v251, 4);
        if (result) {
          return result;
        }
      }
      int v252 = *(_DWORD *)(*(void *)v448 + 640);
      *(_DWORD *)(*(void *)v448 + 640) = 0;
      *(_DWORD *)(*(void *)v448 + 640) ^= 0x3FFu;
      int v253 = *(_DWORD *)(*(void *)v448 + 640);
      *(_DWORD *)(*(void *)v448 + 640) = v252;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 640, *(_DWORD *)(v433 + 64), 0x3FFFFFFFFFFLL, 32, v253, 4);
        if (result) {
          return result;
        }
      }
      int v254 = *(_DWORD *)(*(void *)v448 + 628);
      *(_DWORD *)(*(void *)v448 + 628) = 0;
      *(_DWORD *)(*(void *)v448 + 628) ^= 0x3FFu;
      int v255 = *(_DWORD *)(*(void *)v448 + 628);
      *(_DWORD *)(*(void *)v448 + 628) = v254;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 628, *(_DWORD *)(v433 + 72), 0x3FFFFFFFFFFLL, 32, v255, 4);
        if (result) {
          return result;
        }
      }
      int v256 = *(_DWORD *)(*(void *)v448 + 636);
      *(_DWORD *)(*(void *)v448 + 636) = 0;
      *(_DWORD *)(*(void *)v448 + 636) ^= 0x3FFu;
      int v218 = *(_DWORD *)(*(void *)v448 + 636);
      *(_DWORD *)(*(void *)v448 + 636) = v256;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        int v220 = *(_DWORD *)(v433 + 76);
        uint64_t v221 = this;
        int v219 = (void *)(v433 + 8);
        goto LABEL_311;
      }
    }
  }
  else
  {
    int v222 = *(_DWORD *)(v200 + 332);
    *(_DWORD *)(v200 + 332) = 0;
    *(_DWORD *)(*((void *)this + 33) + 332) ^= 0xFFFFFF80;
    uint64_t v223 = *((void *)this + 33);
    int v224 = *(_DWORD *)(v223 + 332);
    *(_DWORD *)(v223 + 332) = v222;
    uint64_t v225 = (void *)((char *)this + 176 * v442 + 528);
    if (*v225 || *((_DWORD *)this + 44 * v442 + 170) || *((_DWORD *)this + 44 * v442 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v442 + 66, 332, 0, 0xFFFFFFFFLL, 7, v224, 4);
      if (result) {
        return result;
      }
    }
    int v226 = *(_DWORD *)(*(void *)v448 + 628);
    *(_DWORD *)(*(void *)v448 + 628) = 0;
    *(_DWORD *)(*(void *)v448 + 628) ^= 0x3FFu;
    int v227 = *(_DWORD *)(*(void *)v448 + 628);
    *(_DWORD *)(*(void *)v448 + 628) = v226;
    if (*v225 || *((_DWORD *)this + 44 * v442 + 170) || *((_DWORD *)this + 44 * v442 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v225, 628, 0, 0x3FFFFFFFFFFLL, 32, v227, 4);
      if (result) {
        return result;
      }
    }
    int v228 = *(_DWORD *)(*(void *)v448 + 336);
    *(_DWORD *)(*(void *)v448 + 336) = 0;
    *(_DWORD *)(*(void *)v448 + 336) ^= 0xFFFFFF80;
    int v229 = *(_DWORD *)(*(void *)v448 + 336);
    *(_DWORD *)(*(void *)v448 + 336) = v228;
    uint64_t v230 = (void *)(v433 + 8);
    if (*(void *)(v433 + 8) || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v433 + 8), 336, *(_DWORD *)(v433 + 60), 0xFFFFFFFFLL, 7, v229, 4);
      if (result) {
        return result;
      }
    }
    int v231 = *(_DWORD *)(*(void *)v448 + 632);
    *(_DWORD *)(*(void *)v448 + 632) = 0;
    *(_DWORD *)(*(void *)v448 + 632) ^= 0x3FFu;
    int v232 = *(_DWORD *)(*(void *)v448 + 632);
    *(_DWORD *)(*(void *)v448 + 632) = v231;
    if (*v230 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v230, 632, *(_DWORD *)(v433 + 60), 0x3FFFFFFFFFFLL, 32, v232, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v233 = *((void *)this + 33);
    int v234 = *(_DWORD *)(v233 + 340);
    *(_DWORD *)(v233 + 340) = 0;
    *(_DWORD *)(*((void *)this + 33) + 340) ^= 0xFFFFFF80;
    uint64_t v235 = *((void *)this + 33);
    int v236 = *(_DWORD *)(v235 + 340);
    *(_DWORD *)(v235 + 340) = v234;
    int v237 = (void *)((char *)this + 176 * v442 + 3344);
    if (*v237 || *((_DWORD *)this + 44 * v442 + 874) || *((_DWORD *)this + 44 * v442 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v442 + 418, 340, 0, 0xFFFFFFFFLL, 7, v236, 4);
      if (result) {
        return result;
      }
    }
    int v238 = *(_DWORD *)(*(void *)v448 + 636);
    *(_DWORD *)(*(void *)v448 + 636) = 0;
    *(_DWORD *)(*(void *)v448 + 636) ^= 0x3FFu;
    int v239 = *(_DWORD *)(*(void *)v448 + 636);
    *(_DWORD *)(*(void *)v448 + 636) = v238;
    if (*v237 || *((_DWORD *)this + 44 * v442 + 874) || *((_DWORD *)this + 44 * v442 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v237, 636, 0, 0x3FFFFFFFFFFLL, 32, v239, 4);
      if (result) {
        return result;
      }
    }
    int v240 = *(_DWORD *)(*(void *)v448 + 344);
    *(_DWORD *)(*(void *)v448 + 344) = 0;
    *(_DWORD *)(*(void *)v448 + 344) ^= 0xFFFFFF80;
    int v241 = *(_DWORD *)(*(void *)v448 + 344);
    *(_DWORD *)(*(void *)v448 + 344) = v240;
    if (*v230 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v230, 344, *(_DWORD *)(v433 + 64), 0xFFFFFFFFLL, 7, v241, 4);
      if (result) {
        return result;
      }
    }
    int v242 = *(_DWORD *)(*(void *)v448 + 640);
    *(_DWORD *)(*(void *)v448 + 640) = 0;
    *(_DWORD *)(*(void *)v448 + 640) ^= 0x3FFu;
    int v218 = *(_DWORD *)(*(void *)v448 + 640);
    *(_DWORD *)(*(void *)v448 + 640) = v242;
    if (*v230 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
    {
      int v220 = *(_DWORD *)(v433 + 64);
      uint64_t v221 = this;
      int v219 = (void *)(v433 + 8);
      int v243 = 640;
      goto LABEL_312;
    }
  }
  if (*(_DWORD *)(v451 + 88) & 0x2000 | v434)
  {
    *((_DWORD *)this + v442 + 116) = 0;
    *(_DWORD *)(*((void *)this + 33) + 348) = 0;
    if (!v434) {
      goto LABEL_429;
    }
    uint64_t v257 = 0;
    int v258 = (uint64_t *)v465;
    uint64_t v259 = (void **)v464;
    v450 = (void **)v463;
    while (1)
    {
      uint64_t v260 = *v258;
      if (!*v258 || !*(void *)(v260 + 48)) {
        return 0xFFFFFFFFLL;
      }
      int v261 = v446;
      if (v446)
      {
        uint64_t v262 = *(unsigned int *)(v260 + 44);
        *(void *)long long buf = 0;
        if (((*(uint64_t (**)(void, uint64_t, uint8_t *))(**((void **)this + 32) + 304))(*((void *)this + 32), v262, buf) & 1) == 0)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          __int16 v452 = 0;
          uint64_t v53 = &_os_log_internal;
          uint64_t v54 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
          int v135 = (uint8_t *)&v452;
          uint32_t v136 = 2;
          goto LABEL_124;
        }
        *(void *)(v260 + 48) = *(void *)buf + 8;
        int v261 = 0x2000000;
      }
      *(_DWORD *)(*((void *)this + 33) + v257 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 348) = *(_DWORD *)(*((void *)this + 33) + v257 + 348) & 0xFFFFFFF | ((v434 << 28) - 0x10000000);
      *(_DWORD *)(*((void *)this + 33) + v257 + 348) &= 0xF3FFFFFF;
      *(_DWORD *)(*((void *)this + 33) + v257 + 348) = *(_DWORD *)(*((void *)this + 33) + v257 + 348) & 0xFDFFFFFF | v261;
      *(_DWORD *)(*((void *)this + 33) + v257 + 348) |= 0x1000000u;
      int v263 = v435 - *(_DWORD *)(v260 + 12);
      int v264 = v263 & 0x1FFFF;
      if (v263 < -32768) {
        int v264 = 98304;
      }
      if (v263 <= 0x8000) {
        int v265 = v264;
      }
      else {
        int v265 = 0x8000;
      }
      *(_DWORD *)(*((void *)this + 33) + v257 + 348) = *(_DWORD *)(*((void *)this + 33) + v257 + 348) & 0xFFFE0000 | v265;
      *(_DWORD *)(*((void *)this + 33) + v257 + 348) = *(_DWORD *)(*((void *)this + 33) + v257 + 348) & 0xFFFDFFFF | ((*(_DWORD *)(v260 + 20) == 2) << 17);
      *(_DWORD *)(*((void *)this + 33) + v257 + 380) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 644) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 412) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 676) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 444) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 708) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 476) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 740) = 0;
      uint64_t v266 = *((void *)this + 33);
      if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
      {
        int v267 = v257 + 412;
        uint64_t v268 = v266 + v257;
        int v269 = *(_DWORD *)(v268 + 412);
        *(_DWORD *)(v268 + 412) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 412) ^= 0xFFFFFF80;
        uint64_t v270 = *(void *)v448 + v257;
        int v271 = *(_DWORD *)(v270 + 412);
        *(_DWORD *)(v270 + 412) = v269;
        unint64_t v272 = *(uint64_t **)(v260 + 48);
        uint64_t v273 = *v272;
        if (v436)
        {
          if (v273 || *((_DWORD *)v272 + 38) || *((_DWORD *)v272 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v272, v267, *((_DWORD *)v272 + 15), 0xFFFFFFFFLL, 7, v271, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v274 = *(void *)v448 + v257;
          int v275 = *(_DWORD *)(v274 + 676);
          *(_DWORD *)(v274 + 676) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 676) ^= 0x3FFu;
          uint64_t v276 = *(void *)v448 + v257;
          int v277 = *(_DWORD *)(v276 + 676);
          *(_DWORD *)(v276 + 676) = v275;
          uint64_t v278 = *(void *)(v260 + 48);
          if (*(void *)v278 || *(_DWORD *)(v278 + 152) || *(_DWORD *)(v278 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v278, (int)v257 + 676, *(_DWORD *)(v278 + 60), 0x3FFFFFFFFFFLL, 32, v277, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v279 = *(void *)v448 + v257;
          int v280 = *(_DWORD *)(v279 + 380);
          *(_DWORD *)(v279 + 380) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 380) ^= 0xFFFFFF80;
          uint64_t v281 = *(void *)v448 + v257;
          int v282 = *(_DWORD *)(v281 + 380);
          *(_DWORD *)(v281 + 380) = v280;
          uint64_t v283 = *(void *)(v260 + 48);
          if (*(void *)v283 || *(_DWORD *)(v283 + 152) || *(_DWORD *)(v283 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v283, (int)v257 + 380, *(_DWORD *)(v283 + 72), 0xFFFFFFFFLL, 7, v282, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v284 = *(void *)v448 + v257;
          int v285 = *(_DWORD *)(v284 + 644);
          *(_DWORD *)(v284 + 644) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 644) ^= 0x3FFu;
          uint64_t v286 = *(void *)v448 + v257;
          int v287 = *(_DWORD *)(v286 + 644);
          *(_DWORD *)(v286 + 644) = v285;
          uint64_t v288 = *(void *)(v260 + 48);
          if (*(void *)v288 || *(_DWORD *)(v288 + 152) || *(_DWORD *)(v288 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v288, (int)v257 + 644, *(_DWORD *)(v288 + 72), 0x3FFFFFFFFFFLL, 32, v287, 4);
            if (result) {
              return result;
            }
          }
          if (v440)
          {
            uint64_t v289 = *(void *)v448 + v257;
            int v290 = *(_DWORD *)(v289 + 476);
            *(_DWORD *)(v289 + 476) = 0;
            *(_DWORD *)(*(void *)v448 + v257 + 476) ^= 0xFFFFFF80;
            uint64_t v291 = *(void *)v448 + v257;
            int v292 = *(_DWORD *)(v291 + 476);
            *(_DWORD *)(v291 + 476) = v290;
            if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, (int)v257 + 476, *(_DWORD *)(v439 + 56), 0xFFFFFFFFLL, 7, v292, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v293 = *(void *)v448 + v257;
            int v294 = *(_DWORD *)(v293 + 740);
            *(_DWORD *)(v293 + 740) = 0;
            *(_DWORD *)(*(void *)v448 + v257 + 740) ^= 0x3FFu;
            uint64_t v295 = *(void *)v448 + v257;
            int v296 = *(_DWORD *)(v295 + 740);
            *(_DWORD *)(v295 + 740) = v294;
            if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, (int)v257 + 740, *(_DWORD *)(v439 + 56), 0x3FFFFFFFFFFLL, 32, v296, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v297 = *(void *)v448 + v257;
            int v298 = *(_DWORD *)(v297 + 444);
            *(_DWORD *)(v297 + 444) = 0;
            *(_DWORD *)(*(void *)v448 + v257 + 444) ^= 0xFFFFFF80;
            uint64_t v299 = *(void *)v448 + v257;
            int v300 = *(_DWORD *)(v299 + 444);
            *(_DWORD *)(v299 + 444) = v298;
            if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, (int)v257 + 444, *(_DWORD *)(v439 + 68), 0xFFFFFFFFLL, 7, v300, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v301 = *(void *)v448 + v257;
            int v302 = *(_DWORD *)(v301 + 708);
            *(_DWORD *)(v301 + 708) = 0;
            *(_DWORD *)(*(void *)v448 + v257 + 708) ^= 0x3FFu;
            uint64_t v303 = *(void *)v448 + v257;
            int v304 = *(_DWORD *)(v303 + 708);
            *(_DWORD *)(v303 + 708) = v302;
            if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
            {
              int v305 = v257 + 708;
              uint64_t v306 = v439;
LABEL_426:
              int v343 = *(_DWORD *)(v306 + 68);
LABEL_427:
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v306, v305, v343, 0x3FFFFFFFFFFLL, 32, v304, 4);
              if (result) {
                return result;
              }
            }
          }
        }
        else
        {
          if (v273 || *((_DWORD *)v272 + 38) || *((_DWORD *)v272 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v272, v267, *((_DWORD *)v272 + 13), 0xFFFFFFFFLL, 7, v271, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v344 = *(void *)v448 + v257;
          int v345 = *(_DWORD *)(v344 + 476);
          *(_DWORD *)(v344 + 476) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 476) ^= 0xFFFFFF80;
          uint64_t v346 = *(void *)v448 + v257;
          int v347 = *(_DWORD *)(v346 + 476);
          *(_DWORD *)(v346 + 476) = v345;
          uint64_t v348 = *(void *)(v260 + 48);
          if (*(void *)v348 || *(_DWORD *)(v348 + 152) || *(_DWORD *)(v348 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v348, (int)v257 + 476, *(_DWORD *)(v348 + 56), 0xFFFFFFFFLL, 7, v347, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v349 = *(void *)v448 + v257;
          int v350 = *(_DWORD *)(v349 + 380);
          *(_DWORD *)(v349 + 380) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 380) ^= 0xFFFFFF80;
          uint64_t v351 = *(void *)v448 + v257;
          int v352 = *(_DWORD *)(v351 + 380);
          *(_DWORD *)(v351 + 380) = v350;
          uint64_t v353 = *(void *)(v260 + 48);
          if (*(void *)v353 || *(_DWORD *)(v353 + 152) || *(_DWORD *)(v353 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v353, (int)v257 + 380, *(_DWORD *)(v353 + 64), 0xFFFFFFFFLL, 7, v352, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v354 = *(void *)v448 + v257;
          int v355 = *(_DWORD *)(v354 + 444);
          *(_DWORD *)(v354 + 444) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 444) ^= 0xFFFFFF80;
          uint64_t v356 = *(void *)v448 + v257;
          int v357 = *(_DWORD *)(v356 + 444);
          *(_DWORD *)(v356 + 444) = v355;
          uint64_t v358 = *(void *)(v260 + 48);
          if (*(void *)v358 || *(_DWORD *)(v358 + 152) || *(_DWORD *)(v358 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v358, (int)v257 + 444, *(_DWORD *)(v358 + 68), 0xFFFFFFFFLL, 7, v357, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v359 = *(void *)v448 + v257;
          int v360 = *(_DWORD *)(v359 + 676);
          *(_DWORD *)(v359 + 676) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 676) ^= 0x3FFu;
          uint64_t v361 = *(void *)v448 + v257;
          int v362 = *(_DWORD *)(v361 + 676);
          *(_DWORD *)(v361 + 676) = v360;
          uint64_t v363 = *(void *)(v260 + 48);
          if (*(void *)v363 || *(_DWORD *)(v363 + 152) || *(_DWORD *)(v363 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v363, (int)v257 + 676, *(_DWORD *)(v363 + 52), 0x3FFFFFFFFFFLL, 32, v362, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v364 = *(void *)v448 + v257;
          int v365 = *(_DWORD *)(v364 + 740);
          *(_DWORD *)(v364 + 740) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 740) ^= 0x3FFu;
          uint64_t v366 = *(void *)v448 + v257;
          int v367 = *(_DWORD *)(v366 + 740);
          *(_DWORD *)(v366 + 740) = v365;
          uint64_t v368 = *(void *)(v260 + 48);
          if (*(void *)v368 || *(_DWORD *)(v368 + 152) || *(_DWORD *)(v368 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v368, (int)v257 + 740, *(_DWORD *)(v368 + 56), 0x3FFFFFFFFFFLL, 32, v367, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v369 = *(void *)v448 + v257;
          int v370 = *(_DWORD *)(v369 + 644);
          *(_DWORD *)(v369 + 644) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 644) ^= 0x3FFu;
          uint64_t v371 = *(void *)v448 + v257;
          int v372 = *(_DWORD *)(v371 + 644);
          *(_DWORD *)(v371 + 644) = v370;
          uint64_t v373 = *(void *)(v260 + 48);
          if (*(void *)v373 || *(_DWORD *)(v373 + 152) || *(_DWORD *)(v373 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v373, (int)v257 + 644, *(_DWORD *)(v373 + 64), 0x3FFFFFFFFFFLL, 32, v372, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v374 = *(void *)v448 + v257;
          int v375 = *(_DWORD *)(v374 + 708);
          *(_DWORD *)(v374 + 708) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 708) ^= 0x3FFu;
          uint64_t v376 = *(void *)v448 + v257;
          int v304 = *(_DWORD *)(v376 + 708);
          *(_DWORD *)(v376 + 708) = v375;
          uint64_t v306 = *(void *)(v260 + 48);
          if (*(void *)v306 || *(_DWORD *)(v306 + 152) || *(_DWORD *)(v306 + 156))
          {
            int v305 = v257 + 708;
            goto LABEL_426;
          }
        }
      }
      else
      {
        uint64_t v307 = v266 + v257;
        int v308 = *(_DWORD *)(v307 + 380);
        *(_DWORD *)(v307 + 380) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 380) ^= 0xFFFFFF80;
        uint64_t v309 = *(void *)v448 + v257;
        int v310 = *(_DWORD *)(v309 + 380);
        *(_DWORD *)(v309 + 380) = v308;
        uint64_t v311 = (uint64_t)*v259;
        if (**v259 || *(_DWORD *)(v311 + 152) || *(_DWORD *)(v311 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v259, (int)v257 + 380, 0, 0xFFFFFFFFLL, 7, v310, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v312 = *(void *)v448 + v257;
        int v313 = *(_DWORD *)(v312 + 644);
        *(_DWORD *)(v312 + 644) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 644) ^= 0x3FFu;
        uint64_t v314 = *(void *)v448 + v257;
        int v315 = *(_DWORD *)(v314 + 644);
        *(_DWORD *)(v314 + 644) = v313;
        if (*(void *)v311 || *(_DWORD *)(v311 + 152) || *(_DWORD *)(v311 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v311, (int)v257 + 644, 0, 0x3FFFFFFFFFFLL, 32, v315, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v316 = *(void *)v448 + v257;
        int v317 = *(_DWORD *)(v316 + 412);
        *(_DWORD *)(v316 + 412) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 412) ^= 0xFFFFFF80;
        uint64_t v318 = *(void *)v448 + v257;
        int v319 = *(_DWORD *)(v318 + 412);
        *(_DWORD *)(v318 + 412) = v317;
        uint64_t v320 = *(void *)(v260 + 48);
        if (*(void *)v320 || *(_DWORD *)(v320 + 152) || *(_DWORD *)(v320 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v320, (int)v257 + 412, *(_DWORD *)(v320 + 52), 0xFFFFFFFFLL, 7, v319, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v321 = *(void *)v448 + v257;
        int v322 = *(_DWORD *)(v321 + 676);
        *(_DWORD *)(v321 + 676) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 676) ^= 0x3FFu;
        uint64_t v323 = *(void *)v448 + v257;
        int v324 = *(_DWORD *)(v323 + 676);
        *(_DWORD *)(v323 + 676) = v322;
        uint64_t v325 = *(void *)(v260 + 48);
        if (*(void *)v325 || *(_DWORD *)(v325 + 152) || *(_DWORD *)(v325 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v325, (int)v257 + 676, *(_DWORD *)(v325 + 52), 0x3FFFFFFFFFFLL, 32, v324, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v326 = *(void *)v448 + v257;
        int v327 = *(_DWORD *)(v326 + 444);
        *(_DWORD *)(v326 + 444) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 444) ^= 0xFFFFFF80;
        uint64_t v328 = *(void *)v448 + v257;
        int v329 = *(_DWORD *)(v328 + 444);
        *(_DWORD *)(v328 + 444) = v327;
        uint64_t v330 = (uint64_t)*v450;
        if (**v450 || *(_DWORD *)(v330 + 152) || *(_DWORD *)(v330 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v450, (int)v257 + 444, 0, 0xFFFFFFFFLL, 7, v329, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v331 = *(void *)v448 + v257;
        int v332 = *(_DWORD *)(v331 + 708);
        *(_DWORD *)(v331 + 708) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 708) ^= 0x3FFu;
        uint64_t v333 = *(void *)v448 + v257;
        int v334 = *(_DWORD *)(v333 + 708);
        *(_DWORD *)(v333 + 708) = v332;
        if (*(void *)v330 || *(_DWORD *)(v330 + 152) || *(_DWORD *)(v330 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v330, (int)v257 + 708, 0, 0x3FFFFFFFFFFLL, 32, v334, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v335 = *(void *)v448 + v257;
        int v336 = *(_DWORD *)(v335 + 476);
        *(_DWORD *)(v335 + 476) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 476) ^= 0xFFFFFF80;
        uint64_t v337 = *(void *)v448 + v257;
        int v338 = *(_DWORD *)(v337 + 476);
        *(_DWORD *)(v337 + 476) = v336;
        uint64_t v339 = *(void *)(v260 + 48);
        if (*(void *)v339 || *(_DWORD *)(v339 + 152) || *(_DWORD *)(v339 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v339, (int)v257 + 476, *(_DWORD *)(v339 + 56), 0xFFFFFFFFLL, 7, v338, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v340 = *(void *)v448 + v257;
        int v341 = *(_DWORD *)(v340 + 740);
        *(_DWORD *)(v340 + 740) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 740) ^= 0x3FFu;
        uint64_t v342 = *(void *)v448 + v257;
        int v304 = *(_DWORD *)(v342 + 740);
        *(_DWORD *)(v342 + 740) = v341;
        uint64_t v306 = *(void *)(v260 + 48);
        if (*(void *)v306 || *(_DWORD *)(v306 + 152) || *(_DWORD *)(v306 + 156))
        {
          int v305 = v257 + 740;
          int v343 = *(_DWORD *)(v306 + 56);
          goto LABEL_427;
        }
      }
      v257 += 4;
      ++v258;
      ++v259;
      ++v450;
      if (4 * v434 == v257) {
        goto LABEL_429;
      }
    }
  }
  *(_DWORD *)(v451 + 88) |= 0x2000u;
  *((_DWORD *)this + v442 + 116) = 1;
  *(_DWORD *)(*((void *)this + 33) + 348) = 0;
LABEL_429:
  *(_DWORD *)(*(void *)v448 + 508) = 0;
  *(_DWORD *)(*(void *)v448 + 512) = 0;
  *(_DWORD *)(*(void *)v448 + 516) = 0;
  *(_DWORD *)(*(void *)v448 + 520) = 0;
  if (!v447) {
    goto LABEL_487;
  }
  uint64_t v377 = *((void *)this + 32);
  if (v437 && v438 == 2)
  {
    int v378 = *(_DWORD *)(*(void *)(v377 + 8360) + 60);
    uint64_t v379 = *((void *)this + 33);
    int v380 = *(_DWORD *)(v379 + 508);
    *(_DWORD *)(v379 + 508) = 0;
    *(_DWORD *)(*((void *)this + 33) + 508) ^= 0xFFFFFFC0;
    uint64_t v381 = *((void *)this + 33);
    int v382 = *(_DWORD *)(v381 + 508);
    *(_DWORD *)(v381 + 508) = v380;
    uint64_t v383 = *(void *)(*((void *)this + 32) + 8360);
    if (*(void *)v383 || *(_DWORD *)(v383 + 152) || *(_DWORD *)(v383 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v383, 508, v378, 0xFFFFFFFFLL, 6, v382, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v384 = *((void *)this + 33);
    int v385 = *(_DWORD *)(v384 + 772);
    *(_DWORD *)(v384 + 772) = 0;
    *(_DWORD *)(*((void *)this + 33) + 772) ^= 0x3FFu;
    uint64_t v386 = *((void *)this + 33);
    int v387 = *(_DWORD *)(v386 + 772);
    *(_DWORD *)(v386 + 772) = v385;
    uint64_t v388 = *(void *)(*((void *)this + 32) + 8360);
    if (*(void *)v388 || *(_DWORD *)(v388 + 152) || *(_DWORD *)(v388 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v388, 772, v378, 0x3FFFFFFFFFFLL, 32, v387, 4);
      if (result) {
        return result;
      }
    }
    if (v440)
    {
      int v389 = *(_DWORD *)(v439 + 56);
      int v390 = *(_DWORD *)(*(void *)v448 + 512);
      *(_DWORD *)(*(void *)v448 + 512) = 0;
      *(_DWORD *)(*(void *)v448 + 512) ^= 0xFFFFFFC0;
      int v391 = *(_DWORD *)(*(void *)v448 + 512);
      *(_DWORD *)(*(void *)v448 + 512) = v390;
      if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 512, v389, 0xFFFFFFFFLL, 6, v391, 4);
        if (result) {
          return result;
        }
      }
      int v392 = *(_DWORD *)(*(void *)v448 + 776);
      *(_DWORD *)(*(void *)v448 + 776) = 0;
      *(_DWORD *)(*(void *)v448 + 776) ^= 0x3FFu;
      int v393 = *(_DWORD *)(*(void *)v448 + 776);
      *(_DWORD *)(*(void *)v448 + 776) = v392;
      if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 776, v389, 0x3FFFFFFFFFFLL, 32, v393, 4);
        if (result) {
          return result;
        }
      }
    }
    if (v441)
    {
      *(_DWORD *)(*((void *)this + 33) + 516) = *(_DWORD *)(*((void *)this + 33) + 516) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 84) >> 6) & 0xFFF) << 6);
      if (v440)
      {
        uint64_t v394 = v439;
LABEL_485:
        v423 = (_DWORD *)(v394 + 80);
LABEL_486:
        *(_DWORD *)(*(void *)v448 + 520) = *(_DWORD *)(*(void *)v448 + 520) & 0xFFF8003F | (((*v423 >> 6) & 0x1FFF) << 6);
      }
LABEL_487:
      uint64_t v424 = *((void *)this + 32);
      if (*(_DWORD *)(v424 + 2360) != 1) {
        return 0;
      }
      uint64_t v425 = *(void *)v448;
      *(_DWORD *)(*(void *)v448 + 876) = *(_DWORD *)(*(void *)v448 + 876) & 0xFFFFFFFE | *(_DWORD *)(v424 + 2508) & 1;
      if (*(_DWORD *)(v424 + 2508))
      {
        *(_DWORD *)(v425 + 2876) = 0x10000000;
        *(_DWORD *)(v425 + 2880) = *(_DWORD *)(v424 + 2368);
        *(void *)(v425 + 2888) = 0;
        *(_DWORD *)(v425 + 2884) = 0;
        *(_OWORD *)(v425 + 2896) = *(_OWORD *)(v424 + 2372);
        long long v426 = *(_OWORD *)(v424 + 2388);
        *(_OWORD *)(v425 + 2928) = *(_OWORD *)(v424 + 2404);
        *(_OWORD *)(v425 + 2912) = v426;
      }
      *(_DWORD *)(*(void *)v448 + 876) = *(_DWORD *)(*(void *)v448 + 876) & 0xFFFFFFFD | (2
                                                                                                * (*(_DWORD *)(v424 + 2512) & 1));
      if (*(_DWORD *)(v424 + 2512))
      {
        *(_DWORD *)(v425 + 2944) = 0;
        char v427 = *(_DWORD *)(v424 + 2424);
        *(_DWORD *)(v425 + 2944) = (*(_DWORD *)(v424 + 2424) & 1) << 22;
        int v428 = ((*(_DWORD *)(v424 + 2420) & 1) << 23) | ((v427 & 1) << 22) | 0x20000000;
        *(_DWORD *)(v425 + 2944) = v428;
        *(_DWORD *)(v425 + 2944) = v428 | (*(_DWORD *)(v424 + 2364) == 0);
        long long v429 = *(_OWORD *)(v424 + 2428);
        long long v430 = *(_OWORD *)(v424 + 2444);
        *(_OWORD *)(v425 + 2980) = *(_OWORD *)(v424 + 2460);
        *(_OWORD *)(v425 + 2964) = v430;
        *(_OWORD *)(v425 + 2948) = v429;
      }
      *(_DWORD *)(*(void *)v448 + 876) = *(_DWORD *)(*(void *)v448 + 876) & 0xFFFFFFFB | (4
                                                                                                * (*(_DWORD *)(v424 + 2516) & 1));
      *(_DWORD *)(*(void *)v448 + 876) = *(_DWORD *)(*(void *)v448 + 876) & 0xFFFFFFF7 | (8
                                                                                                * (*(_DWORD *)(v424 + 2520) & 1));
      *(_DWORD *)(*(void *)v448 + 876) = *(_DWORD *)(*(void *)v448 + 876) & 0xFFFFFFEF | (16
                                                                                                * (*(_DWORD *)(v424 + 2524) & 1));
      if (!*(_DWORD *)(v424 + 2516)) {
        return 0;
      }
      *(_DWORD *)(v425 + 3000) = 0;
      if (*(_DWORD *)(v424 + 2476) == 2) {
        int v431 = 805306368;
      }
      else {
        int v431 = 813694976;
      }
      *(_DWORD *)(v425 + 3000) = v431;
      memcpy((void *)(v425 + 3004), (const void *)(v424 + 2480), 4 * *(unsigned int *)(v424 + 2476));
      uint64_t result = 0;
      *(_DWORD *)(v424 + 2516) = 0;
      return result;
    }
    if (CAHDecIxoraHevc::getSWRStride(this, *(unsigned __int16 *)(v451 + 160) - *(unsigned __int16 *)(v451 + 156) + 1, *(_DWORD *)(v34 + 23176 * v35 + 3636), *(_DWORD *)(v34 + 23176 * v35 + 3640), *(_DWORD *)(v34 + 23176 * v35 + 22852)))return 0xFFFFFFFFLL; {
    *(_DWORD *)(*((void *)this + 33) + 516) = *(_DWORD *)(*((void *)this + 33) + 516) & 0xFFFC003F | (((*((_DWORD *)this + 3308) >> 6) & 0xFFF) << 6);
    }
    if (!v440) {
      goto LABEL_487;
    }
LABEL_505:
    v423 = (_DWORD *)((char *)this + 13236);
    goto LABEL_486;
  }
  unsigned int v395 = *(unsigned __int8 *)(v377 + 3004);
  if (*(unsigned char *)(v377 + 3004))
  {
    unsigned int v395 = *(_DWORD *)(v377 + 3016);
    unsigned int v396 = *(_DWORD *)(v377 + 3020);
  }
  else
  {
    unsigned int v396 = 0;
  }
  uint64_t v397 = *(void *)(v377 + 8360);
  uint64_t v398 = *(unsigned int *)(v397 + 56);
  unint64_t v399 = *(unsigned int *)(v397 + 52) + (unint64_t)v395;
  uint64_t v400 = *((void *)this + 33);
  int v401 = *(_DWORD *)(v400 + 508);
  *(_DWORD *)(v400 + 508) = 0;
  *(_DWORD *)(*((void *)this + 33) + 508) ^= 0xFFFFFFC0;
  uint64_t v402 = *((void *)this + 33);
  int v403 = *(_DWORD *)(v402 + 508);
  *(_DWORD *)(v402 + 508) = v401;
  uint64_t v404 = *(void *)(*((void *)this + 32) + 8360);
  unint64_t v405 = HIDWORD(v399);
  if (!*(void *)v404 && !*(_DWORD *)(v404 + 152) && !*(_DWORD *)(v404 + 156)) {
    goto LABEL_508;
  }
  if (v405 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "populatePictureRegisters";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1260;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v404, 508, v399, 0xFFFFFFFFLL, 6, v403, 4);
  if (!result)
  {
LABEL_508:
    uint64_t v406 = *((void *)this + 33);
    int v407 = *(_DWORD *)(v406 + 772);
    *(_DWORD *)(v406 + 772) = 0;
    *(_DWORD *)(*((void *)this + 33) + 772) ^= 0x3FFu;
    uint64_t v408 = *((void *)this + 33);
    int v409 = *(_DWORD *)(v408 + 772);
    *(_DWORD *)(v408 + 772) = v407;
    uint64_t v410 = *(void *)(*((void *)this + 32) + 8360);
    if (!*(void *)v410 && !*(_DWORD *)(v410 + 152) && !*(_DWORD *)(v410 + 156)) {
      goto LABEL_509;
    }
    if (v405 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1262;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v410, 772, v399, 0x3FFFFFFFFFFLL, 32, v409, 4);
    if (!result)
    {
LABEL_509:
      unint64_t v411 = v398 + v396;
      uint64_t v412 = *((void *)this + 33);
      int v413 = *(_DWORD *)(v412 + 512);
      *(_DWORD *)(v412 + 512) = 0;
      *(_DWORD *)(*((void *)this + 33) + 512) ^= 0xFFFFFFC0;
      uint64_t v414 = *((void *)this + 33);
      int v415 = *(_DWORD *)(v414 + 512);
      *(_DWORD *)(v414 + 512) = v413;
      uint64_t v416 = *(void *)(*((void *)this + 32) + 8360);
      unint64_t v417 = HIDWORD(v411);
      if (!*(void *)v416 && !*(_DWORD *)(v416 + 152) && !*(_DWORD *)(v416 + 156)) {
        goto LABEL_510;
      }
      if (v417 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1265;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v416, 512, v411, 0xFFFFFFFFLL, 6, v415, 4);
      if (!result)
      {
LABEL_510:
        uint64_t v418 = *((void *)this + 33);
        int v419 = *(_DWORD *)(v418 + 776);
        *(_DWORD *)(v418 + 776) = 0;
        *(_DWORD *)(*((void *)this + 33) + 776) ^= 0x3FFu;
        uint64_t v420 = *((void *)this + 33);
        int v421 = *(_DWORD *)(v420 + 776);
        *(_DWORD *)(v420 + 776) = v419;
        uint64_t v422 = *(void *)(*((void *)this + 32) + 8360);
        if (!*(void *)v422 && !*(_DWORD *)(v422 + 152) && !*(_DWORD *)(v422 + 156)) {
          goto LABEL_483;
        }
        if (v417 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "populatePictureRegisters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1267;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v422, 776, v411, 0x3FFFFFFFFFFLL, 32, v421, 4);
        if (!result)
        {
LABEL_483:
          if (v441)
          {
            *(_DWORD *)(*((void *)this + 33) + 516) = *(_DWORD *)(*((void *)this + 33) + 516) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 76) >> 6) & 0xFFF) << 6);
            uint64_t v394 = *(void *)(*((void *)this + 32) + 8360);
            goto LABEL_485;
          }
          if (CAHDecIxoraHevc::getSWRStride(this, *(unsigned __int16 *)(v451 + 160) - *(unsigned __int16 *)(v451 + 156) + 1, *(_DWORD *)(v34 + 23176 * v35 + 3636), *(_DWORD *)(v34 + 23176 * v35 + 3640), *(_DWORD *)(v34 + 23176 * v35 + 22852)))return 0xFFFFFFFFLL; {
          *(_DWORD *)(*((void *)this + 33) + 516) = *(_DWORD *)(*((void *)this + 33) + 516) & 0xFFFC003F | (((*((_DWORD *)this + 3308) >> 6) & 0xFFF) << 6);
          }
          goto LABEL_505;
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecIxoraHevc::getSWRStride(CAHDecIxoraHevc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1654) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 3308) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 3308) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 3308) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 3308) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3309) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecIxoraHevc::getTileStartCTU(CAHDecIxoraHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 780);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecIxoraHevc::getTileEndCTU(CAHDecIxoraHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 780);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecIxoraHevc::getTileIdxAbove(CAHDecIxoraHevc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 780);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecIxoraHevc::populateAvdWork(CAHDecIxoraHevc *this, unsigned int a2)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 32);
  uint64_t v5 = *((void *)this + 33);
  int v6 = *(_DWORD *)(v4 + 8320);
  int v7 = *(_DWORD *)(v4 + 8324);
  uint64_t v8 = *(void *)(v4 + 8280);
  uint64_t v9 = *(void *)(v4 + 8288);
  uint64_t v109 = *(void *)(v4 + 8296);
  unsigned int v10 = *(_DWORD *)(v4 + 9036);
  unsigned int v11 = *(_DWORD *)(v4 + 3068);
  int v12 = *(_DWORD *)(v4 + 3072);
  memset(v146, 0, sizeof(v146));
  v145[0] = 0;
  v145[1] = 0;
  unsigned int v13 = v10 >> 28;
  uint64_t v14 = v8 + 23176 * v6;
  unsigned int v15 = *(_DWORD *)(v14 + 22888);
  if (v10)
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v16 = v15 > v13 + 1;
    }
    else {
      BOOL v16 = 0;
    }
    BOOL v17 = v16 && v12 == 0;
    int v18 = v17;
    int v134 = v18;
  }
  else
  {
    int v134 = 0;
  }
  unsigned int v126 = *(unsigned __int16 *)(v5 + 782) * *(unsigned __int16 *)(v5 + 780);
  if ((v10 & 2) != 0 && *(unsigned char *)(v9 + 9856 * v7 + 52))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v126 > v13 + 1;
    }
    int v21 = v19 && v12 == 0;
    int v137 = v21;
  }
  else
  {
    int v137 = 0;
  }
  uint64_t v115 = (unsigned int *)(v14 + 22880);
  if ((v10 & 0x20) != 0 && !*(unsigned char *)(v9 + 9856 * v7 + 53))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 52)) {
      BOOL v83 = 0;
    }
    else {
      BOOL v83 = v11 > v13 + 1;
    }
    int v85 = v83 && v12 == 0;
    int v129 = v85;
  }
  else
  {
    int v129 = 0;
  }
  unsigned int v22 = 0;
  unsigned int v139 = *v115;
  unsigned int v23 = v13 + 2;
  BOOL v17 = (v10 & 4) == 0;
  int v24 = v134;
  if (v17) {
    int v24 = 1;
  }
  if (((v24 | v137) & 1) == 0 && (v129 & 1) == 0) {
    unsigned int v22 = *(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & (v13 + 1);
  }
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  memset_pattern16(__b, &unk_223AD0630, 0x10uLL);
  uint64_t v25 = v5 + 223820;
  unsigned int v103 = v134 | v137 | v129;
  if (v103) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = 1;
  }
  unint64_t v27 = v22 + v26;
  uint64_t v120 = v26;
  unsigned int v105 = 0x1000 / v26;
  uint64_t v28 = 48 * (0x1000 / v26);
  uint64_t v29 = v22;
  unint64_t v30 = v22;
  do
  {
    *((void *)v146 + v30) = v25 + (v30 - v22) * v28;
    ++v30;
  }
  while (v30 < v27);
  uint64_t v102 = v28;
  unint64_t v106 = v27;
  uint64_t v31 = *((void *)v146 + v22);
  uint64_t v123 = v5 + 223820;
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v25) >> 4);
  unint64_t v104 = v22;
  if (!a2)
  {
    uint64_t v95 = 0;
    int v96 = 0;
    HIDWORD(v140) = 0;
    unsigned int v43 = v22;
    goto LABEL_165;
  }
  uint64_t v138 = 0;
  unsigned int v117 = 0;
  int v113 = 0;
  int v121 = 0;
  int v132 = 0;
  int v136 = 0;
  unsigned int v33 = v22;
  unsigned int v34 = v15;
  int v35 = 0;
  uint64_t v140 = 0;
  int v130 = 0;
  unsigned int v36 = a2;
  uint64_t v37 = 0;
  int v135 = 0;
  uint64_t v38 = v9 + 9856 * v7;
  unsigned int v39 = (unsigned char *)(v38 + 52);
  int v118 = (unsigned char *)(v38 + 53);
  int v40 = v134;
  if (v134) {
    int v41 = 12;
  }
  else {
    int v41 = 4;
  }
  int v116 = v41;
  unsigned int v122 = v36 - 1;
  unsigned int v111 = v34 - 1;
  unsigned int v112 = v34;
  unsigned int v110 = v34 - 2;
  unsigned int v42 = v120;
  int v108 = &__b[v29];
  unsigned int v101 = v36;
  uint64_t v107 = v36;
  uint64_t v124 = v5 + 3368;
  unsigned int v100 = v33;
  unsigned int v43 = v33;
  int v128 = v39;
  do
  {
    if (*v39) {
      int v44 = 1;
    }
    else {
      int v44 = v40;
    }
    if (v44 != 1)
    {
      unsigned int v47 = 1;
LABEL_54:
      uint64_t v48 = 0;
      int v114 = 0;
      uint64_t v49 = v109 + 2360 * v138;
      uint64_t v119 = (void *)(v49 + 1904);
      int v125 = (int *)(v49 + 36);
      uint64_t v127 = (unsigned char *)(v49 + 32);
      uint64_t v133 = v47;
      while (1)
      {
        if (!(v48 | v138))
        {
          *(_WORD *)(v31 + 4) = 0;
          *(_WORD *)(v31 + 6) = v43;
          *(_DWORD *)(v31 + 8) = 0;
          *(_WORD *)(v31 + 12) = 0;
          int v130 = *(_DWORD *)(v124 + 368 * v138);
          if (!(*(unsigned int (**)(void))(**((void **)this + 32) + 448))()) {
            return 0xFFFFFFFFLL;
          }
          int v54 = *v125;
          *(_DWORD *)(v31 + 32) = *v125;
          *(_DWORD *)(v31 + 36) = v54;
          HIDWORD(v140) = 0;
          *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecIxoraHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v139);
          __int16 v55 = 271;
          goto LABEL_159;
        }
        if (v48)
        {
          int v50 = *(_DWORD *)(*v119 + 4 * v48 - 4) + 1;
          if (*v128)
          {
            if (*v118)
            {
              unsigned int v51 = *v115;
              unsigned int v52 = (v51 + v140) / v51;
              v50 += v114;
              if (v52 >= *(unsigned __int16 *)(*((void *)this + 33) + 2 * (v121 + 1) + 826))
              {
                LODWORD(v140) = (*(uint64_t (**)(CAHDecIxoraHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v139);
                int v114 = 0;
                int v35 = v116;
              }
              else
              {
                LODWORD(v140) = v113 + v52 * v51;
                if (!v134)
                {
                  int v114 = v50;
                  int v40 = 0;
                  goto LABEL_160;
                }
                int v114 = 0;
                int v53 = __b[v43];
                __b[v43] = 0;
                if (v53) {
                  int v35 = 72;
                }
                else {
                  int v35 = 8;
                }
              }
            }
            else
            {
              LODWORD(v140) = (*(uint64_t (**)(CAHDecIxoraHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v139);
              int v35 = 4;
            }
          }
          else if (v134)
          {
            LODWORD(v140) = (*v115 + v140) / *v115 * *v115;
            int v35 = 8;
          }
          int v62 = 48 * v32;
          uint64_t v63 = v142;
          if (*(void *)v142 || *(_DWORD *)(v142 + 152) || *(_DWORD *)(v142 + 156))
          {
            int v64 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1893;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v64 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223842, HIDWORD(v140) + v64, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v63 = v142;
            if (*(void *)v142) {
              goto LABEL_103;
            }
          }
          if (*(_DWORD *)(v63 + 152) || *(_DWORD *)(v63 + 156))
          {
LABEL_103:
            int v65 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1894;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v65 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223844, HIDWORD(v140) + v65, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v50;
          HIDWORD(v140) += v50;
          unsigned int v42 = v120;
          int v40 = v134;
        }
        else
        {
          int v56 = 48 * v32;
          uint64_t v57 = v142;
          if (*(void *)v142 || *(_DWORD *)(v142 + 152) || *(_DWORD *)(v142 + 156))
          {
            int v58 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1817;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v58 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223842, HIDWORD(v140) + v58, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v57 = v142;
            if (*(void *)v142) {
              goto LABEL_76;
            }
          }
          if (*(_DWORD *)(v57 + 152) || *(_DWORD *)(v57 + 156))
          {
LABEL_76:
            int v60 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1818;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v60 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223844, HIDWORD(v140) + v60, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v130 - HIDWORD(v140);
          int v61 = *(_DWORD *)(v124 + 368 * v138);
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t *))(**((void **)this + 32) + 448))(*((void *)this + 32), v138, &v142, &v141))return 0xFFFFFFFFLL; {
          int v130 = v61;
          }
          if (*v127) {
            int v35 = 2;
          }
          else {
            int v35 = 258;
          }
          int v40 = v134;
          LODWORD(v140) = *v125;
          if (v134 && *v125 % v139 == v113)
          {
            HIDWORD(v140) = 0;
            if (__b[v43])
            {
              v35 |= 0x48u;
              __b[v43] = 0;
            }
            else
            {
              v35 |= 8u;
            }
          }
          else
          {
            HIDWORD(v140) = 0;
          }
        }
        unsigned int v66 = v37 + 1;
        if ((int)v37 + 1 < v126)
        {
          int v67 = (*(uint64_t (**)(CAHDecIxoraHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v139);
          int v68 = v116;
          if (v140 != v67) {
            int v68 = 0;
          }
          v35 |= v68;
        }
        *(_WORD *)(v31 + 16) = v35;
        if (v135 == v122) {
          *(_WORD *)(v31 + 18) |= 2u;
        }
        if (v37 == v126 - 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        int v69 = v137;
        if (v37 != v126 - 2) {
          int v69 = 0;
        }
        if (v69 == 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        if (v40
          && ((v70 = *(unsigned __int16 *)(v31 + 10), v112 > 1) ? (BOOL v71 = v110 == v70) : (BOOL v71 = 0),
              !v71 ? (int v72 = 0) : (int v72 = 1),
              v111 == v70 || v72))
        {
          *(_WORD *)(v31 + 18) |= 8u;
          if ((v35 & 4) != 0)
          {
LABEL_132:
            if (*v128 && *v118)
            {
              uint64_t v73 = *((void *)this + 33);
              unsigned int v74 = *(unsigned __int16 *)(v73 + 780);
              unsigned int v117 = (v43
                    - *(unsigned __int16 *)(v73 + 826 + 2 * (v66 / v74))
                    + *(unsigned __int16 *)(v73 + 826 + 2 * (v66 / v74 + 1)))
                   % v42;
              int v121 = v66 / v74;
              int v113 = *(unsigned __int16 *)(v73 + 780 + 2 * (v66 % v74) + 4);
              memset_pattern16(v108, &unk_223AD0630, 4 * (v120 - 1) + 4);
            }
            uint64_t v37 = (v37 + 1);
          }
        }
        else if ((v35 & 4) != 0)
        {
          goto LABEL_132;
        }
        if ((v35 & 0x44) != 0)
        {
          int v75 = (*(uint64_t (**)(CAHDecIxoraHevc *, uint64_t))(*(void *)this + 80))(this, v37);
          unsigned int v76 = v136;
          if (v136 <= v75) {
            v35 |= 0x20u;
          }
        }
        else
        {
          unsigned int v76 = v136;
        }
        if (!v48)
        {
          if (!*v127) {
            unsigned int v76 = v37;
          }
          int v77 = v132;
          if (!*v127) {
            int v77 = v140;
          }
          int v132 = v77;
        }
        if ((v35 & 0x44) != 0)
        {
          unsigned int v78 = *(unsigned __int16 *)(*((void *)this + 33) + 780);
          if (v76 / v78 + 1 == v37 / v78) {
            v35 |= 0x10u;
          }
        }
        ++*((_DWORD *)v145 + v43);
        *((void *)v146 + v43) += 48;
        unsigned int v79 = v140 / v139;
        if (v40) {
          unsigned int v43 = (v79 - v121 + v117) % v42;
        }
        if (v137) {
          unsigned int v43 = v37 % v42;
        }
        char v80 = v129 ^ 1;
        if (v48) {
          char v80 = 1;
        }
        int v136 = v76;
        if ((v80 & 1) == 0 && !*v127) {
          unsigned int v43 = (v43 + 1) % v42;
        }
        uint64_t v31 = *((void *)v146 + v43);
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v123) >> 4);
        *(_WORD *)(v31 + 4) = *((_DWORD *)v145 + v43);
        *(_WORD *)(v31 + 6) = v43;
        *(_WORD *)(v31 + 8) = v138;
        *(_WORD *)(v31 + 10) = v79;
        *(_WORD *)(v31 + 12) = v37;
        *(_DWORD *)(v31 + 32) = v140;
        *(_DWORD *)(v31 + 36) = v132;
        *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecIxoraHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v139);
        __int16 v55 = v35;
        int v135 = v138;
LABEL_159:
        *(_WORD *)(v31 + 14) = v55;
LABEL_160:
        if (v133 == ++v48) {
          goto LABEL_51;
        }
      }
    }
    int v45 = *(_DWORD *)(v109 + 2360 * v138 + 1896);
    BOOL v46 = __CFADD__(v45, 1);
    unsigned int v47 = v45 + 1;
    if (!v46) {
      goto LABEL_54;
    }
LABEL_51:
    ++v138;
    unsigned int v39 = v128;
  }
  while (v138 != v107);
  uint64_t v95 = v142;
  unsigned int v22 = v100;
  a2 = v101;
  int v96 = v130;
LABEL_165:
  int v131 = v96;
  int v81 = 48 * v32;
  if (!*(void *)v95 && !*(_DWORD *)(v95 + 152) && !*(_DWORD *)(v95 + 156))
  {
LABEL_185:
    if (*(_DWORD *)(v95 + 152) || *(_DWORD *)(v95 + 156)) {
      goto LABEL_187;
    }
    goto LABEL_191;
  }
  int v82 = v141;
  if ((v141 + (unint64_t)HIDWORD(v140)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "populateAvdWork";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 1988;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
    int v82 = v141;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223842, HIDWORD(v140) + v82, 0x3FFFFFFFFFFLL, 32, -1, 2);
  if (!result)
  {
    uint64_t v95 = v142;
    if (!*(void *)v142) {
      goto LABEL_185;
    }
LABEL_187:
    int v86 = v141;
    if ((v141 + (unint64_t)HIDWORD(v140)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "populateAvdWork";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = 1989;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
      int v86 = v141;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223844, HIDWORD(v140) + v86, 0xFFFFFFFFLL, 0, -1, 4);
    if (!result)
    {
LABEL_191:
      *(_DWORD *)(v31 + 28) = v131 - HIDWORD(v140);
      *(_DWORD *)(v31 + 16) = 917519;
      ++*((_DWORD *)v145 + v43);
      unint64_t v87 = v104;
      if (v129)
      {
        uint64_t v88 = 0;
        memset(buf, 0, sizeof(buf));
        do
        {
          buf[v88] = v123 + v88 * v102;
          ++v88;
        }
        while (v120 != v88);
        uint64_t v89 = buf[0];
        unsigned int v90 = *(unsigned __int16 *)(buf[0] + 8) + 1;
        uint64_t v91 = v103;
        uint64_t v92 = 0;
        if (v90 >= a2)
        {
          unsigned int v94 = buf;
        }
        else
        {
          uint64_t v93 = 0;
          unsigned int v94 = buf;
          do
          {
            if (*(unsigned __int16 *)(v89 + 4) + 1 == *((_DWORD *)v145 + v92))
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 40) = *(_DWORD *)(buf[v91] + 36);
            }
            else if (v90 == *(unsigned __int16 *)(v89 + 56))
            {
              *unsigned int v94 = v89 + 48;
              uint64_t v92 = v93;
              uint64_t v91 = v93;
            }
            else
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 40) = *(_DWORD *)(buf[v91] + 36);
              *unsigned int v94 = v89 + 48;
            }
            uint64_t v93 = v91;
            uint64_t v91 = ((int)v91 + 1) % v120;
            unsigned int v94 = &buf[v92];
            uint64_t v89 = *v94;
            unsigned int v90 = *(unsigned __int16 *)(*v94 + 8) + 1;
          }
          while (v90 < a2);
        }
        int v97 = *((_DWORD *)v145 + v92);
        if (*(unsigned __int16 *)(v89 + 4) + 1 != v97)
        {
          do
          {
            int v98 = *(unsigned __int16 *)(v89 + 52);
            v89 += 48;
          }
          while (v98 + 1 != v97);
          *unsigned int v94 = v89;
        }
        *(_DWORD *)(v89 + 40) = *(_DWORD *)(v89 + 44) + 1;
      }
      uint64_t v99 = *((void *)this + 33) + 36;
      do
      {
        *(_WORD *)(v99 + 2 * v87 - 8) = *((_DWORD *)v145 + v87);
        *(_DWORD *)(v99 + 4 * v87) = 48 * (v87 - v22) * v105 + 223820;
        ++v87;
      }
      while (v87 < v106);
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecIxoraHevc::allocWorkBuf_SPS(CAHDecIxoraHevc *this, _DWORD *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 5718;
  int v5 = a2[902];
  int v6 = a2[903];
  int v7 = a2[900];
  if (v5 < (*(unsigned int (**)(CAHDecIxoraHevc *))(*(void *)this + 96))(this)
    || (unsigned int v8 = a2[903], v8 < (*(unsigned int (**)(CAHDecIxoraHevc *))(*(void *)this + 104))(this))
    || (unsigned int v9 = a2[909], v9 > (*(unsigned int (**)(CAHDecIxoraHevc *))(*(void *)this + 112))(this) - 8)
    || (unsigned int v10 = a2[910], v10 > (*(unsigned int (**)(CAHDecIxoraHevc *))(*(void *)this + 120))(this) - 8)
    || (unsigned int v17 = *v4, v18 = *v4 - 16, v18 > 0x30)
    || ((1 << v18) & 0x1000000010001) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = a2[902];
      int v12 = a2[903];
      int v13 = a2[909];
      int v14 = a2[910];
      unsigned int v15 = *v4;
      int v49 = 136316418;
      int v50 = "allocWorkBuf_SPS";
      __int16 v51 = 1024;
      int v52 = v11;
      __int16 v53 = 1024;
      *(_DWORD *)int v54 = v12;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v13;
      __int16 v55 = 1024;
      int v56 = v14;
      __int16 v57 = 1024;
      unsigned int v58 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported bit stream w %d h %d bd %d %d CtbSizeY %d\n", (uint8_t *)&v49, 0x2Au);
    }
    return 0xFFFFFFFFLL;
  }
  int v19 = v5 + 31;
  if (v5 < -31) {
    int v19 = v5 + 62;
  }
  unsigned int v20 = v19 >> 5;
  int v21 = v6 + 31;
  if (v6 < -31) {
    int v21 = v6 + 62;
  }
  unsigned int v22 = v21 >> 5;
  unsigned int v23 = 32 - __clz(v20 - 1);
  if (v20 >= 2) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  unsigned int v25 = 32 - __clz(v22 - 1);
  if (v22 >= 2) {
    char v26 = v25;
  }
  else {
    char v26 = 0;
  }
  unsigned int v27 = ((32 << (v26 + v24)) + 127) & 0xFFFFFF80;
  if (v7)
  {
    int v28 = v5 << (v7 == 3);
    int v29 = v28 + 31;
    int v30 = v28 + 62;
    if (v29 >= 0) {
      int v30 = v29;
    }
    unsigned int v31 = v30 >> 5;
    if (v7 == 1) {
      int v32 = v6 + 1;
    }
    else {
      int v32 = v6;
    }
    int v33 = v32 >> (v7 == 1);
    int v35 = v33 + 15;
    BOOL v34 = v33 < -15;
    int v36 = v33 + 30;
    if (!v34) {
      int v36 = v35;
    }
    unsigned int v37 = v36 >> 4;
    if (v31 > 1)
    {
      unsigned int v38 = 32 - __clz(v31 - 1);
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v37 = 0;
  }
  LOBYTE(v38) = 0;
LABEL_32:
  unsigned int v39 = 32 - __clz(v37 - 1);
  if (v37 >= 2) {
    char v40 = v39;
  }
  else {
    char v40 = 0;
  }
  unsigned int v41 = ((8 << (v40 + v38)) + 127) & 0xFFFFFF80;
  if (!v7) {
    unsigned int v41 = 0;
  }
  *((_DWORD *)this + 3300) = v27;
  *((_DWORD *)this + 3301) = v41;
  *((void *)this + 1651) = 0;
  unsigned int v42 = (v17 & 0xFFFFFFF0) * (v17 >> 4) * v4[2];
  *((_DWORD *)this + 3306) = v42;
  *((_DWORD *)this + 3305) = v4[4] * v42;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_44:
    uint64_t v46 = 0;
    while (1)
    {
      uint64_t v47 = *((unsigned int *)this + 3305);
      if (v47)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecIxoraHevc *)((char *)this + v46 + 8976), v47, 7, 1, 0))break; {
      }
        }
      uint64_t result = 0;
      v46 += 176;
      if (v46 == 2816) {
        return result;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2255;
    __int16 v53 = 2080;
    *(void *)int v54 = "MvColo";
    uint64_t v48 = &_os_log_internal;
  }
  else
  {
    uint64_t v43 = 528;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 3300);
      if (v44
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecIxoraHevc *)((char *)this + v43), v44, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_56;
        }
        int v49 = 136315650;
        int v50 = "allocWorkBuf_SPS";
        __int16 v51 = 1024;
        int v52 = 2246;
        __int16 v53 = 2080;
        *(void *)int v54 = "HdrY";
        uint64_t v48 = &_os_log_internal;
        goto LABEL_55;
      }
      uint64_t v45 = *((unsigned int *)this + 3301);
      if (v45)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecIxoraHevc *)((char *)this + v43 + 2816), v45, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 3344) {
        goto LABEL_44;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2247;
    __int16 v53 = 2080;
    *(void *)int v54 = "HdrC";
    uint64_t v48 = &_os_log_internal;
  }
LABEL_55:
  _os_log_impl(&dword_223977000, v48, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v49, 0x1Cu);
LABEL_56:
  (*(void (**)(CAHDecIxoraHevc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecIxoraHevc::allocWorkBuf_PPS(CAHDecIxoraHevc *this, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  unsigned int v4 = (a2[909] + 9) & 0xFFFFFFFE;
  unsigned int v5 = (a2[910] + 9) & 0xFFFFFFFE;
  if (v4 <= v5) {
    unsigned int v6 = (a2[910] + 9) & 0xFFFFFFFE;
  }
  else {
    unsigned int v6 = (a2[909] + 9) & 0xFFFFFFFE;
  }
  int v7 = a2[900];
  if (v6 == 10) {
    int v8 = 40;
  }
  else {
    int v8 = 48;
  }
  if (v6 == 8) {
    int v8 = 32;
  }
  char v9 = v7 != 3;
  if (*((unsigned char *)a3 + 52))
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = a2[1106] + a2[1105];
    uint64_t v16 = a3[14];
    int v17 = a2[5718];
    unsigned int v18 = a2[902];
    do
    {
      int v19 = a3[v10 + 17] + 1;
      int v20 = v19 * v17;
      if (v19 * v17 + v13 > v18) {
        int v20 = v18 - v13;
      }
      if (v11 <= v20) {
        int v11 = v20;
      }
      if (v7)
      {
        unsigned int v21 = (v19 << v15) >> v9;
        if (v16 == v10) {
          unsigned int v21 = (((v18 >> 3) - (v14 << v15)) >> v9) + 1;
        }
        v12 += ((v21 + 2 * (v10 != 0)) * v8 + 127) & 0xFFFFFF80;
      }
      v13 += v20;
      v14 += v19;
      ++v10;
    }
    while (v16 + 1 != v10);
  }
  else
  {
    unsigned int v18 = a2[902];
    int v22 = (v8 + v8 * (v18 >> 3 >> v9) + 127) & 0x7FFFFF80;
    if (v7) {
      int v12 = v22;
    }
    else {
      int v12 = 0;
    }
    int v11 = a2[902];
  }
  signed int v23 = 0;
  uint64_t v24 = *((void *)this + 32);
  if (v11 >= -15) {
    int v25 = v11 + 15;
  }
  else {
    int v25 = v11 + 30;
  }
  int v26 = a3[14];
  if (*((unsigned char *)a3 + 52)) {
    int v27 = a3[14];
  }
  else {
    int v27 = 0;
  }
  int v65 = v27;
  if (v7 == 3) {
    int v28 = 48;
  }
  else {
    int v28 = 32;
  }
  if (v7 == 3) {
    int v29 = 176;
  }
  else {
    int v29 = 128;
  }
  if (!v7) {
    int v28 = 16;
  }
  unsigned int v30 = (v28 * v6) >> 3;
  if (!v7) {
    int v29 = 80;
  }
  int v63 = v25;
  int v64 = v29;
  int v31 = v25 >> 4;
  int v32 = (v25 >> 4) * v30;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  if (*((unsigned char *)a3 + 52) && v26)
  {
    uint64_t v36 = 0;
    int v37 = 0;
    unsigned int v35 = 0;
    unsigned int v34 = 0;
    unsigned int v33 = 0;
    if (v7 == 1) {
      int v38 = 8;
    }
    else {
      int v38 = 16;
    }
    if (!v7) {
      int v38 = 0;
    }
    unsigned int v39 = ((((6 * v38 + 96) * v6) >> 3) + 7) & 0x3FFFFFF8;
    int v40 = v38 + 16;
    unsigned int v41 = a2[903];
    signed int v42 = v4 - 8;
    signed int v43 = v5 - 8;
    if (v42 <= v43) {
      signed int v44 = v43;
    }
    else {
      signed int v44 = v42;
    }
    uint64_t v45 = a3[15];
    int v46 = a2[5718];
    BOOL v48 = *(_DWORD *)(v24 + 2644) == 1 && v44 != 0;
    int v49 = (char *)(a3 + 37);
    do
    {
      int v50 = v46 + v46 * *(_DWORD *)&v49[4 * v36];
      if (v50 + v37 > v41) {
        int v50 = v41 - v37;
      }
      int v51 = v50 + 15;
      if (v50 < -15) {
        int v51 = v50 + 30;
      }
      if (v36) {
        int v52 = (v51 >> 4) + 1;
      }
      else {
        int v52 = v51 >> 4;
      }
      unsigned int v53 = v52 * v39;
      if (v33 <= v53) {
        unsigned int v33 = v53;
      }
      unsigned int v54 = 36 * (v51 >> 4);
      if (v34 <= v54) {
        unsigned int v34 = v54;
      }
      if (v48)
      {
        if (v45 == v36) {
          int v55 = 23;
        }
        else {
          int v55 = 15;
        }
        unsigned int v56 = ((v55 + v50) / 16 * v40) | 6;
        if (v35 <= v56) {
          unsigned int v35 = v56;
        }
      }
      v37 += v50;
      ++v36;
    }
    while (v45 + 1 != v36);
    signed int v23 = (((3 * v6) & 0x7FFFFF) << 6) + (((v41 + 7) >> 3) + 2) * ((((v6 >> 1) & 0x1FFFFF) << 8) | 8);
  }
  if (v32 && CAVDDecoder::allocAVDMem(v24, (_OWORD *)this + 737, v32, 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2425;
      __int16 v71 = 2080;
      int v72 = "IpAbove";
      unsigned int v58 = &_os_log_internal;
LABEL_113:
      _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", buf, 0x1Cu);
      goto LABEL_114;
    }
    goto LABEL_114;
  }
  if ((v11 + 30) >= 0x1F
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 550, 4 * (4 * v31 + (v63 >> 4)), 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2426;
      __int16 v71 = 2080;
      int v72 = "MvAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
LABEL_114:
    (*(void (**)(CAHDecIxoraHevc *, void))(*(void *)v57 + 152))(v57, 0);
    return 0xFFFFFFFFLL;
  }
  int v59 = v65 + ((v18 + 15) >> 4);
  signed int v60 = v59 * ((((v64 * v6) >> 3) + 7) & 0x3FFFFFF8) + (v26 << 7);
  if (v60 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 748, v60, 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2427;
      __int16 v71 = 2080;
      int v72 = "LfAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  int v61 = 36 * v59 + (v26 << 7);
  __int16 v57 = this;
  if (v61 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 759, v61, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2428;
      __int16 v71 = 2080;
      int v72 = "LfAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v33 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 770, (int)v33, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2429;
      __int16 v71 = 2080;
      int v72 = "LfLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v34 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 781, (int)v34, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2430;
      __int16 v71 = 2080;
      int v72 = "LfLeftInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v35 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 792, (int)v35, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2431;
      __int16 v71 = 2080;
      int v72 = "SwLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v12 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 803, v12, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2432;
      __int16 v71 = 2080;
      int v72 = "AZAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (!v23) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 814, v23, 7, 1, 0);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2433;
      __int16 v71 = 2080;
      int v72 = "AZLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  return result;
}

uint64_t CAHDecIxoraHevc::freeWorkBuf_SPS(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(_DWORD *)(*(void *)(this + 256) + 2648))
  {
    for (uint64_t i = 528; i != 3344; i += 176)
    {
      BOOL v3 = (void *)(v1 + i);
      if (*(void *)(v1 + i))
      {
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v1 + i));
        void *v3 = 0;
      }
      if (v3[352])
      {
        unsigned int v4 = v3 + 352;
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), v4);
        *unsigned int v4 = 0;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1 + 8976;
  do
  {
    if (*(void *)(v6 + v5))
    {
      this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v6 + v5));
      *(void *)(v6 + v5) = 0;
    }
    v5 += 176;
  }
  while (v5 != 2816);
  return this;
}

uint64_t *CAHDecIxoraHevc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  unsigned int v2 = this;
  if (this[1474])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1474);
    v2[1474] = 0;
  }
  if (v2[1100])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1100);
    v2[1100] = 0;
  }
  if (v2[1496])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1496);
    v2[1496] = 0;
  }
  if (v2[1518])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1518);
    v2[1518] = 0;
  }
  if (v2[1540])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1540);
    v2[1540] = 0;
  }
  if (v2[1562])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1562);
    v2[1562] = 0;
  }
  if (v2[1584])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1584);
    v2[1584] = 0;
  }
  if (v2[1606])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1606);
    v2[1606] = 0;
  }
  if (v2[1628])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1628);
    v2[1628] = 0;
  }
  return this;
}

uint64_t CAHDecIxoraHevc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 6160;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 13216) = a2;
  return this;
}

uint64_t CAHDecIxoraHevc::decodeBuffer(CAHDecIxoraHevc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecIxoraHevc::decodeBufferSize(CAHDecIxoraHevc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecIxoraHevc::decHdrYLinAddr(CAHDecIxoraHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 66);
}

uint64_t CAHDecIxoraHevc::decHdrCLinAddr(CAHDecIxoraHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 418);
}

uint64_t CAHDecIxoraHevc::decHdrYSize(CAHDecIxoraHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 143);
}

uint64_t CAHDecIxoraHevc::decHdrCSize(CAHDecIxoraHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 847);
}

uint64_t CAHDecIxoraHevc::decHdrYStride(CAHDecIxoraHevc *this)
{
  return *((unsigned int *)this + 3302);
}

uint64_t CAHDecIxoraHevc::decHdrCStride(CAHDecIxoraHevc *this)
{
  return *((unsigned int *)this + 3303);
}

CAHDecDaisyAvc *createDaisyAvcDecoder(CAVDAvcDecoder *a1)
{
  uint64_t v2 = (CAHDecDaisyAvc *)operator new(0x36A0uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecDaisyAvc::CAHDecDaisyAvc(v2, a1);
  }
  return v3;
}

void sub_223A1E1C8(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecDaisyAvc::CAHDecDaisyAvc(CAHDecDaisyAvc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D7414C8;
  *(_DWORD *)(v1 + 456) = 956 * *(unsigned __int16 *)(*(void *)(v1 + 256) + 7500) + 182448;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecDaisyAvc::CAHDecDaisyAvc(CAHDecDaisyAvc *this, CAVDAvcDecoder *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D7414C8;
  *(void *)(v4 + 256) = a2;
  uint64_t v5 = 956 * *((unsigned __int16 *)a2 + 3750) + 182448;
  *(_DWORD *)(v4 + 456) = v5;
  *(_DWORD *)(v4 + 8) = 2224;
  *(_OWORD *)(v4 + 16) = xmmword_223AD04F0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), v5, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      int v8 = "CAHDecDaisyAvc";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v7, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v6 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v6;
    *((void *)this + 34) = v6;
    *((_OWORD *)this + 863) = 0u;
    *((_OWORD *)this + 864) = 0u;
    *((_OWORD *)this + 865) = 0u;
    *((_OWORD *)this + 866) = 0u;
    *((_OWORD *)this + 867) = 0u;
    *((_OWORD *)this + 868) = 0u;
    *((_OWORD *)this + 869) = 0u;
    *((_OWORD *)this + 870) = 0u;
    *((_OWORD *)this + 871) = 0u;
    *((_OWORD *)this + 872) = 0u;
    *((_OWORD *)this + 873) = 0u;
    bzero((char *)this + 560, 0x3390uLL);
  }
}

void sub_223A1E3D0(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecDaisyAvc::~CAHDecDaisyAvc(CAHDecDaisyAvc *this)
{
  *(void *)this = &unk_26D7414C8;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecDaisyAvc::~CAHDecDaisyAvc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecDaisyAvc::initPicture(CAHDecDaisyAvc *this, int a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v5 = 956 * *(unsigned __int16 *)(*((void *)this + 32) + 7500) + 182448;
  *((_DWORD *)this + 114) = v5;
  *((_DWORD *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v6;
  if (v6)
  {
    bzero(v6, v5);
    uint64_t v8 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v8 + 16) = a2;
    *(_WORD *)(v8 + 24) = 257;
    *(_WORD *)(v8 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 3447) = 0;
    *((void *)this + 1731) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "initPicture";
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v10, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecDaisyAvc::populateSlices(CAHDecDaisyAvc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2224;
    uint64_t v5 = a2;
    do
    {
      CAHDecDaisyAvc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 956;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecDaisyAvc::populateSliceRegisters(uint64_t a1, uint64_t a2, signed int a3)
{
  char v6 = 0;
  uint64_t v123 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 256);
  int v8 = *(_DWORD *)(v7 + 3616);
  uint64_t v9 = *(void *)(v7 + 3304);
  uint64_t v110 = *(void *)(v7 + 3296);
  int v111 = *(_DWORD *)(v7 + 3612);
  uint64_t v10 = *(void *)(v7 + 3312);
  uint64_t v11 = *(unsigned int *)(v7 + 7064);
  uint64_t v12 = *(void *)(v7 + 3320);
  *(_DWORD *)(a2 + 4) = 0;
  uint64_t v14 = v10 + 1848 * a3;
  int v15 = 32 * (*(unsigned char *)(v14 + 1424) & 3);
  *(_DWORD *)(a2 + 4) = v15;
  int v17 = *(unsigned __int8 *)(v14 + 24);
  uint64_t v16 = (unsigned char *)(v14 + 24);
  if (v17 != 2) {
    char v6 = *(unsigned char *)(v10 + 1848 * a3 + 63);
  }
  unsigned int v18 = v15 & 0xFFFF87FF | ((v6 & 0xF) << 11);
  *(_DWORD *)(a2 + 4) = v18;
  if (*v16 == 1) {
    char v19 = *(unsigned char *)(v10 + 1848 * a3 + 64);
  }
  else {
    char v19 = 0;
  }
  int v20 = ((v19 & 0xF) << 7) | v18;
  *(_DWORD *)(a2 + 4) = v20;
  if (*v16 == 1 && !*(unsigned char *)(v10 + 1848 * a3 + 61)) {
    int v21 = 0x8000;
  }
  else {
    int v21 = 0;
  }
  uint64_t v112 = v9;
  int v113 = v8;
  int v22 = v21 | v20;
  *(_DWORD *)(a2 + 4) = v22;
  if (*v16) {
    int v23 = 0x20000;
  }
  else {
    int v23 = 0x10000;
  }
  if (*v16 == 1) {
    int v24 = 0;
  }
  else {
    int v24 = v23;
  }
  *(_DWORD *)(a2 + 4) = v24 | v22;
  if (*v16 != 1) {
    goto LABEL_20;
  }
  uint64_t v25 = v12 + 13040 * a3 + 7224;
  uint64_t v26 = v10 + 1848 * a3;
  *(void *)(v26 + 1832) = v25;
  if (*(unsigned char *)(v12 + 13040 * a3 + 7227)
    || (uint64_t v27 = *(unsigned int *)(v12 + 13040 * a3 + 7256), *(_DWORD *)(a1 + 4 * v27 + 464)))
  {
    int v28 = 16;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 13788))
    {
      *(void *)(a1 + 13848) = *(void *)(v12 + 13040 * a3 + 7264);
      *(_DWORD *)(a1 + 13840) = v27;
      *(_DWORD *)(a1 + 13788) = 1;
      *(_DWORD *)(a2 + 4) |= 0x40000u;
      uint64_t v25 = *(void *)(v26 + 1832);
      if (!v25 || !*(_DWORD *)(a1 + 13788)) {
        goto LABEL_20;
      }
    }
    uint64_t v107 = *(void *)(v25 + 40);
    if (v107 == *(void *)(a1 + 13848)) {
      goto LABEL_20;
    }
    *(void *)(a1 + 13848) = v107;
    *(_DWORD *)(a1 + 13840) = *(_DWORD *)(v25 + 32);
    int v28 = 0x40000;
  }
  *(_DWORD *)(a2 + 4) |= v28;
LABEL_20:
  uint64_t v116 = v12;
  *(_DWORD *)(a2 + 920) = 0;
  *(_DWORD *)(a2 + 952) = 0;
  uint64_t v115 = v16;
  if (*v16 == 1 && (*(unsigned char *)(a2 + 6) & 4) != 0)
  {
    int v41 = *(_DWORD *)(*(void *)(v10 + 1848 * a3 + 1832) + 32);
    *(_DWORD *)(a1 + 13788) = 1;
    int v42 = *(_DWORD *)(a1 + 13780) * v41;
    int v43 = 956 * a3;
    signed int v44 = (void *)(a1 + 13584);
    if (*(void *)(a1 + 13584) || *(_DWORD *)(a1 + 13736) || *(_DWORD *)(a1 + 13740))
    {
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)(a1 + 13584), v43 + 3144, v42, 0xFFFFFFFFLL, 8, -256, 4);
      if (result) {
        return result;
      }
      if (*v44) {
        goto LABEL_41;
      }
    }
    if (*(_DWORD *)(a1 + 13736) || *(_DWORD *)(a1 + 13740))
    {
LABEL_41:
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)(a1 + 13584), v43 + 3176, v42, 0x3FFFFFFFFFFLL, 32, 1023, 4);
      if (result) {
        return result;
      }
    }
  }
  unsigned int v109 = a3;
  uint64_t v114 = a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
  unsigned int v29 = *v115;
  if (v29 <= 1)
  {
    uint64_t v30 = v7 + 6872;
    uint64_t v31 = v116 + 13040 * a3;
    if (*(_DWORD *)(v31 + 13032))
    {
      unint64_t v32 = 0;
      unsigned int v33 = (unsigned int *)(v31 + 13032);
      uint64_t v34 = v116 + 13040 * a3 + 1416;
      unsigned int v35 = &_os_log_internal;
      do
      {
        uint64_t v36 = a2 + 4 * v32;
        int v37 = (16 * (v32 & 0xF)) | 0x2DC00000;
        *(_DWORD *)(v36 + 8) = v37;
        int v38 = (_DWORD *)(v36 + 8);
        if (v11)
        {
          uint64_t v39 = 0;
          while (*(_DWORD *)(*(void *)(v30 + 8 * v39) + 12) != *(_DWORD *)(v34 + 176 * v32 + 12))
          {
            if (v11 == ++v39) {
              goto LABEL_29;
            }
          }
          *int v38 = v39 & 0xF | v37;
        }
        else
        {
LABEL_29:
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            int v40 = *(_DWORD *)(v34 + 176 * v32 + 32);
            *(_DWORD *)long long buf = 67109632;
            *(_DWORD *)int v121 = v32;
            *(_WORD *)&v121[4] = 1024;
            *(_DWORD *)&v121[6] = v40;
            LOWORD(v122[0]) = 1024;
            *(_DWORD *)((char *)v122 + 2) = v11;
            _os_log_impl(&dword_223977000, v35, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-0 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
          }
        }
        ++v32;
      }
      while (v32 < *v33);
      unsigned int v29 = *v115;
    }
    else
    {
      LODWORD(v32) = 0;
    }
    if (v29 == 1)
    {
      uint64_t v46 = v116 + 13040 * a3;
      if (*(_DWORD *)(v46 + 13036))
      {
        unint64_t v47 = 0;
        BOOL v48 = (unsigned int *)(v46 + 13036);
        int v49 = &_os_log_internal;
        do
        {
          uint64_t v50 = a2 + 4 * v32;
          int v51 = (16 * (v47 & 0xF)) | 0x2DC00100;
          *(_DWORD *)(v50 + 8) = v51;
          int v52 = (_DWORD *)(v50 + 8);
          if (v11)
          {
            uint64_t v53 = 0;
            while (*(_DWORD *)(*(void *)(v30 + 8 * v53) + 12) != *(_DWORD *)(v116 + 13040 * a3 + 176 * v47 + 7236))
            {
              if (v11 == ++v53) {
                goto LABEL_52;
              }
            }
            *int v52 = v53 & 0xF | v51;
          }
          else
          {
LABEL_52:
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            {
              int v54 = *(_DWORD *)(v116 + 13040 * a3 + 176 * v47 + 7256);
              *(_DWORD *)long long buf = 67109632;
              *(_DWORD *)int v121 = v32;
              *(_WORD *)&v121[4] = 1024;
              *(_DWORD *)&v121[6] = v54;
              LOWORD(v122[0]) = 1024;
              *(_DWORD *)((char *)v122 + 2) = v11;
              _os_log_impl(&dword_223977000, v49, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-1 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
            }
          }
          LODWORD(v32) = v32 + 1;
          ++v47;
        }
        while (v47 < *v48);
      }
    }
  }
  *(void *)(a2 + 136) = 0x2DD0000000000000;
  uint64_t v55 = v112 + 604 * v113;
  unsigned int v56 = (char *)(v55 + 88);
  __int16 v57 = (char *)(v55 + 87);
  if (*v115 == 1) {
    unsigned int v58 = v56;
  }
  else {
    unsigned int v58 = v57;
  }
  char v59 = *v58;
  *(_DWORD *)(a2 + 140) = ((v59 & 3) << 6) | 0x2DD00000;
  int v60 = ((v59 & 3) << 6) | 0x2DD00000 | (8 * (*(unsigned char *)(v10 + 1848 * a3 + 376) & 7));
  *(_DWORD *)(a2 + 140) = v60;
  char v61 = *(unsigned char *)(v110 + 2224 * v111 + 4);
  if (v61) {
    char v61 = *(unsigned char *)(v10 + 1848 * a3 + 377);
  }
  *(_DWORD *)(a2 + 140) = v61 & 7 | v60;
  int v62 = *v115;
  if (v62 != 1) {
    goto LABEL_143;
  }
  int v63 = *v56;
  if (v63 != 2) {
    goto LABEL_65;
  }
  *(_DWORD *)(a2 + 140) = ((v59 & 3) << 6) | 0x2DD0002D;
  int v62 = *v115;
  if (v62 != 1)
  {
LABEL_143:
    if (v62 || !*v57) {
      goto LABEL_85;
    }
    goto LABEL_69;
  }
  int v63 = *v56;
LABEL_65:
  if (v63 != 1) {
    goto LABEL_85;
  }
LABEL_69:
  unsigned int v64 = 0;
  unsigned int v65 = 0;
  do
  {
    uint64_t v66 = v64;
    if (*(unsigned char *)(v10 + 1848 * a3 + v64 + 378))
    {
      int v67 = ((v64 & 0xF) << 9) | 0x2DE04000;
      uint64_t v68 = a2 + 4 * v65;
      *(_DWORD *)(v68 + 144) = v67;
      uint64_t v69 = v10 + 1848 * a3 + 2 * v66;
      *(_DWORD *)(v68 + 144) = v67 | *(_WORD *)(v69 + 394) & 0x1FF;
      *(_DWORD *)(v68 + 528) = 770703360;
      *(_DWORD *)(v68 + 528) = *(unsigned __int16 *)(v69 + 426) | 0x2DF00000;
      ++v65;
    }
    if (*(unsigned char *)(v10 + 1848 * a3 + v66 + 458))
    {
      uint64_t v70 = 0;
      char v71 = 1;
      do
      {
        char v72 = v71;
        int v73 = ((v66 & 0xF) << 9) | (v70 << 14) | 0x2DE08000;
        uint64_t v74 = a2 + 4 * v65;
        *(_DWORD *)(v74 + 144) = v73;
        uint64_t v75 = v10 + 1848 * a3 + 4 * v66 + 2 * v70;
        *(_DWORD *)(v74 + 144) = v73 | *(_WORD *)(v75 + 474) & 0x1FF;
        *(_DWORD *)(v74 + 528) = 770703360;
        *(_DWORD *)(v74 + 528) = *(unsigned __int16 *)(v75 + 538) | 0x2DF00000;
        ++v65;
        uint64_t v70 = 1;
        char v71 = 0;
      }
      while ((v72 & 1) != 0);
    }
    unsigned int v64 = v66 + 1;
  }
  while ((int)v66 + 1 <= *(char *)(v10 + 1848 * a3 + 63));
  if (*v115 == 1)
  {
    unsigned int v76 = 0;
    do
    {
      uint64_t v77 = v76;
      if (*(unsigned char *)(v10 + 1848 * a3 + v76 + 602))
      {
        int v78 = ((v76 & 0xF) << 9) | 0x2DE06000;
        uint64_t v79 = a2 + 4 * v65;
        *(_DWORD *)(v79 + 144) = v78;
        uint64_t v80 = v10 + 1848 * a3 + 2 * v77;
        *(_DWORD *)(v79 + 144) = v78 | *(_WORD *)(v80 + 618) & 0x1FF;
        *(_DWORD *)(v79 + 528) = 770703360;
        *(_DWORD *)(v79 + 528) = *(unsigned __int16 *)(v80 + 650) | 0x2DF00000;
        ++v65;
      }
      if (*(unsigned char *)(v10 + 1848 * a3 + v77 + 682))
      {
        uint64_t v81 = 0;
        char v82 = 1;
        do
        {
          char v83 = v82;
          int v84 = ((v77 & 0xF) << 9) | (v81 << 14) | 0x2DE0A000;
          uint64_t v85 = a2 + 4 * v65;
          *(_DWORD *)(v85 + 144) = v84;
          uint64_t v86 = v10 + 1848 * a3 + 4 * v77 + 2 * v81;
          *(_DWORD *)(v85 + 144) = v84 | *(_WORD *)(v86 + 698) & 0x1FF;
          *(_DWORD *)(v85 + 528) = 770703360;
          *(_DWORD *)(v85 + 528) = *(unsigned __int16 *)(v86 + 762) | 0x2DF00000;
          ++v65;
          uint64_t v81 = 1;
          char v82 = 0;
        }
        while ((v83 & 1) != 0);
      }
      unsigned int v76 = v77 + 1;
    }
    while ((int)v77 + 1 <= *(char *)(v10 + 1848 * a3 + 64));
  }
  *(_DWORD *)(a2 + 136) = v65;
LABEL_85:
  *(_DWORD *)(a2 + 912) = 0;
  uint64_t v87 = v10 + 1848 * a3;
  *(_DWORD *)(a2 + 912) = (((*(unsigned __int8 *)(v112 + 604 * v113 + 89) + *(unsigned __int8 *)(v87 + 1425)) << 10)
                         + 26624) & 0x1FC00 | 0x2D900000;
  *(_DWORD *)(a2 + 916) = 0;
  int v88 = (*(unsigned char *)(v87 + 1428) == 0) << 17;
  *(_DWORD *)(a2 + 916) = v88;
  if (*(unsigned char *)(v87 + 1428) != 1)
  {
    int v89 = v88 | 0x10000;
    *(_DWORD *)(a2 + 916) = v89;
    uint64_t v90 = v10 + 1848 * a3;
    int v91 = v89 | ((*(unsigned char *)(v90 + 1429) & 0xF) << 8);
    *(_DWORD *)(a2 + 916) = v91;
    int v88 = v91 | ((*(unsigned char *)(v90 + 1430) & 0xF) << 12);
  }
  *(_DWORD *)(a2 + 916) = v88 | 0x2DA00000;
  uint64_t v92 = (unsigned int *)(v10 + 1848 * a3 + 1436);
  unsigned int v93 = *v92;
  if (*(unsigned char *)(v112 + 604 * v113 + 3))
  {
    int v94 = 0;
    if ((v93 & 7) != 0) {
      *uint64_t v92 = (v93 + 7) & 0xFFFFFFF8;
    }
  }
  else
  {
    int v94 = *v92 & 7;
  }
  *(_DWORD *)(a2 + 924) = (v94 << 15) | 0x2D800000;
  uint64_t v95 = *(_DWORD **)(v114 + 256);
  unsigned int v96 = v95[626];
  unint64_t v118 = 0;
  uint64_t v119 = 0;
  if (!CAVDAvcDecoder::GetSDataMemInfo((uint64_t)v95, v109, &v119, &v118)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v117 = v96;
  int v97 = 956 * v109;
  uint64_t v98 = v119;
  if (!*(void *)v119 && !*(_DWORD *)(v119 + 152) && !*(_DWORD *)(v119 + 156)) {
    goto LABEL_101;
  }
  int v99 = v118;
  if (HIDWORD(v118) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)int v121 = "populateSliceRegisters";
    *(_WORD *)&v121[8] = 1024;
    v122[0] = 1748;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v99 = v118;
  }
  uint64_t result = CAHDec::addToPatcherList(v114, (void *)v98, v97 + 3148, v99, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  if (result) {
    return result;
  }
  uint64_t v98 = v119;
  if (!*(void *)v119)
  {
LABEL_101:
    if (!*(_DWORD *)(v98 + 152) && !*(_DWORD *)(v98 + 156))
    {
LABEL_109:
      unsigned int v103 = *(_DWORD *)(v10 + 1848 * a3 + 16) - (*v92 >> 3);
      *(_DWORD *)(a2 + 936) = v103;
      if (v95[590] != 1) {
        return 0;
      }
      *(void *)(a2 + 944) = 0;
      unsigned int v104 = *(unsigned __int16 *)(v10 + 1848 * a3 + 1840);
      if (v95[605])
      {
        uint64_t result = 0;
        if (v103 < v104) {
          unsigned int v104 = v103;
        }
        if (v94) {
          BOOL v105 = v104 == 0;
        }
        else {
          BOOL v105 = 0;
        }
        if (v105) {
          unsigned int v104 = 1;
        }
        unsigned int v106 = v117 & 0x10000 | v104;
      }
      else
      {
        if ((v117 & 0x200000) != 0)
        {
          int v108 = 0;
          if (v94 && !*(_WORD *)(v10 + 1848 * a3 + 1840))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)int v121 = "int CAHDecDaisyAvc::populateSliceRegisters(AvcSliceRegisters *, int)";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect off_to_prot_data to be set when slice header is not byte aligned\n", buf, 0xCu);
              unsigned int v103 = *(_DWORD *)(a2 + 936);
              int v108 = *(_DWORD *)(a2 + 948) & 0x1F0000;
            }
            else
            {
              int v108 = 0;
            }
            unsigned int v104 = 1;
          }
        }
        else
        {
          int v108 = 0;
          if (v94) {
            ++v104;
          }
        }
        uint64_t result = 0;
        if (v104 >= v103) {
          unsigned int v104 = v103;
        }
        unsigned int v106 = v108 & 0xFFDFFFFF | (v104 << 22) | (unsigned __int16)v117 | (((v117 >> 20) & 1) << 21);
      }
      *(_DWORD *)(a2 + 948) = v106;
      return result;
    }
  }
  int v100 = v97 + 3156;
  int v101 = v118;
  if (HIDWORD(v118))
  {
    uint64_t v102 = v114;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)int v121 = "populateSliceRegisters";
      *(_WORD *)&v121[8] = 1024;
      v122[0] = 1749;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      int v101 = v118;
    }
  }
  else
  {
    uint64_t v102 = v114;
  }
  uint64_t result = CAHDec::addToPatcherList(v102, (void *)v98, v100, v101, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result) {
    goto LABEL_109;
  }
  return result;
}

uint64_t CAHDecDaisyAvc::populateCommonRegisters(CAHDecDaisyAvc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000001;
  return 0;
}

uint64_t CAHDecDaisyAvc::updateCommonRegisters(CAHDecDaisyAvc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

void CAHDecDaisyAvc::copyScalingList(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = *a2 & 0xFEFFFFC0 | 0x1000000;
  *a2 = v8;
  do
  {
    v8 |= (*(unsigned char *)(a4 + v7) == 0) << v7;
    *a2 = v8;
    ++v7;
  }
  while (v7 != 6);
  unsigned int v9 = v8 & 0xFFFFF03F;
  *a2 = v8 & 0xFFFFF03F;
  if (a7 >= 7)
  {
    uint64_t v10 = (a7 - 6);
    uint64_t v11 = (unsigned __int8 *)(a4 + 6);
    uint64_t v12 = &dword_223ADA788;
    do
    {
      int v13 = *v11++;
      BOOL v14 = v13 == 0;
      int v16 = *v12++;
      char v15 = v16;
      int v17 = v14;
      v9 |= ((v17 << v15) & 0x3F) << 6;
      *a2 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 1;
  uint64_t v20 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v22 = *(_DWORD *)(v20 + i) & 0xFFFFFF | (*(unsigned __int8 *)(v19 + i - 1) << 24);
      *(_DWORD *)(v20 + i) = v22;
      unsigned int v23 = v22 & 0xFF00FFFF | (*(unsigned __int8 *)(v19 + i) << 16);
      *(_DWORD *)(v20 + i) = v23;
      unsigned int v24 = v23 & 0xFFFF00FF | (*(unsigned __int8 *)(v19 + i + 1) << 8);
      *(_DWORD *)(v20 + i) = v24;
      *(_DWORD *)(v20 + i) = v24 & 0xFFFFFF00 | *(unsigned __int8 *)(v19 + i + 2);
    }
    ++v18;
    v20 += 16;
    v19 += 16;
  }
  while (v18 != 6);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 96;
  do
  {
    int v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = a6 + ((uint64_t)dword_223ADA7A0[v25] << 6);
    do
    {
      uint64_t v31 = (unsigned __int8 *)(v30 + (v28 & 0x7FFFFFE0 | v29 & 4 | v27 & 0x18));
      int v32 = *(_DWORD *)(v26 + v28) & 0xFFFFFF | (*v31 << 24);
      *(_DWORD *)(v26 + v28) = v32;
      unsigned int v33 = v32 & 0xFF00FFFF | (v31[1] << 16);
      *(_DWORD *)(v26 + v28) = v33;
      unsigned int v34 = v33 & 0xFFFF00FF | (v31[2] << 8);
      *(_DWORD *)(v26 + v28) = v34;
      *(_DWORD *)(v26 + v28) = v34 & 0xFFFFFF00 | v31[3];
      ++v29;
      v28 += 4;
      v27 += 8;
    }
    while (v28 != 64);
    ++v25;
    v26 += 64;
  }
  while (v25 != 6);
}

uint64_t CAHDecDaisyAvc::AvcSeqScalingListFallBack(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v3 = 12;
    }
    uint64_t v4 = a2 + 22;
    uint64_t v5 = (_OWORD *)(a2 + 34);
    while (v2 > 5)
    {
      if (*(unsigned char *)(v4 + v2 - 12))
      {
        if (*(unsigned char *)(v4 + v2) == 2)
        {
          unsigned int v9 = (_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 130);
          if (v2 == 6 || (v2 & 0x7FFFFFFD) == 8)
          {
            _OWORD *v9 = avcDefaultIntraScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADA808;
            long long v10 = xmmword_223ADA818;
            long long v11 = unk_223ADA828;
          }
          else
          {
            _OWORD *v9 = avcDefaultInterScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADA7C8;
            long long v10 = xmmword_223ADA7D8;
            long long v11 = unk_223ADA7E8;
          }
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 162) = v10;
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 178) = v11;
        }
        goto LABEL_24;
      }
      if ((v2 - 8) <= 0xFFFFFFFD)
      {
        uint64_t result = a2 + 130;
        int v13 = (_OWORD *)(a2 + 130 + ((unint64_t)(v2 - 6) << 6));
        BOOL v14 = (long long *)(a2 + 130 + ((unint64_t)(v2 - 8) << 6));
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[3];
        v13[2] = v14[2];
        v13[3] = v17;
        *int v13 = v15;
        v13[1] = v16;
        uint64_t v8 = (v2 - 2);
LABEL_21:
        *(unsigned char *)(v4 + v2) = *(unsigned char *)(a2 + v8 + 22);
      }
LABEL_24:
      ++v2;
      ++v5;
      if (v3 == v2) {
        return result;
      }
    }
    if (*(unsigned char *)(v4 + v2 - 12)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (v6 || v2 == 3) {
      goto LABEL_24;
    }
    uint64_t v8 = (v2 - 1);
    *uint64_t v5 = *(_OWORD *)(a2 + 16 * v8 + 34);
    goto LABEL_21;
  }
  return result;
}

long long *CAHDecDaisyAvc::AvcPicScalingListFallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 96))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = a3 + 97;
    uint64_t v6 = -96;
    uint64_t result = &avcDefaultIntraScalingList8x8;
    do
    {
      if (v3 > 5)
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if (*(unsigned char *)(v5 + v3 + 12) == 2)
          {
            unsigned int v9 = (_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 217);
            if (v3 == 6 || (v3 & 0x7FFFFFFD) == 8)
            {
              _OWORD *v9 = avcDefaultIntraScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADA808;
              long long v10 = xmmword_223ADA818;
              long long v11 = unk_223ADA828;
            }
            else
            {
              _OWORD *v9 = avcDefaultInterScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADA7C8;
              long long v10 = xmmword_223ADA7D8;
              long long v11 = unk_223ADA7E8;
            }
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 249) = v10;
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 265) = v11;
          }
          goto LABEL_31;
        }
        if ((v3 - 8) <= 0xFFFFFFFD)
        {
          uint64_t v12 = (_OWORD *)(a3 + 217 + ((unint64_t)(v3 - 6) << 6));
          int v13 = (long long *)(a3 + 217 + ((unint64_t)(v3 - 8) << 6));
          long long v14 = *v13;
          long long v15 = v13[1];
          long long v16 = v13[3];
          v12[2] = v13[2];
          v12[3] = v16;
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v17 = a3 + (v3 - 2);
          goto LABEL_29;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          uint64_t v18 = (v3 - 6);
          uint64_t v19 = a3 + (v18 << 6);
          uint64_t v20 = a2 + (v18 << 6);
          long long v21 = *(_OWORD *)(v20 + 130);
          long long v22 = *(_OWORD *)(v20 + 146);
          long long v23 = *(_OWORD *)(v20 + 162);
          *(_OWORD *)(v19 + 265) = *(_OWORD *)(v20 + 178);
          *(_OWORD *)(v19 + 249) = v23;
          *(_OWORD *)(v19 + 233) = v22;
          *(_OWORD *)(v19 + 217) = v21;
LABEL_23:
          char v24 = *(unsigned char *)(a2 + 22 + v3);
LABEL_30:
          *(unsigned char *)(v5 + v3 + 12) = v24;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if ((*(unsigned char *)(v5 + v3 + 12) & 2) != 0)
          {
            if (v3 > 2) {
              long long v8 = avcDefaultInterScalingList4x4;
            }
            else {
              long long v8 = avcDefaultIntraScalingList4x4;
            }
            *(_OWORD *)(v5 + v6 + 120) = v8;
          }
          goto LABEL_31;
        }
        if (v3 && v3 != 3)
        {
          uint64_t v25 = (v3 - 1);
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a3 + 16 * v25 + 121);
          uint64_t v17 = a3 + v25;
LABEL_29:
          char v24 = *(unsigned char *)(v17 + 109);
          goto LABEL_30;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a2 + v6 + 130);
          goto LABEL_23;
        }
      }
LABEL_31:
      ++v3;
      v6 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CAHDecDaisyAvc::populateSequenceRegisters(CAHDecDaisyAvc *this)
{
  uint64_t v2 = *((void *)this + 32);
  unint64_t v3 = (_DWORD *)*((void *)this + 33);
  int v4 = *(_DWORD *)(v2 + 3612);
  int v5 = *(_DWORD *)(v2 + 3616);
  uint64_t v6 = *(void *)(v2 + 3296);
  uint64_t v7 = *(void *)(v2 + 3304);
  uint64_t v8 = v6 + 2224 * v4;
  v3[10] = 0;
  __int16 v9 = *(_WORD *)(v8 + 1558);
  v3[10] = (2 * (v9 & 0xFFF)) | 1;
  v3[10] = ((*(_WORD *)(v8 + 1560) & 0xFFF) << 17) | (2 * (v9 & 0xFFF)) | 0x10001;
  v3[11] = 0;
  int v10 = *(unsigned char *)(v8 + 1564) & 1;
  v3[11] = v10;
  int v11 = v10 | ((*(unsigned char *)(v7 + 604 * v5 + 95) != 0) << 7) | 0x2800;
  v3[11] = v11;
  uint64_t v12 = (unsigned char *)(v8 + 4);
  int v13 = *(unsigned __int8 *)(v8 + 4);
  if (*(unsigned char *)(v8 + 4)) {
    int v13 = (*(unsigned char *)(v6 + 2224 * v4 + 7) & 0xF) << 15;
  }
  int v14 = v13 | v11;
  v3[11] = v14;
  long long v15 = (unsigned char *)(v6 + 2224 * v4);
  int v16 = v14 & 0x7F87A881 | ((v15[6] & 0xF) << 19);
  v3[11] = v16;
  unsigned int v17 = v16 & 0xFF7FFFFF | ((v15[5] & 1) << 23);
  v3[11] = v17;
  v3[11] = v17 & 0xFCFFFFFF | ((*v12 & 3) << 24);
  if (v15[9])
  {
    if (*v12 == 3) {
      int v18 = 12;
    }
    else {
      int v18 = 8;
    }
    uint64_t v19 = CAHDecDaisyAvc::AvcSeqScalingListFallBack((uint64_t)this, v8);
    CAHDecDaisyAvc::copyScalingList(v19, v3 + 12, *((void *)this + 33) + 1112, v6 + 2224 * v4 + 22, v6 + 2224 * v4 + 34, v6 + 2224 * v4 + 130, v18);
  }
  return 0;
}

uint64_t CAHDecDaisyAvc::populatePictureRegisters(CAHDecDaisyAvc *this)
{
  uint64_t v319 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 3612);
  int v4 = *(_DWORD *)(v2 + 3616);
  uint64_t v5 = *(void *)(v2 + 3296);
  uint64_t v6 = *(void *)(v2 + 3304);
  uint64_t v296 = *(void *)(v2 + 2088);
  uint64_t v302 = *(unsigned int *)(v2 + 3152);
  int v299 = *(_DWORD *)(v2 + 3132);
  int v300 = *(_DWORD *)(v2 + 2644);
  int v7 = *(unsigned __int8 *)(v2 + 8);
  long long v8 = *(_OWORD *)(v2 + 7016);
  v318[8] = *(_OWORD *)(v2 + 7000);
  v318[9] = v8;
  long long v9 = *(_OWORD *)(v2 + 7048);
  v318[10] = *(_OWORD *)(v2 + 7032);
  v318[11] = v9;
  long long v10 = *(_OWORD *)(v2 + 6952);
  v318[4] = *(_OWORD *)(v2 + 6936);
  v318[5] = v10;
  long long v11 = *(_OWORD *)(v2 + 6984);
  v318[6] = *(_OWORD *)(v2 + 6968);
  v318[7] = v11;
  long long v12 = *(_OWORD *)(v2 + 6888);
  v318[0] = *(_OWORD *)(v2 + 6872);
  v318[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 6920);
  v318[2] = *(_OWORD *)(v2 + 6904);
  v318[3] = v13;
  uint64_t v298 = *(unsigned int *)(v2 + 7064);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  long long v15 = (unsigned __int8 *)*((void *)this + 32);
  uint64_t v16 = *((void *)this + 33);
  int v17 = v15[2675];
  unsigned int v18 = v15[2674];
  if (!(v17 | v18)) {
    goto LABEL_42;
  }
  uint64_t v19 = v5 + 2224 * v3;
  unsigned int v20 = *(unsigned __int8 *)(v19 + 6);
  unsigned int v21 = *(unsigned __int8 *)(v19 + 7);
  if (v20 > v21) {
    LOWORD(v21) = v20;
  }
  int v22 = ((_WORD)v21 + 9) & 0x1FE;
  if (v22 == 8)
  {
    int v24 = v7;
    unsigned int v28 = 1;
    int v26 = 8;
    if (!v15[2675]) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  int v23 = v15[2672];
  int v24 = v7;
  if (v22 != 12)
  {
    if (v22 == 10)
    {
      BOOL v25 = v23 == 0;
      if (v23) {
        int v26 = 10;
      }
      else {
        int v26 = 9;
      }
      int v27 = 2;
      goto LABEL_15;
    }
    int v26 = 27;
    unsigned int v28 = 27;
    if (!v17) {
      goto LABEL_30;
    }
LABEL_23:
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) && (v17 == 2 && v26 == 8 || v17 == 3 && (v26 - 9) <= 1))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = "populatePictureRegisters";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = v26;
      WORD1(buf[2]) = 1024;
      HIDWORD(buf[2]) = v17;
      int v29 = &_os_log_internal;
      uint64_t v30 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
      goto LABEL_38;
    }
    goto LABEL_30;
  }
  BOOL v25 = v23 == 0;
  if (v23) {
    int v26 = 12;
  }
  else {
    int v26 = 11;
  }
  int v27 = 4;
LABEL_15:
  if (v25) {
    unsigned int v28 = v27;
  }
  else {
    unsigned int v28 = v27 + 1;
  }
  if (v17) {
    goto LABEL_23;
  }
LABEL_30:
  int v7 = v24;
  if (v18 && (v18 == 3 && v28 - 9 < 2 || v28 <= 0x1A && ((1 << v28) & 0x4C00000) != 0 && v18 <= 2))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "populatePictureRegisters";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = v28;
    WORD1(buf[2]) = 1024;
    HIDWORD(buf[2]) = v18;
    int v29 = &_os_log_internal;
    uint64_t v30 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
LABEL_38:
    uint64_t v31 = (uint8_t *)buf;
    uint32_t v32 = 24;
    goto LABEL_39;
  }
LABEL_42:
  int v293 = v14;
  int v294 = *((_DWORD *)this + 3445) * v302;
  unsigned int v34 = (char *)this + 264;
  *(_DWORD *)(v16 + 52) = 766509056;
  if (**(_DWORD **)(*((void *)this + 32) + 3312) == 5) {
    int v35 = 766517248;
  }
  else {
    int v35 = 766509056;
  }
  if (v14) {
    int v36 = 688;
  }
  else {
    int v36 = 672;
  }
  if (v300) {
    int v37 = 4160;
  }
  else {
    int v37 = 64;
  }
  unsigned int v38 = v37 & 0xFFFFFFF0 | ((v300 == 1) << 10) | v36 & 0xFFFFFFF0 | (4 * (v17 & 3)) | v18 & 3 | v35;
  *(_DWORD *)(v16 + 52) = v38;
  uint64_t v39 = (unsigned char *)*((void *)this + 32);
  int v40 = v38 | ((v39[2652] & 1) << 19);
  *(_DWORD *)(v16 + 52) = v40;
  unsigned int v41 = v40 & 0xFFFBFFFF | ((v39[2653] & 1) << 18);
  *(_DWORD *)(v16 + 52) = v41;
  *(_DWORD *)(v16 + 52) = v41 & 0xFFFDFFFF | ((v39[2654] & 1) << 17);
  *(void *)(v16 + 56) = 0x1000000;
  uint64_t v42 = v5 + 2224 * v3;
  int v43 = (16 * (*(_WORD *)(v42 + 1558) & 0xFFF)) | 0xF;
  *(_DWORD *)(v16 + 60) = v43;
  LODWORD(v39) = v43 | (*(unsigned __int16 *)(v42 + 1560) << 20) | 0xF0000;
  *(void *)(v16 + 64) = 0;
  *(_DWORD *)(v16 + 60) = v39;
  LODWORD(v42) = (*(unsigned char *)(v42 + 8) & 1) << 18;
  *(_DWORD *)(v16 + 68) = v42;
  signed int v44 = (unsigned char *)(v6 + 604 * v4);
  LODWORD(v42) = v42 & 0xFFF7FFFF | ((v44[93] & 1) << 19);
  *(_DWORD *)(v16 + 68) = v42;
  LODWORD(v42) = v42 & 0xFFEFFFFF | ((v44[3] & 1) << 20);
  *(_DWORD *)(v16 + 68) = v42;
  *(_DWORD *)(v16 + 68) = v42 | ((**(_DWORD **)(*((void *)this + 32) + 3312) != 5) << 21);
  unsigned int v45 = *(_DWORD *)(v16 + 72) & 0xFFFFFC1F | (32 * (v44[91] & 0x1F));
  *(_DWORD *)(v16 + 72) = v45;
  *(_DWORD *)(v16 + 72) = v45 & 0xFFFFFFE0 | v44[601] & 0x1F;
  if (v44[96])
  {
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) == 3) {
      int v46 = 12;
    }
    else {
      int v46 = 8;
    }
    uint64_t v47 = *(void *)v34 + 1596;
    BOOL v48 = CAHDecDaisyAvc::AvcPicScalingListFallBack(v14, v5 + 2224 * v3, v6 + 604 * v4);
    CAHDecDaisyAvc::copyScalingList((uint64_t)v48, (unsigned int *)(v16 + 76), v47, v6 + 604 * v4 + 109, v6 + 604 * v4 + 121, v6 + 604 * v4 + 217, v46);
  }
  uint64_t v49 = 0;
  *(_DWORD *)(v16 + 80) = *((_DWORD *)this + 3450);
  *(_DWORD *)(v16 + 84) = *((_DWORD *)this + 3451);
  *(_DWORD *)(v16 + 88) = 3145786;
  uint64_t v50 = (char *)this + 9008;
  do
  {
    *(_DWORD *)(*(void *)v34 + v49 + 92) = 0;
    uint64_t v51 = *(void *)v34 + v49;
    int v52 = *(_DWORD *)(v51 + 92);
    *(_DWORD *)(v51 + 92) = 0;
    *(_DWORD *)(*(void *)v34 + v49 + 92) ^= 0xFFFFFF00;
    uint64_t v53 = *(void *)v34 + v49;
    int v54 = *(_DWORD *)(v53 + 92);
    *(_DWORD *)(v53 + 92) = v52;
    if (*(void *)v50 || *((_DWORD *)v50 + 38) || *((_DWORD *)v50 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v50, (int)v49 + 92, 0, 0xFFFFFFFFLL, 8, v54, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v49 + 152) = 0;
    *(_DWORD *)(*((void *)this + 33) + v49 + 152) = *(_DWORD *)(*((void *)this + 33) + v49 + 152) & 0x800001FF | (((*((_DWORD *)this + 3444) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v49 + 616) = 0;
    uint64_t v55 = *((void *)this + 33) + v49;
    int v56 = *(_DWORD *)(v55 + 616);
    *(_DWORD *)(v55 + 616) = 0;
    *(_DWORD *)(*((void *)this + 33) + v49 + 616) ^= 0x3FFu;
    uint64_t v57 = *((void *)this + 33) + v49;
    int v58 = *(_DWORD *)(v57 + 616);
    *(_DWORD *)(v57 + 616) = v56;
    if (*(void *)v50 || *((_DWORD *)v50 + 38) || *((_DWORD *)v50 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v50, (int)v49 + 616, 0, 0x3FFFFFFFFFFLL, 32, v58, 4);
      if (result) {
        return result;
      }
    }
    v49 += 4;
    v50 += 176;
  }
  while (v49 != 60);
  *(_DWORD *)(*(void *)v34 + 212) = 0;
  *(_DWORD *)(*(void *)v34 + 676) = 0;
  if ((*(unsigned char *)(v16 + 54) & 8) == 0) {
    goto LABEL_75;
  }
  uint64_t v59 = *((void *)this + 33);
  uint64_t v60 = *(void *)(*((void *)this + 32) + 2680);
  long long v315 = 0u;
  long long v316 = 0u;
  long long v313 = 0u;
  long long v314 = 0u;
  long long v311 = 0u;
  long long v312 = 0u;
  long long v309 = 0u;
  long long v310 = 0u;
  long long v308 = 0u;
  memset(buf, 0, sizeof(buf));
  int v61 = (*(_DWORD *)(v59 + 16) & 0xF) << 9;
  buf[0] = v60;
  int v62 = *(_DWORD *)(v59 + 212);
  *(_DWORD *)(v59 + 212) = 0;
  *(_DWORD *)(*((void *)this + 33) + 212) ^= 0xFFFFFF00;
  uint64_t v63 = *((void *)this + 33);
  int v64 = *(_DWORD *)(v63 + 212);
  *(_DWORD *)(v63 + 212) = v62;
  if (v60)
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 212, v61, 0xFFFFFFFFLL, 8, v64, 4);
    if (result) {
      return result;
    }
    uint64_t v65 = buf[0];
    int v66 = DWORD2(v315);
    LODWORD(v60) = HIDWORD(v315);
  }
  else
  {
    int v66 = 0;
    uint64_t v65 = 0;
  }
  if ((*(_DWORD *)(*(void *)v34 + 676) = 0,
        int v67 = *(_DWORD *)(*(void *)v34 + 676),
        *(_DWORD *)(*(void *)v34 + 676) = 0,
        *(_DWORD *)(*(void *)v34 + 676) ^= 0x3FFu,
        int v68 = *(_DWORD *)(*(void *)v34 + 676),
        *(_DWORD *)(*(void *)v34 + 676) = v67,
        !v65)
    && !v66
    && !v60
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 676, v61, 0x3FFFFFFFFFFLL, 32, v68, 4), !result))
  {
LABEL_75:
    uint64_t v69 = 0;
    uint64_t v70 = (char *)this + 11824;
    do
    {
      *(_DWORD *)(*(void *)v34 + v69 + 216) = 0;
      uint64_t v71 = *(void *)v34 + v69;
      int v72 = *(_DWORD *)(v71 + 216);
      *(_DWORD *)(v71 + 216) = 0;
      *(_DWORD *)(*(void *)v34 + v69 + 216) ^= 0xFFFFFF00;
      uint64_t v73 = *(void *)v34 + v69;
      int v74 = *(_DWORD *)(v73 + 216);
      *(_DWORD *)(v73 + 216) = v72;
      if (*(void *)v70 || *((_DWORD *)v70 + 38) || *((_DWORD *)v70 + 39))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v70, (int)v69 + 216, 0, 0xFFFFFFFFLL, 8, v74, 4);
        if (result) {
          return result;
        }
      }
      *(_DWORD *)(*(void *)v34 + v69 + 680) = 0;
      uint64_t v75 = *(void *)v34 + v69;
      int v76 = *(_DWORD *)(v75 + 680);
      *(_DWORD *)(v75 + 680) = 0;
      *(_DWORD *)(*(void *)v34 + v69 + 680) ^= 0x3FFu;
      uint64_t v77 = *(void *)v34 + v69;
      int v78 = *(_DWORD *)(v77 + 680);
      *(_DWORD *)(v77 + 680) = v76;
      if (*(void *)v70 || *((_DWORD *)v70 + 38) || *((_DWORD *)v70 + 39))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v70, (int)v69 + 680, 0, 0x3FFFFFFFFFFLL, 32, v78, 4);
        if (result) {
          return result;
        }
      }
      v69 += 4;
      v70 += 176;
    }
    while (v69 != 16);
    int v79 = v7;
    *(_DWORD *)(*((void *)this + 33) + 232) = 0;
    uint64_t v80 = *((void *)this + 33);
    int v81 = *(_DWORD *)(v80 + 232);
    *(_DWORD *)(v80 + 232) = 0;
    *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFF00;
    uint64_t v82 = *((void *)this + 33);
    int v83 = *(_DWORD *)(v82 + 232);
    *(_DWORD *)(v82 + 232) = v81;
    if (*((void *)this + 1566) || *((_DWORD *)this + 3170) || *((_DWORD *)this + 3171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1566, 232, 0, 0xFFFFFFFFLL, 8, v83, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 696) = 0;
    int v84 = *(_DWORD *)(*(void *)v34 + 696);
    *(_DWORD *)(*(void *)v34 + 696) = 0;
    *(_DWORD *)(*(void *)v34 + 696) ^= 0x3FFu;
    int v85 = *(_DWORD *)(*(void *)v34 + 696);
    *(_DWORD *)(*(void *)v34 + 696) = v84;
    if (*((void *)this + 1566) || *((_DWORD *)this + 3170) || *((_DWORD *)this + 3171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1566, 696, 0, 0x3FFFFFFFFFFLL, 32, v85, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 236) = 0;
    uint64_t v86 = *((void *)this + 33);
    int v87 = *(_DWORD *)(v86 + 236);
    *(_DWORD *)(v86 + 236) = 0;
    *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFF00;
    uint64_t v88 = *((void *)this + 33);
    int v89 = *(_DWORD *)(v88 + 236);
    *(_DWORD *)(v88 + 236) = v87;
    if (*((void *)this + 1588) || *((_DWORD *)this + 3214) || *((_DWORD *)this + 3215))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1588, 236, 0, 0xFFFFFFFFLL, 8, v89, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 700) = 0;
    int v90 = *(_DWORD *)(*(void *)v34 + 700);
    *(_DWORD *)(*(void *)v34 + 700) = 0;
    *(_DWORD *)(*(void *)v34 + 700) ^= 0x3FFu;
    int v91 = *(_DWORD *)(*(void *)v34 + 700);
    *(_DWORD *)(*(void *)v34 + 700) = v90;
    if (*((void *)this + 1588) || *((_DWORD *)this + 3214) || *((_DWORD *)this + 3215))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1588, 700, 0, 0x3FFFFFFFFFFLL, 32, v91, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 240) = 0;
    uint64_t v92 = *((void *)this + 33);
    int v93 = *(_DWORD *)(v92 + 240);
    *(_DWORD *)(v92 + 240) = 0;
    *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFF00;
    uint64_t v94 = *((void *)this + 33);
    int v95 = *(_DWORD *)(v94 + 240);
    *(_DWORD *)(v94 + 240) = v93;
    if (*((void *)this + 1610) || *((_DWORD *)this + 3258) || *((_DWORD *)this + 3259))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1610, 240, 0, 0xFFFFFFFFLL, 8, v95, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 704) = 0;
    int v96 = *(_DWORD *)(*(void *)v34 + 704);
    *(_DWORD *)(*(void *)v34 + 704) = 0;
    *(_DWORD *)(*(void *)v34 + 704) ^= 0x3FFu;
    int v97 = *(_DWORD *)(*(void *)v34 + 704);
    *(_DWORD *)(*(void *)v34 + 704) = v96;
    if (*((void *)this + 1610) || *((_DWORD *)this + 3258) || *((_DWORD *)this + 3259))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1610, 704, 0, 0x3FFFFFFFFFFLL, 32, v97, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 244) = 0;
    uint64_t v98 = *((void *)this + 33);
    int v99 = *(_DWORD *)(v98 + 244);
    *(_DWORD *)(v98 + 244) = 0;
    *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFF00;
    uint64_t v100 = *((void *)this + 33);
    int v101 = *(_DWORD *)(v100 + 244);
    *(_DWORD *)(v100 + 244) = v99;
    if (*((void *)this + 1632) || *((_DWORD *)this + 3302) || *((_DWORD *)this + 3303))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1632, 244, 0, 0xFFFFFFFFLL, 8, v101, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 708) = 0;
    int v102 = *(_DWORD *)(*(void *)v34 + 708);
    *(_DWORD *)(*(void *)v34 + 708) = 0;
    *(_DWORD *)(*(void *)v34 + 708) ^= 0x3FFu;
    int v103 = *(_DWORD *)(*(void *)v34 + 708);
    *(_DWORD *)(*(void *)v34 + 708) = v102;
    if (*((void *)this + 1632) || *((_DWORD *)this + 3302) || *((_DWORD *)this + 3303))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1632, 708, 0, 0x3FFFFFFFFFFLL, 32, v103, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 248) = 0;
    uint64_t v104 = *((void *)this + 33);
    int v105 = *(_DWORD *)(v104 + 248);
    *(_DWORD *)(v104 + 248) = 0;
    *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFF00;
    uint64_t v106 = *((void *)this + 33);
    int v107 = *(_DWORD *)(v106 + 248);
    *(_DWORD *)(v106 + 248) = v105;
    if (*((void *)this + 1654) || *((_DWORD *)this + 3346) || *((_DWORD *)this + 3347))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1654, 248, 0, 0xFFFFFFFFLL, 8, v107, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 712) = 0;
    int v108 = *(_DWORD *)(*(void *)v34 + 712);
    *(_DWORD *)(*(void *)v34 + 712) = 0;
    *(_DWORD *)(*(void *)v34 + 712) ^= 0x3FFu;
    int v109 = *(_DWORD *)(*(void *)v34 + 712);
    *(_DWORD *)(*(void *)v34 + 712) = v108;
    if (*((void *)this + 1654) || *((_DWORD *)this + 3346) || *((_DWORD *)this + 3347))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1654, 712, 0, 0x3FFFFFFFFFFLL, 32, v109, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 252) = 0;
    *(_DWORD *)(*((void *)this + 33) + 716) = 0;
    *(_DWORD *)(*((void *)this + 33) + 256) = 0;
    uint64_t v110 = *((void *)this + 33);
    int v111 = *(_DWORD *)(v110 + 256);
    *(_DWORD *)(v110 + 256) = 0;
    *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFF00;
    uint64_t v112 = *((void *)this + 33);
    int v113 = *(_DWORD *)(v112 + 256);
    *(_DWORD *)(v112 + 256) = v111;
    if (*((void *)this + 1456) || *((_DWORD *)this + 2950) || *((_DWORD *)this + 2951))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 256, 0, 0xFFFFFFFFLL, 8, v113, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 720) = 0;
    int v114 = *(_DWORD *)(*(void *)v34 + 720);
    *(_DWORD *)(*(void *)v34 + 720) = 0;
    *(_DWORD *)(*(void *)v34 + 720) ^= 0x3FFu;
    int v115 = *(_DWORD *)(*(void *)v34 + 720);
    *(_DWORD *)(*(void *)v34 + 720) = v114;
    if (*((void *)this + 1456) || *((_DWORD *)this + 2950) || *((_DWORD *)this + 2951))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 720, 0, 0x3FFFFFFFFFFLL, 32, v115, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 260) = 0;
    uint64_t v116 = *((void *)this + 33);
    int v117 = *(_DWORD *)(v116 + 260);
    *(_DWORD *)(v116 + 260) = 0;
    *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFF00;
    uint64_t v118 = *((void *)this + 33);
    int v119 = *(_DWORD *)(v118 + 260);
    *(_DWORD *)(v118 + 260) = v117;
    if (*((void *)this + 1698) || *((_DWORD *)this + 3434) || *((_DWORD *)this + 3435))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1698, 260, v294, 0xFFFFFFFFLL, 8, v119, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 724) = 0;
    int v120 = *(_DWORD *)(*(void *)v34 + 724);
    *(_DWORD *)(*(void *)v34 + 724) = 0;
    *(_DWORD *)(*(void *)v34 + 724) ^= 0x3FFu;
    int v121 = *(_DWORD *)(*(void *)v34 + 724);
    *(_DWORD *)(*(void *)v34 + 724) = v120;
    if (*((void *)this + 1698) || *((_DWORD *)this + 3434) || *((_DWORD *)this + 3435))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1698, 724, v294, 0x3FFFFFFFFFFLL, 32, v121, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 264) = 0;
    uint64_t v122 = *((void *)this + 33);
    int v123 = *(_DWORD *)(v122 + 264);
    *(_DWORD *)(v122 + 264) = 0;
    *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFF80;
    uint64_t v124 = *((void *)this + 33);
    int v125 = *(_DWORD *)(v124 + 264);
    *(_DWORD *)(v124 + 264) = v123;
    unsigned int v126 = (void *)((char *)this + 176 * v302 + 560);
    if (*v126 || *((_DWORD *)this + 44 * v302 + 178) || *((_DWORD *)this + 44 * v302 + 179))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v302 + 70, 264, 0, 0xFFFFFFFFLL, 7, v125, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 728) = 0;
    int v127 = *(_DWORD *)(*(void *)v34 + 728);
    *(_DWORD *)(*(void *)v34 + 728) = 0;
    *(_DWORD *)(*(void *)v34 + 728) ^= 0x3FFu;
    int v128 = *(_DWORD *)(*(void *)v34 + 728);
    *(_DWORD *)(*(void *)v34 + 728) = v127;
    if (*v126 || *((_DWORD *)this + 44 * v302 + 178) || *((_DWORD *)this + 44 * v302 + 179))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v126, 728, 0, 0x3FFFFFFFFFFLL, 32, v128, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 268) = 0;
    int v129 = *(_DWORD *)(*(void *)v34 + 268);
    *(_DWORD *)(*(void *)v34 + 268) = 0;
    *(_DWORD *)(*(void *)v34 + 268) ^= 0xFFFFFF80;
    int v130 = *(_DWORD *)(*(void *)v34 + 268);
    *(_DWORD *)(*(void *)v34 + 268) = v129;
    int v131 = (void *)(v296 + 8);
    if (*(void *)(v296 + 8) || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v296 + 8), 268, *(_DWORD *)(v296 + 60), 0xFFFFFFFFLL, 7, v130, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 732) = 0;
    int v132 = *(_DWORD *)(*(void *)v34 + 732);
    *(_DWORD *)(*(void *)v34 + 732) = 0;
    *(_DWORD *)(*(void *)v34 + 732) ^= 0x3FFu;
    int v133 = *(_DWORD *)(*(void *)v34 + 732);
    *(_DWORD *)(*(void *)v34 + 732) = v132;
    if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 732, *(_DWORD *)(v296 + 60), 0x3FFFFFFFFFFLL, 32, v133, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 272) = 0;
    uint64_t v134 = *((void *)this + 33);
    int v135 = *(_DWORD *)(v134 + 272);
    *(_DWORD *)(v134 + 272) = 0;
    *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFF80;
    uint64_t v136 = *((void *)this + 33);
    int v137 = *(_DWORD *)(v136 + 272);
    *(_DWORD *)(v136 + 272) = v135;
    uint64_t v138 = (void *)((char *)this + 176 * v302 + 4784);
    if (*v138
      || *((_DWORD *)this + 44 * v302 + 1234)
      || *((_DWORD *)this + 44 * v302 + 1235))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v302 + 598, 272, 0, 0xFFFFFFFFLL, 7, v137, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 736) = 0;
    int v139 = *(_DWORD *)(*(void *)v34 + 736);
    *(_DWORD *)(*(void *)v34 + 736) = 0;
    *(_DWORD *)(*(void *)v34 + 736) ^= 0x3FFu;
    int v140 = *(_DWORD *)(*(void *)v34 + 736);
    *(_DWORD *)(*(void *)v34 + 736) = v139;
    if (*v138
      || *((_DWORD *)this + 44 * v302 + 1234)
      || *((_DWORD *)this + 44 * v302 + 1235))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v138, 736, 0, 0x3FFFFFFFFFFLL, 32, v140, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 276) = 0;
    int v141 = *(_DWORD *)(*(void *)v34 + 276);
    *(_DWORD *)(*(void *)v34 + 276) = 0;
    *(_DWORD *)(*(void *)v34 + 276) ^= 0xFFFFFF80;
    int v142 = *(_DWORD *)(*(void *)v34 + 276);
    *(_DWORD *)(*(void *)v34 + 276) = v141;
    if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 276, *(_DWORD *)(v296 + 64), 0xFFFFFFFFLL, 7, v142, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v34 + 740) = 0;
    int v143 = *(_DWORD *)(*(void *)v34 + 740);
    *(_DWORD *)(*(void *)v34 + 740) = 0;
    *(_DWORD *)(*(void *)v34 + 740) ^= 0x3FFu;
    int v144 = *(_DWORD *)(*(void *)v34 + 740);
    *(_DWORD *)(*(void *)v34 + 740) = v143;
    if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 740, *(_DWORD *)(v296 + 64), 0x3FFFFFFFFFFLL, 32, v144, 4);
      if (result) {
        return result;
      }
    }
    if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
    {
      int v145 = *(_DWORD *)(*(void *)v34 + 268);
      *(_DWORD *)(*(void *)v34 + 268) = 0;
      *(_DWORD *)(*(void *)v34 + 268) ^= 0xFFFFFF80;
      int v146 = *(_DWORD *)(*(void *)v34 + 268);
      *(_DWORD *)(*(void *)v34 + 268) = v145;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 268, *(_DWORD *)(v296 + 60), 0xFFFFFFFFLL, 7, v146, 4);
        if (result) {
          return result;
        }
      }
      int v147 = *(_DWORD *)(*(void *)v34 + 732);
      *(_DWORD *)(*(void *)v34 + 732) = 0;
      *(_DWORD *)(*(void *)v34 + 732) ^= 0x3FFu;
      int v148 = *(_DWORD *)(*(void *)v34 + 732);
      *(_DWORD *)(*(void *)v34 + 732) = v147;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 732, *(_DWORD *)(v296 + 60), 0x3FFFFFFFFFFLL, 32, v148, 4);
        if (result) {
          return result;
        }
      }
      int v149 = *(_DWORD *)(*(void *)v34 + 276);
      *(_DWORD *)(*(void *)v34 + 276) = 0;
      *(_DWORD *)(*(void *)v34 + 276) ^= 0xFFFFFF80;
      int v150 = *(_DWORD *)(*(void *)v34 + 276);
      *(_DWORD *)(*(void *)v34 + 276) = v149;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 276, *(_DWORD *)(v296 + 64), 0xFFFFFFFFLL, 7, v150, 4);
        if (result) {
          return result;
        }
      }
      int v151 = *(_DWORD *)(*(void *)v34 + 740);
      *(_DWORD *)(*(void *)v34 + 740) = 0;
      *(_DWORD *)(*(void *)v34 + 740) ^= 0x3FFu;
      int v152 = *(_DWORD *)(*(void *)v34 + 740);
      *(_DWORD *)(*(void *)v34 + 740) = v151;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 740, *(_DWORD *)(v296 + 64), 0x3FFFFFFFFFFLL, 32, v152, 4);
        if (result) {
          return result;
        }
      }
      int v153 = *(_DWORD *)(*(void *)v34 + 264);
      *(_DWORD *)(*(void *)v34 + 264) = 0;
      *(_DWORD *)(*(void *)v34 + 264) ^= 0xFFFFFF80;
      int v154 = *(_DWORD *)(*(void *)v34 + 264);
      *(_DWORD *)(*(void *)v34 + 264) = v153;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 264, *(_DWORD *)(v296 + 72), 0xFFFFFFFFLL, 7, v154, 4);
        if (result) {
          return result;
        }
      }
      int v155 = *(_DWORD *)(*(void *)v34 + 728);
      *(_DWORD *)(*(void *)v34 + 728) = 0;
      *(_DWORD *)(*(void *)v34 + 728) ^= 0x3FFu;
      int v156 = *(_DWORD *)(*(void *)v34 + 728);
      *(_DWORD *)(*(void *)v34 + 728) = v155;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 728, *(_DWORD *)(v296 + 72), 0x3FFFFFFFFFFLL, 32, v156, 4);
        if (result) {
          return result;
        }
      }
      int v157 = *(_DWORD *)(*(void *)v34 + 272);
      *(_DWORD *)(*(void *)v34 + 272) = 0;
      *(_DWORD *)(*(void *)v34 + 272) ^= 0xFFFFFF80;
      int v158 = *(_DWORD *)(*(void *)v34 + 272);
      *(_DWORD *)(*(void *)v34 + 272) = v157;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 272, *(_DWORD *)(v296 + 76), 0xFFFFFFFFLL, 7, v158, 4);
        if (result) {
          return result;
        }
      }
      int v159 = *(_DWORD *)(*(void *)v34 + 736);
      *(_DWORD *)(*(void *)v34 + 736) = 0;
      *(_DWORD *)(*(void *)v34 + 736) ^= 0x3FFu;
      int v160 = *(_DWORD *)(*(void *)v34 + 736);
      *(_DWORD *)(*(void *)v34 + 736) = v159;
      if (*v131 || *(_DWORD *)(v296 + 160) || *(_DWORD *)(v296 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v131, 736, *(_DWORD *)(v296 + 76), 0x3FFFFFFFFFFLL, 32, v160, 4);
        if (result) {
          return result;
        }
      }
    }
    if (*(_DWORD *)(v16 + 52) & 0x2000 | v298)
    {
      *((_DWORD *)this + v302 + 116) = 0;
      *(_DWORD *)(*((void *)this + 33) + 280) = 0;
      if (v298)
      {
        uint64_t v161 = 0;
        if (v293) {
          int v162 = 0x2000000;
        }
        else {
          int v162 = 0;
        }
        int v289 = v162;
        do
        {
          uint64_t v163 = *((void *)v318 + v161);
          uint64_t v164 = *(unsigned int *)(v163 + 32);
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) = *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) & 0xFFFFFFF | ((v298 << 28) - 0x10000000);
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) &= 0xF3FFFFFF;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) = *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) & 0xFDFFFFFF | v289;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) |= 0x1000000u;
          int v165 = v299 - *(_DWORD *)(v163 + 12);
          int v166 = v165 & 0x1FFFF;
          if (v165 < -32768) {
            int v166 = 98304;
          }
          if (v165 < 0x8000) {
            int v167 = v166;
          }
          else {
            int v167 = 0x7FFF;
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) = *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) & 0xFFFE0000 | v167;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) = *(_DWORD *)(*(void *)v34 + 4 * v161 + 280) & 0xFFFDFFFF | (*(unsigned __int8 *)(v163 + 1) << 17);
          if (*(_DWORD *)(v163 + 28) == 1)
          {
            long long v316 = 0u;
            long long v317 = 0u;
            long long v314 = 0u;
            long long v315 = 0u;
            long long v312 = 0u;
            long long v313 = 0u;
            long long v310 = 0u;
            long long v311 = 0u;
            long long v308 = 0u;
            long long v309 = 0u;
            memset(buf, 0, sizeof(buf));
            int DPB = AVC_RLM::getDPB(*(void *)(*((void *)this + 32) + 3104), buf);
            if (DPB < 1)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              int v305 = 136315138;
              uint64_t v306 = "populatePictureRegisters";
              int v29 = &_os_log_internal;
              uint64_t v30 = "AppleAVD: ERROR: %s: No ref pics found!\n";
            }
            else
            {
              uint64_t v169 = DPB;
              while (v169-- >= 1)
              {
                uint64_t v163 = buf[v169];
                if (!*(_DWORD *)(v163 + 28))
                {
                  uint64_t v164 = *(unsigned int *)(v163 + 32);
                  goto LABEL_224;
                }
              }
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              int v305 = 136315138;
              uint64_t v306 = "populatePictureRegisters";
              int v29 = &_os_log_internal;
              uint64_t v30 = "AppleAVD: ERROR: %s: No non-existing ref frames found!\n";
            }
            uint64_t v31 = (uint8_t *)&v305;
            uint32_t v32 = 12;
            goto LABEL_39;
          }
LABEL_224:
          if (v293)
          {
            buf[0] = 0;
            if (!CAVDAvcDecoder::decodeGetRenderTargetRef(*((void *)this + 32), v164, *(_DWORD *)(v163 + 56), *(_DWORD *)(v163 + 64), buf))
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v305) = 0;
                int v29 = &_os_log_internal;
                uint64_t v30 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
                uint64_t v31 = (uint8_t *)&v305;
                uint32_t v32 = 2;
LABEL_39:
                _os_log_impl(&dword_223977000, v29, OS_LOG_TYPE_DEFAULT, v30, v31, v32);
              }
              return 0xFFFFFFFFLL;
            }
            *(void *)(v163 + 40) = buf[0] + 8;
          }
          *(_DWORD *)(*((void *)this + 33) + 4 * v161 + 344) = 0;
          int v303 = 4 * v161;
          int v295 = 4 * v161 + 344;
          uint64_t v171 = *((void *)this + 33) + 4 * v161;
          int v172 = *(_DWORD *)(v171 + 344);
          *(_DWORD *)(v171 + 344) = 0;
          *(_DWORD *)(*((void *)this + 33) + 4 * v161 + 344) ^= 0xFFFFFF80;
          uint64_t v173 = *((void *)this + 33) + 4 * v161;
          int v174 = *(_DWORD *)(v173 + 344);
          *(_DWORD *)(v173 + 344) = v172;
          unsigned int v297 = v164;
          uint64_t v175 = (void *)((char *)this + 176 * v164 + 560);
          if (*v175
            || *((_DWORD *)this + 44 * v164 + 178)
            || *((_DWORD *)this + 44 * v164 + 179))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v164 + 70, v295, 0, 0xFFFFFFFFLL, 7, v174, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 744) = 0;
          int v292 = v303 + 744;
          uint64_t v176 = *(void *)v34 + 4 * v161;
          int v177 = *(_DWORD *)(v176 + 744);
          *(_DWORD *)(v176 + 744) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 744) ^= 0x3FFu;
          uint64_t v178 = *(void *)v34 + 4 * v161;
          int v179 = *(_DWORD *)(v178 + 744);
          *(_DWORD *)(v178 + 744) = v177;
          if (*v175
            || *((_DWORD *)this + 44 * v164 + 178)
            || *((_DWORD *)this + 44 * v164 + 179))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v164 + 70, v292, 0, 0x3FFFFFFFFFFLL, 32, v179, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 408) = 0;
          int v291 = v303 + 408;
          uint64_t v180 = *(void *)v34 + 4 * v161;
          int v181 = *(_DWORD *)(v180 + 408);
          *(_DWORD *)(v180 + 408) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 408) ^= 0xFFFFFF80;
          uint64_t v182 = *(void *)v34 + 4 * v161;
          int v183 = *(_DWORD *)(v182 + 408);
          *(_DWORD *)(v182 + 408) = v181;
          uint64_t v184 = *(void *)(v163 + 40);
          if (*(void *)v184 || *(_DWORD *)(v184 + 152) || *(_DWORD *)(v184 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v184, v291, *(_DWORD *)(v184 + 52), 0xFFFFFFFFLL, 7, v183, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 808) = 0;
          int v290 = v303 + 808;
          uint64_t v185 = *(void *)v34 + 4 * v161;
          int v186 = *(_DWORD *)(v185 + 808);
          *(_DWORD *)(v185 + 808) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 808) ^= 0x3FFu;
          uint64_t v187 = *(void *)v34 + 4 * v161;
          int v188 = *(_DWORD *)(v187 + 808);
          *(_DWORD *)(v187 + 808) = v186;
          uint64_t v189 = *(void *)(v163 + 40);
          if (*(void *)v189 || *(_DWORD *)(v189 + 152) || *(_DWORD *)(v189 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v189, v290, *(_DWORD *)(v189 + 52), 0x3FFFFFFFFFFLL, 32, v188, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*((void *)this + 33) + 4 * v161 + 472) = 0;
          int v288 = v303 + 472;
          uint64_t v190 = *((void *)this + 33) + 4 * v161;
          int v191 = *(_DWORD *)(v190 + 472);
          *(_DWORD *)(v190 + 472) = 0;
          *(_DWORD *)(*((void *)this + 33) + 4 * v161 + 472) ^= 0xFFFFFF80;
          uint64_t v192 = *((void *)this + 33) + 4 * v161;
          int v193 = *(_DWORD *)(v192 + 472);
          *(_DWORD *)(v192 + 472) = v191;
          uint64_t v194 = (void *)((char *)this + 176 * v164 + 4784);
          if (*v194 || *((_DWORD *)this + 44 * v297 + 1234) || *((_DWORD *)this + 44 * v297 + 1235))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v297 + 598, v288, 0, 0xFFFFFFFFLL, 7, v193, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 872) = 0;
          int v287 = v303 + 872;
          uint64_t v195 = *(void *)v34 + 4 * v161;
          int v196 = *(_DWORD *)(v195 + 872);
          *(_DWORD *)(v195 + 872) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 872) ^= 0x3FFu;
          uint64_t v197 = *(void *)v34 + 4 * v161;
          int v198 = *(_DWORD *)(v197 + 872);
          *(_DWORD *)(v197 + 872) = v196;
          if (*v194 || *((_DWORD *)this + 44 * v297 + 1234) || *((_DWORD *)this + 44 * v297 + 1235))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v194, v287, 0, 0x3FFFFFFFFFFLL, 32, v198, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 536) = 0;
          int v199 = v303 + 536;
          uint64_t v200 = *(void *)v34 + 4 * v161;
          int v201 = *(_DWORD *)(v200 + 536);
          *(_DWORD *)(v200 + 536) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 536) ^= 0xFFFFFF80;
          uint64_t v202 = *(void *)v34 + 4 * v161;
          int v203 = *(_DWORD *)(v202 + 536);
          *(_DWORD *)(v202 + 536) = v201;
          uint64_t v204 = *(void *)(v163 + 40);
          if (*(void *)v204 || *(_DWORD *)(v204 + 152) || *(_DWORD *)(v204 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v204, v199, *(_DWORD *)(v204 + 56), 0xFFFFFFFFLL, 7, v203, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 936) = 0;
          int v205 = v303 + 936;
          uint64_t v206 = *(void *)v34 + 4 * v161;
          int v207 = *(_DWORD *)(v206 + 936);
          *(_DWORD *)(v206 + 936) = 0;
          *(_DWORD *)(*(void *)v34 + 4 * v161 + 936) ^= 0x3FFu;
          uint64_t v208 = *(void *)v34 + 4 * v161;
          int v209 = *(_DWORD *)(v208 + 936);
          *(_DWORD *)(v208 + 936) = v207;
          uint64_t v210 = *(void *)(v163 + 40);
          if (*(void *)v210 || *(_DWORD *)(v210 + 152) || *(_DWORD *)(v210 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v210, v205, *(_DWORD *)(v210 + 56), 0x3FFFFFFFFFFLL, 32, v209, 4);
            if (result) {
              return result;
            }
          }
          if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
          {
            uint64_t v211 = *(void *)v34 + 4 * v161;
            int v212 = *(_DWORD *)(v211 + 408);
            *(_DWORD *)(v211 + 408) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 408) ^= 0xFFFFFF80;
            uint64_t v213 = *(void *)v34 + 4 * v161;
            int v214 = *(_DWORD *)(v213 + 408);
            *(_DWORD *)(v213 + 408) = v212;
            uint64_t v215 = *(void *)(v163 + 40);
            if (*(void *)v215 || *(_DWORD *)(v215 + 152) || *(_DWORD *)(v215 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v215, v291, *(_DWORD *)(v215 + 52), 0xFFFFFFFFLL, 7, v214, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v216 = *(void *)v34 + 4 * v161;
            int v217 = *(_DWORD *)(v216 + 808);
            *(_DWORD *)(v216 + 808) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 808) ^= 0x3FFu;
            uint64_t v218 = *(void *)v34 + 4 * v161;
            int v219 = *(_DWORD *)(v218 + 808);
            *(_DWORD *)(v218 + 808) = v217;
            uint64_t v220 = *(void *)(v163 + 40);
            if (*(void *)v220 || *(_DWORD *)(v220 + 152) || *(_DWORD *)(v220 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v220, v290, *(_DWORD *)(v220 + 52), 0x3FFFFFFFFFFLL, 32, v219, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v221 = *(void *)v34 + 4 * v161;
            int v222 = *(_DWORD *)(v221 + 536);
            *(_DWORD *)(v221 + 536) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 536) ^= 0xFFFFFF80;
            uint64_t v223 = *(void *)v34 + 4 * v161;
            int v224 = *(_DWORD *)(v223 + 536);
            *(_DWORD *)(v223 + 536) = v222;
            uint64_t v225 = *(void *)(v163 + 40);
            if (*(void *)v225 || *(_DWORD *)(v225 + 152) || *(_DWORD *)(v225 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v225, v199, *(_DWORD *)(v225 + 56), 0xFFFFFFFFLL, 7, v224, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v226 = *(void *)v34 + 4 * v161;
            int v227 = *(_DWORD *)(v226 + 936);
            *(_DWORD *)(v226 + 936) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 936) ^= 0x3FFu;
            uint64_t v228 = *(void *)v34 + 4 * v161;
            int v229 = *(_DWORD *)(v228 + 936);
            *(_DWORD *)(v228 + 936) = v227;
            uint64_t v230 = *(void *)(v163 + 40);
            if (*(void *)v230 || *(_DWORD *)(v230 + 152) || *(_DWORD *)(v230 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v230, v205, *(_DWORD *)(v230 + 56), 0x3FFFFFFFFFFLL, 32, v229, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v231 = *(void *)v34 + 4 * v161;
            int v232 = *(_DWORD *)(v231 + 344);
            *(_DWORD *)(v231 + 344) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 344) ^= 0xFFFFFF80;
            uint64_t v233 = *(void *)v34 + 4 * v161;
            int v234 = *(_DWORD *)(v233 + 344);
            *(_DWORD *)(v233 + 344) = v232;
            uint64_t v235 = *(void *)(v163 + 40);
            if (*(void *)v235 || *(_DWORD *)(v235 + 152) || *(_DWORD *)(v235 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v235, v295, *(_DWORD *)(v235 + 64), 0xFFFFFFFFLL, 7, v234, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v236 = *(void *)v34 + 4 * v161;
            int v237 = *(_DWORD *)(v236 + 744);
            *(_DWORD *)(v236 + 744) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 744) ^= 0x3FFu;
            uint64_t v238 = *(void *)v34 + 4 * v161;
            int v239 = *(_DWORD *)(v238 + 744);
            *(_DWORD *)(v238 + 744) = v237;
            uint64_t v240 = *(void *)(v163 + 40);
            if (*(void *)v240 || *(_DWORD *)(v240 + 152) || *(_DWORD *)(v240 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v240, v292, *(_DWORD *)(v240 + 64), 0x3FFFFFFFFFFLL, 32, v239, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v241 = *(void *)v34 + 4 * v161;
            int v242 = *(_DWORD *)(v241 + 472);
            *(_DWORD *)(v241 + 472) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 472) ^= 0xFFFFFF80;
            uint64_t v243 = *(void *)v34 + 4 * v161;
            int v244 = *(_DWORD *)(v243 + 472);
            *(_DWORD *)(v243 + 472) = v242;
            uint64_t v245 = *(void *)(v163 + 40);
            if (*(void *)v245 || *(_DWORD *)(v245 + 152) || *(_DWORD *)(v245 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v245, v288, *(_DWORD *)(v245 + 68), 0xFFFFFFFFLL, 7, v244, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v246 = *(void *)v34 + 4 * v161;
            int v247 = *(_DWORD *)(v246 + 872);
            *(_DWORD *)(v246 + 872) = 0;
            *(_DWORD *)(*(void *)v34 + 4 * v161 + 872) ^= 0x3FFu;
            uint64_t v248 = *(void *)v34 + 4 * v161;
            int v249 = *(_DWORD *)(v248 + 872);
            *(_DWORD *)(v248 + 872) = v247;
            uint64_t v250 = *(void *)(v163 + 40);
            if (*(void *)v250 || *(_DWORD *)(v250 + 152) || *(_DWORD *)(v250 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v250, v287, *(_DWORD *)(v250 + 68), 0x3FFFFFFFFFFLL, 32, v249, 4);
              if (result) {
                return result;
              }
            }
          }
          ++v161;
        }
        while (v161 != v298);
      }
    }
    else
    {
      *(_DWORD *)(v16 + 52) |= 0x2000u;
      *((_DWORD *)this + v302 + 116) = 1;
      *(_DWORD *)(*((void *)this + 33) + 280) = 0;
    }
    *(_DWORD *)(*(void *)v34 + 600) = 0;
    *(_DWORD *)(*(void *)v34 + 1000) = 0;
    *(_DWORD *)(*(void *)v34 + 604) = 0;
    *(_DWORD *)(*(void *)v34 + 1004) = 0;
    *(_DWORD *)(*(void *)v34 + 608) = 0;
    *(_DWORD *)(*(void *)v34 + 612) = 0;
    if (v300)
    {
      uint64_t v251 = *((void *)this + 32);
      unsigned int v252 = *(unsigned __int8 *)(v251 + 3004);
      if (*(unsigned char *)(v251 + 3004))
      {
        unsigned int v252 = *(_DWORD *)(v251 + 3016);
        unsigned int v301 = *(_DWORD *)(v251 + 3020);
      }
      else
      {
        unsigned int v301 = 0;
      }
      uint64_t v253 = *(void *)(v251 + 3656);
      uint64_t v304 = *(unsigned int *)(v253 + 56);
      unint64_t v254 = *(unsigned int *)(v253 + 52) + (unint64_t)v252;
      uint64_t v255 = *((void *)this + 33);
      int v256 = *(_DWORD *)(v255 + 600);
      *(_DWORD *)(v255 + 600) = 0;
      *(_DWORD *)(*((void *)this + 33) + 600) ^= 0xFFFFFFC0;
      uint64_t v257 = *((void *)this + 33);
      int v258 = *(_DWORD *)(v257 + 600);
      *(_DWORD *)(v257 + 600) = v256;
      uint64_t v259 = *(void *)(*((void *)this + 32) + 3656);
      unint64_t v260 = HIDWORD(v254);
      if (*(void *)v259 || *(_DWORD *)(v259 + 152) || *(_DWORD *)(v259 + 156))
      {
        if (v260 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 1273;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v259, 600, v254, 0xFFFFFFFFLL, 6, v258, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v261 = *((void *)this + 33);
      int v262 = *(_DWORD *)(v261 + 1000);
      *(_DWORD *)(v261 + 1000) = 0;
      *(_DWORD *)(*((void *)this + 33) + 1000) ^= 0x3FFu;
      uint64_t v263 = *((void *)this + 33);
      int v264 = *(_DWORD *)(v263 + 1000);
      *(_DWORD *)(v263 + 1000) = v262;
      uint64_t v265 = *(void *)(*((void *)this + 32) + 3656);
      if (*(void *)v265 || *(_DWORD *)(v265 + 152) || *(_DWORD *)(v265 + 156))
      {
        if (v260 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 1275;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v265, 1000, v254, 0x3FFFFFFFFFFLL, 32, v264, 4);
        if (result) {
          return result;
        }
      }
      unint64_t v266 = v304 + v301;
      uint64_t v267 = *((void *)this + 33);
      int v268 = *(_DWORD *)(v267 + 604);
      *(_DWORD *)(v267 + 604) = 0;
      *(_DWORD *)(*((void *)this + 33) + 604) ^= 0xFFFFFFC0;
      uint64_t v269 = *((void *)this + 33);
      int v270 = *(_DWORD *)(v269 + 604);
      *(_DWORD *)(v269 + 604) = v268;
      uint64_t v271 = *(void *)(*((void *)this + 32) + 3656);
      unint64_t v272 = HIDWORD(v266);
      if (*(void *)v271 || *(_DWORD *)(v271 + 152) || *(_DWORD *)(v271 + 156))
      {
        if (v272 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 1278;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v271, 604, v266, 0xFFFFFFFFLL, 6, v270, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v273 = *((void *)this + 33);
      int v274 = *(_DWORD *)(v273 + 1004);
      *(_DWORD *)(v273 + 1004) = 0;
      *(_DWORD *)(*((void *)this + 33) + 1004) ^= 0x3FFu;
      uint64_t v275 = *((void *)this + 33);
      int v276 = *(_DWORD *)(v275 + 1004);
      *(_DWORD *)(v275 + 1004) = v274;
      uint64_t v277 = *(void *)(*((void *)this + 32) + 3656);
      if (*(void *)v277 || *(_DWORD *)(v277 + 152) || *(_DWORD *)(v277 + 156))
      {
        if (v272 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 1280;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v277, 1004, v266, 0x3FFFFFFFFFFLL, 32, v276, 4);
        if (result) {
          return result;
        }
      }
      if (v79)
      {
        *(_DWORD *)(*((void *)this + 33) + 608) = *(_DWORD *)(*((void *)this + 33) + 608) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 76) >> 6) & 0xFFF) << 6);
        uint64_t v278 = (_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 80);
      }
      else
      {
        if (CAHDecDaisyAvc::getSWRStride(this, *(unsigned __int16 *)(v16 + 84) - *(unsigned __int16 *)(v16 + 80) + 1, *(unsigned __int8 *)(v5 + 2224 * v3 + 6), *(unsigned __int8 *)(v5 + 2224 * v3 + 7), *(_DWORD *)(v5 + 2224 * v3 + 2212)))return 0xFFFFFFFFLL; {
        *(_DWORD *)(*((void *)this + 33) + 608) = *(_DWORD *)(*((void *)this + 33) + 608) & 0xFFFC003F | (((*((_DWORD *)this + 3448) >> 6) & 0xFFF) << 6);
        }
        uint64_t v278 = (_DWORD *)((char *)this + 13796);
      }
      *(_DWORD *)(*(void *)v34 + 612) = *(_DWORD *)(*(void *)v34 + 612) & 0xFFF8003F | (((*v278 >> 6) & 0x1FFF) << 6);
    }
    uint64_t v279 = *((void *)this + 32);
    if (*(_DWORD *)(v279 + 2360) != 1) {
      return 0;
    }
    uint64_t v280 = *(void *)v34;
    *(_DWORD *)(*(void *)v34 + 1104) = *(_DWORD *)(*(void *)v34 + 1104) & 0xFFFFFFFE | *(_DWORD *)(v279 + 2508) & 1;
    if (*(_DWORD *)(v279 + 2508))
    {
      *(_DWORD *)(v280 + 2080) = 0x10000000;
      *(_DWORD *)(v280 + 2084) = *(_DWORD *)(v279 + 2368);
      *(_DWORD *)(v280 + 2096) = 0;
      *(void *)(v280 + 2088) = 0;
      *(_OWORD *)(v280 + 2100) = *(_OWORD *)(v279 + 2372);
      long long v281 = *(_OWORD *)(v279 + 2404);
      *(_OWORD *)(v280 + 2116) = *(_OWORD *)(v279 + 2388);
      *(_OWORD *)(v280 + 2132) = v281;
    }
    *(_DWORD *)(*(void *)v34 + 1104) = *(_DWORD *)(*(void *)v34 + 1104) & 0xFFFFFFFD | (2
                                                                                              * (*(_DWORD *)(v279 + 2512) & 1));
    if (*(_DWORD *)(v279 + 2512))
    {
      *(_DWORD *)(v280 + 2148) = 0;
      char v282 = *(_DWORD *)(v279 + 2424);
      *(_DWORD *)(v280 + 2148) = (*(_DWORD *)(v279 + 2424) & 1) << 22;
      int v283 = ((*(_DWORD *)(v279 + 2420) & 1) << 23) | ((v282 & 1) << 22) | 0x20000000;
      *(_DWORD *)(v280 + 2148) = v283;
      *(_DWORD *)(v280 + 2148) = v283 | (*(_DWORD *)(v279 + 2364) == 0);
      long long v284 = *(_OWORD *)(v279 + 2428);
      long long v285 = *(_OWORD *)(v279 + 2444);
      *(_OWORD *)(v280 + 2184) = *(_OWORD *)(v279 + 2460);
      *(_OWORD *)(v280 + 2168) = v285;
      *(_OWORD *)(v280 + 2152) = v284;
    }
    *(_DWORD *)(*(void *)v34 + 1104) = *(_DWORD *)(*(void *)v34 + 1104) & 0xFFFFFFFB | (4
                                                                                              * (*(_DWORD *)(v279 + 2516) & 1));
    *(_DWORD *)(*(void *)v34 + 1104) = *(_DWORD *)(*(void *)v34 + 1104) & 0xFFFFFFF7 | (8
                                                                                              * (*(_DWORD *)(v279 + 2520) & 1));
    *(_DWORD *)(*(void *)v34 + 1104) = *(_DWORD *)(*(void *)v34 + 1104) & 0xFFFFFFEF | (16
                                                                                              * (*(_DWORD *)(v279 + 2524) & 1));
    if (*(_DWORD *)(v279 + 2516))
    {
      *(_DWORD *)(v280 + 2204) = 0;
      if (*(_DWORD *)(v279 + 2476) == 2) {
        int v286 = 805306368;
      }
      else {
        int v286 = 813694976;
      }
      *(_DWORD *)(v280 + 2204) = v286;
      memcpy((void *)(v280 + 2208), (const void *)(v279 + 2480), 4 * *(unsigned int *)(v279 + 2476));
      uint64_t result = 0;
      *(_DWORD *)(v279 + 2516) = 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecDaisyAvc::getSWRStride(CAHDecDaisyAvc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1724) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 3448) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 3448) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 3448) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 3448) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3449) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecDaisyAvc::getTileStartCTU(CAHDecDaisyAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 1008);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecDaisyAvc::getTileEndCTU(CAHDecDaisyAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 1008);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecDaisyAvc::getTileIdxAbove(CAHDecDaisyAvc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 1008);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecDaisyAvc::populateAvdWork(CAHDecDaisyAvc *this, unsigned int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v3 + 3312);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 7500);
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    long long v9 = (int *)(v2 + 3160);
    long long v10 = (int *)(v4 + 20);
    __int16 v22 = a2;
    uint64_t v11 = 44 * a2;
    uint64_t v12 = v2 + 956 * v5;
    while (1)
    {
      uint64_t v13 = v12 + v7;
      *(_WORD *)(v13 + 2228) = v8;
      *(_WORD *)(v13 + 2230) = 0;
      *(_WORD *)(v13 + 2232) = v8;
      *(_DWORD *)(v12 + v7 + 2234) = 0;
      int v14 = *v9;
      if (!CAVDAvcDecoder::GetSDataMemInfo(*((void *)this + 32), v8, &v24, &v23)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *v10;
      *(_DWORD *)(v13 + 2256) = *v10;
      *(_DWORD *)(v13 + 2260) = v15;
      *(_DWORD *)(v13 + 2264) = 0;
      if (v7) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = 15;
      }
      *(_WORD *)(v13 + 2238) = v16;
      uint64_t v17 = v24;
      if (*(void *)v24 || *(_DWORD *)(v24 + 152) || *(_DWORD *)(v24 + 156))
      {
        int v18 = v23;
        if (HIDWORD(v23) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          int v26 = "populateAvdWork";
          __int16 v27 = 1024;
          int v28 = 1926;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          int v18 = v23;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 575846, v18, 0x3FFFFFFFFFFLL, 32, -1, 2);
        if (result) {
          return result;
        }
        uint64_t v17 = v24;
        if (*(void *)v24) {
          goto LABEL_17;
        }
      }
      if (*(_DWORD *)(v17 + 152) || *(_DWORD *)(v17 + 156))
      {
LABEL_17:
        int v20 = v23;
        if (HIDWORD(v23))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            int v26 = "populateAvdWork";
            __int16 v27 = 1024;
            int v28 = 1927;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v20 = v23;
          }
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 575848, v20, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
      v9 += 239;
      *(_DWORD *)(v12 + v7 + 2252) = v14;
      ++v8;
      v7 += 44;
      v10 += 462;
      if (v11 == v7)
      {
        uint64_t v2 = *((void *)this + 33);
        __int16 v21 = v22;
        goto LABEL_24;
      }
    }
  }
  else
  {
    __int16 v21 = 0;
LABEL_24:
    uint64_t result = 0;
    *(_WORD *)(v2 + 28) = v21;
    *(_DWORD *)(v2 + 32) = 575824;
  }
  return result;
}

uint64_t CAHDecDaisyAvc::allocWorkBuf_SPS(CAHDecDaisyAvc *this, unsigned char *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v3 = a2[4];
  unsigned int v4 = *((unsigned __int16 *)a2 + 779);
  int v5 = 16 * v4;
  unsigned int v6 = *((unsigned __int16 *)a2 + 780);
  unsigned int v7 = 32 - __clz(((16 * v4 + 47) >> 5) - 1);
  if (v4 < 2) {
    LOBYTE(v7) = 0;
  }
  unsigned int v8 = 32 - __clz(((16 * v6 + 47) >> 5) - 1);
  if (v6 < 2) {
    LOBYTE(v8) = 0;
  }
  unsigned int v9 = ((32 << (v8 + v7)) + 127) & 0xFFFFFF80;
  if (a2[4])
  {
    unsigned int v10 = (v5 + 16) << (v3 == 3);
    unsigned int v11 = ((((16 * v6 + 16) | (v3 == 1)) >> (v3 == 1)) + 15) >> 4;
    if (v10 > 0x20)
    {
      unsigned int v12 = 32 - __clz(((v10 + 31) >> 5) - 1);
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  LOBYTE(v12) = 0;
LABEL_10:
  unsigned int v13 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  unsigned int v15 = ((8 << (v14 + v12)) + 127) & 0xFFFFFF80;
  if (a2[4]) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = 0;
  }
  *((_DWORD *)this + 3440) = v9;
  *((_DWORD *)this + 3441) = v16;
  *((void *)this + 1721) = 0;
  int v17 = (v4 << 6) + 64;
  *((_DWORD *)this + 3446) = v17;
  unsigned int v18 = v17 + v17 * v6;
  *((_DWORD *)this + 3445) = v18;
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    uint64_t v19 = 24;
    int v20 = this;
    while (1)
    {
      uint64_t v21 = *((unsigned int *)this + 3440);
      if (v21
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 35, v21, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_34;
        }
        int v27 = 136315650;
        int v28 = "allocWorkBuf_SPS";
        __int16 v29 = 1024;
        int v30 = 2168;
        __int16 v31 = 2080;
        uint32_t v32 = "HdrY";
        BOOL v25 = &_os_log_internal;
        goto LABEL_33;
      }
      uint64_t v22 = *((unsigned int *)this + 3441);
      if (v22)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 299, v22, 7, 1, 0)) {
          break;
        }
      }
      int v20 = (CAHDecDaisyAvc *)((char *)v20 + 176);
      if (!--v19)
      {
        unsigned int v18 = *((_DWORD *)this + 3445);
        goto LABEL_24;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    int v27 = 136315650;
    int v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2169;
    __int16 v31 = 2080;
    uint32_t v32 = "HdrC";
    BOOL v25 = &_os_log_internal;
    goto LABEL_33;
  }
LABEL_24:
  int v23 = (*MEMORY[0x263EF8AD0] + v18) & ~*MEMORY[0x263EF8AD0];
  *((_DWORD *)this + 3445) = v23;
  uint64_t v24 = (24 * v23);
  if (!v24
    || !CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 849, v24, 7, 1, 32))
  {
    uint64_t result = 0;
    *((_DWORD *)this + 3450) = 0;
    *((_DWORD *)this + 3451) = v5 | (v6 << 20) | 0xF000F;
    return result;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 136315650;
    int v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2187;
    __int16 v31 = 2080;
    uint32_t v32 = "MvColo";
    BOOL v25 = &_os_log_internal;
LABEL_33:
    _os_log_impl(&dword_223977000, v25, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v27, 0x1Cu);
  }
LABEL_34:
  (*(void (**)(CAHDecDaisyAvc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecDaisyAvc::allocWorkBuf_PPS(CAHDecDaisyAvc *this, unsigned char *a2, void *a3, void *a4)
{
  uint64_t v5 = 0;
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v6 = a2[4];
  uint64_t v7 = 16 * *((unsigned __int16 *)a2 + 779);
  unsigned int v8 = (a2[6] + 9) & 0x1FE;
  if (v8 <= ((a2[7] + 9) & 0x1FEu)) {
    unsigned int v8 = (a2[7] + 9) & 0x1FE;
  }
  if (v6 == 3) {
    int v9 = 48;
  }
  else {
    int v9 = 32;
  }
  if (v6 == 3) {
    int v10 = 192;
  }
  else {
    int v10 = 128;
  }
  unint64_t v11 = v7 + 16;
  BOOL v12 = v6 == 0;
  if (a2[4]) {
    int v13 = v9;
  }
  else {
    int v13 = 16;
  }
  unsigned int v14 = (v7 + 31) >> 4;
  uint64_t v15 = ((v8 * v13) >> 3) * v14;
  if (v12) {
    int v16 = 64;
  }
  else {
    int v16 = v10;
  }
  uint64_t v17 = 32 * v14;
  uint64_t v18 = ((v8 * v16) >> 3) * v14;
  uint64_t v19 = 4 * ((v11 >> 2) + (v11 >> 4));
  int v20 = (char *)this + 11824;
  do
  {
    if (CAVDDecoder::allocAVDMem(*((void *)this + 32), &v20[v5], v19, 7, 1, 0))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_25;
      }
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 2335;
      __int16 v27 = 2080;
      int v28 = "AvpAboveInfo";
      uint64_t v21 = &_os_log_internal;
LABEL_24:
      _os_log_impl(&dword_223977000, v21, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
      goto LABEL_25;
    }
    v5 += 176;
  }
  while (v5 != 704);
  if (v15 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 783, v15, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 2339;
      __int16 v27 = 2080;
      int v28 = "IpAbove";
      uint64_t v21 = &_os_log_internal;
      goto LABEL_24;
    }
LABEL_25:
    (*(void (**)(CAHDecDaisyAvc *, void))(*(void *)this + 152))(this, 0);
    return 0xFFFFFFFFLL;
  }
  if (v18 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 794, v18, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 2340;
    __int16 v27 = 2080;
    int v28 = "LfAbovePix";
    uint64_t v21 = &_os_log_internal;
    goto LABEL_24;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 805, v17, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 2341;
    __int16 v27 = 2080;
    int v28 = "LfAboveInfo";
    uint64_t v21 = &_os_log_internal;
    goto LABEL_24;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 728, v17, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 2344;
    __int16 v27 = 2080;
    int v28 = "MvAboveInfo";
    uint64_t v21 = &_os_log_internal;
    goto LABEL_24;
  }
  return result;
}

uint64_t CAHDecDaisyAvc::freeWorkBuf_SPS(CAHDecDaisyAvc *this)
{
  uint64_t v2 = 24;
  int v3 = this;
  do
  {
    uint64_t result = *((void *)this + 32);
    if (!*(_DWORD *)(result + 2648))
    {
      if (*((void *)v3 + 70))
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(result, (uint64_t *)v3 + 70);
        *((void *)v3 + 70) = 0;
      }
      if (*((void *)v3 + 598))
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)v3 + 598);
        *((void *)v3 + 598) = 0;
      }
    }
    int v3 = (CAHDecDaisyAvc *)((char *)v3 + 176);
    --v2;
  }
  while (v2);
  if (*((void *)this + 1698))
  {
    uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 1698);
    *((void *)this + 1698) = 0;
  }
  return result;
}

uint64_t *CAHDecDaisyAvc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = 0;
  unsigned int v4 = this + 1478;
  do
  {
    if (v4[v3])
    {
      this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], &v4[v3]);
      v4[v3] = 0;
    }
    v3 += 22;
  }
  while (v3 != 88);
  if (v2[1566])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1566);
    v2[1566] = 0;
  }
  if (v2[1456])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1456);
    v2[1456] = 0;
  }
  if (v2[1588])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1588);
    v2[1588] = 0;
  }
  if (v2[1610])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1610);
    v2[1610] = 0;
  }
  if (v2[1632])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1632);
    v2[1632] = 0;
  }
  if (v2[1654])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1654);
    v2[1654] = 0;
  }
  if (v2[1676])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1676);
    v2[1676] = 0;
  }
  return this;
}

uint64_t CAHDecDaisyAvc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 9008;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 13776) = a2;
  return this;
}

uint64_t CAHDecDaisyAvc::decodeBuffer(CAHDecDaisyAvc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecDaisyAvc::decodeBufferSize(CAHDecDaisyAvc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecDaisyAvc::decHdrYLinAddr(CAHDecDaisyAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 70);
}

uint64_t CAHDecDaisyAvc::decHdrCLinAddr(CAHDecDaisyAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 598);
}

uint64_t CAHDecDaisyAvc::decHdrYSize(CAHDecDaisyAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 151);
}

uint64_t CAHDecDaisyAvc::decHdrCSize(CAHDecDaisyAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 1207);
}

uint64_t CAHDecDaisyAvc::decHdrYStride(CAHDecDaisyAvc *this)
{
  return *((unsigned int *)this + 3442);
}

uint64_t CAHDecDaisyAvc::decHdrCStride(CAHDecDaisyAvc *this)
{
  return *((unsigned int *)this + 3443);
}

CAHDecIxoraLgh *createIxoraLghDecoder(CAVDLghDecoder *a1)
{
  uint64_t v2 = (CAHDecIxoraLgh *)operator new(0x11C8uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecIxoraLgh::CAHDecIxoraLgh(v2, a1);
  }
  return v3;
}

void sub_223A22EEC(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecIxoraLgh::CAHDecIxoraLgh(CAHDecIxoraLgh *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D741618;
  *(_DWORD *)(v1 + 456) = 151460;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecIxoraLgh::CAHDecIxoraLgh(CAHDecIxoraLgh *this, CAVDLghDecoder *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D741618;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 151460;
  *(_DWORD *)(v4 + 8) = 932;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 151460, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      uint64_t v17 = "CAHDecIxoraLgh";
      __int16 v18 = 1024;
      int v19 = 0;
      uint64_t v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
LABEL_16:
      _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v7);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v8;
    *((void *)this + 34) = v8;
    uint64_t v9 = *((void *)this + 32);
    *(_DWORD *)(v9 + 17552) = 0;
    bzero((void *)(v9 + 11792), 0xB00uLL);
    *(_OWORD *)(v9 + 5712) = 0u;
    bzero((void *)(*((void *)this + 32) + 14608), 0xB00uLL);
    bzero((char *)this + 464, 0xA50uLL);
    int v10 = (_OWORD *)*((void *)this + 32);
    v10[356] = 0u;
    v10[355] = 0u;
    v10[354] = 0u;
    v10[353] = 0u;
    v10[352] = 0u;
    v10[351] = 0u;
    v10[350] = 0u;
    v10[349] = 0u;
    v10[348] = 0u;
    v10[347] = 0u;
    v10[346] = 0u;
    v10[345] = 0u;
    v10[344] = 0u;
    v10[343] = 0u;
    v10[342] = 0u;
    v10[341] = 0u;
    v10[340] = 0u;
    v10[339] = 0u;
    v10[338] = 0u;
    v10[337] = 0u;
    v10[336] = 0u;
    v10[335] = 0u;
    bzero((char *)this + 3104, 0x580uLL);
    for (uint64_t i = 3072; i != 3776; i += 176)
    {
      BOOL v12 = (_OWORD *)(*((void *)this + 32) + i);
      v12[9] = 0uLL;
      v12[10] = 0uLL;
      v12[7] = 0uLL;
      v12[8] = 0uLL;
      v12[5] = 0uLL;
      v12[6] = 0uLL;
      v12[3] = 0uLL;
      v12[4] = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *BOOL v12 = 0uLL;
    }
    do
    {
      int v13 = (_OWORD *)(*((void *)this + 32) + i);
      v13[9] = 0uLL;
      v13[10] = 0uLL;
      v13[7] = 0uLL;
      v13[8] = 0uLL;
      v13[5] = 0uLL;
      v13[6] = 0uLL;
      v13[3] = 0uLL;
      v13[4] = 0uLL;
      v13[1] = 0uLL;
      v13[2] = 0uLL;
      *int v13 = 0uLL;
      i += 176;
    }
    while (i != 5184);
    unsigned int v14 = (_OWORD *)*((void *)this + 32);
    v14[334] = 0u;
    v14[333] = 0u;
    v14[332] = 0u;
    v14[331] = 0u;
    v14[330] = 0u;
    v14[329] = 0u;
    v14[328] = 0u;
    v14[327] = 0u;
    v14[326] = 0u;
    v14[325] = 0u;
    uint64_t v15 = 3072;
    v14[324] = 0u;
    do
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), 1913, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        int v16 = 136315650;
        uint64_t v17 = "CAHDecIxoraLgh";
        __int16 v18 = 1024;
        int v19 = 174;
        __int16 v20 = 2080;
        uint64_t v21 = "probBuf";
        uint64_t v5 = &_os_log_internal;
        int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
        goto LABEL_15;
      }
      v15 += 176;
    }
    while (v15 != 3776);
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 5184), 12284, 7, 1, 0))return; {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    }
    {
      int v16 = 136315650;
      uint64_t v17 = "CAHDecIxoraLgh";
      __int16 v18 = 1024;
      int v19 = 176;
      __int16 v20 = 2080;
      uint64_t v21 = "stateBuf";
      uint64_t v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_15:
      uint32_t v7 = 28;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_223A23324(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecIxoraLgh::~CAHDecIxoraLgh(CAHDecIxoraLgh *this)
{
  *(void *)this = &unk_26D741618;
  CAHDecIxoraLgh::freeWorkBuf_SPS(this);
  uint64_t v2 = *((void *)this + 32);
  for (uint64_t i = 3072; i != 3776; i += 176)
  {
    if (*(void *)(v2 + i))
    {
      CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + i));
      uint64_t v2 = *((void *)this + 32);
      *(void *)(v2 + i) = 0;
    }
  }
  if (*(void *)(v2 + 5184))
  {
    CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + 5184));
    *(void *)(*((void *)this + 32) + 5184) = 0;
  }
  (*(void (**)(CAHDecIxoraLgh *, void))(*(void *)this + 152))(this, 0);
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecIxoraLgh::~CAHDecIxoraLgh(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecIxoraLgh::startPicture(CAHDecIxoraLgh *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  uint64_t v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x24FA4uLL);
    uint64_t v5 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v5 + 16) = a2;
    *(_WORD *)(v5 + 24) = 257;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecIxoraLgh::DecodePicture(CAHDecIxoraLgh *this, uint64_t a2)
{
  if (CAHDecIxoraLgh::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecIxoraLgh *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecIxoraLgh *))(*(void *)this + 48))(this);
  (*(void (**)(CAHDecIxoraLgh *))(*(void *)this + 56))(this);
  CAHDecIxoraLgh::populateTiles(this);
  (*(void (**)(CAHDecIxoraLgh *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecIxoraLgh *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecIxoraLgh::populateTiles(CAHDecIxoraLgh *this)
{
  uint64_t v1 = (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 316)
                    * *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 312));
  if (v1)
  {
    uint64_t v3 = *((void *)this + *((unsigned int *)this + 13) + 34) + 932;
    do
    {
      CAHDecClaryLgh::populateTileRegisters((uint64_t)this, v3);
      v3 += 12;
      --v1;
    }
    while (v1);
  }
  return 0;
}

uint64_t CAHDecIxoraLgh::populateCommonRegisters(CAHDecIxoraLgh *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000002;
  return 0;
}

uint64_t CAHDecIxoraLgh::updateCommonRegisters(CAHDecIxoraLgh *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -889266515;
  return 0;
}

uint64_t CAHDecIxoraLgh::populateSequenceRegisters(CAHDecIxoraLgh *this)
{
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  *(_DWORD *)(v1 + 40) = 0;
  unsigned __int16 v3 = *(_DWORD *)(v2 + 108) - 1;
  *(_DWORD *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 40) = (v3 | ((unsigned __int16)*(_DWORD *)(v2 + 112) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 304);
  if (v4 >= 3) {
    int v5 = 6528;
  }
  else {
    int v5 = ((v4 & 3) << 7) | 0x1800;
  }
  *(_DWORD *)(v1 + 44) = v5;
  unsigned int v6 = v5 & 0xFFF87FFF | (((*(unsigned char *)(v2 + 105) + 8) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFF87FFFF | (((*(unsigned __int8 *)(v2 + 105) + 8) & 0xF) << 19) | 0x1000000;
  *(_DWORD *)(v1 + 44) = v7;
  *(_DWORD *)(v1 + 44) = v7 & 0xFDFFFFFF | (*(unsigned char *)(v2 + 304) == 4);
  return 0;
}

uint64_t CAHDecIxoraLgh::populatePictureRegisters(CAHDecIxoraLgh *this)
{
  uint64_t v394 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v2 + 17560);
  if (*(unsigned char *)(v4 + 37)) {
    BOOL v5 = *(unsigned char *)(v4 + 40) != 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = *(_DWORD *)(v2 + 11748);
  int v7 = *(_DWORD *)(v4 + 100);
  int v388 = *(_DWORD *)(v4 + 96);
  int v387 = 1 << v7;
  char v8 = *(unsigned char *)(v2 + 2675);
  char v9 = *(unsigned char *)(v2 + 2674);
  if (v5) {
    int v10 = 766517248;
  }
  else {
    int v10 = 766509056;
  }
  *(_DWORD *)(v3 + 48) = v10;
  int v11 = v10 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v3 + 48) = v11;
  if (*(_DWORD *)(*((void *)this + 32) + 2644) == 1) {
    int v12 = 1024;
  }
  else {
    int v12 = 1;
  }
  unsigned int v13 = v12 & 0xFFFFFFF0 | (4 * (v8 & 3)) | v9 & 3 | v11 | 0x2E0;
  *(_DWORD *)(v3 + 48) = v13;
  unsigned int v14 = (unsigned char *)*((void *)this + 32);
  int v15 = v13 | ((v14[2652] & 1) << 19);
  *(_DWORD *)(v3 + 48) = v15;
  int v16 = v15 | ((v14[2653] & 1) << 18);
  *(_DWORD *)(v3 + 48) = v16;
  *(_DWORD *)(v3 + 48) = v16 | ((v14[2654] & 1) << 17);
  *(void *)(v3 + 52) = 0x2000000;
  LOWORD(v16) = *(_DWORD *)(v4 + 108) - 1;
  *(_DWORD *)(v3 + 56) = (unsigned __int16)v16;
  *(_DWORD *)(v3 + 56) = ((unsigned __int16)v16 | ((unsigned __int16)*(_DWORD *)(v4 + 112) << 16)) - 0x10000;
  *(void *)(v3 + 60) = 0;
  int v17 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2688) & 7;
  *(_DWORD *)(v3 + 64) = v17;
  unsigned int v18 = v17 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2692) & 1));
  *(_DWORD *)(v3 + 64) = v18;
  unsigned int v19 = v18 & 0xFFFFFF8F | (16 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2696) & 7));
  *(_DWORD *)(v3 + 64) = v19;
  unsigned int v20 = v19 & 0xFFFFFF7F | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2700) & 1) << 7);
  *(_DWORD *)(v3 + 64) = v20;
  unsigned int v21 = v20 & 0xFFFFF8FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2704) & 7) << 8);
  *(_DWORD *)(v3 + 64) = v21;
  unsigned int v22 = v21 & 0xFFFFF7FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2708) & 1) << 11);
  *(_DWORD *)(v3 + 64) = v22;
  unsigned int v23 = v22 & 0xFFFFCFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2712) & 3) << 12);
  *(_DWORD *)(v3 + 64) = v23;
  unsigned int v24 = v23 & 0xFFFFBFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2716) & 1) << 14);
  *(_DWORD *)(v3 + 64) = v24;
  unsigned int v25 = v24 & 0xFFFF7FFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2720) & 1) << 15);
  *(_DWORD *)(v3 + 64) = v25;
  unsigned int v26 = v25 & 0xFFF8FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2724) & 7) << 16);
  *(_DWORD *)(v3 + 64) = v26;
  unsigned int v27 = v26 & 0xFFF7FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2728) & 1) << 19);
  *(_DWORD *)(v3 + 64) = v27;
  unsigned int v28 = v27 & 0xFFEFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2732) & 1) << 20);
  *(_DWORD *)(v3 + 64) = v28;
  unsigned int v29 = v28 & 0xFFDFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2736) & 1) << 21);
  *(_DWORD *)(v3 + 64) = v29;
  unsigned int v30 = v29 & 0xFFBFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2740) & 1) << 22);
  *(_DWORD *)(v3 + 64) = v30;
  unsigned int v31 = v30 & 0xFF7FFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2744) & 1) << 23);
  *(_DWORD *)(v3 + 64) = v31;
  unsigned int v32 = v31 & 0xFEFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2748) & 1) << 24);
  *(_DWORD *)(v3 + 64) = v32;
  unsigned int v33 = v32 & 0xFDFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2752) & 1) << 25);
  *(_DWORD *)(v3 + 64) = v33;
  *(_DWORD *)(v3 + 64) = v33 & 0xFBFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2756) & 1) << 26);
  *(void *)(v3 + 68) = 0;
  if (*(unsigned char *)(v4 + 60))
  {
    int v34 = *(unsigned char *)(v4 + 69) & 0x7F;
    *(_DWORD *)(v3 + 68) = v34;
    unsigned int v35 = v34 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 68) & 0x7F) << 7);
    *(_DWORD *)(v3 + 68) = v35;
    unsigned int v36 = v35 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 67) & 0x7F) << 14);
    *(_DWORD *)(v3 + 68) = v36;
    unsigned int v37 = v36 & 0xF01FFFFF | ((*(unsigned char *)(v4 + 66) & 0x7F) << 21);
    *(_DWORD *)(v3 + 68) = v37;
    *(_DWORD *)(v3 + 68) = v37 & 0x8FFFFFFF | ((*(unsigned char *)(v4 + 59) & 7) << 28);
    int v38 = *(unsigned char *)(v4 + 73) & 0x7F;
    *(_DWORD *)(v3 + 72) = v38;
    unsigned int v39 = v38 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 72) & 0x7F) << 7);
    *(_DWORD *)(v3 + 72) = v39;
    unsigned int v40 = v39 & 0xFFF03FFF | ((*(unsigned char *)(v4 + 58) & 0x3F) << 14);
  }
  else
  {
    *(_DWORD *)(v3 + 68) = (*(unsigned char *)(v4 + 59) & 7) << 28;
    unsigned int v40 = (*(unsigned char *)(v4 + 58) & 0x3F) << 14;
  }
  uint64_t v41 = 0;
  int v389 = 1 << v388;
  int v386 = v7;
  int v385 = 1 << v388 << v7;
  *(_DWORD *)(v3 + 72) = v40;
  *(_DWORD *)(v3 + 76) = 0;
  int v42 = *(unsigned char *)(v4 + 77) & 0x1F;
  *(_DWORD *)(v3 + 76) = v42;
  unsigned int v43 = v42 & 0xFFFFFC1F | (32 * (*(unsigned char *)(v4 + 76) & 0x1F));
  *(_DWORD *)(v3 + 76) = v43;
  unsigned int v44 = v43 & 0xFFFF83FF | ((*(unsigned char *)(v4 + 75) & 0x1F) << 10);
  *(_DWORD *)(v3 + 76) = v44;
  *(_DWORD *)(v3 + 76) = v44 | (*(unsigned __int8 *)(v4 + 74) << 15);
  uint64_t v45 = v3 + 80;
  int v46 = (_WORD *)(v4 + 242);
  uint64_t v47 = v4 + 208;
  do
  {
    int v48 = *(unsigned __int8 *)(v4 + 78);
    *(_DWORD *)(v45 + v41) = 0;
    if (v48)
    {
      BOOL v49 = *(unsigned char *)(v47 + v41) != 0;
      *(_DWORD *)(v45 + v41) = v49;
      BOOL v50 = *(unsigned __int8 *)(v47 + v41 - 1) != 0;
    }
    else
    {
      BOOL v49 = 0;
      BOOL v50 = 0;
    }
    int v51 = v49 | (8 * v50);
    *(_DWORD *)(v45 + v41) = v51;
    unsigned int v52 = v51 & 0xFFFFFFF9 | (2 * (*v46 & 3));
    *(_DWORD *)(v45 + v41) = v52;
    if (v48)
    {
      int v53 = *(unsigned __int8 *)(v47 + v41 - 2);
      int v54 = v52 | ((*(unsigned char *)(v47 + v41 - 2) != 0) << 11);
      *(_DWORD *)(v45 + v41) = v54;
      if (v53) {
        LOWORD(v53) = *(v46 - 1);
      }
      unsigned int v55 = (16 * (v53 & 0x7F)) | v54 & 0xFFFFF80F;
      *(_DWORD *)(v45 + v41) = v55;
      int v48 = *(unsigned __int8 *)(v47 + v41 - 3);
      unsigned int v52 = v55 | ((v48 != 0) << 21);
      *(_DWORD *)(v45 + v41) = v52;
      if (v48) {
        LOWORD(v48) = *(v46 - 2);
      }
    }
    *(_DWORD *)(v45 + v41) = v52 & 0xFFE00FFF | ((v48 & 0x1FF) << 12);
    v41 += 4;
    v46 += 4;
  }
  while (v41 != 32);
  *(_DWORD *)(v3 + 152) = 0x20000;
  uint64_t v390 = v4;
  BOOL v383 = v5;
  if (v5)
  {
    uint64_t v384 = 8;
  }
  else
  {
    int v56 = (_DWORD *)(v3 + 112);
    uint64_t v57 = 2178;
    uint64_t v384 = 3;
    int v58 = &_os_log_internal;
    do
    {
      v56[11] = 0x1000000;
      _DWORD *v56 = 0;
      unsigned __int16 v59 = **(_DWORD **)(*((void *)this + 32) + 8 * v57) - 1;
      _DWORD *v56 = v59;
      _DWORD *v56 = (v59 | ((unsigned __int16)*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 16))
           - 0x10000;
      v56[3] = 0;
      int v60 = (unsigned __int16)((**(_DWORD **)(*((void *)this + 32) + 8 * v57) << 14) / *(_DWORD *)(v4 + 108));
      v56[3] = v60;
      int v61 = v60 | ((unsigned __int16)((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 14)
                                    / *(_DWORD *)(v4 + 112)) << 16);
      v56[3] = v61;
      if ((v60 - 1024) >= 0x7C01 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 545;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
        int v61 = v56[3];
      }
      if ((v61 - 0x4000000) >= 0x7C010000 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 546;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
      }
      ++v57;
      ++v56;
      uint64_t v4 = v390;
    }
    while (v57 != 2181);
  }
  *(void *)(v3 + 144) = 0;
  int v62 = *(unsigned __int16 *)(v4 + 2672);
  *(_DWORD *)(v3 + 144) = v62;
  *(_DWORD *)(v3 + 144) = v62 | (*(_DWORD *)(v4 + 2676) << 16);
  int v63 = *(unsigned __int16 *)(v4 + 2680);
  *(_DWORD *)(v3 + 148) = v63;
  *(_DWORD *)(v3 + 148) = v63 | (*(_DWORD *)(v4 + 2684) << 16);
  int v64 = (char *)this + 464;
  uint64_t v65 = -60;
  do
  {
    *(_DWORD *)(*((void *)this + 33) + v65 + 228) = 0;
    uint64_t v66 = *((void *)this + 33) + v65;
    int v67 = *(_DWORD *)(v66 + 228);
    *(_DWORD *)(v66 + 228) = 0;
    *(_DWORD *)(*((void *)this + 33) + v65 + 228) ^= 0xFFFFFF00;
    uint64_t v68 = *((void *)this + 33) + v65;
    int v69 = *(_DWORD *)(v68 + 228);
    *(_DWORD *)(v68 + 228) = v67;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)v65 + 228, 0, 0xFFFFFFFFLL, 8, v69, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v65 + 288) = 0;
    *(_DWORD *)(*((void *)this + 33) + v65 + 288) = *(_DWORD *)(*((void *)this + 33) + v65 + 288) & 0x800001FF | (((*((_DWORD *)this + 1132) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v65 + 500) = 0;
    uint64_t v71 = *((void *)this + 33) + v65;
    int v72 = *(_DWORD *)(v71 + 500);
    *(_DWORD *)(v71 + 500) = 0;
    *(_DWORD *)(*((void *)this + 33) + v65 + 500) ^= 0x3FFu;
    uint64_t v73 = *((void *)this + 33) + v65;
    int v74 = *(_DWORD *)(v73 + 500);
    *(_DWORD *)(v73 + 500) = v72;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)v65 + 500, 0, 0x3FFFFFFFFFFLL, 32, v74, 4);
      if (result) {
        return result;
      }
    }
    v64 += 176;
    v65 += 4;
  }
  while (v65);
  *(_DWORD *)(*((void *)this + 33) + 288) = 0;
  uint64_t v75 = *((void *)this + 33);
  int v76 = *(_DWORD *)(v75 + 288);
  *(_DWORD *)(v75 + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) ^= 0xFFFFFF00;
  uint64_t v77 = *((void *)this + 33);
  int v78 = *(_DWORD *)(v77 + 288);
  *(_DWORD *)(v77 + 288) = v76;
  uint64_t v79 = *((void *)this + 32);
  if (*(void *)(v79 + 5184) || *(_DWORD *)(v79 + 5336) || *(_DWORD *)(v79 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v79 + 5184), 288, 0, 0xFFFFFFFFLL, 8, v78, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 500) = 0;
  uint64_t v80 = *((void *)this + 33);
  int v81 = *(_DWORD *)(v80 + 500);
  *(_DWORD *)(v80 + 500) = 0;
  *(_DWORD *)(*((void *)this + 33) + 500) ^= 0x3FFu;
  uint64_t v82 = *((void *)this + 33);
  int v83 = *(_DWORD *)(v82 + 500);
  *(_DWORD *)(v82 + 500) = v81;
  uint64_t v84 = *((void *)this + 32);
  if (*(void *)(v84 + 5184) || *(_DWORD *)(v84 + 5336) || *(_DWORD *)(v84 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v84 + 5184), 500, 0, 0x3FFFFFFFFFFLL, 32, v83, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 504) = 0;
  if ((*(unsigned char *)(v3 + 50) & 8) != 0)
  {
    uint64_t v85 = *((void *)this + 33);
    uint64_t v86 = *(void *)(*((void *)this + 32) + 2680);
    long long v392 = 0u;
    long long v393 = 0u;
    memset(buf, 0, sizeof(buf));
    int v87 = (*(_DWORD *)(v85 + 16) & 0xF) << 9;
    *(void *)&buf[0] = v86;
    int v88 = *(_DWORD *)(v85 + 292);
    *(_DWORD *)(v85 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF00;
    uint64_t v89 = *((void *)this + 33);
    int v90 = *(_DWORD *)(v89 + 292);
    *(_DWORD *)(v89 + 292) = v88;
    if (v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 292, v87, 0xFFFFFFFFLL, 8, v90, 4);
      if (result) {
        return result;
      }
      uint64_t v91 = *(void *)&buf[0];
      int v92 = DWORD2(v392);
      LODWORD(v86) = HIDWORD(v392);
    }
    else
    {
      int v92 = 0;
      uint64_t v91 = 0;
    }
    uint64_t v93 = *((void *)this + 33);
    int v94 = *(_DWORD *)(v93 + 504);
    *(_DWORD *)(v93 + 504) = 0;
    *(_DWORD *)(*((void *)this + 33) + 504) ^= 0x3FFu;
    uint64_t v95 = *((void *)this + 33);
    int v96 = *(_DWORD *)(v95 + 504);
    *(_DWORD *)(v95 + 504) = v94;
    if (v91 || v92 || v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 504, v87, 0x3FFFFFFFFFFLL, 32, v96, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 344) = 0;
  uint64_t v97 = *((void *)this + 33);
  int v98 = *(_DWORD *)(v97 + 344);
  *(_DWORD *)(v97 + 344) = 0;
  *(_DWORD *)(*((void *)this + 33) + 344) ^= 0xFFFFFF00;
  uint64_t v99 = *((void *)this + 33);
  int v100 = *(_DWORD *)(v99 + 344);
  *(_DWORD *)(v99 + 344) = v98;
  if (*((void *)this + 454) || *((_DWORD *)this + 946) || *((_DWORD *)this + 947))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 344, 0, 0xFFFFFFFFLL, 8, v100, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 556) = 0;
  uint64_t v101 = *((void *)this + 33);
  int v102 = *(_DWORD *)(v101 + 556);
  *(_DWORD *)(v101 + 556) = 0;
  *(_DWORD *)(*((void *)this + 33) + 556) ^= 0x3FFu;
  uint64_t v103 = *((void *)this + 33);
  int v104 = *(_DWORD *)(v103 + 556);
  *(_DWORD *)(v103 + 556) = v102;
  if (*((void *)this + 454) || *((_DWORD *)this + 946) || *((_DWORD *)this + 947))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 556, 0, 0x3FFFFFFFFFFLL, 32, v104, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  uint64_t v105 = *((void *)this + 33);
  int v106 = *(_DWORD *)(v105 + 296);
  *(_DWORD *)(v105 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0xFFFFFF00;
  uint64_t v107 = *((void *)this + 33);
  int v108 = *(_DWORD *)(v107 + 296);
  *(_DWORD *)(v107 + 296) = v106;
  if (*((void *)this + 410) || *((_DWORD *)this + 858) || *((_DWORD *)this + 859))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 296, 0, 0xFFFFFFFFLL, 8, v108, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 508) = 0;
  uint64_t v109 = *((void *)this + 33);
  int v110 = *(_DWORD *)(v109 + 508);
  *(_DWORD *)(v109 + 508) = 0;
  *(_DWORD *)(*((void *)this + 33) + 508) ^= 0x3FFu;
  uint64_t v111 = *((void *)this + 33);
  int v112 = *(_DWORD *)(v111 + 508);
  *(_DWORD *)(v111 + 508) = v110;
  if (*((void *)this + 410) || *((_DWORD *)this + 858) || *((_DWORD *)this + 859))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 508, 0, 0x3FFFFFFFFFFLL, 32, v112, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 300) = 0;
  uint64_t v113 = *((void *)this + 33);
  int v114 = *(_DWORD *)(v113 + 300);
  *(_DWORD *)(v113 + 300) = 0;
  *(_DWORD *)(*((void *)this + 33) + 300) ^= 0xFFFFFF00;
  uint64_t v115 = *((void *)this + 33);
  int v116 = *(_DWORD *)(v115 + 300);
  *(_DWORD *)(v115 + 300) = v114;
  if (*((void *)this + 432) || *((_DWORD *)this + 902) || *((_DWORD *)this + 903))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 432, 300, 0, 0xFFFFFFFFLL, 8, v116, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 512) = 0;
  uint64_t v117 = *((void *)this + 33);
  int v118 = *(_DWORD *)(v117 + 512);
  *(_DWORD *)(v117 + 512) = 0;
  *(_DWORD *)(*((void *)this + 33) + 512) ^= 0x3FFu;
  uint64_t v119 = *((void *)this + 33);
  int v120 = *(_DWORD *)(v119 + 512);
  *(_DWORD *)(v119 + 512) = v118;
  if (*((void *)this + 432) || *((_DWORD *)this + 902) || *((_DWORD *)this + 903))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 432, 512, 0, 0x3FFFFFFFFFFLL, 32, v120, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 304) = 0;
  *(_DWORD *)(*((void *)this + 33) + 516) = 0;
  *(_DWORD *)(*((void *)this + 33) + 308) = 0;
  uint64_t v121 = *((void *)this + 33);
  int v122 = *(_DWORD *)(v121 + 308);
  *(_DWORD *)(v121 + 308) = 0;
  *(_DWORD *)(*((void *)this + 33) + 308) ^= 0xFFFFFF00;
  uint64_t v123 = *((void *)this + 33);
  int v124 = *(_DWORD *)(v123 + 308);
  *(_DWORD *)(v123 + 308) = v122;
  if (*((void *)this + 476) || *((_DWORD *)this + 990) || *((_DWORD *)this + 991))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 308, 0, 0xFFFFFFFFLL, 8, v124, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 520) = 0;
  uint64_t v125 = *((void *)this + 33);
  int v126 = *(_DWORD *)(v125 + 520);
  *(_DWORD *)(v125 + 520) = 0;
  *(_DWORD *)(*((void *)this + 33) + 520) ^= 0x3FFu;
  uint64_t v127 = *((void *)this + 33);
  int v128 = *(_DWORD *)(v127 + 520);
  *(_DWORD *)(v127 + 520) = v126;
  if (*((void *)this + 476) || *((_DWORD *)this + 990) || *((_DWORD *)this + 991))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 520, 0, 0x3FFFFFFFFFFLL, 32, v128, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 312) = 0;
  uint64_t v129 = *((void *)this + 33);
  int v130 = *(_DWORD *)(v129 + 312);
  *(_DWORD *)(v129 + 312) = 0;
  *(_DWORD *)(*((void *)this + 33) + 312) ^= 0xFFFFFF00;
  uint64_t v131 = *((void *)this + 33);
  int v132 = *(_DWORD *)(v131 + 312);
  *(_DWORD *)(v131 + 312) = v130;
  if (*((void *)this + 498) || *((_DWORD *)this + 1034) || *((_DWORD *)this + 1035))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 312, 0, 0xFFFFFFFFLL, 8, v132, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 524) = 0;
  uint64_t v133 = *((void *)this + 33);
  int v134 = *(_DWORD *)(v133 + 524);
  *(_DWORD *)(v133 + 524) = 0;
  *(_DWORD *)(*((void *)this + 33) + 524) ^= 0x3FFu;
  uint64_t v135 = *((void *)this + 33);
  int v136 = *(_DWORD *)(v135 + 524);
  *(_DWORD *)(v135 + 524) = v134;
  if (*((void *)this + 498) || *((_DWORD *)this + 1034) || *((_DWORD *)this + 1035))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 524, 0, 0x3FFFFFFFFFFLL, 32, v136, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 316) = 0;
  *(_DWORD *)(*((void *)this + 33) + 528) = 0;
  uint64_t v137 = *((void *)this + 33);
  int v138 = *(_DWORD *)(v137 + 316);
  *(_DWORD *)(v137 + 316) = 0;
  *(_DWORD *)(*((void *)this + 33) + 316) ^= 0xFFFFFF00;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 316);
  *(_DWORD *)(v139 + 316) = v138;
  if (*((void *)this + 520) || *((_DWORD *)this + 1078) || *((_DWORD *)this + 1079))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 520, 316, 0, 0xFFFFFFFFLL, 8, v140, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 528);
  *(_DWORD *)(v141 + 528) = 0;
  *(_DWORD *)(*((void *)this + 33) + 528) ^= 0x3FFu;
  uint64_t v143 = *((void *)this + 33);
  int v144 = *(_DWORD *)(v143 + 528);
  *(_DWORD *)(v143 + 528) = v142;
  if (*((void *)this + 520) || *((_DWORD *)this + 1078) || *((_DWORD *)this + 1079))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 520, 528, 0, 0x3FFFFFFFFFFLL, 32, v144, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 320) = 0;
  uint64_t v145 = *((void *)this + 33);
  int v146 = *(_DWORD *)(v145 + 320);
  *(_DWORD *)(v145 + 320) = 0;
  *(_DWORD *)(*((void *)this + 33) + 320) ^= 0xFFFFFF00;
  uint64_t v147 = *((void *)this + 33);
  int v148 = *(_DWORD *)(v147 + 320);
  *(_DWORD *)(v147 + 320) = v146;
  if (*((void *)this + 542) || *((_DWORD *)this + 1122) || *((_DWORD *)this + 1123))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 542, 320, 0, 0xFFFFFFFFLL, 8, v148, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 532) = 0;
  uint64_t v149 = *((void *)this + 33);
  int v150 = *(_DWORD *)(v149 + 532);
  *(_DWORD *)(v149 + 532) = 0;
  *(_DWORD *)(*((void *)this + 33) + 532) ^= 0x3FFu;
  uint64_t v151 = *((void *)this + 33);
  int v152 = *(_DWORD *)(v151 + 532);
  *(_DWORD *)(v151 + 532) = v150;
  if (*((void *)this + 542) || *((_DWORD *)this + 1122) || *((_DWORD *)this + 1123))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 542, 532, 0, 0x3FFFFFFFFFFLL, 32, v152, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 324) = 0;
  uint64_t v153 = *((void *)this + 33);
  int v154 = *(_DWORD *)(v153 + 324);
  *(_DWORD *)(v153 + 324) = 0;
  *(_DWORD *)(*((void *)this + 33) + 324) ^= 0xFFFFFF00;
  uint64_t v155 = *((void *)this + 33);
  int v156 = *(_DWORD *)(v155 + 324);
  *(_DWORD *)(v155 + 324) = v154;
  uint64_t v157 = *((void *)this + 32);
  unsigned int v158 = *(_DWORD *)(v157 + 17568);
  uint64_t v159 = v157 + 176 * v158;
  if (*(void *)(v159 + 3072) || *(_DWORD *)(v157 + 176 * v158 + 3224) || *(_DWORD *)(v157 + 176 * v158 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v159 + 3072), 324, 0, 0xFFFFFFFFLL, 8, v156, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 536) = 0;
  uint64_t v160 = *((void *)this + 33);
  int v161 = *(_DWORD *)(v160 + 536);
  *(_DWORD *)(v160 + 536) = 0;
  *(_DWORD *)(*((void *)this + 33) + 536) ^= 0x3FFu;
  uint64_t v162 = *((void *)this + 33);
  int v163 = *(_DWORD *)(v162 + 536);
  *(_DWORD *)(v162 + 536) = v161;
  uint64_t v164 = *((void *)this + 32);
  unsigned int v165 = *(_DWORD *)(v164 + 17568);
  uint64_t v166 = v164 + 176 * v165;
  if (*(void *)(v166 + 3072) || *(_DWORD *)(v164 + 176 * v165 + 3224) || *(_DWORD *)(v164 + 176 * v165 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v166 + 3072), 536, 0, 0x3FFFFFFFFFFLL, 32, v163, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 328) = 0;
  uint64_t v167 = *((void *)this + 33);
  int v168 = *(_DWORD *)(v167 + 328);
  *(_DWORD *)(v167 + 328) = 0;
  *(_DWORD *)(*((void *)this + 33) + 328) ^= 0xFFFFFF00;
  uint64_t v169 = *((void *)this + 33);
  int v170 = *(_DWORD *)(v169 + 328);
  *(_DWORD *)(v169 + 328) = v168;
  uint64_t v171 = *((void *)this + 32);
  int v172 = *(_DWORD *)(v171 + 5724);
  uint64_t v173 = v171 + 176 * v172;
  if (*(void *)(v173 + 3776) || *(_DWORD *)(v171 + 176 * v172 + 3928) || *(_DWORD *)(v171 + 176 * v172 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v173 + 3776), 328, 0, 0xFFFFFFFFLL, 8, v170, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 540) = 0;
  uint64_t v174 = *((void *)this + 33);
  int v175 = *(_DWORD *)(v174 + 540);
  *(_DWORD *)(v174 + 540) = 0;
  *(_DWORD *)(*((void *)this + 33) + 540) ^= 0x3FFu;
  uint64_t v176 = *((void *)this + 33);
  int v177 = *(_DWORD *)(v176 + 540);
  *(_DWORD *)(v176 + 540) = v175;
  uint64_t v178 = *((void *)this + 32);
  int v179 = *(_DWORD *)(v178 + 5724);
  uint64_t v180 = v178 + 176 * v179;
  if (*(void *)(v180 + 3776) || *(_DWORD *)(v178 + 176 * v179 + 3928) || *(_DWORD *)(v178 + 176 * v179 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v180 + 3776), 540, 0, 0x3FFFFFFFFFFLL, 32, v177, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 332) = 0;
  uint64_t v181 = *((void *)this + 33);
  int v182 = *(_DWORD *)(v181 + 332);
  *(_DWORD *)(v181 + 332) = 0;
  *(_DWORD *)(*((void *)this + 33) + 332) ^= 0xFFFFFF00;
  uint64_t v183 = *((void *)this + 33);
  int v184 = *(_DWORD *)(v183 + 332);
  *(_DWORD *)(v183 + 332) = v182;
  uint64_t v185 = *((void *)this + 32);
  int v186 = *(_DWORD *)(v185 + 5720);
  uint64_t v187 = v185 + 176 * v186;
  if (*(void *)(v187 + 3776) || *(_DWORD *)(v185 + 176 * v186 + 3928) || *(_DWORD *)(v185 + 176 * v186 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v187 + 3776), 332, 0, 0xFFFFFFFFLL, 8, v184, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 544) = 0;
  uint64_t v188 = *((void *)this + 33);
  int v189 = *(_DWORD *)(v188 + 544);
  *(_DWORD *)(v188 + 544) = 0;
  *(_DWORD *)(*((void *)this + 33) + 544) ^= 0x3FFu;
  uint64_t v190 = *((void *)this + 33);
  int v191 = *(_DWORD *)(v190 + 544);
  *(_DWORD *)(v190 + 544) = v189;
  uint64_t v192 = *((void *)this + 32);
  int v193 = *(_DWORD *)(v192 + 5720);
  uint64_t v194 = v192 + 176 * v193;
  if (*(void *)(v194 + 3776) || *(_DWORD *)(v192 + 176 * v193 + 3928) || *(_DWORD *)(v192 + 176 * v193 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v194 + 3776), 544, 0, 0x3FFFFFFFFFFLL, 32, v191, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 336) = 0;
  uint64_t v195 = *((void *)this + 33);
  int v196 = *(_DWORD *)(v195 + 336);
  *(_DWORD *)(v195 + 336) = 0;
  *(_DWORD *)(*((void *)this + 33) + 336) ^= 0xFFFFFF00;
  uint64_t v197 = *((void *)this + 33);
  int v198 = *(_DWORD *)(v197 + 336);
  *(_DWORD *)(v197 + 336) = v196;
  uint64_t v199 = *((void *)this + 32);
  int v200 = *(_DWORD *)(v199 + 5716);
  uint64_t v201 = v199 + 176 * v200;
  if (*(void *)(v201 + 5360) || *(_DWORD *)(v199 + 176 * v200 + 5512) || *(_DWORD *)(v199 + 176 * v200 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v201 + 5360), 336, 0, 0xFFFFFFFFLL, 8, v198, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 548) = 0;
  uint64_t v202 = *((void *)this + 33);
  int v203 = *(_DWORD *)(v202 + 548);
  *(_DWORD *)(v202 + 548) = 0;
  *(_DWORD *)(*((void *)this + 33) + 548) ^= 0x3FFu;
  uint64_t v204 = *((void *)this + 33);
  int v205 = *(_DWORD *)(v204 + 548);
  *(_DWORD *)(v204 + 548) = v203;
  uint64_t v206 = *((void *)this + 32);
  int v207 = *(_DWORD *)(v206 + 5716);
  uint64_t v208 = v206 + 176 * v207;
  if (*(void *)(v208 + 5360) || *(_DWORD *)(v206 + 176 * v207 + 5512) || *(_DWORD *)(v206 + 176 * v207 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v208 + 5360), 548, 0, 0x3FFFFFFFFFFLL, 32, v205, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 340) = 0;
  uint64_t v209 = *((void *)this + 33);
  int v210 = *(_DWORD *)(v209 + 340);
  *(_DWORD *)(v209 + 340) = 0;
  *(_DWORD *)(*((void *)this + 33) + 340) ^= 0xFFFFFF00;
  uint64_t v211 = *((void *)this + 33);
  int v212 = *(_DWORD *)(v211 + 340);
  *(_DWORD *)(v211 + 340) = v210;
  uint64_t v213 = *((void *)this + 32);
  int v214 = *(_DWORD *)(v213 + 5712);
  uint64_t v215 = v213 + 176 * v214;
  if (*(void *)(v215 + 5360) || *(_DWORD *)(v213 + 176 * v214 + 5512) || *(_DWORD *)(v213 + 176 * v214 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v215 + 5360), 340, 0, 0xFFFFFFFFLL, 8, v212, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 552) = 0;
  uint64_t v216 = *((void *)this + 33);
  int v217 = *(_DWORD *)(v216 + 552);
  *(_DWORD *)(v216 + 552) = 0;
  *(_DWORD *)(*((void *)this + 33) + 552) ^= 0x3FFu;
  uint64_t v218 = *((void *)this + 33);
  int v219 = *(_DWORD *)(v218 + 552);
  *(_DWORD *)(v218 + 552) = v217;
  uint64_t v220 = *((void *)this + 32);
  int v221 = *(_DWORD *)(v220 + 5712);
  uint64_t v222 = v220 + 176 * v221;
  if (*(void *)(v222 + 5360) || *(_DWORD *)(v220 + 176 * v221 + 5512) || *(_DWORD *)(v220 + 176 * v221 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v222 + 5360), 552, 0, 0x3FFFFFFFFFFLL, 32, v219, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 348) = 0;
  *(_DWORD *)(*((void *)this + 33) + 560) = 0;
  *(_DWORD *)(*((void *)this + 33) + 352) = 0;
  *(_DWORD *)(*((void *)this + 33) + 564) = 0;
  *(_DWORD *)(*((void *)this + 33) + 356) = 0;
  *(_DWORD *)(*((void *)this + 33) + 568) = 0;
  *(_DWORD *)(*((void *)this + 33) + 360) = 0;
  *(_DWORD *)(*((void *)this + 33) + 572) = 0;
  uint64_t v223 = *((void *)this + 33);
  int v224 = *(_DWORD *)(v223 + 352);
  *(_DWORD *)(v223 + 352) = 0;
  *(_DWORD *)(*((void *)this + 33) + 352) ^= 0xFFFFFF80;
  uint64_t v225 = *((void *)this + 33);
  int v226 = *(_DWORD *)(v225 + 352);
  *(_DWORD *)(v225 + 352) = v224;
  uint64_t v227 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v227 || *(_DWORD *)(v227 + 152) || *(_DWORD *)(v227 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v227, 352, *(_DWORD *)(v227 + 52), 0xFFFFFFFFLL, 7, v226, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v228 = *((void *)this + 33);
  int v229 = *(_DWORD *)(v228 + 564);
  *(_DWORD *)(v228 + 564) = 0;
  *(_DWORD *)(*((void *)this + 33) + 564) ^= 0x3FFu;
  uint64_t v230 = *((void *)this + 33);
  int v231 = *(_DWORD *)(v230 + 564);
  *(_DWORD *)(v230 + 564) = v229;
  uint64_t v232 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v232 || *(_DWORD *)(v232 + 152) || *(_DWORD *)(v232 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v232, 564, *(_DWORD *)(v232 + 52), 0x3FFFFFFFFFFLL, 32, v231, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v233 = *((void *)this + 33);
  int v234 = *(_DWORD *)(v233 + 360);
  *(_DWORD *)(v233 + 360) = 0;
  *(_DWORD *)(*((void *)this + 33) + 360) ^= 0xFFFFFF80;
  uint64_t v235 = *((void *)this + 33);
  int v236 = *(_DWORD *)(v235 + 360);
  *(_DWORD *)(v235 + 360) = v234;
  uint64_t v237 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v237 || *(_DWORD *)(v237 + 152) || *(_DWORD *)(v237 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v237, 360, *(_DWORD *)(v237 + 56), 0xFFFFFFFFLL, 7, v236, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v238 = v3;
  uint64_t v239 = *((void *)this + 33);
  int v240 = *(_DWORD *)(v239 + 572);
  *(_DWORD *)(v239 + 572) = 0;
  *(_DWORD *)(*((void *)this + 33) + 572) ^= 0x3FFu;
  uint64_t v241 = *((void *)this + 33);
  int v242 = *(_DWORD *)(v241 + 572);
  *(_DWORD *)(v241 + 572) = v240;
  uint64_t v243 = *((void *)this + 32);
  uint64_t v244 = *(void *)(v243 + 376 * v6 + 5736);
  if (*(void *)v244 || *(_DWORD *)(v244 + 152) || *(_DWORD *)(v244 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v244, 572, *(_DWORD *)(v244 + 56), 0x3FFFFFFFFFFLL, 32, v242, 4);
    if (result) {
      return result;
    }
    uint64_t v243 = *((void *)this + 32);
  }
  int v245 = *(_DWORD *)(v243 + 2648);
  uint64_t v246 = *((void *)this + 33);
  int v247 = *(_DWORD *)(v246 + 348);
  *(_DWORD *)(v246 + 348) = 0;
  *(_DWORD *)(*((void *)this + 33) + 348) ^= 0xFFFFFF80;
  uint64_t v248 = *((void *)this + 33);
  int v249 = *(_DWORD *)(v248 + 348);
  *(_DWORD *)(v248 + 348) = v247;
  uint64_t v250 = *((void *)this + 32);
  if (v245 == 1)
  {
    uint64_t v251 = *(void *)(v250 + 376 * v6 + 5736);
    if (*(void *)v251 || *(_DWORD *)(v251 + 152) || *(_DWORD *)(v251 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v251, 348, *(_DWORD *)(v251 + 64), 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v252 = *((void *)this + 33);
    int v253 = *(_DWORD *)(v252 + 560);
    *(_DWORD *)(v252 + 560) = 0;
    *(_DWORD *)(*((void *)this + 33) + 560) ^= 0x3FFu;
    uint64_t v254 = *((void *)this + 33);
    int v255 = *(_DWORD *)(v254 + 560);
    *(_DWORD *)(v254 + 560) = v253;
    uint64_t v256 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v256 || *(_DWORD *)(v256 + 152) || *(_DWORD *)(v256 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v256, 560, *(_DWORD *)(v256 + 64), 0x3FFFFFFFFFFLL, 32, v255, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v257 = *((void *)this + 33);
    int v258 = *(_DWORD *)(v257 + 356);
    *(_DWORD *)(v257 + 356) = 0;
    *(_DWORD *)(*((void *)this + 33) + 356) ^= 0xFFFFFF80;
    uint64_t v259 = *((void *)this + 33);
    int v260 = *(_DWORD *)(v259 + 356);
    *(_DWORD *)(v259 + 356) = v258;
    uint64_t v261 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v261 || *(_DWORD *)(v261 + 152) || *(_DWORD *)(v261 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v261, 356, *(_DWORD *)(v261 + 68), 0xFFFFFFFFLL, 7, v260, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v262 = *((void *)this + 33);
    int v263 = *(_DWORD *)(v262 + 568);
    *(_DWORD *)(v262 + 568) = 0;
    *(_DWORD *)(*((void *)this + 33) + 568) ^= 0x3FFu;
    uint64_t v264 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v264 + 568);
    *(_DWORD *)(v264 + 568) = v263;
    uint64_t v266 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v266 || *(_DWORD *)(v266 + 152) || *(_DWORD *)(v266 + 156))
    {
      int v267 = *(_DWORD *)(v266 + 68);
      int v268 = this;
      goto LABEL_207;
    }
  }
  else
  {
    uint64_t v269 = v250 + 376 * v6;
    if (*(void *)(v269 + 5752) || *(_DWORD *)(v250 + 376 * v6 + 5904) || *(_DWORD *)(v250 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v269 + 5752), 348, 0, 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v270 = *((void *)this + 33);
    int v271 = *(_DWORD *)(v270 + 560);
    *(_DWORD *)(v270 + 560) = 0;
    *(_DWORD *)(*((void *)this + 33) + 560) ^= 0x3FFu;
    uint64_t v272 = *((void *)this + 33);
    int v273 = *(_DWORD *)(v272 + 560);
    *(_DWORD *)(v272 + 560) = v271;
    uint64_t v274 = *((void *)this + 32);
    uint64_t v275 = v274 + 376 * v6;
    if (*(void *)(v275 + 5752) || *(_DWORD *)(v274 + 376 * v6 + 5904) || *(_DWORD *)(v274 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v275 + 5752), 560, 0, 0x3FFFFFFFFFFLL, 32, v273, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v276 = *((void *)this + 33);
    int v277 = *(_DWORD *)(v276 + 356);
    *(_DWORD *)(v276 + 356) = 0;
    *(_DWORD *)(*((void *)this + 33) + 356) ^= 0xFFFFFF80;
    uint64_t v278 = *((void *)this + 33);
    int v279 = *(_DWORD *)(v278 + 356);
    *(_DWORD *)(v278 + 356) = v277;
    uint64_t v280 = *((void *)this + 32);
    uint64_t v281 = v280 + 376 * v6;
    if (*(void *)(v281 + 5928) || *(_DWORD *)(v280 + 376 * v6 + 6080) || *(_DWORD *)(v280 + 376 * v6 + 6084))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v281 + 5928), 356, 0, 0xFFFFFFFFLL, 7, v279, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v282 = *((void *)this + 33);
    int v283 = *(_DWORD *)(v282 + 568);
    *(_DWORD *)(v282 + 568) = 0;
    *(_DWORD *)(*((void *)this + 33) + 568) ^= 0x3FFu;
    uint64_t v284 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v284 + 568);
    *(_DWORD *)(v284 + 568) = v283;
    uint64_t v285 = *((void *)this + 32);
    uint64_t v286 = v285 + 376 * v6;
    if (*(void *)(v286 + 5928) || *(_DWORD *)(v285 + 376 * v6 + 6080) || *(_DWORD *)(v285 + 376 * v6 + 6084))
    {
      uint64_t v266 = v286 + 5928;
      int v268 = this;
      int v267 = 0;
LABEL_207:
      uint64_t result = CAHDec::addToPatcherList((uint64_t)v268, (void *)v266, 568, v267, 0x3FFFFFFFFFFLL, 32, v265, 4);
      if (result) {
        return result;
      }
    }
  }
  if (!v383)
  {
    uint64_t v319 = 0;
    uint64_t v320 = 17424;
    do
    {
      uint64_t v321 = *(void *)(*(void *)(*((void *)this + 32) + v320) + 40);
      *(_DWORD *)(*((void *)this + 33) + v319 + 376) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 576) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 388) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 588) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 400) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 600) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 412) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 612) = 0;
      uint64_t v322 = *((void *)this + 33) + v319;
      int v323 = *(_DWORD *)(v322 + 388);
      *(_DWORD *)(v322 + 388) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 388) ^= 0xFFFFFF80;
      uint64_t v324 = *((void *)this + 33) + v319;
      int v325 = *(_DWORD *)(v324 + 388);
      *(_DWORD *)(v324 + 388) = v323;
      uint64_t v326 = *(void *)(v321 + 8);
      if (*(void *)v326 || *(_DWORD *)(v326 + 152) || *(_DWORD *)(v326 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v326, (int)v319 + 388, *(_DWORD *)(v326 + 52), 0xFFFFFFFFLL, 7, v325, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v327 = *((void *)this + 33) + v319;
      int v328 = *(_DWORD *)(v327 + 588);
      *(_DWORD *)(v327 + 588) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 588) ^= 0x3FFu;
      uint64_t v329 = *((void *)this + 33) + v319;
      int v330 = *(_DWORD *)(v329 + 588);
      *(_DWORD *)(v329 + 588) = v328;
      uint64_t v331 = *(void *)(v321 + 8);
      if (*(void *)v331 || *(_DWORD *)(v331 + 152) || *(_DWORD *)(v331 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v331, (int)v319 + 588, *(_DWORD *)(v331 + 52), 0x3FFFFFFFFFFLL, 32, v330, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v332 = *((void *)this + 33) + v319;
      int v333 = *(_DWORD *)(v332 + 412);
      *(_DWORD *)(v332 + 412) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 412) ^= 0xFFFFFF80;
      uint64_t v334 = *((void *)this + 33) + v319;
      int v335 = *(_DWORD *)(v334 + 412);
      *(_DWORD *)(v334 + 412) = v333;
      uint64_t v336 = *(void *)(v321 + 8);
      if (*(void *)v336 || *(_DWORD *)(v336 + 152) || *(_DWORD *)(v336 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v336, (int)v319 + 412, *(_DWORD *)(v336 + 56), 0xFFFFFFFFLL, 7, v335, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v337 = *((void *)this + 33) + v319;
      int v338 = *(_DWORD *)(v337 + 612);
      *(_DWORD *)(v337 + 612) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 612) ^= 0x3FFu;
      uint64_t v339 = *((void *)this + 33) + v319;
      int v340 = *(_DWORD *)(v339 + 612);
      *(_DWORD *)(v339 + 612) = v338;
      uint64_t v341 = *(void *)(v321 + 8);
      if (*(void *)v341 || *(_DWORD *)(v341 + 152) || *(_DWORD *)(v341 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v341, (int)v319 + 612, *(_DWORD *)(v341 + 56), 0x3FFFFFFFFFFLL, 32, v340, 4);
        if (result) {
          return result;
        }
      }
      int v342 = *(_DWORD *)(*((void *)this + 32) + 2648);
      uint64_t v343 = *((void *)this + 33) + v319;
      int v344 = *(_DWORD *)(v343 + 376);
      *(_DWORD *)(v343 + 376) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 376) ^= 0xFFFFFF80;
      uint64_t v345 = *((void *)this + 33) + v319;
      int v346 = *(_DWORD *)(v345 + 376);
      *(_DWORD *)(v345 + 376) = v344;
      if (v342 == 1)
      {
        uint64_t v347 = *(void *)(v321 + 8);
        if (*(void *)v347 || *(_DWORD *)(v347 + 152) || *(_DWORD *)(v347 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v347, (int)v319 + 376, *(_DWORD *)(v347 + 64), 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v348 = *((void *)this + 33) + v319;
        int v349 = *(_DWORD *)(v348 + 576);
        *(_DWORD *)(v348 + 576) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 576) ^= 0x3FFu;
        uint64_t v350 = *((void *)this + 33) + v319;
        int v351 = *(_DWORD *)(v350 + 576);
        *(_DWORD *)(v350 + 576) = v349;
        uint64_t v352 = *(void *)(v321 + 8);
        if (*(void *)v352 || *(_DWORD *)(v352 + 152) || *(_DWORD *)(v352 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v352, (int)v319 + 576, *(_DWORD *)(v352 + 64), 0x3FFFFFFFFFFLL, 32, v351, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v353 = *((void *)this + 33) + v319;
        int v354 = *(_DWORD *)(v353 + 400);
        *(_DWORD *)(v353 + 400) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 400) ^= 0xFFFFFF80;
        uint64_t v355 = *((void *)this + 33) + v319;
        int v356 = *(_DWORD *)(v355 + 400);
        *(_DWORD *)(v355 + 400) = v354;
        uint64_t v357 = *(void *)(v321 + 8);
        if (*(void *)v357 || *(_DWORD *)(v357 + 152) || *(_DWORD *)(v357 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v357, (int)v319 + 400, *(_DWORD *)(v357 + 68), 0xFFFFFFFFLL, 7, v356, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v358 = *((void *)this + 33) + v319;
        int v359 = *(_DWORD *)(v358 + 600);
        *(_DWORD *)(v358 + 600) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 600) ^= 0x3FFu;
        uint64_t v360 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v360 + 600);
        *(_DWORD *)(v360 + 600) = v359;
        uint64_t v362 = *(void *)(v321 + 8);
        if (*(void *)v362 || *(_DWORD *)(v362 + 152) || *(_DWORD *)(v362 + 156))
        {
          int v363 = *(_DWORD *)(v362 + 68);
          int v364 = v319 + 600;
          int v365 = this;
          goto LABEL_298;
        }
      }
      else
      {
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 376, 0, 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v366 = *((void *)this + 33) + v319;
        int v367 = *(_DWORD *)(v366 + 576);
        *(_DWORD *)(v366 + 576) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 576) ^= 0x3FFu;
        uint64_t v368 = *((void *)this + 33) + v319;
        int v369 = *(_DWORD *)(v368 + 576);
        *(_DWORD *)(v368 + 576) = v367;
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 576, 0, 0x3FFFFFFFFFFLL, 32, v369, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v370 = *((void *)this + 33) + v319;
        int v371 = *(_DWORD *)(v370 + 400);
        *(_DWORD *)(v370 + 400) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 400) ^= 0xFFFFFF80;
        uint64_t v372 = *((void *)this + 33) + v319;
        int v373 = *(_DWORD *)(v372 + 400);
        *(_DWORD *)(v372 + 400) = v371;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 200), (int)v319 + 400, 0, 0xFFFFFFFFLL, 7, v373, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v374 = *((void *)this + 33) + v319;
        int v375 = *(_DWORD *)(v374 + 600);
        *(_DWORD *)(v374 + 600) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 600) ^= 0x3FFu;
        uint64_t v376 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v376 + 600);
        *(_DWORD *)(v376 + 600) = v375;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          int v364 = v319 + 600;
          int v365 = this;
          uint64_t v362 = v321 + 200;
          int v363 = 0;
LABEL_298:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v365, (void *)v362, v364, v363, 0x3FFFFFFFFFFLL, 32, v361, 4);
          if (result) {
            return result;
          }
        }
      }
      v320 += 8;
      v319 += 4;
    }
    while (v319 != 12);
  }
  unsigned int v287 = subWidth[*(int *)(*(void *)(*((void *)this + 32) + 17560) + 4)];
  *(_DWORD *)(*((void *)this + 33) + 424) = 0;
  *(_DWORD *)(*((void *)this + 33) + 624) = 0;
  *(_DWORD *)(*((void *)this + 33) + 428) = 0;
  *(_DWORD *)(*((void *)this + 33) + 628) = 0;
  *(_DWORD *)(*((void *)this + 33) + 432) = 0;
  *(_DWORD *)(*((void *)this + 33) + 436) = 0;
  if (*(_DWORD *)(*((void *)this + 32) + 2644))
  {
    uint64_t v288 = *((void *)this + 33);
    int v289 = *(_DWORD *)(v288 + 424);
    *(_DWORD *)(v288 + 424) = 0;
    *(_DWORD *)(*((void *)this + 33) + 424) ^= 0xFFFFFFC0;
    uint64_t v290 = *((void *)this + 33);
    int v291 = *(_DWORD *)(v290 + 424);
    *(_DWORD *)(v290 + 424) = v289;
    uint64_t v292 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v292 || *(_DWORD *)(v292 + 152) || *(_DWORD *)(v292 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v292, 424, *(_DWORD *)(v292 + 52), 0xFFFFFFFFLL, 6, v291, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v293 = *((void *)this + 33);
    int v294 = *(_DWORD *)(v293 + 624);
    *(_DWORD *)(v293 + 624) = 0;
    *(_DWORD *)(*((void *)this + 33) + 624) ^= 0x3FFu;
    uint64_t v295 = *((void *)this + 33);
    int v296 = *(_DWORD *)(v295 + 624);
    *(_DWORD *)(v295 + 624) = v294;
    uint64_t v297 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v297 || *(_DWORD *)(v297 + 152) || *(_DWORD *)(v297 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v297, 624, *(_DWORD *)(v297 + 52), 0x3FFFFFFFFFFLL, 32, v296, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v298 = *((void *)this + 33);
    int v299 = *(_DWORD *)(v298 + 428);
    *(_DWORD *)(v298 + 428) = 0;
    *(_DWORD *)(*((void *)this + 33) + 428) ^= 0xFFFFFFC0;
    uint64_t v300 = *((void *)this + 33);
    int v301 = *(_DWORD *)(v300 + 428);
    *(_DWORD *)(v300 + 428) = v299;
    uint64_t v302 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v302 || *(_DWORD *)(v302 + 152) || *(_DWORD *)(v302 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v302, 428, *(_DWORD *)(v302 + 56), 0xFFFFFFFFLL, 6, v301, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v303 = *((void *)this + 33);
    int v304 = *(_DWORD *)(v303 + 628);
    *(_DWORD *)(v303 + 628) = 0;
    *(_DWORD *)(*((void *)this + 33) + 628) ^= 0x3FFu;
    uint64_t v305 = *((void *)this + 33);
    int v306 = *(_DWORD *)(v305 + 628);
    *(_DWORD *)(v305 + 628) = v304;
    uint64_t v307 = *((void *)this + 32);
    uint64_t v308 = *(void *)(v307 + 11768);
    if (*(void *)v308 || *(_DWORD *)(v308 + 152) || *(_DWORD *)(v308 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v308, 628, *(_DWORD *)(v308 + 56), 0x3FFFFFFFFFFLL, 32, v306, 4);
      if (result) {
        return result;
      }
      uint64_t v307 = *((void *)this + 32);
    }
    if (*(unsigned char *)(v307 + 8))
    {
      *(_DWORD *)(*((void *)this + 33) + 432) = *(_DWORD *)(*((void *)this + 33) + 432) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(v307 + 11768) + 76) >> 6) & 0xFFF) << 6);
      long long v309 = (_DWORD *)(*(void *)(*((void *)this + 32) + 11768) + 80);
    }
    else
    {
      if (CAHDecIxoraLgh::getSWRStride(this, *(unsigned __int16 *)(v238 + 148) + 1, *(unsigned __int8 *)(v390 + 105) - 8, *(unsigned __int8 *)(v390 + 105) - 8, v287))return 0xFFFFFFFFLL; {
      *(_DWORD *)(*((void *)this + 33) + 432) = *(_DWORD *)(*((void *)this + 33) + 432) & 0xFFFC003F | (((*((_DWORD *)this + 1135) >> 6) & 0xFFF) << 6);
      }
      long long v309 = (_DWORD *)((char *)this + 4544);
    }
    *(_DWORD *)(*((void *)this + 33) + 436) = *(_DWORD *)(*((void *)this + 33) + 436) & 0xFFF8003F | (((*v309 >> 6) & 0x1FFF) << 6);
  }
  if (v385 < 2)
  {
    uint64_t v310 = *((void *)this + 33);
    *(_DWORD *)(v310 + 632) = 65537;
    *(_WORD *)(v310 + 636) = 0;
    *(_WORD *)(v310 + 638) = *(_DWORD *)(v390 + 108) >> 6;
    *(_WORD *)(v310 + 766) = 0;
    *(_WORD *)(v310 + 768) = *(_DWORD *)(v390 + 112) >> 6;
    uint64_t v311 = *((void *)this + 32);
  }
  else
  {
    uint64_t v310 = *((void *)this + 33);
    *(_WORD *)(v310 + 632) = v389;
    uint64_t v311 = *((void *)this + 32);
    if (v386 != 31)
    {
      if (v387 <= 1) {
        uint64_t v312 = 1;
      }
      else {
        uint64_t v312 = v387;
      }
      long long v313 = (unsigned char *)(*(void *)(v311 + 17560) + 2786);
      do
      {
        if (!*v313) {
          *(_WORD *)(v310 + 2 * v384 + 766) = *(_DWORD *)(v313 - 26) >> 3;
        }
        v313 += 1792;
        --v312;
      }
      while (v312);
    }
    *(_WORD *)(v310 + 634) = v387;
    if (v388 != 31)
    {
      uint64_t v314 = *(void *)(v311 + 17560);
      if (v389 <= 1) {
        uint64_t v315 = 1;
      }
      else {
        uint64_t v315 = v389;
      }
      long long v316 = (unsigned __int8 *)(v314 + 2786);
      long long v317 = (unsigned __int8 *)(v314 + 2786);
      do
      {
        int v318 = *v317;
        v317 += 28;
        if (!v318) {
          *(_WORD *)(v310 + 2 * v384 + 636) = *(_DWORD *)(v316 - 18) >> 3;
        }
        long long v316 = v317;
        --v315;
      }
      while (v315);
    }
  }
  if (*(_DWORD *)(v311 + 2360) != 1) {
    return 0;
  }
  *(_DWORD *)(v310 + 780) = *(_DWORD *)(v310 + 780) & 0xFFFFFFFE | *(_DWORD *)(v311 + 2508) & 1;
  if (*(_DWORD *)(v311 + 2508))
  {
    *(_DWORD *)(v310 + 788) = 0x10000000;
    *(_DWORD *)(v310 + 792) = *(_DWORD *)(v311 + 2368);
    *(void *)(v310 + 800) = 0;
    *(_DWORD *)(v310 + 796) = 0;
    *(_OWORD *)(v310 + 808) = *(_OWORD *)(v311 + 2372);
    long long v377 = *(_OWORD *)(v311 + 2388);
    *(_OWORD *)(v310 + 840) = *(_OWORD *)(v311 + 2404);
    *(_OWORD *)(v310 + 824) = v377;
  }
  *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v311 + 2512) & 1));
  if (*(_DWORD *)(v311 + 2512))
  {
    *(_DWORD *)(v310 + 856) = 0;
    char v378 = *(_DWORD *)(v311 + 2424);
    *(_DWORD *)(v310 + 856) = (*(_DWORD *)(v311 + 2424) & 1) << 22;
    int v379 = ((*(_DWORD *)(v311 + 2420) & 1) << 23) | ((v378 & 1) << 22) | 0x20000000;
    *(_DWORD *)(v310 + 856) = v379;
    *(_DWORD *)(v310 + 856) = v379 | (*(_DWORD *)(v311 + 2364) == 0);
    long long v380 = *(_OWORD *)(v311 + 2428);
    long long v381 = *(_OWORD *)(v311 + 2444);
    *(_OWORD *)(v310 + 892) = *(_OWORD *)(v311 + 2460);
    *(_OWORD *)(v310 + 876) = v381;
    *(_OWORD *)(v310 + 860) = v380;
  }
  *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v311 + 2516) & 1));
  *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v311 + 2520) & 1));
  *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v311 + 2524) & 1));
  if (!*(_DWORD *)(v311 + 2516)) {
    return 0;
  }
  *(_DWORD *)(v310 + 912) = 0;
  if (*(_DWORD *)(v311 + 2476) == 2) {
    int v382 = 805306368;
  }
  else {
    int v382 = 813694976;
  }
  *(_DWORD *)(v310 + 912) = v382;
  memcpy((void *)(v310 + 916), (const void *)(v311 + 2480), 4 * *(unsigned int *)(v311 + 2476));
  uint64_t result = 0;
  *(_DWORD *)(v311 + 2516) = 0;
  return result;
}

uint64_t CAHDecIxoraLgh::getSWRStride(CAHDecIxoraLgh *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *(void *)((char *)this + 4540) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 1136) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        unsigned int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecIxoraLgh::getTileStartCTU(CAHDecIxoraLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 632);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecIxoraLgh::getTileEndCTU(CAHDecIxoraLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 632);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecIxoraLgh::populateAvdWork(CAHDecIxoraLgh *this)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  unint64_t v3 = *(unsigned int *)(v2 + 312);
  if (v3)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    LODWORD(v7) = 0;
    int v8 = 0;
    uint64_t v9 = v1 + 4004;
    uint64_t v39 = *(void *)(v2 + 16);
    unint64_t v40 = 0;
    unint64_t v10 = *(unsigned int *)(v2 + 316);
    unint64_t v11 = v10;
    uint64_t v37 = v9;
    uint64_t v38 = *(void *)(*((void *)this + 32) + 17560);
    do
    {
      uint64_t v36 = v5;
      if (v11)
      {
        unint64_t v12 = 0;
        do
        {
          uint64_t v13 = *((void *)this + 32);
          uint64_t v14 = *(void *)(v13 + 17560);
          uint64_t v15 = v14 + v5;
          if (!*(unsigned char *)(v14 + v5 + 2786))
          {
            *(_WORD *)(v9 + 4) = v8;
            *(_WORD *)(v9 + 6) = 0;
            *(_WORD *)(v9 + 10) = v6;
            int v41 = v6;
            int v42 = v8;
            if (*(unsigned char *)(v13 + 2834)) {
              uint64_t v16 = *(void *)(v13 + 2840);
            }
            else {
              uint64_t v16 = *(void *)(v13 + 1048) + 8;
            }
            unint64_t v17 = v39 + *(unsigned int *)(v15 + 2780) - *(void *)v16;
            int v18 = 36 * v7;
            unint64_t v19 = HIDWORD(v17);
            if (*(void *)v16 || *(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1102;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 4022, v17, 0x3FFFFFFFFFFLL, 32, -1, 2);
              if (result) {
                return result;
              }
              if (*(void *)v16) {
                goto LABEL_46;
              }
            }
            if (*(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
LABEL_46:
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1103;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 4024, v17, 0xFFFFFFFFLL, 0, -1, 4);
              if (result) {
                return result;
              }
            }
            unsigned int v21 = (_DWORD *)(v14 + v5);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v14 + v5 + 2776);
            int v22 = *(_DWORD *)(v15 + 2760);
            int v23 = v22 + 7;
            if (v22 >= 0) {
              int v23 = *(_DWORD *)(v15 + 2760);
            }
            int v24 = v21[692];
            *(_DWORD *)(v9 + 28) = (v23 << 13) & 0xFFFF0000 | (v24 / 8);
            int v25 = v21[691];
            int v27 = v25 - 1;
            BOOL v26 = v25 < 1;
            int v28 = v25 + 6;
            if (!v26) {
              int v28 = v27;
            }
            unsigned int v29 = (v28 << 13) & 0xFFFF0000;
            int v30 = v21[693];
            int v31 = v30 - 1;
            BOOL v26 = v30 < 1;
            int v32 = v30 + 6;
            if (!v26) {
              int v32 = v31;
            }
            *(_DWORD *)(v9 + 32) = v29 | (v32 >> 3);
            if (v22 + v24) {
              __int16 v33 = 4;
            }
            else {
              __int16 v33 = 5;
            }
            *(_WORD *)(v9 + 12) = v33;
            unint64_t v3 = *(unsigned int *)(v38 + 312);
            unint64_t v10 = *(unsigned int *)(v38 + 316);
            if (v12 == v10 && v40 == v3) {
              __int16 v35 = 5;
            }
            else {
              __int16 v35 = 4;
            }
            *(_WORD *)(v9 + 14) = v35;
            int v6 = v41 + 1;
            int v8 = v42 + 1;
            v9 += 36;
            unint64_t v7 = 0x8E38E38E38E38E39 * ((v9 - v37) >> 2);
          }
          ++v12;
          v5 += 28;
          unint64_t v11 = v10;
        }
        while (v12 < v10);
      }
      uint64_t v5 = v36 + 1792;
      ++v40;
    }
    while (v40 < v3);
    uint64_t v1 = *((void *)this + 33);
  }
  else
  {
    LOWORD(v8) = 0;
  }
  uint64_t result = 0;
  *(_WORD *)(v1 + 26) = v8;
  *(_DWORD *)(v1 + 32) = 4004;
  return result;
}

unsigned __int8 *CAHDecIxoraLgh::getTileAddr(CAHDecIxoraLgh *this, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  if (*(unsigned char *)(v2 + 2834))
  {
    unint64_t v3 = *(void **)(v2 + 2840);
    uint64_t v4 = &a2[-*v3];
    uint64_t v5 = &v4[v3[2]];
    if ((unint64_t)v5 >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1203;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      unint64_t v7 = (void *)(*(void *)(*((void *)this + 32) + 2840) + 16);
      return &v4[*v7];
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 1048);
    uint64_t v9 = *(void *)(v8 + 24);
    unint64_t v7 = (void *)(v8 + 24);
    uint64_t v4 = &a2[-*(v7 - 2)];
    uint64_t v5 = &v4[v9];
    if ((unint64_t)&v4[v9] >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1220;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      return &v4[*v7];
    }
  }
  return v5;
}

uint64_t CAHDecIxoraLgh::allocWorkBuf_SPS(CAHDecIxoraLgh *this, int *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = *a2 + 31;
  if (*a2 < -31) {
    int v5 = *a2 + 62;
  }
  unsigned int v6 = v5 >> 5;
  int v7 = v4 + 31;
  if (v4 < -31) {
    int v7 = v4 + 62;
  }
  unsigned int v8 = v7 >> 5;
  unsigned int v9 = 32 - __clz(v6 - 1);
  if (v6 >= 2) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  unsigned int v11 = 32 - __clz(v8 - 1);
  if (v8 >= 2) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unsigned int v13 = ((32 << (v12 + v10)) + 127) & 0xFFFFFF80;
  int v14 = 2 * v3 + 62;
  if (2 * v3 >= -31) {
    int v14 = 2 * v3 + 31;
  }
  unsigned int v15 = v14 >> 5;
  int v16 = v4 + 15;
  if (v4 < -15) {
    int v16 = v4 + 30;
  }
  unsigned int v17 = v16 >> 4;
  unsigned int v18 = 32 - __clz(v15 - 1);
  if (v15 >= 2) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  unsigned int v20 = 32 - __clz(v17 - 1);
  if (v17 >= 2) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  *((_DWORD *)this + 1128) = v13;
  *((_DWORD *)this + 1129) = ((8 << (v19 + v21)) + 127) & 0xFFFFFF80;
  unsigned int v22 = ((v4 + 63) >> 6) * ((v3 + 63) >> 6);
  *((_DWORD *)this + 1133) = 576 * v22;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_28:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      char v29 = v28;
      uint64_t v30 = *((unsigned int *)this + 1133);
      if (v30
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 176 * v27 + 5360), v30, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1426;
        __int16 v39 = 2080;
        unint64_t v40 = "MvColo";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v29 & 1) != 0);
    unsigned int v31 = 24 * v22;
    *((_DWORD *)this + 1137) = 24 * v22;
    uint64_t v32 = 3776;
    if (!v31) {
      goto LABEL_34;
    }
LABEL_33:
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v32), v31, 7, 1, 0))
    {
LABEL_34:
      while (v32 != 5008)
      {
        unsigned int v31 = *((_DWORD *)this + 1137);
        v32 += 176;
        if (v31) {
          goto LABEL_33;
        }
      }
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1431;
    __int16 v39 = 2080;
    unint64_t v40 = "segMap";
    __int16 v33 = &_os_log_internal;
  }
  else
  {
    uint64_t v23 = 14608;
    uint64_t v24 = 16;
    while (1)
    {
      uint64_t v25 = *((unsigned int *)this + 1128);
      if (v25
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23 - 2816), v25, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1410;
        __int16 v39 = 2080;
        unint64_t v40 = "HdrY";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      uint64_t v26 = *((unsigned int *)this + 1129);
      if (v26)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23), v26, 7, 1, 0))break; {
      }
        }
      v23 += 176;
      if (!--v24) {
        goto LABEL_28;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1415;
    __int16 v39 = 2080;
    unint64_t v40 = "HdrC";
    __int16 v33 = &_os_log_internal;
  }
LABEL_46:
  _os_log_impl(&dword_223977000, v33, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v35, 0x1Cu);
LABEL_47:
  (*(void (**)(CAHDecIxoraLgh *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecIxoraLgh::allocWorkBuf_PPS(CAHDecIxoraLgh *this, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = *(void *)(v5 + 17560);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 100);
  unsigned int v9 = (*(unsigned __int8 *)(v6 + 105) + 1) & 0x1FE;
  if (v7 == 3) {
    int v10 = 48;
  }
  else {
    int v10 = 32;
  }
  if (!v7) {
    int v10 = 16;
  }
  int v12 = *(_DWORD *)(v6 + 108);
  int v11 = *(_DWORD *)(v6 + 112);
  unsigned int v13 = (v12 + 15) >> 4;
  int v14 = ~(-1 << *(_DWORD *)(v6 + 96));
  signed int v15 = v13 * ((v10 * v9) >> 3) + (v14 << 7);
  if (v15)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 205, v15, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1507;
        __int16 v27 = 2080;
        char v28 = "IpAbove";
        int v16 = &_os_log_internal;
LABEL_34:
        _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  int v17 = 16 * v9;
  if ((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 != 192)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 216, (int)((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 - 192), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1510;
        __int16 v27 = 2080;
        char v28 = "LfAbovePix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
LABEL_35:
      (*(void (**)(CAHDecIxoraLgh *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  signed int v18 = 288 * ((v12 + 63) >> 6) + (v14 << 7);
  if (v18)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 227, v18, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1516;
        __int16 v27 = 2080;
        char v28 = "LfAboveInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  unsigned int v19 = (v11 + 7) >> 3;
  if (v19 * v17)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 238, (int)(v19 * v17), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1522;
        __int16 v27 = 2080;
        char v28 = "LfLeftPix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  uint64_t v20 = ((v11 + 63) >> 2) & 0x3FFFFFF0;
  if (v20)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 249, v20, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1530;
        __int16 v27 = 2080;
        char v28 = "LfLeftInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 260, (int)(24 * v13 + 30), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 1538;
      __int16 v27 = 2080;
      char v28 = "SwLeftPix";
      int v16 = &_os_log_internal;
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  int v22 = 192 * v9 + (v19 + 2) * (((v9 >> 1) << 8) | 8);
  if (!v22) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 271, v22, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 1544;
    __int16 v27 = 2080;
    char v28 = "AZLeftPix";
    int v16 = &_os_log_internal;
    goto LABEL_34;
  }
  return result;
}

uint64_t CAHDecIxoraLgh::freeWorkBuf_SPS(CAHDecIxoraLgh *this)
{
  uint64_t result = *((void *)this + 32);
  if (!*(_DWORD *)(result + 2648))
  {
    uint64_t v3 = 14608;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = (uint64_t *)(result + v3 - 2816);
      if (*v5)
      {
        CAVDDecoder::deallocAVDMem(result, v5);
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3 - 2816) = 0;
      }
      if (*(void *)(result + v3))
      {
        CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + v3));
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3) = 0;
      }
      v3 += 176;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = result + 176 * v6;
    if (*(void *)(v9 + 5360))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(v9 + 5360));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + 176 * v6 + 5360) = 0;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  for (uint64_t i = 3776; i != 5184; i += 176)
  {
    if (*(void *)(result + i))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + i));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + i) = 0;
    }
  }
  return result;
}

uint64_t *CAHDecIxoraLgh::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[432])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 432);
    v2[432] = 0;
  }
  if (v2[454])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 454);
    v2[454] = 0;
  }
  if (v2[410])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 410);
    v2[410] = 0;
  }
  if (v2[476])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 476);
    v2[476] = 0;
  }
  if (v2[498])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 498);
    v2[498] = 0;
  }
  if (v2[520])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 520);
    v2[520] = 0;
  }
  if (v2[542])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 542);
    v2[542] = 0;
  }
  return this;
}

uint64_t CAHDecIxoraLgh::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 4528) = a2;
  return this;
}

uint64_t CAHDecIxoraLgh::initPicture(CAHDecIxoraLgh *this)
{
  return 0;
}

uint64_t CAHDecIxoraLgh::populateSlices(CAHDecIxoraLgh *this)
{
  return 0;
}

uint64_t CAHDecIxoraLgh::getTileIdxAbove(CAHDecIxoraLgh *this)
{
  return 0;
}

uint64_t CAHDecIxoraLgh::decodeBuffer(CAHDecIxoraLgh *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecIxoraLgh::decodeBufferSize(CAHDecIxoraLgh *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecIxoraLgh::decHdrYLinAddr(CAHDecIxoraLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 11792);
}

uint64_t CAHDecIxoraLgh::decHdrCLinAddr(CAHDecIxoraLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 14608);
}

uint64_t CAHDecIxoraLgh::decHdrYSize(CAHDecIxoraLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 11836);
}

uint64_t CAHDecIxoraLgh::decHdrCSize(CAHDecIxoraLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 14652);
}

uint64_t CAHDecIxoraLgh::decHdrYStride(CAHDecIxoraLgh *this)
{
  return *((unsigned int *)this + 1130);
}

uint64_t CAHDecIxoraLgh::decHdrCStride(CAHDecIxoraLgh *this)
{
  return *((unsigned int *)this + 1131);
}

void CAHDecIxoraLgh::clearSegBuffer(CAHDecIxoraLgh *this)
{
}

CAHDecIxoraAvx *createIxoraAvxDecoder(void **a1)
{
  uint64_t v2 = (CAHDecIxoraAvx *)operator new(0x1690uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecIxoraAvx::CAHDecIxoraAvx(v2, a1);
  }
  return v3;
}

void sub_223A27144(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecIxoraAvx::CAHDecIxoraAvx(CAHDecIxoraAvx *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D741768;
  *(_DWORD *)(v1 + 456) = 198144;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecIxoraAvx::CAHDecIxoraAvx(CAHDecIxoraAvx *this, void **a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D741768;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 198144;
  *(_DWORD *)(v4 + 8) = 1536;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 2;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 198144, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315394;
      int v22 = "CAHDecIxoraAvx";
      __int16 v23 = 1024;
      int v24 = 0;
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  uint64_t v8 = *((void *)this + 35);
  *((_DWORD *)this + 13) = 0;
  *((void *)this + 33) = v8;
  *((void *)this + 34) = v8;
  bzero(a2 + 384, 0x1340uLL);
  bzero(a2[1000], 0x1500uLL);
  bzero((char *)this + 464, 0x14A0uLL);
  bzero(a2 + 1001, 0x1E18uLL);
  uint64_t v9 = 0;
  *((void *)this + 718) = 0;
  *((_OWORD *)this + 360) = 0u;
  uint64_t v10 = 9168;
  *((_DWORD *)this + 1441) = 9168;
  uint64_t v11 = *((void *)this + 32);
LABEL_5:
  if (CAVDDecoder::allocAVDMem(v11, (_OWORD *)(v11 + v9 + 10304), v10, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315650;
      int v22 = "CAHDecIxoraAvx";
      __int16 v23 = 1024;
      int v24 = 173;
      __int16 v25 = 2080;
      int v26 = "probs_Buf";
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v11 = *((void *)this + 32);
  while (1)
  {
    uint64_t v12 = *(void *)(v11 + v9 + 10304);
    if (v12) {
      *(void *)(v11 + v9 + 10296) = v12;
    }
    if (v9 == 2208) {
      break;
    }
    uint64_t v10 = *((unsigned int *)this + 1441);
    v9 += 184;
    if (*((_DWORD *)this + 1441)) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = *(void *)(v11 + 42392);
  if (v13)
  {
    uint64_t v14 = 0;
    signed int v15 = (void *)(v13 + 1960);
    do
    {
      *signed int v15 = v11 + 10296 + v14;
      v14 += 184;
      v15 += 254;
    }
    while (v14 != 2392);
  }
  uint64_t v16 = 0;
  for (uint64_t i = 12696; ; i += 184)
  {
    uint64_t v18 = *((unsigned int *)this + 1441);
    uint64_t v19 = *((void *)this + 32);
    if (v18) {
      break;
    }
LABEL_19:
    uint64_t v20 = *(void *)(v19 + i);
    if (v20) {
      *(void *)(v19 + i - 8) = v20;
    }
    if (*(void *)(v19 + 15952)) {
      AV1_Syntax::Set_Default_Frame_Context_Info(*(void *)(v19 + 15952), (uint64_t *)(v19 + i - 8), v16);
    }
    if (++v16 == 4) {
      return;
    }
  }
  if (!CAVDDecoder::allocAVDMem(v19, (_OWORD *)(v19 + i), v18, 7, 1, 0))
  {
    uint64_t v19 = *((void *)this + 32);
    goto LABEL_19;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 136315650;
    int v22 = "CAHDecIxoraAvx";
    __int16 v23 = 1024;
    int v24 = 188;
    __int16 v25 = 2080;
    int v26 = "probs_Buf";
    uint64_t v5 = &_os_log_internal;
    uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_29:
    uint32_t v7 = 28;
LABEL_30:
    _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v21, v7);
  }
LABEL_31:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_223A2752C(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecIxoraAvx::~CAHDecIxoraAvx(CAHDecIxoraAvx *this)
{
  uint64_t v2 = 0;
  *(void *)this = &unk_26D741768;
  uint64_t v3 = *((void *)this + 32);
  do
  {
    if (*(void *)(v3 + v2 + 10304))
    {
      CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + v2 + 10304));
      uint64_t v3 = *((void *)this + 32);
      *(_OWORD *)(v3 + v2 + 10296) = 0u;
    }
    v2 += 184;
  }
  while (v2 != 2392);
  for (uint64_t i = 0; i != 736; i += 184)
  {
    if (*(void *)(v3 + i + 12696))
    {
      CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 12696));
      uint64_t v3 = *((void *)this + 32);
      *(_OWORD *)(v3 + i + 12688) = 0u;
    }
  }
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(v3, (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecIxoraAvx::~CAHDecIxoraAvx(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecIxoraAvx::DecodePicture(CAHDecIxoraAvx *this, uint64_t a2)
{
  if (CAHDecTansyAvx::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecIxoraAvx *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecIxoraAvx *))(*(void *)this + 48))(this);
  if ((*(unsigned int (**)(CAHDecIxoraAvx *))(*(void *)this + 56))(this)
    || CAHDecIxoraAvx::populateAddressRegisters(this))
  {
    return 4;
  }
  CAHDecIxoraAvx::populateDecryptionRegisters(this);
  CAHDecIxoraAvx::populateTiles(this);
  CAHDecIxoraAvx::populateAvxVPDependency((CAVDAvxDecoder **)this);
  (*(void (**)(CAHDecIxoraAvx *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecIxoraAvx *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecIxoraAvx::populateAddressRegisters(CAHDecIxoraAvx *this)
{
  uint64_t v2 = 0;
  uint64_t v352 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 264;
  uint64_t v4 = (char *)this + 464;
  do
  {
    *(_DWORD *)(*(void *)v3 + v2 + 464) = 0;
    uint64_t v5 = *(void *)v3 + v2;
    int v6 = *(_DWORD *)(v5 + 464);
    *(_DWORD *)(v5 + 464) = 0;
    *(_DWORD *)(*(void *)v3 + v2 + 464) ^= 0xFFFFFF00;
    uint64_t v7 = *(void *)v3 + v2;
    int v8 = *(_DWORD *)(v7 + 464);
    *(_DWORD *)(v7 + 464) = v6;
    if (*(void *)v4 || *((_DWORD *)v4 + 38) || *((_DWORD *)v4 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v4, (int)v2 + 464, 0, 0xFFFFFFFFLL, 8, v8, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v3 + v2 + 524) = 0;
    uint64_t v10 = *(void *)v3 + v2;
    int v11 = *(_DWORD *)(v10 + 524);
    *(_DWORD *)(v10 + 524) = 0;
    *(_DWORD *)(*(void *)v3 + v2 + 524) ^= 0x3FFu;
    uint64_t v12 = *(void *)v3 + v2;
    int v13 = *(_DWORD *)(v12 + 524);
    *(_DWORD *)(v12 + 524) = v11;
    if (*(void *)v4 || *((_DWORD *)v4 + 38) || *((_DWORD *)v4 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v4, (int)v2 + 524, 0, 0x3FFFFFFFFFFLL, 32, v13, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v2 + 584) = 0;
    *(_DWORD *)(*((void *)this + 33) + v2 + 584) = *(_DWORD *)(*((void *)this + 33) + v2 + 584) & 0x800001FF | (((*((_DWORD *)this + 1440) >> 9) & 0x3FFFFF) << 9);
    v2 += 4;
    v4 += 176;
  }
  while (v2 != 60);
  uint64_t v14 = *((void *)this + 32);
  uint64_t v15 = *(void *)(*(void *)(v14 + 15944) + 79288);
  uint64_t v16 = *(void *)(*(void *)(*(void *)(v14 + 42424) + 1920) + 1960);
  *(_DWORD *)(*((void *)this + 33) + 644) = 0;
  uint64_t v17 = *((void *)this + 33);
  int v18 = *(_DWORD *)(v17 + 644);
  *(_DWORD *)(v17 + 644) = 0;
  *(_DWORD *)(*((void *)this + 33) + 644) ^= 0xFFFFFF00;
  uint64_t v19 = *((void *)this + 33);
  int v20 = *(_DWORD *)(v19 + 644);
  *(_DWORD *)(v19 + 644) = v18;
  if (!*(void *)(v16 + 8) && !*(_DWORD *)(v16 + 160) && !*(_DWORD *)(v16 + 164)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v16 + 8), 644, 0, 0xFFFFFFFFLL, 8, v20, 4),
        !result))
  {
    if ((*(_DWORD *)(*(void *)v3 + 648) = 0,
          int v21 = *(_DWORD *)(*(void *)v3 + 648),
          *(_DWORD *)(*(void *)v3 + 648) = 0,
          *(_DWORD *)(*(void *)v3 + 648) ^= 0x3FFu,
          int v22 = *(_DWORD *)(*(void *)v3 + 648),
          *(_DWORD *)(*(void *)v3 + 648) = v21,
          !*(void *)(v16 + 8))
      && !*(_DWORD *)(v16 + 160)
      && !*(_DWORD *)(v16 + 164)
      || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v16 + 8), 648, 0, 0x3FFFFFFFFFFLL, 32, v22, 4),
          !result))
    {
      if ((*(_DWORD *)(*(void *)v3 + 652) = 0,
            int v23 = *(_DWORD *)(*(void *)v3 + 652),
            *(_DWORD *)(*(void *)v3 + 652) = 0,
            *(_DWORD *)(*(void *)v3 + 652) ^= 0xFFFFFF00,
            int v24 = *(_DWORD *)(*(void *)v3 + 652),
            *(_DWORD *)(*(void *)v3 + 652) = v23,
            !*(void *)(v15 + 8))
        && !*(_DWORD *)(v15 + 160)
        && !*(_DWORD *)(v15 + 164)
        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v15 + 8), 652, 0, 0xFFFFFFFFLL, 8, v24, 4),
            !result))
      {
        if ((*(_DWORD *)(*(void *)v3 + 656) = 0,
              int v25 = *(_DWORD *)(*(void *)v3 + 656),
              *(_DWORD *)(*(void *)v3 + 656) = 0,
              *(_DWORD *)(*(void *)v3 + 656) ^= 0x3FFu,
              int v26 = *(_DWORD *)(*(void *)v3 + 656),
              *(_DWORD *)(*(void *)v3 + 656) = v25,
              !*(void *)(v15 + 8))
          && !*(_DWORD *)(v15 + 160)
          && !*(_DWORD *)(v15 + 164)
          || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v15 + 8), 656, 0, 0x3FFFFFFFFFFLL, 32, v26, 4),
              !result))
        {
          uint64_t v27 = 0;
          char v28 = 1;
          do
          {
            char v29 = v28;
            int v30 = 4 * v27;
            *(_DWORD *)(*((void *)this + 33) + 4 * v27 + 660) = 0;
            uint64_t v31 = *((void *)this + 33) + 4 * v27;
            int v32 = *(_DWORD *)(v31 + 660);
            *(_DWORD *)(v31 + 660) = 0;
            *(_DWORD *)(*((void *)this + 33) + 4 * v27 + 660) ^= 0xFFFFFF00;
            uint64_t v33 = *((void *)this + 33) + 4 * v27;
            int v34 = *(_DWORD *)(v33 + 660);
            *(_DWORD *)(v33 + 660) = v32;
            int v35 = (void *)((char *)this + 176 * v27 + 3104);
            if (*v35 || *((_DWORD *)this + 44 * v27 + 814) || *((_DWORD *)this + 44 * v27 + 815))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v27 + 388, v30 + 660, 0, 0xFFFFFFFFLL, 8, v34, 4);
              if (result) {
                return result;
              }
            }
            *(_DWORD *)(*(void *)v3 + 4 * v27 + 668) = 0;
            uint64_t v36 = *(void *)v3 + 4 * v27;
            int v37 = *(_DWORD *)(v36 + 668);
            *(_DWORD *)(v36 + 668) = 0;
            *(_DWORD *)(*(void *)v3 + 4 * v27 + 668) ^= 0x3FFu;
            uint64_t v38 = *(void *)v3 + 4 * v27;
            int v39 = *(_DWORD *)(v38 + 668);
            *(_DWORD *)(v38 + 668) = v37;
            if (*v35 || *((_DWORD *)this + 44 * v27 + 814) || *((_DWORD *)this + 44 * v27 + 815))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v27 + 388, v30 + 668, 0, 0x3FFFFFFFFFFLL, 32, v39, 4);
              if (result) {
                return result;
              }
            }
            char v28 = 0;
            uint64_t v27 = 1;
          }
          while ((v29 & 1) != 0);
          *(_DWORD *)(*((void *)this + 33) + 676) = 0;
          *(_DWORD *)(*((void *)this + 33) + 680) = 0;
          if (!*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312)) {
            goto LABEL_350;
          }
          uint64_t v40 = *((void *)this + 33);
          int v41 = *(_DWORD *)(v40 + 676);
          *(_DWORD *)(v40 + 676) = 0;
          *(_DWORD *)(*((void *)this + 33) + 676) ^= 0xFFFFFF00;
          uint64_t v42 = *((void *)this + 33);
          int v43 = *(_DWORD *)(v42 + 676);
          *(_DWORD *)(v42 + 676) = v41;
          uint64_t v44 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312);
          if (!*(void *)(v44 + 8) && !*(_DWORD *)(v44 + 160) && !*(_DWORD *)(v44 + 164)) {
            goto LABEL_351;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v44 + 8), 676, 0, 0xFFFFFFFFLL, 8, v43, 4);
          if (!result)
          {
LABEL_351:
            uint64_t v45 = *((void *)this + 33);
            int v46 = *(_DWORD *)(v45 + 680);
            *(_DWORD *)(v45 + 680) = 0;
            *(_DWORD *)(*((void *)this + 33) + 680) ^= 0x3FFu;
            uint64_t v47 = *((void *)this + 33);
            int v48 = *(_DWORD *)(v47 + 680);
            *(_DWORD *)(v47 + 680) = v46;
            uint64_t v49 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312);
            if (!*(void *)(v49 + 8) && !*(_DWORD *)(v49 + 160) && !*(_DWORD *)(v49 + 164)) {
              goto LABEL_350;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v49 + 8), 680, 0, 0x3FFFFFFFFFFLL, 32, v48, 4);
            if (!result)
            {
LABEL_350:
              *(_DWORD *)(*((void *)this + 33) + 684) = 0;
              *(_DWORD *)(*((void *)this + 33) + 688) = 0;
              if (!*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304)) {
                goto LABEL_352;
              }
              uint64_t v50 = *((void *)this + 33);
              int v51 = *(_DWORD *)(v50 + 684);
              *(_DWORD *)(v50 + 684) = 0;
              *(_DWORD *)(*((void *)this + 33) + 684) ^= 0xFFFFFF00;
              uint64_t v52 = *((void *)this + 33);
              int v53 = *(_DWORD *)(v52 + 684);
              *(_DWORD *)(v52 + 684) = v51;
              uint64_t v54 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304);
              if (!*(void *)(v54 + 8) && !*(_DWORD *)(v54 + 160) && !*(_DWORD *)(v54 + 164)) {
                goto LABEL_353;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v54 + 8), 684, 0, 0xFFFFFFFFLL, 8, v53, 4);
              if (!result)
              {
LABEL_353:
                uint64_t v55 = *((void *)this + 33);
                int v56 = *(_DWORD *)(v55 + 688);
                *(_DWORD *)(v55 + 688) = 0;
                *(_DWORD *)(*((void *)this + 33) + 688) ^= 0x3FFu;
                uint64_t v57 = *((void *)this + 33);
                int v58 = *(_DWORD *)(v57 + 688);
                *(_DWORD *)(v57 + 688) = v56;
                uint64_t v59 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304);
                if (!*(void *)(v59 + 8) && !*(_DWORD *)(v59 + 160) && !*(_DWORD *)(v59 + 164)) {
                  goto LABEL_352;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v59 + 8), 688, 0, 0x3FFFFFFFFFFLL, 32, v58, 4);
                if (!result)
                {
LABEL_352:
                  *(_DWORD *)(*((void *)this + 33) + 692) = 0;
                  uint64_t v60 = *((void *)this + 33);
                  int v61 = *(_DWORD *)(v60 + 692);
                  *(_DWORD *)(v60 + 692) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 692) ^= 0xFFFFFF00;
                  uint64_t v62 = *((void *)this + 33);
                  int v63 = *(_DWORD *)(v62 + 692);
                  *(_DWORD *)(v62 + 692) = v61;
                  uint64_t v64 = *(void *)(*(void *)(*((void *)this + 32) + 42424) + 1920);
                  if (!*(void *)(v64 + 136) && !*(_DWORD *)(v64 + 288) && !*(_DWORD *)(v64 + 292)) {
                    goto LABEL_354;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v64 + 136), 692, 0, 0xFFFFFFFFLL, 8, v63, 4);
                  if (!result)
                  {
LABEL_354:
                    *(_DWORD *)(*((void *)this + 33) + 696) = 0;
                    uint64_t v65 = *((void *)this + 33);
                    int v66 = *(_DWORD *)(v65 + 696);
                    *(_DWORD *)(v65 + 696) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 696) ^= 0x3FFu;
                    uint64_t v67 = *((void *)this + 33);
                    int v68 = *(_DWORD *)(v67 + 696);
                    *(_DWORD *)(v67 + 696) = v66;
                    uint64_t v69 = *(void *)(*(void *)(*((void *)this + 32) + 42424) + 1920);
                    if (!*(void *)(v69 + 136) && !*(_DWORD *)(v69 + 288) && !*(_DWORD *)(v69 + 292)) {
                      goto LABEL_355;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v69 + 136), 696, 0, 0x3FFFFFFFFFFLL, 32, v68, 4);
                    if (!result)
                    {
LABEL_355:
                      *(_DWORD *)(*((void *)this + 33) + 700) = 0;
                      uint64_t v70 = *((void *)this + 33);
                      int v71 = *(_DWORD *)(v70 + 700);
                      *(_DWORD *)(v70 + 700) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 700) ^= 0xFFFFFF00;
                      uint64_t v72 = *((void *)this + 33);
                      int v73 = *(_DWORD *)(v72 + 700);
                      *(_DWORD *)(v72 + 700) = v71;
                      int v74 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78568);
                      if (!*v74
                        && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78720)
                        && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78724))
                      {
                        goto LABEL_356;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v74, 700, 0, 0xFFFFFFFFLL, 8, v73, 4);
                      if (!result)
                      {
LABEL_356:
                        *(_DWORD *)(*((void *)this + 33) + 704) = 0;
                        uint64_t v75 = *((void *)this + 33);
                        int v76 = *(_DWORD *)(v75 + 704);
                        *(_DWORD *)(v75 + 704) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 704) ^= 0x3FFu;
                        uint64_t v77 = *((void *)this + 33);
                        int v78 = *(_DWORD *)(v77 + 704);
                        *(_DWORD *)(v77 + 704) = v76;
                        uint64_t v79 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78568);
                        if (!*v79
                          && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78720)
                          && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78724))
                        {
                          goto LABEL_357;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v79, 704, 0, 0x3FFFFFFFFFFLL, 32, v78, 4);
                        if (!result)
                        {
LABEL_357:
                          *(_DWORD *)(*((void *)this + 33) + 708) = 0;
                          uint64_t v80 = *((void *)this + 33);
                          int v81 = *(_DWORD *)(v80 + 708);
                          *(_DWORD *)(v80 + 708) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 708) ^= 0xFFFFFF00;
                          uint64_t v82 = *((void *)this + 33);
                          int v83 = *(_DWORD *)(v82 + 708);
                          *(_DWORD *)(v82 + 708) = v81;
                          uint64_t v84 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78792);
                          if (!*v84
                            && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78944)
                            && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78948))
                          {
                            goto LABEL_358;
                          }
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v84, 708, 0, 0xFFFFFFFFLL, 8, v83, 4);
                          if (!result)
                          {
LABEL_358:
                            *(_DWORD *)(*((void *)this + 33) + 712) = 0;
                            uint64_t v85 = *((void *)this + 33);
                            int v86 = *(_DWORD *)(v85 + 712);
                            *(_DWORD *)(v85 + 712) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 712) ^= 0x3FFu;
                            uint64_t v87 = *((void *)this + 33);
                            int v88 = *(_DWORD *)(v87 + 712);
                            *(_DWORD *)(v87 + 712) = v86;
                            uint64_t v89 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78792);
                            if (!*v89
                              && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78944)
                              && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78948))
                            {
                              goto LABEL_359;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v89, 712, 0, 0x3FFFFFFFFFFLL, 32, v88, 4);
                            if (!result)
                            {
LABEL_359:
                              *(_DWORD *)(*((void *)this + 33) + 716) = 0;
                              uint64_t v90 = *((void *)this + 33);
                              int v91 = *(_DWORD *)(v90 + 716);
                              *(_DWORD *)(v90 + 716) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 716) ^= 0xFFFFFF00;
                              uint64_t v92 = *((void *)this + 33);
                              int v93 = *(_DWORD *)(v92 + 716);
                              *(_DWORD *)(v92 + 716) = v91;
                              int v94 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 79016);
                              if (!*v94
                                && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79168)
                                && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79172))
                              {
                                goto LABEL_360;
                              }
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v94, 716, 0, 0xFFFFFFFFLL, 8, v93, 4);
                              if (!result)
                              {
LABEL_360:
                                *(_DWORD *)(*((void *)this + 33) + 720) = 0;
                                uint64_t v95 = *((void *)this + 33);
                                int v96 = *(_DWORD *)(v95 + 720);
                                *(_DWORD *)(v95 + 720) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 720) ^= 0x3FFu;
                                uint64_t v97 = *((void *)this + 33);
                                int v98 = *(_DWORD *)(v97 + 720);
                                *(_DWORD *)(v97 + 720) = v96;
                                uint64_t v99 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 79016);
                                if (!*v99
                                  && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79168)
                                  && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79172))
                                {
                                  goto LABEL_88;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v99, 720, 0, 0x3FFFFFFFFFFLL, 32, v98, 4);
                                if (!result)
                                {
LABEL_88:
                                  *(_DWORD *)(*((void *)this + 33) + 724) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 728) = 0;
                                  uint64_t v100 = *((void *)this + 32);
                                  if (!*(unsigned char *)(v100 + 2652)) {
                                    goto LABEL_349;
                                  }
                                  uint64_t v101 = *(void *)(v100 + 2680);
                                  long long v350 = 0u;
                                  long long v351 = 0u;
                                  long long v348 = 0u;
                                  long long v349 = 0u;
                                  long long v346 = 0u;
                                  long long v347 = 0u;
                                  long long v344 = 0u;
                                  long long v345 = 0u;
                                  long long v343 = 0u;
                                  memset(v342, 0, sizeof(v342));
                                  uint64_t v102 = *(void *)v3;
                                  int v103 = (*(_DWORD *)(*(void *)v3 + 16) & 0xF) << 9;
                                  *(void *)&v342[0] = v101;
                                  int v104 = *(_DWORD *)(v102 + 724);
                                  *(_DWORD *)(v102 + 724) = 0;
                                  *(_DWORD *)(*(void *)v3 + 724) ^= 0xFFFFFF00;
                                  int v105 = *(_DWORD *)(*(void *)v3 + 724);
                                  *(_DWORD *)(*(void *)v3 + 724) = v104;
                                  if (v101)
                                  {
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v342, 724, v103, 0xFFFFFFFFLL, 8, v105, 4);
                                    if (result) {
                                      return result;
                                    }
                                    uint64_t v106 = *(void *)&v342[0];
                                    int v107 = DWORD2(v350);
                                    LODWORD(v101) = HIDWORD(v350);
                                  }
                                  else
                                  {
                                    int v107 = 0;
                                    uint64_t v106 = 0;
                                  }
                                  if ((int v108 = *(_DWORD *)(*(void *)v3 + 728),
                                        *(_DWORD *)(*(void *)v3 + 728) = 0,
                                        *(_DWORD *)(*(void *)v3 + 728) ^= 0x3FFu,
                                        int v109 = *(_DWORD *)(*(void *)v3 + 728),
                                        *(_DWORD *)(*(void *)v3 + 728) = v108,
                                        !v106)
                                    && !v107
                                    && !v101
                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v342, 728, v103, 0x3FFFFFFFFFFLL, 32, v109, 4), !result))
                                  {
LABEL_349:
                                    *(_DWORD *)(*((void *)this + 33) + 732) = 0;
                                    uint64_t v110 = *((void *)this + 33);
                                    int v111 = *(_DWORD *)(v110 + 732);
                                    *(_DWORD *)(v110 + 732) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 732) ^= 0xFFFFFF00;
                                    uint64_t v112 = *((void *)this + 33);
                                    int v113 = *(_DWORD *)(v112 + 732);
                                    *(_DWORD *)(v112 + 732) = v111;
                                    if (!*((void *)this + 432)
                                      && !*((_DWORD *)this + 902)
                                      && !*((_DWORD *)this + 903))
                                    {
                                      goto LABEL_337;
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 432, 732, 0, 0xFFFFFFFFLL, 8, v113, 4);
                                    if (!result)
                                    {
LABEL_337:
                                      if ((*(_DWORD *)(*(void *)v3 + 736) = 0,
                                            int v114 = *(_DWORD *)(*(void *)v3 + 736),
                                            *(_DWORD *)(*(void *)v3 + 736) = 0,
                                            *(_DWORD *)(*(void *)v3 + 736) ^= 0x3FFu,
                                            int v115 = *(_DWORD *)(*(void *)v3 + 736),
                                            *(_DWORD *)(*(void *)v3 + 736) = v114,
                                            !*((void *)this + 432))
                                        && !*((_DWORD *)this + 902)
                                        && !*((_DWORD *)this + 903)
                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 432, 736, 0, 0x3FFFFFFFFFFLL, 32, v115, 4), !result))
                                      {
                                        *(_DWORD *)(*((void *)this + 33) + 740) = 0;
                                        uint64_t v116 = *((void *)this + 33);
                                        int v117 = *(_DWORD *)(v116 + 740);
                                        *(_DWORD *)(v116 + 740) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 740) ^= 0xFFFFFF00;
                                        uint64_t v118 = *((void *)this + 33);
                                        int v119 = *(_DWORD *)(v118 + 740);
                                        *(_DWORD *)(v118 + 740) = v117;
                                        if (!*((void *)this + 454)
                                          && !*((_DWORD *)this + 946)
                                          && !*((_DWORD *)this + 947))
                                        {
                                          goto LABEL_338;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 740, 0, 0xFFFFFFFFLL, 8, v119, 4);
                                        if (!result)
                                        {
LABEL_338:
                                          if ((*(_DWORD *)(*(void *)v3 + 744) = 0,
                                                int v120 = *(_DWORD *)(*(void *)v3 + 744),
                                                *(_DWORD *)(*(void *)v3 + 744) = 0,
                                                *(_DWORD *)(*(void *)v3 + 744) ^= 0x3FFu,
                                                int v121 = *(_DWORD *)(*(void *)v3 + 744),
                                                *(_DWORD *)(*(void *)v3 + 744) = v120,
                                                !*((void *)this + 454))
                                            && !*((_DWORD *)this + 946)
                                            && !*((_DWORD *)this + 947)
                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 744, 0, 0x3FFFFFFFFFFLL, 32, v121, 4), !result))
                                          {
                                            *(_DWORD *)(*((void *)this + 33) + 748) = 0;
                                            uint64_t v122 = *((void *)this + 33);
                                            int v123 = *(_DWORD *)(v122 + 748);
                                            *(_DWORD *)(v122 + 748) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 748) ^= 0xFFFFFF00;
                                            uint64_t v124 = *((void *)this + 33);
                                            int v125 = *(_DWORD *)(v124 + 748);
                                            *(_DWORD *)(v124 + 748) = v123;
                                            if (!*((void *)this + 476)
                                              && !*((_DWORD *)this + 990)
                                              && !*((_DWORD *)this + 991))
                                            {
                                              goto LABEL_339;
                                            }
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 748, 0, 0xFFFFFFFFLL, 8, v125, 4);
                                            if (!result)
                                            {
LABEL_339:
                                              if ((*(_DWORD *)(*(void *)v3 + 752) = 0,
                                                    int v126 = *(_DWORD *)(*(void *)v3 + 752),
                                                    *(_DWORD *)(*(void *)v3 + 752) = 0,
                                                    *(_DWORD *)(*(void *)v3 + 752) ^= 0x3FFu,
                                                    int v127 = *(_DWORD *)(*(void *)v3 + 752),
                                                    *(_DWORD *)(*(void *)v3 + 752) = v126,
                                                    !*((void *)this + 476))
                                                && !*((_DWORD *)this + 990)
                                                && !*((_DWORD *)this + 991)
                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 752, 0, 0x3FFFFFFFFFFLL, 32, v127, 4), !result))
                                              {
                                                *(_DWORD *)(*((void *)this + 33) + 756) = 0;
                                                uint64_t v128 = *((void *)this + 33);
                                                int v129 = *(_DWORD *)(v128 + 756);
                                                *(_DWORD *)(v128 + 756) = 0;
                                                *(_DWORD *)(*((void *)this + 33) + 756) ^= 0xFFFFFF00;
                                                uint64_t v130 = *((void *)this + 33);
                                                int v131 = *(_DWORD *)(v130 + 756);
                                                *(_DWORD *)(v130 + 756) = v129;
                                                if (!*((void *)this + 498)
                                                  && !*((_DWORD *)this + 1034)
                                                  && !*((_DWORD *)this + 1035))
                                                {
                                                  goto LABEL_340;
                                                }
                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 756, 0, 0xFFFFFFFFLL, 8, v131, 4);
                                                if (!result)
                                                {
LABEL_340:
                                                  if ((*(_DWORD *)(*(void *)v3 + 760) = 0,
                                                        int v132 = *(_DWORD *)(*(void *)v3 + 760),
                                                        *(_DWORD *)(*(void *)v3 + 760) = 0,
                                                        *(_DWORD *)(*(void *)v3 + 760) ^= 0x3FFu,
                                                        int v133 = *(_DWORD *)(*(void *)v3 + 760),
                                                        *(_DWORD *)(*(void *)v3 + 760) = v132,
                                                        !*((void *)this + 498))
                                                    && !*((_DWORD *)this + 1034)
                                                    && !*((_DWORD *)this + 1035)
                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 760, 0, 0x3FFFFFFFFFFLL, 32, v133, 4), !result))
                                                  {
                                                    *(_DWORD *)(*((void *)this + 33) + 764) = 0;
                                                    uint64_t v134 = *((void *)this + 33);
                                                    int v135 = *(_DWORD *)(v134 + 764);
                                                    *(_DWORD *)(v134 + 764) = 0;
                                                    *(_DWORD *)(*((void *)this + 33) + 764) ^= 0xFFFFFF00;
                                                    uint64_t v136 = *((void *)this + 33);
                                                    int v137 = *(_DWORD *)(v136 + 764);
                                                    *(_DWORD *)(v136 + 764) = v135;
                                                    if (!*((void *)this + 520)
                                                      && !*((_DWORD *)this + 1078)
                                                      && !*((_DWORD *)this + 1079))
                                                    {
                                                      goto LABEL_341;
                                                    }
                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 520, 764, 0, 0xFFFFFFFFLL, 8, v137, 4);
                                                    if (!result)
                                                    {
LABEL_341:
                                                      if ((*(_DWORD *)(*(void *)v3 + 768) = 0,
                                                            int v138 = *(_DWORD *)(*(void *)v3 + 768),
                                                            *(_DWORD *)(*(void *)v3 + 768) = 0,
                                                            *(_DWORD *)(*(void *)v3 + 768) ^= 0x3FFu,
                                                            int v139 = *(_DWORD *)(*(void *)v3 + 768),
                                                            *(_DWORD *)(*(void *)v3 + 768) = v138,
                                                            !*((void *)this + 520))
                                                        && !*((_DWORD *)this + 1078)
                                                        && !*((_DWORD *)this + 1079)
                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 520, 768, 0, 0x3FFFFFFFFFFLL, 32, v139, 4), !result))
                                                      {
                                                        *(_DWORD *)(*((void *)this + 33) + 772) = 0;
                                                        uint64_t v140 = *((void *)this + 33);
                                                        int v141 = *(_DWORD *)(v140 + 772);
                                                        *(_DWORD *)(v140 + 772) = 0;
                                                        *(_DWORD *)(*((void *)this + 33) + 772) ^= 0xFFFFFF00;
                                                        uint64_t v142 = *((void *)this + 33);
                                                        int v143 = *(_DWORD *)(v142 + 772);
                                                        *(_DWORD *)(v142 + 772) = v141;
                                                        if (!*((void *)this + 542)
                                                          && !*((_DWORD *)this + 1122)
                                                          && !*((_DWORD *)this + 1123))
                                                        {
                                                          goto LABEL_342;
                                                        }
                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 542, 772, 0, 0xFFFFFFFFLL, 8, v143, 4);
                                                        if (!result)
                                                        {
LABEL_342:
                                                          if ((*(_DWORD *)(*(void *)v3 + 776) = 0,
                                                                int v144 = *(_DWORD *)(*(void *)v3 + 776),
                                                                *(_DWORD *)(*(void *)v3 + 776) = 0,
                                                                *(_DWORD *)(*(void *)v3 + 776) ^= 0x3FFu,
                                                                int v145 = *(_DWORD *)(*(void *)v3 + 776),
                                                                *(_DWORD *)(*(void *)v3 + 776) = v144,
                                                                !*((void *)this + 542))
                                                            && !*((_DWORD *)this + 1122)
                                                            && !*((_DWORD *)this + 1123)
                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 542, 776, 0, 0x3FFFFFFFFFFLL, 32, v145, 4), !result))
                                                          {
                                                            *(_DWORD *)(*((void *)this + 33) + 780) = 0;
                                                            uint64_t v146 = *((void *)this + 33);
                                                            int v147 = *(_DWORD *)(v146 + 780);
                                                            *(_DWORD *)(v146 + 780) = 0;
                                                            *(_DWORD *)(*((void *)this + 33) + 780) ^= 0xFFFFFF00;
                                                            uint64_t v148 = *((void *)this + 33);
                                                            int v149 = *(_DWORD *)(v148 + 780);
                                                            *(_DWORD *)(v148 + 780) = v147;
                                                            if (!*((void *)this + 564)
                                                              && !*((_DWORD *)this + 1166)
                                                              && !*((_DWORD *)this + 1167))
                                                            {
                                                              goto LABEL_343;
                                                            }
                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 564, 780, 0, 0xFFFFFFFFLL, 8, v149, 4);
                                                            if (!result)
                                                            {
LABEL_343:
                                                              if ((*(_DWORD *)(*(void *)v3 + 784) = 0,
                                                                    int v150 = *(_DWORD *)(*(void *)v3 + 784),
                                                                    *(_DWORD *)(*(void *)v3 + 784) = 0,
                                                                    *(_DWORD *)(*(void *)v3 + 784) ^= 0x3FFu,
                                                                    int v151 = *(_DWORD *)(*(void *)v3 + 784),
                                                                    *(_DWORD *)(*(void *)v3 + 784) = v150,
                                                                    !*((void *)this + 564))
                                                                && !*((_DWORD *)this + 1166)
                                                                && !*((_DWORD *)this + 1167)
                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 564, 784, 0, 0x3FFFFFFFFFFLL, 32, v151, 4), !result))
                                                              {
                                                                *(_DWORD *)(*((void *)this + 33) + 788) = 0;
                                                                uint64_t v152 = *((void *)this + 33);
                                                                int v153 = *(_DWORD *)(v152 + 788);
                                                                *(_DWORD *)(v152 + 788) = 0;
                                                                *(_DWORD *)(*((void *)this + 33) + 788) ^= 0xFFFFFF00;
                                                                uint64_t v154 = *((void *)this + 33);
                                                                int v155 = *(_DWORD *)(v154 + 788);
                                                                *(_DWORD *)(v154 + 788) = v153;
                                                                if (!*((void *)this + 586)
                                                                  && !*((_DWORD *)this + 1210)
                                                                  && !*((_DWORD *)this + 1211))
                                                                {
                                                                  goto LABEL_344;
                                                                }
                                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 586, 788, 0, 0xFFFFFFFFLL, 8, v155, 4);
                                                                if (!result)
                                                                {
LABEL_344:
                                                                  if ((*(_DWORD *)(*(void *)v3 + 792) = 0,
                                                                        int v156 = *(_DWORD *)(*(void *)v3 + 792),
                                                                        *(_DWORD *)(*(void *)v3 + 792) = 0,
                                                                        *(_DWORD *)(*(void *)v3 + 792) ^= 0x3FFu,
                                                                        int v157 = *(_DWORD *)(*(void *)v3 + 792),
                                                                        *(_DWORD *)(*(void *)v3 + 792) = v156,
                                                                        !*((void *)this + 586))
                                                                    && !*((_DWORD *)this + 1210)
                                                                    && !*((_DWORD *)this + 1211)
                                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 586, 792, 0, 0x3FFFFFFFFFFLL, 32, v157, 4), !result))
                                                                  {
                                                                    *(_DWORD *)(*((void *)this + 33) + 796) = 0;
                                                                    uint64_t v158 = *((void *)this + 33);
                                                                    int v159 = *(_DWORD *)(v158 + 796);
                                                                    *(_DWORD *)(v158 + 796) = 0;
                                                                    *(_DWORD *)(*((void *)this + 33) + 796) ^= 0xFFFFFF00;
                                                                    uint64_t v160 = *((void *)this + 33);
                                                                    int v161 = *(_DWORD *)(v160 + 796);
                                                                    *(_DWORD *)(v160 + 796) = v159;
                                                                    if (!*((void *)this + 608)
                                                                      && !*((_DWORD *)this + 1254)
                                                                      && !*((_DWORD *)this + 1255))
                                                                    {
                                                                      goto LABEL_345;
                                                                    }
                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 608, 796, 0, 0xFFFFFFFFLL, 8, v161, 4);
                                                                    if (!result)
                                                                    {
LABEL_345:
                                                                      if ((*(_DWORD *)(*(void *)v3 + 800) = 0,
                                                                            int v162 = *(_DWORD *)(*(void *)v3 + 800),
                                                                            *(_DWORD *)(*(void *)v3 + 800) = 0,
                                                                            *(_DWORD *)(*(void *)v3 + 800) ^= 0x3FFu,
                                                                            int v163 = *(_DWORD *)(*(void *)v3 + 800),
                                                                            *(_DWORD *)(*(void *)v3 + 800) = v162,
                                                                            !*((void *)this + 608))
                                                                        && !*((_DWORD *)this + 1254)
                                                                        && !*((_DWORD *)this + 1255)
                                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 608, 800, 0, 0x3FFFFFFFFFFLL, 32, v163, 4), !result))
                                                                      {
                                                                        *(_DWORD *)(*((void *)this + 33) + 804) = 0;
                                                                        uint64_t v164 = *((void *)this + 33);
                                                                        int v165 = *(_DWORD *)(v164 + 804);
                                                                        *(_DWORD *)(v164 + 804) = 0;
                                                                        *(_DWORD *)(*((void *)this + 33) + 804) ^= 0xFFFFFF00;
                                                                        uint64_t v166 = *((void *)this + 33);
                                                                        int v167 = *(_DWORD *)(v166 + 804);
                                                                        *(_DWORD *)(v166 + 804) = v165;
                                                                        if (!*((void *)this + 674)
                                                                          && !*((_DWORD *)this + 1386)
                                                                          && !*((_DWORD *)this + 1387))
                                                                        {
                                                                          goto LABEL_346;
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 674, 804, 0, 0xFFFFFFFFLL, 8, v167, 4);
                                                                        if (!result)
                                                                        {
LABEL_346:
                                                                          if ((*(_DWORD *)(*(void *)v3 + 808) = 0,
                                                                                int v168 = *(_DWORD *)(*(void *)v3 + 808),
                                                                                *(_DWORD *)(*(void *)v3 + 808) = 0,
                                                                                *(_DWORD *)(*(void *)v3 + 808) ^= 0x3FFu,
                                                                                int v169 = *(_DWORD *)(*(void *)v3 + 808),
                                                                                *(_DWORD *)(*(void *)v3 + 808) = v168,
                                                                                !*((void *)this + 674))
                                                                            && !*((_DWORD *)this + 1386)
                                                                            && !*((_DWORD *)this + 1387)
                                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 674, 808, 0, 0x3FFFFFFFFFFLL, 32, v169, 4), !result))
                                                                          {
                                                                            int v170 = *(_DWORD *)(*((void *)this + 32)
                                                                                             + 42676);
                                                                            *(_DWORD *)(*((void *)this + 33) + 812) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 816) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 820) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 824) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 828) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 832) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 836) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 840) = 0;
                                                                            uint64_t v171 = *((void *)this + 33);
                                                                            int v172 = *(_DWORD *)(v171 + 820);
                                                                            *(_DWORD *)(v171 + 820) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 820) ^= 0xFFFFFF80;
                                                                            uint64_t v173 = *((void *)this + 33);
                                                                            int v174 = *(_DWORD *)(v173 + 820);
                                                                            *(_DWORD *)(v173 + 820) = v172;
                                                                            uint64_t v175 = *(void *)(*(void *)(*((void *)this + 32) + 8000)
                                                                                             + 384 * v170
                                                                                             + 8);
                                                                            if (!*(void *)v175
                                                                              && !*(_DWORD *)(v175 + 152)
                                                                              && !*(_DWORD *)(v175 + 156))
                                                                            {
                                                                              goto LABEL_347;
                                                                            }
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v175, 820, *(_DWORD *)(v175 + 52), 0xFFFFFFFFLL, 7, v174, 4);
                                                                            if (!result)
                                                                            {
LABEL_347:
                                                                              uint64_t v176 = *((void *)this + 33);
                                                                              int v177 = *(_DWORD *)(v176 + 824);
                                                                              *(_DWORD *)(v176 + 824) = 0;
                                                                              *(_DWORD *)(*((void *)this + 33) + 824) ^= 0x3FFu;
                                                                              uint64_t v178 = *((void *)this + 33);
                                                                              int v179 = *(_DWORD *)(v178 + 824);
                                                                              *(_DWORD *)(v178 + 824) = v177;
                                                                              uint64_t v180 = *(void *)(*(void *)(*((void *)this + 32) + 8000)
                                                                                               + 384 * v170
                                                                                               + 8);
                                                                              if (!*(void *)v180
                                                                                && !*(_DWORD *)(v180 + 152)
                                                                                && !*(_DWORD *)(v180 + 156))
                                                                              {
                                                                                goto LABEL_348;
                                                                              }
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v180, 824, *(_DWORD *)(v180 + 52), 0x3FFFFFFFFFFLL, 32, v179, 4);
                                                                              if (!result)
                                                                              {
LABEL_348:
                                                                                uint64_t v181 = *((void *)this + 33);
                                                                                int v182 = *(_DWORD *)(v181 + 836);
                                                                                *(_DWORD *)(v181 + 836) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 836) ^= 0xFFFFFF80;
                                                                                uint64_t v183 = *((void *)this + 33);
                                                                                int v184 = *(_DWORD *)(v183 + 836);
                                                                                *(_DWORD *)(v183 + 836) = v182;
                                                                                uint64_t v185 = *(void *)(*(void *)(*((void *)this + 32) + 8000)
                                                                                                 + 384 * v170
                                                                                                 + 8);
                                                                                if (!*(void *)v185
                                                                                  && !*(_DWORD *)(v185 + 152)
                                                                                  && !*(_DWORD *)(v185 + 156))
                                                                                {
                                                                                  goto LABEL_189;
                                                                                }
                                                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v185, 836, *(_DWORD *)(v185 + 56), 0xFFFFFFFFLL, 7, v184, 4);
                                                                                if (!result)
                                                                                {
LABEL_189:
                                                                                  uint64_t v186 = *((void *)this + 33);
                                                                                  int v187 = *(_DWORD *)(v186 + 840);
                                                                                  *(_DWORD *)(v186 + 840) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 840) ^= 0x3FFu;
                                                                                  uint64_t v188 = *((void *)this + 33);
                                                                                  int v189 = *(_DWORD *)(v188 + 840);
                                                                                  *(_DWORD *)(v188 + 840) = v187;
                                                                                  uint64_t v190 = *((void *)this + 32);
                                                                                  uint64_t v191 = *(void *)(*(void *)(v190 + 8000) + 384 * v170 + 8);
                                                                                  if (*(void *)v191
                                                                                    || *(_DWORD *)(v191 + 152)
                                                                                    || *(_DWORD *)(v191 + 156))
                                                                                  {
                                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v191, 840, *(_DWORD *)(v191 + 56), 0x3FFFFFFFFFFLL, 32, v189, 4);
                                                                                    if (result) {
                                                                                      return result;
                                                                                    }
                                                                                    uint64_t v190 = *((void *)this + 32);
                                                                                  }
                                                                                  int v192 = *(_DWORD *)(v190 + 2648);
                                                                                  uint64_t v193 = *((void *)this + 33);
                                                                                  int v194 = *(_DWORD *)(v193 + 812);
                                                                                  *(_DWORD *)(v193 + 812) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 812) ^= 0xFFFFFF80;
                                                                                  uint64_t v195 = *((void *)this + 33);
                                                                                  int v196 = *(_DWORD *)(v195 + 812);
                                                                                  *(_DWORD *)(v195 + 812) = v194;
                                                                                  uint64_t v197 = *((void *)this + 32);
                                                                                  if (v192 == 1)
                                                                                  {
                                                                                    uint64_t v198 = *(void *)(*(void *)(v197 + 8000) + 384 * v170 + 8);
                                                                                    if (*(void *)v198
                                                                                      || *(_DWORD *)(v198 + 152)
                                                                                      || *(_DWORD *)(v198 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v198, 812, *(_DWORD *)(v198 + 64), 0xFFFFFFFFLL, 7, v196, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v199 = *((void *)this + 33);
                                                                                    int v200 = *(_DWORD *)(v199 + 816);
                                                                                    *(_DWORD *)(v199 + 816) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 816) ^= 0x3FFu;
                                                                                    uint64_t v201 = *((void *)this + 33);
                                                                                    int v202 = *(_DWORD *)(v201 + 816);
                                                                                    *(_DWORD *)(v201 + 816) = v200;
                                                                                    uint64_t v203 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v170 + 8);
                                                                                    if (*(void *)v203
                                                                                      || *(_DWORD *)(v203 + 152)
                                                                                      || *(_DWORD *)(v203 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v203, 816, *(_DWORD *)(v203 + 64), 0x3FFFFFFFFFFLL, 32, v202, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v204 = *((void *)this + 33);
                                                                                    int v205 = *(_DWORD *)(v204 + 828);
                                                                                    *(_DWORD *)(v204 + 828) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 828) ^= 0xFFFFFF80;
                                                                                    uint64_t v206 = *((void *)this + 33);
                                                                                    int v207 = *(_DWORD *)(v206 + 828);
                                                                                    *(_DWORD *)(v206 + 828) = v205;
                                                                                    uint64_t v208 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v170 + 8);
                                                                                    if (*(void *)v208
                                                                                      || *(_DWORD *)(v208 + 152)
                                                                                      || *(_DWORD *)(v208 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v208, 828, *(_DWORD *)(v208 + 68), 0xFFFFFFFFLL, 7, v207, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v209 = *((void *)this + 33);
                                                                                    int v210 = *(_DWORD *)(v209 + 832);
                                                                                    *(_DWORD *)(v209 + 832) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 832) ^= 0x3FFu;
                                                                                    uint64_t v211 = *((void *)this + 33);
                                                                                    int v212 = *(_DWORD *)(v211 + 832);
                                                                                    *(_DWORD *)(v211 + 832) = v210;
                                                                                    uint64_t v213 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v170 + 8);
                                                                                    if (!*(void *)v213
                                                                                      && !*(_DWORD *)(v213 + 152)
                                                                                      && !*(_DWORD *)(v213 + 156))
                                                                                    {
                                                                                      goto LABEL_224;
                                                                                    }
                                                                                    int v214 = *(_DWORD *)(v213 + 68);
                                                                                    uint64_t v215 = this;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    uint64_t v216 = v197 + 176 * v170;
                                                                                    if (*(void *)(v216 + 3072)
                                                                                      || *(_DWORD *)(v197 + 176 * v170 + 3224)
                                                                                      || *(_DWORD *)(v197 + 176 * v170 + 3228))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v216 + 3072), 812, 0, 0xFFFFFFFFLL, 7, v196, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v217 = *((void *)this + 33);
                                                                                    int v218 = *(_DWORD *)(v217 + 816);
                                                                                    *(_DWORD *)(v217 + 816) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 816) ^= 0x3FFu;
                                                                                    uint64_t v219 = *((void *)this + 33);
                                                                                    int v220 = *(_DWORD *)(v219 + 816);
                                                                                    *(_DWORD *)(v219 + 816) = v218;
                                                                                    uint64_t v221 = *((void *)this + 32);
                                                                                    uint64_t v222 = v221 + 176 * v170;
                                                                                    if (*(void *)(v222 + 3072)
                                                                                      || *(_DWORD *)(v221 + 176 * v170 + 3224)
                                                                                      || *(_DWORD *)(v221 + 176 * v170 + 3228))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v222 + 3072), 816, 0, 0x3FFFFFFFFFFLL, 32, v220, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v223 = *((void *)this + 33);
                                                                                    int v224 = *(_DWORD *)(v223 + 828);
                                                                                    *(_DWORD *)(v223 + 828) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 828) ^= 0xFFFFFF80;
                                                                                    uint64_t v225 = *((void *)this + 33);
                                                                                    int v226 = *(_DWORD *)(v225 + 828);
                                                                                    *(_DWORD *)(v225 + 828) = v224;
                                                                                    uint64_t v227 = *((void *)this + 32);
                                                                                    uint64_t v228 = v227 + 176 * v170;
                                                                                    if (*(void *)(v228 + 5536)
                                                                                      || *(_DWORD *)(v227 + 176 * v170 + 5688)
                                                                                      || *(_DWORD *)(v227 + 176 * v170 + 5692))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v228 + 5536), 828, 0, 0xFFFFFFFFLL, 7, v226, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v229 = *((void *)this + 33);
                                                                                    int v230 = *(_DWORD *)(v229 + 832);
                                                                                    *(_DWORD *)(v229 + 832) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 832) ^= 0x3FFu;
                                                                                    uint64_t v231 = *((void *)this + 33);
                                                                                    int v212 = *(_DWORD *)(v231 + 832);
                                                                                    *(_DWORD *)(v231 + 832) = v230;
                                                                                    uint64_t v232 = *((void *)this + 32);
                                                                                    uint64_t v233 = v232 + 176 * v170;
                                                                                    if (!*(void *)(v233 + 5536)
                                                                                      && !*(_DWORD *)(v232 + 176 * v170 + 5688)
                                                                                      && !*(_DWORD *)(v232 + 176 * v170 + 5692))
                                                                                    {
                                                                                      goto LABEL_224;
                                                                                    }
                                                                                    uint64_t v213 = v233 + 5536;
                                                                                    uint64_t v215 = this;
                                                                                    int v214 = 0;
                                                                                  }
                                                                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)v215, (void *)v213, 832, v214, 0x3FFFFFFFFFFLL, 32, v212, 4);
                                                                                  if (result) {
                                                                                    return result;
                                                                                  }
LABEL_224:
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 844) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 848) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 852) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 856) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 860) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 864) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 868) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 872) = 0;
                                                                                  if (*(_DWORD *)(*((void *)this + 32)
                                                                                                 + 2644))
                                                                                  {
                                                                                    uint64_t v234 = *((void *)this + 33);
                                                                                    int v235 = *(_DWORD *)(v234 + 844);
                                                                                    *(_DWORD *)(v234 + 844) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 844) ^= 0xFFFFFF00;
                                                                                    uint64_t v236 = *((void *)this + 33);
                                                                                    int v237 = *(_DWORD *)(v236 + 844);
                                                                                    *(_DWORD *)(v236 + 844) = v235;
                                                                                    if (*((void *)this + 652)
                                                                                      || *((_DWORD *)this + 1342)
                                                                                      || *((_DWORD *)this + 1343))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 652, 844, 0, 0xFFFFFFFFLL, 8, v237, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    int v238 = *(_DWORD *)(*(void *)v3 + 848);
                                                                                    *(_DWORD *)(*(void *)v3 + 848) = 0;
                                                                                    *(_DWORD *)(*(void *)v3 + 848) ^= 0x3FFu;
                                                                                    int v239 = *(_DWORD *)(*(void *)v3 + 848);
                                                                                    *(_DWORD *)(*(void *)v3 + 848) = v238;
                                                                                    if (*((void *)this + 652)
                                                                                      || *((_DWORD *)this + 1342)
                                                                                      || *((_DWORD *)this + 1343))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 652, 848, 0, 0x3FFFFFFFFFFLL, 32, v239, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v240 = *((void *)this + 32);
                                                                                    int v241 = *(unsigned __int8 *)(v240 + 3004);
                                                                                    if (*(unsigned char *)(v240 + 3004))
                                                                                    {
                                                                                      int v241 = *(_DWORD *)(v240 + 3016);
                                                                                      int v242 = *(_DWORD *)(v240 + 3020);
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int v242 = 0;
                                                                                    }
                                                                                    uint64_t v243 = *(void *)(v240 + 42696);
                                                                                    int v244 = *(_DWORD *)(v243 + 56);
                                                                                    int v245 = *(_DWORD *)(v243 + 52) + v241;
                                                                                    uint64_t v246 = *((void *)this + 33);
                                                                                    int v247 = *(_DWORD *)(v246 + 852);
                                                                                    *(_DWORD *)(v246 + 852) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 852) ^= 0xFFFFFFC0;
                                                                                    uint64_t v248 = *((void *)this + 33);
                                                                                    int v249 = *(_DWORD *)(v248 + 852);
                                                                                    *(_DWORD *)(v248 + 852) = v247;
                                                                                    uint64_t v250 = *(void *)(*((void *)this + 32) + 42696);
                                                                                    if (*(void *)v250
                                                                                      || *(_DWORD *)(v250 + 152)
                                                                                      || *(_DWORD *)(v250 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v250, 852, v245, 0xFFFFFFFFLL, 6, v249, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v251 = *((void *)this + 33);
                                                                                    int v252 = *(_DWORD *)(v251 + 856);
                                                                                    *(_DWORD *)(v251 + 856) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 856) ^= 0x3FFu;
                                                                                    uint64_t v253 = *((void *)this + 33);
                                                                                    int v254 = *(_DWORD *)(v253 + 856);
                                                                                    *(_DWORD *)(v253 + 856) = v252;
                                                                                    uint64_t v255 = *(void *)(*((void *)this + 32) + 42696);
                                                                                    if (*(void *)v255
                                                                                      || *(_DWORD *)(v255 + 152)
                                                                                      || *(_DWORD *)(v255 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v255, 856, v245, 0x3FFFFFFFFFFLL, 32, v254, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v256 = *((void *)this + 33);
                                                                                    int v257 = *(_DWORD *)(v256 + 864);
                                                                                    *(_DWORD *)(v256 + 864) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 864) ^= 0xFFFFFFC0;
                                                                                    uint64_t v258 = *((void *)this + 33);
                                                                                    int v259 = *(_DWORD *)(v258 + 864);
                                                                                    *(_DWORD *)(v258 + 864) = v257;
                                                                                    uint64_t v260 = *(void *)(*((void *)this + 32) + 42696);
                                                                                    if (*(void *)v260
                                                                                      || *(_DWORD *)(v260 + 152)
                                                                                      || *(_DWORD *)(v260 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v260, 864, v244 + v242, 0xFFFFFFFFLL, 6, v259, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v261 = *((void *)this + 33);
                                                                                    int v262 = *(_DWORD *)(v261 + 868);
                                                                                    *(_DWORD *)(v261 + 868) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 868) ^= 0x3FFu;
                                                                                    uint64_t v263 = *((void *)this + 33);
                                                                                    int v264 = *(_DWORD *)(v263 + 868);
                                                                                    *(_DWORD *)(v263 + 868) = v262;
                                                                                    uint64_t v265 = *((void *)this + 32);
                                                                                    uint64_t v266 = *(void *)(v265 + 42696);
                                                                                    if (*(void *)v266
                                                                                      || *(_DWORD *)(v266 + 152)
                                                                                      || *(_DWORD *)(v266 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v266, 868, v244 + v242, 0x3FFFFFFFFFFLL, 32, v264, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                      uint64_t v265 = *((void *)this + 32);
                                                                                    }
                                                                                    uint64_t v267 = *(void *)v3;
                                                                                    unsigned int v268 = *(_DWORD *)(*(void *)v3 + 860) & 0xFFFC003F;
                                                                                    if (*(unsigned char *)(v265 + 8))
                                                                                    {
                                                                                      *(_DWORD *)(v267 + 860) = v268 | *(_DWORD *)(*(void *)(v265 + 42696) + 76) & 0x3FFC0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 872) = *(_DWORD *)(*((void *)this + 33) + 872) & 0xFFF8003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 42696) + 80) >> 6) & 0x1FFF) << 6);
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      *(_DWORD *)(v267 + 860) = v268 | *(_DWORD *)(*(void *)(v265 + 15944) + 78508) & 0x3FFC0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 872) = *(_DWORD *)(*((void *)this + 33) + 872) & 0xFFF8003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78512) >> 6) & 0x1FFF) << 6);
                                                                                      uint64_t v269 = *((void *)this + 32);
                                                                                      uint64_t v270 = (int *)(*(void *)(v269 + 15944) + 78508);
                                                                                      int v271 = *v270;
                                                                                      uint64_t v272 = *(void *)(v269 + 42696);
                                                                                      int v273 = *(_DWORD *)(v272 + 76);
                                                                                      if ((*v270 != v273
                                                                                         || *(_DWORD *)(*(void *)(v269 + 15944) + 78512) != *(_DWORD *)(v272 + 80))
                                                                                        && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                                      {
                                                                                        int v274 = v270[1];
                                                                                        int v275 = *(_DWORD *)(v272 + 80);
                                                                                        LODWORD(v342[0]) = 136316162;
                                                                                        *(void *)((char *)v342 + 4) = "populateAddressRegisters";
                                                                                        WORD6(v342[0]) = 1024;
                                                                                        *(_DWORD *)((char *)v342 + 14) = v271;
                                                                                        WORD1(v342[1]) = 1024;
                                                                                        DWORD1(v342[1]) = v274;
                                                                                        WORD4(v342[1]) = 1024;
                                                                                        *(_DWORD *)((char *)&v342[1] + 10) = v273;
                                                                                        HIWORD(v342[1]) = 1024;
                                                                                        LODWORD(v343) = v275;
                                                                                        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Warning! AVD SWR stride (%d, %d) != IOSurface stride (%d, %d). If IOSurface is displayed, output will be corrupted. If YUV is written to file system, no corruption.", (uint8_t *)v342, 0x24u);
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                  uint64_t v276 = *((void *)this + 32);
                                                                                  if (*(unsigned char *)(*(void *)(v276 + 15944)
                                                                                                + 128)
                                                                                    && !*(unsigned char *)(*(void *)(v276 + 42424)
                                                                                                 + 1956))
                                                                                  {
                                                                                    return 0;
                                                                                  }
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 876) = 0;
                                                                                  uint64_t v277 = *((void *)this + 33);
                                                                                  int v278 = *(_DWORD *)(v277 + 876);
                                                                                  *(_DWORD *)(v277 + 876) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 876) ^= 0xFFFFFF00;
                                                                                  uint64_t v279 = *((void *)this + 33);
                                                                                  int v280 = *(_DWORD *)(v279 + 876);
                                                                                  *(_DWORD *)(v279 + 876) = v278;
                                                                                  if (*((void *)this + 696)
                                                                                    || *((_DWORD *)this + 1430)
                                                                                    || *((_DWORD *)this + 1431))
                                                                                  {
                                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 696, 876, 0, 0xFFFFFFFFLL, 8, v280, 4);
                                                                                    if (result) {
                                                                                      return result;
                                                                                    }
                                                                                  }
                                                                                  *(_DWORD *)(*(void *)v3 + 880) = 0;
                                                                                  int v281 = *(_DWORD *)(*(void *)v3 + 880);
                                                                                  *(_DWORD *)(*(void *)v3 + 880) = 0;
                                                                                  *(_DWORD *)(*(void *)v3 + 880) ^= 0x3FFu;
                                                                                  int v282 = *(_DWORD *)(*(void *)v3 + 880);
                                                                                  *(_DWORD *)(*(void *)v3 + 880) = v281;
                                                                                  if (*((void *)this + 696)
                                                                                    || *((_DWORD *)this + 1430)
                                                                                    || *((_DWORD *)this + 1431))
                                                                                  {
                                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 696, 880, 0, 0x3FFFFFFFFFFLL, 32, v282, 4);
                                                                                    if (result) {
                                                                                      return result;
                                                                                    }
                                                                                  }
                                                                                  if (*(unsigned char *)(*(void *)(*((void *)this + 32) + 15944)
                                                                                                + 128))
                                                                                    return 0;
                                                                                  uint64_t v283 = 0;
                                                                                  uint64_t v284 = 0;
                                                                                  do
                                                                                  {
                                                                                    uint64_t v285 = *(void *)(*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79224) + v284);
                                                                                    if (!v285
                                                                                      || (uint64_t v286 = *(void *)(v285 + 2016)) == 0)
                                                                                    {
                                                                                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                                      {
                                                                                        LODWORD(v342[0]) = 136315138;
                                                                                        *(void *)((char *)v342 + 4) = "populateAddressRegisters";
                                                                                        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Unexpected. av1_fb->buffer is 0x0!", (uint8_t *)v342, 0xCu);
                                                                                      }
                                                                                      return 0xFFFFFFFFLL;
                                                                                    }
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v283
                                                                                              + 884) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v283
                                                                                              + 912) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v283
                                                                                              + 940) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v283
                                                                                              + 968) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v283
                                                                                              + 996) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v283
                                                                                              + 1024) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v283
                                                                                              + 1052) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v283
                                                                                              + 1080) = 0;
                                                                                    uint64_t v287 = *(void *)v3 + v283;
                                                                                    int v288 = *(_DWORD *)(v287 + 940);
                                                                                    *(_DWORD *)(v287 + 940) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v283
                                                                                              + 940) ^= 0xFFFFFF80;
                                                                                    uint64_t v289 = *(void *)v3 + v283;
                                                                                    int v290 = *(_DWORD *)(v289 + 940);
                                                                                    *(_DWORD *)(v289 + 940) = v288;
                                                                                    uint64_t v291 = *(void *)(v286 + 8);
                                                                                    if (*(void *)v291
                                                                                      || *(_DWORD *)(v291 + 152)
                                                                                      || *(_DWORD *)(v291 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v291, (int)v283 + 940, *(_DWORD *)(v291 + 52), 0xFFFFFFFFLL, 7, v290, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v292 = *(void *)v3 + v283;
                                                                                    int v293 = *(_DWORD *)(v292 + 968);
                                                                                    *(_DWORD *)(v292 + 968) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v283
                                                                                              + 968) ^= 0x3FFu;
                                                                                    uint64_t v294 = *(void *)v3 + v283;
                                                                                    int v295 = *(_DWORD *)(v294 + 968);
                                                                                    *(_DWORD *)(v294 + 968) = v293;
                                                                                    uint64_t v296 = *(void *)(v286 + 8);
                                                                                    if (*(void *)v296
                                                                                      || *(_DWORD *)(v296 + 152)
                                                                                      || *(_DWORD *)(v296 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v296, (int)v283 + 968, *(_DWORD *)(v296 + 52), 0x3FFFFFFFFFFLL, 32, v295, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v297 = *(void *)v3 + v283;
                                                                                    int v298 = *(_DWORD *)(v297 + 1052);
                                                                                    *(_DWORD *)(v297 + 1052) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v283
                                                                                              + 1052) ^= 0xFFFFFF80;
                                                                                    uint64_t v299 = *(void *)v3 + v283;
                                                                                    int v300 = *(_DWORD *)(v299 + 1052);
                                                                                    *(_DWORD *)(v299 + 1052) = v298;
                                                                                    uint64_t v301 = *(void *)(v286 + 8);
                                                                                    if (*(void *)v301
                                                                                      || *(_DWORD *)(v301 + 152)
                                                                                      || *(_DWORD *)(v301 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v301, (int)v283 + 1052, *(_DWORD *)(v301 + 56), 0xFFFFFFFFLL, 7, v300, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v302 = *(void *)v3 + v283;
                                                                                    int v303 = *(_DWORD *)(v302 + 1080);
                                                                                    *(_DWORD *)(v302 + 1080) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v283
                                                                                              + 1080) ^= 0x3FFu;
                                                                                    uint64_t v304 = *(void *)v3 + v283;
                                                                                    int v305 = *(_DWORD *)(v304 + 1080);
                                                                                    *(_DWORD *)(v304 + 1080) = v303;
                                                                                    uint64_t v306 = *(void *)(v286 + 8);
                                                                                    if (*(void *)v306
                                                                                      || *(_DWORD *)(v306 + 152)
                                                                                      || *(_DWORD *)(v306 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v306, (int)v283 + 1080, *(_DWORD *)(v306 + 56), 0x3FFFFFFFFFFLL, 32, v305, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    int v307 = *(_DWORD *)(*((void *)this + 32) + 2648);
                                                                                    uint64_t v308 = *((void *)this + 33) + v283;
                                                                                    int v309 = *(_DWORD *)(v308 + 884);
                                                                                    *(_DWORD *)(v308 + 884) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + v283
                                                                                              + 884) ^= 0xFFFFFF80;
                                                                                    uint64_t v310 = *((void *)this + 33) + v283;
                                                                                    int v311 = *(_DWORD *)(v310 + 884);
                                                                                    *(_DWORD *)(v310 + 884) = v309;
                                                                                    if (v307 == 1)
                                                                                    {
                                                                                      uint64_t v312 = *(void *)(v286 + 8);
                                                                                      if (*(void *)v312
                                                                                        || *(_DWORD *)(v312 + 152)
                                                                                        || *(_DWORD *)(v312 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v312, (int)v283 + 884, *(_DWORD *)(v312 + 64), 0xFFFFFFFFLL, 7, v311, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      uint64_t v313 = *(void *)v3 + v283;
                                                                                      int v314 = *(_DWORD *)(v313 + 912);
                                                                                      *(_DWORD *)(v313 + 912) = 0;
                                                                                      *(_DWORD *)(*(void *)v3
                                                                                                + v283
                                                                                                + 912) ^= 0x3FFu;
                                                                                      uint64_t v315 = *(void *)v3 + v283;
                                                                                      int v316 = *(_DWORD *)(v315 + 912);
                                                                                      *(_DWORD *)(v315 + 912) = v314;
                                                                                      uint64_t v317 = *(void *)(v286 + 8);
                                                                                      if (*(void *)v317
                                                                                        || *(_DWORD *)(v317 + 152)
                                                                                        || *(_DWORD *)(v317 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v317, (int)v283 + 912, *(_DWORD *)(v317 + 64), 0x3FFFFFFFFFFLL, 32, v316, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      uint64_t v318 = *(void *)v3 + v283;
                                                                                      int v319 = *(_DWORD *)(v318 + 996);
                                                                                      *(_DWORD *)(v318 + 996) = 0;
                                                                                      *(_DWORD *)(*(void *)v3
                                                                                                + v283
                                                                                                + 996) ^= 0xFFFFFF80;
                                                                                      uint64_t v320 = *(void *)v3 + v283;
                                                                                      int v321 = *(_DWORD *)(v320 + 996);
                                                                                      *(_DWORD *)(v320 + 996) = v319;
                                                                                      uint64_t v322 = *(void *)(v286 + 8);
                                                                                      if (*(void *)v322
                                                                                        || *(_DWORD *)(v322 + 152)
                                                                                        || *(_DWORD *)(v322 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v322, (int)v283 + 996, *(_DWORD *)(v322 + 68), 0xFFFFFFFFLL, 7, v321, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      uint64_t v323 = *(void *)v3 + v283;
                                                                                      int v324 = *(_DWORD *)(v323 + 1024);
                                                                                      *(_DWORD *)(v323 + 1024) = 0;
                                                                                      *(_DWORD *)(*(void *)v3
                                                                                                + v283
                                                                                                + 1024) ^= 0x3FFu;
                                                                                      uint64_t v325 = *(void *)v3 + v283;
                                                                                      int v326 = *(_DWORD *)(v325 + 1024);
                                                                                      *(_DWORD *)(v325 + 1024) = v324;
                                                                                      uint64_t v327 = *(void *)(v286 + 8);
                                                                                      if (*(void *)v327
                                                                                        || *(_DWORD *)(v327 + 152)
                                                                                        || *(_DWORD *)(v327 + 156))
                                                                                      {
                                                                                        int v328 = *(_DWORD *)(v327 + 68);
                                                                                        int v329 = v283 + 1024;
                                                                                        int v330 = this;
                                                                                        goto LABEL_329;
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      if (*(void *)(v286 + 24)
                                                                                        || *(_DWORD *)(v286 + 176)
                                                                                        || *(_DWORD *)(v286 + 180))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v286 + 24), (int)v283 + 884, 0, 0xFFFFFFFFLL, 7, v311, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      uint64_t v331 = *(void *)v3 + v283;
                                                                                      int v332 = *(_DWORD *)(v331 + 912);
                                                                                      *(_DWORD *)(v331 + 912) = 0;
                                                                                      *(_DWORD *)(*(void *)v3
                                                                                                + v283
                                                                                                + 912) ^= 0x3FFu;
                                                                                      uint64_t v333 = *(void *)v3 + v283;
                                                                                      int v334 = *(_DWORD *)(v333 + 912);
                                                                                      *(_DWORD *)(v333 + 912) = v332;
                                                                                      if (*(void *)(v286 + 24)
                                                                                        || *(_DWORD *)(v286 + 176)
                                                                                        || *(_DWORD *)(v286 + 180))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v286 + 24), (int)v283 + 912, 0, 0x3FFFFFFFFFFLL, 32, v334, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      uint64_t v335 = *(void *)v3 + v283;
                                                                                      int v336 = *(_DWORD *)(v335 + 996);
                                                                                      *(_DWORD *)(v335 + 996) = 0;
                                                                                      *(_DWORD *)(*(void *)v3
                                                                                                + v283
                                                                                                + 996) ^= 0xFFFFFF80;
                                                                                      uint64_t v337 = *(void *)v3 + v283;
                                                                                      int v338 = *(_DWORD *)(v337 + 996);
                                                                                      *(_DWORD *)(v337 + 996) = v336;
                                                                                      if (*(void *)(v286 + 200)
                                                                                        || *(_DWORD *)(v286 + 352)
                                                                                        || *(_DWORD *)(v286 + 356))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v286 + 200), (int)v283 + 996, 0, 0xFFFFFFFFLL, 7, v338, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      uint64_t v339 = *(void *)v3 + v283;
                                                                                      int v340 = *(_DWORD *)(v339 + 1024);
                                                                                      *(_DWORD *)(v339 + 1024) = 0;
                                                                                      *(_DWORD *)(*(void *)v3
                                                                                                + v283
                                                                                                + 1024) ^= 0x3FFu;
                                                                                      uint64_t v341 = *(void *)v3 + v283;
                                                                                      int v326 = *(_DWORD *)(v341 + 1024);
                                                                                      *(_DWORD *)(v341 + 1024) = v340;
                                                                                      if (*(void *)(v286 + 200)
                                                                                        || *(_DWORD *)(v286 + 352)
                                                                                        || *(_DWORD *)(v286 + 356))
                                                                                      {
                                                                                        int v329 = v283 + 1024;
                                                                                        int v330 = this;
                                                                                        uint64_t v327 = v286 + 200;
                                                                                        int v328 = 0;
LABEL_329:
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)v330, (void *)v327, v329, v328, 0x3FFFFFFFFFFLL, 32, v326, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    uint64_t result = 0;
                                                                                    v284 += 8;
                                                                                    v283 += 4;
                                                                                  }
                                                                                  while (v283 != 28);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecIxoraAvx::populateDecryptionRegisters(CAHDecIxoraAvx *this)
{
  uint64_t v1 = *((void *)this + 32);
  if (*(_DWORD *)(v1 + 2360) == 1)
  {
    uint64_t v2 = *((void *)this + 33);
    *(_DWORD *)(v2 + 1380) = *(_DWORD *)(v2 + 1380) & 0xFFFFFFFE | *(_DWORD *)(v1 + 2508) & 1;
    if (*(_DWORD *)(v1 + 2508))
    {
      *(_DWORD *)(v2 + 1392) = 0x10000000;
      *(_DWORD *)(v2 + 1396) = *(_DWORD *)(v1 + 2368);
      *(_DWORD *)(v2 + 1408) = 0;
      *(void *)(v2 + 1400) = 0;
      *(_OWORD *)(v2 + 1412) = *(_OWORD *)(v1 + 2372);
      long long v3 = *(_OWORD *)(v1 + 2388);
      *(_OWORD *)(v2 + 1444) = *(_OWORD *)(v1 + 2404);
      *(_OWORD *)(v2 + 1428) = v3;
    }
    *(_DWORD *)(*((void *)this + 33) + 1380) = *(_DWORD *)(*((void *)this + 33) + 1380) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v1 + 2512) & 1));
    if (*(_DWORD *)(v1 + 2512))
    {
      *(_DWORD *)(v2 + 1460) = 0;
      char v4 = *(_DWORD *)(v1 + 2424);
      *(_DWORD *)(v2 + 1460) = (*(_DWORD *)(v1 + 2424) & 1) << 22;
      int v5 = ((*(_DWORD *)(v1 + 2420) & 1) << 23) | ((v4 & 1) << 22) | 0x20000000;
      *(_DWORD *)(v2 + 1460) = v5;
      *(_DWORD *)(v2 + 1460) = v5 | (*(_DWORD *)(v1 + 2364) == 0);
      long long v6 = *(_OWORD *)(v1 + 2428);
      long long v7 = *(_OWORD *)(v1 + 2444);
      *(_OWORD *)(v2 + 1496) = *(_OWORD *)(v1 + 2460);
      *(_OWORD *)(v2 + 1480) = v7;
      *(_OWORD *)(v2 + 1464) = v6;
    }
    *(_DWORD *)(*((void *)this + 33) + 1380) = *(_DWORD *)(*((void *)this + 33) + 1380) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v1 + 2516) & 1));
    *(_DWORD *)(*((void *)this + 33) + 1380) = *(_DWORD *)(*((void *)this + 33) + 1380) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v1 + 2520) & 1));
    *(_DWORD *)(*((void *)this + 33) + 1380) = *(_DWORD *)(*((void *)this + 33) + 1380) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v1 + 2524) & 1));
    if (*(_DWORD *)(v1 + 2516))
    {
      *(_DWORD *)(v2 + 1516) = 0;
      if (*(_DWORD *)(v1 + 2476) == 2) {
        int v8 = 805306368;
      }
      else {
        int v8 = 813694976;
      }
      *(_DWORD *)(v2 + 1516) = v8;
      memcpy((void *)(v2 + 1520), (const void *)(v1 + 2480), 4 * *(unsigned int *)(v1 + 2476));
      *(_DWORD *)(v1 + 2516) = 0;
    }
  }
  return 0;
}

uint64_t CAHDecIxoraAvx::populateTiles(CAHDecIxoraAvx *this)
{
  uint64_t v2 = (*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 140)
                    * *(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 136));
  uint64_t v3 = *((void *)this + *((unsigned int *)this + 13) + 34);
  CAHDecIxoraAvx::populateClearTiles(this);
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 1536;
    do
    {
      CAHDecCatnipAvx::populateTileRegisters((uint64_t)this, v5, v4++);
      v5 += 12;
    }
    while (v2 != v4);
  }
  return 0;
}

uint64_t CAHDecIxoraAvx::populateAvxVPDependency(CAVDAvxDecoder **this)
{
  if (CAVDAvxDecoder::isParallelDecode(this[32])) {
    int v2 = 0;
  }
  else {
    int v2 = 32;
  }
  *((_DWORD *)this[33] + 345) = *((_DWORD *)this[33] + 345) & 0xFFFFFFDF | v2;
  *((_DWORD *)this[33] + 345) &= 0xFFFFF83F;
  *((_DWORD *)this[33] + 345) &= 0xFFFF07FF;
  *((_DWORD *)this[33] + 346) = 0;
  uint64_t v3 = this[33];
  int v4 = *((_DWORD *)v3 + 345);
  if ((v4 & 0x20) != 0)
  {
    *((_DWORD *)v3 + 345) = v4 & 0xFFFF07FF | (((unsigned __int16)((*(_WORD *)(*(void *)(*((void *)this[32] + 5303) + 1920)
                                                                                              + 2024) << 11)
                                                                                  + 2048) >> 8) >> 3 << 11);
    uint64_t v3 = this[33];
    int v4 = *((_DWORD *)v3 + 345);
  }
  *((_DWORD *)v3 + 345) = v4 & 0xFFFFF83F | (((((*(_DWORD *)(*((void *)this[32] + 1993) + 79296) << 6)
                                                            + 64) >> 6) & 0x1F) << 6);
  uint64_t v5 = this[32];
  uint64_t v6 = *((void *)v5 + 1993);
  if (*(void *)(v6 + 79312) || *(void *)(v6 + 79304))
  {
    *((_DWORD *)this[33] + 346) |= 1u;
    uint64_t v5 = this[32];
    uint64_t v6 = *((void *)v5 + 1993);
    if (*(void *)(v6 + 79312))
    {
      *((_DWORD *)this[33] + 346) = *((_DWORD *)this[33] + 346) & 0xFFFFFFC1 | (2
                                                                              * (((2
                                                                                               * *(_DWORD *)(*(void *)(*((void *)v5 + 5303) + 1920) + 2024)
                                                                                               + 2) >> 1) & 0x1F));
      uint64_t v5 = this[32];
      uint64_t v6 = *((void *)v5 + 1993);
    }
    if (*(void *)(v6 + 79304))
    {
      *((_DWORD *)this[33] + 346) = *((_DWORD *)this[33] + 346) & 0xFFFFF83F | (((((*(_DWORD *)(*(void *)(*(void *)(*((void *)v5 + 5303) + 1912) + 504) + 184) << 6)
                                                                                               + 64) >> 6) & 0x1F) << 6);
      uint64_t v5 = this[32];
      uint64_t v6 = *((void *)v5 + 1993);
    }
  }
  if (!*(unsigned char *)(v6 + 128))
  {
    *((_DWORD *)this[33] + 346) |= 0x800u;
    *((_DWORD *)this[33] + 346) = *((_DWORD *)this[33] + 346) & 0xFFFE0FFF | (((((*(_DWORD *)(*(void *)(*((void *)this[32] + 5303) + 1920) + 2024) << 12)
                                                                                             + 4096) >> 12) & 0x1F) << 12);
    uint64_t v5 = this[32];
  }
  if (*(unsigned char *)(*((void *)v5 + 5303) + 1957))
  {
    long long v7 = (void *)*((void *)v5 + 1993);
    if (v7[9820])
    {
      *((_DWORD *)this[33] + 346) |= 0x800u;
      *((_DWORD *)this[33] + 346) = *((_DWORD *)this[33] + 346) & 0xFFC1FFFF | (((((*(_DWORD *)(*((void *)this[32] + 1993) + 78744) << 17)
                                                                                               + 0x20000) >> 17) & 0x1F) << 17);
      long long v7 = (void *)*((void *)this[32] + 1993);
    }
    if (v7[9848])
    {
      *((_DWORD *)this[33] + 346) |= 0x800u;
      *((_DWORD *)this[33] + 346) = *((_DWORD *)this[33] + 346) & 0xF83FFFFF | (((((*(_DWORD *)(*((void *)this[32] + 1993) + 78968) << 22)
                                                                                               + 0x400000) >> 22) & 0x1F) << 22);
      long long v7 = (void *)*((void *)this[32] + 1993);
    }
    if (v7[9876])
    {
      *((_DWORD *)this[33] + 346) |= 0x800u;
      *((_DWORD *)this[33] + 346) = (*((_DWORD *)this[33] + 346) & 0x7FFFFFF | (*(_DWORD *)(*((void *)this[32] + 1993) + 79192) << 27))
                                  + 0x8000000;
    }
  }
  return 0;
}

uint64_t CAHDecIxoraAvx::populateCommonRegisters(CAHDecIxoraAvx *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000003;
  return 0;
}

uint64_t CAHDecIxoraAvx::updateCommonRegisters(CAHDecIxoraAvx *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -889266515;
  return 0;
}

uint64_t CAHDecIxoraAvx::populateSequenceRegisters(CAHDecIxoraAvx *this)
{
  uint64_t v2 = *((void *)this + 32);
  uint64_t v1 = *((void *)this + 33);
  uint64_t v3 = *(void *)(v2 + 42424);
  uint64_t v4 = *(void *)(v2 + 15944);
  *(_DWORD *)(v1 + 40) = 0;
  unsigned __int16 v5 = *(_DWORD *)(v4 + 8) - 1;
  *(_DWORD *)(v1 + 40) = v5;
  *(_DWORD *)(v1 + 40) = (v5 | ((unsigned __int16)*(_DWORD *)(v4 + 12) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  int v6 = *(_DWORD *)(v3 + 80) & 1;
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v3 + 76) & 7));
  *(_DWORD *)(v1 + 44) = v7;
  unsigned int v8 = v7 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v3 + 72) & 1));
  *(_DWORD *)(v1 + 44) = v8;
  unsigned int v9 = v8 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v3 + 96) & 1));
  *(_DWORD *)(v1 + 44) = v9;
  unsigned int v10 = v9 & 0xFFFFFFBF | ((*(unsigned char *)(v3 + 95) & 1) << 6);
  *(_DWORD *)(v1 + 44) = v10;
  unsigned int v11 = v10 & 0xFFFFFF7F | ((*(unsigned char *)(v3 + 94) & 1) << 7);
  *(_DWORD *)(v1 + 44) = v11;
  unsigned int v12 = v11 & 0xFFFFFEFF | ((*(unsigned char *)(v3 + 93) & 1) << 8);
  *(_DWORD *)(v1 + 44) = v12;
  unsigned int v13 = v12 & 0xFFFFFDFF | ((*(unsigned char *)(v3 + 92) & 1) << 9);
  *(_DWORD *)(v1 + 44) = v13;
  unsigned int v14 = v13 & 0xFFFFFBFF | ((*(_DWORD *)(v3 + 60) == 15) << 10);
  *(_DWORD *)(v1 + 44) = v14;
  LODWORD(v3) = v14 & 0xFFFFF7FF | (*(unsigned __int8 *)(v3 + 1942) << 11);
  *(_DWORD *)(v1 + 44) = v3;
  LODWORD(v3) = v3 & 0xFFF87FFF | ((*(unsigned char *)(v4 + 58) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v3;
  LODWORD(v3) = v3 & 0xFF87FFFF | ((*(unsigned char *)(v4 + 57) & 0xF) << 19);
  *(_DWORD *)(v1 + 44) = v3;
  *(_DWORD *)(v1 + 44) = v3 & 0xFCFFFFFF | ((*(unsigned char *)(v4 + 56) & 3) << 24);
  return 0;
}

uint64_t CAHDecIxoraAvx::getUpscaleConvolveStep(CAHDecIxoraAvx *this, int a2, int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 >= 0) {
      int v3 = a3;
    }
    else {
      int v3 = a3 + 1;
    }
    return (((v3 >> 1) + (a2 << 14)) / a3);
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      int v6 = "int32_t CAHDecIxoraAvx::getUpscaleConvolveStep(int, int)";
      __int16 v7 = 1024;
      int v8 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid out_length %d\n", (uint8_t *)&v5, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t CAHDecIxoraAvx::getUpscaleConvolveX0(CAHDecIxoraAvx *this, int a2, int a3, int a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 >= 0) {
      int v4 = a3;
    }
    else {
      int v4 = a3 + 1;
    }
    return ((((a2 - a3) << 13) + (v4 >> 1)) / a3
          - ((a4 * a3 - (a2 << 14) + (a4 * a3 - (a2 << 14) < 0)) >> 1)
          + 128) & 0x3FFF;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      __int16 v7 = "int32_t CAHDecIxoraAvx::getUpscaleConvolveX0(int, int, int32_t)";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid out_length %d\n", (uint8_t *)&v6, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t CAHDecIxoraAvx::populatePictureRegisters(CAHDecIxoraAvx *this)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v3 = *(void *)(v1 + 15944);
  uint64_t v4 = *(void *)(v1 + 42424);
  *(_DWORD *)(v2 + 48) = 766509056;
  int v5 = ((*(unsigned char *)(v1 + 2652) & 1) << 19) | 0x2DB00000;
  *(_DWORD *)(v2 + 48) = v5;
  unsigned int v6 = v5 & 0xFFFBFFFF | ((*(unsigned char *)(v1 + 2653) & 1) << 18);
  *(_DWORD *)(v2 + 48) = v6;
  unsigned int v7 = v6 & 0xFFFDFFFF | ((*(unsigned char *)(v1 + 2654) & 1) << 17);
  *(_DWORD *)(v2 + 48) = v7;
  int v8 = *(unsigned __int8 *)(v3 + 128);
  if (*(unsigned char *)(v3 + 128)) {
    int v8 = (*(unsigned char *)(v4 + 1956) == 0) << 13;
  }
  int v9 = v8 | v7;
  *(_DWORD *)(v2 + 48) = v9;
  int v10 = v9 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v2 + 48) = v10;
  unsigned int v11 = v10 & 0xFFFFF00F | ((*(_DWORD *)(*((void *)this + 32) + 2644) == 1) << 10) | 0x2E0;
  *(_DWORD *)(v2 + 48) = v11;
  unsigned int v12 = v11 & 0xFFFFFFE3 | (4 * (*(_DWORD *)(v3 + 78516) & 3));
  *(_DWORD *)(v2 + 48) = v12;
  *(_DWORD *)(v2 + 48) = v12 & 0xFFFFFFFC | *(_DWORD *)(v3 + 78520) & 3;
  *(_DWORD *)(v2 + 52) = 0;
  if (*(unsigned char *)(v4 + 1956)) {
    int v13 = 318767104;
  }
  else {
    int v13 = 50331648;
  }
  *(_DWORD *)(v2 + 52) = v13;
  int v14 = *(_DWORD *)(v3 + 24);
  int v15 = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v2 + 56) = 0;
  if (*(unsigned char *)(v4 + 1956)) {
    int v15 = ((_WORD)v15 + 7) & 0xFFF8;
  }
  int v16 = (v15 << 16) - 0x10000;
  *(_DWORD *)(v2 + 56) = v16;
  if (*(unsigned char *)(v4 + 1956)) {
    LOWORD(v14) = (v14 + 7) & 0xFFF8;
  }
  *(_DWORD *)(v2 + 60) = 0;
  *(_DWORD *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 56) = v16 & 0xFFFF0000 | (unsigned __int16)(v14 - 1);
  int v17 = *(unsigned __int8 *)(v3 + 128) << 31;
  *(_DWORD *)(v2 + 64) = v17;
  unsigned int v18 = v17 & 0x807FFFFF | (*(_DWORD *)(v4 + 1876) << 23);
  *(_DWORD *)(v2 + 64) = v18;
  unsigned int v19 = v18 & 0xFF8FFFFF | ((*(_DWORD *)(v4 + 1896) & 7) << 20);
  *(_DWORD *)(v2 + 64) = v19;
  unsigned int v20 = v19 & 0xFFF1FFFF | ((*(_DWORD *)(v4 + 1900) & 7) << 17);
  *(_DWORD *)(v2 + 64) = v20;
  unsigned int v21 = v20 & 0xFFFEFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79300) & 1) << 16);
  *(_DWORD *)(v2 + 64) = v21;
  unsigned int v22 = v21 & 0xFFFF7FFF | ((*(unsigned char *)(v4 + 2284) & 1) << 15);
  *(_DWORD *)(v2 + 64) = v22;
  char v23 = *(unsigned char *)(v4 + 2284);
  if (v23) {
    char v23 = *(unsigned char *)(v4 + 2285);
  }
  unsigned int v24 = v22 & 0xFFFFBFFF | ((v23 & 1) << 14);
  *(_DWORD *)(v2 + 64) = v24;
  char v25 = *(unsigned char *)(v4 + 2284);
  if (v25) {
    char v25 = *(unsigned char *)(v4 + 2287);
  }
  unsigned int v26 = v24 & 0xFFFFDFFF | ((v25 & 1) << 13);
  *(_DWORD *)(v2 + 64) = v26;
  unsigned int v27 = v26 & 0xFFFFEFFF | (*(unsigned __int8 *)(v4 + 1957) << 12);
  *(_DWORD *)(v2 + 64) = v27;
  if (*(unsigned char *)(v3 + 128)) {
    char v28 = 0;
  }
  else {
    char v28 = *(unsigned char *)(v4 + 1958);
  }
  unsigned int v29 = v27 & 0xFFFFFBFF | ((v28 & 1) << 10);
  *(_DWORD *)(v2 + 64) = v29;
  unsigned int v30 = v29 & 0xFFFFFDFF | (*(unsigned __int8 *)(v4 + 1962) << 9);
  *(_DWORD *)(v2 + 64) = v30;
  unsigned int v31 = v30 & 0xFFFFFEFF | (*(unsigned __int8 *)(v4 + 1941) << 8);
  *(_DWORD *)(v2 + 64) = v31;
  if (*(unsigned char *)(v3 + 128)) {
    char v32 = 1;
  }
  else {
    char v32 = *(unsigned char *)(v4 + 1948);
  }
  uint64_t v33 = 0;
  unsigned int v34 = v31 & 0xFFFFFF7F | ((v32 & 1) << 7);
  *(_DWORD *)(v2 + 64) = v34;
  unsigned int v35 = v34 & 0xFFFFFFBF | (*(unsigned __int8 *)(v4 + 1956) << 6);
  *(_DWORD *)(v2 + 64) = v35;
  unsigned int v36 = v35 & 0xFFFFFFDF | (32 * *(unsigned __int8 *)(v4 + 1959));
  *(_DWORD *)(v2 + 64) = v36;
  unsigned int v37 = v36 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v4 + 1892) & 1));
  *(_DWORD *)(v2 + 64) = v37;
  unsigned int v38 = v37 & 0xFFFFFFF7 | (8 * *(unsigned __int8 *)(v4 + 1960));
  *(_DWORD *)(v2 + 64) = v38;
  unsigned int v39 = v38 & 0xFFFFFFFB | (4 * *(unsigned __int8 *)(v4 + 1961));
  *(_DWORD *)(v2 + 64) = v39;
  *(_DWORD *)(v2 + 64) = v39 & 0xFFFFFFFC | *(_DWORD *)(v4 + 1964) & 3;
  do
  {
    *(&v210 + v33) = v33 + 1;
    ++v33;
  }
  while (v33 != 7);
  unint64_t v40 = 0;
  uint64_t v41 = 1;
  do
  {
    if (v40 <= 5)
    {
      uint64_t v42 = *(void *)(v3 + 79224);
      uint64_t v43 = v41;
      do
      {
        if (v42 && *(void *)(v42 + 8 * v40) == *(void *)(v42 + 8 * v43)) {
          *(&v210 + v43) = *(&v210 + v40);
        }
        ++v43;
      }
      while (v43 != 7);
    }
    ++v40;
    ++v41;
  }
  while (v40 != 7);
  int v44 = 0;
  *(_DWORD *)(v2 + 68) = 0;
  if (!*(unsigned char *)(v3 + 128)) {
    int v44 = *(unsigned __int8 *)(v4 + 2192);
  }
  uint64_t v45 = 0;
  *(_DWORD *)(v2 + 68) = v44 << 29;
  int v46 = ((v210 & 7) << 25) | ((*(_DWORD *)(v4 + 1872) != 0) << 28) | ((v211 & 7) << 22) | ((v212 & 7) << 19) | ((v213 & 7) << 16) | ((v214 & 7) << 13) | ((v215 & 7) << 10) | ((v216 & 7) << 7) | (v44 << 29);
  *(_DWORD *)(v2 + 68) = v46;
  unsigned int v47 = v46 & 0xFFFFFFBF | ((*(_DWORD *)(v4 + 2116) & 1) << 6);
  *(_DWORD *)(v2 + 68) = v47;
  unsigned int v48 = v47 & 0xFFFFFFDF | (32 * (*(_DWORD *)(v4 + 2120) & 1));
  *(_DWORD *)(v2 + 68) = v48;
  unsigned int v49 = v48 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v4 + 2124) & 1));
  *(_DWORD *)(v2 + 68) = v49;
  unsigned int v50 = v49 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v4 + 2128) & 1));
  *(_DWORD *)(v2 + 68) = v50;
  unsigned int v51 = v50 & 0xFFFFFFFB | (4 * (*(_DWORD *)(v4 + 2132) & 1));
  *(_DWORD *)(v2 + 68) = v51;
  unsigned int v52 = v51 & 0xFFFFFFFD | (2 * (*(_DWORD *)(v4 + 2136) & 1));
  *(_DWORD *)(v2 + 68) = v52;
  *(_DWORD *)(v2 + 68) = v52 & 0xFFFFFFFE | *(_DWORD *)(v4 + 2140) & 1;
  int v53 = (unsigned char *)(v4 + 2300);
  uint64_t v54 = (_WORD *)(v4 + 2368);
  do
  {
    uint64_t v55 = (_DWORD *)(v2 + 104 + v45);
    *(v55 - 8) = 0;
    int v56 = (*(_DWORD *)(v4 + 2524 + v45) & 1) << 16;
    *(v55 - 8) = v56;
    int v57 = v56 | ((*v53 != 0) << 15);
    *(v55 - 8) = v57;
    int v58 = v57 | ((*(v53 - 1) != 0) << 14);
    *(v55 - 8) = v58;
    int v59 = v58 | ((*(v53 - 2) != 0) << 13);
    *(v55 - 8) = v59;
    unsigned int v60 = v59 & 0xFFFFE3FF | ((*v54 & 7) << 10);
    *(v55 - 8) = v60;
    int v61 = v60 | ((*(v53 - 7) != 0) << 9);
    *(v55 - 8) = v61;
    *(v55 - 8) = v61 & 0xFFFFFE00 | *(v54 - 5) & 0x1FF;
    *uint64_t v55 = 0;
    int v62 = (*(v53 - 6) != 0) << 31;
    *uint64_t v55 = v62;
    unsigned int v63 = v62 & 0x80FFFFFF | ((*(v54 - 4) & 0x7F) << 24);
    *uint64_t v55 = v63;
    int v64 = v63 | ((*(v53 - 5) != 0) << 23);
    *uint64_t v55 = v64;
    unsigned int v65 = v64 & 0xFF80FFFF | ((*(v54 - 3) & 0x7F) << 16);
    *uint64_t v55 = v65;
    int v66 = v65 | ((*(v53 - 4) != 0) << 15);
    *uint64_t v55 = v66;
    unsigned int v67 = v66 & 0xFFFF80FF | ((*(v54 - 2) & 0x7F) << 8);
    *uint64_t v55 = v67;
    int v68 = v67 | ((*(v53 - 3) != 0) << 7);
    *uint64_t v55 = v68;
    *uint64_t v55 = v68 & 0xFFFFFF80 | *(v54 - 1) & 0x7F;
    v45 += 4;
    v53 += 8;
    v54 += 8;
  }
  while (v45 != 32);
  uint64_t v69 = 0;
  *(_DWORD *)(v2 + 136) = 0x20000;
  uint64_t v70 = v3 + 78544;
  do
  {
    int v71 = (unsigned int *)(v2 + 152 + v69);
    *(v71 - 3) = 0;
    unsigned int v72 = *(_DWORD *)(v70 - 16) << 29;
    *(v71 - 3) = v72;
    unsigned int v73 = v72 & 0xFF00FFFF | (*(_DWORD *)(v70 - 12) << 16);
    *(v71 - 3) = v73;
    unsigned int v74 = v73 & 0xFFFF00FF | (*(_DWORD *)(v70 - 8) << 8);
    *(v71 - 3) = v74;
    *(v71 - 3) = v74 | *(unsigned __int8 *)(v70 - 4);
    *int v71 = 0;
    unsigned int v75 = *(_DWORD *)v70 << 24;
    *int v71 = v75;
    unsigned int v76 = v75 & 0xFF00FFFF | (*(_DWORD *)(v70 + 4) << 16);
    *int v71 = v76;
    unsigned int v77 = v76 & 0xFFFF00FF | (*(_DWORD *)(v70 + 8) << 8);
    *int v71 = v77;
    *int v71 = v77 | *(unsigned __int8 *)(v70 + 12);
    v69 += 4;
    v70 += 224;
  }
  while (v69 != 12);
  *(_DWORD *)(v2 + 164) = 0;
  int v78 = *(_DWORD *)(v4 + 3160) << 31;
  *(_DWORD *)(v2 + 164) = v78;
  unsigned int v79 = v78 & 0x9FFFFFFF | ((*(_DWORD *)(v3 + 79200) & 3) << 29);
  *(_DWORD *)(v2 + 164) = v79;
  unsigned int v80 = v79 & 0xE01FFFFF | (*(_DWORD *)(v4 + 2244) << 21);
  *(_DWORD *)(v2 + 164) = v80;
  unsigned int v81 = v80 & 0xFFE03FFF | ((*(_DWORD *)(v4 + 2248) & 0x7F) << 14);
  *(_DWORD *)(v2 + 164) = v81;
  unsigned int v82 = v81 & 0xFFFFC07F | ((*(_DWORD *)(v4 + 2252) & 0x7F) << 7);
  *(_DWORD *)(v2 + 164) = v82;
  *(_DWORD *)(v2 + 164) = v82 & 0xFFFFFF80 | *(_DWORD *)(v4 + 2260) & 0x7F;
  *(_DWORD *)(v2 + 168) = 0;
  int v83 = (*(_DWORD *)(v4 + 2256) & 0x7F) << 20;
  *(_DWORD *)(v2 + 168) = v83;
  unsigned int v84 = v83 & 0xFFF01FFF | ((*(_DWORD *)(v4 + 2264) & 0x7F) << 13);
  *(_DWORD *)(v2 + 168) = v84;
  int v85 = v84 | (*(unsigned __int8 *)(v4 + 2268) << 12);
  *(_DWORD *)(v2 + 168) = v85;
  unsigned int v86 = v85 & 0xFFFFF0FF | ((*(_DWORD *)(v4 + 2272) & 0xF) << 8);
  *(_DWORD *)(v2 + 168) = v86;
  unsigned int v87 = v86 & 0xFFFFFF0F | (16 * (*(_DWORD *)(v4 + 2276) & 0xF));
  *(_DWORD *)(v2 + 168) = v87;
  *(_DWORD *)(v2 + 168) = v87 & 0xFFFFFFF0 | *(_DWORD *)(v4 + 2280) & 0xF;
  *(_DWORD *)(v2 + 172) = 0;
  if (!*(unsigned char *)(v4 + 1956))
  {
    int v102 = *(_DWORD *)(v4 + 3160);
    if (!v102) {
      goto LABEL_177;
    }
    int v102 = *(_DWORD *)(v4 + 3168) << 31;
    *(_DWORD *)(v2 + 172) = v102;
    if (*(_DWORD *)(v4 + 3168))
    {
      int v103 = ((*(_DWORD *)(v4 + 3176) & 1) << 28) | v102;
      *(_DWORD *)(v2 + 172) = v103;
      int v102 = ((*(_DWORD *)(v3 + 79204) & 3) << 29) | v103;
      *(_DWORD *)(v2 + 172) = v102;
    }
    if (!*(unsigned char *)(v4 + 1956))
    {
LABEL_177:
      if (!*(unsigned char *)(v4 + 1962))
      {
        unsigned int v104 = v102 & 0xF7FFFFFF | ((*(unsigned char *)(v4 + 2216) & 1) << 27);
        *(_DWORD *)(v2 + 172) = v104;
        unsigned int v105 = v104 & 0xF8FFFFFF | ((*(_DWORD *)(v4 + 2212) & 7) << 24);
        *(_DWORD *)(v2 + 172) = v105;
        unsigned int v106 = v105 & 0xFF03FFFF | ((*(_DWORD *)(v4 + 2196) & 0x3F) << 18);
        *(_DWORD *)(v2 + 172) = v106;
        unsigned int v107 = v106 & 0xFFFC0FFF | ((*(_DWORD *)(v4 + 2200) & 0x3F) << 12);
        *(_DWORD *)(v2 + 172) = v107;
        if (*(_DWORD *)(v4 + 2196) || *(_DWORD *)(v4 + 2200)) {
          int v108 = *(_DWORD *)(v4 + 2204);
        }
        else {
          LOBYTE(v108) = 0;
        }
        unsigned int v109 = v107 & 0xFFFFF03F | ((v108 & 0x3F) << 6);
        *(_DWORD *)(v2 + 172) = v109;
        if (*(_DWORD *)(v4 + 2196) || (int v110 = *(_DWORD *)(v4 + 2200)) != 0) {
          int v110 = *(_DWORD *)(v4 + 2208);
        }
        *(_DWORD *)(v2 + 172) = v109 & 0xFFFFFFC0 | v110 & 0x3F;
        if (!*(unsigned char *)(v3 + 56)) {
          *(_DWORD *)(v2 + 172) = v107 & 0xFFFFF000;
        }
      }
    }
  }
  *(_DWORD *)(v2 + 176) = 0;
  int v88 = (*(unsigned char *)(v4 + 2226) & 0x7F) << 21;
  *(_DWORD *)(v2 + 176) = v88;
  unsigned int v89 = v88 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 2227) & 0x7F) << 14);
  *(_DWORD *)(v2 + 176) = v89;
  unsigned int v90 = v89 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 2228) & 0x7F) << 7);
  *(_DWORD *)(v2 + 176) = v90;
  *(_DWORD *)(v2 + 176) = v90 & 0xFFFFFF80 | *(unsigned char *)(v4 + 2229) & 0x7F;
  *(_DWORD *)(v2 + 180) = 0;
  int v91 = (*(unsigned char *)(v4 + 2230) & 0x7F) << 21;
  *(_DWORD *)(v2 + 180) = v91;
  unsigned int v92 = v91 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 2231) & 0x7F) << 14);
  *(_DWORD *)(v2 + 180) = v92;
  unsigned int v93 = v92 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 2232) & 0x7F) << 7);
  *(_DWORD *)(v2 + 180) = v93;
  *(_DWORD *)(v2 + 180) = v93 & 0xFFFFFF80 | *(unsigned char *)(v4 + 2233) & 0x7F;
  *(_DWORD *)(v2 + 184) = 0;
  LOBYTE(v93) = *(unsigned char *)(v4 + 2236);
  *(_DWORD *)(v2 + 184) = (v93 & 0x7F) << 7;
  *(_DWORD *)(v2 + 184) = *(unsigned char *)(v4 + 2237) & 0x7F | ((v93 & 0x7F) << 7);
  *(void *)(v2 + 188) = 0;
  int v94 = (_DWORD *)(v2 + 188);
  *(void *)(v2 + 196) = 0;
  if (*(unsigned char *)(v4 + 99) && !*(unsigned char *)(v4 + 1962) && !*(unsigned char *)(v4 + 1956))
  {
    *int v94 = 0x10000000;
    int v95 = ((*(_DWORD *)(v4 + 3180) << 26) + 0x4000000) & 0xC000000 | 0x10000000;
    *int v94 = v95;
    unsigned int v96 = v95 & 0xFCFFFFFF | ((*(_DWORD *)(v4 + 3184) & 3) << 24);
    *int v94 = v96;
    unsigned int v97 = v96 & 0xFF0FFFFF | ((*(_DWORD *)(v4 + 3192) & 0xF) << 20);
    *int v94 = v97;
    unsigned int v98 = v97 & 0xFFF3FFFF | ((*(_DWORD *)(v4 + 3256) & 3) << 18);
    *int v94 = v98;
    unsigned int v99 = v98 & 0xFFFC3FFF | ((*(_DWORD *)(v4 + 3320) & 0xF) << 14);
    *int v94 = v99;
    unsigned int v100 = v99 & 0xFFFFCFFF | ((*(_DWORD *)(v4 + 3384) & 3) << 12);
    *int v94 = v100;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v101) = 0;
    }
    else {
      int v101 = *(_DWORD *)(v4 + 3196);
    }
    unsigned int v111 = v100 & 0xFFFFF0FF | ((v101 & 0xF) << 8);
    *int v94 = v111;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v112) = 0;
    }
    else {
      int v112 = *(_DWORD *)(v4 + 3260);
    }
    unsigned int v113 = v111 & 0xFFFFFF3F | ((v112 & 3) << 6);
    *int v94 = v113;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v114) = 0;
    }
    else {
      int v114 = *(_DWORD *)(v4 + 3324);
    }
    unsigned int v115 = v113 & 0xFFFFFFC3 | (4 * (v114 & 0xF));
    *int v94 = v115;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v116) = 0;
    }
    else {
      int v116 = *(_DWORD *)(v4 + 3388);
    }
    *int v94 = v115 & 0xFFFFFFFC | v116 & 3;
    if (*(int *)(v4 + 3188) <= 2) {
      LOBYTE(v117) = 0;
    }
    else {
      int v117 = *(_DWORD *)(v4 + 3200);
    }
    int v118 = (v117 & 0xF) << 20;
    *(_DWORD *)(v2 + 192) = v118;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v119) = 0;
    }
    else {
      int v119 = *(_DWORD *)(v4 + 3264);
    }
    int v120 = ((v119 & 3) << 18) | v118;
    *(_DWORD *)(v2 + 192) = v120;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v121) = 0;
    }
    else {
      int v121 = *(_DWORD *)(v4 + 3328);
    }
    int v122 = ((v121 & 0xF) << 14) | v120;
    *(_DWORD *)(v2 + 192) = v122;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v123) = 0;
    }
    else {
      int v123 = *(_DWORD *)(v4 + 3392);
    }
    int v124 = ((v123 & 3) << 12) | v122;
    *(_DWORD *)(v2 + 192) = v124;
    if (*(int *)(v4 + 3188) <= 3) {
      LOBYTE(v125) = 0;
    }
    else {
      int v125 = *(_DWORD *)(v4 + 3204);
    }
    int v126 = ((v125 & 0xF) << 8) | v124;
    *(_DWORD *)(v2 + 192) = v126;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v127) = 0;
    }
    else {
      int v127 = *(_DWORD *)(v4 + 3268);
    }
    int v128 = ((v127 & 3) << 6) | v126;
    *(_DWORD *)(v2 + 192) = v128;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v129) = 0;
    }
    else {
      int v129 = *(_DWORD *)(v4 + 3332);
    }
    unsigned int v130 = (4 * (v129 & 0xF)) | v128 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 192) = v130;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v131) = 0;
    }
    else {
      int v131 = *(_DWORD *)(v4 + 3396);
    }
    *(_DWORD *)(v2 + 192) = v130 & 0xFFFFFFFC | v131 & 3;
    if (*(int *)(v4 + 3188) <= 4) {
      LOBYTE(v132) = 0;
    }
    else {
      int v132 = *(_DWORD *)(v4 + 3208);
    }
    int v133 = (v132 & 0xF) << 20;
    *(_DWORD *)(v2 + 196) = v133;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v134) = 0;
    }
    else {
      int v134 = *(_DWORD *)(v4 + 3272);
    }
    int v135 = ((v134 & 3) << 18) | v133;
    *(_DWORD *)(v2 + 196) = v135;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v136) = 0;
    }
    else {
      int v136 = *(_DWORD *)(v4 + 3336);
    }
    int v137 = ((v136 & 0xF) << 14) | v135;
    *(_DWORD *)(v2 + 196) = v137;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v138) = 0;
    }
    else {
      int v138 = *(_DWORD *)(v4 + 3400);
    }
    int v139 = ((v138 & 3) << 12) | v137;
    *(_DWORD *)(v2 + 196) = v139;
    if (*(int *)(v4 + 3188) <= 5) {
      LOBYTE(v140) = 0;
    }
    else {
      int v140 = *(_DWORD *)(v4 + 3212);
    }
    int v141 = ((v140 & 0xF) << 8) | v139;
    *(_DWORD *)(v2 + 196) = v141;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v142) = 0;
    }
    else {
      int v142 = *(_DWORD *)(v4 + 3276);
    }
    int v143 = ((v142 & 3) << 6) | v141;
    *(_DWORD *)(v2 + 196) = v143;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v144) = 0;
    }
    else {
      int v144 = *(_DWORD *)(v4 + 3340);
    }
    unsigned int v145 = (4 * (v144 & 0xF)) | v143 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 196) = v145;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v146) = 0;
    }
    else {
      int v146 = *(_DWORD *)(v4 + 3404);
    }
    *(_DWORD *)(v2 + 196) = v145 & 0xFFFFFFFC | v146 & 3;
    if (*(int *)(v4 + 3188) <= 6) {
      LOBYTE(v147) = 0;
    }
    else {
      int v147 = *(_DWORD *)(v4 + 3216);
    }
    int v148 = (v147 & 0xF) << 20;
    *(_DWORD *)(v2 + 200) = v148;
    if (*(int *)(v4 + 3188) < 7) {
      LOBYTE(v149) = 0;
    }
    else {
      int v149 = *(_DWORD *)(v4 + 3280);
    }
    int v150 = ((v149 & 3) << 18) | v148;
    *(_DWORD *)(v2 + 200) = v150;
    if (*(int *)(v4 + 3188) < 7) {
      int v151 = 0;
    }
    else {
      int v151 = (*(_DWORD *)(v4 + 3344) & 0xF) << 14;
    }
    int v152 = v151 | v150;
    *(_DWORD *)(v2 + 200) = v152;
    if (*(int *)(v4 + 3188) < 7) {
      int v153 = 0;
    }
    else {
      int v153 = (*(_DWORD *)(v4 + 3408) & 3) << 12;
    }
    int v154 = v153 | v152;
    *(_DWORD *)(v2 + 200) = v154;
    if (*(int *)(v4 + 3188) <= 7) {
      int v155 = 0;
    }
    else {
      int v155 = (*(_DWORD *)(v4 + 3220) & 0xF) << 8;
    }
    int v156 = v155 | v154;
    *(_DWORD *)(v2 + 200) = v156;
    if (*(int *)(v4 + 3188) < 8) {
      int v157 = 0;
    }
    else {
      int v157 = (*(_DWORD *)(v4 + 3284) & 3) << 6;
    }
    int v158 = v157 | v156;
    *(_DWORD *)(v2 + 200) = v158;
    if (*(int *)(v4 + 3188) < 8) {
      int v159 = 0;
    }
    else {
      int v159 = 4 * (*(_DWORD *)(v4 + 3348) & 0xF);
    }
    unsigned int v160 = v159 | v158 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 200) = v160;
    if (*(int *)(v4 + 3188) < 8) {
      int v161 = 0;
    }
    else {
      int v161 = *(_DWORD *)(v4 + 3412) & 3;
    }
    *(_DWORD *)(v2 + 200) = v161 | v160 & 0xFFFFFFFC;
  }
  if (*(unsigned char *)(v4 + 98))
  {
    int v162 = (_DWORD *)(v2 + 204);
    if (*(unsigned char *)(v4 + 2172) != 8)
    {
      *int v162 = 0x80000000;
      unsigned int v163 = ((*(unsigned __int8 *)(v4 + 2172) << 28) - 0x10000000) | 0x80000000;
      goto LABEL_143;
    }
  }
  else
  {
    int v162 = (_DWORD *)(v2 + 204);
  }
  unsigned int v163 = 0;
  *int v162 = 0;
LABEL_143:
  *(_DWORD *)(v2 + 204) = v163;
  *(_DWORD *)(v2 + 204) = (unsigned __int16)(*(_DWORD *)(v4 + 2164) - 1) | v163;
  UpscaleConvolveStep = (CAHDecIxoraAvx *)CAHDecIxoraAvx::getUpscaleConvolveStep(this, *(_DWORD *)(v4 + 2176), *(_DWORD *)(v4 + 2164));
  __int16 v165 = (__int16)UpscaleConvolveStep;
  UpscaleConvolveX0 = (CAHDecIxoraAvx *)CAHDecIxoraAvx::getUpscaleConvolveX0(UpscaleConvolveStep, *(_DWORD *)(v4 + 2176), *(_DWORD *)(v4 + 2164), (int)UpscaleConvolveStep);
  *(_DWORD *)(v2 + 208) = v165 & 0x3FFF | (((unsigned __int16)UpscaleConvolveX0 & 0x3FFF) << 14);
  unsigned int v167 = (*(_DWORD *)(v4 + 2176) + 1) >> 1;
  unsigned int v168 = (*(_DWORD *)(v4 + 2164) + 1) >> 1;
  int v169 = (CAHDecIxoraAvx *)CAHDecIxoraAvx::getUpscaleConvolveStep(UpscaleConvolveX0, v167, v168);
  *(_DWORD *)(v2 + 212) = (unsigned __int16)v169 & 0x3FFF | ((CAHDecIxoraAvx::getUpscaleConvolveX0(v169, v167, v168, (int)v169) & 0x3FFF) << 14);
  *(_DWORD *)(v2 + 216) = 0;
  int v170 = (*(_DWORD *)(v4 + 3448) & 3) << 10;
  *(_DWORD *)(v2 + 216) = v170;
  int v171 = *(unsigned __int8 *)(v3 + 56);
  if (*(unsigned char *)(v3 + 56)) {
    int v171 = (*(_DWORD *)(v4 + 3452) & 3) << 8;
  }
  int v172 = v171 | v170;
  *(_DWORD *)(v2 + 216) = v172;
  int v173 = *(unsigned __int8 *)(v3 + 56);
  if (*(unsigned char *)(v3 + 56)) {
    int v173 = (*(_DWORD *)(v4 + 3456) & 3) << 6;
  }
  int v174 = v173 | v172;
  *(_DWORD *)(v2 + 216) = v174;
  int v175 = (16 * (*(_DWORD *)(v3 + 79208) & 3)) | v174;
  *(_DWORD *)(v2 + 216) = v175;
  int v176 = (4 * (*(_DWORD *)(v3 + 79212) & 3)) | v175;
  *(_DWORD *)(v2 + 216) = v176;
  *(_DWORD *)(v2 + 216) = v176 & 0xFFC | *(_DWORD *)(v3 + 79216) & 3;
  *(_DWORD *)(v2 + 220) = 0;
  int v177 = *(_DWORD *)(v3 + 78496);
  *(_DWORD *)(v2 + 220) = v177 << 16;
  *(_DWORD *)(v2 + 220) = *(unsigned __int16 *)(v3 + 78492) | ((unsigned __int16)v177 << 16);
  *(_DWORD *)(v2 + 224) = 0;
  int v178 = *(_DWORD *)(v3 + 78504);
  *(_DWORD *)(v2 + 224) = v178 << 16;
  *(_DWORD *)(v2 + 224) = *(unsigned __int16 *)(v3 + 78500) | ((unsigned __int16)v178 << 16);
  if (*(unsigned char *)(v3 + 128))
  {
    uint64_t result = 0;
    if (*(unsigned char *)(v4 + 1956))
    {
      *(_DWORD *)(v2 + 368) = (*(_DWORD *)(v2 + 48) << 18) & 0x1000000 | (((*(_DWORD *)(v2 + 48) >> 4) & 1) << 25);
      *(_DWORD *)(v2 + 400) = 0;
      unsigned int v180 = (((*(_DWORD *)(v3 + 12) << 16) + 458752) & 0xFFF80000) - 0x10000;
      *(_DWORD *)(v2 + 400) = v180;
      *(_DWORD *)(v2 + 400) = ((((unsigned __int16)*(_DWORD *)(v3 + 8) + 7) & 0xFFF8) + 0xFFFF) | v180;
      *(_DWORD *)(v2 + 432) = 1073758208;
    }
  }
  else
  {
    uint64_t v181 = (_DWORD *)(v2 + 228);
    uint64_t v182 = -308;
    do
    {
      uint64_t v183 = v4 + v182;
      int v184 = (unsigned char *)(v4 + v182 + 4136);
      if (*v184 == 1)
      {
        if ((*(unsigned char *)(v2 + 65) & 4) != 0) {
          char v185 = -3;
        }
        else {
          char v185 = -2;
        }
      }
      else
      {
        char v185 = -6;
      }
      char v186 = v185 + 16;
      *uint64_t v181 = 0;
      int v187 = *v184 << 30;
      *uint64_t v181 = v187;
      unsigned int v188 = v187 & 0xC0007FFF | (((*(int *)(v183 + 4096) >> v186) & 0x7FFF) << 15);
      *uint64_t v181 = v188;
      *uint64_t v181 = v188 & 0xFFFF8000 | (*(int *)(v183 + 4100) >> v186) & 0x7FFF;
      v181[7] = 0;
      int v189 = (*(unsigned char *)(v183 + 4137) == 0) << 30;
      v181[7] = v189;
      unsigned int v190 = v189 & 0xC0007FFF | (((*(_DWORD *)(v183 + 4104) >> 1) & 0x7FFF) << 15);
      v181[7] = v190;
      v181[7] = v190 & 0xFFFF8000 | ((unsigned __int16)*(_DWORD *)(v183 + 4108) >> 1);
      v181[14] = 0;
      int v191 = (*(_DWORD *)(v183 + 4112) << 14) & 0x3FFF8000;
      v181[14] = v191;
      v181[14] = v191 & 0xFFFF8000 | ((unsigned __int16)*(_DWORD *)(v183 + 4116) >> 1);
      v181[21] = 0;
      int v192 = *(unsigned __int16 *)(v183 + 4128);
      v181[21] = v192 << 16;
      v181[21] = *(unsigned __int16 *)(v183 + 4130) | ((unsigned __int16)v192 << 16);
      v181[28] = 0;
      int v193 = *(unsigned __int16 *)(v183 + 4132);
      v181[28] = v193 << 16;
      v181[28] = *(unsigned __int16 *)(v183 + 4134) | ((unsigned __int16)v193 << 16);
      ++v181;
      v182 += 44;
    }
    while (v182);
    uint64_t v194 = **(void **)(v3 + 79224);
    if (v194)
    {
      uint64_t v195 = 0;
      int v196 = (_DWORD *)(v2 + 436);
      while (1)
      {
        *(v196 - 16) = 0;
        int v197 = (*(_DWORD *)(v2 + 48) << 18) & 0x1000000 | (((*(_DWORD *)(v2 + 48) >> 4) & 1) << 25);
        *(v196 - 16) = v197;
        *(v196 - 16) = v197 | *(unsigned __int8 *)(v194 + 4);
        *(v196 - 8) = 0;
        int v198 = (*(_DWORD *)(v194 + 1768) << 16) - 0x10000;
        *(v196 - 8) = v198;
        *(v196 - 8) = v198 & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)(v194 + 1760) - 1);
        *int v196 = 0;
        int v199 = *(_DWORD *)(v3 + 12);
        int v200 = v199 >= 0 ? *(_DWORD *)(v3 + 12) : v199 + 1;
        int v201 = (((v200 >> 1) + (*(_DWORD *)(v194 + 1768) << 14)) / v199) << 16;
        *int v196 = v201;
        int v202 = *(_DWORD *)(v194 + 1760);
        int v203 = *(_DWORD *)(v3 + 8);
        int v204 = v203 >= 0 ? *(_DWORD *)(v3 + 8) : v203 + 1;
        *int v196 = v201 & 0xFFFF0000 | (unsigned __int16)(((v204 >> 1) + (v202 << 14)) / v203);
        if (v195 == 6) {
          break;
        }
        uint64_t v194 = *(void *)(*(void *)(v3 + 79224) + 8 * v195 + 8);
        ++v196;
        ++v195;
        if (!v194)
        {
          int v205 = (unint64_t)(v195 - 1) < 6;
          goto LABEL_170;
        }
      }
      int v205 = 0;
    }
    else
    {
      LODWORD(v195) = 0;
      int v205 = 1;
LABEL_170:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v206 = 136315394;
        int v207 = "virtual int CAHDecIxoraAvx::populatePictureRegisters()";
        __int16 v208 = 1024;
        int v209 = v195;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid reference buffer %d\n", (uint8_t *)&v206, 0x12u);
      }
    }
    return (v205 << 31 >> 31);
  }
  return result;
}

uint64_t CAHDecIxoraAvx::populateClearTiles(CAHDecIxoraAvx *this)
{
  uint64_t v2 = (CAVDAvxDecoder *)*((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = (_DWORD *)*((void *)v2 + 1993);
  int v5 = v4[34];
  *(_WORD *)(v3 + 1108) = v4[35];
  *(_WORD *)(v3 + 1110) = v5;
  if (CAVDAvxDecoder::isParallelDecode(v2)) {
    int v6 = -1;
  }
  else {
    int v6 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 42424) + 3156);
  }
  unsigned int v7 = v4 + 16420;
  uint64_t v8 = *((void *)this + 33);
  *(_DWORD *)(v8 + 1372) = v6;
  uint64_t v9 = v4[35];
  if (v9)
  {
    int v10 = v4 + 16485;
    unsigned int v11 = (_WORD *)(v8 + 1112);
    do
    {
      int v12 = *v10++;
      *v11++ = v12;
      --v9;
    }
    while (v9);
  }
  uint64_t v13 = v4[34];
  if (v13)
  {
    int v14 = (_WORD *)(v8 + 1242);
    do
    {
      int v15 = *v7++;
      *v14++ = v15;
      --v13;
    }
    while (v13);
  }
  return 0;
}

uint64_t CAHDecIxoraAvx::getTileStartCTU(CAHDecIxoraAvx *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 1108);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecIxoraAvx::getTileEndCTU(CAHDecIxoraAvx *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 1108);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecIxoraAvx::populateAvdWork(CAHDecIxoraAvx *this)
{
  uint64_t v1 = this;
  v65[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v57 = *((void *)this + 33) + 50688;
  uint64_t v3 = (_DWORD *)(v2 + 42424);
  uint64_t v4 = *(uint64_t **)(v2 + 15944);
  unsigned int v6 = *((_DWORD *)v4 + 34);
  LODWORD(v5) = *((_DWORD *)v4 + 35);
  unsigned int v7 = v3[74];
  int v58 = (v5 * v6 > 1) & (v7 >> 1);
  if (v58) {
    int v8 = 2;
  }
  else {
    int v8 = 1;
  }
  unsigned int v9 = (v7 & 4) != 0 && (*(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & 1) == 0;
  v65[0] = 0;
  v65[1] = 0;
  uint64_t v64 = 0;
  int v10 = *(_DWORD *)(*(void *)v3 + 60);
  uint64_t v56 = *v4;
  unint64_t v11 = v9 + v8;
  if (((v5 * v6 > 1) & (v7 >> 1)) != 0) {
    uint64_t v12 = 73728;
  }
  else {
    uint64_t v12 = 147456;
  }
  unint64_t v13 = v9;
  uint64_t v14 = v57;
  unint64_t v15 = v9;
  do
  {
    v65[v15++] = v14;
    v14 += v12;
  }
  while (v15 < v11);
  if (v10 == 15) {
    char v16 = 5;
  }
  else {
    char v16 = 4;
  }
  char v54 = v16;
  if (v6)
  {
    unint64_t v17 = 0;
    int v18 = 0;
    uint64_t v19 = v65[v9];
    unint64_t v20 = 0x8E38E38E38E38E39 * ((v19 - v57) >> 2);
    int v49 = v8 - 1;
    int v21 = -(v5 * v6);
    unsigned int v22 = (int *)(v4 + 8243);
    char v23 = v4 + 8210;
    uint64_t v59 = (uint64_t)v1;
    unsigned int v50 = v4;
    int v45 = v12;
    unint64_t v46 = v9 + v8;
    int v44 = v21;
    uint64_t v42 = v4 + 8210;
    uint64_t v43 = (int *)(v4 + 8243);
    do
    {
      if (v5)
      {
        unint64_t v24 = 0;
        unint64_t v48 = v17 + 1;
        unsigned int v52 = (_DWORD *)v23 + v17 + 1;
        int v53 = (_DWORD *)v23 + v17;
        int v55 = v21 + v18;
        int v47 = v18;
        int v25 = v18;
        int v51 = v18;
        do
        {
          unint64_t v26 = v24;
          int v27 = v55 + v24;
          unsigned int v28 = v25 + v24;
          *(_WORD *)(v19 + 4) = *((_DWORD *)&v65[-1] + v9);
          *(_WORD *)(v19 + 6) = v9;
          *(_WORD *)(v19 + 10) = v25 + v24;
          if (v25 + v24) {
            __int16 v29 = 4;
          }
          else {
            __int16 v29 = 5;
          }
          *(_WORD *)(v19 + 12) = v29;
          if (v27 == -1)
          {
            *(_DWORD *)(v19 + 14) = 262149;
          }
          else
          {
            *(_WORD *)(v19 + 14) = 4;
            if ((v58 & (v27 == -2)) == 1) {
              *(_WORD *)(v19 + 16) = 4;
            }
            else {
              *(_WORD *)(v19 + 16) = 0;
            }
          }
          uint64_t v30 = v4[v28 + 18];
          uint64_t v31 = *((void *)v1 + 32);
          if (*(unsigned char *)(v31 + 2834)) {
            uint64_t v32 = *(void *)(v31 + 2840);
          }
          else {
            uint64_t v32 = *(void *)(v31 + 1048) + 8;
          }
          unint64_t v33 = v56 + v30 - *(void *)v32;
          int v34 = 36 * v20;
          unint64_t v35 = HIDWORD(v33);
          if (*(void *)v32 || *(_DWORD *)(v32 + 152) || *(_DWORD *)(v32 + 156))
          {
            if (v35 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315394;
              int v61 = "populateAvdWork";
              __int16 v62 = 1024;
              int v63 = 1631;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            uint64_t result = CAHDec::addToPatcherList(v59, (void *)v32, v34 + 50708, v33, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
            if (*(void *)v32) {
              goto LABEL_59;
            }
          }
          if (*(_DWORD *)(v32 + 152) || *(_DWORD *)(v32 + 156))
          {
LABEL_59:
            if (v35 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315394;
              int v61 = "populateAvdWork";
              __int16 v62 = 1024;
              int v63 = 1632;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            uint64_t result = CAHDec::addToPatcherList(v59, (void *)v32, v34 + 50706, v33, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
          }
          uint64_t v4 = v50;
          unsigned int v37 = &v50[v28 + 4114];
          uint64_t v38 = *v37;
          if (HIDWORD(*v37))
          {
            uint64_t v1 = (CAHDecIxoraAvx *)v59;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315394;
              int v61 = "populateAvdWork";
              __int16 v62 = 1024;
              int v63 = 1634;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              uint64_t v38 = *v37;
            }
          }
          else
          {
            uint64_t v1 = (CAHDecIxoraAvx *)v59;
          }
          *(_DWORD *)(v19 + 24) = v38;
          *(_DWORD *)(v19 + 28) = (*(v22 - 1) >> v54) | (*v53 >> v54 << 16);
          int v25 = v51;
          int v39 = *v22++;
          *(_DWORD *)(v19 + 32) = ((v39 - 1) >> v54) | ((*v52 - 1) >> v54 << 16);
          ++*((_DWORD *)&v65[-1] + v9);
          unint64_t v24 = v26 + 1;
          v65[v9] += 36;
          if (v58) {
            unsigned int v9 = (v51 + v26 + 1) & v49;
          }
          *(_WORD *)(v19 + 8) = v9;
          uint64_t v19 = v65[v9];
          unint64_t v20 = 0x8E38E38E38E38E39 * ((v19 - v57) >> 2);
          unint64_t v5 = *((unsigned int *)v50 + 35);
        }
        while (v24 < v5);
        unsigned int v6 = *((_DWORD *)v50 + 34);
        int v18 = v47 + v24;
        LODWORD(v12) = v45;
        unint64_t v11 = v46;
        unint64_t v17 = v48;
        int v21 = v44;
        char v23 = v42;
        unsigned int v22 = v43;
      }
      else
      {
        ++v17;
      }
    }
    while (v17 < v6);
  }
  uint64_t v40 = *((void *)v1 + 33) + 32;
  int v41 = 50688;
  do
  {
    *(_WORD *)(v40 + 2 * v13 - 6) = *((_DWORD *)&v65[-1] + v13);
    *(_DWORD *)(v40 + 4 * v13++) = v41;
    v41 += v12;
  }
  while (v13 < v11);
  return 0;
}

uint64_t CAHDecIxoraAvx::allocWorkBuf_SPS(CAHDecIxoraAvx *this, int *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  int v4 = a2[1];
  unsigned int v6 = *((unsigned __int8 *)a2 + 32);
  if (v6 >= 4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 136315394;
    int v49 = "allocWorkBuf_SPS";
    __int16 v50 = 1024;
    int v51 = 1780;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v48, 0x12u);
  }
  unsigned int v7 = (_DWORD *)*((void *)this + 32);
  int v8 = v7[10681];
  if (!v8 || (int v9 = v7[10682]) == 0)
  {
    int v8 = v5;
    int v9 = v4;
  }
  int v10 = v8 + 31;
  if (v8 < -31) {
    int v10 = v8 + 62;
  }
  unsigned int v11 = v10 >> 5;
  int v12 = v9 + 31;
  if (v9 < -31) {
    int v12 = v9 + 62;
  }
  unsigned int v13 = v12 >> 5;
  unsigned int v14 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v15 = v14;
  }
  else {
    char v15 = 0;
  }
  unsigned int v16 = 32 - __clz(v13 - 1);
  if (v13 >= 2) {
    char v17 = v16;
  }
  else {
    char v17 = 0;
  }
  unsigned int v18 = ((32 << (v17 + v15)) + 127) & 0xFFFFFF80;
  if (!v6)
  {
    unsigned int v27 = 0;
LABEL_27:
    LOBYTE(v28) = 0;
    goto LABEL_28;
  }
  int v19 = v8 << (v6 == 3);
  int v20 = v19 + 31;
  int v21 = v19 + 62;
  if (v20 >= 0) {
    int v21 = v20;
  }
  unsigned int v22 = v21 >> 5;
  if (v6 == 1) {
    ++v9;
  }
  int v23 = v9 >> (v6 == 1);
  int v25 = v23 + 15;
  BOOL v24 = v23 < -15;
  int v26 = v23 + 30;
  if (!v24) {
    int v26 = v25;
  }
  unsigned int v27 = v26 >> 4;
  if (v22 <= 1) {
    goto LABEL_27;
  }
  unsigned int v28 = 32 - __clz(v22 - 1);
LABEL_28:
  unsigned int v29 = 32 - __clz(v27 - 1);
  if (v27 >= 2) {
    char v30 = v29;
  }
  else {
    char v30 = 0;
  }
  unsigned int v31 = ((8 << (v30 + v28)) + 127) & 0xFFFFFF80;
  if (!v6) {
    unsigned int v31 = 0;
  }
  *((_DWORD *)this + 1436) = v18;
  *((_DWORD *)this + 1437) = v31;
  *((_DWORD *)this + 1441) = 9168;
  if (*((_WORD *)a2 + 14) == 64) {
    char v32 = 6;
  }
  else {
    char v32 = 7;
  }
  if (*((_WORD *)a2 + 14) == 64) {
    int v33 = 96;
  }
  else {
    int v33 = 384;
  }
  if (*((_WORD *)a2 + 14) == 64) {
    char v34 = 8;
  }
  else {
    char v34 = 10;
  }
  unsigned int v35 = ((v5 + (1 << v32) - 1) >> v32) * ((v4 + (1 << v32) - 1) >> v32);
  *((_DWORD *)this + 1443) = v35 * v33;
  *((_DWORD *)this + 1442) = v35 << v34;
  if (v7[662])
  {
LABEL_51:
    for (uint64_t i = 0; i != 2288; i += 176)
    {
      uint64_t v42 = *((unsigned int *)this + 1443);
      if (v42
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + i + 13424), v42, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_69;
        }
        int v48 = 136315650;
        int v49 = "allocWorkBuf_SPS";
        __int16 v50 = 1024;
        int v51 = 1882;
        __int16 v52 = 2080;
        int v53 = "segMap";
        unint64_t v46 = &_os_log_internal;
        goto LABEL_68;
      }
    }
    uint64_t v43 = 0;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 1442);
      if (v44)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v43 + 8008), v44, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 2288) {
        return 0;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v48 = 136315650;
      int v49 = "allocWorkBuf_SPS";
      __int16 v50 = 1024;
      int v51 = 1888;
      __int16 v52 = 2080;
      int v53 = "MvColo";
      unint64_t v46 = &_os_log_internal;
      goto LABEL_68;
    }
    goto LABEL_69;
  }
  uint64_t v36 = 0;
  while (1)
  {
    uint64_t v37 = *((unsigned int *)this + 1436);
    if (v37
      && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v36 + 3072), v37, 7, 1, 0))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_69;
      }
      int v48 = 136315650;
      int v49 = "allocWorkBuf_SPS";
      __int16 v50 = 1024;
      int v51 = 1823;
      __int16 v52 = 2080;
      int v53 = "HdrY";
      unint64_t v46 = &_os_log_internal;
      goto LABEL_68;
    }
    uint64_t v38 = *((unsigned int *)this + 1437);
    uint64_t v39 = *((void *)this + 32);
    uint64_t v40 = (_OWORD *)(v39 + v36 + 5536);
    if (!v38)
    {
      *(void *)uint64_t v40 = 0;
      goto LABEL_50;
    }
    if (CAVDDecoder::allocAVDMem(v39, v40, v38, 7, 1, 0)) {
      break;
    }
LABEL_50:
    v36 += 176;
    if (v36 == 2464) {
      goto LABEL_51;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 136315650;
    int v49 = "allocWorkBuf_SPS";
    __int16 v50 = 1024;
    int v51 = 1828;
    __int16 v52 = 2080;
    int v53 = "HdrC";
    unint64_t v46 = &_os_log_internal;
LABEL_68:
    _os_log_impl(&dword_223977000, v46, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v48, 0x1Cu);
  }
LABEL_69:
  (*(void (**)(CAHDecIxoraAvx *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

void CAHDecIxoraAvx::getPPSWorkBufSize(uint64_t this, unsigned __int8 *a2, char *a3)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  unsigned int v97 = (CAHDecTansyAvx *)this;
  uint64_t v4 = *(void *)(*(void *)(this + 256) + 42424);
  unsigned int v108 = *(_DWORD *)(v4 + 2176);
  int v5 = *(_DWORD *)(v4 + 2180);
  int v6 = a2[32];
  unsigned int v7 = a2[34];
  int v8 = *(_DWORD *)(v4 + 60);
  int v98 = v8 == 15;
  if (v8 == 15) {
    int v9 = 128;
  }
  else {
    int v9 = 64;
  }
  if (a2[33] > v7) {
    unsigned int v7 = a2[33];
  }
  int v10 = ((_WORD)v7 + 9) & 0x1FE;
  unsigned int v90 = v7;
  if (*(_DWORD *)(v4 + 13932))
  {
    unsigned int v11 = *(_DWORD *)(v4 + 13932);
    if (v8 == 15) {
      int v12 = 800;
    }
    else {
      int v12 = 400;
    }
    goto LABEL_10;
  }
  this = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (this)
  {
    *(_DWORD *)long long buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 1919;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
    if (v8 == 15) {
      int v12 = 800;
    }
    else {
      int v12 = 400;
    }
    unsigned int v11 = *(_DWORD *)(v4 + 13932);
    if (v11)
    {
LABEL_10:
      int v13 = 0;
      uint64_t v14 = v11;
      int v15 = *(_DWORD *)(v4 + 2624);
      unsigned int v16 = (int *)(v4 + 2628);
      do
      {
        int v18 = *v16++;
        int v17 = v18;
        int v19 = (v18 - v15) * v12;
        if (v13 <= v19) {
          int v13 = v19;
        }
        int v15 = v17;
        --v14;
      }
      while (v14);
      char v20 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  int v13 = 0;
  char v20 = 1;
LABEL_23:
  int v88 = v13;
  int v112 = v5;
  unsigned int v89 = a3;
  if (v6 == 3) {
    int v21 = 48;
  }
  else {
    int v21 = 32;
  }
  int v107 = v6;
  if (!v6) {
    int v21 = 16;
  }
  int v22 = *(unsigned __int8 *)(v4 + 2172);
  unsigned int v100 = (_DWORD *)v4;
  if (*(unsigned char *)(v4 + 98)) {
    BOOL v23 = v22 == 8;
  }
  else {
    BOOL v23 = 1;
  }
  int v24 = !v23;
  int v99 = v9;
  int v106 = v10;
  int v85 = v8;
  int v96 = v24;
  if (v20)
  {
    unint64_t v104 = 0;
    int v105 = 0;
    unint64_t v25 = 0;
    *(void *)&long long v103 = 0;
    char v26 = v8 == 15;
  }
  else
  {
    uint64_t v27 = 0;
    int v28 = 0;
    unint64_t v25 = 0;
    int v105 = 0;
    unint64_t v104 = 0;
    unsigned int v93 = (v10 * v21) >> 3;
    int v94 = *(unsigned __int8 *)(v4 + 2172);
    if (v8 == 15) {
      char v29 = 7;
    }
    else {
      char v29 = 6;
    }
    char v101 = v29;
    unsigned int v30 = (v22 << v29) >> 3;
    if (!v24) {
      unsigned int v30 = v9;
    }
    unsigned int v92 = v30;
    long long v103 = 0u;
    char v26 = v8 == 15;
    do
    {
      uint64_t v31 = v11 - 1;
      if (v27 == v31) {
        int v32 = v108 - v28;
      }
      else {
        int v32 = (v100[v27 + 657] - v100[v27 + 656]) << v101;
      }
      if (v32 > 4096)
      {
        this = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          *(_DWORD *)long long buf = 136315394;
          int v114 = "getPPSWorkBufSize";
          __int16 v115 = 1024;
          int v116 = 1953;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
          unsigned int v11 = v100[3483];
          uint64_t v31 = v11 - 1;
        }
      }
      if (v32 >= -15) {
        int v33 = v32 + 15;
      }
      else {
        int v33 = v32 + 30;
      }
      unint64_t v34 = v104;
      if (v104 <= (int)((v33 >> 4) * v93)) {
        unint64_t v34 = (int)((v33 >> 4) * v93);
      }
      unint64_t v104 = v34;
      unint64_t v35 = v27 + 1;
      uint64_t v36 = &v100[v27];
      int v37 = v36[657];
      int v38 = v36[656];
      unsigned int v39 = *(_DWORD *)(*(void *)(*((void *)v97 + 32) + 42424) + 2164);
      if (v39 <= v108) {
        unsigned int v39 = v108;
      }
      int v40 = v38 << v101;
      if (v96) {
        int v40 = ((v38 << v101) * v94) >> 3;
      }
      int v41 = v40 + v92 + v92 * (v37 - v38);
      if ((int)v39 < v41) {
        int v41 = v39;
      }
      *((void *)&v42 + 1) = *((void *)&v103 + 1);
      *(int32x2_t *)&long long v42 = vadd_s32((int32x2_t)(*(void *)&vmla_s32((int32x2_t)0x7F0000007FLL, (int32x2_t)__PAIR64__(((v41 + 63) >> 6) - (v40 >> 6), (v37 - v38) << v98), (int32x2_t)0xC0000002CLL) & 0xFFFFFF80FFFFFF80), *(int32x2_t *)&v103);
      long long v103 = v42;
      this = CAHDecTansyAvx::calc_lf_above_pix_tile_size((CAHDecTansyAvx *)this, v10, v107, v108, v98, v27 == 0, v27 == v31, v38, v37);
      v105 += this;
      v28 += v32;
      if (v25 <= 20 * (v33 >> 4)) {
        unint64_t v25 = 20 * (v33 >> 4);
      }
      ++v27;
    }
    while (v35 < v11);
  }
  uint64_t v43 = v100;
  uint64_t v44 = v100[3482];
  unsigned int v45 = v90;
  if (!v44)
  {
    int v102 = 0;
    unsigned int v71 = 0;
    unint64_t v87 = 0;
    unint64_t v111 = 0;
    unsigned int v72 = v97;
    goto LABEL_80;
  }
  unsigned int v86 = &v100[v44 + 721];
  int v46 = *v86;
  int v47 = v100[721];
  long long v48 = 0uLL;
  int v49 = v100 + 722;
  uint64_t v91 = v100[3482];
  do
  {
    long long v109 = v48;
    int v51 = *v49++;
    int v50 = v51;
    this = CAHDecTansyAvx::calc_lf_left_tile_size((CAHDecTansyAvx *)this, 11, 7, v106, v107, v99, v47, v51, v112, v46);
    *((void *)&v48 + 1) = *((void *)&v109 + 1);
    int v52 = ((v112 + 63) >> 6) - (v47 << v26);
    int v53 = (v51 - v47) << v26;
    if (v51 != v46) {
      int v52 = v53;
    }
    *(int32x2_t *)&long long v48 = vmax_s32(*(int32x2_t *)&v109, (int32x2_t)__PAIR64__(72 * v52, this));
    int v47 = v50;
    --v44;
  }
  while (v44);
  int v102 = 0;
  unint64_t v87 = *(void *)&vadd_s32(*(int32x2_t *)&v48, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80;
  int v54 = *v86;
  int v95 = (v112 + 7) >> 6;
  unsigned int v55 = v100[721];
  long long v56 = 0uLL;
  uint64_t v57 = v100 + 722;
  uint64_t v58 = v91;
  do
  {
    long long v110 = v56;
    int v60 = *v57++;
    unsigned int v59 = v60;
    int v61 = (CAHDecTansyAvx *)CAHDecTansyAvx::calc_lr_left_tile_size((CAHDecTansyAvx *)this, 13, 12, v106, v107, v99, v55, v60, v112, v54);
    unsigned int v62 = v61;
    this = CAHDecTansyAvx::calc_lr_left_tile_size(v61, 6, 6, v106, v107, v99, v55, v60, v112, v54);
    if (v60 == v54)
    {
      long long v56 = v110;
      if (v102 > (int)(24 * (v95 - (v55 << v98)) + 24)) {
        goto LABEL_73;
      }
      int v63 = 3 * (v95 + 1 - (v55 << v98));
    }
    else
    {
      int v63 = 3 * ((v59 - v55) << v98);
      long long v56 = v110;
      if (v102 > (int)(24 * ((v59 - v55) << v98))) {
        goto LABEL_73;
      }
    }
    int v102 = 8 * v63;
LABEL_73:
    *(int32x2_t *)&long long v56 = vmax_s32(*(int32x2_t *)&v56, (int32x2_t)__PAIR64__(this, v62));
    unsigned int v55 = v59;
    --v58;
  }
  while (v58);
  int v64 = 0;
  unint64_t v111 = *(void *)&vadd_s32(*(int32x2_t *)&v56, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80;
  int v65 = *v86;
  int v66 = v100[721];
  unsigned int v67 = v100 + 722;
  uint64_t v68 = v91;
  do
  {
    int v70 = *v67++;
    int v69 = v70;
    this = CAHDecIxoraAvx::calc_az_left_tile_size((CAHDecIxoraAvx *)this, v107, v99, v96, v106, v66, v70, v112, v65);
    if (v64 <= (int)this) {
      int v64 = this;
    }
    int v66 = v69;
    --v68;
  }
  while (v68);
  unsigned int v71 = (v64 + 127) & 0xFFFFFF80;
  unsigned int v72 = v97;
  unsigned int v45 = v90;
  uint64_t v44 = v91;
  uint64_t v43 = v100;
LABEL_80:
  BOOL v73 = *(_DWORD *)(*((void *)v72 + 32) + 2644) != 1 || v45 == 0;
  if (v73
    || (v107 != 1 ? (int v74 = 32) : (int v74 = 24),
        v107 ? (int v75 = v74) : (int v75 = 16),
        !CAHDecTansyAvx::isLfPadDis(v72) ? (int v76 = 8) : (int v76 = 0),
        !v44))
  {
    signed int v77 = 0;
    unint64_t v82 = v25;
  }
  else
  {
    signed int v77 = 0;
    unsigned int v78 = (v112 + v76 + 15) >> 4;
    uint64_t v79 = (v44 - 1);
    if (v85 == 15) {
      char v80 = 3;
    }
    else {
      char v80 = 2;
    }
    unsigned int v81 = v43 + 722;
    unint64_t v82 = v25;
    do
    {
      unsigned int v83 = v78;
      if (v79) {
        unsigned int v83 = *v81 << v80;
      }
      signed int v84 = ((v83 - (*(v81 - 1) << v80)) * v75 + 133) & 0xFFFFFF80;
      if (v77 <= v84) {
        signed int v77 = v84;
      }
      ++v81;
      --v79;
      --v44;
    }
    while (v44);
  }
  *(_DWORD *)unsigned int v89 = v88;
  if (HIDWORD(v104) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 2043;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  *((_DWORD *)v89 + 1) = v104;
  *((_DWORD *)v89 + 2) = v105;
  *(void *)(v89 + 12) = v103;
  if (HIDWORD(v82) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 2047;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  *((_DWORD *)v89 + 5) = v82;
  *((void *)v89 + 3) = v87;
  *((void *)v89 + 4) = v111;
  *((_DWORD *)v89 + 10) = (v102 + 127) & 0xFFFFFF80;
  *((_DWORD *)v89 + 11) = v71;
  *((_DWORD *)v89 + 12) = v77;
}

uint64_t CAHDecIxoraAvx::calc_az_left_tile_size(CAHDecIxoraAvx *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  if (a3 == 128) {
    char v9 = 4;
  }
  else {
    char v9 = 3;
  }
  BOOL v10 = a7 >= a9 || a6 != 0;
  if (a6 != 0 && a7 >= a9) {
    int v11 = 8;
  }
  else {
    int v11 = 0;
  }
  if (!v10) {
    int v11 = -8;
  }
  int v12 = (a8 + 1) >> 1;
  if (a2 == 1)
  {
    char v13 = 2;
  }
  else
  {
    int v12 = a8;
    char v13 = 3;
  }
  char v14 = v13 + v9;
  if (a7 < a9) {
    int v12 = a7 << v14;
  }
  int v15 = (v12 - (a6 << v14) + (v11 >> 1) + 3) >> 2;
  if (!a2) {
    int v15 = 0;
  }
  char v16 = v9 + 3;
  if (a7 < a9) {
    int v17 = a7 << v16;
  }
  else {
    int v17 = a8;
  }
  unsigned int v18 = (v17 - (a6 << v16) + v11 + 7) >> 3;
  if (a4) {
    int v19 = 4;
  }
  else {
    int v19 = 3;
  }
  return (v15 * ((4 * a5 + 15) & 0xFFFFFFF0) + 8 * a5 * v18) * v19;
}

BOOL CAHDecIxoraAvx::ppsWorkBufSizeIncrease(CAHDecIxoraAvx *this, _DWORD *a2, _DWORD *a3)
{
  return *a3 > *a2
      || a3[1] > a2[1]
      || a3[2] > a2[2]
      || a3[3] > a2[3]
      || a3[4] > a2[4]
      || a3[5] > a2[5]
      || a3[6] > a2[6]
      || a3[7] > a2[7]
      || a3[8] > a2[8]
      || a3[9] > a2[9]
      || a3[10] > a2[10]
      || a3[11] > a2[11]
      || a3[12] > a2[12];
}

uint64_t CAHDecIxoraAvx::allocWorkBuf_PPS(CAHDecIxoraAvx *this, void *a2, void *a3, int *a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 32);
  unsigned int v7 = *(_DWORD **)(v6 + 15944);
  if (*a4 > v7[19809])
  {
    uint64_t v8 = 0;
    char v9 = 1;
    while (1)
    {
      char v10 = v9;
      uint64_t v11 = *a4;
      if (v11)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 11 * v8 + 194, v11, 7, 1, 0))break; {
      }
        }
      char v9 = 0;
      uint64_t v8 = 1;
      if ((v10 & 1) == 0)
      {
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
        v7[19809] = *a4;
        goto LABEL_7;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_103;
    }
    int v38 = 136315650;
    unsigned int v39 = "allocWorkBuf_PPS";
    __int16 v40 = 1024;
    int v41 = 2102;
    __int16 v42 = 2080;
    uint64_t v43 = "OvpAboveInfo";
    char v13 = &_os_log_internal;
    goto LABEL_102;
  }
LABEL_7:
  uint64_t v12 = a4[1];
  if ((int)v12 > v7[19810])
  {
    if (v12)
    {
      if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 216, v12, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v38 = 136315650;
          unsigned int v39 = "allocWorkBuf_PPS";
          __int16 v40 = 1024;
          int v41 = 2110;
          __int16 v42 = 2080;
          uint64_t v43 = "IPAbovePixel";
          char v13 = &_os_log_internal;
LABEL_102:
          _os_log_impl(&dword_223977000, v13, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v38, 0x1Cu);
          goto LABEL_103;
        }
        goto LABEL_103;
      }
      int v14 = a4[1];
      uint64_t v6 = *((void *)this + 32);
      unsigned int v7 = *(_DWORD **)(v6 + 15944);
    }
    else
    {
      int v14 = 0;
    }
    v7[19810] = v14;
  }
  uint64_t v15 = a4[2];
  if ((int)v15 <= v7[19811])
  {
LABEL_25:
    uint64_t v17 = a4[3];
    if ((int)v17 > v7[19812])
    {
      if (v17)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 238, v17, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v38 = 136315650;
            unsigned int v39 = "allocWorkBuf_PPS";
            __int16 v40 = 1024;
            int v41 = 2124;
            __int16 v42 = 2080;
            uint64_t v43 = "LfAboveInfo";
            char v13 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v18 = a4[3];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v18 = 0;
      }
      v7[19812] = v18;
    }
    uint64_t v19 = a4[4];
    if ((int)v19 > v7[19813])
    {
      if (v19)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 282, v19, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v38 = 136315650;
            unsigned int v39 = "allocWorkBuf_PPS";
            __int16 v40 = 1024;
            int v41 = 2131;
            __int16 v42 = 2080;
            uint64_t v43 = "RfAboveInfo";
            char v13 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v20 = a4[4];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v20 = 0;
      }
      v7[19813] = v20;
    }
    uint64_t v21 = a4[5];
    if ((int)v21 > v7[19814])
    {
      if (v21)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 348, v21, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v38 = 136315650;
            unsigned int v39 = "allocWorkBuf_PPS";
            __int16 v40 = 1024;
            int v41 = 2138;
            __int16 v42 = 2080;
            uint64_t v43 = "MvAboveInfo";
            char v13 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v22 = a4[5];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v22 = 0;
      }
      v7[19814] = v22;
    }
    uint64_t v23 = a4[6];
    if ((int)v23 > v7[19815])
    {
      if (v23)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 249, v23, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v38 = 136315650;
            unsigned int v39 = "allocWorkBuf_PPS";
            __int16 v40 = 1024;
            int v41 = 2145;
            __int16 v42 = 2080;
            uint64_t v43 = "LfLeftPixel";
            char v13 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v24 = a4[6];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v24 = 0;
      }
      v7[19815] = v24;
    }
    uint64_t v25 = a4[7];
    if ((int)v25 > v7[19816])
    {
      if (v25)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 260, v25, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v38 = 136315650;
            unsigned int v39 = "allocWorkBuf_PPS";
            __int16 v40 = 1024;
            int v41 = 2152;
            __int16 v42 = 2080;
            uint64_t v43 = "LfLeftInfo";
            char v13 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v26 = a4[7];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v26 = 0;
      }
      v7[19816] = v26;
    }
    uint64_t v27 = a4[8];
    if ((int)v27 > v7[19817])
    {
      if (v27)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 271, v27, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v38 = 136315650;
            unsigned int v39 = "allocWorkBuf_PPS";
            __int16 v40 = 1024;
            int v41 = 2159;
            __int16 v42 = 2080;
            uint64_t v43 = "SrLeftPixel";
            char v13 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v28 = a4[8];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v28 = 0;
      }
      v7[19817] = v28;
    }
    uint64_t v29 = a4[9];
    if ((int)v29 > v7[19818])
    {
      if (v29)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 293, v29, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v38 = 136315650;
            unsigned int v39 = "allocWorkBuf_PPS";
            __int16 v40 = 1024;
            int v41 = 2166;
            __int16 v42 = 2080;
            uint64_t v43 = "RfLeftPixel";
            char v13 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v30 = a4[9];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v30 = 0;
      }
      v7[19818] = v30;
    }
    uint64_t v31 = a4[10];
    if ((int)v31 > v7[19819])
    {
      if (v31)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 304, v31, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v38 = 136315650;
            unsigned int v39 = "allocWorkBuf_PPS";
            __int16 v40 = 1024;
            int v41 = 2173;
            __int16 v42 = 2080;
            uint64_t v43 = "RfLeftInfo";
            char v13 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v32 = a4[10];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v32 = 0;
      }
      v7[19819] = v32;
    }
    uint64_t v33 = a4[11];
    if ((int)v33 > v7[19820])
    {
      if (v33)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 337, v33, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v38 = 136315650;
            unsigned int v39 = "allocWorkBuf_PPS";
            __int16 v40 = 1024;
            int v41 = 2180;
            __int16 v42 = 2080;
            uint64_t v43 = "AzLeftPixel";
            char v13 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v34 = a4[11];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v34 = 0;
      }
      v7[19820] = v34;
    }
    uint64_t v35 = a4[12];
    if ((int)v35 <= v7[19821]) {
      return 0;
    }
    if (v35)
    {
      if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 326, v35, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v38 = 136315650;
          unsigned int v39 = "allocWorkBuf_PPS";
          __int16 v40 = 1024;
          int v41 = 2187;
          __int16 v42 = 2080;
          uint64_t v43 = "SWrLeftPixel";
          char v13 = &_os_log_internal;
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      int v37 = a4[12];
      unsigned int v7 = *(_DWORD **)(*((void *)this + 32) + 15944);
    }
    else
    {
      int v37 = 0;
    }
    uint64_t result = 0;
    v7[19821] = v37;
    return result;
  }
  if (!v15)
  {
    int v16 = 0;
LABEL_24:
    v7[19811] = v16;
    goto LABEL_25;
  }
  if (!CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 227, v15, 7, 1, 0))
  {
    int v16 = a4[2];
    uint64_t v6 = *((void *)this + 32);
    unsigned int v7 = *(_DWORD **)(v6 + 15944);
    goto LABEL_24;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v38 = 136315650;
    unsigned int v39 = "allocWorkBuf_PPS";
    __int16 v40 = 1024;
    int v41 = 2117;
    __int16 v42 = 2080;
    uint64_t v43 = "LfAbovePixel";
    char v13 = &_os_log_internal;
    goto LABEL_102;
  }
LABEL_103:
  (*(void (**)(CAHDecIxoraAvx *, int *))(*(void *)this + 152))(this, a4);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecIxoraAvx::freeWorkBuf_SPS(CAHDecIxoraAvx *this)
{
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    for (uint64_t i = 0; i != 2464; i += 176)
    {
      uint64_t v3 = *((void *)this + 32);
      if (*(void *)(v3 + i + 3072))
      {
        CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 3072));
        uint64_t v4 = (_OWORD *)(*((void *)this + 32) + i);
        v4[192] = 0u;
        v4[193] = 0u;
        v4[194] = 0u;
        v4[195] = 0u;
        v4[196] = 0u;
        v4[197] = 0u;
        v4[198] = 0u;
        v4[199] = 0u;
        v4[200] = 0u;
        v4[201] = 0u;
        v4[202] = 0u;
        uint64_t v3 = *((void *)this + 32);
      }
      if (*(void *)(v3 + i + 5536))
      {
        CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 5536));
        int v5 = (_OWORD *)(*((void *)this + 32) + i);
        v5[346] = 0u;
        v5[347] = 0u;
        v5[348] = 0u;
        v5[349] = 0u;
        v5[350] = 0u;
        v5[351] = 0u;
        v5[352] = 0u;
        v5[353] = 0u;
        v5[354] = 0u;
        v5[355] = 0u;
        v5[356] = 0u;
      }
    }
  }
  for (uint64_t j = 0; j != 2288; j += 176)
  {
    uint64_t v7 = *((void *)this + 32);
    if (*(void *)(v7 + j + 8008))
    {
      CAVDDecoder::deallocAVDMem(v7, (uint64_t *)(v7 + j + 8008));
      uint64_t v8 = (_OWORD *)(*((void *)this + 32) + j + 8008);
      *uint64_t v8 = 0u;
      v8[1] = 0u;
      v8[2] = 0u;
      v8[3] = 0u;
      v8[4] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      v8[10] = 0u;
    }
  }
  for (uint64_t k = 0; k != 2288; k += 176)
  {
    uint64_t result = *((void *)this + 32);
    if (*(void *)(result + k + 13424))
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + k + 13424));
      uint64_t v11 = (_OWORD *)(*((void *)this + 32) + k);
      v11[839] = 0u;
      v11[840] = 0u;
      v11[841] = 0u;
      v11[842] = 0u;
      v11[843] = 0u;
      v11[844] = 0u;
      v11[845] = 0u;
      v11[846] = 0u;
      v11[847] = 0u;
      v11[848] = 0u;
      v11[849] = 0u;
    }
  }
  return result;
}

double CAHDecIxoraAvx::freeWorkBuf_PPS(CAHDecIxoraAvx *this, _DWORD *a2)
{
  if (!a2 || (uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944), *a2 > v4[19809]))
  {
    uint64_t v5 = 0;
    char v6 = 1;
    do
    {
      char v7 = v6;
      uint64_t v8 = (char *)this + 176 * v5;
      if (*((void *)v8 + 388))
      {
        char v9 = v8 + 3104;
        CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)v8 + 388);
        double result = 0.0;
        _OWORD *v9 = 0u;
        v9[1] = 0u;
        v9[2] = 0u;
        v9[3] = 0u;
        v9[4] = 0u;
        v9[5] = 0u;
        v9[6] = 0u;
        v9[7] = 0u;
        v9[8] = 0u;
        v9[9] = 0u;
        v9[10] = 0u;
      }
      char v6 = 0;
      uint64_t v5 = 1;
    }
    while ((v7 & 1) != 0);
    if (!a2) {
      goto LABEL_10;
    }
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
  }
  if (a2[1] <= v4[19810]) {
    goto LABEL_14;
  }
LABEL_10:
  if (*((void *)this + 432))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 432);
    double result = 0.0;
    *((_OWORD *)this + 216) = 0u;
    *((_OWORD *)this + 217) = 0u;
    *((_OWORD *)this + 218) = 0u;
    *((_OWORD *)this + 219) = 0u;
    *((_OWORD *)this + 220) = 0u;
    *((_OWORD *)this + 221) = 0u;
    *((_OWORD *)this + 222) = 0u;
    *((_OWORD *)this + 223) = 0u;
    *((_OWORD *)this + 224) = 0u;
    *((_OWORD *)this + 225) = 0u;
    *((_OWORD *)this + 226) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_14:
    if (a2[2] <= v4[19811]) {
      goto LABEL_19;
    }
  }
  if (*((void *)this + 454))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 454);
    double result = 0.0;
    *((_OWORD *)this + 227) = 0u;
    *((_OWORD *)this + 228) = 0u;
    *((_OWORD *)this + 229) = 0u;
    *((_OWORD *)this + 230) = 0u;
    *((_OWORD *)this + 231) = 0u;
    *((_OWORD *)this + 232) = 0u;
    *((_OWORD *)this + 233) = 0u;
    *((_OWORD *)this + 234) = 0u;
    *((_OWORD *)this + 235) = 0u;
    *((_OWORD *)this + 236) = 0u;
    *((_OWORD *)this + 237) = 0u;
  }
  if (!a2) {
    goto LABEL_20;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_19:
  if (a2[3] <= v4[19812]) {
    goto LABEL_24;
  }
LABEL_20:
  if (*((void *)this + 476))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 476);
    double result = 0.0;
    *((_OWORD *)this + 238) = 0u;
    *((_OWORD *)this + 239) = 0u;
    *((_OWORD *)this + 240) = 0u;
    *((_OWORD *)this + 241) = 0u;
    *((_OWORD *)this + 242) = 0u;
    *((_OWORD *)this + 243) = 0u;
    *((_OWORD *)this + 244) = 0u;
    *((_OWORD *)this + 245) = 0u;
    *((_OWORD *)this + 246) = 0u;
    *((_OWORD *)this + 247) = 0u;
    *((_OWORD *)this + 248) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_24:
    if (a2[4] <= v4[19813]) {
      goto LABEL_29;
    }
  }
  if (*((void *)this + 564))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 564);
    double result = 0.0;
    *((_OWORD *)this + 282) = 0u;
    *((_OWORD *)this + 283) = 0u;
    *((_OWORD *)this + 284) = 0u;
    *((_OWORD *)this + 285) = 0u;
    *((_OWORD *)this + 286) = 0u;
    *((_OWORD *)this + 287) = 0u;
    *((_OWORD *)this + 288) = 0u;
    *((_OWORD *)this + 289) = 0u;
    *((_OWORD *)this + 290) = 0u;
    *((_OWORD *)this + 291) = 0u;
    *((_OWORD *)this + 292) = 0u;
  }
  if (!a2) {
    goto LABEL_30;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_29:
  if (a2[5] <= v4[19814]) {
    goto LABEL_34;
  }
LABEL_30:
  if (*((void *)this + 696))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 696);
    double result = 0.0;
    *((_OWORD *)this + 348) = 0u;
    *((_OWORD *)this + 349) = 0u;
    *((_OWORD *)this + 350) = 0u;
    *((_OWORD *)this + 351) = 0u;
    *((_OWORD *)this + 352) = 0u;
    *((_OWORD *)this + 353) = 0u;
    *((_OWORD *)this + 354) = 0u;
    *((_OWORD *)this + 355) = 0u;
    *((_OWORD *)this + 356) = 0u;
    *((_OWORD *)this + 357) = 0u;
    *((_OWORD *)this + 358) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_34:
    if (a2[6] <= v4[19815]) {
      goto LABEL_39;
    }
  }
  if (*((void *)this + 498))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 498);
    double result = 0.0;
    *((_OWORD *)this + 249) = 0u;
    *((_OWORD *)this + 250) = 0u;
    *((_OWORD *)this + 251) = 0u;
    *((_OWORD *)this + 252) = 0u;
    *((_OWORD *)this + 253) = 0u;
    *((_OWORD *)this + 254) = 0u;
    *((_OWORD *)this + 255) = 0u;
    *((_OWORD *)this + 256) = 0u;
    *((_OWORD *)this + 257) = 0u;
    *((_OWORD *)this + 258) = 0u;
    *((_OWORD *)this + 259) = 0u;
  }
  if (!a2) {
    goto LABEL_40;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_39:
  if (a2[7] <= v4[19816]) {
    goto LABEL_44;
  }
LABEL_40:
  if (*((void *)this + 520))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 520);
    double result = 0.0;
    *((_OWORD *)this + 260) = 0u;
    *((_OWORD *)this + 261) = 0u;
    *((_OWORD *)this + 262) = 0u;
    *((_OWORD *)this + 263) = 0u;
    *((_OWORD *)this + 264) = 0u;
    *((_OWORD *)this + 265) = 0u;
    *((_OWORD *)this + 266) = 0u;
    *((_OWORD *)this + 267) = 0u;
    *((_OWORD *)this + 268) = 0u;
    *((_OWORD *)this + 269) = 0u;
    *((_OWORD *)this + 270) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_44:
    if (a2[8] <= v4[19817]) {
      goto LABEL_49;
    }
  }
  if (*((void *)this + 542))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 542);
    double result = 0.0;
    *((_OWORD *)this + 271) = 0u;
    *((_OWORD *)this + 272) = 0u;
    *((_OWORD *)this + 273) = 0u;
    *((_OWORD *)this + 274) = 0u;
    *((_OWORD *)this + 275) = 0u;
    *((_OWORD *)this + 276) = 0u;
    *((_OWORD *)this + 277) = 0u;
    *((_OWORD *)this + 278) = 0u;
    *((_OWORD *)this + 279) = 0u;
    *((_OWORD *)this + 280) = 0u;
    *((_OWORD *)this + 281) = 0u;
  }
  if (!a2) {
    goto LABEL_50;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_49:
  if (a2[9] <= v4[19818]) {
    goto LABEL_54;
  }
LABEL_50:
  if (*((void *)this + 586))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 586);
    double result = 0.0;
    *((_OWORD *)this + 293) = 0u;
    *((_OWORD *)this + 294) = 0u;
    *((_OWORD *)this + 295) = 0u;
    *((_OWORD *)this + 296) = 0u;
    *((_OWORD *)this + 297) = 0u;
    *((_OWORD *)this + 298) = 0u;
    *((_OWORD *)this + 299) = 0u;
    *((_OWORD *)this + 300) = 0u;
    *((_OWORD *)this + 301) = 0u;
    *((_OWORD *)this + 302) = 0u;
    *((_OWORD *)this + 303) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_54:
    if (a2[10] <= v4[19819]) {
      goto LABEL_59;
    }
  }
  if (*((void *)this + 608))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 608);
    double result = 0.0;
    *((_OWORD *)this + 304) = 0u;
    *((_OWORD *)this + 305) = 0u;
    *((_OWORD *)this + 306) = 0u;
    *((_OWORD *)this + 307) = 0u;
    *((_OWORD *)this + 308) = 0u;
    *((_OWORD *)this + 309) = 0u;
    *((_OWORD *)this + 310) = 0u;
    *((_OWORD *)this + 311) = 0u;
    *((_OWORD *)this + 312) = 0u;
    *((_OWORD *)this + 313) = 0u;
    *((_OWORD *)this + 314) = 0u;
  }
  if (!a2) {
    goto LABEL_60;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_59:
  if (a2[11] <= v4[19820]) {
    goto LABEL_64;
  }
LABEL_60:
  if (*((void *)this + 674))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 674);
    double result = 0.0;
    *((_OWORD *)this + 337) = 0u;
    *((_OWORD *)this + 338) = 0u;
    *((_OWORD *)this + 339) = 0u;
    *((_OWORD *)this + 340) = 0u;
    *((_OWORD *)this + 341) = 0u;
    *((_OWORD *)this + 342) = 0u;
    *((_OWORD *)this + 343) = 0u;
    *((_OWORD *)this + 344) = 0u;
    *((_OWORD *)this + 345) = 0u;
    *((_OWORD *)this + 346) = 0u;
    *((_OWORD *)this + 347) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_64:
    if (a2[12] <= v4[19821]) {
      return result;
    }
  }
  if (*((void *)this + 652))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 652);
    double result = 0.0;
    *((_OWORD *)this + 326) = 0u;
    *((_OWORD *)this + 327) = 0u;
    *((_OWORD *)this + 328) = 0u;
    *((_OWORD *)this + 329) = 0u;
    *((_OWORD *)this + 330) = 0u;
    *((_OWORD *)this + 331) = 0u;
    *((_OWORD *)this + 332) = 0u;
    *((_OWORD *)this + 333) = 0u;
    *((_OWORD *)this + 334) = 0u;
    *((_OWORD *)this + 335) = 0u;
    *((_OWORD *)this + 336) = 0u;
  }
  return result;
}

uint64_t CAHDecIxoraAvx::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 5760) = a2;
  return this;
}

uint64_t CAHDecIxoraAvx::initPicture(CAHDecIxoraAvx *this)
{
  return 0;
}

uint64_t CAHDecIxoraAvx::populateSlices(CAHDecIxoraAvx *this)
{
  return 0;
}

uint64_t CAHDecIxoraAvx::getTileIdxAbove(CAHDecIxoraAvx *this)
{
  return 0;
}

uint64_t CAHDecIxoraAvx::decodeBuffer(CAHDecIxoraAvx *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecIxoraAvx::decodeBufferSize(CAHDecIxoraAvx *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecIxoraAvx::decHdrYLinAddr(CAHDecIxoraAvx *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 3072);
}

uint64_t CAHDecIxoraAvx::decHdrCLinAddr(CAHDecIxoraAvx *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 5536);
}

uint64_t CAHDecIxoraAvx::decHdrYSize(CAHDecIxoraAvx *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 3116);
}

uint64_t CAHDecIxoraAvx::decHdrCSize(CAHDecIxoraAvx *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 5580);
}

uint64_t CAHDecIxoraAvx::decHdrYStride(CAHDecIxoraAvx *this)
{
  return *((unsigned int *)this + 1438);
}

uint64_t CAHDecIxoraAvx::decHdrCStride(CAHDecIxoraAvx *this)
{
  return *((unsigned int *)this + 1439);
}

uint64_t createRadishAvcDecoder(void *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "createRadishAvcDecoder";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Radish AVD is not supported in this AppleAVD driver!!!", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

uint64_t createRadishHevcDecoder(void *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "createRadishHevcDecoder";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Radish AVD is not supported in this AppleAVD driver!!!", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

CAHDecDaisyHevc *createDaisyHevcDecoder(CAVDHevcDecoder *a1)
{
  int v2 = (CAHDecDaisyHevc *)operator new(0x3468uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecDaisyHevc::CAHDecDaisyHevc(v2, a1);
  }
  return v3;
}

void sub_223A2DEF8(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecDaisyHevc::CAHDecDaisyHevc(CAHDecDaisyHevc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D7418B8;
  *(_DWORD *)(v1 + 456) = 420436;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = 0;
  *(void *)(v1 + 272) = 0;
}

void CAHDecDaisyHevc::CAHDecDaisyHevc(CAHDecDaisyHevc *this, CAVDHevcDecoder *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D7418B8;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 420436;
  *(_DWORD *)(v4 + 8) = 3028;
  *(_OWORD *)(v4 + 16) = xmmword_223AD0620;
  *(_DWORD *)(v4 + 32) = 4;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 420436, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      char v7 = "CAHDecDaisyHevc";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v6, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v5 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v5;
    *((void *)this + 34) = v5;
    bzero((char *)this + 528, 0x3230uLL);
  }
}

void sub_223A2E0B8(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecDaisyHevc::~CAHDecDaisyHevc(CAHDecDaisyHevc *this)
{
  *(void *)this = &unk_26D7418B8;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecDaisyHevc::~CAHDecDaisyHevc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecDaisyHevc::initPicture(CAHDecDaisyHevc *this, int a2, __int16 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 114) = 420436;
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v4;
  if (v4)
  {
    bzero(v4, 0x66A54uLL);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v7 + 16) = a2;
    *(_WORD *)(v7 + 24) = 257;
    *(_WORD *)(v7 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 3351) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "initPicture";
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v9, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecDaisyHevc::populateSlices(CAHDecDaisyHevc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 3028;
    uint64_t v5 = a2;
    do
    {
      CAHDecDaisyHevc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 368;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecDaisyHevc::populateSliceRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 256);
  int v6 = *(_DWORD *)(v5 + 8320);
  int v7 = *(_DWORD *)(v5 + 8324);
  uint64_t v8 = *(void *)(v5 + 8288);
  uint64_t v9 = *(void *)(v5 + 8280);
  uint64_t v10 = *(void *)(v5 + 8296);
  int v11 = a3;
  uint64_t v12 = v9 + 23176 * v6;
  *(_DWORD *)(a1 + 460) = 6 * *(_DWORD *)(v12 + 3636);
  LODWORD(v12) = *(_DWORD *)(v12 + 22880);
  *(_DWORD *)(a2 + 352) = 0x1000000;
  uint64_t v13 = v10 + 2360 * (int)a3;
  unsigned int v14 = (((*(_DWORD *)(v13 + 36) / v12) & 0xFFF) << 12) | 0x1000000;
  *(_DWORD *)(a2 + 352) = v14;
  *(_DWORD *)(a2 + 352) = v14 & 0xFFFFF000 | (*(_DWORD *)(v13 + 36) % v12) & 0xFFF;
  *(_DWORD *)(a2 + 4) = 0;
  char v15 = *(unsigned char *)(v8 + 9856 * v7 + 6477);
  if (v15) {
    char v15 = *(unsigned char *)(v10 + 2360 * (int)a3 + 1880);
  }
  int v16 = v15 & 1;
  *(_DWORD *)(a2 + 4) = v16;
  uint64_t v17 = v10 + 2360 * (int)a3;
  int v19 = *(_DWORD *)(v17 + 44);
  int v18 = (int *)(v17 + 44);
  if (v19 == 2) {
    LOBYTE(v20) = 0;
  }
  else {
    int v20 = 5 - *(_DWORD *)(v10 + 2360 * (int)a3 + 1864);
  }
  unsigned int v21 = v16 & 0xFFFFFFF1 | (2 * (v20 & 7));
  *(_DWORD *)(a2 + 4) = v21;
  if (*v18)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *(unsigned __int8 *)(v10 + 2360 * (int)a3 + 616);
    if (*(unsigned char *)(v10 + 2360 * (int)a3 + 616)) {
      int v22 = *(unsigned char *)(v10 + 2360 * (int)a3 + 762) == 0;
    }
  }
  int v23 = v21 | (16 * v22);
  *(_DWORD *)(a2 + 4) = v23;
  if (*v18 == 2)
  {
    char v24 = 0;
  }
  else
  {
    char v24 = *(unsigned char *)(v8 + 9856 * v7 + 17);
    if (v24) {
      char v24 = *(unsigned char *)(v10 + 2360 * (int)a3 + 761);
    }
  }
  unsigned int v25 = v23 & 0xFFFFFFDF | (32 * (v24 & 1));
  *(_DWORD *)(a2 + 4) = v25;
  if (*v18) {
    int v26 = 0;
  }
  else {
    int v26 = *(unsigned char *)(v10 + 2360 * (int)a3 + 760) == 0;
  }
  char v27 = 0;
  int v28 = v25 | (v26 << 6);
  *(_DWORD *)(a2 + 4) = v28;
  uint64_t v29 = v10 + 2360 * (int)a3;
  int v30 = (*(_DWORD *)(v29 + 624) & 0xF) << 7;
  if (*(_DWORD *)(v29 + 624) == -1) {
    int v30 = 0;
  }
  int v31 = v30 | v28;
  *(_DWORD *)(a2 + 4) = v31;
  int v32 = (*(_DWORD *)(v29 + 620) & 0xF) << 11;
  if (*(_DWORD *)(v29 + 620) == -1) {
    int v32 = 0;
  }
  int v33 = v31 | v32;
  *(_DWORD *)(a2 + 4) = v33;
  if (*v18 != 2)
  {
    char v27 = *(unsigned char *)(v9 + 23176 * v6 + 22284);
    if (v27) {
      char v27 = *(unsigned char *)(v10 + 2360 * (int)a3 + 616);
    }
  }
  uint64_t v133 = v9;
  int v134 = v6;
  unsigned int v34 = v33 & 0xFFFF7FFF | ((v27 & 1) << 15);
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a2 + 4) = v34 & 0xFFFCFFFF | ((*v18 & 3) << 16);
  *(_DWORD *)(a2 + 336) = 0;
  if (*v18 <= 1)
  {
    if (*(void *)(v10 + 2360 * (int)a3 + 2344))
    {
      if (!*(_DWORD *)(a1 + 13404))
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 256) + 344))(*(void *)(a1 + 256), a3);
        uint64_t v4 = a1;
        uint64_t v35 = *(void *)(a1 + 256);
        if (!*(_DWORD *)(v35 + 9032))
        {
          *(_DWORD *)(a1 + 13404) = 1;
          *(_DWORD *)(a2 + 4) |= 0x40000u;
          int v132 = 368 * a3;
          if (*(void *)(v35 + 8856) || *(_DWORD *)(v35 + 9008) || *(_DWORD *)(v35 + 9012))
          {
            uint64_t result = CAHDec::addToPatcherList(a1, (void *)(v35 + 8856), v132 + 3364, 0, 0xFFFFFFFFLL, 8, -256, 4);
            int v132 = 368 * a3;
            uint64_t v4 = a1;
            if (result) {
              return result;
            }
            if (*(void *)(v35 + 8856)) {
              goto LABEL_136;
            }
          }
          if (*(_DWORD *)(v35 + 9008) || *(_DWORD *)(v35 + 9012))
          {
LABEL_136:
            uint64_t result = CAHDec::addToPatcherList(v4, (void *)(v35 + 8856), v132 + 3392, 0, 0x3FFFFFFFFFFLL, 32, 1023, 4);
            uint64_t v4 = a1;
            if (result) {
              return result;
            }
          }
        }
      }
    }
  }
  uint64_t v36 = (unsigned int *)(v29 + 624);
  int v37 = (unsigned int *)(v29 + 620);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
  (*(void (**)(void, void))(**(void **)(v4 + 256) + 352))(*(void *)(v4 + 256), 0);
  if (*v18 <= 1)
  {
    uint64_t v38 = v5 + 8456;
    if ((*v37 & 0x80000000) != 0)
    {
      uint64_t v40 = 0;
      if (*v18) {
        goto LABEL_38;
      }
    }
    else
    {
      int v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = a2 + 8;
      do
      {
        uint64_t v42 = v40;
        *(_DWORD *)(v41 + 4 * v40) = v39 & 0xF0 | 0x2DC00000;
        *(_DWORD *)(v41 + 4 * v40) = v39 & 0xF0 | 0x2DC00000 | *(_DWORD *)(v38 + 4 * v40) & 0xF;
        ++v40;
        v39 += 16;
      }
      while (v42 < (int)*v37);
      if (*v18) {
        goto LABEL_38;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 256) + 352))(*(void *)(a1 + 256), 1, a3);
    if ((*v36 & 0x80000000) == 0)
    {
      int v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = a2 + 4 * v40 + 8;
      do
      {
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100;
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100 | *(_DWORD *)(v38 + 4 * v44) & 0xF;
        v43 += 16;
      }
      while (v44++ < (int)*v36);
    }
  }
LABEL_38:
  *(void *)(a2 + 128) = 0x2DD0000000000000;
  int v47 = *v18;
  if (*v18)
  {
    uint64_t v48 = a1;
    uint64_t v50 = v133;
    int v49 = v134;
    if (v47 != 1 || !*(unsigned char *)(v8 + 9856 * v7 + 49)) {
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v48 = a1;
    uint64_t v50 = v133;
    int v49 = v134;
    if (!*(unsigned char *)(v8 + 9856 * v7 + 50)) {
      goto LABEL_62;
    }
  }
  unsigned int v51 = 0;
  unsigned int v52 = 0;
  uint64_t v53 = v10 + 2360 * v11;
  uint64_t v54 = v8 + 9856 * v7;
  unsigned int v55 = (unsigned char *)(v54 + 50);
  long long v56 = (unsigned char *)(v54 + 49);
  if (v47) {
    uint64_t v57 = v56;
  }
  else {
    uint64_t v57 = v55;
  }
  int v58 = ((*v57 & 1) << 6) | 0x2DD00000;
  *(_DWORD *)(a2 + 132) = v58;
  char v59 = *(_DWORD *)(v53 + 768);
  unsigned int v60 = v58 & 0xFFFFFFC7 | (8 * (*(_DWORD *)(v53 + 768) & 7));
  *(_DWORD *)(a2 + 132) = v60;
  unsigned __int8 v61 = (*(_DWORD *)(v53 + 772) + *(_DWORD *)(v53 + 768)) & 7;
  *(_DWORD *)(a2 + 132) = v60 & 0xFFFFFFF8 | v61;
  int v62 = 1 << (v59 & 7);
  int v63 = 1 << v61;
  do
  {
    uint64_t v64 = v51;
    if (*(unsigned char *)(v10 + 2360 * v11 + v51 + 776))
    {
      int v65 = ((v51 & 0xF) << 9) | 0x2DE04000;
      uint64_t v66 = a2 + 4 * v52;
      *(_DWORD *)(v66 + 136) = v65;
      uint64_t v67 = v10 + 2360 * v11 + 4 * v64;
      *(_DWORD *)(v66 + 136) = ((unsigned __int16)*(_DWORD *)(v67 + 808) + (_WORD)v62) & 0x1FF | v65;
      *(_DWORD *)(v66 + 232) = 770703360;
      *(_DWORD *)(v66 + 232) = *(unsigned __int16 *)(v67 + 872) | 0x2DF00000;
      ++v52;
    }
    if (*(unsigned char *)(v10 + 2360 * v11 + v64 + 792))
    {
      uint64_t v68 = 0;
      char v69 = 1;
      do
      {
        char v70 = v69;
        int v71 = ((v64 & 0xF) << 9) | (v68 << 14) | 0x2DE08000;
        uint64_t v72 = a2 + 4 * v52;
        *(_DWORD *)(v72 + 136) = v71;
        uint64_t v73 = v10 + 2360 * v11 + 8 * v64 + 4 * v68;
        *(_DWORD *)(v72 + 136) = ((unsigned __int16)*(_DWORD *)(v73 + 936) + (_WORD)v63) & 0x1FF | v71;
        *(_DWORD *)(v72 + 232) = 770703360;
        *(_DWORD *)(v72 + 232) = *(unsigned __int16 *)(v73 + 1608) | 0x2DF00000;
        ++v52;
        uint64_t v68 = 1;
        char v69 = 0;
      }
      while ((v70 & 1) != 0);
    }
    unsigned int v51 = v64 + 1;
  }
  while ((int)v64 + 1 <= *v37);
  if (!*v18)
  {
    unsigned int v74 = 0;
    do
    {
      uint64_t v75 = v74;
      if (*(unsigned char *)(v10 + 2360 * v11 + v74 + 1192))
      {
        int v76 = ((v74 & 0xF) << 9) | 0x2DE06000;
        uint64_t v77 = a2 + 4 * v52;
        *(_DWORD *)(v77 + 136) = v76;
        uint64_t v78 = v10 + 2360 * v11 + 4 * v75;
        *(_DWORD *)(v77 + 136) = ((unsigned __int16)*(_DWORD *)(v78 + 1224) + (_WORD)v62) & 0x1FF | v76;
        *(_DWORD *)(v77 + 232) = 770703360;
        *(_DWORD *)(v77 + 232) = *(unsigned __int16 *)(v78 + 1288) | 0x2DF00000;
        ++v52;
      }
      if (*(unsigned char *)(v10 + 2360 * v11 + v75 + 1208))
      {
        uint64_t v79 = 0;
        char v80 = 1;
        do
        {
          char v81 = v80;
          int v82 = ((v75 & 0xF) << 9) | (v79 << 14) | 0x2DE0A000;
          uint64_t v83 = a2 + 4 * v52;
          *(_DWORD *)(v83 + 136) = v82;
          uint64_t v84 = v10 + 2360 * v11 + 8 * v75 + 4 * v79;
          *(_DWORD *)(v83 + 136) = ((unsigned __int16)*(_DWORD *)(v84 + 1352) + (_WORD)v63) & 0x1FF | v82;
          *(_DWORD *)(v83 + 232) = 770703360;
          *(_DWORD *)(v83 + 232) = *(unsigned __int16 *)(v84 + 1736) | 0x2DF00000;
          ++v52;
          uint64_t v79 = 1;
          char v80 = 0;
        }
        while ((v81 & 1) != 0);
      }
      unsigned int v74 = v75 + 1;
    }
    while ((int)v75 + 1 <= *v36);
  }
  *(_DWORD *)(a2 + 128) = v52;
LABEL_62:
  uint64_t v85 = v8 + 9856 * v7;
  int v88 = *(unsigned __int8 *)(v85 + 48);
  unsigned int v86 = (unsigned __int8 *)(v85 + 48);
  LOBYTE(v87) = v88;
  if (v88) {
    int v87 = *(_DWORD *)(v10 + 2360 * v11 + 1876);
  }
  unsigned int v89 = *(_DWORD *)(a2 + 328) & 0xFFFFFFE0 | ((_BYTE)v87 + *((_DWORD *)v86 - 1)) & 0x1F;
  *(_DWORD *)(a2 + 328) = v89;
  int v90 = *v86;
  if (v90) {
    int v90 = *(_DWORD *)(v10 + 2360 * v11 + 1872);
  }
  unsigned int v91 = v89 & 0xFFFFFC1F | (32 * (((_BYTE)v90 + *(_DWORD *)(v8 + 9856 * v7 + 40)) & 0x1F));
  *(_DWORD *)(a2 + 328) = v91;
  unsigned int v92 = (_DWORD *)(v8 + 9856 * v7);
  int v93 = v92[7] + *(_DWORD *)(v10 + 2360 * v11 + 1868) + 26;
  *(_DWORD *)(a2 + 328) = v91 & 0xE03FF | ((v93 & 0x7F) << 10) | 0x2D900000;
  *(_DWORD *)(*(void *)(v48 + 256) + 2868) = *(_DWORD *)(v48 + 460) + (v93 << 25 >> 25);
  *(_DWORD *)(a2 + 332) = 0;
  int v94 = v92[1635] & 7;
  *(_DWORD *)(a2 + 332) = v94;
  unsigned int v95 = v94 & 0xFFFFFFC7 | (8 * (v92[1634] & 7));
  *(_DWORD *)(a2 + 332) = v95;
  int v96 = (char *)(v50 + 23176 * v49 + 10649);
  char v97 = *v96;
  if (*v96) {
    char v97 = *(unsigned char *)(v10 + 2360 * v11 + 618);
  }
  unsigned int v98 = v95 & 0xFFFFFFBF | ((v97 & 1) << 6);
  *(_DWORD *)(a2 + 332) = v98;
  if (*v96) {
    char v99 = *(unsigned char *)(v10 + 2360 * v11 + 617);
  }
  else {
    char v99 = 0;
  }
  int v100 = (v97 & 1) << 6;
  int v101 = (v99 & 1) << 7;
  unsigned int v102 = v98 & 0xFFFFFF7F | v101;
  *(_DWORD *)(a2 + 332) = v102;
  uint64_t v103 = v10 + 2360 * v11;
  uint64_t v104 = v8 + 9856 * v7;
  if (*(unsigned char *)(v103 + 1881)) {
    int v105 = (_DWORD *)(v103 + 1888);
  }
  else {
    int v105 = (_DWORD *)(v104 + 248);
  }
  unsigned int v106 = v102 & 0xFFFFF0FF | ((*v105 & 0xF) << 8);
  *(_DWORD *)(a2 + 332) = v106;
  if (*(unsigned char *)(v103 + 1881)) {
    int v107 = (_DWORD *)(v103 + 1884);
  }
  else {
    int v107 = (_DWORD *)(v104 + 244);
  }
  unsigned int v108 = v106 & 0xFFFF0FFF | ((*v107 & 0xF) << 12);
  *(_DWORD *)(a2 + 332) = v108;
  if (*(unsigned char *)(v104 + 239) && *(unsigned char *)(v103 + 1881)) {
    long long v109 = (unsigned __int8 *)(v10 + 2360 * v11 + 1882);
  }
  else {
    long long v109 = (unsigned __int8 *)(v8 + 9856 * v7 + 240);
  }
  int v110 = *v109;
  BOOL v111 = (v101 | v100) != 0;
  int v112 = v108 | ((v110 == 0) << 16);
  *(_DWORD *)(a2 + 332) = v112;
  if (!v110) {
    BOOL v111 = 1;
  }
  uint64_t v113 = v8 + 9856 * v7;
  if (v111) {
    int v114 = (unsigned char *)(v10 + 2360 * v11 + 1892);
  }
  else {
    int v114 = (unsigned char *)(v113 + 237);
  }
  unsigned int v115 = v112 & 0xFFFDFFFF | ((*v114 & 1) << 17);
  *(_DWORD *)(a2 + 332) = v115;
  if (*(unsigned char *)(v113 + 52)) {
    char v116 = *(unsigned char *)(v8 + 9856 * v7 + 236);
  }
  else {
    char v116 = 1;
  }
  unsigned int v117 = v115 & 0xFFFBFFFF | ((v116 & 1) << 18);
  *(_DWORD *)(a2 + 332) = v117;
  int v118 = *(unsigned __int8 *)(v50 + 23176 * v49 + 10650);
  if (*(unsigned char *)(v50 + 23176 * v49 + 10650)) {
    int v118 = *(unsigned char *)(v50 + 23176 * v49 + 10668) == 0;
  }
  *(_DWORD *)(a2 + 332) = v117 | (v118 << 19) | 0x2DA00000;
  int v119 = *(_DWORD **)(v48 + 256);
  int v120 = v119[626];
  if (v119[590] != 1)
  {
    unint64_t v137 = 0;
    uint64_t v138 = 0;
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))
    {
      int v128 = 368 * a3;
      *(_DWORD *)(a2 + 340) = 0;
      uint64_t v122 = v138;
      if (!*(void *)v138 && !*(_DWORD *)(v138 + 152) && !*(_DWORD *)(v138 + 156)) {
        goto LABEL_116;
      }
      int v129 = v137;
      if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        int v140 = "populateSliceRegisters";
        __int16 v141 = 1024;
        int v142 = 1668;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        int v129 = v137;
      }
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v128 + 3368, v129, 0x3FFFFFFFFFFLL, 32, 1023, 4);
      if (result) {
        return result;
      }
      uint64_t v122 = v138;
      if (!*(void *)v138)
      {
LABEL_116:
        if (!*(_DWORD *)(v122 + 152) && !*(_DWORD *)(v122 + 156)) {
          goto LABEL_122;
        }
      }
      int v125 = v128 + 3372;
      int v126 = v137;
      if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        int v140 = "populateSliceRegisters";
        __int16 v141 = 1024;
        int v142 = 1669;
        int v127 = &_os_log_internal;
        goto LABEL_120;
      }
LABEL_121:
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v125, v126, 0xFFFFFFFFLL, 0, -1, 4);
      if (result) {
        return result;
      }
      goto LABEL_122;
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t v137 = 0;
  uint64_t v138 = 0;
  if (!(*(unsigned int (**)(_DWORD *, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))return 0xFFFFFFFFLL; {
  int v121 = 368 * a3;
  }
  *(_DWORD *)(a2 + 340) = 0;
  uint64_t v122 = v138;
  if (!*(void *)v138 && !*(_DWORD *)(v138 + 152) && !*(_DWORD *)(v138 + 156)) {
    goto LABEL_101;
  }
  int v123 = v137;
  if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    int v140 = "populateSliceRegisters";
    __int16 v141 = 1024;
    int v142 = 1649;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v123 = v137;
  }
  uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v121 + 3368, v123, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  if (!result)
  {
    uint64_t v122 = v138;
    if (*(void *)v138) {
      goto LABEL_103;
    }
LABEL_101:
    if (*(_DWORD *)(v122 + 152) || *(_DWORD *)(v122 + 156))
    {
LABEL_103:
      int v125 = v121 + 3372;
      int v126 = v137;
      if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        int v140 = "populateSliceRegisters";
        __int16 v141 = 1024;
        int v142 = 1650;
        int v127 = &_os_log_internal;
LABEL_120:
        _os_log_impl(&dword_223977000, v127, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        int v126 = v137;
        goto LABEL_121;
      }
      goto LABEL_121;
    }
LABEL_122:
    unsigned int v130 = *(_DWORD *)(v10 + 2360 * v11 + 16) - (*(_DWORD *)(v10 + 2360 * v11 + 2080) >> 3);
    *(_DWORD *)(a2 + 348) = v130;
    if (v119[590] == 1)
    {
      *(void *)(a2 + 356) = 0;
      if (v130 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
        unsigned int v130 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
      }
      uint64_t result = 0;
      if (v119[605]) {
        int v131 = v130 | v120 & 0x10000;
      }
      else {
        int v131 = (unsigned __int16)v120 | (v130 << 22);
      }
      *(_DWORD *)(a2 + 360) = v131;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecDaisyHevc::populateCommonRegisters(CAHDecDaisyHevc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000000;
  return 0;
}

uint64_t CAHDecDaisyHevc::updateCommonRegisters(CAHDecDaisyHevc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecDaisyHevc::populateSequenceRegisters(CAHDecDaisyHevc *this)
{
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)*((void *)this + 33);
  int v3 = *(_DWORD *)(v1 + 8320);
  uint64_t v4 = *(void *)(v1 + 8280);
  v2[13] = 0;
  uint64_t v5 = v4 + 23176 * v3;
  __int16 v6 = (*(_DWORD *)(v5 + 3608) >> 3) - 1;
  v2[13] = v6 & 0x1FFF;
  v2[13] = ((*(_DWORD *)(v5 + 3612) << 13) + 536805376) & 0x1FFF0000 | v6 & 0x1FFF;
  v2[14] = 0;
  int v7 = *(unsigned char *)(v5 + 10648) & 1;
  v2[14] = v7;
  unsigned int v8 = v7 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v5 + 4440) & 7));
  v2[14] = v8;
  unsigned int v9 = v8 & 0xFFFFFF8F | (16 * (*(_DWORD *)(v5 + 4436) & 7));
  v2[14] = v9;
  unsigned int v10 = v9 & 0xFFFFFE7F | (((*(_DWORD *)(v5 + 4428) + *(_DWORD *)(v5 + 4432)) & 3) << 7);
  v2[14] = v10;
  unsigned int v11 = v10 & 0xFFFFF9FF | ((*(_DWORD *)(v5 + 4428) & 3) << 9);
  v2[14] = v11;
  unsigned int v12 = v11 & 0xFFFFE7FF | (((*(_DWORD *)(v5 + 4424) + *(_DWORD *)(v5 + 4420)) & 3) << 11);
  v2[14] = v12;
  unsigned int v13 = v12 & 0xFFFF9FFF | ((*(_DWORD *)(v5 + 4420) & 3) << 13);
  v2[14] = v13;
  unsigned int v14 = v13 & 0xFFF87FFF | ((*(_DWORD *)(v5 + 3640) & 0xF) << 15);
  v2[14] = v14;
  unsigned int v15 = v14 & 0xFF87FFFF | ((*(_DWORD *)(v5 + 3636) & 0xF) << 19);
  v2[14] = v15;
  unsigned int v16 = v15 & 0xFF7FFFFF | ((*(unsigned char *)(v5 + 3604) & 1) << 23);
  v2[14] = v16;
  v2[14] = v16 & 0xFCFFFFFF | ((*(_DWORD *)(v5 + 3600) & 3) << 24);
  v2[15] = 0;
  if (*(unsigned char *)(v5 + 10650))
  {
    v2[15] = 4096;
    uint64_t v17 = (_DWORD *)(v4 + 23176 * v3);
    int v18 = (v17[2666] + v17[2665]) & 3 | 0x1000;
    v2[15] = v18;
    unsigned int v19 = v18 & 0xFFFFFFF3 | (4 * (v17[2665] & 3));
    v2[15] = v19;
    unsigned int v20 = v19 & 0xFFFFFF0F | (16 * (v17[2664] & 0xF));
    v2[15] = v20;
    v2[15] = v20 & 0xFFFFF0FF | ((v17[2663] & 0xF) << 8);
  }
  v2[16] = 0;
  if (*(unsigned char *)(v4 + 23176 * v3 + 22833))
  {
    int v21 = *(unsigned char *)(v4 + 23176 * v3 + 22844) & 1;
    v2[16] = v21;
    unsigned int v22 = v21 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v4 + 23176 * v3 + 22843) & 1));
    v2[16] = v22;
    unsigned int v23 = v22 & 0xFFFFFFFB | (4 * (*(unsigned char *)(v4 + 23176 * v3 + 22842) & 1));
    v2[16] = v23;
    int v24 = v23 | (8 * (*(unsigned char *)(v4 + 23176 * v3 + 22841) == 0));
    v2[16] = v24;
    unsigned int v25 = v24 & 0xFFFFFFEF | (16 * (*(unsigned char *)(v4 + 23176 * v3 + 22840) & 1));
    v2[16] = v25;
    unsigned int v26 = v25 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v4 + 23176 * v3 + 22839) & 1));
    v2[16] = v26;
    unsigned int v27 = v26 & 0xFFFFFFBF | ((*(unsigned char *)(v4 + 23176 * v3 + 22838) & 1) << 6);
    v2[16] = v27;
    int v28 = v27 | ((*(unsigned char *)(v4 + 23176 * v3 + 22837) & 1) << 7);
    v2[16] = v28;
    int v29 = v28 | ((*(unsigned char *)(v4 + 23176 * v3 + 22836) & 1) << 8);
  }
  else
  {
    int v29 = 8;
  }
  v2[16] = v29;
  uint64_t v30 = v4 + 23176 * v3;
  v2[16] = v29 & 0xFFFFFDFF | ((*(unsigned char *)(v30 + 22285) & 1) << 9);
  if (*(unsigned char *)(v30 + 4444)) {
    CAHDecTansyHevc::copyScalingList((uint64_t)this, (uint64_t)(v2 + 17), *((void *)this + 33) + 892, *(_DWORD *)(v5 + 3600), v4 + 23176 * v3 + 4448);
  }
  return 0;
}

uint64_t CAHDecDaisyHevc::getTileHdrMemInfo(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 176 * a2;
  *a3 = v3 + 528;
  a3[1] = v3 + 3344;
  return result;
}

__n128 CAHDecDaisyHevc::getMVmemInfo(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1 + 176 * a2;
  long long v5 = *(_OWORD *)(v4 + 8976);
  long long v6 = *(_OWORD *)(v4 + 9008);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 8992);
  *(_OWORD *)(a3 + 32) = v6;
  *(_OWORD *)a3 = v5;
  long long v7 = *(_OWORD *)(v4 + 9024);
  long long v8 = *(_OWORD *)(v4 + 9040);
  long long v9 = *(_OWORD *)(v4 + 9072);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(v4 + 9056);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_OWORD *)(a3 + 64) = v8;
  __n128 result = *(__n128 *)(v4 + 9088);
  long long v11 = *(_OWORD *)(v4 + 9104);
  long long v12 = *(_OWORD *)(v4 + 9136);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v4 + 9120);
  *(_OWORD *)(a3 + 160) = v12;
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v11;
  *a4 = *(_DWORD *)(a1 + 4 * a2 + 464);
  return result;
}

uint64_t CAHDecDaisyHevc::populatePictureRegisters(CAHDecDaisyHevc *this)
{
  uint64_t v490 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 8320);
  int v4 = *(_DWORD *)(v2 + 8324);
  uint64_t v5 = *(void *)(v2 + 8280);
  uint64_t v6 = *(void *)(v2 + 8288);
  unsigned int v466 = *(_DWORD *)(v2 + 3068);
  unsigned int v467 = *(_DWORD *)(v2 + 9036);
  int v470 = *(_DWORD *)(v2 + 3072);
  int v7 = *(unsigned __int8 *)(v2 + 3060);
  int v8 = *(_DWORD *)(v2 + 3064);
  uint64_t v462 = *(void *)(v2 + 8392);
  int v463 = *(_DWORD *)(v2 + 3036);
  uint64_t v9 = *(void *)(v2 + 2088);
  int v458 = *(_DWORD *)(v2 + 3660);
  int v459 = *(unsigned __int8 *)(v2 + 9098);
  int v473 = *(_DWORD *)(v2 + 2644);
  uint64_t v465 = *(unsigned int *)(v2 + 8424);
  int v10 = *(unsigned __int8 *)(v2 + 8);
  long long v11 = *(_OWORD *)(v2 + 8536);
  v489[0] = *(_OWORD *)(v2 + 8520);
  v489[1] = v11;
  long long v12 = *(_OWORD *)(v2 + 8568);
  v489[2] = *(_OWORD *)(v2 + 8552);
  v489[3] = v12;
  uint64_t v456 = v9;
  uint64_t v457 = *(unsigned int *)(v2 + 8720);
  int v472 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  unsigned int v13 = (char *)this + 264;
  int v469 = *(_DWORD *)(v5 + 23176 * v3 + 4424) + *(_DWORD *)(v5 + 23176 * v3 + 4420);
  memset(v488, 0, sizeof(v488));
  memset(v487, 0, sizeof(v487));
  uint64_t v14 = *((void *)this + 33);
  (*(void (**)(void))(**((void **)this + 32) + 336))();
  uint64_t v15 = 0;
  unsigned int v16 = (unsigned __int8 *)*((void *)this + 32);
  uint64_t v17 = (const double *)(v16 + 8728);
  do
  {
    float64x2x2_t v491 = vld2q_f64(v17);
    v17 += 4;
    v488[v15] = v491.val[0];
    v487[v15++] = v491.val[1];
  }
  while (v15 != 4);
  uint64_t v18 = v6 + 9856 * v4;
  int v20 = *(unsigned __int8 *)(v18 + 52);
  unsigned int v19 = (unsigned char *)(v18 + 52);
  int v464 = v10;
  int v460 = v7;
  int v461 = v8;
  uint64_t v475 = v5;
  if (v20)
  {
    unint64_t v21 = 0;
    uint64_t v22 = v6 + 9856 * v4;
    unsigned __int16 v23 = *(_WORD *)(v22 + 56) + 1;
    uint64_t v24 = *(void *)v13;
    *(_WORD *)(*(void *)v13 + 788) = v23;
    uint64_t v25 = v22 + 9676;
    do
    {
      *(_WORD *)(v24 + 792 + 2 * v21) = *(_DWORD *)(v25 + 4 * v21);
      BOOL v26 = v21++ >= v23;
    }
    while (!v26);
    uint64_t v27 = v14;
    unint64_t v28 = 0;
    uint64_t v29 = v6 + 9856 * v4;
    unsigned __int16 v30 = *(_WORD *)(v29 + 60) + 1;
    *(_WORD *)(v24 + 790) = v30;
    int v31 = v30;
    uint64_t v32 = v29 + 9760;
    uint64_t v33 = v24 + 834;
    do
    {
      *(_WORD *)(v33 + 2 * v28) = *(_DWORD *)(v32 + 4 * v28);
      BOOL v26 = v28++ >= v30;
    }
    while (!v26);
    int v34 = v3;
  }
  else
  {
    uint64_t v27 = v14;
    uint64_t v35 = *(void *)v13;
    *(_DWORD *)(v35 + 788) = 65537;
    *(_WORD *)(v35 + 792) = 0;
    int v34 = v3;
    uint64_t v36 = v5 + 23176 * v3;
    *(_WORD *)(v35 + 794) = *(_DWORD *)(v36 + 22880);
    *(_WORD *)(v35 + 834) = 0;
    *(_WORD *)(v35 + 836) = *(_DWORD *)(v36 + 22888);
    int v31 = 1;
    unsigned __int16 v23 = 1;
  }
  int v37 = v16[2675];
  unsigned int v38 = v16[2674];
  if (v37 | v38)
  {
    uint64_t v39 = v475 + 23176 * v34;
    unsigned int v40 = *(_DWORD *)(v39 + 3636);
    unsigned int v41 = *(_DWORD *)(v39 + 3640);
    if (v40 > v41) {
      unsigned int v41 = v40;
    }
    unsigned int v42 = (v41 + 9) & 0xFFFFFFFE;
    if (v42 == 8)
    {
      unsigned int v51 = 1;
      int v50 = 8;
      if (!v16[2675]) {
        goto LABEL_47;
      }
    }
    else
    {
      int v43 = v16[2672];
      if (v43) {
        int v44 = 12;
      }
      else {
        int v44 = 11;
      }
      if (v43) {
        int v45 = 5;
      }
      else {
        int v45 = 4;
      }
      BOOL v46 = v43 == 0;
      if (v43) {
        int v47 = 10;
      }
      else {
        int v47 = 9;
      }
      if (v46) {
        int v48 = 2;
      }
      else {
        int v48 = 3;
      }
      if (v42 == 10)
      {
        int v49 = v48;
      }
      else
      {
        int v47 = 27;
        int v49 = 27;
      }
      if (v42 == 12) {
        int v50 = v44;
      }
      else {
        int v50 = v47;
      }
      if (v42 == 12) {
        unsigned int v51 = v45;
      }
      else {
        unsigned int v51 = v49;
      }
      if (!v37) {
        goto LABEL_47;
      }
    }
    if (*(_DWORD *)(v475 + 23176 * v34 + 3600) && (v37 == 2 && v50 == 8 || v37 == 3 && (v50 - 9) <= 1))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v50;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v37;
        unsigned int v52 = &_os_log_internal;
        uint64_t v53 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
        goto LABEL_139;
      }
      return 0xFFFFFFFFLL;
    }
LABEL_47:
    unsigned int v13 = (char *)this + 264;
    if (v38 && (v38 == 3 && v51 - 9 < 2 || v51 <= 0x1A && ((1 << v51) & 0x4C00000) != 0 && v38 <= 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v51;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v38;
        unsigned int v52 = &_os_log_internal;
        uint64_t v53 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
        goto LABEL_139;
      }
      return 0xFFFFFFFFLL;
    }
  }
  unsigned __int16 v455 = v23;
  uint64_t v54 = v6;
  int v55 = v4;
  long long v56 = v19;
  uint64_t v57 = v27;
  *(_DWORD *)(v27 + 88) = 766509056;
  uint64_t v58 = (*(uint64_t (**)(void))(**((void **)this + 32) + 216))(*((void *)this + 32));
  if (v58) {
    int v59 = (*(_DWORD *)(*((void *)this + 32) + 3092) == 2) << 13;
  }
  else {
    int v59 = 0;
  }
  unsigned int v60 = v467 >> 28;
  if (v472) {
    int v61 = 688;
  }
  else {
    int v61 = 672;
  }
  if (v473) {
    int v62 = 4160;
  }
  else {
    int v62 = 64;
  }
  unsigned int v63 = v62 & 0xFFFFFFF0 | ((v473 == 1) << 10) | v61 & 0xFFFFFFF0 | (4 * (v37 & 3)) | v38 & 3 | v59;
  unsigned int v64 = v63 | *(_DWORD *)(v57 + 88) & 0xFFFFC100;
  *(_DWORD *)(v57 + 88) = v64;
  int v65 = (unsigned char *)*((void *)this + 32);
  unsigned int v66 = v64 & 0xFFF7FFFF | ((v65[2652] & 1) << 19);
  *(_DWORD *)(v57 + 88) = v66;
  unsigned int v67 = v66 & 0xFFFBFFFF | ((v65[2653] & 1) << 18);
  *(_DWORD *)(v57 + 88) = v67;
  *(void *)(v57 + 88) = v67 & 0xFFFDFFFF | ((v65[2654] & 1) << 17);
  int v68 = v34;
  if ((v467 & 1) != 0 && *(unsigned char *)(v54 + 9856 * v55 + 53) && *(_DWORD *)(v475 + 23176 * v34 + 22888) > v60 + 1
    || (v467 & 2) != 0 && !*(unsigned char *)(v54 + 9856 * v55 + 53) && *v56 && v31 * v455 > v60 + 1)
  {
    goto LABEL_77;
  }
  if ((v467 & 0x20) == 0 || (int v69 = *(unsigned __int8 *)(v54 + 9856 * v55 + 53), *(unsigned char *)(v54 + 9856 * v55 + 53)))
  {
    int v69 = 0;
    goto LABEL_78;
  }
  if (!*v56 && v466 > v60 + 1) {
LABEL_77:
  }
    int v69 = (v470 == 0) << 27;
LABEL_78:
  *(_DWORD *)(v57 + 92) = v69;
  *(_DWORD *)(v57 + 96) = 0;
  uint64_t v70 = v475 + 23176 * v34;
  unsigned __int16 v71 = *(_DWORD *)(v70 + 3608) - 1;
  *(_DWORD *)(v57 + 96) = v71;
  int v72 = (v71 | ((unsigned __int16)*(_DWORD *)(v70 + 3612) << 16)) - 0x10000;
  *(_DWORD *)(v57 + 100) = 0;
  *(_DWORD *)(v57 + 104) = 0;
  *(_DWORD *)(v57 + 96) = v72;
  if (*(unsigned char *)(v54 + 9856 * v55 + 6466))
  {
    uint64_t v73 = (unsigned char *)(v54 + 9856 * v55 + 6477);
    int v74 = 32 * (*v73 & 1);
    *(_DWORD *)(v57 + 104) = v74;
    LOBYTE(v75) = *v73;
    if (*v73) {
      int v75 = *(_DWORD *)(v54 + 9856 * v55 + 6484);
    }
    unint64_t v76 = v75 & 7;
    int v77 = v76 | v74;
    *(_DWORD *)(v57 + 104) = v76 | v74;
    if (v74)
    {
      uint64_t v78 = (_DWORD *)(v54 + 9856 * v55 + 6512);
      uint64_t v79 = (unsigned int *)(v57 + 112);
      unint64_t v80 = -1;
      do
      {
        unsigned int v81 = *v79 & 0xFFFFFFE0 | *v78 & 0x1F;
        *uint64_t v79 = v81;
        *v79++ = v81 & 0xFFFFFC1F | (32 * (*(v78 - 6) & 0x1F));
        ++v80;
        ++v78;
      }
      while (v80 < v76);
    }
    int v82 = *v73;
    if (v82) {
      int v82 = *(_DWORD *)(v54 + 9856 * v55 + 6480);
    }
    int v83 = (8 * (((_BYTE)v469 - (_BYTE)v82) & 3)) | v77;
    *(_DWORD *)(v57 + 104) = v83;
    unsigned int v84 = v83 & 0xFFFFFFBF | ((*(unsigned char *)(v54 + 9856 * v55 + 6476) & 1) << 6);
    *(_DWORD *)(v57 + 104) = v84;
    unsigned int v85 = v84 & 0xFFFFFE7F | ((*(_DWORD *)(v54 + 9856 * v55 + 6472) & 3) << 7);
  }
  else
  {
    unsigned int v85 = 8 * (v469 & 3);
  }
  *(_DWORD *)(v57 + 104) = v85;
  uint64_t v86 = v54 + 9856 * v55;
  int v89 = *(unsigned __int8 *)(v86 + 34);
  int v87 = (unsigned char *)(v86 + 34);
  LOBYTE(v88) = v89;
  if (v89) {
    int v88 = *(_DWORD *)(v54 + 9856 * v55 + 36);
  }
  unsigned int v90 = v85 & 0xFFFE7FFF | ((((_BYTE)v469 - (_BYTE)v88) & 3) << 15);
  *(_DWORD *)(v57 + 104) = v90;
  uint64_t v91 = v54 + 9856 * v55;
  unsigned int v92 = v90 & 0xFFFFF1FF | ((*(_DWORD *)(v91 + 6460) & 7) << 9);
  *(_DWORD *)(v57 + 104) = v92;
  unsigned int v93 = v92 & 0xFFFFEFFF | ((*(unsigned char *)(v91 + 53) & 1) << 12);
  *(_DWORD *)(v57 + 104) = v93;
  unsigned int v94 = v93 & 0xFFFFDFFF | ((*v56 & 1) << 13);
  *(_DWORD *)(v57 + 104) = v94;
  unsigned int v95 = v94 & 0xFFFFBFFF | ((*(unsigned char *)(v91 + 51) & 1) << 14);
  *(_DWORD *)(v57 + 104) = v95;
  unsigned int v96 = v95 & 0xFFFDFFFF | ((*v87 & 1) << 17);
  *(_DWORD *)(v57 + 104) = v96;
  unsigned int v97 = v96 & 0xFFFBFFFF | ((*(unsigned char *)(v91 + 33) & 1) << 18);
  *(_DWORD *)(v57 + 104) = v97;
  unsigned int v98 = v97 & 0xFFF7FFFF | ((*(unsigned char *)(v91 + 32) & 1) << 19);
  *(_DWORD *)(v57 + 104) = v98;
  unsigned int v99 = v98 & 0xFFEFFFFF | ((*(unsigned char *)(v91 + 16) & 1) << 20);
  *(_DWORD *)(v57 + 104) = v99;
  if (v63 >> 13) {
    BOOL v100 = 0;
  }
  else {
    BOOL v100 = *(unsigned char *)(v475 + 23176 * v34 + 22284) != 0;
  }
  *(_DWORD *)(v57 + 104) = v99 & 0xFFDFFFFF | (v100 << 21);
  uint64_t v101 = v54 + 9856 * v55;
  unsigned int v102 = *(_DWORD *)(v57 + 108) & 0xFFFFFFE0 | *(_DWORD *)(v101 + 44) & 0x1F;
  *(_DWORD *)(v57 + 108) = v102;
  unsigned int v103 = v102 & 0xFFFFFC1F | (32 * (*(_DWORD *)(v101 + 40) & 0x1F));
  *(_DWORD *)(v57 + 108) = v103;
  uint64_t v104 = *((void *)this + 32);
  if (*(unsigned char *)(v104 + 12)
    && *(_DWORD *)(v475 + 23176 * v34 + 22864) == 5
    && !*v56
    && *(_DWORD *)(v475 + 23176 * v34 + 3600) == 1
    && (*(_DWORD *)(v475 + 23176 * v34 + 3636) | 2) == 2
    && (*(_DWORD *)(v475 + 23176 * v34 + 3640) | 2) == 2)
  {
    uint64_t v105 = *(void *)(v104 + 8296);
    unsigned int v106 = v103 | 0x80000000;
    *(_DWORD *)(v57 + 108) = v106;
    uint64_t v107 = v54 + 9856 * v55;
    int v108 = *(_DWORD *)(v107 + 28) + *(_DWORD *)(v105 + 1868);
    int v109 = v108 + 26;
    unsigned int v110 = v108 + 11;
    if (v109 > 51) {
      unsigned int v110 = 36;
    }
    if (v109 < 15) {
      unsigned int v110 = 0;
    }
    unsigned int v111 = v106 & 0xFFFF83FF | ((kTable_8_11_tc[v110] & 0x1F) << 10);
    *(_DWORD *)(v57 + 108) = v111;
    int v112 = *(_DWORD *)(v107 + 28) + *(_DWORD *)(v105 + 1868);
    int v113 = v112 + 26;
    unsigned int v114 = v112 + 11;
    if (v113 > 51) {
      unsigned int v114 = 36;
    }
    if (v113 < 15) {
      unsigned int v114 = 0;
    }
    *(_DWORD *)(v57 + 108) = v111 & 0xFFC07FFF | ((kTable_8_11_beta[v114] & 0x7F) << 15);
    uint64_t v115 = *((void *)this + 32);
    int v116 = 2;
  }
  else
  {
    *(_DWORD *)(v57 + 108) = v103 & 0x7FC003FF;
    uint64_t v115 = *((void *)this + 32);
    int v116 = *(unsigned __int8 *)(v115 + 12);
  }
  *(_DWORD *)(v115 + 16) = v116;
  if (*(unsigned char *)(v54 + 9856 * v55 + 252))
  {
    CAHDecTansyHevc::copyScalingList(v58, v57 + 136, *((void *)this + 33) + 1888, *(_DWORD *)(v475 + 23176 * v34 + 3600), v54 + 9856 * v55 + 256);
    int v68 = v34;
    uint64_t v115 = *((void *)this + 32);
  }
  int v117 = *(_DWORD *)(v57 + 88);
  if ((~v117 & 0xC0000) != 0)
  {
    int v122 = 0;
    int v124 = 0;
    *(_DWORD *)(v57 + 156) = 0;
    *(_DWORD *)(v57 + 160) = 0;
  }
  else
  {
    int v118 = v13;
    int v119 = *(_DWORD *)(v115 + 2656);
    if (!v119 || !*(_DWORD *)(v115 + 2660))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v151 = *(_DWORD *)(v115 + 2660);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v119;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v151;
        unsigned int v52 = &_os_log_internal;
        uint64_t v53 = "AppleAVD: %s(): invalid stat crop width/height %d/%d";
LABEL_139:
        int v152 = buf;
        uint32_t v153 = 24;
LABEL_140:
        _os_log_impl(&dword_223977000, v52, OS_LOG_TYPE_DEFAULT, v53, v152, v153);
      }
      return 0xFFFFFFFFLL;
    }
    unsigned __int16 v120 = *(_DWORD *)(v115 + 2664);
    *(_WORD *)(v57 + 156) = v120;
    int v121 = *(_DWORD *)(v115 + 2668);
    int v122 = v121 << 16;
    *(_DWORD *)(v57 + 156) = v120 | ((unsigned __int16)v121 << 16);
    unsigned __int16 v123 = *(_DWORD *)(v115 + 2664) + *(_DWORD *)(v115 + 2656) - 1;
    *(_WORD *)(v57 + 160) = v123;
    int v124 = (v123 | ((unsigned __int16)(*(_WORD *)(v115 + 2660) + *(_WORD *)(v115 + 2668)) << 16)) - 0x10000;
    *(_DWORD *)(v57 + 160) = v124;
    unsigned int v13 = v118;
  }
  if (v470) {
    int v125 = 7340080;
  }
  else {
    int v125 = 3145776;
  }
  *(_DWORD *)(v57 + 164) = v125;
  if (!*(unsigned char *)(*((void *)this + 32) + 3004))
  {
    unsigned __int16 v126 = *(_DWORD *)(v70 + 3608) - 1;
    *(_DWORD *)(v57 + 160) = v124 & 0xFFFF0000 | v126;
    int v127 = (*(_DWORD *)(v70 + 3612) << 16) - 0x10000;
    *(_DWORD *)(v57 + 160) = v127 & 0xFFFF0000 | v126;
    if (*(unsigned char *)(v475 + 23176 * v68 + 3616))
    {
      if ((v117 & 0x800) != 0)
      {
        uint64_t v128 = v475 + 23176 * v68;
        unsigned __int16 v129 = *(_DWORD *)(v128 + 3620) * *(_DWORD *)(v128 + 22852);
        *(_DWORD *)(v57 + 156) = v122 | v129;
        *(_DWORD *)(v57 + 156) = v129 | ((unsigned __int16)(*(_WORD *)(v128 + 22856) * *(_DWORD *)(v128 + 3628)) << 16);
        unsigned __int16 v130 = *(_DWORD *)(v70 + 3608) + ~(*(_DWORD *)(v128 + 3624) * *(_DWORD *)(v128 + 22852));
        *(_DWORD *)(v57 + 160) = v130 | v127;
        *(_DWORD *)(v57 + 160) = v130 | ((unsigned __int16)(*(_WORD *)(v70 + 3612)
                                                          + ~(*(_WORD *)(v128 + 3632) * *(_WORD *)(v128 + 22856))) << 16);
      }
    }
  }
  int v131 = v68;
  uint64_t v132 = 0;
  uint64_t v133 = (char *)this + 6160;
  do
  {
    *(_DWORD *)(*(void *)v13 + v132 + 168) = 0;
    uint64_t v134 = *(void *)v13 + v132;
    int v135 = *(_DWORD *)(v134 + 168);
    *(_DWORD *)(v134 + 168) = 0;
    *(_DWORD *)(*(void *)v13 + v132 + 168) ^= 0xFFFFFF00;
    uint64_t v136 = *(void *)v13 + v132;
    int v137 = *(_DWORD *)(v136 + 168);
    *(_DWORD *)(v136 + 168) = v135;
    if (*(void *)v133 || *((_DWORD *)v133 + 38) || *((_DWORD *)v133 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v133, (int)v132 + 168, 0, 0xFFFFFFFFLL, 8, v137, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v132 + 228) = 0;
    *(_DWORD *)(*((void *)this + 33) + v132 + 228) = *(_DWORD *)(*((void *)this + 33) + v132 + 228) & 0x800001FF | (((*((_DWORD *)this + 3348) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v132 + 528) = 0;
    uint64_t v139 = *((void *)this + 33) + v132;
    int v140 = *(_DWORD *)(v139 + 528);
    *(_DWORD *)(v139 + 528) = 0;
    *(_DWORD *)(*((void *)this + 33) + v132 + 528) ^= 0x3FFu;
    uint64_t v141 = *((void *)this + 33) + v132;
    int v142 = *(_DWORD *)(v141 + 528);
    *(_DWORD *)(v141 + 528) = v140;
    if (*(void *)v133 || *((_DWORD *)v133 + 38) || *((_DWORD *)v133 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v133, (int)v132 + 528, 0, 0x3FFFFFFFFFFLL, 32, v142, 4);
      if (result) {
        return result;
      }
    }
    v132 += 4;
    v133 += 176;
  }
  while (v132 != 60);
  *(_DWORD *)(*(void *)v13 + 288) = 0;
  *(_DWORD *)(*(void *)v13 + 588) = 0;
  if ((*(unsigned char *)(v57 + 90) & 8) != 0)
  {
    uint64_t v143 = *((void *)this + 33);
    uint64_t v144 = *(void *)(*((void *)this + 32) + 2680);
    long long v485 = 0u;
    long long v486 = 0u;
    long long v483 = 0u;
    long long v484 = 0u;
    long long v481 = 0u;
    long long v482 = 0u;
    long long v479 = 0u;
    long long v480 = 0u;
    long long v478 = 0u;
    memset(buf, 0, sizeof(buf));
    int v145 = (*(_DWORD *)(v143 + 16) & 0xF) << 9;
    *(void *)long long buf = v144;
    int v146 = *(_DWORD *)(v143 + 288);
    *(_DWORD *)(v143 + 288) = 0;
    *(_DWORD *)(*((void *)this + 33) + 288) ^= 0xFFFFFF00;
    uint64_t v147 = *((void *)this + 33);
    int v148 = *(_DWORD *)(v147 + 288);
    *(_DWORD *)(v147 + 288) = v146;
    if (v144)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 288, v145, 0xFFFFFFFFLL, 8, v148, 4);
      if (result) {
        return result;
      }
      uint64_t v149 = *(void *)buf;
      int v150 = DWORD2(v485);
      LODWORD(v144) = HIDWORD(v485);
    }
    else
    {
      int v150 = 0;
      uint64_t v149 = 0;
    }
    *(_DWORD *)(*(void *)v13 + 588) = 0;
    int v154 = *(_DWORD *)(*(void *)v13 + 588);
    *(_DWORD *)(*(void *)v13 + 588) = 0;
    *(_DWORD *)(*(void *)v13 + 588) ^= 0x3FFu;
    int v155 = *(_DWORD *)(*(void *)v13 + 588);
    *(_DWORD *)(*(void *)v13 + 588) = v154;
    if (v149 || v150 || v144)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 588, v145, 0x3FFFFFFFFFFLL, 32, v155, 4);
      if (result) {
        return result;
      }
    }
  }
  uint64_t v156 = v57;
  int v157 = v13;
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  uint64_t v158 = *((void *)this + 33);
  int v159 = *(_DWORD *)(v158 + 292);
  *(_DWORD *)(v158 + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF00;
  uint64_t v160 = *((void *)this + 33);
  int v161 = *(_DWORD *)(v160 + 292);
  *(_DWORD *)(v160 + 292) = v159;
  if (*((void *)this + 1474) || *((_DWORD *)this + 2986) || *((_DWORD *)this + 2987))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1474, 292, 0, 0xFFFFFFFFLL, 8, v161, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 592) = 0;
  int v162 = *(_DWORD *)(*(void *)v13 + 592);
  *(_DWORD *)(*(void *)v13 + 592) = 0;
  *(_DWORD *)(*(void *)v13 + 592) ^= 0x3FFu;
  int v163 = *(_DWORD *)(*(void *)v13 + 592);
  *(_DWORD *)(*(void *)v13 + 592) = v162;
  if (*((void *)this + 1474) || *((_DWORD *)this + 2986) || *((_DWORD *)this + 2987))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1474, 592, 0, 0x3FFFFFFFFFFLL, 32, v163, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  uint64_t v164 = *((void *)this + 33);
  int v165 = *(_DWORD *)(v164 + 296);
  *(_DWORD *)(v164 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0xFFFFFF00;
  uint64_t v166 = *((void *)this + 33);
  int v167 = *(_DWORD *)(v166 + 296);
  *(_DWORD *)(v166 + 296) = v165;
  if (*((void *)this + 1496) || *((_DWORD *)this + 3030) || *((_DWORD *)this + 3031))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1496, 296, 0, 0xFFFFFFFFLL, 8, v167, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 596) = 0;
  int v168 = *(_DWORD *)(*(void *)v13 + 596);
  *(_DWORD *)(*(void *)v13 + 596) = 0;
  *(_DWORD *)(*(void *)v13 + 596) ^= 0x3FFu;
  int v169 = *(_DWORD *)(*(void *)v13 + 596);
  *(_DWORD *)(*(void *)v13 + 596) = v168;
  if (*((void *)this + 1496) || *((_DWORD *)this + 3030) || *((_DWORD *)this + 3031))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1496, 596, 0, 0x3FFFFFFFFFFLL, 32, v169, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 300) = 0;
  uint64_t v170 = *((void *)this + 33);
  int v171 = *(_DWORD *)(v170 + 300);
  *(_DWORD *)(v170 + 300) = 0;
  *(_DWORD *)(*((void *)this + 33) + 300) ^= 0xFFFFFF00;
  uint64_t v172 = *((void *)this + 33);
  int v173 = *(_DWORD *)(v172 + 300);
  *(_DWORD *)(v172 + 300) = v171;
  if (*((void *)this + 1518) || *((_DWORD *)this + 3074) || *((_DWORD *)this + 3075))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1518, 300, 0, 0xFFFFFFFFLL, 8, v173, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 600) = 0;
  int v174 = *(_DWORD *)(*(void *)v13 + 600);
  *(_DWORD *)(*(void *)v13 + 600) = 0;
  *(_DWORD *)(*(void *)v13 + 600) ^= 0x3FFu;
  int v175 = *(_DWORD *)(*(void *)v13 + 600);
  *(_DWORD *)(*(void *)v13 + 600) = v174;
  if (*((void *)this + 1518) || *((_DWORD *)this + 3074) || *((_DWORD *)this + 3075))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1518, 600, 0, 0x3FFFFFFFFFFLL, 32, v175, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 304) = 0;
  uint64_t v176 = *((void *)this + 33);
  int v177 = *(_DWORD *)(v176 + 304);
  *(_DWORD *)(v176 + 304) = 0;
  *(_DWORD *)(*((void *)this + 33) + 304) ^= 0xFFFFFF00;
  uint64_t v178 = *((void *)this + 33);
  int v179 = *(_DWORD *)(v178 + 304);
  *(_DWORD *)(v178 + 304) = v177;
  if (*((void *)this + 1540) || *((_DWORD *)this + 3118) || *((_DWORD *)this + 3119))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1540, 304, 0, 0xFFFFFFFFLL, 8, v179, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 604) = 0;
  int v180 = *(_DWORD *)(*(void *)v13 + 604);
  *(_DWORD *)(*(void *)v13 + 604) = 0;
  *(_DWORD *)(*(void *)v13 + 604) ^= 0x3FFu;
  int v181 = *(_DWORD *)(*(void *)v13 + 604);
  *(_DWORD *)(*(void *)v13 + 604) = v180;
  if (*((void *)this + 1540) || *((_DWORD *)this + 3118) || *((_DWORD *)this + 3119))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1540, 604, 0, 0x3FFFFFFFFFFLL, 32, v181, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 308) = 0;
  uint64_t v182 = *((void *)this + 33);
  int v183 = *(_DWORD *)(v182 + 308);
  *(_DWORD *)(v182 + 308) = 0;
  *(_DWORD *)(*((void *)this + 33) + 308) ^= 0xFFFFFF00;
  uint64_t v184 = *((void *)this + 33);
  int v185 = *(_DWORD *)(v184 + 308);
  *(_DWORD *)(v184 + 308) = v183;
  if (*((void *)this + 1562) || *((_DWORD *)this + 3162) || *((_DWORD *)this + 3163))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1562, 308, 0, 0xFFFFFFFFLL, 8, v185, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 608) = 0;
  int v186 = *(_DWORD *)(*(void *)v13 + 608);
  *(_DWORD *)(*(void *)v13 + 608) = 0;
  *(_DWORD *)(*(void *)v13 + 608) ^= 0x3FFu;
  int v187 = *(_DWORD *)(*(void *)v13 + 608);
  *(_DWORD *)(*(void *)v13 + 608) = v186;
  if (*((void *)this + 1562) || *((_DWORD *)this + 3162) || *((_DWORD *)this + 3163))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1562, 608, 0, 0x3FFFFFFFFFFLL, 32, v187, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 332) = 0;
  *(_DWORD *)(*((void *)this + 33) + 632) = 0;
  if (*(_DWORD *)(*((void *)this + 32) + 16) == 2)
  {
    uint64_t v188 = *((void *)this + 33);
    int v189 = *(_DWORD *)(v188 + 332);
    *(_DWORD *)(v188 + 332) = 0;
    *(_DWORD *)(*((void *)this + 33) + 332) ^= 0xFFFFFF00;
    uint64_t v190 = *((void *)this + 33);
    int v191 = *(_DWORD *)(v190 + 332);
    *(_DWORD *)(v190 + 332) = v189;
    if (*((void *)this + 1650) || *((_DWORD *)this + 3338) || *((_DWORD *)this + 3339))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1650, 332, 0, 0xFFFFFFFFLL, 8, v191, 4);
      if (result) {
        return result;
      }
    }
    int v192 = *(_DWORD *)(*(void *)v13 + 632);
    *(_DWORD *)(*(void *)v13 + 632) = 0;
    *(_DWORD *)(*(void *)v13 + 632) ^= 0x3FFu;
    int v193 = *(_DWORD *)(*(void *)v13 + 632);
    *(_DWORD *)(*(void *)v13 + 632) = v192;
    if (*((void *)this + 1650) || *((_DWORD *)this + 3338) || *((_DWORD *)this + 3339))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1650, 632, 0, 0x3FFFFFFFFFFLL, 32, v193, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 312) = 0;
  *(_DWORD *)(*((void *)this + 33) + 612) = 0;
  uint64_t v194 = *((void *)this + 33);
  int v195 = *(_DWORD *)(v194 + 312);
  *(_DWORD *)(v194 + 312) = 0;
  *(_DWORD *)(*((void *)this + 33) + 312) ^= 0xFFFFFF00;
  uint64_t v196 = *((void *)this + 33);
  int v197 = *(_DWORD *)(v196 + 312);
  *(_DWORD *)(v196 + 312) = v195;
  if (*((void *)this + 1584) || *((_DWORD *)this + 3206) || *((_DWORD *)this + 3207))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1584, 312, 0, 0xFFFFFFFFLL, 8, v197, 4);
    if (result) {
      return result;
    }
  }
  int v198 = *(_DWORD *)(*(void *)v13 + 612);
  *(_DWORD *)(*(void *)v13 + 612) = 0;
  *(_DWORD *)(*(void *)v13 + 612) ^= 0x3FFu;
  int v199 = *(_DWORD *)(*(void *)v13 + 612);
  *(_DWORD *)(*(void *)v13 + 612) = v198;
  if (*((void *)this + 1584) || *((_DWORD *)this + 3206) || *((_DWORD *)this + 3207))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1584, 612, 0, 0x3FFFFFFFFFFLL, 32, v199, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 316) = 0;
  uint64_t v200 = *((void *)this + 33);
  int v201 = *(_DWORD *)(v200 + 316);
  *(_DWORD *)(v200 + 316) = 0;
  *(_DWORD *)(*((void *)this + 33) + 316) ^= 0xFFFFFF00;
  uint64_t v202 = *((void *)this + 33);
  int v203 = *(_DWORD *)(v202 + 316);
  *(_DWORD *)(v202 + 316) = v201;
  if (*((void *)this + 1100) || *((_DWORD *)this + 2238) || *((_DWORD *)this + 2239))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1100, 316, 0, 0xFFFFFFFFLL, 8, v203, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 616) = 0;
  int v204 = *(_DWORD *)(*(void *)v13 + 616);
  *(_DWORD *)(*(void *)v13 + 616) = 0;
  *(_DWORD *)(*(void *)v13 + 616) ^= 0x3FFu;
  int v205 = *(_DWORD *)(*(void *)v13 + 616);
  *(_DWORD *)(*(void *)v13 + 616) = v204;
  if (*((void *)this + 1100) || *((_DWORD *)this + 2238) || *((_DWORD *)this + 2239))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1100, 616, 0, 0x3FFFFFFFFFFLL, 32, v205, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 320) = 0;
  uint64_t v206 = *((void *)this + 33);
  int v207 = *(_DWORD *)(v206 + 320);
  *(_DWORD *)(v206 + 320) = 0;
  *(_DWORD *)(*((void *)this + 33) + 320) ^= 0xFFFFFF00;
  uint64_t v208 = *((void *)this + 33);
  int v209 = *(_DWORD *)(v208 + 320);
  *(_DWORD *)(v208 + 320) = v207;
  int v210 = (void *)((char *)this + 176 * v465 + 8976);
  if (*v210 || *((_DWORD *)this + 44 * v465 + 2282) || *((_DWORD *)this + 44 * v465 + 2283))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v465 + 1122, 320, 0, 0xFFFFFFFFLL, 8, v209, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 620) = 0;
  int v211 = *(_DWORD *)(*(void *)v13 + 620);
  *(_DWORD *)(*(void *)v13 + 620) = 0;
  *(_DWORD *)(*(void *)v13 + 620) ^= 0x3FFu;
  int v212 = *(_DWORD *)(*(void *)v13 + 620);
  *(_DWORD *)(*(void *)v13 + 620) = v211;
  if (*v210 || *((_DWORD *)this + 44 * v465 + 2282) || *((_DWORD *)this + 44 * v465 + 2283))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v210, 620, 0, 0x3FFFFFFFFFFLL, 32, v212, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 324) = 0;
  uint64_t v213 = *((void *)this + 33);
  int v214 = *(_DWORD *)(v213 + 324);
  *(_DWORD *)(v213 + 324) = 0;
  *(_DWORD *)(*((void *)this + 33) + 324) ^= 0xFFFFFF00;
  uint64_t v215 = *((void *)this + 33);
  int v216 = *(_DWORD *)(v215 + 324);
  *(_DWORD *)(v215 + 324) = v214;
  if (*((void *)this + 1606) || *((_DWORD *)this + 3250) || *((_DWORD *)this + 3251))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1606, 324, 0, 0xFFFFFFFFLL, 8, v216, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 624) = 0;
  int v217 = *(_DWORD *)(*(void *)v13 + 624);
  *(_DWORD *)(*(void *)v13 + 624) = 0;
  *(_DWORD *)(*(void *)v13 + 624) ^= 0x3FFu;
  int v218 = *(_DWORD *)(*(void *)v13 + 624);
  *(_DWORD *)(*(void *)v13 + 624) = v217;
  if (*((void *)this + 1606) || *((_DWORD *)this + 3250) || *((_DWORD *)this + 3251))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1606, 624, 0, 0x3FFFFFFFFFFLL, 32, v218, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 328) = 0;
  uint64_t v219 = *((void *)this + 33);
  int v220 = *(_DWORD *)(v219 + 328);
  *(_DWORD *)(v219 + 328) = 0;
  *(_DWORD *)(*((void *)this + 33) + 328) ^= 0xFFFFFF00;
  uint64_t v221 = *((void *)this + 33);
  int v222 = *(_DWORD *)(v221 + 328);
  *(_DWORD *)(v221 + 328) = v220;
  if (*((void *)this + 1628) || *((_DWORD *)this + 3294) || *((_DWORD *)this + 3295))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1628, 328, 0, 0xFFFFFFFFLL, 8, v222, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 628) = 0;
  int v223 = *(_DWORD *)(*(void *)v13 + 628);
  *(_DWORD *)(*(void *)v13 + 628) = 0;
  *(_DWORD *)(*(void *)v13 + 628) ^= 0x3FFu;
  int v224 = *(_DWORD *)(*(void *)v13 + 628);
  *(_DWORD *)(*(void *)v13 + 628) = v223;
  if (*((void *)this + 1628) || *((_DWORD *)this + 3294) || *((_DWORD *)this + 3295))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1628, 628, 0, 0x3FFFFFFFFFFLL, 32, v224, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 336) = 0;
  *(_DWORD *)(*((void *)this + 33) + 636) = 0;
  *(_DWORD *)(*((void *)this + 33) + 340) = 0;
  *(_DWORD *)(*((void *)this + 33) + 640) = 0;
  *(_DWORD *)(*((void *)this + 33) + 344) = 0;
  *(_DWORD *)(*((void *)this + 33) + 644) = 0;
  *(_DWORD *)(*((void *)this + 33) + 348) = 0;
  *(_DWORD *)(*((void *)this + 33) + 648) = 0;
  uint64_t v225 = *((void *)this + 33);
  if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
  {
    int v226 = *(_DWORD *)(v225 + 340);
    *(_DWORD *)(v225 + 340) = 0;
    *(_DWORD *)(*(void *)v13 + 340) ^= 0xFFFFFF80;
    int v227 = *(_DWORD *)(*(void *)v13 + 340);
    *(_DWORD *)(*(void *)v13 + 340) = v226;
    uint64_t v229 = (void *)(v456 + 8);
    uint64_t v228 = *(void *)(v456 + 8);
    if (v459)
    {
      if (v228 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v456 + 8), 340, *(_DWORD *)(v456 + 68), 0xFFFFFFFFLL, 7, v227, 4);
        if (result) {
          return result;
        }
      }
      int v230 = *(_DWORD *)(*(void *)v13 + 640);
      *(_DWORD *)(*(void *)v13 + 640) = 0;
      *(_DWORD *)(*(void *)v13 + 640) ^= 0x3FFu;
      int v231 = *(_DWORD *)(*(void *)v13 + 640);
      *(_DWORD *)(*(void *)v13 + 640) = v230;
      if (*v229 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 640, *(_DWORD *)(v456 + 68), 0x3FFFFFFFFFFLL, 32, v231, 4);
        if (result) {
          return result;
        }
      }
      int v232 = *(_DWORD *)(*(void *)v13 + 336);
      *(_DWORD *)(*(void *)v13 + 336) = 0;
      *(_DWORD *)(*(void *)v13 + 336) ^= 0xFFFFFF80;
      int v233 = *(_DWORD *)(*(void *)v13 + 336);
      *(_DWORD *)(*(void *)v13 + 336) = v232;
      if (*v229 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 336, *(_DWORD *)(v456 + 80), 0xFFFFFFFFLL, 7, v233, 4);
        if (result) {
          return result;
        }
      }
      int v234 = *(_DWORD *)(*(void *)v13 + 636);
      *(_DWORD *)(*(void *)v13 + 636) = 0;
      *(_DWORD *)(*(void *)v13 + 636) ^= 0x3FFu;
      int v235 = *(_DWORD *)(*(void *)v13 + 636);
      *(_DWORD *)(*(void *)v13 + 636) = v234;
      if (*v229 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 636, *(_DWORD *)(v456 + 80), 0x3FFFFFFFFFFLL, 32, v235, 4);
        if (result) {
          return result;
        }
      }
      if (v463)
      {
        int v236 = *(_DWORD *)(*(void *)v13 + 348);
        *(_DWORD *)(*(void *)v13 + 348) = 0;
        *(_DWORD *)(*(void *)v13 + 348) ^= 0xFFFFFF80;
        int v237 = *(_DWORD *)(*(void *)v13 + 348);
        *(_DWORD *)(*(void *)v13 + 348) = v236;
        if (*(void *)v462 || *(_DWORD *)(v462 + 152) || *(_DWORD *)(v462 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v462, 348, *(_DWORD *)(v462 + 56), 0xFFFFFFFFLL, 7, v237, 4);
          if (result) {
            return result;
          }
        }
        int v238 = *(_DWORD *)(*(void *)v13 + 648);
        *(_DWORD *)(*(void *)v13 + 648) = 0;
        *(_DWORD *)(*(void *)v13 + 648) ^= 0x3FFu;
        int v239 = *(_DWORD *)(*(void *)v13 + 648);
        *(_DWORD *)(*(void *)v13 + 648) = v238;
        if (*(void *)v462 || *(_DWORD *)(v462 + 152) || *(_DWORD *)(v462 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v462, 648, *(_DWORD *)(v462 + 56), 0x3FFFFFFFFFFLL, 32, v239, 4);
          if (result) {
            return result;
          }
        }
        int v240 = *(_DWORD *)(*(void *)v13 + 344);
        *(_DWORD *)(*(void *)v13 + 344) = 0;
        *(_DWORD *)(*(void *)v13 + 344) ^= 0xFFFFFF80;
        int v241 = *(_DWORD *)(*(void *)v13 + 344);
        *(_DWORD *)(*(void *)v13 + 344) = v240;
        if (*(void *)v462 || *(_DWORD *)(v462 + 152) || *(_DWORD *)(v462 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v462, 344, *(_DWORD *)(v462 + 68), 0xFFFFFFFFLL, 7, v241, 4);
          if (result) {
            return result;
          }
        }
        int v242 = *(_DWORD *)(*(void *)v13 + 644);
        *(_DWORD *)(*(void *)v13 + 644) = 0;
        *(_DWORD *)(*(void *)v13 + 644) ^= 0x3FFu;
        int v243 = *(_DWORD *)(*(void *)v13 + 644);
        *(_DWORD *)(*(void *)v13 + 644) = v242;
        if (*(void *)v462 || *(_DWORD *)(v462 + 152) || *(_DWORD *)(v462 + 156))
        {
          int v244 = (void *)v462;
          int v245 = *(_DWORD *)(v462 + 68);
          uint64_t v246 = this;
LABEL_336:
          int v268 = 644;
LABEL_337:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v246, v244, v268, v245, 0x3FFFFFFFFFFLL, 32, v243, 4);
          if (result) {
            return result;
          }
        }
      }
    }
    else
    {
      if (v228 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v456 + 8), 340, *(_DWORD *)(v456 + 60), 0xFFFFFFFFLL, 7, v227, 4);
        if (result) {
          return result;
        }
      }
      int v269 = *(_DWORD *)(*(void *)v13 + 348);
      *(_DWORD *)(*(void *)v13 + 348) = 0;
      *(_DWORD *)(*(void *)v13 + 348) ^= 0xFFFFFF80;
      int v270 = *(_DWORD *)(*(void *)v13 + 348);
      *(_DWORD *)(*(void *)v13 + 348) = v269;
      if (*v229 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 348, *(_DWORD *)(v456 + 64), 0xFFFFFFFFLL, 7, v270, 4);
        if (result) {
          return result;
        }
      }
      int v271 = *(_DWORD *)(*(void *)v13 + 336);
      *(_DWORD *)(*(void *)v13 + 336) = 0;
      *(_DWORD *)(*(void *)v13 + 336) ^= 0xFFFFFF80;
      int v272 = *(_DWORD *)(*(void *)v13 + 336);
      *(_DWORD *)(*(void *)v13 + 336) = v271;
      if (*v229 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 336, *(_DWORD *)(v456 + 72), 0xFFFFFFFFLL, 7, v272, 4);
        if (result) {
          return result;
        }
      }
      int v273 = *(_DWORD *)(*(void *)v13 + 344);
      *(_DWORD *)(*(void *)v13 + 344) = 0;
      *(_DWORD *)(*(void *)v13 + 344) ^= 0xFFFFFF80;
      int v274 = *(_DWORD *)(*(void *)v13 + 344);
      *(_DWORD *)(*(void *)v13 + 344) = v273;
      if (*v229 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 344, *(_DWORD *)(v456 + 76), 0xFFFFFFFFLL, 7, v274, 4);
        if (result) {
          return result;
        }
      }
      int v275 = *(_DWORD *)(*(void *)v13 + 640);
      *(_DWORD *)(*(void *)v13 + 640) = 0;
      *(_DWORD *)(*(void *)v13 + 640) ^= 0x3FFu;
      int v276 = *(_DWORD *)(*(void *)v13 + 640);
      *(_DWORD *)(*(void *)v13 + 640) = v275;
      if (*v229 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 640, *(_DWORD *)(v456 + 60), 0x3FFFFFFFFFFLL, 32, v276, 4);
        if (result) {
          return result;
        }
      }
      int v277 = *(_DWORD *)(*(void *)v13 + 648);
      *(_DWORD *)(*(void *)v13 + 648) = 0;
      *(_DWORD *)(*(void *)v13 + 648) ^= 0x3FFu;
      int v278 = *(_DWORD *)(*(void *)v13 + 648);
      *(_DWORD *)(*(void *)v13 + 648) = v277;
      if (*v229 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 648, *(_DWORD *)(v456 + 64), 0x3FFFFFFFFFFLL, 32, v278, 4);
        if (result) {
          return result;
        }
      }
      int v279 = *(_DWORD *)(*(void *)v13 + 636);
      *(_DWORD *)(*(void *)v13 + 636) = 0;
      *(_DWORD *)(*(void *)v13 + 636) ^= 0x3FFu;
      int v280 = *(_DWORD *)(*(void *)v13 + 636);
      *(_DWORD *)(*(void *)v13 + 636) = v279;
      if (*v229 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 636, *(_DWORD *)(v456 + 72), 0x3FFFFFFFFFFLL, 32, v280, 4);
        if (result) {
          return result;
        }
      }
      int v281 = *(_DWORD *)(*(void *)v13 + 644);
      *(_DWORD *)(*(void *)v13 + 644) = 0;
      *(_DWORD *)(*(void *)v13 + 644) ^= 0x3FFu;
      int v243 = *(_DWORD *)(*(void *)v13 + 644);
      *(_DWORD *)(*(void *)v13 + 644) = v281;
      if (*v229 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
      {
        int v245 = *(_DWORD *)(v456 + 76);
        uint64_t v246 = this;
        int v244 = (void *)(v456 + 8);
        goto LABEL_336;
      }
    }
  }
  else
  {
    int v247 = *(_DWORD *)(v225 + 336);
    *(_DWORD *)(v225 + 336) = 0;
    *(_DWORD *)(*((void *)this + 33) + 336) ^= 0xFFFFFF80;
    uint64_t v248 = *((void *)this + 33);
    int v249 = *(_DWORD *)(v248 + 336);
    *(_DWORD *)(v248 + 336) = v247;
    uint64_t v250 = (void *)((char *)this + 176 * v465 + 528);
    if (*v250 || *((_DWORD *)this + 44 * v465 + 170) || *((_DWORD *)this + 44 * v465 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v465 + 66, 336, 0, 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    int v251 = *(_DWORD *)(*(void *)v13 + 636);
    *(_DWORD *)(*(void *)v13 + 636) = 0;
    *(_DWORD *)(*(void *)v13 + 636) ^= 0x3FFu;
    int v252 = *(_DWORD *)(*(void *)v13 + 636);
    *(_DWORD *)(*(void *)v13 + 636) = v251;
    if (*v250 || *((_DWORD *)this + 44 * v465 + 170) || *((_DWORD *)this + 44 * v465 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v250, 636, 0, 0x3FFFFFFFFFFLL, 32, v252, 4);
      if (result) {
        return result;
      }
    }
    int v253 = *(_DWORD *)(*(void *)v13 + 340);
    *(_DWORD *)(*(void *)v13 + 340) = 0;
    *(_DWORD *)(*(void *)v13 + 340) ^= 0xFFFFFF80;
    int v254 = *(_DWORD *)(*(void *)v13 + 340);
    *(_DWORD *)(*(void *)v13 + 340) = v253;
    uint64_t v255 = (void *)(v456 + 8);
    if (*(void *)(v456 + 8) || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v456 + 8), 340, *(_DWORD *)(v456 + 60), 0xFFFFFFFFLL, 7, v254, 4);
      if (result) {
        return result;
      }
    }
    int v256 = *(_DWORD *)(*(void *)v13 + 640);
    *(_DWORD *)(*(void *)v13 + 640) = 0;
    *(_DWORD *)(*(void *)v13 + 640) ^= 0x3FFu;
    int v257 = *(_DWORD *)(*(void *)v13 + 640);
    *(_DWORD *)(*(void *)v13 + 640) = v256;
    if (*v255 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v255, 640, *(_DWORD *)(v456 + 60), 0x3FFFFFFFFFFLL, 32, v257, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v258 = *((void *)this + 33);
    int v259 = *(_DWORD *)(v258 + 344);
    *(_DWORD *)(v258 + 344) = 0;
    *(_DWORD *)(*((void *)this + 33) + 344) ^= 0xFFFFFF80;
    uint64_t v260 = *((void *)this + 33);
    int v261 = *(_DWORD *)(v260 + 344);
    *(_DWORD *)(v260 + 344) = v259;
    int v262 = (void *)((char *)this + 176 * v465 + 3344);
    if (*v262 || *((_DWORD *)this + 44 * v465 + 874) || *((_DWORD *)this + 44 * v465 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v465 + 418, 344, 0, 0xFFFFFFFFLL, 7, v261, 4);
      if (result) {
        return result;
      }
    }
    int v263 = *(_DWORD *)(*(void *)v157 + 644);
    *(_DWORD *)(*(void *)v157 + 644) = 0;
    *(_DWORD *)(*(void *)v157 + 644) ^= 0x3FFu;
    int v264 = *(_DWORD *)(*(void *)v157 + 644);
    *(_DWORD *)(*(void *)v157 + 644) = v263;
    if (*v262 || *((_DWORD *)this + 44 * v465 + 874) || *((_DWORD *)this + 44 * v465 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v262, 644, 0, 0x3FFFFFFFFFFLL, 32, v264, 4);
      if (result) {
        return result;
      }
    }
    int v265 = *(_DWORD *)(*(void *)v157 + 348);
    *(_DWORD *)(*(void *)v157 + 348) = 0;
    *(_DWORD *)(*(void *)v157 + 348) ^= 0xFFFFFF80;
    int v266 = *(_DWORD *)(*(void *)v157 + 348);
    *(_DWORD *)(*(void *)v157 + 348) = v265;
    if (*v255 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v255, 348, *(_DWORD *)(v456 + 64), 0xFFFFFFFFLL, 7, v266, 4);
      if (result) {
        return result;
      }
    }
    int v267 = *(_DWORD *)(*(void *)v157 + 648);
    *(_DWORD *)(*(void *)v157 + 648) = 0;
    *(_DWORD *)(*(void *)v157 + 648) ^= 0x3FFu;
    int v243 = *(_DWORD *)(*(void *)v157 + 648);
    *(_DWORD *)(*(void *)v157 + 648) = v267;
    if (*v255 || *(_DWORD *)(v456 + 160) || *(_DWORD *)(v456 + 164))
    {
      int v245 = *(_DWORD *)(v456 + 64);
      uint64_t v246 = this;
      int v244 = (void *)(v456 + 8);
      int v268 = 648;
      goto LABEL_337;
    }
  }
  if (*(_DWORD *)(v156 + 88) & 0x2000 | v457)
  {
    *((_DWORD *)this + v465 + 116) = 0;
    *(_DWORD *)(*((void *)this + 33) + 352) = 0;
    if (!v457) {
      goto LABEL_454;
    }
    uint64_t v282 = 0;
    uint64_t v283 = (uint64_t *)v489;
    v471 = (void **)v488;
    v468 = (void **)v487;
    while (1)
    {
      uint64_t v284 = *v283;
      if (!*v283 || !*(void *)(v284 + 48)) {
        return 0xFFFFFFFFLL;
      }
      int v285 = v472;
      if (v472)
      {
        uint64_t v286 = *(unsigned int *)(v284 + 44);
        *(void *)long long buf = 0;
        if (((*(uint64_t (**)(void, uint64_t, uint8_t *))(**((void **)this + 32) + 304))(*((void *)this + 32), v286, buf) & 1) == 0)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          __int16 v476 = 0;
          unsigned int v52 = &_os_log_internal;
          uint64_t v53 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
          int v152 = (uint8_t *)&v476;
          uint32_t v153 = 2;
          goto LABEL_140;
        }
        *(void *)(v284 + 48) = *(void *)buf + 8;
        int v285 = 0x2000000;
      }
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) = *(_DWORD *)(*((void *)this + 33) + v282 + 352) & 0xFFFFFFF | ((v457 << 28) - 0x10000000);
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) &= 0xF3FFFFFF;
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) = *(_DWORD *)(*((void *)this + 33) + v282 + 352) & 0xFDFFFFFF | v285;
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) |= 0x1000000u;
      int v287 = v458 - *(_DWORD *)(v284 + 12);
      int v288 = v287 & 0x1FFFF;
      if (v287 < -32768) {
        int v288 = 98304;
      }
      if (v287 <= 0x8000) {
        int v289 = v288;
      }
      else {
        int v289 = 0x8000;
      }
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) = *(_DWORD *)(*((void *)this + 33) + v282 + 352) & 0xFFFE0000 | v289;
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) = *(_DWORD *)(*((void *)this + 33) + v282 + 352) & 0xFFFDFFFF | ((*(_DWORD *)(v284 + 20) == 2) << 17);
      *(_DWORD *)(*((void *)this + 33) + v282 + 384) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 652) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 416) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 684) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 448) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 716) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 480) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 748) = 0;
      uint64_t v290 = *((void *)this + 33);
      if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
      {
        int v291 = v282 + 416;
        uint64_t v292 = v290 + v282;
        int v293 = *(_DWORD *)(v292 + 416);
        *(_DWORD *)(v292 + 416) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 416) ^= 0xFFFFFF80;
        uint64_t v294 = *(void *)v157 + v282;
        int v295 = *(_DWORD *)(v294 + 416);
        *(_DWORD *)(v294 + 416) = v293;
        uint64_t v296 = *(uint64_t **)(v284 + 48);
        uint64_t v297 = *v296;
        if (v459)
        {
          if (v297 || *((_DWORD *)v296 + 38) || *((_DWORD *)v296 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v296, v291, *((_DWORD *)v296 + 15), 0xFFFFFFFFLL, 7, v295, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v298 = *(void *)v157 + v282;
          int v299 = *(_DWORD *)(v298 + 684);
          *(_DWORD *)(v298 + 684) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 684) ^= 0x3FFu;
          uint64_t v300 = *(void *)v157 + v282;
          int v301 = *(_DWORD *)(v300 + 684);
          *(_DWORD *)(v300 + 684) = v299;
          uint64_t v302 = *(void *)(v284 + 48);
          if (*(void *)v302 || *(_DWORD *)(v302 + 152) || *(_DWORD *)(v302 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v302, (int)v282 + 684, *(_DWORD *)(v302 + 60), 0x3FFFFFFFFFFLL, 32, v301, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v303 = *(void *)v157 + v282;
          int v304 = *(_DWORD *)(v303 + 384);
          *(_DWORD *)(v303 + 384) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 384) ^= 0xFFFFFF80;
          uint64_t v305 = *(void *)v157 + v282;
          int v306 = *(_DWORD *)(v305 + 384);
          *(_DWORD *)(v305 + 384) = v304;
          uint64_t v307 = *(void *)(v284 + 48);
          if (*(void *)v307 || *(_DWORD *)(v307 + 152) || *(_DWORD *)(v307 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v307, (int)v282 + 384, *(_DWORD *)(v307 + 72), 0xFFFFFFFFLL, 7, v306, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v308 = *(void *)v157 + v282;
          int v309 = *(_DWORD *)(v308 + 652);
          *(_DWORD *)(v308 + 652) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 652) ^= 0x3FFu;
          uint64_t v310 = *(void *)v157 + v282;
          int v311 = *(_DWORD *)(v310 + 652);
          *(_DWORD *)(v310 + 652) = v309;
          uint64_t v312 = *(void *)(v284 + 48);
          if (*(void *)v312 || *(_DWORD *)(v312 + 152) || *(_DWORD *)(v312 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v312, (int)v282 + 652, *(_DWORD *)(v312 + 72), 0x3FFFFFFFFFFLL, 32, v311, 4);
            if (result) {
              return result;
            }
          }
          if (v463)
          {
            uint64_t v313 = *(void *)v157 + v282;
            int v314 = *(_DWORD *)(v313 + 480);
            *(_DWORD *)(v313 + 480) = 0;
            *(_DWORD *)(*(void *)v157 + v282 + 480) ^= 0xFFFFFF80;
            uint64_t v315 = *(void *)v157 + v282;
            int v316 = *(_DWORD *)(v315 + 480);
            *(_DWORD *)(v315 + 480) = v314;
            if (*(void *)v462 || *(_DWORD *)(v462 + 152) || *(_DWORD *)(v462 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v462, (int)v282 + 480, *(_DWORD *)(v462 + 56), 0xFFFFFFFFLL, 7, v316, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v317 = *(void *)v157 + v282;
            int v318 = *(_DWORD *)(v317 + 748);
            *(_DWORD *)(v317 + 748) = 0;
            *(_DWORD *)(*(void *)v157 + v282 + 748) ^= 0x3FFu;
            uint64_t v319 = *(void *)v157 + v282;
            int v320 = *(_DWORD *)(v319 + 748);
            *(_DWORD *)(v319 + 748) = v318;
            if (*(void *)v462 || *(_DWORD *)(v462 + 152) || *(_DWORD *)(v462 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v462, (int)v282 + 748, *(_DWORD *)(v462 + 56), 0x3FFFFFFFFFFLL, 32, v320, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v321 = *(void *)v157 + v282;
            int v322 = *(_DWORD *)(v321 + 448);
            *(_DWORD *)(v321 + 448) = 0;
            *(_DWORD *)(*(void *)v157 + v282 + 448) ^= 0xFFFFFF80;
            uint64_t v323 = *(void *)v157 + v282;
            int v324 = *(_DWORD *)(v323 + 448);
            *(_DWORD *)(v323 + 448) = v322;
            if (*(void *)v462 || *(_DWORD *)(v462 + 152) || *(_DWORD *)(v462 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v462, (int)v282 + 448, *(_DWORD *)(v462 + 68), 0xFFFFFFFFLL, 7, v324, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v325 = *(void *)v157 + v282;
            int v326 = *(_DWORD *)(v325 + 716);
            *(_DWORD *)(v325 + 716) = 0;
            *(_DWORD *)(*(void *)v157 + v282 + 716) ^= 0x3FFu;
            uint64_t v327 = *(void *)v157 + v282;
            int v328 = *(_DWORD *)(v327 + 716);
            *(_DWORD *)(v327 + 716) = v326;
            if (*(void *)v462 || *(_DWORD *)(v462 + 152) || *(_DWORD *)(v462 + 156))
            {
              int v329 = v282 + 716;
              uint64_t v330 = v462;
LABEL_451:
              int v367 = *(_DWORD *)(v330 + 68);
LABEL_452:
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v330, v329, v367, 0x3FFFFFFFFFFLL, 32, v328, 4);
              if (result) {
                return result;
              }
            }
          }
        }
        else
        {
          if (v297 || *((_DWORD *)v296 + 38) || *((_DWORD *)v296 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v296, v291, *((_DWORD *)v296 + 13), 0xFFFFFFFFLL, 7, v295, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v368 = *(void *)v157 + v282;
          int v369 = *(_DWORD *)(v368 + 480);
          *(_DWORD *)(v368 + 480) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 480) ^= 0xFFFFFF80;
          uint64_t v370 = *(void *)v157 + v282;
          int v371 = *(_DWORD *)(v370 + 480);
          *(_DWORD *)(v370 + 480) = v369;
          uint64_t v372 = *(void *)(v284 + 48);
          if (*(void *)v372 || *(_DWORD *)(v372 + 152) || *(_DWORD *)(v372 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v372, (int)v282 + 480, *(_DWORD *)(v372 + 56), 0xFFFFFFFFLL, 7, v371, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v373 = *(void *)v157 + v282;
          int v374 = *(_DWORD *)(v373 + 384);
          *(_DWORD *)(v373 + 384) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 384) ^= 0xFFFFFF80;
          uint64_t v375 = *(void *)v157 + v282;
          int v376 = *(_DWORD *)(v375 + 384);
          *(_DWORD *)(v375 + 384) = v374;
          uint64_t v377 = *(void *)(v284 + 48);
          if (*(void *)v377 || *(_DWORD *)(v377 + 152) || *(_DWORD *)(v377 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v377, (int)v282 + 384, *(_DWORD *)(v377 + 64), 0xFFFFFFFFLL, 7, v376, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v378 = *(void *)v157 + v282;
          int v379 = *(_DWORD *)(v378 + 448);
          *(_DWORD *)(v378 + 448) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 448) ^= 0xFFFFFF80;
          uint64_t v380 = *(void *)v157 + v282;
          int v381 = *(_DWORD *)(v380 + 448);
          *(_DWORD *)(v380 + 448) = v379;
          uint64_t v382 = *(void *)(v284 + 48);
          if (*(void *)v382 || *(_DWORD *)(v382 + 152) || *(_DWORD *)(v382 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v382, (int)v282 + 448, *(_DWORD *)(v382 + 68), 0xFFFFFFFFLL, 7, v381, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v383 = *(void *)v157 + v282;
          int v384 = *(_DWORD *)(v383 + 684);
          *(_DWORD *)(v383 + 684) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 684) ^= 0x3FFu;
          uint64_t v385 = *(void *)v157 + v282;
          int v386 = *(_DWORD *)(v385 + 684);
          *(_DWORD *)(v385 + 684) = v384;
          uint64_t v387 = *(void *)(v284 + 48);
          if (*(void *)v387 || *(_DWORD *)(v387 + 152) || *(_DWORD *)(v387 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v387, (int)v282 + 684, *(_DWORD *)(v387 + 52), 0x3FFFFFFFFFFLL, 32, v386, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v388 = *(void *)v157 + v282;
          int v389 = *(_DWORD *)(v388 + 748);
          *(_DWORD *)(v388 + 748) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 748) ^= 0x3FFu;
          uint64_t v390 = *(void *)v157 + v282;
          int v391 = *(_DWORD *)(v390 + 748);
          *(_DWORD *)(v390 + 748) = v389;
          uint64_t v392 = *(void *)(v284 + 48);
          if (*(void *)v392 || *(_DWORD *)(v392 + 152) || *(_DWORD *)(v392 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v392, (int)v282 + 748, *(_DWORD *)(v392 + 56), 0x3FFFFFFFFFFLL, 32, v391, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v393 = *(void *)v157 + v282;
          int v394 = *(_DWORD *)(v393 + 652);
          *(_DWORD *)(v393 + 652) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 652) ^= 0x3FFu;
          uint64_t v395 = *(void *)v157 + v282;
          int v396 = *(_DWORD *)(v395 + 652);
          *(_DWORD *)(v395 + 652) = v394;
          uint64_t v397 = *(void *)(v284 + 48);
          if (*(void *)v397 || *(_DWORD *)(v397 + 152) || *(_DWORD *)(v397 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v397, (int)v282 + 652, *(_DWORD *)(v397 + 64), 0x3FFFFFFFFFFLL, 32, v396, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v398 = *(void *)v157 + v282;
          int v399 = *(_DWORD *)(v398 + 716);
          *(_DWORD *)(v398 + 716) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 716) ^= 0x3FFu;
          uint64_t v400 = *(void *)v157 + v282;
          int v328 = *(_DWORD *)(v400 + 716);
          *(_DWORD *)(v400 + 716) = v399;
          uint64_t v330 = *(void *)(v284 + 48);
          if (*(void *)v330 || *(_DWORD *)(v330 + 152) || *(_DWORD *)(v330 + 156))
          {
            int v329 = v282 + 716;
            goto LABEL_451;
          }
        }
      }
      else
      {
        uint64_t v331 = v290 + v282;
        int v332 = *(_DWORD *)(v331 + 384);
        *(_DWORD *)(v331 + 384) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 384) ^= 0xFFFFFF80;
        uint64_t v333 = *(void *)v157 + v282;
        int v334 = *(_DWORD *)(v333 + 384);
        *(_DWORD *)(v333 + 384) = v332;
        uint64_t v335 = (uint64_t)*v471;
        if (**v471 || *(_DWORD *)(v335 + 152) || *(_DWORD *)(v335 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v471, (int)v282 + 384, 0, 0xFFFFFFFFLL, 7, v334, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v336 = *(void *)v157 + v282;
        int v337 = *(_DWORD *)(v336 + 652);
        *(_DWORD *)(v336 + 652) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 652) ^= 0x3FFu;
        uint64_t v338 = *(void *)v157 + v282;
        int v339 = *(_DWORD *)(v338 + 652);
        *(_DWORD *)(v338 + 652) = v337;
        if (*(void *)v335 || *(_DWORD *)(v335 + 152) || *(_DWORD *)(v335 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v335, (int)v282 + 652, 0, 0x3FFFFFFFFFFLL, 32, v339, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v340 = *(void *)v157 + v282;
        int v341 = *(_DWORD *)(v340 + 416);
        *(_DWORD *)(v340 + 416) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 416) ^= 0xFFFFFF80;
        uint64_t v342 = *(void *)v157 + v282;
        int v343 = *(_DWORD *)(v342 + 416);
        *(_DWORD *)(v342 + 416) = v341;
        uint64_t v344 = *(void *)(v284 + 48);
        if (*(void *)v344 || *(_DWORD *)(v344 + 152) || *(_DWORD *)(v344 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v344, (int)v282 + 416, *(_DWORD *)(v344 + 52), 0xFFFFFFFFLL, 7, v343, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v345 = *(void *)v157 + v282;
        int v346 = *(_DWORD *)(v345 + 684);
        *(_DWORD *)(v345 + 684) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 684) ^= 0x3FFu;
        uint64_t v347 = *(void *)v157 + v282;
        int v348 = *(_DWORD *)(v347 + 684);
        *(_DWORD *)(v347 + 684) = v346;
        uint64_t v349 = *(void *)(v284 + 48);
        if (*(void *)v349 || *(_DWORD *)(v349 + 152) || *(_DWORD *)(v349 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v349, (int)v282 + 684, *(_DWORD *)(v349 + 52), 0x3FFFFFFFFFFLL, 32, v348, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v350 = *(void *)v157 + v282;
        int v351 = *(_DWORD *)(v350 + 448);
        *(_DWORD *)(v350 + 448) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 448) ^= 0xFFFFFF80;
        uint64_t v352 = *(void *)v157 + v282;
        int v353 = *(_DWORD *)(v352 + 448);
        *(_DWORD *)(v352 + 448) = v351;
        uint64_t v354 = (uint64_t)*v468;
        if (**v468 || *(_DWORD *)(v354 + 152) || *(_DWORD *)(v354 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v468, (int)v282 + 448, 0, 0xFFFFFFFFLL, 7, v353, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v355 = *(void *)v157 + v282;
        int v356 = *(_DWORD *)(v355 + 716);
        *(_DWORD *)(v355 + 716) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 716) ^= 0x3FFu;
        uint64_t v357 = *(void *)v157 + v282;
        int v358 = *(_DWORD *)(v357 + 716);
        *(_DWORD *)(v357 + 716) = v356;
        if (*(void *)v354 || *(_DWORD *)(v354 + 152) || *(_DWORD *)(v354 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v354, (int)v282 + 716, 0, 0x3FFFFFFFFFFLL, 32, v358, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v359 = *(void *)v157 + v282;
        int v360 = *(_DWORD *)(v359 + 480);
        *(_DWORD *)(v359 + 480) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 480) ^= 0xFFFFFF80;
        uint64_t v361 = *(void *)v157 + v282;
        int v362 = *(_DWORD *)(v361 + 480);
        *(_DWORD *)(v361 + 480) = v360;
        uint64_t v363 = *(void *)(v284 + 48);
        if (*(void *)v363 || *(_DWORD *)(v363 + 152) || *(_DWORD *)(v363 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v363, (int)v282 + 480, *(_DWORD *)(v363 + 56), 0xFFFFFFFFLL, 7, v362, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v364 = *(void *)v157 + v282;
        int v365 = *(_DWORD *)(v364 + 748);
        *(_DWORD *)(v364 + 748) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 748) ^= 0x3FFu;
        uint64_t v366 = *(void *)v157 + v282;
        int v328 = *(_DWORD *)(v366 + 748);
        *(_DWORD *)(v366 + 748) = v365;
        uint64_t v330 = *(void *)(v284 + 48);
        if (*(void *)v330 || *(_DWORD *)(v330 + 152) || *(_DWORD *)(v330 + 156))
        {
          int v329 = v282 + 748;
          int v367 = *(_DWORD *)(v330 + 56);
          goto LABEL_452;
        }
      }
      v282 += 4;
      ++v283;
      ++v471;
      ++v468;
      if (4 * v457 == v282) {
        goto LABEL_454;
      }
    }
  }
  *(_DWORD *)(v156 + 88) |= 0x2000u;
  *((_DWORD *)this + v465 + 116) = 1;
  *(_DWORD *)(*((void *)this + 33) + 352) = 0;
LABEL_454:
  *(_DWORD *)(*(void *)v157 + 512) = 0;
  *(_DWORD *)(*(void *)v157 + 516) = 0;
  *(_DWORD *)(*(void *)v157 + 520) = 0;
  *(_DWORD *)(*(void *)v157 + 524) = 0;
  if (!v473) {
    goto LABEL_512;
  }
  uint64_t v401 = *((void *)this + 32);
  if (v460 && v461 == 2)
  {
    int v402 = *(_DWORD *)(*(void *)(v401 + 8360) + 60);
    uint64_t v403 = *((void *)this + 33);
    int v404 = *(_DWORD *)(v403 + 512);
    *(_DWORD *)(v403 + 512) = 0;
    *(_DWORD *)(*((void *)this + 33) + 512) ^= 0xFFFFFFC0;
    uint64_t v405 = *((void *)this + 33);
    int v406 = *(_DWORD *)(v405 + 512);
    *(_DWORD *)(v405 + 512) = v404;
    uint64_t v407 = *(void *)(*((void *)this + 32) + 8360);
    if (*(void *)v407 || *(_DWORD *)(v407 + 152) || *(_DWORD *)(v407 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v407, 512, v402, 0xFFFFFFFFLL, 6, v406, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v408 = *((void *)this + 33);
    int v409 = *(_DWORD *)(v408 + 780);
    *(_DWORD *)(v408 + 780) = 0;
    *(_DWORD *)(*((void *)this + 33) + 780) ^= 0x3FFu;
    uint64_t v410 = *((void *)this + 33);
    int v411 = *(_DWORD *)(v410 + 780);
    *(_DWORD *)(v410 + 780) = v409;
    uint64_t v412 = *(void *)(*((void *)this + 32) + 8360);
    if (*(void *)v412 || *(_DWORD *)(v412 + 152) || *(_DWORD *)(v412 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v412, 780, v402, 0x3FFFFFFFFFFLL, 32, v411, 4);
      if (result) {
        return result;
      }
    }
    if (v463)
    {
      int v413 = *(_DWORD *)(v462 + 56);
      int v414 = *(_DWORD *)(*(void *)v157 + 516);
      *(_DWORD *)(*(void *)v157 + 516) = 0;
      *(_DWORD *)(*(void *)v157 + 516) ^= 0xFFFFFFC0;
      int v415 = *(_DWORD *)(*(void *)v157 + 516);
      *(_DWORD *)(*(void *)v157 + 516) = v414;
      if (*(void *)v462 || *(_DWORD *)(v462 + 152) || *(_DWORD *)(v462 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v462, 516, v413, 0xFFFFFFFFLL, 6, v415, 4);
        if (result) {
          return result;
        }
      }
      int v416 = *(_DWORD *)(*(void *)v157 + 784);
      *(_DWORD *)(*(void *)v157 + 784) = 0;
      *(_DWORD *)(*(void *)v157 + 784) ^= 0x3FFu;
      int v417 = *(_DWORD *)(*(void *)v157 + 784);
      *(_DWORD *)(*(void *)v157 + 784) = v416;
      if (*(void *)v462 || *(_DWORD *)(v462 + 152) || *(_DWORD *)(v462 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v462, 784, v413, 0x3FFFFFFFFFFLL, 32, v417, 4);
        if (result) {
          return result;
        }
      }
    }
    if (!v464)
    {
      if (CAHDecDaisyHevc::getSWRStride(this, *(unsigned __int16 *)(v156 + 160) - *(unsigned __int16 *)(v156 + 156) + 1, *(_DWORD *)(v475 + 23176 * v131 + 3636), *(_DWORD *)(v475 + 23176 * v131 + 3640), *(_DWORD *)(v475 + 23176 * v131 + 22852)))return 0xFFFFFFFFLL; {
      *(_DWORD *)(*((void *)this + 33) + 520) = *(_DWORD *)(*((void *)this + 33) + 520) & 0xFFFC003F | (((*((_DWORD *)this + 3352) >> 6) & 0xFFF) << 6);
      }
      if (!v463) {
        goto LABEL_512;
      }
      int v446 = (_DWORD *)((char *)this + 13412);
      goto LABEL_511;
    }
    *(_DWORD *)(*((void *)this + 33) + 520) = *(_DWORD *)(*((void *)this + 33) + 520) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 84) >> 6) & 0xFFF) << 6);
    if (v463)
    {
      uint64_t v418 = v462;
      goto LABEL_510;
    }
LABEL_512:
    uint64_t v447 = *((void *)this + 32);
    if (*(_DWORD *)(v447 + 2360) != 1) {
      return 0;
    }
    uint64_t v448 = *(void *)v157;
    *(_DWORD *)(*(void *)v157 + 884) = *(_DWORD *)(*(void *)v157 + 884) & 0xFFFFFFFE | *(_DWORD *)(v447 + 2508) & 1;
    if (*(_DWORD *)(v447 + 2508))
    {
      *(_DWORD *)(v448 + 2884) = 0x10000000;
      *(_DWORD *)(v448 + 2888) = *(_DWORD *)(v447 + 2368);
      *(void *)(v448 + 2896) = 0;
      *(_DWORD *)(v448 + 2892) = 0;
      *(_OWORD *)(v448 + 2904) = *(_OWORD *)(v447 + 2372);
      long long v449 = *(_OWORD *)(v447 + 2388);
      *(_OWORD *)(v448 + 2936) = *(_OWORD *)(v447 + 2404);
      *(_OWORD *)(v448 + 2920) = v449;
    }
    *(_DWORD *)(*(void *)v157 + 884) = *(_DWORD *)(*(void *)v157 + 884) & 0xFFFFFFFD | (2
                                                                                              * (*(_DWORD *)(v447 + 2512) & 1));
    if (*(_DWORD *)(v447 + 2512))
    {
      *(_DWORD *)(v448 + 2952) = 0;
      char v450 = *(_DWORD *)(v447 + 2424);
      *(_DWORD *)(v448 + 2952) = (*(_DWORD *)(v447 + 2424) & 1) << 22;
      int v451 = ((*(_DWORD *)(v447 + 2420) & 1) << 23) | ((v450 & 1) << 22) | 0x20000000;
      *(_DWORD *)(v448 + 2952) = v451;
      *(_DWORD *)(v448 + 2952) = v451 | (*(_DWORD *)(v447 + 2364) == 0);
      long long v452 = *(_OWORD *)(v447 + 2428);
      long long v453 = *(_OWORD *)(v447 + 2444);
      *(_OWORD *)(v448 + 2988) = *(_OWORD *)(v447 + 2460);
      *(_OWORD *)(v448 + 2972) = v453;
      *(_OWORD *)(v448 + 2956) = v452;
    }
    *(_DWORD *)(*(void *)v157 + 884) = *(_DWORD *)(*(void *)v157 + 884) & 0xFFFFFFFB | (4
                                                                                              * (*(_DWORD *)(v447 + 2516) & 1));
    *(_DWORD *)(*(void *)v157 + 884) = *(_DWORD *)(*(void *)v157 + 884) & 0xFFFFFFF7 | (8
                                                                                              * (*(_DWORD *)(v447 + 2520) & 1));
    *(_DWORD *)(*(void *)v157 + 884) = *(_DWORD *)(*(void *)v157 + 884) & 0xFFFFFFEF | (16
                                                                                              * (*(_DWORD *)(v447 + 2524) & 1));
    if (!*(_DWORD *)(v447 + 2516)) {
      return 0;
    }
    *(_DWORD *)(v448 + 3008) = 0;
    if (*(_DWORD *)(v447 + 2476) == 2) {
      int v454 = 805306368;
    }
    else {
      int v454 = 813694976;
    }
    *(_DWORD *)(v448 + 3008) = v454;
    memcpy((void *)(v448 + 3012), (const void *)(v447 + 2480), 4 * *(unsigned int *)(v447 + 2476));
    uint64_t result = 0;
    *(_DWORD *)(v447 + 2516) = 0;
    return result;
  }
  unsigned int v419 = *(unsigned __int8 *)(v401 + 3004);
  if (*(unsigned char *)(v401 + 3004))
  {
    unsigned int v419 = *(_DWORD *)(v401 + 3016);
    unsigned int v474 = *(_DWORD *)(v401 + 3020);
  }
  else
  {
    unsigned int v474 = 0;
  }
  uint64_t v420 = *(void *)(v401 + 8360);
  uint64_t v421 = *(unsigned int *)(v420 + 56);
  unint64_t v422 = *(unsigned int *)(v420 + 52) + (unint64_t)v419;
  uint64_t v423 = *((void *)this + 33);
  int v424 = *(_DWORD *)(v423 + 512);
  *(_DWORD *)(v423 + 512) = 0;
  *(_DWORD *)(*((void *)this + 33) + 512) ^= 0xFFFFFFC0;
  uint64_t v425 = *((void *)this + 33);
  int v426 = *(_DWORD *)(v425 + 512);
  *(_DWORD *)(v425 + 512) = v424;
  uint64_t v427 = *(void *)(*((void *)this + 32) + 8360);
  unint64_t v428 = HIDWORD(v422);
  if (!*(void *)v427 && !*(_DWORD *)(v427 + 152) && !*(_DWORD *)(v427 + 156)) {
    goto LABEL_532;
  }
  if (v428 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "populatePictureRegisters";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1288;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v427, 512, v422, 0xFFFFFFFFLL, 6, v426, 4);
  if (!result)
  {
LABEL_532:
    uint64_t v429 = *((void *)this + 33);
    int v430 = *(_DWORD *)(v429 + 780);
    *(_DWORD *)(v429 + 780) = 0;
    *(_DWORD *)(*((void *)this + 33) + 780) ^= 0x3FFu;
    uint64_t v431 = *((void *)this + 33);
    int v432 = *(_DWORD *)(v431 + 780);
    *(_DWORD *)(v431 + 780) = v430;
    uint64_t v433 = *(void *)(*((void *)this + 32) + 8360);
    if (!*(void *)v433 && !*(_DWORD *)(v433 + 152) && !*(_DWORD *)(v433 + 156)) {
      goto LABEL_533;
    }
    if (v428 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1290;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v433, 780, v422, 0x3FFFFFFFFFFLL, 32, v432, 4);
    if (!result)
    {
LABEL_533:
      unint64_t v434 = v421 + v474;
      uint64_t v435 = *((void *)this + 33);
      int v436 = *(_DWORD *)(v435 + 516);
      *(_DWORD *)(v435 + 516) = 0;
      *(_DWORD *)(*((void *)this + 33) + 516) ^= 0xFFFFFFC0;
      uint64_t v437 = *((void *)this + 33);
      int v438 = *(_DWORD *)(v437 + 516);
      *(_DWORD *)(v437 + 516) = v436;
      uint64_t v439 = *(void *)(*((void *)this + 32) + 8360);
      unint64_t v440 = HIDWORD(v434);
      if (!*(void *)v439 && !*(_DWORD *)(v439 + 152) && !*(_DWORD *)(v439 + 156)) {
        goto LABEL_534;
      }
      if (v440 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1293;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 516, v434, 0xFFFFFFFFLL, 6, v438, 4);
      if (!result)
      {
LABEL_534:
        uint64_t v441 = *((void *)this + 33);
        int v442 = *(_DWORD *)(v441 + 784);
        *(_DWORD *)(v441 + 784) = 0;
        *(_DWORD *)(*((void *)this + 33) + 784) ^= 0x3FFu;
        uint64_t v443 = *((void *)this + 33);
        int v444 = *(_DWORD *)(v443 + 784);
        *(_DWORD *)(v443 + 784) = v442;
        uint64_t v445 = *(void *)(*((void *)this + 32) + 8360);
        if (!*(void *)v445 && !*(_DWORD *)(v445 + 152) && !*(_DWORD *)(v445 + 156)) {
          goto LABEL_508;
        }
        if (v440 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "populatePictureRegisters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1295;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v445, 784, v434, 0x3FFFFFFFFFFLL, 32, v444, 4);
        if (!result)
        {
LABEL_508:
          if (!v464)
          {
            if (CAHDecDaisyHevc::getSWRStride(this, *(unsigned __int16 *)(v156 + 160) - *(unsigned __int16 *)(v156 + 156) + 1, *(_DWORD *)(v475 + 23176 * v131 + 3636), *(_DWORD *)(v475 + 23176 * v131 + 3640), *(_DWORD *)(v475 + 23176 * v131 + 22852)))return 0xFFFFFFFFLL; {
            *(_DWORD *)(*((void *)this + 33) + 520) = *(_DWORD *)(*((void *)this + 33) + 520) & 0xFFFC003F | (((*((_DWORD *)this + 3352) >> 6) & 0xFFF) << 6);
            }
            int v446 = (_DWORD *)((char *)this + 13412);
            goto LABEL_511;
          }
          *(_DWORD *)(*((void *)this + 33) + 520) = *(_DWORD *)(*((void *)this + 33) + 520) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 76) >> 6) & 0xFFF) << 6);
          uint64_t v418 = *(void *)(*((void *)this + 32) + 8360);
LABEL_510:
          int v446 = (_DWORD *)(v418 + 80);
LABEL_511:
          *(_DWORD *)(*(void *)v157 + 524) = *(_DWORD *)(*(void *)v157 + 524) & 0xFFF8003F | (((*v446 >> 6) & 0x1FFF) << 6);
          goto LABEL_512;
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecDaisyHevc::getSWRStride(CAHDecDaisyHevc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1676) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 3352) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 3352) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 3352) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 3352) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3353) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecDaisyHevc::getTileStartCTU(CAHDecDaisyHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 788);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecDaisyHevc::getTileEndCTU(CAHDecDaisyHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 788);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecDaisyHevc::getTileIdxAbove(CAHDecDaisyHevc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 788);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecDaisyHevc::populateAvdWork(CAHDecDaisyHevc *this, unsigned int a2)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 32);
  uint64_t v5 = *((void *)this + 33);
  int v6 = *(_DWORD *)(v4 + 8320);
  int v7 = *(_DWORD *)(v4 + 8324);
  uint64_t v8 = *(void *)(v4 + 8280);
  uint64_t v9 = *(void *)(v4 + 8288);
  uint64_t v109 = *(void *)(v4 + 8296);
  unsigned int v10 = *(_DWORD *)(v4 + 9036);
  unsigned int v11 = *(_DWORD *)(v4 + 3068);
  int v12 = *(_DWORD *)(v4 + 3072);
  memset(v146, 0, sizeof(v146));
  v145[0] = 0;
  v145[1] = 0;
  unsigned int v13 = v10 >> 28;
  uint64_t v14 = v8 + 23176 * v6;
  unsigned int v15 = *(_DWORD *)(v14 + 22888);
  if (v10)
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v16 = v15 > v13 + 1;
    }
    else {
      BOOL v16 = 0;
    }
    BOOL v17 = v16 && v12 == 0;
    int v18 = v17;
    int v134 = v18;
  }
  else
  {
    int v134 = 0;
  }
  unsigned int v126 = *(unsigned __int16 *)(v5 + 790) * *(unsigned __int16 *)(v5 + 788);
  if ((v10 & 2) != 0 && *(unsigned char *)(v9 + 9856 * v7 + 52))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v126 > v13 + 1;
    }
    int v21 = v19 && v12 == 0;
    int v137 = v21;
  }
  else
  {
    int v137 = 0;
  }
  uint64_t v115 = (unsigned int *)(v14 + 22880);
  if ((v10 & 0x20) != 0 && !*(unsigned char *)(v9 + 9856 * v7 + 53))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 52)) {
      BOOL v83 = 0;
    }
    else {
      BOOL v83 = v11 > v13 + 1;
    }
    int v85 = v83 && v12 == 0;
    int v129 = v85;
  }
  else
  {
    int v129 = 0;
  }
  unsigned int v22 = 0;
  unsigned int v139 = *v115;
  unsigned int v23 = v13 + 2;
  BOOL v17 = (v10 & 4) == 0;
  int v24 = v134;
  if (v17) {
    int v24 = 1;
  }
  if (((v24 | v137) & 1) == 0 && (v129 & 1) == 0) {
    unsigned int v22 = *(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & (v13 + 1);
  }
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  memset_pattern16(__b, &unk_223AD0630, 0x10uLL);
  uint64_t v25 = v5 + 223828;
  unsigned int v103 = v134 | v137 | v129;
  if (v103) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = 1;
  }
  unint64_t v27 = v22 + v26;
  uint64_t v120 = v26;
  unsigned int v105 = 0x1000 / v26;
  uint64_t v28 = 48 * (0x1000 / v26);
  uint64_t v29 = v22;
  unint64_t v30 = v22;
  do
  {
    *((void *)v146 + v30) = v25 + (v30 - v22) * v28;
    ++v30;
  }
  while (v30 < v27);
  uint64_t v102 = v28;
  unint64_t v106 = v27;
  uint64_t v31 = *((void *)v146 + v22);
  uint64_t v123 = v5 + 223828;
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v25) >> 4);
  unint64_t v104 = v22;
  if (!a2)
  {
    uint64_t v95 = 0;
    int v96 = 0;
    HIDWORD(v140) = 0;
    unsigned int v43 = v22;
    goto LABEL_165;
  }
  uint64_t v138 = 0;
  unsigned int v117 = 0;
  int v113 = 0;
  int v121 = 0;
  int v132 = 0;
  int v136 = 0;
  unsigned int v33 = v22;
  unsigned int v34 = v15;
  int v35 = 0;
  uint64_t v140 = 0;
  int v130 = 0;
  unsigned int v36 = a2;
  uint64_t v37 = 0;
  int v135 = 0;
  uint64_t v38 = v9 + 9856 * v7;
  uint64_t v39 = (unsigned char *)(v38 + 52);
  int v118 = (unsigned char *)(v38 + 53);
  int v40 = v134;
  if (v134) {
    int v41 = 12;
  }
  else {
    int v41 = 4;
  }
  int v116 = v41;
  unsigned int v122 = v36 - 1;
  unsigned int v111 = v34 - 1;
  unsigned int v112 = v34;
  unsigned int v110 = v34 - 2;
  unsigned int v42 = v120;
  int v108 = &__b[v29];
  unsigned int v101 = v36;
  uint64_t v107 = v36;
  uint64_t v124 = v5 + 3376;
  unsigned int v100 = v33;
  unsigned int v43 = v33;
  uint64_t v128 = v39;
  do
  {
    if (*v39) {
      int v44 = 1;
    }
    else {
      int v44 = v40;
    }
    if (v44 != 1)
    {
      unsigned int v47 = 1;
LABEL_54:
      uint64_t v48 = 0;
      int v114 = 0;
      uint64_t v49 = v109 + 2360 * v138;
      int v119 = (void *)(v49 + 1904);
      int v125 = (int *)(v49 + 36);
      int v127 = (unsigned char *)(v49 + 32);
      uint64_t v133 = v47;
      while (1)
      {
        if (!(v48 | v138))
        {
          *(_WORD *)(v31 + 4) = 0;
          *(_WORD *)(v31 + 6) = v43;
          *(_DWORD *)(v31 + 8) = 0;
          *(_WORD *)(v31 + 12) = 0;
          int v130 = *(_DWORD *)(v124 + 368 * v138);
          if (!(*(unsigned int (**)(void))(**((void **)this + 32) + 448))()) {
            return 0xFFFFFFFFLL;
          }
          int v54 = *v125;
          *(_DWORD *)(v31 + 32) = *v125;
          *(_DWORD *)(v31 + 36) = v54;
          HIDWORD(v140) = 0;
          *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecDaisyHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v139);
          __int16 v55 = 271;
          goto LABEL_159;
        }
        if (v48)
        {
          int v50 = *(_DWORD *)(*v119 + 4 * v48 - 4) + 1;
          if (*v128)
          {
            if (*v118)
            {
              unsigned int v51 = *v115;
              unsigned int v52 = (v51 + v140) / v51;
              v50 += v114;
              if (v52 >= *(unsigned __int16 *)(*((void *)this + 33) + 2 * (v121 + 1) + 834))
              {
                LODWORD(v140) = (*(uint64_t (**)(CAHDecDaisyHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v139);
                int v114 = 0;
                int v35 = v116;
              }
              else
              {
                LODWORD(v140) = v113 + v52 * v51;
                if (!v134)
                {
                  int v114 = v50;
                  int v40 = 0;
                  goto LABEL_160;
                }
                int v114 = 0;
                int v53 = __b[v43];
                __b[v43] = 0;
                if (v53) {
                  int v35 = 72;
                }
                else {
                  int v35 = 8;
                }
              }
            }
            else
            {
              LODWORD(v140) = (*(uint64_t (**)(CAHDecDaisyHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v139);
              int v35 = 4;
            }
          }
          else if (v134)
          {
            LODWORD(v140) = (*v115 + v140) / *v115 * *v115;
            int v35 = 8;
          }
          int v62 = 48 * v32;
          uint64_t v63 = v142;
          if (*(void *)v142 || *(_DWORD *)(v142 + 152) || *(_DWORD *)(v142 + 156))
          {
            int v64 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1922;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v64 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223850, HIDWORD(v140) + v64, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v63 = v142;
            if (*(void *)v142) {
              goto LABEL_103;
            }
          }
          if (*(_DWORD *)(v63 + 152) || *(_DWORD *)(v63 + 156))
          {
LABEL_103:
            int v65 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1923;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v65 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223852, HIDWORD(v140) + v65, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v50;
          HIDWORD(v140) += v50;
          unsigned int v42 = v120;
          int v40 = v134;
        }
        else
        {
          int v56 = 48 * v32;
          uint64_t v57 = v142;
          if (*(void *)v142 || *(_DWORD *)(v142 + 152) || *(_DWORD *)(v142 + 156))
          {
            int v58 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1846;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v58 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223850, HIDWORD(v140) + v58, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v57 = v142;
            if (*(void *)v142) {
              goto LABEL_76;
            }
          }
          if (*(_DWORD *)(v57 + 152) || *(_DWORD *)(v57 + 156))
          {
LABEL_76:
            int v60 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1847;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v60 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223852, HIDWORD(v140) + v60, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v130 - HIDWORD(v140);
          int v61 = *(_DWORD *)(v124 + 368 * v138);
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t *))(**((void **)this + 32) + 448))(*((void *)this + 32), v138, &v142, &v141))return 0xFFFFFFFFLL; {
          int v130 = v61;
          }
          if (*v127) {
            int v35 = 2;
          }
          else {
            int v35 = 258;
          }
          int v40 = v134;
          LODWORD(v140) = *v125;
          if (v134 && *v125 % v139 == v113)
          {
            HIDWORD(v140) = 0;
            if (__b[v43])
            {
              v35 |= 0x48u;
              __b[v43] = 0;
            }
            else
            {
              v35 |= 8u;
            }
          }
          else
          {
            HIDWORD(v140) = 0;
          }
        }
        unsigned int v66 = v37 + 1;
        if ((int)v37 + 1 < v126)
        {
          int v67 = (*(uint64_t (**)(CAHDecDaisyHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v139);
          int v68 = v116;
          if (v140 != v67) {
            int v68 = 0;
          }
          v35 |= v68;
        }
        *(_WORD *)(v31 + 16) = v35;
        if (v135 == v122) {
          *(_WORD *)(v31 + 18) |= 2u;
        }
        if (v37 == v126 - 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        int v69 = v137;
        if (v37 != v126 - 2) {
          int v69 = 0;
        }
        if (v69 == 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        if (v40
          && ((v70 = *(unsigned __int16 *)(v31 + 10), v112 > 1) ? (BOOL v71 = v110 == v70) : (BOOL v71 = 0),
              !v71 ? (int v72 = 0) : (int v72 = 1),
              v111 == v70 || v72))
        {
          *(_WORD *)(v31 + 18) |= 8u;
          if ((v35 & 4) != 0)
          {
LABEL_132:
            if (*v128 && *v118)
            {
              uint64_t v73 = *((void *)this + 33);
              unsigned int v74 = *(unsigned __int16 *)(v73 + 788);
              unsigned int v117 = (v43
                    - *(unsigned __int16 *)(v73 + 834 + 2 * (v66 / v74))
                    + *(unsigned __int16 *)(v73 + 834 + 2 * (v66 / v74 + 1)))
                   % v42;
              int v121 = v66 / v74;
              int v113 = *(unsigned __int16 *)(v73 + 788 + 2 * (v66 % v74) + 4);
              memset_pattern16(v108, &unk_223AD0630, 4 * (v120 - 1) + 4);
            }
            uint64_t v37 = (v37 + 1);
          }
        }
        else if ((v35 & 4) != 0)
        {
          goto LABEL_132;
        }
        if ((v35 & 0x44) != 0)
        {
          int v75 = (*(uint64_t (**)(CAHDecDaisyHevc *, uint64_t))(*(void *)this + 80))(this, v37);
          unsigned int v76 = v136;
          if (v136 <= v75) {
            v35 |= 0x20u;
          }
        }
        else
        {
          unsigned int v76 = v136;
        }
        if (!v48)
        {
          if (!*v127) {
            unsigned int v76 = v37;
          }
          int v77 = v132;
          if (!*v127) {
            int v77 = v140;
          }
          int v132 = v77;
        }
        if ((v35 & 0x44) != 0)
        {
          unsigned int v78 = *(unsigned __int16 *)(*((void *)this + 33) + 788);
          if (v76 / v78 + 1 == v37 / v78) {
            v35 |= 0x10u;
          }
        }
        ++*((_DWORD *)v145 + v43);
        *((void *)v146 + v43) += 48;
        unsigned int v79 = v140 / v139;
        if (v40) {
          unsigned int v43 = (v79 - v121 + v117) % v42;
        }
        if (v137) {
          unsigned int v43 = v37 % v42;
        }
        char v80 = v129 ^ 1;
        if (v48) {
          char v80 = 1;
        }
        int v136 = v76;
        if ((v80 & 1) == 0 && !*v127) {
          unsigned int v43 = (v43 + 1) % v42;
        }
        uint64_t v31 = *((void *)v146 + v43);
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v123) >> 4);
        *(_WORD *)(v31 + 4) = *((_DWORD *)v145 + v43);
        *(_WORD *)(v31 + 6) = v43;
        *(_WORD *)(v31 + 8) = v138;
        *(_WORD *)(v31 + 10) = v79;
        *(_WORD *)(v31 + 12) = v37;
        *(_DWORD *)(v31 + 32) = v140;
        *(_DWORD *)(v31 + 36) = v132;
        *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecDaisyHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v139);
        __int16 v55 = v35;
        int v135 = v138;
LABEL_159:
        *(_WORD *)(v31 + 14) = v55;
LABEL_160:
        if (v133 == ++v48) {
          goto LABEL_51;
        }
      }
    }
    int v45 = *(_DWORD *)(v109 + 2360 * v138 + 1896);
    BOOL v46 = __CFADD__(v45, 1);
    unsigned int v47 = v45 + 1;
    if (!v46) {
      goto LABEL_54;
    }
LABEL_51:
    ++v138;
    uint64_t v39 = v128;
  }
  while (v138 != v107);
  uint64_t v95 = v142;
  unsigned int v22 = v100;
  a2 = v101;
  int v96 = v130;
LABEL_165:
  int v131 = v96;
  int v81 = 48 * v32;
  if (!*(void *)v95 && !*(_DWORD *)(v95 + 152) && !*(_DWORD *)(v95 + 156))
  {
LABEL_185:
    if (*(_DWORD *)(v95 + 152) || *(_DWORD *)(v95 + 156)) {
      goto LABEL_187;
    }
    goto LABEL_191;
  }
  int v82 = v141;
  if ((v141 + (unint64_t)HIDWORD(v140)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "populateAvdWork";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 2017;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
    int v82 = v141;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223850, HIDWORD(v140) + v82, 0x3FFFFFFFFFFLL, 32, -1, 2);
  if (!result)
  {
    uint64_t v95 = v142;
    if (!*(void *)v142) {
      goto LABEL_185;
    }
LABEL_187:
    int v86 = v141;
    if ((v141 + (unint64_t)HIDWORD(v140)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "populateAvdWork";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = 2018;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
      int v86 = v141;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223852, HIDWORD(v140) + v86, 0xFFFFFFFFLL, 0, -1, 4);
    if (!result)
    {
LABEL_191:
      *(_DWORD *)(v31 + 28) = v131 - HIDWORD(v140);
      *(_DWORD *)(v31 + 16) = 917519;
      ++*((_DWORD *)v145 + v43);
      unint64_t v87 = v104;
      if (v129)
      {
        uint64_t v88 = 0;
        memset(buf, 0, sizeof(buf));
        do
        {
          buf[v88] = v123 + v88 * v102;
          ++v88;
        }
        while (v120 != v88);
        uint64_t v89 = buf[0];
        unsigned int v90 = *(unsigned __int16 *)(buf[0] + 8) + 1;
        uint64_t v91 = v103;
        uint64_t v92 = 0;
        if (v90 >= a2)
        {
          unsigned int v94 = buf;
        }
        else
        {
          uint64_t v93 = 0;
          unsigned int v94 = buf;
          do
          {
            if (*(unsigned __int16 *)(v89 + 4) + 1 == *((_DWORD *)v145 + v92))
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 40) = *(_DWORD *)(buf[v91] + 36);
            }
            else if (v90 == *(unsigned __int16 *)(v89 + 56))
            {
              *unsigned int v94 = v89 + 48;
              uint64_t v92 = v93;
              uint64_t v91 = v93;
            }
            else
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 40) = *(_DWORD *)(buf[v91] + 36);
              *unsigned int v94 = v89 + 48;
            }
            uint64_t v93 = v91;
            uint64_t v91 = ((int)v91 + 1) % v120;
            unsigned int v94 = &buf[v92];
            uint64_t v89 = *v94;
            unsigned int v90 = *(unsigned __int16 *)(*v94 + 8) + 1;
          }
          while (v90 < a2);
        }
        int v97 = *((_DWORD *)v145 + v92);
        if (*(unsigned __int16 *)(v89 + 4) + 1 != v97)
        {
          do
          {
            int v98 = *(unsigned __int16 *)(v89 + 52);
            v89 += 48;
          }
          while (v98 + 1 != v97);
          *unsigned int v94 = v89;
        }
        *(_DWORD *)(v89 + 40) = *(_DWORD *)(v89 + 44) + 1;
      }
      uint64_t v99 = *((void *)this + 33) + 36;
      do
      {
        *(_WORD *)(v99 + 2 * v87 - 8) = *((_DWORD *)v145 + v87);
        *(_DWORD *)(v99 + 4 * v87) = 48 * (v87 - v22) * v105 + 223828;
        ++v87;
      }
      while (v87 < v106);
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecDaisyHevc::allocWorkBuf_SPS(CAHDecDaisyHevc *this, _DWORD *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 5718;
  int v5 = a2[902];
  int v6 = a2[903];
  int v7 = a2[900];
  if (v5 < (*(unsigned int (**)(CAHDecDaisyHevc *))(*(void *)this + 96))(this)
    || (unsigned int v8 = a2[903], v8 < (*(unsigned int (**)(CAHDecDaisyHevc *))(*(void *)this + 104))(this))
    || (unsigned int v9 = a2[909], v9 > (*(unsigned int (**)(CAHDecDaisyHevc *))(*(void *)this + 112))(this) - 8)
    || (unsigned int v10 = a2[910], v10 > (*(unsigned int (**)(CAHDecDaisyHevc *))(*(void *)this + 120))(this) - 8)
    || (unsigned int v17 = *v4, v18 = *v4 - 16, v18 > 0x30)
    || ((1 << v18) & 0x1000000010001) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = a2[902];
      int v12 = a2[903];
      int v13 = a2[909];
      int v14 = a2[910];
      unsigned int v15 = *v4;
      int v49 = 136316418;
      int v50 = "allocWorkBuf_SPS";
      __int16 v51 = 1024;
      int v52 = v11;
      __int16 v53 = 1024;
      *(_DWORD *)int v54 = v12;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v13;
      __int16 v55 = 1024;
      int v56 = v14;
      __int16 v57 = 1024;
      unsigned int v58 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported bit stream w %d h %d bd %d %d CtbSizeY %d\n", (uint8_t *)&v49, 0x2Au);
    }
    return 0xFFFFFFFFLL;
  }
  int v19 = v5 + 31;
  if (v5 < -31) {
    int v19 = v5 + 62;
  }
  unsigned int v20 = v19 >> 5;
  int v21 = v6 + 31;
  if (v6 < -31) {
    int v21 = v6 + 62;
  }
  unsigned int v22 = v21 >> 5;
  unsigned int v23 = 32 - __clz(v20 - 1);
  if (v20 >= 2) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  unsigned int v25 = 32 - __clz(v22 - 1);
  if (v22 >= 2) {
    char v26 = v25;
  }
  else {
    char v26 = 0;
  }
  unsigned int v27 = ((32 << (v26 + v24)) + 127) & 0xFFFFFF80;
  if (v7)
  {
    int v28 = v5 << (v7 == 3);
    int v29 = v28 + 31;
    int v30 = v28 + 62;
    if (v29 >= 0) {
      int v30 = v29;
    }
    unsigned int v31 = v30 >> 5;
    if (v7 == 1) {
      int v32 = v6 + 1;
    }
    else {
      int v32 = v6;
    }
    int v33 = v32 >> (v7 == 1);
    int v35 = v33 + 15;
    BOOL v34 = v33 < -15;
    int v36 = v33 + 30;
    if (!v34) {
      int v36 = v35;
    }
    unsigned int v37 = v36 >> 4;
    if (v31 > 1)
    {
      unsigned int v38 = 32 - __clz(v31 - 1);
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v37 = 0;
  }
  LOBYTE(v38) = 0;
LABEL_32:
  unsigned int v39 = 32 - __clz(v37 - 1);
  if (v37 >= 2) {
    char v40 = v39;
  }
  else {
    char v40 = 0;
  }
  unsigned int v41 = ((8 << (v40 + v38)) + 127) & 0xFFFFFF80;
  if (!v7) {
    unsigned int v41 = 0;
  }
  *((_DWORD *)this + 3344) = v27;
  *((_DWORD *)this + 3345) = v41;
  *((void *)this + 1673) = 0;
  unsigned int v42 = (v17 & 0xFFFFFFF0) * (v17 >> 4) * v4[2];
  *((_DWORD *)this + 3350) = v42;
  *((_DWORD *)this + 3349) = v4[4] * v42;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_44:
    uint64_t v46 = 0;
    while (1)
    {
      uint64_t v47 = *((unsigned int *)this + 3349);
      if (v47)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecDaisyHevc *)((char *)this + v46 + 8976), v47, 7, 1, 0))break; {
      }
        }
      uint64_t result = 0;
      v46 += 176;
      if (v46 == 2816) {
        return result;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2284;
    __int16 v53 = 2080;
    *(void *)int v54 = "MvColo";
    uint64_t v48 = &_os_log_internal;
  }
  else
  {
    uint64_t v43 = 528;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 3344);
      if (v44
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecDaisyHevc *)((char *)this + v43), v44, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_56;
        }
        int v49 = 136315650;
        int v50 = "allocWorkBuf_SPS";
        __int16 v51 = 1024;
        int v52 = 2275;
        __int16 v53 = 2080;
        *(void *)int v54 = "HdrY";
        uint64_t v48 = &_os_log_internal;
        goto LABEL_55;
      }
      uint64_t v45 = *((unsigned int *)this + 3345);
      if (v45)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecDaisyHevc *)((char *)this + v43 + 2816), v45, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 3344) {
        goto LABEL_44;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2276;
    __int16 v53 = 2080;
    *(void *)int v54 = "HdrC";
    uint64_t v48 = &_os_log_internal;
  }
LABEL_55:
  _os_log_impl(&dword_223977000, v48, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v49, 0x1Cu);
LABEL_56:
  (*(void (**)(CAHDecDaisyHevc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecDaisyHevc::allocWorkBuf_PPS(CAHDecDaisyHevc *this, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  unsigned int v4 = (a2[909] + 9) & 0xFFFFFFFE;
  int v5 = a2[910];
  unsigned int v6 = (v5 + 9) & 0xFFFFFFFE;
  if (v4 <= v6) {
    unsigned int v7 = (v5 + 9) & 0xFFFFFFFE;
  }
  else {
    unsigned int v7 = (a2[909] + 9) & 0xFFFFFFFE;
  }
  int v8 = a2[900];
  if (v7 == 10) {
    int v9 = 40;
  }
  else {
    int v9 = 48;
  }
  if (v7 == 8) {
    int v9 = 32;
  }
  char v10 = v8 != 3;
  if (*((unsigned char *)a3 + 52))
  {
    uint64_t v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = a2[1106] + a2[1105];
    uint64_t v17 = a3[14];
    int v18 = a2[5718];
    unsigned int v19 = a2[902];
    do
    {
      int v20 = a3[v11 + 17] + 1;
      int v21 = v20 * v18;
      if (v20 * v18 + v14 > v19) {
        int v21 = v19 - v14;
      }
      if (v12 <= v21) {
        int v12 = v21;
      }
      if (v8)
      {
        unsigned int v22 = (v20 << v16) >> v10;
        if (v17 == v11) {
          unsigned int v22 = (((v19 >> 3) - (v15 << v16)) >> v10) + 1;
        }
        v13 += ((v22 + 2 * (v11 != 0)) * v9 + 127) & 0xFFFFFF80;
      }
      v14 += v21;
      v15 += v20;
      ++v11;
    }
    while (v17 + 1 != v11);
  }
  else
  {
    unsigned int v19 = a2[902];
    int v23 = (v9 + v9 * (v19 >> 3 >> v10) + 127) & 0x7FFFFF80;
    if (v8) {
      int v13 = v23;
    }
    else {
      int v13 = 0;
    }
    int v12 = a2[902];
  }
  signed int v24 = 0;
  uint64_t v25 = *((void *)this + 32);
  if (v12 >= -15) {
    int v26 = v12 + 15;
  }
  else {
    int v26 = v12 + 30;
  }
  int v27 = a3[14];
  if (*((unsigned char *)a3 + 52)) {
    int v28 = a3[14];
  }
  else {
    int v28 = 0;
  }
  int v68 = v28;
  if (v8 == 3) {
    int v29 = 48;
  }
  else {
    int v29 = 32;
  }
  if (v8 == 3) {
    int v30 = 176;
  }
  else {
    int v30 = 128;
  }
  if (!v8) {
    int v29 = 16;
  }
  unsigned int v31 = (v29 * v7) >> 3;
  if (!v8) {
    int v30 = 80;
  }
  int v66 = v26;
  int v67 = v30;
  int v32 = v26 >> 4;
  int v33 = (v26 >> 4) * v31;
  if (v5) {
    int v34 = 60;
  }
  else {
    int v34 = 48;
  }
  int v65 = v34;
  unsigned int v35 = 0;
  unsigned int v36 = 0;
  unsigned int v37 = 0;
  if (*((unsigned char *)a3 + 52) && v27)
  {
    uint64_t v38 = 0;
    int v39 = 0;
    unsigned int v37 = 0;
    unsigned int v36 = 0;
    unsigned int v35 = 0;
    if (v8 == 1) {
      int v40 = 8;
    }
    else {
      int v40 = 16;
    }
    if (!v8) {
      int v40 = 0;
    }
    unsigned int v41 = ((((6 * v40 + 96) * v7) >> 3) + 7) & 0x3FFFFFF8;
    int v42 = v40 + 16;
    unsigned int v43 = a2[903];
    signed int v44 = v4 - 8;
    signed int v45 = v6 - 8;
    if (v44 <= v45) {
      signed int v46 = v45;
    }
    else {
      signed int v46 = v44;
    }
    uint64_t v47 = a3[15];
    int v48 = a2[5718];
    BOOL v50 = *(_DWORD *)(v25 + 2644) == 1 && v46 != 0;
    __int16 v51 = (char *)(a3 + 37);
    do
    {
      int v52 = v48 + v48 * *(_DWORD *)&v51[4 * v38];
      if (v52 + v39 > v43) {
        int v52 = v43 - v39;
      }
      int v53 = v52 + 15;
      if (v52 < -15) {
        int v53 = v52 + 30;
      }
      if (v38) {
        int v54 = (v53 >> 4) + 1;
      }
      else {
        int v54 = v53 >> 4;
      }
      unsigned int v55 = v54 * v41;
      if (v35 <= v55) {
        unsigned int v35 = v55;
      }
      unsigned int v56 = 36 * (v53 >> 4);
      if (v36 <= v56) {
        unsigned int v36 = v56;
      }
      if (v50)
      {
        if (v47 == v38) {
          int v57 = 23;
        }
        else {
          int v57 = 15;
        }
        unsigned int v58 = ((v57 + v52) / 16 * v42) | 6;
        if (v37 <= v58) {
          unsigned int v37 = v58;
        }
      }
      v39 += v52;
      ++v38;
    }
    while (v47 + 1 != v38);
    signed int v24 = (((3 * v7) & 0x7FFFFF) << 6) + (((v43 + 7) >> 3) + 2) * ((((v7 >> 1) & 0x1FFFFF) << 8) | 8);
  }
  if (v33 && CAVDDecoder::allocAVDMem(v25, (_OWORD *)this + 737, v33, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2458;
      __int16 v74 = 2080;
      int v75 = "IpAbove";
      uint64_t v59 = &_os_log_internal;
LABEL_120:
      _os_log_impl(&dword_223977000, v59, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", buf, 0x1Cu);
      goto LABEL_121;
    }
    goto LABEL_121;
  }
  if ((v12 + 30) >= 0x1F
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 550, 4 * (4 * v32 + (v66 >> 4)), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2459;
      __int16 v74 = 2080;
      int v75 = "MvAboveInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
LABEL_121:
    (*(void (**)(CAHDecDaisyHevc *, void))(*(void *)this + 152))(this, 0);
    return 0xFFFFFFFFLL;
  }
  int v60 = v68 + ((v19 + 15) >> 4);
  signed int v61 = v60 * ((((v67 * v7) >> 3) + 7) & 0x3FFFFFF8) + (v27 << 7);
  if (v61 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 748, v61, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2460;
      __int16 v74 = 2080;
      int v75 = "LfAbovePix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  int v62 = 36 * v60 + (v27 << 7);
  if (v62 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 759, v62, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2461;
      __int16 v74 = 2080;
      int v75 = "LfAboveInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v35 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 770, (int)v35, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2462;
      __int16 v74 = 2080;
      int v75 = "LfLeftPix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v36 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 781, (int)v36, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2463;
      __int16 v74 = 2080;
      int v75 = "LfLeftInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v37 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 792, (int)v37, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2464;
      __int16 v74 = 2080;
      int v75 = "SwLeftPix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v13 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 803, v13, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2465;
      __int16 v74 = 2080;
      int v75 = "AZAbovePix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v24 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 814, v24, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2466;
      __int16 v74 = 2080;
      int v75 = "AZLeftPix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  int v63 = (v19 >> 3) * v65;
  if (!v63) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 825, v63, 7, 1, 0);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2468;
      __int16 v74 = 2080;
      int v75 = "RfAboveInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  return result;
}

uint64_t CAHDecDaisyHevc::freeWorkBuf_SPS(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(_DWORD *)(*(void *)(this + 256) + 2648))
  {
    for (uint64_t i = 528; i != 3344; i += 176)
    {
      BOOL v3 = (void *)(v1 + i);
      if (*(void *)(v1 + i))
      {
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v1 + i));
        void *v3 = 0;
      }
      if (v3[352])
      {
        unsigned int v4 = v3 + 352;
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), v4);
        *unsigned int v4 = 0;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1 + 8976;
  do
  {
    if (*(void *)(v6 + v5))
    {
      this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v6 + v5));
      *(void *)(v6 + v5) = 0;
    }
    v5 += 176;
  }
  while (v5 != 2816);
  return this;
}

uint64_t *CAHDecDaisyHevc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  unsigned int v2 = this;
  if (this[1474])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1474);
    v2[1474] = 0;
  }
  if (v2[1100])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1100);
    v2[1100] = 0;
  }
  if (v2[1496])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1496);
    v2[1496] = 0;
  }
  if (v2[1518])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1518);
    v2[1518] = 0;
  }
  if (v2[1540])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1540);
    v2[1540] = 0;
  }
  if (v2[1562])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1562);
    v2[1562] = 0;
  }
  if (v2[1584])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1584);
    v2[1584] = 0;
  }
  if (v2[1606])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1606);
    v2[1606] = 0;
  }
  if (v2[1628])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1628);
    v2[1628] = 0;
  }
  if (v2[1650])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1650);
    v2[1650] = 0;
  }
  return this;
}

uint64_t CAHDecDaisyHevc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 6160;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 13392) = a2;
  return this;
}

uint64_t CAHDecDaisyHevc::decodeBuffer(CAHDecDaisyHevc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecDaisyHevc::decodeBufferSize(CAHDecDaisyHevc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecDaisyHevc::decHdrYLinAddr(CAHDecDaisyHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 66);
}

uint64_t CAHDecDaisyHevc::decHdrCLinAddr(CAHDecDaisyHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 418);
}

uint64_t CAHDecDaisyHevc::decHdrYSize(CAHDecDaisyHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 143);
}

uint64_t CAHDecDaisyHevc::decHdrCSize(CAHDecDaisyHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 847);
}

uint64_t CAHDecDaisyHevc::decHdrYStride(CAHDecDaisyHevc *this)
{
  return *((unsigned int *)this + 3346);
}

uint64_t CAHDecDaisyHevc::decHdrCStride(CAHDecDaisyHevc *this)
{
  return *((unsigned int *)this + 3347);
}

uint64_t createRadishLghDecoder(void *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "createRadishLghDecoder";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Radish AVD is not supported in this AppleAVD driver!!!", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

uint64_t AppleAVDWrapperFghrnDecoderCreateInstance(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  VTVideoDecoderGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    unsigned int v7 = "AppleAVDWrapperFghrnDecoderCreateInstance";
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
  *a3 = 0;
  return v4;
}

uint64_t EnsureFghrnPropertyDictionaryCreation()
{
  return pthread_once(&sCreateSupportedPropertyDictionaryOnce, Fghrn_createSupportedPropertyDictionary);
}

void Fghrn_createSupportedPropertyDictionary()
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  CFDictionaryRef v0 = (const __CFDictionary *)*MEMORY[0x263F1EBD8];
  uint64_t v1 = *MEMORY[0x263F1EB88];
  keys = (void *)*MEMORY[0x263F1EBC8];
  uint64_t v21 = v1;
  CFDictionaryRef v2 = (const __CFDictionary *)*MEMORY[0x263F1EB98];
  CFDictionaryRef v13 = v0;
  CFDictionaryRef v14 = v2;
  *(void *)values = Fghrn_createFrameTypesArrayElement((const void *)*MEMORY[0x263F1E7E8]);
  *(void *)&values[8] = Fghrn_createFrameTypesArrayElement((const void *)*MEMORY[0x263F1E800]);
  *(void *)&values[16] = Fghrn_createFrameTypesArrayElement((const void *)*MEMORY[0x263F1E7F0]);
  CFDictionaryRef FrameTypesArrayElement = Fghrn_createFrameTypesArrayElement((const void *)*MEMORY[0x263F1E7F8]);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  sFghrnOnlyTheseFrames = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)values, 4, MEMORY[0x263EFFF70]);
  if (!sFghrnOnlyTheseFrames && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    int v28 = "Fghrn_createOnlyTheseFramesArray";
    __int16 v29 = 2080;
    int v30 = "sFghrnOnlyTheseFrames";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", buf, 0x16u);
  }
  for (uint64_t i = 0; i != 32; i += 8)
  {
    uint64_t v5 = *(const void **)&values[i];
    if (v5)
    {
      CFRelease(v5);
      *(void *)&values[i] = 0;
    }
  }
  if (sFghrnOnlyTheseFrames)
  {
    uint64_t v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    unsigned int v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    CFDictionaryRef v8 = CFDictionaryCreate(v3, 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    uint64_t v9 = *MEMORY[0x263F1E7B0];
    keys = (void *)*MEMORY[0x263F1E780];
    uint64_t v21 = v9;
    CFDictionaryRef v13 = v8;
    CFDictionaryRef v14 = v8;
    uint64_t v10 = *MEMORY[0x263F1E790];
    *(void *)&long long v22 = *MEMORY[0x263F1E6D8];
    *((void *)&v22 + 1) = v10;
    *(void *)&long long v15 = v8;
    *((void *)&v15 + 1) = v8;
    uint64_t v11 = *MEMORY[0x263F1E730];
    *(void *)&long long v23 = *MEMORY[0x263F1E6F8];
    *((void *)&v23 + 1) = v11;
    *(void *)&long long v16 = v8;
    *((void *)&v16 + 1) = v8;
    *(void *)&long long v24 = *MEMORY[0x263F1E6E8];
    *(void *)&long long v17 = v8;
    CFDictionaryRef v12 = CFDictionaryCreate(v3, (const void **)&keys, (const void **)&v13, 7, v6, v7);
    sFghrnVideoDecoderSupportedPropertyDictionary = (uint64_t)v12;
    if (sFghrnOnlyTheseFrames)
    {
      if (v12) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
  }
  else
  {
    CFDictionaryRef v8 = 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)values = 136315394;
    *(void *)&values[4] = "Fghrn_createSupportedPropertyDictionary";
    *(_WORD *)&values[12] = 2080;
    *(void *)&values[14] = "sFghrnOnlyTheseFrames";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", values, 0x16u);
  }
  if (!sFghrnVideoDecoderSupportedPropertyDictionary)
  {
LABEL_16:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)values = 136315394;
      *(void *)&values[4] = "Fghrn_createSupportedPropertyDictionary";
      *(_WORD *)&values[12] = 2080;
      *(void *)&values[14] = "sFghrnVideoDecoderSupportedPropertyDictionary";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", values, 0x16u);
    }
  }
LABEL_18:
  if (v8) {
    CFRelease(v8);
  }
}

uint64_t populateDecoderCryptor(_DWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  if (a3)
  {
    uint64_t v5 = *a5;
    if (v5)
    {
      int v6 = 0;
      unsigned int v7 = (_DWORD *)(a2 + 4);
      uint64_t v8 = *a5;
      do
      {
        v6 += *(v7 - 1) + *v7;
        v7 += 2;
        --v8;
      }
      while (v8);
    }
    else
    {
      int v6 = 0;
    }
    if (v5 >= a3)
    {
      int v15 = 0;
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v10 = (int *)(a2 + 8 * v5 + 4);
      while (1)
      {
        unsigned int v11 = *(v10 - 1) + v6;
        if (v11 >= a4) {
          break;
        }
        CFDictionaryRef v12 = &a1[v9];
        v12[14] = v11;
        int v14 = *v10;
        v10 += 2;
        int v13 = v14;
        v12[270] = v14;
        int v15 = v9 + 1;
        if (v9 + 1 + v5 < a3)
        {
          int v6 = v13 + v11;
          if (v9++ < 0xFF) {
            continue;
          }
        }
        LODWORD(v5) = v5 + v15;
        goto LABEL_17;
      }
      LODWORD(v5) = v5 + v9;
      int v15 = v9;
    }
LABEL_17:
    *a5 = v5;
    a1[526] = v15;
  }
  else
  {
    a1[526] = 0;
    a1[14] = 0;
    a1[270] = 0;
  }
  return 0;
}

uint64_t AppleAVDWrapperFghrnDecoderInvalidate()
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  DerivedStorage = (pthread_mutex_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    CFDictionaryRef v2 = DerivedStorage + 82;
    pthread_mutex_lock(DerivedStorage + 82);
    int v3 = *(_DWORD *)&v1[86].__opaque[40];
    if ((v3 - 1) >= 2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 136315394;
        uint64_t v10 = "AppleAVDWrapperFghrnDecoderInvalidate";
        __int16 v11 = 1024;
        int v12 = v3;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s called but plugin state is %d", (uint8_t *)&v9, 0x12u);
      }
    }
    else
    {
      *(_DWORD *)&v1[86].__opaque[40] = 3;
      AppleAVDWrapperFghrnDecoderCleanUp();
    }
    pthread_mutex_unlock(v2);
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v5)
    {
      int v6 = *(_DWORD *)&v1[84].__opaque[32];
      int v7 = *(_DWORD *)&v1[81].__opaque[16];
      int v8 = *(_DWORD *)&v1[81].__opaque[20];
      int v9 = 136316162;
      uint64_t v10 = "AppleAVDWrapperFghrnDecoderInvalidate";
      __int16 v11 = 1024;
      int v12 = v6;
      __int16 v13 = 1024;
      int v14 = v7;
      __int16 v15 = 1024;
      int v16 = v8;
      __int16 v17 = 2048;
      long long v18 = v1;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: Fghrn, encryptionScheme %d, %d x %d, session : %p", (uint8_t *)&v9, 0x28u);
      return 0;
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = "AppleAVDWrapperFghrnDecoderInvalidate";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s called with invalid storage", (uint8_t *)&v9, 0xCu);
    }
    return 4294954393;
  }
  return result;
}

void AppleAVDWrapperFghrnDecoderFinalize()
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  DerivedStorage = (pthread_mutex_t *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v10 = 136315138;
    __int16 v11 = "AppleAVDWrapperFghrnDecoderFinalize";
    uint64_t v4 = &_os_log_internal;
    BOOL v5 = "AppleAVD: %s called with invalid storage";
    uint32_t v6 = 12;
    goto LABEL_11;
  }
  uint64_t v1 = DerivedStorage;
  CFDictionaryRef v2 = DerivedStorage + 82;
  pthread_mutex_lock(DerivedStorage + 82);
  int v3 = *(_DWORD *)&v1[86].__opaque[40];
  if ((v3 - 1) >= 3)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      __int16 v11 = "AppleAVDWrapperFghrnDecoderFinalize";
      __int16 v12 = 1024;
      int v13 = v3;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s called but plugin state is %d", (uint8_t *)&v10, 0x12u);
    }
  }
  else if (v3 != 3)
  {
    AppleAVDWrapperFghrnDecoderCleanUp();
  }
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)&v1[84].__opaque[32];
    int v8 = *(_DWORD *)&v1[81].__opaque[16];
    int v9 = *(_DWORD *)&v1[81].__opaque[20];
    int v10 = 136316162;
    __int16 v11 = "AppleAVDWrapperFghrnDecoderFinalize";
    __int16 v12 = 1024;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    __int16 v16 = 1024;
    int v17 = v9;
    __int16 v18 = 2048;
    uint64_t v19 = v1;
    uint64_t v4 = &_os_log_internal;
    BOOL v5 = "AppleAVD: %s() codecType: Fghrn, encryptionScheme %d, %d x %d, session : %p";
    uint32_t v6 = 40;
LABEL_11:
    _os_log_impl(&dword_223977000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v10, v6);
  }
}

__CFString *AppleAVDWrapperFghrnDecoderCopyDebugDescription(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CFStringAppendFormat(Mutable, 0, @"<AppleAVD_FghrnVideoDecoder %p>", a1);
  return Mutable;
}

uint64_t AppleAVDWrapperFghrnDecoderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E740]))
  {
    switch(*(_DWORD *)(DerivedStorage + 5536))
    {
      case 0:
        int v8 = (CFTypeRef *)MEMORY[0x263F1E7E8];
        goto LABEL_16;
      case 1:
        int v8 = (CFTypeRef *)MEMORY[0x263F1E800];
        goto LABEL_16;
      case 2:
        int v8 = (CFTypeRef *)MEMORY[0x263F1E7F0];
        goto LABEL_16;
      case 3:
        int v8 = (CFTypeRef *)MEMORY[0x263F1E7F8];
        goto LABEL_16;
      default:
        return 4294954396;
    }
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E6F8])) {
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E730]))
  {
    int valuePtr = 0;
    uint64_t v13 = *(void *)(DerivedStorage + 5184);
    if (v13)
    {
      if (!AppleAVDGetParameter(v13, 69, (uint64_t)&valuePtr))
      {
        int v10 = CFNumberCreate(a3, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_7;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 4294954385;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperFghrnDecoderCopyProperty";
      __int16 v14 = &_os_log_internal;
      int v15 = "AppleAVD: ERROR: %s() - AppleAVDGetParameter call for kAppleAVDGetFrameReceiverThreadPriority returned ERROR\n";
    }
    else
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 4294954385;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperFghrnDecoderCopyProperty";
      __int16 v14 = &_os_log_internal;
      int v15 = "AppleAVD: WARNING: %s() - trying to get FrameReceiverThreadPriority before videoContext was created!\n";
    }
    _os_log_impl(&dword_223977000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
    return 4294954385;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E780]))
  {
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7B0]))
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E6D8]))
      {
        int v17 = *(_DWORD *)(DerivedStorage + 5612);
        switch(v17)
        {
          case 2:
            int v8 = (CFTypeRef *)MEMORY[0x263F1E4B0];
            goto LABEL_16;
          case 1:
            int v8 = (CFTypeRef *)MEMORY[0x263F1E4A8];
            goto LABEL_16;
          case 0:
            int v8 = (CFTypeRef *)MEMORY[0x263F1E4A0];
LABEL_16:
            __int16 v16 = (void *)*v8;
            CFRetain(*v8);
LABEL_17:
            uint64_t result = 0;
            *a4 = v16;
            return result;
        }
        return 4294954396;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E790]))
      {
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        *(void *)long long buf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, (const void *)(DerivedStorage + 5636));
        __int16 v16 = CFArrayCreate(v18, (const void **)buf, 1, 0);
        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)buf);
        }
        goto LABEL_17;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E6E8])) {
        return 4294954396;
      }
      if (!*(unsigned char *)(DerivedStorage + 5649))
      {
        uint64_t result = 0;
        *a4 = 0;
        return result;
      }
    }
LABEL_5:
    int v9 = (const void *)*MEMORY[0x263EFFB40];
LABEL_6:
    int v10 = (void *)CFRetain(v9);
LABEL_7:
    __int16 v11 = v10;
    uint64_t result = 0;
    *a4 = v11;
    return result;
  }
  pthread_once(&sCreateSuggestedQualityOfServiceTiersOnce, myCreateSuggestedQualityOfServiceTiers);
  int v9 = (const void *)myVideoDecoderSuggestedQualityOfServiceTiers;
  if (myVideoDecoderSuggestedQualityOfServiceTiers) {
    goto LABEL_6;
  }
  return FigSignalErrorAt3();
}

uint64_t AppleAVDWrapperFghrnDecoderSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E780])) {
    return FigSignalErrorAt3();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7B0])) {
    return 4294954395;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E6D8]))
  {
    if (!a3) {
      goto LABEL_15;
    }
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x263F1E4A0]))
    {
      uint64_t v7 = 0;
      goto LABEL_16;
    }
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x263F1E4A8]))
    {
LABEL_15:
      uint64_t v7 = 1;
      goto LABEL_16;
    }
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x263F1E4B0]))
    {
      uint64_t v7 = 2;
LABEL_16:
      __int16 v11 = (_DWORD *)(DerivedStorage + 5612);
      *(_DWORD *)(DerivedStorage + 5612) = v7;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        int v15 = "AppleAVDWrapperFghrnDecoderSetProperty";
        __int16 v16 = 1024;
        int v17 = v7;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Requesting setting filmGrainMode to: %d\n", buf, 0x12u);
        uint64_t v7 = *v11;
      }
      int CFPreferenceNumber = VideoDecoder_getCFPreferenceNumber(@"AVD_AvdFilmGrainMode", @"com.apple.coremedia", v7);
      *__int16 v11 = CFPreferenceNumber;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        int v15 = "AppleAVDWrapperFghrnDecoderSetProperty";
        __int16 v16 = 1024;
        int v17 = CFPreferenceNumber;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): After considering defaults write, setting filmGrainMode to: %d\n", buf, 0x12u);
      }
      uint64_t v13 = *(void *)(DerivedStorage + 5184);
      if (v13)
      {
        uint64_t result = AppleAVDSetParameter(v13, 61, (unsigned __int8 *)(DerivedStorage + 5612));
        if (!result) {
          return result;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 4294954385;
        }
        *(_DWORD *)long long buf = 136315138;
        int v15 = "AppleAVDWrapperFghrnDecoderSetProperty";
        int v9 = &_os_log_internal;
        int v10 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDSetAv1FilmGrainMode returned ERROR\n";
      }
      else
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 4294954385;
        }
        *(_DWORD *)long long buf = 136315138;
        int v15 = "AppleAVDWrapperFghrnDecoderSetProperty";
        int v9 = &_os_log_internal;
        int v10 = "AppleAVD: WARNING: %s() - trying to set kAppleAVDSetAv1FilmGrainMode before videoContext was created!\n";
      }
LABEL_26:
      _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0xCu);
      return 4294954385;
    }
    return 4294954396;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E6E8])) {
    return 4294954396;
  }
  uint64_t result = CFEqual(a3, (CFTypeRef)*MEMORY[0x263EFFB40]);
  int v8 = (unsigned __int8 *)(DerivedStorage + 5649);
  if (result)
  {
    *int v8 = 1;
    uint64_t result = AppleAVDSetParameter(*(void *)(DerivedStorage + 5184), 70, v8);
    if (!result) {
      return result;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 4294954385;
    }
    *(_DWORD *)long long buf = 136315138;
    int v15 = "AppleAVDWrapperFghrnDecoderSetProperty";
    int v9 = &_os_log_internal;
    int v10 = "AppleAVD: %s(): ERROR setting kAppleAVDSetAllowBitstreamToChangeFrameDimensions failed";
    goto LABEL_26;
  }
  *int v8 = 0;
  return result;
}

uint64_t AppleAVDWrapperFghrnDecoderCleanUp()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(v1 + 5184);
  if (v2)
  {
    if (AppleAVDTerminateDecoder(v2) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_FghrnDecoder - ERROR terminate decoder", buf, 2u);
    }
    if (AppleAVDCloseConnection((uint64_t *)(v1 + 5184))
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v14 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_FghrnDecoder - ERROR closing connection", v14, 2u);
    }
  }
  int v3 = *(const void **)(v1 + 5616);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(v1 + 5616) = 0;
  }
  uint64_t v4 = (FILE *)DerivedStorage[696];
  if (v4)
  {
    fclose(v4);
    DerivedStorage[696] = 0;
  }
  BOOL v5 = (FILE *)DerivedStorage[697];
  if (v5)
  {
    fclose(v5);
    DerivedStorage[697] = 0;
  }
  uint32_t v6 = (FILE *)DerivedStorage[698];
  if (v6)
  {
    fclose(v6);
    DerivedStorage[698] = 0;
  }
  uint64_t v7 = (void *)DerivedStorage[654];
  if (v7)
  {
    free(v7);
    DerivedStorage[654] = 0;
  }
  int v8 = (__CVPixelBufferPool *)DerivedStorage[4];
  if (v8) {
    CVPixelBufferPoolRelease(v8);
  }
  DerivedStorage[4] = 0;
  int v9 = (__CVPixelBufferPool *)DerivedStorage[5];
  if (v9) {
    CVPixelBufferPoolRelease(v9);
  }
  DerivedStorage[5] = 0;
  int v10 = (const void *)DerivedStorage[6];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[6] = 0;
  }
  __int16 v11 = (const void *)DerivedStorage[7];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[7] = 0;
  }
  __int16 v12 = (const void *)DerivedStorage[649];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[649] = 0;
  }
  void *DerivedStorage = 0;
  uint64_t result = DerivedStorage[3];
  if (result)
  {
    uint64_t result = FigFormatDescriptionRelease();
    DerivedStorage[3] = 0;
  }
  return result;
}

void myCreateSuggestedQualityOfServiceTiers()
{
  values[4] = *(void **)MEMORY[0x263EF8340];
  values[0] = createQualityOfServiceTier((void *)*MEMORY[0x263F1E7E8]);
  values[1] = createQualityOfServiceTier((void *)*MEMORY[0x263F1E800]);
  values[2] = createQualityOfServiceTier((void *)*MEMORY[0x263F1E7F0]);
  values[3] = createQualityOfServiceTier((void *)*MEMORY[0x263F1E7F8]);
  myVideoDecoderSuggestedQualityOfServiceTiers = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)values, 4, MEMORY[0x263EFFF70]);
  if (!myVideoDecoderSuggestedQualityOfServiceTiers)
  {
    FigSignalErrorAt3();
    if (!myVideoDecoderSuggestedQualityOfServiceTiers && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      int v3 = "myCreateSuggestedQualityOfServiceTiers";
      __int16 v4 = 2080;
      BOOL v5 = "myVideoDecoderSuggestedQualityOfServiceTiers";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", buf, 0x16u);
    }
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v1 = values[i];
    if (v1)
    {
      CFRelease(v1);
      values[i] = 0;
    }
  }
}

CFDictionaryRef createQualityOfServiceTier(void *a1)
{
  values[2] = *(void **)MEMORY[0x263EF8340];
  keys = (void *)*MEMORY[0x263F1E740];
  uint64_t valuePtr = 0x3FF0000000000000;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberDoubleType, &valuePtr);
  values[0] = a1;
  values[1] = v3;
  CFDictionaryRef v4 = CFDictionaryCreate(v2, (const void **)&keys, (const void **)values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v4)
  {
    FigSignalErrorAt3();
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      int v9 = "createQualityOfServiceTier";
      __int16 v10 = 2080;
      __int16 v11 = "tier";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", buf, 0x16u);
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

uint64_t AppleAVDWrapperFghrnDecoderStartSession(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  kdebug_trace();
  unsigned __int8 CFPreferenceNumber = VideoDecoder_getCFPreferenceNumber(@"AVD_CoreSelect", @"com.apple.coremedia", 32);
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    int v8 = *(_DWORD *)(DerivedStorage + 5552);
    if (v8)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "AppleAVDWrapperFghrnDecoderStartSession";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v8;
        int v9 = &_os_log_internal;
        __int16 v10 = "AppleAVD: %s ERROR: pluginState isn't kPluginCreated, is %d";
        uint32_t v11 = 18;
LABEL_7:
        _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, v11);
        return 4294954387;
      }
      return 4294954387;
    }
    pthread_mutex_init((pthread_mutex_t *)(DerivedStorage + 5248), 0);
    int v62 = (pthread_mutex_t *)(v7 + 5248);
    pthread_mutex_lock((pthread_mutex_t *)(v7 + 5248));
    *(_DWORD *)(v7 + 5628) = 0;
    *(void *)(v7 + 5232) = 0;
    *(_DWORD *)(v7 + 5240) = 0;
    *(void *)uint64_t v7 = a2;
    *(_DWORD *)(v7 + 16) = 0;
    FigFormatDescriptionRelease();
    uint64_t v13 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
    *(void *)(v7 + 24) = v13;
    unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(v13);
    int32_t v15 = Dimensions;
    unint64_t v16 = HIDWORD(Dimensions);
    Extensiouint64_t n = (const __CFBoolean *)CMFormatDescriptionGetExtension(a3, (CFStringRef)*MEMORY[0x263F00E68]);
    if (Extension) {
      LOBYTE(Extension) = CFBooleanGetValue(Extension);
    }
    int v63 = (unsigned char *)(v7 + 5201);
    *(unsigned char *)(v7 + 5401) = (_BYTE)Extension;
    *(_DWORD *)(v7 + 5208) = v15;
    *(_DWORD *)(v7 + 5212) = v16;
    *(_DWORD *)(v7 + 5204) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *(_DWORD *)(v7 + 5416);
      *(_DWORD *)long long buf = 136316418;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperFghrnDecoderStartSession";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v18;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v15;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v16;
      *(_WORD *)&buf[30] = 2080;
      *(void *)&uint8_t buf[32] = "22:55:22";
      *(_WORD *)&buf[40] = 2080;
      *(void *)&buf[42] = "Nov 14 2024";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: Fghrn, encryptionScheme %d, %d x %d, built %s %s", buf, 0x32u);
    }
    *(_DWORD *)(v7 + 5600) = VideoDecoder_getCFPreferenceNumber(@"AVD_OnDemandDartMap", @"com.apple.coremedia", 1);
    *(_DWORD *)(v7 + 5632) = VideoDecoder_getCFPreferenceNumber(@"AVD_avdCoreControlPerfWeight", @"com.apple.coremedia", 90);
    if (MGGetBoolAnswer()) {
      *(_DWORD *)(v7 + 5560) = VideoDecoder_getCFPreferenceNumber(@"AVD_EnableFileDump", @"com.apple.coremedia", 0);
    }
    *(_DWORD *)(v7 + 5604) = 0;
    *(_DWORD *)(v7 + 5604) = *(_DWORD *)(v7 + 5604) & 0xFFFFFFFB | (4
                                                                  * (VideoDecoder_getCFPreferenceNumber(@"AVD_AllowADSOnUnsupported", @"com.apple.coremedia", 0) != 0));
    unsigned int v19 = *(_DWORD *)(v7 + 5604) & 0xFFFFFFF7 | (8
                                               * (VideoDecoder_getCFPreferenceNumber(@"AVD_EnableHistogram", @"com.apple.coremedia", 1) != 0));
    *(_DWORD *)(v7 + 5604) = v19;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v19;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDWrapperFghrnDecoderStartSession: storage->miscPreferences %d ", buf, 8u);
    }
    int v20 = VideoDecoder_getCFPreferenceNumber(@"AVD_TryAllFrames", @"com.apple.coremedia", 0);
    *(_DWORD *)(v7 + 5592) = v20;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(_DWORD *)(v7 + 5416);
      *(_DWORD *)long long buf = 136316930;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperFghrnDecoderStartSession";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v21;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v15;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v16;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&uint8_t buf[32] = v20;
      *(_WORD *)&buf[36] = 2048;
      *(void *)&buf[38] = v7;
      *(_WORD *)&buf[46] = 2080;
      *(void *)&buf[48] = "22:55:22";
      *(_WORD *)&buf[56] = 2080;
      *(void *)&buf[58] = "Nov 14 2024";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: Fghrn, encryptionScheme %d, %d x %d, tryAllFrames = %d, session : %p, built %s %s", buf, 0x42u);
    }
    *(_DWORD *)(v7 + 5596) = VideoDecoder_getCFPreferenceNumber(@"AVD_MCacheMode", @"com.apple.coremedia", 0xFFFFFFFFLL);
    long long v22 = v63;
    v63[448] = VideoDecoder_getCFPreferenceNumber(@"AVD_AllowBitstreamToChangeFrameDimensions", @"com.apple.coremedia", 0) != 0;
    uint64_t HeaderBuffer = CreateHeaderBuffer(v7, a3);
    if (HeaderBuffer) {
      goto LABEL_79;
    }
    int AVDFghrnInstance = CreateAVDFghrnInstance(v7, CFPreferenceNumber);
    if (AVDFghrnInstance)
    {
      int v24 = AVDFghrnInstance;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_FghrnVideoDecoder ERROR: createAppleAVDHW_FghrnDecoderInstance returned error", buf, 2u);
      }
      if (v24 == -536870210) {
        uint64_t HeaderBuffer = 4294954383;
      }
      else {
        uint64_t HeaderBuffer = 4294954385;
      }
      goto LABEL_79;
    }
    int v25 = *(_DWORD *)(v7 + 5312);
    if (v22[448])
    {
      if (v25 <= v15) {
        int v25 = v15;
      }
      *(_DWORD *)(v7 + 5208) = v25;
      int v26 = *(_DWORD *)(v7 + 5316);
      if (v26 <= v16) {
        int v26 = v16;
      }
      *(_DWORD *)(v7 + 5212) = v26;
    }
    else
    {
      int v26 = *(_DWORD *)(v7 + 5316);
    }
    if (v25 >= -1) {
      int v27 = v25 + 1;
    }
    else {
      int v27 = v25 + 2;
    }
    signed int v28 = v27 & 0xFFFFFFFE;
    *(_DWORD *)(v7 + 5216) = v27 & 0xFFFFFFFE;
    int v29 = v26 + 2;
    if (v26 >= -1) {
      int v29 = v26 + 1;
    }
    signed int v30 = v29 & 0xFFFFFFFE;
    *(_DWORD *)(v7 + 5220) = v30;
    if ((v28 > v15 || v30 > (int)v16) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperFghrnDecoderStartSession";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): WARNING, coded size has changed!", buf, 0xCu);
    }
    int v31 = *(_DWORD *)(v7 + 5208);
    int v32 = *(_DWORD *)(v7 + 5212);
    if ((unint64_t)(v32 * (uint64_t)v31) > 0x41F8000)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315906;
        *(void *)&uint8_t buf[4] = "AppleAVDWrapperFghrnDecoderStartSession";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v31;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v32;
        *(_WORD *)&unsigned char buf[24] = 2048;
        *(void *)&buf[26] = 69173248;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): error: width (%d) * height (%d) exceeds limit (%llu).\n", buf, 0x22u);
      }
      uint64_t HeaderBuffer = 4294954387;
      goto LABEL_79;
    }
    if (*(_DWORD *)(v7 + 5560))
    {
      time_t v66 = 0;
      setlocale(0, (const char *)&unk_223AED972);
      time(&v66);
      uint64_t v33 = localtime(&v66);
      strftime(__s, 0x14uLL, "%m%d%g_%H%M%S", v33);
      v65.tv_sec = 0;
      *(void *)&v65.tv_usec = 0;
      uint64_t v64 = 0;
      gettimeofday(&v65, &v64);
      snprintf(__str, 5uLL, "_%03d", v65.tv_usec / 1000);
      strlen(__str);
      __strncat_chk();
      strcpy(v78, "-decOutput.ivf");
      qmemcpy(v61, "/var/mobile/Library/Caches/com.apple.videocodecd/com.apple.apple", sizeof(v61));
      strcpy((char *)buf, "/var/mobile/Library/Caches/com.apple.videocodecd/com.apple.appleavd/");
      strlen(__s);
      __strncat_chk();
      strlen(v78);
      __strncat_chk();
      strcpy(v75, "-decEncrOut.ivf");
      __filename[1] = v61[1];
      __filename[2] = v61[2];
      v77[0] = v61[3];
      strcpy((char *)v77 + 13, "pleavd/");
      __filename[0] = v61[0];
      strlen(__s);
      __strncat_chk();
      strlen(v75);
      __strncat_chk();
      strcpy(v70, "-decPropertyLog.txt");
      v74[0] = v61[3];
      strcpy((char *)v74 + 13, "pleavd/");
      long long v72 = v61[1];
      long long v73 = v61[2];
      *(_OWORD *)BOOL v71 = v61[0];
      strlen(__s);
      __strncat_chk();
      strlen(v70);
      __strncat_chk();
      int v34 = fopen((const char *)buf, "wbx");
      *(void *)(v7 + 5568) = v34;
      if (!v34)
      {
        *(void *)(v7 + 5568) = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v68 = 136315138;
          int v69 = buf;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD Fghrn dump: could not open file %s\n", v68, 0xCu);
        }
      }
      unsigned int v35 = fopen((const char *)__filename, "wbx");
      *(void *)(v7 + 5576) = v35;
      if (!v35)
      {
        *(void *)(v7 + 5576) = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v68 = 136315138;
          int v69 = __filename;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD Fghrn dump: could not open file %s\n", v68, 0xCu);
        }
      }
      unsigned int v36 = fopen(v71, "wbx");
      *(void *)(v7 + 5584) = v36;
      if (!v36)
      {
        *(void *)(v7 + 5584) = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v68 = 136315138;
          int v69 = v71;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD Fghrn dump: could not open property log file %s\n", v68, 0xCu);
        }
      }
      unsigned int v37 = *(FILE **)(v7 + 5576);
      if (v37) {
        WriteIVFHeader(v37, *(_DWORD *)(v7 + 5208), *(_DWORD *)(v7 + 5212));
      }
      uint64_t v38 = *(FILE **)(v7 + 5568);
      if (v38) {
        WriteIVFHeader(v38, *(_DWORD *)(v7 + 5208), *(_DWORD *)(v7 + 5212));
      }
    }
    else
    {
      *(void *)(v7 + 5584) = 0;
      *(_OWORD *)(v7 + 5568) = 0u;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = *(_DWORD *)(v7 + 5312) >> 4;
      int v40 = v22[199];
      int v41 = *(_DWORD *)(v7 + 5320);
      int v42 = *(_DWORD *)(v7 + 5324);
      int v43 = *(_DWORD *)(v7 + 5328);
      int v44 = *(_DWORD *)(v7 + 5332);
      int v45 = v22[200];
      int v46 = v22[143];
      int v47 = v22[144];
      int v48 = v22[145];
      *(_DWORD *)long long buf = 67111680;
      *(_DWORD *)&uint8_t buf[4] = v39;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v39;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v40;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v41;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&buf[28] = v42;
      *(_WORD *)&uint8_t buf[32] = 1024;
      *(_DWORD *)&buf[34] = v43;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v44;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v45;
      *(_WORD *)&buf[50] = 1024;
      *(_DWORD *)&buf[52] = v46;
      *(_WORD *)&buf[56] = 1024;
      *(_DWORD *)&buf[58] = v47;
      *(_WORD *)&buf[62] = 1024;
      *(_DWORD *)&uint8_t buf[64] = v48;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_FghrnVideoDecoder  %d %d %d %d %d %d %d %d %d %d %d\n", buf, 0x44u);
    }
    int v49 = v22[144];
    if ((v49 | 2) == 2 && v49 == v22[145])
    {
      *long long v22 = 1;
      *(_DWORD *)(v7 + 5204) = 1;
      v22[447] = 1;
      if ((isEligibleToUseCompression(*(_DWORD *)(v7 + 5224), *(_DWORD *)(v7 + 5208), *(_DWORD *)(v7 + 5212), *(_DWORD *)(v7 + 5216), *(_DWORD *)(v7 + 5220)) & 1) == 0)
      {
        *(_DWORD *)(v7 + 5556) = 0;
        goto LABEL_84;
      }
      uint64_t HeaderBuffer = InitPixelBufferCompressionSupported(*(void *)v7, *(void *)(v7 + 5184), *(_DWORD *)(v7 + 5224), *(_DWORD *)(v7 + 5208), *(_DWORD *)(v7 + 5212), *(_DWORD *)(v7 + 5216), *(_DWORD *)(v7 + 5220), v22[144], v22[143], v22[200], *(void *)(v7 + 5528), 8, 0, 0, 0, (CFTypeRef *)(v7 + 40), (CFTypeRef *)(v7 + 56), 0, 0,
                       0);
      if (!HeaderBuffer)
      {
        uint64_t HeaderBuffer = GetIOSurfaceTypeFromPool(*(CVPixelBufferPoolRef *)(v7 + 40), (_DWORD *)(v7 + 5556));
        if (!HeaderBuffer)
        {
          uint64_t HeaderBuffer = GetNoSecondWriteFlag(*(__CVPixelBufferPool **)(v7 + 40), v22 + 447);
          if (!HeaderBuffer)
          {
            int v50 = *(_DWORD *)(v7 + 5556);
            if (v50)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                int v51 = v22[144] + 8;
                int v52 = v22[143];
                *(_DWORD *)long long buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = v50;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v51;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v52;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD:  Compressed buffers enabled! CompressionType:%d. luma depth %d chroma format %d", buf, 0x14u);
              }
              if (*(_DWORD *)(v7 + 5224) == 20 && v22[144] == 2)
              {
                int v53 = v22[143];
                if (v22[143])
                {
                  unsigned int v54 = *(_DWORD *)(v7 + 5216);
                  unsigned int v55 = *(_DWORD *)(v7 + 5220);
                  if (v53 == 2)
                  {
                    v54 >>= 1;
                  }
                  else if (v53 == 1)
                  {
                    v54 >>= 1;
                    v55 >>= 1;
                  }
                  long long v22 = v63;
                  if (((((v55 + 15) >> 4) * ((v54 + 15) >> 4)) & 1) != 0
                    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)long long buf = 0;
                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: FGH chroma plane with odd number of IMBs is unspported on Salvia A0", buf, 2u);
                  }
                }
              }
              goto LABEL_88;
            }
LABEL_84:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v57 = v22[144] + 8;
              int v58 = v22[143];
              *(_DWORD *)long long buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v57;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v58;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD:  Compressed buffers disabled! luma depth %d chroma format %d", buf, 0xEu);
            }
            uint64_t HeaderBuffer = InitPixelBufferCompressionNotSupported(v7);
            if (HeaderBuffer) {
              goto LABEL_79;
            }
            uint64_t HeaderBuffer = GetNoSecondWriteFlagDisp(a2, v22 + 447);
            if (HeaderBuffer) {
              goto LABEL_79;
            }
LABEL_88:
            uint64_t HeaderBuffer = 0;
            if (v22[144]) {
              int v59 = 2019963440;
            }
            else {
              int v59 = 875704422;
            }
            if (v22[144]) {
              int v60 = 2016686640;
            }
            else {
              int v60 = 875704438;
            }
            if (v22[200]) {
              int v60 = v59;
            }
            *(_DWORD *)(v7 + 5636) = v60;
            *(_DWORD *)(v7 + 5552) = 2;
            goto LABEL_81;
          }
        }
      }
    }
    else
    {
      uint64_t HeaderBuffer = 4294954385;
    }
LABEL_79:
    FigFormatDescriptionRelease();
    *(void *)(v7 + 24) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperFghrnDecoderStartSession";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = HeaderBuffer;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
    }
LABEL_81:
    pthread_mutex_unlock(v62);
    kdebug_trace();
    return HeaderBuffer;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "AppleAVDWrapperFghrnDecoderStartSession";
    int v9 = &_os_log_internal;
    __int16 v10 = "AppleAVD: ERROR: %s no instance storage!";
    uint32_t v11 = 12;
    goto LABEL_7;
  }
  return 4294954387;
}

uint64_t AppleAVDWrapperFghrnDecoderDecodeFrame(uint64_t a1, uint64_t a2, void *a3, char a4, int *a5)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  memset(v98, 0, 68);
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v118.value) = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDWrapperFghrnDecoderDecodeFrame - ERROR! storage is NULL\n", (uint8_t *)&v118, 2u);
    }
    return 311;
  }
  uint64_t v10 = DerivedStorage;
  unint64_t v87 = a5;
  kdebug_trace();
  kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 5248));
  ++*(_DWORD *)(v10 + 5628);
  CMTimeFlags v11 = *(_DWORD *)(v10 + 5552);
  if (v11 != 2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v118.value) = 136315394;
      *(CMTimeValue *)((char *)&v118.value + 4) = (CMTimeValue)"AppleAVDWrapperFghrnDecoderDecodeFrame";
      LOWORD(v118.flags) = 1024;
      *(CMTimeFlags *)((char *)&v118.flags + 2) = v11;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s called on plugin in state %d", (uint8_t *)&v118, 0x12u);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 5248));
    return 311;
  }
  if (!Fghrn_shouldDecodeFrame(v10, a3))
  {
    kdebug_trace();
    VTDecoderSessionEmitDecodedFrame();
    if (v87) {
      *unint64_t v87 = 2;
    }
    goto LABEL_68;
  }
  DataBuffer = CMSampleBufferGetDataBuffer((CMSampleBufferRef)a3);
  CMTimeValue v13 = (CMTimeValue)DataBuffer;
  if (!DataBuffer || (Dataunsigned int Length = CMBlockBufferGetDataLength(DataBuffer)) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v118.value) = 134218240;
      *(CMTimeValue *)((char *)&v118.value + 4) = v13;
      LOWORD(v118.flags) = 2048;
      *(void *)((char *)&v118.flags + 2) = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR:  either dataBuffer=%p is invalid or dataLength=%zu is invalid!", (uint8_t *)&v118, 0x16u);
    }
    kdebug_trace();
    CMTimeScale inited = -12909;
    VTDecoderSessionEmitDecodedFrame();
    if (v87) {
      *unint64_t v87 = 2;
    }
    goto LABEL_65;
  }
  theSourceBuffer = (OpaqueCMBlockBuffer *)v13;
  if (*(_DWORD *)(v10 + 5416) == 6) {
    goto LABEL_7;
  }
  uint64_t Decryptor = FigSampleBufferGetDecryptor();
  long long v22 = (const void *)Decryptor;
  if (*(_DWORD *)(v10 + 5204) == 1 && !Decryptor)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_28:
      kdebug_trace();
      VTDecoderSessionEmitDecodedFrame();
      goto LABEL_68;
    }
    v118.value = 0x104000200;
    LOWORD(v118.timescale) = 2048;
    *(void *)((char *)&v118.timescale + 2) = v10;
    long long v23 = &_os_log_internal;
    int v24 = "AppleAVD: AppleAVD_FghrnVideoDecoder: frame# %d, session: %p, decryptor attachment is NULL \n";
    uint32_t v25 = 18;
LABEL_27:
    _os_log_impl(&dword_223977000, v23, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v118, v25);
    goto LABEL_28;
  }
  if (Decryptor && Decryptor != *(void *)(v10 + 5192))
  {
    LODWORD(rhs.value) = *(_DWORD *)(v10 + 5416);
    lhs.value = 0;
    NativeSessiouint64_t n = FigCPECryptorGetNativeSession(Decryptor, (uint64_t)&lhs);
    if (NativeSession)
    {
      CMTimeScale inited = NativeSession;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = *(_DWORD *)(v10 + 5204);
        LODWORD(v118.value) = 67109376;
        HIDWORD(v118.value) = v29;
        LOWORD(v118.timescale) = 1024;
        *(CMTimeScale *)((char *)&v118.timescale + 2) = inited;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_FghVideoDecoder: frame# %d, FigCPECryptorGetNativeSession returned err %d \n", (uint8_t *)&v118, 0xEu);
      }
      kdebug_trace();
      goto LABEL_64;
    }
    CMTimeScale v56 = AppleAVDSetParameter(*(void *)(v10 + 5184), 25, (unsigned __int8 *)&rhs);
    if (v56)
    {
      CMTimeScale inited = v56;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_60;
      }
      int v57 = *(_DWORD *)(v10 + 5204);
      LODWORD(v118.value) = 67109376;
      HIDWORD(v118.value) = v57;
      LOWORD(v118.timescale) = 1024;
      *(CMTimeScale *)((char *)&v118.timescale + 2) = inited;
      int v58 = &_os_log_internal;
      int v59 = "AppleAVD: AppleAVD_FghVideoDecoder: frame# %d, Could not set kAppleAVDSetCryptScheme, err %d\n";
LABEL_121:
      _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, v59, (uint8_t *)&v118, 0xEu);
      goto LABEL_60;
    }
    CMTimeScale v62 = AppleAVDSetParameter(*(void *)(v10 + 5184), 26, (unsigned __int8 *)lhs.value);
    if (v62)
    {
      CMTimeScale inited = v62;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_60;
      }
      int v63 = *(_DWORD *)(v10 + 5204);
      LODWORD(v118.value) = 67109376;
      HIDWORD(v118.value) = v63;
      LOWORD(v118.timescale) = 1024;
      *(CMTimeScale *)((char *)&v118.timescale + 2) = inited;
      int v58 = &_os_log_internal;
      int v59 = "AppleAVD: AppleAVD_FghVideoDecoder: frame# %d, Could not set kAppleAVDSetCryptRef, err %d\n";
      goto LABEL_121;
    }
    uint64_t v65 = *(void *)(v10 + 5528);
    int v97 = 0;
    CMTimeScale ExternalProtectionMethods = FigCPECryptorGetExternalProtectionMethods((uint64_t)v22, (uint64_t)&v97);
    if (ExternalProtectionMethods)
    {
      CMTimeScale inited = ExternalProtectionMethods;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_60;
      }
      int v67 = *(_DWORD *)(v10 + 5204);
      LODWORD(v118.value) = 67109376;
      HIDWORD(v118.value) = v67;
      LOWORD(v118.timescale) = 1024;
      *(CMTimeScale *)((char *)&v118.timescale + 2) = inited;
      int v58 = &_os_log_internal;
      int v59 = "AppleAVD: AppleAVD_FghVideoDecoder: frame# %d, FigCPECryptorGetExternalProtectionMethods, err %d\n";
      goto LABEL_121;
    }
    uint64_t v68 = 3;
    if ((v97 & 1) == 0) {
      uint64_t v68 = 1;
    }
    unint64_t v69 = 7;
    if ((v97 & 2) == 0) {
      unint64_t v69 = v68;
    }
    if (*(void *)(v10 + 5528) == v69) {
      goto LABEL_127;
    }
    *(void *)(v10 + 5528) = v69;
    if (*(_DWORD *)(v10 + 5556))
    {
      CMTimeScale inited = InitPixelBufferCompressionSupported(*(void *)v10, *(void *)(v10 + 5184), *(_DWORD *)(v10 + 5224), *(_DWORD *)(v10 + 5208), *(_DWORD *)(v10 + 5212), *(_DWORD *)(v10 + 5216), *(_DWORD *)(v10 + 5220), *(unsigned __int8 *)(v10 + 5345), *(unsigned __int8 *)(v10 + 5344), *(unsigned __int8 *)(v10 + 5401), v69, 8, 0, 0, 0, (CFTypeRef *)(v10 + 40), (CFTypeRef *)(v10 + 56), 0, 0,
                 0);
      if (inited) {
        goto LABEL_151;
      }
      CMTimeScale v80 = GetNoSecondWriteFlag(*(__CVPixelBufferPool **)(v10 + 40), (BOOL *)(v10 + 5648));
    }
    else
    {
      CMTimeScale inited = InitPixelBufferCompressionNotSupported(v10);
      if (inited) {
        goto LABEL_151;
      }
      CMTimeScale v80 = GetNoSecondWriteFlagDisp(*(void *)v10, (BOOL *)(v10 + 5648));
    }
    CMTimeScale inited = v80;
    if (!v80)
    {
LABEL_127:
      int v70 = *(const void **)(v10 + 5192);
      if (v22 != v70)
      {
        if (v70) {
          CFRelease(v70);
        }
        *(void *)(v10 + 5192) = v22;
        CFRetain(v22);
      }
      goto LABEL_131;
    }
LABEL_151:
    *(void *)(v10 + 5528) = v65;
    kdebug_trace();
    VTDecoderSessionEmitDecodedFrame();
    if (v87) {
      *unint64_t v87 = 2;
    }
    goto LABEL_65;
  }
LABEL_131:
  if (*(_DWORD *)(v10 + 5416) != 4
    || (CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)a3, 0)) == 0
    || (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) == 0)
  {
LABEL_7:
    BytePtr = 0;
    unint64_t v82 = 0;
    goto LABEL_8;
  }
  CFDictionaryRef v73 = ValueAtIndex;
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x263F00FC0]);
  if (Value)
  {
    CFDataRef v75 = Value;
    unsigned int Length = CFDataGetLength(Value);
    if (Length >= 0x11)
    {
      CMTimeFlags v77 = Length;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v118.value) = 136315394;
        *(CMTimeValue *)((char *)&v118.value + 4) = (CMTimeValue)"AppleAVDWrapperFghrnDecoderDecodeFrame";
        LOWORD(v118.flags) = 1024;
        *(CMTimeFlags *)((char *)&v118.flags + 2) = v77;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s oversized iv %d", (uint8_t *)&v118, 0x12u);
      }
      CMTimeScale inited = 313;
      goto LABEL_65;
    }
    unsigned int v83 = Length;
    v120.length = CFDataGetLength(v75);
    v120.locatiouint64_t n = 0;
    CFDataGetBytes(v75, v120, (UInt8 *)(v10 + 5508));
    *(_DWORD *)(v10 + 5504) = v83;
  }
  CFDataRef v78 = (const __CFData *)CFDictionaryGetValue(v73, (const void *)*MEMORY[0x263F00FC8]);
  if (!v78)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    LODWORD(v118.value) = 136315138;
    *(CMTimeValue *)((char *)&v118.value + 4) = (CMTimeValue)"AppleAVDWrapperFghrnDecoderDecodeFrame";
    long long v23 = &_os_log_internal;
    int v24 = "AppleAVD: %s() ERROR: CryptorSubsampleAuxiliaryData is NULL";
    uint32_t v25 = 12;
    goto LABEL_27;
  }
  CFDataRef v79 = v78;
  BytePtr = CFDataGetBytePtr(v78);
  unint64_t v82 = (unint64_t)CFDataGetLength(v79) >> 3;
LABEL_8:
  CMTime v96 = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
  CMTime v95 = v96;
  CMSampleBufferGetOutputDuration(&v118, (CMSampleBufferRef)a3);
  long long v14 = *(_OWORD *)&v118.value;
  *(void *)(v10 + 5484) = v118.epoch;
  *(_OWORD *)(v10 + 5468) = v14;
  if ((*(_DWORD *)(v10 + 5480) & 0x1D) == 1)
  {
    int32_t v15 = (uint64_t *)(v10 + 5468);
    if ((*(_DWORD *)(v10 + 5432) & 0x1D) == 1)
    {
      uint64_t v16 = v10 + 5420;
      CMSampleBufferGetDecodeTimeStamp(&v96, (CMSampleBufferRef)a3);
      CMTime lhs = v96;
      CMTime rhs = *(CMTime *)(v10 + 5420);
      CMTimeSubtract(&v118, &lhs, &rhs);
      long long v17 = *(_OWORD *)&v118.value;
      *(void *)(v10 + 5484) = v118.epoch;
      *(_OWORD *)int32_t v15 = v17;
      *(_OWORD *)(v10 + 5420) = *(_OWORD *)&v96.value;
      CMTimeEpoch epoch = v96.epoch;
    }
    else
    {
      CMSampleBufferGetPresentationTimeStamp(&v95, (CMSampleBufferRef)a3);
      uint64_t v16 = v10 + 5444;
      CMTime lhs = v95;
      CMTime rhs = *(CMTime *)(v10 + 5444);
      CMTimeSubtract(&v118, &lhs, &rhs);
      long long v30 = *(_OWORD *)&v118.value;
      *(void *)(v10 + 5484) = v118.epoch;
      *(_OWORD *)int32_t v15 = v30;
      *(_OWORD *)(v10 + 5444) = *(_OWORD *)&v95.value;
      CMTimeEpoch epoch = v95.epoch;
    }
    *(void *)(v16 + 16) = epoch;
    if (*v15 < 1) {
      double v26 = 0.0;
    }
    else {
      double v26 = (double)*(int *)(v10 + 5476) / (double)*v15;
    }
    int v27 = v87;
    *(double *)(v10 + 5496) = v26;
  }
  else
  {
    double v26 = *(double *)(v10 + 5496);
    int v27 = v87;
  }
  if (((int)(v26 + 0.5) - 1025) < 0xFFFFFC00) {
    int v31 = 1;
  }
  else {
    int v31 = (int)(v26 + 0.5);
  }
  bzero(v99, 0x888uLL);
  if (!*(_DWORD *)(v10 + 5548))
  {
    uint64_t v32 = v10 + 5344;
    if (*(_DWORD *)(v10 + 5544))
    {
      int v33 = 2;
LABEL_50:
      int v101 = v33;
      goto LABEL_51;
    }
LABEL_49:
    int v33 = 1;
    goto LABEL_50;
  }
  uint64_t v32 = v10 + 5344;
  if ((a4 & 4) == 0) {
    goto LABEL_49;
  }
LABEL_51:
  int v109 = v31;
  int v104 = 0;
  CMTimeScale v103 = 0;
  char v111 = 0;
  int v110 = 0;
  uint64_t v112 = 0;
  unsigned int v108 = 0;
  uint64_t v113 = *(void *)v10;
  uint64_t v114 = a2;
  int v115 = 0;
  char v116 = *(unsigned char *)(v32 + 304);
  if (a4)
  {
    char v102 = 0;
    int v34 = theSourceBuffer;
    if (v27) {
      *v27 |= 1u;
    }
  }
  else
  {
    char v102 = 1;
    int v34 = theSourceBuffer;
  }
  uint64_t v91 = 0;
  unint64_t v92 = 0;
  destinatiouint64_t n = 0;
  uint64_t v90 = 0;
  CMTimeScale DecoderSuperFrameOffsetInfo = getDecoderSuperFrameOffsetInfo(v34, v98, *(__int16 *)(v10 + 5412));
  if (DecoderSuperFrameOffsetInfo < 0)
  {
    CMTimeScale inited = DecoderSuperFrameOffsetInfo;
LABEL_60:
    kdebug_trace();
LABEL_64:
    VTDecoderSessionEmitDecodedFrame();
    goto LABEL_65;
  }
  uint64_t v36 = v98[0];
  if (!v98[0])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v118.value) = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_FghrnVideoDecoder ERROR, there's no frame to decode\n", (uint8_t *)&v118, 2u);
    }
    kdebug_trace();
    CMTimeScale inited = -12909;
    goto LABEL_64;
  }
  if (*(_DWORD *)(v10 + 5416) == 4)
  {
    long long v106 = *(_OWORD *)(v10 + 5508);
    int v37 = *(_DWORD *)(v10 + 5504);
  }
  else
  {
    int v37 = 0;
  }
  uint64_t v41 = 0;
  unsigned int v42 = 0;
  int v105 = v37;
  int v88 = 0;
  uint64_t v84 = v98[0];
  while (1)
  {
    int v43 = &v98[v41];
    int v44 = v43[9];
    int v45 = v43[1];
    if (++v41 == v36) {
      int v46 = 2;
    }
    else {
      int v46 = 1;
    }
    if (v36 == 1) {
      int v46 = 0;
    }
    unint64_t v92 = __PAIR64__(v46, DataLength);
    int v47 = *(_DWORD *)(v10 + 5204);
    *(void *)(v10 + 8 * v47 + 64) = a2;
    if (v27) {
      int v48 = *v27;
    }
    else {
      int v48 = 0;
    }
    unsigned int v49 = v45 + v44;
    *(_DWORD *)(v10 + 4 * v47 + 4160) = v48;
    destinatiouint64_t n = 0;
    uint64_t v90 = v45 + v44 - v42;
    LODWORD(v91) = v47;
    CMTimeScale v50 = AppleAVDGetParameter(*(void *)(v10 + 5184), 8, (uint64_t)&destination);
    if (v50)
    {
      CMTimeScale inited = v50;
      kdebug_trace();
      VTDecoderSessionEmitDecodedFrame();
      if (v27) {
        *int v27 = 2;
      }
      goto LABEL_65;
    }
    int v51 = (unsigned __int8 *)destination;
    if (CMBlockBufferCopyDataBytes(theSourceBuffer, v42, v49 - v42, destination))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v118.value) = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING, fail to copy data bytes, nothing to decode", (uint8_t *)&v118, 2u);
      }
      kdebug_trace();
      VTDecoderSessionEmitDecodedFrame();
      AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 5184), DataLength, v51);
      if (v27) {
        *int v27 = 0;
      }
      goto LABEL_106;
    }
    v99[0] = v51;
    v99[1] = v49 - v42;
    int v100 = *(_DWORD *)(v10 + 5204);
    int v117 = 0;
    AppleAVDSetParameter(*(void *)(v10 + 5184), 39, (unsigned __int8 *)&v92);
    unsigned int v108 = 0;
    if (v82)
    {
      if (*(_DWORD *)(v10 + 5416) == 4)
      {
        if (BytePtr)
        {
          populateDecoderCryptor(v99, (uint64_t)BytePtr, v82, v49, &v88);
          if (v108)
          {
            unint64_t v52 = 0;
            while (1)
            {
              unsigned int v53 = v107[v52];
              if (v53 < v42) {
                break;
              }
              v107[v52++] = v53 - v42;
              if (v52 >= v108) {
                goto LABEL_88;
              }
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v118.value) = 67109376;
              HIDWORD(v118.value) = v53;
              LOWORD(v118.timescale) = 1024;
              *(CMTimeScale *)((char *)&v118.timescale + 2) = v42;
              uint64_t v38 = &_os_log_internal;
              int v39 = "AppleAVD: AppleAVD_FghrnVideoDecoder ERROR: Slice Offset = %d < %d is invalid\n";
              uint32_t v40 = 14;
              goto LABEL_67;
            }
            goto LABEL_68;
          }
        }
      }
    }
LABEL_88:
    unsigned int v54 = *(FILE **)(v10 + 5576);
    if (v54) {
      WriteFrame(v54, v51, v49 - v42, v49 - v42, *(_DWORD *)(v10 + 5204));
    }
    if (AppleAVDDecodeFrame(*(void *)(v10 + 5184), (uint64_t)v99)) {
      break;
    }
    unsigned int v55 = *(FILE **)(v10 + 5568);
    if (v55) {
      WriteFrame(v55, v51, v49 - v42, v49 - v42, *(_DWORD *)(v10 + 5204));
    }
    ++*(_DWORD *)(v10 + 5204);
    int v105 = 0;
    unsigned int v42 = v49;
    uint64_t v36 = v84;
    int v27 = v87;
    if (v41 == v84) {
      goto LABEL_68;
    }
  }
  kdebug_trace();
  VTDecoderSessionEmitDecodedFrame();
  AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 5184), DataLength, v51);
  if (v87) {
    *unint64_t v87 = 2;
  }
  CMTimeScale inited = v103;
  BOOL v60 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (!inited)
  {
    if (v60)
    {
      int v64 = *(_DWORD *)(v10 + 5204);
      LODWORD(v118.value) = 67109120;
      HIDWORD(v118.value) = v64;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_FghVideoDecoder_DecodeFrame ERROR: framenum %d kVTVideoDecoderMalfunctionErr", (uint8_t *)&v118, 8u);
    }
LABEL_106:
    CMTimeScale inited = -12911;
    goto LABEL_65;
  }
  if (v60)
  {
    int v61 = *(_DWORD *)(v10 + 5204);
    LODWORD(v118.value) = 67109376;
    HIDWORD(v118.value) = v61;
    LOWORD(v118.timescale) = 1024;
    *(CMTimeScale *)((char *)&v118.timescale + 2) = inited;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_FghVideoDecoder_DecodeFrame ERROR: framenum %d decryptError %x", (uint8_t *)&v118, 0xEu);
    CMTimeScale inited = v103;
    if (!v103) {
      goto LABEL_68;
    }
  }
LABEL_65:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v118.value) = 136315394;
    *(CMTimeValue *)((char *)&v118.value + 4) = (CMTimeValue)"AppleAVDWrapperFghrnDecoderDecodeFrame";
    LOWORD(v118.flags) = 1024;
    *(CMTimeFlags *)((char *)&v118.flags + 2) = inited;
    uint64_t v38 = &_os_log_internal;
    int v39 = "AppleAVD: %s(): failed with error %d\n";
    uint32_t v40 = 18;
LABEL_67:
    _os_log_impl(&dword_223977000, v38, OS_LOG_TYPE_DEFAULT, v39, (uint8_t *)&v118, v40);
  }
LABEL_68:
  pthread_mutex_unlock((pthread_mutex_t *)(v10 + 5248));
  kdebug_trace();
  return 0;
}

uint64_t AppleAVDWrapperFghrnDecoderCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  pthread_once(&sCreateSupportedPropertyDictionaryOnce, Fghrn_createSupportedPropertyDictionary);
  uint64_t result = 4294954392;
  if (a2)
  {
    if (sFghrnVideoDecoderSupportedPropertyDictionary)
    {
      CFTypeRef v4 = CFRetain((CFTypeRef)sFghrnVideoDecoderSupportedPropertyDictionary);
      uint64_t result = 0;
      *a2 = v4;
    }
  }
  return result;
}

uint64_t AppleAVDWrapperFghrnDecoderStartTileSession(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    int v44 = "AppleAVDWrapperFghrnDecoderStartTileSession";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): enter", buf, 0xCu);
  }
  CFTypeRef v41 = 0;
  CFTypeRef cf = 0;
  v57[0] = 875704438;
  int v40 = 1;
  CVPixelBufferRef v38 = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 CFPreferenceNumber = VideoDecoder_getCFPreferenceNumber(@"AVD_CoreSelect", @"com.apple.coremedia", 32);
  pthread_mutex_init((pthread_mutex_t *)(DerivedStorage + 5248), 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 5248));
  *(void *)(DerivedStorage + 8) = a2;
  *(_DWORD *)(DerivedStorage + 16) = 1;
  FigFormatDescriptionRelease();
  uint64_t v7 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
  *(void *)(DerivedStorage + 24) = v7;
  uint64_t Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(v7);
  *(void *)(DerivedStorage + 5232) = 0;
  *(_DWORD *)(DerivedStorage + 5240) = 0;
  *(_DWORD *)(DerivedStorage + 5208) = Dimensions;
  *(_DWORD *)(DerivedStorage + 5216) = Dimensions;
  *(_DWORD *)(DerivedStorage + 5312) = Dimensions;
  *(_DWORD *)(DerivedStorage + 5212) = HIDWORD(Dimensions);
  *(_DWORD *)(DerivedStorage + 5220) = HIDWORD(Dimensions);
  *(_DWORD *)(DerivedStorage + 5316) = HIDWORD(Dimensions);
  Extensiouint64_t n = (const __CFBoolean *)CMFormatDescriptionGetExtension(a3, (CFStringRef)*MEMORY[0x263F00E68]);
  if (Extension) {
    LOBYTE(Extension) = CFBooleanGetValue(Extension);
  }
  *(unsigned char *)(DerivedStorage + 5401) = (_BYTE)Extension;
  *(_DWORD *)(DerivedStorage + 5204) = 1;
  *(_DWORD *)(DerivedStorage + 5612) = 3;
  *(unsigned char *)(DerivedStorage + 5648) = 1;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int32_t v10 = *(_DWORD *)(DerivedStorage + 5208);
    int32_t v11 = *(_DWORD *)(DerivedStorage + 5212);
    *(_DWORD *)long long buf = 136316418;
    int v44 = "AppleAVDWrapperFghrnDecoderStartTileSession";
    __int16 v45 = 1024;
    int32_t v46 = v10;
    __int16 v47 = 1024;
    int32_t v48 = v11;
    __int16 v49 = 2048;
    *(void *)CMTimeScale v50 = DerivedStorage;
    *(_WORD *)&v50[8] = 2080;
    int v51 = "22:55:22";
    *(_WORD *)unint64_t v52 = 2080;
    *(void *)&v52[2] = "Nov 14 2024";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: AV1, %d x %d, session: %p, built %s %s", buf, 0x36u);
  }
  uint64_t HeaderBuffer = CreateHeaderBuffer(DerivedStorage, a3);
  if (HeaderBuffer)
  {
    uint64_t v13 = HeaderBuffer;
    Mutable = 0;
    goto LABEL_37;
  }
  if (*(unsigned char *)(DerivedStorage + 5345)) {
    unint64_t v15 = 69173248;
  }
  else {
    unint64_t v15 = 276692992;
  }
  if ((int)Dimensions * (uint64_t)SHIDWORD(Dimensions) > v15)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315906;
      int v44 = "AppleAVDWrapperFghrnDecoderStartTileSession";
      __int16 v45 = 1024;
      int32_t v46 = Dimensions;
      __int16 v47 = 1024;
      int32_t v48 = HIDWORD(Dimensions);
      __int16 v49 = 2048;
      *(void *)CMTimeScale v50 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): error: width (%d) * height (%d) exceeds limit (%llu).\n", buf, 0x22u);
    }
    Mutable = 0;
    uint64_t v13 = 4294954387;
    goto LABEL_37;
  }
  int AVDFghrnInstance = CreateAVDFghrnInstance(DerivedStorage, CFPreferenceNumber);
  BOOL v17 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (AVDFghrnInstance)
  {
    if (v17)
    {
      *(_DWORD *)long long buf = 136315138;
      int v44 = "AppleAVDWrapperFghrnDecoderStartTileSession";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR: CreateAVDFghrnInstance returned error", buf, 0xCu);
    }
    Mutable = 0;
    if (AVDFghrnInstance == -536870210) {
      uint64_t v13 = 4294954383;
    }
    else {
      uint64_t v13 = 4294954385;
    }
    goto LABEL_37;
  }
  if (v17)
  {
    int32_t v18 = *(unsigned __int8 *)(DerivedStorage + 5400);
    int32_t v19 = *(_DWORD *)(DerivedStorage + 5320);
    int v20 = *(_DWORD *)(DerivedStorage + 5324);
    int v21 = *(_DWORD *)(DerivedStorage + 5328);
    int v22 = *(_DWORD *)(DerivedStorage + 5332);
    int v23 = *(unsigned __int8 *)(DerivedStorage + 5401);
    int v24 = *(unsigned __int8 *)(DerivedStorage + 5344);
    int v25 = *(unsigned __int8 *)(DerivedStorage + 5345);
    int v26 = *(unsigned __int8 *)(DerivedStorage + 5346);
    *(_DWORD *)long long buf = 136317442;
    int v44 = "AppleAVDWrapperFghrnDecoderStartTileSession";
    __int16 v45 = 1024;
    int32_t v46 = v18;
    __int16 v47 = 1024;
    int32_t v48 = v19;
    __int16 v49 = 1024;
    *(_DWORD *)CMTimeScale v50 = v20;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v21;
    LOWORD(v51) = 1024;
    *(_DWORD *)((char *)&v51 + 2) = v22;
    HIWORD(v51) = 1024;
    *(_DWORD *)unint64_t v52 = v23;
    *(_WORD *)&uint8_t v52[4] = 1024;
    *(_DWORD *)&v52[6] = v24;
    __int16 v53 = 1024;
    int v54 = v25;
    __int16 v55 = 1024;
    int v56 = v26;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s():  %d %d %d %d %d %d %d %d %d\n", buf, 0x42u);
  }
  uint64_t v27 = *(unsigned __int8 *)(DerivedStorage + 5345);
  if ((v27 | 2) != 2 || v27 != *(unsigned __int8 *)(DerivedStorage + 5346)) {
    goto LABEL_35;
  }
  createPixelFormatList(v27, *(unsigned __int8 *)(DerivedStorage + 5344), *(unsigned __int8 *)(DerivedStorage + 5401), 1, v57, &v40, 0, *(_DWORD *)(DerivedStorage + 5224), 0, 0, 0);
  int v28 = *(_DWORD *)(DerivedStorage + 5216);
  if (v28 >= -1) {
    int v29 = v28 + 1;
  }
  else {
    int v29 = v28 + 2;
  }
  unsigned int v30 = v29 & 0xFFFFFFFE;
  *(_DWORD *)(DerivedStorage + 5216) = v29 & 0xFFFFFFFE;
  int v31 = *(_DWORD *)(DerivedStorage + 5220);
  if (v31 >= -1) {
    int v32 = v31 + 1;
  }
  else {
    int v32 = v31 + 2;
  }
  *(_DWORD *)(DerivedStorage + 5220) = v32 & 0xFFFFFFFE;
  if (!CreateDispPixelBufferAttributesDictionary(*(_DWORD *)(DerivedStorage + 5224), Dimensions, SHIDWORD(Dimensions), v30, v32 & 0xFFFFFFFE, (char *)v57, v40, 0, (__CFDictionary **)&cf))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECF0], 8);
    setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECE8], 8);
    setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECE0], 64);
    setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECB0], 0x10000);
    setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECD0], 64);
    setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECB8], 0x10000);
    setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECD8], 64);
    setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECA0], 262080);
    setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECC8], 64);
    setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECC0], 64);
    VTTileDecoderSessionSetTileDecodeRequirements();
    if (CreateUncompressedPixelBufferAttributesDictionary(*(_DWORD *)(DerivedStorage + 5224), Dimensions, SHIDWORD(Dimensions), *(_DWORD *)(DerivedStorage + 5216), *(_DWORD *)(DerivedStorage + 5220), (char *)v57, v40, 0, (__CFDictionary **)&v41))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136315138;
      int v44 = "AppleAVDWrapperFghrnDecoderStartTileSession";
      int v34 = &_os_log_internal;
      unsigned int v35 = "AppleAVD: %s(): ERROR: CreatePixelBufferAttributesDictionary failed";
    }
    else
    {
      CFAllocatorRef v36 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (int)Dimensions, Dimensions >> 32, v57[0], (CFDictionaryRef)v41, &pixelBufferOut))
      {
        if (AppleAVDSetParameter(*(void *)(DerivedStorage + 5184), 29, (unsigned __int8 *)pixelBufferOut))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315138;
            int v44 = "AppleAVDWrapperFghrnDecoderStartTileSession";
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR: AppleAVDSetParameter:kAppleAVDSetTileCVPixelBufRefDecode failed", buf, 0xCu);
          }
          int v37 = pixelBufferOut;
          if (!pixelBufferOut) {
            goto LABEL_36;
          }
        }
        else
        {
          if (CVPixelBufferCreate(v36, (int)Dimensions, Dimensions >> 32, v57[0], (CFDictionaryRef)v41, &v38))
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_36;
            }
            *(_DWORD *)long long buf = 136315138;
            int v44 = "AppleAVDWrapperFghrnDecoderStartTileSession";
            int v34 = &_os_log_internal;
            unsigned int v35 = "AppleAVD: %s(): ERROR: CVPixelBufferCreate failed";
            goto LABEL_52;
          }
          if (!AppleAVDSetParameter(*(void *)(DerivedStorage + 5184), 30, (unsigned __int8 *)v38))
          {
            uint64_t v13 = 0;
            *(unsigned char *)(DerivedStorage + 5201) = 1;
            *(_DWORD *)(DerivedStorage + 5552) = 2;
            goto LABEL_39;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315138;
            int v44 = "AppleAVDWrapperFghrnDecoderStartTileSession";
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR: AppleAVDSetParameter:kAppleAVDSetTileCVPixelBufPostProcess failed", buf, 0xCu);
          }
          int v37 = v38;
          if (!v38) {
            goto LABEL_36;
          }
        }
        CVPixelBufferRelease(v37);
        goto LABEL_36;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136315138;
      int v44 = "AppleAVDWrapperFghrnDecoderStartTileSession";
      int v34 = &_os_log_internal;
      unsigned int v35 = "AppleAVD: %s(): ERROR: CVPixelBufferCreate failed";
    }
LABEL_52:
    _os_log_impl(&dword_223977000, v34, OS_LOG_TYPE_DEFAULT, v35, buf, 0xCu);
    goto LABEL_36;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    int v44 = "AppleAVDWrapperFghrnDecoderStartTileSession";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR: CreateDispPixelBufferAttributesDictionary failed", buf, 0xCu);
  }
LABEL_35:
  Mutable = 0;
LABEL_36:
  uint64_t v13 = 4294954385;
LABEL_37:
  FigFormatDescriptionRelease();
  *(void *)(DerivedStorage + 24) = 0;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    int v44 = "AppleAVDWrapperFghrnDecoderStartTileSession";
    __int16 v45 = 1024;
    int32_t v46 = v13;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
LABEL_39:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v41)
  {
    CFRelease(v41);
    CFTypeRef v41 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 5248));
  return v13;
}

uint64_t AppleAVDWrapperFghrnDecoderDecodeTile(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, _DWORD *a9)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = (pthread_mutex_t *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperFghrnDecoderDecodeTile";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() - ERROR! storage is NULL\n", buf, 0xCu);
    }
    return 311;
  }
  uint64_t v15 = (uint64_t)DerivedStorage;
  uint64_t v16 = DerivedStorage + 82;
  pthread_mutex_lock(DerivedStorage + 82);
  int v17 = *(_DWORD *)(v15 + 5552);
  if (v17 != 2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperFghrnDecoderDecodeTile";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s called on plugin in state %d", buf, 0x12u);
    }
    pthread_mutex_unlock(v16);
    return 311;
  }
  int v44 = v16;
  int32_t v18 = a9;
  if (!Fghrn_shouldDecodeFrame(v15, a3))
  {
    MEMORY[0x223CBAC70](*(void *)(v15 + 8), a2, 4294954385, 2, 0);
    if (a9) {
      *a9 = 2;
    }
    goto LABEL_27;
  }
  DataBuffer = CMSampleBufferGetDataBuffer((CMSampleBufferRef)a3);
  int v20 = DataBuffer;
  if (!DataBuffer) {
    goto LABEL_71;
  }
  Dataunsigned int Length = CMBlockBufferGetDataLength(DataBuffer);
  if (CMBlockBufferGetDataLength(v20) != DataLength && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "AppleAVDWrapperFghrnDecoderDecodeTile";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3101;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  unsigned int v43 = CMBlockBufferGetDataLength(v20);
  int32_t v18 = a9;
  if (!v43)
  {
LABEL_71:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR:  either tile dataBuffer=%p is invalid or dataLength=%u is invalid!", buf, 0x12u);
    }
    uint64_t v23 = *(void *)(v15 + 8);
    int v24 = -12909;
    uint64_t v25 = a2;
    uint64_t v26 = 4294954387;
    goto LABEL_21;
  }
  bzero(v53, 0x888uLL);
  if (*(_DWORD *)(v15 + 5548))
  {
    if ((a8 & 4) != 0) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  if (!*(_DWORD *)(v15 + 5544))
  {
LABEL_30:
    int v27 = 1;
    goto LABEL_31;
  }
  int v27 = 2;
LABEL_31:
  int v55 = v27;
LABEL_32:
  uint64_t v58 = 0;
  int v57 = 0;
  uint64_t v59 = 0x100000000;
  char v61 = 1;
  int v63 = 0;
  uint64_t v60 = a7;
  uint64_t v62 = a6;
  if (a8)
  {
    char v56 = 0;
    if (a9) {
      *a9 |= 1u;
    }
  }
  else
  {
    char v56 = 1;
  }
  int v66 = 0;
  memset(buf, 0, sizeof(buf));
  uint64_t v47 = 0;
  unint64_t v48 = 0;
  destinatiouint64_t n = 0;
  uint64_t v46 = 0;
  int DecoderSuperFrameOffsetInfo = getDecoderSuperFrameOffsetInfo(v20, (int *)buf, 0);
  if ((DecoderSuperFrameOffsetInfo & 0x80000000) == 0)
  {
    uint64_t v29 = *(unsigned int *)buf;
    if (*(_DWORD *)buf)
    {
      unsigned int v30 = 0;
      int v31 = &buf[36];
      uint64_t v32 = *(unsigned int *)buf;
      while (1)
      {
        int v33 = *(_DWORD *)v31;
        int v34 = *((_DWORD *)v31 - 8);
        if (v32 == 1) {
          int v35 = 2;
        }
        else {
          int v35 = 1;
        }
        uint64_t v36 = v29;
        if (v29 == 1) {
          int v35 = 0;
        }
        unint64_t v48 = __PAIR64__(v35, v43);
        int v37 = *(_DWORD *)(v15 + 5204);
        *(void *)(v15 + 8 * v37 + 2112) = a2;
        int v38 = v18 ? *v18 : 0;
        unsigned int v39 = v34 + v33;
        *(_DWORD *)(v15 + 4 * v37 + 4160) = v38;
        destinatiouint64_t n = 0;
        uint64_t v46 = v34 + v33 - v30;
        LODWORD(v47) = v37;
        int v40 = AppleAVDGetParameter(*(void *)(v15 + 5184), 8, (uint64_t)&destination);
        if (v40) {
          break;
        }
        CFTypeRef v41 = (unsigned __int8 *)destination;
        if (CMBlockBufferCopyDataBytes(v20, v30, v39 - v30, destination))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int16 v49 = 0;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING, fail to copy data bytes, nothing to decode", v49, 2u);
          }
          MEMORY[0x223CBAC70](*(void *)(v15 + 8), a2, 4294954385, 2, 0);
          AppleAVDReleaseCurrentInputBuffer(*(void *)(v15 + 5184), v43, v41);
          if (a9) {
            *a9 = 2;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
LABEL_67:
            int v42 = *(_DWORD *)(v15 + 5204);
            *(_DWORD *)__int16 v49 = 67109120;
            LODWORD(v50) = v42;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_FghVideoDecoder_DecodeTile ERROR: framenum %d kVTVideoDecoderMalfunctionErr", v49, 8u);
          }
LABEL_68:
          int v24 = -12911;
          goto LABEL_23;
        }
        v53[0] = v41;
        v53[1] = v39 - v30;
        int v54 = *(_DWORD *)(v15 + 5204);
        int v64 = 0;
        AppleAVDSetParameter(*(void *)(v15 + 5184), 39, (unsigned __int8 *)&v48);
        if (AppleAVDDecodeFrame(*(void *)(v15 + 5184), (uint64_t)v53))
        {
          MEMORY[0x223CBAC70](*(void *)(v15 + 8), a2, 4294954385, 2, 0);
          AppleAVDReleaseCurrentInputBuffer(*(void *)(v15 + 5184), v43, v41);
          if (a9) {
            *a9 = 2;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_67;
          }
          goto LABEL_68;
        }
        v31 += 4;
        ++*(_DWORD *)(v15 + 5204);
        unsigned int v30 = v39;
        --v32;
        uint64_t v29 = v36;
        int32_t v18 = a9;
        if (!v32) {
          goto LABEL_27;
        }
      }
      int v24 = v40;
      MEMORY[0x223CBAC70](*(void *)(v15 + 8), a2, 4294954385, 2, 0);
      if (a9) {
        *a9 = 2;
      }
    }
    else
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int16 v49 = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_FghrnVideoDecoder ERROR, there's no frame to decode\n", v49, 2u);
      }
      MEMORY[0x223CBAC70](*(void *)(v15 + 8), a2, 4294954385, 0, 0);
      int v24 = -12909;
    }
    goto LABEL_23;
  }
  int v24 = DecoderSuperFrameOffsetInfo;
  uint64_t v23 = *(void *)(v15 + 8);
  uint64_t v25 = a2;
  uint64_t v26 = 4294954385;
LABEL_21:
  MEMORY[0x223CBAC70](v23, v25, v26, 2, 0);
  if (v18) {
    *int32_t v18 = 2;
  }
LABEL_23:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int16 v49 = 136315394;
    CMTimeScale v50 = "AppleAVDWrapperFghrnDecoderDecodeTile";
    __int16 v51 = 1024;
    int v52 = v24;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", v49, 0x12u);
  }
LABEL_27:
  pthread_mutex_unlock(v44);
  return 0;
}

uint64_t CreateAVDFghrnInstance(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v28 = 0;
  int CFPreferenceNumber = VideoDecoder_getCFPreferenceNumber(@"AVD_AvdEnforceEntitlement", @"com.apple.coremedia", 1);
  *(_DWORD *)(a1 + 5608) = CFPreferenceNumber;
  uint64_t v5 = AppleAVDOpenConnection(&v28, 4, CFPreferenceNumber, a2);
  if (v5) {
    return v5;
  }
  uint64_t v7 = v28;
  *(void *)(a1 + 5184) = v28;
  *(_DWORD *)(a1 + 5552) = 1;
  if (*(_DWORD *)(a1 + 5596) != -1)
  {
    *(_DWORD *)uint64_t v29 = *(_DWORD *)(a1 + 5596);
    if (AppleAVDSetParameter(v7, 41, v29)
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_FghVideoDecoder ERROR: kAppleAVDMemCacheMode set failed", buf, 2u);
    }
    uint64_t v7 = *(void *)(a1 + 5184);
  }
  int v27 = *(_DWORD *)(a1 + 5592);
  if (AppleAVDSetParameter(v7, 50, (unsigned __int8 *)&v27)
    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: CreateAVDFghrnInstance ERROR: kAppleAVDSetTryEveryFrame set failed", v29, 2u);
  }
  int v26 = *(_DWORD *)(a1 + 5416);
  uint64_t v8 = AppleAVDSetParameter(*(void *)(a1 + 5184), 25, (unsigned __int8 *)&v26);
  if (v8)
  {
    uint64_t v5 = v8;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return v5;
    }
    int v9 = *(_DWORD *)(a1 + 5204);
    *(_DWORD *)uint64_t v29 = 67109376;
    *(_DWORD *)unsigned int v30 = v9;
    *(_WORD *)&v30[4] = 1024;
    *(_DWORD *)&v30[6] = v5;
    int32_t v10 = &_os_log_internal;
    int32_t v11 = "AppleAVD: AppleAVD_LgrnVideoDecoder: frame# %d, Could not set kAppleAVDSetCryptScheme, err %d\n";
    __int16 v12 = v29;
    uint32_t v13 = 14;
LABEL_14:
    _os_log_impl(&dword_223977000, v10, OS_LOG_TYPE_DEFAULT, v11, v12, v13);
    return v5;
  }
  *(void *)long long buf = DisplayCallBack;
  uint64_t v5 = AppleAVDSetParameter(v28, 1, buf);
  if (v5) {
    return v5;
  }
  uint64_t v5 = AppleAVDSetParameter(v28, 2, (unsigned __int8 *)a1);
  if (v5) {
    return v5;
  }
  if (AppleAVDSetParameter(*(void *)(a1 + 5184), 52, (unsigned __int8 *)(a1 + 5600))
    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)unsigned int v30 = "CreateAVDFghrnInstance";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetOnDemandDVAMap failed", v29, 0xCu);
  }
  if (AppleAVDSetParameter(*(void *)(a1 + 5184), 53, (unsigned __int8 *)(a1 + 5632))
    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)unsigned int v30 = "CreateAVDFghrnInstance";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetAVDCoreControlPerfWeight failed", v29, 0xCu);
  }
  if (AppleAVDSetParameter(*(void *)(a1 + 5184), 56, (unsigned __int8 *)(a1 + 5604))
    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)unsigned int v30 = "CreateAVDFghrnInstance";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetMiscPreferences failed", v29, 0xCu);
  }
  int v24 = 256;
  AppleAVDSetParameter(v28, 14, (unsigned __int8 *)&v24);
  *(void *)(a1 + 5616) = 0;
  int v14 = IOSurfaceAcceleratorCreate();
  if (v14)
  {
    int v15 = v14;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v29 = 136315394;
      *(void *)unsigned int v30 = "CreateAVDFghrnInstance";
      *(_WORD *)&v30[8] = 1024;
      *(_DWORD *)&v30[10] = v15;
      uint64_t v16 = &_os_log_internal;
      int v17 = "AppleAVD: %s(): Error (0x%x) creating IOSurfaceAccelerator client.";
      uint32_t v18 = 18;
LABEL_32:
      _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, v17, v29, v18);
    }
  }
  else if (AppleAVDSetParameter(*(void *)(a1 + 5184), 60, (unsigned __int8 *)(a1 + 5616)) {
         && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  }
  {
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)unsigned int v30 = "CreateAVDFghrnInstance";
    uint64_t v16 = &_os_log_internal;
    int v17 = "AppleAVD: %s(): ERROR setting kAppleAVDSetMsrRef failed";
    uint32_t v18 = 12;
    goto LABEL_32;
  }
  if (AppleAVDSetParameter(*(void *)(a1 + 5184), 61, (unsigned __int8 *)(a1 + 5612))
    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)unsigned int v30 = "CreateAVDFghrnInstance";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetAv1FilmGrainMode failed", v29, 0xCu);
  }
  if (AppleAVDSetParameter(*(void *)(a1 + 5184), 70, (unsigned __int8 *)(a1 + 5649))
    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)unsigned int v30 = "CreateAVDFghrnInstance";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetAllowBitstreamToChangeFrameDimensions failed", v29, 0xCu);
  }
  *(_OWORD *)&v30[4] = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v33 = 0;
  *(_DWORD *)uint64_t v29 = 4;
  *(void *)unsigned int v30 = *(void *)(a1 + 5208);
  *(void *)&v30[12] = *(void *)(a1 + 5232);
  LODWORD(v31) = *(_DWORD *)(a1 + 5240);
  int v19 = *(unsigned __int8 *)(a1 + 5344);
  LODWORD(v32) = *(unsigned __int8 *)(a1 + 5345);
  DWORD1(v32) = v19;
  HIDWORD(v32) = *(_DWORD *)(a1 + 5624);
  uint64_t v20 = AppleAVDInitializeDecoder(*(void *)(a1 + 5184), (unsigned int *)v29);
  if (v20)
  {
    uint64_t v5 = v20;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return v5;
    }
    *(_WORD *)uint64_t v23 = 0;
    int32_t v10 = &_os_log_internal;
    int32_t v11 = "AppleAVD: AppleAVD_FghrnVideoDecoder ERROR: AppleAVDInitializeDecoder : init decoder device";
    goto LABEL_45;
  }
  uint64_t v21 = AppleAVDGetParameter(v28, 9, a1 + 5224);
  if (v21)
  {
    uint64_t v5 = v21;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return v5;
    }
    *(_WORD *)uint64_t v23 = 0;
    int32_t v10 = &_os_log_internal;
    int32_t v11 = "AppleAVD: AppleAVD_FghrnDecoder - AppleAVDDeviceType returned ERROR";
    goto LABEL_45;
  }
  if (*(_DWORD *)(a1 + 16) != 1)
  {
    uint64_t v22 = AppleAVDGetParameter(*(void *)(a1 + 5184), 13, a1 + 5312);
    if (v22)
    {
      uint64_t v5 = v22;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v5;
      }
      *(_WORD *)uint64_t v23 = 0;
      int32_t v10 = &_os_log_internal;
      int32_t v11 = "AppleAVD: AppleAVD_FghrnDecoder ERROR: kAppleAVDGetSequenceParams : Could not get Params";
LABEL_45:
      __int16 v12 = v23;
      uint32_t v13 = 2;
      goto LABEL_14;
    }
  }
  if (*(_DWORD *)(a1 + 5312) >= 0x40u && *(_DWORD *)(a1 + 5316) > 0x3Fu) {
    return 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_FghrnVideoDecoder ERROR: Unsupported picture size!", v23, 2u);
  }
  return 305;
}

size_t WriteIVFHeader(FILE *__stream, __int16 a2, __int16 a3)
{
  int __ptr = 1179208516;
  v10[3] = 0;
  strcpy((char *)v10, "AV01 ");
  __int16 v9 = a2;
  __int16 v8 = a3;
  int v7 = 90000;
  int v6 = 1;
  int v5 = 26999942;
  fwrite(&__ptr, 1uLL, 4uLL, __stream);
  fwrite(&v10[3], 1uLL, 2uLL, __stream);
  fwrite(&v10[2], 1uLL, 2uLL, __stream);
  fwrite(v10, 1uLL, 4uLL, __stream);
  fwrite(&v9, 1uLL, 2uLL, __stream);
  fwrite(&v8, 1uLL, 2uLL, __stream);
  fwrite(&v7, 1uLL, 4uLL, __stream);
  fwrite(&v6, 1uLL, 4uLL, __stream);
  fwrite(&v5, 1uLL, 4uLL, __stream);
  return fwrite(&v10[3], 1uLL, 4uLL, __stream);
}

BOOL Fghrn_shouldDecodeFrame(uint64_t a1, void *target)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  CFTypeRef v4 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x263F015E0], 0);
  if (v4 && CFEqual(v4, (CFTypeRef)*MEMORY[0x263EFFB40]))
  {
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v5)
    {
      int v23 = 136315138;
      int v24 = "Fghrn_shouldDecodeFrame";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(), found incomplete progressive sample! Quitting.", (uint8_t *)&v23, 0xCu);
      return 0;
    }
    return result;
  }
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)target, 0);
  if (!SampleAttachmentsArray
    || (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) == 0)
  {
    *(unsigned char *)(a1 + 5540) = 0;
    return 1;
  }
  CFDictionaryRef v9 = ValueAtIndex;
  CFDataRef Value = CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x263F01008]);
  int32_t v11 = CFDictionaryGetValue(v9, (const void *)*MEMORY[0x263F01018]);
  __int16 v12 = CFDictionaryGetValue(v9, (const void *)*MEMORY[0x263F01020]);
  int v13 = *(_DWORD *)(a1 + 5536);
  if (v13 == 3)
  {
    if (v11)
    {
      int v14 = (CFTypeRef *)MEMORY[0x263EFFB38];
      int v15 = v11;
      goto LABEL_15;
    }
LABEL_18:
    BOOL v16 = 1;
    goto LABEL_19;
  }
  if (v13 == 2)
  {
    if (v11 && !CFEqual(v11, (CFTypeRef)*MEMORY[0x263EFFB38]))
    {
      if (!v12)
      {
        BOOL v16 = 0;
        goto LABEL_19;
      }
      int v14 = (CFTypeRef *)MEMORY[0x263EFFB40];
      int v15 = v12;
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  if (v13 != 1 || !Value) {
    goto LABEL_18;
  }
  int v14 = (CFTypeRef *)MEMORY[0x263EFFB40];
  int v15 = Value;
LABEL_15:
  BOOL v16 = CFEqual(v15, *v14) != 0;
LABEL_19:
  int v17 = (unsigned char *)(a1 + 5540);
  uint32_t v18 = (const void *)*MEMORY[0x263EFFB40];
  BOOL v20 = (v11 != (const void *)*MEMORY[0x263EFFB40] || v12 == v18) && v16;
  if (*(unsigned char *)(a1 + 5540)) {
    BOOL result = v20;
  }
  else {
    BOOL result = v16;
  }
  if (v11 != v18 || v12 == v18)
  {
    *int v17 = 0;
  }
  else
  {
    char v22 = Value == (const void *)*MEMORY[0x263EFFB38] || result;
    if ((v22 & 1) == 0)
    {
      BOOL result = 0;
      *int v17 = 1;
    }
  }
  return result;
}

uint64_t FigCPECryptorGetNativeSession(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigCPECryptorGetExternalProtectionMethods(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t getDecoderSuperFrameOffsetInfo(OpaqueCMBlockBuffer *a1, int *a2, unsigned int a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  Dataunsigned int Length = CMBlockBufferGetDataLength(a1);
  *a2 = 0;
  if (!DataLength) {
    return 0;
  }
  size_t v7 = DataLength;
  __int16 v8 = (unsigned __int8 *)malloc_type_malloc(DataLength, 0x12E1C35DuLL);
  if (!v8) {
    return 4294954392;
  }
  CFDictionaryRef v9 = v8;
  if (CMBlockBufferCopyDataBytes(a1, 0, v7, v8))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v21 = "getDecoderSuperFrameOffsetInfo";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: ERROR, fail to copy data bytes", buf, 0xCu);
    }
    return 4294954387;
  }
  else
  {
    int32_t v11 = v9;
    uint64_t v12 = v7;
    while (1)
    {
      uint32_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t next_frame = av1_get_next_frame(v11, v12, 0, 0, a3, &v18, &v19);
      if ((next_frame & 0x80000000) != 0)
      {
        puts("Parser av1_get_next_frame() function return fail!");
        goto LABEL_22;
      }
      int v13 = v18;
      if (!v18) {
        goto LABEL_22;
      }
      uint64_t v14 = v19;
      int32_t v11 = &v18[v19];
      int v15 = (unsigned __int8 *)(&v18[v19] - v9);
      if (v7 < (unint64_t)v15) {
        break;
      }
      BOOL v16 = &a2[*a2];
      v16[9] = v18 - v9;
      v16[1] = v14;
      LODWORD(v16) = *a2 + 1;
      *a2 = (int)v16;
      if (v16 >= 8)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          uint64_t v21 = "getDecoderSuperFrameOffsetInfo";
          __int16 v22 = 1024;
          LODWORD(v23) = 2070;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: Warning, out of memory on line %d\n", buf, 0x12u);
        }
        goto LABEL_22;
      }
      uint64_t v12 = v7 - (void)v15;
      if ((unsigned __int8 *)v7 == v15) {
        goto LABEL_22;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136316162;
      uint64_t v21 = "getDecoderSuperFrameOffsetInfo";
      __int16 v22 = 2048;
      uint64_t v23 = v14;
      __int16 v24 = 2048;
      uint64_t v25 = v11;
      __int16 v26 = 2048;
      int v27 = v9;
      __int16 v28 = 2048;
      uint64_t v29 = v13;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: ERROR, frame size %llu is probably bogus, pBuff=%p pBuffBegin=%p frameStart=%p\n", buf, 0x34u);
    }
    uint64_t next_frame = 4294954387;
LABEL_22:
    free(v9);
  }
  return next_frame;
}

size_t WriteFrame(FILE *__stream, const void *a2, int a3, unsigned int a4, int a5)
{
  int v10 = 33 * a5;
  int __ptr = a3;
  int v9 = 0;
  fwrite(&__ptr, 1uLL, 4uLL, __stream);
  fwrite(&v10, 1uLL, 4uLL, __stream);
  fwrite(&v9, 1uLL, 4uLL, __stream);
  return fwrite(a2, 1uLL, a4, __stream);
}

CFDictionaryRef Fghrn_createFrameTypesArrayElement(const void *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v1 = (void *)*MEMORY[0x263F1E740];
  uint64_t v4 = a1;
  keys = v1;
  CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)&keys, &v4, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v2 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    size_t v7 = "Fghrn_createFrameTypesArrayElement";
    __int16 v8 = 2080;
    int v9 = "frameTypeDict";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", buf, 0x16u);
  }
  return v2;
}

CAHDecViolaLgh *createViolaLghDecoder(CAVDLghDecoder *a1)
{
  CFDictionaryRef v2 = (CAHDecViolaLgh *)operator new(0xC48uLL, MEMORY[0x263F8C180]);
  CFNumberRef v3 = v2;
  if (v2) {
    CAHDecViolaLgh::CAHDecViolaLgh(v2, a1);
  }
  return v3;
}

void sub_223A3A9A8(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecViolaLgh::CAHDecViolaLgh(CAHDecViolaLgh *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73EAB0;
  *(_DWORD *)(v1 + 456) = 150180;
  *(_DWORD *)(v1 + 8) = 676;
  *(_OWORD *)(v1 + 16) = xmmword_223ADA920;
  *(_DWORD *)(v1 + 32) = 1;
  *(void *)(v1 + 56) = *(void *)(v1 + 256);
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecViolaLgh::CAHDecViolaLgh(CAHDecViolaLgh *this, CAVDLghDecoder *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73EAB0;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 150180;
  *(_DWORD *)(v4 + 8) = 676;
  *(_OWORD *)(v4 + 16) = xmmword_223ADA920;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 150180, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      int v17 = "CAHDecViolaLgh";
      __int16 v18 = 1024;
      int v19 = 0;
      uint64_t v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
LABEL_16:
      _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v7);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v8;
    *((void *)this + 34) = v8;
    uint64_t v9 = *((void *)this + 32);
    *(_DWORD *)(v9 + 17552) = 0;
    bzero((void *)(v9 + 11792), 0xB00uLL);
    *(_OWORD *)(v9 + 5712) = 0u;
    bzero((void *)(*((void *)this + 32) + 14608), 0xB00uLL);
    bzero((char *)this + 464, 0x4D0uLL);
    uint64_t v10 = (_OWORD *)*((void *)this + 32);
    v10[356] = 0u;
    v10[355] = 0u;
    v10[354] = 0u;
    v10[353] = 0u;
    v10[352] = 0u;
    v10[351] = 0u;
    v10[350] = 0u;
    v10[349] = 0u;
    v10[348] = 0u;
    v10[347] = 0u;
    v10[346] = 0u;
    v10[345] = 0u;
    v10[344] = 0u;
    v10[343] = 0u;
    v10[342] = 0u;
    v10[341] = 0u;
    v10[340] = 0u;
    v10[339] = 0u;
    v10[338] = 0u;
    v10[337] = 0u;
    v10[336] = 0u;
    v10[335] = 0u;
    bzero((char *)this + 1696, 0x580uLL);
    for (uint64_t i = 3072; i != 3776; i += 176)
    {
      uint64_t v12 = (_OWORD *)(*((void *)this + 32) + i);
      v12[9] = 0uLL;
      v12[10] = 0uLL;
      v12[7] = 0uLL;
      v12[8] = 0uLL;
      v12[5] = 0uLL;
      v12[6] = 0uLL;
      v12[3] = 0uLL;
      v12[4] = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *uint64_t v12 = 0uLL;
    }
    do
    {
      int v13 = (_OWORD *)(*((void *)this + 32) + i);
      v13[9] = 0uLL;
      v13[10] = 0uLL;
      v13[7] = 0uLL;
      v13[8] = 0uLL;
      v13[5] = 0uLL;
      v13[6] = 0uLL;
      v13[3] = 0uLL;
      v13[4] = 0uLL;
      v13[1] = 0uLL;
      v13[2] = 0uLL;
      *int v13 = 0uLL;
      i += 176;
    }
    while (i != 5184);
    uint64_t v14 = (_OWORD *)*((void *)this + 32);
    v14[334] = 0u;
    v14[333] = 0u;
    v14[332] = 0u;
    v14[331] = 0u;
    v14[330] = 0u;
    v14[329] = 0u;
    v14[328] = 0u;
    v14[327] = 0u;
    v14[326] = 0u;
    v14[325] = 0u;
    uint64_t v15 = 3072;
    v14[324] = 0u;
    do
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), 1913, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        int v16 = 136315650;
        int v17 = "CAHDecViolaLgh";
        __int16 v18 = 1024;
        int v19 = 180;
        __int16 v20 = 2080;
        uint64_t v21 = "probBuf";
        uint64_t v5 = &_os_log_internal;
        int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
        goto LABEL_15;
      }
      v15 += 176;
    }
    while (v15 != 3776);
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 5184), 12284, 7, 1, 0))return; {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    }
    {
      int v16 = 136315650;
      int v17 = "CAHDecViolaLgh";
      __int16 v18 = 1024;
      int v19 = 182;
      __int16 v20 = 2080;
      uint64_t v21 = "stateBuf";
      uint64_t v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_15:
      uint32_t v7 = 28;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_223A3AE08(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecViolaLgh::~CAHDecViolaLgh(CAHDecViolaLgh *this)
{
  *(void *)this = &unk_26D73EAB0;
  CAHDecViolaLgh::freeWorkBuf_SPS(this);
  uint64_t v2 = *((void *)this + 32);
  for (uint64_t i = 3072; i != 3776; i += 176)
  {
    if (*(void *)(v2 + i))
    {
      CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + i));
      uint64_t v2 = *((void *)this + 32);
      *(void *)(v2 + i) = 0;
    }
  }
  if (*(void *)(v2 + 5184))
  {
    CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + 5184));
    *(void *)(*((void *)this + 32) + 5184) = 0;
  }
  (*(void (**)(CAHDecViolaLgh *, void))(*(void *)this + 152))(this, 0);
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecViolaLgh::~CAHDecViolaLgh(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecViolaLgh::startPicture(CAHDecViolaLgh *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  CFNumberRef v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x24AA4uLL);
    uint64_t v5 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v5 + 16) = a2;
    *(_WORD *)(v5 + 24) = 257;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecViolaLgh::DecodePicture(CAHDecViolaLgh *this, int a2)
{
  if (CAHDecViolaLgh::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecViolaLgh *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecViolaLgh *))(*(void *)this + 48))(this);
  (*(void (**)(CAHDecViolaLgh *))(*(void *)this + 56))(this);
  CAHDecViolaLgh::populateTiles(this);
  (*(void (**)(CAHDecViolaLgh *, void))(*(void *)this + 88))(this, 0);
  (*(void (**)(CAHDecViolaLgh *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecViolaLgh::populateTiles(CAHDecViolaLgh *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 32) + 17560);
  unint64_t v2 = *(unsigned int *)(v1 + 312);
  if (v2)
  {
    unint64_t v4 = 0;
    int v5 = 0;
    LODWORD(v6) = *(_DWORD *)(v1 + 316);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34) + 676;
    uint64_t v8 = 2760;
    do
    {
      if (v6)
      {
        unint64_t v9 = 0;
        uint64_t v10 = v7 + 8 * v5;
        uint64_t v11 = v8;
        do
        {
          CAHDecViolaLgh::populateTileRegisters((uint64_t)this, v10, *(void *)(*((void *)this + 32) + 17560) + v11);
          ++v9;
          unint64_t v6 = *(unsigned int *)(v1 + 316);
          v11 += 28;
          v10 += 8;
        }
        while (v9 < v6);
        v5 += v9;
        unint64_t v2 = *(unsigned int *)(v1 + 312);
      }
      ++v4;
      v8 += 1792;
    }
    while (v4 < v2);
  }
  return 0;
}

uint64_t CAHDecViolaLgh::populateCommonRegisters(CAHDecViolaLgh *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000002;
  return 0;
}

uint64_t CAHDecViolaLgh::updateCommonRegisters(CAHDecViolaLgh *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecViolaLgh::populateSequenceRegisters(CAHDecViolaLgh *this)
{
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  *(_DWORD *)(v1 + 40) = 0;
  unsigned __int16 v3 = *(_DWORD *)(v2 + 108) - 1;
  *(_DWORD *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 40) = (v3 | ((unsigned __int16)*(_DWORD *)(v2 + 112) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 304);
  if (v4 >= 3) {
    int v5 = 6528;
  }
  else {
    int v5 = ((v4 & 3) << 7) | 0x1800;
  }
  *(_DWORD *)(v1 + 44) = v5;
  unsigned int v6 = v5 & 0xFFF87FFF | (((*(unsigned char *)(v2 + 105) + 8) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFF87FFFF | (((*(unsigned __int8 *)(v2 + 105) + 8) & 0xF) << 19) | 0x1000000;
  *(_DWORD *)(v1 + 44) = v7;
  *(_DWORD *)(v1 + 44) = v7 & 0xFDFFFFFF | (*(unsigned char *)(v2 + 304) == 4);
  return 0;
}

uint64_t CAHDecViolaLgh::populateDARTAddr(uint64_t this, unsigned int a2)
{
  uint64_t v2 = *(void *)(this + 256);
  int v3 = *(unsigned __int8 *)(v2 + 104 * a2 + 17548);
  unsigned int v4 = (_DWORD *)(v2 + 232 * a2);
  int v5 = *(_DWORD **)(this + 8 * v4[583] + 272);
  v5[72] = v5[72] & 0xFE000000 | ((v4[541] + v4[532]) >> 7);
  v5[74] = v5[74] & 0xFE000000 | ((v4[542] + v4[532]) >> 7);
  if (*(_DWORD *)(*(void *)(this + 256) + 2648) == 1)
  {
    unsigned int v6 = v4 + 532;
    uint64_t v7 = v2 + 232 * a2;
    v5[71] = v5[71] & 0xFE000000 | ((*(_DWORD *)(v7 + 2176) + *v6) >> 7);
    v5[73] = v5[73] & 0xFE000000 | ((*(_DWORD *)(v7 + 2180) + *v6) >> 7);
  }
  if (!v3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v5 + 78;
    do
    {
      uint64_t v10 = *(void *)(this + 256) + 104 * a2 + 17448;
      v9[3] = v9[3] & 0xFE000000 | ((*(_DWORD *)(*(void *)(v10 + v8) + 52)
                                                 + *(_DWORD *)(*(void *)(v10 + v8) + 16)) >> 7);
      v9[9] = v9[9] & 0xFE000000 | ((*(_DWORD *)(*(void *)(v10 + v8) + 56)
                                                 + *(_DWORD *)(*(void *)(v10 + v8) + 16)) >> 7);
      if (*(_DWORD *)(*(void *)(this + 256) + 2648) == 1)
      {
        unsigned int *v9 = *v9 & 0xFE000000 | ((*(_DWORD *)(*(void *)(v10 + v8) + 64)
                                               + *(_DWORD *)(*(void *)(v10 + v8) + 16)) >> 7);
        v9[6] = v9[6] & 0xFE000000 | ((*(_DWORD *)(*(void *)(v10 + v8) + 68)
                                                   + *(_DWORD *)(*(void *)(v10 + v8) + 16)) >> 7);
      }
      v8 += 16;
      ++v9;
    }
    while (v8 != 48);
  }
  return this;
}

uint64_t CAHDecViolaLgh::populatePictureRegisters(CAHDecViolaLgh *this)
{
  uint64_t v242 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v2 + 17560);
  if (*(unsigned char *)(v4 + 37))
  {
    int v5 = *(_DWORD *)(v4 + 100);
    int v6 = *(_DWORD *)(v2 + 11748);
    int v235 = 1 << v5;
    int v236 = 1 << *(_DWORD *)(v4 + 96);
    int v234 = v236 << v5;
    if (!*(unsigned char *)(v4 + 40))
    {
      char v7 = 0;
      int v8 = 766509056;
      goto LABEL_6;
    }
  }
  else
  {
    int v9 = *(_DWORD *)(v4 + 100);
    int v6 = *(_DWORD *)(v2 + 11748);
    int v235 = 1 << v9;
    int v236 = 1 << *(_DWORD *)(v4 + 96);
    int v234 = v236 << v9;
  }
  int v8 = 766517248;
  char v7 = 1;
LABEL_6:
  *(_DWORD *)(v3 + 48) = v8;
  int v10 = v8 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v3 + 48) = v10;
  *(_DWORD *)(v3 + 48) = v10 | ((*(_DWORD *)(*((void *)this + 32) + 2644) == 1) << 10) | 0x2E0;
  *(void *)(v3 + 52) = 0x2000000;
  LOWORD(v10) = *(_DWORD *)(v4 + 108) - 1;
  *(_DWORD *)(v3 + 56) = (unsigned __int16)v10;
  *(_DWORD *)(v3 + 56) = ((unsigned __int16)v10 | ((unsigned __int16)*(_DWORD *)(v4 + 112) << 16)) - 0x10000;
  *(void *)(v3 + 60) = 0;
  int v11 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2688) & 7;
  *(_DWORD *)(v3 + 64) = v11;
  unsigned int v12 = v11 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2692) & 1));
  *(_DWORD *)(v3 + 64) = v12;
  unsigned int v13 = v12 & 0xFFFFFF8F | (16 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2696) & 7));
  *(_DWORD *)(v3 + 64) = v13;
  unsigned int v14 = v13 & 0xFFFFFF7F | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2700) & 1) << 7);
  *(_DWORD *)(v3 + 64) = v14;
  unsigned int v15 = v14 & 0xFFFFF8FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2704) & 7) << 8);
  *(_DWORD *)(v3 + 64) = v15;
  unsigned int v16 = v15 & 0xFFFFF7FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2708) & 1) << 11);
  *(_DWORD *)(v3 + 64) = v16;
  unsigned int v17 = v16 & 0xFFFFCFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2712) & 3) << 12);
  *(_DWORD *)(v3 + 64) = v17;
  unsigned int v18 = v17 & 0xFFFFBFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2716) & 1) << 14);
  *(_DWORD *)(v3 + 64) = v18;
  unsigned int v19 = v18 & 0xFFFF7FFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2720) & 1) << 15);
  *(_DWORD *)(v3 + 64) = v19;
  unsigned int v20 = v19 & 0xFFF8FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2724) & 7) << 16);
  *(_DWORD *)(v3 + 64) = v20;
  unsigned int v21 = v20 & 0xFFF7FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2728) & 1) << 19);
  *(_DWORD *)(v3 + 64) = v21;
  unsigned int v22 = v21 & 0xFFEFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2732) & 1) << 20);
  *(_DWORD *)(v3 + 64) = v22;
  unsigned int v23 = v22 & 0xFFDFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2736) & 1) << 21);
  *(_DWORD *)(v3 + 64) = v23;
  unsigned int v24 = v23 & 0xFFBFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2740) & 1) << 22);
  *(_DWORD *)(v3 + 64) = v24;
  unsigned int v25 = v24 & 0xFF7FFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2744) & 1) << 23);
  *(_DWORD *)(v3 + 64) = v25;
  unsigned int v26 = v25 & 0xFEFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2748) & 1) << 24);
  *(_DWORD *)(v3 + 64) = v26;
  unsigned int v27 = v26 & 0xFDFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2752) & 1) << 25);
  *(_DWORD *)(v3 + 64) = v27;
  *(_DWORD *)(v3 + 64) = v27 & 0xFBFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2756) & 1) << 26);
  *(void *)(v3 + 68) = 0;
  if (*(unsigned char *)(v4 + 60))
  {
    int v28 = *(unsigned char *)(v4 + 69) & 0x7F;
    *(_DWORD *)(v3 + 68) = v28;
    unsigned int v29 = v28 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 68) & 0x7F) << 7);
    *(_DWORD *)(v3 + 68) = v29;
    unsigned int v30 = v29 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 67) & 0x7F) << 14);
    *(_DWORD *)(v3 + 68) = v30;
    unsigned int v31 = v30 & 0xF01FFFFF | ((*(unsigned char *)(v4 + 66) & 0x7F) << 21);
    *(_DWORD *)(v3 + 68) = v31;
    *(_DWORD *)(v3 + 68) = v31 & 0x8FFFFFFF | ((*(unsigned char *)(v4 + 59) & 7) << 28);
    int v32 = *(unsigned char *)(v4 + 73) & 0x7F;
    *(_DWORD *)(v3 + 72) = v32;
    unsigned int v33 = v32 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 72) & 0x7F) << 7);
    *(_DWORD *)(v3 + 72) = v33;
    unsigned int v34 = v33 & 0xFFF03FFF | ((*(unsigned char *)(v4 + 58) & 0x3F) << 14);
  }
  else
  {
    *(_DWORD *)(v3 + 68) = (*(unsigned char *)(v4 + 59) & 7) << 28;
    unsigned int v34 = (*(unsigned char *)(v4 + 58) & 0x3F) << 14;
  }
  uint64_t v35 = 0;
  *(_DWORD *)(v3 + 72) = v34;
  *(_DWORD *)(v3 + 76) = 0;
  int v36 = *(unsigned char *)(v4 + 77) & 0x1F;
  *(_DWORD *)(v3 + 76) = v36;
  unsigned int v37 = v36 & 0xFFFFFC1F | (32 * (*(unsigned char *)(v4 + 76) & 0x1F));
  *(_DWORD *)(v3 + 76) = v37;
  unsigned int v38 = v37 & 0xFFFF83FF | ((*(unsigned char *)(v4 + 75) & 0x1F) << 10);
  *(_DWORD *)(v3 + 76) = v38;
  *(_DWORD *)(v3 + 76) = v38 | (*(unsigned __int8 *)(v4 + 74) << 15);
  uint64_t v39 = v3 + 80;
  int v40 = (_WORD *)(v4 + 242);
  uint64_t v41 = v4 + 208;
  do
  {
    int v42 = *(unsigned __int8 *)(v4 + 78);
    *(_DWORD *)(v39 + v35) = 0;
    if (v42)
    {
      BOOL v43 = *(unsigned char *)(v41 + v35) != 0;
      *(_DWORD *)(v39 + v35) = v43;
      BOOL v44 = *(unsigned __int8 *)(v41 + v35 - 1) != 0;
    }
    else
    {
      BOOL v43 = 0;
      BOOL v44 = 0;
    }
    int v45 = v43 | (8 * v44);
    *(_DWORD *)(v39 + v35) = v45;
    unsigned int v46 = v45 & 0xFFFFFFF9 | (2 * (*v40 & 3));
    *(_DWORD *)(v39 + v35) = v46;
    if (v42)
    {
      int v47 = *(unsigned __int8 *)(v41 + v35 - 2);
      int v48 = v46 | ((*(unsigned char *)(v41 + v35 - 2) != 0) << 11);
      *(_DWORD *)(v39 + v35) = v48;
      if (v47) {
        LOWORD(v47) = *(v40 - 1);
      }
      unsigned int v49 = (16 * (v47 & 0x7F)) | v48 & 0xFFFFF80F;
      *(_DWORD *)(v39 + v35) = v49;
      int v42 = *(unsigned __int8 *)(v41 + v35 - 3);
      unsigned int v46 = v49 | ((v42 != 0) << 21);
      *(_DWORD *)(v39 + v35) = v46;
      if (v42) {
        LOWORD(v42) = *(v40 - 2);
      }
    }
    *(_DWORD *)(v39 + v35) = v46 & 0xFFE00FFF | ((v42 & 0x1FF) << 12);
    v35 += 4;
    v40 += 4;
  }
  while (v35 != 32);
  *(_DWORD *)(v3 + 152) = 0x20000;
  char v237 = v7;
  if (v7)
  {
    uint64_t v233 = 8;
  }
  else
  {
    int v232 = v6;
    CMTimeScale v50 = (_DWORD *)(v3 + 112);
    uint64_t v51 = 2178;
    uint64_t v233 = 3;
    int v52 = &_os_log_internal;
    do
    {
      v50[11] = 0x1000000;
      *CMTimeScale v50 = 0;
      unsigned __int16 v53 = **(_DWORD **)(*((void *)this + 32) + 8 * v51) - 1;
      *CMTimeScale v50 = v53;
      *CMTimeScale v50 = (v53 | ((unsigned __int16)*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v51) + 4) << 16))
           - 0x10000;
      v50[3] = 0;
      int v54 = (unsigned __int16)((**(_DWORD **)(*((void *)this + 32) + 8 * v51) << 14) / *(_DWORD *)(v4 + 108));
      v50[3] = v54;
      int v55 = v54 | ((unsigned __int16)((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v51) + 4) << 14)
                                    / *(_DWORD *)(v4 + 112)) << 16);
      v50[3] = v55;
      if ((v54 - 1024) >= 0x7C01 && os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        int v239 = "populatePictureRegisters";
        __int16 v240 = 1024;
        int v241 = 558;
        _os_log_impl(&dword_223977000, v52, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
        int v55 = v50[3];
      }
      if ((v55 - 0x4000000) >= 0x7C010000 && os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        int v239 = "populatePictureRegisters";
        __int16 v240 = 1024;
        int v241 = 559;
        _os_log_impl(&dword_223977000, v52, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
      }
      ++v51;
      ++v50;
    }
    while (v51 != 2181);
    int v6 = v232;
  }
  *(void *)(v3 + 144) = 0;
  int v56 = *(unsigned __int16 *)(v4 + 2672);
  *(_DWORD *)(v3 + 144) = v56;
  *(_DWORD *)(v3 + 144) = v56 | (*(_DWORD *)(v4 + 2676) << 16);
  int v57 = *(unsigned __int16 *)(v4 + 2680);
  *(_DWORD *)(v3 + 148) = v57;
  *(_DWORD *)(v3 + 148) = v57 | (*(_DWORD *)(v4 + 2684) << 16);
  uint64_t v58 = (char *)this + 464;
  for (uint64_t i = 168; i != 196; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v60 = *((void *)this + 33);
    int v61 = *(_DWORD *)(v60 + i);
    *(_DWORD *)(v60 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFu;
    uint64_t v62 = *((void *)this + 33);
    int v63 = *(_DWORD *)(v62 + i);
    *(_DWORD *)(v62 + i) = v61;
    if (*(void *)v58 || *((_DWORD *)v58 + 38) || *((_DWORD *)v58 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v58, i, 0, 0xFFFFFFFFLL, 8, v63, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 28) = *(_DWORD *)(*((void *)this + 33) + i + 28) & 0x800001FF | (((*((_DWORD *)this + 780) >> 9) & 0x3FFFFF) << 9);
    v58 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 224) = 0;
  uint64_t v65 = *((void *)this + 33);
  int v66 = *(_DWORD *)(v65 + 224);
  *(_DWORD *)(v65 + 224) = 0;
  *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFFu;
  uint64_t v67 = *((void *)this + 33);
  int v68 = *(_DWORD *)(v67 + 224);
  *(_DWORD *)(v67 + 224) = v66;
  uint64_t v69 = *((void *)this + 32);
  if (*(void *)(v69 + 5184) || *(_DWORD *)(v69 + 5336) || *(_DWORD *)(v69 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v69 + 5184), 224, 0, 0xFFFFFFFFLL, 8, v68, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 228) = 0;
  *(_DWORD *)(*((void *)this + 33) + 280) = 0;
  uint64_t v70 = *((void *)this + 33);
  int v71 = *(_DWORD *)(v70 + 280);
  *(_DWORD *)(v70 + 280) = 0;
  *(_DWORD *)(*((void *)this + 33) + 280) ^= 0xFFFFFFu;
  uint64_t v72 = *((void *)this + 33);
  int v73 = *(_DWORD *)(v72 + 280);
  *(_DWORD *)(v72 + 280) = v71;
  if (*((void *)this + 278) || *((_DWORD *)this + 594) || *((_DWORD *)this + 595))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 280, 0, 0xFFFFFFFFLL, 8, v73, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 232) = 0;
  uint64_t v74 = *((void *)this + 33);
  int v75 = *(_DWORD *)(v74 + 232);
  *(_DWORD *)(v74 + 232) = 0;
  *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFFu;
  uint64_t v76 = *((void *)this + 33);
  int v77 = *(_DWORD *)(v76 + 232);
  *(_DWORD *)(v76 + 232) = v75;
  if (*((void *)this + 234) || *((_DWORD *)this + 506) || *((_DWORD *)this + 507))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 232, 0, 0xFFFFFFFFLL, 8, v77, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 236) = 0;
  uint64_t v78 = *((void *)this + 33);
  int v79 = *(_DWORD *)(v78 + 236);
  *(_DWORD *)(v78 + 236) = 0;
  *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFFu;
  uint64_t v80 = *((void *)this + 33);
  int v81 = *(_DWORD *)(v80 + 236);
  *(_DWORD *)(v80 + 236) = v79;
  if (*((void *)this + 256) || *((_DWORD *)this + 550) || *((_DWORD *)this + 551))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 236, 0, 0xFFFFFFFFLL, 8, v81, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 240) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) = 0;
  uint64_t v82 = *((void *)this + 33);
  int v83 = *(_DWORD *)(v82 + 244);
  *(_DWORD *)(v82 + 244) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFFu;
  uint64_t v84 = *((void *)this + 33);
  int v85 = *(_DWORD *)(v84 + 244);
  *(_DWORD *)(v84 + 244) = v83;
  if (*((void *)this + 300) || *((_DWORD *)this + 638) || *((_DWORD *)this + 639))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 244, 0, 0xFFFFFFFFLL, 8, v85, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 248) = 0;
  uint64_t v86 = *((void *)this + 33);
  int v87 = *(_DWORD *)(v86 + 248);
  *(_DWORD *)(v86 + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFFu;
  uint64_t v88 = *((void *)this + 33);
  int v89 = *(_DWORD *)(v88 + 248);
  *(_DWORD *)(v88 + 248) = v87;
  if (*((void *)this + 322) || *((_DWORD *)this + 682) || *((_DWORD *)this + 683))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 248, 0, 0xFFFFFFFFLL, 8, v89, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
  uint64_t v90 = *((void *)this + 33);
  int v91 = *(_DWORD *)(v90 + 252);
  *(_DWORD *)(v90 + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFFu;
  uint64_t v92 = *((void *)this + 33);
  int v93 = *(_DWORD *)(v92 + 252);
  *(_DWORD *)(v92 + 252) = v91;
  if (*((void *)this + 344) || *((_DWORD *)this + 726) || *((_DWORD *)this + 727))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 252, 0, 0xFFFFFFFFLL, 8, v93, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 256) = 0;
  uint64_t v94 = *((void *)this + 33);
  int v95 = *(_DWORD *)(v94 + 256);
  *(_DWORD *)(v94 + 256) = 0;
  *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFFu;
  uint64_t v96 = *((void *)this + 33);
  int v97 = *(_DWORD *)(v96 + 256);
  *(_DWORD *)(v96 + 256) = v95;
  if (*((void *)this + 366) || *((_DWORD *)this + 770) || *((_DWORD *)this + 771))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 256, 0, 0xFFFFFFFFLL, 8, v97, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 260) = 0;
  uint64_t v98 = *((void *)this + 33);
  int v99 = *(_DWORD *)(v98 + 260);
  *(_DWORD *)(v98 + 260) = 0;
  *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFFu;
  uint64_t v100 = *((void *)this + 33);
  int v101 = *(_DWORD *)(v100 + 260);
  *(_DWORD *)(v100 + 260) = v99;
  uint64_t v102 = *((void *)this + 32);
  unsigned int v103 = *(_DWORD *)(v102 + 17568);
  uint64_t v104 = v102 + 176 * v103;
  if (*(void *)(v104 + 3072) || *(_DWORD *)(v102 + 176 * v103 + 3224) || *(_DWORD *)(v102 + 176 * v103 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v104 + 3072), 260, 0, 0xFFFFFFFFLL, 8, v101, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 264) = *(unsigned __int8 *)(*((void *)this + 33) + 267) << 24;
  uint64_t v105 = *((void *)this + 33);
  int v106 = *(_DWORD *)(v105 + 264);
  *(_DWORD *)(v105 + 264) = 0;
  *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFFu;
  uint64_t v107 = *((void *)this + 33);
  int v108 = *(_DWORD *)(v107 + 264);
  *(_DWORD *)(v107 + 264) = v106;
  uint64_t v109 = *((void *)this + 32);
  int v110 = *(_DWORD *)(v109 + 5724);
  uint64_t v111 = v109 + 176 * v110;
  if (*(void *)(v111 + 3776) || *(_DWORD *)(v109 + 176 * v110 + 3928) || *(_DWORD *)(v109 + 176 * v110 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v111 + 3776), 264, 0, 0xFFFFFFFFLL, 8, v108, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 268) = *(unsigned __int8 *)(*((void *)this + 33) + 271) << 24;
  uint64_t v112 = *((void *)this + 33);
  int v113 = *(_DWORD *)(v112 + 268);
  *(_DWORD *)(v112 + 268) = 0;
  *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFFu;
  uint64_t v114 = *((void *)this + 33);
  int v115 = *(_DWORD *)(v114 + 268);
  *(_DWORD *)(v114 + 268) = v113;
  uint64_t v116 = *((void *)this + 32);
  int v117 = *(_DWORD *)(v116 + 5720);
  uint64_t v118 = v116 + 176 * v117;
  if (*(void *)(v118 + 3776) || *(_DWORD *)(v116 + 176 * v117 + 3928) || *(_DWORD *)(v116 + 176 * v117 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v118 + 3776), 268, 0, 0xFFFFFFFFLL, 8, v115, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 272) = 0;
  uint64_t v119 = *((void *)this + 33);
  int v120 = *(_DWORD *)(v119 + 272);
  *(_DWORD *)(v119 + 272) = 0;
  *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFFu;
  uint64_t v121 = *((void *)this + 33);
  int v122 = *(_DWORD *)(v121 + 272);
  *(_DWORD *)(v121 + 272) = v120;
  uint64_t v123 = *((void *)this + 32);
  int v124 = *(_DWORD *)(v123 + 5716);
  uint64_t v125 = v123 + 176 * v124;
  if (*(void *)(v125 + 5360) || *(_DWORD *)(v123 + 176 * v124 + 5512) || *(_DWORD *)(v123 + 176 * v124 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v125 + 5360), 272, 0, 0xFFFFFFFFLL, 8, v122, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 276) = 0;
  uint64_t v126 = *((void *)this + 33);
  int v127 = *(_DWORD *)(v126 + 276);
  *(_DWORD *)(v126 + 276) = 0;
  *(_DWORD *)(*((void *)this + 33) + 276) ^= 0xFFFFFFu;
  uint64_t v128 = *((void *)this + 33);
  int v129 = *(_DWORD *)(v128 + 276);
  *(_DWORD *)(v128 + 276) = v127;
  uint64_t v130 = *((void *)this + 32);
  int v131 = *(_DWORD *)(v130 + 5712);
  uint64_t v132 = v130 + 176 * v131;
  if (*(void *)(v132 + 5360) || *(_DWORD *)(v130 + 176 * v131 + 5512) || *(_DWORD *)(v130 + 176 * v131 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v132 + 5360), 276, 0, 0xFFFFFFFFLL, 8, v129, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  uint64_t v133 = *((void *)this + 33);
  int v134 = *(_DWORD *)(v133 + 288);
  *(_DWORD *)(v133 + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) ^= 0x1FFFFFFu;
  uint64_t v135 = *((void *)this + 33);
  int v136 = *(_DWORD *)(v135 + 288);
  *(_DWORD *)(v135 + 288) = v134;
  uint64_t v137 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v137 || *(_DWORD *)(v137 + 152) || *(_DWORD *)(v137 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v137, 288, *(_DWORD *)(v137 + 52), 0xFFFFFFFFLL, 7, v136, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v138 = v3;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 296);
  *(_DWORD *)(v139 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0x1FFFFFFu;
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 296);
  *(_DWORD *)(v141 + 296) = v140;
  uint64_t v143 = *((void *)this + 32);
  uint64_t v144 = *(void *)(v143 + 376 * v6 + 5736);
  if (*(void *)v144 || *(_DWORD *)(v144 + 152) || *(_DWORD *)(v144 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v144, 296, *(_DWORD *)(v144 + 56), 0xFFFFFFFFLL, 7, v142, 4);
    if (result) {
      return result;
    }
    uint64_t v143 = *((void *)this + 32);
  }
  int v145 = *(_DWORD *)(v143 + 2648);
  uint64_t v146 = *((void *)this + 33);
  int v147 = *(_DWORD *)(v146 + 284);
  *(_DWORD *)(v146 + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 284) ^= 0x1FFFFFFu;
  uint64_t v148 = *((void *)this + 33);
  int v149 = *(_DWORD *)(v148 + 284);
  *(_DWORD *)(v148 + 284) = v147;
  uint64_t v150 = *((void *)this + 32);
  if (v145 == 1)
  {
    uint64_t v151 = *(void *)(v150 + 376 * v6 + 5736);
    if (*(void *)v151 || *(_DWORD *)(v151 + 152) || *(_DWORD *)(v151 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v151, 284, *(_DWORD *)(v151 + 64), 0xFFFFFFFFLL, 7, v149, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v152 = *((void *)this + 33);
    int v153 = *(_DWORD *)(v152 + 292);
    *(_DWORD *)(v152 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0x1FFFFFFu;
    uint64_t v154 = *((void *)this + 33);
    int v155 = *(_DWORD *)(v154 + 292);
    *(_DWORD *)(v154 + 292) = v153;
    uint64_t v156 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v156 || *(_DWORD *)(v156 + 152) || *(_DWORD *)(v156 + 156))
    {
      int v157 = *(_DWORD *)(v156 + 68);
      uint64_t v158 = this;
      goto LABEL_115;
    }
  }
  else
  {
    uint64_t v159 = v150 + 376 * v6;
    if (*(void *)(v159 + 5752) || *(_DWORD *)(v150 + 376 * v6 + 5904) || *(_DWORD *)(v150 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v159 + 5752), 284, 0, 0xFFFFFFFFLL, 7, v149, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v160 = *((void *)this + 33);
    int v161 = *(_DWORD *)(v160 + 292);
    *(_DWORD *)(v160 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0x1FFFFFFu;
    uint64_t v162 = *((void *)this + 33);
    int v155 = *(_DWORD *)(v162 + 292);
    *(_DWORD *)(v162 + 292) = v161;
    uint64_t v163 = *((void *)this + 32);
    uint64_t v164 = v163 + 376 * v6;
    if (*(void *)(v164 + 5928) || *(_DWORD *)(v163 + 376 * v6 + 6080) || *(_DWORD *)(v163 + 376 * v6 + 6084))
    {
      uint64_t v156 = v164 + 5928;
      uint64_t v158 = this;
      int v157 = 0;
LABEL_115:
      uint64_t result = CAHDec::addToPatcherList((uint64_t)v158, (void *)v156, 292, v157, 0xFFFFFFFFLL, 7, v155, 4);
      if (result) {
        return result;
      }
    }
  }
  if ((v237 & 1) == 0)
  {
    uint64_t v196 = 0;
    uint64_t v197 = 17424;
    do
    {
      uint64_t v198 = *(void *)(*(void *)(*((void *)this + 32) + v197) + 40);
      *(_DWORD *)(*((void *)this + 33) + v196 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v196 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v196 + 336) = 0;
      *(_DWORD *)(*((void *)this + 33) + v196 + 348) = 0;
      uint64_t v199 = *((void *)this + 33) + v196;
      int v200 = *(_DWORD *)(v199 + 324);
      *(_DWORD *)(v199 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v196 + 324) ^= 0x1FFFFFFu;
      uint64_t v201 = *((void *)this + 33) + v196;
      int v202 = *(_DWORD *)(v201 + 324);
      *(_DWORD *)(v201 + 324) = v200;
      uint64_t v203 = *(void *)(v198 + 8);
      if (*(void *)v203 || *(_DWORD *)(v203 + 152) || *(_DWORD *)(v203 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v203, (int)v196 + 324, *(_DWORD *)(v203 + 52), 0xFFFFFFFFLL, 7, v202, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v204 = *((void *)this + 33) + v196;
      int v205 = *(_DWORD *)(v204 + 348);
      *(_DWORD *)(v204 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v196 + 348) ^= 0x1FFFFFFu;
      uint64_t v206 = *((void *)this + 33) + v196;
      int v207 = *(_DWORD *)(v206 + 348);
      *(_DWORD *)(v206 + 348) = v205;
      uint64_t v208 = *(void *)(v198 + 8);
      if (*(void *)v208 || *(_DWORD *)(v208 + 152) || *(_DWORD *)(v208 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v208, (int)v196 + 348, *(_DWORD *)(v208 + 56), 0xFFFFFFFFLL, 7, v207, 4);
        if (result) {
          return result;
        }
      }
      int v209 = *(_DWORD *)(*((void *)this + 32) + 2648);
      uint64_t v210 = *((void *)this + 33) + v196;
      int v211 = *(_DWORD *)(v210 + 312);
      *(_DWORD *)(v210 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v196 + 312) ^= 0x1FFFFFFu;
      uint64_t v212 = *((void *)this + 33) + v196;
      int v213 = *(_DWORD *)(v212 + 312);
      *(_DWORD *)(v212 + 312) = v211;
      if (v209 == 1)
      {
        uint64_t v214 = *(void *)(v198 + 8);
        if (*(void *)v214 || *(_DWORD *)(v214 + 152) || *(_DWORD *)(v214 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v214, (int)v196 + 312, *(_DWORD *)(v214 + 64), 0xFFFFFFFFLL, 7, v213, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v215 = *((void *)this + 33) + v196;
        int v216 = *(_DWORD *)(v215 + 336);
        *(_DWORD *)(v215 + 336) = 0;
        *(_DWORD *)(*((void *)this + 33) + v196 + 336) ^= 0x1FFFFFFu;
        uint64_t v217 = *((void *)this + 33) + v196;
        int v218 = *(_DWORD *)(v217 + 336);
        *(_DWORD *)(v217 + 336) = v216;
        uint64_t v219 = *(void *)(v198 + 8);
        if (*(void *)v219 || *(_DWORD *)(v219 + 152) || *(_DWORD *)(v219 + 156))
        {
          int v220 = *(_DWORD *)(v219 + 68);
          int v221 = v196 + 336;
          int v222 = this;
          goto LABEL_176;
        }
      }
      else
      {
        if (*(void *)(v198 + 24) || *(_DWORD *)(v198 + 176) || *(_DWORD *)(v198 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v198 + 24), (int)v196 + 312, 0, 0xFFFFFFFFLL, 7, v213, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v223 = *((void *)this + 33) + v196;
        int v224 = *(_DWORD *)(v223 + 336);
        *(_DWORD *)(v223 + 336) = 0;
        *(_DWORD *)(*((void *)this + 33) + v196 + 336) ^= 0x1FFFFFFu;
        uint64_t v225 = *((void *)this + 33) + v196;
        int v218 = *(_DWORD *)(v225 + 336);
        *(_DWORD *)(v225 + 336) = v224;
        uint64_t v219 = v198 + 200;
        if (*(void *)(v198 + 200) || *(_DWORD *)(v198 + 352) || *(_DWORD *)(v198 + 356))
        {
          int v221 = v196 + 336;
          int v222 = this;
          int v220 = 0;
LABEL_176:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v222, (void *)v219, v221, v220, 0xFFFFFFFFLL, 7, v218, 4);
          if (result) {
            return result;
          }
        }
      }
      v197 += 8;
      v196 += 4;
    }
    while (v196 != 12);
  }
  unsigned int v165 = subWidth[*(int *)(*(void *)(*((void *)this + 32) + 17560) + 4)];
  *(_DWORD *)(*((void *)this + 33) + 360) = 0;
  *(_DWORD *)(*((void *)this + 33) + 364) = 0;
  *(_DWORD *)(*((void *)this + 33) + 368) = 0;
  *(_DWORD *)(*((void *)this + 33) + 372) = 0;
  if (*(_DWORD *)(*((void *)this + 32) + 2644))
  {
    uint64_t v166 = *((void *)this + 33);
    int v167 = *(_DWORD *)(v166 + 360);
    *(_DWORD *)(v166 + 360) = 0;
    *(_DWORD *)(*((void *)this + 33) + 360) ^= 0xFFFFFFu;
    uint64_t v168 = *((void *)this + 33);
    int v169 = *(_DWORD *)(v168 + 360);
    *(_DWORD *)(v168 + 360) = v167;
    uint64_t v170 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v170 || *(_DWORD *)(v170 + 152) || *(_DWORD *)(v170 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v170, 360, *(_DWORD *)(v170 + 52), 0xFFFFFFFFLL, 8, v169, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v171 = *((void *)this + 33);
    int v172 = *(_DWORD *)(v171 + 364);
    *(_DWORD *)(v171 + 364) = 0;
    *(_DWORD *)(*((void *)this + 33) + 364) ^= 0xFFFFFFu;
    uint64_t v173 = *((void *)this + 33);
    int v174 = *(_DWORD *)(v173 + 364);
    *(_DWORD *)(v173 + 364) = v172;
    uint64_t v175 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v175 || *(_DWORD *)(v175 + 152) || *(_DWORD *)(v175 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v175, 364, *(_DWORD *)(v175 + 56), 0xFFFFFFFFLL, 8, v174, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v176 = *((void *)this + 33);
    int v177 = *(_DWORD *)(v176 + 368);
    *(_DWORD *)(v176 + 368) = 0;
    *(_DWORD *)(*((void *)this + 33) + 368) ^= 0xC0000000;
    uint64_t v178 = *((void *)this + 33);
    int v179 = *(_DWORD *)(v178 + 368);
    *(_DWORD *)(v178 + 368) = v177;
    uint64_t v180 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v180 || *(_DWORD *)(v180 + 152) || *(_DWORD *)(v180 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v180, 368, *(_DWORD *)(v180 + 52), 192, 6, v179, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v181 = *((void *)this + 33);
    int v182 = *(_DWORD *)(v181 + 372);
    *(_DWORD *)(v181 + 372) = 0;
    *(_DWORD *)(*((void *)this + 33) + 372) ^= 0xC0000000;
    uint64_t v183 = *((void *)this + 33);
    int v184 = *(_DWORD *)(v183 + 372);
    *(_DWORD *)(v183 + 372) = v182;
    uint64_t v185 = *((void *)this + 32);
    uint64_t v186 = *(void *)(v185 + 11768);
    if (*(void *)v186 || *(_DWORD *)(v186 + 152) || *(_DWORD *)(v186 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v186, 372, *(_DWORD *)(v186 + 56), 192, 6, v184, 4);
      if (result) {
        return result;
      }
      uint64_t v185 = *((void *)this + 32);
    }
    if (*(unsigned char *)(v185 + 8))
    {
      *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33) + 368) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(v185 + 11768) + 76) >> 6) & 0xFFF));
      int v187 = (_DWORD *)(*(void *)(*((void *)this + 32) + 11768) + 80);
    }
    else
    {
      if (CAHDecViolaLgh::getSWRStride(this, *(unsigned __int16 *)(v138 + 148) + 1, *(unsigned __int8 *)(v4 + 105) - 8, *(unsigned __int8 *)(v4 + 105) - 8, v165))return 0xFFFFFFFFLL; {
      *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33) + 368) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 783) >> 6) & 0xFFF));
      }
      int v187 = (_DWORD *)((char *)this + 3136);
    }
    *(_DWORD *)(*((void *)this + 33) + 372) = *(_DWORD *)(*((void *)this + 33) + 372) & 0xFFFF8003 | (4 * ((*v187 >> 6) & 0x1FFF));
  }
  if (v234 < 2)
  {
    uint64_t v188 = *((void *)this + 33);
    *(_DWORD *)(v188 + 376) = 65537;
    *(_WORD *)(v188 + 380) = 0;
    *(_WORD *)(v188 + 382) = *(_DWORD *)(v4 + 108) >> 6;
    *(_WORD *)(v188 + 510) = 0;
    *(_WORD *)(v188 + 512) = *(_DWORD *)(v4 + 112) >> 6;
    uint64_t v189 = *((void *)this + 32);
  }
  else
  {
    uint64_t v188 = *((void *)this + 33);
    *(_WORD *)(v188 + 376) = v236;
    uint64_t v189 = *((void *)this + 32);
    if (v235 >= 1)
    {
      uint64_t v190 = v235;
      int v191 = (unsigned char *)(*(void *)(v189 + 17560) + 2786);
      do
      {
        if (!*v191) {
          *(_WORD *)(v188 + 2 * v233 + 510) = *(_DWORD *)(v191 - 26) >> 3;
        }
        v191 += 1792;
        --v190;
      }
      while (v190);
    }
    *(_WORD *)(v188 + 378) = v235;
    if (v236 >= 1)
    {
      uint64_t v192 = v236;
      uint64_t v193 = *(void *)(v189 + 17560) + 2786;
      uint64_t v194 = (unsigned __int8 *)v193;
      do
      {
        int v195 = *v194;
        v194 += 28;
        if (!v195) {
          *(_WORD *)(v188 + 2 * v233 + 380) = *(_DWORD *)(v193 - 18) >> 3;
        }
        uint64_t v193 = (uint64_t)v194;
        --v192;
      }
      while (v192);
    }
  }
  if (*(_DWORD *)(v189 + 2360) != 1) {
    return 0;
  }
  *(_DWORD *)(v188 + 524) = *(_DWORD *)(v188 + 524) & 0xFFFFFFFE | *(_DWORD *)(v189 + 2508) & 1;
  if (*(_DWORD *)(v189 + 2508))
  {
    *(_DWORD *)(v188 + 532) = 0x10000000;
    *(_DWORD *)(v188 + 536) = *(_DWORD *)(v189 + 2368);
    *(void *)(v188 + 544) = 0;
    *(_DWORD *)(v188 + 540) = 0;
    *(_OWORD *)(v188 + 552) = *(_OWORD *)(v189 + 2372);
    long long v226 = *(_OWORD *)(v189 + 2388);
    *(_OWORD *)(v188 + 584) = *(_OWORD *)(v189 + 2404);
    *(_OWORD *)(v188 + 568) = v226;
  }
  *(_DWORD *)(*((void *)this + 33) + 524) = *(_DWORD *)(*((void *)this + 33) + 524) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v189 + 2512) & 1));
  if (*(_DWORD *)(v189 + 2512))
  {
    *(_DWORD *)(v188 + 600) = 0;
    char v227 = *(_DWORD *)(v189 + 2424);
    *(_DWORD *)(v188 + 600) = (*(_DWORD *)(v189 + 2424) & 1) << 22;
    int v228 = ((*(_DWORD *)(v189 + 2420) & 1) << 23) | ((v227 & 1) << 22) | 0x20000000;
    *(_DWORD *)(v188 + 600) = v228;
    *(_DWORD *)(v188 + 600) = v228 | (*(_DWORD *)(v189 + 2364) == 0);
    long long v229 = *(_OWORD *)(v189 + 2428);
    long long v230 = *(_OWORD *)(v189 + 2444);
    *(_OWORD *)(v188 + 636) = *(_OWORD *)(v189 + 2460);
    *(_OWORD *)(v188 + 620) = v230;
    *(_OWORD *)(v188 + 604) = v229;
  }
  *(_DWORD *)(*((void *)this + 33) + 524) = *(_DWORD *)(*((void *)this + 33) + 524) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v189 + 2516) & 1));
  *(_DWORD *)(*((void *)this + 33) + 524) = *(_DWORD *)(*((void *)this + 33) + 524) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v189 + 2520) & 1));
  *(_DWORD *)(*((void *)this + 33) + 524) = *(_DWORD *)(*((void *)this + 33) + 524) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v189 + 2524) & 1));
  if (!*(_DWORD *)(v189 + 2516)) {
    return 0;
  }
  *(_DWORD *)(v188 + 656) = 0;
  if (*(_DWORD *)(v189 + 2476) == 2) {
    int v231 = 805306368;
  }
  else {
    int v231 = 813694976;
  }
  *(_DWORD *)(v188 + 656) = v231;
  memcpy((void *)(v188 + 660), (const void *)(v189 + 2480), 4 * *(unsigned int *)(v189 + 2476));
  uint64_t result = 0;
  *(_DWORD *)(v189 + 2516) = 0;
  return result;
}

uint64_t CAHDecViolaLgh::getSWRStride(CAHDecViolaLgh *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *(void *)((char *)this + 3132) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 784) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        unsigned int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecViolaLgh::populateTileRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 256);
  if (*(_DWORD *)(v3 + 2360) == 1)
  {
    *(_DWORD *)(a2 + 4) = 0;
    if (*(_DWORD *)(v3 + 2420))
    {
      int v4 = *(unsigned __int16 *)(v3 + 2504);
      int v5 = 0x10000;
    }
    else
    {
      unsigned int v6 = *(_DWORD *)(a3 + 16);
      if (v6 >= *(unsigned __int16 *)(a3 + 24)) {
        unsigned int v6 = *(unsigned __int16 *)(a3 + 24);
      }
      *(_DWORD *)(a2 + 4) = v6 << 22;
      int v4 = *(unsigned __int8 *)(v3 + 2504) | ((unsigned __int16)v6 << 22);
      int v5 = 65280;
    }
    *(_DWORD *)(a2 + 4) = v4;
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(v3 + 2504) & v5 | v4;
  }
  return 0;
}

uint64_t CAHDecViolaLgh::getTileStartCTU(CAHDecViolaLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 376);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecViolaLgh::getTileEndCTU(CAHDecViolaLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 376);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecViolaLgh::populateAvdWork(CAHDecViolaLgh *this)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  uint64_t v38 = *(void *)(v2 + 16);
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  unint64_t v3 = *(unsigned int *)(v2 + 312);
  if (!v3)
  {
    LOWORD(v8) = 0;
    goto LABEL_34;
  }
  uint64_t v5 = 0;
  uint64_t v39 = 0;
  int v6 = 0;
  LODWORD(v7) = 0;
  int v8 = 0;
  uint64_t v9 = v1 + 2724;
  unint64_t v10 = *(unsigned int *)(v2 + 316);
  unint64_t v11 = v10;
  uint64_t v37 = v9;
  while (1)
  {
    uint64_t v36 = v5;
    if (v11) {
      break;
    }
LABEL_31:
    uint64_t v5 = v36 + 1792;
    if (++v39 >= v3)
    {
      uint64_t v1 = *((void *)this + 33);
LABEL_34:
      uint64_t result = 0;
      *(_WORD *)(v1 + 26) = v8;
      *(_DWORD *)(v1 + 32) = 2724;
      return result;
    }
  }
  unint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *((void *)this + 32);
    uint64_t v14 = *(void *)(v13 + 17560);
    uint64_t v15 = v14 + v5;
    if (*(unsigned char *)(v14 + v5 + 2786)) {
      goto LABEL_30;
    }
    *(_WORD *)(v9 + 4) = v8;
    *(_WORD *)(v9 + 6) = 0;
    *(_WORD *)(v9 + 10) = v6;
    if (!CAVDLghDecoder::GetTileMemInfo(v13, v38 + *(unsigned int *)(v15 + 2780), &v43, &v42)) {
      return 0xFFFFFFFFLL;
    }
    int v41 = v7;
    unsigned int v16 = (void *)v43;
    if (*(void *)v43 || *(_DWORD *)(v43 + 152) || *(_DWORD *)(v43 + 156))
    {
      int v40 = v8;
      int v17 = v6;
      uint64_t v18 = v2;
      int v19 = v42;
      if (HIDWORD(v42) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        int v45 = "populateAvdWork";
        __int16 v46 = 1024;
        int v47 = 1030;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        int v19 = v42;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v16, 36 * v41 + 2744, v19, 0xFFFFFFFFLL, 0, -1, 4);
      uint64_t v2 = v18;
      int v6 = v17;
      int v8 = v40;
      if (result) {
        return result;
      }
    }
    unsigned int v21 = (_DWORD *)(v14 + v5);
    *(_DWORD *)(v9 + 24) = *(_DWORD *)(v14 + v5 + 2776);
    int v22 = *(_DWORD *)(v15 + 2760);
    int v23 = v22 + 7;
    if (v22 >= 0) {
      int v23 = *(_DWORD *)(v15 + 2760);
    }
    int v24 = v21[692];
    *(_DWORD *)(v9 + 28) = (v23 << 13) & 0xFFFF0000 | (v24 / 8);
    int v25 = v21[691];
    int v27 = v25 - 1;
    BOOL v26 = v25 < 1;
    int v28 = v25 + 6;
    if (!v26) {
      int v28 = v27;
    }
    unsigned int v29 = (v28 << 13) & 0xFFFF0000;
    int v30 = v21[693];
    int v31 = v30 - 1;
    BOOL v26 = v30 < 1;
    int v32 = v30 + 6;
    if (!v26) {
      int v32 = v31;
    }
    *(_DWORD *)(v9 + 32) = v29 | (v32 >> 3);
    if (v22 + v24) {
      __int16 v33 = 4;
    }
    else {
      __int16 v33 = 5;
    }
    *(_WORD *)(v9 + 12) = v33;
    unint64_t v3 = *(unsigned int *)(v2 + 312);
    unint64_t v10 = *(unsigned int *)(v2 + 316);
    if (v12 == v10 && v39 == v3) {
      __int16 v35 = 5;
    }
    else {
      __int16 v35 = 4;
    }
    *(_WORD *)(v9 + 14) = v35;
    ++v6;
    ++v8;
    v9 += 36;
    unint64_t v7 = 0x8E38E38E38E38E39 * ((v9 - v37) >> 2);
LABEL_30:
    ++v12;
    v5 += 28;
    unint64_t v11 = v10;
    if (v12 >= v10) {
      goto LABEL_31;
    }
  }
}

uint64_t CAHDecViolaLgh::allocWorkBuf_SPS(CAHDecViolaLgh *this, int *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = *a2 + 31;
  if (*a2 < -31) {
    int v5 = *a2 + 62;
  }
  unsigned int v6 = v5 >> 5;
  int v7 = v4 + 31;
  if (v4 < -31) {
    int v7 = v4 + 62;
  }
  unsigned int v8 = v7 >> 5;
  unsigned int v9 = 32 - __clz(v6 - 1);
  if (v6 >= 2) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  unsigned int v11 = 32 - __clz(v8 - 1);
  if (v8 >= 2) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unsigned int v13 = ((32 << (v12 + v10)) + 127) & 0xFFFFFF80;
  int v14 = 2 * v3 + 62;
  if (2 * v3 >= -31) {
    int v14 = 2 * v3 + 31;
  }
  unsigned int v15 = v14 >> 5;
  int v16 = v4 + 15;
  if (v4 < -15) {
    int v16 = v4 + 30;
  }
  unsigned int v17 = v16 >> 4;
  unsigned int v18 = 32 - __clz(v15 - 1);
  if (v15 >= 2) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  unsigned int v20 = 32 - __clz(v17 - 1);
  if (v17 >= 2) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  *((_DWORD *)this + 776) = v13;
  *((_DWORD *)this + 777) = ((8 << (v19 + v21)) + 127) & 0xFFFFFF80;
  unsigned int v22 = ((v4 + 63) >> 6) * ((v3 + 63) >> 6);
  *((_DWORD *)this + 781) = 576 * v22;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_28:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      char v29 = v28;
      uint64_t v30 = *((unsigned int *)this + 781);
      if (v30
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 176 * v27 + 5360), v30, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1259;
        __int16 v39 = 2080;
        int v40 = "MvColo";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v29 & 1) != 0);
    unsigned int v31 = 24 * v22;
    *((_DWORD *)this + 785) = 24 * v22;
    uint64_t v32 = 3776;
    if (!v31) {
      goto LABEL_34;
    }
LABEL_33:
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v32), v31, 7, 1, 0))
    {
LABEL_34:
      while (v32 != 5008)
      {
        unsigned int v31 = *((_DWORD *)this + 785);
        v32 += 176;
        if (v31) {
          goto LABEL_33;
        }
      }
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1264;
    __int16 v39 = 2080;
    int v40 = "segMap";
    __int16 v33 = &_os_log_internal;
  }
  else
  {
    uint64_t v23 = 14608;
    uint64_t v24 = 16;
    while (1)
    {
      uint64_t v25 = *((unsigned int *)this + 776);
      if (v25
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23 - 2816), v25, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1243;
        __int16 v39 = 2080;
        int v40 = "HdrY";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      uint64_t v26 = *((unsigned int *)this + 777);
      if (v26)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23), v26, 7, 1, 0))break; {
      }
        }
      v23 += 176;
      if (!--v24) {
        goto LABEL_28;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1248;
    __int16 v39 = 2080;
    int v40 = "HdrC";
    __int16 v33 = &_os_log_internal;
  }
LABEL_46:
  _os_log_impl(&dword_223977000, v33, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v35, 0x1Cu);
LABEL_47:
  (*(void (**)(CAHDecViolaLgh *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecViolaLgh::allocWorkBuf_PPS(CAHDecViolaLgh *this, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = *(void *)(v5 + 17560);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 100);
  unsigned int v9 = (*(unsigned __int8 *)(v6 + 105) + 1) & 0x1FE;
  if (v7 == 3) {
    int v10 = 48;
  }
  else {
    int v10 = 32;
  }
  if (!v7) {
    int v10 = 16;
  }
  int v12 = *(_DWORD *)(v6 + 108);
  int v11 = *(_DWORD *)(v6 + 112);
  unsigned int v13 = (v12 + 15) >> 4;
  int v14 = ~(-1 << *(_DWORD *)(v6 + 96));
  signed int v15 = v13 * ((v10 * v9) >> 3) + (v14 << 7);
  if (v15)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 117, v15, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1338;
        __int16 v27 = 2080;
        char v28 = "IpAbove";
        int v16 = &_os_log_internal;
LABEL_34:
        _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  int v17 = 16 * v9;
  if ((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 != 192)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 128, (int)((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 - 192), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1341;
        __int16 v27 = 2080;
        char v28 = "LfAbovePix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
LABEL_35:
      (*(void (**)(CAHDecViolaLgh *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  signed int v18 = 288 * ((v12 + 63) >> 6) + (v14 << 7);
  if (v18)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 139, v18, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1347;
        __int16 v27 = 2080;
        char v28 = "LfAboveInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  unsigned int v19 = (v11 + 7) >> 3;
  if (v19 * v17)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 150, (int)(v19 * v17), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1353;
        __int16 v27 = 2080;
        char v28 = "LfLeftPix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  uint64_t v20 = ((v11 + 63) >> 2) & 0x3FFFFFF0;
  if (v20)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 161, v20, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1361;
        __int16 v27 = 2080;
        char v28 = "LfLeftInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 172, (int)(24 * v13 + 30), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 1369;
      __int16 v27 = 2080;
      char v28 = "SwLeftPix";
      int v16 = &_os_log_internal;
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  int v22 = 192 * v9 + (v19 + 2) * (((v9 >> 1) << 8) | 8);
  if (!v22) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 183, v22, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 1375;
    __int16 v27 = 2080;
    char v28 = "AZLeftPix";
    int v16 = &_os_log_internal;
    goto LABEL_34;
  }
  return result;
}

uint64_t CAHDecViolaLgh::freeWorkBuf_SPS(CAHDecViolaLgh *this)
{
  uint64_t result = *((void *)this + 32);
  if (!*(_DWORD *)(result + 2648))
  {
    uint64_t v3 = 14608;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = (uint64_t *)(result + v3 - 2816);
      if (*v5)
      {
        CAVDDecoder::deallocAVDMem(result, v5);
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3 - 2816) = 0;
      }
      if (*(void *)(result + v3))
      {
        CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + v3));
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3) = 0;
      }
      v3 += 176;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = result + 176 * v6;
    if (*(void *)(v9 + 5360))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(v9 + 5360));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + 176 * v6 + 5360) = 0;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  for (uint64_t i = 3776; i != 5184; i += 176)
  {
    if (*(void *)(result + i))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + i));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + i) = 0;
    }
  }
  return result;
}

uint64_t *CAHDecViolaLgh::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[256])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 256);
    v2[256] = 0;
  }
  if (v2[278])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 278);
    v2[278] = 0;
  }
  if (v2[234])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 234);
    v2[234] = 0;
  }
  if (v2[300])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 300);
    v2[300] = 0;
  }
  if (v2[322])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 322);
    v2[322] = 0;
  }
  if (v2[344])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 344);
    v2[344] = 0;
  }
  if (v2[366])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 366);
    v2[366] = 0;
  }
  return this;
}

uint64_t CAHDecViolaLgh::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 3120) = a2;
  return this;
}

uint64_t CAHDecViolaLgh::initPicture(CAHDecViolaLgh *this)
{
  return 0;
}

uint64_t CAHDecViolaLgh::populateSlices(CAHDecViolaLgh *this)
{
  return 0;
}

uint64_t CAHDecViolaLgh::getTileIdxAbove(CAHDecViolaLgh *this)
{
  return 0;
}

uint64_t CAHDecViolaLgh::decodeBuffer(CAHDecViolaLgh *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecViolaLgh::decodeBufferSize(CAHDecViolaLgh *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecViolaLgh::decHdrYLinAddr(CAHDecViolaLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 11792);
}

uint64_t CAHDecViolaLgh::decHdrCLinAddr(CAHDecViolaLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 14608);
}

uint64_t CAHDecViolaLgh::decHdrYSize(CAHDecViolaLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 11836);
}

uint64_t CAHDecViolaLgh::decHdrCSize(CAHDecViolaLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 14652);
}

uint64_t CAHDecViolaLgh::decHdrYStride(CAHDecViolaLgh *this)
{
  return *((unsigned int *)this + 778);
}

uint64_t CAHDecViolaLgh::decHdrCStride(CAHDecViolaLgh *this)
{
  return *((unsigned int *)this + 779);
}

void CAHDecViolaLgh::clearSegBuffer(CAHDecViolaLgh *this)
{
}

CAHDecHibiscusLgh *createHibiscusLghDecoder(CAVDLghDecoder *a1)
{
  uint64_t v2 = (CAHDecHibiscusLgh *)operator new(0x11C8uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecHibiscusLgh::CAHDecHibiscusLgh(v2, a1);
  }
  return v3;
}

void sub_223A3DE34(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecHibiscusLgh::CAHDecHibiscusLgh(CAHDecHibiscusLgh *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D741A08;
  *(_DWORD *)(v1 + 456) = 151564;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecHibiscusLgh::CAHDecHibiscusLgh(CAHDecHibiscusLgh *this, CAVDLghDecoder *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D741A08;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 151564;
  *(_DWORD *)(v4 + 8) = 1036;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 151564, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      int v17 = "CAHDecHibiscusLgh";
      __int16 v18 = 1024;
      int v19 = 0;
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
LABEL_16:
      _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v7);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v8;
    *((void *)this + 34) = v8;
    uint64_t v9 = *((void *)this + 32);
    *(_DWORD *)(v9 + 17552) = 0;
    bzero((void *)(v9 + 11792), 0xB00uLL);
    *(_OWORD *)(v9 + 5712) = 0u;
    bzero((void *)(*((void *)this + 32) + 14608), 0xB00uLL);
    bzero((char *)this + 464, 0xA50uLL);
    int v10 = (_OWORD *)*((void *)this + 32);
    v10[356] = 0u;
    v10[355] = 0u;
    v10[354] = 0u;
    v10[353] = 0u;
    v10[352] = 0u;
    v10[351] = 0u;
    v10[350] = 0u;
    v10[349] = 0u;
    v10[348] = 0u;
    v10[347] = 0u;
    v10[346] = 0u;
    v10[345] = 0u;
    v10[344] = 0u;
    v10[343] = 0u;
    v10[342] = 0u;
    v10[341] = 0u;
    v10[340] = 0u;
    v10[339] = 0u;
    v10[338] = 0u;
    v10[337] = 0u;
    v10[336] = 0u;
    v10[335] = 0u;
    bzero((char *)this + 3104, 0x580uLL);
    for (uint64_t i = 3072; i != 3776; i += 176)
    {
      int v12 = (_OWORD *)(*((void *)this + 32) + i);
      v12[9] = 0uLL;
      v12[10] = 0uLL;
      v12[7] = 0uLL;
      v12[8] = 0uLL;
      v12[5] = 0uLL;
      v12[6] = 0uLL;
      v12[3] = 0uLL;
      v12[4] = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *int v12 = 0uLL;
    }
    do
    {
      unsigned int v13 = (_OWORD *)(*((void *)this + 32) + i);
      v13[9] = 0uLL;
      v13[10] = 0uLL;
      v13[7] = 0uLL;
      v13[8] = 0uLL;
      v13[5] = 0uLL;
      v13[6] = 0uLL;
      v13[3] = 0uLL;
      v13[4] = 0uLL;
      v13[1] = 0uLL;
      v13[2] = 0uLL;
      *unsigned int v13 = 0uLL;
      i += 176;
    }
    while (i != 5184);
    int v14 = (_OWORD *)*((void *)this + 32);
    v14[334] = 0u;
    v14[333] = 0u;
    v14[332] = 0u;
    v14[331] = 0u;
    v14[330] = 0u;
    v14[329] = 0u;
    v14[328] = 0u;
    v14[327] = 0u;
    v14[326] = 0u;
    v14[325] = 0u;
    uint64_t v15 = 3072;
    v14[324] = 0u;
    do
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), 1913, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        int v16 = 136315650;
        int v17 = "CAHDecHibiscusLgh";
        __int16 v18 = 1024;
        int v19 = 177;
        __int16 v20 = 2080;
        char v21 = "probBuf";
        uint64_t v5 = &_os_log_internal;
        uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
        goto LABEL_15;
      }
      v15 += 176;
    }
    while (v15 != 3776);
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 5184), 12284, 7, 1, 0))return; {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    }
    {
      int v16 = 136315650;
      int v17 = "CAHDecHibiscusLgh";
      __int16 v18 = 1024;
      int v19 = 179;
      __int16 v20 = 2080;
      char v21 = "stateBuf";
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_15:
      uint32_t v7 = 28;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_223A3E26C(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecHibiscusLgh::~CAHDecHibiscusLgh(CAHDecHibiscusLgh *this)
{
  *(void *)this = &unk_26D741A08;
  CAHDecHibiscusLgh::freeWorkBuf_SPS(this);
  uint64_t v2 = *((void *)this + 32);
  for (uint64_t i = 3072; i != 3776; i += 176)
  {
    if (*(void *)(v2 + i))
    {
      CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + i));
      uint64_t v2 = *((void *)this + 32);
      *(void *)(v2 + i) = 0;
    }
  }
  if (*(void *)(v2 + 5184))
  {
    CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + 5184));
    *(void *)(*((void *)this + 32) + 5184) = 0;
  }
  (*(void (**)(CAHDecHibiscusLgh *, void))(*(void *)this + 152))(this, 0);
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecHibiscusLgh::~CAHDecHibiscusLgh(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecHibiscusLgh::startPicture(CAHDecHibiscusLgh *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  uint64_t v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x2500CuLL);
    uint64_t v5 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v5 + 16) = a2;
    *(_WORD *)(v5 + 24) = 257;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecHibiscusLgh::DecodePicture(CAHDecHibiscusLgh *this, uint64_t a2)
{
  if (CAHDecHibiscusLgh::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecHibiscusLgh *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecHibiscusLgh *))(*(void *)this + 48))(this);
  (*(void (**)(CAHDecHibiscusLgh *))(*(void *)this + 56))(this);
  CAHDecHibiscusLgh::populateTiles(this);
  (*(void (**)(CAHDecHibiscusLgh *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecHibiscusLgh *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecHibiscusLgh::populateTiles(CAHDecHibiscusLgh *this)
{
  uint64_t v1 = (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 316)
                    * *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 312));
  if (v1)
  {
    uint64_t v3 = *((void *)this + *((unsigned int *)this + 13) + 34) + 1036;
    do
    {
      CAHDecTansyLgh::populateTileRegisters((uint64_t)this, v3);
      v3 += 12;
      --v1;
    }
    while (v1);
  }
  return 0;
}

uint64_t CAHDecHibiscusLgh::populateCommonRegisters(CAHDecHibiscusLgh *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000002;
  return 0;
}

uint64_t CAHDecHibiscusLgh::updateCommonRegisters(CAHDecHibiscusLgh *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecHibiscusLgh::populateSequenceRegisters(CAHDecHibiscusLgh *this)
{
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  *(_DWORD *)(v1 + 40) = 0;
  unsigned __int16 v3 = *(_DWORD *)(v2 + 108) - 1;
  *(_DWORD *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 40) = (v3 | ((unsigned __int16)*(_DWORD *)(v2 + 112) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 304);
  if (v4 >= 3) {
    int v5 = 6528;
  }
  else {
    int v5 = ((v4 & 3) << 7) | 0x1800;
  }
  *(_DWORD *)(v1 + 44) = v5;
  unsigned int v6 = v5 & 0xFFF87FFF | (((*(unsigned char *)(v2 + 105) + 8) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFF87FFFF | (((*(unsigned __int8 *)(v2 + 105) + 8) & 0xF) << 19) | 0x1000000;
  *(_DWORD *)(v1 + 44) = v7;
  *(_DWORD *)(v1 + 44) = v7 & 0xFDFFFFFF | (*(unsigned char *)(v2 + 304) == 4);
  return 0;
}

uint64_t CAHDecHibiscusLgh::populatePictureRegisters(CAHDecHibiscusLgh *this)
{
  uint64_t v399 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v2 + 17560);
  if (*(unsigned char *)(v4 + 37)) {
    BOOL v5 = *(unsigned char *)(v4 + 40) != 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = *(_DWORD *)(v2 + 11748);
  int v7 = *(_DWORD *)(v4 + 100);
  int v393 = *(_DWORD *)(v4 + 96);
  int v392 = 1 << v7;
  char v8 = *(unsigned char *)(v2 + 2675);
  char v9 = *(unsigned char *)(v2 + 2674);
  if (v5) {
    int v10 = 766517248;
  }
  else {
    int v10 = 766509056;
  }
  *(_DWORD *)(v3 + 48) = v10;
  int v11 = v10 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v3 + 48) = v11;
  if (*(_DWORD *)(*((void *)this + 32) + 2644) == 1) {
    int v12 = 1024;
  }
  else {
    int v12 = 1;
  }
  unsigned int v13 = v12 & 0xFFFFFFF0 | (4 * (v8 & 3)) | v9 & 3 | v11 | 0x2E0;
  *(_DWORD *)(v3 + 48) = v13;
  int v14 = (unsigned char *)*((void *)this + 32);
  int v15 = v13 | ((v14[2652] & 1) << 19);
  *(_DWORD *)(v3 + 48) = v15;
  int v16 = v15 | ((v14[2653] & 1) << 18);
  *(_DWORD *)(v3 + 48) = v16;
  *(_DWORD *)(v3 + 48) = v16 | ((v14[2654] & 1) << 17);
  *(void *)(v3 + 52) = 0x2000000;
  LOWORD(v16) = *(_DWORD *)(v4 + 108) - 1;
  *(_DWORD *)(v3 + 56) = (unsigned __int16)v16;
  *(_DWORD *)(v3 + 56) = ((unsigned __int16)v16 | ((unsigned __int16)*(_DWORD *)(v4 + 112) << 16)) - 0x10000;
  *(void *)(v3 + 60) = 0;
  int v17 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2688) & 7;
  *(_DWORD *)(v3 + 64) = v17;
  unsigned int v18 = v17 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2692) & 1));
  *(_DWORD *)(v3 + 64) = v18;
  unsigned int v19 = v18 & 0xFFFFFF8F | (16 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2696) & 7));
  *(_DWORD *)(v3 + 64) = v19;
  unsigned int v20 = v19 & 0xFFFFFF7F | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2700) & 1) << 7);
  *(_DWORD *)(v3 + 64) = v20;
  unsigned int v21 = v20 & 0xFFFFF8FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2704) & 7) << 8);
  *(_DWORD *)(v3 + 64) = v21;
  unsigned int v22 = v21 & 0xFFFFF7FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2708) & 1) << 11);
  *(_DWORD *)(v3 + 64) = v22;
  unsigned int v23 = v22 & 0xFFFFCFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2712) & 3) << 12);
  *(_DWORD *)(v3 + 64) = v23;
  unsigned int v24 = v23 & 0xFFFFBFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2716) & 1) << 14);
  *(_DWORD *)(v3 + 64) = v24;
  unsigned int v25 = v24 & 0xFFFF7FFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2720) & 1) << 15);
  *(_DWORD *)(v3 + 64) = v25;
  unsigned int v26 = v25 & 0xFFF8FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2724) & 7) << 16);
  *(_DWORD *)(v3 + 64) = v26;
  unsigned int v27 = v26 & 0xFFF7FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2728) & 1) << 19);
  *(_DWORD *)(v3 + 64) = v27;
  unsigned int v28 = v27 & 0xFFEFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2732) & 1) << 20);
  *(_DWORD *)(v3 + 64) = v28;
  unsigned int v29 = v28 & 0xFFDFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2736) & 1) << 21);
  *(_DWORD *)(v3 + 64) = v29;
  unsigned int v30 = v29 & 0xFFBFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2740) & 1) << 22);
  *(_DWORD *)(v3 + 64) = v30;
  unsigned int v31 = v30 & 0xFF7FFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2744) & 1) << 23);
  *(_DWORD *)(v3 + 64) = v31;
  unsigned int v32 = v31 & 0xFEFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2748) & 1) << 24);
  *(_DWORD *)(v3 + 64) = v32;
  unsigned int v33 = v32 & 0xFDFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2752) & 1) << 25);
  *(_DWORD *)(v3 + 64) = v33;
  *(_DWORD *)(v3 + 64) = v33 & 0xFBFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2756) & 1) << 26);
  *(void *)(v3 + 68) = 0;
  if (*(unsigned char *)(v4 + 60))
  {
    int v34 = *(unsigned char *)(v4 + 69) & 0x7F;
    *(_DWORD *)(v3 + 68) = v34;
    unsigned int v35 = v34 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 68) & 0x7F) << 7);
    *(_DWORD *)(v3 + 68) = v35;
    unsigned int v36 = v35 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 67) & 0x7F) << 14);
    *(_DWORD *)(v3 + 68) = v36;
    unsigned int v37 = v36 & 0xF01FFFFF | ((*(unsigned char *)(v4 + 66) & 0x7F) << 21);
    *(_DWORD *)(v3 + 68) = v37;
    *(_DWORD *)(v3 + 68) = v37 & 0x8FFFFFFF | ((*(unsigned char *)(v4 + 59) & 7) << 28);
    int v38 = *(unsigned char *)(v4 + 73) & 0x7F;
    *(_DWORD *)(v3 + 72) = v38;
    unsigned int v39 = v38 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 72) & 0x7F) << 7);
    *(_DWORD *)(v3 + 72) = v39;
    unsigned int v40 = v39 & 0xFFF03FFF | ((*(unsigned char *)(v4 + 58) & 0x3F) << 14);
  }
  else
  {
    *(_DWORD *)(v3 + 68) = (*(unsigned char *)(v4 + 59) & 7) << 28;
    unsigned int v40 = (*(unsigned char *)(v4 + 58) & 0x3F) << 14;
  }
  uint64_t v41 = 0;
  int v394 = 1 << v393;
  int v391 = v7;
  int v390 = 1 << v393 << v7;
  *(_DWORD *)(v3 + 72) = v40;
  *(_DWORD *)(v3 + 76) = 0;
  int v42 = *(unsigned char *)(v4 + 77) & 0x1F;
  *(_DWORD *)(v3 + 76) = v42;
  unsigned int v43 = v42 & 0xFFFFFC1F | (32 * (*(unsigned char *)(v4 + 76) & 0x1F));
  *(_DWORD *)(v3 + 76) = v43;
  unsigned int v44 = v43 & 0xFFFF83FF | ((*(unsigned char *)(v4 + 75) & 0x1F) << 10);
  *(_DWORD *)(v3 + 76) = v44;
  *(_DWORD *)(v3 + 76) = v44 | (*(unsigned __int8 *)(v4 + 74) << 15);
  uint64_t v45 = v3 + 80;
  __int16 v46 = (_WORD *)(v4 + 242);
  uint64_t v47 = v4 + 208;
  do
  {
    int v48 = *(unsigned __int8 *)(v4 + 78);
    *(_DWORD *)(v45 + v41) = 0;
    if (v48)
    {
      BOOL v49 = *(unsigned char *)(v47 + v41) != 0;
      *(_DWORD *)(v45 + v41) = v49;
      BOOL v50 = *(unsigned __int8 *)(v47 + v41 - 1) != 0;
    }
    else
    {
      BOOL v49 = 0;
      BOOL v50 = 0;
    }
    int v51 = v49 | (8 * v50);
    *(_DWORD *)(v45 + v41) = v51;
    unsigned int v52 = v51 & 0xFFFFFFF9 | (2 * (*v46 & 3));
    *(_DWORD *)(v45 + v41) = v52;
    if (v48)
    {
      int v53 = *(unsigned __int8 *)(v47 + v41 - 2);
      int v54 = v52 | ((*(unsigned char *)(v47 + v41 - 2) != 0) << 11);
      *(_DWORD *)(v45 + v41) = v54;
      if (v53) {
        LOWORD(v53) = *(v46 - 1);
      }
      unsigned int v55 = (16 * (v53 & 0x7F)) | v54 & 0xFFFFF80F;
      *(_DWORD *)(v45 + v41) = v55;
      int v48 = *(unsigned __int8 *)(v47 + v41 - 3);
      unsigned int v52 = v55 | ((v48 != 0) << 21);
      *(_DWORD *)(v45 + v41) = v52;
      if (v48) {
        LOWORD(v48) = *(v46 - 2);
      }
    }
    *(_DWORD *)(v45 + v41) = v52 & 0xFFE00FFF | ((v48 & 0x1FF) << 12);
    v41 += 4;
    v46 += 4;
  }
  while (v41 != 32);
  *(_DWORD *)(v3 + 152) = 0x20000;
  uint64_t v395 = v4;
  BOOL v388 = v5;
  if (v5)
  {
    uint64_t v389 = 8;
  }
  else
  {
    int v56 = (_DWORD *)(v3 + 112);
    uint64_t v57 = 2178;
    uint64_t v389 = 3;
    uint64_t v58 = &_os_log_internal;
    do
    {
      v56[11] = 0x1000000;
      _DWORD *v56 = 0;
      unsigned __int16 v59 = **(_DWORD **)(*((void *)this + 32) + 8 * v57) - 1;
      _DWORD *v56 = v59;
      _DWORD *v56 = (v59 | ((unsigned __int16)*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 16))
           - 0x10000;
      v56[3] = 0;
      int v60 = (unsigned __int16)((**(_DWORD **)(*((void *)this + 32) + 8 * v57) << 14) / *(_DWORD *)(v4 + 108));
      v56[3] = v60;
      int v61 = v60 | ((unsigned __int16)((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 14)
                                    / *(_DWORD *)(v4 + 112)) << 16);
      v56[3] = v61;
      if ((v60 - 1024) >= 0x7C01 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 548;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
        int v61 = v56[3];
      }
      if ((v61 - 0x4000000) >= 0x7C010000 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 549;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
      }
      ++v57;
      ++v56;
      uint64_t v4 = v395;
    }
    while (v57 != 2181);
  }
  *(void *)(v3 + 144) = 0;
  int v62 = *(unsigned __int16 *)(v4 + 2672);
  *(_DWORD *)(v3 + 144) = v62;
  *(_DWORD *)(v3 + 144) = v62 | (*(_DWORD *)(v4 + 2676) << 16);
  int v63 = *(unsigned __int16 *)(v4 + 2680);
  *(_DWORD *)(v3 + 148) = v63;
  *(_DWORD *)(v3 + 148) = v63 | (*(_DWORD *)(v4 + 2684) << 16);
  int v64 = (char *)this + 464;
  uint64_t v65 = -60;
  do
  {
    *(_DWORD *)(*((void *)this + 33) + v65 + 228) = 0;
    uint64_t v66 = *((void *)this + 33) + v65;
    int v67 = *(_DWORD *)(v66 + 228);
    *(_DWORD *)(v66 + 228) = 0;
    *(_DWORD *)(*((void *)this + 33) + v65 + 228) ^= 0xFFFFFF00;
    uint64_t v68 = *((void *)this + 33) + v65;
    int v69 = *(_DWORD *)(v68 + 228);
    *(_DWORD *)(v68 + 228) = v67;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)v65 + 228, 0, 0xFFFFFFFFLL, 8, v69, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v65 + 288) = 0;
    *(_DWORD *)(*((void *)this + 33) + v65 + 288) = *(_DWORD *)(*((void *)this + 33) + v65 + 288) & 0x800001FF | (((*((_DWORD *)this + 1132) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v65 + 500) = 0;
    uint64_t v71 = *((void *)this + 33) + v65;
    int v72 = *(_DWORD *)(v71 + 500);
    *(_DWORD *)(v71 + 500) = 0;
    *(_DWORD *)(*((void *)this + 33) + v65 + 500) ^= 0x3FFu;
    uint64_t v73 = *((void *)this + 33) + v65;
    int v74 = *(_DWORD *)(v73 + 500);
    *(_DWORD *)(v73 + 500) = v72;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)v65 + 500, 0, 0x3FFFFFFFFFFLL, 32, v74, 4);
      if (result) {
        return result;
      }
    }
    v64 += 176;
    v65 += 4;
  }
  while (v65);
  *(_DWORD *)(*((void *)this + 33) + 288) = 0;
  uint64_t v75 = *((void *)this + 33);
  int v76 = *(_DWORD *)(v75 + 288);
  *(_DWORD *)(v75 + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) ^= 0xFFFFFF00;
  uint64_t v77 = *((void *)this + 33);
  int v78 = *(_DWORD *)(v77 + 288);
  *(_DWORD *)(v77 + 288) = v76;
  uint64_t v79 = *((void *)this + 32);
  if (*(void *)(v79 + 5184) || *(_DWORD *)(v79 + 5336) || *(_DWORD *)(v79 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v79 + 5184), 288, 0, 0xFFFFFFFFLL, 8, v78, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 500) = 0;
  uint64_t v80 = *((void *)this + 33);
  int v81 = *(_DWORD *)(v80 + 500);
  *(_DWORD *)(v80 + 500) = 0;
  *(_DWORD *)(*((void *)this + 33) + 500) ^= 0x3FFu;
  uint64_t v82 = *((void *)this + 33);
  int v83 = *(_DWORD *)(v82 + 500);
  *(_DWORD *)(v82 + 500) = v81;
  uint64_t v84 = *((void *)this + 32);
  if (*(void *)(v84 + 5184) || *(_DWORD *)(v84 + 5336) || *(_DWORD *)(v84 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v84 + 5184), 500, 0, 0x3FFFFFFFFFFLL, 32, v83, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 504) = 0;
  if ((*(unsigned char *)(v3 + 50) & 8) != 0)
  {
    uint64_t v85 = *((void *)this + 33);
    uint64_t v86 = *(void *)(*((void *)this + 32) + 2680);
    long long v397 = 0u;
    long long v398 = 0u;
    memset(buf, 0, sizeof(buf));
    int v87 = (*(_DWORD *)(v85 + 16) & 0xF) << 9;
    *(void *)&buf[0] = v86;
    int v88 = *(_DWORD *)(v85 + 292);
    *(_DWORD *)(v85 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF00;
    uint64_t v89 = *((void *)this + 33);
    int v90 = *(_DWORD *)(v89 + 292);
    *(_DWORD *)(v89 + 292) = v88;
    if (v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 292, v87, 0xFFFFFFFFLL, 8, v90, 4);
      if (result) {
        return result;
      }
      uint64_t v91 = *(void *)&buf[0];
      int v92 = DWORD2(v397);
      LODWORD(v86) = HIDWORD(v397);
    }
    else
    {
      int v92 = 0;
      uint64_t v91 = 0;
    }
    *(_DWORD *)(*((void *)this + 33) + 504) = 0;
    uint64_t v93 = *((void *)this + 33);
    int v94 = *(_DWORD *)(v93 + 504);
    *(_DWORD *)(v93 + 504) = 0;
    *(_DWORD *)(*((void *)this + 33) + 504) ^= 0x3FFu;
    uint64_t v95 = *((void *)this + 33);
    int v96 = *(_DWORD *)(v95 + 504);
    *(_DWORD *)(v95 + 504) = v94;
    if (v91 || v92 || v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 504, v87, 0x3FFFFFFFFFFLL, 32, v96, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 344) = 0;
  uint64_t v97 = *((void *)this + 33);
  int v98 = *(_DWORD *)(v97 + 344);
  *(_DWORD *)(v97 + 344) = 0;
  *(_DWORD *)(*((void *)this + 33) + 344) ^= 0xFFFFFF00;
  uint64_t v99 = *((void *)this + 33);
  int v100 = *(_DWORD *)(v99 + 344);
  *(_DWORD *)(v99 + 344) = v98;
  if (*((void *)this + 454) || *((_DWORD *)this + 946) || *((_DWORD *)this + 947))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 344, 0, 0xFFFFFFFFLL, 8, v100, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 556) = 0;
  uint64_t v101 = *((void *)this + 33);
  int v102 = *(_DWORD *)(v101 + 556);
  *(_DWORD *)(v101 + 556) = 0;
  *(_DWORD *)(*((void *)this + 33) + 556) ^= 0x3FFu;
  uint64_t v103 = *((void *)this + 33);
  int v104 = *(_DWORD *)(v103 + 556);
  *(_DWORD *)(v103 + 556) = v102;
  if (*((void *)this + 454) || *((_DWORD *)this + 946) || *((_DWORD *)this + 947))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 556, 0, 0x3FFFFFFFFFFLL, 32, v104, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  uint64_t v105 = *((void *)this + 33);
  int v106 = *(_DWORD *)(v105 + 296);
  *(_DWORD *)(v105 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0xFFFFFF00;
  uint64_t v107 = *((void *)this + 33);
  int v108 = *(_DWORD *)(v107 + 296);
  *(_DWORD *)(v107 + 296) = v106;
  if (*((void *)this + 410) || *((_DWORD *)this + 858) || *((_DWORD *)this + 859))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 296, 0, 0xFFFFFFFFLL, 8, v108, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 508) = 0;
  uint64_t v109 = *((void *)this + 33);
  int v110 = *(_DWORD *)(v109 + 508);
  *(_DWORD *)(v109 + 508) = 0;
  *(_DWORD *)(*((void *)this + 33) + 508) ^= 0x3FFu;
  uint64_t v111 = *((void *)this + 33);
  int v112 = *(_DWORD *)(v111 + 508);
  *(_DWORD *)(v111 + 508) = v110;
  if (*((void *)this + 410) || *((_DWORD *)this + 858) || *((_DWORD *)this + 859))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 508, 0, 0x3FFFFFFFFFFLL, 32, v112, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 300) = 0;
  uint64_t v113 = *((void *)this + 33);
  int v114 = *(_DWORD *)(v113 + 300);
  *(_DWORD *)(v113 + 300) = 0;
  *(_DWORD *)(*((void *)this + 33) + 300) ^= 0xFFFFFF00;
  uint64_t v115 = *((void *)this + 33);
  int v116 = *(_DWORD *)(v115 + 300);
  *(_DWORD *)(v115 + 300) = v114;
  if (*((void *)this + 432) || *((_DWORD *)this + 902) || *((_DWORD *)this + 903))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 432, 300, 0, 0xFFFFFFFFLL, 8, v116, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 512) = 0;
  uint64_t v117 = *((void *)this + 33);
  int v118 = *(_DWORD *)(v117 + 512);
  *(_DWORD *)(v117 + 512) = 0;
  *(_DWORD *)(*((void *)this + 33) + 512) ^= 0x3FFu;
  uint64_t v119 = *((void *)this + 33);
  int v120 = *(_DWORD *)(v119 + 512);
  *(_DWORD *)(v119 + 512) = v118;
  if (*((void *)this + 432) || *((_DWORD *)this + 902) || *((_DWORD *)this + 903))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 432, 512, 0, 0x3FFFFFFFFFFLL, 32, v120, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 304) = 0;
  *(_DWORD *)(*((void *)this + 33) + 516) = 0;
  *(_DWORD *)(*((void *)this + 33) + 308) = 0;
  uint64_t v121 = *((void *)this + 33);
  int v122 = *(_DWORD *)(v121 + 308);
  *(_DWORD *)(v121 + 308) = 0;
  *(_DWORD *)(*((void *)this + 33) + 308) ^= 0xFFFFFF00;
  uint64_t v123 = *((void *)this + 33);
  int v124 = *(_DWORD *)(v123 + 308);
  *(_DWORD *)(v123 + 308) = v122;
  if (*((void *)this + 476) || *((_DWORD *)this + 990) || *((_DWORD *)this + 991))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 308, 0, 0xFFFFFFFFLL, 8, v124, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 520) = 0;
  uint64_t v125 = *((void *)this + 33);
  int v126 = *(_DWORD *)(v125 + 520);
  *(_DWORD *)(v125 + 520) = 0;
  *(_DWORD *)(*((void *)this + 33) + 520) ^= 0x3FFu;
  uint64_t v127 = *((void *)this + 33);
  int v128 = *(_DWORD *)(v127 + 520);
  *(_DWORD *)(v127 + 520) = v126;
  if (*((void *)this + 476) || *((_DWORD *)this + 990) || *((_DWORD *)this + 991))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 520, 0, 0x3FFFFFFFFFFLL, 32, v128, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 312) = 0;
  uint64_t v129 = *((void *)this + 33);
  int v130 = *(_DWORD *)(v129 + 312);
  *(_DWORD *)(v129 + 312) = 0;
  *(_DWORD *)(*((void *)this + 33) + 312) ^= 0xFFFFFF00;
  uint64_t v131 = *((void *)this + 33);
  int v132 = *(_DWORD *)(v131 + 312);
  *(_DWORD *)(v131 + 312) = v130;
  if (*((void *)this + 498) || *((_DWORD *)this + 1034) || *((_DWORD *)this + 1035))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 312, 0, 0xFFFFFFFFLL, 8, v132, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 524) = 0;
  uint64_t v133 = *((void *)this + 33);
  int v134 = *(_DWORD *)(v133 + 524);
  *(_DWORD *)(v133 + 524) = 0;
  *(_DWORD *)(*((void *)this + 33) + 524) ^= 0x3FFu;
  uint64_t v135 = *((void *)this + 33);
  int v136 = *(_DWORD *)(v135 + 524);
  *(_DWORD *)(v135 + 524) = v134;
  if (*((void *)this + 498) || *((_DWORD *)this + 1034) || *((_DWORD *)this + 1035))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 524, 0, 0x3FFFFFFFFFFLL, 32, v136, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 316) = 0;
  *(_DWORD *)(*((void *)this + 33) + 528) = 0;
  uint64_t v137 = *((void *)this + 33);
  int v138 = *(_DWORD *)(v137 + 316);
  *(_DWORD *)(v137 + 316) = 0;
  *(_DWORD *)(*((void *)this + 33) + 316) ^= 0xFFFFFF00;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 316);
  *(_DWORD *)(v139 + 316) = v138;
  if (*((void *)this + 520) || *((_DWORD *)this + 1078) || *((_DWORD *)this + 1079))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 520, 316, 0, 0xFFFFFFFFLL, 8, v140, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 528);
  *(_DWORD *)(v141 + 528) = 0;
  *(_DWORD *)(*((void *)this + 33) + 528) ^= 0x3FFu;
  uint64_t v143 = *((void *)this + 33);
  int v144 = *(_DWORD *)(v143 + 528);
  *(_DWORD *)(v143 + 528) = v142;
  if (*((void *)this + 520) || *((_DWORD *)this + 1078) || *((_DWORD *)this + 1079))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 520, 528, 0, 0x3FFFFFFFFFFLL, 32, v144, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 320) = 0;
  uint64_t v145 = *((void *)this + 33);
  int v146 = *(_DWORD *)(v145 + 320);
  *(_DWORD *)(v145 + 320) = 0;
  *(_DWORD *)(*((void *)this + 33) + 320) ^= 0xFFFFFF00;
  uint64_t v147 = *((void *)this + 33);
  int v148 = *(_DWORD *)(v147 + 320);
  *(_DWORD *)(v147 + 320) = v146;
  if (*((void *)this + 542) || *((_DWORD *)this + 1122) || *((_DWORD *)this + 1123))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 542, 320, 0, 0xFFFFFFFFLL, 8, v148, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 532) = 0;
  uint64_t v149 = *((void *)this + 33);
  int v150 = *(_DWORD *)(v149 + 532);
  *(_DWORD *)(v149 + 532) = 0;
  *(_DWORD *)(*((void *)this + 33) + 532) ^= 0x3FFu;
  uint64_t v151 = *((void *)this + 33);
  int v152 = *(_DWORD *)(v151 + 532);
  *(_DWORD *)(v151 + 532) = v150;
  if (*((void *)this + 542) || *((_DWORD *)this + 1122) || *((_DWORD *)this + 1123))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 542, 532, 0, 0x3FFFFFFFFFFLL, 32, v152, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 324) = 0;
  uint64_t v153 = *((void *)this + 33);
  int v154 = *(_DWORD *)(v153 + 324);
  *(_DWORD *)(v153 + 324) = 0;
  *(_DWORD *)(*((void *)this + 33) + 324) ^= 0xFFFFFF00;
  uint64_t v155 = *((void *)this + 33);
  int v156 = *(_DWORD *)(v155 + 324);
  *(_DWORD *)(v155 + 324) = v154;
  uint64_t v157 = *((void *)this + 32);
  unsigned int v158 = *(_DWORD *)(v157 + 17568);
  uint64_t v159 = v157 + 176 * v158;
  if (*(void *)(v159 + 3072) || *(_DWORD *)(v157 + 176 * v158 + 3224) || *(_DWORD *)(v157 + 176 * v158 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v159 + 3072), 324, 0, 0xFFFFFFFFLL, 8, v156, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 536) = 0;
  uint64_t v160 = *((void *)this + 33);
  int v161 = *(_DWORD *)(v160 + 536);
  *(_DWORD *)(v160 + 536) = 0;
  *(_DWORD *)(*((void *)this + 33) + 536) ^= 0x3FFu;
  uint64_t v162 = *((void *)this + 33);
  int v163 = *(_DWORD *)(v162 + 536);
  *(_DWORD *)(v162 + 536) = v161;
  uint64_t v164 = *((void *)this + 32);
  unsigned int v165 = *(_DWORD *)(v164 + 17568);
  uint64_t v166 = v164 + 176 * v165;
  if (*(void *)(v166 + 3072) || *(_DWORD *)(v164 + 176 * v165 + 3224) || *(_DWORD *)(v164 + 176 * v165 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v166 + 3072), 536, 0, 0x3FFFFFFFFFFLL, 32, v163, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 328) = 0;
  uint64_t v167 = *((void *)this + 33);
  int v168 = *(_DWORD *)(v167 + 328);
  *(_DWORD *)(v167 + 328) = 0;
  *(_DWORD *)(*((void *)this + 33) + 328) ^= 0xFFFFFF00;
  uint64_t v169 = *((void *)this + 33);
  int v170 = *(_DWORD *)(v169 + 328);
  *(_DWORD *)(v169 + 328) = v168;
  uint64_t v171 = *((void *)this + 32);
  int v172 = *(_DWORD *)(v171 + 5724);
  uint64_t v173 = v171 + 176 * v172;
  if (*(void *)(v173 + 3776) || *(_DWORD *)(v171 + 176 * v172 + 3928) || *(_DWORD *)(v171 + 176 * v172 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v173 + 3776), 328, 0, 0xFFFFFFFFLL, 8, v170, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 540) = 0;
  uint64_t v174 = *((void *)this + 33);
  int v175 = *(_DWORD *)(v174 + 540);
  *(_DWORD *)(v174 + 540) = 0;
  *(_DWORD *)(*((void *)this + 33) + 540) ^= 0x3FFu;
  uint64_t v176 = *((void *)this + 33);
  int v177 = *(_DWORD *)(v176 + 540);
  *(_DWORD *)(v176 + 540) = v175;
  uint64_t v178 = *((void *)this + 32);
  int v179 = *(_DWORD *)(v178 + 5724);
  uint64_t v180 = v178 + 176 * v179;
  if (*(void *)(v180 + 3776) || *(_DWORD *)(v178 + 176 * v179 + 3928) || *(_DWORD *)(v178 + 176 * v179 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v180 + 3776), 540, 0, 0x3FFFFFFFFFFLL, 32, v177, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 332) = 0;
  uint64_t v181 = *((void *)this + 33);
  int v182 = *(_DWORD *)(v181 + 332);
  *(_DWORD *)(v181 + 332) = 0;
  *(_DWORD *)(*((void *)this + 33) + 332) ^= 0xFFFFFF00;
  uint64_t v183 = *((void *)this + 33);
  int v184 = *(_DWORD *)(v183 + 332);
  *(_DWORD *)(v183 + 332) = v182;
  uint64_t v185 = *((void *)this + 32);
  int v186 = *(_DWORD *)(v185 + 5720);
  uint64_t v187 = v185 + 176 * v186;
  if (*(void *)(v187 + 3776) || *(_DWORD *)(v185 + 176 * v186 + 3928) || *(_DWORD *)(v185 + 176 * v186 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v187 + 3776), 332, 0, 0xFFFFFFFFLL, 8, v184, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 544) = 0;
  uint64_t v188 = *((void *)this + 33);
  int v189 = *(_DWORD *)(v188 + 544);
  *(_DWORD *)(v188 + 544) = 0;
  *(_DWORD *)(*((void *)this + 33) + 544) ^= 0x3FFu;
  uint64_t v190 = *((void *)this + 33);
  int v191 = *(_DWORD *)(v190 + 544);
  *(_DWORD *)(v190 + 544) = v189;
  uint64_t v192 = *((void *)this + 32);
  int v193 = *(_DWORD *)(v192 + 5720);
  uint64_t v194 = v192 + 176 * v193;
  if (*(void *)(v194 + 3776) || *(_DWORD *)(v192 + 176 * v193 + 3928) || *(_DWORD *)(v192 + 176 * v193 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v194 + 3776), 544, 0, 0x3FFFFFFFFFFLL, 32, v191, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 336) = 0;
  uint64_t v195 = *((void *)this + 33);
  int v196 = *(_DWORD *)(v195 + 336);
  *(_DWORD *)(v195 + 336) = 0;
  *(_DWORD *)(*((void *)this + 33) + 336) ^= 0xFFFFFF00;
  uint64_t v197 = *((void *)this + 33);
  int v198 = *(_DWORD *)(v197 + 336);
  *(_DWORD *)(v197 + 336) = v196;
  uint64_t v199 = *((void *)this + 32);
  int v200 = *(_DWORD *)(v199 + 5716);
  uint64_t v201 = v199 + 176 * v200;
  if (*(void *)(v201 + 5360) || *(_DWORD *)(v199 + 176 * v200 + 5512) || *(_DWORD *)(v199 + 176 * v200 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v201 + 5360), 336, 0, 0xFFFFFFFFLL, 8, v198, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 548) = 0;
  uint64_t v202 = *((void *)this + 33);
  int v203 = *(_DWORD *)(v202 + 548);
  *(_DWORD *)(v202 + 548) = 0;
  *(_DWORD *)(*((void *)this + 33) + 548) ^= 0x3FFu;
  uint64_t v204 = *((void *)this + 33);
  int v205 = *(_DWORD *)(v204 + 548);
  *(_DWORD *)(v204 + 548) = v203;
  uint64_t v206 = *((void *)this + 32);
  int v207 = *(_DWORD *)(v206 + 5716);
  uint64_t v208 = v206 + 176 * v207;
  if (*(void *)(v208 + 5360) || *(_DWORD *)(v206 + 176 * v207 + 5512) || *(_DWORD *)(v206 + 176 * v207 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v208 + 5360), 548, 0, 0x3FFFFFFFFFFLL, 32, v205, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 340) = 0;
  uint64_t v209 = *((void *)this + 33);
  int v210 = *(_DWORD *)(v209 + 340);
  *(_DWORD *)(v209 + 340) = 0;
  *(_DWORD *)(*((void *)this + 33) + 340) ^= 0xFFFFFF00;
  uint64_t v211 = *((void *)this + 33);
  int v212 = *(_DWORD *)(v211 + 340);
  *(_DWORD *)(v211 + 340) = v210;
  uint64_t v213 = *((void *)this + 32);
  int v214 = *(_DWORD *)(v213 + 5712);
  uint64_t v215 = v213 + 176 * v214;
  if (*(void *)(v215 + 5360) || *(_DWORD *)(v213 + 176 * v214 + 5512) || *(_DWORD *)(v213 + 176 * v214 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v215 + 5360), 340, 0, 0xFFFFFFFFLL, 8, v212, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 552) = 0;
  uint64_t v216 = *((void *)this + 33);
  int v217 = *(_DWORD *)(v216 + 552);
  *(_DWORD *)(v216 + 552) = 0;
  *(_DWORD *)(*((void *)this + 33) + 552) ^= 0x3FFu;
  uint64_t v218 = *((void *)this + 33);
  int v219 = *(_DWORD *)(v218 + 552);
  *(_DWORD *)(v218 + 552) = v217;
  uint64_t v220 = *((void *)this + 32);
  int v221 = *(_DWORD *)(v220 + 5712);
  uint64_t v222 = v220 + 176 * v221;
  if (*(void *)(v222 + 5360) || *(_DWORD *)(v220 + 176 * v221 + 5512) || *(_DWORD *)(v220 + 176 * v221 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v222 + 5360), 552, 0, 0x3FFFFFFFFFFLL, 32, v219, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 348) = 0;
  *(_DWORD *)(*((void *)this + 33) + 560) = 0;
  *(_DWORD *)(*((void *)this + 33) + 352) = 0;
  *(_DWORD *)(*((void *)this + 33) + 564) = 0;
  *(_DWORD *)(*((void *)this + 33) + 356) = 0;
  *(_DWORD *)(*((void *)this + 33) + 568) = 0;
  *(_DWORD *)(*((void *)this + 33) + 360) = 0;
  *(_DWORD *)(*((void *)this + 33) + 572) = 0;
  uint64_t v223 = *((void *)this + 33);
  int v224 = *(_DWORD *)(v223 + 352);
  *(_DWORD *)(v223 + 352) = 0;
  *(_DWORD *)(*((void *)this + 33) + 352) ^= 0xFFFFFF80;
  uint64_t v225 = *((void *)this + 33);
  int v226 = *(_DWORD *)(v225 + 352);
  *(_DWORD *)(v225 + 352) = v224;
  uint64_t v227 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v227 || *(_DWORD *)(v227 + 152) || *(_DWORD *)(v227 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v227, 352, *(_DWORD *)(v227 + 52), 0xFFFFFFFFLL, 7, v226, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v228 = *((void *)this + 33);
  int v229 = *(_DWORD *)(v228 + 564);
  *(_DWORD *)(v228 + 564) = 0;
  *(_DWORD *)(*((void *)this + 33) + 564) ^= 0x3FFu;
  uint64_t v230 = *((void *)this + 33);
  int v231 = *(_DWORD *)(v230 + 564);
  *(_DWORD *)(v230 + 564) = v229;
  uint64_t v232 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v232 || *(_DWORD *)(v232 + 152) || *(_DWORD *)(v232 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v232, 564, *(_DWORD *)(v232 + 52), 0x3FFFFFFFFFFLL, 32, v231, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v233 = *((void *)this + 33);
  int v234 = *(_DWORD *)(v233 + 360);
  *(_DWORD *)(v233 + 360) = 0;
  *(_DWORD *)(*((void *)this + 33) + 360) ^= 0xFFFFFF80;
  uint64_t v235 = *((void *)this + 33);
  int v236 = *(_DWORD *)(v235 + 360);
  *(_DWORD *)(v235 + 360) = v234;
  uint64_t v237 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v237 || *(_DWORD *)(v237 + 152) || *(_DWORD *)(v237 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v237, 360, *(_DWORD *)(v237 + 56), 0xFFFFFFFFLL, 7, v236, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v238 = v3;
  uint64_t v239 = *((void *)this + 33);
  int v240 = *(_DWORD *)(v239 + 572);
  *(_DWORD *)(v239 + 572) = 0;
  *(_DWORD *)(*((void *)this + 33) + 572) ^= 0x3FFu;
  uint64_t v241 = *((void *)this + 33);
  int v242 = *(_DWORD *)(v241 + 572);
  *(_DWORD *)(v241 + 572) = v240;
  uint64_t v243 = *((void *)this + 32);
  uint64_t v244 = *(void *)(v243 + 376 * v6 + 5736);
  if (*(void *)v244 || *(_DWORD *)(v244 + 152) || *(_DWORD *)(v244 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v244, 572, *(_DWORD *)(v244 + 56), 0x3FFFFFFFFFFLL, 32, v242, 4);
    if (result) {
      return result;
    }
    uint64_t v243 = *((void *)this + 32);
  }
  int v245 = *(_DWORD *)(v243 + 2648);
  uint64_t v246 = *((void *)this + 33);
  int v247 = *(_DWORD *)(v246 + 348);
  *(_DWORD *)(v246 + 348) = 0;
  *(_DWORD *)(*((void *)this + 33) + 348) ^= 0xFFFFFF80;
  uint64_t v248 = *((void *)this + 33);
  int v249 = *(_DWORD *)(v248 + 348);
  *(_DWORD *)(v248 + 348) = v247;
  uint64_t v250 = *((void *)this + 32);
  if (v245 == 1)
  {
    uint64_t v251 = *(void *)(v250 + 376 * v6 + 5736);
    if (*(void *)v251 || *(_DWORD *)(v251 + 152) || *(_DWORD *)(v251 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v251, 348, *(_DWORD *)(v251 + 64), 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v252 = *((void *)this + 33);
    int v253 = *(_DWORD *)(v252 + 560);
    *(_DWORD *)(v252 + 560) = 0;
    *(_DWORD *)(*((void *)this + 33) + 560) ^= 0x3FFu;
    uint64_t v254 = *((void *)this + 33);
    int v255 = *(_DWORD *)(v254 + 560);
    *(_DWORD *)(v254 + 560) = v253;
    uint64_t v256 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v256 || *(_DWORD *)(v256 + 152) || *(_DWORD *)(v256 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v256, 560, *(_DWORD *)(v256 + 64), 0x3FFFFFFFFFFLL, 32, v255, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v257 = *((void *)this + 33);
    int v258 = *(_DWORD *)(v257 + 356);
    *(_DWORD *)(v257 + 356) = 0;
    *(_DWORD *)(*((void *)this + 33) + 356) ^= 0xFFFFFF80;
    uint64_t v259 = *((void *)this + 33);
    int v260 = *(_DWORD *)(v259 + 356);
    *(_DWORD *)(v259 + 356) = v258;
    uint64_t v261 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v261 || *(_DWORD *)(v261 + 152) || *(_DWORD *)(v261 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v261, 356, *(_DWORD *)(v261 + 68), 0xFFFFFFFFLL, 7, v260, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v262 = *((void *)this + 33);
    int v263 = *(_DWORD *)(v262 + 568);
    *(_DWORD *)(v262 + 568) = 0;
    *(_DWORD *)(*((void *)this + 33) + 568) ^= 0x3FFu;
    uint64_t v264 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v264 + 568);
    *(_DWORD *)(v264 + 568) = v263;
    uint64_t v266 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v266 || *(_DWORD *)(v266 + 152) || *(_DWORD *)(v266 + 156))
    {
      int v267 = *(_DWORD *)(v266 + 68);
      int v268 = this;
      goto LABEL_207;
    }
  }
  else
  {
    uint64_t v269 = v250 + 376 * v6;
    if (*(void *)(v269 + 5752) || *(_DWORD *)(v250 + 376 * v6 + 5904) || *(_DWORD *)(v250 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v269 + 5752), 348, 0, 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v270 = *((void *)this + 33);
    int v271 = *(_DWORD *)(v270 + 560);
    *(_DWORD *)(v270 + 560) = 0;
    *(_DWORD *)(*((void *)this + 33) + 560) ^= 0x3FFu;
    uint64_t v272 = *((void *)this + 33);
    int v273 = *(_DWORD *)(v272 + 560);
    *(_DWORD *)(v272 + 560) = v271;
    uint64_t v274 = *((void *)this + 32);
    uint64_t v275 = v274 + 376 * v6;
    if (*(void *)(v275 + 5752) || *(_DWORD *)(v274 + 376 * v6 + 5904) || *(_DWORD *)(v274 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v275 + 5752), 560, 0, 0x3FFFFFFFFFFLL, 32, v273, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v276 = *((void *)this + 33);
    int v277 = *(_DWORD *)(v276 + 356);
    *(_DWORD *)(v276 + 356) = 0;
    *(_DWORD *)(*((void *)this + 33) + 356) ^= 0xFFFFFF80;
    uint64_t v278 = *((void *)this + 33);
    int v279 = *(_DWORD *)(v278 + 356);
    *(_DWORD *)(v278 + 356) = v277;
    uint64_t v280 = *((void *)this + 32);
    uint64_t v281 = v280 + 376 * v6;
    if (*(void *)(v281 + 5928) || *(_DWORD *)(v280 + 376 * v6 + 6080) || *(_DWORD *)(v280 + 376 * v6 + 6084))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v281 + 5928), 356, 0, 0xFFFFFFFFLL, 7, v279, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v282 = *((void *)this + 33);
    int v283 = *(_DWORD *)(v282 + 568);
    *(_DWORD *)(v282 + 568) = 0;
    *(_DWORD *)(*((void *)this + 33) + 568) ^= 0x3FFu;
    uint64_t v284 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v284 + 568);
    *(_DWORD *)(v284 + 568) = v283;
    uint64_t v285 = *((void *)this + 32);
    uint64_t v286 = v285 + 376 * v6;
    if (*(void *)(v286 + 5928) || *(_DWORD *)(v285 + 376 * v6 + 6080) || *(_DWORD *)(v285 + 376 * v6 + 6084))
    {
      uint64_t v266 = v286 + 5928;
      int v268 = this;
      int v267 = 0;
LABEL_207:
      uint64_t result = CAHDec::addToPatcherList((uint64_t)v268, (void *)v266, 568, v267, 0x3FFFFFFFFFFLL, 32, v265, 4);
      if (result) {
        return result;
      }
    }
  }
  if (!v388)
  {
    uint64_t v319 = 0;
    uint64_t v320 = 17424;
    do
    {
      uint64_t v321 = *(void *)(*(void *)(*((void *)this + 32) + v320) + 40);
      *(_DWORD *)(*((void *)this + 33) + v319 + 376) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 576) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 388) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 588) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 400) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 600) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 412) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 612) = 0;
      uint64_t v322 = *((void *)this + 33) + v319;
      int v323 = *(_DWORD *)(v322 + 388);
      *(_DWORD *)(v322 + 388) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 388) ^= 0xFFFFFF80;
      uint64_t v324 = *((void *)this + 33) + v319;
      int v325 = *(_DWORD *)(v324 + 388);
      *(_DWORD *)(v324 + 388) = v323;
      uint64_t v326 = *(void *)(v321 + 8);
      if (*(void *)v326 || *(_DWORD *)(v326 + 152) || *(_DWORD *)(v326 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v326, (int)v319 + 388, *(_DWORD *)(v326 + 52), 0xFFFFFFFFLL, 7, v325, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v327 = *((void *)this + 33) + v319;
      int v328 = *(_DWORD *)(v327 + 588);
      *(_DWORD *)(v327 + 588) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 588) ^= 0x3FFu;
      uint64_t v329 = *((void *)this + 33) + v319;
      int v330 = *(_DWORD *)(v329 + 588);
      *(_DWORD *)(v329 + 588) = v328;
      uint64_t v331 = *(void *)(v321 + 8);
      if (*(void *)v331 || *(_DWORD *)(v331 + 152) || *(_DWORD *)(v331 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v331, (int)v319 + 588, *(_DWORD *)(v331 + 52), 0x3FFFFFFFFFFLL, 32, v330, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v332 = *((void *)this + 33) + v319;
      int v333 = *(_DWORD *)(v332 + 412);
      *(_DWORD *)(v332 + 412) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 412) ^= 0xFFFFFF80;
      uint64_t v334 = *((void *)this + 33) + v319;
      int v335 = *(_DWORD *)(v334 + 412);
      *(_DWORD *)(v334 + 412) = v333;
      uint64_t v336 = *(void *)(v321 + 8);
      if (*(void *)v336 || *(_DWORD *)(v336 + 152) || *(_DWORD *)(v336 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v336, (int)v319 + 412, *(_DWORD *)(v336 + 56), 0xFFFFFFFFLL, 7, v335, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v337 = *((void *)this + 33) + v319;
      int v338 = *(_DWORD *)(v337 + 612);
      *(_DWORD *)(v337 + 612) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 612) ^= 0x3FFu;
      uint64_t v339 = *((void *)this + 33) + v319;
      int v340 = *(_DWORD *)(v339 + 612);
      *(_DWORD *)(v339 + 612) = v338;
      uint64_t v341 = *(void *)(v321 + 8);
      if (*(void *)v341 || *(_DWORD *)(v341 + 152) || *(_DWORD *)(v341 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v341, (int)v319 + 612, *(_DWORD *)(v341 + 56), 0x3FFFFFFFFFFLL, 32, v340, 4);
        if (result) {
          return result;
        }
      }
      int v342 = *(_DWORD *)(*((void *)this + 32) + 2648);
      uint64_t v343 = *((void *)this + 33) + v319;
      int v344 = *(_DWORD *)(v343 + 376);
      *(_DWORD *)(v343 + 376) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 376) ^= 0xFFFFFF80;
      uint64_t v345 = *((void *)this + 33) + v319;
      int v346 = *(_DWORD *)(v345 + 376);
      *(_DWORD *)(v345 + 376) = v344;
      if (v342 == 1)
      {
        uint64_t v347 = *(void *)(v321 + 8);
        if (*(void *)v347 || *(_DWORD *)(v347 + 152) || *(_DWORD *)(v347 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v347, (int)v319 + 376, *(_DWORD *)(v347 + 64), 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v348 = *((void *)this + 33) + v319;
        int v349 = *(_DWORD *)(v348 + 576);
        *(_DWORD *)(v348 + 576) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 576) ^= 0x3FFu;
        uint64_t v350 = *((void *)this + 33) + v319;
        int v351 = *(_DWORD *)(v350 + 576);
        *(_DWORD *)(v350 + 576) = v349;
        uint64_t v352 = *(void *)(v321 + 8);
        if (*(void *)v352 || *(_DWORD *)(v352 + 152) || *(_DWORD *)(v352 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v352, (int)v319 + 576, *(_DWORD *)(v352 + 64), 0x3FFFFFFFFFFLL, 32, v351, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v353 = *((void *)this + 33) + v319;
        int v354 = *(_DWORD *)(v353 + 400);
        *(_DWORD *)(v353 + 400) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 400) ^= 0xFFFFFF80;
        uint64_t v355 = *((void *)this + 33) + v319;
        int v356 = *(_DWORD *)(v355 + 400);
        *(_DWORD *)(v355 + 400) = v354;
        uint64_t v357 = *(void *)(v321 + 8);
        if (*(void *)v357 || *(_DWORD *)(v357 + 152) || *(_DWORD *)(v357 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v357, (int)v319 + 400, *(_DWORD *)(v357 + 68), 0xFFFFFFFFLL, 7, v356, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v358 = *((void *)this + 33) + v319;
        int v359 = *(_DWORD *)(v358 + 600);
        *(_DWORD *)(v358 + 600) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 600) ^= 0x3FFu;
        uint64_t v360 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v360 + 600);
        *(_DWORD *)(v360 + 600) = v359;
        uint64_t v362 = *(void *)(v321 + 8);
        if (*(void *)v362 || *(_DWORD *)(v362 + 152) || *(_DWORD *)(v362 + 156))
        {
          int v363 = *(_DWORD *)(v362 + 68);
          int v364 = v319 + 600;
          int v365 = this;
          goto LABEL_298;
        }
      }
      else
      {
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 376, 0, 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v366 = *((void *)this + 33) + v319;
        int v367 = *(_DWORD *)(v366 + 576);
        *(_DWORD *)(v366 + 576) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 576) ^= 0x3FFu;
        uint64_t v368 = *((void *)this + 33) + v319;
        int v369 = *(_DWORD *)(v368 + 576);
        *(_DWORD *)(v368 + 576) = v367;
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 576, 0, 0x3FFFFFFFFFFLL, 32, v369, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v370 = *((void *)this + 33) + v319;
        int v371 = *(_DWORD *)(v370 + 400);
        *(_DWORD *)(v370 + 400) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 400) ^= 0xFFFFFF80;
        uint64_t v372 = *((void *)this + 33) + v319;
        int v373 = *(_DWORD *)(v372 + 400);
        *(_DWORD *)(v372 + 400) = v371;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 200), (int)v319 + 400, 0, 0xFFFFFFFFLL, 7, v373, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v374 = *((void *)this + 33) + v319;
        int v375 = *(_DWORD *)(v374 + 600);
        *(_DWORD *)(v374 + 600) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 600) ^= 0x3FFu;
        uint64_t v376 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v376 + 600);
        *(_DWORD *)(v376 + 600) = v375;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          int v364 = v319 + 600;
          int v365 = this;
          uint64_t v362 = v321 + 200;
          int v363 = 0;
LABEL_298:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v365, (void *)v362, v364, v363, 0x3FFFFFFFFFFLL, 32, v361, 4);
          if (result) {
            return result;
          }
        }
      }
      v320 += 8;
      v319 += 4;
    }
    while (v319 != 12);
  }
  unsigned int v287 = subWidth[*(int *)(*(void *)(*((void *)this + 32) + 17560) + 4)];
  *(_DWORD *)(*((void *)this + 33) + 424) = 0;
  *(_DWORD *)(*((void *)this + 33) + 624) = 0;
  *(_DWORD *)(*((void *)this + 33) + 428) = 0;
  *(_DWORD *)(*((void *)this + 33) + 628) = 0;
  *(_DWORD *)(*((void *)this + 33) + 432) = 0;
  *(_DWORD *)(*((void *)this + 33) + 436) = 0;
  if (!*(_DWORD *)(*((void *)this + 32) + 2644)) {
    goto LABEL_230;
  }
  uint64_t v288 = *((void *)this + 33);
  int v289 = *(_DWORD *)(v288 + 424);
  *(_DWORD *)(v288 + 424) = 0;
  *(_DWORD *)(*((void *)this + 33) + 424) ^= 0xFFFFFFC0;
  uint64_t v290 = *((void *)this + 33);
  int v291 = *(_DWORD *)(v290 + 424);
  *(_DWORD *)(v290 + 424) = v289;
  uint64_t v292 = *(void *)(*((void *)this + 32) + 11768);
  if (!*(void *)v292 && !*(_DWORD *)(v292 + 152) && !*(_DWORD *)(v292 + 156)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v292, 424, *(_DWORD *)(v292 + 52), 0xFFFFFFFFLL, 6, v291, 4), !result))
  {
    uint64_t v293 = *((void *)this + 33);
    int v294 = *(_DWORD *)(v293 + 624);
    *(_DWORD *)(v293 + 624) = 0;
    *(_DWORD *)(*((void *)this + 33) + 624) ^= 0x3FFu;
    uint64_t v295 = *((void *)this + 33);
    int v296 = *(_DWORD *)(v295 + 624);
    *(_DWORD *)(v295 + 624) = v294;
    uint64_t v297 = *(void *)(*((void *)this + 32) + 11768);
    if (!*(void *)v297 && !*(_DWORD *)(v297 + 152) && !*(_DWORD *)(v297 + 156)) {
      goto LABEL_330;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v297, 624, *(_DWORD *)(v297 + 52), 0x3FFFFFFFFFFLL, 32, v296, 4);
    if (!result)
    {
LABEL_330:
      uint64_t v298 = *((void *)this + 33);
      int v299 = *(_DWORD *)(v298 + 428);
      *(_DWORD *)(v298 + 428) = 0;
      *(_DWORD *)(*((void *)this + 33) + 428) ^= 0xFFFFFFC0;
      uint64_t v300 = *((void *)this + 33);
      int v301 = *(_DWORD *)(v300 + 428);
      *(_DWORD *)(v300 + 428) = v299;
      uint64_t v302 = *(void *)(*((void *)this + 32) + 11768);
      if (!*(void *)v302 && !*(_DWORD *)(v302 + 152) && !*(_DWORD *)(v302 + 156)) {
        goto LABEL_222;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v302, 428, *(_DWORD *)(v302 + 56), 0xFFFFFFFFLL, 6, v301, 4);
      if (!result)
      {
LABEL_222:
        uint64_t v303 = *((void *)this + 33);
        int v304 = *(_DWORD *)(v303 + 628);
        *(_DWORD *)(v303 + 628) = 0;
        *(_DWORD *)(*((void *)this + 33) + 628) ^= 0x3FFu;
        uint64_t v305 = *((void *)this + 33);
        int v306 = *(_DWORD *)(v305 + 628);
        *(_DWORD *)(v305 + 628) = v304;
        uint64_t v307 = *((void *)this + 32);
        uint64_t v308 = *(void *)(v307 + 11768);
        if (!*(void *)v308 && !*(_DWORD *)(v308 + 152) && !*(_DWORD *)(v308 + 156)) {
          goto LABEL_227;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v308, 628, *(_DWORD *)(v308 + 56), 0x3FFFFFFFFFFLL, 32, v306, 4);
        if (!result)
        {
          uint64_t v307 = *((void *)this + 32);
LABEL_227:
          if (*(unsigned char *)(v307 + 8))
          {
            *(_DWORD *)(*((void *)this + 33) + 432) = *(_DWORD *)(*((void *)this + 33) + 432) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(v307 + 11768) + 76) >> 6) & 0xFFF) << 6);
            int v309 = (_DWORD *)(*(void *)(*((void *)this + 32) + 11768) + 80);
          }
          else
          {
            if (CAHDecHibiscusLgh::getSWRStride(this, *(unsigned __int16 *)(v238 + 148) + 1, *(unsigned __int8 *)(v395 + 105) - 8, *(unsigned __int8 *)(v395 + 105) - 8, v287))return 0xFFFFFFFFLL; {
            *(_DWORD *)(*((void *)this + 33) + 432) = *(_DWORD *)(*((void *)this + 33) + 432) & 0xFFFC003F | (((*((_DWORD *)this + 1135) >> 6) & 0xFFF) << 6);
            }
            int v309 = (_DWORD *)((char *)this + 4544);
          }
          *(_DWORD *)(*((void *)this + 33) + 436) = *(_DWORD *)(*((void *)this + 33) + 436) & 0xFFF8003F | (((*v309 >> 6) & 0x1FFF) << 6);
LABEL_230:
          if (v390 < 2)
          {
            uint64_t v310 = *((void *)this + 33);
            *(_DWORD *)(v310 + 632) = 65537;
            *(_WORD *)(v310 + 636) = 0;
            *(_WORD *)(v310 + 638) = *(_DWORD *)(v395 + 108) >> 6;
            *(_WORD *)(v310 + 766) = 0;
            *(_WORD *)(v310 + 768) = *(_DWORD *)(v395 + 112) >> 6;
            uint64_t v311 = *((void *)this + 32);
          }
          else
          {
            uint64_t v310 = *((void *)this + 33);
            *(_WORD *)(v310 + 632) = v394;
            uint64_t v311 = *((void *)this + 32);
            if (v391 != 31)
            {
              if (v392 <= 1) {
                uint64_t v312 = 1;
              }
              else {
                uint64_t v312 = v392;
              }
              uint64_t v313 = (unsigned char *)(*(void *)(v311 + 17560) + 2786);
              do
              {
                if (!*v313) {
                  *(_WORD *)(v310 + 2 * v389 + 766) = *(_DWORD *)(v313 - 26) >> 3;
                }
                v313 += 1792;
                --v312;
              }
              while (v312);
            }
            *(_WORD *)(v310 + 634) = v392;
            if (v393 != 31)
            {
              uint64_t v314 = *(void *)(v311 + 17560);
              if (v394 <= 1) {
                uint64_t v315 = 1;
              }
              else {
                uint64_t v315 = v394;
              }
              int v316 = (unsigned __int8 *)(v314 + 2786);
              uint64_t v317 = (unsigned __int8 *)(v314 + 2786);
              do
              {
                int v318 = *v317;
                v317 += 28;
                if (!v318) {
                  *(_WORD *)(v310 + 2 * v389 + 636) = *(_DWORD *)(v316 - 18) >> 3;
                }
                int v316 = v317;
                --v315;
              }
              while (v315);
            }
          }
          if (*(_DWORD *)(v311 + 2360) == 1)
          {
            *(_DWORD *)(v310 + 780) = *(_DWORD *)(v310 + 780) & 0xFFFFFFFE | *(_DWORD *)(v311 + 2508) & 1;
            if (*(_DWORD *)(v311 + 2508))
            {
              *(_DWORD *)(v310 + 788) = 0x10000000;
              *(_DWORD *)(v310 + 792) = *(_DWORD *)(v311 + 2368);
              *(void *)(v310 + 800) = 0;
              *(_DWORD *)(v310 + 796) = 0;
              *(_OWORD *)(v310 + 808) = *(_OWORD *)(v311 + 2372);
              long long v377 = *(_OWORD *)(v311 + 2388);
              *(_OWORD *)(v310 + 840) = *(_OWORD *)(v311 + 2404);
              *(_OWORD *)(v310 + 824) = v377;
            }
            *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v311 + 2512) & 1));
            if (*(_DWORD *)(v311 + 2512))
            {
              *(_DWORD *)(v310 + 856) = 0;
              if (!*(_DWORD *)(v311 + 2424))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0]) = 136315138;
                  *(void *)((char *)buf + 4) = "populatePictureRegisters";
                  int v386 = &_os_log_internal;
                  uint64_t v387 = "AppleAVD: %s(): H13A descrambler is not supported\n";
                  goto LABEL_324;
                }
                return 0xFFFFFFFFLL;
              }
              *(_DWORD *)(v311 + 2640) = 0;
              int v378 = *(_DWORD *)(v310 + 856) & 0xF7FFFFF | ((*(_DWORD *)(v311 + 2420) & 1) << 23) | 0x20000000;
              *(_DWORD *)(v310 + 856) = v378;
              *(_DWORD *)(v310 + 856) = v378 & 0xFFC00000 | (*(_DWORD *)(v311 + 2364) == 0);
              long long v379 = *(_OWORD *)(v311 + 2428);
              long long v380 = *(_OWORD *)(v311 + 2444);
              *(_OWORD *)(v310 + 892) = *(_OWORD *)(v311 + 2460);
              *(_OWORD *)(v310 + 876) = v380;
              *(_OWORD *)(v310 + 860) = v379;
            }
            *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v311 + 2516) & 1));
            *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v311 + 2520) & 1));
            *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v311 + 2524) & 1));
            if (*(_DWORD *)(v311 + 2516))
            {
              *(_DWORD *)(v310 + 1016) = 0;
              if (*(_DWORD *)(v311 + 2476) == 2) {
                int v381 = 805306368;
              }
              else {
                int v381 = 813694976;
              }
              *(_DWORD *)(v310 + 1016) = v381;
              memcpy((void *)(v310 + 1020), (const void *)(v311 + 2480), 4 * *(unsigned int *)(v311 + 2476));
              *(_DWORD *)(v311 + 2516) = 0;
            }
            *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFDF | (32 * (*(_DWORD *)(v311 + 2632) & 1));
            if (*(_DWORD *)(v311 + 2632))
            {
              *(_DWORD *)(v310 + 908) = 0x80000000;
              unsigned int v382 = ((*(_DWORD *)(v311 + 2528) & 1) << 27) | 0x80000000;
              *(_DWORD *)(v310 + 908) = v382;
              *(_DWORD *)(v310 + 908) = v382 | (((2 * *(_DWORD *)(v311 + 2528)) & 4 | (*(_DWORD *)(v311 + 2528) >> 1) & 2 | (*(_DWORD *)(v311 + 2528) >> 3) & 1) << 24);
              long long v383 = *(_OWORD *)(v311 + 2532);
              long long v384 = *(_OWORD *)(v311 + 2564);
              *(_OWORD *)(v310 + 928) = *(_OWORD *)(v311 + 2548);
              *(_OWORD *)(v310 + 944) = v384;
              *(_OWORD *)(v310 + 912) = v383;
              *(void *)(v310 + 960) = *(void *)(v311 + 2580);
              *(void *)(v310 + 968) = *(void *)(v311 + 2588);
              int v385 = *(_DWORD *)(v311 + 2528);
              if ((v385 & 6) != 0 && (v385 & 8) == 0)
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0]) = 136315138;
                  *(void *)((char *)buf + 4) = "populatePictureRegisters";
                  int v386 = &_os_log_internal;
                  uint64_t v387 = "AppleAVD: %s(): chip id is not used while ecid and/or board id is used\n";
LABEL_324:
                  _os_log_impl(&dword_223977000, v386, OS_LOG_TYPE_DEFAULT, v387, (uint8_t *)buf, 0xCu);
                  return 0xFFFFFFFFLL;
                }
                return 0xFFFFFFFFLL;
              }
              *(_OWORD *)(v310 + 976) = *(_OWORD *)(v311 + 2596);
            }
            *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFBF | ((*(_DWORD *)(v311 + 2636) & 1) << 6);
            if (*(_DWORD *)(v311 + 2636))
            {
              uint64_t result = 0;
              *(_DWORD *)(v310 + 992) = -1879048192;
              *(_DWORD *)(v310 + 992) = ((*(_DWORD *)(v311 + 2612) & 1) << 23) | 0x90000000;
              *(_OWORD *)(v310 + 996) = *(_OWORD *)(v311 + 2616);
              *(_DWORD *)(v311 + 2640) = 1;
              return result;
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecHibiscusLgh::getSWRStride(CAHDecHibiscusLgh *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *(void *)((char *)this + 4540) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 1136) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecHibiscusLgh::getTileStartCTU(CAHDecHibiscusLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 632);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecHibiscusLgh::getTileEndCTU(CAHDecHibiscusLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 632);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecHibiscusLgh::populateAvdWork(CAHDecHibiscusLgh *this)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  unint64_t v3 = *(unsigned int *)(v2 + 312);
  if (v3)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    LODWORD(v7) = 0;
    int v8 = 0;
    uint64_t v9 = v1 + 4108;
    uint64_t v39 = *(void *)(v2 + 16);
    unint64_t v40 = 0;
    unint64_t v10 = *(unsigned int *)(v2 + 316);
    unint64_t v11 = v10;
    uint64_t v37 = v9;
    uint64_t v38 = *(void *)(*((void *)this + 32) + 17560);
    do
    {
      uint64_t v36 = v5;
      if (v11)
      {
        unint64_t v12 = 0;
        do
        {
          uint64_t v13 = *((void *)this + 32);
          uint64_t v14 = *(void *)(v13 + 17560);
          uint64_t v15 = v14 + v5;
          if (!*(unsigned char *)(v14 + v5 + 2786))
          {
            *(_WORD *)(v9 + 4) = v8;
            *(_WORD *)(v9 + 6) = 0;
            *(_WORD *)(v9 + 10) = v6;
            int v41 = v6;
            int v42 = v8;
            if (*(unsigned char *)(v13 + 2834)) {
              uint64_t v16 = *(void *)(v13 + 2840);
            }
            else {
              uint64_t v16 = *(void *)(v13 + 1048) + 8;
            }
            unint64_t v17 = v39 + *(unsigned int *)(v15 + 2780) - *(void *)v16;
            int v18 = 36 * v7;
            unint64_t v19 = HIDWORD(v17);
            if (*(void *)v16 || *(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1163;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 4126, v17, 0x3FFFFFFFFFFLL, 32, -1, 2);
              if (result) {
                return result;
              }
              if (*(void *)v16) {
                goto LABEL_46;
              }
            }
            if (*(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
LABEL_46:
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1164;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 4128, v17, 0xFFFFFFFFLL, 0, -1, 4);
              if (result) {
                return result;
              }
            }
            unsigned int v21 = (_DWORD *)(v14 + v5);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v14 + v5 + 2776);
            int v22 = *(_DWORD *)(v15 + 2760);
            int v23 = v22 + 7;
            if (v22 >= 0) {
              int v23 = *(_DWORD *)(v15 + 2760);
            }
            int v24 = v21[692];
            *(_DWORD *)(v9 + 28) = (v23 << 13) & 0xFFFF0000 | (v24 / 8);
            int v25 = v21[691];
            int v27 = v25 - 1;
            BOOL v26 = v25 < 1;
            int v28 = v25 + 6;
            if (!v26) {
              int v28 = v27;
            }
            unsigned int v29 = (v28 << 13) & 0xFFFF0000;
            int v30 = v21[693];
            int v31 = v30 - 1;
            BOOL v26 = v30 < 1;
            int v32 = v30 + 6;
            if (!v26) {
              int v32 = v31;
            }
            *(_DWORD *)(v9 + 32) = v29 | (v32 >> 3);
            if (v22 + v24) {
              __int16 v33 = 4;
            }
            else {
              __int16 v33 = 5;
            }
            *(_WORD *)(v9 + 12) = v33;
            unint64_t v3 = *(unsigned int *)(v38 + 312);
            unint64_t v10 = *(unsigned int *)(v38 + 316);
            if (v12 == v10 && v40 == v3) {
              __int16 v35 = 5;
            }
            else {
              __int16 v35 = 4;
            }
            *(_WORD *)(v9 + 14) = v35;
            int v6 = v41 + 1;
            int v8 = v42 + 1;
            v9 += 36;
            unint64_t v7 = 0x8E38E38E38E38E39 * ((v9 - v37) >> 2);
          }
          ++v12;
          v5 += 28;
          unint64_t v11 = v10;
        }
        while (v12 < v10);
      }
      uint64_t v5 = v36 + 1792;
      ++v40;
    }
    while (v40 < v3);
    uint64_t v1 = *((void *)this + 33);
  }
  else
  {
    LOWORD(v8) = 0;
  }
  uint64_t result = 0;
  *(_WORD *)(v1 + 26) = v8;
  *(_DWORD *)(v1 + 32) = 4108;
  return result;
}

unsigned __int8 *CAHDecHibiscusLgh::getTileAddr(CAHDecHibiscusLgh *this, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  if (*(unsigned char *)(v2 + 2834))
  {
    unint64_t v3 = *(void **)(v2 + 2840);
    uint64_t v4 = &a2[-*v3];
    uint64_t v5 = &v4[v3[2]];
    if ((unint64_t)v5 >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1264;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      unint64_t v7 = (void *)(*(void *)(*((void *)this + 32) + 2840) + 16);
      return &v4[*v7];
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 1048);
    uint64_t v9 = *(void *)(v8 + 24);
    unint64_t v7 = (void *)(v8 + 24);
    uint64_t v4 = &a2[-*(v7 - 2)];
    uint64_t v5 = &v4[v9];
    if ((unint64_t)&v4[v9] >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1281;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      return &v4[*v7];
    }
  }
  return v5;
}

uint64_t CAHDecHibiscusLgh::allocWorkBuf_SPS(CAHDecHibiscusLgh *this, int *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = *a2 + 31;
  if (*a2 < -31) {
    int v5 = *a2 + 62;
  }
  unsigned int v6 = v5 >> 5;
  int v7 = v4 + 31;
  if (v4 < -31) {
    int v7 = v4 + 62;
  }
  unsigned int v8 = v7 >> 5;
  unsigned int v9 = 32 - __clz(v6 - 1);
  if (v6 >= 2) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  unsigned int v11 = 32 - __clz(v8 - 1);
  if (v8 >= 2) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unsigned int v13 = ((32 << (v12 + v10)) + 127) & 0xFFFFFF80;
  int v14 = 2 * v3 + 62;
  if (2 * v3 >= -31) {
    int v14 = 2 * v3 + 31;
  }
  unsigned int v15 = v14 >> 5;
  int v16 = v4 + 15;
  if (v4 < -15) {
    int v16 = v4 + 30;
  }
  unsigned int v17 = v16 >> 4;
  unsigned int v18 = 32 - __clz(v15 - 1);
  if (v15 >= 2) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  unsigned int v20 = 32 - __clz(v17 - 1);
  if (v17 >= 2) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  *((_DWORD *)this + 1128) = v13;
  *((_DWORD *)this + 1129) = ((8 << (v19 + v21)) + 127) & 0xFFFFFF80;
  unsigned int v22 = ((v4 + 63) >> 6) * ((v3 + 63) >> 6);
  *((_DWORD *)this + 1133) = 576 * v22;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_28:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      char v29 = v28;
      uint64_t v30 = *((unsigned int *)this + 1133);
      if (v30
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 176 * v27 + 5360), v30, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1487;
        __int16 v39 = 2080;
        unint64_t v40 = "MvColo";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v29 & 1) != 0);
    unsigned int v31 = 24 * v22;
    *((_DWORD *)this + 1137) = 24 * v22;
    uint64_t v32 = 3776;
    if (!v31) {
      goto LABEL_34;
    }
LABEL_33:
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v32), v31, 7, 1, 0))
    {
LABEL_34:
      while (v32 != 5008)
      {
        unsigned int v31 = *((_DWORD *)this + 1137);
        v32 += 176;
        if (v31) {
          goto LABEL_33;
        }
      }
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1492;
    __int16 v39 = 2080;
    unint64_t v40 = "segMap";
    __int16 v33 = &_os_log_internal;
  }
  else
  {
    uint64_t v23 = 14608;
    uint64_t v24 = 16;
    while (1)
    {
      uint64_t v25 = *((unsigned int *)this + 1128);
      if (v25
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23 - 2816), v25, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1471;
        __int16 v39 = 2080;
        unint64_t v40 = "HdrY";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      uint64_t v26 = *((unsigned int *)this + 1129);
      if (v26)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23), v26, 7, 1, 0))break; {
      }
        }
      v23 += 176;
      if (!--v24) {
        goto LABEL_28;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1476;
    __int16 v39 = 2080;
    unint64_t v40 = "HdrC";
    __int16 v33 = &_os_log_internal;
  }
LABEL_46:
  _os_log_impl(&dword_223977000, v33, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v35, 0x1Cu);
LABEL_47:
  (*(void (**)(CAHDecHibiscusLgh *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecHibiscusLgh::allocWorkBuf_PPS(CAHDecHibiscusLgh *this, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = *(void *)(v5 + 17560);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 100);
  unsigned int v9 = (*(unsigned __int8 *)(v6 + 105) + 1) & 0x1FE;
  if (v7 == 3) {
    int v10 = 48;
  }
  else {
    int v10 = 32;
  }
  if (!v7) {
    int v10 = 16;
  }
  int v12 = *(_DWORD *)(v6 + 108);
  int v11 = *(_DWORD *)(v6 + 112);
  unsigned int v13 = (v12 + 15) >> 4;
  int v14 = ~(-1 << *(_DWORD *)(v6 + 96));
  signed int v15 = v13 * ((v10 * v9) >> 3) + (v14 << 7);
  if (v15)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 205, v15, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1568;
        __int16 v27 = 2080;
        char v28 = "IpAbove";
        int v16 = &_os_log_internal;
LABEL_34:
        _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  int v17 = 16 * v9;
  if ((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 != 192)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 216, (int)((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 - 192), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1571;
        __int16 v27 = 2080;
        char v28 = "LfAbovePix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
LABEL_35:
      (*(void (**)(CAHDecHibiscusLgh *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  signed int v18 = 288 * ((v12 + 63) >> 6) + (v14 << 7);
  if (v18)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 227, v18, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1577;
        __int16 v27 = 2080;
        char v28 = "LfAboveInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  unsigned int v19 = (v11 + 7) >> 3;
  if (v19 * v17)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 238, (int)(v19 * v17), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1583;
        __int16 v27 = 2080;
        char v28 = "LfLeftPix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  uint64_t v20 = ((v11 + 63) >> 2) & 0x3FFFFFF0;
  if (v20)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 249, v20, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1591;
        __int16 v27 = 2080;
        char v28 = "LfLeftInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 260, (int)(24 * v13 + 30), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 1599;
      __int16 v27 = 2080;
      char v28 = "SwLeftPix";
      int v16 = &_os_log_internal;
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  int v22 = 192 * v9 + (v19 + 2) * (((v9 >> 1) << 8) | 8);
  if (!v22) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 271, v22, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 1605;
    __int16 v27 = 2080;
    char v28 = "AZLeftPix";
    int v16 = &_os_log_internal;
    goto LABEL_34;
  }
  return result;
}

uint64_t CAHDecHibiscusLgh::freeWorkBuf_SPS(CAHDecHibiscusLgh *this)
{
  uint64_t result = *((void *)this + 32);
  if (!*(_DWORD *)(result + 2648))
  {
    uint64_t v3 = 14608;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = (uint64_t *)(result + v3 - 2816);
      if (*v5)
      {
        CAVDDecoder::deallocAVDMem(result, v5);
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3 - 2816) = 0;
      }
      if (*(void *)(result + v3))
      {
        CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + v3));
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3) = 0;
      }
      v3 += 176;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = result + 176 * v6;
    if (*(void *)(v9 + 5360))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(v9 + 5360));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + 176 * v6 + 5360) = 0;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  for (uint64_t i = 3776; i != 5184; i += 176)
  {
    if (*(void *)(result + i))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + i));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + i) = 0;
    }
  }
  return result;
}

uint64_t *CAHDecHibiscusLgh::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[432])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 432);
    v2[432] = 0;
  }
  if (v2[454])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 454);
    v2[454] = 0;
  }
  if (v2[410])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 410);
    v2[410] = 0;
  }
  if (v2[476])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 476);
    v2[476] = 0;
  }
  if (v2[498])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 498);
    v2[498] = 0;
  }
  if (v2[520])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 520);
    v2[520] = 0;
  }
  if (v2[542])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 542);
    v2[542] = 0;
  }
  return this;
}

uint64_t CAHDecHibiscusLgh::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 4528) = a2;
  return this;
}

uint64_t CAHDecHibiscusLgh::initPicture(CAHDecHibiscusLgh *this)
{
  return 0;
}

uint64_t CAHDecHibiscusLgh::populateSlices(CAHDecHibiscusLgh *this)
{
  return 0;
}

uint64_t CAHDecHibiscusLgh::getTileIdxAbove(CAHDecHibiscusLgh *this)
{
  return 0;
}

uint64_t CAHDecHibiscusLgh::decodeBuffer(CAHDecHibiscusLgh *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecHibiscusLgh::decodeBufferSize(CAHDecHibiscusLgh *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecHibiscusLgh::decHdrYLinAddr(CAHDecHibiscusLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 11792);
}

uint64_t CAHDecHibiscusLgh::decHdrCLinAddr(CAHDecHibiscusLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 14608);
}

uint64_t CAHDecHibiscusLgh::decHdrYSize(CAHDecHibiscusLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 11836);
}

uint64_t CAHDecHibiscusLgh::decHdrCSize(CAHDecHibiscusLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 14652);
}

uint64_t CAHDecHibiscusLgh::decHdrYStride(CAHDecHibiscusLgh *this)
{
  return *((unsigned int *)this + 1130);
}

uint64_t CAHDecHibiscusLgh::decHdrCStride(CAHDecHibiscusLgh *this)
{
  return *((unsigned int *)this + 1131);
}

void CAHDecHibiscusLgh::clearSegBuffer(CAHDecHibiscusLgh *this)
{
}

CAHDecViolaHevc *createViolaHevcDecoder(CAVDHevcDecoder *a1)
{
  uint64_t v2 = (CAHDecViolaHevc *)operator new(0x2E38uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecViolaHevc::CAHDecViolaHevc(v2, a1);
  }
  return v3;
}

void sub_223A42224(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecViolaHevc::CAHDecViolaHevc(CAHDecViolaHevc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73F998;
  *(_DWORD *)(v1 + 456) = 396516;
  *(_DWORD *)(v1 + 8) = 2692;
  *(_OWORD *)(v1 + 16) = xmmword_223AD0A10;
  *(_DWORD *)(v1 + 32) = 2;
  *(void *)(v1 + 56) = *(void *)(v1 + 256);
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecViolaHevc::CAHDecViolaHevc(CAHDecViolaHevc *this, CAVDHevcDecoder *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73F998;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 396516;
  *(_DWORD *)(v4 + 8) = 2692;
  *(_OWORD *)(v4 + 16) = xmmword_223AD0A10;
  *(_DWORD *)(v4 + 32) = 2;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 396516, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      char v7 = "CAHDecViolaHevc";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v6, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v5 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v5;
    *((void *)this + 34) = v5;
    bzero((char *)this + 528, 0x2C00uLL);
  }
}

void sub_223A42410(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecViolaHevc::~CAHDecViolaHevc(CAHDecViolaHevc *this)
{
  *(void *)this = &unk_26D73F998;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecViolaHevc::~CAHDecViolaHevc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecViolaHevc::initPicture(CAHDecViolaHevc *this, int a2, __int16 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 114) = 396516;
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v4;
  if (v4)
  {
    bzero(v4, 0x60CE4uLL);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v7 + 16) = a2;
    *(_WORD *)(v7 + 24) = 257;
    *(_WORD *)(v7 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 2955) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "initPicture";
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v9, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecViolaHevc::populateSlices(CAHDecViolaHevc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2692;
    uint64_t v5 = a2;
    do
    {
      CAHDecViolaHevc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 356;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecViolaHevc::populateSliceRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 256);
  int v6 = *(_DWORD *)(v5 + 8320);
  int v7 = *(_DWORD *)(v5 + 8324);
  uint64_t v8 = *(void *)(v5 + 8288);
  uint64_t v9 = *(void *)(v5 + 8280);
  uint64_t v10 = *(void *)(v5 + 8296);
  int v11 = a3;
  uint64_t v12 = v9 + 23176 * v6;
  *(_DWORD *)(a1 + 460) = 6 * *(_DWORD *)(v12 + 3636);
  LODWORD(v12) = *(_DWORD *)(v12 + 22880);
  *(_DWORD *)(a2 + 348) = 0x1000000;
  uint64_t v13 = v10 + 2360 * (int)a3;
  unsigned int v14 = (((*(_DWORD *)(v13 + 36) / v12) & 0xFFF) << 12) | 0x1000000;
  *(_DWORD *)(a2 + 348) = v14;
  *(_DWORD *)(a2 + 348) = v14 & 0xFFFFF000 | (*(_DWORD *)(v13 + 36) % v12) & 0xFFF;
  *(_DWORD *)(a2 + 4) = 0;
  char v15 = *(unsigned char *)(v8 + 9856 * v7 + 6477);
  if (v15) {
    char v15 = *(unsigned char *)(v10 + 2360 * (int)a3 + 1880);
  }
  int v16 = v15 & 1;
  *(_DWORD *)(a2 + 4) = v16;
  uint64_t v17 = v10 + 2360 * (int)a3;
  int v19 = *(_DWORD *)(v17 + 44);
  signed int v18 = (int *)(v17 + 44);
  if (v19 == 2) {
    LOBYTE(v20) = 0;
  }
  else {
    int v20 = 5 - *(_DWORD *)(v10 + 2360 * (int)a3 + 1864);
  }
  unsigned int v21 = v16 & 0xFFFFFFF1 | (2 * (v20 & 7));
  *(_DWORD *)(a2 + 4) = v21;
  if (*v18)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *(unsigned __int8 *)(v10 + 2360 * (int)a3 + 616);
    if (*(unsigned char *)(v10 + 2360 * (int)a3 + 616)) {
      int v22 = *(unsigned char *)(v10 + 2360 * (int)a3 + 762) == 0;
    }
  }
  int v23 = v21 | (16 * v22);
  *(_DWORD *)(a2 + 4) = v23;
  if (*v18 == 2)
  {
    char v24 = 0;
  }
  else
  {
    char v24 = *(unsigned char *)(v8 + 9856 * v7 + 17);
    if (v24) {
      char v24 = *(unsigned char *)(v10 + 2360 * (int)a3 + 761);
    }
  }
  unsigned int v25 = v23 & 0xFFFFFFDF | (32 * (v24 & 1));
  *(_DWORD *)(a2 + 4) = v25;
  if (*v18) {
    int v26 = 0;
  }
  else {
    int v26 = *(unsigned char *)(v10 + 2360 * (int)a3 + 760) == 0;
  }
  char v27 = 0;
  int v28 = v25 | (v26 << 6);
  *(_DWORD *)(a2 + 4) = v28;
  uint64_t v29 = v10 + 2360 * (int)a3;
  int v30 = (*(_DWORD *)(v29 + 624) & 0xF) << 7;
  if (*(_DWORD *)(v29 + 624) == -1) {
    int v30 = 0;
  }
  int v31 = v30 | v28;
  *(_DWORD *)(a2 + 4) = v31;
  int v32 = (*(_DWORD *)(v29 + 620) & 0xF) << 11;
  if (*(_DWORD *)(v29 + 620) == -1) {
    int v32 = 0;
  }
  int v33 = v31 | v32;
  *(_DWORD *)(a2 + 4) = v33;
  if (*v18 != 2)
  {
    char v27 = *(unsigned char *)(v9 + 23176 * v6 + 22284);
    if (v27) {
      char v27 = *(unsigned char *)(v10 + 2360 * (int)a3 + 616);
    }
  }
  uint64_t v130 = v8;
  int v131 = v7;
  unsigned int v34 = v33 & 0xFFFF7FFF | ((v27 & 1) << 15);
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a2 + 4) = v34 & 0xFFFCFFFF | ((*v18 & 3) << 16);
  *(_DWORD *)(a2 + 336) = 0;
  if (*v18 > 1
    || !*(void *)(v10 + 2360 * (int)a3 + 2344)
    || *(_DWORD *)(a1 + 11820)
    || ((*(void (**)(void, uint64_t))(**(void **)(a1 + 256) + 344))(*(void *)(a1 + 256), a3),
        uint64_t v35 = *(void *)(a1 + 256),
        *(_DWORD *)(v35 + 9032))
    || (*(_DWORD *)(a1 + 11820) = 1, *(_DWORD *)(a2 + 4) |= 0x40000u, !*(void *)(v35 + 8856))
    && !*(_DWORD *)(v35 + 9008)
    && !*(_DWORD *)(v35 + 9012)
    || (uint64_t result = CAHDec::addToPatcherList(a1, (void *)(v35 + 8856), 356 * (int)a3 + 3028, 0, 0xFFFFFFFFLL, 8, 0xFFFFFF, 4), !result))
  {
    int v129 = v6;
    uint64_t v36 = (unsigned int *)(v29 + 624);
    __int16 v37 = (unsigned int *)(v29 + 620);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
    uint64_t v38 = a1;
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 256) + 352))(*(void *)(a1 + 256), 0, a3);
    uint64_t v40 = v130;
    int v39 = v131;
    if (*v18 > 1) {
      goto LABEL_38;
    }
    uint64_t v41 = v5 + 8456;
    if ((*v37 & 0x80000000) != 0)
    {
      uint64_t v43 = 0;
      if (*v18) {
        goto LABEL_38;
      }
    }
    else
    {
      int v42 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = a2 + 8;
      do
      {
        uint64_t v45 = v43;
        *(_DWORD *)(v44 + 4 * v43) = v42 & 0xF0 | 0x2DC00000;
        *(_DWORD *)(v44 + 4 * v43) = v42 & 0xF0 | 0x2DC00000 | *(_DWORD *)(v41 + 4 * v43) & 0xF;
        ++v43;
        v42 += 16;
      }
      while (v45 < (int)*v37);
      if (*v18) {
        goto LABEL_38;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v38 + 256) + 352))(*(void *)(v38 + 256), 1, a3);
    uint64_t v40 = v130;
    int v39 = v131;
    if ((*v36 & 0x80000000) == 0)
    {
      int v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = a2 + 4 * v43 + 8;
      do
      {
        *(_DWORD *)(v48 + 4 * v47) = v46 & 0xF0 | 0x2DC00100;
        *(_DWORD *)(v48 + 4 * v47) = v46 & 0xF0 | 0x2DC00100 | *(_DWORD *)(v41 + 4 * v47) & 0xF;
        v46 += 16;
      }
      while (v47++ < (int)*v36);
    }
LABEL_38:
    *(void *)(a2 + 128) = 0x2DD0000000000000;
    int v50 = *v18;
    if (*v18)
    {
      uint64_t v51 = v38;
      if (v50 != 1 || !*(unsigned char *)(v40 + 9856 * v39 + 49)) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v51 = v38;
      if (!*(unsigned char *)(v40 + 9856 * v39 + 50)) {
        goto LABEL_62;
      }
    }
    unsigned int v52 = 0;
    unsigned int v53 = 0;
    uint64_t v54 = v10 + 2360 * v11;
    uint64_t v55 = v40 + 9856 * v39;
    int v56 = (unsigned char *)(v55 + 50);
    uint64_t v57 = (unsigned char *)(v55 + 49);
    if (v50) {
      uint64_t v58 = v57;
    }
    else {
      uint64_t v58 = v56;
    }
    int v59 = ((*v58 & 1) << 6) | 0x2DD00000;
    *(_DWORD *)(a2 + 132) = v59;
    char v60 = *(_DWORD *)(v54 + 768);
    unsigned int v61 = v59 & 0xFFFFFFC7 | (8 * (*(_DWORD *)(v54 + 768) & 7));
    *(_DWORD *)(a2 + 132) = v61;
    unsigned __int8 v62 = (*(_DWORD *)(v54 + 772) + *(_DWORD *)(v54 + 768)) & 7;
    *(_DWORD *)(a2 + 132) = v61 & 0xFFFFFFF8 | v62;
    int v63 = 1 << (v60 & 7);
    int v64 = 1 << v62;
    do
    {
      uint64_t v65 = v52;
      if (*(unsigned char *)(v10 + 2360 * v11 + v52 + 776))
      {
        int v66 = ((v52 & 0xF) << 9) | 0x2DE04000;
        uint64_t v67 = a2 + 4 * v53;
        *(_DWORD *)(v67 + 136) = v66;
        uint64_t v68 = v10 + 2360 * v11 + 4 * v65;
        *(_DWORD *)(v67 + 136) = ((unsigned __int16)*(_DWORD *)(v68 + 808) + (_WORD)v63) & 0x1FF | v66;
        *(_DWORD *)(v67 + 232) = 770703360;
        *(_DWORD *)(v67 + 232) = *(unsigned __int16 *)(v68 + 872) | 0x2DF00000;
        ++v53;
      }
      if (*(unsigned char *)(v10 + 2360 * v11 + v65 + 792))
      {
        uint64_t v69 = 0;
        char v70 = 1;
        do
        {
          char v71 = v70;
          int v72 = ((v65 & 0xF) << 9) | (v69 << 14) | 0x2DE08000;
          uint64_t v73 = a2 + 4 * v53;
          *(_DWORD *)(v73 + 136) = v72;
          uint64_t v74 = v10 + 2360 * v11 + 8 * v65 + 4 * v69;
          *(_DWORD *)(v73 + 136) = ((unsigned __int16)*(_DWORD *)(v74 + 936) + (_WORD)v64) & 0x1FF | v72;
          *(_DWORD *)(v73 + 232) = 770703360;
          *(_DWORD *)(v73 + 232) = *(unsigned __int16 *)(v74 + 1608) | 0x2DF00000;
          ++v53;
          uint64_t v69 = 1;
          char v70 = 0;
        }
        while ((v71 & 1) != 0);
      }
      unsigned int v52 = v65 + 1;
    }
    while ((int)v65 + 1 <= *v37);
    if (!*v18)
    {
      unsigned int v75 = 0;
      do
      {
        uint64_t v76 = v75;
        if (*(unsigned char *)(v10 + 2360 * v11 + v75 + 1192))
        {
          int v77 = ((v75 & 0xF) << 9) | 0x2DE06000;
          uint64_t v78 = a2 + 4 * v53;
          *(_DWORD *)(v78 + 136) = v77;
          uint64_t v79 = v10 + 2360 * v11 + 4 * v76;
          *(_DWORD *)(v78 + 136) = ((unsigned __int16)*(_DWORD *)(v79 + 1224) + (_WORD)v63) & 0x1FF | v77;
          *(_DWORD *)(v78 + 232) = 770703360;
          *(_DWORD *)(v78 + 232) = *(unsigned __int16 *)(v79 + 1288) | 0x2DF00000;
          ++v53;
        }
        if (*(unsigned char *)(v10 + 2360 * v11 + v76 + 1208))
        {
          uint64_t v80 = 0;
          char v81 = 1;
          do
          {
            char v82 = v81;
            int v83 = ((v76 & 0xF) << 9) | (v80 << 14) | 0x2DE0A000;
            uint64_t v84 = a2 + 4 * v53;
            *(_DWORD *)(v84 + 136) = v83;
            uint64_t v85 = v10 + 2360 * v11 + 8 * v76 + 4 * v80;
            *(_DWORD *)(v84 + 136) = ((unsigned __int16)*(_DWORD *)(v85 + 1352) + (_WORD)v64) & 0x1FF | v83;
            *(_DWORD *)(v84 + 232) = 770703360;
            *(_DWORD *)(v84 + 232) = *(unsigned __int16 *)(v85 + 1736) | 0x2DF00000;
            ++v53;
            uint64_t v80 = 1;
            char v81 = 0;
          }
          while ((v82 & 1) != 0);
        }
        unsigned int v75 = v76 + 1;
      }
      while ((int)v76 + 1 <= *v36);
    }
    *(_DWORD *)(a2 + 128) = v53;
LABEL_62:
    uint64_t v86 = v40 + 9856 * v39;
    int v89 = *(unsigned __int8 *)(v86 + 48);
    int v87 = (unsigned __int8 *)(v86 + 48);
    LOBYTE(v88) = v89;
    if (v89) {
      int v88 = *(_DWORD *)(v10 + 2360 * v11 + 1876);
    }
    unsigned int v90 = *(_DWORD *)(a2 + 328) & 0xFFFFFFE0 | ((_BYTE)v88 + *((_DWORD *)v87 - 1)) & 0x1F;
    *(_DWORD *)(a2 + 328) = v90;
    int v91 = *v87;
    if (v91) {
      int v91 = *(_DWORD *)(v10 + 2360 * v11 + 1872);
    }
    unsigned int v92 = v90 & 0xFFFFFC1F | (32 * (((_BYTE)v91 + *(_DWORD *)(v40 + 9856 * v39 + 40)) & 0x1F));
    *(_DWORD *)(a2 + 328) = v92;
    uint64_t v93 = (_DWORD *)(v40 + 9856 * v39);
    int v94 = v93[7] + *(_DWORD *)(v10 + 2360 * v11 + 1868) + 26;
    *(_DWORD *)(a2 + 328) = v92 & 0xE03FF | ((v94 & 0x7F) << 10) | 0x2D900000;
    *(_DWORD *)(*(void *)(v51 + 256) + 2868) = *(_DWORD *)(v51 + 460) + (v94 << 25 >> 25);
    *(_DWORD *)(a2 + 332) = 0;
    int v95 = v93[1635] & 7;
    *(_DWORD *)(a2 + 332) = v95;
    unsigned int v96 = v95 & 0xFFFFFFC7 | (8 * (v93[1634] & 7));
    *(_DWORD *)(a2 + 332) = v96;
    uint64_t v97 = (char *)(v9 + 23176 * v129 + 10649);
    char v98 = *v97;
    if (*v97) {
      char v98 = *(unsigned char *)(v10 + 2360 * v11 + 618);
    }
    unsigned int v99 = v96 & 0xFFFFFFBF | ((v98 & 1) << 6);
    *(_DWORD *)(a2 + 332) = v99;
    if (*v97) {
      char v100 = *(unsigned char *)(v10 + 2360 * v11 + 617);
    }
    else {
      char v100 = 0;
    }
    int v101 = (v98 & 1) << 6;
    int v102 = (v100 & 1) << 7;
    unsigned int v103 = v99 & 0xFFFFFF7F | v102;
    *(_DWORD *)(a2 + 332) = v103;
    uint64_t v104 = v10 + 2360 * v11;
    uint64_t v105 = v40 + 9856 * v39;
    if (*(unsigned char *)(v104 + 1881)) {
      int v106 = (_DWORD *)(v104 + 1888);
    }
    else {
      int v106 = (_DWORD *)(v105 + 248);
    }
    unsigned int v107 = v103 & 0xFFFFF0FF | ((*v106 & 0xF) << 8);
    *(_DWORD *)(a2 + 332) = v107;
    if (*(unsigned char *)(v104 + 1881)) {
      int v108 = (_DWORD *)(v104 + 1884);
    }
    else {
      int v108 = (_DWORD *)(v105 + 244);
    }
    unsigned int v109 = v107 & 0xFFFF0FFF | ((*v108 & 0xF) << 12);
    *(_DWORD *)(a2 + 332) = v109;
    if (*(unsigned char *)(v105 + 239) && *(unsigned char *)(v104 + 1881)) {
      int v110 = (unsigned __int8 *)(v10 + 2360 * v11 + 1882);
    }
    else {
      int v110 = (unsigned __int8 *)(v40 + 9856 * v39 + 240);
    }
    int v111 = *v110;
    BOOL v112 = (v102 | v101) != 0;
    int v113 = v109 | ((v111 == 0) << 16);
    *(_DWORD *)(a2 + 332) = v113;
    if (!v111) {
      BOOL v112 = 1;
    }
    uint64_t v114 = v40 + 9856 * v39;
    if (v112) {
      uint64_t v115 = (unsigned char *)(v10 + 2360 * v11 + 1892);
    }
    else {
      uint64_t v115 = (unsigned char *)(v114 + 237);
    }
    unsigned int v116 = v113 & 0xFFFDFFFF | ((*v115 & 1) << 17);
    *(_DWORD *)(a2 + 332) = v116;
    if (*(unsigned char *)(v114 + 52)) {
      int v117 = (*(unsigned char *)(v40 + 9856 * v39 + 236) & 1) << 18;
    }
    else {
      int v117 = 0x40000;
    }
    int v118 = v117 | v116;
    *(_DWORD *)(a2 + 332) = v118;
    int v119 = *(unsigned __int8 *)(v9 + 23176 * v129 + 10650);
    if (*(unsigned char *)(v9 + 23176 * v129 + 10650)) {
      int v119 = (*(unsigned char *)(v9 + 23176 * v129 + 10668) == 0) << 19;
    }
    *(_DWORD *)(a2 + 332) = v118 | v119 | 0x2DA00000;
    int v120 = *(_DWORD **)(v51 + 256);
    int v121 = v120[626];
    if (v120[590] == 1)
    {
      unint64_t v133 = 0;
      uint64_t v134 = 0;
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t *, unint64_t *))(*(void *)v120 + 448))(v120, a3, &v134, &v133))
      {
        int v122 = (void *)v134;
        if (*(void *)v134 || *(_DWORD *)(v134 + 152) || *(_DWORD *)(v134 + 156))
        {
          int v123 = v133;
          int v124 = 356 * a3 + 3032;
          if (HIDWORD(v133) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            int v136 = "populateSliceRegisters";
            __int16 v137 = 1024;
            int v138 = 1509;
            uint64_t v125 = &_os_log_internal;
LABEL_106:
            _os_log_impl(&dword_223977000, v125, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v123 = v133;
            goto LABEL_107;
          }
          goto LABEL_107;
        }
        goto LABEL_108;
      }
    }
    else
    {
      unint64_t v133 = 0;
      uint64_t v134 = 0;
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t *, unint64_t *))(*(void *)v120 + 448))(v120, a3, &v134, &v133))
      {
        int v122 = (void *)v134;
        if (*(void *)v134 || *(_DWORD *)(v134 + 152) || *(_DWORD *)(v134 + 156))
        {
          int v123 = v133;
          int v124 = 356 * a3 + 3032;
          if (HIDWORD(v133) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            int v136 = "populateSliceRegisters";
            __int16 v137 = 1024;
            int v138 = 1521;
            uint64_t v125 = &_os_log_internal;
            goto LABEL_106;
          }
LABEL_107:
          uint64_t result = CAHDec::addToPatcherList(v51, v122, v124, v123, 0xFFFFFFFFLL, 0, -1, 4);
          if (result) {
            return result;
          }
        }
LABEL_108:
        unsigned int v127 = *(_DWORD *)(v10 + 2360 * v11 + 16) - (*(_DWORD *)(v10 + 2360 * v11 + 2080) >> 3);
        *(_DWORD *)(a2 + 344) = v127;
        if (v120[590] != 1) {
          return 0;
        }
        *(_DWORD *)(a2 + 352) = 0;
        if (v127 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
          unsigned int v127 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
        }
        uint64_t result = 0;
        if (v120[605]) {
          int v128 = v127 | v121 & 0x10000;
        }
        else {
          int v128 = (unsigned __int16)v121 | (v127 << 22);
        }
        *(_DWORD *)(a2 + 352) = v128;
        return result;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecViolaHevc::populateCommonRegisters(CAHDecViolaHevc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000000;
  return 0;
}

uint64_t CAHDecViolaHevc::updateCommonRegisters(CAHDecViolaHevc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecViolaHevc::populateSequenceRegisters(CAHDecViolaHevc *this)
{
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)*((void *)this + 33);
  int v3 = *(_DWORD *)(v1 + 8320);
  uint64_t v4 = *(void *)(v1 + 8280);
  v2[10] = 0;
  uint64_t v5 = v4 + 23176 * v3;
  __int16 v6 = (*(_DWORD *)(v5 + 3608) >> 3) - 1;
  v2[10] = v6 & 0x1FFF;
  v2[10] = ((*(_DWORD *)(v5 + 3612) << 13) + 536805376) & 0x1FFF0000 | v6 & 0x1FFF;
  v2[11] = 0;
  int v7 = *(unsigned char *)(v5 + 10648) & 1;
  v2[11] = v7;
  unsigned int v8 = v7 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v5 + 4440) & 7));
  v2[11] = v8;
  unsigned int v9 = v8 & 0xFFFFFF8F | (16 * (*(_DWORD *)(v5 + 4436) & 7));
  v2[11] = v9;
  unsigned int v10 = v9 & 0xFFFFFE7F | (((*(_DWORD *)(v5 + 4428) + *(_DWORD *)(v5 + 4432)) & 3) << 7);
  v2[11] = v10;
  unsigned int v11 = v10 & 0xFFFFF9FF | ((*(_DWORD *)(v5 + 4428) & 3) << 9);
  v2[11] = v11;
  unsigned int v12 = v11 & 0xFFFFE7FF | (((*(_DWORD *)(v5 + 4424) + *(_DWORD *)(v5 + 4420)) & 3) << 11);
  v2[11] = v12;
  unsigned int v13 = v12 & 0xFFFF9FFF | ((*(_DWORD *)(v5 + 4420) & 3) << 13);
  v2[11] = v13;
  unsigned int v14 = v13 & 0xFFF87FFF | ((*(_DWORD *)(v5 + 3640) & 0xF) << 15);
  v2[11] = v14;
  unsigned int v15 = v14 & 0xFF87FFFF | ((*(_DWORD *)(v5 + 3636) & 0xF) << 19);
  v2[11] = v15;
  unsigned int v16 = v15 & 0xFF7FFFFF | ((*(unsigned char *)(v5 + 3604) & 1) << 23);
  v2[11] = v16;
  v2[11] = v16 & 0xFCFFFFFF | ((*(_DWORD *)(v5 + 3600) & 3) << 24);
  v2[12] = 0;
  if (*(unsigned char *)(v5 + 10650))
  {
    v2[12] = 4096;
    uint64_t v17 = (_DWORD *)(v4 + 23176 * v3);
    int v18 = (v17[2666] + v17[2665]) & 3 | 0x1000;
    v2[12] = v18;
    unsigned int v19 = v18 & 0xFFFFFFF3 | (4 * (v17[2665] & 3));
    v2[12] = v19;
    unsigned int v20 = v19 & 0xFFFFFF0F | (16 * (v17[2664] & 0xF));
    v2[12] = v20;
    v2[12] = v20 & 0xFFFFF0FF | ((v17[2663] & 0xF) << 8);
  }
  v2[13] = 0;
  if (*(unsigned char *)(v4 + 23176 * v3 + 22833))
  {
    int v21 = *(unsigned char *)(v4 + 23176 * v3 + 22844) & 1;
    v2[13] = v21;
    unsigned int v22 = v21 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v4 + 23176 * v3 + 22843) & 1));
    v2[13] = v22;
    unsigned int v23 = v22 & 0xFFFFFFFB | (4 * (*(unsigned char *)(v4 + 23176 * v3 + 22842) & 1));
    v2[13] = v23;
    int v24 = v23 | (8 * (*(unsigned char *)(v4 + 23176 * v3 + 22841) == 0));
    v2[13] = v24;
    unsigned int v25 = v24 & 0xFFFFFFEF | (16 * (*(unsigned char *)(v4 + 23176 * v3 + 22840) & 1));
    v2[13] = v25;
    unsigned int v26 = v25 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v4 + 23176 * v3 + 22839) & 1));
    v2[13] = v26;
    unsigned int v27 = v26 & 0xFFFFFFBF | ((*(unsigned char *)(v4 + 23176 * v3 + 22838) & 1) << 6);
    v2[13] = v27;
    int v28 = v27 | ((*(unsigned char *)(v4 + 23176 * v3 + 22837) & 1) << 7);
    v2[13] = v28;
    int v29 = v28 | ((*(unsigned char *)(v4 + 23176 * v3 + 22836) & 1) << 8);
  }
  else
  {
    int v29 = 8;
  }
  v2[13] = v29;
  uint64_t v30 = v4 + 23176 * v3;
  v2[13] = v29 & 0xFFFFFDFF | ((*(unsigned char *)(v30 + 22285) & 1) << 9);
  if (*(unsigned char *)(v30 + 4444)) {
    CAHDecTansyHevc::copyScalingList((uint64_t)this, (uint64_t)(v2 + 14), *((void *)this + 33) + 556, *(_DWORD *)(v5 + 3600), v4 + 23176 * v3 + 4448);
  }
  return 0;
}

uint64_t CAHDecViolaHevc::populateDARTAddr(CAHDecViolaHevc *this, unsigned int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 32);
  uint64_t v6 = *(unsigned int *)(v4 + 136 * a2 + 8712);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 184))(v4);
  uint64_t v8 = *((void *)this + 32);
  unsigned int v9 = (_DWORD *)(v8 + 232 * a2);
  unsigned int v10 = (_DWORD *)*((void *)this + v9[583] + 34);
  int v11 = *(unsigned __int8 *)(v8 + 9098);
  int v12 = *(_DWORD *)(v8 + 3036);
  unsigned int v13 = *(_DWORD **)(v8 + 8392);
  int v14 = v10[66];
  v10[66] = v14 & 0xFE000000 | ((v9[541] + v9[532]) >> 7);
  int v15 = v10[68];
  v10[68] = v15 & 0xFE000000 | ((v9[542] + v9[532]) >> 7);
  if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
  {
    unsigned int v16 = v9 + 532;
    unsigned int v17 = v14 & 0xFE000000;
    unsigned int v18 = v15 & 0xFE000000;
    int v19 = v9[532];
    if (!v11)
    {
      uint64_t result = v9[541];
      v10[66] = v17 | ((result + v19) >> 7);
      v10[68] = v18 | ((v9[542] + *v16) >> 7);
      uint64_t v22 = v8 + 232 * a2;
      v10[65] = v10[65] & 0xFE000000 | ((*(_DWORD *)(v22 + 2176) + *v16) >> 7);
      int v21 = (_DWORD *)(v22 + 2180);
      goto LABEL_6;
    }
    uint64_t v20 = v8 + 232 * a2;
    v10[66] = v17 | ((*(_DWORD *)(v20 + 2172) + v19) >> 7);
    v10[65] = v10[65] & 0xFE000000 | ((*(_DWORD *)(v20 + 2184) + *v16) >> 7);
    if (v12)
    {
      unsigned int v16 = v13 + 4;
      v10[68] = v18 | ((v13[14] + v13[4]) >> 7);
      int v21 = v13 + 17;
LABEL_6:
      v10[67] = v10[67] & 0xFE000000 | ((*v21 + *v16) >> 7);
    }
  }
  uint64_t v23 = 0;
  uint64_t v24 = *((void *)this + 32) + 136 * a2;
  memset(v38, 0, sizeof(v38));
  int64x2_t v25 = (int64x2_t)xmmword_223ADA980;
  int64x2_t v26 = vdupq_n_s64(v24 + 8584);
  int64x2_t v27 = vdupq_n_s64(2uLL);
  do
  {
    v38[v23] = vaddq_s64(v26, vshlq_n_s64(v25, 4uLL));
    int64x2_t v25 = vaddq_s64(v25, v27);
    ++v23;
  }
  while (v23 != 4);
  if (v6)
  {
    int v28 = v10 + 101;
    int v29 = v38;
    do
    {
      uint64_t v30 = *(uint64_t **)v29;
      int v31 = *(v28 - 16);
      *(v28 - 16) = v31 & 0xFE000000 | ((*(_DWORD *)(**(void **)v29 + 52)
                                                     + *(_DWORD *)(**(void **)v29 + 16)) >> 7);
      unsigned int v32 = *v28;
      uint64_t result = *v28 & 0xFE000000 | ((*(_DWORD *)(*v30 + 56) + *(_DWORD *)(*v30 + 16)) >> 7);
      *int v28 = result;
      if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
      {
        unsigned int v33 = v31 & 0xFE000000;
        unsigned int v34 = v32 & 0xFE000000;
        uint64_t v35 = *v30;
        uint64_t result = *(unsigned int *)(*v30 + 16);
        if (!v11)
        {
          *(v28 - 16) = v33 | ((*(_DWORD *)(v35 + 52) + result) >> 7);
          *int v28 = v34 | ((*(_DWORD *)(*v30 + 56) + *(_DWORD *)(*v30 + 16)) >> 7);
          *(v28 - 24) = *(v28 - 24) & 0xFE000000 | ((*(_DWORD *)(*v30 + 64) + *(_DWORD *)(*v30 + 16)) >> 7);
          uint64_t v36 = (_DWORD *)*v30;
          __int16 v37 = v36 + 4;
          goto LABEL_16;
        }
        *(v28 - 16) = v33 | ((*(_DWORD *)(v35 + 60) + result) >> 7);
        *(v28 - 24) = *(v28 - 24) & 0xFE000000 | ((*(_DWORD *)(*v30 + 72) + *(_DWORD *)(*v30 + 16)) >> 7);
        if (v12)
        {
          *int v28 = v34 | ((v13[14] + v13[4]) >> 7);
          uint64_t v36 = v13;
          __int16 v37 = v13 + 4;
LABEL_16:
          *(v28 - 8) = *(v28 - 8) & 0xFE000000 | ((v36[17] + *v37) >> 7);
        }
      }
      int v29 = (_OWORD *)((char *)v29 + 8);
      ++v28;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t CAHDecViolaHevc::getTileHdrMemInfo(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 176 * a2;
  *a3 = v3 + 528;
  a3[1] = v3 + 3344;
  return result;
}

__n128 CAHDecViolaHevc::getMVmemInfo(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1 + 176 * a2;
  long long v5 = *(_OWORD *)(v4 + 7568);
  long long v6 = *(_OWORD *)(v4 + 7600);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 7584);
  *(_OWORD *)(a3 + 32) = v6;
  *(_OWORD *)a3 = v5;
  long long v7 = *(_OWORD *)(v4 + 7616);
  long long v8 = *(_OWORD *)(v4 + 7632);
  long long v9 = *(_OWORD *)(v4 + 7664);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(v4 + 7648);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_OWORD *)(a3 + 64) = v8;
  __n128 result = *(__n128 *)(v4 + 7680);
  long long v11 = *(_OWORD *)(v4 + 7696);
  long long v12 = *(_OWORD *)(v4 + 7728);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v4 + 7712);
  *(_OWORD *)(a3 + 160) = v12;
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v11;
  *a4 = *(_DWORD *)(a1 + 4 * a2 + 464);
  return result;
}

uint64_t CAHDecViolaHevc::populatePictureRegisters(CAHDecViolaHevc *this)
{
  uint64_t v323 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 8320);
  int v4 = *(_DWORD *)(v2 + 8324);
  uint64_t v5 = *(void *)(v2 + 8280);
  uint64_t v6 = *(void *)(v2 + 8288);
  int v7 = *(_DWORD *)(v2 + 9036);
  unsigned int v8 = *(_DWORD *)(v2 + 3068);
  int v9 = *(_DWORD *)(v2 + 3072);
  int v301 = *(_DWORD *)(v2 + 3064);
  int v302 = *(unsigned __int8 *)(v2 + 3060);
  uint64_t v307 = *(void *)(v2 + 8392);
  int v308 = *(unsigned __int8 *)(v2 + 9098);
  int v303 = *(_DWORD *)(v2 + 3660);
  int v304 = *(_DWORD *)(v2 + 3036);
  int v313 = *(_DWORD *)(v2 + 2644);
  uint64_t v309 = *(void *)(v2 + 2088);
  uint64_t v311 = *(unsigned int *)(v2 + 8424);
  int v300 = *(unsigned __int8 *)(v2 + 8);
  long long v10 = *(_OWORD *)(v2 + 8536);
  v322[0] = *(_OWORD *)(v2 + 8520);
  v322[1] = v10;
  long long v11 = *(_OWORD *)(v2 + 8568);
  v322[2] = *(_OWORD *)(v2 + 8552);
  v322[3] = v11;
  uint64_t v305 = *(unsigned int *)(v2 + 8720);
  int v314 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  int v315 = v3;
  uint64_t v12 = v5 + 23176 * v3;
  int v13 = *(_DWORD *)(v12 + 4420);
  int v14 = *(_DWORD *)(v12 + 4424);
  memset(v321, 0, sizeof(v321));
  memset(v320, 0, sizeof(v320));
  uint64_t v15 = *((void *)this + 33);
  (*(void (**)(void))(**((void **)this + 32) + 336))();
  uint64_t v16 = 0;
  unsigned int v17 = (const double *)(*((void *)this + 32) + 8728);
  do
  {
    float64x2x2_t v324 = vld2q_f64(v17);
    v17 += 4;
    v321[v16] = v324.val[0];
    v320[v16++] = v324.val[1];
  }
  while (v16 != 4);
  *(_DWORD *)(v15 + 76) = 766509056;
  uint64_t v18 = (*(uint64_t (**)(void))(**((void **)this + 32) + 216))(*((void *)this + 32));
  if (v18) {
    int v19 = (*(_DWORD *)(*((void *)this + 32) + 3092) == 2) << 13;
  }
  else {
    int v19 = 0;
  }
  if (v314) {
    int v20 = 688;
  }
  else {
    int v20 = 672;
  }
  if (v313) {
    int v21 = 4160;
  }
  else {
    int v21 = 64;
  }
  *(void *)(v15 + 76) = v21 | ((v313 == 1) << 10) | v20 | *(_DWORD *)(v15 + 76) & 0xFFFFC10F | v19;
  if ((v7 & 1) != 0 && *(unsigned char *)(v6 + 9856 * v4 + 53) && *(_DWORD *)(v5 + 23176 * v315 + 22888) > 1u
    || (v7 & 2) != 0 && !*(unsigned char *)(v6 + 9856 * v4 + 53) && *(unsigned char *)(v6 + 9856 * v4 + 52))
  {
LABEL_24:
    int v22 = (v9 == 0) << 27;
    goto LABEL_25;
  }
  if ((v7 & 0x20) != 0 && !*(unsigned char *)(v6 + 9856 * v4 + 53))
  {
    int v22 = 0;
    if (*(unsigned char *)(v6 + 9856 * v4 + 52) || v8 < 2) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  int v22 = 0;
LABEL_25:
  char v23 = v14 + v13;
  *(_DWORD *)(v15 + 80) = v22;
  *(_DWORD *)(v15 + 84) = 0;
  uint64_t v24 = v5 + 23176 * v315;
  unsigned __int16 v25 = *(_DWORD *)(v24 + 3608) - 1;
  *(_DWORD *)(v15 + 84) = v25;
  int v26 = (v25 | ((unsigned __int16)*(_DWORD *)(v24 + 3612) << 16)) - 0x10000;
  *(void *)(v15 + 88) = 0;
  *(_DWORD *)(v15 + 84) = v26;
  if (*(unsigned char *)(v6 + 9856 * v4 + 6466))
  {
    int64x2_t v27 = (unsigned char *)(v6 + 9856 * v4 + 6477);
    int v28 = 32 * (*v27 & 1);
    *(_DWORD *)(v15 + 92) = v28;
    LOBYTE(v29) = *v27;
    if (*v27) {
      int v29 = *(_DWORD *)(v6 + 9856 * v4 + 6484);
    }
    unint64_t v30 = v29 & 7;
    int v31 = v30 | v28;
    *(_DWORD *)(v15 + 92) = v30 | v28;
    if (v28)
    {
      unsigned int v32 = (_DWORD *)(v6 + 9856 * v4 + 6512);
      unsigned int v33 = (unsigned int *)(v15 + 100);
      unint64_t v34 = -1;
      do
      {
        unsigned int v35 = *v33 & 0xFFFFFFE0 | *v32 & 0x1F;
        *unsigned int v33 = v35;
        uint64_t v18 = v35 & 0xFFFFFC1F | (32 * (*(v32 - 6) & 0x1F));
        *v33++ = v18;
        ++v34;
        ++v32;
      }
      while (v34 < v30);
    }
    int v36 = *v27;
    if (v36) {
      int v36 = *(_DWORD *)(v6 + 9856 * v4 + 6480);
    }
    int v37 = (8 * ((v23 - (_BYTE)v36) & 3)) | v31;
    *(_DWORD *)(v15 + 92) = v37;
    unsigned int v38 = v37 & 0xFFFFFFBF | ((*(unsigned char *)(v6 + 9856 * v4 + 6476) & 1) << 6);
    *(_DWORD *)(v15 + 92) = v38;
    unsigned int v39 = v38 & 0xFFFFFE7F | ((*(_DWORD *)(v6 + 9856 * v4 + 6472) & 3) << 7);
  }
  else
  {
    unsigned int v39 = 8 * (v23 & 3);
  }
  *(_DWORD *)(v15 + 92) = v39;
  uint64_t v40 = v6 + 9856 * v4;
  int v43 = *(unsigned __int8 *)(v40 + 34);
  uint64_t v41 = (unsigned char *)(v40 + 34);
  LOBYTE(v42) = v43;
  if (v43) {
    int v42 = *(_DWORD *)(v6 + 9856 * v4 + 36);
  }
  unsigned int v44 = v39 & 0xFFFE7FFF | (((v23 - (_BYTE)v42) & 3) << 15);
  *(_DWORD *)(v15 + 92) = v44;
  uint64_t v45 = v6 + 9856 * v4;
  unsigned int v46 = v44 & 0xFFFFF1FF | ((*(_DWORD *)(v45 + 6460) & 7) << 9);
  *(_DWORD *)(v15 + 92) = v46;
  unsigned int v47 = v46 & 0xFFFFEFFF | ((*(unsigned char *)(v45 + 53) & 1) << 12);
  *(_DWORD *)(v15 + 92) = v47;
  char v49 = *(unsigned char *)(v45 + 52);
  uint64_t v48 = (unsigned char *)(v45 + 52);
  unsigned int v50 = v47 & 0xFFFFDFFF | ((v49 & 1) << 13);
  *(_DWORD *)(v15 + 92) = v50;
  unsigned int v51 = v50 & 0xFFFFBFFF | ((*(v48 - 1) & 1) << 14);
  *(_DWORD *)(v15 + 92) = v51;
  unsigned int v52 = v51 & 0xFFFDFFFF | ((*v41 & 1) << 17);
  *(_DWORD *)(v15 + 92) = v52;
  unsigned int v53 = v52 & 0xFFFBFFFF | ((*(v48 - 19) & 1) << 18);
  *(_DWORD *)(v15 + 92) = v53;
  unsigned int v54 = v53 & 0xFFF7FFFF | ((*(v48 - 20) & 1) << 19);
  *(_DWORD *)(v15 + 92) = v54;
  unsigned int v55 = v54 & 0xFFEFFFFF | ((*(v48 - 36) & 1) << 20);
  *(_DWORD *)(v15 + 92) = v55;
  if (v19) {
    BOOL v56 = 0;
  }
  else {
    BOOL v56 = *(unsigned char *)(v5 + 23176 * v315 + 22284) != 0;
  }
  *(_DWORD *)(v15 + 92) = v55 & 0xFFDFFFFF | (v56 << 21);
  uint64_t v57 = v6 + 9856 * v4;
  unsigned int v58 = *(_DWORD *)(v15 + 96) & 0xFFFFFFE0 | *(_DWORD *)(v57 + 44) & 0x1F;
  *(_DWORD *)(v15 + 96) = v58;
  *(_DWORD *)(v15 + 96) = v58 & 0xFFFFFC1F | (32 * (*(_DWORD *)(v57 + 40) & 0x1F));
  if (*(unsigned char *)(v57 + 252)) {
    CAHDecTansyHevc::copyScalingList(v18, v15 + 124, *((void *)this + 33) + 1552, *(_DWORD *)(v5 + 23176 * v315 + 3600), v6 + 9856 * v4 + 256);
  }
  *(void *)(v15 + 144) = 0;
  if (v9) {
    int v59 = 7340032;
  }
  else {
    int v59 = 3145728;
  }
  *(_DWORD *)(v15 + 152) = v59;
  if (!*(unsigned char *)(*((void *)this + 32) + 3004))
  {
    unsigned __int16 v108 = *(_DWORD *)(v24 + 3608) - 1;
    *(_DWORD *)(v15 + 148) = v108;
    int v109 = (*(_DWORD *)(v24 + 3612) << 16) - 0x10000;
    *(_DWORD *)(v15 + 148) = v109 & 0xFFFF0000 | v108;
    if (*(unsigned char *)(v5 + 23176 * v315 + 3616))
    {
      if ((*(unsigned char *)(v15 + 77) & 8) != 0)
      {
        uint64_t v110 = v5 + 23176 * v315;
        unsigned __int16 v111 = *(_DWORD *)(v110 + 3620) * *(_DWORD *)(v110 + 22852);
        *(_DWORD *)(v15 + 144) = v111;
        *(_DWORD *)(v15 + 144) = v111 | ((unsigned __int16)(*(_WORD *)(v110 + 22856) * *(_DWORD *)(v110 + 3628)) << 16);
        unsigned __int16 v112 = *(_DWORD *)(v24 + 3608) + ~(*(_DWORD *)(v110 + 3624) * *(_DWORD *)(v110 + 22852));
        *(_DWORD *)(v15 + 148) = v112 | v109;
        *(_DWORD *)(v15 + 148) = v112 | ((unsigned __int16)(*(_WORD *)(v24 + 3612)
                                                          + ~(*(_WORD *)(v110 + 3632) * *(_WORD *)(v110 + 22856))) << 16);
      }
    }
  }
  char v60 = (char *)this + 6160;
  for (uint64_t i = 156; i != 184; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v62 = *((void *)this + 33);
    int v63 = *(_DWORD *)(v62 + i);
    *(_DWORD *)(v62 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFu;
    uint64_t v64 = *((void *)this + 33);
    int v65 = *(_DWORD *)(v64 + i);
    *(_DWORD *)(v64 + i) = v63;
    if (*(void *)v60 || *((_DWORD *)v60 + 38) || *((_DWORD *)v60 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v60, i, 0, 0xFFFFFFFFLL, 8, v65, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 28) = *(_DWORD *)(*((void *)this + 33) + i + 28) & 0x800001FF | (((*((_DWORD *)this + 2952) >> 9) & 0x3FFFFF) << 9);
    v60 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 212) = 0;
  *(_DWORD *)(*((void *)this + 33) + 216) = 0;
  *(_DWORD *)(*((void *)this + 33) + 220) = 0;
  uint64_t v67 = *((void *)this + 33);
  int v68 = *(_DWORD *)(v67 + 220);
  *(_DWORD *)(v67 + 220) = 0;
  *(_DWORD *)(*((void *)this + 33) + 220) ^= 0xFFFFFFu;
  uint64_t v69 = *((void *)this + 33);
  int v70 = *(_DWORD *)(v69 + 220);
  *(_DWORD *)(v69 + 220) = v68;
  if (!*((void *)this + 1298) && !*((_DWORD *)this + 2634) && !*((_DWORD *)this + 2635)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1298, 220, 0, 0xFFFFFFFFLL, 8, v70, 4),
        !result))
  {
    *(_DWORD *)(*((void *)this + 33) + 224) = 0;
    uint64_t v71 = *((void *)this + 33);
    int v72 = *(_DWORD *)(v71 + 224);
    *(_DWORD *)(v71 + 224) = 0;
    *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFFu;
    uint64_t v73 = *((void *)this + 33);
    int v74 = *(_DWORD *)(v73 + 224);
    *(_DWORD *)(v73 + 224) = v72;
    if (!*((void *)this + 1320) && !*((_DWORD *)this + 2678) && !*((_DWORD *)this + 2679)) {
      goto LABEL_303;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1320, 224, 0, 0xFFFFFFFFLL, 8, v74, 4);
    if (!result)
    {
LABEL_303:
      *(_DWORD *)(*((void *)this + 33) + 228) = 0;
      uint64_t v75 = *((void *)this + 33);
      int v76 = *(_DWORD *)(v75 + 228);
      *(_DWORD *)(v75 + 228) = 0;
      *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFFu;
      uint64_t v77 = *((void *)this + 33);
      int v78 = *(_DWORD *)(v77 + 228);
      *(_DWORD *)(v77 + 228) = v76;
      if (!*((void *)this + 1342) && !*((_DWORD *)this + 2722) && !*((_DWORD *)this + 2723)) {
        goto LABEL_304;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1342, 228, 0, 0xFFFFFFFFLL, 8, v78, 4);
      if (!result)
      {
LABEL_304:
        *(_DWORD *)(*((void *)this + 33) + 232) = 0;
        uint64_t v79 = *((void *)this + 33);
        int v80 = *(_DWORD *)(v79 + 232);
        *(_DWORD *)(v79 + 232) = 0;
        *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFFu;
        uint64_t v81 = *((void *)this + 33);
        int v82 = *(_DWORD *)(v81 + 232);
        *(_DWORD *)(v81 + 232) = v80;
        if (!*((void *)this + 1364) && !*((_DWORD *)this + 2766) && !*((_DWORD *)this + 2767)) {
          goto LABEL_305;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1364, 232, 0, 0xFFFFFFFFLL, 8, v82, 4);
        if (!result)
        {
LABEL_305:
          *(_DWORD *)(*((void *)this + 33) + 236) = 0;
          uint64_t v83 = *((void *)this + 33);
          int v84 = *(_DWORD *)(v83 + 236);
          *(_DWORD *)(v83 + 236) = 0;
          *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFFu;
          uint64_t v85 = *((void *)this + 33);
          int v86 = *(_DWORD *)(v85 + 236);
          *(_DWORD *)(v85 + 236) = v84;
          if (!*((void *)this + 1386) && !*((_DWORD *)this + 2810) && !*((_DWORD *)this + 2811)) {
            goto LABEL_306;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1386, 236, 0, 0xFFFFFFFFLL, 8, v86, 4);
          if (!result)
          {
LABEL_306:
            *(_DWORD *)(*((void *)this + 33) + 240) = 0;
            uint64_t v87 = *((void *)this + 33);
            int v88 = *(_DWORD *)(v87 + 240);
            *(_DWORD *)(v87 + 240) = 0;
            *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFFu;
            uint64_t v89 = *((void *)this + 33);
            int v90 = *(_DWORD *)(v89 + 240);
            *(_DWORD *)(v89 + 240) = v88;
            if (!*((void *)this + 1408) && !*((_DWORD *)this + 2854) && !*((_DWORD *)this + 2855)) {
              goto LABEL_307;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1408, 240, 0, 0xFFFFFFFFLL, 8, v90, 4);
            if (!result)
            {
LABEL_307:
              *(_DWORD *)(*((void *)this + 33) + 244) = 0;
              uint64_t v91 = *((void *)this + 33);
              int v92 = *(_DWORD *)(v91 + 244);
              *(_DWORD *)(v91 + 244) = 0;
              *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFFu;
              uint64_t v93 = *((void *)this + 33);
              int v94 = *(_DWORD *)(v93 + 244);
              *(_DWORD *)(v93 + 244) = v92;
              if (!*((void *)this + 924) && !*((_DWORD *)this + 1886) && !*((_DWORD *)this + 1887)) {
                goto LABEL_308;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 924, 244, 0, 0xFFFFFFFFLL, 8, v94, 4);
              if (!result)
              {
LABEL_308:
                *(_DWORD *)(*((void *)this + 33) + 248) = 0;
                uint64_t v95 = *((void *)this + 33);
                int v96 = *(_DWORD *)(v95 + 248);
                *(_DWORD *)(v95 + 248) = 0;
                *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFFu;
                uint64_t v97 = *((void *)this + 33);
                int v98 = *(_DWORD *)(v97 + 248);
                *(_DWORD *)(v97 + 248) = v96;
                unsigned int v99 = (char *)this + 176 * v311;
                if (!*((void *)v99 + 946)
                  && !*((_DWORD *)this + 44 * v311 + 1930)
                  && !*((_DWORD *)this + 44 * v311 + 1931))
                {
                  goto LABEL_309;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v99 + 946, 248, 0, 0xFFFFFFFFLL, 8, v98, 4);
                if (!result)
                {
LABEL_309:
                  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
                  uint64_t v100 = *((void *)this + 33);
                  int v101 = *(_DWORD *)(v100 + 252);
                  *(_DWORD *)(v100 + 252) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFFu;
                  uint64_t v102 = *((void *)this + 33);
                  int v103 = *(_DWORD *)(v102 + 252);
                  *(_DWORD *)(v102 + 252) = v101;
                  if (!*((void *)this + 1430) && !*((_DWORD *)this + 2898) && !*((_DWORD *)this + 2899)) {
                    goto LABEL_310;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1430, 252, 0, 0xFFFFFFFFLL, 8, v103, 4);
                  if (!result)
                  {
LABEL_310:
                    *(_DWORD *)(*((void *)this + 33) + 256) = 0;
                    uint64_t v104 = *((void *)this + 33);
                    int v105 = *(_DWORD *)(v104 + 256);
                    *(_DWORD *)(v104 + 256) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFFu;
                    uint64_t v106 = *((void *)this + 33);
                    int v107 = *(_DWORD *)(v106 + 256);
                    *(_DWORD *)(v106 + 256) = v105;
                    if (!*((void *)this + 1452) && !*((_DWORD *)this + 2942) && !*((_DWORD *)this + 2943)) {
                      goto LABEL_96;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1452, 256, 0, 0xFFFFFFFFLL, 8, v107, 4);
                    if (!result)
                    {
LABEL_96:
                      *(_DWORD *)(*((void *)this + 33) + 260) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 264) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 268) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 272) = 0;
                      uint64_t v113 = *((void *)this + 33);
                      if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                      {
                        int v114 = *(_DWORD *)(v113 + 264);
                        *(_DWORD *)(v113 + 264) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 264) ^= 0x1FFFFFFu;
                        uint64_t v115 = *((void *)this + 33);
                        int v116 = *(_DWORD *)(v115 + 264);
                        *(_DWORD *)(v115 + 264) = v114;
                        int v118 = (void *)(v309 + 8);
                        uint64_t v117 = *(void *)(v309 + 8);
                        if (v308)
                        {
                          if (v117 || *(_DWORD *)(v309 + 160) || *(_DWORD *)(v309 + 164))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v309 + 8), 264, *(_DWORD *)(v309 + 68), 0xFFFFFFFFLL, 7, v116, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v119 = *((void *)this + 33);
                          int v120 = *(_DWORD *)(v119 + 260);
                          *(_DWORD *)(v119 + 260) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 260) ^= 0x1FFFFFFu;
                          uint64_t v121 = *((void *)this + 33);
                          int v122 = *(_DWORD *)(v121 + 260);
                          *(_DWORD *)(v121 + 260) = v120;
                          if (*v118 || *(_DWORD *)(v309 + 160) || *(_DWORD *)(v309 + 164))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v118, 260, *(_DWORD *)(v309 + 80), 0xFFFFFFFFLL, 7, v122, 4);
                            if (result) {
                              return result;
                            }
                          }
                          if (!v304) {
                            goto LABEL_149;
                          }
                          uint64_t v123 = *((void *)this + 33);
                          int v124 = *(_DWORD *)(v123 + 272);
                          *(_DWORD *)(v123 + 272) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 272) ^= 0x1FFFFFFu;
                          uint64_t v125 = *((void *)this + 33);
                          int v126 = *(_DWORD *)(v125 + 272);
                          *(_DWORD *)(v125 + 272) = v124;
                          if (*(void *)v307 || *(_DWORD *)(v307 + 152) || *(_DWORD *)(v307 + 156))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v307, 272, *(_DWORD *)(v307 + 56), 0xFFFFFFFFLL, 7, v126, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v127 = *((void *)this + 33);
                          int v128 = *(_DWORD *)(v127 + 268);
                          *(_DWORD *)(v127 + 268) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 268) ^= 0x1FFFFFFu;
                          uint64_t v129 = *((void *)this + 33);
                          int v130 = *(_DWORD *)(v129 + 268);
                          *(_DWORD *)(v129 + 268) = v128;
                          if (!*(void *)v307 && !*(_DWORD *)(v307 + 152) && !*(_DWORD *)(v307 + 156)) {
                            goto LABEL_149;
                          }
                          int v131 = (void *)v307;
                          int v132 = *(_DWORD *)(v307 + 68);
                          unint64_t v133 = this;
                        }
                        else
                        {
                          if (v117 || *(_DWORD *)(v309 + 160) || *(_DWORD *)(v309 + 164))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v309 + 8), 264, *(_DWORD *)(v309 + 60), 0xFFFFFFFFLL, 7, v116, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v151 = *((void *)this + 33);
                          int v152 = *(_DWORD *)(v151 + 272);
                          *(_DWORD *)(v151 + 272) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 272) ^= 0x1FFFFFFu;
                          uint64_t v153 = *((void *)this + 33);
                          int v154 = *(_DWORD *)(v153 + 272);
                          *(_DWORD *)(v153 + 272) = v152;
                          if (*v118 || *(_DWORD *)(v309 + 160) || *(_DWORD *)(v309 + 164))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v118, 272, *(_DWORD *)(v309 + 64), 0xFFFFFFFFLL, 7, v154, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v155 = *((void *)this + 33);
                          int v156 = *(_DWORD *)(v155 + 260);
                          *(_DWORD *)(v155 + 260) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 260) ^= 0x1FFFFFFu;
                          uint64_t v157 = *((void *)this + 33);
                          int v158 = *(_DWORD *)(v157 + 260);
                          *(_DWORD *)(v157 + 260) = v156;
                          if (*v118 || *(_DWORD *)(v309 + 160) || *(_DWORD *)(v309 + 164))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v118, 260, *(_DWORD *)(v309 + 72), 0xFFFFFFFFLL, 7, v158, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v159 = *((void *)this + 33);
                          int v160 = *(_DWORD *)(v159 + 268);
                          *(_DWORD *)(v159 + 268) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 268) ^= 0x1FFFFFFu;
                          uint64_t v161 = *((void *)this + 33);
                          int v130 = *(_DWORD *)(v161 + 268);
                          *(_DWORD *)(v161 + 268) = v160;
                          if (!*v118 && !*(_DWORD *)(v309 + 160) && !*(_DWORD *)(v309 + 164)) {
                            goto LABEL_149;
                          }
                          int v132 = *(_DWORD *)(v309 + 76);
                          unint64_t v133 = this;
                          int v131 = (void *)(v309 + 8);
                        }
                        int v150 = 268;
                      }
                      else
                      {
                        int v134 = *(_DWORD *)(v113 + 260);
                        *(_DWORD *)(v113 + 260) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 260) ^= 0x1FFFFFFu;
                        uint64_t v135 = *((void *)this + 33);
                        int v136 = *(_DWORD *)(v135 + 260);
                        *(_DWORD *)(v135 + 260) = v134;
                        __int16 v137 = (char *)this + 176 * v311;
                        if (*((void *)v137 + 66)
                          || *((_DWORD *)this + 44 * v311 + 170)
                          || *((_DWORD *)this + 44 * v311 + 171))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v137 + 66, 260, 0, 0xFFFFFFFFLL, 7, v136, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v138 = *((void *)this + 33);
                        int v139 = *(_DWORD *)(v138 + 264);
                        *(_DWORD *)(v138 + 264) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 264) ^= 0x1FFFFFFu;
                        uint64_t v140 = *((void *)this + 33);
                        int v141 = *(_DWORD *)(v140 + 264);
                        *(_DWORD *)(v140 + 264) = v139;
                        if (*(void *)(v309 + 8) || *(_DWORD *)(v309 + 160) || *(_DWORD *)(v309 + 164))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v309 + 8), 264, *(_DWORD *)(v309 + 60), 0xFFFFFFFFLL, 7, v141, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v142 = *((void *)this + 33);
                        int v143 = *(_DWORD *)(v142 + 268);
                        *(_DWORD *)(v142 + 268) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 268) ^= 0x1FFFFFFu;
                        uint64_t v144 = *((void *)this + 33);
                        int v145 = *(_DWORD *)(v144 + 268);
                        *(_DWORD *)(v144 + 268) = v143;
                        int v146 = (char *)this + 176 * v311;
                        if (*((void *)v146 + 418)
                          || *((_DWORD *)this + 44 * v311 + 874)
                          || *((_DWORD *)this + 44 * v311 + 875))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v146 + 418, 268, 0, 0xFFFFFFFFLL, 7, v145, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v147 = *((void *)this + 33);
                        int v148 = *(_DWORD *)(v147 + 272);
                        *(_DWORD *)(v147 + 272) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 272) ^= 0x1FFFFFFu;
                        uint64_t v149 = *((void *)this + 33);
                        int v130 = *(_DWORD *)(v149 + 272);
                        *(_DWORD *)(v149 + 272) = v148;
                        if (!*(void *)(v309 + 8) && !*(_DWORD *)(v309 + 160) && !*(_DWORD *)(v309 + 164)) {
                          goto LABEL_149;
                        }
                        int v132 = *(_DWORD *)(v309 + 64);
                        unint64_t v133 = this;
                        int v131 = (void *)(v309 + 8);
                        int v150 = 272;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)v133, v131, v150, v132, 0xFFFFFFFFLL, 7, v130, 4);
                      if (result) {
                        return result;
                      }
LABEL_149:
                      if (!(*(_DWORD *)(v15 + 76) & 0x2000 | v305))
                      {
                        *(_DWORD *)(v15 + 76) |= 0x2000u;
                        *((_DWORD *)this + v311 + 116) = 1;
                        *(_DWORD *)(*((void *)this + 33) + 276) = 0;
                        goto LABEL_217;
                      }
                      *((_DWORD *)this + v311 + 116) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 276) = 0;
                      if (!v305)
                      {
LABEL_217:
                        *(_DWORD *)(*((void *)this + 33) + 436) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 440) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 444) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 448) = 0;
                        if (!v313) {
                          goto LABEL_242;
                        }
                        uint64_t v226 = *((void *)this + 32);
                        if (v302 && v301 == 2)
                        {
                          int v227 = *(_DWORD *)(*(void *)(v226 + 8360) + 60);
                          uint64_t v228 = *((void *)this + 33);
                          int v229 = *(_DWORD *)(v228 + 436);
                          *(_DWORD *)(v228 + 436) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 436) ^= 0xFFFFFFu;
                          uint64_t v230 = *((void *)this + 33);
                          int v231 = *(_DWORD *)(v230 + 436);
                          *(_DWORD *)(v230 + 436) = v229;
                          uint64_t v232 = *(void *)(*((void *)this + 32) + 8360);
                          if (*(void *)v232 || *(_DWORD *)(v232 + 152) || *(_DWORD *)(v232 + 156))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v232, 436, v227, 0xFFFFFFFFLL, 8, v231, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v233 = *((void *)this + 33);
                          int v234 = *(_DWORD *)(v233 + 444);
                          *(_DWORD *)(v233 + 444) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 444) ^= 0xC0000000;
                          uint64_t v235 = *((void *)this + 33);
                          int v236 = *(_DWORD *)(v235 + 444);
                          *(_DWORD *)(v235 + 444) = v234;
                          uint64_t v237 = *(void *)(*((void *)this + 32) + 8360);
                          if (*(void *)v237 || *(_DWORD *)(v237 + 152) || *(_DWORD *)(v237 + 156))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v237, 444, v227, 192, 6, v236, 4);
                            if (result) {
                              return result;
                            }
                          }
                          if (v304)
                          {
                            int v238 = *(_DWORD *)(v307 + 56);
                            uint64_t v239 = *((void *)this + 33);
                            int v240 = *(_DWORD *)(v239 + 440);
                            *(_DWORD *)(v239 + 440) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 440) ^= 0xFFFFFFu;
                            uint64_t v241 = *((void *)this + 33);
                            int v242 = *(_DWORD *)(v241 + 440);
                            *(_DWORD *)(v241 + 440) = v240;
                            if (*(void *)v307 || *(_DWORD *)(v307 + 152) || *(_DWORD *)(v307 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v307, 440, v238, 0xFFFFFFFFLL, 8, v242, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v243 = *((void *)this + 33);
                            int v244 = *(_DWORD *)(v243 + 448);
                            *(_DWORD *)(v243 + 448) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 448) ^= 0xC0000000;
                            uint64_t v245 = *((void *)this + 33);
                            int v246 = *(_DWORD *)(v245 + 448);
                            *(_DWORD *)(v245 + 448) = v244;
                            if (*(void *)v307 || *(_DWORD *)(v307 + 152) || *(_DWORD *)(v307 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v307, 448, v238, 192, 6, v246, 4);
                              if (result) {
                                return result;
                              }
                            }
                          }
                          if (v300)
                          {
                            *(_DWORD *)(*((void *)this + 33) + 444) = *(_DWORD *)(*((void *)this + 33) + 444) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 84) >> 6) & 0xFFF));
                            if (v304)
                            {
                              uint64_t v247 = v307;
LABEL_240:
                              uint64_t v248 = (_DWORD *)(v247 + 80);
LABEL_241:
                              *(_DWORD *)(*((void *)this + 33) + 448) = *(_DWORD *)(*((void *)this + 33) + 448) & 0xFFFF8003 | (4 * ((*v248 >> 6) & 0x1FFF));
                            }
LABEL_242:
                            if (*v48)
                            {
                              unint64_t v249 = 0;
                              uint64_t v250 = v6 + 9856 * v4;
                              unsigned __int16 v251 = *(_WORD *)(v250 + 56) + 1;
                              uint64_t v252 = *((void *)this + 33);
                              *(_WORD *)(v252 + 452) = v251;
                              uint64_t v253 = v250 + 9676;
                              do
                              {
                                *(_WORD *)(v252 + 2 * v249 + 456) = *(_DWORD *)(v253 + 4 * v249);
                                BOOL v254 = v249++ >= v251;
                              }
                              while (!v254);
                              unint64_t v255 = 0;
                              uint64_t v256 = v6 + 9856 * v4;
                              unsigned __int16 v257 = *(_WORD *)(v256 + 60) + 1;
                              *(_WORD *)(v252 + 454) = v257;
                              uint64_t v258 = v256 + 9760;
                              do
                              {
                                *(_WORD *)(v252 + 2 * v255 + 498) = *(_DWORD *)(v258 + 4 * v255);
                                BOOL v254 = v255++ >= v257;
                              }
                              while (!v254);
                            }
                            else
                            {
                              uint64_t v252 = *((void *)this + 33);
                              *(_DWORD *)(v252 + 452) = 65537;
                              *(_WORD *)(v252 + 456) = 0;
                              uint64_t v261 = v5 + 23176 * v315;
                              *(_WORD *)(v252 + 458) = *(_DWORD *)(v261 + 22880);
                              *(_WORD *)(v252 + 498) = 0;
                              *(_WORD *)(v252 + 500) = *(_DWORD *)(v261 + 22888);
                            }
                            uint64_t v262 = *((void *)this + 32);
                            if (*(_DWORD *)(v262 + 2360) != 1) {
                              return 0;
                            }
                            *(_DWORD *)(v252 + 548) = *(_DWORD *)(v252 + 548) & 0xFFFFFFFE | *(_DWORD *)(v262 + 2508) & 1;
                            if (*(_DWORD *)(v262 + 2508))
                            {
                              *(_DWORD *)(v252 + 2548) = 0x10000000;
                              *(_DWORD *)(v252 + 2552) = *(_DWORD *)(v262 + 2368);
                              *(void *)(v252 + 2560) = 0;
                              *(_DWORD *)(v252 + 2556) = 0;
                              *(_OWORD *)(v252 + 2568) = *(_OWORD *)(v262 + 2372);
                              long long v263 = *(_OWORD *)(v262 + 2388);
                              *(_OWORD *)(v252 + 2600) = *(_OWORD *)(v262 + 2404);
                              *(_OWORD *)(v252 + 2584) = v263;
                            }
                            *(_DWORD *)(*((void *)this + 33) + 548) = *(_DWORD *)(*((void *)this + 33) + 548) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v262 + 2512) & 1));
                            if (*(_DWORD *)(v262 + 2512))
                            {
                              *(_DWORD *)(v252 + 2616) = 0;
                              char v264 = *(_DWORD *)(v262 + 2424);
                              *(_DWORD *)(v252 + 2616) = (*(_DWORD *)(v262 + 2424) & 1) << 22;
                              int v265 = ((*(_DWORD *)(v262 + 2420) & 1) << 23) | ((v264 & 1) << 22) | 0x20000000;
                              *(_DWORD *)(v252 + 2616) = v265;
                              *(_DWORD *)(v252 + 2616) = v265 | (*(_DWORD *)(v262 + 2364) == 0);
                              long long v266 = *(_OWORD *)(v262 + 2428);
                              long long v267 = *(_OWORD *)(v262 + 2444);
                              *(_OWORD *)(v252 + 2652) = *(_OWORD *)(v262 + 2460);
                              *(_OWORD *)(v252 + 2636) = v267;
                              *(_OWORD *)(v252 + 2620) = v266;
                            }
                            *(_DWORD *)(*((void *)this + 33) + 548) = *(_DWORD *)(*((void *)this + 33) + 548) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v262 + 2516) & 1));
                            *(_DWORD *)(*((void *)this + 33) + 548) = *(_DWORD *)(*((void *)this + 33) + 548) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v262 + 2520) & 1));
                            *(_DWORD *)(*((void *)this + 33) + 548) = *(_DWORD *)(*((void *)this + 33) + 548) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v262 + 2524) & 1));
                            if (!*(_DWORD *)(v262 + 2516)) {
                              return 0;
                            }
                            *(_DWORD *)(v252 + 2672) = 0;
                            if (*(_DWORD *)(v262 + 2476) == 2) {
                              int v268 = 805306368;
                            }
                            else {
                              int v268 = 813694976;
                            }
                            *(_DWORD *)(v252 + 2672) = v268;
                            memcpy((void *)(v252 + 2676), (const void *)(v262 + 2480), 4 * *(unsigned int *)(v262 + 2476));
                            uint64_t result = 0;
                            *(_DWORD *)(v262 + 2516) = 0;
                            return result;
                          }
                          if (!CAHDecViolaHevc::getSWRStride(this, *(unsigned __int16 *)(v15 + 148)- *(unsigned __int16 *)(v15 + 144)+ 1, *(_DWORD *)(v5 + 23176 * v315 + 3636), *(_DWORD *)(v5 + 23176 * v315 + 3640), *(_DWORD *)(v5 + 23176 * v315 + 22852)))
                          {
                            *(_DWORD *)(*((void *)this + 33) + 444) = *(_DWORD *)(*((void *)this + 33) + 444) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 2956) >> 6) & 0xFFF));
                            if (!v304) {
                              goto LABEL_242;
                            }
                            goto LABEL_298;
                          }
                        }
                        else
                        {
                          int v259 = *(unsigned __int8 *)(v226 + 3004);
                          if (*(unsigned char *)(v226 + 3004))
                          {
                            int v259 = *(_DWORD *)(v226 + 3016);
                            int v260 = *(_DWORD *)(v226 + 3020);
                          }
                          else
                          {
                            int v260 = 0;
                          }
                          uint64_t v269 = *(void *)(v226 + 8360);
                          int v271 = *(_DWORD *)(v269 + 52);
                          int v270 = *(_DWORD *)(v269 + 56);
                          int v272 = v271 + v259;
                          BOOL v273 = __CFADD__(v271, v259);
                          int v274 = v270 + v260;
                          if (__CFADD__(v270, v260)) {
                            int v275 = 2;
                          }
                          else {
                            int v275 = v273;
                          }
                          if (v275)
                          {
                            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)long long buf = 136315394;
                              *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                              __int16 v318 = 1024;
                              int v319 = v275;
                              uint64_t v276 = &_os_log_internal;
                              int v277 = "AppleAVD: %s(): failKind = %d";
                              uint64_t v278 = buf;
                              uint32_t v279 = 18;
LABEL_274:
                              _os_log_impl(&dword_223977000, v276, OS_LOG_TYPE_DEFAULT, v277, v278, v279);
                            }
                          }
                          else
                          {
                            uint64_t v280 = *((void *)this + 33);
                            int v281 = *(_DWORD *)(v280 + 436);
                            *(_DWORD *)(v280 + 436) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 436) ^= 0xFFFFFFu;
                            uint64_t v282 = *((void *)this + 33);
                            int v283 = *(_DWORD *)(v282 + 436);
                            *(_DWORD *)(v282 + 436) = v281;
                            uint64_t v284 = *(void *)(*((void *)this + 32) + 8360);
                            if (*(void *)v284 || *(_DWORD *)(v284 + 152) || *(_DWORD *)(v284 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v284, 436, v272, 0xFFFFFFFFLL, 8, v283, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v285 = *((void *)this + 33);
                            int v286 = *(_DWORD *)(v285 + 440);
                            *(_DWORD *)(v285 + 440) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 440) ^= 0xFFFFFFu;
                            uint64_t v287 = *((void *)this + 33);
                            int v288 = *(_DWORD *)(v287 + 440);
                            *(_DWORD *)(v287 + 440) = v286;
                            uint64_t v289 = *(void *)(*((void *)this + 32) + 8360);
                            if (*(void *)v289 || *(_DWORD *)(v289 + 152) || *(_DWORD *)(v289 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v289, 440, v274, 0xFFFFFFFFLL, 8, v288, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v290 = *((void *)this + 33);
                            int v291 = *(_DWORD *)(v290 + 444);
                            *(_DWORD *)(v290 + 444) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 444) ^= 0xC0000000;
                            uint64_t v292 = *((void *)this + 33);
                            int v293 = *(_DWORD *)(v292 + 444);
                            *(_DWORD *)(v292 + 444) = v291;
                            uint64_t v294 = *(void *)(*((void *)this + 32) + 8360);
                            if (*(void *)v294 || *(_DWORD *)(v294 + 152) || *(_DWORD *)(v294 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v294, 444, v272, 192, 6, v293, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v295 = *((void *)this + 33);
                            int v296 = *(_DWORD *)(v295 + 448);
                            *(_DWORD *)(v295 + 448) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 448) ^= 0xC0000000;
                            uint64_t v297 = *((void *)this + 33);
                            int v298 = *(_DWORD *)(v297 + 448);
                            *(_DWORD *)(v297 + 448) = v296;
                            uint64_t v299 = *(void *)(*((void *)this + 32) + 8360);
                            if (*(void *)v299 || *(_DWORD *)(v299 + 152) || *(_DWORD *)(v299 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v299, 448, v274, 192, 6, v298, 4);
                              if (result) {
                                return result;
                              }
                            }
                            if (v300)
                            {
                              *(_DWORD *)(*((void *)this + 33) + 444) = *(_DWORD *)(*((void *)this + 33) + 444) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 76) >> 6) & 0xFFF));
                              uint64_t v247 = *(void *)(*((void *)this + 32) + 8360);
                              goto LABEL_240;
                            }
                            if (!CAHDecViolaHevc::getSWRStride(this, *(unsigned __int16 *)(v15 + 148)- *(unsigned __int16 *)(v15 + 144)+ 1, *(_DWORD *)(v5 + 23176 * v315 + 3636), *(_DWORD *)(v5 + 23176 * v315 + 3640), *(_DWORD *)(v5 + 23176 * v315 + 22852)))
                            {
                              *(_DWORD *)(*((void *)this + 33) + 444) = *(_DWORD *)(*((void *)this + 33) + 444) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 2956) >> 6) & 0xFFF));
LABEL_298:
                              uint64_t v248 = (_DWORD *)((char *)this + 11828);
                              goto LABEL_241;
                            }
                          }
                        }
                        return 0xFFFFFFFFLL;
                      }
                      uint64_t v162 = 0;
                      uint64_t v163 = 4 * v305;
                      uint64_t v164 = (uint64_t *)v322;
                      uint64_t v312 = (void **)v321;
                      uint64_t v310 = (void **)v320;
                      int v306 = (v305 << 28) - 0x10000000;
                      while (1)
                      {
                        uint64_t v165 = *v164;
                        if (!*v164 || !*(void *)(v165 + 48)) {
                          return 0xFFFFFFFFLL;
                        }
                        int v166 = v314;
                        if (v314)
                        {
                          uint64_t v167 = *(unsigned int *)(v165 + 44);
                          *(void *)long long buf = 0;
                          if (((*(uint64_t (**)(void, uint64_t, unsigned char *))(**((void **)this + 32) + 304))(*((void *)this + 32), v167, buf) & 1) == 0)
                          {
                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                              return 0xFFFFFFFFLL;
                            }
                            __int16 v316 = 0;
                            uint64_t v276 = &_os_log_internal;
                            int v277 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
                            uint64_t v278 = (uint8_t *)&v316;
                            uint32_t v279 = 2;
                            goto LABEL_274;
                          }
                          *(void *)(v165 + 48) = *(void *)buf + 8;
                          int v166 = 0x2000000;
                        }
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) = 0;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) = *(_DWORD *)(*((void *)this + 33)
                                                                                     + v162
                                                                                     + 276) & 0xFFFFFFF | v306;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) &= 0xF3FFFFFF;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) = *(_DWORD *)(*((void *)this + 33)
                                                                                     + v162
                                                                                     + 276) & 0xFDFFFFFF | v166;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) |= 0x1000000u;
                        int v168 = v303 - *(_DWORD *)(v165 + 12);
                        int v169 = v168 & 0x1FFFF;
                        if (v168 < -32768) {
                          int v169 = 98304;
                        }
                        if (v168 <= 0x8000) {
                          int v170 = v169;
                        }
                        else {
                          int v170 = 0x8000;
                        }
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) = *(_DWORD *)(*((void *)this + 33)
                                                                                     + v162
                                                                                     + 276) & 0xFFFE0000 | v170;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) = *(_DWORD *)(*((void *)this + 33)
                                                                                     + v162
                                                                                     + 276) & 0xFFFDFFFF | ((*(_DWORD *)(v165 + 20) == 2) << 17);
                        *(_DWORD *)(*((void *)this + 33) + v162 + 308) = 0;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 340) = 0;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 372) = 0;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 404) = 0;
                        uint64_t v171 = *((void *)this + 33);
                        if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                        {
                          int v172 = v162 + 340;
                          uint64_t v173 = v171 + v162;
                          int v174 = *(_DWORD *)(v173 + 340);
                          *(_DWORD *)(v173 + 340) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v162 + 340) ^= 0x1FFFFFFu;
                          uint64_t v175 = *((void *)this + 33) + v162;
                          int v176 = *(_DWORD *)(v175 + 340);
                          *(_DWORD *)(v175 + 340) = v174;
                          int v177 = *(uint64_t **)(v165 + 48);
                          uint64_t v178 = *v177;
                          if (v308)
                          {
                            if (v178 || *((_DWORD *)v177 + 38) || *((_DWORD *)v177 + 39))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v177, v172, *((_DWORD *)v177 + 15), 0xFFFFFFFFLL, 7, v176, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v179 = *((void *)this + 33) + v162;
                            int v180 = *(_DWORD *)(v179 + 308);
                            *(_DWORD *)(v179 + 308) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v162 + 308) ^= 0x1FFFFFFu;
                            uint64_t v181 = *((void *)this + 33) + v162;
                            int v182 = *(_DWORD *)(v181 + 308);
                            *(_DWORD *)(v181 + 308) = v180;
                            uint64_t v183 = *(void *)(v165 + 48);
                            if (*(void *)v183 || *(_DWORD *)(v183 + 152) || *(_DWORD *)(v183 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v183, (int)v162 + 308, *(_DWORD *)(v183 + 72), 0xFFFFFFFFLL, 7, v182, 4);
                              if (result) {
                                return result;
                              }
                            }
                            if (v304)
                            {
                              uint64_t v184 = *((void *)this + 33) + v162;
                              int v185 = *(_DWORD *)(v184 + 404);
                              *(_DWORD *)(v184 + 404) = 0;
                              *(_DWORD *)(*((void *)this + 33) + v162 + 404) ^= 0x1FFFFFFu;
                              uint64_t v186 = *((void *)this + 33) + v162;
                              int v187 = *(_DWORD *)(v186 + 404);
                              *(_DWORD *)(v186 + 404) = v185;
                              if (*(void *)v307 || *(_DWORD *)(v307 + 152) || *(_DWORD *)(v307 + 156))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v307, (int)v162 + 404, *(_DWORD *)(v307 + 56), 0xFFFFFFFFLL, 7, v187, 4);
                                if (result) {
                                  return result;
                                }
                              }
                              uint64_t v188 = *((void *)this + 33) + v162;
                              int v189 = *(_DWORD *)(v188 + 372);
                              *(_DWORD *)(v188 + 372) = 0;
                              *(_DWORD *)(*((void *)this + 33) + v162 + 372) ^= 0x1FFFFFFu;
                              uint64_t v190 = *((void *)this + 33) + v162;
                              int v191 = *(_DWORD *)(v190 + 372);
                              *(_DWORD *)(v190 + 372) = v189;
                              if (*(void *)v307 || *(_DWORD *)(v307 + 152) || *(_DWORD *)(v307 + 156))
                              {
                                int v192 = v162 + 372;
                                uint64_t v193 = v307;
LABEL_214:
                                int v212 = *(_DWORD *)(v193 + 68);
LABEL_215:
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v193, v192, v212, 0xFFFFFFFFLL, 7, v191, 4);
                                if (result) {
                                  return result;
                                }
                              }
                            }
                          }
                          else
                          {
                            if (v178 || *((_DWORD *)v177 + 38) || *((_DWORD *)v177 + 39))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v177, v172, *((_DWORD *)v177 + 13), 0xFFFFFFFFLL, 7, v176, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v213 = *((void *)this + 33) + v162;
                            int v214 = *(_DWORD *)(v213 + 404);
                            *(_DWORD *)(v213 + 404) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v162 + 404) ^= 0x1FFFFFFu;
                            uint64_t v215 = *((void *)this + 33) + v162;
                            int v216 = *(_DWORD *)(v215 + 404);
                            *(_DWORD *)(v215 + 404) = v214;
                            uint64_t v217 = *(void *)(v165 + 48);
                            if (*(void *)v217 || *(_DWORD *)(v217 + 152) || *(_DWORD *)(v217 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v217, (int)v162 + 404, *(_DWORD *)(v217 + 56), 0xFFFFFFFFLL, 7, v216, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v218 = *((void *)this + 33) + v162;
                            int v219 = *(_DWORD *)(v218 + 308);
                            *(_DWORD *)(v218 + 308) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v162 + 308) ^= 0x1FFFFFFu;
                            uint64_t v220 = *((void *)this + 33) + v162;
                            int v221 = *(_DWORD *)(v220 + 308);
                            *(_DWORD *)(v220 + 308) = v219;
                            uint64_t v222 = *(void *)(v165 + 48);
                            if (*(void *)v222 || *(_DWORD *)(v222 + 152) || *(_DWORD *)(v222 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v222, (int)v162 + 308, *(_DWORD *)(v222 + 64), 0xFFFFFFFFLL, 7, v221, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v223 = *((void *)this + 33) + v162;
                            int v224 = *(_DWORD *)(v223 + 372);
                            *(_DWORD *)(v223 + 372) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v162 + 372) ^= 0x1FFFFFFu;
                            uint64_t v225 = *((void *)this + 33) + v162;
                            int v191 = *(_DWORD *)(v225 + 372);
                            *(_DWORD *)(v225 + 372) = v224;
                            uint64_t v193 = *(void *)(v165 + 48);
                            if (*(void *)v193 || *(_DWORD *)(v193 + 152) || *(_DWORD *)(v193 + 156))
                            {
                              int v192 = v162 + 372;
                              goto LABEL_214;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v194 = v171 + v162;
                          int v195 = *(_DWORD *)(v194 + 308);
                          *(_DWORD *)(v194 + 308) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v162 + 308) ^= 0x1FFFFFFu;
                          uint64_t v196 = *((void *)this + 33) + v162;
                          int v197 = *(_DWORD *)(v196 + 308);
                          *(_DWORD *)(v196 + 308) = v195;
                          int v198 = *v312;
                          if (**v312 || *((_DWORD *)v198 + 38) || *((_DWORD *)v198 + 39))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v198, (int)v162 + 308, 0, 0xFFFFFFFFLL, 7, v197, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v199 = *((void *)this + 33) + v162;
                          int v200 = *(_DWORD *)(v199 + 340);
                          *(_DWORD *)(v199 + 340) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v162 + 340) ^= 0x1FFFFFFu;
                          uint64_t v201 = *((void *)this + 33) + v162;
                          int v202 = *(_DWORD *)(v201 + 340);
                          *(_DWORD *)(v201 + 340) = v200;
                          uint64_t v203 = *(void *)(v165 + 48);
                          if (*(void *)v203 || *(_DWORD *)(v203 + 152) || *(_DWORD *)(v203 + 156))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v203, (int)v162 + 340, *(_DWORD *)(v203 + 52), 0xFFFFFFFFLL, 7, v202, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v204 = *((void *)this + 33) + v162;
                          int v205 = *(_DWORD *)(v204 + 372);
                          *(_DWORD *)(v204 + 372) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v162 + 372) ^= 0x1FFFFFFu;
                          uint64_t v206 = *((void *)this + 33) + v162;
                          int v207 = *(_DWORD *)(v206 + 372);
                          *(_DWORD *)(v206 + 372) = v205;
                          uint64_t v208 = *v310;
                          if (**v310 || *((_DWORD *)v208 + 38) || *((_DWORD *)v208 + 39))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v208, (int)v162 + 372, 0, 0xFFFFFFFFLL, 7, v207, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v209 = *((void *)this + 33) + v162;
                          int v210 = *(_DWORD *)(v209 + 404);
                          *(_DWORD *)(v209 + 404) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v162 + 404) ^= 0x1FFFFFFu;
                          uint64_t v211 = *((void *)this + 33) + v162;
                          int v191 = *(_DWORD *)(v211 + 404);
                          *(_DWORD *)(v211 + 404) = v210;
                          uint64_t v193 = *(void *)(v165 + 48);
                          if (*(void *)v193 || *(_DWORD *)(v193 + 152) || *(_DWORD *)(v193 + 156))
                          {
                            int v192 = v162 + 404;
                            int v212 = *(_DWORD *)(v193 + 56);
                            goto LABEL_215;
                          }
                        }
                        v162 += 4;
                        ++v164;
                        ++v310;
                        ++v312;
                        if (v163 == v162) {
                          goto LABEL_217;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecViolaHevc::getSWRStride(CAHDecViolaHevc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1478) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 2957) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecViolaHevc::getTileStartCTU(CAHDecViolaHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 452);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecViolaHevc::getTileEndCTU(CAHDecViolaHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 452);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecViolaHevc::getTileIdxAbove(CAHDecViolaHevc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 452);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecViolaHevc::populateAvdWork(CAHDecViolaHevc *this, unsigned int a2)
{
  v118[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v4 = *((void *)this + 33);
  int v5 = *(_DWORD *)(v3 + 8320);
  int v6 = *(_DWORD *)(v3 + 8324);
  uint64_t v7 = *(void *)(v3 + 8280);
  uint64_t v8 = *(void *)(v3 + 8288);
  uint64_t v84 = *(void *)(v3 + 8296);
  int v9 = *(_DWORD *)(v3 + 9036);
  unsigned int v10 = *(_DWORD *)(v3 + 3068);
  int v11 = *(_DWORD *)(v3 + 3072);
  uint64_t v101 = v4 + 216292;
  v118[0] = v4 + 216292;
  v118[1] = v4 + 306404;
  uint64_t v81 = v4 + 306404;
  uint64_t v82 = v4;
  uint64_t v117 = 0;
  uint64_t v12 = v7 + 23176 * v5;
  unsigned int v13 = *(_DWORD *)(v12 + 22888);
  int v14 = *(unsigned __int16 *)(v4 + 452);
  int v15 = *(unsigned __int16 *)(v4 + 454);
  if (v9)
  {
    if (*(unsigned char *)(v8 + 9856 * v6 + 53)) {
      BOOL v17 = v13 > 1;
    }
    else {
      BOOL v17 = 0;
    }
    int v16 = v17 && v11 == 0;
  }
  else
  {
    int v16 = 0;
  }
  unsigned int v99 = v15 * v14;
  if ((v9 & 2) != 0 && *(unsigned char *)(v8 + 9856 * v6 + 52))
  {
    if (*(unsigned char *)(v8 + 9856 * v6 + 53)) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v99 > 1;
    }
    int v21 = v19 && v11 == 0;
    int v110 = v21;
  }
  else
  {
    int v110 = 0;
  }
  int v86 = (unsigned int *)(v12 + 22880);
  if ((v9 & 0x20) != 0 && !*(unsigned char *)(v8 + 9856 * v6 + 53))
  {
    if (*(unsigned char *)(v8 + 9856 * v6 + 52)) {
      BOOL v67 = 0;
    }
    else {
      BOOL v67 = v10 > 1;
    }
    int v69 = v67 && v11 == 0;
    int v96 = v69;
  }
  else
  {
    int v96 = 0;
  }
  LODWORD(v22) = 0;
  unsigned int v112 = *v86;
  if ((v9 & 4) != 0) {
    int v23 = v16;
  }
  else {
    int v23 = 1;
  }
  unsigned int v90 = *(_DWORD *)(v12 + 22888);
  if ((v23 | v110))
  {
    uint64_t v24 = v101;
  }
  else
  {
    uint64_t v24 = v101;
    if ((v96 & 1) == 0)
    {
      uint64_t v22 = *(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & 1;
      uint64_t v24 = v118[v22];
    }
  }
  uint64_t v111 = 0;
  BOOL v102 = 0;
  int v89 = 0;
  uint64_t v85 = 0;
  int v106 = 0;
  uint64_t v109 = 0;
  int v25 = 0;
  uint64_t v26 = 0;
  unsigned int v113 = 0;
  int v27 = 0;
  uint64_t v28 = 0;
  uint64_t v108 = 0x2E8BA2E8BA2E8BA3 * ((v24 - v101) >> 2);
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v29 = v8 + 9856 * v6;
  unint64_t v30 = (unsigned char *)(v29 + 52);
  int v94 = (unsigned char *)(v29 + 53);
  if (v16) {
    int v31 = 12;
  }
  else {
    int v31 = 4;
  }
  int v92 = v31;
  unsigned int v95 = a2 - 1;
  unsigned int v87 = v13 - 2;
  unsigned int v88 = v13 - 1;
  uint64_t v97 = v82 + 3036;
  int v103 = v30;
  int v98 = v16;
  do
  {
    if (*v30) {
      int v32 = 1;
    }
    else {
      int v32 = v16;
    }
    if (v32 != 1)
    {
      unsigned int v35 = 1;
LABEL_48:
      uint64_t v36 = 0;
      int v91 = 0;
      uint64_t v37 = v84 + 2360 * v111;
      uint64_t v93 = (void *)(v37 + 1904);
      uint64_t v100 = (unsigned int *)(v37 + 36);
      int v105 = (unsigned char *)(v37 + 32);
      uint64_t v107 = v35;
      while (1)
      {
        if (!(v36 | v111))
        {
          uint64_t v41 = v26;
          *(_WORD *)(v24 + 4) = 0;
          *(_WORD *)(v24 + 6) = v22;
          *(_DWORD *)(v24 + 8) = 0;
          *(_WORD *)(v24 + 12) = 0;
          int v27 = *(_DWORD *)(v97 + 356 * v111);
          if (!(*(unsigned int (**)(void))(**((void **)this + 32) + 448))()) {
            return 0xFFFFFFFFLL;
          }
          int v42 = *v100;
          *(_DWORD *)(v24 + 28) = *v100;
          *(_DWORD *)(v24 + 32) = v42;
          unsigned int v113 = 0;
          *(_DWORD *)(v24 + 40) = (*(uint64_t (**)(CAHDecViolaHevc *, uint64_t, void))(*(void *)this + 72))(this, v28, v112);
          __int16 v43 = 271;
          goto LABEL_141;
        }
        if (v36)
        {
          int v104 = v27;
          int v38 = *(_DWORD *)(*v93 + 4 * v36 - 4) + 1;
          if (*v103)
          {
            if (*v94)
            {
              unsigned int v39 = *v86;
              unsigned int v40 = (v39 + v26) / v39;
              v38 += v91;
              if (v40 >= *(unsigned __int16 *)(*((void *)this + 33) + 2 * (HIDWORD(v85) + 1) + 498))
              {
                uint64_t v26 = (*(uint64_t (**)(CAHDecViolaHevc *, void, void))(*(void *)this + 64))(this, (v28 + 1), v112);
                int v91 = 0;
                int v25 = v92;
              }
              else
              {
                uint64_t v26 = v89 + v40 * v39;
                if (!v98)
                {
                  int v91 = v38;
                  int v16 = 0;
                  goto LABEL_142;
                }
                int v91 = 0;
                if (v40 == v85 + 1) {
                  int v25 = 72;
                }
                else {
                  int v25 = 8;
                }
              }
            }
            else
            {
              uint64_t v26 = (*(uint64_t (**)(CAHDecViolaHevc *, void, void))(*(void *)this + 64))(this, (v28 + 1), v112);
              int v25 = 4;
            }
          }
          else if (v98)
          {
            uint64_t v26 = (*v86 + v26) / *v86 * *v86;
            int v25 = 8;
          }
          uint64_t v48 = (void *)v115;
          if (*(void *)v115 || *(_DWORD *)(v115 + 152) || *(_DWORD *)(v115 + 156))
          {
            int v49 = v22;
            uint64_t v22 = v26;
            int v50 = v114;
            if ((v114 + (unint64_t)v113) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1745;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v50 = v114;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v48, 44 * (int)v108 + 216312, v113 + v50, 0xFFFFFFFFLL, 0, -1, 4);
            uint64_t v26 = v22;
            LODWORD(v22) = v49;
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v24 + 24) = v38;
          v113 += v38;
          int v16 = v98;
          int v27 = v104;
        }
        else
        {
          unsigned int v44 = (void *)v115;
          if (*(void *)v115 || *(_DWORD *)(v115 + 152) || *(_DWORD *)(v115 + 156))
          {
            int v45 = v114;
            if ((v114 + (unint64_t)v113) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1674;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v45 = v114;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v44, 44 * (int)v108 + 216312, v113 + v45, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v24 + 24) = v27 - v113;
          int v27 = *(_DWORD *)(v97 + 356 * v111);
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t *))(**((void **)this + 32) + 448))(*((void *)this + 32), v111, &v115, &v114))return 0xFFFFFFFFLL; {
          uint64_t v26 = *v100;
          }
          if (*v105) {
            int v25 = 2;
          }
          else {
            int v25 = 258;
          }
          if (v16 && v26 % v112 == v89)
          {
            unsigned int v113 = 0;
            if (v26 / v112 == v85 + 1) {
              int v47 = 72;
            }
            else {
              int v47 = 8;
            }
            v25 |= v47;
          }
          else
          {
            unsigned int v113 = 0;
          }
        }
        unsigned int v51 = v28 + 1;
        uint64_t v41 = v26;
        if ((int)v28 + 1 < v99)
        {
          int v52 = (*(uint64_t (**)(CAHDecViolaHevc *, void, void))(*(void *)this + 64))(this, (v28 + 1), v112);
          LODWORD(v26) = v41;
          int v53 = v92;
          if (v41 != v52) {
            int v53 = 0;
          }
          v25 |= v53;
        }
        *(_WORD *)(v24 + 16) = v25;
        if (v109 == v95) {
          *(_WORD *)(v24 + 18) |= 2u;
        }
        if (v28 == v99 - 1) {
          *(_WORD *)(v24 + 18) |= 4u;
        }
        int v54 = v110;
        if (v28 != v99 - 2) {
          int v54 = 0;
        }
        if (v54 == 1) {
          *(_WORD *)(v24 + 18) |= 4u;
        }
        if (v16
          && ((int v55 = *(unsigned __int16 *)(v24 + 10), v90 > 1) ? (v56 = v87 == v55) : (v56 = 0),
              !v56 ? (int v57 = 0) : (int v57 = 1),
              v88 == v55 || v57))
        {
          *(_WORD *)(v24 + 18) |= 8u;
          if ((v25 & 4) != 0)
          {
LABEL_114:
            int v58 = HIDWORD(v109);
            if (*v103 && *v94)
            {
              int v59 = (unsigned __int16 *)(*((void *)this + 33) + 452);
              unsigned int v60 = *v59;
              HIDWORD(v85) = v51 / v60;
              int v89 = v59[v51 % v60 + 2];
              LODWORD(v85) = v59[v51 / v60 + 23];
              BOOL v102 = ((v22 + v85) & 1) == 0;
            }
            uint64_t v28 = (v28 + 1);
            goto LABEL_118;
          }
        }
        else if ((v25 & 4) != 0)
        {
          goto LABEL_114;
        }
        int v58 = HIDWORD(v109);
LABEL_118:
        if ((v25 & 0x44) != 0)
        {
          int v61 = (*(uint64_t (**)(CAHDecViolaHevc *, uint64_t))(*(void *)this + 80))(this, v28);
          LODWORD(v26) = v41;
          if (v58 <= v61) {
            v25 |= 0x20u;
          }
        }
        if (!v36)
        {
          if (!*v105) {
            int v58 = v28;
          }
          int v62 = v106;
          if (!*v105) {
            int v62 = v26;
          }
          int v106 = v62;
        }
        if ((v25 & 0x44) != 0)
        {
          unsigned int v63 = *(unsigned __int16 *)(*((void *)this + 33) + 452);
          if (v58 / v63 + 1 == v28 / v63) {
            v25 |= 0x10u;
          }
        }
        int v64 = (v102 + (v26 / v112)) & 1;
        if (!v16) {
          int v64 = v22;
        }
        if (v110) {
          BOOL v65 = v28 & 1;
        }
        else {
          BOOL v65 = v64;
        }
        ++*((_DWORD *)&v118[-1] + v22);
        v118[v22] += 44;
        char v66 = v96 ^ 1;
        if (v36) {
          char v66 = 1;
        }
        HIDWORD(v109) = v58;
        if ((v66 & 1) == 0 && !*v105) {
          BOOL v65 = !v65;
        }
        uint64_t v24 = v118[v65];
        uint64_t v108 = 0x2E8BA2E8BA2E8BA3 * ((v24 - v101) >> 2);
        *(_WORD *)(v24 + 4) = *((_DWORD *)&v118[-1] + v65);
        *(_WORD *)(v24 + 6) = v65;
        *(_WORD *)(v24 + 8) = v111;
        *(_WORD *)(v24 + 10) = v26 / v112;
        *(_WORD *)(v24 + 12) = v28;
        *(_DWORD *)(v24 + 28) = v26;
        *(_DWORD *)(v24 + 32) = v106;
        *(_DWORD *)(v24 + 40) = (*(uint64_t (**)(CAHDecViolaHevc *, uint64_t, void))(*(void *)this + 72))(this, v28, v112);
        __int16 v43 = v25;
        LODWORD(v109) = v111;
        LODWORD(v22) = v65;
LABEL_141:
        *(_WORD *)(v24 + 14) = v43;
        uint64_t v26 = v41;
LABEL_142:
        if (v107 == ++v36) {
          goto LABEL_45;
        }
      }
    }
    int v33 = *(_DWORD *)(v84 + 2360 * v111 + 1896);
    BOOL v34 = __CFADD__(v33, 1);
    unsigned int v35 = v33 + 1;
    if (!v34) {
      goto LABEL_48;
    }
LABEL_45:
    ++v111;
    unint64_t v30 = v103;
  }
  while (v111 != a2);
  int v70 = (void *)v115;
  if (!*(void *)v115 && !*(_DWORD *)(v115 + 152) && !*(_DWORD *)(v115 + 156)) {
    goto LABEL_164;
  }
  int v71 = v114;
  if ((v114 + (unint64_t)v113) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "populateAvdWork";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 1835;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
    int v71 = v114;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v70, 44 * (int)v108 + 216312, v113 + v71, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result)
  {
LABEL_164:
    *(_DWORD *)(v24 + 24) = v27 - v113;
    *(_DWORD *)(v24 + 16) = 917519;
    ++*((_DWORD *)&v118[-1] + v22);
    if (v96)
    {
      uint64_t v72 = v101;
      buf[0] = v101;
      buf[1] = v81;
      unsigned int v73 = *(unsigned __int16 *)(v82 + 216300) + 1;
      if (v73 >= a2)
      {
        BOOL v74 = 0;
        int v76 = buf;
      }
      else
      {
        BOOL v74 = 0;
        BOOL v75 = 0;
        int v76 = buf;
        do
        {
          if (*(unsigned __int16 *)(v72 + 4) + 1 == *((_DWORD *)&v118[-1] + v74))
          {
            BOOL v75 = !v75;
            *(_DWORD *)(v72 + 36) = *(_DWORD *)(buf[v75] + 32);
          }
          else
          {
            if (v73 != *(unsigned __int16 *)(v72 + 52))
            {
              BOOL v75 = !v75;
              *(_DWORD *)(v72 + 36) = *(_DWORD *)(buf[v75] + 32);
            }
            *int v76 = v72 + 44;
          }
          BOOL v74 = v75;
          int v76 = &buf[v75];
          uint64_t v72 = *v76;
          unsigned int v73 = *(unsigned __int16 *)(*v76 + 8) + 1;
        }
        while (v73 < a2);
      }
      int v77 = *((_DWORD *)&v118[-1] + v74);
      if (*(unsigned __int16 *)(v72 + 4) + 1 != v77)
      {
        do
        {
          int v78 = *(unsigned __int16 *)(v72 + 48);
          v72 += 44;
        }
        while (v78 + 1 != v77);
        *int v76 = v72;
      }
      *(_DWORD *)(v72 + 36) = *(_DWORD *)(v72 + 40) + 1;
    }
    uint64_t result = 0;
    uint64_t v79 = *((void *)this + 33);
    __int16 v80 = WORD2(v117);
    *(_WORD *)(v79 + 28) = v117;
    *(_WORD *)(v79 + 30) = v80;
    *(_DWORD *)(v79 + 32) = 216292;
    *(_DWORD *)(v79 + 36) = 306404;
  }
  return result;
}

uint64_t CAHDecViolaHevc::allocWorkBuf_SPS(CAHDecViolaHevc *this, _DWORD *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 5718;
  int v5 = a2[902];
  int v6 = a2[903];
  int v7 = a2[900];
  if (v5 < (*(unsigned int (**)(CAHDecViolaHevc *))(*(void *)this + 96))(this)
    || (unsigned int v8 = a2[903], v8 < (*(unsigned int (**)(CAHDecViolaHevc *))(*(void *)this + 104))(this))
    || (unsigned int v9 = a2[909], v9 > (*(unsigned int (**)(CAHDecViolaHevc *))(*(void *)this + 112))(this) - 8)
    || (unsigned int v10 = a2[910], v10 > (*(unsigned int (**)(CAHDecViolaHevc *))(*(void *)this + 120))(this) - 8)
    || (unsigned int v17 = *v4, v18 = *v4 - 16, v18 > 0x30)
    || ((1 << v18) & 0x1000000010001) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = a2[902];
      int v12 = a2[903];
      int v13 = a2[909];
      int v14 = a2[910];
      unsigned int v15 = *v4;
      int v49 = 136316418;
      int v50 = "allocWorkBuf_SPS";
      __int16 v51 = 1024;
      int v52 = v11;
      __int16 v53 = 1024;
      *(_DWORD *)int v54 = v12;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v13;
      __int16 v55 = 1024;
      int v56 = v14;
      __int16 v57 = 1024;
      unsigned int v58 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported bit stream w %d h %d bd %d %d CtbSizeY %d\n", (uint8_t *)&v49, 0x2Au);
    }
    return 0xFFFFFFFFLL;
  }
  int v19 = v5 + 31;
  if (v5 < -31) {
    int v19 = v5 + 62;
  }
  unsigned int v20 = v19 >> 5;
  int v21 = v6 + 31;
  if (v6 < -31) {
    int v21 = v6 + 62;
  }
  unsigned int v22 = v21 >> 5;
  unsigned int v23 = 32 - __clz(v20 - 1);
  if (v20 >= 2) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  unsigned int v25 = 32 - __clz(v22 - 1);
  if (v22 >= 2) {
    char v26 = v25;
  }
  else {
    char v26 = 0;
  }
  unsigned int v27 = ((32 << (v26 + v24)) + 127) & 0xFFFFFF80;
  if (v7)
  {
    int v28 = v5 << (v7 == 3);
    int v29 = v28 + 31;
    int v30 = v28 + 62;
    if (v29 >= 0) {
      int v30 = v29;
    }
    unsigned int v31 = v30 >> 5;
    if (v7 == 1) {
      int v32 = v6 + 1;
    }
    else {
      int v32 = v6;
    }
    int v33 = v32 >> (v7 == 1);
    int v35 = v33 + 15;
    BOOL v34 = v33 < -15;
    int v36 = v33 + 30;
    if (!v34) {
      int v36 = v35;
    }
    unsigned int v37 = v36 >> 4;
    if (v31 > 1)
    {
      unsigned int v38 = 32 - __clz(v31 - 1);
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v37 = 0;
  }
  LOBYTE(v38) = 0;
LABEL_32:
  unsigned int v39 = 32 - __clz(v37 - 1);
  if (v37 >= 2) {
    char v40 = v39;
  }
  else {
    char v40 = 0;
  }
  unsigned int v41 = ((8 << (v40 + v38)) + 127) & 0xFFFFFF80;
  if (!v7) {
    unsigned int v41 = 0;
  }
  *((_DWORD *)this + 2948) = v27;
  *((_DWORD *)this + 2949) = v41;
  *((void *)this + 1475) = 0;
  unsigned int v42 = (v17 & 0xFFFFFFF0) * (v17 >> 4) * v4[2];
  *((_DWORD *)this + 2954) = v42;
  *((_DWORD *)this + 2953) = v4[4] * v42;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_44:
    uint64_t v46 = 0;
    while (1)
    {
      uint64_t v47 = *((unsigned int *)this + 2953);
      if (v47)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecViolaHevc *)((char *)this + v46 + 7568), v47, 7, 1, 0))break; {
      }
        }
      uint64_t result = 0;
      v46 += 176;
      if (v46 == 2816) {
        return result;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2096;
    __int16 v53 = 2080;
    *(void *)int v54 = "MvColo";
    uint64_t v48 = &_os_log_internal;
  }
  else
  {
    uint64_t v43 = 528;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 2948);
      if (v44
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecViolaHevc *)((char *)this + v43), v44, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_56;
        }
        int v49 = 136315650;
        int v50 = "allocWorkBuf_SPS";
        __int16 v51 = 1024;
        int v52 = 2087;
        __int16 v53 = 2080;
        *(void *)int v54 = "HdrY";
        uint64_t v48 = &_os_log_internal;
        goto LABEL_55;
      }
      uint64_t v45 = *((unsigned int *)this + 2949);
      if (v45)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecViolaHevc *)((char *)this + v43 + 2816), v45, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 3344) {
        goto LABEL_44;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2088;
    __int16 v53 = 2080;
    *(void *)int v54 = "HdrC";
    uint64_t v48 = &_os_log_internal;
  }
LABEL_55:
  _os_log_impl(&dword_223977000, v48, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v49, 0x1Cu);
LABEL_56:
  (*(void (**)(CAHDecViolaHevc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecViolaHevc::allocWorkBuf_PPS(CAHDecViolaHevc *this, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  unsigned int v4 = (a2[909] + 9) & 0xFFFFFFFE;
  unsigned int v5 = (a2[910] + 9) & 0xFFFFFFFE;
  if (v4 <= v5) {
    unsigned int v6 = (a2[910] + 9) & 0xFFFFFFFE;
  }
  else {
    unsigned int v6 = (a2[909] + 9) & 0xFFFFFFFE;
  }
  int v7 = a2[900];
  if (v6 == 10) {
    int v8 = 40;
  }
  else {
    int v8 = 48;
  }
  if (v6 == 8) {
    int v8 = 32;
  }
  char v9 = v7 != 3;
  if (*((unsigned char *)a3 + 52))
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = a2[1106] + a2[1105];
    uint64_t v16 = a3[14];
    int v17 = a2[5718];
    unsigned int v18 = a2[902];
    do
    {
      int v19 = a3[v10 + 17] + 1;
      int v20 = v19 * v17;
      if (v19 * v17 + v13 > v18) {
        int v20 = v18 - v13;
      }
      if (v11 <= v20) {
        int v11 = v20;
      }
      if (v7)
      {
        unsigned int v21 = (v19 << v15) >> v9;
        if (v16 == v10) {
          unsigned int v21 = (((v18 >> 3) - (v14 << v15)) >> v9) + 1;
        }
        v12 += ((v21 + 2 * (v10 != 0)) * v8 + 127) & 0xFFFFFF80;
      }
      v13 += v20;
      v14 += v19;
      ++v10;
    }
    while (v16 + 1 != v10);
  }
  else
  {
    unsigned int v18 = a2[902];
    int v22 = (v8 + v8 * (v18 >> 3 >> v9) + 127) & 0x7FFFFF80;
    if (v7) {
      int v12 = v22;
    }
    else {
      int v12 = 0;
    }
    int v11 = a2[902];
  }
  signed int v23 = 0;
  uint64_t v24 = *((void *)this + 32);
  if (v11 >= -15) {
    int v25 = v11 + 15;
  }
  else {
    int v25 = v11 + 30;
  }
  int v26 = a3[14];
  if (*((unsigned char *)a3 + 52)) {
    int v27 = a3[14];
  }
  else {
    int v27 = 0;
  }
  int v65 = v27;
  if (v7 == 3) {
    int v28 = 48;
  }
  else {
    int v28 = 32;
  }
  if (v7 == 3) {
    int v29 = 176;
  }
  else {
    int v29 = 128;
  }
  if (!v7) {
    int v28 = 16;
  }
  unsigned int v30 = (v28 * v6) >> 3;
  if (!v7) {
    int v29 = 80;
  }
  int v63 = v25;
  int v64 = v29;
  int v31 = v25 >> 4;
  int v32 = (v25 >> 4) * v30;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  if (*((unsigned char *)a3 + 52) && v26)
  {
    uint64_t v36 = 0;
    int v37 = 0;
    unsigned int v35 = 0;
    unsigned int v34 = 0;
    unsigned int v33 = 0;
    if (v7 == 1) {
      int v38 = 8;
    }
    else {
      int v38 = 16;
    }
    if (!v7) {
      int v38 = 0;
    }
    unsigned int v39 = ((((6 * v38 + 96) * v6) >> 3) + 7) & 0x3FFFFFF8;
    int v40 = v38 + 16;
    unsigned int v41 = a2[903];
    signed int v42 = v4 - 8;
    signed int v43 = v5 - 8;
    if (v42 <= v43) {
      signed int v44 = v43;
    }
    else {
      signed int v44 = v42;
    }
    uint64_t v45 = a3[15];
    int v46 = a2[5718];
    BOOL v48 = *(_DWORD *)(v24 + 2644) == 1 && v44 != 0;
    int v49 = (char *)(a3 + 37);
    do
    {
      int v50 = v46 + v46 * *(_DWORD *)&v49[4 * v36];
      if (v50 + v37 > v41) {
        int v50 = v41 - v37;
      }
      int v51 = v50 + 15;
      if (v50 < -15) {
        int v51 = v50 + 30;
      }
      if (v36) {
        int v52 = (v51 >> 4) + 1;
      }
      else {
        int v52 = v51 >> 4;
      }
      unsigned int v53 = v52 * v39;
      if (v33 <= v53) {
        unsigned int v33 = v53;
      }
      unsigned int v54 = 36 * (v51 >> 4);
      if (v34 <= v54) {
        unsigned int v34 = v54;
      }
      if (v48)
      {
        if (v45 == v36) {
          int v55 = 23;
        }
        else {
          int v55 = 15;
        }
        unsigned int v56 = ((v55 + v50) / 16 * v40) | 6;
        if (v35 <= v56) {
          unsigned int v35 = v56;
        }
      }
      v37 += v50;
      ++v36;
    }
    while (v45 + 1 != v36);
    signed int v23 = (((3 * v6) & 0x7FFFFF) << 6) + (((v41 + 7) >> 3) + 2) * ((((v6 >> 1) & 0x1FFFFF) << 8) | 8);
  }
  if (v32 && CAVDDecoder::allocAVDMem(v24, (_OWORD *)this + 649, v32, 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2266;
      __int16 v71 = 2080;
      uint64_t v72 = "IpAbove";
      unsigned int v58 = &_os_log_internal;
LABEL_113:
      _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", buf, 0x1Cu);
      goto LABEL_114;
    }
    goto LABEL_114;
  }
  if ((v11 + 30) >= 0x1F
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 462, 4 * (4 * v31 + (v63 >> 4)), 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2267;
      __int16 v71 = 2080;
      uint64_t v72 = "MvAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
LABEL_114:
    (*(void (**)(CAHDecViolaHevc *, void))(*(void *)v57 + 152))(v57, 0);
    return 0xFFFFFFFFLL;
  }
  int v59 = v65 + ((v18 + 15) >> 4);
  signed int v60 = v59 * ((((v64 * v6) >> 3) + 7) & 0x3FFFFFF8) + (v26 << 7);
  if (v60 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 660, v60, 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2268;
      __int16 v71 = 2080;
      uint64_t v72 = "LfAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  int v61 = 36 * v59 + (v26 << 7);
  __int16 v57 = this;
  if (v61 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 671, v61, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2269;
      __int16 v71 = 2080;
      uint64_t v72 = "LfAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v33 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 682, (int)v33, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2270;
      __int16 v71 = 2080;
      uint64_t v72 = "LfLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v34 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 693, (int)v34, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2271;
      __int16 v71 = 2080;
      uint64_t v72 = "LfLeftInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v35 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 704, (int)v35, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2272;
      __int16 v71 = 2080;
      uint64_t v72 = "SwLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v12 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 715, v12, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2273;
      __int16 v71 = 2080;
      uint64_t v72 = "AZAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (!v23) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 726, v23, 7, 1, 0);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2274;
      __int16 v71 = 2080;
      uint64_t v72 = "AZLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  return result;
}

uint64_t CAHDecViolaHevc::freeWorkBuf_SPS(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(_DWORD *)(*(void *)(this + 256) + 2648))
  {
    for (uint64_t i = 528; i != 3344; i += 176)
    {
      uint64_t v3 = (void *)(v1 + i);
      if (*(void *)(v1 + i))
      {
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v1 + i));
        void *v3 = 0;
      }
      if (v3[352])
      {
        unsigned int v4 = v3 + 352;
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), v4);
        *unsigned int v4 = 0;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1 + 7568;
  do
  {
    if (*(void *)(v6 + v5))
    {
      this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v6 + v5));
      *(void *)(v6 + v5) = 0;
    }
    v5 += 176;
  }
  while (v5 != 2816);
  return this;
}

uint64_t *CAHDecViolaHevc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  unsigned int v2 = this;
  if (this[1298])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1298);
    v2[1298] = 0;
  }
  if (v2[924])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 924);
    v2[924] = 0;
  }
  if (v2[1320])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1320);
    v2[1320] = 0;
  }
  if (v2[1342])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1342);
    v2[1342] = 0;
  }
  if (v2[1364])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1364);
    v2[1364] = 0;
  }
  if (v2[1386])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1386);
    v2[1386] = 0;
  }
  if (v2[1408])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1408);
    v2[1408] = 0;
  }
  if (v2[1430])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1430);
    v2[1430] = 0;
  }
  if (v2[1452])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1452);
    v2[1452] = 0;
  }
  return this;
}

uint64_t CAHDecViolaHevc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 6160;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 11808) = a2;
  return this;
}

uint64_t CAHDecViolaHevc::decodeBuffer(CAHDecViolaHevc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecViolaHevc::decodeBufferSize(CAHDecViolaHevc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecViolaHevc::decHdrYLinAddr(CAHDecViolaHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 66);
}

uint64_t CAHDecViolaHevc::decHdrCLinAddr(CAHDecViolaHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 418);
}

uint64_t CAHDecViolaHevc::decHdrYSize(CAHDecViolaHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 143);
}

uint64_t CAHDecViolaHevc::decHdrCSize(CAHDecViolaHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 847);
}

uint64_t CAHDecViolaHevc::decHdrYStride(CAHDecViolaHevc *this)
{
  return *((unsigned int *)this + 2950);
}

uint64_t CAHDecViolaHevc::decHdrCStride(CAHDecViolaHevc *this)
{
  return *((unsigned int *)this + 2951);
}

CAHDecViolaAvc *createViolaAvcDecoder(CAVDAvcDecoder *a1)
{
  uint64_t v2 = (CAHDecViolaAvc *)operator new(0x3EE0uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecViolaAvc::CAHDecViolaAvc(v2, a1);
  }
  return v3;
}

void sub_223A4797C(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecViolaAvc::CAHDecViolaAvc(CAHDecViolaAvc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73E978;
  uint64_t v2 = *(void *)(v1 + 256);
  *(_DWORD *)(v1 + 456) = 948 * *(unsigned __int16 *)(v2 + 7500) + 165600;
  *(_DWORD *)(v1 + 8) = 1760;
  *(_OWORD *)(v1 + 16) = xmmword_223ADA9B0;
  *(_DWORD *)(v1 + 32) = 1;
  *(void *)(v1 + 56) = v2;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecViolaAvc::CAHDecViolaAvc(CAHDecViolaAvc *this, CAVDAvcDecoder *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73E978;
  *(void *)(v4 + 256) = a2;
  uint64_t v5 = 948 * *((unsigned __int16 *)a2 + 3750) + 165600;
  *(_DWORD *)(v4 + 456) = v5;
  *(_DWORD *)(v4 + 8) = 1760;
  *(_OWORD *)(v4 + 16) = xmmword_223ADA9B0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), v5, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      int v8 = "CAHDecViolaAvc";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v7, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v6 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v6;
    *((void *)this + 34) = v6;
    *((_OWORD *)this + 995) = 0u;
    *((_OWORD *)this + 996) = 0u;
    *((_OWORD *)this + 997) = 0u;
    *((_OWORD *)this + 998) = 0u;
    *((_OWORD *)this + 999) = 0u;
    *((_OWORD *)this + 1000) = 0u;
    *((_OWORD *)this + 1001) = 0u;
    *((_OWORD *)this + 1002) = 0u;
    *((_OWORD *)this + 1003) = 0u;
    *((_OWORD *)this + 1004) = 0u;
    *((_OWORD *)this + 1005) = 0u;
    bzero((char *)this + 560, 0x3BD0uLL);
  }
}

void sub_223A47BA8(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecViolaAvc::~CAHDecViolaAvc(CAHDecViolaAvc *this)
{
  *(void *)this = &unk_26D73E978;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecViolaAvc::~CAHDecViolaAvc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecViolaAvc::initPicture(CAHDecViolaAvc *this, int a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v5 = 948 * *(unsigned __int16 *)(*((void *)this + 32) + 7500) + 165600;
  *((_DWORD *)this + 114) = v5;
  *((_DWORD *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v6;
  if (v6)
  {
    bzero(v6, v5);
    uint64_t v8 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v8 + 16) = a2;
    *(_WORD *)(v8 + 24) = 257;
    *(_WORD *)(v8 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 3975) = 0;
    *((void *)this + 1995) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "initPicture";
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v10, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecViolaAvc::populateSlices(CAHDecViolaAvc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 1760;
    uint64_t v5 = a2;
    do
    {
      CAHDecViolaAvc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 948;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecViolaAvc::populateSliceRegisters(uint64_t a1, uint64_t a2, signed int a3)
{
  char v6 = 0;
  uint64_t v127 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 256);
  int v111 = *(_DWORD *)(v7 + 3616);
  int v109 = *(_DWORD *)(v7 + 3612);
  uint64_t v110 = *(void *)(v7 + 3304);
  uint64_t v108 = *(void *)(v7 + 3296);
  uint64_t v8 = *(void *)(v7 + 3312);
  uint64_t v9 = *(unsigned int *)(v7 + 7064);
  uint64_t v10 = *(void *)(v7 + 3320);
  *(_DWORD *)(a2 + 4) = 0;
  uint64_t v12 = v8 + 1848 * a3;
  int v13 = 32 * (*(unsigned char *)(v12 + 1424) & 3);
  *(_DWORD *)(a2 + 4) = v13;
  int v15 = *(unsigned __int8 *)(v12 + 24);
  uint64_t v14 = (unsigned char *)(v12 + 24);
  if (v15 != 2) {
    char v6 = *(unsigned char *)(v8 + 1848 * a3 + 63);
  }
  unsigned int v16 = v13 & 0xFFFF87FF | ((v6 & 0xF) << 11);
  *(_DWORD *)(a2 + 4) = v16;
  if (*v14 == 1) {
    char v17 = *(unsigned char *)(v8 + 1848 * a3 + 64);
  }
  else {
    char v17 = 0;
  }
  int v18 = ((v17 & 0xF) << 7) | v16;
  *(_DWORD *)(a2 + 4) = v18;
  if (*v14 == 1 && !*(unsigned char *)(v8 + 1848 * a3 + 61)) {
    int v19 = 0x8000;
  }
  else {
    int v19 = 0;
  }
  int v20 = v19 | v18;
  *(_DWORD *)(a2 + 4) = v20;
  if (*v14) {
    int v21 = 0x20000;
  }
  else {
    int v21 = 0x10000;
  }
  if (*v14 == 1) {
    int v22 = 0;
  }
  else {
    int v22 = v21;
  }
  *(_DWORD *)(a2 + 4) = v22 | v20;
  if (*v14 != 1) {
    goto LABEL_20;
  }
  uint64_t v23 = v10 + 13040 * a3 + 7224;
  uint64_t v24 = v8 + 1848 * a3;
  *(void *)(v24 + 1832) = v23;
  if (*(unsigned char *)(v10 + 13040 * a3 + 7227)
    || (uint64_t v25 = *(unsigned int *)(v10 + 13040 * a3 + 7256), *(_DWORD *)(a1 + 4 * v25 + 464)))
  {
    int v26 = 16;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 15900))
    {
      *(void *)(a1 + 15960) = *(void *)(v10 + 13040 * a3 + 7264);
      *(_DWORD *)(a1 + 15952) = v25;
      *(_DWORD *)(a1 + 15900) = 1;
      *(_DWORD *)(a2 + 4) |= 0x40000u;
      uint64_t v23 = *(void *)(v24 + 1832);
      if (!v23 || !*(_DWORD *)(a1 + 15900)) {
        goto LABEL_20;
      }
    }
    uint64_t v105 = *(void *)(v23 + 40);
    if (v105 == *(void *)(a1 + 15960)) {
      goto LABEL_20;
    }
    *(void *)(a1 + 15960) = v105;
    *(_DWORD *)(a1 + 15952) = *(_DWORD *)(v23 + 32);
    int v26 = 0x40000;
  }
  *(_DWORD *)(a2 + 4) |= v26;
LABEL_20:
  *(_DWORD *)(a2 + 920) = 0;
  int v27 = *(_DWORD *)(a2 + 4);
  if (*v14 == 1 && (v27 & 0x40000) != 0)
  {
    int v29 = (_OWORD *)(a1 + 176 * *(unsigned int *)(*(void *)(v8 + 1848 * a3 + 1832) + 32));
    long long v30 = v29[658];
    long long v31 = v29[660];
    long long v124 = v29[659];
    long long v125 = v31;
    long long v126 = v29[661];
    long long v32 = v29[654];
    long long v33 = v29[656];
    long long v120 = v29[655];
    long long v121 = v33;
    long long v122 = v29[657];
    long long v123 = v30;
    long long v34 = v29[652];
    *(_OWORD *)long long buf = v29[651];
    *(_OWORD *)&uint8_t buf[16] = v34;
    long long v118 = v29[653];
    long long v119 = v32;
    *(_DWORD *)(a1 + 15900) = 1;
    if (*(void *)buf || *((void *)&v125 + 1))
    {
      uint64_t result = CAHDec::addToPatcherList(a1, buf, 948 * a3 + 2680, 0, 0xFFFFFFFFLL, 8, 0xFFFFFF, 4);
      if (result) {
        return result;
      }
    }
    int v27 = *(_DWORD *)(a2 + 4);
  }
  uint64_t v114 = v10;
  unsigned int v107 = a3;
  unsigned int v112 = v14;
  uint64_t v113 = a1;
  *(_DWORD *)(a2 + 4) = v27 & 0x77FFFF | 0x2D000000;
  unsigned int v36 = *v14;
  if (v36 <= 1)
  {
    uint64_t v37 = v7 + 6872;
    uint64_t v38 = v10 + 13040 * a3;
    if (*(_DWORD *)(v38 + 13032))
    {
      unint64_t v39 = 0;
      int v40 = (unsigned int *)(v38 + 13032);
      uint64_t v41 = v10 + 13040 * a3 + 1416;
      signed int v42 = &_os_log_internal;
      do
      {
        uint64_t v43 = a2 + 4 * v39;
        int v44 = (16 * (v39 & 0xF)) | 0x2DC00000;
        *(_DWORD *)(v43 + 8) = v44;
        uint64_t v45 = (_DWORD *)(v43 + 8);
        if (v9)
        {
          uint64_t v46 = 0;
          while (*(_DWORD *)(*(void *)(v37 + 8 * v46) + 12) != *(_DWORD *)(v41 + 176 * v39 + 12))
          {
            if (v9 == ++v46) {
              goto LABEL_35;
            }
          }
          *uint64_t v45 = v46 & 0xF | v44;
        }
        else
        {
LABEL_35:
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            int v47 = *(_DWORD *)(v41 + 176 * v39 + 32);
            *(_DWORD *)long long buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v39;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v47;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&uint8_t buf[16] = v9;
            _os_log_impl(&dword_223977000, v42, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-0 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
          }
        }
        ++v39;
      }
      while (v39 < *v40);
      unsigned int v36 = *v112;
    }
    else
    {
      LODWORD(v39) = 0;
    }
    if (v36 == 1)
    {
      uint64_t v48 = v10 + 13040 * a3;
      if (*(_DWORD *)(v48 + 13036))
      {
        unint64_t v49 = 0;
        int v50 = (unsigned int *)(v48 + 13036);
        int v51 = &_os_log_internal;
        do
        {
          uint64_t v52 = a2 + 4 * v39;
          int v53 = (16 * (v49 & 0xF)) | 0x2DC00100;
          *(_DWORD *)(v52 + 8) = v53;
          unsigned int v54 = (_DWORD *)(v52 + 8);
          if (v9)
          {
            uint64_t v55 = 0;
            while (*(_DWORD *)(*(void *)(v37 + 8 * v55) + 12) != *(_DWORD *)(v114 + 13040 * a3 + 176 * v49 + 7236))
            {
              if (v9 == ++v55) {
                goto LABEL_49;
              }
            }
            *unsigned int v54 = v55 & 0xF | v53;
          }
          else
          {
LABEL_49:
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            {
              int v56 = *(_DWORD *)(v114 + 13040 * a3 + 176 * v49 + 7256);
              *(_DWORD *)long long buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v39;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v56;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v9;
              _os_log_impl(&dword_223977000, v51, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-1 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
            }
          }
          LODWORD(v39) = v39 + 1;
          ++v49;
        }
        while (v49 < *v50);
      }
    }
  }
  *(void *)(a2 + 136) = 0x2DD0000000000000;
  uint64_t v57 = v110 + 604 * v111;
  unsigned int v58 = (char *)(v57 + 88);
  int v59 = (char *)(v57 + 87);
  if (*v112 == 1) {
    signed int v60 = v58;
  }
  else {
    signed int v60 = v59;
  }
  char v61 = *v60;
  *(_DWORD *)(a2 + 140) = ((v61 & 3) << 6) | 0x2DD00000;
  int v62 = ((v61 & 3) << 6) | 0x2DD00000 | (8 * (*(unsigned char *)(v8 + 1848 * a3 + 376) & 7));
  *(_DWORD *)(a2 + 140) = v62;
  char v63 = *(unsigned char *)(v108 + 2224 * v109 + 4);
  if (v63) {
    char v63 = *(unsigned char *)(v8 + 1848 * a3 + 377);
  }
  *(_DWORD *)(a2 + 140) = v63 & 7 | v62;
  int v64 = *v112;
  if (v64 != 1) {
    goto LABEL_132;
  }
  int v65 = *v58;
  if (v65 != 2) {
    goto LABEL_62;
  }
  *(_DWORD *)(a2 + 140) = ((v61 & 3) << 6) | 0x2DD0002D;
  int v64 = *v112;
  if (v64 != 1)
  {
LABEL_132:
    if (v64 || !*v59) {
      goto LABEL_82;
    }
LABEL_66:
    unsigned int v66 = 0;
    unsigned int v67 = 0;
    do
    {
      uint64_t v68 = v66;
      if (*(unsigned char *)(v8 + 1848 * a3 + v66 + 378))
      {
        int v69 = ((v66 & 0xF) << 9) | 0x2DE04000;
        uint64_t v70 = a2 + 4 * v67;
        *(_DWORD *)(v70 + 144) = v69;
        uint64_t v71 = v8 + 1848 * a3 + 2 * v68;
        *(_DWORD *)(v70 + 144) = v69 | *(_WORD *)(v71 + 394) & 0x1FF;
        *(_DWORD *)(v70 + 528) = 770703360;
        *(_DWORD *)(v70 + 528) = *(unsigned __int16 *)(v71 + 426) | 0x2DF00000;
        ++v67;
      }
      if (*(unsigned char *)(v8 + 1848 * a3 + v68 + 458))
      {
        uint64_t v72 = 0;
        char v73 = 1;
        do
        {
          char v74 = v73;
          int v75 = ((v68 & 0xF) << 9) | (v72 << 14) | 0x2DE08000;
          uint64_t v76 = a2 + 4 * v67;
          *(_DWORD *)(v76 + 144) = v75;
          uint64_t v77 = v8 + 1848 * a3 + 4 * v68 + 2 * v72;
          *(_DWORD *)(v76 + 144) = v75 | *(_WORD *)(v77 + 474) & 0x1FF;
          *(_DWORD *)(v76 + 528) = 770703360;
          *(_DWORD *)(v76 + 528) = *(unsigned __int16 *)(v77 + 538) | 0x2DF00000;
          ++v67;
          uint64_t v72 = 1;
          char v73 = 0;
        }
        while ((v74 & 1) != 0);
      }
      unsigned int v66 = v68 + 1;
    }
    while ((int)v68 + 1 <= *(char *)(v8 + 1848 * a3 + 63));
    if (*v112 == 1)
    {
      unsigned int v78 = 0;
      do
      {
        uint64_t v79 = v78;
        if (*(unsigned char *)(v8 + 1848 * a3 + v78 + 602))
        {
          int v80 = ((v78 & 0xF) << 9) | 0x2DE06000;
          uint64_t v81 = a2 + 4 * v67;
          *(_DWORD *)(v81 + 144) = v80;
          uint64_t v82 = v8 + 1848 * a3 + 2 * v79;
          *(_DWORD *)(v81 + 144) = v80 | *(_WORD *)(v82 + 618) & 0x1FF;
          *(_DWORD *)(v81 + 528) = 770703360;
          *(_DWORD *)(v81 + 528) = *(unsigned __int16 *)(v82 + 650) | 0x2DF00000;
          ++v67;
        }
        if (*(unsigned char *)(v8 + 1848 * a3 + v79 + 682))
        {
          uint64_t v83 = 0;
          char v84 = 1;
          do
          {
            char v85 = v84;
            int v86 = ((v79 & 0xF) << 9) | (v83 << 14) | 0x2DE0A000;
            uint64_t v87 = a2 + 4 * v67;
            *(_DWORD *)(v87 + 144) = v86;
            uint64_t v88 = v8 + 1848 * a3 + 4 * v79 + 2 * v83;
            *(_DWORD *)(v87 + 144) = v86 | *(_WORD *)(v88 + 698) & 0x1FF;
            *(_DWORD *)(v87 + 528) = 770703360;
            *(_DWORD *)(v87 + 528) = *(unsigned __int16 *)(v88 + 762) | 0x2DF00000;
            ++v67;
            uint64_t v83 = 1;
            char v84 = 0;
          }
          while ((v85 & 1) != 0);
        }
        unsigned int v78 = v79 + 1;
      }
      while ((int)v79 + 1 <= *(char *)(v8 + 1848 * a3 + 64));
    }
    *(_DWORD *)(a2 + 136) = v67;
    goto LABEL_82;
  }
  int v65 = *v58;
LABEL_62:
  if (v65 == 1) {
    goto LABEL_66;
  }
LABEL_82:
  *(_DWORD *)(a2 + 912) = 0;
  uint64_t v89 = v8 + 1848 * a3;
  *(_DWORD *)(a2 + 912) = (((*(unsigned __int8 *)(v110 + 604 * v111 + 89) + *(unsigned __int8 *)(v89 + 1425)) << 10)
                         + 26624) & 0x1FC00 | 0x2D900000;
  *(_DWORD *)(a2 + 916) = 0;
  int v90 = (*(unsigned char *)(v89 + 1428) == 0) << 17;
  *(_DWORD *)(a2 + 916) = v90;
  if (*(unsigned char *)(v89 + 1428) != 1)
  {
    int v91 = v90 | 0x10000;
    *(_DWORD *)(a2 + 916) = v91;
    uint64_t v92 = v8 + 1848 * a3;
    int v93 = v91 | ((*(unsigned char *)(v92 + 1429) & 0xF) << 8);
    *(_DWORD *)(a2 + 916) = v93;
    int v90 = v93 | ((*(unsigned char *)(v92 + 1430) & 0xF) << 12);
  }
  *(_DWORD *)(a2 + 916) = v90 | 0x2DA00000;
  int v94 = (unsigned int *)(v8 + 1848 * a3 + 1436);
  unsigned int v95 = *v94;
  if (*(unsigned char *)(v110 + 604 * v111 + 3))
  {
    int v96 = 0;
    if ((v95 & 7) != 0) {
      *int v94 = (v95 + 7) & 0xFFFFFFF8;
    }
  }
  else
  {
    int v96 = *v94 & 7;
  }
  *(_DWORD *)(a2 + 924) = (v96 << 15) | 0x2D800000;
  uint64_t v97 = *(_DWORD **)(v113 + 256);
  unsigned int v98 = v97[626];
  unint64_t v115 = 0;
  uint64_t v116 = 0;
  if (!CAVDAvcDecoder::GetSDataMemInfo((uint64_t)v97, v107, &v116, &v115)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v99 = (void *)v116;
  if (!*(void *)v116 && !*(_DWORD *)(v116 + 152) && !*(_DWORD *)(v116 + 156)) {
    goto LABEL_96;
  }
  int v100 = v115;
  if (HIDWORD(v115) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "populateSliceRegisters";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1639;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v100 = v115;
  }
  uint64_t result = CAHDec::addToPatcherList(v113, v99, 948 * v107 + 2692, v100, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result)
  {
LABEL_96:
    unsigned int v101 = *(_DWORD *)(v8 + 1848 * a3 + 16) - (*v94 >> 3);
    *(_DWORD *)(a2 + 936) = v101;
    if (v97[590] == 1)
    {
      *(_DWORD *)(a2 + 944) = 0;
      unsigned int v102 = *(unsigned __int16 *)(v8 + 1848 * a3 + 1840);
      if (v97[605])
      {
        if (v101 < v102) {
          unsigned int v102 = v101;
        }
        if (v96) {
          BOOL v103 = v102 == 0;
        }
        else {
          BOOL v103 = 0;
        }
        if (v103) {
          unsigned int v102 = 1;
        }
        unsigned int v104 = v102 | v98 & 0x10000;
      }
      else
      {
        int v106 = 0;
        if ((v98 & 0x200000) != 0)
        {
          if (v96 && !*(_WORD *)(v8 + 1848 * a3 + 1840))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = "int CAHDecViolaAvc::populateSliceRegisters(AvcSliceRegisters *, int)";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect off_to_prot_data to be set when slice header is not byte aligned\n", buf, 0xCu);
              unsigned int v101 = *(_DWORD *)(a2 + 936);
              int v106 = *(_DWORD *)(a2 + 944) & 0x1F0000;
            }
            else
            {
              int v106 = 0;
            }
            unsigned int v102 = 1;
          }
        }
        else if (v96)
        {
          ++v102;
        }
        if (v102 >= v101) {
          unsigned int v102 = v101;
        }
        unsigned int v104 = v106 & 0xFFDFFFFF | (v102 << 22) | (unsigned __int16)v98 | (((v98 >> 20) & 1) << 21);
      }
      uint64_t result = 0;
      *(_DWORD *)(a2 + 944) = v104;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecViolaAvc::populateCommonRegisters(CAHDecViolaAvc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000001;
  return 0;
}

uint64_t CAHDecViolaAvc::updateCommonRegisters(CAHDecViolaAvc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

void CAHDecViolaAvc::copyScalingList(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = *a2 & 0xFEFFFFC0 | 0x1000000;
  *a2 = v8;
  do
  {
    v8 |= (*(unsigned char *)(a4 + v7) == 0) << v7;
    *a2 = v8;
    ++v7;
  }
  while (v7 != 6);
  unsigned int v9 = v8 & 0xFFFFF03F;
  *a2 = v8 & 0xFFFFF03F;
  if (a7 >= 7)
  {
    uint64_t v10 = (a7 - 6);
    uint64_t v11 = (unsigned __int8 *)(a4 + 6);
    uint64_t v12 = &dword_223ADA9C0;
    do
    {
      int v13 = *v11++;
      BOOL v14 = v13 == 0;
      int v16 = *v12++;
      char v15 = v16;
      int v17 = v14;
      v9 |= ((v17 << v15) & 0x3F) << 6;
      *a2 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 1;
  uint64_t v20 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v22 = *(_DWORD *)(v20 + i) & 0xFFFFFF | (*(unsigned __int8 *)(v19 + i - 1) << 24);
      *(_DWORD *)(v20 + i) = v22;
      unsigned int v23 = v22 & 0xFF00FFFF | (*(unsigned __int8 *)(v19 + i) << 16);
      *(_DWORD *)(v20 + i) = v23;
      unsigned int v24 = v23 & 0xFFFF00FF | (*(unsigned __int8 *)(v19 + i + 1) << 8);
      *(_DWORD *)(v20 + i) = v24;
      *(_DWORD *)(v20 + i) = v24 & 0xFFFFFF00 | *(unsigned __int8 *)(v19 + i + 2);
    }
    ++v18;
    v20 += 16;
    v19 += 16;
  }
  while (v18 != 6);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 96;
  do
  {
    int v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = a6 + ((uint64_t)dword_223ADA9D8[v25] << 6);
    do
    {
      long long v31 = (unsigned __int8 *)(v30 + (v28 & 0x7FFFFFE0 | v29 & 4 | v27 & 0x18));
      int v32 = *(_DWORD *)(v26 + v28) & 0xFFFFFF | (*v31 << 24);
      *(_DWORD *)(v26 + v28) = v32;
      unsigned int v33 = v32 & 0xFF00FFFF | (v31[1] << 16);
      *(_DWORD *)(v26 + v28) = v33;
      unsigned int v34 = v33 & 0xFFFF00FF | (v31[2] << 8);
      *(_DWORD *)(v26 + v28) = v34;
      *(_DWORD *)(v26 + v28) = v34 & 0xFFFFFF00 | v31[3];
      ++v29;
      v28 += 4;
      v27 += 8;
    }
    while (v28 != 64);
    ++v25;
    v26 += 64;
  }
  while (v25 != 6);
}

uint64_t CAHDecViolaAvc::AvcSeqScalingListFallBack(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v3 = 12;
    }
    uint64_t v4 = a2 + 22;
    uint64_t v5 = (_OWORD *)(a2 + 34);
    while (v2 > 5)
    {
      if (*(unsigned char *)(v4 + v2 - 12))
      {
        if (*(unsigned char *)(v4 + v2) == 2)
        {
          unsigned int v9 = (_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 130);
          if (v2 == 6 || (v2 & 0x7FFFFFFD) == 8)
          {
            _OWORD *v9 = avcDefaultIntraScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADAA40;
            long long v10 = xmmword_223ADAA50;
            long long v11 = unk_223ADAA60;
          }
          else
          {
            _OWORD *v9 = avcDefaultInterScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADAA00;
            long long v10 = xmmword_223ADAA10;
            long long v11 = unk_223ADAA20;
          }
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 162) = v10;
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 178) = v11;
        }
        goto LABEL_24;
      }
      if ((v2 - 8) <= 0xFFFFFFFD)
      {
        uint64_t result = a2 + 130;
        int v13 = (_OWORD *)(a2 + 130 + ((unint64_t)(v2 - 6) << 6));
        BOOL v14 = (long long *)(a2 + 130 + ((unint64_t)(v2 - 8) << 6));
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[3];
        v13[2] = v14[2];
        v13[3] = v17;
        *int v13 = v15;
        v13[1] = v16;
        uint64_t v8 = (v2 - 2);
LABEL_21:
        *(unsigned char *)(v4 + v2) = *(unsigned char *)(a2 + v8 + 22);
      }
LABEL_24:
      ++v2;
      ++v5;
      if (v3 == v2) {
        return result;
      }
    }
    if (*(unsigned char *)(v4 + v2 - 12)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (v6 || v2 == 3) {
      goto LABEL_24;
    }
    uint64_t v8 = (v2 - 1);
    *uint64_t v5 = *(_OWORD *)(a2 + 16 * v8 + 34);
    goto LABEL_21;
  }
  return result;
}

long long *CAHDecViolaAvc::AvcPicScalingListFallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 96))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = a3 + 97;
    uint64_t v6 = -96;
    uint64_t result = &avcDefaultIntraScalingList8x8;
    do
    {
      if (v3 > 5)
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if (*(unsigned char *)(v5 + v3 + 12) == 2)
          {
            unsigned int v9 = (_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 217);
            if (v3 == 6 || (v3 & 0x7FFFFFFD) == 8)
            {
              _OWORD *v9 = avcDefaultIntraScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADAA40;
              long long v10 = xmmword_223ADAA50;
              long long v11 = unk_223ADAA60;
            }
            else
            {
              _OWORD *v9 = avcDefaultInterScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADAA00;
              long long v10 = xmmword_223ADAA10;
              long long v11 = unk_223ADAA20;
            }
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 249) = v10;
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 265) = v11;
          }
          goto LABEL_31;
        }
        if ((v3 - 8) <= 0xFFFFFFFD)
        {
          uint64_t v12 = (_OWORD *)(a3 + 217 + ((unint64_t)(v3 - 6) << 6));
          int v13 = (long long *)(a3 + 217 + ((unint64_t)(v3 - 8) << 6));
          long long v14 = *v13;
          long long v15 = v13[1];
          long long v16 = v13[3];
          v12[2] = v13[2];
          v12[3] = v16;
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v17 = a3 + (v3 - 2);
          goto LABEL_29;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          uint64_t v18 = (v3 - 6);
          uint64_t v19 = a3 + (v18 << 6);
          uint64_t v20 = a2 + (v18 << 6);
          long long v21 = *(_OWORD *)(v20 + 130);
          long long v22 = *(_OWORD *)(v20 + 146);
          long long v23 = *(_OWORD *)(v20 + 162);
          *(_OWORD *)(v19 + 265) = *(_OWORD *)(v20 + 178);
          *(_OWORD *)(v19 + 249) = v23;
          *(_OWORD *)(v19 + 233) = v22;
          *(_OWORD *)(v19 + 217) = v21;
LABEL_23:
          char v24 = *(unsigned char *)(a2 + 22 + v3);
LABEL_30:
          *(unsigned char *)(v5 + v3 + 12) = v24;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if ((*(unsigned char *)(v5 + v3 + 12) & 2) != 0)
          {
            if (v3 > 2) {
              long long v8 = avcDefaultInterScalingList4x4;
            }
            else {
              long long v8 = avcDefaultIntraScalingList4x4;
            }
            *(_OWORD *)(v5 + v6 + 120) = v8;
          }
          goto LABEL_31;
        }
        if (v3 && v3 != 3)
        {
          uint64_t v25 = (v3 - 1);
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a3 + 16 * v25 + 121);
          uint64_t v17 = a3 + v25;
LABEL_29:
          char v24 = *(unsigned char *)(v17 + 109);
          goto LABEL_30;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a2 + v6 + 130);
          goto LABEL_23;
        }
      }
LABEL_31:
      ++v3;
      v6 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CAHDecViolaAvc::populateSequenceRegisters(CAHDecViolaAvc *this)
{
  uint64_t v2 = *((void *)this + 32);
  unint64_t v3 = (_DWORD *)*((void *)this + 33);
  int v4 = *(_DWORD *)(v2 + 3612);
  int v5 = *(_DWORD *)(v2 + 3616);
  uint64_t v6 = *(void *)(v2 + 3296);
  uint64_t v7 = *(void *)(v2 + 3304);
  uint64_t v8 = v6 + 2224 * v4;
  v3[10] = 0;
  __int16 v9 = *(_WORD *)(v8 + 1558);
  v3[10] = (2 * (v9 & 0xFFF)) | 1;
  v3[10] = ((*(_WORD *)(v8 + 1560) & 0xFFF) << 17) | (2 * (v9 & 0xFFF)) | 0x10001;
  v3[11] = 0;
  int v10 = *(unsigned char *)(v8 + 1564) & 1;
  v3[11] = v10;
  int v11 = v10 | ((*(unsigned char *)(v7 + 604 * v5 + 95) != 0) << 7) | 0x2800;
  v3[11] = v11;
  uint64_t v12 = (unsigned char *)(v8 + 4);
  int v13 = *(unsigned __int8 *)(v8 + 4);
  if (*(unsigned char *)(v8 + 4)) {
    int v13 = (*(unsigned char *)(v6 + 2224 * v4 + 7) & 0xF) << 15;
  }
  int v14 = v13 | v11;
  v3[11] = v14;
  long long v15 = (unsigned char *)(v6 + 2224 * v4);
  int v16 = v14 & 0x7F87A881 | ((v15[6] & 0xF) << 19);
  v3[11] = v16;
  unsigned int v17 = v16 & 0xFF7FFFFF | ((v15[5] & 1) << 23);
  v3[11] = v17;
  v3[11] = v17 & 0xFCFFFFFF | ((*v12 & 3) << 24);
  if (v15[9])
  {
    if (*v12 == 3) {
      int v18 = 12;
    }
    else {
      int v18 = 8;
    }
    uint64_t v19 = CAHDecViolaAvc::AvcSeqScalingListFallBack((uint64_t)this, v8);
    CAHDecViolaAvc::copyScalingList(v19, v3 + 12, *((void *)this + 33) + 648, v6 + 2224 * v4 + 22, v6 + 2224 * v4 + 34, v6 + 2224 * v4 + 130, v18);
  }
  return 0;
}

uint64_t CAHDecViolaAvc::populateDARTAddr(uint64_t this, unsigned int a2)
{
  uint64_t v2 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(this + 256);
  memset(v20, 0, sizeof(v20));
  uint64_t v4 = v3 + 392 * a2;
  int64x2_t v5 = (int64x2_t)xmmword_223ADA980;
  unint64_t v6 = v4 + 7072;
  uint64_t v7 = *(unsigned int *)(v4 + 7456);
  uint64_t v8 = *(_DWORD **)(this + 8 * *(unsigned int *)(v3 + 232 * a2 + 2332) + 272);
  int64x2_t v9 = vdupq_n_s64(v6);
  int64x2_t v10 = vdupq_n_s64(2uLL);
  do
  {
    v20[v2] = vaddq_s64(v9, vshlq_n_s64(v5, 4uLL));
    int64x2_t v5 = vaddq_s64(v5, v10);
    ++v2;
  }
  while (v2 != 12);
  int v11 = (_DWORD *)(v3 + 232 * a2);
  int v12 = v8[49];
  v8[49] = v12 & 0xFE000000 | ((v11[541] + v11[532]) >> 7);
  int v13 = v8[51];
  v8[51] = v13 & 0xFE000000 | ((v11[542] + v11[532]) >> 7);
  if (*(_DWORD *)(*(void *)(this + 256) + 2648) == 1)
  {
    v8[49] = v12 & 0xFE000000 | ((v11[541] + v11[532]) >> 7);
    v8[51] = v13 & 0xFE000000 | ((v11[542] + v11[532]) >> 7);
    uint64_t v14 = v3 + 232 * a2;
    v8[48] = v8[48] & 0xFE000000 | ((*(_DWORD *)(v14 + 2176) + v11[532]) >> 7);
    v8[50] = v8[50] & 0xFE000000 | ((*(_DWORD *)(v14 + 2180) + v11[532]) >> 7);
  }
  if (v7)
  {
    long long v15 = v8 + 116;
    int v16 = v20;
    do
    {
      uint64_t v17 = *(void *)v16;
      if (!*(unsigned char *)(*(void *)v16 + 12))
      {
        int v18 = *(v15 - 32);
        *(v15 - 32) = v18 & 0xFE000000 | ((*(_DWORD *)(*(void *)v17 + 52)
                                                       + *(_DWORD *)(*(void *)v17 + 16)) >> 7);
        unsigned int v19 = *v15;
        *long long v15 = *v15 & 0xFE000000 | ((*(_DWORD *)(*(void *)v17 + 56)
                                                 + *(_DWORD *)(*(void *)v17 + 16)) >> 7);
        if (*(_DWORD *)(*(void *)(this + 256) + 2648) == 1)
        {
          *(v15 - 32) = v18 & 0xFE000000 | ((*(_DWORD *)(*(void *)v17 + 52)
                                                         + *(_DWORD *)(*(void *)v17 + 16)) >> 7);
          *long long v15 = v19 & 0xFE000000 | ((*(_DWORD *)(*(void *)v17 + 56)
                                                  + *(_DWORD *)(*(void *)v17 + 16)) >> 7);
          *(v15 - 48) = *(v15 - 48) & 0xFE000000 | ((*(_DWORD *)(*(void *)v17 + 64)
                                                                 + *(_DWORD *)(*(void *)v17 + 16)) >> 7);
          *(v15 - 16) = *(v15 - 16) & 0xFE000000 | ((*(_DWORD *)(*(void *)v17 + 68)
                                                                 + *(_DWORD *)(*(void *)v17 + 16)) >> 7);
        }
      }
      int v16 = (_OWORD *)((char *)v16 + 8);
      ++v15;
      --v7;
    }
    while (v7);
  }
  return this;
}

uint64_t CAHDecViolaAvc::populatePictureRegisters(CAHDecViolaAvc *this)
{
  uint64_t v229 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 3612);
  int v4 = *(_DWORD *)(v2 + 3616);
  uint64_t v5 = *(void *)(v2 + 3296);
  uint64_t v6 = *(void *)(v2 + 3304);
  uint64_t v211 = *(void *)(v2 + 2088);
  uint64_t v213 = *(unsigned int *)(v2 + 3152);
  int v7 = *(_DWORD *)(v2 + 2644);
  int v209 = *(unsigned __int8 *)(v2 + 8);
  int v210 = *(_DWORD *)(v2 + 3132);
  long long v8 = *(_OWORD *)(v2 + 7016);
  v228[8] = *(_OWORD *)(v2 + 7000);
  v228[9] = v8;
  long long v9 = *(_OWORD *)(v2 + 7048);
  v228[10] = *(_OWORD *)(v2 + 7032);
  v228[11] = v9;
  long long v10 = *(_OWORD *)(v2 + 6952);
  v228[4] = *(_OWORD *)(v2 + 6936);
  v228[5] = v10;
  long long v11 = *(_OWORD *)(v2 + 6984);
  v228[6] = *(_OWORD *)(v2 + 6968);
  v228[7] = v11;
  long long v12 = *(_OWORD *)(v2 + 6888);
  v228[0] = *(_OWORD *)(v2 + 6872);
  v228[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 6920);
  v228[2] = *(_OWORD *)(v2 + 6904);
  v228[3] = v13;
  uint64_t v14 = *(unsigned int *)(v2 + 7064);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  int v16 = v15;
  uint64_t v17 = *((void *)this + 33);
  *(_DWORD *)(v17 + 52) = 766509056;
  if (**(_DWORD **)(*((void *)this + 32) + 3312) == 5) {
    int v18 = 766517248;
  }
  else {
    int v18 = 766509056;
  }
  if (v15) {
    int v19 = 688;
  }
  else {
    int v19 = 672;
  }
  if (v7) {
    int v20 = 4160;
  }
  else {
    int v20 = 64;
  }
  *(_DWORD *)(v17 + 52) = v20 | ((v7 == 1) << 10) | v18 | v19;
  *(void *)(v17 + 56) = 0x1000000;
  uint64_t v21 = v5 + 2224 * v3;
  int v22 = (16 * (*(_WORD *)(v21 + 1558) & 0xFFF)) | 0xF;
  *(_DWORD *)(v17 + 60) = v22;
  int v23 = v22 | (*(unsigned __int16 *)(v21 + 1560) << 20) | 0xF0000;
  *(void *)(v17 + 64) = 0;
  *(_DWORD *)(v17 + 60) = v23;
  LODWORD(v21) = (*(unsigned char *)(v21 + 8) & 1) << 18;
  *(_DWORD *)(v17 + 68) = v21;
  char v24 = (unsigned char *)(v6 + 604 * v4);
  LODWORD(v21) = v21 & 0xFFF7FFFF | ((v24[93] & 1) << 19);
  *(_DWORD *)(v17 + 68) = v21;
  LODWORD(v21) = v21 & 0xFFEFFFFF | ((v24[3] & 1) << 20);
  *(_DWORD *)(v17 + 68) = v21;
  *(_DWORD *)(v17 + 68) = v21 | ((**(_DWORD **)(*((void *)this + 32) + 3312) != 5) << 21);
  unsigned int v25 = *(_DWORD *)(v17 + 72) & 0xFFFFFC1F | (32 * (v24[91] & 0x1F));
  *(_DWORD *)(v17 + 72) = v25;
  *(_DWORD *)(v17 + 72) = v25 & 0xFFFFFFE0 | v24[601] & 0x1F;
  if (v24[96])
  {
    uint64_t v26 = v6 + 604 * v4;
    uint64_t v27 = v5 + 2224 * v3;
    if (*(unsigned char *)(v27 + 4) == 3) {
      int v28 = 12;
    }
    else {
      int v28 = 8;
    }
    uint64_t v29 = *((void *)this + 33) + 1132;
    uint64_t v30 = CAHDecViolaAvc::AvcPicScalingListFallBack(v15, v27, v26);
    CAHDecViolaAvc::copyScalingList((uint64_t)v30, (unsigned int *)(v17 + 76), v29, v26 + 109, v26 + 121, v26 + 217, v28);
  }
  *(_DWORD *)(v17 + 80) = *((_DWORD *)this + 3978);
  *(_DWORD *)(v17 + 84) = *((_DWORD *)this + 3979);
  *(_DWORD *)(v17 + 88) = 3145738;
  long long v31 = (char *)this + 9008;
  for (uint64_t i = 92; i != 120; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v33 = *((void *)this + 33);
    int v34 = *(_DWORD *)(v33 + i);
    *(_DWORD *)(v33 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFu;
    uint64_t v35 = *((void *)this + 33);
    int v36 = *(_DWORD *)(v35 + i);
    *(_DWORD *)(v35 + i) = v34;
    if (*(void *)v31 || *((_DWORD *)v31 + 38) || *((_DWORD *)v31 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v31, i, 0, 0xFFFFFFFFLL, 8, v36, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 28) = *(_DWORD *)(*((void *)this + 33) + i + 28) & 0x800001FF | (((*((_DWORD *)this + 3972) >> 9) & 0x3FFFFF) << 9);
    v31 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 148) = 0;
  *(_DWORD *)(*((void *)this + 33) + 152) = 0;
  *(_DWORD *)(*((void *)this + 33) + 156) = 0;
  uint64_t v38 = *((void *)this + 33);
  int v39 = *(_DWORD *)(v38 + 156);
  *(_DWORD *)(v38 + 156) = 0;
  *(_DWORD *)(*((void *)this + 33) + 156) ^= 0xFFFFFFu;
  uint64_t v40 = *((void *)this + 33);
  int v41 = *(_DWORD *)(v40 + 156);
  *(_DWORD *)(v40 + 156) = v39;
  if (!*((void *)this + 1830) && !*((_DWORD *)this + 3698) && !*((_DWORD *)this + 3699)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1830, 156, 0, 0xFFFFFFFFLL, 8, v41, 4),
        !result))
  {
    *(_DWORD *)(*((void *)this + 33) + 160) = 0;
    uint64_t v42 = *((void *)this + 33);
    int v43 = *(_DWORD *)(v42 + 160);
    *(_DWORD *)(v42 + 160) = 0;
    *(_DWORD *)(*((void *)this + 33) + 160) ^= 0xFFFFFFu;
    uint64_t v44 = *((void *)this + 33);
    int v45 = *(_DWORD *)(v44 + 160);
    *(_DWORD *)(v44 + 160) = v43;
    if (!*((void *)this + 1852) && !*((_DWORD *)this + 3742) && !*((_DWORD *)this + 3743)) {
      goto LABEL_198;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1852, 160, 0, 0xFFFFFFFFLL, 8, v45, 4);
    if (!result)
    {
LABEL_198:
      *(_DWORD *)(*((void *)this + 33) + 164) = 0;
      uint64_t v46 = *((void *)this + 33);
      int v47 = *(_DWORD *)(v46 + 164);
      *(_DWORD *)(v46 + 164) = 0;
      *(_DWORD *)(*((void *)this + 33) + 164) ^= 0xFFFFFFu;
      uint64_t v48 = *((void *)this + 33);
      int v49 = *(_DWORD *)(v48 + 164);
      *(_DWORD *)(v48 + 164) = v47;
      if (!*((void *)this + 1874) && !*((_DWORD *)this + 3786) && !*((_DWORD *)this + 3787)) {
        goto LABEL_199;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1874, 164, 0, 0xFFFFFFFFLL, 8, v49, 4);
      if (!result)
      {
LABEL_199:
        *(_DWORD *)(*((void *)this + 33) + 168) = 0;
        uint64_t v50 = *((void *)this + 33);
        int v51 = *(_DWORD *)(v50 + 168);
        *(_DWORD *)(v50 + 168) = 0;
        *(_DWORD *)(*((void *)this + 33) + 168) ^= 0xFFFFFFu;
        uint64_t v52 = *((void *)this + 33);
        int v53 = *(_DWORD *)(v52 + 168);
        *(_DWORD *)(v52 + 168) = v51;
        if (!*((void *)this + 1896) && !*((_DWORD *)this + 3830) && !*((_DWORD *)this + 3831)) {
          goto LABEL_200;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1896, 168, 0, 0xFFFFFFFFLL, 8, v53, 4);
        if (!result)
        {
LABEL_200:
          *(_DWORD *)(*((void *)this + 33) + 172) = 0;
          uint64_t v54 = *((void *)this + 33);
          int v55 = *(_DWORD *)(v54 + 172);
          *(_DWORD *)(v54 + 172) = 0;
          *(_DWORD *)(*((void *)this + 33) + 172) ^= 0xFFFFFFu;
          uint64_t v56 = *((void *)this + 33);
          int v57 = *(_DWORD *)(v56 + 172);
          *(_DWORD *)(v56 + 172) = v55;
          if (!*((void *)this + 1918) && !*((_DWORD *)this + 3874) && !*((_DWORD *)this + 3875)) {
            goto LABEL_201;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1918, 172, 0, 0xFFFFFFFFLL, 8, v57, 4);
          if (!result)
          {
LABEL_201:
            *(_DWORD *)(*((void *)this + 33) + 176) = 0;
            uint64_t v58 = *((void *)this + 33);
            int v59 = *(_DWORD *)(v58 + 176);
            *(_DWORD *)(v58 + 176) = 0;
            *(_DWORD *)(*((void *)this + 33) + 176) ^= 0xFFFFFFu;
            uint64_t v60 = *((void *)this + 33);
            int v61 = *(_DWORD *)(v60 + 176);
            *(_DWORD *)(v60 + 176) = v59;
            if (!*((void *)this + 1940) && !*((_DWORD *)this + 3918) && !*((_DWORD *)this + 3919)) {
              goto LABEL_202;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1940, 176, 0, 0xFFFFFFFFLL, 8, v61, 4);
            if (!result)
            {
LABEL_202:
              *(_DWORD *)(*((void *)this + 33) + 180) = 0;
              *(_DWORD *)(*((void *)this + 33) + 184) = 0;
              uint64_t v62 = *((void *)this + 33);
              int v63 = *(_DWORD *)(v62 + 184);
              *(_DWORD *)(v62 + 184) = 0;
              *(_DWORD *)(*((void *)this + 33) + 184) ^= 0xFFFFFFu;
              uint64_t v64 = *((void *)this + 33);
              int v65 = *(_DWORD *)(v64 + 184);
              *(_DWORD *)(v64 + 184) = v63;
              if (!*((void *)this + 1280) && !*((_DWORD *)this + 2598) && !*((_DWORD *)this + 2599)) {
                goto LABEL_203;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1280, 184, 0, 0xFFFFFFFFLL, 8, v65, 4);
              if (!result)
              {
LABEL_203:
                *(_DWORD *)(*((void *)this + 33) + 188) = 0;
                uint64_t v66 = *((void *)this + 33);
                int v67 = *(_DWORD *)(v66 + 188);
                *(_DWORD *)(v66 + 188) = 0;
                *(_DWORD *)(*((void *)this + 33) + 188) ^= 0xFFFFFFu;
                uint64_t v68 = *((void *)this + 33);
                int v69 = *(_DWORD *)(v68 + 188);
                *(_DWORD *)(v68 + 188) = v67;
                uint64_t v70 = (char *)this + 176 * v213;
                if (!*((void *)v70 + 1302)
                  && !*((_DWORD *)this + 44 * v213 + 2642)
                  && !*((_DWORD *)this + 44 * v213 + 2643))
                {
                  goto LABEL_204;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v70 + 1302, 188, 0, 0xFFFFFFFFLL, 8, v69, 4);
                if (!result)
                {
LABEL_204:
                  *(_DWORD *)(*((void *)this + 33) + 192) = 0;
                  uint64_t v71 = *((void *)this + 33);
                  int v72 = *(_DWORD *)(v71 + 192);
                  *(_DWORD *)(v71 + 192) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 192) ^= 0x1FFFFFFu;
                  uint64_t v73 = *((void *)this + 33);
                  int v74 = *(_DWORD *)(v73 + 192);
                  *(_DWORD *)(v73 + 192) = v72;
                  int v75 = (char *)this + 176 * v213;
                  if (!*((void *)v75 + 70)
                    && !*((_DWORD *)this + 44 * v213 + 178)
                    && !*((_DWORD *)this + 44 * v213 + 179))
                  {
                    goto LABEL_205;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v75 + 70, 192, 0, 0xFFFFFFFFLL, 7, v74, 4);
                  if (!result)
                  {
LABEL_205:
                    *(_DWORD *)(*((void *)this + 33) + 196) = 0;
                    uint64_t v76 = *((void *)this + 33);
                    int v77 = *(_DWORD *)(v76 + 196);
                    *(_DWORD *)(v76 + 196) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 196) ^= 0x1FFFFFFu;
                    uint64_t v78 = *((void *)this + 33);
                    int v79 = *(_DWORD *)(v78 + 196);
                    *(_DWORD *)(v78 + 196) = v77;
                    int v80 = (void *)(v211 + 8);
                    if (!*(void *)(v211 + 8) && !*(_DWORD *)(v211 + 160) && !*(_DWORD *)(v211 + 164)) {
                      goto LABEL_206;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v211 + 8), 196, *(_DWORD *)(v211 + 60), 0xFFFFFFFFLL, 7, v79, 4);
                    if (!result)
                    {
LABEL_206:
                      *(_DWORD *)(*((void *)this + 33) + 200) = 0;
                      uint64_t v81 = *((void *)this + 33);
                      int v82 = *(_DWORD *)(v81 + 200);
                      *(_DWORD *)(v81 + 200) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 200) ^= 0x1FFFFFFu;
                      uint64_t v83 = *((void *)this + 33);
                      int v84 = *(_DWORD *)(v83 + 200);
                      *(_DWORD *)(v83 + 200) = v82;
                      char v85 = (char *)this + 176 * v213;
                      if (!*((void *)v85 + 598)
                        && !*((_DWORD *)this + 44 * v213 + 1234)
                        && !*((_DWORD *)this + 44 * v213 + 1235))
                      {
                        goto LABEL_207;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v85 + 598, 200, 0, 0xFFFFFFFFLL, 7, v84, 4);
                      if (!result)
                      {
LABEL_207:
                        *(_DWORD *)(*((void *)this + 33) + 204) = 0;
                        uint64_t v86 = *((void *)this + 33);
                        int v87 = *(_DWORD *)(v86 + 204);
                        *(_DWORD *)(v86 + 204) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 204) ^= 0x1FFFFFFu;
                        uint64_t v88 = *((void *)this + 33);
                        int v89 = *(_DWORD *)(v88 + 204);
                        *(_DWORD *)(v88 + 204) = v87;
                        if (!*v80 && !*(_DWORD *)(v211 + 160) && !*(_DWORD *)(v211 + 164)) {
                          goto LABEL_208;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v80, 204, *(_DWORD *)(v211 + 64), 0xFFFFFFFFLL, 7, v89, 4);
                        if (!result)
                        {
LABEL_208:
                          if (*(_DWORD *)(*((void *)this + 32) + 2648) != 1) {
                            goto LABEL_87;
                          }
                          uint64_t v90 = *((void *)this + 33);
                          int v91 = *(_DWORD *)(v90 + 196);
                          *(_DWORD *)(v90 + 196) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 196) ^= 0x1FFFFFFu;
                          uint64_t v92 = *((void *)this + 33);
                          int v93 = *(_DWORD *)(v92 + 196);
                          *(_DWORD *)(v92 + 196) = v91;
                          if (!*v80 && !*(_DWORD *)(v211 + 160) && !*(_DWORD *)(v211 + 164)) {
                            goto LABEL_209;
                          }
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v80, 196, *(_DWORD *)(v211 + 60), 0xFFFFFFFFLL, 7, v93, 4);
                          if (!result)
                          {
LABEL_209:
                            uint64_t v94 = *((void *)this + 33);
                            int v95 = *(_DWORD *)(v94 + 204);
                            *(_DWORD *)(v94 + 204) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 204) ^= 0x1FFFFFFu;
                            uint64_t v96 = *((void *)this + 33);
                            int v97 = *(_DWORD *)(v96 + 204);
                            *(_DWORD *)(v96 + 204) = v95;
                            if (!*v80 && !*(_DWORD *)(v211 + 160) && !*(_DWORD *)(v211 + 164)) {
                              goto LABEL_210;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v80, 204, *(_DWORD *)(v211 + 64), 0xFFFFFFFFLL, 7, v97, 4);
                            if (!result)
                            {
LABEL_210:
                              uint64_t v98 = *((void *)this + 33);
                              int v99 = *(_DWORD *)(v98 + 192);
                              *(_DWORD *)(v98 + 192) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 192) ^= 0x1FFFFFFu;
                              uint64_t v100 = *((void *)this + 33);
                              int v101 = *(_DWORD *)(v100 + 192);
                              *(_DWORD *)(v100 + 192) = v99;
                              if (!*v80 && !*(_DWORD *)(v211 + 160) && !*(_DWORD *)(v211 + 164)) {
                                goto LABEL_211;
                              }
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v80, 192, *(_DWORD *)(v211 + 72), 0xFFFFFFFFLL, 7, v101, 4);
                              if (!result)
                              {
LABEL_211:
                                uint64_t v102 = *((void *)this + 33);
                                int v103 = *(_DWORD *)(v102 + 200);
                                *(_DWORD *)(v102 + 200) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 200) ^= 0x1FFFFFFu;
                                uint64_t v104 = *((void *)this + 33);
                                int v105 = *(_DWORD *)(v104 + 200);
                                *(_DWORD *)(v104 + 200) = v103;
                                if (!*v80 && !*(_DWORD *)(v211 + 160) && !*(_DWORD *)(v211 + 164)) {
                                  goto LABEL_87;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v80, 200, *(_DWORD *)(v211 + 76), 0xFFFFFFFFLL, 7, v105, 4);
                                if (!result)
                                {
LABEL_87:
                                  int v212 = v7;
                                  uint64_t v205 = v5;
                                  uint64_t v208 = v17;
                                  if (*(_DWORD *)(v17 + 52) & 0x2000 | v14)
                                  {
                                    uint64_t v106 = v14;
                                    *((_DWORD *)this + v213 + 116) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 208) = 0;
                                    if (v14)
                                    {
                                      uint64_t v107 = 0;
                                      if (v16) {
                                        int v108 = 0x2000000;
                                      }
                                      else {
                                        int v108 = 0;
                                      }
                                      int v206 = (v14 << 28) - 0x10000000;
                                      int v207 = v108;
                                      do
                                      {
                                        uint64_t v109 = *((void *)v228 + v107);
                                        uint64_t v110 = *(unsigned int *)(v109 + 32);
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) = *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) & 0xFFFFFFF | v206;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) &= 0xF3FFFFFF;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) = *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) & 0xFDFFFFFF | v207;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) |= 0x1000000u;
                                        int v111 = v210 - *(_DWORD *)(v109 + 12);
                                        int v112 = v111 & 0x1FFFF;
                                        if (v111 < -32768) {
                                          int v112 = 98304;
                                        }
                                        if (v111 < 0x8000) {
                                          int v113 = v112;
                                        }
                                        else {
                                          int v113 = 0x7FFF;
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) = *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) & 0xFFFE0000 | v113;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) = *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) & 0xFFFDFFFF | (*(unsigned __int8 *)(v109 + 1) << 17);
                                        if (*(_DWORD *)(v109 + 28) == 1)
                                        {
                                          long long v226 = 0u;
                                          long long v227 = 0u;
                                          long long v224 = 0u;
                                          long long v225 = 0u;
                                          long long v222 = 0u;
                                          long long v223 = 0u;
                                          long long v220 = 0u;
                                          long long v221 = 0u;
                                          long long v218 = 0u;
                                          long long v219 = 0u;
                                          memset(buf, 0, sizeof(buf));
                                          int DPB = AVC_RLM::getDPB(*(void *)(*((void *)this + 32) + 3104), buf);
                                          if (DPB < 1)
                                          {
                                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                              return 0xFFFFFFFFLL;
                                            }
                                            int v215 = 136315138;
                                            int v216 = "populatePictureRegisters";
                                            uint64_t v165 = &_os_log_internal;
                                            int v166 = "AppleAVD: ERROR: %s: No ref pics found!\n";
                                          }
                                          else
                                          {
                                            uint64_t v115 = DPB;
                                            while (v115-- >= 1)
                                            {
                                              uint64_t v109 = buf[v115];
                                              if (!*(_DWORD *)(v109 + 28))
                                              {
                                                uint64_t v110 = *(unsigned int *)(v109 + 32);
                                                goto LABEL_105;
                                              }
                                            }
                                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                              return 0xFFFFFFFFLL;
                                            }
                                            int v215 = 136315138;
                                            int v216 = "populatePictureRegisters";
                                            uint64_t v165 = &_os_log_internal;
                                            int v166 = "AppleAVD: ERROR: %s: No non-existing ref frames found!\n";
                                          }
                                          uint64_t v167 = (uint8_t *)&v215;
                                          uint32_t v168 = 12;
                                          goto LABEL_158;
                                        }
LABEL_105:
                                        if (v16)
                                        {
                                          buf[0] = 0;
                                          if (!CAVDAvcDecoder::decodeGetRenderTargetRef(*((void *)this + 32), v110, *(_DWORD *)(v109 + 56), *(_DWORD *)(v109 + 64), buf))
                                          {
                                            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                            {
                                              LOWORD(v215) = 0;
                                              uint64_t v165 = &_os_log_internal;
                                              int v166 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
                                              uint64_t v167 = (uint8_t *)&v215;
                                              uint32_t v168 = 2;
LABEL_158:
                                              _os_log_impl(&dword_223977000, v165, OS_LOG_TYPE_DEFAULT, v166, v167, v168);
                                            }
                                            return 0xFFFFFFFFLL;
                                          }
                                          *(void *)(v109 + 40) = buf[0] + 8;
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 272) = 0;
                                        int v117 = 4 * v107;
                                        int v214 = 4 * v107 + 272;
                                        uint64_t v118 = *((void *)this + 33) + 4 * v107;
                                        int v119 = *(_DWORD *)(v118 + 272);
                                        *(_DWORD *)(v118 + 272) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 272) ^= 0x1FFFFFFu;
                                        uint64_t v120 = *((void *)this + 33) + 4 * v107;
                                        int v121 = *(_DWORD *)(v120 + 272);
                                        *(_DWORD *)(v120 + 272) = v119;
                                        unsigned int v122 = v110;
                                        long long v123 = (char *)this + 176 * v110;
                                        if (*((void *)v123 + 70)
                                          || *((_DWORD *)this + 44 * v110 + 178)
                                          || *((_DWORD *)this + 44 * v110 + 179))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v123 + 70, v214, 0, 0xFFFFFFFFLL, 7, v121, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 336) = 0;
                                        int v124 = v117 + 336;
                                        uint64_t v125 = *((void *)this + 33) + 4 * v107;
                                        int v126 = *(_DWORD *)(v125 + 336);
                                        *(_DWORD *)(v125 + 336) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 336) ^= 0x1FFFFFFu;
                                        uint64_t v127 = *((void *)this + 33) + 4 * v107;
                                        int v128 = *(_DWORD *)(v127 + 336);
                                        *(_DWORD *)(v127 + 336) = v126;
                                        uint64_t v129 = *(void *)(v109 + 40);
                                        if (*(void *)v129 || *(_DWORD *)(v129 + 152) || *(_DWORD *)(v129 + 156))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v129, v117 + 336, *(_DWORD *)(v129 + 52), 0xFFFFFFFFLL, 7, v128, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 400) = 0;
                                        int v130 = v117 + 400;
                                        uint64_t v131 = *((void *)this + 33) + 4 * v107;
                                        int v132 = *(_DWORD *)(v131 + 400);
                                        *(_DWORD *)(v131 + 400) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 400) ^= 0x1FFFFFFu;
                                        uint64_t v133 = *((void *)this + 33) + 4 * v107;
                                        int v134 = *(_DWORD *)(v133 + 400);
                                        *(_DWORD *)(v133 + 400) = v132;
                                        uint64_t v135 = (char *)this + 176 * v122;
                                        if (*((void *)v135 + 598)
                                          || *((_DWORD *)this + 44 * v122 + 1234)
                                          || *((_DWORD *)this + 44 * v122 + 1235))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v135 + 598, v117 + 400, 0, 0xFFFFFFFFLL, 7, v134, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 464) = 0;
                                        int v136 = v117 + 464;
                                        uint64_t v137 = *((void *)this + 33) + 4 * v107;
                                        int v138 = *(_DWORD *)(v137 + 464);
                                        *(_DWORD *)(v137 + 464) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 464) ^= 0x1FFFFFFu;
                                        uint64_t v139 = *((void *)this + 33) + 4 * v107;
                                        int v140 = *(_DWORD *)(v139 + 464);
                                        *(_DWORD *)(v139 + 464) = v138;
                                        uint64_t v141 = *(void *)(v109 + 40);
                                        if (*(void *)v141 || *(_DWORD *)(v141 + 152) || *(_DWORD *)(v141 + 156))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v141, v136, *(_DWORD *)(v141 + 56), 0xFFFFFFFFLL, 7, v140, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                                        {
                                          uint64_t v142 = *((void *)this + 33) + 4 * v107;
                                          int v143 = *(_DWORD *)(v142 + 336);
                                          *(_DWORD *)(v142 + 336) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 336) ^= 0x1FFFFFFu;
                                          uint64_t v144 = *((void *)this + 33) + 4 * v107;
                                          int v145 = *(_DWORD *)(v144 + 336);
                                          *(_DWORD *)(v144 + 336) = v143;
                                          uint64_t v146 = *(void *)(v109 + 40);
                                          if (*(void *)v146 || *(_DWORD *)(v146 + 152) || *(_DWORD *)(v146 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v146, v124, *(_DWORD *)(v146 + 52), 0xFFFFFFFFLL, 7, v145, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          uint64_t v147 = *((void *)this + 33) + 4 * v107;
                                          int v148 = *(_DWORD *)(v147 + 464);
                                          *(_DWORD *)(v147 + 464) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 464) ^= 0x1FFFFFFu;
                                          uint64_t v149 = *((void *)this + 33) + 4 * v107;
                                          int v150 = *(_DWORD *)(v149 + 464);
                                          *(_DWORD *)(v149 + 464) = v148;
                                          uint64_t v151 = *(void *)(v109 + 40);
                                          if (*(void *)v151 || *(_DWORD *)(v151 + 152) || *(_DWORD *)(v151 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v151, v136, *(_DWORD *)(v151 + 56), 0xFFFFFFFFLL, 7, v150, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          uint64_t v152 = *((void *)this + 33) + 4 * v107;
                                          int v153 = *(_DWORD *)(v152 + 272);
                                          *(_DWORD *)(v152 + 272) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 272) ^= 0x1FFFFFFu;
                                          uint64_t v154 = *((void *)this + 33) + 4 * v107;
                                          int v155 = *(_DWORD *)(v154 + 272);
                                          *(_DWORD *)(v154 + 272) = v153;
                                          uint64_t v156 = *(void *)(v109 + 40);
                                          if (*(void *)v156 || *(_DWORD *)(v156 + 152) || *(_DWORD *)(v156 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v156, v214, *(_DWORD *)(v156 + 64), 0xFFFFFFFFLL, 7, v155, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          uint64_t v157 = *((void *)this + 33) + 4 * v107;
                                          int v158 = *(_DWORD *)(v157 + 400);
                                          *(_DWORD *)(v157 + 400) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 400) ^= 0x1FFFFFFu;
                                          uint64_t v159 = *((void *)this + 33) + 4 * v107;
                                          int v160 = *(_DWORD *)(v159 + 400);
                                          *(_DWORD *)(v159 + 400) = v158;
                                          uint64_t v161 = *(void *)(v109 + 40);
                                          if (*(void *)v161 || *(_DWORD *)(v161 + 152) || *(_DWORD *)(v161 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v161, v130, *(_DWORD *)(v161 + 68), 0xFFFFFFFFLL, 7, v160, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                        }
                                        ++v107;
                                      }
                                      while (v107 != v106);
                                    }
                                  }
                                  else
                                  {
                                    *(_DWORD *)(v17 + 52) |= 0x2000u;
                                    *((_DWORD *)this + v213 + 116) = 1;
                                    *(_DWORD *)(*((void *)this + 33) + 208) = 0;
                                  }
                                  *(_DWORD *)(*((void *)this + 33) + 528) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 532) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 536) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 540) = 0;
                                  if (!v212)
                                  {
LABEL_179:
                                    uint64_t v197 = *((void *)this + 32);
                                    if (*(_DWORD *)(v197 + 2360) != 1) {
                                      return 0;
                                    }
                                    uint64_t v198 = *((void *)this + 33);
                                    *(_DWORD *)(v198 + 640) = *(_DWORD *)(v198 + 640) & 0xFFFFFFFE | *(_DWORD *)(v197 + 2508) & 1;
                                    if (*(_DWORD *)(v197 + 2508))
                                    {
                                      *(_DWORD *)(v198 + 1616) = 0x10000000;
                                      *(_DWORD *)(v198 + 1620) = *(_DWORD *)(v197 + 2368);
                                      *(_DWORD *)(v198 + 1632) = 0;
                                      *(void *)(v198 + 1624) = 0;
                                      *(_OWORD *)(v198 + 1636) = *(_OWORD *)(v197 + 2372);
                                      long long v199 = *(_OWORD *)(v197 + 2404);
                                      *(_OWORD *)(v198 + 1652) = *(_OWORD *)(v197 + 2388);
                                      *(_OWORD *)(v198 + 1668) = v199;
                                    }
                                    *(_DWORD *)(*((void *)this + 33) + 640) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 640) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v197 + 2512) & 1));
                                    if (*(_DWORD *)(v197 + 2512))
                                    {
                                      *(_DWORD *)(v198 + 1684) = 0;
                                      char v200 = *(_DWORD *)(v197 + 2424);
                                      *(_DWORD *)(v198 + 1684) = (*(_DWORD *)(v197 + 2424) & 1) << 22;
                                      int v201 = ((*(_DWORD *)(v197 + 2420) & 1) << 23) | ((v200 & 1) << 22) | 0x20000000;
                                      *(_DWORD *)(v198 + 1684) = v201;
                                      *(_DWORD *)(v198 + 1684) = v201 | (*(_DWORD *)(v197 + 2364) == 0);
                                      long long v202 = *(_OWORD *)(v197 + 2428);
                                      long long v203 = *(_OWORD *)(v197 + 2444);
                                      *(_OWORD *)(v198 + 1720) = *(_OWORD *)(v197 + 2460);
                                      *(_OWORD *)(v198 + 1704) = v203;
                                      *(_OWORD *)(v198 + 1688) = v202;
                                    }
                                    *(_DWORD *)(*((void *)this + 33) + 640) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 640) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v197 + 2516) & 1));
                                    *(_DWORD *)(*((void *)this + 33) + 640) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 640) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v197 + 2520) & 1));
                                    *(_DWORD *)(*((void *)this + 33) + 640) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 640) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v197 + 2524) & 1));
                                    if (!*(_DWORD *)(v197 + 2516)) {
                                      return 0;
                                    }
                                    *(_DWORD *)(v198 + 1740) = 0;
                                    if (*(_DWORD *)(v197 + 2476) == 2) {
                                      int v204 = 805306368;
                                    }
                                    else {
                                      int v204 = 813694976;
                                    }
                                    *(_DWORD *)(v198 + 1740) = v204;
                                    memcpy((void *)(v198 + 1744), (const void *)(v197 + 2480), 4 * *(unsigned int *)(v197 + 2476));
                                    uint64_t result = 0;
                                    *(_DWORD *)(v197 + 2516) = 0;
                                    return result;
                                  }
                                  uint64_t v162 = *((void *)this + 32);
                                  int v163 = *(unsigned __int8 *)(v162 + 3004);
                                  if (*(unsigned char *)(v162 + 3004))
                                  {
                                    int v163 = *(_DWORD *)(v162 + 3016);
                                    int v164 = *(_DWORD *)(v162 + 3020);
                                  }
                                  else
                                  {
                                    int v164 = 0;
                                  }
                                  uint64_t v169 = *(void *)(v162 + 3656);
                                  int v171 = *(_DWORD *)(v169 + 52);
                                  int v170 = *(_DWORD *)(v169 + 56);
                                  int v172 = v171 + v163;
                                  BOOL v173 = __CFADD__(v171, v163);
                                  int v174 = v170 + v164;
                                  if (__CFADD__(v170, v164)) {
                                    int v175 = 2;
                                  }
                                  else {
                                    int v175 = v173;
                                  }
                                  if (v175)
                                  {
                                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                    {
                                      LODWORD(buf[0]) = 136315394;
                                      *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                      WORD2(buf[1]) = 1024;
                                      *(_DWORD *)((char *)&buf[1] + 6) = v175;
                                      uint64_t v165 = &_os_log_internal;
                                      int v166 = "AppleAVD: %s(): failKind = %d";
                                      uint64_t v167 = (uint8_t *)buf;
                                      uint32_t v168 = 18;
                                      goto LABEL_158;
                                    }
                                    return 0xFFFFFFFFLL;
                                  }
                                  uint64_t v176 = *((void *)this + 33);
                                  int v177 = *(_DWORD *)(v176 + 528);
                                  *(_DWORD *)(v176 + 528) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 528) ^= 0xFFFFFFu;
                                  uint64_t v178 = *((void *)this + 33);
                                  int v179 = *(_DWORD *)(v178 + 528);
                                  *(_DWORD *)(v178 + 528) = v177;
                                  uint64_t v180 = *(void *)(*((void *)this + 32) + 3656);
                                  if (!*(void *)v180 && !*(_DWORD *)(v180 + 152) && !*(_DWORD *)(v180 + 156)
                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v180, 528, v172, 0xFFFFFFFFLL, 8, v179, 4), !result))
                                  {
                                    uint64_t v181 = *((void *)this + 33);
                                    int v182 = *(_DWORD *)(v181 + 532);
                                    *(_DWORD *)(v181 + 532) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 532) ^= 0xFFFFFFu;
                                    uint64_t v183 = *((void *)this + 33);
                                    int v184 = *(_DWORD *)(v183 + 532);
                                    *(_DWORD *)(v183 + 532) = v182;
                                    uint64_t v185 = *(void *)(*((void *)this + 32) + 3656);
                                    if (!*(void *)v185 && !*(_DWORD *)(v185 + 152) && !*(_DWORD *)(v185 + 156)) {
                                      goto LABEL_212;
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v185, 532, v174, 0xFFFFFFFFLL, 8, v184, 4);
                                    if (!result)
                                    {
LABEL_212:
                                      uint64_t v186 = *((void *)this + 33);
                                      int v187 = *(_DWORD *)(v186 + 536);
                                      *(_DWORD *)(v186 + 536) = 0;
                                      *(_DWORD *)(*((void *)this + 33) + 536) ^= 0xC0000000;
                                      uint64_t v188 = *((void *)this + 33);
                                      int v189 = *(_DWORD *)(v188 + 536);
                                      *(_DWORD *)(v188 + 536) = v187;
                                      uint64_t v190 = *(void *)(*((void *)this + 32) + 3656);
                                      if (!*(void *)v190 && !*(_DWORD *)(v190 + 152) && !*(_DWORD *)(v190 + 156)) {
                                        goto LABEL_213;
                                      }
                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v190, 536, v172, 192, 6, v189, 4);
                                      if (!result)
                                      {
LABEL_213:
                                        uint64_t v191 = *((void *)this + 33);
                                        int v192 = *(_DWORD *)(v191 + 540);
                                        *(_DWORD *)(v191 + 540) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 540) ^= 0xC0000000;
                                        uint64_t v193 = *((void *)this + 33);
                                        int v194 = *(_DWORD *)(v193 + 540);
                                        *(_DWORD *)(v193 + 540) = v192;
                                        uint64_t v195 = *(void *)(*((void *)this + 32) + 3656);
                                        if (!*(void *)v195 && !*(_DWORD *)(v195 + 152) && !*(_DWORD *)(v195 + 156)) {
                                          goto LABEL_176;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v195, 540, v174, 192, 6, v194, 4);
                                        if (!result)
                                        {
LABEL_176:
                                          if (v209)
                                          {
                                            *(_DWORD *)(*((void *)this + 33) + 536) = *(_DWORD *)(*((void *)this + 33) + 536) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 76) >> 6) & 0xFFF));
                                            uint64_t v196 = (_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 80);
                                          }
                                          else
                                          {
                                            if (CAHDecViolaAvc::getSWRStride(this, *(unsigned __int16 *)(v208 + 84)- *(unsigned __int16 *)(v208 + 80)+ 1, *(unsigned __int8 *)(v205 + 2224 * v3 + 6), *(unsigned __int8 *)(v205 + 2224 * v3 + 7), *(_DWORD *)(v205 + 2224 * v3 + 2212)))return 0xFFFFFFFFLL; {
                                            *(_DWORD *)(*((void *)this + 33) + 536) = *(_DWORD *)(*((void *)this + 33) + 536) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 3976) >> 6) & 0xFFF));
                                            }
                                            uint64_t v196 = (_DWORD *)((char *)this + 15908);
                                          }
                                          *(_DWORD *)(*((void *)this + 33) + 540) = *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 540) & 0xFFFF8003 | (4 * ((*v196 >> 6) & 0x1FFF));
                                          goto LABEL_179;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecViolaAvc::getSWRStride(CAHDecViolaAvc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1988) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3977) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecViolaAvc::getTileStartCTU(CAHDecViolaAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 544);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecViolaAvc::getTileEndCTU(CAHDecViolaAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 544);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecViolaAvc::getTileIdxAbove(CAHDecViolaAvc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 544);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecViolaAvc::populateAvdWork(CAHDecViolaAvc *this, unsigned int a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v3 + 3312);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 7500);
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    long long v9 = (int *)(v2 + 2696);
    long long v10 = (int *)(v4 + 20);
    __int16 v21 = a2;
    uint64_t v11 = 40 * a2;
    uint64_t v12 = v2 + 948 * v5;
    while (1)
    {
      uint64_t v13 = v12 + v7;
      *(_WORD *)(v13 + 1764) = v8;
      *(_WORD *)(v13 + 1766) = 0;
      *(_WORD *)(v13 + 1768) = v8;
      *(_DWORD *)(v12 + v7 + 1770) = 0;
      int v14 = *v9;
      if (!CAVDAvcDecoder::GetSDataMemInfo(*((void *)this + 32), v8, &v23, &v22)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *v10;
      *(_DWORD *)(v13 + 1788) = *v10;
      *(_DWORD *)(v13 + 1792) = v15;
      *(_DWORD *)(v13 + 1796) = 0;
      if (v7) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = 15;
      }
      *(_WORD *)(v13 + 1774) = v16;
      uint64_t v17 = (void *)v23;
      if (*(void *)v23 || *(_DWORD *)(v23 + 152) || *(_DWORD *)(v23 + 156))
      {
        int v18 = v22;
        if (HIDWORD(v22))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            unsigned int v25 = "populateAvdWork";
            __int16 v26 = 1024;
            int v27 = 1808;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v18 = v22;
          }
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v17, (int)v7 + 570580, v18, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
      v9 += 237;
      *(_DWORD *)(v12 + v7 + 1784) = v14;
      ++v8;
      v7 += 40;
      v10 += 462;
      if (v11 == v7)
      {
        uint64_t v2 = *((void *)this + 33);
        __int16 v20 = v21;
        goto LABEL_17;
      }
    }
  }
  else
  {
    __int16 v20 = 0;
LABEL_17:
    uint64_t result = 0;
    *(_WORD *)(v2 + 28) = v20;
    *(_DWORD *)(v2 + 32) = 570560;
  }
  return result;
}

uint64_t CAHDecViolaAvc::allocWorkBuf_SPS(CAHDecViolaAvc *this, unsigned char *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v3 = a2[4];
  unsigned int v4 = *((unsigned __int16 *)a2 + 779);
  int v5 = 16 * v4;
  unsigned int v6 = *((unsigned __int16 *)a2 + 780);
  unsigned int v7 = 32 - __clz(((16 * v4 + 47) >> 5) - 1);
  if (v4 < 2) {
    LOBYTE(v7) = 0;
  }
  unsigned int v8 = 32 - __clz(((16 * v6 + 47) >> 5) - 1);
  if (v6 < 2) {
    LOBYTE(v8) = 0;
  }
  unsigned int v9 = ((32 << (v8 + v7)) + 127) & 0xFFFFFF80;
  if (a2[4])
  {
    unsigned int v10 = (v5 + 16) << (v3 == 3);
    unsigned int v11 = ((((16 * v6 + 16) | (v3 == 1)) >> (v3 == 1)) + 15) >> 4;
    if (v10 > 0x20)
    {
      unsigned int v12 = 32 - __clz(((v10 + 31) >> 5) - 1);
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  LOBYTE(v12) = 0;
LABEL_10:
  unsigned int v13 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  unsigned int v15 = ((8 << (v14 + v12)) + 127) & 0xFFFFFF80;
  if (a2[4]) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = 0;
  }
  *((_DWORD *)this + 3968) = v9;
  *((_DWORD *)this + 3969) = v16;
  *((void *)this + 1985) = 0;
  int v17 = (v4 << 6) + 64;
  *((_DWORD *)this + 3974) = v17;
  *((_DWORD *)this + 3973) = v17 + v17 * v6;
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    uint64_t v18 = 24;
    int v19 = this;
    while (1)
    {
      uint64_t v20 = *((unsigned int *)this + 3968);
      if (v20
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v19 + 35, v20, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_35;
        }
        int v27 = 136315650;
        uint64_t v28 = "allocWorkBuf_SPS";
        __int16 v29 = 1024;
        int v30 = 2046;
        __int16 v31 = 2080;
        int v32 = "HdrY";
        __int16 v26 = &_os_log_internal;
        goto LABEL_34;
      }
      uint64_t v21 = *((unsigned int *)this + 3969);
      if (v21)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v19 + 299, v21, 7, 1, 0)) {
          break;
        }
      }
      int v19 = (CAHDecViolaAvc *)((char *)v19 + 176);
      if (!--v18) {
        goto LABEL_23;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v27 = 136315650;
    uint64_t v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2047;
    __int16 v31 = 2080;
    int v32 = "HdrC";
    __int16 v26 = &_os_log_internal;
    goto LABEL_34;
  }
LABEL_23:
  unint64_t v22 = (_OWORD *)((char *)this + 10416);
  uint64_t v23 = 24;
  while (1)
  {
    uint64_t v24 = *((unsigned int *)this + 3973);
    if (v24)
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), v22, v24, 7, 1, 0)) {
        break;
      }
    }
    v22 += 11;
    if (!--v23)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 3978) = 0;
      *((_DWORD *)this + 3979) = v5 | (v6 << 20) | 0xF000F;
      return result;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 136315650;
    uint64_t v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2053;
    __int16 v31 = 2080;
    int v32 = "MvColo";
    __int16 v26 = &_os_log_internal;
LABEL_34:
    _os_log_impl(&dword_223977000, v26, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v27, 0x1Cu);
  }
LABEL_35:
  (*(void (**)(CAHDecViolaAvc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecViolaAvc::allocWorkBuf_PPS(CAHDecViolaAvc *this, unsigned char *a2, void *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = 16 * *((unsigned __int16 *)a2 + 779);
  if (((a2[6] + 9) & 0x1FEu) <= ((a2[7] + 9) & 0x1FEu)) {
    int v6 = (a2[7] + 9) & 0x1FE;
  }
  else {
    int v6 = (a2[6] + 9) & 0x1FE;
  }
  int v7 = a2[4];
  if (v7 == 3) {
    int v8 = 48;
  }
  else {
    int v8 = 32;
  }
  if (v7 == 3) {
    int v9 = 192;
  }
  else {
    int v9 = 128;
  }
  if (a2[4]) {
    int v10 = v8;
  }
  else {
    int v10 = 16;
  }
  if (a2[4]) {
    int v11 = v9;
  }
  else {
    int v11 = 64;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 915, 4 * (((unint64_t)(v5 + 16) >> 2) + ((unint64_t)(v5 + 16) >> 4)), 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_20:
      (*(void (**)(CAHDecViolaAvc *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2170;
    __int16 v21 = 2080;
    unint64_t v22 = "AvpAboveInfo";
    unsigned int v12 = &_os_log_internal;
LABEL_19:
    _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v17, 0x1Cu);
    goto LABEL_20;
  }
  unsigned int v14 = (v5 + 31) >> 4;
  uint64_t v15 = ((v6 * v10) >> 3) * v14;
  if (v15 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 926, v15, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2173;
    __int16 v21 = 2080;
    unint64_t v22 = "IpAbove";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t v16 = ((v6 * v11) >> 3) * v14;
  if (v16 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 937, v16, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2174;
    __int16 v21 = 2080;
    unint64_t v22 = "LfAbovePix";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 948, 32 * v14, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2175;
    __int16 v21 = 2080;
    unint64_t v22 = "LfAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 640, 32 * v14, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2178;
    __int16 v21 = 2080;
    unint64_t v22 = "MvAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  return result;
}

uint64_t CAHDecViolaAvc::freeWorkBuf_SPS(CAHDecViolaAvc *this)
{
  uint64_t v2 = 24;
  int v3 = (uint64_t *)this;
  do
  {
    uint64_t result = *((void *)this + 32);
    if (!*(_DWORD *)(result + 2648))
    {
      if (v3[70])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(result, v3 + 70);
        v3[70] = 0;
      }
      if (v3[598])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 598);
        v3[598] = 0;
      }
    }
    if (v3[1302])
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 1302);
      v3[1302] = 0;
    }
    v3 += 22;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t *CAHDecViolaAvc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[1830])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1830);
    v2[1830] = 0;
  }
  if (v2[1852])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1852);
    v2[1852] = 0;
  }
  if (v2[1280])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1280);
    v2[1280] = 0;
  }
  if (v2[1874])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1874);
    v2[1874] = 0;
  }
  if (v2[1896])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1896);
    v2[1896] = 0;
  }
  if (v2[1918])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1918);
    v2[1918] = 0;
  }
  if (v2[1940])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1940);
    v2[1940] = 0;
  }
  if (v2[1962])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1962);
    v2[1962] = 0;
  }
  return this;
}

uint64_t CAHDecViolaAvc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 9008;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 15888) = a2;
  return this;
}

uint64_t CAHDecViolaAvc::decodeBuffer(CAHDecViolaAvc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecViolaAvc::decodeBufferSize(CAHDecViolaAvc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecViolaAvc::decHdrYLinAddr(CAHDecViolaAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 70);
}

uint64_t CAHDecViolaAvc::decHdrCLinAddr(CAHDecViolaAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 598);
}

uint64_t CAHDecViolaAvc::decHdrYSize(CAHDecViolaAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 151);
}

uint64_t CAHDecViolaAvc::decHdrCSize(CAHDecViolaAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 1207);
}

uint64_t CAHDecViolaAvc::decHdrYStride(CAHDecViolaAvc *this)
{
  return *((unsigned int *)this + 3970);
}

uint64_t CAHDecViolaAvc::decHdrCStride(CAHDecViolaAvc *this)
{
  return *((unsigned int *)this + 3971);
}

uint64_t createLilyDAvcDecoder(void *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "createLilyDAvcDecoder";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): LilyD AVD is not supported in this AppleAVD driver!!!", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

uint64_t createLilyDHevcDecoder(void *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "createLilyDHevcDecoder";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): LilyD AVD is not supported in this AppleAVD driver!!!", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

uint64_t createLilyDLghDecoder(void *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "createLilyDLghDecoder";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): LilyD AVD is not supported in this AppleAVD driver!!!", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

CAHDecDaisyAvx *createDaisyAvxDecoder(void **a1)
{
  int v2 = (CAHDecDaisyAvx *)operator new(0x1740uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecDaisyAvx::CAHDecDaisyAvx(v2, a1);
  }
  return v3;
}

void sub_223A4B860(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecDaisyAvx::CAHDecDaisyAvx(CAHDecDaisyAvx *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D741B58;
  *(_DWORD *)(v1 + 456) = 198228;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecDaisyAvx::CAHDecDaisyAvx(CAHDecDaisyAvx *this, void **a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D741B58;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 198228;
  *(_DWORD *)(v4 + 8) = 1548;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 3;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 198228, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315394;
      unint64_t v22 = "CAHDecDaisyAvx";
      __int16 v23 = 1024;
      int v24 = 0;
      uint64_t v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  uint64_t v8 = *((void *)this + 35);
  *((_DWORD *)this + 13) = 0;
  *((void *)this + 33) = v8;
  *((void *)this + 34) = v8;
  bzero(a2 + 384, 0x1340uLL);
  bzero(a2[1000], 0x1500uLL);
  bzero((char *)this + 464, 0x1550uLL);
  bzero(a2 + 1001, 0x1E18uLL);
  uint64_t v9 = 0;
  *((void *)this + 740) = 0;
  *((_OWORD *)this + 371) = 0u;
  uint64_t v10 = 9168;
  *((_DWORD *)this + 1485) = 9168;
  uint64_t v11 = *((void *)this + 32);
LABEL_5:
  if (CAVDDecoder::allocAVDMem(v11, (_OWORD *)(v11 + v9 + 10304), v10, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315650;
      unint64_t v22 = "CAHDecDaisyAvx";
      __int16 v23 = 1024;
      int v24 = 168;
      __int16 v25 = 2080;
      __int16 v26 = "probs_Buf";
      uint64_t v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v11 = *((void *)this + 32);
  while (1)
  {
    uint64_t v12 = *(void *)(v11 + v9 + 10304);
    if (v12) {
      *(void *)(v11 + v9 + 10296) = v12;
    }
    if (v9 == 2208) {
      break;
    }
    uint64_t v10 = *((unsigned int *)this + 1485);
    v9 += 184;
    if (*((_DWORD *)this + 1485)) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = *(void *)(v11 + 42392);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (void *)(v13 + 1960);
    do
    {
      *uint64_t v15 = v11 + 10296 + v14;
      v14 += 184;
      v15 += 254;
    }
    while (v14 != 2392);
  }
  uint64_t v16 = 0;
  for (uint64_t i = 12696; ; i += 184)
  {
    uint64_t v18 = *((unsigned int *)this + 1485);
    uint64_t v19 = *((void *)this + 32);
    if (v18) {
      break;
    }
LABEL_19:
    uint64_t v20 = *(void *)(v19 + i);
    if (v20) {
      *(void *)(v19 + i - 8) = v20;
    }
    if (*(void *)(v19 + 15952)) {
      AV1_Syntax::Set_Default_Frame_Context_Info(*(void *)(v19 + 15952), (uint64_t *)(v19 + i - 8), v16);
    }
    if (++v16 == 4) {
      return;
    }
  }
  if (!CAVDDecoder::allocAVDMem(v19, (_OWORD *)(v19 + i), v18, 7, 1, 0))
  {
    uint64_t v19 = *((void *)this + 32);
    goto LABEL_19;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 136315650;
    unint64_t v22 = "CAHDecDaisyAvx";
    __int16 v23 = 1024;
    int v24 = 183;
    __int16 v25 = 2080;
    __int16 v26 = "probs_Buf";
    uint64_t v5 = &_os_log_internal;
    int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_29:
    uint32_t v7 = 28;
LABEL_30:
    _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v21, v7);
  }
LABEL_31:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_223A4BC48(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecDaisyAvx::~CAHDecDaisyAvx(CAHDecDaisyAvx *this)
{
  uint64_t v2 = 0;
  *(void *)this = &unk_26D741B58;
  uint64_t v3 = *((void *)this + 32);
  do
  {
    if (*(void *)(v3 + v2 + 10304))
    {
      CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + v2 + 10304));
      uint64_t v3 = *((void *)this + 32);
      *(_OWORD *)(v3 + v2 + 10296) = 0u;
    }
    v2 += 184;
  }
  while (v2 != 2392);
  for (uint64_t i = 0; i != 736; i += 184)
  {
    if (*(void *)(v3 + i + 12696))
    {
      CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 12696));
      uint64_t v3 = *((void *)this + 32);
      *(_OWORD *)(v3 + i + 12688) = 0u;
    }
  }
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(v3, (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecDaisyAvx::~CAHDecDaisyAvx(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecDaisyAvx::startPicture(CAHDecDaisyAvx *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  uint64_t v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x30654uLL);
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    uint64_t v6 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v6 + 16) = a2;
    *(_WORD *)(v6 + 24) = 257;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecDaisyAvx::DecodePicture(CAHDecDaisyAvx *this, uint64_t a2)
{
  if (CAHDecDaisyAvx::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecDaisyAvx *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecDaisyAvx *))(*(void *)this + 48))(this);
  if ((*(unsigned int (**)(CAHDecDaisyAvx *))(*(void *)this + 56))(this)
    || CAHDecDaisyAvx::populateAddressRegisters(this))
  {
    return 4;
  }
  CAHDecDaisyAvx::populateDecryptionRegisters(this);
  CAHDecDaisyAvx::populateTiles(this);
  CAHDecDaisyAvx::populateAvxVPDependency((CAVDAvxDecoder **)this);
  (*(void (**)(CAHDecDaisyAvx *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecDaisyAvx *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecDaisyAvx::populateAddressRegisters(CAHDecDaisyAvx *this)
{
  uint64_t v2 = 0;
  uint64_t v336 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 264;
  uint64_t v4 = (char *)this + 464;
  do
  {
    *(_DWORD *)(*(void *)v3 + v2 + 468) = 0;
    uint64_t v5 = *(void *)v3 + v2;
    int v6 = *(_DWORD *)(v5 + 468);
    *(_DWORD *)(v5 + 468) = 0;
    *(_DWORD *)(*(void *)v3 + v2 + 468) ^= 0xFFFFFF00;
    uint64_t v7 = *(void *)v3 + v2;
    int v8 = *(_DWORD *)(v7 + 468);
    *(_DWORD *)(v7 + 468) = v6;
    if (*(void *)v4 || *((_DWORD *)v4 + 38) || *((_DWORD *)v4 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v4, (int)v2 + 468, 0, 0xFFFFFFFFLL, 8, v8, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v3 + v2 + 528) = 0;
    uint64_t v10 = *(void *)v3 + v2;
    int v11 = *(_DWORD *)(v10 + 528);
    *(_DWORD *)(v10 + 528) = 0;
    *(_DWORD *)(*(void *)v3 + v2 + 528) ^= 0x3FFu;
    uint64_t v12 = *(void *)v3 + v2;
    int v13 = *(_DWORD *)(v12 + 528);
    *(_DWORD *)(v12 + 528) = v11;
    if (*(void *)v4 || *((_DWORD *)v4 + 38) || *((_DWORD *)v4 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v4, (int)v2 + 528, 0, 0x3FFFFFFFFFFLL, 32, v13, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v2 + 588) = 0;
    *(_DWORD *)(*((void *)this + 33) + v2 + 588) = *(_DWORD *)(*((void *)this + 33) + v2 + 588) & 0x800001FF | (((*((_DWORD *)this + 1484) >> 9) & 0x3FFFFF) << 9);
    v2 += 4;
    v4 += 176;
  }
  while (v2 != 60);
  uint64_t v14 = *((void *)this + 32);
  uint64_t v15 = *(void *)(*(void *)(v14 + 15944) + 79288);
  uint64_t v16 = *(void *)(*(void *)(*(void *)(v14 + 42424) + 1920) + 1960);
  *(_DWORD *)(*((void *)this + 33) + 648) = 0;
  uint64_t v17 = *((void *)this + 33);
  int v18 = *(_DWORD *)(v17 + 648);
  *(_DWORD *)(v17 + 648) = 0;
  *(_DWORD *)(*((void *)this + 33) + 648) ^= 0xFFFFFF00;
  uint64_t v19 = *((void *)this + 33);
  int v20 = *(_DWORD *)(v19 + 648);
  *(_DWORD *)(v19 + 648) = v18;
  if (!*(void *)(v16 + 8) && !*(_DWORD *)(v16 + 160) && !*(_DWORD *)(v16 + 164)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v16 + 8), 648, 0, 0xFFFFFFFFLL, 8, v20, 4),
        !result))
  {
    if ((*(_DWORD *)(*(void *)v3 + 652) = 0,
          int v21 = *(_DWORD *)(*(void *)v3 + 652),
          *(_DWORD *)(*(void *)v3 + 652) = 0,
          *(_DWORD *)(*(void *)v3 + 652) ^= 0x3FFu,
          int v22 = *(_DWORD *)(*(void *)v3 + 652),
          *(_DWORD *)(*(void *)v3 + 652) = v21,
          !*(void *)(v16 + 8))
      && !*(_DWORD *)(v16 + 160)
      && !*(_DWORD *)(v16 + 164)
      || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v16 + 8), 652, 0, 0x3FFFFFFFFFFLL, 32, v22, 4),
          !result))
    {
      if ((*(_DWORD *)(*(void *)v3 + 656) = 0,
            int v23 = *(_DWORD *)(*(void *)v3 + 656),
            *(_DWORD *)(*(void *)v3 + 656) = 0,
            *(_DWORD *)(*(void *)v3 + 656) ^= 0xFFFFFF00,
            int v24 = *(_DWORD *)(*(void *)v3 + 656),
            *(_DWORD *)(*(void *)v3 + 656) = v23,
            !*(void *)(v15 + 8))
        && !*(_DWORD *)(v15 + 160)
        && !*(_DWORD *)(v15 + 164)
        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v15 + 8), 656, 0, 0xFFFFFFFFLL, 8, v24, 4),
            !result))
      {
        if ((*(_DWORD *)(*(void *)v3 + 660) = 0,
              int v25 = *(_DWORD *)(*(void *)v3 + 660),
              *(_DWORD *)(*(void *)v3 + 660) = 0,
              *(_DWORD *)(*(void *)v3 + 660) ^= 0x3FFu,
              int v26 = *(_DWORD *)(*(void *)v3 + 660),
              *(_DWORD *)(*(void *)v3 + 660) = v25,
              !*(void *)(v15 + 8))
          && !*(_DWORD *)(v15 + 160)
          && !*(_DWORD *)(v15 + 164)
          || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v15 + 8), 660, 0, 0x3FFFFFFFFFFLL, 32, v26, 4),
              !result))
        {
          uint64_t v27 = 0;
          uint64_t v28 = (char *)this + 3104;
          do
          {
            *(_DWORD *)(*(void *)v3 + v27 + 664) = 0;
            uint64_t v29 = *(void *)v3 + v27;
            int v30 = *(_DWORD *)(v29 + 664);
            *(_DWORD *)(v29 + 664) = 0;
            *(_DWORD *)(*(void *)v3 + v27 + 664) ^= 0xFFFFFF00;
            uint64_t v31 = *(void *)v3 + v27;
            int v32 = *(_DWORD *)(v31 + 664);
            *(_DWORD *)(v31 + 664) = v30;
            if (*(void *)v28 || *((_DWORD *)v28 + 38) || *((_DWORD *)v28 + 39))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v28, (int)v27 + 664, 0, 0xFFFFFFFFLL, 8, v32, 4);
              if (result) {
                return result;
              }
            }
            *(_DWORD *)(*(void *)v3 + v27 + 676) = 0;
            uint64_t v33 = *(void *)v3 + v27;
            int v34 = *(_DWORD *)(v33 + 676);
            *(_DWORD *)(v33 + 676) = 0;
            *(_DWORD *)(*(void *)v3 + v27 + 676) ^= 0x3FFu;
            uint64_t v35 = *(void *)v3 + v27;
            int v36 = *(_DWORD *)(v35 + 676);
            *(_DWORD *)(v35 + 676) = v34;
            if (*(void *)v28 || *((_DWORD *)v28 + 38) || *((_DWORD *)v28 + 39))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v28, (int)v27 + 676, 0, 0x3FFFFFFFFFFLL, 32, v36, 4);
              if (result) {
                return result;
              }
            }
            v27 += 4;
            v28 += 176;
          }
          while (v27 != 12);
          *(_DWORD *)(*((void *)this + 33) + 688) = 0;
          *(_DWORD *)(*((void *)this + 33) + 692) = 0;
          if (!*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312)) {
            goto LABEL_348;
          }
          uint64_t v37 = *((void *)this + 33);
          int v38 = *(_DWORD *)(v37 + 688);
          *(_DWORD *)(v37 + 688) = 0;
          *(_DWORD *)(*((void *)this + 33) + 688) ^= 0xFFFFFF00;
          uint64_t v39 = *((void *)this + 33);
          int v40 = *(_DWORD *)(v39 + 688);
          *(_DWORD *)(v39 + 688) = v38;
          uint64_t v41 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312);
          if (!*(void *)(v41 + 8) && !*(_DWORD *)(v41 + 160) && !*(_DWORD *)(v41 + 164)) {
            goto LABEL_349;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v41 + 8), 688, 0, 0xFFFFFFFFLL, 8, v40, 4);
          if (!result)
          {
LABEL_349:
            uint64_t v42 = *((void *)this + 33);
            int v43 = *(_DWORD *)(v42 + 692);
            *(_DWORD *)(v42 + 692) = 0;
            *(_DWORD *)(*((void *)this + 33) + 692) ^= 0x3FFu;
            uint64_t v44 = *((void *)this + 33);
            int v45 = *(_DWORD *)(v44 + 692);
            *(_DWORD *)(v44 + 692) = v43;
            uint64_t v46 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312);
            if (!*(void *)(v46 + 8) && !*(_DWORD *)(v46 + 160) && !*(_DWORD *)(v46 + 164)) {
              goto LABEL_348;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v46 + 8), 692, 0, 0x3FFFFFFFFFFLL, 32, v45, 4);
            if (!result)
            {
LABEL_348:
              *(_DWORD *)(*((void *)this + 33) + 696) = 0;
              *(_DWORD *)(*((void *)this + 33) + 700) = 0;
              if (!*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304)) {
                goto LABEL_350;
              }
              uint64_t v47 = *((void *)this + 33);
              int v48 = *(_DWORD *)(v47 + 696);
              *(_DWORD *)(v47 + 696) = 0;
              *(_DWORD *)(*((void *)this + 33) + 696) ^= 0xFFFFFF00;
              uint64_t v49 = *((void *)this + 33);
              int v50 = *(_DWORD *)(v49 + 696);
              *(_DWORD *)(v49 + 696) = v48;
              uint64_t v51 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304);
              if (!*(void *)(v51 + 8) && !*(_DWORD *)(v51 + 160) && !*(_DWORD *)(v51 + 164)) {
                goto LABEL_351;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v51 + 8), 696, 0, 0xFFFFFFFFLL, 8, v50, 4);
              if (!result)
              {
LABEL_351:
                uint64_t v52 = *((void *)this + 33);
                int v53 = *(_DWORD *)(v52 + 700);
                *(_DWORD *)(v52 + 700) = 0;
                *(_DWORD *)(*((void *)this + 33) + 700) ^= 0x3FFu;
                uint64_t v54 = *((void *)this + 33);
                int v55 = *(_DWORD *)(v54 + 700);
                *(_DWORD *)(v54 + 700) = v53;
                uint64_t v56 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304);
                if (!*(void *)(v56 + 8) && !*(_DWORD *)(v56 + 160) && !*(_DWORD *)(v56 + 164)) {
                  goto LABEL_350;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v56 + 8), 700, 0, 0x3FFFFFFFFFFLL, 32, v55, 4);
                if (!result)
                {
LABEL_350:
                  *(_DWORD *)(*((void *)this + 33) + 704) = 0;
                  uint64_t v57 = *((void *)this + 33);
                  int v58 = *(_DWORD *)(v57 + 704);
                  *(_DWORD *)(v57 + 704) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 704) ^= 0xFFFFFF00;
                  uint64_t v59 = *((void *)this + 33);
                  int v60 = *(_DWORD *)(v59 + 704);
                  *(_DWORD *)(v59 + 704) = v58;
                  uint64_t v61 = *(void *)(*(void *)(*((void *)this + 32) + 42424) + 1920);
                  if (!*(void *)(v61 + 136) && !*(_DWORD *)(v61 + 288) && !*(_DWORD *)(v61 + 292)) {
                    goto LABEL_352;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v61 + 136), 704, 0, 0xFFFFFFFFLL, 8, v60, 4);
                  if (!result)
                  {
LABEL_352:
                    *(_DWORD *)(*((void *)this + 33) + 708) = 0;
                    uint64_t v62 = *((void *)this + 33);
                    int v63 = *(_DWORD *)(v62 + 708);
                    *(_DWORD *)(v62 + 708) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 708) ^= 0x3FFu;
                    uint64_t v64 = *((void *)this + 33);
                    int v65 = *(_DWORD *)(v64 + 708);
                    *(_DWORD *)(v64 + 708) = v63;
                    uint64_t v66 = *(void *)(*(void *)(*((void *)this + 32) + 42424) + 1920);
                    if (!*(void *)(v66 + 136) && !*(_DWORD *)(v66 + 288) && !*(_DWORD *)(v66 + 292)) {
                      goto LABEL_353;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v66 + 136), 708, 0, 0x3FFFFFFFFFFLL, 32, v65, 4);
                    if (!result)
                    {
LABEL_353:
                      *(_DWORD *)(*((void *)this + 33) + 712) = 0;
                      uint64_t v67 = *((void *)this + 33);
                      int v68 = *(_DWORD *)(v67 + 712);
                      *(_DWORD *)(v67 + 712) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 712) ^= 0xFFFFFF00;
                      uint64_t v69 = *((void *)this + 33);
                      int v70 = *(_DWORD *)(v69 + 712);
                      *(_DWORD *)(v69 + 712) = v68;
                      uint64_t v71 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78568);
                      if (!*v71
                        && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78720)
                        && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78724))
                      {
                        goto LABEL_354;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v71, 712, 0, 0xFFFFFFFFLL, 8, v70, 4);
                      if (!result)
                      {
LABEL_354:
                        *(_DWORD *)(*((void *)this + 33) + 716) = 0;
                        uint64_t v72 = *((void *)this + 33);
                        int v73 = *(_DWORD *)(v72 + 716);
                        *(_DWORD *)(v72 + 716) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 716) ^= 0x3FFu;
                        uint64_t v74 = *((void *)this + 33);
                        int v75 = *(_DWORD *)(v74 + 716);
                        *(_DWORD *)(v74 + 716) = v73;
                        uint64_t v76 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78568);
                        if (!*v76
                          && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78720)
                          && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78724))
                        {
                          goto LABEL_355;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v76, 716, 0, 0x3FFFFFFFFFFLL, 32, v75, 4);
                        if (!result)
                        {
LABEL_355:
                          *(_DWORD *)(*((void *)this + 33) + 720) = 0;
                          uint64_t v77 = *((void *)this + 33);
                          int v78 = *(_DWORD *)(v77 + 720);
                          *(_DWORD *)(v77 + 720) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 720) ^= 0xFFFFFF00;
                          uint64_t v79 = *((void *)this + 33);
                          int v80 = *(_DWORD *)(v79 + 720);
                          *(_DWORD *)(v79 + 720) = v78;
                          uint64_t v81 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78792);
                          if (!*v81
                            && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78944)
                            && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78948))
                          {
                            goto LABEL_356;
                          }
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v81, 720, 0, 0xFFFFFFFFLL, 8, v80, 4);
                          if (!result)
                          {
LABEL_356:
                            *(_DWORD *)(*((void *)this + 33) + 724) = 0;
                            uint64_t v82 = *((void *)this + 33);
                            int v83 = *(_DWORD *)(v82 + 724);
                            *(_DWORD *)(v82 + 724) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 724) ^= 0x3FFu;
                            uint64_t v84 = *((void *)this + 33);
                            int v85 = *(_DWORD *)(v84 + 724);
                            *(_DWORD *)(v84 + 724) = v83;
                            uint64_t v86 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78792);
                            if (!*v86
                              && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78944)
                              && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78948))
                            {
                              goto LABEL_357;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v86, 724, 0, 0x3FFFFFFFFFFLL, 32, v85, 4);
                            if (!result)
                            {
LABEL_357:
                              *(_DWORD *)(*((void *)this + 33) + 728) = 0;
                              uint64_t v87 = *((void *)this + 33);
                              int v88 = *(_DWORD *)(v87 + 728);
                              *(_DWORD *)(v87 + 728) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 728) ^= 0xFFFFFF00;
                              uint64_t v89 = *((void *)this + 33);
                              int v90 = *(_DWORD *)(v89 + 728);
                              *(_DWORD *)(v89 + 728) = v88;
                              int v91 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 79016);
                              if (!*v91
                                && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79168)
                                && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79172))
                              {
                                goto LABEL_358;
                              }
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v91, 728, 0, 0xFFFFFFFFLL, 8, v90, 4);
                              if (!result)
                              {
LABEL_358:
                                *(_DWORD *)(*((void *)this + 33) + 732) = 0;
                                uint64_t v92 = *((void *)this + 33);
                                int v93 = *(_DWORD *)(v92 + 732);
                                *(_DWORD *)(v92 + 732) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 732) ^= 0x3FFu;
                                uint64_t v94 = *((void *)this + 33);
                                int v95 = *(_DWORD *)(v94 + 732);
                                *(_DWORD *)(v94 + 732) = v93;
                                uint64_t v96 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 79016);
                                if (!*v96
                                  && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79168)
                                  && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79172))
                                {
                                  goto LABEL_88;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v96, 732, 0, 0x3FFFFFFFFFFLL, 32, v95, 4);
                                if (!result)
                                {
LABEL_88:
                                  *(_DWORD *)(*((void *)this + 33) + 736) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 740) = 0;
                                  uint64_t v97 = *((void *)this + 32);
                                  if (!*(unsigned char *)(v97 + 2652)) {
                                    goto LABEL_347;
                                  }
                                  uint64_t v98 = *(void *)(v97 + 2680);
                                  long long v334 = 0u;
                                  long long v335 = 0u;
                                  memset(v333, 0, sizeof(v333));
                                  uint64_t v99 = *(void *)v3;
                                  int v100 = (*(_DWORD *)(*(void *)v3 + 16) & 0xF) << 9;
                                  *(void *)&v333[0] = v98;
                                  int v101 = *(_DWORD *)(v99 + 736);
                                  *(_DWORD *)(v99 + 736) = 0;
                                  *(_DWORD *)(*(void *)v3 + 736) ^= 0xFFFFFF00;
                                  int v102 = *(_DWORD *)(*(void *)v3 + 736);
                                  *(_DWORD *)(*(void *)v3 + 736) = v101;
                                  if (v98)
                                  {
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v333, 736, v100, 0xFFFFFFFFLL, 8, v102, 4);
                                    if (result) {
                                      return result;
                                    }
                                    uint64_t v103 = *(void *)&v333[0];
                                    int v104 = DWORD2(v334);
                                    LODWORD(v98) = HIDWORD(v334);
                                  }
                                  else
                                  {
                                    int v104 = 0;
                                    uint64_t v103 = 0;
                                  }
                                  if ((*(_DWORD *)(*(void *)v3 + 740) = 0,
                                        int v105 = *(_DWORD *)(*(void *)v3 + 740),
                                        *(_DWORD *)(*(void *)v3 + 740) = 0,
                                        *(_DWORD *)(*(void *)v3 + 740) ^= 0x3FFu,
                                        int v106 = *(_DWORD *)(*(void *)v3 + 740),
                                        *(_DWORD *)(*(void *)v3 + 740) = v105,
                                        !v103)
                                    && !v104
                                    && !v98
                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v333, 740, v100, 0x3FFFFFFFFFFLL, 32, v106, 4), !result))
                                  {
LABEL_347:
                                    *(_DWORD *)(*((void *)this + 33) + 744) = 0;
                                    uint64_t v107 = *((void *)this + 33);
                                    int v108 = *(_DWORD *)(v107 + 744);
                                    *(_DWORD *)(v107 + 744) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 744) ^= 0xFFFFFF00;
                                    uint64_t v109 = *((void *)this + 33);
                                    int v110 = *(_DWORD *)(v109 + 744);
                                    *(_DWORD *)(v109 + 744) = v108;
                                    if (!*((void *)this + 454)
                                      && !*((_DWORD *)this + 946)
                                      && !*((_DWORD *)this + 947))
                                    {
                                      goto LABEL_335;
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 744, 0, 0xFFFFFFFFLL, 8, v110, 4);
                                    if (!result)
                                    {
LABEL_335:
                                      if ((*(_DWORD *)(*(void *)v3 + 748) = 0,
                                            int v111 = *(_DWORD *)(*(void *)v3 + 748),
                                            *(_DWORD *)(*(void *)v3 + 748) = 0,
                                            *(_DWORD *)(*(void *)v3 + 748) ^= 0x3FFu,
                                            int v112 = *(_DWORD *)(*(void *)v3 + 748),
                                            *(_DWORD *)(*(void *)v3 + 748) = v111,
                                            !*((void *)this + 454))
                                        && !*((_DWORD *)this + 946)
                                        && !*((_DWORD *)this + 947)
                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 748, 0, 0x3FFFFFFFFFFLL, 32, v112, 4), !result))
                                      {
                                        *(_DWORD *)(*((void *)this + 33) + 752) = 0;
                                        uint64_t v113 = *((void *)this + 33);
                                        int v114 = *(_DWORD *)(v113 + 752);
                                        *(_DWORD *)(v113 + 752) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 752) ^= 0xFFFFFF00;
                                        uint64_t v115 = *((void *)this + 33);
                                        int v116 = *(_DWORD *)(v115 + 752);
                                        *(_DWORD *)(v115 + 752) = v114;
                                        if (!*((void *)this + 476)
                                          && !*((_DWORD *)this + 990)
                                          && !*((_DWORD *)this + 991))
                                        {
                                          goto LABEL_336;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 752, 0, 0xFFFFFFFFLL, 8, v116, 4);
                                        if (!result)
                                        {
LABEL_336:
                                          if ((*(_DWORD *)(*(void *)v3 + 756) = 0,
                                                int v117 = *(_DWORD *)(*(void *)v3 + 756),
                                                *(_DWORD *)(*(void *)v3 + 756) = 0,
                                                *(_DWORD *)(*(void *)v3 + 756) ^= 0x3FFu,
                                                int v118 = *(_DWORD *)(*(void *)v3 + 756),
                                                *(_DWORD *)(*(void *)v3 + 756) = v117,
                                                !*((void *)this + 476))
                                            && !*((_DWORD *)this + 990)
                                            && !*((_DWORD *)this + 991)
                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 756, 0, 0x3FFFFFFFFFFLL, 32, v118, 4), !result))
                                          {
                                            *(_DWORD *)(*((void *)this + 33) + 760) = 0;
                                            uint64_t v119 = *((void *)this + 33);
                                            int v120 = *(_DWORD *)(v119 + 760);
                                            *(_DWORD *)(v119 + 760) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 760) ^= 0xFFFFFF00;
                                            uint64_t v121 = *((void *)this + 33);
                                            int v122 = *(_DWORD *)(v121 + 760);
                                            *(_DWORD *)(v121 + 760) = v120;
                                            if (!*((void *)this + 498)
                                              && !*((_DWORD *)this + 1034)
                                              && !*((_DWORD *)this + 1035))
                                            {
                                              goto LABEL_337;
                                            }
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 760, 0, 0xFFFFFFFFLL, 8, v122, 4);
                                            if (!result)
                                            {
LABEL_337:
                                              if ((*(_DWORD *)(*(void *)v3 + 764) = 0,
                                                    int v123 = *(_DWORD *)(*(void *)v3 + 764),
                                                    *(_DWORD *)(*(void *)v3 + 764) = 0,
                                                    *(_DWORD *)(*(void *)v3 + 764) ^= 0x3FFu,
                                                    int v124 = *(_DWORD *)(*(void *)v3 + 764),
                                                    *(_DWORD *)(*(void *)v3 + 764) = v123,
                                                    !*((void *)this + 498))
                                                && !*((_DWORD *)this + 1034)
                                                && !*((_DWORD *)this + 1035)
                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 764, 0, 0x3FFFFFFFFFFLL, 32, v124, 4), !result))
                                              {
                                                *(_DWORD *)(*((void *)this + 33) + 768) = 0;
                                                uint64_t v125 = *((void *)this + 33);
                                                int v126 = *(_DWORD *)(v125 + 768);
                                                *(_DWORD *)(v125 + 768) = 0;
                                                *(_DWORD *)(*((void *)this + 33) + 768) ^= 0xFFFFFF00;
                                                uint64_t v127 = *((void *)this + 33);
                                                int v128 = *(_DWORD *)(v127 + 768);
                                                *(_DWORD *)(v127 + 768) = v126;
                                                if (!*((void *)this + 520)
                                                  && !*((_DWORD *)this + 1078)
                                                  && !*((_DWORD *)this + 1079))
                                                {
                                                  goto LABEL_338;
                                                }
                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 520, 768, 0, 0xFFFFFFFFLL, 8, v128, 4);
                                                if (!result)
                                                {
LABEL_338:
                                                  if ((*(_DWORD *)(*(void *)v3 + 772) = 0,
                                                        int v129 = *(_DWORD *)(*(void *)v3 + 772),
                                                        *(_DWORD *)(*(void *)v3 + 772) = 0,
                                                        *(_DWORD *)(*(void *)v3 + 772) ^= 0x3FFu,
                                                        int v130 = *(_DWORD *)(*(void *)v3 + 772),
                                                        *(_DWORD *)(*(void *)v3 + 772) = v129,
                                                        !*((void *)this + 520))
                                                    && !*((_DWORD *)this + 1078)
                                                    && !*((_DWORD *)this + 1079)
                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 520, 772, 0, 0x3FFFFFFFFFFLL, 32, v130, 4), !result))
                                                  {
                                                    *(_DWORD *)(*((void *)this + 33) + 776) = 0;
                                                    uint64_t v131 = *((void *)this + 33);
                                                    int v132 = *(_DWORD *)(v131 + 776);
                                                    *(_DWORD *)(v131 + 776) = 0;
                                                    *(_DWORD *)(*((void *)this + 33) + 776) ^= 0xFFFFFF00;
                                                    uint64_t v133 = *((void *)this + 33);
                                                    int v134 = *(_DWORD *)(v133 + 776);
                                                    *(_DWORD *)(v133 + 776) = v132;
                                                    if (!*((void *)this + 542)
                                                      && !*((_DWORD *)this + 1122)
                                                      && !*((_DWORD *)this + 1123))
                                                    {
                                                      goto LABEL_339;
                                                    }
                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 542, 776, 0, 0xFFFFFFFFLL, 8, v134, 4);
                                                    if (!result)
                                                    {
LABEL_339:
                                                      if ((*(_DWORD *)(*(void *)v3 + 780) = 0,
                                                            int v135 = *(_DWORD *)(*(void *)v3 + 780),
                                                            *(_DWORD *)(*(void *)v3 + 780) = 0,
                                                            *(_DWORD *)(*(void *)v3 + 780) ^= 0x3FFu,
                                                            int v136 = *(_DWORD *)(*(void *)v3 + 780),
                                                            *(_DWORD *)(*(void *)v3 + 780) = v135,
                                                            !*((void *)this + 542))
                                                        && !*((_DWORD *)this + 1122)
                                                        && !*((_DWORD *)this + 1123)
                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 542, 780, 0, 0x3FFFFFFFFFFLL, 32, v136, 4), !result))
                                                      {
                                                        *(_DWORD *)(*((void *)this + 33) + 784) = 0;
                                                        uint64_t v137 = *((void *)this + 33);
                                                        int v138 = *(_DWORD *)(v137 + 784);
                                                        *(_DWORD *)(v137 + 784) = 0;
                                                        *(_DWORD *)(*((void *)this + 33) + 784) ^= 0xFFFFFF00;
                                                        uint64_t v139 = *((void *)this + 33);
                                                        int v140 = *(_DWORD *)(v139 + 784);
                                                        *(_DWORD *)(v139 + 784) = v138;
                                                        if (!*((void *)this + 564)
                                                          && !*((_DWORD *)this + 1166)
                                                          && !*((_DWORD *)this + 1167))
                                                        {
                                                          goto LABEL_340;
                                                        }
                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 564, 784, 0, 0xFFFFFFFFLL, 8, v140, 4);
                                                        if (!result)
                                                        {
LABEL_340:
                                                          if ((*(_DWORD *)(*(void *)v3 + 788) = 0,
                                                                int v141 = *(_DWORD *)(*(void *)v3 + 788),
                                                                *(_DWORD *)(*(void *)v3 + 788) = 0,
                                                                *(_DWORD *)(*(void *)v3 + 788) ^= 0x3FFu,
                                                                int v142 = *(_DWORD *)(*(void *)v3 + 788),
                                                                *(_DWORD *)(*(void *)v3 + 788) = v141,
                                                                !*((void *)this + 564))
                                                            && !*((_DWORD *)this + 1166)
                                                            && !*((_DWORD *)this + 1167)
                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 564, 788, 0, 0x3FFFFFFFFFFLL, 32, v142, 4), !result))
                                                          {
                                                            *(_DWORD *)(*((void *)this + 33) + 792) = 0;
                                                            uint64_t v143 = *((void *)this + 33);
                                                            int v144 = *(_DWORD *)(v143 + 792);
                                                            *(_DWORD *)(v143 + 792) = 0;
                                                            *(_DWORD *)(*((void *)this + 33) + 792) ^= 0xFFFFFF00;
                                                            uint64_t v145 = *((void *)this + 33);
                                                            int v146 = *(_DWORD *)(v145 + 792);
                                                            *(_DWORD *)(v145 + 792) = v144;
                                                            if (!*((void *)this + 586)
                                                              && !*((_DWORD *)this + 1210)
                                                              && !*((_DWORD *)this + 1211))
                                                            {
                                                              goto LABEL_341;
                                                            }
                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 586, 792, 0, 0xFFFFFFFFLL, 8, v146, 4);
                                                            if (!result)
                                                            {
LABEL_341:
                                                              if ((*(_DWORD *)(*(void *)v3 + 796) = 0,
                                                                    int v147 = *(_DWORD *)(*(void *)v3 + 796),
                                                                    *(_DWORD *)(*(void *)v3 + 796) = 0,
                                                                    *(_DWORD *)(*(void *)v3 + 796) ^= 0x3FFu,
                                                                    int v148 = *(_DWORD *)(*(void *)v3 + 796),
                                                                    *(_DWORD *)(*(void *)v3 + 796) = v147,
                                                                    !*((void *)this + 586))
                                                                && !*((_DWORD *)this + 1210)
                                                                && !*((_DWORD *)this + 1211)
                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 586, 796, 0, 0x3FFFFFFFFFFLL, 32, v148, 4), !result))
                                                              {
                                                                *(_DWORD *)(*((void *)this + 33) + 800) = 0;
                                                                uint64_t v149 = *((void *)this + 33);
                                                                int v150 = *(_DWORD *)(v149 + 800);
                                                                *(_DWORD *)(v149 + 800) = 0;
                                                                *(_DWORD *)(*((void *)this + 33) + 800) ^= 0xFFFFFF00;
                                                                uint64_t v151 = *((void *)this + 33);
                                                                int v152 = *(_DWORD *)(v151 + 800);
                                                                *(_DWORD *)(v151 + 800) = v150;
                                                                if (!*((void *)this + 608)
                                                                  && !*((_DWORD *)this + 1254)
                                                                  && !*((_DWORD *)this + 1255))
                                                                {
                                                                  goto LABEL_342;
                                                                }
                                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 608, 800, 0, 0xFFFFFFFFLL, 8, v152, 4);
                                                                if (!result)
                                                                {
LABEL_342:
                                                                  if ((*(_DWORD *)(*(void *)v3 + 804) = 0,
                                                                        int v153 = *(_DWORD *)(*(void *)v3 + 804),
                                                                        *(_DWORD *)(*(void *)v3 + 804) = 0,
                                                                        *(_DWORD *)(*(void *)v3 + 804) ^= 0x3FFu,
                                                                        int v154 = *(_DWORD *)(*(void *)v3 + 804),
                                                                        *(_DWORD *)(*(void *)v3 + 804) = v153,
                                                                        !*((void *)this + 608))
                                                                    && !*((_DWORD *)this + 1254)
                                                                    && !*((_DWORD *)this + 1255)
                                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 608, 804, 0, 0x3FFFFFFFFFFLL, 32, v154, 4), !result))
                                                                  {
                                                                    *(_DWORD *)(*((void *)this + 33) + 808) = 0;
                                                                    uint64_t v155 = *((void *)this + 33);
                                                                    int v156 = *(_DWORD *)(v155 + 808);
                                                                    *(_DWORD *)(v155 + 808) = 0;
                                                                    *(_DWORD *)(*((void *)this + 33) + 808) ^= 0xFFFFFF00;
                                                                    uint64_t v157 = *((void *)this + 33);
                                                                    int v158 = *(_DWORD *)(v157 + 808);
                                                                    *(_DWORD *)(v157 + 808) = v156;
                                                                    if (!*((void *)this + 630)
                                                                      && !*((_DWORD *)this + 1298)
                                                                      && !*((_DWORD *)this + 1299))
                                                                    {
                                                                      goto LABEL_343;
                                                                    }
                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 630, 808, 0, 0xFFFFFFFFLL, 8, v158, 4);
                                                                    if (!result)
                                                                    {
LABEL_343:
                                                                      if ((*(_DWORD *)(*(void *)v3 + 812) = 0,
                                                                            int v159 = *(_DWORD *)(*(void *)v3 + 812),
                                                                            *(_DWORD *)(*(void *)v3 + 812) = 0,
                                                                            *(_DWORD *)(*(void *)v3 + 812) ^= 0x3FFu,
                                                                            int v160 = *(_DWORD *)(*(void *)v3 + 812),
                                                                            *(_DWORD *)(*(void *)v3 + 812) = v159,
                                                                            !*((void *)this + 630))
                                                                        && !*((_DWORD *)this + 1298)
                                                                        && !*((_DWORD *)this + 1299)
                                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 630, 812, 0, 0x3FFFFFFFFFFLL, 32, v160, 4), !result))
                                                                      {
                                                                        *(_DWORD *)(*((void *)this + 33) + 816) = 0;
                                                                        uint64_t v161 = *((void *)this + 33);
                                                                        int v162 = *(_DWORD *)(v161 + 816);
                                                                        *(_DWORD *)(v161 + 816) = 0;
                                                                        *(_DWORD *)(*((void *)this + 33) + 816) ^= 0xFFFFFF00;
                                                                        uint64_t v163 = *((void *)this + 33);
                                                                        int v164 = *(_DWORD *)(v163 + 816);
                                                                        *(_DWORD *)(v163 + 816) = v162;
                                                                        if (!*((void *)this + 696)
                                                                          && !*((_DWORD *)this + 1430)
                                                                          && !*((_DWORD *)this + 1431))
                                                                        {
                                                                          goto LABEL_344;
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 696, 816, 0, 0xFFFFFFFFLL, 8, v164, 4);
                                                                        if (!result)
                                                                        {
LABEL_344:
                                                                          if ((*(_DWORD *)(*(void *)v3 + 820) = 0,
                                                                                int v165 = *(_DWORD *)(*(void *)v3 + 820),
                                                                                *(_DWORD *)(*(void *)v3 + 820) = 0,
                                                                                *(_DWORD *)(*(void *)v3 + 820) ^= 0x3FFu,
                                                                                int v166 = *(_DWORD *)(*(void *)v3 + 820),
                                                                                *(_DWORD *)(*(void *)v3 + 820) = v165,
                                                                                !*((void *)this + 696))
                                                                            && !*((_DWORD *)this + 1430)
                                                                            && !*((_DWORD *)this + 1431)
                                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 696, 820, 0, 0x3FFFFFFFFFFLL, 32, v166, 4), !result))
                                                                          {
                                                                            int v167 = *(_DWORD *)(*((void *)this + 32)
                                                                                             + 42676);
                                                                            *(_DWORD *)(*((void *)this + 33) + 824) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 828) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 832) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 836) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 840) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 844) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 848) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 852) = 0;
                                                                            uint64_t v168 = *((void *)this + 33);
                                                                            int v169 = *(_DWORD *)(v168 + 832);
                                                                            *(_DWORD *)(v168 + 832) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 832) ^= 0xFFFFFF80;
                                                                            uint64_t v170 = *((void *)this + 33);
                                                                            int v171 = *(_DWORD *)(v170 + 832);
                                                                            *(_DWORD *)(v170 + 832) = v169;
                                                                            uint64_t v172 = *(void *)(*(void *)(*((void *)this + 32) + 8000)
                                                                                             + 384 * v167
                                                                                             + 8);
                                                                            if (!*(void *)v172
                                                                              && !*(_DWORD *)(v172 + 152)
                                                                              && !*(_DWORD *)(v172 + 156))
                                                                            {
                                                                              goto LABEL_345;
                                                                            }
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v172, 832, *(_DWORD *)(v172 + 52), 0xFFFFFFFFLL, 7, v171, 4);
                                                                            if (!result)
                                                                            {
LABEL_345:
                                                                              uint64_t v173 = *((void *)this + 33);
                                                                              int v174 = *(_DWORD *)(v173 + 836);
                                                                              *(_DWORD *)(v173 + 836) = 0;
                                                                              *(_DWORD *)(*((void *)this + 33) + 836) ^= 0x3FFu;
                                                                              uint64_t v175 = *((void *)this + 33);
                                                                              int v176 = *(_DWORD *)(v175 + 836);
                                                                              *(_DWORD *)(v175 + 836) = v174;
                                                                              uint64_t v177 = *(void *)(*(void *)(*((void *)this + 32) + 8000)
                                                                                               + 384 * v167
                                                                                               + 8);
                                                                              if (!*(void *)v177
                                                                                && !*(_DWORD *)(v177 + 152)
                                                                                && !*(_DWORD *)(v177 + 156))
                                                                              {
                                                                                goto LABEL_346;
                                                                              }
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v177, 836, *(_DWORD *)(v177 + 52), 0x3FFFFFFFFFFLL, 32, v176, 4);
                                                                              if (!result)
                                                                              {
LABEL_346:
                                                                                uint64_t v178 = *((void *)this + 33);
                                                                                int v179 = *(_DWORD *)(v178 + 848);
                                                                                *(_DWORD *)(v178 + 848) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 848) ^= 0xFFFFFF80;
                                                                                uint64_t v180 = *((void *)this + 33);
                                                                                int v181 = *(_DWORD *)(v180 + 848);
                                                                                *(_DWORD *)(v180 + 848) = v179;
                                                                                uint64_t v182 = *(void *)(*(void *)(*((void *)this + 32) + 8000)
                                                                                                 + 384 * v167
                                                                                                 + 8);
                                                                                if (!*(void *)v182
                                                                                  && !*(_DWORD *)(v182 + 152)
                                                                                  && !*(_DWORD *)(v182 + 156))
                                                                                {
                                                                                  goto LABEL_189;
                                                                                }
                                                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v182, 848, *(_DWORD *)(v182 + 56), 0xFFFFFFFFLL, 7, v181, 4);
                                                                                if (!result)
                                                                                {
LABEL_189:
                                                                                  uint64_t v183 = *((void *)this + 33);
                                                                                  int v184 = *(_DWORD *)(v183 + 852);
                                                                                  *(_DWORD *)(v183 + 852) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 852) ^= 0x3FFu;
                                                                                  uint64_t v185 = *((void *)this + 33);
                                                                                  int v186 = *(_DWORD *)(v185 + 852);
                                                                                  *(_DWORD *)(v185 + 852) = v184;
                                                                                  uint64_t v187 = *((void *)this + 32);
                                                                                  uint64_t v188 = *(void *)(*(void *)(v187 + 8000) + 384 * v167 + 8);
                                                                                  if (*(void *)v188
                                                                                    || *(_DWORD *)(v188 + 152)
                                                                                    || *(_DWORD *)(v188 + 156))
                                                                                  {
                                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v188, 852, *(_DWORD *)(v188 + 56), 0x3FFFFFFFFFFLL, 32, v186, 4);
                                                                                    if (result) {
                                                                                      return result;
                                                                                    }
                                                                                    uint64_t v187 = *((void *)this + 32);
                                                                                  }
                                                                                  int v189 = *(_DWORD *)(v187 + 2648);
                                                                                  uint64_t v190 = *((void *)this + 33);
                                                                                  int v191 = *(_DWORD *)(v190 + 824);
                                                                                  *(_DWORD *)(v190 + 824) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 824) ^= 0xFFFFFF80;
                                                                                  uint64_t v192 = *((void *)this + 33);
                                                                                  int v193 = *(_DWORD *)(v192 + 824);
                                                                                  *(_DWORD *)(v192 + 824) = v191;
                                                                                  uint64_t v194 = *((void *)this + 32);
                                                                                  if (v189 == 1)
                                                                                  {
                                                                                    uint64_t v195 = *(void *)(*(void *)(v194 + 8000) + 384 * v167 + 8);
                                                                                    if (*(void *)v195
                                                                                      || *(_DWORD *)(v195 + 152)
                                                                                      || *(_DWORD *)(v195 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v195, 824, *(_DWORD *)(v195 + 64), 0xFFFFFFFFLL, 7, v193, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v196 = *((void *)this + 33);
                                                                                    int v197 = *(_DWORD *)(v196 + 828);
                                                                                    *(_DWORD *)(v196 + 828) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 828) ^= 0x3FFu;
                                                                                    uint64_t v198 = *((void *)this + 33);
                                                                                    int v199 = *(_DWORD *)(v198 + 828);
                                                                                    *(_DWORD *)(v198 + 828) = v197;
                                                                                    uint64_t v200 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v167 + 8);
                                                                                    if (*(void *)v200
                                                                                      || *(_DWORD *)(v200 + 152)
                                                                                      || *(_DWORD *)(v200 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v200, 828, *(_DWORD *)(v200 + 64), 0x3FFFFFFFFFFLL, 32, v199, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v201 = *((void *)this + 33);
                                                                                    int v202 = *(_DWORD *)(v201 + 840);
                                                                                    *(_DWORD *)(v201 + 840) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 840) ^= 0xFFFFFF80;
                                                                                    uint64_t v203 = *((void *)this + 33);
                                                                                    int v204 = *(_DWORD *)(v203 + 840);
                                                                                    *(_DWORD *)(v203 + 840) = v202;
                                                                                    uint64_t v205 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v167 + 8);
                                                                                    if (*(void *)v205
                                                                                      || *(_DWORD *)(v205 + 152)
                                                                                      || *(_DWORD *)(v205 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v205, 840, *(_DWORD *)(v205 + 68), 0xFFFFFFFFLL, 7, v204, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v206 = *((void *)this + 33);
                                                                                    int v207 = *(_DWORD *)(v206 + 844);
                                                                                    *(_DWORD *)(v206 + 844) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 844) ^= 0x3FFu;
                                                                                    uint64_t v208 = *((void *)this + 33);
                                                                                    int v209 = *(_DWORD *)(v208 + 844);
                                                                                    *(_DWORD *)(v208 + 844) = v207;
                                                                                    uint64_t v210 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v167 + 8);
                                                                                    if (!*(void *)v210
                                                                                      && !*(_DWORD *)(v210 + 152)
                                                                                      && !*(_DWORD *)(v210 + 156))
                                                                                    {
                                                                                      goto LABEL_224;
                                                                                    }
                                                                                    int v211 = *(_DWORD *)(v210 + 68);
                                                                                    int v212 = this;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    uint64_t v213 = v194 + 176 * v167;
                                                                                    if (*(void *)(v213 + 3072)
                                                                                      || *(_DWORD *)(v194 + 176 * v167 + 3224)
                                                                                      || *(_DWORD *)(v194 + 176 * v167 + 3228))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v213 + 3072), 824, 0, 0xFFFFFFFFLL, 7, v193, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v214 = *((void *)this + 33);
                                                                                    int v215 = *(_DWORD *)(v214 + 828);
                                                                                    *(_DWORD *)(v214 + 828) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 828) ^= 0x3FFu;
                                                                                    uint64_t v216 = *((void *)this + 33);
                                                                                    int v217 = *(_DWORD *)(v216 + 828);
                                                                                    *(_DWORD *)(v216 + 828) = v215;
                                                                                    uint64_t v218 = *((void *)this + 32);
                                                                                    uint64_t v219 = v218 + 176 * v167;
                                                                                    if (*(void *)(v219 + 3072)
                                                                                      || *(_DWORD *)(v218 + 176 * v167 + 3224)
                                                                                      || *(_DWORD *)(v218 + 176 * v167 + 3228))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v219 + 3072), 828, 0, 0x3FFFFFFFFFFLL, 32, v217, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v220 = *((void *)this + 33);
                                                                                    int v221 = *(_DWORD *)(v220 + 840);
                                                                                    *(_DWORD *)(v220 + 840) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 840) ^= 0xFFFFFF80;
                                                                                    uint64_t v222 = *((void *)this + 33);
                                                                                    int v223 = *(_DWORD *)(v222 + 840);
                                                                                    *(_DWORD *)(v222 + 840) = v221;
                                                                                    uint64_t v224 = *((void *)this + 32);
                                                                                    uint64_t v225 = v224 + 176 * v167;
                                                                                    if (*(void *)(v225 + 5536)
                                                                                      || *(_DWORD *)(v224 + 176 * v167 + 5688)
                                                                                      || *(_DWORD *)(v224 + 176 * v167 + 5692))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v225 + 5536), 840, 0, 0xFFFFFFFFLL, 7, v223, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v226 = *((void *)this + 33);
                                                                                    int v227 = *(_DWORD *)(v226 + 844);
                                                                                    *(_DWORD *)(v226 + 844) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 844) ^= 0x3FFu;
                                                                                    uint64_t v228 = *((void *)this + 33);
                                                                                    int v209 = *(_DWORD *)(v228 + 844);
                                                                                    *(_DWORD *)(v228 + 844) = v227;
                                                                                    uint64_t v229 = *((void *)this + 32);
                                                                                    uint64_t v230 = v229 + 176 * v167;
                                                                                    if (!*(void *)(v230 + 5536)
                                                                                      && !*(_DWORD *)(v229 + 176 * v167 + 5688)
                                                                                      && !*(_DWORD *)(v229 + 176 * v167 + 5692))
                                                                                    {
                                                                                      goto LABEL_224;
                                                                                    }
                                                                                    uint64_t v210 = v230 + 5536;
                                                                                    int v212 = this;
                                                                                    int v211 = 0;
                                                                                  }
                                                                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)v212, (void *)v210, 844, v211, 0x3FFFFFFFFFFLL, 32, v209, 4);
                                                                                  if (result) {
                                                                                    return result;
                                                                                  }
LABEL_224:
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 856) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 860) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 864) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 868) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 872) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 876) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 880) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 884) = 0;
                                                                                  if (*(_DWORD *)(*((void *)this + 32)
                                                                                                 + 2644))
                                                                                  {
                                                                                    uint64_t v231 = *((void *)this + 33);
                                                                                    int v232 = *(_DWORD *)(v231 + 856);
                                                                                    *(_DWORD *)(v231 + 856) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 856) ^= 0xFFFFFF00;
                                                                                    uint64_t v233 = *((void *)this + 33);
                                                                                    int v234 = *(_DWORD *)(v233 + 856);
                                                                                    *(_DWORD *)(v233 + 856) = v232;
                                                                                    if (*((void *)this + 674)
                                                                                      || *((_DWORD *)this + 1386)
                                                                                      || *((_DWORD *)this + 1387))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 674, 856, 0, 0xFFFFFFFFLL, 8, v234, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    int v235 = *(_DWORD *)(*(void *)v3 + 860);
                                                                                    *(_DWORD *)(*(void *)v3 + 860) = 0;
                                                                                    *(_DWORD *)(*(void *)v3 + 860) ^= 0x3FFu;
                                                                                    int v236 = *(_DWORD *)(*(void *)v3 + 860);
                                                                                    *(_DWORD *)(*(void *)v3 + 860) = v235;
                                                                                    if (*((void *)this + 674)
                                                                                      || *((_DWORD *)this + 1386)
                                                                                      || *((_DWORD *)this + 1387))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 674, 860, 0, 0x3FFFFFFFFFFLL, 32, v236, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v237 = *((void *)this + 32);
                                                                                    int v238 = *(unsigned __int8 *)(v237 + 3004);
                                                                                    if (*(unsigned char *)(v237 + 3004))
                                                                                    {
                                                                                      int v238 = *(_DWORD *)(v237 + 3016);
                                                                                      int v239 = *(_DWORD *)(v237 + 3020);
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int v239 = 0;
                                                                                    }
                                                                                    uint64_t v240 = *(void *)(v237 + 42696);
                                                                                    int v241 = *(_DWORD *)(v240 + 56);
                                                                                    int v242 = *(_DWORD *)(v240 + 52) + v238;
                                                                                    uint64_t v243 = *((void *)this + 33);
                                                                                    int v244 = *(_DWORD *)(v243 + 864);
                                                                                    *(_DWORD *)(v243 + 864) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 864) ^= 0xFFFFFFC0;
                                                                                    uint64_t v245 = *((void *)this + 33);
                                                                                    int v246 = *(_DWORD *)(v245 + 864);
                                                                                    *(_DWORD *)(v245 + 864) = v244;
                                                                                    uint64_t v247 = *(void *)(*((void *)this + 32) + 42696);
                                                                                    if (*(void *)v247
                                                                                      || *(_DWORD *)(v247 + 152)
                                                                                      || *(_DWORD *)(v247 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v247, 864, v242, 0xFFFFFFFFLL, 6, v246, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v248 = *((void *)this + 33);
                                                                                    int v249 = *(_DWORD *)(v248 + 868);
                                                                                    *(_DWORD *)(v248 + 868) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 868) ^= 0x3FFu;
                                                                                    uint64_t v250 = *((void *)this + 33);
                                                                                    int v251 = *(_DWORD *)(v250 + 868);
                                                                                    *(_DWORD *)(v250 + 868) = v249;
                                                                                    uint64_t v252 = *(void *)(*((void *)this + 32) + 42696);
                                                                                    if (*(void *)v252
                                                                                      || *(_DWORD *)(v252 + 152)
                                                                                      || *(_DWORD *)(v252 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v252, 868, v242, 0x3FFFFFFFFFFLL, 32, v251, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v253 = *((void *)this + 33);
                                                                                    int v254 = *(_DWORD *)(v253 + 876);
                                                                                    *(_DWORD *)(v253 + 876) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 876) ^= 0xFFFFFFC0;
                                                                                    uint64_t v255 = *((void *)this + 33);
                                                                                    int v256 = *(_DWORD *)(v255 + 876);
                                                                                    *(_DWORD *)(v255 + 876) = v254;
                                                                                    uint64_t v257 = *(void *)(*((void *)this + 32) + 42696);
                                                                                    if (*(void *)v257
                                                                                      || *(_DWORD *)(v257 + 152)
                                                                                      || *(_DWORD *)(v257 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v257, 876, v241 + v239, 0xFFFFFFFFLL, 6, v256, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v258 = *((void *)this + 33);
                                                                                    int v259 = *(_DWORD *)(v258 + 880);
                                                                                    *(_DWORD *)(v258 + 880) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 880) ^= 0x3FFu;
                                                                                    uint64_t v260 = *((void *)this + 33);
                                                                                    int v261 = *(_DWORD *)(v260 + 880);
                                                                                    *(_DWORD *)(v260 + 880) = v259;
                                                                                    uint64_t v262 = *((void *)this + 32);
                                                                                    uint64_t v263 = *(void *)(v262 + 42696);
                                                                                    if (*(void *)v263
                                                                                      || *(_DWORD *)(v263 + 152)
                                                                                      || *(_DWORD *)(v263 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v263, 880, v241 + v239, 0x3FFFFFFFFFFLL, 32, v261, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                      uint64_t v262 = *((void *)this + 32);
                                                                                    }
                                                                                    uint64_t v264 = *(void *)v3;
                                                                                    unsigned int v265 = *(_DWORD *)(*(void *)v3 + 872) & 0xFFFC003F;
                                                                                    if (*(unsigned char *)(v262 + 8))
                                                                                    {
                                                                                      *(_DWORD *)(v264 + 872) = v265 | *(_DWORD *)(*(void *)(v262 + 42696) + 76) & 0x3FFC0;
                                                                                      long long v266 = (_DWORD *)(*(void *)(*((void *)this + 32) + 42696) + 80);
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      *(_DWORD *)(v264 + 872) = v265 | *(_DWORD *)(*(void *)(v262 + 15944) + 78508) & 0x3FFC0;
                                                                                      long long v266 = (_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78512);
                                                                                    }
                                                                                    *(_DWORD *)(*(void *)v3 + 884) = *(_DWORD *)(*(void *)v3 + 884) & 0xFFF8003F | (((*v266 >> 6) & 0x1FFF) << 6);
                                                                                  }
                                                                                  uint64_t v267 = *((void *)this + 32);
                                                                                  if (*(unsigned char *)(*(void *)(v267 + 15944)
                                                                                                + 128)
                                                                                    && !*(unsigned char *)(*(void *)(v267 + 42424)
                                                                                                 + 1956))
                                                                                  {
                                                                                    return 0;
                                                                                  }
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 888) = 0;
                                                                                  uint64_t v268 = *((void *)this + 33);
                                                                                  int v269 = *(_DWORD *)(v268 + 888);
                                                                                  *(_DWORD *)(v268 + 888) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 888) ^= 0xFFFFFF00;
                                                                                  uint64_t v270 = *((void *)this + 33);
                                                                                  int v271 = *(_DWORD *)(v270 + 888);
                                                                                  *(_DWORD *)(v270 + 888) = v269;
                                                                                  if (*((void *)this + 718)
                                                                                    || *((_DWORD *)this + 1474)
                                                                                    || *((_DWORD *)this + 1475))
                                                                                  {
                                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 718, 888, 0, 0xFFFFFFFFLL, 8, v271, 4);
                                                                                    if (result) {
                                                                                      return result;
                                                                                    }
                                                                                  }
                                                                                  *(_DWORD *)(*(void *)v3 + 892) = 0;
                                                                                  int v272 = *(_DWORD *)(*(void *)v3 + 892);
                                                                                  *(_DWORD *)(*(void *)v3 + 892) = 0;
                                                                                  *(_DWORD *)(*(void *)v3 + 892) ^= 0x3FFu;
                                                                                  int v273 = *(_DWORD *)(*(void *)v3 + 892);
                                                                                  *(_DWORD *)(*(void *)v3 + 892) = v272;
                                                                                  if (*((void *)this + 718)
                                                                                    || *((_DWORD *)this + 1474)
                                                                                    || *((_DWORD *)this + 1475))
                                                                                  {
                                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 718, 892, 0, 0x3FFFFFFFFFFLL, 32, v273, 4);
                                                                                    if (result) {
                                                                                      return result;
                                                                                    }
                                                                                  }
                                                                                  if (*(unsigned char *)(*(void *)(*((void *)this + 32) + 15944)
                                                                                                + 128))
                                                                                    return 0;
                                                                                  uint64_t v274 = 0;
                                                                                  uint64_t v275 = 0;
                                                                                  do
                                                                                  {
                                                                                    uint64_t v276 = *(void *)(*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79224) + v275);
                                                                                    if (!v276
                                                                                      || (uint64_t v277 = *(void *)(v276 + 2016)) == 0)
                                                                                    {
                                                                                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                                      {
                                                                                        LODWORD(v333[0]) = 136315138;
                                                                                        *(void *)((char *)v333 + 4) = "populateAddressRegisters";
                                                                                        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Unexpected. av1_fb->buffer is 0x0!", (uint8_t *)v333, 0xCu);
                                                                                      }
                                                                                      return 0xFFFFFFFFLL;
                                                                                    }
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v274
                                                                                              + 896) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v274
                                                                                              + 924) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v274
                                                                                              + 952) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v274
                                                                                              + 980) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v274
                                                                                              + 1008) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v274
                                                                                              + 1036) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v274
                                                                                              + 1064) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v274
                                                                                              + 1092) = 0;
                                                                                    uint64_t v278 = *(void *)v3 + v274;
                                                                                    int v279 = *(_DWORD *)(v278 + 952);
                                                                                    *(_DWORD *)(v278 + 952) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v274
                                                                                              + 952) ^= 0xFFFFFF80;
                                                                                    uint64_t v280 = *(void *)v3 + v274;
                                                                                    int v281 = *(_DWORD *)(v280 + 952);
                                                                                    *(_DWORD *)(v280 + 952) = v279;
                                                                                    uint64_t v282 = *(void *)(v277 + 8);
                                                                                    if (*(void *)v282
                                                                                      || *(_DWORD *)(v282 + 152)
                                                                                      || *(_DWORD *)(v282 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v282, (int)v274 + 952, *(_DWORD *)(v282 + 52), 0xFFFFFFFFLL, 7, v281, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v283 = *(void *)v3 + v274;
                                                                                    int v284 = *(_DWORD *)(v283 + 980);
                                                                                    *(_DWORD *)(v283 + 980) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v274
                                                                                              + 980) ^= 0x3FFu;
                                                                                    uint64_t v285 = *(void *)v3 + v274;
                                                                                    int v286 = *(_DWORD *)(v285 + 980);
                                                                                    *(_DWORD *)(v285 + 980) = v284;
                                                                                    uint64_t v287 = *(void *)(v277 + 8);
                                                                                    if (*(void *)v287
                                                                                      || *(_DWORD *)(v287 + 152)
                                                                                      || *(_DWORD *)(v287 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v287, (int)v274 + 980, *(_DWORD *)(v287 + 52), 0x3FFFFFFFFFFLL, 32, v286, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v288 = *(void *)v3 + v274;
                                                                                    int v289 = *(_DWORD *)(v288 + 1064);
                                                                                    *(_DWORD *)(v288 + 1064) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v274
                                                                                              + 1064) ^= 0xFFFFFF80;
                                                                                    uint64_t v290 = *(void *)v3 + v274;
                                                                                    int v291 = *(_DWORD *)(v290 + 1064);
                                                                                    *(_DWORD *)(v290 + 1064) = v289;
                                                                                    uint64_t v292 = *(void *)(v277 + 8);
                                                                                    if (*(void *)v292
                                                                                      || *(_DWORD *)(v292 + 152)
                                                                                      || *(_DWORD *)(v292 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v292, (int)v274 + 1064, *(_DWORD *)(v292 + 56), 0xFFFFFFFFLL, 7, v291, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    uint64_t v293 = *(void *)v3 + v274;
                                                                                    int v294 = *(_DWORD *)(v293 + 1092);
                                                                                    *(_DWORD *)(v293 + 1092) = 0;
                                                                                    *(_DWORD *)(*(void *)v3
                                                                                              + v274
                                                                                              + 1092) ^= 0x3FFu;
                                                                                    uint64_t v295 = *(void *)v3 + v274;
                                                                                    int v296 = *(_DWORD *)(v295 + 1092);
                                                                                    *(_DWORD *)(v295 + 1092) = v294;
                                                                                    uint64_t v297 = *(void *)(v277 + 8);
                                                                                    if (*(void *)v297
                                                                                      || *(_DWORD *)(v297 + 152)
                                                                                      || *(_DWORD *)(v297 + 156))
                                                                                    {
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v297, (int)v274 + 1092, *(_DWORD *)(v297 + 56), 0x3FFFFFFFFFFLL, 32, v296, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
                                                                                    }
                                                                                    int v298 = *(_DWORD *)(*((void *)this + 32) + 2648);
                                                                                    uint64_t v299 = *((void *)this + 33) + v274;
                                                                                    int v300 = *(_DWORD *)(v299 + 896);
                                                                                    *(_DWORD *)(v299 + 896) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + v274
                                                                                              + 896) ^= 0xFFFFFF80;
                                                                                    uint64_t v301 = *((void *)this + 33) + v274;
                                                                                    int v302 = *(_DWORD *)(v301 + 896);
                                                                                    *(_DWORD *)(v301 + 896) = v300;
                                                                                    if (v298 == 1)
                                                                                    {
                                                                                      uint64_t v303 = *(void *)(v277 + 8);
                                                                                      if (*(void *)v303
                                                                                        || *(_DWORD *)(v303 + 152)
                                                                                        || *(_DWORD *)(v303 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v303, (int)v274 + 896, *(_DWORD *)(v303 + 64), 0xFFFFFFFFLL, 7, v302, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      uint64_t v304 = *(void *)v3 + v274;
                                                                                      int v305 = *(_DWORD *)(v304 + 924);
                                                                                      *(_DWORD *)(v304 + 924) = 0;
                                                                                      *(_DWORD *)(*(void *)v3
                                                                                                + v274
                                                                                                + 924) ^= 0x3FFu;
                                                                                      uint64_t v306 = *(void *)v3 + v274;
                                                                                      int v307 = *(_DWORD *)(v306 + 924);
                                                                                      *(_DWORD *)(v306 + 924) = v305;
                                                                                      uint64_t v308 = *(void *)(v277 + 8);
                                                                                      if (*(void *)v308
                                                                                        || *(_DWORD *)(v308 + 152)
                                                                                        || *(_DWORD *)(v308 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v308, (int)v274 + 924, *(_DWORD *)(v308 + 64), 0x3FFFFFFFFFFLL, 32, v307, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      uint64_t v309 = *(void *)v3 + v274;
                                                                                      int v310 = *(_DWORD *)(v309 + 1008);
                                                                                      *(_DWORD *)(v309 + 1008) = 0;
                                                                                      *(_DWORD *)(*(void *)v3
                                                                                                + v274
                                                                                                + 1008) ^= 0xFFFFFF80;
                                                                                      uint64_t v311 = *(void *)v3 + v274;
                                                                                      int v312 = *(_DWORD *)(v311 + 1008);
                                                                                      *(_DWORD *)(v311 + 1008) = v310;
                                                                                      uint64_t v313 = *(void *)(v277 + 8);
                                                                                      if (*(void *)v313
                                                                                        || *(_DWORD *)(v313 + 152)
                                                                                        || *(_DWORD *)(v313 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v313, (int)v274 + 1008, *(_DWORD *)(v313 + 68), 0xFFFFFFFFLL, 7, v312, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      uint64_t v314 = *(void *)v3 + v274;
                                                                                      int v315 = *(_DWORD *)(v314 + 1036);
                                                                                      *(_DWORD *)(v314 + 1036) = 0;
                                                                                      *(_DWORD *)(*(void *)v3
                                                                                                + v274
                                                                                                + 1036) ^= 0x3FFu;
                                                                                      uint64_t v316 = *(void *)v3 + v274;
                                                                                      int v317 = *(_DWORD *)(v316 + 1036);
                                                                                      *(_DWORD *)(v316 + 1036) = v315;
                                                                                      uint64_t v318 = *(void *)(v277 + 8);
                                                                                      if (*(void *)v318
                                                                                        || *(_DWORD *)(v318 + 152)
                                                                                        || *(_DWORD *)(v318 + 156))
                                                                                      {
                                                                                        int v319 = *(_DWORD *)(v318 + 68);
                                                                                        int v320 = v274 + 1036;
                                                                                        uint64_t v321 = this;
                                                                                        goto LABEL_327;
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      if (*(void *)(v277 + 24)
                                                                                        || *(_DWORD *)(v277 + 176)
                                                                                        || *(_DWORD *)(v277 + 180))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v277 + 24), (int)v274 + 896, 0, 0xFFFFFFFFLL, 7, v302, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      uint64_t v322 = *(void *)v3 + v274;
                                                                                      int v323 = *(_DWORD *)(v322 + 924);
                                                                                      *(_DWORD *)(v322 + 924) = 0;
                                                                                      *(_DWORD *)(*(void *)v3
                                                                                                + v274
                                                                                                + 924) ^= 0x3FFu;
                                                                                      uint64_t v324 = *(void *)v3 + v274;
                                                                                      int v325 = *(_DWORD *)(v324 + 924);
                                                                                      *(_DWORD *)(v324 + 924) = v323;
                                                                                      if (*(void *)(v277 + 24)
                                                                                        || *(_DWORD *)(v277 + 176)
                                                                                        || *(_DWORD *)(v277 + 180))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v277 + 24), (int)v274 + 924, 0, 0x3FFFFFFFFFFLL, 32, v325, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      uint64_t v326 = *(void *)v3 + v274;
                                                                                      int v327 = *(_DWORD *)(v326 + 1008);
                                                                                      *(_DWORD *)(v326 + 1008) = 0;
                                                                                      *(_DWORD *)(*(void *)v3
                                                                                                + v274
                                                                                                + 1008) ^= 0xFFFFFF80;
                                                                                      uint64_t v328 = *(void *)v3 + v274;
                                                                                      int v329 = *(_DWORD *)(v328 + 1008);
                                                                                      *(_DWORD *)(v328 + 1008) = v327;
                                                                                      if (*(void *)(v277 + 200)
                                                                                        || *(_DWORD *)(v277 + 352)
                                                                                        || *(_DWORD *)(v277 + 356))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v277 + 200), (int)v274 + 1008, 0, 0xFFFFFFFFLL, 7, v329, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      uint64_t v330 = *(void *)v3 + v274;
                                                                                      int v331 = *(_DWORD *)(v330 + 1036);
                                                                                      *(_DWORD *)(v330 + 1036) = 0;
                                                                                      *(_DWORD *)(*(void *)v3
                                                                                                + v274
                                                                                                + 1036) ^= 0x3FFu;
                                                                                      uint64_t v332 = *(void *)v3 + v274;
                                                                                      int v317 = *(_DWORD *)(v332 + 1036);
                                                                                      *(_DWORD *)(v332 + 1036) = v331;
                                                                                      if (*(void *)(v277 + 200)
                                                                                        || *(_DWORD *)(v277 + 352)
                                                                                        || *(_DWORD *)(v277 + 356))
                                                                                      {
                                                                                        int v320 = v274 + 1036;
                                                                                        uint64_t v321 = this;
                                                                                        uint64_t v318 = v277 + 200;
                                                                                        int v319 = 0;
LABEL_327:
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)v321, (void *)v318, v320, v319, 0x3FFFFFFFFFFLL, 32, v317, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    uint64_t result = 0;
                                                                                    v275 += 8;
                                                                                    v274 += 4;
                                                                                  }
                                                                                  while (v274 != 28);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecDaisyAvx::populateDecryptionRegisters(CAHDecDaisyAvx *this)
{
  uint64_t v1 = *((void *)this + 32);
  if (*(_DWORD *)(v1 + 2360) == 1)
  {
    uint64_t v2 = *((void *)this + 33);
    *(_DWORD *)(v2 + 1392) = *(_DWORD *)(v2 + 1392) & 0xFFFFFFFE | *(_DWORD *)(v1 + 2508) & 1;
    if (*(_DWORD *)(v1 + 2508))
    {
      *(_DWORD *)(v2 + 1404) = 0x10000000;
      *(_DWORD *)(v2 + 1408) = *(_DWORD *)(v1 + 2368);
      *(void *)(v2 + 1416) = 0;
      *(_DWORD *)(v2 + 1412) = 0;
      *(_OWORD *)(v2 + 1424) = *(_OWORD *)(v1 + 2372);
      long long v3 = *(_OWORD *)(v1 + 2388);
      *(_OWORD *)(v2 + 1456) = *(_OWORD *)(v1 + 2404);
      *(_OWORD *)(v2 + 1440) = v3;
    }
    *(_DWORD *)(*((void *)this + 33) + 1392) = *(_DWORD *)(*((void *)this + 33) + 1392) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v1 + 2512) & 1));
    if (*(_DWORD *)(v1 + 2512))
    {
      *(_DWORD *)(v2 + 1472) = 0;
      char v4 = *(_DWORD *)(v1 + 2424);
      *(_DWORD *)(v2 + 1472) = (*(_DWORD *)(v1 + 2424) & 1) << 22;
      int v5 = ((*(_DWORD *)(v1 + 2420) & 1) << 23) | ((v4 & 1) << 22) | 0x20000000;
      *(_DWORD *)(v2 + 1472) = v5;
      *(_DWORD *)(v2 + 1472) = v5 | (*(_DWORD *)(v1 + 2364) == 0);
      long long v6 = *(_OWORD *)(v1 + 2428);
      long long v7 = *(_OWORD *)(v1 + 2444);
      *(_OWORD *)(v2 + 1508) = *(_OWORD *)(v1 + 2460);
      *(_OWORD *)(v2 + 1492) = v7;
      *(_OWORD *)(v2 + 1476) = v6;
    }
    *(_DWORD *)(*((void *)this + 33) + 1392) = *(_DWORD *)(*((void *)this + 33) + 1392) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v1 + 2516) & 1));
    *(_DWORD *)(*((void *)this + 33) + 1392) = *(_DWORD *)(*((void *)this + 33) + 1392) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v1 + 2520) & 1));
    *(_DWORD *)(*((void *)this + 33) + 1392) = *(_DWORD *)(*((void *)this + 33) + 1392) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v1 + 2524) & 1));
    if (*(_DWORD *)(v1 + 2516))
    {
      *(_DWORD *)(v2 + 1528) = 0;
      if (*(_DWORD *)(v1 + 2476) == 2) {
        int v8 = 805306368;
      }
      else {
        int v8 = 813694976;
      }
      *(_DWORD *)(v2 + 1528) = v8;
      memcpy((void *)(v2 + 1532), (const void *)(v1 + 2480), 4 * *(unsigned int *)(v1 + 2476));
      *(_DWORD *)(v1 + 2516) = 0;
    }
  }
  return 0;
}

uint64_t CAHDecDaisyAvx::populateTiles(CAHDecDaisyAvx *this)
{
  uint64_t v2 = (*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 140)
                    * *(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 136));
  uint64_t v3 = *((void *)this + *((unsigned int *)this + 13) + 34);
  CAHDecDaisyAvx::populateClearTiles(this);
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 1548;
    do
    {
      CAHDecCatnipAvx::populateTileRegisters((uint64_t)this, v5, v4++);
      v5 += 12;
    }
    while (v2 != v4);
  }
  return 0;
}

uint64_t CAHDecDaisyAvx::populateAvxVPDependency(CAVDAvxDecoder **this)
{
  if (CAVDAvxDecoder::isParallelDecode(this[32])) {
    int v2 = 0;
  }
  else {
    int v2 = 32;
  }
  *((_DWORD *)this[33] + 348) = *((_DWORD *)this[33] + 348) & 0xFFFFFFDF | v2;
  *((_DWORD *)this[33] + 348) &= 0xFFFFF83F;
  *((_DWORD *)this[33] + 348) &= 0xFFFF07FF;
  *((_DWORD *)this[33] + 349) = 0;
  uint64_t v3 = this[33];
  int v4 = *((_DWORD *)v3 + 348);
  if ((v4 & 0x20) != 0)
  {
    *((_DWORD *)v3 + 348) = v4 & 0xFFFF07FF | (((unsigned __int16)((*(_WORD *)(*(void *)(*((void *)this[32] + 5303) + 1920)
                                                                                              + 2024) << 11)
                                                                                  + 2048) >> 8) >> 3 << 11);
    uint64_t v3 = this[33];
    int v4 = *((_DWORD *)v3 + 348);
  }
  *((_DWORD *)v3 + 348) = v4 & 0xFFFFF83F | (((((*(_DWORD *)(*((void *)this[32] + 1993) + 79296) << 6)
                                                            + 64) >> 6) & 0x1F) << 6);
  uint64_t v5 = this[32];
  uint64_t v6 = *((void *)v5 + 1993);
  if (*(void *)(v6 + 79312) || *(void *)(v6 + 79304))
  {
    *((_DWORD *)this[33] + 349) |= 1u;
    uint64_t v5 = this[32];
    uint64_t v6 = *((void *)v5 + 1993);
    if (*(void *)(v6 + 79312))
    {
      *((_DWORD *)this[33] + 349) = *((_DWORD *)this[33] + 349) & 0xFFFFFFC1 | (2
                                                                              * (((2
                                                                                               * *(_DWORD *)(*(void *)(*((void *)v5 + 5303) + 1920) + 2024)
                                                                                               + 2) >> 1) & 0x1F));
      uint64_t v5 = this[32];
      uint64_t v6 = *((void *)v5 + 1993);
    }
    if (*(void *)(v6 + 79304))
    {
      *((_DWORD *)this[33] + 349) = *((_DWORD *)this[33] + 349) & 0xFFFFF83F | (((((*(_DWORD *)(*(void *)(*(void *)(*((void *)v5 + 5303) + 1912) + 504) + 184) << 6)
                                                                                               + 64) >> 6) & 0x1F) << 6);
      uint64_t v5 = this[32];
      uint64_t v6 = *((void *)v5 + 1993);
    }
  }
  if (!*(unsigned char *)(v6 + 128))
  {
    *((_DWORD *)this[33] + 349) |= 0x800u;
    *((_DWORD *)this[33] + 349) = *((_DWORD *)this[33] + 349) & 0xFFFE0FFF | (((((*(_DWORD *)(*(void *)(*((void *)this[32] + 5303) + 1920) + 2024) << 12)
                                                                                             + 4096) >> 12) & 0x1F) << 12);
    uint64_t v5 = this[32];
  }
  if (*(unsigned char *)(*((void *)v5 + 5303) + 1957))
  {
    long long v7 = (void *)*((void *)v5 + 1993);
    if (v7[9820])
    {
      *((_DWORD *)this[33] + 349) |= 0x800u;
      *((_DWORD *)this[33] + 349) = *((_DWORD *)this[33] + 349) & 0xFFC1FFFF | (((((*(_DWORD *)(*((void *)this[32] + 1993) + 78744) << 17)
                                                                                               + 0x20000) >> 17) & 0x1F) << 17);
      long long v7 = (void *)*((void *)this[32] + 1993);
    }
    if (v7[9848])
    {
      *((_DWORD *)this[33] + 349) |= 0x800u;
      *((_DWORD *)this[33] + 349) = *((_DWORD *)this[33] + 349) & 0xF83FFFFF | (((((*(_DWORD *)(*((void *)this[32] + 1993) + 78968) << 22)
                                                                                               + 0x400000) >> 22) & 0x1F) << 22);
      long long v7 = (void *)*((void *)this[32] + 1993);
    }
    if (v7[9876])
    {
      *((_DWORD *)this[33] + 349) |= 0x800u;
      *((_DWORD *)this[33] + 349) = (*((_DWORD *)this[33] + 349) & 0x7FFFFFF | (*(_DWORD *)(*((void *)this[32] + 1993) + 79192) << 27))
                                  + 0x8000000;
    }
  }
  return 0;
}

uint64_t CAHDecDaisyAvx::populateCommonRegisters(CAHDecDaisyAvx *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000003;
  return 0;
}

uint64_t CAHDecDaisyAvx::updateCommonRegisters(CAHDecDaisyAvx *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecDaisyAvx::populateSequenceRegisters(CAHDecDaisyAvx *this)
{
  uint64_t v2 = *((void *)this + 32);
  uint64_t v1 = *((void *)this + 33);
  uint64_t v3 = *(void *)(v2 + 42424);
  uint64_t v4 = *(void *)(v2 + 15944);
  *(_DWORD *)(v1 + 44) = 0;
  unsigned __int16 v5 = *(_DWORD *)(v4 + 8) - 1;
  *(_DWORD *)(v1 + 44) = v5;
  *(_DWORD *)(v1 + 44) = (v5 | ((unsigned __int16)*(_DWORD *)(v4 + 12) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 48) = 0;
  int v6 = *(_DWORD *)(v3 + 80) & 1;
  *(_DWORD *)(v1 + 48) = v6;
  unsigned int v7 = v6 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v3 + 76) & 7));
  *(_DWORD *)(v1 + 48) = v7;
  unsigned int v8 = v7 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v3 + 72) & 1));
  *(_DWORD *)(v1 + 48) = v8;
  unsigned int v9 = v8 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v3 + 96) & 1));
  *(_DWORD *)(v1 + 48) = v9;
  unsigned int v10 = v9 & 0xFFFFFFBF | ((*(unsigned char *)(v3 + 95) & 1) << 6);
  *(_DWORD *)(v1 + 48) = v10;
  unsigned int v11 = v10 & 0xFFFFFF7F | ((*(unsigned char *)(v3 + 94) & 1) << 7);
  *(_DWORD *)(v1 + 48) = v11;
  unsigned int v12 = v11 & 0xFFFFFEFF | ((*(unsigned char *)(v3 + 93) & 1) << 8);
  *(_DWORD *)(v1 + 48) = v12;
  unsigned int v13 = v12 & 0xFFFFFDFF | ((*(unsigned char *)(v3 + 92) & 1) << 9);
  *(_DWORD *)(v1 + 48) = v13;
  unsigned int v14 = v13 & 0xFFFFFBFF | ((*(_DWORD *)(v3 + 60) == 15) << 10);
  *(_DWORD *)(v1 + 48) = v14;
  LODWORD(v3) = v14 & 0xFFFFF7FF | (*(unsigned __int8 *)(v3 + 1942) << 11);
  *(_DWORD *)(v1 + 48) = v3;
  LODWORD(v3) = v3 & 0xFFF87FFF | ((*(unsigned char *)(v4 + 58) & 0xF) << 15);
  *(_DWORD *)(v1 + 48) = v3;
  LODWORD(v3) = v3 & 0xFF87FFFF | ((*(unsigned char *)(v4 + 57) & 0xF) << 19);
  *(_DWORD *)(v1 + 48) = v3;
  *(_DWORD *)(v1 + 48) = v3 & 0xFCFFFFFF | ((*(unsigned char *)(v4 + 56) & 3) << 24);
  return 0;
}

uint64_t CAHDecDaisyAvx::getUpscaleConvolveStep(CAHDecDaisyAvx *this, int a2, int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 >= 0) {
      int v3 = a3;
    }
    else {
      int v3 = a3 + 1;
    }
    return (((v3 >> 1) + (a2 << 14)) / a3);
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      int v6 = "int32_t CAHDecDaisyAvx::getUpscaleConvolveStep(int, int)";
      __int16 v7 = 1024;
      int v8 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid out_length %d\n", (uint8_t *)&v5, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t CAHDecDaisyAvx::getUpscaleConvolveX0(CAHDecDaisyAvx *this, int a2, int a3, int a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 >= 0) {
      int v4 = a3;
    }
    else {
      int v4 = a3 + 1;
    }
    return ((((a2 - a3) << 13) + (v4 >> 1)) / a3
          - ((a4 * a3 - (a2 << 14) + (a4 * a3 - (a2 << 14) < 0)) >> 1)
          + 128) & 0x3FFF;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      __int16 v7 = "int32_t CAHDecDaisyAvx::getUpscaleConvolveX0(int, int, int32_t)";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid out_length %d\n", (uint8_t *)&v6, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t CAHDecDaisyAvx::populatePictureRegisters(CAHDecDaisyAvx *this)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v3 = *(void *)(v1 + 15944);
  uint64_t v4 = *(void *)(v1 + 42424);
  *(_DWORD *)(v2 + 52) = 766509056;
  int v5 = ((*(unsigned char *)(v1 + 2652) & 1) << 19) | 0x2DB00000;
  *(_DWORD *)(v2 + 52) = v5;
  unsigned int v6 = v5 & 0xFFFBFFFF | ((*(unsigned char *)(v1 + 2653) & 1) << 18);
  *(_DWORD *)(v2 + 52) = v6;
  unsigned int v7 = v6 & 0xFFFDFFFF | ((*(unsigned char *)(v1 + 2654) & 1) << 17);
  *(_DWORD *)(v2 + 52) = v7;
  int v8 = *(unsigned __int8 *)(v3 + 128);
  if (*(unsigned char *)(v3 + 128)) {
    int v8 = (*(unsigned char *)(v4 + 1956) == 0) << 13;
  }
  int v9 = v8 | v7;
  *(_DWORD *)(v2 + 52) = v9;
  int v10 = v9 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v2 + 52) = v10;
  unsigned int v11 = v10 & 0xFFFFF00F | ((*(_DWORD *)(*((void *)this + 32) + 2644) == 1) << 10) | 0x2E0;
  *(_DWORD *)(v2 + 52) = v11;
  unsigned int v12 = v11 & 0xFFFFFFE3 | (4 * (*(_DWORD *)(v3 + 78516) & 3));
  *(_DWORD *)(v2 + 52) = v12;
  *(_DWORD *)(v2 + 52) = v12 & 0xFFFFFFFC | *(_DWORD *)(v3 + 78520) & 3;
  *(_DWORD *)(v2 + 56) = 0;
  if (*(unsigned char *)(v4 + 1956)) {
    int v13 = 318767104;
  }
  else {
    int v13 = 50331648;
  }
  *(_DWORD *)(v2 + 56) = v13;
  int v14 = *(_DWORD *)(v3 + 24);
  int v15 = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v2 + 60) = 0;
  if (*(unsigned char *)(v4 + 1956)) {
    int v15 = ((_WORD)v15 + 7) & 0xFFF8;
  }
  int v16 = (v15 << 16) - 0x10000;
  *(_DWORD *)(v2 + 60) = v16;
  if (*(unsigned char *)(v4 + 1956)) {
    LOWORD(v14) = (v14 + 7) & 0xFFF8;
  }
  *(void *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 60) = v16 & 0xFFFF0000 | (unsigned __int16)(v14 - 1);
  int v17 = *(unsigned __int8 *)(v3 + 128) << 31;
  *(_DWORD *)(v2 + 68) = v17;
  unsigned int v18 = v17 & 0x807FFFFF | (*(_DWORD *)(v4 + 1876) << 23);
  *(_DWORD *)(v2 + 68) = v18;
  unsigned int v19 = v18 & 0xFF8FFFFF | ((*(_DWORD *)(v4 + 1896) & 7) << 20);
  *(_DWORD *)(v2 + 68) = v19;
  unsigned int v20 = v19 & 0xFFF1FFFF | ((*(_DWORD *)(v4 + 1900) & 7) << 17);
  *(_DWORD *)(v2 + 68) = v20;
  unsigned int v21 = v20 & 0xFFFEFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79300) & 1) << 16);
  *(_DWORD *)(v2 + 68) = v21;
  unsigned int v22 = v21 & 0xFFFF7FFF | ((*(unsigned char *)(v4 + 2284) & 1) << 15);
  *(_DWORD *)(v2 + 68) = v22;
  char v23 = *(unsigned char *)(v4 + 2284);
  if (v23) {
    char v23 = *(unsigned char *)(v4 + 2285);
  }
  unsigned int v24 = v22 & 0xFFFFBFFF | ((v23 & 1) << 14);
  *(_DWORD *)(v2 + 68) = v24;
  char v25 = *(unsigned char *)(v4 + 2284);
  if (v25) {
    char v25 = *(unsigned char *)(v4 + 2287);
  }
  unsigned int v26 = v24 & 0xFFFFDFFF | ((v25 & 1) << 13);
  *(_DWORD *)(v2 + 68) = v26;
  unsigned int v27 = v26 & 0xFFFFEFFF | (*(unsigned __int8 *)(v4 + 1957) << 12);
  *(_DWORD *)(v2 + 68) = v27;
  if (*(unsigned char *)(v3 + 128)) {
    char v28 = 0;
  }
  else {
    char v28 = *(unsigned char *)(v4 + 1958);
  }
  unsigned int v29 = v27 & 0xFFFFFBFF | ((v28 & 1) << 10);
  *(_DWORD *)(v2 + 68) = v29;
  unsigned int v30 = v29 & 0xFFFFFDFF | (*(unsigned __int8 *)(v4 + 1962) << 9);
  *(_DWORD *)(v2 + 68) = v30;
  unsigned int v31 = v30 & 0xFFFFFEFF | (*(unsigned __int8 *)(v4 + 1941) << 8);
  *(_DWORD *)(v2 + 68) = v31;
  if (*(unsigned char *)(v3 + 128)) {
    char v32 = 1;
  }
  else {
    char v32 = *(unsigned char *)(v4 + 1948);
  }
  uint64_t v33 = 0;
  unsigned int v34 = v31 & 0xFFFFFF7F | ((v32 & 1) << 7);
  *(_DWORD *)(v2 + 68) = v34;
  unsigned int v35 = v34 & 0xFFFFFFBF | (*(unsigned __int8 *)(v4 + 1956) << 6);
  *(_DWORD *)(v2 + 68) = v35;
  unsigned int v36 = v35 & 0xFFFFFFDF | (32 * *(unsigned __int8 *)(v4 + 1959));
  *(_DWORD *)(v2 + 68) = v36;
  unsigned int v37 = v36 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v4 + 1892) & 1));
  *(_DWORD *)(v2 + 68) = v37;
  unsigned int v38 = v37 & 0xFFFFFFF7 | (8 * *(unsigned __int8 *)(v4 + 1960));
  *(_DWORD *)(v2 + 68) = v38;
  unsigned int v39 = v38 & 0xFFFFFFFB | (4 * *(unsigned __int8 *)(v4 + 1961));
  *(_DWORD *)(v2 + 68) = v39;
  *(_DWORD *)(v2 + 68) = v39 & 0xFFFFFFFC | *(_DWORD *)(v4 + 1964) & 3;
  do
  {
    *(&v210 + v33) = v33 + 1;
    ++v33;
  }
  while (v33 != 7);
  unint64_t v40 = 0;
  uint64_t v41 = 1;
  do
  {
    if (v40 <= 5)
    {
      uint64_t v42 = *(void *)(v3 + 79224);
      uint64_t v43 = v41;
      do
      {
        if (v42 && *(void *)(v42 + 8 * v40) == *(void *)(v42 + 8 * v43)) {
          *(&v210 + v43) = *(&v210 + v40);
        }
        ++v43;
      }
      while (v43 != 7);
    }
    ++v40;
    ++v41;
  }
  while (v40 != 7);
  int v44 = 0;
  *(_DWORD *)(v2 + 72) = 0;
  if (!*(unsigned char *)(v3 + 128)) {
    int v44 = *(unsigned __int8 *)(v4 + 2192);
  }
  uint64_t v45 = 0;
  *(_DWORD *)(v2 + 72) = v44 << 29;
  int v46 = ((v210 & 7) << 25) | ((*(_DWORD *)(v4 + 1872) != 0) << 28) | ((v211 & 7) << 22) | ((v212 & 7) << 19) | ((v213 & 7) << 16) | ((v214 & 7) << 13) | ((v215 & 7) << 10) | ((v216 & 7) << 7) | (v44 << 29);
  *(_DWORD *)(v2 + 72) = v46;
  unsigned int v47 = v46 & 0xFFFFFFBF | ((*(_DWORD *)(v4 + 2116) & 1) << 6);
  *(_DWORD *)(v2 + 72) = v47;
  unsigned int v48 = v47 & 0xFFFFFFDF | (32 * (*(_DWORD *)(v4 + 2120) & 1));
  *(_DWORD *)(v2 + 72) = v48;
  unsigned int v49 = v48 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v4 + 2124) & 1));
  *(_DWORD *)(v2 + 72) = v49;
  unsigned int v50 = v49 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v4 + 2128) & 1));
  *(_DWORD *)(v2 + 72) = v50;
  unsigned int v51 = v50 & 0xFFFFFFFB | (4 * (*(_DWORD *)(v4 + 2132) & 1));
  *(_DWORD *)(v2 + 72) = v51;
  unsigned int v52 = v51 & 0xFFFFFFFD | (2 * (*(_DWORD *)(v4 + 2136) & 1));
  *(_DWORD *)(v2 + 72) = v52;
  *(_DWORD *)(v2 + 72) = v52 & 0xFFFFFFFE | *(_DWORD *)(v4 + 2140) & 1;
  int v53 = (unsigned char *)(v4 + 2300);
  uint64_t v54 = (_WORD *)(v4 + 2368);
  do
  {
    int v55 = (_DWORD *)(v2 + 108 + v45);
    *(v55 - 8) = 0;
    int v56 = (*(_DWORD *)(v4 + 2524 + v45) & 1) << 16;
    *(v55 - 8) = v56;
    int v57 = v56 | ((*v53 != 0) << 15);
    *(v55 - 8) = v57;
    int v58 = v57 | ((*(v53 - 1) != 0) << 14);
    *(v55 - 8) = v58;
    int v59 = v58 | ((*(v53 - 2) != 0) << 13);
    *(v55 - 8) = v59;
    unsigned int v60 = v59 & 0xFFFFE3FF | ((*v54 & 7) << 10);
    *(v55 - 8) = v60;
    int v61 = v60 | ((*(v53 - 7) != 0) << 9);
    *(v55 - 8) = v61;
    *(v55 - 8) = v61 & 0xFFFFFE00 | *(v54 - 5) & 0x1FF;
    *int v55 = 0;
    int v62 = (*(v53 - 6) != 0) << 31;
    *int v55 = v62;
    unsigned int v63 = v62 & 0x80FFFFFF | ((*(v54 - 4) & 0x7F) << 24);
    *int v55 = v63;
    int v64 = v63 | ((*(v53 - 5) != 0) << 23);
    *int v55 = v64;
    unsigned int v65 = v64 & 0xFF80FFFF | ((*(v54 - 3) & 0x7F) << 16);
    *int v55 = v65;
    int v66 = v65 | ((*(v53 - 4) != 0) << 15);
    *int v55 = v66;
    unsigned int v67 = v66 & 0xFFFF80FF | ((*(v54 - 2) & 0x7F) << 8);
    *int v55 = v67;
    int v68 = v67 | ((*(v53 - 3) != 0) << 7);
    *int v55 = v68;
    *int v55 = v68 & 0xFFFFFF80 | *(v54 - 1) & 0x7F;
    v45 += 4;
    v53 += 8;
    v54 += 8;
  }
  while (v45 != 32);
  uint64_t v69 = 0;
  *(_DWORD *)(v2 + 140) = 0x20000;
  uint64_t v70 = v3 + 78544;
  do
  {
    uint64_t v71 = (unsigned int *)(v2 + 156 + v69);
    *(v71 - 3) = 0;
    unsigned int v72 = *(_DWORD *)(v70 - 16) << 29;
    *(v71 - 3) = v72;
    unsigned int v73 = v72 & 0xFF00FFFF | (*(_DWORD *)(v70 - 12) << 16);
    *(v71 - 3) = v73;
    unsigned int v74 = v73 & 0xFFFF00FF | (*(_DWORD *)(v70 - 8) << 8);
    *(v71 - 3) = v74;
    *(v71 - 3) = v74 | *(unsigned __int8 *)(v70 - 4);
    *uint64_t v71 = 0;
    unsigned int v75 = *(_DWORD *)v70 << 24;
    *uint64_t v71 = v75;
    unsigned int v76 = v75 & 0xFF00FFFF | (*(_DWORD *)(v70 + 4) << 16);
    *uint64_t v71 = v76;
    unsigned int v77 = v76 & 0xFFFF00FF | (*(_DWORD *)(v70 + 8) << 8);
    *uint64_t v71 = v77;
    *uint64_t v71 = v77 | *(unsigned __int8 *)(v70 + 12);
    v69 += 4;
    v70 += 224;
  }
  while (v69 != 12);
  *(_DWORD *)(v2 + 168) = 0;
  int v78 = *(_DWORD *)(v4 + 3160) << 31;
  *(_DWORD *)(v2 + 168) = v78;
  unsigned int v79 = v78 & 0x9FFFFFFF | ((*(_DWORD *)(v3 + 79200) & 3) << 29);
  *(_DWORD *)(v2 + 168) = v79;
  unsigned int v80 = v79 & 0xE01FFFFF | (*(_DWORD *)(v4 + 2244) << 21);
  *(_DWORD *)(v2 + 168) = v80;
  unsigned int v81 = v80 & 0xFFE03FFF | ((*(_DWORD *)(v4 + 2248) & 0x7F) << 14);
  *(_DWORD *)(v2 + 168) = v81;
  unsigned int v82 = v81 & 0xFFFFC07F | ((*(_DWORD *)(v4 + 2252) & 0x7F) << 7);
  *(_DWORD *)(v2 + 168) = v82;
  *(_DWORD *)(v2 + 168) = v82 & 0xFFFFFF80 | *(_DWORD *)(v4 + 2260) & 0x7F;
  *(_DWORD *)(v2 + 172) = 0;
  int v83 = (*(_DWORD *)(v4 + 2256) & 0x7F) << 20;
  *(_DWORD *)(v2 + 172) = v83;
  unsigned int v84 = v83 & 0xFFF01FFF | ((*(_DWORD *)(v4 + 2264) & 0x7F) << 13);
  *(_DWORD *)(v2 + 172) = v84;
  int v85 = v84 | (*(unsigned __int8 *)(v4 + 2268) << 12);
  *(_DWORD *)(v2 + 172) = v85;
  unsigned int v86 = v85 & 0xFFFFF0FF | ((*(_DWORD *)(v4 + 2272) & 0xF) << 8);
  *(_DWORD *)(v2 + 172) = v86;
  unsigned int v87 = v86 & 0xFFFFFF0F | (16 * (*(_DWORD *)(v4 + 2276) & 0xF));
  *(_DWORD *)(v2 + 172) = v87;
  *(_DWORD *)(v2 + 172) = v87 & 0xFFFFFFF0 | *(_DWORD *)(v4 + 2280) & 0xF;
  *(_DWORD *)(v2 + 176) = 0;
  if (!*(unsigned char *)(v4 + 1956))
  {
    int v102 = *(_DWORD *)(v4 + 3160);
    if (!v102) {
      goto LABEL_177;
    }
    int v102 = *(_DWORD *)(v4 + 3168) << 31;
    *(_DWORD *)(v2 + 176) = v102;
    if (*(_DWORD *)(v4 + 3168))
    {
      int v103 = ((*(_DWORD *)(v4 + 3176) & 1) << 28) | v102;
      *(_DWORD *)(v2 + 176) = v103;
      int v102 = ((*(_DWORD *)(v3 + 79204) & 3) << 29) | v103;
      *(_DWORD *)(v2 + 176) = v102;
    }
    if (!*(unsigned char *)(v4 + 1956))
    {
LABEL_177:
      if (!*(unsigned char *)(v4 + 1962))
      {
        unsigned int v104 = v102 & 0xF7FFFFFF | ((*(unsigned char *)(v4 + 2216) & 1) << 27);
        *(_DWORD *)(v2 + 176) = v104;
        unsigned int v105 = v104 & 0xF8FFFFFF | ((*(_DWORD *)(v4 + 2212) & 7) << 24);
        *(_DWORD *)(v2 + 176) = v105;
        unsigned int v106 = v105 & 0xFF03FFFF | ((*(_DWORD *)(v4 + 2196) & 0x3F) << 18);
        *(_DWORD *)(v2 + 176) = v106;
        unsigned int v107 = v106 & 0xFFFC0FFF | ((*(_DWORD *)(v4 + 2200) & 0x3F) << 12);
        *(_DWORD *)(v2 + 176) = v107;
        if (*(_DWORD *)(v4 + 2196) || *(_DWORD *)(v4 + 2200)) {
          int v108 = *(_DWORD *)(v4 + 2204);
        }
        else {
          LOBYTE(v108) = 0;
        }
        unsigned int v109 = v107 & 0xFFFFF03F | ((v108 & 0x3F) << 6);
        *(_DWORD *)(v2 + 176) = v109;
        if (*(_DWORD *)(v4 + 2196) || (int v110 = *(_DWORD *)(v4 + 2200)) != 0) {
          int v110 = *(_DWORD *)(v4 + 2208);
        }
        *(_DWORD *)(v2 + 176) = v109 & 0xFFFFFFC0 | v110 & 0x3F;
        if (!*(unsigned char *)(v3 + 56)) {
          *(_DWORD *)(v2 + 176) = v107 & 0xFFFFF000;
        }
      }
    }
  }
  *(_DWORD *)(v2 + 180) = 0;
  int v88 = (*(unsigned char *)(v4 + 2226) & 0x7F) << 21;
  *(_DWORD *)(v2 + 180) = v88;
  unsigned int v89 = v88 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 2227) & 0x7F) << 14);
  *(_DWORD *)(v2 + 180) = v89;
  unsigned int v90 = v89 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 2228) & 0x7F) << 7);
  *(_DWORD *)(v2 + 180) = v90;
  *(_DWORD *)(v2 + 180) = v90 & 0xFFFFFF80 | *(unsigned char *)(v4 + 2229) & 0x7F;
  *(_DWORD *)(v2 + 184) = 0;
  int v91 = (*(unsigned char *)(v4 + 2230) & 0x7F) << 21;
  *(_DWORD *)(v2 + 184) = v91;
  unsigned int v92 = v91 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 2231) & 0x7F) << 14);
  *(_DWORD *)(v2 + 184) = v92;
  unsigned int v93 = v92 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 2232) & 0x7F) << 7);
  *(_DWORD *)(v2 + 184) = v93;
  *(_DWORD *)(v2 + 184) = v93 & 0xFFFFFF80 | *(unsigned char *)(v4 + 2233) & 0x7F;
  *(_DWORD *)(v2 + 188) = 0;
  LOBYTE(v93) = *(unsigned char *)(v4 + 2236);
  *(_DWORD *)(v2 + 188) = (v93 & 0x7F) << 7;
  *(_DWORD *)(v2 + 188) = *(unsigned char *)(v4 + 2237) & 0x7F | ((v93 & 0x7F) << 7);
  *(void *)(v2 + 192) = 0;
  *(void *)(v2 + 200) = 0;
  uint64_t v94 = (_DWORD *)(v2 + 192);
  if (*(unsigned char *)(v4 + 99) && !*(unsigned char *)(v4 + 1962) && !*(unsigned char *)(v4 + 1956))
  {
    *uint64_t v94 = 0x10000000;
    int v95 = ((*(_DWORD *)(v4 + 3180) << 26) + 0x4000000) & 0xC000000 | 0x10000000;
    *uint64_t v94 = v95;
    unsigned int v96 = v95 & 0xFCFFFFFF | ((*(_DWORD *)(v4 + 3184) & 3) << 24);
    *uint64_t v94 = v96;
    unsigned int v97 = v96 & 0xFF0FFFFF | ((*(_DWORD *)(v4 + 3192) & 0xF) << 20);
    *uint64_t v94 = v97;
    unsigned int v98 = v97 & 0xFFF3FFFF | ((*(_DWORD *)(v4 + 3256) & 3) << 18);
    *uint64_t v94 = v98;
    unsigned int v99 = v98 & 0xFFFC3FFF | ((*(_DWORD *)(v4 + 3320) & 0xF) << 14);
    *uint64_t v94 = v99;
    unsigned int v100 = v99 & 0xFFFFCFFF | ((*(_DWORD *)(v4 + 3384) & 3) << 12);
    *uint64_t v94 = v100;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v101) = 0;
    }
    else {
      int v101 = *(_DWORD *)(v4 + 3196);
    }
    unsigned int v111 = v100 & 0xFFFFF0FF | ((v101 & 0xF) << 8);
    *uint64_t v94 = v111;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v112) = 0;
    }
    else {
      int v112 = *(_DWORD *)(v4 + 3260);
    }
    unsigned int v113 = v111 & 0xFFFFFF3F | ((v112 & 3) << 6);
    *uint64_t v94 = v113;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v114) = 0;
    }
    else {
      int v114 = *(_DWORD *)(v4 + 3324);
    }
    unsigned int v115 = v113 & 0xFFFFFFC3 | (4 * (v114 & 0xF));
    *uint64_t v94 = v115;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v116) = 0;
    }
    else {
      int v116 = *(_DWORD *)(v4 + 3388);
    }
    *uint64_t v94 = v115 & 0xFFFFFFFC | v116 & 3;
    if (*(int *)(v4 + 3188) <= 2) {
      LOBYTE(v117) = 0;
    }
    else {
      int v117 = *(_DWORD *)(v4 + 3200);
    }
    int v118 = (v117 & 0xF) << 20;
    *(_DWORD *)(v2 + 196) = v118;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v119) = 0;
    }
    else {
      int v119 = *(_DWORD *)(v4 + 3264);
    }
    int v120 = ((v119 & 3) << 18) | v118;
    *(_DWORD *)(v2 + 196) = v120;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v121) = 0;
    }
    else {
      int v121 = *(_DWORD *)(v4 + 3328);
    }
    int v122 = ((v121 & 0xF) << 14) | v120;
    *(_DWORD *)(v2 + 196) = v122;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v123) = 0;
    }
    else {
      int v123 = *(_DWORD *)(v4 + 3392);
    }
    int v124 = ((v123 & 3) << 12) | v122;
    *(_DWORD *)(v2 + 196) = v124;
    if (*(int *)(v4 + 3188) <= 3) {
      LOBYTE(v125) = 0;
    }
    else {
      int v125 = *(_DWORD *)(v4 + 3204);
    }
    int v126 = ((v125 & 0xF) << 8) | v124;
    *(_DWORD *)(v2 + 196) = v126;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v127) = 0;
    }
    else {
      int v127 = *(_DWORD *)(v4 + 3268);
    }
    int v128 = ((v127 & 3) << 6) | v126;
    *(_DWORD *)(v2 + 196) = v128;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v129) = 0;
    }
    else {
      int v129 = *(_DWORD *)(v4 + 3332);
    }
    unsigned int v130 = (4 * (v129 & 0xF)) | v128 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 196) = v130;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v131) = 0;
    }
    else {
      int v131 = *(_DWORD *)(v4 + 3396);
    }
    *(_DWORD *)(v2 + 196) = v130 & 0xFFFFFFFC | v131 & 3;
    if (*(int *)(v4 + 3188) <= 4) {
      LOBYTE(v132) = 0;
    }
    else {
      int v132 = *(_DWORD *)(v4 + 3208);
    }
    int v133 = (v132 & 0xF) << 20;
    *(_DWORD *)(v2 + 200) = v133;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v134) = 0;
    }
    else {
      int v134 = *(_DWORD *)(v4 + 3272);
    }
    int v135 = ((v134 & 3) << 18) | v133;
    *(_DWORD *)(v2 + 200) = v135;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v136) = 0;
    }
    else {
      int v136 = *(_DWORD *)(v4 + 3336);
    }
    int v137 = ((v136 & 0xF) << 14) | v135;
    *(_DWORD *)(v2 + 200) = v137;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v138) = 0;
    }
    else {
      int v138 = *(_DWORD *)(v4 + 3400);
    }
    int v139 = ((v138 & 3) << 12) | v137;
    *(_DWORD *)(v2 + 200) = v139;
    if (*(int *)(v4 + 3188) <= 5) {
      LOBYTE(v140) = 0;
    }
    else {
      int v140 = *(_DWORD *)(v4 + 3212);
    }
    int v141 = ((v140 & 0xF) << 8) | v139;
    *(_DWORD *)(v2 + 200) = v141;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v142) = 0;
    }
    else {
      int v142 = *(_DWORD *)(v4 + 3276);
    }
    int v143 = ((v142 & 3) << 6) | v141;
    *(_DWORD *)(v2 + 200) = v143;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v144) = 0;
    }
    else {
      int v144 = *(_DWORD *)(v4 + 3340);
    }
    unsigned int v145 = (4 * (v144 & 0xF)) | v143 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 200) = v145;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v146) = 0;
    }
    else {
      int v146 = *(_DWORD *)(v4 + 3404);
    }
    *(_DWORD *)(v2 + 200) = v145 & 0xFFFFFFFC | v146 & 3;
    if (*(int *)(v4 + 3188) <= 6) {
      LOBYTE(v147) = 0;
    }
    else {
      int v147 = *(_DWORD *)(v4 + 3216);
    }
    int v148 = (v147 & 0xF) << 20;
    *(_DWORD *)(v2 + 204) = v148;
    if (*(int *)(v4 + 3188) < 7) {
      LOBYTE(v149) = 0;
    }
    else {
      int v149 = *(_DWORD *)(v4 + 3280);
    }
    int v150 = ((v149 & 3) << 18) | v148;
    *(_DWORD *)(v2 + 204) = v150;
    if (*(int *)(v4 + 3188) < 7) {
      int v151 = 0;
    }
    else {
      int v151 = (*(_DWORD *)(v4 + 3344) & 0xF) << 14;
    }
    int v152 = v151 | v150;
    *(_DWORD *)(v2 + 204) = v152;
    if (*(int *)(v4 + 3188) < 7) {
      int v153 = 0;
    }
    else {
      int v153 = (*(_DWORD *)(v4 + 3408) & 3) << 12;
    }
    int v154 = v153 | v152;
    *(_DWORD *)(v2 + 204) = v154;
    if (*(int *)(v4 + 3188) <= 7) {
      int v155 = 0;
    }
    else {
      int v155 = (*(_DWORD *)(v4 + 3220) & 0xF) << 8;
    }
    int v156 = v155 | v154;
    *(_DWORD *)(v2 + 204) = v156;
    if (*(int *)(v4 + 3188) < 8) {
      int v157 = 0;
    }
    else {
      int v157 = (*(_DWORD *)(v4 + 3284) & 3) << 6;
    }
    int v158 = v157 | v156;
    *(_DWORD *)(v2 + 204) = v158;
    if (*(int *)(v4 + 3188) < 8) {
      int v159 = 0;
    }
    else {
      int v159 = 4 * (*(_DWORD *)(v4 + 3348) & 0xF);
    }
    unsigned int v160 = v159 | v158 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 204) = v160;
    if (*(int *)(v4 + 3188) < 8) {
      int v161 = 0;
    }
    else {
      int v161 = *(_DWORD *)(v4 + 3412) & 3;
    }
    *(_DWORD *)(v2 + 204) = v161 | v160 & 0xFFFFFFFC;
  }
  if (*(unsigned char *)(v4 + 98))
  {
    int v162 = (_DWORD *)(v2 + 208);
    if (*(unsigned char *)(v4 + 2172) != 8)
    {
      *int v162 = 0x80000000;
      unsigned int v163 = ((*(unsigned __int8 *)(v4 + 2172) << 28) - 0x10000000) | 0x80000000;
      goto LABEL_143;
    }
  }
  else
  {
    int v162 = (_DWORD *)(v2 + 208);
  }
  unsigned int v163 = 0;
  *int v162 = 0;
LABEL_143:
  *(_DWORD *)(v2 + 208) = v163;
  *(_DWORD *)(v2 + 208) = (unsigned __int16)(*(_DWORD *)(v4 + 2164) - 1) | v163;
  UpscaleConvolveStep = (CAHDecDaisyAvx *)CAHDecDaisyAvx::getUpscaleConvolveStep(this, *(_DWORD *)(v4 + 2176), *(_DWORD *)(v4 + 2164));
  __int16 v165 = (__int16)UpscaleConvolveStep;
  UpscaleConvolveX0 = (CAHDecDaisyAvx *)CAHDecDaisyAvx::getUpscaleConvolveX0(UpscaleConvolveStep, *(_DWORD *)(v4 + 2176), *(_DWORD *)(v4 + 2164), (int)UpscaleConvolveStep);
  *(_DWORD *)(v2 + 212) = v165 & 0x3FFF | (((unsigned __int16)UpscaleConvolveX0 & 0x3FFF) << 14);
  unsigned int v167 = (*(_DWORD *)(v4 + 2176) + 1) >> 1;
  unsigned int v168 = (*(_DWORD *)(v4 + 2164) + 1) >> 1;
  int v169 = (CAHDecDaisyAvx *)CAHDecDaisyAvx::getUpscaleConvolveStep(UpscaleConvolveX0, v167, v168);
  *(_DWORD *)(v2 + 216) = (unsigned __int16)v169 & 0x3FFF | ((CAHDecDaisyAvx::getUpscaleConvolveX0(v169, v167, v168, (int)v169) & 0x3FFF) << 14);
  *(_DWORD *)(v2 + 220) = 0;
  int v170 = (*(_DWORD *)(v4 + 3448) & 3) << 10;
  *(_DWORD *)(v2 + 220) = v170;
  int v171 = *(unsigned __int8 *)(v3 + 56);
  if (*(unsigned char *)(v3 + 56)) {
    int v171 = (*(_DWORD *)(v4 + 3452) & 3) << 8;
  }
  int v172 = v171 | v170;
  *(_DWORD *)(v2 + 220) = v172;
  int v173 = *(unsigned __int8 *)(v3 + 56);
  if (*(unsigned char *)(v3 + 56)) {
    int v173 = (*(_DWORD *)(v4 + 3456) & 3) << 6;
  }
  int v174 = v173 | v172;
  *(_DWORD *)(v2 + 220) = v174;
  int v175 = (16 * (*(_DWORD *)(v3 + 79208) & 3)) | v174;
  *(_DWORD *)(v2 + 220) = v175;
  int v176 = (4 * (*(_DWORD *)(v3 + 79212) & 3)) | v175;
  *(_DWORD *)(v2 + 220) = v176;
  *(_DWORD *)(v2 + 220) = v176 & 0xFFC | *(_DWORD *)(v3 + 79216) & 3;
  *(_DWORD *)(v2 + 224) = 0;
  int v177 = *(_DWORD *)(v3 + 78496);
  *(_DWORD *)(v2 + 224) = v177 << 16;
  *(_DWORD *)(v2 + 224) = *(unsigned __int16 *)(v3 + 78492) | ((unsigned __int16)v177 << 16);
  *(_DWORD *)(v2 + 228) = 0;
  int v178 = *(_DWORD *)(v3 + 78504);
  *(_DWORD *)(v2 + 228) = v178 << 16;
  *(_DWORD *)(v2 + 228) = *(unsigned __int16 *)(v3 + 78500) | ((unsigned __int16)v178 << 16);
  if (*(unsigned char *)(v3 + 128))
  {
    uint64_t result = 0;
    if (*(unsigned char *)(v4 + 1956))
    {
      *(_DWORD *)(v2 + 372) = (*(_DWORD *)(v2 + 52) << 18) & 0x1000000 | (((*(_DWORD *)(v2 + 52) >> 4) & 1) << 25);
      *(_DWORD *)(v2 + 404) = 0;
      unsigned int v180 = (((*(_DWORD *)(v3 + 12) << 16) + 458752) & 0xFFF80000) - 0x10000;
      *(_DWORD *)(v2 + 404) = v180;
      *(_DWORD *)(v2 + 404) = ((((unsigned __int16)*(_DWORD *)(v3 + 8) + 7) & 0xFFF8) + 0xFFFF) | v180;
      *(_DWORD *)(v2 + 436) = 1073758208;
    }
  }
  else
  {
    int v181 = (_DWORD *)(v2 + 232);
    uint64_t v182 = -308;
    do
    {
      uint64_t v183 = v4 + v182;
      int v184 = (unsigned char *)(v4 + v182 + 4136);
      if (*v184 == 1)
      {
        if ((*(unsigned char *)(v2 + 69) & 4) != 0) {
          char v185 = -3;
        }
        else {
          char v185 = -2;
        }
      }
      else
      {
        char v185 = -6;
      }
      char v186 = v185 + 16;
      *int v181 = 0;
      int v187 = *v184 << 30;
      *int v181 = v187;
      unsigned int v188 = v187 & 0xC0007FFF | (((*(int *)(v183 + 4096) >> v186) & 0x7FFF) << 15);
      *int v181 = v188;
      *int v181 = v188 & 0xFFFF8000 | (*(int *)(v183 + 4100) >> v186) & 0x7FFF;
      v181[7] = 0;
      int v189 = (*(unsigned char *)(v183 + 4137) == 0) << 30;
      v181[7] = v189;
      unsigned int v190 = v189 & 0xC0007FFF | (((*(_DWORD *)(v183 + 4104) >> 1) & 0x7FFF) << 15);
      v181[7] = v190;
      v181[7] = v190 & 0xFFFF8000 | ((unsigned __int16)*(_DWORD *)(v183 + 4108) >> 1);
      v181[14] = 0;
      int v191 = (*(_DWORD *)(v183 + 4112) << 14) & 0x3FFF8000;
      v181[14] = v191;
      v181[14] = v191 & 0xFFFF8000 | ((unsigned __int16)*(_DWORD *)(v183 + 4116) >> 1);
      v181[21] = 0;
      int v192 = *(unsigned __int16 *)(v183 + 4128);
      v181[21] = v192 << 16;
      v181[21] = *(unsigned __int16 *)(v183 + 4130) | ((unsigned __int16)v192 << 16);
      v181[28] = 0;
      int v193 = *(unsigned __int16 *)(v183 + 4132);
      v181[28] = v193 << 16;
      v181[28] = *(unsigned __int16 *)(v183 + 4134) | ((unsigned __int16)v193 << 16);
      ++v181;
      v182 += 44;
    }
    while (v182);
    uint64_t v194 = **(void **)(v3 + 79224);
    if (v194)
    {
      uint64_t v195 = 0;
      uint64_t v196 = (_DWORD *)(v2 + 440);
      while (1)
      {
        *(v196 - 16) = 0;
        int v197 = (*(_DWORD *)(v2 + 52) << 18) & 0x1000000 | (((*(_DWORD *)(v2 + 52) >> 4) & 1) << 25);
        *(v196 - 16) = v197;
        *(v196 - 16) = v197 | *(unsigned __int8 *)(v194 + 4);
        *(v196 - 8) = 0;
        int v198 = (*(_DWORD *)(v194 + 1768) << 16) - 0x10000;
        *(v196 - 8) = v198;
        *(v196 - 8) = v198 & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)(v194 + 1760) - 1);
        *uint64_t v196 = 0;
        int v199 = *(_DWORD *)(v3 + 12);
        int v200 = v199 >= 0 ? *(_DWORD *)(v3 + 12) : v199 + 1;
        int v201 = (((v200 >> 1) + (*(_DWORD *)(v194 + 1768) << 14)) / v199) << 16;
        *uint64_t v196 = v201;
        int v202 = *(_DWORD *)(v194 + 1760);
        int v203 = *(_DWORD *)(v3 + 8);
        int v204 = v203 >= 0 ? *(_DWORD *)(v3 + 8) : v203 + 1;
        *uint64_t v196 = v201 & 0xFFFF0000 | (unsigned __int16)(((v204 >> 1) + (v202 << 14)) / v203);
        if (v195 == 6) {
          break;
        }
        uint64_t v194 = *(void *)(*(void *)(v3 + 79224) + 8 * v195 + 8);
        ++v196;
        ++v195;
        if (!v194)
        {
          int v205 = (unint64_t)(v195 - 1) < 6;
          goto LABEL_170;
        }
      }
      int v205 = 0;
    }
    else
    {
      LODWORD(v195) = 0;
      int v205 = 1;
LABEL_170:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v206 = 136315394;
        int v207 = "virtual int CAHDecDaisyAvx::populatePictureRegisters()";
        __int16 v208 = 1024;
        int v209 = v195;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid reference buffer %d\n", (uint8_t *)&v206, 0x12u);
      }
    }
    return (v205 << 31 >> 31);
  }
  return result;
}

uint64_t CAHDecDaisyAvx::populateClearTiles(CAHDecDaisyAvx *this)
{
  uint64_t v2 = (CAVDAvxDecoder *)*((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = (_DWORD *)*((void *)v2 + 1993);
  int v5 = v4[34];
  *(_WORD *)(v3 + 1120) = v4[35];
  *(_WORD *)(v3 + 1122) = v5;
  if (CAVDAvxDecoder::isParallelDecode(v2)) {
    int v6 = -1;
  }
  else {
    int v6 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 42424) + 3156);
  }
  unsigned int v7 = v4 + 16420;
  uint64_t v8 = *((void *)this + 33);
  *(_DWORD *)(v8 + 1384) = v6;
  uint64_t v9 = v4[35];
  if (v9)
  {
    int v10 = v4 + 16485;
    unsigned int v11 = (_WORD *)(v8 + 1124);
    do
    {
      int v12 = *v10++;
      *v11++ = v12;
      --v9;
    }
    while (v9);
  }
  uint64_t v13 = v4[34];
  if (v13)
  {
    int v14 = (_WORD *)(v8 + 1254);
    do
    {
      int v15 = *v7++;
      *v14++ = v15;
      --v13;
    }
    while (v13);
  }
  return 0;
}

uint64_t CAHDecDaisyAvx::getTileStartCTU(CAHDecDaisyAvx *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 1120);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecDaisyAvx::getTileEndCTU(CAHDecDaisyAvx *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 1120);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecDaisyAvx::populateAvdWork(CAHDecDaisyAvx *this)
{
  uint64_t v1 = this;
  v61[3] = *MEMORY[0x263EF8340];
  unint64_t v4 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)(v4 + 42424);
  uint64_t v3 = *(uint64_t **)(v4 + 15944);
  unsigned int v5 = *((_DWORD *)v3 + 34);
  LODWORD(v4) = *((_DWORD *)v3 + 35);
  unsigned int v6 = v4 * v5;
  int v53 = (v4 * v5 > 1) & (v2[74] >> 1);
  if (v4 * v5 >= 2) {
    unsigned int v6 = 2;
  }
  unsigned int v45 = v6;
  BOOL v7 = (v2[74] & 6) == 4 && (*(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & 1) == 0;
  uint64_t v8 = *((void *)this + 33) + 50700;
  memset(v61, 0, 24);
  int v60 = 0;
  uint64_t v59 = 0;
  if (*(_DWORD *)(*(void *)v2 + 60) == 15) {
    char v9 = 5;
  }
  else {
    char v9 = 4;
  }
  if (v53) {
    uint64_t result = v6;
  }
  else {
    uint64_t result = 1;
  }
  unint64_t v11 = (v7 + result);
  if (result)
  {
    unint64_t v12 = v7;
    do
    {
      v61[v12] = v8 + (v12 - v7) * 36 * (0x1002u / (unsigned __int16)result);
      ++v12;
    }
    while (v12 < v11);
  }
  if (v5)
  {
    unint64_t v13 = 0;
    int v14 = 0;
    uint64_t v15 = v61[v7];
    uint64_t v50 = *v3;
    unint64_t v16 = 0x8E38E38E38E38E39 * ((v15 - v8) >> 2);
    int v17 = -(v4 * v5);
    unsigned int v18 = v3 + 8243;
    unsigned int v19 = v3 + 8210;
    unsigned int v20 = v7;
    uint64_t v54 = (uint64_t)v1;
    uint64_t v46 = v8;
    unsigned int v47 = v3;
    BOOL v42 = v7;
    unint64_t v41 = (v7 + result);
    int v39 = v17;
    unsigned int v40 = result;
    unsigned int v37 = v3 + 8210;
    unsigned int v38 = v3 + 8243;
    do
    {
      if (v4)
      {
        unint64_t v21 = 0;
        unint64_t v44 = v13 + 1;
        unsigned int v48 = (_DWORD *)v19 + v13 + 1;
        unsigned int v49 = (_DWORD *)v19 + v13;
        int v51 = v17 + v14;
        int v43 = v14;
        int v52 = v14;
        do
        {
          int v22 = v51 + v21;
          *(_WORD *)(v15 + 4) = *((_DWORD *)&v59 + v20);
          *(_WORD *)(v15 + 6) = v20;
          *(_WORD *)(v15 + 10) = v52 + v21;
          if (v52 + v21) {
            __int16 v23 = 4;
          }
          else {
            __int16 v23 = 5;
          }
          *(_WORD *)(v15 + 12) = v23;
          if (v22 == -1)
          {
            *(_DWORD *)(v15 + 14) = 262149;
          }
          else
          {
            BOOL v24 = v22 == -2;
            int v25 = v53;
            if (!v24) {
              int v25 = 0;
            }
            *(_WORD *)(v15 + 14) = 4;
            if (v25 == 1) {
              *(_WORD *)(v15 + 16) = 4;
            }
            else {
              *(_WORD *)(v15 + 16) = 0;
            }
          }
          uint64_t v26 = *((void *)v1 + 32);
          if (*(unsigned char *)(v26 + 2834)) {
            uint64_t v27 = *(void *)(v26 + 2840);
          }
          else {
            uint64_t v27 = *(void *)(v26 + 1048) + 8;
          }
          unint64_t v28 = v50 + v3[(v52 + v21) + 18] - *(void *)v27;
          int v29 = 36 * v16;
          unint64_t v30 = HIDWORD(v28);
          if (*(void *)v27 || *(_DWORD *)(v27 + 152) || *(_DWORD *)(v27 + 156))
          {
            if (v30 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315394;
              int v56 = "populateAvdWork";
              __int16 v57 = 1024;
              int v58 = 1629;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            uint64_t result = CAHDec::addToPatcherList(v54, (void *)v27, v29 + 50720, v28, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
            if (*(void *)v27) {
              goto LABEL_62;
            }
          }
          if (*(_DWORD *)(v27 + 152) || *(_DWORD *)(v27 + 156))
          {
LABEL_62:
            if (v30 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315394;
              int v56 = "populateAvdWork";
              __int16 v57 = 1024;
              int v58 = 1630;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            uint64_t result = CAHDec::addToPatcherList(v54, (void *)v27, v29 + 50718, v28, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
          }
          uint64_t v3 = v47;
          unsigned int v31 = &v47[(v52 + v21) + 4114];
          uint64_t v32 = *v31;
          if (HIDWORD(*v31))
          {
            uint64_t v1 = (CAHDecDaisyAvx *)v54;
            uint64_t v33 = v46;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315394;
              int v56 = "populateAvdWork";
              __int16 v57 = 1024;
              int v58 = 1632;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              uint64_t v32 = *v31;
            }
          }
          else
          {
            uint64_t v1 = (CAHDecDaisyAvx *)v54;
            uint64_t v33 = v46;
          }
          *(_DWORD *)(v15 + 24) = v32;
          *(_DWORD *)(v15 + 28) = (*(v18 - 1) >> v9) | (*v49 >> v9 << 16);
          *(_DWORD *)(v15 + 32) = ((*v18 - 1) >> v9) | ((*v48 - 1) >> v9 << 16);
          ++*((_DWORD *)&v59 + v20);
          ++v21;
          uint64_t v34 = v61[v20] + 36;
          v61[v20] = v34;
          if (v53)
          {
            unsigned int v20 = ((int)v21 + v52) % v45;
            uint64_t v34 = v61[v20];
          }
          *(_WORD *)(v15 + 8) = -1;
          unint64_t v16 = 0x8E38E38E38E38E39 * ((v34 - v33) >> 2);
          unint64_t v4 = *((unsigned int *)v47 + 35);
          ++v18;
          uint64_t v15 = v34;
        }
        while (v21 < v4);
        unsigned int v5 = *((_DWORD *)v47 + 34);
        BOOL v7 = v42;
        int v14 = v43 + v21;
        uint64_t v15 = v34;
        unint64_t v11 = v41;
        int v17 = v39;
        uint64_t result = v40;
        unint64_t v13 = v44;
        unsigned int v19 = v37;
        unsigned int v18 = v38;
      }
      else
      {
        ++v13;
      }
    }
    while (v13 < v5);
  }
  if (result)
  {
    unint64_t v35 = v7;
    uint64_t v36 = *((void *)v1 + 33) + 32;
    do
    {
      *(_WORD *)(v36 + 2 * v35 - 6) = *((_DWORD *)&v59 + v35);
      *(_DWORD *)(v36 + 4 * v35) = 36 * (v35 - v7) * (0x1002 / result) + 50700;
      ++v35;
    }
    while (v35 < v11);
    return 0;
  }
  return result;
}

uint64_t CAHDecDaisyAvx::allocWorkBuf_SPS(CAHDecDaisyAvx *this, int *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  int v4 = a2[1];
  unsigned int v6 = *((unsigned __int8 *)a2 + 32);
  if (v6 >= 4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 136315394;
    unsigned int v49 = "allocWorkBuf_SPS";
    __int16 v50 = 1024;
    int v51 = 1781;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v48, 0x12u);
  }
  BOOL v7 = (_DWORD *)*((void *)this + 32);
  int v8 = v7[10681];
  if (!v8 || (int v9 = v7[10682]) == 0)
  {
    int v8 = v5;
    int v9 = v4;
  }
  int v10 = v8 + 31;
  if (v8 < -31) {
    int v10 = v8 + 62;
  }
  unsigned int v11 = v10 >> 5;
  int v12 = v9 + 31;
  if (v9 < -31) {
    int v12 = v9 + 62;
  }
  unsigned int v13 = v12 >> 5;
  unsigned int v14 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v15 = v14;
  }
  else {
    char v15 = 0;
  }
  unsigned int v16 = 32 - __clz(v13 - 1);
  if (v13 >= 2) {
    char v17 = v16;
  }
  else {
    char v17 = 0;
  }
  unsigned int v18 = ((32 << (v17 + v15)) + 127) & 0xFFFFFF80;
  if (!v6)
  {
    unsigned int v27 = 0;
LABEL_27:
    LOBYTE(v28) = 0;
    goto LABEL_28;
  }
  int v19 = v8 << (v6 == 3);
  int v20 = v19 + 31;
  int v21 = v19 + 62;
  if (v20 >= 0) {
    int v21 = v20;
  }
  unsigned int v22 = v21 >> 5;
  if (v6 == 1) {
    ++v9;
  }
  int v23 = v9 >> (v6 == 1);
  int v25 = v23 + 15;
  BOOL v24 = v23 < -15;
  int v26 = v23 + 30;
  if (!v24) {
    int v26 = v25;
  }
  unsigned int v27 = v26 >> 4;
  if (v22 <= 1) {
    goto LABEL_27;
  }
  unsigned int v28 = 32 - __clz(v22 - 1);
LABEL_28:
  unsigned int v29 = 32 - __clz(v27 - 1);
  if (v27 >= 2) {
    char v30 = v29;
  }
  else {
    char v30 = 0;
  }
  unsigned int v31 = ((8 << (v30 + v28)) + 127) & 0xFFFFFF80;
  if (!v6) {
    unsigned int v31 = 0;
  }
  *((_DWORD *)this + 1480) = v18;
  *((_DWORD *)this + 1481) = v31;
  *((_DWORD *)this + 1485) = 9168;
  if (*((_WORD *)a2 + 14) == 64) {
    char v32 = 6;
  }
  else {
    char v32 = 7;
  }
  if (*((_WORD *)a2 + 14) == 64) {
    int v33 = 96;
  }
  else {
    int v33 = 384;
  }
  if (*((_WORD *)a2 + 14) == 64) {
    char v34 = 8;
  }
  else {
    char v34 = 10;
  }
  unsigned int v35 = ((v5 + (1 << v32) - 1) >> v32) * ((v4 + (1 << v32) - 1) >> v32);
  *((_DWORD *)this + 1487) = v35 * v33;
  *((_DWORD *)this + 1486) = v35 << v34;
  if (v7[662])
  {
LABEL_51:
    for (uint64_t i = 0; i != 2288; i += 176)
    {
      uint64_t v42 = *((unsigned int *)this + 1487);
      if (v42
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + i + 13424), v42, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_69;
        }
        int v48 = 136315650;
        unsigned int v49 = "allocWorkBuf_SPS";
        __int16 v50 = 1024;
        int v51 = 1883;
        __int16 v52 = 2080;
        int v53 = "segMap";
        uint64_t v46 = &_os_log_internal;
        goto LABEL_68;
      }
    }
    uint64_t v43 = 0;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 1486);
      if (v44)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v43 + 8008), v44, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 2288) {
        return 0;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v48 = 136315650;
      unsigned int v49 = "allocWorkBuf_SPS";
      __int16 v50 = 1024;
      int v51 = 1889;
      __int16 v52 = 2080;
      int v53 = "MvColo";
      uint64_t v46 = &_os_log_internal;
      goto LABEL_68;
    }
    goto LABEL_69;
  }
  uint64_t v36 = 0;
  while (1)
  {
    uint64_t v37 = *((unsigned int *)this + 1480);
    if (v37
      && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v36 + 3072), v37, 7, 1, 0))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_69;
      }
      int v48 = 136315650;
      unsigned int v49 = "allocWorkBuf_SPS";
      __int16 v50 = 1024;
      int v51 = 1824;
      __int16 v52 = 2080;
      int v53 = "HdrY";
      uint64_t v46 = &_os_log_internal;
      goto LABEL_68;
    }
    uint64_t v38 = *((unsigned int *)this + 1481);
    uint64_t v39 = *((void *)this + 32);
    unsigned int v40 = (_OWORD *)(v39 + v36 + 5536);
    if (!v38)
    {
      *(void *)unsigned int v40 = 0;
      goto LABEL_50;
    }
    if (CAVDDecoder::allocAVDMem(v39, v40, v38, 7, 1, 0)) {
      break;
    }
LABEL_50:
    v36 += 176;
    if (v36 == 2464) {
      goto LABEL_51;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 136315650;
    unsigned int v49 = "allocWorkBuf_SPS";
    __int16 v50 = 1024;
    int v51 = 1829;
    __int16 v52 = 2080;
    int v53 = "HdrC";
    uint64_t v46 = &_os_log_internal;
LABEL_68:
    _os_log_impl(&dword_223977000, v46, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v48, 0x1Cu);
  }
LABEL_69:
  (*(void (**)(CAHDecDaisyAvx *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

void CAHDecDaisyAvx::getPPSWorkBufSize(uint64_t this, unsigned __int8 *a2, char *a3)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  unsigned int v97 = (CAHDecTansyAvx *)this;
  uint64_t v4 = *(void *)(*(void *)(this + 256) + 42424);
  unsigned int v108 = *(_DWORD *)(v4 + 2176);
  int v5 = *(_DWORD *)(v4 + 2180);
  int v6 = a2[32];
  unsigned int v7 = a2[34];
  int v8 = *(_DWORD *)(v4 + 60);
  int v98 = v8 == 15;
  if (v8 == 15) {
    int v9 = 128;
  }
  else {
    int v9 = 64;
  }
  if (a2[33] > v7) {
    unsigned int v7 = a2[33];
  }
  int v10 = ((_WORD)v7 + 9) & 0x1FE;
  unsigned int v90 = v7;
  if (*(_DWORD *)(v4 + 13932))
  {
    unsigned int v11 = *(_DWORD *)(v4 + 13932);
    if (v8 == 15) {
      int v12 = 800;
    }
    else {
      int v12 = 400;
    }
    goto LABEL_10;
  }
  this = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (this)
  {
    *(_DWORD *)long long buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 1920;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
    if (v8 == 15) {
      int v12 = 800;
    }
    else {
      int v12 = 400;
    }
    unsigned int v11 = *(_DWORD *)(v4 + 13932);
    if (v11)
    {
LABEL_10:
      int v13 = 0;
      uint64_t v14 = v11;
      int v15 = *(_DWORD *)(v4 + 2624);
      unsigned int v16 = (int *)(v4 + 2628);
      do
      {
        int v18 = *v16++;
        int v17 = v18;
        int v19 = (v18 - v15) * v12;
        if (v13 <= v19) {
          int v13 = v19;
        }
        int v15 = v17;
        --v14;
      }
      while (v14);
      char v20 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  int v13 = 0;
  char v20 = 1;
LABEL_23:
  int v88 = v13;
  int v112 = v5;
  unsigned int v89 = a3;
  if (v6 == 3) {
    int v21 = 48;
  }
  else {
    int v21 = 32;
  }
  int v107 = v6;
  if (!v6) {
    int v21 = 16;
  }
  int v22 = *(unsigned __int8 *)(v4 + 2172);
  unsigned int v100 = (_DWORD *)v4;
  if (*(unsigned char *)(v4 + 98)) {
    BOOL v23 = v22 == 8;
  }
  else {
    BOOL v23 = 1;
  }
  int v24 = !v23;
  int v99 = v9;
  int v106 = v10;
  int v85 = v8;
  int v96 = v24;
  if (v20)
  {
    unint64_t v104 = 0;
    int v105 = 0;
    unint64_t v25 = 0;
    *(void *)&long long v103 = 0;
    char v26 = v8 == 15;
  }
  else
  {
    uint64_t v27 = 0;
    int v28 = 0;
    unint64_t v25 = 0;
    int v105 = 0;
    unint64_t v104 = 0;
    unsigned int v93 = (v10 * v21) >> 3;
    int v94 = *(unsigned __int8 *)(v4 + 2172);
    if (v8 == 15) {
      char v29 = 7;
    }
    else {
      char v29 = 6;
    }
    char v101 = v29;
    unsigned int v30 = (v22 << v29) >> 3;
    if (!v24) {
      unsigned int v30 = v9;
    }
    unsigned int v92 = v30;
    long long v103 = 0u;
    char v26 = v8 == 15;
    do
    {
      uint64_t v31 = v11 - 1;
      if (v27 == v31) {
        int v32 = v108 - v28;
      }
      else {
        int v32 = (v100[v27 + 657] - v100[v27 + 656]) << v101;
      }
      if (v32 > 4096)
      {
        this = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          *(_DWORD *)long long buf = 136315394;
          int v114 = "getPPSWorkBufSize";
          __int16 v115 = 1024;
          int v116 = 1954;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
          unsigned int v11 = v100[3483];
          uint64_t v31 = v11 - 1;
        }
      }
      if (v32 >= -15) {
        int v33 = v32 + 15;
      }
      else {
        int v33 = v32 + 30;
      }
      unint64_t v34 = v104;
      if (v104 <= (int)((v33 >> 4) * v93)) {
        unint64_t v34 = (int)((v33 >> 4) * v93);
      }
      unint64_t v104 = v34;
      unint64_t v35 = v27 + 1;
      uint64_t v36 = &v100[v27];
      int v37 = v36[657];
      int v38 = v36[656];
      unsigned int v39 = *(_DWORD *)(*(void *)(*((void *)v97 + 32) + 42424) + 2164);
      if (v39 <= v108) {
        unsigned int v39 = v108;
      }
      int v40 = v38 << v101;
      if (v96) {
        int v40 = ((v38 << v101) * v94) >> 3;
      }
      int v41 = v40 + v92 + v92 * (v37 - v38);
      if ((int)v39 < v41) {
        int v41 = v39;
      }
      *((void *)&v42 + 1) = *((void *)&v103 + 1);
      *(int32x2_t *)&long long v42 = vadd_s32((int32x2_t)(*(void *)&vmla_s32((int32x2_t)0x7F0000007FLL, (int32x2_t)__PAIR64__(((v41 + 63) >> 6) - (v40 >> 6), (v37 - v38) << v98), (int32x2_t)0xC0000002CLL) & 0xFFFFFF80FFFFFF80), *(int32x2_t *)&v103);
      long long v103 = v42;
      this = CAHDecTansyAvx::calc_lf_above_pix_tile_size((CAHDecTansyAvx *)this, v10, v107, v108, v98, v27 == 0, v27 == v31, v38, v37);
      v105 += this;
      v28 += v32;
      if (v25 <= 20 * (v33 >> 4)) {
        unint64_t v25 = 20 * (v33 >> 4);
      }
      ++v27;
    }
    while (v35 < v11);
  }
  uint64_t v43 = v100;
  uint64_t v44 = v100[3482];
  unsigned int v45 = v90;
  if (!v44)
  {
    int v102 = 0;
    unsigned int v71 = 0;
    unint64_t v87 = 0;
    unint64_t v111 = 0;
    unsigned int v72 = v97;
    goto LABEL_80;
  }
  unsigned int v86 = &v100[v44 + 721];
  int v46 = *v86;
  int v47 = v100[721];
  long long v48 = 0uLL;
  unsigned int v49 = v100 + 722;
  uint64_t v91 = v100[3482];
  do
  {
    long long v109 = v48;
    int v51 = *v49++;
    int v50 = v51;
    this = CAHDecTansyAvx::calc_lf_left_tile_size((CAHDecTansyAvx *)this, 11, 7, v106, v107, v99, v47, v51, v112, v46);
    *((void *)&v48 + 1) = *((void *)&v109 + 1);
    int v52 = ((v112 + 63) >> 6) - (v47 << v26);
    int v53 = (v51 - v47) << v26;
    if (v51 != v46) {
      int v52 = v53;
    }
    *(int32x2_t *)&long long v48 = vmax_s32(*(int32x2_t *)&v109, (int32x2_t)__PAIR64__(72 * v52, this));
    int v47 = v50;
    --v44;
  }
  while (v44);
  int v102 = 0;
  unint64_t v87 = *(void *)&vadd_s32(*(int32x2_t *)&v48, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80;
  int v54 = *v86;
  int v95 = (v112 + 7) >> 6;
  unsigned int v55 = v100[721];
  long long v56 = 0uLL;
  __int16 v57 = v100 + 722;
  uint64_t v58 = v91;
  do
  {
    long long v110 = v56;
    int v60 = *v57++;
    unsigned int v59 = v60;
    int v61 = (CAHDecTansyAvx *)CAHDecTansyAvx::calc_lr_left_tile_size((CAHDecTansyAvx *)this, 13, 12, v106, v107, v99, v55, v60, v112, v54);
    unsigned int v62 = v61;
    this = CAHDecTansyAvx::calc_lr_left_tile_size(v61, 6, 6, v106, v107, v99, v55, v60, v112, v54);
    if (v60 == v54)
    {
      long long v56 = v110;
      if (v102 > (int)(24 * (v95 - (v55 << v98)) + 24)) {
        goto LABEL_73;
      }
      int v63 = 3 * (v95 + 1 - (v55 << v98));
    }
    else
    {
      int v63 = 3 * ((v59 - v55) << v98);
      long long v56 = v110;
      if (v102 > (int)(24 * ((v59 - v55) << v98))) {
        goto LABEL_73;
      }
    }
    int v102 = 8 * v63;
LABEL_73:
    *(int32x2_t *)&long long v56 = vmax_s32(*(int32x2_t *)&v56, (int32x2_t)__PAIR64__(this, v62));
    unsigned int v55 = v59;
    --v58;
  }
  while (v58);
  int v64 = 0;
  unint64_t v111 = *(void *)&vadd_s32(*(int32x2_t *)&v56, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80;
  int v65 = *v86;
  int v66 = v100[721];
  unsigned int v67 = v100 + 722;
  uint64_t v68 = v91;
  do
  {
    int v70 = *v67++;
    int v69 = v70;
    this = CAHDecIxoraAvx::calc_az_left_tile_size((CAHDecIxoraAvx *)this, v107, v99, v96, v106, v66, v70, v112, v65);
    if (v64 <= (int)this) {
      int v64 = this;
    }
    int v66 = v69;
    --v68;
  }
  while (v68);
  unsigned int v71 = (v64 + 127) & 0xFFFFFF80;
  unsigned int v72 = v97;
  unsigned int v45 = v90;
  uint64_t v44 = v91;
  uint64_t v43 = v100;
LABEL_80:
  BOOL v73 = *(_DWORD *)(*((void *)v72 + 32) + 2644) != 1 || v45 == 0;
  if (v73
    || (v107 != 1 ? (int v74 = 32) : (int v74 = 24),
        v107 ? (int v75 = v74) : (int v75 = 16),
        !CAHDecTansyAvx::isLfPadDis(v72) ? (int v76 = 8) : (int v76 = 0),
        !v44))
  {
    signed int v77 = 0;
    unint64_t v82 = v25;
  }
  else
  {
    signed int v77 = 0;
    unsigned int v78 = (v112 + v76 + 15) >> 4;
    uint64_t v79 = (v44 - 1);
    if (v85 == 15) {
      char v80 = 3;
    }
    else {
      char v80 = 2;
    }
    unsigned int v81 = v43 + 722;
    unint64_t v82 = v25;
    do
    {
      unsigned int v83 = v78;
      if (v79) {
        unsigned int v83 = *v81 << v80;
      }
      signed int v84 = ((v83 - (*(v81 - 1) << v80)) * v75 + 133) & 0xFFFFFF80;
      if (v77 <= v84) {
        signed int v77 = v84;
      }
      ++v81;
      --v79;
      --v44;
    }
    while (v44);
  }
  *(_DWORD *)unsigned int v89 = v88;
  if (HIDWORD(v104) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 2044;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  *((_DWORD *)v89 + 1) = v104;
  *((_DWORD *)v89 + 2) = v105;
  *(void *)(v89 + 12) = v103;
  if (HIDWORD(v82) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 2048;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  *((_DWORD *)v89 + 5) = v82;
  *((void *)v89 + 3) = v87;
  *((void *)v89 + 4) = v111;
  *((_DWORD *)v89 + 10) = (v102 + 127) & 0xFFFFFF80;
  *((_DWORD *)v89 + 11) = v71;
  *((_DWORD *)v89 + 12) = v77;
}

BOOL CAHDecDaisyAvx::ppsWorkBufSizeIncrease(CAHDecDaisyAvx *this, _DWORD *a2, _DWORD *a3)
{
  return *a3 > *a2
      || a3[1] > a2[1]
      || a3[2] > a2[2]
      || a3[3] > a2[3]
      || a3[4] > a2[4]
      || a3[5] > a2[5]
      || a3[6] > a2[6]
      || a3[7] > a2[7]
      || a3[8] > a2[8]
      || a3[9] > a2[9]
      || a3[10] > a2[10]
      || a3[11] > a2[11]
      || a3[12] > a2[12];
}

uint64_t CAHDecDaisyAvx::allocWorkBuf_PPS(CAHDecDaisyAvx *this, void *a2, void *a3, int *a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 32);
  unsigned int v7 = *(_DWORD **)(v6 + 15944);
  if (*a4 > v7[19809])
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *a4;
      if (v9)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecDaisyAvx *)((char *)this + v8 + 3104), v9, 7, 1, 0))break; {
      }
        }
      v8 += 176;
      if (v8 == 528)
      {
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
        v7[19809] = *a4;
        goto LABEL_7;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_103;
    }
    int v36 = 136315650;
    int v37 = "allocWorkBuf_PPS";
    __int16 v38 = 1024;
    int v39 = 2103;
    __int16 v40 = 2080;
    int v41 = "OvpAboveInfo";
    unsigned int v11 = &_os_log_internal;
    goto LABEL_102;
  }
LABEL_7:
  uint64_t v10 = a4[1];
  if ((int)v10 > v7[19810])
  {
    if (v10)
    {
      if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 227, v10, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v36 = 136315650;
          int v37 = "allocWorkBuf_PPS";
          __int16 v38 = 1024;
          int v39 = 2111;
          __int16 v40 = 2080;
          int v41 = "IPAbovePixel";
          unsigned int v11 = &_os_log_internal;
LABEL_102:
          _os_log_impl(&dword_223977000, v11, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v36, 0x1Cu);
          goto LABEL_103;
        }
        goto LABEL_103;
      }
      int v12 = a4[1];
      uint64_t v6 = *((void *)this + 32);
      unsigned int v7 = *(_DWORD **)(v6 + 15944);
    }
    else
    {
      int v12 = 0;
    }
    v7[19810] = v12;
  }
  uint64_t v13 = a4[2];
  if ((int)v13 <= v7[19811])
  {
LABEL_25:
    uint64_t v15 = a4[3];
    if ((int)v15 > v7[19812])
    {
      if (v15)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 249, v15, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2125;
            __int16 v40 = 2080;
            int v41 = "LfAboveInfo";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v16 = a4[3];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v16 = 0;
      }
      v7[19812] = v16;
    }
    uint64_t v17 = a4[4];
    if ((int)v17 > v7[19813])
    {
      if (v17)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 293, v17, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2132;
            __int16 v40 = 2080;
            int v41 = "RfAboveInfo";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v18 = a4[4];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v18 = 0;
      }
      v7[19813] = v18;
    }
    uint64_t v19 = a4[5];
    if ((int)v19 > v7[19814])
    {
      if (v19)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 359, v19, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2139;
            __int16 v40 = 2080;
            int v41 = "MvAboveInfo";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v20 = a4[5];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v20 = 0;
      }
      v7[19814] = v20;
    }
    uint64_t v21 = a4[6];
    if ((int)v21 > v7[19815])
    {
      if (v21)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 260, v21, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2146;
            __int16 v40 = 2080;
            int v41 = "LfLeftPixel";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v22 = a4[6];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v22 = 0;
      }
      v7[19815] = v22;
    }
    uint64_t v23 = a4[7];
    if ((int)v23 > v7[19816])
    {
      if (v23)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 271, v23, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2153;
            __int16 v40 = 2080;
            int v41 = "LfLeftInfo";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v24 = a4[7];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v24 = 0;
      }
      v7[19816] = v24;
    }
    uint64_t v25 = a4[8];
    if ((int)v25 > v7[19817])
    {
      if (v25)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 282, v25, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2160;
            __int16 v40 = 2080;
            int v41 = "SrLeftPixel";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v26 = a4[8];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v26 = 0;
      }
      v7[19817] = v26;
    }
    uint64_t v27 = a4[9];
    if ((int)v27 > v7[19818])
    {
      if (v27)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 304, v27, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2167;
            __int16 v40 = 2080;
            int v41 = "RfLeftPixel";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v28 = a4[9];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v28 = 0;
      }
      v7[19818] = v28;
    }
    uint64_t v29 = a4[10];
    if ((int)v29 > v7[19819])
    {
      if (v29)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 315, v29, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2174;
            __int16 v40 = 2080;
            int v41 = "RfLeftInfo";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v30 = a4[10];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v30 = 0;
      }
      v7[19819] = v30;
    }
    uint64_t v31 = a4[11];
    if ((int)v31 > v7[19820])
    {
      if (v31)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 348, v31, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2181;
            __int16 v40 = 2080;
            int v41 = "AzLeftPixel";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v32 = a4[11];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v32 = 0;
      }
      v7[19820] = v32;
    }
    uint64_t v33 = a4[12];
    if ((int)v33 <= v7[19821]) {
      return 0;
    }
    if (v33)
    {
      if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 337, v33, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v36 = 136315650;
          int v37 = "allocWorkBuf_PPS";
          __int16 v38 = 1024;
          int v39 = 2188;
          __int16 v40 = 2080;
          int v41 = "SWrLeftPixel";
          unsigned int v11 = &_os_log_internal;
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      int v35 = a4[12];
      unsigned int v7 = *(_DWORD **)(*((void *)this + 32) + 15944);
    }
    else
    {
      int v35 = 0;
    }
    uint64_t result = 0;
    v7[19821] = v35;
    return result;
  }
  if (!v13)
  {
    int v14 = 0;
LABEL_24:
    v7[19811] = v14;
    goto LABEL_25;
  }
  if (!CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 238, v13, 7, 1, 0))
  {
    int v14 = a4[2];
    uint64_t v6 = *((void *)this + 32);
    unsigned int v7 = *(_DWORD **)(v6 + 15944);
    goto LABEL_24;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v36 = 136315650;
    int v37 = "allocWorkBuf_PPS";
    __int16 v38 = 1024;
    int v39 = 2118;
    __int16 v40 = 2080;
    int v41 = "LfAbovePixel";
    unsigned int v11 = &_os_log_internal;
    goto LABEL_102;
  }
LABEL_103:
  (*(void (**)(CAHDecDaisyAvx *, int *))(*(void *)this + 152))(this, a4);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecDaisyAvx::freeWorkBuf_SPS(CAHDecDaisyAvx *this)
{
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    for (uint64_t i = 0; i != 2464; i += 176)
    {
      uint64_t v3 = *((void *)this + 32);
      if (*(void *)(v3 + i + 3072))
      {
        CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 3072));
        uint64_t v4 = (_OWORD *)(*((void *)this + 32) + i);
        v4[192] = 0u;
        v4[193] = 0u;
        v4[194] = 0u;
        v4[195] = 0u;
        v4[196] = 0u;
        v4[197] = 0u;
        v4[198] = 0u;
        v4[199] = 0u;
        v4[200] = 0u;
        v4[201] = 0u;
        v4[202] = 0u;
        uint64_t v3 = *((void *)this + 32);
      }
      if (*(void *)(v3 + i + 5536))
      {
        CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 5536));
        int v5 = (_OWORD *)(*((void *)this + 32) + i);
        v5[346] = 0u;
        v5[347] = 0u;
        v5[348] = 0u;
        v5[349] = 0u;
        v5[350] = 0u;
        v5[351] = 0u;
        v5[352] = 0u;
        v5[353] = 0u;
        v5[354] = 0u;
        v5[355] = 0u;
        v5[356] = 0u;
      }
    }
  }
  for (uint64_t j = 0; j != 2288; j += 176)
  {
    uint64_t v7 = *((void *)this + 32);
    if (*(void *)(v7 + j + 8008))
    {
      CAVDDecoder::deallocAVDMem(v7, (uint64_t *)(v7 + j + 8008));
      uint64_t v8 = (_OWORD *)(*((void *)this + 32) + j + 8008);
      *uint64_t v8 = 0u;
      v8[1] = 0u;
      v8[2] = 0u;
      v8[3] = 0u;
      v8[4] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      v8[10] = 0u;
    }
  }
  for (uint64_t k = 0; k != 2288; k += 176)
  {
    uint64_t result = *((void *)this + 32);
    if (*(void *)(result + k + 13424))
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + k + 13424));
      unsigned int v11 = (_OWORD *)(*((void *)this + 32) + k);
      v11[839] = 0u;
      v11[840] = 0u;
      v11[841] = 0u;
      v11[842] = 0u;
      v11[843] = 0u;
      v11[844] = 0u;
      v11[845] = 0u;
      v11[846] = 0u;
      v11[847] = 0u;
      v11[848] = 0u;
      v11[849] = 0u;
    }
  }
  return result;
}

double CAHDecDaisyAvx::freeWorkBuf_PPS(CAHDecDaisyAvx *this, _DWORD *a2)
{
  if (!a2 || (uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944), *a2 > v4[19809]))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (char *)this + 3104;
    do
    {
      uint64_t v7 = &v6[v5];
      if (*(void *)&v6[v5])
      {
        CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)&v6[v5]);
        double result = 0.0;
        *(_OWORD *)uint64_t v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        *((_OWORD *)v7 + 2) = 0u;
        *((_OWORD *)v7 + 3) = 0u;
        *((_OWORD *)v7 + 4) = 0u;
        *((_OWORD *)v7 + 5) = 0u;
        *((_OWORD *)v7 + 6) = 0u;
        *((_OWORD *)v7 + 7) = 0u;
        *((_OWORD *)v7 + 8) = 0u;
        *((_OWORD *)v7 + 9) = 0u;
        *((_OWORD *)v7 + 10) = 0u;
      }
      v5 += 176;
    }
    while (v5 != 528);
    if (!a2) {
      goto LABEL_10;
    }
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
  }
  if (a2[1] <= v4[19810]) {
    goto LABEL_14;
  }
LABEL_10:
  if (*((void *)this + 454))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 454);
    double result = 0.0;
    *((_OWORD *)this + 227) = 0u;
    *((_OWORD *)this + 228) = 0u;
    *((_OWORD *)this + 229) = 0u;
    *((_OWORD *)this + 230) = 0u;
    *((_OWORD *)this + 231) = 0u;
    *((_OWORD *)this + 232) = 0u;
    *((_OWORD *)this + 233) = 0u;
    *((_OWORD *)this + 234) = 0u;
    *((_OWORD *)this + 235) = 0u;
    *((_OWORD *)this + 236) = 0u;
    *((_OWORD *)this + 237) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_14:
    if (a2[2] <= v4[19811]) {
      goto LABEL_19;
    }
  }
  if (*((void *)this + 476))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 476);
    double result = 0.0;
    *((_OWORD *)this + 238) = 0u;
    *((_OWORD *)this + 239) = 0u;
    *((_OWORD *)this + 240) = 0u;
    *((_OWORD *)this + 241) = 0u;
    *((_OWORD *)this + 242) = 0u;
    *((_OWORD *)this + 243) = 0u;
    *((_OWORD *)this + 244) = 0u;
    *((_OWORD *)this + 245) = 0u;
    *((_OWORD *)this + 246) = 0u;
    *((_OWORD *)this + 247) = 0u;
    *((_OWORD *)this + 248) = 0u;
  }
  if (!a2) {
    goto LABEL_20;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_19:
  if (a2[3] <= v4[19812]) {
    goto LABEL_24;
  }
LABEL_20:
  if (*((void *)this + 498))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 498);
    double result = 0.0;
    *((_OWORD *)this + 249) = 0u;
    *((_OWORD *)this + 250) = 0u;
    *((_OWORD *)this + 251) = 0u;
    *((_OWORD *)this + 252) = 0u;
    *((_OWORD *)this + 253) = 0u;
    *((_OWORD *)this + 254) = 0u;
    *((_OWORD *)this + 255) = 0u;
    *((_OWORD *)this + 256) = 0u;
    *((_OWORD *)this + 257) = 0u;
    *((_OWORD *)this + 258) = 0u;
    *((_OWORD *)this + 259) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_24:
    if (a2[4] <= v4[19813]) {
      goto LABEL_29;
    }
  }
  if (*((void *)this + 586))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 586);
    double result = 0.0;
    *((_OWORD *)this + 293) = 0u;
    *((_OWORD *)this + 294) = 0u;
    *((_OWORD *)this + 295) = 0u;
    *((_OWORD *)this + 296) = 0u;
    *((_OWORD *)this + 297) = 0u;
    *((_OWORD *)this + 298) = 0u;
    *((_OWORD *)this + 299) = 0u;
    *((_OWORD *)this + 300) = 0u;
    *((_OWORD *)this + 301) = 0u;
    *((_OWORD *)this + 302) = 0u;
    *((_OWORD *)this + 303) = 0u;
  }
  if (!a2) {
    goto LABEL_30;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_29:
  if (a2[5] <= v4[19814]) {
    goto LABEL_34;
  }
LABEL_30:
  if (*((void *)this + 718))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 718);
    double result = 0.0;
    *((_OWORD *)this + 359) = 0u;
    *((_OWORD *)this + 360) = 0u;
    *((_OWORD *)this + 361) = 0u;
    *((_OWORD *)this + 362) = 0u;
    *((_OWORD *)this + 363) = 0u;
    *((_OWORD *)this + 364) = 0u;
    *((_OWORD *)this + 365) = 0u;
    *((_OWORD *)this + 366) = 0u;
    *((_OWORD *)this + 367) = 0u;
    *((_OWORD *)this + 368) = 0u;
    *((_OWORD *)this + 369) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_34:
    if (a2[6] <= v4[19815]) {
      goto LABEL_39;
    }
  }
  if (*((void *)this + 520))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 520);
    double result = 0.0;
    *((_OWORD *)this + 260) = 0u;
    *((_OWORD *)this + 261) = 0u;
    *((_OWORD *)this + 262) = 0u;
    *((_OWORD *)this + 263) = 0u;
    *((_OWORD *)this + 264) = 0u;
    *((_OWORD *)this + 265) = 0u;
    *((_OWORD *)this + 266) = 0u;
    *((_OWORD *)this + 267) = 0u;
    *((_OWORD *)this + 268) = 0u;
    *((_OWORD *)this + 269) = 0u;
    *((_OWORD *)this + 270) = 0u;
  }
  if (!a2) {
    goto LABEL_40;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_39:
  if (a2[7] <= v4[19816]) {
    goto LABEL_44;
  }
LABEL_40:
  if (*((void *)this + 542))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 542);
    double result = 0.0;
    *((_OWORD *)this + 271) = 0u;
    *((_OWORD *)this + 272) = 0u;
    *((_OWORD *)this + 273) = 0u;
    *((_OWORD *)this + 274) = 0u;
    *((_OWORD *)this + 275) = 0u;
    *((_OWORD *)this + 276) = 0u;
    *((_OWORD *)this + 277) = 0u;
    *((_OWORD *)this + 278) = 0u;
    *((_OWORD *)this + 279) = 0u;
    *((_OWORD *)this + 280) = 0u;
    *((_OWORD *)this + 281) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_44:
    if (a2[8] <= v4[19817]) {
      goto LABEL_49;
    }
  }
  if (*((void *)this + 564))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 564);
    double result = 0.0;
    *((_OWORD *)this + 282) = 0u;
    *((_OWORD *)this + 283) = 0u;
    *((_OWORD *)this + 284) = 0u;
    *((_OWORD *)this + 285) = 0u;
    *((_OWORD *)this + 286) = 0u;
    *((_OWORD *)this + 287) = 0u;
    *((_OWORD *)this + 288) = 0u;
    *((_OWORD *)this + 289) = 0u;
    *((_OWORD *)this + 290) = 0u;
    *((_OWORD *)this + 291) = 0u;
    *((_OWORD *)this + 292) = 0u;
  }
  if (!a2) {
    goto LABEL_50;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_49:
  if (a2[9] <= v4[19818]) {
    goto LABEL_54;
  }
LABEL_50:
  if (*((void *)this + 608))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 608);
    double result = 0.0;
    *((_OWORD *)this + 304) = 0u;
    *((_OWORD *)this + 305) = 0u;
    *((_OWORD *)this + 306) = 0u;
    *((_OWORD *)this + 307) = 0u;
    *((_OWORD *)this + 308) = 0u;
    *((_OWORD *)this + 309) = 0u;
    *((_OWORD *)this + 310) = 0u;
    *((_OWORD *)this + 311) = 0u;
    *((_OWORD *)this + 312) = 0u;
    *((_OWORD *)this + 313) = 0u;
    *((_OWORD *)this + 314) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_54:
    if (a2[10] <= v4[19819]) {
      goto LABEL_59;
    }
  }
  if (*((void *)this + 630))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 630);
    double result = 0.0;
    *((_OWORD *)this + 315) = 0u;
    *((_OWORD *)this + 316) = 0u;
    *((_OWORD *)this + 317) = 0u;
    *((_OWORD *)this + 318) = 0u;
    *((_OWORD *)this + 319) = 0u;
    *((_OWORD *)this + 320) = 0u;
    *((_OWORD *)this + 321) = 0u;
    *((_OWORD *)this + 322) = 0u;
    *((_OWORD *)this + 323) = 0u;
    *((_OWORD *)this + 324) = 0u;
    *((_OWORD *)this + 325) = 0u;
  }
  if (!a2) {
    goto LABEL_60;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_59:
  if (a2[11] <= v4[19820]) {
    goto LABEL_64;
  }
LABEL_60:
  if (*((void *)this + 696))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 696);
    double result = 0.0;
    *((_OWORD *)this + 348) = 0u;
    *((_OWORD *)this + 349) = 0u;
    *((_OWORD *)this + 350) = 0u;
    *((_OWORD *)this + 351) = 0u;
    *((_OWORD *)this + 352) = 0u;
    *((_OWORD *)this + 353) = 0u;
    *((_OWORD *)this + 354) = 0u;
    *((_OWORD *)this + 355) = 0u;
    *((_OWORD *)this + 356) = 0u;
    *((_OWORD *)this + 357) = 0u;
    *((_OWORD *)this + 358) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_64:
    if (a2[12] <= v4[19821]) {
      return result;
    }
  }
  if (*((void *)this + 674))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 674);
    double result = 0.0;
    *((_OWORD *)this + 337) = 0u;
    *((_OWORD *)this + 338) = 0u;
    *((_OWORD *)this + 339) = 0u;
    *((_OWORD *)this + 340) = 0u;
    *((_OWORD *)this + 341) = 0u;
    *((_OWORD *)this + 342) = 0u;
    *((_OWORD *)this + 343) = 0u;
    *((_OWORD *)this + 344) = 0u;
    *((_OWORD *)this + 345) = 0u;
    *((_OWORD *)this + 346) = 0u;
    *((_OWORD *)this + 347) = 0u;
  }
  return result;
}

uint64_t CAHDecDaisyAvx::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 5936) = a2;
  return this;
}

uint64_t CAHDecDaisyAvx::initPicture(CAHDecDaisyAvx *this)
{
  return 0;
}

uint64_t CAHDecDaisyAvx::populateSlices(CAHDecDaisyAvx *this)
{
  return 0;
}

uint64_t CAHDecDaisyAvx::getTileIdxAbove(CAHDecDaisyAvx *this)
{
  return 0;
}

uint64_t CAHDecDaisyAvx::decodeBuffer(CAHDecDaisyAvx *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecDaisyAvx::decodeBufferSize(CAHDecDaisyAvx *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecDaisyAvx::decHdrYLinAddr(CAHDecDaisyAvx *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 3072);
}

uint64_t CAHDecDaisyAvx::decHdrCLinAddr(CAHDecDaisyAvx *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 5536);
}

uint64_t CAHDecDaisyAvx::decHdrYSize(CAHDecDaisyAvx *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 3116);
}

uint64_t CAHDecDaisyAvx::decHdrCSize(CAHDecDaisyAvx *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 5580);
}

uint64_t CAHDecDaisyAvx::decHdrYStride(CAHDecDaisyAvx *this)
{
  return *((unsigned int *)this + 1482);
}

uint64_t CAHDecDaisyAvx::decHdrCStride(CAHDecDaisyAvx *this)
{
  return *((unsigned int *)this + 1483);
}

CAHDecDahliaHevc *createDahliaHevcDecoder(CAVDHevcDecoder *a1)
{
  uint64_t v2 = (CAHDecDahliaHevc *)operator new(0x33B8uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecDahliaHevc::CAHDecDahliaHevc(v2, a1);
  }
  return v3;
}

void sub_223A52474(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecDahliaHevc::CAHDecDahliaHevc(CAHDecDahliaHevc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73FDF8;
  *(_DWORD *)(v1 + 456) = 417772;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecDahliaHevc::CAHDecDahliaHevc(CAHDecDahliaHevc *this, CAVDHevcDecoder *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73FDF8;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 417772;
  *(_DWORD *)(v4 + 8) = 2764;
  *(_OWORD *)(v4 + 16) = xmmword_223ADAAC0;
  *(_DWORD *)(v4 + 32) = 4;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 417772, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      uint64_t v7 = "CAHDecDahliaHevc";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v6, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v5 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v5;
    *((void *)this + 34) = v5;
    bzero((char *)this + 528, 0x3180uLL);
  }
}

void sub_223A52638(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecDahliaHevc::~CAHDecDahliaHevc(CAHDecDahliaHevc *this)
{
  *(void *)this = &unk_26D73FDF8;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecDahliaHevc::~CAHDecDahliaHevc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecDahliaHevc::initPicture(CAHDecDahliaHevc *this, int a2, __int16 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 114) = 417772;
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v4;
  if (v4)
  {
    bzero(v4, 0x65FECuLL);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v7 + 16) = a2;
    *(_WORD *)(v7 + 24) = 257;
    *(_WORD *)(v7 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 3307) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "initPicture";
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v9, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecDahliaHevc::populateSlices(CAHDecDahliaHevc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2764;
    uint64_t v5 = a2;
    do
    {
      CAHDecDahliaHevc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 364;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecDahliaHevc::populateSliceRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 256);
  int v6 = *(_DWORD *)(v5 + 8320);
  int v7 = *(_DWORD *)(v5 + 8324);
  uint64_t v8 = *(void *)(v5 + 8288);
  uint64_t v9 = *(void *)(v5 + 8280);
  uint64_t v10 = *(void *)(v5 + 8296);
  int v11 = a3;
  uint64_t v12 = v9 + 23176 * v6;
  *(_DWORD *)(a1 + 460) = 6 * *(_DWORD *)(v12 + 3636);
  LODWORD(v12) = *(_DWORD *)(v12 + 22880);
  *(_DWORD *)(a2 + 352) = 0x1000000;
  uint64_t v13 = v10 + 2360 * (int)a3;
  unsigned int v14 = (((*(_DWORD *)(v13 + 36) / v12) & 0xFFF) << 12) | 0x1000000;
  *(_DWORD *)(a2 + 352) = v14;
  *(_DWORD *)(a2 + 352) = v14 & 0xFFFFF000 | (*(_DWORD *)(v13 + 36) % v12) & 0xFFF;
  *(_DWORD *)(a2 + 4) = 0;
  char v15 = *(unsigned char *)(v8 + 9856 * v7 + 6477);
  if (v15) {
    char v15 = *(unsigned char *)(v10 + 2360 * (int)a3 + 1880);
  }
  int v16 = v15 & 1;
  *(_DWORD *)(a2 + 4) = v16;
  uint64_t v17 = v10 + 2360 * (int)a3;
  int v19 = *(_DWORD *)(v17 + 44);
  int v18 = (int *)(v17 + 44);
  if (v19 == 2) {
    LOBYTE(v20) = 0;
  }
  else {
    int v20 = 5 - *(_DWORD *)(v10 + 2360 * (int)a3 + 1864);
  }
  unsigned int v21 = v16 & 0xFFFFFFF1 | (2 * (v20 & 7));
  *(_DWORD *)(a2 + 4) = v21;
  if (*v18)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *(unsigned __int8 *)(v10 + 2360 * (int)a3 + 616);
    if (*(unsigned char *)(v10 + 2360 * (int)a3 + 616)) {
      int v22 = *(unsigned char *)(v10 + 2360 * (int)a3 + 762) == 0;
    }
  }
  int v23 = v21 | (16 * v22);
  *(_DWORD *)(a2 + 4) = v23;
  if (*v18 == 2)
  {
    char v24 = 0;
  }
  else
  {
    char v24 = *(unsigned char *)(v8 + 9856 * v7 + 17);
    if (v24) {
      char v24 = *(unsigned char *)(v10 + 2360 * (int)a3 + 761);
    }
  }
  unsigned int v25 = v23 & 0xFFFFFFDF | (32 * (v24 & 1));
  *(_DWORD *)(a2 + 4) = v25;
  if (*v18) {
    int v26 = 0;
  }
  else {
    int v26 = *(unsigned char *)(v10 + 2360 * (int)a3 + 760) == 0;
  }
  char v27 = 0;
  int v28 = v25 | (v26 << 6);
  *(_DWORD *)(a2 + 4) = v28;
  uint64_t v29 = v10 + 2360 * (int)a3;
  int v30 = (*(_DWORD *)(v29 + 624) & 0xF) << 7;
  if (*(_DWORD *)(v29 + 624) == -1) {
    int v30 = 0;
  }
  int v31 = v30 | v28;
  *(_DWORD *)(a2 + 4) = v31;
  int v32 = (*(_DWORD *)(v29 + 620) & 0xF) << 11;
  if (*(_DWORD *)(v29 + 620) == -1) {
    int v32 = 0;
  }
  int v33 = v31 | v32;
  *(_DWORD *)(a2 + 4) = v33;
  if (*v18 != 2)
  {
    char v27 = *(unsigned char *)(v9 + 23176 * v6 + 22284);
    if (v27) {
      char v27 = *(unsigned char *)(v10 + 2360 * (int)a3 + 616);
    }
  }
  uint64_t v129 = v8;
  int v130 = v7;
  unsigned int v34 = v33 & 0xFFFF7FFF | ((v27 & 1) << 15);
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a2 + 4) = v34 & 0xFFFCFFFF | ((*v18 & 3) << 16);
  *(_DWORD *)(a2 + 336) = 0;
  if (*v18 > 1
    || !*(void *)(v10 + 2360 * (int)a3 + 2344)
    || *(_DWORD *)(a1 + 13228)
    || ((*(void (**)(void, uint64_t))(**(void **)(a1 + 256) + 344))(*(void *)(a1 + 256), a3),
        uint64_t v35 = *(void *)(a1 + 256),
        *(_DWORD *)(v35 + 9032))
    || (*(_DWORD *)(a1 + 13228) = 1, *(_DWORD *)(a2 + 4) |= 0x40000u, !*(void *)(v35 + 8856))
    && !*(_DWORD *)(v35 + 9008)
    && !*(_DWORD *)(v35 + 9012)
    || (uint64_t result = CAHDec::addToPatcherList(a1, (void *)(v35 + 8856), 364 * (int)a3 + 3100, 0, 0xFFFFFFFFFLL, 8, 0xFFFFFFF, 4), !result))
  {
    int v128 = v6;
    int v36 = (unsigned int *)(v29 + 624);
    int v37 = (unsigned int *)(v29 + 620);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
    uint64_t v38 = a1;
    (*(void (**)(void, void))(**(void **)(a1 + 256) + 352))(*(void *)(a1 + 256), 0);
    uint64_t v40 = v129;
    int v39 = v130;
    if (*v18 > 1) {
      goto LABEL_38;
    }
    uint64_t v41 = v5 + 8456;
    if ((*v37 & 0x80000000) != 0)
    {
      uint64_t v43 = 0;
      if (*v18) {
        goto LABEL_38;
      }
    }
    else
    {
      int v42 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = a2 + 8;
      do
      {
        uint64_t v45 = v43;
        *(_DWORD *)(v44 + 4 * v43) = v42 & 0xF0 | 0x2DC00000;
        *(_DWORD *)(v44 + 4 * v43) = v42 & 0xF0 | 0x2DC00000 | *(_DWORD *)(v41 + 4 * v43) & 0xF;
        ++v43;
        v42 += 16;
      }
      while (v45 < (int)*v37);
      if (*v18) {
        goto LABEL_38;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v38 + 256) + 352))(*(void *)(v38 + 256), 1, a3);
    uint64_t v40 = v129;
    int v39 = v130;
    if ((*v36 & 0x80000000) == 0)
    {
      int v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = a2 + 4 * v43 + 8;
      do
      {
        *(_DWORD *)(v48 + 4 * v47) = v46 & 0xF0 | 0x2DC00100;
        *(_DWORD *)(v48 + 4 * v47) = v46 & 0xF0 | 0x2DC00100 | *(_DWORD *)(v41 + 4 * v47) & 0xF;
        v46 += 16;
      }
      while (v47++ < (int)*v36);
    }
LABEL_38:
    *(void *)(a2 + 128) = 0x2DD0000000000000;
    int v50 = *v18;
    if (*v18)
    {
      uint64_t v51 = v38;
      if (v50 != 1 || !*(unsigned char *)(v40 + 9856 * v39 + 49)) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v51 = v38;
      if (!*(unsigned char *)(v40 + 9856 * v39 + 50)) {
        goto LABEL_62;
      }
    }
    unsigned int v52 = 0;
    unsigned int v53 = 0;
    uint64_t v54 = v10 + 2360 * v11;
    uint64_t v55 = v40 + 9856 * v39;
    long long v56 = (unsigned char *)(v55 + 50);
    __int16 v57 = (unsigned char *)(v55 + 49);
    if (v50) {
      uint64_t v58 = v57;
    }
    else {
      uint64_t v58 = v56;
    }
    int v59 = ((*v58 & 1) << 6) | 0x2DD00000;
    *(_DWORD *)(a2 + 132) = v59;
    char v60 = *(_DWORD *)(v54 + 768);
    unsigned int v61 = v59 & 0xFFFFFFC7 | (8 * (*(_DWORD *)(v54 + 768) & 7));
    *(_DWORD *)(a2 + 132) = v61;
    unsigned __int8 v62 = (*(_DWORD *)(v54 + 772) + *(_DWORD *)(v54 + 768)) & 7;
    *(_DWORD *)(a2 + 132) = v61 & 0xFFFFFFF8 | v62;
    int v63 = 1 << (v60 & 7);
    int v64 = 1 << v62;
    do
    {
      uint64_t v65 = v52;
      if (*(unsigned char *)(v10 + 2360 * v11 + v52 + 776))
      {
        int v66 = ((v52 & 0xF) << 9) | 0x2DE04000;
        uint64_t v67 = a2 + 4 * v53;
        *(_DWORD *)(v67 + 136) = v66;
        uint64_t v68 = v10 + 2360 * v11 + 4 * v65;
        *(_DWORD *)(v67 + 136) = ((unsigned __int16)*(_DWORD *)(v68 + 808) + (_WORD)v63) & 0x1FF | v66;
        *(_DWORD *)(v67 + 232) = 770703360;
        *(_DWORD *)(v67 + 232) = *(unsigned __int16 *)(v68 + 872) | 0x2DF00000;
        ++v53;
      }
      if (*(unsigned char *)(v10 + 2360 * v11 + v65 + 792))
      {
        uint64_t v69 = 0;
        char v70 = 1;
        do
        {
          char v71 = v70;
          int v72 = ((v65 & 0xF) << 9) | (v69 << 14) | 0x2DE08000;
          uint64_t v73 = a2 + 4 * v53;
          *(_DWORD *)(v73 + 136) = v72;
          uint64_t v74 = v10 + 2360 * v11 + 8 * v65 + 4 * v69;
          *(_DWORD *)(v73 + 136) = ((unsigned __int16)*(_DWORD *)(v74 + 936) + (_WORD)v64) & 0x1FF | v72;
          *(_DWORD *)(v73 + 232) = 770703360;
          *(_DWORD *)(v73 + 232) = *(unsigned __int16 *)(v74 + 1608) | 0x2DF00000;
          ++v53;
          uint64_t v69 = 1;
          char v70 = 0;
        }
        while ((v71 & 1) != 0);
      }
      unsigned int v52 = v65 + 1;
    }
    while ((int)v65 + 1 <= *v37);
    if (!*v18)
    {
      unsigned int v75 = 0;
      do
      {
        uint64_t v76 = v75;
        if (*(unsigned char *)(v10 + 2360 * v11 + v75 + 1192))
        {
          int v77 = ((v75 & 0xF) << 9) | 0x2DE06000;
          uint64_t v78 = a2 + 4 * v53;
          *(_DWORD *)(v78 + 136) = v77;
          uint64_t v79 = v10 + 2360 * v11 + 4 * v76;
          *(_DWORD *)(v78 + 136) = ((unsigned __int16)*(_DWORD *)(v79 + 1224) + (_WORD)v63) & 0x1FF | v77;
          *(_DWORD *)(v78 + 232) = 770703360;
          *(_DWORD *)(v78 + 232) = *(unsigned __int16 *)(v79 + 1288) | 0x2DF00000;
          ++v53;
        }
        if (*(unsigned char *)(v10 + 2360 * v11 + v76 + 1208))
        {
          uint64_t v80 = 0;
          char v81 = 1;
          do
          {
            char v82 = v81;
            int v83 = ((v76 & 0xF) << 9) | (v80 << 14) | 0x2DE0A000;
            uint64_t v84 = a2 + 4 * v53;
            *(_DWORD *)(v84 + 136) = v83;
            uint64_t v85 = v10 + 2360 * v11 + 8 * v76 + 4 * v80;
            *(_DWORD *)(v84 + 136) = ((unsigned __int16)*(_DWORD *)(v85 + 1352) + (_WORD)v64) & 0x1FF | v83;
            *(_DWORD *)(v84 + 232) = 770703360;
            *(_DWORD *)(v84 + 232) = *(unsigned __int16 *)(v85 + 1736) | 0x2DF00000;
            ++v53;
            uint64_t v80 = 1;
            char v81 = 0;
          }
          while ((v82 & 1) != 0);
        }
        unsigned int v75 = v76 + 1;
      }
      while ((int)v76 + 1 <= *v36);
    }
    *(_DWORD *)(a2 + 128) = v53;
LABEL_62:
    uint64_t v86 = v40 + 9856 * v39;
    int v89 = *(unsigned __int8 *)(v86 + 48);
    unint64_t v87 = (unsigned __int8 *)(v86 + 48);
    LOBYTE(v88) = v89;
    if (v89) {
      int v88 = *(_DWORD *)(v10 + 2360 * v11 + 1876);
    }
    unsigned int v90 = *(_DWORD *)(a2 + 328) & 0xFFFFFFE0 | ((_BYTE)v88 + *((_DWORD *)v87 - 1)) & 0x1F;
    *(_DWORD *)(a2 + 328) = v90;
    int v91 = *v87;
    if (v91) {
      int v91 = *(_DWORD *)(v10 + 2360 * v11 + 1872);
    }
    unsigned int v92 = v90 & 0xFFFFFC1F | (32 * (((_BYTE)v91 + *(_DWORD *)(v40 + 9856 * v39 + 40)) & 0x1F));
    *(_DWORD *)(a2 + 328) = v92;
    unsigned int v93 = (_DWORD *)(v40 + 9856 * v39);
    int v94 = v93[7] + *(_DWORD *)(v10 + 2360 * v11 + 1868) + 26;
    *(_DWORD *)(a2 + 328) = v92 & 0xE03FF | ((v94 & 0x7F) << 10) | 0x2D900000;
    *(_DWORD *)(*(void *)(v51 + 256) + 2868) = *(_DWORD *)(v51 + 460) + (v94 << 25 >> 25);
    *(_DWORD *)(a2 + 332) = 0;
    int v95 = v93[1635] & 7;
    *(_DWORD *)(a2 + 332) = v95;
    unsigned int v96 = v95 & 0xFFFFFFC7 | (8 * (v93[1634] & 7));
    *(_DWORD *)(a2 + 332) = v96;
    unsigned int v97 = (char *)(v9 + 23176 * v128 + 10649);
    char v98 = *v97;
    if (*v97) {
      char v98 = *(unsigned char *)(v10 + 2360 * v11 + 618);
    }
    unsigned int v99 = v96 & 0xFFFFFFBF | ((v98 & 1) << 6);
    *(_DWORD *)(a2 + 332) = v99;
    if (*v97) {
      char v100 = *(unsigned char *)(v10 + 2360 * v11 + 617);
    }
    else {
      char v100 = 0;
    }
    int v101 = (v98 & 1) << 6;
    int v102 = (v100 & 1) << 7;
    unsigned int v103 = v99 & 0xFFFFFF7F | v102;
    *(_DWORD *)(a2 + 332) = v103;
    uint64_t v104 = v10 + 2360 * v11;
    uint64_t v105 = v40 + 9856 * v39;
    if (*(unsigned char *)(v104 + 1881)) {
      int v106 = (_DWORD *)(v104 + 1888);
    }
    else {
      int v106 = (_DWORD *)(v105 + 248);
    }
    unsigned int v107 = v103 & 0xFFFFF0FF | ((*v106 & 0xF) << 8);
    *(_DWORD *)(a2 + 332) = v107;
    if (*(unsigned char *)(v104 + 1881)) {
      unsigned int v108 = (_DWORD *)(v104 + 1884);
    }
    else {
      unsigned int v108 = (_DWORD *)(v105 + 244);
    }
    unsigned int v109 = v107 & 0xFFFF0FFF | ((*v108 & 0xF) << 12);
    *(_DWORD *)(a2 + 332) = v109;
    if (*(unsigned char *)(v105 + 239) && *(unsigned char *)(v104 + 1881)) {
      long long v110 = (unsigned __int8 *)(v10 + 2360 * v11 + 1882);
    }
    else {
      long long v110 = (unsigned __int8 *)(v40 + 9856 * v39 + 240);
    }
    int v111 = *v110;
    BOOL v112 = (v102 | v101) != 0;
    int v113 = v109 | ((v111 == 0) << 16);
    *(_DWORD *)(a2 + 332) = v113;
    if (!v111) {
      BOOL v112 = 1;
    }
    uint64_t v114 = v40 + 9856 * v39;
    if (v112) {
      __int16 v115 = (unsigned char *)(v10 + 2360 * v11 + 1892);
    }
    else {
      __int16 v115 = (unsigned char *)(v114 + 237);
    }
    unsigned int v116 = v113 & 0xFFFDFFFF | ((*v115 & 1) << 17);
    *(_DWORD *)(a2 + 332) = v116;
    if (*(unsigned char *)(v114 + 52)) {
      char v117 = *(unsigned char *)(v40 + 9856 * v39 + 236);
    }
    else {
      char v117 = 1;
    }
    unsigned int v118 = v116 & 0xFFFBFFFF | ((v117 & 1) << 18);
    *(_DWORD *)(a2 + 332) = v118;
    int v119 = *(unsigned __int8 *)(v9 + 23176 * v128 + 10650);
    if (*(unsigned char *)(v9 + 23176 * v128 + 10650)) {
      int v119 = *(unsigned char *)(v9 + 23176 * v128 + 10668) == 0;
    }
    *(_DWORD *)(a2 + 332) = v118 | (v119 << 19) | 0x2DA00000;
    int v120 = *(_DWORD **)(v51 + 256);
    int v121 = v120[626];
    if (v120[590] == 1)
    {
      if ((*(unsigned int (**)(_DWORD *))(*(void *)v120 + 448))(v120))
      {
        int v122 = 364 * a3;
        *(_DWORD *)(a2 + 340) = 0;
        if (MEMORY[0] || MEMORY[0x98] || MEMORY[0x9C])
        {
          uint64_t result = CAHDec::addToPatcherList(v51, 0, v122 + 3104, 0, 0xFFFFFFFFFLL, 32, 15, 4);
          if (result) {
            return result;
          }
          if (MEMORY[0]) {
            goto LABEL_100;
          }
        }
        if (MEMORY[0x98] || MEMORY[0x9C])
        {
LABEL_100:
          int v124 = v122 + 3108;
          goto LABEL_110;
        }
        goto LABEL_111;
      }
    }
    else if ((*(unsigned int (**)(_DWORD *))(*(void *)v120 + 448))(v120))
    {
      int v125 = 364 * a3;
      *(_DWORD *)(a2 + 340) = 0;
      if (MEMORY[0] || MEMORY[0x98] || MEMORY[0x9C])
      {
        uint64_t result = CAHDec::addToPatcherList(v51, 0, v125 + 3104, 0, 0xFFFFFFFFFLL, 32, 15, 4);
        if (result) {
          return result;
        }
        if (MEMORY[0]) {
          goto LABEL_109;
        }
      }
      if (MEMORY[0x98] || MEMORY[0x9C])
      {
LABEL_109:
        int v124 = v125 + 3108;
LABEL_110:
        uint64_t result = CAHDec::addToPatcherList(v51, 0, v124, 0, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
LABEL_111:
      unsigned int v126 = *(_DWORD *)(v10 + 2360 * v11 + 16) - (*(_DWORD *)(v10 + 2360 * v11 + 2080) >> 3);
      *(_DWORD *)(a2 + 348) = v126;
      if (v120[590] != 1) {
        return 0;
      }
      *(void *)(a2 + 356) = 0;
      if (v126 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
        unsigned int v126 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
      }
      uint64_t result = 0;
      if (v120[605]) {
        int v127 = v126 | v121 & 0x10000;
      }
      else {
        int v127 = (unsigned __int16)v121 | (v126 << 22);
      }
      *(_DWORD *)(a2 + 360) = v127;
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecDahliaHevc::populateCommonRegisters(CAHDecDahliaHevc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000000;
  return 0;
}

uint64_t CAHDecDahliaHevc::updateCommonRegisters(CAHDecDahliaHevc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecDahliaHevc::populateSequenceRegisters(CAHDecDahliaHevc *this)
{
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)*((void *)this + 33);
  int v3 = *(_DWORD *)(v1 + 8320);
  uint64_t v4 = *(void *)(v1 + 8280);
  v2[13] = 0;
  uint64_t v5 = v4 + 23176 * v3;
  __int16 v6 = (*(_DWORD *)(v5 + 3608) >> 3) - 1;
  v2[13] = v6 & 0x1FFF;
  v2[13] = ((*(_DWORD *)(v5 + 3612) << 13) + 536805376) & 0x1FFF0000 | v6 & 0x1FFF;
  v2[14] = 0;
  int v7 = *(unsigned char *)(v5 + 10648) & 1;
  v2[14] = v7;
  unsigned int v8 = v7 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v5 + 4440) & 7));
  v2[14] = v8;
  unsigned int v9 = v8 & 0xFFFFFF8F | (16 * (*(_DWORD *)(v5 + 4436) & 7));
  v2[14] = v9;
  unsigned int v10 = v9 & 0xFFFFFE7F | (((*(_DWORD *)(v5 + 4428) + *(_DWORD *)(v5 + 4432)) & 3) << 7);
  v2[14] = v10;
  unsigned int v11 = v10 & 0xFFFFF9FF | ((*(_DWORD *)(v5 + 4428) & 3) << 9);
  v2[14] = v11;
  unsigned int v12 = v11 & 0xFFFFE7FF | (((*(_DWORD *)(v5 + 4424) + *(_DWORD *)(v5 + 4420)) & 3) << 11);
  v2[14] = v12;
  unsigned int v13 = v12 & 0xFFFF9FFF | ((*(_DWORD *)(v5 + 4420) & 3) << 13);
  v2[14] = v13;
  unsigned int v14 = v13 & 0xFFF87FFF | ((*(_DWORD *)(v5 + 3640) & 0xF) << 15);
  v2[14] = v14;
  unsigned int v15 = v14 & 0xFF87FFFF | ((*(_DWORD *)(v5 + 3636) & 0xF) << 19);
  v2[14] = v15;
  unsigned int v16 = v15 & 0xFF7FFFFF | ((*(unsigned char *)(v5 + 3604) & 1) << 23);
  v2[14] = v16;
  v2[14] = v16 & 0xFCFFFFFF | ((*(_DWORD *)(v5 + 3600) & 3) << 24);
  v2[15] = 0;
  if (*(unsigned char *)(v5 + 10650))
  {
    v2[15] = 4096;
    uint64_t v17 = (_DWORD *)(v4 + 23176 * v3);
    int v18 = (v17[2666] + v17[2665]) & 3 | 0x1000;
    v2[15] = v18;
    unsigned int v19 = v18 & 0xFFFFFFF3 | (4 * (v17[2665] & 3));
    v2[15] = v19;
    unsigned int v20 = v19 & 0xFFFFFF0F | (16 * (v17[2664] & 0xF));
    v2[15] = v20;
    v2[15] = v20 & 0xFFFFF0FF | ((v17[2663] & 0xF) << 8);
  }
  v2[16] = 0;
  if (*(unsigned char *)(v4 + 23176 * v3 + 22833))
  {
    int v21 = *(unsigned char *)(v4 + 23176 * v3 + 22844) & 1;
    v2[16] = v21;
    unsigned int v22 = v21 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v4 + 23176 * v3 + 22843) & 1));
    v2[16] = v22;
    unsigned int v23 = v22 & 0xFFFFFFFB | (4 * (*(unsigned char *)(v4 + 23176 * v3 + 22842) & 1));
    v2[16] = v23;
    int v24 = v23 | (8 * (*(unsigned char *)(v4 + 23176 * v3 + 22841) == 0));
    v2[16] = v24;
    unsigned int v25 = v24 & 0xFFFFFFEF | (16 * (*(unsigned char *)(v4 + 23176 * v3 + 22840) & 1));
    v2[16] = v25;
    unsigned int v26 = v25 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v4 + 23176 * v3 + 22839) & 1));
    v2[16] = v26;
    unsigned int v27 = v26 & 0xFFFFFFBF | ((*(unsigned char *)(v4 + 23176 * v3 + 22838) & 1) << 6);
    v2[16] = v27;
    int v28 = v27 | ((*(unsigned char *)(v4 + 23176 * v3 + 22837) & 1) << 7);
    v2[16] = v28;
    int v29 = v28 | ((*(unsigned char *)(v4 + 23176 * v3 + 22836) & 1) << 8);
  }
  else
  {
    int v29 = 8;
  }
  v2[16] = v29;
  uint64_t v30 = v4 + 23176 * v3;
  v2[16] = v29 & 0xFFFFFDFF | ((*(unsigned char *)(v30 + 22285) & 1) << 9);
  if (*(unsigned char *)(v30 + 4444)) {
    CAHDecTansyHevc::copyScalingList((uint64_t)this, (uint64_t)(v2 + 17), *((void *)this + 33) + 628, *(_DWORD *)(v5 + 3600), v4 + 23176 * v3 + 4448);
  }
  return 0;
}

uint64_t CAHDecDahliaHevc::getTileHdrMemInfo(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 176 * a2;
  *a3 = v3 + 528;
  a3[1] = v3 + 3344;
  return result;
}

__n128 CAHDecDahliaHevc::getMVmemInfo(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1 + 176 * a2;
  long long v5 = *(_OWORD *)(v4 + 8976);
  long long v6 = *(_OWORD *)(v4 + 9008);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 8992);
  *(_OWORD *)(a3 + 32) = v6;
  *(_OWORD *)a3 = v5;
  long long v7 = *(_OWORD *)(v4 + 9024);
  long long v8 = *(_OWORD *)(v4 + 9040);
  long long v9 = *(_OWORD *)(v4 + 9072);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(v4 + 9056);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_OWORD *)(a3 + 64) = v8;
  __n128 result = *(__n128 *)(v4 + 9088);
  long long v11 = *(_OWORD *)(v4 + 9104);
  long long v12 = *(_OWORD *)(v4 + 9136);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v4 + 9120);
  *(_OWORD *)(a3 + 160) = v12;
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v11;
  *a4 = *(_DWORD *)(a1 + 4 * a2 + 464);
  return result;
}

uint64_t CAHDecDahliaHevc::populatePictureRegisters(CAHDecDahliaHevc *this)
{
  uint64_t v381 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 8320);
  int v4 = *(_DWORD *)(v2 + 8324);
  uint64_t v5 = *(void *)(v2 + 8280);
  uint64_t v6 = *(void *)(v2 + 8288);
  unsigned int v362 = *(_DWORD *)(v2 + 9036);
  unsigned int v7 = *(_DWORD *)(v2 + 3068);
  int v8 = *(_DWORD *)(v2 + 3072);
  int v351 = *(_DWORD *)(v2 + 3064);
  int v352 = *(unsigned __int8 *)(v2 + 3060);
  int v357 = *(unsigned __int8 *)(v2 + 9098);
  int v353 = *(_DWORD *)(v2 + 3660);
  int v354 = *(_DWORD *)(v2 + 3036);
  int v364 = *(_DWORD *)(v2 + 2644);
  uint64_t v358 = *(void *)(v2 + 2088);
  uint64_t v359 = *(unsigned int *)(v2 + 8424);
  int v350 = *(unsigned __int8 *)(v2 + 8);
  uint64_t v355 = *(unsigned int *)(v2 + 8720);
  uint64_t v356 = *(void *)(v2 + 8392);
  int v365 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  uint64_t v9 = v5 + 23176 * v3;
  int v360 = *(_DWORD *)(v9 + 4424);
  int v361 = *(_DWORD *)(v9 + 4420);
  uint64_t v10 = *((void *)this + 32);
  uint64_t v11 = *((void *)this + 33);
  long long v12 = *(_OWORD *)(v10 + 8536);
  v380[0] = *(_OWORD *)(v10 + 8520);
  v380[1] = v12;
  long long v13 = *(_OWORD *)(v10 + 8568);
  v380[2] = *(_OWORD *)(v10 + 8552);
  v380[3] = v13;
  memset(v379, 0, sizeof(v379));
  memset(v378, 0, sizeof(v378));
  (*(void (**)(void))(*(void *)v10 + 336))();
  uint64_t v14 = 0;
  unsigned int v15 = (unsigned __int8 *)*((void *)this + 32);
  unsigned int v16 = (const double *)(v15 + 8728);
  do
  {
    float64x2x2_t v382 = vld2q_f64(v16);
    v16 += 4;
    v379[v14] = v382.val[0];
    v378[v14++] = v382.val[1];
  }
  while (v14 != 4);
  uint64_t v17 = v6 + 9856 * v4;
  int v19 = *(unsigned __int8 *)(v17 + 52);
  int v18 = (unsigned char *)(v17 + 52);
  uint64_t v366 = v11;
  int v363 = v8;
  if (v19)
  {
    unint64_t v20 = 0;
    uint64_t v21 = v6 + 9856 * v4;
    unsigned __int16 v22 = *(_WORD *)(v21 + 56) + 1;
    uint64_t v23 = *((void *)this + 33);
    *(_WORD *)(v23 + 524) = v22;
    uint64_t v24 = v21 + 9676;
    do
    {
      *(_WORD *)(v23 + 528 + 2 * v20) = *(_DWORD *)(v24 + 4 * v20);
      BOOL v25 = v20++ >= v22;
    }
    while (!v25);
    unint64_t v26 = 0;
    uint64_t v27 = v6 + 9856 * v4;
    unsigned __int16 v28 = *(_WORD *)(v27 + 60) + 1;
    *(_WORD *)(v23 + 526) = v28;
    int v29 = v28;
    uint64_t v30 = v27 + 9760;
    uint64_t v31 = v23 + 570;
    do
    {
      *(_WORD *)(v31 + 2 * v26) = *(_DWORD *)(v30 + 4 * v26);
      BOOL v25 = v26++ >= v28;
    }
    while (!v25);
    uint64_t v32 = v5;
  }
  else
  {
    uint64_t v33 = *((void *)this + 33);
    *(_DWORD *)(v33 + 524) = 65537;
    *(_WORD *)(v33 + 528) = 0;
    uint64_t v32 = v5;
    uint64_t v34 = v5 + 23176 * v3;
    *(_WORD *)(v33 + 530) = *(_DWORD *)(v34 + 22880);
    *(_WORD *)(v33 + 570) = 0;
    *(_WORD *)(v33 + 572) = *(_DWORD *)(v34 + 22888);
    int v29 = 1;
    unsigned __int16 v22 = 1;
  }
  int v35 = v15[2675];
  unsigned int v36 = v15[2674];
  if (v35 | v36)
  {
    int v37 = v3;
    uint64_t v38 = v32 + 23176 * v3;
    unsigned int v39 = *(_DWORD *)(v38 + 3636);
    unsigned int v40 = *(_DWORD *)(v38 + 3640);
    if (v39 > v40) {
      unsigned int v40 = v39;
    }
    unsigned int v41 = (v40 + 9) & 0xFFFFFFFE;
    if (v41 == 8)
    {
      unsigned int v50 = 1;
      int v49 = 8;
      if (!v15[2675]) {
        goto LABEL_47;
      }
    }
    else
    {
      int v42 = v15[2672];
      if (v42) {
        int v43 = 12;
      }
      else {
        int v43 = 11;
      }
      if (v42) {
        int v44 = 5;
      }
      else {
        int v44 = 4;
      }
      BOOL v45 = v42 == 0;
      if (v42) {
        int v46 = 10;
      }
      else {
        int v46 = 9;
      }
      if (v45) {
        int v47 = 2;
      }
      else {
        int v47 = 3;
      }
      if (v41 == 10)
      {
        int v48 = v47;
      }
      else
      {
        int v46 = 27;
        int v48 = 27;
      }
      if (v41 == 12) {
        int v49 = v43;
      }
      else {
        int v49 = v46;
      }
      if (v41 == 12) {
        unsigned int v50 = v44;
      }
      else {
        unsigned int v50 = v48;
      }
      if (!v35) {
        goto LABEL_47;
      }
    }
    if (*(_DWORD *)(v32 + 23176 * v37 + 3600) && (v35 == 2 && v49 == 8 || v35 == 3 && (v49 - 9) <= 1))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v49;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v35;
        uint64_t v51 = &_os_log_internal;
        unsigned int v52 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
        goto LABEL_177;
      }
      return 0xFFFFFFFFLL;
    }
LABEL_47:
    int v3 = v37;
    if (v36 && (v36 == 3 && v50 - 9 < 2 || v50 <= 0x1A && ((1 << v50) & 0x4C00000) != 0 && v36 <= 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v50;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v36;
        uint64_t v51 = &_os_log_internal;
        unsigned int v52 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
        goto LABEL_177;
      }
      return 0xFFFFFFFFLL;
    }
  }
  unsigned __int16 v349 = v22;
  unsigned int v348 = v7;
  int v53 = v3;
  uint64_t v54 = v18;
  *(_DWORD *)(v366 + 88) = 766509056;
  uint64_t v55 = (*(uint64_t (**)(void))(**((void **)this + 32) + 216))(*((void *)this + 32));
  if (v55) {
    int v56 = (*(_DWORD *)(*((void *)this + 32) + 3092) == 2) << 13;
  }
  else {
    int v56 = 0;
  }
  __int16 v57 = v54;
  unsigned int v58 = v362 >> 28;
  unsigned int v59 = *(_DWORD *)(v366 + 88) & 0xFFFFC100;
  if (v365) {
    int v60 = 688;
  }
  else {
    int v60 = 672;
  }
  if (v364) {
    int v61 = 4160;
  }
  else {
    int v61 = 64;
  }
  unsigned int v62 = v61 & 0xFFFFFFF0 | ((v364 == 1) << 10) | v60 & 0xFFFFFFF0 | (4 * (v35 & 3)) | v36 & 3 | v56;
  int v63 = v62 | v59;
  *(_DWORD *)(v366 + 88) = v62 | v59;
  int v64 = (unsigned char *)*((void *)this + 32);
  unsigned int v65 = v63 & 0xFFF7FFFF | ((v64[2652] & 1) << 19);
  *(_DWORD *)(v366 + 88) = v65;
  unsigned int v66 = v65 & 0xFFFBFFFF | ((v64[2653] & 1) << 18);
  *(_DWORD *)(v366 + 88) = v66;
  unsigned int v67 = v66 & 0xFFFDFFFF | ((v64[2654] & 1) << 17);
  *(void *)(v366 + 88) = v67;
  uint64_t v68 = v32;
  int v69 = v53;
  if ((v362 & 1) != 0 && *(unsigned char *)(v6 + 9856 * v4 + 53) && *(_DWORD *)(v32 + 23176 * v53 + 22888) > v58 + 1
    || (v362 & 2) != 0 && !*(unsigned char *)(v6 + 9856 * v4 + 53) && *v57 && v29 * v349 > v58 + 1)
  {
    goto LABEL_77;
  }
  if ((v362 & 0x20) == 0 || (int v70 = *(unsigned __int8 *)(v6 + 9856 * v4 + 53), *(unsigned char *)(v6 + 9856 * v4 + 53)))
  {
    int v70 = 0;
    goto LABEL_78;
  }
  if (!*v57 && v348 > v58 + 1) {
LABEL_77:
  }
    int v70 = (v363 == 0) << 27;
LABEL_78:
  char v71 = v360 + v361;
  *(_DWORD *)(v366 + 92) = v70;
  *(_DWORD *)(v366 + 96) = 0;
  uint64_t v72 = v32 + 23176 * v53;
  unsigned __int16 v73 = *(_DWORD *)(v72 + 3608) - 1;
  *(_DWORD *)(v366 + 96) = v73;
  int v74 = (v73 | ((unsigned __int16)*(_DWORD *)(v72 + 3612) << 16)) - 0x10000;
  *(_DWORD *)(v366 + 100) = 0;
  *(_DWORD *)(v366 + 104) = 0;
  *(_DWORD *)(v366 + 96) = v74;
  if (*(unsigned char *)(v6 + 9856 * v4 + 6466))
  {
    unsigned int v75 = (unsigned char *)(v6 + 9856 * v4 + 6477);
    int v76 = 32 * (*v75 & 1);
    *(_DWORD *)(v366 + 104) = v76;
    LOBYTE(v77) = *v75;
    if (*v75) {
      int v77 = *(_DWORD *)(v6 + 9856 * v4 + 6484);
    }
    unint64_t v78 = v77 & 7;
    int v79 = v78 | v76;
    *(_DWORD *)(v366 + 104) = v78 | v76;
    if (v76)
    {
      uint64_t v80 = (_DWORD *)(v6 + 9856 * v4 + 6512);
      char v81 = (unsigned int *)(v366 + 112);
      unint64_t v82 = -1;
      do
      {
        unsigned int v83 = *v81 & 0xFFFFFFE0 | *v80 & 0x1F;
        *char v81 = v83;
        uint64_t v55 = *(v80 - 6);
        *v81++ = v83 & 0xFFFFFC1F | (32 * (*(v80 - 6) & 0x1F));
        ++v82;
        ++v80;
      }
      while (v82 < v78);
    }
    int v84 = *v75;
    if (v84) {
      int v84 = *(_DWORD *)(v6 + 9856 * v4 + 6480);
    }
    int v85 = (8 * ((v71 - (_BYTE)v84) & 3)) | v79;
    *(_DWORD *)(v366 + 104) = v85;
    unsigned int v86 = v85 & 0xFFFFFFBF | ((*(unsigned char *)(v6 + 9856 * v4 + 6476) & 1) << 6);
    *(_DWORD *)(v366 + 104) = v86;
    unsigned int v87 = v86 & 0xFFFFFE7F | ((*(_DWORD *)(v6 + 9856 * v4 + 6472) & 3) << 7);
  }
  else
  {
    unsigned int v87 = 8 * (v71 & 3);
  }
  *(_DWORD *)(v366 + 104) = v87;
  uint64_t v88 = v6 + 9856 * v4;
  int v91 = *(unsigned __int8 *)(v88 + 34);
  int v89 = (unsigned char *)(v88 + 34);
  LOBYTE(v90) = v91;
  if (v91) {
    int v90 = *(_DWORD *)(v6 + 9856 * v4 + 36);
  }
  unsigned int v92 = v87 & 0xFFFE7FFF | (((v71 - (_BYTE)v90) & 3) << 15);
  *(_DWORD *)(v366 + 104) = v92;
  uint64_t v93 = v6 + 9856 * v4;
  unsigned int v94 = v92 & 0xFFFFF1FF | ((*(_DWORD *)(v93 + 6460) & 7) << 9);
  *(_DWORD *)(v366 + 104) = v94;
  unsigned int v95 = v94 & 0xFFFFEFFF | ((*(unsigned char *)(v93 + 53) & 1) << 12);
  *(_DWORD *)(v366 + 104) = v95;
  unsigned int v96 = v95 & 0xFFFFDFFF | ((*v57 & 1) << 13);
  *(_DWORD *)(v366 + 104) = v96;
  unsigned int v97 = v96 & 0xFFFFBFFF | ((*(unsigned char *)(v93 + 51) & 1) << 14);
  *(_DWORD *)(v366 + 104) = v97;
  unsigned int v98 = v97 & 0xFFFDFFFF | ((*v89 & 1) << 17);
  *(_DWORD *)(v366 + 104) = v98;
  unsigned int v99 = v98 & 0xFFFBFFFF | ((*(unsigned char *)(v93 + 33) & 1) << 18);
  *(_DWORD *)(v366 + 104) = v99;
  unsigned int v100 = v99 & 0xFFF7FFFF | ((*(unsigned char *)(v93 + 32) & 1) << 19);
  *(_DWORD *)(v366 + 104) = v100;
  unsigned int v101 = v100 & 0xFFEFFFFF | ((*(unsigned char *)(v93 + 16) & 1) << 20);
  *(_DWORD *)(v366 + 104) = v101;
  if (v62 >> 13) {
    BOOL v102 = 0;
  }
  else {
    BOOL v102 = *(unsigned char *)(v68 + 23176 * v53 + 22284) != 0;
  }
  *(_DWORD *)(v366 + 104) = v101 & 0xFFDFFFFF | (v102 << 21);
  uint64_t v103 = v6 + 9856 * v4;
  unsigned int v104 = *(_DWORD *)(v366 + 108) & 0xFFFFFFE0 | *(_DWORD *)(v103 + 44) & 0x1F;
  *(_DWORD *)(v366 + 108) = v104;
  *(_DWORD *)(v366 + 108) = v104 & 0xFFFFFC1F | (32 * (*(_DWORD *)(v103 + 40) & 0x1F));
  if (*(unsigned char *)(v103 + 252))
  {
    CAHDecTansyHevc::copyScalingList(v55, v366 + 136, *((void *)this + 33) + 1624, *(_DWORD *)(v68 + 23176 * v53 + 3600), v6 + 9856 * v4 + 256);
    unsigned int v67 = *(_DWORD *)(v366 + 88);
  }
  if ((~v67 & 0xC0000) != 0)
  {
    int v109 = 0;
    int v111 = 0;
    *(_DWORD *)(v366 + 156) = 0;
    *(_DWORD *)(v366 + 160) = 0;
  }
  else
  {
    uint64_t v105 = (_DWORD *)*((void *)this + 32);
    int v106 = v105[664];
    if (!v106 || !v105[665])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v193 = v105[665];
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v106;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v193;
        uint64_t v51 = &_os_log_internal;
        unsigned int v52 = "AppleAVD: %s(): invalid stat crop width/height %d/%d";
LABEL_177:
        uint64_t v194 = buf;
        uint32_t v195 = 24;
LABEL_178:
        _os_log_impl(&dword_223977000, v51, OS_LOG_TYPE_DEFAULT, v52, v194, v195);
      }
      return 0xFFFFFFFFLL;
    }
    unsigned __int16 v107 = v105[666];
    *(_WORD *)(v366 + 156) = v107;
    int v108 = v105[667];
    int v109 = v108 << 16;
    *(_DWORD *)(v366 + 156) = v107 | ((unsigned __int16)v108 << 16);
    unsigned __int16 v110 = v105[666] + v105[664] - 1;
    *(_WORD *)(v366 + 160) = v110;
    int v111 = (v110 | ((unsigned __int16)(*((_WORD *)v105 + 1330) + *((_WORD *)v105 + 1334)) << 16)) - 0x10000;
    *(_DWORD *)(v366 + 160) = v111;
  }
  if (v363) {
    int v112 = 7340080;
  }
  else {
    int v112 = 3145776;
  }
  *(_DWORD *)(v366 + 164) = v112;
  if (!*(unsigned char *)(*((void *)this + 32) + 3004))
  {
    unsigned __int16 v113 = *(_DWORD *)(v72 + 3608) - 1;
    *(_DWORD *)(v366 + 160) = v111 & 0xFFFF0000 | v113;
    int v114 = (*(_DWORD *)(v72 + 3612) << 16) - 0x10000;
    *(_DWORD *)(v366 + 160) = v114 & 0xFFFF0000 | v113;
    if (*(unsigned char *)(v68 + 23176 * v69 + 3616))
    {
      if ((v67 & 0x800) != 0)
      {
        uint64_t v115 = v68 + 23176 * v69;
        unsigned __int16 v116 = *(_DWORD *)(v115 + 3620) * *(_DWORD *)(v115 + 22852);
        *(_DWORD *)(v366 + 156) = v109 | v116;
        *(_DWORD *)(v366 + 156) = v116 | ((unsigned __int16)(*(_WORD *)(v115 + 22856) * *(_DWORD *)(v115 + 3628)) << 16);
        unsigned __int16 v117 = *(_DWORD *)(v72 + 3608) + ~(*(_DWORD *)(v115 + 3624) * *(_DWORD *)(v115 + 22852));
        *(_DWORD *)(v366 + 160) = v117 | v114;
        *(_DWORD *)(v366 + 160) = v117 | ((unsigned __int16)(*(_WORD *)(v72 + 3612)
                                                           + ~(*(_WORD *)(v115 + 3632) * *(_WORD *)(v115 + 22856))) << 16);
      }
    }
  }
  unsigned int v118 = (char *)this + 6160;
  for (uint64_t i = 168; i != 228; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v120 = *((void *)this + 33);
    int v121 = *(_DWORD *)(v120 + i);
    *(_DWORD *)(v120 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFFu;
    uint64_t v122 = *((void *)this + 33);
    int v123 = *(_DWORD *)(v122 + i);
    *(_DWORD *)(v122 + i) = v121;
    if (*(void *)v118 || *((_DWORD *)v118 + 38) || *((_DWORD *)v118 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v118, i, 0, 0xFFFFFFFFFLL, 8, v123, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 60) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 60) = *(_DWORD *)(*((void *)this + 33) + i + 60) & 0x800001FF | (((*((_DWORD *)this + 3304) >> 9) & 0x3FFFFF) << 9);
    v118 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 288) = 0;
  if ((*(unsigned char *)(v366 + 90) & 8) != 0)
  {
    uint64_t v125 = *((void *)this + 33);
    uint64_t v126 = *(void *)(*((void *)this + 32) + 2680);
    long long v376 = 0u;
    long long v377 = 0u;
    long long v374 = 0u;
    long long v375 = 0u;
    long long v372 = 0u;
    long long v373 = 0u;
    long long v370 = 0u;
    long long v371 = 0u;
    long long v369 = 0u;
    memset(buf, 0, sizeof(buf));
    int v127 = *(_DWORD *)(v125 + 16);
    *(void *)long long buf = v126;
    int v128 = *(_DWORD *)(v125 + 288);
    *(_DWORD *)(v125 + 288) = 0;
    *(_DWORD *)(*((void *)this + 33) + 288) ^= 0xFFFFFFFu;
    uint64_t v129 = *((void *)this + 33);
    int v130 = *(_DWORD *)(v129 + 288);
    *(_DWORD *)(v129 + 288) = v128;
    if (v126)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 288, (v127 & 0xF) << 9, 0xFFFFFFFFFLL, 8, v130, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  uint64_t v131 = *((void *)this + 33);
  int v132 = *(_DWORD *)(v131 + 292);
  *(_DWORD *)(v131 + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFFFu;
  uint64_t v133 = *((void *)this + 33);
  int v134 = *(_DWORD *)(v133 + 292);
  *(_DWORD *)(v133 + 292) = v132;
  if (*((void *)this + 1474) || *((_DWORD *)this + 2986) || *((_DWORD *)this + 2987))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1474, 292, 0, 0xFFFFFFFFFLL, 8, v134, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  uint64_t v135 = *((void *)this + 33);
  int v136 = *(_DWORD *)(v135 + 296);
  *(_DWORD *)(v135 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0xFFFFFFFu;
  uint64_t v137 = *((void *)this + 33);
  int v138 = *(_DWORD *)(v137 + 296);
  *(_DWORD *)(v137 + 296) = v136;
  if (*((void *)this + 1496) || *((_DWORD *)this + 3030) || *((_DWORD *)this + 3031))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1496, 296, 0, 0xFFFFFFFFFLL, 8, v138, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 300) = 0;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 300);
  *(_DWORD *)(v139 + 300) = 0;
  *(_DWORD *)(*((void *)this + 33) + 300) ^= 0xFFFFFFFu;
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 300);
  *(_DWORD *)(v141 + 300) = v140;
  if (*((void *)this + 1518) || *((_DWORD *)this + 3074) || *((_DWORD *)this + 3075))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1518, 300, 0, 0xFFFFFFFFFLL, 8, v142, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 304) = 0;
  uint64_t v143 = *((void *)this + 33);
  int v144 = *(_DWORD *)(v143 + 304);
  *(_DWORD *)(v143 + 304) = 0;
  *(_DWORD *)(*((void *)this + 33) + 304) ^= 0xFFFFFFFu;
  uint64_t v145 = *((void *)this + 33);
  int v146 = *(_DWORD *)(v145 + 304);
  *(_DWORD *)(v145 + 304) = v144;
  if (*((void *)this + 1540) || *((_DWORD *)this + 3118) || *((_DWORD *)this + 3119))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1540, 304, 0, 0xFFFFFFFFFLL, 8, v146, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 308) = 0;
  uint64_t v147 = *((void *)this + 33);
  int v148 = *(_DWORD *)(v147 + 308);
  *(_DWORD *)(v147 + 308) = 0;
  *(_DWORD *)(*((void *)this + 33) + 308) ^= 0xFFFFFFFu;
  uint64_t v149 = *((void *)this + 33);
  int v150 = *(_DWORD *)(v149 + 308);
  *(_DWORD *)(v149 + 308) = v148;
  if (*((void *)this + 1562) || *((_DWORD *)this + 3162) || *((_DWORD *)this + 3163))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1562, 308, 0, 0xFFFFFFFFFLL, 8, v150, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 312) = 0;
  uint64_t v151 = *((void *)this + 33);
  int v152 = *(_DWORD *)(v151 + 312);
  *(_DWORD *)(v151 + 312) = 0;
  *(_DWORD *)(*((void *)this + 33) + 312) ^= 0xFFFFFFFu;
  uint64_t v153 = *((void *)this + 33);
  int v154 = *(_DWORD *)(v153 + 312);
  *(_DWORD *)(v153 + 312) = v152;
  if (*((void *)this + 1584) || *((_DWORD *)this + 3206) || *((_DWORD *)this + 3207))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1584, 312, 0, 0xFFFFFFFFFLL, 8, v154, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 316) = 0;
  uint64_t v155 = *((void *)this + 33);
  int v156 = *(_DWORD *)(v155 + 316);
  *(_DWORD *)(v155 + 316) = 0;
  *(_DWORD *)(*((void *)this + 33) + 316) ^= 0xFFFFFFFu;
  uint64_t v157 = *((void *)this + 33);
  int v158 = *(_DWORD *)(v157 + 316);
  *(_DWORD *)(v157 + 316) = v156;
  if (*((void *)this + 1100) || *((_DWORD *)this + 2238) || *((_DWORD *)this + 2239))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1100, 316, 0, 0xFFFFFFFFFLL, 8, v158, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 320) = 0;
  uint64_t v159 = *((void *)this + 33);
  int v160 = *(_DWORD *)(v159 + 320);
  *(_DWORD *)(v159 + 320) = 0;
  *(_DWORD *)(*((void *)this + 33) + 320) ^= 0xFFFFFFFu;
  uint64_t v161 = *((void *)this + 33);
  int v162 = *(_DWORD *)(v161 + 320);
  *(_DWORD *)(v161 + 320) = v160;
  unsigned int v163 = (char *)this + 176 * v359;
  if (*((void *)v163 + 1122)
    || *((_DWORD *)this + 44 * v359 + 2282)
    || *((_DWORD *)this + 44 * v359 + 2283))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v163 + 1122, 320, 0, 0xFFFFFFFFFLL, 8, v162, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 324) = 0;
  uint64_t v164 = *((void *)this + 33);
  int v165 = *(_DWORD *)(v164 + 324);
  *(_DWORD *)(v164 + 324) = 0;
  *(_DWORD *)(*((void *)this + 33) + 324) ^= 0xFFFFFFFu;
  uint64_t v166 = *((void *)this + 33);
  int v167 = *(_DWORD *)(v166 + 324);
  *(_DWORD *)(v166 + 324) = v165;
  if (*((void *)this + 1606) || *((_DWORD *)this + 3250) || *((_DWORD *)this + 3251))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1606, 324, 0, 0xFFFFFFFFFLL, 8, v167, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 328) = 0;
  uint64_t v168 = *((void *)this + 33);
  int v169 = *(_DWORD *)(v168 + 328);
  *(_DWORD *)(v168 + 328) = 0;
  *(_DWORD *)(*((void *)this + 33) + 328) ^= 0xFFFFFFFu;
  uint64_t v170 = *((void *)this + 33);
  int v171 = *(_DWORD *)(v170 + 328);
  *(_DWORD *)(v170 + 328) = v169;
  if (*((void *)this + 1628) || *((_DWORD *)this + 3294) || *((_DWORD *)this + 3295))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1628, 328, 0, 0xFFFFFFFFFLL, 8, v171, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 332) = 0;
  *(_DWORD *)(*((void *)this + 33) + 336) = 0;
  *(_DWORD *)(*((void *)this + 33) + 340) = 0;
  *(_DWORD *)(*((void *)this + 33) + 344) = 0;
  uint64_t v172 = *((void *)this + 33);
  if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
  {
    int v173 = *(_DWORD *)(v172 + 336);
    *(_DWORD *)(v172 + 336) = 0;
    *(_DWORD *)(*((void *)this + 33) + 336) ^= 0x1FFFFFFFu;
    uint64_t v174 = *((void *)this + 33);
    int v175 = *(_DWORD *)(v174 + 336);
    *(_DWORD *)(v174 + 336) = v173;
    int v177 = (void *)(v358 + 8);
    uint64_t v176 = *(void *)(v358 + 8);
    if (v357)
    {
      if (v176 || *(_DWORD *)(v358 + 160) || *(_DWORD *)(v358 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v358 + 8), 336, *(_DWORD *)(v358 + 68), 0xFFFFFFFFFLL, 7, v175, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v178 = *((void *)this + 33);
      int v179 = *(_DWORD *)(v178 + 332);
      *(_DWORD *)(v178 + 332) = 0;
      *(_DWORD *)(*((void *)this + 33) + 332) ^= 0x1FFFFFFFu;
      uint64_t v180 = *((void *)this + 33);
      int v181 = *(_DWORD *)(v180 + 332);
      *(_DWORD *)(v180 + 332) = v179;
      if (*v177 || *(_DWORD *)(v358 + 160) || *(_DWORD *)(v358 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v177, 332, *(_DWORD *)(v358 + 80), 0xFFFFFFFFFLL, 7, v181, 4);
        if (result) {
          return result;
        }
      }
      if (v354)
      {
        uint64_t v182 = *((void *)this + 33);
        int v183 = *(_DWORD *)(v182 + 344);
        *(_DWORD *)(v182 + 344) = 0;
        *(_DWORD *)(*((void *)this + 33) + 344) ^= 0x1FFFFFFFu;
        uint64_t v184 = *((void *)this + 33);
        int v185 = *(_DWORD *)(v184 + 344);
        *(_DWORD *)(v184 + 344) = v183;
        if (*(void *)v356 || *(_DWORD *)(v356 + 152) || *(_DWORD *)(v356 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v356, 344, *(_DWORD *)(v356 + 56), 0xFFFFFFFFFLL, 7, v185, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v186 = *((void *)this + 33);
        int v187 = *(_DWORD *)(v186 + 340);
        *(_DWORD *)(v186 + 340) = 0;
        *(_DWORD *)(*((void *)this + 33) + 340) ^= 0x1FFFFFFFu;
        uint64_t v188 = *((void *)this + 33);
        int v189 = *(_DWORD *)(v188 + 340);
        *(_DWORD *)(v188 + 340) = v187;
        if (*(void *)v356 || *(_DWORD *)(v356 + 152) || *(_DWORD *)(v356 + 156))
        {
          unsigned int v190 = (void *)v356;
          int v191 = *(_DWORD *)(v356 + 68);
          int v192 = this;
LABEL_213:
          int v212 = 340;
LABEL_214:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v192, v190, v212, v191, 0xFFFFFFFFFLL, 7, v189, 4);
          if (result) {
            return result;
          }
        }
      }
    }
    else
    {
      if (v176 || *(_DWORD *)(v358 + 160) || *(_DWORD *)(v358 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v358 + 8), 336, *(_DWORD *)(v358 + 60), 0xFFFFFFFFFLL, 7, v175, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v213 = *((void *)this + 33);
      int v214 = *(_DWORD *)(v213 + 344);
      *(_DWORD *)(v213 + 344) = 0;
      *(_DWORD *)(*((void *)this + 33) + 344) ^= 0x1FFFFFFFu;
      uint64_t v215 = *((void *)this + 33);
      int v216 = *(_DWORD *)(v215 + 344);
      *(_DWORD *)(v215 + 344) = v214;
      if (*v177 || *(_DWORD *)(v358 + 160) || *(_DWORD *)(v358 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v177, 344, *(_DWORD *)(v358 + 64), 0xFFFFFFFFFLL, 7, v216, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v217 = *((void *)this + 33);
      int v218 = *(_DWORD *)(v217 + 332);
      *(_DWORD *)(v217 + 332) = 0;
      *(_DWORD *)(*((void *)this + 33) + 332) ^= 0x1FFFFFFFu;
      uint64_t v219 = *((void *)this + 33);
      int v220 = *(_DWORD *)(v219 + 332);
      *(_DWORD *)(v219 + 332) = v218;
      if (*v177 || *(_DWORD *)(v358 + 160) || *(_DWORD *)(v358 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v177, 332, *(_DWORD *)(v358 + 72), 0xFFFFFFFFFLL, 7, v220, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v221 = *((void *)this + 33);
      int v222 = *(_DWORD *)(v221 + 340);
      *(_DWORD *)(v221 + 340) = 0;
      *(_DWORD *)(*((void *)this + 33) + 340) ^= 0x1FFFFFFFu;
      uint64_t v223 = *((void *)this + 33);
      int v189 = *(_DWORD *)(v223 + 340);
      *(_DWORD *)(v223 + 340) = v222;
      if (*v177 || *(_DWORD *)(v358 + 160) || *(_DWORD *)(v358 + 164))
      {
        int v191 = *(_DWORD *)(v358 + 76);
        int v192 = this;
        unsigned int v190 = (void *)(v358 + 8);
        goto LABEL_213;
      }
    }
  }
  else
  {
    int v196 = *(_DWORD *)(v172 + 332);
    *(_DWORD *)(v172 + 332) = 0;
    *(_DWORD *)(*((void *)this + 33) + 332) ^= 0x1FFFFFFFu;
    uint64_t v197 = *((void *)this + 33);
    int v198 = *(_DWORD *)(v197 + 332);
    *(_DWORD *)(v197 + 332) = v196;
    int v199 = (char *)this + 176 * v359;
    if (*((void *)v199 + 66)
      || *((_DWORD *)this + 44 * v359 + 170)
      || *((_DWORD *)this + 44 * v359 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v199 + 66, 332, 0, 0xFFFFFFFFFLL, 7, v198, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v200 = *((void *)this + 33);
    int v201 = *(_DWORD *)(v200 + 336);
    *(_DWORD *)(v200 + 336) = 0;
    *(_DWORD *)(*((void *)this + 33) + 336) ^= 0x1FFFFFFFu;
    uint64_t v202 = *((void *)this + 33);
    int v203 = *(_DWORD *)(v202 + 336);
    *(_DWORD *)(v202 + 336) = v201;
    if (*(void *)(v358 + 8) || *(_DWORD *)(v358 + 160) || *(_DWORD *)(v358 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v358 + 8), 336, *(_DWORD *)(v358 + 60), 0xFFFFFFFFFLL, 7, v203, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v204 = *((void *)this + 33);
    int v205 = *(_DWORD *)(v204 + 340);
    *(_DWORD *)(v204 + 340) = 0;
    *(_DWORD *)(*((void *)this + 33) + 340) ^= 0x1FFFFFFFu;
    uint64_t v206 = *((void *)this + 33);
    int v207 = *(_DWORD *)(v206 + 340);
    *(_DWORD *)(v206 + 340) = v205;
    __int16 v208 = (char *)this + 176 * v359;
    if (*((void *)v208 + 418)
      || *((_DWORD *)this + 44 * v359 + 874)
      || *((_DWORD *)this + 44 * v359 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v208 + 418, 340, 0, 0xFFFFFFFFFLL, 7, v207, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v209 = *((void *)this + 33);
    int v210 = *(_DWORD *)(v209 + 344);
    *(_DWORD *)(v209 + 344) = 0;
    *(_DWORD *)(*((void *)this + 33) + 344) ^= 0x1FFFFFFFu;
    uint64_t v211 = *((void *)this + 33);
    int v189 = *(_DWORD *)(v211 + 344);
    *(_DWORD *)(v211 + 344) = v210;
    if (*(void *)(v358 + 8) || *(_DWORD *)(v358 + 160) || *(_DWORD *)(v358 + 164))
    {
      int v191 = *(_DWORD *)(v358 + 64);
      int v192 = this;
      unsigned int v190 = (void *)(v358 + 8);
      int v212 = 344;
      goto LABEL_214;
    }
  }
  if (*(_DWORD *)(v366 + 88) & 0x2000 | v355)
  {
    *((_DWORD *)this + v359 + 116) = 0;
    *(_DWORD *)(*((void *)this + 33) + 348) = 0;
    if (!v355) {
      goto LABEL_283;
    }
    uint64_t v224 = 0;
    uint64_t v225 = (uint64_t *)v380;
    uint64_t v226 = (void **)v379;
    int v227 = (void **)v378;
    while (1)
    {
      uint64_t v228 = *v225;
      if (!*v225 || !*(void *)(v228 + 48)) {
        return 0xFFFFFFFFLL;
      }
      int v229 = v365;
      if (v365)
      {
        uint64_t v230 = *(unsigned int *)(v228 + 44);
        *(void *)long long buf = 0;
        if (((*(uint64_t (**)(void, uint64_t, uint8_t *))(**((void **)this + 32) + 304))(*((void *)this + 32), v230, buf) & 1) == 0)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          __int16 v367 = 0;
          uint64_t v51 = &_os_log_internal;
          unsigned int v52 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
          uint64_t v194 = (uint8_t *)&v367;
          uint32_t v195 = 2;
          goto LABEL_178;
        }
        *(void *)(v228 + 48) = *(void *)buf + 8;
        int v229 = 0x2000000;
      }
      *(_DWORD *)(*((void *)this + 33) + v224 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v224 + 348) = *(_DWORD *)(*((void *)this + 33) + v224 + 348) & 0xFFFFFFF | ((v355 << 28) - 0x10000000);
      *(_DWORD *)(*((void *)this + 33) + v224 + 348) &= 0xF3FFFFFF;
      *(_DWORD *)(*((void *)this + 33) + v224 + 348) = *(_DWORD *)(*((void *)this + 33) + v224 + 348) & 0xFDFFFFFF | v229;
      *(_DWORD *)(*((void *)this + 33) + v224 + 348) |= 0x1000000u;
      int v231 = v353 - *(_DWORD *)(v228 + 12);
      int v232 = v231 & 0x1FFFF;
      if (v231 < -32768) {
        int v232 = 98304;
      }
      if (v231 <= 0x8000) {
        int v233 = v232;
      }
      else {
        int v233 = 0x8000;
      }
      *(_DWORD *)(*((void *)this + 33) + v224 + 348) = *(_DWORD *)(*((void *)this + 33) + v224 + 348) & 0xFFFE0000 | v233;
      *(_DWORD *)(*((void *)this + 33) + v224 + 348) = *(_DWORD *)(*((void *)this + 33) + v224 + 348) & 0xFFFDFFFF | ((*(_DWORD *)(v228 + 20) == 2) << 17);
      *(_DWORD *)(*((void *)this + 33) + v224 + 380) = 0;
      *(_DWORD *)(*((void *)this + 33) + v224 + 412) = 0;
      *(_DWORD *)(*((void *)this + 33) + v224 + 444) = 0;
      *(_DWORD *)(*((void *)this + 33) + v224 + 476) = 0;
      uint64_t v234 = *((void *)this + 33);
      if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
      {
        int v235 = v224 + 412;
        uint64_t v236 = v234 + v224;
        int v237 = *(_DWORD *)(v236 + 412);
        *(_DWORD *)(v236 + 412) = 0;
        *(_DWORD *)(*((void *)this + 33) + v224 + 412) ^= 0x1FFFFFFFu;
        uint64_t v238 = *((void *)this + 33) + v224;
        int v239 = *(_DWORD *)(v238 + 412);
        *(_DWORD *)(v238 + 412) = v237;
        uint64_t v240 = *(uint64_t **)(v228 + 48);
        uint64_t v241 = *v240;
        if (v357)
        {
          if (v241 || *((_DWORD *)v240 + 38) || *((_DWORD *)v240 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v240, v235, *((_DWORD *)v240 + 15), 0xFFFFFFFFFLL, 7, v239, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v242 = *((void *)this + 33) + v224;
          int v243 = *(_DWORD *)(v242 + 380);
          *(_DWORD *)(v242 + 380) = 0;
          *(_DWORD *)(*((void *)this + 33) + v224 + 380) ^= 0x1FFFFFFFu;
          uint64_t v244 = *((void *)this + 33) + v224;
          int v245 = *(_DWORD *)(v244 + 380);
          *(_DWORD *)(v244 + 380) = v243;
          uint64_t v246 = *(void *)(v228 + 48);
          if (*(void *)v246 || *(_DWORD *)(v246 + 152) || *(_DWORD *)(v246 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v246, (int)v224 + 380, *(_DWORD *)(v246 + 72), 0xFFFFFFFFFLL, 7, v245, 4);
            if (result) {
              return result;
            }
          }
          if (v354)
          {
            uint64_t v247 = *((void *)this + 33) + v224;
            int v248 = *(_DWORD *)(v247 + 476);
            *(_DWORD *)(v247 + 476) = 0;
            *(_DWORD *)(*((void *)this + 33) + v224 + 476) ^= 0x1FFFFFFFu;
            uint64_t v249 = *((void *)this + 33) + v224;
            int v250 = *(_DWORD *)(v249 + 476);
            *(_DWORD *)(v249 + 476) = v248;
            if (*(void *)v356 || *(_DWORD *)(v356 + 152) || *(_DWORD *)(v356 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v356, (int)v224 + 476, *(_DWORD *)(v356 + 56), 0xFFFFFFFFFLL, 7, v250, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v251 = *((void *)this + 33) + v224;
            int v252 = *(_DWORD *)(v251 + 444);
            *(_DWORD *)(v251 + 444) = 0;
            *(_DWORD *)(*((void *)this + 33) + v224 + 444) ^= 0x1FFFFFFFu;
            uint64_t v253 = *((void *)this + 33) + v224;
            int v254 = *(_DWORD *)(v253 + 444);
            *(_DWORD *)(v253 + 444) = v252;
            if (*(void *)v356 || *(_DWORD *)(v356 + 152) || *(_DWORD *)(v356 + 156))
            {
              int v255 = v224 + 444;
              uint64_t v256 = v356;
LABEL_280:
              int v275 = *(_DWORD *)(v256 + 68);
LABEL_281:
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v256, v255, v275, 0xFFFFFFFFFLL, 7, v254, 4);
              if (result) {
                return result;
              }
            }
          }
        }
        else
        {
          if (v241 || *((_DWORD *)v240 + 38) || *((_DWORD *)v240 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v240, v235, *((_DWORD *)v240 + 13), 0xFFFFFFFFFLL, 7, v239, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v276 = *((void *)this + 33) + v224;
          int v277 = *(_DWORD *)(v276 + 476);
          *(_DWORD *)(v276 + 476) = 0;
          *(_DWORD *)(*((void *)this + 33) + v224 + 476) ^= 0x1FFFFFFFu;
          uint64_t v278 = *((void *)this + 33) + v224;
          int v279 = *(_DWORD *)(v278 + 476);
          *(_DWORD *)(v278 + 476) = v277;
          uint64_t v280 = *(void *)(v228 + 48);
          if (*(void *)v280 || *(_DWORD *)(v280 + 152) || *(_DWORD *)(v280 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v280, (int)v224 + 476, *(_DWORD *)(v280 + 56), 0xFFFFFFFFFLL, 7, v279, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v281 = *((void *)this + 33) + v224;
          int v282 = *(_DWORD *)(v281 + 380);
          *(_DWORD *)(v281 + 380) = 0;
          *(_DWORD *)(*((void *)this + 33) + v224 + 380) ^= 0x1FFFFFFFu;
          uint64_t v283 = *((void *)this + 33) + v224;
          int v284 = *(_DWORD *)(v283 + 380);
          *(_DWORD *)(v283 + 380) = v282;
          uint64_t v285 = *(void *)(v228 + 48);
          if (*(void *)v285 || *(_DWORD *)(v285 + 152) || *(_DWORD *)(v285 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v285, (int)v224 + 380, *(_DWORD *)(v285 + 64), 0xFFFFFFFFFLL, 7, v284, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v286 = *((void *)this + 33) + v224;
          int v287 = *(_DWORD *)(v286 + 444);
          *(_DWORD *)(v286 + 444) = 0;
          *(_DWORD *)(*((void *)this + 33) + v224 + 444) ^= 0x1FFFFFFFu;
          uint64_t v288 = *((void *)this + 33) + v224;
          int v254 = *(_DWORD *)(v288 + 444);
          *(_DWORD *)(v288 + 444) = v287;
          uint64_t v256 = *(void *)(v228 + 48);
          if (*(void *)v256 || *(_DWORD *)(v256 + 152) || *(_DWORD *)(v256 + 156))
          {
            int v255 = v224 + 444;
            goto LABEL_280;
          }
        }
      }
      else
      {
        uint64_t v257 = v234 + v224;
        int v258 = *(_DWORD *)(v257 + 380);
        *(_DWORD *)(v257 + 380) = 0;
        *(_DWORD *)(*((void *)this + 33) + v224 + 380) ^= 0x1FFFFFFFu;
        uint64_t v259 = *((void *)this + 33) + v224;
        int v260 = *(_DWORD *)(v259 + 380);
        *(_DWORD *)(v259 + 380) = v258;
        int v261 = *v226;
        if (**v226 || *((_DWORD *)v261 + 38) || *((_DWORD *)v261 + 39))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v261, (int)v224 + 380, 0, 0xFFFFFFFFFLL, 7, v260, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v262 = *((void *)this + 33) + v224;
        int v263 = *(_DWORD *)(v262 + 412);
        *(_DWORD *)(v262 + 412) = 0;
        *(_DWORD *)(*((void *)this + 33) + v224 + 412) ^= 0x1FFFFFFFu;
        uint64_t v264 = *((void *)this + 33) + v224;
        int v265 = *(_DWORD *)(v264 + 412);
        *(_DWORD *)(v264 + 412) = v263;
        uint64_t v266 = *(void *)(v228 + 48);
        if (*(void *)v266 || *(_DWORD *)(v266 + 152) || *(_DWORD *)(v266 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v266, (int)v224 + 412, *(_DWORD *)(v266 + 52), 0xFFFFFFFFFLL, 7, v265, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v267 = *((void *)this + 33) + v224;
        int v268 = *(_DWORD *)(v267 + 444);
        *(_DWORD *)(v267 + 444) = 0;
        *(_DWORD *)(*((void *)this + 33) + v224 + 444) ^= 0x1FFFFFFFu;
        uint64_t v269 = *((void *)this + 33) + v224;
        int v270 = *(_DWORD *)(v269 + 444);
        *(_DWORD *)(v269 + 444) = v268;
        int v271 = *v227;
        if (**v227 || *((_DWORD *)v271 + 38) || *((_DWORD *)v271 + 39))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v271, (int)v224 + 444, 0, 0xFFFFFFFFFLL, 7, v270, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v272 = *((void *)this + 33) + v224;
        int v273 = *(_DWORD *)(v272 + 476);
        *(_DWORD *)(v272 + 476) = 0;
        *(_DWORD *)(*((void *)this + 33) + v224 + 476) ^= 0x1FFFFFFFu;
        uint64_t v274 = *((void *)this + 33) + v224;
        int v254 = *(_DWORD *)(v274 + 476);
        *(_DWORD *)(v274 + 476) = v273;
        uint64_t v256 = *(void *)(v228 + 48);
        if (*(void *)v256 || *(_DWORD *)(v256 + 152) || *(_DWORD *)(v256 + 156))
        {
          int v255 = v224 + 476;
          int v275 = *(_DWORD *)(v256 + 56);
          goto LABEL_281;
        }
      }
      v224 += 4;
      ++v225;
      ++v226;
      ++v227;
      if (4 * v355 == v224) {
        goto LABEL_283;
      }
    }
  }
  *(_DWORD *)(v366 + 88) |= 0x2000u;
  *((_DWORD *)this + v359 + 116) = 1;
  *(_DWORD *)(*((void *)this + 33) + 348) = 0;
LABEL_283:
  *(_DWORD *)(*((void *)this + 33) + 508) = 0;
  *(_DWORD *)(*((void *)this + 33) + 512) = 0;
  *(_DWORD *)(*((void *)this + 33) + 516) = 0;
  *(_DWORD *)(*((void *)this + 33) + 520) = 0;
  if (!v364) {
    goto LABEL_341;
  }
  uint64_t v289 = *((void *)this + 32);
  if (v352 && v351 == 2)
  {
    int v290 = *(_DWORD *)(*(void *)(v289 + 8360) + 60);
    uint64_t v291 = *((void *)this + 33);
    int v292 = *(_DWORD *)(v291 + 508);
    *(_DWORD *)(v291 + 508) = 0;
    *(_DWORD *)(*((void *)this + 33) + 508) ^= 0xFFFFFFFu;
    uint64_t v293 = *((void *)this + 33);
    int v294 = *(_DWORD *)(v293 + 508);
    *(_DWORD *)(v293 + 508) = v292;
    uint64_t v295 = *(void *)(*((void *)this + 32) + 8360);
    if (*(void *)v295 || *(_DWORD *)(v295 + 152) || *(_DWORD *)(v295 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v295, 508, v290, 0xFFFFFFFFFLL, 8, v294, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v296 = *((void *)this + 33);
    int v297 = *(_DWORD *)(v296 + 516);
    *(_DWORD *)(v296 + 516) = 0;
    *(_DWORD *)(*((void *)this + 33) + 516) ^= 0xC0000000;
    uint64_t v298 = *((void *)this + 33);
    int v299 = *(_DWORD *)(v298 + 516);
    *(_DWORD *)(v298 + 516) = v297;
    uint64_t v300 = *(void *)(*((void *)this + 32) + 8360);
    if (*(void *)v300 || *(_DWORD *)(v300 + 152) || *(_DWORD *)(v300 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v300, 516, v290, 192, 6, v299, 4);
      if (result) {
        return result;
      }
    }
    if (v354)
    {
      int v301 = *(_DWORD *)(v356 + 56);
      uint64_t v302 = *((void *)this + 33);
      int v303 = *(_DWORD *)(v302 + 512);
      *(_DWORD *)(v302 + 512) = 0;
      *(_DWORD *)(*((void *)this + 33) + 512) ^= 0xFFFFFFFu;
      uint64_t v304 = *((void *)this + 33);
      int v305 = *(_DWORD *)(v304 + 512);
      *(_DWORD *)(v304 + 512) = v303;
      if (*(void *)v356 || *(_DWORD *)(v356 + 152) || *(_DWORD *)(v356 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v356, 512, v301, 0xFFFFFFFFFLL, 8, v305, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v306 = *((void *)this + 33);
      int v307 = *(_DWORD *)(v306 + 520);
      *(_DWORD *)(v306 + 520) = 0;
      *(_DWORD *)(*((void *)this + 33) + 520) ^= 0xC0000000;
      uint64_t v308 = *((void *)this + 33);
      int v309 = *(_DWORD *)(v308 + 520);
      *(_DWORD *)(v308 + 520) = v307;
      if (*(void *)v356 || *(_DWORD *)(v356 + 152) || *(_DWORD *)(v356 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v356, 520, v301, 192, 6, v309, 4);
        if (result) {
          return result;
        }
      }
    }
    if (v350)
    {
      *(_DWORD *)(*((void *)this + 33) + 516) = *(_DWORD *)(*((void *)this + 33) + 516) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 84) >> 6) & 0xFFF));
      if (v354)
      {
        uint64_t v310 = v356;
LABEL_339:
        uint64_t v339 = (_DWORD *)(v310 + 80);
LABEL_340:
        *(_DWORD *)(*((void *)this + 33) + 520) = *(_DWORD *)(*((void *)this + 33) + 520) & 0xFFFF8003 | (4 * ((*v339 >> 6) & 0x1FFF));
      }
LABEL_341:
      uint64_t v340 = *((void *)this + 32);
      if (*(_DWORD *)(v340 + 2360) != 1) {
        return 0;
      }
      uint64_t v341 = *((void *)this + 33);
      *(_DWORD *)(v341 + 620) = *(_DWORD *)(v341 + 620) & 0xFFFFFFFE | *(_DWORD *)(v340 + 2508) & 1;
      if (*(_DWORD *)(v340 + 2508))
      {
        *(_DWORD *)(v341 + 2620) = 0x10000000;
        *(_DWORD *)(v341 + 2624) = *(_DWORD *)(v340 + 2368);
        *(void *)(v341 + 2632) = 0;
        *(_DWORD *)(v341 + 2628) = 0;
        *(_OWORD *)(v341 + 2640) = *(_OWORD *)(v340 + 2372);
        long long v342 = *(_OWORD *)(v340 + 2388);
        *(_OWORD *)(v341 + 2672) = *(_OWORD *)(v340 + 2404);
        *(_OWORD *)(v341 + 2656) = v342;
      }
      *(_DWORD *)(*((void *)this + 33) + 620) = *(_DWORD *)(*((void *)this + 33) + 620) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v340 + 2512) & 1));
      if (*(_DWORD *)(v340 + 2512))
      {
        *(_DWORD *)(v341 + 2688) = 0;
        char v343 = *(_DWORD *)(v340 + 2424);
        *(_DWORD *)(v341 + 2688) = (*(_DWORD *)(v340 + 2424) & 1) << 22;
        int v344 = ((*(_DWORD *)(v340 + 2420) & 1) << 23) | ((v343 & 1) << 22) | 0x20000000;
        *(_DWORD *)(v341 + 2688) = v344;
        *(_DWORD *)(v341 + 2688) = v344 | (*(_DWORD *)(v340 + 2364) == 0);
        long long v345 = *(_OWORD *)(v340 + 2428);
        long long v346 = *(_OWORD *)(v340 + 2444);
        *(_OWORD *)(v341 + 2724) = *(_OWORD *)(v340 + 2460);
        *(_OWORD *)(v341 + 2708) = v346;
        *(_OWORD *)(v341 + 2692) = v345;
      }
      *(_DWORD *)(*((void *)this + 33) + 620) = *(_DWORD *)(*((void *)this + 33) + 620) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v340 + 2516) & 1));
      *(_DWORD *)(*((void *)this + 33) + 620) = *(_DWORD *)(*((void *)this + 33) + 620) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v340 + 2520) & 1));
      *(_DWORD *)(*((void *)this + 33) + 620) = *(_DWORD *)(*((void *)this + 33) + 620) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v340 + 2524) & 1));
      if (!*(_DWORD *)(v340 + 2516)) {
        return 0;
      }
      *(_DWORD *)(v341 + 2744) = 0;
      if (*(_DWORD *)(v340 + 2476) == 2) {
        int v347 = 805306368;
      }
      else {
        int v347 = 813694976;
      }
      *(_DWORD *)(v341 + 2744) = v347;
      memcpy((void *)(v341 + 2748), (const void *)(v340 + 2480), 4 * *(unsigned int *)(v340 + 2476));
      uint64_t result = 0;
      *(_DWORD *)(v340 + 2516) = 0;
      return result;
    }
    if (CAHDecDahliaHevc::getSWRStride(this, *(unsigned __int16 *)(v366 + 160) - *(unsigned __int16 *)(v366 + 156) + 1, *(_DWORD *)(v68 + 23176 * v69 + 3636), *(_DWORD *)(v68 + 23176 * v69 + 3640), *(_DWORD *)(v68 + 23176 * v69 + 22852)))return 0xFFFFFFFFLL; {
    *(_DWORD *)(*((void *)this + 33) + 516) = *(_DWORD *)(*((void *)this + 33) + 516) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 3308) >> 6) & 0xFFF));
    }
    if (!v354) {
      goto LABEL_341;
    }
LABEL_359:
    uint64_t v339 = (_DWORD *)((char *)this + 13236);
    goto LABEL_340;
  }
  unsigned int v311 = *(unsigned __int8 *)(v289 + 3004);
  if (*(unsigned char *)(v289 + 3004))
  {
    unsigned int v311 = *(_DWORD *)(v289 + 3016);
    unsigned int v312 = *(_DWORD *)(v289 + 3020);
  }
  else
  {
    unsigned int v312 = 0;
  }
  uint64_t v313 = *(void *)(v289 + 8360);
  uint64_t v314 = *(unsigned int *)(v313 + 56);
  unint64_t v315 = *(unsigned int *)(v313 + 52) + (unint64_t)v311;
  uint64_t v316 = *((void *)this + 33);
  int v317 = *(_DWORD *)(v316 + 508);
  *(_DWORD *)(v316 + 508) = 0;
  *(_DWORD *)(*((void *)this + 33) + 508) ^= 0xFFFFFFFu;
  uint64_t v318 = *((void *)this + 33);
  int v319 = *(_DWORD *)(v318 + 508);
  *(_DWORD *)(v318 + 508) = v317;
  uint64_t v320 = *(void *)(*((void *)this + 32) + 8360);
  unint64_t v321 = HIDWORD(v315);
  if (!*(void *)v320 && !*(_DWORD *)(v320 + 152) && !*(_DWORD *)(v320 + 156)) {
    goto LABEL_362;
  }
  if (v321 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "populatePictureRegisters";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1174;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v320, 508, v315, 0xFFFFFFFFFLL, 8, v319, 4);
  if (!result)
  {
LABEL_362:
    unint64_t v322 = v314 + v312;
    uint64_t v323 = *((void *)this + 33);
    int v324 = *(_DWORD *)(v323 + 512);
    *(_DWORD *)(v323 + 512) = 0;
    *(_DWORD *)(*((void *)this + 33) + 512) ^= 0xFFFFFFFu;
    uint64_t v325 = *((void *)this + 33);
    int v326 = *(_DWORD *)(v325 + 512);
    *(_DWORD *)(v325 + 512) = v324;
    uint64_t v327 = *(void *)(*((void *)this + 32) + 8360);
    unint64_t v328 = HIDWORD(v322);
    if (!*(void *)v327 && !*(_DWORD *)(v327 + 152) && !*(_DWORD *)(v327 + 156)) {
      goto LABEL_363;
    }
    if (v328 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1175;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v327, 512, v322, 0xFFFFFFFFFLL, 8, v326, 4);
    if (!result)
    {
LABEL_363:
      uint64_t v329 = *((void *)this + 33);
      int v330 = *(_DWORD *)(v329 + 516);
      *(_DWORD *)(v329 + 516) = 0;
      *(_DWORD *)(*((void *)this + 33) + 516) ^= 0xC0000000;
      uint64_t v331 = *((void *)this + 33);
      int v332 = *(_DWORD *)(v331 + 516);
      *(_DWORD *)(v331 + 516) = v330;
      uint64_t v333 = *(void *)(*((void *)this + 32) + 8360);
      if (!*(void *)v333 && !*(_DWORD *)(v333 + 152) && !*(_DWORD *)(v333 + 156)) {
        goto LABEL_364;
      }
      if (v321 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1180;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v333, 516, v315, 192, 6, v332, 4);
      if (!result)
      {
LABEL_364:
        uint64_t v334 = *((void *)this + 33);
        int v335 = *(_DWORD *)(v334 + 520);
        *(_DWORD *)(v334 + 520) = 0;
        *(_DWORD *)(*((void *)this + 33) + 520) ^= 0xC0000000;
        uint64_t v336 = *((void *)this + 33);
        int v337 = *(_DWORD *)(v336 + 520);
        *(_DWORD *)(v336 + 520) = v335;
        uint64_t v338 = *(void *)(*((void *)this + 32) + 8360);
        if (!*(void *)v338 && !*(_DWORD *)(v338 + 152) && !*(_DWORD *)(v338 + 156)) {
          goto LABEL_337;
        }
        if (v328 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "populatePictureRegisters";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1181;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v338, 520, v322, 192, 6, v337, 4);
        if (!result)
        {
LABEL_337:
          if (v350)
          {
            *(_DWORD *)(*((void *)this + 33) + 516) = *(_DWORD *)(*((void *)this + 33) + 516) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 76) >> 6) & 0xFFF));
            uint64_t v310 = *(void *)(*((void *)this + 32) + 8360);
            goto LABEL_339;
          }
          if (CAHDecDahliaHevc::getSWRStride(this, *(unsigned __int16 *)(v366 + 160) - *(unsigned __int16 *)(v366 + 156) + 1, *(_DWORD *)(v68 + 23176 * v69 + 3636), *(_DWORD *)(v68 + 23176 * v69 + 3640), *(_DWORD *)(v68 + 23176 * v69 + 22852)))return 0xFFFFFFFFLL; {
          *(_DWORD *)(*((void *)this + 33) + 516) = *(_DWORD *)(*((void *)this + 33) + 516) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 3308) >> 6) & 0xFFF));
          }
          goto LABEL_359;
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecDahliaHevc::getSWRStride(CAHDecDahliaHevc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1654) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 3308) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 3308) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 3308) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 3308) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3309) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecDahliaHevc::getTileStartCTU(CAHDecDahliaHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 524);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecDahliaHevc::getTileEndCTU(CAHDecDahliaHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 524);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecDahliaHevc::getTileIdxAbove(CAHDecDahliaHevc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 524);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecDahliaHevc::populateAvdWork(CAHDecDahliaHevc *this, unsigned int a2)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 32);
  uint64_t v5 = *((void *)this + 33);
  int v6 = *(_DWORD *)(v4 + 8320);
  int v7 = *(_DWORD *)(v4 + 8324);
  uint64_t v8 = *(void *)(v4 + 8280);
  uint64_t v9 = *(void *)(v4 + 8288);
  uint64_t v109 = *(void *)(v4 + 8296);
  unsigned int v10 = *(_DWORD *)(v4 + 9036);
  unsigned int v11 = *(_DWORD *)(v4 + 3068);
  int v12 = *(_DWORD *)(v4 + 3072);
  memset(v146, 0, sizeof(v146));
  v145[0] = 0;
  v145[1] = 0;
  unsigned int v13 = v10 >> 28;
  uint64_t v14 = v8 + 23176 * v6;
  unsigned int v15 = *(_DWORD *)(v14 + 22888);
  if (v10)
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v16 = v15 > v13 + 1;
    }
    else {
      BOOL v16 = 0;
    }
    BOOL v17 = v16 && v12 == 0;
    int v18 = v17;
    int v134 = v18;
  }
  else
  {
    int v134 = 0;
  }
  unsigned int v126 = *(unsigned __int16 *)(v5 + 526) * *(unsigned __int16 *)(v5 + 524);
  if ((v10 & 2) != 0 && *(unsigned char *)(v9 + 9856 * v7 + 52))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v126 > v13 + 1;
    }
    int v21 = v19 && v12 == 0;
    int v137 = v21;
  }
  else
  {
    int v137 = 0;
  }
  uint64_t v115 = (unsigned int *)(v14 + 22880);
  if ((v10 & 0x20) != 0 && !*(unsigned char *)(v9 + 9856 * v7 + 53))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 52)) {
      BOOL v83 = 0;
    }
    else {
      BOOL v83 = v11 > v13 + 1;
    }
    int v85 = v83 && v12 == 0;
    int v129 = v85;
  }
  else
  {
    int v129 = 0;
  }
  unsigned int v22 = 0;
  unsigned int v139 = *v115;
  unsigned int v23 = v13 + 2;
  BOOL v17 = (v10 & 4) == 0;
  int v24 = v134;
  if (v17) {
    int v24 = 1;
  }
  if (((v24 | v137) & 1) == 0 && (v129 & 1) == 0) {
    unsigned int v22 = *(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & (v13 + 1);
  }
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  memset_pattern16(__b, &unk_223AD0630, 0x10uLL);
  uint64_t v25 = v5 + 221164;
  unsigned int v103 = v134 | v137 | v129;
  if (v103) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = 1;
  }
  unint64_t v27 = v22 + v26;
  uint64_t v120 = v26;
  unsigned int v105 = 0x1000 / v26;
  uint64_t v28 = 48 * (0x1000 / v26);
  uint64_t v29 = v22;
  unint64_t v30 = v22;
  do
  {
    *((void *)v146 + v30) = v25 + (v30 - v22) * v28;
    ++v30;
  }
  while (v30 < v27);
  uint64_t v102 = v28;
  unint64_t v106 = v27;
  uint64_t v31 = *((void *)v146 + v22);
  uint64_t v123 = v5 + 221164;
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v25) >> 4);
  unint64_t v104 = v22;
  if (!a2)
  {
    uint64_t v95 = 0;
    int v96 = 0;
    HIDWORD(v140) = 0;
    unsigned int v43 = v22;
    goto LABEL_165;
  }
  uint64_t v138 = 0;
  unsigned int v117 = 0;
  int v113 = 0;
  int v121 = 0;
  int v132 = 0;
  int v136 = 0;
  unsigned int v33 = v22;
  unsigned int v34 = v15;
  int v35 = 0;
  uint64_t v140 = 0;
  int v130 = 0;
  unsigned int v36 = a2;
  uint64_t v37 = 0;
  int v135 = 0;
  uint64_t v38 = v9 + 9856 * v7;
  unsigned int v39 = (unsigned char *)(v38 + 52);
  unsigned int v118 = (unsigned char *)(v38 + 53);
  int v40 = v134;
  if (v134) {
    int v41 = 12;
  }
  else {
    int v41 = 4;
  }
  int v116 = v41;
  unsigned int v122 = v36 - 1;
  unsigned int v111 = v34 - 1;
  unsigned int v112 = v34;
  unsigned int v110 = v34 - 2;
  unsigned int v42 = v120;
  int v108 = &__b[v29];
  unsigned int v101 = v36;
  uint64_t v107 = v36;
  uint64_t v124 = v5 + 3112;
  unsigned int v100 = v33;
  unsigned int v43 = v33;
  int v128 = v39;
  do
  {
    if (*v39) {
      int v44 = 1;
    }
    else {
      int v44 = v40;
    }
    if (v44 != 1)
    {
      unsigned int v47 = 1;
LABEL_54:
      uint64_t v48 = 0;
      int v114 = 0;
      uint64_t v49 = v109 + 2360 * v138;
      int v119 = (void *)(v49 + 1904);
      uint64_t v125 = (int *)(v49 + 36);
      int v127 = (unsigned char *)(v49 + 32);
      uint64_t v133 = v47;
      while (1)
      {
        if (!(v48 | v138))
        {
          *(_WORD *)(v31 + 4) = 0;
          *(_WORD *)(v31 + 6) = v43;
          *(_DWORD *)(v31 + 8) = 0;
          *(_WORD *)(v31 + 12) = 0;
          int v130 = *(_DWORD *)(v124 + 364 * v138);
          if (!(*(unsigned int (**)(void))(**((void **)this + 32) + 448))()) {
            return 0xFFFFFFFFLL;
          }
          int v54 = *v125;
          *(_DWORD *)(v31 + 32) = *v125;
          *(_DWORD *)(v31 + 36) = v54;
          HIDWORD(v140) = 0;
          *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecDahliaHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v139);
          __int16 v55 = 271;
          goto LABEL_159;
        }
        if (v48)
        {
          int v50 = *(_DWORD *)(*v119 + 4 * v48 - 4) + 1;
          if (*v128)
          {
            if (*v118)
            {
              unsigned int v51 = *v115;
              unsigned int v52 = (v51 + v140) / v51;
              v50 += v114;
              if (v52 >= *(unsigned __int16 *)(*((void *)this + 33) + 2 * (v121 + 1) + 570))
              {
                LODWORD(v140) = (*(uint64_t (**)(CAHDecDahliaHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v139);
                int v114 = 0;
                int v35 = v116;
              }
              else
              {
                LODWORD(v140) = v113 + v52 * v51;
                if (!v134)
                {
                  int v114 = v50;
                  int v40 = 0;
                  goto LABEL_160;
                }
                int v114 = 0;
                int v53 = __b[v43];
                __b[v43] = 0;
                if (v53) {
                  int v35 = 72;
                }
                else {
                  int v35 = 8;
                }
              }
            }
            else
            {
              LODWORD(v140) = (*(uint64_t (**)(CAHDecDahliaHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v139);
              int v35 = 4;
            }
          }
          else if (v134)
          {
            LODWORD(v140) = (*v115 + v140) / *v115 * *v115;
            int v35 = 8;
          }
          int v62 = 48 * v32;
          uint64_t v63 = v142;
          if (*(void *)v142 || *(_DWORD *)(v142 + 152) || *(_DWORD *)(v142 + 156))
          {
            int v64 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1802;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v64 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 221186, HIDWORD(v140) + v64, 0xFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v63 = v142;
            if (*(void *)v142) {
              goto LABEL_103;
            }
          }
          if (*(_DWORD *)(v63 + 152) || *(_DWORD *)(v63 + 156))
          {
LABEL_103:
            int v65 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1803;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v65 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 221188, HIDWORD(v140) + v65, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v50;
          HIDWORD(v140) += v50;
          unsigned int v42 = v120;
          int v40 = v134;
        }
        else
        {
          int v56 = 48 * v32;
          uint64_t v57 = v142;
          if (*(void *)v142 || *(_DWORD *)(v142 + 152) || *(_DWORD *)(v142 + 156))
          {
            int v58 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1726;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v58 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 221186, HIDWORD(v140) + v58, 0xFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v57 = v142;
            if (*(void *)v142) {
              goto LABEL_76;
            }
          }
          if (*(_DWORD *)(v57 + 152) || *(_DWORD *)(v57 + 156))
          {
LABEL_76:
            int v60 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1727;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v60 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 221188, HIDWORD(v140) + v60, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v130 - HIDWORD(v140);
          int v61 = *(_DWORD *)(v124 + 364 * v138);
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t *))(**((void **)this + 32) + 448))(*((void *)this + 32), v138, &v142, &v141))return 0xFFFFFFFFLL; {
          int v130 = v61;
          }
          if (*v127) {
            int v35 = 2;
          }
          else {
            int v35 = 258;
          }
          int v40 = v134;
          LODWORD(v140) = *v125;
          if (v134 && *v125 % v139 == v113)
          {
            HIDWORD(v140) = 0;
            if (__b[v43])
            {
              v35 |= 0x48u;
              __b[v43] = 0;
            }
            else
            {
              v35 |= 8u;
            }
          }
          else
          {
            HIDWORD(v140) = 0;
          }
        }
        unsigned int v66 = v37 + 1;
        if ((int)v37 + 1 < v126)
        {
          int v67 = (*(uint64_t (**)(CAHDecDahliaHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v139);
          int v68 = v116;
          if (v140 != v67) {
            int v68 = 0;
          }
          v35 |= v68;
        }
        *(_WORD *)(v31 + 16) = v35;
        if (v135 == v122) {
          *(_WORD *)(v31 + 18) |= 2u;
        }
        if (v37 == v126 - 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        int v69 = v137;
        if (v37 != v126 - 2) {
          int v69 = 0;
        }
        if (v69 == 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        if (v40
          && ((v70 = *(unsigned __int16 *)(v31 + 10), v112 > 1) ? (BOOL v71 = v110 == v70) : (BOOL v71 = 0),
              !v71 ? (int v72 = 0) : (int v72 = 1),
              v111 == v70 || v72))
        {
          *(_WORD *)(v31 + 18) |= 8u;
          if ((v35 & 4) != 0)
          {
LABEL_132:
            if (*v128 && *v118)
            {
              uint64_t v73 = *((void *)this + 33);
              unsigned int v74 = *(unsigned __int16 *)(v73 + 524);
              unsigned int v117 = (v43
                    - *(unsigned __int16 *)(v73 + 570 + 2 * (v66 / v74))
                    + *(unsigned __int16 *)(v73 + 570 + 2 * (v66 / v74 + 1)))
                   % v42;
              int v121 = v66 / v74;
              int v113 = *(unsigned __int16 *)(v73 + 524 + 2 * (v66 % v74) + 4);
              memset_pattern16(v108, &unk_223AD0630, 4 * (v120 - 1) + 4);
            }
            uint64_t v37 = (v37 + 1);
          }
        }
        else if ((v35 & 4) != 0)
        {
          goto LABEL_132;
        }
        if ((v35 & 0x44) != 0)
        {
          int v75 = (*(uint64_t (**)(CAHDecDahliaHevc *, uint64_t))(*(void *)this + 80))(this, v37);
          unsigned int v76 = v136;
          if (v136 <= v75) {
            v35 |= 0x20u;
          }
        }
        else
        {
          unsigned int v76 = v136;
        }
        if (!v48)
        {
          if (!*v127) {
            unsigned int v76 = v37;
          }
          int v77 = v132;
          if (!*v127) {
            int v77 = v140;
          }
          int v132 = v77;
        }
        if ((v35 & 0x44) != 0)
        {
          unsigned int v78 = *(unsigned __int16 *)(*((void *)this + 33) + 524);
          if (v76 / v78 + 1 == v37 / v78) {
            v35 |= 0x10u;
          }
        }
        ++*((_DWORD *)v145 + v43);
        *((void *)v146 + v43) += 48;
        unsigned int v79 = v140 / v139;
        if (v40) {
          unsigned int v43 = (v79 - v121 + v117) % v42;
        }
        if (v137) {
          unsigned int v43 = v37 % v42;
        }
        char v80 = v129 ^ 1;
        if (v48) {
          char v80 = 1;
        }
        int v136 = v76;
        if ((v80 & 1) == 0 && !*v127) {
          unsigned int v43 = (v43 + 1) % v42;
        }
        uint64_t v31 = *((void *)v146 + v43);
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v123) >> 4);
        *(_WORD *)(v31 + 4) = *((_DWORD *)v145 + v43);
        *(_WORD *)(v31 + 6) = v43;
        *(_WORD *)(v31 + 8) = v138;
        *(_WORD *)(v31 + 10) = v79;
        *(_WORD *)(v31 + 12) = v37;
        *(_DWORD *)(v31 + 32) = v140;
        *(_DWORD *)(v31 + 36) = v132;
        *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecDahliaHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v139);
        __int16 v55 = v35;
        int v135 = v138;
LABEL_159:
        *(_WORD *)(v31 + 14) = v55;
LABEL_160:
        if (v133 == ++v48) {
          goto LABEL_51;
        }
      }
    }
    int v45 = *(_DWORD *)(v109 + 2360 * v138 + 1896);
    BOOL v46 = __CFADD__(v45, 1);
    unsigned int v47 = v45 + 1;
    if (!v46) {
      goto LABEL_54;
    }
LABEL_51:
    ++v138;
    unsigned int v39 = v128;
  }
  while (v138 != v107);
  uint64_t v95 = v142;
  unsigned int v22 = v100;
  a2 = v101;
  int v96 = v130;
LABEL_165:
  int v131 = v96;
  int v81 = 48 * v32;
  if (!*(void *)v95 && !*(_DWORD *)(v95 + 152) && !*(_DWORD *)(v95 + 156))
  {
LABEL_185:
    if (*(_DWORD *)(v95 + 152) || *(_DWORD *)(v95 + 156)) {
      goto LABEL_187;
    }
    goto LABEL_191;
  }
  int v82 = v141;
  if ((v141 + (unint64_t)HIDWORD(v140)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "populateAvdWork";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 1897;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
    int v82 = v141;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 221186, HIDWORD(v140) + v82, 0xFFFFFFFFFLL, 32, -1, 2);
  if (!result)
  {
    uint64_t v95 = v142;
    if (!*(void *)v142) {
      goto LABEL_185;
    }
LABEL_187:
    int v86 = v141;
    if ((v141 + (unint64_t)HIDWORD(v140)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "populateAvdWork";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = 1898;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
      int v86 = v141;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 221188, HIDWORD(v140) + v86, 0xFFFFFFFFLL, 0, -1, 4);
    if (!result)
    {
LABEL_191:
      *(_DWORD *)(v31 + 28) = v131 - HIDWORD(v140);
      *(_DWORD *)(v31 + 16) = 917519;
      ++*((_DWORD *)v145 + v43);
      unint64_t v87 = v104;
      if (v129)
      {
        uint64_t v88 = 0;
        memset(buf, 0, sizeof(buf));
        do
        {
          buf[v88] = v123 + v88 * v102;
          ++v88;
        }
        while (v120 != v88);
        uint64_t v89 = buf[0];
        unsigned int v90 = *(unsigned __int16 *)(buf[0] + 8) + 1;
        uint64_t v91 = v103;
        uint64_t v92 = 0;
        if (v90 >= a2)
        {
          unsigned int v94 = buf;
        }
        else
        {
          uint64_t v93 = 0;
          unsigned int v94 = buf;
          do
          {
            if (*(unsigned __int16 *)(v89 + 4) + 1 == *((_DWORD *)v145 + v92))
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 40) = *(_DWORD *)(buf[v91] + 36);
            }
            else if (v90 == *(unsigned __int16 *)(v89 + 56))
            {
              *unsigned int v94 = v89 + 48;
              uint64_t v92 = v93;
              uint64_t v91 = v93;
            }
            else
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 40) = *(_DWORD *)(buf[v91] + 36);
              *unsigned int v94 = v89 + 48;
            }
            uint64_t v93 = v91;
            uint64_t v91 = ((int)v91 + 1) % v120;
            unsigned int v94 = &buf[v92];
            uint64_t v89 = *v94;
            unsigned int v90 = *(unsigned __int16 *)(*v94 + 8) + 1;
          }
          while (v90 < a2);
        }
        int v97 = *((_DWORD *)v145 + v92);
        if (*(unsigned __int16 *)(v89 + 4) + 1 != v97)
        {
          do
          {
            int v98 = *(unsigned __int16 *)(v89 + 52);
            v89 += 48;
          }
          while (v98 + 1 != v97);
          *unsigned int v94 = v89;
        }
        *(_DWORD *)(v89 + 40) = *(_DWORD *)(v89 + 44) + 1;
      }
      uint64_t v99 = *((void *)this + 33) + 36;
      do
      {
        *(_WORD *)(v99 + 2 * v87 - 8) = *((_DWORD *)v145 + v87);
        *(_DWORD *)(v99 + 4 * v87) = 48 * (v87 - v22) * v105 + 221164;
        ++v87;
      }
      while (v87 < v106);
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecDahliaHevc::allocWorkBuf_SPS(CAHDecDahliaHevc *this, _DWORD *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 5718;
  int v5 = a2[902];
  int v6 = a2[903];
  int v7 = a2[900];
  if (v5 < (*(unsigned int (**)(CAHDecDahliaHevc *))(*(void *)this + 96))(this)
    || (unsigned int v8 = a2[903], v8 < (*(unsigned int (**)(CAHDecDahliaHevc *))(*(void *)this + 104))(this))
    || (unsigned int v9 = a2[909], v9 > (*(unsigned int (**)(CAHDecDahliaHevc *))(*(void *)this + 112))(this) - 8)
    || (unsigned int v10 = a2[910], v10 > (*(unsigned int (**)(CAHDecDahliaHevc *))(*(void *)this + 120))(this) - 8)
    || (unsigned int v17 = *v4, v18 = *v4 - 16, v18 > 0x30)
    || ((1 << v18) & 0x1000000010001) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = a2[902];
      int v12 = a2[903];
      int v13 = a2[909];
      int v14 = a2[910];
      unsigned int v15 = *v4;
      int v49 = 136316418;
      int v50 = "allocWorkBuf_SPS";
      __int16 v51 = 1024;
      int v52 = v11;
      __int16 v53 = 1024;
      *(_DWORD *)int v54 = v12;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v13;
      __int16 v55 = 1024;
      int v56 = v14;
      __int16 v57 = 1024;
      unsigned int v58 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported bit stream w %d h %d bd %d %d CtbSizeY %d\n", (uint8_t *)&v49, 0x2Au);
    }
    return 0xFFFFFFFFLL;
  }
  int v19 = v5 + 31;
  if (v5 < -31) {
    int v19 = v5 + 62;
  }
  unsigned int v20 = v19 >> 5;
  int v21 = v6 + 31;
  if (v6 < -31) {
    int v21 = v6 + 62;
  }
  unsigned int v22 = v21 >> 5;
  unsigned int v23 = 32 - __clz(v20 - 1);
  if (v20 >= 2) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  unsigned int v25 = 32 - __clz(v22 - 1);
  if (v22 >= 2) {
    char v26 = v25;
  }
  else {
    char v26 = 0;
  }
  unsigned int v27 = ((32 << (v26 + v24)) + 127) & 0xFFFFFF80;
  if (v7)
  {
    int v28 = v5 << (v7 == 3);
    int v29 = v28 + 31;
    int v30 = v28 + 62;
    if (v29 >= 0) {
      int v30 = v29;
    }
    unsigned int v31 = v30 >> 5;
    if (v7 == 1) {
      int v32 = v6 + 1;
    }
    else {
      int v32 = v6;
    }
    int v33 = v32 >> (v7 == 1);
    int v35 = v33 + 15;
    BOOL v34 = v33 < -15;
    int v36 = v33 + 30;
    if (!v34) {
      int v36 = v35;
    }
    unsigned int v37 = v36 >> 4;
    if (v31 > 1)
    {
      unsigned int v38 = 32 - __clz(v31 - 1);
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v37 = 0;
  }
  LOBYTE(v38) = 0;
LABEL_32:
  unsigned int v39 = 32 - __clz(v37 - 1);
  if (v37 >= 2) {
    char v40 = v39;
  }
  else {
    char v40 = 0;
  }
  unsigned int v41 = ((8 << (v40 + v38)) + 127) & 0xFFFFFF80;
  if (!v7) {
    unsigned int v41 = 0;
  }
  *((_DWORD *)this + 3300) = v27;
  *((_DWORD *)this + 3301) = v41;
  *((void *)this + 1651) = 0;
  unsigned int v42 = (v17 & 0xFFFFFFF0) * (v17 >> 4) * v4[2];
  *((_DWORD *)this + 3306) = v42;
  *((_DWORD *)this + 3305) = v4[4] * v42;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_44:
    uint64_t v46 = 0;
    while (1)
    {
      uint64_t v47 = *((unsigned int *)this + 3305);
      if (v47)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecDahliaHevc *)((char *)this + v46 + 8976), v47, 7, 1, 0))break; {
      }
        }
      uint64_t result = 0;
      v46 += 176;
      if (v46 == 2816) {
        return result;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2164;
    __int16 v53 = 2080;
    *(void *)int v54 = "MvColo";
    uint64_t v48 = &_os_log_internal;
  }
  else
  {
    uint64_t v43 = 528;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 3300);
      if (v44
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecDahliaHevc *)((char *)this + v43), v44, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_56;
        }
        int v49 = 136315650;
        int v50 = "allocWorkBuf_SPS";
        __int16 v51 = 1024;
        int v52 = 2155;
        __int16 v53 = 2080;
        *(void *)int v54 = "HdrY";
        uint64_t v48 = &_os_log_internal;
        goto LABEL_55;
      }
      uint64_t v45 = *((unsigned int *)this + 3301);
      if (v45)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecDahliaHevc *)((char *)this + v43 + 2816), v45, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 3344) {
        goto LABEL_44;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2156;
    __int16 v53 = 2080;
    *(void *)int v54 = "HdrC";
    uint64_t v48 = &_os_log_internal;
  }
LABEL_55:
  _os_log_impl(&dword_223977000, v48, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v49, 0x1Cu);
LABEL_56:
  (*(void (**)(CAHDecDahliaHevc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecDahliaHevc::allocWorkBuf_PPS(CAHDecDahliaHevc *this, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  unsigned int v4 = (a2[909] + 9) & 0xFFFFFFFE;
  unsigned int v5 = (a2[910] + 9) & 0xFFFFFFFE;
  if (v4 <= v5) {
    unsigned int v6 = (a2[910] + 9) & 0xFFFFFFFE;
  }
  else {
    unsigned int v6 = (a2[909] + 9) & 0xFFFFFFFE;
  }
  int v7 = a2[900];
  if (v6 == 10) {
    int v8 = 40;
  }
  else {
    int v8 = 48;
  }
  if (v6 == 8) {
    int v8 = 32;
  }
  char v9 = v7 != 3;
  if (*((unsigned char *)a3 + 52))
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = a2[1106] + a2[1105];
    uint64_t v16 = a3[14];
    int v17 = a2[5718];
    unsigned int v18 = a2[902];
    do
    {
      int v19 = a3[v10 + 17] + 1;
      int v20 = v19 * v17;
      if (v19 * v17 + v13 > v18) {
        int v20 = v18 - v13;
      }
      if (v11 <= v20) {
        int v11 = v20;
      }
      if (v7)
      {
        unsigned int v21 = (v19 << v15) >> v9;
        if (v16 == v10) {
          unsigned int v21 = (((v18 >> 3) - (v14 << v15)) >> v9) + 1;
        }
        v12 += ((v21 + 2 * (v10 != 0)) * v8 + 127) & 0xFFFFFF80;
      }
      v13 += v20;
      v14 += v19;
      ++v10;
    }
    while (v16 + 1 != v10);
  }
  else
  {
    unsigned int v18 = a2[902];
    int v22 = (v8 + v8 * (v18 >> 3 >> v9) + 127) & 0x7FFFFF80;
    if (v7) {
      int v12 = v22;
    }
    else {
      int v12 = 0;
    }
    int v11 = a2[902];
  }
  signed int v23 = 0;
  uint64_t v24 = *((void *)this + 32);
  if (v11 >= -15) {
    int v25 = v11 + 15;
  }
  else {
    int v25 = v11 + 30;
  }
  int v26 = a3[14];
  if (*((unsigned char *)a3 + 52)) {
    int v27 = a3[14];
  }
  else {
    int v27 = 0;
  }
  int v65 = v27;
  if (v7 == 3) {
    int v28 = 48;
  }
  else {
    int v28 = 32;
  }
  if (v7 == 3) {
    int v29 = 176;
  }
  else {
    int v29 = 128;
  }
  if (!v7) {
    int v28 = 16;
  }
  unsigned int v30 = (v28 * v6) >> 3;
  if (!v7) {
    int v29 = 80;
  }
  int v63 = v25;
  int v64 = v29;
  int v31 = v25 >> 4;
  int v32 = (v25 >> 4) * v30;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  if (*((unsigned char *)a3 + 52) && v26)
  {
    uint64_t v36 = 0;
    int v37 = 0;
    unsigned int v35 = 0;
    unsigned int v34 = 0;
    unsigned int v33 = 0;
    if (v7 == 1) {
      int v38 = 8;
    }
    else {
      int v38 = 16;
    }
    if (!v7) {
      int v38 = 0;
    }
    unsigned int v39 = ((((6 * v38 + 96) * v6) >> 3) + 7) & 0x3FFFFFF8;
    int v40 = v38 + 16;
    unsigned int v41 = a2[903];
    signed int v42 = v4 - 8;
    signed int v43 = v5 - 8;
    if (v42 <= v43) {
      signed int v44 = v43;
    }
    else {
      signed int v44 = v42;
    }
    uint64_t v45 = a3[15];
    int v46 = a2[5718];
    BOOL v48 = *(_DWORD *)(v24 + 2644) == 1 && v44 != 0;
    int v49 = (char *)(a3 + 37);
    do
    {
      int v50 = v46 + v46 * *(_DWORD *)&v49[4 * v36];
      if (v50 + v37 > v41) {
        int v50 = v41 - v37;
      }
      int v51 = v50 + 15;
      if (v50 < -15) {
        int v51 = v50 + 30;
      }
      if (v36) {
        int v52 = (v51 >> 4) + 1;
      }
      else {
        int v52 = v51 >> 4;
      }
      unsigned int v53 = v52 * v39;
      if (v33 <= v53) {
        unsigned int v33 = v53;
      }
      unsigned int v54 = 36 * (v51 >> 4);
      if (v34 <= v54) {
        unsigned int v34 = v54;
      }
      if (v48)
      {
        if (v45 == v36) {
          int v55 = 23;
        }
        else {
          int v55 = 15;
        }
        unsigned int v56 = ((v55 + v50) / 16 * v40) | 6;
        if (v35 <= v56) {
          unsigned int v35 = v56;
        }
      }
      v37 += v50;
      ++v36;
    }
    while (v45 + 1 != v36);
    signed int v23 = (((3 * v6) & 0x7FFFFF) << 6) + (((v41 + 7) >> 3) + 2) * ((((v6 >> 1) & 0x1FFFFF) << 8) | 8);
  }
  if (v32 && CAVDDecoder::allocAVDMem(v24, (_OWORD *)this + 737, v32, 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2334;
      __int16 v71 = 2080;
      int v72 = "IpAbove";
      unsigned int v58 = &_os_log_internal;
LABEL_113:
      _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", buf, 0x1Cu);
      goto LABEL_114;
    }
    goto LABEL_114;
  }
  if ((v11 + 30) >= 0x1F
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 550, 4 * (4 * v31 + (v63 >> 4)), 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2335;
      __int16 v71 = 2080;
      int v72 = "MvAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
LABEL_114:
    (*(void (**)(CAHDecDahliaHevc *, void))(*(void *)v57 + 152))(v57, 0);
    return 0xFFFFFFFFLL;
  }
  int v59 = v65 + ((v18 + 15) >> 4);
  signed int v60 = v59 * ((((v64 * v6) >> 3) + 7) & 0x3FFFFFF8) + (v26 << 7);
  if (v60 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 748, v60, 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2336;
      __int16 v71 = 2080;
      int v72 = "LfAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  int v61 = 36 * v59 + (v26 << 7);
  __int16 v57 = this;
  if (v61 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 759, v61, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2337;
      __int16 v71 = 2080;
      int v72 = "LfAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v33 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 770, (int)v33, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2338;
      __int16 v71 = 2080;
      int v72 = "LfLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v34 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 781, (int)v34, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2339;
      __int16 v71 = 2080;
      int v72 = "LfLeftInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v35 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 792, (int)v35, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2340;
      __int16 v71 = 2080;
      int v72 = "SwLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v12 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 803, v12, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2341;
      __int16 v71 = 2080;
      int v72 = "AZAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (!v23) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 814, v23, 7, 1, 0);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2342;
      __int16 v71 = 2080;
      int v72 = "AZLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  return result;
}

uint64_t CAHDecDahliaHevc::freeWorkBuf_SPS(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(_DWORD *)(*(void *)(this + 256) + 2648))
  {
    for (uint64_t i = 528; i != 3344; i += 176)
    {
      BOOL v3 = (void *)(v1 + i);
      if (*(void *)(v1 + i))
      {
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v1 + i));
        void *v3 = 0;
      }
      if (v3[352])
      {
        unsigned int v4 = v3 + 352;
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), v4);
        *unsigned int v4 = 0;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1 + 8976;
  do
  {
    if (*(void *)(v6 + v5))
    {
      this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v6 + v5));
      *(void *)(v6 + v5) = 0;
    }
    v5 += 176;
  }
  while (v5 != 2816);
  return this;
}

uint64_t *CAHDecDahliaHevc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  unsigned int v2 = this;
  if (this[1474])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1474);
    v2[1474] = 0;
  }
  if (v2[1100])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1100);
    v2[1100] = 0;
  }
  if (v2[1496])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1496);
    v2[1496] = 0;
  }
  if (v2[1518])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1518);
    v2[1518] = 0;
  }
  if (v2[1540])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1540);
    v2[1540] = 0;
  }
  if (v2[1562])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1562);
    v2[1562] = 0;
  }
  if (v2[1584])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1584);
    v2[1584] = 0;
  }
  if (v2[1606])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1606);
    v2[1606] = 0;
  }
  if (v2[1628])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1628);
    v2[1628] = 0;
  }
  return this;
}

uint64_t CAHDecDahliaHevc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 6160;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 13216) = a2;
  return this;
}

uint64_t CAHDecDahliaHevc::decodeBuffer(CAHDecDahliaHevc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecDahliaHevc::decodeBufferSize(CAHDecDahliaHevc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecDahliaHevc::decHdrYLinAddr(CAHDecDahliaHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 66);
}

uint64_t CAHDecDahliaHevc::decHdrCLinAddr(CAHDecDahliaHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 418);
}

uint64_t CAHDecDahliaHevc::decHdrYSize(CAHDecDahliaHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 143);
}

uint64_t CAHDecDahliaHevc::decHdrCSize(CAHDecDahliaHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 847);
}

uint64_t CAHDecDahliaHevc::decHdrYStride(CAHDecDahliaHevc *this)
{
  return *((unsigned int *)this + 3302);
}

uint64_t CAHDecDahliaHevc::decHdrCStride(CAHDecDahliaHevc *this)
{
  return *((unsigned int *)this + 3303);
}

void interchange_init_functions(void)
{
  interchange_detile_sb = (uint64_t (*)(void, void, void, void))interchange_detile_sb_neon;
  interchange_tile_sb = (uint64_t (*)(void, void, void, void))interchange_tile_sb_neon;
}

int8x16_t interchange_detile_sb_neon(int8x16_t *a1, int a2, const unsigned __int8 *a3, int a4)
{
  if (a4 == 2)
  {
    int8x16x4_t v7 = *(int8x16x4_t *)a3;
    *a1 = vqtbl4q_s8(*(int8x16x4_t *)a3, (int8x16_t)xmmword_223ADAAF0);
    *(int8x16_t *)((char *)a1 + a2) = vqtbl4q_s8(v7, (int8x16_t)xmmword_223ADAB00);
    *(int8x16_t *)((char *)a1 + 2 * a2) = vqtbl4q_s8(v7, (int8x16_t)xmmword_223ADAB10);
    int8x16_t result = vqtbl4q_s8(v7, (int8x16_t)xmmword_223ADAB20);
    *(int8x16_t *)((char *)a1 + 3 * a2) = result;
  }
  else if (a4 == 1)
  {
    int8x16x2_t v6 = *(int8x16x2_t *)a3;
    int8x16_t v4 = vqtbl2q_s8(*(int8x16x2_t *)a3, (int8x16_t)xmmword_223ADAB30);
    a1->i64[0] = v4.i64[0];
    *(uint64_t *)((char *)a1->i64 + a2) = vextq_s8(v4, v4, 8uLL).u64[0];
    int8x16_t result = vqtbl2q_s8(v6, (int8x16_t)xmmword_223ADAB40);
    *(uint64_t *)((char *)a1->i64 + 2 * a2) = result.i64[0];
    result.i64[0] = vextq_s8(result, result, 8uLL).u64[0];
    *(uint64_t *)((char *)a1->i64 + 3 * a2) = result.i64[0];
  }
  return result;
}

int8x16_t *interchange_tile_sb_neon(int8x16_t *result, const unsigned __int8 *a2, int a3, int a4)
{
  if (a4 == 2)
  {
    v7.val[0] = *(int8x16_t *)a2;
    v7.val[1] = *(int8x16_t *)&a2[a3];
    v7.val[2] = *(int8x16_t *)&a2[2 * a3];
    v7.val[3] = *(int8x16_t *)&a2[3 * a3];
    *int8x16_t result = vqtbl4q_s8(v7, (int8x16_t)xmmword_223ADAB50);
    result[1] = vqtbl4q_s8(v7, (int8x16_t)xmmword_223ADAB60);
    result[2] = vqtbl4q_s8(v7, (int8x16_t)xmmword_223ADAB70);
    int8x16_t v4 = vqtbl4q_s8(v7, (int8x16_t)xmmword_223ADAB80);
    uint64_t v5 = 3;
  }
  else
  {
    if (a4 != 1) {
      return result;
    }
    v6.val[0].i64[0] = *(void *)a2;
    v6.val[0].i64[1] = *(void *)&a2[a3];
    v6.val[1].i64[0] = *(void *)&a2[2 * a3];
    v6.val[1].i64[1] = *(void *)&a2[3 * a3];
    *int8x16_t result = vqtbl2q_s8(v6, (int8x16_t)xmmword_223ADAB90);
    int8x16_t v4 = vqtbl2q_s8(v6, (int8x16_t)xmmword_223ADABA0);
    uint64_t v5 = 1;
  }
  result[v5] = v4;
  return result;
}

{
  int8x16_t v4;
  uint64_t v5;
  int8x16x2_t v6;
  int8x16x4_t v7;

  if (a4 == 2)
  {
    v7.val[0] = *(int8x16_t *)a2;
    v7.val[1] = *(int8x16_t *)&a2[a3];
    v7.val[2] = *(int8x16_t *)&a2[2 * a3];
    v7.val[3] = *(int8x16_t *)&a2[3 * a3];
    *int8x16_t result = vqtbl4q_s8(v7, (int8x16_t)xmmword_223ADAB50);
    result[1] = vqtbl4q_s8(v7, (int8x16_t)xmmword_223ADAB60);
    result[2] = vqtbl4q_s8(v7, (int8x16_t)xmmword_223ADAB70);
    int8x16_t v4 = vqtbl4q_s8(v7, (int8x16_t)xmmword_223ADAB80);
    uint64_t v5 = 3;
  }
  else
  {
    if (a4 != 1) {
      return result;
    }
    v6.val[0].i64[0] = *(void *)a2;
    v6.val[0].i64[1] = *(void *)&a2[a3];
    v6.val[1].i64[0] = *(void *)&a2[2 * a3];
    v6.val[1].i64[1] = *(void *)&a2[3 * a3];
    *int8x16_t result = vqtbl2q_s8(v6, (int8x16_t)xmmword_223ADAB90);
    int8x16_t v4 = vqtbl2q_s8(v6, (int8x16_t)xmmword_223ADABA0);
    uint64_t v5 = 1;
  }
  result[v5] = v4;
  return result;
}

uint64_t interchange_detile_plane(uint64_t result, uint64_t a2, const unsigned __int8 *a3, int a4, int a5, int a6)
{
  uint64_t v27 = result;
  unsigned int v6 = 6;
  if (!a6) {
    unsigned int v6 = 0;
  }
  if (a5 >= 1)
  {
    int v33 = 0;
    int v8 = (_DWORD *)((char *)&memory_parameters + 44 * v6);
    int v9 = v8[1];
    int v10 = v8[2];
    uint64_t v26 = (int)v8[3];
    uint64_t v11 = ((int)v26 / (v10 * v9));
    uint64_t v31 = 4 * (int)a2;
    int v34 = v10;
    uint64_t v23 = v10 * a4;
    uint64_t v24 = v10 * (uint64_t)(int)a2;
    uint64_t v12 = 8 * (int)v11;
    uint64_t v13 = (int)v8[5];
    uint64_t v14 = (int)v11 * v9;
    do
    {
      if (a4 >= 1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        do
        {
          int v17 = 0;
          uint64_t v18 = v27 + v15;
          uint64_t v29 = v16;
          uint64_t v30 = v15;
          int v19 = &a3[v16 * v26];
          uint64_t v20 = v12 + v15;
          do
          {
            int v35 = v17;
            if ((int)v14 >= 1)
            {
              uint64_t v21 = 0;
              do
              {
                int8x16_t result = interchange_detile_sb(v18 + v21, a2, v19, v11);
                v19 += v13;
                if (v21 + v12 >= v14) {
                  break;
                }
                uint64_t v22 = v20 + v21;
                v21 += v12;
              }
              while (v22 < a4);
            }
            int v17 = v35 + 4;
            if (v35 + 4 >= v34) {
              break;
            }
            v18 += v31;
          }
          while (v17 + v33 < a5);
          uint64_t v15 = v30 + v14;
          uint64_t v16 = v29 + 1;
        }
        while (v30 + v14 < a4);
      }
      a3 += v23;
      v27 += v24;
      v33 += v34;
    }
    while (v33 < a5);
  }
  return result;
}

uint64_t interchange_tile_plane(uint64_t result, const unsigned __int8 *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v27 = result;
  unsigned int v6 = 6;
  if (!a6) {
    unsigned int v6 = 0;
  }
  if (a5 >= 1)
  {
    int v33 = 0;
    int v8 = (_DWORD *)((char *)&memory_parameters + 44 * v6);
    int v9 = v8[1];
    int v10 = v8[2];
    uint64_t v26 = (int)v8[3];
    uint64_t v11 = ((int)v26 / (v10 * v9));
    uint64_t v31 = 4 * (int)a3;
    int v34 = v10;
    uint64_t v23 = v10 * a4;
    uint64_t v24 = v10 * (uint64_t)(int)a3;
    uint64_t v12 = 8 * (int)v11;
    uint64_t v13 = (int)v8[5];
    uint64_t v14 = (int)v11 * v9;
    do
    {
      if (a4 >= 1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        do
        {
          int v17 = 0;
          uint64_t v18 = &a2[v15];
          uint64_t v29 = v16;
          uint64_t v30 = v15;
          uint64_t v19 = v27 + v16 * v26;
          uint64_t v20 = v12 + v15;
          do
          {
            int v35 = v17;
            if ((int)v14 >= 1)
            {
              uint64_t v21 = 0;
              do
              {
                int8x16_t result = interchange_tile_sb(v19, &v18[v21], a3, v11);
                v19 += v13;
                if (v21 + v12 >= v14) {
                  break;
                }
                uint64_t v22 = v20 + v21;
                v21 += v12;
              }
              while (v22 < a4);
            }
            int v17 = v35 + 4;
            if (v35 + 4 >= v34) {
              break;
            }
            v18 += v31;
          }
          while (v17 + v33 < a5);
          uint64_t v15 = v30 + v14;
          uint64_t v16 = v29 + 1;
        }
        while (v30 + v14 < a4);
      }
      v27 += v23;
      a2 += v24;
      v33 += v34;
    }
    while (v33 < a5);
  }
  return result;
}

uint16x8_t *BilinearFilterV_swift_neon(uint16x8_t *result, uint8x16_t *a2, uint8x16_t *a3, int a4, unsigned int a5)
{
  int8x16_t v5 = vdupq_n_s8(a5);
  v6.i64[0] = 0x1010101010101010;
  v6.i64[1] = 0x1010101010101010;
  uint8x16_t v7 = (uint8x16_t)vsubq_s8(v6, v5);
  int v8 = a4 & 0x3F;
  signed int v9 = a4 & 0xFFFFFFC0;
  if (!v9) {
    goto LABEL_6;
  }
  do
  {
    BOOL v10 = __OFSUB__(v9, 64);
    v9 -= 64;
    uint8x16_t v12 = *a2;
    uint8x16_t v13 = a2[1];
    uint64_t v11 = a2 + 2;
    uint8x16_t v15 = *a3;
    uint8x16_t v16 = a3[1];
    uint64_t v14 = a3 + 2;
    uint8x16_t v17 = *v11;
    uint8x16_t v18 = v11[1];
    a2 = v11 + 2;
    uint8x16_t v19 = *v14;
    uint8x16_t v20 = v14[1];
    a3 = v14 + 2;
    *int8x16_t result = vmlal_u8(vmull_u8(*(uint8x8_t *)v12.i8, *(uint8x8_t *)v7.i8), *(uint8x8_t *)v15.i8, *(uint8x8_t *)v5.i8);
    result[1] = vmlal_high_u8(vmull_high_u8(v12, v7), v15, (uint8x16_t)v5);
    uint64_t v21 = result + 2;
    *uint64_t v21 = vmlal_u8(vmull_u8(*(uint8x8_t *)v13.i8, *(uint8x8_t *)v7.i8), *(uint8x8_t *)v16.i8, *(uint8x8_t *)v5.i8);
    v21[1] = vmlal_high_u8(vmull_high_u8(v13, v7), v16, (uint8x16_t)v5);
    v21 += 2;
    *uint64_t v21 = vmlal_u8(vmull_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v7.i8), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v5.i8);
    v21[1] = vmlal_high_u8(vmull_high_u8(v17, v7), v19, (uint8x16_t)v5);
    v21 += 2;
    *uint64_t v21 = vmlal_u8(vmull_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v7.i8), *(uint8x8_t *)v20.i8, *(uint8x8_t *)v5.i8);
    v21[1] = vmlal_high_u8(vmull_high_u8(v18, v7), v20, (uint8x16_t)v5);
    int8x16_t result = v21 + 2;
  }
  while (!((v9 < 0) ^ v10 | (v9 == 0)));
  if (v8)
  {
LABEL_6:
    do
    {
      BOOL v10 = __OFSUB__(v8, 16);
      v8 -= 16;
      uint8x16_t v22 = *a2++;
      uint8x16_t v23 = *a3++;
      *int8x16_t result = vmlal_u8(vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v7.i8), *(uint8x8_t *)v23.i8, *(uint8x8_t *)v5.i8);
      result[1] = vmlal_high_u8(vmull_high_u8(v22, v7), v23, (uint8x16_t)v5);
      result += 2;
    }
    while (!((v8 < 0) ^ v10 | (v8 == 0)));
  }
  return result;
}

int8x16_t *BilinearFilterH_swift_neon(int8x16_t *result, uint64_t a2, int a3, unsigned int a4, int8x16_t *a5, uint64_t a6)
{
  v6.i64[0] = 0x1010101010101010;
  v6.i64[1] = 0x1010101010101010;
  unint64_t v7 = 0;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 3 * a4;
  uint64_t v10 = 4 * a4;
  do
  {
    BOOL v11 = __OFSUB__(a3, 16);
    a3 -= 16;
    int8x16_t v12 = *a5++;
    int8x16_t v13 = vsubq_s8(v6, v12);
    uint8x16_t v14 = (uint8x16_t)vzip1q_s8(v13, v12);
    uint8x16_t v15 = (uint8x16_t)vzip2q_s8(v13, v12);
    uint8x16_t v16 = (const float *)(((v7 >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    uint8x16_t v17 = (__int32 *)((((v7 + a4) >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    uint8x16_t v18 = (__int32 *)((((v7 + v8) >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    uint8x16_t v19 = (__int32 *)((((v7 + v9) >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    unint64_t v20 = v7 + v10;
    v21.i32[0] = vld1q_dup_f32(v16).u32[0];
    v21.i32[1] = *v17;
    v21.i32[2] = *v18;
    v21.i32[3] = *v19;
    uint8x16_t v22 = (const float *)(((v20 >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    uint8x16_t v23 = (__int32 *)((((v20 + a4) >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    uint64_t v24 = (__int32 *)((((v20 + v8) >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    int v25 = (__int32 *)((((v20 + v9) >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    unint64_t v26 = v20 + v10;
    v27.i32[0] = vld1q_dup_f32(v22).u32[0];
    v27.i32[1] = *v23;
    v27.i32[2] = *v24;
    v27.i32[3] = *v25;
    int v28 = (const float *)(((v26 >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    uint64_t v29 = (__int32 *)((((v26 + a4) >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    uint64_t v30 = (__int32 *)((((v26 + v8) >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    uint64_t v31 = (__int32 *)((((v26 + v9) >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    unint64_t v32 = v26 + v10;
    v33.i32[0] = vld1q_dup_f32(v28).u32[0];
    v33.i32[1] = *v29;
    v33.i32[2] = *v30;
    v33.i32[3] = *v31;
    int v34 = (const float *)(((v32 >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    int v35 = (__int32 *)((((v32 + a4) >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    uint64_t v36 = (__int32 *)((((v32 + v8) >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    int v37 = (__int32 *)((((v32 + v9) >> 15) & 0xFFFFFFFFFFFFFFFELL) + a2);
    unint64_t v7 = v32 + v10;
    v38.i32[0] = vld1q_dup_f32(v34).u32[0];
    v38.i32[1] = *v35;
    v38.i32[2] = *v36;
    v38.i32[3] = *v37;
    *int8x16_t result = vrshrn_high_n_s16(vrshrn_n_s16(vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v14.i8), v21), vmulq_s16((int16x8_t)vmovl_high_u8(v14), v27)), 8uLL), vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v15.i8), v33), vmulq_s16((int16x8_t)vmovl_high_u8(v15), v38)), 8uLL);
    int8x16_t result = (int8x16_t *)((char *)result + a6);
  }
  while (!((a3 < 0) ^ v11 | (a3 == 0)));
  return result;
}

int8x16_t *BilinearFilterH_swift_chroma_neon(int8x16_t *result, uint64_t a2, int a3, unsigned int a4, int8x16_t *a5, uint64_t a6)
{
  v6.i64[0] = 0x1010101010101010;
  v6.i64[1] = 0x1010101010101010;
  unint64_t v7 = 0;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 3 * a4;
  uint64_t v10 = 4 * a4;
  int v11 = a3 - 8;
  if (!v11) {
    goto LABEL_5;
  }
  do
  {
    BOOL v12 = __OFSUB__(v11, 16);
    v11 -= 16;
    int8x16_t v13 = (const float *)(((v7 >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    uint8x16_t v14 = (__int32 *)((((v7 + a4) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    uint8x16_t v15 = (__int32 *)((((v7 + v8) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    uint8x16_t v16 = (__int32 *)((((v7 + v9) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    unint64_t v17 = v7 + v10;
    float32x4x2_t v49 = vld2q_dup_f32(v13);
    v49.val[0].i32[1] = *v14;
    v49.val[1].i32[1] = v14[1];
    v49.val[0].i32[2] = *v15;
    v49.val[1].i32[2] = v15[1];
    v49.val[0].i32[3] = *v16;
    v49.val[1].i32[3] = v16[1];
    uint8x16_t v18 = (const float *)(((v17 >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    uint8x16_t v19 = (__int32 *)((((v17 + a4) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    unint64_t v20 = (__int32 *)((((v17 + v8) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    int16x8_t v21 = (__int32 *)((((v17 + v9) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    unint64_t v22 = v17 + v10;
    float32x4x2_t v51 = vld2q_dup_f32(v18);
    v51.val[0].i32[1] = *v19;
    v51.val[1].i32[1] = v19[1];
    v51.val[0].i32[2] = *v20;
    v51.val[1].i32[2] = v20[1];
    v51.val[0].i32[3] = *v21;
    v51.val[1].i32[3] = v21[1];
    int8x16_t v23 = *a5++;
    int8x16_t v24 = vzip1q_s8(v23, v23);
    int8x16_t v25 = vzip2q_s8(v23, v23);
    uint8x16_t v26 = (uint8x16_t)vsubq_s8(v6, v24);
    uint8x16_t v27 = (uint8x16_t)vsubq_s8(v6, v25);
    int v28 = (const float *)(((v22 >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    uint64_t v29 = (__int32 *)((((v22 + a4) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    uint64_t v30 = (__int32 *)((((v22 + v8) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    uint64_t v31 = (__int32 *)((((v22 + v9) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    unint64_t v32 = v22 + v10;
    float32x4x2_t v53 = vld2q_dup_f32(v28);
    v53.val[0].i32[1] = *v29;
    v53.val[1].i32[1] = v29[1];
    v53.val[0].i32[2] = *v30;
    v53.val[1].i32[2] = v30[1];
    v53.val[0].i32[3] = *v31;
    v53.val[1].i32[3] = v31[1];
    int16x8_t v33 = (const float *)(((v32 >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    int v34 = (__int32 *)((((v32 + a4) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    int v35 = (__int32 *)((((v32 + v8) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    uint64_t v36 = (__int32 *)((((v32 + v9) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    unint64_t v7 = v32 + v10;
    float32x4x2_t v54 = vld2q_dup_f32(v33);
    v54.val[0].i32[1] = *v34;
    v54.val[1].i32[1] = v34[1];
    v54.val[0].i32[2] = *v35;
    v54.val[1].i32[2] = v35[1];
    v54.val[0].i32[3] = *v36;
    v54.val[1].i32[3] = v36[1];
    *int8x16_t result = vraddhn_high_s16(vraddhn_s16(vmulq_s16((int16x8_t)v49.val[0], (int16x8_t)vmovl_u8(*(uint8x8_t *)v26.i8)), vmulq_s16((int16x8_t)v49.val[1], (int16x8_t)vmovl_u8(*(uint8x8_t *)v24.i8))), vmulq_s16((int16x8_t)v51.val[0], (int16x8_t)vmovl_high_u8(v26)), vmulq_s16((int16x8_t)v51.val[1], (int16x8_t)vmovl_high_u8((uint8x16_t)v24)));
    int v37 = (int8x16_t *)((char *)result + a6);
    *int v37 = vraddhn_high_s16(vraddhn_s16(vmulq_s16((int16x8_t)v53.val[0], (int16x8_t)vmovl_u8(*(uint8x8_t *)v27.i8)), vmulq_s16((int16x8_t)v53.val[1], (int16x8_t)vmovl_u8(*(uint8x8_t *)v25.i8))), vmulq_s16((int16x8_t)v54.val[0], (int16x8_t)vmovl_high_u8(v27)), vmulq_s16((int16x8_t)v54.val[1], (int16x8_t)vmovl_high_u8((uint8x16_t)v25)));
    int8x16_t result = (int8x16_t *)((char *)v37 + a6);
  }
  while (!((v11 < 0) ^ v12 | (v11 == 0)));
  if (v11 < 0 == v12)
  {
LABEL_5:
    int16x8_t v38 = (const float *)(((v7 >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    unsigned int v39 = (__int32 *)((((v7 + a4) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    int v40 = (__int32 *)((((v7 + v8) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    unsigned int v41 = (__int32 *)((((v7 + v9) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    unint64_t v42 = v7 + v10;
    float32x4x2_t v50 = vld2q_dup_f32(v38);
    v50.val[0].i32[1] = *v39;
    v50.val[1].i32[1] = v39[1];
    v50.val[0].i32[2] = *v40;
    v50.val[1].i32[2] = v40[1];
    v50.val[0].i32[3] = *v41;
    v50.val[1].i32[3] = v41[1];
    signed int v43 = (const float *)(((v42 >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    signed int v44 = (__int32 *)((((v42 + a4) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    uint64_t v45 = (__int32 *)((((v42 + v8) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    int v46 = (__int32 *)((((v42 + v9) >> 14) & 0xFFFFFFFFFFFFFFFCLL) + a2);
    float32x4x2_t v52 = vld2q_dup_f32(v43);
    v52.val[0].i32[1] = *v44;
    v52.val[1].i32[1] = v44[1];
    v52.val[0].i32[2] = *v45;
    v52.val[1].i32[2] = v45[1];
    v52.val[0].i32[3] = *v46;
    v52.val[1].i32[3] = v46[1];
    int8x16_t v47 = vzip1q_s8(*a5, *a5);
    uint8x16_t v48 = (uint8x16_t)vsubq_s8(v6, v47);
    *int8x16_t result = vraddhn_high_s16(vraddhn_s16(vmulq_s16((int16x8_t)v50.val[0], (int16x8_t)vmovl_u8(*(uint8x8_t *)v48.i8)), vmulq_s16((int16x8_t)v50.val[1], (int16x8_t)vmovl_u8(*(uint8x8_t *)v47.i8))), vmulq_s16((int16x8_t)v52.val[0], (int16x8_t)vmovl_high_u8(v48)), vmulq_s16((int16x8_t)v52.val[1], (int16x8_t)vmovl_high_u8((uint8x16_t)v47)));
    return (int8x16_t *)((char *)result + a6);
  }
  return result;
}

int8x16_t *BilinearFilterH_vperm2_neon64(int8x16_t *result, uint64_t a2, int a3, unsigned int *a4, int8x16_t *a5, int8x16_t *a6, uint64_t a7)
{
  v7.i64[0] = 0x1010101010101010;
  v7.i64[1] = 0x1010101010101010;
  do
  {
    BOOL v8 = __OFSUB__(a3, 16);
    a3 -= 16;
    int8x16_t v9 = *a5++;
    int8x16_t v10 = vsubq_s8(v7, v9);
    uint8x16_t v11 = (uint8x16_t)vzip1q_s8(v10, v9);
    uint8x16_t v12 = (uint8x16_t)vzip2q_s8(v10, v9);
    uint64_t v13 = a4[2];
    uint64_t v14 = a4[3];
    uint64_t v15 = *a4;
    uint64_t v16 = a4[1];
    a4 += 4;
    int8x16_t v17 = a6[3];
    int8x16_t v18 = a6[2];
    int8x16_t v19 = a6[1];
    int8x16_t v20 = *a6;
    a6 += 4;
    *int8x16_t result = vrshrn_high_n_s16(vrshrn_n_s16(vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v11.i8), (int16x8_t)vqtbl1q_s8(*(int8x16_t *)(a2 + v15), v20)), vmulq_s16((int16x8_t)vmovl_high_u8(v11), (int16x8_t)vqtbl1q_s8(*(int8x16_t *)(a2 + v16), v19))), 8uLL), vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v12.i8), (int16x8_t)vqtbl1q_s8(*(int8x16_t *)(a2 + v13), v18)), vmulq_s16((int16x8_t)vmovl_high_u8(v12), (int16x8_t)vqtbl1q_s8(*(int8x16_t *)(a2 + v14), v17))), 8uLL);
    int8x16_t result = (int8x16_t *)((char *)result + a7);
  }
  while (!((a3 < 0) ^ v8 | (a3 == 0)));
  return result;
}

int8x16_t *BilinearFilterH_chroma_vperm2_neon64(int8x16_t *result, uint64_t a2, int a3, unsigned int *a4, int8x16_t *a5, int8x16_t *a6, uint64_t a7)
{
  v7.i64[0] = 0x1010101010101010;
  v7.i64[1] = 0x1010101010101010;
  uint64_t v8 = a2 + 16;
  do
  {
    BOOL v9 = __OFSUB__(a3, 8);
    a3 -= 8;
    int8x16_t v10 = *a5++;
    uint8x16_t v11 = (uint8x16_t)vsubq_s8(v7, v10);
    int16x8_t v12 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v11.i8);
    int16x8_t v13 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
    int16x8_t v14 = (int16x8_t)vmovl_high_u8(v11);
    int16x8_t v15 = (int16x8_t)vmovl_high_u8((uint8x16_t)v10);
    uint64_t v16 = *a4;
    uint64_t v17 = a4[1];
    a4 += 2;
    int8x16_t v18 = a6[3];
    int8x16_t v19 = a6[2];
    int8x16_t v20 = a6[1];
    int8x16_t v21 = *a6;
    a6 += 4;
    v22.val[0] = *(int8x16_t *)(a2 + v16);
    v22.val[1] = *(int8x16_t *)(v8 + v16);
    v23.val[0] = *(int8x16_t *)(a2 + v17);
    v23.val[1] = *(int8x16_t *)(v8 + v17);
    *int8x16_t result = vraddhn_high_s16(vraddhn_s16(vmulq_s16((int16x8_t)vqtbl2q_s8(v22, v21), v12), vmulq_s16((int16x8_t)vqtbl2q_s8(v22, v20), v13)), vmulq_s16((int16x8_t)vqtbl2q_s8(v23, v19), v14), vmulq_s16((int16x8_t)vqtbl2q_s8(v23, v18), v15));
    int8x16_t result = (int8x16_t *)((char *)result + a7);
  }
  while (!((a3 < 0) ^ v9 | (a3 == 0)));
  return result;
}

_OWORD *DetileRow_neon(_OWORD *result, long long *a2, int a3, uint64_t a4)
{
  do
  {
    BOOL v4 = __OFSUB__(a3, 16);
    a3 -= 16;
    long long v5 = *a2;
    a2 = (long long *)((char *)a2 + a4);
    *result++ = v5;
  }
  while (!((a3 < 0) ^ v4 | (a3 == 0)));
  return result;
}

_OWORD *Detile2Rows_neon(_OWORD *result, _OWORD *a2, long long *a3, int a4, uint64_t a5)
{
  do
  {
    BOOL v5 = __OFSUB__(a4, 16);
    a4 -= 16;
    long long v6 = *a3;
    long long v7 = a3[1];
    a3 = (long long *)((char *)a3 + a5);
    *result++ = v6;
    *a2++ = v7;
  }
  while (!((a4 < 0) ^ v5 | (a4 == 0)));
  return result;
}

__n128 Detile4Rows_neon(__n128 **a1, __n128 *a2, int a3, uint64_t a4)
{
  BOOL v4 = *a1;
  BOOL v5 = a1[1];
  long long v6 = a1[2];
  long long v7 = a1[3];
  if ((a3 & 0xF) != 0)
  {
    a3 -= 16;
    __n128 v8 = *a2;
    __n128 v9 = a2[1];
    __n128 v10 = a2[2];
    __n128 v11 = a2[3];
    a2 = (__n128 *)((char *)a2 + a4);
    *v4++ = v8;
    *v5++ = v9;
    *v6++ = v10;
    *v7++ = v11;
  }
  do
  {
    BOOL v12 = __OFSUB__(a3, 32);
    a3 -= 32;
    __n128 result = *a2;
    __n128 v15 = a2[1];
    __n128 v16 = a2[2];
    __n128 v17 = a2[3];
    int16x8_t v13 = (__n128 *)((char *)a2 + a4);
    __n128 v18 = *v13;
    __n128 v19 = v13[1];
    __n128 v20 = v13[2];
    __n128 v21 = v13[3];
    a2 = (__n128 *)((char *)v13 + a4);
    *BOOL v4 = result;
    v4[1] = v18;
    v4 += 2;
    *BOOL v5 = v15;
    v5[1] = v19;
    v5 += 2;
    *long long v6 = v16;
    v6[1] = v20;
    v6 += 2;
    *long long v7 = v17;
    v7[1] = v21;
    v7 += 2;
  }
  while (!((a3 < 0) ^ v12 | (a3 == 0)));
  return result;
}

void ScaleBilinear_swift_neon(int8x16_t **a1, int *a2, int a3, int a4, uint64_t *a5, int *a6, int a7, int a8, void *a9)
{
  unsigned int v11 = (a7 << 16) / a3;
  BOOL v12 = *a1;
  uint64_t v115 = *a2;
  uint64_t v13 = *a5;
  int v14 = *a6;
  __n128 v15 = (uint16x8_t *)a9[1];
  __n128 v16 = (int8x16_t *)a9[4];
  int v17 = a8 << 16;
  int v119 = a7;
  unsigned int v108 = v11;
  uint64_t v117 = *a5;
  int v113 = v16;
  if (v11 > 0x20000)
  {
    if (a3 >= 1)
    {
      unsigned __int16 v18 = 0;
      uint64_t v19 = (a3 + 1) & 0x1FFFFFFFELL;
      uint64x2_t v20 = (uint64x2_t)vdupq_n_s64((unint64_t)a3 - 1);
      __n128 v21 = &v16->i8[1];
      int64x2_t v22 = (int64x2_t)xmmword_223ADA980;
      int64x2_t v23 = vdupq_n_s64(2uLL);
      do
      {
        int32x2_t v24 = vmovn_s64((int64x2_t)vcgeq_u64(v20, (uint64x2_t)v22));
        if (v24.i8[0]) {
          *(v21 - 1) = v18 >> 12;
        }
        if (v24.i8[4]) {
          *__n128 v21 = (unsigned __int16)(v11 + v18) >> 12;
        }
        int64x2_t v22 = vaddq_s64(v22, v23);
        v21 += 2;
        v18 += 2 * v11;
        v19 -= 2;
      }
      while (v19);
    }
    int v25 = a3;
    if (a4 >= 1)
    {
      unsigned int v26 = 0;
      int v27 = a8 - 1;
      uint64_t v28 = a7;
      uint64_t v29 = a7 - 1;
      int v30 = a4;
      int v31 = v17 / a4;
      do
      {
        unsigned int v32 = HIWORD(v26);
        unsigned int v33 = (unsigned __int16)v26 >> 12;
        v26 += v31;
        int v34 = (uint8x16_t *)(v13 + (int)(v32 * v14));
        if (v27 >= (int)(v32 + 1)) {
          int v35 = v32 + 1;
        }
        else {
          int v35 = v27;
        }
        BilinearFilterV_swift_neon(v15, v34, (uint8x16_t *)(v13 + v35 * v14), a7, v33);
        v15->i16[v28] = v15->i16[v29];
        BilinearFilterH_swift_neon(v12, (uint64_t)v15, v25, v108, v113, 16);
        uint64_t v13 = v117;
        a7 = v119;
        BOOL v12 = (int8x16_t *)((char *)v12 + v115);
        --v30;
      }
      while (v30);
    }
    goto LABEL_33;
  }
  uint64_t v36 = (unsigned int *)a9[7];
  int v37 = (int8x16_t *)a9[10];
  if (a3 >= 1)
  {
    uint64_t v38 = 0;
    unsigned int v39 = 0;
    unsigned int v40 = 0;
    unsigned int v41 = (_DWORD *)a9[7];
    do
    {
      unsigned int v42 = HIWORD(v39);
      v16->i8[v38] = (unsigned __int16)v39 >> 12;
      if ((v38 & 3) == 0)
      {
        *v41++ = 2 * v42;
        unsigned int v40 = HIWORD(v39);
      }
      v39 += v11;
      v37->i32[v38++] = 33686018 * (v42 - v40) + 50462976;
    }
    while (a3 != v38);
    signed int v43 = v37;
    int v44 = a3;
    goto LABEL_24;
  }
  signed int v43 = (int8x16_t *)a9[10];
  if (a3 > -16)
  {
    int v44 = 0;
    unsigned int v41 = (_DWORD *)a9[7];
LABEL_24:
    int v45 = a3 + 16;
    if (a3 + 16 <= v44 + 4) {
      int v45 = v44 + 4;
    }
    bzero(v41, ((v45 + ~v44) & 0xFFFFFFFC) + 4);
    a7 = v119;
    uint64_t v13 = v117;
  }
  uint64_t v109 = v43;
  unsigned int v111 = v36;
  int v25 = a3;
  if (a4 >= 1)
  {
    unsigned int v46 = 0;
    uint64_t v47 = a7;
    int v48 = v17;
    uint64_t v49 = a7 - 1;
    int v50 = a4;
    int v51 = v48 / a4;
    do
    {
      unsigned int v52 = HIWORD(v46);
      unsigned int v53 = (unsigned __int16)v46 >> 12;
      v46 += v51;
      float32x4x2_t v54 = (uint8x16_t *)(v13 + v52 * v14);
      if (a8 - 1 >= v52 + 1) {
        int v55 = v52 + 1;
      }
      else {
        int v55 = a8 - 1;
      }
      BilinearFilterV_swift_neon(v15, v54, (uint8x16_t *)(v13 + (v55 * v14)), a7, v53);
      v15->i16[v47] = v15->i16[v49];
      BilinearFilterH_vperm2_neon64(v12, (uint64_t)v15, v25, v111, v113, v109, 16);
      uint64_t v13 = v117;
      a7 = v119;
      BOOL v12 = (int8x16_t *)((char *)v12 + v115);
      --v50;
    }
    while (v50);
  }
LABEL_33:
  int v56 = a4 >> 1;
  __int16 v57 = a1[1];
  uint64_t v58 = (v25 >> 1);
  uint64_t v59 = a5[1];
  int v60 = a6[1];
  int v61 = a8 >> 1;
  int v62 = (uint16x8_t *)a9[1];
  int v63 = (int8x16_t *)a9[4];
  uint64_t v118 = v59;
  int v116 = v60;
  int v112 = v25 >> 1;
  uint64_t v114 = a2[1];
  unsigned int v110 = v63;
  if (v108 > 0x20000)
  {
    int v64 = (int)((a7 << 15) & 0xFFFF0000) / (int)v58;
    if (v25 >= 2)
    {
      unsigned __int16 v65 = 0;
      uint64_t v66 = (v58 + 1) & 0x1FFFFFFFELL;
      uint64x2_t v67 = (uint64x2_t)vdupq_n_s64(v58 - 1);
      int v68 = &v63->i8[1];
      int64x2_t v69 = (int64x2_t)xmmword_223ADA980;
      int64x2_t v70 = vdupq_n_s64(2uLL);
      do
      {
        int32x2_t v71 = vmovn_s64((int64x2_t)vcgeq_u64(v67, (uint64x2_t)v69));
        if (v71.i8[0]) {
          *(v68 - 1) = v65 >> 12;
        }
        if (v71.i8[4]) {
          *int v68 = (unsigned __int16)(v64 + v65) >> 12;
        }
        int64x2_t v69 = vaddq_s64(v69, v70);
        v68 += 2;
        v65 += 2 * v64;
        v66 -= 2;
      }
      while (v66);
    }
    unsigned int v120 = (int)((a7 << 15) & 0xFFFF0000) / (int)v58;
    if (a4 >= 2)
    {
      unsigned int v72 = 0;
      unint64_t v73 = a7 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v74 = a7 | 1;
      int v75 = (v61 << 16) / v56;
      do
      {
        unsigned int v76 = HIWORD(v72);
        unsigned int v77 = (unsigned __int16)v72 >> 12;
        v72 += v75;
        unsigned int v78 = (uint8x16_t *)(v59 + (int)(v76 * v60));
        if (v61 - 1 >= (int)(v76 + 1)) {
          int v79 = v76 + 1;
        }
        else {
          int v79 = v61 - 1;
        }
        BilinearFilterV_swift_neon(v62, v78, (uint8x16_t *)(v59 + v79 * v60), v73, v77);
        v62->i16[v73] = v62->i16[v73 - 2];
        v62->i16[v74] = v62->i16[v73 - 1];
        BilinearFilterH_swift_chroma_neon(v57, (uint64_t)v62, v112, v120, v110, 16);
        int v60 = v116;
        uint64_t v59 = v118;
        __int16 v57 = (int8x16_t *)((char *)v57 + v114);
        --v56;
      }
      while (v56);
    }
    return;
  }
  char v80 = (unsigned int *)a9[7];
  int v81 = (int8x16_t *)a9[10];
  if (v25 >= 2)
  {
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    unsigned int v84 = 0;
    unsigned int v85 = 0;
    int v86 = (_DWORD *)a9[7];
    do
    {
      unsigned int v87 = HIWORD(v84);
      __int8 v88 = (unsigned __int16)v84 >> 12;
      uint64_t v89 = &v63->i8[v82];
      v89[1] = v88;
      *uint64_t v89 = v88;
      if ((v83 & 3) == 0)
      {
        *v86++ = 4 * v87;
        unsigned int v85 = HIWORD(v84);
      }
      v84 += (int)((a7 << 15) & 0xFFFF0000) / (int)v58;
      int v90 = 67372036 * (v87 - v85);
      int v91 = v82 & 0x7FFFFFF8 | v83 & 3;
      v81->i32[v91] = v90 + 50462976;
      v81->i32[v91 | 4] = v90 + 117835012;
      ++v83;
      v82 += 2;
    }
    while (v58 != v83);
    int v92 = v25 >> 1;
    goto LABEL_56;
  }
  if (v25 > -31)
  {
    int v92 = 0;
    int v86 = (_DWORD *)a9[7];
LABEL_56:
    int v93 = v58 + 16;
    if ((int)v58 + 16 <= v92 + 4) {
      int v93 = v92 + 4;
    }
    bzero(v86, ((v93 + ~v92) & 0xFFFFFFFC) + 4);
    a7 = v119;
    uint64_t v59 = v118;
    int v60 = v116;
  }
  if (a4 >= 2)
  {
    unsigned int v94 = 0;
    unint64_t v95 = a7 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v96 = a7 | 1;
    int v97 = (v61 << 16) / v56;
    do
    {
      unsigned int v98 = HIWORD(v94);
      unsigned int v99 = (unsigned __int16)v94 >> 12;
      v94 += v97;
      unsigned int v100 = (uint8x16_t *)(v59 + v98 * v60);
      if (v61 - 1 >= v98 + 1) {
        int v101 = v98 + 1;
      }
      else {
        int v101 = v61 - 1;
      }
      BilinearFilterV_swift_neon(v62, v100, (uint8x16_t *)(v59 + (v101 * v60)), v95, v99);
      v62->i16[v95] = v62->i16[v95 - 2];
      v62->i16[v96] = v62->i16[v95 - 1];
      BilinearFilterH_chroma_vperm2_neon64(v57, (uint64_t)v62, v112, v80, v110, v81, 16);
      int v60 = v116;
      uint64_t v59 = v118;
      __int16 v57 = (int8x16_t *)((char *)v57 + v114);
      --v56;
    }
    while (v56);
  }
}

unsigned int *GetDetiledResolution(unsigned int *result, unsigned int *a2, int a3, int a4, int a5)
{
  if (a5 == 2) {
    int v5 = 5;
  }
  else {
    int v5 = 4;
  }
  if (a5 == 2) {
    int v6 = 4;
  }
  else {
    int v6 = 8;
  }
  if (a5 == 2) {
    int v7 = 2;
  }
  else {
    int v7 = 4;
  }
  *__n128 result = v5 + a3;
  *a2 = a4 + 4;
  int v8 = *result + 30;
  if ((int)*result >= -15) {
    int v8 = *result + 15;
  }
  *__n128 result = v8 & 0xFFFFFFF0;
  int v9 = *a2 + 14;
  if ((int)*a2 >= -7) {
    int v9 = *a2 + 7;
  }
  *a2 = v9 & 0xFFFFFFF8;
  result[1] = v6 + a3;
  a2[1] = v7 + (a4 >> 1);
  int v10 = result[1];
  int v12 = v10 + 15;
  BOOL v11 = v10 < -15;
  int v13 = v10 + 30;
  if (!v11) {
    int v13 = v12;
  }
  result[1] = v13 & 0xFFFFFFF0;
  int v14 = a2[1];
  int v15 = v14 + 7;
  BOOL v11 = v14 < -7;
  int v16 = v14 + 14;
  if (!v11) {
    int v16 = v15;
  }
  a2[1] = v16 & 0xFFFFFFF8;
  return result;
}

uint64_t Detile420(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4, int a5, int a6, _DWORD *a7, int a8, uint64_t a9)
{
  GetDetiledResolution(a2, a3, a5, a6, a8);
  uint64_t v11 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v13 = i;
    uint64_t v14 = *(void *)(a1 + 8 * v11);
    if (v14)
    {
      uint64_t v15 = *(void *)(a4 + 8 * v11);
      if (v15)
      {
        unint64_t v28 = a3[v11];
        if ((int)v28 >= 1) {
          break;
        }
      }
    }
LABEL_11:
    uint64_t v11 = 1;
    if ((v13 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v16 = 0;
  unsigned int v17 = 0;
  uint64_t v18 = (int)a2[v11];
  uint64_t v26 = a1;
  char v25 = i;
  while (1)
  {
    uint64_t v29 = v16;
    if ((int)v18 >= 1) {
      break;
    }
LABEL_10:
    uint64_t v16 = v29 + 8;
    ++v17;
    v14 += 8 * v18;
    a1 = v26;
    char v13 = v25;
    if (v29 + 8 >= v28) {
      goto LABEL_11;
    }
  }
  uint64_t v19 = 0;
  int v20 = 0;
  while (1)
  {
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v22 = *(_DWORD *)(*(void *)&a7[2 * v11 + 4]
                    + (4 * (v20 << *a7))
                    + a7[v11 + 2] * (unint64_t)(v17 >> *a7)
                    + 4 * (v17 & ~(-1 << *a7))) & 0xFFFFFFF;
    if ((v22 + 128) > *(_DWORD *)(a9 + 4 * v11)) {
      return result;
    }
    DetileRow(v14 + v19, v18, v15 + v22, 1);
    v19 += 16;
    ++v20;
    if (v19 >= v18) {
      goto LABEL_10;
    }
  }
}

uint64_t BilinearScaleInterchangeBuffer(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _OWORD *a10, __IOSurface *a11, __IOSurface *a12)
{
  v106[2] = *MEMORY[0x263EF8340];
  v106[0] = 0;
  v106[1] = 0;
  v105[0] = 0;
  v105[1] = 0;
  interchange_init_functions();
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  __int16 v87 = 257;
  __int16 v88 = 513;
  v102[0] = (a7 + 31) & 0xFFFFFFE0;
  v102[1] = v102[0];
  v101[0] = (a8 + 31) & 0xFFFFFFE0;
  v101[1] = ((a8 >> 1) + 15) & 0xFFFFFFF0;
  IOSurfaceSubsampling Subsampling = IOSurfaceGetSubsampling(a11);
  if (Subsampling != kIOSurfaceSubsampling420)
  {
    IOSurfaceSubsampling v71 = Subsampling;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)long long buf = 136315394;
    int v90 = "BilinearScaleInterchangeBuffer";
    __int16 v91 = 1024;
    int v92 = v71;
    unsigned int v72 = &_os_log_internal;
    unint64_t v73 = "AppleAVD: ERROR: %s(): linear_orig subsampling format is not 4:2:0 (saw %d)\n";
    goto LABEL_37;
  }
  int v78 = a5;
  int v79 = a3;
  int v80 = a6;
  int v81 = a4;
  size_t v19 = 0;
  char v20 = 1;
  do
  {
    char v21 = v20;
    IOSurfaceGetExtendedPixelsOfPlane();
    BaseAddressOfCompressedTileDataRegionOfPlane = (const unsigned __int8 *)IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
    BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(a11, v19);
    size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(a11, v19);
    size_t v25 = (v85 + IOSurfaceGetWidthOfPlane(a11, v19)) * buf[v19 - 2];
    size_t v26 = (v83 + IOSurfaceGetHeightOfPlane(a11, v19)) * *((unsigned __int8 *)&v87 + v19);
    size_t v27 = (int)v102[v19];
    if (v25 < v27 || (size_t v28 = (int)v101[v19], v26 < v28))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v75 = v101[v19];
      *(_DWORD *)long long buf = 136316418;
      int v90 = "BilinearScaleInterchangeBuffer";
      __int16 v91 = 1024;
      int v92 = v19;
      __int16 v93 = 1024;
      int v94 = v27;
      __int16 v95 = 1024;
      int v96 = v75;
      __int16 v97 = 2048;
      size_t v98 = v25;
      __int16 v99 = 2048;
      size_t v100 = v26;
      unsigned int v72 = &_os_log_internal;
      unint64_t v73 = "AppleAVD: ERROR: %s(): IOSurface is too small for detiling (plane %d) - detiled dimensions: [%d x %d], IOSur"
            "face: [%zu x %zu]\n";
      goto LABEL_40;
    }
    interchange_detile_plane((uint64_t)BaseAddressOfPlane, BytesPerRowOfPlane, BaseAddressOfCompressedTileDataRegionOfPlane, v102[v19], v28, v19);
    char v20 = 0;
    size_t v19 = 1;
  }
  while ((v21 & 1) != 0);
  size_t v29 = 0;
  char v30 = 1;
  do
  {
    char v31 = v30;
    v106[v29] = (uint64_t)IOSurfaceGetBaseAddressOfPlane(a11, v29);
    v105[v29] = (int8x16_t *)IOSurfaceGetBaseAddressOfPlane(a12, v29);
    v103[v29] = IOSurfaceGetBytesPerRowOfPlane(a11, v29);
    int v32 = IOSurfaceGetBytesPerRowOfPlane(a12, v29);
    char v30 = 0;
    v104[v29] = v32;
    size_t v29 = 1;
  }
  while ((v31 & 1) != 0);
  unsigned int v33 = IOSurfaceGetBaseAddressOfPlane(a12, 0);
  size_t SizeOfPlane = IOSurfaceGetSizeOfPlane();
  memset(v33, 128, SizeOfPlane);
  int v35 = IOSurfaceGetBaseAddressOfPlane(a12, 1uLL);
  size_t v36 = IOSurfaceGetSizeOfPlane();
  memset(v35, 128, v36);
  long long v37 = a10[3];
  v82[2] = a10[2];
  v82[3] = v37;
  long long v38 = a10[5];
  v82[4] = a10[4];
  v82[5] = v38;
  long long v39 = a10[1];
  v82[0] = *a10;
  v82[1] = v39;
  ScaleBilinear_swift_neon(v105, v104, v78, v80, v106, v103, v79, v81, v82);
  uint64_t v40 = 0;
  char v41 = 1;
  do
  {
    unsigned int v42 = (v102[v40] + 31) >> 5;
    if (v41) {
      int v43 = 31;
    }
    else {
      int v43 = 15;
    }
    if (v41) {
      char v44 = 5;
    }
    else {
      char v44 = 4;
    }
    unsigned int v45 = v42 - 1;
    if (v42 == 1)
    {
      char v46 = 0;
    }
    else
    {
      char v46 = 0;
      do
      {
        ++v46;
        BOOL v47 = v45 > 1;
        v45 >>= 1;
      }
      while (v47);
    }
    unsigned int v48 = (v101[v40] + v43) >> v44;
    unsigned int v49 = v48 - 1;
    if (v48 == 1)
    {
      char v50 = 0;
    }
    else
    {
      char v50 = 0;
      do
      {
        ++v50;
        BOOL v47 = v49 > 1;
        v49 >>= 1;
      }
      while (v47);
    }
    int v51 = 1 << v46 << v50;
    int v52 = v41 & 1;
    if (v41) {
      char v53 = 5;
    }
    else {
      char v53 = 3;
    }
    size_t v54 = ((v51 << v53) + 127) & 0x1FFFFFF80;
    BaseAddressOfCompressedTileHeaderRegionOfPlane = (void *)IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    int v56 = (const void *)IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    memcpy(BaseAddressOfCompressedTileHeaderRegionOfPlane, v56, v54);
    char v41 = 0;
    uint64_t v40 = 1;
  }
  while (v52);
  IOSurfaceSubsampling v57 = IOSurfaceGetSubsampling(a12);
  if (v57 != kIOSurfaceSubsampling420)
  {
    IOSurfaceSubsampling v76 = v57;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)long long buf = 136315394;
    int v90 = "BilinearScaleInterchangeBuffer";
    __int16 v91 = 1024;
    int v92 = v76;
    unsigned int v72 = &_os_log_internal;
    unint64_t v73 = "AppleAVD: ERROR: %s(): linear_scaled subsampling format is not 4:2:0 (saw %d)\n";
LABEL_37:
    uint32_t v74 = 18;
LABEL_41:
    _os_log_impl(&dword_223977000, v72, OS_LOG_TYPE_DEFAULT, v73, buf, v74);
    return 0xFFFFFFFFLL;
  }
  size_t v58 = 0;
  char v59 = 1;
  while (1)
  {
    char v60 = v59;
    IOSurfaceGetExtendedPixelsOfPlane();
    uint64_t v61 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
    int v62 = (const unsigned __int8 *)IOSurfaceGetBaseAddressOfPlane(a12, v58);
    size_t v63 = IOSurfaceGetBytesPerRowOfPlane(a12, v58);
    size_t WidthOfPlane = IOSurfaceGetWidthOfPlane(a12, v58);
    size_t v65 = (v85 + WidthOfPlane) * buf[v58 - 2];
    size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(a12, v58);
    size_t v67 = (v83 + HeightOfPlane) * *((unsigned __int8 *)&v87 + v58);
    size_t v68 = (int)v102[v58];
    if (v65 < v68) {
      break;
    }
    size_t v69 = (int)v101[v58];
    if (v67 < v69) {
      break;
    }
    interchange_tile_plane(v61, v62, v63, v102[v58], v69, v58);
    char v59 = 0;
    uint64_t result = 0;
    size_t v58 = 1;
    if ((v60 & 1) == 0) {
      return result;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v77 = v101[v58];
    *(_DWORD *)long long buf = 136316418;
    int v90 = "BilinearScaleInterchangeBuffer";
    __int16 v91 = 1024;
    int v92 = v58;
    __int16 v93 = 1024;
    int v94 = v68;
    __int16 v95 = 1024;
    int v96 = v77;
    __int16 v97 = 2048;
    size_t v98 = v65;
    __int16 v99 = 2048;
    size_t v100 = v67;
    unsigned int v72 = &_os_log_internal;
    unint64_t v73 = "AppleAVD: ERROR: %s(): IOSurface is too small for tiling (plane %d): detiled dimensions - [%d x %d], IOSurface: [%zu x %zu]\n";
LABEL_40:
    uint32_t v74 = 50;
    goto LABEL_41;
  }
  return 0xFFFFFFFFLL;
}

uint64_t BilinearScaling420(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8, int a9, int a10, _DWORD *a11, uint64_t a12, _OWORD *a13, unsigned int a14, uint64_t a15, uint64_t a16)
{
  char v20 = (void *)a1;
  uint64_t v59 = *MEMORY[0x263EF8340];
  if (Detile420(a1, (unsigned int *)&v57, (unsigned int *)&v55, a5, a9, a10, a11, a14, a15)) {
    return 0xFFFFFFFFLL;
  }
  int v22 = v58;
  int32x2_t v24 = *(void **)a12;
  int64x2_t v23 = *(char **)(a12 + 8);
  uint64_t v25 = *(void *)a12 + 4 * v57;
  uint64_t v26 = 4;
  if (a14 == 2) {
    uint64_t v27 = 5;
  }
  else {
    uint64_t v27 = 4;
  }
  if (a14 != 2) {
    uint64_t v26 = 8;
  }
  char v28 = 1;
  if (a14 != 2) {
    char v28 = 2;
  }
  uint64_t v29 = (uint64_t)v58 << v28;
  uint64_t v30 = v20[1] + v26 + v29;
  v54[0] = *v20 + 4 * v57 + v27;
  v54[1] = v30;
  v53[0] = (int8x16_t *)(v25 + v27);
  v53[1] = (int8x16_t *)&v23[v29 + v26];
  if (v55)
  {
    memset(v24, 128, v57 * (uint64_t)v55);
    int64x2_t v23 = *(char **)(a12 + 8);
  }
  if (v56) {
    memset(v23, 128, v22 * (uint64_t)v56);
  }
  long long v31 = a13[3];
  v52[2] = a13[2];
  v52[3] = v31;
  long long v32 = a13[5];
  uint8_t v52[4] = a13[4];
  v52[5] = v32;
  long long v33 = a13[1];
  v52[0] = *a13;
  v52[1] = v33;
  ScaleBilinear_swift_neon(v53, &v57, a3, a4, v54, &v57, a7, a8, v52);
  uint64_t v34 = 0;
  char v35 = 1;
  size_t v36 = a11;
  while (1)
  {
    char v37 = v35;
    uint64_t v38 = v20[v34];
    if (v38)
    {
      uint64_t v39 = *(void *)(a12 + 8 * v34);
      if (v39)
      {
        unint64_t v50 = *(&v55 + v34);
        if ((int)v50 >= 1) {
          break;
        }
      }
    }
LABEL_25:
    char v35 = 0;
    uint64_t v34 = 1;
    if ((v37 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v40 = 0;
  unsigned int v41 = 0;
  uint64_t v42 = *(&v57 + v34);
  int v43 = &v36[v34 + 2];
  char v44 = &v36[2 * v34 + 4];
  unsigned int v49 = v20;
  char v48 = v35;
  while (1)
  {
    uint64_t v51 = v40;
    if ((int)v42 >= 1) {
      break;
    }
LABEL_24:
    uint64_t v40 = v51 + 8;
    ++v41;
    v39 += 8 * v42;
    char v20 = v49;
    char v37 = v48;
    if (v51 + 8 >= v50) {
      goto LABEL_25;
    }
  }
  uint64_t v45 = 0;
  int v46 = 0;
  while (1)
  {
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v47 = *(_DWORD *)(*v44
                    + (4 * (v46 << *v36))
                    + *v43 * (unint64_t)(v41 >> *v36)
                    + 4 * (v41 & ~(-1 << *v36))) & 0xFFFFFFF;
    if ((v47 + 128) > *(_DWORD *)(a16 + 4 * v34)) {
      return result;
    }
    TileRow(v38 + v47, v39 + v45, v42, 1);
    size_t v36 = a11;
    v45 += 16;
    ++v46;
    if (v45 >= v42) {
      goto LABEL_24;
    }
  }
}

uint64_t RVRAScaler(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, _OWORD *a13, uint64_t a14, uint64_t a15)
{
  DetileRow = (uint64_t (*)(void, void, void, void))DetileRow_neon;
  TileRow = (uint64_t (*)(void, void, void, void))TileRow_neon;
  long long v15 = *(_OWORD *)(a12 + 24);
  v21[0] = *(_OWORD *)(a12 + 8);
  v21[1] = v15;
  uint64_t v22 = *(void *)(a12 + 40);
  long long v16 = a13[3];
  v20[2] = a13[2];
  v20[3] = v16;
  long long v17 = a13[5];
  v20[4] = a13[4];
  v20[5] = v17;
  long long v18 = a13[1];
  v20[0] = *a13;
  v20[1] = v18;
  return BilinearScaling420(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, v21, a11, v20, *(_DWORD *)(a12 + 48), a14, a15);
}

unsigned __int8 *DetileRow_neon(unsigned __int8 *a1, int a2, unsigned __int8 *a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 2 * a2;
    do
    {
      int v6 = &a1[(16 * v4)];
      int v7 = &v6[a2];
      int v8 = 4;
      do
      {
        long long v9 = *(_OWORD *)a3;
        long long v10 = *((_OWORD *)a3 + 1);
        a3 += 32;
        *(_OWORD *)int v6 = v9;
        v6 += v5;
        *(_OWORD *)int v7 = v10;
        v7 += v5;
        --v8;
      }
      while (v8);
      ++v4;
    }
    while (v4 != a4);
  }
  return a3;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  long long v9;
  long long v10;

  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 2 * a2;
    do
    {
      int v6 = &a1[(16 * v4)];
      int v7 = &v6[a2];
      int v8 = 4;
      do
      {
        long long v9 = *(_OWORD *)a3;
        long long v10 = *((_OWORD *)a3 + 1);
        a3 += 32;
        *(_OWORD *)int v6 = v9;
        v6 += v5;
        *(_OWORD *)int v7 = v10;
        v7 += v5;
        --v8;
      }
      while (v8);
      ++v4;
    }
    while (v4 != a4);
  }
  return a3;
}

_OWORD *TileRow_neon(_OWORD *result, unsigned __int8 *a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 2 * a3;
    do
    {
      int v6 = &a2[(16 * v4)];
      int v7 = &v6[a3];
      int v8 = 4;
      do
      {
        long long v9 = *(_OWORD *)v6;
        v6 += v5;
        long long v10 = *(_OWORD *)v7;
        v7 += v5;
        *uint64_t result = v9;
        result[1] = v10;
        result += 2;
        --v8;
      }
      while (v8);
      ++v4;
    }
    while (v4 != a4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  long long v9;
  long long v10;

  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 2 * a3;
    do
    {
      int v6 = &a2[(16 * v4)];
      int v7 = &v6[a3];
      int v8 = 4;
      do
      {
        long long v9 = *(_OWORD *)v6;
        v6 += v5;
        long long v10 = *(_OWORD *)v7;
        v7 += v5;
        *uint64_t result = v9;
        result[1] = v10;
        result += 2;
        --v8;
      }
      while (v8);
      ++v4;
    }
    while (v4 != a4);
  }
  return result;
}

CAHDecDahliaAvc *createDahliaAvcDecoder(CAVDAvcDecoder *a1)
{
  uint64_t v2 = (CAHDecDahliaAvc *)operator new(0x4670uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecDahliaAvc::CAHDecDahliaAvc(v2, a1);
  }
  return v3;
}

void sub_223A5A084(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecDahliaAvc::CAHDecDahliaAvc(CAHDecDahliaAvc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73F380;
  *(_DWORD *)(v1 + 456) = 952 * *(unsigned __int16 *)(*(void *)(v1 + 256) + 7500) + 182056;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecDahliaAvc::CAHDecDahliaAvc(CAHDecDahliaAvc *this, CAVDAvcDecoder *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73F380;
  *(void *)(v4 + 256) = a2;
  uint64_t v5 = 952 * *((unsigned __int16 *)a2 + 3750) + 182056;
  *(_DWORD *)(v4 + 456) = v5;
  *(_DWORD *)(v4 + 8) = 1832;
  *(_OWORD *)(v4 + 16) = xmmword_223ADB000;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), v5, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      int v8 = "CAHDecDahliaAvc";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v7, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v6 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v6;
    *((void *)this + 34) = v6;
    *((_OWORD *)this + 1116) = 0u;
    *((_OWORD *)this + 1117) = 0u;
    *((_OWORD *)this + 1118) = 0u;
    *((_OWORD *)this + 1119) = 0u;
    *((_OWORD *)this + 1120) = 0u;
    *((_OWORD *)this + 1121) = 0u;
    *((_OWORD *)this + 1122) = 0u;
    *((_OWORD *)this + 1123) = 0u;
    *((_OWORD *)this + 1124) = 0u;
    *((_OWORD *)this + 1125) = 0u;
    *((_OWORD *)this + 1126) = 0u;
    bzero((char *)this + 560, 0x4360uLL);
  }
}

void sub_223A5A28C(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecDahliaAvc::~CAHDecDahliaAvc(CAHDecDahliaAvc *this)
{
  *(void *)this = &unk_26D73F380;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecDahliaAvc::~CAHDecDahliaAvc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecDahliaAvc::initPicture(CAHDecDahliaAvc *this, int a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v5 = 952 * *(unsigned __int16 *)(*((void *)this + 32) + 7500) + 182056;
  *((_DWORD *)this + 114) = v5;
  *((_DWORD *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v6;
  if (v6)
  {
    bzero(v6, v5);
    uint64_t v8 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v8 + 16) = a2;
    *(_WORD *)(v8 + 24) = 257;
    *(_WORD *)(v8 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 4459) = 0;
    *((void *)this + 2237) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "initPicture";
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v10, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecDahliaAvc::populateSlices(CAHDecDahliaAvc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 1832;
    uint64_t v5 = a2;
    do
    {
      CAHDecDahliaAvc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 952;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecDahliaAvc::populateSliceRegisters(uint64_t a1, uint64_t a2, signed int a3)
{
  char v6 = 0;
  uint64_t v130 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 256);
  int v114 = *(_DWORD *)(v7 + 3616);
  int v112 = *(_DWORD *)(v7 + 3612);
  uint64_t v113 = *(void *)(v7 + 3304);
  uint64_t v111 = *(void *)(v7 + 3296);
  uint64_t v8 = *(void *)(v7 + 3312);
  uint64_t v9 = *(unsigned int *)(v7 + 7064);
  uint64_t v10 = *(void *)(v7 + 3320);
  *(_DWORD *)(a2 + 4) = 0;
  uint64_t v12 = v8 + 1848 * a3;
  int v13 = 32 * (*(unsigned char *)(v12 + 1424) & 3);
  *(_DWORD *)(a2 + 4) = v13;
  int v15 = *(unsigned __int8 *)(v12 + 24);
  uint64_t v14 = (unsigned char *)(v12 + 24);
  if (v15 != 2) {
    char v6 = *(unsigned char *)(v8 + 1848 * a3 + 63);
  }
  unsigned int v16 = v13 & 0xFFFF87FF | ((v6 & 0xF) << 11);
  *(_DWORD *)(a2 + 4) = v16;
  if (*v14 == 1) {
    char v17 = *(unsigned char *)(v8 + 1848 * a3 + 64);
  }
  else {
    char v17 = 0;
  }
  long long v18 = (_DWORD *)(a1 + 17836);
  int v19 = ((v17 & 0xF) << 7) | v16;
  *(_DWORD *)(a2 + 4) = v19;
  if (*v14 == 1 && !*(unsigned char *)(v8 + 1848 * a3 + 61)) {
    int v20 = 0x8000;
  }
  else {
    int v20 = 0;
  }
  int v21 = v20 | v19;
  *(_DWORD *)(a2 + 4) = v21;
  if (*v14) {
    int v22 = 0x20000;
  }
  else {
    int v22 = 0x10000;
  }
  if (*v14 == 1) {
    int v23 = 0;
  }
  else {
    int v23 = v22;
  }
  *(_DWORD *)(a2 + 4) = v23 | v21;
  if (*v14 != 1) {
    goto LABEL_20;
  }
  uint64_t v24 = v10 + 13040 * a3 + 7224;
  uint64_t v25 = v8 + 1848 * a3;
  *(void *)(v25 + 1832) = v24;
  if (*(unsigned char *)(v10 + 13040 * a3 + 7227)
    || (uint64_t v26 = *(unsigned int *)(v10 + 13040 * a3 + 7256), *(_DWORD *)(a1 + 4 * v26 + 464)))
  {
    int v27 = 16;
  }
  else
  {
    if (!*v18)
    {
      *(void *)(a1 + 17896) = *(void *)(v10 + 13040 * a3 + 7264);
      *(_DWORD *)(a1 + 17888) = v26;
      *long long v18 = 1;
      *(_DWORD *)(a2 + 4) |= 0x40000u;
      uint64_t v24 = *(void *)(v25 + 1832);
      if (!v24 || !*v18) {
        goto LABEL_20;
      }
    }
    uint64_t v108 = *(void *)(v24 + 40);
    if (v108 == *(void *)(a1 + 17896)) {
      goto LABEL_20;
    }
    *(void *)(a1 + 17896) = v108;
    *(_DWORD *)(a1 + 17888) = *(_DWORD *)(v24 + 32);
    int v27 = 0x40000;
  }
  *(_DWORD *)(a2 + 4) |= v27;
LABEL_20:
  *(_DWORD *)(a2 + 920) = 0;
  int v28 = *(_DWORD *)(a2 + 4);
  if (*v14 == 1 && (v28 & 0x40000) != 0)
  {
    uint64_t v30 = (_OWORD *)(a1 + 176 * *(unsigned int *)(*(void *)(v8 + 1848 * a3 + 1832) + 32));
    long long v31 = v30[746];
    long long v32 = v30[748];
    long long v127 = v30[747];
    long long v128 = v32;
    long long v129 = v30[749];
    long long v33 = v30[742];
    long long v34 = v30[744];
    long long v123 = v30[743];
    long long v124 = v34;
    long long v125 = v30[745];
    long long v126 = v31;
    long long v35 = v30[740];
    *(_OWORD *)long long buf = v30[739];
    *(_OWORD *)&uint8_t buf[16] = v35;
    long long v121 = v30[741];
    long long v122 = v33;
    *long long v18 = 1;
    if (*(void *)buf || *((void *)&v128 + 1))
    {
      uint64_t result = CAHDec::addToPatcherList(a1, buf, 952 * a3 + 2752, 0, 0xFFFFFFFFFLL, 8, 0xFFFFFFF, 4);
      if (result) {
        return result;
      }
    }
    int v28 = *(_DWORD *)(a2 + 4);
  }
  uint64_t v117 = v10;
  unsigned int v110 = a3;
  uint64_t v115 = v14;
  uint64_t v116 = a1;
  *(_DWORD *)(a2 + 4) = v28 & 0x77FFFF | 0x2D000000;
  unsigned int v37 = *v14;
  if (v37 <= 1)
  {
    uint64_t v38 = v7 + 6872;
    uint64_t v39 = v10 + 13040 * a3;
    if (*(_DWORD *)(v39 + 13032))
    {
      unint64_t v40 = 0;
      unsigned int v41 = (unsigned int *)(v39 + 13032);
      uint64_t v42 = v10 + 13040 * a3 + 1416;
      int v43 = &_os_log_internal;
      do
      {
        uint64_t v44 = a2 + 4 * v40;
        int v45 = (16 * (v40 & 0xF)) | 0x2DC00000;
        *(_DWORD *)(v44 + 8) = v45;
        int v46 = (_DWORD *)(v44 + 8);
        if (v9)
        {
          uint64_t v47 = 0;
          while (*(_DWORD *)(*(void *)(v38 + 8 * v47) + 12) != *(_DWORD *)(v42 + 176 * v40 + 12))
          {
            if (v9 == ++v47) {
              goto LABEL_35;
            }
          }
          _DWORD *v46 = v47 & 0xF | v45;
        }
        else
        {
LABEL_35:
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            int v48 = *(_DWORD *)(v42 + 176 * v40 + 32);
            *(_DWORD *)long long buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v40;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v48;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&uint8_t buf[16] = v9;
            _os_log_impl(&dword_223977000, v43, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-0 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
          }
        }
        ++v40;
      }
      while (v40 < *v41);
      unsigned int v37 = *v115;
    }
    else
    {
      LODWORD(v40) = 0;
    }
    if (v37 == 1)
    {
      uint64_t v49 = v10 + 13040 * a3;
      if (*(_DWORD *)(v49 + 13036))
      {
        unint64_t v50 = 0;
        uint64_t v51 = (unsigned int *)(v49 + 13036);
        int v52 = &_os_log_internal;
        do
        {
          uint64_t v53 = a2 + 4 * v40;
          int v54 = (16 * (v50 & 0xF)) | 0x2DC00100;
          *(_DWORD *)(v53 + 8) = v54;
          int v55 = (_DWORD *)(v53 + 8);
          if (v9)
          {
            uint64_t v56 = 0;
            while (*(_DWORD *)(*(void *)(v38 + 8 * v56) + 12) != *(_DWORD *)(v117 + 13040 * a3 + 176 * v50 + 7236))
            {
              if (v9 == ++v56) {
                goto LABEL_49;
              }
            }
            *int v55 = v56 & 0xF | v54;
          }
          else
          {
LABEL_49:
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
            {
              int v57 = *(_DWORD *)(v117 + 13040 * a3 + 176 * v50 + 7256);
              *(_DWORD *)long long buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v40;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v57;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v9;
              _os_log_impl(&dword_223977000, v52, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-1 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
            }
          }
          LODWORD(v40) = v40 + 1;
          ++v50;
        }
        while (v50 < *v51);
      }
    }
  }
  *(void *)(a2 + 136) = 0x2DD0000000000000;
  uint64_t v58 = v113 + 604 * v114;
  uint64_t v59 = (char *)(v58 + 88);
  char v60 = (char *)(v58 + 87);
  if (*v115 == 1) {
    uint64_t v61 = v59;
  }
  else {
    uint64_t v61 = v60;
  }
  char v62 = *v61;
  *(_DWORD *)(a2 + 140) = ((v62 & 3) << 6) | 0x2DD00000;
  int v63 = ((v62 & 3) << 6) | 0x2DD00000 | (8 * (*(unsigned char *)(v8 + 1848 * a3 + 376) & 7));
  *(_DWORD *)(a2 + 140) = v63;
  char v64 = *(unsigned char *)(v111 + 2224 * v112 + 4);
  if (v64) {
    char v64 = *(unsigned char *)(v8 + 1848 * a3 + 377);
  }
  *(_DWORD *)(a2 + 140) = v64 & 7 | v63;
  int v65 = *v115;
  if (v65 != 1) {
    goto LABEL_139;
  }
  int v66 = *v59;
  if (v66 != 2) {
    goto LABEL_62;
  }
  *(_DWORD *)(a2 + 140) = ((v62 & 3) << 6) | 0x2DD0002D;
  int v65 = *v115;
  if (v65 != 1)
  {
LABEL_139:
    if (v65 || !*v60) {
      goto LABEL_82;
    }
LABEL_66:
    unsigned int v67 = 0;
    unsigned int v68 = 0;
    do
    {
      uint64_t v69 = v67;
      if (*(unsigned char *)(v8 + 1848 * a3 + v67 + 378))
      {
        int v70 = ((v67 & 0xF) << 9) | 0x2DE04000;
        uint64_t v71 = a2 + 4 * v68;
        *(_DWORD *)(v71 + 144) = v70;
        uint64_t v72 = v8 + 1848 * a3 + 2 * v69;
        *(_DWORD *)(v71 + 144) = v70 | *(_WORD *)(v72 + 394) & 0x1FF;
        *(_DWORD *)(v71 + 528) = 770703360;
        *(_DWORD *)(v71 + 528) = *(unsigned __int16 *)(v72 + 426) | 0x2DF00000;
        ++v68;
      }
      if (*(unsigned char *)(v8 + 1848 * a3 + v69 + 458))
      {
        uint64_t v73 = 0;
        char v74 = 1;
        do
        {
          char v75 = v74;
          int v76 = ((v69 & 0xF) << 9) | (v73 << 14) | 0x2DE08000;
          uint64_t v77 = a2 + 4 * v68;
          *(_DWORD *)(v77 + 144) = v76;
          uint64_t v78 = v8 + 1848 * a3 + 4 * v69 + 2 * v73;
          *(_DWORD *)(v77 + 144) = v76 | *(_WORD *)(v78 + 474) & 0x1FF;
          *(_DWORD *)(v77 + 528) = 770703360;
          *(_DWORD *)(v77 + 528) = *(unsigned __int16 *)(v78 + 538) | 0x2DF00000;
          ++v68;
          uint64_t v73 = 1;
          char v74 = 0;
        }
        while ((v75 & 1) != 0);
      }
      unsigned int v67 = v69 + 1;
    }
    while ((int)v69 + 1 <= *(char *)(v8 + 1848 * a3 + 63));
    if (*v115 == 1)
    {
      unsigned int v79 = 0;
      do
      {
        uint64_t v80 = v79;
        if (*(unsigned char *)(v8 + 1848 * a3 + v79 + 602))
        {
          int v81 = ((v79 & 0xF) << 9) | 0x2DE06000;
          uint64_t v82 = a2 + 4 * v68;
          *(_DWORD *)(v82 + 144) = v81;
          uint64_t v83 = v8 + 1848 * a3 + 2 * v80;
          *(_DWORD *)(v82 + 144) = v81 | *(_WORD *)(v83 + 618) & 0x1FF;
          *(_DWORD *)(v82 + 528) = 770703360;
          *(_DWORD *)(v82 + 528) = *(unsigned __int16 *)(v83 + 650) | 0x2DF00000;
          ++v68;
        }
        if (*(unsigned char *)(v8 + 1848 * a3 + v80 + 682))
        {
          uint64_t v84 = 0;
          char v85 = 1;
          do
          {
            char v86 = v85;
            int v87 = ((v80 & 0xF) << 9) | (v84 << 14) | 0x2DE0A000;
            uint64_t v88 = a2 + 4 * v68;
            *(_DWORD *)(v88 + 144) = v87;
            uint64_t v89 = v8 + 1848 * a3 + 4 * v80 + 2 * v84;
            *(_DWORD *)(v88 + 144) = v87 | *(_WORD *)(v89 + 698) & 0x1FF;
            *(_DWORD *)(v88 + 528) = 770703360;
            *(_DWORD *)(v88 + 528) = *(unsigned __int16 *)(v89 + 762) | 0x2DF00000;
            ++v68;
            uint64_t v84 = 1;
            char v85 = 0;
          }
          while ((v86 & 1) != 0);
        }
        unsigned int v79 = v80 + 1;
      }
      while ((int)v80 + 1 <= *(char *)(v8 + 1848 * a3 + 64));
    }
    *(_DWORD *)(a2 + 136) = v68;
    goto LABEL_82;
  }
  int v66 = *v59;
LABEL_62:
  if (v66 == 1) {
    goto LABEL_66;
  }
LABEL_82:
  *(_DWORD *)(a2 + 912) = 0;
  uint64_t v90 = v8 + 1848 * a3;
  *(_DWORD *)(a2 + 912) = (((*(unsigned __int8 *)(v113 + 604 * v114 + 89) + *(unsigned __int8 *)(v90 + 1425)) << 10)
                         + 26624) & 0x1FC00 | 0x2D900000;
  *(_DWORD *)(a2 + 916) = 0;
  int v91 = (*(unsigned char *)(v90 + 1428) == 0) << 17;
  *(_DWORD *)(a2 + 916) = v91;
  if (*(unsigned char *)(v90 + 1428) != 1)
  {
    int v92 = v91 | 0x10000;
    *(_DWORD *)(a2 + 916) = v92;
    uint64_t v93 = v8 + 1848 * a3;
    int v94 = v92 | ((*(unsigned char *)(v93 + 1429) & 0xF) << 8);
    *(_DWORD *)(a2 + 916) = v94;
    int v91 = v94 | ((*(unsigned char *)(v93 + 1430) & 0xF) << 12);
  }
  *(_DWORD *)(a2 + 916) = v91 | 0x2DA00000;
  __int16 v95 = (unsigned int *)(v8 + 1848 * a3 + 1436);
  unsigned int v96 = *v95;
  if (*(unsigned char *)(v113 + 604 * v114 + 3))
  {
    int v97 = 0;
    if ((v96 & 7) != 0) {
      *__int16 v95 = (v96 + 7) & 0xFFFFFFF8;
    }
  }
  else
  {
    int v97 = *v95 & 7;
  }
  *(_DWORD *)(a2 + 924) = (v97 << 15) | 0x2D800000;
  size_t v98 = *(_DWORD **)(v116 + 256);
  unsigned int v99 = v98[626];
  unint64_t v118 = 0;
  uint64_t v119 = 0;
  if (!CAVDAvcDecoder::GetSDataMemInfo((uint64_t)v98, v110, &v119, &v118)) {
    return 0xFFFFFFFFLL;
  }
  int v100 = 952 * v110;
  uint64_t v101 = v119;
  if (!*(void *)v119 && !*(_DWORD *)(v119 + 152) && !*(_DWORD *)(v119 + 156)) {
    goto LABEL_98;
  }
  int v102 = v118;
  if (HIDWORD(v118) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "populateSliceRegisters";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1658;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v102 = v118;
  }
  uint64_t result = CAHDec::addToPatcherList(v116, (void *)v101, v100 + 2756, v102, 0xFFFFFFFFFLL, 32, 15, 4);
  if (result) {
    return result;
  }
  uint64_t v101 = v119;
  if (!*(void *)v119)
  {
LABEL_98:
    if (!*(_DWORD *)(v101 + 152) && !*(_DWORD *)(v101 + 156))
    {
LABEL_103:
      unsigned int v104 = *(_DWORD *)(v8 + 1848 * a3 + 16) - (*v95 >> 3);
      *(_DWORD *)(a2 + 936) = v104;
      if (v98[590] != 1) {
        return 0;
      }
      *(void *)(a2 + 944) = 0;
      unsigned int v105 = *(unsigned __int16 *)(v8 + 1848 * a3 + 1840);
      if (v98[605])
      {
        uint64_t result = 0;
        if (v104 < v105) {
          unsigned int v105 = v104;
        }
        if (v97) {
          BOOL v106 = v105 == 0;
        }
        else {
          BOOL v106 = 0;
        }
        if (v106) {
          unsigned int v105 = 1;
        }
        unsigned int v107 = v99 & 0x10000 | v105;
      }
      else
      {
        if ((v99 & 0x200000) != 0)
        {
          int v109 = 0;
          if (v97 && !*(_WORD *)(v8 + 1848 * a3 + 1840))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = "int CAHDecDahliaAvc::populateSliceRegisters(AvcSliceRegisters *, int)";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect off_to_prot_data to be set when slice header is not byte aligned\n", buf, 0xCu);
              unsigned int v104 = *(_DWORD *)(a2 + 936);
              int v109 = *(_DWORD *)(a2 + 948) & 0x1F0000;
            }
            else
            {
              int v109 = 0;
            }
            unsigned int v105 = 1;
          }
        }
        else
        {
          int v109 = 0;
          if (v97) {
            ++v105;
          }
        }
        uint64_t result = 0;
        if (v105 >= v104) {
          unsigned int v105 = v104;
        }
        unsigned int v107 = v109 & 0xFFDFFFFF | (v105 << 22) | (unsigned __int16)v99 | (((v99 >> 20) & 1) << 21);
      }
      *(_DWORD *)(a2 + 948) = v107;
      return result;
    }
  }
  int v103 = v118;
  if (HIDWORD(v118) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "populateSliceRegisters";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1659;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v103 = v118;
  }
  uint64_t result = CAHDec::addToPatcherList(v116, (void *)v101, v100 + 2764, v103, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result) {
    goto LABEL_103;
  }
  return result;
}

uint64_t CAHDecDahliaAvc::populateCommonRegisters(CAHDecDahliaAvc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000001;
  return 0;
}

uint64_t CAHDecDahliaAvc::updateCommonRegisters(CAHDecDahliaAvc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

void CAHDecDahliaAvc::copyScalingList(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = *a2 & 0xFEFFFFC0 | 0x1000000;
  *a2 = v8;
  do
  {
    v8 |= (*(unsigned char *)(a4 + v7) == 0) << v7;
    *a2 = v8;
    ++v7;
  }
  while (v7 != 6);
  unsigned int v9 = v8 & 0xFFFFF03F;
  *a2 = v8 & 0xFFFFF03F;
  if (a7 >= 7)
  {
    uint64_t v10 = (a7 - 6);
    uint64_t v11 = (unsigned __int8 *)(a4 + 6);
    uint64_t v12 = &dword_223ADB010;
    do
    {
      int v13 = *v11++;
      BOOL v14 = v13 == 0;
      int v16 = *v12++;
      char v15 = v16;
      int v17 = v14;
      v9 |= ((v17 << v15) & 0x3F) << 6;
      *a2 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 1;
  uint64_t v20 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v22 = *(_DWORD *)(v20 + i) & 0xFFFFFF | (*(unsigned __int8 *)(v19 + i - 1) << 24);
      *(_DWORD *)(v20 + i) = v22;
      unsigned int v23 = v22 & 0xFF00FFFF | (*(unsigned __int8 *)(v19 + i) << 16);
      *(_DWORD *)(v20 + i) = v23;
      unsigned int v24 = v23 & 0xFFFF00FF | (*(unsigned __int8 *)(v19 + i + 1) << 8);
      *(_DWORD *)(v20 + i) = v24;
      *(_DWORD *)(v20 + i) = v24 & 0xFFFFFF00 | *(unsigned __int8 *)(v19 + i + 2);
    }
    ++v18;
    v20 += 16;
    v19 += 16;
  }
  while (v18 != 6);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 96;
  do
  {
    int v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = a6 + ((uint64_t)dword_223ADB028[v25] << 6);
    do
    {
      long long v31 = (unsigned __int8 *)(v30 + (v28 & 0x7FFFFFE0 | v29 & 4 | v27 & 0x18));
      int v32 = *(_DWORD *)(v26 + v28) & 0xFFFFFF | (*v31 << 24);
      *(_DWORD *)(v26 + v28) = v32;
      unsigned int v33 = v32 & 0xFF00FFFF | (v31[1] << 16);
      *(_DWORD *)(v26 + v28) = v33;
      unsigned int v34 = v33 & 0xFFFF00FF | (v31[2] << 8);
      *(_DWORD *)(v26 + v28) = v34;
      *(_DWORD *)(v26 + v28) = v34 & 0xFFFFFF00 | v31[3];
      ++v29;
      v28 += 4;
      v27 += 8;
    }
    while (v28 != 64);
    ++v25;
    v26 += 64;
  }
  while (v25 != 6);
}

uint64_t CAHDecDahliaAvc::AvcSeqScalingListFallBack(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v3 = 12;
    }
    uint64_t v4 = a2 + 22;
    uint64_t v5 = (_OWORD *)(a2 + 34);
    while (v2 > 5)
    {
      if (*(unsigned char *)(v4 + v2 - 12))
      {
        if (*(unsigned char *)(v4 + v2) == 2)
        {
          unsigned int v9 = (_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 130);
          if (v2 == 6 || (v2 & 0x7FFFFFFD) == 8)
          {
            _OWORD *v9 = avcDefaultIntraScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADB090;
            long long v10 = xmmword_223ADB0A0;
            long long v11 = unk_223ADB0B0;
          }
          else
          {
            _OWORD *v9 = avcDefaultInterScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADB050;
            long long v10 = xmmword_223ADB060;
            long long v11 = unk_223ADB070;
          }
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 162) = v10;
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 178) = v11;
        }
        goto LABEL_24;
      }
      if ((v2 - 8) <= 0xFFFFFFFD)
      {
        uint64_t result = a2 + 130;
        int v13 = (_OWORD *)(a2 + 130 + ((unint64_t)(v2 - 6) << 6));
        BOOL v14 = (long long *)(a2 + 130 + ((unint64_t)(v2 - 8) << 6));
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[3];
        v13[2] = v14[2];
        v13[3] = v17;
        *int v13 = v15;
        v13[1] = v16;
        uint64_t v8 = (v2 - 2);
LABEL_21:
        *(unsigned char *)(v4 + v2) = *(unsigned char *)(a2 + v8 + 22);
      }
LABEL_24:
      ++v2;
      ++v5;
      if (v3 == v2) {
        return result;
      }
    }
    if (*(unsigned char *)(v4 + v2 - 12)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (v6 || v2 == 3) {
      goto LABEL_24;
    }
    uint64_t v8 = (v2 - 1);
    *uint64_t v5 = *(_OWORD *)(a2 + 16 * v8 + 34);
    goto LABEL_21;
  }
  return result;
}

long long *CAHDecDahliaAvc::AvcPicScalingListFallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 96))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = a3 + 97;
    uint64_t v6 = -96;
    uint64_t result = &avcDefaultIntraScalingList8x8;
    do
    {
      if (v3 > 5)
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if (*(unsigned char *)(v5 + v3 + 12) == 2)
          {
            unsigned int v9 = (_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 217);
            if (v3 == 6 || (v3 & 0x7FFFFFFD) == 8)
            {
              _OWORD *v9 = avcDefaultIntraScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADB090;
              long long v10 = xmmword_223ADB0A0;
              long long v11 = unk_223ADB0B0;
            }
            else
            {
              _OWORD *v9 = avcDefaultInterScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADB050;
              long long v10 = xmmword_223ADB060;
              long long v11 = unk_223ADB070;
            }
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 249) = v10;
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 265) = v11;
          }
          goto LABEL_31;
        }
        if ((v3 - 8) <= 0xFFFFFFFD)
        {
          uint64_t v12 = (_OWORD *)(a3 + 217 + ((unint64_t)(v3 - 6) << 6));
          int v13 = (long long *)(a3 + 217 + ((unint64_t)(v3 - 8) << 6));
          long long v14 = *v13;
          long long v15 = v13[1];
          long long v16 = v13[3];
          v12[2] = v13[2];
          v12[3] = v16;
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v17 = a3 + (v3 - 2);
          goto LABEL_29;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          uint64_t v18 = (v3 - 6);
          uint64_t v19 = a3 + (v18 << 6);
          uint64_t v20 = a2 + (v18 << 6);
          long long v21 = *(_OWORD *)(v20 + 130);
          long long v22 = *(_OWORD *)(v20 + 146);
          long long v23 = *(_OWORD *)(v20 + 162);
          *(_OWORD *)(v19 + 265) = *(_OWORD *)(v20 + 178);
          *(_OWORD *)(v19 + 249) = v23;
          *(_OWORD *)(v19 + 233) = v22;
          *(_OWORD *)(v19 + 217) = v21;
LABEL_23:
          char v24 = *(unsigned char *)(a2 + 22 + v3);
LABEL_30:
          *(unsigned char *)(v5 + v3 + 12) = v24;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if ((*(unsigned char *)(v5 + v3 + 12) & 2) != 0)
          {
            if (v3 > 2) {
              long long v8 = avcDefaultInterScalingList4x4;
            }
            else {
              long long v8 = avcDefaultIntraScalingList4x4;
            }
            *(_OWORD *)(v5 + v6 + 120) = v8;
          }
          goto LABEL_31;
        }
        if (v3 && v3 != 3)
        {
          uint64_t v25 = (v3 - 1);
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a3 + 16 * v25 + 121);
          uint64_t v17 = a3 + v25;
LABEL_29:
          char v24 = *(unsigned char *)(v17 + 109);
          goto LABEL_30;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a2 + v6 + 130);
          goto LABEL_23;
        }
      }
LABEL_31:
      ++v3;
      v6 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CAHDecDahliaAvc::populateSequenceRegisters(CAHDecDahliaAvc *this)
{
  uint64_t v2 = *((void *)this + 32);
  unint64_t v3 = (_DWORD *)*((void *)this + 33);
  int v4 = *(_DWORD *)(v2 + 3612);
  int v5 = *(_DWORD *)(v2 + 3616);
  uint64_t v6 = *(void *)(v2 + 3296);
  uint64_t v7 = *(void *)(v2 + 3304);
  uint64_t v8 = v6 + 2224 * v4;
  v3[10] = 0;
  __int16 v9 = *(_WORD *)(v8 + 1558);
  v3[10] = (2 * (v9 & 0xFFF)) | 1;
  v3[10] = ((*(_WORD *)(v8 + 1560) & 0xFFF) << 17) | (2 * (v9 & 0xFFF)) | 0x10001;
  v3[11] = 0;
  int v10 = *(unsigned char *)(v8 + 1564) & 1;
  v3[11] = v10;
  int v11 = v10 | ((*(unsigned char *)(v7 + 604 * v5 + 95) != 0) << 7) | 0x2800;
  v3[11] = v11;
  uint64_t v12 = (unsigned char *)(v8 + 4);
  int v13 = *(unsigned __int8 *)(v8 + 4);
  if (*(unsigned char *)(v8 + 4)) {
    int v13 = (*(unsigned char *)(v6 + 2224 * v4 + 7) & 0xF) << 15;
  }
  int v14 = v13 | v11;
  v3[11] = v14;
  long long v15 = (unsigned char *)(v6 + 2224 * v4);
  int v16 = v14 & 0x7F87A881 | ((v15[6] & 0xF) << 19);
  v3[11] = v16;
  unsigned int v17 = v16 & 0xFF7FFFFF | ((v15[5] & 1) << 23);
  v3[11] = v17;
  v3[11] = v17 & 0xFCFFFFFF | ((*v12 & 3) << 24);
  if (v15[9])
  {
    if (*v12 == 3) {
      int v18 = 12;
    }
    else {
      int v18 = 8;
    }
    uint64_t v19 = CAHDecDahliaAvc::AvcSeqScalingListFallBack((uint64_t)this, v8);
    CAHDecDahliaAvc::copyScalingList(v19, v3 + 12, *((void *)this + 33) + 720, v6 + 2224 * v4 + 22, v6 + 2224 * v4 + 34, v6 + 2224 * v4 + 130, v18);
  }
  return 0;
}

uint64_t CAHDecDahliaAvc::populatePictureRegisters(CAHDecDahliaAvc *this)
{
  uint64_t v243 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 3612);
  int v4 = *(_DWORD *)(v2 + 3616);
  uint64_t v5 = *(void *)(v2 + 3296);
  uint64_t v6 = *(void *)(v2 + 3304);
  int v222 = *(_DWORD *)(v2 + 3132);
  uint64_t v225 = *(void *)(v2 + 2088);
  uint64_t v226 = *(unsigned int *)(v2 + 3152);
  int v228 = *(_DWORD *)(v2 + 2644);
  int v224 = *(unsigned __int8 *)(v2 + 8);
  long long v7 = *(_OWORD *)(v2 + 7016);
  v242[8] = *(_OWORD *)(v2 + 7000);
  v242[9] = v7;
  long long v8 = *(_OWORD *)(v2 + 7048);
  v242[10] = *(_OWORD *)(v2 + 7032);
  v242[11] = v8;
  long long v9 = *(_OWORD *)(v2 + 6952);
  v242[4] = *(_OWORD *)(v2 + 6936);
  v242[5] = v9;
  long long v10 = *(_OWORD *)(v2 + 6984);
  v242[6] = *(_OWORD *)(v2 + 6968);
  v242[7] = v10;
  long long v11 = *(_OWORD *)(v2 + 6888);
  v242[0] = *(_OWORD *)(v2 + 6872);
  v242[1] = v11;
  long long v12 = *(_OWORD *)(v2 + 6920);
  v242[2] = *(_OWORD *)(v2 + 6904);
  v242[3] = v12;
  uint64_t v223 = *(unsigned int *)(v2 + 7064);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  int v14 = (unsigned __int8 *)*((void *)this + 32);
  uint64_t v15 = *((void *)this + 33);
  int v16 = v14[2675];
  unsigned int v17 = v14[2674];
  if (!(v16 | v17)) {
    goto LABEL_41;
  }
  uint64_t v18 = v5 + 2224 * v3;
  unsigned int v19 = *(unsigned __int8 *)(v18 + 6);
  unsigned int v20 = *(unsigned __int8 *)(v18 + 7);
  if (v19 > v20) {
    LOWORD(v20) = v19;
  }
  int v21 = ((_WORD)v20 + 9) & 0x1FE;
  if (v21 == 8)
  {
    unsigned int v26 = 1;
    int v24 = 8;
    if (!v14[2675]) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  int v22 = v14[2672];
  if (v21 != 12)
  {
    if (v21 == 10)
    {
      BOOL v23 = v22 == 0;
      if (v22) {
        int v24 = 10;
      }
      else {
        int v24 = 9;
      }
      int v25 = 2;
      goto LABEL_17;
    }
    int v24 = 27;
    unsigned int v26 = 27;
    if (!v16) {
      goto LABEL_30;
    }
LABEL_23:
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) && (v16 == 2 && v24 == 8 || v16 == 3 && (v24 - 9) <= 1))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = "populatePictureRegisters";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = v24;
      WORD1(buf[2]) = 1024;
      HIDWORD(buf[2]) = v16;
      int v27 = &_os_log_internal;
      uint64_t v28 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
      goto LABEL_38;
    }
    goto LABEL_30;
  }
  BOOL v23 = v22 == 0;
  if (v22) {
    int v24 = 12;
  }
  else {
    int v24 = 11;
  }
  int v25 = 4;
LABEL_17:
  if (v23) {
    unsigned int v26 = v25;
  }
  else {
    unsigned int v26 = v25 + 1;
  }
  if (v16) {
    goto LABEL_23;
  }
LABEL_30:
  if (v17 && (v17 == 3 && v26 - 9 < 2 || v26 <= 0x1A && ((1 << v26) & 0x4C00000) != 0 && v17 <= 2))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "populatePictureRegisters";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = v26;
    WORD1(buf[2]) = 1024;
    HIDWORD(buf[2]) = v17;
    int v27 = &_os_log_internal;
    uint64_t v28 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
LABEL_38:
    int v29 = (uint8_t *)buf;
    uint32_t v30 = 24;
    goto LABEL_39;
  }
LABEL_41:
  *(_DWORD *)(v15 + 52) = 766509056;
  if (**(_DWORD **)(*((void *)this + 32) + 3312) == 5) {
    int v32 = 766517248;
  }
  else {
    int v32 = 766509056;
  }
  int v33 = v13;
  if (v13) {
    int v34 = 688;
  }
  else {
    int v34 = 672;
  }
  if (v228) {
    int v35 = 4160;
  }
  else {
    int v35 = 64;
  }
  unsigned int v36 = v35 & 0xFFFFFFF0 | ((v228 == 1) << 10) | v34 & 0xFFFFFFF0 | (4 * (v16 & 3)) | v17 & 3 | v32;
  *(_DWORD *)(v15 + 52) = v36;
  unsigned int v37 = (unsigned char *)*((void *)this + 32);
  int v38 = v36 | ((v37[2652] & 1) << 19);
  *(_DWORD *)(v15 + 52) = v38;
  unsigned int v39 = v38 & 0xFFFBFFFF | ((v37[2653] & 1) << 18);
  *(_DWORD *)(v15 + 52) = v39;
  *(_DWORD *)(v15 + 52) = v39 & 0xFFFDFFFF | ((v37[2654] & 1) << 17);
  *(void *)(v15 + 56) = 0x1000000;
  uint64_t v40 = v5 + 2224 * v3;
  int v41 = (16 * (*(_WORD *)(v40 + 1558) & 0xFFF)) | 0xF;
  *(_DWORD *)(v15 + 60) = v41;
  LODWORD(v37) = v41 | (*(unsigned __int16 *)(v40 + 1560) << 20) | 0xF0000;
  *(void *)(v15 + 64) = 0;
  *(_DWORD *)(v15 + 60) = v37;
  LODWORD(v40) = (*(unsigned char *)(v40 + 8) & 1) << 18;
  *(_DWORD *)(v15 + 68) = v40;
  uint64_t v42 = (unsigned char *)(v6 + 604 * v4);
  LODWORD(v40) = v40 & 0xFFF7FFFF | ((v42[93] & 1) << 19);
  *(_DWORD *)(v15 + 68) = v40;
  LODWORD(v40) = v40 & 0xFFEFFFFF | ((v42[3] & 1) << 20);
  *(_DWORD *)(v15 + 68) = v40;
  *(_DWORD *)(v15 + 68) = v40 | ((**(_DWORD **)(*((void *)this + 32) + 3312) != 5) << 21);
  unsigned int v43 = *(_DWORD *)(v15 + 72) & 0xFFFFFC1F | (32 * (v42[91] & 0x1F));
  *(_DWORD *)(v15 + 72) = v43;
  *(_DWORD *)(v15 + 72) = v43 & 0xFFFFFFE0 | v42[601] & 0x1F;
  if (v42[96])
  {
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) == 3) {
      int v44 = 12;
    }
    else {
      int v44 = 8;
    }
    uint64_t v45 = *((void *)this + 33) + 1204;
    int v46 = CAHDecDahliaAvc::AvcPicScalingListFallBack(v13, v5 + 2224 * v3, v6 + 604 * v4);
    CAHDecDahliaAvc::copyScalingList((uint64_t)v46, (unsigned int *)(v15 + 76), v45, v6 + 604 * v4 + 109, v6 + 604 * v4 + 121, v6 + 604 * v4 + 217, v44);
  }
  *(_DWORD *)(v15 + 80) = *((_DWORD *)this + 4462);
  *(_DWORD *)(v15 + 84) = *((_DWORD *)this + 4463);
  *(_DWORD *)(v15 + 88) = 3145786;
  uint64_t v47 = (char *)this + 9008;
  for (uint64_t i = 92; i != 152; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v49 = *((void *)this + 33);
    int v50 = *(_DWORD *)(v49 + i);
    *(_DWORD *)(v49 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFFu;
    uint64_t v51 = *((void *)this + 33);
    int v52 = *(_DWORD *)(v51 + i);
    *(_DWORD *)(v51 + i) = v50;
    if (*(void *)v47 || *((_DWORD *)v47 + 38) || *((_DWORD *)v47 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v47, i, 0, 0xFFFFFFFFFLL, 8, v52, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 60) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 60) = *(_DWORD *)(*((void *)this + 33) + i + 60) & 0x800001FF | (((*((_DWORD *)this + 4456) >> 9) & 0x3FFFFF) << 9);
    v47 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 212) = 0;
  if ((*(unsigned char *)(v15 + 54) & 8) != 0)
  {
    uint64_t v53 = *((void *)this + 33);
    uint64_t v54 = *(void *)(*((void *)this + 32) + 2680);
    long long v239 = 0u;
    long long v240 = 0u;
    long long v237 = 0u;
    long long v238 = 0u;
    long long v235 = 0u;
    long long v236 = 0u;
    long long v233 = 0u;
    long long v234 = 0u;
    long long v232 = 0u;
    memset(buf, 0, sizeof(buf));
    int v55 = *(_DWORD *)(v53 + 16);
    buf[0] = v54;
    int v56 = *(_DWORD *)(v53 + 212);
    *(_DWORD *)(v53 + 212) = 0;
    *(_DWORD *)(*((void *)this + 33) + 212) ^= 0xFFFFFFFu;
    uint64_t v57 = *((void *)this + 33);
    int v58 = *(_DWORD *)(v57 + 212);
    *(_DWORD *)(v57 + 212) = v56;
    if (v54)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 212, (v55 & 0xF) << 9, 0xFFFFFFFFFLL, 8, v58, 4);
      if (result) {
        return result;
      }
    }
  }
  uint64_t v59 = (char *)this + 16048;
  for (uint64_t j = 216; j != 232; j += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + j) = 0;
    uint64_t v61 = *((void *)this + 33);
    int v62 = *(_DWORD *)(v61 + j);
    *(_DWORD *)(v61 + j) = 0;
    *(_DWORD *)(*((void *)this + 33) + j) ^= 0xFFFFFFFu;
    uint64_t v63 = *((void *)this + 33);
    int v64 = *(_DWORD *)(v63 + j);
    *(_DWORD *)(v63 + j) = v62;
    if (*(void *)v59 || *((_DWORD *)v59 + 38) || *((_DWORD *)v59 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v59, j, 0, 0xFFFFFFFFFLL, 8, v64, 4);
      if (result) {
        return result;
      }
    }
    v59 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 232) = 0;
  uint64_t v65 = *((void *)this + 33);
  int v66 = *(_DWORD *)(v65 + 232);
  *(_DWORD *)(v65 + 232) = 0;
  *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFFFu;
  uint64_t v67 = *((void *)this + 33);
  int v68 = *(_DWORD *)(v67 + 232);
  *(_DWORD *)(v67 + 232) = v66;
  if (!*((void *)this + 2094) && !*((_DWORD *)this + 4226) && !*((_DWORD *)this + 4227)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2094, 232, 0, 0xFFFFFFFFFLL, 8, v68, 4),
        !result))
  {
    *(_DWORD *)(*((void *)this + 33) + 236) = 0;
    uint64_t v69 = *((void *)this + 33);
    int v70 = *(_DWORD *)(v69 + 236);
    *(_DWORD *)(v69 + 236) = 0;
    *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFFFu;
    uint64_t v71 = *((void *)this + 33);
    int v72 = *(_DWORD *)(v71 + 236);
    *(_DWORD *)(v71 + 236) = v70;
    if (!*((void *)this + 2116) && !*((_DWORD *)this + 4270) && !*((_DWORD *)this + 4271)) {
      goto LABEL_244;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2116, 236, 0, 0xFFFFFFFFFLL, 8, v72, 4);
    if (!result)
    {
LABEL_244:
      *(_DWORD *)(*((void *)this + 33) + 240) = 0;
      uint64_t v73 = *((void *)this + 33);
      int v74 = *(_DWORD *)(v73 + 240);
      *(_DWORD *)(v73 + 240) = 0;
      *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFFFu;
      uint64_t v75 = *((void *)this + 33);
      int v76 = *(_DWORD *)(v75 + 240);
      *(_DWORD *)(v75 + 240) = v74;
      if (!*((void *)this + 2138) && !*((_DWORD *)this + 4314) && !*((_DWORD *)this + 4315)) {
        goto LABEL_245;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2138, 240, 0, 0xFFFFFFFFFLL, 8, v76, 4);
      if (!result)
      {
LABEL_245:
        *(_DWORD *)(*((void *)this + 33) + 244) = 0;
        uint64_t v77 = *((void *)this + 33);
        int v78 = *(_DWORD *)(v77 + 244);
        *(_DWORD *)(v77 + 244) = 0;
        *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFFFu;
        uint64_t v79 = *((void *)this + 33);
        int v80 = *(_DWORD *)(v79 + 244);
        *(_DWORD *)(v79 + 244) = v78;
        if (!*((void *)this + 2160) && !*((_DWORD *)this + 4358) && !*((_DWORD *)this + 4359)) {
          goto LABEL_246;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2160, 244, 0, 0xFFFFFFFFFLL, 8, v80, 4);
        if (!result)
        {
LABEL_246:
          *(_DWORD *)(*((void *)this + 33) + 248) = 0;
          uint64_t v81 = *((void *)this + 33);
          int v82 = *(_DWORD *)(v81 + 248);
          *(_DWORD *)(v81 + 248) = 0;
          *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFFFu;
          uint64_t v83 = *((void *)this + 33);
          int v84 = *(_DWORD *)(v83 + 248);
          *(_DWORD *)(v83 + 248) = v82;
          if (!*((void *)this + 2182) && !*((_DWORD *)this + 4402) && !*((_DWORD *)this + 4403)) {
            goto LABEL_247;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2182, 248, 0, 0xFFFFFFFFFLL, 8, v84, 4);
          if (!result)
          {
LABEL_247:
            *(_DWORD *)(*((void *)this + 33) + 252) = 0;
            *(_DWORD *)(*((void *)this + 33) + 256) = 0;
            uint64_t v85 = *((void *)this + 33);
            int v86 = *(_DWORD *)(v85 + 256);
            *(_DWORD *)(v85 + 256) = 0;
            *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFFFu;
            uint64_t v87 = *((void *)this + 33);
            int v88 = *(_DWORD *)(v87 + 256);
            *(_DWORD *)(v87 + 256) = v86;
            if (!*((void *)this + 1456) && !*((_DWORD *)this + 2950) && !*((_DWORD *)this + 2951)) {
              goto LABEL_248;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 256, 0, 0xFFFFFFFFFLL, 8, v88, 4);
            if (!result)
            {
LABEL_248:
              *(_DWORD *)(*((void *)this + 33) + 260) = 0;
              uint64_t v89 = *((void *)this + 33);
              int v90 = *(_DWORD *)(v89 + 260);
              *(_DWORD *)(v89 + 260) = 0;
              *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFFFu;
              uint64_t v91 = *((void *)this + 33);
              int v92 = *(_DWORD *)(v91 + 260);
              *(_DWORD *)(v91 + 260) = v90;
              uint64_t v93 = (char *)this + 176 * v226;
              if (!*((void *)v93 + 1478)
                && !*((_DWORD *)this + 44 * v226 + 2994)
                && !*((_DWORD *)this + 44 * v226 + 2995))
              {
                goto LABEL_249;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v93 + 1478, 260, 0, 0xFFFFFFFFFLL, 8, v92, 4);
              if (!result)
              {
LABEL_249:
                *(_DWORD *)(*((void *)this + 33) + 264) = 0;
                uint64_t v94 = *((void *)this + 33);
                int v95 = *(_DWORD *)(v94 + 264);
                *(_DWORD *)(v94 + 264) = 0;
                *(_DWORD *)(*((void *)this + 33) + 264) ^= 0x1FFFFFFFu;
                uint64_t v96 = *((void *)this + 33);
                int v97 = *(_DWORD *)(v96 + 264);
                *(_DWORD *)(v96 + 264) = v95;
                size_t v98 = (char *)this + 176 * v226;
                if (!*((void *)v98 + 70)
                  && !*((_DWORD *)this + 44 * v226 + 178)
                  && !*((_DWORD *)this + 44 * v226 + 179))
                {
                  goto LABEL_250;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v98 + 70, 264, 0, 0xFFFFFFFFFLL, 7, v97, 4);
                if (!result)
                {
LABEL_250:
                  *(_DWORD *)(*((void *)this + 33) + 268) = 0;
                  uint64_t v99 = *((void *)this + 33);
                  int v100 = *(_DWORD *)(v99 + 268);
                  *(_DWORD *)(v99 + 268) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 268) ^= 0x1FFFFFFFu;
                  uint64_t v101 = *((void *)this + 33);
                  int v102 = *(_DWORD *)(v101 + 268);
                  *(_DWORD *)(v101 + 268) = v100;
                  int v103 = (void *)(v225 + 8);
                  if (!*(void *)(v225 + 8) && !*(_DWORD *)(v225 + 160) && !*(_DWORD *)(v225 + 164)) {
                    goto LABEL_251;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v225 + 8), 268, *(_DWORD *)(v225 + 60), 0xFFFFFFFFFLL, 7, v102, 4);
                  if (!result)
                  {
LABEL_251:
                    *(_DWORD *)(*((void *)this + 33) + 272) = 0;
                    uint64_t v104 = *((void *)this + 33);
                    int v105 = *(_DWORD *)(v104 + 272);
                    *(_DWORD *)(v104 + 272) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 272) ^= 0x1FFFFFFFu;
                    uint64_t v106 = *((void *)this + 33);
                    int v107 = *(_DWORD *)(v106 + 272);
                    *(_DWORD *)(v106 + 272) = v105;
                    uint64_t v108 = (char *)this + 176 * v226;
                    if (!*((void *)v108 + 598)
                      && !*((_DWORD *)this + 44 * v226 + 1234)
                      && !*((_DWORD *)this + 44 * v226 + 1235))
                    {
                      goto LABEL_252;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v108 + 598, 272, 0, 0xFFFFFFFFFLL, 7, v107, 4);
                    if (!result)
                    {
LABEL_252:
                      *(_DWORD *)(*((void *)this + 33) + 276) = 0;
                      uint64_t v109 = *((void *)this + 33);
                      int v110 = *(_DWORD *)(v109 + 276);
                      *(_DWORD *)(v109 + 276) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 276) ^= 0x1FFFFFFFu;
                      uint64_t v111 = *((void *)this + 33);
                      int v112 = *(_DWORD *)(v111 + 276);
                      *(_DWORD *)(v111 + 276) = v110;
                      if (!*v103 && !*(_DWORD *)(v225 + 160) && !*(_DWORD *)(v225 + 164)) {
                        goto LABEL_253;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v103, 276, *(_DWORD *)(v225 + 64), 0xFFFFFFFFFLL, 7, v112, 4);
                      if (!result)
                      {
LABEL_253:
                        if (*(_DWORD *)(*((void *)this + 32) + 2648) != 1) {
                          goto LABEL_132;
                        }
                        uint64_t v113 = *((void *)this + 33);
                        int v114 = *(_DWORD *)(v113 + 268);
                        *(_DWORD *)(v113 + 268) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 268) ^= 0x1FFFFFFFu;
                        uint64_t v115 = *((void *)this + 33);
                        int v116 = *(_DWORD *)(v115 + 268);
                        *(_DWORD *)(v115 + 268) = v114;
                        if (!*v103 && !*(_DWORD *)(v225 + 160) && !*(_DWORD *)(v225 + 164)) {
                          goto LABEL_254;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v103, 268, *(_DWORD *)(v225 + 60), 0xFFFFFFFFFLL, 7, v116, 4);
                        if (!result)
                        {
LABEL_254:
                          uint64_t v117 = *((void *)this + 33);
                          int v118 = *(_DWORD *)(v117 + 276);
                          *(_DWORD *)(v117 + 276) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 276) ^= 0x1FFFFFFFu;
                          uint64_t v119 = *((void *)this + 33);
                          int v120 = *(_DWORD *)(v119 + 276);
                          *(_DWORD *)(v119 + 276) = v118;
                          if (!*v103 && !*(_DWORD *)(v225 + 160) && !*(_DWORD *)(v225 + 164)) {
                            goto LABEL_255;
                          }
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v103, 276, *(_DWORD *)(v225 + 64), 0xFFFFFFFFFLL, 7, v120, 4);
                          if (!result)
                          {
LABEL_255:
                            uint64_t v121 = *((void *)this + 33);
                            int v122 = *(_DWORD *)(v121 + 264);
                            *(_DWORD *)(v121 + 264) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 264) ^= 0x1FFFFFFFu;
                            uint64_t v123 = *((void *)this + 33);
                            int v124 = *(_DWORD *)(v123 + 264);
                            *(_DWORD *)(v123 + 264) = v122;
                            if (!*v103 && !*(_DWORD *)(v225 + 160) && !*(_DWORD *)(v225 + 164)) {
                              goto LABEL_256;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v103, 264, *(_DWORD *)(v225 + 72), 0xFFFFFFFFFLL, 7, v124, 4);
                            if (!result)
                            {
LABEL_256:
                              uint64_t v125 = *((void *)this + 33);
                              int v126 = *(_DWORD *)(v125 + 272);
                              *(_DWORD *)(v125 + 272) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 272) ^= 0x1FFFFFFFu;
                              uint64_t v127 = *((void *)this + 33);
                              int v128 = *(_DWORD *)(v127 + 272);
                              *(_DWORD *)(v127 + 272) = v126;
                              if (!*v103 && !*(_DWORD *)(v225 + 160) && !*(_DWORD *)(v225 + 164)) {
                                goto LABEL_132;
                              }
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v103, 272, *(_DWORD *)(v225 + 76), 0xFFFFFFFFFLL, 7, v128, 4);
                              if (!result)
                              {
LABEL_132:
                                int v219 = v3;
                                uint64_t v220 = v5;
                                if (*(_DWORD *)(v15 + 52) & 0x2000 | v223)
                                {
                                  *((_DWORD *)this + v226 + 116) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 280) = 0;
                                  if (v223)
                                  {
                                    uint64_t v129 = 0;
                                    if (v33) {
                                      int v130 = 0x2000000;
                                    }
                                    else {
                                      int v130 = 0;
                                    }
                                    int v221 = v130;
                                    do
                                    {
                                      uint64_t v131 = *((void *)v242 + v129);
                                      uint64_t v132 = *(unsigned int *)(v131 + 32);
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 280) = 0;
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 280) = *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 280) & 0xFFFFFFF | ((v223 << 28) - 0x10000000);
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 280) &= 0xF3FFFFFF;
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 280) = *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 280) & 0xFDFFFFFF | v221;
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 280) |= 0x1000000u;
                                      int v133 = v222 - *(_DWORD *)(v131 + 12);
                                      int v134 = v133 & 0x1FFFF;
                                      if (v133 < -32768) {
                                        int v134 = 98304;
                                      }
                                      if (v133 < 0x8000) {
                                        int v135 = v134;
                                      }
                                      else {
                                        int v135 = 0x7FFF;
                                      }
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 280) = *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 280) & 0xFFFE0000 | v135;
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 280) = *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 280) & 0xFFFDFFFF | (*(unsigned __int8 *)(v131 + 1) << 17);
                                      if (*(_DWORD *)(v131 + 28) == 1)
                                      {
                                        long long v240 = 0u;
                                        long long v241 = 0u;
                                        long long v238 = 0u;
                                        long long v239 = 0u;
                                        long long v236 = 0u;
                                        long long v237 = 0u;
                                        long long v234 = 0u;
                                        long long v235 = 0u;
                                        long long v232 = 0u;
                                        long long v233 = 0u;
                                        memset(buf, 0, sizeof(buf));
                                        int DPB = AVC_RLM::getDPB(*(void *)(*((void *)this + 32) + 3104), buf);
                                        if (DPB < 1)
                                        {
                                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                            return 0xFFFFFFFFLL;
                                          }
                                          int v229 = 136315138;
                                          uint64_t v230 = "populatePictureRegisters";
                                          int v27 = &_os_log_internal;
                                          uint64_t v28 = "AppleAVD: ERROR: %s: No ref pics found!\n";
                                        }
                                        else
                                        {
                                          uint64_t v137 = DPB;
                                          while (v137-- >= 1)
                                          {
                                            uint64_t v131 = buf[v137];
                                            if (!*(_DWORD *)(v131 + 28))
                                            {
                                              uint64_t v132 = *(unsigned int *)(v131 + 32);
                                              goto LABEL_150;
                                            }
                                          }
                                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                            return 0xFFFFFFFFLL;
                                          }
                                          int v229 = 136315138;
                                          uint64_t v230 = "populatePictureRegisters";
                                          int v27 = &_os_log_internal;
                                          uint64_t v28 = "AppleAVD: ERROR: %s: No non-existing ref frames found!\n";
                                        }
                                        int v29 = (uint8_t *)&v229;
                                        uint32_t v30 = 12;
                                        goto LABEL_39;
                                      }
LABEL_150:
                                      if (v33)
                                      {
                                        buf[0] = 0;
                                        if (!CAVDAvcDecoder::decodeGetRenderTargetRef(*((void *)this + 32), v132, *(_DWORD *)(v131 + 56), *(_DWORD *)(v131 + 64), buf))
                                        {
                                          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                          {
                                            LOWORD(v229) = 0;
                                            int v27 = &_os_log_internal;
                                            uint64_t v28 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
                                            int v29 = (uint8_t *)&v229;
                                            uint32_t v30 = 2;
LABEL_39:
                                            _os_log_impl(&dword_223977000, v27, OS_LOG_TYPE_DEFAULT, v28, v29, v30);
                                          }
                                          return 0xFFFFFFFFLL;
                                        }
                                        *(void *)(v131 + 40) = buf[0] + 8;
                                      }
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 344) = 0;
                                      int v139 = 4 * v129;
                                      int v227 = 4 * v129 + 344;
                                      uint64_t v140 = *((void *)this + 33) + 4 * v129;
                                      int v141 = *(_DWORD *)(v140 + 344);
                                      *(_DWORD *)(v140 + 344) = 0;
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 344) ^= 0x1FFFFFFFu;
                                      uint64_t v142 = *((void *)this + 33) + 4 * v129;
                                      int v143 = *(_DWORD *)(v142 + 344);
                                      *(_DWORD *)(v142 + 344) = v141;
                                      int v144 = (char *)this + 176 * v132;
                                      if (*((void *)v144 + 70)
                                        || *((_DWORD *)this + 44 * v132 + 178)
                                        || *((_DWORD *)this + 44 * v132 + 179))
                                      {
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v144 + 70, v227, 0, 0xFFFFFFFFFLL, 7, v143, 4);
                                        if (result) {
                                          return result;
                                        }
                                      }
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 408) = 0;
                                      uint64_t v145 = *((void *)this + 33) + 4 * v129;
                                      int v146 = *(_DWORD *)(v145 + 408);
                                      *(_DWORD *)(v145 + 408) = 0;
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 408) ^= 0x1FFFFFFFu;
                                      uint64_t v147 = *((void *)this + 33) + 4 * v129;
                                      int v148 = *(_DWORD *)(v147 + 408);
                                      *(_DWORD *)(v147 + 408) = v146;
                                      uint64_t v149 = *(void *)(v131 + 40);
                                      if (*(void *)v149 || *(_DWORD *)(v149 + 152) || *(_DWORD *)(v149 + 156))
                                      {
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v149, v139 + 408, *(_DWORD *)(v149 + 52), 0xFFFFFFFFFLL, 7, v148, 4);
                                        if (result) {
                                          return result;
                                        }
                                      }
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 472) = 0;
                                      uint64_t v150 = *((void *)this + 33) + 4 * v129;
                                      int v151 = *(_DWORD *)(v150 + 472);
                                      *(_DWORD *)(v150 + 472) = 0;
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 472) ^= 0x1FFFFFFFu;
                                      uint64_t v152 = *((void *)this + 33) + 4 * v129;
                                      int v153 = *(_DWORD *)(v152 + 472);
                                      *(_DWORD *)(v152 + 472) = v151;
                                      int v154 = (char *)this + 176 * v132;
                                      if (*((void *)v154 + 598)
                                        || *((_DWORD *)this + 44 * v132 + 1234)
                                        || *((_DWORD *)this + 44 * v132 + 1235))
                                      {
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v154 + 598, v139 + 472, 0, 0xFFFFFFFFFLL, 7, v153, 4);
                                        if (result) {
                                          return result;
                                        }
                                      }
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 536) = 0;
                                      uint64_t v155 = *((void *)this + 33) + 4 * v129;
                                      int v156 = *(_DWORD *)(v155 + 536);
                                      *(_DWORD *)(v155 + 536) = 0;
                                      *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 536) ^= 0x1FFFFFFFu;
                                      uint64_t v157 = *((void *)this + 33) + 4 * v129;
                                      int v158 = *(_DWORD *)(v157 + 536);
                                      *(_DWORD *)(v157 + 536) = v156;
                                      uint64_t v159 = *(void *)(v131 + 40);
                                      if (*(void *)v159 || *(_DWORD *)(v159 + 152) || *(_DWORD *)(v159 + 156))
                                      {
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v159, v139 + 536, *(_DWORD *)(v159 + 56), 0xFFFFFFFFFLL, 7, v158, 4);
                                        if (result) {
                                          return result;
                                        }
                                      }
                                      if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                                      {
                                        uint64_t v160 = *((void *)this + 33) + 4 * v129;
                                        int v161 = *(_DWORD *)(v160 + 408);
                                        *(_DWORD *)(v160 + 408) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 408) ^= 0x1FFFFFFFu;
                                        uint64_t v162 = *((void *)this + 33) + 4 * v129;
                                        int v163 = *(_DWORD *)(v162 + 408);
                                        *(_DWORD *)(v162 + 408) = v161;
                                        uint64_t v164 = *(void *)(v131 + 40);
                                        if (*(void *)v164 || *(_DWORD *)(v164 + 152) || *(_DWORD *)(v164 + 156))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v164, v139 + 408, *(_DWORD *)(v164 + 52), 0xFFFFFFFFFLL, 7, v163, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        uint64_t v165 = *((void *)this + 33) + 4 * v129;
                                        int v166 = *(_DWORD *)(v165 + 536);
                                        *(_DWORD *)(v165 + 536) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 536) ^= 0x1FFFFFFFu;
                                        uint64_t v167 = *((void *)this + 33) + 4 * v129;
                                        int v168 = *(_DWORD *)(v167 + 536);
                                        *(_DWORD *)(v167 + 536) = v166;
                                        uint64_t v169 = *(void *)(v131 + 40);
                                        if (*(void *)v169 || *(_DWORD *)(v169 + 152) || *(_DWORD *)(v169 + 156))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v169, v139 + 536, *(_DWORD *)(v169 + 56), 0xFFFFFFFFFLL, 7, v168, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        uint64_t v170 = *((void *)this + 33) + 4 * v129;
                                        int v171 = *(_DWORD *)(v170 + 344);
                                        *(_DWORD *)(v170 + 344) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 344) ^= 0x1FFFFFFFu;
                                        uint64_t v172 = *((void *)this + 33) + 4 * v129;
                                        int v173 = *(_DWORD *)(v172 + 344);
                                        *(_DWORD *)(v172 + 344) = v171;
                                        uint64_t v174 = *(void *)(v131 + 40);
                                        if (*(void *)v174 || *(_DWORD *)(v174 + 152) || *(_DWORD *)(v174 + 156))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v174, v227, *(_DWORD *)(v174 + 64), 0xFFFFFFFFFLL, 7, v173, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        uint64_t v175 = *((void *)this + 33) + 4 * v129;
                                        int v176 = *(_DWORD *)(v175 + 472);
                                        *(_DWORD *)(v175 + 472) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v129 + 472) ^= 0x1FFFFFFFu;
                                        uint64_t v177 = *((void *)this + 33) + 4 * v129;
                                        int v178 = *(_DWORD *)(v177 + 472);
                                        *(_DWORD *)(v177 + 472) = v176;
                                        uint64_t v179 = *(void *)(v131 + 40);
                                        if (*(void *)v179 || *(_DWORD *)(v179 + 152) || *(_DWORD *)(v179 + 156))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v179, v139 + 472, *(_DWORD *)(v179 + 68), 0xFFFFFFFFFLL, 7, v178, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                      }
                                      ++v129;
                                    }
                                    while (v129 != v223);
                                  }
                                }
                                else
                                {
                                  *(_DWORD *)(v15 + 52) |= 0x2000u;
                                  *((_DWORD *)this + v226 + 116) = 1;
                                  *(_DWORD *)(*((void *)this + 33) + 280) = 0;
                                }
                                *(_DWORD *)(*((void *)this + 33) + 600) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 604) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 608) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 612) = 0;
                                if (v228)
                                {
                                  uint64_t v180 = *((void *)this + 32);
                                  unsigned int v181 = *(unsigned __int8 *)(v180 + 3004);
                                  if (*(unsigned char *)(v180 + 3004))
                                  {
                                    unsigned int v181 = *(_DWORD *)(v180 + 3016);
                                    unsigned int v182 = *(_DWORD *)(v180 + 3020);
                                  }
                                  else
                                  {
                                    unsigned int v182 = 0;
                                  }
                                  uint64_t v183 = *(void *)(v180 + 3656);
                                  uint64_t v184 = *(unsigned int *)(v183 + 56);
                                  unint64_t v185 = *(unsigned int *)(v183 + 52) + (unint64_t)v181;
                                  uint64_t v186 = *((void *)this + 33);
                                  int v187 = *(_DWORD *)(v186 + 600);
                                  *(_DWORD *)(v186 + 600) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 600) ^= 0xFFFFFFFu;
                                  uint64_t v188 = *((void *)this + 33);
                                  int v189 = *(_DWORD *)(v188 + 600);
                                  *(_DWORD *)(v188 + 600) = v187;
                                  uint64_t v190 = *(void *)(*((void *)this + 32) + 3656);
                                  unint64_t v191 = HIDWORD(v185);
                                  int v192 = v224;
                                  if (*(void *)v190 || *(_DWORD *)(v190 + 152) || *(_DWORD *)(v190 + 156))
                                  {
                                    if (v191 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                    {
                                      LODWORD(buf[0]) = 136315394;
                                      *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                      WORD2(buf[1]) = 1024;
                                      *(_DWORD *)((char *)&buf[1] + 6) = 1199;
                                      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v190, 600, v185, 0xFFFFFFFFFLL, 8, v189, 4);
                                    int v192 = v224;
                                    if (result) {
                                      return result;
                                    }
                                  }
                                  unint64_t v193 = v184 + v182;
                                  uint64_t v194 = *((void *)this + 33);
                                  int v195 = *(_DWORD *)(v194 + 604);
                                  *(_DWORD *)(v194 + 604) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 604) ^= 0xFFFFFFFu;
                                  uint64_t v196 = *((void *)this + 33);
                                  int v197 = *(_DWORD *)(v196 + 604);
                                  *(_DWORD *)(v196 + 604) = v195;
                                  uint64_t v198 = *(void *)(*((void *)this + 32) + 3656);
                                  unint64_t v199 = HIDWORD(v193);
                                  if (*(void *)v198 || *(_DWORD *)(v198 + 152) || *(_DWORD *)(v198 + 156))
                                  {
                                    if (v199 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                    {
                                      LODWORD(buf[0]) = 136315394;
                                      *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                      WORD2(buf[1]) = 1024;
                                      *(_DWORD *)((char *)&buf[1] + 6) = 1200;
                                      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v198, 604, v193, 0xFFFFFFFFFLL, 8, v197, 4);
                                    int v192 = v224;
                                    if (result) {
                                      return result;
                                    }
                                  }
                                  uint64_t v200 = *((void *)this + 33);
                                  int v201 = *(_DWORD *)(v200 + 608);
                                  *(_DWORD *)(v200 + 608) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 608) ^= 0xC0000000;
                                  uint64_t v202 = *((void *)this + 33);
                                  int v203 = *(_DWORD *)(v202 + 608);
                                  *(_DWORD *)(v202 + 608) = v201;
                                  uint64_t v204 = *(void *)(*((void *)this + 32) + 3656);
                                  if (*(void *)v204 || *(_DWORD *)(v204 + 152) || *(_DWORD *)(v204 + 156))
                                  {
                                    if (v191 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                    {
                                      LODWORD(buf[0]) = 136315394;
                                      *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                      WORD2(buf[1]) = 1024;
                                      *(_DWORD *)((char *)&buf[1] + 6) = 1205;
                                      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v204, 608, v185, 192, 6, v203, 4);
                                    int v192 = v224;
                                    if (result) {
                                      return result;
                                    }
                                  }
                                  uint64_t v205 = *((void *)this + 33);
                                  int v206 = *(_DWORD *)(v205 + 612);
                                  *(_DWORD *)(v205 + 612) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 612) ^= 0xC0000000;
                                  uint64_t v207 = *((void *)this + 33);
                                  int v208 = *(_DWORD *)(v207 + 612);
                                  *(_DWORD *)(v207 + 612) = v206;
                                  uint64_t v209 = *(void *)(*((void *)this + 32) + 3656);
                                  if (*(void *)v209 || *(_DWORD *)(v209 + 152) || *(_DWORD *)(v209 + 156))
                                  {
                                    if (v199 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                    {
                                      LODWORD(buf[0]) = 136315394;
                                      *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                      WORD2(buf[1]) = 1024;
                                      *(_DWORD *)((char *)&buf[1] + 6) = 1206;
                                      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v209, 612, v193, 192, 6, v208, 4);
                                    int v192 = v224;
                                    if (result) {
                                      return result;
                                    }
                                  }
                                  if (v192)
                                  {
                                    *(_DWORD *)(*((void *)this + 33) + 608) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 608) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 76) >> 6) & 0xFFF));
                                    int v210 = (_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 80);
                                  }
                                  else
                                  {
                                    if (CAHDecDahliaAvc::getSWRStride(this, *(unsigned __int16 *)(v15 + 84)- *(unsigned __int16 *)(v15 + 80)+ 1, *(unsigned __int8 *)(v220 + 2224 * v219 + 6), *(unsigned __int8 *)(v220 + 2224 * v219 + 7), *(_DWORD *)(v220 + 2224 * v219 + 2212)))return 0xFFFFFFFFLL; {
                                    *(_DWORD *)(*((void *)this + 33) + 608) = *(_DWORD *)(*((void *)this + 33)
                                    }
                                                                                            + 608) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 4460) >> 6) & 0xFFF));
                                    int v210 = (_DWORD *)((char *)this + 17844);
                                  }
                                  *(_DWORD *)(*((void *)this + 33) + 612) = *(_DWORD *)(*((void *)this + 33)
                                                                                          + 612) & 0xFFFF8003 | (4 * ((*v210 >> 6) & 0x1FFF));
                                }
                                uint64_t v211 = *((void *)this + 32);
                                if (*(_DWORD *)(v211 + 2360) != 1) {
                                  return 0;
                                }
                                uint64_t v212 = *((void *)this + 33);
                                *(_DWORD *)(v212 + 712) = *(_DWORD *)(v212 + 712) & 0xFFFFFFFE | *(_DWORD *)(v211 + 2508) & 1;
                                if (*(_DWORD *)(v211 + 2508))
                                {
                                  *(_DWORD *)(v212 + 1688) = 0x10000000;
                                  *(_DWORD *)(v212 + 1692) = *(_DWORD *)(v211 + 2368);
                                  *(_DWORD *)(v212 + 1704) = 0;
                                  *(void *)(v212 + 1696) = 0;
                                  *(_OWORD *)(v212 + 1708) = *(_OWORD *)(v211 + 2372);
                                  long long v213 = *(_OWORD *)(v211 + 2404);
                                  *(_OWORD *)(v212 + 1724) = *(_OWORD *)(v211 + 2388);
                                  *(_OWORD *)(v212 + 1740) = v213;
                                }
                                *(_DWORD *)(*((void *)this + 33) + 712) = *(_DWORD *)(*((void *)this + 33) + 712) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v211 + 2512) & 1));
                                if (*(_DWORD *)(v211 + 2512))
                                {
                                  *(_DWORD *)(v212 + 1756) = 0;
                                  char v214 = *(_DWORD *)(v211 + 2424);
                                  *(_DWORD *)(v212 + 1756) = (*(_DWORD *)(v211 + 2424) & 1) << 22;
                                  int v215 = ((*(_DWORD *)(v211 + 2420) & 1) << 23) | ((v214 & 1) << 22) | 0x20000000;
                                  *(_DWORD *)(v212 + 1756) = v215;
                                  *(_DWORD *)(v212 + 1756) = v215 | (*(_DWORD *)(v211 + 2364) == 0);
                                  long long v216 = *(_OWORD *)(v211 + 2428);
                                  long long v217 = *(_OWORD *)(v211 + 2444);
                                  *(_OWORD *)(v212 + 1792) = *(_OWORD *)(v211 + 2460);
                                  *(_OWORD *)(v212 + 1776) = v217;
                                  *(_OWORD *)(v212 + 1760) = v216;
                                }
                                *(_DWORD *)(*((void *)this + 33) + 712) = *(_DWORD *)(*((void *)this + 33) + 712) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v211 + 2516) & 1));
                                *(_DWORD *)(*((void *)this + 33) + 712) = *(_DWORD *)(*((void *)this + 33) + 712) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v211 + 2520) & 1));
                                *(_DWORD *)(*((void *)this + 33) + 712) = *(_DWORD *)(*((void *)this + 33) + 712) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v211 + 2524) & 1));
                                if (*(_DWORD *)(v211 + 2516))
                                {
                                  *(_DWORD *)(v212 + 1812) = 0;
                                  if (*(_DWORD *)(v211 + 2476) == 2) {
                                    int v218 = 805306368;
                                  }
                                  else {
                                    int v218 = 813694976;
                                  }
                                  *(_DWORD *)(v212 + 1812) = v218;
                                  memcpy((void *)(v212 + 1816), (const void *)(v211 + 2480), 4 * *(unsigned int *)(v211 + 2476));
                                  uint64_t result = 0;
                                  *(_DWORD *)(v211 + 2516) = 0;
                                }
                                else
                                {
                                  return 0;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecDahliaAvc::getSWRStride(CAHDecDahliaAvc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 2230) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  long long v9 = (_DWORD *)((char *)this + 17840);
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      int v11 = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v12 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      int v11 = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC) + 63) & 0xFFFFFFC0;
      int v13 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      int v11 = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8) + 63) & 0xFFFFFFC0;
      int v13 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      int v11 = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v12 = 4 * a2;
LABEL_17:
      int v13 = v12 / a5;
LABEL_18:
      _DWORD *v9 = v11;
      v9[1] = (v13 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 136315394;
        uint64_t v15 = "getSWRStride";
        __int16 v16 = 1024;
        unsigned int v17 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v14, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecDahliaAvc::getTileStartCTU(CAHDecDahliaAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 616);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecDahliaAvc::getTileEndCTU(CAHDecDahliaAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 616);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecDahliaAvc::getTileIdxAbove(CAHDecDahliaAvc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 616);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecDahliaAvc::populateAvdWork(CAHDecDahliaAvc *this, unsigned int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v3 + 3312);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 7500);
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    long long v9 = (int *)(v2 + 2768);
    long long v10 = (int *)(v4 + 20);
    __int16 v22 = a2;
    uint64_t v11 = 44 * a2;
    uint64_t v12 = v2 + 952 * v5;
    while (1)
    {
      uint64_t v13 = v12 + v7;
      *(_WORD *)(v13 + 1836) = v8;
      *(_WORD *)(v13 + 1838) = 0;
      *(_WORD *)(v13 + 1840) = v8;
      *(_DWORD *)(v12 + v7 + 1842) = 0;
      int v14 = *v9;
      if (!CAVDAvcDecoder::GetSDataMemInfo(*((void *)this + 32), v8, &v24, &v23)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *v10;
      *(_DWORD *)(v13 + 1864) = *v10;
      *(_DWORD *)(v13 + 1868) = v15;
      *(_DWORD *)(v13 + 1872) = 0;
      if (v7) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = 15;
      }
      *(_WORD *)(v13 + 1846) = v16;
      uint64_t v17 = v24;
      if (*(void *)v24 || *(_DWORD *)(v24 + 152) || *(_DWORD *)(v24 + 156))
      {
        int v18 = v23;
        if (HIDWORD(v23) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          unsigned int v26 = "populateAvdWork";
          __int16 v27 = 1024;
          int v28 = 1838;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          int v18 = v23;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 573054, v18, 0xFFFFFFFFFLL, 32, -1, 2);
        if (result) {
          return result;
        }
        uint64_t v17 = v24;
        if (*(void *)v24) {
          goto LABEL_17;
        }
      }
      if (*(_DWORD *)(v17 + 152) || *(_DWORD *)(v17 + 156))
      {
LABEL_17:
        int v20 = v23;
        if (HIDWORD(v23))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            unsigned int v26 = "populateAvdWork";
            __int16 v27 = 1024;
            int v28 = 1839;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v20 = v23;
          }
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 573056, v20, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
      v9 += 238;
      *(_DWORD *)(v12 + v7 + 1860) = v14;
      ++v8;
      v7 += 44;
      v10 += 462;
      if (v11 == v7)
      {
        uint64_t v2 = *((void *)this + 33);
        __int16 v21 = v22;
        goto LABEL_24;
      }
    }
  }
  else
  {
    __int16 v21 = 0;
LABEL_24:
    uint64_t result = 0;
    *(_WORD *)(v2 + 28) = v21;
    *(_DWORD *)(v2 + 32) = 573032;
  }
  return result;
}

uint64_t CAHDecDahliaAvc::allocWorkBuf_SPS(CAHDecDahliaAvc *this, unsigned char *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v3 = (unsigned int *)((char *)this + 17808);
  int v4 = a2[4];
  unsigned int v5 = *((unsigned __int16 *)a2 + 779);
  int v6 = 16 * v5;
  unsigned int v7 = *((unsigned __int16 *)a2 + 780);
  unsigned int v8 = 32 - __clz(((16 * v5 + 47) >> 5) - 1);
  if (v5 < 2) {
    LOBYTE(v8) = 0;
  }
  unsigned int v9 = 32 - __clz(((16 * v7 + 47) >> 5) - 1);
  if (v7 < 2) {
    LOBYTE(v9) = 0;
  }
  unsigned int v10 = ((32 << (v9 + v8)) + 127) & 0xFFFFFF80;
  if (a2[4])
  {
    unsigned int v11 = (v6 + 16) << (v4 == 3);
    unsigned int v12 = ((((16 * v7 + 16) | (v4 == 1)) >> (v4 == 1)) + 15) >> 4;
    if (v11 > 0x20)
    {
      unsigned int v13 = 32 - __clz(((v11 + 31) >> 5) - 1);
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v12 = 0;
  }
  LOBYTE(v13) = 0;
LABEL_10:
  unsigned int v14 = 32 - __clz(v12 - 1);
  if (v12 >= 2) {
    char v15 = v14;
  }
  else {
    char v15 = 0;
  }
  unsigned int v16 = ((8 << (v15 + v13)) + 127) & 0xFFFFFF80;
  if (a2[4]) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = 0;
  }
  unsigned int *v3 = v10;
  *((_DWORD *)this + 4453) = v17;
  *((void *)this + 2227) = 0;
  int v18 = (v5 << 6) + 64;
  *((_DWORD *)this + 4457) = v18 + v18 * v7;
  *((_DWORD *)this + 4458) = v18;
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    uint64_t v19 = 24;
    int v20 = this;
    while (1)
    {
      uint64_t v21 = *v3;
      if (v21
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 35, v21, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_35;
        }
        int v28 = 136315650;
        uint64_t v29 = "allocWorkBuf_SPS";
        __int16 v30 = 1024;
        int v31 = 2077;
        __int16 v32 = 2080;
        int v33 = "HdrY";
        __int16 v27 = &_os_log_internal;
        goto LABEL_34;
      }
      uint64_t v22 = v3[1];
      if (v22)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 299, v22, 7, 1, 0)) {
          break;
        }
      }
      int v20 = (CAHDecDahliaAvc *)((char *)v20 + 176);
      if (!--v19) {
        goto LABEL_23;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v28 = 136315650;
    uint64_t v29 = "allocWorkBuf_SPS";
    __int16 v30 = 1024;
    int v31 = 2078;
    __int16 v32 = 2080;
    int v33 = "HdrC";
    __int16 v27 = &_os_log_internal;
    goto LABEL_34;
  }
LABEL_23:
  unint64_t v23 = (_OWORD *)((char *)this + 11824);
  uint64_t v24 = 24;
  while (1)
  {
    uint64_t v25 = v3[5];
    if (v25)
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), v23, v25, 7, 1, 0)) {
        break;
      }
    }
    v23 += 11;
    if (!--v24)
    {
      uint64_t result = 0;
      v3[10] = 0;
      v3[11] = v6 | (v7 << 20) | 0xF000F;
      return result;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v28 = 136315650;
    uint64_t v29 = "allocWorkBuf_SPS";
    __int16 v30 = 1024;
    int v31 = 2084;
    __int16 v32 = 2080;
    int v33 = "MvColo";
    __int16 v27 = &_os_log_internal;
LABEL_34:
    _os_log_impl(&dword_223977000, v27, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v28, 0x1Cu);
  }
LABEL_35:
  (*(void (**)(CAHDecDahliaAvc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecDahliaAvc::allocWorkBuf_PPS(CAHDecDahliaAvc *this, unsigned char *a2, void *a3, void *a4)
{
  uint64_t v5 = 0;
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v6 = a2[4];
  uint64_t v7 = 16 * *((unsigned __int16 *)a2 + 779);
  unsigned int v8 = (a2[6] + 9) & 0x1FE;
  if (v8 <= ((a2[7] + 9) & 0x1FEu)) {
    unsigned int v8 = (a2[7] + 9) & 0x1FE;
  }
  if (v6 == 3) {
    int v9 = 48;
  }
  else {
    int v9 = 32;
  }
  if (v6 == 3) {
    int v10 = 192;
  }
  else {
    int v10 = 128;
  }
  unint64_t v11 = v7 + 16;
  BOOL v12 = v6 == 0;
  if (a2[4]) {
    int v13 = v9;
  }
  else {
    int v13 = 16;
  }
  unsigned int v14 = (v7 + 31) >> 4;
  uint64_t v15 = ((v8 * v13) >> 3) * v14;
  if (v12) {
    int v16 = 64;
  }
  else {
    int v16 = v10;
  }
  uint64_t v17 = 32 * v14;
  uint64_t v18 = ((v8 * v16) >> 3) * v14;
  uint64_t v19 = 4 * ((v11 >> 2) + (v11 >> 4));
  int v20 = (char *)this + 16048;
  do
  {
    if (CAVDDecoder::allocAVDMem(*((void *)this + 32), &v20[v5], v19, 7, 1, 0))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_25;
      }
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 2203;
      __int16 v27 = 2080;
      int v28 = "AvpAboveInfo";
      uint64_t v21 = &_os_log_internal;
LABEL_24:
      _os_log_impl(&dword_223977000, v21, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
      goto LABEL_25;
    }
    v5 += 176;
  }
  while (v5 != 704);
  if (v15
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 1047, v15, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 2207;
      __int16 v27 = 2080;
      int v28 = "IpAbove";
      uint64_t v21 = &_os_log_internal;
      goto LABEL_24;
    }
LABEL_25:
    (*(void (**)(CAHDecDahliaAvc *, void))(*(void *)this + 152))(this, 0);
    return 0xFFFFFFFFLL;
  }
  if (v18
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 1058, v18, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 2208;
    __int16 v27 = 2080;
    int v28 = "LfAbovePix";
    uint64_t v21 = &_os_log_internal;
    goto LABEL_24;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 1069, v17, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 2209;
    __int16 v27 = 2080;
    int v28 = "LfAboveInfo";
    uint64_t v21 = &_os_log_internal;
    goto LABEL_24;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 728, v17, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 2212;
    __int16 v27 = 2080;
    int v28 = "MvAboveInfo";
    uint64_t v21 = &_os_log_internal;
    goto LABEL_24;
  }
  return result;
}

uint64_t CAHDecDahliaAvc::freeWorkBuf_SPS(CAHDecDahliaAvc *this)
{
  uint64_t v2 = 24;
  uint64_t v3 = (uint64_t *)this;
  do
  {
    uint64_t result = *((void *)this + 32);
    if (!*(_DWORD *)(result + 2648))
    {
      if (v3[70])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(result, v3 + 70);
        v3[70] = 0;
      }
      if (v3[598])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 598);
        v3[598] = 0;
      }
    }
    if (v3[1478])
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 1478);
      v3[1478] = 0;
    }
    v3 += 22;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t *CAHDecDahliaAvc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = 0;
  int v4 = this + 2006;
  do
  {
    if (v4[v3])
    {
      this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], &v4[v3]);
      v4[v3] = 0;
    }
    v3 += 22;
  }
  while (v3 != 88);
  if (v2[2094])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 2094);
    v2[2094] = 0;
  }
  if (v2[1456])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1456);
    v2[1456] = 0;
  }
  if (v2[2116])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 2116);
    v2[2116] = 0;
  }
  if (v2[2138])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 2138);
    v2[2138] = 0;
  }
  if (v2[2160])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 2160);
    v2[2160] = 0;
  }
  if (v2[2182])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 2182);
    v2[2182] = 0;
  }
  if (v2[2204])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 2204);
    v2[2204] = 0;
  }
  return this;
}

uint64_t CAHDecDahliaAvc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 9008;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 17824) = a2;
  return this;
}

uint64_t CAHDecDahliaAvc::decodeBuffer(CAHDecDahliaAvc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecDahliaAvc::decodeBufferSize(CAHDecDahliaAvc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecDahliaAvc::decHdrYLinAddr(CAHDecDahliaAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 70);
}

uint64_t CAHDecDahliaAvc::decHdrCLinAddr(CAHDecDahliaAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 598);
}

uint64_t CAHDecDahliaAvc::decHdrYSize(CAHDecDahliaAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 151);
}

uint64_t CAHDecDahliaAvc::decHdrCSize(CAHDecDahliaAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 1207);
}

uint64_t CAHDecDahliaAvc::decHdrYStride(CAHDecDahliaAvc *this)
{
  return *((unsigned int *)this + 4454);
}

uint64_t CAHDecDahliaAvc::decHdrCStride(CAHDecDahliaAvc *this)
{
  return *((unsigned int *)this + 4455);
}

uint64_t LGH_Syntax::uncompressed_header(LGH_Syntax *this)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  int bits = LGH_Syntax::get_bits(this, "frame_maker", 2u);
  if (bits != 2)
  {
    if ((*((unsigned char *)this + 7886) & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
    int v9 = bits;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)long long buf = 136315394;
    int v55 = "uncompressed_header";
    __int16 v56 = 1024;
    int v57 = v9;
    uint64_t v7 = &_os_log_internal;
    unsigned int v8 = "AppleAVD: %s: frame marker expect 2 got %x\n";
LABEL_11:
    uint32_t v10 = 18;
LABEL_12:
    _os_log_impl(&dword_223977000, v7, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    return 0xFFFFFFFFLL;
  }
  char v3 = LGH_Syntax::get_bits(this, "profile_low", 1u);
  unsigned __int8 v4 = v3 | (2 * LGH_Syntax::get_bits(this, "profile_high", 1u));
  *(unsigned char *)(*((void *)this + 10) + 72) = v4;
  if (v4 >= 3u)
  {
    char v5 = LGH_Syntax::get_bits(this, "profile_more", 1u);
    uint64_t v6 = *((void *)this + 10);
    unsigned __int8 v4 = *(unsigned char *)(v6 + 72) + v5;
    *(unsigned char *)(v6 + 72) = v4;
  }
  if (v4 >= 4u)
  {
    if ((*((unsigned char *)this + 7886) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)long long buf = 136315394;
    int v55 = "uncompressed_header";
    __int16 v56 = 1024;
    int v57 = v4;
    uint64_t v7 = &_os_log_internal;
    unsigned int v8 = "AppleAVD: %s: unsupported profile %d\n";
    goto LABEL_11;
  }
  char v12 = LGH_Syntax::get_bits(this, "show_existing_frame", 1u);
  int v13 = (unsigned char *)*((void *)this + 10);
  *int v13 = v12;
  if (v12 == 1)
  {
    char v14 = LGH_Syntax::get_bits(this, "frame_to_show_map_idx", 3u);
    uint64_t result = 0;
    uint64_t v15 = *((void *)this + 10);
    *(unsigned char *)(v15 + 1) = v14;
    *(_WORD *)(v15 + 2) = 0;
    *(unsigned char *)(v15 + 4) = 0;
    *(unsigned char *)(v15 + 26) = 0;
    *(unsigned char *)(v15 + 6) = 1;
    return result;
  }
  *((_DWORD *)this + 22) = v13[5];
  *(unsigned char *)(*((void *)this + 10) + 5) = LGH_Syntax::get_bits(this, "frame_type", 1u);
  *(unsigned char *)(*((void *)this + 10) + 6) = LGH_Syntax::get_bits(this, "show_frame", 1u);
  unsigned __int8 v16 = LGH_Syntax::get_bits(this, "error_resilient_mode", 1u);
  uint64_t v17 = (unsigned char *)*((void *)this + 10);
  _DWORD v17[7] = v16;
  if (!v17[5])
  {
    if (LGH_Syntax::frame_sync_code(this) || LGH_Syntax::color_config(this)) {
      return 0xFFFFFFFFLL;
    }
    LGH_Syntax::frame_size(this);
    LGH_Syntax::render_size(this);
    int v20 = (unsigned char *)*((void *)this + 10);
    v20[4] = -1;
    v20[74] = 1;
    goto LABEL_38;
  }
  if (v17[6])
  {
    int v18 = 0;
    int v19 = v16;
    v17[8] = 0;
  }
  else
  {
    unsigned __int8 v21 = LGH_Syntax::get_bits(this, "intra_only", 1u);
    int v18 = v21;
    uint64_t v17 = (unsigned char *)*((void *)this + 10);
    v17[8] = v21;
    int v19 = v17[7];
  }
  v17[74] = v18;
  if (!v19)
  {
    char v23 = LGH_Syntax::get_bits(this, "reset_frame_context", 2u);
    uint64_t v24 = *((void *)this + 10);
    *(unsigned char *)(v24 + 13) = v23;
    if (*(unsigned char *)(v24 + 74)) {
      goto LABEL_25;
    }
LABEL_30:
    uint64_t v25 = 0;
    *(unsigned char *)(*((void *)this + 10) + 4) = LGH_Syntax::get_bits(this, "refresh_frame_flags", 8u);
    do
    {
      *(unsigned char *)(*((void *)this + 10) + v25 + 14) = LGH_Syntax::get_bits(this, "ref_frame_idx", 3u);
      *(unsigned char *)(*((void *)this + 10) + v25++ + 18) = LGH_Syntax::get_bits(this, "ref_frame_sign_bias", 1u);
    }
    while (v25 != 3);
    LGH_Syntax::frame_size_with_refs(this);
    *(unsigned char *)(*((void *)this + 10) + 21) = LGH_Syntax::get_bits(this, "allow_high_precision_mv", 1u);
    if (LGH_Syntax::get_bits(this, "is_filter_switchable", 1u)) {
      LOBYTE(v26) = 4;
    }
    else {
      int v26 = literal_to_type[LGH_Syntax::get_bits(this, "raw_interpolation_filter", 2u)];
    }
    int v20 = (unsigned char *)*((void *)this + 10);
    v20[22] = v26;
    goto LABEL_38;
  }
  v17[13] = 0;
  if (!v18) {
    goto LABEL_30;
  }
LABEL_25:
  if (LGH_Syntax::frame_sync_code(this)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v22 = *((void *)this + 10);
  if (*(unsigned char *)(v22 + 72))
  {
    if (LGH_Syntax::color_config(this)) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(_DWORD *)(v22 + 9) = 16842753;
    *(unsigned char *)(v22 + 73) = 8;
  }
  *(unsigned char *)(*((void *)this + 10) + 4) = LGH_Syntax::get_bits(this, "refresh_frame_flags", 8u);
  LGH_Syntax::frame_size(this);
  LGH_Syntax::render_size(this);
  int v20 = (unsigned char *)*((void *)this + 10);
LABEL_38:
  if (v20[7])
  {
    v20[23] = 0;
    char v27 = 1;
  }
  else
  {
    *(unsigned char *)(*((void *)this + 10) + 23) = LGH_Syntax::get_bits(this, "refresh_frame_context", 1u);
    char v27 = LGH_Syntax::get_bits(this, "frame_parallel_decoding_mode", 1u);
    int v20 = (unsigned char *)*((void *)this + 10);
  }
  v20[24] = v27;
  char v28 = LGH_Syntax::get_bits(this, "frame_context_idx", 2u);
  uint64_t v29 = *((void *)this + 10);
  *(unsigned char *)(v29 + 25) = v28;
  if (*(unsigned char *)(v29 + 74) || *(unsigned char *)(v29 + 7))
  {
    uint64_t v30 = 0;
    for (uint64_t i = 0; i != 8; ++i)
    {
      uint64_t v32 = v30;
      uint64_t v33 = 4;
      do
      {
        *(unsigned char *)(v29 + v32 + 173) = 0;
        uint64_t v29 = *((void *)this + 10);
        *(_WORD *)(v29 + 2 * v32++ + 206) = 0;
        --v33;
      }
      while (v33);
      v30 += 4;
    }
    *(unsigned char *)(v29 + 60) = 0;
    *(_WORD *)(v29 + 28) = 257;
    *(unsigned char *)(v29 + 34) = 1;
    *(unsigned char *)(*((void *)this + 10) + 35) = 0;
    *(unsigned char *)(*((void *)this + 10) + 36) = -1;
    *(unsigned char *)(*((void *)this + 10) + 37) = -1;
    *(unsigned char *)(*((void *)this + 10) + 40) = 0;
    *(unsigned char *)(*((void *)this + 10) + 41) = 0;
    for (uint64_t j = 17; j != 21; ++j)
      *(unsigned char *)(*((void *)this + 10) + j) = 0;
    int v35 = (unsigned char *)*((void *)this + 10);
    if (!v35[5] || v35[7] == 1) {
      goto LABEL_53;
    }
    int v36 = v35[13];
    if (v36 == 2)
    {
      LGH_Syntax::save_probs_default(this, v35[25]);
      int v35 = (unsigned char *)*((void *)this + 10);
    }
    else if (v36 == 3)
    {
LABEL_53:
      uint64_t v53 = (unsigned char *)*((void *)this + 10);
      unsigned int v37 = (char *)this + 1710;
      uint64_t v38 = 4;
      do
      {
        unsigned int v39 = v37 - 1606;
        *(void *)unsigned int v39 = -1;
        *((_DWORD *)v39 + 2) = 1113915391;
        *(void *)(v37 - 1594) = 0x5258803650F9814;
        *((_WORD *)v37 - 793) = 3380;
        memcpy(v37 - 1584, &default_coef_probs, 0x630uLL);
        *(_WORD *)unsigned int v37 = -32576;
        v37[2] = 64;
        *(_OWORD *)(v37 + 3) = default_inter_mode_probs;
        *((void *)v37 + 2) = 0x1E1D191F51112E40;
        *((void *)v37 + 3) = 0x90950322FF24A2EBLL;
        *((void *)v37 + 4) = 0x6077B7EFE1BB6609;
        v37[40] = 41;
        *(_WORD *)(v37 + 49) = -2066;
        *(void *)(v37 + 41) = 0xAAAC8E8E4A4D1021;
        *(_DWORD *)(v37 + 51) = -579109326;
        v37[55] = -30;
        *((_DWORD *)v37 + 22) = 492134521;
        *(_OWORD *)(v37 + 72) = xmmword_223ADB95A;
        *(_OWORD *)(v37 + 56) = default_y_mode_prob;
        *(_OWORD *)(v37 + 124) = xmmword_223ADB98E;
        *(_OWORD *)(v37 + 140) = xmmword_223ADB99E;
        *(_OWORD *)(v37 + 156) = xmmword_223ADB9AE;
        *(_OWORD *)(v37 + 166) = *(long long *)((char *)&xmmword_223ADB9AE + 10);
        *(_OWORD *)(v37 + 92) = default_uv_mode_prob;
        *(_OWORD *)(v37 + 108) = xmmword_223ADB97E;
        *(_OWORD *)(v37 + 182) = default_partition_prob;
        *(_OWORD *)(v37 + 198) = xmmword_223ADB9D8;
        *(_OWORD *)(v37 + 214) = xmmword_223ADB9E8;
        v37[232] = 96;
        *((_WORD *)v37 + 115) = 16416;
        *(_OWORD *)(v37 + 261) = *(long long *)((char *)&xmmword_223ADBA0B + 12);
        *(_OWORD *)(v37 + 249) = xmmword_223ADBA0B;
        *(_OWORD *)(v37 + 233) = default_mv_probs1;
        *(_WORD *)(v37 + 293) = 16480;
        *(_OWORD *)(v37 + 277) = default_mv_probs2;
        uint64_t v40 = v37 + 295;
        v37 += 1905;
        *uint64_t v40 = -2136964960;
        --v38;
      }
      while (v38);
      int v35 = v53;
    }
    v35[25] = 0;
  }
  LGH_Syntax::loop_filter_params(this);
  LGH_Syntax::quantization_params(this);
  LGH_Syntax::segmentation_params(this);
  unsigned int v41 = *(_DWORD *)(*((void *)this + 10) + 92);
  unsigned int v42 = -1;
  do
    ++v42;
  while (64 << v42 < v41);
  unsigned int v43 = -1;
  do
    unsigned int v44 = v41 >> (v43++ + 2);
  while (v44 > 3);
  if (v42 <= v43) {
    unsigned int v45 = v43;
  }
  else {
    unsigned int v45 = v42;
  }
  while (v45 != v42)
  {
    ++v42;
    if (LGH_Syntax::get_bits(this, "increment_tile_cols_log2", 1u) != 1)
    {
      unsigned int v45 = v42 - 1;
      break;
    }
  }
  *(_DWORD *)(*((void *)this + 10) + 64) = v45;
  int v46 = LGH_Syntax::get_bits(this, "tile_rows_log2", 1u);
  if (v46 == 1) {
    int v46 = LGH_Syntax::get_bits(this, "increment_tile_rows_log2", 1u) + 1;
  }
  *(_DWORD *)(*((void *)this + 10) + 68) = v46;
  __int16 v47 = LGH_Syntax::get_bits(this, "header_size_in_bytes", 0x10u);
  uint64_t v48 = *((void *)this + 10);
  *(_WORD *)(v48 + 2) = v47;
  if (!v47)
  {
    if ((*((unsigned char *)this + 7886) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)long long buf = 136315138;
    int v55 = "uncompressed_header";
    uint64_t v7 = &_os_log_internal;
    unsigned int v8 = "AppleAVD: %s: 0 byte header size\n";
    uint32_t v10 = 12;
    goto LABEL_12;
  }
  uint64_t v49 = 0;
  unsigned int v50 = *(unsigned __int8 *)(v48 + 4);
  do
  {
    if (v50)
    {
      uint64_t v51 = v48 + v49;
      int v52 = *(_DWORD *)(v48 + 80);
      *(_DWORD *)(v51 + 108) = *(_DWORD *)(v48 + 76);
      *(_DWORD *)(v51 + 140) = v52;
    }
    uint64_t result = 0;
    v50 >>= 1;
    v49 += 4;
  }
  while (v49 != 32);
  return result;
}

uint64_t LGH_Syntax::frame_sync_code(LGH_Syntax *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int bits = LGH_Syntax::get_bits(this, "sync_byte_0", 8u);
  int v3 = LGH_Syntax::get_bits(this, "sync_byte_1", 8u);
  int v4 = LGH_Syntax::get_bits(this, "sync_byte_2", 8u);
  int v5 = v4;
  if (bits == 73 && v3 == 131 && v4 == 66) {
    return 0;
  }
  if ((*((unsigned char *)this + 7886) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136316674;
    unsigned int v8 = "frame_sync_code";
    __int16 v9 = 1024;
    int v10 = 73;
    __int16 v11 = 1024;
    int v12 = 131;
    __int16 v13 = 1024;
    int v14 = 66;
    __int16 v15 = 1024;
    int v16 = bits;
    __int16 v17 = 1024;
    int v18 = v3;
    __int16 v19 = 1024;
    int v20 = v5;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect %02x-%02x-%02x got %02x-%02x-%02x\n", (uint8_t *)&v7, 0x30u);
  }
  return 0xFFFFFFFFLL;
}

uint64_t LGH_Syntax::color_config(LGH_Syntax *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 10);
  if (*(unsigned __int8 *)(v2 + 72) < 2u)
  {
    char v3 = 8;
  }
  else
  {
    if (LGH_Syntax::get_bits(this, "ten_or_twelve_bit", 1u)) {
      char v3 = 12;
    }
    else {
      char v3 = 10;
    }
    uint64_t v2 = *((void *)this + 10);
  }
  *(unsigned char *)(v2 + 73) = v3;
  char bits = LGH_Syntax::get_bits(this, "color_space", 3u);
  uint64_t v5 = *((void *)this + 10);
  *(unsigned char *)(v5 + 9) = bits;
  if (bits == 7)
  {
    *(unsigned char *)(v5 + 10) = 1;
    if ((*(unsigned __int8 *)(v5 + 72) | 2) == 3)
    {
      *(_WORD *)(v5 + 11) = 0;
      uint64_t result = LGH_Syntax::get_bits(this, "reserved_zero", 1u);
      if (!result) {
        return result;
      }
      if ((*((unsigned char *)this + 7886) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v10 = 136315138;
      __int16 v11 = "color_config";
      int v7 = &_os_log_internal;
LABEL_18:
      _os_log_impl(&dword_223977000, v7, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: none zero reserved bit\n", (uint8_t *)&v10, 0xCu);
      return 0xFFFFFFFFLL;
    }
    return 0;
  }
  else
  {
    char v8 = LGH_Syntax::get_bits(this, "color_range", 1u);
    uint64_t v9 = *((void *)this + 10);
    *(unsigned char *)(v9 + 10) = v8;
    if ((*(unsigned __int8 *)(v9 + 72) | 2) == 3)
    {
      *(unsigned char *)(*((void *)this + 10) + 11) = LGH_Syntax::get_bits(this, "subsampling_x", 1u);
      *(unsigned char *)(*((void *)this + 10) + 12) = LGH_Syntax::get_bits(this, "subsampling_y", 1u);
      uint64_t result = LGH_Syntax::get_bits(this, "reserved_zero", 1u);
      if (!result) {
        return result;
      }
      if ((*((unsigned char *)this + 7886) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v10 = 136315138;
      __int16 v11 = "color_config";
      int v7 = &_os_log_internal;
      goto LABEL_18;
    }
    uint64_t result = 0;
    *(_WORD *)(v9 + 11) = 257;
  }
  return result;
}

uint64_t LGH_Syntax::frame_size(LGH_Syntax *this)
{
  *(_DWORD *)(*((void *)this + 10) + 76) = LGH_Syntax::get_bits(this, "FrameWidth", 0x10u) + 1;
  uint64_t result = LGH_Syntax::get_bits(this, "FrameHeight", 0x10u);
  char v3 = (_DWORD *)*((void *)this + 10);
  unsigned int v4 = (v3[19] + 7) >> 3;
  v3[20] = result + 1;
  v3[21] = v4;
  unsigned int v5 = (result + 8) >> 3;
  v3[22] = v5;
  v3[23] = (v4 + 7) >> 3;
  v3[24] = (v5 + 7) >> 3;
  return result;
}

uint64_t LGH_Syntax::render_size(LGH_Syntax *this)
{
  uint64_t result = LGH_Syntax::get_bits(this, "render_and_frame_size_different", 1u);
  if (result)
  {
    *(_DWORD *)(*((void *)this + 10) + 100) = LGH_Syntax::get_bits(this, "renderWidth", 0x10u) + 1;
    uint64_t result = LGH_Syntax::get_bits(this, "renderHeight", 0x10u);
    int v3 = result + 1;
    unsigned int v4 = (_DWORD *)*((void *)this + 10);
  }
  else
  {
    unsigned int v4 = (_DWORD *)*((void *)this + 10);
    int v3 = v4[20];
    v4[25] = v4[19];
  }
  v4[26] = v3;
  return result;
}

uint64_t LGH_Syntax::frame_size_with_refs(LGH_Syntax *this)
{
  uint64_t v2 = 14;
  do
  {
    int bits = LGH_Syntax::get_bits(this, "found_ref", 1u);
    if (bits == 1)
    {
      unsigned int v4 = (_DWORD *)*((void *)this + 10);
      int v5 = v4[*((unsigned __int8 *)v4 + v2) + 27];
      v4[19] = v5;
      int v6 = v4[*((unsigned __int8 *)v4 + v2) + 35];
      v4[20] = v6;
      goto LABEL_7;
    }
    ++v2;
  }
  while (v2 != 17);
  if (bits)
  {
    unsigned int v4 = (_DWORD *)*((void *)this + 10);
    int v5 = v4[19];
    int v6 = v4[20];
LABEL_7:
    unsigned int v7 = (v5 + 7) >> 3;
    v4[21] = v7;
    unsigned int v8 = v6 + 7;
    goto LABEL_8;
  }
  *(_DWORD *)(*((void *)this + 10) + 76) = LGH_Syntax::get_bits(this, "FrameWidth", 0x10u) + 1;
  int v13 = LGH_Syntax::get_bits(this, "FrameHeight", 0x10u);
  unsigned int v4 = (_DWORD *)*((void *)this + 10);
  unsigned int v7 = (v4[19] + 7) >> 3;
  v4[20] = v13 + 1;
  v4[21] = v7;
  unsigned int v8 = v13 + 8;
LABEL_8:
  unsigned int v9 = v8 >> 3;
  v4[22] = v9;
  v4[23] = (v7 + 7) >> 3;
  v4[24] = (v9 + 7) >> 3;
  uint64_t result = LGH_Syntax::get_bits(this, "render_and_frame_size_different", 1u);
  if (result)
  {
    *(_DWORD *)(*((void *)this + 10) + 100) = LGH_Syntax::get_bits(this, "renderWidth", 0x10u) + 1;
    uint64_t result = LGH_Syntax::get_bits(this, "renderHeight", 0x10u);
    int v11 = result + 1;
    uint64_t v12 = (_DWORD *)*((void *)this + 10);
  }
  else
  {
    uint64_t v12 = (_DWORD *)*((void *)this + 10);
    int v11 = v12[20];
    v12[25] = v12[19];
  }
  v12[26] = v11;
  return result;
}

double LGH_Syntax::save_probs_default(LGH_Syntax *this, unsigned int a2)
{
  uint64_t v2 = (char *)this + 1905 * a2;
  *((void *)v2 + 13) = -1;
  *((_DWORD *)v2 + 28) = 1113915391;
  *(void *)(v2 + 116) = 0x5258803650F9814;
  *((_WORD *)v2 + 62) = 3380;
  memcpy(v2 + 126, &default_coef_probs, 0x630uLL);
  *((_WORD *)v2 + 855) = -32576;
  v2[1712] = 64;
  *(_OWORD *)(v2 + 1713) = default_inter_mode_probs;
  *(void *)(v2 + 1726) = 0x1E1D191F51112E40;
  *(void *)(v2 + 1734) = 0x90950322FF24A2EBLL;
  *(void *)(v2 + 1742) = 0x6077B7EFE1BB6609;
  v2[1750] = 41;
  *(_WORD *)(v2 + 1759) = -2066;
  *(void *)(v2 + 1751) = 0xAAAC8E8E4A4D1021;
  *(_DWORD *)(v2 + 1761) = -579109326;
  v2[1765] = -30;
  *(_DWORD *)(v2 + 1798) = 492134521;
  *(_OWORD *)(v2 + 1766) = default_y_mode_prob;
  *(_OWORD *)(v2 + 1782) = xmmword_223ADB95A;
  *(_OWORD *)(v2 + 1802) = default_uv_mode_prob;
  *(_OWORD *)(v2 + 1818) = xmmword_223ADB97E;
  *(_OWORD *)(v2 + 1876) = *(long long *)((char *)&xmmword_223ADB9AE + 10);
  *(_OWORD *)(v2 + 1866) = xmmword_223ADB9AE;
  *(_OWORD *)(v2 + 1834) = xmmword_223ADB98E;
  *(_OWORD *)(v2 + 1850) = xmmword_223ADB99E;
  *(_OWORD *)(v2 + 1924) = xmmword_223ADB9E8;
  *(_OWORD *)(v2 + 1892) = default_partition_prob;
  *(_OWORD *)(v2 + 1908) = xmmword_223ADB9D8;
  v2[1942] = 96;
  *((_WORD *)v2 + 970) = 16416;
  *(_OWORD *)(v2 + 1943) = default_mv_probs1;
  *(_OWORD *)(v2 + 1959) = xmmword_223ADBA0B;
  *(_OWORD *)(v2 + 1971) = *(long long *)((char *)&xmmword_223ADBA0B + 12);
  *(_WORD *)(v2 + 2003) = 16480;
  double result = *(double *)&default_mv_probs2;
  *(_OWORD *)(v2 + 1987) = default_mv_probs2;
  *(_DWORD *)(v2 + 2005) = -2136964960;
  return result;
}

uint64_t LGH_Syntax::loop_filter_params(LGH_Syntax *this)
{
  *(unsigned char *)(*((void *)this + 10) + 26) = LGH_Syntax::get_bits(this, "loop_filter_level", 6u);
  *(unsigned char *)(*((void *)this + 10) + 27) = LGH_Syntax::get_bits(this, "loop_filter_sharpness", 3u);
  uint64_t result = LGH_Syntax::get_bits(this, "loop_filter_delta_enabled", 1u);
  *(_WORD *)(*((void *)this + 10) + 28) = result;
  if (result == 1)
  {
    uint64_t result = LGH_Syntax::get_bits(this, "loop_filter_delta_update", 1u);
    *(unsigned char *)(*((void *)this + 10) + 29) = result;
    if ((_BYTE)result)
    {
      for (uint64_t i = 0; i != 4; ++i)
      {
        *(unsigned char *)(*((void *)this + 10) + i + 30) = LGH_Syntax::get_bits(this, "update_ref_delta", 1u);
        if (*(unsigned char *)(*((void *)this + 10) + i + 30) == 1)
        {
          int bits = LGH_Syntax::get_bits(this, "loop_filter_ref_deltas", 6u);
          if (LGH_Syntax::get_bits(this, "sign", 1u)) {
            int v5 = -bits;
          }
          else {
            LOBYTE(v5) = bits;
          }
          *(unsigned char *)(*((void *)this + 10) + i + 34) = v5;
        }
      }
      uint64_t v6 = 0;
      char v7 = 1;
      do
      {
        char v8 = v7;
        uint64_t result = LGH_Syntax::get_bits(this, "update_mode_delta", 1u);
        *(unsigned char *)(*((void *)this + 10) + v6 + 38) = result;
        if (*(unsigned char *)(*((void *)this + 10) + v6 + 38) == 1)
        {
          int v9 = LGH_Syntax::get_bits(this, "loop_filter_mode_deltas", 6u);
          uint64_t result = LGH_Syntax::get_bits(this, "sign", 1u);
          if (result) {
            int v10 = -v9;
          }
          else {
            LOBYTE(v10) = v9;
          }
          *(unsigned char *)(*((void *)this + 10) + v6 + 40) = v10;
        }
        char v7 = 0;
        uint64_t v6 = 1;
      }
      while ((v8 & 1) != 0);
    }
  }
  return result;
}

uint64_t LGH_Syntax::quantization_params(LGH_Syntax *this)
{
  *(unsigned char *)(*((void *)this + 10) + 42) = LGH_Syntax::get_bits(this, "base_q_idx", 8u);
  if (LGH_Syntax::get_bits(this, "delta_coded", 1u) == 1)
  {
    int bits = LGH_Syntax::get_bits(this, "delta_q", 4u);
    if (LGH_Syntax::get_bits(this, "sign", 1u)) {
      int v3 = -bits;
    }
    else {
      LOBYTE(v3) = bits;
    }
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  *(unsigned char *)(*((void *)this + 10) + 43) = v3;
  if (LGH_Syntax::get_bits(this, "delta_coded", 1u) == 1)
  {
    int v4 = LGH_Syntax::get_bits(this, "delta_q", 4u);
    if (LGH_Syntax::get_bits(this, "sign", 1u)) {
      int v5 = -v4;
    }
    else {
      LOBYTE(v5) = v4;
    }
  }
  else
  {
    LOBYTE(v5) = 0;
  }
  *(unsigned char *)(*((void *)this + 10) + 44) = v5;
  uint64_t result = LGH_Syntax::get_bits(this, "delta_coded", 1u);
  if (result == 1)
  {
    int v7 = LGH_Syntax::get_bits(this, "delta_q", 4u);
    uint64_t result = LGH_Syntax::get_bits(this, "sign", 1u);
    if (result) {
      int v8 = -v7;
    }
    else {
      LOBYTE(v8) = v7;
    }
    int v9 = v8;
  }
  else
  {
    int v9 = 0;
  }
  int v10 = (unsigned char *)*((void *)this + 10);
  v10[45] = v9;
  BOOL v11 = !v10[42] && !v10[43] && (v10[44] | v9) == 0;
  v10[172] = v11;
  return result;
}

uint64_t LGH_Syntax::segmentation_params(LGH_Syntax *this)
{
  uint64_t result = LGH_Syntax::get_bits(this, "segmentation_enabled", 1u);
  uint64_t v3 = *((void *)this + 10);
  *(_WORD *)(v3 + 46) = result;
  *(unsigned char *)(v3 + 59) = 0;
  if ((_BYTE)result)
  {
    char bits = LGH_Syntax::get_bits(this, "segmentation_update_map", 1u);
    *(unsigned char *)(*((void *)this + 10) + 47) = bits;
    if (bits == 1)
    {
      for (uint64_t i = 0; i != 7; ++i)
      {
        if (LGH_Syntax::get_bits(this, "prob_coded", 1u)) {
          char v6 = LGH_Syntax::get_bits(this, "prob", 8u);
        }
        else {
          char v6 = -1;
        }
        *(unsigned char *)(*((void *)this + 12) + i) = v6;
        *(unsigned char *)(*((void *)this + 10) + i + 48) = v6;
      }
      uint64_t v7 = 0;
      *(unsigned char *)(*((void *)this + 10) + 55) = LGH_Syntax::get_bits(this, "segmentation_temporal_update", 1u);
      do
      {
        if (*(unsigned char *)(*((void *)this + 10) + 55) && LGH_Syntax::get_bits(this, "prob_coded", 1u)) {
          char v8 = LGH_Syntax::get_bits(this, "prob", 8u);
        }
        else {
          char v8 = -1;
        }
        *(unsigned char *)(*((void *)this + 12) + v7 + 7) = v8;
        *(unsigned char *)(*((void *)this + 10) + v7++ + 56) = v8;
      }
      while (v7 != 3);
    }
    uint64_t result = LGH_Syntax::get_bits(this, "segmentation_update_data", 1u);
    *(unsigned char *)(*((void *)this + 10) + 59) = result;
    if (result == 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      *(unsigned char *)(*((void *)this + 10) + 60) = LGH_Syntax::get_bits(this, "segmentation_abs_or_delta_update", 1u);
      do
      {
        unint64_t v11 = 0;
        uint64_t v12 = v9;
        int v13 = (unsigned int *)&segmentation_feature_bits;
        do
        {
          uint64_t result = LGH_Syntax::get_bits(this, "FeatureEnabled", 1u);
          *(unsigned char *)(*((void *)this + 10) + v12 + 173) = result;
          if (*(unsigned char *)(*((void *)this + 10) + v12 + 173))
          {
            uint64_t result = LGH_Syntax::get_bits(this, "feature_value", *v13);
            int v14 = result;
            if (v11 <= 1)
            {
              uint64_t result = LGH_Syntax::get_bits(this, "feature_sign", 1u);
              if (result) {
                int v14 = -v14;
              }
            }
          }
          else
          {
            LOWORD(v14) = 0;
          }
          *(_WORD *)(*((void *)this + 10) + 2 * v12 + 206) = v14;
          ++v11;
          ++v13;
          ++v12;
        }
        while (v11 != 4);
        ++v10;
        v9 += 4;
      }
      while (v10 != 8);
    }
  }
  return result;
}

__n128 LGH_Syntax::load_probs(LGH_Syntax *this, unsigned int a2)
{
  uint64_t v3 = (char *)this + 1905 * a2;
  memcpy((void *)(*((void *)this + 12) + 22), v3 + 126, 0x630uLL);
  uint64_t v4 = *((void *)this + 12) + 1609;
  uint64_t v5 = *(void *)(v3 + 1726);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)(v3 + 1713);
  *(void *)(v4 + 13) = v5;
  *(void *)(*((void *)this + 12) + 1630) = *(void *)(v3 + 1734);
  *(_DWORD *)(*((void *)this + 12) + 1638) = *(_DWORD *)(v3 + 1742);
  uint64_t v6 = *((void *)this + 12);
  LODWORD(v5) = *(_DWORD *)(v3 + 1746);
  *(unsigned char *)(v6 + 1646) = v3[1750];
  *(_DWORD *)(v6 + 1642) = v5;
  uint64_t v7 = *((void *)this + 12) + 1647;
  LOWORD(v5) = *(_WORD *)(v3 + 1759);
  *(void *)uint64_t v7 = *(void *)(v3 + 1751);
  *(_WORD *)(v7 + 8) = v5;
  uint64_t v8 = *((void *)this + 12);
  LODWORD(v5) = *(_DWORD *)(v3 + 1761);
  *(unsigned char *)(v8 + 1661) = v3[1765];
  *(_DWORD *)(v8 + 1657) = v5;
  uint64_t v9 = *((void *)this + 12) + 1662;
  LODWORD(v5) = *(_DWORD *)(v3 + 1798);
  long long v10 = *(_OWORD *)(v3 + 1782);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)(v3 + 1766);
  *(_OWORD *)(v9 + 16) = v10;
  *(_DWORD *)(v9 + 32) = v5;
  unint64_t v11 = (_OWORD *)(*((void *)this + 12) + 1698);
  long long v12 = *(_OWORD *)(v3 + 1834);
  long long v13 = *(_OWORD *)(v3 + 1850);
  long long v14 = *(_OWORD *)(v3 + 1866);
  *(_OWORD *)((char *)v11 + 74) = *(_OWORD *)(v3 + 1876);
  v11[3] = v13;
  v11[4] = v14;
  v11[2] = v12;
  long long v15 = *(_OWORD *)(v3 + 1818);
  *unint64_t v11 = *(_OWORD *)(v3 + 1802);
  v11[1] = v15;
  int v16 = (_OWORD *)(*((void *)this + 12) + 1788);
  long long v17 = *(_OWORD *)(v3 + 1892);
  long long v18 = *(_OWORD *)(v3 + 1924);
  v16[1] = *(_OWORD *)(v3 + 1908);
  unsigned int v16[2] = v18;
  *int v16 = v17;
  uint64_t v19 = *((void *)this + 12);
  char v20 = v3[1942];
  *(_WORD *)(v19 + 1836) = *((_WORD *)v3 + 970);
  *(unsigned char *)(v19 + 1838) = v20;
  uint64_t v21 = (_OWORD *)(*((void *)this + 12) + 1839);
  long long v22 = *(_OWORD *)(v3 + 1943);
  long long v23 = *(_OWORD *)(v3 + 1959);
  *(_OWORD *)((char *)v21 + 28) = *(_OWORD *)(v3 + 1971);
  *uint64_t v21 = v22;
  v21[1] = v23;
  uint64_t v24 = (__n128 *)(*((void *)this + 12) + 1883);
  LOWORD(v5) = *(_WORD *)(v3 + 2003);
  __n128 result = *(__n128 *)(v3 + 1987);
  *uint64_t v24 = result;
  v24[1].n128_u16[0] = v5;
  *(_DWORD *)(*((void *)this + 12) + 1901) = *(_DWORD *)(v3 + 2005);
  return result;
}

uint64_t LGH_Syntax::load_probs2(uint64_t this, unsigned int a2)
{
  uint64_t v2 = this + 1905 * a2;
  *(_WORD *)(*(void *)(this + 96) + 10) = *(_WORD *)(v2 + 114);
  *(_DWORD *)(*(void *)(this + 96) + 12) = *(_DWORD *)(v2 + 116);
  uint64_t v3 = *(void *)(this + 96);
  int v4 = *(_DWORD *)(v2 + 120);
  *(_WORD *)(v3 + 20) = *(_WORD *)(v2 + 124);
  *(_DWORD *)(v3 + 16) = v4;
  uint64_t v5 = *(void *)(this + 96);
  LOWORD(v4) = *(_WORD *)(v2 + 1710);
  *(unsigned char *)(v5 + 1608) = *(unsigned char *)(v2 + 1712);
  *(_WORD *)(v5 + 1606) = v4;
  return this;
}

void LGH_Syntax::load_probs_all(LGH_Syntax *this, unsigned int a2)
{
  LGH_Syntax::load_probs(this, a2);
  int v4 = (char *)this + 1905 * a2;
  *(_WORD *)(*((void *)this + 12) + 10) = *((_WORD *)v4 + 57);
  *(_DWORD *)(*((void *)this + 12) + 12) = *((_DWORD *)v4 + 29);
  uint64_t v5 = *((void *)this + 12);
  int v6 = *((_DWORD *)v4 + 30);
  *(_WORD *)(v5 + 20) = *((_WORD *)v4 + 62);
  *(_DWORD *)(v5 + 16) = v6;
  uint64_t v7 = *((void *)this + 12);
  LOWORD(v6) = *((_WORD *)v4 + 855);
  *(unsigned char *)(v7 + 1608) = v4[1712];
  *(_WORD *)(v7 + 1606) = v6;
}

uint64_t LGH_Syntax::compressed_header(LGH_Syntax *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned int v3 = *((_DWORD *)this + 15);
  int v2 = *((_DWORD *)this + 16);
  unsigned int v4 = ((v2 << 7) - 128) >> 8;
  unsigned int v5 = v4 + 1;
  if (v3 <= v4)
  {
    int v6 = *((_DWORD *)this + 15);
  }
  else
  {
    int v6 = v3 - v5;
    unsigned int v5 = v2 - v5;
    *((_DWORD *)this + 15) = v6;
  }
  *((_DWORD *)this + 16) = v5;
  if (v5 <= 0x7F)
  {
    do
    {
      int v7 = *((_DWORD *)this + 17) - 1;
      *((_DWORD *)this + 16) = 2 * v5;
      *((_DWORD *)this + 17) = v7;
      int v6 = LGH_Syntax::get_bits(this, "marker_bit", 1u) | (2 * v6);
      *((_DWORD *)this + 15) = v6;
      unsigned int v5 = *((_DWORD *)this + 16);
    }
    while (v5 < 0x80);
  }
  if (v3 <= v4)
  {
    LGH_Syntax::read_tx_mode((uint64_t)this);
    if (**((unsigned char **)this + 967) == 4) {
      LGH_Syntax::tx_mode_probs((uint64_t)this);
    }
    LGH_Syntax::read_coef_probs((uint64_t)this);
    LGH_Syntax::read_skip_probs((uint64_t)this);
    if (!*(unsigned char *)(*((void *)this + 10) + 74))
    {
      LGH_Syntax::read_inter_mode_probs((uint64_t)this);
      if (*(unsigned char *)(*((void *)this + 10) + 22) == 4) {
        LGH_Syntax::read_switchable_interp_prob((uint64_t)this);
      }
      LGH_Syntax::read_intra_inter_prob((uint64_t)this);
      LGH_Syntax::frame_reference_mode((uint64_t)this);
      LGH_Syntax::frame_reference_mode_probs((uint64_t)this);
      LGH_Syntax::read_y_mode_prob((uint64_t)this);
      LGH_Syntax::read_partition_prob((uint64_t)this);
      LGH_Syntax::mv_probs(this);
    }
    return 0;
  }
  else
  {
    if ((*((unsigned char *)this + 7886) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      long long v10 = "compressed_header";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: none zero marker bit\n", (uint8_t *)&v9, 0xCu);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t LGH_Syntax::read_tx_mode(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(*(void *)(this + 80) + 172) == 1)
  {
    **(unsigned char **)(this + 7736) = 0;
  }
  else
  {
    char v2 = 0;
    int v3 = 0;
    unsigned int v5 = *(_DWORD *)(this + 60);
    unsigned int v4 = *(_DWORD *)(this + 64);
    do
    {
      unsigned int v6 = (v4 << 7) - 128;
      int v7 = (v6 >> 8) + 1;
      if (v5 <= v6 >> 8)
      {
        char v8 = 0;
        unsigned int v4 = (v6 >> 8) + 1;
      }
      else
      {
        v4 -= v7;
        v5 -= v7;
        *(_DWORD *)(v1 + 60) = v5;
        char v8 = 1;
      }
      *(_DWORD *)(v1 + 64) = v4;
      if (v4 <= 0x7F)
      {
        do
        {
          int v9 = *(_DWORD *)(v1 + 68) - 1;
          *(_DWORD *)(v1 + 64) = 2 * v4;
          *(_DWORD *)(v1 + 68) = v9;
          this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "tx_mode", 1u);
          unsigned int v5 = this | (2 * v5);
          *(_DWORD *)(v1 + 60) = v5;
          unsigned int v4 = *(_DWORD *)(v1 + 64);
        }
        while (v4 < 0x80);
      }
      char v2 = v8 | (2 * v2);
      ++v3;
    }
    while (v3 != 2);
    long long v10 = *(unsigned char **)(v1 + 7736);
    unsigned char *v10 = v2;
    if (v2 == 3)
    {
      unsigned int v11 = (v4 << 7) - 128;
      unsigned int v12 = (v11 >> 8) + 1;
      if (v5 <= v11 >> 8)
      {
        char v13 = 0;
      }
      else
      {
        v5 -= v12;
        unsigned int v12 = v4 - v12;
        *(_DWORD *)(v1 + 60) = v5;
        char v13 = 1;
      }
      *(_DWORD *)(v1 + 64) = v12;
      if (v12 <= 0x7F)
      {
        do
        {
          int v14 = *(_DWORD *)(v1 + 68) - 1;
          *(_DWORD *)(v1 + 64) = 2 * v12;
          *(_DWORD *)(v1 + 68) = v14;
          this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "tx_mode_select", 1u);
          unsigned int v5 = this | (2 * v5);
          *(_DWORD *)(v1 + 60) = v5;
          unsigned int v12 = *(_DWORD *)(v1 + 64);
        }
        while (v12 < 0x80);
        long long v10 = *(unsigned char **)(v1 + 7736);
      }
      v10[1] = v13;
      *v10 += v13;
    }
  }
  return this;
}

uint64_t LGH_Syntax::tx_mode_probs(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    int v5 = *(unsigned __int8 *)(*(void *)(v1 + 96) + v2 + 10);
    unsigned int v7 = *(_DWORD *)(v1 + 60);
    int v6 = *(_DWORD *)(v1 + 64);
    unsigned int v8 = (252 * v6 - 252) >> 8;
    unsigned int v9 = v8 + 1;
    if (v7 <= v8)
    {
      int v10 = *(_DWORD *)(v1 + 60);
    }
    else
    {
      int v10 = v7 - v9;
      unsigned int v9 = v6 - v9;
      *(_DWORD *)(v1 + 60) = v10;
    }
    *(_DWORD *)(v1 + 64) = v9;
    if (v9 <= 0x7F)
    {
      do
      {
        int v11 = *(_DWORD *)(v1 + 68) - 1;
        *(_DWORD *)(v1 + 64) = 2 * v9;
        *(_DWORD *)(v1 + 68) = v11;
        this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
        int v10 = this | (2 * v10);
        *(_DWORD *)(v1 + 60) = v10;
        unsigned int v9 = *(_DWORD *)(v1 + 64);
      }
      while (v9 < 0x80);
    }
    if (v7 > v8)
    {
      this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
      unsigned int v12 = inv_map_table[this];
      int v13 = (char)(v5 - 1);
      int v14 = ~v5 + (v12 >> 1);
      if (v12) {
        int v14 = ~v5 - ((v12 + 1) >> 1);
      }
      if (v12 <= 2 * ~(_BYTE)v5) {
        unsigned __int8 v15 = v14;
      }
      else {
        unsigned __int8 v15 = inv_map_table[this];
      }
      int v16 = v13 + (v12 >> 1);
      if (v12) {
        int v16 = v13 - ((v12 + 1) >> 1);
      }
      if (v12 <= 2 * v13) {
        LOBYTE(v12) = v16;
      }
      char v17 = v12 + 1;
      if ((((_BYTE)v5 - 1) & 0x80) != 0) {
        LOBYTE(v5) = ~v15;
      }
      else {
        LOBYTE(v5) = v17;
      }
    }
    char v3 = 0;
    *(unsigned char *)(*(void *)(v1 + 96) + v2 + 10) = v5;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  uint64_t v18 = 0;
  char v19 = 1;
  do
  {
    uint64_t v20 = 0;
    char v52 = v19;
    char v21 = 1;
    do
    {
      char v22 = v21;
      int v23 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 2 * v18 + v20 + 12);
      unsigned int v25 = *(_DWORD *)(v1 + 60);
      int v24 = *(_DWORD *)(v1 + 64);
      unsigned int v26 = (252 * v24 - 252) >> 8;
      unsigned int v27 = v26 + 1;
      if (v25 <= v26)
      {
        int v28 = *(_DWORD *)(v1 + 60);
      }
      else
      {
        int v28 = v25 - v27;
        unsigned int v27 = v24 - v27;
        *(_DWORD *)(v1 + 60) = v28;
      }
      *(_DWORD *)(v1 + 64) = v27;
      if (v27 <= 0x7F)
      {
        do
        {
          int v29 = *(_DWORD *)(v1 + 68) - 1;
          *(_DWORD *)(v1 + 64) = 2 * v27;
          *(_DWORD *)(v1 + 68) = v29;
          this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
          int v28 = this | (2 * v28);
          *(_DWORD *)(v1 + 60) = v28;
          unsigned int v27 = *(_DWORD *)(v1 + 64);
        }
        while (v27 < 0x80);
      }
      if (v25 > v26)
      {
        this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
        unsigned int v30 = inv_map_table[this];
        int v31 = (char)(v23 - 1);
        int v32 = ~v23 + (v30 >> 1);
        if (v30) {
          int v32 = ~v23 - ((v30 + 1) >> 1);
        }
        if (v30 <= 2 * ~(_BYTE)v23) {
          unsigned __int8 v33 = v32;
        }
        else {
          unsigned __int8 v33 = inv_map_table[this];
        }
        int v34 = v31 + (v30 >> 1);
        if (v30) {
          int v34 = v31 - ((v30 + 1) >> 1);
        }
        if (v30 <= 2 * v31) {
          LOBYTE(v30) = v34;
        }
        char v35 = v30 + 1;
        if ((((_BYTE)v23 - 1) & 0x80) != 0) {
          LOBYTE(v23) = ~v33;
        }
        else {
          LOBYTE(v23) = v35;
        }
      }
      char v21 = 0;
      *(unsigned char *)(*(void *)(v1 + 96) + 2 * v18 + v20 + 12) = v23;
      uint64_t v20 = 1;
    }
    while ((v22 & 1) != 0);
    char v19 = 0;
    uint64_t v18 = 1;
  }
  while ((v52 & 1) != 0);
  uint64_t v36 = 0;
  char v37 = 1;
  do
  {
    uint64_t v38 = 0;
    char v53 = v37;
    do
    {
      int v39 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 3 * v36 + v38 + 16);
      unsigned int v41 = *(_DWORD *)(v1 + 60);
      int v40 = *(_DWORD *)(v1 + 64);
      unsigned int v42 = (252 * v40 - 252) >> 8;
      unsigned int v43 = v42 + 1;
      if (v41 <= v42)
      {
        int v44 = *(_DWORD *)(v1 + 60);
      }
      else
      {
        int v44 = v41 - v43;
        unsigned int v43 = v40 - v43;
        *(_DWORD *)(v1 + 60) = v44;
      }
      *(_DWORD *)(v1 + 64) = v43;
      if (v43 <= 0x7F)
      {
        do
        {
          int v45 = *(_DWORD *)(v1 + 68) - 1;
          *(_DWORD *)(v1 + 64) = 2 * v43;
          *(_DWORD *)(v1 + 68) = v45;
          this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
          int v44 = this | (2 * v44);
          *(_DWORD *)(v1 + 60) = v44;
          unsigned int v43 = *(_DWORD *)(v1 + 64);
        }
        while (v43 < 0x80);
      }
      if (v41 > v42)
      {
        this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
        unsigned int v46 = inv_map_table[this];
        int v47 = (char)(v39 - 1);
        int v48 = ~v39 + (v46 >> 1);
        if (v46) {
          int v48 = ~v39 - ((v46 + 1) >> 1);
        }
        if (v46 <= 2 * ~(_BYTE)v39) {
          unsigned __int8 v49 = v48;
        }
        else {
          unsigned __int8 v49 = inv_map_table[this];
        }
        int v50 = v47 + (v46 >> 1);
        if (v46) {
          int v50 = v47 - ((v46 + 1) >> 1);
        }
        if (v46 <= 2 * v47) {
          LOBYTE(v46) = v50;
        }
        char v51 = v46 + 1;
        if ((((_BYTE)v39 - 1) & 0x80) != 0) {
          LOBYTE(v39) = ~v49;
        }
        else {
          LOBYTE(v39) = v51;
        }
      }
      *(unsigned char *)(*(void *)(v1 + 96) + 3 * v36 + v38++ + 16) = v39;
    }
    while (v38 != 3);
    char v37 = 0;
    uint64_t v36 = 1;
  }
  while ((v53 & 1) != 0);
  return this;
}

uint64_t LGH_Syntax::read_coef_probs(uint64_t this)
{
  uint64_t v1 = this;
  unsigned int v103 = tx_mode_to_biggest_tx_size[**(unsigned __int8 **)(this + 7736)];
  unsigned int v104 = 0;
  do
  {
    unsigned int v3 = *(_DWORD *)(v1 + 60);
    int v2 = *(_DWORD *)(v1 + 64);
    unsigned int v4 = ((v2 << 7) - 128) >> 8;
    unsigned int v5 = v4 + 1;
    if (v3 <= v4)
    {
      int v6 = *(_DWORD *)(v1 + 60);
    }
    else
    {
      int v6 = v3 - v5;
      unsigned int v5 = v2 - v5;
      *(_DWORD *)(v1 + 60) = v6;
    }
    *(_DWORD *)(v1 + 64) = v5;
    if (v5 <= 0x7F)
    {
      do
      {
        int v7 = *(_DWORD *)(v1 + 68) - 1;
        *(_DWORD *)(v1 + 64) = 2 * v5;
        *(_DWORD *)(v1 + 68) = v7;
        this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_probs", 1u);
        int v6 = this | (2 * v6);
        *(_DWORD *)(v1 + 60) = v6;
        unsigned int v5 = *(_DWORD *)(v1 + 64);
      }
      while (v5 < 0x80);
    }
    if (v3 > v4)
    {
      uint64_t v8 = 0;
      unsigned int v9 = v104;
      char v10 = 1;
      do
      {
        uint64_t v11 = 0;
        char v105 = v10;
        char v12 = 1;
        do
        {
          uint64_t v13 = 0;
          char v106 = v12;
          do
          {
            for (uint64_t i = 0; i != 3; ++i)
            {
              int v15 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 396 * v9 + 198 * v8 + 99 * v11 + 3 * v13 + i + 22);
              unsigned int v17 = *(_DWORD *)(v1 + 60);
              int v16 = *(_DWORD *)(v1 + 64);
              unsigned int v18 = (252 * v16 - 252) >> 8;
              unsigned int v19 = v18 + 1;
              if (v17 <= v18)
              {
                int v20 = *(_DWORD *)(v1 + 60);
              }
              else
              {
                int v20 = v17 - v19;
                unsigned int v19 = v16 - v19;
                *(_DWORD *)(v1 + 60) = v20;
              }
              *(_DWORD *)(v1 + 64) = v19;
              if (v19 <= 0x7F)
              {
                do
                {
                  int v21 = *(_DWORD *)(v1 + 68) - 1;
                  *(_DWORD *)(v1 + 64) = 2 * v19;
                  *(_DWORD *)(v1 + 68) = v21;
                  this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
                  int v20 = this | (2 * v20);
                  *(_DWORD *)(v1 + 60) = v20;
                  unsigned int v19 = *(_DWORD *)(v1 + 64);
                }
                while (v19 < 0x80);
              }
              if (v17 > v18)
              {
                this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
                unsigned int v22 = inv_map_table[this];
                int v23 = (char)(v15 - 1);
                int v24 = ~v15 + (v22 >> 1);
                if (v22) {
                  int v24 = ~v15 - ((v22 + 1) >> 1);
                }
                if (v22 <= 2 * ~(_BYTE)v15) {
                  unsigned __int8 v25 = v24;
                }
                else {
                  unsigned __int8 v25 = inv_map_table[this];
                }
                int v26 = v23 + (v22 >> 1);
                if (v22) {
                  int v26 = v23 - ((v22 + 1) >> 1);
                }
                if (v22 <= 2 * v23) {
                  LOBYTE(v22) = v26;
                }
                char v27 = v22 + 1;
                if ((((_BYTE)v15 - 1) & 0x80) != 0) {
                  LOBYTE(v15) = ~v25;
                }
                else {
                  LOBYTE(v15) = v27;
                }
              }
              unsigned int v9 = v104;
              *(unsigned char *)(*(void *)(v1 + 96) + 396 * v104 + 198 * v8 + 99 * v11 + 3 * v13 + i + 22) = v15;
            }
            ++v13;
          }
          while (v13 != 3);
          for (uint64_t j = 0; j != 6; ++j)
          {
            for (uint64_t k = 0; k != 3; ++k)
            {
              int v30 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 396 * v9 + 198 * v8 + 99 * v11 + 3 * j + k + 31);
              unsigned int v32 = *(_DWORD *)(v1 + 60);
              int v31 = *(_DWORD *)(v1 + 64);
              unsigned int v33 = (252 * v31 - 252) >> 8;
              unsigned int v34 = v33 + 1;
              if (v32 <= v33)
              {
                int v35 = *(_DWORD *)(v1 + 60);
              }
              else
              {
                int v35 = v32 - v34;
                unsigned int v34 = v31 - v34;
                *(_DWORD *)(v1 + 60) = v35;
              }
              *(_DWORD *)(v1 + 64) = v34;
              if (v34 <= 0x7F)
              {
                do
                {
                  int v36 = *(_DWORD *)(v1 + 68) - 1;
                  *(_DWORD *)(v1 + 64) = 2 * v34;
                  *(_DWORD *)(v1 + 68) = v36;
                  this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
                  int v35 = this | (2 * v35);
                  *(_DWORD *)(v1 + 60) = v35;
                  unsigned int v34 = *(_DWORD *)(v1 + 64);
                }
                while (v34 < 0x80);
              }
              if (v32 > v33)
              {
                this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
                unsigned int v37 = inv_map_table[this];
                int v38 = (char)(v30 - 1);
                int v39 = ~v30 + (v37 >> 1);
                if (v37) {
                  int v39 = ~v30 - ((v37 + 1) >> 1);
                }
                if (v37 <= 2 * ~(_BYTE)v30) {
                  unsigned __int8 v40 = v39;
                }
                else {
                  unsigned __int8 v40 = inv_map_table[this];
                }
                int v41 = v38 + (v37 >> 1);
                if (v37) {
                  int v41 = v38 - ((v37 + 1) >> 1);
                }
                if (v37 <= 2 * v38) {
                  LOBYTE(v37) = v41;
                }
                char v42 = v37 + 1;
                if ((((_BYTE)v30 - 1) & 0x80) != 0) {
                  LOBYTE(v30) = ~v40;
                }
                else {
                  LOBYTE(v30) = v42;
                }
              }
              unsigned int v9 = v104;
              *(unsigned char *)(*(void *)(v1 + 96) + 396 * v104 + 198 * v8 + 99 * v11 + 3 * j + k + 31) = v30;
            }
          }
          for (uint64_t m = 0; m != 6; ++m)
          {
            for (uint64_t n = 0; n != 3; ++n)
            {
              int v45 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 396 * v9 + 198 * v8 + 99 * v11 + 3 * m + n + 49);
              unsigned int v47 = *(_DWORD *)(v1 + 60);
              int v46 = *(_DWORD *)(v1 + 64);
              unsigned int v48 = (252 * v46 - 252) >> 8;
              unsigned int v49 = v48 + 1;
              if (v47 <= v48)
              {
                int v50 = *(_DWORD *)(v1 + 60);
              }
              else
              {
                int v50 = v47 - v49;
                unsigned int v49 = v46 - v49;
                *(_DWORD *)(v1 + 60) = v50;
              }
              *(_DWORD *)(v1 + 64) = v49;
              if (v49 <= 0x7F)
              {
                do
                {
                  int v51 = *(_DWORD *)(v1 + 68) - 1;
                  *(_DWORD *)(v1 + 64) = 2 * v49;
                  *(_DWORD *)(v1 + 68) = v51;
                  this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
                  int v50 = this | (2 * v50);
                  *(_DWORD *)(v1 + 60) = v50;
                  unsigned int v49 = *(_DWORD *)(v1 + 64);
                }
                while (v49 < 0x80);
              }
              if (v47 > v48)
              {
                this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
                unsigned int v52 = inv_map_table[this];
                int v53 = (char)(v45 - 1);
                int v54 = ~v45 + (v52 >> 1);
                if (v52) {
                  int v54 = ~v45 - ((v52 + 1) >> 1);
                }
                if (v52 <= 2 * ~(_BYTE)v45) {
                  unsigned __int8 v55 = v54;
                }
                else {
                  unsigned __int8 v55 = inv_map_table[this];
                }
                int v56 = v53 + (v52 >> 1);
                if (v52) {
                  int v56 = v53 - ((v52 + 1) >> 1);
                }
                if (v52 <= 2 * v53) {
                  LOBYTE(v52) = v56;
                }
                char v57 = v52 + 1;
                if ((((_BYTE)v45 - 1) & 0x80) != 0) {
                  LOBYTE(v45) = ~v55;
                }
                else {
                  LOBYTE(v45) = v57;
                }
              }
              unsigned int v9 = v104;
              *(unsigned char *)(*(void *)(v1 + 96) + 396 * v104 + 198 * v8 + 99 * v11 + 3 * m + n + 49) = v45;
            }
          }
          for (iuint64_t i = 0; ii != 6; ++ii)
          {
            for (juint64_t j = 0; jj != 3; ++jj)
            {
              int v60 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 396 * v9 + 198 * v8 + 99 * v11 + 3 * ii + jj + 67);
              unsigned int v62 = *(_DWORD *)(v1 + 60);
              int v61 = *(_DWORD *)(v1 + 64);
              unsigned int v63 = (252 * v61 - 252) >> 8;
              unsigned int v64 = v63 + 1;
              if (v62 <= v63)
              {
                int v65 = *(_DWORD *)(v1 + 60);
              }
              else
              {
                int v65 = v62 - v64;
                unsigned int v64 = v61 - v64;
                *(_DWORD *)(v1 + 60) = v65;
              }
              *(_DWORD *)(v1 + 64) = v64;
              if (v64 <= 0x7F)
              {
                do
                {
                  int v66 = *(_DWORD *)(v1 + 68) - 1;
                  *(_DWORD *)(v1 + 64) = 2 * v64;
                  *(_DWORD *)(v1 + 68) = v66;
                  this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
                  int v65 = this | (2 * v65);
                  *(_DWORD *)(v1 + 60) = v65;
                  unsigned int v64 = *(_DWORD *)(v1 + 64);
                }
                while (v64 < 0x80);
              }
              if (v62 > v63)
              {
                this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
                unsigned int v67 = inv_map_table[this];
                int v68 = (char)(v60 - 1);
                int v69 = ~v60 + (v67 >> 1);
                if (v67) {
                  int v69 = ~v60 - ((v67 + 1) >> 1);
                }
                if (v67 <= 2 * ~(_BYTE)v60) {
                  unsigned __int8 v70 = v69;
                }
                else {
                  unsigned __int8 v70 = inv_map_table[this];
                }
                int v71 = v68 + (v67 >> 1);
                if (v67) {
                  int v71 = v68 - ((v67 + 1) >> 1);
                }
                if (v67 <= 2 * v68) {
                  LOBYTE(v67) = v71;
                }
                char v72 = v67 + 1;
                if ((((_BYTE)v60 - 1) & 0x80) != 0) {
                  LOBYTE(v60) = ~v70;
                }
                else {
                  LOBYTE(v60) = v72;
                }
              }
              unsigned int v9 = v104;
              *(unsigned char *)(*(void *)(v1 + 96) + 396 * v104 + 198 * v8 + 99 * v11 + 3 * ii + jj + 67) = v60;
            }
          }
          for (kuint64_t k = 0; kk != 6; ++kk)
          {
            for (muint64_t m = 0; mm != 3; ++mm)
            {
              int v75 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 396 * v9 + 198 * v8 + 99 * v11 + 3 * kk + mm + 85);
              unsigned int v77 = *(_DWORD *)(v1 + 60);
              int v76 = *(_DWORD *)(v1 + 64);
              unsigned int v78 = (252 * v76 - 252) >> 8;
              unsigned int v79 = v78 + 1;
              if (v77 <= v78)
              {
                int v80 = *(_DWORD *)(v1 + 60);
              }
              else
              {
                int v80 = v77 - v79;
                unsigned int v79 = v76 - v79;
                *(_DWORD *)(v1 + 60) = v80;
              }
              *(_DWORD *)(v1 + 64) = v79;
              if (v79 <= 0x7F)
              {
                do
                {
                  int v81 = *(_DWORD *)(v1 + 68) - 1;
                  *(_DWORD *)(v1 + 64) = 2 * v79;
                  *(_DWORD *)(v1 + 68) = v81;
                  this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
                  int v80 = this | (2 * v80);
                  *(_DWORD *)(v1 + 60) = v80;
                  unsigned int v79 = *(_DWORD *)(v1 + 64);
                }
                while (v79 < 0x80);
              }
              if (v77 > v78)
              {
                this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
                unsigned int v82 = inv_map_table[this];
                int v83 = (char)(v75 - 1);
                int v84 = ~v75 + (v82 >> 1);
                if (v82) {
                  int v84 = ~v75 - ((v82 + 1) >> 1);
                }
                if (v82 <= 2 * ~(_BYTE)v75) {
                  unsigned __int8 v85 = v84;
                }
                else {
                  unsigned __int8 v85 = inv_map_table[this];
                }
                int v86 = v83 + (v82 >> 1);
                if (v82) {
                  int v86 = v83 - ((v82 + 1) >> 1);
                }
                if (v82 <= 2 * v83) {
                  LOBYTE(v82) = v86;
                }
                char v87 = v82 + 1;
                if ((((_BYTE)v75 - 1) & 0x80) != 0) {
                  LOBYTE(v75) = ~v85;
                }
                else {
                  LOBYTE(v75) = v87;
                }
              }
              unsigned int v9 = v104;
              *(unsigned char *)(*(void *)(v1 + 96) + 396 * v104 + 198 * v8 + 99 * v11 + 3 * kk + mm + 85) = v75;
            }
          }
          for (nuint64_t n = 0; nn != 6; ++nn)
          {
            for (uint64_t i1 = 0; i1 != 3; ++i1)
            {
              int v90 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 396 * v9 + 198 * v8 + 99 * v11 + 3 * nn + i1 + 103);
              unsigned int v92 = *(_DWORD *)(v1 + 60);
              int v91 = *(_DWORD *)(v1 + 64);
              unsigned int v93 = (252 * v91 - 252) >> 8;
              unsigned int v94 = v93 + 1;
              if (v92 <= v93)
              {
                int v95 = *(_DWORD *)(v1 + 60);
              }
              else
              {
                int v95 = v92 - v94;
                unsigned int v94 = v91 - v94;
                *(_DWORD *)(v1 + 60) = v95;
              }
              *(_DWORD *)(v1 + 64) = v94;
              if (v94 <= 0x7F)
              {
                do
                {
                  int v96 = *(_DWORD *)(v1 + 68) - 1;
                  *(_DWORD *)(v1 + 64) = 2 * v94;
                  *(_DWORD *)(v1 + 68) = v96;
                  this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
                  int v95 = this | (2 * v95);
                  *(_DWORD *)(v1 + 60) = v95;
                  unsigned int v94 = *(_DWORD *)(v1 + 64);
                }
                while (v94 < 0x80);
              }
              if (v92 > v93)
              {
                this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
                unsigned int v97 = inv_map_table[this];
                int v98 = (char)(v90 - 1);
                int v99 = ~v90 + (v97 >> 1);
                if (v97) {
                  int v99 = ~v90 - ((v97 + 1) >> 1);
                }
                if (v97 <= 2 * ~(_BYTE)v90) {
                  unsigned __int8 v100 = v99;
                }
                else {
                  unsigned __int8 v100 = inv_map_table[this];
                }
                int v101 = v98 + (v97 >> 1);
                if (v97) {
                  int v101 = v98 - ((v97 + 1) >> 1);
                }
                if (v97 <= 2 * v98) {
                  LOBYTE(v97) = v101;
                }
                char v102 = v97 + 1;
                if ((((_BYTE)v90 - 1) & 0x80) != 0) {
                  LOBYTE(v90) = ~v100;
                }
                else {
                  LOBYTE(v90) = v102;
                }
              }
              unsigned int v9 = v104;
              *(unsigned char *)(*(void *)(v1 + 96) + 396 * v104 + 198 * v8 + 99 * v11 + 3 * nn + i1 + 103) = v90;
            }
          }
          char v12 = 0;
          uint64_t v11 = 1;
        }
        while ((v106 & 1) != 0);
        char v10 = 0;
        uint64_t v8 = 1;
      }
      while ((v105 & 1) != 0);
    }
    ++v104;
  }
  while (v104 <= v103);
  return this;
}

uint64_t LGH_Syntax::read_skip_probs(uint64_t this)
{
  uint64_t v1 = this;
  for (uint64_t i = 0; i != 3; ++i)
  {
    int v3 = *(unsigned __int8 *)(*(void *)(v1 + 96) + i + 1606);
    unsigned int v5 = *(_DWORD *)(v1 + 60);
    int v4 = *(_DWORD *)(v1 + 64);
    unsigned int v6 = (252 * v4 - 252) >> 8;
    unsigned int v7 = v6 + 1;
    if (v5 <= v6)
    {
      int v8 = *(_DWORD *)(v1 + 60);
    }
    else
    {
      int v8 = v5 - v7;
      unsigned int v7 = v4 - v7;
      *(_DWORD *)(v1 + 60) = v8;
    }
    *(_DWORD *)(v1 + 64) = v7;
    if (v7 <= 0x7F)
    {
      do
      {
        int v9 = *(_DWORD *)(v1 + 68) - 1;
        *(_DWORD *)(v1 + 64) = 2 * v7;
        *(_DWORD *)(v1 + 68) = v9;
        this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
        int v8 = this | (2 * v8);
        *(_DWORD *)(v1 + 60) = v8;
        unsigned int v7 = *(_DWORD *)(v1 + 64);
      }
      while (v7 < 0x80);
    }
    if (v5 > v6)
    {
      this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
      unsigned int v10 = inv_map_table[this];
      int v11 = (char)(v3 - 1);
      int v12 = ~v3 + (v10 >> 1);
      if (v10) {
        int v12 = ~v3 - ((v10 + 1) >> 1);
      }
      if (v10 <= 2 * ~(_BYTE)v3) {
        unsigned __int8 v13 = v12;
      }
      else {
        unsigned __int8 v13 = inv_map_table[this];
      }
      int v14 = v11 + (v10 >> 1);
      if (v10) {
        int v14 = v11 - ((v10 + 1) >> 1);
      }
      if (v10 <= 2 * v11) {
        LOBYTE(v10) = v14;
      }
      char v15 = v10 + 1;
      if ((((_BYTE)v3 - 1) & 0x80) != 0) {
        LOBYTE(v3) = ~v13;
      }
      else {
        LOBYTE(v3) = v15;
      }
    }
    *(unsigned char *)(*(void *)(v1 + 96) + i + 1606) = v3;
  }
  return this;
}

uint64_t LGH_Syntax::read_inter_mode_probs(uint64_t this)
{
  uint64_t v1 = this;
  for (uint64_t i = 0; i != 7; ++i)
  {
    for (uint64_t j = 0; j != 3; ++j)
    {
      int v4 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 3 * i + j + 1609);
      unsigned int v6 = *(_DWORD *)(v1 + 60);
      int v5 = *(_DWORD *)(v1 + 64);
      unsigned int v7 = (252 * v5 - 252) >> 8;
      unsigned int v8 = v7 + 1;
      if (v6 <= v7)
      {
        int v9 = *(_DWORD *)(v1 + 60);
      }
      else
      {
        int v9 = v6 - v8;
        unsigned int v8 = v5 - v8;
        *(_DWORD *)(v1 + 60) = v9;
      }
      *(_DWORD *)(v1 + 64) = v8;
      if (v8 <= 0x7F)
      {
        do
        {
          int v10 = *(_DWORD *)(v1 + 68) - 1;
          *(_DWORD *)(v1 + 64) = 2 * v8;
          *(_DWORD *)(v1 + 68) = v10;
          this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
          int v9 = this | (2 * v9);
          *(_DWORD *)(v1 + 60) = v9;
          unsigned int v8 = *(_DWORD *)(v1 + 64);
        }
        while (v8 < 0x80);
      }
      if (v6 > v7)
      {
        this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
        unsigned int v11 = inv_map_table[this];
        int v12 = (char)(v4 - 1);
        int v13 = ~v4 + (v11 >> 1);
        if (v11) {
          int v13 = ~v4 - ((v11 + 1) >> 1);
        }
        if (v11 <= 2 * ~(_BYTE)v4) {
          unsigned __int8 v14 = v13;
        }
        else {
          unsigned __int8 v14 = inv_map_table[this];
        }
        int v15 = v12 + (v11 >> 1);
        if (v11) {
          int v15 = v12 - ((v11 + 1) >> 1);
        }
        if (v11 <= 2 * v12) {
          LOBYTE(v11) = v15;
        }
        char v16 = v11 + 1;
        if ((((_BYTE)v4 - 1) & 0x80) != 0) {
          LOBYTE(v4) = ~v14;
        }
        else {
          LOBYTE(v4) = v16;
        }
      }
      *(unsigned char *)(*(void *)(v1 + 96) + 3 * i + j + 1609) = v4;
    }
  }
  return this;
}

uint64_t LGH_Syntax::read_switchable_interp_prob(uint64_t this)
{
  uint64_t v1 = this;
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v3 = 0;
    char v4 = 1;
    do
    {
      char v5 = v4;
      int v6 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 2 * i + v3 + 1630);
      unsigned int v8 = *(_DWORD *)(v1 + 60);
      int v7 = *(_DWORD *)(v1 + 64);
      unsigned int v9 = (252 * v7 - 252) >> 8;
      unsigned int v10 = v9 + 1;
      if (v8 <= v9)
      {
        int v11 = *(_DWORD *)(v1 + 60);
      }
      else
      {
        int v11 = v8 - v10;
        unsigned int v10 = v7 - v10;
        *(_DWORD *)(v1 + 60) = v11;
      }
      *(_DWORD *)(v1 + 64) = v10;
      if (v10 <= 0x7F)
      {
        do
        {
          int v12 = *(_DWORD *)(v1 + 68) - 1;
          *(_DWORD *)(v1 + 64) = 2 * v10;
          *(_DWORD *)(v1 + 68) = v12;
          this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
          int v11 = this | (2 * v11);
          *(_DWORD *)(v1 + 60) = v11;
          unsigned int v10 = *(_DWORD *)(v1 + 64);
        }
        while (v10 < 0x80);
      }
      if (v8 > v9)
      {
        this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
        unsigned int v13 = inv_map_table[this];
        int v14 = (char)(v6 - 1);
        int v15 = ~v6 + (v13 >> 1);
        if (v13) {
          int v15 = ~v6 - ((v13 + 1) >> 1);
        }
        if (v13 <= 2 * ~(_BYTE)v6) {
          unsigned __int8 v16 = v15;
        }
        else {
          unsigned __int8 v16 = inv_map_table[this];
        }
        int v17 = v14 + (v13 >> 1);
        if (v13) {
          int v17 = v14 - ((v13 + 1) >> 1);
        }
        if (v13 <= 2 * v14) {
          LOBYTE(v13) = v17;
        }
        char v18 = v13 + 1;
        if ((((_BYTE)v6 - 1) & 0x80) != 0) {
          LOBYTE(v6) = ~v16;
        }
        else {
          LOBYTE(v6) = v18;
        }
      }
      char v4 = 0;
      *(unsigned char *)(*(void *)(v1 + 96) + 2 * i + v3 + 1630) = v6;
      uint64_t v3 = 1;
    }
    while ((v5 & 1) != 0);
  }
  return this;
}

uint64_t LGH_Syntax::read_intra_inter_prob(uint64_t this)
{
  uint64_t v1 = this;
  for (uint64_t i = 0; i != 4; ++i)
  {
    int v3 = *(unsigned __int8 *)(*(void *)(v1 + 96) + i + 1638);
    unsigned int v5 = *(_DWORD *)(v1 + 60);
    int v4 = *(_DWORD *)(v1 + 64);
    unsigned int v6 = (252 * v4 - 252) >> 8;
    unsigned int v7 = v6 + 1;
    if (v5 <= v6)
    {
      int v8 = *(_DWORD *)(v1 + 60);
    }
    else
    {
      int v8 = v5 - v7;
      unsigned int v7 = v4 - v7;
      *(_DWORD *)(v1 + 60) = v8;
    }
    *(_DWORD *)(v1 + 64) = v7;
    if (v7 <= 0x7F)
    {
      do
      {
        int v9 = *(_DWORD *)(v1 + 68) - 1;
        *(_DWORD *)(v1 + 64) = 2 * v7;
        *(_DWORD *)(v1 + 68) = v9;
        this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
        int v8 = this | (2 * v8);
        *(_DWORD *)(v1 + 60) = v8;
        unsigned int v7 = *(_DWORD *)(v1 + 64);
      }
      while (v7 < 0x80);
    }
    if (v5 > v6)
    {
      this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
      unsigned int v10 = inv_map_table[this];
      int v11 = (char)(v3 - 1);
      int v12 = ~v3 + (v10 >> 1);
      if (v10) {
        int v12 = ~v3 - ((v10 + 1) >> 1);
      }
      if (v10 <= 2 * ~(_BYTE)v3) {
        unsigned __int8 v13 = v12;
      }
      else {
        unsigned __int8 v13 = inv_map_table[this];
      }
      int v14 = v11 + (v10 >> 1);
      if (v10) {
        int v14 = v11 - ((v10 + 1) >> 1);
      }
      if (v10 <= 2 * v11) {
        LOBYTE(v10) = v14;
      }
      char v15 = v10 + 1;
      if ((((_BYTE)v3 - 1) & 0x80) != 0) {
        LOBYTE(v3) = ~v13;
      }
      else {
        LOBYTE(v3) = v15;
      }
    }
    *(unsigned char *)(*(void *)(v1 + 96) + i + 1638) = v3;
  }
  return this;
}

uint64_t LGH_Syntax::frame_reference_mode(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(unsigned __int8 **)(this + 80);
  v3.i32[0] = v2[19];
  v3.i32[1] = v2[20];
  uint32x2_t v4 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_s32(v3, (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v2[18]), (int8x8_t)0xFF000000FFLL)));
  if ((vpmax_u32(v4, v4).u32[0] & 1) == 0) {
    goto LABEL_17;
  }
  unsigned int v6 = *(_DWORD *)(this + 60);
  int v5 = *(_DWORD *)(this + 64);
  unsigned int v7 = ((v5 << 7) - 128) >> 8;
  unsigned int v8 = v7 + 1;
  if (v6 <= v7)
  {
    unsigned int v9 = *(_DWORD *)(this + 60);
  }
  else
  {
    unsigned int v9 = v6 - v8;
    unsigned int v8 = v5 - v8;
    *(_DWORD *)(this + 60) = v9;
  }
  *(_DWORD *)(this + 64) = v8;
  if (v8 <= 0x7F)
  {
    do
    {
      int v10 = *(_DWORD *)(v1 + 68) - 1;
      *(_DWORD *)(v1 + 64) = 2 * v8;
      *(_DWORD *)(v1 + 68) = v10;
      this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "non_single_reference", 1u);
      unsigned int v9 = this | (2 * v9);
      *(_DWORD *)(v1 + 60) = v9;
      unsigned int v8 = *(_DWORD *)(v1 + 64);
    }
    while (v8 < 0x80);
  }
  if (v6 > v7)
  {
    unsigned int v11 = ((v8 << 7) - 128) >> 8;
    unsigned int v12 = v11 + 1;
    unsigned int v13 = v9;
    if (v9 > v11)
    {
      unsigned int v13 = v9 - v12;
      unsigned int v12 = v8 - v12;
      *(_DWORD *)(v1 + 60) = v13;
    }
    *(_DWORD *)(v1 + 64) = v12;
    if (v12 <= 0x7F)
    {
      do
      {
        int v14 = *(_DWORD *)(v1 + 68) - 1;
        *(_DWORD *)(v1 + 64) = 2 * v12;
        *(_DWORD *)(v1 + 68) = v14;
        this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "reference_select", 1u);
        unsigned int v13 = this | (2 * v13);
        *(_DWORD *)(v1 + 60) = v13;
        unsigned int v12 = *(_DWORD *)(v1 + 64);
      }
      while (v12 < 0x80);
    }
    uint64_t v15 = *(void *)(v1 + 7736);
    if (v9 <= v11) {
      char v16 = 1;
    }
    else {
      char v16 = 2;
    }
    *(unsigned char *)(v15 + 2) = v16;
    int v17 = *(unsigned __int8 **)(v1 + 80);
    int v18 = v17[18];
    if (v18 == v17[19])
    {
      *(_WORD *)(v15 + 3) = 259;
      char v19 = 2;
    }
    else
    {
      if (v18 == v17[20]) {
        __int16 v20 = 258;
      }
      else {
        __int16 v20 = 513;
      }
      *(_WORD *)(v15 + 3) = v20;
      char v19 = 3;
    }
    *(unsigned char *)(*(void *)(v1 + 7736) + 5) = v19;
  }
  else
  {
LABEL_17:
    *(unsigned char *)(*(void *)(v1 + 7736) + 2) = 0;
  }
  return this;
}

uint64_t LGH_Syntax::frame_reference_mode_probs(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(unsigned __int8 *)(*(void *)(this + 7736) + 2);
  if (v2 == 2)
  {
    for (uint64_t i = 0; i != 5; ++i)
    {
      int v4 = *(unsigned __int8 *)(*(void *)(v1 + 96) + i + 1642);
      unsigned int v6 = *(_DWORD *)(v1 + 60);
      int v5 = *(_DWORD *)(v1 + 64);
      unsigned int v7 = (252 * v5 - 252) >> 8;
      unsigned int v8 = v7 + 1;
      if (v6 <= v7)
      {
        int v9 = *(_DWORD *)(v1 + 60);
      }
      else
      {
        int v9 = v6 - v8;
        unsigned int v8 = v5 - v8;
        *(_DWORD *)(v1 + 60) = v9;
      }
      *(_DWORD *)(v1 + 64) = v8;
      if (v8 <= 0x7F)
      {
        do
        {
          int v10 = *(_DWORD *)(v1 + 68) - 1;
          *(_DWORD *)(v1 + 64) = 2 * v8;
          *(_DWORD *)(v1 + 68) = v10;
          this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
          int v9 = this | (2 * v9);
          *(_DWORD *)(v1 + 60) = v9;
          unsigned int v8 = *(_DWORD *)(v1 + 64);
        }
        while (v8 < 0x80);
      }
      if (v6 > v7)
      {
        this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
        unsigned int v11 = inv_map_table[this];
        int v12 = (char)(v4 - 1);
        int v13 = ~v4 + (v11 >> 1);
        if (v11) {
          int v13 = ~v4 - ((v11 + 1) >> 1);
        }
        if (v11 <= 2 * ~(_BYTE)v4) {
          unsigned __int8 v14 = v13;
        }
        else {
          unsigned __int8 v14 = inv_map_table[this];
        }
        int v15 = v12 + (v11 >> 1);
        if (v11) {
          int v15 = v12 - ((v11 + 1) >> 1);
        }
        if (v11 <= 2 * v12) {
          LOBYTE(v11) = v15;
        }
        char v16 = v11 + 1;
        if ((((_BYTE)v4 - 1) & 0x80) != 0) {
          LOBYTE(v4) = ~v14;
        }
        else {
          LOBYTE(v4) = v16;
        }
      }
      *(unsigned char *)(*(void *)(v1 + 96) + i + 1642) = v4;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(v1 + 7736) + 2);
  }
  if (v2 == 1) {
    goto LABEL_62;
  }
  for (uint64_t j = 0; j != 5; *(unsigned char *)(*(void *)(v1 + 96) + 2 * j++ + 1648) = v32)
  {
    int v18 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 2 * j + 1647);
    unsigned int v20 = *(_DWORD *)(v1 + 60);
    int v19 = *(_DWORD *)(v1 + 64);
    unsigned int v21 = (252 * v19 - 252) >> 8;
    unsigned int v22 = v21 + 1;
    if (v20 <= v21)
    {
      int v23 = *(_DWORD *)(v1 + 60);
    }
    else
    {
      int v23 = v20 - v22;
      unsigned int v22 = v19 - v22;
      *(_DWORD *)(v1 + 60) = v23;
    }
    *(_DWORD *)(v1 + 64) = v22;
    if (v22 <= 0x7F)
    {
      do
      {
        int v24 = *(_DWORD *)(v1 + 68) - 1;
        *(_DWORD *)(v1 + 64) = 2 * v22;
        *(_DWORD *)(v1 + 68) = v24;
        this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
        int v23 = this | (2 * v23);
        *(_DWORD *)(v1 + 60) = v23;
        unsigned int v22 = *(_DWORD *)(v1 + 64);
      }
      while (v22 < 0x80);
    }
    if (v20 > v21)
    {
      this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
      unsigned int v25 = inv_map_table[this];
      unsigned __int8 v26 = v18 - 1;
      if ((((_BYTE)v18 - 1) & 0x80) != 0)
      {
        int v29 = ~v18;
        if (v25 <= 2 * ~(_BYTE)v18)
        {
          unsigned int v30 = v29 + (v25 >> 1);
          unsigned int v31 = v29 - ((v25 + 1) >> 1);
          if (v25) {
            LOBYTE(v25) = v31;
          }
          else {
            LOBYTE(v25) = v30;
          }
        }
        LOBYTE(v18) = ~(_BYTE)v25;
      }
      else
      {
        if (v25 <= 2 * v26)
        {
          int v27 = (char)v26 + (v25 >> 1);
          unsigned int v28 = (char)v26 - ((v25 + 1) >> 1);
          if (v25) {
            LOBYTE(v25) = v28;
          }
          else {
            LOBYTE(v25) = v27;
          }
        }
        LOBYTE(v18) = v25 + 1;
      }
    }
    *(unsigned char *)(*(void *)(v1 + 96) + 2 * j + 1647) = v18;
    int v32 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 2 * j + 1648);
    unsigned int v34 = *(_DWORD *)(v1 + 60);
    int v33 = *(_DWORD *)(v1 + 64);
    unsigned int v35 = (252 * v33 - 252) >> 8;
    unsigned int v36 = v35 + 1;
    if (v34 <= v35)
    {
      int v37 = *(_DWORD *)(v1 + 60);
    }
    else
    {
      int v37 = v34 - v36;
      unsigned int v36 = v33 - v36;
      *(_DWORD *)(v1 + 60) = v37;
    }
    *(_DWORD *)(v1 + 64) = v36;
    if (v36 <= 0x7F)
    {
      do
      {
        int v38 = *(_DWORD *)(v1 + 68) - 1;
        *(_DWORD *)(v1 + 64) = 2 * v36;
        *(_DWORD *)(v1 + 68) = v38;
        this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
        int v37 = this | (2 * v37);
        *(_DWORD *)(v1 + 60) = v37;
        unsigned int v36 = *(_DWORD *)(v1 + 64);
      }
      while (v36 < 0x80);
    }
    if (v34 > v35)
    {
      this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
      unsigned int v39 = inv_map_table[this];
      int v40 = (char)(v32 - 1);
      int v41 = ~v32 + (v39 >> 1);
      if (v39) {
        int v41 = ~v32 - ((v39 + 1) >> 1);
      }
      if (v39 <= 2 * ~(_BYTE)v32) {
        unsigned __int8 v42 = v41;
      }
      else {
        unsigned __int8 v42 = inv_map_table[this];
      }
      int v43 = v40 + (v39 >> 1);
      if (v39) {
        int v43 = v40 - ((v39 + 1) >> 1);
      }
      if (v39 <= 2 * v40) {
        LOBYTE(v39) = v43;
      }
      char v44 = v39 + 1;
      if ((((_BYTE)v32 - 1) & 0x80) != 0) {
        LOBYTE(v32) = ~v42;
      }
      else {
        LOBYTE(v32) = v44;
      }
    }
  }
  if (*(unsigned char *)(*(void *)(v1 + 7736) + 2))
  {
LABEL_62:
    for (uint64_t k = 0; k != 5; ++k)
    {
      int v46 = *(unsigned __int8 *)(*(void *)(v1 + 96) + k + 1657);
      unsigned int v48 = *(_DWORD *)(v1 + 60);
      int v47 = *(_DWORD *)(v1 + 64);
      unsigned int v49 = (252 * v47 - 252) >> 8;
      unsigned int v50 = v49 + 1;
      if (v48 <= v49)
      {
        int v51 = *(_DWORD *)(v1 + 60);
      }
      else
      {
        int v51 = v48 - v50;
        unsigned int v50 = v47 - v50;
        *(_DWORD *)(v1 + 60) = v51;
      }
      *(_DWORD *)(v1 + 64) = v50;
      if (v50 <= 0x7F)
      {
        do
        {
          int v52 = *(_DWORD *)(v1 + 68) - 1;
          *(_DWORD *)(v1 + 64) = 2 * v50;
          *(_DWORD *)(v1 + 68) = v52;
          this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
          int v51 = this | (2 * v51);
          *(_DWORD *)(v1 + 60) = v51;
          unsigned int v50 = *(_DWORD *)(v1 + 64);
        }
        while (v50 < 0x80);
      }
      if (v48 > v49)
      {
        this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
        unsigned int v53 = inv_map_table[this];
        int v54 = (char)(v46 - 1);
        int v55 = ~v46 + (v53 >> 1);
        if (v53) {
          int v55 = ~v46 - ((v53 + 1) >> 1);
        }
        if (v53 <= 2 * ~(_BYTE)v46) {
          unsigned __int8 v56 = v55;
        }
        else {
          unsigned __int8 v56 = inv_map_table[this];
        }
        int v57 = v54 + (v53 >> 1);
        if (v53) {
          int v57 = v54 - ((v53 + 1) >> 1);
        }
        if (v53 <= 2 * v54) {
          LOBYTE(v53) = v57;
        }
        char v58 = v53 + 1;
        if ((((_BYTE)v46 - 1) & 0x80) != 0) {
          LOBYTE(v46) = ~v56;
        }
        else {
          LOBYTE(v46) = v58;
        }
      }
      *(unsigned char *)(*(void *)(v1 + 96) + k + 1657) = v46;
    }
  }
  return this;
}

uint64_t LGH_Syntax::read_y_mode_prob(uint64_t this)
{
  uint64_t v1 = this;
  for (uint64_t i = 0; i != 4; ++i)
  {
    for (uint64_t j = 0; j != 9; ++j)
    {
      int v4 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 9 * i + j + 1662);
      unsigned int v6 = *(_DWORD *)(v1 + 60);
      int v5 = *(_DWORD *)(v1 + 64);
      unsigned int v7 = (252 * v5 - 252) >> 8;
      unsigned int v8 = v7 + 1;
      if (v6 <= v7)
      {
        int v9 = *(_DWORD *)(v1 + 60);
      }
      else
      {
        int v9 = v6 - v8;
        unsigned int v8 = v5 - v8;
        *(_DWORD *)(v1 + 60) = v9;
      }
      *(_DWORD *)(v1 + 64) = v8;
      if (v8 <= 0x7F)
      {
        do
        {
          int v10 = *(_DWORD *)(v1 + 68) - 1;
          *(_DWORD *)(v1 + 64) = 2 * v8;
          *(_DWORD *)(v1 + 68) = v10;
          this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
          int v9 = this | (2 * v9);
          *(_DWORD *)(v1 + 60) = v9;
          unsigned int v8 = *(_DWORD *)(v1 + 64);
        }
        while (v8 < 0x80);
      }
      if (v6 > v7)
      {
        this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
        unsigned int v11 = inv_map_table[this];
        int v12 = (char)(v4 - 1);
        int v13 = ~v4 + (v11 >> 1);
        if (v11) {
          int v13 = ~v4 - ((v11 + 1) >> 1);
        }
        if (v11 <= 2 * ~(_BYTE)v4) {
          unsigned __int8 v14 = v13;
        }
        else {
          unsigned __int8 v14 = inv_map_table[this];
        }
        int v15 = v12 + (v11 >> 1);
        if (v11) {
          int v15 = v12 - ((v11 + 1) >> 1);
        }
        if (v11 <= 2 * v12) {
          LOBYTE(v11) = v15;
        }
        char v16 = v11 + 1;
        if ((((_BYTE)v4 - 1) & 0x80) != 0) {
          LOBYTE(v4) = ~v14;
        }
        else {
          LOBYTE(v4) = v16;
        }
      }
      *(unsigned char *)(*(void *)(v1 + 96) + 9 * i + j + 1662) = v4;
    }
  }
  return this;
}

uint64_t LGH_Syntax::read_partition_prob(uint64_t this)
{
  uint64_t v1 = this;
  for (uint64_t i = 0; i != 16; ++i)
  {
    for (uint64_t j = 0; j != 3; ++j)
    {
      int v4 = *(unsigned __int8 *)(*(void *)(v1 + 96) + 3 * i + j + 1788);
      unsigned int v6 = *(_DWORD *)(v1 + 60);
      int v5 = *(_DWORD *)(v1 + 64);
      unsigned int v7 = (252 * v5 - 252) >> 8;
      unsigned int v8 = v7 + 1;
      if (v6 <= v7)
      {
        int v9 = *(_DWORD *)(v1 + 60);
      }
      else
      {
        int v9 = v6 - v8;
        unsigned int v8 = v5 - v8;
        *(_DWORD *)(v1 + 60) = v9;
      }
      *(_DWORD *)(v1 + 64) = v8;
      if (v8 <= 0x7F)
      {
        do
        {
          int v10 = *(_DWORD *)(v1 + 68) - 1;
          *(_DWORD *)(v1 + 64) = 2 * v8;
          *(_DWORD *)(v1 + 68) = v10;
          this = LGH_Syntax::get_bits((LGH_Syntax *)v1, "update_prob", 1u);
          int v9 = this | (2 * v9);
          *(_DWORD *)(v1 + 60) = v9;
          unsigned int v8 = *(_DWORD *)(v1 + 64);
        }
        while (v8 < 0x80);
      }
      if (v6 > v7)
      {
        this = LGH_Syntax::decode_term_subexp((LGH_Syntax *)v1);
        unsigned int v11 = inv_map_table[this];
        int v12 = (char)(v4 - 1);
        int v13 = ~v4 + (v11 >> 1);
        if (v11) {
          int v13 = ~v4 - ((v11 + 1) >> 1);
        }
        if (v11 <= 2 * ~(_BYTE)v4) {
          unsigned __int8 v14 = v13;
        }
        else {
          unsigned __int8 v14 = inv_map_table[this];
        }
        int v15 = v12 + (v11 >> 1);
        if (v11) {
          int v15 = v12 - ((v11 + 1) >> 1);
        }
        if (v11 <= 2 * v12) {
          LOBYTE(v11) = v15;
        }
        char v16 = v11 + 1;
        if ((((_BYTE)v4 - 1) & 0x80) != 0) {
          LOBYTE(v4) = ~v14;
        }
        else {
          LOBYTE(v4) = v16;
        }
      }
      *(unsigned char *)(*(void *)(v1 + 96) + 3 * i + j + 1788) = v4;
    }
  }
  return this;
}

uint64_t LGH_Syntax::mv_probs(LGH_Syntax *this)
{
  for (uint64_t i = 1836; i != 1839; ++i)
    *(unsigned char *)(*((void *)this + 12) + i) = LGH_Syntax::update_mv_prob(this, *(unsigned char *)(*((void *)this + 12) + i));
  uint64_t v3 = 0;
  char v4 = 1;
  do
  {
    char v5 = v4;
    uint64_t v6 = 0;
    *(unsigned char *)(*((void *)this + 12) + 22 * v3 + 1839) = LGH_Syntax::update_mv_prob(this, *(unsigned char *)(*((void *)this + 12) + 22 * v3 + 1839));
    do
    {
      *(unsigned char *)(*((void *)this + 12) + 22 * v3 + 1840 + v6) = LGH_Syntax::update_mv_prob(this, *(unsigned char *)(*((void *)this + 12)+ 22 * v3+ 1840+ v6));
      ++v6;
    }
    while (v6 != 10);
    uint64_t v7 = 22 * v3;
    char updated = LGH_Syntax::update_mv_prob(this, *(unsigned char *)(*((void *)this + 12) + 22 * v3 + 1850));
    uint64_t v9 = 0;
    *(unsigned char *)(*((void *)this + 12) + v7 + 1850) = updated;
    uint64_t v10 = v7 + 1851;
    do
    {
      *(unsigned char *)(*((void *)this + 12) + v10 + v9) = LGH_Syntax::update_mv_prob(this, *(unsigned char *)(*((void *)this + 12) + v10 + v9));
      ++v9;
    }
    while (v9 != 10);
    char v4 = 0;
    uint64_t v3 = 1;
  }
  while ((v5 & 1) != 0);
  uint64_t v11 = 0;
  char v12 = 1;
  do
  {
    uint64_t v13 = 0;
    char v14 = v12;
    char v15 = 1;
    do
    {
      uint64_t v16 = 0;
      char v17 = v15;
      uint64_t v18 = 9 * v11 + 1883 + 3 * v13;
      do
      {
        *(unsigned char *)(*((void *)this + 12) + v18 + v16) = LGH_Syntax::update_mv_prob(this, *(unsigned char *)(*((void *)this + 12) + v18 + v16));
        ++v16;
      }
      while (v16 != 3);
      char v15 = 0;
      uint64_t v13 = 1;
    }
    while ((v17 & 1) != 0);
    uint64_t v19 = 0;
    uint64_t v20 = 9 * v11 + 1889;
    do
    {
      uint64_t result = LGH_Syntax::update_mv_prob(this, *(unsigned char *)(*((void *)this + 12) + v20 + v19));
      *(unsigned char *)(*((void *)this + 12) + v20 + v19++) = result;
    }
    while (v19 != 3);
    char v12 = 0;
    uint64_t v11 = 1;
  }
  while ((v14 & 1) != 0);
  if (*(unsigned char *)(*((void *)this + 10) + 21))
  {
    uint64_t v22 = 0;
    uint64_t v23 = *((void *)this + 12);
    char v24 = 1;
    do
    {
      char v25 = v24;
      char v26 = LGH_Syntax::update_mv_prob(this, *(unsigned char *)(v23 + 2 * v22 + 1901));
      uint64_t v27 = *((void *)this + 12) + 2 * v22;
      *(unsigned char *)(v27 + 1901) = v26;
      uint64_t result = LGH_Syntax::update_mv_prob(this, *(unsigned char *)(v27 + 1902));
      char v24 = 0;
      uint64_t v23 = *((void *)this + 12);
      *(unsigned char *)(v23 + 2 * v22 + 1902) = result;
      uint64_t v22 = 1;
    }
    while ((v25 & 1) != 0);
  }
  return result;
}

uint64_t LGH_Syntax::get_tile_offset(LGH_Syntax *this, int a2, signed int a3, char a4)
{
  unsigned int v4 = 8 * ((((a3 + 7) >> 3) * a2) >> a4);
  if ((int)v4 >= a3) {
    return a3;
  }
  else {
    return v4;
  }
}

uint64_t LGH_Syntax::get_tile_info(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v6 = a4[16];
  unsigned int v5 = a4[17];
  unsigned int v7 = 1 << v5;
  a4[70] = 1 << v5;
  int v8 = 1 << v6;
  a4[71] = 1 << v6;
  unsigned int v9 = 1 << v5 << v6;
  BOOL v10 = v6 > 6 || v5 > 2;
  if (v10 || v9 > 0x100)
  {
    if ((*(unsigned char *)(a1 + 7886) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136316162;
      char v58 = "get_tile_info";
      __int16 v59 = 1024;
      int v60 = 256;
      __int16 v61 = 1024;
      *(_DWORD *)unsigned int v62 = v9;
      *(_WORD *)&v62[4] = 1024;
      *(_DWORD *)&v62[6] = v7;
      LOWORD(v63) = 1024;
      *(_DWORD *)((char *)&v63 + 2) = v8;
      unsigned int v53 = &_os_log_internal;
      int v54 = "AppleAVD: %s: max allow tiles %d got %d, tile rows : %d, tile cols : %d\n";
      uint32_t v55 = 36;
LABEL_48:
      _os_log_impl(&dword_223977000, v53, OS_LOG_TYPE_DEFAULT, v54, buf, v55);
    }
  }
  else
  {
    uint64_t v13 = a2;
    int v14 = 0;
    int v15 = 0;
    uint64_t v16 = (char *)a2 - v4;
    unsigned int v17 = 1 << v6;
    while (!v17)
    {
LABEL_22:
      if (++v14 >= v7)
      {
        uint64_t v22 = 0;
        unsigned int v24 = a4[22];
        if (v7 + 1 > 1) {
          uint64_t v25 = v7 + 1;
        }
        else {
          uint64_t v25 = 1;
        }
        uint64x2_t v26 = (uint64x2_t)vdupq_n_s64(v25 - 1);
        uint64_t v27 = (v25 + 1) & 0x1FFFFFFFELL;
        int32x2_t v28 = vdup_n_s32(v24);
        int32x2_t v29 = vdup_n_s32((v24 + 7) >> 3);
        int64x2_t v30 = (int64x2_t)xmmword_223ADA980;
        uint64_t v23 = (const float *)(a4 + 17);
        int32x2_t v31 = (int32x2_t)vld1_dup_f32(v23);
        uint32x2_t v32 = (uint32x2_t)vneg_s32(v31);
        int64x2_t v33 = vdupq_n_s64(2uLL);
        do
        {
          v34.i32[0] = v22;
          v34.i32[1] = v22 + 1;
          int32x2_t v35 = vmovn_s64((int64x2_t)vcgeq_u64(v26, (uint64x2_t)v30));
          int32x2_t v36 = vmin_s32(vshl_n_s32((int32x2_t)vshl_u32((uint32x2_t)vmul_s32(v29, v34), v32), 3uLL), v28);
          if (v35.i8[0]) {
            a4[v22 + 584] = v36.i32[0];
          }
          if (v35.i8[4]) {
            a4[v22 + 585] = v36.i32[1];
          }
          v22 += 2;
          int64x2_t v30 = vaddq_s64(v30, v33);
        }
        while (v27 != v22);
        uint64_t v37 = 0;
        unsigned int v38 = a4[21];
        if ((v8 + 1) > 1) {
          uint64_t v40 = (v8 + 1);
        }
        else {
          uint64_t v40 = 1;
        }
        uint64x2_t v41 = (uint64x2_t)vdupq_n_s64(v40 - 1);
        uint64_t v42 = (v40 + 1) & 0x1FFFFFFFELL;
        int32x2_t v43 = vdup_n_s32(v38);
        int32x2_t v44 = vdup_n_s32((v38 + 7) >> 3);
        int64x2_t v45 = (int64x2_t)xmmword_223ADA980;
        unsigned int v39 = (const float *)(a4 + 16);
        int32x2_t v46 = (int32x2_t)vld1_dup_f32(v39);
        uint32x2_t v47 = (uint32x2_t)vneg_s32(v46);
        int64x2_t v48 = vdupq_n_s64(2uLL);
        do
        {
          v49.i32[0] = v37;
          v49.i32[1] = v37 + 1;
          int32x2_t v50 = vmovn_s64((int64x2_t)vcgeq_u64(v41, (uint64x2_t)v45));
          int32x2_t v51 = vmin_s32(vshl_n_s32((int32x2_t)vshl_u32((uint32x2_t)vmul_s32(v44, v49), v47), 3uLL), v43);
          if (v50.i8[0]) {
            a4[v37 + 589] = v51.i32[0];
          }
          if (v50.i8[4]) {
            a4[v37 + 590] = v51.i32[1];
          }
          v37 += 2;
          int64x2_t v45 = vaddq_s64(v45, v48);
        }
        while (v42 != v37);
        return 0;
      }
    }
    unsigned int v18 = 0;
    while (1)
    {
      if (v18 == v17 - 1 && v14 == a4[70] - 1)
      {
        unint64_t v19 = a3 - (void)v16;
        uint64_t v20 = v16;
      }
      else
      {
        unint64_t v19 = bswap32(*v13);
        uint64_t v20 = v16 + 4;
        uint64_t v13 = (unsigned int *)((char *)v13 + v19 + 4);
      }
      uint64_t v16 = &v20[v19];
      if ((unint64_t)&v20[v19] > a3) {
        break;
      }
      if ((unint64_t)v20 >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        char v58 = "get_tile_info";
        __int16 v59 = 1024;
        int v60 = 1307;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      uint64_t v21 = v15 + v18;
      a4[v21 + 72] = v20;
      if (HIDWORD(v19) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        char v58 = "get_tile_info";
        __int16 v59 = 1024;
        int v60 = 1308;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      a4[v21 + 328] = v19;
      ++v18;
      unsigned int v17 = a4[71];
      if (v18 >= v17)
      {
        unsigned int v7 = a4[70];
        v15 += v18;
        int v8 = a4[71];
        goto LABEL_22;
      }
    }
    if ((*(unsigned char *)(a1 + 7886) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315906;
      char v58 = "get_tile_info";
      __int16 v59 = 1024;
      int v60 = v15 + v18;
      __int16 v61 = 2048;
      *(void *)unsigned int v62 = v20;
      *(_WORD *)&v62[8] = 2048;
      unint64_t v63 = v19;
      unsigned int v53 = &_os_log_internal;
      int v54 = "AppleAVD: %s: tile %d offset %lu size %lu corrupted\n";
      uint32_t v55 = 38;
      goto LABEL_48;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t LGH_Syntax::merge_probs(LGH_Syntax *this, const int *a2, unsigned int a3, unsigned __int8 *a4, const unsigned int *a5, unsigned int a6, unsigned int a7)
{
  signed int v14 = a2[a3];
  if (v14 <= 0) {
    unsigned int v15 = a5[-v14];
  }
  else {
    unsigned int v15 = LGH_Syntax::merge_probs(this, a2, v14, a4, a5, a6, a7);
  }
  signed int v16 = a2[a3 + 1];
  if (v16 <= 0) {
    unsigned int v17 = a5[-v16];
  }
  else {
    unsigned int v17 = LGH_Syntax::merge_probs(this, a2, v16, a4, a5, a6, a7);
  }
  uint64_t result = v17 + v15;
  if (result)
  {
    signed int v19 = ((result >> 1) + (v15 << 8)) / result;
    if (v19 >= 255) {
      signed int v19 = 255;
    }
    if (v19 <= 1) {
      LOWORD(v19) = 1;
    }
  }
  else
  {
    LOWORD(v19) = 128;
  }
  if ((int)result >= (int)a6) {
    unsigned int v20 = a6;
  }
  else {
    unsigned int v20 = result;
  }
  a4[(unint64_t)a3 >> 1] = (unsigned __int16)((256 - v20 * a7 / a6) * a4[(unint64_t)a3 >> 1]
                                                   + v20 * a7 / a6 * v19
                                                   + 128) >> 8;
  return result;
}

uint64_t LGH_Syntax::adapt_coef_probs(uint64_t this)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  int v1 = 112;
  if (!*(unsigned char *)(*(void *)(this + 80) + 74))
  {
    if (*(_DWORD *)(this + 88)) {
      int v1 = 112;
    }
    else {
      int v1 = 128;
    }
  }
  uint64_t v2 = 0;
  uint64_t v86 = 22;
  uint64_t v85 = 31;
  uint64_t v84 = 49;
  uint64_t v83 = 67;
  uint64_t v82 = 85;
  uint64_t v81 = 103;
  do
  {
    uint64_t v3 = 0;
    char v4 = 1;
    do
    {
      uint64_t v5 = 0;
      char v87 = v4;
      char v6 = 1;
      do
      {
        uint64_t v7 = 0;
        char v8 = v6;
        uint64_t v9 = 99 * v5;
        uint64_t v10 = v86 + 198 * v3 + 99 * v5;
        do
        {
          uint64_t v11 = 0;
          uint64_t v12 = *(void *)(this + 7728);
          uint64_t v13 = (_DWORD *)(v12 + 2112 * v2 + 1056 * v3 + 528 * v5 + 16 * v7);
          int v14 = v13[546];
          int v15 = v13[547];
          int v16 = v13[548];
          int v88 = v13[549];
          int v89 = *(_DWORD *)(v12 + 528 * v2 + 264 * v3 + 132 * v5 + 4 * v7 + 72) - v88;
          int v90 = v14;
          int v91 = v16 + v15;
          int v92 = v15;
          int v93 = v16;
          uint64_t v17 = v10;
          do
          {
            int v18 = *(int *)((char *)&v88 + v11);
            int v19 = *(int *)((char *)&v88 + v11 + 4) + v18;
            if (v19)
            {
              signed int v20 = ((v19 >> 1) + (v18 << 8)) / v19;
              if (v20 >= 255) {
                signed int v20 = 255;
              }
              if (v20 <= 1) {
                LOWORD(v20) = 1;
              }
            }
            else
            {
              LOWORD(v20) = 128;
            }
            v11 += 8;
            if (v19 >= 24) {
              int v19 = 24;
            }
            *(unsigned char *)(*(void *)(this + 96) + v17) = (unsigned __int16)(v20 * (v19 * v1 / 0x18u)
                                                                        + (256 - v19 * v1 / 0x18u)
                                                                        * *(unsigned __int8 *)(*(void *)(this + 96)
                                                                                             + v17)
                                                                        + 128) >> 8;
            ++v17;
          }
          while (v11 != 24);
          ++v7;
          v10 += 3;
        }
        while (v7 != 3);
        uint64_t v21 = 0;
        uint64_t v22 = v85 + 198 * v3 + v9;
        do
        {
          uint64_t v23 = 0;
          uint64_t v24 = *(void *)(this + 7728);
          uint64_t v25 = (_DWORD *)(v24 + 2112 * v2 + 1056 * v3 + 528 * v5 + 16 * v21);
          int v26 = v25[558];
          int v27 = v25[559];
          int v28 = v25[560];
          int v88 = v25[561];
          int v89 = *(_DWORD *)(v24 + 528 * v2 + 264 * v3 + 132 * v5 + 4 * v21 + 84) - v88;
          int v90 = v26;
          int v91 = v28 + v27;
          int v92 = v27;
          int v93 = v28;
          uint64_t v29 = v22;
          do
          {
            int v30 = *(int *)((char *)&v88 + v23);
            int v31 = *(int *)((char *)&v88 + v23 + 4) + v30;
            if (v31)
            {
              signed int v32 = ((v31 >> 1) + (v30 << 8)) / v31;
              if (v32 >= 255) {
                signed int v32 = 255;
              }
              if (v32 <= 1) {
                LOWORD(v32) = 1;
              }
            }
            else
            {
              LOWORD(v32) = 128;
            }
            v23 += 8;
            if (v31 >= 24) {
              int v31 = 24;
            }
            *(unsigned char *)(*(void *)(this + 96) + v29) = (unsigned __int16)(v32 * (v31 * v1 / 0x18u)
                                                                        + (256 - v31 * v1 / 0x18u)
                                                                        * *(unsigned __int8 *)(*(void *)(this + 96)
                                                                                             + v29)
                                                                        + 128) >> 8;
            ++v29;
          }
          while (v23 != 24);
          ++v21;
          v22 += 3;
        }
        while (v21 != 6);
        uint64_t v33 = 0;
        uint64_t v34 = v84 + 198 * v3 + v9;
        do
        {
          uint64_t v35 = 0;
          uint64_t v36 = *(void *)(this + 7728);
          uint64_t v37 = (_DWORD *)(v36 + 2112 * v2 + 1056 * v3 + 528 * v5 + 16 * v33);
          int v38 = v37[582];
          int v39 = v37[583];
          int v40 = v37[584];
          int v88 = v37[585];
          int v89 = *(_DWORD *)(v36 + 528 * v2 + 264 * v3 + 132 * v5 + 4 * v33 + 108) - v88;
          int v90 = v38;
          int v91 = v40 + v39;
          int v92 = v39;
          int v93 = v40;
          uint64_t v41 = v34;
          do
          {
            int v42 = *(int *)((char *)&v88 + v35);
            int v43 = *(int *)((char *)&v88 + v35 + 4) + v42;
            if (v43)
            {
              signed int v44 = ((v43 >> 1) + (v42 << 8)) / v43;
              if (v44 >= 255) {
                signed int v44 = 255;
              }
              if (v44 <= 1) {
                LOWORD(v44) = 1;
              }
            }
            else
            {
              LOWORD(v44) = 128;
            }
            v35 += 8;
            if (v43 >= 24) {
              int v43 = 24;
            }
            *(unsigned char *)(*(void *)(this + 96) + v41) = (unsigned __int16)(v44 * (v43 * v1 / 0x18u)
                                                                        + (256 - v43 * v1 / 0x18u)
                                                                        * *(unsigned __int8 *)(*(void *)(this + 96)
                                                                                             + v41)
                                                                        + 128) >> 8;
            ++v41;
          }
          while (v35 != 24);
          ++v33;
          v34 += 3;
        }
        while (v33 != 6);
        uint64_t v45 = 0;
        uint64_t v46 = v83 + 198 * v3 + v9;
        do
        {
          uint64_t v47 = 0;
          uint64_t v48 = *(void *)(this + 7728);
          int32x2_t v49 = (_DWORD *)(v48 + 2112 * v2 + 1056 * v3 + 528 * v5 + 16 * v45);
          int v50 = v49[606];
          int v51 = v49[607];
          int v52 = v49[608];
          int v88 = v49[609];
          int v89 = *(_DWORD *)(v48 + 528 * v2 + 264 * v3 + 132 * v5 + 4 * v45 + 132) - v88;
          int v90 = v50;
          int v91 = v52 + v51;
          int v92 = v51;
          int v93 = v52;
          uint64_t v53 = v46;
          do
          {
            int v54 = *(int *)((char *)&v88 + v47);
            int v55 = *(int *)((char *)&v88 + v47 + 4) + v54;
            if (v55)
            {
              signed int v56 = ((v55 >> 1) + (v54 << 8)) / v55;
              if (v56 >= 255) {
                signed int v56 = 255;
              }
              if (v56 <= 1) {
                LOWORD(v56) = 1;
              }
            }
            else
            {
              LOWORD(v56) = 128;
            }
            v47 += 8;
            if (v55 >= 24) {
              int v55 = 24;
            }
            *(unsigned char *)(*(void *)(this + 96) + v53) = (unsigned __int16)(v56 * (v55 * v1 / 0x18u)
                                                                        + (256 - v55 * v1 / 0x18u)
                                                                        * *(unsigned __int8 *)(*(void *)(this + 96)
                                                                                             + v53)
                                                                        + 128) >> 8;
            ++v53;
          }
          while (v47 != 24);
          ++v45;
          v46 += 3;
        }
        while (v45 != 6);
        uint64_t v57 = 0;
        uint64_t v58 = v82 + 198 * v3 + v9;
        do
        {
          uint64_t v59 = 0;
          uint64_t v60 = *(void *)(this + 7728);
          __int16 v61 = (_DWORD *)(v60 + 2112 * v2 + 1056 * v3 + 528 * v5 + 16 * v57);
          int v62 = v61[630];
          int v63 = v61[631];
          int v64 = v61[632];
          int v88 = v61[633];
          int v89 = *(_DWORD *)(v60 + 528 * v2 + 264 * v3 + 132 * v5 + 4 * v57 + 156) - v88;
          int v90 = v62;
          int v91 = v64 + v63;
          int v92 = v63;
          int v93 = v64;
          uint64_t v65 = v58;
          do
          {
            int v66 = *(int *)((char *)&v88 + v59);
            int v67 = *(int *)((char *)&v88 + v59 + 4) + v66;
            if (v67)
            {
              signed int v68 = ((v67 >> 1) + (v66 << 8)) / v67;
              if (v68 >= 255) {
                signed int v68 = 255;
              }
              if (v68 <= 1) {
                LOWORD(v68) = 1;
              }
            }
            else
            {
              LOWORD(v68) = 128;
            }
            v59 += 8;
            if (v67 >= 24) {
              int v67 = 24;
            }
            *(unsigned char *)(*(void *)(this + 96) + v65) = (unsigned __int16)(v68 * (v67 * v1 / 0x18u)
                                                                        + (256 - v67 * v1 / 0x18u)
                                                                        * *(unsigned __int8 *)(*(void *)(this + 96)
                                                                                             + v65)
                                                                        + 128) >> 8;
            ++v65;
          }
          while (v59 != 24);
          ++v57;
          v58 += 3;
        }
        while (v57 != 6);
        uint64_t v69 = 0;
        uint64_t v70 = v81 + 198 * v3 + v9;
        do
        {
          uint64_t v71 = 0;
          uint64_t v72 = *(void *)(this + 7728);
          uint64_t v73 = (_DWORD *)(v72 + 2112 * v2 + 1056 * v3 + 528 * v5 + 16 * v69);
          int v74 = v73[654];
          int v75 = v73[655];
          int v76 = v73[656];
          int v88 = v73[657];
          int v89 = *(_DWORD *)(v72 + 528 * v2 + 264 * v3 + 132 * v5 + 4 * v69 + 180) - v88;
          int v90 = v74;
          int v91 = v76 + v75;
          int v92 = v75;
          int v93 = v76;
          uint64_t v77 = v70;
          do
          {
            int v78 = *(int *)((char *)&v88 + v71);
            int v79 = *(int *)((char *)&v88 + v71 + 4) + v78;
            if (v79)
            {
              signed int v80 = ((v79 >> 1) + (v78 << 8)) / v79;
              if (v80 >= 255) {
                signed int v80 = 255;
              }
              if (v80 <= 1) {
                LOWORD(v80) = 1;
              }
            }
            else
            {
              LOWORD(v80) = 128;
            }
            v71 += 8;
            if (v79 >= 24) {
              int v79 = 24;
            }
            *(unsigned char *)(*(void *)(this + 96) + v77) = (unsigned __int16)(v80 * (v79 * v1 / 0x18u)
                                                                        + (256 - v79 * v1 / 0x18u)
                                                                        * *(unsigned __int8 *)(*(void *)(this + 96)
                                                                                             + v77)
                                                                        + 128) >> 8;
            ++v77;
          }
          while (v71 != 24);
          ++v69;
          v70 += 3;
        }
        while (v69 != 6);
        char v6 = 0;
        uint64_t v5 = 1;
      }
      while ((v8 & 1) != 0);
      char v4 = 0;
      uint64_t v3 = 1;
    }
    while ((v87 & 1) != 0);
    ++v2;
    v85 += 396;
    v86 += 396;
    v83 += 396;
    v84 += 396;
    v81 += 396;
    v82 += 396;
  }
  while (v2 != 4);
  return this;
}

uint64_t LGH_Syntax::adapt_noncoef_probs(LGH_Syntax *this)
{
  uint64_t v2 = 1638;
  uint64_t v3 = 10820;
  do
  {
    char v4 = (_DWORD *)(*((void *)this + 966) + v3);
    int v5 = *(v4 - 1);
    int v6 = *v4 + v5;
    if (v6)
    {
      signed int v7 = ((v6 >> 1) + (v5 << 8)) / v6;
      if (v7 >= 255) {
        signed int v7 = 255;
      }
      if (v7 <= 1) {
        LOWORD(v7) = 1;
      }
    }
    else
    {
      LOWORD(v7) = 128;
    }
    if (v6 >= 20) {
      int v6 = 20;
    }
    *(unsigned char *)(*((void *)this + 12) + v2) = (unsigned __int16)(v7 * ((v6 << 7) / 0x14u)
                                                               + (256 - (v6 << 7) / 0x14u)
                                                               * *(unsigned __int8 *)(*((void *)this + 12) + v2)
                                                               + 128) >> 8;
    ++v2;
    v3 += 8;
  }
  while (v2 != 1642);
  uint64_t v8 = 10852;
  do
  {
    uint64_t v9 = (_DWORD *)(*((void *)this + 966) + v8);
    int v10 = *(v9 - 1);
    int v11 = *v9 + v10;
    if (v11)
    {
      signed int v12 = ((v11 >> 1) + (v10 << 8)) / v11;
      if (v12 >= 255) {
        signed int v12 = 255;
      }
      if (v12 <= 1) {
        LOWORD(v12) = 1;
      }
    }
    else
    {
      LOWORD(v12) = 128;
    }
    if (v11 >= 20) {
      int v11 = 20;
    }
    *(unsigned char *)(*((void *)this + 12) + v2) = (unsigned __int16)(v12 * ((v11 << 7) / 0x14u)
                                                               + (256 - (v11 << 7) / 0x14u)
                                                               * *(unsigned __int8 *)(*((void *)this + 12) + v2)
                                                               + 128) >> 8;
    ++v2;
    v8 += 8;
  }
  while (v2 != 1647);
  uint64_t v13 = 1657;
  uint64_t v14 = 10972;
  do
  {
    int v15 = (_DWORD *)(*((void *)this + 966) + v14);
    int v16 = *(v15 - 1);
    int v17 = *v15 + v16;
    if (v17)
    {
      signed int v18 = ((v17 >> 1) + (v16 << 8)) / v17;
      if (v18 >= 255) {
        signed int v18 = 255;
      }
      if (v18 <= 1) {
        LOWORD(v18) = 1;
      }
    }
    else
    {
      LOWORD(v18) = 128;
    }
    if (v17 >= 20) {
      int v17 = 20;
    }
    *(unsigned char *)(*((void *)this + 12) + v13) = (unsigned __int16)(v18 * ((v17 << 7) / 0x14u)
                                                                + (256 - (v17 << 7) / 0x14u)
                                                                * *(unsigned __int8 *)(*((void *)this + 12) + v13)
                                                                + 128) >> 8;
    ++v13;
    v14 += 8;
  }
  while (v13 != 1662);
  for (uint64_t i = 0; i != 5; ++i)
  {
    uint64_t v20 = 0;
    char v21 = 1;
    do
    {
      char v22 = v21;
      uint64_t v23 = *((void *)this + 966) + 16 * i + 8 * v20;
      int v24 = *(_DWORD *)(v23 + 10888);
      int v25 = *(_DWORD *)(v23 + 10892) + v24;
      if (v25)
      {
        signed int v26 = ((v25 >> 1) + (v24 << 8)) / v25;
        if (v26 >= 255) {
          signed int v26 = 255;
        }
        if (v26 <= 1) {
          __int16 v27 = 1;
        }
        else {
          __int16 v27 = v26;
        }
      }
      else
      {
        __int16 v27 = 128;
      }
      char v21 = 0;
      if (v25 >= 20) {
        int v25 = 20;
      }
      int v28 = (unsigned char *)(*((void *)this + 12) + 2 * i + v20 + 1647);
      *int v28 = (unsigned __int16)(v27 * ((v25 << 7) / 0x14u) + (256 - (v25 << 7) / 0x14u) * *v28 + 128) >> 8;
      uint64_t v20 = 1;
    }
    while ((v22 & 1) != 0);
  }
  uint64_t v29 = 1609;
  uint64_t v30 = 10656;
  do
  {
    LGH_Syntax::merge_probs(this, inter_mode_tree, 0, (unsigned __int8 *)(*((void *)this + 12) + v29), (const unsigned int *)(*((void *)this + 966) + v30), 0x14u, 0x80u);
    v29 += 3;
    v30 += 16;
  }
  while (v29 != 1630);
  uint64_t v31 = 1662;
  uint64_t v32 = 11008;
  do
  {
    LGH_Syntax::merge_probs(this, intra_mode_tree, 0, (unsigned __int8 *)(*((void *)this + 12) + v31), (const unsigned int *)(*((void *)this + 966) + v32), 0x14u, 0x80u);
    v31 += 9;
    v32 += 40;
  }
  while (v31 != 1698);
  uint64_t v33 = 11168;
  do
  {
    LGH_Syntax::merge_probs(this, intra_mode_tree, 0, (unsigned __int8 *)(*((void *)this + 12) + v31), (const unsigned int *)(*((void *)this + 966) + v33), 0x14u, 0x80u);
    v31 += 9;
    v33 += 40;
  }
  while (v31 != 1788);
  uint64_t v34 = 11568;
  do
  {
    LGH_Syntax::merge_probs(this, partition_tree, 0, (unsigned __int8 *)(*((void *)this + 12) + v31), (const unsigned int *)(*((void *)this + 966) + v34), 0x14u, 0x80u);
    v31 += 3;
    v34 += 16;
  }
  while (v31 != 1836);
  uint64_t v35 = 1606;
  uint64_t v36 = 10636;
  do
  {
    uint64_t v37 = (_DWORD *)(*((void *)this + 966) + v36);
    int v38 = *(v37 - 1);
    int v39 = *v37 + v38;
    if (v39)
    {
      signed int v40 = ((v39 >> 1) + (v38 << 8)) / v39;
      if (v40 >= 255) {
        signed int v40 = 255;
      }
      if (v40 <= 1) {
        LOWORD(v40) = 1;
      }
    }
    else
    {
      LOWORD(v40) = 128;
    }
    if (v39 >= 20) {
      int v39 = 20;
    }
    *(unsigned char *)(*((void *)this + 12) + v35) = (unsigned __int16)(v40 * ((v39 << 7) / 0x14u)
                                                                + (256 - (v39 << 7) / 0x14u)
                                                                * *(unsigned __int8 *)(*((void *)this + 12) + v35)
                                                                + 128) >> 8;
    ++v35;
    v36 += 8;
  }
  while (v35 != 1609);
  if (*(unsigned char *)(*((void *)this + 10) + 22) == 4)
  {
    uint64_t v41 = 1630;
    uint64_t v42 = 10768;
    do
    {
      LGH_Syntax::merge_probs(this, interp_filter_tree, 0, (unsigned __int8 *)(*((void *)this + 12) + v41), (const unsigned int *)(*((void *)this + 966) + v42), 0x14u, 0x80u);
      v41 += 2;
      v42 += 12;
    }
    while (v41 != 1638);
  }
  if (**((unsigned char **)this + 967) == 4)
  {
    uint64_t v43 = 0;
    char v44 = 1;
    do
    {
      char v45 = v44;
      LGH_Syntax::merge_probs(this, (const int *)&tx_size_8_tree, 0, (unsigned __int8 *)(*((void *)this + 12) + v43 + 10), (const unsigned int *)(*((void *)this + 966) + 8 * v43), 0x14u, 0x80u);
      LGH_Syntax::merge_probs(this, tx_size_16_tree, 0, (unsigned __int8 *)(*((void *)this + 12) + 2 * v43 + 12), (const unsigned int *)(*((void *)this + 966) + 12 * v43 + 16), 0x14u, 0x80u);
      LGH_Syntax::merge_probs(this, tx_size_32_tree, 0, (unsigned __int8 *)(*((void *)this + 12) + 3 * v43 + 16), (const unsigned int *)(*((void *)this + 966) + 16 * v43 + 40), 0x14u, 0x80u);
      char v44 = 0;
      uint64_t v43 = 1;
    }
    while ((v45 & 1) != 0);
  }
  LGH_Syntax::merge_probs(this, mv_joint_tree, 0, (unsigned __int8 *)(*((void *)this + 12) + 1836), (const unsigned int *)(*((void *)this + 966) + 11824), 0x14u, 0x80u);
  uint64_t v46 = 0;
  char v47 = 1;
  do
  {
    char v48 = v47;
    uint64_t v49 = *((void *)this + 966);
    uint64_t v50 = v49 + 140 * v46;
    int v51 = *(_DWORD *)(v50 + 11840);
    int v52 = *(_DWORD *)(v50 + 11844) + v51;
    char v78 = v48;
    if (v52)
    {
      signed int v53 = ((v52 >> 1) + (v51 << 8)) / v52;
      if (v53 >= 255) {
        signed int v53 = 255;
      }
      if (v53 <= 1) {
        LOWORD(v53) = 1;
      }
    }
    else
    {
      LOWORD(v53) = 128;
    }
    uint64_t v54 = *((void *)this + 12);
    if (v52 >= 20) {
      int v52 = 20;
    }
    *(unsigned char *)(v54 + 22 * v46 + 1839) = (unsigned __int16)(v53 * ((v52 << 7) / 0x14u)
                                                         + (256 - (v52 << 7) / 0x14u)
                                                         * *(unsigned __int8 *)(v54 + 22 * v46 + 1839)
                                                         + 128) >> 8;
    __int16 v55 = 128;
    LGH_Syntax::merge_probs(this, mv_class_tree, 0, (unsigned __int8 *)(v54 + 22 * v46 + 1840), (const unsigned int *)(v49 + 11848 + 140 * v46), 0x14u, 0x80u);
    uint64_t v56 = *((void *)this + 966) + 140 * v46;
    int v57 = *(_DWORD *)(v56 + 11892);
    int v58 = *(_DWORD *)(v56 + 11896) + v57;
    if (v58)
    {
      signed int v59 = ((v58 >> 1) + (v57 << 8)) / v58;
      if (v59 >= 255) {
        signed int v59 = 255;
      }
      if (v59 <= 1) {
        __int16 v55 = 1;
      }
      else {
        __int16 v55 = v59;
      }
    }
    uint64_t v60 = 0;
    if (v58 >= 20) {
      int v58 = 20;
    }
    *(unsigned char *)(*((void *)this + 12) + 22 * v46 + 1850) = (unsigned __int16)(v55 * ((v58 << 7) / 0x14u)
                                                                            + (256 - (v58 << 7) / 0x14u)
                                                                            * *(unsigned __int8 *)(*((void *)this + 12)
                                                                                                 + 22 * v46
                                                                                                 + 1850)
                                                                            + 128) >> 8;
    uint64_t v61 = 140 * v46 + 11904;
    do
    {
      int v62 = (_DWORD *)(*((void *)this + 966) + v61);
      int v63 = *(v62 - 1);
      int v64 = *v62 + v63;
      if (v64)
      {
        signed int v65 = ((v64 >> 1) + (v63 << 8)) / v64;
        if (v65 >= 255) {
          signed int v65 = 255;
        }
        if (v65 <= 1) {
          LOWORD(v65) = 1;
        }
      }
      else
      {
        LOWORD(v65) = 128;
      }
      if (v64 >= 20) {
        int v64 = 20;
      }
      *(unsigned char *)(*((void *)this + 12) + 22 * v46 + 1851 + v60) = (unsigned __int16)(v65 * ((v64 << 7) / 0x14u)
                                                                                    + (256 - (v64 << 7) / 0x14u)
                                                                                    * *(unsigned __int8 *)(*((void *)this + 12) + 22 * v46 + 1851 + v60)
                                                                                    + 128) >> 8;
      ++v60;
      v61 += 8;
    }
    while (v60 != 10);
    LGH_Syntax::merge_probs(this, mv_fp_tree, 0, (unsigned __int8 *)(*((void *)this + 12) + 9 * v46 + 1883), (const unsigned int *)(*((void *)this + 966) + 48 * v46 + 12120), 0x14u, 0x80u);
    LGH_Syntax::merge_probs(this, mv_fp_tree, 0, (unsigned __int8 *)(*((void *)this + 12) + 9 * v46 + 1886), (const unsigned int *)(*((void *)this + 966) + 48 * v46 + 12136), 0x14u, 0x80u);
    uint64_t result = LGH_Syntax::merge_probs(this, mv_fp_tree, 0, (unsigned __int8 *)(*((void *)this + 12) + 9 * v46 + 1889), (const unsigned int *)(*((void *)this + 966) + 48 * v46 + 12152), 0x14u, 0x80u);
    if (*(unsigned char *)(*((void *)this + 10) + 21))
    {
      int v67 = (_DWORD *)(*((void *)this + 966) + 16 * v46);
      int v68 = v67[3054];
      int v69 = v67[3055] + v68;
      if (v69)
      {
        signed int v70 = ((v69 >> 1) + (v68 << 8)) / v69;
        if (v70 >= 255) {
          signed int v70 = 255;
        }
        if (v70 <= 1) {
          __int16 v71 = 1;
        }
        else {
          __int16 v71 = v70;
        }
      }
      else
      {
        __int16 v71 = 128;
      }
      uint64_t v72 = *((void *)this + 12) + 2 * v46;
      if (v69 >= 20) {
        int v69 = 20;
      }
      *(unsigned char *)(v72 + 1901) = (unsigned __int16)(v71 * ((v69 << 7) / 0x14u)
                                                + (256 - (v69 << 7) / 0x14u) * *(unsigned __int8 *)(v72 + 1901)
                                                + 128) >> 8;
      int v73 = v67[3056];
      int v74 = v67[3057] + v73;
      if (v74)
      {
        signed int v75 = ((v74 >> 1) + (v73 << 8)) / v74;
        if (v75 >= 255) {
          signed int v75 = 255;
        }
        if (v75 <= 1) {
          LOWORD(v75) = 1;
        }
      }
      else
      {
        LOWORD(v75) = 128;
      }
      int v76 = (unsigned char *)(v72 + 1902);
      __int16 v77 = *(unsigned __int8 *)(v72 + 1902);
      if (v74 >= 20) {
        int v74 = 20;
      }
      *int v76 = (unsigned __int16)(v75 * ((v74 << 7) / 0x14u) + (256 - (v74 << 7) / 0x14u) * v77 + 128) >> 8;
    }
    char v47 = 0;
    uint64_t v46 = 1;
  }
  while ((v78 & 1) != 0);
  return result;
}

char *LGH_Syntax::refresh_probs(char *this)
{
  int v1 = (LGH_Syntax *)this;
  uint64_t v2 = (unsigned char *)*((void *)this + 10);
  if (v2[7] || v2[24])
  {
    if (v2[74])
    {
      uint64_t v3 = (_OWORD *)(*((void *)this + 12) + 1698);
      long long v4 = *((_OWORD *)this + 485);
      _OWORD *v3 = *((_OWORD *)this + 484);
      v3[1] = v4;
      long long v5 = *((_OWORD *)this + 486);
      long long v6 = *((_OWORD *)this + 487);
      long long v7 = *((_OWORD *)this + 488);
      *(_OWORD *)((char *)v3 + 74) = *(_OWORD *)(this + 7818);
      v3[3] = v6;
      v3[4] = v7;
      v3[2] = v5;
      uint64_t v8 = (_OWORD *)(*((void *)this + 12) + 1788);
      long long v9 = *(_OWORD *)(this + 7834);
      long long v10 = *(_OWORD *)(this + 7866);
      v8[1] = *(_OWORD *)(this + 7850);
      v8[2] = v10;
      *uint64_t v8 = v9;
    }
  }
  else
  {
    LGH_Syntax::load_probs((LGH_Syntax *)this, v2[25]);
    this = (char *)LGH_Syntax::adapt_coef_probs((uint64_t)v1);
    uint64_t v14 = *((void *)v1 + 10);
    if (!*(unsigned char *)(v14 + 74))
    {
      int v15 = (char *)v1 + 1905 * *(unsigned __int8 *)(v14 + 25);
      *(_WORD *)(*((void *)v1 + 12) + 10) = *((_WORD *)v15 + 57);
      *(_DWORD *)(*((void *)v1 + 12) + 12) = *((_DWORD *)v15 + 29);
      uint64_t v16 = *((void *)v1 + 12);
      int v17 = *((_DWORD *)v15 + 30);
      *(_WORD *)(v16 + 20) = *((_WORD *)v15 + 62);
      *(_DWORD *)(v16 + 16) = v17;
      uint64_t v18 = *((void *)v1 + 12);
      LOWORD(v17) = *((_WORD *)v15 + 855);
      *(unsigned char *)(v18 + 1608) = v15[1712];
      *(_WORD *)(v18 + 1606) = v17;
      this = (char *)LGH_Syntax::adapt_noncoef_probs(v1);
    }
  }
  uint64_t v11 = *((void *)v1 + 10);
  if (*(unsigned char *)(v11 + 23))
  {
    signed int v12 = (char *)v1 + 1905 * *(unsigned __int8 *)(v11 + 25) + 104;
    uint64_t v13 = (const void *)*((void *)v1 + 12);
    return (char *)memcpy(v12, v13, 0x771uLL);
  }
  return this;
}

__n128 LGH_Syntax::Update_Frame_Context_Parallel(LGH_Syntax *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 10);
  if (*(unsigned char *)(v2 + 23))
  {
    int v5 = *(unsigned __int8 *)(v2 + 74);
    memcpy((char *)this + 1905 * a2 + 104, *((const void **)this + 12), 0x771uLL);
    if (v5)
    {
      long long v7 = *((_OWORD *)this + 487);
      uint64_t v8 = (char *)this + 1905 * a2;
      *(_OWORD *)(v8 + 1834) = *((_OWORD *)this + 486);
      *(_OWORD *)(v8 + 1850) = v7;
      *(_OWORD *)(v8 + 1866) = *((_OWORD *)this + 488);
      *(_OWORD *)(v8 + 1876) = *(_OWORD *)((char *)this + 7818);
      long long v9 = *((_OWORD *)this + 485);
      *(_OWORD *)(v8 + 1802) = *((_OWORD *)this + 484);
      *(_OWORD *)(v8 + 1818) = v9;
      v8 += 1892;
      long long v10 = *(_OWORD *)((char *)this + 7850);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)((char *)this + 7834);
      *((_OWORD *)v8 + 1) = v10;
      __n128 result = *(__n128 *)((char *)this + 7866);
      *((__n128 *)v8 + 2) = result;
    }
  }
  return result;
}

void LGH_Syntax::LGH_Syntax(LGH_Syntax *this, int a2)
{
  *(void *)this = &unk_26D73E390;
  *((void *)this + 12) = 0;
  *((void *)this + 966) = 0;
  *((_DWORD *)this + 1971) = a2;
}

void LGH_Syntax::~LGH_Syntax(LGH_Syntax *this)
{
}

uint64_t LGH_Syntax::Get_Position(LGH_Syntax *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 2) - *((void *)this + 1);
  uint64_t v2 = *((unsigned int *)this + 11);
  if ((unint64_t)(8 * v1 - v2) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    long long v6 = "Get_Position";
    __int16 v7 = 1024;
    int v8 = 1543;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v5, 0x12u);
    LODWORD(v2) = *((_DWORD *)this + 11);
    uint64_t v1 = *((void *)this + 2) - *((void *)this + 1);
  }
  return (8 * v1 - v2);
}

uint64_t LGH_Syntax::Set_Frame_Context(uint64_t result, uint64_t a2)
{
  *(void *)(result + 96) = a2;
  return result;
}

uint64_t LGH_Syntax::Parse_Header(LGH_Syntax *this, unsigned __int8 *a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 12);
  if (!a4 || !v6)
  {
    if ((*((unsigned char *)this + 7886) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    int v29 = 136315650;
    *(void *)uint64_t v30 = "Parse_Header";
    *(_WORD *)&v30[8] = 2048;
    uint64_t v31 = v6;
    __int16 v32 = 2048;
    uint64_t v33 = a4;
    int v17 = &_os_log_internal;
    uint64_t v18 = "AppleAVD: %s: need frame context %p and header %p\n";
    uint32_t v19 = 32;
    goto LABEL_23;
  }
  int v8 = 0;
  int v9 = 0;
  *((void *)this + 10) = a4;
  *((void *)this + 967) = a4 + 68;
  long long v10 = &a2[a3];
  *((void *)this + 3) = &a2[a3];
  *((void *)this + 4) = a3;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a2;
  int v11 = 4;
  *((_DWORD *)this + 11) = 0;
  do
  {
    v9 <<= 8;
    if (a2 < v10)
    {
      v8 += 8;
      *((_DWORD *)this + 11) = v8;
      *((void *)this + 2) = a2 + 1;
      v9 |= *a2++;
    }
    --v11;
  }
  while (v11);
  if ((*((_DWORD *)this + 1971) & 0x40001) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = 67109376;
    *(_DWORD *)uint64_t v30 = v9;
    *(_WORD *)&v30[4] = 1024;
    *(_DWORD *)&v30[6] = v8;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: next_32bits: %x m_bits_left %d\n", (uint8_t *)&v29, 0xEu);
  }
  *((_DWORD *)this + 10) = v9;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  if (LGH_Syntax::uncompressed_header(this)
    || LGH_Syntax::get_bits(this, "trailing", *((_DWORD *)this + 11) & 7))
  {
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = *((void *)this + 10);
  if (!*(_WORD *)(v12 + 2)) {
    return 0;
  }
  unint64_t v13 = *((void *)this + 2);
  unint64_t v14 = *((void *)this + 3);
  unint64_t v15 = v13 - ((unint64_t)*((unsigned int *)this + 11) >> 3) + *(unsigned __int16 *)(v12 + 2);
  *((void *)this + 9) = v15;
  if (v15 <= v14 && v15 + 4 >= v13)
  {
    LGH_Syntax::load_probs_all(this, *(unsigned __int8 *)(v12 + 25));
    LGH_Syntax::init_BOOL(this, *(unsigned __int16 *)(*((void *)this + 10) + 2));
    if (LGH_Syntax::compressed_header(this)
      || LGH_Syntax::exit_BOOL(this)
      || LGH_Syntax::get_tile_info((uint64_t)this, *((unsigned int **)this + 9), a3, a4))
    {
      return 0xFFFFFFFFLL;
    }
    if (*(unsigned char *)(*((void *)this + 10) + 74))
    {
      uint64_t result = 0;
      char v21 = (_OWORD *)(*((void *)this + 12) + 1698);
      long long v22 = *(_OWORD *)(*((void *)this + 12) + 1714);
      *((_OWORD *)this + 484) = *v21;
      *((_OWORD *)this + 485) = v22;
      long long v24 = v21[3];
      long long v23 = v21[4];
      long long v25 = *(_OWORD *)((char *)v21 + 74);
      *((_OWORD *)this + 486) = v21[2];
      *(_OWORD *)((char *)this + 7818) = v25;
      *((_OWORD *)this + 488) = v23;
      *((_OWORD *)this + 487) = v24;
      *(_OWORD *)((char *)v21 + 74) = *(long long *)((char *)&xmmword_223ADB280 + 10);
      v21[3] = unk_223ADB270;
      v21[4] = xmmword_223ADB280;
      v21[1] = unk_223ADB250;
      _OWORD v21[2] = xmmword_223ADB260;
      *char v21 = default_kf_uv_mode_prob;
      signed int v26 = (long long *)(*((void *)this + 12) + 1788);
      long long v27 = *(_OWORD *)(*((void *)this + 12) + 1820);
      long long v28 = *v26;
      *(_OWORD *)((char *)this + 7850) = *(_OWORD *)(*((void *)this + 12) + 1804);
      *(_OWORD *)((char *)this + 7866) = v27;
      *(_OWORD *)((char *)this + 7834) = v28;
      long long *v26 = default_kf_partition_prob;
      v26[1] = unk_223ADB2AA;
      v26[2] = xmmword_223ADB2BA;
      return result;
    }
    return 0;
  }
  if ((*((unsigned char *)this + 7886) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
    return 0xFFFFFFFFLL;
  }
  int v29 = 136315138;
  *(void *)uint64_t v30 = "Parse_Header";
  int v17 = &_os_log_internal;
  uint64_t v18 = "AppleAVD: %s: parsing error, wrong tile start";
  uint32_t v19 = 12;
LABEL_23:
  _os_log_impl(&dword_223977000, v17, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v29, v19);
  return 0xFFFFFFFFLL;
}

void LGH_Syntax::init_BOOL(LGH_Syntax *this, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 14) = 1;
  *((_DWORD *)this + 15) = LGH_Syntax::get_bits(this, "init_BOOL", 8u);
  *((_DWORD *)this + 16) = 255;
  unint64_t v4 = 8 * a2 - 8;
  if (HIDWORD(v4) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = "init_BOOL";
    __int16 v7 = 1024;
    int v8 = 279;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v5, 0x12u);
  }
  *((_DWORD *)this + 17) = v4;
}

uint64_t LGH_Syntax::exit_BOOL(LGH_Syntax *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned int v2 = *((_DWORD *)this + 17);
  if (v2)
  {
    if (v2 > 0x20)
    {
      if ((*((_DWORD *)this + 1971) & 0x40001) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v3 = *((_DWORD *)this + 11);
        int v5 = 136315650;
        uint64_t v6 = "exit_BOOL";
        __int16 v7 = 1024;
        unsigned int v8 = v2;
        __int16 v9 = 1024;
        int v10 = v3;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: skip m_BOOL_max_bits %d - m_bits_left %d\n", (uint8_t *)&v5, 0x18u);
        unsigned int v2 = *((_DWORD *)this + 17);
      }
      *((void *)this + 2) += (v2 - *((_DWORD *)this + 11)) >> 3;
      *((void *)this + 5) = 0;
    }
    else
    {
      LGH_Syntax::get_bits(this, "padding", *((_DWORD *)this + 17));
    }
    *((_DWORD *)this + 17) = 0;
  }
  *((_DWORD *)this + 14) = 0;
  return 0;
}

char *LGH_Syntax::Set_Context_Counter(char *this, uint64_t a2)
{
  if (a2)
  {
    if (!**((unsigned char **)this + 10))
    {
      *((void *)this + 966) = a2;
      return LGH_Syntax::refresh_probs(this);
    }
  }
  return this;
}

uint64_t LGH_Syntax::get_bits(LGH_Syntax *this, const char *a2, unsigned int a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  unsigned int v6 = *((_DWORD *)this + 10);
  unsigned int v7 = *((_DWORD *)this + 11);
  unsigned int v8 = a3 - v7;
  if (a3 <= v7)
  {
    unsigned int v14 = 0;
    unsigned int v9 = *((_DWORD *)this + 10);
    unsigned int v8 = a3;
  }
  else
  {
    unsigned int v9 = 0;
    char v10 = 32 - v7;
    *((_DWORD *)this + 11) = 0;
    uint64_t v12 = (unsigned __int8 *)*((void *)this + 2);
    unint64_t v11 = *((void *)this + 3);
    int v13 = 4;
    unsigned int v7 = 0;
    do
    {
      v9 <<= 8;
      if ((unint64_t)v12 < v11)
      {
        v7 += 8;
        *((_DWORD *)this + 11) = v7;
        *((void *)this + 2) = v12 + 1;
        v9 |= *v12++;
      }
      --v13;
    }
    while (v13);
    unsigned int v14 = v6 >> v10 << v8;
    if ((*((_DWORD *)this + 1971) & 0x40001) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 67109376;
      unsigned int v20 = v9;
      __int16 v21 = 1024;
      LODWORD(v22) = v7;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: next_32bits: %x m_bits_left %d\n", (uint8_t *)&v19, 0xEu);
      unsigned int v7 = *((_DWORD *)this + 11);
    }
  }
  uint64_t v15 = (v9 >> -(char)v8) | v14;
  int v16 = v9 << v8;
  unsigned int v17 = v7 - v8;
  *((_DWORD *)this + 10) = v16;
  *((_DWORD *)this + 11) = v17;
  if ((*((_DWORD *)this + 1971) & 0x40001) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = 67109890;
    unsigned int v20 = a3;
    __int16 v21 = 2080;
    long long v22 = a2;
    __int16 v23 = 1024;
    int v24 = v15;
    __int16 v25 = 1024;
    unsigned int v26 = v17;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: get_bits(%d): %s = %x, m_bits_left %d\n", (uint8_t *)&v19, 0x1Eu);
  }
  return v15;
}

uint64_t LGH_Syntax::decode_term_subexp(LGH_Syntax *this)
{
  unsigned int v3 = *((_DWORD *)this + 15);
  int v2 = *((_DWORD *)this + 16);
  unsigned int v4 = ((v2 << 7) - 128) >> 8;
  unsigned int v5 = v4 + 1;
  if (v3 <= v4)
  {
    unsigned int v6 = *((_DWORD *)this + 15);
  }
  else
  {
    unsigned int v6 = v3 - v5;
    unsigned int v5 = v2 - v5;
    *((_DWORD *)this + 15) = v6;
  }
  if (v5 <= 0x7F)
  {
    do
    {
      int v7 = *((_DWORD *)this + 17) - 1;
      *((_DWORD *)this + 16) = 2 * v5;
      *((_DWORD *)this + 17) = v7;
      unsigned int v6 = LGH_Syntax::get_bits(this, "bit", 1u) | (2 * v6);
      *((_DWORD *)this + 15) = v6;
      unsigned int v5 = *((_DWORD *)this + 16);
    }
    while (v5 < 0x80);
  }
  if (v3 <= v4)
  {
    unsigned __int8 v22 = 0;
    for (int i = 0; i != 4; ++i)
    {
      unsigned int v24 = (v5 << 7) - 128;
      int v25 = (v24 >> 8) + 1;
      if (v6 <= v24 >> 8)
      {
        char v26 = 0;
        unsigned int v5 = (v24 >> 8) + 1;
      }
      else
      {
        v5 -= v25;
        v6 -= v25;
        *((_DWORD *)this + 15) = v6;
        char v26 = 1;
      }
      *((_DWORD *)this + 16) = v5;
      if (v5 <= 0x7F)
      {
        do
        {
          int v27 = *((_DWORD *)this + 17) - 1;
          *((_DWORD *)this + 16) = 2 * v5;
          *((_DWORD *)this + 17) = v27;
          unsigned int v6 = LGH_Syntax::get_bits(this, "sub_exp_val", 1u) | (2 * v6);
          *((_DWORD *)this + 15) = v6;
          unsigned int v5 = *((_DWORD *)this + 16);
        }
        while (v5 < 0x80);
      }
      unsigned __int8 v22 = v26 | (2 * v22);
    }
  }
  else
  {
    unsigned int v8 = ((v5 << 7) - 128) >> 8;
    unsigned int v9 = v8 + 1;
    unsigned int v10 = v6;
    if (v6 > v8)
    {
      unsigned int v10 = v6 - v9;
      unsigned int v9 = v5 - v9;
      *((_DWORD *)this + 15) = v10;
    }
    if (v9 <= 0x7F)
    {
      do
      {
        int v11 = *((_DWORD *)this + 17) - 1;
        *((_DWORD *)this + 16) = 2 * v9;
        *((_DWORD *)this + 17) = v11;
        unsigned int v10 = LGH_Syntax::get_bits(this, "bit", 1u) | (2 * v10);
        *((_DWORD *)this + 15) = v10;
        unsigned int v9 = *((_DWORD *)this + 16);
      }
      while (v9 < 0x80);
    }
    if (v6 <= v8)
    {
      char v28 = 0;
      for (int j = 0; j != 4; ++j)
      {
        unsigned int v30 = (v9 << 7) - 128;
        int v31 = (v30 >> 8) + 1;
        if (v10 <= v30 >> 8)
        {
          char v32 = 0;
          unsigned int v9 = (v30 >> 8) + 1;
        }
        else
        {
          v9 -= v31;
          v10 -= v31;
          *((_DWORD *)this + 15) = v10;
          char v32 = 1;
        }
        *((_DWORD *)this + 16) = v9;
        if (v9 <= 0x7F)
        {
          do
          {
            int v33 = *((_DWORD *)this + 17) - 1;
            *((_DWORD *)this + 16) = 2 * v9;
            *((_DWORD *)this + 17) = v33;
            unsigned int v10 = LGH_Syntax::get_bits(this, "sub_exp_val_minus_16", 1u) | (2 * v10);
            *((_DWORD *)this + 15) = v10;
            unsigned int v9 = *((_DWORD *)this + 16);
          }
          while (v9 < 0x80);
        }
        char v28 = v32 | (2 * v28);
      }
      return (v28 + 16);
    }
    else
    {
      unsigned int v12 = ((v9 << 7) - 128) >> 8;
      unsigned int v13 = v12 + 1;
      unsigned int v14 = v10;
      if (v10 > v12)
      {
        unsigned int v14 = v10 - v13;
        unsigned int v13 = v9 - v13;
        *((_DWORD *)this + 15) = v14;
      }
      if (v13 <= 0x7F)
      {
        do
        {
          int v15 = *((_DWORD *)this + 17) - 1;
          *((_DWORD *)this + 16) = 2 * v13;
          *((_DWORD *)this + 17) = v15;
          unsigned int v14 = LGH_Syntax::get_bits(this, "bit", 1u) | (2 * v14);
          *((_DWORD *)this + 15) = v14;
          unsigned int v13 = *((_DWORD *)this + 16);
        }
        while (v13 < 0x80);
      }
      if (v10 <= v12)
      {
        char v34 = 0;
        for (int k = 0; k != 5; ++k)
        {
          unsigned int v36 = (v13 << 7) - 128;
          int v37 = (v36 >> 8) + 1;
          if (v14 <= v36 >> 8)
          {
            char v38 = 0;
            unsigned int v13 = (v36 >> 8) + 1;
          }
          else
          {
            v13 -= v37;
            v14 -= v37;
            *((_DWORD *)this + 15) = v14;
            char v38 = 1;
          }
          *((_DWORD *)this + 16) = v13;
          if (v13 <= 0x7F)
          {
            do
            {
              int v39 = *((_DWORD *)this + 17) - 1;
              *((_DWORD *)this + 16) = 2 * v13;
              *((_DWORD *)this + 17) = v39;
              unsigned int v14 = LGH_Syntax::get_bits(this, "sub_exp_val_minus_32", 1u) | (2 * v14);
              *((_DWORD *)this + 15) = v14;
              unsigned int v13 = *((_DWORD *)this + 16);
            }
            while (v13 < 0x80);
          }
          char v34 = v38 | (2 * v34);
        }
        return (v34 + 32);
      }
      else
      {
        unsigned __int8 v16 = 0;
        for (int m = 0; m != 7; ++m)
        {
          unsigned int v18 = (v13 << 7) - 128;
          int v19 = (v18 >> 8) + 1;
          if (v14 <= v18 >> 8)
          {
            char v20 = 0;
            unsigned int v13 = (v18 >> 8) + 1;
          }
          else
          {
            v13 -= v19;
            v14 -= v19;
            *((_DWORD *)this + 15) = v14;
            char v20 = 1;
          }
          *((_DWORD *)this + 16) = v13;
          if (v13 <= 0x7F)
          {
            do
            {
              int v21 = *((_DWORD *)this + 17) - 1;
              *((_DWORD *)this + 16) = 2 * v13;
              *((_DWORD *)this + 17) = v21;
              unsigned int v14 = LGH_Syntax::get_bits(this, "v", 1u) | (2 * v14);
              *((_DWORD *)this + 15) = v14;
              unsigned int v13 = *((_DWORD *)this + 16);
            }
            while (v13 < 0x80);
          }
          unsigned __int8 v16 = v20 | (2 * v16);
        }
        if (v16 > 0x40u)
        {
          unsigned int v40 = (v13 << 7) - 128;
          unsigned int v41 = (v40 >> 8) + 1;
          if (v14 <= v40 >> 8)
          {
            char v42 = 0;
          }
          else
          {
            v14 -= v41;
            unsigned int v41 = v13 - v41;
            *((_DWORD *)this + 15) = v14;
            char v42 = 1;
          }
          *((_DWORD *)this + 16) = v41;
          if (v41 <= 0x7F)
          {
            do
            {
              int v43 = *((_DWORD *)this + 17) - 1;
              *((_DWORD *)this + 16) = 2 * v41;
              *((_DWORD *)this + 17) = v43;
              unsigned int v14 = LGH_Syntax::get_bits(this, "bit", 1u) | (2 * v14);
              *((_DWORD *)this + 15) = v14;
              unsigned int v41 = *((_DWORD *)this + 16);
            }
            while (v41 < 0x80);
          }
          return ((v42 | (2 * v16)) - 1);
        }
        else
        {
          return (v16 + 64);
        }
      }
    }
  }
  return v22;
}

uint64_t LGH_Syntax::update_mv_prob(LGH_Syntax *this, unsigned __int8 a2)
{
  unsigned int v5 = *((_DWORD *)this + 15);
  int v4 = *((_DWORD *)this + 16);
  unsigned int v6 = (252 * v4 - 252) >> 8;
  unsigned int v7 = v6 + 1;
  if (v5 <= v6)
  {
    unsigned int v8 = *((_DWORD *)this + 15);
  }
  else
  {
    unsigned int v8 = v5 - v7;
    unsigned int v7 = v4 - v7;
    *((_DWORD *)this + 15) = v8;
  }
  *((_DWORD *)this + 16) = v7;
  if (v7 <= 0x7F)
  {
    do
    {
      int v9 = *((_DWORD *)this + 17) - 1;
      *((_DWORD *)this + 16) = 2 * v7;
      *((_DWORD *)this + 17) = v9;
      unsigned int v8 = LGH_Syntax::get_bits(this, "update_mv_prob", 1u) | (2 * v8);
      *((_DWORD *)this + 15) = v8;
      unsigned int v7 = *((_DWORD *)this + 16);
    }
    while (v7 < 0x80);
  }
  if (v5 > v6)
  {
    char v10 = 0;
    for (int i = 0; i != 7; ++i)
    {
      unsigned int v12 = (v7 << 7) - 128;
      int v13 = (v12 >> 8) + 1;
      if (v8 <= v12 >> 8)
      {
        char v14 = 0;
        unsigned int v7 = (v12 >> 8) + 1;
      }
      else
      {
        v7 -= v13;
        v8 -= v13;
        *((_DWORD *)this + 15) = v8;
        char v14 = 1;
      }
      *((_DWORD *)this + 16) = v7;
      if (v7 <= 0x7F)
      {
        do
        {
          int v15 = *((_DWORD *)this + 17) - 1;
          *((_DWORD *)this + 16) = 2 * v7;
          *((_DWORD *)this + 17) = v15;
          unsigned int v8 = LGH_Syntax::get_bits(this, "mv_prob", 1u) | (2 * v8);
          *((_DWORD *)this + 15) = v8;
          unsigned int v7 = *((_DWORD *)this + 16);
        }
        while (v7 < 0x80);
      }
      char v10 = v14 | (2 * v10);
    }
    return (2 * v10) | 1u;
  }
  return a2;
}

CAHDecHibiscusAvc *createHibiscusAvcDecoder(CAVDAvcDecoder *a1)
{
  int v2 = (CAHDecHibiscusAvc *)operator new(0x4670uLL, MEMORY[0x263F8C180]);
  unsigned int v3 = v2;
  if (v2) {
    CAHDecHibiscusAvc::CAHDecHibiscusAvc(v2, a1);
  }
  return v3;
}

void sub_223A64314(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecHibiscusAvc::CAHDecHibiscusAvc(CAHDecHibiscusAvc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D741CA8;
  *(_DWORD *)(v1 + 456) = 956 * *(unsigned __int16 *)(*(void *)(v1 + 256) + 7500) + 266328;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecHibiscusAvc::CAHDecHibiscusAvc(CAHDecHibiscusAvc *this, CAVDAvcDecoder *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D741CA8;
  *(void *)(v4 + 256) = a2;
  uint64_t v5 = 956 * *((unsigned __int16 *)a2 + 3750) + 266328;
  *(_DWORD *)(v4 + 456) = v5;
  *(_DWORD *)(v4 + 8) = 2328;
  *(_OWORD *)(v4 + 16) = xmmword_223AD04F0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), v5, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      unsigned int v8 = "CAHDecHibiscusAvc";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v7, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v6 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v6;
    *((void *)this + 34) = v6;
    *((_OWORD *)this + 1116) = 0u;
    *((_OWORD *)this + 1117) = 0u;
    *((_OWORD *)this + 1118) = 0u;
    *((_OWORD *)this + 1119) = 0u;
    *((_OWORD *)this + 1120) = 0u;
    *((_OWORD *)this + 1121) = 0u;
    *((_OWORD *)this + 1122) = 0u;
    *((_OWORD *)this + 1123) = 0u;
    *((_OWORD *)this + 1124) = 0u;
    *((_OWORD *)this + 1125) = 0u;
    *((_OWORD *)this + 1126) = 0u;
    bzero((char *)this + 560, 0x4360uLL);
  }
}

void sub_223A6451C(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecHibiscusAvc::~CAHDecHibiscusAvc(CAHDecHibiscusAvc *this)
{
  *(void *)this = &unk_26D741CA8;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecHibiscusAvc::~CAHDecHibiscusAvc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecHibiscusAvc::initPicture(CAHDecHibiscusAvc *this, int a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v5 = 956 * *(unsigned __int16 *)(*((void *)this + 32) + 7500) + 266328;
  *((_DWORD *)this + 114) = v5;
  *((_DWORD *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v6;
  if (v6)
  {
    bzero(v6, v5);
    uint64_t v8 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v8 + 16) = a2;
    *(_WORD *)(v8 + 24) = 257;
    *(_WORD *)(v8 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 4459) = 0;
    *((void *)this + 2237) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "initPicture";
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v10, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecHibiscusAvc::populateSlices(CAHDecHibiscusAvc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2328;
    uint64_t v5 = a2;
    do
    {
      CAHDecHibiscusAvc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 956;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecHibiscusAvc::populateSliceRegisters(uint64_t a1, uint64_t a2, signed int a3)
{
  char v6 = 0;
  uint64_t v138 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 256);
  int v122 = *(_DWORD *)(v7 + 3616);
  int v120 = *(_DWORD *)(v7 + 3612);
  uint64_t v121 = *(void *)(v7 + 3304);
  uint64_t v119 = *(void *)(v7 + 3296);
  uint64_t v8 = *(void *)(v7 + 3312);
  uint64_t v9 = *(unsigned int *)(v7 + 7064);
  uint64_t v10 = *(void *)(v7 + 3320);
  *(_DWORD *)(a2 + 4) = 0;
  uint64_t v12 = v8 + 1848 * a3;
  int v13 = 32 * (*(unsigned char *)(v12 + 1424) & 3);
  *(_DWORD *)(a2 + 4) = v13;
  int v15 = *(unsigned __int8 *)(v12 + 24);
  uint64_t v14 = (unsigned char *)(v12 + 24);
  if (v15 != 2) {
    char v6 = *(unsigned char *)(v8 + 1848 * a3 + 63);
  }
  unsigned int v16 = v13 & 0xFFFF87FF | ((v6 & 0xF) << 11);
  *(_DWORD *)(a2 + 4) = v16;
  if (*v14 == 1) {
    char v17 = *(unsigned char *)(v8 + 1848 * a3 + 64);
  }
  else {
    char v17 = 0;
  }
  unsigned int v18 = (_DWORD *)(a1 + 17836);
  int v19 = ((v17 & 0xF) << 7) | v16;
  *(_DWORD *)(a2 + 4) = v19;
  if (*v14 == 1 && !*(unsigned char *)(v8 + 1848 * a3 + 61)) {
    int v20 = 0x8000;
  }
  else {
    int v20 = 0;
  }
  int v21 = v20 | v19;
  *(_DWORD *)(a2 + 4) = v21;
  if (*v14) {
    int v22 = 0x20000;
  }
  else {
    int v22 = 0x10000;
  }
  if (*v14 == 1) {
    int v23 = 0;
  }
  else {
    int v23 = v22;
  }
  *(_DWORD *)(a2 + 4) = v23 | v21;
  if (*v14 == 1)
  {
    uint64_t v24 = v10 + 13040 * a3 + 7224;
    uint64_t v25 = v8 + 1848 * a3;
    *(void *)(v25 + 1832) = v24;
    if (*(unsigned char *)(v10 + 13040 * a3 + 7227)
      || (uint64_t v26 = *(unsigned int *)(v10 + 13040 * a3 + 7256), *(_DWORD *)(a1 + 4 * v26 + 464)))
    {
      int v27 = 16;
LABEL_19:
      *(_DWORD *)(a2 + 4) |= v27;
      goto LABEL_20;
    }
    if (*v18
      || (*(void *)(a1 + 17896) = *(void *)(v10 + 13040 * a3 + 7264),
          *(_DWORD *)(a1 + 17888) = v26,
          *unsigned int v18 = 1,
          *(_DWORD *)(a2 + 4) |= 0x40000u,
          (uint64_t v24 = *(void *)(v25 + 1832)) != 0)
      && *v18)
    {
      uint64_t v109 = *(void *)(v24 + 40);
      if (v109 != *(void *)(a1 + 17896))
      {
        *(void *)(a1 + 17896) = v109;
        *(_DWORD *)(a1 + 17888) = *(_DWORD *)(v24 + 32);
        int v27 = 0x40000;
        goto LABEL_19;
      }
    }
  }
LABEL_20:
  *(_DWORD *)(a2 + 920) = 0;
  *(_DWORD *)(a2 + 952) = 0;
  int v28 = *(_DWORD *)(a2 + 4);
  if (*v14 != 1 || (v28 & 0x40000) == 0) {
    goto LABEL_34;
  }
  unsigned int v30 = (_OWORD *)(a1 + 176 * *(unsigned int *)(*(void *)(v8 + 1848 * a3 + 1832) + 32));
  long long v31 = v30[746];
  long long v32 = v30[748];
  long long v135 = v30[747];
  long long v136 = v32;
  long long v137 = v30[749];
  long long v33 = v30[742];
  long long v34 = v30[744];
  long long v131 = v30[743];
  long long v132 = v34;
  long long v133 = v30[745];
  long long v134 = v31;
  long long v35 = v30[740];
  *(_OWORD *)long long buf = v30[739];
  *(_OWORD *)&uint8_t buf[16] = v35;
  long long v129 = v30[741];
  long long v130 = v33;
  *unsigned int v18 = 1;
  int v36 = 956 * a3;
  if (*(void *)buf || DWORD2(v136) || (int v37 = HIDWORD(v136)) != 0)
  {
    uint64_t result = CAHDec::addToPatcherList(a1, buf, v36 + 3248, 0, 0xFFFFFFFFLL, 8, -256, 4);
    if (result) {
      return result;
    }
    int v38 = DWORD2(v136);
    int v37 = HIDWORD(v136);
    if (*(void *)buf)
    {
LABEL_32:
      uint64_t result = CAHDec::addToPatcherList(a1, buf, v36 + 3280, 0, 0x3FFFFFFFFFFLL, 32, 1023, 4);
      if (result) {
        return result;
      }
      goto LABEL_33;
    }
  }
  else
  {
    int v38 = 0;
  }
  if (v38 || v37) {
    goto LABEL_32;
  }
LABEL_33:
  int v28 = *(_DWORD *)(a2 + 4);
LABEL_34:
  uint64_t v124 = v10;
  unsigned int v117 = a3;
  int v118 = v14;
  uint64_t v123 = a1;
  *(_DWORD *)(a2 + 4) = v28 & 0x77FFFF | 0x2D000000;
  unsigned int v40 = *v14;
  if (v40 <= 1)
  {
    uint64_t v41 = v7 + 6872;
    uint64_t v42 = v10 + 13040 * a3;
    if (*(_DWORD *)(v42 + 13032))
    {
      unint64_t v43 = 0;
      char v44 = (unsigned int *)(v42 + 13032);
      uint64_t v45 = v124 + 13040 * a3 + 1416;
      uint64_t v46 = &_os_log_internal;
      do
      {
        uint64_t v47 = a2 + 4 * v43;
        int v48 = (16 * (v43 & 0xF)) | 0x2DC00000;
        *(_DWORD *)(v47 + 8) = v48;
        uint64_t v49 = (_DWORD *)(v47 + 8);
        if (v9)
        {
          uint64_t v50 = 0;
          while (*(_DWORD *)(*(void *)(v41 + 8 * v50) + 12) != *(_DWORD *)(v45 + 176 * v43 + 12))
          {
            if (v9 == ++v50) {
              goto LABEL_41;
            }
          }
          *uint64_t v49 = v50 & 0xF | v48;
        }
        else
        {
LABEL_41:
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            int v51 = *(_DWORD *)(v45 + 176 * v43 + 32);
            *(_DWORD *)long long buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v43;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v51;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&uint8_t buf[16] = v9;
            _os_log_impl(&dword_223977000, v46, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-0 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
          }
        }
        ++v43;
      }
      while (v43 < *v44);
      unsigned int v40 = *v14;
    }
    else
    {
      LODWORD(v43) = 0;
    }
    if (v40 == 1)
    {
      uint64_t v52 = v124 + 13040 * a3;
      if (*(_DWORD *)(v52 + 13036))
      {
        unint64_t v53 = 0;
        uint64_t v54 = (unsigned int *)(v52 + 13036);
        __int16 v55 = &_os_log_internal;
        do
        {
          uint64_t v56 = a2 + 4 * v43;
          int v57 = (16 * (v53 & 0xF)) | 0x2DC00100;
          *(_DWORD *)(v56 + 8) = v57;
          int v58 = (_DWORD *)(v56 + 8);
          if (v9)
          {
            uint64_t v59 = 0;
            while (*(_DWORD *)(*(void *)(v41 + 8 * v59) + 12) != *(_DWORD *)(v124 + 13040 * a3 + 176 * v53 + 7236))
            {
              if (v9 == ++v59) {
                goto LABEL_55;
              }
            }
            _DWORD *v58 = v59 & 0xF | v57;
          }
          else
          {
LABEL_55:
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
            {
              int v60 = *(_DWORD *)(v124 + 13040 * a3 + 176 * v53 + 7256);
              *(_DWORD *)long long buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v43;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v60;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v9;
              _os_log_impl(&dword_223977000, v55, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-1 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
            }
          }
          LODWORD(v43) = v43 + 1;
          ++v53;
        }
        while (v53 < *v54);
      }
    }
  }
  *(void *)(a2 + 136) = 0x2DD0000000000000;
  uint64_t v61 = v121 + 604 * v122;
  int v62 = (char *)(v61 + 88);
  int v63 = (char *)(v61 + 87);
  if (*v118 == 1) {
    int v64 = v62;
  }
  else {
    int v64 = v63;
  }
  char v65 = *v64;
  *(_DWORD *)(a2 + 140) = ((v65 & 3) << 6) | 0x2DD00000;
  int v66 = ((v65 & 3) << 6) | 0x2DD00000 | (8 * (*(unsigned char *)(v8 + 1848 * a3 + 376) & 7));
  *(_DWORD *)(a2 + 140) = v66;
  char v67 = *(unsigned char *)(v119 + 2224 * v120 + 4);
  if (v67) {
    char v67 = *(unsigned char *)(v8 + 1848 * a3 + 377);
  }
  *(_DWORD *)(a2 + 140) = v67 & 7 | v66;
  int v68 = *v118;
  if (v68 != 1) {
    goto LABEL_148;
  }
  int v69 = *v62;
  if (v69 != 2) {
    goto LABEL_68;
  }
  *(_DWORD *)(a2 + 140) = ((v65 & 3) << 6) | 0x2DD0002D;
  int v68 = *v118;
  if (v68 != 1)
  {
LABEL_148:
    if (v68 || !*v63) {
      goto LABEL_88;
    }
LABEL_72:
    unsigned int v70 = 0;
    unsigned int v71 = 0;
    do
    {
      uint64_t v72 = v70;
      if (*(unsigned char *)(v8 + 1848 * a3 + v70 + 378))
      {
        int v73 = ((v70 & 0xF) << 9) | 0x2DE04000;
        uint64_t v74 = a2 + 4 * v71;
        *(_DWORD *)(v74 + 144) = v73;
        uint64_t v75 = v8 + 1848 * a3 + 2 * v72;
        *(_DWORD *)(v74 + 144) = v73 | *(_WORD *)(v75 + 394) & 0x1FF;
        *(_DWORD *)(v74 + 528) = 770703360;
        *(_DWORD *)(v74 + 528) = *(unsigned __int16 *)(v75 + 426) | 0x2DF00000;
        ++v71;
      }
      if (*(unsigned char *)(v8 + 1848 * a3 + v72 + 458))
      {
        uint64_t v76 = 0;
        char v77 = 1;
        do
        {
          char v78 = v77;
          int v79 = ((v72 & 0xF) << 9) | (v76 << 14) | 0x2DE08000;
          uint64_t v80 = a2 + 4 * v71;
          *(_DWORD *)(v80 + 144) = v79;
          uint64_t v81 = v8 + 1848 * a3 + 4 * v72 + 2 * v76;
          *(_DWORD *)(v80 + 144) = v79 | *(_WORD *)(v81 + 474) & 0x1FF;
          *(_DWORD *)(v80 + 528) = 770703360;
          *(_DWORD *)(v80 + 528) = *(unsigned __int16 *)(v81 + 538) | 0x2DF00000;
          ++v71;
          uint64_t v76 = 1;
          char v77 = 0;
        }
        while ((v78 & 1) != 0);
      }
      unsigned int v70 = v72 + 1;
    }
    while ((int)v72 + 1 <= *(char *)(v8 + 1848 * a3 + 63));
    if (*v118 == 1)
    {
      unsigned int v82 = 0;
      do
      {
        uint64_t v83 = v82;
        if (*(unsigned char *)(v8 + 1848 * a3 + v82 + 602))
        {
          int v84 = ((v82 & 0xF) << 9) | 0x2DE06000;
          uint64_t v85 = a2 + 4 * v71;
          *(_DWORD *)(v85 + 144) = v84;
          uint64_t v86 = v8 + 1848 * a3 + 2 * v83;
          *(_DWORD *)(v85 + 144) = v84 | *(_WORD *)(v86 + 618) & 0x1FF;
          *(_DWORD *)(v85 + 528) = 770703360;
          *(_DWORD *)(v85 + 528) = *(unsigned __int16 *)(v86 + 650) | 0x2DF00000;
          ++v71;
        }
        if (*(unsigned char *)(v8 + 1848 * a3 + v83 + 682))
        {
          uint64_t v87 = 0;
          char v88 = 1;
          do
          {
            char v89 = v88;
            int v90 = ((v83 & 0xF) << 9) | (v87 << 14) | 0x2DE0A000;
            uint64_t v91 = a2 + 4 * v71;
            *(_DWORD *)(v91 + 144) = v90;
            uint64_t v92 = v8 + 1848 * a3 + 4 * v83 + 2 * v87;
            *(_DWORD *)(v91 + 144) = v90 | *(_WORD *)(v92 + 698) & 0x1FF;
            *(_DWORD *)(v91 + 528) = 770703360;
            *(_DWORD *)(v91 + 528) = *(unsigned __int16 *)(v92 + 762) | 0x2DF00000;
            ++v71;
            uint64_t v87 = 1;
            char v88 = 0;
          }
          while ((v89 & 1) != 0);
        }
        unsigned int v82 = v83 + 1;
      }
      while ((int)v83 + 1 <= *(char *)(v8 + 1848 * a3 + 64));
    }
    *(_DWORD *)(a2 + 136) = v71;
    goto LABEL_88;
  }
  int v69 = *v62;
LABEL_68:
  if (v69 == 1) {
    goto LABEL_72;
  }
LABEL_88:
  *(_DWORD *)(a2 + 912) = 0;
  uint64_t v93 = v8 + 1848 * a3;
  *(_DWORD *)(a2 + 912) = (((*(unsigned __int8 *)(v121 + 604 * v122 + 89) + *(unsigned __int8 *)(v93 + 1425)) << 10)
                         + 26624) & 0x1FC00 | 0x2D900000;
  *(_DWORD *)(a2 + 916) = 0;
  int v94 = (*(unsigned char *)(v93 + 1428) == 0) << 17;
  *(_DWORD *)(a2 + 916) = v94;
  if (*(unsigned char *)(v93 + 1428) != 1)
  {
    int v95 = v94 | 0x10000;
    *(_DWORD *)(a2 + 916) = v95;
    uint64_t v96 = v8 + 1848 * a3;
    int v97 = v95 | ((*(unsigned char *)(v96 + 1429) & 0xF) << 8);
    *(_DWORD *)(a2 + 916) = v97;
    int v94 = v97 | ((*(unsigned char *)(v96 + 1430) & 0xF) << 12);
  }
  *(_DWORD *)(a2 + 916) = v94 | 0x2DA00000;
  int v98 = (unsigned int *)(v8 + 1848 * a3 + 1436);
  unsigned int v99 = *v98;
  if (*(unsigned char *)(v121 + 604 * v122 + 3))
  {
    int v100 = 0;
    if ((v99 & 7) != 0) {
      *int v98 = (v99 + 7) & 0xFFFFFFF8;
    }
  }
  else
  {
    int v100 = *v98 & 7;
  }
  *(_DWORD *)(a2 + 924) = (v100 << 15) | 0x2D800000;
  uint64_t v101 = *(void *)(v123 + 256);
  unsigned int v102 = *(_DWORD *)(v101 + 2504);
  unint64_t v126 = 0;
  uint64_t v127 = 0;
  if (!CAVDAvcDecoder::GetSDataMemInfo(v101, v117, &v127, &v126)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v125 = v102;
  int v103 = 956 * v117;
  uint64_t v104 = v127;
  if (!*(void *)v127 && !*(_DWORD *)(v127 + 152) && !*(_DWORD *)(v127 + 156)) {
    goto LABEL_104;
  }
  int v105 = v126;
  if (HIDWORD(v126) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "populateSliceRegisters";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1786;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v105 = v126;
  }
  uint64_t result = CAHDec::addToPatcherList(v123, (void *)v104, v103 + 3252, v105, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  if (result) {
    return result;
  }
  uint64_t v104 = v127;
  if (!*(void *)v127)
  {
LABEL_104:
    if (!*(_DWORD *)(v104 + 152) && !*(_DWORD *)(v104 + 156)) {
      goto LABEL_115;
    }
  }
  int v106 = v103 + 3260;
  int v107 = v126;
  if (HIDWORD(v126))
  {
    uint64_t v108 = v123;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "populateSliceRegisters";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1787;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      int v107 = v126;
    }
  }
  else
  {
    uint64_t v108 = v123;
  }
  uint64_t result = CAHDec::addToPatcherList(v108, (void *)v104, v106, v107, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result)
  {
LABEL_115:
    unsigned int v110 = *(_DWORD *)(v8 + 1848 * a3 + 16) - (*v98 >> 3);
    *(_DWORD *)(a2 + 936) = v110;
    if (*(_DWORD *)(v101 + 2360) != 1) {
      return 0;
    }
    *(void *)(a2 + 944) = 0;
    if (*(_DWORD *)(v101 + 2640))
    {
      unsigned int v111 = v125;
      if ((*(unsigned char *)(v101 + 2612) & 1) == 0)
      {
LABEL_118:
        unsigned int v112 = *(unsigned __int16 *)(v8 + 1848 * a3 + 1840);
        int v113 = 0;
        if ((v111 & 0x200000) != 0)
        {
          if (v100 && !*(_WORD *)(v8 + 1848 * a3 + 1840))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = "int CAHDecHibiscusAvc::populateSliceRegisters(AvcSliceRegisters *, int)";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect off_to_prot_data to be set when slice header is not byte aligned\n", buf, 0xCu);
              unsigned int v110 = *(_DWORD *)(a2 + 936);
              int v113 = *(_DWORD *)(a2 + 948) & 0x1F0000;
            }
            else
            {
              int v113 = 0;
            }
            unsigned int v112 = 1;
          }
        }
        else if (v100)
        {
          ++v112;
        }
        uint64_t result = 0;
        if (v112 >= v110) {
          unsigned int v112 = v110;
        }
        unsigned int v116 = v113 & 0xFFDFFFFF | (v112 << 22) | (unsigned __int16)v111 | (((v111 >> 20) & 1) << 21);
LABEL_145:
        *(_DWORD *)(a2 + 948) = v116;
        return result;
      }
    }
    else
    {
      unsigned int v111 = v125;
      if (!*(_DWORD *)(v101 + 2420)) {
        goto LABEL_118;
      }
    }
    uint64_t result = 0;
    unsigned int v114 = *(unsigned __int16 *)(v8 + 1848 * a3 + 1840);
    if (v110 < v114) {
      unsigned int v114 = v110;
    }
    if (v100) {
      BOOL v115 = v114 == 0;
    }
    else {
      BOOL v115 = 0;
    }
    if (v115) {
      unsigned int v114 = 1;
    }
    unsigned int v116 = v111 & 0x10000 | v114;
    goto LABEL_145;
  }
  return result;
}

uint64_t CAHDecHibiscusAvc::populateCommonRegisters(CAHDecHibiscusAvc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000001;
  return 0;
}

uint64_t CAHDecHibiscusAvc::updateCommonRegisters(CAHDecHibiscusAvc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

void CAHDecHibiscusAvc::copyScalingList(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = *a2 & 0xFEFFFFC0 | 0x1000000;
  *a2 = v8;
  do
  {
    v8 |= (*(unsigned char *)(a4 + v7) == 0) << v7;
    *a2 = v8;
    ++v7;
  }
  while (v7 != 6);
  unsigned int v9 = v8 & 0xFFFFF03F;
  *a2 = v8 & 0xFFFFF03F;
  if (a7 >= 7)
  {
    uint64_t v10 = (a7 - 6);
    uint64_t v11 = (unsigned __int8 *)(a4 + 6);
    uint64_t v12 = &dword_223ADBB60;
    do
    {
      int v13 = *v11++;
      BOOL v14 = v13 == 0;
      int v16 = *v12++;
      char v15 = v16;
      int v17 = v14;
      v9 |= ((v17 << v15) & 0x3F) << 6;
      *a2 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 1;
  uint64_t v20 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v22 = *(_DWORD *)(v20 + i) & 0xFFFFFF | (*(unsigned __int8 *)(v19 + i - 1) << 24);
      *(_DWORD *)(v20 + i) = v22;
      unsigned int v23 = v22 & 0xFF00FFFF | (*(unsigned __int8 *)(v19 + i) << 16);
      *(_DWORD *)(v20 + i) = v23;
      unsigned int v24 = v23 & 0xFFFF00FF | (*(unsigned __int8 *)(v19 + i + 1) << 8);
      *(_DWORD *)(v20 + i) = v24;
      *(_DWORD *)(v20 + i) = v24 & 0xFFFFFF00 | *(unsigned __int8 *)(v19 + i + 2);
    }
    ++v18;
    v20 += 16;
    v19 += 16;
  }
  while (v18 != 6);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 96;
  do
  {
    int v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = a6 + ((uint64_t)dword_223ADBB78[v25] << 6);
    do
    {
      long long v31 = (unsigned __int8 *)(v30 + (v28 & 0x7FFFFFE0 | v29 & 4 | v27 & 0x18));
      int v32 = *(_DWORD *)(v26 + v28) & 0xFFFFFF | (*v31 << 24);
      *(_DWORD *)(v26 + v28) = v32;
      unsigned int v33 = v32 & 0xFF00FFFF | (v31[1] << 16);
      *(_DWORD *)(v26 + v28) = v33;
      unsigned int v34 = v33 & 0xFFFF00FF | (v31[2] << 8);
      *(_DWORD *)(v26 + v28) = v34;
      *(_DWORD *)(v26 + v28) = v34 & 0xFFFFFF00 | v31[3];
      ++v29;
      v28 += 4;
      v27 += 8;
    }
    while (v28 != 64);
    ++v25;
    v26 += 64;
  }
  while (v25 != 6);
}

uint64_t CAHDecHibiscusAvc::AvcSeqScalingListFallBack(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v3 = 12;
    }
    uint64_t v4 = a2 + 22;
    uint64_t v5 = (_OWORD *)(a2 + 34);
    while (v2 > 5)
    {
      if (*(unsigned char *)(v4 + v2 - 12))
      {
        if (*(unsigned char *)(v4 + v2) == 2)
        {
          unsigned int v9 = (_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 130);
          if (v2 == 6 || (v2 & 0x7FFFFFFD) == 8)
          {
            _OWORD *v9 = avcDefaultIntraScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADBBE0;
            long long v10 = xmmword_223ADBBF0;
            long long v11 = unk_223ADBC00;
          }
          else
          {
            _OWORD *v9 = avcDefaultInterScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADBBA0;
            long long v10 = xmmword_223ADBBB0;
            long long v11 = unk_223ADBBC0;
          }
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 162) = v10;
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 178) = v11;
        }
        goto LABEL_24;
      }
      if ((v2 - 8) <= 0xFFFFFFFD)
      {
        uint64_t result = a2 + 130;
        int v13 = (_OWORD *)(a2 + 130 + ((unint64_t)(v2 - 6) << 6));
        BOOL v14 = (long long *)(a2 + 130 + ((unint64_t)(v2 - 8) << 6));
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[3];
        v13[2] = v14[2];
        v13[3] = v17;
        *int v13 = v15;
        v13[1] = v16;
        uint64_t v8 = (v2 - 2);
LABEL_21:
        *(unsigned char *)(v4 + v2) = *(unsigned char *)(a2 + v8 + 22);
      }
LABEL_24:
      ++v2;
      ++v5;
      if (v3 == v2) {
        return result;
      }
    }
    if (*(unsigned char *)(v4 + v2 - 12)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (v6 || v2 == 3) {
      goto LABEL_24;
    }
    uint64_t v8 = (v2 - 1);
    *uint64_t v5 = *(_OWORD *)(a2 + 16 * v8 + 34);
    goto LABEL_21;
  }
  return result;
}

long long *CAHDecHibiscusAvc::AvcPicScalingListFallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 96))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = a3 + 97;
    uint64_t v6 = -96;
    uint64_t result = &avcDefaultIntraScalingList8x8;
    do
    {
      if (v3 > 5)
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if (*(unsigned char *)(v5 + v3 + 12) == 2)
          {
            unsigned int v9 = (_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 217);
            if (v3 == 6 || (v3 & 0x7FFFFFFD) == 8)
            {
              _OWORD *v9 = avcDefaultIntraScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADBBE0;
              long long v10 = xmmword_223ADBBF0;
              long long v11 = unk_223ADBC00;
            }
            else
            {
              _OWORD *v9 = avcDefaultInterScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADBBA0;
              long long v10 = xmmword_223ADBBB0;
              long long v11 = unk_223ADBBC0;
            }
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 249) = v10;
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 265) = v11;
          }
          goto LABEL_31;
        }
        if ((v3 - 8) <= 0xFFFFFFFD)
        {
          uint64_t v12 = (_OWORD *)(a3 + 217 + ((unint64_t)(v3 - 6) << 6));
          int v13 = (long long *)(a3 + 217 + ((unint64_t)(v3 - 8) << 6));
          long long v14 = *v13;
          long long v15 = v13[1];
          long long v16 = v13[3];
          v12[2] = v13[2];
          v12[3] = v16;
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v17 = a3 + (v3 - 2);
          goto LABEL_29;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          uint64_t v18 = (v3 - 6);
          uint64_t v19 = a3 + (v18 << 6);
          uint64_t v20 = a2 + (v18 << 6);
          long long v21 = *(_OWORD *)(v20 + 130);
          long long v22 = *(_OWORD *)(v20 + 146);
          long long v23 = *(_OWORD *)(v20 + 162);
          *(_OWORD *)(v19 + 265) = *(_OWORD *)(v20 + 178);
          *(_OWORD *)(v19 + 249) = v23;
          *(_OWORD *)(v19 + 233) = v22;
          *(_OWORD *)(v19 + 217) = v21;
LABEL_23:
          char v24 = *(unsigned char *)(a2 + 22 + v3);
LABEL_30:
          *(unsigned char *)(v5 + v3 + 12) = v24;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if ((*(unsigned char *)(v5 + v3 + 12) & 2) != 0)
          {
            if (v3 > 2) {
              long long v8 = avcDefaultInterScalingList4x4;
            }
            else {
              long long v8 = avcDefaultIntraScalingList4x4;
            }
            *(_OWORD *)(v5 + v6 + 120) = v8;
          }
          goto LABEL_31;
        }
        if (v3 && v3 != 3)
        {
          uint64_t v25 = (v3 - 1);
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a3 + 16 * v25 + 121);
          uint64_t v17 = a3 + v25;
LABEL_29:
          char v24 = *(unsigned char *)(v17 + 109);
          goto LABEL_30;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a2 + v6 + 130);
          goto LABEL_23;
        }
      }
LABEL_31:
      ++v3;
      v6 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CAHDecHibiscusAvc::populateSequenceRegisters(CAHDecHibiscusAvc *this)
{
  uint64_t v2 = *((void *)this + 32);
  unint64_t v3 = (_DWORD *)*((void *)this + 33);
  int v4 = *(_DWORD *)(v2 + 3612);
  int v5 = *(_DWORD *)(v2 + 3616);
  uint64_t v6 = *(void *)(v2 + 3296);
  uint64_t v7 = *(void *)(v2 + 3304);
  uint64_t v8 = v6 + 2224 * v4;
  v3[10] = 0;
  __int16 v9 = *(_WORD *)(v8 + 1558);
  v3[10] = (2 * (v9 & 0xFFF)) | 1;
  v3[10] = ((*(_WORD *)(v8 + 1560) & 0xFFF) << 17) | (2 * (v9 & 0xFFF)) | 0x10001;
  v3[11] = 0;
  int v10 = *(unsigned char *)(v8 + 1564) & 1;
  v3[11] = v10;
  int v11 = v10 | ((*(unsigned char *)(v7 + 604 * v5 + 95) != 0) << 7) | 0x2800;
  v3[11] = v11;
  uint64_t v12 = (unsigned char *)(v8 + 4);
  int v13 = *(unsigned __int8 *)(v8 + 4);
  if (*(unsigned char *)(v8 + 4)) {
    int v13 = (*(unsigned char *)(v6 + 2224 * v4 + 7) & 0xF) << 15;
  }
  int v14 = v13 | v11;
  v3[11] = v14;
  long long v15 = (unsigned char *)(v6 + 2224 * v4);
  int v16 = v14 & 0x7F87A881 | ((v15[6] & 0xF) << 19);
  v3[11] = v16;
  unsigned int v17 = v16 & 0xFF7FFFFF | ((v15[5] & 1) << 23);
  v3[11] = v17;
  v3[11] = v17 & 0xFCFFFFFF | ((*v12 & 3) << 24);
  if (v15[9])
  {
    if (*v12 == 3) {
      int v18 = 12;
    }
    else {
      int v18 = 8;
    }
    uint64_t v19 = CAHDecHibiscusAvc::AvcSeqScalingListFallBack((uint64_t)this, v8);
    CAHDecHibiscusAvc::copyScalingList(v19, v3 + 12, *((void *)this + 33) + 1112, v6 + 2224 * v4 + 22, v6 + 2224 * v4 + 34, v6 + 2224 * v4 + 130, v18);
  }
  return 0;
}

uint64_t CAHDecHibiscusAvc::populatePictureRegisters(CAHDecHibiscusAvc *this)
{
  uint64_t v320 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 3612);
  int v4 = *(_DWORD *)(v2 + 3616);
  uint64_t v5 = *(void *)(v2 + 3296);
  uint64_t v6 = *(void *)(v2 + 3304);
  uint64_t v295 = *(void *)(v2 + 2088);
  uint64_t v300 = *(unsigned int *)(v2 + 3152);
  int v304 = *(_DWORD *)(v2 + 2644);
  int v298 = *(_DWORD *)(v2 + 3132);
  int v299 = *(unsigned __int8 *)(v2 + 8);
  long long v7 = *(_OWORD *)(v2 + 7016);
  v319[8] = *(_OWORD *)(v2 + 7000);
  v319[9] = v7;
  long long v8 = *(_OWORD *)(v2 + 7048);
  v319[10] = *(_OWORD *)(v2 + 7032);
  v319[11] = v8;
  long long v9 = *(_OWORD *)(v2 + 6952);
  v319[4] = *(_OWORD *)(v2 + 6936);
  v319[5] = v9;
  long long v10 = *(_OWORD *)(v2 + 6984);
  v319[6] = *(_OWORD *)(v2 + 6968);
  v319[7] = v10;
  long long v11 = *(_OWORD *)(v2 + 6888);
  v319[0] = *(_OWORD *)(v2 + 6872);
  v319[1] = v11;
  long long v12 = *(_OWORD *)(v2 + 6920);
  v319[2] = *(_OWORD *)(v2 + 6904);
  v319[3] = v12;
  uint64_t v297 = *(unsigned int *)(v2 + 7064);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  int v14 = (unsigned __int8 *)*((void *)this + 32);
  uint64_t v15 = *((void *)this + 33);
  int v16 = v14[2675];
  unsigned int v17 = v14[2674];
  if (!(v16 | v17)) {
    goto LABEL_42;
  }
  uint64_t v18 = v5 + 2224 * v3;
  unsigned int v19 = *(unsigned __int8 *)(v18 + 6);
  unsigned int v20 = *(unsigned __int8 *)(v18 + 7);
  if (v19 > v20) {
    LOWORD(v20) = v19;
  }
  int v21 = ((_WORD)v20 + 9) & 0x1FE;
  if (v21 == 8)
  {
    unsigned int v26 = 1;
    int v24 = 8;
    if (!v14[2675]) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  int v22 = v14[2672];
  if (v21 != 12)
  {
    if (v21 == 10)
    {
      BOOL v23 = v22 == 0;
      if (v22) {
        int v24 = 10;
      }
      else {
        int v24 = 9;
      }
      int v25 = 2;
      goto LABEL_15;
    }
    int v24 = 27;
    unsigned int v26 = 27;
    if (!v16) {
      goto LABEL_30;
    }
LABEL_23:
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) && (v16 == 2 && v24 == 8 || v16 == 3 && (v24 - 9) <= 1))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = "populatePictureRegisters";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = v24;
      WORD1(buf[2]) = 1024;
      HIDWORD(buf[2]) = v16;
      int v27 = &_os_log_internal;
      uint64_t v28 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
      goto LABEL_38;
    }
    goto LABEL_30;
  }
  BOOL v23 = v22 == 0;
  if (v22) {
    int v24 = 12;
  }
  else {
    int v24 = 11;
  }
  int v25 = 4;
LABEL_15:
  if (v23) {
    unsigned int v26 = v25;
  }
  else {
    unsigned int v26 = v25 + 1;
  }
  if (v16) {
    goto LABEL_23;
  }
LABEL_30:
  if (v17 && (v17 == 3 && v26 - 9 < 2 || v26 <= 0x1A && ((1 << v26) & 0x4C00000) != 0 && v17 <= 2))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "populatePictureRegisters";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = v26;
    WORD1(buf[2]) = 1024;
    HIDWORD(buf[2]) = v17;
    int v27 = &_os_log_internal;
    uint64_t v28 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
LABEL_38:
    int v29 = (uint8_t *)buf;
    uint32_t v30 = 24;
    goto LABEL_39;
  }
LABEL_42:
  int v32 = (_DWORD *)((char *)this + 16904);
  unsigned int v33 = (char *)this + 264;
  *(_DWORD *)(v15 + 52) = 766509056;
  if (**(_DWORD **)(*((void *)this + 32) + 3312) == 5) {
    int v34 = 766517248;
  }
  else {
    int v34 = 766509056;
  }
  int v294 = v13;
  if (v13) {
    int v35 = 688;
  }
  else {
    int v35 = 672;
  }
  if (v304) {
    int v36 = 4160;
  }
  else {
    int v36 = 64;
  }
  unsigned int v37 = v36 & 0xFFFFFFF0 | ((v304 == 1) << 10) | v35 & 0xFFFFFFF0 | (4 * (v16 & 3)) | v17 & 3 | v34;
  *(_DWORD *)(v15 + 52) = v37;
  int v38 = (unsigned char *)*((void *)this + 32);
  int v39 = v37 | ((v38[2652] & 1) << 19);
  *(_DWORD *)(v15 + 52) = v39;
  unsigned int v40 = v39 & 0xFFFBFFFF | ((v38[2653] & 1) << 18);
  *(_DWORD *)(v15 + 52) = v40;
  *(_DWORD *)(v15 + 52) = v40 & 0xFFFDFFFF | ((v38[2654] & 1) << 17);
  *(void *)(v15 + 56) = 0x1000000;
  uint64_t v41 = v5 + 2224 * v3;
  int v42 = (16 * (*(_WORD *)(v41 + 1558) & 0xFFF)) | 0xF;
  *(_DWORD *)(v15 + 60) = v42;
  LODWORD(v38) = v42 | (*(unsigned __int16 *)(v41 + 1560) << 20) | 0xF0000;
  *(void *)(v15 + 64) = 0;
  *(_DWORD *)(v15 + 60) = v38;
  LODWORD(v41) = (*(unsigned char *)(v41 + 8) & 1) << 18;
  *(_DWORD *)(v15 + 68) = v41;
  unint64_t v43 = (unsigned char *)(v6 + 604 * v4);
  LODWORD(v41) = v41 & 0xFFF7FFFF | ((v43[93] & 1) << 19);
  *(_DWORD *)(v15 + 68) = v41;
  LODWORD(v41) = v41 & 0xFFEFFFFF | ((v43[3] & 1) << 20);
  *(_DWORD *)(v15 + 68) = v41;
  *(_DWORD *)(v15 + 68) = v41 | ((**(_DWORD **)(*((void *)this + 32) + 3312) != 5) << 21);
  unsigned int v44 = *(_DWORD *)(v15 + 72) & 0xFFFFFC1F | (32 * (v43[91] & 0x1F));
  *(_DWORD *)(v15 + 72) = v44;
  *(_DWORD *)(v15 + 72) = v44 & 0xFFFFFFE0 | v43[601] & 0x1F;
  if (v43[96])
  {
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) == 3) {
      int v45 = 12;
    }
    else {
      int v45 = 8;
    }
    uint64_t v46 = *(void *)v33 + 1596;
    uint64_t v47 = CAHDecHibiscusAvc::AvcPicScalingListFallBack(v13, v5 + 2224 * v3, v6 + 604 * v4);
    CAHDecHibiscusAvc::copyScalingList((uint64_t)v47, (unsigned int *)(v15 + 76), v46, v6 + 604 * v4 + 109, v6 + 604 * v4 + 121, v6 + 604 * v4 + 217, v45);
  }
  uint64_t v48 = 0;
  *(_DWORD *)(v15 + 80) = *((_DWORD *)this + 4462);
  *(_DWORD *)(v15 + 84) = *((_DWORD *)this + 4463);
  *(_DWORD *)(v15 + 88) = 3145786;
  uint64_t v49 = (char *)this + 9008;
  do
  {
    *(_DWORD *)(*(void *)v33 + v48 + 92) = 0;
    uint64_t v50 = *(void *)v33 + v48;
    int v51 = *(_DWORD *)(v50 + 92);
    *(_DWORD *)(v50 + 92) = 0;
    *(_DWORD *)(*(void *)v33 + v48 + 92) ^= 0xFFFFFF00;
    uint64_t v52 = *(void *)v33 + v48;
    int v53 = *(_DWORD *)(v52 + 92);
    *(_DWORD *)(v52 + 92) = v51;
    if (*(void *)v49 || *((_DWORD *)v49 + 38) || *((_DWORD *)v49 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v49, (int)v48 + 92, 0, 0xFFFFFFFFLL, 8, v53, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + v48 + 152) = 0;
    *(_DWORD *)(*(void *)v33 + v48 + 152) = *(_DWORD *)(*(void *)v33 + v48 + 152) & 0x800001FF | (((*((_DWORD *)this + 4456) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*(void *)v33 + v48 + 616) = 0;
    uint64_t v54 = *(void *)v33 + v48;
    int v55 = *(_DWORD *)(v54 + 616);
    *(_DWORD *)(v54 + 616) = 0;
    *(_DWORD *)(*(void *)v33 + v48 + 616) ^= 0x3FFu;
    uint64_t v56 = *(void *)v33 + v48;
    int v57 = *(_DWORD *)(v56 + 616);
    *(_DWORD *)(v56 + 616) = v55;
    if (*(void *)v49 || *((_DWORD *)v49 + 38) || *((_DWORD *)v49 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v49, (int)v48 + 616, 0, 0x3FFFFFFFFFFLL, 32, v57, 4);
      if (result) {
        return result;
      }
    }
    v48 += 4;
    v49 += 176;
  }
  while (v48 != 60);
  *(_DWORD *)(*(void *)v33 + 212) = 0;
  *(_DWORD *)(*(void *)v33 + 676) = 0;
  if ((*(unsigned char *)(v15 + 54) & 8) == 0) {
    goto LABEL_75;
  }
  uint64_t v58 = *((void *)this + 33);
  uint64_t v59 = *(void *)(*((void *)this + 32) + 2680);
  long long v316 = 0u;
  long long v317 = 0u;
  long long v314 = 0u;
  long long v315 = 0u;
  long long v312 = 0u;
  long long v313 = 0u;
  long long v310 = 0u;
  long long v311 = 0u;
  long long v309 = 0u;
  memset(buf, 0, sizeof(buf));
  int v60 = (*(_DWORD *)(v58 + 16) & 0xF) << 9;
  buf[0] = v59;
  int v61 = *(_DWORD *)(v58 + 212);
  *(_DWORD *)(v58 + 212) = 0;
  *(_DWORD *)(*((void *)this + 33) + 212) ^= 0xFFFFFF00;
  uint64_t v62 = *((void *)this + 33);
  int v63 = *(_DWORD *)(v62 + 212);
  *(_DWORD *)(v62 + 212) = v61;
  if (v59)
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 212, v60, 0xFFFFFFFFLL, 8, v63, 4);
    if (result) {
      return result;
    }
    uint64_t v64 = buf[0];
    int v65 = DWORD2(v316);
    LODWORD(v59) = HIDWORD(v316);
  }
  else
  {
    int v65 = 0;
    uint64_t v64 = 0;
  }
  if ((*(_DWORD *)(*(void *)v33 + 676) = 0,
        int v66 = *(_DWORD *)(*(void *)v33 + 676),
        *(_DWORD *)(*(void *)v33 + 676) = 0,
        *(_DWORD *)(*(void *)v33 + 676) ^= 0x3FFu,
        int v67 = *(_DWORD *)(*(void *)v33 + 676),
        *(_DWORD *)(*(void *)v33 + 676) = v66,
        !v64)
    && !v65
    && !v59
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 676, v60, 0x3FFFFFFFFFFLL, 32, v67, 4), !result))
  {
LABEL_75:
    uint64_t v68 = 0;
    int v69 = (char *)this + 16048;
    do
    {
      *(_DWORD *)(*(void *)v33 + v68 + 216) = 0;
      uint64_t v70 = *(void *)v33 + v68;
      int v71 = *(_DWORD *)(v70 + 216);
      *(_DWORD *)(v70 + 216) = 0;
      *(_DWORD *)(*(void *)v33 + v68 + 216) ^= 0xFFFFFF00;
      uint64_t v72 = *(void *)v33 + v68;
      int v73 = *(_DWORD *)(v72 + 216);
      *(_DWORD *)(v72 + 216) = v71;
      if (*(void *)v69 || *((_DWORD *)v69 + 38) || *((_DWORD *)v69 + 39))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v69, (int)v68 + 216, 0, 0xFFFFFFFFLL, 8, v73, 4);
        if (result) {
          return result;
        }
      }
      *(_DWORD *)(*(void *)v33 + v68 + 680) = 0;
      uint64_t v74 = *(void *)v33 + v68;
      int v75 = *(_DWORD *)(v74 + 680);
      *(_DWORD *)(v74 + 680) = 0;
      *(_DWORD *)(*(void *)v33 + v68 + 680) ^= 0x3FFu;
      uint64_t v76 = *(void *)v33 + v68;
      int v77 = *(_DWORD *)(v76 + 680);
      *(_DWORD *)(v76 + 680) = v75;
      if (*(void *)v69 || *((_DWORD *)v69 + 38) || *((_DWORD *)v69 + 39))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v69, (int)v68 + 680, 0, 0x3FFFFFFFFFFLL, 32, v77, 4);
        if (result) {
          return result;
        }
      }
      v68 += 4;
      v69 += 176;
    }
    while (v68 != 16);
    *(_DWORD *)(*((void *)this + 33) + 232) = 0;
    uint64_t v78 = *((void *)this + 33);
    int v79 = *(_DWORD *)(v78 + 232);
    *(_DWORD *)(v78 + 232) = 0;
    *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFF00;
    uint64_t v80 = *((void *)this + 33);
    int v81 = *(_DWORD *)(v80 + 232);
    *(_DWORD *)(v80 + 232) = v79;
    if (*((void *)this + 2094) || *v32 || *((_DWORD *)this + 4227))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2094, 232, 0, 0xFFFFFFFFLL, 8, v81, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 696) = 0;
    int v82 = *(_DWORD *)(*(void *)v33 + 696);
    *(_DWORD *)(*(void *)v33 + 696) = 0;
    *(_DWORD *)(*(void *)v33 + 696) ^= 0x3FFu;
    int v83 = *(_DWORD *)(*(void *)v33 + 696);
    *(_DWORD *)(*(void *)v33 + 696) = v82;
    if (*((void *)this + 2094) || *v32 || *((_DWORD *)this + 4227))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2094, 696, 0, 0x3FFFFFFFFFFLL, 32, v83, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 236) = 0;
    uint64_t v84 = *((void *)this + 33);
    int v85 = *(_DWORD *)(v84 + 236);
    *(_DWORD *)(v84 + 236) = 0;
    *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFF00;
    uint64_t v86 = *((void *)this + 33);
    int v87 = *(_DWORD *)(v86 + 236);
    *(_DWORD *)(v86 + 236) = v85;
    if (*((void *)this + 2116) || *((_DWORD *)this + 4270) || *((_DWORD *)this + 4271))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2116, 236, 0, 0xFFFFFFFFLL, 8, v87, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 700) = 0;
    int v88 = *(_DWORD *)(*(void *)v33 + 700);
    *(_DWORD *)(*(void *)v33 + 700) = 0;
    *(_DWORD *)(*(void *)v33 + 700) ^= 0x3FFu;
    int v89 = *(_DWORD *)(*(void *)v33 + 700);
    *(_DWORD *)(*(void *)v33 + 700) = v88;
    if (*((void *)this + 2116) || *((_DWORD *)this + 4270) || *((_DWORD *)this + 4271))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2116, 700, 0, 0x3FFFFFFFFFFLL, 32, v89, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 240) = 0;
    uint64_t v90 = *((void *)this + 33);
    int v91 = *(_DWORD *)(v90 + 240);
    *(_DWORD *)(v90 + 240) = 0;
    *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFF00;
    uint64_t v92 = *((void *)this + 33);
    int v93 = *(_DWORD *)(v92 + 240);
    *(_DWORD *)(v92 + 240) = v91;
    if (*((void *)this + 2138) || *((_DWORD *)this + 4314) || *((_DWORD *)this + 4315))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2138, 240, 0, 0xFFFFFFFFLL, 8, v93, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 704) = 0;
    int v94 = *(_DWORD *)(*(void *)v33 + 704);
    *(_DWORD *)(*(void *)v33 + 704) = 0;
    *(_DWORD *)(*(void *)v33 + 704) ^= 0x3FFu;
    int v95 = *(_DWORD *)(*(void *)v33 + 704);
    *(_DWORD *)(*(void *)v33 + 704) = v94;
    if (*((void *)this + 2138) || *((_DWORD *)this + 4314) || *((_DWORD *)this + 4315))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2138, 704, 0, 0x3FFFFFFFFFFLL, 32, v95, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 244) = 0;
    uint64_t v96 = *((void *)this + 33);
    int v97 = *(_DWORD *)(v96 + 244);
    *(_DWORD *)(v96 + 244) = 0;
    *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFF00;
    uint64_t v98 = *((void *)this + 33);
    int v99 = *(_DWORD *)(v98 + 244);
    *(_DWORD *)(v98 + 244) = v97;
    if (*((void *)this + 2160) || *((_DWORD *)this + 4358) || *((_DWORD *)this + 4359))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2160, 244, 0, 0xFFFFFFFFLL, 8, v99, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 708) = 0;
    int v100 = *(_DWORD *)(*(void *)v33 + 708);
    *(_DWORD *)(*(void *)v33 + 708) = 0;
    *(_DWORD *)(*(void *)v33 + 708) ^= 0x3FFu;
    int v101 = *(_DWORD *)(*(void *)v33 + 708);
    *(_DWORD *)(*(void *)v33 + 708) = v100;
    if (*((void *)this + 2160) || *((_DWORD *)this + 4358) || *((_DWORD *)this + 4359))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2160, 708, 0, 0x3FFFFFFFFFFLL, 32, v101, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 248) = 0;
    uint64_t v102 = *((void *)this + 33);
    int v103 = *(_DWORD *)(v102 + 248);
    *(_DWORD *)(v102 + 248) = 0;
    *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFF00;
    uint64_t v104 = *((void *)this + 33);
    int v105 = *(_DWORD *)(v104 + 248);
    *(_DWORD *)(v104 + 248) = v103;
    if (*((void *)this + 2182) || *((_DWORD *)this + 4402) || *((_DWORD *)this + 4403))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2182, 248, 0, 0xFFFFFFFFLL, 8, v105, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 712) = 0;
    int v106 = *(_DWORD *)(*(void *)v33 + 712);
    *(_DWORD *)(*(void *)v33 + 712) = 0;
    *(_DWORD *)(*(void *)v33 + 712) ^= 0x3FFu;
    int v107 = *(_DWORD *)(*(void *)v33 + 712);
    *(_DWORD *)(*(void *)v33 + 712) = v106;
    if (*((void *)this + 2182) || *((_DWORD *)this + 4402) || *((_DWORD *)this + 4403))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 2182, 712, 0, 0x3FFFFFFFFFFLL, 32, v107, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 252) = 0;
    *(_DWORD *)(*((void *)this + 33) + 716) = 0;
    *(_DWORD *)(*((void *)this + 33) + 256) = 0;
    uint64_t v108 = *((void *)this + 33);
    int v109 = *(_DWORD *)(v108 + 256);
    *(_DWORD *)(v108 + 256) = 0;
    *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFF00;
    uint64_t v110 = *((void *)this + 33);
    int v111 = *(_DWORD *)(v110 + 256);
    *(_DWORD *)(v110 + 256) = v109;
    if (*((void *)this + 1456) || *((_DWORD *)this + 2950) || *((_DWORD *)this + 2951))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 256, 0, 0xFFFFFFFFLL, 8, v111, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 720) = 0;
    int v112 = *(_DWORD *)(*(void *)v33 + 720);
    *(_DWORD *)(*(void *)v33 + 720) = 0;
    *(_DWORD *)(*(void *)v33 + 720) ^= 0x3FFu;
    int v113 = *(_DWORD *)(*(void *)v33 + 720);
    *(_DWORD *)(*(void *)v33 + 720) = v112;
    if (*((void *)this + 1456) || *((_DWORD *)this + 2950) || *((_DWORD *)this + 2951))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 720, 0, 0x3FFFFFFFFFFLL, 32, v113, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 260) = 0;
    uint64_t v114 = *((void *)this + 33);
    int v115 = *(_DWORD *)(v114 + 260);
    *(_DWORD *)(v114 + 260) = 0;
    *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFF00;
    uint64_t v116 = *((void *)this + 33);
    int v117 = *(_DWORD *)(v116 + 260);
    *(_DWORD *)(v116 + 260) = v115;
    int v118 = (void *)((char *)this + 176 * v300 + 11824);
    if (*v118
      || *((_DWORD *)this + 44 * v300 + 2994)
      || *((_DWORD *)this + 44 * v300 + 2995))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v300 + 1478, 260, 0, 0xFFFFFFFFLL, 8, v117, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 724) = 0;
    int v119 = *(_DWORD *)(*(void *)v33 + 724);
    *(_DWORD *)(*(void *)v33 + 724) = 0;
    *(_DWORD *)(*(void *)v33 + 724) ^= 0x3FFu;
    int v120 = *(_DWORD *)(*(void *)v33 + 724);
    *(_DWORD *)(*(void *)v33 + 724) = v119;
    if (*v118
      || *((_DWORD *)this + 44 * v300 + 2994)
      || *((_DWORD *)this + 44 * v300 + 2995))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v118, 724, 0, 0x3FFFFFFFFFFLL, 32, v120, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 264) = 0;
    uint64_t v121 = *((void *)this + 33);
    int v122 = *(_DWORD *)(v121 + 264);
    *(_DWORD *)(v121 + 264) = 0;
    *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFF80;
    uint64_t v123 = *((void *)this + 33);
    int v124 = *(_DWORD *)(v123 + 264);
    *(_DWORD *)(v123 + 264) = v122;
    unsigned int v125 = (void *)((char *)this + 176 * v300 + 560);
    if (*v125 || *((_DWORD *)this + 44 * v300 + 178) || *((_DWORD *)this + 44 * v300 + 179))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v300 + 70, 264, 0, 0xFFFFFFFFLL, 7, v124, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 728) = 0;
    int v126 = *(_DWORD *)(*(void *)v33 + 728);
    *(_DWORD *)(*(void *)v33 + 728) = 0;
    *(_DWORD *)(*(void *)v33 + 728) ^= 0x3FFu;
    int v127 = *(_DWORD *)(*(void *)v33 + 728);
    *(_DWORD *)(*(void *)v33 + 728) = v126;
    if (*v125 || *((_DWORD *)this + 44 * v300 + 178) || *((_DWORD *)this + 44 * v300 + 179))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v125, 728, 0, 0x3FFFFFFFFFFLL, 32, v127, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 268) = 0;
    int v128 = *(_DWORD *)(*(void *)v33 + 268);
    *(_DWORD *)(*(void *)v33 + 268) = 0;
    *(_DWORD *)(*(void *)v33 + 268) ^= 0xFFFFFF80;
    int v129 = *(_DWORD *)(*(void *)v33 + 268);
    *(_DWORD *)(*(void *)v33 + 268) = v128;
    long long v130 = (void *)(v295 + 8);
    if (*(void *)(v295 + 8) || *(_DWORD *)(v295 + 160) || *(_DWORD *)(v295 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v295 + 8), 268, *(_DWORD *)(v295 + 60), 0xFFFFFFFFLL, 7, v129, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 732) = 0;
    int v131 = *(_DWORD *)(*(void *)v33 + 732);
    *(_DWORD *)(*(void *)v33 + 732) = 0;
    *(_DWORD *)(*(void *)v33 + 732) ^= 0x3FFu;
    int v132 = *(_DWORD *)(*(void *)v33 + 732);
    *(_DWORD *)(*(void *)v33 + 732) = v131;
    if (*v130 || *(_DWORD *)(v295 + 160) || *(_DWORD *)(v295 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v130, 732, *(_DWORD *)(v295 + 60), 0x3FFFFFFFFFFLL, 32, v132, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + 272) = 0;
    uint64_t v133 = *((void *)this + 33);
    int v134 = *(_DWORD *)(v133 + 272);
    *(_DWORD *)(v133 + 272) = 0;
    *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFF80;
    uint64_t v135 = *((void *)this + 33);
    int v136 = *(_DWORD *)(v135 + 272);
    *(_DWORD *)(v135 + 272) = v134;
    long long v137 = (void *)((char *)this + 176 * v300 + 4784);
    if (*v137
      || *((_DWORD *)this + 44 * v300 + 1234)
      || *((_DWORD *)this + 44 * v300 + 1235))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v300 + 598, 272, 0, 0xFFFFFFFFLL, 7, v136, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 736) = 0;
    int v138 = *(_DWORD *)(*(void *)v33 + 736);
    *(_DWORD *)(*(void *)v33 + 736) = 0;
    *(_DWORD *)(*(void *)v33 + 736) ^= 0x3FFu;
    int v139 = *(_DWORD *)(*(void *)v33 + 736);
    *(_DWORD *)(*(void *)v33 + 736) = v138;
    if (*v137
      || *((_DWORD *)this + 44 * v300 + 1234)
      || *((_DWORD *)this + 44 * v300 + 1235))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v137, 736, 0, 0x3FFFFFFFFFFLL, 32, v139, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 276) = 0;
    int v140 = *(_DWORD *)(*(void *)v33 + 276);
    *(_DWORD *)(*(void *)v33 + 276) = 0;
    *(_DWORD *)(*(void *)v33 + 276) ^= 0xFFFFFF80;
    int v141 = *(_DWORD *)(*(void *)v33 + 276);
    *(_DWORD *)(*(void *)v33 + 276) = v140;
    if (*v130 || *(_DWORD *)(v295 + 160) || *(_DWORD *)(v295 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v130, 276, *(_DWORD *)(v295 + 64), 0xFFFFFFFFLL, 7, v141, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v33 + 740) = 0;
    int v142 = *(_DWORD *)(*(void *)v33 + 740);
    *(_DWORD *)(*(void *)v33 + 740) = 0;
    *(_DWORD *)(*(void *)v33 + 740) ^= 0x3FFu;
    int v143 = *(_DWORD *)(*(void *)v33 + 740);
    *(_DWORD *)(*(void *)v33 + 740) = v142;
    if (*v130 || *(_DWORD *)(v295 + 160) || *(_DWORD *)(v295 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v130, 740, *(_DWORD *)(v295 + 64), 0x3FFFFFFFFFFLL, 32, v143, 4);
      if (result) {
        return result;
      }
    }
    if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
    {
      int v144 = *(_DWORD *)(*(void *)v33 + 268);
      *(_DWORD *)(*(void *)v33 + 268) = 0;
      *(_DWORD *)(*(void *)v33 + 268) ^= 0xFFFFFF80;
      int v145 = *(_DWORD *)(*(void *)v33 + 268);
      *(_DWORD *)(*(void *)v33 + 268) = v144;
      if (*v130 || *(_DWORD *)(v295 + 160) || *(_DWORD *)(v295 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v130, 268, *(_DWORD *)(v295 + 60), 0xFFFFFFFFLL, 7, v145, 4);
        if (result) {
          return result;
        }
      }
      int v146 = *(_DWORD *)(*(void *)v33 + 732);
      *(_DWORD *)(*(void *)v33 + 732) = 0;
      *(_DWORD *)(*(void *)v33 + 732) ^= 0x3FFu;
      int v147 = *(_DWORD *)(*(void *)v33 + 732);
      *(_DWORD *)(*(void *)v33 + 732) = v146;
      if (*v130 || *(_DWORD *)(v295 + 160) || *(_DWORD *)(v295 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v130, 732, *(_DWORD *)(v295 + 60), 0x3FFFFFFFFFFLL, 32, v147, 4);
        if (result) {
          return result;
        }
      }
      int v148 = *(_DWORD *)(*(void *)v33 + 276);
      *(_DWORD *)(*(void *)v33 + 276) = 0;
      *(_DWORD *)(*(void *)v33 + 276) ^= 0xFFFFFF80;
      int v149 = *(_DWORD *)(*(void *)v33 + 276);
      *(_DWORD *)(*(void *)v33 + 276) = v148;
      if (*v130 || *(_DWORD *)(v295 + 160) || *(_DWORD *)(v295 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v130, 276, *(_DWORD *)(v295 + 64), 0xFFFFFFFFLL, 7, v149, 4);
        if (result) {
          return result;
        }
      }
      int v150 = *(_DWORD *)(*(void *)v33 + 740);
      *(_DWORD *)(*(void *)v33 + 740) = 0;
      *(_DWORD *)(*(void *)v33 + 740) ^= 0x3FFu;
      int v151 = *(_DWORD *)(*(void *)v33 + 740);
      *(_DWORD *)(*(void *)v33 + 740) = v150;
      if (*v130 || *(_DWORD *)(v295 + 160) || *(_DWORD *)(v295 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v130, 740, *(_DWORD *)(v295 + 64), 0x3FFFFFFFFFFLL, 32, v151, 4);
        if (result) {
          return result;
        }
      }
      int v152 = *(_DWORD *)(*(void *)v33 + 264);
      *(_DWORD *)(*(void *)v33 + 264) = 0;
      *(_DWORD *)(*(void *)v33 + 264) ^= 0xFFFFFF80;
      int v153 = *(_DWORD *)(*(void *)v33 + 264);
      *(_DWORD *)(*(void *)v33 + 264) = v152;
      if (*v130 || *(_DWORD *)(v295 + 160) || *(_DWORD *)(v295 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v130, 264, *(_DWORD *)(v295 + 72), 0xFFFFFFFFLL, 7, v153, 4);
        if (result) {
          return result;
        }
      }
      int v154 = *(_DWORD *)(*(void *)v33 + 728);
      *(_DWORD *)(*(void *)v33 + 728) = 0;
      *(_DWORD *)(*(void *)v33 + 728) ^= 0x3FFu;
      int v155 = *(_DWORD *)(*(void *)v33 + 728);
      *(_DWORD *)(*(void *)v33 + 728) = v154;
      if (*v130 || *(_DWORD *)(v295 + 160) || *(_DWORD *)(v295 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v130, 728, *(_DWORD *)(v295 + 72), 0x3FFFFFFFFFFLL, 32, v155, 4);
        if (result) {
          return result;
        }
      }
      int v156 = *(_DWORD *)(*(void *)v33 + 272);
      *(_DWORD *)(*(void *)v33 + 272) = 0;
      *(_DWORD *)(*(void *)v33 + 272) ^= 0xFFFFFF80;
      int v157 = *(_DWORD *)(*(void *)v33 + 272);
      *(_DWORD *)(*(void *)v33 + 272) = v156;
      if (*v130 || *(_DWORD *)(v295 + 160) || *(_DWORD *)(v295 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v130, 272, *(_DWORD *)(v295 + 76), 0xFFFFFFFFLL, 7, v157, 4);
        if (result) {
          return result;
        }
      }
      int v158 = *(_DWORD *)(*(void *)v33 + 736);
      *(_DWORD *)(*(void *)v33 + 736) = 0;
      *(_DWORD *)(*(void *)v33 + 736) ^= 0x3FFu;
      int v159 = *(_DWORD *)(*(void *)v33 + 736);
      *(_DWORD *)(*(void *)v33 + 736) = v158;
      if (*v130 || *(_DWORD *)(v295 + 160) || *(_DWORD *)(v295 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v130, 736, *(_DWORD *)(v295 + 76), 0x3FFFFFFFFFFLL, 32, v159, 4);
        if (result) {
          return result;
        }
      }
    }
    if (*(_DWORD *)(v15 + 52) & 0x2000 | v297)
    {
      *((_DWORD *)this + v300 + 116) = 0;
      *(_DWORD *)(*((void *)this + 33) + 280) = 0;
      if (v297)
      {
        uint64_t v160 = 0;
        if (v294) {
          int v161 = 0x2000000;
        }
        else {
          int v161 = 0;
        }
        int v290 = v161;
        do
        {
          uint64_t v162 = *((void *)v319 + v160);
          uint64_t v163 = *(unsigned int *)(v162 + 32);
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 280) = 0;
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 280) = *(_DWORD *)(*(void *)v33 + 4 * v160 + 280) & 0xFFFFFFF | ((v297 << 28) - 0x10000000);
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 280) &= 0xF3FFFFFF;
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 280) = *(_DWORD *)(*(void *)v33 + 4 * v160 + 280) & 0xFDFFFFFF | v290;
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 280) |= 0x1000000u;
          int v164 = v298 - *(_DWORD *)(v162 + 12);
          int v165 = v164 & 0x1FFFF;
          if (v164 < -32768) {
            int v165 = 98304;
          }
          if (v164 < 0x8000) {
            int v166 = v165;
          }
          else {
            int v166 = 0x7FFF;
          }
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 280) = *(_DWORD *)(*(void *)v33 + 4 * v160 + 280) & 0xFFFE0000 | v166;
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 280) = *(_DWORD *)(*(void *)v33 + 4 * v160 + 280) & 0xFFFDFFFF | (*(unsigned __int8 *)(v162 + 1) << 17);
          if (*(_DWORD *)(v162 + 28) == 1)
          {
            long long v317 = 0u;
            long long v318 = 0u;
            long long v315 = 0u;
            long long v316 = 0u;
            long long v313 = 0u;
            long long v314 = 0u;
            long long v311 = 0u;
            long long v312 = 0u;
            long long v309 = 0u;
            long long v310 = 0u;
            memset(buf, 0, sizeof(buf));
            int DPB = AVC_RLM::getDPB(*(void *)(*((void *)this + 32) + 3104), buf);
            if (DPB < 1)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              int v306 = 136315138;
              int v307 = "populatePictureRegisters";
              int v27 = &_os_log_internal;
              uint64_t v28 = "AppleAVD: ERROR: %s: No ref pics found!\n";
            }
            else
            {
              uint64_t v168 = DPB;
              while (v168-- >= 1)
              {
                uint64_t v162 = buf[v168];
                if (!*(_DWORD *)(v162 + 28))
                {
                  uint64_t v163 = *(unsigned int *)(v162 + 32);
                  goto LABEL_224;
                }
              }
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 0xFFFFFFFFLL;
              }
              int v306 = 136315138;
              int v307 = "populatePictureRegisters";
              int v27 = &_os_log_internal;
              uint64_t v28 = "AppleAVD: ERROR: %s: No non-existing ref frames found!\n";
            }
            int v29 = (uint8_t *)&v306;
            goto LABEL_354;
          }
LABEL_224:
          if (v294)
          {
            buf[0] = 0;
            if (!CAVDAvcDecoder::decodeGetRenderTargetRef(*((void *)this + 32), v163, *(_DWORD *)(v162 + 56), *(_DWORD *)(v162 + 64), buf))
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v306) = 0;
                int v27 = &_os_log_internal;
                uint64_t v28 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
                int v29 = (uint8_t *)&v306;
                uint32_t v30 = 2;
                goto LABEL_39;
              }
              return 0xFFFFFFFFLL;
            }
            *(void *)(v162 + 40) = buf[0] + 8;
          }
          *(_DWORD *)(*((void *)this + 33) + 4 * v160 + 344) = 0;
          int v170 = 4 * v160;
          int v296 = 4 * v160 + 344;
          uint64_t v171 = *((void *)this + 33) + 4 * v160;
          int v172 = *(_DWORD *)(v171 + 344);
          *(_DWORD *)(v171 + 344) = 0;
          *(_DWORD *)(*((void *)this + 33) + 4 * v160 + 344) ^= 0xFFFFFF80;
          uint64_t v173 = *((void *)this + 33) + 4 * v160;
          int v174 = *(_DWORD *)(v173 + 344);
          *(_DWORD *)(v173 + 344) = v172;
          int v301 = (void *)((char *)this + 176 * v163 + 560);
          if (*v301
            || *((_DWORD *)this + 44 * v163 + 178)
            || *((_DWORD *)this + 44 * v163 + 179))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v301, v296, 0, 0xFFFFFFFFLL, 7, v174, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 744) = 0;
          int v293 = v170 + 744;
          uint64_t v175 = *(void *)v33 + 4 * v160;
          int v176 = *(_DWORD *)(v175 + 744);
          *(_DWORD *)(v175 + 744) = 0;
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 744) ^= 0x3FFu;
          uint64_t v177 = *(void *)v33 + 4 * v160;
          int v178 = *(_DWORD *)(v177 + 744);
          *(_DWORD *)(v177 + 744) = v176;
          if (*v301
            || *((_DWORD *)this + 44 * v163 + 178)
            || *((_DWORD *)this + 44 * v163 + 179))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v301, v293, 0, 0x3FFFFFFFFFFLL, 32, v178, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 408) = 0;
          int v292 = v170 + 408;
          uint64_t v179 = *(void *)v33 + 4 * v160;
          int v180 = *(_DWORD *)(v179 + 408);
          *(_DWORD *)(v179 + 408) = 0;
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 408) ^= 0xFFFFFF80;
          uint64_t v181 = *(void *)v33 + 4 * v160;
          int v182 = *(_DWORD *)(v181 + 408);
          *(_DWORD *)(v181 + 408) = v180;
          uint64_t v183 = *(void *)(v162 + 40);
          if (*(void *)v183 || *(_DWORD *)(v183 + 152) || *(_DWORD *)(v183 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v183, v292, *(_DWORD *)(v183 + 52), 0xFFFFFFFFLL, 7, v182, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 808) = 0;
          int v291 = v170 + 808;
          uint64_t v184 = *(void *)v33 + 4 * v160;
          int v185 = *(_DWORD *)(v184 + 808);
          *(_DWORD *)(v184 + 808) = 0;
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 808) ^= 0x3FFu;
          uint64_t v186 = *(void *)v33 + 4 * v160;
          int v187 = *(_DWORD *)(v186 + 808);
          *(_DWORD *)(v186 + 808) = v185;
          uint64_t v188 = *(void *)(v162 + 40);
          if (*(void *)v188 || *(_DWORD *)(v188 + 152) || *(_DWORD *)(v188 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v188, v291, *(_DWORD *)(v188 + 52), 0x3FFFFFFFFFFLL, 32, v187, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*((void *)this + 33) + 4 * v160 + 472) = 0;
          int v289 = v170 + 472;
          uint64_t v189 = *((void *)this + 33) + 4 * v160;
          int v190 = *(_DWORD *)(v189 + 472);
          *(_DWORD *)(v189 + 472) = 0;
          *(_DWORD *)(*((void *)this + 33) + 4 * v160 + 472) ^= 0xFFFFFF80;
          uint64_t v191 = *((void *)this + 33) + 4 * v160;
          int v192 = *(_DWORD *)(v191 + 472);
          *(_DWORD *)(v191 + 472) = v190;
          uint64_t v302 = (void *)((char *)this + 176 * v163 + 4784);
          if (*v302
            || *((_DWORD *)this + 44 * v163 + 1234)
            || *((_DWORD *)this + 44 * v163 + 1235))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v302, v289, 0, 0xFFFFFFFFLL, 7, v192, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 872) = 0;
          int v288 = v170 + 872;
          uint64_t v193 = *(void *)v33 + 4 * v160;
          int v194 = *(_DWORD *)(v193 + 872);
          *(_DWORD *)(v193 + 872) = 0;
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 872) ^= 0x3FFu;
          uint64_t v195 = *(void *)v33 + 4 * v160;
          int v196 = *(_DWORD *)(v195 + 872);
          *(_DWORD *)(v195 + 872) = v194;
          if (*v302
            || *((_DWORD *)this + 44 * v163 + 1234)
            || *((_DWORD *)this + 44 * v163 + 1235))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v302, v288, 0, 0x3FFFFFFFFFFLL, 32, v196, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 536) = 0;
          int v197 = v170 + 536;
          uint64_t v198 = *(void *)v33 + 4 * v160;
          int v199 = *(_DWORD *)(v198 + 536);
          *(_DWORD *)(v198 + 536) = 0;
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 536) ^= 0xFFFFFF80;
          uint64_t v200 = *(void *)v33 + 4 * v160;
          int v201 = *(_DWORD *)(v200 + 536);
          *(_DWORD *)(v200 + 536) = v199;
          uint64_t v202 = *(void *)(v162 + 40);
          if (*(void *)v202 || *(_DWORD *)(v202 + 152) || *(_DWORD *)(v202 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v202, v170 + 536, *(_DWORD *)(v202 + 56), 0xFFFFFFFFLL, 7, v201, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 936) = 0;
          int v203 = v170 + 936;
          uint64_t v204 = *(void *)v33 + 4 * v160;
          int v205 = *(_DWORD *)(v204 + 936);
          *(_DWORD *)(v204 + 936) = 0;
          *(_DWORD *)(*(void *)v33 + 4 * v160 + 936) ^= 0x3FFu;
          uint64_t v206 = *(void *)v33 + 4 * v160;
          int v207 = *(_DWORD *)(v206 + 936);
          *(_DWORD *)(v206 + 936) = v205;
          uint64_t v208 = *(void *)(v162 + 40);
          if (*(void *)v208 || *(_DWORD *)(v208 + 152) || *(_DWORD *)(v208 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v208, v203, *(_DWORD *)(v208 + 56), 0x3FFFFFFFFFFLL, 32, v207, 4);
            if (result) {
              return result;
            }
          }
          if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
          {
            uint64_t v209 = *(void *)v33 + 4 * v160;
            int v210 = *(_DWORD *)(v209 + 408);
            *(_DWORD *)(v209 + 408) = 0;
            *(_DWORD *)(*(void *)v33 + 4 * v160 + 408) ^= 0xFFFFFF80;
            uint64_t v211 = *(void *)v33 + 4 * v160;
            int v212 = *(_DWORD *)(v211 + 408);
            *(_DWORD *)(v211 + 408) = v210;
            uint64_t v213 = *(void *)(v162 + 40);
            if (*(void *)v213 || *(_DWORD *)(v213 + 152) || *(_DWORD *)(v213 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v213, v292, *(_DWORD *)(v213 + 52), 0xFFFFFFFFLL, 7, v212, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v214 = *(void *)v33 + 4 * v160;
            int v215 = *(_DWORD *)(v214 + 808);
            *(_DWORD *)(v214 + 808) = 0;
            *(_DWORD *)(*(void *)v33 + 4 * v160 + 808) ^= 0x3FFu;
            uint64_t v216 = *(void *)v33 + 4 * v160;
            int v217 = *(_DWORD *)(v216 + 808);
            *(_DWORD *)(v216 + 808) = v215;
            uint64_t v218 = *(void *)(v162 + 40);
            if (*(void *)v218 || *(_DWORD *)(v218 + 152) || *(_DWORD *)(v218 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v218, v291, *(_DWORD *)(v218 + 52), 0x3FFFFFFFFFFLL, 32, v217, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v219 = *(void *)v33 + 4 * v160;
            int v220 = *(_DWORD *)(v219 + 536);
            *(_DWORD *)(v219 + 536) = 0;
            *(_DWORD *)(*(void *)v33 + 4 * v160 + 536) ^= 0xFFFFFF80;
            uint64_t v221 = *(void *)v33 + 4 * v160;
            int v222 = *(_DWORD *)(v221 + 536);
            *(_DWORD *)(v221 + 536) = v220;
            uint64_t v223 = *(void *)(v162 + 40);
            if (*(void *)v223 || *(_DWORD *)(v223 + 152) || *(_DWORD *)(v223 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v223, v197, *(_DWORD *)(v223 + 56), 0xFFFFFFFFLL, 7, v222, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v224 = *(void *)v33 + 4 * v160;
            int v225 = *(_DWORD *)(v224 + 936);
            *(_DWORD *)(v224 + 936) = 0;
            *(_DWORD *)(*(void *)v33 + 4 * v160 + 936) ^= 0x3FFu;
            uint64_t v226 = *(void *)v33 + 4 * v160;
            int v227 = *(_DWORD *)(v226 + 936);
            *(_DWORD *)(v226 + 936) = v225;
            uint64_t v228 = *(void *)(v162 + 40);
            if (*(void *)v228 || *(_DWORD *)(v228 + 152) || *(_DWORD *)(v228 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v228, v203, *(_DWORD *)(v228 + 56), 0x3FFFFFFFFFFLL, 32, v227, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v229 = *(void *)v33 + 4 * v160;
            int v230 = *(_DWORD *)(v229 + 344);
            *(_DWORD *)(v229 + 344) = 0;
            *(_DWORD *)(*(void *)v33 + 4 * v160 + 344) ^= 0xFFFFFF80;
            uint64_t v231 = *(void *)v33 + 4 * v160;
            int v232 = *(_DWORD *)(v231 + 344);
            *(_DWORD *)(v231 + 344) = v230;
            uint64_t v233 = *(void *)(v162 + 40);
            if (*(void *)v233 || *(_DWORD *)(v233 + 152) || *(_DWORD *)(v233 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v233, v296, *(_DWORD *)(v233 + 64), 0xFFFFFFFFLL, 7, v232, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v234 = *(void *)v33 + 4 * v160;
            int v235 = *(_DWORD *)(v234 + 744);
            *(_DWORD *)(v234 + 744) = 0;
            *(_DWORD *)(*(void *)v33 + 4 * v160 + 744) ^= 0x3FFu;
            uint64_t v236 = *(void *)v33 + 4 * v160;
            int v237 = *(_DWORD *)(v236 + 744);
            *(_DWORD *)(v236 + 744) = v235;
            uint64_t v238 = *(void *)(v162 + 40);
            if (*(void *)v238 || *(_DWORD *)(v238 + 152) || *(_DWORD *)(v238 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v238, v293, *(_DWORD *)(v238 + 64), 0x3FFFFFFFFFFLL, 32, v237, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v239 = *(void *)v33 + 4 * v160;
            int v240 = *(_DWORD *)(v239 + 472);
            *(_DWORD *)(v239 + 472) = 0;
            *(_DWORD *)(*(void *)v33 + 4 * v160 + 472) ^= 0xFFFFFF80;
            uint64_t v241 = *(void *)v33 + 4 * v160;
            int v242 = *(_DWORD *)(v241 + 472);
            *(_DWORD *)(v241 + 472) = v240;
            uint64_t v243 = *(void *)(v162 + 40);
            if (*(void *)v243 || *(_DWORD *)(v243 + 152) || *(_DWORD *)(v243 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v243, v289, *(_DWORD *)(v243 + 68), 0xFFFFFFFFLL, 7, v242, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v244 = *(void *)v33 + 4 * v160;
            int v245 = *(_DWORD *)(v244 + 872);
            *(_DWORD *)(v244 + 872) = 0;
            *(_DWORD *)(*(void *)v33 + 4 * v160 + 872) ^= 0x3FFu;
            uint64_t v246 = *(void *)v33 + 4 * v160;
            int v247 = *(_DWORD *)(v246 + 872);
            *(_DWORD *)(v246 + 872) = v245;
            uint64_t v248 = *(void *)(v162 + 40);
            if (*(void *)v248 || *(_DWORD *)(v248 + 152) || *(_DWORD *)(v248 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v248, v288, *(_DWORD *)(v248 + 68), 0x3FFFFFFFFFFLL, 32, v247, 4);
              if (result) {
                return result;
              }
            }
          }
          ++v160;
        }
        while (v160 != v297);
      }
    }
    else
    {
      *(_DWORD *)(v15 + 52) |= 0x2000u;
      *((_DWORD *)this + v300 + 116) = 1;
      *(_DWORD *)(*((void *)this + 33) + 280) = 0;
    }
    *(_DWORD *)(*(void *)v33 + 600) = 0;
    *(_DWORD *)(*(void *)v33 + 1000) = 0;
    *(_DWORD *)(*(void *)v33 + 604) = 0;
    *(_DWORD *)(*(void *)v33 + 1004) = 0;
    *(_DWORD *)(*(void *)v33 + 608) = 0;
    *(_DWORD *)(*(void *)v33 + 612) = 0;
    if (v304)
    {
      uint64_t v249 = *((void *)this + 32);
      unsigned int v250 = *(unsigned __int8 *)(v249 + 3004);
      if (*(unsigned char *)(v249 + 3004))
      {
        unsigned int v250 = *(_DWORD *)(v249 + 3016);
        unsigned int v303 = *(_DWORD *)(v249 + 3020);
      }
      else
      {
        unsigned int v303 = 0;
      }
      uint64_t v251 = *(void *)(v249 + 3656);
      uint64_t v305 = *(unsigned int *)(v251 + 56);
      unint64_t v252 = *(unsigned int *)(v251 + 52) + (unint64_t)v250;
      uint64_t v253 = *((void *)this + 33);
      int v254 = *(_DWORD *)(v253 + 600);
      *(_DWORD *)(v253 + 600) = 0;
      *(_DWORD *)(*((void *)this + 33) + 600) ^= 0xFFFFFFC0;
      uint64_t v255 = *((void *)this + 33);
      int v256 = *(_DWORD *)(v255 + 600);
      *(_DWORD *)(v255 + 600) = v254;
      uint64_t v257 = *(void *)(*((void *)this + 32) + 3656);
      unint64_t v258 = HIDWORD(v252);
      if (*(void *)v257 || *(_DWORD *)(v257 + 152) || *(_DWORD *)(v257 + 156))
      {
        if (v258 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 1275;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v257, 600, v252, 0xFFFFFFFFLL, 6, v256, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v259 = *((void *)this + 33);
      int v260 = *(_DWORD *)(v259 + 1000);
      *(_DWORD *)(v259 + 1000) = 0;
      *(_DWORD *)(*((void *)this + 33) + 1000) ^= 0x3FFu;
      uint64_t v261 = *((void *)this + 33);
      int v262 = *(_DWORD *)(v261 + 1000);
      *(_DWORD *)(v261 + 1000) = v260;
      uint64_t v263 = *(void *)(*((void *)this + 32) + 3656);
      if (*(void *)v263 || *(_DWORD *)(v263 + 152) || *(_DWORD *)(v263 + 156))
      {
        if (v258 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 1277;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v263, 1000, v252, 0x3FFFFFFFFFFLL, 32, v262, 4);
        if (result) {
          return result;
        }
      }
      unint64_t v264 = v305 + v303;
      uint64_t v265 = *((void *)this + 33);
      int v266 = *(_DWORD *)(v265 + 604);
      *(_DWORD *)(v265 + 604) = 0;
      *(_DWORD *)(*((void *)this + 33) + 604) ^= 0xFFFFFFC0;
      uint64_t v267 = *((void *)this + 33);
      int v268 = *(_DWORD *)(v267 + 604);
      *(_DWORD *)(v267 + 604) = v266;
      uint64_t v269 = *(void *)(*((void *)this + 32) + 3656);
      unint64_t v270 = HIDWORD(v264);
      if (*(void *)v269 || *(_DWORD *)(v269 + 152) || *(_DWORD *)(v269 + 156))
      {
        if (v270 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 1280;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v269, 604, v264, 0xFFFFFFFFLL, 6, v268, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v271 = *((void *)this + 33);
      int v272 = *(_DWORD *)(v271 + 1004);
      *(_DWORD *)(v271 + 1004) = 0;
      *(_DWORD *)(*((void *)this + 33) + 1004) ^= 0x3FFu;
      uint64_t v273 = *((void *)this + 33);
      int v274 = *(_DWORD *)(v273 + 1004);
      *(_DWORD *)(v273 + 1004) = v272;
      uint64_t v275 = *(void *)(*((void *)this + 32) + 3656);
      if (*(void *)v275 || *(_DWORD *)(v275 + 152) || *(_DWORD *)(v275 + 156))
      {
        if (v270 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 1282;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v275, 1004, v264, 0x3FFFFFFFFFFLL, 32, v274, 4);
        if (result) {
          return result;
        }
      }
      if (v299)
      {
        *(_DWORD *)(*((void *)this + 33) + 608) = *(_DWORD *)(*((void *)this + 33) + 608) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 76) >> 6) & 0xFFF) << 6);
        uint64_t v276 = (_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 80);
      }
      else
      {
        if (CAHDecHibiscusAvc::getSWRStride(this, *(unsigned __int16 *)(v15 + 84) - *(unsigned __int16 *)(v15 + 80) + 1, *(unsigned __int8 *)(v5 + 2224 * v3 + 6), *(unsigned __int8 *)(v5 + 2224 * v3 + 7), *(_DWORD *)(v5 + 2224 * v3 + 2212)))return 0xFFFFFFFFLL; {
        *(_DWORD *)(*((void *)this + 33) + 608) = *(_DWORD *)(*((void *)this + 33) + 608) & 0xFFFC003F | (((*((_DWORD *)this + 4460) >> 6) & 0xFFF) << 6);
        }
        uint64_t v276 = (_DWORD *)((char *)this + 17844);
      }
      *(_DWORD *)(*(void *)v33 + 612) = *(_DWORD *)(*(void *)v33 + 612) & 0xFFF8003F | (((*v276 >> 6) & 0x1FFF) << 6);
    }
    uint64_t v277 = *((void *)this + 32);
    if (*(_DWORD *)(v277 + 2360) == 1)
    {
      uint64_t v278 = *(void *)v33;
      *(_DWORD *)(*(void *)v33 + 1104) = *(_DWORD *)(*(void *)v33 + 1104) & 0xFFFFFFFE | *(_DWORD *)(v277 + 2508) & 1;
      if (*(_DWORD *)(v277 + 2508))
      {
        *(_DWORD *)(v278 + 2080) = 0x10000000;
        *(_DWORD *)(v278 + 2084) = *(_DWORD *)(v277 + 2368);
        *(_DWORD *)(v278 + 2096) = 0;
        *(void *)(v278 + 2088) = 0;
        *(_OWORD *)(v278 + 2100) = *(_OWORD *)(v277 + 2372);
        long long v279 = *(_OWORD *)(v277 + 2404);
        *(_OWORD *)(v278 + 2116) = *(_OWORD *)(v277 + 2388);
        *(_OWORD *)(v278 + 2132) = v279;
      }
      *(_DWORD *)(*(void *)v33 + 1104) = *(_DWORD *)(*(void *)v33 + 1104) & 0xFFFFFFFD | (2
                                                                                                * (*(_DWORD *)(v277 + 2512) & 1));
      if (*(_DWORD *)(v277 + 2512))
      {
        *(_DWORD *)(v278 + 2148) = 0;
        if (!*(_DWORD *)(v277 + 2424))
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          LODWORD(buf[0]) = 136315138;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          int v27 = &_os_log_internal;
          uint64_t v28 = "AppleAVD: %s(): H13A descrambler is not supported\n";
          goto LABEL_353;
        }
        *(_DWORD *)(v277 + 2640) = 0;
        int v280 = *(_DWORD *)(v278 + 2148) & 0xF7FFFFF | ((*(_DWORD *)(v277 + 2420) & 1) << 23) | 0x20000000;
        *(_DWORD *)(v278 + 2148) = v280;
        *(_DWORD *)(v278 + 2148) = v280 & 0xFFC00000 | (*(_DWORD *)(v277 + 2364) == 0);
        long long v281 = *(_OWORD *)(v277 + 2428);
        long long v282 = *(_OWORD *)(v277 + 2444);
        *(_OWORD *)(v278 + 2184) = *(_OWORD *)(v277 + 2460);
        *(_OWORD *)(v278 + 2168) = v282;
        *(_OWORD *)(v278 + 2152) = v281;
      }
      *(_DWORD *)(*(void *)v33 + 1104) = *(_DWORD *)(*(void *)v33 + 1104) & 0xFFFFFFFB | (4
                                                                                                * (*(_DWORD *)(v277 + 2516) & 1));
      *(_DWORD *)(*(void *)v33 + 1104) = *(_DWORD *)(*(void *)v33 + 1104) & 0xFFFFFFF7 | (8
                                                                                                * (*(_DWORD *)(v277 + 2520) & 1));
      *(_DWORD *)(*(void *)v33 + 1104) = *(_DWORD *)(*(void *)v33 + 1104) & 0xFFFFFFEF | (16
                                                                                                * (*(_DWORD *)(v277 + 2524) & 1));
      if (*(_DWORD *)(v277 + 2516))
      {
        *(_DWORD *)(v278 + 2308) = 0;
        if (*(_DWORD *)(v277 + 2476) == 2) {
          int v283 = 805306368;
        }
        else {
          int v283 = 813694976;
        }
        *(_DWORD *)(v278 + 2308) = v283;
        memcpy((void *)(v278 + 2312), (const void *)(v277 + 2480), 4 * *(unsigned int *)(v277 + 2476));
        *(_DWORD *)(v277 + 2516) = 0;
      }
      *(_DWORD *)(*(void *)v33 + 1104) = *(_DWORD *)(*(void *)v33 + 1104) & 0xFFFFFFDF | (32
                                                                                                * (*(_DWORD *)(v277 + 2632) & 1));
      if (*(_DWORD *)(v277 + 2632))
      {
        *(_DWORD *)(v278 + 2200) = 0x80000000;
        unsigned int v284 = ((*(_DWORD *)(v277 + 2528) & 1) << 27) | 0x80000000;
        *(_DWORD *)(v278 + 2200) = v284;
        *(_DWORD *)(v278 + 2200) = v284 | (((2 * *(_DWORD *)(v277 + 2528)) & 4 | (*(_DWORD *)(v277 + 2528) >> 1) & 2 | (*(_DWORD *)(v277 + 2528) >> 3) & 1) << 24);
        long long v285 = *(_OWORD *)(v277 + 2532);
        long long v286 = *(_OWORD *)(v277 + 2548);
        *(_OWORD *)(v278 + 2236) = *(_OWORD *)(v277 + 2564);
        *(_OWORD *)(v278 + 2220) = v286;
        *(_OWORD *)(v278 + 2204) = v285;
        *(void *)(v278 + 2252) = *(void *)(v277 + 2580);
        *(void *)(v278 + 2260) = *(void *)(v277 + 2588);
        int v287 = *(_DWORD *)(v277 + 2528);
        if ((v287 & 6) != 0 && (v287 & 8) == 0)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          LODWORD(buf[0]) = 136315138;
          *(void *)((char *)buf + 4) = "populatePictureRegisters";
          int v27 = &_os_log_internal;
          uint64_t v28 = "AppleAVD: %s(): chip id is not used while ecid and/or board id is used\n";
LABEL_353:
          int v29 = (uint8_t *)buf;
LABEL_354:
          uint32_t v30 = 12;
LABEL_39:
          _os_log_impl(&dword_223977000, v27, OS_LOG_TYPE_DEFAULT, v28, v29, v30);
          return 0xFFFFFFFFLL;
        }
        *(_OWORD *)(v278 + 2268) = *(_OWORD *)(v277 + 2596);
      }
      *(_DWORD *)(*(void *)v33 + 1104) = *(_DWORD *)(*(void *)v33 + 1104) & 0xFFFFFFBF | ((*(_DWORD *)(v277 + 2636) & 1) << 6);
      if (*(_DWORD *)(v277 + 2636))
      {
        uint64_t result = 0;
        *(_DWORD *)(v278 + 2284) = -1879048192;
        *(_DWORD *)(v278 + 2284) = ((*(_DWORD *)(v277 + 2612) & 1) << 23) | 0x90000000;
        *(_OWORD *)(v278 + 2288) = *(_OWORD *)(v277 + 2616);
        *(_DWORD *)(v277 + 2640) = 1;
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t CAHDecHibiscusAvc::getSWRStride(CAHDecHibiscusAvc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 2230) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  long long v9 = (_DWORD *)((char *)this + 17840);
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      int v11 = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v12 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      int v11 = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC) + 63) & 0xFFFFFFC0;
      int v13 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      int v11 = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8) + 63) & 0xFFFFFFC0;
      int v13 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      int v11 = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v12 = 4 * a2;
LABEL_17:
      int v13 = v12 / a5;
LABEL_18:
      _DWORD *v9 = v11;
      v9[1] = (v13 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 136315394;
        uint64_t v15 = "getSWRStride";
        __int16 v16 = 1024;
        unsigned int v17 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v14, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecHibiscusAvc::getTileStartCTU(CAHDecHibiscusAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 1008);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecHibiscusAvc::getTileEndCTU(CAHDecHibiscusAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 1008);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecHibiscusAvc::getTileIdxAbove(CAHDecHibiscusAvc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 1008);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecHibiscusAvc::populateAvdWork(CAHDecHibiscusAvc *this, unsigned int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v3 + 3312);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 7500);
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    long long v9 = (int *)(v2 + 3264);
    long long v10 = (int *)(v4 + 20);
    __int16 v22 = a2;
    uint64_t v11 = 44 * a2;
    uint64_t v12 = v2 + 956 * v5;
    while (1)
    {
      uint64_t v13 = v12 + v7;
      *(_WORD *)(v13 + 2332) = v8;
      *(_WORD *)(v13 + 2334) = 0;
      *(_WORD *)(v13 + 2336) = v8;
      *(_DWORD *)(v12 + v7 + 2338) = 0;
      int v14 = *v9;
      if (!CAVDAvcDecoder::GetSDataMemInfo(*((void *)this + 32), v8, &v24, &v23)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *v10;
      *(_DWORD *)(v13 + 2360) = *v10;
      *(_DWORD *)(v13 + 2364) = v15;
      *(_DWORD *)(v13 + 2368) = 0;
      if (v7) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = 15;
      }
      *(_WORD *)(v13 + 2342) = v16;
      uint64_t v17 = v24;
      if (*(void *)v24 || *(_DWORD *)(v24 + 152) || *(_DWORD *)(v24 + 156))
      {
        int v18 = v23;
        if (HIDWORD(v23) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          unsigned int v26 = "populateAvdWork";
          __int16 v27 = 1024;
          int v28 = 1968;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          int v18 = v23;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 862750, v18, 0x3FFFFFFFFFFLL, 32, -1, 2);
        if (result) {
          return result;
        }
        uint64_t v17 = v24;
        if (*(void *)v24) {
          goto LABEL_17;
        }
      }
      if (*(_DWORD *)(v17 + 152) || *(_DWORD *)(v17 + 156))
      {
LABEL_17:
        int v20 = v23;
        if (HIDWORD(v23))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            unsigned int v26 = "populateAvdWork";
            __int16 v27 = 1024;
            int v28 = 1969;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v20 = v23;
          }
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 862752, v20, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
      v9 += 239;
      *(_DWORD *)(v12 + v7 + 2356) = v14;
      ++v8;
      v7 += 44;
      v10 += 462;
      if (v11 == v7)
      {
        uint64_t v2 = *((void *)this + 33);
        __int16 v21 = v22;
        goto LABEL_24;
      }
    }
  }
  else
  {
    __int16 v21 = 0;
LABEL_24:
    uint64_t result = 0;
    *(_WORD *)(v2 + 28) = v21;
    *(_DWORD *)(v2 + 32) = 862728;
  }
  return result;
}

uint64_t CAHDecHibiscusAvc::allocWorkBuf_SPS(CAHDecHibiscusAvc *this, unsigned char *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v3 = (unsigned int *)((char *)this + 17808);
  int v4 = a2[4];
  unsigned int v5 = *((unsigned __int16 *)a2 + 779);
  int v6 = 16 * v5;
  unsigned int v7 = *((unsigned __int16 *)a2 + 780);
  unsigned int v8 = 32 - __clz(((16 * v5 + 47) >> 5) - 1);
  if (v5 < 2) {
    LOBYTE(v8) = 0;
  }
  unsigned int v9 = 32 - __clz(((16 * v7 + 47) >> 5) - 1);
  if (v7 < 2) {
    LOBYTE(v9) = 0;
  }
  unsigned int v10 = ((32 << (v9 + v8)) + 127) & 0xFFFFFF80;
  if (a2[4])
  {
    unsigned int v11 = (v6 + 16) << (v4 == 3);
    unsigned int v12 = ((((16 * v7 + 16) | (v4 == 1)) >> (v4 == 1)) + 15) >> 4;
    if (v11 > 0x20)
    {
      unsigned int v13 = 32 - __clz(((v11 + 31) >> 5) - 1);
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v12 = 0;
  }
  LOBYTE(v13) = 0;
LABEL_10:
  unsigned int v14 = 32 - __clz(v12 - 1);
  if (v12 >= 2) {
    char v15 = v14;
  }
  else {
    char v15 = 0;
  }
  unsigned int v16 = ((8 << (v15 + v13)) + 127) & 0xFFFFFF80;
  if (a2[4]) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = 0;
  }
  unsigned int *v3 = v10;
  *((_DWORD *)this + 4453) = v17;
  *((void *)this + 2227) = 0;
  int v18 = 76 * v5 + 76;
  *((_DWORD *)this + 4457) = v18 + v18 * v7;
  *((_DWORD *)this + 4458) = v18;
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    uint64_t v19 = 24;
    int v20 = this;
    while (1)
    {
      uint64_t v21 = *v3;
      if (v21
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 35, v21, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_35;
        }
        int v28 = 136315650;
        uint64_t v29 = "allocWorkBuf_SPS";
        __int16 v30 = 1024;
        int v31 = 2207;
        __int16 v32 = 2080;
        unsigned int v33 = "HdrY";
        __int16 v27 = &_os_log_internal;
        goto LABEL_34;
      }
      uint64_t v22 = v3[1];
      if (v22)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 299, v22, 7, 1, 0)) {
          break;
        }
      }
      int v20 = (CAHDecHibiscusAvc *)((char *)v20 + 176);
      if (!--v19) {
        goto LABEL_23;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v28 = 136315650;
    uint64_t v29 = "allocWorkBuf_SPS";
    __int16 v30 = 1024;
    int v31 = 2208;
    __int16 v32 = 2080;
    unsigned int v33 = "HdrC";
    __int16 v27 = &_os_log_internal;
    goto LABEL_34;
  }
LABEL_23:
  unint64_t v23 = (_OWORD *)((char *)this + 11824);
  uint64_t v24 = 24;
  while (1)
  {
    uint64_t v25 = v3[5];
    if (v25)
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), v23, v25, 7, 1, 0)) {
        break;
      }
    }
    v23 += 11;
    if (!--v24)
    {
      uint64_t result = 0;
      v3[10] = 0;
      v3[11] = v6 | (v7 << 20) | 0xF000F;
      return result;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v28 = 136315650;
    uint64_t v29 = "allocWorkBuf_SPS";
    __int16 v30 = 1024;
    int v31 = 2214;
    __int16 v32 = 2080;
    unsigned int v33 = "MvColo";
    __int16 v27 = &_os_log_internal;
LABEL_34:
    _os_log_impl(&dword_223977000, v27, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v28, 0x1Cu);
  }
LABEL_35:
  (*(void (**)(CAHDecHibiscusAvc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecHibiscusAvc::allocWorkBuf_PPS(CAHDecHibiscusAvc *this, unsigned char *a2, void *a3, void *a4)
{
  uint64_t v5 = 0;
  uint64_t v27 = *MEMORY[0x263EF8340];
  int v6 = a2[4];
  uint64_t v7 = 16 * *((unsigned __int16 *)a2 + 779);
  unsigned int v8 = (a2[6] + 9) & 0x1FE;
  if (v8 <= ((a2[7] + 9) & 0x1FEu)) {
    unsigned int v8 = (a2[7] + 9) & 0x1FE;
  }
  if (v6 == 3) {
    int v9 = 48;
  }
  else {
    int v9 = 32;
  }
  if (v6 == 3) {
    int v10 = 192;
  }
  else {
    int v10 = 128;
  }
  BOOL v11 = v6 == 0;
  if (a2[4]) {
    int v12 = v9;
  }
  else {
    int v12 = 16;
  }
  unsigned int v13 = (v7 + 31) >> 4;
  if (v11) {
    int v10 = 64;
  }
  uint64_t v14 = ((v8 * v12) >> 3) * v13;
  uint64_t v15 = 36 * ((v7 + 31) >> 4);
  uint64_t v16 = ((v8 * v10) >> 3) * v13;
  uint64_t v17 = 4 * (((unint64_t)(v7 + 16) >> 2) + ((unint64_t)(v7 + 16) >> 4));
  int v18 = (char *)this + 16048;
  do
  {
    if (CAVDDecoder::allocAVDMem(*((void *)this + 32), &v18[v5], v17, 7, 1, 0))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_24;
      }
      int v21 = 136315650;
      uint64_t v22 = "allocWorkBuf_PPS";
      __int16 v23 = 1024;
      int v24 = 2333;
      __int16 v25 = 2080;
      unsigned int v26 = "AvpAboveInfo";
      uint64_t v19 = &_os_log_internal;
LABEL_23:
      _os_log_impl(&dword_223977000, v19, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v21, 0x1Cu);
      goto LABEL_24;
    }
    v5 += 176;
  }
  while (v5 != 704);
  if (v14
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 1047, v14, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315650;
      uint64_t v22 = "allocWorkBuf_PPS";
      __int16 v23 = 1024;
      int v24 = 2337;
      __int16 v25 = 2080;
      unsigned int v26 = "IpAbove";
      uint64_t v19 = &_os_log_internal;
      goto LABEL_23;
    }
LABEL_24:
    (*(void (**)(CAHDecHibiscusAvc *, void))(*(void *)this + 152))(this, 0);
    return 0xFFFFFFFFLL;
  }
  if (v16
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 1058, v16, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    int v21 = 136315650;
    uint64_t v22 = "allocWorkBuf_PPS";
    __int16 v23 = 1024;
    int v24 = 2338;
    __int16 v25 = 2080;
    unsigned int v26 = "LfAbovePix";
    uint64_t v19 = &_os_log_internal;
    goto LABEL_23;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 1069, v15, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    int v21 = 136315650;
    uint64_t v22 = "allocWorkBuf_PPS";
    __int16 v23 = 1024;
    int v24 = 2339;
    __int16 v25 = 2080;
    unsigned int v26 = "LfAboveInfo";
    uint64_t v19 = &_os_log_internal;
    goto LABEL_23;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 728, v15, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    int v21 = 136315650;
    uint64_t v22 = "allocWorkBuf_PPS";
    __int16 v23 = 1024;
    int v24 = 2342;
    __int16 v25 = 2080;
    unsigned int v26 = "MvAboveInfo";
    uint64_t v19 = &_os_log_internal;
    goto LABEL_23;
  }
  return result;
}

uint64_t CAHDecHibiscusAvc::freeWorkBuf_SPS(CAHDecHibiscusAvc *this)
{
  uint64_t v2 = 24;
  uint64_t v3 = (uint64_t *)this;
  do
  {
    uint64_t result = *((void *)this + 32);
    if (!*(_DWORD *)(result + 2648))
    {
      if (v3[70])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(result, v3 + 70);
        v3[70] = 0;
      }
      if (v3[598])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 598);
        v3[598] = 0;
      }
    }
    if (v3[1478])
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 1478);
      v3[1478] = 0;
    }
    v3 += 22;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t *CAHDecHibiscusAvc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = 0;
  int v4 = this + 2006;
  do
  {
    if (v4[v3])
    {
      this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], &v4[v3]);
      v4[v3] = 0;
    }
    v3 += 22;
  }
  while (v3 != 88);
  if (v2[2094])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 2094);
    v2[2094] = 0;
  }
  if (v2[1456])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1456);
    v2[1456] = 0;
  }
  if (v2[2116])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 2116);
    v2[2116] = 0;
  }
  if (v2[2138])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 2138);
    v2[2138] = 0;
  }
  if (v2[2160])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 2160);
    v2[2160] = 0;
  }
  if (v2[2182])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 2182);
    v2[2182] = 0;
  }
  if (v2[2204])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 2204);
    v2[2204] = 0;
  }
  return this;
}

uint64_t CAHDecHibiscusAvc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 9008;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 17824) = a2;
  return this;
}

uint64_t CAHDecHibiscusAvc::decodeBuffer(CAHDecHibiscusAvc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecHibiscusAvc::decodeBufferSize(CAHDecHibiscusAvc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecHibiscusAvc::decHdrYLinAddr(CAHDecHibiscusAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 70);
}

uint64_t CAHDecHibiscusAvc::decHdrCLinAddr(CAHDecHibiscusAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 598);
}

uint64_t CAHDecHibiscusAvc::decHdrYSize(CAHDecHibiscusAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 151);
}

uint64_t CAHDecHibiscusAvc::decHdrCSize(CAHDecHibiscusAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 1207);
}

uint64_t CAHDecHibiscusAvc::decHdrYStride(CAHDecHibiscusAvc *this)
{
  return *((unsigned int *)this + 4454);
}

uint64_t CAHDecHibiscusAvc::decHdrCStride(CAHDecHibiscusAvc *this)
{
  return *((unsigned int *)this + 4455);
}

CAHDecHibiscusAvx *createHibiscusAvxDecoder(void **a1)
{
  uint64_t v2 = (CAHDecHibiscusAvx *)operator new(0x1740uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecHibiscusAvx::CAHDecHibiscusAvx(v2, a1);
  }
  return v3;
}

void sub_223A69230(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecHibiscusAvx::CAHDecHibiscusAvx(CAHDecHibiscusAvx *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D741DF8;
  *(_DWORD *)(v1 + 456) = 198332;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecHibiscusAvx::CAHDecHibiscusAvx(CAHDecHibiscusAvx *this, void **a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D741DF8;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 198332;
  *(_DWORD *)(v4 + 8) = 1652;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 3;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 198332, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315394;
      uint64_t v22 = "CAHDecHibiscusAvx";
      __int16 v23 = 1024;
      int v24 = 0;
      uint64_t v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  uint64_t v8 = *((void *)this + 35);
  *((_DWORD *)this + 13) = 0;
  *((void *)this + 33) = v8;
  *((void *)this + 34) = v8;
  bzero(a2 + 384, 0x1340uLL);
  bzero(a2[1000], 0x1500uLL);
  bzero((char *)this + 464, 0x1550uLL);
  bzero(a2 + 1001, 0x1E18uLL);
  uint64_t v9 = 0;
  *((void *)this + 740) = 0;
  *((_OWORD *)this + 371) = 0u;
  uint64_t v10 = 9168;
  *((_DWORD *)this + 1485) = 9168;
  uint64_t v11 = *((void *)this + 32);
LABEL_5:
  if (CAVDDecoder::allocAVDMem(v11, (_OWORD *)(v11 + v9 + 10304), v10, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315650;
      uint64_t v22 = "CAHDecHibiscusAvx";
      __int16 v23 = 1024;
      int v24 = 168;
      __int16 v25 = 2080;
      unsigned int v26 = "probs_Buf";
      uint64_t v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v11 = *((void *)this + 32);
  while (1)
  {
    uint64_t v12 = *(void *)(v11 + v9 + 10304);
    if (v12) {
      *(void *)(v11 + v9 + 10296) = v12;
    }
    if (v9 == 2208) {
      break;
    }
    uint64_t v10 = *((unsigned int *)this + 1485);
    v9 += 184;
    if (*((_DWORD *)this + 1485)) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = *(void *)(v11 + 42392);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (void *)(v13 + 1960);
    do
    {
      *uint64_t v15 = v11 + 10296 + v14;
      v14 += 184;
      v15 += 254;
    }
    while (v14 != 2392);
  }
  uint64_t v16 = 0;
  for (uint64_t i = 12696; ; i += 184)
  {
    uint64_t v18 = *((unsigned int *)this + 1485);
    uint64_t v19 = *((void *)this + 32);
    if (v18) {
      break;
    }
LABEL_19:
    uint64_t v20 = *(void *)(v19 + i);
    if (v20) {
      *(void *)(v19 + i - 8) = v20;
    }
    if (*(void *)(v19 + 15952)) {
      AV1_Syntax::Set_Default_Frame_Context_Info(*(void *)(v19 + 15952), (uint64_t *)(v19 + i - 8), v16);
    }
    if (++v16 == 4) {
      return;
    }
  }
  if (!CAVDDecoder::allocAVDMem(v19, (_OWORD *)(v19 + i), v18, 7, 1, 0))
  {
    uint64_t v19 = *((void *)this + 32);
    goto LABEL_19;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 136315650;
    uint64_t v22 = "CAHDecHibiscusAvx";
    __int16 v23 = 1024;
    int v24 = 183;
    __int16 v25 = 2080;
    unsigned int v26 = "probs_Buf";
    uint64_t v5 = &_os_log_internal;
    int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_29:
    uint32_t v7 = 28;
LABEL_30:
    _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v21, v7);
  }
LABEL_31:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_223A69618(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecHibiscusAvx::~CAHDecHibiscusAvx(CAHDecHibiscusAvx *this)
{
  uint64_t v2 = 0;
  *(void *)this = &unk_26D741DF8;
  uint64_t v3 = *((void *)this + 32);
  do
  {
    if (*(void *)(v3 + v2 + 10304))
    {
      CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + v2 + 10304));
      uint64_t v3 = *((void *)this + 32);
      *(_OWORD *)(v3 + v2 + 10296) = 0u;
    }
    v2 += 184;
  }
  while (v2 != 2392);
  for (uint64_t i = 0; i != 736; i += 184)
  {
    if (*(void *)(v3 + i + 12696))
    {
      CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 12696));
      uint64_t v3 = *((void *)this + 32);
      *(_OWORD *)(v3 + i + 12688) = 0u;
    }
  }
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(v3, (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecHibiscusAvx::~CAHDecHibiscusAvx(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecHibiscusAvx::startPicture(CAHDecHibiscusAvx *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  uint64_t v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x306BCuLL);
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    uint64_t v6 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v6 + 16) = a2;
    *(_WORD *)(v6 + 24) = 257;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecHibiscusAvx::DecodePicture(CAHDecHibiscusAvx *this, uint64_t a2)
{
  if (CAHDecHibiscusAvx::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecHibiscusAvx *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecHibiscusAvx *))(*(void *)this + 48))(this);
  if ((*(unsigned int (**)(CAHDecHibiscusAvx *))(*(void *)this + 56))(this)
    || CAHDecDaisyAvx::populateAddressRegisters(this)
    || CAHDecHibiscusAvx::populateDecryptionRegisters(this))
  {
    return 4;
  }
  CAHDecHibiscusAvx::populateTiles(this);
  CAHDecDaisyAvx::populateAvxVPDependency((CAVDAvxDecoder **)this);
  (*(void (**)(CAHDecHibiscusAvx *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecHibiscusAvx *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecHibiscusAvx::populateDecryptionRegisters(CAHDecHibiscusAvx *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 32);
  if (*(_DWORD *)(v1 + 2360) != 1) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 33);
  *(_DWORD *)(v3 + 1392) = *(_DWORD *)(v3 + 1392) & 0xFFFFFFFE | *(_DWORD *)(v1 + 2508) & 1;
  if (*(_DWORD *)(v1 + 2508))
  {
    *(_DWORD *)(v3 + 1404) = 0x10000000;
    *(_DWORD *)(v3 + 1408) = *(_DWORD *)(v1 + 2368);
    *(void *)(v3 + 1416) = 0;
    *(_DWORD *)(v3 + 1412) = 0;
    *(_OWORD *)(v3 + 1424) = *(_OWORD *)(v1 + 2372);
    long long v4 = *(_OWORD *)(v1 + 2388);
    *(_OWORD *)(v3 + 1456) = *(_OWORD *)(v1 + 2404);
    *(_OWORD *)(v3 + 1440) = v4;
  }
  *(_DWORD *)(*((void *)this + 33) + 1392) = *(_DWORD *)(*((void *)this + 33) + 1392) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v1 + 2512) & 1));
  if (!*(_DWORD *)(v1 + 2512))
  {
LABEL_7:
    *(_DWORD *)(*((void *)this + 33) + 1392) = *(_DWORD *)(*((void *)this + 33) + 1392) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v1 + 2516) & 1));
    *(_DWORD *)(*((void *)this + 33) + 1392) = *(_DWORD *)(*((void *)this + 33) + 1392) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v1 + 2520) & 1));
    *(_DWORD *)(*((void *)this + 33) + 1392) = *(_DWORD *)(*((void *)this + 33) + 1392) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v1 + 2524) & 1));
    if (*(_DWORD *)(v1 + 2516))
    {
      *(_DWORD *)(v3 + 1632) = 0;
      if (*(_DWORD *)(v1 + 2476) == 2) {
        int v8 = 805306368;
      }
      else {
        int v8 = 813694976;
      }
      *(_DWORD *)(v3 + 1632) = v8;
      memcpy((void *)(v3 + 1636), (const void *)(v1 + 2480), 4 * *(unsigned int *)(v1 + 2476));
      *(_DWORD *)(v1 + 2516) = 0;
    }
    *(_DWORD *)(*((void *)this + 33) + 1392) = *(_DWORD *)(*((void *)this + 33) + 1392) & 0xFFFEFFFF | ((*(_DWORD *)(v1 + 2632) & 1) << 16);
    if (*(_DWORD *)(v1 + 2632))
    {
      *(_DWORD *)(v3 + 1524) = 0x80000000;
      unsigned int v9 = ((*(_DWORD *)(v1 + 2528) & 1) << 27) | 0x80000000;
      *(_DWORD *)(v3 + 1524) = v9;
      *(_DWORD *)(v3 + 1524) = v9 | (((2 * *(_DWORD *)(v1 + 2528)) & 4 | (*(_DWORD *)(v1 + 2528) >> 1) & 2 | (*(_DWORD *)(v1 + 2528) >> 3) & 1) << 24);
      long long v10 = *(_OWORD *)(v1 + 2532);
      long long v11 = *(_OWORD *)(v1 + 2564);
      *(_OWORD *)(v3 + 1544) = *(_OWORD *)(v1 + 2548);
      *(_OWORD *)(v3 + 1560) = v11;
      *(_OWORD *)(v3 + 1528) = v10;
      *(void *)(v3 + 1576) = *(void *)(v1 + 2580);
      *(void *)(v3 + 1584) = *(void *)(v1 + 2588);
      int v12 = *(_DWORD *)(v1 + 2528);
      if ((v12 & 6) != 0 && (v12 & 8) == 0)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = 136315138;
          uint64_t v17 = "populateDecryptionRegisters";
          uint64_t v13 = &_os_log_internal;
          uint64_t v14 = "AppleAVD: %s(): chip id is not used while ecid and/or board id is used\n";
LABEL_23:
          _os_log_impl(&dword_223977000, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v16, 0xCu);
          return 0xFFFFFFFFLL;
        }
        return 0xFFFFFFFFLL;
      }
      *(_OWORD *)(v3 + 1592) = *(_OWORD *)(v1 + 2596);
    }
    *(_DWORD *)(*((void *)this + 33) + 1392) = *(_DWORD *)(*((void *)this + 33) + 1392) & 0xFFFDFFFF | ((*(_DWORD *)(v1 + 2636) & 1) << 17);
    if (*(_DWORD *)(v1 + 2636))
    {
      uint64_t result = 0;
      *(_DWORD *)(v3 + 1608) = -1879048192;
      *(_DWORD *)(v3 + 1608) = ((*(_DWORD *)(v1 + 2612) & 1) << 23) | 0x90000000;
      *(_OWORD *)(v3 + 1612) = *(_OWORD *)(v1 + 2616);
      *(_DWORD *)(v1 + 2640) = 1;
      return result;
    }
    return 0;
  }
  *(_DWORD *)(v3 + 1472) = 0;
  if (*(_DWORD *)(v1 + 2424))
  {
    *(_DWORD *)(v1 + 2640) = 0;
    int v5 = *(_DWORD *)(v3 + 1472) & 0xF7FFFFF | ((*(_DWORD *)(v1 + 2420) & 1) << 23) | 0x20000000;
    *(_DWORD *)(v3 + 1472) = v5;
    *(_DWORD *)(v3 + 1472) = v5 & 0xFFC00000 | (*(_DWORD *)(v1 + 2364) == 0);
    long long v6 = *(_OWORD *)(v1 + 2428);
    long long v7 = *(_OWORD *)(v1 + 2444);
    *(_OWORD *)(v3 + 1508) = *(_OWORD *)(v1 + 2460);
    *(_OWORD *)(v3 + 1492) = v7;
    *(_OWORD *)(v3 + 1476) = v6;
    goto LABEL_7;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315138;
    uint64_t v17 = "populateDecryptionRegisters";
    uint64_t v13 = &_os_log_internal;
    uint64_t v14 = "AppleAVD: %s(): H13A descrambler is not supported\n";
    goto LABEL_23;
  }
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecHibiscusAvx::populateTiles(CAHDecHibiscusAvx *this)
{
  uint64_t v2 = (*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 140)
                    * *(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 136));
  uint64_t v3 = *((void *)this + *((unsigned int *)this + 13) + 34);
  CAHDecDaisyAvx::populateClearTiles(this);
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 1652;
    do
    {
      CAHDecTansyAvx::populateTileRegisters((uint64_t)this, v5, v4++);
      v5 += 12;
    }
    while (v2 != v4);
  }
  return 0;
}

uint64_t CAHDecHibiscusAvx::populateCommonRegisters(CAHDecHibiscusAvx *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000003;
  return 0;
}

uint64_t CAHDecHibiscusAvx::updateCommonRegisters(CAHDecHibiscusAvx *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecHibiscusAvx::populateSequenceRegisters(CAHDecHibiscusAvx *this)
{
  uint64_t v2 = *((void *)this + 32);
  uint64_t v1 = *((void *)this + 33);
  uint64_t v3 = *(void *)(v2 + 42424);
  uint64_t v4 = *(void *)(v2 + 15944);
  *(_DWORD *)(v1 + 44) = 0;
  unsigned __int16 v5 = *(_DWORD *)(v4 + 8) - 1;
  *(_DWORD *)(v1 + 44) = v5;
  *(_DWORD *)(v1 + 44) = (v5 | ((unsigned __int16)*(_DWORD *)(v4 + 12) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 48) = 0;
  int v6 = *(_DWORD *)(v3 + 80) & 1;
  *(_DWORD *)(v1 + 48) = v6;
  unsigned int v7 = v6 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v3 + 76) & 7));
  *(_DWORD *)(v1 + 48) = v7;
  unsigned int v8 = v7 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v3 + 72) & 1));
  *(_DWORD *)(v1 + 48) = v8;
  unsigned int v9 = v8 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v3 + 96) & 1));
  *(_DWORD *)(v1 + 48) = v9;
  unsigned int v10 = v9 & 0xFFFFFFBF | ((*(unsigned char *)(v3 + 95) & 1) << 6);
  *(_DWORD *)(v1 + 48) = v10;
  unsigned int v11 = v10 & 0xFFFFFF7F | ((*(unsigned char *)(v3 + 94) & 1) << 7);
  *(_DWORD *)(v1 + 48) = v11;
  unsigned int v12 = v11 & 0xFFFFFEFF | ((*(unsigned char *)(v3 + 93) & 1) << 8);
  *(_DWORD *)(v1 + 48) = v12;
  unsigned int v13 = v12 & 0xFFFFFDFF | ((*(unsigned char *)(v3 + 92) & 1) << 9);
  *(_DWORD *)(v1 + 48) = v13;
  unsigned int v14 = v13 & 0xFFFFFBFF | ((*(_DWORD *)(v3 + 60) == 15) << 10);
  *(_DWORD *)(v1 + 48) = v14;
  LODWORD(v3) = v14 & 0xFFFFF7FF | (*(unsigned __int8 *)(v3 + 1942) << 11);
  *(_DWORD *)(v1 + 48) = v3;
  LODWORD(v3) = v3 & 0xFFF87FFF | ((*(unsigned char *)(v4 + 58) & 0xF) << 15);
  *(_DWORD *)(v1 + 48) = v3;
  LODWORD(v3) = v3 & 0xFF87FFFF | ((*(unsigned char *)(v4 + 57) & 0xF) << 19);
  *(_DWORD *)(v1 + 48) = v3;
  *(_DWORD *)(v1 + 48) = v3 & 0xFCFFFFFF | ((*(unsigned char *)(v4 + 56) & 3) << 24);
  return 0;
}

uint64_t CAHDecHibiscusAvx::getUpscaleConvolveStep(CAHDecHibiscusAvx *this, int a2, int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 >= 0) {
      int v3 = a3;
    }
    else {
      int v3 = a3 + 1;
    }
    return (((v3 >> 1) + (a2 << 14)) / a3);
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      int v6 = "int32_t CAHDecHibiscusAvx::getUpscaleConvolveStep(int, int)";
      __int16 v7 = 1024;
      int v8 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid out_length %d\n", (uint8_t *)&v5, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t CAHDecHibiscusAvx::getUpscaleConvolveX0(CAHDecHibiscusAvx *this, int a2, int a3, int a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 >= 0) {
      int v4 = a3;
    }
    else {
      int v4 = a3 + 1;
    }
    return ((((a2 - a3) << 13) + (v4 >> 1)) / a3
          - ((a4 * a3 - (a2 << 14) + (a4 * a3 - (a2 << 14) < 0)) >> 1)
          + 128) & 0x3FFF;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      __int16 v7 = "int32_t CAHDecHibiscusAvx::getUpscaleConvolveX0(int, int, int32_t)";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid out_length %d\n", (uint8_t *)&v6, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t CAHDecHibiscusAvx::populatePictureRegisters(CAHDecHibiscusAvx *this)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v3 = *(void *)(v1 + 15944);
  uint64_t v4 = *(void *)(v1 + 42424);
  *(_DWORD *)(v2 + 52) = 766509056;
  int v5 = ((*(unsigned char *)(v1 + 2652) & 1) << 19) | 0x2DB00000;
  *(_DWORD *)(v2 + 52) = v5;
  unsigned int v6 = v5 & 0xFFFBFFFF | ((*(unsigned char *)(v1 + 2653) & 1) << 18);
  *(_DWORD *)(v2 + 52) = v6;
  unsigned int v7 = v6 & 0xFFFDFFFF | ((*(unsigned char *)(v1 + 2654) & 1) << 17);
  *(_DWORD *)(v2 + 52) = v7;
  int v8 = *(unsigned __int8 *)(v3 + 128);
  if (*(unsigned char *)(v3 + 128)) {
    int v8 = (*(unsigned char *)(v4 + 1956) == 0) << 13;
  }
  int v9 = v8 | v7;
  *(_DWORD *)(v2 + 52) = v9;
  int v10 = v9 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v2 + 52) = v10;
  unsigned int v11 = v10 & 0xFFFFF00F | ((*(_DWORD *)(*((void *)this + 32) + 2644) == 1) << 10) | 0x2E0;
  *(_DWORD *)(v2 + 52) = v11;
  unsigned int v12 = v11 & 0xFFFFFFE3 | (4 * (*(_DWORD *)(v3 + 78516) & 3));
  *(_DWORD *)(v2 + 52) = v12;
  *(_DWORD *)(v2 + 52) = v12 & 0xFFFFFFFC | *(_DWORD *)(v3 + 78520) & 3;
  *(_DWORD *)(v2 + 56) = 0;
  if (*(unsigned char *)(v4 + 1956)) {
    int v13 = 318767104;
  }
  else {
    int v13 = 50331648;
  }
  *(_DWORD *)(v2 + 56) = v13;
  int v14 = *(_DWORD *)(v3 + 24);
  int v15 = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v2 + 60) = 0;
  if (*(unsigned char *)(v4 + 1956)) {
    int v15 = ((_WORD)v15 + 7) & 0xFFF8;
  }
  int v16 = (v15 << 16) - 0x10000;
  *(_DWORD *)(v2 + 60) = v16;
  if (*(unsigned char *)(v4 + 1956)) {
    LOWORD(v14) = (v14 + 7) & 0xFFF8;
  }
  *(void *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 60) = v16 & 0xFFFF0000 | (unsigned __int16)(v14 - 1);
  int v17 = *(unsigned __int8 *)(v3 + 128) << 31;
  *(_DWORD *)(v2 + 68) = v17;
  unsigned int v18 = v17 & 0x807FFFFF | (*(_DWORD *)(v4 + 1876) << 23);
  *(_DWORD *)(v2 + 68) = v18;
  unsigned int v19 = v18 & 0xFF8FFFFF | ((*(_DWORD *)(v4 + 1896) & 7) << 20);
  *(_DWORD *)(v2 + 68) = v19;
  unsigned int v20 = v19 & 0xFFF1FFFF | ((*(_DWORD *)(v4 + 1900) & 7) << 17);
  *(_DWORD *)(v2 + 68) = v20;
  unsigned int v21 = v20 & 0xFFFEFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79300) & 1) << 16);
  *(_DWORD *)(v2 + 68) = v21;
  unsigned int v22 = v21 & 0xFFFF7FFF | ((*(unsigned char *)(v4 + 2284) & 1) << 15);
  *(_DWORD *)(v2 + 68) = v22;
  char v23 = *(unsigned char *)(v4 + 2284);
  if (v23) {
    char v23 = *(unsigned char *)(v4 + 2285);
  }
  unsigned int v24 = v22 & 0xFFFFBFFF | ((v23 & 1) << 14);
  *(_DWORD *)(v2 + 68) = v24;
  char v25 = *(unsigned char *)(v4 + 2284);
  if (v25) {
    char v25 = *(unsigned char *)(v4 + 2287);
  }
  unsigned int v26 = v24 & 0xFFFFDFFF | ((v25 & 1) << 13);
  *(_DWORD *)(v2 + 68) = v26;
  unsigned int v27 = v26 & 0xFFFFEFFF | (*(unsigned __int8 *)(v4 + 1957) << 12);
  *(_DWORD *)(v2 + 68) = v27;
  if (*(unsigned char *)(v3 + 128)) {
    char v28 = 0;
  }
  else {
    char v28 = *(unsigned char *)(v4 + 1958);
  }
  unsigned int v29 = v27 & 0xFFFFFBFF | ((v28 & 1) << 10);
  *(_DWORD *)(v2 + 68) = v29;
  unsigned int v30 = v29 & 0xFFFFFDFF | (*(unsigned __int8 *)(v4 + 1962) << 9);
  *(_DWORD *)(v2 + 68) = v30;
  unsigned int v31 = v30 & 0xFFFFFEFF | (*(unsigned __int8 *)(v4 + 1941) << 8);
  *(_DWORD *)(v2 + 68) = v31;
  if (*(unsigned char *)(v3 + 128)) {
    char v32 = 1;
  }
  else {
    char v32 = *(unsigned char *)(v4 + 1948);
  }
  uint64_t v33 = 0;
  unsigned int v34 = v31 & 0xFFFFFF7F | ((v32 & 1) << 7);
  *(_DWORD *)(v2 + 68) = v34;
  unsigned int v35 = v34 & 0xFFFFFFBF | (*(unsigned __int8 *)(v4 + 1956) << 6);
  *(_DWORD *)(v2 + 68) = v35;
  unsigned int v36 = v35 & 0xFFFFFFDF | (32 * *(unsigned __int8 *)(v4 + 1959));
  *(_DWORD *)(v2 + 68) = v36;
  unsigned int v37 = v36 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v4 + 1892) & 1));
  *(_DWORD *)(v2 + 68) = v37;
  unsigned int v38 = v37 & 0xFFFFFFF7 | (8 * *(unsigned __int8 *)(v4 + 1960));
  *(_DWORD *)(v2 + 68) = v38;
  unsigned int v39 = v38 & 0xFFFFFFFB | (4 * *(unsigned __int8 *)(v4 + 1961));
  *(_DWORD *)(v2 + 68) = v39;
  *(_DWORD *)(v2 + 68) = v39 & 0xFFFFFFFC | *(_DWORD *)(v4 + 1964) & 3;
  do
  {
    *(&v210 + v33) = v33 + 1;
    ++v33;
  }
  while (v33 != 7);
  unint64_t v40 = 0;
  uint64_t v41 = 1;
  do
  {
    if (v40 <= 5)
    {
      uint64_t v42 = *(void *)(v3 + 79224);
      uint64_t v43 = v41;
      do
      {
        if (v42 && *(void *)(v42 + 8 * v40) == *(void *)(v42 + 8 * v43)) {
          *(&v210 + v43) = *(&v210 + v40);
        }
        ++v43;
      }
      while (v43 != 7);
    }
    ++v40;
    ++v41;
  }
  while (v40 != 7);
  int v44 = 0;
  *(_DWORD *)(v2 + 72) = 0;
  if (!*(unsigned char *)(v3 + 128)) {
    int v44 = *(unsigned __int8 *)(v4 + 2192);
  }
  uint64_t v45 = 0;
  *(_DWORD *)(v2 + 72) = v44 << 29;
  int v46 = ((v210 & 7) << 25) | ((*(_DWORD *)(v4 + 1872) != 0) << 28) | ((v211 & 7) << 22) | ((v212 & 7) << 19) | ((v213 & 7) << 16) | ((v214 & 7) << 13) | ((v215 & 7) << 10) | ((v216 & 7) << 7) | (v44 << 29);
  *(_DWORD *)(v2 + 72) = v46;
  unsigned int v47 = v46 & 0xFFFFFFBF | ((*(_DWORD *)(v4 + 2116) & 1) << 6);
  *(_DWORD *)(v2 + 72) = v47;
  unsigned int v48 = v47 & 0xFFFFFFDF | (32 * (*(_DWORD *)(v4 + 2120) & 1));
  *(_DWORD *)(v2 + 72) = v48;
  unsigned int v49 = v48 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v4 + 2124) & 1));
  *(_DWORD *)(v2 + 72) = v49;
  unsigned int v50 = v49 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v4 + 2128) & 1));
  *(_DWORD *)(v2 + 72) = v50;
  unsigned int v51 = v50 & 0xFFFFFFFB | (4 * (*(_DWORD *)(v4 + 2132) & 1));
  *(_DWORD *)(v2 + 72) = v51;
  unsigned int v52 = v51 & 0xFFFFFFFD | (2 * (*(_DWORD *)(v4 + 2136) & 1));
  *(_DWORD *)(v2 + 72) = v52;
  *(_DWORD *)(v2 + 72) = v52 & 0xFFFFFFFE | *(_DWORD *)(v4 + 2140) & 1;
  int v53 = (unsigned char *)(v4 + 2300);
  uint64_t v54 = (_WORD *)(v4 + 2368);
  do
  {
    int v55 = (_DWORD *)(v2 + 108 + v45);
    *(v55 - 8) = 0;
    int v56 = (*(_DWORD *)(v4 + 2524 + v45) & 1) << 16;
    *(v55 - 8) = v56;
    int v57 = v56 | ((*v53 != 0) << 15);
    *(v55 - 8) = v57;
    int v58 = v57 | ((*(v53 - 1) != 0) << 14);
    *(v55 - 8) = v58;
    int v59 = v58 | ((*(v53 - 2) != 0) << 13);
    *(v55 - 8) = v59;
    unsigned int v60 = v59 & 0xFFFFE3FF | ((*v54 & 7) << 10);
    *(v55 - 8) = v60;
    int v61 = v60 | ((*(v53 - 7) != 0) << 9);
    *(v55 - 8) = v61;
    *(v55 - 8) = v61 & 0xFFFFFE00 | *(v54 - 5) & 0x1FF;
    *int v55 = 0;
    int v62 = (*(v53 - 6) != 0) << 31;
    *int v55 = v62;
    unsigned int v63 = v62 & 0x80FFFFFF | ((*(v54 - 4) & 0x7F) << 24);
    *int v55 = v63;
    int v64 = v63 | ((*(v53 - 5) != 0) << 23);
    *int v55 = v64;
    unsigned int v65 = v64 & 0xFF80FFFF | ((*(v54 - 3) & 0x7F) << 16);
    *int v55 = v65;
    int v66 = v65 | ((*(v53 - 4) != 0) << 15);
    *int v55 = v66;
    unsigned int v67 = v66 & 0xFFFF80FF | ((*(v54 - 2) & 0x7F) << 8);
    *int v55 = v67;
    int v68 = v67 | ((*(v53 - 3) != 0) << 7);
    *int v55 = v68;
    *int v55 = v68 & 0xFFFFFF80 | *(v54 - 1) & 0x7F;
    v45 += 4;
    v53 += 8;
    v54 += 8;
  }
  while (v45 != 32);
  uint64_t v69 = 0;
  *(_DWORD *)(v2 + 140) = 0x20000;
  uint64_t v70 = v3 + 78544;
  do
  {
    int v71 = (unsigned int *)(v2 + 156 + v69);
    *(v71 - 3) = 0;
    unsigned int v72 = *(_DWORD *)(v70 - 16) << 29;
    *(v71 - 3) = v72;
    unsigned int v73 = v72 & 0xFF00FFFF | (*(_DWORD *)(v70 - 12) << 16);
    *(v71 - 3) = v73;
    unsigned int v74 = v73 & 0xFFFF00FF | (*(_DWORD *)(v70 - 8) << 8);
    *(v71 - 3) = v74;
    *(v71 - 3) = v74 | *(unsigned __int8 *)(v70 - 4);
    *int v71 = 0;
    unsigned int v75 = *(_DWORD *)v70 << 24;
    *int v71 = v75;
    unsigned int v76 = v75 & 0xFF00FFFF | (*(_DWORD *)(v70 + 4) << 16);
    *int v71 = v76;
    unsigned int v77 = v76 & 0xFFFF00FF | (*(_DWORD *)(v70 + 8) << 8);
    *int v71 = v77;
    *int v71 = v77 | *(unsigned __int8 *)(v70 + 12);
    v69 += 4;
    v70 += 224;
  }
  while (v69 != 12);
  *(_DWORD *)(v2 + 168) = 0;
  int v78 = *(_DWORD *)(v4 + 3160) << 31;
  *(_DWORD *)(v2 + 168) = v78;
  unsigned int v79 = v78 & 0x9FFFFFFF | ((*(_DWORD *)(v3 + 79200) & 3) << 29);
  *(_DWORD *)(v2 + 168) = v79;
  unsigned int v80 = v79 & 0xE01FFFFF | (*(_DWORD *)(v4 + 2244) << 21);
  *(_DWORD *)(v2 + 168) = v80;
  unsigned int v81 = v80 & 0xFFE03FFF | ((*(_DWORD *)(v4 + 2248) & 0x7F) << 14);
  *(_DWORD *)(v2 + 168) = v81;
  unsigned int v82 = v81 & 0xFFFFC07F | ((*(_DWORD *)(v4 + 2252) & 0x7F) << 7);
  *(_DWORD *)(v2 + 168) = v82;
  *(_DWORD *)(v2 + 168) = v82 & 0xFFFFFF80 | *(_DWORD *)(v4 + 2260) & 0x7F;
  *(_DWORD *)(v2 + 172) = 0;
  int v83 = (*(_DWORD *)(v4 + 2256) & 0x7F) << 20;
  *(_DWORD *)(v2 + 172) = v83;
  unsigned int v84 = v83 & 0xFFF01FFF | ((*(_DWORD *)(v4 + 2264) & 0x7F) << 13);
  *(_DWORD *)(v2 + 172) = v84;
  int v85 = v84 | (*(unsigned __int8 *)(v4 + 2268) << 12);
  *(_DWORD *)(v2 + 172) = v85;
  unsigned int v86 = v85 & 0xFFFFF0FF | ((*(_DWORD *)(v4 + 2272) & 0xF) << 8);
  *(_DWORD *)(v2 + 172) = v86;
  unsigned int v87 = v86 & 0xFFFFFF0F | (16 * (*(_DWORD *)(v4 + 2276) & 0xF));
  *(_DWORD *)(v2 + 172) = v87;
  *(_DWORD *)(v2 + 172) = v87 & 0xFFFFFFF0 | *(_DWORD *)(v4 + 2280) & 0xF;
  *(_DWORD *)(v2 + 176) = 0;
  if (!*(unsigned char *)(v4 + 1956))
  {
    int v102 = *(_DWORD *)(v4 + 3160);
    if (!v102) {
      goto LABEL_177;
    }
    int v102 = *(_DWORD *)(v4 + 3168) << 31;
    *(_DWORD *)(v2 + 176) = v102;
    if (*(_DWORD *)(v4 + 3168))
    {
      int v103 = ((*(_DWORD *)(v4 + 3176) & 1) << 28) | v102;
      *(_DWORD *)(v2 + 176) = v103;
      int v102 = ((*(_DWORD *)(v3 + 79204) & 3) << 29) | v103;
      *(_DWORD *)(v2 + 176) = v102;
    }
    if (!*(unsigned char *)(v4 + 1956))
    {
LABEL_177:
      if (!*(unsigned char *)(v4 + 1962))
      {
        unsigned int v104 = v102 & 0xF7FFFFFF | ((*(unsigned char *)(v4 + 2216) & 1) << 27);
        *(_DWORD *)(v2 + 176) = v104;
        unsigned int v105 = v104 & 0xF8FFFFFF | ((*(_DWORD *)(v4 + 2212) & 7) << 24);
        *(_DWORD *)(v2 + 176) = v105;
        unsigned int v106 = v105 & 0xFF03FFFF | ((*(_DWORD *)(v4 + 2196) & 0x3F) << 18);
        *(_DWORD *)(v2 + 176) = v106;
        unsigned int v107 = v106 & 0xFFFC0FFF | ((*(_DWORD *)(v4 + 2200) & 0x3F) << 12);
        *(_DWORD *)(v2 + 176) = v107;
        if (*(_DWORD *)(v4 + 2196) || *(_DWORD *)(v4 + 2200)) {
          int v108 = *(_DWORD *)(v4 + 2204);
        }
        else {
          LOBYTE(v108) = 0;
        }
        unsigned int v109 = v107 & 0xFFFFF03F | ((v108 & 0x3F) << 6);
        *(_DWORD *)(v2 + 176) = v109;
        if (*(_DWORD *)(v4 + 2196) || (int v110 = *(_DWORD *)(v4 + 2200)) != 0) {
          int v110 = *(_DWORD *)(v4 + 2208);
        }
        *(_DWORD *)(v2 + 176) = v109 & 0xFFFFFFC0 | v110 & 0x3F;
        if (!*(unsigned char *)(v3 + 56)) {
          *(_DWORD *)(v2 + 176) = v107 & 0xFFFFF000;
        }
      }
    }
  }
  *(_DWORD *)(v2 + 180) = 0;
  int v88 = (*(unsigned char *)(v4 + 2226) & 0x7F) << 21;
  *(_DWORD *)(v2 + 180) = v88;
  unsigned int v89 = v88 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 2227) & 0x7F) << 14);
  *(_DWORD *)(v2 + 180) = v89;
  unsigned int v90 = v89 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 2228) & 0x7F) << 7);
  *(_DWORD *)(v2 + 180) = v90;
  *(_DWORD *)(v2 + 180) = v90 & 0xFFFFFF80 | *(unsigned char *)(v4 + 2229) & 0x7F;
  *(_DWORD *)(v2 + 184) = 0;
  int v91 = (*(unsigned char *)(v4 + 2230) & 0x7F) << 21;
  *(_DWORD *)(v2 + 184) = v91;
  unsigned int v92 = v91 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 2231) & 0x7F) << 14);
  *(_DWORD *)(v2 + 184) = v92;
  unsigned int v93 = v92 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 2232) & 0x7F) << 7);
  *(_DWORD *)(v2 + 184) = v93;
  *(_DWORD *)(v2 + 184) = v93 & 0xFFFFFF80 | *(unsigned char *)(v4 + 2233) & 0x7F;
  *(_DWORD *)(v2 + 188) = 0;
  LOBYTE(v93) = *(unsigned char *)(v4 + 2236);
  *(_DWORD *)(v2 + 188) = (v93 & 0x7F) << 7;
  *(_DWORD *)(v2 + 188) = *(unsigned char *)(v4 + 2237) & 0x7F | ((v93 & 0x7F) << 7);
  *(void *)(v2 + 192) = 0;
  *(void *)(v2 + 200) = 0;
  int v94 = (_DWORD *)(v2 + 192);
  if (*(unsigned char *)(v4 + 99) && !*(unsigned char *)(v4 + 1962) && !*(unsigned char *)(v4 + 1956))
  {
    *int v94 = 0x10000000;
    int v95 = ((*(_DWORD *)(v4 + 3180) << 26) + 0x4000000) & 0xC000000 | 0x10000000;
    *int v94 = v95;
    unsigned int v96 = v95 & 0xFCFFFFFF | ((*(_DWORD *)(v4 + 3184) & 3) << 24);
    *int v94 = v96;
    unsigned int v97 = v96 & 0xFF0FFFFF | ((*(_DWORD *)(v4 + 3192) & 0xF) << 20);
    *int v94 = v97;
    unsigned int v98 = v97 & 0xFFF3FFFF | ((*(_DWORD *)(v4 + 3256) & 3) << 18);
    *int v94 = v98;
    unsigned int v99 = v98 & 0xFFFC3FFF | ((*(_DWORD *)(v4 + 3320) & 0xF) << 14);
    *int v94 = v99;
    unsigned int v100 = v99 & 0xFFFFCFFF | ((*(_DWORD *)(v4 + 3384) & 3) << 12);
    *int v94 = v100;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v101) = 0;
    }
    else {
      int v101 = *(_DWORD *)(v4 + 3196);
    }
    unsigned int v111 = v100 & 0xFFFFF0FF | ((v101 & 0xF) << 8);
    *int v94 = v111;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v112) = 0;
    }
    else {
      int v112 = *(_DWORD *)(v4 + 3260);
    }
    unsigned int v113 = v111 & 0xFFFFFF3F | ((v112 & 3) << 6);
    *int v94 = v113;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v114) = 0;
    }
    else {
      int v114 = *(_DWORD *)(v4 + 3324);
    }
    unsigned int v115 = v113 & 0xFFFFFFC3 | (4 * (v114 & 0xF));
    *int v94 = v115;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v116) = 0;
    }
    else {
      int v116 = *(_DWORD *)(v4 + 3388);
    }
    *int v94 = v115 & 0xFFFFFFFC | v116 & 3;
    if (*(int *)(v4 + 3188) <= 2) {
      LOBYTE(v117) = 0;
    }
    else {
      int v117 = *(_DWORD *)(v4 + 3200);
    }
    int v118 = (v117 & 0xF) << 20;
    *(_DWORD *)(v2 + 196) = v118;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v119) = 0;
    }
    else {
      int v119 = *(_DWORD *)(v4 + 3264);
    }
    int v120 = ((v119 & 3) << 18) | v118;
    *(_DWORD *)(v2 + 196) = v120;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v121) = 0;
    }
    else {
      int v121 = *(_DWORD *)(v4 + 3328);
    }
    int v122 = ((v121 & 0xF) << 14) | v120;
    *(_DWORD *)(v2 + 196) = v122;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v123) = 0;
    }
    else {
      int v123 = *(_DWORD *)(v4 + 3392);
    }
    int v124 = ((v123 & 3) << 12) | v122;
    *(_DWORD *)(v2 + 196) = v124;
    if (*(int *)(v4 + 3188) <= 3) {
      LOBYTE(v125) = 0;
    }
    else {
      int v125 = *(_DWORD *)(v4 + 3204);
    }
    int v126 = ((v125 & 0xF) << 8) | v124;
    *(_DWORD *)(v2 + 196) = v126;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v127) = 0;
    }
    else {
      int v127 = *(_DWORD *)(v4 + 3268);
    }
    int v128 = ((v127 & 3) << 6) | v126;
    *(_DWORD *)(v2 + 196) = v128;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v129) = 0;
    }
    else {
      int v129 = *(_DWORD *)(v4 + 3332);
    }
    unsigned int v130 = (4 * (v129 & 0xF)) | v128 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 196) = v130;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v131) = 0;
    }
    else {
      int v131 = *(_DWORD *)(v4 + 3396);
    }
    *(_DWORD *)(v2 + 196) = v130 & 0xFFFFFFFC | v131 & 3;
    if (*(int *)(v4 + 3188) <= 4) {
      LOBYTE(v132) = 0;
    }
    else {
      int v132 = *(_DWORD *)(v4 + 3208);
    }
    int v133 = (v132 & 0xF) << 20;
    *(_DWORD *)(v2 + 200) = v133;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v134) = 0;
    }
    else {
      int v134 = *(_DWORD *)(v4 + 3272);
    }
    int v135 = ((v134 & 3) << 18) | v133;
    *(_DWORD *)(v2 + 200) = v135;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v136) = 0;
    }
    else {
      int v136 = *(_DWORD *)(v4 + 3336);
    }
    int v137 = ((v136 & 0xF) << 14) | v135;
    *(_DWORD *)(v2 + 200) = v137;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v138) = 0;
    }
    else {
      int v138 = *(_DWORD *)(v4 + 3400);
    }
    int v139 = ((v138 & 3) << 12) | v137;
    *(_DWORD *)(v2 + 200) = v139;
    if (*(int *)(v4 + 3188) <= 5) {
      LOBYTE(v140) = 0;
    }
    else {
      int v140 = *(_DWORD *)(v4 + 3212);
    }
    int v141 = ((v140 & 0xF) << 8) | v139;
    *(_DWORD *)(v2 + 200) = v141;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v142) = 0;
    }
    else {
      int v142 = *(_DWORD *)(v4 + 3276);
    }
    int v143 = ((v142 & 3) << 6) | v141;
    *(_DWORD *)(v2 + 200) = v143;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v144) = 0;
    }
    else {
      int v144 = *(_DWORD *)(v4 + 3340);
    }
    unsigned int v145 = (4 * (v144 & 0xF)) | v143 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 200) = v145;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v146) = 0;
    }
    else {
      int v146 = *(_DWORD *)(v4 + 3404);
    }
    *(_DWORD *)(v2 + 200) = v145 & 0xFFFFFFFC | v146 & 3;
    if (*(int *)(v4 + 3188) <= 6) {
      LOBYTE(v147) = 0;
    }
    else {
      int v147 = *(_DWORD *)(v4 + 3216);
    }
    int v148 = (v147 & 0xF) << 20;
    *(_DWORD *)(v2 + 204) = v148;
    if (*(int *)(v4 + 3188) < 7) {
      LOBYTE(v149) = 0;
    }
    else {
      int v149 = *(_DWORD *)(v4 + 3280);
    }
    int v150 = ((v149 & 3) << 18) | v148;
    *(_DWORD *)(v2 + 204) = v150;
    if (*(int *)(v4 + 3188) < 7) {
      int v151 = 0;
    }
    else {
      int v151 = (*(_DWORD *)(v4 + 3344) & 0xF) << 14;
    }
    int v152 = v151 | v150;
    *(_DWORD *)(v2 + 204) = v152;
    if (*(int *)(v4 + 3188) < 7) {
      int v153 = 0;
    }
    else {
      int v153 = (*(_DWORD *)(v4 + 3408) & 3) << 12;
    }
    int v154 = v153 | v152;
    *(_DWORD *)(v2 + 204) = v154;
    if (*(int *)(v4 + 3188) <= 7) {
      int v155 = 0;
    }
    else {
      int v155 = (*(_DWORD *)(v4 + 3220) & 0xF) << 8;
    }
    int v156 = v155 | v154;
    *(_DWORD *)(v2 + 204) = v156;
    if (*(int *)(v4 + 3188) < 8) {
      int v157 = 0;
    }
    else {
      int v157 = (*(_DWORD *)(v4 + 3284) & 3) << 6;
    }
    int v158 = v157 | v156;
    *(_DWORD *)(v2 + 204) = v158;
    if (*(int *)(v4 + 3188) < 8) {
      int v159 = 0;
    }
    else {
      int v159 = 4 * (*(_DWORD *)(v4 + 3348) & 0xF);
    }
    unsigned int v160 = v159 | v158 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 204) = v160;
    if (*(int *)(v4 + 3188) < 8) {
      int v161 = 0;
    }
    else {
      int v161 = *(_DWORD *)(v4 + 3412) & 3;
    }
    *(_DWORD *)(v2 + 204) = v161 | v160 & 0xFFFFFFFC;
  }
  if (*(unsigned char *)(v4 + 98))
  {
    uint64_t v162 = (_DWORD *)(v2 + 208);
    if (*(unsigned char *)(v4 + 2172) != 8)
    {
      *uint64_t v162 = 0x80000000;
      unsigned int v163 = ((*(unsigned __int8 *)(v4 + 2172) << 28) - 0x10000000) | 0x80000000;
      goto LABEL_143;
    }
  }
  else
  {
    uint64_t v162 = (_DWORD *)(v2 + 208);
  }
  unsigned int v163 = 0;
  *uint64_t v162 = 0;
LABEL_143:
  *(_DWORD *)(v2 + 208) = v163;
  *(_DWORD *)(v2 + 208) = (unsigned __int16)(*(_DWORD *)(v4 + 2164) - 1) | v163;
  UpscaleConvolveStep = (CAHDecHibiscusAvx *)CAHDecHibiscusAvx::getUpscaleConvolveStep(this, *(_DWORD *)(v4 + 2176), *(_DWORD *)(v4 + 2164));
  __int16 v165 = (__int16)UpscaleConvolveStep;
  UpscaleConvolveX0 = (CAHDecHibiscusAvx *)CAHDecHibiscusAvx::getUpscaleConvolveX0(UpscaleConvolveStep, *(_DWORD *)(v4 + 2176), *(_DWORD *)(v4 + 2164), (int)UpscaleConvolveStep);
  *(_DWORD *)(v2 + 212) = v165 & 0x3FFF | (((unsigned __int16)UpscaleConvolveX0 & 0x3FFF) << 14);
  unsigned int v167 = (*(_DWORD *)(v4 + 2176) + 1) >> 1;
  unsigned int v168 = (*(_DWORD *)(v4 + 2164) + 1) >> 1;
  uint64_t v169 = (CAHDecHibiscusAvx *)CAHDecHibiscusAvx::getUpscaleConvolveStep(UpscaleConvolveX0, v167, v168);
  *(_DWORD *)(v2 + 216) = (unsigned __int16)v169 & 0x3FFF | ((CAHDecHibiscusAvx::getUpscaleConvolveX0(v169, v167, v168, (int)v169) & 0x3FFF) << 14);
  *(_DWORD *)(v2 + 220) = 0;
  int v170 = (*(_DWORD *)(v4 + 3448) & 3) << 10;
  *(_DWORD *)(v2 + 220) = v170;
  int v171 = *(unsigned __int8 *)(v3 + 56);
  if (*(unsigned char *)(v3 + 56)) {
    int v171 = (*(_DWORD *)(v4 + 3452) & 3) << 8;
  }
  int v172 = v171 | v170;
  *(_DWORD *)(v2 + 220) = v172;
  int v173 = *(unsigned __int8 *)(v3 + 56);
  if (*(unsigned char *)(v3 + 56)) {
    int v173 = (*(_DWORD *)(v4 + 3456) & 3) << 6;
  }
  int v174 = v173 | v172;
  *(_DWORD *)(v2 + 220) = v174;
  int v175 = (16 * (*(_DWORD *)(v3 + 79208) & 3)) | v174;
  *(_DWORD *)(v2 + 220) = v175;
  int v176 = (4 * (*(_DWORD *)(v3 + 79212) & 3)) | v175;
  *(_DWORD *)(v2 + 220) = v176;
  *(_DWORD *)(v2 + 220) = v176 & 0xFFC | *(_DWORD *)(v3 + 79216) & 3;
  *(_DWORD *)(v2 + 224) = 0;
  int v177 = *(_DWORD *)(v3 + 78496);
  *(_DWORD *)(v2 + 224) = v177 << 16;
  *(_DWORD *)(v2 + 224) = *(unsigned __int16 *)(v3 + 78492) | ((unsigned __int16)v177 << 16);
  *(_DWORD *)(v2 + 228) = 0;
  int v178 = *(_DWORD *)(v3 + 78504);
  *(_DWORD *)(v2 + 228) = v178 << 16;
  *(_DWORD *)(v2 + 228) = *(unsigned __int16 *)(v3 + 78500) | ((unsigned __int16)v178 << 16);
  if (*(unsigned char *)(v3 + 128))
  {
    uint64_t result = 0;
    if (*(unsigned char *)(v4 + 1956))
    {
      *(_DWORD *)(v2 + 372) = (*(_DWORD *)(v2 + 52) << 18) & 0x1000000 | (((*(_DWORD *)(v2 + 52) >> 4) & 1) << 25);
      *(_DWORD *)(v2 + 404) = 0;
      unsigned int v180 = (((*(_DWORD *)(v3 + 12) << 16) + 458752) & 0xFFF80000) - 0x10000;
      *(_DWORD *)(v2 + 404) = v180;
      *(_DWORD *)(v2 + 404) = ((((unsigned __int16)*(_DWORD *)(v3 + 8) + 7) & 0xFFF8) + 0xFFFF) | v180;
      *(_DWORD *)(v2 + 436) = 1073758208;
    }
  }
  else
  {
    uint64_t v181 = (_DWORD *)(v2 + 232);
    uint64_t v182 = -308;
    do
    {
      uint64_t v183 = v4 + v182;
      uint64_t v184 = (unsigned char *)(v4 + v182 + 4136);
      if (*v184 == 1)
      {
        if ((*(unsigned char *)(v2 + 69) & 4) != 0) {
          char v185 = -3;
        }
        else {
          char v185 = -2;
        }
      }
      else
      {
        char v185 = -6;
      }
      char v186 = v185 + 16;
      *uint64_t v181 = 0;
      int v187 = *v184 << 30;
      *uint64_t v181 = v187;
      unsigned int v188 = v187 & 0xC0007FFF | (((*(int *)(v183 + 4096) >> v186) & 0x7FFF) << 15);
      *uint64_t v181 = v188;
      *uint64_t v181 = v188 & 0xFFFF8000 | (*(int *)(v183 + 4100) >> v186) & 0x7FFF;
      v181[7] = 0;
      int v189 = (*(unsigned char *)(v183 + 4137) == 0) << 30;
      v181[7] = v189;
      unsigned int v190 = v189 & 0xC0007FFF | (((*(_DWORD *)(v183 + 4104) >> 1) & 0x7FFF) << 15);
      v181[7] = v190;
      v181[7] = v190 & 0xFFFF8000 | ((unsigned __int16)*(_DWORD *)(v183 + 4108) >> 1);
      v181[14] = 0;
      int v191 = (*(_DWORD *)(v183 + 4112) << 14) & 0x3FFF8000;
      v181[14] = v191;
      v181[14] = v191 & 0xFFFF8000 | ((unsigned __int16)*(_DWORD *)(v183 + 4116) >> 1);
      v181[21] = 0;
      int v192 = *(unsigned __int16 *)(v183 + 4128);
      v181[21] = v192 << 16;
      v181[21] = *(unsigned __int16 *)(v183 + 4130) | ((unsigned __int16)v192 << 16);
      v181[28] = 0;
      int v193 = *(unsigned __int16 *)(v183 + 4132);
      v181[28] = v193 << 16;
      v181[28] = *(unsigned __int16 *)(v183 + 4134) | ((unsigned __int16)v193 << 16);
      ++v181;
      v182 += 44;
    }
    while (v182);
    uint64_t v194 = **(void **)(v3 + 79224);
    if (v194)
    {
      uint64_t v195 = 0;
      int v196 = (_DWORD *)(v2 + 440);
      while (1)
      {
        *(v196 - 16) = 0;
        int v197 = (*(_DWORD *)(v2 + 52) << 18) & 0x1000000 | (((*(_DWORD *)(v2 + 52) >> 4) & 1) << 25);
        *(v196 - 16) = v197;
        *(v196 - 16) = v197 | *(unsigned __int8 *)(v194 + 4);
        *(v196 - 8) = 0;
        int v198 = (*(_DWORD *)(v194 + 1768) << 16) - 0x10000;
        *(v196 - 8) = v198;
        *(v196 - 8) = v198 & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)(v194 + 1760) - 1);
        *int v196 = 0;
        int v199 = *(_DWORD *)(v3 + 12);
        int v200 = v199 >= 0 ? *(_DWORD *)(v3 + 12) : v199 + 1;
        int v201 = (((v200 >> 1) + (*(_DWORD *)(v194 + 1768) << 14)) / v199) << 16;
        *int v196 = v201;
        int v202 = *(_DWORD *)(v194 + 1760);
        int v203 = *(_DWORD *)(v3 + 8);
        int v204 = v203 >= 0 ? *(_DWORD *)(v3 + 8) : v203 + 1;
        *int v196 = v201 & 0xFFFF0000 | (unsigned __int16)(((v204 >> 1) + (v202 << 14)) / v203);
        if (v195 == 6) {
          break;
        }
        uint64_t v194 = *(void *)(*(void *)(v3 + 79224) + 8 * v195 + 8);
        ++v196;
        ++v195;
        if (!v194)
        {
          int v205 = (unint64_t)(v195 - 1) < 6;
          goto LABEL_170;
        }
      }
      int v205 = 0;
    }
    else
    {
      LODWORD(v195) = 0;
      int v205 = 1;
LABEL_170:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v206 = 136315394;
        int v207 = "virtual int CAHDecHibiscusAvx::populatePictureRegisters()";
        __int16 v208 = 1024;
        int v209 = v195;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid reference buffer %d\n", (uint8_t *)&v206, 0x12u);
      }
    }
    return (v205 << 31 >> 31);
  }
  return result;
}