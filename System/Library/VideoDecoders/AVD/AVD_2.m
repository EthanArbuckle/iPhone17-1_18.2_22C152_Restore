uint64_t CAHDecHibiscusAvx::getTileStartCTU(CAHDecHibiscusAvx *this, unsigned int a2, int a3)
{
  unsigned __int16 *v3;

  v3 = (unsigned __int16 *)(*((void *)this + 33) + 1120);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecHibiscusAvx::getTileEndCTU(CAHDecHibiscusAvx *this, unsigned int a2, int a3)
{
  v3 = (unsigned __int16 *)(*((void *)this + 33) + 1120);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecHibiscusAvx::populateAvdWork(CAHDecHibiscusAvx *this)
{
  unsigned int v1 = 0;
  v64[3] = *MEMORY[0x263EF8340];
  unint64_t v4 = *((void *)this + 32);
  v2 = (_DWORD *)(v4 + 42424);
  v3 = *(uint64_t **)(v4 + 15944);
  unsigned int v5 = *((_DWORD *)v3 + 34);
  LODWORD(v4) = *((_DWORD *)v3 + 35);
  unsigned int v6 = v2[74];
  unsigned int v47 = (v6 >> 28) + 2;
  int v7 = (v4 * v5 > (v6 >> 28) + 1) & (v6 >> 1);
  if ((v6 & 4) != 0 && ((v4 * v5 > (v6 >> 28) + 1) & (v6 >> 1)) == 0) {
    unsigned int v1 = (*(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) - 1) % v47;
  }
  uint64_t v8 = *((void *)this + 33) + 50804;
  memset(v64, 0, 24);
  int v63 = 0;
  uint64_t v62 = 0;
  int v9 = *(_DWORD *)(*(void *)v2 + 60);
  uint64_t v55 = *v3;
  unsigned int v10 = (v6 >> 28) + 2;
  if (!v7) {
    unsigned int v10 = 1;
  }
  unint64_t v11 = v1 + v10;
  unsigned int v12 = 0x1002 / v10;
  unint64_t v13 = v1;
  unint64_t v14 = v1;
  do
  {
    v64[v14] = v8 + (v14 - v1) * 36 * v12;
    ++v14;
  }
  while (v14 < v11);
  if (v9 == 15) {
    char v15 = 5;
  }
  else {
    char v15 = 4;
  }
  char v53 = v15;
  if (v5)
  {
    unint64_t v16 = 0;
    int v17 = 0;
    uint64_t v18 = v64[v1];
    unint64_t v19 = 0x8E38E38E38E38E39 * ((v18 - v8) >> 2);
    int v20 = -(v4 * v5);
    v21 = v3 + 8243;
    v22 = v3 + 8210;
    unsigned int v23 = v1;
    v50 = v3;
    int v49 = v7;
    uint64_t v48 = v8;
    unsigned int v44 = v1;
    unint64_t v43 = v1 + v10;
    int v41 = v20;
    unsigned int v42 = 0x1002 / v10;
    v39 = v3 + 8210;
    v40 = v3 + 8243;
    do
    {
      if (v4)
      {
        unint64_t v24 = 0;
        unint64_t v46 = v16 + 1;
        v51 = (_DWORD *)v22 + v16 + 1;
        v52 = (_DWORD *)v22 + v16;
        int v54 = v20 + v17;
        int v45 = v17;
        int v56 = v17;
        do
        {
          int v25 = v54 + v24;
          *(_WORD *)(v18 + 4) = *((_DWORD *)&v62 + v23);
          *(_WORD *)(v18 + 6) = v23;
          *(_WORD *)(v18 + 10) = v56 + v24;
          if (v56 + v24) {
            __int16 v26 = 4;
          }
          else {
            __int16 v26 = 5;
          }
          *(_WORD *)(v18 + 12) = v26;
          if (v25 == -1)
          {
            *(_DWORD *)(v18 + 14) = 262149;
          }
          else
          {
            if (v25 == -2) {
              int v27 = v7;
            }
            else {
              int v27 = 0;
            }
            *(_WORD *)(v18 + 14) = 4;
            if (v27 == 1) {
              *(_WORD *)(v18 + 16) = 4;
            }
            else {
              *(_WORD *)(v18 + 16) = 0;
            }
          }
          uint64_t v28 = *((void *)this + 32);
          if (*(unsigned char *)(v28 + 2834)) {
            uint64_t v29 = *(void *)(v28 + 2840);
          }
          else {
            uint64_t v29 = *(void *)(v28 + 1048) + 8;
          }
          unint64_t v30 = v55 + v3[(v56 + v24) + 18] - *(void *)v29;
          int v31 = 36 * v19;
          unint64_t v32 = HIDWORD(v30);
          if (*(void *)v29 || *(_DWORD *)(v29 + 152) || *(_DWORD *)(v29 + 156))
          {
            if (v32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              v59 = "populateAvdWork";
              __int16 v60 = 1024;
              int v61 = 1677;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v29, v31 + 50824, v30, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
            if (*(void *)v29) {
              goto LABEL_58;
            }
          }
          if (*(_DWORD *)(v29 + 152) || *(_DWORD *)(v29 + 156))
          {
LABEL_58:
            if (v32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              v59 = "populateAvdWork";
              __int16 v60 = 1024;
              int v61 = 1678;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v29, v31 + 50822, v30, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
          }
          v3 = v50;
          v34 = &v50[(v56 + v24) + 4114];
          uint64_t v35 = *v34;
          if (HIDWORD(*v34))
          {
            int v7 = v49;
            uint64_t v36 = v48;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              v59 = "populateAvdWork";
              __int16 v60 = 1024;
              int v61 = 1680;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              uint64_t v35 = *v34;
            }
          }
          else
          {
            int v7 = v49;
            uint64_t v36 = v48;
          }
          *(_DWORD *)(v18 + 24) = v35;
          *(_DWORD *)(v18 + 28) = (*(v21 - 1) >> v53) | (*v52 >> v53 << 16);
          *(_DWORD *)(v18 + 32) = ((*v21 - 1) >> v53) | ((*v51 - 1) >> v53 << 16);
          ++*((_DWORD *)&v62 + v23);
          ++v24;
          uint64_t v37 = v64[v23] + 36;
          v64[v23] = v37;
          if (v7)
          {
            unsigned int v23 = ((int)v24 + v56) % v47;
            uint64_t v37 = v64[v23];
          }
          *(_WORD *)(v18 + 8) = -1;
          unint64_t v19 = 0x8E38E38E38E38E39 * ((v37 - v36) >> 2);
          unint64_t v4 = *((unsigned int *)v50 + 35);
          ++v21;
          uint64_t v18 = v37;
        }
        while (v24 < v4);
        unsigned int v5 = *((_DWORD *)v50 + 34);
        unsigned int v1 = v44;
        int v17 = v45 + v24;
        uint64_t v18 = v37;
        unint64_t v11 = v43;
        int v20 = v41;
        unsigned int v12 = v42;
        unint64_t v16 = v46;
        v22 = v39;
        v21 = v40;
      }
      else
      {
        ++v16;
      }
    }
    while (v16 < v5);
  }
  uint64_t v38 = *((void *)this + 33) + 32;
  do
  {
    *(_WORD *)(v38 + 2 * v13 - 6) = *((_DWORD *)&v62 + v13);
    *(_DWORD *)(v38 + 4 * v13) = 36 * (v13 - v1) * v12 + 50804;
    ++v13;
  }
  while (v13 < v11);
  return 0;
}

uint64_t CAHDecHibiscusAvx::allocWorkBuf_SPS(CAHDecHibiscusAvx *this, int *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  int v4 = a2[1];
  unsigned int v6 = *((unsigned __int8 *)a2 + 32);
  if (v6 >= 4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 136315394;
    int v49 = "allocWorkBuf_SPS";
    __int16 v50 = 1024;
    int v51 = 1828;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v48, 0x12u);
  }
  int v7 = (_DWORD *)*((void *)this + 32);
  int v8 = v7[10681];
  if (!v8 || (int v9 = v7[10682]) == 0)
  {
    int v8 = v5;
    int v9 = v4;
  }
  int v10 = v8 + 31;
  if (v8 < -31) {
    int v10 = v8 + 62;
  }
  unsigned int v11 = v10 >> 5;
  int v12 = v9 + 31;
  if (v9 < -31) {
    int v12 = v9 + 62;
  }
  unsigned int v13 = v12 >> 5;
  unsigned int v14 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v15 = v14;
  }
  else {
    char v15 = 0;
  }
  unsigned int v16 = 32 - __clz(v13 - 1);
  if (v13 >= 2) {
    char v17 = v16;
  }
  else {
    char v17 = 0;
  }
  unsigned int v18 = ((32 << (v17 + v15)) + 127) & 0xFFFFFF80;
  if (!v6)
  {
    unsigned int v27 = 0;
LABEL_27:
    LOBYTE(v28) = 0;
    goto LABEL_28;
  }
  int v19 = v8 << (v6 == 3);
  int v20 = v19 + 31;
  int v21 = v19 + 62;
  if (v20 >= 0) {
    int v21 = v20;
  }
  unsigned int v22 = v21 >> 5;
  if (v6 == 1) {
    ++v9;
  }
  int v23 = v9 >> (v6 == 1);
  int v25 = v23 + 15;
  BOOL v24 = v23 < -15;
  int v26 = v23 + 30;
  if (!v24) {
    int v26 = v25;
  }
  unsigned int v27 = v26 >> 4;
  if (v22 <= 1) {
    goto LABEL_27;
  }
  unsigned int v28 = 32 - __clz(v22 - 1);
LABEL_28:
  unsigned int v29 = 32 - __clz(v27 - 1);
  if (v27 >= 2) {
    char v30 = v29;
  }
  else {
    char v30 = 0;
  }
  unsigned int v31 = ((8 << (v30 + v28)) + 127) & 0xFFFFFF80;
  if (!v6) {
    unsigned int v31 = 0;
  }
  *((_DWORD *)this + 1480) = v18;
  *((_DWORD *)this + 1481) = v31;
  *((_DWORD *)this + 1485) = 9168;
  if (*((_WORD *)a2 + 14) == 64) {
    char v32 = 6;
  }
  else {
    char v32 = 7;
  }
  if (*((_WORD *)a2 + 14) == 64) {
    int v33 = 96;
  }
  else {
    int v33 = 384;
  }
  if (*((_WORD *)a2 + 14) == 64) {
    char v34 = 8;
  }
  else {
    char v34 = 10;
  }
  unsigned int v35 = ((v5 + (1 << v32) - 1) >> v32) * ((v4 + (1 << v32) - 1) >> v32);
  *((_DWORD *)this + 1487) = v35 * v33;
  *((_DWORD *)this + 1486) = v35 << v34;
  if (v7[662])
  {
LABEL_51:
    for (uint64_t i = 0; i != 2288; i += 176)
    {
      uint64_t v42 = *((unsigned int *)this + 1487);
      if (v42
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + i + 13424), v42, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_69;
        }
        int v48 = 136315650;
        int v49 = "allocWorkBuf_SPS";
        __int16 v50 = 1024;
        int v51 = 1929;
        __int16 v52 = 2080;
        char v53 = "segMap";
        unint64_t v46 = &_os_log_internal;
        goto LABEL_68;
      }
    }
    uint64_t v43 = 0;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 1486);
      if (v44)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v43 + 8008), v44, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 2288) {
        return 0;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v48 = 136315650;
      int v49 = "allocWorkBuf_SPS";
      __int16 v50 = 1024;
      int v51 = 1935;
      __int16 v52 = 2080;
      char v53 = "MvColo";
      unint64_t v46 = &_os_log_internal;
      goto LABEL_68;
    }
    goto LABEL_69;
  }
  uint64_t v36 = 0;
  while (1)
  {
    uint64_t v37 = *((unsigned int *)this + 1480);
    if (v37
      && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v36 + 3072), v37, 7, 1, 0))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_69;
      }
      int v48 = 136315650;
      int v49 = "allocWorkBuf_SPS";
      __int16 v50 = 1024;
      int v51 = 1870;
      __int16 v52 = 2080;
      char v53 = "HdrY";
      unint64_t v46 = &_os_log_internal;
      goto LABEL_68;
    }
    uint64_t v38 = *((unsigned int *)this + 1481);
    uint64_t v39 = *((void *)this + 32);
    v40 = (_OWORD *)(v39 + v36 + 5536);
    if (!v38)
    {
      *(void *)v40 = 0;
      goto LABEL_50;
    }
    if (CAVDDecoder::allocAVDMem(v39, v40, v38, 7, 1, 0)) {
      break;
    }
LABEL_50:
    v36 += 176;
    if (v36 == 2464) {
      goto LABEL_51;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 136315650;
    int v49 = "allocWorkBuf_SPS";
    __int16 v50 = 1024;
    int v51 = 1875;
    __int16 v52 = 2080;
    char v53 = "HdrC";
    unint64_t v46 = &_os_log_internal;
LABEL_68:
    _os_log_impl(&dword_223977000, v46, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v48, 0x1Cu);
  }
LABEL_69:
  (*(void (**)(CAHDecHibiscusAvx *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

void CAHDecHibiscusAvx::getPPSWorkBufSize(uint64_t this, unsigned __int8 *a2, char *a3)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  v97 = (CAHDecTansyAvx *)this;
  uint64_t v4 = *(void *)(*(void *)(this + 256) + 42424);
  unsigned int v108 = *(_DWORD *)(v4 + 2176);
  int v5 = *(_DWORD *)(v4 + 2180);
  int v6 = a2[32];
  unsigned int v7 = a2[34];
  int v8 = *(_DWORD *)(v4 + 60);
  int v98 = v8 == 15;
  if (v8 == 15) {
    int v9 = 128;
  }
  else {
    int v9 = 64;
  }
  if (a2[33] > v7) {
    unsigned int v7 = a2[33];
  }
  int v10 = ((_WORD)v7 + 9) & 0x1FE;
  unsigned int v90 = v7;
  if (*(_DWORD *)(v4 + 13932))
  {
    unsigned int v11 = *(_DWORD *)(v4 + 13932);
    if (v8 == 15) {
      int v12 = 800;
    }
    else {
      int v12 = 400;
    }
    goto LABEL_10;
  }
  this = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (this)
  {
    *(_DWORD *)buf = 136315394;
    v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 1966;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
    if (v8 == 15) {
      int v12 = 800;
    }
    else {
      int v12 = 400;
    }
    unsigned int v11 = *(_DWORD *)(v4 + 13932);
    if (v11)
    {
LABEL_10:
      int v13 = 0;
      uint64_t v14 = v11;
      int v15 = *(_DWORD *)(v4 + 2624);
      unsigned int v16 = (int *)(v4 + 2628);
      do
      {
        int v18 = *v16++;
        int v17 = v18;
        int v19 = (v18 - v15) * v12;
        if (v13 <= v19) {
          int v13 = v19;
        }
        int v15 = v17;
        --v14;
      }
      while (v14);
      char v20 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  int v13 = 0;
  char v20 = 1;
LABEL_23:
  int v88 = v13;
  int v112 = v5;
  v89 = a3;
  if (v6 == 3) {
    int v21 = 48;
  }
  else {
    int v21 = 32;
  }
  int v107 = v6;
  if (!v6) {
    int v21 = 16;
  }
  int v22 = *(unsigned __int8 *)(v4 + 2172);
  v100 = (_DWORD *)v4;
  if (*(unsigned char *)(v4 + 98)) {
    BOOL v23 = v22 == 8;
  }
  else {
    BOOL v23 = 1;
  }
  int v24 = !v23;
  int v99 = v9;
  int v106 = v10;
  int v85 = v8;
  int v96 = v24;
  if (v20)
  {
    unint64_t v104 = 0;
    int v105 = 0;
    unint64_t v25 = 0;
    *(void *)&long long v103 = 0;
    char v26 = v8 == 15;
  }
  else
  {
    uint64_t v27 = 0;
    int v28 = 0;
    unint64_t v25 = 0;
    int v105 = 0;
    unint64_t v104 = 0;
    unsigned int v93 = (v10 * v21) >> 3;
    int v94 = *(unsigned __int8 *)(v4 + 2172);
    if (v8 == 15) {
      char v29 = 7;
    }
    else {
      char v29 = 6;
    }
    char v101 = v29;
    unsigned int v30 = (v22 << v29) >> 3;
    if (!v24) {
      unsigned int v30 = v9;
    }
    unsigned int v92 = v30;
    long long v103 = 0u;
    char v26 = v8 == 15;
    do
    {
      uint64_t v31 = v11 - 1;
      if (v27 == v31) {
        int v32 = v108 - v28;
      }
      else {
        int v32 = (v100[v27 + 657] - v100[v27 + 656]) << v101;
      }
      if (v32 > 4096)
      {
        this = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          *(_DWORD *)buf = 136315394;
          v114 = "getPPSWorkBufSize";
          __int16 v115 = 1024;
          int v116 = 2000;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
          unsigned int v11 = v100[3483];
          uint64_t v31 = v11 - 1;
        }
      }
      if (v32 >= -15) {
        int v33 = v32 + 15;
      }
      else {
        int v33 = v32 + 30;
      }
      unint64_t v34 = v104;
      if (v104 <= (int)((v33 >> 4) * v93)) {
        unint64_t v34 = (int)((v33 >> 4) * v93);
      }
      unint64_t v104 = v34;
      unint64_t v35 = v27 + 1;
      uint64_t v36 = &v100[v27];
      int v37 = v36[657];
      int v38 = v36[656];
      unsigned int v39 = *(_DWORD *)(*(void *)(*((void *)v97 + 32) + 42424) + 2164);
      if (v39 <= v108) {
        unsigned int v39 = v108;
      }
      int v40 = v38 << v101;
      if (v96) {
        int v40 = ((v38 << v101) * v94) >> 3;
      }
      int v41 = v40 + v92 + v92 * (v37 - v38);
      if ((int)v39 < v41) {
        int v41 = v39;
      }
      *((void *)&v42 + 1) = *((void *)&v103 + 1);
      *(int32x2_t *)&long long v42 = vadd_s32((int32x2_t)(*(void *)&vmla_s32((int32x2_t)0x7F0000007FLL, (int32x2_t)__PAIR64__(((v41 + 63) >> 6) - (v40 >> 6), (v37 - v38) << v98), (int32x2_t)0xC0000002CLL) & 0xFFFFFF80FFFFFF80), *(int32x2_t *)&v103);
      long long v103 = v42;
      this = CAHDecTansyAvx::calc_lf_above_pix_tile_size((CAHDecTansyAvx *)this, v10, v107, v108, v98, v27 == 0, v27 == v31, v38, v37);
      v105 += this;
      v28 += v32;
      if (v25 <= 20 * (v33 >> 4)) {
        unint64_t v25 = 20 * (v33 >> 4);
      }
      ++v27;
    }
    while (v35 < v11);
  }
  uint64_t v43 = v100;
  uint64_t v44 = v100[3482];
  unsigned int v45 = v90;
  if (!v44)
  {
    int v102 = 0;
    unsigned int v71 = 0;
    unint64_t v87 = 0;
    unint64_t v111 = 0;
    v72 = v97;
    goto LABEL_80;
  }
  v86 = &v100[v44 + 721];
  int v46 = *v86;
  int v47 = v100[721];
  long long v48 = 0uLL;
  int v49 = v100 + 722;
  uint64_t v91 = v100[3482];
  do
  {
    long long v109 = v48;
    int v51 = *v49++;
    int v50 = v51;
    this = CAHDecTansyAvx::calc_lf_left_tile_size((CAHDecTansyAvx *)this, 11, 7, v106, v107, v99, v47, v51, v112, v46);
    *((void *)&v48 + 1) = *((void *)&v109 + 1);
    int v52 = ((v112 + 63) >> 6) - (v47 << v26);
    int v53 = (v51 - v47) << v26;
    if (v51 != v46) {
      int v52 = v53;
    }
    *(int32x2_t *)&long long v48 = vmax_s32(*(int32x2_t *)&v109, (int32x2_t)__PAIR64__(72 * v52, this));
    int v47 = v50;
    --v44;
  }
  while (v44);
  int v102 = 0;
  unint64_t v87 = *(void *)&vadd_s32(*(int32x2_t *)&v48, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80;
  int v54 = *v86;
  int v95 = (v112 + 7) >> 6;
  unsigned int v55 = v100[721];
  long long v56 = 0uLL;
  v57 = v100 + 722;
  uint64_t v58 = v91;
  do
  {
    long long v110 = v56;
    int v60 = *v57++;
    unsigned int v59 = v60;
    int v61 = (CAHDecTansyAvx *)CAHDecTansyAvx::calc_lr_left_tile_size((CAHDecTansyAvx *)this, 13, 12, v106, v107, v99, v55, v60, v112, v54);
    unsigned int v62 = v61;
    this = CAHDecTansyAvx::calc_lr_left_tile_size(v61, 6, 6, v106, v107, v99, v55, v60, v112, v54);
    if (v60 == v54)
    {
      long long v56 = v110;
      if (v102 > (int)(24 * (v95 - (v55 << v98)) + 24)) {
        goto LABEL_73;
      }
      int v63 = 3 * (v95 + 1 - (v55 << v98));
    }
    else
    {
      int v63 = 3 * ((v59 - v55) << v98);
      long long v56 = v110;
      if (v102 > (int)(24 * ((v59 - v55) << v98))) {
        goto LABEL_73;
      }
    }
    int v102 = 8 * v63;
LABEL_73:
    *(int32x2_t *)&long long v56 = vmax_s32(*(int32x2_t *)&v56, (int32x2_t)__PAIR64__(this, v62));
    unsigned int v55 = v59;
    --v58;
  }
  while (v58);
  int v64 = 0;
  unint64_t v111 = *(void *)&vadd_s32(*(int32x2_t *)&v56, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80;
  int v65 = *v86;
  int v66 = v100[721];
  v67 = v100 + 722;
  uint64_t v68 = v91;
  do
  {
    int v70 = *v67++;
    int v69 = v70;
    this = CAHDecIxoraAvx::calc_az_left_tile_size((CAHDecIxoraAvx *)this, v107, v99, v96, v106, v66, v70, v112, v65);
    if (v64 <= (int)this) {
      int v64 = this;
    }
    int v66 = v69;
    --v68;
  }
  while (v68);
  unsigned int v71 = (v64 + 127) & 0xFFFFFF80;
  v72 = v97;
  unsigned int v45 = v90;
  uint64_t v44 = v91;
  uint64_t v43 = v100;
LABEL_80:
  BOOL v73 = *(_DWORD *)(*((void *)v72 + 32) + 2644) != 1 || v45 == 0;
  if (v73
    || (v107 != 1 ? (int v74 = 32) : (int v74 = 24),
        v107 ? (int v75 = v74) : (int v75 = 16),
        !CAHDecTansyAvx::isLfPadDis(v72) ? (int v76 = 8) : (int v76 = 0),
        !v44))
  {
    signed int v77 = 0;
    unint64_t v82 = v25;
  }
  else
  {
    signed int v77 = 0;
    unsigned int v78 = (v112 + v76 + 15) >> 4;
    uint64_t v79 = (v44 - 1);
    if (v85 == 15) {
      char v80 = 3;
    }
    else {
      char v80 = 2;
    }
    v81 = v43 + 722;
    unint64_t v82 = v25;
    do
    {
      unsigned int v83 = v78;
      if (v79) {
        unsigned int v83 = *v81 << v80;
      }
      signed int v84 = ((v83 - (*(v81 - 1) << v80)) * v75 + 133) & 0xFFFFFF80;
      if (v77 <= v84) {
        signed int v77 = v84;
      }
      ++v81;
      --v79;
      --v44;
    }
    while (v44);
  }
  *(_DWORD *)v89 = v88;
  if (HIDWORD(v104) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 2090;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  *((_DWORD *)v89 + 1) = v104;
  *((_DWORD *)v89 + 2) = v105;
  *(void *)(v89 + 12) = v103;
  if (HIDWORD(v82) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 2094;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  *((_DWORD *)v89 + 5) = v82;
  *((void *)v89 + 3) = v87;
  *((void *)v89 + 4) = v111;
  *((_DWORD *)v89 + 10) = (v102 + 127) & 0xFFFFFF80;
  *((_DWORD *)v89 + 11) = v71;
  *((_DWORD *)v89 + 12) = v77;
}

BOOL CAHDecHibiscusAvx::ppsWorkBufSizeIncrease(CAHDecHibiscusAvx *this, _DWORD *a2, _DWORD *a3)
{
  return *a3 > *a2
      || a3[1] > a2[1]
      || a3[2] > a2[2]
      || a3[3] > a2[3]
      || a3[4] > a2[4]
      || a3[5] > a2[5]
      || a3[6] > a2[6]
      || a3[7] > a2[7]
      || a3[8] > a2[8]
      || a3[9] > a2[9]
      || a3[10] > a2[10]
      || a3[11] > a2[11]
      || a3[12] > a2[12];
}

uint64_t CAHDecHibiscusAvx::allocWorkBuf_PPS(CAHDecHibiscusAvx *this, void *a2, void *a3, int *a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 32);
  unsigned int v7 = *(_DWORD **)(v6 + 15944);
  if (*a4 > v7[19809])
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *a4;
      if (v9)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecHibiscusAvx *)((char *)this + v8 + 3104), v9, 7, 1, 0))break; {
      }
        }
      v8 += 176;
      if (v8 == 528)
      {
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
        v7[19809] = *a4;
        goto LABEL_7;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_103;
    }
    int v36 = 136315650;
    int v37 = "allocWorkBuf_PPS";
    __int16 v38 = 1024;
    int v39 = 2149;
    __int16 v40 = 2080;
    int v41 = "OvpAboveInfo";
    unsigned int v11 = &_os_log_internal;
    goto LABEL_102;
  }
LABEL_7:
  uint64_t v10 = a4[1];
  if ((int)v10 > v7[19810])
  {
    if (v10)
    {
      if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 227, v10, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v36 = 136315650;
          int v37 = "allocWorkBuf_PPS";
          __int16 v38 = 1024;
          int v39 = 2157;
          __int16 v40 = 2080;
          int v41 = "IPAbovePixel";
          unsigned int v11 = &_os_log_internal;
LABEL_102:
          _os_log_impl(&dword_223977000, v11, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v36, 0x1Cu);
          goto LABEL_103;
        }
        goto LABEL_103;
      }
      int v12 = a4[1];
      uint64_t v6 = *((void *)this + 32);
      unsigned int v7 = *(_DWORD **)(v6 + 15944);
    }
    else
    {
      int v12 = 0;
    }
    v7[19810] = v12;
  }
  uint64_t v13 = a4[2];
  if ((int)v13 <= v7[19811])
  {
LABEL_25:
    uint64_t v15 = a4[3];
    if ((int)v15 > v7[19812])
    {
      if (v15)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 249, v15, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2171;
            __int16 v40 = 2080;
            int v41 = "LfAboveInfo";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v16 = a4[3];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v16 = 0;
      }
      v7[19812] = v16;
    }
    uint64_t v17 = a4[4];
    if ((int)v17 > v7[19813])
    {
      if (v17)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 293, v17, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2178;
            __int16 v40 = 2080;
            int v41 = "RfAboveInfo";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v18 = a4[4];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v18 = 0;
      }
      v7[19813] = v18;
    }
    uint64_t v19 = a4[5];
    if ((int)v19 > v7[19814])
    {
      if (v19)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 359, v19, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2185;
            __int16 v40 = 2080;
            int v41 = "MvAboveInfo";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v20 = a4[5];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v20 = 0;
      }
      v7[19814] = v20;
    }
    uint64_t v21 = a4[6];
    if ((int)v21 > v7[19815])
    {
      if (v21)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 260, v21, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2192;
            __int16 v40 = 2080;
            int v41 = "LfLeftPixel";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v22 = a4[6];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v22 = 0;
      }
      v7[19815] = v22;
    }
    uint64_t v23 = a4[7];
    if ((int)v23 > v7[19816])
    {
      if (v23)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 271, v23, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2199;
            __int16 v40 = 2080;
            int v41 = "LfLeftInfo";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v24 = a4[7];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v24 = 0;
      }
      v7[19816] = v24;
    }
    uint64_t v25 = a4[8];
    if ((int)v25 > v7[19817])
    {
      if (v25)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 282, v25, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2206;
            __int16 v40 = 2080;
            int v41 = "SrLeftPixel";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v26 = a4[8];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v26 = 0;
      }
      v7[19817] = v26;
    }
    uint64_t v27 = a4[9];
    if ((int)v27 > v7[19818])
    {
      if (v27)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 304, v27, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2213;
            __int16 v40 = 2080;
            int v41 = "RfLeftPixel";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v28 = a4[9];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v28 = 0;
      }
      v7[19818] = v28;
    }
    uint64_t v29 = a4[10];
    if ((int)v29 > v7[19819])
    {
      if (v29)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 315, v29, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2220;
            __int16 v40 = 2080;
            int v41 = "RfLeftInfo";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v30 = a4[10];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v30 = 0;
      }
      v7[19819] = v30;
    }
    uint64_t v31 = a4[11];
    if ((int)v31 > v7[19820])
    {
      if (v31)
      {
        if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 348, v31, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2227;
            __int16 v40 = 2080;
            int v41 = "AzLeftPixel";
            unsigned int v11 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v32 = a4[11];
        uint64_t v6 = *((void *)this + 32);
        unsigned int v7 = *(_DWORD **)(v6 + 15944);
      }
      else
      {
        int v32 = 0;
      }
      v7[19820] = v32;
    }
    uint64_t v33 = a4[12];
    if ((int)v33 <= v7[19821]) {
      return 0;
    }
    if (v33)
    {
      if (CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 337, v33, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v36 = 136315650;
          int v37 = "allocWorkBuf_PPS";
          __int16 v38 = 1024;
          int v39 = 2234;
          __int16 v40 = 2080;
          int v41 = "SWrLeftPixel";
          unsigned int v11 = &_os_log_internal;
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      int v35 = a4[12];
      unsigned int v7 = *(_DWORD **)(*((void *)this + 32) + 15944);
    }
    else
    {
      int v35 = 0;
    }
    uint64_t result = 0;
    v7[19821] = v35;
    return result;
  }
  if (!v13)
  {
    int v14 = 0;
LABEL_24:
    v7[19811] = v14;
    goto LABEL_25;
  }
  if (!CAVDDecoder::allocAVDMem(v6, (_OWORD *)this + 238, v13, 7, 1, 0))
  {
    int v14 = a4[2];
    uint64_t v6 = *((void *)this + 32);
    unsigned int v7 = *(_DWORD **)(v6 + 15944);
    goto LABEL_24;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v36 = 136315650;
    int v37 = "allocWorkBuf_PPS";
    __int16 v38 = 1024;
    int v39 = 2164;
    __int16 v40 = 2080;
    int v41 = "LfAbovePixel";
    unsigned int v11 = &_os_log_internal;
    goto LABEL_102;
  }
LABEL_103:
  (*(void (**)(CAHDecHibiscusAvx *, int *))(*(void *)this + 152))(this, a4);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecHibiscusAvx::freeWorkBuf_SPS(CAHDecHibiscusAvx *this)
{
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    for (uint64_t i = 0; i != 2464; i += 176)
    {
      uint64_t v3 = *((void *)this + 32);
      if (*(void *)(v3 + i + 3072))
      {
        CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 3072));
        uint64_t v4 = (_OWORD *)(*((void *)this + 32) + i);
        v4[192] = 0u;
        v4[193] = 0u;
        v4[194] = 0u;
        v4[195] = 0u;
        v4[196] = 0u;
        v4[197] = 0u;
        v4[198] = 0u;
        v4[199] = 0u;
        v4[200] = 0u;
        v4[201] = 0u;
        v4[202] = 0u;
        uint64_t v3 = *((void *)this + 32);
      }
      if (*(void *)(v3 + i + 5536))
      {
        CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 5536));
        int v5 = (_OWORD *)(*((void *)this + 32) + i);
        v5[346] = 0u;
        v5[347] = 0u;
        v5[348] = 0u;
        v5[349] = 0u;
        v5[350] = 0u;
        v5[351] = 0u;
        v5[352] = 0u;
        v5[353] = 0u;
        v5[354] = 0u;
        v5[355] = 0u;
        v5[356] = 0u;
      }
    }
  }
  for (uint64_t j = 0; j != 2288; j += 176)
  {
    uint64_t v7 = *((void *)this + 32);
    if (*(void *)(v7 + j + 8008))
    {
      CAVDDecoder::deallocAVDMem(v7, (uint64_t *)(v7 + j + 8008));
      uint64_t v8 = (_OWORD *)(*((void *)this + 32) + j + 8008);
      *uint64_t v8 = 0u;
      v8[1] = 0u;
      v8[2] = 0u;
      v8[3] = 0u;
      v8[4] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      v8[10] = 0u;
    }
  }
  for (uint64_t k = 0; k != 2288; k += 176)
  {
    uint64_t result = *((void *)this + 32);
    if (*(void *)(result + k + 13424))
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + k + 13424));
      unsigned int v11 = (_OWORD *)(*((void *)this + 32) + k);
      v11[839] = 0u;
      v11[840] = 0u;
      v11[841] = 0u;
      v11[842] = 0u;
      v11[843] = 0u;
      v11[844] = 0u;
      v11[845] = 0u;
      v11[846] = 0u;
      v11[847] = 0u;
      v11[848] = 0u;
      v11[849] = 0u;
    }
  }
  return result;
}

double CAHDecHibiscusAvx::freeWorkBuf_PPS(CAHDecHibiscusAvx *this, _DWORD *a2)
{
  if (!a2 || (uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944), *a2 > v4[19809]))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (char *)this + 3104;
    do
    {
      uint64_t v7 = &v6[v5];
      if (*(void *)&v6[v5])
      {
        CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)&v6[v5]);
        double result = 0.0;
        *(_OWORD *)uint64_t v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        *((_OWORD *)v7 + 2) = 0u;
        *((_OWORD *)v7 + 3) = 0u;
        *((_OWORD *)v7 + 4) = 0u;
        *((_OWORD *)v7 + 5) = 0u;
        *((_OWORD *)v7 + 6) = 0u;
        *((_OWORD *)v7 + 7) = 0u;
        *((_OWORD *)v7 + 8) = 0u;
        *((_OWORD *)v7 + 9) = 0u;
        *((_OWORD *)v7 + 10) = 0u;
      }
      v5 += 176;
    }
    while (v5 != 528);
    if (!a2) {
      goto LABEL_10;
    }
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
  }
  if (a2[1] <= v4[19810]) {
    goto LABEL_14;
  }
LABEL_10:
  if (*((void *)this + 454))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 454);
    double result = 0.0;
    *((_OWORD *)this + 227) = 0u;
    *((_OWORD *)this + 228) = 0u;
    *((_OWORD *)this + 229) = 0u;
    *((_OWORD *)this + 230) = 0u;
    *((_OWORD *)this + 231) = 0u;
    *((_OWORD *)this + 232) = 0u;
    *((_OWORD *)this + 233) = 0u;
    *((_OWORD *)this + 234) = 0u;
    *((_OWORD *)this + 235) = 0u;
    *((_OWORD *)this + 236) = 0u;
    *((_OWORD *)this + 237) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_14:
    if (a2[2] <= v4[19811]) {
      goto LABEL_19;
    }
  }
  if (*((void *)this + 476))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 476);
    double result = 0.0;
    *((_OWORD *)this + 238) = 0u;
    *((_OWORD *)this + 239) = 0u;
    *((_OWORD *)this + 240) = 0u;
    *((_OWORD *)this + 241) = 0u;
    *((_OWORD *)this + 242) = 0u;
    *((_OWORD *)this + 243) = 0u;
    *((_OWORD *)this + 244) = 0u;
    *((_OWORD *)this + 245) = 0u;
    *((_OWORD *)this + 246) = 0u;
    *((_OWORD *)this + 247) = 0u;
    *((_OWORD *)this + 248) = 0u;
  }
  if (!a2) {
    goto LABEL_20;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_19:
  if (a2[3] <= v4[19812]) {
    goto LABEL_24;
  }
LABEL_20:
  if (*((void *)this + 498))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 498);
    double result = 0.0;
    *((_OWORD *)this + 249) = 0u;
    *((_OWORD *)this + 250) = 0u;
    *((_OWORD *)this + 251) = 0u;
    *((_OWORD *)this + 252) = 0u;
    *((_OWORD *)this + 253) = 0u;
    *((_OWORD *)this + 254) = 0u;
    *((_OWORD *)this + 255) = 0u;
    *((_OWORD *)this + 256) = 0u;
    *((_OWORD *)this + 257) = 0u;
    *((_OWORD *)this + 258) = 0u;
    *((_OWORD *)this + 259) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_24:
    if (a2[4] <= v4[19813]) {
      goto LABEL_29;
    }
  }
  if (*((void *)this + 586))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 586);
    double result = 0.0;
    *((_OWORD *)this + 293) = 0u;
    *((_OWORD *)this + 294) = 0u;
    *((_OWORD *)this + 295) = 0u;
    *((_OWORD *)this + 296) = 0u;
    *((_OWORD *)this + 297) = 0u;
    *((_OWORD *)this + 298) = 0u;
    *((_OWORD *)this + 299) = 0u;
    *((_OWORD *)this + 300) = 0u;
    *((_OWORD *)this + 301) = 0u;
    *((_OWORD *)this + 302) = 0u;
    *((_OWORD *)this + 303) = 0u;
  }
  if (!a2) {
    goto LABEL_30;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_29:
  if (a2[5] <= v4[19814]) {
    goto LABEL_34;
  }
LABEL_30:
  if (*((void *)this + 718))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 718);
    double result = 0.0;
    *((_OWORD *)this + 359) = 0u;
    *((_OWORD *)this + 360) = 0u;
    *((_OWORD *)this + 361) = 0u;
    *((_OWORD *)this + 362) = 0u;
    *((_OWORD *)this + 363) = 0u;
    *((_OWORD *)this + 364) = 0u;
    *((_OWORD *)this + 365) = 0u;
    *((_OWORD *)this + 366) = 0u;
    *((_OWORD *)this + 367) = 0u;
    *((_OWORD *)this + 368) = 0u;
    *((_OWORD *)this + 369) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_34:
    if (a2[6] <= v4[19815]) {
      goto LABEL_39;
    }
  }
  if (*((void *)this + 520))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 520);
    double result = 0.0;
    *((_OWORD *)this + 260) = 0u;
    *((_OWORD *)this + 261) = 0u;
    *((_OWORD *)this + 262) = 0u;
    *((_OWORD *)this + 263) = 0u;
    *((_OWORD *)this + 264) = 0u;
    *((_OWORD *)this + 265) = 0u;
    *((_OWORD *)this + 266) = 0u;
    *((_OWORD *)this + 267) = 0u;
    *((_OWORD *)this + 268) = 0u;
    *((_OWORD *)this + 269) = 0u;
    *((_OWORD *)this + 270) = 0u;
  }
  if (!a2) {
    goto LABEL_40;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_39:
  if (a2[7] <= v4[19816]) {
    goto LABEL_44;
  }
LABEL_40:
  if (*((void *)this + 542))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 542);
    double result = 0.0;
    *((_OWORD *)this + 271) = 0u;
    *((_OWORD *)this + 272) = 0u;
    *((_OWORD *)this + 273) = 0u;
    *((_OWORD *)this + 274) = 0u;
    *((_OWORD *)this + 275) = 0u;
    *((_OWORD *)this + 276) = 0u;
    *((_OWORD *)this + 277) = 0u;
    *((_OWORD *)this + 278) = 0u;
    *((_OWORD *)this + 279) = 0u;
    *((_OWORD *)this + 280) = 0u;
    *((_OWORD *)this + 281) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_44:
    if (a2[8] <= v4[19817]) {
      goto LABEL_49;
    }
  }
  if (*((void *)this + 564))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 564);
    double result = 0.0;
    *((_OWORD *)this + 282) = 0u;
    *((_OWORD *)this + 283) = 0u;
    *((_OWORD *)this + 284) = 0u;
    *((_OWORD *)this + 285) = 0u;
    *((_OWORD *)this + 286) = 0u;
    *((_OWORD *)this + 287) = 0u;
    *((_OWORD *)this + 288) = 0u;
    *((_OWORD *)this + 289) = 0u;
    *((_OWORD *)this + 290) = 0u;
    *((_OWORD *)this + 291) = 0u;
    *((_OWORD *)this + 292) = 0u;
  }
  if (!a2) {
    goto LABEL_50;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_49:
  if (a2[9] <= v4[19818]) {
    goto LABEL_54;
  }
LABEL_50:
  if (*((void *)this + 608))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 608);
    double result = 0.0;
    *((_OWORD *)this + 304) = 0u;
    *((_OWORD *)this + 305) = 0u;
    *((_OWORD *)this + 306) = 0u;
    *((_OWORD *)this + 307) = 0u;
    *((_OWORD *)this + 308) = 0u;
    *((_OWORD *)this + 309) = 0u;
    *((_OWORD *)this + 310) = 0u;
    *((_OWORD *)this + 311) = 0u;
    *((_OWORD *)this + 312) = 0u;
    *((_OWORD *)this + 313) = 0u;
    *((_OWORD *)this + 314) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_54:
    if (a2[10] <= v4[19819]) {
      goto LABEL_59;
    }
  }
  if (*((void *)this + 630))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 630);
    double result = 0.0;
    *((_OWORD *)this + 315) = 0u;
    *((_OWORD *)this + 316) = 0u;
    *((_OWORD *)this + 317) = 0u;
    *((_OWORD *)this + 318) = 0u;
    *((_OWORD *)this + 319) = 0u;
    *((_OWORD *)this + 320) = 0u;
    *((_OWORD *)this + 321) = 0u;
    *((_OWORD *)this + 322) = 0u;
    *((_OWORD *)this + 323) = 0u;
    *((_OWORD *)this + 324) = 0u;
    *((_OWORD *)this + 325) = 0u;
  }
  if (!a2) {
    goto LABEL_60;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_59:
  if (a2[11] <= v4[19820]) {
    goto LABEL_64;
  }
LABEL_60:
  if (*((void *)this + 696))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 696);
    double result = 0.0;
    *((_OWORD *)this + 348) = 0u;
    *((_OWORD *)this + 349) = 0u;
    *((_OWORD *)this + 350) = 0u;
    *((_OWORD *)this + 351) = 0u;
    *((_OWORD *)this + 352) = 0u;
    *((_OWORD *)this + 353) = 0u;
    *((_OWORD *)this + 354) = 0u;
    *((_OWORD *)this + 355) = 0u;
    *((_OWORD *)this + 356) = 0u;
    *((_OWORD *)this + 357) = 0u;
    *((_OWORD *)this + 358) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_64:
    if (a2[12] <= v4[19821]) {
      return result;
    }
  }
  if (*((void *)this + 674))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 674);
    double result = 0.0;
    *((_OWORD *)this + 337) = 0u;
    *((_OWORD *)this + 338) = 0u;
    *((_OWORD *)this + 339) = 0u;
    *((_OWORD *)this + 340) = 0u;
    *((_OWORD *)this + 341) = 0u;
    *((_OWORD *)this + 342) = 0u;
    *((_OWORD *)this + 343) = 0u;
    *((_OWORD *)this + 344) = 0u;
    *((_OWORD *)this + 345) = 0u;
    *((_OWORD *)this + 346) = 0u;
    *((_OWORD *)this + 347) = 0u;
  }
  return result;
}

uint64_t CAHDecHibiscusAvx::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 5936) = a2;
  return this;
}

uint64_t CAHDecHibiscusAvx::initPicture(CAHDecHibiscusAvx *this)
{
  return 0;
}

uint64_t CAHDecHibiscusAvx::populateSlices(CAHDecHibiscusAvx *this)
{
  return 0;
}

uint64_t CAHDecHibiscusAvx::getTileIdxAbove(CAHDecHibiscusAvx *this)
{
  return 0;
}

uint64_t CAHDecHibiscusAvx::decodeBuffer(CAHDecHibiscusAvx *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecHibiscusAvx::decodeBufferSize(CAHDecHibiscusAvx *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecHibiscusAvx::decHdrYLinAddr(CAHDecHibiscusAvx *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 3072);
}

uint64_t CAHDecHibiscusAvx::decHdrCLinAddr(CAHDecHibiscusAvx *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 5536);
}

uint64_t CAHDecHibiscusAvx::decHdrYSize(CAHDecHibiscusAvx *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 3116);
}

uint64_t CAHDecHibiscusAvx::decHdrCSize(CAHDecHibiscusAvx *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 5580);
}

uint64_t CAHDecHibiscusAvx::decHdrYStride(CAHDecHibiscusAvx *this)
{
  return *((unsigned int *)this + 1482);
}

uint64_t CAHDecHibiscusAvx::decHdrCStride(CAHDecHibiscusAvx *this)
{
  return *((unsigned int *)this + 1483);
}

CAHDecSalviaLgh *createSalviaLghDecoder(CAVDLghDecoder *a1)
{
  uint64_t v2 = (CAHDecSalviaLgh *)operator new(0xC48uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecSalviaLgh::CAHDecSalviaLgh(v2, a1);
  }
  return v3;
}

void sub_223A6D7CC(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecSalviaLgh::CAHDecSalviaLgh(CAHDecSalviaLgh *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73F860;
  *(_DWORD *)(v1 + 456) = 147980;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecSalviaLgh::CAHDecSalviaLgh(CAHDecSalviaLgh *this, CAVDLghDecoder *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73F860;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 147980;
  *(_DWORD *)(v4 + 8) = 524;
  *(_OWORD *)(v4 + 16) = xmmword_223AD0770;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 147980, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      uint64_t v17 = "CAHDecSalviaLgh";
      __int16 v18 = 1024;
      int v19 = 0;
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
LABEL_16:
      _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v7);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v8;
    *((void *)this + 34) = v8;
    uint64_t v9 = *((void *)this + 32);
    *(_DWORD *)(v9 + 17552) = 0;
    bzero((void *)(v9 + 11792), 0xB00uLL);
    *(_OWORD *)(v9 + 5712) = 0u;
    bzero((void *)(*((void *)this + 32) + 14608), 0xB00uLL);
    bzero((char *)this + 464, 0x4D0uLL);
    uint64_t v10 = (_OWORD *)*((void *)this + 32);
    v10[356] = 0u;
    v10[355] = 0u;
    v10[354] = 0u;
    v10[353] = 0u;
    v10[352] = 0u;
    v10[351] = 0u;
    v10[350] = 0u;
    v10[349] = 0u;
    v10[348] = 0u;
    v10[347] = 0u;
    v10[346] = 0u;
    v10[345] = 0u;
    v10[344] = 0u;
    v10[343] = 0u;
    v10[342] = 0u;
    v10[341] = 0u;
    v10[340] = 0u;
    v10[339] = 0u;
    v10[338] = 0u;
    v10[337] = 0u;
    v10[336] = 0u;
    v10[335] = 0u;
    bzero((char *)this + 1696, 0x580uLL);
    for (uint64_t i = 3072; i != 3776; i += 176)
    {
      int v12 = (_OWORD *)(*((void *)this + 32) + i);
      v12[9] = 0uLL;
      v12[10] = 0uLL;
      v12[7] = 0uLL;
      v12[8] = 0uLL;
      v12[5] = 0uLL;
      v12[6] = 0uLL;
      v12[3] = 0uLL;
      v12[4] = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *int v12 = 0uLL;
    }
    do
    {
      uint64_t v13 = (_OWORD *)(*((void *)this + 32) + i);
      v13[9] = 0uLL;
      v13[10] = 0uLL;
      v13[7] = 0uLL;
      v13[8] = 0uLL;
      v13[5] = 0uLL;
      v13[6] = 0uLL;
      v13[3] = 0uLL;
      v13[4] = 0uLL;
      v13[1] = 0uLL;
      v13[2] = 0uLL;
      *uint64_t v13 = 0uLL;
      i += 176;
    }
    while (i != 5184);
    int v14 = (_OWORD *)*((void *)this + 32);
    v14[334] = 0u;
    v14[333] = 0u;
    v14[332] = 0u;
    v14[331] = 0u;
    v14[330] = 0u;
    v14[329] = 0u;
    v14[328] = 0u;
    v14[327] = 0u;
    v14[326] = 0u;
    v14[325] = 0u;
    uint64_t v15 = 3072;
    v14[324] = 0u;
    do
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), 1913, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        int v16 = 136315650;
        uint64_t v17 = "CAHDecSalviaLgh";
        __int16 v18 = 1024;
        int v19 = 170;
        __int16 v20 = 2080;
        uint64_t v21 = "probBuf";
        uint64_t v5 = &_os_log_internal;
        uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
        goto LABEL_15;
      }
      v15 += 176;
    }
    while (v15 != 3776);
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 5184), 12284, 7, 1, 0))return; {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    }
    {
      int v16 = 136315650;
      uint64_t v17 = "CAHDecSalviaLgh";
      __int16 v18 = 1024;
      int v19 = 172;
      __int16 v20 = 2080;
      uint64_t v21 = "stateBuf";
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_15:
      uint32_t v7 = 28;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_223A6DC04(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecSalviaLgh::~CAHDecSalviaLgh(CAHDecSalviaLgh *this)
{
  *(void *)this = &unk_26D73F860;
  CAHDecSalviaLgh::freeWorkBuf_SPS(this);
  uint64_t v2 = *((void *)this + 32);
  for (uint64_t i = 3072; i != 3776; i += 176)
  {
    if (*(void *)(v2 + i))
    {
      CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + i));
      uint64_t v2 = *((void *)this + 32);
      *(void *)(v2 + i) = 0;
    }
  }
  if (*(void *)(v2 + 5184))
  {
    CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + 5184));
    *(void *)(*((void *)this + 32) + 5184) = 0;
  }
  (*(void (**)(CAHDecSalviaLgh *, void))(*(void *)this + 152))(this, 0);
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecSalviaLgh::~CAHDecSalviaLgh(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecSalviaLgh::startPicture(CAHDecSalviaLgh *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  uint64_t v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x2420CuLL);
    uint64_t v5 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v5 + 16) = a2;
    *(_WORD *)(v5 + 24) = 257;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecSalviaLgh::DecodePicture(CAHDecSalviaLgh *this, int a2)
{
  if (CAHDecSalviaLgh::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecSalviaLgh *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecSalviaLgh *))(*(void *)this + 48))(this);
  (*(void (**)(CAHDecSalviaLgh *))(*(void *)this + 56))(this);
  (*(void (**)(CAHDecSalviaLgh *, void))(*(void *)this + 88))(this, 0);
  (*(void (**)(CAHDecSalviaLgh *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecSalviaLgh::populateCommonRegisters(CAHDecSalviaLgh *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000002;
  return 0;
}

uint64_t CAHDecSalviaLgh::updateCommonRegisters(CAHDecSalviaLgh *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecSalviaLgh::populateSequenceRegisters(CAHDecSalviaLgh *this)
{
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  *(_DWORD *)(v1 + 40) = 0;
  unsigned __int16 v3 = *(_DWORD *)(v2 + 108) - 1;
  *(_DWORD *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 40) = (v3 | ((unsigned __int16)*(_DWORD *)(v2 + 112) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 304);
  if (v4 >= 3) {
    int v5 = 6528;
  }
  else {
    int v5 = ((v4 & 3) << 7) | 0x1800;
  }
  *(_DWORD *)(v1 + 44) = v5;
  unsigned int v6 = v5 & 0xFFF87FFF | (((*(unsigned char *)(v2 + 105) + 8) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFF87FFFF | (((*(unsigned __int8 *)(v2 + 105) + 8) & 0xF) << 19) | 0x1000000;
  *(_DWORD *)(v1 + 44) = v7;
  *(_DWORD *)(v1 + 44) = v7 & 0xFDFFFFFF | (*(unsigned char *)(v2 + 304) == 4);
  return 0;
}

uint64_t CAHDecSalviaLgh::populatePictureRegisters(CAHDecSalviaLgh *this)
{
  uint64_t v237 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v2 + 17560);
  if (*(unsigned char *)(v4 + 37))
  {
    int v5 = *(_DWORD *)(v4 + 100);
    int v6 = *(_DWORD *)(v2 + 11748);
    int v230 = 1 << v5;
    int v231 = 1 << *(_DWORD *)(v4 + 96);
    int v229 = v231 << v5;
    if (!*(unsigned char *)(v4 + 40))
    {
      char v7 = 0;
      int v8 = 766509056;
      goto LABEL_6;
    }
  }
  else
  {
    int v9 = *(_DWORD *)(v4 + 100);
    int v6 = *(_DWORD *)(v2 + 11748);
    int v230 = 1 << v9;
    int v231 = 1 << *(_DWORD *)(v4 + 96);
    int v229 = v231 << v9;
  }
  int v8 = 766517248;
  char v7 = 1;
LABEL_6:
  *(_DWORD *)(v3 + 48) = v8;
  int v10 = v8 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v3 + 48) = v10;
  *(_DWORD *)(v3 + 48) = v10 | ((*(_DWORD *)(*((void *)this + 32) + 2644) == 1) << 10) | 0x2E0;
  *(void *)(v3 + 52) = 0x2000000;
  LOWORD(v10) = *(_DWORD *)(v4 + 108) - 1;
  *(_DWORD *)(v3 + 56) = (unsigned __int16)v10;
  *(_DWORD *)(v3 + 56) = ((unsigned __int16)v10 | ((unsigned __int16)*(_DWORD *)(v4 + 112) << 16)) - 0x10000;
  *(void *)(v3 + 60) = 0;
  int v11 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2688) & 7;
  *(_DWORD *)(v3 + 64) = v11;
  unsigned int v12 = v11 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2692) & 1));
  *(_DWORD *)(v3 + 64) = v12;
  unsigned int v13 = v12 & 0xFFFFFF8F | (16 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2696) & 7));
  *(_DWORD *)(v3 + 64) = v13;
  unsigned int v14 = v13 & 0xFFFFFF7F | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2700) & 1) << 7);
  *(_DWORD *)(v3 + 64) = v14;
  unsigned int v15 = v14 & 0xFFFFF8FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2704) & 7) << 8);
  *(_DWORD *)(v3 + 64) = v15;
  unsigned int v16 = v15 & 0xFFFFF7FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2708) & 1) << 11);
  *(_DWORD *)(v3 + 64) = v16;
  unsigned int v17 = v16 & 0xFFFFCFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2712) & 3) << 12);
  *(_DWORD *)(v3 + 64) = v17;
  unsigned int v18 = v17 & 0xFFFFBFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2716) & 1) << 14);
  *(_DWORD *)(v3 + 64) = v18;
  unsigned int v19 = v18 & 0xFFFF7FFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2720) & 1) << 15);
  *(_DWORD *)(v3 + 64) = v19;
  unsigned int v20 = v19 & 0xFFF8FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2724) & 7) << 16);
  *(_DWORD *)(v3 + 64) = v20;
  unsigned int v21 = v20 & 0xFFF7FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2728) & 1) << 19);
  *(_DWORD *)(v3 + 64) = v21;
  unsigned int v22 = v21 & 0xFFEFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2732) & 1) << 20);
  *(_DWORD *)(v3 + 64) = v22;
  unsigned int v23 = v22 & 0xFFDFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2736) & 1) << 21);
  *(_DWORD *)(v3 + 64) = v23;
  unsigned int v24 = v23 & 0xFFBFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2740) & 1) << 22);
  *(_DWORD *)(v3 + 64) = v24;
  unsigned int v25 = v24 & 0xFF7FFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2744) & 1) << 23);
  *(_DWORD *)(v3 + 64) = v25;
  unsigned int v26 = v25 & 0xFEFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2748) & 1) << 24);
  *(_DWORD *)(v3 + 64) = v26;
  unsigned int v27 = v26 & 0xFDFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2752) & 1) << 25);
  *(_DWORD *)(v3 + 64) = v27;
  *(_DWORD *)(v3 + 64) = v27 & 0xFBFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2756) & 1) << 26);
  *(void *)(v3 + 68) = 0;
  if (*(unsigned char *)(v4 + 60))
  {
    int v28 = *(unsigned char *)(v4 + 69) & 0x7F;
    *(_DWORD *)(v3 + 68) = v28;
    unsigned int v29 = v28 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 68) & 0x7F) << 7);
    *(_DWORD *)(v3 + 68) = v29;
    unsigned int v30 = v29 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 67) & 0x7F) << 14);
    *(_DWORD *)(v3 + 68) = v30;
    unsigned int v31 = v30 & 0xF01FFFFF | ((*(unsigned char *)(v4 + 66) & 0x7F) << 21);
    *(_DWORD *)(v3 + 68) = v31;
    *(_DWORD *)(v3 + 68) = v31 & 0x8FFFFFFF | ((*(unsigned char *)(v4 + 59) & 7) << 28);
    int v32 = *(unsigned char *)(v4 + 73) & 0x7F;
    *(_DWORD *)(v3 + 72) = v32;
    unsigned int v33 = v32 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 72) & 0x7F) << 7);
    *(_DWORD *)(v3 + 72) = v33;
    unsigned int v34 = v33 & 0xFFF03FFF | ((*(unsigned char *)(v4 + 58) & 0x3F) << 14);
  }
  else
  {
    *(_DWORD *)(v3 + 68) = (*(unsigned char *)(v4 + 59) & 7) << 28;
    unsigned int v34 = (*(unsigned char *)(v4 + 58) & 0x3F) << 14;
  }
  uint64_t v35 = 0;
  *(_DWORD *)(v3 + 72) = v34;
  *(_DWORD *)(v3 + 76) = 0;
  int v36 = *(unsigned char *)(v4 + 77) & 0x1F;
  *(_DWORD *)(v3 + 76) = v36;
  unsigned int v37 = v36 & 0xFFFFFC1F | (32 * (*(unsigned char *)(v4 + 76) & 0x1F));
  *(_DWORD *)(v3 + 76) = v37;
  unsigned int v38 = v37 & 0xFFFF83FF | ((*(unsigned char *)(v4 + 75) & 0x1F) << 10);
  *(_DWORD *)(v3 + 76) = v38;
  *(_DWORD *)(v3 + 76) = v38 | (*(unsigned __int8 *)(v4 + 74) << 15);
  uint64_t v39 = v3 + 80;
  __int16 v40 = (_WORD *)(v4 + 242);
  uint64_t v41 = v4 + 208;
  do
  {
    int v42 = *(unsigned __int8 *)(v4 + 78);
    *(_DWORD *)(v39 + v35) = 0;
    if (v42)
    {
      BOOL v43 = *(unsigned char *)(v41 + v35) != 0;
      *(_DWORD *)(v39 + v35) = v43;
      BOOL v44 = *(unsigned __int8 *)(v41 + v35 - 1) != 0;
    }
    else
    {
      BOOL v43 = 0;
      BOOL v44 = 0;
    }
    int v45 = v43 | (8 * v44);
    *(_DWORD *)(v39 + v35) = v45;
    unsigned int v46 = v45 & 0xFFFFFFF9 | (2 * (*v40 & 3));
    *(_DWORD *)(v39 + v35) = v46;
    if (v42)
    {
      int v47 = *(unsigned __int8 *)(v41 + v35 - 2);
      int v48 = v46 | ((*(unsigned char *)(v41 + v35 - 2) != 0) << 11);
      *(_DWORD *)(v39 + v35) = v48;
      if (v47) {
        LOWORD(v47) = *(v40 - 1);
      }
      unsigned int v49 = (16 * (v47 & 0x7F)) | v48 & 0xFFFFF80F;
      *(_DWORD *)(v39 + v35) = v49;
      int v42 = *(unsigned __int8 *)(v41 + v35 - 3);
      unsigned int v46 = v49 | ((v42 != 0) << 21);
      *(_DWORD *)(v39 + v35) = v46;
      if (v42) {
        LOWORD(v42) = *(v40 - 2);
      }
    }
    *(_DWORD *)(v39 + v35) = v46 & 0xFFE00FFF | ((v42 & 0x1FF) << 12);
    v35 += 4;
    v40 += 4;
  }
  while (v35 != 32);
  *(_DWORD *)(v3 + 152) = 0x20000;
  char v232 = v7;
  if (v7)
  {
    uint64_t v228 = 8;
  }
  else
  {
    int v227 = v6;
    int v50 = (_DWORD *)(v3 + 112);
    uint64_t v51 = 2178;
    uint64_t v228 = 3;
    int v52 = &_os_log_internal;
    do
    {
      v50[11] = 0x1000000;
      _DWORD *v50 = 0;
      unsigned __int16 v53 = **(_DWORD **)(*((void *)this + 32) + 8 * v51) - 1;
      _DWORD *v50 = v53;
      _DWORD *v50 = (v53 | ((unsigned __int16)*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v51) + 4) << 16))
           - 0x10000;
      v50[3] = 0;
      int v54 = (unsigned __int16)((**(_DWORD **)(*((void *)this + 32) + 8 * v51) << 14) / *(_DWORD *)(v4 + 108));
      v50[3] = v54;
      int v55 = v54 | ((unsigned __int16)((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v51) + 4) << 14)
                                    / *(_DWORD *)(v4 + 112)) << 16);
      v50[3] = v55;
      if ((v54 - 1024) >= 0x7C01 && os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v234 = "populatePictureRegisters";
        __int16 v235 = 1024;
        int v236 = 509;
        _os_log_impl(&dword_223977000, v52, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
        int v55 = v50[3];
      }
      if ((v55 - 0x4000000) >= 0x7C010000 && os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v234 = "populatePictureRegisters";
        __int16 v235 = 1024;
        int v236 = 510;
        _os_log_impl(&dword_223977000, v52, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
      }
      ++v51;
      ++v50;
    }
    while (v51 != 2181);
    int v6 = v227;
  }
  *(void *)(v3 + 144) = 0;
  int v56 = *(unsigned __int16 *)(v4 + 2672);
  *(_DWORD *)(v3 + 144) = v56;
  *(_DWORD *)(v3 + 144) = v56 | (*(_DWORD *)(v4 + 2676) << 16);
  int v57 = *(unsigned __int16 *)(v4 + 2680);
  *(_DWORD *)(v3 + 148) = v57;
  *(_DWORD *)(v3 + 148) = v57 | (*(_DWORD *)(v4 + 2684) << 16);
  uint64_t v58 = (char *)this + 464;
  for (uint64_t i = 168; i != 196; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v60 = *((void *)this + 33);
    int v61 = *(_DWORD *)(v60 + i);
    *(_DWORD *)(v60 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFu;
    uint64_t v62 = *((void *)this + 33);
    int v63 = *(_DWORD *)(v62 + i);
    *(_DWORD *)(v62 + i) = v61;
    if (*(void *)v58 || *((_DWORD *)v58 + 38) || *((_DWORD *)v58 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v58, i, 0, 0xFFFFFFFFLL, 8, v63, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 28) = *(_DWORD *)(*((void *)this + 33) + i + 28) & 0x800001FF | (((*((_DWORD *)this + 780) >> 9) & 0x3FFFFF) << 9);
    v58 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 224) = 0;
  uint64_t v65 = *((void *)this + 33);
  int v66 = *(_DWORD *)(v65 + 224);
  *(_DWORD *)(v65 + 224) = 0;
  *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFFu;
  uint64_t v67 = *((void *)this + 33);
  int v68 = *(_DWORD *)(v67 + 224);
  *(_DWORD *)(v67 + 224) = v66;
  uint64_t v69 = *((void *)this + 32);
  if (*(void *)(v69 + 5184) || *(_DWORD *)(v69 + 5336) || *(_DWORD *)(v69 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v69 + 5184), 224, 0, 0xFFFFFFFFLL, 8, v68, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 228) = 0;
  *(_DWORD *)(*((void *)this + 33) + 280) = 0;
  uint64_t v70 = *((void *)this + 33);
  int v71 = *(_DWORD *)(v70 + 280);
  *(_DWORD *)(v70 + 280) = 0;
  *(_DWORD *)(*((void *)this + 33) + 280) ^= 0xFFFFFFu;
  uint64_t v72 = *((void *)this + 33);
  int v73 = *(_DWORD *)(v72 + 280);
  *(_DWORD *)(v72 + 280) = v71;
  if (*((void *)this + 278) || *((_DWORD *)this + 594) || *((_DWORD *)this + 595))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 280, 0, 0xFFFFFFFFLL, 8, v73, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 232) = 0;
  uint64_t v74 = *((void *)this + 33);
  int v75 = *(_DWORD *)(v74 + 232);
  *(_DWORD *)(v74 + 232) = 0;
  *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFFu;
  uint64_t v76 = *((void *)this + 33);
  int v77 = *(_DWORD *)(v76 + 232);
  *(_DWORD *)(v76 + 232) = v75;
  if (*((void *)this + 234) || *((_DWORD *)this + 506) || *((_DWORD *)this + 507))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 232, 0, 0xFFFFFFFFLL, 8, v77, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 236) = 0;
  uint64_t v78 = *((void *)this + 33);
  int v79 = *(_DWORD *)(v78 + 236);
  *(_DWORD *)(v78 + 236) = 0;
  *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFFu;
  uint64_t v80 = *((void *)this + 33);
  int v81 = *(_DWORD *)(v80 + 236);
  *(_DWORD *)(v80 + 236) = v79;
  if (*((void *)this + 256) || *((_DWORD *)this + 550) || *((_DWORD *)this + 551))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 236, 0, 0xFFFFFFFFLL, 8, v81, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 240) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) = 0;
  uint64_t v82 = *((void *)this + 33);
  int v83 = *(_DWORD *)(v82 + 244);
  *(_DWORD *)(v82 + 244) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFFu;
  uint64_t v84 = *((void *)this + 33);
  int v85 = *(_DWORD *)(v84 + 244);
  *(_DWORD *)(v84 + 244) = v83;
  if (*((void *)this + 300) || *((_DWORD *)this + 638) || *((_DWORD *)this + 639))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 244, 0, 0xFFFFFFFFLL, 8, v85, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 248) = 0;
  uint64_t v86 = *((void *)this + 33);
  int v87 = *(_DWORD *)(v86 + 248);
  *(_DWORD *)(v86 + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFFu;
  uint64_t v88 = *((void *)this + 33);
  int v89 = *(_DWORD *)(v88 + 248);
  *(_DWORD *)(v88 + 248) = v87;
  if (*((void *)this + 322) || *((_DWORD *)this + 682) || *((_DWORD *)this + 683))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 248, 0, 0xFFFFFFFFLL, 8, v89, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
  uint64_t v90 = *((void *)this + 33);
  int v91 = *(_DWORD *)(v90 + 252);
  *(_DWORD *)(v90 + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFFu;
  uint64_t v92 = *((void *)this + 33);
  int v93 = *(_DWORD *)(v92 + 252);
  *(_DWORD *)(v92 + 252) = v91;
  if (*((void *)this + 344) || *((_DWORD *)this + 726) || *((_DWORD *)this + 727))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 252, 0, 0xFFFFFFFFLL, 8, v93, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 256) = 0;
  uint64_t v94 = *((void *)this + 33);
  int v95 = *(_DWORD *)(v94 + 256);
  *(_DWORD *)(v94 + 256) = 0;
  *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFFu;
  uint64_t v96 = *((void *)this + 33);
  int v97 = *(_DWORD *)(v96 + 256);
  *(_DWORD *)(v96 + 256) = v95;
  if (*((void *)this + 366) || *((_DWORD *)this + 770) || *((_DWORD *)this + 771))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 256, 0, 0xFFFFFFFFLL, 8, v97, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 260) = 0;
  uint64_t v98 = *((void *)this + 33);
  int v99 = *(_DWORD *)(v98 + 260);
  *(_DWORD *)(v98 + 260) = 0;
  *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFFu;
  uint64_t v100 = *((void *)this + 33);
  int v101 = *(_DWORD *)(v100 + 260);
  *(_DWORD *)(v100 + 260) = v99;
  uint64_t v102 = *((void *)this + 32);
  unsigned int v103 = *(_DWORD *)(v102 + 17568);
  uint64_t v104 = v102 + 176 * v103;
  if (*(void *)(v104 + 3072) || *(_DWORD *)(v102 + 176 * v103 + 3224) || *(_DWORD *)(v102 + 176 * v103 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v104 + 3072), 260, 0, 0xFFFFFFFFLL, 8, v101, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 264) = *(unsigned __int8 *)(*((void *)this + 33) + 267) << 24;
  uint64_t v105 = *((void *)this + 33);
  int v106 = *(_DWORD *)(v105 + 264);
  *(_DWORD *)(v105 + 264) = 0;
  *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFFu;
  uint64_t v107 = *((void *)this + 33);
  int v108 = *(_DWORD *)(v107 + 264);
  *(_DWORD *)(v107 + 264) = v106;
  uint64_t v109 = *((void *)this + 32);
  int v110 = *(_DWORD *)(v109 + 5724);
  uint64_t v111 = v109 + 176 * v110;
  if (*(void *)(v111 + 3776) || *(_DWORD *)(v109 + 176 * v110 + 3928) || *(_DWORD *)(v109 + 176 * v110 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v111 + 3776), 264, 0, 0xFFFFFFFFLL, 8, v108, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 268) = *(unsigned __int8 *)(*((void *)this + 33) + 271) << 24;
  uint64_t v112 = *((void *)this + 33);
  int v113 = *(_DWORD *)(v112 + 268);
  *(_DWORD *)(v112 + 268) = 0;
  *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFFu;
  uint64_t v114 = *((void *)this + 33);
  int v115 = *(_DWORD *)(v114 + 268);
  *(_DWORD *)(v114 + 268) = v113;
  uint64_t v116 = *((void *)this + 32);
  int v117 = *(_DWORD *)(v116 + 5720);
  uint64_t v118 = v116 + 176 * v117;
  if (*(void *)(v118 + 3776) || *(_DWORD *)(v116 + 176 * v117 + 3928) || *(_DWORD *)(v116 + 176 * v117 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v118 + 3776), 268, 0, 0xFFFFFFFFLL, 8, v115, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 272) = 0;
  uint64_t v119 = *((void *)this + 33);
  int v120 = *(_DWORD *)(v119 + 272);
  *(_DWORD *)(v119 + 272) = 0;
  *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFFu;
  uint64_t v121 = *((void *)this + 33);
  int v122 = *(_DWORD *)(v121 + 272);
  *(_DWORD *)(v121 + 272) = v120;
  uint64_t v123 = *((void *)this + 32);
  int v124 = *(_DWORD *)(v123 + 5716);
  uint64_t v125 = v123 + 176 * v124;
  if (*(void *)(v125 + 5360) || *(_DWORD *)(v123 + 176 * v124 + 5512) || *(_DWORD *)(v123 + 176 * v124 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v125 + 5360), 272, 0, 0xFFFFFFFFLL, 8, v122, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 276) = 0;
  uint64_t v126 = *((void *)this + 33);
  int v127 = *(_DWORD *)(v126 + 276);
  *(_DWORD *)(v126 + 276) = 0;
  *(_DWORD *)(*((void *)this + 33) + 276) ^= 0xFFFFFFu;
  uint64_t v128 = *((void *)this + 33);
  int v129 = *(_DWORD *)(v128 + 276);
  *(_DWORD *)(v128 + 276) = v127;
  uint64_t v130 = *((void *)this + 32);
  int v131 = *(_DWORD *)(v130 + 5712);
  uint64_t v132 = v130 + 176 * v131;
  if (*(void *)(v132 + 5360) || *(_DWORD *)(v130 + 176 * v131 + 5512) || *(_DWORD *)(v130 + 176 * v131 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v132 + 5360), 276, 0, 0xFFFFFFFFLL, 8, v129, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  uint64_t v133 = *((void *)this + 33);
  int v134 = *(_DWORD *)(v133 + 288);
  *(_DWORD *)(v133 + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) ^= 0x1FFFFFFu;
  uint64_t v135 = *((void *)this + 33);
  int v136 = *(_DWORD *)(v135 + 288);
  *(_DWORD *)(v135 + 288) = v134;
  uint64_t v137 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v137 || *(_DWORD *)(v137 + 152) || *(_DWORD *)(v137 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v137, 288, *(_DWORD *)(v137 + 52), 0xFFFFFFFFLL, 7, v136, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v138 = v3;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 296);
  *(_DWORD *)(v139 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0x1FFFFFFu;
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 296);
  *(_DWORD *)(v141 + 296) = v140;
  uint64_t v143 = *((void *)this + 32);
  uint64_t v144 = *(void *)(v143 + 376 * v6 + 5736);
  if (*(void *)v144 || *(_DWORD *)(v144 + 152) || *(_DWORD *)(v144 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v144, 296, *(_DWORD *)(v144 + 56), 0xFFFFFFFFLL, 7, v142, 4);
    if (result) {
      return result;
    }
    uint64_t v143 = *((void *)this + 32);
  }
  int v145 = *(_DWORD *)(v143 + 2648);
  uint64_t v146 = *((void *)this + 33);
  int v147 = *(_DWORD *)(v146 + 284);
  *(_DWORD *)(v146 + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 284) ^= 0x1FFFFFFu;
  uint64_t v148 = *((void *)this + 33);
  int v149 = *(_DWORD *)(v148 + 284);
  *(_DWORD *)(v148 + 284) = v147;
  uint64_t v150 = *((void *)this + 32);
  if (v145 == 1)
  {
    uint64_t v151 = *(void *)(v150 + 376 * v6 + 5736);
    if (*(void *)v151 || *(_DWORD *)(v151 + 152) || *(_DWORD *)(v151 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v151, 284, *(_DWORD *)(v151 + 64), 0xFFFFFFFFLL, 7, v149, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v152 = *((void *)this + 33);
    int v153 = *(_DWORD *)(v152 + 292);
    *(_DWORD *)(v152 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0x1FFFFFFu;
    uint64_t v154 = *((void *)this + 33);
    int v155 = *(_DWORD *)(v154 + 292);
    *(_DWORD *)(v154 + 292) = v153;
    uint64_t v156 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v156 || *(_DWORD *)(v156 + 152) || *(_DWORD *)(v156 + 156))
    {
      int v157 = *(_DWORD *)(v156 + 68);
      v158 = this;
      goto LABEL_115;
    }
  }
  else
  {
    uint64_t v159 = v150 + 376 * v6;
    if (*(void *)(v159 + 5752) || *(_DWORD *)(v150 + 376 * v6 + 5904) || *(_DWORD *)(v150 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v159 + 5752), 284, 0, 0xFFFFFFFFLL, 7, v149, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v160 = *((void *)this + 33);
    int v161 = *(_DWORD *)(v160 + 292);
    *(_DWORD *)(v160 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0x1FFFFFFu;
    uint64_t v162 = *((void *)this + 33);
    int v155 = *(_DWORD *)(v162 + 292);
    *(_DWORD *)(v162 + 292) = v161;
    uint64_t v163 = *((void *)this + 32);
    uint64_t v164 = v163 + 376 * v6;
    if (*(void *)(v164 + 5928) || *(_DWORD *)(v163 + 376 * v6 + 6080) || *(_DWORD *)(v163 + 376 * v6 + 6084))
    {
      uint64_t v156 = v164 + 5928;
      v158 = this;
      int v157 = 0;
LABEL_115:
      uint64_t result = CAHDec::addToPatcherList((uint64_t)v158, (void *)v156, 292, v157, 0xFFFFFFFFLL, 7, v155, 4);
      if (result) {
        return result;
      }
    }
  }
  if ((v232 & 1) == 0)
  {
    uint64_t v196 = 0;
    uint64_t v197 = 17424;
    do
    {
      uint64_t v198 = *(void *)(*(void *)(*((void *)this + 32) + v197) + 40);
      *(_DWORD *)(*((void *)this + 33) + v196 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v196 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v196 + 336) = 0;
      *(_DWORD *)(*((void *)this + 33) + v196 + 348) = 0;
      uint64_t v199 = *((void *)this + 33) + v196;
      int v200 = *(_DWORD *)(v199 + 324);
      *(_DWORD *)(v199 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v196 + 324) ^= 0x1FFFFFFu;
      uint64_t v201 = *((void *)this + 33) + v196;
      int v202 = *(_DWORD *)(v201 + 324);
      *(_DWORD *)(v201 + 324) = v200;
      uint64_t v203 = *(void *)(v198 + 8);
      if (*(void *)v203 || *(_DWORD *)(v203 + 152) || *(_DWORD *)(v203 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v203, (int)v196 + 324, *(_DWORD *)(v203 + 52), 0xFFFFFFFFLL, 7, v202, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v204 = *((void *)this + 33) + v196;
      int v205 = *(_DWORD *)(v204 + 348);
      *(_DWORD *)(v204 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v196 + 348) ^= 0x1FFFFFFu;
      uint64_t v206 = *((void *)this + 33) + v196;
      int v207 = *(_DWORD *)(v206 + 348);
      *(_DWORD *)(v206 + 348) = v205;
      uint64_t v208 = *(void *)(v198 + 8);
      if (*(void *)v208 || *(_DWORD *)(v208 + 152) || *(_DWORD *)(v208 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v208, (int)v196 + 348, *(_DWORD *)(v208 + 56), 0xFFFFFFFFLL, 7, v207, 4);
        if (result) {
          return result;
        }
      }
      int v209 = *(_DWORD *)(*((void *)this + 32) + 2648);
      uint64_t v210 = *((void *)this + 33) + v196;
      int v211 = *(_DWORD *)(v210 + 312);
      *(_DWORD *)(v210 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v196 + 312) ^= 0x1FFFFFFu;
      uint64_t v212 = *((void *)this + 33) + v196;
      int v213 = *(_DWORD *)(v212 + 312);
      *(_DWORD *)(v212 + 312) = v211;
      if (v209 == 1)
      {
        uint64_t v214 = *(void *)(v198 + 8);
        if (*(void *)v214 || *(_DWORD *)(v214 + 152) || *(_DWORD *)(v214 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v214, (int)v196 + 312, *(_DWORD *)(v214 + 64), 0xFFFFFFFFLL, 7, v213, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v215 = *((void *)this + 33) + v196;
        int v216 = *(_DWORD *)(v215 + 336);
        *(_DWORD *)(v215 + 336) = 0;
        *(_DWORD *)(*((void *)this + 33) + v196 + 336) ^= 0x1FFFFFFu;
        uint64_t v217 = *((void *)this + 33) + v196;
        int v218 = *(_DWORD *)(v217 + 336);
        *(_DWORD *)(v217 + 336) = v216;
        uint64_t v219 = *(void *)(v198 + 8);
        if (*(void *)v219 || *(_DWORD *)(v219 + 152) || *(_DWORD *)(v219 + 156))
        {
          int v220 = *(_DWORD *)(v219 + 68);
          int v221 = v196 + 336;
          v222 = this;
          goto LABEL_176;
        }
      }
      else
      {
        if (*(void *)(v198 + 24) || *(_DWORD *)(v198 + 176) || *(_DWORD *)(v198 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v198 + 24), (int)v196 + 312, 0, 0xFFFFFFFFLL, 7, v213, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v223 = *((void *)this + 33) + v196;
        int v224 = *(_DWORD *)(v223 + 336);
        *(_DWORD *)(v223 + 336) = 0;
        *(_DWORD *)(*((void *)this + 33) + v196 + 336) ^= 0x1FFFFFFu;
        uint64_t v225 = *((void *)this + 33) + v196;
        int v218 = *(_DWORD *)(v225 + 336);
        *(_DWORD *)(v225 + 336) = v224;
        uint64_t v219 = v198 + 200;
        if (*(void *)(v198 + 200) || *(_DWORD *)(v198 + 352) || *(_DWORD *)(v198 + 356))
        {
          int v221 = v196 + 336;
          v222 = this;
          int v220 = 0;
LABEL_176:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v222, (void *)v219, v221, v220, 0xFFFFFFFFLL, 7, v218, 4);
          if (result) {
            return result;
          }
        }
      }
      v197 += 8;
      v196 += 4;
    }
    while (v196 != 12);
  }
  unsigned int v165 = subWidth[*(int *)(*(void *)(*((void *)this + 32) + 17560) + 4)];
  *(_DWORD *)(*((void *)this + 33) + 360) = 0;
  *(_DWORD *)(*((void *)this + 33) + 364) = 0;
  *(_DWORD *)(*((void *)this + 33) + 368) = 0;
  *(_DWORD *)(*((void *)this + 33) + 372) = 0;
  if (*(_DWORD *)(*((void *)this + 32) + 2644))
  {
    uint64_t v166 = *((void *)this + 33);
    int v167 = *(_DWORD *)(v166 + 360);
    *(_DWORD *)(v166 + 360) = 0;
    *(_DWORD *)(*((void *)this + 33) + 360) ^= 0xFFFFFFu;
    uint64_t v168 = *((void *)this + 33);
    int v169 = *(_DWORD *)(v168 + 360);
    *(_DWORD *)(v168 + 360) = v167;
    uint64_t v170 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v170 || *(_DWORD *)(v170 + 152) || *(_DWORD *)(v170 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v170, 360, *(_DWORD *)(v170 + 52), 0xFFFFFFFFLL, 8, v169, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v171 = *((void *)this + 33);
    int v172 = *(_DWORD *)(v171 + 364);
    *(_DWORD *)(v171 + 364) = 0;
    *(_DWORD *)(*((void *)this + 33) + 364) ^= 0xFFFFFFu;
    uint64_t v173 = *((void *)this + 33);
    int v174 = *(_DWORD *)(v173 + 364);
    *(_DWORD *)(v173 + 364) = v172;
    uint64_t v175 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v175 || *(_DWORD *)(v175 + 152) || *(_DWORD *)(v175 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v175, 364, *(_DWORD *)(v175 + 56), 0xFFFFFFFFLL, 8, v174, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v176 = *((void *)this + 33);
    int v177 = *(_DWORD *)(v176 + 368);
    *(_DWORD *)(v176 + 368) = 0;
    *(_DWORD *)(*((void *)this + 33) + 368) ^= 0xC0000000;
    uint64_t v178 = *((void *)this + 33);
    int v179 = *(_DWORD *)(v178 + 368);
    *(_DWORD *)(v178 + 368) = v177;
    uint64_t v180 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v180 || *(_DWORD *)(v180 + 152) || *(_DWORD *)(v180 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v180, 368, *(_DWORD *)(v180 + 52), 192, 6, v179, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v181 = *((void *)this + 33);
    int v182 = *(_DWORD *)(v181 + 372);
    *(_DWORD *)(v181 + 372) = 0;
    *(_DWORD *)(*((void *)this + 33) + 372) ^= 0xC0000000;
    uint64_t v183 = *((void *)this + 33);
    int v184 = *(_DWORD *)(v183 + 372);
    *(_DWORD *)(v183 + 372) = v182;
    uint64_t v185 = *((void *)this + 32);
    uint64_t v186 = *(void *)(v185 + 11768);
    if (*(void *)v186 || *(_DWORD *)(v186 + 152) || *(_DWORD *)(v186 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v186, 372, *(_DWORD *)(v186 + 56), 192, 6, v184, 4);
      if (result) {
        return result;
      }
      uint64_t v185 = *((void *)this + 32);
    }
    if (*(unsigned char *)(v185 + 8))
    {
      *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33) + 368) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(v185 + 11768) + 76) >> 6) & 0xFFF));
      v187 = (_DWORD *)(*(void *)(*((void *)this + 32) + 11768) + 80);
    }
    else
    {
      if (CAHDecSalviaLgh::getSWRStride(this, *(unsigned __int16 *)(v138 + 148) + 1, *(unsigned __int8 *)(v4 + 105) - 8, *(unsigned __int8 *)(v4 + 105) - 8, v165))return 0xFFFFFFFFLL; {
      *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33) + 368) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 783) >> 6) & 0xFFF));
      }
      v187 = (_DWORD *)((char *)this + 3136);
    }
    *(_DWORD *)(*((void *)this + 33) + 372) = *(_DWORD *)(*((void *)this + 33) + 372) & 0xFFFF8003 | (4 * ((*v187 >> 6) & 0x1FFF));
  }
  if (v229 < 2)
  {
    uint64_t result = 0;
    uint64_t v226 = *((void *)this + 33);
    *(_DWORD *)(v226 + 376) = 65537;
    *(_WORD *)(v226 + 380) = 0;
    *(_WORD *)(v226 + 382) = *(_DWORD *)(v4 + 108) >> 6;
    *(_WORD *)(v226 + 510) = 0;
    *(_WORD *)(v226 + 512) = *(_DWORD *)(v4 + 112) >> 6;
  }
  else
  {
    uint64_t v188 = *((void *)this + 33);
    *(_WORD *)(v188 + 376) = v231;
    if (v230 >= 1)
    {
      uint64_t v189 = v230;
      v190 = (unsigned char *)(*(void *)(*((void *)this + 32) + 17560) + 2786);
      do
      {
        if (!*v190) {
          *(_WORD *)(v188 + 2 * v228 + 510) = *(_DWORD *)(v190 - 26) >> 3;
        }
        v190 += 1792;
        --v189;
      }
      while (v189);
    }
    *(_WORD *)(v188 + 378) = v230;
    if (v231 < 1)
    {
      return 0;
    }
    else
    {
      v191 = (_WORD *)(v188 + 2 * v228 + 380);
      uint64_t v192 = v231;
      uint64_t v193 = *(void *)(*((void *)this + 32) + 17560) + 2786;
      v194 = (unsigned __int8 *)v193;
      uint64_t result = 0;
      do
      {
        int v195 = *v194;
        v194 += 28;
        if (!v195) {
          _WORD *v191 = *(_DWORD *)(v193 - 18) >> 3;
        }
        uint64_t v193 = (uint64_t)v194;
        --v192;
      }
      while (v192);
    }
  }
  return result;
}

uint64_t CAHDecSalviaLgh::getSWRStride(CAHDecSalviaLgh *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *(void *)((char *)this + 3132) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 784) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        unsigned int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecSalviaLgh::getTileStartCTU(CAHDecSalviaLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 376);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecSalviaLgh::getTileEndCTU(CAHDecSalviaLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 376);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecSalviaLgh::populateAvdWork(CAHDecSalviaLgh *this)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  uint64_t v38 = *(void *)(v2 + 16);
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  unint64_t v3 = *(unsigned int *)(v2 + 312);
  if (!v3)
  {
    LOWORD(v8) = 0;
    goto LABEL_34;
  }
  uint64_t v5 = 0;
  uint64_t v39 = 0;
  int v6 = 0;
  LODWORD(v7) = 0;
  int v8 = 0;
  uint64_t v9 = v1 + 524;
  unint64_t v10 = *(unsigned int *)(v2 + 316);
  unint64_t v11 = v10;
  uint64_t v37 = v9;
  while (1)
  {
    uint64_t v36 = v5;
    if (v11) {
      break;
    }
LABEL_31:
    uint64_t v5 = v36 + 1792;
    if (++v39 >= v3)
    {
      uint64_t v1 = *((void *)this + 33);
LABEL_34:
      uint64_t result = 0;
      *(_WORD *)(v1 + 26) = v8;
      *(_DWORD *)(v1 + 32) = 524;
      return result;
    }
  }
  unint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *((void *)this + 32);
    uint64_t v14 = *(void *)(v13 + 17560);
    uint64_t v15 = v14 + v5;
    if (*(unsigned char *)(v14 + v5 + 2786)) {
      goto LABEL_30;
    }
    *(_WORD *)(v9 + 4) = v8;
    *(_WORD *)(v9 + 6) = 0;
    *(_WORD *)(v9 + 10) = v6;
    if (!CAVDLghDecoder::GetTileMemInfo(v13, v38 + *(unsigned int *)(v15 + 2780), &v43, &v42)) {
      return 0xFFFFFFFFLL;
    }
    int v41 = v7;
    unsigned int v16 = (void *)v43;
    if (*(void *)v43 || *(_DWORD *)(v43 + 152) || *(_DWORD *)(v43 + 156))
    {
      int v40 = v8;
      int v17 = v6;
      uint64_t v18 = v2;
      int v19 = v42;
      if (HIDWORD(v42) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        int v45 = "populateAvdWork";
        __int16 v46 = 1024;
        int v47 = 871;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        int v19 = v42;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v16, 36 * v41 + 544, v19, 0xFFFFFFFFLL, 0, -1, 4);
      uint64_t v2 = v18;
      int v6 = v17;
      int v8 = v40;
      if (result) {
        return result;
      }
    }
    unsigned int v21 = (_DWORD *)(v14 + v5);
    *(_DWORD *)(v9 + 24) = *(_DWORD *)(v14 + v5 + 2776);
    int v22 = *(_DWORD *)(v15 + 2760);
    int v23 = v22 + 7;
    if (v22 >= 0) {
      int v23 = *(_DWORD *)(v15 + 2760);
    }
    int v24 = v21[692];
    *(_DWORD *)(v9 + 28) = (v23 << 13) & 0xFFFF0000 | (v24 / 8);
    int v25 = v21[691];
    int v27 = v25 - 1;
    BOOL v26 = v25 < 1;
    int v28 = v25 + 6;
    if (!v26) {
      int v28 = v27;
    }
    unsigned int v29 = (v28 << 13) & 0xFFFF0000;
    int v30 = v21[693];
    int v31 = v30 - 1;
    BOOL v26 = v30 < 1;
    int v32 = v30 + 6;
    if (!v26) {
      int v32 = v31;
    }
    *(_DWORD *)(v9 + 32) = v29 | (v32 >> 3);
    if (v22 + v24) {
      __int16 v33 = 4;
    }
    else {
      __int16 v33 = 5;
    }
    *(_WORD *)(v9 + 12) = v33;
    unint64_t v3 = *(unsigned int *)(v2 + 312);
    unint64_t v10 = *(unsigned int *)(v2 + 316);
    if (v12 == v10 && v39 == v3) {
      __int16 v35 = 5;
    }
    else {
      __int16 v35 = 4;
    }
    *(_WORD *)(v9 + 14) = v35;
    ++v6;
    ++v8;
    v9 += 36;
    unint64_t v7 = 0x8E38E38E38E38E39 * ((v9 - v37) >> 2);
LABEL_30:
    ++v12;
    v5 += 28;
    unint64_t v11 = v10;
    if (v12 >= v10) {
      goto LABEL_31;
    }
  }
}

uint64_t CAHDecSalviaLgh::allocWorkBuf_SPS(CAHDecSalviaLgh *this, int *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = *a2 + 31;
  if (*a2 < -31) {
    int v5 = *a2 + 62;
  }
  unsigned int v6 = v5 >> 5;
  int v7 = v4 + 31;
  if (v4 < -31) {
    int v7 = v4 + 62;
  }
  unsigned int v8 = v7 >> 5;
  unsigned int v9 = 32 - __clz(v6 - 1);
  if (v6 >= 2) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  unsigned int v11 = 32 - __clz(v8 - 1);
  if (v8 >= 2) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unsigned int v13 = ((32 << (v12 + v10)) + 127) & 0xFFFFFF80;
  int v14 = 2 * v3 + 62;
  if (2 * v3 >= -31) {
    int v14 = 2 * v3 + 31;
  }
  unsigned int v15 = v14 >> 5;
  int v16 = v4 + 15;
  if (v4 < -15) {
    int v16 = v4 + 30;
  }
  unsigned int v17 = v16 >> 4;
  unsigned int v18 = 32 - __clz(v15 - 1);
  if (v15 >= 2) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  unsigned int v20 = 32 - __clz(v17 - 1);
  if (v17 >= 2) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  *((_DWORD *)this + 776) = v13;
  *((_DWORD *)this + 777) = ((8 << (v19 + v21)) + 127) & 0xFFFFFF80;
  unsigned int v22 = ((v4 + 63) >> 6) * ((v3 + 63) >> 6);
  *((_DWORD *)this + 781) = 576 * v22;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_28:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      char v29 = v28;
      uint64_t v30 = *((unsigned int *)this + 781);
      if (v30
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 176 * v27 + 5360), v30, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1100;
        __int16 v39 = 2080;
        int v40 = "MvColo";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v29 & 1) != 0);
    unsigned int v31 = 24 * v22;
    *((_DWORD *)this + 785) = 24 * v22;
    uint64_t v32 = 3776;
    if (!v31) {
      goto LABEL_34;
    }
LABEL_33:
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v32), v31, 7, 1, 0))
    {
LABEL_34:
      while (v32 != 5008)
      {
        unsigned int v31 = *((_DWORD *)this + 785);
        v32 += 176;
        if (v31) {
          goto LABEL_33;
        }
      }
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1106;
    __int16 v39 = 2080;
    int v40 = "segMap";
    __int16 v33 = &_os_log_internal;
  }
  else
  {
    uint64_t v23 = 14608;
    uint64_t v24 = 16;
    while (1)
    {
      uint64_t v25 = *((unsigned int *)this + 776);
      if (v25
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23 - 2816), v25, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1084;
        __int16 v39 = 2080;
        int v40 = "HdrY";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      uint64_t v26 = *((unsigned int *)this + 777);
      if (v26)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23), v26, 7, 1, 0))break; {
      }
        }
      v23 += 176;
      if (!--v24) {
        goto LABEL_28;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1089;
    __int16 v39 = 2080;
    int v40 = "HdrC";
    __int16 v33 = &_os_log_internal;
  }
LABEL_46:
  _os_log_impl(&dword_223977000, v33, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v35, 0x1Cu);
LABEL_47:
  (*(void (**)(CAHDecSalviaLgh *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecSalviaLgh::allocWorkBuf_PPS(CAHDecSalviaLgh *this, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = *(void *)(v5 + 17560);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 100);
  unsigned int v9 = (*(unsigned __int8 *)(v6 + 105) + 1) & 0x1FE;
  if (v7 == 3) {
    int v10 = 48;
  }
  else {
    int v10 = 32;
  }
  if (!v7) {
    int v10 = 16;
  }
  int v12 = *(_DWORD *)(v6 + 108);
  int v11 = *(_DWORD *)(v6 + 112);
  unsigned int v13 = (v12 + 15) >> 4;
  int v14 = ~(-1 << *(_DWORD *)(v6 + 96));
  signed int v15 = v13 * ((v10 * v9) >> 3) + (v14 << 7);
  if (v15)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 117, v15, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1182;
        __int16 v27 = 2080;
        char v28 = "IpAbove";
        int v16 = &_os_log_internal;
LABEL_34:
        _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  int v17 = 16 * v9;
  if ((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 != 192)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 128, (int)((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 - 192), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1185;
        __int16 v27 = 2080;
        char v28 = "LfAbovePix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
LABEL_35:
      (*(void (**)(CAHDecSalviaLgh *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  signed int v18 = 288 * ((v12 + 63) >> 6) + (v14 << 7);
  if (v18)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 139, v18, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1191;
        __int16 v27 = 2080;
        char v28 = "LfAboveInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  unsigned int v19 = (v11 + 7) >> 3;
  if (v19 * v17)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 150, (int)(v19 * v17), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1197;
        __int16 v27 = 2080;
        char v28 = "LfLeftPix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  uint64_t v20 = ((v11 + 63) >> 2) & 0x3FFFFFF0;
  if (v20)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 161, v20, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1205;
        __int16 v27 = 2080;
        char v28 = "LfLeftInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 172, (int)(24 * v13 + 30), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 1213;
      __int16 v27 = 2080;
      char v28 = "SwLeftPix";
      int v16 = &_os_log_internal;
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  int v22 = 192 * v9 + (v19 + 2) * (((v9 >> 1) << 8) | 8);
  if (!v22) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 183, v22, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 1219;
    __int16 v27 = 2080;
    char v28 = "AZLeftPix";
    int v16 = &_os_log_internal;
    goto LABEL_34;
  }
  return result;
}

uint64_t CAHDecSalviaLgh::freeWorkBuf_SPS(CAHDecSalviaLgh *this)
{
  uint64_t result = *((void *)this + 32);
  if (!*(_DWORD *)(result + 2648))
  {
    uint64_t v3 = 14608;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = (uint64_t *)(result + v3 - 2816);
      if (*v5)
      {
        CAVDDecoder::deallocAVDMem(result, v5);
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3 - 2816) = 0;
      }
      if (*(void *)(result + v3))
      {
        CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + v3));
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3) = 0;
      }
      v3 += 176;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = result + 176 * v6;
    if (*(void *)(v9 + 5360))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(v9 + 5360));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + 176 * v6 + 5360) = 0;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  for (uint64_t i = 3776; i != 5184; i += 176)
  {
    if (*(void *)(result + i))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + i));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + i) = 0;
    }
  }
  return result;
}

uint64_t *CAHDecSalviaLgh::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[256])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 256);
    v2[256] = 0;
  }
  if (v2[278])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 278);
    v2[278] = 0;
  }
  if (v2[234])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 234);
    v2[234] = 0;
  }
  if (v2[300])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 300);
    v2[300] = 0;
  }
  if (v2[322])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 322);
    v2[322] = 0;
  }
  if (v2[344])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 344);
    v2[344] = 0;
  }
  if (v2[366])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 366);
    v2[366] = 0;
  }
  return this;
}

uint64_t CAHDecSalviaLgh::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 3120) = a2;
  return this;
}

uint64_t CAHDecSalviaLgh::initPicture(CAHDecSalviaLgh *this)
{
  return 0;
}

uint64_t CAHDecSalviaLgh::populateSlices(CAHDecSalviaLgh *this)
{
  return 0;
}

uint64_t CAHDecSalviaLgh::getTileIdxAbove(CAHDecSalviaLgh *this)
{
  return 0;
}

uint64_t CAHDecSalviaLgh::decodeBuffer(CAHDecSalviaLgh *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecSalviaLgh::decodeBufferSize(CAHDecSalviaLgh *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecSalviaLgh::decHdrYLinAddr(CAHDecSalviaLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 11792);
}

uint64_t CAHDecSalviaLgh::decHdrCLinAddr(CAHDecSalviaLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 14608);
}

uint64_t CAHDecSalviaLgh::decHdrYSize(CAHDecSalviaLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 11836);
}

uint64_t CAHDecSalviaLgh::decHdrCSize(CAHDecSalviaLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 14652);
}

uint64_t CAHDecSalviaLgh::decHdrYStride(CAHDecSalviaLgh *this)
{
  return *((unsigned int *)this + 778);
}

uint64_t CAHDecSalviaLgh::decHdrCStride(CAHDecSalviaLgh *this)
{
  return *((unsigned int *)this + 779);
}

void CAHDecSalviaLgh::clearSegBuffer(CAHDecSalviaLgh *this)
{
}

uint64_t lgh_fb_rel_cb(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 40);
  (*(void (**)(uint64_t, void, void))(*(void *)a2 + 40))(a2, *v3, 0);
  uint64_t v4 = v3[1];
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40);

  return v5(a2, v4, 1);
}

unsigned __int8 *CAVDLghDecoder::getTileAddr(CAVDLghDecoder *this, unsigned __int8 *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 2834))
  {
    uint64_t v3 = (void *)*((void *)this + 355);
    uint64_t v4 = &a2[-*v3];
    uint64_t v5 = &v4[v3[2]];
    if ((unint64_t)v5 >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      int v11 = "getTileAddr";
      __int16 v12 = 1024;
      int v13 = 139;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v10, 0x12u);
      uint64_t v6 = (void *)(*((void *)this + 355) + 16);
      return &v4[*v6];
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 131);
    uint64_t v8 = *(void *)(v7 + 24);
    uint64_t v6 = (void *)(v7 + 24);
    uint64_t v4 = &a2[-*(v6 - 2)];
    uint64_t v5 = &v4[v8];
    if ((unint64_t)&v4[v8] >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      int v11 = "getTileAddr";
      __int16 v12 = 1024;
      int v13 = 156;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v10, 0x12u);
      return &v4[*v6];
    }
  }
  return v5;
}

uint64_t CAVDLghDecoder::GetTileMemInfo(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (*(unsigned char *)(a1 + 2834)) {
    uint64_t v4 = *(void **)(a1 + 2840);
  }
  else {
    uint64_t v4 = (void *)(*(void *)(a1 + 1048) + 8);
  }
  *a4 = a2 - *v4;
  *a3 = v4;
  return 1;
}

void CAVDLghDecoder::CAVDLghDecoder(CAVDLghDecoder *this, void *a2, int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char *)this + 17552;
  CAVDDecoder::CAVDDecoder(this, a2, a3);
  *(void *)uint64_t v7 = &unk_26D73EDB8;
  *(void *)(v7 + 17424) = 0;
  *(_OWORD *)(v7 + 17432) = 0u;
  *(_DWORD *)uint64_t v6 = 0;
  *(void *)(v7 + 17560) = 0;
  *((_DWORD *)v6 + 4) = 0;
  v6[1248] = 0;
  *(_OWORD *)(v7 + 5712) = 0u;
  *(_OWORD *)(v7 + 17576) = 0u;
  *(void *)(v7 + 18812) = 0;
  *(void *)(v7 + 18820) = 0;
  *(void *)(v7 + 18804) = 0;
  *(void *)(v7 + 2344) = a2;
  if (CAVDLghDecoder::VAInit((CAVDLghDecoder *)v7))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      int v11 = "CAVDLghDecoder::CAVDLghDecoder(void *, uint32_t, BOOL)";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): VAInit failed", (uint8_t *)&v10, 0xCu);
    }
    int v8 = 301;
    goto LABEL_40;
  }
  v6[1248] = 1;
  *((_DWORD *)this + 661) = 0;
  *((_DWORD *)v6 + 316) = 0;
  *(_OWORD *)((char *)this + 18344) = 0u;
  *(_OWORD *)((char *)this + 18360) = 0u;
  *(_OWORD *)((char *)this + 18376) = 0u;
  *(_OWORD *)((char *)this + 18392) = 0u;
  *(_OWORD *)((char *)this + 18408) = 0u;
  *(_OWORD *)((char *)this + 18424) = 0u;
  *(_OWORD *)((char *)this + 18440) = 0u;
  *(_OWORD *)((char *)this + 18456) = 0u;
  *(_OWORD *)((char *)this + 18472) = 0u;
  *(_OWORD *)((char *)this + 18488) = 0u;
  *(_OWORD *)((char *)this + 18504) = 0u;
  *(_OWORD *)((char *)this + 18520) = 0u;
  *(_OWORD *)((char *)this + 18536) = 0u;
  *(_OWORD *)((char *)this + 18552) = 0u;
  *(_OWORD *)((char *)this + 18568) = 0u;
  *(_OWORD *)((char *)this + 18584) = 0u;
  *(_OWORD *)((char *)this + 18600) = 0u;
  *(_OWORD *)((char *)this + 18616) = 0u;
  *(_OWORD *)((char *)this + 18632) = 0u;
  *(_OWORD *)((char *)this + 18648) = 0u;
  *(_OWORD *)((char *)this + 18664) = 0u;
  *(_OWORD *)((char *)this + 18680) = 0u;
  *((_DWORD *)this + 755) = 0;
  *(_OWORD *)((char *)this + 3004) = 0u;
  bzero(*((void **)this + 2351), 0xB08uLL);
  *((_OWORD *)this + 735) = 0u;
  bzero(*((void **)this + 2195), 0x26C8uLL);
  pthread_mutex_init((pthread_mutex_t *)this + 42, 0);
  pthread_cond_init((pthread_cond_t *)((char *)this + 2752), 0);
  if (a3 <= 323)
  {
    if (a3 <= 27)
    {
      switch(a3)
      {
        case 14:
          CloverLghDecoder = createCloverLghDecoder(this);
          goto LABEL_34;
        case 21:
          CloverLghDecoder = createSalviaLghDecoder(this);
          goto LABEL_34;
        case 26:
          CloverLghDecoder = createViolaLghDecoder(this);
          goto LABEL_34;
      }
    }
    else if (a3 > 307)
    {
      if (a3 == 308)
      {
        CloverLghDecoder = createDahliaLghDecoder(this);
        goto LABEL_34;
      }
      if (a3 == 316)
      {
        CloverLghDecoder = (CAHDecCloverLgh *)createRadishLghDecoder(this);
        goto LABEL_34;
      }
    }
    else
    {
      if (a3 == 28)
      {
        CloverLghDecoder = createLotusLghDecoder(this);
        goto LABEL_34;
      }
      if (a3 == 301)
      {
        CloverLghDecoder = (CAHDecCloverLgh *)createLilyDLghDecoder(this);
        goto LABEL_34;
      }
    }
    goto LABEL_32;
  }
  if (a3 <= 403)
  {
    if ((a3 - 400) >= 3)
    {
      if (a3 == 324)
      {
        CloverLghDecoder = createClaryLghDecoder(this);
        goto LABEL_34;
      }
      goto LABEL_32;
    }
LABEL_23:
    CloverLghDecoder = createIxoraLghDecoder(this);
    goto LABEL_34;
  }
  switch(a3)
  {
    case 404:
      goto LABEL_23;
    case 408:
      CloverLghDecoder = createCatnipLghDecoder(this);
      goto LABEL_34;
    case 416:
      goto LABEL_33;
  }
LABEL_32:
  if (*((_DWORD *)this + 588) == 417)
  {
LABEL_33:
    CloverLghDecoder = createDaisyLghDecoder(this);
    goto LABEL_34;
  }
  if (a3 == 424)
  {
    CloverLghDecoder = createTansyLghDecoder(this);
    goto LABEL_34;
  }
  if ((a3 & 0xFFFFFFFE) == 0x1B0)
  {
    CloverLghDecoder = createHibiscusLghDecoder(this);
    goto LABEL_34;
  }
  if (a3 == 440)
  {
    CloverLghDecoder = createThymeLghDecoder(this);
LABEL_34:
    *((void *)this + 262) = CloverLghDecoder;
    if (CloverLghDecoder
      && (*(uint64_t (**)(CAHDecCloverLgh *))(*(void *)CloverLghDecoder + 160))(CloverLghDecoder))
    {
      *((void *)this + 2349) = 0;
      *(_OWORD *)((char *)this + 18760) = 0u;
      *(_OWORD *)((char *)this + 18776) = 0u;
      *(_OWORD *)((char *)this + 18728) = 0u;
      *(_OWORD *)((char *)this + 18744) = 0u;
      *(_OWORD *)((char *)this + 18696) = 0u;
      *(_OWORD *)((char *)this + 18712) = 0u;
      operator new();
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: CAVDLghDecoder error allocating decodeBuffer or m_pAHwDecoder is NULL!", (uint8_t *)&v10, 2u);
    }
    int v8 = 304;
    goto LABEL_40;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315394;
    int v11 = "CAVDLghDecoder";
    __int16 v12 = 1024;
    int v13 = a3;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): LGHD Not supported on  device type... %d", (uint8_t *)&v10, 0x12u);
  }
  *((void *)this + 262) = 0;
  int v8 = 312;
LABEL_40:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315394;
    int v11 = "CAVDLghDecoder::CAVDLghDecoder(void *, uint32_t, BOOL)";
    __int16 v12 = 1024;
    int v13 = v8;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): error creating context %d", (uint8_t *)&v10, 0x12u);
  }
  *((_DWORD *)this + 705) = v8;
}

void sub_223A70F7C(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v2, 0x10A1C40753EFFC5);
  CAVDDecoder::~CAVDDecoder(v1);
  _Unwind_Resume(a1);
}

uint64_t CAVDLghDecoder::VAInit(CAVDLghDecoder *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = malloc_type_calloc(0x26C8uLL, 1uLL, 0x7EF07070uLL);
  *((void *)this + 2195) = v2;
  if (v2)
  {
    uint64_t v3 = malloc_type_calloc(0xB08uLL, 1uLL, 0xB709EEAEuLL);
    *((void *)this + 2351) = v3;
    if (v3) {
      return 0;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      int v8 = "int CAVDLghDecoder::VAInit()";
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s(): m_out_q allocation failed";
      goto LABEL_8;
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    int v8 = "int CAVDLghDecoder::VAInit()";
    uint64_t v5 = &_os_log_internal;
    uint64_t v6 = "AppleAVD: ERROR: %s(): m_cur_pic_info allocation failed";
LABEL_8:
    _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v7, 0xCu);
  }
  return 304;
}

void CAVDLghDecoder::~CAVDLghDecoder(CAVDLghDecoder *this)
{
  *(void *)this = &unk_26D73EDB8;
  pthread_mutex_destroy((pthread_mutex_t *)this + 42);
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 2752));
  for (uint64_t i = 24; i != 1056; i += 8)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    if (v3)
    {
      CAVDDecoder::unmapAVDMemory((uint64_t)this, *((mach_port_t ***)this + 293), (_OWORD *)(v3 + 8), 1);
      free((void *)v3);
    }
    *(void *)((char *)this + i) = 0;
  }
  do
  {
    uint64_t v4 = *(void *)((char *)this + i);
    if (v4)
    {
      CAVDDecoder::unmapAVDMemory((uint64_t)this, *((mach_port_t ***)this + 293), (_OWORD *)(v4 + 8), *(unsigned char *)(v4 + 169));
      free((void *)v4);
    }
    *(void *)((char *)this + i) = 0;
    i += 8;
  }
  while (i != 2088);
  uint64_t v5 = *((void *)this + 262);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 136))(v5);
    (*(void (**)(void, void))(**((void **)this + 262) + 152))(*((void *)this + 262), 0);
    uint64_t v6 = *((void *)this + 262);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *((void *)this + 262) = 0;
  }
  *((void *)this + 2290) = 0;
  uint64_t v7 = *((void *)this + 2197);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 2197) = 0;
  uint64_t v8 = *((void *)this + 2198);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 2198) = 0;
  free(*((void **)this + 2195));
  *((void *)this + 2195) = 0;
  free(*((void **)this + 2351));
  *((void *)this + 2351) = 0;

  CAVDDecoder::~CAVDDecoder(this);
}

{
  uint64_t vars8;

  CAVDLghDecoder::~CAVDLghDecoder(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAVDLghDecoder::VAStartDecode(CAVDLghDecoder *this, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 2195);
  *(void *)uint64_t v7 = 0;
  *(void *)uint64_t v8 = 0;
  *((unsigned char *)this + 2824) = 0;
  AppleAVDCommandBuilder::getWidthAndHeight(*((void *)this + 293), &v8[1], v8);
  unsigned int v4 = v8[0];
  unsigned int v5 = v8[1];
  if (v8[0] * v8[1] < 0x2200001)
  {
    AppleAVDCommandBuilder::getLumaDepthMinus8(*((void *)this + 293), &v7[1]);
    AppleAVDCommandBuilder::getChromaFormat(*((void *)this + 293), v7);
    *((_DWORD *)this + 756) = v8[1];
    *((_DWORD *)this + 757) = v8[0];
    *((_DWORD *)this + 758) = v7[1];
    *((_DWORD *)this + 759) = v7[0];
    *((_DWORD *)this + 707) = 16;
    *((_DWORD *)this + 4392) = 0;
    LGH_Syntax::Set_Frame_Context(*((void *)this + 2197), *((void *)this + 384));
    *(unsigned char *)(v3 + 56) = 0;
    *(unsigned char *)(v3 + 39) = 0;
    CAVDDecoder::isADSDecryption(this);
    uint64_t result = 0;
    *((_DWORD *)this + 713) = 0;
    *((unsigned char *)this + 2824) = 1;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v10 = "VAStartDecode";
      __int16 v11 = 1024;
      unsigned int v12 = v5;
      __int16 v13 = 1024;
      unsigned int v14 = v4;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported resolution, Lgh Codec, width : %d, height : %d \n", buf, 0x18u);
    }
    return 305;
  }
  return result;
}

uint64_t CAVDLghDecoder::VAStopDecode(__n128 **this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 2824))
  {
    LGH_RLM::flush_RLM(this[2198]);
    return 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v2 = 136315138;
      uint64_t v3 = "VAStopDecode";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: bailing out of %s because start didn't complete", (uint8_t *)&v2, 0xCu);
    }
    return 305;
  }
}

uint64_t CAVDLghDecoder::calculateClearBytes(CAVDLghDecoder *this, unsigned int a2, int a3)
{
  if (*((unsigned char *)this + 10)) {
    return *((unsigned __int16 *)this + 1252);
  }
  uint64_t v4 = *((unsigned int *)this + 764);
  if (v4)
  {
    uint64_t v5 = 0;
    unsigned int v6 = -1;
    do
    {
      if (*(_DWORD *)(*((void *)this + 380) + v5))
      {
        unsigned int v7 = *(_DWORD *)(*((void *)this + 381) + v5);
        if (v7 < a3 + a2 && v7 >= a2) {
          unsigned int v6 = v7 - a2;
        }
      }
      v5 += 4;
    }
    while (4 * v4 != v5);
  }
  else
  {
    unsigned int v6 = -1;
  }
  if (v6 == -1 && v4 == 0) {
    return 0;
  }
  else {
    return v6;
  }
}

uint64_t CAVDLghDecoder::initPicture(CAVDLghDecoder *this)
{
  uint64_t v2 = *((void *)this + 2195);
  int v3 = *(_DWORD *)(v2 + 96);
  int v4 = *(_DWORD *)(v2 + 100);
  if (*(unsigned char *)(v2 + 37))
  {
    int v5 = *(unsigned __int8 *)(v2 + 40);
    *(unsigned char *)uint64_t v2 = *(unsigned char *)(v2 + 40) != 0;
    int v6 = *((_DWORD *)this + 1429);
    *((_DWORD *)this + 1428) = v6;
    char v7 = 1;
    if (!v5)
    {
      *((_DWORD *)this + 1429) = (v6 & 1) == 0;
      char v7 = *(unsigned char *)(v2 + 39);
      if (!v7)
      {
        int v8 = *((_DWORD *)this + 1431);
        goto LABEL_7;
      }
      char v7 = 0;
    }
  }
  else
  {
    *(unsigned char *)uint64_t v2 = 1;
    *((_DWORD *)this + 1428) = *((_DWORD *)this + 1429);
    char v7 = 1;
  }
  int v8 = (*((_DWORD *)this + 1431) + 1) & 7;
  *((_DWORD *)this + 1431) = v8;
LABEL_7:
  *((_DWORD *)this + 1430) = v8;
  if (*(unsigned char *)(v2 + 78) && *(unsigned char *)(v2 + 79)) {
    *((_DWORD *)this + 1431) = ((_BYTE)v8 + 1) & 7;
  }
  *(_DWORD *)(v2 + 4) = chroma_format_array[2 * *(unsigned __int8 *)(v2 + 43) + *(unsigned __int8 *)(v2 + 44)];
  BOOL v9 = !*(unsigned char *)(v2 + 39)
    && *(_DWORD *)(v2 + 108) == *((_DWORD *)this + 4590)
    && *(_DWORD *)(v2 + 112) == *((_DWORD *)this + 4591)
    && !*((_DWORD *)this + 4587)
    && *((_DWORD *)this + 4589)
    && *((_DWORD *)this + 4588) != 0;
  *(_DWORD *)(v2 + 8) = v9;
  if ((v7 & 1) == 0)
  {
    uint64_t Ref_Pic_List = LGH_RLM::Get_Ref_Pic_List(*((LGH_RLM **)this + 2198));
    for (uint64_t i = 0; i != 24; i += 8)
      *(void *)((char *)this + i + 17424) = *(void *)(Ref_Pic_List + i);
  }
  if (v4 == 31)
  {
    CAVDDecoder::isADSDecryption(this);
  }
  else
  {
    uint64_t v12 = 0;
    int v13 = 0;
    int v14 = 1 << v4;
    int v16 = *(_DWORD *)(v2 + 116);
    int v15 = *(_DWORD *)(v2 + 120);
    int v17 = (v15 + 7) >> 3;
    if (1 << v3 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = (1 << v3);
    }
    if (v14 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v14;
    }
    do
    {
      if (v3 == 31)
      {
        uint64_t v20 = v12 + 1;
      }
      else
      {
        int v21 = 0;
        uint64_t v22 = 0;
        if (8 * ((v17 * (int)v12) >> v4) >= v15) {
          int v23 = v15;
        }
        else {
          int v23 = 8 * ((v17 * (int)v12) >> v4);
        }
        uint64_t v20 = v12 + 1;
        int v24 = 8 * ((v17 * ((int)v12 + 1)) >> v4);
        if (v24 >= v15) {
          int v24 = v15;
        }
        uint64_t v25 = *((void *)this + 2195) + 1792 * v12 + 2760;
        do
        {
          int v26 = 8 * (v21 >> v3);
          if (v26 >= v16) {
            int v26 = v16;
          }
          v21 += (v16 + 7) >> 3;
          int v27 = 8 * (v21 >> v3);
          if (v27 >= v16) {
            int v27 = v16;
          }
          *(_DWORD *)uint64_t v25 = v23;
          *(_DWORD *)(v25 + 4) = v24;
          uint64_t v28 = v2 + 4 * v13 + 4 * v22++;
          *(_DWORD *)(v25 + 8) = v26;
          *(_DWORD *)(v25 + 12) = v27;
          BOOL v30 = v23 == v24 || v26 == v27;
          *(unsigned char *)(v25 + 26) = v30;
          *(_DWORD *)(v25 + 16) = *(_DWORD *)(v28 + 1344);
          *(_DWORD *)(v25 + 20) = *(_DWORD *)(v28 + 320);
          v25 += 28;
        }
        while (v18 != v22);
        v13 += v22;
      }
      uint64_t v12 = v20;
    }
    while (v20 != v19);
    if (CAVDDecoder::isADSDecryption(this))
    {
      uint64_t v31 = 0;
      uint64_t v32 = 2784;
      do
      {
        if (v3 != 31)
        {
          int v33 = *((unsigned __int8 *)this + 10);
          unsigned int v34 = (__int16 *)(*((void *)this + 2195) + v32);
          uint64_t v35 = v18;
          do
          {
            if (!v33)
            {
              int v36 = CAVDLghDecoder::calculateClearBytes(this, *((_DWORD *)v34 - 1), *((_DWORD *)v34 - 2));
              if (v36 == -1) {
                __int16 v37 = 1023;
              }
              else {
                __int16 v37 = v36;
              }
              __int16 *v34 = v37;
              int v38 = *((_DWORD *)this + 626);
              unsigned int v39 = v38 & 0xFFDFFFFF;
              int v40 = v38 | 0x10000;
              if (*((_DWORD *)this + 605)) {
                unsigned int v41 = v40;
              }
              else {
                unsigned int v41 = v39;
              }
              *((_DWORD *)this + 626) = v41;
            }
            v34 += 14;
            --v35;
          }
          while (v35);
        }
        ++v31;
        v32 += 1792;
      }
      while (v31 != v19);
    }
  }

  return CAVDLghDecoder::preparePicParms(this);
}

uint64_t CAVDLghDecoder::preparePicParms(CAVDLghDecoder *this)
{
  uint64_t v1 = (int *)((char *)this + 17552);
  uint64_t v2 = *((void *)this + 2195);
  int v3 = *(unsigned __int8 *)(v2 + 37);
  if (*(unsigned char *)(v2 + 37)) {
    BOOL v4 = *(unsigned char *)(v2 + 40) != 0;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = *(unsigned __int8 *)(v2 + 39);
  unsigned int v6 = *(_DWORD *)(v2 + 108);
  BOOL v7 = v6 != *((_DWORD *)this + 4590) || *(_DWORD *)(v2 + 112) != *((_DWORD *)this + 4591);
  int v8 = *(unsigned __int8 *)(v2 + 78);
  if (*(unsigned char *)(v2 + 78))
  {
    if (*(unsigned char *)(v2 + 39)) {
      char v9 = 1;
    }
    else {
      char v9 = v4;
    }
    if (v9)
    {
      int v10 = 1;
    }
    else if (*v1)
    {
      int v10 = v7;
    }
    else
    {
      int v10 = 1;
    }
    *(_DWORD *)(v2 + 2756) = v10;
    *(_DWORD *)(v2 + 2752) = v8;
    int v13 = *(unsigned __int8 *)(v2 + 79);
    BOOL v12 = *(unsigned char *)(v2 + 79) == 0;
    *(_DWORD *)(v2 + 2748) = v13;
    if (v13) {
      int v13 = *(unsigned __int8 *)(v2 + 87);
    }
    *(_DWORD *)(v2 + 2744) = v13;
    int v11 = *(unsigned __int8 *)(v2 + 92);
  }
  else
  {
    int v11 = 0;
    *(void *)(v2 + 2752) = 0;
    *(void *)(v2 + 2744) = 0;
    BOOL v12 = 1;
  }
  *(_DWORD *)(v2 + 2740) = v11;
  int v14 = !v4;
  if (!*(_DWORD *)(v2 + 8)) {
    int v14 = 0;
  }
  *(_DWORD *)(v2 + 2736) = v14;
  *(_DWORD *)(v2 + 2732) = v5;
  if (v4)
  {
    int v15 = 0;
    int v16 = 0;
  }
  else
  {
    int v15 = *(unsigned __int8 *)(v2 + 53);
    int v16 = *(unsigned __int8 *)(v2 + 54);
  }
  *(_DWORD *)(v2 + 2728) = v15;
  *(_DWORD *)(v2 + 2724) = v16;
  *(_DWORD *)(v2 + 2720) = *(unsigned __int8 *)(v2 + 55);
  *(_DWORD *)(v2 + 2716) = *(unsigned __int8 *)(v2 + 56);
  *(_DWORD *)(v2 + 2712) = *(unsigned __int8 *)(v2 + 306);
  if (v4)
  {
    int v17 = 0;
    *(_OWORD *)(v2 + 2696) = xmmword_223ADBC90;
  }
  else
  {
    *(_DWORD *)(v2 + 2708) = *(unsigned __int8 *)(v2 + 52);
    uint64_t v18 = *(void *)(*((void *)this + 2180) + 40);
    uint64_t v19 = *(void *)(*((void *)this + 2178) + 40);
    uint64_t v20 = *(void *)(*((void *)this + 2179) + 40);
    if (v18 == v20) {
      int v21 = 2;
    }
    else {
      int v21 = 3;
    }
    if (v18 == v19) {
      int v22 = 1;
    }
    else {
      int v22 = v21;
    }
    *(_DWORD *)(v2 + 2704) = v22;
    *(_DWORD *)(v2 + 2700) = *(unsigned __int8 *)(v2 + 51);
    if (v20 == v19) {
      int v23 = 1;
    }
    else {
      int v23 = 2;
    }
    *(_DWORD *)(v2 + 2696) = v23;
    int v17 = *(unsigned __int8 *)(v2 + 50);
  }
  BOOL v24 = v3 == 0;
  *(_DWORD *)(v2 + 2692) = v17;
  int v25 = 1;
  *(_DWORD *)(v2 + 2688) = 1;
  *(_DWORD *)(v2 + 2648) = v6;
  unsigned int v26 = *(_DWORD *)(v2 + 112);
  *(_DWORD *)(v2 + 2652) = v26;
  *(_DWORD *)(v2 + 2656) = 1;
  int v27 = *(unsigned __int8 *)(v2 + 105) - 8;
  *(_DWORD *)(v2 + 2660) = v27;
  *(_DWORD *)(v2 + 2664) = v27;
  *(_DWORD *)(v2 + 2668) = v24;
  unsigned int v29 = *(_DWORD *)(v2 + 132);
  uint64_t result = *(unsigned int *)(v2 + 136);
  BOOL v30 = v6 >= v29;
  unsigned int v32 = v6 - v29;
  BOOL v31 = v32 != 0 && v30;
  unsigned int v33 = v32 & 0xFFFFFFFE;
  if (!v31) {
    unsigned int v33 = 0;
  }
  *(_DWORD *)(v2 + 2672) = v33;
  int v34 = (v26 - result) & 0xFFFFFFFE;
  if (v26 <= result) {
    int v34 = 0;
  }
  *(_DWORD *)(v2 + 2676) = v34;
  *(int32x2_t *)(v2 + 2680) = vadd_s32((int32x2_t)(*(void *)&vadd_s32((int32x2_t)__PAIR64__(v26, v6), (int32x2_t)0x100000001) & 0xFFFFFFFEFFFFFFFELL), (int32x2_t)-1);
  if (v12)
  {
    if (v5) {
      char v35 = 1;
    }
    else {
      char v35 = v4;
    }
    if (v35)
    {
      int v25 = 0;
    }
    else if (*v1)
    {
      int v25 = !v7;
    }
    else
    {
      int v25 = 0;
    }
  }
  *uint64_t v1 = v25;
  return result;
}

uint64_t CAVDLghDecoder::VADecodeFrame(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a4;
  uint64_t v118 = *MEMORY[0x263EF8340];
  int v15 = *(int32x2_t **)(a1 + 17560);
  v15[2] = (int32x2_t)a2;
  if (a4 >= 2 && !v15[7].i8[0])
  {
    int v16 = AppleAVDCommandBuilder::waitNumInFlight(*(AppleAVDCommandBuilder **)(a1 + 2344), 1u);
    if (v16)
    {
      int v17 = v16;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VADecodeFrame";
        __int16 v106 = 1024;
        int v107 = v17;
        uint64_t v18 = &_os_log_internal;
        uint64_t v19 = "AppleAVD: WARNING: %s(): timeout status: %d";
LABEL_6:
        uint32_t v20 = 18;
LABEL_57:
        _os_log_impl(&dword_223977000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, v20);
      }
LABEL_58:
      if (*(unsigned char *)(a1 + 2832))
      {
        *(unsigned char *)(a1 + 2833) = 0;
        uint64_t v38 = 305;
      }
      else
      {
        *(unsigned char *)(a1 + 2833) = 1;
        LGH_RLM::flush_RLM(*(__n128 **)(a1 + 17584));
        uint64_t v38 = 316;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v39 = *(unsigned __int8 *)(a1 + 2833);
        int v40 = v15[4].u8[5];
        *(_DWORD *)buf = 136316418;
        *(void *)&uint8_t buf[4] = "VADecodeFrame";
        __int16 v106 = 1024;
        int v107 = 0;
        __int16 v108 = 1024;
        int v109 = v38;
        __int16 v110 = 1024;
        int v111 = v39;
        __int16 v112 = 1024;
        int v113 = v40;
        __int16 v114 = 1024;
        __int32 v115 = v11;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s():clientID: %2d,DecodeError: %d,skipToIDR:%d,frameType: %d,frameNum :%d", buf, 0x2Au);
      }
      return v38;
    }
  }
  if (*(unsigned char *)(a1 + 18800))
  {
    *(unsigned char *)(a1 + 18800) = 0;
  }
  else if (!v15[7].i8[0])
  {
    LGH_Syntax::Set_Context_Counter(*(char **)(a1 + 17576), *(void *)(a1 + 5184) + 4);
  }
  LGH_Syntax::Set_Frame_Context(*(void *)(a1 + 17576), *(void *)(a1 + 176 * *(unsigned int *)(a1 + 17568) + 3072));
  if (a5 == -1)
  {
    *(void *)(a1 + 11768) = 0;
    *(void *)(a1 + 11760) = 0xFFFFFFFF00000000;
  }
  else
  {
    *(void *)buf = 0;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 112))(a1, a5, buf, 1))
    {
      *(void *)(a1 + 11768) = 0;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_58;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      __int16 v106 = 1024;
      int v107 = 0;
      __int16 v108 = 1024;
      int v109 = v11;
      uint64_t v18 = &_os_log_internal;
      uint64_t v19 = "AppleAVD: %s() : clientID: %2d Error getting display buffer!, frameNum : %d";
      goto LABEL_25;
    }
    *(_DWORD *)(a1 + 11760) = 1;
    *(_DWORD *)(a1 + 11764) = a5;
    *(void *)(a1 + 11768) = *(void *)buf + 8;
  }
  *(void *)buf = 0;
  if (((*(uint64_t (**)(uint64_t, void, unsigned char *, void))(*(void *)a1 + 112))(a1, a6, buf, 0) & 1) == 0)
  {
    *(void *)(a1 + 11752) = 0;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "VADecodeFrame";
    __int16 v106 = 1024;
    int v107 = 0;
    __int16 v108 = 1024;
    int v109 = v11;
    uint64_t v18 = &_os_log_internal;
    uint64_t v19 = "AppleAVD: %s() : clientID: %2d Error getting decoder buffer!, frameNum : %d";
    goto LABEL_25;
  }
  *(_DWORD *)(a1 + 11744) = 0;
  *(_DWORD *)(a1 + 11748) = a6;
  uint64_t v21 = *(void *)buf;
  uint64_t v22 = *(void *)buf + 8;
  *(void *)(a1 + 2088) = *(void *)buf;
  *(void *)(a1 + 11752) = v22;
  *(void *)(v21 + 204) = *(void *)(a1 + 2856);
  uint64_t v23 = *(unsigned int *)(a1 + 11748);
  int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (a7 != -1 && v24)
  {
    *(void *)buf = 0;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, unsigned char *, void))(*(void *)a1 + 112))(a1, a7, buf, 0))
    {
      *(void *)(a1 + 11784) = 0;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      __int16 v106 = 1024;
      int v107 = v11;
      unsigned int v26 = &_os_log_internal;
      int v27 = "AppleAVD: ERROR: %s(): Error getting second decoder buffer for scaling! (frameNum :%d)";
      goto LABEL_30;
    }
    *(_DWORD *)(a1 + 11776) = 0;
    *(_DWORD *)(a1 + 11780) = a7;
    uint64_t v25 = *(void *)buf;
    *(void *)(a1 + 11784) = *(void *)buf + 8;
    if (v25)
    {
      *(_DWORD *)(v25 + 204) = 0;
      *(_DWORD *)(v25 + 208) = 0;
      goto LABEL_31;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      __int16 v106 = 1024;
      int v107 = v11;
      unsigned int v26 = &_os_log_internal;
      int v27 = "AppleAVD: ERROR: %s(): vSurfInfoScalerRef was not set! (frameNum :%d)";
LABEL_30:
      _os_log_impl(&dword_223977000, v26, OS_LOG_TYPE_DEFAULT, v27, buf, 0x12u);
    }
  }
LABEL_31:
  uint64_t v28 = *(void *)(a1 + 11752);
  *(_DWORD *)(a1 + 2648) = *(unsigned __int8 *)(v28 + 160);
  uint64_t v29 = *(void *)(a1 + 11768);
  if (*(unsigned char *)(a1 + 9))
  {
    if (v29) {
      goto LABEL_47;
    }
    goto LABEL_40;
  }
  if (!v29)
  {
    *(_DWORD *)(a1 + 2644) = 0;
LABEL_40:
    uint64_t v29 = v28;
    goto LABEL_47;
  }
  int v30 = *(_DWORD *)(v29 + 148);
  int v31 = 1;
  if (v30 > 1885745711)
  {
    if (v30 != 1885745712 && v30 != 1885745714)
    {
      int v32 = 1885746228;
LABEL_44:
      if (v30 != v32) {
        int v31 = 2;
      }
    }
  }
  else if (v30 != 1882468912 && v30 != 1882468914)
  {
    int v32 = 1882469428;
    goto LABEL_44;
  }
  *(_DWORD *)(a1 + 2644) = v31;
LABEL_47:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 23, v29 + 148);
  if (LGH_Syntax::Parse_Header(*(LGH_Syntax **)(a1 + 17576), a2, a3, (_DWORD *)(*(void *)(a1 + 17560) + 32)))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      uint64_t v18 = &_os_log_internal;
      uint64_t v19 = "AppleAVD: %s(): LGH frame header parsing error !";
      uint32_t v20 = 12;
      goto LABEL_57;
    }
    goto LABEL_58;
  }
  __int32 v34 = v15[13].i32[1];
  __int32 v33 = v15[14].i32[0];
  if ((v33 * v34) >= 0x2200001)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "VADecodeFrame";
    __int16 v106 = 1024;
    int v107 = 0;
    __int16 v108 = 1024;
    int v109 = v34;
    __int16 v110 = 1024;
    int v111 = v33;
    __int16 v112 = 1024;
    int v113 = v11;
    uint64_t v18 = &_os_log_internal;
    uint64_t v19 = "AppleAVD: %s : clientID:%2d, LGH Decoder frameWidth : %d, frameHeight : %d is out of range, frameNum :%d";
LABEL_56:
    uint32_t v20 = 36;
    goto LABEL_57;
  }
  uint64_t v35 = *(void *)(a1 + 17560);
  int v36 = *(unsigned __int8 *)(v35 + 104);
  if ((v36 | 2) == 3)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_58;
    }
    int v37 = v15[4].u8[5];
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "VADecodeFrame";
    __int16 v106 = 1024;
    int v107 = 0;
    __int16 v108 = 1024;
    int v109 = v36;
    __int16 v110 = 1024;
    int v111 = v37;
    __int16 v112 = 1024;
    int v113 = v11;
    uint64_t v18 = &_os_log_internal;
    uint64_t v19 = "AppleAVD: %s: clientID:%2d, LGH, unsupported profile : %d !, frameType :%d, frameNum :%d";
    goto LABEL_56;
  }
  if (*(unsigned char *)(a1 + 2833))
  {
    if (*(unsigned char *)(v35 + 37)) {
      goto LABEL_58;
    }
    *(unsigned char *)(a1 + 2833) = 0;
  }
  *(_DWORD *)(v35 + 4) = chroma_format_array[2 * v15[5].u8[3] + v15[5].u8[4]];
  if (LGH_RLM::Update_Frame_Bufs(*(LGH_RLM **)(a1 + 17584), v35 + 32, a1 + 376 * (int)v23 + 5728))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_58;
    }
    int v42 = v15[4].u8[5];
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VADecodeFrame";
    __int16 v106 = 1024;
    int v107 = 0;
    __int16 v108 = 1024;
    int v109 = v42;
    __int16 v110 = 1024;
    int v111 = v11;
    uint64_t v18 = &_os_log_internal;
    uint64_t v19 = "AppleAVD: %s(): clientID:%2d LGH, reference list creation - invalid reference frames, frameType :%d, frameNum :%d !";
    goto LABEL_70;
  }
  if (v15[4].i8[0])
  {
    LGH_RLM::Swap_Frame_Bufs(*(LGH_RLM **)(a1 + 17584), (unsigned char *)(*(void *)(a1 + 17560) + 32));
    uint64_t Disp_Buf = LGH_RLM::Get_Disp_Buf(*(LGH_RLM **)(a1 + 17584));
    if (Disp_Buf) {
      CAVDLghDecoder::insertFrame(a1, Disp_Buf);
    }
    BOOL v44 = *(int **)(a1 + 18808);
    for (int i = *v44; *v44 < v44[1]; int i = *v44)
    {
      uint64_t v11 = v44[88 * (i & 7) + 15];
      *BOOL v44 = i + 1;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v11);
      BOOL v44 = *(int **)(a1 + 18808);
    }
    if (Disp_Buf && *(_DWORD *)(a1 + 18312)) {
      LGH_RLM::Rel_Disp_Buf(*(void *)(a1 + 17584), Disp_Buf);
    }
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 40))(a1, v23, 0);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 40))(a1, *(unsigned int *)(a1 + 11764), 1);
    *(_DWORD *)(*(void *)(a1 + 2344) + 6260) = v11;
    if (*(unsigned char *)(a1 + 10)) {
      usleep(0x2710u);
    }
    return 51;
  }
  if (v15[7].i8[0]) {
    LGH_Syntax::Update_Frame_Context_Parallel(*(LGH_Syntax **)(a1 + 17576), v15[7].u8[1]);
  }
  CAVDLghDecoder::initPicture((CAVDLghDecoder *)a1);
  if (*(unsigned char *)(a1 + 10))
  {
    int v46 = *(_DWORD *)(*(void *)(a1 + 17560) + 4);
    uint64_t v47 = a1 + 18696;
  }
  else
  {
    __int32 v57 = v15[13].i32[1];
    int v58 = *(_DWORD *)(a1 + 3024);
    if (((v58 + 15) ^ (v57 + 15)) > 0xF
      || ((*(_DWORD *)(a1 + 3028) + 15) ^ (v15[14].i32[0] + 15)) >= 0x10)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_58;
      }
      int v60 = *(_DWORD *)(a1 + 3028);
      __int32 v61 = v15[14].i32[0];
      *(_DWORD *)buf = 136316674;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      __int16 v106 = 1024;
      int v107 = 0;
      __int16 v108 = 1024;
      int v109 = v11;
      __int16 v110 = 1024;
      int v111 = v58;
      __int16 v112 = 1024;
      int v113 = v60;
      __int16 v114 = 1024;
      __int32 v115 = v57;
      __int16 v116 = 1024;
      __int32 v117 = v61;
      uint64_t v18 = &_os_log_internal;
      uint64_t v19 = "AppleAVD: %s(): clientID : %2d, #### <WARNING> Frame resolution change not supported frameNum:%d old (%dx%d) new (%dx%d)";
      uint32_t v20 = 48;
      goto LABEL_57;
    }
    int v46 = *(_DWORD *)(*(void *)(a1 + 17560) + 4);
    int v59 = *(_DWORD *)(a1 + 3036);
    if (v46 != v59)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_58;
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      __int16 v106 = 1024;
      int v107 = 0;
      __int16 v108 = 1024;
      int v109 = v11;
      __int16 v110 = 1024;
      int v111 = v46;
      __int16 v112 = 1024;
      int v113 = v59;
      uint64_t v18 = &_os_log_internal;
      uint64_t v19 = "AppleAVD: %s(): clientID : %2d, #### <WARNING> frameNum:%d m_cur_pic_info->chroma_format:%d m_orig_chroma_format_idc:%d";
      goto LABEL_56;
    }
    int v101 = *(_DWORD *)(a1 + 3032) + 8;
    int v102 = v15[13].u8[1];
    uint64_t v47 = a1 + 18696;
    if (v101 != v102)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_58;
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      __int16 v106 = 1024;
      int v107 = 0;
      __int16 v108 = 1024;
      int v109 = v11;
      __int16 v110 = 1024;
      int v111 = v102;
      __int16 v112 = 1024;
      int v113 = v101;
      uint64_t v18 = &_os_log_internal;
      uint64_t v19 = "AppleAVD: %s(): clientID : %2d, #### <WARNING> frameNum:%d pHeader->BitDepth:%d m_orig_bit_depth_luma_minus8+8:%d";
      goto LABEL_56;
    }
  }
  if (v46 > *(unsigned __int8 *)(v47 + 32)) {
    *(unsigned char *)(v47 + 32) = v46;
  }
  int v48 = v15[13].u8[1];
  char v49 = v48 - 8;
  if (v48 - 8 > *(unsigned __int8 *)(v47 + 33))
  {
    *(unsigned char *)(v47 + 33) = v49;
    *(unsigned char *)(v47 + 34) = v49;
  }
  unsigned __int32 v50 = v15[13].u32[1];
  if (*(_DWORD *)v47 < v50) {
    *(_DWORD *)uint64_t v47 = v50;
  }
  unsigned __int32 v51 = v15[14].u32[0];
  if (*(_DWORD *)(v47 + 4) < v51) {
    *(_DWORD *)(v47 + 4) = v51;
  }
  if (a8)
  {
    long long v52 = *(_OWORD *)v47;
    long long v53 = *(_OWORD *)(v47 + 32);
    *(_OWORD *)(a8 + 16) = *(_OWORD *)(v47 + 16);
    *(_OWORD *)(a8 + 32) = v53;
    *(_OWORD *)a8 = v52;
    long long v54 = *(_OWORD *)(v47 + 48);
    long long v55 = *(_OWORD *)(v47 + 64);
    long long v56 = *(_OWORD *)(v47 + 80);
    *(void *)(a8 + 96) = *(void *)(v47 + 96);
    *(_OWORD *)(a8 + 64) = v55;
    *(_OWORD *)(a8 + 80) = v56;
    *(_OWORD *)(a8 + 48) = v54;
    *(int32x2_t *)a8 = *(int32x2_t *)((char *)v15 + 108);
    int v48 = v15[13].u8[1];
    *(unsigned char *)(a8 + 34) = v48 - 8;
    *(unsigned char *)(a8 + 33) = v48 - 8;
    *(unsigned char *)(a8 + 36) = 0;
  }
  else
  {
    uint64_t v47 = a1 + 18696;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v62 = v15[4].u8[5];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      __int16 v106 = 1024;
      int v107 = 0;
      __int16 v108 = 1024;
      int v109 = v62;
      __int16 v110 = 1024;
      int v111 = v11;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): clientID : %2d, frameInfoOut is NULL!!!, frameType :%d, frameNum:%d", buf, 0x1Eu);
      uint64_t v47 = a1 + 18696;
      int v48 = v15[13].u8[1];
    }
  }
  uint64_t v63 = a1 + 18312;
  int v64 = *(_DWORD *)(*(void *)(a1 + 17560) + 4);
  if (*(_DWORD *)(a1 + 18368) >= v64)
  {
    int v65 = v48 - 8;
    if (*(_DWORD *)(a1 + 18372) >= v48 - 8
      && *(_DWORD *)(a1 + 18360) >= v15[13].i32[1]
      && *(_DWORD *)(a1 + 18364) >= v15[14].i32[0])
    {
      if (*(_DWORD *)(a1 + 18376) >= v15[12].i32[1])
      {
        uint64_t v63 = a1 + 18312;
        if (*(_DWORD *)(a1 + 18380) >= v15[12].i32[0])
        {
          int v68 = 0;
          goto LABEL_121;
        }
      }
      else
      {
        uint64_t v63 = a1 + 18312;
      }
    }
  }
  else
  {
    int v65 = v48 - 8;
  }
  *(_DWORD *)(v63 + 56) = v64;
  *(_DWORD *)(v63 + 60) = v65;
  *(int32x2_t *)(a1 + 18376) = vrev64_s32(v15[12]);
  if (v11 >= 2)
  {
    int v66 = AppleAVDCommandBuilder::waitNumInFlight(*(AppleAVDCommandBuilder **)(a1 + 2344), 1u);
    if (v66)
    {
      int v67 = v66;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_58;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      __int16 v106 = 1024;
      int v107 = v67;
      uint64_t v18 = &_os_log_internal;
      uint64_t v19 = "AppleAVD: WARNING: %s(): timeout status: %d";
      goto LABEL_6;
    }
  }
  int v68 = 1;
LABEL_121:
  if (!*(_DWORD *)(v47 + 128))
  {
    int v103 = v68;
    char v70 = *(unsigned char *)(v47 + 32);
    *(void *)(a1 + 18696) = *(void *)(a1 + 2856);
    *(unsigned char *)(v47 + 32) = 3;
    if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 2096) + 128))(*(void *)(a1 + 2096), v47))
    {
      *(_DWORD *)(v47 + 128) = 1;
      *(unsigned char *)(v47 + 32) = v70;
      int v68 = v103;
      goto LABEL_122;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "virtual int CAVDLghDecoder::VADecodeFrame(unsigned char *, int, uint32_t, int, int, int, avd_seq_params *)";
    __int16 v106 = 1024;
    int v107 = 0;
    __int16 v108 = 1024;
    int v109 = v11;
    uint64_t v18 = &_os_log_internal;
    uint64_t v19 = "AppleAVD: %s : clientID : %2d fail to alloc work buffer for sps frameNum:%d \n";
LABEL_25:
    uint32_t v20 = 24;
    goto LABEL_57;
  }
LABEL_122:
  if (((*(_DWORD *)(v47 + 124) != 0) & ~v68) == 0)
  {
    (*(void (**)(void, void))(**(void **)(a1 + 2096) + 152))(*(void *)(a1 + 2096), 0);
    *(_DWORD *)(v47 + 124) = 0;
    if ((*(unsigned int (**)(void, uint64_t, void, void))(**(void **)(a1 + 2096) + 144))(*(void *)(a1 + 2096), v47, 0, 0))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_58;
      }
      int v69 = v15[4].u8[5];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "virtual int CAVDLghDecoder::VADecodeFrame(unsigned char *, int, uint32_t, int, int, int, avd_seq_params *)";
      __int16 v106 = 1024;
      int v107 = 0;
      __int16 v108 = 1024;
      int v109 = v69;
      __int16 v110 = 1024;
      int v111 = v11;
      uint64_t v18 = &_os_log_internal;
      uint64_t v19 = "AppleAVD: %s clientID : %2d fail to alloc work buffer for pps frame_type %d, frameNum:%d \n";
LABEL_70:
      uint32_t v20 = 30;
      goto LABEL_57;
    }
    *(_DWORD *)(v47 + 124) = 1;
  }
  uint64_t v71 = *(void *)(a1 + 11752);
  uint64_t v72 = a1 + 376 * (int)v23;
  uint64_t v73 = v72 + 5728;
  *(void *)(v72 + 5736) = v71;
  *(_DWORD *)(v72 + 5728) = v23;
  *(_DWORD *)(*(void *)(a1 + 17560) + 24) = v23;
  uint64_t v74 = (_OWORD *)(a1 + 176 * (int)v23);
  long long v75 = v74[747];
  long long v76 = v74[746];
  long long v77 = v74[745];
  *(_OWORD *)(v73 + 136) = v74[744];
  *(_OWORD *)(v73 + 152) = v77;
  *(_OWORD *)(v73 + 168) = v76;
  *(_OWORD *)(v73 + 184) = v75;
  long long v78 = v74[740];
  long long v79 = v74[741];
  long long v80 = v74[742];
  *(_OWORD *)(v73 + 120) = v74[743];
  *(_OWORD *)(v73 + 104) = v80;
  *(_OWORD *)(v73 + 88) = v79;
  *(_OWORD *)(v73 + 72) = v78;
  long long v81 = v74[737];
  long long v82 = v74[738];
  *(_OWORD *)(v73 + 56) = v74[739];
  *(_OWORD *)(v73 + 40) = v82;
  *(_OWORD *)(v73 + 24) = v81;
  long long v83 = v74[916];
  long long v84 = v74[917];
  long long v85 = v74[918];
  *(_OWORD *)(v73 + 296) = v74[919];
  long long v86 = v74[920];
  long long v87 = v74[921];
  long long v88 = v74[923];
  *(_OWORD *)(v73 + 344) = v74[922];
  *(_OWORD *)(v73 + 360) = v88;
  *(_OWORD *)(v73 + 312) = v86;
  *(_OWORD *)(v73 + 328) = v87;
  long long v89 = v74[913];
  long long v90 = v74[914];
  *(_OWORD *)(v73 + 232) = v74[915];
  *(_OWORD *)(v73 + 216) = v90;
  *(_OWORD *)(v73 + 200) = v89;
  *(_OWORD *)(v73 + 264) = v84;
  *(_OWORD *)(v73 + 280) = v85;
  *(_OWORD *)(v73 + 248) = v83;
  if (*(_DWORD *)(a1 + 2644))
  {
    int v91 = (int *)(a1 + 11764);
    uint64_t v71 = *(void *)(a1 + 11768);
  }
  else
  {
    int v91 = (int *)(a1 + 11748);
  }
  int v92 = *v91;
  uint64_t v93 = *(void *)(a1 + 17560);
  *(_DWORD *)(v93 + 28) = v92;
  uint64_t v94 = a1 + 376 * (int)v23;
  *(_DWORD *)(v94 + 5732) = v92;
  *(void *)(v94 + 5744) = v71;
  if (*(unsigned char *)v93 || v15[4].i8[7]) {
    (*(void (**)(void))(**(void **)(a1 + 2096) + 224))(*(void *)(a1 + 2096));
  }
  if (*(unsigned char *)(a1 + 2356)) {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 208))(a1, v11, a6);
  }
  int v95 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2096) + 232))(*(void *)(a1 + 2096), v11);
  uint64_t v96 = *(void *)(a1 + 2096);
  *(_DWORD *)(v96 + 12) = *(_DWORD *)(*(void *)(a1 + 17560) + 316) * *(_DWORD *)(*(void *)(a1 + 17560) + 312);
  AppleAVDCommandBuilder::setDecodeBufferSections(*(void *)(a1 + 2344), v96 + 8);
  if (*(unsigned char *)(a1 + 2356)) {
    *(_DWORD *)(a1 + 2332) = CAHDec::getDecBufIndex(*(CAHDec **)(a1 + 2096));
  }
  if (v95)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "VADecodeFrame";
    __int16 v106 = 1024;
    int v107 = v95;
    uint64_t v18 = &_os_log_internal;
    uint64_t v19 = "AppleAVD: %s(): hwD->DecodePicture return %d";
    goto LABEL_6;
  }
  LGH_RLM::Swap_Frame_Bufs(*(LGH_RLM **)(a1 + 17584), (unsigned char *)(*(void *)(a1 + 17560) + 32));
  uint64_t v97 = LGH_RLM::Get_Disp_Buf(*(LGH_RLM **)(a1 + 17584));
  if (v97) {
    CAVDLghDecoder::insertFrame(a1, v97);
  }
  uint64_t v98 = *(int **)(a1 + 18808);
  for (int j = *v98; *v98 < v98[1]; int j = *v98)
  {
    uint64_t v100 = v98[88 * (j & 7) + 15];
    *uint64_t v98 = j + 1;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v100);
    uint64_t v98 = *(int **)(a1 + 18808);
  }
  if (v97 && *(_DWORD *)(a1 + 18312)) {
    LGH_RLM::Rel_Disp_Buf(*(void *)(a1 + 17584), v97);
  }
  uint64_t v38 = 0;
  *(_DWORD *)(a1 + 18348) = **(unsigned __int8 **)(a1 + 17560);
  *(_DWORD *)(a1 + 18352) = v15[4].u8[5];
  *(_DWORD *)(a1 + 18356) = v15[4].u8[6];
  *(int32x2_t *)(a1 + 18360) = *(int32x2_t *)((char *)v15 + 108);
  *(int32x2_t *)(a1 + 18376) = vrev64_s32(v15[12]);
  *(_DWORD *)(a1 + 17568) = (*(_DWORD *)(a1 + 17568) + 1) & 3;
  return v38;
}

uint64_t CAVDLghDecoder::insertFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  BOOL v4 = *(_DWORD **)(a1 + 18808);
  int v5 = v4[1];
  if ((v5 - *v4) >= 8 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315394;
    int v13 = "insertFrame";
    __int16 v14 = 1024;
    int v15 = 2156;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v12, 0x12u);
    BOOL v4 = *(_DWORD **)(a1 + 18808);
  }
  unsigned int v6 = &v4[88 * (v5 & 7)];
  v6[12] = 1;
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = 8;
  if (*(_DWORD *)(a1 + 2644)) {
    uint64_t v8 = 16;
  }
  uint64_t v9 = *(void *)(v7 + v8);
  int v10 = *(_DWORD *)(v7 + 4 * (*(_DWORD *)(a1 + 2644) != 0));
  v6[14] = *(_DWORD *)(a1 + 2644) != 0;
  v6[15] = v10;
  *((void *)v6 + 8) = v9;
  ++v4[1];
  return 0;
}

uint64_t CAVDLghDecoder::getDispFrameParams(uint64_t a1, void *__dst)
{
  uint64_t v2 = *(_DWORD **)(a1 + 18808);
  if (*v2 >= v2[1]) {
    return 0xFFFFFFFFLL;
  }
  memcpy(__dst, &v2[88 * (*v2 & 7) + 2], 0x160uLL);
  uint64_t result = 0;
  ++**(_DWORD **)(a1 + 18808);
  return result;
}

uint64_t CAVDLghDecoder::VAReleaseOutputSurface(AppleAVDCommandBuilder **this, int a2, unsigned int a3)
{
  if (a3 != 1 || *((_DWORD *)this + 661)) {
    AppleAVDCommandBuilder::setReleaseCVPixelBufferIndex(this[292], a2, a3);
  }
  return 0;
}

uint64_t CAVDLghDecoder::VADisplaySurface(CAVDLghDecoder *this, int a2)
{
  return 0;
}

BOOL CAVDLghDecoder::VAIsSurfaceListIndexMapped(CAVDLghDecoder *this, int a2, int a3)
{
  if (a2 > 128) {
    return 0;
  }
  int v3 = (char *)this + 24;
  if (a3 != 1) {
    int v3 = (char *)this + 1056;
  }
  return *(void *)&v3[8 * a2] != 0;
}

uint64_t CAVDLghDecoder::VAGetIOSurfaceIDForBufferIndex(CAVDLghDecoder *this, unsigned int a2, int a3)
{
  if (a2 > 0x80) {
    return 0;
  }
  int v3 = (char *)this + 24;
  if (a3 != 1) {
    int v3 = (char *)this + 1056;
  }
  uint64_t v4 = *(void *)&v3[8 * a2];
  if (v4) {
    return *(unsigned int *)(v4 + 160);
  }
  else {
    return 0;
  }
}

uint64_t CAVDLghDecoder::VAGetParams(CAVDLghDecoder *this, int a2, unsigned int *__dst)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
      uint64_t result = 0;
      unsigned int v6 = 8;
      goto LABEL_15;
    case 1:
      uint64_t v8 = (_DWORD *)*((void *)this + 2351);
      if (*v8 >= v8[1]) {
        return 0xFFFFFFFFLL;
      }
      memcpy(__dst, &v8[88 * (*v8 & 7) + 2], 0x160uLL);
      uint64_t result = 0;
      ++**((_DWORD **)this + 2351);
      return result;
    case 2:
      *(void *)__dst = (*(uint64_t (**)(void))(**((void **)this + 262) + 160))(*((void *)this + 262));
      unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 262) + 168))(*((void *)this + 262));
      uint64_t result = 0;
      __dst[2] = v7;
      return result;
    case 3:
      uint64_t result = 0;
      *((_WORD *)__dst + 44) = 0;
      *((void *)__dst + 1) = 0;
      *((void *)__dst + 2) = 0;
      *((_WORD *)__dst + 16) = *((_WORD *)this + 9364);
      *((unsigned char *)__dst + 34) = *((unsigned char *)this + 18730);
      *(void *)__dst = *((void *)this + 2337);
      return result;
    case 4:
      uint64_t result = 0;
      *__dst = *((_DWORD *)this + 703);
      *((_WORD *)__dst + 2) = *((_WORD *)this + 1408);
      return result;
    case 5:
      uint64_t result = 0;
      unsigned int v6 = 1;
      goto LABEL_15;
    case 8:
      if (!__dst) {
        return 0;
      }
      uint64_t result = 0;
      unsigned int v6 = *((_DWORD *)this + 717);
      goto LABEL_15;
    case 9:
      uint64_t result = 0;
      unsigned int v6 = *((unsigned __int8 *)this + 12);
      goto LABEL_15;
    case 10:
      uint64_t result = 0;
      unsigned int v6 = *((_DWORD *)this + 4);
      goto LABEL_15;
    case 23:
      if (!__dst) {
        return 0;
      }
      uint64_t result = 0;
      unsigned int v6 = *((_DWORD *)this + 750);
LABEL_15:
      *__dst = v6;
      return result;
    default:
      return result;
  }
}

uint64_t CAVDLghDecoder::VASetParams(CAVDLghDecoder *this, int a2, unsigned int *a3)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 12:
      uint64_t result = 0;
      *((unsigned char *)this + 2832) = *(unsigned char *)a3;
      return result;
    case 13:
      uint64_t result = 0;
      *((_DWORD *)this + 714) = *a3;
      *((_DWORD *)this + 715) = a3[1];
      return result;
    case 16:
      uint64_t result = 0;
      *((void *)this + 357) = *(void *)(a3 + 1);
      *((_DWORD *)this + 716) = *a3;
      return result;
    case 17:
      uint64_t result = 0;
      *((unsigned char *)this + 2834) = 1;
      *((void *)this + 355) = a3;
      return result;
    case 18:
      uint64_t result = 0;
      *((_DWORD *)this + 712) = *a3;
      return result;
    case 19:
      if (*((unsigned char *)this + 2832)) {
        return 0;
      }
      uint64_t result = 0;
      *((unsigned char *)this + 2833) = *(unsigned char *)a3;
      return result;
    case 21:
      uint64_t result = 0;
      *((unsigned char *)this + 3004) = *(unsigned char *)a3;
      *((void *)this + 376) = *(void *)(a3 + 1);
      return result;
    case 22:
    case 28:
    case 58:
      return result;
    case 23:
      if (!a3) {
        return 0;
      }
      uint64_t result = 0;
      *((_DWORD *)this + 750) = *a3;
      return result;
    case 24:
      uint64_t result = 0;
      *((_DWORD *)this + 702) = *a3;
      return result;
    case 25:
      uint64_t result = 0;
      int v6 = *(unsigned __int8 *)a3;
      *((unsigned char *)this + 12) = v6;
      goto LABEL_16;
    case 26:
      uint64_t result = 0;
      int v6 = *a3;
LABEL_16:
      *((_DWORD *)this + 4) = v6;
      return result;
    case 27:
      if (a3[5] <= *(_DWORD *)(*((void *)this + 260) + 56))
      {
        uint64_t v7 = **((void **)this + 292);
        uint64_t v8 = *(void **)(v7 + 3688);
        IOSurfaceLock(*(IOSurfaceRef *)(v7 + 3680), 0, 0);
        memcpy(v8, *((const void **)a3 + 1), a3[5]);
        IOSurfaceUnlock(*(IOSurfaceRef *)(**((void **)this + 292) + 3680), 0, 0);
      }
      return 0;
    case 29:
      uint64_t result = 0;
      *((_DWORD *)this + 724) = *a3;
      *((void *)this + 360) = *((void *)a3 + 1);
      long long v9 = *(_OWORD *)(a3 + 18);
      long long v10 = *(_OWORD *)(a3 + 26);
      long long v11 = *(_OWORD *)(a3 + 14);
      *(_OWORD *)((char *)this + 2968) = *(_OWORD *)(a3 + 22);
      *(_OWORD *)((char *)this + 2984) = v10;
      *(_OWORD *)((char *)this + 2936) = v11;
      *(_OWORD *)((char *)this + 2952) = v9;
      long long v12 = *(_OWORD *)(a3 + 10);
      *(_OWORD *)((char *)this + 2904) = *(_OWORD *)(a3 + 6);
      *(_OWORD *)((char *)this + 2920) = v12;
      return result;
    case 31:
      uint64_t result = 0;
      *((unsigned char *)this + 10) = *(unsigned char *)a3;
      return result;
    case 34:
      *((_DWORD *)this + 701) = *a3;
      BOOL isADSDecryption = CAVDDecoder::isADSDecryption(this);
      uint64_t result = 0;
      *((_DWORD *)this + 590) = isADSDecryption;
      return result;
    case 35:
      uint64_t result = 0;
      long long v14 = *(_OWORD *)a3;
      long long v15 = *((_OWORD *)a3 + 1);
      long long v16 = *((_OWORD *)a3 + 2);
      *(void *)((char *)this + 2412) = *((void *)a3 + 6);
      *(_OWORD *)((char *)this + 2396) = v16;
      *(_OWORD *)((char *)this + 2380) = v15;
      *(_OWORD *)((char *)this + 2364) = v14;
      *((_DWORD *)this + 627) = 1;
      return result;
    case 36:
      uint64_t result = 0;
      long long v17 = *(_OWORD *)a3;
      long long v18 = *((_OWORD *)a3 + 1);
      long long v19 = *((_OWORD *)a3 + 2);
      *(void *)((char *)this + 2468) = *((void *)a3 + 6);
      *(_OWORD *)((char *)this + 2452) = v19;
      *(_OWORD *)((char *)this + 2436) = v18;
      *(_OWORD *)((char *)this + 2420) = v17;
      *((_DWORD *)this + 628) = 1;
      return result;
    case 37:
      uint64_t result = 0;
      long long v20 = *(_OWORD *)a3;
      *(_OWORD *)((char *)this + 2488) = *(_OWORD *)(a3 + 3);
      *(_OWORD *)((char *)this + 2476) = v20;
      *((_DWORD *)this + 629) = 1;
      *((void *)this + 315) = *((void *)this + 312);
      return result;
    case 38:
      uint64_t result = 0;
      *((_DWORD *)this + 629) = 1;
      return result;
    case 39:
      uint64_t result = 0;
      *((_DWORD *)this + 626) = *a3;
      return result;
    case 40:
      uint64_t result = 0;
      *((_DWORD *)this + 764) = *a3;
      return result;
    case 41:
      uint64_t result = 0;
      *((void *)this + 380) = a3;
      return result;
    case 42:
      uint64_t result = 0;
      *((void *)this + 381) = a3;
      return result;
    case 44:
      uint64_t result = 0;
      long long v21 = *(_OWORD *)a3;
      *((_OWORD *)this + 159) = *((_OWORD *)a3 + 1);
      *((_OWORD *)this + 158) = v21;
      long long v22 = *((_OWORD *)a3 + 2);
      long long v23 = *((_OWORD *)a3 + 3);
      long long v24 = *((_OWORD *)a3 + 4);
      *((_DWORD *)this + 652) = a3[20];
      *((_DWORD *)this + 658) = 1;
      *((_OWORD *)this + 162) = v24;
      *((_OWORD *)this + 161) = v23;
      *((_OWORD *)this + 160) = v22;
      return result;
    case 45:
      uint64_t result = 0;
      long long v25 = *(_OWORD *)a3;
      *((_DWORD *)this + 657) = a3[4];
      *(_OWORD *)((char *)this + 2612) = v25;
      *((_DWORD *)this + 659) = 1;
      return result;
    case 46:
      uint64_t result = 0;
      *((unsigned char *)this + 3060) = *(unsigned char *)a3;
      *((_DWORD *)this + 766) = a3[1];
      return result;
    case 48:
      uint64_t result = 0;
      *((_DWORD *)this + 663) = *a3;
      return result;
    case 49:
      uint64_t result = 0;
      *((_OWORD *)this + 166) = *(_OWORD *)a3;
      return result;
    case 50:
      uint64_t result = 0;
      *((unsigned char *)this + 2674) = *(unsigned char *)a3;
      return result;
    case 51:
      uint64_t result = 0;
      *((unsigned char *)this + 2675) = *(unsigned char *)a3;
      return result;
    case 52:
      uint64_t result = 0;
      *((void *)this + 335) = a3;
      return result;
    case 57:
      BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v26) {
        return result;
      }
      *(_WORD *)int v27 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: INFO: VP9 decoder does not support kVASetSliceHeaderThreshold, command has been ignored", v27, 2u);
      return 0;
    default:
      return 308;
  }
}

uint64_t CAVDLghDecoder::VAGetError(CAVDLghDecoder *this)
{
  return *((unsigned int *)this + 705);
}

BOOL CAVDLghDecoder::decodeGetRenderTarget(uint64_t a1, unsigned int a2, void *a3, int a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2 > 0x80)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      long long v12 = "decodeGetRenderTarget";
      __int16 v13 = 1024;
      unsigned int v14 = a2;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s bad index %u", (uint8_t *)&v11, 0x12u);
    }
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v6 = a1 + 8 * a2;
    uint64_t v7 = (uint64_t *)(v6 + 24);
    uint64_t v8 = (uint64_t *)(v6 + 1056);
    if (a4 == 1) {
      uint64_t v8 = v7;
    }
    uint64_t v9 = *v8;
  }
  *a3 = v9;
  return v9 != 0;
}

BOOL CAVDLghDecoder::decodeGetRenderTargetRef(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *a3 = 0;
  BOOL v4 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v4)
  {
    int v6 = 136315394;
    uint64_t v7 = "decodeGetRenderTargetRef";
    __int16 v8 = 1024;
    int v9 = 2136;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v6, 0x12u);
    return *a3 != 0;
  }
  return result;
}

uint64_t CAVDLghDecoder::getFrameParams(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 11752)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 11744);
  return result;
}

__n128 CAVDLghDecoder::populateSnapshotStruct(CAVDLghDecoder *this, unsigned int a2, int a3)
{
  int v3 = (unsigned char *)*((void *)this + 2195);
  if (v3[37]) {
    BOOL v4 = v3[40] != 0;
  }
  else {
    BOOL v4 = 1;
  }
  *((unsigned char *)this + 17548) = v4;
  *((_DWORD *)this + 4386) = 0;
  if (!*v3)
  {
    uint64_t v5 = 0;
    int v6 = (_DWORD *)((char *)this + 17456);
    do
    {
      uint64_t v7 = *(void *)(*(void *)((char *)this + v5 + 17424) + 40);
      *((void *)v6 - 1) = *(void *)(v7 + 8);
      *int v6 = *(_DWORD *)v7;
      v6 += 4;
      v5 += 8;
    }
    while (v5 != 24);
    uint64_t v8 = *(void *)(*((void *)this + 2178) + 40);
    *((void *)this + 2187) = *(void *)(v8 + 8);
    *((_DWORD *)this + 4376) = *(_DWORD *)v8;
    unsigned int v9 = 1;
    *((_DWORD *)this + 4386) = 1;
    uint64_t v10 = *(void *)(*((void *)this + 2179) + 40);
    if (v10 != v8)
    {
      *((void *)this + 2189) = *(void *)(v10 + 8);
      *((_DWORD *)this + 4380) = *(_DWORD *)v10;
      unsigned int v9 = 2;
      *((_DWORD *)this + 4386) = 2;
    }
    uint64_t v11 = *(void *)(*((void *)this + 2180) + 40);
    if (v11 != v8 && v11 != v10)
    {
      __int16 v13 = (char *)this + 16 * v9;
      *((void *)v13 + 2187) = *(void *)(v11 + 8);
      *((_DWORD *)v13 + 4376) = *(_DWORD *)v11;
      *((_DWORD *)this + 4386) = v9 + 1;
    }
  }
  uint64_t v14 = *((void *)this + 261);
  long long v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)((char *)this + 2104) = *(_OWORD *)v14;
  *(_OWORD *)((char *)this + 2120) = v15;
  long long v16 = *(_OWORD *)(v14 + 32);
  long long v17 = *(_OWORD *)(v14 + 48);
  long long v18 = *(_OWORD *)(v14 + 80);
  *(_OWORD *)((char *)this + 2168) = *(_OWORD *)(v14 + 64);
  *(_OWORD *)((char *)this + 2184) = v18;
  *(_OWORD *)((char *)this + 2136) = v16;
  *(_OWORD *)((char *)this + 2152) = v17;
  long long v19 = *(_OWORD *)(v14 + 96);
  long long v20 = *(_OWORD *)(v14 + 112);
  long long v21 = *(_OWORD *)(v14 + 144);
  *(_OWORD *)((char *)this + 2232) = *(_OWORD *)(v14 + 128);
  *(_OWORD *)((char *)this + 2248) = v21;
  *(_OWORD *)((char *)this + 2200) = v19;
  *(_OWORD *)((char *)this + 2216) = v20;
  __n128 result = *(__n128 *)(v14 + 160);
  long long v23 = *(_OWORD *)(v14 + 176);
  long long v24 = *(_OWORD *)(v14 + 208);
  *(_OWORD *)((char *)this + 2296) = *(_OWORD *)(v14 + 192);
  *(_OWORD *)((char *)this + 2312) = v24;
  *(__n128 *)((char *)this + 2264) = result;
  *(_OWORD *)((char *)this + 2280) = v23;
  *((_DWORD *)this + 582) = a3;
  return result;
}

uint64_t CAVDLghDecoder::getRefBufIndex(CAVDLghDecoder *this, unsigned int a2)
{
  return *((unsigned int *)this + 4 * a2 + 4376);
}

uint64_t CAVDLghDecoder::getRefPicsNum(CAVDLghDecoder *this)
{
  if (*((unsigned char *)this + 17548)) {
    return 0;
  }
  else {
    return *((unsigned int *)this + 4386);
  }
}

uint64_t CAVDLghDecoder::setRefDartVAddr(uint64_t this, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(this + 16 * a2 + 17496) + 16) = a3;
  return this;
}

uint64_t LGH_RLM::find_available_frame_buffer(LGH_RLM *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned int *)(*((void *)this + 2) + 4);
  if (v2)
  {
    uint64_t result = 0;
    BOOL v4 = (int *)(*((void *)this + 3) + 36);
    while (1)
    {
      int v5 = *v4;
      v4 += 12;
      if (!v5) {
        break;
      }
      if (v2 == ++result) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    if ((*((unsigned char *)this + 10) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "find_available_frame_buffer";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: no frame buffer available\n", (uint8_t *)&v6, 0xCu);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t LGH_RLM::release_frame_buffer(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 36) - 1;
  *(_DWORD *)(a2 + 36) = v2;
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    BOOL v4 = *(uint64_t (**)(uint64_t, void))(v3 + 24);
    if (v4) {
      BOOL v5 = v2 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5) {
      return v4(a2, *(void *)(v3 + 16));
    }
  }
  return result;
}

void LGH_RLM::dump_fb_info(LGH_RLM *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((*((_DWORD *)this + 2) & 0x40002) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v11 = "dump_fb_info";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: ref frame map\n", buf, 0xCu);
  }
  uint64_t v2 = 0;
  uint64_t v3 = &_os_log_internal;
  do
  {
    if ((*((_DWORD *)this + 2) & 0x40002) != 0 && os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)((char *)this + v2 + 48);
      *(_DWORD *)buf = 67109120;
      LODWORD(v11) = v4;
      _os_log_impl(&dword_223977000, v3, OS_LOG_TYPE_DEFAULT, "AppleAVD:  %2d", buf, 8u);
    }
    v2 += 4;
  }
  while (v2 != 32);
  if ((*((_DWORD *)this + 2) & 0x40002) != 0)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)
      || (*(_WORD *)buf = 0,
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: \n", buf, 2u),
          (*((_DWORD *)this + 2) & 0x40002) != 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v11 = "dump_fb_info";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: fb refcnt\n", buf, 0xCu);
      }
    }
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5)
  {
    uint64_t v6 = -1;
    uint64_t v7 = 36;
    uint64_t v8 = &_os_log_internal;
    do
    {
      if (++v6 >= (unint64_t)*(unsigned int *)(v5 + 4)) {
        break;
      }
      if ((*((_DWORD *)this + 2) & 0x40002) != 0 && os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *((void *)this + 3);
        if (v9) {
          LODWORD(v9) = *(_DWORD *)(v9 + v7);
        }
        *(_DWORD *)buf = 67109120;
        LODWORD(v11) = v9;
        _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, "AppleAVD:  %2d", buf, 8u);
        uint64_t v5 = *((void *)this + 2);
      }
      v7 += 48;
    }
    while (v5);
  }
  if ((*((_DWORD *)this + 2) & 0x40002) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: \n", buf, 2u);
  }
}

__n128 LGH_RLM::LGH_RLM(__n128 *a1, unsigned __int32 a2, unint64_t a3)
{
  a1->n128_u64[0] = (unint64_t)&unk_26D7401C0;
  a1->n128_u32[2] = a2;
  a1[1].n128_u64[0] = a3;
  if (a3) {
    unint64_t v3 = *(void *)(a3 + 8);
  }
  else {
    unint64_t v3 = 0;
  }
  a1[1].n128_u64[1] = v3;
  a1[2].n128_u32[0] = -1;
  a1[2].n128_u64[1] = 0;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  a1[3] = result;
  a1[4] = result;
  a1[5].n128_u64[0] = 0;
  a1[5].n128_u32[2] = 0;
  return result;
}

__n128 LGH_RLM::flush_RLM(__n128 *this)
{
  uint64_t v2 = 0;
  unint64_t v3 = this + 3;
  do
  {
    unint64_t v4 = this[1].n128_u64[1];
    if (!v4) {
      break;
    }
    signed __int32 v5 = v3->n128_i32[v2];
    if (v5 != -1)
    {
      unint64_t v6 = v4 + 48 * v5;
      int v9 = *(_DWORD *)(v6 + 36);
      uint64_t v7 = (_DWORD *)(v6 + 36);
      int v8 = v9;
      if (v9)
      {
        int v10 = v8 - 1;
        *uint64_t v7 = v8 - 1;
        unint64_t v11 = this[1].n128_u64[0];
        if (v11)
        {
          uint64_t v12 = *(void (**)(unint64_t, void))(v11 + 24);
          if (v12) {
            BOOL v13 = v10 == 0;
          }
          else {
            BOOL v13 = 0;
          }
          if (v13) {
            v12(v4 + 48 * v5, *(void *)(v11 + 16));
          }
        }
      }
    }
    ++v2;
  }
  while (v2 != 8);
  this[2].n128_u32[0] = -1;
  this[2].n128_u64[1] = 0;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  this[3] = result;
  this[4] = result;
  this[5].n128_u64[0] = 0;
  this[5].n128_u32[2] = 0;
  return result;
}

void LGH_RLM::~LGH_RLM(__n128 *this)
{
  this->n128_u64[0] = (unint64_t)&unk_26D7401C0;
  LGH_RLM::flush_RLM(this);
}

{
  uint64_t vars8;

  LGH_RLM::~LGH_RLM(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t LGH_RLM::Update_Frame_Bufs(LGH_RLM *this, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 8) = -1;
  *((void *)this + 5) = 0;
  if (!a2 || !a3 || (uint64_t v6 = *((void *)this + 3)) == 0)
  {
    if ((*((unsigned char *)this + 10) & 1) == 0 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v10 = *((void *)this + 3);
    int v40 = 136315906;
    unsigned int v41 = "Update_Frame_Bufs";
    __int16 v42 = 2048;
    *(void *)uint64_t v43 = a2;
    *(_WORD *)&v43[8] = 2048;
    uint64_t v44 = a3;
    *(_WORD *)int v45 = 2048;
    *(void *)&v45[2] = v10;
    unint64_t v11 = &_os_log_internal;
    uint64_t v12 = "AppleAVD: %s: invalid hdr %p buffer pointer %p pool %p\n";
    uint32_t v13 = 42;
    goto LABEL_11;
  }
  if (*(unsigned char *)a2)
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 1);
    int v8 = *((_DWORD *)this + v7 + 12);
    if (v8 != -1 && *(_DWORD *)(v6 + 48 * v8 + 36))
    {
      uint64_t v9 = 0;
      *((_DWORD *)this + 8) = v8;
      *((void *)this + 5) = v6 + 48 * v8;
      return v9;
    }
    if ((*((unsigned char *)this + 10) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v40 = 136315394;
      unsigned int v41 = "Update_Frame_Bufs";
      __int16 v42 = 1024;
      *(_DWORD *)uint64_t v43 = v7;
      unint64_t v11 = &_os_log_internal;
      uint64_t v12 = "AppleAVD: %s: invalid frame to show map idx %d\n";
      uint32_t v13 = 18;
LABEL_11:
      _os_log_impl(&dword_223977000, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v40, v13);
    }
    return 0xFFFFFFFFLL;
  }
  int available_frame_buffer = LGH_RLM::find_available_frame_buffer(this);
  *((_DWORD *)this + 8) = available_frame_buffer;
  if (available_frame_buffer != -1)
  {
    uint64_t v16 = *((void *)this + 3);
    if (*(unsigned char *)(a2 + 6)) {
      *((void *)this + 5) = v16 + 48 * available_frame_buffer;
    }
    unsigned int v17 = *(_DWORD *)(a2 + 76);
    uint64_t v18 = v16 + 48 * available_frame_buffer;
    *(_DWORD *)uint64_t v18 = v17;
    unsigned int v19 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(v18 + 4) = v19;
    int v20 = *(unsigned __int8 *)(a2 + 73);
    *(_DWORD *)(v18 + 8) = v20;
    v15.i32[0] = *(_DWORD *)(a2 + 9);
    uint32x4_t v21 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v15));
    *(uint32x4_t *)(v18 + 12) = v21;
    *(void *)(v18 + 28) = *(void *)(a2 + 100);
    *(_DWORD *)(v18 + 36) = 0;
    *(void *)(v18 + 40) = a3;
    if (!*(unsigned char *)(a2 + 5))
    {
      uint64_t v9 = 0;
      *((void *)this + 10) = 0;
      *((void *)this + 11) = 0;
      *((void *)this + 12) = 0;
      return v9;
    }
    int v22 = *(unsigned __int8 *)(a2 + 8);
    if (*(unsigned char *)(a2 + 8)) {
      return 0;
    }
    uint64_t v24 = 0;
    __int32 v25 = v21.i32[2];
    __int32 v26 = v21.i32[3];
    do
    {
      uint64_t v27 = *(unsigned __int8 *)(a2 + 14 + v24);
      int v28 = *((_DWORD *)this + v27 + 12);
      if (v28 == -1)
      {
        if ((*((unsigned char *)this + 10) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v40 = 136315650;
          unsigned int v41 = "Update_Frame_Bufs";
          __int16 v42 = 1024;
          *(_DWORD *)uint64_t v43 = v24;
          *(_WORD *)&v43[4] = 1024;
          *(_DWORD *)&v43[6] = v27;
          unint64_t v11 = &_os_log_internal;
          uint64_t v12 = "AppleAVD: %s: invalid ref_frame_idx[%d] %d\n";
          uint32_t v13 = 24;
          goto LABEL_11;
        }
        return 0xFFFFFFFFLL;
      }
      uint64_t v29 = (unsigned int *)(v16 + 48 * v28);
      unsigned int v30 = v29[2];
      if (v30 != v20 || *(void *)(v16 + 48 * v28 + 20) != v21.i64[1])
      {
        if ((*((unsigned char *)this + 10) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v38 = v16 + 48 * v28;
          int v39 = *(_DWORD *)(v38 + 20);
          LODWORD(v38) = *(_DWORD *)(v38 + 24);
          int v40 = 136316674;
          unsigned int v41 = "Update_Frame_Bufs";
          __int16 v42 = 1024;
          *(_DWORD *)uint64_t v43 = v20;
          *(_WORD *)&v43[4] = 1024;
          *(_DWORD *)&v43[6] = v30;
          LOWORD(v44) = 1024;
          *(_DWORD *)((char *)&v44 + 2) = v25;
          HIWORD(v44) = 1024;
          *(_DWORD *)int v45 = v39;
          *(_WORD *)&v45[4] = 1024;
          *(_DWORD *)&v45[6] = v26;
          __int16 v46 = 1024;
          int v47 = v38;
          unint64_t v11 = &_os_log_internal;
          uint64_t v12 = "AppleAVD: %s: cur and ref frame format mismatch bd %d-%d ssx %d-%d ssy %d-%d\n";
          uint32_t v13 = 48;
          goto LABEL_11;
        }
        return 0xFFFFFFFFLL;
      }
      unsigned int v31 = *v29;
      if (2 * v17 >= v31)
      {
        unsigned int v32 = *(_DWORD *)(v16 + 48 * v28 + 4);
        BOOL v33 = v19 <= 16 * v32 && 2 * v19 >= v32;
        unsigned int v34 = 16 * v31;
        if (v33 && v17 <= v34) {
          int v22 = 1;
        }
      }
      ++v24;
    }
    while (v24 != 3);
    if (v22)
    {
      uint64_t v36 = 0;
      uint64_t v37 = a2 + 14;
      do
      {
        uint64_t v9 = 0;
        *((void *)this + v36 + 10) = v16 + 48 * *((int *)this + *(unsigned __int8 *)(v37 + v36) + 12);
        ++v36;
      }
      while (v36 != 3);
      return v9;
    }
    if ((*((unsigned char *)this + 10) & 1) != 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v40 = 136315138;
      unsigned int v41 = "Update_Frame_Bufs";
      unint64_t v11 = &_os_log_internal;
      uint64_t v12 = "AppleAVD: %s: no reference frame has valid dimensions\n";
      uint32_t v13 = 12;
      goto LABEL_11;
    }
    return 0xFFFFFFFFLL;
  }
  if ((*((unsigned char *)this + 10) & 1) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = 0xFFFFFFFFLL;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v40 = 136315394;
    unsigned int v41 = "Update_Frame_Bufs";
    __int16 v42 = 1024;
    *(_DWORD *)uint64_t v43 = -1;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: LGH Internal bufferpool is full, invalid index %d\n", (uint8_t *)&v40, 0x12u);
  }
  return v9;
}

uint64_t LGH_RLM::Get_Ref_Pic_List(LGH_RLM *this)
{
  return (uint64_t)this + 80;
}

void LGH_RLM::Swap_Frame_Bufs(LGH_RLM *this, unsigned char *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    int v4 = *((_DWORD *)this + 8);
    if (v4 != -1)
    {
      unsigned int v6 = a2[4];
      for (uint64_t i = 48; i != 80; i += 4)
      {
        if (*a2) {
          break;
        }
        if (v6)
        {
          unsigned int v8 = *(_DWORD *)((char *)this + i);
          if ((v8 & 0x80000000) == 0)
          {
            uint64_t v9 = v2 + 48 * v8;
            int v12 = *(_DWORD *)(v9 + 36);
            uint64_t v10 = (_DWORD *)(v9 + 36);
            int v11 = v12;
            if (v12)
            {
              int v13 = v11 - 1;
              *uint64_t v10 = v11 - 1;
              uint64_t v14 = *((void *)this + 2);
              if (v14)
              {
                uint8x8_t v15 = *(void (**)(uint64_t, void))(v14 + 24);
                if (v15 && v13 == 0)
                {
                  v15(v2 + 48 * v8, *(void *)(v14 + 16));
                  int v4 = *((_DWORD *)this + 8);
                  uint64_t v2 = *((void *)this + 3);
                }
              }
            }
          }
          *(_DWORD *)((char *)this + i) = v4;
          ++*(_DWORD *)(v2 + 48 * v4 + 36);
        }
        v6 >>= 1;
      }
      if (!a2[4])
      {
        uint64_t v17 = *((void *)this + 2);
        if (v17)
        {
          uint64_t v18 = *(void (**)(uint64_t, void))(v17 + 24);
          if (v18 && *(_DWORD *)(v2 + 48 * v4 + 36) == 0) {
            v18(v2 + 48 * v4, *(void *)(v17 + 16));
          }
        }
      }
      LGH_RLM::dump_fb_info(this);
    }
  }
}

uint64_t LGH_RLM::Get_Disp_Buf(LGH_RLM *this)
{
  return *((void *)this + 5);
}

uint64_t LGH_RLM::Rel_Disp_Buf(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(_DWORD *)(a2 + 36);
    if (v2)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(_DWORD *)v3)
        {
          int v4 = v2 - 1;
          *(_DWORD *)(a2 + 36) = v4;
          if (!v4)
          {
            signed __int32 v5 = *(uint64_t (**)(uint64_t, void))(v3 + 24);
            if (v5) {
              return v5(a2, *(void *)(v3 + 16));
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t HEVCDMABufferAlloc()
{
  return 0;
}

unsigned __int8 *swapfunc(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3, int a4)
{
  if (a4 >= 2)
  {
    do
    {
      unsigned __int8 v5 = *result;
      *result++ = *a2;
      *a2++ = v5;
      --a3;
    }
    while (a3);
  }
  else
  {
    do
    {
      uint64_t v4 = *(void *)result;
      *(void *)__n128 result = *(void *)a2;
      result += 8;
      *(void *)a2 = v4;
      a2 += 8;
      a3 -= 8;
    }
    while (a3);
  }
  return result;
}

unsigned __int8 *med3(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t (*a4)(void))
{
  int v8 = a4();
  int v9 = ((uint64_t (*)(unsigned __int8 *, unsigned __int8 *))a4)(a2, a3);
  if (v8 < 0)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if (((int (*)(unsigned __int8 *, unsigned __int8 *))a4)(a1, a3) >= 0) {
        return a1;
      }
      else {
        return a3;
      }
    }
  }
  else if (v9 <= 0)
  {
    if (((int (*)(unsigned __int8 *, unsigned __int8 *))a4)(a1, a3) <= 0) {
      return a1;
    }
    else {
      return a3;
    }
  }
  return a2;
}

uint64_t qSort(uint64_t result, unsigned int a2, unsigned int a3, uint64_t (*a4)(void))
{
  uint64_t v7 = (unsigned __int8 *)result;
  uint64_t v69 = 0;
  unint64_t v8 = a3;
  uint64_t v9 = -(uint64_t)a3;
  uint64_t v67 = (a3 | result) & 7;
  if (((a3 | result) & 7) != 0) {
    int v10 = 2;
  }
  else {
    int v10 = a3 > 8;
  }
  int v68 = v10;
  if (a2 > 6)
  {
    uint64_t v24 = (unsigned __int8 *)(result + (a2 >> 1) * a3);
    if (a2 != 7)
    {
      __int32 v25 = (unsigned __int8 *)(result + (a2 - 1) * a3);
      if (a2 < 0x29)
      {
        uint64_t v27 = (unsigned __int8 *)result;
      }
      else
      {
        uint64_t v26 = (a2 >> 3) * a3;
        uint64_t v27 = med3((unsigned __int8 *)result, (unsigned __int8 *)(result + v26), (unsigned __int8 *)(result + 2 * v26), a4);
        uint64_t v24 = med3(&v24[-v26], &v7[(a2 >> 1) * a3], &v24[v26], a4);
        __int32 v25 = med3(&v25[-2 * v26], &v25[-v26], v25, a4);
      }
      __n128 result = (uint64_t)med3(v27, v24, v25, a4);
      uint64_t v24 = (unsigned __int8 *)result;
    }
    if (v68)
    {
      uint64_t v28 = v67;
      if (v67)
      {
        uint64_t v29 = 0;
        do
        {
          unsigned __int8 v30 = v7[v29];
          v7[v29] = v24[v29];
          v24[v29++] = v30;
        }
        while (v8 != v29);
      }
      else
      {
        do
        {
          uint64_t v31 = *(void *)&v7[v28];
          *(void *)&v7[v28] = *(void *)&v24[v28];
          *(void *)&v24[v28] = v31;
          v28 += 8;
        }
        while (v8 != v28);
      }
      unsigned int v32 = v7;
    }
    else
    {
      uint64_t v69 = *(void *)v24;
      unsigned int v32 = (unsigned __int8 *)&v69;
    }
    unsigned int v66 = a2;
    BOOL v33 = &v7[(a2 - 1) * a3];
    unsigned int v34 = v7;
    uint64_t v35 = v7;
    uint64_t v36 = v33;
LABEL_35:
    while (v35 <= v33)
    {
      __n128 result = ((uint64_t (*)(unsigned __int8 *, unsigned __int8 *))a4)(v35, v32);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v68)
        {
          uint64_t v37 = v67;
          if (v67)
          {
            uint64_t v38 = 0;
            do
            {
              unsigned __int8 v39 = v34[v38];
              v34[v38] = v35[v38];
              v35[v38++] = v39;
            }
            while (v8 != v38);
          }
          else
          {
            do
            {
              uint64_t v40 = *(void *)&v34[v37];
              *(void *)&v34[v37] = *(void *)&v35[v37];
              *(void *)&v35[v37] = v40;
              v37 += 8;
            }
            while (v8 != v37);
          }
        }
        else
        {
          uint64_t v50 = *(void *)v34;
          *(void *)unsigned int v34 = *(void *)v35;
          *(void *)uint64_t v35 = v50;
        }
        v34 += v8;
      }
      v35 += v8;
    }
    while (v35 <= v33)
    {
      __n128 result = ((uint64_t (*)(unsigned __int8 *, unsigned __int8 *))a4)(v33, v32);
      if ((result & 0x80000000) != 0)
      {
        if (v68)
        {
          uint64_t v46 = v67;
          if (v67)
          {
            uint64_t v47 = 0;
            do
            {
              unsigned __int8 v48 = v35[v47];
              v35[v47] = v33[v47];
              v33[v47++] = v48;
            }
            while (v8 != v47);
          }
          else
          {
            do
            {
              uint64_t v49 = *(void *)&v35[v46];
              *(void *)&v35[v46] = *(void *)&v33[v46];
              *(void *)&v33[v46] = v49;
              v46 += 8;
            }
            while (v8 != v46);
          }
        }
        else
        {
          uint64_t v51 = *(void *)v35;
          *(void *)uint64_t v35 = *(void *)v33;
          *(void *)BOOL v33 = v51;
        }
        v35 += v8;
        v33 += v9;
        goto LABEL_35;
      }
      if (!result)
      {
        if (v68)
        {
          uint64_t v41 = v67;
          if (v67)
          {
            uint64_t v42 = 0;
            do
            {
              unsigned __int8 v43 = v33[v42];
              v33[v42] = v36[v42];
              v36[v42++] = v43;
            }
            while (v8 != v42);
          }
          else
          {
            do
            {
              uint64_t v44 = *(void *)&v33[v41];
              *(void *)&v33[v41] = *(void *)&v36[v41];
              *(void *)&v36[v41] = v44;
              v41 += 8;
            }
            while (v8 != v41);
          }
        }
        else
        {
          uint64_t v45 = *(void *)v33;
          *(void *)BOOL v33 = *(void *)v36;
          *(void *)uint64_t v36 = v45;
        }
        v36 += v9;
      }
      v33 += v9;
    }
    long long v52 = &v7[a3 * v66];
    int64_t v53 = v34 - v7;
    unint64_t v54 = v35 - v34;
    if (v34 - v7 >= v35 - v34) {
      int64_t v53 = v35 - v34;
    }
    if (v53)
    {
      int64_t v55 = -v53;
      if (v67)
      {
        long long v56 = v7;
        do
        {
          unsigned __int8 v57 = *v56;
          *v56++ = v35[v55];
          v35[v55] = v57;
          BOOL v58 = __CFADD__(v55++, 1);
        }
        while (!v58);
      }
      else
      {
        int v59 = v7;
        do
        {
          uint64_t v60 = *(void *)v59;
          *(void *)int v59 = *(void *)&v35[v55];
          v59 += 8;
          *(void *)&v35[v55] = v60;
          v55 += 8;
        }
        while (v55);
      }
    }
    unint64_t v61 = v36 - v33;
    int64_t v62 = v52 - &v36[v8];
    if (v36 - v33 < v62) {
      int64_t v62 = v36 - v33;
    }
    if (v62)
    {
      int64_t v63 = -v62;
      if (v67)
      {
        do
        {
          unsigned __int8 v64 = *v35;
          *v35++ = v52[v63];
          v52[v63] = v64;
          BOOL v58 = __CFADD__(v63++, 1);
        }
        while (!v58);
      }
      else
      {
        do
        {
          uint64_t v65 = *(void *)v35;
          *(void *)uint64_t v35 = *(void *)&v52[v63];
          v35 += 8;
          *(void *)&v52[v63] = v65;
          v63 += 8;
        }
        while (v63);
      }
    }
    if (v54 > v8) {
      __n128 result = qSort(v7, v54 / v8, a3, (int (*)(const void *, const void *))a4);
    }
    if (v61 > v8) {
      return qSort(&v52[-v61], v61 / v8, a3, (int (*)(const void *, const void *))a4);
    }
  }
  else
  {
    unint64_t v11 = a3 * a2;
    if (a3 < v11)
    {
      unint64_t v12 = result + v11;
      int v13 = (unsigned __int8 *)(result + a3);
      uint64_t v14 = result;
      do
      {
        if (v13 > v7)
        {
          uint64_t v15 = v14;
          uint64_t v16 = v13;
          do
          {
            uint64_t v17 = v16;
            v16 += v9;
            __n128 result = ((uint64_t (*)(unsigned __int8 *, unsigned __int8 *))a4)(v16, v17);
            if ((int)result < 1) {
              break;
            }
            if (v68)
            {
              uint64_t v18 = v67;
              if (v67)
              {
                uint64_t v19 = 0;
                do
                {
                  unsigned __int8 v20 = v17[v19];
                  v17[v19] = *(unsigned char *)(v15 + v19);
                  *(unsigned char *)(v15 + v19++) = v20;
                }
                while (v8 != v19);
              }
              else
              {
                unint64_t v22 = v15 + v8;
                do
                {
                  uint64_t v23 = *(void *)(v22 + v18);
                  *(void *)(v22 + v18) = *(void *)(v15 + v18);
                  *(void *)(v15 + v18) = v23;
                  v18 += 8;
                }
                while (v8 != v18);
              }
            }
            else
            {
              uint64_t v21 = *(void *)v17;
              *(void *)uint64_t v17 = *(void *)v16;
              *(void *)uint64_t v16 = v21;
            }
            v15 += v9;
          }
          while (v16 > v7);
        }
        v13 += v8;
        v14 += v8;
      }
      while ((unint64_t)v13 < v12);
    }
  }
  return result;
}

CAHDecSalviaAvc *createSalviaAvcDecoder(CAVDAvcDecoder *a1)
{
  int v2 = (CAHDecSalviaAvc *)operator new(0x3EE0uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecSalviaAvc::CAHDecSalviaAvc(v2, a1);
  }
  return v3;
}

void sub_223A74BDC(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecSalviaAvc::CAHDecSalviaAvc(CAHDecSalviaAvc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73F728;
  uint64_t v2 = *(void *)(v1 + 256);
  *(_DWORD *)(v1 + 456) = 944 * *(unsigned __int16 *)(v2 + 7500) + 165448;
  *(_DWORD *)(v1 + 8) = 1608;
  *(_OWORD *)(v1 + 16) = xmmword_223AD07E0;
  *(_DWORD *)(v1 + 32) = 1;
  *(void *)(v1 + 56) = v2;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecSalviaAvc::CAHDecSalviaAvc(CAHDecSalviaAvc *this, CAVDAvcDecoder *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73F728;
  *(void *)(v4 + 256) = a2;
  uint64_t v5 = 944 * *((unsigned __int16 *)a2 + 3750) + 165448;
  *(_DWORD *)(v4 + 456) = v5;
  *(_DWORD *)(v4 + 8) = 1608;
  *(_OWORD *)(v4 + 16) = xmmword_223AD07E0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), v5, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      unint64_t v8 = "CAHDecSalviaAvc";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v7, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v6 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v6;
    *((void *)this + 34) = v6;
    *((_OWORD *)this + 995) = 0u;
    *((_OWORD *)this + 996) = 0u;
    *((_OWORD *)this + 997) = 0u;
    *((_OWORD *)this + 998) = 0u;
    *((_OWORD *)this + 999) = 0u;
    *((_OWORD *)this + 1000) = 0u;
    *((_OWORD *)this + 1001) = 0u;
    *((_OWORD *)this + 1002) = 0u;
    *((_OWORD *)this + 1003) = 0u;
    *((_OWORD *)this + 1004) = 0u;
    *((_OWORD *)this + 1005) = 0u;
    bzero((char *)this + 560, 0x3BD0uLL);
  }
}

void sub_223A74E08(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecSalviaAvc::~CAHDecSalviaAvc(CAHDecSalviaAvc *this)
{
  *(void *)this = &unk_26D73F728;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecSalviaAvc::~CAHDecSalviaAvc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecSalviaAvc::initPicture(CAHDecSalviaAvc *this, int a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v5 = 944 * *(unsigned __int16 *)(*((void *)this + 32) + 7500) + 165448;
  *((_DWORD *)this + 114) = v5;
  *((_DWORD *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v6;
  if (v6)
  {
    bzero(v6, v5);
    uint64_t v8 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v8 + 16) = a2;
    *(_WORD *)(v8 + 24) = 257;
    *(_WORD *)(v8 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 3975) = 0;
    *((void *)this + 1995) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "initPicture";
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v10, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecSalviaAvc::populateSlices(CAHDecSalviaAvc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 1608;
    uint64_t v5 = a2;
    do
    {
      CAHDecSalviaAvc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 944;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecSalviaAvc::populateSliceRegisters(uint64_t a1, uint64_t a2, signed int a3)
{
  char v6 = 0;
  uint64_t v120 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 256);
  int v105 = *(_DWORD *)(v7 + 3616);
  int v103 = *(_DWORD *)(v7 + 3612);
  uint64_t v104 = *(void *)(v7 + 3304);
  uint64_t v102 = *(void *)(v7 + 3296);
  uint64_t v8 = *(void *)(v7 + 3312);
  uint64_t v9 = *(unsigned int *)(v7 + 7064);
  uint64_t v10 = *(void *)(v7 + 3320);
  *(_DWORD *)(a2 + 4) = 0;
  uint64_t v12 = v8 + 1848 * a3;
  int v13 = 32 * (*(unsigned char *)(v12 + 1424) & 3);
  *(_DWORD *)(a2 + 4) = v13;
  int v15 = *(unsigned __int8 *)(v12 + 24);
  uint64_t v14 = (unsigned char *)(v12 + 24);
  if (v15 != 2) {
    char v6 = *(unsigned char *)(v8 + 1848 * a3 + 63);
  }
  unsigned int v16 = v13 & 0xFFFF87FF | ((v6 & 0xF) << 11);
  *(_DWORD *)(a2 + 4) = v16;
  if (*v14 == 1) {
    char v17 = *(unsigned char *)(v8 + 1848 * a3 + 64);
  }
  else {
    char v17 = 0;
  }
  int v18 = ((v17 & 0xF) << 7) | v16;
  *(_DWORD *)(a2 + 4) = v18;
  if (*v14 == 1 && !*(unsigned char *)(v8 + 1848 * a3 + 61)) {
    int v19 = 0x8000;
  }
  else {
    int v19 = 0;
  }
  int v20 = v19 | v18;
  *(_DWORD *)(a2 + 4) = v20;
  if (*v14) {
    int v21 = 0x20000;
  }
  else {
    int v21 = 0x10000;
  }
  if (*v14 == 1) {
    int v22 = 0;
  }
  else {
    int v22 = v21;
  }
  *(_DWORD *)(a2 + 4) = v22 | v20;
  if (*v14 != 1) {
    goto LABEL_20;
  }
  uint64_t v23 = v10 + 13040 * a3 + 7224;
  uint64_t v24 = v8 + 1848 * a3;
  *(void *)(v24 + 1832) = v23;
  if (*(unsigned char *)(v10 + 13040 * a3 + 7227)
    || (uint64_t v25 = *(unsigned int *)(v10 + 13040 * a3 + 7256), *(_DWORD *)(a1 + 4 * v25 + 464)))
  {
    int v26 = 16;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 15900))
    {
      *(void *)(a1 + 15960) = *(void *)(v10 + 13040 * a3 + 7264);
      *(_DWORD *)(a1 + 15952) = v25;
      *(_DWORD *)(a1 + 15900) = 1;
      *(_DWORD *)(a2 + 4) |= 0x40000u;
      uint64_t v23 = *(void *)(v24 + 1832);
      if (!v23 || !*(_DWORD *)(a1 + 15900)) {
        goto LABEL_20;
      }
    }
    uint64_t v99 = *(void *)(v23 + 40);
    if (v99 == *(void *)(a1 + 15960)) {
      goto LABEL_20;
    }
    *(void *)(a1 + 15960) = v99;
    *(_DWORD *)(a1 + 15952) = *(_DWORD *)(v23 + 32);
    int v26 = 0x40000;
  }
  *(_DWORD *)(a2 + 4) |= v26;
LABEL_20:
  *(_DWORD *)(a2 + 920) = 0;
  int v27 = *(_DWORD *)(a2 + 4);
  if (*v14 == 1 && (v27 & 0x40000) != 0)
  {
    uint64_t v29 = (_OWORD *)(a1 + 176 * *(unsigned int *)(*(void *)(v8 + 1848 * a3 + 1832) + 32));
    long long v30 = v29[658];
    long long v31 = v29[660];
    long long v117 = v29[659];
    long long v118 = v31;
    long long v119 = v29[661];
    long long v32 = v29[654];
    long long v33 = v29[656];
    long long v113 = v29[655];
    long long v114 = v33;
    long long v115 = v29[657];
    long long v116 = v30;
    long long v34 = v29[652];
    *(_OWORD *)buf = v29[651];
    *(_OWORD *)&buf[16] = v34;
    long long v111 = v29[653];
    long long v112 = v32;
    *(_DWORD *)(a1 + 15900) = 1;
    if (*(void *)buf || *((void *)&v118 + 1))
    {
      uint64_t result = CAHDec::addToPatcherList(a1, buf, 944 * a3 + 2528, 0, 0xFFFFFFFFLL, 8, 0xFFFFFF, 4);
      if (result) {
        return result;
      }
    }
    int v27 = *(_DWORD *)(a2 + 4);
  }
  uint64_t v107 = v10;
  unsigned int v100 = a3;
  uint64_t v101 = a1;
  *(_DWORD *)(a2 + 4) = v27 & 0x77FFFF | 0x2D000000;
  __int16 v106 = v14;
  unsigned int v36 = *v14;
  if (v36 <= 1)
  {
    uint64_t v37 = v7 + 6872;
    uint64_t v38 = v10 + 13040 * a3;
    if (*(_DWORD *)(v38 + 13032))
    {
      unint64_t v39 = 0;
      uint64_t v40 = (unsigned int *)(v38 + 13032);
      uint64_t v41 = v10 + 13040 * a3 + 1416;
      uint64_t v42 = &_os_log_internal;
      do
      {
        uint64_t v43 = a2 + 4 * v39;
        int v44 = (16 * (v39 & 0xF)) | 0x2DC00000;
        *(_DWORD *)(v43 + 8) = v44;
        uint64_t v45 = (_DWORD *)(v43 + 8);
        if (v9)
        {
          uint64_t v46 = 0;
          while (*(_DWORD *)(*(void *)(v37 + 8 * v46) + 12) != *(_DWORD *)(v41 + 176 * v39 + 12))
          {
            if (v9 == ++v46) {
              goto LABEL_35;
            }
          }
          *uint64_t v45 = v46 & 0xF | v44;
        }
        else
        {
LABEL_35:
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            int v47 = *(_DWORD *)(v41 + 176 * v39 + 32);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v39;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v47;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&buf[16] = v9;
            _os_log_impl(&dword_223977000, v42, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-0 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
          }
        }
        ++v39;
      }
      while (v39 < *v40);
      unsigned int v36 = *v106;
    }
    else
    {
      LODWORD(v39) = 0;
    }
    if (v36 == 1)
    {
      uint64_t v48 = v10 + 13040 * a3;
      if (*(_DWORD *)(v48 + 13036))
      {
        unint64_t v49 = 0;
        uint64_t v50 = (unsigned int *)(v48 + 13036);
        uint64_t v51 = &_os_log_internal;
        do
        {
          uint64_t v52 = a2 + 4 * v39;
          int v53 = (16 * (v49 & 0xF)) | 0x2DC00100;
          *(_DWORD *)(v52 + 8) = v53;
          unint64_t v54 = (_DWORD *)(v52 + 8);
          if (v9)
          {
            uint64_t v55 = 0;
            while (*(_DWORD *)(*(void *)(v37 + 8 * v55) + 12) != *(_DWORD *)(v107 + 13040 * a3 + 176 * v49 + 7236))
            {
              if (v9 == ++v55) {
                goto LABEL_49;
              }
            }
            *unint64_t v54 = v55 & 0xF | v53;
          }
          else
          {
LABEL_49:
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            {
              int v56 = *(_DWORD *)(v107 + 13040 * a3 + 176 * v49 + 7256);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v39;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v56;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&buf[16] = v9;
              _os_log_impl(&dword_223977000, v51, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-1 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
            }
          }
          LODWORD(v39) = v39 + 1;
          ++v49;
        }
        while (v49 < *v50);
      }
    }
  }
  *(void *)(a2 + 136) = 0x2DD0000000000000;
  uint64_t v57 = v104 + 604 * v105;
  BOOL v58 = (char *)(v57 + 88);
  int v59 = (char *)(v57 + 87);
  if (*v106 == 1) {
    uint64_t v60 = v58;
  }
  else {
    uint64_t v60 = v59;
  }
  char v61 = *v60;
  *(_DWORD *)(a2 + 140) = ((v61 & 3) << 6) | 0x2DD00000;
  int v62 = ((v61 & 3) << 6) | 0x2DD00000 | (8 * (*(unsigned char *)(v8 + 1848 * a3 + 376) & 7));
  *(_DWORD *)(a2 + 140) = v62;
  int v63 = *(unsigned __int8 *)(v102 + 2224 * v103 + 4);
  if (*(unsigned char *)(v102 + 2224 * v103 + 4)) {
    int v63 = *(unsigned char *)(v8 + 1848 * a3 + 377) & 7;
  }
  *(_DWORD *)(a2 + 140) = v63 | v62;
  int v64 = *v106;
  if (v64 != 1) {
    goto LABEL_108;
  }
  int v65 = *v58;
  if (v65 != 2) {
    goto LABEL_62;
  }
  *(_DWORD *)(a2 + 140) = ((v61 & 3) << 6) | 0x2DD0002D;
  int v64 = *v106;
  if (v64 != 1)
  {
LABEL_108:
    if (v64 || !*v59) {
      goto LABEL_82;
    }
LABEL_66:
    unsigned int v66 = 0;
    unsigned int v67 = 0;
    do
    {
      uint64_t v68 = v66;
      if (*(unsigned char *)(v8 + 1848 * a3 + v66 + 378))
      {
        int v69 = ((v66 & 0xF) << 9) | 0x2DE04000;
        uint64_t v70 = a2 + 4 * v67;
        *(_DWORD *)(v70 + 144) = v69;
        uint64_t v71 = v8 + 1848 * a3 + 2 * v68;
        *(_DWORD *)(v70 + 144) = v69 | *(_WORD *)(v71 + 394) & 0x1FF;
        *(_DWORD *)(v70 + 528) = 770703360;
        *(_DWORD *)(v70 + 528) = *(unsigned __int16 *)(v71 + 426) | 0x2DF00000;
        ++v67;
      }
      if (*(unsigned char *)(v8 + 1848 * a3 + v68 + 458))
      {
        uint64_t v72 = 0;
        char v73 = 1;
        do
        {
          char v74 = v73;
          int v75 = ((v68 & 0xF) << 9) | (v72 << 14) | 0x2DE08000;
          uint64_t v76 = a2 + 4 * v67;
          *(_DWORD *)(v76 + 144) = v75;
          uint64_t v77 = v8 + 1848 * a3 + 4 * v68 + 2 * v72;
          *(_DWORD *)(v76 + 144) = v75 | *(_WORD *)(v77 + 474) & 0x1FF;
          *(_DWORD *)(v76 + 528) = 770703360;
          *(_DWORD *)(v76 + 528) = *(unsigned __int16 *)(v77 + 538) | 0x2DF00000;
          ++v67;
          uint64_t v72 = 1;
          char v73 = 0;
        }
        while ((v74 & 1) != 0);
      }
      unsigned int v66 = v68 + 1;
    }
    while ((int)v68 + 1 <= *(char *)(v8 + 1848 * a3 + 63));
    if (*v106 == 1)
    {
      unsigned int v78 = 0;
      do
      {
        uint64_t v79 = v78;
        if (*(unsigned char *)(v8 + 1848 * a3 + v78 + 602))
        {
          int v80 = ((v78 & 0xF) << 9) | 0x2DE06000;
          uint64_t v81 = a2 + 4 * v67;
          *(_DWORD *)(v81 + 144) = v80;
          uint64_t v82 = v8 + 1848 * a3 + 2 * v79;
          *(_DWORD *)(v81 + 144) = v80 | *(_WORD *)(v82 + 618) & 0x1FF;
          *(_DWORD *)(v81 + 528) = 770703360;
          *(_DWORD *)(v81 + 528) = *(unsigned __int16 *)(v82 + 650) | 0x2DF00000;
          ++v67;
        }
        if (*(unsigned char *)(v8 + 1848 * a3 + v79 + 682))
        {
          uint64_t v83 = 0;
          char v84 = 1;
          do
          {
            char v85 = v84;
            int v86 = ((v79 & 0xF) << 9) | (v83 << 14) | 0x2DE0A000;
            uint64_t v87 = a2 + 4 * v67;
            *(_DWORD *)(v87 + 144) = v86;
            uint64_t v88 = v8 + 1848 * a3 + 4 * v79 + 2 * v83;
            *(_DWORD *)(v87 + 144) = v86 | *(_WORD *)(v88 + 698) & 0x1FF;
            *(_DWORD *)(v87 + 528) = 770703360;
            *(_DWORD *)(v87 + 528) = *(unsigned __int16 *)(v88 + 762) | 0x2DF00000;
            ++v67;
            uint64_t v83 = 1;
            char v84 = 0;
          }
          while ((v85 & 1) != 0);
        }
        unsigned int v78 = v79 + 1;
      }
      while ((int)v79 + 1 <= *(char *)(v8 + 1848 * a3 + 64));
    }
    *(_DWORD *)(a2 + 136) = v67;
    goto LABEL_82;
  }
  int v65 = *v58;
LABEL_62:
  if (v65 == 1) {
    goto LABEL_66;
  }
LABEL_82:
  *(_DWORD *)(a2 + 912) = 0;
  uint64_t v89 = v8 + 1848 * a3;
  *(_DWORD *)(a2 + 912) = (((*(unsigned __int8 *)(v104 + 604 * v105 + 89) + *(unsigned __int8 *)(v89 + 1425)) << 10)
                         + 26624) & 0x1FC00 | 0x2D900000;
  *(_DWORD *)(a2 + 916) = 0;
  int v90 = (*(unsigned char *)(v89 + 1428) == 0) << 17;
  *(_DWORD *)(a2 + 916) = v90;
  if (*(unsigned char *)(v89 + 1428) != 1)
  {
    int v91 = v90 | 0x10000;
    *(_DWORD *)(a2 + 916) = v91;
    uint64_t v92 = v8 + 1848 * a3;
    int v93 = v91 | ((*(unsigned char *)(v92 + 1429) & 0xF) << 8);
    *(_DWORD *)(a2 + 916) = v93;
    int v90 = v93 | ((*(unsigned char *)(v92 + 1430) & 0xF) << 12);
  }
  *(_DWORD *)(a2 + 916) = v90 | 0x2DA00000;
  uint64_t v94 = (unsigned int *)(v8 + 1848 * a3 + 1436);
  unsigned int v95 = *v94;
  if (*(unsigned char *)(v104 + 604 * v105 + 3))
  {
    if ((v95 & 7) != 0) {
      *uint64_t v94 = (v95 + 7) & 0xFFFFFFF8;
    }
    int v96 = 763363328;
  }
  else
  {
    int v96 = ((*v94 & 7) << 15) | 0x2D800000;
  }
  *(_DWORD *)(a2 + 924) = v96;
  unint64_t v108 = 0;
  uint64_t v109 = 0;
  if (!CAVDAvcDecoder::GetSDataMemInfo(*(void *)(v101 + 256), v100, &v109, &v108)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v97 = (void *)v109;
  if (!*(void *)v109 && !*(_DWORD *)(v109 + 152) && !*(_DWORD *)(v109 + 156)) {
    goto LABEL_97;
  }
  int v98 = v108;
  if (HIDWORD(v108))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "populateSliceRegisters";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1511;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      int v98 = v108;
    }
  }
  uint64_t result = CAHDec::addToPatcherList(v101, v97, 944 * v100 + 2540, v98, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result)
  {
LABEL_97:
    uint64_t result = 0;
    *(_DWORD *)(a2 + 936) = *(_DWORD *)(v8 + 1848 * a3 + 16) - (*v94 >> 3);
  }
  return result;
}

uint64_t CAHDecSalviaAvc::populateCommonRegisters(CAHDecSalviaAvc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000001;
  return 0;
}

uint64_t CAHDecSalviaAvc::updateCommonRegisters(CAHDecSalviaAvc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

void CAHDecSalviaAvc::copyScalingList(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = *a2 & 0xFEFFFFC0 | 0x1000000;
  *a2 = v8;
  do
  {
    v8 |= (*(unsigned char *)(a4 + v7) == 0) << v7;
    *a2 = v8;
    ++v7;
  }
  while (v7 != 6);
  unsigned int v9 = v8 & 0xFFFFF03F;
  *a2 = v8 & 0xFFFFF03F;
  if (a7 >= 7)
  {
    uint64_t v10 = (a7 - 6);
    uint64_t v11 = (unsigned __int8 *)(a4 + 6);
    uint64_t v12 = &dword_223ADBCCC;
    do
    {
      int v13 = *v11++;
      BOOL v14 = v13 == 0;
      int v16 = *v12++;
      char v15 = v16;
      int v17 = v14;
      v9 |= ((v17 << v15) & 0x3F) << 6;
      *a2 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 1;
  uint64_t v20 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v22 = *(_DWORD *)(v20 + i) & 0xFFFFFF | (*(unsigned __int8 *)(v19 + i - 1) << 24);
      *(_DWORD *)(v20 + i) = v22;
      unsigned int v23 = v22 & 0xFF00FFFF | (*(unsigned __int8 *)(v19 + i) << 16);
      *(_DWORD *)(v20 + i) = v23;
      unsigned int v24 = v23 & 0xFFFF00FF | (*(unsigned __int8 *)(v19 + i + 1) << 8);
      *(_DWORD *)(v20 + i) = v24;
      *(_DWORD *)(v20 + i) = v24 & 0xFFFFFF00 | *(unsigned __int8 *)(v19 + i + 2);
    }
    ++v18;
    v20 += 16;
    v19 += 16;
  }
  while (v18 != 6);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 96;
  do
  {
    int v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = a6 + ((uint64_t)dword_223ADBCE4[v25] << 6);
    do
    {
      long long v31 = (unsigned __int8 *)(v30 + (v28 & 0x7FFFFFE0 | v29 & 4 | v27 & 0x18));
      int v32 = *(_DWORD *)(v26 + v28) & 0xFFFFFF | (*v31 << 24);
      *(_DWORD *)(v26 + v28) = v32;
      unsigned int v33 = v32 & 0xFF00FFFF | (v31[1] << 16);
      *(_DWORD *)(v26 + v28) = v33;
      unsigned int v34 = v33 & 0xFFFF00FF | (v31[2] << 8);
      *(_DWORD *)(v26 + v28) = v34;
      *(_DWORD *)(v26 + v28) = v34 & 0xFFFFFF00 | v31[3];
      ++v29;
      v28 += 4;
      v27 += 8;
    }
    while (v28 != 64);
    ++v25;
    v26 += 64;
  }
  while (v25 != 6);
}

uint64_t CAHDecSalviaAvc::AvcSeqScalingListFallBack(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v3 = 12;
    }
    uint64_t v4 = a2 + 22;
    uint64_t v5 = (_OWORD *)(a2 + 34);
    while (v2 > 5)
    {
      if (*(unsigned char *)(v4 + v2 - 12))
      {
        if (*(unsigned char *)(v4 + v2) == 2)
        {
          unsigned int v9 = (_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 130);
          if (v2 == 6 || (v2 & 0x7FFFFFFD) == 8)
          {
            *unsigned int v9 = avcDefaultIntraScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADBD4C;
            long long v10 = xmmword_223ADBD5C;
            long long v11 = unk_223ADBD6C;
          }
          else
          {
            *unsigned int v9 = avcDefaultInterScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADBD0C;
            long long v10 = xmmword_223ADBD1C;
            long long v11 = unk_223ADBD2C;
          }
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 162) = v10;
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 178) = v11;
        }
        goto LABEL_24;
      }
      if ((v2 - 8) <= 0xFFFFFFFD)
      {
        uint64_t result = a2 + 130;
        int v13 = (_OWORD *)(a2 + 130 + ((unint64_t)(v2 - 6) << 6));
        BOOL v14 = (long long *)(a2 + 130 + ((unint64_t)(v2 - 8) << 6));
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[3];
        v13[2] = v14[2];
        v13[3] = v17;
        *int v13 = v15;
        v13[1] = v16;
        uint64_t v8 = (v2 - 2);
LABEL_21:
        *(unsigned char *)(v4 + v2) = *(unsigned char *)(a2 + v8 + 22);
      }
LABEL_24:
      ++v2;
      ++v5;
      if (v3 == v2) {
        return result;
      }
    }
    if (*(unsigned char *)(v4 + v2 - 12)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (v6 || v2 == 3) {
      goto LABEL_24;
    }
    uint64_t v8 = (v2 - 1);
    *uint64_t v5 = *(_OWORD *)(a2 + 16 * v8 + 34);
    goto LABEL_21;
  }
  return result;
}

long long *CAHDecSalviaAvc::AvcPicScalingListFallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 96))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = a3 + 97;
    uint64_t v6 = -96;
    uint64_t result = &avcDefaultIntraScalingList8x8;
    do
    {
      if (v3 > 5)
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if (*(unsigned char *)(v5 + v3 + 12) == 2)
          {
            unsigned int v9 = (_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 217);
            if (v3 == 6 || (v3 & 0x7FFFFFFD) == 8)
            {
              *unsigned int v9 = avcDefaultIntraScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADBD4C;
              long long v10 = xmmword_223ADBD5C;
              long long v11 = unk_223ADBD6C;
            }
            else
            {
              *unsigned int v9 = avcDefaultInterScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADBD0C;
              long long v10 = xmmword_223ADBD1C;
              long long v11 = unk_223ADBD2C;
            }
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 249) = v10;
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 265) = v11;
          }
          goto LABEL_31;
        }
        if ((v3 - 8) <= 0xFFFFFFFD)
        {
          uint64_t v12 = (_OWORD *)(a3 + 217 + ((unint64_t)(v3 - 6) << 6));
          int v13 = (long long *)(a3 + 217 + ((unint64_t)(v3 - 8) << 6));
          long long v14 = *v13;
          long long v15 = v13[1];
          long long v16 = v13[3];
          v12[2] = v13[2];
          v12[3] = v16;
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v17 = a3 + (v3 - 2);
          goto LABEL_29;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          uint64_t v18 = (v3 - 6);
          uint64_t v19 = a3 + (v18 << 6);
          uint64_t v20 = a2 + (v18 << 6);
          long long v21 = *(_OWORD *)(v20 + 130);
          long long v22 = *(_OWORD *)(v20 + 146);
          long long v23 = *(_OWORD *)(v20 + 162);
          *(_OWORD *)(v19 + 265) = *(_OWORD *)(v20 + 178);
          *(_OWORD *)(v19 + 249) = v23;
          *(_OWORD *)(v19 + 233) = v22;
          *(_OWORD *)(v19 + 217) = v21;
LABEL_23:
          char v24 = *(unsigned char *)(a2 + 22 + v3);
LABEL_30:
          *(unsigned char *)(v5 + v3 + 12) = v24;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if ((*(unsigned char *)(v5 + v3 + 12) & 2) != 0)
          {
            if (v3 > 2) {
              long long v8 = avcDefaultInterScalingList4x4;
            }
            else {
              long long v8 = avcDefaultIntraScalingList4x4;
            }
            *(_OWORD *)(v5 + v6 + 120) = v8;
          }
          goto LABEL_31;
        }
        if (v3 && v3 != 3)
        {
          uint64_t v25 = (v3 - 1);
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a3 + 16 * v25 + 121);
          uint64_t v17 = a3 + v25;
LABEL_29:
          char v24 = *(unsigned char *)(v17 + 109);
          goto LABEL_30;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a2 + v6 + 130);
          goto LABEL_23;
        }
      }
LABEL_31:
      ++v3;
      v6 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CAHDecSalviaAvc::populateSequenceRegisters(CAHDecSalviaAvc *this)
{
  uint64_t v2 = *((void *)this + 32);
  unint64_t v3 = (_DWORD *)*((void *)this + 33);
  int v4 = *(_DWORD *)(v2 + 3612);
  int v5 = *(_DWORD *)(v2 + 3616);
  uint64_t v6 = *(void *)(v2 + 3296);
  uint64_t v7 = *(void *)(v2 + 3304);
  uint64_t v8 = v6 + 2224 * v4;
  v3[10] = 0;
  __int16 v9 = *(_WORD *)(v8 + 1558);
  v3[10] = (2 * (v9 & 0xFFF)) | 1;
  v3[10] = ((*(_WORD *)(v8 + 1560) & 0xFFF) << 17) | (2 * (v9 & 0xFFF)) | 0x10001;
  v3[11] = 0;
  int v10 = *(unsigned char *)(v8 + 1564) & 1;
  v3[11] = v10;
  int v11 = v10 | ((*(unsigned char *)(v7 + 604 * v5 + 95) != 0) << 7) | 0x2800;
  v3[11] = v11;
  uint64_t v12 = (unsigned char *)(v8 + 4);
  int v13 = *(unsigned __int8 *)(v8 + 4);
  if (*(unsigned char *)(v8 + 4)) {
    int v13 = (*(unsigned char *)(v6 + 2224 * v4 + 7) & 0xF) << 15;
  }
  int v14 = v13 | v11;
  v3[11] = v14;
  long long v15 = (unsigned char *)(v6 + 2224 * v4);
  int v16 = v14 & 0x7F87A881 | ((v15[6] & 0xF) << 19);
  v3[11] = v16;
  unsigned int v17 = v16 & 0xFF7FFFFF | ((v15[5] & 1) << 23);
  v3[11] = v17;
  v3[11] = v17 & 0xFCFFFFFF | ((*v12 & 3) << 24);
  if (v15[9])
  {
    if (*v12 == 3) {
      int v18 = 12;
    }
    else {
      int v18 = 8;
    }
    uint64_t v19 = CAHDecSalviaAvc::AvcSeqScalingListFallBack((uint64_t)this, v8);
    CAHDecSalviaAvc::copyScalingList(v19, v3 + 12, *((void *)this + 33) + 644, v6 + 2224 * v4 + 22, v6 + 2224 * v4 + 34, v6 + 2224 * v4 + 130, v18);
  }
  return 0;
}

uint64_t CAHDecSalviaAvc::populatePictureRegisters(CAHDecSalviaAvc *this)
{
  uint64_t v221 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 3612);
  int v4 = *(_DWORD *)(v2 + 3616);
  uint64_t v5 = *(void *)(v2 + 3296);
  uint64_t v6 = *(void *)(v2 + 3304);
  uint64_t v203 = *(void *)(v2 + 2088);
  uint64_t v205 = *(unsigned int *)(v2 + 3152);
  int v7 = *(_DWORD *)(v2 + 2644);
  int v201 = *(unsigned __int8 *)(v2 + 8);
  int v202 = *(_DWORD *)(v2 + 3132);
  long long v8 = *(_OWORD *)(v2 + 7016);
  v220[8] = *(_OWORD *)(v2 + 7000);
  v220[9] = v8;
  long long v9 = *(_OWORD *)(v2 + 7048);
  v220[10] = *(_OWORD *)(v2 + 7032);
  v220[11] = v9;
  long long v10 = *(_OWORD *)(v2 + 6952);
  v220[4] = *(_OWORD *)(v2 + 6936);
  v220[5] = v10;
  long long v11 = *(_OWORD *)(v2 + 6984);
  v220[6] = *(_OWORD *)(v2 + 6968);
  v220[7] = v11;
  long long v12 = *(_OWORD *)(v2 + 6888);
  v220[0] = *(_OWORD *)(v2 + 6872);
  v220[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 6920);
  v220[2] = *(_OWORD *)(v2 + 6904);
  v220[3] = v13;
  uint64_t v14 = *(unsigned int *)(v2 + 7064);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  int v16 = v15;
  uint64_t v17 = *((void *)this + 33);
  *(_DWORD *)(v17 + 52) = 766509056;
  if (**(_DWORD **)(*((void *)this + 32) + 3312) == 5) {
    int v18 = 766517248;
  }
  else {
    int v18 = 766509056;
  }
  if (v15) {
    int v19 = 688;
  }
  else {
    int v19 = 672;
  }
  if (v7) {
    int v20 = 4160;
  }
  else {
    int v20 = 64;
  }
  *(_DWORD *)(v17 + 52) = v20 | ((v7 == 1) << 10) | v18 | v19;
  *(void *)(v17 + 56) = 0x1000000;
  uint64_t v21 = v5 + 2224 * v3;
  int v22 = (16 * (*(_WORD *)(v21 + 1558) & 0xFFF)) | 0xF;
  *(_DWORD *)(v17 + 60) = v22;
  int v23 = v22 | (*(unsigned __int16 *)(v21 + 1560) << 20) | 0xF0000;
  *(void *)(v17 + 64) = 0;
  *(_DWORD *)(v17 + 60) = v23;
  LODWORD(v21) = (*(unsigned char *)(v21 + 8) & 1) << 18;
  *(_DWORD *)(v17 + 68) = v21;
  char v24 = (unsigned char *)(v6 + 604 * v4);
  LODWORD(v21) = v21 & 0xFFF7FFFF | ((v24[93] & 1) << 19);
  *(_DWORD *)(v17 + 68) = v21;
  LODWORD(v21) = v21 & 0xFFEFFFFF | ((v24[3] & 1) << 20);
  *(_DWORD *)(v17 + 68) = v21;
  *(_DWORD *)(v17 + 68) = v21 | ((**(_DWORD **)(*((void *)this + 32) + 3312) != 5) << 21);
  unsigned int v25 = *(_DWORD *)(v17 + 72) & 0xFFFFFC1F | (32 * (v24[91] & 0x1F));
  *(_DWORD *)(v17 + 72) = v25;
  *(_DWORD *)(v17 + 72) = v25 & 0xFFFFFFE0 | v24[601] & 0x1F;
  if (v24[96])
  {
    uint64_t v26 = v6 + 604 * v4;
    uint64_t v27 = v5 + 2224 * v3;
    if (*(unsigned char *)(v27 + 4) == 3) {
      int v28 = 12;
    }
    else {
      int v28 = 8;
    }
    uint64_t v29 = *((void *)this + 33) + 1128;
    uint64_t v30 = CAHDecSalviaAvc::AvcPicScalingListFallBack(v15, v27, v26);
    CAHDecSalviaAvc::copyScalingList((uint64_t)v30, (unsigned int *)(v17 + 76), v29, v26 + 109, v26 + 121, v26 + 217, v28);
  }
  *(_DWORD *)(v17 + 80) = *((_DWORD *)this + 3978);
  *(_DWORD *)(v17 + 84) = *((_DWORD *)this + 3979);
  *(_DWORD *)(v17 + 88) = 3145738;
  long long v31 = (char *)this + 9008;
  for (uint64_t i = 92; i != 120; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v33 = *((void *)this + 33);
    int v34 = *(_DWORD *)(v33 + i);
    *(_DWORD *)(v33 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFu;
    uint64_t v35 = *((void *)this + 33);
    int v36 = *(_DWORD *)(v35 + i);
    *(_DWORD *)(v35 + i) = v34;
    if (*(void *)v31 || *((_DWORD *)v31 + 38) || *((_DWORD *)v31 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v31, i, 0, 0xFFFFFFFFLL, 8, v36, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 28) = *(_DWORD *)(*((void *)this + 33) + i + 28) & 0x800001FF | (((*((_DWORD *)this + 3972) >> 9) & 0x3FFFFF) << 9);
    v31 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 148) = 0;
  *(_DWORD *)(*((void *)this + 33) + 152) = 0;
  *(_DWORD *)(*((void *)this + 33) + 156) = 0;
  uint64_t v38 = *((void *)this + 33);
  int v39 = *(_DWORD *)(v38 + 156);
  *(_DWORD *)(v38 + 156) = 0;
  *(_DWORD *)(*((void *)this + 33) + 156) ^= 0xFFFFFFu;
  uint64_t v40 = *((void *)this + 33);
  int v41 = *(_DWORD *)(v40 + 156);
  *(_DWORD *)(v40 + 156) = v39;
  if (!*((void *)this + 1830) && !*((_DWORD *)this + 3698) && !*((_DWORD *)this + 3699)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1830, 156, 0, 0xFFFFFFFFLL, 8, v41, 4),
        !result))
  {
    *(_DWORD *)(*((void *)this + 33) + 160) = 0;
    uint64_t v42 = *((void *)this + 33);
    int v43 = *(_DWORD *)(v42 + 160);
    *(_DWORD *)(v42 + 160) = 0;
    *(_DWORD *)(*((void *)this + 33) + 160) ^= 0xFFFFFFu;
    uint64_t v44 = *((void *)this + 33);
    int v45 = *(_DWORD *)(v44 + 160);
    *(_DWORD *)(v44 + 160) = v43;
    if (!*((void *)this + 1852) && !*((_DWORD *)this + 3742) && !*((_DWORD *)this + 3743)) {
      goto LABEL_187;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1852, 160, 0, 0xFFFFFFFFLL, 8, v45, 4);
    if (!result)
    {
LABEL_187:
      *(_DWORD *)(*((void *)this + 33) + 164) = 0;
      uint64_t v46 = *((void *)this + 33);
      int v47 = *(_DWORD *)(v46 + 164);
      *(_DWORD *)(v46 + 164) = 0;
      *(_DWORD *)(*((void *)this + 33) + 164) ^= 0xFFFFFFu;
      uint64_t v48 = *((void *)this + 33);
      int v49 = *(_DWORD *)(v48 + 164);
      *(_DWORD *)(v48 + 164) = v47;
      if (!*((void *)this + 1874) && !*((_DWORD *)this + 3786) && !*((_DWORD *)this + 3787)) {
        goto LABEL_188;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1874, 164, 0, 0xFFFFFFFFLL, 8, v49, 4);
      if (!result)
      {
LABEL_188:
        *(_DWORD *)(*((void *)this + 33) + 168) = 0;
        uint64_t v50 = *((void *)this + 33);
        int v51 = *(_DWORD *)(v50 + 168);
        *(_DWORD *)(v50 + 168) = 0;
        *(_DWORD *)(*((void *)this + 33) + 168) ^= 0xFFFFFFu;
        uint64_t v52 = *((void *)this + 33);
        int v53 = *(_DWORD *)(v52 + 168);
        *(_DWORD *)(v52 + 168) = v51;
        if (!*((void *)this + 1896) && !*((_DWORD *)this + 3830) && !*((_DWORD *)this + 3831)) {
          goto LABEL_189;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1896, 168, 0, 0xFFFFFFFFLL, 8, v53, 4);
        if (!result)
        {
LABEL_189:
          *(_DWORD *)(*((void *)this + 33) + 172) = 0;
          uint64_t v54 = *((void *)this + 33);
          int v55 = *(_DWORD *)(v54 + 172);
          *(_DWORD *)(v54 + 172) = 0;
          *(_DWORD *)(*((void *)this + 33) + 172) ^= 0xFFFFFFu;
          uint64_t v56 = *((void *)this + 33);
          int v57 = *(_DWORD *)(v56 + 172);
          *(_DWORD *)(v56 + 172) = v55;
          if (!*((void *)this + 1918) && !*((_DWORD *)this + 3874) && !*((_DWORD *)this + 3875)) {
            goto LABEL_190;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1918, 172, 0, 0xFFFFFFFFLL, 8, v57, 4);
          if (!result)
          {
LABEL_190:
            *(_DWORD *)(*((void *)this + 33) + 176) = 0;
            uint64_t v58 = *((void *)this + 33);
            int v59 = *(_DWORD *)(v58 + 176);
            *(_DWORD *)(v58 + 176) = 0;
            *(_DWORD *)(*((void *)this + 33) + 176) ^= 0xFFFFFFu;
            uint64_t v60 = *((void *)this + 33);
            int v61 = *(_DWORD *)(v60 + 176);
            *(_DWORD *)(v60 + 176) = v59;
            if (!*((void *)this + 1940) && !*((_DWORD *)this + 3918) && !*((_DWORD *)this + 3919)) {
              goto LABEL_191;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1940, 176, 0, 0xFFFFFFFFLL, 8, v61, 4);
            if (!result)
            {
LABEL_191:
              *(_DWORD *)(*((void *)this + 33) + 180) = 0;
              *(_DWORD *)(*((void *)this + 33) + 184) = 0;
              uint64_t v62 = *((void *)this + 33);
              int v63 = *(_DWORD *)(v62 + 184);
              *(_DWORD *)(v62 + 184) = 0;
              *(_DWORD *)(*((void *)this + 33) + 184) ^= 0xFFFFFFu;
              uint64_t v64 = *((void *)this + 33);
              int v65 = *(_DWORD *)(v64 + 184);
              *(_DWORD *)(v64 + 184) = v63;
              if (!*((void *)this + 1280) && !*((_DWORD *)this + 2598) && !*((_DWORD *)this + 2599)) {
                goto LABEL_192;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1280, 184, 0, 0xFFFFFFFFLL, 8, v65, 4);
              if (!result)
              {
LABEL_192:
                *(_DWORD *)(*((void *)this + 33) + 188) = 0;
                uint64_t v66 = *((void *)this + 33);
                int v67 = *(_DWORD *)(v66 + 188);
                *(_DWORD *)(v66 + 188) = 0;
                *(_DWORD *)(*((void *)this + 33) + 188) ^= 0xFFFFFFu;
                uint64_t v68 = *((void *)this + 33);
                int v69 = *(_DWORD *)(v68 + 188);
                *(_DWORD *)(v68 + 188) = v67;
                uint64_t v70 = (char *)this + 176 * v205;
                if (!*((void *)v70 + 1302)
                  && !*((_DWORD *)this + 44 * v205 + 2642)
                  && !*((_DWORD *)this + 44 * v205 + 2643))
                {
                  goto LABEL_193;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v70 + 1302, 188, 0, 0xFFFFFFFFLL, 8, v69, 4);
                if (!result)
                {
LABEL_193:
                  *(_DWORD *)(*((void *)this + 33) + 192) = 0;
                  uint64_t v71 = *((void *)this + 33);
                  int v72 = *(_DWORD *)(v71 + 192);
                  *(_DWORD *)(v71 + 192) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 192) ^= 0x1FFFFFFu;
                  uint64_t v73 = *((void *)this + 33);
                  int v74 = *(_DWORD *)(v73 + 192);
                  *(_DWORD *)(v73 + 192) = v72;
                  int v75 = (char *)this + 176 * v205;
                  if (!*((void *)v75 + 70)
                    && !*((_DWORD *)this + 44 * v205 + 178)
                    && !*((_DWORD *)this + 44 * v205 + 179))
                  {
                    goto LABEL_194;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v75 + 70, 192, 0, 0xFFFFFFFFLL, 7, v74, 4);
                  if (!result)
                  {
LABEL_194:
                    *(_DWORD *)(*((void *)this + 33) + 196) = 0;
                    uint64_t v76 = *((void *)this + 33);
                    int v77 = *(_DWORD *)(v76 + 196);
                    *(_DWORD *)(v76 + 196) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 196) ^= 0x1FFFFFFu;
                    uint64_t v78 = *((void *)this + 33);
                    int v79 = *(_DWORD *)(v78 + 196);
                    *(_DWORD *)(v78 + 196) = v77;
                    int v80 = (void *)(v203 + 8);
                    if (!*(void *)(v203 + 8) && !*(_DWORD *)(v203 + 160) && !*(_DWORD *)(v203 + 164)) {
                      goto LABEL_195;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v203 + 8), 196, *(_DWORD *)(v203 + 60), 0xFFFFFFFFLL, 7, v79, 4);
                    if (!result)
                    {
LABEL_195:
                      *(_DWORD *)(*((void *)this + 33) + 200) = 0;
                      uint64_t v81 = *((void *)this + 33);
                      int v82 = *(_DWORD *)(v81 + 200);
                      *(_DWORD *)(v81 + 200) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 200) ^= 0x1FFFFFFu;
                      uint64_t v83 = *((void *)this + 33);
                      int v84 = *(_DWORD *)(v83 + 200);
                      *(_DWORD *)(v83 + 200) = v82;
                      char v85 = (char *)this + 176 * v205;
                      if (!*((void *)v85 + 598)
                        && !*((_DWORD *)this + 44 * v205 + 1234)
                        && !*((_DWORD *)this + 44 * v205 + 1235))
                      {
                        goto LABEL_196;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v85 + 598, 200, 0, 0xFFFFFFFFLL, 7, v84, 4);
                      if (!result)
                      {
LABEL_196:
                        *(_DWORD *)(*((void *)this + 33) + 204) = 0;
                        uint64_t v86 = *((void *)this + 33);
                        int v87 = *(_DWORD *)(v86 + 204);
                        *(_DWORD *)(v86 + 204) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 204) ^= 0x1FFFFFFu;
                        uint64_t v88 = *((void *)this + 33);
                        int v89 = *(_DWORD *)(v88 + 204);
                        *(_DWORD *)(v88 + 204) = v87;
                        if (!*v80 && !*(_DWORD *)(v203 + 160) && !*(_DWORD *)(v203 + 164)) {
                          goto LABEL_197;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v80, 204, *(_DWORD *)(v203 + 64), 0xFFFFFFFFLL, 7, v89, 4);
                        if (!result)
                        {
LABEL_197:
                          if (*(_DWORD *)(*((void *)this + 32) + 2648) != 1) {
                            goto LABEL_87;
                          }
                          uint64_t v90 = *((void *)this + 33);
                          int v91 = *(_DWORD *)(v90 + 196);
                          *(_DWORD *)(v90 + 196) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 196) ^= 0x1FFFFFFu;
                          uint64_t v92 = *((void *)this + 33);
                          int v93 = *(_DWORD *)(v92 + 196);
                          *(_DWORD *)(v92 + 196) = v91;
                          if (!*v80 && !*(_DWORD *)(v203 + 160) && !*(_DWORD *)(v203 + 164)) {
                            goto LABEL_198;
                          }
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v80, 196, *(_DWORD *)(v203 + 60), 0xFFFFFFFFLL, 7, v93, 4);
                          if (!result)
                          {
LABEL_198:
                            uint64_t v94 = *((void *)this + 33);
                            int v95 = *(_DWORD *)(v94 + 204);
                            *(_DWORD *)(v94 + 204) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 204) ^= 0x1FFFFFFu;
                            uint64_t v96 = *((void *)this + 33);
                            int v97 = *(_DWORD *)(v96 + 204);
                            *(_DWORD *)(v96 + 204) = v95;
                            if (!*v80 && !*(_DWORD *)(v203 + 160) && !*(_DWORD *)(v203 + 164)) {
                              goto LABEL_199;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v80, 204, *(_DWORD *)(v203 + 64), 0xFFFFFFFFLL, 7, v97, 4);
                            if (!result)
                            {
LABEL_199:
                              uint64_t v98 = *((void *)this + 33);
                              int v99 = *(_DWORD *)(v98 + 192);
                              *(_DWORD *)(v98 + 192) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 192) ^= 0x1FFFFFFu;
                              uint64_t v100 = *((void *)this + 33);
                              int v101 = *(_DWORD *)(v100 + 192);
                              *(_DWORD *)(v100 + 192) = v99;
                              if (!*v80 && !*(_DWORD *)(v203 + 160) && !*(_DWORD *)(v203 + 164)) {
                                goto LABEL_200;
                              }
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v80, 192, *(_DWORD *)(v203 + 72), 0xFFFFFFFFLL, 7, v101, 4);
                              if (!result)
                              {
LABEL_200:
                                uint64_t v102 = *((void *)this + 33);
                                int v103 = *(_DWORD *)(v102 + 200);
                                *(_DWORD *)(v102 + 200) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 200) ^= 0x1FFFFFFu;
                                uint64_t v104 = *((void *)this + 33);
                                int v105 = *(_DWORD *)(v104 + 200);
                                *(_DWORD *)(v104 + 200) = v103;
                                if (!*v80 && !*(_DWORD *)(v203 + 160) && !*(_DWORD *)(v203 + 164)) {
                                  goto LABEL_87;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v80, 200, *(_DWORD *)(v203 + 76), 0xFFFFFFFFLL, 7, v105, 4);
                                if (!result)
                                {
LABEL_87:
                                  int v204 = v7;
                                  uint64_t v197 = v5;
                                  uint64_t v200 = v17;
                                  if (*(_DWORD *)(v17 + 52) & 0x2000 | v14)
                                  {
                                    uint64_t v106 = v14;
                                    *((_DWORD *)this + v205 + 116) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 208) = 0;
                                    if (v14)
                                    {
                                      uint64_t v107 = 0;
                                      if (v16) {
                                        int v108 = 0x2000000;
                                      }
                                      else {
                                        int v108 = 0;
                                      }
                                      int v198 = (v14 << 28) - 0x10000000;
                                      int v199 = v108;
                                      do
                                      {
                                        uint64_t v109 = *((void *)v220 + v107);
                                        uint64_t v110 = *(unsigned int *)(v109 + 32);
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) = *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) & 0xFFFFFFF | v198;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) &= 0xF3FFFFFF;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) = *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) & 0xFDFFFFFF | v199;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) |= 0x1000000u;
                                        int v111 = v202 - *(_DWORD *)(v109 + 12);
                                        int v112 = v111 & 0x1FFFF;
                                        if (v111 < -32768) {
                                          int v112 = 98304;
                                        }
                                        if (v111 < 0x8000) {
                                          int v113 = v112;
                                        }
                                        else {
                                          int v113 = 0x7FFF;
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) = *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) & 0xFFFE0000 | v113;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) = *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 208) & 0xFFFDFFFF | (*(unsigned __int8 *)(v109 + 1) << 17);
                                        if (*(_DWORD *)(v109 + 28) == 1)
                                        {
                                          long long v218 = 0u;
                                          long long v219 = 0u;
                                          long long v216 = 0u;
                                          long long v217 = 0u;
                                          long long v214 = 0u;
                                          long long v215 = 0u;
                                          long long v212 = 0u;
                                          long long v213 = 0u;
                                          long long v210 = 0u;
                                          long long v211 = 0u;
                                          memset(buf, 0, sizeof(buf));
                                          int DPB = AVC_RLM::getDPB(*(void *)(*((void *)this + 32) + 3104), buf);
                                          if (DPB < 1)
                                          {
                                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                              return 0xFFFFFFFFLL;
                                            }
                                            int v207 = 136315138;
                                            uint64_t v208 = "populatePictureRegisters";
                                            unsigned int v165 = &_os_log_internal;
                                            uint64_t v166 = "AppleAVD: ERROR: %s: No ref pics found!\n";
                                          }
                                          else
                                          {
                                            uint64_t v115 = DPB;
                                            while (v115-- >= 1)
                                            {
                                              uint64_t v109 = buf[v115];
                                              if (!*(_DWORD *)(v109 + 28))
                                              {
                                                uint64_t v110 = *(unsigned int *)(v109 + 32);
                                                goto LABEL_105;
                                              }
                                            }
                                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                              return 0xFFFFFFFFLL;
                                            }
                                            int v207 = 136315138;
                                            uint64_t v208 = "populatePictureRegisters";
                                            unsigned int v165 = &_os_log_internal;
                                            uint64_t v166 = "AppleAVD: ERROR: %s: No non-existing ref frames found!\n";
                                          }
                                          int v167 = (uint8_t *)&v207;
                                          uint32_t v168 = 12;
                                          goto LABEL_158;
                                        }
LABEL_105:
                                        if (v16)
                                        {
                                          buf[0] = 0;
                                          if (!CAVDAvcDecoder::decodeGetRenderTargetRef(*((void *)this + 32), v110, *(_DWORD *)(v109 + 56), *(_DWORD *)(v109 + 64), buf))
                                          {
                                            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                            {
                                              LOWORD(v207) = 0;
                                              unsigned int v165 = &_os_log_internal;
                                              uint64_t v166 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
                                              int v167 = (uint8_t *)&v207;
                                              uint32_t v168 = 2;
LABEL_158:
                                              _os_log_impl(&dword_223977000, v165, OS_LOG_TYPE_DEFAULT, v166, v167, v168);
                                            }
                                            return 0xFFFFFFFFLL;
                                          }
                                          *(void *)(v109 + 40) = buf[0] + 8;
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 272) = 0;
                                        int v117 = 4 * v107;
                                        int v206 = 4 * v107 + 272;
                                        uint64_t v118 = *((void *)this + 33) + 4 * v107;
                                        int v119 = *(_DWORD *)(v118 + 272);
                                        *(_DWORD *)(v118 + 272) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 272) ^= 0x1FFFFFFu;
                                        uint64_t v120 = *((void *)this + 33) + 4 * v107;
                                        int v121 = *(_DWORD *)(v120 + 272);
                                        *(_DWORD *)(v120 + 272) = v119;
                                        unsigned int v122 = v110;
                                        uint64_t v123 = (char *)this + 176 * v110;
                                        if (*((void *)v123 + 70)
                                          || *((_DWORD *)this + 44 * v110 + 178)
                                          || *((_DWORD *)this + 44 * v110 + 179))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v123 + 70, v206, 0, 0xFFFFFFFFLL, 7, v121, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 336) = 0;
                                        int v124 = v117 + 336;
                                        uint64_t v125 = *((void *)this + 33) + 4 * v107;
                                        int v126 = *(_DWORD *)(v125 + 336);
                                        *(_DWORD *)(v125 + 336) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 336) ^= 0x1FFFFFFu;
                                        uint64_t v127 = *((void *)this + 33) + 4 * v107;
                                        int v128 = *(_DWORD *)(v127 + 336);
                                        *(_DWORD *)(v127 + 336) = v126;
                                        uint64_t v129 = *(void *)(v109 + 40);
                                        if (*(void *)v129 || *(_DWORD *)(v129 + 152) || *(_DWORD *)(v129 + 156))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v129, v117 + 336, *(_DWORD *)(v129 + 52), 0xFFFFFFFFLL, 7, v128, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 400) = 0;
                                        int v130 = v117 + 400;
                                        uint64_t v131 = *((void *)this + 33) + 4 * v107;
                                        int v132 = *(_DWORD *)(v131 + 400);
                                        *(_DWORD *)(v131 + 400) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 400) ^= 0x1FFFFFFu;
                                        uint64_t v133 = *((void *)this + 33) + 4 * v107;
                                        int v134 = *(_DWORD *)(v133 + 400);
                                        *(_DWORD *)(v133 + 400) = v132;
                                        uint64_t v135 = (char *)this + 176 * v122;
                                        if (*((void *)v135 + 598)
                                          || *((_DWORD *)this + 44 * v122 + 1234)
                                          || *((_DWORD *)this + 44 * v122 + 1235))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v135 + 598, v117 + 400, 0, 0xFFFFFFFFLL, 7, v134, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 464) = 0;
                                        int v136 = v117 + 464;
                                        uint64_t v137 = *((void *)this + 33) + 4 * v107;
                                        int v138 = *(_DWORD *)(v137 + 464);
                                        *(_DWORD *)(v137 + 464) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 464) ^= 0x1FFFFFFu;
                                        uint64_t v139 = *((void *)this + 33) + 4 * v107;
                                        int v140 = *(_DWORD *)(v139 + 464);
                                        *(_DWORD *)(v139 + 464) = v138;
                                        uint64_t v141 = *(void *)(v109 + 40);
                                        if (*(void *)v141 || *(_DWORD *)(v141 + 152) || *(_DWORD *)(v141 + 156))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v141, v136, *(_DWORD *)(v141 + 56), 0xFFFFFFFFLL, 7, v140, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                                        {
                                          uint64_t v142 = *((void *)this + 33) + 4 * v107;
                                          int v143 = *(_DWORD *)(v142 + 336);
                                          *(_DWORD *)(v142 + 336) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 336) ^= 0x1FFFFFFu;
                                          uint64_t v144 = *((void *)this + 33) + 4 * v107;
                                          int v145 = *(_DWORD *)(v144 + 336);
                                          *(_DWORD *)(v144 + 336) = v143;
                                          uint64_t v146 = *(void *)(v109 + 40);
                                          if (*(void *)v146 || *(_DWORD *)(v146 + 152) || *(_DWORD *)(v146 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v146, v124, *(_DWORD *)(v146 + 52), 0xFFFFFFFFLL, 7, v145, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          uint64_t v147 = *((void *)this + 33) + 4 * v107;
                                          int v148 = *(_DWORD *)(v147 + 464);
                                          *(_DWORD *)(v147 + 464) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 464) ^= 0x1FFFFFFu;
                                          uint64_t v149 = *((void *)this + 33) + 4 * v107;
                                          int v150 = *(_DWORD *)(v149 + 464);
                                          *(_DWORD *)(v149 + 464) = v148;
                                          uint64_t v151 = *(void *)(v109 + 40);
                                          if (*(void *)v151 || *(_DWORD *)(v151 + 152) || *(_DWORD *)(v151 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v151, v136, *(_DWORD *)(v151 + 56), 0xFFFFFFFFLL, 7, v150, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          uint64_t v152 = *((void *)this + 33) + 4 * v107;
                                          int v153 = *(_DWORD *)(v152 + 272);
                                          *(_DWORD *)(v152 + 272) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 272) ^= 0x1FFFFFFu;
                                          uint64_t v154 = *((void *)this + 33) + 4 * v107;
                                          int v155 = *(_DWORD *)(v154 + 272);
                                          *(_DWORD *)(v154 + 272) = v153;
                                          uint64_t v156 = *(void *)(v109 + 40);
                                          if (*(void *)v156 || *(_DWORD *)(v156 + 152) || *(_DWORD *)(v156 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v156, v206, *(_DWORD *)(v156 + 64), 0xFFFFFFFFLL, 7, v155, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          uint64_t v157 = *((void *)this + 33) + 4 * v107;
                                          int v158 = *(_DWORD *)(v157 + 400);
                                          *(_DWORD *)(v157 + 400) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v107 + 400) ^= 0x1FFFFFFu;
                                          uint64_t v159 = *((void *)this + 33) + 4 * v107;
                                          int v160 = *(_DWORD *)(v159 + 400);
                                          *(_DWORD *)(v159 + 400) = v158;
                                          uint64_t v161 = *(void *)(v109 + 40);
                                          if (*(void *)v161 || *(_DWORD *)(v161 + 152) || *(_DWORD *)(v161 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v161, v130, *(_DWORD *)(v161 + 68), 0xFFFFFFFFLL, 7, v160, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                        }
                                        ++v107;
                                      }
                                      while (v107 != v106);
                                    }
                                  }
                                  else
                                  {
                                    *(_DWORD *)(v17 + 52) |= 0x2000u;
                                    *((_DWORD *)this + v205 + 116) = 1;
                                    *(_DWORD *)(*((void *)this + 33) + 208) = 0;
                                  }
                                  *(_DWORD *)(*((void *)this + 33) + 528) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 532) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 536) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 540) = 0;
                                  if (!v204) {
                                    return 0;
                                  }
                                  uint64_t v162 = *((void *)this + 32);
                                  int v163 = *(unsigned __int8 *)(v162 + 3004);
                                  if (*(unsigned char *)(v162 + 3004))
                                  {
                                    int v164 = *(_DWORD *)(v162 + 3016);
                                    int v163 = *(_DWORD *)(v162 + 3020);
                                  }
                                  else
                                  {
                                    int v164 = 0;
                                  }
                                  uint64_t v169 = *(void *)(v162 + 3656);
                                  int v170 = *(_DWORD *)(v169 + 52);
                                  int v171 = v170 + v164;
                                  if (__CFADD__(v170, v164))
                                  {
                                    int v172 = 1;
                                  }
                                  else
                                  {
                                    int v173 = *(_DWORD *)(v169 + 56);
                                    int v174 = v173 + v163;
                                    if (!__CFADD__(v173, v163))
                                    {
                                      uint64_t v175 = *((void *)this + 33);
                                      int v176 = *(_DWORD *)(v175 + 528);
                                      *(_DWORD *)(v175 + 528) = 0;
                                      *(_DWORD *)(*((void *)this + 33) + 528) ^= 0xFFFFFFu;
                                      uint64_t v177 = *((void *)this + 33);
                                      int v178 = *(_DWORD *)(v177 + 528);
                                      *(_DWORD *)(v177 + 528) = v176;
                                      uint64_t v179 = *(void *)(*((void *)this + 32) + 3656);
                                      if (!*(void *)v179 && !*(_DWORD *)(v179 + 152) && !*(_DWORD *)(v179 + 156)
                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v179, 528, v171, 0xFFFFFFFFLL, 8, v178, 4), !result))
                                      {
                                        uint64_t v180 = *((void *)this + 33);
                                        int v181 = *(_DWORD *)(v180 + 532);
                                        *(_DWORD *)(v180 + 532) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 532) ^= 0xFFFFFFu;
                                        uint64_t v182 = *((void *)this + 33);
                                        int v183 = *(_DWORD *)(v182 + 532);
                                        *(_DWORD *)(v182 + 532) = v181;
                                        uint64_t v184 = *(void *)(*((void *)this + 32) + 3656);
                                        if (!*(void *)v184 && !*(_DWORD *)(v184 + 152) && !*(_DWORD *)(v184 + 156)) {
                                          goto LABEL_201;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v184, 532, v174, 0xFFFFFFFFLL, 8, v183, 4);
                                        if (!result)
                                        {
LABEL_201:
                                          uint64_t v185 = *((void *)this + 33);
                                          int v186 = *(_DWORD *)(v185 + 536);
                                          *(_DWORD *)(v185 + 536) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 536) ^= 0xC0000000;
                                          uint64_t v187 = *((void *)this + 33);
                                          int v188 = *(_DWORD *)(v187 + 536);
                                          *(_DWORD *)(v187 + 536) = v186;
                                          uint64_t v189 = *(void *)(*((void *)this + 32) + 3656);
                                          if (!*(void *)v189 && !*(_DWORD *)(v189 + 152) && !*(_DWORD *)(v189 + 156)) {
                                            goto LABEL_202;
                                          }
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v189, 536, v171, 192, 6, v188, 4);
                                          if (!result)
                                          {
LABEL_202:
                                            uint64_t v190 = *((void *)this + 33);
                                            int v191 = *(_DWORD *)(v190 + 540);
                                            *(_DWORD *)(v190 + 540) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 540) ^= 0xC0000000;
                                            uint64_t v192 = *((void *)this + 33);
                                            int v193 = *(_DWORD *)(v192 + 540);
                                            *(_DWORD *)(v192 + 540) = v191;
                                            uint64_t v194 = *(void *)(*((void *)this + 32) + 3656);
                                            if (!*(void *)v194
                                              && !*(_DWORD *)(v194 + 152)
                                              && !*(_DWORD *)(v194 + 156))
                                            {
                                              goto LABEL_176;
                                            }
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v194, 540, v174, 192, 6, v193, 4);
                                            if (!result)
                                            {
LABEL_176:
                                              if (v201)
                                              {
                                                uint64_t result = 0;
                                                *(_DWORD *)(*((void *)this + 33) + 536) = *(_DWORD *)(*((void *)this + 33) + 536) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 76) >> 6) & 0xFFF));
                                                uint64_t v195 = *((void *)this + 33);
                                                unsigned int v196 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 80);
                                              }
                                              else
                                              {
                                                uint64_t result = CAHDecSalviaAvc::getSWRStride(this, *(unsigned __int16 *)(v200 + 84)- *(unsigned __int16 *)(v200 + 80)+ 1, *(unsigned __int8 *)(v197 + 2224 * v3 + 6), *(unsigned __int8 *)(v197 + 2224 * v3 + 7), *(_DWORD *)(v197 + 2224 * v3 + 2212));
                                                if (result) {
                                                  return 0xFFFFFFFFLL;
                                                }
                                                *(_DWORD *)(*((void *)this + 33) + 536) = *(_DWORD *)(*((void *)this + 33) + 536) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 3976) >> 6) & 0xFFF));
                                                unsigned int v196 = *((_DWORD *)this + 3977);
                                                uint64_t v195 = *((void *)this + 33);
                                              }
                                              *(_DWORD *)(v195 + 540) = *(_DWORD *)(v195 + 540) & 0xFFFF8003 | (4 * ((v196 >> 6) & 0x1FFF));
                                            }
                                          }
                                        }
                                      }
                                      return result;
                                    }
                                    int v172 = 2;
                                  }
                                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                  {
                                    LODWORD(buf[0]) = 136315394;
                                    *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                    WORD2(buf[1]) = 1024;
                                    *(_DWORD *)((char *)&buf[1] + 6) = v172;
                                    unsigned int v165 = &_os_log_internal;
                                    uint64_t v166 = "AppleAVD: %s(): failKind = %d";
                                    int v167 = (uint8_t *)buf;
                                    uint32_t v168 = 18;
                                    goto LABEL_158;
                                  }
                                  return 0xFFFFFFFFLL;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecSalviaAvc::getSWRStride(CAHDecSalviaAvc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1988) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3977) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecSalviaAvc::getTileStartCTU(CAHDecSalviaAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 544);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecSalviaAvc::getTileEndCTU(CAHDecSalviaAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 544);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecSalviaAvc::getTileIdxAbove(CAHDecSalviaAvc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 544);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecSalviaAvc::populateAvdWork(CAHDecSalviaAvc *this, unsigned int a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v3 + 3312);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 7500);
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    long long v9 = (int *)(v2 + 2544);
    long long v10 = (int *)(v4 + 20);
    __int16 v21 = a2;
    uint64_t v11 = 40 * a2;
    uint64_t v12 = v2 + 944 * v5;
    while (1)
    {
      uint64_t v13 = v12 + v7;
      *(_WORD *)(v13 + 1612) = v8;
      *(_WORD *)(v13 + 1614) = 0;
      *(_WORD *)(v13 + 1616) = v8;
      *(_DWORD *)(v12 + v7 + 1618) = 0;
      int v14 = *v9;
      if (!CAVDAvcDecoder::GetSDataMemInfo(*((void *)this + 32), v8, &v23, &v22)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *v10;
      *(_DWORD *)(v13 + 1636) = *v10;
      *(_DWORD *)(v13 + 1640) = v15;
      *(_DWORD *)(v13 + 1644) = 0;
      if (v7) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = 15;
      }
      *(_WORD *)(v13 + 1622) = v16;
      uint64_t v17 = (void *)v23;
      if (*(void *)v23 || *(_DWORD *)(v23 + 152) || *(_DWORD *)(v23 + 156))
      {
        int v18 = v22;
        if (HIDWORD(v22))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            unsigned int v25 = "populateAvdWork";
            __int16 v26 = 1024;
            int v27 = 1621;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v18 = v22;
          }
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v17, (int)v7 + 568028, v18, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
      v9 += 236;
      *(_DWORD *)(v12 + v7 + 1632) = v14;
      ++v8;
      v7 += 40;
      v10 += 462;
      if (v11 == v7)
      {
        uint64_t v2 = *((void *)this + 33);
        __int16 v20 = v21;
        goto LABEL_17;
      }
    }
  }
  else
  {
    __int16 v20 = 0;
LABEL_17:
    uint64_t result = 0;
    *(_WORD *)(v2 + 28) = v20;
    *(_DWORD *)(v2 + 32) = 568008;
  }
  return result;
}

uint64_t CAHDecSalviaAvc::allocWorkBuf_SPS(CAHDecSalviaAvc *this, unsigned char *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v3 = a2[4];
  unsigned int v4 = *((unsigned __int16 *)a2 + 779);
  int v5 = 16 * v4;
  unsigned int v6 = *((unsigned __int16 *)a2 + 780);
  unsigned int v7 = 32 - __clz(((16 * v4 + 47) >> 5) - 1);
  if (v4 < 2) {
    LOBYTE(v7) = 0;
  }
  unsigned int v8 = 32 - __clz(((16 * v6 + 47) >> 5) - 1);
  if (v6 < 2) {
    LOBYTE(v8) = 0;
  }
  unsigned int v9 = ((32 << (v8 + v7)) + 127) & 0xFFFFFF80;
  if (a2[4])
  {
    unsigned int v10 = (v5 + 16) << (v3 == 3);
    unsigned int v11 = ((((16 * v6 + 16) | (v3 == 1)) >> (v3 == 1)) + 15) >> 4;
    if (v10 > 0x20)
    {
      unsigned int v12 = 32 - __clz(((v10 + 31) >> 5) - 1);
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  LOBYTE(v12) = 0;
LABEL_10:
  unsigned int v13 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  unsigned int v15 = ((8 << (v14 + v12)) + 127) & 0xFFFFFF80;
  if (a2[4]) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = 0;
  }
  *((_DWORD *)this + 3968) = v9;
  *((_DWORD *)this + 3969) = v16;
  *((void *)this + 1985) = 0;
  int v17 = (v4 << 6) + 64;
  *((_DWORD *)this + 3974) = v17;
  *((_DWORD *)this + 3973) = v17 + v17 * v6;
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    uint64_t v18 = 24;
    int v19 = this;
    while (1)
    {
      uint64_t v20 = *((unsigned int *)this + 3968);
      if (v20
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v19 + 35, v20, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_35;
        }
        int v27 = 136315650;
        uint64_t v28 = "allocWorkBuf_SPS";
        __int16 v29 = 1024;
        int v30 = 1859;
        __int16 v31 = 2080;
        int v32 = "HdrY";
        __int16 v26 = &_os_log_internal;
        goto LABEL_34;
      }
      uint64_t v21 = *((unsigned int *)this + 3969);
      if (v21)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v19 + 299, v21, 7, 1, 0)) {
          break;
        }
      }
      int v19 = (CAHDecSalviaAvc *)((char *)v19 + 176);
      if (!--v18) {
        goto LABEL_23;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v27 = 136315650;
    uint64_t v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 1860;
    __int16 v31 = 2080;
    int v32 = "HdrC";
    __int16 v26 = &_os_log_internal;
    goto LABEL_34;
  }
LABEL_23:
  unint64_t v22 = (_OWORD *)((char *)this + 10416);
  uint64_t v23 = 24;
  while (1)
  {
    uint64_t v24 = *((unsigned int *)this + 3973);
    if (v24)
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), v22, v24, 7, 1, 0)) {
        break;
      }
    }
    v22 += 11;
    if (!--v23)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 3978) = 0;
      *((_DWORD *)this + 3979) = v5 | (v6 << 20) | 0xF000F;
      return result;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 136315650;
    uint64_t v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 1866;
    __int16 v31 = 2080;
    int v32 = "MvColo";
    __int16 v26 = &_os_log_internal;
LABEL_34:
    _os_log_impl(&dword_223977000, v26, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v27, 0x1Cu);
  }
LABEL_35:
  (*(void (**)(CAHDecSalviaAvc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecSalviaAvc::allocWorkBuf_PPS(CAHDecSalviaAvc *this, unsigned char *a2, void *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = 16 * *((unsigned __int16 *)a2 + 779);
  if (((a2[6] + 9) & 0x1FEu) <= ((a2[7] + 9) & 0x1FEu)) {
    int v6 = (a2[7] + 9) & 0x1FE;
  }
  else {
    int v6 = (a2[6] + 9) & 0x1FE;
  }
  int v7 = a2[4];
  if (v7 == 3) {
    int v8 = 48;
  }
  else {
    int v8 = 32;
  }
  if (v7 == 3) {
    int v9 = 192;
  }
  else {
    int v9 = 128;
  }
  if (a2[4]) {
    int v10 = v8;
  }
  else {
    int v10 = 16;
  }
  if (a2[4]) {
    int v11 = v9;
  }
  else {
    int v11 = 64;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 915, 4 * (((unint64_t)(v5 + 16) >> 2) + ((unint64_t)(v5 + 16) >> 4)), 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_20:
      (*(void (**)(CAHDecSalviaAvc *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 1983;
    __int16 v21 = 2080;
    unint64_t v22 = "AvpAboveInfo";
    unsigned int v12 = &_os_log_internal;
LABEL_19:
    _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v17, 0x1Cu);
    goto LABEL_20;
  }
  unsigned int v14 = (v5 + 31) >> 4;
  uint64_t v15 = ((v6 * v10) >> 3) * v14;
  if (v15 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 926, v15, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 1986;
    __int16 v21 = 2080;
    unint64_t v22 = "IpAbove";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t v16 = ((v6 * v11) >> 3) * v14;
  if (v16 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 937, v16, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 1987;
    __int16 v21 = 2080;
    unint64_t v22 = "LfAbovePix";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 948, 32 * v14, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 1988;
    __int16 v21 = 2080;
    unint64_t v22 = "LfAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 640, 32 * v14, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 1991;
    __int16 v21 = 2080;
    unint64_t v22 = "MvAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  return result;
}

uint64_t CAHDecSalviaAvc::freeWorkBuf_SPS(CAHDecSalviaAvc *this)
{
  uint64_t v2 = 24;
  int v3 = (uint64_t *)this;
  do
  {
    uint64_t result = *((void *)this + 32);
    if (!*(_DWORD *)(result + 2648))
    {
      if (v3[70])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(result, v3 + 70);
        v3[70] = 0;
      }
      if (v3[598])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 598);
        v3[598] = 0;
      }
    }
    if (v3[1302])
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 1302);
      v3[1302] = 0;
    }
    v3 += 22;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t *CAHDecSalviaAvc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[1830])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1830);
    v2[1830] = 0;
  }
  if (v2[1852])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1852);
    v2[1852] = 0;
  }
  if (v2[1280])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1280);
    v2[1280] = 0;
  }
  if (v2[1874])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1874);
    v2[1874] = 0;
  }
  if (v2[1896])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1896);
    v2[1896] = 0;
  }
  if (v2[1918])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1918);
    v2[1918] = 0;
  }
  if (v2[1940])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1940);
    v2[1940] = 0;
  }
  if (v2[1962])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1962);
    v2[1962] = 0;
  }
  return this;
}

uint64_t CAHDecSalviaAvc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 9008;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 15888) = a2;
  return this;
}

uint64_t CAHDecSalviaAvc::decodeBuffer(CAHDecSalviaAvc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecSalviaAvc::decodeBufferSize(CAHDecSalviaAvc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecSalviaAvc::decHdrYLinAddr(CAHDecSalviaAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 70);
}

uint64_t CAHDecSalviaAvc::decHdrCLinAddr(CAHDecSalviaAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 598);
}

uint64_t CAHDecSalviaAvc::decHdrYSize(CAHDecSalviaAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 151);
}

uint64_t CAHDecSalviaAvc::decHdrCSize(CAHDecSalviaAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 1207);
}

uint64_t CAHDecSalviaAvc::decHdrYStride(CAHDecSalviaAvc *this)
{
  return *((unsigned int *)this + 3970);
}

uint64_t CAHDecSalviaAvc::decHdrCStride(CAHDecSalviaAvc *this)
{
  return *((unsigned int *)this + 3971);
}

void CAVDAvcDecoder::CAVDAvcDecoder(CAVDAvcDecoder *this, void *a2, int a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  CAVDDecoder::CAVDDecoder(this, a2, a3);
  *(void *)uint64_t v3 = &unk_26D73EBE8;
  *(_DWORD *)(v3 + 3068) = 0;
  *(unsigned char *)(v3 + 3072) = 0;
  *(void *)(v3 + 3076) = 0;
  *(void *)(v3 + 3088) = 0;
  *(_WORD *)(v3 + 3096) = 0;
  *(void *)(v3 + 3104) = 0;
  *(_DWORD *)(v3 + 3112) = 0;
  *(_DWORD *)(v3 + 3680) = 0;
  *(_OWORD *)(v3 + 3296) = 0u;
  *(_OWORD *)(v3 + 3312) = 0u;
  *(_OWORD *)(v3 + 3612) = 0u;
  *(_OWORD *)(v3 + 6768) = 0u;
  *(_OWORD *)(v3 + 6784) = 0u;
  *(_OWORD *)(v3 + 6800) = 0u;
  *(_OWORD *)(v3 + 6816) = 0u;
  *(_OWORD *)(v3 + 6832) = 0u;
  *(_OWORD *)(v3 + 6848) = 0u;
  *(_DWORD *)(v3 + 6864) = 0;
  *(_DWORD *)(v3 + 7064) = 0;
  *(_OWORD *)(v3 + 7032) = 0u;
  *(_OWORD *)(v3 + 7048) = 0u;
  *(_OWORD *)(v3 + 7000) = 0u;
  *(_OWORD *)(v3 + 7016) = 0u;
  *(_OWORD *)(v3 + 6968) = 0u;
  *(_OWORD *)(v3 + 6984) = 0u;
  *(_OWORD *)(v3 + 6936) = 0u;
  *(_OWORD *)(v3 + 6952) = 0u;
  *(_OWORD *)(v3 + 6904) = 0u;
  *(_OWORD *)(v3 + 6920) = 0u;
  *(_OWORD *)(v3 + 6872) = 0u;
  *(_OWORD *)(v3 + 6888) = 0u;
  *(void *)(v3 + 7477) = 0;
  *(_OWORD *)(v3 + 7464) = 0u;
  *(void *)(v3 + 7488) = 0;
  *(void *)(v3 + 7495) = 0;
  operator new();
}

void sub_223A7894C(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v2, 0x10B1C40DA2C5C18);
  CAVDDecoder::~CAVDDecoder(v1);
  _Unwind_Resume(a1);
}

uint64_t CAVDAvcDecoder::VAInit(CAVDAvcDecoder *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = malloc_type_calloc(0x8B0uLL, 0x20uLL, 0x2D9A5FF0uLL);
  *((void *)this + 412) = v2;
  if (!v2)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v9 = 136315138;
    int v10 = "VAInit";
    int v7 = &_os_log_internal;
    int v8 = "AppleAVD: ERROR: CAVDAvcDecoder::%s() m_sps_list mem alloc failed";
LABEL_14:
    _os_log_impl(&dword_223977000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v9, 0xCu);
    return 304;
  }
  uint64_t v3 = malloc_type_calloc(0x25CuLL, 0x100uLL, 0xFA39A912uLL);
  *((void *)this + 413) = v3;
  if (!v3)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v9 = 136315138;
    int v10 = "VAInit";
    int v7 = &_os_log_internal;
    int v8 = "AppleAVD: ERROR: CAVDAvcDecoder::%s() m_pps_list mem alloc failed";
    goto LABEL_14;
  }
  uint64_t v4 = malloc_type_calloc(0x738uLL, *((unsigned __int16 *)this + 3750), 0xACB2CA1AuLL);
  *((void *)this + 414) = v4;
  if (!v4)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v9 = 136315138;
    int v10 = "VAInit";
    int v7 = &_os_log_internal;
    int v8 = "AppleAVD: ERROR: CAVDAvcDecoder::%s() m_slices mem alloc failed";
    goto LABEL_14;
  }
  uint64_t v5 = malloc_type_calloc(0x32F0uLL, *((unsigned __int16 *)this + 3750), 0xCE68623CuLL);
  *((void *)this + 415) = v5;
  if (v5) {
    return 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315138;
    int v10 = "VAInit";
    int v7 = &_os_log_internal;
    int v8 = "AppleAVD: ERROR: CAVDAvcDecoder::%s() m_sliceInfo mem alloc failed";
    goto LABEL_14;
  }
  return 304;
}

void CAVDAvcDecoder::~CAVDAvcDecoder(CAVDAvcDecoder *this)
{
  *(void *)this = &unk_26D73EBE8;
  pthread_mutex_destroy((pthread_mutex_t *)this + 42);
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 2752));
  for (uint64_t i = 24; i != 1056; i += 8)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    if (v3)
    {
      CAVDDecoder::unmapAVDMemory((uint64_t)this, *((mach_port_t ***)this + 293), (_OWORD *)(v3 + 8), 1);
      free((void *)v3);
    }
    *(void *)((char *)this + i) = 0;
  }
  do
  {
    uint64_t v4 = *(void *)((char *)this + i);
    if (v4)
    {
      CAVDDecoder::unmapAVDMemory((uint64_t)this, *((mach_port_t ***)this + 293), (_OWORD *)(v4 + 8), *(unsigned char *)(v4 + 169));
      free((void *)v4);
    }
    *(void *)((char *)this + i) = 0;
    i += 8;
  }
  while (i != 2088);
  if (*((void *)this + 414) && *((_WORD *)this + 3750))
  {
    unint64_t v5 = 0;
    uint64_t v6 = 20;
    do
    {
      CAVDMvHevcDecoder::printAuList((CAVDMvHevcDecoder *)(*((void *)this + 414) + v6));
      ++v5;
      v6 += 1848;
    }
    while (v5 < *((unsigned __int16 *)this + 3750));
  }
  uint64_t v7 = *((void *)this + 262);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 136))(v7);
    (*(void (**)(void, void))(**((void **)this + 262) + 152))(*((void *)this + 262), 0);
    uint64_t v8 = *((void *)this + 262);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    *((void *)this + 262) = 0;
  }
  uint64_t v9 = *((void *)this + 386);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 386) = 0;
  free(*((void **)this + 412));
  *((void *)this + 412) = 0;
  free(*((void **)this + 413));
  *((void *)this + 413) = 0;
  free(*((void **)this + 414));
  *((void *)this + 414) = 0;
  free(*((void **)this + 415));
  *((void *)this + 415) = 0;
  uint64_t v10 = *((void *)this + 388);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 388) = 0;

  CAVDDecoder::~CAVDDecoder(this);
}

{
  uint64_t vars8;

  CAVDAvcDecoder::~CAVDAvcDecoder(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAVDAvcDecoder::VAStartDecode(CAVDAvcDecoder *this, unsigned __int8 *a2, int a3)
{
  char v3 = 0;
  LOBYTE(v4) = 0;
  uint64_t v57 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 2824) = 0;
  *((_DWORD *)this + 1692) = 0;
  uint64_t v5 = a3 & 0xFFFFFF;
  LODWORD(v6) = a3 >> 24;
  *((_DWORD *)this + 770) = a3 >> 24;
  if (a3 >> 24 > (int)v5)
  {
LABEL_2:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 305;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)int v55 = "VAStartDecode";
    *(_WORD *)&v55[8] = 1024;
    *(_DWORD *)&v55[10] = v4 & 1;
    *(_WORD *)&v55[14] = 1024;
    *(_DWORD *)&v55[16] = v3 & 1;
    uint64_t v7 = &_os_log_internal;
    uint64_t v8 = "AppleAVD: %s Parameter Set missing %d %d";
    goto LABEL_4;
  }
  int v52 = 0;
  int v4 = 0;
  int v14 = 0;
  int v15 = 0;
  LODWORD(v10) = 0;
  uint64_t v16 = &a2[v5];
  int v17 = a2;
  while (1)
  {
    switch(v6)
    {
      case 1:
        int v22 = *v17;
        uint64_t v18 = v17 + 1;
        int v20 = v22;
        int v21 = v22 + 1;
        break;
      case 2:
        unsigned int v23 = *(unsigned __int16 *)v17;
        uint64_t v18 = v17 + 2;
        int v20 = __rev16(v23);
        int v21 = v20 + 2;
        break;
      case 4:
        unsigned int v19 = *(_DWORD *)v17;
        uint64_t v18 = v17 + 4;
        int v20 = bswap32(v19);
        int v21 = v20 + 4;
        break;
      default:
        return 317;
    }
    if (&v18[v20] > v16)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)int v55 = "VAStartDecode";
        *(_WORD *)&v55[8] = 1024;
        *(_DWORD *)&v55[10] = v20;
        *(_WORD *)&v55[14] = 2048;
        *(void *)&v55[16] = v18;
        *(_WORD *)&v55[24] = 2048;
        uint64_t v56 = v16;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s NALU too big! %d nal_ptr:%p, buf_end:%p", buf, 0x26u);
      }
      return 318;
    }
    uint64_t v24 = v20;
    if (v20 >= 1)
    {
      unsigned int v25 = &v18[v20 - 1];
      while (!*v25--)
      {
        BOOL v27 = __OFSUB__(v20--, 1);
        if ((v20 < 0) ^ v27 | (v20 == 0))
        {
          int v20 = 0;
          break;
        }
      }
      uint64_t v24 = v20;
    }
    AVC_RBSP::setRBSP(*((AVC_RBSP **)this + 386), v18, v24);
    uint64_t v28 = AVC_RBSP::parseNAL(*((void *)this + 386), v53, 0);
    if ((v28 & 1) == 0) {
      break;
    }
    int v29 = v53[0] >> 3;
    if (v29 == 8)
    {
      uint64_t v28 = AVC_RBSP::parsePPS(*((int8x8_t **)this + 386), *((void *)this + 413), *((void *)this + 412));
      if (v28 == -1)
      {
        uint64_t v10 = 0xFFFFFFFFLL;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return v10;
        }
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)int v55 = -1;
        *(_WORD *)&v55[4] = 2080;
        *(void *)&v55[6] = "virtual int CAVDAvcDecoder::VAStartDecode(unsigned char *, int)";
        uint64_t v40 = &_os_log_internal;
        int v41 = "AppleAVD: bad PPS index %d %s\n";
        goto LABEL_47;
      }
      int v15 = v28;
      int v52 = 1;
    }
    else if (v29 == 7)
    {
      uint64_t v30 = AVC_RBSP::parseSPS(*((void *)this + 386), *((void *)this + 412));
      uint64_t v10 = v30;
      if (v30 == -1)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return v10;
        }
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)int v55 = v10;
        *(_WORD *)&v55[4] = 2080;
        *(void *)&v55[6] = "virtual int CAVDAvcDecoder::VAStartDecode(unsigned char *, int)";
        uint64_t v40 = &_os_log_internal;
        int v41 = "AppleAVD: bad SPS index %d %s\n";
LABEL_47:
        _os_log_impl(&dword_223977000, v40, OS_LOG_TYPE_DEFAULT, v41, buf, 0x12u);
        return v10;
      }
      uint64_t v31 = *((void *)this + 412) + 2224 * (int)v30;
      uint64_t v28 = CAVDAvcDecoder::DpbMaxSize(v30, v31);
      *(_DWORD *)(v31 + 2220) = v28;
      unsigned int v32 = *(unsigned __int8 *)(v31 + 1556);
      if (v28 < v32)
      {
        int v42 = v28;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 305;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)int v55 = "VAStartDecode";
        *(_WORD *)&v55[8] = 1024;
        *(_DWORD *)&v55[10] = v32;
        *(_WORD *)&v55[14] = 1024;
        *(_DWORD *)&v55[16] = v42;
        uint64_t v7 = &_os_log_internal;
        uint64_t v8 = "AppleAVD: ERROR: %s: max_num_ref_frames %d > nMaxDpbSize %d!\n";
LABEL_4:
        uint32_t v9 = 24;
        goto LABEL_5;
      }
      int v4 = 1;
    }
    v14 += v21;
    int v17 = &a2[v14];
    uint64_t v6 = *((int *)this + 770);
    if (&v17[v6] > v16)
    {
      char v3 = v52;
      if ((v4 & v52 & 1) == 0) {
        goto LABEL_2;
      }
      uint64_t v33 = *((void *)this + 412);
      int v34 = CAVDAvcDecoder::DpbMaxSize(v28, v33 + 2224 * (int)v10);
      *((_DWORD *)this + 769) = v34 + 6;
      *((_DWORD *)this + 707) = v34 + 6;
      *((_DWORD *)this + 903) = v10;
      *((_DWORD *)this + 904) = v15;
      int v35 = *(unsigned __int8 *)(v33 + 2224 * (int)v10 + 1562);
      if (v35 == 1)
      {
        uint64_t v36 = *((void *)this + 413) + 604 * v15;
        int v37 = *(unsigned __int8 *)(v36 + 5);
        if (*(unsigned char *)(v36 + 5))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)int v55 = v37;
            *(_WORD *)&v55[4] = 2080;
            *(void *)&v55[6] = "VAStartDecode";
            uint64_t v38 = &_os_log_internal;
            int v39 = "AppleAVD: AVC pps.num_slice_groups_minus1 = %d (shall be 0) %s\n";
            goto LABEL_52;
          }
          return 310;
        }
        unsigned int v44 = *(unsigned __int8 *)(v33 + 2224 * (int)v10 + 2);
        if (v44 < 0x51)
        {
          uint64_t v45 = v33 + 2224 * (int)v10;
          unsigned int v46 = *(unsigned __int16 *)(v45 + 1558);
          int v47 = 16 * v46 + 16;
          *((_DWORD *)this + 756) = v47;
          unsigned int v48 = *(unsigned __int16 *)(v45 + 1560);
          int v49 = 16 * v48 + 16;
          *((_DWORD *)this + 757) = v49;
          if (!*((unsigned char *)this + 10) || *((unsigned char *)this + 7502) || v46 <= 0xFF && v48 < 0x100)
          {
            uint64_t v50 = v33 + 2224 * (int)v10;
            *((_DWORD *)this + 758) = *(unsigned __int8 *)(v50 + 6);
            int v51 = *(unsigned __int8 *)(v50 + 4);
            *((_DWORD *)this + 759) = v51;
            if (v51) {
              int v51 = *(unsigned __int8 *)(v33 + 2224 * (int)v10 + 7);
            }
            *((_DWORD *)this + 1872) = v51;
            *((_DWORD *)this + 1873) = *(_DWORD *)(v33 + 2224 * (int)v10 + 2220);
            *((unsigned char *)this + 3097) = 0;
            *((_DWORD *)this + 1870) = 0;
            CAVDDecoder::isADSDecryption(this);
            uint64_t v10 = 0;
            *((_DWORD *)this + 713) = 0;
            *((unsigned char *)this + 2824) = 1;
            return v10;
          }
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 310;
          }
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)int v55 = v10;
          *(_WORD *)&v55[4] = 1024;
          *(_DWORD *)&v55[6] = v47;
          *(_WORD *)&v55[10] = 1024;
          *(_DWORD *)&v55[12] = v49;
          *(_WORD *)&v55[16] = 2080;
          *(void *)&v55[18] = "VAStartDecode";
          uint64_t v38 = &_os_log_internal;
          int v39 = "AppleAVD: AVC sps[%d] width %d height %d over size in %s\n";
          uint32_t v43 = 30;
        }
        else
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 310;
          }
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)int v55 = v44;
          *(_WORD *)&v55[4] = 1024;
          *(_DWORD *)&v55[6] = 80;
          *(_WORD *)&v55[10] = 2080;
          *(void *)&v55[12] = "VAStartDecode";
          uint64_t v38 = &_os_log_internal;
          int v39 = "AppleAVD: AVC sps.level_idc = %d (max is %d) %s\n";
          uint32_t v43 = 24;
        }
      }
      else
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 310;
        }
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)int v55 = v35;
        *(_WORD *)&v55[4] = 2080;
        *(void *)&v55[6] = "VAStartDecode";
        uint64_t v38 = &_os_log_internal;
        int v39 = "AppleAVD: AVC sps.frame_mbs_only_flag = %d (shall be 1) %s\n";
LABEL_52:
        uint32_t v43 = 18;
      }
      _os_log_impl(&dword_223977000, v38, OS_LOG_TYPE_DEFAULT, v39, buf, v43);
      return 310;
    }
  }
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
    return 305;
  }
  *(_DWORD *)buf = 136315138;
  *(void *)int v55 = "VAStartDecode";
  uint64_t v7 = &_os_log_internal;
  uint64_t v8 = "AppleAVD: %s(): rbsp parseNAL return error";
  uint32_t v9 = 12;
LABEL_5:
  _os_log_impl(&dword_223977000, v7, OS_LOG_TYPE_DEFAULT, v8, buf, v9);
  return 305;
}

uint64_t CAVDAvcDecoder::removeNalTrailingZeros(CAVDAvcDecoder *this, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result = a3;
  if ((int)a3 >= 1)
  {
    int v4 = &a2[a3 - 1];
    while (!*v4--)
    {
      BOOL v6 = __OFSUB__(result, 1);
      uint64_t result = (result - 1);
      if (((int)result < 0) ^ v6 | (result == 0)) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CAVDAvcDecoder::DpbMaxSize(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(a2 + 2);
  if (v3 > 0x27)
  {
    switch(*(unsigned char *)(a2 + 2))
    {
      case '(':
      case ')':
        unsigned int v2 = 0x8000;
        break;
      case '*':
        unsigned int v2 = 34816;
        break;
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
        break;
      case '2':
        unsigned int v2 = 110400;
        break;
      case '3':
      case '4':
        unsigned int v2 = 184320;
        break;
      default:
        unsigned int v4 = v3 - 60;
        if (v3 == 80) {
          int v5 = 10485760;
        }
        else {
          int v5 = 0;
        }
        if (v4 >= 3) {
          unsigned int v2 = v5;
        }
        else {
          unsigned int v2 = 696320;
        }
        break;
    }
  }
  else
  {
    switch(*(unsigned char *)(a2 + 2))
    {
      case 0xA:
        unsigned int v2 = 396;
        break;
      case 0xB:
        unsigned int v2 = 900;
        break;
      case 0xC:
      case 0xD:
      case 0x14:
        unsigned int v2 = 2376;
        break;
      case 0x15:
        unsigned int v2 = 4752;
        break;
      case 0x16:
      case 0x1E:
        unsigned int v2 = 8100;
        break;
      case 0x1F:
        unsigned int v2 = 18000;
        break;
      case 0x20:
        unsigned int v2 = 20480;
        break;
      default:
        break;
    }
  }
  unsigned int v6 = v2
     / ((*(unsigned __int16 *)(a2 + 1558)
       + 1
       + (*(unsigned __int16 *)(a2 + 1558) + 1) * *(unsigned __int16 *)(a2 + 1560)) << (*(unsigned char *)(a2 + 1562) == 0));
  if (*(unsigned char *)(a2 + 1574) && *(unsigned char *)(a2 + 2202) && v6 <= *(unsigned __int8 *)(a2 + 2209)) {
    unsigned int v6 = *(unsigned __int8 *)(a2 + 2209);
  }
  if (v6 <= *(unsigned __int8 *)(a2 + 1556)) {
    unsigned int v6 = *(unsigned __int8 *)(a2 + 1556);
  }
  if (v6 >= 0x17) {
    unsigned int v6 = 23;
  }
  return v6 + 1;
}

uint64_t CAVDAvcDecoder::VAStopDecode(CAVDAvcDecoder *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 2824))
  {
    CAVDAvcDecoder::FlushDPB((uint64_t)this);
    for (unsigned int i = *((_DWORD *)this + 922); i < *((_DWORD *)this + 923); unsigned int i = *((_DWORD *)this + 922))
    {
      uint64_t v3 = *((unsigned int *)this + 32 * (unint64_t)(i % 0x18) + 927);
      *((_DWORD *)this + 922) = i + 1;
      (*(void (**)(CAVDAvcDecoder *, uint64_t))(*(void *)this + 80))(this, v3);
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      unsigned int v6 = "VAStopDecode";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: bailing out of %s because start didn't complete", (uint8_t *)&v5, 0xCu);
    }
    return 305;
  }
}

uint64_t CAVDAvcDecoder::FlushDPB(uint64_t this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(AVC_RLM **)(this + 3104);
  if (v1)
  {
    uint64_t v2 = this;
    AVC_RLM::invalidateDpb(*(_DWORD **)(this + 3104));
    AVC_RLM::truncateDpb(v1, 1u);
    while (1)
    {
      this = AVC_RLM::getOutputFrame(*(void *)(v2 + 3104), (uint64_t)v3);
      if ((this & 0x80000000) != 0) {
        break;
      }
      CAVDAvcDecoder::insertFrame((_DWORD *)v2, (uint64_t)v3);
    }
  }
  return this;
}

uint64_t CAVDAvcDecoder::getDispFrameParams(uint64_t a1, _OWORD *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 3688);
  if (v2 >= *(_DWORD *)(a1 + 3692)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  unint64_t v5 = a1 + 3688 + ((unint64_t)(v2 % 0x18) << 7);
  long long v6 = *(_OWORD *)(v5 + 8);
  long long v7 = *(_OWORD *)(v5 + 24);
  long long v8 = *(_OWORD *)(v5 + 56);
  a2[2] = *(_OWORD *)(v5 + 40);
  a2[3] = v8;
  *a2 = v6;
  a2[1] = v7;
  long long v9 = *(_OWORD *)(v5 + 72);
  long long v10 = *(_OWORD *)(v5 + 88);
  long long v11 = *(_OWORD *)(v5 + 120);
  a2[6] = *(_OWORD *)(v5 + 104);
  a2[7] = v11;
  a2[4] = v9;
  a2[5] = v10;
  ++*(_DWORD *)(a1 + 3688);
  return result;
}

uint64_t CAVDAvcDecoder::VADecodeFrame(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = a5;
  uint64_t v12 = a4;
  uint64_t v174 = *MEMORY[0x263EF8340];
  if (a4 == 1) {
    *(unsigned char *)(a1 + 3072) = 1;
  }
  if (a5 == -1)
  {
    uint64_t v15 = 0;
    *(void *)(a1 + 3656) = 0;
    *(void *)(a1 + 3648) = 0xFFFFFFFF00000000;
  }
  else
  {
    *(void *)buf = 0;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 112))(a1, a5, buf, 1))
    {
      *(void *)(a1 + 3656) = 0;
      BOOL v20 = 0;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = "Error getting display buffer!";
        int v21 = &_os_log_internal;
        int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
        goto LABEL_17;
      }
      goto LABEL_19;
    }
    *(_DWORD *)(a1 + 3648) = 1;
    *(_DWORD *)(a1 + 3652) = v11;
    uint64_t v15 = *(void *)buf;
    *(void *)(a1 + 3656) = *(void *)buf + 8;
  }
  *(void *)buf = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, void))(*(void *)a1 + 112))(a1, a6, buf, 0) & 1) == 0)
  {
    *(void *)(a1 + 3640) = 0;
    BOOL v20 = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "Error getting decoder buffer!";
      int v21 = &_os_log_internal;
      int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
      goto LABEL_17;
    }
    goto LABEL_19;
  }
  uint64_t v145 = v15;
  *(_DWORD *)(a1 + 3632) = 0;
  *(_DWORD *)(a1 + 3636) = a6;
  uint64_t v16 = *(void *)buf;
  uint64_t v17 = *(void *)buf + 8;
  *(void *)(a1 + 2088) = *(void *)buf;
  *(void *)(a1 + 3640) = v17;
  *(void *)(v16 + 204) = *(void *)(a1 + 2856);
  int v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (a7 != -1 && v18)
  {
    *(void *)buf = 0;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, unsigned char *, void))(*(void *)a1 + 112))(a1, a7, buf, 0))
    {
      *(void *)(a1 + 3672) = 0;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)uint64_t v162 = v12;
      BOOL v27 = &_os_log_internal;
      uint64_t v28 = "AppleAVD: ERROR: %s(): Error getting second decoder buffer for scaling! (frameNum :%d)";
      goto LABEL_30;
    }
    *(_DWORD *)(a1 + 3664) = 0;
    *(_DWORD *)(a1 + 3668) = a7;
    uint64_t v19 = *(void *)buf;
    *(void *)(a1 + 3672) = *(void *)buf + 8;
    if (v19)
    {
      *(_DWORD *)(v19 + 204) = 0;
      *(_DWORD *)(v19 + 208) = 0;
      goto LABEL_31;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)uint64_t v162 = v12;
      BOOL v27 = &_os_log_internal;
      uint64_t v28 = "AppleAVD: ERROR: %s(): vSurfInfoScalerRef was not set! (frameNum :%d)";
LABEL_30:
      _os_log_impl(&dword_223977000, v27, OS_LOG_TYPE_DEFAULT, v28, buf, 0x12u);
    }
  }
LABEL_31:
  uint64_t v29 = *(void *)(a1 + 3640);
  *(_DWORD *)(a1 + 2648) = *(unsigned __int8 *)(v29 + 160);
  uint64_t v30 = *(void *)(a1 + 3656);
  if (!*(unsigned char *)(a1 + 9))
  {
    if (v30)
    {
      int v31 = *(_DWORD *)(v30 + 148);
      int v32 = 1;
      if (v31 > 1885745711)
      {
        if (v31 == 1885745712 || v31 == 1885745714) {
          goto LABEL_40;
        }
        int v33 = 1885746228;
      }
      else
      {
        if (v31 == 1882468912 || v31 == 1882468914) {
          goto LABEL_40;
        }
        int v33 = 1882469428;
      }
      if (v31 != v33) {
        int v32 = 2;
      }
      goto LABEL_40;
    }
LABEL_39:
    int v32 = 0;
    uint64_t v30 = v29;
LABEL_40:
    *(_DWORD *)(a1 + 2644) = v32;
    goto LABEL_41;
  }
  if (!v30) {
    goto LABEL_39;
  }
LABEL_41:
  int v34 = (unsigned __int8 *)a2 + a3;
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 23, v30 + 148);
  if (*(_DWORD *)(a1 + 7480))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)uint64_t v162 = v12;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() : received reset Before Decoding - Flush DPB, framenumber %d", buf, 0x12u);
    }
    uint64_t v35 = CAVDAvcDecoder::FlushDPB(a1);
    *(_DWORD *)(a1 + 7480) = 0;
  }
  uint64_t v157 = 0;
  int v36 = 0;
  unsigned int v158 = 0;
  uint64_t v146 = 0;
  int v150 = (unsigned __int8 *)(a1 + 3120);
  uint64_t v143 = a8;
  uint64_t v144 = (long long *)(a1 + 3328);
  int v37 = a2;
  unsigned int v142 = a6;
  unsigned int v151 = v12;
  uint64_t v147 = a2;
  int v155 = (char *)a2 + a3;
  while (1)
  {
    uint64_t v38 = *(int *)(a1 + 3080);
    BOOL v20 = (char *)v37 + v38 > (char *)v34;
    if ((char *)v37 + v38 > (char *)v34)
    {
      int v99 = v157;
      if ((int)v157 < 1)
      {
        uint64_t v103 = v145;
        uint64_t v104 = a1 + 3120;
        if (*(unsigned char *)(a1 + 3097)) {
          goto LABEL_174;
        }
      }
      else
      {
        uint64_t v100 = v157;
        int v101 = (unsigned char *)(*(void *)(a1 + 3312) + 24);
        LOBYTE(v102) = 2;
        uint64_t v103 = v145;
        uint64_t v104 = a1 + 3120;
        do
        {
          int v102 = (v102 & *v101);
          v101 += 1848;
          --v100;
        }
        while (v100);
        if (*(unsigned char *)(a1 + 3097))
        {
LABEL_174:
          if (!v157)
          {
            BOOL v20 = 0;
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_19;
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "no slice data";
            int v21 = &_os_log_internal;
            int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 2812) = v157;
          if (AVC_RLM::createDPBIndex(*(void *)(a1 + 3104), v104, (unsigned int *)(a1 + 3680)))
          {
            BOOL v20 = 0;
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_19;
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "fail to create DPB";
            int v21 = &_os_log_internal;
            int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 7476) = *(_DWORD *)(a1 + 3152);
          while ((AVC_RLM::getOutputFrame(*(void *)(a1 + 3104), (uint64_t)buf) & 0x80000000) == 0)
            CAVDAvcDecoder::insertFrame((_DWORD *)a1, (uint64_t)buf);
          *(_DWORD *)(a1 + 7064) = AVC_RLM::getDPBRef(*(void *)(a1 + 3104), a1 + 6872);
          if (!*(unsigned char *)(a1 + 3004)) {
            goto LABEL_243;
          }
          if (!v103)
          {
            BOOL v20 = 0;
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_19;
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "vSurfInfoDisp is NULL";
            int v21 = &_os_log_internal;
            int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
            goto LABEL_17;
          }
          IOSurfaceRef v106 = IOSurfaceLookup(*(_DWORD *)(v103 + 160));
          if (v106)
          {
            IOSurfaceRef v107 = v106;
            unint64_t SizeOfPlane = IOSurfaceGetSizeOfPlane();
            CFRelease(v107);
            int v109 = *(_DWORD *)(a1 + 3008);
            int v110 = *(_DWORD *)(a1 + 3328);
            if (__CFADD__(v109, v110 - 1))
            {
              unint64_t v111 = 0;
              unsigned int v112 = 0;
              LODWORD(v113) = 0;
              int v114 = 1;
            }
            else
            {
              unsigned int v122 = *(_DWORD *)(a1 + 3012);
              int v123 = *(_DWORD *)(a1 + 3332) - 1;
              unsigned int v112 = v122 + v123;
              if (!__CFADD__(v122, v123))
              {
                BOOL v124 = v20;
                unint64_t v113 = *(unsigned int *)(v145 + 84) * (unint64_t)v112;
                if ((v113 & 0xFFFFFFFF00000000) != 0)
                {
                  unint64_t v111 = 0;
                  int v114 = 4;
                  goto LABEL_267;
                }
                unint64_t v111 = v113 + (unint64_t)(v109 + v110 - 1);
                if (v111 >= SizeOfPlane)
                {
                  int v114 = 6;
                  goto LABEL_267;
                }
                BOOL v20 = v124;
                int v99 = v157;
                if (CAVDDecoder::calcLumaChromaTileOffset((CAVDDecoder *)a1, *(_DWORD *)(a1 + 3008), v122, *(_DWORD *)(*(void *)(a1 + 3656) + 76), *(_DWORD *)(*(void *)(a1 + 3656) + 80), *(unsigned __int8 *)(a1 + 3224), (unsigned int *)(a1 + 3016), (unsigned int *)(a1 + 3020)))
                {
LABEL_243:
                  if (v99 >= 1 && (v146 & 1) != 0)
                  {
                    int v125 = 0;
                    uint64_t v126 = 0;
                    uint64_t v127 = &_os_log_internal;
                    do
                    {
                      int v128 = *(_DWORD *)(*(void *)(a1 + 3312) + v126);
                      if (v128 != 5 && os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 67109376;
                        *(_DWORD *)&uint8_t buf[4] = v125;
                        *(_WORD *)&buf[8] = 1024;
                        *(_DWORD *)&buf[10] = v128;
                        _os_log_impl(&dword_223977000, v127, OS_LOG_TYPE_DEFAULT, "AppleAVD: -- recover from error in KeyFrame -- slice[%4d].naluTupe = %d", buf, 0xEu);
                      }
                      v126 += 1848;
                      ++v125;
                    }
                    while (1848 * v157 != v126);
                  }
                  if (*(unsigned char *)(a1 + 2356)) {
                    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 208))(a1, v12, v142);
                  }
                  int v129 = CAVDAvcDecoder::DecodePicture((CAVDAvcDecoder *)a1, v157, v12);
                  uint64_t v130 = *(void *)(a1 + 2096);
                  *(_DWORD *)(v130 + 12) = v157;
                  __n128 v131 = AppleAVDCommandBuilder::setDecodeBufferSections(*(void *)(a1 + 2344), v130 + 8);
                  if (*(unsigned char *)(a1 + 2356)) {
                    *(_DWORD *)(a1 + 2332) = CAHDec::getDecBufIndex(*(CAHDec **)(a1 + 2096));
                  }
                  if (*(unsigned char *)(a1 + 3123)) {
                    CAVDAvcDecoder::FlushDPB(a1);
                  }
                  for (unsigned int i = *(_DWORD *)(a1 + 3688); i < *(_DWORD *)(a1 + 3692); unsigned int i = *(_DWORD *)(a1 + 3688))
                  {
                    uint64_t v133 = *(unsigned int *)(a1 + 3688 + ((unint64_t)(i % 0x18) << 7) + 20);
                    *(_DWORD *)(a1 + 3688) = i + 1;
                    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)a1 + 80))(a1, v133, v131);
                  }
                  if (AVC_RLM::dec_ref_pic_marking(*(AVC_RLM **)(a1 + 3104), *(void *)(a1 + 3312) + 20, v150))
                  {
                    if (v143)
                    {
                      long long v134 = *v144;
                      long long v135 = *(_OWORD *)(a1 + 3360);
                      *(_OWORD *)(v143 + 16) = *(_OWORD *)(a1 + 3344);
                      *(_OWORD *)(v143 + 32) = v135;
                      *(_OWORD *)uint64_t v143 = v134;
                      long long v136 = *(_OWORD *)(a1 + 3376);
                      long long v137 = *(_OWORD *)(a1 + 3392);
                      long long v138 = *(_OWORD *)(a1 + 3408);
                      *(void *)(v143 + 96) = *(void *)(a1 + 3424);
                      *(_OWORD *)(v143 + 64) = v137;
                      *(_OWORD *)(v143 + 80) = v138;
                      *(_OWORD *)(v143 + 48) = v136;
                    }
                    if (v129)
                    {
                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 136315138;
                        *(void *)&uint8_t buf[4] = "DecodePicture return failure";
                        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: [CAVDAvcDecErr] %s", buf, 0xCu);
                      }
                      BOOL v20 = 1;
                      goto LABEL_19;
                    }
LABEL_151:
                    if (HIDWORD(v146)) {
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  BOOL v20 = 0;
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_19;
                  }
                  *(_DWORD *)buf = 136315138;
                  *(void *)&uint8_t buf[4] = "VADecodeFrame";
                  int v21 = &_os_log_internal;
                  int v22 = "AppleAVD: ERROR: %s(): reference marking failed\n";
                  goto LABEL_17;
                }
                BOOL v20 = 0;
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_19;
                }
                *(_DWORD *)buf = 136315138;
                *(void *)&uint8_t buf[4] = "calcLumaChromaTileOffset returns fail";
                int v21 = &_os_log_internal;
                int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
LABEL_17:
                uint32_t v23 = 12;
                goto LABEL_18;
              }
              unint64_t v111 = 0;
              LODWORD(v113) = 0;
              int v114 = 2;
            }
LABEL_267:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v139 = *(_DWORD *)(a1 + 3012);
              int v140 = *(_DWORD *)(a1 + 3332);
              int v141 = *(_DWORD *)(v145 + 84);
              *(_DWORD *)buf = 67111680;
              *(_DWORD *)&uint8_t buf[4] = v109;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v139;
              *(_WORD *)uint64_t v162 = 1024;
              *(_DWORD *)&v162[2] = v110;
              LOWORD(v163) = 1024;
              *(_DWORD *)((char *)&v163 + 2) = v140;
              HIWORD(v163) = 1024;
              LODWORD(v164) = v141;
              WORD2(v164) = 2048;
              *(void *)((char *)&v164 + 6) = v111;
              HIWORD(v164) = 2048;
              unint64_t v165 = SizeOfPlane;
              __int16 v166 = 1024;
              int v167 = v114;
              __int16 v168 = 1024;
              int v169 = v109 + v110 - 1;
              __int16 v170 = 1024;
              unsigned int v171 = v112;
              __int16 v172 = 1024;
              int v173 = v113;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: tile offset out of bounds! [%d %d] + [%d %d], %d, %zu >= %zu ?, %u; %u %u %u",
                buf,
                0x4Cu);
            }
            BOOL v20 = 0;
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_19;
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "tile offset out of bounds";
            int v21 = &_os_log_internal;
            int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
            goto LABEL_17;
          }
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = "bad IOSurface ptr in tile offset check";
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
          goto LABEL_17;
        }
        if (v102 != 2)
        {
          BOOL v20 = 0;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "decode session not started with an I-frame";
            int v21 = &_os_log_internal;
            int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
            goto LABEL_17;
          }
          goto LABEL_19;
        }
      }
      *(unsigned char *)(a1 + 3097) = 1;
      goto LABEL_174;
    }
    switch(v38)
    {
      case 1:
        unsigned int v43 = *(unsigned __int8 *)v37;
        int v39 = (unsigned __int8 *)v37 + 1;
        uint64_t v41 = v43;
        unsigned int v42 = v43 + 1;
        break;
      case 2:
        unsigned int v44 = *(unsigned __int16 *)v37;
        int v39 = (unsigned __int8 *)v37 + 2;
        uint64_t v41 = __rev16(v44);
        unsigned int v42 = v41 + 2;
        break;
      case 4:
        unsigned int v40 = *v37;
        int v39 = (unsigned __int8 *)(v37 + 1);
        uint64_t v41 = bswap32(v40);
        unsigned int v42 = v41 + 4;
        break;
      default:
        BOOL v20 = 0;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "unsupported naluLengthSize!";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)uint64_t v162 = v38;
        int v21 = &_os_log_internal;
        int v22 = "AppleAVD: [CAVDAvcDecErr] %s %d";
        goto LABEL_215;
    }
    if (&v39[v41] > v34)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "VADecodeFrame";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)uint64_t v162 = v41;
        *(_WORD *)&v162[4] = 2048;
        int v163 = v39;
        LOWORD(v164) = 2048;
        *(void *)((char *)&v164 + 2) = v34;
        WORD5(v164) = 1024;
        HIDWORD(v164) = a3;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s NALU too big! %d nal_ptr:%p, buf_end:%p; dataLength: %8d",
          buf,
          0x2Cu);
      }
      BOOL v20 = 0;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = "NALU too big!";
        int v21 = &_os_log_internal;
        int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
        goto LABEL_17;
      }
      goto LABEL_19;
    }
    if (!*(_DWORD *)(a1 + 2804))
    {
      int v78 = CAVDAvcDecoder::scanNalForEmulationPrevention((CAVDAvcDecoder *)v35, v39, v41, -96);
      LODWORD(v41) = v78;
      if (v78 >= 1)
      {
        int v79 = &v39[v78 - 1];
        while (!*v79--)
        {
          BOOL v81 = __OFSUB__(v41, 1);
          LODWORD(v41) = v41 - 1;
          if (((int)v41 < 0) ^ v81 | (v41 == 0))
          {
            LODWORD(v41) = 0;
            break;
          }
        }
      }
    }
    AVC_RBSP::setRBSP(*(AVC_RBSP **)(a1 + 3088), v39, v41);
    uint64_t v35 = AVC_RBSP::parseNAL(*(void *)(a1 + 3088), v160, 0);
    if ((v35 & 1) == 0) {
      break;
    }
    v158 += v42;
    unsigned int v45 = v38 + v36;
    switch(v160[0] >> 3)
    {
      case 1:
        if (!*(unsigned char *)(a1 + 3004)) {
          goto LABEL_58;
        }
        BOOL v20 = 0;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 1;
        int v21 = &_os_log_internal;
        int v22 = "AppleAVD: Rejecting non-IDR frame in tiled decode %d";
        uint32_t v23 = 8;
        goto LABEL_18;
      case 5:
LABEL_58:
        unsigned int v154 = v45;
        AVC_RBSP::setLen(*(void *)(a1 + 3088), v39, (v41 + 2));
        if ((int)v157 >= *(unsigned __int16 *)(a1 + 7500))
        {
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "Too many slices!";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)uint64_t v162 = v157;
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: [CAVDAvcDecErr] %s %d";
          goto LABEL_215;
        }
        if (v157 || !*(unsigned char *)(a1 + 2833)) {
          goto LABEL_63;
        }
        if ((v160[0] & 0xF8) != 0x28)
        {
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = "skip to keyframe";
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
          goto LABEL_17;
        }
        *(unsigned char *)(a1 + 2833) = 0;
        LOBYTE(v146) = 1;
LABEL_63:
        unsigned int v46 = (CAVDMvHevcDecoder *)(*(void *)(a1 + 3312) + 1848 * (int)v157 + 20);
        CAVDMvHevcDecoder::printAuList(v46);
        bzero(v46, 0x588uLL);
        if (AVC_RBSP::parseSliceHeader(*(void *)(a1 + 3088), (char *)v46, v160, *(void *)(a1 + 3304), *(void *)(a1 + 3296)))
        {
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = "invalid slice header";
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
          goto LABEL_17;
        }
        if (CAVDAvcDecoder::activatePS(a1, (uint64_t)v46))
        {
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = "fail to activate parameter set for slice";
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
          goto LABEL_17;
        }
        BOOL v149 = v20;
        uint64_t v47 = *(void *)(a1 + 3304);
        int v48 = *(_DWORD *)(a1 + 3616);
        uint64_t v49 = *(void *)(a1 + 3296);
        int v50 = *(_DWORD *)(a1 + 3612);
        uint64_t v51 = v49 + 2224 * v50;
        *(unsigned char *)(a1 + 2816) = *(unsigned char *)(v51 + 8) == 1;
        int v52 = *(_DWORD *)v46;
        if (*(_DWORD *)v46 >= *(unsigned __int16 *)(v51 + 1558)
                             + 1
                             + (*(unsigned __int16 *)(v51 + 1558) + 1) * *(unsigned __int16 *)(v51 + 1560))
        {
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "slice mbn out of bound";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)uint64_t v162 = v52;
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: [CAVDAvcDecErr] %s %d";
          goto LABEL_215;
        }
        int v53 = *(unsigned __int8 *)(v49 + 2224 * v50 + 1562);
        if (v53 != 1)
        {
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "sps.frame_mbs_only_flag != 1,";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)uint64_t v162 = v53;
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: [CAVDAvcDecErr] %s %d";
          goto LABEL_215;
        }
        uint64_t v54 = v47 + 604 * v48;
        int v55 = *(unsigned __int8 *)(v54 + 5);
        if (*(unsigned char *)(v54 + 5))
        {
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "pps.num_slice_groups_minus1 != 0,";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)uint64_t v162 = v55;
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: [CAVDAvcDecErr] %s %d";
LABEL_215:
          uint32_t v23 = 18;
          goto LABEL_18;
        }
        if (!v157 && v52)
        {
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = "first_mb_in_slice for slice0 isn't zero";
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
          goto LABEL_17;
        }
        uint64_t v148 = v49;
        int v153 = v48;
        uint64_t v56 = *(void *)(a1 + 3312) + 1848 * (int)v157;
        *(void *)(v56 + 8) = v39;
        *(_DWORD *)(v56 + 16) = v41;
        *(_DWORD *)uint64_t v56 = v160[0] >> 3;
        int NumberOfBitsParsed = AVC_RBSP::getNumberOfBitsParsed(*(int8x8_t **)(a1 + 3088));
        *(_DWORD *)(*(void *)(a1 + 3312) + 1848 * (int)v157 + 1436) = NumberOfBitsParsed;
        int v58 = *(_DWORD *)(a1 + 7496);
        if ((v58 & 0x80000000) == 0)
        {
          unsigned int v59 = NumberOfBitsParsed;
          if (NumberOfBitsParsed >= v58 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v151;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v59;
            *(_WORD *)uint64_t v162 = 1024;
            *(_DWORD *)&v162[2] = v59 >> 3;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: INFO: JumboSliceHeader at fnum %d bit_offset %d byte offset %d\n", buf, 0x14u);
          }
        }
        if (CAVDDecoder::isADSDecryption((CAVDDecoder *)a1) && !*(unsigned char *)(a1 + 10))
        {
          int v60 = CAVDDecoder::calculateClearBytes((CAVDDecoder *)a1, v154, v41, *(_DWORD *)(*(void *)(a1 + 3312) + 1848 * (int)v157 + 1436), *(_DWORD *)(a1 + 3056), *(unsigned int **)(a1 + 3040), *(unsigned int **)(a1 + 3048));
          if (v60 == -1) {
            __int16 v61 = 1023;
          }
          else {
            __int16 v61 = v60;
          }
          *(_WORD *)(*(void *)(a1 + 3312) + 1848 * (int)v157 + 1840) = v61;
          int v62 = *(_DWORD *)(a1 + 2504);
          int v63 = v62 | 0x10000;
          unsigned int v64 = v62 & 0xFFDFFFFF;
          if (*(_DWORD *)(a1 + 2420)) {
            unsigned int v65 = v63;
          }
          else {
            unsigned int v65 = v64;
          }
          *(_DWORD *)(a1 + 2504) = v65;
        }
        if (!*(_DWORD *)v46)
        {
          if (v157 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VADecodeFrame";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)uint64_t v162 = 1198;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
          }
          if ((CAVDAvcDecoder::initPicture(a1, v160, v51, (uint64_t)v46, (uint64_t)v150) & 1) == 0)
          {
            BOOL v20 = 0;
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_19;
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "initPicture failed";
            int v21 = &_os_log_internal;
            int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 3620) = 0;
        }
        uint64_t v152 = v47;
        if ((AVC_RLM::initRefPicList(*(void *)(a1 + 3104), (uint64_t)v46, (char *)(*(void *)(a1 + 3320) + 13040 * (int)v157), (uint64_t)v150) & 1) == 0)
        {
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = "unable to initialize ref pic list";
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
          goto LABEL_17;
        }
        AVC_RLM::ref_pic_list_modification(*(void *)(a1 + 3104), *(void *)(a1 + 3320) + 13040 * (int)v157, (uint64_t)v150);
        uint64_t v66 = v148 + 2224 * v50;
        int v67 = *(unsigned __int8 *)(v66 + 4);
        char v68 = *(unsigned char *)(v66 + 5);
        int v69 = *(unsigned __int8 *)(v66 + 6);
        int v70 = *(unsigned __int8 *)(v66 + 7);
        int v71 = 16 * *(unsigned __int16 *)(v51 + 1558) + 16;
        int v72 = 16 * *(unsigned __int16 *)(v51 + 1560) + 16;
        char v73 = *(unsigned char *)(v66 + 1565);
        uint16x4_t v74 = *(uint16x4_t *)(v66 + 1566);
        int v75 = *(unsigned __int8 *)(v66 + 2220);
        if (*(unsigned char *)(a1 + 10))
        {
          int v76 = *(_DWORD *)(a1 + 7492);
          int v77 = v153;
          if (v75 > v76) {
            goto LABEL_198;
          }
          goto LABEL_110;
        }
        int v85 = *(_DWORD *)(a1 + 3024);
        int v77 = v153;
        if (v71 != v85)
        {
          int v118 = 16 * *(unsigned __int16 *)(v51 + 1558) + 16;
          goto LABEL_222;
        }
        if (v72 != *(_DWORD *)(a1 + 3028))
        {
          int v118 = 16 * *(unsigned __int16 *)(v51 + 1558) + 16;
          int v85 = v118;
LABEL_222:
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          int v119 = *(_DWORD *)(a1 + 3028);
          *(_DWORD *)buf = 67110144;
          *(_DWORD *)&uint8_t buf[4] = v151;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v85;
          *(_WORD *)uint64_t v162 = 1024;
          *(_DWORD *)&v162[2] = v119;
          LOWORD(v163) = 1024;
          *(_DWORD *)((char *)&v163 + 2) = v118;
          HIWORD(v163) = 1024;
          LODWORD(v164) = v72;
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: #### <WARNING> Frame resolution change not supported Frame %d old %d %d new %d %d";
          uint32_t v23 = 32;
          goto LABEL_18;
        }
        int v76 = *(_DWORD *)(a1 + 7492);
        if (v75 > v76)
        {
LABEL_198:
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          int v105 = *(unsigned __int8 *)(a1 + 3363);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v76;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v75;
          *(_WORD *)uint64_t v162 = 1024;
          *(_DWORD *)&v162[2] = v105;
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: #### <WARNING> DPB Size Requirement Changed: origDpbSize: %d -> curDpbSize: %d, prevDpbSize: %d";
          uint32_t v23 = 20;
          goto LABEL_18;
        }
        int v86 = *(_DWORD *)(a1 + 3036);
        if (v86 != v67)
        {
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v67;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v86;
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: #### <WARNING> new_chroma_format_idc:%d m_orig_chroma_format_idc:%d";
          uint32_t v23 = 14;
          goto LABEL_18;
        }
        int v87 = *(_DWORD *)(a1 + 3032);
        if (v87 != v69)
        {
          int v120 = *(unsigned __int8 *)(v66 + 7);
          goto LABEL_228;
        }
        if (*(_DWORD *)(a1 + 7488) != v70)
        {
          int v120 = *(unsigned __int8 *)(v66 + 7);
          int v87 = *(unsigned __int8 *)(v66 + 6);
LABEL_228:
          BOOL v20 = 0;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          int v121 = *(_DWORD *)(a1 + 7488);
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)&uint8_t buf[4] = v69;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v87;
          *(_WORD *)uint64_t v162 = 1024;
          *(_DWORD *)&v162[2] = v120;
          LOWORD(v163) = 1024;
          *(_DWORD *)((char *)&v163 + 2) = v121;
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: #### <WARNING> new_bit_depth_luma_minus8:%d m_orig_bit_depth_luma_minus8:%d new_bit_depth_chro"
                "ma_minus8:%d m_orig_bit_depth_chroma_minus8:%d";
          uint32_t v23 = 26;
LABEL_18:
          _os_log_impl(&dword_223977000, v21, OS_LOG_TYPE_DEFAULT, v22, buf, v23);
          BOOL v20 = 0;
          goto LABEL_19;
        }
LABEL_110:
        if (*(_DWORD *)(a1 + 7468)) {
          int v88 = v67 != *(unsigned __int8 *)(a1 + 3360)
        }
             || v69 != *(unsigned __int8 *)(a1 + 3361)
             || v70 != *(unsigned __int8 *)(a1 + 3362)
             || v71 != *(_DWORD *)v144
             || v72 != *(_DWORD *)(a1 + 3332)
             || *(_DWORD *)(a1 + 3352) != 16;
        else {
          int v88 = 0;
        }
        *(_DWORD *)(a1 + 3328) = v71;
        *(_DWORD *)(a1 + 3332) = v72;
        *(uint32x4_t *)(a1 + 3336) = vmovl_u16(v74);
        *(_DWORD *)(a1 + 3352) = 16;
        *(unsigned char *)(a1 + 3358) = v68;
        *(unsigned char *)(a1 + 3359) = v73;
        *(unsigned char *)(a1 + 3360) = v67;
        *(unsigned char *)(a1 + 3361) = v69;
        *(unsigned char *)(a1 + 3362) = v70;
        *(unsigned char *)(a1 + 3363) = v75;
        *(unsigned char *)(a1 + 3364) = 0;
        uint64_t v89 = *(void *)(a1 + 3296) + 2224 * *(unsigned __int8 *)(v47 + 604 * v77 + 2);
        int v90 = *(unsigned __int16 *)(v89 + 1558);
        int v91 = *(unsigned __int16 *)(v89 + 1560);
        if (*(_DWORD *)(a1 + 7472)) {
          BOOL v93 = *(_DWORD *)(a1 + 3524) != v91 || *(_DWORD *)(a1 + 3440) != v90;
        }
        else {
          BOOL v93 = 0;
        }
        uint64_t v12 = v151;
        a2 = v147;
        *(void *)(a1 + 3432) = 0;
        *(_DWORD *)(a1 + 3440) = v90;
        *(_OWORD *)(a1 + 3444) = 0u;
        *(_OWORD *)(a1 + 3460) = 0u;
        *(_OWORD *)(a1 + 3476) = 0u;
        *(_OWORD *)(a1 + 3492) = 0u;
        *(_OWORD *)(a1 + 3508) = 0u;
        *(_DWORD *)(a1 + 3524) = v91;
        *(_OWORD *)(a1 + 3528) = 0u;
        *(_OWORD *)(a1 + 3544) = 0u;
        *(_OWORD *)(a1 + 3560) = 0u;
        *(_OWORD *)(a1 + 3576) = 0u;
        *(_OWORD *)(a1 + 3592) = 0u;
        *(_DWORD *)(a1 + 3608) = 0;
        if ((v88 | v93) == 1)
        {
          uint64_t v35 = AppleAVDCommandBuilder::waitNumInFlight(*(AppleAVDCommandBuilder **)(a1 + 2344), 1u);
          if (v35)
          {
            int v94 = v35;
            uint64_t v35 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
            if (v35)
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VADecodeFrame";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)uint64_t v162 = v94;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): timeout status: %d", buf, 0x12u);
            }
          }
        }
        if (((*(_DWORD *)(a1 + 7468) != 0) & ~v88) == 0)
        {
          int v159 = 0;
          (*(void (**)(uint64_t, void, int *))(*(void *)a1 + 88))(a1, 0, &v159);
          (*(void (**)(void))(**(void **)(a1 + 2096) + 136))(*(void *)(a1 + 2096));
          *(_DWORD *)(a1 + 7468) = 0;
          uint64_t v35 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2096) + 128))(*(void *)(a1 + 2096), v51);
          if (v35)
          {
            int v95 = &_os_log_internal;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(void *)&uint8_t buf[4] = "fail to allocate work buffer for sps";
              _os_log_impl(&dword_223977000, v95, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: [CAVDAvcDecErr] %s", buf, 0xCu);
            }
            int v96 = 2;
            HIDWORD(v146) = 304;
            goto LABEL_146;
          }
          *(_DWORD *)(a1 + 7468) = 1;
        }
        if (*(_DWORD *)(a1 + 7472)) {
          int v97 = v88;
        }
        else {
          int v97 = 1;
        }
        if ((v97 | v93) == 1)
        {
          (*(void (**)(void, void))(**(void **)(a1 + 2096) + 152))(*(void *)(a1 + 2096), 0);
          *(_DWORD *)(a1 + 7472) = 0;
          uint64_t v35 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 2096) + 144))(*(void *)(a1 + 2096), v51, v152 + 604 * v153, 0);
          if (v35)
          {
            uint64_t v98 = &_os_log_internal;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(void *)&uint8_t buf[4] = "virtual int CAVDAvcDecoder::VADecodeFrame(unsigned char *, int, uint32_t, int, int, i"
                                   "nt, avd_seq_params *)";
              _os_log_impl(&dword_223977000, v98, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s fail to alloc work buffer for pps\n", buf, 0xCu);
            }
            int v96 = 1;
LABEL_146:
            BOOL v20 = v149;
            if (v96 != 2) {
              return 0xFFFFFFFFLL;
            }
            goto LABEL_151;
          }
          *(_DWORD *)(a1 + 7472) = 1;
        }
        uint64_t v157 = (v157 + 1);
        unsigned int v45 = v154;
LABEL_149:
        int v37 = (unsigned int *)((char *)a2 + v158);
        int v36 = v41 + v45;
        int v34 = (unsigned __int8 *)v155;
        break;
      case 7:
        uint64_t v82 = AVC_RBSP::parseSPS(*(void *)(a1 + 3088), *(void *)(a1 + 3296));
        if (v82 != -1)
        {
          uint64_t v83 = *(void *)(a1 + 3296) + 2224 * v82;
          uint64_t v35 = CAVDAvcDecoder::DpbMaxSize(v82, v83);
          *(_DWORD *)(v83 + 2220) = v35;
          unsigned int v84 = *(unsigned __int8 *)(v83 + 1556);
          if (v35 >= v84) {
            goto LABEL_149;
          }
          int v116 = v35;
          BOOL v117 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
          BOOL v20 = 0;
          if (!v117) {
            goto LABEL_19;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VADecodeFrame";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)uint64_t v162 = v84;
          *(_WORD *)&v162[4] = 1024;
          LODWORD(v163) = v116;
          int v21 = &_os_log_internal;
          int v22 = "AppleAVD: ERROR: %s: max_num_ref_frames %d > nMaxDpbSize %d!\n";
          uint32_t v23 = 24;
          goto LABEL_18;
        }
        BOOL v20 = 0;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "bas SPS index!";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)uint64_t v162 = -1;
        int v21 = &_os_log_internal;
        int v22 = "AppleAVD: [CAVDAvcDecErr] %s %d";
        goto LABEL_215;
      case 8:
        uint64_t v35 = AVC_RBSP::parsePPS(*(int8x8_t **)(a1 + 3088), *(void *)(a1 + 3304), *(void *)(a1 + 3296));
        if (v35 != -1) {
          goto LABEL_149;
        }
        BOOL v115 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        BOOL v20 = 0;
        if (!v115) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "bad PPS index";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)uint64_t v162 = -1;
        int v21 = &_os_log_internal;
        int v22 = "AppleAVD: [CAVDAvcDecErr] %s %d";
        goto LABEL_215;
      default:
        goto LABEL_149;
    }
  }
  BOOL v20 = 0;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "parseNAL error!";
    int v21 = &_os_log_internal;
    int v22 = "AppleAVD: ERROR: [CAVDAvcDecErr] %s";
    goto LABEL_17;
  }
LABEL_19:
  if (*(unsigned char *)(a1 + 2832))
  {
    if (v20) {
      AVC_RLM::removeCurrentFrameFromDPB(*(AVC_RLM **)(a1 + 3104));
    }
    *(unsigned char *)(a1 + 2833) = 0;
    return 305;
  }
  else
  {
    *(unsigned char *)(a1 + 2833) = 1;
    CAVDAvcDecoder::FlushDPB(a1);
    for (unsigned int j = *(_DWORD *)(a1 + 3688); j < *(_DWORD *)(a1 + 3692); unsigned int j = *(_DWORD *)(a1 + 3688))
    {
      uint64_t v26 = *(unsigned int *)(a1 + 3688 + ((unint64_t)(j % 0x18) << 7) + 20);
      *(_DWORD *)(a1 + 3688) = j + 1;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v26);
    }
    return 316;
  }
}

uint64_t CAVDAvcDecoder::SetFirstPicAfterEosNal(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3072) = a2;
  return this;
}

uint64_t CAVDAvcDecoder::scanNalForEmulationPrevention(CAVDAvcDecoder *this, unsigned __int8 *a2, uint64_t a3, int a4)
{
  uint64_t result = a3;
  unsigned int v5 = a4 + a3;
  long long v6 = &a2[(a4 + a3)];
  if (a4 + (int)a3 < 1)
  {
    unsigned int v5 = 0;
    long long v6 = a2;
  }
  long long v7 = &a2[a4];
  if (a4 < 0) {
    long long v7 = v6;
  }
  else {
    unsigned int v5 = a4;
  }
  if (v5 < a3)
  {
    unsigned int v8 = 0;
    long long v9 = v7 + 1;
    int v10 = 255;
    int v11 = 255;
    do
    {
      int v12 = v11;
      int v11 = v10;
      int v10 = *(v9 - 1);
      switch((v11 << 8) | (v12 << 16) | v10)
      {
        case 0:
        case 1:
        case 2:
          if (!v8) {
            unsigned int v8 = v5;
          }
          break;
        case 3:
          if (v5 + 1 < a3)
          {
            unsigned int v13 = v8 ? v8 : v5;
            if (*v9 >= 4u) {
              unsigned int v8 = v13;
            }
          }
          break;
        default:
          break;
      }
      ++v5;
      ++v9;
    }
    while (a3 != v5);
    if (v8) {
      return v8 - 2;
    }
  }
  return result;
}

uint64_t CAVDAvcDecoder::activatePS(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = *(unsigned __int16 *)(a2 + 6);
  *(_DWORD *)(a1 + 3616) = v2;
  if (v2 > 0xFF || (uint64_t v3 = *(void *)(a1 + 3304), *(unsigned __int16 *)(v3 + 604 * v2) >= 0x100u))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      int v10 = "int CAVDAvcDecoder::activatePS(sAvcSliceHeader *)";
      __int16 v11 = 1024;
      unsigned int v12 = v2;
      uint64_t v4 = &_os_log_internal;
      unsigned int v5 = "AppleAVD: %s bad PPS index %d";
LABEL_9:
      _os_log_impl(&dword_223977000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v9, 0x12u);
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v6 = *(unsigned __int8 *)(v3 + 604 * v2 + 2);
  *(_DWORD *)(a1 + 3612) = v6;
  if (v6 > 0x1F || (uint64_t v7 = *(void *)(a1 + 3296), *(unsigned __int8 *)(v7 + 2224 * v6 + 3) >= 0x20u))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      int v10 = "int CAVDAvcDecoder::activatePS(sAvcSliceHeader *)";
      __int16 v11 = 1024;
      unsigned int v12 = v6;
      uint64_t v4 = &_os_log_internal;
      unsigned int v5 = "AppleAVD: %s bad SPS index %d";
      goto LABEL_9;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  if (!*(unsigned char *)(v7 + 2224 * v6 + 4)) {
    *(unsigned char *)(v7 + 2224 * v6 + 7) = 0;
  }
  return result;
}

uint64_t CAVDAvcDecoder::initPicture(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t inited = AVC_RLM::initPicture(*(int32x2_t **)(a1 + 3104), a2, (void *)a3, a4, a5);
  if (inited)
  {
    uint64_t v9 = *(void *)(a1 + 3640);
    *(void *)(a5 + 40) = v9;
    int v10 = *(_DWORD *)(a1 + 3636);
    *(_DWORD *)(a5 + 56) = v10;
    if (*(_DWORD *)(a1 + 2644))
    {
      uint64_t v9 = *(void *)(a1 + 3656);
      int v10 = *(_DWORD *)(a1 + 3652);
    }
    *(void *)(a5 + 48) = v9;
    *(_DWORD *)(a5 + 60) = v10;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 184))(a1) && *(void *)(a1 + 3672)) {
      *(_DWORD *)(a5 + 64) = *(_DWORD *)(a1 + 3668);
    }
    *(unsigned char *)(a5 + 104) = *(unsigned char *)(a3 + 4);
    *(unsigned char *)(a5 + 102) = *(unsigned char *)(a3 + 5);
    *(_DWORD *)(a5 + 72) = 16 * *(unsigned __int16 *)(a3 + 1558) + 16;
    *(_DWORD *)(a5 + 76) = 16 * *(unsigned __int16 *)(a3 + 1560) + 16;
    *(unsigned char *)(a5 + 103) = *(unsigned char *)(a3 + 1565) != 0;
    *(uint32x4_t *)(a5 + 80) = vmovl_u16(*(uint16x4_t *)(a3 + 1566));
    *(_WORD *)(a5 + 105) = *(_WORD *)(a3 + 6);
    while ((AVC_RLM::getOutputFrame(*(void *)(a1 + 3104), (uint64_t)&v13) & 0x80000000) == 0)
      CAVDAvcDecoder::insertFrame((_DWORD *)a1, (uint64_t)&v13);
    *(void *)&long long v11 = -1;
    *((void *)&v11 + 1) = -1;
    *(_OWORD *)(a1 + 6836) = v11;
    *(_OWORD *)(a1 + 6852) = v11;
    *(_OWORD *)(a1 + 6804) = v11;
    *(_OWORD *)(a1 + 6820) = v11;
    *(_OWORD *)(a1 + 6772) = v11;
    *(_OWORD *)(a1 + 6788) = v11;
    *(_DWORD *)(a1 + 7064) = 0;
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315138;
    int v14 = "initPicture";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s: initPicture failed\n", (uint8_t *)&v13, 0xCu);
  }
  return inited;
}

uint64_t CAVDAvcDecoder::insertFrame(_DWORD *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unsigned int v4 = a1[923];
  if (v4 - a1[922] >= 0x18 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315394;
    uint64_t v17 = "insertFrame";
    __int16 v18 = 1024;
    int v19 = 2747;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v16, 0x12u);
  }
  unsigned int v5 = &a1[32 * (unint64_t)(v4 % 0x18)];
  v5[924] = 1;
  uint64_t v6 = 56;
  if (a1[661]) {
    uint64_t v6 = 60;
  }
  uint64_t v7 = 40;
  if (a1[661]) {
    uint64_t v7 = 48;
  }
  uint64_t v8 = *(void *)(a2 + v7);
  int v9 = *(_DWORD *)(a2 + v6);
  v5[926] = a1[661] != 0;
  v5[927] = v9;
  *((void *)v5 + 464) = v8;
  long long v10 = *(_OWORD *)(a2 + 104);
  long long v11 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v5 + 930) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v5 + 934) = v11;
  *(_OWORD *)(v5 + 938) = v10;
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v13 = *(_OWORD *)(a2 + 152);
  uint64_t v14 = *(void *)(a2 + 168);
  *(_OWORD *)(v5 + 942) = *(_OWORD *)(a2 + 120);
  *((void *)v5 + 477) = v14;
  *(_OWORD *)(v5 + 950) = v13;
  *(_OWORD *)(v5 + 946) = v12;
  ++a1[923];
  return 0;
}

uint64_t CAVDAvcDecoder::DecodePicture(CAVDAvcDecoder *this, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(**((void **)this + 262) + 16))(*((void *)this + 262), a3, a2))
  {
    return 1;
  }
  (*(void (**)(void))(**((void **)this + 262) + 32))(*((void *)this + 262));
  (*(void (**)(void))(**((void **)this + 262) + 48))(*((void *)this + 262));
  if ((*(unsigned int (**)(void))(**((void **)this + 262) + 56))(*((void *)this + 262))) {
    return 4;
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 262) + 24))(*((void *)this + 262), a2);
  (*(void (**)(void, uint64_t))(**((void **)this + 262) + 88))(*((void *)this + 262), a2);
  (*(void (**)(void, void))(**((void **)this + 262) + 40))(*((void *)this + 262), *((unsigned int *)this + 778));
  return 0;
}

uint64_t CAVDAvcDecoder::VAReleaseOutputSurface(AppleAVDCommandBuilder **this, int a2, unsigned int a3)
{
  if (a3 != 1 || *((_DWORD *)this + 661)) {
    AppleAVDCommandBuilder::setReleaseCVPixelBufferIndex(this[292], a2, a3);
  }
  return 0;
}

uint64_t CAVDAvcDecoder::VADisplaySurface(CAVDAvcDecoder *this, int a2)
{
  return 0;
}

BOOL CAVDAvcDecoder::VAIsSurfaceListIndexMapped(CAVDAvcDecoder *this, int a2, int a3)
{
  if (a2 > 128) {
    return 0;
  }
  uint64_t v3 = (char *)this + 24;
  if (a3 != 1) {
    uint64_t v3 = (char *)this + 1056;
  }
  return *(void *)&v3[8 * a2] != 0;
}

uint64_t CAVDAvcDecoder::VAGetIOSurfaceIDForBufferIndex(CAVDAvcDecoder *this, unsigned int a2, int a3)
{
  if (a2 > 0x80) {
    return 0;
  }
  uint64_t v3 = (char *)this + 24;
  if (a3 != 1) {
    uint64_t v3 = (char *)this + 1056;
  }
  uint64_t v4 = *(void *)&v3[8 * a2];
  if (v4) {
    return *(unsigned int *)(v4 + 160);
  }
  else {
    return 0;
  }
}

uint64_t CAVDAvcDecoder::VAGetParams(CAVDAvcDecoder *this, int a2, unsigned int *a3)
{
  uint64_t result = 0;
  uint64_t v30 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 0:
      unsigned int v6 = CAVDAvcDecoder::DpbMaxSize(0, *((void *)this + 412) + 2224 * *((int *)this + 903));
      uint64_t result = 0;
      goto LABEL_19;
    case 1:
      unsigned int v7 = *((_DWORD *)this + 922);
      if (v7 >= *((_DWORD *)this + 923)) {
        return 0xFFFFFFFFLL;
      }
      uint64_t result = 0;
      uint64_t v8 = (char *)this + 128 * (unint64_t)(v7 % 0x18) + 3688;
      long long v9 = *(_OWORD *)(v8 + 8);
      long long v10 = *(_OWORD *)(v8 + 24);
      long long v11 = *(_OWORD *)(v8 + 56);
      *((_OWORD *)a3 + 2) = *(_OWORD *)(v8 + 40);
      *((_OWORD *)a3 + 3) = v11;
      *(_OWORD *)a3 = v9;
      *((_OWORD *)a3 + 1) = v10;
      long long v12 = *(_OWORD *)(v8 + 72);
      long long v13 = *(_OWORD *)(v8 + 88);
      long long v14 = *(_OWORD *)(v8 + 120);
      *((_OWORD *)a3 + 6) = *(_OWORD *)(v8 + 104);
      *((_OWORD *)a3 + 7) = v14;
      *((_OWORD *)a3 + 4) = v12;
      *((_OWORD *)a3 + 5) = v13;
      ++*((_DWORD *)this + 922);
      return result;
    case 2:
      *(void *)a3 = (*(uint64_t (**)(void))(**((void **)this + 262) + 160))(*((void *)this + 262));
      unsigned int v15 = (*(uint64_t (**)(void))(**((void **)this + 262) + 168))(*((void *)this + 262));
      uint64_t result = 0;
      a3[2] = v15;
      return result;
    case 3:
      unsigned int v16 = *((_DWORD *)this + 903);
      if ((v16 & 0x80000000) != 0) {
        return 0;
      }
      uint64_t result = 0;
      uint64_t v17 = *((void *)this + 412) + 2224 * v16;
      *((unsigned char *)a3 + 88) = *(unsigned char *)(v17 + 1565);
      *(uint32x4_t *)(a3 + 2) = vmovl_u16(*(uint16x4_t *)(v17 + 1566));
      *((unsigned char *)a3 + 89) = (*(unsigned char *)(v17 + 1582) & 0x40) != 0;
      *((unsigned char *)a3 + 32) = *(unsigned char *)(v17 + 4);
      *(_WORD *)((char *)a3 + 33) = *(_WORD *)(v17 + 6);
      v18.i32[0] = *(unsigned __int16 *)(v17 + 1558);
      v18.i32[1] = *(unsigned __int16 *)(v17 + 1560);
      *(int32x2_t *)a3 = vadd_s32(vshl_n_s32(v18, 4uLL), (int32x2_t)0x1000000010);
      return result;
    case 4:
      uint64_t result = 0;
      *a3 = *((_DWORD *)this + 703);
      *((_WORD *)a3 + 2) = *((_WORD *)this + 1408);
      return result;
    case 5:
      uint64_t result = 0;
      unsigned int v6 = 1;
      goto LABEL_19;
    case 6:
      if (MGGetBoolAnswer()) {
        goto LABEL_11;
      }
      unsigned int v20 = *((_DWORD *)this + 903);
      if ((v20 & 0x80000000) != 0 || (unsigned int v21 = *((_DWORD *)this + 904), (v21 & 0x80000000) != 0))
      {
        BOOL v22 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v22) {
          return result;
        }
        int v23 = *((_DWORD *)this + 904);
        int v24 = 136315650;
        unsigned int v25 = "virtual int CAVDAvcDecoder::VAGetParams(uint32_t, uint32_t *)";
        __int16 v26 = 1024;
        unsigned int v27 = v20;
        __int16 v28 = 1024;
        int v29 = v23;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): kVAGetApplyFoxtrot with m_active_sps %d m_active_pps %d", (uint8_t *)&v24, 0x18u);
      }
      else if (*(unsigned char *)(*((void *)this + 412) + 2224 * v20 + 8) {
             && *(unsigned char *)(*((void *)this + 413) + 604 * v21 + 95))
      }
      {
LABEL_11:
        uint64_t result = 0;
        *(unsigned char *)a3 = 1;
        return result;
      }
      return 0;
    case 7:
      *(void *)a3 = (*(uint64_t (**)(void, void))(**((void **)this + 262) + 176))(*((void *)this + 262), *((unsigned int *)this + 1869));
      *((void *)a3 + 1) = (*(uint64_t (**)(void, void))(**((void **)this + 262) + 184))(*((void *)this + 262), *((unsigned int *)this + 1869));
      a3[4] = (*(uint64_t (**)(void, void))(**((void **)this + 262) + 192))(*((void *)this + 262), *((unsigned int *)this + 1869));
      a3[5] = (*(uint64_t (**)(void, void))(**((void **)this + 262) + 200))(*((void *)this + 262), *((unsigned int *)this + 1869));
      unsigned int v19 = (*(uint64_t (**)(void))(**((void **)this + 262) + 216))(*((void *)this + 262));
      uint64_t result = 0;
      a3[6] = v19;
      a3[7] = 3;
      return result;
    case 8:
      if (!a3) {
        return 0;
      }
      uint64_t result = 0;
      unsigned int v6 = *((_DWORD *)this + 717);
      goto LABEL_19;
    case 9:
      uint64_t result = 0;
      unsigned int v6 = *((unsigned __int8 *)this + 12);
      goto LABEL_19;
    case 10:
      uint64_t result = 0;
      unsigned int v6 = *((_DWORD *)this + 4);
      goto LABEL_19;
    case 23:
      if (!a3) {
        return 0;
      }
      uint64_t result = 0;
      unsigned int v6 = *((_DWORD *)this + 750);
LABEL_19:
      *a3 = v6;
      return result;
    default:
      return result;
  }
}

uint64_t CAVDAvcDecoder::VASetParams(CAVDAvcDecoder *this, int a2, unsigned int *a3)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 12:
      uint64_t result = 0;
      *((unsigned char *)this + 2832) = *(unsigned char *)a3;
      return result;
    case 13:
      uint64_t result = 0;
      *((_DWORD *)this + 714) = *a3;
      *((_DWORD *)this + 715) = a3[1];
      return result;
    case 16:
      uint64_t result = 0;
      *((void *)this + 357) = *(void *)(a3 + 1);
      *((_DWORD *)this + 716) = *a3;
      return result;
    case 17:
      uint64_t result = 0;
      *((unsigned char *)this + 2834) = 1;
      *((void *)this + 355) = a3;
      return result;
    case 18:
      uint64_t result = 0;
      *((_DWORD *)this + 712) = *a3;
      return result;
    case 19:
      if (*((unsigned char *)this + 2832)) {
        goto LABEL_37;
      }
      uint64_t result = 0;
      *((unsigned char *)this + 2833) = *(unsigned char *)a3;
      return result;
    case 21:
      uint64_t result = 0;
      *((unsigned char *)this + 3004) = *(unsigned char *)a3;
      *((void *)this + 376) = *(void *)(a3 + 1);
      return result;
    case 22:
      return result;
    case 23:
      if (!a3) {
        goto LABEL_37;
      }
      uint64_t result = 0;
      *((_DWORD *)this + 750) = *a3;
      return result;
    case 24:
      uint64_t result = 0;
      *((_DWORD *)this + 702) = *a3;
      return result;
    case 25:
      uint64_t result = 0;
      int v6 = *(unsigned __int8 *)a3;
      *((unsigned char *)this + 12) = v6;
      goto LABEL_16;
    case 26:
      uint64_t result = 0;
      int v6 = *a3;
LABEL_16:
      *((_DWORD *)this + 4) = v6;
      return result;
    case 27:
      if (a3[5] <= *(_DWORD *)(*((void *)this + 260) + 56))
      {
        uint64_t v7 = **((void **)this + 292);
        uint64_t v8 = *(void **)(v7 + 3688);
        IOSurfaceLock(*(IOSurfaceRef *)(v7 + 3680), 0, 0);
        memcpy(v8, *((const void **)a3 + 1), a3[5]);
        IOSurfaceUnlock(*(IOSurfaceRef *)(**((void **)this + 292) + 3680), 0, 0);
      }
      goto LABEL_37;
    case 28:
      uint64_t result = 0;
      *((unsigned char *)this + 7484) = *(unsigned char *)a3;
      return result;
    case 29:
      uint64_t result = 0;
      *((_DWORD *)this + 724) = *a3;
      *((void *)this + 360) = *((void *)a3 + 1);
      long long v9 = *(_OWORD *)(a3 + 18);
      long long v10 = *(_OWORD *)(a3 + 26);
      long long v11 = *(_OWORD *)(a3 + 14);
      *(_OWORD *)((char *)this + 2968) = *(_OWORD *)(a3 + 22);
      *(_OWORD *)((char *)this + 2984) = v10;
      *(_OWORD *)((char *)this + 2936) = v11;
      *(_OWORD *)((char *)this + 2952) = v9;
      long long v12 = *(_OWORD *)(a3 + 10);
      *(_OWORD *)((char *)this + 2904) = *(_OWORD *)(a3 + 6);
      *(_OWORD *)((char *)this + 2920) = v12;
      return result;
    case 30:
      uint64_t result = 0;
      *((_DWORD *)this + 1870) = *a3;
      return result;
    case 31:
      uint64_t result = 0;
      *((unsigned char *)this + 10) = *(unsigned char *)a3;
      return result;
    case 32:
      uint64_t result = 0;
      *((_DWORD *)this + 1873) = *a3;
      return result;
    case 34:
      *((_DWORD *)this + 701) = *a3;
      BOOL isADSDecryption = CAVDDecoder::isADSDecryption(this);
      uint64_t result = 0;
      *((_DWORD *)this + 590) = isADSDecryption;
      return result;
    case 35:
      uint64_t result = 0;
      long long v14 = *(_OWORD *)a3;
      long long v15 = *((_OWORD *)a3 + 1);
      long long v16 = *((_OWORD *)a3 + 2);
      *(void *)((char *)this + 2412) = *((void *)a3 + 6);
      *(_OWORD *)((char *)this + 2396) = v16;
      *(_OWORD *)((char *)this + 2380) = v15;
      *(_OWORD *)((char *)this + 2364) = v14;
      *((_DWORD *)this + 627) = 1;
      return result;
    case 36:
      uint64_t result = 0;
      long long v17 = *(_OWORD *)a3;
      long long v18 = *((_OWORD *)a3 + 1);
      long long v19 = *((_OWORD *)a3 + 2);
      *(void *)((char *)this + 2468) = *((void *)a3 + 6);
      *(_OWORD *)((char *)this + 2452) = v19;
      *(_OWORD *)((char *)this + 2436) = v18;
      *(_OWORD *)((char *)this + 2420) = v17;
      *((_DWORD *)this + 628) = 1;
      return result;
    case 37:
      uint64_t result = 0;
      long long v20 = *(_OWORD *)a3;
      *(_OWORD *)((char *)this + 2488) = *(_OWORD *)(a3 + 3);
      *(_OWORD *)((char *)this + 2476) = v20;
      *((_DWORD *)this + 629) = 1;
      *((void *)this + 315) = *((void *)this + 312);
      return result;
    case 38:
      uint64_t result = 0;
      *((_DWORD *)this + 629) = 1;
      return result;
    case 39:
      uint64_t result = 0;
      *((_DWORD *)this + 626) = *a3;
      return result;
    case 40:
      uint64_t result = 0;
      *((_DWORD *)this + 764) = *a3;
      return result;
    case 41:
      uint64_t result = 0;
      *((void *)this + 380) = a3;
      return result;
    case 42:
      uint64_t result = 0;
      *((void *)this + 381) = a3;
      return result;
    case 43:
      uint64_t v21 = *((unsigned __int16 *)this + 3750);
      if (*((_WORD *)this + 3750))
      {
        BOOL v22 = (_WORD *)(*((void *)this + 414) + 1840);
        uint64_t result = 0;
        do
        {
          _WORD *v22 = *(_WORD *)a3;
          v22 += 924;
          --v21;
        }
        while (v21);
      }
      else
      {
LABEL_37:
        uint64_t result = 0;
      }
      break;
    case 44:
      uint64_t result = 0;
      long long v23 = *(_OWORD *)a3;
      *((_OWORD *)this + 159) = *((_OWORD *)a3 + 1);
      *((_OWORD *)this + 158) = v23;
      long long v24 = *((_OWORD *)a3 + 2);
      long long v25 = *((_OWORD *)a3 + 3);
      long long v26 = *((_OWORD *)a3 + 4);
      *((_DWORD *)this + 652) = a3[20];
      *((_DWORD *)this + 658) = 1;
      *((_OWORD *)this + 162) = v26;
      *((_OWORD *)this + 161) = v25;
      *((_OWORD *)this + 160) = v24;
      break;
    case 45:
      uint64_t result = 0;
      long long v27 = *(_OWORD *)a3;
      *((_DWORD *)this + 657) = a3[4];
      *(_OWORD *)((char *)this + 2612) = v27;
      *((_DWORD *)this + 659) = 1;
      break;
    case 46:
      uint64_t result = 0;
      *((unsigned char *)this + 3060) = *(unsigned char *)a3;
      *((_DWORD *)this + 766) = a3[1];
      break;
    case 48:
      uint64_t result = 0;
      *((_DWORD *)this + 663) = *a3;
      break;
    case 49:
      uint64_t result = 0;
      *((_OWORD *)this + 166) = *(_OWORD *)a3;
      break;
    case 50:
      uint64_t result = 0;
      *((unsigned char *)this + 2674) = *(unsigned char *)a3;
      break;
    case 51:
      uint64_t result = 0;
      *((unsigned char *)this + 2675) = *(unsigned char *)a3;
      break;
    case 52:
      uint64_t result = 0;
      *((void *)this + 335) = a3;
      break;
    case 57:
      uint64_t result = 0;
      *((_DWORD *)this + 1874) = *a3;
      break;
    case 58:
      uint64_t result = 0;
      *((unsigned char *)this + 7502) = *(unsigned char *)a3;
      break;
    default:
      uint64_t result = 308;
      break;
  }
  return result;
}

uint64_t CAVDAvcDecoder::VAGetError(CAVDAvcDecoder *this)
{
  return *((unsigned int *)this + 705);
}

BOOL CAVDAvcDecoder::decodeGetRenderTarget(uint64_t a1, unsigned int a2, void *a3, int a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2 > 0x80)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      long long v12 = "decodeGetRenderTarget";
      __int16 v13 = 1024;
      unsigned int v14 = a2;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s bad index %u", (uint8_t *)&v11, 0x12u);
    }
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v6 = a1 + 8 * a2;
    uint64_t v7 = (uint64_t *)(v6 + 24);
    uint64_t v8 = (uint64_t *)(v6 + 1056);
    if (a4 == 1) {
      uint64_t v8 = v7;
    }
    uint64_t v9 = *v8;
  }
  *a3 = v9;
  return v9 != 0;
}

BOOL CAVDAvcDecoder::decodeGetRenderTargetRef(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  *a5 = 0;
  if (a3 > 0x80) {
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(a1 + 8 * a3 + 1056);
  if (!v7)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_14:
      int v10 = 314;
      goto LABEL_15;
    }
    *(_DWORD *)buf = 136315138;
    int v52 = "decodeGetRenderTargetRef";
    long long v12 = &_os_log_internal;
    __int16 v13 = "AppleAVD: %s(): AVC pOrigRef is NULL!";
LABEL_13:
    _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, v13, buf, 0xCu);
    goto LABEL_14;
  }
  int v9 = *(_DWORD *)(a1 + 2856);
  if (*(_DWORD *)(v7 + 204) == v9 && *(_DWORD *)(v7 + 208) == *(_DWORD *)(a1 + 2860))
  {
    int v10 = 0;
    *a5 = v7;
LABEL_15:
    if (v10) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = *a5 == 0;
    }
    return !v14;
  }
  if (a4 > 0x80)
  {
LABEL_10:
    int v10 = 0;
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(a1 + 8 * a4 + 1056);
  *a5 = v11;
  if (!v11)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_DWORD *)buf = 136315138;
    int v52 = "decodeGetRenderTargetRef";
    long long v12 = &_os_log_internal;
    __int16 v13 = "AppleAVD: %s(): AVC pScaledRef is NULL!";
    goto LABEL_13;
  }
  if (*(_DWORD *)(v11 + 204) == v9 && *(_DWORD *)(v11 + 208) == *(_DWORD *)(a1 + 2860)) {
    goto LABEL_10;
  }
  uint64_t v41 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2096) + 176))(*(void *)(a1 + 2096), a2);
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2096) + 184))(*(void *)(a1 + 2096), a2);
  int v17 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2096) + 192))(*(void *)(a1 + 2096), a2);
  int v18 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2096) + 200))(*(void *)(a1 + 2096), a2);
  int v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 2096) + 208))(*(void *)(a1 + 2096));
  int v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 2096) + 216))(*(void *)(a1 + 2096));
  if (*(void *)(a1 + 2880))
  {
    if (*(void *)(a1 + 2928))
    {
      if (*(void *)(a1 + 2952))
      {
        int v21 = v20;
        BOOL v22 = *(void **)(a1 + 2904);
        if (v22)
        {
          if (*(void *)(a1 + 2976))
          {
            uint64_t v23 = *(void *)(a1 + 3296) + 2224 * *(int *)(a1 + 3612);
            int v39 = 16 * *(unsigned __int16 *)(v23 + 1560) + 16;
            int v40 = 16 * *(unsigned __int16 *)(v23 + 1558) + 16;
            bzero(v22, *(unsigned int *)(a1 + 2920));
            bzero(*(void **)(a1 + 2928), *(unsigned int *)(a1 + 2944));
            bzero(*(void **)(a1 + 2952), *(unsigned int *)(a1 + 2968));
            bzero(*(void **)(a1 + 2976), *(unsigned int *)(a1 + 2992));
            uint64_t v24 = *(void *)(a1 + 2344);
            unsigned int v25 = *(_DWORD *)(v7 + 204);
            unsigned int v26 = *(_DWORD *)(v7 + 208);
            unsigned int v27 = *(_DWORD *)(a1 + 2856);
            unsigned int v28 = *(_DWORD *)(a1 + 2860);
            int v29 = *(_DWORD *)(a1 + 2864);
            uint64_t v30 = *(void *)(a1 + 2880);
            unsigned int v31 = *(_DWORD *)(a1 + 2896);
            int v44 = v19;
            int v45 = v21;
            uint64_t v46 = v41;
            uint64_t v47 = v16;
            int v48 = v17;
            int v49 = v18;
            int v50 = 1;
            long long v32 = *(_OWORD *)(a1 + 2920);
            v42[0] = *(_OWORD *)(a1 + 2904);
            v42[1] = v32;
            long long v33 = *(_OWORD *)(a1 + 2936);
            long long v34 = *(_OWORD *)(a1 + 2952);
            long long v35 = *(_OWORD *)(a1 + 2968);
            v42[5] = *(_OWORD *)(a1 + 2984);
            long long v43 = xmmword_223ADBDC0;
            v42[3] = v34;
            v42[4] = v35;
            uint64_t v36 = *(void *)(a1 + 2072) + 8;
            uint64_t v37 = *(void *)(a1 + 2064) + 8;
            v42[2] = v33;
            int v10 = AppleAVDCommandBuilder::scaleOutputFrame(v24, v7 + 8, v11 + 8, v25, v26, v27, v28, v29, v30, v31, v40, v39, (uint64_t)&v43, v42, v36, v37);
            if (!v10) {
              *(void *)(v11 + 204) = *(void *)(a1 + 2856);
            }
            goto LABEL_15;
          }
        }
      }
    }
  }
  BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v38)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: CAVDAvcDecoder::DecodeGetRenderTargetRef rvra scaler buffers are not allocated!", buf, 2u);
    return 0;
  }
  return result;
}

BOOL CAVDAvcDecoder::IsIrap(CAVDAvcDecoder *this)
{
  BOOL v1 = **((_DWORD **)this + 414) == 5;
  *((unsigned char *)this + 3096) = v1;
  return v1;
}

uint64_t CAVDAvcDecoder::IsFirstPicAfterEosNal(CAVDAvcDecoder *this)
{
  return *((unsigned __int8 *)this + 3072);
}

uint64_t CAVDAvcDecoder::getFrameParams(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 3640)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 3632);
  return result;
}

uint64_t CAVDAvcDecoder::CopyBitsBufferData(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 3312) + 1848 * a3;
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = v4 - *(void *)(*(void *)(a1 + 1048) + 8);
  unint64_t v6 = *(unsigned int *)(v3 + 1436);
  unint64_t v7 = v6 >> 3;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = (*(_DWORD *)(v3 + 16) - (*(_DWORD *)(v3 + 1436) >> 3));
  if (v9)
  {
    int v10 = (char *)(v4 + (v6 >> 3));
    uint64_t v11 = (unsigned char *)(*(void *)(a2 + 8) + v5 + (v6 >> 3));
    do
    {
      char v12 = *v10++;
      *v11++ = v12;
      --v9;
    }
    while (v9);
  }
  return (v7 + v8 + v5);
}

uint64_t CAVDAvcDecoder::getSDataAddr(CAVDAvcDecoder *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 414) + 1848 * a2;
  if (*((unsigned char *)this + 2834)) {
    uint64_t v3 = *(void *)(v2 + 8) - **((void **)this + 355) + *(void *)(*((void *)this + 355) + 16);
  }
  else {
    uint64_t v3 = *(void *)(v2 + 8) - *(void *)(*((void *)this + 131) + 8) + *(void *)(*((void *)this + 131) + 24);
  }
  return (v3 + (*(_DWORD *)(v2 + 1436) >> 3));
}

uint64_t CAVDAvcDecoder::GetSDataAddr(CAVDAvcDecoder *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 414) + 1848 * a2;
  if (*((unsigned char *)this + 2834)) {
    uint64_t v3 = *(void *)(v2 + 8) - **((void **)this + 355) + *(void *)(*((void *)this + 355) + 16);
  }
  else {
    uint64_t v3 = *(void *)(v2 + 8) - *(void *)(*((void *)this + 131) + 8) + *(void *)(*((void *)this + 131) + 24);
  }
  return v3 + ((unint64_t)*(unsigned int *)(v2 + 1436) >> 3);
}

uint64_t CAVDAvcDecoder::GetSDataMemInfo(uint64_t a1, unsigned int a2, void *a3, void *a4)
{
  if (*(unsigned char *)(a1 + 2834))
  {
    uint64_t v4 = *(void *)(a1 + 3312) + 1848 * a2;
    uint64_t v5 = *(void **)(a1 + 2840);
    uint64_t v6 = *(void *)(v4 + 8) - *v5;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 1048);
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v5 = (void *)(v7 + 8);
    uint64_t v4 = *(void *)(a1 + 3312) + 1848 * a2;
    uint64_t v6 = *(void *)(v4 + 8) - v8;
  }
  *a4 = v6 + ((unint64_t)*(unsigned int *)(v4 + 1436) >> 3);
  *a3 = v5;
  return 1;
}

uint64_t CAVDAvcDecoder::allocStaticAVDMem(uint64_t a1, _OWORD *a2, uint64_t a3, int a4)
{
  return CAVDDecoder::mapAVDMemory(a1, *(mach_port_t ***)(a1 + 2344), 0, a3, a4, 1, a2, 1u, 0, 0, 0, 0);
}

__n128 CAVDAvcDecoder::populateSnapshotStruct(CAVDAvcDecoder *this, unsigned int a2, int a3)
{
  int v3 = *((_DWORD *)this + 1766);
  if (v3)
  {
    uint64_t v4 = (char *)this + 7084;
    uint64_t v5 = (uint64_t *)((char *)this + 6872);
    uint64_t v6 = *((unsigned int *)this + 1766);
    do
    {
      uint64_t v7 = *v5++;
      *(void *)(v4 - 12) = *(void *)(v7 + 40);
      *((_DWORD *)v4 - 1) = *(_DWORD *)(v7 + 56);
      *uint64_t v4 = *(_DWORD *)(v7 + 28);
      v4 += 16;
      --v6;
    }
    while (v6);
  }
  *((_DWORD *)this + 1864) = v3;
  uint64_t v8 = *((void *)this + 261);
  long long v9 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)((char *)this + 2104) = *(_OWORD *)v8;
  *(_OWORD *)((char *)this + 2120) = v9;
  long long v10 = *(_OWORD *)(v8 + 32);
  long long v11 = *(_OWORD *)(v8 + 48);
  long long v12 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)((char *)this + 2168) = *(_OWORD *)(v8 + 64);
  *(_OWORD *)((char *)this + 2184) = v12;
  *(_OWORD *)((char *)this + 2136) = v10;
  *(_OWORD *)((char *)this + 2152) = v11;
  long long v13 = *(_OWORD *)(v8 + 96);
  long long v14 = *(_OWORD *)(v8 + 112);
  long long v15 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)((char *)this + 2232) = *(_OWORD *)(v8 + 128);
  *(_OWORD *)((char *)this + 2248) = v15;
  *(_OWORD *)((char *)this + 2200) = v13;
  *(_OWORD *)((char *)this + 2216) = v14;
  __n128 result = *(__n128 *)(v8 + 160);
  long long v17 = *(_OWORD *)(v8 + 176);
  long long v18 = *(_OWORD *)(v8 + 208);
  *(_OWORD *)((char *)this + 2296) = *(_OWORD *)(v8 + 192);
  *(_OWORD *)((char *)this + 2312) = v18;
  *(__n128 *)((char *)this + 2264) = result;
  *(_OWORD *)((char *)this + 2280) = v17;
  *((_DWORD *)this + 582) = a3;
  return result;
}

uint64_t CAVDAvcDecoder::getRefBufIndex(CAVDAvcDecoder *this, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned int v3 = *((_DWORD *)this + 1864);
  if (v3 <= a2)
  {
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v5)
    {
      int v6 = 136315650;
      uint64_t v7 = "getRefBufIndex";
      __int16 v8 = 1024;
      unsigned int v9 = a2;
      __int16 v10 = 1024;
      unsigned int v11 = v3;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR! RefIndex %d > ref_pics %d", (uint8_t *)&v6, 0x18u);
      return 0;
    }
  }
  else if (*((unsigned char *)this + 16 * a2 + 7084) == 1)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return *((unsigned int *)this + 4 * a2 + 1770);
  }
  return result;
}

uint64_t CAVDAvcDecoder::getRefPicsNum(CAVDAvcDecoder *this)
{
  return *((unsigned int *)this + 1864);
}

uint64_t CAVDAvcDecoder::setRefDartVAddr(uint64_t this, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(this + 16 * a2 + 7072) + 16) = a3;
  return this;
}

void AVC_RLM::AVC_RLM(AVC_RLM *this, CAVDAvcDecoder *a2)
{
  *(void *)this = &unk_26D7401A0;
  uint64_t v4 = (char *)this + 5236;
  bzero((char *)this + 8, 0xBBCuLL);
  *((void *)v4 + 2) = 0;
  *(_OWORD *)uint64_t v4 = 0u;
  bzero((char *)this + 5264, 0x160CuLL);
  *((_OWORD *)this + 682) = 0u;
  *((void *)this + 1366) = a2;
}

void AVC_RLM::~AVC_RLM(AVC_RLM *this)
{
}

uint64_t AVC_RLM::initPicture(int32x2_t *a1, unsigned char *a2, void *__src, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  __int16 v10 = memcpy((char *)&a1[376] + 4, __src, 0x8B0uLL);
  a1[376].i32[0] = AVC_RLM::getDpbSize((uint64_t)v10, (uint64_t)__src);
  if (!*((unsigned char *)__src + 1557)
    || (__int32 v11 = a1[656].i32[1], v12 = *(_DWORD *)(a4 + 12), v11 == v12)
    || ((v11 + 1) & ((16 << a1[440].i8[6]) - 1)) == v12
    || (*a2 & 0xF8) == 0x28
    || (AVC_RLM::fillFrameNumGap(a1, a4) & 1) != 0)
  {
    *(_OWORD *)(a5 + 144) = 0u;
    *(_OWORD *)(a5 + 160) = 0u;
    *(_OWORD *)(a5 + 112) = 0u;
    *(_OWORD *)(a5 + 128) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 96) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    *(unsigned char *)(a5 + 3) = (*a2 & 0xF8) == 40;
    *(_DWORD *)(a5 + 12) = AVC_RLM::decodePicOrderCnt((uint64_t)a1, a2, (uint64_t)__src, (_DWORD *)a4);
    int v13 = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a5 + 8) = v13;
    *(unsigned char *)a5 = (*a2 & 6) != 0;
    BOOL v14 = *(unsigned char *)(a4 + 807) == 0;
    *(unsigned char *)(a5 + 1) = *(unsigned char *)(a4 + 807) != 0;
    int v15 = *(_DWORD *)(a5 + 24);
    if (v14) {
      int v15 = 0;
    }
    *(_DWORD *)(a5 + 16) = v13;
    *(_DWORD *)(a5 + 20) = v15;
    a1[655].i32[1] = 0;
    return 1;
  }
  else
  {
    BOOL v17 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v17)
    {
      int v18 = 136315138;
      int v19 = "initPicture";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s: fill frame num gap failed!\n", (uint8_t *)&v18, 0xCu);
      return 0;
    }
  }
  return result;
}

uint64_t AVC_RLM::getDpbSize(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(a2 + 2);
  if (v3 > 0x27)
  {
    switch(*(unsigned char *)(a2 + 2))
    {
      case '(':
      case ')':
        unsigned int v2 = 0x8000;
        break;
      case '*':
        unsigned int v2 = 34816;
        break;
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
        break;
      case '2':
        unsigned int v2 = 110400;
        break;
      case '3':
      case '4':
        unsigned int v2 = 184320;
        break;
      default:
        unsigned int v4 = v3 - 60;
        if (v3 == 80) {
          int v5 = 10485760;
        }
        else {
          int v5 = 0;
        }
        if (v4 >= 3) {
          unsigned int v2 = v5;
        }
        else {
          unsigned int v2 = 696320;
        }
        break;
    }
  }
  else
  {
    switch(*(unsigned char *)(a2 + 2))
    {
      case 0xA:
        unsigned int v2 = 396;
        break;
      case 0xB:
        unsigned int v2 = 900;
        break;
      case 0xC:
      case 0xD:
      case 0x14:
        unsigned int v2 = 2376;
        break;
      case 0x15:
        unsigned int v2 = 4752;
        break;
      case 0x16:
      case 0x1E:
        unsigned int v2 = 8100;
        break;
      case 0x1F:
        unsigned int v2 = 18000;
        break;
      case 0x20:
        unsigned int v2 = 20480;
        break;
      default:
        break;
    }
  }
  unsigned int v6 = v2
     / ((*(unsigned __int16 *)(a2 + 1558)
       + 1
       + (*(unsigned __int16 *)(a2 + 1558) + 1) * *(unsigned __int16 *)(a2 + 1560)) << (*(unsigned char *)(a2 + 1562) == 0));
  unsigned int v7 = *(unsigned __int8 *)(a2 + 2209);
  if (v6 > v7) {
    unsigned int v7 = v6;
  }
  if (*(unsigned char *)(a2 + 2202)) {
    BOOL v8 = *(unsigned char *)(a2 + 1574) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    unsigned int v6 = v7;
  }
  if (v6 <= *(unsigned __int8 *)(a2 + 1556)) {
    unsigned int v6 = *(unsigned __int8 *)(a2 + 1556);
  }
  if (v6 >= 0x10) {
    unsigned int v6 = 16;
  }
  return v6 + 1;
}

uint64_t AVC_RLM::fillFrameNumGap(int32x2_t *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  __int32 v3 = a1[656].i32[1];
  int v4 = (16 << a1[440].i8[6]) - 1;
  int v5 = *(_DWORD *)(a2 + 12);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  v16[0] = 10;
  unsigned int v7 = (v3 + 1) & v4;
  if (v7 == v5)
  {
LABEL_13:
    *(_DWORD *)(a2 + 12) = v5;
    *(void *)(a2 + 32) = v6;
    return 1;
  }
  else
  {
    uint64_t v9 = (uint64_t)&a1[376] + 4;
    while (1)
    {
      if (a1[440].i8[7])
      {
        *(_DWORD *)(a2 + 12) = v7;
        __int32 v10 = AVC_RLM::decodePicOrderCnt((uint64_t)a1, v16, v9, (_DWORD *)a2);
      }
      else
      {
        __int32 v10 = 0;
      }
      int v11 = v7 <= *(_DWORD *)(a2 + 12) ? 0 : -16 << a1[440].i8[6];
      if (!AVC_RLM::slidingWindowProcess((AVC_RLM *)a1, 1)) {
        break;
      }
      AVC_RLM::truncateDpb((AVC_RLM *)a1, a1[376].u32[0]);
      unsigned int v12 = a1[375].u32[1];
      if (v12 <= 0x10)
      {
        int v13 = &a1[22 * v12];
        v13[1].i32[0] = 1;
        v13[1].i8[4] = 1;
        *(__int16 *)((char *)&v13[1].i16[2] + 1) = 0;
        v13[1].i8[7] = 0;
        v13[2].i32[0] = v7;
        v13[2].i32[1] = v10;
        v13[3] = (int32x2_t)(v11 + v7);
        v13[4].i32[0] = 0;
        v13[4].i32[1] = 1;
        *(_OWORD *)v13[5].i8 = 0u;
        *(_OWORD *)v13[7].i8 = 0u;
        *(_OWORD *)v13[9].i8 = 0u;
        *(_OWORD *)v13[11].i8 = 0u;
        *(_OWORD *)v13[13].i8 = 0u;
        *(_OWORD *)v13[15].i8 = 0u;
        *(_OWORD *)v13[17].i8 = 0u;
        *(_OWORD *)v13[19].i8 = 0u;
        *(_OWORD *)v13[21].i8 = 0u;
        a1[375] = vadd_s32(a1[375], (int32x2_t)0x100000001);
      }
      unsigned int v7 = (v7 + 1) & v4;
      if (v7 == v5) {
        goto LABEL_13;
      }
    }
    BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v15)
    {
      *(_DWORD *)buf = 136315138;
      int v18 = "fillFrameNumGap";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s: sliding window process failed!\n", buf, 0xCu);
      return 0;
    }
  }
  return result;
}

unint64_t AVC_RLM::decodePicOrderCnt(uint64_t a1, unsigned char *a2, uint64_t a3, _DWORD *a4)
{
  int v4 = *(unsigned __int8 *)(a3 + 515);
  if (*(unsigned char *)(a3 + 515))
  {
    int v5 = 16 << *(unsigned char *)(a3 + 514);
    if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 5244) == 5) {
        *(void *)(a1 + 5248) = 0;
      }
      if ((*a2 & 0xF8) == 0x28)
      {
        int v11 = 0;
        unint64_t v12 = 0;
      }
      else
      {
        unsigned int v16 = a4[3];
        if (*(_DWORD *)(a1 + 5252) <= v16) {
          int v17 = 0;
        }
        else {
          int v17 = v5;
        }
        int v11 = *(_DWORD *)(a1 + 5248) + v17;
        unint64_t v12 = (__PAIR64__(2 * (v16 + v11), *a2 & 6) - 1) >> 32;
      }
      *(_DWORD *)(a1 + 5248) = v11;
    }
    else if (v4 == 1)
    {
      unsigned int v6 = *(unsigned __int8 *)(a3 + 528);
      if (*(unsigned char *)(a3 + 528))
      {
        int v7 = 0;
        BOOL v8 = (int *)(a3 + 532);
        uint64_t v9 = *(unsigned __int8 *)(a3 + 528);
        do
        {
          int v10 = *v8++;
          v7 += v10;
          --v9;
        }
        while (v9);
      }
      else
      {
        int v7 = 0;
      }
      if (*(_DWORD *)(a1 + 5244) == 5) {
        *(_DWORD *)(a1 + 5248) = 0;
      }
      if ((*a2 & 0xF8) == 0x28)
      {
        int v22 = 0;
        unsigned int v23 = a4[3];
      }
      else
      {
        unsigned int v23 = a4[3];
        if (*(_DWORD *)(a1 + 5252) <= v23) {
          int v5 = 0;
        }
        int v22 = *(_DWORD *)(a1 + 5248) + v5;
      }
      unsigned int v24 = v23 + v22;
      if (!v6) {
        unsigned int v24 = 0;
      }
      *(_DWORD *)(a1 + 5256) = v24;
      if ((*a2 & 6) == 0 && v24) {
        *(_DWORD *)(a1 + 5256) = --v24;
      }
      if (v24)
      {
        unsigned int v25 = (v24 - 1) / v6;
        int v26 = v25 * v7;
        uint64_t v27 = v24 - v25 * v6;
        unsigned int v28 = (int *)(a3 + 532);
        do
        {
          int v29 = *v28++;
          v26 += v29;
          --v27;
        }
        while (v27);
      }
      else
      {
        int v26 = 0;
      }
      if ((*a2 & 6) != 0) {
        int v30 = 0;
      }
      else {
        int v30 = *(_DWORD *)(a3 + 520);
      }
      LODWORD(v12) = a4[8] + v26 + v30;
      int v31 = a4[9] + *(_DWORD *)(a3 + 524) + v12;
      if ((int)v12 >= v31) {
        unint64_t v12 = v31;
      }
      else {
        unint64_t v12 = v12;
      }
      *(_DWORD *)(a1 + 5248) = v22;
    }
    else
    {
      return 0;
    }
    return v12;
  }
  unsigned int v13 = 16 << *(unsigned char *)(a3 + 516);
  if ((*a2 & 0xF8) == 0x28)
  {
    unsigned int v14 = 0;
    *(void *)(a1 + 5236) = 0;
    unsigned int v15 = a4[6];
  }
  else
  {
    unsigned int v14 = *(_DWORD *)(a1 + 5240);
    unsigned int v15 = a4[6];
    if (v14 > v15 && v14 - v15 >= v13 >> 1)
    {
      unsigned int v20 = *(_DWORD *)(a1 + 5236) + v13;
      goto LABEL_27;
    }
  }
  BOOL v18 = v15 >= v14;
  unsigned int v19 = v15 - v14;
  if (v19 != 0 && v18 && v19 > v13 >> 1) {
    unsigned int v20 = *(_DWORD *)(a1 + 5236) - v13;
  }
  else {
    unsigned int v20 = *(_DWORD *)(a1 + 5236);
  }
LABEL_27:
  LODWORD(v12) = v20 + v15;
  int v21 = v20 + v15 + a4[7];
  if ((int)(v20 + v15) >= v21) {
    unint64_t v12 = v21;
  }
  else {
    unint64_t v12 = v12;
  }
  if ((*a2 & 6) != 0)
  {
    *(_DWORD *)(a1 + 5236) = v20;
    *(_DWORD *)(a1 + 5240) = v15;
  }
  return v12;
}

uint64_t AVC_RLM::decodePicNumber(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 1))
  {
    unsigned int v3 = *(_DWORD *)(a3 + 8);
  }
  else
  {
    int v4 = -16 << *(unsigned char *)(result + 3526);
    unsigned int v5 = *(_DWORD *)(a3 + 8);
    if (v5 <= *(_DWORD *)(a2 + 12)) {
      int v4 = 0;
    }
    unsigned int v3 = v4 + v5;
  }
  if (*(unsigned char *)(a3 + 1)) {
    int v6 = *(_DWORD *)(a3 + 24);
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(a3 + 16) = v3;
  *(_DWORD *)(a3 + 20) = v6;
  return result;
}

uint64_t AVC_RLM::initRefPicList(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v158 = *MEMORY[0x263EF8340];
  memcpy(__dst, (const void *)a2, 0x588uLL);
  uint64_t v8 = 0;
  do
  {
    uint64_t v9 = a1 + v8;
    int v10 = *(unsigned __int8 *)(a1 + v8 + 9);
    if (*(unsigned char *)(a1 + v8 + 9))
    {
      unsigned int v11 = *(_DWORD *)(v9 + 16);
    }
    else
    {
      int v12 = -16 << *(unsigned char *)(a1 + 3526);
      unsigned int v13 = *(_DWORD *)(v9 + 16);
      if (v13 <= *(_DWORD *)(a2 + 12)) {
        int v12 = 0;
      }
      unsigned int v11 = v12 + v13;
    }
    uint64_t v14 = a1 + v8;
    uint64_t v15 = v8 + 176;
    int v16 = *(_DWORD *)(a1 + v8 + 32);
    if (!v10) {
      int v16 = 0;
    }
    *(_DWORD *)(v14 + 24) = v11;
    *(_DWORD *)(v14 + 28) = v16;
    uint64_t v8 = v15;
  }
  while (v15 != 2992);
  int v17 = __dst + 1416;
  bzero(__dst + 1416, 0xBB0uLL);
  bzero(__dst + 7224, 0xBB0uLL);
  *((void *)__dst + 1629) = 0;
  if (!*(unsigned char *)(a2 + 4))
  {
    unint64_t v32 = *(unsigned int *)(a1 + 3004);
    if (v32)
    {
      unint64_t v33 = 0;
      unsigned int v34 = 0;
      long long v35 = (long long *)(a1 + 8);
      do
      {
        if (*(unsigned char *)v35)
        {
          if (!*((unsigned char *)v35 + 1) && v34 <= 0xF)
          {
            uint64_t v37 = &v17[176 * v34++];
            long long v38 = *v35;
            long long v39 = v35[2];
            *((_OWORD *)v37 + 1) = v35[1];
            *((_OWORD *)v37 + 2) = v39;
            *(_OWORD *)uint64_t v37 = v38;
            long long v40 = v35[3];
            long long v41 = v35[4];
            long long v42 = v35[6];
            *((_OWORD *)v37 + 5) = v35[5];
            *((_OWORD *)v37 + 6) = v42;
            *((_OWORD *)v37 + 3) = v40;
            *((_OWORD *)v37 + 4) = v41;
            long long v43 = v35[7];
            long long v44 = v35[8];
            long long v45 = v35[10];
            *((_OWORD *)v37 + 9) = v35[9];
            *((_OWORD *)v37 + 10) = v45;
            *((_OWORD *)v37 + 7) = v43;
            *((_OWORD *)v37 + 8) = v44;
            unint64_t v32 = *(unsigned int *)(a1 + 3004);
          }
        }
        ++v33;
        v35 += 11;
      }
      while (v33 < v32);
    }
    else
    {
      unsigned int v34 = 0;
    }
    qSort((uint64_t)(__dst + 1416), v34, 0xB0u, (uint64_t (*)(void))comparePicNumDescending);
    unint64_t v124 = *(unsigned int *)(a1 + 3004);
    unsigned int v125 = v34;
    if (v124)
    {
      unint64_t v126 = 0;
      uint64_t v127 = (long long *)(a1 + 8);
      unsigned int v125 = v34;
      do
      {
        if (*(unsigned char *)v127)
        {
          if (*((unsigned char *)v127 + 1) && v125 <= 0xF)
          {
            int v129 = &v17[176 * v125++];
            long long v130 = *v127;
            long long v131 = v127[2];
            *((_OWORD *)v129 + 1) = v127[1];
            *((_OWORD *)v129 + 2) = v131;
            *(_OWORD *)int v129 = v130;
            long long v132 = v127[3];
            long long v133 = v127[4];
            long long v134 = v127[6];
            *((_OWORD *)v129 + 5) = v127[5];
            *((_OWORD *)v129 + 6) = v134;
            *((_OWORD *)v129 + 3) = v132;
            *((_OWORD *)v129 + 4) = v133;
            long long v135 = v127[7];
            long long v136 = v127[8];
            long long v137 = v127[10];
            *((_OWORD *)v129 + 9) = v127[9];
            *((_OWORD *)v129 + 10) = v137;
            *((_OWORD *)v129 + 7) = v135;
            *((_OWORD *)v129 + 8) = v136;
            unint64_t v124 = *(unsigned int *)(a1 + 3004);
          }
        }
        ++v126;
        v127 += 11;
      }
      while (v126 < v124);
    }
    qSort((uint64_t)&v17[176 * v34], (v125 - v34), 0xB0u, (uint64_t (*)(void))compareLongTermPicNumAscending);
    int v138 = *(char *)(a2 + 43);
    if (v138 + 1 < v125) {
      unsigned int v139 = v138 + 1;
    }
    else {
      unsigned int v139 = v125;
    }
    *((_DWORD *)__dst + 3258) = v139;
    uint64_t result = 1;
    if (*(unsigned char *)(a2 + 45) == 1) {
      return result;
    }
    if (v139 > *(char *)(a2 + 43)) {
      return result;
    }
    BOOL v140 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v140) {
      return result;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "initRefPicList";
    unsigned int v122 = &_os_log_internal;
    int v123 = "AppleAVD: ERROR: %s: refList0 size <= num_ref_idx_l0_active_minus1!\n";
LABEL_135:
    _os_log_impl(&dword_223977000, v122, OS_LOG_TYPE_DEFAULT, v123, buf, 0xCu);
    return 0;
  }
  if (*(unsigned char *)(a2 + 4) != 1) {
    return 1;
  }
  unint64_t v18 = *(unsigned int *)(a1 + 3004);
  if (v18)
  {
    unint64_t v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = a1 + 20;
    do
    {
      if (*(unsigned char *)(v21 - 12) && !*(unsigned char *)(v21 - 11))
      {
        BOOL v22 = *(_DWORD *)v21 >= *(_DWORD *)(a4 + 12) || v20 > 0xF;
        if (!v22 && (!*(_DWORD *)(v21 + 16) || *(unsigned char *)(a1 + 3527)))
        {
          unsigned int v23 = &v17[176 * v20++];
          long long v24 = *(_OWORD *)(v21 - 12);
          long long v25 = *(_OWORD *)(v21 + 20);
          *((_OWORD *)v23 + 1) = *(_OWORD *)(v21 + 4);
          *((_OWORD *)v23 + 2) = v25;
          *(_OWORD *)unsigned int v23 = v24;
          long long v26 = *(_OWORD *)(v21 + 36);
          long long v27 = *(_OWORD *)(v21 + 52);
          long long v28 = *(_OWORD *)(v21 + 84);
          *((_OWORD *)v23 + 5) = *(_OWORD *)(v21 + 68);
          *((_OWORD *)v23 + 6) = v28;
          *((_OWORD *)v23 + 3) = v26;
          *((_OWORD *)v23 + 4) = v27;
          long long v29 = *(_OWORD *)(v21 + 100);
          long long v30 = *(_OWORD *)(v21 + 116);
          long long v31 = *(_OWORD *)(v21 + 148);
          *((_OWORD *)v23 + 9) = *(_OWORD *)(v21 + 132);
          *((_OWORD *)v23 + 10) = v31;
          *((_OWORD *)v23 + 7) = v29;
          *((_OWORD *)v23 + 8) = v30;
          unint64_t v18 = *(unsigned int *)(a1 + 3004);
        }
      }
      ++v19;
      v21 += 176;
    }
    while (v19 < v18);
  }
  else
  {
    unsigned int v20 = 0;
  }
  qSort((uint64_t)(__dst + 1416), v20, 0xB0u, (uint64_t (*)(void))comparePOCDescending);
  unint64_t v46 = *(unsigned int *)(a1 + 3004);
  unsigned int v47 = v20;
  if (v46)
  {
    unint64_t v48 = 0;
    uint64_t v49 = a1 + 20;
    unsigned int v47 = v20;
    do
    {
      if (*(unsigned char *)(v49 - 12) && !*(unsigned char *)(v49 - 11))
      {
        BOOL v50 = *(_DWORD *)v49 <= *(_DWORD *)(a4 + 12) || v47 > 0xF;
        if (!v50 && (!*(_DWORD *)(v49 + 16) || *(unsigned char *)(a1 + 3527)))
        {
          uint64_t v51 = &v17[176 * v47++];
          long long v52 = *(_OWORD *)(v49 - 12);
          long long v53 = *(_OWORD *)(v49 + 20);
          *((_OWORD *)v51 + 1) = *(_OWORD *)(v49 + 4);
          *((_OWORD *)v51 + 2) = v53;
          *(_OWORD *)uint64_t v51 = v52;
          long long v54 = *(_OWORD *)(v49 + 36);
          long long v55 = *(_OWORD *)(v49 + 52);
          long long v56 = *(_OWORD *)(v49 + 84);
          *((_OWORD *)v51 + 5) = *(_OWORD *)(v49 + 68);
          *((_OWORD *)v51 + 6) = v56;
          *((_OWORD *)v51 + 3) = v54;
          *((_OWORD *)v51 + 4) = v55;
          long long v57 = *(_OWORD *)(v49 + 100);
          long long v58 = *(_OWORD *)(v49 + 116);
          long long v59 = *(_OWORD *)(v49 + 148);
          *((_OWORD *)v51 + 9) = *(_OWORD *)(v49 + 132);
          *((_OWORD *)v51 + 10) = v59;
          *((_OWORD *)v51 + 7) = v57;
          *((_OWORD *)v51 + 8) = v58;
          unint64_t v46 = *(unsigned int *)(a1 + 3004);
        }
      }
      ++v48;
      v49 += 176;
    }
    while (v48 < v46);
  }
  unsigned int v146 = v47 - v20;
  qSort((uint64_t)&v17[176 * v20], (v47 - v20), 0xB0u, (uint64_t (*)(void))comparePOCAscending);
  unint64_t v60 = *(unsigned int *)(a1 + 3004);
  unsigned int v61 = v47;
  if (v60)
  {
    unint64_t v62 = 0;
    int v63 = (long long *)(a1 + 8);
    unsigned int v61 = v47;
    do
    {
      if (*(unsigned char *)v63)
      {
        if (*((unsigned char *)v63 + 1) && v61 <= 0xF)
        {
          unsigned int v65 = &v17[176 * v61++];
          long long v66 = *v63;
          long long v67 = v63[2];
          *((_OWORD *)v65 + 1) = v63[1];
          *((_OWORD *)v65 + 2) = v67;
          *(_OWORD *)unsigned int v65 = v66;
          long long v68 = v63[3];
          long long v69 = v63[4];
          long long v70 = v63[6];
          *((_OWORD *)v65 + 5) = v63[5];
          *((_OWORD *)v65 + 6) = v70;
          *((_OWORD *)v65 + 3) = v68;
          *((_OWORD *)v65 + 4) = v69;
          long long v71 = v63[7];
          long long v72 = v63[8];
          long long v73 = v63[10];
          *((_OWORD *)v65 + 9) = v63[9];
          *((_OWORD *)v65 + 10) = v73;
          *((_OWORD *)v65 + 7) = v71;
          *((_OWORD *)v65 + 8) = v72;
          unint64_t v60 = *(unsigned int *)(a1 + 3004);
        }
      }
      ++v62;
      v63 += 11;
    }
    while (v62 < v60);
  }
  qSort((uint64_t)&v17[176 * v47], (v61 - v47), 0xB0u, (uint64_t (*)(void))compareLongTermPicNumAscending);
  uint64_t v145 = __dst + 7224;
  memcpy(__dst + 7224, &v17[176 * v20], 176 * v146);
  uint16x4_t v74 = __dst;
  int v75 = __dst + 7224;
  memcpy(&v75[176 * v146], v17, 176 * v20);
  memcpy(&v75[176 * v47], &v17[176 * v47], 176 * (v61 - v47));
  *((_DWORD *)v74 + 3258) = v61;
  *((_DWORD *)v74 + 3259) = v61;
  if (v61)
  {
    uint64_t v76 = v61;
    int v77 = v74 + 1440;
    uint64_t v78 = v61;
    do
    {
      if (*((unsigned char *)v77 - 23))
      {
        unsigned int v79 = *(v77 - 4);
      }
      else
      {
        int v80 = -16 << *(unsigned char *)(a1 + 3526);
        unsigned int v81 = *(v77 - 4);
        if (v81 <= *(_DWORD *)(a2 + 12)) {
          int v80 = 0;
        }
        unsigned int v79 = v80 + v81;
      }
      if (*((unsigned char *)v77 - 23)) {
        int v82 = *v77;
      }
      else {
        int v82 = 0;
      }
      *(v77 - 2) = v79;
      *(v77 - 1) = v82;
      v77 += 44;
      --v78;
    }
    while (v78);
    uint64_t v83 = v74 + 7248;
    uint64_t v84 = v61;
    do
    {
      if (*((unsigned char *)v83 - 23))
      {
        unsigned int v85 = *(v83 - 4);
      }
      else
      {
        int v86 = -16 << *(unsigned char *)(a1 + 3526);
        unsigned int v87 = *(v83 - 4);
        if (v87 <= *(_DWORD *)(a2 + 12)) {
          int v86 = 0;
        }
        unsigned int v85 = v86 + v87;
      }
      if (*((unsigned char *)v83 - 23)) {
        int v88 = *v83;
      }
      else {
        int v88 = 0;
      }
      *(v83 - 2) = v85;
      *(v83 - 1) = v88;
      v83 += 44;
      --v84;
    }
    while (v84);
    if (v61 >= 2)
    {
      uint64_t v89 = v74;
      while (!memcmp(v89 + 1416, v89 + 7224, 0xB0uLL))
      {
        v89 += 176;
        if (!--v76)
        {
          long long v90 = *(_OWORD *)(v74 + 7512);
          long long v91 = *(_OWORD *)(v74 + 7544);
          long long v155 = *(_OWORD *)(v74 + 7528);
          long long v156 = v91;
          long long v157 = *(_OWORD *)(v74 + 7560);
          long long v92 = *(_OWORD *)(v74 + 7448);
          long long v93 = *(_OWORD *)(v74 + 7480);
          long long v151 = *(_OWORD *)(v74 + 7464);
          long long v152 = v93;
          long long v153 = *(_OWORD *)(v74 + 7496);
          long long v154 = v90;
          long long v94 = *(_OWORD *)(v74 + 7416);
          *(_OWORD *)buf = *(_OWORD *)(v74 + 7400);
          long long v148 = v94;
          long long v149 = *(_OWORD *)(v74 + 7432);
          long long v150 = v92;
          long long v95 = v145[6];
          *(_OWORD *)(v74 + 7512) = v145[7];
          long long v96 = v145[9];
          *(_OWORD *)(v74 + 7528) = v145[8];
          *(_OWORD *)(v74 + 7544) = v96;
          *(_OWORD *)(v74 + 7560) = v145[10];
          long long v97 = v145[2];
          *(_OWORD *)(v74 + 7448) = v145[3];
          long long v98 = v145[5];
          *(_OWORD *)(v74 + 7464) = v145[4];
          *(_OWORD *)(v74 + 7480) = v98;
          *(_OWORD *)(v74 + 7496) = v95;
          long long v99 = v145[1];
          *(_OWORD *)(v74 + 7400) = *v145;
          *(_OWORD *)(v74 + 7416) = v99;
          *(_OWORD *)(v74 + 7432) = v97;
          long long v100 = v156;
          v145[8] = v155;
          v145[9] = v100;
          v145[10] = v157;
          long long v101 = v152;
          v145[4] = v151;
          v145[5] = v101;
          long long v102 = v154;
          v145[6] = v153;
          v145[7] = v102;
          long long v103 = v148;
          *uint64_t v145 = *(_OWORD *)buf;
          v145[1] = v103;
          long long v104 = v150;
          v145[2] = v149;
          v145[3] = v104;
          break;
        }
      }
    }
  }
  unsigned int v105 = *(char *)(a2 + 43);
  if (v105 + 1 < v61) {
    uint64_t v106 = v105 + 1;
  }
  else {
    uint64_t v106 = v61;
  }
  *((_DWORD *)v74 + 3258) = v106;
  unsigned int v107 = *(char *)(a2 + 44);
  if (v107 + 1 < v61) {
    uint64_t v108 = v107 + 1;
  }
  else {
    uint64_t v108 = v61;
  }
  *((_DWORD *)v74 + 3259) = v108;
  if (v106 < 2)
  {
LABEL_96:
    if (v108 >= 2)
    {
      int v113 = *((_DWORD *)v74 + 1809);
      int v114 = v74 + 7428;
      uint64_t v115 = v108 - 1;
      while (1)
      {
        int v116 = v113;
        int v113 = *(v114 - 4);
        if (v116 == v113 && !*(v114 - 44) && !*v114 && !*(unsigned char *)(a1 + 3527)) {
          break;
        }
        v114 += 44;
        if (!--v115) {
          goto LABEL_103;
        }
      }
      BOOL v144 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v144)
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = "initRefPicList";
        unsigned int v122 = &_os_log_internal;
        int v123 = "AppleAVD: ERROR: %s: B slice - reflist 1 has ref pics with non-unique POC\n";
        goto LABEL_135;
      }
      return result;
    }
LABEL_103:
    if (*(unsigned char *)(a2 + 45) != 1 && v106 <= v105)
    {
      BOOL v120 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      BOOL v121 = v120;
      uint64_t result = 0;
      if (!v121) {
        return result;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "initRefPicList";
      unsigned int v122 = &_os_log_internal;
      int v123 = "AppleAVD: ERROR: %s: refList0 size <= num_ref_idx_l0_active_minus1!\n";
      goto LABEL_135;
    }
    if (*(unsigned char *)(a2 + 46) != 1 && v108 <= v107)
    {
      BOOL v141 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      BOOL v142 = v141;
      uint64_t result = 0;
      if (!v142) {
        return result;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "initRefPicList";
      unsigned int v122 = &_os_log_internal;
      int v123 = "AppleAVD: ERROR: %s: refList1 size <= num_ref_idx_l1_active_minus1!\n";
      goto LABEL_135;
    }
    return 1;
  }
  int v109 = *((_DWORD *)v74 + 357);
  int v110 = v74 + 1620;
  uint64_t v111 = v106 - 1;
  while (1)
  {
    int v112 = v109;
    int v109 = *(v110 - 4);
    if (v112 == v109 && !*(v110 - 44) && !*v110 && !*(unsigned char *)(a1 + 3527)) {
      break;
    }
    v110 += 44;
    if (!--v111) {
      goto LABEL_96;
    }
  }
  BOOL v143 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v143)
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "initRefPicList";
    unsigned int v122 = &_os_log_internal;
    int v123 = "AppleAVD: ERROR: %s: B slice - reflist 0 has ref pics with non-unique POC\n";
    goto LABEL_135;
  }
  return result;
}

uint64_t comparePicNumDescending(_DWORD *a1, _DWORD *a2)
{
  int v2 = a2[4];
  int v3 = a1[4];
  BOOL v4 = v2 <= v3;
  if (v2 >= v3) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = -1;
  }
  if (v4) {
    return v5;
  }
  else {
    return 1;
  }
}

uint64_t compareLongTermPicNumAscending(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[5];
  int v3 = a2[5];
  BOOL v4 = v2 <= v3;
  if (v2 >= v3) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = -1;
  }
  if (v4) {
    return v5;
  }
  else {
    return 1;
  }
}

uint64_t comparePOCDescending(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[3];
  int v3 = a2[3];
  BOOL v4 = v3 <= v2;
  if (v3 >= v2) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = -1;
  }
  if (v4) {
    return v5;
  }
  else {
    return 1;
  }
}

uint64_t comparePOCAscending(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[3];
  int v3 = a2[3];
  BOOL v4 = v2 <= v3;
  if (v2 >= v3) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = -1;
  }
  if (v4) {
    return v5;
  }
  else {
    return 1;
  }
}

uint64_t AVC_RLM::findRefFrameByPicNum(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  for (unsigned int i = (_DWORD *)(a2 + 16); ; i += 44)
  {
    if (*((unsigned char *)i - 16))
    {
      int v7 = i + 1;
      BOOL v8 = *((unsigned char *)i - 15) != 0;
      if (!a5) {
        int v7 = i;
      }
      int v9 = *v7;
      if (!a5) {
        BOOL v8 = *((unsigned char *)i - 15) == 0;
      }
      if (v8 && v9 == a4) {
        break;
      }
    }
    if (a3 == ++result) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t AVC_RLM::findRefFrameByPicNumInDPB(AVC_RLM *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 751);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  for (unsigned int i = (_DWORD *)((char *)this + 24); !*((unsigned char *)i - 16) || *((unsigned char *)i - 15) || *i != a2; i += 44)
  {
    if (v2 == ++result) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void AVC_RLM::reorderRefPicList(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  if (a4 <= 1)
  {
    unint64_t v5 = 0;
    int v6 = 0;
    unsigned int v7 = 16 << *(unsigned char *)(a1 + 3526);
    uint64_t v106 = a4;
    uint64_t v8 = a2 + 5808 * a4 + 1416;
    uint64_t v9 = a2 + 17 * a4 + 47;
    uint64_t v10 = a2 + 68 * a4;
    uint64_t v110 = v10 + 84;
    uint64_t v108 = v10 + 220;
    unsigned int v11 = (char *)(a2 + 44);
    if (!a4) {
      unsigned int v11 = (char *)(a2 + 43);
    }
    int v105 = *v11 + 1;
    unsigned int v12 = *(_DWORD *)(a3 + 8);
    unsigned int v13 = &_os_log_internal;
    while (1)
    {
      unsigned int v14 = *(unsigned __int8 *)(v9 + v5);
      if (v14 > 2)
      {
LABEL_61:
        *(_DWORD *)(a2 + 4 * v106 + 13032) = v105;
        return;
      }
      if (v14 == 2)
      {
        int v16 = *(_DWORD *)(v108 + 4 * v5);
        unint64_t v17 = (v6 + 16);
        if (v6 == -16) {
          goto LABEL_46;
        }
        unint64_t v18 = 0;
        uint64_t v19 = -1;
        uint64_t v20 = v8;
        while (1)
        {
          if (*(unsigned char *)v20)
          {
            if (*(unsigned char *)(v20 + 1) && *(_DWORD *)(v20 + 20) == v16) {
              break;
            }
          }
          ++v18;
          v20 += 176;
          ++v19;
          if (v17 == v18) {
            goto LABEL_46;
          }
        }
        if ((v18 & 0x80000000) != 0)
        {
LABEL_46:
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "reorderRefPicList";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v16;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = a4;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v5;
            unsigned int v47 = v13;
            unint64_t v48 = "AppleAVD: %s() Cannot find LongTermPicNumLX %d in refList[%d][%d] and beyond";
            goto LABEL_48;
          }
        }
        else
        {
          if (v5 < v18)
          {
            uint64_t v49 = 0;
            long long v50 = *(_OWORD *)(v20 + 144);
            long long v118 = *(_OWORD *)(v20 + 128);
            long long v119 = v50;
            long long v120 = *(_OWORD *)(v20 + 160);
            long long v51 = *(_OWORD *)(v20 + 80);
            long long v114 = *(_OWORD *)(v20 + 64);
            long long v115 = v51;
            long long v52 = *(_OWORD *)(v20 + 112);
            long long v116 = *(_OWORD *)(v20 + 96);
            long long v117 = v52;
            long long v53 = *(_OWORD *)(v20 + 16);
            *(_OWORD *)buf = *(_OWORD *)v20;
            *(_OWORD *)&uint8_t buf[16] = v53;
            long long v54 = *(_OWORD *)(v20 + 48);
            long long v112 = *(_OWORD *)(v20 + 32);
            long long v113 = v54;
            do
            {
              unint64_t v55 = v19;
              long long v56 = (long long *)(v8 + 176 * v19);
              long long v57 = (_OWORD *)(v20 + v49);
              long long v58 = *v56;
              long long v59 = v56[2];
              v57[1] = v56[1];
              v57[2] = v59;
              _OWORD *v57 = v58;
              long long v60 = v56[3];
              long long v61 = v56[4];
              long long v62 = v56[6];
              v57[5] = v56[5];
              v57[6] = v62;
              v57[3] = v60;
              v57[4] = v61;
              long long v63 = v56[7];
              long long v64 = v56[8];
              long long v65 = v56[10];
              v57[9] = v56[9];
              v57[10] = v65;
              v57[7] = v63;
              v57[8] = v64;
              v49 -= 176;
              --v19;
            }
            while (v55 > v5);
            goto LABEL_45;
          }
          if (v5 > v18)
          {
            if (v5 < v17)
            {
              uint64_t v84 = (_OWORD *)(v8 + 176 * v17);
              unint64_t v85 = v17 - 1;
              do
              {
                unint64_t v86 = v85;
                unsigned int v87 = (long long *)(v8 + 176 * v85);
                long long v88 = *v87;
                long long v89 = v87[2];
                v84[1] = v87[1];
                v84[2] = v89;
                *uint64_t v84 = v88;
                long long v90 = v87[3];
                long long v91 = v87[4];
                long long v92 = v87[6];
                v84[5] = v87[5];
                v84[6] = v92;
                v84[3] = v90;
                v84[4] = v91;
                long long v93 = v87[7];
                long long v94 = v87[8];
                long long v95 = v87[10];
                v84[9] = v87[9];
                v84[10] = v95;
                v84[7] = v93;
                v84[8] = v94;
                v84 -= 11;
                --v85;
              }
              while (v86 > v5);
            }
            goto LABEL_60;
          }
        }
      }
      else
      {
        if (*(unsigned char *)(v9 + v5))
        {
          unsigned int v22 = v12 + *(_DWORD *)(v110 + 4 * v5) + 1;
          if (v22 >= v7) {
            unsigned int v23 = v7;
          }
          else {
            unsigned int v23 = 0;
          }
          unsigned int v12 = v22 - v23;
        }
        else
        {
          int v15 = v12 + ~*(_DWORD *)(v110 + 4 * v5);
          unsigned int v12 = (v7 & (v15 >> 31)) + v15;
        }
        if (v12 <= *(_DWORD *)(a3 + 8)) {
          unsigned int v24 = 0;
        }
        else {
          unsigned int v24 = v7;
        }
        unsigned int v25 = v12 - v24;
        unint64_t v26 = (v6 + 16);
        if (v6 == -16) {
          goto LABEL_39;
        }
        unint64_t v27 = 0;
        uint64_t v28 = -1;
        uint64_t v20 = v8;
        while (1)
        {
          if (*(unsigned char *)v20)
          {
            if (!*(unsigned char *)(v20 + 1) && *(_DWORD *)(v20 + 16) == v25) {
              break;
            }
          }
          ++v27;
          v20 += 176;
          ++v28;
          if (v26 == v27) {
            goto LABEL_39;
          }
        }
        if ((v27 & 0x80000000) != 0)
        {
LABEL_39:
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "reorderRefPicList";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v25;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = a4;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v5;
            unsigned int v47 = v13;
            unint64_t v48 = "AppleAVD: %s() Cannot find picNumLX %d for refList[%d][%d]";
LABEL_48:
            _os_log_impl(&dword_223977000, v47, OS_LOG_TYPE_DEFAULT, v48, buf, 0x1Eu);
          }
        }
        else
        {
          if (v5 < v27)
          {
            uint64_t v30 = 0;
            long long v31 = *(_OWORD *)(v20 + 144);
            long long v118 = *(_OWORD *)(v20 + 128);
            long long v119 = v31;
            long long v120 = *(_OWORD *)(v20 + 160);
            long long v32 = *(_OWORD *)(v20 + 80);
            long long v114 = *(_OWORD *)(v20 + 64);
            long long v115 = v32;
            long long v33 = *(_OWORD *)(v20 + 112);
            long long v116 = *(_OWORD *)(v20 + 96);
            long long v117 = v33;
            long long v34 = *(_OWORD *)(v20 + 16);
            *(_OWORD *)buf = *(_OWORD *)v20;
            *(_OWORD *)&uint8_t buf[16] = v34;
            long long v35 = *(_OWORD *)(v20 + 48);
            long long v112 = *(_OWORD *)(v20 + 32);
            long long v113 = v35;
            do
            {
              unint64_t v36 = v28;
              uint64_t v37 = (long long *)(v8 + 176 * v28);
              long long v38 = (_OWORD *)(v20 + v30);
              long long v39 = *v37;
              long long v40 = v37[2];
              v38[1] = v37[1];
              v38[2] = v40;
              *long long v38 = v39;
              long long v41 = v37[3];
              long long v42 = v37[4];
              long long v43 = v37[6];
              v38[5] = v37[5];
              v38[6] = v43;
              v38[3] = v41;
              v38[4] = v42;
              long long v44 = v37[7];
              long long v45 = v37[8];
              long long v46 = v37[10];
              v38[9] = v37[9];
              v38[10] = v46;
              v38[7] = v44;
              v38[8] = v45;
              v30 -= 176;
              --v28;
            }
            while (v36 > v5);
LABEL_45:
            long long v66 = v119;
            long long v67 = (_OWORD *)(v8 + 176 * v5);
            v67[8] = v118;
            v67[9] = v66;
            v67[10] = v120;
            long long v68 = v115;
            v67[4] = v114;
            v67[5] = v68;
            long long v69 = v117;
            v67[6] = v116;
            v67[7] = v69;
            long long v70 = *(_OWORD *)&buf[16];
            _OWORD *v67 = *(_OWORD *)buf;
            v67[1] = v70;
            long long v71 = v113;
            v67[2] = v112;
            v67[3] = v71;
            goto LABEL_49;
          }
          if (v5 > v27)
          {
            if (v5 < v26)
            {
              long long v72 = (_OWORD *)(v8 + 176 * v26);
              unint64_t v73 = v26 - 1;
              do
              {
                unint64_t v74 = v73;
                int v75 = (long long *)(v8 + 176 * v73);
                long long v76 = *v75;
                long long v77 = v75[2];
                v72[1] = v75[1];
                v72[2] = v77;
                _OWORD *v72 = v76;
                long long v78 = v75[3];
                long long v79 = v75[4];
                long long v80 = v75[6];
                v72[5] = v75[5];
                v72[6] = v80;
                v72[3] = v78;
                v72[4] = v79;
                long long v81 = v75[7];
                long long v82 = v75[8];
                long long v83 = v75[10];
                v72[9] = v75[9];
                v72[10] = v83;
                v72[7] = v81;
                v72[8] = v82;
                v72 -= 11;
                --v73;
              }
              while (v74 > v5);
            }
LABEL_60:
            long long v96 = (_OWORD *)(v8 + 176 * v5);
            long long v97 = *(_OWORD *)v20;
            long long v98 = *(_OWORD *)(v20 + 32);
            v96[1] = *(_OWORD *)(v20 + 16);
            v96[2] = v98;
            *long long v96 = v97;
            long long v99 = *(_OWORD *)(v20 + 48);
            long long v100 = *(_OWORD *)(v20 + 64);
            long long v101 = *(_OWORD *)(v20 + 96);
            v96[5] = *(_OWORD *)(v20 + 80);
            v96[6] = v101;
            v96[3] = v99;
            v96[4] = v100;
            long long v102 = *(_OWORD *)(v20 + 112);
            long long v103 = *(_OWORD *)(v20 + 128);
            long long v104 = *(_OWORD *)(v20 + 160);
            v96[9] = *(_OWORD *)(v20 + 144);
            v96[10] = v104;
            v96[7] = v102;
            v96[8] = v103;
            ++v6;
          }
        }
      }
LABEL_49:
      if (++v5 == 17) {
        goto LABEL_61;
      }
    }
  }
}

void AVC_RLM::ref_pic_list_modification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 45)) {
    AVC_RLM::reorderRefPicList(a1, a2, a3, 0);
  }
  if (*(unsigned char *)(a2 + 46))
  {
    AVC_RLM::reorderRefPicList(a1, a2, a3, 1u);
  }
}

BOOL AVC_RLM::slidingWindowProcess(AVC_RLM *this, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned int v2 = *((unsigned __int8 *)this + 4568);
  unsigned int v3 = *((_DWORD *)this + 752);
  if (v3 < v2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315650;
      unsigned int v11 = "slidingWindowProcess";
      __int16 v12 = 1024;
      unsigned int v13 = v2;
      __int16 v14 = 1024;
      unsigned int v15 = v3;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s: max_num_ref_frames %d > dpbSize %d\n", (uint8_t *)&v10, 0x18u);
    }
  }
  else
  {
    if (v2 <= 1) {
      int v4 = 1;
    }
    else {
      int v4 = *((unsigned __int8 *)this + 4568);
    }
    unsigned int v5 = v4 - a2;
    unsigned int v6 = *((_DWORD *)this + 750);
    if (v6 > v5)
    {
      uint64_t v7 = *((unsigned int *)this + 751);
      if (v7)
      {
        for (unsigned int i = (char *)this + 8; !*i || i[1]; i += 176)
        {
          if (!--v7) {
            return v3 >= v2;
          }
        }
        *unsigned int i = 0;
        *((_DWORD *)this + 750) = v6 - 1;
      }
    }
  }
  return v3 >= v2;
}

double AVC_RLM::truncateDpb(AVC_RLM *this, unsigned int a2)
{
  unint64_t v3 = a2;
  unint64_t v4 = *((unsigned int *)this + 751);
  if (v4 >= a2)
  {
    *(double *)&long long v5 = AVC_RLM::removeUnusedRefFrames(this);
    unint64_t v4 = *((unsigned int *)this + 751);
  }
  if (v4 >= v3)
  {
    while (v4)
    {
      uint64_t v6 = 0;
      unsigned int v7 = -1;
      int v8 = 0x7FFFFFFF;
      uint64_t v9 = (int *)((char *)this + 20);
      do
      {
        if (!*((unsigned char *)v9 - 8) && *v9 < v8)
        {
          unsigned int v7 = v6;
          int v8 = *v9;
        }
        ++v6;
        v9 += 44;
      }
      while (v4 != v6);
      if ((v7 & 0x80000000) != 0)
      {
        if (v3 > 1) {
          return *(double *)&v5;
        }
        do
        {
          AVC_RLM::removeReferenceFrame(this, v4 - 1);
          LODWORD(v4) = *((_DWORD *)this + 751);
        }
        while (v4);
        break;
      }
      int v10 = (char *)this + 176 * v7;
      long long v5 = *(_OWORD *)(v10 + 24);
      long long v11 = *(_OWORD *)(v10 + 8);
      __int16 v12 = (_OWORD *)((char *)this + 176 * *((unsigned int *)this + 2726));
      v12[331] = *(_OWORD *)(v10 + 40);
      long long v13 = *(_OWORD *)(v10 + 56);
      long long v14 = *(_OWORD *)(v10 + 72);
      long long v15 = *(_OWORD *)(v10 + 88);
      v12[335] = *(_OWORD *)(v10 + 104);
      v12[334] = v15;
      v12[333] = v14;
      v12[332] = v13;
      long long v16 = *(_OWORD *)(v10 + 120);
      long long v17 = *(_OWORD *)(v10 + 136);
      long long v18 = *(_OWORD *)(v10 + 152);
      v12[339] = *(_OWORD *)(v10 + 168);
      v12[338] = v18;
      v12[337] = v17;
      v12[336] = v16;
      v12[329] = v11;
      v12[330] = v5;
      *((_DWORD *)this + 2726) = (*((_DWORD *)this + 2726) + 1) & 0x1F;
      ++*((_DWORD *)this + 2724);
      v10[12] = 1;
      if (!v10[8])
      {
        *(double *)&long long v5 = AVC_RLM::removeReferenceFrame(this, v7);
        unint64_t v4 = *((unsigned int *)this + 751);
      }
      if (v4 < v3) {
        return *(double *)&v5;
      }
    }
    *(void *)&long long v5 = 0;
    *((void *)this + 375) = 0;
  }
  return *(double *)&v5;
}

uint64_t AVC_RLM::addReferenceFrame(uint64_t result, long long *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 3004);
  if (v2 <= 0x10)
  {
    uint64_t v3 = result + 176 * v2;
    long long v4 = *a2;
    long long v5 = a2[1];
    *(_OWORD *)(v3 + 40) = a2[2];
    *(_OWORD *)(v3 + 24) = v5;
    *(_OWORD *)(v3 + 8) = v4;
    long long v6 = a2[3];
    long long v7 = a2[4];
    long long v8 = a2[5];
    *(_OWORD *)(v3 + 104) = a2[6];
    *(_OWORD *)(v3 + 88) = v8;
    *(_OWORD *)(v3 + 72) = v7;
    *(_OWORD *)(v3 + 56) = v6;
    long long v9 = a2[7];
    long long v10 = a2[8];
    long long v11 = a2[9];
    *(_OWORD *)(v3 + 168) = a2[10];
    *(_OWORD *)(v3 + 152) = v11;
    *(_OWORD *)(v3 + 136) = v10;
    *(_OWORD *)(v3 + 120) = v9;
    ++*(_DWORD *)(result + 3004);
    if (*(unsigned char *)a2) {
      ++*(_DWORD *)(result + 3000);
    }
  }
  return result;
}

BOOL AVC_RLM::dec_ref_pic_marking(AVC_RLM *this, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  if (a3[3])
  {
    unsigned int v6 = *((_DWORD *)this + 751);
    *((_DWORD *)this + 1313) = *(_DWORD *)(a2 + 12);
    goto LABEL_87;
  }
  if (*(unsigned char *)(a2 + 808))
  {
    uint64_t v7 = 0;
    char v8 = 0;
    long long v9 = &_os_log_internal;
    long long v59 = (char *)this + 24;
    do
    {
      switch(*(unsigned char *)(a2 + v7 + 809))
      {
        case 0:
          goto LABEL_69;
        case 1:
          int v10 = *((_DWORD *)a3 + 4);
          int v11 = *(_DWORD *)(a2 + 4 * v7 + 844);
          unsigned int v12 = *((_DWORD *)this + 751);
          if (v12)
          {
            uint64_t v13 = *((unsigned int *)this + 751);
            long long v14 = v59;
            do
            {
              if (*((unsigned char *)v14 - 16) && !*((unsigned char *)v14 - 15) && *v14 == v10 + ~v11)
              {
                *((unsigned char *)v14 - 16) = 0;
                goto LABEL_58;
              }
              v14 += 44;
              --v13;
            }
            while (v13);
          }
          if (v12 >= *((_DWORD *)this + 752) + 2) {
            char v8 = 1;
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            long long v61 = "dec_ref_pic_marking";
            __int16 v62 = 1024;
            int v63 = v10 + ~v11;
            __int16 v64 = 1024;
            int v65 = v10;
            __int16 v66 = 1024;
            int v67 = v11;
            long long v15 = v9;
            long long v16 = "AppleAVD: %s MMC 1: Cannot find picNumX %d CurrPicNum %d difference_of_pic_nums_minus1 %d";
            goto LABEL_34;
          }
          goto LABEL_59;
        case 2:
          unsigned int v17 = *((_DWORD *)this + 751);
          if (!v17) {
            goto LABEL_22;
          }
          uint64_t v18 = *((unsigned int *)this + 751);
          uint64_t v19 = (_DWORD *)((char *)this + 32);
          do
          {
            if (*((unsigned char *)v19 - 24) && *((unsigned char *)v19 - 23) && *(v19 - 1) == *(_DWORD *)(a2 + 4 * v7 + 984))
            {
              *((_WORD *)v19 - 12) = 0;
              *uint64_t v19 = 0;
LABEL_58:
              --*((_DWORD *)this + 750);
              goto LABEL_59;
            }
            v19 += 44;
            --v18;
          }
          while (v18);
LABEL_22:
          if (v17 >= *((_DWORD *)this + 752) + 2) {
            char v8 = 1;
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = *(_DWORD *)(a2 + 4 * v7 + 984);
            *(_DWORD *)buf = 136315394;
            long long v61 = "dec_ref_pic_marking";
            __int16 v62 = 1024;
            int v63 = v20;
            long long v15 = v9;
            long long v16 = "AppleAVD: %s MMC 2: Cannot find LongTermPicNum %d";
            uint32_t v21 = 18;
            goto LABEL_35;
          }
          goto LABEL_59;
        case 3:
          int v22 = *((_DWORD *)a3 + 4);
          uint64_t v23 = a2 + 4 * v7;
          int v24 = v22 + ~*(_DWORD *)(v23 + 844);
          uint64_t v25 = *((unsigned int *)this + 751);
          if (!v25) {
            goto LABEL_32;
          }
          uint64_t v26 = 0;
          unint64_t v27 = v59;
          break;
        case 4:
          uint64_t v29 = *((unsigned int *)this + 751);
          if (v29)
          {
            uint64_t v30 = (_DWORD *)((char *)this + 32);
            do
            {
              if (*((unsigned char *)v30 - 24) && *((unsigned char *)v30 - 23) && *v30 >= *(_DWORD *)(a2 + 4 * v7 + 1264))
              {
                *((_WORD *)v30 - 12) = 0;
                *uint64_t v30 = 0;
                --*((_DWORD *)this + 750);
              }
              v30 += 44;
              --v29;
            }
            while (v29);
          }
          goto LABEL_59;
        case 5:
          *((_DWORD *)this + 750) = 0;
          uint64_t v31 = *((unsigned int *)this + 751);
          if (v31)
          {
            long long v32 = (_DWORD *)((char *)this + 32);
            do
            {
              *((_WORD *)v32 - 12) = 0;
              *long long v32 = 0;
              v32 += 44;
              --v31;
            }
            while (v31);
          }
          *((_DWORD *)this + 1311) = 5;
          goto LABEL_59;
        case 6:
          a3[1] = 1;
          uint64_t v33 = a2 + 4 * v7;
          int v34 = *(_DWORD *)(v33 + 1124);
          *((_DWORD *)a3 + 5) = v34;
          *((_DWORD *)a3 + 6) = v34;
          uint64_t v35 = *((unsigned int *)this + 751);
          if (v35)
          {
            unint64_t v36 = (_DWORD *)(v33 + 1124);
            uint64_t v37 = (_DWORD *)((char *)this + 32);
            do
            {
              if (*((unsigned char *)v37 - 24) && *((unsigned char *)v37 - 23) && *v37 == *v36)
              {
                *((_WORD *)v37 - 12) = 0;
                *uint64_t v37 = 0;
                --*((_DWORD *)this + 750);
              }
              v37 += 44;
              --v35;
            }
            while (v35);
          }
          goto LABEL_59;
        default:
          goto LABEL_59;
      }
      while (!*(v27 - 16) || *(v27 - 15) || *(_DWORD *)v27 != v24)
      {
        ++v26;
        v27 += 176;
        if (v25 == v26) {
          goto LABEL_32;
        }
      }
      long long v38 = (const float *)(a2 + 4 * v7 + 1124);
      long long v39 = (_DWORD *)((char *)this + 32);
      do
      {
        if (*((unsigned char *)v39 - 24) && *((unsigned char *)v39 - 23) && *v39 == *(_DWORD *)v38)
        {
          *((_WORD *)v39 - 12) = 0;
          _DWORD *v39 = 0;
          --*((_DWORD *)this + 750);
        }
        v39 += 44;
        --v25;
      }
      while (v25);
      *(v27 - 15) = 1;
      float32x2_t v40 = vld1_dup_f32(v38);
      *(float32x2_t *)(v27 + 4) = v40;
      if ((v26 & 0x80000000) == 0) {
        goto LABEL_59;
      }
LABEL_32:
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = *(_DWORD *)(v23 + 844);
        *(_DWORD *)buf = 136315906;
        long long v61 = "dec_ref_pic_marking";
        __int16 v62 = 1024;
        int v63 = v24;
        __int16 v64 = 1024;
        int v65 = v22;
        __int16 v66 = 1024;
        int v67 = v28;
        long long v15 = v9;
        long long v16 = "AppleAVD: %s MMC 3: Cannot find picNumX %d CurrPicNum %d difference_of_pic_nums_minus1 %d";
LABEL_34:
        uint32_t v21 = 30;
LABEL_35:
        _os_log_impl(&dword_223977000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, v21);
      }
LABEL_59:
      ++v7;
    }
    while (v7 != 35);
LABEL_69:
    uint64_t v41 = a2 + v7;
    int v42 = *(unsigned __int8 *)(v41 + 809);
    if (*(unsigned char *)(v41 + 809) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      long long v61 = "dec_ref_pic_marking";
      __int16 v62 = 1024;
      int v63 = v7;
      __int16 v64 = 1024;
      int v65 = v42;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s Error: 0 is not the last operation. memory_management_control_operation[%d] = %d", buf, 0x18u);
    }
    if (v8) {
      goto LABEL_76;
    }
  }
  else if (!AVC_RLM::slidingWindowProcess(this, *a3))
  {
    BOOL v57 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v57) {
      return result;
    }
    *(_DWORD *)buf = 136315138;
    long long v61 = "dec_ref_pic_marking";
    long long v58 = &_os_log_internal;
    goto LABEL_96;
  }
  if (*((_DWORD *)this + 750) < 0x10u) {
    goto LABEL_83;
  }
LABEL_76:
  RefFrameByPicNumInint DPB = AVC_RLM::findRefFrameByPicNumInDPB(this, *((_DWORD *)a3 + 4));
  if (RefFrameByPicNumInDPB != -1)
  {
    *((unsigned char *)this + 176 * RefFrameByPicNumInDPB + 8) = 0;
    --*((_DWORD *)this + 750);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      long long v44 = &_os_log_internal;
      long long v45 = "AppleAVD: RefPicture pool full, found duplicate ref picture slot, mark duplicate ref as unused \n";
LABEL_82:
      _os_log_impl(&dword_223977000, v44, OS_LOG_TYPE_DEFAULT, v45, buf, 2u);
      goto LABEL_83;
    }
    goto LABEL_83;
  }
  BOOL v46 = AVC_RLM::slidingWindowProcess(this, *a3);
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (!v46)
  {
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136315138;
    long long v61 = "dec_ref_pic_marking";
    long long v58 = &_os_log_internal;
LABEL_96:
    _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s: sliding window process failed!\n", buf, 0xCu);
    return 0;
  }
  if (result)
  {
    *(_WORD *)buf = 0;
    long long v44 = &_os_log_internal;
    long long v45 = "AppleAVD: RefPicture pool full, mark oldest ref picture as unused \n";
    goto LABEL_82;
  }
LABEL_83:
  if (*((_DWORD *)this + 1311) == 5)
  {
    *((_DWORD *)this + 1309) = 0;
    *((_DWORD *)this + 1310) = *((_DWORD *)a3 + 3);
    *((void *)a3 + 1) = 0;
    *((_DWORD *)this + 1313) = 0;
    AVC_RLM::truncateDpb(this, 1u);
  }
  else
  {
    AVC_RLM::truncateDpb(this, *((_DWORD *)this + 752));
    *((_DWORD *)this + 1313) = *(_DWORD *)(a2 + 12);
  }
  unsigned int v6 = *((_DWORD *)this + 751);
LABEL_87:
  if (v6 <= 0x10)
  {
    unint64_t v48 = (char *)this + 176 * v6;
    long long v49 = *(_OWORD *)a3;
    long long v50 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(v48 + 40) = *((_OWORD *)a3 + 2);
    *(_OWORD *)(v48 + 24) = v50;
    *(_OWORD *)(v48 + 8) = v49;
    long long v51 = *((_OWORD *)a3 + 3);
    long long v52 = *((_OWORD *)a3 + 4);
    long long v53 = *((_OWORD *)a3 + 5);
    *(_OWORD *)(v48 + 104) = *((_OWORD *)a3 + 6);
    *(_OWORD *)(v48 + 88) = v53;
    *(_OWORD *)(v48 + 72) = v52;
    *(_OWORD *)(v48 + 56) = v51;
    long long v54 = *((_OWORD *)a3 + 7);
    long long v55 = *((_OWORD *)a3 + 8);
    long long v56 = *((_OWORD *)a3 + 9);
    *(_OWORD *)(v48 + 168) = *((_OWORD *)a3 + 10);
    *(_OWORD *)(v48 + 152) = v56;
    *(_OWORD *)(v48 + 136) = v55;
    *(_OWORD *)(v48 + 120) = v54;
    ++*((_DWORD *)this + 751);
    if (*a3) {
      ++*((_DWORD *)this + 750);
    }
  }
  return 1;
}

_DWORD *AVC_RLM::invalidateDpb(_DWORD *this)
{
  this[750] = 0;
  uint64_t v1 = this[751];
  if (v1)
  {
    unsigned int v2 = this + 8;
    do
    {
      *((_WORD *)v2 - 12) = 0;
      _DWORD *v2 = 0;
      v2 += 44;
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t AVC_RLM::getOutputFrame(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 10896)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = (_OWORD *)(a1 + 176 * (*(_DWORD *)(a1 + 10900) & 0x1F));
  long long v4 = v3[329];
  long long v5 = v3[331];
  *(_OWORD *)(a2 + 16) = v3[330];
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v4;
  long long v6 = v3[332];
  long long v7 = v3[333];
  long long v8 = v3[335];
  *(_OWORD *)(a2 + 80) = v3[334];
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 64) = v7;
  long long v9 = v3[336];
  long long v10 = v3[337];
  long long v11 = v3[339];
  *(_OWORD *)(a2 + 144) = v3[338];
  *(_OWORD *)(a2 + 160) = v11;
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v10;
  if (*(void *)(a2 + 48))
  {
    uint64_t v12 = *(void *)(a1 + 10928);
    if (v12) {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v12 + 40))(v12, *(unsigned int *)(a2 + 60), 1);
    }
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 10900) = (*(_DWORD *)(a1 + 10900) + 1) & 0x1F;
  --*(_DWORD *)(a1 + 10896);
  return result;
}

double AVC_RLM::removeUnusedRefFrames(AVC_RLM *this)
{
  uint64_t v1 = *((unsigned int *)this + 751);
  if (v1)
  {
    uint64_t v2 = 0;
    for (unsigned int i = (char *)this + 12; *(i - 4) || !*i; i += 176)
    {
      if (v1 == ++v2) {
        return result;
      }
    }
    return AVC_RLM::removeReferenceFrame(this, v2);
  }
  return result;
}

uint64_t AVC_RLM::findSmallestPOCInRefList(AVC_RLM *this)
{
  uint64_t v1 = *((unsigned int *)this + 751);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = 0;
  uint64_t v3 = (int *)((char *)this + 20);
  uint64_t result = 0xFFFFFFFFLL;
  int v5 = 0x7FFFFFFF;
  do
  {
    if (!*((unsigned char *)v3 - 8))
    {
      if (*v3 >= v5) {
        uint64_t result = result;
      }
      else {
        uint64_t result = v2;
      }
      if (*v3 < v5) {
        int v5 = *v3;
      }
    }
    v3 += 44;
    ++v2;
  }
  while (v1 != v2);
  return result;
}

double AVC_RLM::removeReferenceFrame(AVC_RLM *this, unsigned int a2)
{
  unint64_t v4 = a2;
  if (*((unsigned char *)this + 176 * a2 + 8)) {
    --*((_DWORD *)this + 750);
  }
  if (!*((_DWORD *)this + 44 * a2 + 9))
  {
    uint64_t v5 = *((void *)this + 1366);
    if (v5) {
      (*(void (**)(uint64_t, void, void))(*(void *)v5 + 40))(v5, *((unsigned int *)this + 44 * a2 + 16), 0);
    }
  }
  LODWORD(v6) = *((_DWORD *)this + 751) - 1;
  if (v6 > a2)
  {
    long long v7 = (_OWORD *)((char *)this + 176 * v4 + 184);
    do
    {
      ++v4;
      long long v8 = v7[5];
      *(v7 - 7) = v7[4];
      *(v7 - 6) = v8;
      long long v9 = v7[10];
      long long v10 = v7[8];
      *(v7 - 2) = v7[9];
      *(v7 - 1) = v9;
      long long v11 = v7[7];
      *(v7 - 5) = v7[6];
      *(v7 - 4) = v11;
      *(v7 - 3) = v10;
      long long v12 = v7[1];
      *(v7 - 11) = *v7;
      *(v7 - 10) = v12;
      long long v13 = v7[3];
      *(v7 - 9) = v7[2];
      *(v7 - 8) = v13;
      unint64_t v6 = (*((_DWORD *)this + 751) - 1);
      v7 += 11;
    }
    while (v4 < v6);
  }
  long long v14 = (char *)this + 176 * v6;
  double result = 0.0;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 8) = 0u;
  --*((_DWORD *)this + 751);
  return result;
}

double AVC_RLM::removeCurrentFrameFromDPB(AVC_RLM *this)
{
  unsigned int v1 = *((_DWORD *)this + 751);
  if (v1 <= 0x10)
  {
    uint64_t v2 = (char *)this + 176 * v1 - 176;
    int v4 = v2[8];
    uint64_t v3 = v2 + 8;
    if (v4) {
      --*((_DWORD *)this + 750);
    }
    double result = 0.0;
    v3[9] = 0u;
    v3[10] = 0u;
    v3[7] = 0u;
    v3[8] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    v3[3] = 0u;
    v3[4] = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    _OWORD *v3 = 0u;
    --*((_DWORD *)this + 751);
  }
  return result;
}

uint64_t AVC_RLM::getDPB(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int *)(a1 + 3004);
  if (result)
  {
    uint64_t v4 = a1 + 8;
    uint64_t v5 = result;
    do
    {
      *a2++ = v4;
      v4 += 176;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t AVC_RLM::getDPBRef(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 3004);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = (unsigned char *)(a1 + 8);
    do
    {
      if (*v4) {
        *(void *)(a2 + 8 * v3++) = v4;
      }
      v4 += 176;
      --v2;
    }
    while (v2);
  }
  return *(unsigned int *)(a1 + 3000);
}

uint64_t AVC_RLM::createDPBIndex(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  v10[3] = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  uint64_t v3 = *(unsigned int *)(a1 + 3004);
  if (v3)
  {
    uint64_t v4 = (unsigned int *)(a1 + 40);
    do
    {
      unsigned int v5 = *v4;
      v4 += 44;
      *((unsigned char *)v10 + v5) = 1;
      --v3;
    }
    while (v3);
  }
  unsigned int v6 = *a3;
  int v7 = 24;
  while (1)
  {
    unsigned int v8 = v6 % 0x18;
    unsigned int v6 = v6 % 0x18 + 1;
    if (!*((unsigned char *)v10 + v8)) {
      break;
    }
    if (!--v7)
    {
      *a3 = v6;
      return 0xFFFFFFFFLL;
    }
  }
  *a3 = v6;
  if (a2)
  {
    uint64_t result = 0;
    *(_DWORD *)(a2 + 32) = v8;
    return result;
  }
  return 0xFFFFFFFFLL;
}

void AppleAVDCommandBuilder::freeRVRAMemory(AppleAVDCommandBuilder *this)
{
  uint64_t v2 = (void *)*((void *)this + 740);
  if (v2)
  {
    free(v2);
    *((void *)this + 740) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 751);
  if (v3)
  {
    free(v3);
    *((void *)this + 751) = 0;
    *((void *)this + 752) = 0;
  }
  uint64_t v4 = (char *)this + 5936;
  unsigned int v5 = (void *)*((void *)this + 748);
  if (v5)
  {
    free(v5);
    *((void *)this + 748) = 0;
    *((void *)this + 749) = 0;
  }
  unsigned int v6 = (void *)*((void *)this + 745);
  if (v6)
  {
    int v7 = (void *)((char *)this + 5960);
    free(v6);
    *int v7 = 0;
    v7[1] = 0;
  }
  if (*(void *)v4)
  {
    free(*(void **)v4);
    *(void *)uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
  }
}

uint64_t AppleAVDCommandBuilder::updateDecryptionParams(AppleAVDCommandBuilder *this, char a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)result + 96))(result, 35, *((void *)this + 780));
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 96))(*((void *)this + 1), 37, *((void *)this + 780) + 216);
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 96))(*((void *)this + 1), 39, *((void *)this + 780) + 244);
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 96))(*((void *)this + 1), 43, *((void *)this + 780) + 248);
    if (*((_DWORD *)this + 1404) < 0x1A8u)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 136315138;
        long long v13 = "updateDecryptionParams";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): set KEY(H13)\n", (uint8_t *)&v12, 0xCu);
      }
      uint64_t v10 = *((void *)this + 1);
    }
    else
    {
      if (a2)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = 136315138;
          long long v13 = "updateDecryptionParams";
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): set LK/KEYB\n", (uint8_t *)&v12, 0xCu);
        }
        uint64_t v8 = *((void *)this + 1);
        uint64_t v9 = *((void *)this + 780) + 112;
        goto LABEL_15;
      }
      uint64_t v5 = *((void *)this + 780);
      int v6 = *(_DWORD *)(v5 + 60);
      BOOL v7 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      if (v6 == 9)
      {
        if (v7)
        {
          int v12 = 136315138;
          long long v13 = "updateDecryptionParams";
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): key_func=9, set LK/KEYB\n", (uint8_t *)&v12, 0xCu);
          uint64_t v5 = *((void *)this + 780);
        }
        uint64_t v8 = *((void *)this + 1);
        uint64_t v9 = v5 + 112;
LABEL_15:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 96))(v8, 44, v9);
        long long v11 = *(uint64_t (**)(void))(**((void **)this + 1) + 96);
        return v11();
      }
      if (v7)
      {
        int v12 = 136315138;
        long long v13 = "updateDecryptionParams";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): set KEY(H13)\n", (uint8_t *)&v12, 0xCu);
      }
      uint64_t v10 = *((void *)this + 1);
    }
    long long v11 = *(uint64_t (**)(void))(*(void *)v10 + 96);
    return v11();
  }
  return result;
}

uint64_t AppleAVDCommandBuilder::allocRVRAMemory(AppleAVDCommandBuilder *this, unsigned int a2, unsigned int a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (!a2 || !a3)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_30;
    }
    int v35 = 136315138;
    unint64_t v36 = "allocRVRAMemory";
    int v20 = &_os_log_internal;
    uint32_t v21 = "AppleAVD: Invalid resolution in %s";
    uint32_t v22 = 12;
LABEL_29:
    _os_log_impl(&dword_223977000, v20, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)&v35, v22);
    goto LABEL_30;
  }
  signed int v3 = (((a3 >> 1) + 7) & 0xFFFFFFF8) + 8;
  if (v3 < 0)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_30;
    }
    int v35 = 136315394;
    unint64_t v36 = "allocRVRAMemory";
    __int16 v37 = 1024;
    int v38 = 1657;
    int v20 = &_os_log_internal;
    uint32_t v21 = "AppleAVD: rvrascalerbuffsize alloc overflow in %s %d";
    goto LABEL_28;
  }
  if (((a3 + 7) & 0xFFFFFFF8) + 8 <= 2 * v3) {
    unsigned int v5 = 2 * v3;
  }
  else {
    unsigned int v5 = ((a3 + 7) & 0xFFFFFFF8) + 8;
  }
  unint64_t v6 = ((((a2 + 15) & 0xFFFFFFF0) + 79) & 0xFFFFFFC0) * (unint64_t)v5;
  if ((v6 & 0xFFFFFFFF00000000) != 0 || (v6 & 0x80000000) != 0)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_30;
    }
    int v35 = 136315394;
    unint64_t v36 = "allocRVRAMemory";
    __int16 v37 = 1024;
    int v38 = 1667;
    int v20 = &_os_log_internal;
    uint32_t v21 = "AppleAVD: rvrascalerbuffsize alloc overflow in %s %d";
LABEL_28:
    uint32_t v22 = 18;
    goto LABEL_29;
  }
  size_t v8 = (2 * v6);
  *((_DWORD *)this + 1478) = v8;
  uint64_t v9 = malloc_type_malloc(v8, 0x171FCB41uLL);
  *((void *)this + 740) = v9;
  if (v9)
  {
    *((void *)this + 743) = 0;
    *((void *)this + 742) = 0;
    uint64_t v10 = a2 + 16;
    *((void *)this + 746) = 0;
    *((void *)this + 745) = 0;
    int v11 = 2 * v10;
    *((void *)this + 749) = 0;
    *((void *)this + 748) = 0;
    *((void *)this + 752) = 0;
    *((void *)this + 751) = 0;
    *((_DWORD *)this + 1488) = 2 * v10;
    if (v10 != v10 << 31 >> 31
      || (v10 & 0x180000000) != 0
      || ((BOOL v12 = __CFADD__(v11, 16), v13 = (v11 + 16), !v12) ? (v14 = 0) : (v14 = 1),
          (uint64_t v15 = v13 + 48, v16 = (v13 + 48) << 31 >> 31, *((_DWORD *)this + 1488) = v15, (v14 & 1) != 0)
       || v16 != v15
       || v16 < 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v35 = 136315394;
        unint64_t v36 = "allocRVRAMemory";
        __int16 v37 = 1024;
        int v38 = 1697;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: rvrascalerbuffsize alloc overflow in %s %d", (uint8_t *)&v35, 0x12u);
      }
    }
    else
    {
      unsigned int v17 = (void **)((char *)this + 5936);
      uint64_t v18 = malloc_type_malloc(v16 & 0xFFFFFFFE, 0xF6EC2790uLL);
      *((void *)this + 742) = v18;
      if (v18)
      {
        *((void *)this + 743) = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF0;
        size_t v19 = a2 + 32;
        *((_DWORD *)this + 1494) = v19;
        if (v10 < 0xFFFFFFF0)
        {
          int v24 = (void **)((char *)this + 5960);
          uint64_t v25 = malloc_type_malloc(v19, 0x8AABEF6FuLL);
          *((void *)this + 745) = v25;
          if (v25)
          {
            unsigned int v26 = a2 + 16;
            *((void *)this + 746) = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF0;
            unsigned int v27 = (a2 + 16) & 0xFFFFFFFC;
            size_t v28 = v27 + 16;
            *((_DWORD *)this + 1500) = v28;
            if (v27 < 0xFFFFFFF0)
            {
              uint64_t v29 = (void **)((char *)this + 5984);
              uint64_t v30 = malloc_type_malloc(v28, 0x56748A82uLL);
              *((void *)this + 748) = v30;
              if (v30)
              {
                *((void *)this + 749) = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF0;
                unsigned int v31 = 4 * v26;
                *((_DWORD *)this + 1506) = 4 * v26;
                if (v26 >> 30 || (size_t v32 = v31 + 16, *((_DWORD *)this + 1506) = v32, v31 >= 0xFFFFFFF0))
                {
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    int v35 = 136315394;
                    unint64_t v36 = "allocRVRAMemory";
                    __int16 v37 = 1024;
                    int v38 = 1754;
                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: rvrascalerbuffsize alloc overflow in %s %d", (uint8_t *)&v35, 0x12u);
                  }
                }
                else
                {
                  uint64_t v33 = malloc_type_malloc(v32, 0x7799E9E7uLL);
                  *((void *)this + 751) = v33;
                  if (v33)
                  {
                    int v34 = v33;
                    uint64_t result = 0;
                    *((void *)this + 752) = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF0;
                    return result;
                  }
                }
                free(*v29);
                *uint64_t v29 = 0;
                *((void *)this + 749) = 0;
              }
            }
            else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v35 = 136315394;
              unint64_t v36 = "allocRVRAMemory";
              __int16 v37 = 1024;
              int v38 = 1735;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: rvrascalerbuffsize alloc overflow in %s %d", (uint8_t *)&v35, 0x12u);
            }
            free(*v24);
            *int v24 = 0;
            *((void *)this + 746) = 0;
          }
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v35 = 136315394;
          unint64_t v36 = "allocRVRAMemory";
          __int16 v37 = 1024;
          int v38 = 1716;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: rvrascalerbuffsize alloc overflow in %s %d", (uint8_t *)&v35, 0x12u);
        }
        free(*v17);
        *unsigned int v17 = 0;
        *((void *)this + 743) = 0;
      }
    }
    free(*((void **)this + 740));
    *((void *)this + 740) = 0;
  }
LABEL_30:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v35 = 136315138;
    unint64_t v36 = "allocRVRAMemory";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed \n", (uint8_t *)&v35, 0xCu);
  }
  return 304;
}

uint64_t AppleAVDCommandBuilder::retrieveSampleBufferForSIODecrypt(void **this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (opaqueCMSampleBuffer *)*((void *)*this + 189);
  if (!v2)
  {
    uint64_t v6 = 3758097084;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return v6;
    }
    int v11 = 136315138;
    BOOL v12 = "retrieveSampleBufferForSIODecrypt";
    BOOL v7 = &_os_log_internal;
    size_t v8 = "AppleAVD: ERROR: %s(): NULL sampleBuffer from the context!\n";
LABEL_10:
    uint32_t v9 = 12;
    goto LABEL_11;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(v2);
  if (!DataBuffer)
  {
    uint64_t v6 = 3758097084;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return v6;
    }
    int v11 = 136315138;
    BOOL v12 = "retrieveSampleBufferForSIODecrypt";
    BOOL v7 = &_os_log_internal;
    size_t v8 = "AppleAVD: ERROR: %s(): Failed to retrieve data buffer from sampleBuffer\n";
    goto LABEL_10;
  }
  uint64_t v4 = DataBuffer;
  size_t DataLength = CMBlockBufferGetDataLength(DataBuffer);
  uint64_t v6 = CMBlockBufferCopyDataBytes(v4, 0, DataLength, this[707]);
  if (v6 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315394;
    BOOL v12 = "retrieveSampleBufferForSIODecrypt";
    __int16 v13 = 1024;
    int v14 = v6;
    BOOL v7 = &_os_log_internal;
    size_t v8 = "AppleAVD: ERROR: %s(): FigBlockBufferCopyDataBytes failed with %d\n";
    uint32_t v9 = 18;
LABEL_11:
    _os_log_impl(&dword_223977000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v11, v9);
  }
  return v6;
}

uint64_t AppleAVDCommandBuilder::waitNumInFlight(AppleAVDCommandBuilder *this, unsigned int a2)
{
  return RingBuffer::waitForRingBuffersOutstanding(*(RingBuffer **)(*(void *)this + 888), a2, 10000);
}

void AppleAVDCommandBuilder::setReleaseCurrentBuffersToResponseBuffer(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 3440);
  if (v3 != -1) {
    AppleAVDCommandBuilder::setReleaseBufferIndexToResponseBuffer(a1, a2, v3, 1u);
  }
  int v4 = *(_DWORD *)(a2 + 3444);
  if (v4 != -1)
  {
    AppleAVDCommandBuilder::setReleaseBufferIndexToResponseBuffer(a1, a2, v4, 0);
  }
}

uint64_t AppleAVDCommandBuilder::populateOnDemandDVAInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned int v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 168))(*(void *)(a1 + 8), a3);
  *(_DWORD *)(a2 + 384) = v6;
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v6;
    uint32_t v9 = (void *)(a2 + 8);
    uint64_t v10 = &_os_log_internal;
    do
    {
      uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 160))(*(void *)(a1 + 8), v7, a3);
      if (v11 == -1)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v23 = "populateOnDemandDVAInfo";
          __int16 v24 = 1024;
          int v25 = v7;
          _os_log_impl(&dword_223977000, v10, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Invalid refBufIndex! index: %d", buf, 0x12u);
        }
      }
      else
      {
        int v12 = v11;
        uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v11);
        if (!v13)
        {
          uint64_t v17 = 3758097084;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            uint64_t v23 = "populateOnDemandDVAInfo";
            __int16 v24 = 1024;
            int v25 = v12;
            __int16 v26 = 1024;
            int v27 = v7;
            uint64_t v18 = &_os_log_internal;
            size_t v19 = "AppleAVD: %s(): ERROR! Couldn't get memInfo (NULL)! refBufIndex: %d - i: %d";
            uint32_t v20 = 24;
            goto LABEL_18;
          }
          return v17;
        }
        *((_DWORD *)v9 - 2) = *(_DWORD *)(v13 + 152);
        *uint32_t v9 = *(void *)v13;
      }
      ++v7;
      v9 += 2;
    }
    while (v8 != v7);
  }
  uint64_t DecFrameRefBufIdx = CAVDDecoder::getDecFrameRefBufIdx(*(CAVDDecoder **)(a1 + 8));
  if (DecFrameRefBufIdx == -1)
  {
    uint64_t v17 = 3758097084;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v23 = "populateOnDemandDVAInfo";
      uint64_t v18 = &_os_log_internal;
      size_t v19 = "AppleAVD: %s(): Invalid currBufIndex!";
      uint32_t v20 = 12;
      goto LABEL_18;
    }
  }
  else
  {
    int v15 = DecFrameRefBufIdx;
    uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), DecFrameRefBufIdx);
    if (v16)
    {
      uint64_t v17 = 0;
      *(_DWORD *)(a2 + 392) = *(_DWORD *)(v16 + 152);
      *(void *)(a2 + 400) = *(void *)v16;
    }
    else
    {
      uint64_t v17 = 3758097084;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v23 = "populateOnDemandDVAInfo";
        __int16 v24 = 1024;
        int v25 = v15;
        uint64_t v18 = &_os_log_internal;
        size_t v19 = "AppleAVD: %s(): ERROR! Couldn't get memInfo (NULL)! currBufIndex: %d";
        uint32_t v20 = 18;
LABEL_18:
        _os_log_impl(&dword_223977000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, v20);
      }
    }
  }
  return v17;
}

void AppleAVDCommandBuilder::setReleaseBufferIndexToResponseBuffer(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + a4;
  unsigned int v7 = *(unsigned __int8 *)(v4 + 2);
  unsigned int v5 = (unsigned char *)(v4 + 2);
  uint64_t v6 = v7;
  if (v7 > 0x1F)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      uint32_t v9 = "setReleaseBufferIndexToResponseBuffer";
      __int16 v10 = 1024;
      int v11 = v6;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR! Exeeded buffers to release (%d)", (uint8_t *)&v8, 0x12u);
    }
  }
  else
  {
    *(unsigned char *)(a2 + 32 * a4 + v6 + 4) = a3;
    *unsigned int v5 = v6 + 1;
  }
}

uint64_t AppleAVDCommandBuilder::getWidthAndHeight(uint64_t this, unsigned int *a2, unsigned int *a3)
{
  *a2 = *(_DWORD *)(this + 5624);
  *a3 = *(_DWORD *)(this + 5628);
  return this;
}

uint64_t AppleAVDCommandBuilder::getPixelFormat(uint64_t this, unsigned int *a2)
{
  *a2 = *(_DWORD *)(this + 5640);
  return this;
}

uint64_t AppleAVDCommandBuilder::getLumaDepthMinus8(uint64_t this, unsigned int *a2)
{
  *a2 = *(_DWORD *)(this + 5644);
  return this;
}

uint64_t AppleAVDCommandBuilder::getChromaFormat(uint64_t this, unsigned int *a2)
{
  *a2 = *(_DWORD *)(this + 5648);
  return this;
}

uint64_t AppleAVDCommandBuilder::checkRVRAScalingRatio(AppleAVDCommandBuilder *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2 <= a4) {
    unsigned int v9 = a4 / a2;
  }
  else {
    unsigned int v9 = a2 / a4;
  }
  if (a3 <= a5) {
    unsigned int v10 = a5 / a3;
  }
  else {
    unsigned int v10 = a3 / a5;
  }
  if (v9 <= 5 && v10 < 6) {
    return 0;
  }
  uint64_t v11 = 3758097084;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109888;
    v13[1] = a2;
    __int16 v14 = 1024;
    unsigned int v15 = a3;
    __int16 v16 = 1024;
    unsigned int v17 = a4;
    __int16 v18 = 1024;
    unsigned int v19 = a5;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: Rejecting RVRA scaling ratios beyond 5x! inWidth:%d inHeight:%d outWidth:%d outHeight:%d", (uint8_t *)v13, 0x1Au);
  }
  return v11;
}

uint64_t AppleAVDCommandBuilder::scaleOutputFrame(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, uint64_t a9, unsigned int a10, int a11, int a12, uint64_t a13, _OWORD *a14, uint64_t a15, uint64_t a16)
{
  kern_return_t v29;
  kern_return_t v30;
  kern_return_t v31;
  kern_return_t v32;
  uint64_t HeightInCompressedTilesOfPlane;
  uint64_t CompressedTileHeightOfPlane;
  unint64_t v36;
  size_t v37;
  void *BaseAddressOfPlane;
  void *v39;
  unsigned int SizeOfPlane;
  unsigned int v41;
  void *v42;
  kern_return_t v43;
  __IOSurface *v44;
  __IOSurface *v45;
  AppleAVDCommandBuilder *v46;
  kern_return_t v47;
  IOSurfaceID v48;
  __IOSurface *v49;
  __IOSurface *v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  uint64_t v59;
  unsigned int v60;
  void *v61;
  unsigned int v62;
  void *v63;
  unsigned int v64;
  _OWORD v66[6];
  _OWORD v67[3];
  uint64_t v68;
  _OWORD v69[6];
  uint8_t v70[4];
  kern_return_t v71;
  uint8_t v72[8];
  __int16 v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD v77[2];
  void *v78;
  void *v79;
  uint64_t v80;
  unsigned char buf[20];
  __int16 v82;
  unsigned int v83;
  __int16 v84;
  size_t WidthOfPlane;
  __int16 v86;
  uint64_t CompressedTileWidthOfPlane;
  __int16 v88;
  size_t HeightOfPlane;
  __int16 v90;
  uint64_t v91;
  _DWORD v92[2];
  uint64_t v93;

  long long v93 = *MEMORY[0x263EF8340];
  uint64_t v21 = 3758097084;
  IOSurfaceID v22 = *(_DWORD *)(a2 + 152);
  IOSurfaceRef v23 = IOSurfaceLookup(*(_DWORD *)(a3 + 152));
  if (!v23)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: pIOSurfaceDst lookup failed!\n", buf, 2u);
    }
    goto LABEL_17;
  }
  __int16 v24 = v23;
  if (*(_DWORD *)(a1 + 5616) >= 0x14u)
  {
    uint64_t WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
    if (IOSurfaceGetCompressedTileWidthOfPlane() * WidthInCompressedTilesOfPlane >= (unint64_t)a6)
    {
      HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
      CompressedTileHeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
      if (a5 >= 0x40
        && a4 >= 0x40
        && a7 >= 0x40
        && a6 >= 0x40
        && CompressedTileHeightOfPlane * HeightInCompressedTilesOfPlane >= (unint64_t)a7)
      {
        __int16 v62 = 0;
        int v63 = 0;
        long long v61 = 0;
        __int16 v64 = 0;
        goto LABEL_35;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110912;
      *(_DWORD *)&uint8_t buf[4] = a4;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a5;
      *(_WORD *)&unsigned char buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = a6;
      long long v82 = 1024;
      long long v83 = a7;
      uint64_t v84 = 2048;
      WidthOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
      unint64_t v86 = 2048;
      CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
      long long v88 = 2048;
      HeightOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
      long long v90 = 2048;
      long long v91 = IOSurfaceGetCompressedTileHeightOfPlane();
      __int16 v26 = &_os_log_internal;
      int v27 = "AppleAVD: Unsupported scaling dimensions! inWidth:%d inHeight:%d outWidth:%d outHeight:%d IOSurfaceGetWidthI"
            "nCompressedTilesOfPlane:%zu IOSurfaceGetCompressedTileWidthOfPlane:%zu IOSurfaceGetHeightInCompressedTilesOf"
            "Plane:%zu IOSurfaceGetCompressedTileHeightOfPlane:%zu\n";
LABEL_11:
      _os_log_impl(&dword_223977000, v26, OS_LOG_TYPE_DEFAULT, v27, buf, 0x42u);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  long long v78 = 0;
  int v75 = 0;
  *(void *)long long v72 = 0;
  long long v80 = 0;
  IOSurfaceGetExtendedPixelsOfPlane();
  if (IOSurfaceGetWidthOfPlane(v24, 0) < ((a6 + 15) & 0xFFFFFFF0) + 16
    || (2 * (unint64_t)((((a7 >> 1) + 7) & 0xFFFFFFF8) + 8) <= ((a7 + 7) & 0xFFFFFFF8) + 8
      ? (unint64_t v36 = ((a7 + 7) & 0xFFFFFFF8) + 8)
      : (unint64_t v36 = 2 * ((((a7 >> 1) + 7) & 0xFFFFFFF8) + 8)),
        (__int16 v37 = IOSurfaceGetHeightOfPlane(v24, 0), a5 < 0x40) || a4 < 0x40 || a7 < 0x40 || a6 < 0x40 || v36 > v80 + v37))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110912;
      *(_DWORD *)&uint8_t buf[4] = a4;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a5;
      *(_WORD *)&unsigned char buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = a6;
      long long v82 = 1024;
      long long v83 = a7;
      uint64_t v84 = 2048;
      WidthOfPlane = IOSurfaceGetWidthOfPlane(v24, 0);
      unint64_t v86 = 2048;
      CompressedTileWidthOfPlane = v75;
      long long v88 = 2048;
      HeightOfPlane = IOSurfaceGetHeightOfPlane(v24, 0);
      long long v90 = 2048;
      long long v91 = v80;
      __int16 v26 = &_os_log_internal;
      int v27 = "AppleAVD: Unsupported scaling dimensions! inWidth:%d inHeight:%d outWidth:%d outHeight:%d IOSurfaceGetWidthO"
            "fPlane:%zu extendedRight:%zu IOSurfaceGetHeightOfPlane:%zu extendedBottom:%zu\n";
      goto LABEL_11;
    }
LABEL_12:
    char v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unsigned int v31 = 0;
LABEL_13:
    size_t v32 = -536870212;
    goto LABEL_14;
  }
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(v24, 0);
  uint64_t v39 = IOSurfaceGetBaseAddressOfPlane(v24, 1uLL);
  long long v60 = a5;
  unint64_t SizeOfPlane = IOSurfaceGetSizeOfPlane();
  uint64_t v41 = IOSurfaceGetSizeOfPlane();
  __int16 v64 = v41 + SizeOfPlane;
  int v63 = BaseAddressOfPlane;
  int v42 = BaseAddressOfPlane;
  uint64_t v21 = 3758097084;
  memset(v42, 128, SizeOfPlane);
  long long v61 = v39;
  memset(v39, 128, v41);
  __int16 v62 = SizeOfPlane;
  v92[0] = SizeOfPlane;
  v92[1] = v41;
  a5 = v60;
LABEL_35:
  long long v43 = IOSurfaceLock(v24, 0, 0);
  if (v43)
  {
    unsigned int v31 = v43;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v31;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: pIOSurfaceDst lockSurface failed with error:%d\n", buf, 8u);
    }
    char v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    goto LABEL_13;
  }
  if (a8 == 3)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    long long v78 = 0;
    long long v79 = 0;
    int v75 = 0;
    long long v76 = 0;
    long long v44 = IOSurfaceLookup(v22);
    if (!v44)
    {
      uint64_t v30 = 0;
      unsigned int v31 = 0;
      size_t v32 = -536870212;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long v72 = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: pIOSurfaceSrc lookup failed!\n", v72, 2u);
        uint64_t v30 = 0;
        unsigned int v31 = 0;
      }
      goto LABEL_54;
    }
    long long v45 = v44;
    BOOL v46 = (AppleAVDCommandBuilder *)IOSurfaceLock(v44, 1u, 0);
    if (v46)
    {
      unsigned int v31 = (int)v46;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long v72 = 67109120;
        *(_DWORD *)&v72[4] = v31;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: pIOSurfaceSrc lockSurface failed with error:%d\n", v72, 8u);
      }
      uint64_t v30 = 0;
      size_t v32 = -536870212;
LABEL_45:
      CFRelease(v45);
LABEL_54:
      uint64_t v29 = IOSurfaceUnlock(v24, 0, 0);
      if (v29 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long v70 = 67109120;
        long long v71 = v29;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD::scaleOutputFrame unlockSurface Dest returned error %d\n", v70, 8u);
      }
      char v28 = 0;
      goto LABEL_14;
    }
    unsigned int v47 = AppleAVDCommandBuilder::checkRVRAScalingRatio(v46, a4, a5, a6, a7);
    if (v47)
    {
      unsigned int v31 = v47;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long v72 = 67109120;
        *(_DWORD *)&v72[4] = v31;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: checkRVRAScalingRatio returned error:%d\n", v72, 8u);
      }
      size_t v32 = -536870212;
    }
    else
    {
      if (*(_DWORD *)(a1 + 5616) < 0x14u)
      {
        if (v64 > a10)
        {
          unsigned int v31 = 0;
          size_t v32 = -536870212;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long v72 = 67109376;
            *(_DWORD *)&v72[4] = v64;
            unint64_t v73 = 1024;
            unint64_t v74 = a10;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: rvra temp buff size isn't big enough! yuvsize:%u rvraTempBuffSize:%u\n", v72, 0xEu);
            unsigned int v31 = 0;
          }
          goto LABEL_63;
        }
        *(void *)buf = IOSurfaceGetBaseAddressOfPlane(v45, 0);
        *(void *)&buf[8] = IOSurfaceGetBaseAddressOfPlane(v45, 1uLL);
        long long v78 = v63;
        long long v79 = v61;
        LODWORD(v80) = IOSurfaceGetBytesPerRowOfPlane(v45, 0);
        HIDWORD(v80) = IOSurfaceGetBytesPerRowOfPlane(v45, 1uLL);
        v77[0] = IOSurfaceGetBytesPerRowOfPlane(v24, 0);
        v77[1] = IOSurfaceGetBytesPerRowOfPlane(v24, 1uLL);
        int v75 = a9;
        long long v76 = a9 + v62;
        *(_DWORD *)long long v72 = IOSurfaceGetSizeOfPlane();
        *(_DWORD *)&v72[4] = IOSurfaceGetSizeOfPlane();
        long long v55 = *(_OWORD *)(a13 + 16);
        v67[0] = *(_OWORD *)a13;
        v67[1] = v55;
        v67[2] = *(_OWORD *)(a13 + 32);
        uint64_t v68 = *(void *)(a13 + 48);
        long long v56 = a14[3];
        v66[2] = a14[2];
        v66[3] = v56;
        BOOL v57 = a14[5];
        v66[4] = a14[4];
        v66[5] = v57;
        long long v58 = a14[1];
        v66[0] = *a14;
        v66[1] = v58;
        unsigned int v31 = RVRAScaler((uint64_t)&v78, (int)v77, a6, a7, (uint64_t)buf, (int)&v80, a4, a5, a11, a12, (uint64_t)&v75, (uint64_t)v67, v66, (uint64_t)v72, (uint64_t)v92);
        size_t v32 = 0;
      }
      else
      {
        unint64_t v48 = *(_DWORD *)(a16 + 152);
        long long v49 = IOSurfaceLookup(*(_DWORD *)(a15 + 152));
        IOSurfaceLock(v49, 0, 0);
        long long v50 = IOSurfaceLookup(v48);
        size_t v32 = IOSurfaceLock(v50, 0, 0);
        long long v51 = *(_DWORD *)(a13 + 48);
        long long v52 = a14[3];
        v69[2] = a14[2];
        v69[3] = v52;
        long long v53 = a14[5];
        v69[4] = a14[4];
        v69[5] = v53;
        long long v54 = a14[1];
        v69[0] = *a14;
        v69[1] = v54;
        LODWORD(v59) = v51;
        unsigned int v31 = BilinearScaleInterchangeBuffer((uint64_t)v24, (uint64_t)v45, a4, a5, a6, a7, a11, a12, v59, v69, v49, v50);
        IOSurfaceUnlock(v49, 0, 0);
        if (v49) {
          CFRelease(v49);
        }
        IOSurfaceUnlock(v50, 0, 0);
        if (v50) {
          CFRelease(v50);
        }
      }
      if (v31 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long v70 = 67109120;
        long long v71 = v31;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD::RVRAScaler returned error:%d \n", v70, 8u);
      }
    }
LABEL_63:
    uint64_t v30 = IOSurfaceUnlock(v45, 1u, 0);
    if (v30 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long v70 = 67109120;
      long long v71 = v30;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD::scaleOutputFrame unlockSurface Src returned error %d\n", v70, 8u);
    }
    goto LABEL_45;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD::scaleOutputFrame unsupported vra type", buf, 2u);
  }
  uint64_t v30 = IOSurfaceUnlock(v24, 0, 0);
  if (v30)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v30;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD::scaleOutputFrame unlockSurface returned error %d\n", buf, 8u);
    }
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unsigned int v31 = 0;
    size_t v32 = 0;
    char v28 = 1;
  }
  else
  {
    char v28 = 0;
    uint64_t v29 = 0;
    unsigned int v31 = 0;
    size_t v32 = 0;
  }
LABEL_14:
  CFRelease(v24);
  if ((v28 & 1) == 0 && !(v30 | v29 | v31 | v32)) {
    return 0;
  }
LABEL_17:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "scaleOutputFrame";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = -536870212;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
  return v21;
}

uint64_t AppleAVDCommandBuilder::updateDecryptMethod(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 6248) = a2;
  *(_DWORD *)(a1 + 5892) = a3;
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 34, a1 + 6248);
}

uint64_t CAHDec::getDecBufIndex(CAHDec *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t HEVC_RLM::findPictureBySlicePicOrderCntLsb(HEVC_RLM *this, int a2, int a3)
{
  uint64_t v3 = 0;
  while (!*((unsigned char *)this + v3 + 16)
       || (*(_DWORD *)((unsigned char *)this + v3 + 28) & (a3 - 1)) != a2
       || *(_DWORD *)((char *)this + v3 + 36) != 3)
  {
    v3 += 176;
    if (v3 == 2816) {
      return 0;
    }
  }
  return (uint64_t)this + v3 + 16;
}

uint64_t HEVC_RLM::findPictureByPicOrderCntVal(HEVC_RLM *this, int a2)
{
  uint64_t v2 = 0;
  while (!*((unsigned char *)this + v2 + 16)
       || *(_DWORD *)((char *)this + v2 + 28) != a2
       || *(_DWORD *)((char *)this + v2 + 36) != 3)
  {
    v2 += 176;
    if (v2 == 2816) {
      return 0;
    }
  }
  return (uint64_t)this + v2 + 16;
}

uint64_t HEVC_RLM::findShortTermReferencePictureByPicOrderCntVal(HEVC_RLM *this, int a2)
{
  uint64_t v2 = 0;
  while (!*((unsigned char *)this + v2 + 16)
       || *(_DWORD *)((char *)this + v2 + 28) != a2
       || *(_DWORD *)((char *)this + v2 + 36) != 1)
  {
    v2 += 176;
    if (v2 == 2816) {
      return 0;
    }
  }
  return (uint64_t)this + v2 + 16;
}

void HEVC_RLM::removeCurrentFrameFromDPB(HEVC_RLM *this, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2 < 0x10)
  {
    uint64_t v4 = (char *)this + 176 * a2;
    uint64_t v6 = *((void *)v4 + 8);
    unsigned int v5 = v4 + 64;
    if (v6) {
      *unsigned int v5 = 0;
    }
    *((unsigned char *)v5 - 48) = 0;
    unsigned int v7 = (char *)this + 176 * a2;
    *((_DWORD *)v7 + 7) = 0;
    *((_DWORD *)v7 + 9) = 0;
    LODWORD(v7) = *((_DWORD *)this + 708);
    int v8 = v7 - 1;
    *((_DWORD *)this + 708) = v7 - 1;
    if ((int)v7 <= 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 136315394;
        unsigned int v10 = "removeCurrentFrameFromDPB";
        __int16 v11 = 1024;
        unsigned int v12 = v8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: WARNING _numActivePictures=%d is not valid, now clamped to 0\n", (uint8_t *)&v9, 0x12u);
      }
      *((_DWORD *)this + 708) = 0;
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315650;
    unsigned int v10 = "removeCurrentFrameFromDPB";
    __int16 v11 = 1024;
    unsigned int v12 = a2;
    __int16 v13 = 1024;
    int v14 = 16;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): WARNING, index=%d is invalid, maximum allowable is %d\n", (uint8_t *)&v9, 0x18u);
  }
}

uint64_t HEVC_RLM::markAllRefPicturesasUnused(uint64_t this)
{
  for (uint64_t i = 0; i != 2816; i += 176)
  {
    if (*(unsigned char *)(this + i + 16)) {
      *(_DWORD *)(this + i + 36) = 0;
    }
  }
  return this;
}

uint64_t HEVC_RLM::decrementPOCvalues(uint64_t this, int a2)
{
  uint64_t v2 = *(unsigned int *)(this + 2832);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (_DWORD *)(this + 28);
    do
    {
      *v3 -= a2;
      v3 += 44;
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t HEVC_RLM::getNumberOfPicturesNeededForOutput(HEVC_RLM *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  do
  {
    if (*((unsigned char *)this + v1 + 16))
    {
      if (*((unsigned char *)this + v1 + 18) == 1) {
        uint64_t v2 = (v2 + 1);
      }
      else {
        uint64_t v2 = v2;
      }
    }
    v1 += 176;
  }
  while (v1 != 2816);
  return v2;
}

uint64_t HEVC_RLM::forceReleaseDisplayBuffer(uint64_t a1, _OWORD *a2, int a3)
{
  (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 176 * a3 + 84), 1);
  if (a2)
  {
    uint64_t v6 = (_OWORD *)(a1 + 176 * a3);
    long long v7 = v6[1];
    long long v8 = v6[3];
    a2[1] = v6[2];
    a2[2] = v8;
    *a2 = v7;
    long long v9 = v6[4];
    long long v10 = v6[5];
    long long v11 = v6[7];
    a2[5] = v6[6];
    a2[6] = v11;
    a2[3] = v9;
    a2[4] = v10;
    long long v12 = v6[8];
    long long v13 = v6[9];
    long long v14 = v6[11];
    a2[9] = v6[10];
    a2[10] = v14;
    a2[7] = v12;
    a2[8] = v13;
  }
  return 1;
}

uint64_t HEVC_RLM::printDPB(HEVC_RLM *this)
{
  puts("DPB Status");
  uint64_t v2 = 0;
  uint64_t v3 = (unsigned int *)((char *)this + 36);
  do
  {
    uint64_t result = printf("\t%2d : Active = %d, POC = %d,\t[%s]\t(%p)\n", v2++, *((unsigned __int8 *)v3 - 20), *(v3 - 2), (&off_2646CEA90)[*v3], *(const void **)(v3 + 7));
    v3 += 44;
  }
  while (v2 != 16);
  return result;
}

uint64_t HEVC_RLM::getDPBEntry(HEVC_RLM *this, int a2)
{
  return (uint64_t)this + 176 * a2 + 16;
}

uint64_t CAVDDecoder::calculateClearBytes(CAVDDecoder *this, unsigned int a2, int a3, int a4, unsigned int a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 10)) {
    return *((unsigned __int16 *)this + 1252);
  }
  if (a5)
  {
    if (a6)
    {
      if (a7)
      {
        uint64_t v8 = a5;
        unsigned int v9 = -1;
        do
        {
          if (*a6++)
          {
            if (*a7 < a3 + a2 && *a7 >= a2) {
              unsigned int v9 = *a7 - (a2 + ((a4 + 7) >> 3));
            }
          }
          ++a7;
          --v8;
        }
        while (v8);
        goto LABEL_16;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 136315138;
        __int16 v16 = "calculateClearBytes";
        long long v13 = &_os_log_internal;
        long long v14 = "AppleAVD: ERROR: %s(): protectedRegionOffsets is NULL\n";
        goto LABEL_26;
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 136315138;
      __int16 v16 = "calculateClearBytes";
      long long v13 = &_os_log_internal;
      long long v14 = "AppleAVD: ERROR: %s(): protectedRegionSizes is NULL\n";
LABEL_26:
      _os_log_impl(&dword_223977000, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v15, 0xCu);
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v9 = -1;
LABEL_16:
  if (v9 == -1 && a5 == 0) {
    return 0;
  }
  else {
    return v9;
  }
}

uint64_t CAVDDecoder::setDecDartVAddr(uint64_t this, uint64_t a2)
{
  *(void *)(this + 2128) = a2;
  return this;
}

uint64_t CAVDDecoder::getDecFrameRefBufIdx(CAVDDecoder *this)
{
  return *((unsigned int *)this + 582);
}

uint64_t CAVDDecoder::getSurfaceMemInfo(CAVDDecoder *this, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2 != -1)
  {
    uint64_t v3 = *((void *)this + a2 + 132);
    if (v3) {
      return v3 + 8;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = "getSurfaceMemInfo";
    __int16 v7 = 1024;
    unsigned int v8 = a2;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR! SurfaceRefList NULL!! refBufIndex: %d", (uint8_t *)&v5, 0x12u);
  }
  return 0;
}

BOOL CAVDDecoder::isSafeToUnmap(CAVDDecoder *this, unsigned int a2)
{
  return *(_DWORD *)(*((void *)this + a2 + 132) + 216) == 0;
}

uint64_t CAVDDecoder::getDisplaySurfaceMemInfo(CAVDDecoder *this, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + a2 + 3);
  if (v2) {
    return v2 + 8;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = "getDisplaySurfaceMemInfo";
    __int16 v7 = 1024;
    unsigned int v8 = a2;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR! RenderSurfaceRefList NULL!! dispBufIndex: %d", (uint8_t *)&v5, 0x12u);
  }
  return 0;
}

void CAVDDecoder::iterateSurfaceRefCount(CAVDDecoder *this, unsigned int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + a2 + 132);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 216);
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    int v5 = "iterateSurfaceRefCount";
    __int16 v6 = 1024;
    unsigned int v7 = a2;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR! SurfaceRefList NULL!! refBufIndex: %d", (uint8_t *)&v4, 0x12u);
  }
}

void CAVDDecoder::decrementSurfaceRefCount(CAVDDecoder *this, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + a2 + 132);
  if (!v2)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v8 = 136315394;
    uint64_t v9 = "decrementSurfaceRefCount";
    __int16 v10 = 1024;
    unsigned int v11 = a2;
    int v5 = &_os_log_internal;
    __int16 v6 = "AppleAVD: %s(): ERROR! SurfaceRefList NULL!! refBufIndex: %d";
    uint32_t v7 = 18;
    goto LABEL_8;
  }
  int v3 = *(_DWORD *)(v2 + 216);
  if (v3)
  {
    *(_DWORD *)(v2 + 216) = v3 - 1;
    return;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315138;
    uint64_t v9 = "decrementSurfaceRefCount";
    int v5 = &_os_log_internal;
    __int16 v6 = "AppleAVD: %s(): ERROR refCount is already 0!!";
    uint32_t v7 = 12;
LABEL_8:
    _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v8, v7);
  }
}

uint64_t CAVDDecoder::updateWorkStruct(CAVDDecoder *this)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 262) + 248))(*((void *)this + 262), 0);
}

uint64_t CAVDDecoder::VADecodeFrameHeader(CAVDDecoder *this, unsigned __int8 *a2)
{
  return 0;
}

BOOL CAVDDecoder::isSIODecryption(CAVDDecoder *this)
{
  return (*((_DWORD *)this + 701) & 0xFFFFFFFD) == 1;
}

uint64_t CAVDHevcDecoder::getInterLayerShortTermPic(CAVDHevcDecoder *this)
{
  return 0;
}

BOOL CAVDHevcDecoder::VAIsSurfaceListIndexMapped(CAVDHevcDecoder *this, int a2, int a3)
{
  if (a2 > 128) {
    return 0;
  }
  int v3 = (char *)this + 24;
  if (a3 != 1) {
    int v3 = (char *)this + 1056;
  }
  return *(void *)&v3[8 * a2] != 0;
}

BOOL CAVDHevcDecoder::decodeGetRenderTargetRef(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  *a3 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 3080);
  uint64_t v5 = *(unsigned int *)(*(void *)(*(void *)(a1 + 8400) + 8 * v4) + 4 * a2);
  if (v5 > 0x80) {
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(a1 + 8 * v5 + 1056);
  if (!v7)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_14:
      int v10 = 314;
      goto LABEL_15;
    }
    *(_DWORD *)buf = 136315138;
    long long v53 = "decodeGetRenderTargetRef";
    long long v13 = &_os_log_internal;
    long long v14 = "AppleAVD: %s(): HEVC pOrigRef is NULL!";
LABEL_13:
    _os_log_impl(&dword_223977000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 0xCu);
    goto LABEL_14;
  }
  int v9 = *(_DWORD *)(a1 + 2856);
  if (*(_DWORD *)(v7 + 204) == v9 && *(_DWORD *)(v7 + 208) == *(_DWORD *)(a1 + 2860))
  {
    int v10 = 0;
    *a3 = v7;
LABEL_15:
    if (v10) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = *a3 == 0;
    }
    return !v15;
  }
  uint64_t v11 = *(unsigned int *)(*(void *)(*(void *)(a1 + 8416) + 8 * v4) + 4 * a2);
  if (v11 > 0x80)
  {
LABEL_10:
    int v10 = 0;
    goto LABEL_15;
  }
  uint64_t v12 = *(void *)(a1 + 8 * v11 + 1056);
  *a3 = v12;
  if (!v12)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_DWORD *)buf = 136315138;
    long long v53 = "decodeGetRenderTargetRef";
    long long v13 = &_os_log_internal;
    long long v14 = "AppleAVD: %s(): HEVC pScaledRef is NULL!";
    goto LABEL_13;
  }
  if (*(_DWORD *)(v12 + 204) == v9 && *(_DWORD *)(v12 + 208) == *(_DWORD *)(a1 + 2860)) {
    goto LABEL_10;
  }
  uint64_t v42 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2096) + 176))(*(void *)(a1 + 2096), a2);
  uint64_t v17 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2096) + 184))(*(void *)(a1 + 2096), a2);
  int v18 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2096) + 192))(*(void *)(a1 + 2096), a2);
  int v19 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2096) + 200))(*(void *)(a1 + 2096), a2);
  int v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 2096) + 208))(*(void *)(a1 + 2096));
  int v21 = (*(uint64_t (**)(void))(**(void **)(a1 + 2096) + 216))(*(void *)(a1 + 2096));
  if (*(void *)(a1 + 2880))
  {
    if (*(void *)(a1 + 2928))
    {
      if (*(void *)(a1 + 2952))
      {
        int v22 = v21;
        IOSurfaceRef v23 = *(void **)(a1 + 2904);
        if (v23)
        {
          if (*(void *)(a1 + 2976))
          {
            uint64_t v24 = *(void *)(a1 + 8280) + 23176 * *(int *)(a1 + 8320);
            int v40 = *(_DWORD *)(v24 + 3612);
            int v41 = *(_DWORD *)(v24 + 3608);
            bzero(v23, *(unsigned int *)(a1 + 2920));
            bzero(*(void **)(a1 + 2928), *(unsigned int *)(a1 + 2944));
            bzero(*(void **)(a1 + 2952), *(unsigned int *)(a1 + 2968));
            bzero(*(void **)(a1 + 2976), *(unsigned int *)(a1 + 2992));
            uint64_t v25 = *(void *)(a1 + 2344);
            unsigned int v26 = *(_DWORD *)(v7 + 204);
            unsigned int v27 = *(_DWORD *)(v7 + 208);
            unsigned int v28 = *(_DWORD *)(a1 + 2856);
            unsigned int v29 = *(_DWORD *)(a1 + 2860);
            int v30 = *(_DWORD *)(a1 + 2864);
            uint64_t v31 = *(void *)(a1 + 2880);
            unsigned int v32 = *(_DWORD *)(a1 + 2896);
            int v45 = v20;
            int v46 = v22;
            uint64_t v47 = v42;
            uint64_t v48 = v17;
            int v49 = v18;
            int v50 = v19;
            int v51 = 2;
            long long v33 = *(_OWORD *)(a1 + 2920);
            v43[0] = *(_OWORD *)(a1 + 2904);
            v43[1] = v33;
            long long v34 = *(_OWORD *)(a1 + 2936);
            long long v35 = *(_OWORD *)(a1 + 2952);
            long long v36 = *(_OWORD *)(a1 + 2968);
            v43[5] = *(_OWORD *)(a1 + 2984);
            long long v44 = xmmword_223ADBDC0;
            v43[3] = v35;
            v43[4] = v36;
            uint64_t v37 = *(void *)(a1 + 2072) + 8;
            uint64_t v38 = *(void *)(a1 + 2064) + 8;
            v43[2] = v34;
            int v10 = AppleAVDCommandBuilder::scaleOutputFrame(v25, v7 + 8, v12 + 8, v26, v27, v28, v29, v30, v31, v32, v41, v40, (uint64_t)&v44, v43, v37, v38);
            if (!v10) {
              *(void *)(v12 + 204) = *(void *)(a1 + 2856);
            }
            goto LABEL_15;
          }
        }
      }
    }
  }
  BOOL v39 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v39)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: CAVDHevcDecoder::DecodeGetRenderTargetRef rvra scaler buffers are not allocated!", buf, 2u);
    return 0;
  }
  return result;
}

uint64_t CAVDHevcDecoder::IsFirstPicAfterEosNal(CAVDHevcDecoder *this)
{
  return *((unsigned __int8 *)this + 3100);
}

uint64_t CAVDHevcDecoder::getCollocMVInfo(CAVDHevcDecoder *this, int a2)
{
  return (*(uint64_t (**)(void, void, char *, char *))(**((void **)this + 262) + 264))(*((void *)this + 262), *(unsigned int *)(*(void *)(*((void *)this + 1037) + 2360 * a2 + 2344) + 44), (char *)this + 8856, (char *)this + 9032);
}

uint64_t CAVDHevcDecoder::getFrameParams(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8344)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(_DWORD *)a2 = *(unsigned __int8 *)(a1 + 3650);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8336);
  return result;
}

uint64_t CAVDHevcDecoder::CopyBitsBufferData(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 8296) + 2360 * a3;
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = v4 - *(void *)(*(void *)(a1 + 1048) + 8);
  unint64_t v6 = *(unsigned int *)(v3 + 2080);
  unint64_t v7 = v6 >> 3;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = (*(_DWORD *)(v3 + 16) - (*(_DWORD *)(v3 + 2080) >> 3));
  if (v9)
  {
    int v10 = (char *)(v4 + (v6 >> 3));
    uint64_t v11 = (unsigned char *)(*(void *)(a2 + 8) + v5 + (v6 >> 3));
    do
    {
      char v12 = *v10++;
      *v11++ = v12;
      --v9;
    }
    while (v9);
  }
  return (v7 + v8 + v5);
}

uint64_t CAVDHevcDecoder::getSDataAddr(CAVDHevcDecoder *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1037) + 2360 * a2;
  if (*((unsigned char *)this + 2834)) {
    uint64_t v3 = *(void *)(v2 + 8) - **((void **)this + 355) + *(void *)(*((void *)this + 355) + 16);
  }
  else {
    uint64_t v3 = *(void *)(v2 + 8) - *(void *)(*((void *)this + 131) + 8) + *(void *)(*((void *)this + 131) + 24);
  }
  return (v3 + (*(_DWORD *)(v2 + 2080) >> 3));
}

uint64_t CAVDHevcDecoder::GetSDataAddr(CAVDHevcDecoder *this, unsigned int a2, unint64_t *a3)
{
  uint64_t v3 = *((void *)this + 1037) + 2360 * a2;
  if (*((unsigned char *)this + 2834)) {
    uint64_t v4 = *(void *)(v3 + 8) - **((void **)this + 355) + *(void *)(*((void *)this + 355) + 16);
  }
  else {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)(*((void *)this + 131) + 8) + *(void *)(*((void *)this + 131) + 24);
  }
  *a3 = v4 + ((unint64_t)*(unsigned int *)(v3 + 2080) >> 3);
  return 1;
}

uint64_t CAVDHevcDecoder::allocStaticAVDMem(uint64_t a1, _OWORD *a2, uint64_t a3, int a4)
{
  return CAVDDecoder::mapAVDMemory(a1, *(mach_port_t ***)(a1 + 2344), 0, a3, a4, 1, a2, 1u, 0, 0, 0, 0);
}

__n128 CAVDHevcDecoder::populateSnapshotStruct(CAVDHevcDecoder *this, unsigned int a2, int a3)
{
  int v3 = *((_DWORD *)this + 2180);
  if (v3)
  {
    uint64_t v4 = (_DWORD *)((char *)this + 8596);
    uint64_t v5 = (uint64_t *)((char *)this + 8520);
    uint64_t v6 = *((unsigned int *)this + 2180);
    do
    {
      uint64_t v7 = *v5++;
      *(void *)(v4 - 3) = *(void *)(v7 + 48);
      *(v4 - 1) = *(_DWORD *)(v7 + 64);
      *uint64_t v4 = *(_DWORD *)(v7 + 28);
      v4 += 4;
      --v6;
    }
    while (v6);
  }
  *((_DWORD *)this + 2178) = v3;
  uint64_t v8 = *((void *)this + 261);
  long long v9 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)((char *)this + 2104) = *(_OWORD *)v8;
  *(_OWORD *)((char *)this + 2120) = v9;
  long long v10 = *(_OWORD *)(v8 + 32);
  long long v11 = *(_OWORD *)(v8 + 48);
  long long v12 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)((char *)this + 2168) = *(_OWORD *)(v8 + 64);
  *(_OWORD *)((char *)this + 2184) = v12;
  *(_OWORD *)((char *)this + 2136) = v10;
  *(_OWORD *)((char *)this + 2152) = v11;
  long long v13 = *(_OWORD *)(v8 + 96);
  long long v14 = *(_OWORD *)(v8 + 112);
  long long v15 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)((char *)this + 2232) = *(_OWORD *)(v8 + 128);
  *(_OWORD *)((char *)this + 2248) = v15;
  *(_OWORD *)((char *)this + 2200) = v13;
  *(_OWORD *)((char *)this + 2216) = v14;
  __n128 result = *(__n128 *)(v8 + 160);
  long long v17 = *(_OWORD *)(v8 + 176);
  long long v18 = *(_OWORD *)(v8 + 208);
  *(_OWORD *)((char *)this + 2296) = *(_OWORD *)(v8 + 192);
  *(_OWORD *)((char *)this + 2312) = v18;
  *(__n128 *)((char *)this + 2264) = result;
  *(_OWORD *)((char *)this + 2280) = v17;
  *((_DWORD *)this + 582) = a3;
  return result;
}

uint64_t CAVDHevcDecoder::getRefBufIndex(CAVDHevcDecoder *this, unsigned int a2)
{
  return *((unsigned int *)this + 4 * a2 + 2148);
}

uint64_t CAVDHevcDecoder::getRefPicsNum(CAVDHevcDecoder *this)
{
  return *((unsigned int *)this + 2178);
}

uint64_t CAVDHevcDecoder::setRefDartVAddr(uint64_t this, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(this + 16 * a2 + 8584) + 16) = a3;
  return this;
}

CAHDecSalviaHevc *createSalviaHevcDecoder(CAVDHevcDecoder *a1)
{
  uint64_t v2 = (CAHDecSalviaHevc *)operator new(0x2E38uLL, MEMORY[0x263F8C180]);
  int v3 = v2;
  if (v2) {
    CAHDecSalviaHevc::CAHDecSalviaHevc(v2, a1);
  }
  return v3;
}

void sub_223A829DC(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecSalviaHevc::CAHDecSalviaHevc(CAHDecSalviaHevc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73FF30;
  *(_DWORD *)(v1 + 456) = 393964;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecSalviaHevc::CAHDecSalviaHevc(CAHDecSalviaHevc *this, CAVDHevcDecoder *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73FF30;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 393964;
  *(_DWORD *)(v4 + 8) = 2540;
  *(_OWORD *)(v4 + 16) = xmmword_223AD07B0;
  *(_DWORD *)(v4 + 32) = 2;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 393964, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      uint64_t v7 = "CAHDecSalviaHevc";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v6, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v5 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v5;
    *((void *)this + 34) = v5;
    bzero((char *)this + 528, 0x2C00uLL);
  }
}

void sub_223A82BA0(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecSalviaHevc::~CAHDecSalviaHevc(CAHDecSalviaHevc *this)
{
  *(void *)this = &unk_26D73FF30;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecSalviaHevc::~CAHDecSalviaHevc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecSalviaHevc::initPicture(CAHDecSalviaHevc *this, int a2, __int16 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 114) = 393964;
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v4;
  if (v4)
  {
    bzero(v4, 0x602ECuLL);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v7 + 16) = a2;
    *(_WORD *)(v7 + 24) = 257;
    *(_WORD *)(v7 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 2955) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "initPicture";
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v9, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecSalviaHevc::populateSlices(CAHDecSalviaHevc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2540;
    uint64_t v5 = a2;
    do
    {
      CAHDecSalviaHevc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 352;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecSalviaHevc::populateSliceRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 256);
  int v6 = *(_DWORD *)(v5 + 8320);
  int v7 = *(_DWORD *)(v5 + 8324);
  uint64_t v8 = *(void *)(v5 + 8288);
  uint64_t v9 = *(void *)(v5 + 8280);
  uint64_t v10 = *(void *)(v5 + 8296);
  int v11 = a3;
  uint64_t v12 = v9 + 23176 * v6;
  *(_DWORD *)(a1 + 460) = 6 * *(_DWORD *)(v12 + 3636);
  LODWORD(v12) = *(_DWORD *)(v12 + 22880);
  *(_DWORD *)(a2 + 348) = 0x1000000;
  uint64_t v13 = v10 + 2360 * (int)a3;
  unsigned int v14 = (((*(_DWORD *)(v13 + 36) / v12) & 0xFFF) << 12) | 0x1000000;
  *(_DWORD *)(a2 + 348) = v14;
  *(_DWORD *)(a2 + 348) = v14 & 0xFFFFF000 | (*(_DWORD *)(v13 + 36) % v12) & 0xFFF;
  *(_DWORD *)(a2 + 4) = 0;
  char v15 = *(unsigned char *)(v8 + 9856 * v7 + 6477);
  if (v15) {
    char v15 = *(unsigned char *)(v10 + 2360 * (int)a3 + 1880);
  }
  int v16 = v15 & 1;
  *(_DWORD *)(a2 + 4) = v16;
  uint64_t v17 = v10 + 2360 * (int)a3;
  int v19 = *(_DWORD *)(v17 + 44);
  long long v18 = (int *)(v17 + 44);
  if (v19 == 2) {
    LOBYTE(v20) = 0;
  }
  else {
    int v20 = 5 - *(_DWORD *)(v10 + 2360 * (int)a3 + 1864);
  }
  unsigned int v21 = v16 & 0xFFFFFFF1 | (2 * (v20 & 7));
  *(_DWORD *)(a2 + 4) = v21;
  if (*v18)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *(unsigned __int8 *)(v10 + 2360 * (int)a3 + 616);
    if (*(unsigned char *)(v10 + 2360 * (int)a3 + 616)) {
      int v22 = *(unsigned char *)(v10 + 2360 * (int)a3 + 762) == 0;
    }
  }
  int v23 = v21 | (16 * v22);
  *(_DWORD *)(a2 + 4) = v23;
  if (*v18 == 2)
  {
    char v24 = 0;
  }
  else
  {
    char v24 = *(unsigned char *)(v8 + 9856 * v7 + 17);
    if (v24) {
      char v24 = *(unsigned char *)(v10 + 2360 * (int)a3 + 761);
    }
  }
  unsigned int v25 = v23 & 0xFFFFFFDF | (32 * (v24 & 1));
  *(_DWORD *)(a2 + 4) = v25;
  if (*v18) {
    int v26 = 0;
  }
  else {
    int v26 = *(unsigned char *)(v10 + 2360 * (int)a3 + 760) == 0;
  }
  char v27 = 0;
  int v28 = v25 | (v26 << 6);
  *(_DWORD *)(a2 + 4) = v28;
  uint64_t v29 = v10 + 2360 * (int)a3;
  int v30 = (*(_DWORD *)(v29 + 624) & 0xF) << 7;
  if (*(_DWORD *)(v29 + 624) == -1) {
    int v30 = 0;
  }
  int v31 = v30 | v28;
  *(_DWORD *)(a2 + 4) = v31;
  int v32 = (*(_DWORD *)(v29 + 620) & 0xF) << 11;
  if (*(_DWORD *)(v29 + 620) == -1) {
    int v32 = 0;
  }
  int v33 = v31 | v32;
  *(_DWORD *)(a2 + 4) = v33;
  if (*v18 != 2)
  {
    char v27 = *(unsigned char *)(v9 + 23176 * v6 + 22284);
    if (v27) {
      char v27 = *(unsigned char *)(v10 + 2360 * (int)a3 + 616);
    }
  }
  uint64_t v119 = v8;
  int v120 = v7;
  unsigned int v34 = v33 & 0xFFFF7FFF | ((v27 & 1) << 15);
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a2 + 4) = v34 & 0xFFFCFFFF | ((*v18 & 3) << 16);
  *(_DWORD *)(a2 + 336) = 0;
  if (*v18 > 1
    || !*(void *)(v10 + 2360 * (int)a3 + 2344)
    || *(_DWORD *)(a1 + 11820)
    || ((*(void (**)(void, uint64_t))(**(void **)(a1 + 256) + 344))(*(void *)(a1 + 256), a3),
        uint64_t v35 = *(void *)(a1 + 256),
        *(_DWORD *)(v35 + 9032))
    || (*(_DWORD *)(a1 + 11820) = 1, *(_DWORD *)(a2 + 4) |= 0x40000u, !*(void *)(v35 + 8856))
    && !*(_DWORD *)(v35 + 9008)
    && !*(_DWORD *)(v35 + 9012)
    || (uint64_t result = CAHDec::addToPatcherList(a1, (void *)(v35 + 8856), 352 * (int)a3 + 2876, 0, 0xFFFFFFFFLL, 8, 0xFFFFFF, 4), !result))
  {
    int v118 = v6;
    long long v36 = (unsigned int *)(v29 + 624);
    uint64_t v37 = (unsigned int *)(v29 + 620);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
    uint64_t v38 = a1;
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 256) + 352))(*(void *)(a1 + 256), 0, a3);
    uint64_t v40 = v119;
    int v39 = v120;
    if (*v18 > 1) {
      goto LABEL_38;
    }
    uint64_t v41 = v5 + 8456;
    if ((*v37 & 0x80000000) != 0)
    {
      uint64_t v43 = 0;
      if (*v18) {
        goto LABEL_38;
      }
    }
    else
    {
      int v42 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = a2 + 8;
      do
      {
        uint64_t v45 = v43;
        *(_DWORD *)(v44 + 4 * v43) = v42 & 0xF0 | 0x2DC00000;
        *(_DWORD *)(v44 + 4 * v43) = v42 & 0xF0 | 0x2DC00000 | *(_DWORD *)(v41 + 4 * v43) & 0xF;
        ++v43;
        v42 += 16;
      }
      while (v45 < (int)*v37);
      if (*v18) {
        goto LABEL_38;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v38 + 256) + 352))(*(void *)(v38 + 256), 1, a3);
    uint64_t v40 = v119;
    int v39 = v120;
    if ((*v36 & 0x80000000) == 0)
    {
      int v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = a2 + 4 * v43 + 8;
      do
      {
        *(_DWORD *)(v48 + 4 * v47) = v46 & 0xF0 | 0x2DC00100;
        *(_DWORD *)(v48 + 4 * v47) = v46 & 0xF0 | 0x2DC00100 | *(_DWORD *)(v41 + 4 * v47) & 0xF;
        v46 += 16;
      }
      while (v47++ < (int)*v36);
    }
LABEL_38:
    *(void *)(a2 + 128) = 0x2DD0000000000000;
    int v50 = *v18;
    if (*v18)
    {
      if (v50 != 1 || !*(unsigned char *)(v40 + 9856 * v39 + 49)) {
        goto LABEL_62;
      }
    }
    else if (!*(unsigned char *)(v40 + 9856 * v39 + 50))
    {
LABEL_62:
      uint64_t v85 = v40 + 9856 * v39;
      int v88 = *(unsigned __int8 *)(v85 + 48);
      unint64_t v86 = (unsigned __int8 *)(v85 + 48);
      LOBYTE(v87) = v88;
      if (v88) {
        int v87 = *(_DWORD *)(v10 + 2360 * v11 + 1876);
      }
      unsigned int v89 = *(_DWORD *)(a2 + 328) & 0xFFFFFFE0 | ((_BYTE)v87 + *((_DWORD *)v86 - 1)) & 0x1F;
      *(_DWORD *)(a2 + 328) = v89;
      int v90 = *v86;
      if (v90) {
        int v90 = *(_DWORD *)(v10 + 2360 * v11 + 1872);
      }
      unsigned int v91 = v89 & 0xFFFFFC1F | (32 * (((_BYTE)v90 + *(_DWORD *)(v40 + 9856 * v39 + 40)) & 0x1F));
      *(_DWORD *)(a2 + 328) = v91;
      long long v92 = (_DWORD *)(v40 + 9856 * v39);
      int v93 = v92[7] + *(_DWORD *)(v10 + 2360 * v11 + 1868) + 26;
      *(_DWORD *)(a2 + 328) = v91 & 0xE03FF | ((v93 & 0x7F) << 10) | 0x2D900000;
      *(_DWORD *)(*(void *)(v38 + 256) + 2868) = *(_DWORD *)(v38 + 460) + (v93 << 25 >> 25);
      *(_DWORD *)(a2 + 332) = 0;
      int v94 = v92[1635] & 7;
      *(_DWORD *)(a2 + 332) = v94;
      unsigned int v95 = v94 & 0xFFFFFFC7 | (8 * (v92[1634] & 7));
      *(_DWORD *)(a2 + 332) = v95;
      long long v96 = (unsigned char *)(v9 + 23176 * v118 + 10649);
      int v97 = *v96;
      if (*v96) {
        int v97 = (*(unsigned char *)(v10 + 2360 * v11 + 618) & 1) << 6;
      }
      int v98 = v97 | v95;
      *(_DWORD *)(a2 + 332) = v97 | v95;
      int v99 = *v96;
      if (*v96) {
        int v99 = (*(unsigned char *)(v10 + 2360 * v11 + 617) & 1) << 7;
      }
      int v100 = v99 | v98;
      *(_DWORD *)(a2 + 332) = v99 | v98;
      uint64_t v101 = v10 + 2360 * v11;
      uint64_t v102 = v40 + 9856 * v39;
      if (*(unsigned char *)(v101 + 1881)) {
        long long v103 = (_DWORD *)(v101 + 1888);
      }
      else {
        long long v103 = (_DWORD *)(v102 + 248);
      }
      unsigned int v104 = v100 & 0xFFFFF0FF | ((*v103 & 0xF) << 8);
      *(_DWORD *)(a2 + 332) = v104;
      if (*(unsigned char *)(v101 + 1881)) {
        int v105 = (_DWORD *)(v101 + 1884);
      }
      else {
        int v105 = (_DWORD *)(v102 + 244);
      }
      unsigned int v106 = v104 & 0xFFFF0FFF | ((*v105 & 0xF) << 12);
      *(_DWORD *)(a2 + 332) = v106;
      if (*(unsigned char *)(v102 + 239) && *(unsigned char *)(v101 + 1881)) {
        unsigned int v107 = (unsigned __int8 *)(v10 + 2360 * v11 + 1882);
      }
      else {
        unsigned int v107 = (unsigned __int8 *)(v40 + 9856 * v39 + 240);
      }
      int v108 = *v107;
      BOOL v109 = (v99 | v97) != 0;
      int v110 = v106 | ((v108 == 0) << 16);
      *(_DWORD *)(a2 + 332) = v110;
      if (!v108) {
        BOOL v109 = 1;
      }
      uint64_t v111 = v40 + 9856 * v39;
      if (v109) {
        long long v112 = (unsigned char *)(v10 + 2360 * v11 + 1892);
      }
      else {
        long long v112 = (unsigned char *)(v111 + 237);
      }
      unsigned int v113 = v110 & 0xFFFDFFFF | ((*v112 & 1) << 17);
      *(_DWORD *)(a2 + 332) = v113;
      if (*(unsigned char *)(v111 + 52)) {
        int v114 = (*(unsigned char *)(v40 + 9856 * v39 + 236) & 1) << 18;
      }
      else {
        int v114 = 0x40000;
      }
      int v115 = v114 | v113;
      *(_DWORD *)(a2 + 332) = v115;
      int v116 = *(unsigned __int8 *)(v9 + 23176 * v118 + 10650);
      if (*(unsigned char *)(v9 + 23176 * v118 + 10650)) {
        int v116 = (*(unsigned char *)(v9 + 23176 * v118 + 10668) == 0) << 19;
      }
      *(_DWORD *)(a2 + 332) = v115 | v116 | 0x2DA00000;
      if (!(*(unsigned int (**)(void))(**(void **)(v38 + 256) + 448))()) {
        return 0xFFFFFFFFLL;
      }
      if (!MEMORY[0] && !MEMORY[0x98] && !MEMORY[0x9C]
        || (uint64_t result = CAHDec::addToPatcherList(v38, 0, 352 * (int)a3 + 2880, 0, 0xFFFFFFFFLL, 0, -1, 4), !result))
      {
        uint64_t result = 0;
        *(_DWORD *)(a2 + 344) = *(_DWORD *)(v10 + 2360 * v11 + 16) - (*(_DWORD *)(v10 + 2360 * v11 + 2080) >> 3);
      }
      return result;
    }
    unsigned int v51 = 0;
    unsigned int v52 = 0;
    uint64_t v53 = v10 + 2360 * v11;
    uint64_t v54 = v40 + 9856 * v39;
    long long v55 = (unsigned char *)(v54 + 50);
    long long v56 = (unsigned char *)(v54 + 49);
    if (v50) {
      BOOL v57 = v56;
    }
    else {
      BOOL v57 = v55;
    }
    int v58 = ((*v57 & 1) << 6) | 0x2DD00000;
    *(_DWORD *)(a2 + 132) = v58;
    char v59 = *(_DWORD *)(v53 + 768);
    unsigned int v60 = v58 & 0xFFFFFFC7 | (8 * (*(_DWORD *)(v53 + 768) & 7));
    *(_DWORD *)(a2 + 132) = v60;
    unsigned __int8 v61 = (*(_DWORD *)(v53 + 772) + *(_DWORD *)(v53 + 768)) & 7;
    *(_DWORD *)(a2 + 132) = v60 & 0xFFFFFFF8 | v61;
    int v62 = 1 << (v59 & 7);
    int v63 = 1 << v61;
    do
    {
      uint64_t v64 = v51;
      if (*(unsigned char *)(v10 + 2360 * v11 + v51 + 776))
      {
        int v65 = ((v51 & 0xF) << 9) | 0x2DE04000;
        uint64_t v66 = a2 + 4 * v52;
        *(_DWORD *)(v66 + 136) = v65;
        uint64_t v67 = v10 + 2360 * v11 + 4 * v64;
        *(_DWORD *)(v66 + 136) = ((unsigned __int16)*(_DWORD *)(v67 + 808) + (_WORD)v62) & 0x1FF | v65;
        *(_DWORD *)(v66 + 232) = 770703360;
        *(_DWORD *)(v66 + 232) = *(unsigned __int16 *)(v67 + 872) | 0x2DF00000;
        ++v52;
      }
      if (*(unsigned char *)(v10 + 2360 * v11 + v64 + 792))
      {
        uint64_t v68 = 0;
        char v69 = 1;
        do
        {
          char v70 = v69;
          int v71 = ((v64 & 0xF) << 9) | (v68 << 14) | 0x2DE08000;
          uint64_t v72 = a2 + 4 * v52;
          *(_DWORD *)(v72 + 136) = v71;
          uint64_t v73 = v10 + 2360 * v11 + 8 * v64 + 4 * v68;
          *(_DWORD *)(v72 + 136) = ((unsigned __int16)*(_DWORD *)(v73 + 936) + (_WORD)v63) & 0x1FF | v71;
          *(_DWORD *)(v72 + 232) = 770703360;
          *(_DWORD *)(v72 + 232) = *(unsigned __int16 *)(v73 + 1608) | 0x2DF00000;
          ++v52;
          uint64_t v68 = 1;
          char v69 = 0;
        }
        while ((v70 & 1) != 0);
      }
      unsigned int v51 = v64 + 1;
    }
    while ((int)v64 + 1 <= *v37);
    if (!*v18)
    {
      unsigned int v74 = 0;
      do
      {
        uint64_t v75 = v74;
        if (*(unsigned char *)(v10 + 2360 * v11 + v74 + 1192))
        {
          int v76 = ((v74 & 0xF) << 9) | 0x2DE06000;
          uint64_t v77 = a2 + 4 * v52;
          *(_DWORD *)(v77 + 136) = v76;
          uint64_t v78 = v10 + 2360 * v11 + 4 * v75;
          *(_DWORD *)(v77 + 136) = ((unsigned __int16)*(_DWORD *)(v78 + 1224) + (_WORD)v62) & 0x1FF | v76;
          *(_DWORD *)(v77 + 232) = 770703360;
          *(_DWORD *)(v77 + 232) = *(unsigned __int16 *)(v78 + 1288) | 0x2DF00000;
          ++v52;
        }
        if (*(unsigned char *)(v10 + 2360 * v11 + v75 + 1208))
        {
          uint64_t v79 = 0;
          char v80 = 1;
          do
          {
            char v81 = v80;
            int v82 = ((v75 & 0xF) << 9) | (v79 << 14) | 0x2DE0A000;
            uint64_t v83 = a2 + 4 * v52;
            *(_DWORD *)(v83 + 136) = v82;
            uint64_t v84 = v10 + 2360 * v11 + 8 * v75 + 4 * v79;
            *(_DWORD *)(v83 + 136) = ((unsigned __int16)*(_DWORD *)(v84 + 1352) + (_WORD)v63) & 0x1FF | v82;
            *(_DWORD *)(v83 + 232) = 770703360;
            *(_DWORD *)(v83 + 232) = *(unsigned __int16 *)(v84 + 1736) | 0x2DF00000;
            ++v52;
            uint64_t v79 = 1;
            char v80 = 0;
          }
          while ((v81 & 1) != 0);
        }
        unsigned int v74 = v75 + 1;
      }
      while ((int)v75 + 1 <= *v36);
    }
    *(_DWORD *)(a2 + 128) = v52;
    goto LABEL_62;
  }
  return result;
}

uint64_t CAHDecSalviaHevc::populateCommonRegisters(CAHDecSalviaHevc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000000;
  return 0;
}

uint64_t CAHDecSalviaHevc::updateCommonRegisters(CAHDecSalviaHevc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecSalviaHevc::populateSequenceRegisters(CAHDecSalviaHevc *this)
{
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)*((void *)this + 33);
  int v3 = *(_DWORD *)(v1 + 8320);
  uint64_t v4 = *(void *)(v1 + 8280);
  v2[10] = 0;
  uint64_t v5 = v4 + 23176 * v3;
  __int16 v6 = (*(_DWORD *)(v5 + 3608) >> 3) - 1;
  v2[10] = v6 & 0x1FFF;
  v2[10] = ((*(_DWORD *)(v5 + 3612) << 13) + 536805376) & 0x1FFF0000 | v6 & 0x1FFF;
  v2[11] = 0;
  int v7 = *(unsigned char *)(v5 + 10648) & 1;
  v2[11] = v7;
  unsigned int v8 = v7 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v5 + 4440) & 7));
  v2[11] = v8;
  unsigned int v9 = v8 & 0xFFFFFF8F | (16 * (*(_DWORD *)(v5 + 4436) & 7));
  v2[11] = v9;
  unsigned int v10 = v9 & 0xFFFFFE7F | (((*(_DWORD *)(v5 + 4428) + *(_DWORD *)(v5 + 4432)) & 3) << 7);
  v2[11] = v10;
  unsigned int v11 = v10 & 0xFFFFF9FF | ((*(_DWORD *)(v5 + 4428) & 3) << 9);
  v2[11] = v11;
  unsigned int v12 = v11 & 0xFFFFE7FF | (((*(_DWORD *)(v5 + 4424) + *(_DWORD *)(v5 + 4420)) & 3) << 11);
  v2[11] = v12;
  unsigned int v13 = v12 & 0xFFFF9FFF | ((*(_DWORD *)(v5 + 4420) & 3) << 13);
  v2[11] = v13;
  unsigned int v14 = v13 & 0xFFF87FFF | ((*(_DWORD *)(v5 + 3640) & 0xF) << 15);
  v2[11] = v14;
  unsigned int v15 = v14 & 0xFF87FFFF | ((*(_DWORD *)(v5 + 3636) & 0xF) << 19);
  v2[11] = v15;
  unsigned int v16 = v15 & 0xFF7FFFFF | ((*(unsigned char *)(v5 + 3604) & 1) << 23);
  v2[11] = v16;
  v2[11] = v16 & 0xFCFFFFFF | ((*(_DWORD *)(v5 + 3600) & 3) << 24);
  v2[12] = 0;
  if (*(unsigned char *)(v5 + 10650))
  {
    v2[12] = 4096;
    uint64_t v17 = (_DWORD *)(v4 + 23176 * v3);
    int v18 = (v17[2666] + v17[2665]) & 3 | 0x1000;
    v2[12] = v18;
    unsigned int v19 = v18 & 0xFFFFFFF3 | (4 * (v17[2665] & 3));
    v2[12] = v19;
    unsigned int v20 = v19 & 0xFFFFFF0F | (16 * (v17[2664] & 0xF));
    v2[12] = v20;
    v2[12] = v20 & 0xFFFFF0FF | ((v17[2663] & 0xF) << 8);
  }
  v2[13] = 0;
  if (*(unsigned char *)(v4 + 23176 * v3 + 22833))
  {
    int v21 = *(unsigned char *)(v4 + 23176 * v3 + 22844) & 1;
    v2[13] = v21;
    unsigned int v22 = v21 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v4 + 23176 * v3 + 22843) & 1));
    v2[13] = v22;
    unsigned int v23 = v22 & 0xFFFFFFFB | (4 * (*(unsigned char *)(v4 + 23176 * v3 + 22842) & 1));
    v2[13] = v23;
    int v24 = v23 | (8 * (*(unsigned char *)(v4 + 23176 * v3 + 22841) == 0));
    v2[13] = v24;
    unsigned int v25 = v24 & 0xFFFFFFEF | (16 * (*(unsigned char *)(v4 + 23176 * v3 + 22840) & 1));
    v2[13] = v25;
    unsigned int v26 = v25 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v4 + 23176 * v3 + 22839) & 1));
    v2[13] = v26;
    unsigned int v27 = v26 & 0xFFFFFFBF | ((*(unsigned char *)(v4 + 23176 * v3 + 22838) & 1) << 6);
    v2[13] = v27;
    int v28 = v27 | ((*(unsigned char *)(v4 + 23176 * v3 + 22837) & 1) << 7);
    v2[13] = v28;
    int v29 = v28 | ((*(unsigned char *)(v4 + 23176 * v3 + 22836) & 1) << 8);
  }
  else
  {
    int v29 = 8;
  }
  v2[13] = v29;
  uint64_t v30 = v4 + 23176 * v3;
  v2[13] = v29 & 0xFFFFFDFF | ((*(unsigned char *)(v30 + 22285) & 1) << 9);
  if (*(unsigned char *)(v30 + 4444)) {
    CAHDecTansyHevc::copyScalingList((uint64_t)this, (uint64_t)(v2 + 14), *((void *)this + 33) + 552, *(_DWORD *)(v5 + 3600), v4 + 23176 * v3 + 4448);
  }
  return 0;
}

uint64_t CAHDecSalviaHevc::getTileHdrMemInfo(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 176 * a2;
  *a3 = v3 + 528;
  a3[1] = v3 + 3344;
  return result;
}

__n128 CAHDecSalviaHevc::getMVmemInfo(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1 + 176 * a2;
  long long v5 = *(_OWORD *)(v4 + 7568);
  long long v6 = *(_OWORD *)(v4 + 7600);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 7584);
  *(_OWORD *)(a3 + 32) = v6;
  *(_OWORD *)a3 = v5;
  long long v7 = *(_OWORD *)(v4 + 7616);
  long long v8 = *(_OWORD *)(v4 + 7632);
  long long v9 = *(_OWORD *)(v4 + 7664);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(v4 + 7648);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_OWORD *)(a3 + 64) = v8;
  __n128 result = *(__n128 *)(v4 + 7680);
  long long v11 = *(_OWORD *)(v4 + 7696);
  long long v12 = *(_OWORD *)(v4 + 7728);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v4 + 7712);
  *(_OWORD *)(a3 + 160) = v12;
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v11;
  *a4 = *(_DWORD *)(a1 + 4 * a2 + 464);
  return result;
}

uint64_t CAHDecSalviaHevc::populatePictureRegisters(CAHDecSalviaHevc *this)
{
  uint64_t v317 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 8320);
  int v4 = *(_DWORD *)(v2 + 8324);
  uint64_t v5 = *(void *)(v2 + 8280);
  uint64_t v6 = *(void *)(v2 + 8288);
  int v7 = *(_DWORD *)(v2 + 9036);
  unsigned int v8 = *(_DWORD *)(v2 + 3068);
  int v9 = *(_DWORD *)(v2 + 3072);
  int v295 = *(_DWORD *)(v2 + 3064);
  int v296 = *(unsigned __int8 *)(v2 + 3060);
  uint64_t v301 = *(void *)(v2 + 8392);
  int v302 = *(unsigned __int8 *)(v2 + 9098);
  int v297 = *(_DWORD *)(v2 + 3660);
  int v298 = *(_DWORD *)(v2 + 3036);
  int v307 = *(_DWORD *)(v2 + 2644);
  uint64_t v303 = *(void *)(v2 + 2088);
  uint64_t v305 = *(unsigned int *)(v2 + 8424);
  int v294 = *(unsigned __int8 *)(v2 + 8);
  long long v10 = *(_OWORD *)(v2 + 8536);
  v316[0] = *(_OWORD *)(v2 + 8520);
  v316[1] = v10;
  long long v11 = *(_OWORD *)(v2 + 8568);
  v316[2] = *(_OWORD *)(v2 + 8552);
  v316[3] = v11;
  uint64_t v299 = *(unsigned int *)(v2 + 8720);
  int v308 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  int v309 = v3;
  uint64_t v12 = v5 + 23176 * v3;
  int v13 = *(_DWORD *)(v12 + 4420);
  int v14 = *(_DWORD *)(v12 + 4424);
  memset(v315, 0, sizeof(v315));
  memset(v314, 0, sizeof(v314));
  uint64_t v15 = *((void *)this + 33);
  (*(void (**)(void))(**((void **)this + 32) + 336))();
  uint64_t v16 = 0;
  uint64_t v17 = (const double *)(*((void *)this + 32) + 8728);
  do
  {
    float64x2x2_t v318 = vld2q_f64(v17);
    v17 += 4;
    v315[v16] = v318.val[0];
    v314[v16++] = v318.val[1];
  }
  while (v16 != 4);
  *(_DWORD *)(v15 + 76) = 766509056;
  uint64_t v18 = (*(uint64_t (**)(void))(**((void **)this + 32) + 216))(*((void *)this + 32));
  if (v18) {
    int v19 = (*(_DWORD *)(*((void *)this + 32) + 3092) == 2) << 13;
  }
  else {
    int v19 = 0;
  }
  if (v308) {
    int v20 = 688;
  }
  else {
    int v20 = 672;
  }
  if (v307) {
    int v21 = 4160;
  }
  else {
    int v21 = 64;
  }
  *(void *)(v15 + 76) = v21 | ((v307 == 1) << 10) | v20 | *(_DWORD *)(v15 + 76) & 0xFFFFC10F | v19;
  if ((v7 & 1) != 0 && *(unsigned char *)(v6 + 9856 * v4 + 53) && *(_DWORD *)(v5 + 23176 * v309 + 22888) > 1u
    || (v7 & 2) != 0 && !*(unsigned char *)(v6 + 9856 * v4 + 53) && *(unsigned char *)(v6 + 9856 * v4 + 52))
  {
LABEL_24:
    int v22 = (v9 == 0) << 27;
    goto LABEL_25;
  }
  if ((v7 & 0x20) != 0 && !*(unsigned char *)(v6 + 9856 * v4 + 53))
  {
    int v22 = 0;
    if (*(unsigned char *)(v6 + 9856 * v4 + 52) || v8 < 2) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  int v22 = 0;
LABEL_25:
  char v23 = v14 + v13;
  *(_DWORD *)(v15 + 80) = v22;
  *(_DWORD *)(v15 + 84) = 0;
  uint64_t v24 = v5 + 23176 * v309;
  unsigned __int16 v25 = *(_DWORD *)(v24 + 3608) - 1;
  *(_DWORD *)(v15 + 84) = v25;
  int v26 = (v25 | ((unsigned __int16)*(_DWORD *)(v24 + 3612) << 16)) - 0x10000;
  *(void *)(v15 + 88) = 0;
  *(_DWORD *)(v15 + 84) = v26;
  if (*(unsigned char *)(v6 + 9856 * v4 + 6466))
  {
    unsigned int v27 = (unsigned char *)(v6 + 9856 * v4 + 6477);
    int v28 = 32 * (*v27 & 1);
    *(_DWORD *)(v15 + 92) = v28;
    LOBYTE(v29) = *v27;
    if (*v27) {
      int v29 = *(_DWORD *)(v6 + 9856 * v4 + 6484);
    }
    unint64_t v30 = v29 & 7;
    int v31 = v30 | v28;
    *(_DWORD *)(v15 + 92) = v30 | v28;
    if (v28)
    {
      int v32 = (_DWORD *)(v6 + 9856 * v4 + 6512);
      int v33 = (unsigned int *)(v15 + 100);
      unint64_t v34 = -1;
      do
      {
        unsigned int v35 = *v33 & 0xFFFFFFE0 | *v32 & 0x1F;
        *int v33 = v35;
        uint64_t v18 = v35 & 0xFFFFFC1F | (32 * (*(v32 - 6) & 0x1F));
        *v33++ = v18;
        ++v34;
        ++v32;
      }
      while (v34 < v30);
    }
    int v36 = *v27;
    if (v36) {
      int v36 = *(_DWORD *)(v6 + 9856 * v4 + 6480);
    }
    int v37 = (8 * ((v23 - (_BYTE)v36) & 3)) | v31;
    *(_DWORD *)(v15 + 92) = v37;
    unsigned int v38 = v37 & 0xFFFFFFBF | ((*(unsigned char *)(v6 + 9856 * v4 + 6476) & 1) << 6);
    *(_DWORD *)(v15 + 92) = v38;
    unsigned int v39 = v38 & 0xFFFFFE7F | ((*(_DWORD *)(v6 + 9856 * v4 + 6472) & 3) << 7);
  }
  else
  {
    unsigned int v39 = 8 * (v23 & 3);
  }
  *(_DWORD *)(v15 + 92) = v39;
  uint64_t v40 = v6 + 9856 * v4;
  int v43 = *(unsigned __int8 *)(v40 + 34);
  uint64_t v41 = (unsigned char *)(v40 + 34);
  LOBYTE(v42) = v43;
  if (v43) {
    int v42 = *(_DWORD *)(v6 + 9856 * v4 + 36);
  }
  unsigned int v44 = v39 & 0xFFFE7FFF | (((v23 - (_BYTE)v42) & 3) << 15);
  *(_DWORD *)(v15 + 92) = v44;
  uint64_t v45 = v6 + 9856 * v4;
  unsigned int v46 = v44 & 0xFFFFF1FF | ((*(_DWORD *)(v45 + 6460) & 7) << 9);
  *(_DWORD *)(v15 + 92) = v46;
  unsigned int v47 = v46 & 0xFFFFEFFF | ((*(unsigned char *)(v45 + 53) & 1) << 12);
  *(_DWORD *)(v15 + 92) = v47;
  char v49 = *(unsigned char *)(v45 + 52);
  uint64_t v48 = (unsigned char *)(v45 + 52);
  unsigned int v50 = v47 & 0xFFFFDFFF | ((v49 & 1) << 13);
  *(_DWORD *)(v15 + 92) = v50;
  unsigned int v51 = v50 & 0xFFFFBFFF | ((*(v48 - 1) & 1) << 14);
  *(_DWORD *)(v15 + 92) = v51;
  unsigned int v52 = v51 & 0xFFFDFFFF | ((*v41 & 1) << 17);
  *(_DWORD *)(v15 + 92) = v52;
  unsigned int v53 = v52 & 0xFFFBFFFF | ((*(v48 - 19) & 1) << 18);
  *(_DWORD *)(v15 + 92) = v53;
  unsigned int v54 = v53 & 0xFFF7FFFF | ((*(v48 - 20) & 1) << 19);
  *(_DWORD *)(v15 + 92) = v54;
  unsigned int v55 = v54 & 0xFFEFFFFF | ((*(v48 - 36) & 1) << 20);
  *(_DWORD *)(v15 + 92) = v55;
  if (v19) {
    BOOL v56 = 0;
  }
  else {
    BOOL v56 = *(unsigned char *)(v5 + 23176 * v309 + 22284) != 0;
  }
  *(_DWORD *)(v15 + 92) = v55 & 0xFFDFFFFF | (v56 << 21);
  uint64_t v57 = v6 + 9856 * v4;
  unsigned int v58 = *(_DWORD *)(v15 + 96) & 0xFFFFFFE0 | *(_DWORD *)(v57 + 44) & 0x1F;
  *(_DWORD *)(v15 + 96) = v58;
  *(_DWORD *)(v15 + 96) = v58 & 0xFFFFFC1F | (32 * (*(_DWORD *)(v57 + 40) & 0x1F));
  if (*(unsigned char *)(v57 + 252)) {
    CAHDecTansyHevc::copyScalingList(v18, v15 + 124, *((void *)this + 33) + 1548, *(_DWORD *)(v5 + 23176 * v309 + 3600), v6 + 9856 * v4 + 256);
  }
  *(void *)(v15 + 144) = 0;
  if (v9) {
    int v59 = 7340032;
  }
  else {
    int v59 = 3145728;
  }
  *(_DWORD *)(v15 + 152) = v59;
  if (!*(unsigned char *)(*((void *)this + 32) + 3004))
  {
    unsigned __int16 v108 = *(_DWORD *)(v24 + 3608) - 1;
    *(_DWORD *)(v15 + 148) = v108;
    int v109 = (*(_DWORD *)(v24 + 3612) << 16) - 0x10000;
    *(_DWORD *)(v15 + 148) = v109 & 0xFFFF0000 | v108;
    if (*(unsigned char *)(v5 + 23176 * v309 + 3616))
    {
      if ((*(unsigned char *)(v15 + 77) & 8) != 0)
      {
        uint64_t v110 = v5 + 23176 * v309;
        unsigned __int16 v111 = *(_DWORD *)(v110 + 3620) * *(_DWORD *)(v110 + 22852);
        *(_DWORD *)(v15 + 144) = v111;
        *(_DWORD *)(v15 + 144) = v111 | ((unsigned __int16)(*(_WORD *)(v110 + 22856) * *(_DWORD *)(v110 + 3628)) << 16);
        unsigned __int16 v112 = *(_DWORD *)(v24 + 3608) + ~(*(_DWORD *)(v110 + 3624) * *(_DWORD *)(v110 + 22852));
        *(_DWORD *)(v15 + 148) = v112 | v109;
        *(_DWORD *)(v15 + 148) = v112 | ((unsigned __int16)(*(_WORD *)(v24 + 3612)
                                                          + ~(*(_WORD *)(v110 + 3632) * *(_WORD *)(v110 + 22856))) << 16);
      }
    }
  }
  unsigned int v60 = (char *)this + 6160;
  for (uint64_t i = 156; i != 184; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v62 = *((void *)this + 33);
    int v63 = *(_DWORD *)(v62 + i);
    *(_DWORD *)(v62 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFu;
    uint64_t v64 = *((void *)this + 33);
    int v65 = *(_DWORD *)(v64 + i);
    *(_DWORD *)(v64 + i) = v63;
    if (*(void *)v60 || *((_DWORD *)v60 + 38) || *((_DWORD *)v60 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v60, i, 0, 0xFFFFFFFFLL, 8, v65, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 28) = *(_DWORD *)(*((void *)this + 33) + i + 28) & 0x800001FF | (((*((_DWORD *)this + 2952) >> 9) & 0x3FFFFF) << 9);
    v60 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 212) = 0;
  *(_DWORD *)(*((void *)this + 33) + 216) = 0;
  *(_DWORD *)(*((void *)this + 33) + 220) = 0;
  uint64_t v67 = *((void *)this + 33);
  int v68 = *(_DWORD *)(v67 + 220);
  *(_DWORD *)(v67 + 220) = 0;
  *(_DWORD *)(*((void *)this + 33) + 220) ^= 0xFFFFFFu;
  uint64_t v69 = *((void *)this + 33);
  int v70 = *(_DWORD *)(v69 + 220);
  *(_DWORD *)(v69 + 220) = v68;
  if (!*((void *)this + 1298) && !*((_DWORD *)this + 2634) && !*((_DWORD *)this + 2635)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1298, 220, 0, 0xFFFFFFFFLL, 8, v70, 4),
        !result))
  {
    *(_DWORD *)(*((void *)this + 33) + 224) = 0;
    uint64_t v71 = *((void *)this + 33);
    int v72 = *(_DWORD *)(v71 + 224);
    *(_DWORD *)(v71 + 224) = 0;
    *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFFu;
    uint64_t v73 = *((void *)this + 33);
    int v74 = *(_DWORD *)(v73 + 224);
    *(_DWORD *)(v73 + 224) = v72;
    if (!*((void *)this + 1320) && !*((_DWORD *)this + 2678) && !*((_DWORD *)this + 2679)) {
      goto LABEL_291;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1320, 224, 0, 0xFFFFFFFFLL, 8, v74, 4);
    if (!result)
    {
LABEL_291:
      *(_DWORD *)(*((void *)this + 33) + 228) = 0;
      uint64_t v75 = *((void *)this + 33);
      int v76 = *(_DWORD *)(v75 + 228);
      *(_DWORD *)(v75 + 228) = 0;
      *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFFu;
      uint64_t v77 = *((void *)this + 33);
      int v78 = *(_DWORD *)(v77 + 228);
      *(_DWORD *)(v77 + 228) = v76;
      if (!*((void *)this + 1342) && !*((_DWORD *)this + 2722) && !*((_DWORD *)this + 2723)) {
        goto LABEL_292;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1342, 228, 0, 0xFFFFFFFFLL, 8, v78, 4);
      if (!result)
      {
LABEL_292:
        *(_DWORD *)(*((void *)this + 33) + 232) = 0;
        uint64_t v79 = *((void *)this + 33);
        int v80 = *(_DWORD *)(v79 + 232);
        *(_DWORD *)(v79 + 232) = 0;
        *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFFu;
        uint64_t v81 = *((void *)this + 33);
        int v82 = *(_DWORD *)(v81 + 232);
        *(_DWORD *)(v81 + 232) = v80;
        if (!*((void *)this + 1364) && !*((_DWORD *)this + 2766) && !*((_DWORD *)this + 2767)) {
          goto LABEL_293;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1364, 232, 0, 0xFFFFFFFFLL, 8, v82, 4);
        if (!result)
        {
LABEL_293:
          *(_DWORD *)(*((void *)this + 33) + 236) = 0;
          uint64_t v83 = *((void *)this + 33);
          int v84 = *(_DWORD *)(v83 + 236);
          *(_DWORD *)(v83 + 236) = 0;
          *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFFu;
          uint64_t v85 = *((void *)this + 33);
          int v86 = *(_DWORD *)(v85 + 236);
          *(_DWORD *)(v85 + 236) = v84;
          if (!*((void *)this + 1386) && !*((_DWORD *)this + 2810) && !*((_DWORD *)this + 2811)) {
            goto LABEL_294;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1386, 236, 0, 0xFFFFFFFFLL, 8, v86, 4);
          if (!result)
          {
LABEL_294:
            *(_DWORD *)(*((void *)this + 33) + 240) = 0;
            uint64_t v87 = *((void *)this + 33);
            int v88 = *(_DWORD *)(v87 + 240);
            *(_DWORD *)(v87 + 240) = 0;
            *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFFu;
            uint64_t v89 = *((void *)this + 33);
            int v90 = *(_DWORD *)(v89 + 240);
            *(_DWORD *)(v89 + 240) = v88;
            if (!*((void *)this + 1408) && !*((_DWORD *)this + 2854) && !*((_DWORD *)this + 2855)) {
              goto LABEL_295;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1408, 240, 0, 0xFFFFFFFFLL, 8, v90, 4);
            if (!result)
            {
LABEL_295:
              *(_DWORD *)(*((void *)this + 33) + 244) = 0;
              uint64_t v91 = *((void *)this + 33);
              int v92 = *(_DWORD *)(v91 + 244);
              *(_DWORD *)(v91 + 244) = 0;
              *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFFu;
              uint64_t v93 = *((void *)this + 33);
              int v94 = *(_DWORD *)(v93 + 244);
              *(_DWORD *)(v93 + 244) = v92;
              if (!*((void *)this + 924) && !*((_DWORD *)this + 1886) && !*((_DWORD *)this + 1887)) {
                goto LABEL_296;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 924, 244, 0, 0xFFFFFFFFLL, 8, v94, 4);
              if (!result)
              {
LABEL_296:
                *(_DWORD *)(*((void *)this + 33) + 248) = 0;
                uint64_t v95 = *((void *)this + 33);
                int v96 = *(_DWORD *)(v95 + 248);
                *(_DWORD *)(v95 + 248) = 0;
                *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFFu;
                uint64_t v97 = *((void *)this + 33);
                int v98 = *(_DWORD *)(v97 + 248);
                *(_DWORD *)(v97 + 248) = v96;
                int v99 = (char *)this + 176 * v305;
                if (!*((void *)v99 + 946)
                  && !*((_DWORD *)this + 44 * v305 + 1930)
                  && !*((_DWORD *)this + 44 * v305 + 1931))
                {
                  goto LABEL_297;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v99 + 946, 248, 0, 0xFFFFFFFFLL, 8, v98, 4);
                if (!result)
                {
LABEL_297:
                  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
                  uint64_t v100 = *((void *)this + 33);
                  int v101 = *(_DWORD *)(v100 + 252);
                  *(_DWORD *)(v100 + 252) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFFu;
                  uint64_t v102 = *((void *)this + 33);
                  int v103 = *(_DWORD *)(v102 + 252);
                  *(_DWORD *)(v102 + 252) = v101;
                  if (!*((void *)this + 1430) && !*((_DWORD *)this + 2898) && !*((_DWORD *)this + 2899)) {
                    goto LABEL_298;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1430, 252, 0, 0xFFFFFFFFLL, 8, v103, 4);
                  if (!result)
                  {
LABEL_298:
                    *(_DWORD *)(*((void *)this + 33) + 256) = 0;
                    uint64_t v104 = *((void *)this + 33);
                    int v105 = *(_DWORD *)(v104 + 256);
                    *(_DWORD *)(v104 + 256) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFFu;
                    uint64_t v106 = *((void *)this + 33);
                    int v107 = *(_DWORD *)(v106 + 256);
                    *(_DWORD *)(v106 + 256) = v105;
                    if (!*((void *)this + 1452) && !*((_DWORD *)this + 2942) && !*((_DWORD *)this + 2943)) {
                      goto LABEL_96;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1452, 256, 0, 0xFFFFFFFFLL, 8, v107, 4);
                    if (!result)
                    {
LABEL_96:
                      *(_DWORD *)(*((void *)this + 33) + 260) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 264) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 268) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 272) = 0;
                      uint64_t v113 = *((void *)this + 33);
                      if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                      {
                        int v114 = *(_DWORD *)(v113 + 264);
                        *(_DWORD *)(v113 + 264) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 264) ^= 0x1FFFFFFu;
                        uint64_t v115 = *((void *)this + 33);
                        int v116 = *(_DWORD *)(v115 + 264);
                        *(_DWORD *)(v115 + 264) = v114;
                        int v118 = (void *)(v303 + 8);
                        uint64_t v117 = *(void *)(v303 + 8);
                        if (v302)
                        {
                          if (v117 || *(_DWORD *)(v303 + 160) || *(_DWORD *)(v303 + 164))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v303 + 8), 264, *(_DWORD *)(v303 + 68), 0xFFFFFFFFLL, 7, v116, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v119 = *((void *)this + 33);
                          int v120 = *(_DWORD *)(v119 + 260);
                          *(_DWORD *)(v119 + 260) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 260) ^= 0x1FFFFFFu;
                          uint64_t v121 = *((void *)this + 33);
                          int v122 = *(_DWORD *)(v121 + 260);
                          *(_DWORD *)(v121 + 260) = v120;
                          if (*v118 || *(_DWORD *)(v303 + 160) || *(_DWORD *)(v303 + 164))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v118, 260, *(_DWORD *)(v303 + 80), 0xFFFFFFFFLL, 7, v122, 4);
                            if (result) {
                              return result;
                            }
                          }
                          if (!v298) {
                            goto LABEL_149;
                          }
                          uint64_t v123 = *((void *)this + 33);
                          int v124 = *(_DWORD *)(v123 + 272);
                          *(_DWORD *)(v123 + 272) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 272) ^= 0x1FFFFFFu;
                          uint64_t v125 = *((void *)this + 33);
                          int v126 = *(_DWORD *)(v125 + 272);
                          *(_DWORD *)(v125 + 272) = v124;
                          if (*(void *)v301 || *(_DWORD *)(v301 + 152) || *(_DWORD *)(v301 + 156))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v301, 272, *(_DWORD *)(v301 + 56), 0xFFFFFFFFLL, 7, v126, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v127 = *((void *)this + 33);
                          int v128 = *(_DWORD *)(v127 + 268);
                          *(_DWORD *)(v127 + 268) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 268) ^= 0x1FFFFFFu;
                          uint64_t v129 = *((void *)this + 33);
                          int v130 = *(_DWORD *)(v129 + 268);
                          *(_DWORD *)(v129 + 268) = v128;
                          if (!*(void *)v301 && !*(_DWORD *)(v301 + 152) && !*(_DWORD *)(v301 + 156)) {
                            goto LABEL_149;
                          }
                          long long v131 = (void *)v301;
                          int v132 = *(_DWORD *)(v301 + 68);
                          long long v133 = this;
                        }
                        else
                        {
                          if (v117 || *(_DWORD *)(v303 + 160) || *(_DWORD *)(v303 + 164))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v303 + 8), 264, *(_DWORD *)(v303 + 60), 0xFFFFFFFFLL, 7, v116, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v151 = *((void *)this + 33);
                          int v152 = *(_DWORD *)(v151 + 272);
                          *(_DWORD *)(v151 + 272) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 272) ^= 0x1FFFFFFu;
                          uint64_t v153 = *((void *)this + 33);
                          int v154 = *(_DWORD *)(v153 + 272);
                          *(_DWORD *)(v153 + 272) = v152;
                          if (*v118 || *(_DWORD *)(v303 + 160) || *(_DWORD *)(v303 + 164))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v118, 272, *(_DWORD *)(v303 + 64), 0xFFFFFFFFLL, 7, v154, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v155 = *((void *)this + 33);
                          int v156 = *(_DWORD *)(v155 + 260);
                          *(_DWORD *)(v155 + 260) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 260) ^= 0x1FFFFFFu;
                          uint64_t v157 = *((void *)this + 33);
                          int v158 = *(_DWORD *)(v157 + 260);
                          *(_DWORD *)(v157 + 260) = v156;
                          if (*v118 || *(_DWORD *)(v303 + 160) || *(_DWORD *)(v303 + 164))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v118, 260, *(_DWORD *)(v303 + 72), 0xFFFFFFFFLL, 7, v158, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v159 = *((void *)this + 33);
                          int v160 = *(_DWORD *)(v159 + 268);
                          *(_DWORD *)(v159 + 268) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 268) ^= 0x1FFFFFFu;
                          uint64_t v161 = *((void *)this + 33);
                          int v130 = *(_DWORD *)(v161 + 268);
                          *(_DWORD *)(v161 + 268) = v160;
                          if (!*v118 && !*(_DWORD *)(v303 + 160) && !*(_DWORD *)(v303 + 164)) {
                            goto LABEL_149;
                          }
                          int v132 = *(_DWORD *)(v303 + 76);
                          long long v133 = this;
                          long long v131 = (void *)(v303 + 8);
                        }
                        int v150 = 268;
                      }
                      else
                      {
                        int v134 = *(_DWORD *)(v113 + 260);
                        *(_DWORD *)(v113 + 260) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 260) ^= 0x1FFFFFFu;
                        uint64_t v135 = *((void *)this + 33);
                        int v136 = *(_DWORD *)(v135 + 260);
                        *(_DWORD *)(v135 + 260) = v134;
                        long long v137 = (char *)this + 176 * v305;
                        if (*((void *)v137 + 66)
                          || *((_DWORD *)this + 44 * v305 + 170)
                          || *((_DWORD *)this + 44 * v305 + 171))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v137 + 66, 260, 0, 0xFFFFFFFFLL, 7, v136, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v138 = *((void *)this + 33);
                        int v139 = *(_DWORD *)(v138 + 264);
                        *(_DWORD *)(v138 + 264) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 264) ^= 0x1FFFFFFu;
                        uint64_t v140 = *((void *)this + 33);
                        int v141 = *(_DWORD *)(v140 + 264);
                        *(_DWORD *)(v140 + 264) = v139;
                        if (*(void *)(v303 + 8) || *(_DWORD *)(v303 + 160) || *(_DWORD *)(v303 + 164))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v303 + 8), 264, *(_DWORD *)(v303 + 60), 0xFFFFFFFFLL, 7, v141, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v142 = *((void *)this + 33);
                        int v143 = *(_DWORD *)(v142 + 268);
                        *(_DWORD *)(v142 + 268) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 268) ^= 0x1FFFFFFu;
                        uint64_t v144 = *((void *)this + 33);
                        int v145 = *(_DWORD *)(v144 + 268);
                        *(_DWORD *)(v144 + 268) = v143;
                        unsigned int v146 = (char *)this + 176 * v305;
                        if (*((void *)v146 + 418)
                          || *((_DWORD *)this + 44 * v305 + 874)
                          || *((_DWORD *)this + 44 * v305 + 875))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v146 + 418, 268, 0, 0xFFFFFFFFLL, 7, v145, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v147 = *((void *)this + 33);
                        int v148 = *(_DWORD *)(v147 + 272);
                        *(_DWORD *)(v147 + 272) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 272) ^= 0x1FFFFFFu;
                        uint64_t v149 = *((void *)this + 33);
                        int v130 = *(_DWORD *)(v149 + 272);
                        *(_DWORD *)(v149 + 272) = v148;
                        if (!*(void *)(v303 + 8) && !*(_DWORD *)(v303 + 160) && !*(_DWORD *)(v303 + 164)) {
                          goto LABEL_149;
                        }
                        int v132 = *(_DWORD *)(v303 + 64);
                        long long v133 = this;
                        long long v131 = (void *)(v303 + 8);
                        int v150 = 272;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)v133, v131, v150, v132, 0xFFFFFFFFLL, 7, v130, 4);
                      if (result) {
                        return result;
                      }
LABEL_149:
                      if (!(*(_DWORD *)(v15 + 76) & 0x2000 | v299))
                      {
                        *(_DWORD *)(v15 + 76) |= 0x2000u;
                        *((_DWORD *)this + v305 + 116) = 1;
                        *(_DWORD *)(*((void *)this + 33) + 276) = 0;
                        goto LABEL_217;
                      }
                      *((_DWORD *)this + v305 + 116) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 276) = 0;
                      if (!v299)
                      {
LABEL_217:
                        *(_DWORD *)(*((void *)this + 33) + 436) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 440) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 444) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 448) = 0;
                        if (!v307) {
                          goto LABEL_242;
                        }
                        uint64_t v226 = *((void *)this + 32);
                        if (v296 && v295 == 2)
                        {
                          int v227 = *(_DWORD *)(*(void *)(v226 + 8360) + 60);
                          uint64_t v228 = *((void *)this + 33);
                          int v229 = *(_DWORD *)(v228 + 436);
                          *(_DWORD *)(v228 + 436) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 436) ^= 0xFFFFFFu;
                          uint64_t v230 = *((void *)this + 33);
                          int v231 = *(_DWORD *)(v230 + 436);
                          *(_DWORD *)(v230 + 436) = v229;
                          uint64_t v232 = *(void *)(*((void *)this + 32) + 8360);
                          if (*(void *)v232 || *(_DWORD *)(v232 + 152) || *(_DWORD *)(v232 + 156))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v232, 436, v227, 0xFFFFFFFFLL, 8, v231, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v233 = *((void *)this + 33);
                          int v234 = *(_DWORD *)(v233 + 444);
                          *(_DWORD *)(v233 + 444) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 444) ^= 0xC0000000;
                          uint64_t v235 = *((void *)this + 33);
                          int v236 = *(_DWORD *)(v235 + 444);
                          *(_DWORD *)(v235 + 444) = v234;
                          uint64_t v237 = *(void *)(*((void *)this + 32) + 8360);
                          if (*(void *)v237 || *(_DWORD *)(v237 + 152) || *(_DWORD *)(v237 + 156))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v237, 444, v227, 192, 6, v236, 4);
                            if (result) {
                              return result;
                            }
                          }
                          if (v298)
                          {
                            int v238 = *(_DWORD *)(v301 + 56);
                            uint64_t v239 = *((void *)this + 33);
                            int v240 = *(_DWORD *)(v239 + 440);
                            *(_DWORD *)(v239 + 440) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 440) ^= 0xFFFFFFu;
                            uint64_t v241 = *((void *)this + 33);
                            int v242 = *(_DWORD *)(v241 + 440);
                            *(_DWORD *)(v241 + 440) = v240;
                            if (*(void *)v301 || *(_DWORD *)(v301 + 152) || *(_DWORD *)(v301 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v301, 440, v238, 0xFFFFFFFFLL, 8, v242, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v243 = *((void *)this + 33);
                            int v244 = *(_DWORD *)(v243 + 448);
                            *(_DWORD *)(v243 + 448) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 448) ^= 0xC0000000;
                            uint64_t v245 = *((void *)this + 33);
                            int v246 = *(_DWORD *)(v245 + 448);
                            *(_DWORD *)(v245 + 448) = v244;
                            if (*(void *)v301 || *(_DWORD *)(v301 + 152) || *(_DWORD *)(v301 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v301, 448, v238, 192, 6, v246, 4);
                              if (result) {
                                return result;
                              }
                            }
                          }
                          if (v294)
                          {
                            *(_DWORD *)(*((void *)this + 33) + 444) = *(_DWORD *)(*((void *)this + 33) + 444) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 84) >> 6) & 0xFFF));
                            if (!v298) {
                              goto LABEL_242;
                            }
                            uint64_t v247 = v301;
                            goto LABEL_240;
                          }
                          if (!CAHDecSalviaHevc::getSWRStride(this, *(unsigned __int16 *)(v15 + 148)- *(unsigned __int16 *)(v15 + 144)+ 1, *(_DWORD *)(v5 + 23176 * v309 + 3636), *(_DWORD *)(v5 + 23176 * v309 + 3640), *(_DWORD *)(v5 + 23176 * v309 + 22852)))
                          {
                            *(_DWORD *)(*((void *)this + 33) + 444) = *(_DWORD *)(*((void *)this + 33) + 444) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 2956) >> 6) & 0xFFF));
                            if (!v298)
                            {
LABEL_242:
                              if (*v48)
                              {
                                unint64_t v249 = 0;
                                uint64_t v250 = v6 + 9856 * v4;
                                unsigned __int16 v251 = *(_WORD *)(v250 + 56) + 1;
                                uint64_t v252 = *((void *)this + 33);
                                *(_WORD *)(v252 + 452) = v251;
                                uint64_t v253 = v250 + 9676;
                                do
                                {
                                  *(_WORD *)(v252 + 456 + 2 * v249) = *(_DWORD *)(v253 + 4 * v249);
                                  BOOL v254 = v249++ >= v251;
                                }
                                while (!v254);
                                unint64_t v255 = 0;
                                uint64_t v256 = v6 + 9856 * v4;
                                unsigned __int16 v257 = *(_WORD *)(v256 + 60) + 1;
                                *(_WORD *)(v252 + 454) = v257;
                                uint64_t v258 = v256 + 9760;
                                uint64_t v259 = v252 + 498;
                                do
                                {
                                  uint64_t result = 0;
                                  *(_WORD *)(v259 + 2 * v255) = *(_DWORD *)(v258 + 4 * v255);
                                  BOOL v254 = v255++ >= v257;
                                }
                                while (!v254);
                              }
                              else
                              {
                                uint64_t result = 0;
                                uint64_t v262 = *((void *)this + 33);
                                *(_DWORD *)(v262 + 452) = 65537;
                                *(_WORD *)(v262 + 456) = 0;
                                uint64_t v263 = v5 + 23176 * v309;
                                *(_WORD *)(v262 + 458) = *(_DWORD *)(v263 + 22880);
                                *(_WORD *)(v262 + 498) = 0;
                                *(_WORD *)(v262 + 500) = *(_DWORD *)(v263 + 22888);
                              }
                              return result;
                            }
                            goto LABEL_286;
                          }
                          return 0xFFFFFFFFLL;
                        }
                        int v260 = *(unsigned __int8 *)(v226 + 3004);
                        if (*(unsigned char *)(v226 + 3004))
                        {
                          int v261 = *(_DWORD *)(v226 + 3016);
                          int v260 = *(_DWORD *)(v226 + 3020);
                        }
                        else
                        {
                          int v261 = 0;
                        }
                        uint64_t v264 = *(void *)(v226 + 8360);
                        int v265 = *(_DWORD *)(v264 + 52);
                        int v266 = v265 + v261;
                        if (__CFADD__(v265, v261))
                        {
                          int v267 = 1;
                        }
                        else
                        {
                          int v268 = *(_DWORD *)(v264 + 56);
                          int v269 = v268 + v260;
                          if (!__CFADD__(v268, v260))
                          {
                            uint64_t v274 = *((void *)this + 33);
                            int v275 = *(_DWORD *)(v274 + 436);
                            *(_DWORD *)(v274 + 436) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 436) ^= 0xFFFFFFu;
                            uint64_t v276 = *((void *)this + 33);
                            int v277 = *(_DWORD *)(v276 + 436);
                            *(_DWORD *)(v276 + 436) = v275;
                            uint64_t v278 = *(void *)(*((void *)this + 32) + 8360);
                            if (*(void *)v278 || *(_DWORD *)(v278 + 152) || *(_DWORD *)(v278 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v278, 436, v266, 0xFFFFFFFFLL, 8, v277, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v279 = *((void *)this + 33);
                            int v280 = *(_DWORD *)(v279 + 440);
                            *(_DWORD *)(v279 + 440) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 440) ^= 0xFFFFFFu;
                            uint64_t v281 = *((void *)this + 33);
                            int v282 = *(_DWORD *)(v281 + 440);
                            *(_DWORD *)(v281 + 440) = v280;
                            uint64_t v283 = *(void *)(*((void *)this + 32) + 8360);
                            if (*(void *)v283 || *(_DWORD *)(v283 + 152) || *(_DWORD *)(v283 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v283, 440, v269, 0xFFFFFFFFLL, 8, v282, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v284 = *((void *)this + 33);
                            int v285 = *(_DWORD *)(v284 + 444);
                            *(_DWORD *)(v284 + 444) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 444) ^= 0xC0000000;
                            uint64_t v286 = *((void *)this + 33);
                            int v287 = *(_DWORD *)(v286 + 444);
                            *(_DWORD *)(v286 + 444) = v285;
                            uint64_t v288 = *(void *)(*((void *)this + 32) + 8360);
                            if (*(void *)v288 || *(_DWORD *)(v288 + 152) || *(_DWORD *)(v288 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v288, 444, v266, 192, 6, v287, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v289 = *((void *)this + 33);
                            int v290 = *(_DWORD *)(v289 + 448);
                            *(_DWORD *)(v289 + 448) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 448) ^= 0xC0000000;
                            uint64_t v291 = *((void *)this + 33);
                            int v292 = *(_DWORD *)(v291 + 448);
                            *(_DWORD *)(v291 + 448) = v290;
                            uint64_t v293 = *(void *)(*((void *)this + 32) + 8360);
                            if (*(void *)v293 || *(_DWORD *)(v293 + 152) || *(_DWORD *)(v293 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v293, 448, v269, 192, 6, v292, 4);
                              if (result) {
                                return result;
                              }
                            }
                            if (v294)
                            {
                              *(_DWORD *)(*((void *)this + 33) + 444) = *(_DWORD *)(*((void *)this + 33) + 444) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 76) >> 6) & 0xFFF));
                              uint64_t v247 = *(void *)(*((void *)this + 32) + 8360);
LABEL_240:
                              v248 = (_DWORD *)(v247 + 80);
LABEL_241:
                              *(_DWORD *)(*((void *)this + 33) + 448) = *(_DWORD *)(*((void *)this + 33) + 448) & 0xFFFF8003 | (4 * ((*v248 >> 6) & 0x1FFF));
                              goto LABEL_242;
                            }
                            if (!CAHDecSalviaHevc::getSWRStride(this, *(unsigned __int16 *)(v15 + 148)- *(unsigned __int16 *)(v15 + 144)+ 1, *(_DWORD *)(v5 + 23176 * v309 + 3636), *(_DWORD *)(v5 + 23176 * v309 + 3640), *(_DWORD *)(v5 + 23176 * v309 + 22852)))
                            {
                              *(_DWORD *)(*((void *)this + 33) + 444) = *(_DWORD *)(*((void *)this + 33) + 444) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 2956) >> 6) & 0xFFF));
LABEL_286:
                              v248 = (_DWORD *)((char *)this + 11828);
                              goto LABEL_241;
                            }
                            return 0xFFFFFFFFLL;
                          }
                          int v267 = 2;
                        }
                        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 136315394;
                          *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                          __int16 v312 = 1024;
                          int v313 = v267;
                          v270 = &_os_log_internal;
                          v271 = "AppleAVD: %s(): failKind = %d";
                          v272 = buf;
                          uint32_t v273 = 18;
LABEL_262:
                          _os_log_impl(&dword_223977000, v270, OS_LOG_TYPE_DEFAULT, v271, v272, v273);
                        }
                        return 0xFFFFFFFFLL;
                      }
                      uint64_t v162 = 0;
                      uint64_t v163 = 4 * v299;
                      long long v164 = (uint64_t *)v316;
                      v306 = (void **)v315;
                      v304 = (void **)v314;
                      int v300 = (v299 << 28) - 0x10000000;
                      while (1)
                      {
                        uint64_t v165 = *v164;
                        if (!*v164 || !*(void *)(v165 + 48)) {
                          return 0xFFFFFFFFLL;
                        }
                        int v166 = v308;
                        if (v308)
                        {
                          uint64_t v167 = *(unsigned int *)(v165 + 44);
                          *(void *)buf = 0;
                          if (((*(uint64_t (**)(void, uint64_t, unsigned char *))(**((void **)this + 32) + 304))(*((void *)this + 32), v167, buf) & 1) == 0)
                          {
                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                              return 0xFFFFFFFFLL;
                            }
                            __int16 v310 = 0;
                            v270 = &_os_log_internal;
                            v271 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
                            v272 = (uint8_t *)&v310;
                            uint32_t v273 = 2;
                            goto LABEL_262;
                          }
                          *(void *)(v165 + 48) = *(void *)buf + 8;
                          int v166 = 0x2000000;
                        }
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) = 0;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) = *(_DWORD *)(*((void *)this + 33)
                                                                                     + v162
                                                                                     + 276) & 0xFFFFFFF | v300;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) &= 0xF3FFFFFF;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) = *(_DWORD *)(*((void *)this + 33)
                                                                                     + v162
                                                                                     + 276) & 0xFDFFFFFF | v166;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) |= 0x1000000u;
                        int v168 = v297 - *(_DWORD *)(v165 + 12);
                        int v169 = v168 & 0x1FFFF;
                        if (v168 < -32768) {
                          int v169 = 98304;
                        }
                        if (v168 <= 0x8000) {
                          int v170 = v169;
                        }
                        else {
                          int v170 = 0x8000;
                        }
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) = *(_DWORD *)(*((void *)this + 33)
                                                                                     + v162
                                                                                     + 276) & 0xFFFE0000 | v170;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 276) = *(_DWORD *)(*((void *)this + 33)
                                                                                     + v162
                                                                                     + 276) & 0xFFFDFFFF | ((*(_DWORD *)(v165 + 20) == 2) << 17);
                        *(_DWORD *)(*((void *)this + 33) + v162 + 308) = 0;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 340) = 0;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 372) = 0;
                        *(_DWORD *)(*((void *)this + 33) + v162 + 404) = 0;
                        uint64_t v171 = *((void *)this + 33);
                        if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                        {
                          int v172 = v162 + 340;
                          uint64_t v173 = v171 + v162;
                          int v174 = *(_DWORD *)(v173 + 340);
                          *(_DWORD *)(v173 + 340) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v162 + 340) ^= 0x1FFFFFFu;
                          uint64_t v175 = *((void *)this + 33) + v162;
                          int v176 = *(_DWORD *)(v175 + 340);
                          *(_DWORD *)(v175 + 340) = v174;
                          uint64_t v177 = *(uint64_t **)(v165 + 48);
                          uint64_t v178 = *v177;
                          if (v302)
                          {
                            if (v178 || *((_DWORD *)v177 + 38) || *((_DWORD *)v177 + 39))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v177, v172, *((_DWORD *)v177 + 15), 0xFFFFFFFFLL, 7, v176, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v179 = *((void *)this + 33) + v162;
                            int v180 = *(_DWORD *)(v179 + 308);
                            *(_DWORD *)(v179 + 308) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v162 + 308) ^= 0x1FFFFFFu;
                            uint64_t v181 = *((void *)this + 33) + v162;
                            int v182 = *(_DWORD *)(v181 + 308);
                            *(_DWORD *)(v181 + 308) = v180;
                            uint64_t v183 = *(void *)(v165 + 48);
                            if (*(void *)v183 || *(_DWORD *)(v183 + 152) || *(_DWORD *)(v183 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v183, (int)v162 + 308, *(_DWORD *)(v183 + 72), 0xFFFFFFFFLL, 7, v182, 4);
                              if (result) {
                                return result;
                              }
                            }
                            if (v298)
                            {
                              uint64_t v184 = *((void *)this + 33) + v162;
                              int v185 = *(_DWORD *)(v184 + 404);
                              *(_DWORD *)(v184 + 404) = 0;
                              *(_DWORD *)(*((void *)this + 33) + v162 + 404) ^= 0x1FFFFFFu;
                              uint64_t v186 = *((void *)this + 33) + v162;
                              int v187 = *(_DWORD *)(v186 + 404);
                              *(_DWORD *)(v186 + 404) = v185;
                              if (*(void *)v301 || *(_DWORD *)(v301 + 152) || *(_DWORD *)(v301 + 156))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v301, (int)v162 + 404, *(_DWORD *)(v301 + 56), 0xFFFFFFFFLL, 7, v187, 4);
                                if (result) {
                                  return result;
                                }
                              }
                              uint64_t v188 = *((void *)this + 33) + v162;
                              int v189 = *(_DWORD *)(v188 + 372);
                              *(_DWORD *)(v188 + 372) = 0;
                              *(_DWORD *)(*((void *)this + 33) + v162 + 372) ^= 0x1FFFFFFu;
                              uint64_t v190 = *((void *)this + 33) + v162;
                              int v191 = *(_DWORD *)(v190 + 372);
                              *(_DWORD *)(v190 + 372) = v189;
                              if (*(void *)v301 || *(_DWORD *)(v301 + 152) || *(_DWORD *)(v301 + 156))
                              {
                                int v192 = v162 + 372;
                                uint64_t v193 = v301;
LABEL_214:
                                int v212 = *(_DWORD *)(v193 + 68);
LABEL_215:
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v193, v192, v212, 0xFFFFFFFFLL, 7, v191, 4);
                                if (result) {
                                  return result;
                                }
                              }
                            }
                          }
                          else
                          {
                            if (v178 || *((_DWORD *)v177 + 38) || *((_DWORD *)v177 + 39))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v177, v172, *((_DWORD *)v177 + 13), 0xFFFFFFFFLL, 7, v176, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v213 = *((void *)this + 33) + v162;
                            int v214 = *(_DWORD *)(v213 + 404);
                            *(_DWORD *)(v213 + 404) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v162 + 404) ^= 0x1FFFFFFu;
                            uint64_t v215 = *((void *)this + 33) + v162;
                            int v216 = *(_DWORD *)(v215 + 404);
                            *(_DWORD *)(v215 + 404) = v214;
                            uint64_t v217 = *(void *)(v165 + 48);
                            if (*(void *)v217 || *(_DWORD *)(v217 + 152) || *(_DWORD *)(v217 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v217, (int)v162 + 404, *(_DWORD *)(v217 + 56), 0xFFFFFFFFLL, 7, v216, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v218 = *((void *)this + 33) + v162;
                            int v219 = *(_DWORD *)(v218 + 308);
                            *(_DWORD *)(v218 + 308) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v162 + 308) ^= 0x1FFFFFFu;
                            uint64_t v220 = *((void *)this + 33) + v162;
                            int v221 = *(_DWORD *)(v220 + 308);
                            *(_DWORD *)(v220 + 308) = v219;
                            uint64_t v222 = *(void *)(v165 + 48);
                            if (*(void *)v222 || *(_DWORD *)(v222 + 152) || *(_DWORD *)(v222 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v222, (int)v162 + 308, *(_DWORD *)(v222 + 64), 0xFFFFFFFFLL, 7, v221, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v223 = *((void *)this + 33) + v162;
                            int v224 = *(_DWORD *)(v223 + 372);
                            *(_DWORD *)(v223 + 372) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v162 + 372) ^= 0x1FFFFFFu;
                            uint64_t v225 = *((void *)this + 33) + v162;
                            int v191 = *(_DWORD *)(v225 + 372);
                            *(_DWORD *)(v225 + 372) = v224;
                            uint64_t v193 = *(void *)(v165 + 48);
                            if (*(void *)v193 || *(_DWORD *)(v193 + 152) || *(_DWORD *)(v193 + 156))
                            {
                              int v192 = v162 + 372;
                              goto LABEL_214;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v194 = v171 + v162;
                          int v195 = *(_DWORD *)(v194 + 308);
                          *(_DWORD *)(v194 + 308) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v162 + 308) ^= 0x1FFFFFFu;
                          uint64_t v196 = *((void *)this + 33) + v162;
                          int v197 = *(_DWORD *)(v196 + 308);
                          *(_DWORD *)(v196 + 308) = v195;
                          int v198 = *v306;
                          if (**v306 || *((_DWORD *)v198 + 38) || *((_DWORD *)v198 + 39))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v198, (int)v162 + 308, 0, 0xFFFFFFFFLL, 7, v197, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v199 = *((void *)this + 33) + v162;
                          int v200 = *(_DWORD *)(v199 + 340);
                          *(_DWORD *)(v199 + 340) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v162 + 340) ^= 0x1FFFFFFu;
                          uint64_t v201 = *((void *)this + 33) + v162;
                          int v202 = *(_DWORD *)(v201 + 340);
                          *(_DWORD *)(v201 + 340) = v200;
                          uint64_t v203 = *(void *)(v165 + 48);
                          if (*(void *)v203 || *(_DWORD *)(v203 + 152) || *(_DWORD *)(v203 + 156))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v203, (int)v162 + 340, *(_DWORD *)(v203 + 52), 0xFFFFFFFFLL, 7, v202, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v204 = *((void *)this + 33) + v162;
                          int v205 = *(_DWORD *)(v204 + 372);
                          *(_DWORD *)(v204 + 372) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v162 + 372) ^= 0x1FFFFFFu;
                          uint64_t v206 = *((void *)this + 33) + v162;
                          int v207 = *(_DWORD *)(v206 + 372);
                          *(_DWORD *)(v206 + 372) = v205;
                          uint64_t v208 = *v304;
                          if (**v304 || *((_DWORD *)v208 + 38) || *((_DWORD *)v208 + 39))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v208, (int)v162 + 372, 0, 0xFFFFFFFFLL, 7, v207, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v209 = *((void *)this + 33) + v162;
                          int v210 = *(_DWORD *)(v209 + 404);
                          *(_DWORD *)(v209 + 404) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v162 + 404) ^= 0x1FFFFFFu;
                          uint64_t v211 = *((void *)this + 33) + v162;
                          int v191 = *(_DWORD *)(v211 + 404);
                          *(_DWORD *)(v211 + 404) = v210;
                          uint64_t v193 = *(void *)(v165 + 48);
                          if (*(void *)v193 || *(_DWORD *)(v193 + 152) || *(_DWORD *)(v193 + 156))
                          {
                            int v192 = v162 + 404;
                            int v212 = *(_DWORD *)(v193 + 56);
                            goto LABEL_215;
                          }
                        }
                        v162 += 4;
                        ++v164;
                        ++v304;
                        ++v306;
                        if (v163 == v162) {
                          goto LABEL_217;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecSalviaHevc::getSWRStride(CAHDecSalviaHevc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1478) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 2957) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecSalviaHevc::getTileStartCTU(CAHDecSalviaHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 452);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecSalviaHevc::getTileEndCTU(CAHDecSalviaHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 452);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecSalviaHevc::getTileIdxAbove(CAHDecSalviaHevc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 452);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecSalviaHevc::populateAvdWork(CAHDecSalviaHevc *this, unsigned int a2)
{
  v118[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v4 = *((void *)this + 33);
  int v5 = *(_DWORD *)(v3 + 8320);
  int v6 = *(_DWORD *)(v3 + 8324);
  uint64_t v7 = *(void *)(v3 + 8280);
  uint64_t v8 = *(void *)(v3 + 8288);
  uint64_t v84 = *(void *)(v3 + 8296);
  int v9 = *(_DWORD *)(v3 + 9036);
  unsigned int v10 = *(_DWORD *)(v3 + 3068);
  int v11 = *(_DWORD *)(v3 + 3072);
  uint64_t v101 = v4 + 213740;
  v118[0] = v4 + 213740;
  v118[1] = v4 + 303852;
  uint64_t v81 = v4 + 303852;
  uint64_t v82 = v4;
  uint64_t v117 = 0;
  uint64_t v12 = v7 + 23176 * v5;
  unsigned int v13 = *(_DWORD *)(v12 + 22888);
  int v14 = *(unsigned __int16 *)(v4 + 452);
  int v15 = *(unsigned __int16 *)(v4 + 454);
  if (v9)
  {
    if (*(unsigned char *)(v8 + 9856 * v6 + 53)) {
      BOOL v17 = v13 > 1;
    }
    else {
      BOOL v17 = 0;
    }
    int v16 = v17 && v11 == 0;
  }
  else
  {
    int v16 = 0;
  }
  unsigned int v99 = v15 * v14;
  if ((v9 & 2) != 0 && *(unsigned char *)(v8 + 9856 * v6 + 52))
  {
    if (*(unsigned char *)(v8 + 9856 * v6 + 53)) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v99 > 1;
    }
    int v21 = v19 && v11 == 0;
    int v110 = v21;
  }
  else
  {
    int v110 = 0;
  }
  int v86 = (unsigned int *)(v12 + 22880);
  if ((v9 & 0x20) != 0 && !*(unsigned char *)(v8 + 9856 * v6 + 53))
  {
    if (*(unsigned char *)(v8 + 9856 * v6 + 52)) {
      BOOL v67 = 0;
    }
    else {
      BOOL v67 = v10 > 1;
    }
    int v69 = v67 && v11 == 0;
    int v96 = v69;
  }
  else
  {
    int v96 = 0;
  }
  LODWORD(v22) = 0;
  unsigned int v112 = *v86;
  if ((v9 & 4) != 0) {
    int v23 = v16;
  }
  else {
    int v23 = 1;
  }
  unsigned int v90 = *(_DWORD *)(v12 + 22888);
  if ((v23 | v110))
  {
    uint64_t v24 = v101;
  }
  else
  {
    uint64_t v24 = v101;
    if ((v96 & 1) == 0)
    {
      uint64_t v22 = *(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & 1;
      uint64_t v24 = v118[v22];
    }
  }
  uint64_t v111 = 0;
  BOOL v102 = 0;
  int v89 = 0;
  uint64_t v85 = 0;
  int v106 = 0;
  uint64_t v109 = 0;
  int v25 = 0;
  uint64_t v26 = 0;
  unsigned int v113 = 0;
  int v27 = 0;
  uint64_t v28 = 0;
  uint64_t v108 = 0x2E8BA2E8BA2E8BA3 * ((v24 - v101) >> 2);
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v29 = v8 + 9856 * v6;
  unint64_t v30 = (unsigned char *)(v29 + 52);
  int v94 = (unsigned char *)(v29 + 53);
  if (v16) {
    int v31 = 12;
  }
  else {
    int v31 = 4;
  }
  int v92 = v31;
  unsigned int v95 = a2 - 1;
  unsigned int v87 = v13 - 2;
  unsigned int v88 = v13 - 1;
  uint64_t v97 = v82 + 2884;
  int v103 = v30;
  int v98 = v16;
  do
  {
    if (*v30) {
      int v32 = 1;
    }
    else {
      int v32 = v16;
    }
    if (v32 != 1)
    {
      unsigned int v35 = 1;
LABEL_48:
      uint64_t v36 = 0;
      int v91 = 0;
      uint64_t v37 = v84 + 2360 * v111;
      uint64_t v93 = (void *)(v37 + 1904);
      uint64_t v100 = (unsigned int *)(v37 + 36);
      int v105 = (unsigned char *)(v37 + 32);
      uint64_t v107 = v35;
      while (1)
      {
        if (!(v36 | v111))
        {
          uint64_t v41 = v26;
          *(_WORD *)(v24 + 4) = 0;
          *(_WORD *)(v24 + 6) = v22;
          *(_DWORD *)(v24 + 8) = 0;
          *(_WORD *)(v24 + 12) = 0;
          int v27 = *(_DWORD *)(v97 + 352 * v111);
          if (!(*(unsigned int (**)(void))(**((void **)this + 32) + 448))()) {
            return 0xFFFFFFFFLL;
          }
          int v42 = *v100;
          *(_DWORD *)(v24 + 28) = *v100;
          *(_DWORD *)(v24 + 32) = v42;
          unsigned int v113 = 0;
          *(_DWORD *)(v24 + 40) = (*(uint64_t (**)(CAHDecSalviaHevc *, uint64_t, void))(*(void *)this + 72))(this, v28, v112);
          __int16 v43 = 271;
          goto LABEL_141;
        }
        if (v36)
        {
          int v104 = v27;
          int v38 = *(_DWORD *)(*v93 + 4 * v36 - 4) + 1;
          if (*v103)
          {
            if (*v94)
            {
              unsigned int v39 = *v86;
              unsigned int v40 = (v39 + v26) / v39;
              v38 += v91;
              if (v40 >= *(unsigned __int16 *)(*((void *)this + 33) + 2 * (HIDWORD(v85) + 1) + 498))
              {
                uint64_t v26 = (*(uint64_t (**)(CAHDecSalviaHevc *, void, void))(*(void *)this + 64))(this, (v28 + 1), v112);
                int v91 = 0;
                int v25 = v92;
              }
              else
              {
                uint64_t v26 = v89 + v40 * v39;
                if (!v98)
                {
                  int v91 = v38;
                  int v16 = 0;
                  goto LABEL_142;
                }
                int v91 = 0;
                if (v40 == v85 + 1) {
                  int v25 = 72;
                }
                else {
                  int v25 = 8;
                }
              }
            }
            else
            {
              uint64_t v26 = (*(uint64_t (**)(CAHDecSalviaHevc *, void, void))(*(void *)this + 64))(this, (v28 + 1), v112);
              int v25 = 4;
            }
          }
          else if (v98)
          {
            uint64_t v26 = (*v86 + v26) / *v86 * *v86;
            int v25 = 8;
          }
          uint64_t v48 = (void *)v115;
          if (*(void *)v115 || *(_DWORD *)(v115 + 152) || *(_DWORD *)(v115 + 156))
          {
            int v49 = v22;
            uint64_t v22 = v26;
            int v50 = v114;
            if ((v114 + (unint64_t)v113) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1533;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v50 = v114;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v48, 44 * (int)v108 + 213760, v113 + v50, 0xFFFFFFFFLL, 0, -1, 4);
            uint64_t v26 = v22;
            LODWORD(v22) = v49;
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v24 + 24) = v38;
          v113 += v38;
          int v16 = v98;
          int v27 = v104;
        }
        else
        {
          unsigned int v44 = (void *)v115;
          if (*(void *)v115 || *(_DWORD *)(v115 + 152) || *(_DWORD *)(v115 + 156))
          {
            int v45 = v114;
            if ((v114 + (unint64_t)v113) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1462;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v45 = v114;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v44, 44 * (int)v108 + 213760, v113 + v45, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v24 + 24) = v27 - v113;
          int v27 = *(_DWORD *)(v97 + 352 * v111);
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t *))(**((void **)this + 32) + 448))(*((void *)this + 32), v111, &v115, &v114))return 0xFFFFFFFFLL; {
          uint64_t v26 = *v100;
          }
          if (*v105) {
            int v25 = 2;
          }
          else {
            int v25 = 258;
          }
          if (v16 && v26 % v112 == v89)
          {
            unsigned int v113 = 0;
            if (v26 / v112 == v85 + 1) {
              int v47 = 72;
            }
            else {
              int v47 = 8;
            }
            v25 |= v47;
          }
          else
          {
            unsigned int v113 = 0;
          }
        }
        unsigned int v51 = v28 + 1;
        uint64_t v41 = v26;
        if ((int)v28 + 1 < v99)
        {
          int v52 = (*(uint64_t (**)(CAHDecSalviaHevc *, void, void))(*(void *)this + 64))(this, (v28 + 1), v112);
          LODWORD(v26) = v41;
          int v53 = v92;
          if (v41 != v52) {
            int v53 = 0;
          }
          v25 |= v53;
        }
        *(_WORD *)(v24 + 16) = v25;
        if (v109 == v95) {
          *(_WORD *)(v24 + 18) |= 2u;
        }
        if (v28 == v99 - 1) {
          *(_WORD *)(v24 + 18) |= 4u;
        }
        int v54 = v110;
        if (v28 != v99 - 2) {
          int v54 = 0;
        }
        if (v54 == 1) {
          *(_WORD *)(v24 + 18) |= 4u;
        }
        if (v16
          && ((int v55 = *(unsigned __int16 *)(v24 + 10), v90 > 1) ? (v56 = v87 == v55) : (v56 = 0),
              !v56 ? (int v57 = 0) : (int v57 = 1),
              v88 == v55 || v57))
        {
          *(_WORD *)(v24 + 18) |= 8u;
          if ((v25 & 4) != 0)
          {
LABEL_114:
            int v58 = HIDWORD(v109);
            if (*v103 && *v94)
            {
              int v59 = (unsigned __int16 *)(*((void *)this + 33) + 452);
              unsigned int v60 = *v59;
              HIDWORD(v85) = v51 / v60;
              int v89 = v59[v51 % v60 + 2];
              LODWORD(v85) = v59[v51 / v60 + 23];
              BOOL v102 = ((v22 + v85) & 1) == 0;
            }
            uint64_t v28 = (v28 + 1);
            goto LABEL_118;
          }
        }
        else if ((v25 & 4) != 0)
        {
          goto LABEL_114;
        }
        int v58 = HIDWORD(v109);
LABEL_118:
        if ((v25 & 0x44) != 0)
        {
          int v61 = (*(uint64_t (**)(CAHDecSalviaHevc *, uint64_t))(*(void *)this + 80))(this, v28);
          LODWORD(v26) = v41;
          if (v58 <= v61) {
            v25 |= 0x20u;
          }
        }
        if (!v36)
        {
          if (!*v105) {
            int v58 = v28;
          }
          int v62 = v106;
          if (!*v105) {
            int v62 = v26;
          }
          int v106 = v62;
        }
        if ((v25 & 0x44) != 0)
        {
          unsigned int v63 = *(unsigned __int16 *)(*((void *)this + 33) + 452);
          if (v58 / v63 + 1 == v28 / v63) {
            v25 |= 0x10u;
          }
        }
        int v64 = (v102 + (v26 / v112)) & 1;
        if (!v16) {
          int v64 = v22;
        }
        if (v110) {
          BOOL v65 = v28 & 1;
        }
        else {
          BOOL v65 = v64;
        }
        ++*((_DWORD *)&v118[-1] + v22);
        v118[v22] += 44;
        char v66 = v96 ^ 1;
        if (v36) {
          char v66 = 1;
        }
        HIDWORD(v109) = v58;
        if ((v66 & 1) == 0 && !*v105) {
          BOOL v65 = !v65;
        }
        uint64_t v24 = v118[v65];
        uint64_t v108 = 0x2E8BA2E8BA2E8BA3 * ((v24 - v101) >> 2);
        *(_WORD *)(v24 + 4) = *((_DWORD *)&v118[-1] + v65);
        *(_WORD *)(v24 + 6) = v65;
        *(_WORD *)(v24 + 8) = v111;
        *(_WORD *)(v24 + 10) = v26 / v112;
        *(_WORD *)(v24 + 12) = v28;
        *(_DWORD *)(v24 + 28) = v26;
        *(_DWORD *)(v24 + 32) = v106;
        *(_DWORD *)(v24 + 40) = (*(uint64_t (**)(CAHDecSalviaHevc *, uint64_t, void))(*(void *)this + 72))(this, v28, v112);
        __int16 v43 = v25;
        LODWORD(v109) = v111;
        LODWORD(v22) = v65;
LABEL_141:
        *(_WORD *)(v24 + 14) = v43;
        uint64_t v26 = v41;
LABEL_142:
        if (v107 == ++v36) {
          goto LABEL_45;
        }
      }
    }
    int v33 = *(_DWORD *)(v84 + 2360 * v111 + 1896);
    BOOL v34 = __CFADD__(v33, 1);
    unsigned int v35 = v33 + 1;
    if (!v34) {
      goto LABEL_48;
    }
LABEL_45:
    ++v111;
    unint64_t v30 = v103;
  }
  while (v111 != a2);
  int v70 = (void *)v115;
  if (!*(void *)v115 && !*(_DWORD *)(v115 + 152) && !*(_DWORD *)(v115 + 156)) {
    goto LABEL_164;
  }
  int v71 = v114;
  if ((v114 + (unint64_t)v113) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "populateAvdWork";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 1623;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
    int v71 = v114;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v70, 44 * (int)v108 + 213760, v113 + v71, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result)
  {
LABEL_164:
    *(_DWORD *)(v24 + 24) = v27 - v113;
    *(_DWORD *)(v24 + 16) = 917519;
    ++*((_DWORD *)&v118[-1] + v22);
    if (v96)
    {
      uint64_t v72 = v101;
      buf[0] = v101;
      buf[1] = v81;
      unsigned int v73 = *(unsigned __int16 *)(v82 + 213748) + 1;
      if (v73 >= a2)
      {
        BOOL v74 = 0;
        int v76 = buf;
      }
      else
      {
        BOOL v74 = 0;
        BOOL v75 = 0;
        int v76 = buf;
        do
        {
          if (*(unsigned __int16 *)(v72 + 4) + 1 == *((_DWORD *)&v118[-1] + v74))
          {
            BOOL v75 = !v75;
            *(_DWORD *)(v72 + 36) = *(_DWORD *)(buf[v75] + 32);
          }
          else
          {
            if (v73 != *(unsigned __int16 *)(v72 + 52))
            {
              BOOL v75 = !v75;
              *(_DWORD *)(v72 + 36) = *(_DWORD *)(buf[v75] + 32);
            }
            *int v76 = v72 + 44;
          }
          BOOL v74 = v75;
          int v76 = &buf[v75];
          uint64_t v72 = *v76;
          unsigned int v73 = *(unsigned __int16 *)(*v76 + 8) + 1;
        }
        while (v73 < a2);
      }
      int v77 = *((_DWORD *)&v118[-1] + v74);
      if (*(unsigned __int16 *)(v72 + 4) + 1 != v77)
      {
        do
        {
          int v78 = *(unsigned __int16 *)(v72 + 48);
          v72 += 44;
        }
        while (v78 + 1 != v77);
        *int v76 = v72;
      }
      *(_DWORD *)(v72 + 36) = *(_DWORD *)(v72 + 40) + 1;
    }
    uint64_t result = 0;
    uint64_t v79 = *((void *)this + 33);
    __int16 v80 = WORD2(v117);
    *(_WORD *)(v79 + 28) = v117;
    *(_WORD *)(v79 + 30) = v80;
    *(_DWORD *)(v79 + 32) = 213740;
    *(_DWORD *)(v79 + 36) = 303852;
  }
  return result;
}

uint64_t CAHDecSalviaHevc::allocWorkBuf_SPS(CAHDecSalviaHevc *this, _DWORD *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 5718;
  int v5 = a2[902];
  int v6 = a2[903];
  int v7 = a2[900];
  if (v5 < (*(unsigned int (**)(CAHDecSalviaHevc *))(*(void *)this + 96))(this)
    || (unsigned int v8 = a2[903], v8 < (*(unsigned int (**)(CAHDecSalviaHevc *))(*(void *)this + 104))(this))
    || (unsigned int v9 = a2[909], v9 > (*(unsigned int (**)(CAHDecSalviaHevc *))(*(void *)this + 112))(this) - 8)
    || (unsigned int v10 = a2[910], v10 > (*(unsigned int (**)(CAHDecSalviaHevc *))(*(void *)this + 120))(this) - 8)
    || (unsigned int v17 = *v4, v18 = *v4 - 16, v18 > 0x30)
    || ((1 << v18) & 0x1000000010001) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = a2[902];
      int v12 = a2[903];
      int v13 = a2[909];
      int v14 = a2[910];
      unsigned int v15 = *v4;
      int v49 = 136316418;
      int v50 = "allocWorkBuf_SPS";
      __int16 v51 = 1024;
      int v52 = v11;
      __int16 v53 = 1024;
      *(_DWORD *)int v54 = v12;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v13;
      __int16 v55 = 1024;
      int v56 = v14;
      __int16 v57 = 1024;
      unsigned int v58 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported bit stream w %d h %d bd %d %d CtbSizeY %d\n", (uint8_t *)&v49, 0x2Au);
    }
    return 0xFFFFFFFFLL;
  }
  int v19 = v5 + 31;
  if (v5 < -31) {
    int v19 = v5 + 62;
  }
  unsigned int v20 = v19 >> 5;
  int v21 = v6 + 31;
  if (v6 < -31) {
    int v21 = v6 + 62;
  }
  unsigned int v22 = v21 >> 5;
  unsigned int v23 = 32 - __clz(v20 - 1);
  if (v20 >= 2) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  unsigned int v25 = 32 - __clz(v22 - 1);
  if (v22 >= 2) {
    char v26 = v25;
  }
  else {
    char v26 = 0;
  }
  unsigned int v27 = ((32 << (v26 + v24)) + 127) & 0xFFFFFF80;
  if (v7)
  {
    int v28 = v5 << (v7 == 3);
    int v29 = v28 + 31;
    int v30 = v28 + 62;
    if (v29 >= 0) {
      int v30 = v29;
    }
    unsigned int v31 = v30 >> 5;
    if (v7 == 1) {
      int v32 = v6 + 1;
    }
    else {
      int v32 = v6;
    }
    int v33 = v32 >> (v7 == 1);
    int v35 = v33 + 15;
    BOOL v34 = v33 < -15;
    int v36 = v33 + 30;
    if (!v34) {
      int v36 = v35;
    }
    unsigned int v37 = v36 >> 4;
    if (v31 > 1)
    {
      unsigned int v38 = 32 - __clz(v31 - 1);
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v37 = 0;
  }
  LOBYTE(v38) = 0;
LABEL_32:
  unsigned int v39 = 32 - __clz(v37 - 1);
  if (v37 >= 2) {
    char v40 = v39;
  }
  else {
    char v40 = 0;
  }
  unsigned int v41 = ((8 << (v40 + v38)) + 127) & 0xFFFFFF80;
  if (!v7) {
    unsigned int v41 = 0;
  }
  *((_DWORD *)this + 2948) = v27;
  *((_DWORD *)this + 2949) = v41;
  *((void *)this + 1475) = 0;
  unsigned int v42 = (v17 & 0xFFFFFFF0) * (v17 >> 4) * v4[2];
  *((_DWORD *)this + 2954) = v42;
  *((_DWORD *)this + 2953) = v4[4] * v42;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_44:
    uint64_t v46 = 0;
    while (1)
    {
      uint64_t v47 = *((unsigned int *)this + 2953);
      if (v47)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecSalviaHevc *)((char *)this + v46 + 7568), v47, 7, 1, 0))break; {
      }
        }
      uint64_t result = 0;
      v46 += 176;
      if (v46 == 2816) {
        return result;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 1884;
    __int16 v53 = 2080;
    *(void *)int v54 = "MvColo";
    uint64_t v48 = &_os_log_internal;
  }
  else
  {
    uint64_t v43 = 528;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 2948);
      if (v44
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecSalviaHevc *)((char *)this + v43), v44, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_56;
        }
        int v49 = 136315650;
        int v50 = "allocWorkBuf_SPS";
        __int16 v51 = 1024;
        int v52 = 1875;
        __int16 v53 = 2080;
        *(void *)int v54 = "HdrY";
        uint64_t v48 = &_os_log_internal;
        goto LABEL_55;
      }
      uint64_t v45 = *((unsigned int *)this + 2949);
      if (v45)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecSalviaHevc *)((char *)this + v43 + 2816), v45, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 3344) {
        goto LABEL_44;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 1876;
    __int16 v53 = 2080;
    *(void *)int v54 = "HdrC";
    uint64_t v48 = &_os_log_internal;
  }
LABEL_55:
  _os_log_impl(&dword_223977000, v48, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v49, 0x1Cu);
LABEL_56:
  (*(void (**)(CAHDecSalviaHevc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecSalviaHevc::allocWorkBuf_PPS(CAHDecSalviaHevc *this, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  unsigned int v4 = (a2[909] + 9) & 0xFFFFFFFE;
  unsigned int v5 = (a2[910] + 9) & 0xFFFFFFFE;
  if (v4 <= v5) {
    unsigned int v6 = (a2[910] + 9) & 0xFFFFFFFE;
  }
  else {
    unsigned int v6 = (a2[909] + 9) & 0xFFFFFFFE;
  }
  int v7 = a2[900];
  if (v6 == 10) {
    int v8 = 40;
  }
  else {
    int v8 = 48;
  }
  if (v6 == 8) {
    int v8 = 32;
  }
  char v9 = v7 != 3;
  if (*((unsigned char *)a3 + 52))
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = a2[1106] + a2[1105];
    uint64_t v16 = a3[14];
    int v17 = a2[5718];
    unsigned int v18 = a2[902];
    do
    {
      int v19 = a3[v10 + 17] + 1;
      int v20 = v19 * v17;
      if (v19 * v17 + v13 > v18) {
        int v20 = v18 - v13;
      }
      if (v11 <= v20) {
        int v11 = v20;
      }
      if (v7)
      {
        unsigned int v21 = (v19 << v15) >> v9;
        if (v16 == v10) {
          unsigned int v21 = (((v18 >> 3) - (v14 << v15)) >> v9) + 1;
        }
        v12 += ((v21 + 2 * (v10 != 0)) * v8 + 127) & 0xFFFFFF80;
      }
      v13 += v20;
      v14 += v19;
      ++v10;
    }
    while (v16 + 1 != v10);
  }
  else
  {
    unsigned int v18 = a2[902];
    int v22 = (v8 + v8 * (v18 >> 3 >> v9) + 127) & 0x7FFFFF80;
    if (v7) {
      int v12 = v22;
    }
    else {
      int v12 = 0;
    }
    int v11 = a2[902];
  }
  signed int v23 = 0;
  uint64_t v24 = *((void *)this + 32);
  if (v11 >= -15) {
    int v25 = v11 + 15;
  }
  else {
    int v25 = v11 + 30;
  }
  int v26 = a3[14];
  if (*((unsigned char *)a3 + 52)) {
    int v27 = a3[14];
  }
  else {
    int v27 = 0;
  }
  int v65 = v27;
  if (v7 == 3) {
    int v28 = 48;
  }
  else {
    int v28 = 32;
  }
  if (v7 == 3) {
    int v29 = 176;
  }
  else {
    int v29 = 128;
  }
  if (!v7) {
    int v28 = 16;
  }
  unsigned int v30 = (v28 * v6) >> 3;
  if (!v7) {
    int v29 = 80;
  }
  int v63 = v25;
  int v64 = v29;
  int v31 = v25 >> 4;
  int v32 = (v25 >> 4) * v30;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  if (*((unsigned char *)a3 + 52) && v26)
  {
    uint64_t v36 = 0;
    int v37 = 0;
    unsigned int v35 = 0;
    unsigned int v34 = 0;
    unsigned int v33 = 0;
    if (v7 == 1) {
      int v38 = 8;
    }
    else {
      int v38 = 16;
    }
    if (!v7) {
      int v38 = 0;
    }
    unsigned int v39 = ((((6 * v38 + 96) * v6) >> 3) + 7) & 0x3FFFFFF8;
    int v40 = v38 + 16;
    unsigned int v41 = a2[903];
    signed int v42 = v4 - 8;
    signed int v43 = v5 - 8;
    if (v42 <= v43) {
      signed int v44 = v43;
    }
    else {
      signed int v44 = v42;
    }
    uint64_t v45 = a3[15];
    int v46 = a2[5718];
    BOOL v48 = *(_DWORD *)(v24 + 2644) == 1 && v44 != 0;
    int v49 = (char *)(a3 + 37);
    do
    {
      int v50 = v46 + v46 * *(_DWORD *)&v49[4 * v36];
      if (v50 + v37 > v41) {
        int v50 = v41 - v37;
      }
      int v51 = v50 + 15;
      if (v50 < -15) {
        int v51 = v50 + 30;
      }
      if (v36) {
        int v52 = (v51 >> 4) + 1;
      }
      else {
        int v52 = v51 >> 4;
      }
      unsigned int v53 = v52 * v39;
      if (v33 <= v53) {
        unsigned int v33 = v53;
      }
      unsigned int v54 = 36 * (v51 >> 4);
      if (v34 <= v54) {
        unsigned int v34 = v54;
      }
      if (v48)
      {
        if (v45 == v36) {
          int v55 = 23;
        }
        else {
          int v55 = 15;
        }
        unsigned int v56 = ((v55 + v50) / 16 * v40) | 6;
        if (v35 <= v56) {
          unsigned int v35 = v56;
        }
      }
      v37 += v50;
      ++v36;
    }
    while (v45 + 1 != v36);
    signed int v23 = (((3 * v6) & 0x7FFFFF) << 6) + (((v41 + 7) >> 3) + 2) * ((((v6 >> 1) & 0x1FFFFF) << 8) | 8);
  }
  if (v32 && CAVDDecoder::allocAVDMem(v24, (_OWORD *)this + 649, v32, 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2054;
      __int16 v71 = 2080;
      uint64_t v72 = "IpAbove";
      unsigned int v58 = &_os_log_internal;
LABEL_113:
      _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", buf, 0x1Cu);
      goto LABEL_114;
    }
    goto LABEL_114;
  }
  if ((v11 + 30) >= 0x1F
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 462, 4 * (4 * v31 + (v63 >> 4)), 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2055;
      __int16 v71 = 2080;
      uint64_t v72 = "MvAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
LABEL_114:
    (*(void (**)(CAHDecSalviaHevc *, void))(*(void *)v57 + 152))(v57, 0);
    return 0xFFFFFFFFLL;
  }
  int v59 = v65 + ((v18 + 15) >> 4);
  signed int v60 = v59 * ((((v64 * v6) >> 3) + 7) & 0x3FFFFFF8) + (v26 << 7);
  if (v60 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 660, v60, 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2056;
      __int16 v71 = 2080;
      uint64_t v72 = "LfAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  int v61 = 36 * v59 + (v26 << 7);
  __int16 v57 = this;
  if (v61 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 671, v61, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2057;
      __int16 v71 = 2080;
      uint64_t v72 = "LfAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v33 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 682, (int)v33, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2058;
      __int16 v71 = 2080;
      uint64_t v72 = "LfLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v34 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 693, (int)v34, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2059;
      __int16 v71 = 2080;
      uint64_t v72 = "LfLeftInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v35 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 704, (int)v35, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2060;
      __int16 v71 = 2080;
      uint64_t v72 = "SwLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v12 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 715, v12, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2061;
      __int16 v71 = 2080;
      uint64_t v72 = "AZAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (!v23) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 726, v23, 7, 1, 0);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2062;
      __int16 v71 = 2080;
      uint64_t v72 = "AZLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  return result;
}

uint64_t CAHDecSalviaHevc::freeWorkBuf_SPS(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(_DWORD *)(*(void *)(this + 256) + 2648))
  {
    for (uint64_t i = 528; i != 3344; i += 176)
    {
      uint64_t v3 = (void *)(v1 + i);
      if (*(void *)(v1 + i))
      {
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v1 + i));
        void *v3 = 0;
      }
      if (v3[352])
      {
        unsigned int v4 = v3 + 352;
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), v4);
        *unsigned int v4 = 0;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1 + 7568;
  do
  {
    if (*(void *)(v6 + v5))
    {
      this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v6 + v5));
      *(void *)(v6 + v5) = 0;
    }
    v5 += 176;
  }
  while (v5 != 2816);
  return this;
}

uint64_t *CAHDecSalviaHevc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  unsigned int v2 = this;
  if (this[1298])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1298);
    v2[1298] = 0;
  }
  if (v2[924])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 924);
    v2[924] = 0;
  }
  if (v2[1320])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1320);
    v2[1320] = 0;
  }
  if (v2[1342])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1342);
    v2[1342] = 0;
  }
  if (v2[1364])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1364);
    v2[1364] = 0;
  }
  if (v2[1386])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1386);
    v2[1386] = 0;
  }
  if (v2[1408])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1408);
    v2[1408] = 0;
  }
  if (v2[1430])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1430);
    v2[1430] = 0;
  }
  if (v2[1452])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1452);
    v2[1452] = 0;
  }
  return this;
}

uint64_t CAHDecSalviaHevc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 6160;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 11808) = a2;
  return this;
}

uint64_t CAHDecSalviaHevc::decodeBuffer(CAHDecSalviaHevc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecSalviaHevc::decodeBufferSize(CAHDecSalviaHevc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecSalviaHevc::decHdrYLinAddr(CAHDecSalviaHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 66);
}

uint64_t CAHDecSalviaHevc::decHdrCLinAddr(CAHDecSalviaHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 418);
}

uint64_t CAHDecSalviaHevc::decHdrYSize(CAHDecSalviaHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 143);
}

uint64_t CAHDecSalviaHevc::decHdrCSize(CAHDecSalviaHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 847);
}

uint64_t CAHDecSalviaHevc::decHdrYStride(CAHDecSalviaHevc *this)
{
  return *((unsigned int *)this + 2950);
}

uint64_t CAHDecSalviaHevc::decHdrCStride(CAHDecSalviaHevc *this)
{
  return *((unsigned int *)this + 2951);
}

CAHDecHibiscusHevc *createHibiscusHevcDecoder(CAVDHevcDecoder *a1)
{
  uint64_t v2 = (CAHDecHibiscusHevc *)operator new(0x3468uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecHibiscusHevc::CAHDecHibiscusHevc(v2, a1);
  }
  return v3;
}

void sub_223A87B28(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecHibiscusHevc::CAHDecHibiscusHevc(CAHDecHibiscusHevc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D741F48;
  *(_DWORD *)(v1 + 456) = 420540;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = 0;
  *(void *)(v1 + 272) = 0;
}

void CAHDecHibiscusHevc::CAHDecHibiscusHevc(CAHDecHibiscusHevc *this, CAVDHevcDecoder *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D741F48;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 420540;
  *(_DWORD *)(v4 + 8) = 3132;
  *(_OWORD *)(v4 + 16) = xmmword_223AD0620;
  *(_DWORD *)(v4 + 32) = 4;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 420540, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      int v7 = "CAHDecHibiscusHevc";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v6, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v5 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v5;
    *((void *)this + 34) = v5;
    bzero((char *)this + 528, 0x3230uLL);
  }
}

void sub_223A87CE8(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecHibiscusHevc::~CAHDecHibiscusHevc(CAHDecHibiscusHevc *this)
{
  *(void *)this = &unk_26D741F48;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecHibiscusHevc::~CAHDecHibiscusHevc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecHibiscusHevc::initPicture(CAHDecHibiscusHevc *this, int a2, __int16 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 114) = 420540;
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v4;
  if (v4)
  {
    bzero(v4, 0x66ABCuLL);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v7 + 16) = a2;
    *(_WORD *)(v7 + 24) = 257;
    *(_WORD *)(v7 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 3351) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "initPicture";
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v9, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecHibiscusHevc::populateSlices(CAHDecHibiscusHevc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 3132;
    uint64_t v5 = a2;
    do
    {
      CAHDecHibiscusHevc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 368;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecHibiscusHevc::populateSliceRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 256);
  int v6 = *(_DWORD *)(v5 + 8320);
  int v7 = *(_DWORD *)(v5 + 8324);
  uint64_t v8 = *(void *)(v5 + 8288);
  uint64_t v9 = *(void *)(v5 + 8280);
  uint64_t v10 = *(void *)(v5 + 8296);
  int v11 = a3;
  uint64_t v12 = v9 + 23176 * v6;
  *(_DWORD *)(a1 + 460) = 6 * *(_DWORD *)(v12 + 3636);
  LODWORD(v12) = *(_DWORD *)(v12 + 22880);
  *(_DWORD *)(a2 + 352) = 0x1000000;
  uint64_t v13 = v10 + 2360 * (int)a3;
  unsigned int v14 = (((*(_DWORD *)(v13 + 36) / v12) & 0xFFF) << 12) | 0x1000000;
  *(_DWORD *)(a2 + 352) = v14;
  *(_DWORD *)(a2 + 352) = v14 & 0xFFFFF000 | (*(_DWORD *)(v13 + 36) % v12) & 0xFFF;
  *(_DWORD *)(a2 + 4) = 0;
  char v15 = *(unsigned char *)(v8 + 9856 * v7 + 6477);
  if (v15) {
    char v15 = *(unsigned char *)(v10 + 2360 * (int)a3 + 1880);
  }
  int v16 = v15 & 1;
  *(_DWORD *)(a2 + 4) = v16;
  uint64_t v17 = v10 + 2360 * (int)a3;
  int v19 = *(_DWORD *)(v17 + 44);
  unsigned int v18 = (int *)(v17 + 44);
  if (v19 == 2) {
    LOBYTE(v20) = 0;
  }
  else {
    int v20 = 5 - *(_DWORD *)(v10 + 2360 * (int)a3 + 1864);
  }
  unsigned int v21 = v16 & 0xFFFFFFF1 | (2 * (v20 & 7));
  *(_DWORD *)(a2 + 4) = v21;
  if (*v18)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *(unsigned __int8 *)(v10 + 2360 * (int)a3 + 616);
    if (*(unsigned char *)(v10 + 2360 * (int)a3 + 616)) {
      int v22 = *(unsigned char *)(v10 + 2360 * (int)a3 + 762) == 0;
    }
  }
  int v23 = v21 | (16 * v22);
  *(_DWORD *)(a2 + 4) = v23;
  if (*v18 == 2)
  {
    char v24 = 0;
  }
  else
  {
    char v24 = *(unsigned char *)(v8 + 9856 * v7 + 17);
    if (v24) {
      char v24 = *(unsigned char *)(v10 + 2360 * (int)a3 + 761);
    }
  }
  unsigned int v25 = v23 & 0xFFFFFFDF | (32 * (v24 & 1));
  *(_DWORD *)(a2 + 4) = v25;
  if (*v18) {
    int v26 = 0;
  }
  else {
    int v26 = *(unsigned char *)(v10 + 2360 * (int)a3 + 760) == 0;
  }
  char v27 = 0;
  int v28 = v25 | (v26 << 6);
  *(_DWORD *)(a2 + 4) = v28;
  uint64_t v29 = v10 + 2360 * (int)a3;
  int v30 = (*(_DWORD *)(v29 + 624) & 0xF) << 7;
  if (*(_DWORD *)(v29 + 624) == -1) {
    int v30 = 0;
  }
  int v31 = v30 | v28;
  *(_DWORD *)(a2 + 4) = v31;
  int v32 = (*(_DWORD *)(v29 + 620) & 0xF) << 11;
  if (*(_DWORD *)(v29 + 620) == -1) {
    int v32 = 0;
  }
  int v33 = v31 | v32;
  *(_DWORD *)(a2 + 4) = v33;
  if (*v18 != 2)
  {
    char v27 = *(unsigned char *)(v9 + 23176 * v6 + 22284);
    if (v27) {
      char v27 = *(unsigned char *)(v10 + 2360 * (int)a3 + 616);
    }
  }
  uint64_t v133 = v9;
  int v134 = v6;
  unsigned int v34 = v33 & 0xFFFF7FFF | ((v27 & 1) << 15);
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a2 + 4) = v34 & 0xFFFCFFFF | ((*v18 & 3) << 16);
  *(_DWORD *)(a2 + 336) = 0;
  if (*v18 > 1) {
    goto LABEL_28;
  }
  if (!*(void *)(v10 + 2360 * (int)a3 + 2344)) {
    goto LABEL_28;
  }
  if (*(_DWORD *)(a1 + 13404)) {
    goto LABEL_28;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 256) + 344))(*(void *)(a1 + 256), a3);
  uint64_t v4 = a1;
  uint64_t v35 = *(void *)(a1 + 256);
  if (*(_DWORD *)(v35 + 9032)) {
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 13404) = 1;
  *(_DWORD *)(a2 + 4) |= 0x40000u;
  int v132 = 368 * a3;
  if (!*(void *)(v35 + 8856) && !*(_DWORD *)(v35 + 9008) && !*(_DWORD *)(v35 + 9012)) {
    goto LABEL_147;
  }
  uint64_t result = CAHDec::addToPatcherList(a1, (void *)(v35 + 8856), v132 + 3468, 0, 0xFFFFFFFFLL, 8, -256, 4);
  int v132 = 368 * a3;
  uint64_t v4 = a1;
  if (result) {
    return result;
  }
  if (!*(void *)(v35 + 8856))
  {
LABEL_147:
    if (!*(_DWORD *)(v35 + 9008) && !*(_DWORD *)(v35 + 9012)) {
      goto LABEL_28;
    }
  }
  uint64_t result = CAHDec::addToPatcherList(v4, (void *)(v35 + 8856), v132 + 3496, 0, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  uint64_t v4 = a1;
  if (!result)
  {
LABEL_28:
    uint64_t v36 = (unsigned int *)(v29 + 624);
    int v37 = (unsigned int *)(v29 + 620);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
    (*(void (**)(void, void))(**(void **)(v4 + 256) + 352))(*(void *)(v4 + 256), 0);
    if (*v18 > 1) {
      goto LABEL_38;
    }
    uint64_t v38 = v5 + 8456;
    if ((*v37 & 0x80000000) != 0)
    {
      uint64_t v40 = 0;
      if (*v18) {
        goto LABEL_38;
      }
    }
    else
    {
      int v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = a2 + 8;
      do
      {
        uint64_t v42 = v40;
        *(_DWORD *)(v41 + 4 * v40) = v39 & 0xF0 | 0x2DC00000;
        *(_DWORD *)(v41 + 4 * v40) = v39 & 0xF0 | 0x2DC00000 | *(_DWORD *)(v38 + 4 * v40) & 0xF;
        ++v40;
        v39 += 16;
      }
      while (v42 < (int)*v37);
      if (*v18) {
        goto LABEL_38;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 256) + 352))(*(void *)(a1 + 256), 1, a3);
    if ((*v36 & 0x80000000) == 0)
    {
      int v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = a2 + 4 * v40 + 8;
      do
      {
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100;
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100 | *(_DWORD *)(v38 + 4 * v44) & 0xF;
        v43 += 16;
      }
      while (v44++ < (int)*v36);
    }
LABEL_38:
    *(void *)(a2 + 128) = 0x2DD0000000000000;
    int v47 = *v18;
    if (*v18)
    {
      uint64_t v48 = a1;
      uint64_t v50 = v133;
      int v49 = v134;
      if (v47 != 1 || !*(unsigned char *)(v8 + 9856 * v7 + 49)) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v48 = a1;
      uint64_t v50 = v133;
      int v49 = v134;
      if (!*(unsigned char *)(v8 + 9856 * v7 + 50)) {
        goto LABEL_62;
      }
    }
    unsigned int v51 = 0;
    unsigned int v52 = 0;
    uint64_t v53 = v10 + 2360 * v11;
    uint64_t v54 = v8 + 9856 * v7;
    int v55 = (unsigned char *)(v54 + 50);
    unsigned int v56 = (unsigned char *)(v54 + 49);
    if (v47) {
      __int16 v57 = v56;
    }
    else {
      __int16 v57 = v55;
    }
    int v58 = ((*v57 & 1) << 6) | 0x2DD00000;
    *(_DWORD *)(a2 + 132) = v58;
    char v59 = *(_DWORD *)(v53 + 768);
    unsigned int v60 = v58 & 0xFFFFFFC7 | (8 * (*(_DWORD *)(v53 + 768) & 7));
    *(_DWORD *)(a2 + 132) = v60;
    unsigned __int8 v61 = (*(_DWORD *)(v53 + 772) + *(_DWORD *)(v53 + 768)) & 7;
    *(_DWORD *)(a2 + 132) = v60 & 0xFFFFFFF8 | v61;
    int v62 = 1 << (v59 & 7);
    int v63 = 1 << v61;
    do
    {
      uint64_t v64 = v51;
      if (*(unsigned char *)(v10 + 2360 * v11 + v51 + 776))
      {
        int v65 = ((v51 & 0xF) << 9) | 0x2DE04000;
        uint64_t v66 = a2 + 4 * v52;
        *(_DWORD *)(v66 + 136) = v65;
        uint64_t v67 = v10 + 2360 * v11 + 4 * v64;
        *(_DWORD *)(v66 + 136) = ((unsigned __int16)*(_DWORD *)(v67 + 808) + (_WORD)v62) & 0x1FF | v65;
        *(_DWORD *)(v66 + 232) = 770703360;
        *(_DWORD *)(v66 + 232) = *(unsigned __int16 *)(v67 + 872) | 0x2DF00000;
        ++v52;
      }
      if (*(unsigned char *)(v10 + 2360 * v11 + v64 + 792))
      {
        uint64_t v68 = 0;
        char v69 = 1;
        do
        {
          char v70 = v69;
          int v71 = ((v64 & 0xF) << 9) | (v68 << 14) | 0x2DE08000;
          uint64_t v72 = a2 + 4 * v52;
          *(_DWORD *)(v72 + 136) = v71;
          uint64_t v73 = v10 + 2360 * v11 + 8 * v64 + 4 * v68;
          *(_DWORD *)(v72 + 136) = ((unsigned __int16)*(_DWORD *)(v73 + 936) + (_WORD)v63) & 0x1FF | v71;
          *(_DWORD *)(v72 + 232) = 770703360;
          *(_DWORD *)(v72 + 232) = *(unsigned __int16 *)(v73 + 1608) | 0x2DF00000;
          ++v52;
          uint64_t v68 = 1;
          char v69 = 0;
        }
        while ((v70 & 1) != 0);
      }
      unsigned int v51 = v64 + 1;
    }
    while ((int)v64 + 1 <= *v37);
    if (!*v18)
    {
      unsigned int v74 = 0;
      do
      {
        uint64_t v75 = v74;
        if (*(unsigned char *)(v10 + 2360 * v11 + v74 + 1192))
        {
          int v76 = ((v74 & 0xF) << 9) | 0x2DE06000;
          uint64_t v77 = a2 + 4 * v52;
          *(_DWORD *)(v77 + 136) = v76;
          uint64_t v78 = v10 + 2360 * v11 + 4 * v75;
          *(_DWORD *)(v77 + 136) = ((unsigned __int16)*(_DWORD *)(v78 + 1224) + (_WORD)v62) & 0x1FF | v76;
          *(_DWORD *)(v77 + 232) = 770703360;
          *(_DWORD *)(v77 + 232) = *(unsigned __int16 *)(v78 + 1288) | 0x2DF00000;
          ++v52;
        }
        if (*(unsigned char *)(v10 + 2360 * v11 + v75 + 1208))
        {
          uint64_t v79 = 0;
          char v80 = 1;
          do
          {
            char v81 = v80;
            int v82 = ((v75 & 0xF) << 9) | (v79 << 14) | 0x2DE0A000;
            uint64_t v83 = a2 + 4 * v52;
            *(_DWORD *)(v83 + 136) = v82;
            uint64_t v84 = v10 + 2360 * v11 + 8 * v75 + 4 * v79;
            *(_DWORD *)(v83 + 136) = ((unsigned __int16)*(_DWORD *)(v84 + 1352) + (_WORD)v63) & 0x1FF | v82;
            *(_DWORD *)(v83 + 232) = 770703360;
            *(_DWORD *)(v83 + 232) = *(unsigned __int16 *)(v84 + 1736) | 0x2DF00000;
            ++v52;
            uint64_t v79 = 1;
            char v80 = 0;
          }
          while ((v81 & 1) != 0);
        }
        unsigned int v74 = v75 + 1;
      }
      while ((int)v75 + 1 <= *v36);
    }
    *(_DWORD *)(a2 + 128) = v52;
LABEL_62:
    uint64_t v85 = v8 + 9856 * v7;
    int v88 = *(unsigned __int8 *)(v85 + 48);
    int v86 = (unsigned __int8 *)(v85 + 48);
    LOBYTE(v87) = v88;
    if (v88) {
      int v87 = *(_DWORD *)(v10 + 2360 * v11 + 1876);
    }
    unsigned int v89 = *(_DWORD *)(a2 + 328) & 0xFFFFFFE0 | ((_BYTE)v87 + *((_DWORD *)v86 - 1)) & 0x1F;
    *(_DWORD *)(a2 + 328) = v89;
    int v90 = *v86;
    if (v90) {
      int v90 = *(_DWORD *)(v10 + 2360 * v11 + 1872);
    }
    unsigned int v91 = v89 & 0xFFFFFC1F | (32 * (((_BYTE)v90 + *(_DWORD *)(v8 + 9856 * v7 + 40)) & 0x1F));
    *(_DWORD *)(a2 + 328) = v91;
    int v92 = (_DWORD *)(v8 + 9856 * v7);
    int v93 = v92[7] + *(_DWORD *)(v10 + 2360 * v11 + 1868) + 26;
    *(_DWORD *)(a2 + 328) = v91 & 0xE03FF | ((v93 & 0x7F) << 10) | 0x2D900000;
    *(_DWORD *)(*(void *)(v48 + 256) + 2868) = *(_DWORD *)(v48 + 460) + (v93 << 25 >> 25);
    *(_DWORD *)(a2 + 332) = 0;
    int v94 = v92[1635] & 7;
    *(_DWORD *)(a2 + 332) = v94;
    unsigned int v95 = v94 & 0xFFFFFFC7 | (8 * (v92[1634] & 7));
    *(_DWORD *)(a2 + 332) = v95;
    int v96 = (char *)(v50 + 23176 * v49 + 10649);
    char v97 = *v96;
    if (*v96) {
      char v97 = *(unsigned char *)(v10 + 2360 * v11 + 618);
    }
    unsigned int v98 = v95 & 0xFFFFFFBF | ((v97 & 1) << 6);
    *(_DWORD *)(a2 + 332) = v98;
    if (*v96) {
      char v99 = *(unsigned char *)(v10 + 2360 * v11 + 617);
    }
    else {
      char v99 = 0;
    }
    int v100 = (v97 & 1) << 6;
    int v101 = (v99 & 1) << 7;
    unsigned int v102 = v98 & 0xFFFFFF7F | v101;
    *(_DWORD *)(a2 + 332) = v102;
    uint64_t v103 = v10 + 2360 * v11;
    uint64_t v104 = v8 + 9856 * v7;
    if (*(unsigned char *)(v103 + 1881)) {
      int v105 = (_DWORD *)(v103 + 1888);
    }
    else {
      int v105 = (_DWORD *)(v104 + 248);
    }
    unsigned int v106 = v102 & 0xFFFFF0FF | ((*v105 & 0xF) << 8);
    *(_DWORD *)(a2 + 332) = v106;
    if (*(unsigned char *)(v103 + 1881)) {
      uint64_t v107 = (_DWORD *)(v103 + 1884);
    }
    else {
      uint64_t v107 = (_DWORD *)(v104 + 244);
    }
    unsigned int v108 = v106 & 0xFFFF0FFF | ((*v107 & 0xF) << 12);
    *(_DWORD *)(a2 + 332) = v108;
    if (*(unsigned char *)(v104 + 239) && *(unsigned char *)(v103 + 1881)) {
      uint64_t v109 = (unsigned __int8 *)(v10 + 2360 * v11 + 1882);
    }
    else {
      uint64_t v109 = (unsigned __int8 *)(v8 + 9856 * v7 + 240);
    }
    int v110 = *v109;
    BOOL v111 = (v101 | v100) != 0;
    int v112 = v108 | ((v110 == 0) << 16);
    *(_DWORD *)(a2 + 332) = v112;
    if (!v110) {
      BOOL v111 = 1;
    }
    uint64_t v113 = v8 + 9856 * v7;
    if (v111) {
      uint64_t v114 = (unsigned char *)(v10 + 2360 * v11 + 1892);
    }
    else {
      uint64_t v114 = (unsigned char *)(v113 + 237);
    }
    unsigned int v115 = v112 & 0xFFFDFFFF | ((*v114 & 1) << 17);
    *(_DWORD *)(a2 + 332) = v115;
    if (*(unsigned char *)(v113 + 52)) {
      char v116 = *(unsigned char *)(v8 + 9856 * v7 + 236);
    }
    else {
      char v116 = 1;
    }
    unsigned int v117 = v115 & 0xFFFBFFFF | ((v116 & 1) << 18);
    *(_DWORD *)(a2 + 332) = v117;
    int v118 = *(unsigned __int8 *)(v50 + 23176 * v49 + 10650);
    if (*(unsigned char *)(v50 + 23176 * v49 + 10650)) {
      int v118 = *(unsigned char *)(v50 + 23176 * v49 + 10668) == 0;
    }
    *(_DWORD *)(a2 + 332) = v117 | (v118 << 19) | 0x2DA00000;
    uint64_t v119 = *(void *)(v48 + 256);
    int v120 = *(_DWORD *)(v119 + 2504);
    if (*(_DWORD *)(v119 + 2360) == 1)
    {
      unint64_t v137 = 0;
      uint64_t v138 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))
      {
        int v121 = 368 * a3;
        *(_DWORD *)(a2 + 340) = 0;
        uint64_t v122 = v138;
        if (*(void *)v138 || *(_DWORD *)(v138 + 152) || *(_DWORD *)(v138 + 156))
        {
          int v123 = v137;
          if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v140 = "populateSliceRegisters";
            __int16 v141 = 1024;
            int v142 = 1715;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v123 = v137;
          }
          uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v121 + 3472, v123, 0x3FFFFFFFFFFLL, 32, 1023, 4);
          if (result) {
            return result;
          }
          uint64_t v122 = v138;
          if (*(void *)v138) {
            goto LABEL_103;
          }
        }
        if (*(_DWORD *)(v122 + 152) || *(_DWORD *)(v122 + 156))
        {
LABEL_103:
          int v125 = v121 + 3476;
          int v126 = v137;
          if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v140 = "populateSliceRegisters";
            __int16 v141 = 1024;
            int v142 = 1716;
            uint64_t v127 = &_os_log_internal;
LABEL_120:
            _os_log_impl(&dword_223977000, v127, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v126 = v137;
            goto LABEL_121;
          }
          goto LABEL_121;
        }
        goto LABEL_122;
      }
    }
    else
    {
      unint64_t v137 = 0;
      uint64_t v138 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))
      {
        int v128 = 368 * a3;
        *(_DWORD *)(a2 + 340) = 0;
        uint64_t v122 = v138;
        if (*(void *)v138 || *(_DWORD *)(v138 + 152) || *(_DWORD *)(v138 + 156))
        {
          int v129 = v137;
          if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v140 = "populateSliceRegisters";
            __int16 v141 = 1024;
            int v142 = 1734;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v129 = v137;
          }
          uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v128 + 3472, v129, 0x3FFFFFFFFFFLL, 32, 1023, 4);
          if (result) {
            return result;
          }
          uint64_t v122 = v138;
          if (*(void *)v138) {
            goto LABEL_117;
          }
        }
        if (*(_DWORD *)(v122 + 152) || *(_DWORD *)(v122 + 156))
        {
LABEL_117:
          int v125 = v128 + 3476;
          int v126 = v137;
          if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v140 = "populateSliceRegisters";
            __int16 v141 = 1024;
            int v142 = 1735;
            uint64_t v127 = &_os_log_internal;
            goto LABEL_120;
          }
LABEL_121:
          uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v125, v126, 0xFFFFFFFFLL, 0, -1, 4);
          if (!result) {
            goto LABEL_122;
          }
          return result;
        }
LABEL_122:
        unsigned int v130 = *(_DWORD *)(v10 + 2360 * v11 + 16) - (*(_DWORD *)(v10 + 2360 * v11 + 2080) >> 3);
        *(_DWORD *)(a2 + 348) = v130;
        if (*(_DWORD *)(v119 + 2360) != 1) {
          return 0;
        }
        *(void *)(a2 + 356) = 0;
        if (*(_DWORD *)(v119 + 2640))
        {
          if ((*(unsigned char *)(v119 + 2612) & 1) == 0)
          {
LABEL_125:
            uint64_t result = 0;
            if (v130 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
              unsigned int v130 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
            }
            int v131 = (unsigned __int16)v120 | (v130 << 22);
LABEL_144:
            *(_DWORD *)(a2 + 360) = v131;
            return result;
          }
        }
        else if (!*(_DWORD *)(v119 + 2420))
        {
          goto LABEL_125;
        }
        uint64_t result = 0;
        if (v130 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
          unsigned int v130 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
        }
        int v131 = v130 | v120 & 0x10000;
        goto LABEL_144;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecHibiscusHevc::populateCommonRegisters(CAHDecHibiscusHevc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000000;
  return 0;
}

uint64_t CAHDecHibiscusHevc::updateCommonRegisters(CAHDecHibiscusHevc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecHibiscusHevc::populateSequenceRegisters(CAHDecHibiscusHevc *this)
{
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)*((void *)this + 33);
  int v3 = *(_DWORD *)(v1 + 8320);
  uint64_t v4 = *(void *)(v1 + 8280);
  v2[13] = 0;
  uint64_t v5 = v4 + 23176 * v3;
  __int16 v6 = (*(_DWORD *)(v5 + 3608) >> 3) - 1;
  v2[13] = v6 & 0x1FFF;
  v2[13] = ((*(_DWORD *)(v5 + 3612) << 13) + 536805376) & 0x1FFF0000 | v6 & 0x1FFF;
  v2[14] = 0;
  int v7 = *(unsigned char *)(v5 + 10648) & 1;
  v2[14] = v7;
  unsigned int v8 = v7 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v5 + 4440) & 7));
  v2[14] = v8;
  unsigned int v9 = v8 & 0xFFFFFF8F | (16 * (*(_DWORD *)(v5 + 4436) & 7));
  v2[14] = v9;
  unsigned int v10 = v9 & 0xFFFFFE7F | (((*(_DWORD *)(v5 + 4428) + *(_DWORD *)(v5 + 4432)) & 3) << 7);
  v2[14] = v10;
  unsigned int v11 = v10 & 0xFFFFF9FF | ((*(_DWORD *)(v5 + 4428) & 3) << 9);
  v2[14] = v11;
  unsigned int v12 = v11 & 0xFFFFE7FF | (((*(_DWORD *)(v5 + 4424) + *(_DWORD *)(v5 + 4420)) & 3) << 11);
  v2[14] = v12;
  unsigned int v13 = v12 & 0xFFFF9FFF | ((*(_DWORD *)(v5 + 4420) & 3) << 13);
  v2[14] = v13;
  unsigned int v14 = v13 & 0xFFF87FFF | ((*(_DWORD *)(v5 + 3640) & 0xF) << 15);
  v2[14] = v14;
  unsigned int v15 = v14 & 0xFF87FFFF | ((*(_DWORD *)(v5 + 3636) & 0xF) << 19);
  v2[14] = v15;
  unsigned int v16 = v15 & 0xFF7FFFFF | ((*(unsigned char *)(v5 + 3604) & 1) << 23);
  v2[14] = v16;
  v2[14] = v16 & 0xFCFFFFFF | ((*(_DWORD *)(v5 + 3600) & 3) << 24);
  v2[15] = 0;
  if (*(unsigned char *)(v5 + 10650))
  {
    v2[15] = 4096;
    uint64_t v17 = (_DWORD *)(v4 + 23176 * v3);
    int v18 = (v17[2666] + v17[2665]) & 3 | 0x1000;
    v2[15] = v18;
    unsigned int v19 = v18 & 0xFFFFFFF3 | (4 * (v17[2665] & 3));
    v2[15] = v19;
    unsigned int v20 = v19 & 0xFFFFFF0F | (16 * (v17[2664] & 0xF));
    v2[15] = v20;
    v2[15] = v20 & 0xFFFFF0FF | ((v17[2663] & 0xF) << 8);
  }
  v2[16] = 0;
  if (*(unsigned char *)(v4 + 23176 * v3 + 22833))
  {
    int v21 = *(unsigned char *)(v4 + 23176 * v3 + 22844) & 1;
    v2[16] = v21;
    unsigned int v22 = v21 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v4 + 23176 * v3 + 22843) & 1));
    v2[16] = v22;
    unsigned int v23 = v22 & 0xFFFFFFFB | (4 * (*(unsigned char *)(v4 + 23176 * v3 + 22842) & 1));
    v2[16] = v23;
    int v24 = v23 | (8 * (*(unsigned char *)(v4 + 23176 * v3 + 22841) == 0));
    v2[16] = v24;
    unsigned int v25 = v24 & 0xFFFFFFEF | (16 * (*(unsigned char *)(v4 + 23176 * v3 + 22840) & 1));
    v2[16] = v25;
    unsigned int v26 = v25 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v4 + 23176 * v3 + 22839) & 1));
    v2[16] = v26;
    unsigned int v27 = v26 & 0xFFFFFFBF | ((*(unsigned char *)(v4 + 23176 * v3 + 22838) & 1) << 6);
    v2[16] = v27;
    int v28 = v27 | ((*(unsigned char *)(v4 + 23176 * v3 + 22837) & 1) << 7);
    v2[16] = v28;
    int v29 = v28 | ((*(unsigned char *)(v4 + 23176 * v3 + 22836) & 1) << 8);
  }
  else
  {
    int v29 = 8;
  }
  v2[16] = v29;
  uint64_t v30 = v4 + 23176 * v3;
  v2[16] = v29 & 0xFFFFFDFF | ((*(unsigned char *)(v30 + 22285) & 1) << 9);
  if (*(unsigned char *)(v30 + 4444)) {
    CAHDecTansyHevc::copyScalingList((uint64_t)this, (uint64_t)(v2 + 17), *((void *)this + 33) + 892, *(_DWORD *)(v5 + 3600), v4 + 23176 * v3 + 4448);
  }
  return 0;
}

uint64_t CAHDecHibiscusHevc::getTileHdrMemInfo(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 176 * a2;
  *a3 = v3 + 528;
  a3[1] = v3 + 3344;
  return result;
}

__n128 CAHDecHibiscusHevc::getMVmemInfo(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1 + 176 * a2;
  long long v5 = *(_OWORD *)(v4 + 8976);
  long long v6 = *(_OWORD *)(v4 + 9008);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 8992);
  *(_OWORD *)(a3 + 32) = v6;
  *(_OWORD *)a3 = v5;
  long long v7 = *(_OWORD *)(v4 + 9024);
  long long v8 = *(_OWORD *)(v4 + 9040);
  long long v9 = *(_OWORD *)(v4 + 9072);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(v4 + 9056);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_OWORD *)(a3 + 64) = v8;
  __n128 result = *(__n128 *)(v4 + 9088);
  long long v11 = *(_OWORD *)(v4 + 9104);
  long long v12 = *(_OWORD *)(v4 + 9136);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v4 + 9120);
  *(_OWORD *)(a3 + 160) = v12;
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v11;
  *a4 = *(_DWORD *)(a1 + 4 * a2 + 464);
  return result;
}

uint64_t CAHDecHibiscusHevc::populatePictureRegisters(CAHDecHibiscusHevc *this)
{
  uint64_t v493 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 8320);
  int v4 = *(_DWORD *)(v2 + 8324);
  uint64_t v5 = *(void *)(v2 + 8280);
  uint64_t v6 = *(void *)(v2 + 8288);
  unsigned int v469 = *(_DWORD *)(v2 + 3068);
  unsigned int v470 = *(_DWORD *)(v2 + 9036);
  int v473 = *(_DWORD *)(v2 + 3072);
  int v7 = *(unsigned __int8 *)(v2 + 3060);
  int v8 = *(_DWORD *)(v2 + 3064);
  uint64_t v465 = *(void *)(v2 + 8392);
  int v466 = *(_DWORD *)(v2 + 3036);
  uint64_t v9 = *(void *)(v2 + 2088);
  int v461 = *(_DWORD *)(v2 + 3660);
  int v462 = *(unsigned __int8 *)(v2 + 9098);
  int v476 = *(_DWORD *)(v2 + 2644);
  uint64_t v468 = *(unsigned int *)(v2 + 8424);
  int v10 = *(unsigned __int8 *)(v2 + 8);
  long long v11 = *(_OWORD *)(v2 + 8536);
  v492[0] = *(_OWORD *)(v2 + 8520);
  v492[1] = v11;
  long long v12 = *(_OWORD *)(v2 + 8568);
  v492[2] = *(_OWORD *)(v2 + 8552);
  v492[3] = v12;
  uint64_t v459 = v9;
  uint64_t v460 = *(unsigned int *)(v2 + 8720);
  int v475 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  unsigned int v13 = (char *)this + 264;
  int v472 = *(_DWORD *)(v5 + 23176 * v3 + 4424) + *(_DWORD *)(v5 + 23176 * v3 + 4420);
  memset(v491, 0, sizeof(v491));
  memset(v490, 0, sizeof(v490));
  uint64_t v14 = *((void *)this + 33);
  (*(void (**)(void))(**((void **)this + 32) + 336))();
  uint64_t v15 = 0;
  unsigned int v16 = (unsigned __int8 *)*((void *)this + 32);
  uint64_t v17 = (const double *)(v16 + 8728);
  do
  {
    float64x2x2_t v494 = vld2q_f64(v17);
    v17 += 4;
    v491[v15] = v494.val[0];
    v490[v15++] = v494.val[1];
  }
  while (v15 != 4);
  uint64_t v18 = v6 + 9856 * v4;
  int v20 = *(unsigned __int8 *)(v18 + 52);
  unsigned int v19 = (unsigned char *)(v18 + 52);
  int v467 = v10;
  int v463 = v7;
  int v464 = v8;
  uint64_t v478 = v5;
  if (v20)
  {
    unint64_t v21 = 0;
    uint64_t v22 = v6 + 9856 * v4;
    unsigned __int16 v23 = *(_WORD *)(v22 + 56) + 1;
    uint64_t v24 = *(void *)v13;
    *(_WORD *)(*(void *)v13 + 788) = v23;
    uint64_t v25 = v22 + 9676;
    do
    {
      *(_WORD *)(v24 + 792 + 2 * v21) = *(_DWORD *)(v25 + 4 * v21);
      BOOL v26 = v21++ >= v23;
    }
    while (!v26);
    uint64_t v27 = v14;
    unint64_t v28 = 0;
    uint64_t v29 = v6 + 9856 * v4;
    unsigned __int16 v30 = *(_WORD *)(v29 + 60) + 1;
    *(_WORD *)(v24 + 790) = v30;
    int v31 = v30;
    uint64_t v32 = v29 + 9760;
    uint64_t v33 = v24 + 834;
    do
    {
      *(_WORD *)(v33 + 2 * v28) = *(_DWORD *)(v32 + 4 * v28);
      BOOL v26 = v28++ >= v30;
    }
    while (!v26);
    int v34 = v3;
  }
  else
  {
    uint64_t v27 = v14;
    uint64_t v35 = *(void *)v13;
    *(_DWORD *)(v35 + 788) = 65537;
    *(_WORD *)(v35 + 792) = 0;
    int v34 = v3;
    uint64_t v36 = v5 + 23176 * v3;
    *(_WORD *)(v35 + 794) = *(_DWORD *)(v36 + 22880);
    *(_WORD *)(v35 + 834) = 0;
    *(_WORD *)(v35 + 836) = *(_DWORD *)(v36 + 22888);
    int v31 = 1;
    unsigned __int16 v23 = 1;
  }
  int v37 = v16[2675];
  unsigned int v38 = v16[2674];
  if (v37 | v38)
  {
    uint64_t v39 = v478 + 23176 * v34;
    unsigned int v40 = *(_DWORD *)(v39 + 3636);
    unsigned int v41 = *(_DWORD *)(v39 + 3640);
    if (v40 > v41) {
      unsigned int v41 = v40;
    }
    unsigned int v42 = (v41 + 9) & 0xFFFFFFFE;
    if (v42 == 8)
    {
      unsigned int v51 = 1;
      int v50 = 8;
      if (!v16[2675]) {
        goto LABEL_47;
      }
    }
    else
    {
      int v43 = v16[2672];
      if (v43) {
        int v44 = 12;
      }
      else {
        int v44 = 11;
      }
      if (v43) {
        int v45 = 5;
      }
      else {
        int v45 = 4;
      }
      BOOL v46 = v43 == 0;
      if (v43) {
        int v47 = 10;
      }
      else {
        int v47 = 9;
      }
      if (v46) {
        int v48 = 2;
      }
      else {
        int v48 = 3;
      }
      if (v42 == 10)
      {
        int v49 = v48;
      }
      else
      {
        int v47 = 27;
        int v49 = 27;
      }
      if (v42 == 12) {
        int v50 = v44;
      }
      else {
        int v50 = v47;
      }
      if (v42 == 12) {
        unsigned int v51 = v45;
      }
      else {
        unsigned int v51 = v49;
      }
      if (!v37)
      {
LABEL_47:
        unsigned int v13 = (char *)this + 264;
        if (v38 && (v38 == 3 && v51 - 9 < 2 || v51 <= 0x1A && ((1 << v51) & 0x4C00000) != 0 && v38 <= 2))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "populatePictureRegisters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v51;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v38;
            unsigned int v52 = &_os_log_internal;
            uint64_t v53 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
            goto LABEL_139;
          }
          return 0xFFFFFFFFLL;
        }
        goto LABEL_55;
      }
    }
    if (*(_DWORD *)(v478 + 23176 * v34 + 3600) && (v37 == 2 && v50 == 8 || v37 == 3 && (v50 - 9) <= 1))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v50;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v37;
        unsigned int v52 = &_os_log_internal;
        uint64_t v53 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
LABEL_139:
        int v152 = buf;
        uint32_t v153 = 24;
LABEL_140:
        _os_log_impl(&dword_223977000, v52, OS_LOG_TYPE_DEFAULT, v53, v152, v153);
      }
      return 0xFFFFFFFFLL;
    }
    goto LABEL_47;
  }
LABEL_55:
  unsigned __int16 v458 = v23;
  uint64_t v54 = v6;
  int v55 = v4;
  unsigned int v56 = v19;
  uint64_t v57 = v27;
  *(_DWORD *)(v27 + 88) = 766509056;
  uint64_t v58 = (*(uint64_t (**)(void))(**((void **)this + 32) + 216))(*((void *)this + 32));
  if (v58) {
    int v59 = (*(_DWORD *)(*((void *)this + 32) + 3092) == 2) << 13;
  }
  else {
    int v59 = 0;
  }
  unsigned int v60 = v470 >> 28;
  if (v475) {
    int v61 = 688;
  }
  else {
    int v61 = 672;
  }
  if (v476) {
    int v62 = 4160;
  }
  else {
    int v62 = 64;
  }
  unsigned int v63 = v62 & 0xFFFFFFF0 | ((v476 == 1) << 10) | v61 & 0xFFFFFFF0 | (4 * (v37 & 3)) | v38 & 3 | v59;
  unsigned int v64 = v63 | *(_DWORD *)(v57 + 88) & 0xFFFFC100;
  *(_DWORD *)(v57 + 88) = v64;
  int v65 = (unsigned char *)*((void *)this + 32);
  unsigned int v66 = v64 & 0xFFF7FFFF | ((v65[2652] & 1) << 19);
  *(_DWORD *)(v57 + 88) = v66;
  unsigned int v67 = v66 & 0xFFFBFFFF | ((v65[2653] & 1) << 18);
  *(_DWORD *)(v57 + 88) = v67;
  *(void *)(v57 + 88) = v67 & 0xFFFDFFFF | ((v65[2654] & 1) << 17);
  int v68 = v34;
  if ((v470 & 1) != 0 && *(unsigned char *)(v54 + 9856 * v55 + 53) && *(_DWORD *)(v478 + 23176 * v34 + 22888) > v60 + 1
    || (v470 & 2) != 0 && !*(unsigned char *)(v54 + 9856 * v55 + 53) && *v56 && v31 * v458 > v60 + 1)
  {
    goto LABEL_77;
  }
  if ((v470 & 0x20) == 0 || (int v69 = *(unsigned __int8 *)(v54 + 9856 * v55 + 53), *(unsigned char *)(v54 + 9856 * v55 + 53)))
  {
    int v69 = 0;
    goto LABEL_78;
  }
  if (!*v56 && v469 > v60 + 1) {
LABEL_77:
  }
    int v69 = (v473 == 0) << 27;
LABEL_78:
  *(_DWORD *)(v57 + 92) = v69;
  *(_DWORD *)(v57 + 96) = 0;
  uint64_t v70 = v478 + 23176 * v34;
  unsigned __int16 v71 = *(_DWORD *)(v70 + 3608) - 1;
  *(_DWORD *)(v57 + 96) = v71;
  int v72 = (v71 | ((unsigned __int16)*(_DWORD *)(v70 + 3612) << 16)) - 0x10000;
  *(_DWORD *)(v57 + 100) = 0;
  *(_DWORD *)(v57 + 104) = 0;
  *(_DWORD *)(v57 + 96) = v72;
  if (*(unsigned char *)(v54 + 9856 * v55 + 6466))
  {
    uint64_t v73 = (unsigned char *)(v54 + 9856 * v55 + 6477);
    int v74 = 32 * (*v73 & 1);
    *(_DWORD *)(v57 + 104) = v74;
    LOBYTE(v75) = *v73;
    if (*v73) {
      int v75 = *(_DWORD *)(v54 + 9856 * v55 + 6484);
    }
    unint64_t v76 = v75 & 7;
    int v77 = v76 | v74;
    *(_DWORD *)(v57 + 104) = v76 | v74;
    if (v74)
    {
      uint64_t v78 = (_DWORD *)(v54 + 9856 * v55 + 6512);
      uint64_t v79 = (unsigned int *)(v57 + 112);
      unint64_t v80 = -1;
      do
      {
        unsigned int v81 = *v79 & 0xFFFFFFE0 | *v78 & 0x1F;
        *uint64_t v79 = v81;
        *v79++ = v81 & 0xFFFFFC1F | (32 * (*(v78 - 6) & 0x1F));
        ++v80;
        ++v78;
      }
      while (v80 < v76);
    }
    int v82 = *v73;
    if (v82) {
      int v82 = *(_DWORD *)(v54 + 9856 * v55 + 6480);
    }
    int v83 = (8 * (((_BYTE)v472 - (_BYTE)v82) & 3)) | v77;
    *(_DWORD *)(v57 + 104) = v83;
    unsigned int v84 = v83 & 0xFFFFFFBF | ((*(unsigned char *)(v54 + 9856 * v55 + 6476) & 1) << 6);
    *(_DWORD *)(v57 + 104) = v84;
    unsigned int v85 = v84 & 0xFFFFFE7F | ((*(_DWORD *)(v54 + 9856 * v55 + 6472) & 3) << 7);
  }
  else
  {
    unsigned int v85 = 8 * (v472 & 3);
  }
  *(_DWORD *)(v57 + 104) = v85;
  uint64_t v86 = v54 + 9856 * v55;
  int v89 = *(unsigned __int8 *)(v86 + 34);
  int v87 = (unsigned char *)(v86 + 34);
  LOBYTE(v88) = v89;
  if (v89) {
    int v88 = *(_DWORD *)(v54 + 9856 * v55 + 36);
  }
  unsigned int v90 = v85 & 0xFFFE7FFF | ((((_BYTE)v472 - (_BYTE)v88) & 3) << 15);
  *(_DWORD *)(v57 + 104) = v90;
  uint64_t v91 = v54 + 9856 * v55;
  unsigned int v92 = v90 & 0xFFFFF1FF | ((*(_DWORD *)(v91 + 6460) & 7) << 9);
  *(_DWORD *)(v57 + 104) = v92;
  unsigned int v93 = v92 & 0xFFFFEFFF | ((*(unsigned char *)(v91 + 53) & 1) << 12);
  *(_DWORD *)(v57 + 104) = v93;
  unsigned int v94 = v93 & 0xFFFFDFFF | ((*v56 & 1) << 13);
  *(_DWORD *)(v57 + 104) = v94;
  unsigned int v95 = v94 & 0xFFFFBFFF | ((*(unsigned char *)(v91 + 51) & 1) << 14);
  *(_DWORD *)(v57 + 104) = v95;
  unsigned int v96 = v95 & 0xFFFDFFFF | ((*v87 & 1) << 17);
  *(_DWORD *)(v57 + 104) = v96;
  unsigned int v97 = v96 & 0xFFFBFFFF | ((*(unsigned char *)(v91 + 33) & 1) << 18);
  *(_DWORD *)(v57 + 104) = v97;
  unsigned int v98 = v97 & 0xFFF7FFFF | ((*(unsigned char *)(v91 + 32) & 1) << 19);
  *(_DWORD *)(v57 + 104) = v98;
  unsigned int v99 = v98 & 0xFFEFFFFF | ((*(unsigned char *)(v91 + 16) & 1) << 20);
  *(_DWORD *)(v57 + 104) = v99;
  if (v63 >> 13) {
    BOOL v100 = 0;
  }
  else {
    BOOL v100 = *(unsigned char *)(v478 + 23176 * v34 + 22284) != 0;
  }
  *(_DWORD *)(v57 + 104) = v99 & 0xFFDFFFFF | (v100 << 21);
  uint64_t v101 = v54 + 9856 * v55;
  unsigned int v102 = *(_DWORD *)(v57 + 108) & 0xFFFFFFE0 | *(_DWORD *)(v101 + 44) & 0x1F;
  *(_DWORD *)(v57 + 108) = v102;
  unsigned int v103 = v102 & 0xFFFFFC1F | (32 * (*(_DWORD *)(v101 + 40) & 0x1F));
  *(_DWORD *)(v57 + 108) = v103;
  uint64_t v104 = *((void *)this + 32);
  if (*(unsigned char *)(v104 + 12)
    && *(_DWORD *)(v478 + 23176 * v34 + 22864) >= 5u
    && !*v56
    && *(_DWORD *)(v478 + 23176 * v34 + 3600) == 1
    && (*(_DWORD *)(v478 + 23176 * v34 + 3636) | 2) == 2
    && (*(_DWORD *)(v478 + 23176 * v34 + 3640) | 2) == 2)
  {
    uint64_t v105 = *(void *)(v104 + 8296);
    unsigned int v106 = v103 | 0x80000000;
    *(_DWORD *)(v57 + 108) = v106;
    uint64_t v107 = v54 + 9856 * v55;
    int v108 = *(_DWORD *)(v107 + 28) + *(_DWORD *)(v105 + 1868);
    int v109 = v108 + 26;
    unsigned int v110 = v108 + 11;
    if (v109 > 51) {
      unsigned int v110 = 36;
    }
    if (v109 < 15) {
      unsigned int v110 = 0;
    }
    unsigned int v111 = v106 & 0xFFFF83FF | ((kTable_8_11_tc[v110] & 0x1F) << 10);
    *(_DWORD *)(v57 + 108) = v111;
    int v112 = *(_DWORD *)(v107 + 28) + *(_DWORD *)(v105 + 1868);
    int v113 = v112 + 26;
    unsigned int v114 = v112 + 11;
    if (v113 > 51) {
      unsigned int v114 = 36;
    }
    if (v113 < 15) {
      unsigned int v114 = 0;
    }
    *(_DWORD *)(v57 + 108) = v111 & 0xFFC07FFF | ((kTable_8_11_beta[v114] & 0x7F) << 15);
    uint64_t v115 = *((void *)this + 32);
    int v116 = 2;
  }
  else
  {
    *(_DWORD *)(v57 + 108) = v103 & 0x7FC003FF;
    uint64_t v115 = *((void *)this + 32);
    int v116 = *(unsigned __int8 *)(v115 + 12);
  }
  *(_DWORD *)(v115 + 16) = v116;
  if (*(unsigned char *)(v54 + 9856 * v55 + 252))
  {
    CAHDecTansyHevc::copyScalingList(v58, v57 + 136, *((void *)this + 33) + 1888, *(_DWORD *)(v478 + 23176 * v34 + 3600), v54 + 9856 * v55 + 256);
    int v68 = v34;
    uint64_t v115 = *((void *)this + 32);
  }
  int v117 = *(_DWORD *)(v57 + 88);
  if ((~v117 & 0xC0000) != 0)
  {
    int v122 = 0;
    int v124 = 0;
    *(_DWORD *)(v57 + 156) = 0;
    *(_DWORD *)(v57 + 160) = 0;
  }
  else
  {
    int v118 = v13;
    int v119 = *(_DWORD *)(v115 + 2656);
    if (!v119 || !*(_DWORD *)(v115 + 2660))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v151 = *(_DWORD *)(v115 + 2660);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v119;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v151;
        unsigned int v52 = &_os_log_internal;
        uint64_t v53 = "AppleAVD: %s(): invalid stat crop width/height %d/%d";
        goto LABEL_139;
      }
      return 0xFFFFFFFFLL;
    }
    unsigned __int16 v120 = *(_DWORD *)(v115 + 2664);
    *(_WORD *)(v57 + 156) = v120;
    int v121 = *(_DWORD *)(v115 + 2668);
    int v122 = v121 << 16;
    *(_DWORD *)(v57 + 156) = v120 | ((unsigned __int16)v121 << 16);
    unsigned __int16 v123 = *(_DWORD *)(v115 + 2664) + *(_DWORD *)(v115 + 2656) - 1;
    *(_WORD *)(v57 + 160) = v123;
    int v124 = (v123 | ((unsigned __int16)(*(_WORD *)(v115 + 2660) + *(_WORD *)(v115 + 2668)) << 16)) - 0x10000;
    *(_DWORD *)(v57 + 160) = v124;
    unsigned int v13 = v118;
  }
  if (v473) {
    int v125 = 7340080;
  }
  else {
    int v125 = 3145776;
  }
  *(_DWORD *)(v57 + 164) = v125;
  if (!*(unsigned char *)(*((void *)this + 32) + 3004))
  {
    unsigned __int16 v126 = *(_DWORD *)(v70 + 3608) - 1;
    *(_DWORD *)(v57 + 160) = v124 & 0xFFFF0000 | v126;
    int v127 = (*(_DWORD *)(v70 + 3612) << 16) - 0x10000;
    *(_DWORD *)(v57 + 160) = v127 & 0xFFFF0000 | v126;
    if (*(unsigned char *)(v478 + 23176 * v68 + 3616))
    {
      if ((v117 & 0x800) != 0)
      {
        uint64_t v128 = v478 + 23176 * v68;
        unsigned __int16 v129 = *(_DWORD *)(v128 + 3620) * *(_DWORD *)(v128 + 22852);
        *(_DWORD *)(v57 + 156) = v122 | v129;
        *(_DWORD *)(v57 + 156) = v129 | ((unsigned __int16)(*(_WORD *)(v128 + 22856) * *(_DWORD *)(v128 + 3628)) << 16);
        unsigned __int16 v130 = *(_DWORD *)(v70 + 3608) + ~(*(_DWORD *)(v128 + 3624) * *(_DWORD *)(v128 + 22852));
        *(_DWORD *)(v57 + 160) = v130 | v127;
        *(_DWORD *)(v57 + 160) = v130 | ((unsigned __int16)(*(_WORD *)(v70 + 3612)
                                                          + ~(*(_WORD *)(v128 + 3632) * *(_WORD *)(v128 + 22856))) << 16);
      }
    }
  }
  int v131 = v68;
  uint64_t v132 = 0;
  uint64_t v133 = (char *)this + 6160;
  do
  {
    *(_DWORD *)(*(void *)v13 + v132 + 168) = 0;
    uint64_t v134 = *(void *)v13 + v132;
    int v135 = *(_DWORD *)(v134 + 168);
    *(_DWORD *)(v134 + 168) = 0;
    *(_DWORD *)(*(void *)v13 + v132 + 168) ^= 0xFFFFFF00;
    uint64_t v136 = *(void *)v13 + v132;
    int v137 = *(_DWORD *)(v136 + 168);
    *(_DWORD *)(v136 + 168) = v135;
    if (*(void *)v133 || *((_DWORD *)v133 + 38) || *((_DWORD *)v133 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v133, (int)v132 + 168, 0, 0xFFFFFFFFLL, 8, v137, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v132 + 228) = 0;
    *(_DWORD *)(*((void *)this + 33) + v132 + 228) = *(_DWORD *)(*((void *)this + 33) + v132 + 228) & 0x800001FF | (((*((_DWORD *)this + 3348) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v132 + 528) = 0;
    uint64_t v139 = *((void *)this + 33) + v132;
    int v140 = *(_DWORD *)(v139 + 528);
    *(_DWORD *)(v139 + 528) = 0;
    *(_DWORD *)(*((void *)this + 33) + v132 + 528) ^= 0x3FFu;
    uint64_t v141 = *((void *)this + 33) + v132;
    int v142 = *(_DWORD *)(v141 + 528);
    *(_DWORD *)(v141 + 528) = v140;
    if (*(void *)v133 || *((_DWORD *)v133 + 38) || *((_DWORD *)v133 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v133, (int)v132 + 528, 0, 0x3FFFFFFFFFFLL, 32, v142, 4);
      if (result) {
        return result;
      }
    }
    v132 += 4;
    v133 += 176;
  }
  while (v132 != 60);
  *(_DWORD *)(*(void *)v13 + 288) = 0;
  *(_DWORD *)(*(void *)v13 + 588) = 0;
  if ((*(unsigned char *)(v57 + 90) & 8) != 0)
  {
    uint64_t v143 = *((void *)this + 33);
    uint64_t v144 = *(void *)(*((void *)this + 32) + 2680);
    long long v488 = 0u;
    long long v489 = 0u;
    long long v486 = 0u;
    long long v487 = 0u;
    long long v484 = 0u;
    long long v485 = 0u;
    long long v482 = 0u;
    long long v483 = 0u;
    long long v481 = 0u;
    memset(buf, 0, sizeof(buf));
    int v145 = (*(_DWORD *)(v143 + 16) & 0xF) << 9;
    *(void *)buf = v144;
    int v146 = *(_DWORD *)(v143 + 288);
    *(_DWORD *)(v143 + 288) = 0;
    *(_DWORD *)(*((void *)this + 33) + 288) ^= 0xFFFFFF00;
    uint64_t v147 = *((void *)this + 33);
    int v148 = *(_DWORD *)(v147 + 288);
    *(_DWORD *)(v147 + 288) = v146;
    if (v144)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 288, v145, 0xFFFFFFFFLL, 8, v148, 4);
      if (result) {
        return result;
      }
      uint64_t v149 = *(void *)buf;
      int v150 = DWORD2(v488);
      LODWORD(v144) = HIDWORD(v488);
    }
    else
    {
      int v150 = 0;
      uint64_t v149 = 0;
    }
    *(_DWORD *)(*(void *)v13 + 588) = 0;
    int v154 = *(_DWORD *)(*(void *)v13 + 588);
    *(_DWORD *)(*(void *)v13 + 588) = 0;
    *(_DWORD *)(*(void *)v13 + 588) ^= 0x3FFu;
    int v155 = *(_DWORD *)(*(void *)v13 + 588);
    *(_DWORD *)(*(void *)v13 + 588) = v154;
    if (v149 || v150 || v144)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 588, v145, 0x3FFFFFFFFFFLL, 32, v155, 4);
      if (result) {
        return result;
      }
    }
  }
  uint64_t v156 = v57;
  uint64_t v157 = v13;
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  uint64_t v158 = *((void *)this + 33);
  int v159 = *(_DWORD *)(v158 + 292);
  *(_DWORD *)(v158 + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF00;
  uint64_t v160 = *((void *)this + 33);
  int v161 = *(_DWORD *)(v160 + 292);
  *(_DWORD *)(v160 + 292) = v159;
  if (*((void *)this + 1474) || *((_DWORD *)this + 2986) || *((_DWORD *)this + 2987))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1474, 292, 0, 0xFFFFFFFFLL, 8, v161, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 592) = 0;
  int v162 = *(_DWORD *)(*(void *)v13 + 592);
  *(_DWORD *)(*(void *)v13 + 592) = 0;
  *(_DWORD *)(*(void *)v13 + 592) ^= 0x3FFu;
  int v163 = *(_DWORD *)(*(void *)v13 + 592);
  *(_DWORD *)(*(void *)v13 + 592) = v162;
  if (*((void *)this + 1474) || *((_DWORD *)this + 2986) || *((_DWORD *)this + 2987))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1474, 592, 0, 0x3FFFFFFFFFFLL, 32, v163, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  uint64_t v164 = *((void *)this + 33);
  int v165 = *(_DWORD *)(v164 + 296);
  *(_DWORD *)(v164 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0xFFFFFF00;
  uint64_t v166 = *((void *)this + 33);
  int v167 = *(_DWORD *)(v166 + 296);
  *(_DWORD *)(v166 + 296) = v165;
  if (*((void *)this + 1496) || *((_DWORD *)this + 3030) || *((_DWORD *)this + 3031))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1496, 296, 0, 0xFFFFFFFFLL, 8, v167, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 596) = 0;
  int v168 = *(_DWORD *)(*(void *)v13 + 596);
  *(_DWORD *)(*(void *)v13 + 596) = 0;
  *(_DWORD *)(*(void *)v13 + 596) ^= 0x3FFu;
  int v169 = *(_DWORD *)(*(void *)v13 + 596);
  *(_DWORD *)(*(void *)v13 + 596) = v168;
  if (*((void *)this + 1496) || *((_DWORD *)this + 3030) || *((_DWORD *)this + 3031))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1496, 596, 0, 0x3FFFFFFFFFFLL, 32, v169, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 300) = 0;
  uint64_t v170 = *((void *)this + 33);
  int v171 = *(_DWORD *)(v170 + 300);
  *(_DWORD *)(v170 + 300) = 0;
  *(_DWORD *)(*((void *)this + 33) + 300) ^= 0xFFFFFF00;
  uint64_t v172 = *((void *)this + 33);
  int v173 = *(_DWORD *)(v172 + 300);
  *(_DWORD *)(v172 + 300) = v171;
  if (*((void *)this + 1518) || *((_DWORD *)this + 3074) || *((_DWORD *)this + 3075))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1518, 300, 0, 0xFFFFFFFFLL, 8, v173, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 600) = 0;
  int v174 = *(_DWORD *)(*(void *)v13 + 600);
  *(_DWORD *)(*(void *)v13 + 600) = 0;
  *(_DWORD *)(*(void *)v13 + 600) ^= 0x3FFu;
  int v175 = *(_DWORD *)(*(void *)v13 + 600);
  *(_DWORD *)(*(void *)v13 + 600) = v174;
  if (*((void *)this + 1518) || *((_DWORD *)this + 3074) || *((_DWORD *)this + 3075))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1518, 600, 0, 0x3FFFFFFFFFFLL, 32, v175, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 304) = 0;
  uint64_t v176 = *((void *)this + 33);
  int v177 = *(_DWORD *)(v176 + 304);
  *(_DWORD *)(v176 + 304) = 0;
  *(_DWORD *)(*((void *)this + 33) + 304) ^= 0xFFFFFF00;
  uint64_t v178 = *((void *)this + 33);
  int v179 = *(_DWORD *)(v178 + 304);
  *(_DWORD *)(v178 + 304) = v177;
  if (*((void *)this + 1540) || *((_DWORD *)this + 3118) || *((_DWORD *)this + 3119))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1540, 304, 0, 0xFFFFFFFFLL, 8, v179, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 604) = 0;
  int v180 = *(_DWORD *)(*(void *)v13 + 604);
  *(_DWORD *)(*(void *)v13 + 604) = 0;
  *(_DWORD *)(*(void *)v13 + 604) ^= 0x3FFu;
  int v181 = *(_DWORD *)(*(void *)v13 + 604);
  *(_DWORD *)(*(void *)v13 + 604) = v180;
  if (*((void *)this + 1540) || *((_DWORD *)this + 3118) || *((_DWORD *)this + 3119))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1540, 604, 0, 0x3FFFFFFFFFFLL, 32, v181, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 308) = 0;
  uint64_t v182 = *((void *)this + 33);
  int v183 = *(_DWORD *)(v182 + 308);
  *(_DWORD *)(v182 + 308) = 0;
  *(_DWORD *)(*((void *)this + 33) + 308) ^= 0xFFFFFF00;
  uint64_t v184 = *((void *)this + 33);
  int v185 = *(_DWORD *)(v184 + 308);
  *(_DWORD *)(v184 + 308) = v183;
  if (*((void *)this + 1562) || *((_DWORD *)this + 3162) || *((_DWORD *)this + 3163))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1562, 308, 0, 0xFFFFFFFFLL, 8, v185, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 608) = 0;
  int v186 = *(_DWORD *)(*(void *)v13 + 608);
  *(_DWORD *)(*(void *)v13 + 608) = 0;
  *(_DWORD *)(*(void *)v13 + 608) ^= 0x3FFu;
  int v187 = *(_DWORD *)(*(void *)v13 + 608);
  *(_DWORD *)(*(void *)v13 + 608) = v186;
  if (*((void *)this + 1562) || *((_DWORD *)this + 3162) || *((_DWORD *)this + 3163))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1562, 608, 0, 0x3FFFFFFFFFFLL, 32, v187, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 332) = 0;
  *(_DWORD *)(*((void *)this + 33) + 632) = 0;
  if (*(_DWORD *)(*((void *)this + 32) + 16) == 2)
  {
    uint64_t v188 = *((void *)this + 33);
    int v189 = *(_DWORD *)(v188 + 332);
    *(_DWORD *)(v188 + 332) = 0;
    *(_DWORD *)(*((void *)this + 33) + 332) ^= 0xFFFFFF00;
    uint64_t v190 = *((void *)this + 33);
    int v191 = *(_DWORD *)(v190 + 332);
    *(_DWORD *)(v190 + 332) = v189;
    if (*((void *)this + 1650) || *((_DWORD *)this + 3338) || *((_DWORD *)this + 3339))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1650, 332, 0, 0xFFFFFFFFLL, 8, v191, 4);
      if (result) {
        return result;
      }
    }
    int v192 = *(_DWORD *)(*(void *)v13 + 632);
    *(_DWORD *)(*(void *)v13 + 632) = 0;
    *(_DWORD *)(*(void *)v13 + 632) ^= 0x3FFu;
    int v193 = *(_DWORD *)(*(void *)v13 + 632);
    *(_DWORD *)(*(void *)v13 + 632) = v192;
    if (*((void *)this + 1650) || *((_DWORD *)this + 3338) || *((_DWORD *)this + 3339))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1650, 632, 0, 0x3FFFFFFFFFFLL, 32, v193, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 312) = 0;
  *(_DWORD *)(*((void *)this + 33) + 612) = 0;
  uint64_t v194 = *((void *)this + 33);
  int v195 = *(_DWORD *)(v194 + 312);
  *(_DWORD *)(v194 + 312) = 0;
  *(_DWORD *)(*((void *)this + 33) + 312) ^= 0xFFFFFF00;
  uint64_t v196 = *((void *)this + 33);
  int v197 = *(_DWORD *)(v196 + 312);
  *(_DWORD *)(v196 + 312) = v195;
  if (*((void *)this + 1584) || *((_DWORD *)this + 3206) || *((_DWORD *)this + 3207))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1584, 312, 0, 0xFFFFFFFFLL, 8, v197, 4);
    if (result) {
      return result;
    }
  }
  int v198 = *(_DWORD *)(*(void *)v13 + 612);
  *(_DWORD *)(*(void *)v13 + 612) = 0;
  *(_DWORD *)(*(void *)v13 + 612) ^= 0x3FFu;
  int v199 = *(_DWORD *)(*(void *)v13 + 612);
  *(_DWORD *)(*(void *)v13 + 612) = v198;
  if (*((void *)this + 1584) || *((_DWORD *)this + 3206) || *((_DWORD *)this + 3207))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1584, 612, 0, 0x3FFFFFFFFFFLL, 32, v199, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 316) = 0;
  uint64_t v200 = *((void *)this + 33);
  int v201 = *(_DWORD *)(v200 + 316);
  *(_DWORD *)(v200 + 316) = 0;
  *(_DWORD *)(*((void *)this + 33) + 316) ^= 0xFFFFFF00;
  uint64_t v202 = *((void *)this + 33);
  int v203 = *(_DWORD *)(v202 + 316);
  *(_DWORD *)(v202 + 316) = v201;
  if (*((void *)this + 1100) || *((_DWORD *)this + 2238) || *((_DWORD *)this + 2239))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1100, 316, 0, 0xFFFFFFFFLL, 8, v203, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 616) = 0;
  int v204 = *(_DWORD *)(*(void *)v13 + 616);
  *(_DWORD *)(*(void *)v13 + 616) = 0;
  *(_DWORD *)(*(void *)v13 + 616) ^= 0x3FFu;
  int v205 = *(_DWORD *)(*(void *)v13 + 616);
  *(_DWORD *)(*(void *)v13 + 616) = v204;
  if (*((void *)this + 1100) || *((_DWORD *)this + 2238) || *((_DWORD *)this + 2239))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1100, 616, 0, 0x3FFFFFFFFFFLL, 32, v205, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 320) = 0;
  uint64_t v206 = *((void *)this + 33);
  int v207 = *(_DWORD *)(v206 + 320);
  *(_DWORD *)(v206 + 320) = 0;
  *(_DWORD *)(*((void *)this + 33) + 320) ^= 0xFFFFFF00;
  uint64_t v208 = *((void *)this + 33);
  int v209 = *(_DWORD *)(v208 + 320);
  *(_DWORD *)(v208 + 320) = v207;
  int v210 = (void *)((char *)this + 176 * v468 + 8976);
  if (*v210 || *((_DWORD *)this + 44 * v468 + 2282) || *((_DWORD *)this + 44 * v468 + 2283))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v468 + 1122, 320, 0, 0xFFFFFFFFLL, 8, v209, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 620) = 0;
  int v211 = *(_DWORD *)(*(void *)v13 + 620);
  *(_DWORD *)(*(void *)v13 + 620) = 0;
  *(_DWORD *)(*(void *)v13 + 620) ^= 0x3FFu;
  int v212 = *(_DWORD *)(*(void *)v13 + 620);
  *(_DWORD *)(*(void *)v13 + 620) = v211;
  if (*v210 || *((_DWORD *)this + 44 * v468 + 2282) || *((_DWORD *)this + 44 * v468 + 2283))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v210, 620, 0, 0x3FFFFFFFFFFLL, 32, v212, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 324) = 0;
  uint64_t v213 = *((void *)this + 33);
  int v214 = *(_DWORD *)(v213 + 324);
  *(_DWORD *)(v213 + 324) = 0;
  *(_DWORD *)(*((void *)this + 33) + 324) ^= 0xFFFFFF00;
  uint64_t v215 = *((void *)this + 33);
  int v216 = *(_DWORD *)(v215 + 324);
  *(_DWORD *)(v215 + 324) = v214;
  if (*((void *)this + 1606) || *((_DWORD *)this + 3250) || *((_DWORD *)this + 3251))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1606, 324, 0, 0xFFFFFFFFLL, 8, v216, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 624) = 0;
  int v217 = *(_DWORD *)(*(void *)v13 + 624);
  *(_DWORD *)(*(void *)v13 + 624) = 0;
  *(_DWORD *)(*(void *)v13 + 624) ^= 0x3FFu;
  int v218 = *(_DWORD *)(*(void *)v13 + 624);
  *(_DWORD *)(*(void *)v13 + 624) = v217;
  if (*((void *)this + 1606) || *((_DWORD *)this + 3250) || *((_DWORD *)this + 3251))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1606, 624, 0, 0x3FFFFFFFFFFLL, 32, v218, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 328) = 0;
  uint64_t v219 = *((void *)this + 33);
  int v220 = *(_DWORD *)(v219 + 328);
  *(_DWORD *)(v219 + 328) = 0;
  *(_DWORD *)(*((void *)this + 33) + 328) ^= 0xFFFFFF00;
  uint64_t v221 = *((void *)this + 33);
  int v222 = *(_DWORD *)(v221 + 328);
  *(_DWORD *)(v221 + 328) = v220;
  if (*((void *)this + 1628) || *((_DWORD *)this + 3294) || *((_DWORD *)this + 3295))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1628, 328, 0, 0xFFFFFFFFLL, 8, v222, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 628) = 0;
  int v223 = *(_DWORD *)(*(void *)v13 + 628);
  *(_DWORD *)(*(void *)v13 + 628) = 0;
  *(_DWORD *)(*(void *)v13 + 628) ^= 0x3FFu;
  int v224 = *(_DWORD *)(*(void *)v13 + 628);
  *(_DWORD *)(*(void *)v13 + 628) = v223;
  if (*((void *)this + 1628) || *((_DWORD *)this + 3294) || *((_DWORD *)this + 3295))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1628, 628, 0, 0x3FFFFFFFFFFLL, 32, v224, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 336) = 0;
  *(_DWORD *)(*((void *)this + 33) + 636) = 0;
  *(_DWORD *)(*((void *)this + 33) + 340) = 0;
  *(_DWORD *)(*((void *)this + 33) + 640) = 0;
  *(_DWORD *)(*((void *)this + 33) + 344) = 0;
  *(_DWORD *)(*((void *)this + 33) + 644) = 0;
  *(_DWORD *)(*((void *)this + 33) + 348) = 0;
  *(_DWORD *)(*((void *)this + 33) + 648) = 0;
  uint64_t v225 = *((void *)this + 33);
  if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
  {
    int v226 = *(_DWORD *)(v225 + 340);
    *(_DWORD *)(v225 + 340) = 0;
    *(_DWORD *)(*(void *)v13 + 340) ^= 0xFFFFFF80;
    int v227 = *(_DWORD *)(*(void *)v13 + 340);
    *(_DWORD *)(*(void *)v13 + 340) = v226;
    int v229 = (void *)(v459 + 8);
    uint64_t v228 = *(void *)(v459 + 8);
    if (v462)
    {
      if (v228 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v459 + 8), 340, *(_DWORD *)(v459 + 68), 0xFFFFFFFFLL, 7, v227, 4);
        if (result) {
          return result;
        }
      }
      int v230 = *(_DWORD *)(*(void *)v13 + 640);
      *(_DWORD *)(*(void *)v13 + 640) = 0;
      *(_DWORD *)(*(void *)v13 + 640) ^= 0x3FFu;
      int v231 = *(_DWORD *)(*(void *)v13 + 640);
      *(_DWORD *)(*(void *)v13 + 640) = v230;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 640, *(_DWORD *)(v459 + 68), 0x3FFFFFFFFFFLL, 32, v231, 4);
        if (result) {
          return result;
        }
      }
      int v232 = *(_DWORD *)(*(void *)v13 + 336);
      *(_DWORD *)(*(void *)v13 + 336) = 0;
      *(_DWORD *)(*(void *)v13 + 336) ^= 0xFFFFFF80;
      int v233 = *(_DWORD *)(*(void *)v13 + 336);
      *(_DWORD *)(*(void *)v13 + 336) = v232;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 336, *(_DWORD *)(v459 + 80), 0xFFFFFFFFLL, 7, v233, 4);
        if (result) {
          return result;
        }
      }
      int v234 = *(_DWORD *)(*(void *)v13 + 636);
      *(_DWORD *)(*(void *)v13 + 636) = 0;
      *(_DWORD *)(*(void *)v13 + 636) ^= 0x3FFu;
      int v235 = *(_DWORD *)(*(void *)v13 + 636);
      *(_DWORD *)(*(void *)v13 + 636) = v234;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 636, *(_DWORD *)(v459 + 80), 0x3FFFFFFFFFFLL, 32, v235, 4);
        if (result) {
          return result;
        }
      }
      if (v466)
      {
        int v236 = *(_DWORD *)(*(void *)v13 + 348);
        *(_DWORD *)(*(void *)v13 + 348) = 0;
        *(_DWORD *)(*(void *)v13 + 348) ^= 0xFFFFFF80;
        int v237 = *(_DWORD *)(*(void *)v13 + 348);
        *(_DWORD *)(*(void *)v13 + 348) = v236;
        if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, 348, *(_DWORD *)(v465 + 56), 0xFFFFFFFFLL, 7, v237, 4);
          if (result) {
            return result;
          }
        }
        int v238 = *(_DWORD *)(*(void *)v13 + 648);
        *(_DWORD *)(*(void *)v13 + 648) = 0;
        *(_DWORD *)(*(void *)v13 + 648) ^= 0x3FFu;
        int v239 = *(_DWORD *)(*(void *)v13 + 648);
        *(_DWORD *)(*(void *)v13 + 648) = v238;
        if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, 648, *(_DWORD *)(v465 + 56), 0x3FFFFFFFFFFLL, 32, v239, 4);
          if (result) {
            return result;
          }
        }
        int v240 = *(_DWORD *)(*(void *)v13 + 344);
        *(_DWORD *)(*(void *)v13 + 344) = 0;
        *(_DWORD *)(*(void *)v13 + 344) ^= 0xFFFFFF80;
        int v241 = *(_DWORD *)(*(void *)v13 + 344);
        *(_DWORD *)(*(void *)v13 + 344) = v240;
        if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, 344, *(_DWORD *)(v465 + 68), 0xFFFFFFFFLL, 7, v241, 4);
          if (result) {
            return result;
          }
        }
        int v242 = *(_DWORD *)(*(void *)v13 + 644);
        *(_DWORD *)(*(void *)v13 + 644) = 0;
        *(_DWORD *)(*(void *)v13 + 644) ^= 0x3FFu;
        int v243 = *(_DWORD *)(*(void *)v13 + 644);
        *(_DWORD *)(*(void *)v13 + 644) = v242;
        if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
        {
          int v244 = (void *)v465;
          int v245 = *(_DWORD *)(v465 + 68);
          int v246 = this;
LABEL_336:
          int v268 = 644;
LABEL_337:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v246, v244, v268, v245, 0x3FFFFFFFFFFLL, 32, v243, 4);
          if (result) {
            return result;
          }
        }
      }
    }
    else
    {
      if (v228 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v459 + 8), 340, *(_DWORD *)(v459 + 60), 0xFFFFFFFFLL, 7, v227, 4);
        if (result) {
          return result;
        }
      }
      int v269 = *(_DWORD *)(*(void *)v13 + 348);
      *(_DWORD *)(*(void *)v13 + 348) = 0;
      *(_DWORD *)(*(void *)v13 + 348) ^= 0xFFFFFF80;
      int v270 = *(_DWORD *)(*(void *)v13 + 348);
      *(_DWORD *)(*(void *)v13 + 348) = v269;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 348, *(_DWORD *)(v459 + 64), 0xFFFFFFFFLL, 7, v270, 4);
        if (result) {
          return result;
        }
      }
      int v271 = *(_DWORD *)(*(void *)v13 + 336);
      *(_DWORD *)(*(void *)v13 + 336) = 0;
      *(_DWORD *)(*(void *)v13 + 336) ^= 0xFFFFFF80;
      int v272 = *(_DWORD *)(*(void *)v13 + 336);
      *(_DWORD *)(*(void *)v13 + 336) = v271;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 336, *(_DWORD *)(v459 + 72), 0xFFFFFFFFLL, 7, v272, 4);
        if (result) {
          return result;
        }
      }
      int v273 = *(_DWORD *)(*(void *)v13 + 344);
      *(_DWORD *)(*(void *)v13 + 344) = 0;
      *(_DWORD *)(*(void *)v13 + 344) ^= 0xFFFFFF80;
      int v274 = *(_DWORD *)(*(void *)v13 + 344);
      *(_DWORD *)(*(void *)v13 + 344) = v273;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 344, *(_DWORD *)(v459 + 76), 0xFFFFFFFFLL, 7, v274, 4);
        if (result) {
          return result;
        }
      }
      int v275 = *(_DWORD *)(*(void *)v13 + 640);
      *(_DWORD *)(*(void *)v13 + 640) = 0;
      *(_DWORD *)(*(void *)v13 + 640) ^= 0x3FFu;
      int v276 = *(_DWORD *)(*(void *)v13 + 640);
      *(_DWORD *)(*(void *)v13 + 640) = v275;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 640, *(_DWORD *)(v459 + 60), 0x3FFFFFFFFFFLL, 32, v276, 4);
        if (result) {
          return result;
        }
      }
      int v277 = *(_DWORD *)(*(void *)v13 + 648);
      *(_DWORD *)(*(void *)v13 + 648) = 0;
      *(_DWORD *)(*(void *)v13 + 648) ^= 0x3FFu;
      int v278 = *(_DWORD *)(*(void *)v13 + 648);
      *(_DWORD *)(*(void *)v13 + 648) = v277;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 648, *(_DWORD *)(v459 + 64), 0x3FFFFFFFFFFLL, 32, v278, 4);
        if (result) {
          return result;
        }
      }
      int v279 = *(_DWORD *)(*(void *)v13 + 636);
      *(_DWORD *)(*(void *)v13 + 636) = 0;
      *(_DWORD *)(*(void *)v13 + 636) ^= 0x3FFu;
      int v280 = *(_DWORD *)(*(void *)v13 + 636);
      *(_DWORD *)(*(void *)v13 + 636) = v279;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 636, *(_DWORD *)(v459 + 72), 0x3FFFFFFFFFFLL, 32, v280, 4);
        if (result) {
          return result;
        }
      }
      int v281 = *(_DWORD *)(*(void *)v13 + 644);
      *(_DWORD *)(*(void *)v13 + 644) = 0;
      *(_DWORD *)(*(void *)v13 + 644) ^= 0x3FFu;
      int v243 = *(_DWORD *)(*(void *)v13 + 644);
      *(_DWORD *)(*(void *)v13 + 644) = v281;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        int v245 = *(_DWORD *)(v459 + 76);
        int v246 = this;
        int v244 = (void *)(v459 + 8);
        goto LABEL_336;
      }
    }
  }
  else
  {
    int v247 = *(_DWORD *)(v225 + 336);
    *(_DWORD *)(v225 + 336) = 0;
    *(_DWORD *)(*((void *)this + 33) + 336) ^= 0xFFFFFF80;
    uint64_t v248 = *((void *)this + 33);
    int v249 = *(_DWORD *)(v248 + 336);
    *(_DWORD *)(v248 + 336) = v247;
    uint64_t v250 = (void *)((char *)this + 176 * v468 + 528);
    if (*v250 || *((_DWORD *)this + 44 * v468 + 170) || *((_DWORD *)this + 44 * v468 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v468 + 66, 336, 0, 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    int v251 = *(_DWORD *)(*(void *)v13 + 636);
    *(_DWORD *)(*(void *)v13 + 636) = 0;
    *(_DWORD *)(*(void *)v13 + 636) ^= 0x3FFu;
    int v252 = *(_DWORD *)(*(void *)v13 + 636);
    *(_DWORD *)(*(void *)v13 + 636) = v251;
    if (*v250 || *((_DWORD *)this + 44 * v468 + 170) || *((_DWORD *)this + 44 * v468 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v250, 636, 0, 0x3FFFFFFFFFFLL, 32, v252, 4);
      if (result) {
        return result;
      }
    }
    int v253 = *(_DWORD *)(*(void *)v13 + 340);
    *(_DWORD *)(*(void *)v13 + 340) = 0;
    *(_DWORD *)(*(void *)v13 + 340) ^= 0xFFFFFF80;
    int v254 = *(_DWORD *)(*(void *)v13 + 340);
    *(_DWORD *)(*(void *)v13 + 340) = v253;
    unint64_t v255 = (void *)(v459 + 8);
    if (*(void *)(v459 + 8) || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v459 + 8), 340, *(_DWORD *)(v459 + 60), 0xFFFFFFFFLL, 7, v254, 4);
      if (result) {
        return result;
      }
    }
    int v256 = *(_DWORD *)(*(void *)v13 + 640);
    *(_DWORD *)(*(void *)v13 + 640) = 0;
    *(_DWORD *)(*(void *)v13 + 640) ^= 0x3FFu;
    int v257 = *(_DWORD *)(*(void *)v13 + 640);
    *(_DWORD *)(*(void *)v13 + 640) = v256;
    if (*v255 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v255, 640, *(_DWORD *)(v459 + 60), 0x3FFFFFFFFFFLL, 32, v257, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v258 = *((void *)this + 33);
    int v259 = *(_DWORD *)(v258 + 344);
    *(_DWORD *)(v258 + 344) = 0;
    *(_DWORD *)(*((void *)this + 33) + 344) ^= 0xFFFFFF80;
    uint64_t v260 = *((void *)this + 33);
    int v261 = *(_DWORD *)(v260 + 344);
    *(_DWORD *)(v260 + 344) = v259;
    uint64_t v262 = (void *)((char *)this + 176 * v468 + 3344);
    if (*v262 || *((_DWORD *)this + 44 * v468 + 874) || *((_DWORD *)this + 44 * v468 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v468 + 418, 344, 0, 0xFFFFFFFFLL, 7, v261, 4);
      if (result) {
        return result;
      }
    }
    int v263 = *(_DWORD *)(*(void *)v157 + 644);
    *(_DWORD *)(*(void *)v157 + 644) = 0;
    *(_DWORD *)(*(void *)v157 + 644) ^= 0x3FFu;
    int v264 = *(_DWORD *)(*(void *)v157 + 644);
    *(_DWORD *)(*(void *)v157 + 644) = v263;
    if (*v262 || *((_DWORD *)this + 44 * v468 + 874) || *((_DWORD *)this + 44 * v468 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v262, 644, 0, 0x3FFFFFFFFFFLL, 32, v264, 4);
      if (result) {
        return result;
      }
    }
    int v265 = *(_DWORD *)(*(void *)v157 + 348);
    *(_DWORD *)(*(void *)v157 + 348) = 0;
    *(_DWORD *)(*(void *)v157 + 348) ^= 0xFFFFFF80;
    int v266 = *(_DWORD *)(*(void *)v157 + 348);
    *(_DWORD *)(*(void *)v157 + 348) = v265;
    if (*v255 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v255, 348, *(_DWORD *)(v459 + 64), 0xFFFFFFFFLL, 7, v266, 4);
      if (result) {
        return result;
      }
    }
    int v267 = *(_DWORD *)(*(void *)v157 + 648);
    *(_DWORD *)(*(void *)v157 + 648) = 0;
    *(_DWORD *)(*(void *)v157 + 648) ^= 0x3FFu;
    int v243 = *(_DWORD *)(*(void *)v157 + 648);
    *(_DWORD *)(*(void *)v157 + 648) = v267;
    if (*v255 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
    {
      int v245 = *(_DWORD *)(v459 + 64);
      int v246 = this;
      int v244 = (void *)(v459 + 8);
      int v268 = 648;
      goto LABEL_337;
    }
  }
  if (!(*(_DWORD *)(v156 + 88) & 0x2000 | v460))
  {
    *(_DWORD *)(v156 + 88) |= 0x2000u;
    *((_DWORD *)this + v468 + 116) = 1;
    *(_DWORD *)(*((void *)this + 33) + 352) = 0;
    goto LABEL_454;
  }
  *((_DWORD *)this + v468 + 116) = 0;
  *(_DWORD *)(*((void *)this + 33) + 352) = 0;
  if (v460)
  {
    uint64_t v282 = 0;
    uint64_t v283 = (uint64_t *)v492;
    v474 = (void **)v491;
    v471 = (void **)v490;
    do
    {
      uint64_t v284 = *v283;
      if (!*v283 || !*(void *)(v284 + 48)) {
        return 0xFFFFFFFFLL;
      }
      int v285 = v475;
      if (v475)
      {
        uint64_t v286 = *(unsigned int *)(v284 + 44);
        *(void *)buf = 0;
        if (((*(uint64_t (**)(void, uint64_t, uint8_t *))(**((void **)this + 32) + 304))(*((void *)this + 32), v286, buf) & 1) == 0)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          __int16 v479 = 0;
          unsigned int v52 = &_os_log_internal;
          uint64_t v53 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
          int v152 = (uint8_t *)&v479;
          uint32_t v153 = 2;
          goto LABEL_140;
        }
        *(void *)(v284 + 48) = *(void *)buf + 8;
        int v285 = 0x2000000;
      }
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) = *(_DWORD *)(*((void *)this + 33) + v282 + 352) & 0xFFFFFFF | ((v460 << 28) - 0x10000000);
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) &= 0xF3FFFFFF;
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) = *(_DWORD *)(*((void *)this + 33) + v282 + 352) & 0xFDFFFFFF | v285;
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) |= 0x1000000u;
      int v287 = v461 - *(_DWORD *)(v284 + 12);
      int v288 = v287 & 0x1FFFF;
      if (v287 < -32768) {
        int v288 = 98304;
      }
      if (v287 <= 0x8000) {
        int v289 = v288;
      }
      else {
        int v289 = 0x8000;
      }
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) = *(_DWORD *)(*((void *)this + 33) + v282 + 352) & 0xFFFE0000 | v289;
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) = *(_DWORD *)(*((void *)this + 33) + v282 + 352) & 0xFFFDFFFF | ((*(_DWORD *)(v284 + 20) == 2) << 17);
      *(_DWORD *)(*((void *)this + 33) + v282 + 384) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 652) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 416) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 684) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 448) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 716) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 480) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 748) = 0;
      uint64_t v290 = *((void *)this + 33);
      if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
      {
        int v291 = v282 + 416;
        uint64_t v292 = v290 + v282;
        int v293 = *(_DWORD *)(v292 + 416);
        *(_DWORD *)(v292 + 416) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 416) ^= 0xFFFFFF80;
        uint64_t v294 = *(void *)v157 + v282;
        int v295 = *(_DWORD *)(v294 + 416);
        *(_DWORD *)(v294 + 416) = v293;
        int v296 = *(uint64_t **)(v284 + 48);
        uint64_t v297 = *v296;
        if (v462)
        {
          if (v297 || *((_DWORD *)v296 + 38) || *((_DWORD *)v296 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v296, v291, *((_DWORD *)v296 + 15), 0xFFFFFFFFLL, 7, v295, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v298 = *(void *)v157 + v282;
          int v299 = *(_DWORD *)(v298 + 684);
          *(_DWORD *)(v298 + 684) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 684) ^= 0x3FFu;
          uint64_t v300 = *(void *)v157 + v282;
          int v301 = *(_DWORD *)(v300 + 684);
          *(_DWORD *)(v300 + 684) = v299;
          uint64_t v302 = *(void *)(v284 + 48);
          if (*(void *)v302 || *(_DWORD *)(v302 + 152) || *(_DWORD *)(v302 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v302, (int)v282 + 684, *(_DWORD *)(v302 + 60), 0x3FFFFFFFFFFLL, 32, v301, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v303 = *(void *)v157 + v282;
          int v304 = *(_DWORD *)(v303 + 384);
          *(_DWORD *)(v303 + 384) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 384) ^= 0xFFFFFF80;
          uint64_t v305 = *(void *)v157 + v282;
          int v306 = *(_DWORD *)(v305 + 384);
          *(_DWORD *)(v305 + 384) = v304;
          uint64_t v307 = *(void *)(v284 + 48);
          if (*(void *)v307 || *(_DWORD *)(v307 + 152) || *(_DWORD *)(v307 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v307, (int)v282 + 384, *(_DWORD *)(v307 + 72), 0xFFFFFFFFLL, 7, v306, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v308 = *(void *)v157 + v282;
          int v309 = *(_DWORD *)(v308 + 652);
          *(_DWORD *)(v308 + 652) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 652) ^= 0x3FFu;
          uint64_t v310 = *(void *)v157 + v282;
          int v311 = *(_DWORD *)(v310 + 652);
          *(_DWORD *)(v310 + 652) = v309;
          uint64_t v312 = *(void *)(v284 + 48);
          if (*(void *)v312 || *(_DWORD *)(v312 + 152) || *(_DWORD *)(v312 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v312, (int)v282 + 652, *(_DWORD *)(v312 + 72), 0x3FFFFFFFFFFLL, 32, v311, 4);
            if (result) {
              return result;
            }
          }
          if (v466)
          {
            uint64_t v313 = *(void *)v157 + v282;
            int v314 = *(_DWORD *)(v313 + 480);
            *(_DWORD *)(v313 + 480) = 0;
            *(_DWORD *)(*(void *)v157 + v282 + 480) ^= 0xFFFFFF80;
            uint64_t v315 = *(void *)v157 + v282;
            int v316 = *(_DWORD *)(v315 + 480);
            *(_DWORD *)(v315 + 480) = v314;
            if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, (int)v282 + 480, *(_DWORD *)(v465 + 56), 0xFFFFFFFFLL, 7, v316, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v317 = *(void *)v157 + v282;
            int v318 = *(_DWORD *)(v317 + 748);
            *(_DWORD *)(v317 + 748) = 0;
            *(_DWORD *)(*(void *)v157 + v282 + 748) ^= 0x3FFu;
            uint64_t v319 = *(void *)v157 + v282;
            int v320 = *(_DWORD *)(v319 + 748);
            *(_DWORD *)(v319 + 748) = v318;
            if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, (int)v282 + 748, *(_DWORD *)(v465 + 56), 0x3FFFFFFFFFFLL, 32, v320, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v321 = *(void *)v157 + v282;
            int v322 = *(_DWORD *)(v321 + 448);
            *(_DWORD *)(v321 + 448) = 0;
            *(_DWORD *)(*(void *)v157 + v282 + 448) ^= 0xFFFFFF80;
            uint64_t v323 = *(void *)v157 + v282;
            int v324 = *(_DWORD *)(v323 + 448);
            *(_DWORD *)(v323 + 448) = v322;
            if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, (int)v282 + 448, *(_DWORD *)(v465 + 68), 0xFFFFFFFFLL, 7, v324, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v325 = *(void *)v157 + v282;
            int v326 = *(_DWORD *)(v325 + 716);
            *(_DWORD *)(v325 + 716) = 0;
            *(_DWORD *)(*(void *)v157 + v282 + 716) ^= 0x3FFu;
            uint64_t v327 = *(void *)v157 + v282;
            int v328 = *(_DWORD *)(v327 + 716);
            *(_DWORD *)(v327 + 716) = v326;
            if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
            {
              int v329 = v282 + 716;
              uint64_t v330 = v465;
LABEL_451:
              int v367 = *(_DWORD *)(v330 + 68);
LABEL_452:
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v330, v329, v367, 0x3FFFFFFFFFFLL, 32, v328, 4);
              if (result) {
                return result;
              }
            }
          }
        }
        else
        {
          if (v297 || *((_DWORD *)v296 + 38) || *((_DWORD *)v296 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v296, v291, *((_DWORD *)v296 + 13), 0xFFFFFFFFLL, 7, v295, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v368 = *(void *)v157 + v282;
          int v369 = *(_DWORD *)(v368 + 480);
          *(_DWORD *)(v368 + 480) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 480) ^= 0xFFFFFF80;
          uint64_t v370 = *(void *)v157 + v282;
          int v371 = *(_DWORD *)(v370 + 480);
          *(_DWORD *)(v370 + 480) = v369;
          uint64_t v372 = *(void *)(v284 + 48);
          if (*(void *)v372 || *(_DWORD *)(v372 + 152) || *(_DWORD *)(v372 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v372, (int)v282 + 480, *(_DWORD *)(v372 + 56), 0xFFFFFFFFLL, 7, v371, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v373 = *(void *)v157 + v282;
          int v374 = *(_DWORD *)(v373 + 384);
          *(_DWORD *)(v373 + 384) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 384) ^= 0xFFFFFF80;
          uint64_t v375 = *(void *)v157 + v282;
          int v376 = *(_DWORD *)(v375 + 384);
          *(_DWORD *)(v375 + 384) = v374;
          uint64_t v377 = *(void *)(v284 + 48);
          if (*(void *)v377 || *(_DWORD *)(v377 + 152) || *(_DWORD *)(v377 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v377, (int)v282 + 384, *(_DWORD *)(v377 + 64), 0xFFFFFFFFLL, 7, v376, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v378 = *(void *)v157 + v282;
          int v379 = *(_DWORD *)(v378 + 448);
          *(_DWORD *)(v378 + 448) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 448) ^= 0xFFFFFF80;
          uint64_t v380 = *(void *)v157 + v282;
          int v381 = *(_DWORD *)(v380 + 448);
          *(_DWORD *)(v380 + 448) = v379;
          uint64_t v382 = *(void *)(v284 + 48);
          if (*(void *)v382 || *(_DWORD *)(v382 + 152) || *(_DWORD *)(v382 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v382, (int)v282 + 448, *(_DWORD *)(v382 + 68), 0xFFFFFFFFLL, 7, v381, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v383 = *(void *)v157 + v282;
          int v384 = *(_DWORD *)(v383 + 684);
          *(_DWORD *)(v383 + 684) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 684) ^= 0x3FFu;
          uint64_t v385 = *(void *)v157 + v282;
          int v386 = *(_DWORD *)(v385 + 684);
          *(_DWORD *)(v385 + 684) = v384;
          uint64_t v387 = *(void *)(v284 + 48);
          if (*(void *)v387 || *(_DWORD *)(v387 + 152) || *(_DWORD *)(v387 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v387, (int)v282 + 684, *(_DWORD *)(v387 + 52), 0x3FFFFFFFFFFLL, 32, v386, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v388 = *(void *)v157 + v282;
          int v389 = *(_DWORD *)(v388 + 748);
          *(_DWORD *)(v388 + 748) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 748) ^= 0x3FFu;
          uint64_t v390 = *(void *)v157 + v282;
          int v391 = *(_DWORD *)(v390 + 748);
          *(_DWORD *)(v390 + 748) = v389;
          uint64_t v392 = *(void *)(v284 + 48);
          if (*(void *)v392 || *(_DWORD *)(v392 + 152) || *(_DWORD *)(v392 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v392, (int)v282 + 748, *(_DWORD *)(v392 + 56), 0x3FFFFFFFFFFLL, 32, v391, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v393 = *(void *)v157 + v282;
          int v394 = *(_DWORD *)(v393 + 652);
          *(_DWORD *)(v393 + 652) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 652) ^= 0x3FFu;
          uint64_t v395 = *(void *)v157 + v282;
          int v396 = *(_DWORD *)(v395 + 652);
          *(_DWORD *)(v395 + 652) = v394;
          uint64_t v397 = *(void *)(v284 + 48);
          if (*(void *)v397 || *(_DWORD *)(v397 + 152) || *(_DWORD *)(v397 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v397, (int)v282 + 652, *(_DWORD *)(v397 + 64), 0x3FFFFFFFFFFLL, 32, v396, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v398 = *(void *)v157 + v282;
          int v399 = *(_DWORD *)(v398 + 716);
          *(_DWORD *)(v398 + 716) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 716) ^= 0x3FFu;
          uint64_t v400 = *(void *)v157 + v282;
          int v328 = *(_DWORD *)(v400 + 716);
          *(_DWORD *)(v400 + 716) = v399;
          uint64_t v330 = *(void *)(v284 + 48);
          if (*(void *)v330 || *(_DWORD *)(v330 + 152) || *(_DWORD *)(v330 + 156))
          {
            int v329 = v282 + 716;
            goto LABEL_451;
          }
        }
      }
      else
      {
        uint64_t v331 = v290 + v282;
        int v332 = *(_DWORD *)(v331 + 384);
        *(_DWORD *)(v331 + 384) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 384) ^= 0xFFFFFF80;
        uint64_t v333 = *(void *)v157 + v282;
        int v334 = *(_DWORD *)(v333 + 384);
        *(_DWORD *)(v333 + 384) = v332;
        uint64_t v335 = (uint64_t)*v474;
        if (**v474 || *(_DWORD *)(v335 + 152) || *(_DWORD *)(v335 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v474, (int)v282 + 384, 0, 0xFFFFFFFFLL, 7, v334, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v336 = *(void *)v157 + v282;
        int v337 = *(_DWORD *)(v336 + 652);
        *(_DWORD *)(v336 + 652) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 652) ^= 0x3FFu;
        uint64_t v338 = *(void *)v157 + v282;
        int v339 = *(_DWORD *)(v338 + 652);
        *(_DWORD *)(v338 + 652) = v337;
        if (*(void *)v335 || *(_DWORD *)(v335 + 152) || *(_DWORD *)(v335 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v335, (int)v282 + 652, 0, 0x3FFFFFFFFFFLL, 32, v339, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v340 = *(void *)v157 + v282;
        int v341 = *(_DWORD *)(v340 + 416);
        *(_DWORD *)(v340 + 416) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 416) ^= 0xFFFFFF80;
        uint64_t v342 = *(void *)v157 + v282;
        int v343 = *(_DWORD *)(v342 + 416);
        *(_DWORD *)(v342 + 416) = v341;
        uint64_t v344 = *(void *)(v284 + 48);
        if (*(void *)v344 || *(_DWORD *)(v344 + 152) || *(_DWORD *)(v344 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v344, (int)v282 + 416, *(_DWORD *)(v344 + 52), 0xFFFFFFFFLL, 7, v343, 4);
          if (result) {
            return result;
          }
        }
        *(_DWORD *)(*(void *)v157 + v282 + 684) = 0;
        uint64_t v345 = *(void *)v157 + v282;
        int v346 = *(_DWORD *)(v345 + 684);
        *(_DWORD *)(v345 + 684) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 684) ^= 0x3FFu;
        uint64_t v347 = *(void *)v157 + v282;
        int v348 = *(_DWORD *)(v347 + 684);
        *(_DWORD *)(v347 + 684) = v346;
        uint64_t v349 = *(void *)(v284 + 48);
        if (*(void *)v349 || *(_DWORD *)(v349 + 152) || *(_DWORD *)(v349 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v349, (int)v282 + 684, *(_DWORD *)(v349 + 52), 0x3FFFFFFFFFFLL, 32, v348, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v350 = *(void *)v157 + v282;
        int v351 = *(_DWORD *)(v350 + 448);
        *(_DWORD *)(v350 + 448) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 448) ^= 0xFFFFFF80;
        uint64_t v352 = *(void *)v157 + v282;
        int v353 = *(_DWORD *)(v352 + 448);
        *(_DWORD *)(v352 + 448) = v351;
        uint64_t v354 = (uint64_t)*v471;
        if (**v471 || *(_DWORD *)(v354 + 152) || *(_DWORD *)(v354 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v471, (int)v282 + 448, 0, 0xFFFFFFFFLL, 7, v353, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v355 = *(void *)v157 + v282;
        int v356 = *(_DWORD *)(v355 + 716);
        *(_DWORD *)(v355 + 716) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 716) ^= 0x3FFu;
        uint64_t v357 = *(void *)v157 + v282;
        int v358 = *(_DWORD *)(v357 + 716);
        *(_DWORD *)(v357 + 716) = v356;
        if (*(void *)v354 || *(_DWORD *)(v354 + 152) || *(_DWORD *)(v354 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v354, (int)v282 + 716, 0, 0x3FFFFFFFFFFLL, 32, v358, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v359 = *(void *)v157 + v282;
        int v360 = *(_DWORD *)(v359 + 480);
        *(_DWORD *)(v359 + 480) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 480) ^= 0xFFFFFF80;
        uint64_t v361 = *(void *)v157 + v282;
        int v362 = *(_DWORD *)(v361 + 480);
        *(_DWORD *)(v361 + 480) = v360;
        uint64_t v363 = *(void *)(v284 + 48);
        if (*(void *)v363 || *(_DWORD *)(v363 + 152) || *(_DWORD *)(v363 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v363, (int)v282 + 480, *(_DWORD *)(v363 + 56), 0xFFFFFFFFLL, 7, v362, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v364 = *(void *)v157 + v282;
        int v365 = *(_DWORD *)(v364 + 748);
        *(_DWORD *)(v364 + 748) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 748) ^= 0x3FFu;
        uint64_t v366 = *(void *)v157 + v282;
        int v328 = *(_DWORD *)(v366 + 748);
        *(_DWORD *)(v366 + 748) = v365;
        uint64_t v330 = *(void *)(v284 + 48);
        if (*(void *)v330 || *(_DWORD *)(v330 + 152) || *(_DWORD *)(v330 + 156))
        {
          int v329 = v282 + 748;
          int v367 = *(_DWORD *)(v330 + 56);
          goto LABEL_452;
        }
      }
      v282 += 4;
      ++v283;
      ++v474;
      ++v471;
    }
    while (4 * v460 != v282);
  }
LABEL_454:
  *(_DWORD *)(*(void *)v157 + 512) = 0;
  *(_DWORD *)(*(void *)v157 + 516) = 0;
  *(_DWORD *)(*(void *)v157 + 520) = 0;
  *(_DWORD *)(*(void *)v157 + 524) = 0;
  if (!v476) {
    goto LABEL_512;
  }
  uint64_t v401 = *((void *)this + 32);
  if (v463 && v464 == 2)
  {
    int v402 = *(_DWORD *)(*(void *)(v401 + 8360) + 60);
    uint64_t v403 = *((void *)this + 33);
    int v404 = *(_DWORD *)(v403 + 512);
    *(_DWORD *)(v403 + 512) = 0;
    *(_DWORD *)(*((void *)this + 33) + 512) ^= 0xFFFFFFC0;
    uint64_t v405 = *((void *)this + 33);
    int v406 = *(_DWORD *)(v405 + 512);
    *(_DWORD *)(v405 + 512) = v404;
    uint64_t v407 = *(void *)(*((void *)this + 32) + 8360);
    if (!*(void *)v407 && !*(_DWORD *)(v407 + 152) && !*(_DWORD *)(v407 + 156)
      || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v407, 512, v402, 0xFFFFFFFFLL, 6, v406, 4),
          !result))
    {
      uint64_t v408 = *((void *)this + 33);
      int v409 = *(_DWORD *)(v408 + 780);
      *(_DWORD *)(v408 + 780) = 0;
      *(_DWORD *)(*((void *)this + 33) + 780) ^= 0x3FFu;
      uint64_t v410 = *((void *)this + 33);
      int v411 = *(_DWORD *)(v410 + 780);
      *(_DWORD *)(v410 + 780) = v409;
      uint64_t v412 = *(void *)(*((void *)this + 32) + 8360);
      if (!*(void *)v412 && !*(_DWORD *)(v412 + 152) && !*(_DWORD *)(v412 + 156)) {
        goto LABEL_544;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v412, 780, v402, 0x3FFFFFFFFFFLL, 32, v411, 4);
      if (!result)
      {
LABEL_544:
        if (!v466) {
          goto LABEL_474;
        }
        if ((int v413 = *(_DWORD *)(v465 + 56),
              int v414 = *(_DWORD *)(*(void *)v157 + 516),
              *(_DWORD *)(*(void *)v157 + 516) = 0,
              *(_DWORD *)(*(void *)v157 + 516) ^= 0xFFFFFFC0,
              int v415 = *(_DWORD *)(*(void *)v157 + 516),
              *(_DWORD *)(*(void *)v157 + 516) = v414,
              !*(void *)v465)
          && !*(_DWORD *)(v465 + 152)
          && !*(_DWORD *)(v465 + 156)
          || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, 516, v413, 0xFFFFFFFFLL, 6, v415, 4),
              !result))
        {
          if ((int v416 = *(_DWORD *)(*(void *)v157 + 784),
                *(_DWORD *)(*(void *)v157 + 784) = 0,
                *(_DWORD *)(*(void *)v157 + 784) ^= 0x3FFu,
                int v417 = *(_DWORD *)(*(void *)v157 + 784),
                *(_DWORD *)(*(void *)v157 + 784) = v416,
                !*(void *)v465)
            && !*(_DWORD *)(v465 + 152)
            && !*(_DWORD *)(v465 + 156)
            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, 784, v413, 0x3FFFFFFFFFFLL, 32, v417, 4), !result))
          {
LABEL_474:
            if (!v467)
            {
              if (CAHDecHibiscusHevc::getSWRStride(this, *(unsigned __int16 *)(v156 + 160)- *(unsigned __int16 *)(v156 + 156)+ 1, *(_DWORD *)(v478 + 23176 * v131 + 3636), *(_DWORD *)(v478 + 23176 * v131 + 3640), *(_DWORD *)(v478 + 23176 * v131 + 22852)))return 0xFFFFFFFFLL; {
              *(_DWORD *)(*((void *)this + 33) + 520) = *(_DWORD *)(*((void *)this + 33) + 520) & 0xFFFC003F | (((*((_DWORD *)this + 3352) >> 6) & 0xFFF) << 6);
              }
              if (!v466)
              {
LABEL_512:
                uint64_t v447 = *((void *)this + 32);
                if (*(_DWORD *)(v447 + 2360) == 1)
                {
                  uint64_t v448 = *(void *)v157;
                  *(_DWORD *)(*(void *)v157 + 884) = *(_DWORD *)(*(void *)v157 + 884) & 0xFFFFFFFE | *(_DWORD *)(v447 + 2508) & 1;
                  if (*(_DWORD *)(v447 + 2508))
                  {
                    *(_DWORD *)(v448 + 2884) = 0x10000000;
                    *(_DWORD *)(v448 + 2888) = *(_DWORD *)(v447 + 2368);
                    *(void *)(v448 + 2896) = 0;
                    *(_DWORD *)(v448 + 2892) = 0;
                    *(_OWORD *)(v448 + 2904) = *(_OWORD *)(v447 + 2372);
                    long long v449 = *(_OWORD *)(v447 + 2388);
                    *(_OWORD *)(v448 + 2936) = *(_OWORD *)(v447 + 2404);
                    *(_OWORD *)(v448 + 2920) = v449;
                  }
                  *(_DWORD *)(*(void *)v157 + 884) = *(_DWORD *)(*(void *)v157 + 884) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v447 + 2512) & 1));
                  if (*(_DWORD *)(v447 + 2512))
                  {
                    *(_DWORD *)(v448 + 2952) = 0;
                    if (!*(_DWORD *)(v447 + 2424))
                    {
                      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                        return 0xFFFFFFFFLL;
                      }
                      *(_DWORD *)buf = 136315138;
                      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                      unsigned int v52 = &_os_log_internal;
                      uint64_t v53 = "AppleAVD: %s(): H13A descrambler is not supported\n";
LABEL_534:
                      int v152 = buf;
                      uint32_t v153 = 12;
                      goto LABEL_140;
                    }
                    *(_DWORD *)(v447 + 2640) = 0;
                    int v450 = *(_DWORD *)(v448 + 2952) & 0xF7FFFFF | ((*(_DWORD *)(v447 + 2420) & 1) << 23) | 0x20000000;
                    *(_DWORD *)(v448 + 2952) = v450;
                    *(_DWORD *)(v448 + 2952) = v450 & 0xFFC00000 | (*(_DWORD *)(v447 + 2364) == 0);
                    long long v451 = *(_OWORD *)(v447 + 2428);
                    long long v452 = *(_OWORD *)(v447 + 2444);
                    *(_OWORD *)(v448 + 2988) = *(_OWORD *)(v447 + 2460);
                    *(_OWORD *)(v448 + 2972) = v452;
                    *(_OWORD *)(v448 + 2956) = v451;
                  }
                  *(_DWORD *)(*(void *)v157 + 884) = *(_DWORD *)(*(void *)v157 + 884) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v447 + 2516) & 1));
                  *(_DWORD *)(*(void *)v157 + 884) = *(_DWORD *)(*(void *)v157 + 884) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v447 + 2520) & 1));
                  *(_DWORD *)(*(void *)v157 + 884) = *(_DWORD *)(*(void *)v157 + 884) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v447 + 2524) & 1));
                  if (*(_DWORD *)(v447 + 2516))
                  {
                    *(_DWORD *)(v448 + 3112) = 0;
                    if (*(_DWORD *)(v447 + 2476) == 2) {
                      int v453 = 805306368;
                    }
                    else {
                      int v453 = 813694976;
                    }
                    *(_DWORD *)(v448 + 3112) = v453;
                    memcpy((void *)(v448 + 3116), (const void *)(v447 + 2480), 4 * *(unsigned int *)(v447 + 2476));
                    *(_DWORD *)(v447 + 2516) = 0;
                  }
                  *(_DWORD *)(*(void *)v157 + 884) = *(_DWORD *)(*(void *)v157 + 884) & 0xFFFFFFDF | (32 * (*(_DWORD *)(v447 + 2632) & 1));
                  if (*(_DWORD *)(v447 + 2632))
                  {
                    *(_DWORD *)(v448 + 3004) = 0x80000000;
                    unsigned int v454 = ((*(_DWORD *)(v447 + 2528) & 1) << 27) | 0x80000000;
                    *(_DWORD *)(v448 + 3004) = v454;
                    *(_DWORD *)(v448 + 3004) = v454 | (((2 * *(_DWORD *)(v447 + 2528)) & 4 | (*(_DWORD *)(v447 + 2528) >> 1) & 2 | (*(_DWORD *)(v447 + 2528) >> 3) & 1) << 24);
                    long long v455 = *(_OWORD *)(v447 + 2532);
                    long long v456 = *(_OWORD *)(v447 + 2548);
                    *(_OWORD *)(v448 + 3040) = *(_OWORD *)(v447 + 2564);
                    *(_OWORD *)(v448 + 3024) = v456;
                    *(_OWORD *)(v448 + 3008) = v455;
                    *(void *)(v448 + 3056) = *(void *)(v447 + 2580);
                    *(void *)(v448 + 3064) = *(void *)(v447 + 2588);
                    int v457 = *(_DWORD *)(v447 + 2528);
                    if ((v457 & 6) != 0 && (v457 & 8) == 0)
                    {
                      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                        return 0xFFFFFFFFLL;
                      }
                      *(_DWORD *)buf = 136315138;
                      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                      unsigned int v52 = &_os_log_internal;
                      uint64_t v53 = "AppleAVD: %s(): chip id is not used while ecid and/or board id is used\n";
                      goto LABEL_534;
                    }
                    *(_OWORD *)(v448 + 3072) = *(_OWORD *)(v447 + 2596);
                  }
                  *(_DWORD *)(*(void *)v157 + 884) = *(_DWORD *)(*(void *)v157 + 884) & 0xFFFFFFBF | ((*(_DWORD *)(v447 + 2636) & 1) << 6);
                  if (*(_DWORD *)(v447 + 2636))
                  {
                    uint64_t result = 0;
                    *(_DWORD *)(v448 + 3088) = -1879048192;
                    *(_DWORD *)(v448 + 3088) = ((*(_DWORD *)(v447 + 2612) & 1) << 23) | 0x90000000;
                    *(_OWORD *)(v448 + 3092) = *(_OWORD *)(v447 + 2616);
                    *(_DWORD *)(v447 + 2640) = 1;
                    return result;
                  }
                }
                return 0;
              }
              v446 = (_DWORD *)((char *)this + 13412);
LABEL_511:
              *(_DWORD *)(*(void *)v157 + 524) = *(_DWORD *)(*(void *)v157 + 524) & 0xFFF8003F | (((*v446 >> 6) & 0x1FFF) << 6);
              goto LABEL_512;
            }
            *(_DWORD *)(*((void *)this + 33) + 520) = *(_DWORD *)(*((void *)this + 33) + 520) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 84) >> 6) & 0xFFF) << 6);
            if (!v466) {
              goto LABEL_512;
            }
            uint64_t v418 = v465;
LABEL_510:
            v446 = (_DWORD *)(v418 + 80);
            goto LABEL_511;
          }
        }
      }
    }
  }
  else
  {
    unsigned int v419 = *(unsigned __int8 *)(v401 + 3004);
    if (*(unsigned char *)(v401 + 3004))
    {
      unsigned int v419 = *(_DWORD *)(v401 + 3016);
      unsigned int v477 = *(_DWORD *)(v401 + 3020);
    }
    else
    {
      unsigned int v477 = 0;
    }
    uint64_t v420 = *(void *)(v401 + 8360);
    uint64_t v421 = *(unsigned int *)(v420 + 56);
    unint64_t v422 = *(unsigned int *)(v420 + 52) + (unint64_t)v419;
    uint64_t v423 = *((void *)this + 33);
    int v424 = *(_DWORD *)(v423 + 512);
    *(_DWORD *)(v423 + 512) = 0;
    *(_DWORD *)(*((void *)this + 33) + 512) ^= 0xFFFFFFC0;
    uint64_t v425 = *((void *)this + 33);
    int v426 = *(_DWORD *)(v425 + 512);
    *(_DWORD *)(v425 + 512) = v424;
    uint64_t v427 = *(void *)(*((void *)this + 32) + 8360);
    unint64_t v428 = HIDWORD(v422);
    if (!*(void *)v427 && !*(_DWORD *)(v427 + 152) && !*(_DWORD *)(v427 + 156)) {
      goto LABEL_545;
    }
    if (v428 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 1307;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v427, 512, v422, 0xFFFFFFFFLL, 6, v426, 4);
    if (!result)
    {
LABEL_545:
      uint64_t v429 = *((void *)this + 33);
      int v430 = *(_DWORD *)(v429 + 780);
      *(_DWORD *)(v429 + 780) = 0;
      *(_DWORD *)(*((void *)this + 33) + 780) ^= 0x3FFu;
      uint64_t v431 = *((void *)this + 33);
      int v432 = *(_DWORD *)(v431 + 780);
      *(_DWORD *)(v431 + 780) = v430;
      uint64_t v433 = *(void *)(*((void *)this + 32) + 8360);
      if (!*(void *)v433 && !*(_DWORD *)(v433 + 152) && !*(_DWORD *)(v433 + 156)) {
        goto LABEL_546;
      }
      if (v428 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = 1309;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v433, 780, v422, 0x3FFFFFFFFFFLL, 32, v432, 4);
      if (!result)
      {
LABEL_546:
        unint64_t v434 = v421 + v477;
        uint64_t v435 = *((void *)this + 33);
        int v436 = *(_DWORD *)(v435 + 516);
        *(_DWORD *)(v435 + 516) = 0;
        *(_DWORD *)(*((void *)this + 33) + 516) ^= 0xFFFFFFC0;
        uint64_t v437 = *((void *)this + 33);
        int v438 = *(_DWORD *)(v437 + 516);
        *(_DWORD *)(v437 + 516) = v436;
        uint64_t v439 = *(void *)(*((void *)this + 32) + 8360);
        unint64_t v440 = HIDWORD(v434);
        if (!*(void *)v439 && !*(_DWORD *)(v439 + 152) && !*(_DWORD *)(v439 + 156)) {
          goto LABEL_547;
        }
        if (v440 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "populatePictureRegisters";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = 1312;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 516, v434, 0xFFFFFFFFLL, 6, v438, 4);
        if (!result)
        {
LABEL_547:
          uint64_t v441 = *((void *)this + 33);
          int v442 = *(_DWORD *)(v441 + 784);
          *(_DWORD *)(v441 + 784) = 0;
          *(_DWORD *)(*((void *)this + 33) + 784) ^= 0x3FFu;
          uint64_t v443 = *((void *)this + 33);
          int v444 = *(_DWORD *)(v443 + 784);
          *(_DWORD *)(v443 + 784) = v442;
          uint64_t v445 = *(void *)(*((void *)this + 32) + 8360);
          if (!*(void *)v445 && !*(_DWORD *)(v445 + 152) && !*(_DWORD *)(v445 + 156)) {
            goto LABEL_508;
          }
          if (v440 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "populatePictureRegisters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = 1314;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v445, 784, v434, 0x3FFFFFFFFFFLL, 32, v444, 4);
          if (!result)
          {
LABEL_508:
            if (!v467)
            {
              if (CAHDecHibiscusHevc::getSWRStride(this, *(unsigned __int16 *)(v156 + 160)- *(unsigned __int16 *)(v156 + 156)+ 1, *(_DWORD *)(v478 + 23176 * v131 + 3636), *(_DWORD *)(v478 + 23176 * v131 + 3640), *(_DWORD *)(v478 + 23176 * v131 + 22852)))return 0xFFFFFFFFLL; {
              *(_DWORD *)(*((void *)this + 33) + 520) = *(_DWORD *)(*((void *)this + 33) + 520) & 0xFFFC003F | (((*((_DWORD *)this + 3352) >> 6) & 0xFFF) << 6);
              }
              v446 = (_DWORD *)((char *)this + 13412);
              goto LABEL_511;
            }
            *(_DWORD *)(*((void *)this + 33) + 520) = *(_DWORD *)(*((void *)this + 33) + 520) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 76) >> 6) & 0xFFF) << 6);
            uint64_t v418 = *(void *)(*((void *)this + 32) + 8360);
            goto LABEL_510;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecHibiscusHevc::getSWRStride(CAHDecHibiscusHevc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1676) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 3352) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 3352) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 3352) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 3352) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3353) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecHibiscusHevc::getTileStartCTU(CAHDecHibiscusHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 788);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecHibiscusHevc::getTileEndCTU(CAHDecHibiscusHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 788);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecHibiscusHevc::getTileIdxAbove(CAHDecHibiscusHevc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 788);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecHibiscusHevc::populateAvdWork(CAHDecHibiscusHevc *this, unsigned int a2)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 32);
  uint64_t v5 = *((void *)this + 33);
  int v6 = *(_DWORD *)(v4 + 8320);
  int v7 = *(_DWORD *)(v4 + 8324);
  uint64_t v8 = *(void *)(v4 + 8280);
  uint64_t v9 = *(void *)(v4 + 8288);
  uint64_t v109 = *(void *)(v4 + 8296);
  unsigned int v10 = *(_DWORD *)(v4 + 9036);
  unsigned int v11 = *(_DWORD *)(v4 + 3068);
  int v12 = *(_DWORD *)(v4 + 3072);
  memset(v146, 0, sizeof(v146));
  v145[0] = 0;
  v145[1] = 0;
  unsigned int v13 = v10 >> 28;
  uint64_t v14 = v8 + 23176 * v6;
  unsigned int v15 = *(_DWORD *)(v14 + 22888);
  if (v10)
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v16 = v15 > v13 + 1;
    }
    else {
      BOOL v16 = 0;
    }
    BOOL v17 = v16 && v12 == 0;
    int v18 = v17;
    int v134 = v18;
  }
  else
  {
    int v134 = 0;
  }
  unsigned int v126 = *(unsigned __int16 *)(v5 + 790) * *(unsigned __int16 *)(v5 + 788);
  if ((v10 & 2) != 0 && *(unsigned char *)(v9 + 9856 * v7 + 52))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v126 > v13 + 1;
    }
    int v21 = v19 && v12 == 0;
    int v137 = v21;
  }
  else
  {
    int v137 = 0;
  }
  uint64_t v115 = (unsigned int *)(v14 + 22880);
  if ((v10 & 0x20) != 0 && !*(unsigned char *)(v9 + 9856 * v7 + 53))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 52)) {
      BOOL v83 = 0;
    }
    else {
      BOOL v83 = v11 > v13 + 1;
    }
    int v85 = v83 && v12 == 0;
    int v129 = v85;
  }
  else
  {
    int v129 = 0;
  }
  unsigned int v22 = 0;
  unsigned int v139 = *v115;
  unsigned int v23 = v13 + 2;
  BOOL v17 = (v10 & 4) == 0;
  int v24 = v134;
  if (v17) {
    int v24 = 1;
  }
  if (((v24 | v137) & 1) == 0 && (v129 & 1) == 0) {
    unsigned int v22 = *(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & (v13 + 1);
  }
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  memset_pattern16(__b, &unk_223AD0630, 0x10uLL);
  uint64_t v25 = v5 + 223932;
  unsigned int v103 = v134 | v137 | v129;
  if (v103) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = 1;
  }
  unint64_t v27 = v22 + v26;
  uint64_t v120 = v26;
  unsigned int v105 = 0x1000 / v26;
  uint64_t v28 = 48 * (0x1000 / v26);
  uint64_t v29 = v22;
  unint64_t v30 = v22;
  do
  {
    *((void *)v146 + v30) = v25 + (v30 - v22) * v28;
    ++v30;
  }
  while (v30 < v27);
  uint64_t v102 = v28;
  unint64_t v106 = v27;
  uint64_t v31 = *((void *)v146 + v22);
  uint64_t v123 = v5 + 223932;
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v25) >> 4);
  unint64_t v104 = v22;
  if (!a2)
  {
    uint64_t v95 = 0;
    int v96 = 0;
    HIDWORD(v140) = 0;
    unsigned int v43 = v22;
    goto LABEL_165;
  }
  uint64_t v138 = 0;
  unsigned int v117 = 0;
  int v113 = 0;
  int v121 = 0;
  int v132 = 0;
  int v136 = 0;
  unsigned int v33 = v22;
  unsigned int v34 = v15;
  int v35 = 0;
  uint64_t v140 = 0;
  int v130 = 0;
  unsigned int v36 = a2;
  uint64_t v37 = 0;
  int v135 = 0;
  uint64_t v38 = v9 + 9856 * v7;
  uint64_t v39 = (unsigned char *)(v38 + 52);
  int v118 = (unsigned char *)(v38 + 53);
  int v40 = v134;
  if (v134) {
    int v41 = 12;
  }
  else {
    int v41 = 4;
  }
  int v116 = v41;
  unsigned int v122 = v36 - 1;
  unsigned int v111 = v34 - 1;
  unsigned int v112 = v34;
  unsigned int v110 = v34 - 2;
  unsigned int v42 = v120;
  int v108 = &__b[v29];
  unsigned int v101 = v36;
  uint64_t v107 = v36;
  uint64_t v124 = v5 + 3480;
  unsigned int v100 = v33;
  unsigned int v43 = v33;
  uint64_t v128 = v39;
  do
  {
    if (*v39) {
      int v44 = 1;
    }
    else {
      int v44 = v40;
    }
    if (v44 != 1)
    {
      unsigned int v47 = 1;
LABEL_54:
      uint64_t v48 = 0;
      int v114 = 0;
      uint64_t v49 = v109 + 2360 * v138;
      int v119 = (void *)(v49 + 1904);
      int v125 = (int *)(v49 + 36);
      int v127 = (unsigned char *)(v49 + 32);
      uint64_t v133 = v47;
      while (1)
      {
        if (!(v48 | v138))
        {
          *(_WORD *)(v31 + 4) = 0;
          *(_WORD *)(v31 + 6) = v43;
          *(_DWORD *)(v31 + 8) = 0;
          *(_WORD *)(v31 + 12) = 0;
          int v130 = *(_DWORD *)(v124 + 368 * v138);
          if (!(*(unsigned int (**)(void))(**((void **)this + 32) + 448))()) {
            return 0xFFFFFFFFLL;
          }
          int v54 = *v125;
          *(_DWORD *)(v31 + 32) = *v125;
          *(_DWORD *)(v31 + 36) = v54;
          HIDWORD(v140) = 0;
          *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecHibiscusHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v139);
          __int16 v55 = 271;
          goto LABEL_159;
        }
        if (v48)
        {
          int v50 = *(_DWORD *)(*v119 + 4 * v48 - 4) + 1;
          if (*v128)
          {
            if (*v118)
            {
              unsigned int v51 = *v115;
              unsigned int v52 = (v51 + v140) / v51;
              v50 += v114;
              if (v52 >= *(unsigned __int16 *)(*((void *)this + 33) + 2 * (v121 + 1) + 834))
              {
                LODWORD(v140) = (*(uint64_t (**)(CAHDecHibiscusHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v139);
                int v114 = 0;
                int v35 = v116;
              }
              else
              {
                LODWORD(v140) = v113 + v52 * v51;
                if (!v134)
                {
                  int v114 = v50;
                  int v40 = 0;
                  goto LABEL_160;
                }
                int v114 = 0;
                int v53 = __b[v43];
                __b[v43] = 0;
                if (v53) {
                  int v35 = 72;
                }
                else {
                  int v35 = 8;
                }
              }
            }
            else
            {
              LODWORD(v140) = (*(uint64_t (**)(CAHDecHibiscusHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v139);
              int v35 = 4;
            }
          }
          else if (v134)
          {
            LODWORD(v140) = (*v115 + v140) / *v115 * *v115;
            int v35 = 8;
          }
          int v62 = 48 * v32;
          uint64_t v63 = v142;
          if (*(void *)v142 || *(_DWORD *)(v142 + 152) || *(_DWORD *)(v142 + 156))
          {
            int v64 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1992;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v64 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223954, HIDWORD(v140) + v64, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v63 = v142;
            if (*(void *)v142) {
              goto LABEL_103;
            }
          }
          if (*(_DWORD *)(v63 + 152) || *(_DWORD *)(v63 + 156))
          {
LABEL_103:
            int v65 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1993;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v65 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223956, HIDWORD(v140) + v65, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v50;
          HIDWORD(v140) += v50;
          unsigned int v42 = v120;
          int v40 = v134;
        }
        else
        {
          int v56 = 48 * v32;
          uint64_t v57 = v142;
          if (*(void *)v142 || *(_DWORD *)(v142 + 152) || *(_DWORD *)(v142 + 156))
          {
            int v58 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1916;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v58 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223954, HIDWORD(v140) + v58, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v57 = v142;
            if (*(void *)v142) {
              goto LABEL_76;
            }
          }
          if (*(_DWORD *)(v57 + 152) || *(_DWORD *)(v57 + 156))
          {
LABEL_76:
            int v60 = v141;
            if ((v141 + (unint64_t)HIDWORD(v140)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1917;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v60 = v141;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223956, HIDWORD(v140) + v60, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v130 - HIDWORD(v140);
          int v61 = *(_DWORD *)(v124 + 368 * v138);
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t *))(**((void **)this + 32) + 448))(*((void *)this + 32), v138, &v142, &v141))return 0xFFFFFFFFLL; {
          int v130 = v61;
          }
          if (*v127) {
            int v35 = 2;
          }
          else {
            int v35 = 258;
          }
          int v40 = v134;
          LODWORD(v140) = *v125;
          if (v134 && *v125 % v139 == v113)
          {
            HIDWORD(v140) = 0;
            if (__b[v43])
            {
              v35 |= 0x48u;
              __b[v43] = 0;
            }
            else
            {
              v35 |= 8u;
            }
          }
          else
          {
            HIDWORD(v140) = 0;
          }
        }
        unsigned int v66 = v37 + 1;
        if ((int)v37 + 1 < v126)
        {
          int v67 = (*(uint64_t (**)(CAHDecHibiscusHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v139);
          int v68 = v116;
          if (v140 != v67) {
            int v68 = 0;
          }
          v35 |= v68;
        }
        *(_WORD *)(v31 + 16) = v35;
        if (v135 == v122) {
          *(_WORD *)(v31 + 18) |= 2u;
        }
        if (v37 == v126 - 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        int v69 = v137;
        if (v37 != v126 - 2) {
          int v69 = 0;
        }
        if (v69 == 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        if (v40
          && ((int v70 = *(unsigned __int16 *)(v31 + 10), v112 > 1) ? (v71 = v110 == v70) : (v71 = 0),
              !v71 ? (int v72 = 0) : (int v72 = 1),
              v111 == v70 || v72))
        {
          *(_WORD *)(v31 + 18) |= 8u;
          if ((v35 & 4) != 0)
          {
LABEL_132:
            if (*v128 && *v118)
            {
              uint64_t v73 = *((void *)this + 33);
              unsigned int v74 = *(unsigned __int16 *)(v73 + 788);
              unsigned int v117 = (v43
                    - *(unsigned __int16 *)(v73 + 834 + 2 * (v66 / v74))
                    + *(unsigned __int16 *)(v73 + 834 + 2 * (v66 / v74 + 1)))
                   % v42;
              int v121 = v66 / v74;
              int v113 = *(unsigned __int16 *)(v73 + 788 + 2 * (v66 % v74) + 4);
              memset_pattern16(v108, &unk_223AD0630, 4 * (v120 - 1) + 4);
            }
            uint64_t v37 = (v37 + 1);
          }
        }
        else if ((v35 & 4) != 0)
        {
          goto LABEL_132;
        }
        if ((v35 & 0x44) != 0)
        {
          int v75 = (*(uint64_t (**)(CAHDecHibiscusHevc *, uint64_t))(*(void *)this + 80))(this, v37);
          unsigned int v76 = v136;
          if (v136 <= v75) {
            v35 |= 0x20u;
          }
        }
        else
        {
          unsigned int v76 = v136;
        }
        if (!v48)
        {
          if (!*v127) {
            unsigned int v76 = v37;
          }
          int v77 = v132;
          if (!*v127) {
            int v77 = v140;
          }
          int v132 = v77;
        }
        if ((v35 & 0x44) != 0)
        {
          unsigned int v78 = *(unsigned __int16 *)(*((void *)this + 33) + 788);
          if (v76 / v78 + 1 == v37 / v78) {
            v35 |= 0x10u;
          }
        }
        ++*((_DWORD *)v145 + v43);
        *((void *)v146 + v43) += 48;
        unsigned int v79 = v140 / v139;
        if (v40) {
          unsigned int v43 = (v79 - v121 + v117) % v42;
        }
        if (v137) {
          unsigned int v43 = v37 % v42;
        }
        char v80 = v129 ^ 1;
        if (v48) {
          char v80 = 1;
        }
        int v136 = v76;
        if ((v80 & 1) == 0 && !*v127) {
          unsigned int v43 = (v43 + 1) % v42;
        }
        uint64_t v31 = *((void *)v146 + v43);
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v123) >> 4);
        *(_WORD *)(v31 + 4) = *((_DWORD *)v145 + v43);
        *(_WORD *)(v31 + 6) = v43;
        *(_WORD *)(v31 + 8) = v138;
        *(_WORD *)(v31 + 10) = v79;
        *(_WORD *)(v31 + 12) = v37;
        *(_DWORD *)(v31 + 32) = v140;
        *(_DWORD *)(v31 + 36) = v132;
        *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecHibiscusHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v139);
        __int16 v55 = v35;
        int v135 = v138;
LABEL_159:
        *(_WORD *)(v31 + 14) = v55;
LABEL_160:
        if (v133 == ++v48) {
          goto LABEL_51;
        }
      }
    }
    int v45 = *(_DWORD *)(v109 + 2360 * v138 + 1896);
    BOOL v46 = __CFADD__(v45, 1);
    unsigned int v47 = v45 + 1;
    if (!v46) {
      goto LABEL_54;
    }
LABEL_51:
    ++v138;
    uint64_t v39 = v128;
  }
  while (v138 != v107);
  uint64_t v95 = v142;
  unsigned int v22 = v100;
  a2 = v101;
  int v96 = v130;
LABEL_165:
  int v131 = v96;
  int v81 = 48 * v32;
  if (!*(void *)v95 && !*(_DWORD *)(v95 + 152) && !*(_DWORD *)(v95 + 156))
  {
LABEL_185:
    if (*(_DWORD *)(v95 + 152) || *(_DWORD *)(v95 + 156)) {
      goto LABEL_187;
    }
    goto LABEL_191;
  }
  int v82 = v141;
  if ((v141 + (unint64_t)HIDWORD(v140)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "populateAvdWork";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 2087;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
    int v82 = v141;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223954, HIDWORD(v140) + v82, 0x3FFFFFFFFFFLL, 32, -1, 2);
  if (!result)
  {
    uint64_t v95 = v142;
    if (!*(void *)v142) {
      goto LABEL_185;
    }
LABEL_187:
    int v86 = v141;
    if ((v141 + (unint64_t)HIDWORD(v140)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "populateAvdWork";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = 2088;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
      int v86 = v141;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223956, HIDWORD(v140) + v86, 0xFFFFFFFFLL, 0, -1, 4);
    if (!result)
    {
LABEL_191:
      *(_DWORD *)(v31 + 28) = v131 - HIDWORD(v140);
      *(_DWORD *)(v31 + 16) = 917519;
      ++*((_DWORD *)v145 + v43);
      unint64_t v87 = v104;
      if (v129)
      {
        uint64_t v88 = 0;
        memset(buf, 0, sizeof(buf));
        do
        {
          buf[v88] = v123 + v88 * v102;
          ++v88;
        }
        while (v120 != v88);
        uint64_t v89 = buf[0];
        unsigned int v90 = *(unsigned __int16 *)(buf[0] + 8) + 1;
        uint64_t v91 = v103;
        uint64_t v92 = 0;
        if (v90 >= a2)
        {
          unsigned int v94 = buf;
        }
        else
        {
          uint64_t v93 = 0;
          unsigned int v94 = buf;
          do
          {
            if (*(unsigned __int16 *)(v89 + 4) + 1 == *((_DWORD *)v145 + v92))
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 40) = *(_DWORD *)(buf[v91] + 36);
            }
            else if (v90 == *(unsigned __int16 *)(v89 + 56))
            {
              *unsigned int v94 = v89 + 48;
              uint64_t v92 = v93;
              uint64_t v91 = v93;
            }
            else
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 40) = *(_DWORD *)(buf[v91] + 36);
              *unsigned int v94 = v89 + 48;
            }
            uint64_t v93 = v91;
            uint64_t v91 = ((int)v91 + 1) % v120;
            unsigned int v94 = &buf[v92];
            uint64_t v89 = *v94;
            unsigned int v90 = *(unsigned __int16 *)(*v94 + 8) + 1;
          }
          while (v90 < a2);
        }
        int v97 = *((_DWORD *)v145 + v92);
        if (*(unsigned __int16 *)(v89 + 4) + 1 != v97)
        {
          do
          {
            int v98 = *(unsigned __int16 *)(v89 + 52);
            v89 += 48;
          }
          while (v98 + 1 != v97);
          *unsigned int v94 = v89;
        }
        *(_DWORD *)(v89 + 40) = *(_DWORD *)(v89 + 44) + 1;
      }
      uint64_t v99 = *((void *)this + 33) + 36;
      do
      {
        *(_WORD *)(v99 + 2 * v87 - 8) = *((_DWORD *)v145 + v87);
        *(_DWORD *)(v99 + 4 * v87) = 48 * (v87 - v22) * v105 + 223932;
        ++v87;
      }
      while (v87 < v106);
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecHibiscusHevc::allocWorkBuf_SPS(CAHDecHibiscusHevc *this, _DWORD *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 5718;
  int v5 = a2[902];
  int v6 = a2[903];
  int v7 = a2[900];
  if (v5 < (*(unsigned int (**)(CAHDecHibiscusHevc *))(*(void *)this + 96))(this)
    || (unsigned int v8 = a2[903], v8 < (*(unsigned int (**)(CAHDecHibiscusHevc *))(*(void *)this + 104))(this))
    || (unsigned int v9 = a2[909], v9 > (*(unsigned int (**)(CAHDecHibiscusHevc *))(*(void *)this + 112))(this) - 8)
    || (unsigned int v10 = a2[910], v10 > (*(unsigned int (**)(CAHDecHibiscusHevc *))(*(void *)this + 120))(this) - 8)
    || (unsigned int v17 = *v4, v18 = *v4 - 16, v18 > 0x30)
    || ((1 << v18) & 0x1000000010001) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = a2[902];
      int v12 = a2[903];
      int v13 = a2[909];
      int v14 = a2[910];
      unsigned int v15 = *v4;
      int v49 = 136316418;
      int v50 = "allocWorkBuf_SPS";
      __int16 v51 = 1024;
      int v52 = v11;
      __int16 v53 = 1024;
      *(_DWORD *)int v54 = v12;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v13;
      __int16 v55 = 1024;
      int v56 = v14;
      __int16 v57 = 1024;
      unsigned int v58 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported bit stream w %d h %d bd %d %d CtbSizeY %d\n", (uint8_t *)&v49, 0x2Au);
    }
    return 0xFFFFFFFFLL;
  }
  int v19 = v5 + 31;
  if (v5 < -31) {
    int v19 = v5 + 62;
  }
  unsigned int v20 = v19 >> 5;
  int v21 = v6 + 31;
  if (v6 < -31) {
    int v21 = v6 + 62;
  }
  unsigned int v22 = v21 >> 5;
  unsigned int v23 = 32 - __clz(v20 - 1);
  if (v20 >= 2) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  unsigned int v25 = 32 - __clz(v22 - 1);
  if (v22 >= 2) {
    char v26 = v25;
  }
  else {
    char v26 = 0;
  }
  unsigned int v27 = ((32 << (v26 + v24)) + 127) & 0xFFFFFF80;
  if (v7)
  {
    int v28 = v5 << (v7 == 3);
    int v29 = v28 + 31;
    int v30 = v28 + 62;
    if (v29 >= 0) {
      int v30 = v29;
    }
    unsigned int v31 = v30 >> 5;
    if (v7 == 1) {
      int v32 = v6 + 1;
    }
    else {
      int v32 = v6;
    }
    int v33 = v32 >> (v7 == 1);
    int v35 = v33 + 15;
    BOOL v34 = v33 < -15;
    int v36 = v33 + 30;
    if (!v34) {
      int v36 = v35;
    }
    unsigned int v37 = v36 >> 4;
    if (v31 > 1)
    {
      unsigned int v38 = 32 - __clz(v31 - 1);
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v37 = 0;
  }
  LOBYTE(v38) = 0;
LABEL_32:
  unsigned int v39 = 32 - __clz(v37 - 1);
  if (v37 >= 2) {
    char v40 = v39;
  }
  else {
    char v40 = 0;
  }
  unsigned int v41 = ((8 << (v40 + v38)) + 127) & 0xFFFFFF80;
  if (!v7) {
    unsigned int v41 = 0;
  }
  *((_DWORD *)this + 3344) = v27;
  *((_DWORD *)this + 3345) = v41;
  *((void *)this + 1673) = 0;
  unsigned int v42 = (v17 & 0xFFFFFFF0) * (v17 >> 4) * v4[2];
  *((_DWORD *)this + 3350) = v42;
  *((_DWORD *)this + 3349) = v4[4] * v42;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_44:
    uint64_t v46 = 0;
    while (1)
    {
      uint64_t v47 = *((unsigned int *)this + 3349);
      if (v47)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecHibiscusHevc *)((char *)this + v46 + 8976), v47, 7, 1, 0))break; {
      }
        }
      uint64_t result = 0;
      v46 += 176;
      if (v46 == 2816) {
        return result;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2354;
    __int16 v53 = 2080;
    *(void *)int v54 = "MvColo";
    uint64_t v48 = &_os_log_internal;
  }
  else
  {
    uint64_t v43 = 528;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 3344);
      if (v44
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecHibiscusHevc *)((char *)this + v43), v44, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_56;
        }
        int v49 = 136315650;
        int v50 = "allocWorkBuf_SPS";
        __int16 v51 = 1024;
        int v52 = 2345;
        __int16 v53 = 2080;
        *(void *)int v54 = "HdrY";
        uint64_t v48 = &_os_log_internal;
        goto LABEL_55;
      }
      uint64_t v45 = *((unsigned int *)this + 3345);
      if (v45)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecHibiscusHevc *)((char *)this + v43 + 2816), v45, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 3344) {
        goto LABEL_44;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2346;
    __int16 v53 = 2080;
    *(void *)int v54 = "HdrC";
    uint64_t v48 = &_os_log_internal;
  }
LABEL_55:
  _os_log_impl(&dword_223977000, v48, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v49, 0x1Cu);
LABEL_56:
  (*(void (**)(CAHDecHibiscusHevc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecHibiscusHevc::allocWorkBuf_PPS(CAHDecHibiscusHevc *this, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  unsigned int v4 = (a2[909] + 9) & 0xFFFFFFFE;
  int v5 = a2[910];
  unsigned int v6 = (v5 + 9) & 0xFFFFFFFE;
  if (v4 <= v6) {
    unsigned int v7 = (v5 + 9) & 0xFFFFFFFE;
  }
  else {
    unsigned int v7 = (a2[909] + 9) & 0xFFFFFFFE;
  }
  int v8 = a2[900];
  if (v7 == 10) {
    int v9 = 40;
  }
  else {
    int v9 = 48;
  }
  if (v7 == 8) {
    int v9 = 32;
  }
  char v10 = v8 != 3;
  if (*((unsigned char *)a3 + 52))
  {
    uint64_t v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = a2[1106] + a2[1105];
    uint64_t v17 = a3[14];
    int v18 = a2[5718];
    unsigned int v19 = a2[902];
    do
    {
      int v20 = a3[v11 + 17] + 1;
      int v21 = v20 * v18;
      if (v20 * v18 + v14 > v19) {
        int v21 = v19 - v14;
      }
      if (v12 <= v21) {
        int v12 = v21;
      }
      if (v8)
      {
        unsigned int v22 = (v20 << v16) >> v10;
        if (v17 == v11) {
          unsigned int v22 = (((v19 >> 3) - (v15 << v16)) >> v10) + 1;
        }
        v13 += ((v22 + 2 * (v11 != 0)) * v9 + 127) & 0xFFFFFF80;
      }
      v14 += v21;
      v15 += v20;
      ++v11;
    }
    while (v17 + 1 != v11);
  }
  else
  {
    unsigned int v19 = a2[902];
    int v23 = (v9 + v9 * (v19 >> 3 >> v10) + 127) & 0x7FFFFF80;
    if (v8) {
      int v13 = v23;
    }
    else {
      int v13 = 0;
    }
    int v12 = a2[902];
  }
  signed int v24 = 0;
  uint64_t v25 = *((void *)this + 32);
  if (v12 >= -15) {
    int v26 = v12 + 15;
  }
  else {
    int v26 = v12 + 30;
  }
  int v27 = a3[14];
  if (*((unsigned char *)a3 + 52)) {
    int v28 = a3[14];
  }
  else {
    int v28 = 0;
  }
  int v68 = v28;
  if (v8 == 3) {
    int v29 = 48;
  }
  else {
    int v29 = 32;
  }
  if (v8 == 3) {
    int v30 = 176;
  }
  else {
    int v30 = 128;
  }
  if (!v8) {
    int v29 = 16;
  }
  unsigned int v31 = (v29 * v7) >> 3;
  if (!v8) {
    int v30 = 80;
  }
  int v66 = v26;
  int v67 = v30;
  int v32 = v26 >> 4;
  int v33 = (v26 >> 4) * v31;
  if (v5) {
    int v34 = 60;
  }
  else {
    int v34 = 48;
  }
  int v65 = v34;
  unsigned int v35 = 0;
  unsigned int v36 = 0;
  unsigned int v37 = 0;
  if (*((unsigned char *)a3 + 52) && v27)
  {
    uint64_t v38 = 0;
    int v39 = 0;
    unsigned int v37 = 0;
    unsigned int v36 = 0;
    unsigned int v35 = 0;
    if (v8 == 1) {
      int v40 = 8;
    }
    else {
      int v40 = 16;
    }
    if (!v8) {
      int v40 = 0;
    }
    unsigned int v41 = ((((6 * v40 + 96) * v7) >> 3) + 7) & 0x3FFFFFF8;
    int v42 = v40 + 16;
    unsigned int v43 = a2[903];
    signed int v44 = v4 - 8;
    signed int v45 = v6 - 8;
    if (v44 <= v45) {
      signed int v46 = v45;
    }
    else {
      signed int v46 = v44;
    }
    uint64_t v47 = a3[15];
    int v48 = a2[5718];
    BOOL v50 = *(_DWORD *)(v25 + 2644) == 1 && v46 != 0;
    __int16 v51 = (char *)(a3 + 37);
    do
    {
      int v52 = v48 + v48 * *(_DWORD *)&v51[4 * v38];
      if (v52 + v39 > v43) {
        int v52 = v43 - v39;
      }
      int v53 = v52 + 15;
      if (v52 < -15) {
        int v53 = v52 + 30;
      }
      if (v38) {
        int v54 = (v53 >> 4) + 1;
      }
      else {
        int v54 = v53 >> 4;
      }
      unsigned int v55 = v54 * v41;
      if (v35 <= v55) {
        unsigned int v35 = v55;
      }
      unsigned int v56 = 36 * (v53 >> 4);
      if (v36 <= v56) {
        unsigned int v36 = v56;
      }
      if (v50)
      {
        if (v47 == v38) {
          int v57 = 23;
        }
        else {
          int v57 = 15;
        }
        unsigned int v58 = ((v57 + v52) / 16 * v42) | 6;
        if (v37 <= v58) {
          unsigned int v37 = v58;
        }
      }
      v39 += v52;
      ++v38;
    }
    while (v47 + 1 != v38);
    signed int v24 = (((3 * v7) & 0x7FFFFF) << 6) + (((v43 + 7) >> 3) + 2) * ((((v7 >> 1) & 0x1FFFFF) << 8) | 8);
  }
  if (v33 && CAVDDecoder::allocAVDMem(v25, (_OWORD *)this + 737, v33, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2528;
      __int16 v74 = 2080;
      int v75 = "IpAbove";
      uint64_t v59 = &_os_log_internal;
LABEL_120:
      _os_log_impl(&dword_223977000, v59, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", buf, 0x1Cu);
      goto LABEL_121;
    }
    goto LABEL_121;
  }
  if ((v12 + 30) >= 0x1F
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 550, 4 * (4 * v32 + (v66 >> 4)), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2529;
      __int16 v74 = 2080;
      int v75 = "MvAboveInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
LABEL_121:
    (*(void (**)(CAHDecHibiscusHevc *, void))(*(void *)this + 152))(this, 0);
    return 0xFFFFFFFFLL;
  }
  int v60 = v68 + ((v19 + 15) >> 4);
  signed int v61 = v60 * ((((v67 * v7) >> 3) + 7) & 0x3FFFFFF8) + (v27 << 7);
  if (v61 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 748, v61, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2530;
      __int16 v74 = 2080;
      int v75 = "LfAbovePix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  int v62 = 36 * v60 + (v27 << 7);
  if (v62 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 759, v62, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2531;
      __int16 v74 = 2080;
      int v75 = "LfAboveInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v35 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 770, (int)v35, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2532;
      __int16 v74 = 2080;
      int v75 = "LfLeftPix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v36 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 781, (int)v36, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2533;
      __int16 v74 = 2080;
      int v75 = "LfLeftInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v37 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 792, (int)v37, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2534;
      __int16 v74 = 2080;
      int v75 = "SwLeftPix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v13 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 803, v13, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2535;
      __int16 v74 = 2080;
      int v75 = "AZAbovePix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v24 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 814, v24, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2536;
      __int16 v74 = 2080;
      int v75 = "AZLeftPix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  int v63 = (v19 >> 3) * v65;
  if (!v63) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 825, v63, 7, 1, 0);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2538;
      __int16 v74 = 2080;
      int v75 = "RfAboveInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  return result;
}

uint64_t CAHDecHibiscusHevc::freeWorkBuf_SPS(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(_DWORD *)(*(void *)(this + 256) + 2648))
  {
    for (uint64_t i = 528; i != 3344; i += 176)
    {
      BOOL v3 = (void *)(v1 + i);
      if (*(void *)(v1 + i))
      {
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v1 + i));
        void *v3 = 0;
      }
      if (v3[352])
      {
        unsigned int v4 = v3 + 352;
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), v4);
        *unsigned int v4 = 0;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1 + 8976;
  do
  {
    if (*(void *)(v6 + v5))
    {
      this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v6 + v5));
      *(void *)(v6 + v5) = 0;
    }
    v5 += 176;
  }
  while (v5 != 2816);
  return this;
}

uint64_t *CAHDecHibiscusHevc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  unsigned int v2 = this;
  if (this[1474])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1474);
    v2[1474] = 0;
  }
  if (v2[1100])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1100);
    v2[1100] = 0;
  }
  if (v2[1496])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1496);
    v2[1496] = 0;
  }
  if (v2[1518])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1518);
    v2[1518] = 0;
  }
  if (v2[1540])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1540);
    v2[1540] = 0;
  }
  if (v2[1562])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1562);
    v2[1562] = 0;
  }
  if (v2[1584])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1584);
    v2[1584] = 0;
  }
  if (v2[1606])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1606);
    v2[1606] = 0;
  }
  if (v2[1628])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1628);
    v2[1628] = 0;
  }
  if (v2[1650])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1650);
    v2[1650] = 0;
  }
  return this;
}

uint64_t CAHDecHibiscusHevc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 6160;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 13392) = a2;
  return this;
}

uint64_t CAHDecHibiscusHevc::decodeBuffer(CAHDecHibiscusHevc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecHibiscusHevc::decodeBufferSize(CAHDecHibiscusHevc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecHibiscusHevc::decHdrYLinAddr(CAHDecHibiscusHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 66);
}

uint64_t CAHDecHibiscusHevc::decHdrCLinAddr(CAHDecHibiscusHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 418);
}

uint64_t CAHDecHibiscusHevc::decHdrYSize(CAHDecHibiscusHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 143);
}

uint64_t CAHDecHibiscusHevc::decHdrCSize(CAHDecHibiscusHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 847);
}

uint64_t CAHDecHibiscusHevc::decHdrYStride(CAHDecHibiscusHevc *this)
{
  return *((unsigned int *)this + 3346);
}

uint64_t CAHDecHibiscusHevc::decHdrCStride(CAHDecHibiscusHevc *this)
{
  return *((unsigned int *)this + 3347);
}

CAHDecLotusAvc *createLotusAvcDecoder(CAVDAvcDecoder *a1)
{
  uint64_t v2 = (CAHDecLotusAvc *)operator new(0x3EE0uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecLotusAvc::CAHDecLotusAvc(v2, a1);
  }
  return v3;
}

void sub_223A8F024(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecLotusAvc::CAHDecLotusAvc(CAHDecLotusAvc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73E708;
  *(_DWORD *)(v1 + 456) = 948 * *(unsigned __int16 *)(*(void *)(v1 + 256) + 7500) + 165600;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecLotusAvc::CAHDecLotusAvc(CAHDecLotusAvc *this, CAVDAvcDecoder *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73E708;
  *(void *)(v4 + 256) = a2;
  uint64_t v5 = 948 * *((unsigned __int16 *)a2 + 3750) + 165600;
  *(_DWORD *)(v4 + 456) = v5;
  *(_DWORD *)(v4 + 8) = 1760;
  *(_OWORD *)(v4 + 16) = xmmword_223ADA9B0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), v5, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      int v8 = "CAHDecLotusAvc";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v7, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v6 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v6;
    *((void *)this + 34) = v6;
    *((_OWORD *)this + 995) = 0u;
    *((_OWORD *)this + 996) = 0u;
    *((_OWORD *)this + 997) = 0u;
    *((_OWORD *)this + 998) = 0u;
    *((_OWORD *)this + 999) = 0u;
    *((_OWORD *)this + 1000) = 0u;
    *((_OWORD *)this + 1001) = 0u;
    *((_OWORD *)this + 1002) = 0u;
    *((_OWORD *)this + 1003) = 0u;
    *((_OWORD *)this + 1004) = 0u;
    *((_OWORD *)this + 1005) = 0u;
    bzero((char *)this + 560, 0x3BD0uLL);
  }
}

void sub_223A8F22C(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecLotusAvc::~CAHDecLotusAvc(CAHDecLotusAvc *this)
{
  *(void *)this = &unk_26D73E708;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecLotusAvc::~CAHDecLotusAvc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecLotusAvc::initPicture(CAHDecLotusAvc *this, int a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v5 = 948 * *(unsigned __int16 *)(*((void *)this + 32) + 7500) + 165600;
  *((_DWORD *)this + 114) = v5;
  *((_DWORD *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v6;
  if (v6)
  {
    bzero(v6, v5);
    uint64_t v8 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v8 + 16) = a2;
    *(_WORD *)(v8 + 24) = 257;
    *(_WORD *)(v8 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 3975) = 0;
    *((void *)this + 1995) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "initPicture";
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v10, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecLotusAvc::populateSlices(CAHDecLotusAvc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 1760;
    uint64_t v5 = a2;
    do
    {
      CAHDecLotusAvc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 948;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecLotusAvc::populateSliceRegisters(uint64_t a1, uint64_t a2, signed int a3)
{
  char v6 = 0;
  uint64_t v128 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 256);
  int v112 = *(_DWORD *)(v7 + 3616);
  int v110 = *(_DWORD *)(v7 + 3612);
  uint64_t v111 = *(void *)(v7 + 3304);
  uint64_t v109 = *(void *)(v7 + 3296);
  uint64_t v8 = *(void *)(v7 + 3312);
  uint64_t v9 = *(unsigned int *)(v7 + 7064);
  uint64_t v10 = *(void *)(v7 + 3320);
  *(_DWORD *)(a2 + 4) = 0;
  uint64_t v12 = v8 + 1848 * a3;
  int v13 = 32 * (*(unsigned char *)(v12 + 1424) & 3);
  *(_DWORD *)(a2 + 4) = v13;
  int v15 = *(unsigned __int8 *)(v12 + 24);
  uint64_t v14 = (unsigned char *)(v12 + 24);
  if (v15 != 2) {
    char v6 = *(unsigned char *)(v8 + 1848 * a3 + 63);
  }
  unsigned int v16 = v13 & 0xFFFF87FF | ((v6 & 0xF) << 11);
  *(_DWORD *)(a2 + 4) = v16;
  if (*v14 == 1) {
    char v17 = *(unsigned char *)(v8 + 1848 * a3 + 64);
  }
  else {
    char v17 = 0;
  }
  int v18 = ((v17 & 0xF) << 7) | v16;
  *(_DWORD *)(a2 + 4) = v18;
  if (*v14 == 1 && !*(unsigned char *)(v8 + 1848 * a3 + 61)) {
    int v19 = 0x8000;
  }
  else {
    int v19 = 0;
  }
  int v20 = v19 | v18;
  *(_DWORD *)(a2 + 4) = v20;
  if (*v14) {
    int v21 = 0x20000;
  }
  else {
    int v21 = 0x10000;
  }
  if (*v14 == 1) {
    int v22 = 0;
  }
  else {
    int v22 = v21;
  }
  *(_DWORD *)(a2 + 4) = v22 | v20;
  if (*v14 != 1) {
    goto LABEL_20;
  }
  uint64_t v23 = v10 + 13040 * a3 + 7224;
  uint64_t v24 = v8 + 1848 * a3;
  *(void *)(v24 + 1832) = v23;
  if (*(unsigned char *)(v10 + 13040 * a3 + 7227)
    || (uint64_t v25 = *(unsigned int *)(v10 + 13040 * a3 + 7256), *(_DWORD *)(a1 + 4 * v25 + 464)))
  {
    int v26 = 16;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 15900))
    {
      *(void *)(a1 + 15960) = *(void *)(v10 + 13040 * a3 + 7264);
      *(_DWORD *)(a1 + 15952) = v25;
      *(_DWORD *)(a1 + 15900) = 1;
      *(_DWORD *)(a2 + 4) |= 0x40000u;
      uint64_t v23 = *(void *)(v24 + 1832);
      if (!v23 || !*(_DWORD *)(a1 + 15900)) {
        goto LABEL_20;
      }
    }
    uint64_t v105 = *(void *)(v23 + 40);
    if (v105 == *(void *)(a1 + 15960)) {
      goto LABEL_20;
    }
    *(void *)(a1 + 15960) = v105;
    *(_DWORD *)(a1 + 15952) = *(_DWORD *)(v23 + 32);
    int v26 = 0x40000;
  }
  *(_DWORD *)(a2 + 4) |= v26;
LABEL_20:
  *(_DWORD *)(a2 + 920) = 0;
  int v27 = *(_DWORD *)(a2 + 4);
  if (*v14 == 1 && (v27 & 0x40000) != 0)
  {
    int v29 = (_OWORD *)(a1 + 176 * *(unsigned int *)(*(void *)(v8 + 1848 * a3 + 1832) + 32));
    long long v30 = v29[658];
    long long v31 = v29[660];
    long long v125 = v29[659];
    long long v126 = v31;
    long long v127 = v29[661];
    long long v32 = v29[654];
    long long v33 = v29[656];
    long long v121 = v29[655];
    long long v122 = v33;
    long long v123 = v29[657];
    long long v124 = v30;
    long long v34 = v29[652];
    *(_OWORD *)buf = v29[651];
    *(_OWORD *)&uint8_t buf[16] = v34;
    long long v119 = v29[653];
    long long v120 = v32;
    *(_DWORD *)(a1 + 15900) = 1;
    if (*(void *)buf || *((void *)&v126 + 1))
    {
      uint64_t result = CAHDec::addToPatcherList(a1, buf, 948 * a3 + 2680, 0, 0xFFFFFFFFLL, 8, 0xFFFFFF, 4);
      if (result) {
        return result;
      }
    }
    int v27 = *(_DWORD *)(a2 + 4);
  }
  uint64_t v115 = v10;
  unsigned int v108 = a3;
  int v113 = v14;
  uint64_t v114 = a1;
  *(_DWORD *)(a2 + 4) = v27 & 0x77FFFF | 0x2D000000;
  unsigned int v36 = *v14;
  if (v36 <= 1)
  {
    uint64_t v37 = v7 + 6872;
    uint64_t v38 = v10 + 13040 * a3;
    if (*(_DWORD *)(v38 + 13032))
    {
      unint64_t v39 = 0;
      int v40 = (unsigned int *)(v38 + 13032);
      uint64_t v41 = v10 + 13040 * a3 + 1416;
      int v42 = &_os_log_internal;
      do
      {
        uint64_t v43 = a2 + 4 * v39;
        int v44 = (16 * (v39 & 0xF)) | 0x2DC00000;
        *(_DWORD *)(v43 + 8) = v44;
        signed int v45 = (_DWORD *)(v43 + 8);
        if (v9)
        {
          uint64_t v46 = 0;
          while (*(_DWORD *)(*(void *)(v37 + 8 * v46) + 12) != *(_DWORD *)(v41 + 176 * v39 + 12))
          {
            if (v9 == ++v46) {
              goto LABEL_35;
            }
          }
          *signed int v45 = v46 & 0xF | v44;
        }
        else
        {
LABEL_35:
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            int v47 = *(_DWORD *)(v41 + 176 * v39 + 32);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v39;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v47;
            *(_WORD *)&unsigned char buf[14] = 1024;
            *(_DWORD *)&uint8_t buf[16] = v9;
            _os_log_impl(&dword_223977000, v42, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-0 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
          }
        }
        ++v39;
      }
      while (v39 < *v40);
      unsigned int v36 = *v113;
    }
    else
    {
      LODWORD(v39) = 0;
    }
    if (v36 == 1)
    {
      uint64_t v48 = v10 + 13040 * a3;
      if (*(_DWORD *)(v48 + 13036))
      {
        unint64_t v49 = 0;
        BOOL v50 = (unsigned int *)(v48 + 13036);
        __int16 v51 = &_os_log_internal;
        do
        {
          uint64_t v52 = a2 + 4 * v39;
          int v53 = (16 * (v49 & 0xF)) | 0x2DC00100;
          *(_DWORD *)(v52 + 8) = v53;
          int v54 = (_DWORD *)(v52 + 8);
          if (v9)
          {
            uint64_t v55 = 0;
            while (*(_DWORD *)(*(void *)(v37 + 8 * v55) + 12) != *(_DWORD *)(v115 + 13040 * a3 + 176 * v49 + 7236))
            {
              if (v9 == ++v55) {
                goto LABEL_49;
              }
            }
            *int v54 = v55 & 0xF | v53;
          }
          else
          {
LABEL_49:
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            {
              int v56 = *(_DWORD *)(v115 + 13040 * a3 + 176 * v49 + 7256);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v39;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v56;
              *(_WORD *)&unsigned char buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v9;
              _os_log_impl(&dword_223977000, v51, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-1 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
            }
          }
          LODWORD(v39) = v39 + 1;
          ++v49;
        }
        while (v49 < *v50);
      }
    }
  }
  *(void *)(a2 + 136) = 0x2DD0000000000000;
  uint64_t v57 = v111 + 604 * v112;
  unsigned int v58 = (char *)(v57 + 88);
  uint64_t v59 = (char *)(v57 + 87);
  if (*v113 == 1) {
    int v60 = v58;
  }
  else {
    int v60 = v59;
  }
  char v61 = *v60;
  *(_DWORD *)(a2 + 140) = ((v61 & 3) << 6) | 0x2DD00000;
  int v62 = ((v61 & 3) << 6) | 0x2DD00000 | (8 * (*(unsigned char *)(v8 + 1848 * a3 + 376) & 7));
  *(_DWORD *)(a2 + 140) = v62;
  char v63 = *(unsigned char *)(v109 + 2224 * v110 + 4);
  if (v63) {
    char v63 = *(unsigned char *)(v8 + 1848 * a3 + 377);
  }
  *(_DWORD *)(a2 + 140) = v63 & 7 | v62;
  int v64 = *v113;
  if (v64 != 1) {
    goto LABEL_132;
  }
  int v65 = *v58;
  if (v65 != 2) {
    goto LABEL_62;
  }
  *(_DWORD *)(a2 + 140) = ((v61 & 3) << 6) | 0x2DD0002D;
  int v64 = *v113;
  if (v64 != 1)
  {
LABEL_132:
    if (v64 || !*v59) {
      goto LABEL_82;
    }
LABEL_66:
    unsigned int v66 = 0;
    unsigned int v67 = 0;
    do
    {
      uint64_t v68 = v66;
      if (*(unsigned char *)(v8 + 1848 * a3 + v66 + 378))
      {
        int v69 = ((v66 & 0xF) << 9) | 0x2DE04000;
        uint64_t v70 = a2 + 4 * v67;
        *(_DWORD *)(v70 + 144) = v69;
        uint64_t v71 = v8 + 1848 * a3 + 2 * v68;
        *(_DWORD *)(v70 + 144) = v69 | *(_WORD *)(v71 + 394) & 0x1FF;
        *(_DWORD *)(v70 + 528) = 770703360;
        *(_DWORD *)(v70 + 528) = *(unsigned __int16 *)(v71 + 426) | 0x2DF00000;
        ++v67;
      }
      if (*(unsigned char *)(v8 + 1848 * a3 + v68 + 458))
      {
        uint64_t v72 = 0;
        char v73 = 1;
        do
        {
          char v74 = v73;
          int v75 = ((v68 & 0xF) << 9) | (v72 << 14) | 0x2DE08000;
          uint64_t v76 = a2 + 4 * v67;
          *(_DWORD *)(v76 + 144) = v75;
          uint64_t v77 = v8 + 1848 * a3 + 4 * v68 + 2 * v72;
          *(_DWORD *)(v76 + 144) = v75 | *(_WORD *)(v77 + 474) & 0x1FF;
          *(_DWORD *)(v76 + 528) = 770703360;
          *(_DWORD *)(v76 + 528) = *(unsigned __int16 *)(v77 + 538) | 0x2DF00000;
          ++v67;
          uint64_t v72 = 1;
          char v73 = 0;
        }
        while ((v74 & 1) != 0);
      }
      unsigned int v66 = v68 + 1;
    }
    while ((int)v68 + 1 <= *(char *)(v8 + 1848 * a3 + 63));
    if (*v113 == 1)
    {
      unsigned int v78 = 0;
      do
      {
        uint64_t v79 = v78;
        if (*(unsigned char *)(v8 + 1848 * a3 + v78 + 602))
        {
          int v80 = ((v78 & 0xF) << 9) | 0x2DE06000;
          uint64_t v81 = a2 + 4 * v67;
          *(_DWORD *)(v81 + 144) = v80;
          uint64_t v82 = v8 + 1848 * a3 + 2 * v79;
          *(_DWORD *)(v81 + 144) = v80 | *(_WORD *)(v82 + 618) & 0x1FF;
          *(_DWORD *)(v81 + 528) = 770703360;
          *(_DWORD *)(v81 + 528) = *(unsigned __int16 *)(v82 + 650) | 0x2DF00000;
          ++v67;
        }
        if (*(unsigned char *)(v8 + 1848 * a3 + v79 + 682))
        {
          uint64_t v83 = 0;
          char v84 = 1;
          do
          {
            char v85 = v84;
            int v86 = ((v79 & 0xF) << 9) | (v83 << 14) | 0x2DE0A000;
            uint64_t v87 = a2 + 4 * v67;
            *(_DWORD *)(v87 + 144) = v86;
            uint64_t v88 = v8 + 1848 * a3 + 4 * v79 + 2 * v83;
            *(_DWORD *)(v87 + 144) = v86 | *(_WORD *)(v88 + 698) & 0x1FF;
            *(_DWORD *)(v87 + 528) = 770703360;
            *(_DWORD *)(v87 + 528) = *(unsigned __int16 *)(v88 + 762) | 0x2DF00000;
            ++v67;
            uint64_t v83 = 1;
            char v84 = 0;
          }
          while ((v85 & 1) != 0);
        }
        unsigned int v78 = v79 + 1;
      }
      while ((int)v79 + 1 <= *(char *)(v8 + 1848 * a3 + 64));
    }
    *(_DWORD *)(a2 + 136) = v67;
    goto LABEL_82;
  }
  int v65 = *v58;
LABEL_62:
  if (v65 == 1) {
    goto LABEL_66;
  }
LABEL_82:
  *(_DWORD *)(a2 + 912) = 0;
  uint64_t v89 = v8 + 1848 * a3;
  *(_DWORD *)(a2 + 912) = (((*(unsigned __int8 *)(v111 + 604 * v112 + 89) + *(unsigned __int8 *)(v89 + 1425)) << 10)
                         + 26624) & 0x1FC00 | 0x2D900000;
  *(_DWORD *)(a2 + 916) = 0;
  int v90 = (*(unsigned char *)(v89 + 1428) == 0) << 17;
  *(_DWORD *)(a2 + 916) = v90;
  if (*(unsigned char *)(v89 + 1428) != 1)
  {
    int v91 = v90 | 0x10000;
    *(_DWORD *)(a2 + 916) = v91;
    uint64_t v92 = v8 + 1848 * a3;
    int v93 = v91 | ((*(unsigned char *)(v92 + 1429) & 0xF) << 8);
    *(_DWORD *)(a2 + 916) = v93;
    int v90 = v93 | ((*(unsigned char *)(v92 + 1430) & 0xF) << 12);
  }
  *(_DWORD *)(a2 + 916) = v90 | 0x2DA00000;
  unsigned int v94 = (unsigned int *)(v8 + 1848 * a3 + 1436);
  unsigned int v95 = *v94;
  if (*(unsigned char *)(v111 + 604 * v112 + 3))
  {
    int v96 = 0;
    if ((v95 & 7) != 0) {
      *unsigned int v94 = (v95 + 7) & 0xFFFFFFF8;
    }
  }
  else
  {
    int v96 = *v94 & 7;
  }
  *(_DWORD *)(a2 + 924) = (v96 << 15) | 0x2D800000;
  int v97 = *(_DWORD **)(v114 + 256);
  unsigned int v98 = v97[626];
  unint64_t v116 = 0;
  uint64_t v117 = 0;
  if (!CAVDAvcDecoder::GetSDataMemInfo((uint64_t)v97, v108, &v117, &v116)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v99 = (void *)v117;
  if (!*(void *)v117 && !*(_DWORD *)(v117 + 152) && !*(_DWORD *)(v117 + 156)) {
    goto LABEL_96;
  }
  int v100 = v116;
  if (HIDWORD(v116) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "populateSliceRegisters";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = 1613;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v100 = v116;
  }
  uint64_t result = CAHDec::addToPatcherList(v114, v99, 948 * v108 + 2692, v100, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result)
  {
LABEL_96:
    unsigned int v101 = *(_DWORD *)(v8 + 1848 * a3 + 16) - (*v94 >> 3);
    *(_DWORD *)(a2 + 936) = v101;
    if (v97[590] == 1)
    {
      *(_DWORD *)(a2 + 944) = 0;
      if (v97[605])
      {
        if (v101 >= (unsigned __int16)v98) {
          unsigned int v101 = *((unsigned __int16 *)v97 + 1252);
        }
        if (v96) {
          BOOL v102 = v101 == 0;
        }
        else {
          BOOL v102 = 0;
        }
        int v103 = (unsigned __int16)v101;
        if (v102) {
          int v103 = 1;
        }
        int v104 = 0x10000;
      }
      else
      {
        unsigned int v106 = v98 >> 22;
        int v107 = 0;
        if ((v98 & 0x200000) != 0)
        {
          if (v96 && !v106)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(void *)&uint8_t buf[4] = "int CAHDecLotusAvc::populateSliceRegisters(AvcSliceRegisters *, int)";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect off_to_prot_data to be set when slice header is not byte aligned\n", buf, 0xCu);
              unsigned int v101 = *(_DWORD *)(a2 + 936);
              int v107 = *(_DWORD *)(a2 + 944) & 0x3F0000;
            }
            else
            {
              int v107 = 0;
            }
            unsigned int v106 = 1;
          }
        }
        else if (v96)
        {
          ++v106;
        }
        if (v106 >= v101) {
          unsigned int v106 = v101;
        }
        int v103 = v107 | (v106 << 22);
        int v104 = 0xFFFF;
      }
      uint64_t result = 0;
      *(_DWORD *)(a2 + 944) = v103 | v98 & v104;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecLotusAvc::populateCommonRegisters(CAHDecLotusAvc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000001;
  return 0;
}

uint64_t CAHDecLotusAvc::updateCommonRegisters(CAHDecLotusAvc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

void CAHDecLotusAvc::copyScalingList(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = *a2 & 0xFEFFFFC0 | 0x1000000;
  *a2 = v8;
  do
  {
    v8 |= (*(unsigned char *)(a4 + v7) == 0) << v7;
    *a2 = v8;
    ++v7;
  }
  while (v7 != 6);
  unsigned int v9 = v8 & 0xFFFFF03F;
  *a2 = v8 & 0xFFFFF03F;
  if (a7 >= 7)
  {
    uint64_t v10 = (a7 - 6);
    uint64_t v11 = (unsigned __int8 *)(a4 + 6);
    uint64_t v12 = &dword_223ADBEA4;
    do
    {
      int v13 = *v11++;
      BOOL v14 = v13 == 0;
      int v16 = *v12++;
      char v15 = v16;
      int v17 = v14;
      v9 |= ((v17 << v15) & 0x3F) << 6;
      *a2 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 1;
  uint64_t v20 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v22 = *(_DWORD *)(v20 + i) & 0xFFFFFF | (*(unsigned __int8 *)(v19 + i - 1) << 24);
      *(_DWORD *)(v20 + i) = v22;
      unsigned int v23 = v22 & 0xFF00FFFF | (*(unsigned __int8 *)(v19 + i) << 16);
      *(_DWORD *)(v20 + i) = v23;
      unsigned int v24 = v23 & 0xFFFF00FF | (*(unsigned __int8 *)(v19 + i + 1) << 8);
      *(_DWORD *)(v20 + i) = v24;
      *(_DWORD *)(v20 + i) = v24 & 0xFFFFFF00 | *(unsigned __int8 *)(v19 + i + 2);
    }
    ++v18;
    v20 += 16;
    v19 += 16;
  }
  while (v18 != 6);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 96;
  do
  {
    int v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = a6 + ((uint64_t)dword_223ADBEBC[v25] << 6);
    do
    {
      long long v31 = (unsigned __int8 *)(v30 + (v28 & 0x7FFFFFE0 | v29 & 4 | v27 & 0x18));
      int v32 = *(_DWORD *)(v26 + v28) & 0xFFFFFF | (*v31 << 24);
      *(_DWORD *)(v26 + v28) = v32;
      unsigned int v33 = v32 & 0xFF00FFFF | (v31[1] << 16);
      *(_DWORD *)(v26 + v28) = v33;
      unsigned int v34 = v33 & 0xFFFF00FF | (v31[2] << 8);
      *(_DWORD *)(v26 + v28) = v34;
      *(_DWORD *)(v26 + v28) = v34 & 0xFFFFFF00 | v31[3];
      ++v29;
      v28 += 4;
      v27 += 8;
    }
    while (v28 != 64);
    ++v25;
    v26 += 64;
  }
  while (v25 != 6);
}

uint64_t CAHDecLotusAvc::AvcSeqScalingListFallBack(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v3 = 12;
    }
    uint64_t v4 = a2 + 22;
    uint64_t v5 = (_OWORD *)(a2 + 34);
    while (v2 > 5)
    {
      if (*(unsigned char *)(v4 + v2 - 12))
      {
        if (*(unsigned char *)(v4 + v2) == 2)
        {
          unsigned int v9 = (_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 130);
          if (v2 == 6 || (v2 & 0x7FFFFFFD) == 8)
          {
            *unsigned int v9 = avcDefaultIntraScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADBF24;
            long long v10 = xmmword_223ADBF34;
            long long v11 = unk_223ADBF44;
          }
          else
          {
            *unsigned int v9 = avcDefaultInterScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223ADBEE4;
            long long v10 = xmmword_223ADBEF4;
            long long v11 = unk_223ADBF04;
          }
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 162) = v10;
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 178) = v11;
        }
        goto LABEL_24;
      }
      if ((v2 - 8) <= 0xFFFFFFFD)
      {
        uint64_t result = a2 + 130;
        int v13 = (_OWORD *)(a2 + 130 + ((unint64_t)(v2 - 6) << 6));
        BOOL v14 = (long long *)(a2 + 130 + ((unint64_t)(v2 - 8) << 6));
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[3];
        _DWORD v13[2] = v14[2];
        v13[3] = v17;
        *int v13 = v15;
        v13[1] = v16;
        uint64_t v8 = (v2 - 2);
LABEL_21:
        *(unsigned char *)(v4 + v2) = *(unsigned char *)(a2 + v8 + 22);
      }
LABEL_24:
      ++v2;
      ++v5;
      if (v3 == v2) {
        return result;
      }
    }
    if (*(unsigned char *)(v4 + v2 - 12)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (v6 || v2 == 3) {
      goto LABEL_24;
    }
    uint64_t v8 = (v2 - 1);
    *uint64_t v5 = *(_OWORD *)(a2 + 16 * v8 + 34);
    goto LABEL_21;
  }
  return result;
}

long long *CAHDecLotusAvc::AvcPicScalingListFallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 96))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = a3 + 97;
    uint64_t v6 = -96;
    uint64_t result = &avcDefaultIntraScalingList8x8;
    do
    {
      if (v3 > 5)
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if (*(unsigned char *)(v5 + v3 + 12) == 2)
          {
            unsigned int v9 = (_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 217);
            if (v3 == 6 || (v3 & 0x7FFFFFFD) == 8)
            {
              *unsigned int v9 = avcDefaultIntraScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADBF24;
              long long v10 = xmmword_223ADBF34;
              long long v11 = unk_223ADBF44;
            }
            else
            {
              *unsigned int v9 = avcDefaultInterScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223ADBEE4;
              long long v10 = xmmword_223ADBEF4;
              long long v11 = unk_223ADBF04;
            }
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 249) = v10;
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 265) = v11;
          }
          goto LABEL_31;
        }
        if ((v3 - 8) <= 0xFFFFFFFD)
        {
          uint64_t v12 = (_OWORD *)(a3 + 217 + ((unint64_t)(v3 - 6) << 6));
          int v13 = (long long *)(a3 + 217 + ((unint64_t)(v3 - 8) << 6));
          long long v14 = *v13;
          long long v15 = v13[1];
          long long v16 = v13[3];
          v12[2] = v13[2];
          v12[3] = v16;
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v17 = a3 + (v3 - 2);
          goto LABEL_29;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          uint64_t v18 = (v3 - 6);
          uint64_t v19 = a3 + (v18 << 6);
          uint64_t v20 = a2 + (v18 << 6);
          long long v21 = *(_OWORD *)(v20 + 130);
          long long v22 = *(_OWORD *)(v20 + 146);
          long long v23 = *(_OWORD *)(v20 + 162);
          *(_OWORD *)(v19 + 265) = *(_OWORD *)(v20 + 178);
          *(_OWORD *)(v19 + 249) = v23;
          *(_OWORD *)(v19 + 233) = v22;
          *(_OWORD *)(v19 + 217) = v21;
LABEL_23:
          char v24 = *(unsigned char *)(a2 + 22 + v3);
LABEL_30:
          *(unsigned char *)(v5 + v3 + 12) = v24;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if ((*(unsigned char *)(v5 + v3 + 12) & 2) != 0)
          {
            if (v3 > 2) {
              long long v8 = avcDefaultInterScalingList4x4;
            }
            else {
              long long v8 = avcDefaultIntraScalingList4x4;
            }
            *(_OWORD *)(v5 + v6 + 120) = v8;
          }
          goto LABEL_31;
        }
        if (v3 && v3 != 3)
        {
          uint64_t v25 = (v3 - 1);
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a3 + 16 * v25 + 121);
          uint64_t v17 = a3 + v25;
LABEL_29:
          char v24 = *(unsigned char *)(v17 + 109);
          goto LABEL_30;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          *(_OWORD *)(v5 + v6 + 120) = *(_OWORD *)(a2 + v6 + 130);
          goto LABEL_23;
        }
      }
LABEL_31:
      ++v3;
      v6 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CAHDecLotusAvc::populateSequenceRegisters(CAHDecLotusAvc *this)
{
  uint64_t v2 = *((void *)this + 32);
  unint64_t v3 = (_DWORD *)*((void *)this + 33);
  int v4 = *(_DWORD *)(v2 + 3612);
  int v5 = *(_DWORD *)(v2 + 3616);
  uint64_t v6 = *(void *)(v2 + 3296);
  uint64_t v7 = *(void *)(v2 + 3304);
  uint64_t v8 = v6 + 2224 * v4;
  v3[10] = 0;
  __int16 v9 = *(_WORD *)(v8 + 1558);
  v3[10] = (2 * (v9 & 0xFFF)) | 1;
  v3[10] = ((*(_WORD *)(v8 + 1560) & 0xFFF) << 17) | (2 * (v9 & 0xFFF)) | 0x10001;
  v3[11] = 0;
  int v10 = *(unsigned char *)(v8 + 1564) & 1;
  v3[11] = v10;
  int v11 = v10 | ((*(unsigned char *)(v7 + 604 * v5 + 95) != 0) << 7) | 0x2800;
  v3[11] = v11;
  uint64_t v12 = (unsigned char *)(v8 + 4);
  int v13 = *(unsigned __int8 *)(v8 + 4);
  if (*(unsigned char *)(v8 + 4)) {
    int v13 = (*(unsigned char *)(v6 + 2224 * v4 + 7) & 0xF) << 15;
  }
  int v14 = v13 | v11;
  v3[11] = v14;
  long long v15 = (unsigned char *)(v6 + 2224 * v4);
  int v16 = v14 & 0x7F87A881 | ((v15[6] & 0xF) << 19);
  v3[11] = v16;
  unsigned int v17 = v16 & 0xFF7FFFFF | ((v15[5] & 1) << 23);
  v3[11] = v17;
  v3[11] = v17 & 0xFCFFFFFF | ((*v12 & 3) << 24);
  if (v15[9])
  {
    if (*v12 == 3) {
      int v18 = 12;
    }
    else {
      int v18 = 8;
    }
    uint64_t v19 = CAHDecLotusAvc::AvcSeqScalingListFallBack((uint64_t)this, v8);
    CAHDecLotusAvc::copyScalingList(v19, v3 + 12, *((void *)this + 33) + 648, v6 + 2224 * v4 + 22, v6 + 2224 * v4 + 34, v6 + 2224 * v4 + 130, v18);
  }
  return 0;
}

uint64_t CAHDecLotusAvc::populatePictureRegisters(CAHDecLotusAvc *this)
{
  uint64_t v251 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 3612);
  int v4 = *(_DWORD *)(v2 + 3616);
  uint64_t v5 = *(void *)(v2 + 3296);
  uint64_t v6 = *(void *)(v2 + 3304);
  uint64_t v233 = *(void *)(v2 + 2088);
  uint64_t v234 = *(unsigned int *)(v2 + 3152);
  int v236 = *(_DWORD *)(v2 + 2644);
  int v230 = *(unsigned __int8 *)(v2 + 8);
  int v231 = *(_DWORD *)(v2 + 3132);
  long long v7 = *(_OWORD *)(v2 + 7016);
  v250[8] = *(_OWORD *)(v2 + 7000);
  v250[9] = v7;
  long long v8 = *(_OWORD *)(v2 + 7048);
  v250[10] = *(_OWORD *)(v2 + 7032);
  v250[11] = v8;
  long long v9 = *(_OWORD *)(v2 + 6952);
  v250[4] = *(_OWORD *)(v2 + 6936);
  v250[5] = v9;
  long long v10 = *(_OWORD *)(v2 + 6984);
  v250[6] = *(_OWORD *)(v2 + 6968);
  v250[7] = v10;
  long long v11 = *(_OWORD *)(v2 + 6888);
  v250[0] = *(_OWORD *)(v2 + 6872);
  v250[1] = v11;
  long long v12 = *(_OWORD *)(v2 + 6920);
  v250[2] = *(_OWORD *)(v2 + 6904);
  v250[3] = v12;
  uint64_t v232 = *(unsigned int *)(v2 + 7064);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  int v14 = (unsigned __int8 *)*((void *)this + 32);
  uint64_t v15 = *((void *)this + 33);
  int v16 = v14[2675];
  unsigned int v17 = v14[2674];
  if (!(v16 | v17)) {
    goto LABEL_38;
  }
  uint64_t v18 = v5 + 2224 * v3;
  unsigned int v19 = *(unsigned __int8 *)(v18 + 6);
  unsigned int v20 = *(unsigned __int8 *)(v18 + 7);
  if (v19 > v20) {
    LOWORD(v20) = v19;
  }
  int v21 = ((_WORD)v20 + 9) & 0x1FE;
  if (v21 == 8)
  {
    unsigned int v26 = 1;
    int v24 = 8;
    if (!v14[2675]) {
      goto LABEL_30;
    }
  }
  else
  {
    int v22 = v14[2672];
    if (v21 == 12)
    {
      BOOL v23 = v22 == 0;
      if (v22) {
        int v24 = 12;
      }
      else {
        int v24 = 11;
      }
      int v25 = 4;
LABEL_17:
      if (v23) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 + 1;
      }
      if (!v16) {
        goto LABEL_30;
      }
      goto LABEL_23;
    }
    if (v21 == 10)
    {
      BOOL v23 = v22 == 0;
      if (v22) {
        int v24 = 10;
      }
      else {
        int v24 = 9;
      }
      int v25 = 2;
      goto LABEL_17;
    }
    int v24 = 27;
    unsigned int v26 = 27;
    if (!v16) {
      goto LABEL_30;
    }
  }
LABEL_23:
  if (*(unsigned char *)(v5 + 2224 * v3 + 4) && (v16 == 2 && v24 == 8 || v16 == 3 && (v24 - 9) <= 1))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "populatePictureRegisters";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = v24;
    WORD1(buf[2]) = 1024;
    HIDWORD(buf[2]) = v16;
    int v27 = &_os_log_internal;
    uint64_t v28 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
    goto LABEL_136;
  }
LABEL_30:
  if (v17 && (v17 == 3 && v26 - 9 < 2 || v26 <= 0x1A && ((1 << v26) & 0x4C00000) != 0 && v17 <= 2))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "populatePictureRegisters";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = v26;
    WORD1(buf[2]) = 1024;
    HIDWORD(buf[2]) = v17;
    int v27 = &_os_log_internal;
    uint64_t v28 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
    goto LABEL_136;
  }
LABEL_38:
  *(_DWORD *)(v15 + 52) = 766509056;
  if (**(_DWORD **)(*((void *)this + 32) + 3312) == 5) {
    int v29 = 766517248;
  }
  else {
    int v29 = 766509056;
  }
  int v30 = v13;
  if (v13) {
    int v31 = 688;
  }
  else {
    int v31 = 672;
  }
  if (v236) {
    int v32 = 4160;
  }
  else {
    int v32 = 64;
  }
  unsigned int v33 = v32 & 0xFFFFFFF0 | ((v236 == 1) << 10) | v31 & 0xFFFFFFF0 | (4 * (v16 & 3)) | v17 & 3 | v29;
  *(_DWORD *)(v15 + 52) = v33;
  unsigned int v34 = (unsigned char *)*((void *)this + 32);
  int v35 = v33 | ((v34[2652] & 1) << 19);
  *(_DWORD *)(v15 + 52) = v35;
  unsigned int v36 = v35 & 0xFFFBFFFF | ((v34[2653] & 1) << 18);
  *(_DWORD *)(v15 + 52) = v36;
  unsigned int v37 = v36 & 0xFFFDFFFF | ((v34[2654] & 1) << 17);
  *(_DWORD *)(v15 + 52) = v37;
  *(void *)(v15 + 56) = 0x1000000;
  uint64_t v38 = v5 + 2224 * v3;
  int v39 = (16 * (*(_WORD *)(v38 + 1558) & 0xFFF)) | 0xF;
  *(_DWORD *)(v15 + 60) = v39;
  int v40 = v39 | (*(unsigned __int16 *)(v38 + 1560) << 20) | 0xF0000;
  *(void *)(v15 + 64) = 0;
  *(_DWORD *)(v15 + 60) = v40;
  LODWORD(v38) = (*(unsigned char *)(v38 + 8) & 1) << 18;
  *(_DWORD *)(v15 + 68) = v38;
  uint64_t v41 = (unsigned char *)(v6 + 604 * v4);
  LODWORD(v38) = v38 & 0xFFF7FFFF | ((v41[93] & 1) << 19);
  *(_DWORD *)(v15 + 68) = v38;
  LODWORD(v38) = v38 & 0xFFEFFFFF | ((v41[3] & 1) << 20);
  *(_DWORD *)(v15 + 68) = v38;
  *(_DWORD *)(v15 + 68) = v38 | ((**(_DWORD **)(*((void *)this + 32) + 3312) != 5) << 21);
  unsigned int v42 = *(_DWORD *)(v15 + 72) & 0xFFFFFC1F | (32 * (v41[91] & 0x1F));
  *(_DWORD *)(v15 + 72) = v42;
  *(_DWORD *)(v15 + 72) = v42 & 0xFFFFFFE0 | v41[601] & 0x1F;
  if (v41[96])
  {
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) == 3) {
      int v43 = 12;
    }
    else {
      int v43 = 8;
    }
    uint64_t v44 = *((void *)this + 33) + 1132;
    signed int v45 = CAHDecLotusAvc::AvcPicScalingListFallBack(v13, v5 + 2224 * v3, v6 + 604 * v4);
    CAHDecLotusAvc::copyScalingList((uint64_t)v45, (unsigned int *)(v15 + 76), v44, v6 + 604 * v4 + 109, v6 + 604 * v4 + 121, v6 + 604 * v4 + 217, v43);
    unsigned int v37 = *(_DWORD *)(v15 + 52);
  }
  if ((~v37 & 0xC0000) != 0)
  {
    *(_DWORD *)(v15 + 80) = *((_DWORD *)this + 3978);
    int v50 = *((_DWORD *)this + 3979);
  }
  else
  {
    uint64_t v46 = (_DWORD *)*((void *)this + 32);
    int v47 = v46[664];
    if (!v47 || !v46[665])
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v132 = v46[665];
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = "populatePictureRegisters";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = v47;
      WORD1(buf[2]) = 1024;
      HIDWORD(buf[2]) = v132;
      int v27 = &_os_log_internal;
      uint64_t v28 = "AppleAVD: %s(): invalid stat crop width/height %d/%d";
LABEL_136:
      uint64_t v133 = (uint8_t *)buf;
      uint32_t v134 = 24;
      goto LABEL_137;
    }
    unsigned __int16 v48 = v46[666];
    *(_WORD *)(v15 + 80) = v48;
    *(_DWORD *)(v15 + 80) = v48 | ((unsigned __int16)v46[667] << 16);
    unsigned __int16 v49 = v46[666] + v46[664] - 1;
    *(_WORD *)(v15 + 84) = v49;
    int v50 = (v49 | ((unsigned __int16)(v46[665] + *((_WORD *)v46 + 1334)) << 16)) - 0x10000;
  }
  *(_DWORD *)(v15 + 84) = v50;
  *(_DWORD *)(v15 + 88) = 3145786;
  __int16 v51 = (char *)this + 9008;
  for (uint64_t i = 92; i != 120; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v53 = *((void *)this + 33);
    int v54 = *(_DWORD *)(v53 + i);
    *(_DWORD *)(v53 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFu;
    uint64_t v55 = *((void *)this + 33);
    int v56 = *(_DWORD *)(v55 + i);
    *(_DWORD *)(v55 + i) = v54;
    if (*(void *)v51 || *((_DWORD *)v51 + 38) || *((_DWORD *)v51 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v51, i, 0, 0xFFFFFFFFLL, 8, v56, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 28) = *(_DWORD *)(*((void *)this + 33) + i + 28) & 0x800001FF | (((*((_DWORD *)this + 3972) >> 9) & 0x3FFFFF) << 9);
    v51 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 148) = 0;
  *(_DWORD *)(*((void *)this + 33) + 152) = 0;
  if ((*(unsigned char *)(v15 + 54) & 8) == 0) {
    goto LABEL_246;
  }
  uint64_t v58 = *((void *)this + 33);
  uint64_t v59 = *(void *)(*((void *)this + 32) + 2680);
  long long v247 = 0u;
  long long v248 = 0u;
  long long v245 = 0u;
  long long v246 = 0u;
  long long v243 = 0u;
  long long v244 = 0u;
  long long v241 = 0u;
  long long v242 = 0u;
  long long v240 = 0u;
  memset(buf, 0, sizeof(buf));
  int v60 = *(_DWORD *)(v58 + 16);
  buf[0] = v59;
  int v61 = *(_DWORD *)(v58 + 152);
  *(_DWORD *)(v58 + 152) = 0;
  *(_DWORD *)(*((void *)this + 33) + 152) ^= 0xFFFFFFu;
  uint64_t v62 = *((void *)this + 33);
  int v63 = *(_DWORD *)(v62 + 152);
  *(_DWORD *)(v62 + 152) = v61;
  if (!v59 && !*((void *)&v247 + 1)) {
    goto LABEL_246;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 152, (v60 & 0xF) << 9, 0xFFFFFFFFLL, 8, v63, 4);
  if (!result)
  {
LABEL_246:
    *(_DWORD *)(*((void *)this + 33) + 156) = 0;
    uint64_t v64 = *((void *)this + 33);
    int v65 = *(_DWORD *)(v64 + 156);
    *(_DWORD *)(v64 + 156) = 0;
    *(_DWORD *)(*((void *)this + 33) + 156) ^= 0xFFFFFFu;
    uint64_t v66 = *((void *)this + 33);
    int v67 = *(_DWORD *)(v66 + 156);
    *(_DWORD *)(v66 + 156) = v65;
    if (!*((void *)this + 1830) && !*((_DWORD *)this + 3698) && !*((_DWORD *)this + 3699)) {
      goto LABEL_247;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1830, 156, 0, 0xFFFFFFFFLL, 8, v67, 4);
    if (!result)
    {
LABEL_247:
      *(_DWORD *)(*((void *)this + 33) + 160) = 0;
      uint64_t v68 = *((void *)this + 33);
      int v69 = *(_DWORD *)(v68 + 160);
      *(_DWORD *)(v68 + 160) = 0;
      *(_DWORD *)(*((void *)this + 33) + 160) ^= 0xFFFFFFu;
      uint64_t v70 = *((void *)this + 33);
      int v71 = *(_DWORD *)(v70 + 160);
      *(_DWORD *)(v70 + 160) = v69;
      if (!*((void *)this + 1852) && !*((_DWORD *)this + 3742) && !*((_DWORD *)this + 3743)) {
        goto LABEL_248;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1852, 160, 0, 0xFFFFFFFFLL, 8, v71, 4);
      if (!result)
      {
LABEL_248:
        *(_DWORD *)(*((void *)this + 33) + 164) = 0;
        uint64_t v72 = *((void *)this + 33);
        int v73 = *(_DWORD *)(v72 + 164);
        *(_DWORD *)(v72 + 164) = 0;
        *(_DWORD *)(*((void *)this + 33) + 164) ^= 0xFFFFFFu;
        uint64_t v74 = *((void *)this + 33);
        int v75 = *(_DWORD *)(v74 + 164);
        *(_DWORD *)(v74 + 164) = v73;
        if (!*((void *)this + 1874) && !*((_DWORD *)this + 3786) && !*((_DWORD *)this + 3787)) {
          goto LABEL_249;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1874, 164, 0, 0xFFFFFFFFLL, 8, v75, 4);
        if (!result)
        {
LABEL_249:
          *(_DWORD *)(*((void *)this + 33) + 168) = 0;
          uint64_t v76 = *((void *)this + 33);
          int v77 = *(_DWORD *)(v76 + 168);
          *(_DWORD *)(v76 + 168) = 0;
          *(_DWORD *)(*((void *)this + 33) + 168) ^= 0xFFFFFFu;
          uint64_t v78 = *((void *)this + 33);
          int v79 = *(_DWORD *)(v78 + 168);
          *(_DWORD *)(v78 + 168) = v77;
          if (!*((void *)this + 1896) && !*((_DWORD *)this + 3830) && !*((_DWORD *)this + 3831)) {
            goto LABEL_250;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1896, 168, 0, 0xFFFFFFFFLL, 8, v79, 4);
          if (!result)
          {
LABEL_250:
            *(_DWORD *)(*((void *)this + 33) + 172) = 0;
            uint64_t v80 = *((void *)this + 33);
            int v81 = *(_DWORD *)(v80 + 172);
            *(_DWORD *)(v80 + 172) = 0;
            *(_DWORD *)(*((void *)this + 33) + 172) ^= 0xFFFFFFu;
            uint64_t v82 = *((void *)this + 33);
            int v83 = *(_DWORD *)(v82 + 172);
            *(_DWORD *)(v82 + 172) = v81;
            if (!*((void *)this + 1918) && !*((_DWORD *)this + 3874) && !*((_DWORD *)this + 3875)) {
              goto LABEL_251;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1918, 172, 0, 0xFFFFFFFFLL, 8, v83, 4);
            if (!result)
            {
LABEL_251:
              *(_DWORD *)(*((void *)this + 33) + 176) = 0;
              uint64_t v84 = *((void *)this + 33);
              int v85 = *(_DWORD *)(v84 + 176);
              *(_DWORD *)(v84 + 176) = 0;
              *(_DWORD *)(*((void *)this + 33) + 176) ^= 0xFFFFFFu;
              uint64_t v86 = *((void *)this + 33);
              int v87 = *(_DWORD *)(v86 + 176);
              *(_DWORD *)(v86 + 176) = v85;
              if (!*((void *)this + 1940) && !*((_DWORD *)this + 3918) && !*((_DWORD *)this + 3919)) {
                goto LABEL_252;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1940, 176, 0, 0xFFFFFFFFLL, 8, v87, 4);
              if (!result)
              {
LABEL_252:
                *(_DWORD *)(*((void *)this + 33) + 180) = 0;
                *(_DWORD *)(*((void *)this + 33) + 184) = 0;
                uint64_t v88 = *((void *)this + 33);
                int v89 = *(_DWORD *)(v88 + 184);
                *(_DWORD *)(v88 + 184) = 0;
                *(_DWORD *)(*((void *)this + 33) + 184) ^= 0xFFFFFFu;
                uint64_t v90 = *((void *)this + 33);
                int v91 = *(_DWORD *)(v90 + 184);
                *(_DWORD *)(v90 + 184) = v89;
                if (!*((void *)this + 1280) && !*((_DWORD *)this + 2598) && !*((_DWORD *)this + 2599)) {
                  goto LABEL_253;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1280, 184, 0, 0xFFFFFFFFLL, 8, v91, 4);
                if (!result)
                {
LABEL_253:
                  *(_DWORD *)(*((void *)this + 33) + 188) = 0;
                  uint64_t v92 = *((void *)this + 33);
                  int v93 = *(_DWORD *)(v92 + 188);
                  *(_DWORD *)(v92 + 188) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 188) ^= 0xFFFFFFu;
                  uint64_t v94 = *((void *)this + 33);
                  int v95 = *(_DWORD *)(v94 + 188);
                  *(_DWORD *)(v94 + 188) = v93;
                  int v96 = (char *)this + 176 * v234;
                  if (!*((void *)v96 + 1302)
                    && !*((_DWORD *)this + 44 * v234 + 2642)
                    && !*((_DWORD *)this + 44 * v234 + 2643))
                  {
                    goto LABEL_254;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v96 + 1302, 188, 0, 0xFFFFFFFFLL, 8, v95, 4);
                  if (!result)
                  {
LABEL_254:
                    *(_DWORD *)(*((void *)this + 33) + 192) = 0;
                    uint64_t v97 = *((void *)this + 33);
                    int v98 = *(_DWORD *)(v97 + 192);
                    *(_DWORD *)(v97 + 192) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 192) ^= 0x1FFFFFFu;
                    uint64_t v99 = *((void *)this + 33);
                    int v100 = *(_DWORD *)(v99 + 192);
                    *(_DWORD *)(v99 + 192) = v98;
                    unsigned int v101 = (char *)this + 176 * v234;
                    if (!*((void *)v101 + 70)
                      && !*((_DWORD *)this + 44 * v234 + 178)
                      && !*((_DWORD *)this + 44 * v234 + 179))
                    {
                      goto LABEL_255;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v101 + 70, 192, 0, 0xFFFFFFFFLL, 7, v100, 4);
                    if (!result)
                    {
LABEL_255:
                      *(_DWORD *)(*((void *)this + 33) + 196) = 0;
                      uint64_t v102 = *((void *)this + 33);
                      int v103 = *(_DWORD *)(v102 + 196);
                      *(_DWORD *)(v102 + 196) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 196) ^= 0x1FFFFFFu;
                      uint64_t v104 = *((void *)this + 33);
                      int v105 = *(_DWORD *)(v104 + 196);
                      *(_DWORD *)(v104 + 196) = v103;
                      unsigned int v106 = (void *)(v233 + 8);
                      if (!*(void *)(v233 + 8) && !*(_DWORD *)(v233 + 160) && !*(_DWORD *)(v233 + 164)) {
                        goto LABEL_256;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v233 + 8), 196, *(_DWORD *)(v233 + 60), 0xFFFFFFFFLL, 7, v105, 4);
                      if (!result)
                      {
LABEL_256:
                        *(_DWORD *)(*((void *)this + 33) + 200) = 0;
                        uint64_t v107 = *((void *)this + 33);
                        int v108 = *(_DWORD *)(v107 + 200);
                        *(_DWORD *)(v107 + 200) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 200) ^= 0x1FFFFFFu;
                        uint64_t v109 = *((void *)this + 33);
                        int v110 = *(_DWORD *)(v109 + 200);
                        *(_DWORD *)(v109 + 200) = v108;
                        uint64_t v111 = (char *)this + 176 * v234;
                        if (!*((void *)v111 + 598)
                          && !*((_DWORD *)this + 44 * v234 + 1234)
                          && !*((_DWORD *)this + 44 * v234 + 1235))
                        {
                          goto LABEL_257;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v111 + 598, 200, 0, 0xFFFFFFFFLL, 7, v110, 4);
                        if (!result)
                        {
LABEL_257:
                          *(_DWORD *)(*((void *)this + 33) + 204) = 0;
                          uint64_t v112 = *((void *)this + 33);
                          int v113 = *(_DWORD *)(v112 + 204);
                          *(_DWORD *)(v112 + 204) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 204) ^= 0x1FFFFFFu;
                          uint64_t v114 = *((void *)this + 33);
                          int v115 = *(_DWORD *)(v114 + 204);
                          *(_DWORD *)(v114 + 204) = v113;
                          if (!*v106 && !*(_DWORD *)(v233 + 160) && !*(_DWORD *)(v233 + 164)) {
                            goto LABEL_258;
                          }
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v106, 204, *(_DWORD *)(v233 + 64), 0xFFFFFFFFLL, 7, v115, 4);
                          if (!result)
                          {
LABEL_258:
                            if (*(_DWORD *)(*((void *)this + 32) + 2648) != 1) {
                              goto LABEL_132;
                            }
                            uint64_t v116 = *((void *)this + 33);
                            int v117 = *(_DWORD *)(v116 + 196);
                            *(_DWORD *)(v116 + 196) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 196) ^= 0x1FFFFFFu;
                            uint64_t v118 = *((void *)this + 33);
                            int v119 = *(_DWORD *)(v118 + 196);
                            *(_DWORD *)(v118 + 196) = v117;
                            if (!*v106 && !*(_DWORD *)(v233 + 160) && !*(_DWORD *)(v233 + 164)) {
                              goto LABEL_259;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v106, 196, *(_DWORD *)(v233 + 60), 0xFFFFFFFFLL, 7, v119, 4);
                            if (!result)
                            {
LABEL_259:
                              uint64_t v120 = *((void *)this + 33);
                              int v121 = *(_DWORD *)(v120 + 204);
                              *(_DWORD *)(v120 + 204) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 204) ^= 0x1FFFFFFu;
                              uint64_t v122 = *((void *)this + 33);
                              int v123 = *(_DWORD *)(v122 + 204);
                              *(_DWORD *)(v122 + 204) = v121;
                              if (!*v106 && !*(_DWORD *)(v233 + 160) && !*(_DWORD *)(v233 + 164)) {
                                goto LABEL_260;
                              }
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v106, 204, *(_DWORD *)(v233 + 64), 0xFFFFFFFFLL, 7, v123, 4);
                              if (!result)
                              {
LABEL_260:
                                uint64_t v124 = *((void *)this + 33);
                                int v125 = *(_DWORD *)(v124 + 192);
                                *(_DWORD *)(v124 + 192) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 192) ^= 0x1FFFFFFu;
                                uint64_t v126 = *((void *)this + 33);
                                int v127 = *(_DWORD *)(v126 + 192);
                                *(_DWORD *)(v126 + 192) = v125;
                                if (!*v106 && !*(_DWORD *)(v233 + 160) && !*(_DWORD *)(v233 + 164)) {
                                  goto LABEL_261;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v106, 192, *(_DWORD *)(v233 + 72), 0xFFFFFFFFLL, 7, v127, 4);
                                if (!result)
                                {
LABEL_261:
                                  uint64_t v128 = *((void *)this + 33);
                                  int v129 = *(_DWORD *)(v128 + 200);
                                  *(_DWORD *)(v128 + 200) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 200) ^= 0x1FFFFFFu;
                                  uint64_t v130 = *((void *)this + 33);
                                  int v131 = *(_DWORD *)(v130 + 200);
                                  *(_DWORD *)(v130 + 200) = v129;
                                  if (!*v106 && !*(_DWORD *)(v233 + 160) && !*(_DWORD *)(v233 + 164)) {
                                    goto LABEL_132;
                                  }
                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v106, 200, *(_DWORD *)(v233 + 76), 0xFFFFFFFFLL, 7, v131, 4);
                                  if (!result)
                                  {
LABEL_132:
                                    int v228 = v3;
                                    if (*(_DWORD *)(v15 + 52) & 0x2000 | v232)
                                    {
                                      *((_DWORD *)this + v234 + 116) = 0;
                                      *(_DWORD *)(*((void *)this + 33) + 208) = 0;
                                      if (v232)
                                      {
                                        uint64_t v135 = 0;
                                        if (v30) {
                                          int v136 = 0x2000000;
                                        }
                                        else {
                                          int v136 = 0;
                                        }
                                        int v229 = v136;
                                        do
                                        {
                                          uint64_t v137 = *((void *)v250 + v135);
                                          uint64_t v138 = *(unsigned int *)(v137 + 32);
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 208) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 208) = *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 208) & 0xFFFFFFF | ((v232 << 28) - 0x10000000);
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 208) &= 0xF3FFFFFF;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 208) = *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 208) & 0xFDFFFFFF | v229;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 208) |= 0x1000000u;
                                          int v139 = v231 - *(_DWORD *)(v137 + 12);
                                          int v140 = v139 & 0x1FFFF;
                                          if (v139 < -32768) {
                                            int v140 = 98304;
                                          }
                                          if (v139 < 0x8000) {
                                            int v141 = v140;
                                          }
                                          else {
                                            int v141 = 0x7FFF;
                                          }
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 208) = *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 208) & 0xFFFE0000 | v141;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 208) = *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 208) & 0xFFFDFFFF | (*(unsigned __int8 *)(v137 + 1) << 17);
                                          if (*(_DWORD *)(v137 + 28) == 1)
                                          {
                                            long long v248 = 0u;
                                            long long v249 = 0u;
                                            long long v246 = 0u;
                                            long long v247 = 0u;
                                            long long v244 = 0u;
                                            long long v245 = 0u;
                                            long long v242 = 0u;
                                            long long v243 = 0u;
                                            long long v240 = 0u;
                                            long long v241 = 0u;
                                            memset(buf, 0, sizeof(buf));
                                            int DPB = AVC_RLM::getDPB(*(void *)(*((void *)this + 32) + 3104), buf);
                                            if (DPB < 1)
                                            {
                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                                return 0xFFFFFFFFLL;
                                              }
                                              int v237 = 136315138;
                                              int v238 = "populatePictureRegisters";
                                              int v27 = &_os_log_internal;
                                              uint64_t v28 = "AppleAVD: ERROR: %s: No ref pics found!\n";
                                            }
                                            else
                                            {
                                              uint64_t v143 = DPB;
                                              while (v143-- >= 1)
                                              {
                                                uint64_t v137 = buf[v143];
                                                if (!*(_DWORD *)(v137 + 28))
                                                {
                                                  uint64_t v138 = *(unsigned int *)(v137 + 32);
                                                  goto LABEL_156;
                                                }
                                              }
                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                                return 0xFFFFFFFFLL;
                                              }
                                              int v237 = 136315138;
                                              int v238 = "populatePictureRegisters";
                                              int v27 = &_os_log_internal;
                                              uint64_t v28 = "AppleAVD: ERROR: %s: No non-existing ref frames found!\n";
                                            }
                                            uint64_t v133 = (uint8_t *)&v237;
                                            uint32_t v134 = 12;
                                            goto LABEL_137;
                                          }
LABEL_156:
                                          if (v30)
                                          {
                                            buf[0] = 0;
                                            if (!CAVDAvcDecoder::decodeGetRenderTargetRef(*((void *)this + 32), v138, *(_DWORD *)(v137 + 56), *(_DWORD *)(v137 + 64), buf))
                                            {
                                              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                              {
                                                LOWORD(v237) = 0;
                                                int v27 = &_os_log_internal;
                                                uint64_t v28 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
                                                uint64_t v133 = (uint8_t *)&v237;
                                                uint32_t v134 = 2;
LABEL_137:
                                                _os_log_impl(&dword_223977000, v27, OS_LOG_TYPE_DEFAULT, v28, v133, v134);
                                              }
                                              return 0xFFFFFFFFLL;
                                            }
                                            *(void *)(v137 + 40) = buf[0] + 8;
                                          }
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 272) = 0;
                                          int v145 = 4 * v135;
                                          int v235 = 4 * v135 + 272;
                                          uint64_t v146 = *((void *)this + 33) + 4 * v135;
                                          int v147 = *(_DWORD *)(v146 + 272);
                                          *(_DWORD *)(v146 + 272) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 272) ^= 0x1FFFFFFu;
                                          uint64_t v148 = *((void *)this + 33) + 4 * v135;
                                          int v149 = *(_DWORD *)(v148 + 272);
                                          *(_DWORD *)(v148 + 272) = v147;
                                          unsigned int v150 = v138;
                                          int v151 = (char *)this + 176 * v138;
                                          if (*((void *)v151 + 70)
                                            || *((_DWORD *)this + 44 * v138 + 178)
                                            || *((_DWORD *)this + 44 * v138 + 179))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v151 + 70, v235, 0, 0xFFFFFFFFLL, 7, v149, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 336) = 0;
                                          int v152 = v145 + 336;
                                          uint64_t v153 = *((void *)this + 33) + 4 * v135;
                                          int v154 = *(_DWORD *)(v153 + 336);
                                          *(_DWORD *)(v153 + 336) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 336) ^= 0x1FFFFFFu;
                                          uint64_t v155 = *((void *)this + 33) + 4 * v135;
                                          int v156 = *(_DWORD *)(v155 + 336);
                                          *(_DWORD *)(v155 + 336) = v154;
                                          uint64_t v157 = *(void *)(v137 + 40);
                                          if (*(void *)v157 || *(_DWORD *)(v157 + 152) || *(_DWORD *)(v157 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v157, v145 + 336, *(_DWORD *)(v157 + 52), 0xFFFFFFFFLL, 7, v156, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 400) = 0;
                                          int v158 = v145 + 400;
                                          uint64_t v159 = *((void *)this + 33) + 4 * v135;
                                          int v160 = *(_DWORD *)(v159 + 400);
                                          *(_DWORD *)(v159 + 400) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 400) ^= 0x1FFFFFFu;
                                          uint64_t v161 = *((void *)this + 33) + 4 * v135;
                                          int v162 = *(_DWORD *)(v161 + 400);
                                          *(_DWORD *)(v161 + 400) = v160;
                                          int v163 = (char *)this + 176 * v150;
                                          if (*((void *)v163 + 598)
                                            || *((_DWORD *)this + 44 * v150 + 1234)
                                            || *((_DWORD *)this + 44 * v150 + 1235))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v163 + 598, v145 + 400, 0, 0xFFFFFFFFLL, 7, v162, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 464) = 0;
                                          int v164 = v145 + 464;
                                          uint64_t v165 = *((void *)this + 33) + 4 * v135;
                                          int v166 = *(_DWORD *)(v165 + 464);
                                          *(_DWORD *)(v165 + 464) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 464) ^= 0x1FFFFFFu;
                                          uint64_t v167 = *((void *)this + 33) + 4 * v135;
                                          int v168 = *(_DWORD *)(v167 + 464);
                                          *(_DWORD *)(v167 + 464) = v166;
                                          uint64_t v169 = *(void *)(v137 + 40);
                                          if (*(void *)v169 || *(_DWORD *)(v169 + 152) || *(_DWORD *)(v169 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v169, v164, *(_DWORD *)(v169 + 56), 0xFFFFFFFFLL, 7, v168, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                                          {
                                            uint64_t v170 = *((void *)this + 33) + 4 * v135;
                                            int v171 = *(_DWORD *)(v170 + 336);
                                            *(_DWORD *)(v170 + 336) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 336) ^= 0x1FFFFFFu;
                                            uint64_t v172 = *((void *)this + 33) + 4 * v135;
                                            int v173 = *(_DWORD *)(v172 + 336);
                                            *(_DWORD *)(v172 + 336) = v171;
                                            uint64_t v174 = *(void *)(v137 + 40);
                                            if (*(void *)v174 || *(_DWORD *)(v174 + 152) || *(_DWORD *)(v174 + 156))
                                            {
                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v174, v152, *(_DWORD *)(v174 + 52), 0xFFFFFFFFLL, 7, v173, 4);
                                              if (result) {
                                                return result;
                                              }
                                            }
                                            uint64_t v175 = *((void *)this + 33) + 4 * v135;
                                            int v176 = *(_DWORD *)(v175 + 464);
                                            *(_DWORD *)(v175 + 464) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 464) ^= 0x1FFFFFFu;
                                            uint64_t v177 = *((void *)this + 33) + 4 * v135;
                                            int v178 = *(_DWORD *)(v177 + 464);
                                            *(_DWORD *)(v177 + 464) = v176;
                                            uint64_t v179 = *(void *)(v137 + 40);
                                            if (*(void *)v179 || *(_DWORD *)(v179 + 152) || *(_DWORD *)(v179 + 156))
                                            {
                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v179, v164, *(_DWORD *)(v179 + 56), 0xFFFFFFFFLL, 7, v178, 4);
                                              if (result) {
                                                return result;
                                              }
                                            }
                                            uint64_t v180 = *((void *)this + 33) + 4 * v135;
                                            int v181 = *(_DWORD *)(v180 + 272);
                                            *(_DWORD *)(v180 + 272) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 272) ^= 0x1FFFFFFu;
                                            uint64_t v182 = *((void *)this + 33) + 4 * v135;
                                            int v183 = *(_DWORD *)(v182 + 272);
                                            *(_DWORD *)(v182 + 272) = v181;
                                            uint64_t v184 = *(void *)(v137 + 40);
                                            if (*(void *)v184 || *(_DWORD *)(v184 + 152) || *(_DWORD *)(v184 + 156))
                                            {
                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v184, v235, *(_DWORD *)(v184 + 64), 0xFFFFFFFFLL, 7, v183, 4);
                                              if (result) {
                                                return result;
                                              }
                                            }
                                            uint64_t v185 = *((void *)this + 33) + 4 * v135;
                                            int v186 = *(_DWORD *)(v185 + 400);
                                            *(_DWORD *)(v185 + 400) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 4 * v135 + 400) ^= 0x1FFFFFFu;
                                            uint64_t v187 = *((void *)this + 33) + 4 * v135;
                                            int v188 = *(_DWORD *)(v187 + 400);
                                            *(_DWORD *)(v187 + 400) = v186;
                                            uint64_t v189 = *(void *)(v137 + 40);
                                            if (*(void *)v189 || *(_DWORD *)(v189 + 152) || *(_DWORD *)(v189 + 156))
                                            {
                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v189, v158, *(_DWORD *)(v189 + 68), 0xFFFFFFFFLL, 7, v188, 4);
                                              if (result) {
                                                return result;
                                              }
                                            }
                                          }
                                          ++v135;
                                        }
                                        while (v135 != v232);
                                      }
                                    }
                                    else
                                    {
                                      *(_DWORD *)(v15 + 52) |= 0x2000u;
                                      *((_DWORD *)this + v234 + 116) = 1;
                                      *(_DWORD *)(*((void *)this + 33) + 208) = 0;
                                    }
                                    *(_DWORD *)(*((void *)this + 33) + 528) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 532) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 536) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 540) = 0;
                                    if (v236)
                                    {
                                      uint64_t v190 = *((void *)this + 32);
                                      int v191 = *(unsigned __int8 *)(v190 + 3004);
                                      if (*(unsigned char *)(v190 + 3004))
                                      {
                                        int v192 = *(_DWORD *)(v190 + 3016);
                                        int v191 = *(_DWORD *)(v190 + 3020);
                                      }
                                      else
                                      {
                                        int v192 = 0;
                                      }
                                      uint64_t v193 = *(void *)(v190 + 3656);
                                      int v194 = *(_DWORD *)(v193 + 52);
                                      int v195 = v194 + v192;
                                      if (__CFADD__(v194, v192))
                                      {
                                        int v196 = 1;
                                      }
                                      else
                                      {
                                        int v197 = *(_DWORD *)(v193 + 56);
                                        int v198 = v197 + v191;
                                        if (!__CFADD__(v197, v191))
                                        {
                                          uint64_t v199 = *((void *)this + 33);
                                          int v200 = *(_DWORD *)(v199 + 528);
                                          *(_DWORD *)(v199 + 528) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 528) ^= 0xFFFFFFu;
                                          uint64_t v201 = *((void *)this + 33);
                                          int v202 = *(_DWORD *)(v201 + 528);
                                          *(_DWORD *)(v201 + 528) = v200;
                                          uint64_t v203 = *(void *)(*((void *)this + 32) + 3656);
                                          if (*(void *)v203 || *(_DWORD *)(v203 + 152) || *(_DWORD *)(v203 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v203, 528, v195, 0xFFFFFFFFLL, 8, v202, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          uint64_t v204 = *((void *)this + 33);
                                          int v205 = *(_DWORD *)(v204 + 532);
                                          *(_DWORD *)(v204 + 532) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 532) ^= 0xFFFFFFu;
                                          uint64_t v206 = *((void *)this + 33);
                                          int v207 = *(_DWORD *)(v206 + 532);
                                          *(_DWORD *)(v206 + 532) = v205;
                                          uint64_t v208 = *(void *)(*((void *)this + 32) + 3656);
                                          if (*(void *)v208 || *(_DWORD *)(v208 + 152) || *(_DWORD *)(v208 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v208, 532, v198, 0xFFFFFFFFLL, 8, v207, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          uint64_t v209 = *((void *)this + 33);
                                          int v210 = *(_DWORD *)(v209 + 536);
                                          *(_DWORD *)(v209 + 536) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 536) ^= 0xC0000000;
                                          uint64_t v211 = *((void *)this + 33);
                                          int v212 = *(_DWORD *)(v211 + 536);
                                          *(_DWORD *)(v211 + 536) = v210;
                                          uint64_t v213 = *(void *)(*((void *)this + 32) + 3656);
                                          if (*(void *)v213 || *(_DWORD *)(v213 + 152) || *(_DWORD *)(v213 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v213, 536, v195, 192, 6, v212, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          uint64_t v214 = *((void *)this + 33);
                                          int v215 = *(_DWORD *)(v214 + 540);
                                          *(_DWORD *)(v214 + 540) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 540) ^= 0xC0000000;
                                          uint64_t v216 = *((void *)this + 33);
                                          int v217 = *(_DWORD *)(v216 + 540);
                                          *(_DWORD *)(v216 + 540) = v215;
                                          uint64_t v218 = *(void *)(*((void *)this + 32) + 3656);
                                          if (*(void *)v218 || *(_DWORD *)(v218 + 152) || *(_DWORD *)(v218 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v218, 540, v198, 192, 6, v217, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          if (v230)
                                          {
                                            *(_DWORD *)(*((void *)this + 33) + 536) = *(_DWORD *)(*((void *)this + 33) + 536) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 76) >> 6) & 0xFFF));
                                            uint64_t v219 = (_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 80);
                                          }
                                          else
                                          {
                                            if (CAHDecLotusAvc::getSWRStride(this, *(unsigned __int16 *)(v15 + 84)- *(unsigned __int16 *)(v15 + 80)+ 1, *(unsigned __int8 *)(v5 + 2224 * v228 + 6), *(unsigned __int8 *)(v5 + 2224 * v228 + 7), *(_DWORD *)(v5 + 2224 * v228 + 2212)))return 0xFFFFFFFFLL; {
                                            *(_DWORD *)(*((void *)this + 33) + 536) = *(_DWORD *)(*((void *)this + 33) + 536) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 3976) >> 6) & 0xFFF));
                                            }
                                            uint64_t v219 = (_DWORD *)((char *)this + 15908);
                                          }
                                          *(_DWORD *)(*((void *)this + 33) + 540) = *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 540) & 0xFFFF8003 | (4 * ((*v219 >> 6) & 0x1FFF));
                                          goto LABEL_227;
                                        }
                                        int v196 = 2;
                                      }
                                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                      {
                                        LODWORD(buf[0]) = 136315394;
                                        *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                        WORD2(buf[1]) = 1024;
                                        *(_DWORD *)((char *)&buf[1] + 6) = v196;
                                        int v27 = &_os_log_internal;
                                        uint64_t v28 = "AppleAVD: %s(): failKind = %d";
                                        uint64_t v133 = (uint8_t *)buf;
                                        uint32_t v134 = 18;
                                        goto LABEL_137;
                                      }
                                      return 0xFFFFFFFFLL;
                                    }
LABEL_227:
                                    uint64_t v220 = *((void *)this + 32);
                                    if (*(_DWORD *)(v220 + 2360) != 1) {
                                      return 0;
                                    }
                                    uint64_t v221 = *((void *)this + 33);
                                    *(_DWORD *)(v221 + 640) = *(_DWORD *)(v221 + 640) & 0xFFFFFFFE | *(_DWORD *)(v220 + 2508) & 1;
                                    if (*(_DWORD *)(v220 + 2508))
                                    {
                                      *(_DWORD *)(v221 + 1616) = 0x10000000;
                                      *(_DWORD *)(v221 + 1620) = *(_DWORD *)(v220 + 2368);
                                      *(_DWORD *)(v221 + 1632) = 0;
                                      *(void *)(v221 + 1624) = 0;
                                      *(_OWORD *)(v221 + 1636) = *(_OWORD *)(v220 + 2372);
                                      long long v222 = *(_OWORD *)(v220 + 2404);
                                      *(_OWORD *)(v221 + 1652) = *(_OWORD *)(v220 + 2388);
                                      *(_OWORD *)(v221 + 1668) = v222;
                                    }
                                    *(_DWORD *)(*((void *)this + 33) + 640) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 640) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v220 + 2512) & 1));
                                    if (*(_DWORD *)(v220 + 2512))
                                    {
                                      *(_DWORD *)(v221 + 1684) = 0;
                                      char v223 = *(_DWORD *)(v220 + 2424);
                                      *(_DWORD *)(v221 + 1684) = (*(_DWORD *)(v220 + 2424) & 1) << 22;
                                      int v224 = ((*(_DWORD *)(v220 + 2420) & 1) << 23) | ((v223 & 1) << 22) | 0x20000000;
                                      *(_DWORD *)(v221 + 1684) = v224;
                                      *(_DWORD *)(v221 + 1684) = v224 | (*(_DWORD *)(v220 + 2364) == 0);
                                      long long v225 = *(_OWORD *)(v220 + 2428);
                                      long long v226 = *(_OWORD *)(v220 + 2444);
                                      *(_OWORD *)(v221 + 1720) = *(_OWORD *)(v220 + 2460);
                                      *(_OWORD *)(v221 + 1704) = v226;
                                      *(_OWORD *)(v221 + 1688) = v225;
                                    }
                                    *(_DWORD *)(*((void *)this + 33) + 640) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 640) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v220 + 2516) & 1));
                                    *(_DWORD *)(*((void *)this + 33) + 640) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 640) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v220 + 2520) & 1));
                                    *(_DWORD *)(*((void *)this + 33) + 640) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 640) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v220 + 2524) & 1));
                                    if (*(_DWORD *)(v220 + 2516))
                                    {
                                      *(_DWORD *)(v221 + 1740) = 0;
                                      if (*(_DWORD *)(v220 + 2476) == 2) {
                                        int v227 = 805306368;
                                      }
                                      else {
                                        int v227 = 813694976;
                                      }
                                      *(_DWORD *)(v221 + 1740) = v227;
                                      memcpy((void *)(v221 + 1744), (const void *)(v220 + 2480), 4 * *(unsigned int *)(v220 + 2476));
                                      uint64_t result = 0;
                                      *(_DWORD *)(v220 + 2516) = 0;
                                    }
                                    else
                                    {
                                      return 0;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecLotusAvc::getSWRStride(CAHDecLotusAvc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1988) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3977) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecLotusAvc::getTileStartCTU(CAHDecLotusAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 544);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecLotusAvc::getTileEndCTU(CAHDecLotusAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 544);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecLotusAvc::getTileIdxAbove(CAHDecLotusAvc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 544);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecLotusAvc::populateAvdWork(CAHDecLotusAvc *this, unsigned int a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v3 + 3312);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 7500);
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    long long v9 = (int *)(v2 + 2696);
    long long v10 = (int *)(v4 + 20);
    __int16 v21 = a2;
    uint64_t v11 = 40 * a2;
    uint64_t v12 = v2 + 948 * v5;
    while (1)
    {
      uint64_t v13 = v12 + v7;
      *(_WORD *)(v13 + 1764) = v8;
      *(_WORD *)(v13 + 1766) = 0;
      *(_WORD *)(v13 + 1768) = v8;
      *(_DWORD *)(v12 + v7 + 1770) = 0;
      int v14 = *v9;
      if (!CAVDAvcDecoder::GetSDataMemInfo(*((void *)this + 32), v8, &v23, &v22)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *v10;
      *(_DWORD *)(v13 + 1788) = *v10;
      *(_DWORD *)(v13 + 1792) = v15;
      *(_DWORD *)(v13 + 1796) = 0;
      if (v7) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = 15;
      }
      *(_WORD *)(v13 + 1774) = v16;
      uint64_t v17 = (void *)v23;
      if (*(void *)v23 || *(_DWORD *)(v23 + 152) || *(_DWORD *)(v23 + 156))
      {
        int v18 = v22;
        if (HIDWORD(v22))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            int v25 = "populateAvdWork";
            __int16 v26 = 1024;
            int v27 = 1754;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v18 = v22;
          }
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v17, (int)v7 + 570580, v18, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
      v9 += 237;
      *(_DWORD *)(v12 + v7 + 1784) = v14;
      ++v8;
      v7 += 40;
      v10 += 462;
      if (v11 == v7)
      {
        uint64_t v2 = *((void *)this + 33);
        __int16 v20 = v21;
        goto LABEL_17;
      }
    }
  }
  else
  {
    __int16 v20 = 0;
LABEL_17:
    uint64_t result = 0;
    *(_WORD *)(v2 + 28) = v20;
    *(_DWORD *)(v2 + 32) = 570560;
  }
  return result;
}

uint64_t CAHDecLotusAvc::allocWorkBuf_SPS(CAHDecLotusAvc *this, unsigned char *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v3 = a2[4];
  unsigned int v4 = *((unsigned __int16 *)a2 + 779);
  int v5 = 16 * v4;
  unsigned int v6 = *((unsigned __int16 *)a2 + 780);
  unsigned int v7 = 32 - __clz(((16 * v4 + 47) >> 5) - 1);
  if (v4 < 2) {
    LOBYTE(v7) = 0;
  }
  unsigned int v8 = 32 - __clz(((16 * v6 + 47) >> 5) - 1);
  if (v6 < 2) {
    LOBYTE(v8) = 0;
  }
  unsigned int v9 = ((32 << (v8 + v7)) + 127) & 0xFFFFFF80;
  if (a2[4])
  {
    unsigned int v10 = (v5 + 16) << (v3 == 3);
    unsigned int v11 = ((((16 * v6 + 16) | (v3 == 1)) >> (v3 == 1)) + 15) >> 4;
    if (v10 > 0x20)
    {
      unsigned int v12 = 32 - __clz(((v10 + 31) >> 5) - 1);
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  LOBYTE(v12) = 0;
LABEL_10:
  unsigned int v13 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  unsigned int v15 = ((8 << (v14 + v12)) + 127) & 0xFFFFFF80;
  if (a2[4]) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = 0;
  }
  *((_DWORD *)this + 3968) = v9;
  *((_DWORD *)this + 3969) = v16;
  *((void *)this + 1985) = 0;
  int v17 = (v4 << 6) + 64;
  *((_DWORD *)this + 3974) = v17;
  *((_DWORD *)this + 3973) = v17 + v17 * v6;
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    uint64_t v18 = 24;
    unsigned int v19 = this;
    while (1)
    {
      uint64_t v20 = *((unsigned int *)this + 3968);
      if (v20
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v19 + 35, v20, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_35;
        }
        int v27 = 136315650;
        uint64_t v28 = "allocWorkBuf_SPS";
        __int16 v29 = 1024;
        int v30 = 1992;
        __int16 v31 = 2080;
        int v32 = "HdrY";
        __int16 v26 = &_os_log_internal;
        goto LABEL_34;
      }
      uint64_t v21 = *((unsigned int *)this + 3969);
      if (v21)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v19 + 299, v21, 7, 1, 0)) {
          break;
        }
      }
      unsigned int v19 = (CAHDecLotusAvc *)((char *)v19 + 176);
      if (!--v18) {
        goto LABEL_23;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v27 = 136315650;
    uint64_t v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 1993;
    __int16 v31 = 2080;
    int v32 = "HdrC";
    __int16 v26 = &_os_log_internal;
    goto LABEL_34;
  }
LABEL_23:
  unint64_t v22 = (_OWORD *)((char *)this + 10416);
  uint64_t v23 = 24;
  while (1)
  {
    uint64_t v24 = *((unsigned int *)this + 3973);
    if (v24)
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), v22, v24, 7, 1, 0)) {
        break;
      }
    }
    v22 += 11;
    if (!--v23)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 3978) = 0;
      *((_DWORD *)this + 3979) = v5 | (v6 << 20) | 0xF000F;
      return result;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 136315650;
    uint64_t v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 1999;
    __int16 v31 = 2080;
    int v32 = "MvColo";
    __int16 v26 = &_os_log_internal;
LABEL_34:
    _os_log_impl(&dword_223977000, v26, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v27, 0x1Cu);
  }
LABEL_35:
  (*(void (**)(CAHDecLotusAvc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecLotusAvc::allocWorkBuf_PPS(CAHDecLotusAvc *this, unsigned char *a2, void *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = 16 * *((unsigned __int16 *)a2 + 779);
  if (((a2[6] + 9) & 0x1FEu) <= ((a2[7] + 9) & 0x1FEu)) {
    int v6 = (a2[7] + 9) & 0x1FE;
  }
  else {
    int v6 = (a2[6] + 9) & 0x1FE;
  }
  int v7 = a2[4];
  if (v7 == 3) {
    int v8 = 48;
  }
  else {
    int v8 = 32;
  }
  if (v7 == 3) {
    int v9 = 192;
  }
  else {
    int v9 = 128;
  }
  if (a2[4]) {
    int v10 = v8;
  }
  else {
    int v10 = 16;
  }
  if (a2[4]) {
    int v11 = v9;
  }
  else {
    int v11 = 64;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 915, 4 * (((unint64_t)(v5 + 16) >> 2) + ((unint64_t)(v5 + 16) >> 4)), 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_20:
      (*(void (**)(CAHDecLotusAvc *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2116;
    __int16 v21 = 2080;
    unint64_t v22 = "AvpAboveInfo";
    unsigned int v12 = &_os_log_internal;
LABEL_19:
    _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v17, 0x1Cu);
    goto LABEL_20;
  }
  unsigned int v14 = (v5 + 31) >> 4;
  uint64_t v15 = ((v6 * v10) >> 3) * v14;
  if (v15 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 926, v15, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2119;
    __int16 v21 = 2080;
    unint64_t v22 = "IpAbove";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t v16 = ((v6 * v11) >> 3) * v14;
  if (v16 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 937, v16, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2120;
    __int16 v21 = 2080;
    unint64_t v22 = "LfAbovePix";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 948, 32 * v14, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2121;
    __int16 v21 = 2080;
    unint64_t v22 = "LfAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 640, 32 * v14, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    uint64_t v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2124;
    __int16 v21 = 2080;
    unint64_t v22 = "MvAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  return result;
}

uint64_t CAHDecLotusAvc::freeWorkBuf_SPS(CAHDecLotusAvc *this)
{
  uint64_t v2 = 24;
  int v3 = (uint64_t *)this;
  do
  {
    uint64_t result = *((void *)this + 32);
    if (!*(_DWORD *)(result + 2648))
    {
      if (v3[70])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(result, v3 + 70);
        v3[70] = 0;
      }
      if (v3[598])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 598);
        v3[598] = 0;
      }
    }
    if (v3[1302])
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 1302);
      v3[1302] = 0;
    }
    v3 += 22;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t *CAHDecLotusAvc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[1830])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1830);
    v2[1830] = 0;
  }
  if (v2[1852])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1852);
    v2[1852] = 0;
  }
  if (v2[1280])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1280);
    v2[1280] = 0;
  }
  if (v2[1874])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1874);
    v2[1874] = 0;
  }
  if (v2[1896])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1896);
    v2[1896] = 0;
  }
  if (v2[1918])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1918);
    v2[1918] = 0;
  }
  if (v2[1940])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1940);
    v2[1940] = 0;
  }
  if (v2[1962])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1962);
    v2[1962] = 0;
  }
  return this;
}

uint64_t CAHDecLotusAvc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 9008;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 15888) = a2;
  return this;
}

uint64_t CAHDecLotusAvc::decodeBuffer(CAHDecLotusAvc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecLotusAvc::decodeBufferSize(CAHDecLotusAvc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecLotusAvc::decHdrYLinAddr(CAHDecLotusAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 70);
}

uint64_t CAHDecLotusAvc::decHdrCLinAddr(CAHDecLotusAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 598);
}

uint64_t CAHDecLotusAvc::decHdrYSize(CAHDecLotusAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 151);
}

uint64_t CAHDecLotusAvc::decHdrCSize(CAHDecLotusAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 1207);
}

uint64_t CAHDecLotusAvc::decHdrYStride(CAHDecLotusAvc *this)
{
  return *((unsigned int *)this + 3970);
}

uint64_t CAHDecLotusAvc::decHdrCStride(CAHDecLotusAvc *this)
{
  return *((unsigned int *)this + 3971);
}

uint64_t DumpHevcStream(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = (FILE **)(a1 + 8024);
  *(void *)(a1 + 8056) = 0;
  *(_OWORD *)(a1 + 8024) = 0u;
  *(_OWORD *)(a1 + 8040) = 0u;
  time_t v14 = 0;
  setlocale(0, (const char *)&unk_223AED972);
  time(&v14);
  uint64_t v3 = localtime(&v14);
  strftime(__s, 0x14uLL, "%m%d%g_%H%M%S", v3);
  v13.tv_sec = 0;
  *(void *)&v13.tv_usec = 0;
  uint64_t v12 = 0;
  gettimeofday(&v13, &v12);
  snprintf(__str, 5uLL, "_%03d", v13.tv_usec / 1000);
  strlen(__str);
  __strncat_chk();
  strcpy(v32, "-decOutput.265");
  qmemcpy(v11, "pple.videocodecd/com.apple.apple/var/mobile/Library/Caches/com.a", sizeof(v11));
  strcpy(__filename, "/var/mobile/Library/Caches/com.apple.videocodecd/com.apple.appleavd/");
  strlen(__s);
  __strncat_chk();
  strlen(v32);
  __strncat_chk();
  strcpy(v29, "-decEncrOut.265");
  v30[1] = v11[3];
  v30[2] = v11[0];
  v31[0] = v11[1];
  strcpy((char *)v31 + 13, "pleavd/");
  v30[0] = v11[2];
  strlen(__s);
  __strncat_chk();
  strlen(v29);
  __strncat_chk();
  strcpy(v24, "-decPropertyLog.txt");
  v25[1] = v11[3];
  v25[2] = v11[0];
  v26[0] = v11[1];
  strcpy((char *)v26 + 13, "pleavd/");
  v25[0] = v11[2];
  strlen(__s);
  __strncat_chk();
  strlen(v24);
  __strncat_chk();
  strcpy(v28, "-preDRM.dat");
  v22[2] = v11[0];
  v23[0] = v11[1];
  strcpy((char *)v23 + 13, "pleavd/");
  v22[0] = v11[2];
  v22[1] = v11[3];
  strlen(__s);
  __strncat_chk();
  strlen(v28);
  __strncat_chk();
  strcpy(v27, "-postDRM.dat");
  long long v20 = v11[0];
  v21[0] = v11[1];
  strcpy((char *)v21 + 13, "pleavd/");
  *(_OWORD *)uint64_t v18 = v11[2];
  long long v19 = v11[3];
  strlen(__s);
  __strncat_chk();
  strlen(v27);
  __strncat_chk();
  unsigned int v4 = fopen(__filename, "wbx");
  *(void *)(a1 + 8024) = v4;
  if (!v4)
  {
    uint64_t *v2 = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v17 = __filename;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD hevc dump: could not open file %s\n", buf, 0xCu);
    }
  }
  uint64_t v5 = fopen((const char *)v30, "wbx");
  *(void *)(a1 + 8032) = v5;
  if (!v5)
  {
    *(void *)(a1 + 8032) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v17 = (char *)v30;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD hevc dump: could not open file %s\n", buf, 0xCu);
    }
  }
  int v6 = fopen((const char *)v25, "wbx");
  *(void *)(a1 + 8040) = v6;
  if (!v6)
  {
    *(void *)(a1 + 8040) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v17 = (char *)v25;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD hevc dump: could not open property log file %s\n", buf, 0xCu);
    }
  }
  int v7 = fopen((const char *)v22, "wbx");
  *(void *)(a1 + 8048) = v7;
  if (!v7)
  {
    *(void *)(a1 + 8048) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v17 = (char *)v22;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD hevc dump: could not open pre DRM file %s\n", buf, 0xCu);
    }
  }
  int v8 = fopen(v18, "wbx");
  *(void *)(a1 + 8056) = v8;
  if (!v8)
  {
    *(void *)(a1 + 8056) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v17 = v18;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD hevc dump: could not open post DRM file %s\n", buf, 0xCu);
    }
  }
  if (*v2) {
    WriteNAL(*v2, *(void *)(a1 + 5632), *(_DWORD *)(a1 + 5640) & 0xFFFFFF);
  }
  int v9 = *(FILE **)(a1 + 8032);
  if (v9) {
    WriteNAL(v9, *(void *)(a1 + 5632), *(_DWORD *)(a1 + 5640) & 0xFFFFFF);
  }
  return 0;
}

uint64_t WriteNAL(FILE *__stream, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int __ptr = 0x1000000;
  if (a3 < 4) {
    return 0;
  }
  unsigned int v7 = 0;
  char v8 = 1;
  int v9 = &_os_log_internal;
  while (1)
  {
    int v10 = (unsigned int *)(a2 + v7);
    unsigned int v12 = *v10;
    int v11 = (unsigned __int8 *)(v10 + 1);
    size_t v13 = bswap32(v12);
    v7 += v13 + 4;
    if (v7 > a3)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 318;
      }
      *(_WORD *)buf = 0;
      int v17 = &_os_log_internal;
      goto LABEL_23;
    }
    if (v13 > a3) {
      break;
    }
    unsigned int v14 = (*v11 >> 1) & 0x3F;
    if (v14 == 34 || v14 == 33 || v14 == 32)
    {
      fwrite(&__ptr, 1uLL, 4uLL, __stream);
      fwrite(v11, 1uLL, v13, __stream);
    }
    else if (v14 > 0x17)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        unsigned int v20 = v14;
        _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, "AppleAVD: Bad NAL type %d. Skipping.\n", buf, 8u);
      }
    }
    else
    {
      if (v8)
      {
        p_ptr = &__ptr;
        size_t v16 = 4;
      }
      else
      {
        p_ptr = (int *)((char *)&__ptr + 1);
        size_t v16 = 3;
      }
      fwrite(p_ptr, 1uLL, v16, __stream);
      fwrite(v11, 1uLL, v13, __stream);
      char v8 = 0;
    }
    if (v7 + 4 > a3) {
      return 0;
    }
  }
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
    return 318;
  }
  *(_WORD *)buf = 0;
  int v17 = &_os_log_internal;
LABEL_23:
  _os_log_impl(&dword_223977000, v17, OS_LOG_TYPE_DEFAULT, "AppleAVD: WriteNAL AVD_HEVC_ERROR_BAD_NAL_LENGTH ", buf, 2u);
  return 318;
}

uint64_t EnsureHEVCPropertyDictionaryCreation()
{
  return pthread_once(&sCreateSupportedPropertyDictionaryOnce_0, hevc_createSupportedPropertyDictionary);
}

void hevc_createSupportedPropertyDictionary()
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  uint64_t v0 = *MEMORY[0x263F1EB88];
  CFDictionaryRef v1 = (const __CFDictionary *)*MEMORY[0x263F1EB98];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  unsigned int v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFDictionaryRef v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  int v6 = (void *)*MEMORY[0x263F1EBE0];
  uint64_t v7 = *MEMORY[0x263F1E808];
  keys = (void *)*MEMORY[0x263F1E810];
  uint64_t v33 = v7;
  values = v6;
  CFDictionaryRef v23 = (CFDictionaryRef)v6;
  uint64_t v8 = *MEMORY[0x263F1EBA8];
  uint64_t v34 = v0;
  uint64_t v35 = v8;
  CFDictionaryRef v9 = (const __CFDictionary *)*MEMORY[0x263F1E6C8];
  CFDictionaryRef v24 = v1;
  CFDictionaryRef v25 = v9;
  CFDictionaryRef v10 = CFDictionaryCreate(v2, (const void **)&keys, (const void **)&values, 4, v3, v4);
  uint64_t v11 = *MEMORY[0x263F1E7B8];
  keys = (void *)*MEMORY[0x263F1E7A8];
  uint64_t v33 = v11;
  values = v5;
  CFDictionaryRef v23 = v5;
  uint64_t v12 = *MEMORY[0x263F1E710];
  uint64_t v34 = *MEMORY[0x263F1E6E0];
  uint64_t v35 = v12;
  CFDictionaryRef v24 = v10;
  CFDictionaryRef v25 = v5;
  uint64_t v13 = *MEMORY[0x263F1E758];
  *(void *)&long long v36 = *MEMORY[0x263F1E708];
  *((void *)&v36 + 1) = v13;
  *(void *)&long long v26 = v5;
  *((void *)&v26 + 1) = v5;
  uint64_t v14 = *MEMORY[0x263F1E7B0];
  *(void *)&long long v37 = *MEMORY[0x263F1E738];
  *((void *)&v37 + 1) = v14;
  *(void *)&long long v27 = v5;
  *((void *)&v27 + 1) = v5;
  uint64_t v15 = *MEMORY[0x263F1E770];
  *(void *)&long long v38 = @"NegotiationDetails";
  *((void *)&v38 + 1) = v15;
  *(void *)&long long v28 = v5;
  *((void *)&v28 + 1) = v5;
  uint64_t v16 = *MEMORY[0x263F1E7C0];
  *(void *)&long long v39 = *MEMORY[0x263F1E778];
  *((void *)&v39 + 1) = v16;
  *(void *)&long long v29 = *MEMORY[0x263F1EBD0];
  *((void *)&v29 + 1) = v6;
  uint64_t v17 = *MEMORY[0x263F1E730];
  *(void *)&long long v40 = *MEMORY[0x263F1E6F8];
  *((void *)&v40 + 1) = v17;
  *(void *)&long long v30 = v5;
  *((void *)&v30 + 1) = v5;
  sHEVCVideoDecoderSupportedPropertyDictionary = (uint64_t)CFDictionaryCreate(v2, (const void **)&keys, (const void **)&values, 14, v3, v4);
  if (!sHEVCVideoDecoderSupportedPropertyDictionary)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)
      || (LOWORD(v18) = 0,
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder Error:: CFDictionaryCreate (sHEVCVideoDecoderSupportedPropertyDictionary) failed", (uint8_t *)&v18, 2u), !sHEVCVideoDecoderSupportedPropertyDictionary))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = 136315394;
        long long v19 = "hevc_createSupportedPropertyDictionary";
        __int16 v20 = 2080;
        uint64_t v21 = "sHEVCVideoDecoderSupportedPropertyDictionary";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", (uint8_t *)&v18, 0x16u);
      }
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v5) {
    CFRelease(v5);
  }
}

__CFString *AppleAVDWrapperHEVCDecoderCopyDebugDescription(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CFStringAppendFormat(Mutable, 0, @"<AppleAVD_HEVCVideoDecoder %p>", a1);
  return Mutable;
}

BOOL AppleAVDWrapperHEVCDecoderCanAcceptFormatDescription(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (MGGetBoolAnswer())
  {
    BOOL v3 = 0;
    if (VideoDecoder_getCFPreferenceNumber(@"AVD_RejectFormatDescription", @"com.apple.coremedia", 0) == 1)return v3; {
  }
    }
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 5828) != 6) {
    goto LABEL_19;
  }
  uint64_t v5 = DerivedStorage;
  if (CMFormatDescriptionEqual(*(CMFormatDescriptionRef *)(DerivedStorage + 24), a2))
  {
    BOOL v3 = 1;
    goto LABEL_20;
  }
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(a2);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a2);
  if (MediaSubType != CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(v5 + 24))
    || *(_DWORD *)(v5 + 5212) != Dimensions.width
    || *(_DWORD *)(v5 + 5216) != Dimensions.height)
  {
    goto LABEL_19;
  }
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  memset(buf, 0, sizeof(buf));
  BYTE9(v13) = *(unsigned char *)(v5 + 5801);
  BOOL v3 = 0;
  if (getBitDepthsAndChromaFormatFromFormatDesc()) {
    goto LABEL_20;
  }
  if (*(_DWORD *)buf == *(_DWORD *)(v5 + 5712)
    && *(_DWORD *)&buf[4] == *(_DWORD *)(v5 + 5716)
    && *(_DWORD *)&buf[24] == *(_DWORD *)(v5 + 5736)
    && buf[30] == *(unsigned __int8 *)(v5 + 5742)
    && v10 == *(unsigned __int8 *)(v5 + 5744)
    && __PAIR64__(BYTE2(v10), BYTE1(v10)) == __PAIR64__(*(unsigned __int8 *)(v5 + 5746), *(unsigned __int8 *)(v5 + 5745))&& !*(_DWORD *)(v5 + 5624)&& BYTE9(v13) == *(unsigned __int8 *)(v5 + 5801))
  {
    BOOL v3 = BYTE3(v10) <= *(unsigned __int8 *)(v5 + 5747);
  }
  else
  {
LABEL_19:
    BOOL v3 = 0;
  }
LABEL_20:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AppleAVDWrapperHEVCDecoderCanAcceptFormatDescription";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v3;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): returning %d (0: reject; 1: accept)",
      buf,
      0x12u);
  }
  return v3;
}

uint64_t AppleAVDHEVCDecoderEmitErrorToVT(uint64_t a1)
{
  if (*(void *)(a1 + 16808)) {
    return VTDecoderSessionEmitDecodedMultiImageFrame();
  }
  else {
    return VTDecoderSessionEmitDecodedFrame();
  }
}

uint64_t GetSliceDataForDecryptor(void *a1)
{
  CFAllocatorRef v2 = (const opaqueCMFormatDescription *)a1[3];
  if (!v2) {
    return FigSignalErrorAt3();
  }
  if (a1[742]) {
    goto LABEL_17;
  }
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(v2);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x263F00E90]);
  CFArrayRef v5 = (const __CFArray *)CFDictionaryGetValue(Value, @"hvcC");
  if (v5)
  {
    CFTypeID TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(v5)) {
      CFArrayGetValueAtIndex(v5, 0);
    }
  }
  CFArrayRef v7 = (const __CFArray *)CFDictionaryGetValue(Value, @"lhvC");
  if (v7)
  {
    CFTypeID v8 = CFArrayGetTypeID();
    if (v8 == CFGetTypeID(v7)) {
      CFArrayGetValueAtIndex(v7, 0);
    }
  }
  uint64_t result = FigHEVCBridge_CreateHLSfMP4ParsingInfoFromHVCCAndLHVCData();
  if (!result)
  {
LABEL_17:
    uint64_t result = FigHEVCBridge_LocateSliceHeaderForHLSfMP4EncryptableNAL();
    if (!result)
    {
      if (a1[742])
      {
        a1[999] = 0;
        return 0;
      }
      return FigSignalErrorAt3();
    }
  }
  return result;
}

uint64_t AppleAVDHEVCCheckEnableMultiViewDecode(uint64_t a1)
{
  uint64_t v2 = a1 + 8080;
  uint64_t result = *(void *)(a1 + 16808);
  if (result && (uint64_t result = CFArrayGetCount((CFArrayRef)result), result >= 1))
  {
    uint64_t v4 = result;
    int valuePtr = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16808), 0);
    uint64_t result = CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    BOOL v6 = 0;
    if (!valuePtr)
    {
      CFIndex v7 = 1;
      do
      {
        CFIndex v8 = v7;
        if (v4 == v7) {
          break;
        }
        int valuePtr = 0;
        CFNumberRef v9 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16808), v7);
        uint64_t result = CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
        CFIndex v7 = v8 + 1;
      }
      while (!valuePtr);
      BOOL v6 = v8 >= v4;
    }
  }
  else
  {
    BOOL v6 = 1;
  }
  if (*(_DWORD *)(a1 + 5208) != 1 || *(_DWORD *)(a1 + 8152) < 2u || *(unsigned char *)(v2 + 65)) {
    goto LABEL_15;
  }
  if (!*(void *)(a1 + 16808)) {
    BOOL v6 = 1;
  }
  if (v6)
  {
LABEL_15:
    *(_DWORD *)(a1 + 8156) = 0;
    *(_WORD *)uint64_t v2 = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 8156) = 1;
  }
  return result;
}

uint64_t calcLayersToDecodeFromDisplayLayersList(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16808);
  if (result)
  {
    *(_OWORD *)(a1 + 8196) = 0u;
    *(_OWORD *)(a1 + 8212) = 0u;
    *(_OWORD *)(a1 + 8164) = 0u;
    *(_OWORD *)(a1 + 8180) = 0u;
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      uint64_t v3 = result;
      for (CFIndex i = 0; i != v3; ++i)
      {
        int valuePtr = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16808), i);
        uint64_t result = CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        uint64_t v6 = valuePtr;
        uint64_t v7 = *(unsigned __int16 *)(a1 + 8228 + 2 * valuePtr);
        uint64_t v8 = a1 + 2 * v7;
        if (!*(_WORD *)(v8 + 8484))
        {
          if (*(_WORD *)(v8 + 8356))
          {
            uint64_t v9 = *(unsigned int *)(a1 + 8152);
            if (v9)
            {
              long long v10 = (__int16 *)(a1 + 8612 + (v7 << 7));
              do
              {
                uint64_t v12 = *v10++;
                uint64_t v11 = v12;
                if (v12 != -1) {
                  *(unsigned char *)(a1 + v11 + 8164) = 1;
                }
                --v9;
              }
              while (v9);
            }
          }
        }
        *(unsigned char *)(a1 + v6 + 8164) = 1;
      }
    }
    int v13 = 0;
    uint64_t v14 = 0;
    *(unsigned char *)(a1 + 8080) = 0;
    do
    {
      if (*(unsigned char *)(a1 + 8164 + v14))
      {
        *(unsigned char *)(a1 + v13++ + 8081) = v14;
        *(unsigned char *)(a1 + 8080) = v13;
      }
      ++v14;
    }
    while (v14 != 64);
  }
  return result;
}

uint64_t getMultiViewLayerOffsetInfo(uint64_t a1, CMBlockBufferRef theSourceBuffer, unint64_t a3, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  CFArrayRef v5 = (unsigned __int8 *)(a1 + 8080);
  unsigned int destination = 0;
  unsigned __int16 v32 = 0;
  *(_OWORD *)(a1 + 8164) = 0u;
  *(_OWORD *)(a1 + 8180) = 0u;
  *(_OWORD *)(a1 + 8196) = 0u;
  *(_OWORD *)(a1 + 8212) = 0u;
  LODWORD(v6) = *(unsigned __int8 *)(a1 + 8080);
  if (!*(unsigned char *)(a1 + 8080))
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 8148) = 0;
    return result;
  }
  unint64_t v9 = 0;
  LOWORD(v10) = 0;
  long long v29 = (unsigned __int8 *)(a1 + 8080);
  uint64_t v30 = a4;
  while (1)
  {
    unint64_t v11 = *(unsigned int *)(a1 + 5624);
    if (v11 < a3) {
      break;
    }
    int v13 = 0;
LABEL_23:
    *(_DWORD *)(a4 + 4 * v9++ + 24) = v13;
    if (v9 >= v6)
    {
      *(_DWORD *)(a1 + 8148) = 0;
      if (!v6) {
        return 0;
      }
      int v20 = 0;
      uint64_t v21 = v5 + 84;
      LOBYTE(v22) = 1;
      uint64_t v6 = v6;
      do
      {
        int v24 = *v21++;
        int v23 = v24;
        if (v24) {
          *(_DWORD *)(a1 + 8148) = ++v20;
        }
        int v22 = v22 & (v23 != 0);
        --v6;
      }
      while (v6);
      return (v22 - 1);
    }
  }
  char v12 = 0;
  int v13 = 0;
  int v14 = 0;
  int v15 = *(char *)(a1 + v9 + 8081);
  long long v31 = (_DWORD *)(a4 + 4 * v9 + 48);
  while (1)
  {
    if (CMBlockBufferCopyDataBytes(theSourceBuffer, v14, v11, &destination))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v35 = "getMultiViewLayerOffsetInfo";
      long long v26 = &_os_log_internal;
      long long v27 = "AppleAVD: %s: ERROR, fail to copy data bytes";
      goto LABEL_37;
    }
    int v16 = *(_DWORD *)(a1 + 5624);
    switch(v16)
    {
      case 1:
        unsigned int v17 = destination;
        break;
      case 2:
        unsigned int v17 = __rev16((unsigned __int16)destination);
        break;
      case 4:
        unsigned int v17 = bswap32(destination);
        break;
      default:
        return 0xFFFFFFFFLL;
    }
    size_t v18 = (v16 + v14);
    if ((v18 + 2) < a3)
    {
      if (!CMBlockBufferCopyDataBytes(theSourceBuffer, v18, 2uLL, &v32))
      {
        unsigned int v10 = (bswap32(v32) >> 19) & 0x3F;
        goto LABEL_15;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v35 = "getMultiViewLayerOffsetInfo";
      long long v26 = &_os_log_internal;
      long long v27 = "AppleAVD: %s: ERROR, fail to copy data bytes";
LABEL_37:
      uint32_t v28 = 12;
      goto LABEL_38;
    }
LABEL_15:
    if (v15 == (unsigned __int16)v10)
    {
      v13 += v17 + *(_DWORD *)(a1 + 5624);
      if ((v12 & 1) == 0)
      {
        *long long v31 = v14;
        *(unsigned char *)(a1 + v9 + 8164) = 1;
      }
      char v12 = 1;
    }
    unint64_t v19 = v17 + v14;
    if (v19 > a3) {
      break;
    }
    LODWORD(v11) = *(_DWORD *)(a1 + 5624);
    int v14 = v11 + v19;
    if ((v11 + v11 + v19) >= a3)
    {
      CFArrayRef v5 = v29;
      a4 = v30;
      LODWORD(v6) = *v29;
      goto LABEL_23;
    }
  }
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)buf = 136315394;
  uint64_t v35 = "getMultiViewLayerOffsetInfo";
  __int16 v36 = 1024;
  unsigned int v37 = v17;
  long long v26 = &_os_log_internal;
  long long v27 = "AppleAVD: %s NALU bad size! %d";
  uint32_t v28 = 18;
LABEL_38:
  _os_log_impl(&dword_223977000, v26, OS_LOG_TYPE_DEFAULT, v27, buf, v28);
  return 0xFFFFFFFFLL;
}

uint64_t getBitDepthsAndChromaFormatFromFormatDesc()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  uint64_t v3 = (const opaqueCMFormatDescription *)v0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  bzero(v10, 0x41D8uLL);
  int HeaderBuffer_0 = CreateHeaderBuffer_0((uint64_t)v10, v3);
  if (!(_WORD)HeaderBuffer_0)
  {
    unsigned int *v2 = HIBYTE(v12);
    parseHevcSps();
  }
  if (v11) {
    free(v11);
  }
  if (HeaderBuffer_0 << 16 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    uint64_t v7 = "getBitDepthsAndChromaFormatFromFormatDesc";
    __int16 v8 = 1024;
    int v9 = (__int16)HeaderBuffer_0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", (uint8_t *)&v6, 0x12u);
  }
  return (__int16)HeaderBuffer_0;
}

CAHDecDahliaLgh *createDahliaLghDecoder(CAVDLghDecoder *a1)
{
  uint64_t v2 = (CAHDecDahliaLgh *)operator new(0x11C8uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecDahliaLgh::CAHDecDahliaLgh(v2, a1);
  }
  return v3;
}

void sub_223A94554(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecDahliaLgh::CAHDecDahliaLgh(CAHDecDahliaLgh *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73F4B8;
  *(_DWORD *)(v1 + 456) = 151268;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecDahliaLgh::CAHDecDahliaLgh(CAHDecDahliaLgh *this, CAVDLghDecoder *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73F4B8;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 151268;
  *(_DWORD *)(v4 + 8) = 740;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 151268, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      unsigned int v17 = "CAHDecDahliaLgh";
      __int16 v18 = 1024;
      int v19 = 0;
      CFArrayRef v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
LABEL_16:
      _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v7);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v8;
    *((void *)this + 34) = v8;
    uint64_t v9 = *((void *)this + 32);
    *(_DWORD *)(v9 + 17552) = 0;
    bzero((void *)(v9 + 11792), 0xB00uLL);
    *(_OWORD *)(v9 + 5712) = 0u;
    bzero((void *)(*((void *)this + 32) + 14608), 0xB00uLL);
    bzero((char *)this + 464, 0xA50uLL);
    unsigned int v10 = (_OWORD *)*((void *)this + 32);
    v10[356] = 0u;
    v10[355] = 0u;
    v10[354] = 0u;
    v10[353] = 0u;
    v10[352] = 0u;
    v10[351] = 0u;
    v10[350] = 0u;
    v10[349] = 0u;
    v10[348] = 0u;
    v10[347] = 0u;
    v10[346] = 0u;
    v10[345] = 0u;
    v10[344] = 0u;
    v10[343] = 0u;
    v10[342] = 0u;
    v10[341] = 0u;
    v10[340] = 0u;
    v10[339] = 0u;
    v10[338] = 0u;
    v10[337] = 0u;
    v10[336] = 0u;
    v10[335] = 0u;
    bzero((char *)this + 3104, 0x580uLL);
    for (uint64_t i = 3072; i != 3776; i += 176)
    {
      unsigned int v12 = (_OWORD *)(*((void *)this + 32) + i);
      v12[9] = 0uLL;
      v12[10] = 0uLL;
      v12[7] = 0uLL;
      v12[8] = 0uLL;
      v12[5] = 0uLL;
      v12[6] = 0uLL;
      v12[3] = 0uLL;
      v12[4] = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *unsigned int v12 = 0uLL;
    }
    do
    {
      uint64_t v13 = (_OWORD *)(*((void *)this + 32) + i);
      v13[9] = 0uLL;
      v13[10] = 0uLL;
      v13[7] = 0uLL;
      v13[8] = 0uLL;
      v13[5] = 0uLL;
      v13[6] = 0uLL;
      v13[3] = 0uLL;
      v13[4] = 0uLL;
      v13[1] = 0uLL;
      _DWORD v13[2] = 0uLL;
      *uint64_t v13 = 0uLL;
      i += 176;
    }
    while (i != 5184);
    int v14 = (_OWORD *)*((void *)this + 32);
    v14[334] = 0u;
    v14[333] = 0u;
    v14[332] = 0u;
    v14[331] = 0u;
    v14[330] = 0u;
    v14[329] = 0u;
    v14[328] = 0u;
    v14[327] = 0u;
    v14[326] = 0u;
    v14[325] = 0u;
    uint64_t v15 = 3072;
    v14[324] = 0u;
    do
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), 1913, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        int v16 = 136315650;
        unsigned int v17 = "CAHDecDahliaLgh";
        __int16 v18 = 1024;
        int v19 = 173;
        __int16 v20 = 2080;
        uint64_t v21 = "probBuf";
        CFArrayRef v5 = &_os_log_internal;
        int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
        goto LABEL_15;
      }
      v15 += 176;
    }
    while (v15 != 3776);
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 5184), 12284, 7, 1, 0))return; {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    }
    {
      int v16 = 136315650;
      unsigned int v17 = "CAHDecDahliaLgh";
      __int16 v18 = 1024;
      int v19 = 175;
      __int16 v20 = 2080;
      uint64_t v21 = "stateBuf";
      CFArrayRef v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_15:
      uint32_t v7 = 28;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_223A9498C(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecDahliaLgh::~CAHDecDahliaLgh(CAHDecDahliaLgh *this)
{
  *(void *)this = &unk_26D73F4B8;
  CAHDecDahliaLgh::freeWorkBuf_SPS(this);
  uint64_t v2 = *((void *)this + 32);
  for (uint64_t i = 3072; i != 3776; i += 176)
  {
    if (*(void *)(v2 + i))
    {
      CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + i));
      uint64_t v2 = *((void *)this + 32);
      *(void *)(v2 + i) = 0;
    }
  }
  if (*(void *)(v2 + 5184))
  {
    CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + 5184));
    *(void *)(*((void *)this + 32) + 5184) = 0;
  }
  (*(void (**)(CAHDecDahliaLgh *, void))(*(void *)this + 152))(this, 0);
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecDahliaLgh::~CAHDecDahliaLgh(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecDahliaLgh::startPicture(CAHDecDahliaLgh *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  uint64_t v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x24EE4uLL);
    uint64_t v5 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v5 + 16) = a2;
    *(_WORD *)(v5 + 24) = 257;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecDahliaLgh::DecodePicture(CAHDecDahliaLgh *this, uint64_t a2)
{
  if (CAHDecDahliaLgh::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecDahliaLgh *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecDahliaLgh *))(*(void *)this + 48))(this);
  (*(void (**)(CAHDecDahliaLgh *))(*(void *)this + 56))(this);
  CAHDecDahliaLgh::populateTiles(this);
  (*(void (**)(CAHDecDahliaLgh *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecDahliaLgh *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecDahliaLgh::populateTiles(CAHDecDahliaLgh *this)
{
  uint64_t v1 = (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 316)
                    * *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 312));
  if (v1)
  {
    uint64_t v3 = *((void *)this + *((unsigned int *)this + 13) + 34) + 740;
    do
    {
      CAHDecClaryLgh::populateTileRegisters((uint64_t)this, v3);
      v3 += 12;
      --v1;
    }
    while (v1);
  }
  return 0;
}

uint64_t CAHDecDahliaLgh::populateCommonRegisters(CAHDecDahliaLgh *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000002;
  return 0;
}

uint64_t CAHDecDahliaLgh::updateCommonRegisters(CAHDecDahliaLgh *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecDahliaLgh::populateSequenceRegisters(CAHDecDahliaLgh *this)
{
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  *(_DWORD *)(v1 + 40) = 0;
  unsigned __int16 v3 = *(_DWORD *)(v2 + 108) - 1;
  *(_DWORD *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 40) = (v3 | ((unsigned __int16)*(_DWORD *)(v2 + 112) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 304);
  if (v4 >= 3) {
    int v5 = 6528;
  }
  else {
    int v5 = ((v4 & 3) << 7) | 0x1800;
  }
  *(_DWORD *)(v1 + 44) = v5;
  unsigned int v6 = v5 & 0xFFF87FFF | (((*(unsigned char *)(v2 + 105) + 8) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFF87FFFF | (((*(unsigned __int8 *)(v2 + 105) + 8) & 0xF) << 19) | 0x1000000;
  *(_DWORD *)(v1 + 44) = v7;
  *(_DWORD *)(v1 + 44) = v7 & 0xFDFFFFFF | (*(unsigned char *)(v2 + 304) == 4);
  return 0;
}

uint64_t CAHDecDahliaLgh::populatePictureRegisters(CAHDecDahliaLgh *this)
{
  uint64_t v253 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v2 + 17560);
  if (*(unsigned char *)(v4 + 37)) {
    BOOL v5 = *(unsigned char *)(v4 + 40) != 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = *(_DWORD *)(v2 + 11748);
  int v7 = *(_DWORD *)(v4 + 100);
  int v249 = *(_DWORD *)(v4 + 96);
  int v248 = 1 << v7;
  char v8 = *(unsigned char *)(v2 + 2675);
  char v9 = *(unsigned char *)(v2 + 2674);
  if (v5) {
    int v10 = 766517248;
  }
  else {
    int v10 = 766509056;
  }
  *(_DWORD *)(v3 + 48) = v10;
  int v11 = v10 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v3 + 48) = v11;
  if (*(_DWORD *)(*((void *)this + 32) + 2644) == 1) {
    int v12 = 1024;
  }
  else {
    int v12 = 1;
  }
  unsigned int v13 = v12 & 0xFFFFFFF0 | (4 * (v8 & 3)) | v9 & 3 | v11 | 0x2E0;
  *(_DWORD *)(v3 + 48) = v13;
  int v14 = (unsigned char *)*((void *)this + 32);
  int v15 = v13 | ((v14[2652] & 1) << 19);
  *(_DWORD *)(v3 + 48) = v15;
  int v16 = v15 | ((v14[2653] & 1) << 18);
  *(_DWORD *)(v3 + 48) = v16;
  *(_DWORD *)(v3 + 48) = v16 | ((v14[2654] & 1) << 17);
  *(void *)(v3 + 52) = 0x2000000;
  LOWORD(v16) = *(_DWORD *)(v4 + 108) - 1;
  *(_DWORD *)(v3 + 56) = (unsigned __int16)v16;
  *(_DWORD *)(v3 + 56) = ((unsigned __int16)v16 | ((unsigned __int16)*(_DWORD *)(v4 + 112) << 16)) - 0x10000;
  *(void *)(v3 + 60) = 0;
  int v17 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2688) & 7;
  *(_DWORD *)(v3 + 64) = v17;
  unsigned int v18 = v17 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2692) & 1));
  *(_DWORD *)(v3 + 64) = v18;
  unsigned int v19 = v18 & 0xFFFFFF8F | (16 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2696) & 7));
  *(_DWORD *)(v3 + 64) = v19;
  unsigned int v20 = v19 & 0xFFFFFF7F | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2700) & 1) << 7);
  *(_DWORD *)(v3 + 64) = v20;
  unsigned int v21 = v20 & 0xFFFFF8FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2704) & 7) << 8);
  *(_DWORD *)(v3 + 64) = v21;
  unsigned int v22 = v21 & 0xFFFFF7FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2708) & 1) << 11);
  *(_DWORD *)(v3 + 64) = v22;
  unsigned int v23 = v22 & 0xFFFFCFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2712) & 3) << 12);
  *(_DWORD *)(v3 + 64) = v23;
  unsigned int v24 = v23 & 0xFFFFBFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2716) & 1) << 14);
  *(_DWORD *)(v3 + 64) = v24;
  unsigned int v25 = v24 & 0xFFFF7FFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2720) & 1) << 15);
  *(_DWORD *)(v3 + 64) = v25;
  unsigned int v26 = v25 & 0xFFF8FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2724) & 7) << 16);
  *(_DWORD *)(v3 + 64) = v26;
  unsigned int v27 = v26 & 0xFFF7FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2728) & 1) << 19);
  *(_DWORD *)(v3 + 64) = v27;
  unsigned int v28 = v27 & 0xFFEFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2732) & 1) << 20);
  *(_DWORD *)(v3 + 64) = v28;
  unsigned int v29 = v28 & 0xFFDFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2736) & 1) << 21);
  *(_DWORD *)(v3 + 64) = v29;
  unsigned int v30 = v29 & 0xFFBFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2740) & 1) << 22);
  *(_DWORD *)(v3 + 64) = v30;
  unsigned int v31 = v30 & 0xFF7FFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2744) & 1) << 23);
  *(_DWORD *)(v3 + 64) = v31;
  unsigned int v32 = v31 & 0xFEFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2748) & 1) << 24);
  *(_DWORD *)(v3 + 64) = v32;
  unsigned int v33 = v32 & 0xFDFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2752) & 1) << 25);
  *(_DWORD *)(v3 + 64) = v33;
  *(_DWORD *)(v3 + 64) = v33 & 0xFBFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2756) & 1) << 26);
  *(void *)(v3 + 68) = 0;
  if (*(unsigned char *)(v4 + 60))
  {
    int v34 = *(unsigned char *)(v4 + 69) & 0x7F;
    *(_DWORD *)(v3 + 68) = v34;
    unsigned int v35 = v34 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 68) & 0x7F) << 7);
    *(_DWORD *)(v3 + 68) = v35;
    unsigned int v36 = v35 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 67) & 0x7F) << 14);
    *(_DWORD *)(v3 + 68) = v36;
    unsigned int v37 = v36 & 0xF01FFFFF | ((*(unsigned char *)(v4 + 66) & 0x7F) << 21);
    *(_DWORD *)(v3 + 68) = v37;
    *(_DWORD *)(v3 + 68) = v37 & 0x8FFFFFFF | ((*(unsigned char *)(v4 + 59) & 7) << 28);
    int v38 = *(unsigned char *)(v4 + 73) & 0x7F;
    *(_DWORD *)(v3 + 72) = v38;
    unsigned int v39 = v38 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 72) & 0x7F) << 7);
    *(_DWORD *)(v3 + 72) = v39;
    unsigned int v40 = v39 & 0xFFF03FFF | ((*(unsigned char *)(v4 + 58) & 0x3F) << 14);
  }
  else
  {
    *(_DWORD *)(v3 + 68) = (*(unsigned char *)(v4 + 59) & 7) << 28;
    unsigned int v40 = (*(unsigned char *)(v4 + 58) & 0x3F) << 14;
  }
  uint64_t v41 = 0;
  int v250 = 1 << v249;
  int v247 = v7;
  int v246 = 1 << v249 << v7;
  *(_DWORD *)(v3 + 72) = v40;
  *(_DWORD *)(v3 + 76) = 0;
  int v42 = *(unsigned char *)(v4 + 77) & 0x1F;
  *(_DWORD *)(v3 + 76) = v42;
  unsigned int v43 = v42 & 0xFFFFFC1F | (32 * (*(unsigned char *)(v4 + 76) & 0x1F));
  *(_DWORD *)(v3 + 76) = v43;
  unsigned int v44 = v43 & 0xFFFF83FF | ((*(unsigned char *)(v4 + 75) & 0x1F) << 10);
  *(_DWORD *)(v3 + 76) = v44;
  *(_DWORD *)(v3 + 76) = v44 | (*(unsigned __int8 *)(v4 + 74) << 15);
  uint64_t v45 = v3 + 80;
  uint64_t v46 = (_WORD *)(v4 + 242);
  uint64_t v47 = v4 + 208;
  do
  {
    int v48 = *(unsigned __int8 *)(v4 + 78);
    *(_DWORD *)(v45 + v41) = 0;
    if (v48)
    {
      BOOL v49 = *(unsigned char *)(v47 + v41) != 0;
      *(_DWORD *)(v45 + v41) = v49;
      BOOL v50 = *(unsigned __int8 *)(v47 + v41 - 1) != 0;
    }
    else
    {
      BOOL v49 = 0;
      BOOL v50 = 0;
    }
    int v51 = v49 | (8 * v50);
    *(_DWORD *)(v45 + v41) = v51;
    unsigned int v52 = v51 & 0xFFFFFFF9 | (2 * (*v46 & 3));
    *(_DWORD *)(v45 + v41) = v52;
    if (v48)
    {
      int v53 = *(unsigned __int8 *)(v47 + v41 - 2);
      int v54 = v52 | ((*(unsigned char *)(v47 + v41 - 2) != 0) << 11);
      *(_DWORD *)(v45 + v41) = v54;
      if (v53) {
        LOWORD(v53) = *(v46 - 1);
      }
      unsigned int v55 = (16 * (v53 & 0x7F)) | v54 & 0xFFFFF80F;
      *(_DWORD *)(v45 + v41) = v55;
      int v48 = *(unsigned __int8 *)(v47 + v41 - 3);
      unsigned int v52 = v55 | ((v48 != 0) << 21);
      *(_DWORD *)(v45 + v41) = v52;
      if (v48) {
        LOWORD(v48) = *(v46 - 2);
      }
    }
    *(_DWORD *)(v45 + v41) = v52 & 0xFFE00FFF | ((v48 & 0x1FF) << 12);
    v41 += 4;
    v46 += 4;
  }
  while (v41 != 32);
  *(_DWORD *)(v3 + 152) = 0x20000;
  BOOL v251 = v5;
  if (v5)
  {
    uint64_t v245 = 8;
  }
  else
  {
    int v56 = (_DWORD *)(v3 + 112);
    uint64_t v57 = 2178;
    uint64_t v245 = 3;
    uint64_t v58 = &_os_log_internal;
    do
    {
      v56[11] = 0x1000000;
      *int v56 = 0;
      unsigned __int16 v59 = **(_DWORD **)(*((void *)this + 32) + 8 * v57) - 1;
      *int v56 = v59;
      *int v56 = (v59 | ((unsigned __int16)*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 16))
           - 0x10000;
      v56[3] = 0;
      int v60 = (unsigned __int16)((**(_DWORD **)(*((void *)this + 32) + 8 * v57) << 14) / *(_DWORD *)(v4 + 108));
      v56[3] = v60;
      int v61 = v60 | ((unsigned __int16)((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 14)
                                    / *(_DWORD *)(v4 + 112)) << 16);
      v56[3] = v61;
      if ((v60 - 1024) >= 0x7C01 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 544;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
        int v61 = v56[3];
      }
      if ((v61 - 0x4000000) >= 0x7C010000 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 545;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
      }
      ++v57;
      ++v56;
    }
    while (v57 != 2181);
  }
  *(void *)(v3 + 144) = 0;
  int v62 = *(unsigned __int16 *)(v4 + 2672);
  *(_DWORD *)(v3 + 144) = v62;
  *(_DWORD *)(v3 + 144) = v62 | (*(_DWORD *)(v4 + 2676) << 16);
  int v63 = *(unsigned __int16 *)(v4 + 2680);
  *(_DWORD *)(v3 + 148) = v63;
  *(_DWORD *)(v3 + 148) = v63 | (*(_DWORD *)(v4 + 2684) << 16);
  uint64_t v64 = (char *)this + 464;
  for (uint64_t i = 168; i != 228; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v66 = *((void *)this + 33);
    int v67 = *(_DWORD *)(v66 + i);
    *(_DWORD *)(v66 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFFu;
    uint64_t v68 = *((void *)this + 33);
    int v69 = *(_DWORD *)(v68 + i);
    *(_DWORD *)(v68 + i) = v67;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, i, 0, 0xFFFFFFFFFLL, 8, v69, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 60) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 60) = *(_DWORD *)(*((void *)this + 33) + i + 60) & 0x800001FF | (((*((_DWORD *)this + 1132) >> 9) & 0x3FFFFF) << 9);
    v64 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 288) = 0;
  uint64_t v71 = *((void *)this + 33);
  int v72 = *(_DWORD *)(v71 + 288);
  *(_DWORD *)(v71 + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) ^= 0xFFFFFFFu;
  uint64_t v73 = *((void *)this + 33);
  int v74 = *(_DWORD *)(v73 + 288);
  *(_DWORD *)(v73 + 288) = v72;
  uint64_t v75 = *((void *)this + 32);
  if (*(void *)(v75 + 5184) || *(_DWORD *)(v75 + 5336) || *(_DWORD *)(v75 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v75 + 5184), 288, 0, 0xFFFFFFFFFLL, 8, v74, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  if ((*(unsigned char *)(v3 + 50) & 8) != 0)
  {
    uint64_t v76 = *((void *)this + 33);
    uint64_t v77 = *(void *)(*((void *)this + 32) + 2680);
    memset(buf, 0, sizeof(buf));
    int v78 = *(_DWORD *)(v76 + 16);
    *(void *)&buf[0] = v77;
    int v79 = *(_DWORD *)(v76 + 292);
    *(_DWORD *)(v76 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFFFu;
    uint64_t v80 = *((void *)this + 33);
    int v81 = *(_DWORD *)(v80 + 292);
    *(_DWORD *)(v80 + 292) = v79;
    if (v77)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 292, (v78 & 0xF) << 9, 0xFFFFFFFFFLL, 8, v81, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 344) = 0;
  uint64_t v82 = *((void *)this + 33);
  int v83 = *(_DWORD *)(v82 + 344);
  *(_DWORD *)(v82 + 344) = 0;
  *(_DWORD *)(*((void *)this + 33) + 344) ^= 0xFFFFFFFu;
  uint64_t v84 = *((void *)this + 33);
  int v85 = *(_DWORD *)(v84 + 344);
  *(_DWORD *)(v84 + 344) = v83;
  if (*((void *)this + 454) || *((_DWORD *)this + 946) || *((_DWORD *)this + 947))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 344, 0, 0xFFFFFFFFFLL, 8, v85, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  uint64_t v86 = *((void *)this + 33);
  int v87 = *(_DWORD *)(v86 + 296);
  *(_DWORD *)(v86 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0xFFFFFFFu;
  uint64_t v88 = *((void *)this + 33);
  int v89 = *(_DWORD *)(v88 + 296);
  *(_DWORD *)(v88 + 296) = v87;
  if (*((void *)this + 410) || *((_DWORD *)this + 858) || *((_DWORD *)this + 859))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 296, 0, 0xFFFFFFFFFLL, 8, v89, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 300) = 0;
  uint64_t v90 = *((void *)this + 33);
  int v91 = *(_DWORD *)(v90 + 300);
  *(_DWORD *)(v90 + 300) = 0;
  *(_DWORD *)(*((void *)this + 33) + 300) ^= 0xFFFFFFFu;
  uint64_t v92 = *((void *)this + 33);
  int v93 = *(_DWORD *)(v92 + 300);
  *(_DWORD *)(v92 + 300) = v91;
  if (*((void *)this + 432) || *((_DWORD *)this + 902) || *((_DWORD *)this + 903))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 432, 300, 0, 0xFFFFFFFFFLL, 8, v93, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 304) = 0;
  *(_DWORD *)(*((void *)this + 33) + 308) = 0;
  uint64_t v94 = *((void *)this + 33);
  int v95 = *(_DWORD *)(v94 + 308);
  *(_DWORD *)(v94 + 308) = 0;
  *(_DWORD *)(*((void *)this + 33) + 308) ^= 0xFFFFFFFu;
  uint64_t v96 = *((void *)this + 33);
  int v97 = *(_DWORD *)(v96 + 308);
  *(_DWORD *)(v96 + 308) = v95;
  if (*((void *)this + 476) || *((_DWORD *)this + 990) || *((_DWORD *)this + 991))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 308, 0, 0xFFFFFFFFFLL, 8, v97, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 312) = 0;
  uint64_t v98 = *((void *)this + 33);
  int v99 = *(_DWORD *)(v98 + 312);
  *(_DWORD *)(v98 + 312) = 0;
  *(_DWORD *)(*((void *)this + 33) + 312) ^= 0xFFFFFFFu;
  uint64_t v100 = *((void *)this + 33);
  int v101 = *(_DWORD *)(v100 + 312);
  *(_DWORD *)(v100 + 312) = v99;
  if (*((void *)this + 498) || *((_DWORD *)this + 1034) || *((_DWORD *)this + 1035))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 312, 0, 0xFFFFFFFFFLL, 8, v101, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 316) = 0;
  uint64_t v102 = *((void *)this + 33);
  int v103 = *(_DWORD *)(v102 + 316);
  *(_DWORD *)(v102 + 316) = 0;
  *(_DWORD *)(*((void *)this + 33) + 316) ^= 0xFFFFFFFu;
  uint64_t v104 = *((void *)this + 33);
  int v105 = *(_DWORD *)(v104 + 316);
  *(_DWORD *)(v104 + 316) = v103;
  if (*((void *)this + 520) || *((_DWORD *)this + 1078) || *((_DWORD *)this + 1079))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 520, 316, 0, 0xFFFFFFFFFLL, 8, v105, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 320) = 0;
  uint64_t v106 = *((void *)this + 33);
  int v107 = *(_DWORD *)(v106 + 320);
  *(_DWORD *)(v106 + 320) = 0;
  *(_DWORD *)(*((void *)this + 33) + 320) ^= 0xFFFFFFFu;
  uint64_t v108 = *((void *)this + 33);
  int v109 = *(_DWORD *)(v108 + 320);
  *(_DWORD *)(v108 + 320) = v107;
  if (*((void *)this + 542) || *((_DWORD *)this + 1122) || *((_DWORD *)this + 1123))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 542, 320, 0, 0xFFFFFFFFFLL, 8, v109, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 324) = 0;
  uint64_t v110 = *((void *)this + 33);
  int v111 = *(_DWORD *)(v110 + 324);
  *(_DWORD *)(v110 + 324) = 0;
  *(_DWORD *)(*((void *)this + 33) + 324) ^= 0xFFFFFFFu;
  uint64_t v112 = *((void *)this + 33);
  int v113 = *(_DWORD *)(v112 + 324);
  *(_DWORD *)(v112 + 324) = v111;
  uint64_t v114 = *((void *)this + 32);
  unsigned int v115 = *(_DWORD *)(v114 + 17568);
  uint64_t v116 = v114 + 176 * v115;
  if (*(void *)(v116 + 3072) || *(_DWORD *)(v114 + 176 * v115 + 3224) || *(_DWORD *)(v114 + 176 * v115 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v116 + 3072), 324, 0, 0xFFFFFFFFFLL, 8, v113, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 328) &= 0xF0000000;
  uint64_t v117 = *((void *)this + 33);
  int v118 = *(_DWORD *)(v117 + 328);
  *(_DWORD *)(v117 + 328) = 0;
  *(_DWORD *)(*((void *)this + 33) + 328) ^= 0xFFFFFFFu;
  uint64_t v119 = *((void *)this + 33);
  int v120 = *(_DWORD *)(v119 + 328);
  *(_DWORD *)(v119 + 328) = v118;
  uint64_t v121 = *((void *)this + 32);
  int v122 = *(_DWORD *)(v121 + 5724);
  uint64_t v123 = v121 + 176 * v122;
  if (*(void *)(v123 + 3776) || *(_DWORD *)(v121 + 176 * v122 + 3928) || *(_DWORD *)(v121 + 176 * v122 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v123 + 3776), 328, 0, 0xFFFFFFFFFLL, 8, v120, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 332) &= 0xF0000000;
  uint64_t v124 = *((void *)this + 33);
  int v125 = *(_DWORD *)(v124 + 332);
  *(_DWORD *)(v124 + 332) = 0;
  *(_DWORD *)(*((void *)this + 33) + 332) ^= 0xFFFFFFFu;
  uint64_t v126 = *((void *)this + 33);
  int v127 = *(_DWORD *)(v126 + 332);
  *(_DWORD *)(v126 + 332) = v125;
  uint64_t v128 = *((void *)this + 32);
  int v129 = *(_DWORD *)(v128 + 5720);
  uint64_t v130 = v128 + 176 * v129;
  if (*(void *)(v130 + 3776) || *(_DWORD *)(v128 + 176 * v129 + 3928) || *(_DWORD *)(v128 + 176 * v129 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v130 + 3776), 332, 0, 0xFFFFFFFFFLL, 8, v127, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 336) = 0;
  uint64_t v131 = *((void *)this + 33);
  int v132 = *(_DWORD *)(v131 + 336);
  *(_DWORD *)(v131 + 336) = 0;
  *(_DWORD *)(*((void *)this + 33) + 336) ^= 0xFFFFFFFu;
  uint64_t v133 = *((void *)this + 33);
  int v134 = *(_DWORD *)(v133 + 336);
  *(_DWORD *)(v133 + 336) = v132;
  uint64_t v135 = *((void *)this + 32);
  int v136 = *(_DWORD *)(v135 + 5716);
  uint64_t v137 = v135 + 176 * v136;
  if (*(void *)(v137 + 5360) || *(_DWORD *)(v135 + 176 * v136 + 5512) || *(_DWORD *)(v135 + 176 * v136 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v137 + 5360), 336, 0, 0xFFFFFFFFFLL, 8, v134, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 340) = 0;
  uint64_t v138 = *((void *)this + 33);
  int v139 = *(_DWORD *)(v138 + 340);
  *(_DWORD *)(v138 + 340) = 0;
  *(_DWORD *)(*((void *)this + 33) + 340) ^= 0xFFFFFFFu;
  uint64_t v140 = *((void *)this + 33);
  int v141 = *(_DWORD *)(v140 + 340);
  *(_DWORD *)(v140 + 340) = v139;
  uint64_t v142 = *((void *)this + 32);
  int v143 = *(_DWORD *)(v142 + 5712);
  uint64_t v144 = v142 + 176 * v143;
  if (*(void *)(v144 + 5360) || *(_DWORD *)(v142 + 176 * v143 + 5512) || *(_DWORD *)(v142 + 176 * v143 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v144 + 5360), 340, 0, 0xFFFFFFFFFLL, 8, v141, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 348) = 0;
  *(_DWORD *)(*((void *)this + 33) + 352) = 0;
  *(_DWORD *)(*((void *)this + 33) + 356) = 0;
  *(_DWORD *)(*((void *)this + 33) + 360) = 0;
  uint64_t v145 = *((void *)this + 33);
  int v146 = *(_DWORD *)(v145 + 352);
  *(_DWORD *)(v145 + 352) = 0;
  *(_DWORD *)(*((void *)this + 33) + 352) ^= 0x1FFFFFFFu;
  uint64_t v147 = *((void *)this + 33);
  int v148 = *(_DWORD *)(v147 + 352);
  *(_DWORD *)(v147 + 352) = v146;
  uint64_t v149 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v149 || *(_DWORD *)(v149 + 152) || *(_DWORD *)(v149 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v149, 352, *(_DWORD *)(v149 + 52), 0xFFFFFFFFFLL, 7, v148, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v150 = v3;
  uint64_t v151 = *((void *)this + 33);
  int v152 = *(_DWORD *)(v151 + 360);
  *(_DWORD *)(v151 + 360) = 0;
  *(_DWORD *)(*((void *)this + 33) + 360) ^= 0x1FFFFFFFu;
  uint64_t v153 = *((void *)this + 33);
  int v154 = *(_DWORD *)(v153 + 360);
  *(_DWORD *)(v153 + 360) = v152;
  uint64_t v155 = *((void *)this + 32);
  uint64_t v156 = *(void *)(v155 + 376 * v6 + 5736);
  if (*(void *)v156 || *(_DWORD *)(v156 + 152) || *(_DWORD *)(v156 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v156, 360, *(_DWORD *)(v156 + 56), 0xFFFFFFFFFLL, 7, v154, 4);
    if (result) {
      return result;
    }
    uint64_t v155 = *((void *)this + 32);
  }
  int v157 = *(_DWORD *)(v155 + 2648);
  uint64_t v158 = *((void *)this + 33);
  int v159 = *(_DWORD *)(v158 + 348);
  *(_DWORD *)(v158 + 348) = 0;
  *(_DWORD *)(*((void *)this + 33) + 348) ^= 0x1FFFFFFFu;
  uint64_t v160 = *((void *)this + 33);
  int v161 = *(_DWORD *)(v160 + 348);
  *(_DWORD *)(v160 + 348) = v159;
  uint64_t v162 = *((void *)this + 32);
  if (v157 == 1)
  {
    uint64_t v163 = *(void *)(v162 + 376 * v6 + 5736);
    if (*(void *)v163 || *(_DWORD *)(v163 + 152) || *(_DWORD *)(v163 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v163, 348, *(_DWORD *)(v163 + 64), 0xFFFFFFFFFLL, 7, v161, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v164 = *((void *)this + 33);
    int v165 = *(_DWORD *)(v164 + 356);
    *(_DWORD *)(v164 + 356) = 0;
    *(_DWORD *)(*((void *)this + 33) + 356) ^= 0x1FFFFFFFu;
    uint64_t v166 = *((void *)this + 33);
    int v167 = *(_DWORD *)(v166 + 356);
    *(_DWORD *)(v166 + 356) = v165;
    uint64_t v168 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v168 || *(_DWORD *)(v168 + 152) || *(_DWORD *)(v168 + 156))
    {
      int v169 = *(_DWORD *)(v168 + 68);
      uint64_t v170 = this;
      goto LABEL_121;
    }
  }
  else
  {
    uint64_t v171 = v162 + 376 * v6;
    if (*(void *)(v171 + 5752) || *(_DWORD *)(v162 + 376 * v6 + 5904) || *(_DWORD *)(v162 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v171 + 5752), 348, 0, 0xFFFFFFFFFLL, 7, v161, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v172 = *((void *)this + 33);
    int v173 = *(_DWORD *)(v172 + 356);
    *(_DWORD *)(v172 + 356) = 0;
    *(_DWORD *)(*((void *)this + 33) + 356) ^= 0x1FFFFFFFu;
    uint64_t v174 = *((void *)this + 33);
    int v167 = *(_DWORD *)(v174 + 356);
    *(_DWORD *)(v174 + 356) = v173;
    uint64_t v175 = *((void *)this + 32);
    uint64_t v176 = v175 + 376 * v6;
    if (*(void *)(v176 + 5928) || *(_DWORD *)(v175 + 376 * v6 + 6080) || *(_DWORD *)(v175 + 376 * v6 + 6084))
    {
      uint64_t v168 = v176 + 5928;
      uint64_t v170 = this;
      int v169 = 0;
LABEL_121:
      uint64_t result = CAHDec::addToPatcherList((uint64_t)v170, (void *)v168, 356, v169, 0xFFFFFFFFFLL, 7, v167, 4);
      if (result) {
        return result;
      }
    }
  }
  if (!v251)
  {
    uint64_t v209 = 0;
    uint64_t v210 = 17424;
    do
    {
      uint64_t v211 = *(void *)(*(void *)(*((void *)this + 32) + v210) + 40);
      *(_DWORD *)(*((void *)this + 33) + v209 + 376) = 0;
      *(_DWORD *)(*((void *)this + 33) + v209 + 388) = 0;
      *(_DWORD *)(*((void *)this + 33) + v209 + 400) = 0;
      *(_DWORD *)(*((void *)this + 33) + v209 + 412) = 0;
      uint64_t v212 = *((void *)this + 33) + v209;
      int v213 = *(_DWORD *)(v212 + 388);
      *(_DWORD *)(v212 + 388) = 0;
      *(_DWORD *)(*((void *)this + 33) + v209 + 388) ^= 0x1FFFFFFFu;
      uint64_t v214 = *((void *)this + 33) + v209;
      int v215 = *(_DWORD *)(v214 + 388);
      *(_DWORD *)(v214 + 388) = v213;
      uint64_t v216 = *(void *)(v211 + 8);
      if (*(void *)v216 || *(_DWORD *)(v216 + 152) || *(_DWORD *)(v216 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v216, (int)v209 + 388, *(_DWORD *)(v216 + 52), 0xFFFFFFFFFLL, 7, v215, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v217 = *((void *)this + 33) + v209;
      int v218 = *(_DWORD *)(v217 + 412);
      *(_DWORD *)(v217 + 412) = 0;
      *(_DWORD *)(*((void *)this + 33) + v209 + 412) ^= 0x1FFFFFFFu;
      uint64_t v219 = *((void *)this + 33) + v209;
      int v220 = *(_DWORD *)(v219 + 412);
      *(_DWORD *)(v219 + 412) = v218;
      uint64_t v221 = *(void *)(v211 + 8);
      if (*(void *)v221 || *(_DWORD *)(v221 + 152) || *(_DWORD *)(v221 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v221, (int)v209 + 412, *(_DWORD *)(v221 + 56), 0xFFFFFFFFFLL, 7, v220, 4);
        if (result) {
          return result;
        }
      }
      int v222 = *(_DWORD *)(*((void *)this + 32) + 2648);
      uint64_t v223 = *((void *)this + 33) + v209;
      int v224 = *(_DWORD *)(v223 + 376);
      *(_DWORD *)(v223 + 376) = 0;
      *(_DWORD *)(*((void *)this + 33) + v209 + 376) ^= 0x1FFFFFFFu;
      uint64_t v225 = *((void *)this + 33) + v209;
      int v226 = *(_DWORD *)(v225 + 376);
      *(_DWORD *)(v225 + 376) = v224;
      if (v222 == 1)
      {
        uint64_t v227 = *(void *)(v211 + 8);
        if (*(void *)v227 || *(_DWORD *)(v227 + 152) || *(_DWORD *)(v227 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v227, (int)v209 + 376, *(_DWORD *)(v227 + 64), 0xFFFFFFFFFLL, 7, v226, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v228 = *((void *)this + 33) + v209;
        int v229 = *(_DWORD *)(v228 + 400);
        *(_DWORD *)(v228 + 400) = 0;
        *(_DWORD *)(*((void *)this + 33) + v209 + 400) ^= 0x1FFFFFFFu;
        uint64_t v230 = *((void *)this + 33) + v209;
        int v231 = *(_DWORD *)(v230 + 400);
        *(_DWORD *)(v230 + 400) = v229;
        uint64_t v232 = *(void *)(v211 + 8);
        if (*(void *)v232 || *(_DWORD *)(v232 + 152) || *(_DWORD *)(v232 + 156))
        {
          int v233 = *(_DWORD *)(v232 + 68);
          int v234 = v209 + 400;
          int v235 = this;
          goto LABEL_188;
        }
      }
      else
      {
        if (*(void *)(v211 + 24) || *(_DWORD *)(v211 + 176) || *(_DWORD *)(v211 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v211 + 24), (int)v209 + 376, 0, 0xFFFFFFFFFLL, 7, v226, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v236 = *((void *)this + 33) + v209;
        int v237 = *(_DWORD *)(v236 + 400);
        *(_DWORD *)(v236 + 400) = 0;
        *(_DWORD *)(*((void *)this + 33) + v209 + 400) ^= 0x1FFFFFFFu;
        uint64_t v238 = *((void *)this + 33) + v209;
        int v231 = *(_DWORD *)(v238 + 400);
        *(_DWORD *)(v238 + 400) = v237;
        uint64_t v232 = v211 + 200;
        if (*(void *)(v211 + 200) || *(_DWORD *)(v211 + 352) || *(_DWORD *)(v211 + 356))
        {
          int v234 = v209 + 400;
          int v235 = this;
          int v233 = 0;
LABEL_188:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v235, (void *)v232, v234, v233, 0xFFFFFFFFFLL, 7, v231, 4);
          if (result) {
            return result;
          }
        }
      }
      v210 += 8;
      v209 += 4;
    }
    while (v209 != 12);
  }
  unsigned int v177 = subWidth[*(int *)(*(void *)(*((void *)this + 32) + 17560) + 4)];
  *(_DWORD *)(*((void *)this + 33) + 424) = 0;
  *(_DWORD *)(*((void *)this + 33) + 428) = 0;
  *(_DWORD *)(*((void *)this + 33) + 432) = 0;
  *(_DWORD *)(*((void *)this + 33) + 436) = 0;
  if (*(_DWORD *)(*((void *)this + 32) + 2644))
  {
    uint64_t v178 = *((void *)this + 33);
    int v179 = *(_DWORD *)(v178 + 424);
    *(_DWORD *)(v178 + 424) = 0;
    *(_DWORD *)(*((void *)this + 33) + 424) ^= 0xFFFFFFFu;
    uint64_t v180 = *((void *)this + 33);
    int v181 = *(_DWORD *)(v180 + 424);
    *(_DWORD *)(v180 + 424) = v179;
    uint64_t v182 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v182 || *(_DWORD *)(v182 + 152) || *(_DWORD *)(v182 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v182, 424, *(_DWORD *)(v182 + 52), 0xFFFFFFFFFLL, 8, v181, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v183 = *((void *)this + 33);
    int v184 = *(_DWORD *)(v183 + 428);
    *(_DWORD *)(v183 + 428) = 0;
    *(_DWORD *)(*((void *)this + 33) + 428) ^= 0xFFFFFFFu;
    uint64_t v185 = *((void *)this + 33);
    int v186 = *(_DWORD *)(v185 + 428);
    *(_DWORD *)(v185 + 428) = v184;
    uint64_t v187 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v187 || *(_DWORD *)(v187 + 152) || *(_DWORD *)(v187 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v187, 428, *(_DWORD *)(v187 + 56), 0xFFFFFFFFFLL, 8, v186, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v188 = *((void *)this + 33);
    int v189 = *(_DWORD *)(v188 + 432);
    *(_DWORD *)(v188 + 432) = 0;
    *(_DWORD *)(*((void *)this + 33) + 432) ^= 0xC0000000;
    uint64_t v190 = *((void *)this + 33);
    int v191 = *(_DWORD *)(v190 + 432);
    *(_DWORD *)(v190 + 432) = v189;
    uint64_t v192 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v192 || *(_DWORD *)(v192 + 152) || *(_DWORD *)(v192 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v192, 432, *(_DWORD *)(v192 + 52), 192, 6, v191, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v193 = *((void *)this + 33);
    int v194 = *(_DWORD *)(v193 + 436);
    *(_DWORD *)(v193 + 436) = 0;
    *(_DWORD *)(*((void *)this + 33) + 436) ^= 0xC0000000;
    uint64_t v195 = *((void *)this + 33);
    int v196 = *(_DWORD *)(v195 + 436);
    *(_DWORD *)(v195 + 436) = v194;
    uint64_t v197 = *((void *)this + 32);
    uint64_t v198 = *(void *)(v197 + 11768);
    if (*(void *)v198 || *(_DWORD *)(v198 + 152) || *(_DWORD *)(v198 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v198, 436, *(_DWORD *)(v198 + 56), 192, 6, v196, 4);
      if (result) {
        return result;
      }
      uint64_t v197 = *((void *)this + 32);
    }
    if (*(unsigned char *)(v197 + 8))
    {
      *(_DWORD *)(*((void *)this + 33) + 432) = *(_DWORD *)(*((void *)this + 33) + 432) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(v197 + 11768) + 76) >> 6) & 0xFFF));
      uint64_t v199 = (_DWORD *)(*(void *)(*((void *)this + 32) + 11768) + 80);
    }
    else
    {
      if (CAHDecDahliaLgh::getSWRStride(this, *(unsigned __int16 *)(v150 + 148) + 1, *(unsigned __int8 *)(v4 + 105) - 8, *(unsigned __int8 *)(v4 + 105) - 8, v177))return 0xFFFFFFFFLL; {
      *(_DWORD *)(*((void *)this + 33) + 432) = *(_DWORD *)(*((void *)this + 33) + 432) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 1135) >> 6) & 0xFFF));
      }
      uint64_t v199 = (_DWORD *)((char *)this + 4544);
    }
    *(_DWORD *)(*((void *)this + 33) + 436) = *(_DWORD *)(*((void *)this + 33) + 436) & 0xFFFF8003 | (4 * ((*v199 >> 6) & 0x1FFF));
  }
  if (v246 < 2)
  {
    uint64_t v200 = *((void *)this + 33);
    *(_DWORD *)(v200 + 440) = 65537;
    *(_WORD *)(v200 + 444) = 0;
    *(_WORD *)(v200 + 446) = *(_DWORD *)(v4 + 108) >> 6;
    *(_WORD *)(v200 + 574) = 0;
    *(_WORD *)(v200 + 576) = *(_DWORD *)(v4 + 112) >> 6;
    uint64_t v201 = *((void *)this + 32);
  }
  else
  {
    uint64_t v200 = *((void *)this + 33);
    *(_WORD *)(v200 + 440) = v250;
    uint64_t v201 = *((void *)this + 32);
    if (v247 != 31)
    {
      if (v248 <= 1) {
        uint64_t v202 = 1;
      }
      else {
        uint64_t v202 = v248;
      }
      uint64_t v203 = (unsigned char *)(*(void *)(v201 + 17560) + 2786);
      do
      {
        if (!*v203) {
          *(_WORD *)(v200 + 2 * v245 + 574) = *(_DWORD *)(v203 - 26) >> 3;
        }
        v203 += 1792;
        --v202;
      }
      while (v202);
    }
    *(_WORD *)(v200 + 442) = v248;
    if (v249 != 31)
    {
      uint64_t v204 = *(void *)(v201 + 17560);
      if (v250 <= 1) {
        uint64_t v205 = 1;
      }
      else {
        uint64_t v205 = v250;
      }
      uint64_t v206 = (unsigned __int8 *)(v204 + 2786);
      int v207 = (unsigned __int8 *)(v204 + 2786);
      do
      {
        int v208 = *v207;
        v207 += 28;
        if (!v208) {
          *(_WORD *)(v200 + 2 * v245 + 444) = *(_DWORD *)(v206 - 18) >> 3;
        }
        uint64_t v206 = v207;
        --v205;
      }
      while (v205);
    }
  }
  if (*(_DWORD *)(v201 + 2360) != 1) {
    return 0;
  }
  *(_DWORD *)(v200 + 588) = *(_DWORD *)(v200 + 588) & 0xFFFFFFFE | *(_DWORD *)(v201 + 2508) & 1;
  if (*(_DWORD *)(v201 + 2508))
  {
    *(_DWORD *)(v200 + 596) = 0x10000000;
    *(_DWORD *)(v200 + 600) = *(_DWORD *)(v201 + 2368);
    *(void *)(v200 + 608) = 0;
    *(_DWORD *)(v200 + 604) = 0;
    *(_OWORD *)(v200 + 616) = *(_OWORD *)(v201 + 2372);
    long long v239 = *(_OWORD *)(v201 + 2388);
    *(_OWORD *)(v200 + 648) = *(_OWORD *)(v201 + 2404);
    *(_OWORD *)(v200 + 632) = v239;
  }
  *(_DWORD *)(*((void *)this + 33) + 588) = *(_DWORD *)(*((void *)this + 33) + 588) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v201 + 2512) & 1));
  if (*(_DWORD *)(v201 + 2512))
  {
    *(_DWORD *)(v200 + 664) = 0;
    char v240 = *(_DWORD *)(v201 + 2424);
    *(_DWORD *)(v200 + 664) = (*(_DWORD *)(v201 + 2424) & 1) << 22;
    int v241 = ((*(_DWORD *)(v201 + 2420) & 1) << 23) | ((v240 & 1) << 22) | 0x20000000;
    *(_DWORD *)(v200 + 664) = v241;
    *(_DWORD *)(v200 + 664) = v241 | (*(_DWORD *)(v201 + 2364) == 0);
    long long v242 = *(_OWORD *)(v201 + 2428);
    long long v243 = *(_OWORD *)(v201 + 2444);
    *(_OWORD *)(v200 + 700) = *(_OWORD *)(v201 + 2460);
    *(_OWORD *)(v200 + 684) = v243;
    *(_OWORD *)(v200 + 668) = v242;
  }
  *(_DWORD *)(*((void *)this + 33) + 588) = *(_DWORD *)(*((void *)this + 33) + 588) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v201 + 2516) & 1));
  *(_DWORD *)(*((void *)this + 33) + 588) = *(_DWORD *)(*((void *)this + 33) + 588) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v201 + 2520) & 1));
  *(_DWORD *)(*((void *)this + 33) + 588) = *(_DWORD *)(*((void *)this + 33) + 588) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v201 + 2524) & 1));
  if (!*(_DWORD *)(v201 + 2516)) {
    return 0;
  }
  *(_DWORD *)(v200 + 720) = 0;
  if (*(_DWORD *)(v201 + 2476) == 2) {
    int v244 = 805306368;
  }
  else {
    int v244 = 813694976;
  }
  *(_DWORD *)(v200 + 720) = v244;
  memcpy((void *)(v200 + 724), (const void *)(v201 + 2480), 4 * *(unsigned int *)(v201 + 2476));
  uint64_t result = 0;
  *(_DWORD *)(v201 + 2516) = 0;
  return result;
}

uint64_t CAHDecDahliaLgh::getSWRStride(CAHDecDahliaLgh *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *(void *)((char *)this + 4540) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 1136) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecDahliaLgh::getTileStartCTU(CAHDecDahliaLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 440);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecDahliaLgh::getTileEndCTU(CAHDecDahliaLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 440);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecDahliaLgh::populateAvdWork(CAHDecDahliaLgh *this)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  unint64_t v3 = *(unsigned int *)(v2 + 312);
  if (v3)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    LODWORD(v7) = 0;
    int v8 = 0;
    uint64_t v9 = v1 + 3812;
    uint64_t v41 = *(void *)(v2 + 16);
    unint64_t v42 = 0;
    unint64_t v10 = *(unsigned int *)(v2 + 316);
    unint64_t v11 = v10;
    uint64_t v39 = v9;
    uint64_t v40 = *(void *)(*((void *)this + 32) + 17560);
    do
    {
      uint64_t v38 = v5;
      if (v11)
      {
        unint64_t v12 = 0;
        do
        {
          uint64_t v13 = *((void *)this + 32);
          uint64_t v14 = *(void *)(v13 + 17560);
          uint64_t v15 = v14 + v5;
          if (!*(unsigned char *)(v14 + v5 + 2786))
          {
            *(_WORD *)(v9 + 4) = v8;
            *(_WORD *)(v9 + 6) = 0;
            *(_WORD *)(v9 + 10) = v6;
            int v43 = v6;
            int v44 = v8;
            if (*(unsigned char *)(v13 + 2834)) {
              uint64_t v16 = *(void *)(v13 + 2840);
            }
            else {
              uint64_t v16 = *(void *)(v13 + 1048) + 8;
            }
            unint64_t v17 = v41 + *(unsigned int *)(v15 + 2780) - *(void *)v16;
            int v18 = 36 * v7;
            unint64_t v19 = HIDWORD(v17);
            if (*(void *)v16 || *(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                uint64_t v46 = "populateAvdWork";
                __int16 v47 = 1024;
                int v48 = 1042;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 3830, v17, 0xFFFFFFFFFLL, 32, -1, 2);
              if (result) {
                return result;
              }
              if (*(void *)v16) {
                goto LABEL_49;
              }
            }
            if (*(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
LABEL_49:
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                uint64_t v46 = "populateAvdWork";
                __int16 v47 = 1024;
                int v48 = 1043;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 3832, v17, 0xFFFFFFFFLL, 0, -1, 4);
              if (result) {
                return result;
              }
            }
            int v21 = *(unsigned __int16 *)(v9 + 18);
            if (*(_WORD *)(v9 + 18) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v22 = *(void *)(v16 + 16) + v17;
              *(_DWORD *)buf = 136316162;
              uint64_t v46 = "populateAvdWork";
              __int16 v47 = 1024;
              int v48 = v42;
              __int16 v49 = 1024;
              int v50 = v12;
              __int16 v51 = 1024;
              int v52 = v21;
              __int16 v53 = 2048;
              unint64_t v54 = v22;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): [%4d, %4d] w->dataAddrHuint64_t i = %08x, from %llx", buf, 0x28u);
            }
            unsigned int v23 = (_DWORD *)(v14 + v5);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v14 + v5 + 2776);
            int v24 = *(_DWORD *)(v15 + 2760);
            int v25 = v24 + 7;
            if (v24 >= 0) {
              int v25 = *(_DWORD *)(v15 + 2760);
            }
            int v26 = v23[692];
            *(_DWORD *)(v9 + 28) = (v25 << 13) & 0xFFFF0000 | (v26 / 8);
            int v27 = v23[691];
            int v29 = v27 - 1;
            BOOL v28 = v27 < 1;
            int v30 = v27 + 6;
            if (!v28) {
              int v30 = v29;
            }
            unsigned int v31 = (v30 << 13) & 0xFFFF0000;
            int v32 = v23[693];
            int v33 = v32 - 1;
            BOOL v28 = v32 < 1;
            int v34 = v32 + 6;
            if (!v28) {
              int v34 = v33;
            }
            *(_DWORD *)(v9 + 32) = v31 | (v34 >> 3);
            if (v24 + v26) {
              __int16 v35 = 4;
            }
            else {
              __int16 v35 = 5;
            }
            *(_WORD *)(v9 + 12) = v35;
            unint64_t v3 = *(unsigned int *)(v40 + 312);
            unint64_t v10 = *(unsigned int *)(v40 + 316);
            if (v12 == v10 && v42 == v3) {
              __int16 v37 = 5;
            }
            else {
              __int16 v37 = 4;
            }
            *(_WORD *)(v9 + 14) = v37;
            int v6 = v43 + 1;
            int v8 = v44 + 1;
            v9 += 36;
            unint64_t v7 = 0x8E38E38E38E38E39 * ((v9 - v39) >> 2);
          }
          ++v12;
          v5 += 28;
          unint64_t v11 = v10;
        }
        while (v12 < v10);
      }
      uint64_t v5 = v38 + 1792;
      ++v42;
    }
    while (v42 < v3);
    uint64_t v1 = *((void *)this + 33);
  }
  else
  {
    LOWORD(v8) = 0;
  }
  uint64_t result = 0;
  *(_WORD *)(v1 + 26) = v8;
  *(_DWORD *)(v1 + 32) = 3812;
  return result;
}

unsigned __int8 *CAHDecDahliaLgh::getTileAddr(CAHDecDahliaLgh *this, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  if (*(unsigned char *)(v2 + 2834))
  {
    unint64_t v3 = *(void **)(v2 + 2840);
    uint64_t v4 = &a2[-*v3];
    uint64_t v5 = &v4[v3[2]];
    if ((unint64_t)v5 >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1143;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      unint64_t v7 = (void *)(*(void *)(*((void *)this + 32) + 2840) + 16);
      return &v4[*v7];
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 1048);
    uint64_t v9 = *(void *)(v8 + 24);
    unint64_t v7 = (void *)(v8 + 24);
    uint64_t v4 = &a2[-*(v7 - 2)];
    uint64_t v5 = &v4[v9];
    if ((unint64_t)&v4[v9] >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1160;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      return &v4[*v7];
    }
  }
  return v5;
}

uint64_t CAHDecDahliaLgh::allocWorkBuf_SPS(CAHDecDahliaLgh *this, int *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = *a2 + 31;
  if (*a2 < -31) {
    int v5 = *a2 + 62;
  }
  unsigned int v6 = v5 >> 5;
  int v7 = v4 + 31;
  if (v4 < -31) {
    int v7 = v4 + 62;
  }
  unsigned int v8 = v7 >> 5;
  unsigned int v9 = 32 - __clz(v6 - 1);
  if (v6 >= 2) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  unsigned int v11 = 32 - __clz(v8 - 1);
  if (v8 >= 2) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unsigned int v13 = ((32 << (v12 + v10)) + 127) & 0xFFFFFF80;
  int v14 = 2 * v3 + 62;
  if (2 * v3 >= -31) {
    int v14 = 2 * v3 + 31;
  }
  unsigned int v15 = v14 >> 5;
  int v16 = v4 + 15;
  if (v4 < -15) {
    int v16 = v4 + 30;
  }
  unsigned int v17 = v16 >> 4;
  unsigned int v18 = 32 - __clz(v15 - 1);
  if (v15 >= 2) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  unsigned int v20 = 32 - __clz(v17 - 1);
  if (v17 >= 2) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  *((_DWORD *)this + 1128) = v13;
  *((_DWORD *)this + 1129) = ((8 << (v19 + v21)) + 127) & 0xFFFFFF80;
  unsigned int v22 = ((v4 + 63) >> 6) * ((v3 + 63) >> 6);
  *((_DWORD *)this + 1133) = 576 * v22;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_28:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      char v29 = v28;
      uint64_t v30 = *((unsigned int *)this + 1133);
      if (v30
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 176 * v27 + 5360), v30, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        unsigned int v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1366;
        __int16 v39 = 2080;
        uint64_t v40 = "MvColo";
        int v33 = &_os_log_internal;
        goto LABEL_46;
      }
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v29 & 1) != 0);
    unsigned int v31 = 24 * v22;
    *((_DWORD *)this + 1137) = 24 * v22;
    uint64_t v32 = 3776;
    if (!v31) {
      goto LABEL_34;
    }
LABEL_33:
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v32), v31, 7, 1, 0))
    {
LABEL_34:
      while (v32 != 5008)
      {
        unsigned int v31 = *((_DWORD *)this + 1137);
        v32 += 176;
        if (v31) {
          goto LABEL_33;
        }
      }
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    unsigned int v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1371;
    __int16 v39 = 2080;
    uint64_t v40 = "segMap";
    int v33 = &_os_log_internal;
  }
  else
  {
    uint64_t v23 = 14608;
    uint64_t v24 = 16;
    while (1)
    {
      uint64_t v25 = *((unsigned int *)this + 1128);
      if (v25
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23 - 2816), v25, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        unsigned int v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1350;
        __int16 v39 = 2080;
        uint64_t v40 = "HdrY";
        int v33 = &_os_log_internal;
        goto LABEL_46;
      }
      uint64_t v26 = *((unsigned int *)this + 1129);
      if (v26)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23), v26, 7, 1, 0))break; {
      }
        }
      v23 += 176;
      if (!--v24) {
        goto LABEL_28;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    unsigned int v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1355;
    __int16 v39 = 2080;
    uint64_t v40 = "HdrC";
    int v33 = &_os_log_internal;
  }
LABEL_46:
  _os_log_impl(&dword_223977000, v33, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v35, 0x1Cu);
LABEL_47:
  (*(void (**)(CAHDecDahliaLgh *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecDahliaLgh::allocWorkBuf_PPS(CAHDecDahliaLgh *this, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = *(void *)(v5 + 17560);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 100);
  unsigned int v9 = (*(unsigned __int8 *)(v6 + 105) + 1) & 0x1FE;
  if (v7 == 3) {
    int v10 = 48;
  }
  else {
    int v10 = 32;
  }
  if (!v7) {
    int v10 = 16;
  }
  int v12 = *(_DWORD *)(v6 + 108);
  int v11 = *(_DWORD *)(v6 + 112);
  unsigned int v13 = (v12 + 15) >> 4;
  int v14 = ~(-1 << *(_DWORD *)(v6 + 96));
  signed int v15 = v13 * ((v10 * v9) >> 3) + (v14 << 7);
  if (v15)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 205, v15, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1447;
        __int16 v27 = 2080;
        char v28 = "IpAbove";
        int v16 = &_os_log_internal;
LABEL_34:
        _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  int v17 = 16 * v9;
  if ((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 != 192)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 216, (int)((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 - 192), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1450;
        __int16 v27 = 2080;
        char v28 = "LfAbovePix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
LABEL_35:
      (*(void (**)(CAHDecDahliaLgh *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  signed int v18 = 288 * ((v12 + 63) >> 6) + (v14 << 7);
  if (v18)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 227, v18, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1456;
        __int16 v27 = 2080;
        char v28 = "LfAboveInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  unsigned int v19 = (v11 + 7) >> 3;
  if (v19 * v17)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 238, (int)(v19 * v17), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1462;
        __int16 v27 = 2080;
        char v28 = "LfLeftPix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  uint64_t v20 = ((v11 + 63) >> 2) & 0x3FFFFFF0;
  if (v20)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 249, v20, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1470;
        __int16 v27 = 2080;
        char v28 = "LfLeftInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 260, (int)(24 * v13 + 30), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 1478;
      __int16 v27 = 2080;
      char v28 = "SwLeftPix";
      int v16 = &_os_log_internal;
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  int v22 = 192 * v9 + (v19 + 2) * (((v9 >> 1) << 8) | 8);
  if (!v22) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 271, v22, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 1484;
    __int16 v27 = 2080;
    char v28 = "AZLeftPix";
    int v16 = &_os_log_internal;
    goto LABEL_34;
  }
  return result;
}

uint64_t CAHDecDahliaLgh::freeWorkBuf_SPS(CAHDecDahliaLgh *this)
{
  uint64_t result = *((void *)this + 32);
  if (!*(_DWORD *)(result + 2648))
  {
    uint64_t v3 = 14608;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = (uint64_t *)(result + v3 - 2816);
      if (*v5)
      {
        CAVDDecoder::deallocAVDMem(result, v5);
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3 - 2816) = 0;
      }
      if (*(void *)(result + v3))
      {
        CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + v3));
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3) = 0;
      }
      v3 += 176;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = result + 176 * v6;
    if (*(void *)(v9 + 5360))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(v9 + 5360));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + 176 * v6 + 5360) = 0;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  for (uint64_t i = 3776; i != 5184; i += 176)
  {
    if (*(void *)(result + i))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + i));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + i) = 0;
    }
  }
  return result;
}

uint64_t *CAHDecDahliaLgh::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[432])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 432);
    v2[432] = 0;
  }
  if (v2[454])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 454);
    v2[454] = 0;
  }
  if (v2[410])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 410);
    v2[410] = 0;
  }
  if (v2[476])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 476);
    v2[476] = 0;
  }
  if (v2[498])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 498);
    v2[498] = 0;
  }
  if (v2[520])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 520);
    v2[520] = 0;
  }
  if (v2[542])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 542);
    v2[542] = 0;
  }
  return this;
}

uint64_t CAHDecDahliaLgh::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 4528) = a2;
  return this;
}

uint64_t CAHDecDahliaLgh::initPicture(CAHDecDahliaLgh *this)
{
  return 0;
}

uint64_t CAHDecDahliaLgh::populateSlices(CAHDecDahliaLgh *this)
{
  return 0;
}

uint64_t CAHDecDahliaLgh::getTileIdxAbove(CAHDecDahliaLgh *this)
{
  return 0;
}

uint64_t CAHDecDahliaLgh::decodeBuffer(CAHDecDahliaLgh *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecDahliaLgh::decodeBufferSize(CAHDecDahliaLgh *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecDahliaLgh::decHdrYLinAddr(CAHDecDahliaLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 11792);
}

uint64_t CAHDecDahliaLgh::decHdrCLinAddr(CAHDecDahliaLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 14608);
}

uint64_t CAHDecDahliaLgh::decHdrYSize(CAHDecDahliaLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 11836);
}

uint64_t CAHDecDahliaLgh::decHdrCSize(CAHDecDahliaLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 14652);
}

uint64_t CAHDecDahliaLgh::decHdrYStride(CAHDecDahliaLgh *this)
{
  return *((unsigned int *)this + 1130);
}

uint64_t CAHDecDahliaLgh::decHdrCStride(CAHDecDahliaLgh *this)
{
  return *((unsigned int *)this + 1131);
}

void CAHDecDahliaLgh::clearSegBuffer(CAHDecDahliaLgh *this)
{
}

BOOL isIntra(int a1)
{
  return a1 == 20 || (a1 & 0xFFFFFFFC) == 16;
}

uint64_t HEVC_RBSP::byte_align(HEVC_RBSP *this)
{
  return HEVC_RBSP::flush_bits((uint64_t)this, *((_DWORD *)this + 28) & 7);
}

BOOL HEVC_RBSP::byte_aligned(HEVC_RBSP *this)
{
  return (*((unsigned char *)this + 112) & 7) == 0;
}

BOOL HEVC_RBSP::more_rbsp_data(int8x8_t *this)
{
  return this[14].i32[0]
       + (vaddlv_u8((uint8x8_t)vcnt_s8(this[19])) & 0x78)
       + 8 * (this[20].i32[0] + this[17].i32[0] - this[15].i32[0])
       + 32 > 8;
}

uint64_t HEVC_RBSP::initVPSExtension(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0;
  uint64_t v3 = *(void *)(a2 + 4448);
  uint64_t v4 = *(void *)(v3 + 512);
  uint64_t v5 = *(void *)(v3 + 520);
  LODWORD(v6) = *(_DWORD *)(a2 + 12);
  do
  {
    if (v2) {
      char v7 = -1;
    }
    else {
      char v7 = 0;
    }
    uint64_t v8 = v4 + 28 * v2;
    *(unsigned char *)(v8 + 26) = v7;
    *(_WORD *)(v8 + 18) = 0;
    *(_DWORD *)(v8 + 4) = 0;
    *(unsigned char *)(v8 + 25) = 0;
    *(unsigned char *)uint64_t v8 = 0;
    uint64_t v9 = (v6 + 1);
    uint64_t result = *(void *)(v5 + 8 * v2) + 5;
    do
    {
      *(void *)(result - 3) = 0xFFFFFFFF0000FFFFLL;
      *(_WORD *)(result + 5) = -1;
      *(unsigned char *)(result - 5) = 7;
      result += 14;
      --v9;
    }
    while (v9);
    *(void *)(v3 + 16 * v2 + 2810) = 0;
    *(void *)(v3 + 16 * v2 + 2818) = 0;
    unint64_t v6 = *(unsigned int *)(a2 + 12);
  }
  while (v2++ < v6);
  return result;
}

uint64_t HEVC_RBSP::parseVPSextension(uint64_t a1, uint64_t a2)
{
  uint64_t v209 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (v3 != 1 || *(unsigned char *)(a2 + 9) != 1)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    int v29 = *(unsigned __int8 *)(a2 + 9);
    int v199 = 67109376;
    *(_DWORD *)uint64_t v200 = v3;
    *(_WORD *)&v200[4] = 1024;
    *(_DWORD *)&v200[6] = v29;
    int v26 = &_os_log_internal;
    __int16 v27 = "AppleAVD: ERROR : vps base layer %d, available %d";
LABEL_28:
    uint32_t v28 = 14;
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a2 + 4448);
  unint64_t v6 = malloc_type_calloc(0x1CuLL, (*(_DWORD *)(a2 + 12) + 1), 0x4F01C231uLL);
  *(void *)(v5 + 512) = v6;
  if (!v6)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LOWORD(v199) = 0;
    int v26 = &_os_log_internal;
    __int16 v27 = "AppleAVD: ERROR: vpsext->vps_layers bad alloc ";
LABEL_37:
    uint32_t v28 = 2;
    goto LABEL_38;
  }
  char v7 = malloc_type_calloc(8uLL, (*(_DWORD *)(a2 + 12) + 1), 0x40AFEA55uLL);
  *(void *)(v5 + 520) = v7;
  if (!v7)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LOWORD(v199) = 0;
    int v26 = &_os_log_internal;
    __int16 v27 = "AppleAVD: ERROR: vpsext->vps_layers_2d bad alloc ";
    goto LABEL_37;
  }
  unint64_t v8 = 0;
  LODWORD(v9) = *(_DWORD *)(a2 + 12);
  do
  {
    int v10 = malloc_type_calloc(0xEuLL, (v9 + 1), 0x9D249DFuLL);
    *(void *)(*(void *)(v5 + 520) + 8 * v8) = v10;
    if (!*(void *)(*(void *)(v5 + 520) + 8 * v8))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      LOWORD(v199) = 0;
      int v26 = &_os_log_internal;
      __int16 v27 = "AppleAVD: ERROR: vpsext->vps_layers_2d[i] bad alloc ";
      goto LABEL_37;
    }
    unint64_t v9 = *(unsigned int *)(a2 + 12);
    BOOL v117 = v8++ >= v9;
  }
  while (!v117);
  HEVC_RBSP::initVPSExtension((uint64_t)v10, a2);
  if (*(_DWORD *)(a2 + 12) && *(unsigned char *)(a2 + 8))
  {
    int v11 = malloc_type_calloc(0xDF8uLL, 1uLL, 0x5CF54FAuLL);
    *(void *)uint64_t v5 = v11;
    if (!v11) {
      return 0xFFFFFFFFLL;
    }
    HEVC_RBSP::parseProfileTierLevel((HEVC_RBSP *)a1, (uint64_t)v11, 0, *(_DWORD *)(a2 + 16));
  }
  unint64_t v12 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v13 = v12 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  uint64_t v14 = 0;
  *(unsigned char *)(v5 + 544) = v13;
  *(_WORD *)(v5 + 760) = 0;
  do
  {
    unint64_t v15 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    unint64_t v16 = v15 >> 63;
    HEVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(v5 + 545 + v14) = v16;
    unsigned __int16 v17 = *(_WORD *)(v5 + 760) + v16;
    *(_WORD *)(v5 + 760) = v17;
    ++v14;
  }
  while (v14 != 16);
  if (*(unsigned char *)(v5 + 544)) {
    BOOL v18 = v17 == 0;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LOWORD(v199) = 0;
    int v26 = &_os_log_internal;
    __int16 v27 = "AppleAVD: ERROR: vpsext->vps_splitting_flag && vpsext->vps_num_scalability_types == 0 ";
    goto LABEL_37;
  }
  if (*(unsigned __int8 *)(v5 + 544) < v17)
  {
    uint64_t v19 = 0;
    do
    {
      unint64_t v20 = *(void *)(a1 + 104);
      *(_DWORD *)(a1 + 164) += 3;
      unint64_t v21 = v20 >> 61;
      HEVC_RBSP::flush_bits(a1, 3);
      *(unsigned char *)(v5 + v19++ + 561) = v21;
    }
    while (*(unsigned __int16 *)(v5 + 760) - *(unsigned __int8 *)(v5 + 544) > (unsigned __int16)v19);
  }
  unint64_t v22 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v23 = v22 >> 63;
  uint64_t v24 = HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(v5 + 577) = v23;
  unsigned int v25 = *(_DWORD *)(a2 + 12);
  if (v25 > 0x3F)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v199 = 136316418;
      *(void *)uint64_t v200 = "parseVPSextension";
      *(_WORD *)&v200[8] = 1024;
      int v201 = 690;
      __int16 v202 = 2080;
      *(void *)uint64_t v203 = "vps->vps_max_layers_minus1";
      *(_WORD *)&v203[8] = 1024;
      unsigned int v204 = v25;
      __int16 v205 = 1024;
      int v206 = 0;
      __int16 v207 = 1024;
      int v208 = 63;
      int v26 = &_os_log_internal;
      __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_25;
    }
    return 0xFFFFFFFFLL;
  }
  if (v25)
  {
    int v31 = 1;
    unsigned __int16 v32 = 1;
    do
    {
      if (*(unsigned char *)(v5 + 577))
      {
        unint64_t v33 = *(void *)(a1 + 104);
        *(_DWORD *)(a1 + 164) += 6;
        unint64_t v34 = v33 >> 58;
        uint64_t v24 = HEVC_RBSP::flush_bits(a1, 6);
        uint64_t v35 = *(void *)(v5 + 512);
        uint64_t v36 = v32;
        *(unsigned char *)(v35 + 28 * v32 + 26) = v34;
        int v37 = *(char *)(v35 + 28 * v31 - 2);
        if ((int)v34 <= v37 || *(_DWORD *)(a2 + 4376) < v34)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          int v199 = 67109376;
          *(_DWORD *)uint64_t v200 = v34;
          *(_WORD *)&v200[4] = 1024;
          *(_DWORD *)&v200[6] = v37;
          int v26 = &_os_log_internal;
          __int16 v27 = "AppleAVD: ERROR : vps->vps_layer_id_in_nuh[i] %d, vps->vps_layer_id_in_nuh[i-1] %d";
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v36 = v32;
        *(unsigned char *)(*(void *)(v5 + 512) + 28 * v32 + 26) = v32;
        if (v32 >= 0x40u)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v199 = 136316418;
            *(void *)uint64_t v200 = "parseVPSextension";
            *(_WORD *)&v200[8] = 1024;
            int v201 = 709;
            __int16 v202 = 2080;
            *(void *)uint64_t v203 = "vpsext->vps_layers[i].vps_layer_id_in_nuh";
            *(_WORD *)&v203[8] = 1024;
            unsigned int v204 = (char)v32;
            __int16 v205 = 1024;
            int v206 = 0;
            __int16 v207 = 1024;
            int v208 = 63;
            int v26 = &_os_log_internal;
            __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
            goto LABEL_25;
          }
          return 0xFFFFFFFFLL;
        }
        LOBYTE(v34) = v32;
      }
      *(_WORD *)(v5 + 2 * v34 + 580) = v32;
      unsigned __int16 v38 = *(_WORD *)(v5 + 760);
      if (v38)
      {
        unint64_t v39 = 0;
        uint64_t v40 = v5 + 2810 + 16 * v36;
        do
        {
          if (!*(unsigned char *)(v5 + 544))
          {
            int v41 = *(unsigned __int8 *)(v5 + 561 + v39);
            unsigned int v42 = *(_DWORD *)(a1 + 108);
            *(_DWORD *)(a1 + 164) += v41 + 1;
            unsigned int v43 = v42 >> ~(_BYTE)v41;
            uint64_t v24 = HEVC_RBSP::flush_bits(a1, v41 + 1);
            *(unsigned char *)(v40 + v39) = v43;
            unsigned __int16 v38 = *(_WORD *)(v5 + 760);
          }
          ++v39;
        }
        while (v39 < v38);
      }
      int v31 = ++v32;
    }
    while (*(_DWORD *)(a2 + 12) >= v32);
  }
  if (!HEVC_RBSP::calcVPSNumViews(v24, a2)) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v44 = *(void *)(a1 + 104);
  *(_DWORD *)(a1 + 164) += 4;
  unint64_t v45 = v44 >> 60;
  uint64_t v46 = HEVC_RBSP::flush_bits(a1, 4);
  *(unsigned char *)(v5 + 578) = v45;
  uint64_t v47 = *(unsigned __int16 *)(v5 + 3834);
  if (v47 >= 0x41)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v199 = 136316418;
      *(void *)uint64_t v200 = "parseVPSextension";
      *(_WORD *)&v200[8] = 1024;
      int v201 = 733;
      __int16 v202 = 2080;
      *(void *)uint64_t v203 = "vpsext->vps_num_views";
      *(_WORD *)&v203[8] = 1024;
      unsigned int v204 = v47;
      __int16 v205 = 1024;
      int v206 = 0;
      __int16 v207 = 1024;
      int v208 = 64;
      int v26 = &_os_log_internal;
      __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_25;
    }
    return 0xFFFFFFFFLL;
  }
  if (v45)
  {
    if (*(_WORD *)(v5 + 3834))
    {
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      do
      {
        int v51 = *(unsigned __int8 *)(v5 + 578);
        unsigned int v52 = *(_DWORD *)(a1 + 108);
        *(_DWORD *)(a1 + 164) += v51;
        unsigned int v53 = v52 >> -(char)v51;
        uint64_t v46 = HEVC_RBSP::flush_bits(a1, v51);
        *(unsigned char *)(*(void *)(v5 + 512) + v49) = v53;
        ++v50;
        v49 += 28;
      }
      while (v50 < *(unsigned __int16 *)(v5 + 3834));
    }
  }
  else if (*(_WORD *)(v5 + 3834))
  {
    int v48 = *(unsigned char **)(v5 + 512);
    do
    {
      *int v48 = 0;
      v48 += 28;
      --v47;
    }
    while (v47);
  }
  unsigned __int16 v54 = 0;
  do
  {
    if (v54)
    {
      uint64_t v55 = 0;
      do
      {
        unint64_t v56 = *(void *)(a1 + 104);
        ++*(_DWORD *)(a1 + 164);
        unint64_t v57 = v56 >> 63;
        uint64_t v46 = HEVC_RBSP::flush_bits(a1, 1);
        *(unsigned char *)(*(void *)(*(void *)(v5 + 520) + 8 * v54) + v55 + 4) = v57;
        v55 += 14;
      }
      while (14 * v54 != v55);
    }
    ++v54;
  }
  while (*(_DWORD *)(a2 + 12) >= v54);
  uint64_t v58 = HEVC_RBSP::calcRefLayers(v46, a2);
  *(_WORD *)(v5 + 3838) = 0;
  if (*(unsigned __int16 *)(v5 + 3836) > 1u)
  {
    uint64_t v58 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
    *(_WORD *)(v5 + 3838) = v58;
    if ((v58 & 0xFC00) != 0)
    {
      unsigned __int16 v59 = v58;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v199 = 136316418;
        *(void *)uint64_t v200 = "parseVPSextension";
        *(_WORD *)&v200[8] = 1024;
        int v201 = 766;
        __int16 v202 = 2080;
        *(void *)uint64_t v203 = "vpsext->vps_num_add_layer_sets";
        *(_WORD *)&v203[8] = 1024;
        unsigned int v204 = v59;
        __int16 v205 = 1024;
        int v206 = 0;
        __int16 v207 = 1024;
        int v208 = 1023;
        int v26 = &_os_log_internal;
        __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
        goto LABEL_25;
      }
      return 0xFFFFFFFFLL;
    }
  }
  if ((HEVC_RBSP::calcLayerSetLayerIdList(v58, a2) & 1) == 0)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LOWORD(v199) = 0;
    int v26 = &_os_log_internal;
    __int16 v27 = "AppleAVD: ERROR: calcLayerSetLayerIdList ";
    goto LABEL_37;
  }
  int v60 = malloc_type_calloc(8uLL, *(unsigned __int16 *)(v5 + 3838), 0x4146F7D5uLL);
  *(void *)(v5 + 3840) = v60;
  if (!v60) {
    return 0xFFFFFFFFLL;
  }
  LOWORD(v61) = *(_WORD *)(v5 + 3838);
  if ((_WORD)v61)
  {
    unint64_t v62 = 0;
    do
    {
      uint64_t v63 = (uint64_t)malloc_type_calloc(2uLL, (*(_DWORD *)(a2 + 12) + 1), 0xEADD27B9uLL);
      *(void *)(*(void *)(v5 + 3840) + 8 * v62) = v63;
      if (!*(void *)(*(void *)(v5 + 3840) + 8 * v62)) {
        return 0xFFFFFFFFLL;
      }
      ++v62;
      unint64_t v61 = *(unsigned __int16 *)(v5 + 3838);
    }
    while (v62 < v61);
    if (*(_WORD *)(v5 + 3838))
    {
      unint64_t v64 = 0;
      do
      {
        if (*(unsigned __int16 *)(v5 + 3836) >= 2u)
        {
          uint64_t v65 = *(void *)(v5 + 512);
          unsigned int v66 = 1;
          do
          {
            unsigned int v67 = *(unsigned __int16 *)(v65 + 28 * v66 + 16);
            if (v67)
            {
              int v68 = 0;
              do
              {
                ++v68;
                BOOL v69 = v67 > 1;
                v67 >>= 1;
              }
              while (v69);
            }
            else
            {
              int v68 = 0;
            }
            uint64_t v70 = v66;
            unsigned int v71 = *(_DWORD *)(a1 + 108);
            *(_DWORD *)(a1 + 164) += v68;
            unsigned int v72 = v71 >> -(char)v68;
            uint64_t v63 = HEVC_RBSP::flush_bits(a1, v68);
            *(_WORD *)(*(void *)(*(void *)(v5 + 3840) + 8 * v64) + 2 * v70) = v72;
            uint64_t v65 = *(void *)(v5 + 512);
            unsigned int v73 = *(unsigned __int16 *)(v65 + 28 * v70 + 16);
            if ((unsigned __int16)v72 > v73)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                int v199 = 136316418;
                *(void *)uint64_t v200 = "parseVPSextension";
                *(_WORD *)&v200[8] = 1024;
                int v201 = 800;
                __int16 v202 = 2080;
                *(void *)uint64_t v203 = "vpsext->vps_highest_layer_idx_plus1[i][j]";
                *(_WORD *)&v203[8] = 1024;
                unsigned int v204 = (unsigned __int16)v72;
                __int16 v205 = 1024;
                int v206 = 0;
                __int16 v207 = 1024;
                int v208 = v73;
                int v26 = &_os_log_internal;
                __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
                goto LABEL_25;
              }
              return 0xFFFFFFFFLL;
            }
            unsigned int v66 = v70 + 1;
          }
          while ((int)v70 + 1 < *(unsigned __int16 *)(v5 + 3836));
        }
        LOBYTE(v63) = HEVC_RBSP::calcAddLayerSetLayerIdList(v63, a2, (unsigned __int16)v64);
        if (v63) {
          return 0xFFFFFFFFLL;
        }
        ++v64;
        unint64_t v61 = *(unsigned __int16 *)(v5 + 3838);
      }
      while (v64 < v61);
    }
  }
  *(_WORD *)(v5 + 3864) = *(_WORD *)(a2 + 4380) + v61 + 1;
  uint64_t v74 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(v5 + 712) = v74 < 0;
  if (v74 < 0)
  {
    unsigned __int16 v79 = 0;
    do
    {
      unint64_t v80 = *(void *)(a1 + 104);
      *(_DWORD *)(a1 + 164) += 3;
      unint64_t v81 = v80 >> 61;
      HEVC_RBSP::flush_bits(a1, 3);
      *(unsigned char *)(*(void *)(v5 + 512) + 28 * v79 + 24) = v81;
      unsigned int v82 = *(_DWORD *)(a2 + 16);
      if (v82 < v81)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v199 = 136316418;
          *(void *)uint64_t v200 = "parseVPSextension";
          *(_WORD *)&v200[8] = 1024;
          int v201 = 817;
          __int16 v202 = 2080;
          *(void *)uint64_t v203 = "vpsext->vps_layers[i].vps_sub_layers_vps_max_minus1";
          *(_WORD *)&v203[8] = 1024;
          unsigned int v204 = v81;
          __int16 v205 = 1024;
          int v206 = 0;
          __int16 v207 = 1024;
          int v208 = v82;
          int v26 = &_os_log_internal;
          __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
          goto LABEL_25;
        }
        return 0xFFFFFFFFLL;
      }
      ++v79;
    }
    while (*(_DWORD *)(a2 + 12) >= v79);
  }
  else
  {
    int v75 = 0;
    unsigned int v76 = *(_DWORD *)(a2 + 12);
    int v77 = *(_DWORD *)(a2 + 16);
    uint64_t v78 = *(void *)(v5 + 512);
    do
      *(unsigned char *)(v78 + 28 * (unsigned __int16)v75++ + 24) = v77;
    while (v76 >= (unsigned __int16)v75);
  }
  uint64_t v83 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(v5 + 713) = v83 < 0;
  if (v83 < 0)
  {
    unsigned int v84 = *(_DWORD *)(a2 + 12);
    if (v84)
    {
      int v85 = 0;
      do
      {
        int v86 = v85 + 1;
        if (v84 >= (unsigned __int16)(v85 + 1))
        {
          uint64_t v87 = (unsigned __int16)v85;
          uint64_t v88 = *(void *)(v5 + 520);
          unsigned __int16 v89 = v86;
          do
          {
            unsigned int v90 = v89;
            if (*(unsigned char *)(*(void *)(v88 + 8 * v89) + 14 * v87 + 4))
            {
              unint64_t v91 = *(void *)(a1 + 104);
              *(_DWORD *)(a1 + 164) += 3;
              unint64_t v92 = v91 >> 61;
              HEVC_RBSP::flush_bits(a1, 3);
              uint64_t v88 = *(void *)(v5 + 520);
              *(unsigned char *)(*(void *)(v88 + 8 * v87) + 14 * v90) = v92;
              unsigned int v84 = *(_DWORD *)(a2 + 12);
            }
            unsigned __int16 v89 = v90 + 1;
          }
          while (v84 >= (unsigned __int16)(v90 + 1));
        }
        int v85 = v86;
      }
      while (v84 > (unsigned __int16)v86);
    }
  }
  uint64_t v93 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(v5 + 714) = v93 < 0;
  unsigned int v94 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
  unsigned int v95 = v94;
  *(_DWORD *)(v5 + 708) = v94;
  if (v94 >= 0x40)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v199 = 136316418;
      *(void *)uint64_t v200 = "parseVPSextension";
      *(_WORD *)&v200[8] = 1024;
      int v201 = 843;
      __int16 v202 = 2080;
      *(void *)uint64_t v203 = "vpsext->vps_num_profile_tier_level_minus1";
      *(_WORD *)&v203[8] = 1024;
      unsigned int v204 = v95;
      __int16 v205 = 1024;
      int v206 = 0;
      __int16 v207 = 1024;
      int v208 = 63;
      int v26 = &_os_log_internal;
      __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_25;
    }
    return 0xFFFFFFFFLL;
  }
  if (v94 <= 1 && *(_DWORD *)(a2 + 12)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v96 = (uint64_t)malloc_type_calloc(1uLL, v94 + 1, 0xEFFCEB36uLL);
  *(void *)(v5 + 720) = v96;
  if (!v96) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v97 = 1;
  if (*(_DWORD *)(a2 + 12))
  {
    if (*(unsigned char *)(a2 + 9)) {
      unsigned int v97 = 2;
    }
    else {
      unsigned int v97 = 1;
    }
  }
  if (*(_DWORD *)(v5 + 708) >= v97)
  {
    do
    {
      uint64_t v98 = *(void *)(a1 + 104);
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      *(unsigned char *)(*(void *)(v5 + 720) + (unsigned __int16)v97) = v98 < 0;
      int v99 = malloc_type_calloc(0xDF8uLL, 1uLL, 0xF693F949uLL);
      *(void *)(v5 + 8 * v97) = v99;
      if (!v99) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v96 = HEVC_RBSP::parseProfileTierLevel((HEVC_RBSP *)a1, (uint64_t)v99, *(unsigned __int8 *)(*(void *)(v5 + 720) + (unsigned __int16)v97++), *(_DWORD *)(a2 + 16));
    }
    while (*(_DWORD *)(v5 + 708) >= (unsigned __int16)v97);
  }
  *(_WORD *)(v5 + 728) = 0;
  unsigned int v100 = *(unsigned __int16 *)(v5 + 3864);
  if (v100 < 2)
  {
    __int16 v103 = 0;
  }
  else
  {
    unsigned __int16 v101 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
    *(_WORD *)(v5 + 728) = v101;
    if ((v101 & 0xFC00) != 0)
    {
      unsigned __int16 v102 = v101;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v199 = 136316418;
        *(void *)uint64_t v200 = "parseVPSextension";
        *(_WORD *)&v200[8] = 1024;
        int v201 = 880;
        __int16 v202 = 2080;
        *(void *)uint64_t v203 = "vpsext->vps_num_add_olss";
        *(_WORD *)&v203[8] = 1024;
        unsigned int v204 = v102;
        __int16 v205 = 1024;
        int v206 = 0;
        __int16 v207 = 1024;
        int v208 = 1023;
        int v26 = &_os_log_internal;
        __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
        goto LABEL_25;
      }
      return 0xFFFFFFFFLL;
    }
    unint64_t v104 = *(void *)(a1 + 104);
    *(_DWORD *)(a1 + 164) += 2;
    unint64_t v105 = v104 >> 62;
    uint64_t v96 = HEVC_RBSP::flush_bits(a1, 2);
    if (v105 == 3) {
      __int16 v106 = 2;
    }
    else {
      __int16 v106 = v105;
    }
    *(_WORD *)(v5 + 730) = v106;
    __int16 v103 = *(_WORD *)(v5 + 728);
    LOWORD(v100) = *(_WORD *)(v5 + 3864);
  }
  unsigned __int16 v107 = v100 + v103;
  *(_WORD *)(v5 + 3866) = v100 + v103;
  if ((unsigned __int16)(v100 + v103) >= 0xC01u)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v199 = 136316418;
      *(void *)uint64_t v200 = "parseVPSextension";
      *(_WORD *)&v200[8] = 1024;
      int v201 = 886;
      __int16 v202 = 2080;
      *(void *)uint64_t v203 = "vpsext->vps_num_output_layer_sets";
      *(_WORD *)&v203[8] = 1024;
      unsigned int v204 = v107;
      __int16 v205 = 1024;
      int v206 = 0;
      __int16 v207 = 1024;
      int v208 = 3072;
      int v26 = &_os_log_internal;
      __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_25;
    }
    return 0xFFFFFFFFLL;
  }
  if (!HEVC_RBSP::allocTargetLayerIdLists(v96, a2)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v108 = malloc_type_calloc(0xCuLL, *(unsigned __int16 *)(v5 + 3866), 0xC8D505FEuLL);
  *(void *)(v5 + 528) = v108;
  if (!v108) {
    return 0xFFFFFFFFLL;
  }
  int v109 = (unsigned char **)malloc_type_calloc(8uLL, *(unsigned __int16 *)(v5 + 3866), 0x653D5DB8uLL);
  *(void *)(v5 + 536) = v109;
  if (!v109) {
    return 0xFFFFFFFFLL;
  }
  if (*(_WORD *)(v5 + 3866))
  {
    unint64_t v110 = 0;
    do
    {
      int v109 = (unsigned char **)malloc_type_calloc(8uLL, (*(_DWORD *)(a2 + 12) + 1), 0x2D93643FuLL);
      *(void *)(*(void *)(v5 + 536) + 8 * v110) = v109;
      int v111 = *(unsigned char ***)(v5 + 536);
      if (!v111[v110]) {
        return 0xFFFFFFFFLL;
      }
      ++v110;
    }
    while (v110 < *(unsigned __int16 *)(v5 + 3866));
  }
  else
  {
    int v111 = v109;
  }
  BOOL v112 = HEVC_RBSP::calcOutputLayerFlag((uint64_t)v109, a2, 0, 0);
  **int v111 = v112;
  *(_DWORD *)(*(void *)(v5 + 528) + 8) = -1;
  HEVC_RBSP::calcNecessaryLayerFlags(v112, a2, 0);
  HEVC_RBSP::calcTargetLayerIdList(v113, a2, 0);
  if (!**(_WORD **)(v5 + 3896))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v199 = 136315138;
      *(void *)uint64_t v200 = "parseVPSextension";
      int v26 = &_os_log_internal;
      __int16 v27 = "AppleAVD: %s: vpsext->vps_num_target_opt_layer_id_lists[0] == 0\n";
      uint32_t v28 = 12;
      goto LABEL_38;
    }
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a2 + 8)) {
    *(_DWORD *)(**(void **)(v5 + 536) + 4) = *(_DWORD *)(a2 + 12) != 0;
  }
  if (*(unsigned __int16 *)(v5 + 3866) < 2u)
  {
LABEL_201:
    unsigned int v139 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
    unsigned int v140 = v139;
    *(_DWORD *)(v5 + 3904) = v139;
    if (v139 < 0x100)
    {
      int v141 = malloc_type_calloc(0x30uLL, v139 + 1, 0xF5DD17CAuLL);
      *(void *)(v5 + 736) = v141;
      if (v141)
      {
        uint64_t v143 = 0;
        unint64_t v144 = 0;
        while (1)
        {
          uint64_t v145 = *(void *)(v5 + 736);
          uint64_t v146 = v145 + v143;
          uint64_t v147 = v145 + 48 * (v144 - 1);
          unint64_t v148 = v144 ? v147 : 0;
          if (HEVC_RBSP::parseRepformat(a1, v142, v144, v146, v148)) {
            break;
          }
          unint64_t v149 = *(unsigned int *)(v5 + 3904);
          v143 += 48;
          BOOL v117 = v144++ >= v149;
          if (v117)
          {
            if (v149)
            {
              uint64_t v150 = *(void *)(a1 + 104);
              ++*(_DWORD *)(a1 + 164);
              HEVC_RBSP::flush_bits(a1, 1);
              unint64_t v151 = (unint64_t)v150 >> 63;
              *(unsigned char *)(v5 + 744) = v150 < 0;
            }
            else
            {
              LODWORD(v151) = *(unsigned __int8 *)(v5 + 744);
            }
            if (v151)
            {
              unsigned int v153 = *(_DWORD *)(v5 + 3904);
              if (v153)
              {
                int v154 = 0;
                do
                {
                  ++v154;
                  BOOL v69 = v153 > 1;
                  v153 >>= 1;
                }
                while (v69);
              }
              else
              {
                int v154 = 0;
              }
              int v167 = *(unsigned __int8 *)(a2 + 8);
              if (*(_DWORD *)(a2 + 12)) {
                BOOL v168 = 1;
              }
              else {
                BOOL v168 = v167 == 0;
              }
              if (v168)
              {
                BOOL v18 = v167 == 0;
                BOOL v169 = v167 != 0;
                if (v18) {
                  unint64_t v170 = -1;
                }
                else {
                  unint64_t v170 = 0;
                }
                uint64_t v171 = 28 * v169 + 4;
                do
                {
                  unsigned int v172 = *(_DWORD *)(a1 + 108);
                  *(_DWORD *)(a1 + 164) += v154;
                  unsigned int v173 = v172 >> (32 - v154);
                  HEVC_RBSP::flush_bits(a1, v154);
                  *(_DWORD *)(*(void *)(v5 + 512) + v171) = v173;
                  ++v170;
                  v171 += 28;
                }
                while (v170 < *(unsigned int *)(a2 + 12));
              }
            }
            else
            {
              int v155 = *(_DWORD *)(a2 + 12);
              if (v155 || !*(unsigned char *)(a2 + 8))
              {
                unint64_t v156 = 0;
                BOOL v157 = *(unsigned __int8 *)(a2 + 8) != 0;
                BOOL v158 = (v155 + 1) - v157;
                uint64x2_t v159 = (uint64x2_t)vdupq_n_s64(v158 - 1);
                uint64_t v160 = (const float *)(v5 + 3904);
                unint64_t v161 = (v158 + 1) & 0xFFFFFFFFFFFFFFFELL;
                int32x2_t v162 = vadd_s32(vdup_n_s32(v157), (int32x2_t)0x100000000);
                uint32x2_t v163 = (uint32x2_t)vld1_dup_f32(v160);
                uint64_t v164 = (_DWORD *)(*(void *)(v5 + 512) + 28 * v157 + 32);
                do
                {
                  int32x2_t v165 = vmovn_s64((int64x2_t)vcgeq_u64(v159, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v156), (int8x16_t)xmmword_223ADA980)));
                  uint32x2_t v166 = vmin_u32((uint32x2_t)v162, v163);
                  if (v165.i8[0]) {
                    *(v164 - 7) = v166.i32[0];
                  }
                  if (v165.i8[4]) {
                    *uint64_t v164 = v166.i32[1];
                  }
                  v156 += 2;
                  int32x2_t v162 = vadd_s32(v162, (int32x2_t)0x200000002);
                  v164 += 14;
                }
                while (v161 != v156);
              }
            }
            uint64_t v174 = *(void *)(a1 + 104);
            ++*(_DWORD *)(a1 + 164);
            HEVC_RBSP::flush_bits(a1, 1);
            *(unsigned char *)(v5 + 745) = v174 < 0;
            uint64_t v175 = *(void *)(a1 + 104);
            ++*(_DWORD *)(a1 + 164);
            HEVC_RBSP::flush_bits(a1, 1);
            *(unsigned char *)(v5 + 746) = v175 < 0;
            unint64_t v176 = *(unsigned int *)(a2 + 12);
            if (v176)
            {
              uint64_t v177 = 0;
              unint64_t v178 = 0;
              uint64_t v179 = *(void *)(v5 + 512);
              do
              {
                if (!*(_WORD *)(v179 + v177 + 46))
                {
                  uint64_t v180 = *(void *)(a1 + 104);
                  ++*(_DWORD *)(a1 + 164);
                  HEVC_RBSP::flush_bits(a1, 1);
                  uint64_t v179 = *(void *)(v5 + 512);
                  *(unsigned char *)(v179 + v177 + 53) = v180 < 0;
                  unint64_t v176 = *(unsigned int *)(a2 + 12);
                }
                ++v178;
                v177 += 28;
              }
              while (v178 < v176);
            }
            if ((HEVC_RBSP::parseVPSDpbSize(a1, a2) & 1) == 0) {
              return 0xFFFFFFFFLL;
            }
            *(_WORD *)(v5 + 748) = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
            uint64_t v181 = *(void *)(a1 + 104);
            ++*(_DWORD *)(a1 + 164);
            HEVC_RBSP::flush_bits(a1, 1);
            *(unsigned char *)(v5 + 750) = v181 < 0;
            if (v181 < 0)
            {
              int v182 = *(unsigned __int16 *)(v5 + 748);
              unsigned int v183 = *(_DWORD *)(a1 + 108);
              *(_DWORD *)(a1 + 164) += v182 + 2;
              unsigned int v184 = v183 >> (30 - v182);
              HEVC_RBSP::flush_bits(a1, v182 + 2);
              *(_WORD *)(v5 + 752) = v184;
            }
            if (*(unsigned char *)(a2 + 8)) {
              unint64_t v185 = 1;
            }
            else {
              unint64_t v185 = 2;
            }
            unsigned int v186 = *(_DWORD *)(a2 + 12);
            if (v185 <= v186)
            {
              do
              {
                unint64_t v187 = *(unsigned char *)(a2 + 8) == 0;
                if (v185 > v187)
                {
                  uint64_t v188 = *(void *)(v5 + 520);
                  uint64_t v189 = 14 * v187;
                  do
                  {
                    uint64_t v190 = *(void *)(v188 + 8 * v185);
                    if (*(unsigned char *)(v190 + v189 + 4))
                    {
                      if (*(unsigned char *)(v5 + 750))
                      {
                        LOWORD(v191) = *(_WORD *)(v5 + 752);
                      }
                      else
                      {
                        int v192 = *(unsigned __int16 *)(v5 + 748);
                        unsigned int v193 = *(_DWORD *)(a1 + 108);
                        *(_DWORD *)(a1 + 164) += v192 + 2;
                        unsigned int v191 = v193 >> (30 - v192);
                        HEVC_RBSP::flush_bits(a1, v192 + 2);
                        uint64_t v188 = *(void *)(v5 + 520);
                        uint64_t v190 = *(void *)(v188 + 8 * v185);
                      }
                      *(_WORD *)(v190 + v189 + 2) = v191;
                    }
                    ++v187;
                    v189 += 14;
                  }
                  while (v187 < v185);
                  unsigned int v186 = *(_DWORD *)(a2 + 12);
                }
                BOOL v117 = v185++ >= v186;
              }
              while (!v117);
            }
            unsigned __int16 v194 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
            *(_WORD *)(v5 + 754) = v194;
            unsigned int v195 = v194;
            if (v194 <= 0x1000u)
            {
              if (v194 >= 2u)
              {
                unsigned int v196 = 1;
                do
                {
                  __int16 v197 = *(unsigned __int8 *)(a1 + 111);
                  *(_DWORD *)(a1 + 164) += 8;
                  HEVC_RBSP::flush_bits(a1, 8);
                  *(_WORD *)(v5 + 756) = v197;
                  ++v196;
                }
                while (v196 < *(unsigned __int16 *)(v5 + 754));
              }
              uint64_t v198 = *(void *)(a1 + 104);
              ++*(_DWORD *)(a1 + 164);
              HEVC_RBSP::flush_bits(a1, 1);
              uint64_t result = 0;
              *(unsigned char *)(v5 + 758) = v198 < 0;
              *(unsigned char *)(v5 + 759) = 0;
              return result;
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            int v199 = 136316418;
            *(void *)uint64_t v200 = "parseVPSextension";
            *(_WORD *)&v200[8] = 1024;
            int v201 = 1105;
            __int16 v202 = 2080;
            *(void *)uint64_t v203 = "vpsext->vps_non_vui_extension_length";
            *(_WORD *)&v203[8] = 1024;
            unsigned int v204 = v195;
            __int16 v205 = 1024;
            int v206 = 0;
            __int16 v207 = 1024;
            int v208 = 4096;
            int v26 = &_os_log_internal;
            __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
            goto LABEL_25;
          }
        }
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v199 = 136316418;
      *(void *)uint64_t v200 = "parseVPSextension";
      *(_WORD *)&v200[8] = 1024;
      int v201 = 1016;
      __int16 v202 = 2080;
      *(void *)uint64_t v203 = "vpsext->vps_num_rep_formats_minus1";
      *(_WORD *)&v203[8] = 1024;
      unsigned int v204 = v140;
      __int16 v205 = 1024;
      int v206 = 0;
      __int16 v207 = 1024;
      int v208 = 255;
      int v26 = &_os_log_internal;
      __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_25;
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t v115 = 1;
  while (1)
  {
    unint64_t v116 = *(unsigned __int16 *)(v5 + 3864);
    BOOL v117 = v116 >= 3 && v115 >= v116;
    if (v117)
    {
      int v118 = 0;
      unsigned int v119 = v116 - 2;
      do
      {
        --v118;
        BOOL v69 = v119 > 1;
        v119 >>= 1;
      }
      while (v69);
      unsigned int v120 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) -= v118;
      int v121 = v120 >> v118;
      uint64_t v114 = HEVC_RBSP::flush_bits(a1, -v118);
      *(_DWORD *)(*(void *)(v5 + 528) + 12 * v115 + 8) = v121;
      if (v121 < 0 || v121 > *(unsigned __int16 *)(v5 + 3864) - 2)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v152 = *(unsigned __int16 *)(v5 + 3864) - 2;
          int v199 = 136316418;
          *(void *)uint64_t v200 = "parseVPSextension";
          *(_WORD *)&v200[8] = 1024;
          int v201 = 942;
          __int16 v202 = 2080;
          *(void *)uint64_t v203 = "vpsext->vps_ols[i].vps_layer_set_idx_for_ols_minus1";
          *(_WORD *)&v203[8] = 1024;
          unsigned int v204 = v121;
          __int16 v205 = 1024;
          int v206 = 0;
          __int16 v207 = 1024;
          int v208 = v152;
          int v26 = &_os_log_internal;
          __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
          goto LABEL_25;
        }
        return 0xFFFFFFFFLL;
      }
    }
    uint64_t v122 = *(void *)(a2 + 4448);
    int v123 = v115;
    if (v115 >= *(unsigned __int16 *)(v122 + 3864)) {
      int v123 = *(_DWORD *)(*(void *)(v122 + 528) + 12 * v115 + 8) + 1;
    }
    uint64_t v124 = *(unsigned __int16 *)(*(void *)(v5 + 3856) + 2 * v123);
    if (v124 >= 0x41) {
      break;
    }
    if (v115 > *(unsigned int *)(a2 + 4380) || *(_WORD *)(v5 + 730) == 2)
    {
      if (*(_WORD *)(*(void *)(v5 + 3856) + 2 * v123))
      {
        uint64_t v125 = 0;
        LODWORD(v126) = 0;
        while (1)
        {
          uint64_t v127 = *(void *)(a1 + 104);
          ++*(_DWORD *)(a1 + 164);
          uint64_t v114 = HEVC_RBSP::flush_bits(a1, 1);
          *(unsigned char *)(*(void *)(*(void *)(v5 + 536) + 8 * v115) + v125) = v127 < 0;
          if (v124 == 2 && (v127 & 0x8000000000000000) == 0) {
            break;
          }
          LODWORD(v126) = v126 + 1;
          v125 += 8;
          if (8 * v124 == v125) {
            goto LABEL_185;
          }
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_219;
      }
    }
    else if (*(_WORD *)(*(void *)(v5 + 3856) + 2 * v123))
    {
      unint64_t v126 = 0;
      uint64_t v128 = *(unsigned char **)(*(void *)(v5 + 536) + 8 * v115);
      while (1)
      {
        uint64_t v114 = HEVC_RBSP::calcOutputLayerFlag(v114, a2, v115, v126);
        *uint64_t v128 = v114;
        if (v124 == 2 && v126 <= 1 && (v114 & 1) == 0) {
          break;
        }
        ++v126;
        v128 += 8;
        if (v124 == v126) {
          goto LABEL_185;
        }
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
LABEL_219:
      int v199 = 136315906;
      *(void *)uint64_t v200 = "parseVPSextension";
      *(_WORD *)&v200[8] = 1024;
      int v201 = 2;
      __int16 v202 = 1024;
      *(_DWORD *)uint64_t v203 = v115;
      *(_WORD *)&v203[4] = 1024;
      *(_DWORD *)&v203[6] = v126;
      int v26 = &_os_log_internal;
      __int16 v27 = "AppleAVD: ERROR: %s: numLayersInIdList=%d, vps_ols_2d[%d][%d].vps_output_layer_flag == 0\n";
      uint32_t v28 = 30;
      goto LABEL_38;
    }
LABEL_185:
    HEVC_RBSP::calcNecessaryLayerFlags(v114, a2, v115);
    HEVC_RBSP::calcTargetLayerIdList(v129, a2, v115);
    int v130 = *(unsigned __int16 *)(*(void *)(v5 + 3896) + 2 * v115);
    if (!*(_WORD *)(*(void *)(v5 + 3896) + 2 * v115))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v199 = 136315394;
        *(void *)uint64_t v200 = "parseVPSextension";
        *(_WORD *)&v200[8] = 1024;
        int v201 = v115;
        int v26 = &_os_log_internal;
        __int16 v27 = "AppleAVD: %s: vpsext->vps_num_target_opt_layer_id_lists[%d] == 0\n";
        uint32_t v28 = 18;
        goto LABEL_38;
      }
      return 0xFFFFFFFFLL;
    }
    if (v124)
    {
      for (uint64_t i = 0; i != v124; ++i)
      {
        if (*(unsigned char *)(*(void *)(*(void *)(v5 + 536) + 8 * v115) + 8 * i + 1))
        {
          unsigned int v132 = *(_DWORD *)(v5 + 708);
          if (!v132) {
            goto LABEL_194;
          }
          int v133 = 0;
          do
          {
            --v133;
            BOOL v69 = v132 > 1;
            v132 >>= 1;
          }
          while (v69);
          unsigned int v134 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) -= v133;
          unsigned int v135 = v134 >> v133;
          uint64_t v114 = HEVC_RBSP::flush_bits(a1, -v133);
          uint64_t v136 = *(void *)(*(void *)(v5 + 536) + 8 * v115) + 8 * i;
          *(_DWORD *)(v136 + 4) = v135;
          if (*(unsigned char *)(v136 + 1))
          {
            if (!*(_DWORD *)(v5 + 708)) {
LABEL_194:
            }
              uint64_t v114 = HEVC_RBSP::flush_bits(a1, 0);
          }
        }
      }
      int v130 = *(unsigned __int16 *)(*(void *)(v5 + 3896) + 2 * v115);
    }
    if (v130 == 1)
    {
      uint64_t v137 = *(void *)(v5 + 512);
      uint64_t v114 = HEVC_RBSP::calcOlshighestOutputLayerId(v114, a2, v115);
      if (*(_WORD *)(v137 + 28 * *(unsigned __int16 *)(v5 + 2 * v114 + 580) + 18))
      {
        uint64_t v138 = *(void *)(a1 + 104);
        ++*(_DWORD *)(a1 + 164);
        uint64_t v114 = HEVC_RBSP::flush_bits(a1, 1);
        *(unsigned char *)(*(void *)(v5 + 528) + 12 * v115) = v138 < 0;
      }
    }
    if (++v115 >= *(unsigned __int16 *)(v5 + 3866)) {
      goto LABEL_201;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v199 = 136316418;
    *(void *)uint64_t v200 = "parseVPSextension";
    *(_WORD *)&v200[8] = 1024;
    int v201 = 947;
    __int16 v202 = 2080;
    *(void *)uint64_t v203 = "numLayersInIdList";
    *(_WORD *)&v203[8] = 1024;
    unsigned int v204 = v124;
    __int16 v205 = 1024;
    int v206 = 0;
    __int16 v207 = 1024;
    int v208 = 64;
    int v26 = &_os_log_internal;
    __int16 v27 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
LABEL_25:
    uint32_t v28 = 46;
LABEL_38:
    _os_log_impl(&dword_223977000, v26, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)&v199, v28);
  }
  return 0xFFFFFFFFLL;
}

BOOL HEVC_RBSP::calcVPSNumViews(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 4448);
  *(_WORD *)(v3 + 3834) = 1;
  unint64_t v4 = *(unsigned int *)(a2 + 12);
  uint64_t v5 = (v4 + 1);
  uint64_t v6 = *(void *)(v3 + 512);
  uint64_t v7 = v3 + 762;
  uint64_t v8 = v3 + 545;
  do
  {
    uint64_t v9 = 0;
    int v10 = 0;
    do
    {
      __int16 v11 = *(unsigned __int8 *)(v8 + v9);
      if (*(unsigned char *)(v8 + v9))
      {
        uint64_t v12 = v3 + 16 * v2 + v10++;
        __int16 v11 = *(unsigned __int8 *)(v12 + 2810);
      }
      *(_WORD *)(v7 + 2 * v9++) = v11;
    }
    while (v9 != 16);
    unint64_t v13 = (_WORD *)(v3 + 32 * v2);
    uint64_t v14 = (_WORD *)(v6 + 28 * v2);
    v14[4] = v13[381];
    int v15 = (unsigned __int16)v13[382];
    v14[5] = v15;
    v14[6] = v13[383];
    v14[7] = v13[384];
    if (v2)
    {
      char v16 = 1;
      uint64_t v17 = v2;
      BOOL v18 = (unsigned __int16 *)(v6 + 10);
      do
      {
        int v19 = *v18;
        v18 += 14;
        v16 &= v15 != v19;
        --v17;
      }
      while (v17);
      if (v16) {
        ++*(_WORD *)(v3 + 3834);
      }
    }
    ++v2;
    v7 += 32;
  }
  while (v2 != v5);
  uint64_t v20 = *(void *)(v3 + 512);
  unsigned int v21 = *(unsigned __int16 *)(v3 + 3834);
  if (*(unsigned __int16 *)(v20 + 10) >= v21)
  {
    BOOL v26 = 0;
LABEL_18:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 136315138;
      int v29 = "calcVPSNumViews";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s: vps_view_order_idx >= vps_num_views\n", (uint8_t *)&v28, 0xCu);
    }
  }
  else
  {
    unint64_t v22 = 0;
    unint64_t v23 = (unsigned __int16 *)(v20 + 38);
    uint64_t v24 = v5 - 1;
    while (v24 != v22)
    {
      unsigned int v25 = *v23;
      v23 += 14;
      ++v22;
      if (v25 >= v21)
      {
        BOOL v26 = v22 - 1 >= v4;
        goto LABEL_18;
      }
    }
    return v22 >= v4;
  }
  return v26;
}

uint64_t HEVC_RBSP::calcRefLayers(uint64_t a1, uint64_t a2)
{
  __int16 v2 = 0;
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 4448);
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  uint64_t v5 = *(void *)(v3 + 520);
  do
  {
    __int16 v6 = 0;
    uint64_t v7 = *(void *)(v5 + 8 * v2);
    do
    {
      uint64_t v8 = v7 + 14 * v6;
      *(unsigned char *)(v8 + 5) = *(unsigned char *)(v8 + 4) != 0;
      uint64_t v9 = (unsigned char *)(v8 + 5);
      if (v2 >= 1)
      {
        LOBYTE(v10) = 0;
        do
        {
          uint64_t v10 = (char)v10;
          if (*(unsigned char *)(v7 + 14 * (char)v10 + 4) && *(unsigned char *)(*(void *)(v5 + 8 * v10) + 14 * v6 + 5)) {
            *uint64_t v9 = 1;
          }
          LOBYTE(v10) = v10 + 1;
        }
        while (v2 > (char)v10);
      }
      ++v6;
    }
    while (v4 >= v6);
    ++v2;
  }
  while (v4 >= v2);
  __int16 v11 = 0;
  uint64_t v12 = *(void *)(v3 + 512);
  do
  {
    LOWORD(v13) = 0;
    __int16 v14 = 0;
    __int16 v15 = 0;
    __int16 v16 = 0;
    uint64_t v17 = *(void *)(v5 + 8 * v11);
    do
    {
      uint64_t v13 = (__int16)v13;
      __int16 v18 = *(char *)(v12 + 28 * (__int16)v13 + 26);
      if (*(unsigned char *)(v17 + 14 * (__int16)v13 + 4))
      {
        int v19 = v16++;
        *(_WORD *)(v17 + 14 * v19 + 6) = v18;
      }
      if (*(unsigned char *)(v17 + 14 * (int)v13 + 5))
      {
        int v20 = v15++;
        *(_WORD *)(v17 + 14 * v20 + 8) = v18;
      }
      if (*(unsigned char *)(*(void *)(v5 + 8 * v13) + 14 * v11 + 5))
      {
        int v21 = v14++;
        *(_WORD *)(v17 + 14 * v21 + 10) = v18;
      }
      LOWORD(v13) = v13 + 1;
    }
    while (v4 >= (__int16)v13);
    unint64_t v22 = (_WORD *)(v12 + 28 * v11);
    v22[9] = v16;
    v22[10] = v15;
    v22[11] = v14;
    ++v11;
  }
  while (v4 >= v11);
  LOWORD(v23) = 0;
  __int16 v24 = 0;
  memset(v35, 0, sizeof(v35));
  do
  {
    uint64_t v23 = (__int16)v23;
    uint64_t result = *(unsigned __int16 *)(v12 + 28 * (__int16)v23 + 18);
    if (!*(_WORD *)(v12 + 28 * (__int16)v23 + 18))
    {
      uint64_t v26 = v12 + 28 * (int)v23;
      int v27 = v24;
      uint64_t v28 = *(void *)(v5 + 8 * v24);
      *(_WORD *)(v28 + 12) = *(char *)(v26 + 26);
      int v29 = *(unsigned __int16 *)(v26 + 22);
      if (*(_WORD *)(v26 + 22))
      {
        __int16 v30 = 0;
        uint64_t v31 = *(void *)(v5 + 8 * v23);
        __int16 v32 = 1;
        do
        {
          uint64_t v33 = *(unsigned __int16 *)(v31 + 14 * v30 + 10);
          if (!*((unsigned char *)v35 + v33))
          {
            int v34 = v32++;
            *(_WORD *)(v28 + 14 * v34 + 12) = v33;
            *((unsigned char *)v35 + v33) = 1;
          }
          ++v30;
        }
        while (v29 > v30);
      }
      else
      {
        __int16 v32 = 1;
      }
      ++v24;
      uint64_t result = v12 + 28 * v27;
      *(_WORD *)(result + 16) = v32;
    }
    LOWORD(v23) = v23 + 1;
  }
  while (v4 >= (__int16)v23);
  *(_WORD *)(v3 + 3836) = v24;
  return result;
}

uint64_t HEVC_RBSP::calcLayerSetLayerIdList(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 4448);
  unsigned int v4 = malloc_type_calloc(2uLL, *(_DWORD *)(a2 + 4380) + *(unsigned __int16 *)(v3 + 3838) + 1, 0x8AF2848FuLL);
  *(void *)(v3 + 3856) = v4;
  if (!v4)
  {
    BOOL v17 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v17) {
      return result;
    }
    LOWORD(v25) = 0;
    __int16 v18 = &_os_log_internal;
    int v19 = "AppleAVD: ERROR: vpsext->vps_num_layers_in_id_list bad alloc ";
LABEL_22:
    uint32_t v22 = 2;
LABEL_23:
    _os_log_impl(&dword_223977000, v18, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v25, v22);
    return 0;
  }
  uint64_t v5 = malloc_type_calloc(8uLL, *(_DWORD *)(a2 + 4380) + *(unsigned __int16 *)(v3 + 3838) + 1, 0x52A5FA90uLL);
  *(void *)(v3 + 3848) = v5;
  if (!v5)
  {
    BOOL v20 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v20) {
      return result;
    }
    LOWORD(v25) = 0;
    __int16 v18 = &_os_log_internal;
    int v19 = "AppleAVD: ERROR: vpsext->vps_layer_set_layer_id_list bad alloc ";
    goto LABEL_22;
  }
  unsigned __int16 v6 = 0;
  do
  {
    *(void *)(*(void *)(v3 + 3848) + 8 * v6) = malloc_type_malloc(2 * (*(_DWORD *)(a2 + 4376) + 1), 0x1000040BDFB0063uLL);
    uint64_t v7 = *(_WORD ***)(v3 + 3848);
    if (!v7[v6])
    {
      BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v21) {
        return result;
      }
      LOWORD(v25) = 0;
      __int16 v18 = &_os_log_internal;
      int v19 = "AppleAVD: ERROR: vpsext->vps_layer_set_layer_id_list[m] bad alloc ";
      goto LABEL_22;
    }
    ++v6;
    unsigned int v8 = *(_DWORD *)(a2 + 4380);
  }
  while (v8 >= v6);
  uint64_t v9 = *(_WORD **)(v3 + 3856);
  uint64_t result = 1;
  *uint64_t v9 = 1;
  **uint64_t v7 = 0;
  if (v8)
  {
    unsigned int v11 = *(_DWORD *)(a2 + 4376);
    uint64_t v12 = *(void *)(a2 + 4384);
    unsigned __int16 v13 = 1;
    while (1)
    {
      unsigned __int16 v14 = 0;
      unsigned __int16 v15 = 0;
      uint64_t v16 = *(void *)(v12 + 8 * v13);
      do
      {
        if (*(unsigned char *)(v16 + v14)) {
          v7[v13][v15++] = v14;
        }
        v9[v13] = v15;
        ++v14;
      }
      while (v11 >= v14);
      if (!v15 || *(_DWORD *)(a2 + 12) + 1 < v15) {
        break;
      }
      if (v8 < ++v13) {
        return 1;
      }
    }
    BOOL v23 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v23)
    {
      int v24 = *(_DWORD *)(a2 + 12) + 1;
      int v25 = 136316418;
      uint64_t v26 = "calcLayerSetLayerIdList";
      __int16 v27 = 1024;
      int v28 = 1484;
      __int16 v29 = 2080;
      __int16 v30 = "vpsext->vps_num_layers_in_id_list[i]";
      __int16 v31 = 1024;
      int v32 = v15;
      __int16 v33 = 1024;
      int v34 = 1;
      __int16 v35 = 1024;
      int v36 = v24;
      __int16 v18 = &_os_log_internal;
      int v19 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      uint32_t v22 = 46;
      goto LABEL_23;
    }
  }
  return result;
}

BOOL HEVC_RBSP::calcAddLayerSetLayerIdList(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unsigned int v5 = *(_DWORD *)(a2 + 4380) + 1 + a3;
  uint64_t v6 = *(void *)(a2 + 4448);
  uint64_t v7 = malloc_type_malloc(2 * (*(_DWORD *)(a2 + 4380) + 1), 0x1000040BDFB0063uLL);
  uint64_t v8 = (unsigned __int16)v5;
  *(void *)(*(void *)(v6 + 3848) + 8 * (unsigned __int16)v5) = v7;
  uint64_t v9 = *(void *)(*(void *)(v6 + 3848) + 8 * (unsigned __int16)v5);
  if (!v9) {
    return 0;
  }
  unsigned int v10 = *(unsigned __int16 *)(v6 + 3836);
  if (v10 < 2)
  {
    unsigned __int16 v11 = 0;
LABEL_12:
    *(_WORD *)(*(void *)(v6 + 3856) + 2 * v8) = v11;
    return v11 != 0;
  }
  else
  {
    unsigned __int16 v11 = 0;
    uint64_t v12 = *(void *)(*(void *)(v6 + 3840) + 8 * a3);
    uint64_t v13 = 1;
    while (!*(_WORD *)(v12 + 2 * v13))
    {
LABEL_9:
      if (++v13 >= (unint64_t)v10) {
        goto LABEL_12;
      }
    }
    unint64_t v14 = 0;
    unsigned int v15 = *(_DWORD *)(a2 + 4380);
    uint64_t v16 = 12;
    while (1)
    {
      int v17 = v11;
      if (v15 < v11) {
        break;
      }
      *(_WORD *)(v9 + 2 * v11++) = *(_WORD *)(*(void *)(*(void *)(v6 + 520) + 8 * v13) + v16);
      ++v14;
      v16 += 14;
      if (v14 >= *(unsigned __int16 *)(v12 + 2 * v13))
      {
        unsigned int v10 = *(unsigned __int16 *)(v6 + 3836);
        goto LABEL_9;
      }
    }
    BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v19)
    {
      int v20 = 136316418;
      BOOL v21 = "calcAddLayerSetLayerIdList";
      __int16 v22 = 1024;
      int v23 = 1538;
      __int16 v24 = 2080;
      int v25 = "layerNum";
      __int16 v26 = 1024;
      int v27 = v17;
      __int16 v28 = 1024;
      int v29 = 0;
      __int16 v30 = 1024;
      unsigned int v31 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n", (uint8_t *)&v20, 0x2Eu);
      return 0;
    }
  }
  return result;
}

void *HEVC_RBSP::allocTargetLayerIdLists(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 4448);
  BOOL result = malloc_type_calloc(8uLL, *(unsigned __int16 *)(v3 + 3866), 0xEA018107uLL);
  *(void *)(v3 + 3872) = result;
  if (result)
  {
    if (*(_WORD *)(v3 + 3866))
    {
      size_t v5 = 0;
      while (1)
      {
        *(void *)(*(void *)(v3 + 3872) + 8 * v5) = malloc_type_malloc(2 * (*(_DWORD *)(a2 + 12) + 1), 0x1000040BDFB0063uLL);
        if (!*(void *)(*(void *)(v3 + 3872) + 8 * v5)) {
          return 0;
        }
        ++v5;
        size_t v6 = *(unsigned __int16 *)(v3 + 3866);
        if (v5 >= v6) {
          goto LABEL_8;
        }
      }
    }
    size_t v6 = 0;
LABEL_8:
    BOOL result = malloc_type_calloc(8uLL, v6, 0xD0CE916DuLL);
    *(void *)(v3 + 3888) = result;
    if (result)
    {
      if (*(_WORD *)(v3 + 3866))
      {
        size_t v7 = 0;
        while (1)
        {
          *(void *)(*(void *)(v3 + 3888) + 8 * v7) = malloc_type_malloc(2 * (*(_DWORD *)(a2 + 12) + 1), 0x1000040BDFB0063uLL);
          if (!*(void *)(*(void *)(v3 + 3888) + 8 * v7)) {
            return 0;
          }
          ++v7;
          size_t v8 = *(unsigned __int16 *)(v3 + 3866);
          if (v7 >= v8) {
            goto LABEL_16;
          }
        }
      }
      size_t v8 = 0;
LABEL_16:
      BOOL result = malloc_type_calloc(2uLL, v8, 0x76274C1FuLL);
      *(void *)(v3 + 3880) = result;
      if (result)
      {
        uint64_t v9 = malloc_type_calloc(2uLL, *(unsigned __int16 *)(v3 + 3866), 0xA5B1528FuLL);
        *(void *)(v3 + 3896) = v9;
        return (void *)(v9 != 0);
      }
    }
  }
  return result;
}

BOOL HEVC_RBSP::calcOutputLayerFlag(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(a2 + 4448);
  int v5 = *(unsigned __int16 *)(v4 + 730);
  if (v5 == 2)
  {
    return (a4 | a3) == 0;
  }
  else
  {
    if (v5 != 1) {
      return v5 == 0;
    }
    if (*(unsigned __int16 *)(v4 + 3864) <= a3) {
      a3 = *(_DWORD *)(*(void *)(v4 + 528) + 12 * a3 + 8) + 1;
    }
    return *(unsigned __int16 *)(*(void *)(v4 + 3856) + 2 * a3) - 1 == a4;
  }
}

void HEVC_RBSP::calcNecessaryLayerFlags(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 4448);
  int v4 = a3;
  if (*(unsigned __int16 *)(v3 + 3864) <= a3) {
    int v4 = *(_DWORD *)(*(void *)(v3 + 528) + 12 * a3 + 8) + 1;
  }
  uint64_t v5 = *(unsigned __int16 *)(*(void *)(v3 + 3856) + 2 * v4);
  if (*(_WORD *)(*(void *)(v3 + 3856) + 2 * v4))
  {
    uint64_t v6 = v4;
    uint64_t v7 = a3;
    size_t v8 = (unsigned char *)(*(void *)(*(void *)(v3 + 536) + 8 * a3) + 1);
    uint64_t v9 = v5;
    do
    {
      *size_t v8 = 0;
      v8 += 8;
      --v9;
    }
    while (v9);
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(*(void *)(v3 + 536) + 8 * a3);
    do
    {
      if (*(unsigned char *)(v11 + 8 * v10))
      {
        *(unsigned char *)(v11 + 8 * v10 + 1) = 1;
        if (v10)
        {
          uint64_t v12 = 0;
          uint64_t v13 = *(void *)(*(void *)(v3 + 3848) + 8 * v6);
          uint64_t v14 = *(void *)(*(void *)(v3 + 520)
                          + 8 * *(unsigned __int16 *)(v3 + 2 * *(unsigned __int16 *)(v13 + 2 * v10) + 580));
          unsigned int v15 = (unsigned char *)(v11 + 1);
          do
          {
            if (*(unsigned char *)(v14 + 14 * *(unsigned __int16 *)(v3 + 2 * *(unsigned __int16 *)(v13 + 2 * v12) + 580) + 5)) {
              *unsigned int v15 = 1;
            }
            ++v12;
            v15 += 8;
          }
          while (v10 != v12);
        }
      }
      ++v10;
    }
    while (v10 != v5);
    int v16 = 0;
    uint64_t v17 = *(void *)(v3 + 528) + 12 * (int)v7;
    *(_DWORD *)(v17 + 4) = 0;
    __int16 v18 = (_DWORD *)(v17 + 4);
    BOOL v19 = (unsigned __int8 *)(*(void *)(*(void *)(v3 + 536) + 8 * v7) + 1);
    do
    {
      int v20 = *v19;
      v19 += 8;
      v16 += v20;
      --v5;
    }
    while (v5);
    *__int16 v18 = v16;
  }
  else
  {
    *(_DWORD *)(*(void *)(v3 + 528) + 12 * a3 + 4) = 0;
  }
}

void HEVC_RBSP::calcTargetLayerIdList(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 4448);
  int v4 = a3;
  if (*(unsigned __int16 *)(v3 + 3864) <= a3) {
    int v4 = *(_DWORD *)(*(void *)(v3 + 528) + 12 * a3 + 8) + 1;
  }
  uint64_t v5 = *(void *)(v3 + 3856);
  if (*(_WORD *)(v5 + 2 * v4))
  {
    unint64_t v6 = 0;
    uint64_t v7 = (unsigned char *)(*(void *)(*(void *)(v3 + 536) + 8 * a3) + 1);
    do
    {
      if (*v7)
      {
        *(_WORD *)(*(void *)(*(void *)(v3 + 3872) + 8 * a3) + 2 * v6) = *(_WORD *)(*(void *)(*(void *)(v3 + 3848) + 8 * v4)
                                                                                       + 2 * v6);
        ++*(_WORD *)(*(void *)(v3 + 3880) + 2 * a3);
      }
      if (*(v7 - 1))
      {
        *(_WORD *)(*(void *)(*(void *)(v3 + 3888) + 8 * a3) + 2 * v6) = *(_WORD *)(*(void *)(*(void *)(v3 + 3848) + 8 * v4)
                                                                                       + 2 * v6);
        ++*(_WORD *)(*(void *)(v3 + 3896) + 2 * a3);
      }
      ++v6;
      v7 += 8;
    }
    while (v6 < *(unsigned __int16 *)(v5 + 2 * v4));
  }
}

BOOL HEVC_RBSP::calcProfileTierLevelIndex(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return !(a4 | a3) && *(unsigned char *)(a2 + 8) && *(_DWORD *)(a2 + 12) != 0;
}

uint64_t HEVC_RBSP::convOlsIdxToLsIdx(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = a3;
  uint64_t v4 = *(void *)(a2 + 4448);
  if (*(unsigned __int16 *)(v4 + 3864) <= (int)a3) {
    return (*(_DWORD *)(*(void *)(v4 + 528) + 12 * a3 + 8) + 1);
  }
  return result;
}

uint64_t HEVC_RBSP::calcOlshighestOutputLayerId(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 4448);
  int v4 = a3;
  if (*(unsigned __int16 *)(v3 + 3864) <= a3) {
    int v4 = *(_DWORD *)(*(void *)(v3 + 528) + 12 * a3 + 8) + 1;
  }
  uint64_t v5 = *(void *)(v3 + 3856);
  uint64_t v6 = *(unsigned __int16 *)(v5 + 2 * v4);
  if (*(_WORD *)(v5 + 2 * v4))
  {
    uint64_t v7 = 0;
    unsigned __int16 v8 = 0;
    uint64_t v9 = *(unsigned __int8 **)(*(void *)(v3 + 536) + 8 * a3);
    uint64_t v10 = 2 * v6;
    do
    {
      int v11 = *v9;
      v9 += 8;
      if (v11) {
        unsigned __int16 v8 = *(_WORD *)(*(void *)(*(void *)(v3 + 3848) + 8 * v4) + v7);
      }
      v7 += 2;
    }
    while (v10 != v7);
  }
  else
  {
    return 0;
  }
  return v8;
}

uint64_t HEVC_RBSP::parseRepformat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  int v9 = *(unsigned __int16 *)(a1 + 110);
  *(_DWORD *)(a1 + 164) += 16;
  HEVC_RBSP::flush_bits(a1, 16);
  *(_DWORD *)(a4 + 12) = v9;
  int v10 = *(unsigned __int16 *)(a1 + 110);
  *(_DWORD *)(a1 + 164) += 16;
  HEVC_RBSP::flush_bits(a1, 16);
  *(_DWORD *)(a4 + 16) = v10;
  uint64_t v11 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)a4 = v11 < 0;
  if (!a3 && (v11 & 0x8000000000000000) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v53 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: chroma_and_bit_depth_vps_present_flags is 0 for first rep format", v53, 2u);
    }
    return 0xFFFFFFFFLL;
  }
  if (v11 < 0)
  {
    unint64_t v14 = *(void *)(a1 + 104);
    *(_DWORD *)(a1 + 164) += 2;
    unint64_t v15 = v14 >> 62;
    HEVC_RBSP::flush_bits(a1, 2);
    *(_DWORD *)(a4 + 4) = v15;
    if (v15 == 3)
    {
      uint64_t v16 = *(void *)(a1 + 104);
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      *(unsigned char *)(a4 + 8) = v16 < 0;
    }
    unint64_t v17 = *(void *)(a1 + 104);
    *(_DWORD *)(a1 + 164) += 4;
    unint64_t v18 = v17 >> 60;
    HEVC_RBSP::flush_bits(a1, 4);
    *(_DWORD *)(a4 + 20) = v18;
    unint64_t v19 = *(void *)(a1 + 104);
    *(_DWORD *)(a1 + 164) += 4;
    a5 = v19 >> 60;
    HEVC_RBSP::flush_bits(a1, 4);
  }
  else
  {
    if (!a5) {
      goto LABEL_13;
    }
    *(_DWORD *)(a4 + 4) = *(_DWORD *)(a5 + 4);
    *(unsigned char *)a4 = *(unsigned char *)a5;
    *(unsigned char *)(a4 + 8) = *(unsigned char *)(a5 + 8);
    int v13 = *(_DWORD *)(a5 + 20);
    LODWORD(a5) = *(_DWORD *)(a5 + 24);
    *(_DWORD *)(a4 + 20) = v13;
  }
  *(_DWORD *)(a4 + 24) = a5;
LABEL_13:
  uint64_t v20 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  uint64_t result = 0;
  *(unsigned char *)(a4 + 28) = v20 < 0;
  if (v20 < 0)
  {
    unint64_t v21 = *(void *)(a1 + 104);
    if ((v21 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v28 = 0;
    }
    else
    {
      unint64_t v22 = HIDWORD(v21);
      int v23 = -32;
      do
      {
        LODWORD(v22) = 2 * v22;
        int v24 = v23 + 1;
        if ((v22 & 0x80000000) != 0) {
          break;
        }
        unsigned int v25 = v23 + 32;
        ++v23;
      }
      while (v25 < 0x1E);
      *(_DWORD *)(a1 + 164) += v24 + 33;
      HEVC_RBSP::flush_bits(a1, v24 + 33);
      unsigned int v26 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v24 + 32;
      unsigned int v27 = v26 >> -(char)v24;
      HEVC_RBSP::flush_bits(a1, v24 + 32);
      unsigned int v28 = v27 + ~(-2 << (v24 + 31));
    }
    *(_DWORD *)(a4 + 32) = v28;
    unint64_t v29 = *(void *)(a1 + 104);
    if ((v29 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v36 = 0;
    }
    else
    {
      unint64_t v30 = HIDWORD(v29);
      int v31 = -32;
      do
      {
        LODWORD(v30) = 2 * v30;
        int v32 = v31 + 1;
        if ((v30 & 0x80000000) != 0) {
          break;
        }
        unsigned int v33 = v31 + 32;
        ++v31;
      }
      while (v33 < 0x1E);
      *(_DWORD *)(a1 + 164) += v32 + 33;
      HEVC_RBSP::flush_bits(a1, v32 + 33);
      unsigned int v34 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v32 + 32;
      unsigned int v35 = v34 >> -(char)v32;
      HEVC_RBSP::flush_bits(a1, v32 + 32);
      unsigned int v36 = v35 + ~(-2 << (v32 + 31));
    }
    *(_DWORD *)(a4 + 36) = v36;
    unint64_t v37 = *(void *)(a1 + 104);
    if ((v37 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v44 = 0;
    }
    else
    {
      unint64_t v38 = HIDWORD(v37);
      int v39 = -32;
      do
      {
        LODWORD(v38) = 2 * v38;
        int v40 = v39 + 1;
        if ((v38 & 0x80000000) != 0) {
          break;
        }
        unsigned int v41 = v39 + 32;
        ++v39;
      }
      while (v41 < 0x1E);
      *(_DWORD *)(a1 + 164) += v40 + 33;
      HEVC_RBSP::flush_bits(a1, v40 + 33);
      unsigned int v42 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v40 + 32;
      unsigned int v43 = v42 >> -(char)v40;
      HEVC_RBSP::flush_bits(a1, v40 + 32);
      unsigned int v44 = v43 + ~(-2 << (v40 + 31));
    }
    *(_DWORD *)(a4 + 40) = v44;
    unint64_t v45 = *(void *)(a1 + 104);
    if ((v45 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v52 = 0;
    }
    else
    {
      unint64_t v46 = HIDWORD(v45);
      int v47 = -32;
      do
      {
        LODWORD(v46) = 2 * v46;
        int v48 = v47 + 1;
        if ((v46 & 0x80000000) != 0) {
          break;
        }
        unsigned int v49 = v47 + 32;
        ++v47;
      }
      while (v49 < 0x1E);
      *(_DWORD *)(a1 + 164) += v48 + 33;
      HEVC_RBSP::flush_bits(a1, v48 + 33);
      unsigned int v50 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v48 + 32;
      unsigned int v51 = v50 >> -(char)v48;
      HEVC_RBSP::flush_bits(a1, v48 + 32);
      unsigned int v52 = v51 + ~(-2 << (v48 + 31));
    }
    uint64_t result = 0;
    *(_DWORD *)(a4 + 44) = v52;
  }
  return result;
}

uint64_t HEVC_RBSP::parseVPSDpbSize(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 4448);
  uint64_t v5 = *(unsigned __int16 *)(v4 + 3866);
  unsigned int v58 = HEVC_RBSP::vpsDpbInit(a1, a2, *(unsigned __int16 *)(v4 + 3866), *(_DWORD *)(a2 + 4376) + 1, *(_DWORD *)(a2 + 16) + 1);
  uint64_t v59 = v5;
  if (v58) {
    BOOL v6 = v5 >= 2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 4448);
    for (unint64_t i = 1; i != v59; ++i)
    {
      int v9 = i;
      if (i >= *(unsigned __int16 *)(v7 + 3864)) {
        int v9 = *(_DWORD *)(*(void *)(v7 + 528) + 12 * i + 8) + 1;
      }
      uint64_t v10 = *(void *)(a1 + 104);
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unint64_t v11 = 0;
      *(unsigned char *)(v4 + 747) = v10 < 0;
      uint64_t v12 = v9;
      while (1)
      {
        uint64_t v7 = *(void *)(a2 + 4448);
        uint64_t v13 = *(void *)(v7 + 3856);
        uint64_t v14 = *(unsigned __int16 *)(v13 + 2 * v12);
        if (*(_WORD *)(v13 + 2 * v12))
        {
          unsigned int v15 = 0;
          uint64_t v16 = *(unsigned __int16 **)(*(void *)(v7 + 3848) + 8 * v12);
          do
          {
            unsigned int v17 = *v16++;
            int v18 = *(unsigned __int8 *)(*(void *)(v7 + 512) + 28 * *(unsigned __int16 *)(v7 + 2 * v17 + 580) + 24);
            if ((int)v15 <= v18) {
              unsigned int v15 = v18;
            }
            --v14;
          }
          while (v14);
        }
        else
        {
          unsigned int v15 = 0;
        }
        if (v11 > v15) {
          break;
        }
        if (v11)
        {
          if (*(unsigned char *)(*(void *)(v4 + 3912) + i))
          {
            uint64_t v19 = *(void *)(a1 + 104);
            ++*(_DWORD *)(a1 + 164);
            HEVC_RBSP::flush_bits(a1, 1);
            unint64_t v20 = (unint64_t)v19 >> 63;
            *(unsigned char *)(*(void *)(*(void *)(v4 + 3920) + 8 * i) + v11) = v19 < 0;
          }
          else
          {
            LODWORD(v20) = *(unsigned __int8 *)(*(void *)(*(void *)(v4 + 3920) + 8 * i) + v11);
          }
          uint64_t v21 = *(void *)(v4 + 3856);
          if (!v20)
          {
            uint64_t v41 = *(unsigned __int16 *)(v21 + 2 * v12);
            if (*(_WORD *)(v21 + 2 * v12))
            {
              uint64_t v42 = 0;
              uint64_t v43 = (v11 - 1);
              uint64_t v44 = *(void *)(*(void *)(v4 + 536) + 8 * i) + 1;
              uint64_t v45 = 8 * v41;
              do
              {
                if (*(unsigned char *)(v44 + v42))
                {
                  uint64_t v46 = *(void *)(*(void *)(*(void *)(v4 + 3928) + 8 * i) + v42);
                  *(_DWORD *)(v46 + 4 * v11) = *(_DWORD *)(v46 + 4 * v43);
                }
                v42 += 8;
              }
              while (v45 != v42);
            }
            else
            {
              uint64_t v43 = (v11 - 1);
            }
            uint64_t v56 = *(void *)(*(void *)(v4 + 3936) + 8 * i);
            *(_DWORD *)(v56 + 4 * v11) = *(_DWORD *)(v56 + 4 * v43);
            uint64_t v55 = *(void *)(*(void *)(v4 + 3944) + 8 * i);
            unsigned int v54 = *(_DWORD *)(v55 + 4 * v43);
            goto LABEL_64;
          }
        }
        else
        {
          if (!**(unsigned char **)(*(void *)(v4 + 3920) + 8 * i)) {
            goto LABEL_65;
          }
          uint64_t v21 = *(void *)(v4 + 3856);
        }
        if (*(_WORD *)(v21 + 2 * v12))
        {
          unint64_t v22 = 0;
          do
          {
            if (*(unsigned char *)(*(void *)(*(void *)(v4 + 536) + 8 * i) + 8 * v22 + 1))
            {
              if (*(unsigned char *)(a2 + 8)) {
                goto LABEL_32;
              }
              uint64_t v23 = *(void *)(a2 + 4448);
              int v24 = i;
              if (i >= *(unsigned __int16 *)(v23 + 3864)) {
                int v24 = *(_DWORD *)(*(void *)(v23 + 528) + 12 * i + 8) + 1;
              }
              if (*(_WORD *)(*(void *)(*(void *)(v4 + 3848) + 8 * v24) + 2 * v22))
              {
LABEL_32:
                unint64_t v25 = *(void *)(a1 + 104);
                if ((v25 & 0x8000000000000000) != 0)
                {
                  ++*(_DWORD *)(a1 + 164);
                  HEVC_RBSP::flush_bits(a1, 1);
                  unsigned int v32 = 0;
                }
                else
                {
                  unint64_t v26 = HIDWORD(v25);
                  int v27 = -32;
                  do
                  {
                    LODWORD(v26) = 2 * v26;
                    int v28 = v27 + 1;
                    if ((v26 & 0x80000000) != 0) {
                      break;
                    }
                    unsigned int v29 = v27 + 32;
                    ++v27;
                  }
                  while (v29 < 0x1E);
                  *(_DWORD *)(a1 + 164) += v28 + 33;
                  HEVC_RBSP::flush_bits(a1, v28 + 33);
                  unsigned int v30 = *(_DWORD *)(a1 + 108);
                  *(_DWORD *)(a1 + 164) += v28 + 32;
                  unsigned int v31 = v30 >> -(char)v28;
                  HEVC_RBSP::flush_bits(a1, v28 + 32);
                  unsigned int v32 = v31 + ~(-2 << (v28 + 31));
                }
                *(_DWORD *)(*(void *)(*(void *)(*(void *)(v4 + 3928) + 8 * i) + 8 * v22) + 4 * v11) = v32;
                uint64_t v21 = *(void *)(v4 + 3856);
              }
              else if (!(v22 | v11))
              {
                *(_DWORD *)(*(void *)(*(void *)(*(void *)(v4 + 3928) + 8 * i) + 8 * v22) + 4 * v11) = 0;
              }
            }
            ++v22;
          }
          while (v22 < *(unsigned __int16 *)(v21 + 2 * v12));
        }
        unint64_t v33 = *(void *)(a1 + 104);
        if ((v33 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v40 = 0;
        }
        else
        {
          unint64_t v34 = HIDWORD(v33);
          int v35 = -32;
          do
          {
            LODWORD(v34) = 2 * v34;
            int v36 = v35 + 1;
            if ((v34 & 0x80000000) != 0) {
              break;
            }
            unsigned int v37 = v35 + 32;
            ++v35;
          }
          while (v37 < 0x1E);
          *(_DWORD *)(a1 + 164) += v36 + 33;
          HEVC_RBSP::flush_bits(a1, v36 + 33);
          unsigned int v38 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v36 + 32;
          unsigned int v39 = v38 >> -(char)v36;
          HEVC_RBSP::flush_bits(a1, v36 + 32);
          unsigned int v40 = v39 + ~(-2 << (v36 + 31));
        }
        *(_DWORD *)(*(void *)(*(void *)(v4 + 3936) + 8 * i) + 4 * v11) = v40;
        unint64_t v47 = *(void *)(a1 + 104);
        if ((v47 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v54 = 0;
        }
        else
        {
          unint64_t v48 = HIDWORD(v47);
          int v49 = -32;
          do
          {
            LODWORD(v48) = 2 * v48;
            int v50 = v49 + 1;
            if ((v48 & 0x80000000) != 0) {
              break;
            }
            unsigned int v51 = v49 + 32;
            ++v49;
          }
          while (v51 < 0x1E);
          *(_DWORD *)(a1 + 164) += v50 + 33;
          HEVC_RBSP::flush_bits(a1, v50 + 33);
          unsigned int v52 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v50 + 32;
          unsigned int v53 = v52 >> -(char)v50;
          HEVC_RBSP::flush_bits(a1, v50 + 32);
          unsigned int v54 = v53 + ~(-2 << (v50 + 31));
        }
        uint64_t v55 = *(void *)(*(void *)(v4 + 3944) + 8 * i);
LABEL_64:
        *(_DWORD *)(v55 + 4 * v11) = v54;
LABEL_65:
        ++v11;
      }
    }
  }
  return v58;
}

uint64_t releaseVpsDpb(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void ***)(a1 + 4448);
  if (a2 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * a3;
    uint64_t v7 = a2;
    do
    {
      unsigned __int16 v8 = (void **)v3[490];
      if (v8)
      {
        free(v8[v5]);
        *((void *)v3[490] + v5) = 0;
      }
      int v9 = (void **)v3[492];
      if (v9)
      {
        free(v9[v5]);
        *((void *)v3[492] + v5) = 0;
      }
      uint64_t v10 = (void **)v3[493];
      if (v10)
      {
        free(v10[v5]);
        *((void *)v3[493] + v5) = 0;
      }
      unint64_t v11 = (void **)v3[491];
      if (v11)
      {
        if (a3 >= 1)
        {
          uint64_t v12 = 0;
          do
          {
            uint64_t v13 = *((void *)v3[491] + v5);
            if (v13)
            {
              free(*(void **)(v13 + v12));
              *(void *)(*((void *)v3[491] + v5) + v12) = 0;
            }
            v12 += 8;
          }
          while (v6 != v12);
          unint64_t v11 = (void **)v3[491];
        }
        free(v11[v5]);
        *((void *)v3[491] + v5) = 0;
      }
      ++v5;
    }
    while (v5 != v7);
  }
  free(v3[489]);
  v3[489] = 0;
  free(v3[490]);
  v3[490] = 0;
  free(v3[491]);
  v3[491] = 0;
  free(v3[492]);
  v3[492] = 0;
  free(v3[493]);
  v3[493] = 0;
  return 0;
}

uint64_t HEVC_RBSP::vpsDpbInit(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  unsigned __int16 v8 = *(void **)(a2 + 4448);
  size_t v9 = a3;
  uint64_t result = (uint64_t)malloc_type_calloc(1uLL, a3, 0x8150088FuLL);
  v8[489] = result;
  if (result)
  {
    uint64_t result = (uint64_t)malloc_type_calloc(8uLL, v9, 0xC72F468BuLL);
    v8[490] = result;
    if (result)
    {
      uint64_t result = (uint64_t)malloc_type_calloc(8uLL, v9, 0xFD92896uLL);
      v8[491] = result;
      if (result)
      {
        uint64_t result = (uint64_t)malloc_type_calloc(8uLL, v9, 0x4CADF246uLL);
        v8[492] = result;
        if (result)
        {
          uint64_t result = (uint64_t)malloc_type_calloc(8uLL, v9, 0xC73057DCuLL);
          v8[493] = result;
          if (result)
          {
            if (a3 < 1)
            {
              return 1;
            }
            else
            {
              uint64_t v11 = 0;
              uint64_t v17 = a3;
              while (1)
              {
                *(void *)(v8[490] + 8 * v11) = malloc_type_calloc(1uLL, a5, 0x26F38412uLL);
                if (!*(void *)(v8[490] + 8 * v11)) {
                  return 0;
                }
                *(void *)(v8[492] + 8 * v11) = malloc_type_calloc(4uLL, a5, 0xE04349DFuLL);
                if (!*(void *)(v8[492] + 8 * v11)) {
                  return 0;
                }
                *(void *)(v8[493] + 8 * v11) = malloc_type_calloc(4uLL, a5, 0xB73458DAuLL);
                if (!*(void *)(v8[493] + 8 * v11)) {
                  return 0;
                }
                *(void *)(v8[491] + 8 * v11) = malloc_type_calloc(8uLL, a4, 0xCA0C4F8BuLL);
                if (!*(void *)(v8[491] + 8 * v11)) {
                  return 0;
                }
                if (a5 >= 1)
                {
                  uint64_t v12 = 0;
                  uint64_t v13 = *(void *)(v8[490] + 8 * v11);
                  uint64_t v14 = *(void *)(v8[492] + 8 * v11);
                  uint64_t v15 = *(void *)(v8[493] + 8 * v11);
                  do
                  {
                    *(unsigned char *)(v13 + v12) = v12 == 0;
                    *(_DWORD *)(v14 + 4 * v12) = 0;
                    *(_DWORD *)(v15 + 4 * v12++) = 0;
                  }
                  while (a5 != v12);
                }
                if (a4 >= 1) {
                  break;
                }
LABEL_21:
                ++v11;
                uint64_t result = 1;
                if (v11 == v17) {
                  return result;
                }
              }
              uint64_t v16 = 0;
              while (1)
              {
                *(void *)(*(void *)(v8[491] + 8 * v11) + v16) = malloc_type_malloc(4 * a5, 0x100004052888210uLL);
                uint64_t result = *(void *)(*(void *)(v8[491] + 8 * v11) + v16);
                if (!result) {
                  break;
                }
                if (a5 >= 1) {
                  memset((void *)result, 255, 4 * a5);
                }
                v16 += 8;
                if (8 * a4 == v16) {
                  goto LABEL_21;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t HEVC_RBSP::calcMaxSubLayersInLayerSetMinus1(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void **)(a2 + 4448);
  uint64_t v4 = *(unsigned __int16 *)(v3[482] + 2 * a3);
  if (!*(_WORD *)(v3[482] + 2 * a3)) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v6 = *(unsigned __int16 **)(v3[481] + 8 * a3);
  do
  {
    unsigned int v7 = *v6++;
    int v8 = *(unsigned __int8 *)(v3[64] + 28 * *((unsigned __int16 *)v3 + v7 + 290) + 24);
    if ((int)result <= v8) {
      uint64_t result = v8;
    }
    else {
      uint64_t result = result;
    }
    --v4;
  }
  while (v4);
  return result;
}

uint64_t HEVC_RBSP::decodeTargetLayerIdlist(uint64_t a1, uint64_t a2, int a3)
{
  return *(void *)(*(void *)(*(void *)(a2 + 4448) + 3872) + 8 * a3);
}

uint64_t HEVC_RBSP::OutputTargetLayerIdlist(uint64_t a1, uint64_t a2, int a3)
{
  return *(void *)(*(void *)(*(void *)(a2 + 4448) + 3888) + 8 * a3);
}

uint64_t HEVC_RBSP::calcViewId(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 4448);
  if (*(unsigned char *)(v3 + 546))
  {
    uint64_t v4 = v3 + 16 * *(unsigned __int16 *)(v3 + 2 * a3 + 580);
    if (*(unsigned char *)(v3 + 545)) {
      ++v4;
    }
    unsigned int v5 = *(unsigned __int8 *)(v4 + 2810);
  }
  else
  {
    unsigned int v5 = 0;
  }
  return *(unsigned __int8 *)(*(void *)(v3 + 512) + 28 * v5);
}

uint64_t HEVC_RBSP::convScalTypeToScalIdx(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 < 1) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v4 = a3;
  unsigned int v5 = (unsigned __int8 *)(*(void *)(a2 + 4448) + 545);
  do
  {
    if (*v5++) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    --v4;
  }
  while (v4);
  return result;
}

uint64_t HEVC_RBSP::parseHRD(HEVC_RBSP *this, uint64_t a2, int a3, unsigned int a4)
{
  *(void *)(a2 + 416) = 0;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 32) = 0x1700000017;
  *(_DWORD *)(a2 + 40) = 23;
  if (!a3) {
    goto LABEL_12;
  }
  unint64_t v7 = *((void *)this + 13);
  ++*((_DWORD *)this + 41);
  unint64_t v8 = v7 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *(unsigned char *)a2 = v8;
  uint64_t v9 = *((void *)this + 13);
  ++*((_DWORD *)this + 41);
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *(unsigned char *)(a2 + 1) = v9 < 0;
  if (!*(unsigned char *)a2)
  {
    if ((v9 & 0x8000000000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_6;
  }
  *(unsigned char *)(a2 + 421) = 1;
  if (v9 < 0) {
LABEL_6:
  }
    *(unsigned char *)(a2 + 422) = 1;
  *(unsigned char *)(a2 + 420) = 1;
  uint64_t v10 = *((void *)this + 13);
  ++*((_DWORD *)this + 41);
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *(unsigned char *)(a2 + 2) = v10 < 0;
  if (v10 < 0)
  {
    int v11 = *((unsigned __int8 *)this + 111);
    *((_DWORD *)this + 41) += 8;
    HEVC_RBSP::flush_bits((uint64_t)this, 8);
    *(_DWORD *)(a2 + 4) = v11;
    unint64_t v12 = *((void *)this + 13);
    *((_DWORD *)this + 41) += 5;
    unint64_t v13 = v12 >> 59;
    HEVC_RBSP::flush_bits((uint64_t)this, 5);
    *(_DWORD *)(a2 + 8) = v13;
    unint64_t v14 = *((void *)this + 13);
    ++*((_DWORD *)this + 41);
    unint64_t v15 = v14 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(unsigned char *)(a2 + 12) = v15;
    unint64_t v16 = *((void *)this + 13);
    *((_DWORD *)this + 41) += 5;
    unint64_t v17 = v16 >> 59;
    HEVC_RBSP::flush_bits((uint64_t)this, 5);
    *(_DWORD *)(a2 + 16) = v17;
  }
  unint64_t v18 = *((void *)this + 13);
  *((_DWORD *)this + 41) += 4;
  unint64_t v19 = v18 >> 60;
  HEVC_RBSP::flush_bits((uint64_t)this, 4);
  *(_DWORD *)(a2 + 20) = v19;
  unint64_t v20 = *((void *)this + 13);
  *((_DWORD *)this + 41) += 4;
  unint64_t v21 = v20 >> 60;
  HEVC_RBSP::flush_bits((uint64_t)this, 4);
  *(_DWORD *)(a2 + 24) = v21;
  if (*(unsigned char *)(a2 + 2))
  {
    unint64_t v22 = *((void *)this + 13);
    *((_DWORD *)this + 41) += 4;
    unint64_t v23 = v22 >> 60;
    HEVC_RBSP::flush_bits((uint64_t)this, 4);
    *(_DWORD *)(a2 + 28) = v23;
  }
  unint64_t v24 = *((void *)this + 13);
  *((_DWORD *)this + 41) += 5;
  unint64_t v25 = v24 >> 59;
  HEVC_RBSP::flush_bits((uint64_t)this, 5);
  *(_DWORD *)(a2 + 32) = v25;
  unint64_t v26 = *((void *)this + 13);
  *((_DWORD *)this + 41) += 5;
  unint64_t v27 = v26 >> 59;
  HEVC_RBSP::flush_bits((uint64_t)this, 5);
  *(_DWORD *)(a2 + 36) = v27;
  unint64_t v28 = *((void *)this + 13);
  *((_DWORD *)this + 41) += 5;
  unint64_t v29 = v28 >> 59;
  HEVC_RBSP::flush_bits((uint64_t)this, 5);
  *(_DWORD *)(a2 + 40) = v29;
LABEL_12:
  size_t v30 = a4 + 1;
  *(_DWORD *)(a2 + 416) = v30;
  uint64_t result = (uint64_t)malloc_type_calloc(0x30uLL, v30, 0x194F4CCDuLL);
  *(void *)(a2 + 400) = result;
  if (result)
  {
    uint64_t result = (uint64_t)malloc_type_calloc(0x30uLL, *(unsigned int *)(a2 + 416), 0xCBF716C3uLL);
    *(void *)(a2 + 408) = result;
    if (result)
    {
      unsigned int v32 = 0;
      while (1)
      {
        uint64_t v33 = *((void *)this + 13);
        ++*((_DWORD *)this + 41);
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        uint64_t v34 = v32;
        *(unsigned char *)(a2 + v32 + 44) = v33 < 0;
        if (v33 < 0)
        {
          *(unsigned char *)(a2 + v32 + 76) = 1;
        }
        else
        {
          uint64_t v35 = *((void *)this + 13);
          ++*((_DWORD *)this + 41);
          HEVC_RBSP::flush_bits((uint64_t)this, 1);
          *(unsigned char *)(a2 + v32 + 76) = v35 < 0;
          if ((v35 & 0x8000000000000000) == 0)
          {
            unint64_t v36 = *((void *)this + 13);
            ++*((_DWORD *)this + 41);
            unint64_t v37 = v36 >> 63;
            HEVC_RBSP::flush_bits((uint64_t)this, 1);
            *(unsigned char *)(a2 + v32 + 236) = v37;
            if (!v37) {
              goto LABEL_27;
            }
            goto LABEL_34;
          }
        }
        unint64_t v39 = *((void *)this + 13);
        if ((v39 & 0x8000000000000000) != 0)
        {
          ++*((_DWORD *)this + 41);
          HEVC_RBSP::flush_bits((uint64_t)this, 1);
          unsigned int v46 = 0;
        }
        else
        {
          unint64_t v40 = HIDWORD(v39);
          int v41 = -32;
          do
          {
            LODWORD(v40) = 2 * v40;
            int v42 = v41 + 1;
            if ((v40 & 0x80000000) != 0) {
              break;
            }
            unsigned int v43 = v41 + 32;
            ++v41;
          }
          while (v43 < 0x1E);
          *((_DWORD *)this + 41) += v42 + 33;
          HEVC_RBSP::flush_bits((uint64_t)this, v42 + 33);
          unsigned int v44 = *((_DWORD *)this + 27);
          *((_DWORD *)this + 41) += v42 + 32;
          unsigned int v45 = v44 >> -(char)v42;
          HEVC_RBSP::flush_bits((uint64_t)this, v42 + 32);
          unsigned int v46 = v45 + ~(-2 << (v42 + 31));
        }
        *(_DWORD *)(a2 + 4 * v34 + 108) = v46;
        if (!*(unsigned char *)(a2 + v34 + 236))
        {
LABEL_27:
          unint64_t v47 = *((void *)this + 13);
          if ((v47 & 0x8000000000000000) != 0)
          {
            ++*((_DWORD *)this + 41);
            HEVC_RBSP::flush_bits((uint64_t)this, 1);
            *(_DWORD *)(a2 + 4 * v34 + 268) = 0;
          }
          else
          {
            unint64_t v48 = HIDWORD(v47);
            int v49 = -32;
            do
            {
              LODWORD(v48) = 2 * v48;
              int v50 = v49 + 1;
              if ((v48 & 0x80000000) != 0) {
                break;
              }
              unsigned int v51 = v49 + 32;
              ++v49;
            }
            while (v51 < 0x1E);
            *((_DWORD *)this + 41) += v50 + 33;
            HEVC_RBSP::flush_bits((uint64_t)this, v50 + 33);
            unsigned int v52 = *((_DWORD *)this + 27);
            *((_DWORD *)this + 41) += v50 + 32;
            unsigned int v53 = v52 >> -(char)v50;
            HEVC_RBSP::flush_bits((uint64_t)this, v50 + 32);
            unsigned int v54 = v53 + ~(-2 << (v50 + 31));
            *(_DWORD *)(a2 + 4 * v34 + 268) = v54;
            if (v54 > 0x1F) {
              return 0;
            }
          }
        }
LABEL_34:
        if (*(unsigned char *)a2)
        {
          uint64_t result = HEVC_RBSP::parseSubLayerHRD((uint64_t)this, *(void *)(a2 + 400) + 48 * v34, v38, *(_DWORD *)(a2 + 4 * v34 + 268), *(unsigned __int8 *)(a2 + 2));
          if (!result) {
            return result;
          }
        }
        if (*(unsigned char *)(a2 + 1))
        {
          uint64_t result = HEVC_RBSP::parseSubLayerHRD((uint64_t)this, *(void *)(a2 + 408) + 48 * v34, v38, *(_DWORD *)(a2 + 4 * v34 + 268), *(unsigned __int8 *)(a2 + 2));
          if (!result) {
            return result;
          }
        }
        unsigned int v32 = v34 + 1;
        if ((int)v34 + 1 > a4) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t HEVC_RBSP::parseSubLayerHRD(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t result = 0;
  uint64_t v7 = a4 + 1;
  uint64_t v8 = v7 << 31 >> 31;
  if (v8 == v7 && (v8 & 0x8000000000000000) == 0)
  {
    size_t v12 = v8 & 0x1FFFFFFFFLL;
    uint64_t result = (uint64_t)malloc_type_calloc(4uLL, v8 & 0x1FFFFFFFFLL, 0x47A443AuLL);
    *(void *)a2 = result;
    if (result)
    {
      uint64_t result = (uint64_t)malloc_type_calloc(4uLL, v12, 0xC7FD33FuLL);
      *(void *)(a2 + 8) = result;
      if (result)
      {
        uint64_t result = (uint64_t)malloc_type_calloc(1uLL, v12, 0x21E303BEuLL);
        *(void *)(a2 + 32) = result;
        if (result)
        {
          if (!a5
            || (uint64_t result = (uint64_t)malloc_type_calloc(4uLL, v12, 0xF3E59038uLL), (*(void *)(a2 + 16) = result) != 0)
            && (uint64_t result = (uint64_t)malloc_type_calloc(4uLL, v12, 0xD565A829uLL), (*(void *)(a2 + 24) = result) != 0))
          {
            unsigned int v13 = 0;
            do
            {
              unint64_t v14 = *(void *)(a1 + 104);
              if ((v14 & 0x8000000000000000) != 0)
              {
                ++*(_DWORD *)(a1 + 164);
                HEVC_RBSP::flush_bits(a1, 1);
                unsigned int v21 = 0;
              }
              else
              {
                unint64_t v15 = HIDWORD(v14);
                int v16 = -32;
                do
                {
                  LODWORD(v15) = 2 * v15;
                  int v17 = v16 + 1;
                  if ((v15 & 0x80000000) != 0) {
                    break;
                  }
                  unsigned int v18 = v16 + 32;
                  ++v16;
                }
                while (v18 < 0x1E);
                *(_DWORD *)(a1 + 164) += v17 + 33;
                HEVC_RBSP::flush_bits(a1, v17 + 33);
                unsigned int v19 = *(_DWORD *)(a1 + 108);
                *(_DWORD *)(a1 + 164) += v17 + 32;
                unsigned int v20 = v19 >> -(char)v17;
                HEVC_RBSP::flush_bits(a1, v17 + 32);
                unsigned int v21 = v20 + ~(-2 << (v17 + 31));
              }
              *(_DWORD *)(*(void *)a2 + 4 * v13) = v21;
              unint64_t v22 = *(void *)(a1 + 104);
              if ((v22 & 0x8000000000000000) != 0)
              {
                ++*(_DWORD *)(a1 + 164);
                HEVC_RBSP::flush_bits(a1, 1);
                unsigned int v29 = 0;
              }
              else
              {
                unint64_t v23 = HIDWORD(v22);
                int v24 = -32;
                do
                {
                  LODWORD(v23) = 2 * v23;
                  int v25 = v24 + 1;
                  if ((v23 & 0x80000000) != 0) {
                    break;
                  }
                  unsigned int v26 = v24 + 32;
                  ++v24;
                }
                while (v26 < 0x1E);
                *(_DWORD *)(a1 + 164) += v25 + 33;
                HEVC_RBSP::flush_bits(a1, v25 + 33);
                unsigned int v27 = *(_DWORD *)(a1 + 108);
                *(_DWORD *)(a1 + 164) += v25 + 32;
                unsigned int v28 = v27 >> -(char)v25;
                HEVC_RBSP::flush_bits(a1, v25 + 32);
                unsigned int v29 = v28 + ~(-2 << (v25 + 31));
              }
              *(_DWORD *)(*(void *)(a2 + 8) + 4 * v13) = v29;
              if (a5)
              {
                unint64_t v30 = *(void *)(a1 + 104);
                if ((v30 & 0x8000000000000000) != 0)
                {
                  ++*(_DWORD *)(a1 + 164);
                  HEVC_RBSP::flush_bits(a1, 1);
                  unsigned int v37 = 0;
                }
                else
                {
                  unint64_t v31 = HIDWORD(v30);
                  int v32 = -32;
                  do
                  {
                    LODWORD(v31) = 2 * v31;
                    int v33 = v32 + 1;
                    if ((v31 & 0x80000000) != 0) {
                      break;
                    }
                    unsigned int v34 = v32 + 32;
                    ++v32;
                  }
                  while (v34 < 0x1E);
                  *(_DWORD *)(a1 + 164) += v33 + 33;
                  HEVC_RBSP::flush_bits(a1, v33 + 33);
                  unsigned int v35 = *(_DWORD *)(a1 + 108);
                  *(_DWORD *)(a1 + 164) += v33 + 32;
                  unsigned int v36 = v35 >> -(char)v33;
                  HEVC_RBSP::flush_bits(a1, v33 + 32);
                  unsigned int v37 = v36 + ~(-2 << (v33 + 31));
                }
                *(_DWORD *)(*(void *)(a2 + 16) + 4 * v13) = v37;
                unint64_t v38 = *(void *)(a1 + 104);
                if ((v38 & 0x8000000000000000) != 0)
                {
                  ++*(_DWORD *)(a1 + 164);
                  HEVC_RBSP::flush_bits(a1, 1);
                  unsigned int v45 = 0;
                }
                else
                {
                  unint64_t v39 = HIDWORD(v38);
                  int v40 = -32;
                  do
                  {
                    LODWORD(v39) = 2 * v39;
                    int v41 = v40 + 1;
                    if ((v39 & 0x80000000) != 0) {
                      break;
                    }
                    unsigned int v42 = v40 + 32;
                    ++v40;
                  }
                  while (v42 < 0x1E);
                  *(_DWORD *)(a1 + 164) += v41 + 33;
                  HEVC_RBSP::flush_bits(a1, v41 + 33);
                  unsigned int v43 = *(_DWORD *)(a1 + 108);
                  *(_DWORD *)(a1 + 164) += v41 + 32;
                  unsigned int v44 = v43 >> -(char)v41;
                  HEVC_RBSP::flush_bits(a1, v41 + 32);
                  unsigned int v45 = v44 + ~(-2 << (v41 + 31));
                }
                *(_DWORD *)(*(void *)(a2 + 24) + 4 * v13) = v45;
              }
              unint64_t v46 = *(void *)(a1 + 104);
              ++*(_DWORD *)(a1 + 164);
              unint64_t v47 = v46 >> 63;
              HEVC_RBSP::flush_bits(a1, 1);
              *(unsigned char *)(*(void *)(a2 + 32) + v13++) = v47;
            }
            while (v13 <= a4);
            *(_DWORD *)(a2 + 40) = v7;
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL HEVC_RBSP::calcMultiLayerExtSpsFlag(HEVC_RBSP *this, int a2, int a3)
{
  return a2 && a3 == 7;
}

uint64_t HEVC_RBSP::calcRepFormat(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a2 == -1)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315138;
      unsigned int v13 = "calcRepFormat";
      uint64_t v6 = &_os_log_internal;
      uint64_t v7 = "AppleAVD: %s: VPS doesn't exist to calc rep format!\n";
LABEL_14:
      _os_log_impl(&dword_223977000, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v12, 0xCu);
    }
  }
  else
  {
    if (!*(unsigned char *)(a3 + 22847)) {
      return 0;
    }
    uint64_t v4 = *(void *)(a2 + 4448);
    unsigned int v5 = (unsigned int *)(*(unsigned char *)(a3 + 3592)
                        ? a3 + 3596
                        : *(void *)(v4 + 512) + 28 * *(unsigned __int16 *)(v4 + 2 * a4 + 580) + 4);
    uint64_t v8 = *(void *)(v4 + 736);
    if (!v8) {
      return 0;
    }
    unsigned int v9 = *v5;
    if (v9 < *(_DWORD *)(v4 + 3904) + 1)
    {
      uint64_t result = 0;
      uint64_t v11 = v8 + 48 * (int)v9;
      *(_DWORD *)(a3 + 3600) = *(_DWORD *)(v11 + 4);
      *(void *)(a3 + 3608) = *(void *)(v11 + 12);
      *(void *)(a3 + 3636) = *(void *)(v11 + 20);
      *(_OWORD *)(a3 + 3620) = *(_OWORD *)(v11 + 32);
      return result;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315138;
      unsigned int v13 = "calcRepFormat";
      uint64_t v6 = &_os_log_internal;
      uint64_t v7 = "AppleAVD: %s - bad repFormatIdx ";
      goto LABEL_14;
    }
  }
  return 0xFFFFFFFFLL;
}

void HEVC_RBSP::calcSpsMaxDecPicBufferingMinus1(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (*(unsigned char *)(a3 + 22847))
  {
    uint64_t v5 = *(void *)(a2 + 4448);
    if (*(unsigned __int16 *)(v5 + 3864) <= a4)
    {
      uint64_t v6 = *(int *)(*(void *)(v5 + 528) + 12 * a4 + 8) + 1;
      uint64_t v7 = (uint64_t *)(*(void *)(v5 + 3872) + 8 * v6);
    }
    else
    {
      uint64_t v6 = a4;
      uint64_t v7 = (uint64_t *)(*(void *)(v5 + 3872) + 8 * a4);
    }
    uint64_t v8 = *(unsigned __int16 *)(*(void *)(v5 + 3880) + 2 * v6);
    if (*(_WORD *)(*(void *)(v5 + 3880) + 2 * v6))
    {
      uint64_t v9 = 0;
      uint64_t v10 = *v7;
      while (*(unsigned __int16 *)(v10 + 2 * v9) != a5)
      {
        if (v8 == ++v9)
        {
          LODWORD(v9) = v8;
          break;
        }
      }
    }
    else
    {
      LODWORD(v9) = 0;
    }
    uint64_t v11 = *(int **)(*(void *)(*(void *)(v5 + 3928) + 8 * a4) + 8 * v9);
    int v12 = *(int **)(*(void *)(v5 + 3936) + 8 * a4);
    unsigned int v13 = *(int **)(*(void *)(v5 + 3944) + 8 * a4);
    uint64_t v14 = (*(_DWORD *)(a3 + 4) + 1);
    unint64_t v15 = (_DWORD *)(a3 + 3652);
    do
    {
      int v17 = *v11++;
      int v16 = v17;
      int v19 = *v12++;
      int v18 = v19;
      int v20 = *v13++;
      *unint64_t v15 = v16;
      v15[64] = v18;
      v15[128] = v20;
      ++v15;
      --v14;
    }
    while (v14);
  }
}

uint64_t HEVC_RBSP::parseSpsRangeExtension(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v5 = v4 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  *a2 = v5;
  unint64_t v6 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v7 = v6 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  a2[1] = v7;
  unint64_t v8 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v9 = v8 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  a2[2] = v9;
  unint64_t v10 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v11 = v10 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  a2[3] = v11;
  unint64_t v12 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v13 = v12 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  a2[4] = v13;
  unint64_t v14 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v15 = v14 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  a2[5] = v15;
  unint64_t v16 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v17 = v16 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  a2[6] = v17;
  unint64_t v18 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v19 = v18 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  a2[7] = v19;
  unint64_t v20 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v21 = v20 >> 63;
  uint64_t result = HEVC_RBSP::flush_bits(a1, 1);
  a2[8] = v21;
  return result;
}

uint64_t calcTilePositions(uint64_t result, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  __int16 v2 = (int *)(a2 + 22880);
  if (*(unsigned char *)(result + 64))
  {
    uint64_t v3 = 0;
    int v4 = *(_DWORD *)(result + 56);
    unsigned int v5 = v4 + 1;
    if ((v4 + 1) > 1) {
      uint64_t v6 = (v4 + 1);
    }
    else {
      uint64_t v6 = 1;
    }
    do
    {
      unsigned int v7 = *v2 * ((int)v3 + 1) / v5 - *v2 * (int)v3 / v5;
      v34[v3] = v7;
      *(_DWORD *)(result + 68 + 4 * v3++) = v7 - 1;
    }
    while (v6 != v3);
    uint64_t v8 = 0;
    int v9 = *(_DWORD *)(result + 60);
    unsigned int v10 = v9 + 1;
    if ((v9 + 1) > 1) {
      uint64_t v11 = (v9 + 1);
    }
    else {
      uint64_t v11 = 1;
    }
    do
    {
      unsigned int v12 = *(_DWORD *)(a2 + 22888) * ((int)v8 + 1) / v10 - *(_DWORD *)(a2 + 22888) * (int)v8 / v10;
      *(_DWORD *)&v33[4 * v8] = v12;
      *(_DWORD *)(result + 148 + 4 * v8++) = v12 - 1;
    }
    while (v11 != v8);
  }
  else
  {
    int v13 = *v2;
    uint64_t v14 = *(unsigned int *)(result + 56);
    v34[v14] = *v2;
    if (v14)
    {
      unint64_t v15 = (int *)(result + 68);
      uint64_t v16 = v14;
      unint64_t v17 = v34;
      do
      {
        int v18 = *v15++;
        *v17++ = v18 + 1;
        int v13 = v34[v14] - (v18 + 1);
        v34[v14] = v13;
        --v16;
      }
      while (v16);
    }
    *(_DWORD *)(result + 4 * v14 + 68) = v13 - 1;
    int v19 = *(_DWORD *)(a2 + 22888);
    uint64_t v20 = *(unsigned int *)(result + 60);
    *(_DWORD *)&v33[4 * v20] = v19;
    if (v20)
    {
      unint64_t v21 = (int *)(result + 148);
      uint64_t v22 = v20;
      unint64_t v23 = v33;
      do
      {
        int v24 = *v21++;
        *v23++ = v24 + 1;
        int v19 = *(_DWORD *)&v33[4 * v20] - (v24 + 1);
        *(_DWORD *)&v33[4 * v20] = v19;
        --v22;
      }
      while (v22);
    }
    *(_DWORD *)(result + 4 * v20 + 148) = v19 - 1;
    if ((v14 + 1) > 1) {
      uint64_t v6 = (v14 + 1);
    }
    else {
      uint64_t v6 = 1;
    }
  }
  unint64_t v25 = 0;
  int v26 = 0;
  *(_DWORD *)(result + 9676) = 0;
  *(_DWORD *)(result + 9760) = 0;
  uint64_t v27 = 4 * v6;
  do
  {
    v26 += v34[v25 / 4];
    *(_DWORD *)(result + 9680 + v25) = v26;
    v25 += 4;
  }
  while (v27 != v25);
  uint64_t v28 = 0;
  int v29 = *(_DWORD *)(result + 60);
  if ((v29 + 1) > 1) {
    unsigned int v30 = v29 + 1;
  }
  else {
    unsigned int v30 = 1;
  }
  int v31 = *(_DWORD *)(result + 9760);
  uint64_t v32 = 4 * v30;
  do
  {
    v31 += *(_DWORD *)&v33[v28];
    *(_DWORD *)(result + 9764 + v28) = v31;
    v28 += 4;
  }
  while (v32 != v28);
  return result;
}

uint64_t HEVC_RBSP::parsePpsRangeExtension(HEVC_RBSP *this, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 33))
  {
    unint64_t v5 = *((void *)this + 13);
    if ((v5 & 0x8000000000000000) != 0)
    {
      ++*((_DWORD *)this + 41);
      HEVC_RBSP::flush_bits((uint64_t)this, 1);
      unsigned int v12 = 0;
    }
    else
    {
      unint64_t v6 = HIDWORD(v5);
      int v7 = -32;
      do
      {
        LODWORD(v6) = 2 * v6;
        int v8 = v7 + 1;
        if ((v6 & 0x80000000) != 0) {
          break;
        }
        unsigned int v9 = v7 + 32;
        ++v7;
      }
      while (v9 < 0x1E);
      *((_DWORD *)this + 41) += v8 + 33;
      HEVC_RBSP::flush_bits((uint64_t)this, v8 + 33);
      unsigned int v10 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v8 + 32;
      unsigned int v11 = v10 >> -(char)v8;
      HEVC_RBSP::flush_bits((uint64_t)this, v8 + 32);
      unsigned int v12 = v11 + ~(-2 << (v8 + 31));
    }
    *(_DWORD *)a3 = v12;
  }
  unint64_t v13 = *((void *)this + 13);
  ++*((_DWORD *)this + 41);
  unint64_t v14 = v13 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *(unsigned char *)(a3 + 4) = v14;
  uint64_t v15 = *((void *)this + 13);
  ++*((_DWORD *)this + 41);
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *(unsigned char *)(a3 + 5) = v15 < 0;
  if (v15 < 0)
  {
    unint64_t v16 = *((void *)this + 13);
    if ((v16 & 0x8000000000000000) != 0)
    {
      ++*((_DWORD *)this + 41);
      HEVC_RBSP::flush_bits((uint64_t)this, 1);
      unsigned int v23 = 0;
    }
    else
    {
      unint64_t v17 = HIDWORD(v16);
      int v18 = -32;
      do
      {
        LODWORD(v17) = 2 * v17;
        int v19 = v18 + 1;
        if ((v17 & 0x80000000) != 0) {
          break;
        }
        unsigned int v20 = v18 + 32;
        ++v18;
      }
      while (v20 < 0x1E);
      *((_DWORD *)this + 41) += v19 + 33;
      HEVC_RBSP::flush_bits((uint64_t)this, v19 + 33);
      unsigned int v21 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v19 + 32;
      unsigned int v22 = v21 >> -(char)v19;
      HEVC_RBSP::flush_bits((uint64_t)this, v19 + 32);
      unsigned int v23 = v22 + ~(-2 << (v19 + 31));
    }
    *(_DWORD *)(a3 + 8) = v23;
    unint64_t v24 = *((void *)this + 13);
    if ((v24 & 0x8000000000000000) != 0)
    {
      ++*((_DWORD *)this + 41);
      HEVC_RBSP::flush_bits((uint64_t)this, 1);
      *(_DWORD *)(a3 + 12) = 0;
    }
    else
    {
      unint64_t v25 = HIDWORD(v24);
      int v26 = -32;
      do
      {
        LODWORD(v25) = 2 * v25;
        int v27 = v26 + 1;
        if ((v25 & 0x80000000) != 0) {
          break;
        }
        unsigned int v28 = v26 + 32;
        ++v26;
      }
      while (v28 < 0x1E);
      *((_DWORD *)this + 41) += v27 + 33;
      HEVC_RBSP::flush_bits((uint64_t)this, v27 + 33);
      unsigned int v29 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v27 + 32;
      unsigned int v30 = v29 >> -(char)v27;
      HEVC_RBSP::flush_bits((uint64_t)this, v27 + 32);
      uint64_t result = 0;
      unsigned int v32 = v30 + ~(-2 << (v27 + 31));
      *(_DWORD *)(a3 + 12) = v32;
      if (v32 > 5) {
        return result;
      }
    }
    unsigned int v33 = 0;
    do
    {
      unint64_t v34 = *((void *)this + 13);
      if ((v34 & 0x8000000000000000) != 0)
      {
        ++*((_DWORD *)this + 41);
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        unsigned int v41 = 0;
      }
      else
      {
        unint64_t v35 = HIDWORD(v34);
        int v36 = -32;
        do
        {
          LODWORD(v35) = 2 * v35;
          int v37 = v36 + 1;
          if ((v35 & 0x80000000) != 0) {
            break;
          }
          unsigned int v38 = v36 + 32;
          ++v36;
        }
        while (v38 < 0x1E);
        *((_DWORD *)this + 41) += v37 + 33;
        HEVC_RBSP::flush_bits((uint64_t)this, v37 + 33);
        unsigned int v39 = *((_DWORD *)this + 27);
        *((_DWORD *)this + 41) += v37 + 32;
        unsigned int v40 = v39 >> -(char)v37;
        HEVC_RBSP::flush_bits((uint64_t)this, v37 + 32);
        unsigned int v41 = v40 + ~(-2 << (v37 + 31));
      }
      *(_DWORD *)(a3 + 4 * v33 + 16) = (-((v41 & 1) == 0) ^ ((v41 + 1) >> 1)) + ((v41 & 1) == 0);
      unint64_t v42 = *((void *)this + 13);
      if ((v42 & 0x8000000000000000) != 0)
      {
        ++*((_DWORD *)this + 41);
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        unsigned int v49 = 0;
      }
      else
      {
        unint64_t v43 = HIDWORD(v42);
        int v44 = -32;
        do
        {
          LODWORD(v43) = 2 * v43;
          int v45 = v44 + 1;
          if ((v43 & 0x80000000) != 0) {
            break;
          }
          unsigned int v46 = v44 + 32;
          ++v44;
        }
        while (v46 < 0x1E);
        *((_DWORD *)this + 41) += v45 + 33;
        HEVC_RBSP::flush_bits((uint64_t)this, v45 + 33);
        unsigned int v47 = *((_DWORD *)this + 27);
        *((_DWORD *)this + 41) += v45 + 32;
        unsigned int v48 = v47 >> -(char)v45;
        HEVC_RBSP::flush_bits((uint64_t)this, v45 + 32);
        unsigned int v49 = v48 + ~(-2 << (v45 + 31));
      }
      *(_DWORD *)(a3 + 4 * v33++ + 40) = (-((v49 & 1) == 0) ^ ((v49 + 1) >> 1)) + ((v49 & 1) == 0);
    }
    while (v33 <= *(_DWORD *)(a3 + 12));
  }
  unint64_t v50 = *((void *)this + 13);
  if ((v50 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned int v57 = 0;
  }
  else
  {
    unint64_t v51 = HIDWORD(v50);
    int v52 = -32;
    do
    {
      LODWORD(v51) = 2 * v51;
      int v53 = v52 + 1;
      if ((v51 & 0x80000000) != 0) {
        break;
      }
      unsigned int v54 = v52 + 32;
      ++v52;
    }
    while (v54 < 0x1E);
    *((_DWORD *)this + 41) += v53 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v53 + 33);
    unsigned int v55 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v53 + 32;
    unsigned int v56 = v55 >> -(char)v53;
    HEVC_RBSP::flush_bits((uint64_t)this, v53 + 32);
    unsigned int v57 = v56 + ~(-2 << (v53 + 31));
  }
  *(_DWORD *)(a3 + 64) = v57;
  unint64_t v58 = *((void *)this + 13);
  if ((v58 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned int v65 = 0;
  }
  else
  {
    unint64_t v59 = HIDWORD(v58);
    int v60 = -32;
    do
    {
      LODWORD(v59) = 2 * v59;
      int v61 = v60 + 1;
      if ((v59 & 0x80000000) != 0) {
        break;
      }
      unsigned int v62 = v60 + 32;
      ++v60;
    }
    while (v62 < 0x1E);
    *((_DWORD *)this + 41) += v61 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v61 + 33);
    unsigned int v63 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v61 + 32;
    unsigned int v64 = v63 >> -(char)v61;
    HEVC_RBSP::flush_bits((uint64_t)this, v61 + 32);
    unsigned int v65 = v64 + ~(-2 << (v61 + 31));
  }
  *(_DWORD *)(a3 + 68) = v65;
  return 1;
}

uint64_t HEVC_RBSP::parsePpsMultiLayerExtension(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v5 = v4 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)a2 = v5;
  uint64_t v6 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 1) = v6 < 0;
  if (v6 < 0)
  {
    unint64_t v7 = *(void *)(a1 + 104);
    *(_DWORD *)(a1 + 164) += 6;
    unint64_t v8 = v7 >> 58;
    HEVC_RBSP::flush_bits(a1, 6);
    *(_DWORD *)(a2 + 4) = v8;
  }
  unint64_t v9 = *(void *)(a1 + 104);
  if ((v9 & 0x8000000000000000) != 0)
  {
    ++*(_DWORD *)(a1 + 164);
    HEVC_RBSP::flush_bits(a1, 1);
    unsigned int v17 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    int v18 = (_DWORD *)(a2 + 8);
  }
  else
  {
    unint64_t v10 = HIDWORD(v9);
    int v11 = -32;
    do
    {
      LODWORD(v10) = 2 * v10;
      int v12 = v11 + 1;
      if ((v10 & 0x80000000) != 0) {
        break;
      }
      unsigned int v13 = v11 + 32;
      ++v11;
    }
    while (v13 < 0x1E);
    *(_DWORD *)(a1 + 164) += v12 + 33;
    HEVC_RBSP::flush_bits(a1, v12 + 33);
    unsigned int v14 = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 164) += v12 + 32;
    unsigned int v15 = v14 >> -(char)v12;
    HEVC_RBSP::flush_bits(a1, v12 + 32);
    uint64_t v16 = 0;
    unsigned int v17 = v15 + ~(-2 << (v12 + 31));
    *(_DWORD *)(a2 + 8) = v17;
    int v18 = (_DWORD *)(a2 + 8);
    if (v17 > 0x3F) {
      return v16;
    }
  }
  int v19 = malloc_type_malloc(4 * v17, 0x100004052888210uLL);
  *(void *)(a2 + 16) = v19;
  if (!v19) {
    return 0;
  }
  unsigned int v20 = malloc_type_malloc(*(unsigned int *)(a2 + 8), 0x100004077774924uLL);
  *(void *)(a2 + 24) = v20;
  if (!v20) {
    return 0;
  }
  unsigned int v21 = malloc_type_malloc(*(unsigned int *)(a2 + 8), 0x100004077774924uLL);
  *(void *)(a2 + 1056) = v21;
  if (!v21) {
    return 0;
  }
  unsigned int v22 = malloc_type_malloc(*(unsigned int *)(a2 + 8), 0x100004077774924uLL);
  *(void *)(a2 + 2088) = v22;
  if (!v22) {
    return 0;
  }
  if (*v18)
  {
    unint64_t v23 = 0;
    do
    {
      unint64_t v24 = *(void *)(a1 + 104);
      *(_DWORD *)(a1 + 164) += 6;
      unint64_t v25 = v24 >> 58;
      HEVC_RBSP::flush_bits(a1, 6);
      *(_DWORD *)(*(void *)(a2 + 16) + 4 * v23) = v25;
      unint64_t v26 = *(void *)(a1 + 104);
      ++*(_DWORD *)(a1 + 164);
      unint64_t v27 = v26 >> 63;
      HEVC_RBSP::flush_bits(a1, 1);
      *(unsigned char *)(*(void *)(a2 + 24) + v23) = v27;
      if (*(unsigned char *)(*(void *)(a2 + 24) + v23))
      {
        unint64_t v28 = *(void *)(a1 + 104);
        if ((v28 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v35 = 0;
        }
        else
        {
          unint64_t v29 = HIDWORD(v28);
          int v30 = -32;
          do
          {
            LODWORD(v29) = 2 * v29;
            int v31 = v30 + 1;
            if ((v29 & 0x80000000) != 0) {
              break;
            }
            unsigned int v32 = v30 + 32;
            ++v30;
          }
          while (v32 < 0x1E);
          *(_DWORD *)(a1 + 164) += v31 + 33;
          HEVC_RBSP::flush_bits(a1, v31 + 33);
          unsigned int v33 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v31 + 32;
          unsigned int v34 = v33 >> -(char)v31;
          HEVC_RBSP::flush_bits(a1, v31 + 32);
          unsigned int v35 = v34 + ~(-2 << (v31 + 31));
        }
        *(_DWORD *)(a2 + 4 * *(unsigned int *)(*(void *)(a2 + 16) + 4 * v23) + 32) = (-((v35 & 1) == 0) ^ ((v35 + 1) >> 1))
                                                                                       + ((v35 & 1) == 0);
        unint64_t v36 = *(void *)(a1 + 104);
        if ((v36 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v43 = 0;
        }
        else
        {
          unint64_t v37 = HIDWORD(v36);
          int v38 = -32;
          do
          {
            LODWORD(v37) = 2 * v37;
            int v39 = v38 + 1;
            if ((v37 & 0x80000000) != 0) {
              break;
            }
            unsigned int v40 = v38 + 32;
            ++v38;
          }
          while (v40 < 0x1E);
          *(_DWORD *)(a1 + 164) += v39 + 33;
          HEVC_RBSP::flush_bits(a1, v39 + 33);
          unsigned int v41 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v39 + 32;
          unsigned int v42 = v41 >> -(char)v39;
          HEVC_RBSP::flush_bits(a1, v39 + 32);
          unsigned int v43 = v42 + ~(-2 << (v39 + 31));
        }
        *(_DWORD *)(a2 + 4 * *(unsigned int *)(*(void *)(a2 + 16) + 4 * v23) + 288) = (-((v43 & 1) == 0) ^ ((v43 + 1) >> 1))
                                                                                        + ((v43 & 1) == 0);
        unint64_t v44 = *(void *)(a1 + 104);
        if ((v44 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v51 = 0;
        }
        else
        {
          unint64_t v45 = HIDWORD(v44);
          int v46 = -32;
          do
          {
            LODWORD(v45) = 2 * v45;
            int v47 = v46 + 1;
            if ((v45 & 0x80000000) != 0) {
              break;
            }
            unsigned int v48 = v46 + 32;
            ++v46;
          }
          while (v48 < 0x1E);
          *(_DWORD *)(a1 + 164) += v47 + 33;
          HEVC_RBSP::flush_bits(a1, v47 + 33);
          unsigned int v49 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v47 + 32;
          unsigned int v50 = v49 >> -(char)v47;
          HEVC_RBSP::flush_bits(a1, v47 + 32);
          unsigned int v51 = v50 + ~(-2 << (v47 + 31));
        }
        *(_DWORD *)(a2 + 4 * *(unsigned int *)(*(void *)(a2 + 16) + 4 * v23) + 544) = (-((v51 & 1) == 0) ^ ((v51 + 1) >> 1))
                                                                                        + ((v51 & 1) == 0);
        unint64_t v52 = *(void *)(a1 + 104);
        if ((v52 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v59 = 0;
        }
        else
        {
          unint64_t v53 = HIDWORD(v52);
          int v54 = -32;
          do
          {
            LODWORD(v53) = 2 * v53;
            int v55 = v54 + 1;
            if ((v53 & 0x80000000) != 0) {
              break;
            }
            unsigned int v56 = v54 + 32;
            ++v54;
          }
          while (v56 < 0x1E);
          *(_DWORD *)(a1 + 164) += v55 + 33;
          HEVC_RBSP::flush_bits(a1, v55 + 33);
          unsigned int v57 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v55 + 32;
          unsigned int v58 = v57 >> -(char)v55;
          HEVC_RBSP::flush_bits(a1, v55 + 32);
          unsigned int v59 = v58 + ~(-2 << (v55 + 31));
        }
        *(_DWORD *)(a2 + 4 * *(unsigned int *)(*(void *)(a2 + 16) + 4 * v23) + 800) = (-((v59 & 1) == 0) ^ ((v59 + 1) >> 1))
                                                                                        + ((v59 & 1) == 0);
      }
      unint64_t v60 = *(void *)(a1 + 104);
      ++*(_DWORD *)(a1 + 164);
      unint64_t v61 = v60 >> 63;
      HEVC_RBSP::flush_bits(a1, 1);
      *(unsigned char *)(*(void *)(a2 + 1056) + v23) = v61;
      if (*(unsigned char *)(*(void *)(a2 + 1056) + v23))
      {
        unint64_t v62 = *(void *)(a1 + 104);
        if ((v62 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v69 = 0;
        }
        else
        {
          unint64_t v63 = HIDWORD(v62);
          int v64 = -32;
          do
          {
            LODWORD(v63) = 2 * v63;
            int v65 = v64 + 1;
            if ((v63 & 0x80000000) != 0) {
              break;
            }
            unsigned int v66 = v64 + 32;
            ++v64;
          }
          while (v66 < 0x1E);
          *(_DWORD *)(a1 + 164) += v65 + 33;
          HEVC_RBSP::flush_bits(a1, v65 + 33);
          unsigned int v67 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v65 + 32;
          unsigned int v68 = v67 >> -(char)v65;
          HEVC_RBSP::flush_bits(a1, v65 + 32);
          unsigned int v69 = v68 + ~(-2 << (v65 + 31));
        }
        *(_DWORD *)(a2 + 4 * *(unsigned int *)(*(void *)(a2 + 16) + 4 * v23) + 1064) = (-((v69 & 1) == 0) ^ ((v69 + 1) >> 1))
                                                                                         + ((v69 & 1) == 0);
        unint64_t v70 = *(void *)(a1 + 104);
        if ((v70 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v77 = 0;
        }
        else
        {
          unint64_t v71 = HIDWORD(v70);
          int v72 = -32;
          do
          {
            LODWORD(v71) = 2 * v71;
            int v73 = v72 + 1;
            if ((v71 & 0x80000000) != 0) {
              break;
            }
            unsigned int v74 = v72 + 32;
            ++v72;
          }
          while (v74 < 0x1E);
          *(_DWORD *)(a1 + 164) += v73 + 33;
          HEVC_RBSP::flush_bits(a1, v73 + 33);
          unsigned int v75 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v73 + 32;
          unsigned int v76 = v75 >> -(char)v73;
          HEVC_RBSP::flush_bits(a1, v73 + 32);
          unsigned int v77 = v76 + ~(-2 << (v73 + 31));
        }
        *(_DWORD *)(a2 + 4 * *(unsigned int *)(*(void *)(a2 + 16) + 4 * v23) + 1320) = (-((v77 & 1) == 0) ^ ((v77 + 1) >> 1))
                                                                                         + ((v77 & 1) == 0);
        unint64_t v78 = *(void *)(a1 + 104);
        if ((v78 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v85 = 0;
        }
        else
        {
          unint64_t v79 = HIDWORD(v78);
          int v80 = -32;
          do
          {
            LODWORD(v79) = 2 * v79;
            int v81 = v80 + 1;
            if ((v79 & 0x80000000) != 0) {
              break;
            }
            unsigned int v82 = v80 + 32;
            ++v80;
          }
          while (v82 < 0x1E);
          *(_DWORD *)(a1 + 164) += v81 + 33;
          HEVC_RBSP::flush_bits(a1, v81 + 33);
          unsigned int v83 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v81 + 32;
          unsigned int v84 = v83 >> -(char)v81;
          HEVC_RBSP::flush_bits(a1, v81 + 32);
          unsigned int v85 = v84 + ~(-2 << (v81 + 31));
        }
        *(_DWORD *)(a2 + 4 * *(unsigned int *)(*(void *)(a2 + 16) + 4 * v23) + 1576) = (-((v85 & 1) == 0) ^ ((v85 + 1) >> 1))
                                                                                         + ((v85 & 1) == 0);
        unint64_t v86 = *(void *)(a1 + 104);
        if ((v86 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v93 = 0;
        }
        else
        {
          unint64_t v87 = HIDWORD(v86);
          int v88 = -32;
          do
          {
            LODWORD(v87) = 2 * v87;
            int v89 = v88 + 1;
            if ((v87 & 0x80000000) != 0) {
              break;
            }
            unsigned int v90 = v88 + 32;
            ++v88;
          }
          while (v90 < 0x1E);
          *(_DWORD *)(a1 + 164) += v89 + 33;
          HEVC_RBSP::flush_bits(a1, v89 + 33);
          unsigned int v91 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v89 + 32;
          unsigned int v92 = v91 >> -(char)v89;
          HEVC_RBSP::flush_bits(a1, v89 + 32);
          unsigned int v93 = v92 + ~(-2 << (v89 + 31));
        }
        *(_DWORD *)(a2 + 4 * *(unsigned int *)(*(void *)(a2 + 16) + 4 * v23) + 1832) = (-((v93 & 1) == 0) ^ ((v93 + 1) >> 1))
                                                                                         + ((v93 & 1) == 0);
      }
      unint64_t v94 = *(void *)(a1 + 104);
      ++*(_DWORD *)(a1 + 164);
      unint64_t v95 = v94 >> 63;
      HEVC_RBSP::flush_bits(a1, 1);
      *(unsigned char *)(*(void *)(a2 + 2088) + v23) = v95;
      if (*(unsigned char *)(*(void *)(a2 + 2088) + v23))
      {
        unint64_t v96 = *(void *)(a1 + 104);
        if ((v96 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v103 = 0;
        }
        else
        {
          unint64_t v97 = HIDWORD(v96);
          int v98 = -32;
          do
          {
            LODWORD(v97) = 2 * v97;
            int v99 = v98 + 1;
            if ((v97 & 0x80000000) != 0) {
              break;
            }
            unsigned int v100 = v98 + 32;
            ++v98;
          }
          while (v100 < 0x1E);
          *(_DWORD *)(a1 + 164) += v99 + 33;
          HEVC_RBSP::flush_bits(a1, v99 + 33);
          unsigned int v101 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v99 + 32;
          unsigned int v102 = v101 >> -(char)v99;
          HEVC_RBSP::flush_bits(a1, v99 + 32);
          unsigned int v103 = v102 + ~(-2 << (v99 + 31));
        }
        *(_DWORD *)(a2 + 4 * *(unsigned int *)(*(void *)(a2 + 16) + 4 * v23) + 2096) = (-((v103 & 1) == 0) ^ ((v103 + 1) >> 1))
                                                                                         + ((v103 & 1) == 0);
        unint64_t v104 = *(void *)(a1 + 104);
        if ((v104 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v111 = 0;
        }
        else
        {
          unint64_t v105 = HIDWORD(v104);
          int v106 = -32;
          do
          {
            LODWORD(v105) = 2 * v105;
            int v107 = v106 + 1;
            if ((v105 & 0x80000000) != 0) {
              break;
            }
            unsigned int v108 = v106 + 32;
            ++v106;
          }
          while (v108 < 0x1E);
          *(_DWORD *)(a1 + 164) += v107 + 33;
          HEVC_RBSP::flush_bits(a1, v107 + 33);
          unsigned int v109 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v107 + 32;
          unsigned int v110 = v109 >> -(char)v107;
          HEVC_RBSP::flush_bits(a1, v107 + 32);
          unsigned int v111 = v110 + ~(-2 << (v107 + 31));
        }
        *(_DWORD *)(a2 + 4 * *(unsigned int *)(*(void *)(a2 + 16) + 4 * v23) + 2352) = (-((v111 & 1) == 0) ^ ((v111 + 1) >> 1))
                                                                                         + ((v111 & 1) == 0);
        unint64_t v112 = *(void *)(a1 + 104);
        if ((v112 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v119 = 0;
        }
        else
        {
          unint64_t v113 = HIDWORD(v112);
          int v114 = -32;
          do
          {
            LODWORD(v113) = 2 * v113;
            int v115 = v114 + 1;
            if ((v113 & 0x80000000) != 0) {
              break;
            }
            unsigned int v116 = v114 + 32;
            ++v114;
          }
          while (v116 < 0x1E);
          *(_DWORD *)(a1 + 164) += v115 + 33;
          HEVC_RBSP::flush_bits(a1, v115 + 33);
          unsigned int v117 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v115 + 32;
          unsigned int v118 = v117 >> -(char)v115;
          HEVC_RBSP::flush_bits(a1, v115 + 32);
          unsigned int v119 = v118 + ~(-2 << (v115 + 31));
        }
        *(_DWORD *)(a2 + 4 * *(unsigned int *)(*(void *)(a2 + 16) + 4 * v23) + 2608) = (-((v119 & 1) == 0) ^ ((v119 + 1) >> 1))
                                                                                         + ((v119 & 1) == 0);
        unint64_t v120 = *(void *)(a1 + 104);
        if ((v120 & 0x8000000000000000) != 0)
        {
          ++*(_DWORD *)(a1 + 164);
          HEVC_RBSP::flush_bits(a1, 1);
          unsigned int v127 = 0;
        }
        else
        {
          unint64_t v121 = HIDWORD(v120);
          int v122 = -32;
          do
          {
            LODWORD(v121) = 2 * v121;
            int v123 = v122 + 1;
            if ((v121 & 0x80000000) != 0) {
              break;
            }
            unsigned int v124 = v122 + 32;
            ++v122;
          }
          while (v124 < 0x1E);
          *(_DWORD *)(a1 + 164) += v123 + 33;
          HEVC_RBSP::flush_bits(a1, v123 + 33);
          unsigned int v125 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v123 + 32;
          unsigned int v126 = v125 >> -(char)v123;
          HEVC_RBSP::flush_bits(a1, v123 + 32);
          unsigned int v127 = v126 + ~(-2 << (v123 + 31));
        }
        *(_DWORD *)(a2 + 4 * *(unsigned int *)(*(void *)(a2 + 16) + 4 * v23) + 2864) = (-((v127 & 1) == 0) ^ ((v127 + 1) >> 1))
                                                                                         + ((v127 & 1) == 0);
      }
      ++v23;
    }
    while (v23 < *v18);
  }
  unint64_t v128 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v129 = v128 >> 63;
  uint64_t v16 = 1;
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 3120) = v129;
  return v16;
}

uint64_t HEVC_RBSP::calcNumActiveRefLayerPics(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = 0;
  if (a3)
  {
    uint64_t v6 = *(void *)(a2 + 4448);
    if (v6)
    {
      uint64_t result = HEVC_RBSP::calcNumReflayerPics(0, a2, a3, a4);
      if (result)
      {
        if (!*(unsigned char *)(v6 + 714))
        {
          if (*(unsigned char *)(a5 + 38))
          {
            if (*(unsigned char *)(v6 + 745)
              || *(_WORD *)(*(void *)(v6 + 512) + 28 * *(unsigned __int16 *)(v6 + 2 * a3 + 580) + 18) == 1)
            {
              return 1;
            }
            else
            {
              return (*(_DWORD *)(a5 + 40) + 1);
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t HEVC_RBSP::calcNumReflayerPics(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(a2 + 4448);
  uint64_t v5 = *(void *)(v4 + 512);
  uint64_t v6 = *(unsigned __int16 *)(v4 + 2 * a3 + 580);
  uint64_t v7 = *(unsigned __int16 *)(v5 + 28 * v6 + 18);
  if (!*(_WORD *)(v5 + 28 * v6 + 18)) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v9 = *(void *)(v4 + 520);
  unint64_t v10 = (__int16 *)(*(void *)(v9 + 8 * v6) + 6);
  do
  {
    uint64_t v11 = *v10;
    v10 += 7;
    uint64_t v12 = *(unsigned __int16 *)(v4 + 2 * v11 + 580);
    int v13 = *(unsigned __int8 *)(v5 + 28 * v12 + 24);
    BOOL v14 = v13 < a4;
    BOOL v15 = v13 >= a4;
    if (!v14 && a4 != 0) {
      BOOL v15 = *(unsigned __int8 *)(*(void *)(v9 + 8 * v12) + 14 * v6) > a4;
    }
    uint64_t result = (result + v15);
    --v7;
  }
  while (v7);
  return result;
}

uint64_t HEVC_RBSP::calcReflayerPicIdc(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5 = *(void *)(a2 + 4448);
  uint64_t v6 = *(void *)(v5 + 512);
  uint64_t v7 = *(unsigned __int16 *)(v5 + 2 * a3 + 580);
  if (*(_WORD *)(v6 + 28 * v7 + 18))
  {
    uint64_t result = 0;
    int v9 = 0;
    uint64_t v10 = *(void *)(v5 + 520);
    uint64_t v11 = (__int16 *)(*(void *)(v10 + 8 * v7) + 6);
    do
    {
      uint64_t v12 = *v11;
      v11 += 7;
      uint64_t v13 = *(unsigned __int16 *)(v5 + 2 * v12 + 580);
      if (*(unsigned __int8 *)(v6 + 28 * v13 + 24) >= a5
        && (!a5 || *(unsigned __int8 *)(*(void *)(v10 + 8 * v13) + 14 * v7) > a5))
      {
        if (v9 == a4) {
          return result;
        }
        ++v9;
      }
      ++result;
    }
    while (*(unsigned __int16 *)(v6 + 28 * *(unsigned __int16 *)(v5 + 2 * a3 + 580) + 18) != result);
  }
  return 0xFFFFFFFFLL;
}

uint64_t HEVC_RBSP::calcRefPiclayerId(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  return *(__int16 *)(*(void *)(*(void *)(*(void *)(a2 + 4448) + 520)
                                              + 8 * *(unsigned __int16 *)(*(void *)(a2 + 4448) + 2 * a4 + 580))
                                  + 14 * *(unsigned int *)(a5 + 4 * a3 + 44)
                                  + 6);
}

unint64_t HEVC_RBSP::isSliceSegmentFirstInPicture(HEVC_RBSP *this)
{
  unint64_t v1 = *((void *)this + 13);
  ++*((_DWORD *)this + 41);
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  return v1 >> 63;
}

uint64_t HEVC_RBSP::parseRefPicListsModification(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 604) = v4 < 0;
  int v5 = 0;
  unsigned int v6 = *(_DWORD *)(a2 + 1900) - 1;
  if (*(_DWORD *)(a2 + 1900) != 1)
  {
    do
    {
      ++v5;
      BOOL v7 = v6 > 1;
      v6 >>= 1;
    }
    while (v7);
  }
  if ((v4 & 0x8000000000000000) == 0 || (*(_DWORD *)(a2 + 596) & 0x80000000) != 0)
  {
LABEL_4:
    if (*(_DWORD *)(a2 + 20))
    {
      return 1;
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 104);
      ++*(_DWORD *)(a1 + 164);
      uint64_t v8 = 1;
      HEVC_RBSP::flush_bits(a1, 1);
      *(unsigned char *)(a2 + 605) = v13 < 0;
      if (v13 < 0 && (*(_DWORD *)(a2 + 600) & 0x80000000) == 0)
      {
        for (uint64_t i = 168; ; ++i)
        {
          unsigned int v15 = *(_DWORD *)(a1 + 108);
          *(_DWORD *)(a1 + 164) += v5;
          unsigned int v16 = v15 >> (32 - v5);
          HEVC_RBSP::flush_bits(a1, v5);
          *(_DWORD *)(a2 + 4 * i) = v16;
          if (v16 >= 8) {
            break;
          }
          uint64_t v17 = i - 168;
          if (v17 >= *(int *)(a2 + 600)) {
            return 1;
          }
        }
        uint64_t v8 = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = 136316418;
          unsigned int v21 = "parseRefPicListsModification";
          __int16 v22 = 1024;
          int v23 = 4168;
          __int16 v24 = 2080;
          unint64_t v25 = "slice->list_entry_l1[ i ]";
          __int16 v26 = 1024;
          unsigned int v27 = v16;
          __int16 v28 = 1024;
          int v29 = 0;
          __int16 v30 = 1024;
          int v31 = 7;
          int v18 = &_os_log_internal;
          goto LABEL_21;
        }
      }
    }
  }
  else
  {
    uint64_t v9 = 152;
    while (1)
    {
      unsigned int v10 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v5;
      unsigned int v11 = v10 >> (32 - v5);
      HEVC_RBSP::flush_bits(a1, v5);
      *(_DWORD *)(a2 + 4 * v9) = v11;
      if (v11 >= 8) {
        break;
      }
      uint64_t v12 = v9 - 152;
      ++v9;
      if (v12 >= *(int *)(a2 + 596)) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 136316418;
      unsigned int v21 = "parseRefPicListsModification";
      __int16 v22 = 1024;
      int v23 = 4158;
      __int16 v24 = 2080;
      unint64_t v25 = "slice->list_entry_l0[ i ]";
      __int16 v26 = 1024;
      unsigned int v27 = v11;
      __int16 v28 = 1024;
      int v29 = 0;
      __int16 v30 = 1024;
      int v31 = 7;
      int v18 = &_os_log_internal;
LABEL_21:
      _os_log_impl(&dword_223977000, v18, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n", (uint8_t *)&v20, 0x2Eu);
      return 0;
    }
  }
  return v8;
}

BOOL HEVC_RBSP::parsePredWeightTable(HEVC_RBSP *this, uint64_t a2, _DWORD *a3, int a4)
{
  if (*(unsigned char *)(a2 + 22842))
  {
    int v146 = 1 << (*(_DWORD *)(a2 + 3636) + 7);
    int v6 = 1 << (*(unsigned char *)(a2 + 3640) + 7);
  }
  else
  {
    int v146 = 128;
    int v6 = 128;
  }
  unint64_t v7 = *((void *)this + 13);
  if ((v7 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    a3[186] = 0;
  }
  else
  {
    unint64_t v8 = HIDWORD(v7);
    int v9 = -32;
    do
    {
      LODWORD(v8) = 2 * v8;
      int v10 = v9 + 1;
      if ((v8 & 0x80000000) != 0) {
        break;
      }
      unsigned int v11 = v9 + 32;
      ++v9;
    }
    while (v11 < 0x1E);
    *((_DWORD *)this + 41) += v10 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v10 + 33);
    unsigned int v12 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v10 + 32;
    unsigned int v13 = v12 >> -(char)v10;
    HEVC_RBSP::flush_bits((uint64_t)this, v10 + 32);
    BOOL result = 0;
    unsigned int v15 = v13 + ~(-2 << (v10 + 31));
    a3[186] = v15;
    if (v15 > 7) {
      return result;
    }
  }
  if (!a4) {
    goto LABEL_19;
  }
  unint64_t v16 = *((void *)this + 13);
  if ((v16 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned int v23 = 0;
  }
  else
  {
    unint64_t v17 = HIDWORD(v16);
    int v18 = -32;
    do
    {
      LODWORD(v17) = 2 * v17;
      int v19 = v18 + 1;
      if ((v17 & 0x80000000) != 0) {
        break;
      }
      unsigned int v20 = v18 + 32;
      ++v18;
    }
    while (v20 < 0x1E);
    *((_DWORD *)this + 41) += v19 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v19 + 33);
    unsigned int v21 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v19 + 32;
    unsigned int v22 = v21 >> -(char)v19;
    HEVC_RBSP::flush_bits((uint64_t)this, v19 + 32);
    unsigned int v23 = v22 + ~(-2 << (v19 + 31));
  }
  BOOL result = 0;
  unsigned int v24 = (-((v23 & 1) == 0) ^ ((v23 + 1) >> 1)) + ((v23 & 1) == 0);
  a3[187] = v24;
  if (v24 + a3[186] <= 7)
  {
LABEL_19:
    LODWORD(v25) = a3[149];
    if ((v25 & 0x80000000) == 0)
    {
      uint64_t v26 = 752;
      do
      {
        unint64_t v27 = *((void *)this + 13);
        ++*((_DWORD *)this + 41);
        unint64_t v28 = v27 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        *((unsigned char *)a3 + v26) = v28;
        uint64_t v25 = (int)a3[149];
        uint64_t v29 = v26 - 752;
        ++v26;
      }
      while (v29 < v25);
    }
    int v148 = v6;
    if (a4)
    {
      if ((v25 & 0x80000000) != 0) {
        goto LABEL_76;
      }
      uint64_t v30 = 768;
      do
      {
        unint64_t v31 = *((void *)this + 13);
        ++*((_DWORD *)this + 41);
        unint64_t v32 = v31 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        *((unsigned char *)a3 + v30) = v32;
        uint64_t v25 = (int)a3[149];
        uint64_t v33 = v30 - 768;
        ++v30;
      }
      while (v33 < v25);
    }
    if ((v25 & 0x80000000) == 0)
    {
      uint64_t v34 = 0;
      unsigned int v35 = 0;
      int v36 = -v6;
      int v149 = v6 - 1;
      while (1)
      {
        if (*((unsigned char *)a3 + v34 + 752))
        {
          unsigned int v143 = v35;
          unint64_t v37 = *((void *)this + 13);
          if ((v37 & 0x8000000000000000) != 0)
          {
            ++*((_DWORD *)this + 41);
            HEVC_RBSP::flush_bits((uint64_t)this, 1);
            unsigned int v44 = 0;
          }
          else
          {
            unint64_t v38 = HIDWORD(v37);
            int v39 = -32;
            do
            {
              LODWORD(v38) = 2 * v38;
              int v40 = v39 + 1;
              if ((v38 & 0x80000000) != 0) {
                break;
              }
              unsigned int v41 = v39 + 32;
              ++v39;
            }
            while (v41 < 0x1E);
            *((_DWORD *)this + 41) += v40 + 33;
            HEVC_RBSP::flush_bits((uint64_t)this, v40 + 33);
            unsigned int v42 = *((_DWORD *)this + 27);
            *((_DWORD *)this + 41) += v40 + 32;
            unsigned int v43 = v42 >> -(char)v40;
            HEVC_RBSP::flush_bits((uint64_t)this, v40 + 32);
            unsigned int v44 = v43 + ~(-2 << (v40 + 31));
          }
          unint64_t v45 = &a3[v34];
          v45[196] = (-((v44 & 1) == 0) ^ ((v44 + 1) >> 1)) + ((v44 & 1) == 0);
          unint64_t v46 = *((void *)this + 13);
          if ((v46 & 0x8000000000000000) != 0)
          {
            ++*((_DWORD *)this + 41);
            HEVC_RBSP::flush_bits((uint64_t)this, 1);
            unsigned int v53 = 0;
          }
          else
          {
            unint64_t v47 = HIDWORD(v46);
            int v48 = -32;
            do
            {
              LODWORD(v47) = 2 * v47;
              int v49 = v48 + 1;
              if ((v47 & 0x80000000) != 0) {
                break;
              }
              unsigned int v50 = v48 + 32;
              ++v48;
            }
            while (v50 < 0x1E);
            *((_DWORD *)this + 41) += v49 + 33;
            HEVC_RBSP::flush_bits((uint64_t)this, v49 + 33);
            unsigned int v51 = *((_DWORD *)this + 27);
            *((_DWORD *)this + 41) += v49 + 32;
            unsigned int v52 = v51 >> -(char)v49;
            HEVC_RBSP::flush_bits((uint64_t)this, v49 + 32);
            unsigned int v53 = v52 + ~(-2 << (v49 + 31));
          }
          BOOL result = 0;
          signed int v54 = (-((v53 & 1) == 0) ^ ((v53 + 1) >> 1)) + ((v53 & 1) == 0);
          a3[v34 + 212] = v54;
          if (v45[196] != (char)v45[196]) {
            return result;
          }
          BOOL v55 = v54 >= -v146 && v54 < v146;
          if (!v55) {
            return result;
          }
          unsigned int v35 = v143 + 1;
        }
        if (*((unsigned char *)a3 + v34 + 768)) {
          break;
        }
LABEL_74:
        BOOL v55 = v34++ < (int)a3[149];
        if (!v55) {
          goto LABEL_77;
        }
      }
      uint64_t v56 = 0;
      unsigned int v144 = v35 + 2;
      char v57 = 1;
      while (1)
      {
        char v58 = v57;
        unint64_t v59 = *((void *)this + 13);
        if ((v59 & 0x8000000000000000) != 0)
        {
          ++*((_DWORD *)this + 41);
          HEVC_RBSP::flush_bits((uint64_t)this, 1);
          unsigned int v66 = 0;
        }
        else
        {
          unint64_t v60 = HIDWORD(v59);
          int v61 = -32;
          do
          {
            LODWORD(v60) = 2 * v60;
            int v62 = v61 + 1;
            if ((v60 & 0x80000000) != 0) {
              break;
            }
            unsigned int v63 = v61 + 32;
            ++v61;
          }
          while (v63 < 0x1E);
          *((_DWORD *)this + 41) += v62 + 33;
          HEVC_RBSP::flush_bits((uint64_t)this, v62 + 33);
          unsigned int v64 = *((_DWORD *)this + 27);
          *((_DWORD *)this + 41) += v62 + 32;
          unsigned int v65 = v64 >> -(char)v62;
          HEVC_RBSP::flush_bits((uint64_t)this, v62 + 32);
          unsigned int v66 = v65 + ~(-2 << (v62 + 31));
        }
        uint64_t v67 = (uint64_t)&a3[2 * v34 + v56];
        *(_DWORD *)(v67 + 912) = (-((v66 & 1) == 0) ^ ((v66 + 1) >> 1)) + ((v66 & 1) == 0);
        unint64_t v68 = *((void *)this + 13);
        if ((v68 & 0x8000000000000000) != 0)
        {
          ++*((_DWORD *)this + 41);
          HEVC_RBSP::flush_bits((uint64_t)this, 1);
          unsigned int v75 = 0;
        }
        else
        {
          unint64_t v69 = HIDWORD(v68);
          int v70 = -32;
          do
          {
            LODWORD(v69) = 2 * v69;
            int v71 = v70 + 1;
            if ((v69 & 0x80000000) != 0) {
              break;
            }
            unsigned int v72 = v70 + 32;
            ++v70;
          }
          while (v72 < 0x1E);
          *((_DWORD *)this + 41) += v71 + 33;
          HEVC_RBSP::flush_bits((uint64_t)this, v71 + 33);
          unsigned int v73 = *((_DWORD *)this + 27);
          *((_DWORD *)this + 41) += v71 + 32;
          unsigned int v74 = v73 >> -(char)v71;
          HEVC_RBSP::flush_bits((uint64_t)this, v71 + 32);
          unsigned int v75 = v74 + ~(-2 << (v71 + 31));
          int v6 = v148;
        }
        BOOL result = 0;
        signed int v76 = (-((v75 & 1) == 0) ^ ((v75 + 1) >> 1)) + ((v75 & 1) == 0);
        a3[2 * v34 + 260 + v56] = v76;
        int v77 = *(_DWORD *)(v67 + 912);
        char v78 = a3[187] + a3[186];
        int v79 = (((1 << v78) + v77) * v6) >> v78;
        BOOL v55 = v76 < v79;
        int v80 = v76 - v79 + v6;
        int v81 = v149;
        if (v55) {
          int v81 = v80;
        }
        if (v80 < v36) {
          int v81 = v36;
        }
        if (v77 != (char)v77) {
          return result;
        }
        if (v81 < v36 || v81 >= v6) {
          return result;
        }
        char v57 = 0;
        a3[2 * v34 + 396 + v56] = v81;
        uint64_t v56 = 1;
        if ((v58 & 1) == 0)
        {
          unsigned int v35 = v144;
          goto LABEL_74;
        }
      }
    }
LABEL_76:
    unsigned int v35 = 0;
LABEL_77:
    if (a3[5]) {
      return v35 < 0x19;
    }
    LODWORD(v83) = a3[150];
    if ((v83 & 0x80000000) == 0)
    {
      unsigned int v84 = v35;
      uint64_t v85 = 1168;
      do
      {
        unint64_t v86 = *((void *)this + 13);
        ++*((_DWORD *)this + 41);
        unint64_t v87 = v86 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        *((unsigned char *)a3 + v85) = v87;
        uint64_t v83 = (int)a3[150];
        uint64_t v88 = v85 - 1168;
        ++v85;
      }
      while (v88 < v83);
      unsigned int v35 = v84;
    }
    if (a4)
    {
      if ((v83 & 0x80000000) != 0) {
        return v35 < 0x19;
      }
      unsigned int v89 = v35;
      uint64_t v90 = 1184;
      do
      {
        unint64_t v91 = *((void *)this + 13);
        ++*((_DWORD *)this + 41);
        unint64_t v92 = v91 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        *((unsigned char *)a3 + v90) = v92;
        uint64_t v83 = (int)a3[150];
        uint64_t v93 = v90 - 1184;
        ++v90;
      }
      while (v93 < v83);
      unsigned int v35 = v89;
    }
    if ((v83 & 0x80000000) == 0)
    {
      uint64_t v94 = 0;
      int v95 = -v6;
      int v150 = v6 - 1;
      while (1)
      {
        if (*((unsigned char *)a3 + v94 + 1168))
        {
          unsigned int v96 = v35;
          unint64_t v97 = *((void *)this + 13);
          if ((v97 & 0x8000000000000000) != 0)
          {
            ++*((_DWORD *)this + 41);
            HEVC_RBSP::flush_bits((uint64_t)this, 1);
            unsigned int v104 = 0;
          }
          else
          {
            unint64_t v98 = HIDWORD(v97);
            int v99 = -32;
            do
            {
              LODWORD(v98) = 2 * v98;
              int v100 = v99 + 1;
              if ((v98 & 0x80000000) != 0) {
                break;
              }
              unsigned int v101 = v99 + 32;
              ++v99;
            }
            while (v101 < 0x1E);
            *((_DWORD *)this + 41) += v100 + 33;
            HEVC_RBSP::flush_bits((uint64_t)this, v100 + 33);
            unsigned int v102 = *((_DWORD *)this + 27);
            *((_DWORD *)this + 41) += v100 + 32;
            unsigned int v103 = v102 >> -(char)v100;
            HEVC_RBSP::flush_bits((uint64_t)this, v100 + 32);
            unsigned int v104 = v103 + ~(-2 << (v100 + 31));
            int v6 = v148;
          }
          unint64_t v105 = &a3[v94];
          v105[300] = (-((v104 & 1) == 0) ^ ((v104 + 1) >> 1)) + ((v104 & 1) == 0);
          unint64_t v106 = *((void *)this + 13);
          if ((v106 & 0x8000000000000000) != 0)
          {
            ++*((_DWORD *)this + 41);
            HEVC_RBSP::flush_bits((uint64_t)this, 1);
            unsigned int v113 = 0;
          }
          else
          {
            unint64_t v107 = HIDWORD(v106);
            int v108 = -32;
            do
            {
              LODWORD(v107) = 2 * v107;
              int v109 = v108 + 1;
              if ((v107 & 0x80000000) != 0) {
                break;
              }
              unsigned int v110 = v108 + 32;
              ++v108;
            }
            while (v110 < 0x1E);
            *((_DWORD *)this + 41) += v109 + 33;
            HEVC_RBSP::flush_bits((uint64_t)this, v109 + 33);
            unsigned int v111 = *((_DWORD *)this + 27);
            *((_DWORD *)this + 41) += v109 + 32;
            unsigned int v112 = v111 >> -(char)v109;
            HEVC_RBSP::flush_bits((uint64_t)this, v109 + 32);
            unsigned int v113 = v112 + ~(-2 << (v109 + 31));
            int v6 = v148;
          }
          BOOL result = 0;
          signed int v114 = (-((v113 & 1) == 0) ^ ((v113 + 1) >> 1)) + ((v113 & 1) == 0);
          a3[v94 + 316] = v114;
          if (v105[300] != (char)v105[300]) {
            return result;
          }
          if (v114 < -v146 || v114 >= v146) {
            return result;
          }
          unsigned int v35 = v96 + 1;
        }
        if (*((unsigned char *)a3 + v94 + 1184)) {
          break;
        }
LABEL_137:
        BOOL v55 = v94++ < (int)a3[150];
        if (!v55) {
          return v35 < 0x19;
        }
      }
      uint64_t v116 = 0;
      unsigned int v145 = v35 + 2;
      char v117 = 1;
      while (1)
      {
        char v118 = v117;
        unint64_t v119 = *((void *)this + 13);
        if ((v119 & 0x8000000000000000) != 0)
        {
          ++*((_DWORD *)this + 41);
          HEVC_RBSP::flush_bits((uint64_t)this, 1);
          unsigned int v126 = 0;
        }
        else
        {
          unint64_t v120 = HIDWORD(v119);
          int v121 = -32;
          do
          {
            LODWORD(v120) = 2 * v120;
            int v122 = v121 + 1;
            if ((v120 & 0x80000000) != 0) {
              break;
            }
            unsigned int v123 = v121 + 32;
            ++v121;
          }
          while (v123 < 0x1E);
          *((_DWORD *)this + 41) += v122 + 33;
          HEVC_RBSP::flush_bits((uint64_t)this, v122 + 33);
          unsigned int v124 = *((_DWORD *)this + 27);
          *((_DWORD *)this + 41) += v122 + 32;
          unsigned int v125 = v124 >> -(char)v122;
          HEVC_RBSP::flush_bits((uint64_t)this, v122 + 32);
          unsigned int v126 = v125 + ~(-2 << (v122 + 31));
          int v6 = v148;
        }
        uint64_t v127 = (uint64_t)&a3[2 * v94 + v116];
        *(_DWORD *)(v127 + 1328) = (-((v126 & 1) == 0) ^ ((v126 + 1) >> 1)) + ((v126 & 1) == 0);
        unint64_t v128 = *((void *)this + 13);
        if ((v128 & 0x8000000000000000) != 0)
        {
          ++*((_DWORD *)this + 41);
          HEVC_RBSP::flush_bits((uint64_t)this, 1);
          unsigned int v135 = 0;
        }
        else
        {
          unint64_t v129 = HIDWORD(v128);
          int v130 = -32;
          do
          {
            LODWORD(v129) = 2 * v129;
            int v131 = v130 + 1;
            if ((v129 & 0x80000000) != 0) {
              break;
            }
            unsigned int v132 = v130 + 32;
            ++v130;
          }
          while (v132 < 0x1E);
          *((_DWORD *)this + 41) += v131 + 33;
          HEVC_RBSP::flush_bits((uint64_t)this, v131 + 33);
          unsigned int v133 = *((_DWORD *)this + 27);
          *((_DWORD *)this + 41) += v131 + 32;
          unsigned int v134 = v133 >> -(char)v131;
          HEVC_RBSP::flush_bits((uint64_t)this, v131 + 32);
          unsigned int v135 = v134 + ~(-2 << (v131 + 31));
          int v6 = v148;
        }
        BOOL result = 0;
        signed int v136 = (-((v135 & 1) == 0) ^ ((v135 + 1) >> 1)) + ((v135 & 1) == 0);
        a3[2 * v94 + 364 + v116] = v136;
        int v137 = *(_DWORD *)(v127 + 1328);
        char v138 = a3[187] + a3[186];
        int v139 = (((1 << v138) + v137) * v6) >> v138;
        BOOL v55 = v136 < v139;
        int v140 = v136 - v139 + v6;
        int v141 = v150;
        if (v55) {
          int v141 = v140;
        }
        if (v140 < v95) {
          int v141 = v95;
        }
        if (v137 != (char)v137) {
          return result;
        }
        if (v141 < v95 || v141 >= v6) {
          return result;
        }
        char v117 = 0;
        a3[2 * v94 + 428 + v116] = v141;
        uint64_t v116 = 1;
        if ((v118 & 1) == 0)
        {
          unsigned int v35 = v145;
          goto LABEL_137;
        }
      }
    }
    return v35 < 0x19;
  }
  return result;
}

uint64_t HEVC_RBSP::parseSEI(int8x8_t *this, int a2, uint64_t a3, int *a4)
{
  while (1)
  {
    uint64_t v8 = HEVC_RBSP::parseSeiMessage((HEVC_RBSP *)this, a2, a3, a4);
    if (!v8) {
      break;
    }
    if (this[14].i32[0]
       + (vaddlv_u8((uint8x8_t)vcnt_s8(this[19])) & 0x78)
       + 8 * (this[20].i32[0] + this[17].i32[0] - this[15].i32[0])
       + 32 <= 8)
    {
      HEVC_RBSP::flush_bits((uint64_t)this, 1);
      HEVC_RBSP::flush_bits((uint64_t)this, this[14].i32[0] & 7);
      return v8;
    }
  }
  return v8;
}

uint64_t HEVC_RBSP::parseSeiMessage(HEVC_RBSP *this, int a2, uint64_t a3, int *a4)
{
  int v8 = *((unsigned __int8 *)this + 111);
  int v9 = *((_DWORD *)this + 41);
  if (v8 == 255)
  {
    int v10 = 0;
    do
    {
      *((_DWORD *)this + 41) = v9 + 16;
      HEVC_RBSP::flush_bits((uint64_t)this, 8);
      v10 += 255;
      int v8 = *((unsigned __int8 *)this + 111);
      int v9 = *((_DWORD *)this + 41);
      *((_DWORD *)this + 41) = v9 + 8;
    }
    while (v8 == 255);
  }
  else
  {
    int v10 = 0;
  }
  *((_DWORD *)this + 41) = v9 + 16;
  HEVC_RBSP::flush_bits((uint64_t)this, 8);
  int v11 = *((unsigned __int8 *)this + 111);
  int v12 = *((_DWORD *)this + 41);
  if (v11 == 255)
  {
    int v13 = 0;
    do
    {
      *((_DWORD *)this + 41) = v12 + 16;
      HEVC_RBSP::flush_bits((uint64_t)this, 8);
      v13 += 255;
      int v11 = *((unsigned __int8 *)this + 111);
      int v12 = *((_DWORD *)this + 41);
      *((_DWORD *)this + 41) = v12 + 8;
    }
    while (v11 == 255);
  }
  else
  {
    int v13 = 0;
  }
  *((_DWORD *)this + 41) = v12 + 16;
  HEVC_RBSP::flush_bits((uint64_t)this, 8);
  if (!(v11 + v13)) {
    return 0;
  }
  int v14 = v8 + v10;
  uint64_t result = HEVC_RBSP::parseSeiPayload(this, a2, a3, a4, v14, v11 + v13);
  if (result) {
    int v16 = v14;
  }
  else {
    int v16 = 5;
  }
  *a4 = v16;
  return result;
}

uint64_t HEVC_RBSP::parseSeiPayload(HEVC_RBSP *this, int a2, uint64_t a3, _DWORD *a4, int a5, int a6)
{
  int v6 = a6;
  if (a2 == 39)
  {
    switch(a5)
    {
      case 0:
        HEVC_RBSP::parseSeiBufferingPeriod(this, a3, (uint64_t)(a4 + 1));
        break;
      case 1:
        uint64_t active = HEVC_RBSP::parseSeiPicTiming(this, a3, (uint64_t)(a4 + 262));
        goto LABEL_28;
      case 2:
        HEVC_RBSP::parsePanScanRect(this, a4 + 276);
        break;
      case 3:
        if (a6)
        {
          do
          {
            *((_DWORD *)this + 41) += 8;
            HEVC_RBSP::flush_bits((uint64_t)this, 8);
            --v6;
          }
          while (v6);
        }
        break;
      case 4:
      case 5:
        goto LABEL_16;
      case 6:
        HEVC_RBSP::parseSeiRecoveryPoint(this, (uint64_t)(a4 + 293));
        break;
      default:
        if (a5 == 128)
        {
          uint64_t active = HEVC_RBSP::parseSeiStructureOfPicturesInfo(this, a4 + 296);
          goto LABEL_28;
        }
        if (a5 == 129)
        {
          uint64_t active = HEVC_RBSP::parseSeiActiveParameterSets((uint64_t)this, (uint64_t)(a4 + 4445));
LABEL_28:
          uint64_t v9 = active;
          goto LABEL_26;
        }
LABEL_16:
        if (a6)
        {
          do
          {
            *((_DWORD *)this + 41) += 8;
            HEVC_RBSP::flush_bits((uint64_t)this, 8);
            --v6;
          }
          while (v6);
        }
        break;
    }
  }
  else if (a5 == 132)
  {
    HEVC_RBSP::parseSeiDecodedPictureHash((uint64_t)this, a3, a4 + 4395);
  }
  else if (a5 == 3)
  {
    if (a6)
    {
      do
      {
        *((_DWORD *)this + 41) += 8;
        HEVC_RBSP::flush_bits((uint64_t)this, 8);
        --v6;
      }
      while (v6);
    }
  }
  else if (a6)
  {
    do
    {
      *((_DWORD *)this + 41) += 8;
      HEVC_RBSP::flush_bits((uint64_t)this, 8);
      --v6;
    }
    while (v6);
  }
  uint64_t v9 = 1;
LABEL_26:
  HEVC_RBSP::flush_bits((uint64_t)this, *((_DWORD *)this + 28) & 7);
  return v9;
}

uint64_t HEVC_RBSP::parseSeiBufferingPeriod(HEVC_RBSP *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + 22386;
  unint64_t v7 = *((void *)this + 13);
  if ((v7 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned int v14 = 0;
  }
  else
  {
    unint64_t v8 = HIDWORD(v7);
    int v9 = -32;
    do
    {
      LODWORD(v8) = 2 * v8;
      int v10 = v9 + 1;
      if ((v8 & 0x80000000) != 0) {
        break;
      }
      unsigned int v11 = v9 + 32;
      ++v9;
    }
    while (v11 < 0x1E);
    *((_DWORD *)this + 41) += v10 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v10 + 33);
    unsigned int v12 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v10 + 32;
    unsigned int v13 = v12 >> -(char)v10;
    HEVC_RBSP::flush_bits((uint64_t)this, v10 + 32);
    unsigned int v14 = v13 + ~(-2 << (v10 + 31));
  }
  uint64_t v15 = a2 + 22652;
  *(_DWORD *)(a3 + 4) = v14;
  if (*(unsigned char *)v6)
  {
    if (!*(unsigned char *)(a3 + 8)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  unint64_t v56 = *((void *)this + 13);
  ++*((_DWORD *)this + 41);
  unint64_t v57 = v56 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *(unsigned char *)(a3 + 8) = v57;
  if (v57)
  {
LABEL_9:
    int v16 = *(_DWORD *)(v6 + 34);
    unsigned int v17 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v16 + 1;
    unsigned int v18 = v17 >> ~(_BYTE)v16;
    HEVC_RBSP::flush_bits((uint64_t)this, v16 + 1);
    *(unsigned char *)(a3 + 9) = v18;
    int v19 = *(_DWORD *)(v6 + 38);
    unsigned int v20 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v19 + 1;
    unsigned int v21 = v20 >> ~(_BYTE)v19;
    HEVC_RBSP::flush_bits((uint64_t)this, v19 + 1);
    *(unsigned char *)(a3 + 10) = v21;
  }
LABEL_10:
  unint64_t v22 = *((void *)this + 13);
  ++*((_DWORD *)this + 41);
  unint64_t v23 = v22 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *(unsigned char *)(a3 + 11) = v23;
  int v24 = *(_DWORD *)(v6 + 34);
  unsigned int v25 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 41) += v24 + 1;
  LODWORD(v23) = v25 >> ~(_BYTE)v24;
  uint64_t result = HEVC_RBSP::flush_bits((uint64_t)this, v24 + 1);
  *(_DWORD *)(a3 + 12) = v23;
  int v27 = *(_DWORD *)(v6 + 30);
  int v28 = v27 + 1;
  unsigned int v29 = *(_DWORD *)v15;
  uint64_t v58 = v15;
  if (*(unsigned char *)(v15 + 153))
  {
    unsigned int v30 = 0;
    char v31 = 31 - v27;
    do
    {
      unsigned int v32 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v28;
      unsigned int v33 = v32 >> v31;
      HEVC_RBSP::flush_bits((uint64_t)this, v27 + 1);
      uint64_t v34 = v30;
      uint64_t v35 = a3 + 8 * v30;
      *(_DWORD *)(v35 + 16) = v33;
      unsigned int v36 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v28;
      unsigned int v37 = v36 >> v31;
      uint64_t result = HEVC_RBSP::flush_bits((uint64_t)this, v27 + 1);
      *(_DWORD *)(v35 + 272) = v37;
      if (*(unsigned char *)v6 || *(unsigned char *)(a3 + 8))
      {
        unsigned int v38 = *((_DWORD *)this + 27);
        *((_DWORD *)this + 41) += v28;
        unsigned int v39 = v38 >> v31;
        HEVC_RBSP::flush_bits((uint64_t)this, v27 + 1);
        uint64_t v40 = a3 + 8 * v34;
        *(_DWORD *)(v40 + 528) = v39;
        unsigned int v41 = *((_DWORD *)this + 27);
        *((_DWORD *)this + 41) += v28;
        unsigned int v42 = v41 >> v31;
        uint64_t result = HEVC_RBSP::flush_bits((uint64_t)this, v27 + 1);
        *(_DWORD *)(v40 + 784) = v42;
      }
      unsigned int v30 = v34 + 1;
    }
    while ((int)v34 + 1 <= v29);
  }
  if (*(unsigned char *)(v58 + 154))
  {
    unsigned int v43 = 0;
    char v44 = 31 - v27;
    do
    {
      unsigned int v45 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v28;
      unsigned int v46 = v45 >> v44;
      HEVC_RBSP::flush_bits((uint64_t)this, v28);
      uint64_t v47 = v43;
      uint64_t v48 = a3 + 8 * v43;
      *(_DWORD *)(v48 + 20) = v46;
      unsigned int v49 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v28;
      unsigned int v50 = v49 >> v44;
      uint64_t result = HEVC_RBSP::flush_bits((uint64_t)this, v28);
      *(_DWORD *)(v48 + 276) = v50;
      if (*(unsigned char *)v6 || *(unsigned char *)(a3 + 8))
      {
        unsigned int v51 = *((_DWORD *)this + 27);
        *((_DWORD *)this + 41) += v28;
        unsigned int v52 = v51 >> v44;
        HEVC_RBSP::flush_bits((uint64_t)this, v28);
        uint64_t v53 = a3 + 8 * v47;
        *(_DWORD *)(v53 + 532) = v52;
        unsigned int v54 = *((_DWORD *)this + 27);
        *((_DWORD *)this + 41) += v28;
        unsigned int v55 = v54 >> v44;
        uint64_t result = HEVC_RBSP::flush_bits((uint64_t)this, v28);
        *(_DWORD *)(v53 + 788) = v55;
      }
      unsigned int v43 = v47 + 1;
    }
    while ((int)v47 + 1 <= v29);
  }
  *(_DWORD *)a3 = 1;
  return result;
}

uint64_t HEVC_RBSP::parseSeiPicTiming(HEVC_RBSP *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + 22342;
  if (*(unsigned char *)(a2 + 22342))
  {
    unint64_t v7 = *((void *)this + 13);
    *((_DWORD *)this + 41) += 4;
    unint64_t v8 = v7 >> 60;
    HEVC_RBSP::flush_bits((uint64_t)this, 4);
    *(_DWORD *)(a3 + 4) = v8;
    unint64_t v9 = *((void *)this + 13);
    *((_DWORD *)this + 41) += 2;
    unint64_t v10 = v9 >> 62;
    HEVC_RBSP::flush_bits((uint64_t)this, 2);
    *(_DWORD *)(a3 + 8) = v10;
    unint64_t v11 = *((void *)this + 13);
    ++*((_DWORD *)this + 41);
    unint64_t v12 = v11 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(unsigned char *)(a3 + 12) = v12;
  }
  if (!*(unsigned char *)(v6 + 462)) {
    goto LABEL_29;
  }
  int v13 = *(_DWORD *)(v6 + 78);
  unsigned int v14 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 41) += v13 + 1;
  unsigned int v15 = v14 >> ~(_BYTE)v13;
  HEVC_RBSP::flush_bits((uint64_t)this, v13 + 1);
  *(_DWORD *)(a3 + 16) = v15;
  int v16 = *(_DWORD *)(v6 + 82);
  unsigned int v17 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 41) += v16 + 1;
  unsigned int v18 = v17 >> ~(_BYTE)v16;
  HEVC_RBSP::flush_bits((uint64_t)this, v16 + 1);
  *(_DWORD *)(a3 + 20) = v18;
  if (!*(unsigned char *)(v6 + 44)) {
    goto LABEL_29;
  }
  int v19 = *(_DWORD *)(v6 + 58);
  unsigned int v20 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 41) += v19 + 1;
  unsigned int v21 = v20 >> ~(_BYTE)v19;
  HEVC_RBSP::flush_bits((uint64_t)this, v19 + 1);
  *(_DWORD *)(a3 + 24) = v21;
  if (!*(unsigned char *)(v6 + 44) || !*(unsigned char *)(v6 + 54)) {
    goto LABEL_29;
  }
  unint64_t v22 = *((void *)this + 13);
  if ((v22 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(_DWORD *)(a3 + 28) = 0;
LABEL_14:
    uint64_t v32 = *((void *)this + 13);
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(unsigned char *)(a3 + 32) = v32 < 0;
    if (v32 < 0)
    {
      int v33 = *(_DWORD *)(v6 + 50);
      unsigned int v34 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v33;
      unsigned int v35 = v34 >> -(char)v33;
      HEVC_RBSP::flush_bits((uint64_t)this, v33);
      *(_DWORD *)(a3 + 36) = v35;
    }
    *(void *)(a3 + 40) = malloc_type_calloc(4uLL, (*(_DWORD *)(a3 + 28) + 1), 0x86C73775uLL);
    unsigned int v36 = 0;
    *(void *)(a3 + 48) = malloc_type_calloc(4uLL, (*(_DWORD *)(a3 + 28) + 1), 0xB7994AEuLL);
    do
    {
      unint64_t v37 = *((void *)this + 13);
      if ((v37 & 0x8000000000000000) != 0)
      {
        ++*((_DWORD *)this + 41);
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        unsigned int v44 = 0;
      }
      else
      {
        unint64_t v38 = HIDWORD(v37);
        int v39 = -32;
        do
        {
          LODWORD(v38) = 2 * v38;
          int v40 = v39 + 1;
          if ((v38 & 0x80000000) != 0) {
            break;
          }
          unsigned int v41 = v39 + 32;
          ++v39;
        }
        while (v41 < 0x1E);
        *((_DWORD *)this + 41) += v40 + 33;
        HEVC_RBSP::flush_bits((uint64_t)this, v40 + 33);
        unsigned int v42 = *((_DWORD *)this + 27);
        *((_DWORD *)this + 41) += v40 + 32;
        unsigned int v43 = v42 >> -(char)v40;
        HEVC_RBSP::flush_bits((uint64_t)this, v40 + 32);
        unsigned int v44 = v43 + ~(-2 << (v40 + 31));
      }
      *(_DWORD *)(*(void *)(a3 + 40) + 4 * v36) = v44;
      unsigned int v45 = *(_DWORD *)(a3 + 28);
      if (*(unsigned char *)(a3 + 32)) {
        BOOL v46 = 1;
      }
      else {
        BOOL v46 = v36 >= v45;
      }
      if (!v46)
      {
        int v47 = *(_DWORD *)(v6 + 50);
        unsigned int v48 = *((_DWORD *)this + 27);
        *((_DWORD *)this + 41) += v47 + 1;
        unsigned int v49 = v48 >> ~(_BYTE)v47;
        HEVC_RBSP::flush_bits((uint64_t)this, v47 + 1);
        *(_DWORD *)(*(void *)(a3 + 48) + 4 * v36) = v49;
        unsigned int v45 = *(_DWORD *)(a3 + 28);
      }
      ++v36;
    }
    while (v36 <= v45);
LABEL_29:
    uint64_t result = 1;
    *(_DWORD *)a3 = 1;
    return result;
  }
  unint64_t v23 = (_DWORD *)(a2 + 22896);
  unint64_t v24 = HIDWORD(v22);
  int v25 = -32;
  do
  {
    LODWORD(v24) = 2 * v24;
    int v26 = v25 + 1;
    if ((v24 & 0x80000000) != 0) {
      break;
    }
    unsigned int v27 = v25 + 32;
    ++v25;
  }
  while (v27 < 0x1E);
  *((_DWORD *)this + 41) += v26 + 33;
  HEVC_RBSP::flush_bits((uint64_t)this, v26 + 33);
  unsigned int v28 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 41) += v26 + 32;
  unsigned int v29 = v28 >> -(char)v26;
  HEVC_RBSP::flush_bits((uint64_t)this, v26 + 32);
  uint64_t result = 0;
  unsigned int v31 = v29 + ~(-2 << (v26 + 31));
  *(_DWORD *)(a3 + 28) = v31;
  if (v31 <= *v23 - 1) {
    goto LABEL_14;
  }
  return result;
}

uint64_t HEVC_RBSP::parsePanScanRect(HEVC_RBSP *this, _DWORD *a2)
{
  unint64_t v4 = *((void *)this + 13);
  if ((v4 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned int v11 = 0;
  }
  else
  {
    unint64_t v5 = HIDWORD(v4);
    int v6 = -32;
    do
    {
      LODWORD(v5) = 2 * v5;
      int v7 = v6 + 1;
      if ((v5 & 0x80000000) != 0) {
        break;
      }
      unsigned int v8 = v6 + 32;
      ++v6;
    }
    while (v8 < 0x1E);
    *((_DWORD *)this + 41) += v7 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v7 + 33);
    unsigned int v9 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v7 + 32;
    unsigned int v10 = v9 >> -(char)v7;
    HEVC_RBSP::flush_bits((uint64_t)this, v7 + 32);
    unsigned int v11 = v10 + ~(-2 << (v7 + 31));
  }
  a2[1] = v11;
  unint64_t v12 = *((void *)this + 13);
  ++*((_DWORD *)this + 41);
  unint64_t v13 = v12 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  a2[2] = v13;
  unint64_t v14 = *((void *)this + 13);
  if ((v14 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned int v21 = 0;
  }
  else
  {
    unint64_t v15 = HIDWORD(v14);
    int v16 = -32;
    do
    {
      LODWORD(v15) = 2 * v15;
      int v17 = v16 + 1;
      if ((v15 & 0x80000000) != 0) {
        break;
      }
      unsigned int v18 = v16 + 32;
      ++v16;
    }
    while (v18 < 0x1E);
    *((_DWORD *)this + 41) += v17 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v17 + 33);
    unsigned int v19 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v17 + 32;
    unsigned int v20 = v19 >> -(char)v17;
    HEVC_RBSP::flush_bits((uint64_t)this, v17 + 32);
    unsigned int v21 = v20 + ~(-2 << (v17 + 31));
  }
  unsigned int v22 = 0;
  a2[3] = v21;
  do
  {
    unint64_t v23 = *((void *)this + 13);
    if ((v23 & 0x8000000000000000) != 0)
    {
      ++*((_DWORD *)this + 41);
      HEVC_RBSP::flush_bits((uint64_t)this, 1);
      unsigned int v30 = 0;
    }
    else
    {
      unint64_t v24 = HIDWORD(v23);
      int v25 = -32;
      do
      {
        LODWORD(v24) = 2 * v24;
        int v26 = v25 + 1;
        if ((v24 & 0x80000000) != 0) {
          break;
        }
        unsigned int v27 = v25 + 32;
        ++v25;
      }
      while (v27 < 0x1E);
      *((_DWORD *)this + 41) += v26 + 33;
      HEVC_RBSP::flush_bits((uint64_t)this, v26 + 33);
      unsigned int v28 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v26 + 32;
      unsigned int v29 = v28 >> -(char)v26;
      HEVC_RBSP::flush_bits((uint64_t)this, v26 + 32);
      unsigned int v30 = v29 + ~(-2 << (v26 + 31));
    }
    a2[v22 + 4] = (-((v30 & 1) == 0) ^ ((v30 + 1) >> 1)) + ((v30 & 1) == 0);
    unint64_t v31 = *((void *)this + 13);
    if ((v31 & 0x8000000000000000) != 0)
    {
      ++*((_DWORD *)this + 41);
      HEVC_RBSP::flush_bits((uint64_t)this, 1);
      unsigned int v38 = 0;
    }
    else
    {
      unint64_t v32 = HIDWORD(v31);
      int v33 = -32;
      do
      {
        LODWORD(v32) = 2 * v32;
        int v34 = v33 + 1;
        if ((v32 & 0x80000000) != 0) {
          break;
        }
        unsigned int v35 = v33 + 32;
        ++v33;
      }
      while (v35 < 0x1E);
      *((_DWORD *)this + 41) += v34 + 33;
      HEVC_RBSP::flush_bits((uint64_t)this, v34 + 33);
      unsigned int v36 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v34 + 32;
      unsigned int v37 = v36 >> -(char)v34;
      HEVC_RBSP::flush_bits((uint64_t)this, v34 + 32);
      unsigned int v38 = v37 + ~(-2 << (v34 + 31));
    }
    a2[v22 + 7] = (-((v38 & 1) == 0) ^ ((v38 + 1) >> 1)) + ((v38 & 1) == 0);
    unint64_t v39 = *((void *)this + 13);
    if ((v39 & 0x8000000000000000) != 0)
    {
      ++*((_DWORD *)this + 41);
      HEVC_RBSP::flush_bits((uint64_t)this, 1);
      unsigned int v46 = 0;
    }
    else
    {
      unint64_t v40 = HIDWORD(v39);
      int v41 = -32;
      do
      {
        LODWORD(v40) = 2 * v40;
        int v42 = v41 + 1;
        if ((v40 & 0x80000000) != 0) {
          break;
        }
        unsigned int v43 = v41 + 32;
        ++v41;
      }
      while (v43 < 0x1E);
      *((_DWORD *)this + 41) += v42 + 33;
      HEVC_RBSP::flush_bits((uint64_t)this, v42 + 33);
      unsigned int v44 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v42 + 32;
      unsigned int v45 = v44 >> -(char)v42;
      HEVC_RBSP::flush_bits((uint64_t)this, v42 + 32);
      unsigned int v46 = v45 + ~(-2 << (v42 + 31));
    }
    a2[v22 + 10] = (-((v46 & 1) == 0) ^ ((v46 + 1) >> 1)) + ((v46 & 1) == 0);
    unint64_t v47 = *((void *)this + 13);
    if ((v47 & 0x8000000000000000) != 0)
    {
      ++*((_DWORD *)this + 41);
      HEVC_RBSP::flush_bits((uint64_t)this, 1);
      unsigned int v54 = 0;
    }
    else
    {
      unint64_t v48 = HIDWORD(v47);
      int v49 = -32;
      do
      {
        LODWORD(v48) = 2 * v48;
        int v50 = v49 + 1;
        if ((v48 & 0x80000000) != 0) {
          break;
        }
        unsigned int v51 = v49 + 32;
        ++v49;
      }
      while (v51 < 0x1E);
      *((_DWORD *)this + 41) += v50 + 33;
      HEVC_RBSP::flush_bits((uint64_t)this, v50 + 33);
      unsigned int v52 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v50 + 32;
      unsigned int v53 = v52 >> -(char)v50;
      HEVC_RBSP::flush_bits((uint64_t)this, v50 + 32);
      unsigned int v54 = v53 + ~(-2 << (v50 + 31));
    }
    a2[v22++ + 13] = (-((v54 & 1) == 0) ^ ((v54 + 1) >> 1)) + ((v54 & 1) == 0);
  }
  while (v22 <= a2[3]);
  unint64_t v55 = *((void *)this + 13);
  ++*((_DWORD *)this + 41);
  unint64_t v56 = v55 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  a2[16] = v56;
  *a2 = 1;
  return 1;
}

uint64_t HEVC_RBSP::parseSeiFillerPayload(uint64_t this, int a2)
{
  if (a2)
  {
    int v2 = a2;
    uint64_t v3 = this;
    do
    {
      *(_DWORD *)(v3 + 164) += 8;
      this = HEVC_RBSP::flush_bits(v3, 8);
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t HEVC_RBSP::parseSeiRecoveryPoint(HEVC_RBSP *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 13);
  if ((v4 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned int v11 = 0;
  }
  else
  {
    unint64_t v5 = HIDWORD(v4);
    int v6 = -32;
    do
    {
      LODWORD(v5) = 2 * v5;
      int v7 = v6 + 1;
      if ((v5 & 0x80000000) != 0) {
        break;
      }
      unsigned int v8 = v6 + 32;
      ++v6;
    }
    while (v8 < 0x1E);
    *((_DWORD *)this + 41) += v7 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v7 + 33);
    unsigned int v9 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v7 + 32;
    unsigned int v10 = v9 >> -(char)v7;
    HEVC_RBSP::flush_bits((uint64_t)this, v7 + 32);
    unsigned int v11 = v10 + ~(-2 << (v7 + 31));
  }
  *(_DWORD *)(a2 + 4) = (-((v11 & 1) == 0) ^ ((v11 + 1) >> 1)) + ((v11 & 1) == 0);
  unint64_t v12 = *((void *)this + 13);
  ++*((_DWORD *)this + 41);
  unint64_t v13 = v12 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *(unsigned char *)(a2 + 8) = v13;
  unint64_t v14 = *((void *)this + 13);
  ++*((_DWORD *)this + 41);
  unint64_t v15 = v14 >> 63;
  uint64_t result = HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *(unsigned char *)(a2 + 9) = v15;
  *(_DWORD *)a2 = 1;
  return result;
}

uint64_t HEVC_RBSP::parseSeiStructureOfPicturesInfo(HEVC_RBSP *this, _DWORD *a2)
{
  unint64_t v4 = *((void *)this + 13);
  if ((v4 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned int v11 = 0;
  }
  else
  {
    unint64_t v5 = HIDWORD(v4);
    int v6 = -32;
    do
    {
      LODWORD(v5) = 2 * v5;
      int v7 = v6 + 1;
      if ((v5 & 0x80000000) != 0) {
        break;
      }
      unsigned int v8 = v6 + 32;
      ++v6;
    }
    while (v8 < 0x1E);
    *((_DWORD *)this + 41) += v7 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v7 + 33);
    unsigned int v9 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v7 + 32;
    unsigned int v10 = v9 >> -(char)v7;
    HEVC_RBSP::flush_bits((uint64_t)this, v7 + 32);
    unsigned int v11 = v10 + ~(-2 << (v7 + 31));
  }
  a2[1] = v11;
  unint64_t v12 = *((void *)this + 13);
  if ((v12 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    a2[2] = 0;
    unsigned int v21 = a2 + 2;
  }
  else
  {
    unint64_t v13 = HIDWORD(v12);
    int v14 = -32;
    do
    {
      LODWORD(v13) = 2 * v13;
      int v15 = v14 + 1;
      if ((v13 & 0x80000000) != 0) {
        break;
      }
      unsigned int v16 = v14 + 32;
      ++v14;
    }
    while (v16 < 0x1E);
    *((_DWORD *)this + 41) += v15 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v15 + 33);
    unsigned int v17 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v15 + 32;
    unsigned int v18 = v17 >> -(char)v15;
    HEVC_RBSP::flush_bits((uint64_t)this, v15 + 32);
    uint64_t result = 0;
    unsigned int v20 = v18 + ~(-2 << (v15 + 31));
    a2[2] = v20;
    unsigned int v21 = a2 + 2;
    if (v20 > 0x3FF) {
      return result;
    }
  }
  unsigned int v22 = 0;
  do
  {
    unint64_t v23 = *((void *)this + 13);
    *((_DWORD *)this + 41) += 6;
    unint64_t v24 = v23 >> 58;
    HEVC_RBSP::flush_bits((uint64_t)this, 6);
    uint64_t v25 = v22;
    int v26 = &a2[v22];
    v26[3] = v24;
    unint64_t v27 = *((void *)this + 13);
    *((_DWORD *)this + 41) += 3;
    unint64_t v28 = v27 >> 61;
    HEVC_RBSP::flush_bits((uint64_t)this, 3);
    v26[1027] = v28;
    if ((v26[3] - 19) >= 2)
    {
      unint64_t v29 = *((void *)this + 13);
      if ((v29 & 0x8000000000000000) != 0)
      {
        ++*((_DWORD *)this + 41);
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        unsigned int v36 = 0;
      }
      else
      {
        unint64_t v30 = HIDWORD(v29);
        int v31 = -32;
        do
        {
          LODWORD(v30) = 2 * v30;
          int v32 = v31 + 1;
          if ((v30 & 0x80000000) != 0) {
            break;
          }
          unsigned int v33 = v31 + 32;
          ++v31;
        }
        while (v33 < 0x1E);
        *((_DWORD *)this + 41) += v32 + 33;
        HEVC_RBSP::flush_bits((uint64_t)this, v32 + 33);
        unsigned int v34 = *((_DWORD *)this + 27);
        *((_DWORD *)this + 41) += v32 + 32;
        unsigned int v35 = v34 >> -(char)v32;
        HEVC_RBSP::flush_bits((uint64_t)this, v32 + 32);
        unsigned int v36 = v35 + ~(-2 << (v32 + 31));
      }
      a2[v25 + 2051] = v36;
    }
    if (v25)
    {
      unint64_t v37 = *((void *)this + 13);
      if ((v37 & 0x8000000000000000) != 0)
      {
        ++*((_DWORD *)this + 41);
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        unsigned int v44 = 0;
      }
      else
      {
        unint64_t v38 = HIDWORD(v37);
        int v39 = -32;
        do
        {
          LODWORD(v38) = 2 * v38;
          int v40 = v39 + 1;
          if ((v38 & 0x80000000) != 0) {
            break;
          }
          unsigned int v41 = v39 + 32;
          ++v39;
        }
        while (v41 < 0x1E);
        *((_DWORD *)this + 41) += v40 + 33;
        HEVC_RBSP::flush_bits((uint64_t)this, v40 + 33);
        unsigned int v42 = *((_DWORD *)this + 27);
        *((_DWORD *)this + 41) += v40 + 32;
        unsigned int v43 = v42 >> -(char)v40;
        HEVC_RBSP::flush_bits((uint64_t)this, v40 + 32);
        unsigned int v44 = v43 + ~(-2 << (v40 + 31));
      }
      a2[v25 + 3075] = (-((v44 & 1) == 0) ^ ((v44 + 1) >> 1)) + ((v44 & 1) == 0);
    }
    unsigned int v22 = v25 + 1;
  }
  while ((v25 + 1) <= *v21);
  uint64_t result = 1;
  *a2 = 1;
  return result;
}

uint64_t HEVC_RBSP::parseSeiDecodedPictureHash(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6 = *(unsigned __int8 *)(a1 + 111);
  *(_DWORD *)(a1 + 164) += 8;
  uint64_t result = HEVC_RBSP::flush_bits(a1, 8);
  unint64_t v8 = 0;
  a3[1] = v6;
  for (uint64_t i = a3 + 2; ; i += 16)
  {
    switch(v6)
    {
      case 2:
        int v12 = *(_DWORD *)(a1 + 108);
        *(_DWORD *)(a1 + 164) += 32;
        int v13 = 32;
        goto LABEL_10;
      case 1:
        int v12 = *(unsigned __int16 *)(a1 + 110);
        *(_DWORD *)(a1 + 164) += 16;
        int v13 = 16;
LABEL_10:
        uint64_t result = HEVC_RBSP::flush_bits(a1, v13);
        a3[16 * v8 + 2] = v12;
        break;
      case 0:
        for (uint64_t j = 0; j != 16; ++j)
        {
          int v11 = *(unsigned __int8 *)(a1 + 111);
          *(_DWORD *)(a1 + 164) += 8;
          uint64_t result = HEVC_RBSP::flush_bits(a1, 8);
          i[j] = v11;
        }
        break;
    }
    if (!*(_DWORD *)(a2 + 3600) || v8 >= 2) {
      break;
    }
    ++v8;
    int v6 = a3[1];
  }
  *a3 = 1;
  return result;
}

uint64_t HEVC_RBSP::parseSeiActiveParameterSets(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(a1 + 104);
  *(_DWORD *)(a1 + 164) += 4;
  unint64_t v5 = v4 >> 60;
  HEVC_RBSP::flush_bits(a1, 4);
  *(_DWORD *)(a2 + 4) = v5;
  unint64_t v6 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v7 = v6 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 8) = v7;
  unint64_t v8 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v9 = v8 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 9) = v9;
  unint64_t v10 = *(void *)(a1 + 104);
  if ((v10 & 0x8000000000000000) != 0)
  {
    ++*(_DWORD *)(a1 + 164);
    HEVC_RBSP::flush_bits(a1, 1);
    *(_DWORD *)(a2 + 12) = 0;
  }
  else
  {
    unint64_t v11 = HIDWORD(v10);
    int v12 = -32;
    do
    {
      LODWORD(v11) = 2 * v11;
      int v13 = v12 + 1;
      if ((v11 & 0x80000000) != 0) {
        break;
      }
      unsigned int v14 = v12 + 32;
      ++v12;
    }
    while (v14 < 0x1E);
    *(_DWORD *)(a1 + 164) += v13 + 33;
    HEVC_RBSP::flush_bits(a1, v13 + 33);
    unsigned int v15 = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 164) += v13 + 32;
    unsigned int v16 = v15 >> -(char)v13;
    HEVC_RBSP::flush_bits(a1, v13 + 32);
    unsigned int v17 = v16 + ~(-2 << (v13 + 31));
    *(_DWORD *)(a2 + 12) = v17;
    if (v17 > 0xF)
    {
      BOOL v18 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v18)
      {
        int v29 = 136316418;
        unint64_t v30 = "parseSeiActiveParameterSets";
        __int16 v31 = 1024;
        int v32 = 4602;
        __int16 v33 = 2080;
        unsigned int v34 = "sei->num_sps_ids_minus1";
        __int16 v35 = 1024;
        unsigned int v36 = v17;
        __int16 v37 = 1024;
        int v38 = 0;
        __int16 v39 = 1024;
        int v40 = 15;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n", (uint8_t *)&v29, 0x2Eu);
        return 0;
      }
      return result;
    }
  }
  unsigned int v20 = 0;
  do
  {
    unint64_t v21 = *(void *)(a1 + 104);
    if ((v21 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v28 = 0;
    }
    else
    {
      unint64_t v22 = HIDWORD(v21);
      int v23 = -32;
      do
      {
        LODWORD(v22) = 2 * v22;
        int v24 = v23 + 1;
        if ((v22 & 0x80000000) != 0) {
          break;
        }
        unsigned int v25 = v23 + 32;
        ++v23;
      }
      while (v25 < 0x1E);
      *(_DWORD *)(a1 + 164) += v24 + 33;
      HEVC_RBSP::flush_bits(a1, v24 + 33);
      unsigned int v26 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v24 + 32;
      unsigned int v27 = v26 >> -(char)v24;
      HEVC_RBSP::flush_bits(a1, v24 + 32);
      unsigned int v28 = v27 + ~(-2 << (v24 + 31));
    }
    *(_DWORD *)(a2 + 4 * v20++ + 16) = v28;
  }
  while (v20 <= *(_DWORD *)(a2 + 12));
  uint64_t result = 1;
  *(_DWORD *)a2 = 1;
  return result;
}

void HevcReleaseSeiPicTiming(unsigned char *a1, uint64_t a2)
{
  if (a1[22804] && a1[22386] && a1[22396])
  {
    uint64_t v3 = *(void **)(a2 + 40);
    if (v3)
    {
      free(v3);
      *(void *)(a2 + 40) = 0;
    }
    unint64_t v4 = *(void **)(a2 + 48);
    if (v4)
    {
      free(v4);
      *(void *)(a2 + 48) = 0;
    }
  }
}

void *HevcCopyDependentSliceHeader(__int16 *a1, const void *a2)
{
  __int16 v3 = *a1;
  int v4 = *((_DWORD *)a1 + 1);
  char v5 = *((unsigned char *)a1 + 8);
  int v6 = *((_DWORD *)a1 + 3);
  uint64_t v7 = *((void *)a1 + 235);
  uint64_t v8 = *((void *)a1 + 234);
  uint64_t result = memcpy(a1, a2, 0x808uLL);
  *a1 = v3;
  *((_DWORD *)a1 + 1) = v4;
  *((unsigned char *)a1 + 8) = v5;
  *((_DWORD *)a1 + 3) = v6;
  *((void *)a1 + 234) = v8;
  *((void *)a1 + 235) = v7;
  return result;
}

uint64_t releaseTargetLayerIdLists(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 4448);
  int v2 = *(void **)(v1 + 3872);
  if (v2)
  {
    if (*(_WORD *)(v1 + 3866))
    {
      unint64_t v3 = 0;
      do
      {
        free(*(void **)(*(void *)(v1 + 3872) + 8 * v3));
        *(void *)(*(void *)(v1 + 3872) + 8 * v3++) = 0;
      }
      while (v3 < *(unsigned __int16 *)(v1 + 3866));
      int v2 = *(void **)(v1 + 3872);
    }
    free(v2);
    *(void *)(v1 + 3872) = 0;
  }
  int v4 = *(void **)(v1 + 3888);
  if (v4)
  {
    if (*(_WORD *)(v1 + 3866))
    {
      unint64_t v5 = 0;
      do
      {
        free(*(void **)(*(void *)(v1 + 3888) + 8 * v5));
        *(void *)(*(void *)(v1 + 3888) + 8 * v5++) = 0;
      }
      while (v5 < *(unsigned __int16 *)(v1 + 3866));
      int v4 = *(void **)(v1 + 3888);
    }
    free(v4);
    *(void *)(v1 + 3888) = 0;
  }
  free(*(void **)(v1 + 3880));
  *(void *)(v1 + 3880) = 0;
  free(*(void **)(v1 + 3896));
  *(void *)(v1 + 3896) = 0;
  return 0;
}

double HEVCReleaseSubLayerHRD(void **a1, int a2)
{
  if (a1)
  {
    if (a2)
    {
      free(a1[3]);
      a1[3] = 0;
      free(a1[2]);
      a1[2] = 0;
    }
    free(a1[4]);
    a1[4] = 0;
    free(a1[1]);
    a1[1] = 0;
    free(*a1);
    double result = 0.0;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t HEVC_RBSP::printProfileTierLevel(uint64_t this, uint64_t a2, uint64_t a3, int a4)
{
  if ((a4 - 1) <= 6)
  {
    uint64_t v4 = this;
    int v5 = a4 - 8;
    do
    {
      *(_DWORD *)(v4 + 164) += 2;
      this = HEVC_RBSP::flush_bits(v4, 2);
    }
    while (!__CFADD__(v5++, 1));
  }
  return this;
}

uint64_t HEVC_RBSP::printVpsDpbSize(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 4448);
  unint64_t v3 = *(unsigned __int16 *)(v2 + 3866);
  if (v3 >= 2)
  {
    uint64_t v4 = this;
    unint64_t v5 = v3 - 1;
    do
    {
      uint64_t v6 = *(void *)(v4 + 104);
      ++*(_DWORD *)(v4 + 164);
      this = HEVC_RBSP::flush_bits(v4, 1);
      *(unsigned char *)(v2 + 747) = v6 < 0;
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t HEVC_RBSP::printVPSextension(HEVC_RBSP *this, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 4448);
  int v5 = *(_DWORD *)(a2 + 16);
  if ((v5 - 1) <= 6)
  {
    int v6 = v5 - 8;
    do
    {
      *((_DWORD *)this + 41) += 2;
      HEVC_RBSP::flush_bits((uint64_t)this, 2);
      BOOL v7 = __CFADD__(v6++, 1);
    }
    while (!v7);
  }
  unsigned __int16 v8 = 1;
  if (*(_DWORD *)(a2 + 12))
  {
    if (*(unsigned char *)(a2 + 9)) {
      unsigned __int16 v8 = 2;
    }
    else {
      unsigned __int16 v8 = 1;
    }
  }
  unsigned int v9 = *(_DWORD *)(v4 + 708);
  while (v9 >= v8)
  {
    int v10 = *(_DWORD *)(a2 + 16);
    if ((v10 - 1) <= 6)
    {
      int v11 = v10 - 8;
      do
      {
        *((_DWORD *)this + 41) += 2;
        HEVC_RBSP::flush_bits((uint64_t)this, 2);
        BOOL v7 = __CFADD__(v11++, 1);
      }
      while (!v7);
      unsigned int v9 = *(_DWORD *)(v4 + 708);
    }
    ++v8;
  }
  if (*(unsigned __int16 *)(v4 + 3866) >= 2u)
  {
    unsigned int v12 = 1;
    int8x16_t v13 = (int8x16_t)xmmword_223ADA980;
    do
    {
      if (!*(unsigned char *)(v4 + 744))
      {
        int v14 = *(unsigned __int8 *)(a2 + 8);
        int v15 = *(_DWORD *)(a2 + 12);
        if (v15 || v14 == 0)
        {
          unint64_t v17 = 0;
          BOOL v18 = v14 != 0;
          BOOL v19 = (v15 + 1) - v18;
          uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(v19 - 1);
          unint64_t v21 = (v19 + 1) & 0xFFFFFFFFFFFFFFFELL;
          int32x2_t v22 = vadd_s32(vdup_n_s32(v18), (int32x2_t)0x100000000);
          uint32x2_t v23 = (uint32x2_t)vdup_n_s32(*(_DWORD *)(v4 + 3904));
          int v24 = (_DWORD *)(*(void *)(v4 + 512) + 28 * v18 + 32);
          do
          {
            int32x2_t v25 = vmovn_s64((int64x2_t)vcgeq_u64(v20, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v17), v13)));
            uint32x2_t v26 = vmin_u32((uint32x2_t)v22, v23);
            if (v25.i8[0]) {
              *(v24 - 7) = v26.i32[0];
            }
            if (v25.i8[4]) {
              *int v24 = v26.i32[1];
            }
            v17 += 2;
            int32x2_t v22 = vadd_s32(v22, (int32x2_t)0x200000002);
            v24 += 14;
          }
          while (v21 != v17);
        }
      }
      HEVC_RBSP::printVpsDpbSize((uint64_t)this, a2);
      int8x16_t v13 = (int8x16_t)xmmword_223ADA980;
      ++v12;
    }
    while (v12 < *(unsigned __int16 *)(v4 + 3866));
  }
  return 1;
}

HEVC_RBSP *HEVC_RBSP::printVPS(HEVC_RBSP *this, uint64_t a2)
{
  unint64_t v3 = this;
  uint64_t v4 = (unsigned char *)(a2 + 4392);
  int v5 = *(_DWORD *)(a2 + 16);
  if ((v5 - 1) <= 6)
  {
    int v6 = v5 - 8;
    do
    {
      *((_DWORD *)v3 + 41) += 2;
      this = (HEVC_RBSP *)HEVC_RBSP::flush_bits((uint64_t)v3, 2);
    }
    while (!__CFADD__(v6++, 1));
  }
  if (*v4) {
    **(unsigned char **)(a2 + 4424) = 1;
  }
  if (v4[48])
  {
    return (HEVC_RBSP *)HEVC_RBSP::printVPSextension(v3, a2);
  }
  return this;
}

uint64_t AppleAVDWrapperH264DecoderCreateInstance(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  VTVideoDecoderGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    BOOL v7 = "AppleAVDWrapperH264DecoderCreateInstance";
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
  *a3 = 0;
  return v4;
}

uint64_t EnsureH264PropertyDictionaryCreation()
{
  return pthread_once(&sCreateSupportedPropertyDictionaryOnce_1, h264_createSupportedPropertyDictionary);
}

void h264_createSupportedPropertyDictionary()
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  CFDictionaryRef v0 = (const __CFDictionary *)*MEMORY[0x263F1EBD8];
  uint64_t v1 = *MEMORY[0x263F1EB88];
  keys = (void *)*MEMORY[0x263F1EBC8];
  uint64_t v29 = v1;
  CFDictionaryRef v2 = (const __CFDictionary *)*MEMORY[0x263F1EB98];
  CFDictionaryRef v20 = v0;
  CFDictionaryRef v21 = v2;
  *(void *)values = h264_createFrameTypesArrayElement((const void *)*MEMORY[0x263F1E7E8]);
  *(void *)&values[8] = h264_createFrameTypesArrayElement((const void *)*MEMORY[0x263F1E800]);
  *(void *)&values[16] = h264_createFrameTypesArrayElement((const void *)*MEMORY[0x263F1E7F0]);
  CFDictionaryRef FrameTypesArrayElement = h264_createFrameTypesArrayElement((const void *)*MEMORY[0x263F1E7F8]);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  sH264OnlyTheseFrames = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)values, 4, MEMORY[0x263EFFF70]);
  if (!sH264OnlyTheseFrames && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v37 = "h264_createOnlyTheseFramesArray";
    __int16 v38 = 2080;
    __int16 v39 = "sH264OnlyTheseFrames";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", buf, 0x16u);
  }
  for (uint64_t i = 0; i != 32; i += 8)
  {
    int v5 = *(const void **)&values[i];
    if (v5)
    {
      CFRelease(v5);
      *(void *)&values[i] = 0;
    }
  }
  if (sH264OnlyTheseFrames)
  {
    *(void *)&long long v30 = *MEMORY[0x263F1EBB0];
    *(void *)&long long v22 = sH264OnlyTheseFrames;
    CFDictionaryRef v6 = CFDictionaryCreate(v3, (const void **)&keys, (const void **)&v20, 3, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v6)
    {
      BOOL v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
      __int16 v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
      CFDictionaryRef v9 = CFDictionaryCreate(v3, 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      CFDictionaryRef v10 = (const __CFDictionary *)*MEMORY[0x263F1EBE0];
      uint64_t v11 = *MEMORY[0x263F1E808];
      keys = (void *)*MEMORY[0x263F1E810];
      uint64_t v29 = v11;
      CFDictionaryRef v20 = v10;
      CFDictionaryRef v21 = v10;
      uint64_t v12 = *MEMORY[0x263F1EBA8];
      *(void *)&long long v30 = v1;
      *((void *)&v30 + 1) = v12;
      uint64_t v13 = *MEMORY[0x263F1E6C8];
      *(void *)&long long v22 = v2;
      *((void *)&v22 + 1) = v13;
      CFDictionaryRef v14 = CFDictionaryCreate(v3, (const void **)&keys, (const void **)&v20, 4, v7, v8);
      uint64_t v15 = *MEMORY[0x263F1E7A8];
      keys = (void *)*MEMORY[0x263F1E740];
      uint64_t v29 = v15;
      CFDictionaryRef v20 = v6;
      CFDictionaryRef v21 = v9;
      uint64_t v16 = *MEMORY[0x263F1E6E0];
      *(void *)&long long v30 = *MEMORY[0x263F1E7B8];
      *((void *)&v30 + 1) = v16;
      *(void *)&long long v22 = v9;
      *((void *)&v22 + 1) = v14;
      uint64_t v17 = *MEMORY[0x263F1E700];
      *(void *)&long long v31 = *MEMORY[0x263F1E780];
      *((void *)&v31 + 1) = v17;
      *(void *)&long long v23 = v9;
      *((void *)&v23 + 1) = v9;
      uint64_t v18 = *MEMORY[0x263F1E738];
      *(void *)&long long v32 = *MEMORY[0x263F1E758];
      *((void *)&v32 + 1) = v18;
      *(void *)&long long v24 = v9;
      *((void *)&v24 + 1) = v9;
      *(void *)&long long v33 = *MEMORY[0x263F1E7B0];
      *((void *)&v33 + 1) = @"NegotiationDetails";
      *(void *)&long long v25 = v9;
      *((void *)&v25 + 1) = v9;
      uint64_t v19 = *MEMORY[0x263F1E730];
      *(void *)&long long v34 = *MEMORY[0x263F1E6F8];
      *((void *)&v34 + 1) = v19;
      *(void *)&long long v26 = v9;
      *((void *)&v26 + 1) = v9;
      sH264VideoDecoderSupportedPropertyDictionary = (uint64_t)CFDictionaryCreate(v3, (const void **)&keys, (const void **)&v20, 12, v7, v8);
    }
    else
    {
      CFDictionaryRef v14 = 0;
      CFDictionaryRef v9 = 0;
    }
    if (sH264OnlyTheseFrames) {
      goto LABEL_16;
    }
  }
  else
  {
    CFDictionaryRef v9 = 0;
    CFDictionaryRef v14 = 0;
    CFDictionaryRef v6 = 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)values = 136315394;
    *(void *)&values[4] = "h264_createSupportedPropertyDictionary";
    *(_WORD *)&values[12] = 2080;
    *(void *)&values[14] = "sH264OnlyTheseFrames";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", values, 0x16u);
  }
LABEL_16:
  if (!v6 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)values = 136315394;
    *(void *)&values[4] = "h264_createSupportedPropertyDictionary";
    *(_WORD *)&values[12] = 2080;
    *(void *)&values[14] = "onlyTheseFramesDict";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", values, 0x16u);
  }
  if (!sH264VideoDecoderSupportedPropertyDictionary && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)values = 136315394;
    *(void *)&values[4] = "h264_createSupportedPropertyDictionary";
    *(_WORD *)&values[12] = 2080;
    *(void *)&values[14] = "sH264VideoDecoderSupportedPropertyDictionary";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", values, 0x16u);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t AppleAVDWrapperH264DecoderInvalidate()
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = (_DWORD *)DerivedStorage;
    CFDictionaryRef v2 = (pthread_mutex_t *)(DerivedStorage + 6432);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 6432));
    int v3 = v1[2204];
    if ((v3 - 1) >= 2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 136315394;
        CFDictionaryRef v10 = "AppleAVDWrapperH264DecoderInvalidate";
        __int16 v11 = 1024;
        int v12 = v3;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s called but plugin state is %d", (uint8_t *)&v9, 0x12u);
      }
    }
    else
    {
      v1[2204] = 3;
      AppleAVDWrapperH264DecoderCleanUp();
    }
    pthread_mutex_unlock(v2);
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v5)
    {
      int v6 = v1[1651];
      int v7 = v1[1302];
      int v8 = v1[1303];
      int v9 = 136316162;
      CFDictionaryRef v10 = "AppleAVDWrapperH264DecoderInvalidate";
      __int16 v11 = 1024;
      int v12 = v6;
      __int16 v13 = 1024;
      int v14 = v7;
      __int16 v15 = 1024;
      int v16 = v8;
      __int16 v17 = 2048;
      uint64_t v18 = v1;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: AVC, encryptionScheme %d, %d x %d, session: %p", (uint8_t *)&v9, 0x28u);
      return 0;
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      CFDictionaryRef v10 = "AppleAVDWrapperH264DecoderInvalidate";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s called with invalid storage", (uint8_t *)&v9, 0xCu);
    }
    return 4294954393;
  }
  return result;
}

void AppleAVDWrapperH264DecoderFinalize()
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v10 = 136315138;
    __int16 v11 = "AppleAVDWrapperH264DecoderFinalize";
    uint64_t v4 = &_os_log_internal;
    BOOL v5 = "AppleAVD: %s called with invalid storage";
    uint32_t v6 = 12;
    goto LABEL_11;
  }
  uint64_t v1 = (_DWORD *)DerivedStorage;
  CFDictionaryRef v2 = (pthread_mutex_t *)(DerivedStorage + 6432);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 6432));
  int v3 = v1[2204];
  if ((v3 - 1) >= 3)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      __int16 v11 = "AppleAVDWrapperH264DecoderFinalize";
      __int16 v12 = 1024;
      int v13 = v3;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s called but plugin state is %d", (uint8_t *)&v10, 0x12u);
    }
  }
  else if (v3 != 3)
  {
    AppleAVDWrapperH264DecoderCleanUp();
  }
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = v1[1651];
    int v8 = v1[1302];
    int v9 = v1[1303];
    int v10 = 136316162;
    __int16 v11 = "AppleAVDWrapperH264DecoderFinalize";
    __int16 v12 = 1024;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    __int16 v16 = 1024;
    int v17 = v9;
    __int16 v18 = 2048;
    uint64_t v19 = v1;
    uint64_t v4 = &_os_log_internal;
    BOOL v5 = "AppleAVD: %s() codecType: AVC, encryptionScheme %d, %d x %d, session: %p";
    uint32_t v6 = 40;
LABEL_11:
    _os_log_impl(&dword_223977000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v10, v6);
  }
}

__CFString *AppleAVDWrapperH264DecoderCopyDebugDescription(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CFStringAppendFormat(Mutable, 0, @"<AppleAVD_H264VideoDecoder %p>", a1);
  return Mutable;
}

uint64_t AppleAVDWrapperH264DecoderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E740]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E6F8]))
    {
LABEL_5:
      int v9 = (const void *)*MEMORY[0x263EFFB40];
LABEL_6:
      int v10 = (void *)CFRetain(v9);
LABEL_7:
      __int16 v11 = v10;
      uint64_t result = 0;
      *a4 = v11;
      return result;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E730]))
    {
      int v18 = 0;
      uint64_t v13 = *(void *)(DerivedStorage + 5184);
      if (!v13)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v20 = "AppleAVDWrapperH264DecoderCopyProperty";
          __int16 v14 = &_os_log_internal;
          int v15 = "AppleAVD: WARNING: %s() - trying to get FrameReceiverThreadPriority before videoContext was created!\n";
          goto LABEL_22;
        }
        return 4294954385;
      }
      if (AppleAVDGetParameter(v13, 69, (uint64_t)&v18))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v20 = "AppleAVDWrapperH264DecoderCopyProperty";
          __int16 v14 = &_os_log_internal;
          int v15 = "AppleAVD: ERROR: %s() - AppleAVDGetParameter call for kAppleAVDGetFrameReceiverThreadPriority returned ERROR\n";
LABEL_22:
          _os_log_impl(&dword_223977000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
          return 4294954385;
        }
        return 4294954385;
      }
      int v17 = &v18;
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E780]))
      {
        pthread_once(&sCreateSuggestedQualityOfServiceTiersOnce_0, myCreateSuggestedQualityOfServiceTiers_0);
        int v9 = (const void *)myVideoDecoderSuggestedQualityOfServiceTiers_0;
        if (!myVideoDecoderSuggestedQualityOfServiceTiers_0) {
          return FigSignalErrorAt3();
        }
        goto LABEL_6;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7A8]))
      {
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7B0])) {
          return 4294954396;
        }
        goto LABEL_5;
      }
      int v17 = (int *)(DerivedStorage + 6600);
    }
    int v10 = CFNumberCreate(a3, kCFNumberSInt32Type, v17);
    goto LABEL_7;
  }
  switch(*(_DWORD *)(DerivedStorage + 6716))
  {
    case 0:
      int v8 = (CFTypeRef *)MEMORY[0x263F1E7E8];
      break;
    case 1:
      int v8 = (CFTypeRef *)MEMORY[0x263F1E800];
      break;
    case 2:
      int v8 = (CFTypeRef *)MEMORY[0x263F1E7F0];
      break;
    case 3:
      int v8 = (CFTypeRef *)MEMORY[0x263F1E7F8];
      break;
    default:
      return 4294954396;
  }
  CFTypeRef v16 = *v8;
  CFRetain(*v8);
  uint64_t result = 0;
  *a4 = v16;
  return result;
}

uint64_t AppleAVDWrapperH264DecoderSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  valuePtr[1] = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E740]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E780])) {
      return FigSignalErrorAt3();
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7A8]))
    {
      LODWORD(valuePtr[0]) = 0;
      CFNumberGetValue(a3, kCFNumberSInt32Type, valuePtr);
      if (LODWORD(valuePtr[0]) <= 0x2A && ((1 << SLOBYTE(valuePtr[0])) & 0x40000100002) != 0)
      {
        *(unsigned char *)(DerivedStorage + 6600) = valuePtr[0];
        uint64_t v8 = *(void *)(DerivedStorage + 5184);
        if (!v8)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            long long v33 = "AppleAVDWrapperH264DecoderSetProperty";
            int v9 = &_os_log_internal;
            int v10 = "AppleAVD: WARNING: %s() - trying to set kAppleAVDSetUsageMode before videoContext was created!\n";
            goto LABEL_28;
          }
          return 4294954385;
        }
        if (AppleAVDSetParameter(v8, 18, (unsigned __int8 *)(DerivedStorage + 6600)))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            long long v33 = "AppleAVDWrapperH264DecoderSetProperty";
            int v9 = &_os_log_internal;
            int v10 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDSetUsageMode returned ERROR\n";
LABEL_28:
            _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0xCu);
            return 4294954385;
          }
          return 4294954385;
        }
      }
      __int16 v11 = *(FILE **)(DerivedStorage + 8840);
      if (v11) {
        fprintf(v11, "%d usage %d\n");
      }
      return 0;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7B8]))
    {
      LODWORD(valuePtr[0]) = 0;
      if (a3)
      {
        CFNumberGetValue(a3, kCFNumberSInt32Type, valuePtr);
        if (LODWORD(valuePtr[0]) != 2)
        {
          uint64_t v18 = *(void *)(DerivedStorage + 5184);
          if (!v18)
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 4294954385;
            }
            *(_DWORD *)buf = 136315138;
            long long v33 = "AppleAVDWrapperH264DecoderSetProperty";
            int v9 = &_os_log_internal;
            int v10 = "AppleAVD: WARNING: %s() - trying to set kAppleAVDSetVRAType before videoContext was created!\n";
            goto LABEL_28;
          }
          if (AppleAVDSetParameter(v18, 31, (unsigned __int8 *)valuePtr))
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 4294954385;
            }
            *(_DWORD *)buf = 136315138;
            long long v33 = "AppleAVDWrapperH264DecoderSetProperty";
            int v9 = &_os_log_internal;
            int v10 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDSetVRAType returned ERROR\n";
            goto LABEL_28;
          }
          long long v23 = *(FILE **)(DerivedStorage + 8840);
          if (v23) {
            fprintf(v23, "%d vratype %d\n");
          }
          return 0;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: AppleAVD_H264VideoDecoder - AppleAVDSetParameter kAppleAVDSetVRAType: Unsupported VRA Type 2\n", buf, 2u);
        }
      }
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E6E0]))
    {
      valuePtr[0] = 0;
      if (a3)
      {
        CFTypeID v12 = CFGetTypeID(a3);
        if (v12 == CFDictionaryGetTypeID())
        {
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x263F1E810]);
          if (Value)
          {
            CFNumberGetValue(Value, kCFNumberIntType, valuePtr);
            CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x263F1E808]);
            if (v14)
            {
              CFNumberGetValue(v14, kCFNumberIntType, (char *)valuePtr + 4);
              int v15 = valuePtr[0];
              if (LODWORD(valuePtr[0]) != 1080)
              {
                int v16 = HIDWORD(valuePtr[0]);
                if (HIDWORD(valuePtr[0]) != 1080 && ((LOBYTE(valuePtr[0]) | BYTE4(valuePtr[0])) & 0xF) != 0)
                {
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136315650;
                    long long v33 = "AppleAVDWrapperH264DecoderSetProperty";
                    __int16 v34 = 1024;
                    int v35 = v15;
                    __int16 v36 = 1024;
                    int v37 = v16;
                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() - Non-mod16 VRA dimensions with width %d, height %d\n", buf, 0x18u);
                  }
                  if (*(_DWORD *)(DerivedStorage + 8816) == 2 && valuePtr[0] != *(void *)(DerivedStorage + 5216)) {
                    return 4294954385;
                  }
                }
              }
              uint64_t v17 = *(void *)(DerivedStorage + 5184);
              if (!v17)
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  return 4294954385;
                }
                *(_DWORD *)buf = 136315138;
                long long v33 = "AppleAVDWrapperH264DecoderSetProperty";
                int v9 = &_os_log_internal;
                int v10 = "AppleAVD: WARNING: %s() - trying to set kAppleAVDSetVRADimensions before videoContext was created!\n";
                goto LABEL_28;
              }
              if (AppleAVDSetParameter(v17, 32, (unsigned __int8 *)valuePtr))
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  return 4294954385;
                }
                *(_DWORD *)buf = 136315138;
                long long v33 = "AppleAVDWrapperH264DecoderSetProperty";
                int v9 = &_os_log_internal;
                int v10 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDSetVRADimensions returned ERROR\n";
                goto LABEL_28;
              }
              long long v30 = *(FILE **)(DerivedStorage + 8840);
              if (v30) {
                fprintf(v30, "%d vra_res %d %d\n");
              }
              return 0;
            }
          }
        }
      }
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E700]))
    {
      LODWORD(valuePtr[0]) = 0;
      if (a3)
      {
        CFTypeID v19 = CFGetTypeID(a3);
        if (v19 == CFNumberGetTypeID())
        {
          CFNumberGetValue(a3, kCFNumberSInt32Type, valuePtr);
          int v20 = valuePtr[0];
          *(_DWORD *)(DerivedStorage + 8800) = valuePtr[0];
          if (v20)
          {
            uint64_t v21 = *(void *)(DerivedStorage + 5184);
            if (!v21)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 4294954385;
              }
              *(_DWORD *)buf = 136315138;
              long long v33 = "AppleAVDWrapperH264DecoderSetProperty";
              int v9 = &_os_log_internal;
              int v10 = "AppleAVD: WARNING: %s() - trying to set kAppleAVDEnableIOFence before videoContext was created!\n";
              goto LABEL_28;
            }
            if (AppleAVDSetParameter(v21, 22, (unsigned __int8 *)(DerivedStorage + 8800)))
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return 4294954385;
              }
              *(_DWORD *)buf = 136315138;
              long long v33 = "AppleAVDWrapperH264DecoderSetProperty";
              int v9 = &_os_log_internal;
              int v10 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDEnableIOFence returned ERROR\n";
              goto LABEL_28;
            }
          }
          long long v25 = *(FILE **)(DerivedStorage + 8840);
          if (v25) {
            fprintf(v25, "%d enableIOFenceMode %d\n");
          }
          return 0;
        }
      }
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E758]))
    {
      if (a3)
      {
        int v22 = CFBooleanGetValue(a3);
        uint64_t result = 0;
        *(_DWORD *)(DerivedStorage + 8808) = v22;
        return result;
      }
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E738]))
      {
        if (!CFEqual(a2, @"NegotiationDetails"))
        {
          if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7B0])) {
            return 4294954395;
          }
          else {
            return 4294954396;
          }
        }
        uint64_t result = (uint64_t)malloc_type_malloc(0x3E9uLL, 0xC88B6D8BuLL);
        if (!result) {
          return result;
        }
        long long v26 = (char *)result;
        LODWORD(valuePtr[0]) = 0;
        CFTypeID TypeID = CFStringGetTypeID();
        int v28 = 0;
        if (TypeID == CFGetTypeID(a3))
        {
          if (CFStringGetCString((CFStringRef)a3, v26, 1001, 0x8000100u)
            && (size_t v29 = strnlen(v26, 0x3E9uLL), strnstr(v26, "RVRA1:", v29)))
          {
            int v28 = 1;
            LODWORD(valuePtr[0]) = 1;
          }
          else
          {
            int v28 = 0;
          }
        }
        free(v26);
        *(_DWORD *)(DerivedStorage + 6608) = v28;
        uint64_t v31 = *(void *)(DerivedStorage + 5184);
        if (!v31)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 4294954385;
          }
          *(_DWORD *)buf = 136315138;
          long long v33 = "AppleAVDWrapperH264DecoderSetProperty";
          int v9 = &_os_log_internal;
          int v10 = "AppleAVD: WARNING: %s() - trying to set kAppleAVDEnableRVRA before videoContext was created!\n";
          goto LABEL_28;
        }
        uint64_t result = AppleAVDSetParameter(v31, 36, (unsigned __int8 *)valuePtr);
        if (!result) {
          return result;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          long long v33 = "AppleAVDWrapperH264DecoderSetProperty";
          int v9 = &_os_log_internal;
          int v10 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDEnableRVRA returned ERROR\n";
          goto LABEL_28;
        }
        return 4294954385;
      }
      if (a3)
      {
        int v24 = CFBooleanGetValue(a3);
        uint64_t result = 0;
        *(_DWORD *)(DerivedStorage + 8804) = v24;
        return result;
      }
    }
    return 4294954394;
  }
  if (!a3 || CFEqual(a3, (CFTypeRef)*MEMORY[0x263F1E7E8]))
  {
    uint64_t result = 0;
    *(_DWORD *)(DerivedStorage + 6716) = 0;
    return result;
  }
  if (CFEqual(a3, (CFTypeRef)*MEMORY[0x263F1E800]))
  {
    uint64_t result = 0;
    int v7 = 1;
LABEL_32:
    *(_DWORD *)(DerivedStorage + 6716) = v7;
    return result;
  }
  if (CFEqual(a3, (CFTypeRef)*MEMORY[0x263F1E7F0]))
  {
    uint64_t result = 0;
    int v7 = 2;
    goto LABEL_32;
  }
  if (CFEqual(a3, (CFTypeRef)*MEMORY[0x263F1E7F8]))
  {
    uint64_t result = 0;
    int v7 = 3;
    goto LABEL_32;
  }
  return 4294954396;
}

uint64_t AppleAVDWrapperH264DecoderCleanUp()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(v1 + 5184);
  if (v2)
  {
    int v3 = (uint64_t *)(v1 + 5184);
    if (AppleAVDTerminateDecoder(v2) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264Decoder - ERROR terminate decoder", buf, 2u);
    }
    if (AppleAVDCloseConnection(v3) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264Decoder - ERROR closing connection", v10, 2u);
    }
  }
  ReleaseHeaderBufferAndCloseFileIO_0(DerivedStorage);
  uint64_t v4 = (__CVPixelBufferPool *)DerivedStorage[4];
  if (v4) {
    CVPixelBufferPoolRelease(v4);
  }
  DerivedStorage[4] = 0;
  BOOL v5 = (__CVPixelBufferPool *)DerivedStorage[5];
  if (v5) {
    CVPixelBufferPoolRelease(v5);
  }
  DerivedStorage[5] = 0;
  uint32_t v6 = (const void *)DerivedStorage[6];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[6] = 0;
  }
  int v7 = (const void *)DerivedStorage[7];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[7] = 0;
  }
  *uint64_t DerivedStorage = 0;
  FigFormatDescriptionRelease();
  DerivedStorage[3] = 0;
  uint64_t v8 = (const void *)DerivedStorage[649];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[649] = 0;
  }
  uint64_t result = DerivedStorage[841];
  if (result)
  {
    uint64_t result = FigH264Bridge_HLSfMP4ParsingInfoDestroy();
    DerivedStorage[841] = 0;
  }
  return result;
}

void myCreateSuggestedQualityOfServiceTiers_0()
{
  values[4] = *(void **)MEMORY[0x263EF8340];
  values[0] = createQualityOfServiceTier_0((void *)*MEMORY[0x263F1E7E8]);
  values[1] = createQualityOfServiceTier_0((void *)*MEMORY[0x263F1E800]);
  values[2] = createQualityOfServiceTier_0((void *)*MEMORY[0x263F1E7F0]);
  values[3] = createQualityOfServiceTier_0((void *)*MEMORY[0x263F1E7F8]);
  myVideoDecoderSuggestedQualityOfServiceTiers_0 = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)values, 4, MEMORY[0x263EFFF70]);
  if (!myVideoDecoderSuggestedQualityOfServiceTiers_0)
  {
    FigSignalErrorAt3();
    if (!myVideoDecoderSuggestedQualityOfServiceTiers_0
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v3 = "myCreateSuggestedQualityOfServiceTiers";
      __int16 v4 = 2080;
      BOOL v5 = "myVideoDecoderSuggestedQualityOfServiceTiers";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", buf, 0x16u);
    }
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v1 = values[i];
    if (v1)
    {
      CFRelease(v1);
      values[i] = 0;
    }
  }
}

CFDictionaryRef createQualityOfServiceTier_0(void *a1)
{
  values[2] = *(void **)MEMORY[0x263EF8340];
  keys = (void *)*MEMORY[0x263F1E740];
  uint64_t valuePtr = 0x3FF0000000000000;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberDoubleType, &valuePtr);
  values[0] = a1;
  values[1] = v3;
  CFDictionaryRef v4 = CFDictionaryCreate(v2, (const void **)&keys, (const void **)values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v4)
  {
    FigSignalErrorAt3();
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v9 = "createQualityOfServiceTier";
      __int16 v10 = 2080;
      __int16 v11 = "tier";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", buf, 0x16u);
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

uint64_t AppleAVDWrapperH264DecoderStartSession(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  kdebug_trace();
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    int v7 = *(_DWORD *)(DerivedStorage + 8816);
    if (v7)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderStartSession";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v7;
        uint64_t v8 = &_os_log_internal;
        int v9 = "AppleAVD: %s ERROR: pluginState isn't kPluginCreated, is %d";
        uint32_t v10 = 18;
LABEL_7:
        _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
        return 4294954387;
      }
      return 4294954387;
    }
    unsigned int v43 = (unsigned __int8 *)(DerivedStorage + 5201);
    unsigned __int8 CFPreferenceNumber = VideoDecoder_getCFPreferenceNumber(@"AVD_CoreSelect", @"com.apple.coremedia", 32);
    pthread_mutex_init((pthread_mutex_t *)(v6 + 6432), 0);
    pthread_mutex_lock((pthread_mutex_t *)(v6 + 6432));
    *(void *)uint64_t v6 = a2;
    *(_DWORD *)(v6 + 16) = 0;
    FigFormatDescriptionRelease();
    uint64_t v13 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
    *(void *)(v6 + 24) = v13;
    *(CMVideoDimensions *)(v6 + 5208) = CMVideoFormatDescriptionGetDimensions(v13);
    *(_DWORD *)(v6 + 5204) = 0;
    *(void *)(v6 + 6416) = 0;
    if (MGGetBoolAnswer()) {
      *(_DWORD *)(v6 + 8820) = VideoDecoder_getCFPreferenceNumber(@"AVD_EnableFileDump", @"com.apple.coremedia", 0);
    }
    int v14 = VideoDecoder_getCFPreferenceNumber(@"AVD_TryAllFrames", @"com.apple.coremedia", 0);
    *(_DWORD *)(v6 + 8864) = v14;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(_DWORD *)(v6 + 6604);
      int v16 = *(_DWORD *)(v6 + 5208);
      int v17 = *(_DWORD *)(v6 + 5212);
      int v18 = v43[1399];
      *(_DWORD *)buf = 136317186;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderStartSession";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v15;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v16;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v17;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&uint8_t buf[32] = v14;
      *(_WORD *)&buf[36] = 1024;
      *(_DWORD *)&buf[38] = v18;
      *(_WORD *)&buf[42] = 2048;
      *(void *)&buf[44] = v6;
      *(_WORD *)&buf[52] = 2080;
      *(void *)&buf[54] = "22:55:20";
      *(_WORD *)&buf[62] = 2080;
      *(void *)&buf[64] = "Nov 14 2024";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: AVC, encryptionScheme %d, %d x %d, tryAllFrames = %d, usageMode: %d, session: %p built %s %s", buf, 0x48u);
    }
    if (*(_DWORD *)(v6 + 6604) == 1)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderStartSession";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): encryption mode 'eavc' is no longer supported\n", buf, 0xCu);
      }
      uint64_t HeaderBuffer_1 = 4294954396;
      goto LABEL_67;
    }
    *(_DWORD *)(v6 + 8872) = VideoDecoder_getCFPreferenceNumber(@"AVD_OnDemandDartMap", @"com.apple.coremedia", 1);
    *(_DWORD *)(v6 + 8884) = VideoDecoder_getCFPreferenceNumber(@"AVD_avdCoreControlPerfWeight", @"com.apple.coremedia", 90);
    *(_DWORD *)(v6 + 8868) = VideoDecoder_getCFPreferenceNumber(@"AVD_MCacheMode", @"com.apple.coremedia", 0xFFFFFFFFLL);
    *(_DWORD *)(v6 + 8900) = -1;
    if (MGGetBoolAnswer()) {
      *(_DWORD *)(v6 + 8900) = VideoDecoder_getCFPreferenceNumber(@"AVD_LogSliceHeaderLongerThan", @"com.apple.coremedia", 0xFFFFFFFFLL);
    }
    *(_DWORD *)(v6 + 8876) = 0;
    if (VideoDecoder_getCFPreferenceNumber(@"AVD_InhibitADSForAVCHEVC", @"com.apple.coremedia", 0))*(_DWORD *)(v6 + 8876) = 1; {
    *(_DWORD *)(v6 + 8876) = *(_DWORD *)(v6 + 8876) & 0xFFFFFFFB | (4
    }
                                                                  * (VideoDecoder_getCFPreferenceNumber(@"AVD_AllowADSOnUnsupported", @"com.apple.coremedia", 0) != 0));
    *(_DWORD *)(v6 + 8876) = *(_DWORD *)(v6 + 8876) & 0xFFFFFFF7 | (8
                                                                  * (VideoDecoder_getCFPreferenceNumber(@"AVD_EnableHistogram", @"com.apple.coremedia", 1) != 0));
    uint64_t HeaderBuffer_1 = CreateHeaderBuffer_1(v6, a3);
    if (HeaderBuffer_1) {
      goto LABEL_67;
    }
    int AVDH264Instance = CreateAVDH264Instance(v6, CFPreferenceNumber);
    if (AVDH264Instance)
    {
      int v20 = AVDH264Instance;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder ERROR: createAppleAVDHW_H264DecoderInstance returned error", buf, 2u);
      }
      if (*(_DWORD *)(v6 + 8816) != 1) {
        ReleaseHeaderBufferAndCloseFileIO_0((void *)v6);
      }
      if (v20 == -536870210) {
        uint64_t HeaderBuffer_1 = 4294954383;
      }
      else {
        uint64_t HeaderBuffer_1 = 4294954385;
      }
      goto LABEL_67;
    }
    if (*(_DWORD *)(v6 + 8820))
    {
      time_t v46 = 0;
      setlocale(0, (const char *)&unk_223AED972);
      time(&v46);
      uint64_t v21 = localtime(&v46);
      strftime(__s, 0x28uLL, "%m%d%g_%H%M%S", v21);
      v45.tv_sec = 0;
      *(void *)&v45.tv_usec = 0;
      uint64_t v44 = 0;
      gettimeofday(&v45, &v44);
      snprintf(__str, 5uLL, "_%03d", v45.tv_usec / 1000);
      strlen(__str);
      __strncat_chk();
      strcpy(v64, "-decOutput.264");
      qmemcpy(v42, "/var/mobile/Library/Caches/com.apple.videocodecd/com.apple.apple", sizeof(v42));
      strcpy((char *)buf, "/var/mobile/Library/Caches/com.apple.videocodecd/com.apple.appleavd/");
      strlen(__s);
      __strncat_chk();
      strlen(v64);
      __strncat_chk();
      strcpy(v61, "-decEncrOut.264");
      __filename[1] = v42[1];
      __filename[2] = v42[2];
      v63[0] = v42[3];
      strcpy((char *)v63 + 13, "pleavd/");
      __filename[0] = v42[0];
      strlen(__s);
      __strncat_chk();
      strlen(v61);
      __strncat_chk();
      strcpy(v56, "-decPropertyLog.txt");
      v57[1] = v42[1];
      v57[2] = v42[2];
      v58[0] = v42[3];
      strcpy((char *)v58 + 13, "pleavd/");
      v57[0] = v42[0];
      strlen(__s);
      __strncat_chk();
      strlen(v56);
      __strncat_chk();
      strcpy(v60, "-preDRM.dat");
      v54[2] = v42[2];
      v55[0] = v42[3];
      strcpy((char *)v55 + 13, "pleavd/");
      v54[0] = v42[0];
      v54[1] = v42[1];
      strlen(__s);
      __strncat_chk();
      strlen(v60);
      __strncat_chk();
      strcpy(v59, "-postDRM.dat");
      long long v52 = v42[2];
      v53[0] = v42[3];
      strcpy((char *)v53 + 13, "pleavd/");
      *(_OWORD *)int v50 = v42[0];
      long long v51 = v42[1];
      strlen(__s);
      __strncat_chk();
      strlen(v59);
      __strncat_chk();
      int v22 = fopen((const char *)buf, "wbx");
      *(void *)(v6 + 8824) = v22;
      if (!v22)
      {
        *(void *)(v6 + 8824) = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)unint64_t v48 = 136315138;
          int v49 = buf;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD h264 dump: could not open file %s\n", v48, 0xCu);
        }
      }
      long long v23 = fopen((const char *)__filename, "wbx");
      *(void *)(v6 + 8832) = v23;
      if (!v23)
      {
        *(void *)(v6 + 8832) = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)unint64_t v48 = 136315138;
          int v49 = __filename;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD h264 dump: could not open file %s\n", v48, 0xCu);
        }
      }
      int v24 = fopen((const char *)v57, "wbx");
      *(void *)(v6 + 8840) = v24;
      long long v25 = v43;
      if (!v24)
      {
        *(void *)(v6 + 8840) = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)unint64_t v48 = 136315138;
          int v49 = v57;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD h264 dump: could not open property log file %s\n", v48, 0xCu);
        }
      }
      long long v26 = fopen((const char *)v54, "wbx");
      *(void *)(v6 + 8848) = v26;
      if (!v26)
      {
        *(void *)(v6 + 8848) = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)unint64_t v48 = 136315138;
          int v49 = v54;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD h264 dump: could not open pre DRM file %s\n", v48, 0xCu);
        }
      }
      long long v27 = fopen(v50, "wbx");
      *(void *)(v6 + 8856) = v27;
      if (!v27)
      {
        *(void *)(v6 + 8856) = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)unint64_t v48 = 136315138;
          int v49 = v50;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD h264 dump: could not open post DRM file %s\n", v48, 0xCu);
        }
      }
      int v28 = *(FILE **)(v6 + 8824);
      if (v28) {
        WriteNAL_0(v28, *(void *)(v6 + 6416), *(_DWORD *)(v6 + 6424) & 0xFFFFFF);
      }
      size_t v29 = *(FILE **)(v6 + 8832);
      if (v29) {
        WriteNAL_0(v29, *(void *)(v6 + 6416), *(_DWORD *)(v6 + 6424) & 0xFFFFFF);
      }
    }
    else
    {
      *(void *)(v6 + 8856) = 0;
      *(_OWORD *)(v6 + 8824) = 0u;
      *(_OWORD *)(v6 + 8840) = 0u;
      long long v25 = v43;
    }
    int v30 = v25[1328];
    if ((v30 | 2) == 2 && v30 == v25[1329])
    {
      signed int v31 = *(_DWORD *)(v6 + 6496);
      *(_DWORD *)(v6 + 5216) = v31;
      signed int v32 = *(_DWORD *)(v6 + 6500);
      *(_DWORD *)(v6 + 5220) = v32;
      *(_DWORD *)(v6 + 5204) = 1;
      if ((isEligibleToUseCompression(*(_DWORD *)(v6 + 5224), *(_DWORD *)(v6 + 5208), *(_DWORD *)(v6 + 5212), v31, v32) & 1) == 0)
      {
        *(_DWORD *)(v6 + 8812) = 0;
        goto LABEL_72;
      }
      uint64_t HeaderBuffer_1 = InitPixelBufferCompressionSupported(*(void *)v6, *(void *)(v6 + 5184), *(_DWORD *)(v6 + 5224), *(_DWORD *)(v6 + 5208), *(_DWORD *)(v6 + 5212), *(_DWORD *)(v6 + 5216), *(_DWORD *)(v6 + 5220), v25[1328], v25[1327], v25[1384], *(void *)(v6 + 8792), 4, 4, 4, 4, (CFTypeRef *)(v6 + 40), (CFTypeRef *)(v6 + 56), 0, 0,
                         0);
      if (!HeaderBuffer_1)
      {
        *unsigned int v43 = 1;
        uint64_t HeaderBuffer_1 = GetIOSurfaceTypeFromPool(*(CVPixelBufferPoolRef *)(v6 + 40), (_DWORD *)(v6 + 8812));
        if (!HeaderBuffer_1)
        {
          uint64_t HeaderBuffer_1 = GetNoSecondWriteFlag(*(__CVPixelBufferPool **)(v6 + 40), (BOOL *)(v6 + 8896));
          if (!HeaderBuffer_1)
          {
            int v33 = *(_DWORD *)(v6 + 8812);
            long long v25 = v43;
            if (v33)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                int v34 = v43[1328] + 8;
                int v35 = v43[1327];
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderStartSession";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&unsigned char buf[14] = v33;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v34;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v35;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: Compressed buffers enabled! CompressionType:%d. luma depth %d chroma format %d", buf, 0x1Eu);
              }
              if (*(_DWORD *)(v6 + 5224) == 20 && v43[1328] == 2)
              {
                int v36 = v43[1327];
                if (v43[1327])
                {
                  unsigned int v37 = *(_DWORD *)(v6 + 5216);
                  unsigned int v38 = *(_DWORD *)(v6 + 5220);
                  if (v36 == 2)
                  {
                    v37 >>= 1;
                  }
                  else if (v36 == 1)
                  {
                    v37 >>= 1;
                    v38 >>= 1;
                  }
                  if (((((v38 + 15) >> 4) * ((v37 + 15) >> 4)) & 1) != 0
                    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: AVC chroma plane with odd number of IMBs is unspported on Salvia A0", buf, 2u);
                  }
                }
              }
              goto LABEL_76;
            }
LABEL_72:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v40 = v25[1328] + 8;
              int v41 = v25[1327];
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderStartSession";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v40;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v41;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: Compressed buffers disabled! luma depth %d chroma format %d", buf, 0x18u);
            }
            uint64_t HeaderBuffer_1 = InitPixelBufferCompressionNotSupported_1(v6);
            if (HeaderBuffer_1) {
              goto LABEL_67;
            }
            uint64_t HeaderBuffer_1 = GetNoSecondWriteFlagDisp(a2, (BOOL *)(v6 + 8896));
            if (HeaderBuffer_1) {
              goto LABEL_67;
            }
LABEL_76:
            uint64_t HeaderBuffer_1 = 0;
            *(_DWORD *)(v6 + 8816) = 2;
LABEL_69:
            pthread_mutex_unlock((pthread_mutex_t *)(v6 + 6432));
            kdebug_trace();
            return HeaderBuffer_1;
          }
        }
      }
    }
    else
    {
      uint64_t HeaderBuffer_1 = 4294954385;
    }
LABEL_67:
    FigFormatDescriptionRelease();
    *(void *)(v6 + 24) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderStartSession";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = HeaderBuffer_1;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
    }
    goto LABEL_69;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderStartSession";
    uint64_t v8 = &_os_log_internal;
    int v9 = "AppleAVD: ERROR: %s no instance storage!";
    uint32_t v10 = 12;
    goto LABEL_7;
  }
  return 4294954387;
}

uint64_t AppleAVDWrapperH264DecoderDecodeFrame(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, char a4, int *a5)
{
  uint64_t v159 = *MEMORY[0x263EF8340];
  int valuePtr = 0;
  uint64_t v137 = 0;
  CFTypeRef v138 = 0;
  CFTypeRef v136 = 0;
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDWrapperH264DecoderDecodeFrame - ERROR! storage is NULL\n", buf, 2u);
    }
    return 311;
  }
  uint64_t v10 = DerivedStorage;
  int v11 = a4 & 1;
  kdebug_trace();
  kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 6432));
  int v12 = *(_DWORD *)(v10 + 8816);
  if (v12 != 2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderDecodeFrame";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v12;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s called on plugin in state %d", buf, 0x12u);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 6432));
    return 311;
  }
  int v13 = AppleAVDSetParameter(*(void *)(v10 + 5184), 18, (unsigned __int8 *)(v10 + 6600));
  if (v13 | AppleAVDSetParameter(*(void *)(v10 + 5184), 36, (unsigned __int8 *)(v10 + 6608)))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    *(_WORD *)buf = 0;
    int v14 = &_os_log_internal;
    int v15 = "AppleAVD: AppleAVDWrapperH264DecoderDecodeFrame - AppleAVDSetParameter kAppleAVDSetUsageMode or kAppleAVDEnabl"
          "eRVRA returned ERROR";
    goto LABEL_16;
  }
  if (!*(_DWORD *)(v10 + 8800)
    || !AppleAVDSetParameter(*(void *)(v10 + 5184), 22, (unsigned __int8 *)(v10 + 8800)))
  {
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a3, 0);
    if (!SampleAttachmentsArray
      || (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) == 0)
    {
      *(unsigned char *)(v10 + 6720) = 0;
      goto LABEL_28;
    }
    CFDictionaryRef v19 = ValueAtIndex;
    CFNumberRef Value = CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x263F01008]);
    int v20 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x263F01018]);
    uint64_t v21 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x263F01020]);
    int v22 = *(_DWORD *)(v10 + 6716);
    long long v23 = (const void **)MEMORY[0x263EFFB40];
    switch(v22)
    {
      case 3:
        if (v20)
        {
          long long v25 = (CFTypeRef *)MEMORY[0x263EFFB38];
          int v24 = v20;
          goto LABEL_44;
        }
        break;
      case 2:
        if (v20 && !CFEqual(v20, (CFTypeRef)*MEMORY[0x263EFFB38]))
        {
          if (v21)
          {
            long long v25 = (CFTypeRef *)MEMORY[0x263EFFB40];
            int v24 = v21;
            goto LABEL_44;
          }
          BOOL v34 = 0;
LABEL_48:
          int v35 = *v23;
          if (*(unsigned char *)(v10 + 6720))
          {
            if (v20 == v35 && v21 != v35) {
              BOOL v34 = 0;
            }
          }
          if (v20 != v35 || v21 == v35)
          {
            *(unsigned char *)(v10 + 6720) = 0;
          }
          else
          {
            char v37 = Value == (const void *)*MEMORY[0x263EFFB38] || v34;
            if ((v37 & 1) == 0)
            {
              *(unsigned char *)(v10 + 6720) = 1;
              goto LABEL_63;
            }
          }
          if (!v34)
          {
LABEL_63:
            kdebug_trace();
            VTDecoderSessionEmitDecodedFrame();
            if (!a5) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
LABEL_28:
          AppleAVDSetParameter(*(void *)(v10 + 5184), 27, (unsigned __int8 *)a3);
          DataBuffer = CMSampleBufferGetDataBuffer(a3);
          long long v27 = DataBuffer;
          if (!DataBuffer || (size_t v28 = CMBlockBufferGetDataLength(DataBuffer)) == 0)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v27;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&unsigned char buf[14] = 0;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR:  either dataBuffer=%p is invalid or dataLength=%zu is invalid!", buf, 0x16u);
            }
            kdebug_trace();
            int inited = -12909;
            VTDecoderSessionEmitDecodedFrame();
            BOOL v33 = 0;
            if (a5) {
              *a5 = 2;
            }
            goto LABEL_38;
          }
          size_t v29 = v28;
          if (*(_DWORD *)(v10 + 6604) == 6 && (FormatDescription = CMSampleBufferGetFormatDescription(a3)) != 0)
          {
            signed int v31 = FormatDescription;
            if (CMFormatDescriptionEqual(*(CMFormatDescriptionRef *)(v10 + 24), FormatDescription))
            {
              int v125 = 0;
              uint64_t v127 = (void *)v29;
            }
            else
            {
              FigFormatDescriptionRelease();
              *(void *)(v10 + 24) = FigFormatDescriptionRetain();
              CreateHeaderBuffer_1(v10, v31);
              uint64_t v127 = (void *)(v29 + (*(_DWORD *)(v10 + 6424) & 0xFFFFFF));
              int v125 = 1;
            }
          }
          else
          {
            int v125 = 0;
            uint64_t v127 = (void *)v29;
          }
          CFTypeRef v38 = CMGetAttachment(a3, (CFStringRef)*MEMORY[0x263F01058], 0);
          if (v38) {
            BOOL v39 = CFEqual(v38, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
          }
          else {
            BOOL v39 = 0;
          }
          BOOL v135 = v39;
          if (AppleAVDSetParameter(*(void *)(v10 + 5184), 35, (unsigned __int8 *)&v135))
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
LABEL_73:
              kdebug_trace();
              VTDecoderSessionEmitDecodedFrame();
              goto LABEL_19;
            }
            *(_WORD *)buf = 0;
            int v40 = &_os_log_internal;
            int v41 = "AppleAVD: AppleAVD_H264VideoDecoder - AppleAVDSetParameter kAppleAVDHandleCRAFrameAsBLA returned ERROR";
            uint32_t v42 = 2;
LABEL_72:
            _os_log_impl(&dword_223977000, v40, OS_LOG_TYPE_DEFAULT, v41, buf, v42);
            goto LABEL_73;
          }
          dataint Length = v29;
          if (*(_DWORD *)(v10 + 6604) == 6)
          {
            int cf = 0;
            BOOL v118 = 0;
            unsigned int v119 = 0;
            uint64_t v43 = v10 + 6528;
            goto LABEL_76;
          }
          uint64_t Decryptor = FigSampleBufferGetDecryptor();
          uint64_t v43 = v10 + 6528;
          if (*(_DWORD *)(v10 + 5204) == 1 && !Decryptor)
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_73;
            }
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = 1;
            *(_WORD *)&buf[8] = 2048;
            *(void *)&buf[10] = v10;
            int v40 = &_os_log_internal;
            int v41 = "AppleAVD: AppleAVD_H264VideoDecoder: frame# %d, session: %p, decryptor attachment is NULL \n";
            uint32_t v42 = 18;
            goto LABEL_72;
          }
          if (!Decryptor || Decryptor == *(void *)(v10 + 5192))
          {
LABEL_184:
            LODWORD(lhs.value) = 0;
            AppleAVDGetParameter(*(void *)(v10 + 5184), 51, (uint64_t)&lhs);
            int v93 = *(_DWORD *)(v10 + 6604);
            if (v93 == 3)
            {
              CFArrayRef v94 = CMSampleBufferGetSampleAttachmentsArray(a3, 0);
              if (v94 && (CFDictionaryRef v95 = (const __CFDictionary *)CFArrayGetValueAtIndex(v94, 0)) != 0)
              {
                CFDictionaryRef cfb = v95;
                CFDataRef v96 = (const __CFData *)CFDictionaryGetValue(v95, (const void *)*MEMORY[0x263F00FC0]);
                if (!v96)
                {
                  int inited = 312;
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    int v109 = *(_DWORD *)(v10 + 5204);
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&uint8_t buf[4] = v109;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = 312;
                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder: frame# %d, cryptorIV is NULL, err %d\n", buf, 0xEu);
                  }
                  int v76 = 0;
                  goto LABEL_233;
                }
                CFDataRef v97 = v96;
                int Length = CFDataGetLength(v96);
                if (CFDataGetLength(v97) != Length && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315394;
                  *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderDecodeFrame";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&unsigned char buf[14] = 3106;
                  _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
                }
                unsigned int v99 = CFDataGetLength(v97);
                unsigned int v100 = v99;
                if (v99 >= 0x11)
                {
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderDecodeFrame";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&unsigned char buf[14] = v100;
                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s oversized iv %d", buf, 0x12u);
                  }
                  int v76 = 0;
                  int inited = 313;
LABEL_233:
                  kdebug_trace();
                  VTDecoderSessionEmitDecodedFrame();
                  goto LABEL_234;
                }
                unsigned int v119 = v99;
                v160.length = CFDataGetLength(v97);
                v160.location = 0;
                CFDataGetBytes(v97, v160, (UInt8 *)(v10 + 6700));
                CFNumberRef v110 = (const __CFNumber *)CFDictionaryGetValue(cfb, (const void *)*MEMORY[0x263F00FB8]);
                CFNumberGetValue(v110, kCFNumberSInt32Type, &valuePtr);
                uint64_t v43 = v10 + 6528;
              }
              else
              {
                unsigned int v119 = 0;
              }
              int v93 = *(_DWORD *)(v10 + 6604);
            }
            else
            {
              unsigned int v119 = 0;
            }
            if (v93 == 4)
            {
              int SliceDataForDecryptor_0 = GetSliceDataForDecryptor_0(v10);
              if (SliceDataForDecryptor_0)
              {
                int inited = SliceDataForDecryptor_0;
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  int v102 = *(_DWORD *)(v10 + 5204);
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v102;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = inited;
                  _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder: frame# %d, Could not get slice data for decryptor, err %d\n", buf, 0xEu);
                }
                int v76 = 0;
                goto LABEL_233;
              }
              int v108 = *(_DWORD *)(v10 + 8784);
              if ((v108 - 257) <= 0xFFFFFEFF)
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v108;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = 256;
                  _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder ERROR: BAD encryptedSliceCount %d MAX_SLICES %d", buf, 0xEu);
                }
                int v76 = 0;
                int inited = 0;
                goto LABEL_233;
              }
              int v103 = 1;
              uint64_t v43 = v10 + 6528;
            }
            else
            {
              int v103 = 0;
            }
            if (LODWORD(lhs.value))
            {
              int cf = 0;
              unsigned int v104 = *(_DWORD *)(v10 + 6604);
              if (v104 <= 3 && v104 != 1)
              {
                uint64_t v105 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (!v105)
                {
                  int inited = -536870212;
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136315138;
                    *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderDecodeFrame";
                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): got NULL vTable from cryptor object!\n", buf, 0xCu);
                  }
                  int v76 = 0;
                  goto LABEL_233;
                }
                uint64_t v106 = *(int *)(v10 + 6604);
                if (v106 > 3) {
                  uint64_t v107 = 0;
                }
                else {
                  uint64_t v107 = qword_223ADC200[v106];
                }
                if (!*(void *)(v105 + 240))
                {
                  int inited = -536870201;
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136315138;
                    *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderDecodeFrame";
                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): cryptor has NULL createProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions entry in vTable!\n", buf, 0xCu);
                  }
                  int v76 = 0;
                  goto LABEL_231;
                }
                int ProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions = FigCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(*(void *)(v10 + 5192), (uint64_t)a3, v107, (uint64_t)&v138, (uint64_t)&v137, (uint64_t)&v136);
                if (ProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions)
                {
                  int inited = ProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions;
                  int v76 = 1;
LABEL_231:
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderDecodeFrame";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&unsigned char buf[14] = inited;
                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): FigCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions returned error %d\n", buf, 0x12u);
                  }
                  goto LABEL_233;
                }
                size_t v112 = CMBlockBufferGetDataLength((CMBlockBufferRef)v138);
                if (v112 != dataLength)
                {
                  size_t v113 = v112;
                  int inited = -536870212;
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderDecodeFrame";
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&unsigned char buf[14] = v113;
                    *(_WORD *)&buf[22] = 2048;
                    *(void *)&buf[24] = dataLength;
                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): processed buffer length (%zu bytes) != sample buffer length (%zu bytes)\n", buf, 0x20u);
                  }
                  int v76 = 1;
                  goto LABEL_233;
                }
                int v103 = 1;
                int cf = 1;
                long long v27 = (OpaqueCMBlockBuffer *)v138;
                uint64_t v43 = v10 + 6528;
              }
            }
            else
            {
              int cf = 0;
            }
            BOOL v118 = v103 != 0;
LABEL_76:
            CMTime v133 = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
            CMTime v132 = v133;
            CMSampleBufferGetOutputDuration((CMTime *)buf, a3);
            long long v44 = *(_OWORD *)buf;
            *(void *)(v43 + 148) = *(void *)&buf[16];
            *(_OWORD *)(v43 + 132) = v44;
            if ((*(_DWORD *)(v10 + 6672) & 0x1D) == 1)
            {
              uint64_t v45 = v43 + 132;
              if ((*(_DWORD *)(v10 + 6624) & 0x1D) == 1)
              {
                uint64_t v46 = v10 + 6612;
                CMSampleBufferGetDecodeTimeStamp(&v133, a3);
                CMTime lhs = v133;
                CMTime rhs = *(CMTime *)(v10 + 6612);
                CMTimeSubtract((CMTime *)buf, &lhs, &rhs);
                long long v47 = *(_OWORD *)buf;
                *(void *)(v45 + 16) = *(void *)&buf[16];
                *(_OWORD *)uint64_t v45 = v47;
                *(_OWORD *)(v10 + 6612) = *(_OWORD *)&v133.value;
                CMTimeEpoch epoch = v133.epoch;
              }
              else
              {
                CMSampleBufferGetPresentationTimeStamp(&v132, a3);
                uint64_t v46 = v10 + 6636;
                CMTime lhs = v132;
                CMTime rhs = *(CMTime *)(v10 + 6636);
                CMTimeSubtract((CMTime *)buf, &lhs, &rhs);
                long long v55 = *(_OWORD *)buf;
                *(void *)(v45 + 16) = *(void *)&buf[16];
                *(_OWORD *)uint64_t v45 = v55;
                *(_OWORD *)(v10 + 6636) = *(_OWORD *)&v132.value;
                CMTimeEpoch epoch = v132.epoch;
              }
              *(void *)(v46 + 16) = epoch;
              if (*(uint64_t *)v45 < 1) {
                double v50 = 0.0;
              }
              else {
                double v50 = (double)*(int *)(v10 + 6668) / (double)*(uint64_t *)v45;
              }
              long long v51 = v127;
              *(double *)(v10 + 6688) = v50;
            }
            else
            {
              double v50 = *(double *)(v10 + 6688);
              long long v51 = v127;
            }
            if (((int)(v50 + 0.5) - 1025) >= 0xFFFFFC00) {
              int v56 = (int)(v50 + 0.5);
            }
            else {
              int v56 = 30;
            }
            uint64_t v57 = *(unsigned int *)(v10 + 6696);
            if (v56 != v57) {
              int v56 = filterSmallDeltaFPS(v57, v56);
            }
            *(_DWORD *)(v10 + 6696) = v56;
            __dst[1] = v51;
            uint64_t v129 = 0;
            __dst[0] = 0;
            LODWORD(v129) = *(_DWORD *)(v10 + 5204);
            int v58 = AppleAVDGetParameter(*(void *)(v10 + 5184), 8, (uint64_t)__dst);
            if (v58)
            {
              int inited = v58;
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder ERROR: kAppleAVDSetInputSurfaceID : Could not set IOSurfaceID", buf, 2u);
              }
              kdebug_trace();
              VTDecoderSessionEmitDecodedFrame();
              BOOL v33 = cf != 0;
              if (a5) {
                *a5 = 2;
              }
              goto LABEL_38;
            }
            unint64_t v59 = (unsigned __int8 *)__dst[0];
            unint64_t v60 = (unsigned __int8 *)__dst[0];
            if (v125)
            {
              memcpy(__dst[0], *(const void **)(v10 + 6416), *(_DWORD *)(v10 + 6424) & 0xFFFFFF);
              unint64_t v60 = &v59[*(_DWORD *)(v10 + 6424) & 0xFFFFFF];
            }
            OSStatus v61 = CMBlockBufferCopyDataBytes(v27, 0, dataLength, v60);
            if (v61)
            {
              OSStatus v62 = v61;
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderDecodeFrame";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&unsigned char buf[14] = v62;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Failed to copy data bytes (err = %d), nothing to decode\n", buf, 0x12u);
              }
LABEL_112:
              kdebug_trace();
              VTDecoderSessionEmitDecodedFrame();
              AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 5184), dataLength, v59);
              if (a5) {
                *a5 = 2;
              }
              BOOL v33 = cf != 0;
              int inited = -12911;
              goto LABEL_38;
            }
            if (*(void *)(v10 + 8848))
            {
              fprintf(*(FILE **)(v10 + 8840), "Dumping preDRM data bytes %d for frame %d\n", dataLength, *(_DWORD *)(v10 + 5204));
              fwrite(v59, 1uLL, dataLength, *(FILE **)(v10 + 8848));
            }
            bzero(v141, 0x878uLL);
            v140[0] = v59;
            v140[1] = v127;
            int v63 = *(_DWORD *)(v10 + 5204);
            v141[0] = v63;
            uint64_t v152 = *(void *)v10;
            uint64_t v153 = a2;
            if (*(_DWORD *)(v10 + 8808))
            {
              if ((a4 & 4) != 0) {
                goto LABEL_128;
              }
            }
            else if (*(_DWORD *)(v10 + 8804))
            {
              int v68 = 2;
LABEL_127:
              v141[1] = v68;
LABEL_128:
              int v148 = v56;
              int v143 = 0;
              int v144 = valuePtr;
              unsigned int v145 = v119;
              long long v146 = *(_OWORD *)(v10 + 6700);
              char v150 = 0;
              int v149 = 0;
              uint64_t v151 = 0;
              int v154 = 0;
              char v155 = *(unsigned char *)(v10 + 8896);
              if (v118)
              {
                unsigned int v69 = *(_DWORD *)(v10 + 8784);
                if (v69 >= 0x101)
                {
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderDecodeFrame";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&unsigned char buf[14] = v69;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = 256;
                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): encryptedSliceCount (%d) exceeds MAX_SLICES (%d)\n", buf, 0x18u);
                  }
                  goto LABEL_112;
                }
                int v147 = *(_DWORD *)(v10 + 8784);
                char v70 = v63;
                __memcpy_chk();
                __memcpy_chk();
                LOBYTE(v63) = v70;
              }
              else
              {
                int v147 = 0;
              }
              if (v11)
              {
                char v142 = 0;
                if (a5)
                {
                  char v71 = 0;
                  int v73 = *a5 | 1;
                  *a5 = v73;
                  uint64_t v72 = *(unsigned __int8 *)(v10 + 5204);
                  *(void *)(v10 + 8 * v72 + 64) = a2;
                }
                else
                {
                  int v73 = 0;
                  uint64_t v72 = v63;
                  *(void *)(v10 + 8 * v63 + 64) = a2;
                  char v71 = 1;
                }
              }
              else
              {
                char v71 = 1;
                char v142 = 1;
                uint64_t v72 = v63;
                *(void *)(v10 + 8 * v63 + 64) = a2;
                if (a5)
                {
                  char v71 = 0;
                  int v73 = *a5;
                }
                else
                {
                  int v73 = 0;
                }
              }
              int v76 = cf;
              *(_DWORD *)(v10 + 4 * v72 + 4160) = v73;
              int v77 = *(FILE **)(v10 + 8832);
              if (v77)
              {
                if (WriteNAL_0(v77, (uint64_t)v59, dataLength))
                {
                  char v78 = *(FILE **)(v10 + 8840);
                  if (v78) {
                    fprintf(v78, "Error writing decEncrOutput for frame %d \n", *(_DWORD *)(v10 + 5204));
                  }
                }
              }
              int v79 = AppleAVDDecodeFrame(*(void *)(v10 + 5184), (uint64_t)v140);
              int v80 = *(FILE **)(v10 + 8824);
              if (v80)
              {
                if (WriteNAL_0(v80, (uint64_t)v59, dataLength))
                {
                  int v81 = *(FILE **)(v10 + 8840);
                  if (v81) {
                    fprintf(v81, "Error writing decOutput for frame %d \n", *(_DWORD *)(v10 + 5204));
                  }
                }
              }
              unsigned int v82 = *(FILE **)(v10 + 8856);
              if (v82) {
                fwrite(v59, 1uLL, dataLength, v82);
              }
              if (!v79)
              {
                ++*(_DWORD *)(v10 + 5204);
                if (!cf) {
                  goto LABEL_19;
                }
                goto LABEL_236;
              }
              kdebug_trace();
              VTDecoderSessionEmitDecodedFrame();
              AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 5184), dataLength, v59);
              if ((v71 & 1) == 0) {
                *a5 = 2;
              }
              int inited = v143;
              BOOL v83 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
              if (inited)
              {
                if (!v83)
                {
                  BOOL v33 = cf != 0;
                  goto LABEL_38;
                }
                int v84 = *(_DWORD *)(v10 + 5204);
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v84;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = inited;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder_DecodeFrame ERROR: framenum %d decryptError %x", buf, 0xEu);
                int inited = v143;
LABEL_234:
                BOOL v33 = v76 != 0;
                if (!inited) {
                  goto LABEL_235;
                }
                goto LABEL_38;
              }
              if (v83)
              {
                int v85 = *(_DWORD *)(v10 + 5204);
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v85;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder_DecodeFrame ERROR: framenum %d kVTVideoDecoderMalfunctionErr", buf, 8u);
              }
              BOOL v33 = cf != 0;
              int inited = -12911;
LABEL_38:
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "AppleAVDWrapperH264DecoderDecodeFrame";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&unsigned char buf[14] = inited;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
                if (!v33) {
                  goto LABEL_19;
                }
LABEL_236:
                if (v138)
                {
                  CFRelease(v138);
                  CFTypeRef v138 = 0;
                }
                if (v136)
                {
                  CFRelease(v136);
                  CFTypeRef v136 = 0;
                }
                goto LABEL_19;
              }
LABEL_235:
              if (!v33) {
                goto LABEL_19;
              }
              goto LABEL_236;
            }
            int v68 = 1;
            goto LABEL_127;
          }
          LODWORD(rhs.value) = *(_DWORD *)(v10 + 6604);
          lhs.value = 0;
          long long v52 = (const void *)Decryptor;
          int NativeSession = FigCPECryptorGetNativeSession(Decryptor, (uint64_t)&lhs);
          if (NativeSession)
          {
            int inited = NativeSession;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v54 = *(_DWORD *)(v10 + 5204);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v54;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = inited;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder: frame# %d, FigCPECryptorGetNativeSession returned err %d \n", buf, 0xEu);
            }
            kdebug_trace();
            goto LABEL_172;
          }
          CFTypeRef cfa = v52;
          int v64 = AppleAVDSetParameter(*(void *)(v10 + 5184), 25, (unsigned __int8 *)&rhs);
          if (v64)
          {
            int inited = v64;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v65 = *(_DWORD *)(v10 + 5204);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v65;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = inited;
              unsigned int v66 = &_os_log_internal;
              uint64_t v67 = "AppleAVD: AppleAVD_H264VideoDecoder: frame# %d, Could not set kAppleAVDSetCryptScheme, err %d\n";
LABEL_170:
              _os_log_impl(&dword_223977000, v66, OS_LOG_TYPE_DEFAULT, v67, buf, 0xEu);
              goto LABEL_171;
            }
            goto LABEL_171;
          }
          int v74 = AppleAVDSetParameter(*(void *)(v10 + 5184), 26, (unsigned __int8 *)lhs.value);
          if (v74)
          {
            int inited = v74;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v75 = *(_DWORD *)(v10 + 5204);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v75;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = inited;
              unsigned int v66 = &_os_log_internal;
              uint64_t v67 = "AppleAVD: AppleAVD_H264VideoDecoder: frame# %d, Could not set kAppleAVDSetCryptRef, err %d\n";
              goto LABEL_170;
            }
LABEL_171:
            kdebug_trace();
LABEL_172:
            VTDecoderSessionEmitDecodedFrame();
LABEL_173:
            BOOL v33 = 0;
            goto LABEL_38;
          }
          uint64_t v86 = *(void *)(v10 + 8792);
          int v134 = 0;
          int ExternalProtectionMethods = FigCPECryptorGetExternalProtectionMethods((uint64_t)cfa, (uint64_t)&v134);
          if (ExternalProtectionMethods)
          {
            int inited = ExternalProtectionMethods;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v88 = *(_DWORD *)(v10 + 5204);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v88;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = inited;
              unsigned int v66 = &_os_log_internal;
              uint64_t v67 = "AppleAVD: AppleAVD_H264VideoDecoder: frame# %d, FigCPECryptorGetExternalProtectionMethods, err %d\n";
              goto LABEL_170;
            }
            goto LABEL_171;
          }
          uint64_t v89 = 3;
          if ((v134 & 1) == 0) {
            uint64_t v89 = 1;
          }
          uint64_t v90 = 7;
          if ((v134 & 2) == 0) {
            uint64_t v90 = v89;
          }
          uint64_t v91 = *(void *)(v10 + 8792);
          unint64_t v120 = v90;
          if (v91 == v90)
          {
LABEL_179:
            CFTypeRef v92 = *(CFTypeRef *)(v10 + 5192);
            if (cfa != v92)
            {
              if (v92) {
                CFRelease(v92);
              }
              *(void *)(v10 + 5192) = cfa;
              CFRetain(cfa);
            }
            uint64_t v43 = v10 + 6528;
            goto LABEL_184;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v114 = *(_DWORD *)(v10 + 5204);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v114;
            *(_WORD *)&buf[8] = 2048;
            *(void *)&buf[10] = v91;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v120;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder: frame# %d, new CVPixelBufferPool created protectionOptions %llu %llu \n", buf, 0x1Cu);
          }
          *(void *)(v10 + 8792) = v120;
          if (*(_DWORD *)(v10 + 8812))
          {
            int inited = InitPixelBufferCompressionSupported(*(void *)v10, *(void *)(v10 + 5184), *(_DWORD *)(v10 + 5224), *(_DWORD *)(v10 + 5208), *(_DWORD *)(v10 + 5212), *(_DWORD *)(v10 + 5216), *(_DWORD *)(v10 + 5220), *(unsigned __int8 *)(v10 + 6529), *(unsigned __int8 *)(v10 + 6528), *(unsigned __int8 *)(v10 + 6585), v120, 4, 4, 4, 4, (CFTypeRef *)(v10 + 40), (CFTypeRef *)(v10 + 56), 0, 0,
                       0);
            if (inited) {
              goto LABEL_253;
            }
            int v115 = GetNoSecondWriteFlag(*(__CVPixelBufferPool **)(v10 + 40), (BOOL *)(v10 + 8896));
          }
          else
          {
            int inited = InitPixelBufferCompressionNotSupported_1(v10);
            if (inited) {
              goto LABEL_253;
            }
            int v115 = GetNoSecondWriteFlagDisp(*(void *)v10, (BOOL *)(v10 + 8896));
          }
          int inited = v115;
          if (!v115) {
            goto LABEL_179;
          }
LABEL_253:
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v116 = *(_DWORD *)(v10 + 5204);
            int v117 = *(_DWORD *)(v10 + 8812);
            *(_DWORD *)buf = 67110144;
            *(_DWORD *)&uint8_t buf[4] = v116;
            *(_WORD *)&buf[8] = 2048;
            *(void *)&buf[10] = v86;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v120;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v117;
            __int16 v157 = 1024;
            int v158 = inited;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder: frame# %d, new CVPixelBufferPool created protectionOptions %llu %llu - ioSurfaceType: %d, err: %d\n", buf, 0x28u);
          }
          kdebug_trace();
          VTDecoderSessionEmitDecodedFrame();
          *(void *)(v10 + 8792) = v86;
          goto LABEL_173;
        }
        break;
      case 1:
        int v24 = Value;
        if (Value)
        {
          long long v25 = (CFTypeRef *)MEMORY[0x263EFFB40];
LABEL_44:
          BOOL v34 = CFEqual(v24, *v25) != 0;
          goto LABEL_48;
        }
        break;
    }
    BOOL v34 = 1;
    goto LABEL_48;
  }
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_17;
  }
  *(_WORD *)buf = 0;
  int v14 = &_os_log_internal;
  int v15 = "AppleAVD: AppleAVDWrapperH264DecoderDecodeFrame - AppleAVDSetParameter kAppleAVDEnableIOFence returned ERROR";
LABEL_16:
  _os_log_impl(&dword_223977000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 2u);
LABEL_17:
  kdebug_trace();
  VTDecoderSessionEmitDecodedFrame();
  if (a5) {
LABEL_18:
  }
    *a5 = 2;
LABEL_19:
  pthread_mutex_unlock((pthread_mutex_t *)(v10 + 6432));
  kdebug_trace();
  return 0;
}

uint64_t AppleAVDWrapperH264DecoderCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  pthread_once(&sCreateSupportedPropertyDictionaryOnce_1, h264_createSupportedPropertyDictionary);
  uint64_t result = 4294954392;
  if (a2)
  {
    if (sH264VideoDecoderSupportedPropertyDictionary)
    {
      CFTypeRef v4 = CFRetain((CFTypeRef)sH264VideoDecoderSupportedPropertyDictionary);
      uint64_t result = 0;
      *a2 = v4;
    }
  }
  return result;
}

uint64_t AppleAVDWrapperH264DecoderCanAcceptFormatDescription(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (MGGetBoolAnswer())
  {
    uint64_t v3 = 0;
    if (VideoDecoder_getCFPreferenceNumber(@"AVD_RejectFormatDescription", @"com.apple.coremedia", 0) == 1)return v3; {
  }
    }
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 6604) != 6) {
    goto LABEL_14;
  }
  uint64_t v5 = DerivedStorage;
  if (CMFormatDescriptionEqual(*(CMFormatDescriptionRef *)(DerivedStorage + 24), a2))
  {
    uint64_t v3 = 1;
    goto LABEL_15;
  }
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(a2);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a2);
  if (MediaSubType != CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(v5 + 24))
    || *(_DWORD *)(v5 + 5208) != Dimensions.width
    || *(_DWORD *)(v5 + 5212) != Dimensions.height)
  {
    goto LABEL_14;
  }
  *(_DWORD *)buf = 0;
  uint64_t v3 = 0;
  if (getBitDepthsAndChromaFormatFromFormatDesc_0()) {
    goto LABEL_15;
  }
  if (*(_DWORD *)buf == *(unsigned __int8 *)(v5 + 6528)
    && !*(unsigned char *)(v5 + 6529)
    && !*(unsigned char *)(v5 + 6530)
    && !*(_DWORD *)(v5 + 6412))
  {
    uint64_t v3 = 0;
  }
  else
  {
LABEL_14:
    uint64_t v3 = 0;
  }
LABEL_15:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v10 = "AppleAVDWrapperH264DecoderCanAcceptFormatDescription";
    __int16 v11 = 1024;
    int v12 = v3;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): returning %d (0: reject; 1: accept)",
      buf,
      0x12u);
  }
  return v3;
}

uint64_t AppleAVDWrapperH264DecoderStartTileSession(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  CFTypeRef v28 = 0;
  CFTypeRef cf = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  int v26 = 0;
  unsigned __int8 CFPreferenceNumber = VideoDecoder_getCFPreferenceNumber(@"AVD_CoreSelect", @"com.apple.coremedia", 32);
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      signed int v31 = "AppleAVDWrapperH264DecoderStartTileSession";
      int v9 = &_os_log_internal;
      uint64_t v10 = "AppleAVD: ERROR: %s no instance storage!";
      uint32_t v11 = 12;
      goto LABEL_7;
    }
    return 4294954387;
  }
  uint64_t v7 = DerivedStorage;
  int v8 = *(_DWORD *)(DerivedStorage + 8816);
  if (v8)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      signed int v31 = "AppleAVDWrapperH264DecoderStartTileSession";
      __int16 v32 = 1024;
      int v33 = v8;
      int v9 = &_os_log_internal;
      uint64_t v10 = "AppleAVD: %s ERROR: pluginState isn't kPluginCreated, is %d";
      uint32_t v11 = 18;
LABEL_7:
      _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, v11);
      return 4294954387;
    }
    return 4294954387;
  }
  uint64_t v13 = (unsigned char *)(DerivedStorage + 5201);
  pthread_mutex_init((pthread_mutex_t *)(DerivedStorage + 6432), 0);
  pthread_mutex_lock((pthread_mutex_t *)(v7 + 6432));
  *(void *)(v7 + 8) = a2;
  *(_DWORD *)(v7 + 16) = 1;
  FigFormatDescriptionRelease();
  int v14 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
  *(void *)(v7 + 24) = v14;
  unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(v14);
  int32_t v16 = Dimensions;
  *(void *)(v7 + 5208) = Dimensions;
  unint64_t v17 = HIDWORD(Dimensions);
  *(_DWORD *)(v7 + 5204) = 0;
  *(void *)(v7 + 6416) = 0;
  *(unsigned char *)(v7 + 8896) = 1;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316418;
    signed int v31 = "AppleAVDWrapperH264DecoderStartTileSession";
    __int16 v32 = 1024;
    int v33 = v16;
    __int16 v34 = 1024;
    int v35 = v17;
    __int16 v36 = 2048;
    uint64_t v37 = v7;
    __int16 v38 = 2080;
    BOOL v39 = "22:55:20";
    __int16 v40 = 2080;
    int v41 = "Nov 14 2024";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: AVC, %d x %d,  session: %p built %s %s", buf, 0x36u);
  }
  *(_DWORD *)(v7 + 8900) = -1;
  if (MGGetBoolAnswer()) {
    *(_DWORD *)(v7 + 8900) = VideoDecoder_getCFPreferenceNumber(@"AVD_LogSliceHeaderLongerThan", @"com.apple.coremedia", 0xFFFFFFFFLL);
  }
  uint64_t HeaderBuffer_1 = CreateHeaderBuffer_1(v7, a3);
  if (HeaderBuffer_1)
  {
    uint64_t v12 = HeaderBuffer_1;
    Mutable = 0;
    goto LABEL_28;
  }
  int AVDH264Instance = CreateAVDH264Instance(v7, CFPreferenceNumber);
  if (AVDH264Instance)
  {
    int v21 = AVDH264Instance;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder ERROR: createAppleAVDHW_H264DecoderInstance returned error", buf, 2u);
    }
    if (*(_DWORD *)(v7 + 8816) != 1) {
      ReleaseHeaderBufferAndCloseFileIO_0((void *)v7);
    }
    Mutable = 0;
    if (v21 == -536870210) {
      uint64_t v12 = 4294954383;
    }
    else {
      uint64_t v12 = 4294954385;
    }
    goto LABEL_28;
  }
  uint64_t v22 = *(unsigned __int8 *)(v7 + 6529);
  if ((v22 | 2) != 2
    || v22 != *(unsigned __int8 *)(v7 + 6530)
    || (createPixelFormatList(v22, *(unsigned __int8 *)(v7 + 6528), *(unsigned __int8 *)(v7 + 6585), 0, v42, &v26, 0, *(_DWORD *)(v7 + 5224), 0, 0, 0), int v23 = *(_DWORD *)(v7 + 6496), *(_DWORD *)(v7 + 5216) = v23, v24 = *(_DWORD *)(v7 + 6500), *(_DWORD *)(v7 + 5220) = v24, CreatePixelBufferAttributesDictionary(*(_DWORD *)(v7 + 5224), v16, v17,
                        v23,
                        v24,
                        v42,
                        v26,
                        0,
                        (__CFDictionary **)&cf,
                        0)))
  {
    Mutable = 0;
LABEL_27:
    uint64_t v12 = 4294954385;
LABEL_28:
    FigFormatDescriptionRelease();
    *(void *)(v7 + 24) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      signed int v31 = "AppleAVDWrapperH264DecoderStartTileSession";
      __int16 v32 = 1024;
      int v33 = v12;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
    }
    goto LABEL_30;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECF0], 16);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECE8], 16);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECE0], 64);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECB0], 0x10000);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECD0], 64);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECB8], 0x10000);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECD8], 64);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECA0], 262080);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECC8], 64);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECC0], 64);
  VTTileDecoderSessionSetTileDecodeRequirements();
  if (CreatePixelBufferAttributesDictionary(*(_DWORD *)(v7 + 5224), *(_DWORD *)(v7 + 5216), *(_DWORD *)(v7 + 5220), *(_DWORD *)(v7 + 5216), *(_DWORD *)(v7 + 5220), v42, v26, 0, (__CFDictionary **)&v28, 1)|| CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], *(int *)(v7 + 5216), *(int *)(v7 + 5220), v42[0], (CFDictionaryRef)v28, &pixelBufferOut))
  {
    goto LABEL_27;
  }
  if (AppleAVDSetParameter(*(void *)(v7 + 5184), 29, (unsigned __int8 *)pixelBufferOut))
  {
    if (pixelBufferOut) {
      CVPixelBufferRelease(pixelBufferOut);
    }
    goto LABEL_27;
  }
  uint64_t v12 = 0;
  *uint64_t v13 = 1;
  *(_DWORD *)(v7 + 5204) = 1;
  *(_DWORD *)(v7 + 8816) = 2;
LABEL_30:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v28)
  {
    CFRelease(v28);
    CFTypeRef v28 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v7 + 6432));
  return v12;
}

uint64_t AppleAVDWrapperH264DecoderDecodeTile(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, _DWORD *a9)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDWrapperH264DecoderDecodeTile - ERROR! storage is NULL\n", buf, 2u);
    }
    return 311;
  }
  uint64_t v15 = DerivedStorage;
  int32_t v16 = (pthread_mutex_t *)(DerivedStorage + 6432);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 6432));
  int v17 = *(_DWORD *)(v15 + 8816);
  if (v17 != 2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v43 = "AppleAVDWrapperH264DecoderDecodeTile";
      __int16 v44 = 1024;
      LODWORD(v45) = v17;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s called on plugin in state %d", buf, 0x12u);
    }
    pthread_mutex_unlock(v16);
    return 311;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a3);
  CFDictionaryRef v19 = DataBuffer;
  if (!DataBuffer || (size_t DataLength = (void *)CMBlockBufferGetDataLength(DataBuffer)) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      uint64_t v43 = (const char *)v19;
      __int16 v44 = 2048;
      uint64_t v45 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR:  either tile dataBuffer=%p is invalid or dataLength=%zu is invalid!", buf, 0x16u);
    }
    uint64_t v24 = *(void *)(v15 + 8);
    int v23 = -12909;
    uint64_t v25 = a2;
    uint64_t v26 = 4294954387;
    goto LABEL_16;
  }
  size_t v21 = (size_t)DataLength;
  destination[1] = DataLength;
  uint64_t v33 = 0;
  destination[0] = 0;
  LODWORD(v33) = *(_DWORD *)(v15 + 5204);
  int v22 = AppleAVDGetParameter(*(void *)(v15 + 5184), 8, (uint64_t)destination);
  if (v22)
  {
    int v23 = v22;
    uint64_t v24 = *(void *)(v15 + 8);
    uint64_t v25 = a2;
    uint64_t v26 = 4294954385;
LABEL_16:
    MEMORY[0x223CBAC70](v24, v25, v26, 2, 0);
    if (a9) {
      *a9 = 2;
    }
LABEL_18:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v43 = "AppleAVDWrapperH264DecoderDecodeTile";
      __int16 v44 = 1024;
      LODWORD(v45) = v23;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
    }
    goto LABEL_20;
  }
  CFTypeRef v28 = (unsigned __int8 *)destination[0];
  if (CMBlockBufferCopyDataBytes(v19, 0, v21, destination[0]))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING, fail to copy data bytes, nothing to decode", buf, 2u);
    }
    MEMORY[0x223CBAC70](*(void *)(v15 + 8), a2, 0, 2, 0);
    AppleAVDReleaseCurrentInputBuffer(*(void *)(v15 + 5184), v21, v28);
    if (a9) {
      *a9 = 2;
    }
    int v23 = -12911;
    goto LABEL_18;
  }
  bzero(v35, 0x878uLL);
  v34[0] = v28;
  v34[1] = v21;
  int v29 = *(_DWORD *)(v15 + 5204);
  v35[0] = v29;
  if (!*(_DWORD *)(v15 + 8808))
  {
    if (*(_DWORD *)(v15 + 8804))
    {
      int v30 = 2;
LABEL_34:
      v35[1] = v30;
      goto LABEL_35;
    }
LABEL_33:
    int v30 = 1;
    goto LABEL_34;
  }
  if ((a8 & 4) == 0) {
    goto LABEL_33;
  }
LABEL_35:
  int v37 = 0;
  uint64_t v38 = 0x100000000;
  char v40 = 1;
  uint64_t v39 = a7;
  uint64_t v41 = a6;
  if (a8)
  {
    char v36 = 0;
    if (a9)
    {
      *a9 |= 1u;
      LOBYTE(v29) = *(unsigned char *)(v15 + 5204);
    }
  }
  else
  {
    char v36 = 1;
  }
  *(void *)(v15 + 8 * v29 + 2112) = a2;
  uint64_t v31 = AppleAVDDecodeFrame(*(void *)(v15 + 5184), (uint64_t)v34);
  if (v31)
  {
    MEMORY[0x223CBAC70](*(void *)(v15 + 8), a2, v31, 2, 0);
    AppleAVDReleaseCurrentInputBuffer(*(void *)(v15 + 5184), v21, v28);
    if (a9) {
      *a9 = 2;
    }
    if (v37) {
      int v23 = v37;
    }
    else {
      int v23 = -12911;
    }
    goto LABEL_18;
  }
  ++*(_DWORD *)(v15 + 5204);
LABEL_20:
  pthread_mutex_unlock(v16);
  return 0;
}

uint64_t AppleAVDWrapperH264DecoderDecodeFrameWithOptions(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, char a4, const __CFDictionary *a5, int *a6)
{
  valuePtr[1] = *MEMORY[0x263EF8340];
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    if (!a5) {
      goto LABEL_17;
    }
    uint64_t v13 = DerivedStorage;
    valuePtr[0] = 0;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x263F1E6C8]);
    if (!Value) {
      goto LABEL_17;
    }
    CFDictionaryRef v15 = Value;
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x263F1E810]);
    if (v16)
    {
      CFNumberGetValue(v16, kCFNumberIntType, valuePtr);
      CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(v15, (const void *)*MEMORY[0x263F1E808]);
      if (v17)
      {
        CFNumberGetValue(v17, kCFNumberIntType, (char *)valuePtr + 4);
        int v18 = valuePtr[0];
        if (LODWORD(valuePtr[0]) != 1080)
        {
          int v19 = HIDWORD(valuePtr[0]);
          if (HIDWORD(valuePtr[0]) != 1080 && ((LOBYTE(valuePtr[0]) | BYTE4(valuePtr[0])) & 0xF) != 0)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v31 = 136315650;
              __int16 v32 = "AppleAVDWrapperH264DecoderDecodeFrameWithOptions";
              __int16 v33 = 1024;
              int v34 = v18;
              __int16 v35 = 1024;
              int v36 = v19;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): Non-mod16 VRA dimensions with width %d, height %d\n", (uint8_t *)&v31, 0x18u);
            }
            if (*(_DWORD *)(v13 + 8816) == 2)
            {
              int v20 = *(_DWORD *)(v13 + 5216);
              if (valuePtr[0] != *(void *)(v13 + 5216))
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_32;
                }
                int v30 = *(_DWORD *)(v13 + 5220);
                int v31 = 136315650;
                __int16 v32 = "AppleAVDWrapperH264DecoderDecodeFrameWithOptions";
                __int16 v33 = 1024;
                int v34 = v20;
                __int16 v35 = 1024;
                int v36 = v30;
                int v22 = &_os_log_internal;
                int v23 = "AppleAVD: ERROR: %s(): invalid dimensions (coded width %d, height %d)\n";
                uint32_t v28 = 24;
                goto LABEL_31;
              }
            }
          }
        }
        uint64_t v21 = *(void *)(v13 + 5184);
        if (!v21)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v31 = 136315138;
            __int16 v32 = "AppleAVDWrapperH264DecoderDecodeFrameWithOptions";
            int v22 = &_os_log_internal;
            int v23 = "AppleAVD: ERROR: %s() - trying to set kAppleAVDSetVRADimensions before videoContext was created!\n";
            goto LABEL_30;
          }
LABEL_32:
          uint64_t v24 = 4294954385;
LABEL_33:
          int v25 = 2;
          VTDecoderSessionEmitDecodedFrame();
          if (!a6)
          {
LABEL_34:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v31 = 136315138;
              __int16 v32 = "AppleAVDWrapperH264DecoderDecodeFrameWithOptions";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): Got NULL infoFlagsOut!\n", (uint8_t *)&v31, 0xCu);
            }
            return v24;
          }
LABEL_18:
          *a6 = v25;
          return v24;
        }
        if (AppleAVDSetParameter(v21, 32, (unsigned __int8 *)valuePtr))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v31 = 136315138;
            __int16 v32 = "AppleAVDWrapperH264DecoderDecodeFrameWithOptions";
            int v22 = &_os_log_internal;
            int v23 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDSetVRADimensions returned ERROR\n";
LABEL_30:
            uint32_t v28 = 12;
LABEL_31:
            _os_log_impl(&dword_223977000, v22, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v31, v28);
            goto LABEL_32;
          }
          goto LABEL_32;
        }
LABEL_17:
        uint64_t v24 = AppleAVDWrapperH264DecoderDecodeFrame(a1, a2, a3, a4, a6);
        int v25 = 0;
        if (!a6) {
          goto LABEL_34;
        }
        goto LABEL_18;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = 136315138;
        __int16 v32 = "AppleAVDWrapperH264DecoderDecodeFrameWithOptions";
        uint64_t v26 = &_os_log_internal;
        long long v27 = "AppleAVD: ERROR: %s(): Failed to retrieve kVTDecompressionResolutionKey_Height from dictionary\n";
        goto LABEL_26;
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = 136315138;
      __int16 v32 = "AppleAVDWrapperH264DecoderDecodeFrameWithOptions";
      uint64_t v26 = &_os_log_internal;
      long long v27 = "AppleAVD: ERROR: %s(): Failed to retrieve kVTDecompressionResolutionKey_Width from dictionary\n";
LABEL_26:
      _os_log_impl(&dword_223977000, v26, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)&v31, 0xCu);
    }
    uint64_t v24 = 4294954394;
    goto LABEL_33;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v31) = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDWrapperH264DecoderDecodeFrameWithOptions - ERROR! storage is NULL\n", (uint8_t *)&v31, 2u);
  }
  return 311;
}

uint64_t CreateAVDH264Instance(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v3 = AppleAVDOpenConnection(&v25, 1, 1, a2);
  if (v3) {
    return v3;
  }
  uint64_t v5 = v25;
  *(void *)(a1 + 5184) = v25;
  *(_DWORD *)(a1 + 8816) = 1;
  if (*(_DWORD *)(a1 + 8868) != -1)
  {
    *(_DWORD *)uint32_t v42 = *(_DWORD *)(a1 + 8868);
    if (AppleAVDSetParameter(v5, 41, v42)
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder ERROR: kAppleAVDMemCacheMode set failed", buf, 2u);
    }
    uint64_t v5 = *(void *)(a1 + 5184);
  }
  int v23 = *(_DWORD *)(a1 + 8864);
  if (AppleAVDSetParameter(v5, 50, (unsigned __int8 *)&v23)
    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint32_t v42 = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder ERROR: kAppleAVDSetTryEveryFrame set failed", v42, 2u);
  }
  if (AppleAVDSetParameter(*(void *)(a1 + 5184), 52, (unsigned __int8 *)(a1 + 8872))
    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint32_t v42 = 136315138;
    *(void *)uint64_t v43 = "CreateAVDH264Instance";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetOnDemandDVAMap failed", v42, 0xCu);
  }
  if (AppleAVDSetParameter(*(void *)(a1 + 5184), 53, (unsigned __int8 *)(a1 + 8884))
    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint32_t v42 = 136315138;
    *(void *)uint64_t v43 = "CreateAVDH264Instance";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetAVDCoreControlPerfWeight failed", v42, 0xCu);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 8876);
    *(_DWORD *)uint32_t v42 = 136315394;
    *(void *)uint64_t v43 = "CreateAVDH264Instance";
    *(_WORD *)&v43[8] = 1024;
    *(_DWORD *)&unsigned char v43[10] = v6;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): about to kAppleAVDSetMiscPreferences, storage->miscPreferences is 0x%x\n", v42, 0x12u);
  }
  if (AppleAVDSetParameter(*(void *)(a1 + 5184), 56, (unsigned __int8 *)(a1 + 8876))
    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint32_t v42 = 136315138;
    *(void *)uint64_t v43 = "CreateAVDH264Instance";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetMiscPreferences failed", v42, 0xCu);
  }
  int v22 = *(_DWORD *)(a1 + 6604);
  uint64_t v7 = AppleAVDSetParameter(*(void *)(a1 + 5184), 25, (unsigned __int8 *)&v22);
  if (v7)
  {
    uint64_t v3 = v7;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(a1 + 5204);
      *(_DWORD *)uint32_t v42 = 67109376;
      *(_DWORD *)uint64_t v43 = v8;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&_OWORD v43[6] = v3;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder: frame# %d, Could not set kAppleAVDSetCryptScheme, err %d\n", v42, 0xEu);
    }
    return v3;
  }
  uint64_t v21 = DisplayCallBack_1;
  uint64_t v3 = AppleAVDSetParameter(v25, 1, (unsigned __int8 *)&v21);
  if (v3) {
    return v3;
  }
  uint64_t v3 = AppleAVDSetParameter(v25, 2, (unsigned __int8 *)a1);
  if (v3) {
    return v3;
  }
  uint64_t v3 = AppleAVDSetParameter(v25, 18, (unsigned __int8 *)(a1 + 6600));
  if (v3) {
    return v3;
  }
  if (AppleAVDSetParameter(*(void *)(a1 + 5184), 36, (unsigned __int8 *)(a1 + 6608)))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint32_t v42 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264Decoder - AppleAVDSetParameter kAppleAVDEnableRVRA returned ERROR", v42, 2u);
    }
    return 4294954385;
  }
  if (AppleAVDSetParameter(*(void *)(a1 + 5184), 71, (unsigned __int8 *)(a1 + 8900))
    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(_DWORD *)(a1 + 8900);
    *(_DWORD *)uint32_t v42 = 136315394;
    *(void *)uint64_t v43 = "CreateAVDH264Instance";
    *(_WORD *)&v43[8] = 1024;
    *(_DWORD *)&unsigned char v43[10] = v9;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR failed to set kAppleAVDSetSliceHeaderThreshold to %d", v42, 0x12u);
  }
  if (AppleAVDCheckPlatform(&v24) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint32_t v42 = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder: AppleAVDCheckPlatform() returns false. Unusual, but we can proceed assuming AVC L6 is not supported.\n", v42, 2u);
  }
  *(_OWORD *)&v43[4] = 0u;
  long long v44 = 0u;
  BOOL v46 = 0;
  long long v45 = 0u;
  *(_DWORD *)uint32_t v42 = 1;
  *(void *)uint64_t v43 = *(void *)(a1 + 5208);
  *(void *)&v43[12] = *(void *)(a1 + 6416);
  int v10 = *(_DWORD *)(a1 + 6412);
  LODWORD(v44) = *(_DWORD *)(a1 + 6424);
  DWORD1(v44) = v10;
  BOOL v46 = (v24 & 0x800) != 0;
  uint64_t v3 = AppleAVDInitializeDecoder(*(void *)(a1 + 5184), (unsigned int *)v42);
  if (!v3)
  {
    uint64_t v3 = AppleAVDGetParameter(v25, 9, a1 + 5224);
    if (!v3)
    {
      uint64_t v3 = AppleAVDGetParameter(*(void *)(a1 + 5184), 13, a1 + 6496);
      unsigned int v11 = *(_DWORD *)(a1 + 6496);
      if (!v46
        && (v11 > 0x1000 || *(_DWORD *)(a1 + 6500) > 0x1000u || *(int *)(a1 + 5208) > 4096 || *(int *)(a1 + 5212) > 4096))
      {
        unsigned int v20 = *(_DWORD *)(a1 + 6496);
        int v12 = *(unsigned __int8 *)(a1 + 6529);
        if (!*(unsigned char *)(a1 + 6529) && *(unsigned char *)(a1 + 6528) == 1)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v13 = *(_DWORD *)(a1 + 5208);
            int v14 = *(_DWORD *)(a1 + 5212);
            int v15 = *(_DWORD *)(a1 + 6500);
            *(_DWORD *)buf = 136316418;
            long long v27 = "CreateAVDH264Instance";
            __int16 v28 = 1024;
            int v29 = v13;
            __int16 v30 = 1024;
            unsigned int v31 = v20;
            __int16 v32 = 1024;
            int v33 = v14;
            __int16 v34 = 1024;
            int v35 = v15;
            __int16 v36 = 1024;
            int v37 = 4096;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): pic size too large - either width (%d, %d) or height (%d, %d) > max dim. %d and it's 4:2:0, 8 bit, so software decoder can handle it.", buf, 0x2Au);
          }
          return 4294954387;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = *(_DWORD *)(a1 + 5208);
          int v17 = *(_DWORD *)(a1 + 5212);
          int v18 = *(_DWORD *)(a1 + 6500);
          int v19 = *(unsigned __int8 *)(a1 + 6528);
          *(_DWORD *)buf = 136316930;
          long long v27 = "CreateAVDH264Instance";
          __int16 v28 = 1024;
          int v29 = v16;
          __int16 v30 = 1024;
          unsigned int v31 = v20;
          __int16 v32 = 1024;
          int v33 = v17;
          __int16 v34 = 1024;
          int v35 = v18;
          __int16 v36 = 1024;
          int v37 = 4096;
          __int16 v38 = 1024;
          int v39 = v12 + 8;
          __int16 v40 = 1024;
          int v41 = v19;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): pic size too wide %d %d or tall %d %d vs. %d but depth %d chroma fmt %d, so we'll attempt it anyway", buf, 0x36u);
          unsigned int v11 = *(_DWORD *)(a1 + 6496);
        }
        else
        {
          unsigned int v11 = v20;
        }
      }
      if (v11 < 0x40 || *(_DWORD *)(a1 + 6500) <= 0x3Fu)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder ERROR: Unsupported picture size!", buf, 2u);
        }
        return 305;
      }
    }
  }
  return v3;
}

uint64_t WriteNAL_0(FILE *__stream, uint64_t a2, unint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int __ptr = 0x1000000;
  if (a3 < 4) {
    return 0;
  }
  LODWORD(v6) = 0;
  char v7 = 1;
  int v8 = &_os_log_internal;
  while (1)
  {
    int v9 = (unsigned int *)(a2 + v6);
    unsigned int v11 = *v9;
    int v10 = v9 + 1;
    size_t v12 = bswap32(v11);
    unint64_t v6 = (v6 + v12 + 4);
    if (v6 > a3)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 318;
      }
      *(_WORD *)buf = 0;
      int v17 = &_os_log_internal;
      goto LABEL_19;
    }
    if (v12 > a3) {
      break;
    }
    int v13 = *v10 & 0x1F;
    switch(*v10 & 0x1F)
    {
      case 1:
      case 5:
        if (v7)
        {
          p_ptr = &__ptr;
          size_t v15 = 4;
        }
        else
        {
          p_ptr = (int *)((char *)&__ptr + 1);
          size_t v15 = 3;
        }
        fwrite(p_ptr, 1uLL, v15, __stream);
        fwrite(v10, 1uLL, v12, __stream);
        char v7 = 0;
        break;
      case 6:
      case 9:
      case 0xC:
        break;
      case 7:
      case 8:
        fwrite(&__ptr, 1uLL, 4uLL, __stream);
        fwrite(v10, 1uLL, v12, __stream);
        break;
      default:
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          int v20 = v13;
          _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, "AppleAVD: Bad NAL type %d\n", buf, 8u);
        }
        break;
    }
    if ((v6 + 4) > a3) {
      return 0;
    }
  }
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
    return 318;
  }
  *(_WORD *)buf = 0;
  int v17 = &_os_log_internal;
LABEL_19:
  _os_log_impl(&dword_223977000, v17, OS_LOG_TYPE_DEFAULT, "AppleAVD: WriteNAL kAVD_DECODER_ERROR_BAD_NAL_LENGTH ", buf, 2u);
  return 318;
}

uint64_t GetSliceDataForDecryptor_0(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  CFAllocatorRef v2 = *(const opaqueCMFormatDescription **)(a1 + 24);
  if (!v2) {
    return FigSignalErrorAt3();
  }
  if (*(void *)(a1 + 6728)) {
    goto LABEL_14;
  }
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(v2);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x263F00E90]);
  CFArrayRef v5 = (const __CFArray *)CFDictionaryGetValue(Value, @"avcC");
  if (v5)
  {
    CFTypeID TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(v5)) {
      CFArrayGetValueAtIndex(v5, 0);
    }
  }
  uint64_t result = FigH264Bridge_CreateHLSfMP4ParsingInfoFromAVCCData();
  if (!result)
  {
LABEL_14:
    uint64_t result = FigH264Bridge_LocateSliceHeaderForHLSfMP4EncryptableNAL();
    if (!result)
    {
      if (*(void *)(a1 + 6728))
      {
        *(_DWORD *)(a1 + 8784) = 0;
        return 0;
      }
      return FigSignalErrorAt3();
    }
  }
  return result;
}

uint64_t FigCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  size_t v12 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  if (*v13 < 8uLL) {
    return 4294954514;
  }
  int v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v13[30];
  if (!v14) {
    return 4294954514;
  }

  return v14(a1, a2, a3, a4, a5, a6);
}

uint64_t getBitDepthsAndChromaFormatFromFormatDesc_0()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  CFAllocatorRef v2 = v1;
  uint64_t v3 = (const opaqueCMFormatDescription *)v0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  bzero(v10, 0x22C8uLL);
  int HeaderBuffer_1 = CreateHeaderBuffer_1((uint64_t)v10, v3);
  if (!(_WORD)HeaderBuffer_1)
  {
    unsigned int *v2 = HIBYTE(v12);
    parseAvcSps();
  }
  if (v11) {
    free(v11);
  }
  if (HeaderBuffer_1 << 16 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    char v7 = "getBitDepthsAndChromaFormatFromFormatDesc";
    __int16 v8 = 1024;
    int v9 = (__int16)HeaderBuffer_1;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", (uint8_t *)&v6, 0x12u);
  }
  return (__int16)HeaderBuffer_1;
}

CFDictionaryRef h264_createFrameTypesArrayElement(const void *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v1 = (void *)*MEMORY[0x263F1E740];
  CFTypeRef v4 = a1;
  keys = v1;
  CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)&keys, &v4, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v2 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    char v7 = "h264_createFrameTypesArrayElement";
    __int16 v8 = 2080;
    int v9 = "frameTypeDict";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", buf, 0x16u);
  }
  return v2;
}

void AVC_RBSP::AVC_RBSP(AVC_RBSP *this)
{
  *(void *)this = &unk_26D7401E0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((_WORD *)this + 24) = -1;
}

void AVC_RBSP::~AVC_RBSP(AVC_RBSP *this)
{
}

unsigned __int8 *AVC_RBSP::next_start_code(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned char *a4, unsigned int *a5)
{
  uint64_t result = a3;
  *a4 |= 0xF8u;
  if (a3 - 4 >= a2)
  {
    int v6 = 0;
    int v7 = *a2;
    unint64_t v8 = (unint64_t)a2;
    while (1)
    {
      int v10 = *(unsigned __int8 *)++v8;
      int v9 = v10;
      int v11 = v7 | (v10 << 8) | (*(unsigned __int8 *)(v8 + 1) << 16);
      if ((v11 | (*(unsigned __int8 *)(v8 + 2) << 24)) == 0x1000000)
      {
        unsigned int v12 = 4;
        goto LABEL_12;
      }
      if (v11 == 0x10000) {
        break;
      }
      if (v7) {
        int v6 = 0;
      }
      else {
        ++v6;
      }
      int v7 = v9;
      a2 = (unsigned __int8 *)v8;
      if (v8 > (unint64_t)(a3 - 4)) {
        return result;
      }
    }
    unsigned int v12 = 3;
LABEL_12:
    *a5 = v12;
    *a4 = (a2[v12] >> 4) & 6 | (a2[v12] >> 7) | (8 * a2[v12]);
    *a5 += v6;
    return &a2[-v6];
  }
  return result;
}

uint64_t AVC_RBSP::next_access_unit(AVC_RBSP *this, int a2)
{
  AVC_RBSP::flush_bits((uint64_t)this, *((_DWORD *)this + 4) & 7);
  if (!a2) {
    return 1;
  }
  int v4 = *((_DWORD *)this + 3);
  if (v4 == 1)
  {
    int v5 = 32;
LABEL_6:
    AVC_RBSP::flush_bits((uint64_t)this, v5);
    return 1;
  }
  if ((v4 & 0xFFFFFF00) == 0x100)
  {
    int v5 = 24;
    goto LABEL_6;
  }
  return 0;
}

uint64_t AVC_RBSP::byte_align(AVC_RBSP *this)
{
  return AVC_RBSP::flush_bits((uint64_t)this, *((_DWORD *)this + 4) & 7);
}

uint64_t AVC_RBSP::get_next_uint32(AVC_RBSP *this, unsigned __int8 *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 4) - (void)a2;
  *a5 = 0;
  if (v5 <= 0)
  {
    *a4 = 0;
    *a3 = 0;
    *((_WORD *)this + 24) = -1;
    return 0xFFFFFFFFLL;
  }
  if (v5 == 1)
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 255;
    int v9 = 255;
    int v10 = 255;
LABEL_9:
    int v12 = 255;
LABEL_10:
    int v13 = 255;
    goto LABEL_11;
  }
  int v10 = a2[1];
  if ((unint64_t)v5 < 3)
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 255;
    int v9 = 255;
    goto LABEL_9;
  }
  int v9 = a2[2];
  if (v5 == 3)
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 255;
    goto LABEL_9;
  }
  int v12 = a2[3];
  if ((unint64_t)v5 < 5)
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 255;
    goto LABEL_10;
  }
  int v8 = a2[4];
  if (v5 == 5)
  {
    int v6 = 0;
    int v13 = 255;
  }
  else
  {
    int v13 = a2[5];
    int v6 = 1;
  }
  int v7 = 1;
LABEL_11:
  int v14 = *a2;
  if (!*((_WORD *)this + 24) && v14 == 3 && !v9 && !v12 && v8 == 3)
  {
    int v8 = 0;
    unsigned int v21 = -16776961;
    goto LABEL_63;
  }
  if (*((unsigned __int8 *)this + 49) | v14) {
    BOOL v15 = 0;
  }
  else {
    BOOL v15 = v10 == 3;
  }
  int v16 = v15;
  if (v16 == 1 && v9 == 0 && v12 == 0 && v8 == 3)
  {
    int v10 = 0;
    int v8 = 0;
    unsigned int v21 = 16711935;
LABEL_63:
    *a5 = v21;
    unsigned int v27 = v5 - 2;
    if (v6) {
      unsigned int v27 = 4;
    }
    *a4 = v27;
    unsigned int v28 = v27 + 2;
    *a3 = v28;
    if ((unint64_t)(v5 - 1) >= 3)
    {
      if (v5 == 4)
      {
        int v9 = 0;
        *((unsigned char *)this + 48) = a2[2];
        unsigned __int8 v29 = a2[3];
      }
      else
      {
        int v9 = 0;
        if (v5 == 5)
        {
          *((unsigned char *)this + 48) = a2[3];
          unsigned __int8 v29 = a2[4];
        }
        else
        {
          *((unsigned char *)this + 48) = a2[4];
          unsigned __int8 v29 = a2[5];
        }
      }
    }
    else
    {
      int v9 = 0;
      unsigned __int8 v29 = -1;
      *((unsigned char *)this + 48) = -1;
    }
    int v12 = v8;
    goto LABEL_88;
  }
  if (!*((unsigned char *)this + 48))
  {
    if (*((unsigned char *)this + 49)) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v14 == 3;
    }
    int v23 = v22;
    if (v23 == 1 && v10 == 0 && v9 == 0 && v12 == 3)
    {
      int v10 = 0;
      unsigned int v21 = -16711936;
      goto LABEL_63;
    }
    if (v23)
    {
      unsigned int v20 = -16777216;
      goto LABEL_77;
    }
  }
  if (v16)
  {
    int v10 = 0;
    unsigned int v20 = 16711680;
LABEL_77:
    *a5 = v20;
    if (v7) {
      unsigned int v30 = 4;
    }
    else {
      unsigned int v30 = v5 - 1;
    }
    *a4 = v30;
    unsigned int v28 = v30 + 1;
    *a3 = v28;
    switch(v5)
    {
      case 1:
        unsigned __int8 v29 = -1;
        *((unsigned char *)this + 48) = -1;
        break;
      case 2:
        *((unsigned char *)this + 48) = *a2;
        unsigned __int8 v29 = a2[1];
        break;
      case 3:
        *((unsigned char *)this + 48) = a2[1];
        unsigned __int8 v29 = a2[2];
        break;
      case 4:
        *((unsigned char *)this + 48) = a2[2];
        unsigned __int8 v29 = a2[3];
        break;
      default:
        *((unsigned char *)this + 48) = a2[3];
        unsigned __int8 v29 = a2[4];
        break;
    }
    int v13 = v8;
    goto LABEL_88;
  }
  if (!*a2 && !v10 && v9 == 3)
  {
    int v10 = 0;
    int v9 = 0;
    unsigned int v20 = 65280;
    goto LABEL_77;
  }
  if (!v10 && !v9 && v12 == 3)
  {
    int v9 = 0;
    int v12 = 0;
    unsigned int v20 = 255;
    int v10 = *a2;
    goto LABEL_77;
  }
  if (v5 >= 4) {
    unsigned int v28 = 4;
  }
  else {
    unsigned int v28 = v5;
  }
  *a4 = v28;
  *a3 = v28;
  switch(v5)
  {
    case 3:
      *((unsigned char *)this + 48) = a2[1];
      unsigned __int8 v29 = a2[2];
      break;
    case 2:
      *((unsigned char *)this + 48) = *a2;
      unsigned __int8 v29 = a2[1];
      break;
    case 1:
      *((unsigned char *)this + 48) = -1;
      unsigned __int8 v29 = *a2;
      break;
    default:
      *((unsigned char *)this + 48) = a2[2];
      unsigned __int8 v29 = a2[3];
      break;
  }
  int v13 = v12;
  int v12 = v9;
  int v9 = v10;
  int v10 = v14;
LABEL_88:
  *((unsigned char *)this + 49) = v29;
  if (v5 < (unint64_t)v28 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v31 = 136315394;
    __int16 v32 = "get_next_uint32";
    __int16 v33 = 1024;
    int v34 = 436;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v31, 0x12u);
  }
  return (v9 << 16) | (v10 << 24) | (v12 << 8) | v13;
}

uint64_t AVC_RBSP::flush_bits(uint64_t this, int a2)
{
  uint64_t v2 = this;
  signed int v3 = *(_DWORD *)(this + 16);
  int v4 = a2 - v3;
  if (a2 <= v3)
  {
    *(void *)(this + 8) <<= a2;
    *(void *)(this + 56) <<= a2;
  }
  else
  {
    *(void *)BOOL v15 = 0;
    unint64_t v5 = *(void *)(this + 8);
    unint64_t v6 = *(void *)(this + 56);
    uint64_t v7 = v5 << v3;
    uint64_t v8 = v6 << v3;
    unint64_t v9 = v5 >> -(char)v3;
    unint64_t v10 = v6 >> -(char)v3;
    if (v3 < 0) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = v7;
    }
    if (v3 < 0) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = v8;
    }
    unsigned int v14 = 0;
    this = AVC_RBSP::get_next_uint32((AVC_RBSP *)this, *(unsigned __int8 **)(this + 24), v15, &v14, &v15[1]);
    *(void *)(v2 + 24) += v15[0];
    signed int v3 = 8 * v14;
    uint64_t v13 = (v12 | v15[1]) << v4;
    *(void *)(v2 + 8) = (v11 | this) << v4;
    *(void *)(v2 + 56) = v13;
    a2 = v4;
  }
  *(_DWORD *)(v2 + 16) = v3 - a2;
  return this;
}

uint64_t AVC_RBSP::getNumberOfBitsParsed(int8x8_t *this)
{
  return 8 * (this[3].i32[0] - this[5].i32[0]) - this[2].i32[0] - (vaddlv_u8((uint8x8_t)vcnt_s8(this[7])) & 0x78u) - 32;
}

uint64_t AVC_RBSP::byte_alignment(AVC_RBSP *this)
{
  AVC_RBSP::flush_bits((uint64_t)this, 1);
  int v2 = *((_DWORD *)this + 4) & 7;

  return AVC_RBSP::flush_bits((uint64_t)this, v2);
}

BOOL AVC_RBSP::more_rbsp_data(int8x8_t *this)
{
  int v1 = this[2].i32[0]
     + (vaddlv_u8((uint8x8_t)vcnt_s8(this[7])) & 0x78)
     + 8 * this[8].i32[0]
     + 8 * (this[5].i32[0] - this[3].i32[0])
     + 32;
  return v1 > 8 || (unint64_t)this[1].u32[1] >> (32 - v1) << -(char)v1 != 0x80000000;
}

uint64_t AVC_RBSP::setRBSP(AVC_RBSP *this, unsigned __int8 *a2, uint64_t a3)
{
  *(void *)uint64_t v8 = 0;
  *((void *)this + 4) = &a2[a3];
  *((void *)this + 5) = a2;
  *((_DWORD *)this + 16) = a3;
  *((void *)this + 7) = 0;
  *((_WORD *)this + 24) = -1;
  unsigned int v7 = 0;
  *((void *)this + 1) = AVC_RBSP::get_next_uint32(this, a2, v8, &v7, &v8[1]) << 32;
  *((void *)this + 7) = (unint64_t)v8[1] << 32;
  unint64_t v5 = &a2[v8[0]];
  uint64_t result = AVC_RBSP::get_next_uint32(this, v5, v8, &v7, &v8[1]);
  *((void *)this + 1) |= result;
  *((void *)this + 7) |= v8[1];
  *((void *)this + 3) = &v5[v8[0]];
  *((_DWORD *)this + 4) = 8 * v7;
  return result;
}

uint64_t AVC_RBSP::setLen(uint64_t this, unsigned __int8 *a2, uint64_t a3)
{
  *(void *)(this + 32) = &a2[a3];
  *(void *)(this + 40) = a2;
  *(_DWORD *)(this + 64) = a3;
  return this;
}

uint64_t AVC_RBSP::parseNAL(uint64_t a1, unsigned char *a2, int a3)
{
  uint64_t access_unit = AVC_RBSP::next_access_unit((AVC_RBSP *)a1, a3);
  if (access_unit)
  {
    uint64_t v6 = *(void *)(a1 + 8) >> 63;
    AVC_RBSP::flush_bits(a1, 1);
    *a2 = *a2 & 0xFE | v6;
    unint64_t v7 = *(void *)(a1 + 8);
    AVC_RBSP::flush_bits(a1, 2);
    *a2 = *a2 & 0xF9 | (v7 >> 61) & 6;
    LOBYTE(v7) = *(unsigned char *)(a1 + 15);
    AVC_RBSP::flush_bits(a1, 5);
    *a2 = v7 & 0xF8 | *a2 & 7;
  }
  return access_unit;
}

uint64_t AVC_RBSP::scalingList(AVC_RBSP *this, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5)
{
  if (a3 == 16 || a3 == 64)
  {
    if (a5)
    {
      BOOL v8 = 0;
      uint64_t v9 = a3;
      unint64_t v10 = (unsigned __int8 *)&zigZagScanOrder4x4;
      LODWORD(v11) = 8;
      uint64_t v12 = 8;
      uint64_t v13 = (unsigned __int8 *)&zigZagScanOrder8x8;
      do
      {
        if (a3 == 16) {
          unsigned int v14 = v10;
        }
        else {
          unsigned int v14 = v13;
        }
        uint64_t v15 = *v14;
        if (!v11) {
          goto LABEL_13;
        }
        int v16 = __clz(*((_DWORD *)this + 3));
        if (v16)
        {
          AVC_RBSP::flush_bits((uint64_t)this, v16 + 1);
          int v17 = *((_DWORD *)this + 3) >> -(char)v16;
          AVC_RBSP::flush_bits((uint64_t)this, v16);
          int v18 = v17 + ~(-1 << v16);
        }
        else
        {
          AVC_RBSP::flush_bits((uint64_t)this, 1);
          int v18 = 0;
        }
        LODWORD(v11) = ((v18 & 1) == 0) + v12 + (-((v18 & 1) == 0) ^ ((v18 + 1) >> 1));
        BOOL v8 = (v15 | (((v18 & 1) == 0)
                                                     + v12
                                                     + (-((v18 & 1) == 0) ^ ((v18 + 1) >> 1)))) == 0;
        uint64_t v11 = v11;
        uint64_t v19 = v11;
        if (!(_BYTE)v11)
        {
LABEL_13:
          LODWORD(v11) = 0;
          uint64_t v19 = v12;
        }
        a2[v15] = v19;
        ++v10;
        ++v13;
        uint64_t v12 = v19;
        --v9;
      }
      while (v9);
      return (2 * v8);
    }
    else
    {
      if (a3 == 16)
      {
        if (a4 > 2) {
          unsigned int v21 = &avcDefaultInterScalingList4x4;
        }
        else {
          unsigned int v21 = &avcDefaultIntraScalingList4x4;
        }
        *(_OWORD *)a2 = *v21;
      }
      else
      {
        if (a4) {
          BOOL v22 = &avcDefaultInterScalingList8x8;
        }
        else {
          BOOL v22 = &avcDefaultIntraScalingList8x8;
        }
        long long v23 = v22[1];
        *(_OWORD *)a2 = *v22;
        *((_OWORD *)a2 + 1) = v23;
        long long v24 = v22[3];
        *((_OWORD *)a2 + 2) = v22[2];
        *((_OWORD *)a2 + 3) = v24;
      }
      return 1;
    }
  }
  else
  {
    printf("Wrong sizeOfScalingList (%d). Should be either 16 or 64", a3);
    return 0xFFFFFFFFLL;
  }
}

uint64_t AVC_RBSP::se_v(AVC_RBSP *this)
{
  int v2 = __clz(*((_DWORD *)this + 3));
  if (v2)
  {
    AVC_RBSP::flush_bits((uint64_t)this, v2 + 1);
    int v3 = *((_DWORD *)this + 3) >> -(char)v2;
    AVC_RBSP::flush_bits((uint64_t)this, v2);
    int v4 = v3 + ~(-1 << v2);
  }
  else
  {
    AVC_RBSP::flush_bits((uint64_t)this, 1);
    int v4 = 0;
  }
  return (-((v4 & 1) == 0) ^ ((v4 + 1) >> 1)) + ((v4 & 1) == 0);
}

uint64_t AVC_RBSP::parseSPS(uint64_t a1, uint64_t a2)
{
  *(void *)&v90[5] = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      unsigned int v14 = &_os_log_internal;
      uint64_t v15 = "AppleAVD: NULL spsList";
      uint32_t v16 = 2;
      goto LABEL_68;
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 8);
  unint64_t v5 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  unint64_t v6 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  unint64_t v7 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  unint64_t v8 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  unint64_t v87 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  unint64_t v86 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  uint64_t v85 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 2);
  unint64_t v9 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 8);
  int v10 = __clz(*(_DWORD *)(a1 + 12));
  if (v10)
  {
    AVC_RBSP::flush_bits(a1, v10 + 1);
    int v11 = *(_DWORD *)(a1 + 12) >> -(char)v10;
    AVC_RBSP::flush_bits(a1, v10);
    int v12 = v11 + ~(-1 << v10);
    unsigned int v13 = v12;
    if (v12 >= 0x20u)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v90[0] = v12;
        LOWORD(v90[1]) = 1024;
        *(_DWORD *)((char *)&v90[1] + 2) = 31;
        unsigned int v14 = &_os_log_internal;
        uint64_t v15 = "AppleAVD: seq_parameter_set_id(%d) out of range [0..%d]";
        uint32_t v16 = 14;
LABEL_68:
        _os_log_impl(&dword_223977000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, v16);
        return 0xFFFFFFFFLL;
      }
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    AVC_RBSP::flush_bits(a1, 1);
    unsigned int v13 = 0;
    LOBYTE(v12) = 0;
  }
  unint64_t v17 = HIBYTE(v4);
  if ((HIBYTE(v4) & 0xDF) != 0x56
    && ((v17 - 66) > 0x3E || ((1 << (HIBYTE(v4) - 66)) & 0x4100100400420801) == 0)
    && v17 != 44
    && v17 != 244)
  {
    printf("profile_idc(%d) is not valid", HIBYTE(v4));
    return 0xFFFFFFFFLL;
  }
  unint64_t v84 = HIBYTE(v9);
  unint64_t v18 = v8;
  unint64_t v19 = v7;
  unint64_t v20 = v5 >> 63;
  unsigned int v21 = v13;
  unsigned int v83 = v13;
  BOOL v22 = (unsigned char *)(a2 + 2224 * v13);
  bzero(v22, 0x8B0uLL);
  *(void *)&long long v23 = 0x1010101010101010;
  *((void *)&v23 + 1) = 0x1010101010101010;
  *(_OWORD *)(v22 + 242) = v23;
  *(_OWORD *)(v22 + 226) = v23;
  *(_OWORD *)(v22 + 210) = v23;
  *(_OWORD *)(v22 + 194) = v23;
  *(_OWORD *)(v22 + 178) = v23;
  *(_OWORD *)(v22 + 162) = v23;
  *(_OWORD *)(v22 + 146) = v23;
  *(_OWORD *)(v22 + 130) = v23;
  *(_OWORD *)(v22 + 114) = v23;
  *(_OWORD *)(v22 + 98) = v23;
  *(_OWORD *)(v22 + 82) = v23;
  *(_OWORD *)(v22 + 66) = v23;
  *(_OWORD *)(v22 + 50) = v23;
  *(_OWORD *)(v22 + 34) = v23;
  *(_OWORD *)(v22 + 482) = v23;
  *(_OWORD *)(v22 + 498) = v23;
  *(_OWORD *)(v22 + 450) = v23;
  *(_OWORD *)(v22 + 466) = v23;
  *(_OWORD *)(v22 + 418) = v23;
  *(_OWORD *)(v22 + 434) = v23;
  *(_OWORD *)(v22 + 386) = v23;
  *(_OWORD *)(v22 + 402) = v23;
  *(_OWORD *)(v22 + 354) = v23;
  *(_OWORD *)(v22 + 370) = v23;
  *(_OWORD *)(v22 + 322) = v23;
  *(_OWORD *)(v22 + 338) = v23;
  *(_OWORD *)(v22 + 290) = v23;
  *(_OWORD *)(v22 + 306) = v23;
  char v24 = (v6 >> 62) & 2 | v20 | (v19 >> 61) & 4 | (v18 >> 60) & 8;
  *(_OWORD *)(v22 + 258) = v23;
  *(_OWORD *)(v22 + 274) = v23;
  uint64_t v25 = a2;
  unsigned char *v22 = v17;
  v22[1] = v24 | (v87 >> 59) & 0x10 | (v86 >> 58) & 0x20 | HIBYTE(v85) & 0xC0;
  v22[2] = v84;
  _OWORD v22[3] = v12;
  v22[4] = 1;
  uint64_t v26 = v22 + 4;
  if ((v17 - 83) <= 0x2D && ((1 << (v17 - 83)) & 0x208808020009) != 0
    || v17 == 244
    || v17 == 44)
  {
    int v27 = __clz(*(_DWORD *)(a1 + 12));
    if (v27)
    {
      AVC_RBSP::flush_bits(a1, v27 + 1);
      int v28 = *(_DWORD *)(a1 + 12) >> -(char)v27;
      AVC_RBSP::flush_bits(a1, v27);
      *uint64_t v26 = v28 + ~(-1 << v27);
      unsigned int v29 = (v28 + ~(-1 << v27));
      if (v29 >= 4)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)uint64_t v90 = "sps->chroma_format_idc";
        unsigned int v14 = &_os_log_internal;
        uint64_t v15 = "AppleAVD: ERROR: %s \n";
LABEL_67:
        uint32_t v16 = 12;
        goto LABEL_68;
      }
      if (v29 == 3)
      {
        uint64_t v30 = *(void *)(a1 + 8) >> 63;
        AVC_RBSP::flush_bits(a1, 1);
        *(unsigned char *)(a2 + 2224 * v21 + 5) = v30;
      }
    }
    else
    {
      AVC_RBSP::flush_bits(a1, 1);
      *uint64_t v26 = 0;
    }
    int v31 = __clz(*(_DWORD *)(a1 + 12));
    if (v31)
    {
      AVC_RBSP::flush_bits(a1, v31 + 1);
      int v32 = *(_DWORD *)(a1 + 12) >> -(char)v31;
      AVC_RBSP::flush_bits(a1, v31);
      *(unsigned char *)(a2 + 2224 * v21 + 6) = v32 + ~(-1 << v31);
      if ((v32 + ~(-1 << v31)) >= 7u)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)uint64_t v90 = "sps->bit_depth_luma_minus8";
        unsigned int v14 = &_os_log_internal;
        uint64_t v15 = "AppleAVD: ERROR: %s \n";
        goto LABEL_67;
      }
    }
    else
    {
      AVC_RBSP::flush_bits(a1, 1);
      *(unsigned char *)(a2 + 2224 * v21 + 6) = 0;
    }
    int v33 = __clz(*(_DWORD *)(a1 + 12));
    if (v33)
    {
      AVC_RBSP::flush_bits(a1, v33 + 1);
      int v34 = *(_DWORD *)(a1 + 12) >> -(char)v33;
      AVC_RBSP::flush_bits(a1, v33);
      *(unsigned char *)(a2 + 2224 * v21 + 7) = v34 + ~(-1 << v33);
      if ((v34 + ~(-1 << v33)) >= 7u)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)uint64_t v90 = "sps->bit_depth_chroma_minus8";
        unsigned int v14 = &_os_log_internal;
        uint64_t v15 = "AppleAVD: ERROR: %s \n";
        goto LABEL_67;
      }
    }
    else
    {
      AVC_RBSP::flush_bits(a1, 1);
      *(unsigned char *)(a2 + 2224 * v21 + 7) = 0;
    }
    uint64_t v35 = *(void *)(a1 + 8) >> 63;
    AVC_RBSP::flush_bits(a1, 1);
    uint64_t v36 = a2 + 2224 * v21;
    *(unsigned char *)(v36 + 8) = v35;
    uint64_t v37 = *(void *)(a1 + 8);
    AVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(v36 + 9) = v37 < 0;
    if (v37 < 0)
    {
      unint64_t v38 = 0;
      int v88 = *v26;
      uint64_t v39 = v88 == 3 ? 12 : 8;
      unsigned int v40 = v21;
      uint64_t v41 = a2 + 2224 * v21;
      uint64_t v42 = v41 + 22;
      uint64_t v43 = (unsigned __int8 *)(v41 + 34);
      do
      {
        uint64_t v44 = *(void *)(a1 + 8) >> 63;
        AVC_RBSP::flush_bits(a1, 1);
        *(unsigned char *)(v42 + v38 - 12) = v44;
        if (v38 > 5)
        {
          uint64_t v48 = (v38 - 6);
          BOOL v46 = (unsigned __int8 *)(v25 + 2224 * v40 + (v48 << 6) + 130);
          long long v45 = (AVC_RBSP *)a1;
          unsigned int v47 = 64;
        }
        else
        {
          long long v45 = (AVC_RBSP *)a1;
          BOOL v46 = v43;
          unsigned int v47 = 16;
          LODWORD(v48) = v38;
        }
        *(unsigned char *)(v42 + v38++) = AVC_RBSP::scalingList(v45, v46, v47, v48, v44);
        v43 += 16;
      }
      while (v39 != v38);
      unsigned int v21 = v40;
      if (v88 != 3)
      {
        uint64_t v49 = 0;
        double v50 = (long long *)(v25 + 2224 * v40 + 450);
        do
        {
          if (v49) {
            long long v51 = &avcDefaultIntraScalingList8x8;
          }
          else {
            long long v51 = &avcDefaultInterScalingList8x8;
          }
          long long v52 = v51[1];
          long long *v50 = *v51;
          v50[1] = v52;
          long long v53 = v51[3];
          v50[2] = v51[2];
          v50[3] = v53;
          ++v49;
          v50 -= 4;
        }
        while (v49 != 4);
      }
    }
  }
  int v54 = __clz(*(_DWORD *)(a1 + 12));
  if (v54)
  {
    AVC_RBSP::flush_bits(a1, v54 + 1);
    int v55 = *(_DWORD *)(a1 + 12) >> -(char)v54;
    AVC_RBSP::flush_bits(a1, v54);
    *(unsigned char *)(v25 + 2224 * v21 + 514) = v55 + ~(-1 << v54);
    if ((v55 + ~(-1 << v54)) >= 0xDu)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)uint64_t v90 = "sps->log2_max_frame_num_minus4";
      unsigned int v14 = &_os_log_internal;
      uint64_t v15 = "AppleAVD: ERROR: %s \n";
      goto LABEL_67;
    }
  }
  else
  {
    AVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(v25 + 2224 * v21 + 514) = 0;
  }
  int v56 = __clz(*(_DWORD *)(a1 + 12));
  if (!v56)
  {
    AVC_RBSP::flush_bits(a1, 1);
    unsigned int v59 = v21;
    *(unsigned char *)(v25 + 2224 * v21 + 515) = 0;
LABEL_64:
    unsigned __int8 v60 = AVC_RBSP::ue_v((AVC_RBSP *)a1);
    *(unsigned char *)(v25 + 2224 * v59 + 516) = v60;
    if (v60 >= 0xDu)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)uint64_t v90 = "sps->log2_max_pic_order_cnt_lsb_minus4";
      unsigned int v14 = &_os_log_internal;
      uint64_t v15 = "AppleAVD: ERROR: %s \n";
      goto LABEL_67;
    }
    goto LABEL_77;
  }
  AVC_RBSP::flush_bits(a1, v56 + 1);
  int v57 = *(_DWORD *)(a1 + 12) >> -(char)v56;
  AVC_RBSP::flush_bits(a1, v56);
  *(unsigned char *)(v25 + 2224 * v21 + 515) = v57 + ~(-1 << v56);
  unsigned int v58 = (v57 + ~(-1 << v56));
  if (v58 >= 3)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)uint64_t v90 = "sps->pic_order_cnt_type";
    unsigned int v14 = &_os_log_internal;
    uint64_t v15 = "AppleAVD: ERROR: %s \n";
    goto LABEL_67;
  }
  if (v58 == 1)
  {
    uint64_t v62 = *(void *)(a1 + 8) >> 63;
    AVC_RBSP::flush_bits(a1, 1);
    unsigned int v59 = v21;
    uint64_t v63 = v25 + 2224 * v21;
    *(unsigned char *)(v63 + 517) = v62;
    *(_DWORD *)(v63 + 520) = AVC_RBSP::se_v((AVC_RBSP *)a1);
    *(_DWORD *)(v63 + 524) = AVC_RBSP::se_v((AVC_RBSP *)a1);
    char v64 = AVC_RBSP::ue_v((AVC_RBSP *)a1);
    *(unsigned char *)(v63 + 528) = v64;
    if (v64)
    {
      unint64_t v65 = 0;
      unsigned int v66 = (unsigned __int8 *)(v63 + 528);
      do
      {
        int v67 = __clz(*(_DWORD *)(a1 + 12));
        if (v67)
        {
          AVC_RBSP::flush_bits(a1, v67 + 1);
          int v68 = *(_DWORD *)(a1 + 12) >> -(char)v67;
          AVC_RBSP::flush_bits(a1, v67);
          int v69 = v68 + ~(-1 << v67);
        }
        else
        {
          AVC_RBSP::flush_bits(a1, 1);
          int v69 = 0;
        }
        *(_DWORD *)(v25 + 2224 * v59 + 532 + 4 * v65++) = (-((v69 & 1) == 0) ^ ((v69 + 1) >> 1))
                                                          + ((v69 & 1) == 0);
      }
      while (v65 < *v66);
    }
    goto LABEL_77;
  }
  unsigned int v59 = v21;
  if (!((_BYTE)v57 + ~(-1 << v56))) {
    goto LABEL_64;
  }
LABEL_77:
  uint64_t v70 = v25 + 2224 * v59;
  *(unsigned char *)(v70 + 1556) = AVC_RBSP::ue_v((AVC_RBSP *)a1);
  uint64_t v71 = *(void *)(a1 + 8) >> 63;
  AVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(v70 + 1557) = v71;
  *(_WORD *)(v70 + 1558) = AVC_RBSP::ue_v((AVC_RBSP *)a1);
  *(_WORD *)(v70 + 1560) = AVC_RBSP::ue_v((AVC_RBSP *)a1);
  uint64_t v72 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(v70 + 1562) = v72 < 0;
  if ((v72 & 0x8000000000000000) == 0)
  {
    uint64_t v73 = *(void *)(a1 + 8) >> 63;
    AVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(v25 + 2224 * v59 + 1563) = v73;
  }
  uint64_t v74 = *(void *)(a1 + 8) >> 63;
  AVC_RBSP::flush_bits(a1, 1);
  uint64_t v75 = v25 + 2224 * v59;
  *(unsigned char *)(v75 + 1564) = v74;
  uint64_t v76 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(v75 + 1565) = v76 < 0;
  if (v76 < 0)
  {
    int v77 = (_WORD *)(v25 + 2224 * v59);
    v77[783] = AVC_RBSP::ue_v((AVC_RBSP *)a1);
    v77[784] = AVC_RBSP::ue_v((AVC_RBSP *)a1);
    v77[785] = AVC_RBSP::ue_v((AVC_RBSP *)a1);
    v77[786] = AVC_RBSP::ue_v((AVC_RBSP *)a1);
  }
  uint64_t v78 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(v25 + 2224 * v59 + 1574) = v78 < 0;
  if ((v78 & 0x8000000000000000) == 0
    || (uint64_t result = AVC_RBSP::parseVUI(a1, v25 + 2224 * v59 + 1576), result != -1))
  {
    unint64_t v79 = (char)*v26;
    if (v79 <= 3)
    {
      int v80 = dword_223ADBFD0[v79];
      int v81 = dword_223ADBFE0[v79];
      uint64_t v82 = v25 + 2224 * v59;
      *(_DWORD *)(v82 + 2212) = v80;
      *(_DWORD *)(v82 + 2216) = v81;
    }
    return v83;
  }
  return result;
}

uint64_t AVC_RBSP::ue_v(AVC_RBSP *this)
{
  int v2 = __clz(*((_DWORD *)this + 3));
  if (v2)
  {
    AVC_RBSP::flush_bits((uint64_t)this, v2 + 1);
    int v3 = *((_DWORD *)this + 3) >> -(char)v2;
    AVC_RBSP::flush_bits((uint64_t)this, v2);
    return (v3 + ~(-1 << v2));
  }
  else
  {
    AVC_RBSP::flush_bits((uint64_t)this, 1);
    return 0;
  }
}

__n128 AVC_RBSP::initSPS(int a1, __n128 *a2)
{
  int v2 = a2;
  bzero(a2, 0x8B0uLL);
  result.n128_u64[0] = 0x1010101010101010;
  result.n128_u64[1] = 0x1010101010101010;
  *(__n128 *)((char *)v2 + 34) = result;
  int v2 = (__n128 *)((char *)v2 + 34);
  v2[28] = result;
  v2[29] = result;
  v2[26] = result;
  v2[27] = result;
  v2[24] = result;
  v2[25] = result;
  v2[22] = result;
  v2[23] = result;
  v2[20] = result;
  v2[21] = result;
  v2[18] = result;
  v2[19] = result;
  v2[16] = result;
  v2[17] = result;
  v2[14] = result;
  v2[15] = result;
  v2[12] = result;
  v2[13] = result;
  v2[10] = result;
  v2[11] = result;
  v2[8] = result;
  v2[9] = result;
  v2[6] = result;
  v2[7] = result;
  v2[4] = result;
  v2[5] = result;
  v2[2] = result;
  v2[3] = result;
  v2[1] = result;
  return result;
}

uint64_t AVC_RBSP::parseVUI(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)a2 = v4 < 0;
  if (v4 < 0)
  {
    uint64_t v5 = HIBYTE(*(void *)(a1 + 8));
    AVC_RBSP::flush_bits(a1, 8);
    *(unsigned char *)(a2 + 1) = v5;
    if (v5 == 255)
    {
      __int16 v6 = *(_WORD *)(a1 + 14);
      AVC_RBSP::flush_bits(a1, 16);
      *(_WORD *)(a2 + 2) = v6;
      __int16 v7 = *(_WORD *)(a1 + 14);
      AVC_RBSP::flush_bits(a1, 16);
      *(_WORD *)(a2 + 4) = v7;
    }
  }
  uint64_t v8 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a2 + 6) & 0xFE | (v8 < 0);
  if (v8 < 0)
  {
    unint64_t v9 = *(void *)(a1 + 8);
    AVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(a2 + 6) = *(unsigned char *)(a2 + 6) & 0xFD | (v9 >> 62) & 2;
  }
  unint64_t v10 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a2 + 6) & 0xFB | (v10 >> 61) & 4;
  if ((v10 & 0x8000000000000000) != 0)
  {
    unint64_t v11 = *(void *)(a1 + 8);
    AVC_RBSP::flush_bits(a1, 3);
    *(unsigned char *)(a2 + 6) = *(unsigned char *)(a2 + 6) & 0xC7 | (v11 >> 58) & 0x38;
    unint64_t v12 = *(void *)(a1 + 8);
    AVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(a2 + 6) = *(unsigned char *)(a2 + 6) & 0xBF | (v12 >> 57) & 0x40;
    uint64_t v13 = *(void *)(a1 + 8);
    AVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(a2 + 6) = HIBYTE(v13) & 0x80 | *(unsigned char *)(a2 + 6) & 0x7F;
    if (v13 < 0)
    {
      char v14 = *(unsigned char *)(a1 + 15);
      AVC_RBSP::flush_bits(a1, 8);
      *(unsigned char *)(a2 + 7) = v14;
      char v15 = *(unsigned char *)(a1 + 15);
      AVC_RBSP::flush_bits(a1, 8);
      *(unsigned char *)(a2 + 8) = v15;
      char v16 = *(unsigned char *)(a1 + 15);
      AVC_RBSP::flush_bits(a1, 8);
      *(unsigned char *)(a2 + 9) = v16;
    }
  }
  uint64_t v17 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 10) = v17 < 0;
  if (v17 < 0)
  {
    int v18 = __clz(*(_DWORD *)(a1 + 12));
    if (v18)
    {
      AVC_RBSP::flush_bits(a1, v18 + 1);
      int v19 = *(_DWORD *)(a1 + 12) >> -(char)v18;
      AVC_RBSP::flush_bits(a1, v18);
      int v20 = v19 + ~(-1 << v18);
    }
    else
    {
      AVC_RBSP::flush_bits(a1, 1);
      LOBYTE(v20) = 0;
    }
    *(unsigned char *)(a2 + 11) = v20;
    int v21 = __clz(*(_DWORD *)(a1 + 12));
    if (v21)
    {
      AVC_RBSP::flush_bits(a1, v21 + 1);
      int v22 = *(_DWORD *)(a1 + 12) >> -(char)v21;
      AVC_RBSP::flush_bits(a1, v21);
      int v23 = v22 + ~(-1 << v21);
    }
    else
    {
      AVC_RBSP::flush_bits(a1, 1);
      LOBYTE(v23) = 0;
    }
    *(unsigned char *)(a2 + 12) = v23;
  }
  uint64_t v24 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 13) = v24 < 0;
  if (v24 < 0)
  {
    int v25 = *(_DWORD *)(a1 + 12);
    AVC_RBSP::flush_bits(a1, 32);
    *(_DWORD *)(a2 + 16) = v25;
    int v26 = *(_DWORD *)(a1 + 12);
    AVC_RBSP::flush_bits(a1, 32);
    *(_DWORD *)(a2 + 20) = v26;
    uint64_t v27 = *(void *)(a1 + 8) >> 63;
    AVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(a2 + 24) = v27;
  }
  uint64_t v28 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 25) = v28 < 0;
  if ((v28 & 0x8000000000000000) == 0
    || (uint64_t result = AVC_RBSP::parseHRD((AVC_RBSP *)a1, (unsigned __int8 *)(a2 + 28)), result != -1))
  {
    uint64_t v30 = *(void *)(a1 + 8);
    unint64_t v31 = (unint64_t)v30 >> 63;
    AVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(a2 + 324) = v30 < 0;
    if (v30 < 0)
    {
      uint64_t result = AVC_RBSP::parseHRD((AVC_RBSP *)a1, (unsigned __int8 *)(a2 + 328));
      if (result == -1) {
        return result;
      }
      LODWORD(v31) = *(unsigned __int8 *)(a2 + 324);
    }
    if (*(unsigned char *)(a2 + 25) || v31)
    {
      uint64_t v32 = *(void *)(a1 + 8) >> 63;
      AVC_RBSP::flush_bits(a1, 1);
      *(unsigned char *)(a2 + 624) = v32;
    }
    uint64_t v33 = *(void *)(a1 + 8) >> 63;
    AVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(a2 + 625) = v33;
    uint64_t v34 = *(void *)(a1 + 8);
    AVC_RBSP::flush_bits(a1, 1);
    uint64_t result = 0;
    *(unsigned char *)(a2 + 626) = v34 < 0;
    if (v34 < 0)
    {
      uint64_t v35 = *(void *)(a1 + 8) >> 63;
      AVC_RBSP::flush_bits(a1, 1);
      *(unsigned char *)(a2 + 627) = v35;
      int v36 = __clz(*(_DWORD *)(a1 + 12));
      if (v36)
      {
        AVC_RBSP::flush_bits(a1, v36 + 1);
        int v37 = *(_DWORD *)(a1 + 12) >> -(char)v36;
        AVC_RBSP::flush_bits(a1, v36);
        int v38 = v37 + ~(-1 << v36);
      }
      else
      {
        AVC_RBSP::flush_bits(a1, 1);
        LOBYTE(v38) = 0;
      }
      *(unsigned char *)(a2 + 628) = v38;
      int v39 = __clz(*(_DWORD *)(a1 + 12));
      if (v39)
      {
        AVC_RBSP::flush_bits(a1, v39 + 1);
        int v40 = *(_DWORD *)(a1 + 12) >> -(char)v39;
        AVC_RBSP::flush_bits(a1, v39);
        int v41 = v40 + ~(-1 << v39);
      }
      else
      {
        AVC_RBSP::flush_bits(a1, 1);
        LOBYTE(v41) = 0;
      }
      *(unsigned char *)(a2 + 629) = v41;
      int v42 = __clz(*(_DWORD *)(a1 + 12));
      if (v42)
      {
        AVC_RBSP::flush_bits(a1, v42 + 1);
        int v43 = *(_DWORD *)(a1 + 12) >> -(char)v42;
        AVC_RBSP::flush_bits(a1, v42);
        int v44 = v43 + ~(-1 << v42);
      }
      else
      {
        AVC_RBSP::flush_bits(a1, 1);
        LOBYTE(v44) = 0;
      }
      *(unsigned char *)(a2 + 630) = v44;
      int v45 = __clz(*(_DWORD *)(a1 + 12));
      if (v45)
      {
        AVC_RBSP::flush_bits(a1, v45 + 1);
        int v46 = *(_DWORD *)(a1 + 12) >> -(char)v45;
        AVC_RBSP::flush_bits(a1, v45);
        int v47 = v46 + ~(-1 << v45);
      }
      else
      {
        AVC_RBSP::flush_bits(a1, 1);
        LOBYTE(v47) = 0;
      }
      *(unsigned char *)(a2 + 631) = v47;
      int v48 = __clz(*(_DWORD *)(a1 + 12));
      if (v48)
      {
        AVC_RBSP::flush_bits(a1, v48 + 1);
        int v49 = *(_DWORD *)(a1 + 12) >> -(char)v48;
        AVC_RBSP::flush_bits(a1, v48);
        int v50 = v49 + ~(-1 << v48);
      }
      else
      {
        AVC_RBSP::flush_bits(a1, 1);
        LOBYTE(v50) = 0;
      }
      *(unsigned char *)(a2 + 632) = v50;
      int v51 = __clz(*(_DWORD *)(a1 + 12));
      if (v51)
      {
        AVC_RBSP::flush_bits(a1, v51 + 1);
        int v52 = *(_DWORD *)(a1 + 12) >> -(char)v51;
        AVC_RBSP::flush_bits(a1, v51);
        int v53 = v52 + ~(-1 << v51);
      }
      else
      {
        AVC_RBSP::flush_bits(a1, 1);
        LOBYTE(v53) = 0;
      }
      uint64_t result = 0;
      *(unsigned char *)(a2 + 633) = v53;
    }
  }
  return result;
}

uint64_t AVC_RBSP::parsePPS(int8x8_t *this, uint64_t a2, uint64_t a3)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  if (!a2 || !a3)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)int v88 = a2;
      *(_WORD *)&v88[8] = 2048;
      uint64_t v89 = a3;
      unint64_t v9 = &_os_log_internal;
      unint64_t v10 = "AppleAVD: NULL ppsList %p or spsList %p";
      uint32_t v11 = 22;
LABEL_87:
      _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, v11);
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  int v6 = __clz(this[1].u32[1]);
  if (v6)
  {
    AVC_RBSP::flush_bits((uint64_t)this, v6 + 1);
    unsigned __int32 v7 = (unsigned __int32)this[1].i32[1] >> -(char)v6;
    AVC_RBSP::flush_bits((uint64_t)this, v6);
    unsigned __int32 v8 = v7 + ~(-1 << v6);
  }
  else
  {
    AVC_RBSP::flush_bits((uint64_t)this, 1);
    LOWORD(v8) = 0;
  }
  int v12 = __clz(this[1].u32[1]);
  if (v12)
  {
    AVC_RBSP::flush_bits((uint64_t)this, v12 + 1);
    unsigned __int32 v13 = (unsigned __int32)this[1].i32[1] >> -(char)v12;
    AVC_RBSP::flush_bits((uint64_t)this, v12);
    unsigned __int32 v14 = v13 + ~(-1 << v12);
  }
  else
  {
    AVC_RBSP::flush_bits((uint64_t)this, 1);
    LOWORD(v14) = 0;
  }
  uint64_t v15 = (unsigned __int16)v8;
  if ((unsigned __int16)v8 >= 0x100u)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)int v88 = (unsigned __int16)v8;
      *(_WORD *)&v88[4] = 1024;
      *(_DWORD *)&v88[6] = 255;
      unint64_t v9 = &_os_log_internal;
      unint64_t v10 = "AppleAVD: pic_parameter_set_id(%d) out of range [0..%d]";
LABEL_17:
      uint32_t v11 = 14;
      goto LABEL_87;
    }
    return 0xFFFFFFFFLL;
  }
  if ((unsigned __int16)v14 >= 0x20u)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)int v88 = (unsigned __int16)v14;
      *(_WORD *)&v88[4] = 1024;
      *(_DWORD *)&v88[6] = 31;
      unint64_t v9 = &_os_log_internal;
      unint64_t v10 = "AppleAVD: seq_parameter_set_id(%d) out of range [0..%d]";
      goto LABEL_17;
    }
    return 0xFFFFFFFFLL;
  }
  char v16 = (_WORD *)(a2 + 604 * (unsigned __int16)v8);
  bzero(v16, 0x25CuLL);
  *(void *)&long long v17 = 0x1010101010101010;
  *((void *)&v17 + 1) = 0x1010101010101010;
  *(_OWORD *)((char *)v16 + 249) = v17;
  *(_OWORD *)((char *)v16 + 233) = v17;
  *(_OWORD *)((char *)v16 + 217) = v17;
  *(_OWORD *)((char *)v16 + 201) = v17;
  *(_OWORD *)((char *)v16 + 185) = v17;
  *(_OWORD *)((char *)v16 + 169) = v17;
  *(_OWORD *)((char *)v16 + 153) = v17;
  *(_OWORD *)((char *)v16 + 137) = v17;
  *(_OWORD *)((char *)v16 + 121) = v17;
  *(_OWORD *)((char *)v16 + 569) = v17;
  *(_OWORD *)((char *)v16 + 585) = v17;
  *(_OWORD *)((char *)v16 + 537) = v17;
  *(_OWORD *)((char *)v16 + 553) = v17;
  *(_OWORD *)((char *)v16 + 505) = v17;
  *(_OWORD *)((char *)v16 + 521) = v17;
  *(_OWORD *)((char *)v16 + 473) = v17;
  *(_OWORD *)((char *)v16 + 489) = v17;
  *(_OWORD *)((char *)v16 + 441) = v17;
  *(_OWORD *)((char *)v16 + 457) = v17;
  *(_OWORD *)((char *)v16 + 409) = v17;
  *(_OWORD *)((char *)v16 + 425) = v17;
  *(_OWORD *)((char *)v16 + 377) = v17;
  *(_OWORD *)((char *)v16 + 393) = v17;
  *(_OWORD *)((char *)v16 + 345) = v17;
  *(_OWORD *)((char *)v16 + 361) = v17;
  *(_OWORD *)((char *)v16 + 313) = v17;
  *(_OWORD *)((char *)v16 + 329) = v17;
  *(_OWORD *)((char *)v16 + 281) = v17;
  *(_OWORD *)((char *)v16 + 297) = v17;
  *(_OWORD *)((char *)v16 + 265) = v17;
  *char v16 = v8;
  *((unsigned char *)v16 + 2) = v14;
  uint64_t v18 = *(void *)&this[1] >> 63;
  AVC_RBSP::flush_bits((uint64_t)this, 1);
  *((unsigned char *)v16 + 3) = v18;
  uint64_t v19 = *(void *)&this[1] >> 63;
  AVC_RBSP::flush_bits((uint64_t)this, 1);
  *((unsigned char *)v16 + 4) = v19;
  int v20 = __clz(this[1].u32[1]);
  if (v20)
  {
    AVC_RBSP::flush_bits((uint64_t)this, v20 + 1);
    unsigned __int32 v21 = (unsigned __int32)this[1].i32[1] >> -(char)v20;
    AVC_RBSP::flush_bits((uint64_t)this, v20);
    unsigned __int32 v22 = v21 + ~(-1 << v20);
    uint64_t v23 = a2 + 604 * v15;
    *(unsigned char *)(v23 + 5) = v22;
    uint64_t v24 = (unsigned char *)(v23 + 5);
    if ((v22 & 0xF8) != 0)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)int v88 = "pps->num_slice_groups_minus1";
      unint64_t v9 = &_os_log_internal;
      unint64_t v10 = "AppleAVD: ERROR: %s \n";
LABEL_86:
      uint32_t v11 = 12;
      goto LABEL_87;
    }
    unsigned int v86 = (unsigned __int16)v14;
    if ((_BYTE)v22)
    {
      int v27 = __clz(this[1].u32[1]);
      if (v27)
      {
        AVC_RBSP::flush_bits((uint64_t)this, v27 + 1);
        unsigned __int32 v28 = (unsigned __int32)this[1].i32[1] >> -(char)v27;
        AVC_RBSP::flush_bits((uint64_t)this, v27);
        *(unsigned char *)(a2 + 604 * v15 + 6) = v28 + ~(-1 << v27);
        switch((_BYTE)v28 + ~(-1 << v27))
        {
          case 0:
            goto LABEL_42;
          case 2:
            if (*v24)
            {
              unint64_t v71 = 0;
              uint64_t v72 = a2 + 604 * v15;
              do
              {
                int v73 = __clz(this[1].u32[1]);
                if (v73)
                {
                  AVC_RBSP::flush_bits((uint64_t)this, v73 + 1);
                  unsigned __int32 v74 = (unsigned __int32)this[1].i32[1] >> -(char)v73;
                  AVC_RBSP::flush_bits((uint64_t)this, v73);
                  unsigned __int32 v75 = v74 + ~(-1 << v73);
                }
                else
                {
                  AVC_RBSP::flush_bits((uint64_t)this, 1);
                  LOWORD(v75) = 0;
                }
                *(_WORD *)(v72 + 2 * v71 + 40) = v75;
                int v76 = __clz(this[1].u32[1]);
                if (v76)
                {
                  AVC_RBSP::flush_bits((uint64_t)this, v76 + 1);
                  unsigned __int32 v77 = (unsigned __int32)this[1].i32[1] >> -(char)v76;
                  AVC_RBSP::flush_bits((uint64_t)this, v76);
                  unsigned __int32 v78 = v77 + ~(-1 << v76);
                }
                else
                {
                  AVC_RBSP::flush_bits((uint64_t)this, 1);
                  LOWORD(v78) = 0;
                }
                *(_WORD *)(v72 + 2 * v71++ + 56) = v78;
              }
              while (v71 < *v24);
            }
            goto LABEL_23;
          case 3:
          case 4:
          case 5:
            uint64_t v29 = *(void *)&this[1] >> 63;
            AVC_RBSP::flush_bits((uint64_t)this, 1);
            uint64_t v30 = a2 + 604 * v15;
            *(unsigned char *)(v30 + 72) = v29;
            uint64_t v31 = *(void *)&this[1] >> 63;
            AVC_RBSP::flush_bits((uint64_t)this, 1);
            *(_DWORD *)(v30 + 76) = v31;
            goto LABEL_23;
          case 6:
            unsigned int v79 = AVC_RBSP::ue_v((AVC_RBSP *)this);
            uint64_t v80 = a2 + 604 * v15;
            *(_DWORD *)(v80 + 80) = v79;
            int v81 = (unsigned int *)(v80 + 80);
            if (v79 <= *(unsigned __int16 *)(a3 + 2224 * v86 + 1558)
                      + (*(unsigned __int16 *)(a3 + 2224 * v86 + 1558) + 1)
                      * *(unsigned __int16 *)(a3 + 2224 * v86 + 1560))
            {
              unsigned int v83 = 0;
              unsigned int v84 = __clz(v79);
              do
              {
                unsigned __int32 v85 = (unsigned __int32)this[1].i32[1] >> v84;
                AVC_RBSP::flush_bits((uint64_t)this, 32 - v84);
                *(unsigned char *)(a2 + 604 * v15 + 84) = v85;
                ++v83;
              }
              while (v83 <= *v81);
              goto LABEL_23;
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            *(_DWORD *)buf = 136315138;
            *(void *)int v88 = "pps->pic_size_in_map_units_minus1";
            unint64_t v9 = &_os_log_internal;
            unint64_t v10 = "AppleAVD: ERROR: %s \n";
            break;
          default:
            goto LABEL_23;
        }
        goto LABEL_86;
      }
      AVC_RBSP::flush_bits((uint64_t)this, 1);
      *(unsigned char *)(a2 + 604 * v15 + 6) = 0;
LABEL_42:
      uint64_t v38 = 2;
      do
      {
        int v39 = __clz(this[1].u32[1]);
        if (v39)
        {
          AVC_RBSP::flush_bits((uint64_t)this, v39 + 1);
          unsigned __int32 v40 = (unsigned __int32)this[1].i32[1] >> -(char)v39;
          AVC_RBSP::flush_bits((uint64_t)this, v39);
          unsigned __int32 v41 = v40 + ~(-1 << v39);
        }
        else
        {
          AVC_RBSP::flush_bits((uint64_t)this, 1);
          unsigned __int32 v41 = 0;
        }
        *(_DWORD *)(a2 + 604 * v15 + 4 * v38) = v41;
        unint64_t v42 = v38 - 2;
        ++v38;
      }
      while (v42 < *v24);
    }
  }
  else
  {
    unsigned int v86 = (unsigned __int16)v14;
    AVC_RBSP::flush_bits((uint64_t)this, 1);
    *(unsigned char *)(a2 + 604 * v15 + 5) = 0;
  }
LABEL_23:
  int v25 = __clz(this[1].u32[1]);
  if (v25)
  {
    AVC_RBSP::flush_bits((uint64_t)this, v25 + 1);
    unsigned __int32 v26 = (unsigned __int32)this[1].i32[1] >> -(char)v25;
    AVC_RBSP::flush_bits((uint64_t)this, v25);
    *(unsigned char *)(a2 + 604 * v15 + 85) = v26 + ~(-1 << v25);
    if (((v26 + ~(-1 << v25)) & 0xF0) != 0)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)int v88 = "pps->num_ref_idx_l0_default_active_minus1";
      unint64_t v9 = &_os_log_internal;
      unint64_t v10 = "AppleAVD: ERROR: %s \n";
      goto LABEL_86;
    }
  }
  else
  {
    AVC_RBSP::flush_bits((uint64_t)this, 1);
    *(unsigned char *)(a2 + 604 * v15 + 85) = 0;
  }
  char v32 = AVC_RBSP::ue_v((AVC_RBSP *)this);
  *(unsigned char *)(a2 + 604 * v15 + 86) = v32;
  if ((v32 & 0xF0) != 0)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)int v88 = "pps->num_ref_idx_l1_default_active_minus1";
    unint64_t v9 = &_os_log_internal;
    unint64_t v10 = "AppleAVD: ERROR: %s \n";
    goto LABEL_86;
  }
  uint64_t v33 = *(void *)&this[1] >> 63;
  AVC_RBSP::flush_bits((uint64_t)this, 1);
  uint64_t v34 = a2 + 604 * v15;
  *(unsigned char *)(v34 + 87) = v33;
  uint64_t v35 = *(void *)&this[1] >> 62;
  AVC_RBSP::flush_bits((uint64_t)this, 2);
  *(unsigned char *)(v34 + 88) = v35;
  if (v35 == 3)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)int v88 = "pps->weighted_bipred_idc";
    unint64_t v9 = &_os_log_internal;
    unint64_t v10 = "AppleAVD: ERROR: %s \n";
    goto LABEL_86;
  }
  uint64_t v36 = a2 + 604 * v15;
  *(unsigned char *)(v36 + 89) = AVC_RBSP::se_v((AVC_RBSP *)this);
  int v37 = AVC_RBSP::se_v((AVC_RBSP *)this);
  *(unsigned char *)(v36 + 90) = v37;
  if (((v37 << 24) - 419430401) <= 0xCCFFFFFE)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)int v88 = "pps->pic_init_qs_minus26";
    unint64_t v9 = &_os_log_internal;
    unint64_t v10 = "AppleAVD: ERROR: %s \n";
    goto LABEL_86;
  }
  int v43 = AVC_RBSP::se_v((AVC_RBSP *)this);
  *(unsigned char *)(a2 + 604 * v15 + 91) = v43;
  if (((v43 << 24) - 201326593) <= 0xE7FFFFFE)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)int v88 = "pps->chroma_qp_index_offset";
    unint64_t v9 = &_os_log_internal;
    unint64_t v10 = "AppleAVD: ERROR: %s \n";
    goto LABEL_86;
  }
  int v44 = (unsigned char *)(a2 + 604 * v15);
  v44[601] = v43;
  uint64_t v45 = *(void *)&this[1] >> 63;
  AVC_RBSP::flush_bits((uint64_t)this, 1);
  v44[92] = v45;
  uint64_t v46 = *(void *)&this[1] >> 63;
  AVC_RBSP::flush_bits((uint64_t)this, 1);
  v44[93] = v46;
  uint64_t v47 = *(void *)&this[1] >> 63;
  AVC_RBSP::flush_bits((uint64_t)this, 1);
  v44[94] = v47;
  if (AVC_RBSP::more_rbsp_data(this))
  {
    int v48 = v44 + 601;
    uint64_t v49 = *(void *)&this[1] >> 63;
    AVC_RBSP::flush_bits((uint64_t)this, 1);
    uint64_t v50 = a2 + 604 * v15;
    *(unsigned char *)(v50 + 95) = v49;
    int v51 = (unsigned char *)(v50 + 95);
    uint64_t v52 = (uint64_t)this[1];
    AVC_RBSP::flush_bits((uint64_t)this, 1);
    v51[1] = v52 < 0;
    if (v52 < 0)
    {
      char v53 = *(unsigned char *)(a3 + 2224 * v86 + 4) == 3 ? 6 : 2;
      unsigned __int8 v54 = v53 * *v51 + 6;
      uint64_t v55 = v54 & 0xFE;
      if ((v54 & 0xFE) == 0) {
        goto LABEL_63;
      }
      unint64_t v56 = 0;
      uint64_t v57 = a2 + 604 * v15;
      uint64_t v58 = 121;
      do
      {
        uint64_t v59 = *(void *)&this[1] >> 63;
        AVC_RBSP::flush_bits((uint64_t)this, 1);
        *(unsigned char *)(v57 + v56 + 97) = v59;
        if (v56 > 5)
        {
          uint64_t v63 = (v56 - 6);
          unsigned __int8 v60 = (unsigned __int8 *)(a2 + 604 * v15 + (v63 << 6) + 217);
          OSStatus v61 = (AVC_RBSP *)this;
          unsigned int v62 = 64;
        }
        else
        {
          unsigned __int8 v60 = (unsigned __int8 *)(v57 + v58);
          OSStatus v61 = (AVC_RBSP *)this;
          unsigned int v62 = 16;
          LODWORD(v63) = v56;
        }
        *(unsigned char *)(v57 + v56++ + 109) = AVC_RBSP::scalingList(v61, v60, v62, v63, v59);
        v58 += 16;
      }
      while (v55 != v56);
      if (v55 != 12)
      {
LABEL_63:
        uint64_t v64 = 0;
        LODWORD(v65) = 12 - v55;
        if (v55 != 11 && v55 != 12) {
          uint64_t v65 = v65;
        }
        else {
          uint64_t v65 = 1;
        }
        do
        {
          unint64_t v66 = a2 + 604 * v15 + ((unint64_t)(5 - v64) << 6);
          if (v64) {
            int v67 = &avcDefaultIntraScalingList8x8;
          }
          else {
            int v67 = &avcDefaultInterScalingList8x8;
          }
          long long v68 = v67[1];
          *(_OWORD *)(v66 + 217) = *v67;
          *(_OWORD *)(v66 + 233) = v68;
          long long v69 = v67[3];
          *(_OWORD *)(v66 + 249) = v67[2];
          *(_OWORD *)(v66 + 265) = v69;
          ++v64;
        }
        while (v64 != v65);
      }
    }
    int v70 = AVC_RBSP::se_v((AVC_RBSP *)this);
    *int v48 = v70;
    if (((v70 << 24) - 201326593) <= 0xE7FFFFFE)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)int v88 = "pps->second_chroma_qp_index_offset";
      unint64_t v9 = &_os_log_internal;
      unint64_t v10 = "AppleAVD: ERROR: %s \n";
      goto LABEL_86;
    }
  }
  return v15;
}

__n128 AVC_RBSP::initPPS(int a1, __n128 *a2)
{
  int v2 = a2;
  bzero(a2, 0x25CuLL);
  result.n128_u64[0] = 0x1010101010101010;
  result.n128_u64[1] = 0x1010101010101010;
  *(__n128 *)((char *)v2 + 121) = result;
  int v2 = (__n128 *)((char *)v2 + 121);
  v2[28] = result;
  v2[29] = result;
  v2[26] = result;
  v2[27] = result;
  v2[24] = result;
  v2[25] = result;
  v2[22] = result;
  v2[23] = result;
  v2[20] = result;
  v2[21] = result;
  v2[18] = result;
  v2[19] = result;
  v2[16] = result;
  v2[17] = result;
  v2[14] = result;
  v2[15] = result;
  v2[12] = result;
  v2[13] = result;
  v2[10] = result;
  v2[11] = result;
  v2[8] = result;
  v2[9] = result;
  v2[6] = result;
  v2[7] = result;
  v2[4] = result;
  v2[5] = result;
  v2[2] = result;
  v2[3] = result;
  v2[1] = result;
  return result;
}

uint64_t AVC_RBSP::parseHRD(AVC_RBSP *this, unsigned __int8 *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = __clz(*((_DWORD *)this + 3));
  if (v4)
  {
    AVC_RBSP::flush_bits((uint64_t)this, v4 + 1);
    int v5 = *((_DWORD *)this + 3) >> -(char)v4;
    AVC_RBSP::flush_bits((uint64_t)this, v4);
    *a2 = v5 + ~(-1 << v4);
    if (((v5 + ~(-1 << v4)) & 0xE0) != 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 136315138;
        unsigned __int32 v22 = "hrd.cpb_cnt_minus1";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s \n", (uint8_t *)&v21, 0xCu);
      }
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    AVC_RBSP::flush_bits((uint64_t)this, 1);
    *a2 = 0;
  }
  uint64_t v7 = *((void *)this + 1) >> 60;
  AVC_RBSP::flush_bits((uint64_t)this, 4);
  a2[1] = a2[1] & 0xF0 | v7;
  LOBYTE(v7) = *((unsigned char *)this + 15);
  AVC_RBSP::flush_bits((uint64_t)this, 4);
  unint64_t v8 = 0;
  a2[1] = v7 & 0xF0 | a2[1] & 0xF;
  do
  {
    int v9 = __clz(*((_DWORD *)this + 3));
    if (v9)
    {
      AVC_RBSP::flush_bits((uint64_t)this, v9 + 1);
      int v10 = *((_DWORD *)this + 3) >> -(char)v9;
      AVC_RBSP::flush_bits((uint64_t)this, v9);
      int v11 = v10 + ~(-1 << v9);
    }
    else
    {
      AVC_RBSP::flush_bits((uint64_t)this, 1);
      int v11 = 0;
    }
    *(_DWORD *)&a2[4 * v8 + 4] = v11;
    int v12 = __clz(*((_DWORD *)this + 3));
    if (v12)
    {
      AVC_RBSP::flush_bits((uint64_t)this, v12 + 1);
      int v13 = *((_DWORD *)this + 3) >> -(char)v12;
      AVC_RBSP::flush_bits((uint64_t)this, v12);
      int v14 = v13 + ~(-1 << v12);
    }
    else
    {
      AVC_RBSP::flush_bits((uint64_t)this, 1);
      int v14 = 0;
    }
    *(_DWORD *)&a2[4 * v8 + 132] = v14;
    uint64_t v15 = *((void *)this + 1) >> 63;
    AVC_RBSP::flush_bits((uint64_t)this, 1);
    a2[v8 + 260] = v15;
  }
  while (v8++ < *a2);
  uint64_t v17 = *((void *)this + 1) >> 59;
  AVC_RBSP::flush_bits((uint64_t)this, 5);
  a2[292] = v17;
  uint64_t v18 = *((void *)this + 1) >> 59;
  AVC_RBSP::flush_bits((uint64_t)this, 5);
  a2[293] = v18;
  uint64_t v19 = *((void *)this + 1) >> 59;
  AVC_RBSP::flush_bits((uint64_t)this, 5);
  a2[294] = v19;
  uint64_t v20 = *((void *)this + 1) >> 59;
  AVC_RBSP::flush_bits((uint64_t)this, 5);
  uint64_t result = 0;
  a2[295] = v20;
  return result;
}

uint64_t AVC_RBSP::parseSliceHeader(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  if (!a2 || !a3 || !a4 || !a5)
  {
    printf("NULL sliceHeader %p or nal_header %p or ppsList %p or spsList %p");
    return 0xFFFFFFFFLL;
  }
  char v10 = *a3;
  bzero(a2, 0x588uLL);
  *(void *)&long long v11 = 0x303030303030303;
  *((void *)&v11 + 1) = 0x303030303030303;
  *(_OWORD *)(a2 + 47) = v11;
  int v12 = a2 + 47;
  *(_WORD *)(a2 + 79) = 771;
  *(_OWORD *)(a2 + 63) = v11;
  int v13 = __clz(*(_DWORD *)(a1 + 12));
  if (v13)
  {
    AVC_RBSP::flush_bits(a1, v13 + 1);
    int v14 = *(_DWORD *)(a1 + 12) >> -(char)v13;
    AVC_RBSP::flush_bits(a1, v13);
    int v15 = v14 + ~(-1 << v13);
  }
  else
  {
    AVC_RBSP::flush_bits(a1, 1);
    int v15 = 0;
  }
  *(_DWORD *)a2 = v15;
  int v17 = __clz(*(_DWORD *)(a1 + 12));
  if (v17)
  {
    AVC_RBSP::flush_bits(a1, v17 + 1);
    int v18 = *(_DWORD *)(a1 + 12) >> -(char)v17;
    AVC_RBSP::flush_bits(a1, v17);
    unsigned int v19 = v18 + ~(-1 << v17);
    a2[4] = v18 + ~(-1 << v17);
    uint64_t v20 = a2 + 4;
    if ((v19 & 0xFE) >= 0xA)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v164 = "sliceHeader->slice_type";
        int v21 = &_os_log_internal;
        goto LABEL_14;
      }
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    AVC_RBSP::flush_bits(a1, 1);
    unsigned int v19 = 0;
    uint64_t v20 = a2 + 4;
  }
  unsigned int v162 = v19 % 5;
  *uint64_t v20 = v19 % 5;
  unsigned int v22 = __clz(*(_DWORD *)(a1 + 12));
  if (v22)
  {
    AVC_RBSP::flush_bits(a1, v22 + 1);
    int v23 = *(_DWORD *)(a1 + 12) >> -(char)v22;
    AVC_RBSP::flush_bits(a1, v22);
    *((_WORD *)a2 + 3) = v23 + ~(-1 << v22);
    unsigned int v22 = (unsigned __int16)(v23 + ~(-1 << v22));
    if (v22 >= 0x100)
    {
      printf("pic_parameter_set_id(%d) out of range [0..%d]");
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    AVC_RBSP::flush_bits(a1, 1);
    *((_WORD *)a2 + 3) = 0;
  }
  unsigned int v24 = *(unsigned __int8 *)(a4 + 604 * v22 + 2);
  if (v24 >= 0x20)
  {
    printf("seq_parameter_set_id(%d) out of range [0..%d]");
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a5 + 2224 * *(unsigned __int8 *)(a4 + 604 * v22 + 2) + 5))
  {
    uint64_t v25 = *(void *)(a1 + 8) >> 62;
    AVC_RBSP::flush_bits(a1, 2);
    a2[8] = v25;
  }
  int v157 = v10 & 0xF8;
  unsigned int v160 = v24;
  uint64_t v26 = a5 + 2224 * v24;
  int v27 = *(unsigned __int8 *)(v26 + 514);
  int v28 = *(_DWORD *)(a1 + 12) >> (28 - v27);
  AVC_RBSP::flush_bits(a1, v27 + 4);
  *((_DWORD *)a2 + 3) = v28;
  int v29 = v162;
  if (!*(unsigned char *)(v26 + 1562))
  {
    uint64_t v30 = *(void *)(a1 + 8);
    AVC_RBSP::flush_bits(a1, 1);
    a2[16] = v30 < 0;
    if (v30 < 0)
    {
      uint64_t v31 = *(void *)(a1 + 8) >> 63;
      AVC_RBSP::flush_bits(a1, 1);
      a2[17] = v31;
    }
  }
  unsigned int v32 = v22;
  unsigned int v159 = v22;
  if (v157 == 40)
  {
    int v33 = __clz(*(_DWORD *)(a1 + 12));
    if (v33)
    {
      AVC_RBSP::flush_bits(a1, v33 + 1);
      int v34 = *(_DWORD *)(a1 + 12) >> -(char)v33;
      AVC_RBSP::flush_bits(a1, v33);
      int v35 = v34 + ~(-1 << v33);
      unsigned int v32 = v159;
    }
    else
    {
      AVC_RBSP::flush_bits(a1, 1);
      int v35 = 0;
    }
    *((_DWORD *)a2 + 5) = v35;
  }
  uint64_t v36 = (unsigned char *)(a5 + 2224 * v160 + 515);
  if (*v36)
  {
    *((void *)a2 + 3) = 0;
  }
  else
  {
    int v40 = *(unsigned __int8 *)(a5 + 2224 * v160 + 516);
    int v41 = *(_DWORD *)(a1 + 12) >> (28 - v40);
    AVC_RBSP::flush_bits(a1, v40 + 4);
    *((_DWORD *)a2 + 6) = v41;
    unsigned int v32 = v159;
    if (*(unsigned char *)(a4 + 604 * v159 + 4) && !a2[16]) {
      *((_DWORD *)a2 + 7) = AVC_RBSP::se_v((AVC_RBSP *)a1);
    }
  }
  if (*v36 == 1 && !*(unsigned char *)(a5 + 2224 * v160 + 517))
  {
    *((_DWORD *)a2 + 8) = AVC_RBSP::se_v((AVC_RBSP *)a1);
    if (*(unsigned char *)(a4 + 604 * v32 + 4) && !a2[16]) {
      *((_DWORD *)a2 + 9) = AVC_RBSP::se_v((AVC_RBSP *)a1);
    }
  }
  else
  {
    *((void *)a2 + 4) = 0;
  }
  if (*(unsigned char *)(a4 + 604 * v32 + 94))
  {
    int v37 = __clz(*(_DWORD *)(a1 + 12));
    if (v37)
    {
      AVC_RBSP::flush_bits(a1, v37 + 1);
      int v38 = *(_DWORD *)(a1 + 12) >> -(char)v37;
      AVC_RBSP::flush_bits(a1, v37);
      int v39 = v38 + ~(-1 << v37);
      unsigned int v32 = v159;
      a2[40] = v39;
      if ((v39 & 0x80) != 0)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v164 = "sliceHeader->redundant_pic_cnt";
          int v21 = &_os_log_internal;
          goto LABEL_14;
        }
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      AVC_RBSP::flush_bits(a1, 1);
      a2[40] = 0;
    }
  }
  if (v162 == 1)
  {
    uint64_t v42 = *(void *)(a1 + 8) >> 63;
    AVC_RBSP::flush_bits(a1, 1);
    BOOL v153 = 0;
    *(_WORD *)(a2 + 43) = *(_WORD *)(a4 + 604 * v32 + 85);
    a2[41] = v42;
    int v158 = a2 + 43;
    int v154 = a2 + 44;
  }
  else
  {
    a2[43] = *(unsigned char *)(a4 + 604 * v32 + 85);
    int v158 = a2 + 43;
    a2[44] = -1;
    int v154 = a2 + 44;
    BOOL v153 = v162 == 3;
    if (v162 > 3 || v162 == 2) {
      goto LABEL_52;
    }
  }
  uint64_t v43 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  a2[42] = v43 < 0;
  if (v43 < 0)
  {
    int v77 = __clz(*(_DWORD *)(a1 + 12));
    if (v77)
    {
      AVC_RBSP::flush_bits(a1, v77 + 1);
      int v78 = *(_DWORD *)(a1 + 12) >> -(char)v77;
      AVC_RBSP::flush_bits(a1, v77);
      int v79 = v78 + ~(-1 << v77);
      unsigned int v32 = v159;
      unsigned char *v158 = v79;
      if ((v79 << 24) >= 0xF000001)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v164 = "sliceHeader->num_ref_idx_l0_active_minus1";
          int v21 = &_os_log_internal;
          goto LABEL_14;
        }
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      AVC_RBSP::flush_bits(a1, 1);
      unsigned int v32 = v159;
      unsigned char *v158 = 0;
    }
    if (v162 == 1)
    {
      int v80 = AVC_RBSP::ue_v((AVC_RBSP *)a1);
      *int v154 = v80;
      if ((v80 << 24) >= 0xF000001)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v164 = "sliceHeader->num_ref_idx_l1_active_minus1";
          int v21 = &_os_log_internal;
          goto LABEL_14;
        }
        return 0xFFFFFFFFLL;
      }
      BOOL v151 = 1;
      BOOL v152 = 1;
      goto LABEL_54;
    }
  }
  else
  {
    unsigned int v32 = v159;
  }
LABEL_52:
  BOOL v151 = v162 != 2;
  BOOL v152 = v162 != 4;
  if (v162 != 2 && v162 != 4)
  {
LABEL_54:
    uint64_t v44 = *(void *)(a1 + 8);
    AVC_RBSP::flush_bits(a1, 1);
    a2[45] = v44 < 0;
    if ((v44 & 0x8000000000000000) == 0)
    {
LABEL_55:
      if (v29 != 1
        || (uint64_t v45 = *(void *)(a1 + 8), AVC_RBSP::flush_bits(a1, 1), a2[46] = v45 < 0, (v45 & 0x8000000000000000) == 0))
      {
LABEL_57:
        unsigned int v32 = v159;
        goto LABEL_58;
      }
      unint64_t v93 = 0;
      CFArrayRef v94 = a2 + 288;
      unint64_t v156 = a2 + 64;
      while (1)
      {
        int v95 = __clz(*(_DWORD *)(a1 + 12));
        if (v95)
        {
          AVC_RBSP::flush_bits(a1, v95 + 1);
          int v96 = *(_DWORD *)(a1 + 12) >> -(char)v95;
          AVC_RBSP::flush_bits(a1, v95);
          CFDataRef v97 = &v156[v93];
          v156[v93] = v96 + ~(-1 << v95);
          if (((v96 + ~(-1 << v95)) & 0xFC) != 0)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              uint64_t v164 = "sliceHeader->modification_of_pic_nums_idc[1][i]";
              int v21 = &_os_log_internal;
              goto LABEL_14;
            }
            return 0xFFFFFFFFLL;
          }
          unsigned int v98 = (v96 + ~(-1 << v95));
          if (v98 >= 2)
          {
            int v29 = v162;
            if (v98 == 2)
            {
              int v102 = __clz(*(_DWORD *)(a1 + 12));
              if (v102)
              {
                AVC_RBSP::flush_bits(a1, v102 + 1);
                int v103 = *(_DWORD *)(a1 + 12) >> -(char)v102;
                AVC_RBSP::flush_bits(a1, v102);
                int v104 = v103 + ~(-1 << v102);
                int v29 = v162;
              }
              else
              {
                AVC_RBSP::flush_bits(a1, 1);
                int v104 = 0;
              }
              *CFArrayRef v94 = v104;
            }
            goto LABEL_144;
          }
          CFDataRef v97 = &a2[v93 + 64];
          int v29 = v162;
        }
        else
        {
          AVC_RBSP::flush_bits(a1, 1);
          CFDataRef v97 = &v156[v93];
          v156[v93] = 0;
        }
        int v99 = __clz(*(_DWORD *)(a1 + 12));
        if (v99)
        {
          AVC_RBSP::flush_bits(a1, v99 + 1);
          int v100 = *(_DWORD *)(a1 + 12) >> -(char)v99;
          AVC_RBSP::flush_bits(a1, v99);
          int v101 = v100 + ~(-1 << v99);
          int v29 = v162;
        }
        else
        {
          AVC_RBSP::flush_bits(a1, 1);
          int v101 = 0;
        }
        *(v94 - 34) = v101;
LABEL_144:
        if (*v97 != 3)
        {
          ++v94;
          BOOL v92 = v93++ >= 0x10;
          if (!v92) {
            continue;
          }
        }
        goto LABEL_57;
      }
    }
    unint64_t v81 = 0;
    while (1)
    {
      int v82 = __clz(*(_DWORD *)(a1 + 12));
      if (!v82) {
        break;
      }
      AVC_RBSP::flush_bits(a1, v82 + 1);
      int v83 = *(_DWORD *)(a1 + 12) >> -(char)v82;
      AVC_RBSP::flush_bits(a1, v82);
      int v84 = v83 + ~(-1 << v82);
      unsigned __int32 v85 = &v12[v81];
      v12[v81] = v84;
      if ((v84 & 0xFC) != 0)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v164 = "sliceHeader->modification_of_pic_nums_idc[0][i]";
          int v21 = &_os_log_internal;
          goto LABEL_14;
        }
        return 0xFFFFFFFFLL;
      }
      if (v84 < 2u) {
        goto LABEL_119;
      }
      if (v84 != 2) {
        goto LABEL_124;
      }
      int v86 = __clz(*(_DWORD *)(a1 + 12));
      if (v86)
      {
        AVC_RBSP::flush_bits(a1, v86 + 1);
        int v87 = *(_DWORD *)(a1 + 12) >> -(char)v86;
        AVC_RBSP::flush_bits(a1, v86);
        int v88 = v87 + ~(-1 << v86);
        int v29 = v162;
      }
      else
      {
        AVC_RBSP::flush_bits(a1, 1);
        int v88 = 0;
      }
      uint64_t v91 = a2 + 220;
LABEL_123:
      *(_DWORD *)&v91[4 * v81] = v88;
LABEL_124:
      if (*v85 != 3)
      {
        BOOL v92 = v81++ >= 0x10;
        if (!v92) {
          continue;
        }
      }
      goto LABEL_55;
    }
    AVC_RBSP::flush_bits(a1, 1);
    unsigned __int32 v85 = &v12[v81];
    v12[v81] = 0;
LABEL_119:
    int v89 = __clz(*(_DWORD *)(a1 + 12));
    if (v89)
    {
      AVC_RBSP::flush_bits(a1, v89 + 1);
      int v90 = *(_DWORD *)(a1 + 12) >> -(char)v89;
      AVC_RBSP::flush_bits(a1, v89);
      int v88 = v90 + ~(-1 << v89);
      int v29 = v162;
    }
    else
    {
      AVC_RBSP::flush_bits(a1, 1);
      int v88 = 0;
    }
    uint64_t v91 = a2 + 84;
    goto LABEL_123;
  }
LABEL_58:
  if (*(unsigned char *)(a4 + 604 * v32 + 87) && (!v29 || v29 == 3) || v29 == 1 && *(unsigned char *)(a4 + 604 * v32 + 88) == 1)
  {
    int v46 = *(unsigned __int8 *)(a5 + 2224 * v160 + 4);
    a2[356] = AVC_RBSP::ue_v((AVC_RBSP *)a1);
    int v155 = v46;
    if (v46)
    {
      char v47 = AVC_RBSP::ue_v((AVC_RBSP *)a1);
      a2[357] = v47;
      if ((v47 & 0xF8) != 0)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v164 = "sliceHeader->chroma_log2_weight_denom";
          int v21 = &_os_log_internal;
          goto LABEL_14;
        }
        return 0xFFFFFFFFLL;
      }
    }
    unsigned int v48 = 0;
    uint64_t v49 = a5 + 2224 * v160;
    char v150 = (unsigned char *)(v49 + 6);
    unint64_t v161 = (unsigned char *)(v49 + 7);
    do
    {
      uint64_t v50 = *(void *)(a1 + 8);
      AVC_RBSP::flush_bits(a1, 1);
      uint64_t v51 = v48;
      a2[v48 + 358] = v50 < 0;
      if (v50 < 0)
      {
        int v53 = __clz(*(_DWORD *)(a1 + 12));
        if (v53)
        {
          AVC_RBSP::flush_bits(a1, v53 + 1);
          int v54 = *(_DWORD *)(a1 + 12) >> -(char)v53;
          AVC_RBSP::flush_bits(a1, v53);
          int v55 = v54 + ~(-1 << v53);
        }
        else
        {
          AVC_RBSP::flush_bits(a1, 1);
          int v55 = 0;
        }
        unsigned int v56 = (-((v55 & 1) == 0) ^ ((v55 + 1) >> 1)) + ((v55 & 1) == 0);
        *(_WORD *)&a2[2 * v51 + 374] = v56;
        if ((v56 << 16) - 8323073 <= 0xFF00FFFE)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            uint64_t v164 = "sliceHeader->luma_weight_l0[i]";
            int v21 = &_os_log_internal;
            goto LABEL_14;
          }
          return 0xFFFFFFFFLL;
        }
        int v57 = __clz(*(_DWORD *)(a1 + 12));
        if (v57)
        {
          AVC_RBSP::flush_bits(a1, v57 + 1);
          int v58 = *(_DWORD *)(a1 + 12) >> -(char)v57;
          AVC_RBSP::flush_bits(a1, v57);
          int v59 = v58 + ~(-1 << v57);
        }
        else
        {
          AVC_RBSP::flush_bits(a1, 1);
          int v59 = 0;
        }
        unsigned int v60 = (-((v59 & 1) == 0) ^ ((v59 + 1) >> 1)) + ((v59 & 1) == 0);
        OSStatus v61 = &a2[2 * v51];
        *((_WORD *)v61 + 203) = v60;
        if ((v60 << 16) - 8323073 <= 0xFF00FFFE)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            uint64_t v164 = "sliceHeader->luma_offset_l0[i]";
            int v21 = &_os_log_internal;
            goto LABEL_14;
          }
          return 0xFFFFFFFFLL;
        }
        *((_WORD *)v61 + 203) = v60 << *v150;
      }
      else
      {
        uint64_t v52 = &a2[2 * v48];
        *((_WORD *)v52 + 187) = 1 << a2[356];
        *((_WORD *)v52 + 203) = 0;
      }
      if (v155)
      {
        uint64_t v62 = *(void *)(a1 + 8);
        AVC_RBSP::flush_bits(a1, 1);
        a2[v51 + 438] = v62 < 0;
        if (v62 < 0)
        {
          uint64_t v65 = 0;
          char v66 = 1;
          do
          {
            char v67 = v66;
            int v68 = __clz(*(_DWORD *)(a1 + 12));
            if (v68)
            {
              AVC_RBSP::flush_bits(a1, v68 + 1);
              int v69 = *(_DWORD *)(a1 + 12) >> -(char)v68;
              AVC_RBSP::flush_bits(a1, v68);
              int v70 = v69 + ~(-1 << v68);
            }
            else
            {
              AVC_RBSP::flush_bits(a1, 1);
              int v70 = 0;
            }
            unsigned int v71 = (-((v70 & 1) == 0) ^ ((v70 + 1) >> 1)) + ((v70 & 1) == 0);
            *(_WORD *)&a2[4 * v51 + 454 + 2 * v65] = v71;
            if ((v71 << 16) - 8323073 <= 0xFF00FFFE)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315138;
                uint64_t v164 = "sliceHeader->chroma_weight_l0[i][j]";
                int v21 = &_os_log_internal;
                goto LABEL_14;
              }
              return 0xFFFFFFFFLL;
            }
            int v72 = __clz(*(_DWORD *)(a1 + 12));
            if (v72)
            {
              AVC_RBSP::flush_bits(a1, v72 + 1);
              int v73 = *(_DWORD *)(a1 + 12) >> -(char)v72;
              AVC_RBSP::flush_bits(a1, v72);
              int v74 = v73 + ~(-1 << v72);
            }
            else
            {
              AVC_RBSP::flush_bits(a1, 1);
              int v74 = 0;
            }
            unsigned int v75 = (-((v74 & 1) == 0) ^ ((v74 + 1) >> 1)) + ((v74 & 1) == 0);
            int v76 = &a2[4 * v51 + 2 * v65];
            *((_WORD *)v76 + 259) = (-((v74 & 1) == 0) ^ ((v74 + 1) >> 1)) + ((v74 & 1) == 0);
            if ((v75 << 16) - 8323073 <= 0xFF00FFFE)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315138;
                uint64_t v164 = "sliceHeader->chroma_offset_l0[i][j]";
                int v21 = &_os_log_internal;
                goto LABEL_14;
              }
              return 0xFFFFFFFFLL;
            }
            char v66 = 0;
            *((_WORD *)v76 + 259) = v75 << *v161;
            uint64_t v65 = 1;
          }
          while ((v67 & 1) != 0);
        }
        else
        {
          int v63 = 1 << a2[357];
          uint64_t v64 = &a2[4 * v51];
          *((_WORD *)v64 + 227) = v63;
          *(_DWORD *)(v64 + 518) = 0;
          *((_WORD *)v64 + 228) = v63;
        }
      }
      unsigned int v48 = v51 + 1;
    }
    while ((int)v51 + 1 <= (char)*v158);
    int v29 = v162;
    if (v162 == 1)
    {
      unsigned int v105 = 0;
      do
      {
        uint64_t v106 = *(void *)(a1 + 8);
        AVC_RBSP::flush_bits(a1, 1);
        uint64_t v107 = v105;
        a2[v105 + 582] = v106 < 0;
        if (v106 < 0)
        {
          int v109 = __clz(*(_DWORD *)(a1 + 12));
          if (v109)
          {
            AVC_RBSP::flush_bits(a1, v109 + 1);
            int v110 = *(_DWORD *)(a1 + 12) >> -(char)v109;
            AVC_RBSP::flush_bits(a1, v109);
            int v111 = v110 + ~(-1 << v109);
          }
          else
          {
            AVC_RBSP::flush_bits(a1, 1);
            int v111 = 0;
          }
          unsigned int v112 = (-((v111 & 1) == 0) ^ ((v111 + 1) >> 1)) + ((v111 & 1) == 0);
          *(_WORD *)&a2[2 * v107 + 598] = v112;
          if ((v112 << 16) - 8323073 <= 0xFF00FFFE)
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            *(_DWORD *)buf = 136315138;
            uint64_t v164 = "sliceHeader->luma_weight_l1[i]";
            int v21 = &_os_log_internal;
            goto LABEL_14;
          }
          int v113 = __clz(*(_DWORD *)(a1 + 12));
          if (v113)
          {
            AVC_RBSP::flush_bits(a1, v113 + 1);
            int v114 = *(_DWORD *)(a1 + 12) >> -(char)v113;
            AVC_RBSP::flush_bits(a1, v113);
            int v115 = v114 + ~(-1 << v113);
          }
          else
          {
            AVC_RBSP::flush_bits(a1, 1);
            int v115 = 0;
          }
          unsigned int v116 = (-((v115 & 1) == 0) ^ ((v115 + 1) >> 1)) + ((v115 & 1) == 0);
          int v117 = &a2[2 * v107];
          *((_WORD *)v117 + 315) = v116;
          if ((v116 << 16) - 8323073 <= 0xFF00FFFE)
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            *(_DWORD *)buf = 136315138;
            uint64_t v164 = "sliceHeader->luma_offset_l1[i]";
            int v21 = &_os_log_internal;
LABEL_14:
            _os_log_impl(&dword_223977000, v21, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s \n", buf, 0xCu);
            return 0xFFFFFFFFLL;
          }
          *((_WORD *)v117 + 315) = v116 << *v150;
        }
        else
        {
          int v108 = &a2[2 * v105];
          *((_WORD *)v108 + 299) = 1 << a2[356];
          *((_WORD *)v108 + 315) = 0;
        }
        if (v155)
        {
          uint64_t v118 = *(void *)(a1 + 8);
          AVC_RBSP::flush_bits(a1, 1);
          a2[v107 + 662] = v118 < 0;
          if (v118 < 0)
          {
            uint64_t v121 = 0;
            char v122 = 1;
            while (1)
            {
              char v123 = v122;
              int v124 = __clz(*(_DWORD *)(a1 + 12));
              if (v124)
              {
                AVC_RBSP::flush_bits(a1, v124 + 1);
                int v125 = *(_DWORD *)(a1 + 12) >> -(char)v124;
                AVC_RBSP::flush_bits(a1, v124);
                int v126 = v125 + ~(-1 << v124);
              }
              else
              {
                AVC_RBSP::flush_bits(a1, 1);
                int v126 = 0;
              }
              unsigned int v127 = (-((v126 & 1) == 0) ^ ((v126 + 1) >> 1)) + ((v126 & 1) == 0);
              *(_WORD *)&a2[4 * v107 + 678 + 2 * v121] = v127;
              if ((v127 << 16) - 8323073 <= 0xFF00FFFE)
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  return 0xFFFFFFFFLL;
                }
                *(_DWORD *)buf = 136315138;
                uint64_t v164 = "sliceHeader->chroma_weight_l1[i][j]";
                int v21 = &_os_log_internal;
                goto LABEL_14;
              }
              int v128 = __clz(*(_DWORD *)(a1 + 12));
              if (v128)
              {
                AVC_RBSP::flush_bits(a1, v128 + 1);
                int v129 = *(_DWORD *)(a1 + 12) >> -(char)v128;
                AVC_RBSP::flush_bits(a1, v128);
                int v130 = v129 + ~(-1 << v128);
              }
              else
              {
                AVC_RBSP::flush_bits(a1, 1);
                int v130 = 0;
              }
              unsigned int v131 = (-((v130 & 1) == 0) ^ ((v130 + 1) >> 1)) + ((v130 & 1) == 0);
              CMTime v132 = &a2[4 * v107 + 2 * v121];
              *((_WORD *)v132 + 371) = (-((v130 & 1) == 0) ^ ((v130 + 1) >> 1)) + ((v130 & 1) == 0);
              if ((v131 << 16) - 8323073 <= 0xFF00FFFE) {
                break;
              }
              char v122 = 0;
              *((_WORD *)v132 + 371) = v131 << *v161;
              uint64_t v121 = 1;
              if ((v123 & 1) == 0) {
                goto LABEL_168;
              }
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            *(_DWORD *)buf = 136315138;
            uint64_t v164 = "sliceHeader->chroma_offset_l1[i][j]";
            int v21 = &_os_log_internal;
            goto LABEL_14;
          }
          int v119 = 1 << a2[357];
          unint64_t v120 = &a2[4 * v107];
          *((_WORD *)v120 + 339) = v119;
          *(_DWORD *)(v120 + 742) = 0;
          *((_WORD *)v120 + 340) = v119;
        }
LABEL_168:
        unsigned int v105 = v107 + 1;
        int v29 = 1;
      }
      while ((int)v107 + 1 <= (char)*v154);
    }
  }
  if ((*a3 & 6) == 0) {
    goto LABEL_185;
  }
  uint64_t v133 = *(void *)(a1 + 8);
  AVC_RBSP::flush_bits(a1, 1);
  if (v157 == 40)
  {
    a2[806] = v133 < 0;
    uint64_t v134 = *(void *)(a1 + 8) >> 63;
    AVC_RBSP::flush_bits(a1, 1);
    a2[807] = v134;
LABEL_185:
    BOOL v135 = v151;
    if (!*(unsigned char *)(a4 + 604 * v159 + 3)) {
      BOOL v135 = 0;
    }
    if (v152 && v135)
    {
      unsigned __int8 v136 = AVC_RBSP::ue_v((AVC_RBSP *)a1);
      a2[1404] = v136;
      if (v136 >= 3u)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v164 = "sliceHeader->cabac_init_idc";
          int v21 = &_os_log_internal;
          goto LABEL_14;
        }
        return 0xFFFFFFFFLL;
      }
    }
    a2[1405] = AVC_RBSP::se_v((AVC_RBSP *)a1);
    if ((v29 - 3) <= 1)
    {
      if (v153)
      {
        uint64_t v137 = *(void *)(a1 + 8) >> 63;
        AVC_RBSP::flush_bits(a1, 1);
        a2[1406] = v137;
      }
      a2[1407] = AVC_RBSP::se_v((AVC_RBSP *)a1);
    }
    if (*(unsigned char *)(a4 + 604 * v159 + 92))
    {
      unsigned __int8 v138 = AVC_RBSP::ue_v((AVC_RBSP *)a1);
      a2[1408] = v138;
      if (v138 >= 3u)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v164 = "sliceHeader->disable_deblocking_filter_idc";
          int v21 = &_os_log_internal;
          goto LABEL_14;
        }
        return 0xFFFFFFFFLL;
      }
      if (v138 != 1)
      {
        int v139 = AVC_RBSP::se_v((AVC_RBSP *)a1);
        a2[1409] = v139;
        if (((v139 << 24) - 100663297) <= 0xF3FFFFFE)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            uint64_t v164 = "sliceHeader->slice_alpha_c0_offset_div2";
            int v21 = &_os_log_internal;
            goto LABEL_14;
          }
          return 0xFFFFFFFFLL;
        }
        int v147 = AVC_RBSP::se_v((AVC_RBSP *)a1);
        a2[1410] = v147;
        if (((v147 << 24) - 100663297) <= 0xF3FFFFFE)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            uint64_t v164 = "sliceHeader->slice_beta_offset_div2";
            int v21 = &_os_log_internal;
            goto LABEL_14;
          }
          return 0xFFFFFFFFLL;
        }
      }
    }
    if (!*(unsigned char *)(a4 + 604 * v159 + 5) || *(unsigned __int8 *)(a4 + 604 * v159 + 6) - 3 > 2) {
      return 0;
    }
    unsigned int v148 = __clz((*(_DWORD *)(a4 + 604 * v159 + 80) + 1) / (*(_DWORD *)(a4 + 604 * v159 + 76) + 1));
    int v149 = *(_DWORD *)(a1 + 12) >> v148;
    AVC_RBSP::flush_bits(a1, 32 - v148);
    uint64_t result = 0;
    *((_DWORD *)a2 + 353) = v149;
    return result;
  }
  a2[808] = v133 < 0;
  if ((v133 & 0x8000000000000000) == 0) {
    goto LABEL_185;
  }
  uint64_t v140 = 0;
  int v141 = a2 + 809;
  char v142 = a2 + 844;
  while (1)
  {
    if (v140 == 35)
    {
      printf("Index %d out of bound %d", 35, 35);
      goto LABEL_185;
    }
    int v143 = __clz(*(_DWORD *)(a1 + 12));
    if (!v143)
    {
      AVC_RBSP::flush_bits(a1, 1);
      a2[v140 + 809] = 0;
      goto LABEL_185;
    }
    AVC_RBSP::flush_bits(a1, v143 + 1);
    int v144 = *(_DWORD *)(a1 + 12) >> -(char)v143;
    AVC_RBSP::flush_bits(a1, v143);
    unsigned int v145 = (v144 + ~(-1 << v143));
    v141[v140] = v144 + ~(-1 << v143);
    if (v145 >= 7) {
      break;
    }
    if ((v145 | 2) == 3)
    {
      *char v142 = AVC_RBSP::ue_v((AVC_RBSP *)a1);
      unsigned int v145 = v141[v140];
    }
    int v29 = v162;
    if (v145 == 2)
    {
      v142[35] = AVC_RBSP::ue_v((AVC_RBSP *)a1);
      unsigned int v145 = v141[v140];
    }
    if (v145 == 6 || v145 == 3)
    {
      v142[70] = AVC_RBSP::ue_v((AVC_RBSP *)a1);
      unsigned int v145 = v141[v140];
    }
    if (v145 == 4)
    {
      v142[105] = AVC_RBSP::ue_v((AVC_RBSP *)a1);
      unsigned int v145 = v141[v140];
    }
    ++v140;
    ++v142;
    if (!v145) {
      goto LABEL_185;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v164 = "sliceHeader->memory_management_control_operation[i]";
    int v21 = &_os_log_internal;
    goto LABEL_14;
  }
  return 0xFFFFFFFFLL;
}

__n128 AVC_RBSP::initSliceHeader(int a1, char *a2)
{
  bzero(a2, 0x588uLL);
  *(_WORD *)(a2 + 79) = 771;
  result.n128_u64[0] = 0x303030303030303;
  result.n128_u64[1] = 0x303030303030303;
  *(__n128 *)(a2 + 63) = result;
  *(__n128 *)(a2 + 47) = result;
  return result;
}

uint64_t AppleAVDWrapperLghrnDecoderCreateInstance(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  VTVideoDecoderGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v7 = "AppleAVDWrapperLghrnDecoderCreateInstance";
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
  *a3 = 0;
  return v4;
}

uint64_t EnsureLghrnPropertyDictionaryCreation()
{
  return pthread_once(&sCreateSupportedPropertyDictionaryOnce_2, Lghrn_createSupportedPropertyDictionary);
}

void Lghrn_createSupportedPropertyDictionary()
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  CFDictionaryRef v0 = (const __CFDictionary *)*MEMORY[0x263F1EBD8];
  uint64_t v1 = *MEMORY[0x263F1EB88];
  keys = (void *)*MEMORY[0x263F1EBC8];
  uint64_t v20 = v1;
  CFDictionaryRef v2 = (const __CFDictionary *)*MEMORY[0x263F1EB98];
  CFDictionaryRef v12 = v0;
  CFDictionaryRef v13 = v2;
  *(void *)values = Lghrn_createFrameTypesArrayElement((const void *)*MEMORY[0x263F1E7E8]);
  *(void *)&values[8] = Lghrn_createFrameTypesArrayElement((const void *)*MEMORY[0x263F1E800]);
  *(void *)&values[16] = Lghrn_createFrameTypesArrayElement((const void *)*MEMORY[0x263F1E7F0]);
  CFDictionaryRef FrameTypesArrayElement = Lghrn_createFrameTypesArrayElement((const void *)*MEMORY[0x263F1E7F8]);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  sLghrnOnlyTheseFrames = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)values, 4, MEMORY[0x263EFFF70]);
  if (!sLghrnOnlyTheseFrames && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v27 = "Lghrn_createOnlyTheseFramesArray";
    __int16 v28 = 2080;
    int v29 = "sLghrnOnlyTheseFrames";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", buf, 0x16u);
  }
  for (uint64_t i = 0; i != 32; i += 8)
  {
    int v5 = *(const void **)&values[i];
    if (v5)
    {
      CFRelease(v5);
      *(void *)&values[i] = 0;
    }
  }
  if (sLghrnOnlyTheseFrames)
  {
    int v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    uint64_t v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    CFDictionaryRef v8 = CFDictionaryCreate(v3, 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    uint64_t v9 = *MEMORY[0x263F1E7B0];
    keys = (void *)*MEMORY[0x263F1E780];
    uint64_t v20 = v9;
    CFDictionaryRef v12 = v8;
    CFDictionaryRef v13 = v8;
    uint64_t v10 = *MEMORY[0x263F1E730];
    *(void *)&long long v21 = *MEMORY[0x263F1E6F8];
    *((void *)&v21 + 1) = v10;
    *(void *)&long long v14 = v8;
    *((void *)&v14 + 1) = v8;
    CFDictionaryRef v11 = CFDictionaryCreate(v3, (const void **)&keys, (const void **)&v12, 4, v6, v7);
    sLghrnVideoDecoderSupportedPropertyDictionary = (uint64_t)v11;
    if (sLghrnOnlyTheseFrames)
    {
      if (v11) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
  }
  else
  {
    CFDictionaryRef v8 = 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)values = 136315394;
    *(void *)&values[4] = "Lghrn_createSupportedPropertyDictionary";
    *(_WORD *)&values[12] = 2080;
    *(void *)&values[14] = "sLghrnOnlyTheseFrames";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", values, 0x16u);
  }
  if (!sLghrnVideoDecoderSupportedPropertyDictionary)
  {
LABEL_16:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)values = 136315394;
      *(void *)&values[4] = "Lghrn_createSupportedPropertyDictionary";
      *(_WORD *)&values[12] = 2080;
      *(void *)&values[14] = "sLghrnVideoDecoderSupportedPropertyDictionary";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", values, 0x16u);
    }
  }
LABEL_18:
  if (v8) {
    CFRelease(v8);
  }
}

uint64_t AppleAVDWrapperLghrnDecoderInvalidate()
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = (_DWORD *)DerivedStorage;
    CFDictionaryRef v2 = (pthread_mutex_t *)(DerivedStorage + 3168);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 3168));
    int v3 = v1[1378];
    if ((v3 - 1) >= 2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 136315394;
        uint64_t v10 = "AppleAVDWrapperLghrnDecoderInvalidate";
        __int16 v11 = 1024;
        int v12 = v3;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s called but plugin state is %d", (uint8_t *)&v9, 0x12u);
      }
    }
    else
    {
      v1[1378] = 3;
      AppleAVDWrapperLghrnDecoderCleanUp();
    }
    pthread_mutex_unlock(v2);
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v5)
    {
      int v6 = v1[834];
      int v7 = v1[786];
      int v8 = v1[787];
      int v9 = 136316162;
      uint64_t v10 = "AppleAVDWrapperLghrnDecoderInvalidate";
      __int16 v11 = 1024;
      int v12 = v6;
      __int16 v13 = 1024;
      int v14 = v7;
      __int16 v15 = 1024;
      int v16 = v8;
      __int16 v17 = 2048;
      long long v18 = v1;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: Lghrn, encryptionScheme %d, %d x %d, session : %p", (uint8_t *)&v9, 0x28u);
      return 0;
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = "AppleAVDWrapperLghrnDecoderInvalidate";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s called with invalid storage", (uint8_t *)&v9, 0xCu);
    }
    return 4294954393;
  }
  return result;
}

void AppleAVDWrapperLghrnDecoderFinalize()
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v10 = 136315138;
    __int16 v11 = "AppleAVDWrapperLghrnDecoderFinalize";
    uint64_t v4 = &_os_log_internal;
    BOOL v5 = "AppleAVD: %s called with invalid storage";
    uint32_t v6 = 12;
    goto LABEL_11;
  }
  uint64_t v1 = (_DWORD *)DerivedStorage;
  CFDictionaryRef v2 = (pthread_mutex_t *)(DerivedStorage + 3168);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 3168));
  int v3 = v1[1378];
  if ((v3 - 1) >= 3)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      __int16 v11 = "AppleAVDWrapperLghrnDecoderFinalize";
      __int16 v12 = 1024;
      int v13 = v3;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s called but plugin state is %d", (uint8_t *)&v10, 0x12u);
    }
  }
  else if (v3 != 3)
  {
    AppleAVDWrapperLghrnDecoderCleanUp();
  }
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = v1[834];
    int v8 = v1[786];
    int v9 = v1[787];
    int v10 = 136316162;
    __int16 v11 = "AppleAVDWrapperLghrnDecoderFinalize";
    __int16 v12 = 1024;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    __int16 v16 = 1024;
    int v17 = v9;
    __int16 v18 = 2048;
    uint64_t v19 = v1;
    uint64_t v4 = &_os_log_internal;
    BOOL v5 = "AppleAVD: %s() codecType: Lghrn, encryptionScheme %d, %d x %d, session : %p";
    uint32_t v6 = 40;
LABEL_11:
    _os_log_impl(&dword_223977000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v10, v6);
  }
}

__CFString *AppleAVDWrapperLghrnDecoderCopyDebugDescription(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CFStringAppendFormat(Mutable, 0, @"<AppleAVD_LghrnVideoDecoder %p>", a1);
  return Mutable;
}

uint64_t AppleAVDWrapperLghrnDecoderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E740]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E6F8])) {
      goto LABEL_5;
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E730]))
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E780]))
      {
        pthread_once(&sCreateSuggestedQualityOfServiceTiersOnce_1, myCreateSuggestedQualityOfServiceTiers_1);
        int v9 = (const void *)myVideoDecoderSuggestedQualityOfServiceTiers_1;
        if (!myVideoDecoderSuggestedQualityOfServiceTiers_1) {
          return FigSignalErrorAt3();
        }
        goto LABEL_6;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7B0])) {
        return 4294954396;
      }
LABEL_5:
      int v9 = (const void *)*MEMORY[0x263EFFB40];
LABEL_6:
      int v10 = (void *)CFRetain(v9);
LABEL_7:
      __int16 v11 = v10;
      uint64_t result = 0;
      *a4 = v11;
      return result;
    }
    int valuePtr = 0;
    uint64_t v13 = *(void *)(DerivedStorage + 3120);
    if (v13)
    {
      if (!AppleAVDGetParameter(v13, 69, (uint64_t)&valuePtr))
      {
        int v10 = CFNumberCreate(a3, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_7;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v19 = "AppleAVDWrapperLghrnDecoderCopyProperty";
        __int16 v14 = &_os_log_internal;
        int v15 = "AppleAVD: ERROR: %s() - AppleAVDGetParameter call for kAppleAVDGetFrameReceiverThreadPriority returned ERROR\n";
LABEL_22:
        _os_log_impl(&dword_223977000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v19 = "AppleAVDWrapperLghrnDecoderCopyProperty";
      __int16 v14 = &_os_log_internal;
      int v15 = "AppleAVD: WARNING: %s() - trying to get FrameReceiverThreadPriority before videoContext was created!\n";
      goto LABEL_22;
    }
    return 4294954385;
  }
  switch(*(_DWORD *)(DerivedStorage + 5496))
  {
    case 0:
      int v8 = (CFTypeRef *)MEMORY[0x263F1E7E8];
      break;
    case 1:
      int v8 = (CFTypeRef *)MEMORY[0x263F1E800];
      break;
    case 2:
      int v8 = (CFTypeRef *)MEMORY[0x263F1E7F0];
      break;
    case 3:
      int v8 = (CFTypeRef *)MEMORY[0x263F1E7F8];
      break;
    default:
      return 4294954396;
  }
  CFTypeRef v16 = *v8;
  CFRetain(*v8);
  uint64_t result = 0;
  *a4 = v16;
  return result;
}

uint64_t AppleAVDWrapperLghrnDecoderSetProperty(uint64_t a1, const void *a2)
{
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E780])) {
    return FigSignalErrorAt3();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7B0])) {
    return 4294954395;
  }
  return 4294954396;
}

uint64_t AppleAVDWrapperLghrnDecoderCleanUp()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(v1 + 3120);
  if (v2)
  {
    int v3 = (uint64_t *)(v1 + 3120);
    if (AppleAVDTerminateDecoder(v2) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_LghrnDecoder - ERROR terminate decoder", buf, 2u);
    }
    if (AppleAVDCloseConnection(v3) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_LghrnDecoder - ERROR closing connection", v13, 2u);
    }
  }
  uint64_t v4 = (FILE *)DerivedStorage[691];
  if (v4)
  {
    fclose(v4);
    DerivedStorage[691] = 0;
  }
  BOOL v5 = (FILE *)DerivedStorage[692];
  if (v5)
  {
    fclose(v5);
    DerivedStorage[692] = 0;
  }
  uint32_t v6 = (FILE *)DerivedStorage[693];
  if (v6)
  {
    fclose(v6);
    DerivedStorage[693] = 0;
  }
  int v7 = (__CVPixelBufferPool *)DerivedStorage[2];
  if (v7) {
    CVPixelBufferPoolRelease(v7);
  }
  DerivedStorage[2] = 0;
  int v8 = (__CVPixelBufferPool *)DerivedStorage[3];
  if (v8) {
    CVPixelBufferPoolRelease(v8);
  }
  DerivedStorage[3] = 0;
  int v9 = (const void *)DerivedStorage[4];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[4] = 0;
  }
  int v10 = (const void *)DerivedStorage[5];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[5] = 0;
  }
  __int16 v11 = (const void *)DerivedStorage[391];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[391] = 0;
  }
  *uint64_t DerivedStorage = 0;
  uint64_t result = FigFormatDescriptionRelease();
  DerivedStorage[1] = 0;
  return result;
}

void myCreateSuggestedQualityOfServiceTiers_1()
{
  values[4] = *(void **)MEMORY[0x263EF8340];
  values[0] = createQualityOfServiceTier_1((void *)*MEMORY[0x263F1E7E8]);
  values[1] = createQualityOfServiceTier_1((void *)*MEMORY[0x263F1E800]);
  values[2] = createQualityOfServiceTier_1((void *)*MEMORY[0x263F1E7F0]);
  values[3] = createQualityOfServiceTier_1((void *)*MEMORY[0x263F1E7F8]);
  myVideoDecoderSuggestedQualityOfServiceTiers_1 = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)values, 4, MEMORY[0x263EFFF70]);
  if (!myVideoDecoderSuggestedQualityOfServiceTiers_1)
  {
    FigSignalErrorAt3();
    if (!myVideoDecoderSuggestedQualityOfServiceTiers_1
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v3 = "myCreateSuggestedQualityOfServiceTiers";
      __int16 v4 = 2080;
      BOOL v5 = "myVideoDecoderSuggestedQualityOfServiceTiers";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", buf, 0x16u);
    }
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v1 = values[i];
    if (v1)
    {
      CFRelease(v1);
      values[i] = 0;
    }
  }
}

CFDictionaryRef createQualityOfServiceTier_1(void *a1)
{
  values[2] = *(void **)MEMORY[0x263EF8340];
  keys = (void *)*MEMORY[0x263F1E740];
  uint64_t valuePtr = 0x3FF0000000000000;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberDoubleType, &valuePtr);
  values[0] = a1;
  values[1] = v3;
  CFDictionaryRef v4 = CFDictionaryCreate(v2, (const void **)&keys, (const void **)values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v4)
  {
    FigSignalErrorAt3();
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v9 = "createQualityOfServiceTier";
      __int16 v10 = 2080;
      __int16 v11 = "tier";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", buf, 0x16u);
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

uint64_t AppleAVDWrapperLghrnDecoderStartSession(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  kdebug_trace();
  unsigned __int8 CFPreferenceNumber = VideoDecoder_getCFPreferenceNumber(@"AVD_CoreSelect", @"com.apple.coremedia", 32);
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    int v8 = *(_DWORD *)(DerivedStorage + 5512);
    if (v8)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AppleAVDWrapperLghrnDecoderStartSession";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v8;
        int v9 = &_os_log_internal;
        __int16 v10 = "AppleAVD: %s ERROR: pluginState isn't kPluginCreated, is %d";
        uint32_t v11 = 18;
LABEL_7:
        _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, v11);
        return 4294954387;
      }
      return 4294954387;
    }
    pthread_mutex_init((pthread_mutex_t *)(DerivedStorage + 3168), 0);
    OSStatus v61 = (pthread_mutex_t *)(v7 + 3168);
    pthread_mutex_lock((pthread_mutex_t *)(v7 + 3168));
    *(void *)uint64_t v7 = a2;
    FigFormatDescriptionRelease();
    uint64_t v13 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
    *(void *)(v7 + 8) = v13;
    unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(v13);
    int32_t v15 = Dimensions;
    *(_DWORD *)(v7 + 3144) = Dimensions;
    unint64_t v16 = HIDWORD(Dimensions);
    *(_DWORD *)(v7 + 3152) = Dimensions;
    *(_DWORD *)(v7 + 3232) = Dimensions;
    *(_DWORD *)(v7 + 3148) = HIDWORD(Dimensions);
    *(_DWORD *)(v7 + 3156) = HIDWORD(Dimensions);
    *(_DWORD *)(v7 + 3236) = HIDWORD(Dimensions);
    *(_DWORD *)(v7 + 3140) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *(_DWORD *)(v7 + 3336);
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperLghrnDecoderStartSession";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v17;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v15;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v16;
      *(_WORD *)&buf[30] = 2080;
      *(void *)&uint8_t buf[32] = "22:55:20";
      *(_WORD *)&buf[40] = 2080;
      *(void *)&buf[42] = "Nov 14 2024";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: Lghrn, encryptionScheme %d, %d x %d, built %s %s", buf, 0x32u);
    }
    *(_DWORD *)(v7 + 5560) = VideoDecoder_getCFPreferenceNumber(@"AVD_OnDemandDartMap", @"com.apple.coremedia", 1);
    *(_DWORD *)(v7 + 5608) = VideoDecoder_getCFPreferenceNumber(@"AVD_avdCoreControlPerfWeight", @"com.apple.coremedia", 90);
    if (MGGetBoolAnswer()) {
      *(_DWORD *)(v7 + 5520) = VideoDecoder_getCFPreferenceNumber(@"AVD_EnableFileDump", @"com.apple.coremedia", 0);
    }
    __int16 v18 = (unsigned int *)(v7 + 5564);
    *(_DWORD *)(v7 + 5564) = 0;
    if (VideoDecoder_getCFPreferenceNumber(@"AVD_InhibitADSForVP9", @"com.apple.coremedia", 0))*__int16 v18 = 2; {
    *__int16 v18 = *v18 & 0xFFFFFFFB | (4
    }
                              * (VideoDecoder_getCFPreferenceNumber(@"AVD_AllowADSOnUnsupported", @"com.apple.coremedia", 0) != 0));
    unsigned int v19 = *v18 & 0xFFFFFFF7 | (8
                             * (VideoDecoder_getCFPreferenceNumber(@"AVD_EnableHistogram", @"com.apple.coremedia", 1) != 0));
    *__int16 v18 = v19;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v19;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDWrapperLghrnDecoderStartSession: storage->miscPreferences %d ", buf, 8u);
    }
    int v20 = VideoDecoder_getCFPreferenceNumber(@"AVD_TryAllFrames", @"com.apple.coremedia", 0);
    *(_DWORD *)(v7 + 5552) = v20;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(_DWORD *)(v7 + 3336);
      *(_DWORD *)buf = 136316930;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperLghrnDecoderStartSession";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v21;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v15;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v16;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&uint8_t buf[32] = v20;
      *(_WORD *)&buf[36] = 2048;
      *(void *)&buf[38] = v7;
      *(_WORD *)&buf[46] = 2080;
      *(void *)&buf[48] = "22:55:20";
      *(_WORD *)&buf[56] = 2080;
      *(void *)&buf[58] = "Nov 14 2024";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: Lghrn, encryptionScheme %d, %d x %d, tryAllFrames = %d, session : %p, built %s %s", buf, 0x42u);
    }
    *(_DWORD *)(v7 + 5556) = VideoDecoder_getCFPreferenceNumber(@"AVD_MCacheMode", @"com.apple.coremedia", 0xFFFFFFFFLL);
    CFPropertyListRef Extension = CMFormatDescriptionGetExtension(a3, (CFStringRef)*MEMORY[0x263F00E90]);
    if (!Extension
      || (long long v23 = Extension, TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(v23))
      || (CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)v23, @"vpcC")) == 0
      || (ValueAtIndex = Value, CFTypeID v27 = CFArrayGetTypeID(), v27 == CFGetTypeID(ValueAtIndex))
      && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 0)) == 0
      || (CFTypeID v28 = CFDataGetTypeID(), v28 != CFGetTypeID(ValueAtIndex)))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: LGHDecoder ERROR: ConfigRecordData error - Cannot find config record", buf, 2u);
      }
      uint64_t inited = 4294958325;
      goto LABEL_33;
    }
    BytePtr = CFDataGetBytePtr((CFDataRef)ValueAtIndex);
    if (CFDataGetLength((CFDataRef)ValueAtIndex) < 12 || *BytePtr != 1)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v31 = &_os_log_internal;
        uint64_t v32 = "AppleAVD: undersized config record";
        uint32_t v33 = 2;
        goto LABEL_41;
      }
LABEL_42:
      uint64_t inited = 4294954386;
LABEL_33:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "CreateHeaderBuffer";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = inited;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
      }
      goto LABEL_35;
    }
    int v30 = BytePtr[4];
    if ((v30 & 0xFFFFFFFD) == 1)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v30;
        uint64_t v31 = &_os_log_internal;
        uint64_t v32 = "AppleAVD: unsupported profile %d";
        uint32_t v33 = 8;
LABEL_41:
        _os_log_impl(&dword_223977000, v31, OS_LOG_TYPE_DEFAULT, v32, buf, v33);
        goto LABEL_42;
      }
      goto LABEL_42;
    }
    char v35 = (BytePtr[6] >> 4) - 8;
    *(unsigned char *)(v7 + 3266) = v35;
    *(unsigned char *)(v7 + 3265) = v35;
    unsigned int v36 = (BytePtr[6] >> 1) & 7;
    if (v36 > 3) {
      goto LABEL_42;
    }
    *(unsigned char *)(v7 + 3264) = 0x3020101u >> (8 * v36);
    *(unsigned char *)(v7 + 3321) = BytePtr[6] & 1;
    int v37 = BytePtr[10];
    if ((BytePtr[10] || BytePtr[11]) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v38 = BytePtr[11];
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v37;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v38;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: codecIntializationDataSize not zero %x %x, but ignored", buf, 0xEu);
    }
    *(void *)&__filename[0] = 0;
    int v39 = AppleAVDOpenConnection(__filename, 3, 1, CFPreferenceNumber);
    if (v39)
    {
      int v40 = v39;
LABEL_50:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_LghrnVideoDecoder ERROR: createAppleAVDHW_LghrnDecoderInstance returned error", buf, 2u);
      }
      if (v40 == -536870210) {
        uint64_t inited = 4294954383;
      }
      else {
        uint64_t inited = 4294954385;
      }
      goto LABEL_35;
    }
    uint64_t v41 = *(void *)&__filename[0];
    *(void *)(v7 + 3120) = *(void *)&__filename[0];
    *(_DWORD *)(v7 + 5512) = 1;
    if (*(_DWORD *)(v7 + 5556) != -1)
    {
      *(_DWORD *)buf = *(_DWORD *)(v7 + 5556);
      if (AppleAVDSetParameter(v41, 41, buf)
        && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v69 = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_LghVideoDecoder ERROR: kAppleAVDMemCacheMode set failed", v69, 2u);
      }
      uint64_t v41 = *(void *)(v7 + 3120);
    }
    *(_DWORD *)int v68 = *(_DWORD *)(v7 + 5552);
    if (AppleAVDSetParameter(v41, 50, (unsigned __int8 *)v68)
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: CreateAVDLghrnInstance ERROR: kAppleAVDSetTryEveryFrame set failed", buf, 2u);
    }
    *(_DWORD *)__s = *(_DWORD *)(v7 + 3336);
    int v42 = AppleAVDSetParameter(*(void *)(v7 + 3120), 25, (unsigned __int8 *)__s);
    if (v42)
    {
      int v40 = v42;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v43 = *(_DWORD *)(v7 + 3140);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v43;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v40;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_LgrnVideoDecoder: frame# %d, Could not set kAppleAVDSetCryptScheme, err %d\n", buf, 0xEu);
      }
      goto LABEL_50;
    }
    *(void *)int v69 = DisplayCallBack_2;
    int v40 = AppleAVDSetParameter(*(uint64_t *)&__filename[0], 1, v69);
    if (v40) {
      goto LABEL_50;
    }
    int v40 = AppleAVDSetParameter(*(uint64_t *)&__filename[0], 2, (unsigned __int8 *)v7);
    if (v40) {
      goto LABEL_50;
    }
    if (AppleAVDSetParameter(*(void *)(v7 + 3120), 52, (unsigned __int8 *)(v7 + 5560))
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "CreateAVDLghrnInstance";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetOnDemandDVAMap failed", buf, 0xCu);
    }
    if (AppleAVDSetParameter(*(void *)(v7 + 3120), 53, (unsigned __int8 *)(v7 + 5608))
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "CreateAVDLghrnInstance";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetAVDCoreControlPerfWeight failed", buf, 0xCu);
    }
    if (AppleAVDSetParameter(*(void *)(v7 + 3120), 56, (unsigned __int8 *)(v7 + 5564))
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "CreateAVDLghrnInstance";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetMiscPreferences failed", buf, 0xCu);
    }
    *(_DWORD *)int v76 = 256;
    AppleAVDSetParameter(*(uint64_t *)&__filename[0], 14, (unsigned __int8 *)v76);
    memset(&buf[8], 0, 56);
    *(_DWORD *)buf = 3;
    *(void *)&uint8_t buf[4] = *(void *)(v7 + 3144);
    *(void *)&uint8_t buf[16] = 0;
    *(void *)&buf[24] = 0;
    int v44 = *(unsigned __int8 *)(v7 + 3264);
    *(_DWORD *)&buf[40] = *(unsigned __int8 *)(v7 + 3265);
    *(_DWORD *)&buf[44] = v44;
    int v40 = AppleAVDInitializeDecoder(*(void *)(v7 + 3120), (unsigned int *)buf);
    if (v40) {
      goto LABEL_50;
    }
    int v40 = AppleAVDGetParameter(*(uint64_t *)&__filename[0], 9, v7 + 3160);
    if (v40) {
      goto LABEL_50;
    }
    if (*(_DWORD *)(v7 + 3232) < 0x40u || *(_DWORD *)(v7 + 3236) <= 0x3Fu)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v73 = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_LghrnVideoDecoder ERROR: Unsupported picture size!", v73, 2u);
      }
      int v40 = 305;
      goto LABEL_50;
    }
    if (*(_DWORD *)(v7 + 5520))
    {
      time_t v64 = 0;
      setlocale(0, (const char *)&unk_223AED972);
      time(&v64);
      uint64_t v45 = localtime(&v64);
      strftime(__s, 0x14uLL, "%m%d%g_%H%M%S", v45);
      v63.tv_sec = 0;
      *(void *)&v63.tv_usec = 0;
      uint64_t v62 = 0;
      gettimeofday(&v63, &v62);
      snprintf(__str, 5uLL, "_%03d", v63.tv_usec / 1000);
      strlen(__str);
      __strncat_chk();
      strcpy(v76, "-decOutput.ivf");
      qmemcpy(v60, "/var/mobile/Library/Caches/com.apple.videocodecd/com.apple.apple", sizeof(v60));
      strcpy((char *)buf, "/var/mobile/Library/Caches/com.apple.videocodecd/com.apple.appleavd/");
      strlen(__s);
      __strncat_chk();
      strlen(v76);
      __strncat_chk();
      strcpy((char *)v73, "-decEncrOut.ivf");
      __filename[1] = v60[1];
      __filename[2] = v60[2];
      v75[0] = v60[3];
      strcpy((char *)v75 + 13, "pleavd/");
      __filename[0] = v60[0];
      strlen(__s);
      __strncat_chk();
      strlen((const char *)v73);
      __strncat_chk();
      strcpy(v68, "-decPropertyLog.txt");
      v72[0] = v60[3];
      strcpy((char *)v72 + 13, "pleavd/");
      long long v70 = v60[1];
      long long v71 = v60[2];
      *(_OWORD *)int v69 = v60[0];
      strlen(__s);
      __strncat_chk();
      strlen(v68);
      __strncat_chk();
      int v46 = fopen((const char *)buf, "wbx");
      *(void *)(v7 + 5528) = v46;
      if (!v46)
      {
        *(void *)(v7 + 5528) = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)char v66 = 136315138;
          char v67 = buf;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD Lghrn dump: could not open file %s\n", v66, 0xCu);
        }
      }
      char v47 = fopen((const char *)__filename, "wbx");
      *(void *)(v7 + 5536) = v47;
      if (!v47)
      {
        *(void *)(v7 + 5536) = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)char v66 = 136315138;
          char v67 = (uint8_t *)__filename;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD Lghrn dump: could not open file %s\n", v66, 0xCu);
        }
      }
      unsigned int v48 = fopen((const char *)v69, "wbx");
      *(void *)(v7 + 5544) = v48;
      if (!v48)
      {
        *(void *)(v7 + 5544) = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)char v66 = 136315138;
          char v67 = v69;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AVD Lghrn dump: could not open property log file %s\n", v66, 0xCu);
        }
      }
      uint64_t v49 = *(FILE **)(v7 + 5536);
      if (v49) {
        WriteIVFHeader_0(v49, v15, v16);
      }
      uint64_t v50 = *(FILE **)(v7 + 5528);
      if (v50) {
        WriteIVFHeader_0(v50, v15, v16);
      }
    }
    else
    {
      *(_OWORD *)(v7 + 5528) = 0u;
      *(void *)(v7 + 5544) = 0;
    }
    int v51 = *(unsigned __int8 *)(v7 + 3265);
    if ((v51 | 2) == 2 && v51 == *(unsigned __int8 *)(v7 + 3266))
    {
      *(unsigned char *)(v7 + 3137) = 1;
      *(_DWORD *)(v7 + 3140) = 1;
      if ((isEligibleToUseCompression(*(_DWORD *)(v7 + 3160), *(_DWORD *)(v7 + 3144), *(_DWORD *)(v7 + 3148), *(_DWORD *)(v7 + 3152), *(_DWORD *)(v7 + 3156)) & 1) == 0)
      {
        *(_DWORD *)(v7 + 5516) = 0;
        goto LABEL_116;
      }
      uint64_t inited = InitPixelBufferCompressionSupported(*(void *)v7, *(void *)(v7 + 3120), *(_DWORD *)(v7 + 3160), *(_DWORD *)(v7 + 3144), *(_DWORD *)(v7 + 3148), *(_DWORD *)(v7 + 3152), *(_DWORD *)(v7 + 3156), *(unsigned __int8 *)(v7 + 3265), *(unsigned __int8 *)(v7 + 3264), *(unsigned __int8 *)(v7 + 3321), *(void *)(v7 + 5488), 8, 0, 0, 0, (CFTypeRef *)(v7 + 24), (CFTypeRef *)(v7 + 40), 0, 0,
                 0);
      if (!inited)
      {
        uint64_t inited = GetIOSurfaceTypeFromPool(*(CVPixelBufferPoolRef *)(v7 + 24), (_DWORD *)(v7 + 5516));
        if (!inited)
        {
          uint64_t inited = GetNoSecondWriteFlag(*(__CVPixelBufferPool **)(v7 + 24), (BOOL *)(v7 + 5620));
          if (!inited)
          {
            int v52 = *(_DWORD *)(v7 + 5516);
            if (v52)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                int v53 = *(unsigned __int8 *)(v7 + 3265) + 8;
                int v54 = *(unsigned __int8 *)(v7 + 3264);
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "AppleAVDWrapperLghrnDecoderStartSession";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&unsigned char buf[14] = v52;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v53;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v54;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: Compressed buffers enabled! CompressionType:%d. luma depth %d chroma format %d", buf, 0x1Eu);
              }
              if (*(_DWORD *)(v7 + 3160) == 20 && *(unsigned char *)(v7 + 3265) == 2)
              {
                int v55 = *(unsigned __int8 *)(v7 + 3264);
                if (*(unsigned char *)(v7 + 3264))
                {
                  unsigned int v56 = *(_DWORD *)(v7 + 3152);
                  unsigned int v57 = *(_DWORD *)(v7 + 3156);
                  if (v55 == 2)
                  {
                    v56 >>= 1;
                  }
                  else if (v55 == 1)
                  {
                    v56 >>= 1;
                    v57 >>= 1;
                  }
                  if (((((v57 + 15) >> 4) * ((v56 + 15) >> 4)) & 1) != 0
                    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: LGH chroma plane with odd number of IMBs is unspported on Salvia A0", buf, 2u);
                  }
                }
              }
              goto LABEL_120;
            }
LABEL_116:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v58 = *(unsigned __int8 *)(v7 + 3265) + 8;
              int v59 = *(unsigned __int8 *)(v7 + 3264);
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "AppleAVDWrapperLghrnDecoderStartSession";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v58;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v59;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: Compressed buffers disabled! luma depth %d chroma format %d", buf, 0x18u);
            }
            uint64_t inited = InitPixelBufferCompressionNotSupported_2(v7);
            if (inited) {
              goto LABEL_35;
            }
            uint64_t inited = GetNoSecondWriteFlagDisp(a2, (BOOL *)(v7 + 5620));
            if (inited) {
              goto LABEL_35;
            }
LABEL_120:
            uint64_t inited = 0;
            *(_DWORD *)(v7 + 5512) = 2;
LABEL_37:
            pthread_mutex_unlock(v61);
            kdebug_trace();
            return inited;
          }
        }
      }
    }
    else
    {
      uint64_t inited = 4294954385;
    }
LABEL_35:
    FigFormatDescriptionRelease();
    *(void *)(v7 + 8) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperLghrnDecoderStartSession";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = inited;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
    }
    goto LABEL_37;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "AppleAVDWrapperLghrnDecoderStartSession";
    int v9 = &_os_log_internal;
    __int16 v10 = "AppleAVD: ERROR: %s no instance storage!";
    uint32_t v11 = 12;
    goto LABEL_7;
  }
  return 4294954387;
}

uint64_t AppleAVDWrapperLghrnDecoderDecodeFrame(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, char a4, int *a5)
{
  uint64_t v173 = *MEMORY[0x263EF8340];
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.value) = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDWrapperLghrnDecoderDecodeFrame - ERROR! storage is NULL\n", (uint8_t *)&buf, 2u);
    }
    return 311;
  }
  uint64_t v10 = DerivedStorage;
  kdebug_trace();
  kdebug_trace();
  uint32_t v11 = (pthread_mutex_t *)(v10 + 3168);
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 3168));
  CMTimeFlags v12 = *(_DWORD *)(v10 + 5512);
  if (v12 != 2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.value) = 136315394;
      *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"AppleAVDWrapperLghrnDecoderDecodeFrame";
      LOWORD(buf.flags) = 1024;
      *(CMTimeFlags *)((char *)&buf.flags + 2) = v12;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s called on plugin in state %d", (uint8_t *)&buf, 0x12u);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 3168));
    return 311;
  }
  char v142 = (_OWORD *)(v10 + 3388);
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a3, 0);
  int v141 = a5;
  if (!SampleAttachmentsArray
    || (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) == 0)
  {
    *(unsigned char *)(v10 + 5500) = 0;
    goto LABEL_17;
  }
  CFDictionaryRef v15 = ValueAtIndex;
  CFDictionaryRef Value = CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x263F01008]);
  int v17 = CFDictionaryGetValue(v15, (const void *)*MEMORY[0x263F01018]);
  __int16 v18 = CFDictionaryGetValue(v15, (const void *)*MEMORY[0x263F01020]);
  int v19 = *(_DWORD *)(v10 + 5496);
  int v20 = (const void **)MEMORY[0x263EFFB40];
  if (v19 == 3)
  {
    if (v17)
    {
      int v21 = (CFTypeRef *)MEMORY[0x263EFFB38];
      long long v22 = v17;
      goto LABEL_38;
    }
LABEL_41:
    BOOL v40 = 1;
    goto LABEL_42;
  }
  if (v19 == 2)
  {
    if (v17 && !CFEqual(v17, (CFTypeRef)*MEMORY[0x263EFFB38]))
    {
      if (!v18)
      {
        BOOL v40 = 0;
        goto LABEL_42;
      }
      int v21 = (CFTypeRef *)MEMORY[0x263EFFB40];
      long long v22 = v18;
      goto LABEL_38;
    }
    goto LABEL_41;
  }
  if (v19 != 1 || !Value) {
    goto LABEL_41;
  }
  int v21 = (CFTypeRef *)MEMORY[0x263EFFB40];
  long long v22 = Value;
LABEL_38:
  BOOL v40 = CFEqual(v22, *v21) != 0;
LABEL_42:
  uint64_t v41 = *v20;
  BOOL v43 = (v17 != *v20 || v18 == v41) && v40;
  if (*(unsigned char *)(v10 + 5500)) {
    BOOL v40 = v43;
  }
  if (v17 != v41 || v18 == v41)
  {
    uint64_t v45 = v141;
    *(unsigned char *)(v10 + 5500) = 0;
  }
  else
  {
    char v44 = Value == (const void *)*MEMORY[0x263EFFB38] || v40;
    uint64_t v45 = v141;
    if ((v44 & 1) == 0)
    {
      *(unsigned char *)(v10 + 5500) = 1;
      goto LABEL_59;
    }
  }
  if (!v40)
  {
LABEL_59:
    kdebug_trace();
    VTDecoderSessionEmitDecodedFrame();
    if (v45) {
      *uint64_t v45 = 2;
    }
    goto LABEL_84;
  }
LABEL_17:
  DataBuffer = CMSampleBufferGetDataBuffer(a3);
  long long v25 = DataBuffer;
  if (!DataBuffer || (size_t v26 = CMBlockBufferGetDataLength(DataBuffer)) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.value) = 134218240;
      *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)v25;
      LOWORD(buf.flags) = 2048;
      *(void *)((char *)&buf.flags + 2) = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR:  either dataBuffer=%p is invalid or dataLength=%zu is invalid!", (uint8_t *)&buf, 0x16u);
    }
    kdebug_trace();
    CMTimeScale inited = -12909;
LABEL_27:
    VTDecoderSessionEmitDecodedFrame();
    int v34 = v141;
    if (!v141) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  unint64_t v27 = v26;
  if (*(_DWORD *)(v10 + 3336) == 6)
  {
LABEL_20:
    BytePtr = 0;
    unint64_t v139 = 0;
    goto LABEL_21;
  }
  uint64_t Decryptor = FigSampleBufferGetDecryptor();
  unsigned int v36 = (const void *)Decryptor;
  if (*(_DWORD *)(v10 + 3140) == 1 && !Decryptor)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_83:
      kdebug_trace();
      VTDecoderSessionEmitDecodedFrame();
      goto LABEL_84;
    }
    buf.value = 0x104000200;
    LOWORD(buf.timescale) = 2048;
    *(void *)((char *)&buf.timescale + 2) = v10;
    int v37 = &_os_log_internal;
    int v38 = "AppleAVD: AppleAVD_LghrnVideoDecoder: frame# %d, session: %p, decryptor attachment is NULL \n";
    uint32_t v39 = 18;
LABEL_35:
    _os_log_impl(&dword_223977000, v37, OS_LOG_TYPE_DEFAULT, v38, (uint8_t *)&buf, v39);
    goto LABEL_83;
  }
  if (Decryptor && Decryptor != *(void *)(v10 + 3128))
  {
    LODWORD(rhs.value) = *(_DWORD *)(v10 + 3336);
    lhs.value = 0;
    CMTimeScale NativeSession = FigCPECryptorGetNativeSession(Decryptor, (uint64_t)&lhs);
    if (NativeSession)
    {
      CMTimeScale inited = NativeSession;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v48 = *(_DWORD *)(v10 + 3140);
        LODWORD(buf.value) = 67109376;
        HIDWORD(buf.value) = v48;
        LOWORD(buf.timescale) = 1024;
        *(CMTimeScale *)((char *)&buf.timescale + 2) = inited;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_LghVideoDecoder: frame# %d, FigCPECryptorGetNativeSession returned err %d \n", (uint8_t *)&buf, 0xEu);
      }
      kdebug_trace();
      goto LABEL_211;
    }
    CMTimeScale v62 = AppleAVDSetParameter(*(void *)(v10 + 3120), 25, (unsigned __int8 *)&rhs);
    if (v62)
    {
      CMTimeScale inited = v62;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v63 = *(_DWORD *)(v10 + 3140);
        LODWORD(buf.value) = 67109376;
        HIDWORD(buf.value) = v63;
        LOWORD(buf.timescale) = 1024;
        *(CMTimeScale *)((char *)&buf.timescale + 2) = inited;
        time_t v64 = &_os_log_internal;
        uint64_t v65 = "AppleAVD: AppleAVD_LghVideoDecoder: frame# %d, Could not set kAppleAVDSetCryptScheme, err %d\n";
LABEL_209:
        _os_log_impl(&dword_223977000, v64, OS_LOG_TYPE_DEFAULT, v65, (uint8_t *)&buf, 0xEu);
        goto LABEL_210;
      }
      goto LABEL_210;
    }
    CMTimeScale v96 = AppleAVDSetParameter(*(void *)(v10 + 3120), 26, (unsigned __int8 *)lhs.value);
    if (v96)
    {
      CMTimeScale inited = v96;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v97 = *(_DWORD *)(v10 + 3140);
        LODWORD(buf.value) = 67109376;
        HIDWORD(buf.value) = v97;
        LOWORD(buf.timescale) = 1024;
        *(CMTimeScale *)((char *)&buf.timescale + 2) = inited;
        time_t v64 = &_os_log_internal;
        uint64_t v65 = "AppleAVD: AppleAVD_LghVideoDecoder: frame# %d, Could not set kAppleAVDSetCryptRef, err %d\n";
        goto LABEL_209;
      }
LABEL_210:
      kdebug_trace();
LABEL_211:
      VTDecoderSessionEmitDecodedFrame();
      goto LABEL_29;
    }
    uint64_t v140 = *(void *)(v10 + 5488);
    int v154 = 0;
    CMTimeScale ExternalProtectionMethods = FigCPECryptorGetExternalProtectionMethods((uint64_t)v36, (uint64_t)&v154);
    if (ExternalProtectionMethods)
    {
      CMTimeScale inited = ExternalProtectionMethods;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v114 = *(_DWORD *)(v10 + 3140);
        LODWORD(buf.value) = 67109376;
        HIDWORD(buf.value) = v114;
        LOWORD(buf.timescale) = 1024;
        *(CMTimeScale *)((char *)&buf.timescale + 2) = inited;
        time_t v64 = &_os_log_internal;
        uint64_t v65 = "AppleAVD: AppleAVD_LghVideoDecoder: frame# %d, FigCPECryptorGetExternalProtectionMethods, err %d\n";
        goto LABEL_209;
      }
      goto LABEL_210;
    }
    uint64_t v116 = 3;
    if ((v154 & 1) == 0) {
      uint64_t v116 = 1;
    }
    unint64_t v117 = 7;
    if ((v154 & 2) == 0) {
      unint64_t v117 = v116;
    }
    if (*(void *)(v10 + 5488) == v117) {
      goto LABEL_226;
    }
    *(void *)(v10 + 5488) = v117;
    if (*(_DWORD *)(v10 + 5516))
    {
      CMTimeScale inited = InitPixelBufferCompressionSupported(*(void *)v10, *(void *)(v10 + 3120), *(_DWORD *)(v10 + 3160), *(_DWORD *)(v10 + 3144), *(_DWORD *)(v10 + 3148), *(_DWORD *)(v10 + 3152), *(_DWORD *)(v10 + 3156), *(unsigned __int8 *)(v10 + 3265), *(unsigned __int8 *)(v10 + 3264), *(unsigned __int8 *)(v10 + 3321), v117, 8, 0, 0, 0, (CFTypeRef *)(v10 + 24), (CFTypeRef *)(v10 + 40), 0, 0,
                 0);
      if (!inited)
      {
        CMTimeScale v130 = GetNoSecondWriteFlag(*(__CVPixelBufferPool **)(v10 + 24), (BOOL *)(v10 + 5620));
        goto LABEL_273;
      }
    }
    else
    {
      CMTimeScale inited = InitPixelBufferCompressionNotSupported_2(v10);
      if (!inited)
      {
        CMTimeScale v130 = GetNoSecondWriteFlagDisp(*(void *)v10, (BOOL *)(v10 + 5620));
LABEL_273:
        CMTimeScale inited = v130;
        if (!v130)
        {
LABEL_226:
          uint64_t v118 = *(const void **)(v10 + 3128);
          if (v36 != v118)
          {
            if (v118) {
              CFRelease(v118);
            }
            *(void *)(v10 + 3128) = v36;
            CFRetain(v36);
          }
          goto LABEL_230;
        }
      }
    }
    *(void *)(v10 + 5488) = v140;
    kdebug_trace();
    goto LABEL_27;
  }
LABEL_230:
  if (*(_DWORD *)(v10 + 3336) != 4) {
    goto LABEL_20;
  }
  CFArrayRef v119 = CMSampleBufferGetSampleAttachmentsArray(a3, 0);
  if (!v119) {
    goto LABEL_20;
  }
  CFDictionaryRef v120 = (const __CFDictionary *)CFArrayGetValueAtIndex(v119, 0);
  if (!v120) {
    goto LABEL_20;
  }
  CFDataRef v121 = (const __CFData *)CFDictionaryGetValue(v120, (const void *)*MEMORY[0x263F00FC8]);
  if (!v121)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_83;
    }
    LODWORD(buf.value) = 136315138;
    *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"AppleAVDWrapperLghrnDecoderDecodeFrame";
    int v37 = &_os_log_internal;
    int v38 = "AppleAVD: %s() ERROR: CryptorSubsampleAuxiliaryData is NULL";
    uint32_t v39 = 12;
    goto LABEL_35;
  }
  CFDataRef v122 = v121;
  BytePtr = CFDataGetBytePtr(v121);
  unint64_t Length = CFDataGetLength(v122);
  if (Length >= 0x808)
  {
    unint64_t v124 = Length >> 3;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_83;
    }
    LODWORD(buf.value) = 136315394;
    *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"AppleAVDWrapperLghrnDecoderDecodeFrame";
    LOWORD(buf.flags) = 2048;
    *(void *)((char *)&buf.flags + 2) = v124;
    int v37 = &_os_log_internal;
    int v38 = "AppleAVD: %s() ERROR: crauxNumEntries %ld out of range";
    uint32_t v39 = 22;
    goto LABEL_35;
  }
  unint64_t v139 = Length >> 3;
LABEL_21:
  CMTime v153 = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
  CMTime v152 = v153;
  CMSampleBufferGetOutputDuration(&buf, a3);
  long long v28 = *(_OWORD *)&buf.value;
  *(void *)(v10 + 3404) = buf.epoch;
  *char v142 = v28;
  if ((*(_DWORD *)(v10 + 3400) & 0x1D) == 1)
  {
    if ((*(_DWORD *)(v10 + 3352) & 0x1D) == 1)
    {
      uint64_t v29 = v10 + 3340;
      CMSampleBufferGetDecodeTimeStamp(&v153, a3);
      CMTime lhs = v153;
      CMTime rhs = *(CMTime *)(v10 + 3340);
      CMTimeSubtract(&buf, &lhs, &rhs);
      long long v30 = *(_OWORD *)&buf.value;
      uint64_t v31 = (uint64_t *)(v10 + 3388);
      *(void *)(v10 + 3404) = buf.epoch;
      *char v142 = v30;
      *(_OWORD *)(v10 + 3340) = *(_OWORD *)&v153.value;
      CMTimeEpoch epoch = v153.epoch;
    }
    else
    {
      CMSampleBufferGetPresentationTimeStamp(&v152, a3);
      uint64_t v29 = v10 + 3364;
      CMTime lhs = v152;
      CMTime rhs = *(CMTime *)(v10 + 3364);
      CMTimeSubtract(&buf, &lhs, &rhs);
      long long v49 = *(_OWORD *)&buf.value;
      uint64_t v31 = (uint64_t *)(v10 + 3388);
      *(void *)(v10 + 3404) = buf.epoch;
      *char v142 = v49;
      *(_OWORD *)(v10 + 3364) = *(_OWORD *)&v152.value;
      CMTimeEpoch epoch = v152.epoch;
    }
    *(void *)(v29 + 16) = epoch;
    if (*v31 < 1) {
      double v46 = 0.0;
    }
    else {
      double v46 = (double)*(int *)(v10 + 3396) / (double)*v31;
    }
    *(double *)(v10 + 3416) = v46;
    uint32_t v11 = (pthread_mutex_t *)(v10 + 3168);
  }
  else
  {
    double v46 = *(double *)(v10 + 3416);
  }
  if (((int)(v46 + 0.5) - 1025) >= 0xFFFFFC00) {
    int v50 = (int)(v46 + 0.5);
  }
  else {
    int v50 = 30;
  }
  uint64_t v51 = *(unsigned int *)(v10 + 3424);
  int v52 = v11;
  if (v50 != v51) {
    int v50 = filterSmallDeltaFPS(v51, v50);
  }
  *(_DWORD *)(v10 + 3424) = v50;
  memset(v148, 0, sizeof(v148));
  int v149 = 0;
  int v53 = *(_DWORD *)(v10 + 3336);
  LOBYTE(lhs.value) = 0;
  LOBYTE(rhs.value) = 0;
  if (CMBlockBufferCopyDataBytes(v25, v27 - 1, 1uLL, &lhs))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_82:
      uint32_t v11 = v52;
      goto LABEL_83;
    }
    LODWORD(buf.value) = 136315138;
    *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"getLghrnDecoderSuperFrameOffsetInfo";
    int v54 = &_os_log_internal;
LABEL_81:
    _os_log_impl(&dword_223977000, v54, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: ERROR, fail to copy data bytes", (uint8_t *)&buf, 0xCu);
    goto LABEL_82;
  }
  int __ptr = (void *)(v10 + 5572);
  if (!is_lgh_super_frame_mask(lhs.value))
  {
    unsigned int __nitems = 0;
LABEL_94:
    uint32_t v11 = v52;
LABEL_95:
    BOOL v57 = 0;
    goto LABEL_96;
  }
  unsigned int lgh_super_frame_index_size = get_lgh_super_frame_index_size(LOBYTE(lhs.value));
  unsigned int __nitems = lgh_super_frame_index_size;
  if (v27 <= lgh_super_frame_index_size)
  {
    if (v53 == 6)
    {
      uint32_t v11 = v52;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.value) = 136315650;
        *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"getLghrnDecoderSuperFrameOffsetInfo";
        LOWORD(buf.flags) = 2048;
        *(void *)((char *)&buf.flags + 2) = v27;
        HIWORD(buf.epoch) = 1024;
        int v172 = __nitems;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: buffer size %zu expect bigger than %d (two super frame header bytes plus total frame size bytes)\n", (uint8_t *)&buf, 0x1Cu);
      }
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  dataunint64_t Length = lgh_super_frame_index_size;
  size_t v56 = v27 - lgh_super_frame_index_size;
  if (CMBlockBufferCopyDataBytes(v25, v56, 1uLL, &rhs))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_82;
    }
    LODWORD(buf.value) = 136315138;
    *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"getLghrnDecoderSuperFrameOffsetInfo";
    int v54 = &_os_log_internal;
    goto LABEL_81;
  }
  unint64_t v137 = v27;
  uint64_t v92 = a2;
  CMTimeFlags value_low = LOBYTE(lhs.value);
  if (LOBYTE(lhs.value) != LOBYTE(rhs.value))
  {
    if (v53 == 6)
    {
      int v107 = LOBYTE(rhs.value);
      uint32_t v11 = v52;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.value) = 136315650;
        *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"getLghrnDecoderSuperFrameOffsetInfo";
        LOWORD(buf.flags) = 1024;
        *(CMTimeFlags *)((char *)&buf.flags + 2) = value_low;
        WORD1(buf.epoch) = 1024;
        HIDWORD(buf.epoch) = v107;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: inconsistent super frame header %x %x\n", (uint8_t *)&buf, 0x18u);
      }
    }
    else
    {
      uint32_t v11 = v52;
    }
    a2 = v92;
    unint64_t v27 = v137;
    goto LABEL_95;
  }
  if (CMBlockBufferCopyDataBytes(v25, v56, dataLength, __ptr))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_82;
    }
    LODWORD(buf.value) = 136315138;
    *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"getLghrnDecoderSuperFrameOffsetInfo";
    int v54 = &_os_log_internal;
    goto LABEL_81;
  }
  BOOL v57 = is_lgh_super_frame_offset((uint64_t)__ptr, v137, v148, LOBYTE(lhs.value), v53 != 6);
  uint32_t v11 = v52;
  a2 = v92;
  unint64_t v27 = v137;
  if (v57 < 0) {
    goto LABEL_83;
  }
LABEL_96:
  bzero(&v155, 0x888uLL);
  if (!*(_DWORD *)(v10 + 5508))
  {
    if (*(_DWORD *)(v10 + 5504))
    {
      int v58 = 2;
LABEL_102:
      int v158 = v58;
      goto LABEL_103;
    }
LABEL_101:
    int v58 = 1;
    goto LABEL_102;
  }
  if ((a4 & 4) == 0) {
    goto LABEL_101;
  }
LABEL_103:
  int v163 = v50;
  int v161 = 0;
  CMTimeScale v160 = 0;
  char v165 = 0;
  int v164 = 0;
  uint64_t v166 = 0;
  int v162 = 0;
  uint64_t v167 = *(void *)v10;
  uint64_t v168 = a2;
  int v169 = 0;
  char v170 = *(unsigned char *)(v10 + 5620);
  if (a4)
  {
    char v159 = 0;
    if (v141)
    {
      char v59 = 0;
      int v61 = *v141 | 1;
      *int v141 = v61;
      uint64_t v60 = *(unsigned __int8 *)(v10 + 3140);
      *(void *)(v10 + 8 * v60 + 48) = a2;
    }
    else
    {
      int v61 = 0;
      uint64_t v60 = *(unsigned __int8 *)(v10 + 3140);
      *(void *)(v10 + 8 * v60 + 48) = a2;
      char v59 = 1;
    }
  }
  else
  {
    char v59 = 1;
    char v159 = 1;
    uint64_t v60 = *(unsigned __int8 *)(v10 + 3140);
    *(void *)(v10 + 8 * v60 + 48) = a2;
    int v61 = (int)v141;
    if (v141)
    {
      char v59 = 0;
      int v61 = *v141;
    }
  }
  *(_DWORD *)(v10 + 4 * v60 + 2096) = v61;
  uint64_t v146 = 0;
  unint64_t v147 = 0;
  unsigned int destination = 0;
  unint64_t v145 = 0;
  if (!v57)
  {
    unint64_t v145 = v27;
    LODWORD(v146) = *(_DWORD *)(v10 + 3140);
    if (AppleAVDGetParameter(*(void *)(v10 + 3120), 8, (uint64_t)&destination))
    {
      kdebug_trace();
      CMTimeScale inited = -12911;
      VTDecoderSessionEmitDecodedFrame();
      int v34 = v141;
      if (v59)
      {
LABEL_29:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.value) = 136315394;
          *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"AppleAVDWrapperLghrnDecoderDecodeFrame";
          LOWORD(buf.flags) = 1024;
          *(CMTimeFlags *)((char *)&buf.flags + 2) = inited;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", (uint8_t *)&buf, 0x12u);
        }
        goto LABEL_84;
      }
LABEL_28:
      int *v34 = 2;
      goto LABEL_29;
    }
    CFArrayRef v94 = (unsigned __int8 *)destination;
    if (CMBlockBufferCopyDataBytes(v25, 0, v27, destination))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.value) = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING, fail to copy data bytes, nothing to decode", (uint8_t *)&buf, 2u);
      }
      kdebug_trace();
      VTDecoderSessionEmitDecodedFrame();
      AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 3120), v27, v94);
      if ((v59 & 1) == 0) {
        *int v141 = 2;
      }
      goto LABEL_203;
    }
    int v155 = v94;
    unint64_t v156 = v145;
    int v157 = *(_DWORD *)(v10 + 3140);
    uint64_t v98 = v27;
    lhs.value = v27;
    AppleAVDSetParameter(*(void *)(v10 + 3120), 39, (unsigned __int8 *)&lhs);
    uint64_t v99 = 0;
    *(void *)(v10 + 5480) = 0;
    int v100 = *(_DWORD *)(v10 + 3336);
    if (v139)
    {
      int v101 = v141;
      if (v100 == 4 && BytePtr)
      {
        *(void *)(v10 + 5480) = v139;
        int v102 = *(_DWORD *)BytePtr;
        *(_DWORD *)(v10 + 3428) = *(_DWORD *)BytePtr;
        *(_DWORD *)(v10 + 4452) = *((_DWORD *)BytePtr + 1);
        if (v139 < 2)
        {
          uint64_t v99 = 1;
        }
        else
        {
          int v103 = BytePtr + 8;
          uint64_t v104 = 1;
          uint64_t v105 = 3432;
          do
          {
            v102 += *v103 + *(v103 - 1);
            uint64_t v106 = (_DWORD *)(v10 + v105);
            *uint64_t v106 = v102;
            v106[256] = v103[1];
            ++v104;
            v105 += 4;
            v103 += 2;
          }
          while (v139 != v104);
          if (v139 > 0x100)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.value) = 134218240;
              *(CMTimeValue *)((char *)&buf.value + 4) = v139;
              LOWORD(buf.flags) = 1024;
              *(CMTimeFlags *)((char *)&buf.flags + 2) = 256;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_LghVideoDecoder ERROR: BAD encryptedSliceCount %ld MAX_SLICES %d", (uint8_t *)&buf, 0x12u);
            }
            kdebug_trace();
            VTDecoderSessionEmitDecodedFrame();
            AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 3120), v98, v94);
            if ((v59 & 1) == 0) {
              *int v141 = 2;
            }
            goto LABEL_265;
          }
          uint64_t v99 = v139;
        }
      }
    }
    else
    {
      int v101 = v141;
    }
    int v125 = *(FILE **)(v10 + 5536);
    if (v125)
    {
      WriteFrame(v125, v94, v98, v98, *(_DWORD *)(v10 + 3140));
      uint64_t v99 = *(void *)(v10 + 5480);
      int v100 = *(_DWORD *)(v10 + 3336);
    }
    if (v100 == 4)
    {
      if (v99 >= 257)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.value) = 136315650;
          *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"AppleAVDWrapperLghrnDecoderDecodeFrame";
          LOWORD(buf.flags) = 2048;
          *(void *)((char *)&buf.flags + 2) = v99;
          HIWORD(buf.epoch) = 1024;
          int v172 = 256;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): encryptedSliceCount (%ld) exceeds MAX_SLICES (%d)\n", (uint8_t *)&buf, 0x1Cu);
        }
        kdebug_trace();
        VTDecoderSessionEmitDecodedFrame();
        AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 3120), v98, v94);
        if ((v59 & 1) == 0) {
          *int v101 = 2;
        }
        goto LABEL_265;
      }
      if (HIDWORD(v99) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.value) = 136315394;
        *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"AppleAVDWrapperLghrnDecoderDecodeFrame";
        LOWORD(buf.flags) = 1024;
        *(CMTimeFlags *)((char *)&buf.flags + 2) = 2502;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&buf, 0x12u);
        uint64_t v99 = *(void *)(v10 + 5480);
      }
      int v162 = v99;
      __memcpy_chk();
      __memcpy_chk();
      int v101 = v141;
    }
    else
    {
      int v162 = 0;
    }
    if (!AppleAVDDecodeFrame(*(void *)(v10 + 3120), (uint64_t)&v155))
    {
      int v128 = *(FILE **)(v10 + 5528);
      if (v128) {
        WriteFrame(v128, v94, v98, v98, *(_DWORD *)(v10 + 3140));
      }
      CMTimeScale inited = 0;
      ++*(_DWORD *)(v10 + 3140);
      goto LABEL_266;
    }
    kdebug_trace();
    VTDecoderSessionEmitDecodedFrame();
    AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 3120), v98, v94);
    if ((v59 & 1) == 0) {
      *int v101 = 2;
    }
    CMTimeScale inited = v160;
    BOOL v126 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    if (inited)
    {
      if (v126) {
        goto LABEL_259;
      }
      goto LABEL_266;
    }
    if (v126)
    {
      int v129 = *(_DWORD *)(v10 + 3140);
      LODWORD(buf.value) = 67109120;
      HIDWORD(buf.value) = v129;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_LghVideoDecoder_DecodeFrame ERROR: framenum %d kVTVideoDecoderMalfunctionErr", (uint8_t *)&buf, 8u);
    }
LABEL_265:
    CMTimeScale inited = -12911;
    goto LABEL_266;
  }
  char dataLengtha = v59;
  int v136 = v27;
  if (!LODWORD(v148[0]))
  {
LABEL_152:
    int v90 = *(FILE **)(v10 + 5536);
    if (v90) {
      fwrite(__ptr, 1uLL, __nitems, v90);
    }
    uint64_t v91 = *(FILE **)(v10 + 5528);
    if (v91) {
      fwrite(__ptr, 1uLL, __nitems, v91);
    }
    goto LABEL_84;
  }
  uint64_t v66 = 0;
  int v67 = 0;
  unsigned int v143 = 0;
  int v68 = 0;
  uint64_t v133 = v11;
  while (1)
  {
    int v69 = (char *)v148 + 4 * v66;
    unsigned int v71 = *((_DWORD *)v69 + 1);
    long long v70 = (unsigned int *)(v69 + 4);
    unsigned int destination = 0;
    unint64_t v145 = v71;
    LODWORD(v146) = *(_DWORD *)(v10 + 3140);
    CMTimeScale v72 = AppleAVDGetParameter(*(void *)(v10 + 3120), 8, (uint64_t)&destination);
    if (v72)
    {
      CMTimeScale inited = v72;
      kdebug_trace();
      VTDecoderSessionEmitDecodedFrame();
      if ((dataLengtha & 1) == 0) {
        *int v141 = 2;
      }
      goto LABEL_218;
    }
    int v73 = (unsigned __int8 *)destination;
    if (CMBlockBufferCopyDataBytes(v25, *((unsigned int *)&v148[2] + v66 + 1), *v70, destination))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.value) = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING, fail to copy data bytes, nothing to decode", (uint8_t *)&buf, 2u);
      }
      kdebug_trace();
      VTDecoderSessionEmitDecodedFrame();
      AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 3120), *v70, v73);
      if ((dataLengtha & 1) == 0) {
        *int v141 = 2;
      }
LABEL_217:
      CMTimeScale inited = -12911;
LABEL_218:
      uint32_t v11 = v133;
      goto LABEL_29;
    }
    unint64_t v74 = *v70;
    int v155 = v73;
    unint64_t v156 = v74;
    int v75 = *(_DWORD *)(v10 + 3140);
    int v157 = v75;
    *(void *)(v10 + 8 * v75 + 48) = a2;
    int v76 = (dataLengtha & 1) != 0 ? 0 : *v141;
    uint32_t v11 = v133;
    *(_DWORD *)(v10 + 4 * v75 + 2096) = v76;
    int v77 = v66 == LODWORD(v148[0]) - 1 ? 2 : 1;
    unint64_t v147 = __PAIR64__(v77, v136);
    AppleAVDSetParameter(*(void *)(v10 + 3120), 39, (unsigned __int8 *)&v147);
    unint64_t v78 = 0;
    *(void *)(v10 + 5480) = 0;
    int v79 = *(_DWORD *)(v10 + 3336);
    if (v139)
    {
      unsigned int v80 = v143;
      if (v79 == 4 && BytePtr)
      {
        unsigned int v80 = *v70 + v143;
        unint64_t v81 = &BytePtr[8 * v67];
        *(_DWORD *)(v10 + 3428) = *(_DWORD *)v81;
        *(_DWORD *)(v10 + 4452) = *((_DWORD *)v81 + 1);
        v68 += *(_DWORD *)v81 + *((_DWORD *)v81 + 1);
        unint64_t v82 = (v67 + 1);
        if (v139 <= v82)
        {
          unsigned int v143 = v80;
          *(void *)(v10 + 5480) = 1;
          LODWORD(v78) = 1;
          ++v67;
          goto LABEL_141;
        }
        unsigned int v83 = 0;
        while (1)
        {
          unsigned int v84 = v83 + 1;
          unsigned __int32 v85 = &BytePtr[8 * v82];
          int v86 = v85 + 4;
          if (*(_DWORD *)v85 + v68 + *((_DWORD *)v85 + 1) > v80) {
            break;
          }
          *(_DWORD *)(v10 + 3428 + 4 * v84) = *(_DWORD *)(v10 + 3428 + 4 * v83)
                                              + *(_DWORD *)v85
                                              + *(_DWORD *)&BytePtr[8 * v67 + 4 + 8 * v83];
          *(_DWORD *)(v10 + 4 * v84 + 4452) = *v86;
          v68 += *(_DWORD *)v85 + *v86;
          unint64_t v82 = v67 + v83++ + 2;
          if (v139 <= v82)
          {
            ++v84;
            break;
          }
        }
        v67 += v84;
        unint64_t v78 = v84;
        *(void *)(v10 + 5480) = v84;
        if (v84 - 257 <= 0xFFFFFEFF)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.value) = 134218240;
            *(CMTimeValue *)((char *)&buf.value + 4) = v78;
            LOWORD(buf.flags) = 1024;
            *(CMTimeFlags *)((char *)&buf.flags + 2) = 256;
            int v109 = &_os_log_internal;
            int v110 = "AppleAVD: AppleAVD_LghVideoDecoder ERROR: BAD encryptedSliceCount %ld MAX_SLICES %d";
            uint32_t v111 = 18;
LABEL_214:
            _os_log_impl(&dword_223977000, v109, OS_LOG_TYPE_DEFAULT, v110, (uint8_t *)&buf, v111);
          }
          goto LABEL_215;
        }
      }
    }
    else
    {
      unsigned int v80 = v143;
    }
    unsigned int v143 = v80;
    if (v79 != 4)
    {
      int v162 = 0;
      goto LABEL_142;
    }
    if (v78 >= 0x101)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.value) = 136315650;
        *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)"AppleAVDWrapperLghrnDecoderDecodeFrame";
        LOWORD(buf.flags) = 2048;
        *(void *)((char *)&buf.flags + 2) = v78;
        HIWORD(buf.epoch) = 1024;
        int v172 = 256;
        int v109 = &_os_log_internal;
        int v110 = "AppleAVD: ERROR: %s(): encryptedSliceCount (%ld) exceeds MAX_SLICES (%d)\n";
        uint32_t v111 = 28;
        goto LABEL_214;
      }
LABEL_215:
      kdebug_trace();
      VTDecoderSessionEmitDecodedFrame();
      AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 3120), *v70, v73);
      if ((dataLengtha & 1) == 0) {
        *int v141 = 2;
      }
      goto LABEL_217;
    }
LABEL_141:
    int v162 = v78;
    __memcpy_chk();
    __memcpy_chk();
LABEL_142:
    int v87 = *(FILE **)(v10 + 5536);
    if (v87)
    {
      if (v66) {
        fwrite(v73, 1uLL, *v70, v87);
      }
      else {
        WriteFrame(*(FILE **)(v10 + 5536), v73, v136, *v70, *(_DWORD *)(v10 + 3140));
      }
    }
    if (AppleAVDDecodeFrame(*(void *)(v10 + 3120), (uint64_t)&v155)) {
      break;
    }
    int v88 = *(_DWORD *)(v10 + 3140) + 1;
    *(_DWORD *)(v10 + 3140) = v88;
    int v89 = *(FILE **)(v10 + 5528);
    if (v89)
    {
      if (v66) {
        fwrite(v73, 1uLL, *v70, v89);
      }
      else {
        WriteFrame(*(FILE **)(v10 + 5528), v73, v136, *v70, v88);
      }
    }
    if (++v66 >= (unint64_t)LODWORD(v148[0])) {
      goto LABEL_152;
    }
  }
  kdebug_trace();
  VTDecoderSessionEmitDecodedFrame();
  AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 3120), *v70, v73);
  if ((dataLengtha & 1) == 0) {
    *int v141 = 2;
  }
  CMTimeScale inited = v160;
  BOOL v95 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (!inited)
  {
    uint32_t v11 = v133;
    if (v95)
    {
      int v112 = *(_DWORD *)(v10 + 3140);
      LODWORD(buf.value) = 67109120;
      HIDWORD(buf.value) = v112;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_LghVideoDecoder_DecodeFrame ERROR: framenum %d kVTVideoDecoderMalfunctionErr", (uint8_t *)&buf, 8u);
    }
LABEL_203:
    CMTimeScale inited = -12911;
    goto LABEL_29;
  }
  uint32_t v11 = v133;
  if (!v95) {
    goto LABEL_29;
  }
LABEL_259:
  int v127 = *(_DWORD *)(v10 + 3140);
  LODWORD(buf.value) = 67109376;
  HIDWORD(buf.value) = v127;
  LOWORD(buf.timescale) = 1024;
  *(CMTimeScale *)((char *)&buf.timescale + 2) = inited;
  _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_LghVideoDecoder_DecodeFrame ERROR: framenum %d decryptError %x", (uint8_t *)&buf, 0xEu);
  CMTimeScale inited = v160;
LABEL_266:
  if (inited) {
    goto LABEL_29;
  }
LABEL_84:
  pthread_mutex_unlock(v11);
  kdebug_trace();
  return 0;
}

uint64_t AppleAVDWrapperLghrnDecoderCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  pthread_once(&sCreateSupportedPropertyDictionaryOnce_2, Lghrn_createSupportedPropertyDictionary);
  uint64_t result = 4294954392;
  if (a2)
  {
    if (sLghrnVideoDecoderSupportedPropertyDictionary)
    {
      CFTypeRef v4 = CFRetain((CFTypeRef)sLghrnVideoDecoderSupportedPropertyDictionary);
      uint64_t result = 0;
      *a2 = v4;
    }
  }
  return result;
}

size_t WriteIVFHeader_0(FILE *__stream, __int16 a2, __int16 a3)
{
  int __ptr = 1179208516;
  v10[3] = 0;
  strcpy((char *)v10, "vp90 ");
  __int16 v9 = a2;
  __int16 v8 = a3;
  int v7 = 90000;
  int v6 = 1;
  int v5 = 26999942;
  fwrite(&__ptr, 1uLL, 4uLL, __stream);
  fwrite(&v10[3], 1uLL, 2uLL, __stream);
  fwrite(&v10[2], 1uLL, 2uLL, __stream);
  fwrite(v10, 1uLL, 4uLL, __stream);
  fwrite(&v9, 1uLL, 2uLL, __stream);
  fwrite(&v8, 1uLL, 2uLL, __stream);
  fwrite(&v7, 1uLL, 4uLL, __stream);
  fwrite(&v6, 1uLL, 4uLL, __stream);
  fwrite(&v5, 1uLL, 4uLL, __stream);
  return fwrite(&v10[3], 1uLL, 4uLL, __stream);
}

CFDictionaryRef Lghrn_createFrameTypesArrayElement(const void *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v1 = (void *)*MEMORY[0x263F1E740];
  CFTypeRef v4 = a1;
  keys = v1;
  CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)&keys, &v4, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v2 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CMTime buf = 136315394;
    int v7 = "Lghrn_createFrameTypesArrayElement";
    __int16 v8 = 2080;
    __int16 v9 = "frameTypeDict";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %s\n", buf, 0x16u);
  }
  return v2;
}

uint64_t stripPreventionEmulationBytes(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  int v2 = 0;
  LODWORD(v3) = 0;
  for (unsigned int i = 0; i < a2; ++i)
  {
    if (v2 == 2)
    {
      int v5 = *(unsigned __int8 *)(a1 + i);
      BOOL v6 = v5 == 3;
      BOOL v7 = v5 != 3;
      if (v6) {
        ++i;
      }
      int v2 = 2 * v7;
    }
    *(unsigned char *)(a1 + v3) = *(unsigned char *)(a1 + i);
    if (*(unsigned char *)(a1 + i)) {
      int v2 = 0;
    }
    else {
      ++v2;
    }
    uint64_t v3 = (v3 + 1);
  }
  return v3;
}

uint64_t get_pic_width_mem_tile_salvia(uint64_t a1, int a2, int a3)
{
  int v3 = a3 >> (a2 != 3);
  int v5 = v3 + 15;
  BOOL v4 = v3 < -15;
  int v6 = v3 + 30;
  if (!v4) {
    int v6 = v5;
  }
  unsigned int v7 = v6 >> 4;
  int v8 = a3 + 31;
  if (a3 < -31) {
    int v8 = a3 + 62;
  }
  unsigned int v9 = v8 >> 5;
  if (a2) {
    return v7;
  }
  else {
    return v9;
  }
}

uint64_t get_pic_height_mem_tile_salvia(uint64_t a1, int a2, int a3)
{
  int v3 = a3 >> (a2 == 1);
  int v5 = v3 + 15;
  BOOL v4 = v3 < -15;
  int v6 = v3 + 30;
  if (!v4) {
    int v6 = v5;
  }
  unsigned int v7 = v6 >> 4;
  int v8 = a3 + 31;
  if (a3 < -31) {
    int v8 = a3 + 62;
  }
  unsigned int v9 = v8 >> 5;
  if (a2) {
    return v7;
  }
  else {
    return v9;
  }
}

void setIntValue(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t getDecHdrStride(int a1, char a2, unsigned int a3)
{
  return (a1 + (a3 >> 2 >> a2) - 1) / (a3 >> 2 >> a2);
}

uint64_t getDecHdrSize(int a1, char a2, int a3, int a4)
{
  return a4 * a3 * ((a1 + (1 << a2) - 1) >> a2);
}

uint64_t CreatePixelBufferAttributesDictionary(int a1, int a2, int a3, int a4, int a5, _DWORD *a6, int a7, unint64_t a8, __CFDictionary **a9, char a10)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    CFMutableArrayRef v19 = 0;
    goto LABEL_28;
  }
  CFMutableArrayRef v19 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (!v19) {
    goto LABEL_28;
  }
  int v49 = a4;
  int v50 = a5;
  int v51 = a2;
  int v20 = 64;
  if (a7 < 1)
  {
LABEL_9:
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F04180], v19);
    CFRelease(v19);
    CFMutableArrayRef v19 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v19) {
      goto LABEL_28;
    }
    long long v24 = (const void **)MEMORY[0x263EFFB40];
    if (a8)
    {
      long long v25 = (const void *)*MEMORY[0x263F0EF40];
      if (HIDWORD(a8) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315394;
        int v53 = "CreatePixelBufferAttributesDictionary";
        __int16 v54 = 1024;
        int v55 = 1246;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      setIntValue(v19, v25, a8);
      CFDictionaryAddValue(v19, (const void *)*MEMORY[0x263F0EDC8], *v24);
    }
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F04130], v19);
    addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04078], v20);
    addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04240], a2);
    addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04118], a3);
    addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04198], 256);
    if (a10)
    {
      int v26 = a1;
      if (a1 < 20)
      {
        int v40 = v49 + 15;
        if (v49 < -15) {
          int v40 = v49 + 30;
        }
        signed int v28 = (v40 & 0xFFFFFFF0) + 16;
        int v41 = v50 + 7;
        if (v50 < -7) {
          int v41 = v50 + 14;
        }
        signed int v30 = (v41 & 0xFFFFFFF8) + 8;
        if (v50 >= 0) {
          int v42 = v50;
        }
        else {
          int v42 = v50 + 1;
        }
        int v43 = v42 >> 1;
        int v44 = v43 + 7;
        BOOL v33 = v43 < -7;
        int v45 = v43 + 14;
        if (!v33) {
          int v45 = v44;
        }
        signed int v36 = ((2 * v45) & 0xFFFFFFF0) + 16;
      }
      else
      {
        int v27 = v49 + 31;
        if (v49 < -31) {
          int v27 = v49 + 62;
        }
        signed int v28 = v27 & 0xFFFFFFE0;
        int v29 = v50 + 31;
        if (v50 < -31) {
          int v29 = v50 + 62;
        }
        signed int v30 = v29 & 0xFFFFFFE0;
        if (v50 >= 0) {
          int v31 = v50;
        }
        else {
          int v31 = v50 + 1;
        }
        int v32 = v31 >> 1;
        int v34 = v32 + 15;
        BOOL v33 = v32 < -15;
        int v35 = v32 + 30;
        if (!v33) {
          int v35 = v34;
        }
        signed int v36 = (2 * v35) & 0xFFFFFFE0;
      }
      if (v30 <= v36) {
        signed int v30 = v36;
      }
      BOOL v46 = __OFSUB__(v30, a3);
      int v47 = v30 - a3;
      if ((v47 < 0) ^ v46 | (v47 == 0)) {
        int v39 = 0;
      }
      else {
        int v39 = v47;
      }
      int v38 = v28 - v51;
      if (v28 <= v51) {
        goto LABEL_57;
      }
    }
    else
    {
      if (v49 >= a2) {
        int v38 = v49 - a2;
      }
      else {
        int v38 = -a2 & 0xF;
      }
      int v26 = a1;
      int v39 = v50 - a3;
      if (v50 < a3) {
        int v39 = -a3 & 0xF;
      }
    }
    if (v38) {
      addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F040F8], v38);
    }
LABEL_57:
    if (v39) {
      addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F040D8], v39);
    }
    if (v26 >= 26) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F041D8], *v24);
    }
    uint64_t v37 = 0;
    *a9 = Mutable;
LABEL_62:
    CFRelease(v19);
    return v37;
  }
  uint64_t v21 = a7;
  while (1)
  {
    if ((*a6 | 0x10) == 0x34343476) {
      int v20 = 128;
    }
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberSInt32Type, a6);
    if (!v22) {
      break;
    }
    CFNumberRef v23 = v22;
    CFArrayAppendValue(v19, v22);
    CFRelease(v23);
    ++a6;
    if (!--v21) {
      goto LABEL_9;
    }
  }
LABEL_28:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CMTime buf = 136315394;
    int v53 = "CreatePixelBufferAttributesDictionary";
    __int16 v54 = 1024;
    int v55 = -12904;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t v37 = 4294954392;
  if (v19) {
    goto LABEL_62;
  }
  return v37;
}

uint64_t AppleAVDSetCryptSession(uint64_t a1)
{
  size_t v5 = 12;
  uint64_t outputStruct = 0;
  long long v9 = 0uLL;
  *(_DWORD *)unsigned int v7 = 0;
  uint64_t inputStruct = *(void *)(a1 + 1504);
  *(void *)((char *)&v9 + 4) = *(void *)(a1 + 8);
  LOBYTE(v9) = *(_DWORD *)(a1 + 1496);
  uint64_t v2 = IOConnectCallStructMethod(*(_DWORD *)a1, 6u, &inputStruct, 0x18uLL, &outputStruct, &v5);
  uint64_t v3 = *(void *)(a1 + 3848);
  if (v3)
  {
    AppleAVDCommandBuilder::updateDecryptMethod(v3, outputStruct, SHIDWORD(outputStruct));
    AppleAVDCommandBuilder::updateSecuredClient(*(void *)(a1 + 3848), v7[0]);
    AppleAVDCommandBuilder::updateDecryptionParams(*(AppleAVDCommandBuilder **)(a1 + 3848), *(_DWORD *)(a1 + 1056));
  }
  return v2;
}

uint64_t AppleAVDReleaseRingBuffer(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (a1 && (uint64_t v3 = *(RingBuffer **)(a1 + 888)) != 0) {
    return RingBuffer::releaseRingBuffer(v3, a2 + 16, a3);
  }
  else {
    return 0;
  }
}

uint64_t AppleAVDReleaseCurrentInputBuffer(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (a1 && (uint64_t v3 = *(RingBuffer **)(a1 + 888)) != 0) {
    return RingBuffer::releaseNewestRingBuffer(v3, a2 + 16, a3);
  }
  else {
    return 0;
  }
}

uint64_t AppleAVDSetMultiViewOutputFiles(uint64_t a1, int a2, uint64_t a3)
{
  if (a1 && a2 == 11)
  {
    for (uint64_t i = 0; i != 512; i += 8)
    {
      uint64_t v4 = *(void *)(a3 + i);
      if (v4) {
        *(void *)(a1 + 240 + i) = v4;
      }
    }
  }
  return 0;
}

void AppleAVDCheckTranscryptionSupport(void)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(void *)existing = 0;
  if (MEMORY[0x223CBA9B0](0, &existing[1]))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CMTime buf = 136315138;
    long long v9 = "AppleAVDCheckTranscryptionSupport";
    CFDictionaryRef v0 = &_os_log_internal;
    uint64_t v1 = "AppleAVD: %s(): IOMainPort failed \n";
    goto LABEL_7;
  }
  mach_port_t v2 = existing[1];
  CFDictionaryRef v3 = IOServiceMatching("AppleAVD");
  if (IOServiceGetMatchingServices(v2, v3, existing))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CMTime buf = 136315138;
    long long v9 = "AppleAVDCheckTranscryptionSupport";
    CFDictionaryRef v0 = &_os_log_internal;
    uint64_t v1 = "AppleAVD: %s(): IOServiceGetMatchingServices failed \n";
    goto LABEL_7;
  }
  io_registry_entry_t v4 = IOIteratorNext(existing[0]);
  if (v4)
  {
    CFBooleanRef CFProperty = (const __CFBoolean *)IORegistryEntryCreateCFProperty(v4, @"ADSSupported", (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    if (CFProperty)
    {
      CFBooleanRef v6 = CFProperty;
      CFBooleanGetValue(CFProperty);
      CFRelease(v6);
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CMTime buf = 136315138;
    long long v9 = "AppleAVDCheckTranscryptionSupport";
    CFDictionaryRef v0 = &_os_log_internal;
    uint64_t v1 = "AppleAVD: %s(): IOIteratorNext failed \n";
LABEL_7:
    _os_log_impl(&dword_223977000, v0, OS_LOG_TYPE_DEFAULT, v1, buf, 0xCu);
  }
}

void parseAvcSps()
{
}

void sub_223AB0BC0(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v1, 0x1091C40FE132357);
  _Unwind_Resume(a1);
}

uint64_t calcAvcDpbMaxSize(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned int v2 = *(unsigned __int8 *)(a1 + 2);
  unsigned int v3 = (*(unsigned __int16 *)(a1 + 1558) + 1 + (*(unsigned __int16 *)(a1 + 1558) + 1) * *(unsigned __int16 *)(a1 + 1560)) << (*(unsigned char *)(a1 + 1562) == 0);
  if (v2 > 0x27)
  {
    switch(*(unsigned char *)(a1 + 2))
    {
      case '(':
      case ')':
        unsigned int v4 = 0x8000;
        break;
      case '*':
        unsigned int v4 = 34816;
        break;
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
        goto LABEL_18;
      case '2':
        unsigned int v4 = 110400;
        break;
      case '3':
      case '4':
        unsigned int v4 = 184320;
        break;
      default:
        if (v2 - 60 >= 3)
        {
          if (v2 == 80)
          {
            unsigned int v4 = 10485760;
          }
          else
          {
LABEL_18:
            BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
            unsigned int v4 = 0;
            if (v5)
            {
              int v8 = 136315394;
              long long v9 = "calcAvcDpbMaxSize";
              __int16 v10 = 1024;
              unsigned int v11 = v2;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Level %d is not defined", (uint8_t *)&v8, 0x12u);
              unsigned int v4 = 0;
            }
          }
        }
        else
        {
          unsigned int v4 = 696320;
        }
        break;
    }
  }
  else
  {
    unsigned int v4 = 396;
    switch(*(unsigned char *)(a1 + 2))
    {
      case 0xA:
        break;
      case 0xB:
        unsigned int v4 = 900;
        break;
      case 0xC:
      case 0xD:
      case 0x14:
        unsigned int v4 = 2376;
        break;
      case 0x15:
        unsigned int v4 = 4752;
        break;
      case 0x16:
      case 0x1E:
        unsigned int v4 = 8100;
        break;
      case 0x1F:
        unsigned int v4 = 18000;
        break;
      case 0x20:
        unsigned int v4 = 20480;
        break;
      default:
        goto LABEL_18;
    }
  }
  unsigned int v6 = v4 / v3;
  if (*(unsigned char *)(a1 + 1574) && *(unsigned char *)(a1 + 2202) && v6 <= *(unsigned __int8 *)(a1 + 2209)) {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 2209);
  }
  if (v6 <= *(unsigned __int8 *)(a1 + 1556)) {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 1556);
  }
  if (v6 >= 0x17) {
    unsigned int v6 = 23;
  }
  return v6 + 1;
}

void describe_cfobject_to_log(const void *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned int v2 = (char *)malloc_type_malloc(0x10000uLL, 0x6A167DC0uLL);
  __stringp = v2;
  if (v2)
  {
    unsigned int v3 = v2;
    CFStringRef v4 = CFCopyDescription(a1);
    if (CFStringGetCString(v4, v3, 0x10000, 0x8000100u) == 1)
    {
      BOOL v5 = strsep(&__stringp, "\n");
      if (v5)
      {
        unsigned int v6 = v5;
        unsigned int v7 = &_os_log_internal;
        do
        {
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315138;
            __int16 v10 = v6;
            _os_log_impl(&dword_223977000, v7, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
          }
          unsigned int v6 = strsep(&__stringp, "\n");
        }
        while (v6);
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 67109120;
      LODWORD(v10) = 0x10000;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: description was truncated.  buffer size only %d bytes", buf, 8u);
    }
    if (v4) {
      CFRelease(v4);
    }
    free(__stringp);
  }
}

uint64_t AppleAVDResizeBufferPools(void *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109632;
    v13[1] = a2;
    __int16 v14 = 1024;
    int v15 = a3;
    __int16 v16 = 2048;
    uint64_t v17 = a4;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDResizeBufferPools: resize pool size=%ux%u vtSession=%p\n", (uint8_t *)v13, 0x18u);
  }
  CFDictionaryRef v8 = (const __CFDictionary *)a1[488];
  if (v8)
  {
    if (!a1[4])
    {
      AppleAVDChangeVTResolutionInternal((int)a1, a1 + 4, v8, a2, a3);
      long long v9 = (pthread_mutex_t *)a1[26];
      if (v9) {
        BufferPool::setCVPixelBufferPool(v9, (__CVPixelBufferPool *)a1[4]);
      }
    }
  }
  CFDictionaryRef v10 = (const __CFDictionary *)a1[487];
  if (v10)
  {
    if (!a1[5])
    {
      AppleAVDChangeVTResolutionInternal((int)a1, a1 + 5, v10, a2, a3);
      uint64_t v11 = (pthread_mutex_t *)a1[25];
      if (v11) {
        BufferPool::setCVPixelBufferPool(v11, (__CVPixelBufferPool *)a1[5]);
      }
    }
  }
  return 0;
}

uint64_t RemoveEPB(unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned int v3 = a3;
  if (a2)
  {
    unsigned int v4 = 0;
    BOOL v5 = a3;
    do
    {
      int v6 = *(_DWORD *)a1;
      if ((*(_DWORD *)a1 & 0xFCFFFF) != 0)
      {
        ++a1;
        unsigned int v3 = v5 + 1;
        int v7 = 1;
      }
      else
      {
        LOBYTE(v6) = 0;
        *(_WORD *)(v5 + 1) = 768;
        unsigned int v3 = v5 + 3;
        a1 += 2;
        int v7 = 2;
      }
      v4 += v7;
      *BOOL v5 = v6;
      BOOL v5 = v3;
    }
    while (v4 < a2);
  }
  uint64_t v8 = v3 - a3;
  if ((unint64_t)(v3 - a3) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315394;
    uint64_t v11 = "RemoveEPB";
    __int16 v12 = 1024;
    int v13 = 2402;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v10, 0x12u);
  }
  return v8;
}

unsigned __int8 *parseSEI(unsigned __int8 *result, unsigned int a2, unsigned __int8 *__dst, unsigned int *a4)
{
  int v5 = 0;
  v17[2] = *MEMORY[0x263EF8340];
  *a4 = 0;
  int v6 = *result;
  int v7 = 0;
  if (a2 && v6 == 255)
  {
    int v5 = 0;
    unint64_t v8 = 1;
    do
    {
      int v7 = v8;
      v5 += 255;
      int v6 = result[v8];
      if (v8 >= a2) {
        break;
      }
      ++v8;
    }
    while (v6 == 255);
  }
  unsigned int v9 = v7 + 1;
  int v10 = -271;
  do
  {
    int v11 = result[v9];
    v10 += 255;
  }
  while (v11 == 255 && v9++ < a2);
  if (v5 + v6 == 5)
  {
    for (uint64_t i = 0; i != 16; ++i)
    {
      unsigned int v14 = v9 + 1;
      *((unsigned char *)v17 + i) = result[v9++];
    }
    if (v17[0] == 0x5646C3E2DC8DF223 && v17[1] == 0xDE4FDE1CA55751BCLL)
    {
      unsigned int v16 = v11 + v10;
      uint64_t result = (unsigned __int8 *)memcpy(__dst, &result[v14], (v11 + v10));
      *a4 = v16;
    }
  }
  return result;
}

CAHDecThymeLgh *createThymeLghDecoder(CAVDLghDecoder *a1)
{
  unsigned int v2 = (CAHDecThymeLgh *)operator new(0xC48uLL, MEMORY[0x263F8C180]);
  unsigned int v3 = v2;
  if (v2) {
    CAHDecThymeLgh::CAHDecThymeLgh(v2, a1);
  }
  return v3;
}

void sub_223AB1414(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecThymeLgh::CAHDecThymeLgh(CAHDecThymeLgh *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D742098;
  *(_DWORD *)(v1 + 456) = 151468;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecThymeLgh::CAHDecThymeLgh(CAHDecThymeLgh *this, CAVDLghDecoder *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D742098;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 151468;
  *(_DWORD *)(v4 + 8) = 940;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 151468, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      uint64_t v17 = "CAHDecThymeLgh";
      __int16 v18 = 1024;
      int v19 = 0;
      int v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
LABEL_16:
      _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v7);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v8;
    *((void *)this + 34) = v8;
    uint64_t v9 = *((void *)this + 32);
    *(_DWORD *)(v9 + 17552) = 0;
    bzero((void *)(v9 + 11792), 0xB00uLL);
    *(_OWORD *)(v9 + 5712) = 0u;
    bzero((void *)(*((void *)this + 32) + 14608), 0xB00uLL);
    bzero((char *)this + 464, 0x4D0uLL);
    int v10 = (_OWORD *)*((void *)this + 32);
    v10[356] = 0u;
    v10[355] = 0u;
    v10[354] = 0u;
    v10[353] = 0u;
    v10[352] = 0u;
    v10[351] = 0u;
    v10[350] = 0u;
    v10[349] = 0u;
    v10[348] = 0u;
    v10[347] = 0u;
    v10[346] = 0u;
    v10[345] = 0u;
    v10[344] = 0u;
    v10[343] = 0u;
    v10[342] = 0u;
    v10[341] = 0u;
    v10[340] = 0u;
    v10[339] = 0u;
    v10[338] = 0u;
    v10[337] = 0u;
    v10[336] = 0u;
    v10[335] = 0u;
    bzero((char *)this + 1696, 0x580uLL);
    for (uint64_t i = 3072; i != 3776; i += 176)
    {
      __int16 v12 = (_OWORD *)(*((void *)this + 32) + i);
      v12[9] = 0uLL;
      v12[10] = 0uLL;
      v12[7] = 0uLL;
      v12[8] = 0uLL;
      v12[5] = 0uLL;
      v12[6] = 0uLL;
      v12[3] = 0uLL;
      v12[4] = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *__int16 v12 = 0uLL;
    }
    do
    {
      int v13 = (_OWORD *)(*((void *)this + 32) + i);
      v13[9] = 0uLL;
      v13[10] = 0uLL;
      v13[7] = 0uLL;
      v13[8] = 0uLL;
      v13[5] = 0uLL;
      v13[6] = 0uLL;
      v13[3] = 0uLL;
      v13[4] = 0uLL;
      v13[1] = 0uLL;
      _DWORD v13[2] = 0uLL;
      *int v13 = 0uLL;
      i += 176;
    }
    while (i != 5184);
    unsigned int v14 = (_OWORD *)*((void *)this + 32);
    v14[334] = 0u;
    v14[333] = 0u;
    v14[332] = 0u;
    v14[331] = 0u;
    v14[330] = 0u;
    v14[329] = 0u;
    v14[328] = 0u;
    v14[327] = 0u;
    v14[326] = 0u;
    v14[325] = 0u;
    uint64_t v15 = 3072;
    v14[324] = 0u;
    do
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), 1913, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        int v16 = 136315650;
        uint64_t v17 = "CAHDecThymeLgh";
        __int16 v18 = 1024;
        int v19 = 174;
        __int16 v20 = 2080;
        uint64_t v21 = "probBuf";
        int v5 = &_os_log_internal;
        int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
        goto LABEL_15;
      }
      v15 += 176;
    }
    while (v15 != 3776);
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 5184), 12284, 7, 1, 0))return; {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    }
    {
      int v16 = 136315650;
      uint64_t v17 = "CAHDecThymeLgh";
      __int16 v18 = 1024;
      int v19 = 176;
      __int16 v20 = 2080;
      uint64_t v21 = "stateBuf";
      int v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_15:
      uint32_t v7 = 28;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_223AB184C(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecThymeLgh::~CAHDecThymeLgh(CAHDecThymeLgh *this)
{
  *(void *)this = &unk_26D742098;
  CAHDecThymeLgh::freeWorkBuf_SPS(this);
  uint64_t v2 = *((void *)this + 32);
  for (uint64_t i = 3072; i != 3776; i += 176)
  {
    if (*(void *)(v2 + i))
    {
      CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + i));
      uint64_t v2 = *((void *)this + 32);
      *(void *)(v2 + i) = 0;
    }
  }
  if (*(void *)(v2 + 5184))
  {
    CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + 5184));
    *(void *)(*((void *)this + 32) + 5184) = 0;
  }
  (*(void (**)(CAHDecThymeLgh *, void))(*(void *)this + 152))(this, 0);
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecThymeLgh::~CAHDecThymeLgh(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecThymeLgh::DecodePicture(CAHDecThymeLgh *this, uint64_t a2)
{
  if (CAHDecTansyLgh::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecThymeLgh *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecThymeLgh *))(*(void *)this + 48))(this);
  (*(void (**)(CAHDecThymeLgh *))(*(void *)this + 56))(this);
  CAHDecTansyLgh::populateTiles(this);
  (*(void (**)(CAHDecThymeLgh *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecThymeLgh *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecThymeLgh::populateCommonRegisters(CAHDecThymeLgh *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000002;
  return 0;
}

uint64_t CAHDecThymeLgh::updateCommonRegisters(CAHDecThymeLgh *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecThymeLgh::populateSequenceRegisters(CAHDecThymeLgh *this)
{
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  *(_DWORD *)(v1 + 40) = 0;
  unsigned __int16 v3 = *(_DWORD *)(v2 + 108) - 1;
  *(_DWORD *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 40) = (v3 | ((unsigned __int16)*(_DWORD *)(v2 + 112) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 304);
  if (v4 >= 3) {
    int v5 = 6528;
  }
  else {
    int v5 = ((v4 & 3) << 7) | 0x1800;
  }
  *(_DWORD *)(v1 + 44) = v5;
  unsigned int v6 = v5 & 0xFFF87FFF | (((*(unsigned char *)(v2 + 105) + 8) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFF87FFFF | (((*(unsigned __int8 *)(v2 + 105) + 8) & 0xF) << 19) | 0x1000000;
  *(_DWORD *)(v1 + 44) = v7;
  *(_DWORD *)(v1 + 44) = v7 & 0xFDFFFFFF | (*(unsigned char *)(v2 + 304) == 4);
  return 0;
}

uint64_t CAHDecThymeLgh::populatePictureRegisters(CAHDecThymeLgh *this)
{
  uint64_t v399 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v2 + 17560);
  if (*(unsigned char *)(v4 + 37)) {
    BOOL v5 = *(unsigned char *)(v4 + 40) != 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = *(_DWORD *)(v2 + 11748);
  int v7 = *(_DWORD *)(v4 + 100);
  int v393 = *(_DWORD *)(v4 + 96);
  int v392 = 1 << v7;
  char v8 = *(unsigned char *)(v2 + 2675);
  char v9 = *(unsigned char *)(v2 + 2674);
  if (v5) {
    int v10 = 766517248;
  }
  else {
    int v10 = 766509056;
  }
  *(_DWORD *)(v3 + 48) = v10;
  int v11 = v10 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v3 + 48) = v11;
  if (*(_DWORD *)(*((void *)this + 32) + 2644) == 1) {
    int v12 = 1024;
  }
  else {
    int v12 = 1;
  }
  unsigned int v13 = v12 & 0xFFFFFFF0 | (4 * (v8 & 3)) | v9 & 3 | v11 | 0x2E0;
  *(_DWORD *)(v3 + 48) = v13;
  unsigned int v14 = (unsigned char *)*((void *)this + 32);
  int v15 = v13 | ((v14[2652] & 1) << 19);
  *(_DWORD *)(v3 + 48) = v15;
  int v16 = v15 | ((v14[2653] & 1) << 18);
  *(_DWORD *)(v3 + 48) = v16;
  *(_DWORD *)(v3 + 48) = v16 | ((v14[2654] & 1) << 17);
  *(void *)(v3 + 52) = 0x2000000;
  LOWORD(v16) = *(_DWORD *)(v4 + 108) - 1;
  *(_DWORD *)(v3 + 56) = (unsigned __int16)v16;
  *(_DWORD *)(v3 + 56) = ((unsigned __int16)v16 | ((unsigned __int16)*(_DWORD *)(v4 + 112) << 16)) - 0x10000;
  *(void *)(v3 + 60) = 0;
  int v17 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2688) & 7;
  *(_DWORD *)(v3 + 64) = v17;
  unsigned int v18 = v17 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2692) & 1));
  *(_DWORD *)(v3 + 64) = v18;
  unsigned int v19 = v18 & 0xFFFFFF8F | (16 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2696) & 7));
  *(_DWORD *)(v3 + 64) = v19;
  unsigned int v20 = v19 & 0xFFFFFF7F | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2700) & 1) << 7);
  *(_DWORD *)(v3 + 64) = v20;
  unsigned int v21 = v20 & 0xFFFFF8FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2704) & 7) << 8);
  *(_DWORD *)(v3 + 64) = v21;
  unsigned int v22 = v21 & 0xFFFFF7FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2708) & 1) << 11);
  *(_DWORD *)(v3 + 64) = v22;
  unsigned int v23 = v22 & 0xFFFFCFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2712) & 3) << 12);
  *(_DWORD *)(v3 + 64) = v23;
  unsigned int v24 = v23 & 0xFFFFBFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2716) & 1) << 14);
  *(_DWORD *)(v3 + 64) = v24;
  unsigned int v25 = v24 & 0xFFFF7FFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2720) & 1) << 15);
  *(_DWORD *)(v3 + 64) = v25;
  unsigned int v26 = v25 & 0xFFF8FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2724) & 7) << 16);
  *(_DWORD *)(v3 + 64) = v26;
  unsigned int v27 = v26 & 0xFFF7FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2728) & 1) << 19);
  *(_DWORD *)(v3 + 64) = v27;
  unsigned int v28 = v27 & 0xFFEFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2732) & 1) << 20);
  *(_DWORD *)(v3 + 64) = v28;
  unsigned int v29 = v28 & 0xFFDFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2736) & 1) << 21);
  *(_DWORD *)(v3 + 64) = v29;
  unsigned int v30 = v29 & 0xFFBFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2740) & 1) << 22);
  *(_DWORD *)(v3 + 64) = v30;
  unsigned int v31 = v30 & 0xFF7FFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2744) & 1) << 23);
  *(_DWORD *)(v3 + 64) = v31;
  unsigned int v32 = v31 & 0xFEFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2748) & 1) << 24);
  *(_DWORD *)(v3 + 64) = v32;
  unsigned int v33 = v32 & 0xFDFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2752) & 1) << 25);
  *(_DWORD *)(v3 + 64) = v33;
  *(_DWORD *)(v3 + 64) = v33 & 0xFBFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2756) & 1) << 26);
  *(void *)(v3 + 68) = 0;
  if (*(unsigned char *)(v4 + 60))
  {
    int v34 = *(unsigned char *)(v4 + 69) & 0x7F;
    *(_DWORD *)(v3 + 68) = v34;
    unsigned int v35 = v34 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 68) & 0x7F) << 7);
    *(_DWORD *)(v3 + 68) = v35;
    unsigned int v36 = v35 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 67) & 0x7F) << 14);
    *(_DWORD *)(v3 + 68) = v36;
    unsigned int v37 = v36 & 0xF01FFFFF | ((*(unsigned char *)(v4 + 66) & 0x7F) << 21);
    *(_DWORD *)(v3 + 68) = v37;
    *(_DWORD *)(v3 + 68) = v37 & 0x8FFFFFFF | ((*(unsigned char *)(v4 + 59) & 7) << 28);
    int v38 = *(unsigned char *)(v4 + 73) & 0x7F;
    *(_DWORD *)(v3 + 72) = v38;
    unsigned int v39 = v38 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 72) & 0x7F) << 7);
    *(_DWORD *)(v3 + 72) = v39;
    unsigned int v40 = v39 & 0xFFF03FFF | ((*(unsigned char *)(v4 + 58) & 0x3F) << 14);
  }
  else
  {
    *(_DWORD *)(v3 + 68) = (*(unsigned char *)(v4 + 59) & 7) << 28;
    unsigned int v40 = (*(unsigned char *)(v4 + 58) & 0x3F) << 14;
  }
  uint64_t v41 = 0;
  int v394 = 1 << v393;
  int v391 = v7;
  int v390 = 1 << v393 << v7;
  *(_DWORD *)(v3 + 72) = v40;
  *(_DWORD *)(v3 + 76) = 0;
  int v42 = *(unsigned char *)(v4 + 77) & 0x1F;
  *(_DWORD *)(v3 + 76) = v42;
  unsigned int v43 = v42 & 0xFFFFFC1F | (32 * (*(unsigned char *)(v4 + 76) & 0x1F));
  *(_DWORD *)(v3 + 76) = v43;
  unsigned int v44 = v43 & 0xFFFF83FF | ((*(unsigned char *)(v4 + 75) & 0x1F) << 10);
  *(_DWORD *)(v3 + 76) = v44;
  *(_DWORD *)(v3 + 76) = v44 | (*(unsigned __int8 *)(v4 + 74) << 15);
  uint64_t v45 = v3 + 80;
  BOOL v46 = (_WORD *)(v4 + 242);
  uint64_t v47 = v4 + 208;
  do
  {
    int v48 = *(unsigned __int8 *)(v4 + 78);
    *(_DWORD *)(v45 + v41) = 0;
    if (v48)
    {
      BOOL v49 = *(unsigned char *)(v47 + v41) != 0;
      *(_DWORD *)(v45 + v41) = v49;
      BOOL v50 = *(unsigned __int8 *)(v47 + v41 - 1) != 0;
    }
    else
    {
      BOOL v49 = 0;
      BOOL v50 = 0;
    }
    int v51 = v49 | (8 * v50);
    *(_DWORD *)(v45 + v41) = v51;
    unsigned int v52 = v51 & 0xFFFFFFF9 | (2 * (*v46 & 3));
    *(_DWORD *)(v45 + v41) = v52;
    if (v48)
    {
      int v53 = *(unsigned __int8 *)(v47 + v41 - 2);
      int v54 = v52 | ((*(unsigned char *)(v47 + v41 - 2) != 0) << 11);
      *(_DWORD *)(v45 + v41) = v54;
      if (v53) {
        LOWORD(v53) = *(v46 - 1);
      }
      unsigned int v55 = (16 * (v53 & 0x7F)) | v54 & 0xFFFFF80F;
      *(_DWORD *)(v45 + v41) = v55;
      int v48 = *(unsigned __int8 *)(v47 + v41 - 3);
      unsigned int v52 = v55 | ((v48 != 0) << 21);
      *(_DWORD *)(v45 + v41) = v52;
      if (v48) {
        LOWORD(v48) = *(v46 - 2);
      }
    }
    *(_DWORD *)(v45 + v41) = v52 & 0xFFE00FFF | ((v48 & 0x1FF) << 12);
    v41 += 4;
    v46 += 4;
  }
  while (v41 != 32);
  *(_DWORD *)(v3 + 152) = 0x20000;
  uint64_t v395 = v4;
  BOOL v388 = v5;
  if (v5)
  {
    uint64_t v389 = 8;
  }
  else
  {
    uint64_t v56 = (_DWORD *)(v3 + 112);
    uint64_t v57 = 2178;
    uint64_t v389 = 3;
    int v58 = &_os_log_internal;
    do
    {
      v56[11] = 0x1000000;
      *uint64_t v56 = 0;
      unsigned __int16 v59 = **(_DWORD **)(*((void *)this + 32) + 8 * v57) - 1;
      *uint64_t v56 = v59;
      *uint64_t v56 = (v59 | ((unsigned __int16)*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 16))
           - 0x10000;
      v56[3] = 0;
      int v60 = (unsigned __int16)((**(_DWORD **)(*((void *)this + 32) + 8 * v57) << 14) / *(_DWORD *)(v4 + 108));
      v56[3] = v60;
      int v61 = v60 | ((unsigned __int16)((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 14)
                                    / *(_DWORD *)(v4 + 112)) << 16);
      v56[3] = v61;
      if ((v60 - 1024) >= 0x7C01 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 545;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
        int v61 = v56[3];
      }
      if ((v61 - 0x4000000) >= 0x7C010000 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 546;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
      }
      ++v57;
      ++v56;
      uint64_t v4 = v395;
    }
    while (v57 != 2181);
  }
  *(void *)(v3 + 144) = 0;
  int v62 = *(unsigned __int16 *)(v4 + 2672);
  *(_DWORD *)(v3 + 144) = v62;
  *(_DWORD *)(v3 + 144) = v62 | (*(_DWORD *)(v4 + 2676) << 16);
  int v63 = *(unsigned __int16 *)(v4 + 2680);
  *(_DWORD *)(v3 + 148) = v63;
  *(_DWORD *)(v3 + 148) = v63 | (*(_DWORD *)(v4 + 2684) << 16);
  time_t v64 = (char *)this + 464;
  for (uint64_t i = 196; i != 224; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i - 28) = 0;
    uint64_t v66 = *((void *)this + 33) + i;
    int v67 = *(_DWORD *)(v66 - 28);
    *(_DWORD *)(v66 - 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i - 28) ^= 0xFFFFFF00;
    uint64_t v68 = *((void *)this + 33) + i;
    int v69 = *(_DWORD *)(v68 - 28);
    *(_DWORD *)(v68 - 28) = v67;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)i - 28, 0, 0xFFFFFFFFLL, 8, v69, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) = *(_DWORD *)(*((void *)this + 33) + i) & 0x800001FF | (((*((_DWORD *)this + 780) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + i + 180) = 0;
    uint64_t v71 = *((void *)this + 33) + i;
    int v72 = *(_DWORD *)(v71 + 180);
    *(_DWORD *)(v71 + 180) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 180) ^= 0x3FFu;
    uint64_t v73 = *((void *)this + 33) + i;
    int v74 = *(_DWORD *)(v73 + 180);
    *(_DWORD *)(v73 + 180) = v72;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)i + 180, 0, 0x3FFFFFFFFFFLL, 32, v74, 4);
      if (result) {
        return result;
      }
    }
    v64 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 224) = 0;
  uint64_t v75 = *((void *)this + 33);
  int v76 = *(_DWORD *)(v75 + 224);
  *(_DWORD *)(v75 + 224) = 0;
  *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFF00;
  uint64_t v77 = *((void *)this + 33);
  int v78 = *(_DWORD *)(v77 + 224);
  *(_DWORD *)(v77 + 224) = v76;
  uint64_t v79 = *((void *)this + 32);
  if (*(void *)(v79 + 5184) || *(_DWORD *)(v79 + 5336) || *(_DWORD *)(v79 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v79 + 5184), 224, 0, 0xFFFFFFFFLL, 8, v78, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 404) = 0;
  uint64_t v80 = *((void *)this + 33);
  int v81 = *(_DWORD *)(v80 + 404);
  *(_DWORD *)(v80 + 404) = 0;
  *(_DWORD *)(*((void *)this + 33) + 404) ^= 0x3FFu;
  uint64_t v82 = *((void *)this + 33);
  int v83 = *(_DWORD *)(v82 + 404);
  *(_DWORD *)(v82 + 404) = v81;
  uint64_t v84 = *((void *)this + 32);
  if (*(void *)(v84 + 5184) || *(_DWORD *)(v84 + 5336) || *(_DWORD *)(v84 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v84 + 5184), 404, 0, 0x3FFFFFFFFFFLL, 32, v83, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 228) = 0;
  *(_DWORD *)(*((void *)this + 33) + 408) = 0;
  if ((*(unsigned char *)(v3 + 50) & 8) != 0)
  {
    uint64_t v85 = *((void *)this + 33);
    uint64_t v86 = *(void *)(*((void *)this + 32) + 2680);
    long long v397 = 0u;
    long long v398 = 0u;
    memset(buf, 0, sizeof(buf));
    int v87 = (*(_DWORD *)(v85 + 16) & 0xF) << 9;
    *(void *)&buf[0] = v86;
    int v88 = *(_DWORD *)(v85 + 228);
    *(_DWORD *)(v85 + 228) = 0;
    *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFF00;
    uint64_t v89 = *((void *)this + 33);
    int v90 = *(_DWORD *)(v89 + 228);
    *(_DWORD *)(v89 + 228) = v88;
    if (v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 228, v87, 0xFFFFFFFFLL, 8, v90, 4);
      if (result) {
        return result;
      }
      uint64_t v91 = *(void *)&buf[0];
      int v92 = DWORD2(v397);
      LODWORD(v86) = HIDWORD(v397);
    }
    else
    {
      int v92 = 0;
      uint64_t v91 = 0;
    }
    *(_DWORD *)(*((void *)this + 33) + 408) = 0;
    uint64_t v93 = *((void *)this + 33);
    int v94 = *(_DWORD *)(v93 + 408);
    *(_DWORD *)(v93 + 408) = 0;
    *(_DWORD *)(*((void *)this + 33) + 408) ^= 0x3FFu;
    uint64_t v95 = *((void *)this + 33);
    int v96 = *(_DWORD *)(v95 + 408);
    *(_DWORD *)(v95 + 408) = v94;
    if (v91 || v92 || v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 408, v87, 0x3FFFFFFFFFFLL, 32, v96, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 280) = 0;
  uint64_t v97 = *((void *)this + 33);
  int v98 = *(_DWORD *)(v97 + 280);
  *(_DWORD *)(v97 + 280) = 0;
  *(_DWORD *)(*((void *)this + 33) + 280) ^= 0xFFFFFF00;
  uint64_t v99 = *((void *)this + 33);
  int v100 = *(_DWORD *)(v99 + 280);
  *(_DWORD *)(v99 + 280) = v98;
  if (*((void *)this + 278) || *((_DWORD *)this + 594) || *((_DWORD *)this + 595))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 280, 0, 0xFFFFFFFFLL, 8, v100, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 460) = 0;
  uint64_t v101 = *((void *)this + 33);
  int v102 = *(_DWORD *)(v101 + 460);
  *(_DWORD *)(v101 + 460) = 0;
  *(_DWORD *)(*((void *)this + 33) + 460) ^= 0x3FFu;
  uint64_t v103 = *((void *)this + 33);
  int v104 = *(_DWORD *)(v103 + 460);
  *(_DWORD *)(v103 + 460) = v102;
  if (*((void *)this + 278) || *((_DWORD *)this + 594) || *((_DWORD *)this + 595))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 460, 0, 0x3FFFFFFFFFFLL, 32, v104, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 232) = 0;
  uint64_t v105 = *((void *)this + 33);
  int v106 = *(_DWORD *)(v105 + 232);
  *(_DWORD *)(v105 + 232) = 0;
  *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFF00;
  uint64_t v107 = *((void *)this + 33);
  int v108 = *(_DWORD *)(v107 + 232);
  *(_DWORD *)(v107 + 232) = v106;
  if (*((void *)this + 234) || *((_DWORD *)this + 506) || *((_DWORD *)this + 507))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 232, 0, 0xFFFFFFFFLL, 8, v108, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 412) = 0;
  uint64_t v109 = *((void *)this + 33);
  int v110 = *(_DWORD *)(v109 + 412);
  *(_DWORD *)(v109 + 412) = 0;
  *(_DWORD *)(*((void *)this + 33) + 412) ^= 0x3FFu;
  uint64_t v111 = *((void *)this + 33);
  int v112 = *(_DWORD *)(v111 + 412);
  *(_DWORD *)(v111 + 412) = v110;
  if (*((void *)this + 234) || *((_DWORD *)this + 506) || *((_DWORD *)this + 507))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 412, 0, 0x3FFFFFFFFFFLL, 32, v112, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 236) = 0;
  uint64_t v113 = *((void *)this + 33);
  int v114 = *(_DWORD *)(v113 + 236);
  *(_DWORD *)(v113 + 236) = 0;
  *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFF00;
  uint64_t v115 = *((void *)this + 33);
  int v116 = *(_DWORD *)(v115 + 236);
  *(_DWORD *)(v115 + 236) = v114;
  if (*((void *)this + 256) || *((_DWORD *)this + 550) || *((_DWORD *)this + 551))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 236, 0, 0xFFFFFFFFLL, 8, v116, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 416) = 0;
  uint64_t v117 = *((void *)this + 33);
  int v118 = *(_DWORD *)(v117 + 416);
  *(_DWORD *)(v117 + 416) = 0;
  *(_DWORD *)(*((void *)this + 33) + 416) ^= 0x3FFu;
  uint64_t v119 = *((void *)this + 33);
  int v120 = *(_DWORD *)(v119 + 416);
  *(_DWORD *)(v119 + 416) = v118;
  if (*((void *)this + 256) || *((_DWORD *)this + 550) || *((_DWORD *)this + 551))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 416, 0, 0x3FFFFFFFFFFLL, 32, v120, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 240) = 0;
  *(_DWORD *)(*((void *)this + 33) + 420) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) = 0;
  uint64_t v121 = *((void *)this + 33);
  int v122 = *(_DWORD *)(v121 + 244);
  *(_DWORD *)(v121 + 244) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFF00;
  uint64_t v123 = *((void *)this + 33);
  int v124 = *(_DWORD *)(v123 + 244);
  *(_DWORD *)(v123 + 244) = v122;
  if (*((void *)this + 300) || *((_DWORD *)this + 638) || *((_DWORD *)this + 639))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 244, 0, 0xFFFFFFFFLL, 8, v124, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 424) = 0;
  uint64_t v125 = *((void *)this + 33);
  int v126 = *(_DWORD *)(v125 + 424);
  *(_DWORD *)(v125 + 424) = 0;
  *(_DWORD *)(*((void *)this + 33) + 424) ^= 0x3FFu;
  uint64_t v127 = *((void *)this + 33);
  int v128 = *(_DWORD *)(v127 + 424);
  *(_DWORD *)(v127 + 424) = v126;
  if (*((void *)this + 300) || *((_DWORD *)this + 638) || *((_DWORD *)this + 639))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 424, 0, 0x3FFFFFFFFFFLL, 32, v128, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 248) = 0;
  uint64_t v129 = *((void *)this + 33);
  int v130 = *(_DWORD *)(v129 + 248);
  *(_DWORD *)(v129 + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFF00;
  uint64_t v131 = *((void *)this + 33);
  int v132 = *(_DWORD *)(v131 + 248);
  *(_DWORD *)(v131 + 248) = v130;
  if (*((void *)this + 322) || *((_DWORD *)this + 682) || *((_DWORD *)this + 683))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 248, 0, 0xFFFFFFFFLL, 8, v132, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 428) = 0;
  uint64_t v133 = *((void *)this + 33);
  int v134 = *(_DWORD *)(v133 + 428);
  *(_DWORD *)(v133 + 428) = 0;
  *(_DWORD *)(*((void *)this + 33) + 428) ^= 0x3FFu;
  uint64_t v135 = *((void *)this + 33);
  int v136 = *(_DWORD *)(v135 + 428);
  *(_DWORD *)(v135 + 428) = v134;
  if (*((void *)this + 322) || *((_DWORD *)this + 682) || *((_DWORD *)this + 683))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 428, 0, 0x3FFFFFFFFFFLL, 32, v136, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 432) = 0;
  uint64_t v137 = *((void *)this + 33);
  int v138 = *(_DWORD *)(v137 + 252);
  *(_DWORD *)(v137 + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFF00;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 252);
  *(_DWORD *)(v139 + 252) = v138;
  if (*((void *)this + 344) || *((_DWORD *)this + 726) || *((_DWORD *)this + 727))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 252, 0, 0xFFFFFFFFLL, 8, v140, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 432);
  *(_DWORD *)(v141 + 432) = 0;
  *(_DWORD *)(*((void *)this + 33) + 432) ^= 0x3FFu;
  uint64_t v143 = *((void *)this + 33);
  int v144 = *(_DWORD *)(v143 + 432);
  *(_DWORD *)(v143 + 432) = v142;
  if (*((void *)this + 344) || *((_DWORD *)this + 726) || *((_DWORD *)this + 727))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 432, 0, 0x3FFFFFFFFFFLL, 32, v144, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 256) = 0;
  uint64_t v145 = *((void *)this + 33);
  int v146 = *(_DWORD *)(v145 + 256);
  *(_DWORD *)(v145 + 256) = 0;
  *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFF00;
  uint64_t v147 = *((void *)this + 33);
  int v148 = *(_DWORD *)(v147 + 256);
  *(_DWORD *)(v147 + 256) = v146;
  if (*((void *)this + 366) || *((_DWORD *)this + 770) || *((_DWORD *)this + 771))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 256, 0, 0xFFFFFFFFLL, 8, v148, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 436) = 0;
  uint64_t v149 = *((void *)this + 33);
  int v150 = *(_DWORD *)(v149 + 436);
  *(_DWORD *)(v149 + 436) = 0;
  *(_DWORD *)(*((void *)this + 33) + 436) ^= 0x3FFu;
  uint64_t v151 = *((void *)this + 33);
  int v152 = *(_DWORD *)(v151 + 436);
  *(_DWORD *)(v151 + 436) = v150;
  if (*((void *)this + 366) || *((_DWORD *)this + 770) || *((_DWORD *)this + 771))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 436, 0, 0x3FFFFFFFFFFLL, 32, v152, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 260) = 0;
  uint64_t v153 = *((void *)this + 33);
  int v154 = *(_DWORD *)(v153 + 260);
  *(_DWORD *)(v153 + 260) = 0;
  *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFF00;
  uint64_t v155 = *((void *)this + 33);
  int v156 = *(_DWORD *)(v155 + 260);
  *(_DWORD *)(v155 + 260) = v154;
  uint64_t v157 = *((void *)this + 32);
  unsigned int v158 = *(_DWORD *)(v157 + 17568);
  uint64_t v159 = v157 + 176 * v158;
  if (*(void *)(v159 + 3072) || *(_DWORD *)(v157 + 176 * v158 + 3224) || *(_DWORD *)(v157 + 176 * v158 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v159 + 3072), 260, 0, 0xFFFFFFFFLL, 8, v156, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 440) = 0;
  uint64_t v160 = *((void *)this + 33);
  int v161 = *(_DWORD *)(v160 + 440);
  *(_DWORD *)(v160 + 440) = 0;
  *(_DWORD *)(*((void *)this + 33) + 440) ^= 0x3FFu;
  uint64_t v162 = *((void *)this + 33);
  int v163 = *(_DWORD *)(v162 + 440);
  *(_DWORD *)(v162 + 440) = v161;
  uint64_t v164 = *((void *)this + 32);
  unsigned int v165 = *(_DWORD *)(v164 + 17568);
  uint64_t v166 = v164 + 176 * v165;
  if (*(void *)(v166 + 3072) || *(_DWORD *)(v164 + 176 * v165 + 3224) || *(_DWORD *)(v164 + 176 * v165 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v166 + 3072), 440, 0, 0x3FFFFFFFFFFLL, 32, v163, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 264) = 0;
  uint64_t v167 = *((void *)this + 33);
  int v168 = *(_DWORD *)(v167 + 264);
  *(_DWORD *)(v167 + 264) = 0;
  *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFF00;
  uint64_t v169 = *((void *)this + 33);
  int v170 = *(_DWORD *)(v169 + 264);
  *(_DWORD *)(v169 + 264) = v168;
  uint64_t v171 = *((void *)this + 32);
  int v172 = *(_DWORD *)(v171 + 5724);
  uint64_t v173 = v171 + 176 * v172;
  if (*(void *)(v173 + 3776) || *(_DWORD *)(v171 + 176 * v172 + 3928) || *(_DWORD *)(v171 + 176 * v172 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v173 + 3776), 264, 0, 0xFFFFFFFFLL, 8, v170, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 444) = 0;
  uint64_t v174 = *((void *)this + 33);
  int v175 = *(_DWORD *)(v174 + 444);
  *(_DWORD *)(v174 + 444) = 0;
  *(_DWORD *)(*((void *)this + 33) + 444) ^= 0x3FFu;
  uint64_t v176 = *((void *)this + 33);
  int v177 = *(_DWORD *)(v176 + 444);
  *(_DWORD *)(v176 + 444) = v175;
  uint64_t v178 = *((void *)this + 32);
  int v179 = *(_DWORD *)(v178 + 5724);
  uint64_t v180 = v178 + 176 * v179;
  if (*(void *)(v180 + 3776) || *(_DWORD *)(v178 + 176 * v179 + 3928) || *(_DWORD *)(v178 + 176 * v179 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v180 + 3776), 444, 0, 0x3FFFFFFFFFFLL, 32, v177, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 268) = 0;
  uint64_t v181 = *((void *)this + 33);
  int v182 = *(_DWORD *)(v181 + 268);
  *(_DWORD *)(v181 + 268) = 0;
  *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFF00;
  uint64_t v183 = *((void *)this + 33);
  int v184 = *(_DWORD *)(v183 + 268);
  *(_DWORD *)(v183 + 268) = v182;
  uint64_t v185 = *((void *)this + 32);
  int v186 = *(_DWORD *)(v185 + 5720);
  uint64_t v187 = v185 + 176 * v186;
  if (*(void *)(v187 + 3776) || *(_DWORD *)(v185 + 176 * v186 + 3928) || *(_DWORD *)(v185 + 176 * v186 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v187 + 3776), 268, 0, 0xFFFFFFFFLL, 8, v184, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 448) = 0;
  uint64_t v188 = *((void *)this + 33);
  int v189 = *(_DWORD *)(v188 + 448);
  *(_DWORD *)(v188 + 448) = 0;
  *(_DWORD *)(*((void *)this + 33) + 448) ^= 0x3FFu;
  uint64_t v190 = *((void *)this + 33);
  int v191 = *(_DWORD *)(v190 + 448);
  *(_DWORD *)(v190 + 448) = v189;
  uint64_t v192 = *((void *)this + 32);
  int v193 = *(_DWORD *)(v192 + 5720);
  uint64_t v194 = v192 + 176 * v193;
  if (*(void *)(v194 + 3776) || *(_DWORD *)(v192 + 176 * v193 + 3928) || *(_DWORD *)(v192 + 176 * v193 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v194 + 3776), 448, 0, 0x3FFFFFFFFFFLL, 32, v191, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 272) = 0;
  uint64_t v195 = *((void *)this + 33);
  int v196 = *(_DWORD *)(v195 + 272);
  *(_DWORD *)(v195 + 272) = 0;
  *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFF00;
  uint64_t v197 = *((void *)this + 33);
  int v198 = *(_DWORD *)(v197 + 272);
  *(_DWORD *)(v197 + 272) = v196;
  uint64_t v199 = *((void *)this + 32);
  int v200 = *(_DWORD *)(v199 + 5716);
  uint64_t v201 = v199 + 176 * v200;
  if (*(void *)(v201 + 5360) || *(_DWORD *)(v199 + 176 * v200 + 5512) || *(_DWORD *)(v199 + 176 * v200 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v201 + 5360), 272, 0, 0xFFFFFFFFLL, 8, v198, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 452) = 0;
  uint64_t v202 = *((void *)this + 33);
  int v203 = *(_DWORD *)(v202 + 452);
  *(_DWORD *)(v202 + 452) = 0;
  *(_DWORD *)(*((void *)this + 33) + 452) ^= 0x3FFu;
  uint64_t v204 = *((void *)this + 33);
  int v205 = *(_DWORD *)(v204 + 452);
  *(_DWORD *)(v204 + 452) = v203;
  uint64_t v206 = *((void *)this + 32);
  int v207 = *(_DWORD *)(v206 + 5716);
  uint64_t v208 = v206 + 176 * v207;
  if (*(void *)(v208 + 5360) || *(_DWORD *)(v206 + 176 * v207 + 5512) || *(_DWORD *)(v206 + 176 * v207 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v208 + 5360), 452, 0, 0x3FFFFFFFFFFLL, 32, v205, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 276) = 0;
  uint64_t v209 = *((void *)this + 33);
  int v210 = *(_DWORD *)(v209 + 276);
  *(_DWORD *)(v209 + 276) = 0;
  *(_DWORD *)(*((void *)this + 33) + 276) ^= 0xFFFFFF00;
  uint64_t v211 = *((void *)this + 33);
  int v212 = *(_DWORD *)(v211 + 276);
  *(_DWORD *)(v211 + 276) = v210;
  uint64_t v213 = *((void *)this + 32);
  int v214 = *(_DWORD *)(v213 + 5712);
  uint64_t v215 = v213 + 176 * v214;
  if (*(void *)(v215 + 5360) || *(_DWORD *)(v213 + 176 * v214 + 5512) || *(_DWORD *)(v213 + 176 * v214 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v215 + 5360), 276, 0, 0xFFFFFFFFLL, 8, v212, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 456) = 0;
  uint64_t v216 = *((void *)this + 33);
  int v217 = *(_DWORD *)(v216 + 456);
  *(_DWORD *)(v216 + 456) = 0;
  *(_DWORD *)(*((void *)this + 33) + 456) ^= 0x3FFu;
  uint64_t v218 = *((void *)this + 33);
  int v219 = *(_DWORD *)(v218 + 456);
  *(_DWORD *)(v218 + 456) = v217;
  uint64_t v220 = *((void *)this + 32);
  int v221 = *(_DWORD *)(v220 + 5712);
  uint64_t v222 = v220 + 176 * v221;
  if (*(void *)(v222 + 5360) || *(_DWORD *)(v220 + 176 * v221 + 5512) || *(_DWORD *)(v220 + 176 * v221 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v222 + 5360), 456, 0, 0x3FFFFFFFFFFLL, 32, v219, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 464) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 468) = 0;
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 472) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 476) = 0;
  uint64_t v223 = *((void *)this + 33);
  int v224 = *(_DWORD *)(v223 + 288);
  *(_DWORD *)(v223 + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) ^= 0xFFFFFF80;
  uint64_t v225 = *((void *)this + 33);
  int v226 = *(_DWORD *)(v225 + 288);
  *(_DWORD *)(v225 + 288) = v224;
  uint64_t v227 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v227 || *(_DWORD *)(v227 + 152) || *(_DWORD *)(v227 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v227, 288, *(_DWORD *)(v227 + 52), 0xFFFFFFFFLL, 7, v226, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v228 = *((void *)this + 33);
  int v229 = *(_DWORD *)(v228 + 468);
  *(_DWORD *)(v228 + 468) = 0;
  *(_DWORD *)(*((void *)this + 33) + 468) ^= 0x3FFu;
  uint64_t v230 = *((void *)this + 33);
  int v231 = *(_DWORD *)(v230 + 468);
  *(_DWORD *)(v230 + 468) = v229;
  uint64_t v232 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v232 || *(_DWORD *)(v232 + 152) || *(_DWORD *)(v232 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v232, 468, *(_DWORD *)(v232 + 52), 0x3FFFFFFFFFFLL, 32, v231, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v233 = *((void *)this + 33);
  int v234 = *(_DWORD *)(v233 + 296);
  *(_DWORD *)(v233 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0xFFFFFF80;
  uint64_t v235 = *((void *)this + 33);
  int v236 = *(_DWORD *)(v235 + 296);
  *(_DWORD *)(v235 + 296) = v234;
  uint64_t v237 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v237 || *(_DWORD *)(v237 + 152) || *(_DWORD *)(v237 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v237, 296, *(_DWORD *)(v237 + 56), 0xFFFFFFFFLL, 7, v236, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v238 = v3;
  uint64_t v239 = *((void *)this + 33);
  int v240 = *(_DWORD *)(v239 + 476);
  *(_DWORD *)(v239 + 476) = 0;
  *(_DWORD *)(*((void *)this + 33) + 476) ^= 0x3FFu;
  uint64_t v241 = *((void *)this + 33);
  int v242 = *(_DWORD *)(v241 + 476);
  *(_DWORD *)(v241 + 476) = v240;
  uint64_t v243 = *((void *)this + 32);
  uint64_t v244 = *(void *)(v243 + 376 * v6 + 5736);
  if (*(void *)v244 || *(_DWORD *)(v244 + 152) || *(_DWORD *)(v244 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v244, 476, *(_DWORD *)(v244 + 56), 0x3FFFFFFFFFFLL, 32, v242, 4);
    if (result) {
      return result;
    }
    uint64_t v243 = *((void *)this + 32);
  }
  int v245 = *(_DWORD *)(v243 + 2648);
  uint64_t v246 = *((void *)this + 33);
  int v247 = *(_DWORD *)(v246 + 284);
  *(_DWORD *)(v246 + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 284) ^= 0xFFFFFF80;
  uint64_t v248 = *((void *)this + 33);
  int v249 = *(_DWORD *)(v248 + 284);
  *(_DWORD *)(v248 + 284) = v247;
  uint64_t v250 = *((void *)this + 32);
  if (v245 == 1)
  {
    uint64_t v251 = *(void *)(v250 + 376 * v6 + 5736);
    if (*(void *)v251 || *(_DWORD *)(v251 + 152) || *(_DWORD *)(v251 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v251, 284, *(_DWORD *)(v251 + 64), 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v252 = *((void *)this + 33);
    int v253 = *(_DWORD *)(v252 + 464);
    *(_DWORD *)(v252 + 464) = 0;
    *(_DWORD *)(*((void *)this + 33) + 464) ^= 0x3FFu;
    uint64_t v254 = *((void *)this + 33);
    int v255 = *(_DWORD *)(v254 + 464);
    *(_DWORD *)(v254 + 464) = v253;
    uint64_t v256 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v256 || *(_DWORD *)(v256 + 152) || *(_DWORD *)(v256 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v256, 464, *(_DWORD *)(v256 + 64), 0x3FFFFFFFFFFLL, 32, v255, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v257 = *((void *)this + 33);
    int v258 = *(_DWORD *)(v257 + 292);
    *(_DWORD *)(v257 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF80;
    uint64_t v259 = *((void *)this + 33);
    int v260 = *(_DWORD *)(v259 + 292);
    *(_DWORD *)(v259 + 292) = v258;
    uint64_t v261 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v261 || *(_DWORD *)(v261 + 152) || *(_DWORD *)(v261 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v261, 292, *(_DWORD *)(v261 + 68), 0xFFFFFFFFLL, 7, v260, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v262 = *((void *)this + 33);
    int v263 = *(_DWORD *)(v262 + 472);
    *(_DWORD *)(v262 + 472) = 0;
    *(_DWORD *)(*((void *)this + 33) + 472) ^= 0x3FFu;
    uint64_t v264 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v264 + 472);
    *(_DWORD *)(v264 + 472) = v263;
    uint64_t v266 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v266 || *(_DWORD *)(v266 + 152) || *(_DWORD *)(v266 + 156))
    {
      int v267 = *(_DWORD *)(v266 + 68);
      int v268 = this;
      goto LABEL_207;
    }
  }
  else
  {
    uint64_t v269 = v250 + 376 * v6;
    if (*(void *)(v269 + 5752) || *(_DWORD *)(v250 + 376 * v6 + 5904) || *(_DWORD *)(v250 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v269 + 5752), 284, 0, 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v270 = *((void *)this + 33);
    int v271 = *(_DWORD *)(v270 + 464);
    *(_DWORD *)(v270 + 464) = 0;
    *(_DWORD *)(*((void *)this + 33) + 464) ^= 0x3FFu;
    uint64_t v272 = *((void *)this + 33);
    int v273 = *(_DWORD *)(v272 + 464);
    *(_DWORD *)(v272 + 464) = v271;
    uint64_t v274 = *((void *)this + 32);
    uint64_t v275 = v274 + 376 * v6;
    if (*(void *)(v275 + 5752) || *(_DWORD *)(v274 + 376 * v6 + 5904) || *(_DWORD *)(v274 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v275 + 5752), 464, 0, 0x3FFFFFFFFFFLL, 32, v273, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v276 = *((void *)this + 33);
    int v277 = *(_DWORD *)(v276 + 292);
    *(_DWORD *)(v276 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF80;
    uint64_t v278 = *((void *)this + 33);
    int v279 = *(_DWORD *)(v278 + 292);
    *(_DWORD *)(v278 + 292) = v277;
    uint64_t v280 = *((void *)this + 32);
    uint64_t v281 = v280 + 376 * v6;
    if (*(void *)(v281 + 5928) || *(_DWORD *)(v280 + 376 * v6 + 6080) || *(_DWORD *)(v280 + 376 * v6 + 6084))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v281 + 5928), 292, 0, 0xFFFFFFFFLL, 7, v279, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v282 = *((void *)this + 33);
    int v283 = *(_DWORD *)(v282 + 472);
    *(_DWORD *)(v282 + 472) = 0;
    *(_DWORD *)(*((void *)this + 33) + 472) ^= 0x3FFu;
    uint64_t v284 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v284 + 472);
    *(_DWORD *)(v284 + 472) = v283;
    uint64_t v285 = *((void *)this + 32);
    uint64_t v286 = v285 + 376 * v6;
    if (*(void *)(v286 + 5928) || *(_DWORD *)(v285 + 376 * v6 + 6080) || *(_DWORD *)(v285 + 376 * v6 + 6084))
    {
      uint64_t v266 = v286 + 5928;
      int v268 = this;
      int v267 = 0;
LABEL_207:
      uint64_t result = CAHDec::addToPatcherList((uint64_t)v268, (void *)v266, 472, v267, 0x3FFFFFFFFFFLL, 32, v265, 4);
      if (result) {
        return result;
      }
    }
  }
  if (!v388)
  {
    uint64_t v319 = 0;
    uint64_t v320 = 17424;
    do
    {
      uint64_t v321 = *(void *)(*(void *)(*((void *)this + 32) + v320) + 40);
      *(_DWORD *)(*((void *)this + 33) + v319 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 480) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 492) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 336) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 504) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 516) = 0;
      uint64_t v322 = *((void *)this + 33) + v319;
      int v323 = *(_DWORD *)(v322 + 324);
      *(_DWORD *)(v322 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 324) ^= 0xFFFFFF80;
      uint64_t v324 = *((void *)this + 33) + v319;
      int v325 = *(_DWORD *)(v324 + 324);
      *(_DWORD *)(v324 + 324) = v323;
      uint64_t v326 = *(void *)(v321 + 8);
      if (*(void *)v326 || *(_DWORD *)(v326 + 152) || *(_DWORD *)(v326 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v326, (int)v319 + 324, *(_DWORD *)(v326 + 52), 0xFFFFFFFFLL, 7, v325, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v327 = *((void *)this + 33) + v319;
      int v328 = *(_DWORD *)(v327 + 492);
      *(_DWORD *)(v327 + 492) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 492) ^= 0x3FFu;
      uint64_t v329 = *((void *)this + 33) + v319;
      int v330 = *(_DWORD *)(v329 + 492);
      *(_DWORD *)(v329 + 492) = v328;
      uint64_t v331 = *(void *)(v321 + 8);
      if (*(void *)v331 || *(_DWORD *)(v331 + 152) || *(_DWORD *)(v331 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v331, (int)v319 + 492, *(_DWORD *)(v331 + 52), 0x3FFFFFFFFFFLL, 32, v330, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v332 = *((void *)this + 33) + v319;
      int v333 = *(_DWORD *)(v332 + 348);
      *(_DWORD *)(v332 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 348) ^= 0xFFFFFF80;
      uint64_t v334 = *((void *)this + 33) + v319;
      int v335 = *(_DWORD *)(v334 + 348);
      *(_DWORD *)(v334 + 348) = v333;
      uint64_t v336 = *(void *)(v321 + 8);
      if (*(void *)v336 || *(_DWORD *)(v336 + 152) || *(_DWORD *)(v336 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v336, (int)v319 + 348, *(_DWORD *)(v336 + 56), 0xFFFFFFFFLL, 7, v335, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v337 = *((void *)this + 33) + v319;
      int v338 = *(_DWORD *)(v337 + 516);
      *(_DWORD *)(v337 + 516) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 516) ^= 0x3FFu;
      uint64_t v339 = *((void *)this + 33) + v319;
      int v340 = *(_DWORD *)(v339 + 516);
      *(_DWORD *)(v339 + 516) = v338;
      uint64_t v341 = *(void *)(v321 + 8);
      if (*(void *)v341 || *(_DWORD *)(v341 + 152) || *(_DWORD *)(v341 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v341, (int)v319 + 516, *(_DWORD *)(v341 + 56), 0x3FFFFFFFFFFLL, 32, v340, 4);
        if (result) {
          return result;
        }
      }
      int v342 = *(_DWORD *)(*((void *)this + 32) + 2648);
      uint64_t v343 = *((void *)this + 33) + v319;
      int v344 = *(_DWORD *)(v343 + 312);
      *(_DWORD *)(v343 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 312) ^= 0xFFFFFF80;
      uint64_t v345 = *((void *)this + 33) + v319;
      int v346 = *(_DWORD *)(v345 + 312);
      *(_DWORD *)(v345 + 312) = v344;
      if (v342 == 1)
      {
        uint64_t v347 = *(void *)(v321 + 8);
        if (*(void *)v347 || *(_DWORD *)(v347 + 152) || *(_DWORD *)(v347 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v347, (int)v319 + 312, *(_DWORD *)(v347 + 64), 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v348 = *((void *)this + 33) + v319;
        int v349 = *(_DWORD *)(v348 + 480);
        *(_DWORD *)(v348 + 480) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 480) ^= 0x3FFu;
        uint64_t v350 = *((void *)this + 33) + v319;
        int v351 = *(_DWORD *)(v350 + 480);
        *(_DWORD *)(v350 + 480) = v349;
        uint64_t v352 = *(void *)(v321 + 8);
        if (*(void *)v352 || *(_DWORD *)(v352 + 152) || *(_DWORD *)(v352 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v352, (int)v319 + 480, *(_DWORD *)(v352 + 64), 0x3FFFFFFFFFFLL, 32, v351, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v353 = *((void *)this + 33) + v319;
        int v354 = *(_DWORD *)(v353 + 336);
        *(_DWORD *)(v353 + 336) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 336) ^= 0xFFFFFF80;
        uint64_t v355 = *((void *)this + 33) + v319;
        int v356 = *(_DWORD *)(v355 + 336);
        *(_DWORD *)(v355 + 336) = v354;
        uint64_t v357 = *(void *)(v321 + 8);
        if (*(void *)v357 || *(_DWORD *)(v357 + 152) || *(_DWORD *)(v357 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v357, (int)v319 + 336, *(_DWORD *)(v357 + 68), 0xFFFFFFFFLL, 7, v356, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v358 = *((void *)this + 33) + v319;
        int v359 = *(_DWORD *)(v358 + 504);
        *(_DWORD *)(v358 + 504) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 504) ^= 0x3FFu;
        uint64_t v360 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v360 + 504);
        *(_DWORD *)(v360 + 504) = v359;
        uint64_t v362 = *(void *)(v321 + 8);
        if (*(void *)v362 || *(_DWORD *)(v362 + 152) || *(_DWORD *)(v362 + 156))
        {
          int v363 = *(_DWORD *)(v362 + 68);
          int v364 = v319 + 504;
          int v365 = this;
          goto LABEL_298;
        }
      }
      else
      {
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 312, 0, 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v366 = *((void *)this + 33) + v319;
        int v367 = *(_DWORD *)(v366 + 480);
        *(_DWORD *)(v366 + 480) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 480) ^= 0x3FFu;
        uint64_t v368 = *((void *)this + 33) + v319;
        int v369 = *(_DWORD *)(v368 + 480);
        *(_DWORD *)(v368 + 480) = v367;
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 480, 0, 0x3FFFFFFFFFFLL, 32, v369, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v370 = *((void *)this + 33) + v319;
        int v371 = *(_DWORD *)(v370 + 336);
        *(_DWORD *)(v370 + 336) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 336) ^= 0xFFFFFF80;
        uint64_t v372 = *((void *)this + 33) + v319;
        int v373 = *(_DWORD *)(v372 + 336);
        *(_DWORD *)(v372 + 336) = v371;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 200), (int)v319 + 336, 0, 0xFFFFFFFFLL, 7, v373, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v374 = *((void *)this + 33) + v319;
        int v375 = *(_DWORD *)(v374 + 504);
        *(_DWORD *)(v374 + 504) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 504) ^= 0x3FFu;
        uint64_t v376 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v376 + 504);
        *(_DWORD *)(v376 + 504) = v375;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          int v364 = v319 + 504;
          int v365 = this;
          uint64_t v362 = v321 + 200;
          int v363 = 0;
LABEL_298:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v365, (void *)v362, v364, v363, 0x3FFFFFFFFFFLL, 32, v361, 4);
          if (result) {
            return result;
          }
        }
      }
      v320 += 8;
      v319 += 4;
    }
    while (v319 != 12);
  }
  unsigned int v287 = subWidth[*(int *)(*(void *)(*((void *)this + 32) + 17560) + 4)];
  *(_DWORD *)(*((void *)this + 33) + 360) = 0;
  *(_DWORD *)(*((void *)this + 33) + 528) = 0;
  *(_DWORD *)(*((void *)this + 33) + 364) = 0;
  *(_DWORD *)(*((void *)this + 33) + 532) = 0;
  *(_DWORD *)(*((void *)this + 33) + 368) = 0;
  *(_DWORD *)(*((void *)this + 33) + 372) = 0;
  if (!*(_DWORD *)(*((void *)this + 32) + 2644)) {
    goto LABEL_230;
  }
  uint64_t v288 = *((void *)this + 33);
  int v289 = *(_DWORD *)(v288 + 360);
  *(_DWORD *)(v288 + 360) = 0;
  *(_DWORD *)(*((void *)this + 33) + 360) ^= 0xFFFFFFC0;
  uint64_t v290 = *((void *)this + 33);
  int v291 = *(_DWORD *)(v290 + 360);
  *(_DWORD *)(v290 + 360) = v289;
  uint64_t v292 = *(void *)(*((void *)this + 32) + 11768);
  if (!*(void *)v292 && !*(_DWORD *)(v292 + 152) && !*(_DWORD *)(v292 + 156)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v292, 360, *(_DWORD *)(v292 + 52), 0xFFFFFFFFLL, 6, v291, 4), !result))
  {
    uint64_t v293 = *((void *)this + 33);
    int v294 = *(_DWORD *)(v293 + 528);
    *(_DWORD *)(v293 + 528) = 0;
    *(_DWORD *)(*((void *)this + 33) + 528) ^= 0x3FFu;
    uint64_t v295 = *((void *)this + 33);
    int v296 = *(_DWORD *)(v295 + 528);
    *(_DWORD *)(v295 + 528) = v294;
    uint64_t v297 = *(void *)(*((void *)this + 32) + 11768);
    if (!*(void *)v297 && !*(_DWORD *)(v297 + 152) && !*(_DWORD *)(v297 + 156)) {
      goto LABEL_330;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v297, 528, *(_DWORD *)(v297 + 52), 0x3FFFFFFFFFFLL, 32, v296, 4);
    if (!result)
    {
LABEL_330:
      uint64_t v298 = *((void *)this + 33);
      int v299 = *(_DWORD *)(v298 + 364);
      *(_DWORD *)(v298 + 364) = 0;
      *(_DWORD *)(*((void *)this + 33) + 364) ^= 0xFFFFFFC0;
      uint64_t v300 = *((void *)this + 33);
      int v301 = *(_DWORD *)(v300 + 364);
      *(_DWORD *)(v300 + 364) = v299;
      uint64_t v302 = *(void *)(*((void *)this + 32) + 11768);
      if (!*(void *)v302 && !*(_DWORD *)(v302 + 152) && !*(_DWORD *)(v302 + 156)) {
        goto LABEL_222;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v302, 364, *(_DWORD *)(v302 + 56), 0xFFFFFFFFLL, 6, v301, 4);
      if (!result)
      {
LABEL_222:
        uint64_t v303 = *((void *)this + 33);
        int v304 = *(_DWORD *)(v303 + 532);
        *(_DWORD *)(v303 + 532) = 0;
        *(_DWORD *)(*((void *)this + 33) + 532) ^= 0x3FFu;
        uint64_t v305 = *((void *)this + 33);
        int v306 = *(_DWORD *)(v305 + 532);
        *(_DWORD *)(v305 + 532) = v304;
        uint64_t v307 = *((void *)this + 32);
        uint64_t v308 = *(void *)(v307 + 11768);
        if (!*(void *)v308 && !*(_DWORD *)(v308 + 152) && !*(_DWORD *)(v308 + 156)) {
          goto LABEL_227;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v308, 532, *(_DWORD *)(v308 + 56), 0x3FFFFFFFFFFLL, 32, v306, 4);
        if (!result)
        {
          uint64_t v307 = *((void *)this + 32);
LABEL_227:
          if (*(unsigned char *)(v307 + 8))
          {
            *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33) + 368) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(v307 + 11768) + 76) >> 6) & 0xFFF) << 6);
            int v309 = (_DWORD *)(*(void *)(*((void *)this + 32) + 11768) + 80);
          }
          else
          {
            if (CAHDecThymeLgh::getSWRStride(this, *(unsigned __int16 *)(v238 + 148) + 1, *(unsigned __int8 *)(v395 + 105) - 8, *(unsigned __int8 *)(v395 + 105) - 8, v287))return 0xFFFFFFFFLL; {
            *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33) + 368) & 0xFFFC003F | (((*((_DWORD *)this + 783) >> 6) & 0xFFF) << 6);
            }
            int v309 = (_DWORD *)((char *)this + 3136);
          }
          *(_DWORD *)(*((void *)this + 33) + 372) = *(_DWORD *)(*((void *)this + 33) + 372) & 0xFFF8003F | (((*v309 >> 6) & 0x1FFF) << 6);
LABEL_230:
          if (v390 < 2)
          {
            uint64_t v310 = *((void *)this + 33);
            *(_DWORD *)(v310 + 536) = 65537;
            *(_WORD *)(v310 + 540) = 0;
            *(_WORD *)(v310 + 542) = *(_DWORD *)(v395 + 108) >> 6;
            *(_WORD *)(v310 + 670) = 0;
            *(_WORD *)(v310 + 672) = *(_DWORD *)(v395 + 112) >> 6;
            uint64_t v311 = *((void *)this + 32);
          }
          else
          {
            uint64_t v310 = *((void *)this + 33);
            *(_WORD *)(v310 + 536) = v394;
            uint64_t v311 = *((void *)this + 32);
            if (v391 != 31)
            {
              if (v392 <= 1) {
                uint64_t v312 = 1;
              }
              else {
                uint64_t v312 = v392;
              }
              uint64_t v313 = (unsigned char *)(*(void *)(v311 + 17560) + 2786);
              do
              {
                if (!*v313) {
                  *(_WORD *)(v310 + 2 * v389 + 670) = *(_DWORD *)(v313 - 26) >> 3;
                }
                v313 += 1792;
                --v312;
              }
              while (v312);
            }
            *(_WORD *)(v310 + 538) = v392;
            if (v393 != 31)
            {
              uint64_t v314 = *(void *)(v311 + 17560);
              if (v394 <= 1) {
                uint64_t v315 = 1;
              }
              else {
                uint64_t v315 = v394;
              }
              int v316 = (unsigned __int8 *)(v314 + 2786);
              uint64_t v317 = (unsigned __int8 *)(v314 + 2786);
              do
              {
                int v318 = *v317;
                v317 += 28;
                if (!v318) {
                  *(_WORD *)(v310 + 2 * v389 + 540) = *(_DWORD *)(v316 - 18) >> 3;
                }
                int v316 = v317;
                --v315;
              }
              while (v315);
            }
          }
          if (*(_DWORD *)(v311 + 2360) == 1)
          {
            *(_DWORD *)(v310 + 684) = *(_DWORD *)(v310 + 684) & 0xFFFFFFFE | *(_DWORD *)(v311 + 2508) & 1;
            if (*(_DWORD *)(v311 + 2508))
            {
              *(_DWORD *)(v310 + 692) = 0x10000000;
              *(_DWORD *)(v310 + 696) = *(_DWORD *)(v311 + 2368);
              *(void *)(v310 + 704) = 0;
              *(_DWORD *)(v310 + 700) = 0;
              *(_OWORD *)(v310 + 712) = *(_OWORD *)(v311 + 2372);
              long long v377 = *(_OWORD *)(v311 + 2388);
              *(_OWORD *)(v310 + 744) = *(_OWORD *)(v311 + 2404);
              *(_OWORD *)(v310 + 728) = v377;
            }
            *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v311 + 2512) & 1));
            if (*(_DWORD *)(v311 + 2512))
            {
              *(_DWORD *)(v310 + 760) = 0;
              if (!*(_DWORD *)(v311 + 2424))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0]) = 136315138;
                  *(void *)((char *)buf + 4) = "populatePictureRegisters";
                  int v386 = &_os_log_internal;
                  uint64_t v387 = "AppleAVD: %s(): H13A descrambler is not supported\n";
                  goto LABEL_324;
                }
                return 0xFFFFFFFFLL;
              }
              *(_DWORD *)(v311 + 2640) = 0;
              int v378 = *(_DWORD *)(v310 + 760) & 0xF7FFFFF | ((*(_DWORD *)(v311 + 2420) & 1) << 23) | 0x20000000;
              *(_DWORD *)(v310 + 760) = v378;
              *(_DWORD *)(v310 + 760) = v378 & 0xFFC00000 | (*(_DWORD *)(v311 + 2364) == 0);
              long long v379 = *(_OWORD *)(v311 + 2428);
              long long v380 = *(_OWORD *)(v311 + 2444);
              *(_OWORD *)(v310 + 796) = *(_OWORD *)(v311 + 2460);
              *(_OWORD *)(v310 + 780) = v380;
              *(_OWORD *)(v310 + 764) = v379;
            }
            *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v311 + 2516) & 1));
            *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v311 + 2520) & 1));
            *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v311 + 2524) & 1));
            if (*(_DWORD *)(v311 + 2516))
            {
              *(_DWORD *)(v310 + 920) = 0;
              if (*(_DWORD *)(v311 + 2476) == 2) {
                int v381 = 805306368;
              }
              else {
                int v381 = 813694976;
              }
              *(_DWORD *)(v310 + 920) = v381;
              memcpy((void *)(v310 + 924), (const void *)(v311 + 2480), 4 * *(unsigned int *)(v311 + 2476));
              *(_DWORD *)(v311 + 2516) = 0;
            }
            *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFDF | (32 * (*(_DWORD *)(v311 + 2632) & 1));
            if (*(_DWORD *)(v311 + 2632))
            {
              *(_DWORD *)(v310 + 812) = 0x80000000;
              unsigned int v382 = ((*(_DWORD *)(v311 + 2528) & 1) << 27) | 0x80000000;
              *(_DWORD *)(v310 + 812) = v382;
              *(_DWORD *)(v310 + 812) = v382 | (((2 * *(_DWORD *)(v311 + 2528)) & 4 | (*(_DWORD *)(v311 + 2528) >> 1) & 2 | (*(_DWORD *)(v311 + 2528) >> 3) & 1) << 24);
              long long v383 = *(_OWORD *)(v311 + 2532);
              long long v384 = *(_OWORD *)(v311 + 2564);
              *(_OWORD *)(v310 + 832) = *(_OWORD *)(v311 + 2548);
              *(_OWORD *)(v310 + 848) = v384;
              *(_OWORD *)(v310 + 816) = v383;
              *(void *)(v310 + 864) = *(void *)(v311 + 2580);
              *(void *)(v310 + 872) = *(void *)(v311 + 2588);
              int v385 = *(_DWORD *)(v311 + 2528);
              if ((v385 & 6) != 0 && (v385 & 8) == 0)
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0]) = 136315138;
                  *(void *)((char *)buf + 4) = "populatePictureRegisters";
                  int v386 = &_os_log_internal;
                  uint64_t v387 = "AppleAVD: %s(): chip id is not used while ecid and/or board id is used\n";
LABEL_324:
                  _os_log_impl(&dword_223977000, v386, OS_LOG_TYPE_DEFAULT, v387, (uint8_t *)buf, 0xCu);
                  return 0xFFFFFFFFLL;
                }
                return 0xFFFFFFFFLL;
              }
              *(_OWORD *)(v310 + 880) = *(_OWORD *)(v311 + 2596);
            }
            *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFBF | ((*(_DWORD *)(v311 + 2636) & 1) << 6);
            if (*(_DWORD *)(v311 + 2636))
            {
              uint64_t result = 0;
              *(_DWORD *)(v310 + 896) = -1879048192;
              *(_DWORD *)(v310 + 896) = ((*(_DWORD *)(v311 + 2612) & 1) << 23) | 0x90000000;
              *(_OWORD *)(v310 + 900) = *(_OWORD *)(v311 + 2616);
              *(_DWORD *)(v311 + 2640) = 1;
              return result;
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecThymeLgh::getSWRStride(CAHDecThymeLgh *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *(void *)((char *)this + 3132) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 784) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        unsigned int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecThymeLgh::getTileStartCTU(CAHDecThymeLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 536);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecThymeLgh::getTileEndCTU(CAHDecThymeLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 536);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecThymeLgh::populateAvdWork(CAHDecThymeLgh *this)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  unint64_t v3 = *(unsigned int *)(v2 + 312);
  if (v3)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    LODWORD(v7) = 0;
    int v8 = 0;
    uint64_t v9 = v1 + 4012;
    uint64_t v39 = *(void *)(v2 + 16);
    unint64_t v40 = 0;
    unint64_t v10 = *(unsigned int *)(v2 + 316);
    unint64_t v11 = v10;
    uint64_t v37 = v9;
    uint64_t v38 = *(void *)(*((void *)this + 32) + 17560);
    do
    {
      uint64_t v36 = v5;
      if (v11)
      {
        unint64_t v12 = 0;
        do
        {
          uint64_t v13 = *((void *)this + 32);
          uint64_t v14 = *(void *)(v13 + 17560);
          uint64_t v15 = v14 + v5;
          if (!*(unsigned char *)(v14 + v5 + 2786))
          {
            *(_WORD *)(v9 + 4) = v8;
            *(_WORD *)(v9 + 6) = 0;
            *(_WORD *)(v9 + 10) = v6;
            int v41 = v6;
            int v42 = v8;
            if (*(unsigned char *)(v13 + 2834)) {
              uint64_t v16 = *(void *)(v13 + 2840);
            }
            else {
              uint64_t v16 = *(void *)(v13 + 1048) + 8;
            }
            unint64_t v17 = v39 + *(unsigned int *)(v15 + 2780) - *(void *)v16;
            int v18 = 36 * v7;
            unint64_t v19 = HIDWORD(v17);
            if (*(void *)v16 || *(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1161;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 4030, v17, 0x3FFFFFFFFFFLL, 32, -1, 2);
              if (result) {
                return result;
              }
              if (*(void *)v16) {
                goto LABEL_46;
              }
            }
            if (*(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
LABEL_46:
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1162;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 4032, v17, 0xFFFFFFFFLL, 0, -1, 4);
              if (result) {
                return result;
              }
            }
            unsigned int v21 = (_DWORD *)(v14 + v5);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v14 + v5 + 2776);
            int v22 = *(_DWORD *)(v15 + 2760);
            int v23 = v22 + 7;
            if (v22 >= 0) {
              int v23 = *(_DWORD *)(v15 + 2760);
            }
            int v24 = v21[692];
            *(_DWORD *)(v9 + 28) = (v23 << 13) & 0xFFFF0000 | (v24 / 8);
            int v25 = v21[691];
            int v27 = v25 - 1;
            BOOL v26 = v25 < 1;
            int v28 = v25 + 6;
            if (!v26) {
              int v28 = v27;
            }
            unsigned int v29 = (v28 << 13) & 0xFFFF0000;
            int v30 = v21[693];
            int v31 = v30 - 1;
            BOOL v26 = v30 < 1;
            int v32 = v30 + 6;
            if (!v26) {
              int v32 = v31;
            }
            *(_DWORD *)(v9 + 32) = v29 | (v32 >> 3);
            if (v22 + v24) {
              __int16 v33 = 4;
            }
            else {
              __int16 v33 = 5;
            }
            *(_WORD *)(v9 + 12) = v33;
            unint64_t v3 = *(unsigned int *)(v38 + 312);
            unint64_t v10 = *(unsigned int *)(v38 + 316);
            if (v12 == v10 && v40 == v3) {
              __int16 v35 = 5;
            }
            else {
              __int16 v35 = 4;
            }
            *(_WORD *)(v9 + 14) = v35;
            int v6 = v41 + 1;
            int v8 = v42 + 1;
            v9 += 36;
            unint64_t v7 = 0x8E38E38E38E38E39 * ((v9 - v37) >> 2);
          }
          ++v12;
          v5 += 28;
          unint64_t v11 = v10;
        }
        while (v12 < v10);
      }
      uint64_t v5 = v36 + 1792;
      ++v40;
    }
    while (v40 < v3);
    uint64_t v1 = *((void *)this + 33);
  }
  else
  {
    LOWORD(v8) = 0;
  }
  uint64_t result = 0;
  *(_WORD *)(v1 + 26) = v8;
  *(_DWORD *)(v1 + 32) = 4012;
  return result;
}

uint64_t CAHDecThymeLgh::allocWorkBuf_SPS(CAHDecThymeLgh *this, int *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = *a2 + 31;
  if (*a2 < -31) {
    int v5 = *a2 + 62;
  }
  unsigned int v6 = v5 >> 5;
  int v7 = v4 + 31;
  if (v4 < -31) {
    int v7 = v4 + 62;
  }
  unsigned int v8 = v7 >> 5;
  unsigned int v9 = 32 - __clz(v6 - 1);
  if (v6 >= 2) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  unsigned int v11 = 32 - __clz(v8 - 1);
  if (v8 >= 2) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unsigned int v13 = ((32 << (v12 + v10)) + 127) & 0xFFFFFF80;
  int v14 = 2 * v3 + 62;
  if (2 * v3 >= -31) {
    int v14 = 2 * v3 + 31;
  }
  unsigned int v15 = v14 >> 5;
  int v16 = v4 + 15;
  if (v4 < -15) {
    int v16 = v4 + 30;
  }
  unsigned int v17 = v16 >> 4;
  unsigned int v18 = 32 - __clz(v15 - 1);
  if (v15 >= 2) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  unsigned int v20 = 32 - __clz(v17 - 1);
  if (v17 >= 2) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  *((_DWORD *)this + 776) = v13;
  *((_DWORD *)this + 777) = ((8 << (v19 + v21)) + 127) & 0xFFFFFF80;
  unsigned int v22 = ((v4 + 63) >> 6) * ((v3 + 63) >> 6);
  *((_DWORD *)this + 781) = 576 * v22;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_28:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      char v29 = v28;
      uint64_t v30 = *((unsigned int *)this + 781);
      if (v30
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 176 * v27 + 5360), v30, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1485;
        __int16 v39 = 2080;
        unint64_t v40 = "MvColo";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v29 & 1) != 0);
    unsigned int v31 = 24 * v22;
    *((_DWORD *)this + 785) = 24 * v22;
    uint64_t v32 = 3776;
    if (!v31) {
      goto LABEL_34;
    }
LABEL_33:
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v32), v31, 7, 1, 0))
    {
LABEL_34:
      while (v32 != 5008)
      {
        unsigned int v31 = *((_DWORD *)this + 785);
        v32 += 176;
        if (v31) {
          goto LABEL_33;
        }
      }
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1490;
    __int16 v39 = 2080;
    unint64_t v40 = "segMap";
    __int16 v33 = &_os_log_internal;
  }
  else
  {
    uint64_t v23 = 14608;
    uint64_t v24 = 16;
    while (1)
    {
      uint64_t v25 = *((unsigned int *)this + 776);
      if (v25
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23 - 2816), v25, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1469;
        __int16 v39 = 2080;
        unint64_t v40 = "HdrY";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      uint64_t v26 = *((unsigned int *)this + 777);
      if (v26)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23), v26, 7, 1, 0))break; {
      }
        }
      v23 += 176;
      if (!--v24) {
        goto LABEL_28;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1474;
    __int16 v39 = 2080;
    unint64_t v40 = "HdrC";
    __int16 v33 = &_os_log_internal;
  }
LABEL_46:
  _os_log_impl(&dword_223977000, v33, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v35, 0x1Cu);
LABEL_47:
  (*(void (**)(CAHDecThymeLgh *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecThymeLgh::allocWorkBuf_PPS(CAHDecThymeLgh *this, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = *(void *)(v5 + 17560);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 100);
  unsigned int v9 = (*(unsigned __int8 *)(v6 + 105) + 1) & 0x1FE;
  if (v7 == 3) {
    int v10 = 48;
  }
  else {
    int v10 = 32;
  }
  if (!v7) {
    int v10 = 16;
  }
  int v12 = *(_DWORD *)(v6 + 108);
  int v11 = *(_DWORD *)(v6 + 112);
  unsigned int v13 = (v12 + 15) >> 4;
  int v14 = ~(-1 << *(_DWORD *)(v6 + 96));
  signed int v15 = v13 * ((v10 * v9) >> 3) + (v14 << 7);
  if (v15)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 117, v15, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1566;
        __int16 v27 = 2080;
        char v28 = "IpAbove";
        int v16 = &_os_log_internal;
LABEL_34:
        _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  int v17 = 16 * v9;
  if ((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 != 192)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 128, (int)((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 - 192), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1569;
        __int16 v27 = 2080;
        char v28 = "LfAbovePix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
LABEL_35:
      (*(void (**)(CAHDecThymeLgh *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  signed int v18 = 288 * ((v12 + 63) >> 6) + (v14 << 7);
  if (v18)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 139, v18, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1575;
        __int16 v27 = 2080;
        char v28 = "LfAboveInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  unsigned int v19 = (v11 + 7) >> 3;
  if (v19 * v17)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 150, (int)(v19 * v17), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1581;
        __int16 v27 = 2080;
        char v28 = "LfLeftPix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  uint64_t v20 = ((v11 + 63) >> 2) & 0x3FFFFFF0;
  if (v20)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 161, v20, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1589;
        __int16 v27 = 2080;
        char v28 = "LfLeftInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 172, (int)(24 * v13 + 30), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 1597;
      __int16 v27 = 2080;
      char v28 = "SwLeftPix";
      int v16 = &_os_log_internal;
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  int v22 = 192 * v9 + (v19 + 2) * (((v9 >> 1) << 8) | 8);
  if (!v22) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 183, v22, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 1603;
    __int16 v27 = 2080;
    char v28 = "AZLeftPix";
    int v16 = &_os_log_internal;
    goto LABEL_34;
  }
  return result;
}

uint64_t CAHDecThymeLgh::freeWorkBuf_SPS(CAHDecThymeLgh *this)
{
  uint64_t result = *((void *)this + 32);
  if (!*(_DWORD *)(result + 2648))
  {
    uint64_t v3 = 14608;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = (uint64_t *)(result + v3 - 2816);
      if (*v5)
      {
        CAVDDecoder::deallocAVDMem(result, v5);
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3 - 2816) = 0;
      }
      if (*(void *)(result + v3))
      {
        CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + v3));
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3) = 0;
      }
      v3 += 176;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = result + 176 * v6;
    if (*(void *)(v9 + 5360))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(v9 + 5360));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + 176 * v6 + 5360) = 0;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  for (uint64_t i = 3776; i != 5184; i += 176)
  {
    if (*(void *)(result + i))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + i));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + i) = 0;
    }
  }
  return result;
}

uint64_t *CAHDecThymeLgh::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[256])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 256);
    v2[256] = 0;
  }
  if (v2[278])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 278);
    v2[278] = 0;
  }
  if (v2[234])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 234);
    v2[234] = 0;
  }
  if (v2[300])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 300);
    v2[300] = 0;
  }
  if (v2[322])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 322);
    v2[322] = 0;
  }
  if (v2[344])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 344);
    v2[344] = 0;
  }
  if (v2[366])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 366);
    v2[366] = 0;
  }
  return this;
}

uint64_t CAHDecThymeLgh::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 3120) = a2;
  return this;
}

uint64_t CAHDecThymeLgh::initPicture(CAHDecThymeLgh *this)
{
  return 0;
}

uint64_t CAHDecThymeLgh::populateSlices(CAHDecThymeLgh *this)
{
  return 0;
}

uint64_t CAHDecThymeLgh::getTileIdxAbove(CAHDecThymeLgh *this)
{
  return 0;
}

uint64_t CAHDecThymeLgh::decodeBuffer(CAHDecThymeLgh *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecThymeLgh::decodeBufferSize(CAHDecThymeLgh *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecThymeLgh::decHdrYLinAddr(CAHDecThymeLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 11792);
}

uint64_t CAHDecThymeLgh::decHdrCLinAddr(CAHDecThymeLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 14608);
}

uint64_t CAHDecThymeLgh::decHdrYSize(CAHDecThymeLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 11836);
}

uint64_t CAHDecThymeLgh::decHdrCSize(CAHDecThymeLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 14652);
}

uint64_t CAHDecThymeLgh::decHdrYStride(CAHDecThymeLgh *this)
{
  return *((unsigned int *)this + 778);
}

uint64_t CAHDecThymeLgh::decHdrCStride(CAHDecThymeLgh *this)
{
  return *((unsigned int *)this + 779);
}

void CAHDecThymeLgh::clearSegBuffer(CAHDecThymeLgh *this)
{
}

uint64_t AppleAVDGetSecondPixelBufferFromBufferPoolAndLink(uint64_t a1, unsigned int a2, unsigned int *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 8 * a4 + 200);
  if (v7)
  {
    int v8 = *(_DWORD *)(a1 + 224);
    return BufferPool::getSecondBufferAndLink(v7, a2, a3, v8, a5, a6);
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      int v11 = "AppleAVDGetSecondPixelBufferFromBufferPoolAndLink";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Trying to allocate a second buffer without the pool being initialized! Error!\n", (uint8_t *)&v10, 0xCu);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t AppleAVDUnmapCVPixelBuffer(uint64_t a1, uint64_t a2, int a3, unsigned int a4, char a5)
{
  int v5 = a2;
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(BufferPool **)(a1 + 8 * a3 + 200);
  if (v6)
  {
    return BufferPool::unmapBuffer(v6, a2, a4, a5);
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 67109376;
      v9[1] = a3;
      __int16 v10 = 1024;
      int v11 = v5;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: pBufferPool[%d] is NULL cvPixBufIndex:%d!", (uint8_t *)v9, 0xEu);
    }
    return 314;
  }
}

uint64_t AppleAVDChangeVTResolutionInternal(int a1, void *a2, CFDictionaryRef theDict, int a4, int a5)
{
  int v25 = a5;
  int v26 = a4;
  unsigned int v9 = (a4 + 15) & 0xFFFFFFF0;
  unsigned int v10 = (a5 + 15) & 0xFFFFFFF0;
  int v11 = v9 - a4;
  int v12 = v10 - a5;
  int v23 = v10 - a5;
  int v24 = v9 - a4;
  value = 0;
  int valuePtr = 0;
  unsigned int v13 = (const void *)*MEMORY[0x263F040D8];
  if (!CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F040D8], (const void **)&value)
    || (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr) ? (BOOL v14 = valuePtr == v12) : (BOOL v14 = 1), v14))
  {
    int v16 = (const void *)*MEMORY[0x263F040F8];
    if ((!CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F040F8], (const void **)&value)
       || !CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
       || valuePtr == v11)
      && (!CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F04240], (const void **)&value)
       || !CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
       || valuePtr == a4)
      && (!CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x263F04118], (const void **)&value)
       || !CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
       || valuePtr == a5))
    {
      return 0;
    }
  }
  else
  {
    int v16 = (const void *)*MEMORY[0x263F040F8];
  }
  int v22 = a2;
  CFNumberRef v17 = CFNumberCreate(0, kCFNumberSInt32Type, &v26);
  CFNumberRef v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v25);
  CFDictionaryReplaceValue(theDict, (const void *)*MEMORY[0x263F04240], v17);
  CFDictionaryReplaceValue(theDict, (const void *)*MEMORY[0x263F04118], v18);
  CFDictionaryRemoveValue(theDict, v16);
  CFDictionaryRemoveValue(theDict, v13);
  if (v9 != a4)
  {
    CFNumberRef v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v24);
    CFDictionaryAddValue(theDict, v16, v19);
    if (v19) {
      CFRelease(v19);
    }
  }
  if (v10 != a5)
  {
    CFNumberRef v20 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
    CFDictionaryAddValue(theDict, v13, v20);
    if (v20) {
      CFRelease(v20);
    }
  }
  uint64_t v15 = VTDecoderSessionSetPixelBufferAttributes();
  void *v22 = 0;
  if (v17) {
    CFRelease(v17);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v15;
}

CAHDecDaisyLgh *createDaisyLghDecoder(CAVDLghDecoder *a1)
{
  uint64_t v2 = (CAHDecDaisyLgh *)operator new(0x11C8uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecDaisyLgh::CAHDecDaisyLgh(v2, a1);
  }
  return v3;
}

void sub_223AB5978(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecDaisyLgh::CAHDecDaisyLgh(CAHDecDaisyLgh *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D7421E8;
  *(_DWORD *)(v1 + 456) = 151460;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecDaisyLgh::CAHDecDaisyLgh(CAHDecDaisyLgh *this, CAVDLghDecoder *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D7421E8;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 151460;
  *(_DWORD *)(v4 + 8) = 932;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 151460, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      CFNumberRef v17 = "CAHDecDaisyLgh";
      __int16 v18 = 1024;
      int v19 = 0;
      int v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
LABEL_16:
      _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v7);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v8;
    *((void *)this + 34) = v8;
    uint64_t v9 = *((void *)this + 32);
    *(_DWORD *)(v9 + 17552) = 0;
    bzero((void *)(v9 + 11792), 0xB00uLL);
    *(_OWORD *)(v9 + 5712) = 0u;
    bzero((void *)(*((void *)this + 32) + 14608), 0xB00uLL);
    bzero((char *)this + 464, 0xA50uLL);
    unsigned int v10 = (_OWORD *)*((void *)this + 32);
    v10[356] = 0u;
    v10[355] = 0u;
    v10[354] = 0u;
    v10[353] = 0u;
    v10[352] = 0u;
    v10[351] = 0u;
    v10[350] = 0u;
    v10[349] = 0u;
    v10[348] = 0u;
    v10[347] = 0u;
    v10[346] = 0u;
    v10[345] = 0u;
    v10[344] = 0u;
    v10[343] = 0u;
    v10[342] = 0u;
    v10[341] = 0u;
    v10[340] = 0u;
    v10[339] = 0u;
    v10[338] = 0u;
    v10[337] = 0u;
    v10[336] = 0u;
    v10[335] = 0u;
    bzero((char *)this + 3104, 0x580uLL);
    for (uint64_t i = 3072; i != 3776; i += 176)
    {
      int v12 = (_OWORD *)(*((void *)this + 32) + i);
      v12[9] = 0uLL;
      v12[10] = 0uLL;
      v12[7] = 0uLL;
      v12[8] = 0uLL;
      v12[5] = 0uLL;
      v12[6] = 0uLL;
      v12[3] = 0uLL;
      v12[4] = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *int v12 = 0uLL;
    }
    do
    {
      unsigned int v13 = (_OWORD *)(*((void *)this + 32) + i);
      v13[9] = 0uLL;
      v13[10] = 0uLL;
      v13[7] = 0uLL;
      v13[8] = 0uLL;
      v13[5] = 0uLL;
      v13[6] = 0uLL;
      v13[3] = 0uLL;
      v13[4] = 0uLL;
      v13[1] = 0uLL;
      _DWORD v13[2] = 0uLL;
      *unsigned int v13 = 0uLL;
      i += 176;
    }
    while (i != 5184);
    BOOL v14 = (_OWORD *)*((void *)this + 32);
    v14[334] = 0u;
    v14[333] = 0u;
    v14[332] = 0u;
    v14[331] = 0u;
    v14[330] = 0u;
    v14[329] = 0u;
    v14[328] = 0u;
    v14[327] = 0u;
    v14[326] = 0u;
    v14[325] = 0u;
    uint64_t v15 = 3072;
    v14[324] = 0u;
    do
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), 1913, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        int v16 = 136315650;
        CFNumberRef v17 = "CAHDecDaisyLgh";
        __int16 v18 = 1024;
        int v19 = 174;
        __int16 v20 = 2080;
        char v21 = "probBuf";
        int v5 = &_os_log_internal;
        uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
        goto LABEL_15;
      }
      v15 += 176;
    }
    while (v15 != 3776);
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 5184), 12284, 7, 1, 0))return; {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    }
    {
      int v16 = 136315650;
      CFNumberRef v17 = "CAHDecDaisyLgh";
      __int16 v18 = 1024;
      int v19 = 176;
      __int16 v20 = 2080;
      char v21 = "stateBuf";
      int v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_15:
      uint32_t v7 = 28;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_223AB5DB0(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecDaisyLgh::~CAHDecDaisyLgh(CAHDecDaisyLgh *this)
{
  *(void *)this = &unk_26D7421E8;
  CAHDecDaisyLgh::freeWorkBuf_SPS(this);
  uint64_t v2 = *((void *)this + 32);
  for (uint64_t i = 3072; i != 3776; i += 176)
  {
    if (*(void *)(v2 + i))
    {
      CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + i));
      uint64_t v2 = *((void *)this + 32);
      *(void *)(v2 + i) = 0;
    }
  }
  if (*(void *)(v2 + 5184))
  {
    CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + 5184));
    *(void *)(*((void *)this + 32) + 5184) = 0;
  }
  (*(void (**)(CAHDecDaisyLgh *, void))(*(void *)this + 152))(this, 0);
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecDaisyLgh::~CAHDecDaisyLgh(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecDaisyLgh::DecodePicture(CAHDecDaisyLgh *this, uint64_t a2)
{
  if (CAHDecIxoraLgh::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecDaisyLgh *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecDaisyLgh *))(*(void *)this + 48))(this);
  (*(void (**)(CAHDecDaisyLgh *))(*(void *)this + 56))(this);
  CAHDecIxoraLgh::populateTiles(this);
  (*(void (**)(CAHDecDaisyLgh *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecDaisyLgh *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecDaisyLgh::populateCommonRegisters(CAHDecDaisyLgh *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000002;
  return 0;
}

uint64_t CAHDecDaisyLgh::updateCommonRegisters(CAHDecDaisyLgh *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecDaisyLgh::populateSequenceRegisters(CAHDecDaisyLgh *this)
{
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  *(_DWORD *)(v1 + 40) = 0;
  unsigned __int16 v3 = *(_DWORD *)(v2 + 108) - 1;
  *(_DWORD *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 40) = (v3 | ((unsigned __int16)*(_DWORD *)(v2 + 112) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 304);
  if (v4 >= 3) {
    int v5 = 6528;
  }
  else {
    int v5 = ((v4 & 3) << 7) | 0x1800;
  }
  *(_DWORD *)(v1 + 44) = v5;
  unsigned int v6 = v5 & 0xFFF87FFF | (((*(unsigned char *)(v2 + 105) + 8) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFF87FFFF | (((*(unsigned __int8 *)(v2 + 105) + 8) & 0xF) << 19) | 0x1000000;
  *(_DWORD *)(v1 + 44) = v7;
  *(_DWORD *)(v1 + 44) = v7 & 0xFDFFFFFF | (*(unsigned char *)(v2 + 304) == 4);
  return 0;
}

uint64_t CAHDecDaisyLgh::populatePictureRegisters(CAHDecDaisyLgh *this)
{
  uint64_t v394 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v2 + 17560);
  if (*(unsigned char *)(v4 + 37)) {
    BOOL v5 = *(unsigned char *)(v4 + 40) != 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = *(_DWORD *)(v2 + 11748);
  int v7 = *(_DWORD *)(v4 + 100);
  int v388 = *(_DWORD *)(v4 + 96);
  int v387 = 1 << v7;
  char v8 = *(unsigned char *)(v2 + 2675);
  char v9 = *(unsigned char *)(v2 + 2674);
  if (v5) {
    int v10 = 766517248;
  }
  else {
    int v10 = 766509056;
  }
  *(_DWORD *)(v3 + 48) = v10;
  int v11 = v10 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v3 + 48) = v11;
  if (*(_DWORD *)(*((void *)this + 32) + 2644) == 1) {
    int v12 = 1024;
  }
  else {
    int v12 = 1;
  }
  unsigned int v13 = v12 & 0xFFFFFFF0 | (4 * (v8 & 3)) | v9 & 3 | v11 | 0x2E0;
  *(_DWORD *)(v3 + 48) = v13;
  BOOL v14 = (unsigned char *)*((void *)this + 32);
  int v15 = v13 | ((v14[2652] & 1) << 19);
  *(_DWORD *)(v3 + 48) = v15;
  int v16 = v15 | ((v14[2653] & 1) << 18);
  *(_DWORD *)(v3 + 48) = v16;
  *(_DWORD *)(v3 + 48) = v16 | ((v14[2654] & 1) << 17);
  *(void *)(v3 + 52) = 0x2000000;
  LOWORD(v16) = *(_DWORD *)(v4 + 108) - 1;
  *(_DWORD *)(v3 + 56) = (unsigned __int16)v16;
  *(_DWORD *)(v3 + 56) = ((unsigned __int16)v16 | ((unsigned __int16)*(_DWORD *)(v4 + 112) << 16)) - 0x10000;
  *(void *)(v3 + 60) = 0;
  int v17 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2688) & 7;
  *(_DWORD *)(v3 + 64) = v17;
  unsigned int v18 = v17 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2692) & 1));
  *(_DWORD *)(v3 + 64) = v18;
  unsigned int v19 = v18 & 0xFFFFFF8F | (16 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2696) & 7));
  *(_DWORD *)(v3 + 64) = v19;
  unsigned int v20 = v19 & 0xFFFFFF7F | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2700) & 1) << 7);
  *(_DWORD *)(v3 + 64) = v20;
  unsigned int v21 = v20 & 0xFFFFF8FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2704) & 7) << 8);
  *(_DWORD *)(v3 + 64) = v21;
  unsigned int v22 = v21 & 0xFFFFF7FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2708) & 1) << 11);
  *(_DWORD *)(v3 + 64) = v22;
  unsigned int v23 = v22 & 0xFFFFCFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2712) & 3) << 12);
  *(_DWORD *)(v3 + 64) = v23;
  unsigned int v24 = v23 & 0xFFFFBFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2716) & 1) << 14);
  *(_DWORD *)(v3 + 64) = v24;
  unsigned int v25 = v24 & 0xFFFF7FFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2720) & 1) << 15);
  *(_DWORD *)(v3 + 64) = v25;
  unsigned int v26 = v25 & 0xFFF8FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2724) & 7) << 16);
  *(_DWORD *)(v3 + 64) = v26;
  unsigned int v27 = v26 & 0xFFF7FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2728) & 1) << 19);
  *(_DWORD *)(v3 + 64) = v27;
  unsigned int v28 = v27 & 0xFFEFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2732) & 1) << 20);
  *(_DWORD *)(v3 + 64) = v28;
  unsigned int v29 = v28 & 0xFFDFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2736) & 1) << 21);
  *(_DWORD *)(v3 + 64) = v29;
  unsigned int v30 = v29 & 0xFFBFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2740) & 1) << 22);
  *(_DWORD *)(v3 + 64) = v30;
  unsigned int v31 = v30 & 0xFF7FFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2744) & 1) << 23);
  *(_DWORD *)(v3 + 64) = v31;
  unsigned int v32 = v31 & 0xFEFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2748) & 1) << 24);
  *(_DWORD *)(v3 + 64) = v32;
  unsigned int v33 = v32 & 0xFDFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2752) & 1) << 25);
  *(_DWORD *)(v3 + 64) = v33;
  *(_DWORD *)(v3 + 64) = v33 & 0xFBFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2756) & 1) << 26);
  *(void *)(v3 + 68) = 0;
  if (*(unsigned char *)(v4 + 60))
  {
    int v34 = *(unsigned char *)(v4 + 69) & 0x7F;
    *(_DWORD *)(v3 + 68) = v34;
    unsigned int v35 = v34 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 68) & 0x7F) << 7);
    *(_DWORD *)(v3 + 68) = v35;
    unsigned int v36 = v35 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 67) & 0x7F) << 14);
    *(_DWORD *)(v3 + 68) = v36;
    unsigned int v37 = v36 & 0xF01FFFFF | ((*(unsigned char *)(v4 + 66) & 0x7F) << 21);
    *(_DWORD *)(v3 + 68) = v37;
    *(_DWORD *)(v3 + 68) = v37 & 0x8FFFFFFF | ((*(unsigned char *)(v4 + 59) & 7) << 28);
    int v38 = *(unsigned char *)(v4 + 73) & 0x7F;
    *(_DWORD *)(v3 + 72) = v38;
    unsigned int v39 = v38 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 72) & 0x7F) << 7);
    *(_DWORD *)(v3 + 72) = v39;
    unsigned int v40 = v39 & 0xFFF03FFF | ((*(unsigned char *)(v4 + 58) & 0x3F) << 14);
  }
  else
  {
    *(_DWORD *)(v3 + 68) = (*(unsigned char *)(v4 + 59) & 7) << 28;
    unsigned int v40 = (*(unsigned char *)(v4 + 58) & 0x3F) << 14;
  }
  uint64_t v41 = 0;
  int v389 = 1 << v388;
  int v386 = v7;
  int v385 = 1 << v388 << v7;
  *(_DWORD *)(v3 + 72) = v40;
  *(_DWORD *)(v3 + 76) = 0;
  int v42 = *(unsigned char *)(v4 + 77) & 0x1F;
  *(_DWORD *)(v3 + 76) = v42;
  unsigned int v43 = v42 & 0xFFFFFC1F | (32 * (*(unsigned char *)(v4 + 76) & 0x1F));
  *(_DWORD *)(v3 + 76) = v43;
  unsigned int v44 = v43 & 0xFFFF83FF | ((*(unsigned char *)(v4 + 75) & 0x1F) << 10);
  *(_DWORD *)(v3 + 76) = v44;
  *(_DWORD *)(v3 + 76) = v44 | (*(unsigned __int8 *)(v4 + 74) << 15);
  uint64_t v45 = v3 + 80;
  int v46 = (_WORD *)(v4 + 242);
  uint64_t v47 = v4 + 208;
  do
  {
    int v48 = *(unsigned __int8 *)(v4 + 78);
    *(_DWORD *)(v45 + v41) = 0;
    if (v48)
    {
      BOOL v49 = *(unsigned char *)(v47 + v41) != 0;
      *(_DWORD *)(v45 + v41) = v49;
      BOOL v50 = *(unsigned __int8 *)(v47 + v41 - 1) != 0;
    }
    else
    {
      BOOL v49 = 0;
      BOOL v50 = 0;
    }
    int v51 = v49 | (8 * v50);
    *(_DWORD *)(v45 + v41) = v51;
    unsigned int v52 = v51 & 0xFFFFFFF9 | (2 * (*v46 & 3));
    *(_DWORD *)(v45 + v41) = v52;
    if (v48)
    {
      int v53 = *(unsigned __int8 *)(v47 + v41 - 2);
      int v54 = v52 | ((*(unsigned char *)(v47 + v41 - 2) != 0) << 11);
      *(_DWORD *)(v45 + v41) = v54;
      if (v53) {
        LOWORD(v53) = *(v46 - 1);
      }
      unsigned int v55 = (16 * (v53 & 0x7F)) | v54 & 0xFFFFF80F;
      *(_DWORD *)(v45 + v41) = v55;
      int v48 = *(unsigned __int8 *)(v47 + v41 - 3);
      unsigned int v52 = v55 | ((v48 != 0) << 21);
      *(_DWORD *)(v45 + v41) = v52;
      if (v48) {
        LOWORD(v48) = *(v46 - 2);
      }
    }
    *(_DWORD *)(v45 + v41) = v52 & 0xFFE00FFF | ((v48 & 0x1FF) << 12);
    v41 += 4;
    v46 += 4;
  }
  while (v41 != 32);
  *(_DWORD *)(v3 + 152) = 0x20000;
  uint64_t v390 = v4;
  BOOL v383 = v5;
  if (v5)
  {
    uint64_t v384 = 8;
  }
  else
  {
    uint64_t v56 = (_DWORD *)(v3 + 112);
    uint64_t v57 = 2178;
    uint64_t v384 = 3;
    int v58 = &_os_log_internal;
    do
    {
      v56[11] = 0x1000000;
      *uint64_t v56 = 0;
      unsigned __int16 v59 = **(_DWORD **)(*((void *)this + 32) + 8 * v57) - 1;
      *uint64_t v56 = v59;
      *uint64_t v56 = (v59 | ((unsigned __int16)*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 16))
           - 0x10000;
      v56[3] = 0;
      int v60 = (unsigned __int16)((**(_DWORD **)(*((void *)this + 32) + 8 * v57) << 14) / *(_DWORD *)(v4 + 108));
      v56[3] = v60;
      int v61 = v60 | ((unsigned __int16)((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 14)
                                    / *(_DWORD *)(v4 + 112)) << 16);
      v56[3] = v61;
      if ((v60 - 1024) >= 0x7C01 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 545;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
        int v61 = v56[3];
      }
      if ((v61 - 0x4000000) >= 0x7C010000 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 546;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
      }
      ++v57;
      ++v56;
      uint64_t v4 = v390;
    }
    while (v57 != 2181);
  }
  *(void *)(v3 + 144) = 0;
  int v62 = *(unsigned __int16 *)(v4 + 2672);
  *(_DWORD *)(v3 + 144) = v62;
  *(_DWORD *)(v3 + 144) = v62 | (*(_DWORD *)(v4 + 2676) << 16);
  int v63 = *(unsigned __int16 *)(v4 + 2680);
  *(_DWORD *)(v3 + 148) = v63;
  *(_DWORD *)(v3 + 148) = v63 | (*(_DWORD *)(v4 + 2684) << 16);
  time_t v64 = (char *)this + 464;
  uint64_t v65 = -60;
  do
  {
    *(_DWORD *)(*((void *)this + 33) + v65 + 228) = 0;
    uint64_t v66 = *((void *)this + 33) + v65;
    int v67 = *(_DWORD *)(v66 + 228);
    *(_DWORD *)(v66 + 228) = 0;
    *(_DWORD *)(*((void *)this + 33) + v65 + 228) ^= 0xFFFFFF00;
    uint64_t v68 = *((void *)this + 33) + v65;
    int v69 = *(_DWORD *)(v68 + 228);
    *(_DWORD *)(v68 + 228) = v67;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)v65 + 228, 0, 0xFFFFFFFFLL, 8, v69, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v65 + 288) = 0;
    *(_DWORD *)(*((void *)this + 33) + v65 + 288) = *(_DWORD *)(*((void *)this + 33) + v65 + 288) & 0x800001FF | (((*((_DWORD *)this + 1132) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v65 + 500) = 0;
    uint64_t v71 = *((void *)this + 33) + v65;
    int v72 = *(_DWORD *)(v71 + 500);
    *(_DWORD *)(v71 + 500) = 0;
    *(_DWORD *)(*((void *)this + 33) + v65 + 500) ^= 0x3FFu;
    uint64_t v73 = *((void *)this + 33) + v65;
    int v74 = *(_DWORD *)(v73 + 500);
    *(_DWORD *)(v73 + 500) = v72;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)v65 + 500, 0, 0x3FFFFFFFFFFLL, 32, v74, 4);
      if (result) {
        return result;
      }
    }
    v64 += 176;
    v65 += 4;
  }
  while (v65);
  *(_DWORD *)(*((void *)this + 33) + 288) = 0;
  uint64_t v75 = *((void *)this + 33);
  int v76 = *(_DWORD *)(v75 + 288);
  *(_DWORD *)(v75 + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) ^= 0xFFFFFF00;
  uint64_t v77 = *((void *)this + 33);
  int v78 = *(_DWORD *)(v77 + 288);
  *(_DWORD *)(v77 + 288) = v76;
  uint64_t v79 = *((void *)this + 32);
  if (*(void *)(v79 + 5184) || *(_DWORD *)(v79 + 5336) || *(_DWORD *)(v79 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v79 + 5184), 288, 0, 0xFFFFFFFFLL, 8, v78, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 500) = 0;
  uint64_t v80 = *((void *)this + 33);
  int v81 = *(_DWORD *)(v80 + 500);
  *(_DWORD *)(v80 + 500) = 0;
  *(_DWORD *)(*((void *)this + 33) + 500) ^= 0x3FFu;
  uint64_t v82 = *((void *)this + 33);
  int v83 = *(_DWORD *)(v82 + 500);
  *(_DWORD *)(v82 + 500) = v81;
  uint64_t v84 = *((void *)this + 32);
  if (*(void *)(v84 + 5184) || *(_DWORD *)(v84 + 5336) || *(_DWORD *)(v84 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v84 + 5184), 500, 0, 0x3FFFFFFFFFFLL, 32, v83, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 504) = 0;
  if ((*(unsigned char *)(v3 + 50) & 8) != 0)
  {
    uint64_t v85 = *((void *)this + 33);
    uint64_t v86 = *(void *)(*((void *)this + 32) + 2680);
    long long v392 = 0u;
    long long v393 = 0u;
    memset(buf, 0, sizeof(buf));
    int v87 = (*(_DWORD *)(v85 + 16) & 0xF) << 9;
    *(void *)&buf[0] = v86;
    int v88 = *(_DWORD *)(v85 + 292);
    *(_DWORD *)(v85 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF00;
    uint64_t v89 = *((void *)this + 33);
    int v90 = *(_DWORD *)(v89 + 292);
    *(_DWORD *)(v89 + 292) = v88;
    if (v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 292, v87, 0xFFFFFFFFLL, 8, v90, 4);
      if (result) {
        return result;
      }
      uint64_t v91 = *(void *)&buf[0];
      int v92 = DWORD2(v392);
      LODWORD(v86) = HIDWORD(v392);
    }
    else
    {
      int v92 = 0;
      uint64_t v91 = 0;
    }
    *(_DWORD *)(*((void *)this + 33) + 504) = 0;
    uint64_t v93 = *((void *)this + 33);
    int v94 = *(_DWORD *)(v93 + 504);
    *(_DWORD *)(v93 + 504) = 0;
    *(_DWORD *)(*((void *)this + 33) + 504) ^= 0x3FFu;
    uint64_t v95 = *((void *)this + 33);
    int v96 = *(_DWORD *)(v95 + 504);
    *(_DWORD *)(v95 + 504) = v94;
    if (v91 || v92 || v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 504, v87, 0x3FFFFFFFFFFLL, 32, v96, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 344) = 0;
  uint64_t v97 = *((void *)this + 33);
  int v98 = *(_DWORD *)(v97 + 344);
  *(_DWORD *)(v97 + 344) = 0;
  *(_DWORD *)(*((void *)this + 33) + 344) ^= 0xFFFFFF00;
  uint64_t v99 = *((void *)this + 33);
  int v100 = *(_DWORD *)(v99 + 344);
  *(_DWORD *)(v99 + 344) = v98;
  if (*((void *)this + 454) || *((_DWORD *)this + 946) || *((_DWORD *)this + 947))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 344, 0, 0xFFFFFFFFLL, 8, v100, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 556) = 0;
  uint64_t v101 = *((void *)this + 33);
  int v102 = *(_DWORD *)(v101 + 556);
  *(_DWORD *)(v101 + 556) = 0;
  *(_DWORD *)(*((void *)this + 33) + 556) ^= 0x3FFu;
  uint64_t v103 = *((void *)this + 33);
  int v104 = *(_DWORD *)(v103 + 556);
  *(_DWORD *)(v103 + 556) = v102;
  if (*((void *)this + 454) || *((_DWORD *)this + 946) || *((_DWORD *)this + 947))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 556, 0, 0x3FFFFFFFFFFLL, 32, v104, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  uint64_t v105 = *((void *)this + 33);
  int v106 = *(_DWORD *)(v105 + 296);
  *(_DWORD *)(v105 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0xFFFFFF00;
  uint64_t v107 = *((void *)this + 33);
  int v108 = *(_DWORD *)(v107 + 296);
  *(_DWORD *)(v107 + 296) = v106;
  if (*((void *)this + 410) || *((_DWORD *)this + 858) || *((_DWORD *)this + 859))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 296, 0, 0xFFFFFFFFLL, 8, v108, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 508) = 0;
  uint64_t v109 = *((void *)this + 33);
  int v110 = *(_DWORD *)(v109 + 508);
  *(_DWORD *)(v109 + 508) = 0;
  *(_DWORD *)(*((void *)this + 33) + 508) ^= 0x3FFu;
  uint64_t v111 = *((void *)this + 33);
  int v112 = *(_DWORD *)(v111 + 508);
  *(_DWORD *)(v111 + 508) = v110;
  if (*((void *)this + 410) || *((_DWORD *)this + 858) || *((_DWORD *)this + 859))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 508, 0, 0x3FFFFFFFFFFLL, 32, v112, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 300) = 0;
  uint64_t v113 = *((void *)this + 33);
  int v114 = *(_DWORD *)(v113 + 300);
  *(_DWORD *)(v113 + 300) = 0;
  *(_DWORD *)(*((void *)this + 33) + 300) ^= 0xFFFFFF00;
  uint64_t v115 = *((void *)this + 33);
  int v116 = *(_DWORD *)(v115 + 300);
  *(_DWORD *)(v115 + 300) = v114;
  if (*((void *)this + 432) || *((_DWORD *)this + 902) || *((_DWORD *)this + 903))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 432, 300, 0, 0xFFFFFFFFLL, 8, v116, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 512) = 0;
  uint64_t v117 = *((void *)this + 33);
  int v118 = *(_DWORD *)(v117 + 512);
  *(_DWORD *)(v117 + 512) = 0;
  *(_DWORD *)(*((void *)this + 33) + 512) ^= 0x3FFu;
  uint64_t v119 = *((void *)this + 33);
  int v120 = *(_DWORD *)(v119 + 512);
  *(_DWORD *)(v119 + 512) = v118;
  if (*((void *)this + 432) || *((_DWORD *)this + 902) || *((_DWORD *)this + 903))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 432, 512, 0, 0x3FFFFFFFFFFLL, 32, v120, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 304) = 0;
  *(_DWORD *)(*((void *)this + 33) + 516) = 0;
  *(_DWORD *)(*((void *)this + 33) + 308) = 0;
  uint64_t v121 = *((void *)this + 33);
  int v122 = *(_DWORD *)(v121 + 308);
  *(_DWORD *)(v121 + 308) = 0;
  *(_DWORD *)(*((void *)this + 33) + 308) ^= 0xFFFFFF00;
  uint64_t v123 = *((void *)this + 33);
  int v124 = *(_DWORD *)(v123 + 308);
  *(_DWORD *)(v123 + 308) = v122;
  if (*((void *)this + 476) || *((_DWORD *)this + 990) || *((_DWORD *)this + 991))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 308, 0, 0xFFFFFFFFLL, 8, v124, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 520) = 0;
  uint64_t v125 = *((void *)this + 33);
  int v126 = *(_DWORD *)(v125 + 520);
  *(_DWORD *)(v125 + 520) = 0;
  *(_DWORD *)(*((void *)this + 33) + 520) ^= 0x3FFu;
  uint64_t v127 = *((void *)this + 33);
  int v128 = *(_DWORD *)(v127 + 520);
  *(_DWORD *)(v127 + 520) = v126;
  if (*((void *)this + 476) || *((_DWORD *)this + 990) || *((_DWORD *)this + 991))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 520, 0, 0x3FFFFFFFFFFLL, 32, v128, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 312) = 0;
  uint64_t v129 = *((void *)this + 33);
  int v130 = *(_DWORD *)(v129 + 312);
  *(_DWORD *)(v129 + 312) = 0;
  *(_DWORD *)(*((void *)this + 33) + 312) ^= 0xFFFFFF00;
  uint64_t v131 = *((void *)this + 33);
  int v132 = *(_DWORD *)(v131 + 312);
  *(_DWORD *)(v131 + 312) = v130;
  if (*((void *)this + 498) || *((_DWORD *)this + 1034) || *((_DWORD *)this + 1035))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 312, 0, 0xFFFFFFFFLL, 8, v132, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 524) = 0;
  uint64_t v133 = *((void *)this + 33);
  int v134 = *(_DWORD *)(v133 + 524);
  *(_DWORD *)(v133 + 524) = 0;
  *(_DWORD *)(*((void *)this + 33) + 524) ^= 0x3FFu;
  uint64_t v135 = *((void *)this + 33);
  int v136 = *(_DWORD *)(v135 + 524);
  *(_DWORD *)(v135 + 524) = v134;
  if (*((void *)this + 498) || *((_DWORD *)this + 1034) || *((_DWORD *)this + 1035))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 524, 0, 0x3FFFFFFFFFFLL, 32, v136, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 316) = 0;
  *(_DWORD *)(*((void *)this + 33) + 528) = 0;
  uint64_t v137 = *((void *)this + 33);
  int v138 = *(_DWORD *)(v137 + 316);
  *(_DWORD *)(v137 + 316) = 0;
  *(_DWORD *)(*((void *)this + 33) + 316) ^= 0xFFFFFF00;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 316);
  *(_DWORD *)(v139 + 316) = v138;
  if (*((void *)this + 520) || *((_DWORD *)this + 1078) || *((_DWORD *)this + 1079))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 520, 316, 0, 0xFFFFFFFFLL, 8, v140, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 528);
  *(_DWORD *)(v141 + 528) = 0;
  *(_DWORD *)(*((void *)this + 33) + 528) ^= 0x3FFu;
  uint64_t v143 = *((void *)this + 33);
  int v144 = *(_DWORD *)(v143 + 528);
  *(_DWORD *)(v143 + 528) = v142;
  if (*((void *)this + 520) || *((_DWORD *)this + 1078) || *((_DWORD *)this + 1079))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 520, 528, 0, 0x3FFFFFFFFFFLL, 32, v144, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 320) = 0;
  uint64_t v145 = *((void *)this + 33);
  int v146 = *(_DWORD *)(v145 + 320);
  *(_DWORD *)(v145 + 320) = 0;
  *(_DWORD *)(*((void *)this + 33) + 320) ^= 0xFFFFFF00;
  uint64_t v147 = *((void *)this + 33);
  int v148 = *(_DWORD *)(v147 + 320);
  *(_DWORD *)(v147 + 320) = v146;
  if (*((void *)this + 542) || *((_DWORD *)this + 1122) || *((_DWORD *)this + 1123))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 542, 320, 0, 0xFFFFFFFFLL, 8, v148, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 532) = 0;
  uint64_t v149 = *((void *)this + 33);
  int v150 = *(_DWORD *)(v149 + 532);
  *(_DWORD *)(v149 + 532) = 0;
  *(_DWORD *)(*((void *)this + 33) + 532) ^= 0x3FFu;
  uint64_t v151 = *((void *)this + 33);
  int v152 = *(_DWORD *)(v151 + 532);
  *(_DWORD *)(v151 + 532) = v150;
  if (*((void *)this + 542) || *((_DWORD *)this + 1122) || *((_DWORD *)this + 1123))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 542, 532, 0, 0x3FFFFFFFFFFLL, 32, v152, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 324) = 0;
  uint64_t v153 = *((void *)this + 33);
  int v154 = *(_DWORD *)(v153 + 324);
  *(_DWORD *)(v153 + 324) = 0;
  *(_DWORD *)(*((void *)this + 33) + 324) ^= 0xFFFFFF00;
  uint64_t v155 = *((void *)this + 33);
  int v156 = *(_DWORD *)(v155 + 324);
  *(_DWORD *)(v155 + 324) = v154;
  uint64_t v157 = *((void *)this + 32);
  unsigned int v158 = *(_DWORD *)(v157 + 17568);
  uint64_t v159 = v157 + 176 * v158;
  if (*(void *)(v159 + 3072) || *(_DWORD *)(v157 + 176 * v158 + 3224) || *(_DWORD *)(v157 + 176 * v158 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v159 + 3072), 324, 0, 0xFFFFFFFFLL, 8, v156, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 536) = 0;
  uint64_t v160 = *((void *)this + 33);
  int v161 = *(_DWORD *)(v160 + 536);
  *(_DWORD *)(v160 + 536) = 0;
  *(_DWORD *)(*((void *)this + 33) + 536) ^= 0x3FFu;
  uint64_t v162 = *((void *)this + 33);
  int v163 = *(_DWORD *)(v162 + 536);
  *(_DWORD *)(v162 + 536) = v161;
  uint64_t v164 = *((void *)this + 32);
  unsigned int v165 = *(_DWORD *)(v164 + 17568);
  uint64_t v166 = v164 + 176 * v165;
  if (*(void *)(v166 + 3072) || *(_DWORD *)(v164 + 176 * v165 + 3224) || *(_DWORD *)(v164 + 176 * v165 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v166 + 3072), 536, 0, 0x3FFFFFFFFFFLL, 32, v163, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 328) = 0;
  uint64_t v167 = *((void *)this + 33);
  int v168 = *(_DWORD *)(v167 + 328);
  *(_DWORD *)(v167 + 328) = 0;
  *(_DWORD *)(*((void *)this + 33) + 328) ^= 0xFFFFFF00;
  uint64_t v169 = *((void *)this + 33);
  int v170 = *(_DWORD *)(v169 + 328);
  *(_DWORD *)(v169 + 328) = v168;
  uint64_t v171 = *((void *)this + 32);
  int v172 = *(_DWORD *)(v171 + 5724);
  uint64_t v173 = v171 + 176 * v172;
  if (*(void *)(v173 + 3776) || *(_DWORD *)(v171 + 176 * v172 + 3928) || *(_DWORD *)(v171 + 176 * v172 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v173 + 3776), 328, 0, 0xFFFFFFFFLL, 8, v170, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 540) = 0;
  uint64_t v174 = *((void *)this + 33);
  int v175 = *(_DWORD *)(v174 + 540);
  *(_DWORD *)(v174 + 540) = 0;
  *(_DWORD *)(*((void *)this + 33) + 540) ^= 0x3FFu;
  uint64_t v176 = *((void *)this + 33);
  int v177 = *(_DWORD *)(v176 + 540);
  *(_DWORD *)(v176 + 540) = v175;
  uint64_t v178 = *((void *)this + 32);
  int v179 = *(_DWORD *)(v178 + 5724);
  uint64_t v180 = v178 + 176 * v179;
  if (*(void *)(v180 + 3776) || *(_DWORD *)(v178 + 176 * v179 + 3928) || *(_DWORD *)(v178 + 176 * v179 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v180 + 3776), 540, 0, 0x3FFFFFFFFFFLL, 32, v177, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 332) = 0;
  uint64_t v181 = *((void *)this + 33);
  int v182 = *(_DWORD *)(v181 + 332);
  *(_DWORD *)(v181 + 332) = 0;
  *(_DWORD *)(*((void *)this + 33) + 332) ^= 0xFFFFFF00;
  uint64_t v183 = *((void *)this + 33);
  int v184 = *(_DWORD *)(v183 + 332);
  *(_DWORD *)(v183 + 332) = v182;
  uint64_t v185 = *((void *)this + 32);
  int v186 = *(_DWORD *)(v185 + 5720);
  uint64_t v187 = v185 + 176 * v186;
  if (*(void *)(v187 + 3776) || *(_DWORD *)(v185 + 176 * v186 + 3928) || *(_DWORD *)(v185 + 176 * v186 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v187 + 3776), 332, 0, 0xFFFFFFFFLL, 8, v184, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 544) = 0;
  uint64_t v188 = *((void *)this + 33);
  int v189 = *(_DWORD *)(v188 + 544);
  *(_DWORD *)(v188 + 544) = 0;
  *(_DWORD *)(*((void *)this + 33) + 544) ^= 0x3FFu;
  uint64_t v190 = *((void *)this + 33);
  int v191 = *(_DWORD *)(v190 + 544);
  *(_DWORD *)(v190 + 544) = v189;
  uint64_t v192 = *((void *)this + 32);
  int v193 = *(_DWORD *)(v192 + 5720);
  uint64_t v194 = v192 + 176 * v193;
  if (*(void *)(v194 + 3776) || *(_DWORD *)(v192 + 176 * v193 + 3928) || *(_DWORD *)(v192 + 176 * v193 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v194 + 3776), 544, 0, 0x3FFFFFFFFFFLL, 32, v191, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 336) = 0;
  uint64_t v195 = *((void *)this + 33);
  int v196 = *(_DWORD *)(v195 + 336);
  *(_DWORD *)(v195 + 336) = 0;
  *(_DWORD *)(*((void *)this + 33) + 336) ^= 0xFFFFFF00;
  uint64_t v197 = *((void *)this + 33);
  int v198 = *(_DWORD *)(v197 + 336);
  *(_DWORD *)(v197 + 336) = v196;
  uint64_t v199 = *((void *)this + 32);
  int v200 = *(_DWORD *)(v199 + 5716);
  uint64_t v201 = v199 + 176 * v200;
  if (*(void *)(v201 + 5360) || *(_DWORD *)(v199 + 176 * v200 + 5512) || *(_DWORD *)(v199 + 176 * v200 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v201 + 5360), 336, 0, 0xFFFFFFFFLL, 8, v198, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 548) = 0;
  uint64_t v202 = *((void *)this + 33);
  int v203 = *(_DWORD *)(v202 + 548);
  *(_DWORD *)(v202 + 548) = 0;
  *(_DWORD *)(*((void *)this + 33) + 548) ^= 0x3FFu;
  uint64_t v204 = *((void *)this + 33);
  int v205 = *(_DWORD *)(v204 + 548);
  *(_DWORD *)(v204 + 548) = v203;
  uint64_t v206 = *((void *)this + 32);
  int v207 = *(_DWORD *)(v206 + 5716);
  uint64_t v208 = v206 + 176 * v207;
  if (*(void *)(v208 + 5360) || *(_DWORD *)(v206 + 176 * v207 + 5512) || *(_DWORD *)(v206 + 176 * v207 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v208 + 5360), 548, 0, 0x3FFFFFFFFFFLL, 32, v205, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 340) = 0;
  uint64_t v209 = *((void *)this + 33);
  int v210 = *(_DWORD *)(v209 + 340);
  *(_DWORD *)(v209 + 340) = 0;
  *(_DWORD *)(*((void *)this + 33) + 340) ^= 0xFFFFFF00;
  uint64_t v211 = *((void *)this + 33);
  int v212 = *(_DWORD *)(v211 + 340);
  *(_DWORD *)(v211 + 340) = v210;
  uint64_t v213 = *((void *)this + 32);
  int v214 = *(_DWORD *)(v213 + 5712);
  uint64_t v215 = v213 + 176 * v214;
  if (*(void *)(v215 + 5360) || *(_DWORD *)(v213 + 176 * v214 + 5512) || *(_DWORD *)(v213 + 176 * v214 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v215 + 5360), 340, 0, 0xFFFFFFFFLL, 8, v212, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 552) = 0;
  uint64_t v216 = *((void *)this + 33);
  int v217 = *(_DWORD *)(v216 + 552);
  *(_DWORD *)(v216 + 552) = 0;
  *(_DWORD *)(*((void *)this + 33) + 552) ^= 0x3FFu;
  uint64_t v218 = *((void *)this + 33);
  int v219 = *(_DWORD *)(v218 + 552);
  *(_DWORD *)(v218 + 552) = v217;
  uint64_t v220 = *((void *)this + 32);
  int v221 = *(_DWORD *)(v220 + 5712);
  uint64_t v222 = v220 + 176 * v221;
  if (*(void *)(v222 + 5360) || *(_DWORD *)(v220 + 176 * v221 + 5512) || *(_DWORD *)(v220 + 176 * v221 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v222 + 5360), 552, 0, 0x3FFFFFFFFFFLL, 32, v219, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 348) = 0;
  *(_DWORD *)(*((void *)this + 33) + 560) = 0;
  *(_DWORD *)(*((void *)this + 33) + 352) = 0;
  *(_DWORD *)(*((void *)this + 33) + 564) = 0;
  *(_DWORD *)(*((void *)this + 33) + 356) = 0;
  *(_DWORD *)(*((void *)this + 33) + 568) = 0;
  *(_DWORD *)(*((void *)this + 33) + 360) = 0;
  *(_DWORD *)(*((void *)this + 33) + 572) = 0;
  uint64_t v223 = *((void *)this + 33);
  int v224 = *(_DWORD *)(v223 + 352);
  *(_DWORD *)(v223 + 352) = 0;
  *(_DWORD *)(*((void *)this + 33) + 352) ^= 0xFFFFFF80;
  uint64_t v225 = *((void *)this + 33);
  int v226 = *(_DWORD *)(v225 + 352);
  *(_DWORD *)(v225 + 352) = v224;
  uint64_t v227 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v227 || *(_DWORD *)(v227 + 152) || *(_DWORD *)(v227 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v227, 352, *(_DWORD *)(v227 + 52), 0xFFFFFFFFLL, 7, v226, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v228 = *((void *)this + 33);
  int v229 = *(_DWORD *)(v228 + 564);
  *(_DWORD *)(v228 + 564) = 0;
  *(_DWORD *)(*((void *)this + 33) + 564) ^= 0x3FFu;
  uint64_t v230 = *((void *)this + 33);
  int v231 = *(_DWORD *)(v230 + 564);
  *(_DWORD *)(v230 + 564) = v229;
  uint64_t v232 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v232 || *(_DWORD *)(v232 + 152) || *(_DWORD *)(v232 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v232, 564, *(_DWORD *)(v232 + 52), 0x3FFFFFFFFFFLL, 32, v231, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v233 = *((void *)this + 33);
  int v234 = *(_DWORD *)(v233 + 360);
  *(_DWORD *)(v233 + 360) = 0;
  *(_DWORD *)(*((void *)this + 33) + 360) ^= 0xFFFFFF80;
  uint64_t v235 = *((void *)this + 33);
  int v236 = *(_DWORD *)(v235 + 360);
  *(_DWORD *)(v235 + 360) = v234;
  uint64_t v237 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v237 || *(_DWORD *)(v237 + 152) || *(_DWORD *)(v237 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v237, 360, *(_DWORD *)(v237 + 56), 0xFFFFFFFFLL, 7, v236, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v238 = v3;
  uint64_t v239 = *((void *)this + 33);
  int v240 = *(_DWORD *)(v239 + 572);
  *(_DWORD *)(v239 + 572) = 0;
  *(_DWORD *)(*((void *)this + 33) + 572) ^= 0x3FFu;
  uint64_t v241 = *((void *)this + 33);
  int v242 = *(_DWORD *)(v241 + 572);
  *(_DWORD *)(v241 + 572) = v240;
  uint64_t v243 = *((void *)this + 32);
  uint64_t v244 = *(void *)(v243 + 376 * v6 + 5736);
  if (*(void *)v244 || *(_DWORD *)(v244 + 152) || *(_DWORD *)(v244 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v244, 572, *(_DWORD *)(v244 + 56), 0x3FFFFFFFFFFLL, 32, v242, 4);
    if (result) {
      return result;
    }
    uint64_t v243 = *((void *)this + 32);
  }
  int v245 = *(_DWORD *)(v243 + 2648);
  uint64_t v246 = *((void *)this + 33);
  int v247 = *(_DWORD *)(v246 + 348);
  *(_DWORD *)(v246 + 348) = 0;
  *(_DWORD *)(*((void *)this + 33) + 348) ^= 0xFFFFFF80;
  uint64_t v248 = *((void *)this + 33);
  int v249 = *(_DWORD *)(v248 + 348);
  *(_DWORD *)(v248 + 348) = v247;
  uint64_t v250 = *((void *)this + 32);
  if (v245 == 1)
  {
    uint64_t v251 = *(void *)(v250 + 376 * v6 + 5736);
    if (*(void *)v251 || *(_DWORD *)(v251 + 152) || *(_DWORD *)(v251 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v251, 348, *(_DWORD *)(v251 + 64), 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v252 = *((void *)this + 33);
    int v253 = *(_DWORD *)(v252 + 560);
    *(_DWORD *)(v252 + 560) = 0;
    *(_DWORD *)(*((void *)this + 33) + 560) ^= 0x3FFu;
    uint64_t v254 = *((void *)this + 33);
    int v255 = *(_DWORD *)(v254 + 560);
    *(_DWORD *)(v254 + 560) = v253;
    uint64_t v256 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v256 || *(_DWORD *)(v256 + 152) || *(_DWORD *)(v256 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v256, 560, *(_DWORD *)(v256 + 64), 0x3FFFFFFFFFFLL, 32, v255, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v257 = *((void *)this + 33);
    int v258 = *(_DWORD *)(v257 + 356);
    *(_DWORD *)(v257 + 356) = 0;
    *(_DWORD *)(*((void *)this + 33) + 356) ^= 0xFFFFFF80;
    uint64_t v259 = *((void *)this + 33);
    int v260 = *(_DWORD *)(v259 + 356);
    *(_DWORD *)(v259 + 356) = v258;
    uint64_t v261 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v261 || *(_DWORD *)(v261 + 152) || *(_DWORD *)(v261 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v261, 356, *(_DWORD *)(v261 + 68), 0xFFFFFFFFLL, 7, v260, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v262 = *((void *)this + 33);
    int v263 = *(_DWORD *)(v262 + 568);
    *(_DWORD *)(v262 + 568) = 0;
    *(_DWORD *)(*((void *)this + 33) + 568) ^= 0x3FFu;
    uint64_t v264 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v264 + 568);
    *(_DWORD *)(v264 + 568) = v263;
    uint64_t v266 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v266 || *(_DWORD *)(v266 + 152) || *(_DWORD *)(v266 + 156))
    {
      int v267 = *(_DWORD *)(v266 + 68);
      int v268 = this;
      goto LABEL_207;
    }
  }
  else
  {
    uint64_t v269 = v250 + 376 * v6;
    if (*(void *)(v269 + 5752) || *(_DWORD *)(v250 + 376 * v6 + 5904) || *(_DWORD *)(v250 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v269 + 5752), 348, 0, 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v270 = *((void *)this + 33);
    int v271 = *(_DWORD *)(v270 + 560);
    *(_DWORD *)(v270 + 560) = 0;
    *(_DWORD *)(*((void *)this + 33) + 560) ^= 0x3FFu;
    uint64_t v272 = *((void *)this + 33);
    int v273 = *(_DWORD *)(v272 + 560);
    *(_DWORD *)(v272 + 560) = v271;
    uint64_t v274 = *((void *)this + 32);
    uint64_t v275 = v274 + 376 * v6;
    if (*(void *)(v275 + 5752) || *(_DWORD *)(v274 + 376 * v6 + 5904) || *(_DWORD *)(v274 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v275 + 5752), 560, 0, 0x3FFFFFFFFFFLL, 32, v273, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v276 = *((void *)this + 33);
    int v277 = *(_DWORD *)(v276 + 356);
    *(_DWORD *)(v276 + 356) = 0;
    *(_DWORD *)(*((void *)this + 33) + 356) ^= 0xFFFFFF80;
    uint64_t v278 = *((void *)this + 33);
    int v279 = *(_DWORD *)(v278 + 356);
    *(_DWORD *)(v278 + 356) = v277;
    uint64_t v280 = *((void *)this + 32);
    uint64_t v281 = v280 + 376 * v6;
    if (*(void *)(v281 + 5928) || *(_DWORD *)(v280 + 376 * v6 + 6080) || *(_DWORD *)(v280 + 376 * v6 + 6084))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v281 + 5928), 356, 0, 0xFFFFFFFFLL, 7, v279, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v282 = *((void *)this + 33);
    int v283 = *(_DWORD *)(v282 + 568);
    *(_DWORD *)(v282 + 568) = 0;
    *(_DWORD *)(*((void *)this + 33) + 568) ^= 0x3FFu;
    uint64_t v284 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v284 + 568);
    *(_DWORD *)(v284 + 568) = v283;
    uint64_t v285 = *((void *)this + 32);
    uint64_t v286 = v285 + 376 * v6;
    if (*(void *)(v286 + 5928) || *(_DWORD *)(v285 + 376 * v6 + 6080) || *(_DWORD *)(v285 + 376 * v6 + 6084))
    {
      uint64_t v266 = v286 + 5928;
      int v268 = this;
      int v267 = 0;
LABEL_207:
      uint64_t result = CAHDec::addToPatcherList((uint64_t)v268, (void *)v266, 568, v267, 0x3FFFFFFFFFFLL, 32, v265, 4);
      if (result) {
        return result;
      }
    }
  }
  if (!v383)
  {
    uint64_t v319 = 0;
    uint64_t v320 = 17424;
    do
    {
      uint64_t v321 = *(void *)(*(void *)(*((void *)this + 32) + v320) + 40);
      *(_DWORD *)(*((void *)this + 33) + v319 + 376) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 576) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 388) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 588) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 400) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 600) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 412) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 612) = 0;
      uint64_t v322 = *((void *)this + 33) + v319;
      int v323 = *(_DWORD *)(v322 + 388);
      *(_DWORD *)(v322 + 388) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 388) ^= 0xFFFFFF80;
      uint64_t v324 = *((void *)this + 33) + v319;
      int v325 = *(_DWORD *)(v324 + 388);
      *(_DWORD *)(v324 + 388) = v323;
      uint64_t v326 = *(void *)(v321 + 8);
      if (*(void *)v326 || *(_DWORD *)(v326 + 152) || *(_DWORD *)(v326 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v326, (int)v319 + 388, *(_DWORD *)(v326 + 52), 0xFFFFFFFFLL, 7, v325, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v327 = *((void *)this + 33) + v319;
      int v328 = *(_DWORD *)(v327 + 588);
      *(_DWORD *)(v327 + 588) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 588) ^= 0x3FFu;
      uint64_t v329 = *((void *)this + 33) + v319;
      int v330 = *(_DWORD *)(v329 + 588);
      *(_DWORD *)(v329 + 588) = v328;
      uint64_t v331 = *(void *)(v321 + 8);
      if (*(void *)v331 || *(_DWORD *)(v331 + 152) || *(_DWORD *)(v331 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v331, (int)v319 + 588, *(_DWORD *)(v331 + 52), 0x3FFFFFFFFFFLL, 32, v330, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v332 = *((void *)this + 33) + v319;
      int v333 = *(_DWORD *)(v332 + 412);
      *(_DWORD *)(v332 + 412) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 412) ^= 0xFFFFFF80;
      uint64_t v334 = *((void *)this + 33) + v319;
      int v335 = *(_DWORD *)(v334 + 412);
      *(_DWORD *)(v334 + 412) = v333;
      uint64_t v336 = *(void *)(v321 + 8);
      if (*(void *)v336 || *(_DWORD *)(v336 + 152) || *(_DWORD *)(v336 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v336, (int)v319 + 412, *(_DWORD *)(v336 + 56), 0xFFFFFFFFLL, 7, v335, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v337 = *((void *)this + 33) + v319;
      int v338 = *(_DWORD *)(v337 + 612);
      *(_DWORD *)(v337 + 612) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 612) ^= 0x3FFu;
      uint64_t v339 = *((void *)this + 33) + v319;
      int v340 = *(_DWORD *)(v339 + 612);
      *(_DWORD *)(v339 + 612) = v338;
      uint64_t v341 = *(void *)(v321 + 8);
      if (*(void *)v341 || *(_DWORD *)(v341 + 152) || *(_DWORD *)(v341 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v341, (int)v319 + 612, *(_DWORD *)(v341 + 56), 0x3FFFFFFFFFFLL, 32, v340, 4);
        if (result) {
          return result;
        }
      }
      int v342 = *(_DWORD *)(*((void *)this + 32) + 2648);
      uint64_t v343 = *((void *)this + 33) + v319;
      int v344 = *(_DWORD *)(v343 + 376);
      *(_DWORD *)(v343 + 376) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 376) ^= 0xFFFFFF80;
      uint64_t v345 = *((void *)this + 33) + v319;
      int v346 = *(_DWORD *)(v345 + 376);
      *(_DWORD *)(v345 + 376) = v344;
      if (v342 == 1)
      {
        uint64_t v347 = *(void *)(v321 + 8);
        if (*(void *)v347 || *(_DWORD *)(v347 + 152) || *(_DWORD *)(v347 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v347, (int)v319 + 376, *(_DWORD *)(v347 + 64), 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v348 = *((void *)this + 33) + v319;
        int v349 = *(_DWORD *)(v348 + 576);
        *(_DWORD *)(v348 + 576) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 576) ^= 0x3FFu;
        uint64_t v350 = *((void *)this + 33) + v319;
        int v351 = *(_DWORD *)(v350 + 576);
        *(_DWORD *)(v350 + 576) = v349;
        uint64_t v352 = *(void *)(v321 + 8);
        if (*(void *)v352 || *(_DWORD *)(v352 + 152) || *(_DWORD *)(v352 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v352, (int)v319 + 576, *(_DWORD *)(v352 + 64), 0x3FFFFFFFFFFLL, 32, v351, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v353 = *((void *)this + 33) + v319;
        int v354 = *(_DWORD *)(v353 + 400);
        *(_DWORD *)(v353 + 400) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 400) ^= 0xFFFFFF80;
        uint64_t v355 = *((void *)this + 33) + v319;
        int v356 = *(_DWORD *)(v355 + 400);
        *(_DWORD *)(v355 + 400) = v354;
        uint64_t v357 = *(void *)(v321 + 8);
        if (*(void *)v357 || *(_DWORD *)(v357 + 152) || *(_DWORD *)(v357 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v357, (int)v319 + 400, *(_DWORD *)(v357 + 68), 0xFFFFFFFFLL, 7, v356, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v358 = *((void *)this + 33) + v319;
        int v359 = *(_DWORD *)(v358 + 600);
        *(_DWORD *)(v358 + 600) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 600) ^= 0x3FFu;
        uint64_t v360 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v360 + 600);
        *(_DWORD *)(v360 + 600) = v359;
        uint64_t v362 = *(void *)(v321 + 8);
        if (*(void *)v362 || *(_DWORD *)(v362 + 152) || *(_DWORD *)(v362 + 156))
        {
          int v363 = *(_DWORD *)(v362 + 68);
          int v364 = v319 + 600;
          int v365 = this;
          goto LABEL_298;
        }
      }
      else
      {
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 376, 0, 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v366 = *((void *)this + 33) + v319;
        int v367 = *(_DWORD *)(v366 + 576);
        *(_DWORD *)(v366 + 576) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 576) ^= 0x3FFu;
        uint64_t v368 = *((void *)this + 33) + v319;
        int v369 = *(_DWORD *)(v368 + 576);
        *(_DWORD *)(v368 + 576) = v367;
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 576, 0, 0x3FFFFFFFFFFLL, 32, v369, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v370 = *((void *)this + 33) + v319;
        int v371 = *(_DWORD *)(v370 + 400);
        *(_DWORD *)(v370 + 400) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 400) ^= 0xFFFFFF80;
        uint64_t v372 = *((void *)this + 33) + v319;
        int v373 = *(_DWORD *)(v372 + 400);
        *(_DWORD *)(v372 + 400) = v371;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 200), (int)v319 + 400, 0, 0xFFFFFFFFLL, 7, v373, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v374 = *((void *)this + 33) + v319;
        int v375 = *(_DWORD *)(v374 + 600);
        *(_DWORD *)(v374 + 600) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 600) ^= 0x3FFu;
        uint64_t v376 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v376 + 600);
        *(_DWORD *)(v376 + 600) = v375;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          int v364 = v319 + 600;
          int v365 = this;
          uint64_t v362 = v321 + 200;
          int v363 = 0;
LABEL_298:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v365, (void *)v362, v364, v363, 0x3FFFFFFFFFFLL, 32, v361, 4);
          if (result) {
            return result;
          }
        }
      }
      v320 += 8;
      v319 += 4;
    }
    while (v319 != 12);
  }
  unsigned int v287 = subWidth[*(int *)(*(void *)(*((void *)this + 32) + 17560) + 4)];
  *(_DWORD *)(*((void *)this + 33) + 424) = 0;
  *(_DWORD *)(*((void *)this + 33) + 624) = 0;
  *(_DWORD *)(*((void *)this + 33) + 428) = 0;
  *(_DWORD *)(*((void *)this + 33) + 628) = 0;
  *(_DWORD *)(*((void *)this + 33) + 432) = 0;
  *(_DWORD *)(*((void *)this + 33) + 436) = 0;
  if (*(_DWORD *)(*((void *)this + 32) + 2644))
  {
    uint64_t v288 = *((void *)this + 33);
    int v289 = *(_DWORD *)(v288 + 424);
    *(_DWORD *)(v288 + 424) = 0;
    *(_DWORD *)(*((void *)this + 33) + 424) ^= 0xFFFFFFC0;
    uint64_t v290 = *((void *)this + 33);
    int v291 = *(_DWORD *)(v290 + 424);
    *(_DWORD *)(v290 + 424) = v289;
    uint64_t v292 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v292 || *(_DWORD *)(v292 + 152) || *(_DWORD *)(v292 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v292, 424, *(_DWORD *)(v292 + 52), 0xFFFFFFFFLL, 6, v291, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v293 = *((void *)this + 33);
    int v294 = *(_DWORD *)(v293 + 624);
    *(_DWORD *)(v293 + 624) = 0;
    *(_DWORD *)(*((void *)this + 33) + 624) ^= 0x3FFu;
    uint64_t v295 = *((void *)this + 33);
    int v296 = *(_DWORD *)(v295 + 624);
    *(_DWORD *)(v295 + 624) = v294;
    uint64_t v297 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v297 || *(_DWORD *)(v297 + 152) || *(_DWORD *)(v297 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v297, 624, *(_DWORD *)(v297 + 52), 0x3FFFFFFFFFFLL, 32, v296, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v298 = *((void *)this + 33);
    int v299 = *(_DWORD *)(v298 + 428);
    *(_DWORD *)(v298 + 428) = 0;
    *(_DWORD *)(*((void *)this + 33) + 428) ^= 0xFFFFFFC0;
    uint64_t v300 = *((void *)this + 33);
    int v301 = *(_DWORD *)(v300 + 428);
    *(_DWORD *)(v300 + 428) = v299;
    uint64_t v302 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v302 || *(_DWORD *)(v302 + 152) || *(_DWORD *)(v302 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v302, 428, *(_DWORD *)(v302 + 56), 0xFFFFFFFFLL, 6, v301, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v303 = *((void *)this + 33);
    int v304 = *(_DWORD *)(v303 + 628);
    *(_DWORD *)(v303 + 628) = 0;
    *(_DWORD *)(*((void *)this + 33) + 628) ^= 0x3FFu;
    uint64_t v305 = *((void *)this + 33);
    int v306 = *(_DWORD *)(v305 + 628);
    *(_DWORD *)(v305 + 628) = v304;
    uint64_t v307 = *((void *)this + 32);
    uint64_t v308 = *(void *)(v307 + 11768);
    if (*(void *)v308 || *(_DWORD *)(v308 + 152) || *(_DWORD *)(v308 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v308, 628, *(_DWORD *)(v308 + 56), 0x3FFFFFFFFFFLL, 32, v306, 4);
      if (result) {
        return result;
      }
      uint64_t v307 = *((void *)this + 32);
    }
    if (*(unsigned char *)(v307 + 8))
    {
      *(_DWORD *)(*((void *)this + 33) + 432) = *(_DWORD *)(*((void *)this + 33) + 432) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(v307 + 11768) + 76) >> 6) & 0xFFF) << 6);
      int v309 = (_DWORD *)(*(void *)(*((void *)this + 32) + 11768) + 80);
    }
    else
    {
      if (CAHDecDaisyLgh::getSWRStride(this, *(unsigned __int16 *)(v238 + 148) + 1, *(unsigned __int8 *)(v390 + 105) - 8, *(unsigned __int8 *)(v390 + 105) - 8, v287))return 0xFFFFFFFFLL; {
      *(_DWORD *)(*((void *)this + 33) + 432) = *(_DWORD *)(*((void *)this + 33) + 432) & 0xFFFC003F | (((*((_DWORD *)this + 1135) >> 6) & 0xFFF) << 6);
      }
      int v309 = (_DWORD *)((char *)this + 4544);
    }
    *(_DWORD *)(*((void *)this + 33) + 436) = *(_DWORD *)(*((void *)this + 33) + 436) & 0xFFF8003F | (((*v309 >> 6) & 0x1FFF) << 6);
  }
  if (v385 < 2)
  {
    uint64_t v310 = *((void *)this + 33);
    *(_DWORD *)(v310 + 632) = 65537;
    *(_WORD *)(v310 + 636) = 0;
    *(_WORD *)(v310 + 638) = *(_DWORD *)(v390 + 108) >> 6;
    *(_WORD *)(v310 + 766) = 0;
    *(_WORD *)(v310 + 768) = *(_DWORD *)(v390 + 112) >> 6;
    uint64_t v311 = *((void *)this + 32);
  }
  else
  {
    uint64_t v310 = *((void *)this + 33);
    *(_WORD *)(v310 + 632) = v389;
    uint64_t v311 = *((void *)this + 32);
    if (v386 != 31)
    {
      if (v387 <= 1) {
        uint64_t v312 = 1;
      }
      else {
        uint64_t v312 = v387;
      }
      uint64_t v313 = (unsigned char *)(*(void *)(v311 + 17560) + 2786);
      do
      {
        if (!*v313) {
          *(_WORD *)(v310 + 2 * v384 + 766) = *(_DWORD *)(v313 - 26) >> 3;
        }
        v313 += 1792;
        --v312;
      }
      while (v312);
    }
    *(_WORD *)(v310 + 634) = v387;
    if (v388 != 31)
    {
      uint64_t v314 = *(void *)(v311 + 17560);
      if (v389 <= 1) {
        uint64_t v315 = 1;
      }
      else {
        uint64_t v315 = v389;
      }
      int v316 = (unsigned __int8 *)(v314 + 2786);
      uint64_t v317 = (unsigned __int8 *)(v314 + 2786);
      do
      {
        int v318 = *v317;
        v317 += 28;
        if (!v318) {
          *(_WORD *)(v310 + 2 * v384 + 636) = *(_DWORD *)(v316 - 18) >> 3;
        }
        int v316 = v317;
        --v315;
      }
      while (v315);
    }
  }
  if (*(_DWORD *)(v311 + 2360) != 1) {
    return 0;
  }
  *(_DWORD *)(v310 + 780) = *(_DWORD *)(v310 + 780) & 0xFFFFFFFE | *(_DWORD *)(v311 + 2508) & 1;
  if (*(_DWORD *)(v311 + 2508))
  {
    *(_DWORD *)(v310 + 788) = 0x10000000;
    *(_DWORD *)(v310 + 792) = *(_DWORD *)(v311 + 2368);
    *(void *)(v310 + 800) = 0;
    *(_DWORD *)(v310 + 796) = 0;
    *(_OWORD *)(v310 + 808) = *(_OWORD *)(v311 + 2372);
    long long v377 = *(_OWORD *)(v311 + 2388);
    *(_OWORD *)(v310 + 840) = *(_OWORD *)(v311 + 2404);
    *(_OWORD *)(v310 + 824) = v377;
  }
  *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v311 + 2512) & 1));
  if (*(_DWORD *)(v311 + 2512))
  {
    *(_DWORD *)(v310 + 856) = 0;
    char v378 = *(_DWORD *)(v311 + 2424);
    *(_DWORD *)(v310 + 856) = (*(_DWORD *)(v311 + 2424) & 1) << 22;
    int v379 = ((*(_DWORD *)(v311 + 2420) & 1) << 23) | ((v378 & 1) << 22) | 0x20000000;
    *(_DWORD *)(v310 + 856) = v379;
    *(_DWORD *)(v310 + 856) = v379 | (*(_DWORD *)(v311 + 2364) == 0);
    long long v380 = *(_OWORD *)(v311 + 2428);
    long long v381 = *(_OWORD *)(v311 + 2444);
    *(_OWORD *)(v310 + 892) = *(_OWORD *)(v311 + 2460);
    *(_OWORD *)(v310 + 876) = v381;
    *(_OWORD *)(v310 + 860) = v380;
  }
  *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v311 + 2516) & 1));
  *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v311 + 2520) & 1));
  *(_DWORD *)(*((void *)this + 33) + 780) = *(_DWORD *)(*((void *)this + 33) + 780) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v311 + 2524) & 1));
  if (!*(_DWORD *)(v311 + 2516)) {
    return 0;
  }
  *(_DWORD *)(v310 + 912) = 0;
  if (*(_DWORD *)(v311 + 2476) == 2) {
    int v382 = 805306368;
  }
  else {
    int v382 = 813694976;
  }
  *(_DWORD *)(v310 + 912) = v382;
  memcpy((void *)(v310 + 916), (const void *)(v311 + 2480), 4 * *(unsigned int *)(v311 + 2476));
  uint64_t result = 0;
  *(_DWORD *)(v311 + 2516) = 0;
  return result;
}

uint64_t CAHDecDaisyLgh::getSWRStride(CAHDecDaisyLgh *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *(void *)((char *)this + 4540) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 1135) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 1136) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        BOOL v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecDaisyLgh::getTileStartCTU(CAHDecDaisyLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 632);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecDaisyLgh::getTileEndCTU(CAHDecDaisyLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 632);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecDaisyLgh::populateAvdWork(CAHDecDaisyLgh *this)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  unint64_t v3 = *(unsigned int *)(v2 + 312);
  if (v3)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    LODWORD(v7) = 0;
    int v8 = 0;
    uint64_t v9 = v1 + 4004;
    uint64_t v39 = *(void *)(v2 + 16);
    unint64_t v40 = 0;
    unint64_t v10 = *(unsigned int *)(v2 + 316);
    unint64_t v11 = v10;
    uint64_t v37 = v9;
    uint64_t v38 = *(void *)(*((void *)this + 32) + 17560);
    do
    {
      uint64_t v36 = v5;
      if (v11)
      {
        unint64_t v12 = 0;
        do
        {
          uint64_t v13 = *((void *)this + 32);
          uint64_t v14 = *(void *)(v13 + 17560);
          uint64_t v15 = v14 + v5;
          if (!*(unsigned char *)(v14 + v5 + 2786))
          {
            *(_WORD *)(v9 + 4) = v8;
            *(_WORD *)(v9 + 6) = 0;
            *(_WORD *)(v9 + 10) = v6;
            int v41 = v6;
            int v42 = v8;
            if (*(unsigned char *)(v13 + 2834)) {
              uint64_t v16 = *(void *)(v13 + 2840);
            }
            else {
              uint64_t v16 = *(void *)(v13 + 1048) + 8;
            }
            unint64_t v17 = v39 + *(unsigned int *)(v15 + 2780) - *(void *)v16;
            int v18 = 36 * v7;
            unint64_t v19 = HIDWORD(v17);
            if (*(void *)v16 || *(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1103;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 4022, v17, 0x3FFFFFFFFFFLL, 32, -1, 2);
              if (result) {
                return result;
              }
              if (*(void *)v16) {
                goto LABEL_46;
              }
            }
            if (*(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
LABEL_46:
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1104;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 4024, v17, 0xFFFFFFFFLL, 0, -1, 4);
              if (result) {
                return result;
              }
            }
            unsigned int v21 = (_DWORD *)(v14 + v5);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v14 + v5 + 2776);
            int v22 = *(_DWORD *)(v15 + 2760);
            int v23 = v22 + 7;
            if (v22 >= 0) {
              int v23 = *(_DWORD *)(v15 + 2760);
            }
            int v24 = v21[692];
            *(_DWORD *)(v9 + 28) = (v23 << 13) & 0xFFFF0000 | (v24 / 8);
            int v25 = v21[691];
            int v27 = v25 - 1;
            BOOL v26 = v25 < 1;
            int v28 = v25 + 6;
            if (!v26) {
              int v28 = v27;
            }
            unsigned int v29 = (v28 << 13) & 0xFFFF0000;
            int v30 = v21[693];
            int v31 = v30 - 1;
            BOOL v26 = v30 < 1;
            int v32 = v30 + 6;
            if (!v26) {
              int v32 = v31;
            }
            *(_DWORD *)(v9 + 32) = v29 | (v32 >> 3);
            if (v22 + v24) {
              __int16 v33 = 4;
            }
            else {
              __int16 v33 = 5;
            }
            *(_WORD *)(v9 + 12) = v33;
            unint64_t v3 = *(unsigned int *)(v38 + 312);
            unint64_t v10 = *(unsigned int *)(v38 + 316);
            if (v12 == v10 && v40 == v3) {
              __int16 v35 = 5;
            }
            else {
              __int16 v35 = 4;
            }
            *(_WORD *)(v9 + 14) = v35;
            int v6 = v41 + 1;
            int v8 = v42 + 1;
            v9 += 36;
            unint64_t v7 = 0x8E38E38E38E38E39 * ((v9 - v37) >> 2);
          }
          ++v12;
          v5 += 28;
          unint64_t v11 = v10;
        }
        while (v12 < v10);
      }
      uint64_t v5 = v36 + 1792;
      ++v40;
    }
    while (v40 < v3);
    uint64_t v1 = *((void *)this + 33);
  }
  else
  {
    LOWORD(v8) = 0;
  }
  uint64_t result = 0;
  *(_WORD *)(v1 + 26) = v8;
  *(_DWORD *)(v1 + 32) = 4004;
  return result;
}

unsigned __int8 *CAHDecDaisyLgh::getTileAddr(CAHDecDaisyLgh *this, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  if (*(unsigned char *)(v2 + 2834))
  {
    unint64_t v3 = *(void **)(v2 + 2840);
    uint64_t v4 = &a2[-*v3];
    uint64_t v5 = &v4[v3[2]];
    if ((unint64_t)v5 >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1204;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      unint64_t v7 = (void *)(*(void *)(*((void *)this + 32) + 2840) + 16);
      return &v4[*v7];
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 1048);
    uint64_t v9 = *(void *)(v8 + 24);
    unint64_t v7 = (void *)(v8 + 24);
    uint64_t v4 = &a2[-*(v7 - 2)];
    uint64_t v5 = &v4[v9];
    if ((unint64_t)&v4[v9] >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1221;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      return &v4[*v7];
    }
  }
  return v5;
}

uint64_t CAHDecDaisyLgh::allocWorkBuf_SPS(CAHDecDaisyLgh *this, int *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = *a2 + 31;
  if (*a2 < -31) {
    int v5 = *a2 + 62;
  }
  unsigned int v6 = v5 >> 5;
  int v7 = v4 + 31;
  if (v4 < -31) {
    int v7 = v4 + 62;
  }
  unsigned int v8 = v7 >> 5;
  unsigned int v9 = 32 - __clz(v6 - 1);
  if (v6 >= 2) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  unsigned int v11 = 32 - __clz(v8 - 1);
  if (v8 >= 2) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unsigned int v13 = ((32 << (v12 + v10)) + 127) & 0xFFFFFF80;
  int v14 = 2 * v3 + 62;
  if (2 * v3 >= -31) {
    int v14 = 2 * v3 + 31;
  }
  unsigned int v15 = v14 >> 5;
  int v16 = v4 + 15;
  if (v4 < -15) {
    int v16 = v4 + 30;
  }
  unsigned int v17 = v16 >> 4;
  unsigned int v18 = 32 - __clz(v15 - 1);
  if (v15 >= 2) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  unsigned int v20 = 32 - __clz(v17 - 1);
  if (v17 >= 2) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  *((_DWORD *)this + 1128) = v13;
  *((_DWORD *)this + 1129) = ((8 << (v19 + v21)) + 127) & 0xFFFFFF80;
  unsigned int v22 = ((v4 + 63) >> 6) * ((v3 + 63) >> 6);
  *((_DWORD *)this + 1133) = 576 * v22;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_28:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      char v29 = v28;
      uint64_t v30 = *((unsigned int *)this + 1133);
      if (v30
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 176 * v27 + 5360), v30, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1427;
        __int16 v39 = 2080;
        unint64_t v40 = "MvColo";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v29 & 1) != 0);
    unsigned int v31 = 24 * v22;
    *((_DWORD *)this + 1137) = 24 * v22;
    uint64_t v32 = 3776;
    if (!v31) {
      goto LABEL_34;
    }
LABEL_33:
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v32), v31, 7, 1, 0))
    {
LABEL_34:
      while (v32 != 5008)
      {
        unsigned int v31 = *((_DWORD *)this + 1137);
        v32 += 176;
        if (v31) {
          goto LABEL_33;
        }
      }
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1432;
    __int16 v39 = 2080;
    unint64_t v40 = "segMap";
    __int16 v33 = &_os_log_internal;
  }
  else
  {
    uint64_t v23 = 14608;
    uint64_t v24 = 16;
    while (1)
    {
      uint64_t v25 = *((unsigned int *)this + 1128);
      if (v25
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23 - 2816), v25, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1411;
        __int16 v39 = 2080;
        unint64_t v40 = "HdrY";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      uint64_t v26 = *((unsigned int *)this + 1129);
      if (v26)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23), v26, 7, 1, 0))break; {
      }
        }
      v23 += 176;
      if (!--v24) {
        goto LABEL_28;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1416;
    __int16 v39 = 2080;
    unint64_t v40 = "HdrC";
    __int16 v33 = &_os_log_internal;
  }
LABEL_46:
  _os_log_impl(&dword_223977000, v33, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v35, 0x1Cu);
LABEL_47:
  (*(void (**)(CAHDecDaisyLgh *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecDaisyLgh::allocWorkBuf_PPS(CAHDecDaisyLgh *this, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = *(void *)(v5 + 17560);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 100);
  unsigned int v9 = (*(unsigned __int8 *)(v6 + 105) + 1) & 0x1FE;
  if (v7 == 3) {
    int v10 = 48;
  }
  else {
    int v10 = 32;
  }
  if (!v7) {
    int v10 = 16;
  }
  int v12 = *(_DWORD *)(v6 + 108);
  int v11 = *(_DWORD *)(v6 + 112);
  unsigned int v13 = (v12 + 15) >> 4;
  int v14 = ~(-1 << *(_DWORD *)(v6 + 96));
  signed int v15 = v13 * ((v10 * v9) >> 3) + (v14 << 7);
  if (v15)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 205, v15, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1508;
        __int16 v27 = 2080;
        char v28 = "IpAbove";
        int v16 = &_os_log_internal;
LABEL_34:
        _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  int v17 = 16 * v9;
  if ((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 != 192)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 216, (int)((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 - 192), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1511;
        __int16 v27 = 2080;
        char v28 = "LfAbovePix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
LABEL_35:
      (*(void (**)(CAHDecDaisyLgh *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  signed int v18 = 288 * ((v12 + 63) >> 6) + (v14 << 7);
  if (v18)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 227, v18, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1517;
        __int16 v27 = 2080;
        char v28 = "LfAboveInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  unsigned int v19 = (v11 + 7) >> 3;
  if (v19 * v17)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 238, (int)(v19 * v17), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1523;
        __int16 v27 = 2080;
        char v28 = "LfLeftPix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  uint64_t v20 = ((v11 + 63) >> 2) & 0x3FFFFFF0;
  if (v20)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 249, v20, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1531;
        __int16 v27 = 2080;
        char v28 = "LfLeftInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 260, (int)(24 * v13 + 30), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 1539;
      __int16 v27 = 2080;
      char v28 = "SwLeftPix";
      int v16 = &_os_log_internal;
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  int v22 = 192 * v9 + (v19 + 2) * (((v9 >> 1) << 8) | 8);
  if (!v22) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 271, v22, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 1545;
    __int16 v27 = 2080;
    char v28 = "AZLeftPix";
    int v16 = &_os_log_internal;
    goto LABEL_34;
  }
  return result;
}

uint64_t CAHDecDaisyLgh::freeWorkBuf_SPS(CAHDecDaisyLgh *this)
{
  uint64_t result = *((void *)this + 32);
  if (!*(_DWORD *)(result + 2648))
  {
    uint64_t v3 = 14608;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = (uint64_t *)(result + v3 - 2816);
      if (*v5)
      {
        CAVDDecoder::deallocAVDMem(result, v5);
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3 - 2816) = 0;
      }
      if (*(void *)(result + v3))
      {
        CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + v3));
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3) = 0;
      }
      v3 += 176;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = result + 176 * v6;
    if (*(void *)(v9 + 5360))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(v9 + 5360));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + 176 * v6 + 5360) = 0;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  for (uint64_t i = 3776; i != 5184; i += 176)
  {
    if (*(void *)(result + i))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + i));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + i) = 0;
    }
  }
  return result;
}

uint64_t *CAHDecDaisyLgh::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[432])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 432);
    v2[432] = 0;
  }
  if (v2[454])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 454);
    v2[454] = 0;
  }
  if (v2[410])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 410);
    v2[410] = 0;
  }
  if (v2[476])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 476);
    v2[476] = 0;
  }
  if (v2[498])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 498);
    v2[498] = 0;
  }
  if (v2[520])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 520);
    v2[520] = 0;
  }
  if (v2[542])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 542);
    v2[542] = 0;
  }
  return this;
}

uint64_t CAHDecDaisyLgh::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 15);
  *(_DWORD *)(this + 4528) = a2;
  return this;
}

uint64_t CAHDecDaisyLgh::initPicture(CAHDecDaisyLgh *this)
{
  return 0;
}

uint64_t CAHDecDaisyLgh::populateSlices(CAHDecDaisyLgh *this)
{
  return 0;
}

uint64_t CAHDecDaisyLgh::getTileIdxAbove(CAHDecDaisyLgh *this)
{
  return 0;
}

uint64_t CAHDecDaisyLgh::decodeBuffer(CAHDecDaisyLgh *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecDaisyLgh::decodeBufferSize(CAHDecDaisyLgh *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecDaisyLgh::decHdrYLinAddr(CAHDecDaisyLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 11792);
}

uint64_t CAHDecDaisyLgh::decHdrCLinAddr(CAHDecDaisyLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 14608);
}

uint64_t CAHDecDaisyLgh::decHdrYSize(CAHDecDaisyLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 11836);
}

uint64_t CAHDecDaisyLgh::decHdrCSize(CAHDecDaisyLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 14652);
}

uint64_t CAHDecDaisyLgh::decHdrYStride(CAHDecDaisyLgh *this)
{
  return *((unsigned int *)this + 1130);
}

uint64_t CAHDecDaisyLgh::decHdrCStride(CAHDecDaisyLgh *this)
{
  return *((unsigned int *)this + 1131);
}

void CAHDecDaisyLgh::clearSegBuffer(CAHDecDaisyLgh *this)
{
}

uint64_t AVDFrameReceiver::MakeCurrentThreadTimeConstraintThread(AVDFrameReceiver *this)
{
  mach_timebase_info(&info);
  LODWORD(v2) = info.numer;
  LODWORD(v1) = info.denom;
  *(int32x2_t *)policy_mach_timebase_info info = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmulq_n_f64((float64x2_t)xmmword_223ADC3B0, (double)v1 / (double)v2 * 1000000.0)));
  integer_t v8 = policy_info[0];
  int v9 = 1;
  uint64_t v3 = pthread_self();
  thread_act_t v4 = pthread_mach_thread_np(v3);
  return thread_policy_set(v4, 2u, policy_info, 4u);
}

uint64_t AVDFrameReceiver::AVDFrameReceiver(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)a2;
  *(void *)(result + 48) = *(void *)(a2 + 24);
  *(unsigned char *)(result + 72) = *(unsigned char *)(a2 + 32);
  unint64_t v2 = *(void **)(a2 + 8);
  *(void *)(result + 64) = *(void *)(a2 + 16);
  *(void *)(result + 56) = *v2;
  *(unsigned char *)(result + 74) = *(unsigned char *)(a2 + 33);
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 73) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t AVDFrameReceiver::ChangeBackgroundPolicy(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 72) != a2)
  {
    *(unsigned char *)(this + 72) = a2;
    *(unsigned char *)(this + 73) = 1;
  }
  return this;
}

uint64_t is_av1_ivf_file(int *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!a1 || !a3)
  {
    BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v11) {
      return result;
    }
    int v15 = 136315650;
    int v16 = "is_av1_ivf_file";
    __int16 v17 = 2048;
    *(void *)signed int v18 = a1;
    *(_WORD *)&v18[8] = 2048;
    uint64_t v19 = a3;
    integer_t v8 = &_os_log_internal;
    int v9 = "AppleAVD: %s: buf %p format %p\n";
    uint32_t v10 = 32;
    goto LABEL_8;
  }
  if (a2 <= 0x1F)
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
    int v15 = 136315650;
    int v16 = "is_av1_ivf_file";
    __int16 v17 = 2048;
    *(void *)signed int v18 = a2;
    *(_WORD *)&v18[8] = 1024;
    LODWORD(v19) = 32;
    integer_t v8 = &_os_log_internal;
    int v9 = "AppleAVD: %s: size %zu less than IVF header size %d\n";
    uint32_t v10 = 28;
LABEL_8:
    _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v15, v10);
    return 0;
  }
  int v12 = *a1;
  *(_DWORD *)a3 = *a1;
  int v13 = *((unsigned __int16 *)a1 + 2);
  *(_WORD *)(a3 + 4) = v13;
  int v14 = *((unsigned __int16 *)a1 + 3);
  *(_WORD *)(a3 + 6) = v14;
  *(_DWORD *)(a3 + 8) = a1[2];
  *(_WORD *)(a3 + 12) = *((_WORD *)a1 + 6);
  *(_WORD *)(a3 + 14) = *((_WORD *)a1 + 7);
  *(_DWORD *)(a3 + 16) = a1[4];
  *(_DWORD *)(a3 + 20) = a1[5];
  *(_DWORD *)(a3 + 24) = a1[6];
  if (v12 != 1179208516) {
    return 0;
  }
  if (v13 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315394;
    int v16 = "is_av1_ivf_file";
    __int16 v17 = 1024;
    *(_DWORD *)signed int v18 = v13;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect version 0 got %d\n", (uint8_t *)&v15, 0x12u);
    int v14 = *(unsigned __int16 *)(a3 + 6);
  }
  if (v14 != 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315650;
    int v16 = "is_av1_ivf_file";
    __int16 v17 = 1024;
    *(_DWORD *)signed int v18 = 32;
    *(_WORD *)&v18[4] = 1024;
    *(_DWORD *)&v18[6] = v14;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect header size %d got %d\n", (uint8_t *)&v15, 0x18u);
  }
  return 1;
}

uint64_t is_av1_ivf_frame(_DWORD *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2 >= 0xC && a1 && a3)
  {
    *a3 = *a1;
    a3[1] = a1[1];
    a3[2] = a1[2];
    return 1;
  }
  else
  {
    BOOL v7 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v7)
    {
      int v8 = 136316162;
      int v9 = "is_av1_ivf_frame";
      __int16 v10 = 2048;
      BOOL v11 = a1;
      __int16 v12 = 2048;
      int v13 = a3;
      __int16 v14 = 2048;
      unint64_t v15 = a2;
      __int16 v16 = 1024;
      int v17 = 12;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: buf %p frame %p size %zu expect at least %d\n", (uint8_t *)&v8, 0x30u);
      return 0;
    }
  }
  return result;
}

uint64_t av1_read_obu_next_frame(unsigned char *a1, unint64_t a2, unint64_t *a3, int a4)
{
  if (!a4)
  {
    puts("av1_read_obu_next_frame: obu and not annexb format bitstream NOT supported!");
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = 0xFFFFFFFFLL;
  if (!a1 || !a3) {
    return v4;
  }
  *a3 = 0;
  if (a2 >= 8) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = a2;
  }
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = 7 * v5;
  while (1)
  {
    v7 |= (unint64_t)(*a1 & 0x7F) << v6;
    *a3 = v7;
    int v9 = (char)*a1++;
    if ((v9 & 0x80000000) == 0) {
      break;
    }
    v6 += 7;
    if (v8 == v6) {
      return 0xFFFFFFFFLL;
    }
  }
  if (HIDWORD(v7)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t av1_read_size(uint64_t a1, unint64_t a2, _DWORD *a3, unint64_t *a4)
{
  uint64_t v4 = 0xFFFFFFFFLL;
  if (a1 && a4)
  {
    *a4 = 0;
    uint64_t v5 = 8;
    if (a2 < 8) {
      uint64_t v5 = a2;
    }
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
    char v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    while (1)
    {
      v7 |= (unint64_t)(*(unsigned char *)(a1 + v8) & 0x7F) << v6;
      *a4 = v7;
      if ((*(char *)(a1 + v8) & 0x80000000) == 0) {
        break;
      }
      ++v8;
      v6 += 7;
      if (v5 == v8) {
        return 0xFFFFFFFFLL;
      }
    }
    if (!HIDWORD(v7))
    {
      uint64_t v4 = 0;
      if (a3) {
        *a3 = v8 + 1;
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v4;
}

uint64_t av1_read_next_obu(unsigned __int8 *a1, unint64_t a2, uint64_t *a3, _DWORD *a4, int a5)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!a1 || !a3 || !a4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315138;
      uint64_t v24 = "av1_read_next_obu";
      __int16 v10 = &_os_log_internal;
      BOOL v11 = "AppleAVD: %s: invalid input parameter\n";
LABEL_30:
      _os_log_impl(&dword_223977000, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v23, 0xCu);
    }
    return 0xFFFFFFFFLL;
  }
  if (a5)
  {
    uint64_t v5 = 8;
    if (a2 < 8) {
      uint64_t v5 = a2;
    }
    if (!v5) {
      goto LABEL_15;
    }
    char v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = -v5;
    uint64_t v9 = 1;
    while (1)
    {
      v7 |= (unint64_t)(a1[v9 - 1] & 0x7F) << v6;
      if ((a1[v9 - 1] & 0x80) == 0) {
        break;
      }
      ++v9;
      v6 += 7;
      if (v8 + v9 == 1) {
        goto LABEL_15;
      }
    }
    if (HIDWORD(v7))
    {
LABEL_15:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315138;
        uint64_t v24 = "av1_read_next_obu";
        __int16 v10 = &_os_log_internal;
        BOOL v11 = "AppleAVD: %s: fail to read annexb obu header and payload length\n";
        goto LABEL_30;
      }
      return 0xFFFFFFFFLL;
    }
    *a3 = v9;
    unint64_t v12 = v9 + v7;
    if (v12 > a2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315138;
        uint64_t v24 = "av1_read_next_obu";
        __int16 v10 = &_os_log_internal;
        BOOL v11 = "AppleAVD: %s: bit stream buffer too small for annexb obu\n";
        goto LABEL_30;
      }
      return 0xFFFFFFFFLL;
    }
    a1 += v9;
    a2 -= v9;
    *a3 = v12;
  }
  if (!a2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315138;
      uint64_t v24 = "av1_read_next_obu";
      __int16 v10 = &_os_log_internal;
      BOOL v11 = "AppleAVD: %s: need one extra byte for obu header\n";
      goto LABEL_30;
    }
    return 0xFFFFFFFFLL;
  }
  *a4 = 0;
  unsigned int v13 = (char)*a1;
  a4[1] = (v13 >> 7) & 1;
  if ((v13 & 0x80000000) != 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315138;
      uint64_t v24 = "av1_read_next_obu";
      __int16 v10 = &_os_log_internal;
      BOOL v11 = "AppleAVD: %s: obu forbidden bit shuld not be set\n";
      goto LABEL_30;
    }
    return 0xFFFFFFFFLL;
  }
  a4[2] = (*a1 >> 3) & 0xF;
  int v14 = (*a1 >> 2) & 1;
  a4[4] = v14;
  int v15 = (*a1 >> 1) & 1;
  a4[3] = v15;
  if (!(a5 | v15))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315138;
      uint64_t v24 = "av1_read_next_obu";
      __int16 v10 = &_os_log_internal;
      BOOL v11 = "AppleAVD: %s: raw obu must have size field\n";
      goto LABEL_30;
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t v17 = a2 - 1;
  *a4 = 1;
  if (v14)
  {
    if (a2 == 1)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v23 = 136315138;
      uint64_t v24 = "av1_read_next_obu";
      __int16 v10 = &_os_log_internal;
      BOOL v11 = "AppleAVD: %s: need one extra byts for obu header extension\n";
      goto LABEL_30;
    }
    uint64_t v18 = 2;
    *a4 = 2;
    a4[5] = a1[1] >> 5;
    a4[6] = (a1[1] >> 3) & 3;
    unint64_t v17 = a2 - 2;
  }
  else
  {
    a4[5] = 0;
    a4[6] = 0;
    uint64_t v18 = 1;
  }
  if (a5) {
    return 0;
  }
  if (v17 >= 8) {
    uint64_t v19 = 8;
  }
  else {
    uint64_t v19 = v17;
  }
  if (!v19) {
    goto LABEL_49;
  }
  char v20 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  while (1)
  {
    v21 |= (unint64_t)(a1[v18 + v22] & 0x7F) << v20;
    if ((a1[v18 + v22] & 0x80) == 0) {
      break;
    }
    ++v22;
    v20 += 7;
    if (v19 == v22) {
      goto LABEL_49;
    }
  }
  if (HIDWORD(v21))
  {
LABEL_49:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    int v23 = 136315138;
    uint64_t v24 = "av1_read_next_obu";
    __int16 v10 = &_os_log_internal;
    BOOL v11 = "AppleAVD: %s: fail to read obu size\n";
    goto LABEL_30;
  }
  *a3 = v22 + 1;
  if (v17 < v22 + 1 + v21)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    int v23 = 136315138;
    uint64_t v24 = "av1_read_next_obu";
    __int16 v10 = &_os_log_internal;
    BOOL v11 = "AppleAVD: %s: bit stream buffer too small for obu\n";
    goto LABEL_30;
  }
  uint64_t result = 0;
  *a3 = v18 + v22 + v21 + 1;
  return result;
}

uint64_t av1_get_next_frame(unsigned __int8 *a1, uint64_t a2, int a3, int a4, unsigned int a5, unsigned __int8 **a6, void *a7)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  if (a2 >= 1)
  {
    unint64_t v12 = a1;
    int v13 = 0;
    unint64_t v14 = (unint64_t)&a1[a2];
    BOOL v15 = a3 != 0;
    uint64_t v57 = (uint64_t)&a1[a2 - 1];
    while (1)
    {
      if (a3 && v15)
      {
        if (!is_av1_ivf_frame(v12, (v14 - v12), v64))
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          LOWORD(v58) = 0;
          int v53 = &_os_log_internal;
          int v54 = "AppleAVD: Error: not able to get ivf frame\n";
          unsigned int v55 = (uint8_t *)&v58;
LABEL_99:
          uint32_t v56 = 2;
          goto LABEL_105;
        }
        BOOL v15 = 0;
      }
      uint64_t v63 = 0;
      unint64_t v16 = v14 - (void)v12;
      if (av1_read_next_obu(v12, v14 - (void)v12, &v63, &v58, a4))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        *(_WORD *)CMTime buf = 0;
        int v53 = &_os_log_internal;
        int v54 = "AppleAVD: Error: not able to get next obu\n";
        unsigned int v55 = buf;
        goto LABEL_99;
      }
      if (v59 > 0xF) {
        goto LABEL_82;
      }
      if (((1 << v59) & 0xD8) == 0) {
        break;
      }
      if (!a5 || ((a5 >> v61) & 1) != 0 && ((a5 >> (v62 + 8)) & 1) != 0)
      {
        int v13 = 1;
LABEL_83:
        switch(v59)
        {
          case 3u:
          case 6u:
            if (*a6) {
              return 0;
            }
            *a6 = v12;
            uint64_t v51 = v63;
            *a7 = v63;
            int v13 = 0;
            if (a3)
            {
              v64[0] -= v51;
              BOOL v15 = v64[0] == 0;
            }
            break;
          case 4u:
          case 7u:
            uint64_t v51 = v63;
            *a7 += v63;
            goto LABEL_89;
          default:
            return 0;
        }
        goto LABEL_89;
      }
LABEL_87:
      uint64_t v51 = v63;
LABEL_89:
      v12 += v51;
      if ((unint64_t)v12 >= v14) {
        return 0;
      }
    }
    if (v59 == 5)
    {
      if (!v12) {
        goto LABEL_91;
      }
      uint64_t v21 = v16 >= 8 ? 8 : v14 - (void)v12;
      if (!v21) {
        goto LABEL_91;
      }
      char v22 = 0;
      unint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = (char *)(v12 + 1);
      uint64_t v26 = v57 - (void)v12;
      uint64_t v27 = v57 - (void)v12;
      while (1)
      {
        v23 |= (unint64_t)(v12[v24] & 0x7F) << v22;
        if ((v12[v24] & 0x80) == 0) {
          break;
        }
        ++v24;
        v22 += 7;
        ++v25;
        --v27;
        if (v21 == v24) {
          goto LABEL_91;
        }
      }
      if (HIDWORD(v23))
      {
LABEL_91:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315138;
          uint64_t v66 = "av1_get_next_frame";
          int v53 = &_os_log_internal;
          int v54 = "AppleAVD: %s: fail to read obu size\n";
          goto LABEL_104;
        }
        return 0xFFFFFFFFLL;
      }
      if (v60)
      {
        unint64_t v28 = v26 - v58 - v24;
        if (v28 >= 8) {
          unint64_t v28 = 8;
        }
        if (!v28) {
          goto LABEL_102;
        }
        char v29 = 0;
        unint64_t v30 = 0;
        uint64_t v31 = 0;
        unint64_t v32 = v27 - v58;
        if (v32 >= 8) {
          unint64_t v32 = 8;
        }
        while (1)
        {
          v30 |= (unint64_t)(v25[v58 + v31] & 0x7F) << v29;
          if ((v25[v58 + v31] & 0x80) == 0) {
            break;
          }
          ++v31;
          v29 += 7;
          if (v32 == v31) {
            goto LABEL_102;
          }
        }
        if (HIDWORD(v30))
        {
LABEL_102:
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          *(_DWORD *)CMTime buf = 136315138;
          uint64_t v66 = "av1_get_next_frame";
          int v53 = &_os_log_internal;
          int v54 = "AppleAVD: %s: fail to read obu size\n";
          goto LABEL_104;
        }
        uint64_t v44 = v31 + 1;
      }
      else
      {
        uint64_t v44 = 0;
      }
      uint64_t v45 = v58 + v44;
      unint64_t v46 = v26 - v45 - v24;
      if (v46 >= 8) {
        unint64_t v46 = 8;
      }
      if (!v46) {
        goto LABEL_100;
      }
      uint64_t v47 = 0;
      unint64_t v48 = 0;
      unint64_t v49 = v27 - v45;
      if (v49 >= 8) {
        unint64_t v49 = 8;
      }
      uint64_t v50 = 7 * v49;
      while (1)
      {
        v48 |= (unint64_t)(v25[v45] & 0x7F) << v47;
        if ((v25[v45] & 0x80) == 0) {
          break;
        }
        v47 += 7;
        ++v45;
        if (v50 == v47) {
          goto LABEL_100;
        }
      }
      if (HIDWORD(v48))
      {
LABEL_100:
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 0xFFFFFFFFLL;
        }
        *(_DWORD *)CMTime buf = 136315138;
        uint64_t v66 = "av1_get_next_frame";
        int v53 = &_os_log_internal;
        int v54 = "AppleAVD: %s: fail to read obu size\n";
        goto LABEL_104;
      }
    }
    if (v59 == 15)
    {
      if (a4)
      {
        if (!v12) {
          goto LABEL_93;
        }
        uint64_t v17 = 8;
        if (v16 < 8) {
          uint64_t v17 = v14 - (void)v12;
        }
        if (!v17) {
          goto LABEL_93;
        }
        char v18 = 0;
        unint64_t v19 = 0;
        uint64_t v20 = 0;
        while (1)
        {
          v19 |= (unint64_t)(v12[v20] & 0x7F) << v18;
          if ((v12[v20] & 0x80) == 0) {
            break;
          }
          ++v20;
          v18 += 7;
          if (v17 == v20) {
            goto LABEL_93;
          }
        }
        if (HIDWORD(v19))
        {
LABEL_93:
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          *(_DWORD *)CMTime buf = 136315138;
          uint64_t v66 = "av1_get_next_frame";
          int v53 = &_os_log_internal;
          int v54 = "AppleAVD: %s: fail to read obu size\n";
LABEL_104:
          unsigned int v55 = buf;
          uint32_t v56 = 12;
LABEL_105:
          _os_log_impl(&dword_223977000, v53, OS_LOG_TYPE_DEFAULT, v54, v55, v56);
          return 0xFFFFFFFFLL;
        }
        uint64_t v33 = (v20 + 1);
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v33 = 0;
      }
      if (v60)
      {
        if (!v12) {
          goto LABEL_95;
        }
        uint64_t v34 = v58;
        uint64_t v35 = v16 - (v33 + v58) >= 8 ? 8 : v16 - (v33 + v58);
        if (!v35) {
          goto LABEL_95;
        }
        char v36 = 0;
        unint64_t v37 = 0;
        uint64_t v38 = 0;
        while (1)
        {
          v37 |= (unint64_t)(v12[v33 + v58 + v38] & 0x7F) << v36;
          if ((v12[v33 + v58 + v38] & 0x80) == 0) {
            break;
          }
          ++v38;
          v36 += 7;
          if (v35 == v38) {
            goto LABEL_95;
          }
        }
        if (HIDWORD(v37))
        {
LABEL_95:
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          *(_DWORD *)CMTime buf = 136315138;
          uint64_t v66 = "av1_get_next_frame";
          int v53 = &_os_log_internal;
          int v54 = "AppleAVD: %s: fail to read obu size\n";
          goto LABEL_104;
        }
        uint64_t v40 = v38 + 1;
        if (v37) {
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t v34 = v58;
        BOOL v39 = v19 >= v58;
        unint64_t v37 = v19 - v58;
        if (!v39) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v40 = 0;
        if (v37)
        {
LABEL_63:
          uint64_t v41 = &v12[v34 - 1 + v33 + v37 + v40];
          while (v37)
          {
            --v37;
            int v43 = *v41--;
            int v42 = v43;
            if (v43)
            {
              if (v42 != 128) {
                return 0;
              }
              goto LABEL_82;
            }
          }
          return 0;
        }
      }
    }
LABEL_82:
    if (v13) {
      goto LABEL_83;
    }
    goto LABEL_87;
  }
  return 0;
}

uint64_t av1_populate_film_grain_params(uint64_t a1, int *a2)
{
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t result = !v3;
  if (!v3)
  {
    *(_DWORD *)a1 = 10485761;
    unsigned int v5 = *(_DWORD *)(a1 + 4) & 0xFFFFFFFE | a2[1024] & 1;
    *(_DWORD *)(a1 + 4) = v5;
    unsigned int v6 = v5 & 0xFFFFFFFD | (2 * (a2[1057] & 1));
    *(_DWORD *)(a1 + 4) = v6;
    unsigned int v7 = v6 & 0xFFFFFFF3 | (4 * (a2[1100] & 3));
    *(_DWORD *)(a1 + 4) = v7;
    unsigned int v8 = v7 & 0xFFFFFFCF | (16 * (a2[1101] & 3));
    *(_DWORD *)(a1 + 4) = v8;
    unsigned int v9 = v8 & 0xFFFFFF3F | (((((a2[1176] << 6) + 128) >> 6) & 3) << 6);
    *(_DWORD *)(a1 + 4) = v9;
    unsigned int v10 = v9 & 0xFFFFFCFF | ((a2[1177] & 3) << 8);
    *(_DWORD *)(a1 + 4) = v10;
    unsigned int v11 = v10 & 0xFFFFFBFF | ((a2[1184] & 1) << 10);
    *(_DWORD *)(a1 + 4) = v11;
    unsigned int v12 = v11 & 0xFFFFF7FF | ((a2[1185] & 1) << 11);
    *(_DWORD *)(a1 + 4) = v12;
    unsigned int v13 = v12 & 0xFFFFEFFF | ((a2[31] == 0) << 12);
    *(_DWORD *)(a1 + 4) = v13;
    *(_DWORD *)(a1 + 4) = v13 & 0xFFFC1FFF | ((a2[1186] & 7) << 13) | 0x30000;
    *(_WORD *)(a1 + 8) = a2[1025];
    *(unsigned char *)(a1 + 10) = a2[1028];
    unint64_t v14 = a2 + 1029;
    uint64_t v15 = -14;
    do
    {
      unint64_t v16 = (unsigned char *)(a1 + 25 + v15);
      *unint64_t v16 = v14[14];
      int v17 = *v14++;
      v16[14] = v17;
    }
    while (!__CFADD__(v15++, 1));
    *(unsigned char *)(a1 + 39) = a2[1058];
    *(unsigned char *)(a1 + 60) = a2[1079];
    unint64_t v19 = (unsigned char *)(a1 + 71);
    uint64_t v20 = a2 + 1090;
    uint64_t v21 = 0x3FFFFFFFFFFFFFF6;
    do
    {
      *(v19 - 31) = v20[v21 - 21];
      *(v19 - 21) = v20[v21 - 11];
      *(v19 - 10) = v20[v21];
      *v19++ = v20[v21 + 10];
      ++v21;
    }
    while (v21 * 4);
    for (uint64_t i = 0; i != 24; ++i)
      *(unsigned char *)(a1 + 81 + i) = a2[i + 1102];
    uint64_t v23 = 0;
    uint64_t v24 = a2 + 1151;
    do
    {
      uint64_t v25 = (unsigned char *)(a1 + 130 + v23);
      *(v25 - 25) = *(v24 - 25);
      int v26 = *v24++;
      *uint64_t v25 = v26;
      ++v23;
    }
    while (v23 != 25);
    *(unsigned char *)(a1 + 155) = a2[1178];
    *(unsigned char *)(a1 + 156) = a2[1179];
    *(_WORD *)(a1 + 158) = a2[1180];
    *(unsigned char *)(a1 + 160) = a2[1181];
    *(unsigned char *)(a1 + 161) = a2[1182];
    *(_WORD *)(a1 + 162) = a2[1183];
  }
  return result;
}

void RingBuffer::initRingBuffer(pthread_mutex_t *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  pthread_mutex_lock(this);
  operator new[]();
}

uint64_t RingBuffer::initRingBuffer(pthread_mutex_t *this, char *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  pthread_mutex_lock(this);
  *(void *)&this[1].__opaque[40] = a2;
  *(void *)&this[1].__opaque[48] = &a2[a3];
  this[2].__sig = (uint64_t)a2;
  *(void *)this[2].__opaque = a2;
  *(void *)&this[2].__opaque[16] = a3;
  *(_WORD *)&this[2].__opaque[24] = 0;
  this[2].__opaque[26] = 0;
  pthread_mutex_unlock(this);
  if (!a2) {
    return 4294967293;
  }
  BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v6)
  {
    uint64_t v8 = *(void *)&this[1].__opaque[40];
    int v9 = 136315650;
    unsigned int v10 = "RINGBUFFER";
    __int16 v11 = 2048;
    uint64_t v12 = a3;
    __int16 v13 = 2048;
    uint64_t v14 = v8;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s :## RingBuffer::initRingBuffer(basePtr, size) - size %zu, p_base %p\n\n", (uint8_t *)&v9, 0x20u);
    return 0;
  }
  return result;
}

uint64_t RingBuffer::resetRingBuffer(pthread_mutex_t *this)
{
  pthread_mutex_lock(this);
  uint64_t v2 = *(void *)&this[1].__opaque[40];
  this[2].__sig = v2;
  *(void *)this[2].__opaque = v2;
  pthread_mutex_unlock(this);
  if (v2) {
    return 0;
  }
  else {
    return 4294967293;
  }
}

uint64_t RingBuffer::getRingBufferSize(pthread_mutex_t *this, unint64_t *a2)
{
  *a2 = *(void *)&this[2].__opaque[16];
  pthread_mutex_unlock(this);
  return 0;
}

uint64_t RingBuffer::getRingBufferFullness(pthread_mutex_t *this, uint64_t *a2)
{
  pthread_mutex_lock(this);
  unint64_t sig = this[2].__sig;
  unint64_t v5 = *(void *)this[2].__opaque;
  if (sig == v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    if (sig > v5)
    {
      v5 += *(void *)&this[2].__opaque[8];
      sig += *(void *)&this[1].__opaque[40];
    }
    uint64_t v6 = v5 - sig;
  }
  *a2 = v6;
  pthread_mutex_unlock(this);
  return 0;
}

uint64_t RingBuffer::releaseNewestRingBuffer(RingBuffer *this, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)this);
  if (*((void *)this + 14) > (unint64_t)a3)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *((unsigned __int8 *)this + 161);
      int v12 = 136315394;
      __int16 v13 = "releaseNewestRingBuffer";
      __int16 v14 = 1024;
      int v15 = v6;
      unsigned int v7 = &_os_log_internal;
      uint64_t v8 = "AppleAVD: %s(): ERROR: (p_buffer < p_base) : m_num_buffers_outstanding %d\n";
LABEL_7:
      _os_log_impl(&dword_223977000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v12, 0x12u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if ((unint64_t)&a3[a2] > *((void *)this + 15))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *((unsigned __int8 *)this + 161);
      int v12 = 136315394;
      __int16 v13 = "releaseNewestRingBuffer";
      __int16 v14 = 1024;
      int v15 = v9;
      unsigned int v7 = &_os_log_internal;
      uint64_t v8 = "AppleAVD: %s(): ERROR: (p_buffer + size > p_end) : m_num_buffers_outstanding %d\n";
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v10 = 4294966272;
    goto LABEL_14;
  }
  *((void *)this + 17) = a3;
  if (*((unsigned char *)this + 161))
  {
    --*((unsigned char *)this + 161);
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315394;
    __int16 v13 = "releaseNewestRingBuffer";
    __int16 v14 = 1024;
    int v15 = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR: m_num_buffers_outstanding:%d == 0\n", (uint8_t *)&v12, 0x12u);
  }
  pthread_cond_signal((pthread_cond_t *)((char *)this + 64));
  uint64_t v10 = 0;
LABEL_14:
  pthread_mutex_unlock((pthread_mutex_t *)this);
  kdebug_trace();
  return v10;
}

uint64_t RingBuffer::getBuffersOutstanding(pthread_mutex_t *this, unsigned __int8 *a2)
{
  *a2 = this[2].__opaque[25];
  pthread_mutex_unlock(this);
  return 0;
}

uint64_t BufferPool::setFrameInfo(uint64_t a1, unsigned int a2, long long *a3)
{
  if (*(_DWORD *)(a1 + 136) <= a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = *(void *)(a1 + 120) + 184 * a2;
  long long v6 = *a3;
  long long v7 = a3[2];
  *(_OWORD *)(v5 + 64) = a3[1];
  *(_OWORD *)(v5 + 80) = v7;
  *(_OWORD *)(v5 + 48) = v6;
  long long v8 = a3[3];
  long long v9 = a3[4];
  long long v10 = a3[5];
  *(void *)(v5 + 144) = *((void *)a3 + 12);
  *(_OWORD *)(v5 + 112) = v9;
  *(_OWORD *)(v5 + 128) = v10;
  *(_OWORD *)(v5 + 96) = v8;
  return result;
}

uint64_t BufferPool::pthreadCondTimedWait(BufferPool *this, _opaque_pthread_mutex_t *a2, _opaque_pthread_cond_t *a3, uint64_t a4)
{
  gettimeofday(&v9, 0);
  unint64_t v7 = 1000000 * a4 + 1000 * v9.tv_usec;
  v10.tv_sec = v9.tv_sec + v7 / 0x3B9ACA00;
  v10.tv_nsec = v7 % 0x3B9ACA00;
  return pthread_cond_timedwait(a3, a2, &v10);
}

uint64_t BufferPool::getSecondBufferAndLink(uint64_t a1, unsigned int a2, unsigned int *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = BufferPool::getBuffer(a1, a3, a4, 0, a5, a6);
  if (!result) {
    *(_DWORD *)(*(void *)(a1 + 120) + 184 * a2 + 152) = *a3;
  }
  return result;
}

uint64_t BufferPool::shallowCloneBuffer(BufferPool *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v13 = 0;
  if (*((_DWORD *)this + 34) <= a2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 134218240;
      int v15 = this;
      __int16 v16 = 1024;
      unsigned int v17 = a2;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: BufferPool::shallowCloneBuffer:(%p) index = %u is invalid!", buf, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t result = BufferPool::getBufferInfo((uint64_t)this, a2, &v13);
    if (!result && v13)
    {
      if (*((unsigned char *)this + 160)) {
        unint64_t v7 = *(__CVBuffer **)(v13 + 16);
      }
      else {
        unint64_t v7 = 0;
      }
      uint64_t v8 = *(void *)(v13 + 160);
      int v9 = *(_DWORD *)(v13 + 40);
      if (v8)
      {
        uint64_t v10 = *(void *)(v13 + 168);
        __int16 v11 = this;
        int v12 = a3;
      }
      else
      {
        __int16 v11 = this;
        int v12 = a3;
        uint64_t v8 = 0;
        uint64_t v10 = 0;
      }
      return BufferPool::getBuffer((uint64_t)v11, v12, v9, v7, v8, v10);
    }
  }
  return result;
}

uint64_t BufferPool::setCVPixelBufferPool(pthread_mutex_t *this, __CVPixelBufferPool *a2)
{
  this[2].__unint64_t sig = (uint64_t)a2;
  pthread_mutex_unlock(this);
  return 0;
}

uint64_t BufferPool::unmapBuffer(BufferPool *this, uint64_t a2, unsigned int a3, char a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  pthread_mutex_lock((pthread_mutex_t *)this);
  if (*((_DWORD *)this + 34) <= a2 || (uint64_t v8 = *((void *)this + 15)) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 136315394;
      unint64_t v19 = "unmapBuffer";
      __int16 v20 = 1024;
      int v21 = a2;
      __int16 v11 = &_os_log_internal;
      int v12 = "AppleAVD: ERROR: %s(): index %d \n";
      uint32_t v13 = 18;
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v14 = 0xFFFFFFFFLL;
    goto LABEL_11;
  }
  unsigned int v9 = a2;
  if ((a4 & 1) == 0)
  {
    unsigned int v10 = *(_DWORD *)(v8 + 184 * a2 + 40);
    if (v10 > a3)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = 136315906;
        unint64_t v19 = "unmapBuffer";
        __int16 v20 = 1024;
        int v21 = a2;
        __int16 v22 = 1024;
        unsigned int v23 = a3;
        __int16 v24 = 1024;
        int v25 = v10;
        __int16 v11 = &_os_log_internal;
        int v12 = "AppleAVD: WARNING: %s(): index: %d - trying to release! frameNum (%d) < get frameNum (%d), returning early!";
        uint32_t v13 = 30;
LABEL_9:
        _os_log_impl(&dword_223977000, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v18, v13);
        goto LABEL_10;
      }
      goto LABEL_10;
    }
  }
  int v16 = *(_DWORD *)(v8 + 184 * a2);
  if (v16 != 1)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    unsigned int v17 = *((_DWORD *)this + 35);
    int v18 = 136316162;
    unint64_t v19 = "unmapBuffer";
    __int16 v20 = 1024;
    int v21 = a3;
    __int16 v22 = 1024;
    unsigned int v23 = v17;
    __int16 v24 = 1024;
    int v25 = a2;
    __int16 v26 = 1024;
    int v27 = v16;
    __int16 v11 = &_os_log_internal;
    int v12 = "AppleAVD: WARNING: %s(): frameNum %d - BufferPoolId[%d]: Index %d is not in use! in_use: %d\n";
    uint32_t v13 = 36;
    goto LABEL_9;
  }
  if (*(unsigned char *)(v8 + 184 * a2 + 176))
  {
    AppleAVDUnmapPixelBuffer(*((void *)this + 18), a2);
    uint64_t v14 = 0;
    *(unsigned char *)(*((void *)this + 15) + 184 * v9 + 176) = 0;
  }
  else
  {
    uint64_t v14 = 0;
  }
LABEL_11:
  pthread_mutex_unlock((pthread_mutex_t *)this);
  return v14;
}

CAHDecThymeAvx *createThymeAvxDecoder(void **a1)
{
  uint64_t v2 = (CAHDecThymeAvx *)operator new(0x1060uLL, MEMORY[0x263F8C180]);
  BOOL v3 = v2;
  if (v2) {
    CAHDecThymeAvx::CAHDecThymeAvx(v2, a1);
  }
  return v3;
}

void sub_223ABB76C(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecThymeAvx::CAHDecThymeAvx(CAHDecThymeAvx *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D742338;
  *(_DWORD *)(v1 + 456) = 198136;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecThymeAvx::CAHDecThymeAvx(CAHDecThymeAvx *this, void **a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D742338;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 198136;
  *(_DWORD *)(v4 + 8) = 1528;
  *(_OWORD *)(v4 + 16) = xmmword_223ADC3E0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 198136, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315394;
      __int16 v22 = "CAHDecThymeAvx";
      __int16 v23 = 1024;
      int v24 = 0;
      uint64_t v5 = &_os_log_internal;
      long long v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  uint64_t v8 = *((void *)this + 35);
  *((_DWORD *)this + 13) = 0;
  *((void *)this + 33) = v8;
  *((void *)this + 34) = v8;
  bzero(a2 + 384, 0x1340uLL);
  bzero(a2[1000], 0x1500uLL);
  bzero((char *)this + 464, 0xE70uLL);
  bzero(a2 + 1001, 0x1E18uLL);
  uint64_t v9 = 0;
  *((void *)this + 520) = 0;
  *((_OWORD *)this + 261) = 0u;
  uint64_t v10 = 9168;
  *((_DWORD *)this + 1045) = 9168;
  uint64_t v11 = *((void *)this + 32);
LABEL_5:
  if (CAVDDecoder::allocAVDMem(v11, (_OWORD *)(v11 + v9 + 10304), v10, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315650;
      __int16 v22 = "CAHDecThymeAvx";
      __int16 v23 = 1024;
      int v24 = 168;
      __int16 v25 = 2080;
      __int16 v26 = "probs_Buf";
      uint64_t v5 = &_os_log_internal;
      long long v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v11 = *((void *)this + 32);
  while (1)
  {
    uint64_t v12 = *(void *)(v11 + v9 + 10304);
    if (v12) {
      *(void *)(v11 + v9 + 10296) = v12;
    }
    if (v9 == 2208) {
      break;
    }
    uint64_t v10 = *((unsigned int *)this + 1045);
    v9 += 184;
    if (*((_DWORD *)this + 1045)) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = *(void *)(v11 + 42392);
  if (v13)
  {
    uint64_t v14 = 0;
    int v15 = (void *)(v13 + 1960);
    do
    {
      *int v15 = v11 + 10296 + v14;
      v14 += 184;
      v15 += 254;
    }
    while (v14 != 2392);
  }
  uint64_t v16 = 0;
  for (uint64_t i = 12696; ; i += 184)
  {
    uint64_t v18 = *((unsigned int *)this + 1045);
    uint64_t v19 = *((void *)this + 32);
    if (v18) {
      break;
    }
LABEL_19:
    uint64_t v20 = *(void *)(v19 + i);
    if (v20) {
      *(void *)(v19 + i - 8) = v20;
    }
    if (*(void *)(v19 + 15952)) {
      AV1_Syntax::Set_Default_Frame_Context_Info(*(void *)(v19 + 15952), (uint64_t *)(v19 + i - 8), v16);
    }
    if (++v16 == 4) {
      return;
    }
  }
  if (!CAVDDecoder::allocAVDMem(v19, (_OWORD *)(v19 + i), v18, 7, 1, 0))
  {
    uint64_t v19 = *((void *)this + 32);
    goto LABEL_19;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 136315650;
    __int16 v22 = "CAHDecThymeAvx";
    __int16 v23 = 1024;
    int v24 = 183;
    __int16 v25 = 2080;
    __int16 v26 = "probs_Buf";
    uint64_t v5 = &_os_log_internal;
    long long v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_29:
    uint32_t v7 = 28;
LABEL_30:
    _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v21, v7);
  }
LABEL_31:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_223ABBB54(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecThymeAvx::~CAHDecThymeAvx(CAHDecThymeAvx *this)
{
  uint64_t v2 = 0;
  *(void *)this = &unk_26D742338;
  uint64_t v3 = *((void *)this + 32);
  do
  {
    if (*(void *)(v3 + v2 + 10304))
    {
      CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + v2 + 10304));
      uint64_t v3 = *((void *)this + 32);
      *(_OWORD *)(v3 + v2 + 10296) = 0u;
    }
    v2 += 184;
  }
  while (v2 != 2392);
  for (uint64_t i = 0; i != 736; i += 184)
  {
    if (*(void *)(v3 + i + 12696))
    {
      CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 12696));
      uint64_t v3 = *((void *)this + 32);
      *(_OWORD *)(v3 + i + 12688) = 0u;
    }
  }
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(v3, (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecThymeAvx::~CAHDecThymeAvx(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecThymeAvx::startPicture(CAHDecThymeAvx *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  uint64_t v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x305F8uLL);
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    uint64_t v6 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v6 + 16) = a2;
    *(_WORD *)(v6 + 24) = 257;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecThymeAvx::DecodePicture(CAHDecThymeAvx *this, uint64_t a2)
{
  if (CAHDecThymeAvx::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecThymeAvx *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecThymeAvx *))(*(void *)this + 48))(this);
  if ((*(unsigned int (**)(CAHDecThymeAvx *))(*(void *)this + 56))(this)
    || CAHDecThymeAvx::populateAddressRegisters(this)
    || CAHDecThymeAvx::populateDecryptionRegisters(this))
  {
    return 4;
  }
  CAHDecThymeAvx::populateTiles(this);
  CAHDecThymeAvx::populateAvxVPDependency((CAVDAvxDecoder **)this);
  (*(void (**)(CAHDecThymeAvx *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecThymeAvx *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecThymeAvx::populateAddressRegisters(CAHDecThymeAvx *this)
{
  uint64_t v2 = 0;
  uint64_t v332 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 264;
  uint64_t v4 = (char *)this + 464;
  do
  {
    *(_DWORD *)(*(void *)v3 + v2 + 456) = 0;
    uint64_t v5 = *(void *)v3 + v2;
    int v6 = *(_DWORD *)(v5 + 456);
    *(_DWORD *)(v5 + 456) = 0;
    *(_DWORD *)(*(void *)v3 + v2 + 456) ^= 0xFFFFFF00;
    uint64_t v7 = *(void *)v3 + v2;
    int v8 = *(_DWORD *)(v7 + 456);
    *(_DWORD *)(v7 + 456) = v6;
    if (*(void *)v4 || *((_DWORD *)v4 + 38) || *((_DWORD *)v4 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v4, (int)v2 + 456, 0, 0xFFFFFFFFLL, 8, v8, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v3 + v2 + 484) = 0;
    uint64_t v10 = *(void *)v3 + v2;
    int v11 = *(_DWORD *)(v10 + 484);
    *(_DWORD *)(v10 + 484) = 0;
    *(_DWORD *)(*(void *)v3 + v2 + 484) ^= 0x3FFu;
    uint64_t v12 = *(void *)v3 + v2;
    int v13 = *(_DWORD *)(v12 + 484);
    *(_DWORD *)(v12 + 484) = v11;
    if (*(void *)v4 || *((_DWORD *)v4 + 38) || *((_DWORD *)v4 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v4, (int)v2 + 484, 0, 0x3FFFFFFFFFFLL, 32, v13, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v2 + 512) = 0;
    *(_DWORD *)(*((void *)this + 33) + v2 + 512) = *(_DWORD *)(*((void *)this + 33) + v2 + 512) & 0x800001FF | (((*((_DWORD *)this + 1044) >> 9) & 0x3FFFFF) << 9);
    v2 += 4;
    v4 += 176;
  }
  while (v2 != 28);
  uint64_t v14 = *((void *)this + 32);
  uint64_t v15 = *(void *)(*(void *)(v14 + 15944) + 79288);
  uint64_t v16 = *(void *)(*(void *)(*(void *)(v14 + 42424) + 1920) + 1960);
  *(_DWORD *)(*((void *)this + 33) + 540) = 0;
  uint64_t v17 = *((void *)this + 33);
  int v18 = *(_DWORD *)(v17 + 540);
  *(_DWORD *)(v17 + 540) = 0;
  *(_DWORD *)(*((void *)this + 33) + 540) ^= 0xFFFFFF00;
  uint64_t v19 = *((void *)this + 33);
  int v20 = *(_DWORD *)(v19 + 540);
  *(_DWORD *)(v19 + 540) = v18;
  if (!*(void *)(v16 + 8) && !*(_DWORD *)(v16 + 160) && !*(_DWORD *)(v16 + 164)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v16 + 8), 540, 0, 0xFFFFFFFFLL, 8, v20, 4),
        !result))
  {
    if ((*(_DWORD *)(*(void *)v3 + 544) = 0,
          int v21 = *(_DWORD *)(*(void *)v3 + 544),
          *(_DWORD *)(*(void *)v3 + 544) = 0,
          *(_DWORD *)(*(void *)v3 + 544) ^= 0x3FFu,
          int v22 = *(_DWORD *)(*(void *)v3 + 544),
          *(_DWORD *)(*(void *)v3 + 544) = v21,
          !*(void *)(v16 + 8))
      && !*(_DWORD *)(v16 + 160)
      && !*(_DWORD *)(v16 + 164)
      || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v16 + 8), 544, 0, 0x3FFFFFFFFFFLL, 32, v22, 4),
          !result))
    {
      if ((*(_DWORD *)(*(void *)v3 + 548) = 0,
            int v23 = *(_DWORD *)(*(void *)v3 + 548),
            *(_DWORD *)(*(void *)v3 + 548) = 0,
            *(_DWORD *)(*(void *)v3 + 548) ^= 0xFFFFFF00,
            int v24 = *(_DWORD *)(*(void *)v3 + 548),
            *(_DWORD *)(*(void *)v3 + 548) = v23,
            !*(void *)(v15 + 8))
        && !*(_DWORD *)(v15 + 160)
        && !*(_DWORD *)(v15 + 164)
        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v15 + 8), 548, 0, 0xFFFFFFFFLL, 8, v24, 4),
            !result))
      {
        if ((*(_DWORD *)(*(void *)v3 + 552) = 0,
              int v25 = *(_DWORD *)(*(void *)v3 + 552),
              *(_DWORD *)(*(void *)v3 + 552) = 0,
              *(_DWORD *)(*(void *)v3 + 552) ^= 0x3FFu,
              int v26 = *(_DWORD *)(*(void *)v3 + 552),
              *(_DWORD *)(*(void *)v3 + 552) = v25,
              !*(void *)(v15 + 8))
          && !*(_DWORD *)(v15 + 160)
          && !*(_DWORD *)(v15 + 164)
          || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v15 + 8), 552, 0, 0x3FFFFFFFFFFLL, 32, v26, 4),
              !result))
        {
          *(_DWORD *)(*((void *)this + 33) + 556) = 0;
          uint64_t v27 = *((void *)this + 33);
          int v28 = *(_DWORD *)(v27 + 556);
          *(_DWORD *)(v27 + 556) = 0;
          *(_DWORD *)(*((void *)this + 33) + 556) ^= 0xFFFFFF00;
          uint64_t v29 = *((void *)this + 33);
          int v30 = *(_DWORD *)(v29 + 556);
          *(_DWORD *)(v29 + 556) = v28;
          if (!*((void *)this + 212) && !*((_DWORD *)this + 462) && !*((_DWORD *)this + 463)) {
            goto LABEL_355;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 212, 556, 0, 0xFFFFFFFFLL, 8, v30, 4);
          if (!result)
          {
LABEL_355:
            if ((*(_DWORD *)(*(void *)v3 + 560) = 0,
                  int v31 = *(_DWORD *)(*(void *)v3 + 560),
                  *(_DWORD *)(*(void *)v3 + 560) = 0,
                  *(_DWORD *)(*(void *)v3 + 560) ^= 0x3FFu,
                  int v32 = *(_DWORD *)(*(void *)v3 + 560),
                  *(_DWORD *)(*(void *)v3 + 560) = v31,
                  !*((void *)this + 212))
              && !*((_DWORD *)this + 462)
              && !*((_DWORD *)this + 463)
              || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 212, 560, 0, 0x3FFFFFFFFFFLL, 32, v32, 4), !result))
            {
              *(_DWORD *)(*((void *)this + 33) + 564) = 0;
              *(_DWORD *)(*((void *)this + 33) + 568) = 0;
              if (!*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312)) {
                goto LABEL_44;
              }
              uint64_t v33 = *((void *)this + 33);
              int v34 = *(_DWORD *)(v33 + 564);
              *(_DWORD *)(v33 + 564) = 0;
              *(_DWORD *)(*((void *)this + 33) + 564) ^= 0xFFFFFF00;
              uint64_t v35 = *((void *)this + 33);
              int v36 = *(_DWORD *)(v35 + 564);
              *(_DWORD *)(v35 + 564) = v34;
              uint64_t v37 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312);
              if (!*(void *)(v37 + 8) && !*(_DWORD *)(v37 + 160) && !*(_DWORD *)(v37 + 164)) {
                goto LABEL_356;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v37 + 8), 564, 0, 0xFFFFFFFFLL, 8, v36, 4);
              if (!result)
              {
LABEL_356:
                uint64_t v38 = *((void *)this + 33);
                int v39 = *(_DWORD *)(v38 + 568);
                *(_DWORD *)(v38 + 568) = 0;
                *(_DWORD *)(*((void *)this + 33) + 568) ^= 0x3FFu;
                uint64_t v40 = *((void *)this + 33);
                int v41 = *(_DWORD *)(v40 + 568);
                *(_DWORD *)(v40 + 568) = v39;
                uint64_t v42 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312);
                if (!*(void *)(v42 + 8) && !*(_DWORD *)(v42 + 160) && !*(_DWORD *)(v42 + 164)) {
                  goto LABEL_44;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v42 + 8), 568, 0, 0x3FFFFFFFFFFLL, 32, v41, 4);
                if (!result)
                {
LABEL_44:
                  *(_DWORD *)(*((void *)this + 33) + 572) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 576) = 0;
                  if (!*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304)) {
                    goto LABEL_346;
                  }
                  uint64_t v43 = *((void *)this + 33);
                  int v44 = *(_DWORD *)(v43 + 572);
                  *(_DWORD *)(v43 + 572) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 572) ^= 0xFFFFFF00;
                  uint64_t v45 = *((void *)this + 33);
                  int v46 = *(_DWORD *)(v45 + 572);
                  *(_DWORD *)(v45 + 572) = v44;
                  uint64_t v47 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304);
                  if (!*(void *)(v47 + 8) && !*(_DWORD *)(v47 + 160) && !*(_DWORD *)(v47 + 164)) {
                    goto LABEL_347;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v47 + 8), 572, 0, 0xFFFFFFFFLL, 8, v46, 4);
                  if (!result)
                  {
LABEL_347:
                    uint64_t v48 = *((void *)this + 33);
                    int v49 = *(_DWORD *)(v48 + 576);
                    *(_DWORD *)(v48 + 576) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 576) ^= 0x3FFu;
                    uint64_t v50 = *((void *)this + 33);
                    int v51 = *(_DWORD *)(v50 + 576);
                    *(_DWORD *)(v50 + 576) = v49;
                    uint64_t v52 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304);
                    if (!*(void *)(v52 + 8) && !*(_DWORD *)(v52 + 160) && !*(_DWORD *)(v52 + 164)) {
                      goto LABEL_346;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v52 + 8), 576, 0, 0x3FFFFFFFFFFLL, 32, v51, 4);
                    if (!result)
                    {
LABEL_346:
                      *(_DWORD *)(*((void *)this + 33) + 580) = 0;
                      uint64_t v53 = *((void *)this + 33);
                      int v54 = *(_DWORD *)(v53 + 580);
                      *(_DWORD *)(v53 + 580) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 580) ^= 0xFFFFFF00;
                      uint64_t v55 = *((void *)this + 33);
                      int v56 = *(_DWORD *)(v55 + 580);
                      *(_DWORD *)(v55 + 580) = v54;
                      uint64_t v57 = *(void *)(*(void *)(*((void *)this + 32) + 42424) + 1920);
                      if (!*(void *)(v57 + 136) && !*(_DWORD *)(v57 + 288) && !*(_DWORD *)(v57 + 292)) {
                        goto LABEL_348;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v57 + 136), 580, 0, 0xFFFFFFFFLL, 8, v56, 4);
                      if (!result)
                      {
LABEL_348:
                        *(_DWORD *)(*((void *)this + 33) + 584) = 0;
                        uint64_t v58 = *((void *)this + 33);
                        int v59 = *(_DWORD *)(v58 + 584);
                        *(_DWORD *)(v58 + 584) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 584) ^= 0x3FFu;
                        uint64_t v60 = *((void *)this + 33);
                        int v61 = *(_DWORD *)(v60 + 584);
                        *(_DWORD *)(v60 + 584) = v59;
                        uint64_t v62 = *(void *)(*(void *)(*((void *)this + 32) + 42424) + 1920);
                        if (!*(void *)(v62 + 136) && !*(_DWORD *)(v62 + 288) && !*(_DWORD *)(v62 + 292)) {
                          goto LABEL_349;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v62 + 136), 584, 0, 0x3FFFFFFFFFFLL, 32, v61, 4);
                        if (!result)
                        {
LABEL_349:
                          *(_DWORD *)(*((void *)this + 33) + 588) = 0;
                          uint64_t v63 = *((void *)this + 33);
                          int v64 = *(_DWORD *)(v63 + 588);
                          *(_DWORD *)(v63 + 588) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 588) ^= 0xFFFFFF00;
                          uint64_t v65 = *((void *)this + 33);
                          int v66 = *(_DWORD *)(v65 + 588);
                          *(_DWORD *)(v65 + 588) = v64;
                          uint64_t v67 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78568);
                          if (!*v67
                            && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78720)
                            && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78724))
                          {
                            goto LABEL_350;
                          }
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v67, 588, 0, 0xFFFFFFFFLL, 8, v66, 4);
                          if (!result)
                          {
LABEL_350:
                            *(_DWORD *)(*((void *)this + 33) + 592) = 0;
                            uint64_t v68 = *((void *)this + 33);
                            int v69 = *(_DWORD *)(v68 + 592);
                            *(_DWORD *)(v68 + 592) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 592) ^= 0x3FFu;
                            uint64_t v70 = *((void *)this + 33);
                            int v71 = *(_DWORD *)(v70 + 592);
                            *(_DWORD *)(v70 + 592) = v69;
                            int v72 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78568);
                            if (!*v72
                              && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78720)
                              && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78724))
                            {
                              goto LABEL_351;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v72, 592, 0, 0x3FFFFFFFFFFLL, 32, v71, 4);
                            if (!result)
                            {
LABEL_351:
                              *(_DWORD *)(*((void *)this + 33) + 596) = 0;
                              uint64_t v73 = *((void *)this + 33);
                              int v74 = *(_DWORD *)(v73 + 596);
                              *(_DWORD *)(v73 + 596) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 596) ^= 0xFFFFFF00;
                              uint64_t v75 = *((void *)this + 33);
                              int v76 = *(_DWORD *)(v75 + 596);
                              *(_DWORD *)(v75 + 596) = v74;
                              uint64_t v77 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78792);
                              if (!*v77
                                && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78944)
                                && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78948))
                              {
                                goto LABEL_352;
                              }
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v77, 596, 0, 0xFFFFFFFFLL, 8, v76, 4);
                              if (!result)
                              {
LABEL_352:
                                *(_DWORD *)(*((void *)this + 33) + 600) = 0;
                                uint64_t v78 = *((void *)this + 33);
                                int v79 = *(_DWORD *)(v78 + 600);
                                *(_DWORD *)(v78 + 600) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 600) ^= 0x3FFu;
                                uint64_t v80 = *((void *)this + 33);
                                int v81 = *(_DWORD *)(v80 + 600);
                                *(_DWORD *)(v80 + 600) = v79;
                                uint64_t v82 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78792);
                                if (!*v82
                                  && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78944)
                                  && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78948))
                                {
                                  goto LABEL_353;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v82, 600, 0, 0x3FFFFFFFFFFLL, 32, v81, 4);
                                if (!result)
                                {
LABEL_353:
                                  *(_DWORD *)(*((void *)this + 33) + 604) = 0;
                                  uint64_t v83 = *((void *)this + 33);
                                  int v84 = *(_DWORD *)(v83 + 604);
                                  *(_DWORD *)(v83 + 604) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 604) ^= 0xFFFFFF00;
                                  uint64_t v85 = *((void *)this + 33);
                                  int v86 = *(_DWORD *)(v85 + 604);
                                  *(_DWORD *)(v85 + 604) = v84;
                                  int v87 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 79016);
                                  if (!*v87
                                    && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79168)
                                    && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79172))
                                  {
                                    goto LABEL_354;
                                  }
                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v87, 604, 0, 0xFFFFFFFFLL, 8, v86, 4);
                                  if (!result)
                                  {
LABEL_354:
                                    *(_DWORD *)(*((void *)this + 33) + 608) = 0;
                                    uint64_t v88 = *((void *)this + 33);
                                    int v89 = *(_DWORD *)(v88 + 608);
                                    *(_DWORD *)(v88 + 608) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 608) ^= 0x3FFu;
                                    uint64_t v90 = *((void *)this + 33);
                                    int v91 = *(_DWORD *)(v90 + 608);
                                    *(_DWORD *)(v90 + 608) = v89;
                                    int v92 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 79016);
                                    if (!*v92
                                      && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79168)
                                      && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79172))
                                    {
                                      goto LABEL_85;
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v92, 608, 0, 0x3FFFFFFFFFFLL, 32, v91, 4);
                                    if (!result)
                                    {
LABEL_85:
                                      *(_DWORD *)(*((void *)this + 33) + 612) = 0;
                                      *(_DWORD *)(*((void *)this + 33) + 616) = 0;
                                      uint64_t v93 = *((void *)this + 32);
                                      if (!*(unsigned char *)(v93 + 2652)) {
                                        goto LABEL_345;
                                      }
                                      uint64_t v94 = *(void *)(v93 + 2680);
                                      long long v330 = 0u;
                                      long long v331 = 0u;
                                      memset(v329, 0, sizeof(v329));
                                      uint64_t v95 = *(void *)v3;
                                      int v96 = (*(_DWORD *)(*(void *)v3 + 16) & 0xF) << 9;
                                      *(void *)&v329[0] = v94;
                                      int v97 = *(_DWORD *)(v95 + 612);
                                      *(_DWORD *)(v95 + 612) = 0;
                                      *(_DWORD *)(*(void *)v3 + 612) ^= 0xFFFFFF00;
                                      int v98 = *(_DWORD *)(*(void *)v3 + 612);
                                      *(_DWORD *)(*(void *)v3 + 612) = v97;
                                      if (v94)
                                      {
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v329, 612, v96, 0xFFFFFFFFLL, 8, v98, 4);
                                        if (result) {
                                          return result;
                                        }
                                        uint64_t v99 = *(void *)&v329[0];
                                        int v100 = DWORD2(v330);
                                        LODWORD(v94) = HIDWORD(v330);
                                      }
                                      else
                                      {
                                        int v100 = 0;
                                        uint64_t v99 = 0;
                                      }
                                      if ((*(_DWORD *)(*(void *)v3 + 616) = 0,
                                            int v101 = *(_DWORD *)(*(void *)v3 + 616),
                                            *(_DWORD *)(*(void *)v3 + 616) = 0,
                                            *(_DWORD *)(*(void *)v3 + 616) ^= 0x3FFu,
                                            int v102 = *(_DWORD *)(*(void *)v3 + 616),
                                            *(_DWORD *)(*(void *)v3 + 616) = v101,
                                            !v99)
                                        && !v100
                                        && !v94
                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v329, 616, v96, 0x3FFFFFFFFFFLL, 32, v102, 4), !result))
                                      {
LABEL_345:
                                        *(_DWORD *)(*((void *)this + 33) + 620) = 0;
                                        uint64_t v103 = *((void *)this + 33);
                                        int v104 = *(_DWORD *)(v103 + 620);
                                        *(_DWORD *)(v103 + 620) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 620) ^= 0xFFFFFF00;
                                        uint64_t v105 = *((void *)this + 33);
                                        int v106 = *(_DWORD *)(v105 + 620);
                                        *(_DWORD *)(v105 + 620) = v104;
                                        if (!*((void *)this + 234)
                                          && !*((_DWORD *)this + 506)
                                          && !*((_DWORD *)this + 507))
                                        {
                                          goto LABEL_333;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 620, 0, 0xFFFFFFFFLL, 8, v106, 4);
                                        if (!result)
                                        {
LABEL_333:
                                          if ((*(_DWORD *)(*(void *)v3 + 624) = 0,
                                                int v107 = *(_DWORD *)(*(void *)v3 + 624),
                                                *(_DWORD *)(*(void *)v3 + 624) = 0,
                                                *(_DWORD *)(*(void *)v3 + 624) ^= 0x3FFu,
                                                int v108 = *(_DWORD *)(*(void *)v3 + 624),
                                                *(_DWORD *)(*(void *)v3 + 624) = v107,
                                                !*((void *)this + 234))
                                            && !*((_DWORD *)this + 506)
                                            && !*((_DWORD *)this + 507)
                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 624, 0, 0x3FFFFFFFFFFLL, 32, v108, 4), !result))
                                          {
                                            *(_DWORD *)(*((void *)this + 33) + 628) = 0;
                                            uint64_t v109 = *((void *)this + 33);
                                            int v110 = *(_DWORD *)(v109 + 628);
                                            *(_DWORD *)(v109 + 628) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 628) ^= 0xFFFFFF00;
                                            uint64_t v111 = *((void *)this + 33);
                                            int v112 = *(_DWORD *)(v111 + 628);
                                            *(_DWORD *)(v111 + 628) = v110;
                                            if (!*((void *)this + 256)
                                              && !*((_DWORD *)this + 550)
                                              && !*((_DWORD *)this + 551))
                                            {
                                              goto LABEL_334;
                                            }
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 628, 0, 0xFFFFFFFFLL, 8, v112, 4);
                                            if (!result)
                                            {
LABEL_334:
                                              if ((*(_DWORD *)(*(void *)v3 + 632) = 0,
                                                    int v113 = *(_DWORD *)(*(void *)v3 + 632),
                                                    *(_DWORD *)(*(void *)v3 + 632) = 0,
                                                    *(_DWORD *)(*(void *)v3 + 632) ^= 0x3FFu,
                                                    int v114 = *(_DWORD *)(*(void *)v3 + 632),
                                                    *(_DWORD *)(*(void *)v3 + 632) = v113,
                                                    !*((void *)this + 256))
                                                && !*((_DWORD *)this + 550)
                                                && !*((_DWORD *)this + 551)
                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 632, 0, 0x3FFFFFFFFFFLL, 32, v114, 4), !result))
                                              {
                                                *(_DWORD *)(*((void *)this + 33) + 636) = 0;
                                                uint64_t v115 = *((void *)this + 33);
                                                int v116 = *(_DWORD *)(v115 + 636);
                                                *(_DWORD *)(v115 + 636) = 0;
                                                *(_DWORD *)(*((void *)this + 33) + 636) ^= 0xFFFFFF00;
                                                uint64_t v117 = *((void *)this + 33);
                                                int v118 = *(_DWORD *)(v117 + 636);
                                                *(_DWORD *)(v117 + 636) = v116;
                                                if (!*((void *)this + 278)
                                                  && !*((_DWORD *)this + 594)
                                                  && !*((_DWORD *)this + 595))
                                                {
                                                  goto LABEL_335;
                                                }
                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 636, 0, 0xFFFFFFFFLL, 8, v118, 4);
                                                if (!result)
                                                {
LABEL_335:
                                                  if ((*(_DWORD *)(*(void *)v3 + 640) = 0,
                                                        int v119 = *(_DWORD *)(*(void *)v3 + 640),
                                                        *(_DWORD *)(*(void *)v3 + 640) = 0,
                                                        *(_DWORD *)(*(void *)v3 + 640) ^= 0x3FFu,
                                                        int v120 = *(_DWORD *)(*(void *)v3 + 640),
                                                        *(_DWORD *)(*(void *)v3 + 640) = v119,
                                                        !*((void *)this + 278))
                                                    && !*((_DWORD *)this + 594)
                                                    && !*((_DWORD *)this + 595)
                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 640, 0, 0x3FFFFFFFFFFLL, 32, v120, 4), !result))
                                                  {
                                                    *(_DWORD *)(*((void *)this + 33) + 644) = 0;
                                                    uint64_t v121 = *((void *)this + 33);
                                                    int v122 = *(_DWORD *)(v121 + 644);
                                                    *(_DWORD *)(v121 + 644) = 0;
                                                    *(_DWORD *)(*((void *)this + 33) + 644) ^= 0xFFFFFF00;
                                                    uint64_t v123 = *((void *)this + 33);
                                                    int v124 = *(_DWORD *)(v123 + 644);
                                                    *(_DWORD *)(v123 + 644) = v122;
                                                    if (!*((void *)this + 300)
                                                      && !*((_DWORD *)this + 638)
                                                      && !*((_DWORD *)this + 639))
                                                    {
                                                      goto LABEL_336;
                                                    }
                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 644, 0, 0xFFFFFFFFLL, 8, v124, 4);
                                                    if (!result)
                                                    {
LABEL_336:
                                                      if ((*(_DWORD *)(*(void *)v3 + 648) = 0,
                                                            int v125 = *(_DWORD *)(*(void *)v3 + 648),
                                                            *(_DWORD *)(*(void *)v3 + 648) = 0,
                                                            *(_DWORD *)(*(void *)v3 + 648) ^= 0x3FFu,
                                                            int v126 = *(_DWORD *)(*(void *)v3 + 648),
                                                            *(_DWORD *)(*(void *)v3 + 648) = v125,
                                                            !*((void *)this + 300))
                                                        && !*((_DWORD *)this + 638)
                                                        && !*((_DWORD *)this + 639)
                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 648, 0, 0x3FFFFFFFFFFLL, 32, v126, 4), !result))
                                                      {
                                                        *(_DWORD *)(*((void *)this + 33) + 652) = 0;
                                                        uint64_t v127 = *((void *)this + 33);
                                                        int v128 = *(_DWORD *)(v127 + 652);
                                                        *(_DWORD *)(v127 + 652) = 0;
                                                        *(_DWORD *)(*((void *)this + 33) + 652) ^= 0xFFFFFF00;
                                                        uint64_t v129 = *((void *)this + 33);
                                                        int v130 = *(_DWORD *)(v129 + 652);
                                                        *(_DWORD *)(v129 + 652) = v128;
                                                        if (!*((void *)this + 322)
                                                          && !*((_DWORD *)this + 682)
                                                          && !*((_DWORD *)this + 683))
                                                        {
                                                          goto LABEL_337;
                                                        }
                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 652, 0, 0xFFFFFFFFLL, 8, v130, 4);
                                                        if (!result)
                                                        {
LABEL_337:
                                                          if ((*(_DWORD *)(*(void *)v3 + 656) = 0,
                                                                int v131 = *(_DWORD *)(*(void *)v3 + 656),
                                                                *(_DWORD *)(*(void *)v3 + 656) = 0,
                                                                *(_DWORD *)(*(void *)v3 + 656) ^= 0x3FFu,
                                                                int v132 = *(_DWORD *)(*(void *)v3 + 656),
                                                                *(_DWORD *)(*(void *)v3 + 656) = v131,
                                                                !*((void *)this + 322))
                                                            && !*((_DWORD *)this + 682)
                                                            && !*((_DWORD *)this + 683)
                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 656, 0, 0x3FFFFFFFFFFLL, 32, v132, 4), !result))
                                                          {
                                                            *(_DWORD *)(*((void *)this + 33) + 660) = 0;
                                                            uint64_t v133 = *((void *)this + 33);
                                                            int v134 = *(_DWORD *)(v133 + 660);
                                                            *(_DWORD *)(v133 + 660) = 0;
                                                            *(_DWORD *)(*((void *)this + 33) + 660) ^= 0xFFFFFF00;
                                                            uint64_t v135 = *((void *)this + 33);
                                                            int v136 = *(_DWORD *)(v135 + 660);
                                                            *(_DWORD *)(v135 + 660) = v134;
                                                            if (!*((void *)this + 344)
                                                              && !*((_DWORD *)this + 726)
                                                              && !*((_DWORD *)this + 727))
                                                            {
                                                              goto LABEL_338;
                                                            }
                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 660, 0, 0xFFFFFFFFLL, 8, v136, 4);
                                                            if (!result)
                                                            {
LABEL_338:
                                                              if ((*(_DWORD *)(*(void *)v3 + 664) = 0,
                                                                    int v137 = *(_DWORD *)(*(void *)v3 + 664),
                                                                    *(_DWORD *)(*(void *)v3 + 664) = 0,
                                                                    *(_DWORD *)(*(void *)v3 + 664) ^= 0x3FFu,
                                                                    int v138 = *(_DWORD *)(*(void *)v3 + 664),
                                                                    *(_DWORD *)(*(void *)v3 + 664) = v137,
                                                                    !*((void *)this + 344))
                                                                && !*((_DWORD *)this + 726)
                                                                && !*((_DWORD *)this + 727)
                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 664, 0, 0x3FFFFFFFFFFLL, 32, v138, 4), !result))
                                                              {
                                                                *(_DWORD *)(*((void *)this + 33) + 668) = 0;
                                                                uint64_t v139 = *((void *)this + 33);
                                                                int v140 = *(_DWORD *)(v139 + 668);
                                                                *(_DWORD *)(v139 + 668) = 0;
                                                                *(_DWORD *)(*((void *)this + 33) + 668) ^= 0xFFFFFF00;
                                                                uint64_t v141 = *((void *)this + 33);
                                                                int v142 = *(_DWORD *)(v141 + 668);
                                                                *(_DWORD *)(v141 + 668) = v140;
                                                                if (!*((void *)this + 366)
                                                                  && !*((_DWORD *)this + 770)
                                                                  && !*((_DWORD *)this + 771))
                                                                {
                                                                  goto LABEL_339;
                                                                }
                                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 668, 0, 0xFFFFFFFFLL, 8, v142, 4);
                                                                if (!result)
                                                                {
LABEL_339:
                                                                  if ((*(_DWORD *)(*(void *)v3 + 672) = 0,
                                                                        int v143 = *(_DWORD *)(*(void *)v3 + 672),
                                                                        *(_DWORD *)(*(void *)v3 + 672) = 0,
                                                                        *(_DWORD *)(*(void *)v3 + 672) ^= 0x3FFu,
                                                                        int v144 = *(_DWORD *)(*(void *)v3 + 672),
                                                                        *(_DWORD *)(*(void *)v3 + 672) = v143,
                                                                        !*((void *)this + 366))
                                                                    && !*((_DWORD *)this + 770)
                                                                    && !*((_DWORD *)this + 771)
                                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 672, 0, 0x3FFFFFFFFFFLL, 32, v144, 4), !result))
                                                                  {
                                                                    *(_DWORD *)(*((void *)this + 33) + 676) = 0;
                                                                    uint64_t v145 = *((void *)this + 33);
                                                                    int v146 = *(_DWORD *)(v145 + 676);
                                                                    *(_DWORD *)(v145 + 676) = 0;
                                                                    *(_DWORD *)(*((void *)this + 33) + 676) ^= 0xFFFFFF00;
                                                                    uint64_t v147 = *((void *)this + 33);
                                                                    int v148 = *(_DWORD *)(v147 + 676);
                                                                    *(_DWORD *)(v147 + 676) = v146;
                                                                    if (!*((void *)this + 388)
                                                                      && !*((_DWORD *)this + 814)
                                                                      && !*((_DWORD *)this + 815))
                                                                    {
                                                                      goto LABEL_340;
                                                                    }
                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 388, 676, 0, 0xFFFFFFFFLL, 8, v148, 4);
                                                                    if (!result)
                                                                    {
LABEL_340:
                                                                      if ((*(_DWORD *)(*(void *)v3 + 680) = 0,
                                                                            int v149 = *(_DWORD *)(*(void *)v3 + 680),
                                                                            *(_DWORD *)(*(void *)v3 + 680) = 0,
                                                                            *(_DWORD *)(*(void *)v3 + 680) ^= 0x3FFu,
                                                                            int v150 = *(_DWORD *)(*(void *)v3 + 680),
                                                                            *(_DWORD *)(*(void *)v3 + 680) = v149,
                                                                            !*((void *)this + 388))
                                                                        && !*((_DWORD *)this + 814)
                                                                        && !*((_DWORD *)this + 815)
                                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 388, 680, 0, 0x3FFFFFFFFFFLL, 32, v150, 4), !result))
                                                                      {
                                                                        *(_DWORD *)(*((void *)this + 33) + 684) = 0;
                                                                        uint64_t v151 = *((void *)this + 33);
                                                                        int v152 = *(_DWORD *)(v151 + 684);
                                                                        *(_DWORD *)(v151 + 684) = 0;
                                                                        *(_DWORD *)(*((void *)this + 33) + 684) ^= 0xFFFFFF00;
                                                                        uint64_t v153 = *((void *)this + 33);
                                                                        int v154 = *(_DWORD *)(v153 + 684);
                                                                        *(_DWORD *)(v153 + 684) = v152;
                                                                        if (!*((void *)this + 410)
                                                                          && !*((_DWORD *)this + 858)
                                                                          && !*((_DWORD *)this + 859))
                                                                        {
                                                                          goto LABEL_341;
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 684, 0, 0xFFFFFFFFLL, 8, v154, 4);
                                                                        if (!result)
                                                                        {
LABEL_341:
                                                                          if ((*(_DWORD *)(*(void *)v3 + 688) = 0,
                                                                                int v155 = *(_DWORD *)(*(void *)v3 + 688),
                                                                                *(_DWORD *)(*(void *)v3 + 688) = 0,
                                                                                *(_DWORD *)(*(void *)v3 + 688) ^= 0x3FFu,
                                                                                int v156 = *(_DWORD *)(*(void *)v3 + 688),
                                                                                *(_DWORD *)(*(void *)v3 + 688) = v155,
                                                                                !*((void *)this + 410))
                                                                            && !*((_DWORD *)this + 858)
                                                                            && !*((_DWORD *)this + 859)
                                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 688, 0, 0x3FFFFFFFFFFLL, 32, v156, 4), !result))
                                                                          {
                                                                            *(_DWORD *)(*((void *)this + 33) + 692) = 0;
                                                                            uint64_t v157 = *((void *)this + 33);
                                                                            int v158 = *(_DWORD *)(v157 + 692);
                                                                            *(_DWORD *)(v157 + 692) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 692) ^= 0xFFFFFF00;
                                                                            uint64_t v159 = *((void *)this + 33);
                                                                            int v160 = *(_DWORD *)(v159 + 692);
                                                                            *(_DWORD *)(v159 + 692) = v158;
                                                                            if (!*((void *)this + 476)
                                                                              && !*((_DWORD *)this + 990)
                                                                              && !*((_DWORD *)this + 991))
                                                                            {
                                                                              goto LABEL_342;
                                                                            }
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 692, 0, 0xFFFFFFFFLL, 8, v160, 4);
                                                                            if (!result)
                                                                            {
LABEL_342:
                                                                              if ((*(_DWORD *)(*(void *)v3 + 696) = 0,
                                                                                    int v161 = *(_DWORD *)(*(void *)v3 + 696),
                                                                                    *(_DWORD *)(*(void *)v3 + 696) = 0,
                                                                                    *(_DWORD *)(*(void *)v3 + 696) ^= 0x3FFu,
                                                                                    int v162 = *(_DWORD *)(*(void *)v3 + 696),
                                                                                    *(_DWORD *)(*(void *)v3 + 696) = v161,
                                                                                    !*((void *)this + 476))
                                                                                && !*((_DWORD *)this + 990)
                                                                                && !*((_DWORD *)this + 991)
                                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 696, 0, 0x3FFFFFFFFFFLL, 32, v162, 4), !result))
                                                                              {
                                                                                int v163 = *(_DWORD *)(*((void *)this + 32)
                                                                                                 + 42676);
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 700) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 704) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 708) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 712) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 716) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 720) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 724) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 728) = 0;
                                                                                uint64_t v164 = *((void *)this + 33);
                                                                                int v165 = *(_DWORD *)(v164 + 708);
                                                                                *(_DWORD *)(v164 + 708) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 708) ^= 0xFFFFFF80;
                                                                                uint64_t v166 = *((void *)this + 33);
                                                                                int v167 = *(_DWORD *)(v166 + 708);
                                                                                *(_DWORD *)(v166 + 708) = v165;
                                                                                uint64_t v168 = *(void *)(*(void *)(*((void *)this + 32) + 8000)
                                                                                                 + 384 * v163
                                                                                                 + 8);
                                                                                if (!*(void *)v168
                                                                                  && !*(_DWORD *)(v168 + 152)
                                                                                  && !*(_DWORD *)(v168 + 156))
                                                                                {
                                                                                  goto LABEL_343;
                                                                                }
                                                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v168, 708, *(_DWORD *)(v168 + 52), 0xFFFFFFFFLL, 7, v167, 4);
                                                                                if (!result)
                                                                                {
LABEL_343:
                                                                                  uint64_t v169 = *((void *)this + 33);
                                                                                  int v170 = *(_DWORD *)(v169 + 712);
                                                                                  *(_DWORD *)(v169 + 712) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 712) ^= 0x3FFu;
                                                                                  uint64_t v171 = *((void *)this + 33);
                                                                                  int v172 = *(_DWORD *)(v171 + 712);
                                                                                  *(_DWORD *)(v171 + 712) = v170;
                                                                                  uint64_t v173 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                  if (!*(void *)v173
                                                                                    && !*(_DWORD *)(v173 + 152)
                                                                                    && !*(_DWORD *)(v173 + 156))
                                                                                  {
                                                                                    goto LABEL_344;
                                                                                  }
                                                                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v173, 712, *(_DWORD *)(v173 + 52), 0x3FFFFFFFFFFLL, 32, v172, 4);
                                                                                  if (!result)
                                                                                  {
LABEL_344:
                                                                                    uint64_t v174 = *((void *)this + 33);
                                                                                    int v175 = *(_DWORD *)(v174 + 724);
                                                                                    *(_DWORD *)(v174 + 724) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 724) ^= 0xFFFFFF80;
                                                                                    uint64_t v176 = *((void *)this + 33);
                                                                                    int v177 = *(_DWORD *)(v176 + 724);
                                                                                    *(_DWORD *)(v176 + 724) = v175;
                                                                                    uint64_t v178 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                    if (!*(void *)v178
                                                                                      && !*(_DWORD *)(v178 + 152)
                                                                                      && !*(_DWORD *)(v178 + 156))
                                                                                    {
                                                                                      goto LABEL_186;
                                                                                    }
                                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v178, 724, *(_DWORD *)(v178 + 56), 0xFFFFFFFFLL, 7, v177, 4);
                                                                                    if (!result)
                                                                                    {
LABEL_186:
                                                                                      uint64_t v179 = *((void *)this + 33);
                                                                                      int v180 = *(_DWORD *)(v179 + 728);
                                                                                      *(_DWORD *)(v179 + 728) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 728) ^= 0x3FFu;
                                                                                      uint64_t v181 = *((void *)this + 33);
                                                                                      int v182 = *(_DWORD *)(v181 + 728);
                                                                                      *(_DWORD *)(v181 + 728) = v180;
                                                                                      uint64_t v183 = *((void *)this + 32);
                                                                                      uint64_t v184 = *(void *)(*(void *)(v183 + 8000) + 384 * v163 + 8);
                                                                                      if (*(void *)v184
                                                                                        || *(_DWORD *)(v184 + 152)
                                                                                        || *(_DWORD *)(v184 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v184, 728, *(_DWORD *)(v184 + 56), 0x3FFFFFFFFFFLL, 32, v182, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                        uint64_t v183 = *((void *)this + 32);
                                                                                      }
                                                                                      int v185 = *(_DWORD *)(v183 + 2648);
                                                                                      uint64_t v186 = *((void *)this + 33);
                                                                                      int v187 = *(_DWORD *)(v186 + 700);
                                                                                      *(_DWORD *)(v186 + 700) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 700) ^= 0xFFFFFF80;
                                                                                      uint64_t v188 = *((void *)this + 33);
                                                                                      int v189 = *(_DWORD *)(v188 + 700);
                                                                                      *(_DWORD *)(v188 + 700) = v187;
                                                                                      uint64_t v190 = *((void *)this + 32);
                                                                                      if (v185 == 1)
                                                                                      {
                                                                                        uint64_t v191 = *(void *)(*(void *)(v190 + 8000) + 384 * v163 + 8);
                                                                                        if (*(void *)v191
                                                                                          || *(_DWORD *)(v191 + 152)
                                                                                          || *(_DWORD *)(v191 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v191, 700, *(_DWORD *)(v191 + 64), 0xFFFFFFFFLL, 7, v189, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v192 = *((void *)this + 33);
                                                                                        int v193 = *(_DWORD *)(v192 + 704);
                                                                                        *(_DWORD *)(v192 + 704) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 704) ^= 0x3FFu;
                                                                                        uint64_t v194 = *((void *)this + 33);
                                                                                        int v195 = *(_DWORD *)(v194 + 704);
                                                                                        *(_DWORD *)(v194 + 704) = v193;
                                                                                        uint64_t v196 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                        if (*(void *)v196
                                                                                          || *(_DWORD *)(v196 + 152)
                                                                                          || *(_DWORD *)(v196 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v196, 704, *(_DWORD *)(v196 + 64), 0x3FFFFFFFFFFLL, 32, v195, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v197 = *((void *)this + 33);
                                                                                        int v198 = *(_DWORD *)(v197 + 716);
                                                                                        *(_DWORD *)(v197 + 716) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 716) ^= 0xFFFFFF80;
                                                                                        uint64_t v199 = *((void *)this + 33);
                                                                                        int v200 = *(_DWORD *)(v199 + 716);
                                                                                        *(_DWORD *)(v199 + 716) = v198;
                                                                                        uint64_t v201 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                        if (*(void *)v201
                                                                                          || *(_DWORD *)(v201 + 152)
                                                                                          || *(_DWORD *)(v201 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v201, 716, *(_DWORD *)(v201 + 68), 0xFFFFFFFFLL, 7, v200, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v202 = *((void *)this + 33);
                                                                                        int v203 = *(_DWORD *)(v202 + 720);
                                                                                        *(_DWORD *)(v202 + 720) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 720) ^= 0x3FFu;
                                                                                        uint64_t v204 = *((void *)this + 33);
                                                                                        int v205 = *(_DWORD *)(v204 + 720);
                                                                                        *(_DWORD *)(v204 + 720) = v203;
                                                                                        uint64_t v206 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                        if (!*(void *)v206
                                                                                          && !*(_DWORD *)(v206 + 152)
                                                                                          && !*(_DWORD *)(v206 + 156))
                                                                                        {
                                                                                          goto LABEL_224;
                                                                                        }
                                                                                        int v207 = *(_DWORD *)(v206 + 68);
                                                                                        uint64_t v208 = this;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        uint64_t v209 = v190 + 176 * v163;
                                                                                        if (*(void *)(v209 + 3072)
                                                                                          || *(_DWORD *)(v190 + 176 * v163 + 3224)
                                                                                          || *(_DWORD *)(v190 + 176 * v163 + 3228))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v209 + 3072), 700, 0, 0xFFFFFFFFLL, 7, v189, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v210 = *((void *)this + 33);
                                                                                        int v211 = *(_DWORD *)(v210 + 704);
                                                                                        *(_DWORD *)(v210 + 704) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 704) ^= 0x3FFu;
                                                                                        uint64_t v212 = *((void *)this + 33);
                                                                                        int v213 = *(_DWORD *)(v212 + 704);
                                                                                        *(_DWORD *)(v212 + 704) = v211;
                                                                                        uint64_t v214 = *((void *)this + 32);
                                                                                        uint64_t v215 = v214 + 176 * v163;
                                                                                        if (*(void *)(v215 + 3072)
                                                                                          || *(_DWORD *)(v214 + 176 * v163 + 3224)
                                                                                          || *(_DWORD *)(v214 + 176 * v163 + 3228))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v215 + 3072), 704, 0, 0x3FFFFFFFFFFLL, 32, v213, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v216 = *((void *)this + 33);
                                                                                        int v217 = *(_DWORD *)(v216 + 716);
                                                                                        *(_DWORD *)(v216 + 716) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 716) ^= 0xFFFFFF80;
                                                                                        uint64_t v218 = *((void *)this + 33);
                                                                                        int v219 = *(_DWORD *)(v218 + 716);
                                                                                        *(_DWORD *)(v218 + 716) = v217;
                                                                                        uint64_t v220 = *((void *)this + 32);
                                                                                        uint64_t v221 = v220 + 176 * v163;
                                                                                        if (*(void *)(v221 + 5536)
                                                                                          || *(_DWORD *)(v220 + 176 * v163 + 5688)
                                                                                          || *(_DWORD *)(v220 + 176 * v163 + 5692))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v221 + 5536), 716, 0, 0xFFFFFFFFLL, 7, v219, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v222 = *((void *)this + 33);
                                                                                        int v223 = *(_DWORD *)(v222 + 720);
                                                                                        *(_DWORD *)(v222 + 720) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 720) ^= 0x3FFu;
                                                                                        uint64_t v224 = *((void *)this + 33);
                                                                                        int v205 = *(_DWORD *)(v224 + 720);
                                                                                        *(_DWORD *)(v224 + 720) = v223;
                                                                                        uint64_t v225 = *((void *)this + 32);
                                                                                        uint64_t v226 = v225 + 176 * v163;
                                                                                        if (!*(void *)(v226 + 5536)
                                                                                          && !*(_DWORD *)(v225 + 176 * v163 + 5688)
                                                                                          && !*(_DWORD *)(v225 + 176 * v163 + 5692))
                                                                                        {
                                                                                          goto LABEL_224;
                                                                                        }
                                                                                        uint64_t v206 = v226 + 5536;
                                                                                        uint64_t v208 = this;
                                                                                        int v207 = 0;
                                                                                      }
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)v208, (void *)v206, 720, v207, 0x3FFFFFFFFFFLL, 32, v205, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
LABEL_224:
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 732) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 736) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 740) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 744) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 748) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 752) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 756) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 760) = 0;
                                                                                      if (*(_DWORD *)(*((void *)this + 32) + 2644))
                                                                                      {
                                                                                        uint64_t v227 = *((void *)this + 33);
                                                                                        int v228 = *(_DWORD *)(v227 + 732);
                                                                                        *(_DWORD *)(v227 + 732) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 732) ^= 0xFFFFFF00;
                                                                                        uint64_t v229 = *((void *)this + 33);
                                                                                        int v230 = *(_DWORD *)(v229 + 732);
                                                                                        *(_DWORD *)(v229 + 732) = v228;
                                                                                        if (*((void *)this + 454)
                                                                                          || *((_DWORD *)this + 946)
                                                                                          || *((_DWORD *)this + 947))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 732, 0, 0xFFFFFFFFLL, 8, v230, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        int v231 = *(_DWORD *)(*(void *)v3 + 736);
                                                                                        *(_DWORD *)(*(void *)v3 + 736) = 0;
                                                                                        *(_DWORD *)(*(void *)v3 + 736) ^= 0x3FFu;
                                                                                        int v232 = *(_DWORD *)(*(void *)v3 + 736);
                                                                                        *(_DWORD *)(*(void *)v3 + 736) = v231;
                                                                                        if (*((void *)this + 454)
                                                                                          || *((_DWORD *)this + 946)
                                                                                          || *((_DWORD *)this + 947))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 736, 0, 0x3FFFFFFFFFFLL, 32, v232, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v233 = *((void *)this + 32);
                                                                                        int v234 = *(unsigned __int8 *)(v233 + 3004);
                                                                                        if (*(unsigned char *)(v233 + 3004))
                                                                                        {
                                                                                          int v234 = *(_DWORD *)(v233 + 3016);
                                                                                          int v235 = *(_DWORD *)(v233 + 3020);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int v235 = 0;
                                                                                        }
                                                                                        uint64_t v236 = *(void *)(v233 + 42696);
                                                                                        int v237 = *(_DWORD *)(v236 + 56);
                                                                                        int v238 = *(_DWORD *)(v236 + 52)
                                                                                             + v234;
                                                                                        uint64_t v239 = *((void *)this + 33);
                                                                                        int v240 = *(_DWORD *)(v239 + 740);
                                                                                        *(_DWORD *)(v239 + 740) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 740) ^= 0xFFFFFFC0;
                                                                                        uint64_t v241 = *((void *)this + 33);
                                                                                        int v242 = *(_DWORD *)(v241 + 740);
                                                                                        *(_DWORD *)(v241 + 740) = v240;
                                                                                        uint64_t v243 = *(void *)(*((void *)this + 32) + 42696);
                                                                                        if (*(void *)v243
                                                                                          || *(_DWORD *)(v243 + 152)
                                                                                          || *(_DWORD *)(v243 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v243, 740, v238, 0xFFFFFFFFLL, 6, v242, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v244 = *((void *)this + 33);
                                                                                        int v245 = *(_DWORD *)(v244 + 744);
                                                                                        *(_DWORD *)(v244 + 744) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 744) ^= 0x3FFu;
                                                                                        uint64_t v246 = *((void *)this + 33);
                                                                                        int v247 = *(_DWORD *)(v246 + 744);
                                                                                        *(_DWORD *)(v246 + 744) = v245;
                                                                                        uint64_t v248 = *(void *)(*((void *)this + 32) + 42696);
                                                                                        if (*(void *)v248
                                                                                          || *(_DWORD *)(v248 + 152)
                                                                                          || *(_DWORD *)(v248 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v248, 744, v238, 0x3FFFFFFFFFFLL, 32, v247, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v249 = *((void *)this + 33);
                                                                                        int v250 = *(_DWORD *)(v249 + 752);
                                                                                        *(_DWORD *)(v249 + 752) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 752) ^= 0xFFFFFFC0;
                                                                                        uint64_t v251 = *((void *)this + 33);
                                                                                        int v252 = *(_DWORD *)(v251 + 752);
                                                                                        *(_DWORD *)(v251 + 752) = v250;
                                                                                        uint64_t v253 = *(void *)(*((void *)this + 32) + 42696);
                                                                                        if (*(void *)v253
                                                                                          || *(_DWORD *)(v253 + 152)
                                                                                          || *(_DWORD *)(v253 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v253, 752, v237 + v235, 0xFFFFFFFFLL, 6, v252, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v254 = *((void *)this + 33);
                                                                                        int v255 = *(_DWORD *)(v254 + 756);
                                                                                        *(_DWORD *)(v254 + 756) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 756) ^= 0x3FFu;
                                                                                        uint64_t v256 = *((void *)this + 33);
                                                                                        int v257 = *(_DWORD *)(v256 + 756);
                                                                                        *(_DWORD *)(v256 + 756) = v255;
                                                                                        uint64_t v258 = *((void *)this + 32);
                                                                                        uint64_t v259 = *(void *)(v258 + 42696);
                                                                                        if (*(void *)v259
                                                                                          || *(_DWORD *)(v259 + 152)
                                                                                          || *(_DWORD *)(v259 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v259, 756, v237 + v235, 0x3FFFFFFFFFFLL, 32, v257, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                          uint64_t v258 = *((void *)this + 32);
                                                                                        }
                                                                                        uint64_t v260 = *(void *)v3;
                                                                                        unsigned int v261 = *(_DWORD *)(*(void *)v3 + 748) & 0xFFFC003F;
                                                                                        if (*(unsigned char *)(v258 + 8))
                                                                                        {
                                                                                          *(_DWORD *)(v260 + 748) = v261 | *(_DWORD *)(*(void *)(v258 + 42696) + 76) & 0x3FFC0;
                                                                                          uint64_t v262 = (_DWORD *)(*(void *)(*((void *)this + 32) + 42696) + 80);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          *(_DWORD *)(v260 + 748) = v261 | *(_DWORD *)(*(void *)(v258 + 15944) + 78508) & 0x3FFC0;
                                                                                          uint64_t v262 = (_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78512);
                                                                                        }
                                                                                        *(_DWORD *)(*(void *)v3 + 760) = *(_DWORD *)(*(void *)v3 + 760) & 0xFFF8003F | (((*v262 >> 6) & 0x1FFF) << 6);
                                                                                      }
                                                                                      uint64_t v263 = *((void *)this + 32);
                                                                                      if (*(unsigned char *)(*(void *)(v263 + 15944) + 128)
                                                                                        && !*(unsigned char *)(*(void *)(v263 + 42424) + 1956))
                                                                                      {
                                                                                        return 0;
                                                                                      }
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 764) = 0;
                                                                                      uint64_t v264 = *((void *)this + 33);
                                                                                      int v265 = *(_DWORD *)(v264 + 764);
                                                                                      *(_DWORD *)(v264 + 764) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 764) ^= 0xFFFFFF00;
                                                                                      uint64_t v266 = *((void *)this + 33);
                                                                                      int v267 = *(_DWORD *)(v266 + 764);
                                                                                      *(_DWORD *)(v266 + 764) = v265;
                                                                                      if (*((void *)this + 498)
                                                                                        || *((_DWORD *)this + 1034)
                                                                                        || *((_DWORD *)this + 1035))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 764, 0, 0xFFFFFFFFLL, 8, v267, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      *(_DWORD *)(*(void *)v3 + 768) = 0;
                                                                                      int v268 = *(_DWORD *)(*(void *)v3 + 768);
                                                                                      *(_DWORD *)(*(void *)v3 + 768) = 0;
                                                                                      *(_DWORD *)(*(void *)v3 + 768) ^= 0x3FFu;
                                                                                      int v269 = *(_DWORD *)(*(void *)v3 + 768);
                                                                                      *(_DWORD *)(*(void *)v3 + 768) = v268;
                                                                                      if (*((void *)this + 498)
                                                                                        || *((_DWORD *)this + 1034)
                                                                                        || *((_DWORD *)this + 1035))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 768, 0, 0x3FFFFFFFFFFLL, 32, v269, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      if (*(unsigned char *)(*(void *)(*((void *)this + 32) + 15944) + 128)) {
                                                                                        return 0;
                                                                                      }
                                                                                      uint64_t v270 = 0;
                                                                                      uint64_t v271 = 0;
                                                                                      do
                                                                                      {
                                                                                        uint64_t v272 = *(void *)(*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79224) + v271);
                                                                                        if (!v272
                                                                                          || (uint64_t v273 = *(void *)(v272 + 2016)) == 0)
                                                                                        {
                                                                                          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                                          {
                                                                                            LODWORD(v329[0]) = 136315138;
                                                                                            *(void *)((char *)v329 + 4) = "populateAddressRegisters";
                                                                                            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Unexpected. av1_fb->buffer is 0x0!", (uint8_t *)v329, 0xCu);
                                                                                          }
                                                                                          return 0xFFFFFFFFLL;
                                                                                        }
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 772) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 800) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 828) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 856) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 884) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 912) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 940) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 968) = 0;
                                                                                        uint64_t v274 = *(void *)v3 + v270;
                                                                                        int v275 = *(_DWORD *)(v274 + 828);
                                                                                        *(_DWORD *)(v274 + 828) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 828) ^= 0xFFFFFF80;
                                                                                        uint64_t v276 = *(void *)v3 + v270;
                                                                                        int v277 = *(_DWORD *)(v276 + 828);
                                                                                        *(_DWORD *)(v276 + 828) = v275;
                                                                                        uint64_t v278 = *(void *)(v273 + 8);
                                                                                        if (*(void *)v278
                                                                                          || *(_DWORD *)(v278 + 152)
                                                                                          || *(_DWORD *)(v278 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v278, (int)v270 + 828, *(_DWORD *)(v278 + 52), 0xFFFFFFFFLL, 7, v277, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v279 = *(void *)v3 + v270;
                                                                                        int v280 = *(_DWORD *)(v279 + 856);
                                                                                        *(_DWORD *)(v279 + 856) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 856) ^= 0x3FFu;
                                                                                        uint64_t v281 = *(void *)v3 + v270;
                                                                                        int v282 = *(_DWORD *)(v281 + 856);
                                                                                        *(_DWORD *)(v281 + 856) = v280;
                                                                                        uint64_t v283 = *(void *)(v273 + 8);
                                                                                        if (*(void *)v283
                                                                                          || *(_DWORD *)(v283 + 152)
                                                                                          || *(_DWORD *)(v283 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v283, (int)v270 + 856, *(_DWORD *)(v283 + 52), 0x3FFFFFFFFFFLL, 32, v282, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v284 = *(void *)v3 + v270;
                                                                                        int v285 = *(_DWORD *)(v284 + 940);
                                                                                        *(_DWORD *)(v284 + 940) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 940) ^= 0xFFFFFF80;
                                                                                        uint64_t v286 = *(void *)v3 + v270;
                                                                                        int v287 = *(_DWORD *)(v286 + 940);
                                                                                        *(_DWORD *)(v286 + 940) = v285;
                                                                                        uint64_t v288 = *(void *)(v273 + 8);
                                                                                        if (*(void *)v288
                                                                                          || *(_DWORD *)(v288 + 152)
                                                                                          || *(_DWORD *)(v288 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v288, (int)v270 + 940, *(_DWORD *)(v288 + 56), 0xFFFFFFFFLL, 7, v287, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v289 = *(void *)v3 + v270;
                                                                                        int v290 = *(_DWORD *)(v289 + 968);
                                                                                        *(_DWORD *)(v289 + 968) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 968) ^= 0x3FFu;
                                                                                        uint64_t v291 = *(void *)v3 + v270;
                                                                                        int v292 = *(_DWORD *)(v291 + 968);
                                                                                        *(_DWORD *)(v291 + 968) = v290;
                                                                                        uint64_t v293 = *(void *)(v273 + 8);
                                                                                        if (*(void *)v293
                                                                                          || *(_DWORD *)(v293 + 152)
                                                                                          || *(_DWORD *)(v293 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v293, (int)v270 + 968, *(_DWORD *)(v293 + 56), 0x3FFFFFFFFFFLL, 32, v292, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        int v294 = *(_DWORD *)(*((void *)this + 32) + 2648);
                                                                                        uint64_t v295 = *((void *)this + 33)
                                                                                             + v270;
                                                                                        int v296 = *(_DWORD *)(v295 + 772);
                                                                                        *(_DWORD *)(v295 + 772) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + v270
                                                                                                  + 772) ^= 0xFFFFFF80;
                                                                                        uint64_t v297 = *((void *)this + 33)
                                                                                             + v270;
                                                                                        int v298 = *(_DWORD *)(v297 + 772);
                                                                                        *(_DWORD *)(v297 + 772) = v296;
                                                                                        if (v294 == 1)
                                                                                        {
                                                                                          uint64_t v299 = *(void *)(v273 + 8);
                                                                                          if (*(void *)v299
                                                                                            || *(_DWORD *)(v299 + 152)
                                                                                            || *(_DWORD *)(v299 + 156))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v299, (int)v270 + 772, *(_DWORD *)(v299 + 64), 0xFFFFFFFFLL, 7, v298, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v300 = *(void *)v3 + v270;
                                                                                          int v301 = *(_DWORD *)(v300 + 800);
                                                                                          *(_DWORD *)(v300 + 800) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 800) ^= 0x3FFu;
                                                                                          uint64_t v302 = *(void *)v3 + v270;
                                                                                          int v303 = *(_DWORD *)(v302 + 800);
                                                                                          *(_DWORD *)(v302 + 800) = v301;
                                                                                          uint64_t v304 = *(void *)(v273 + 8);
                                                                                          if (*(void *)v304
                                                                                            || *(_DWORD *)(v304 + 152)
                                                                                            || *(_DWORD *)(v304 + 156))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v304, (int)v270 + 800, *(_DWORD *)(v304 + 64), 0x3FFFFFFFFFFLL, 32, v303, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v305 = *(void *)v3 + v270;
                                                                                          int v306 = *(_DWORD *)(v305 + 884);
                                                                                          *(_DWORD *)(v305 + 884) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 884) ^= 0xFFFFFF80;
                                                                                          uint64_t v307 = *(void *)v3 + v270;
                                                                                          int v308 = *(_DWORD *)(v307 + 884);
                                                                                          *(_DWORD *)(v307 + 884) = v306;
                                                                                          uint64_t v309 = *(void *)(v273 + 8);
                                                                                          if (*(void *)v309
                                                                                            || *(_DWORD *)(v309 + 152)
                                                                                            || *(_DWORD *)(v309 + 156))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v309, (int)v270 + 884, *(_DWORD *)(v309 + 68), 0xFFFFFFFFLL, 7, v308, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v310 = *(void *)v3 + v270;
                                                                                          int v311 = *(_DWORD *)(v310 + 912);
                                                                                          *(_DWORD *)(v310 + 912) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 912) ^= 0x3FFu;
                                                                                          uint64_t v312 = *(void *)v3 + v270;
                                                                                          int v313 = *(_DWORD *)(v312 + 912);
                                                                                          *(_DWORD *)(v312 + 912) = v311;
                                                                                          uint64_t v314 = *(void *)(v273 + 8);
                                                                                          if (*(void *)v314
                                                                                            || *(_DWORD *)(v314 + 152)
                                                                                            || *(_DWORD *)(v314 + 156))
                                                                                          {
                                                                                            int v315 = *(_DWORD *)(v314 + 68);
                                                                                            int v316 = v270 + 912;
                                                                                            uint64_t v317 = this;
                                                                                            goto LABEL_325;
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          if (*(void *)(v273 + 24)
                                                                                            || *(_DWORD *)(v273 + 176)
                                                                                            || *(_DWORD *)(v273 + 180))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v273 + 24), (int)v270 + 772, 0, 0xFFFFFFFFLL, 7, v298, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v318 = *(void *)v3 + v270;
                                                                                          int v319 = *(_DWORD *)(v318 + 800);
                                                                                          *(_DWORD *)(v318 + 800) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 800) ^= 0x3FFu;
                                                                                          uint64_t v320 = *(void *)v3 + v270;
                                                                                          int v321 = *(_DWORD *)(v320 + 800);
                                                                                          *(_DWORD *)(v320 + 800) = v319;
                                                                                          if (*(void *)(v273 + 24)
                                                                                            || *(_DWORD *)(v273 + 176)
                                                                                            || *(_DWORD *)(v273 + 180))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v273 + 24), (int)v270 + 800, 0, 0x3FFFFFFFFFFLL, 32, v321, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v322 = *(void *)v3 + v270;
                                                                                          int v323 = *(_DWORD *)(v322 + 884);
                                                                                          *(_DWORD *)(v322 + 884) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 884) ^= 0xFFFFFF80;
                                                                                          uint64_t v324 = *(void *)v3 + v270;
                                                                                          int v325 = *(_DWORD *)(v324 + 884);
                                                                                          *(_DWORD *)(v324 + 884) = v323;
                                                                                          if (*(void *)(v273 + 200)
                                                                                            || *(_DWORD *)(v273 + 352)
                                                                                            || *(_DWORD *)(v273 + 356))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v273 + 200), (int)v270 + 884, 0, 0xFFFFFFFFLL, 7, v325, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v326 = *(void *)v3 + v270;
                                                                                          int v327 = *(_DWORD *)(v326 + 912);
                                                                                          *(_DWORD *)(v326 + 912) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 912) ^= 0x3FFu;
                                                                                          uint64_t v328 = *(void *)v3 + v270;
                                                                                          int v313 = *(_DWORD *)(v328 + 912);
                                                                                          *(_DWORD *)(v328 + 912) = v327;
                                                                                          if (*(void *)(v273 + 200)
                                                                                            || *(_DWORD *)(v273 + 352)
                                                                                            || *(_DWORD *)(v273 + 356))
                                                                                          {
                                                                                            int v316 = v270 + 912;
                                                                                            uint64_t v317 = this;
                                                                                            uint64_t v314 = v273 + 200;
                                                                                            int v315 = 0;
LABEL_325:
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)v317, (void *)v314, v316, v315, 0x3FFFFFFFFFFLL, 32, v313, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                        uint64_t result = 0;
                                                                                        v271 += 8;
                                                                                        v270 += 4;
                                                                                      }
                                                                                      while (v270 != 28);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecThymeAvx::populateDecryptionRegisters(CAHDecThymeAvx *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 32);
  if (*(_DWORD *)(v1 + 2360) != 1) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 33);
  *(_DWORD *)(v3 + 1268) = *(_DWORD *)(v3 + 1268) & 0xFFFFFFFE | *(_DWORD *)(v1 + 2508) & 1;
  if (*(_DWORD *)(v1 + 2508))
  {
    *(_DWORD *)(v3 + 1280) = 0x10000000;
    *(_DWORD *)(v3 + 1284) = *(_DWORD *)(v1 + 2368);
    *(_DWORD *)(v3 + 1296) = 0;
    *(void *)(v3 + 1288) = 0;
    *(_OWORD *)(v3 + 1300) = *(_OWORD *)(v1 + 2372);
    long long v4 = *(_OWORD *)(v1 + 2388);
    *(_OWORD *)(v3 + 1332) = *(_OWORD *)(v1 + 2404);
    *(_OWORD *)(v3 + 1316) = v4;
  }
  *(_DWORD *)(*((void *)this + 33) + 1268) = *(_DWORD *)(*((void *)this + 33) + 1268) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v1 + 2512) & 1));
  if (!*(_DWORD *)(v1 + 2512))
  {
LABEL_7:
    *(_DWORD *)(*((void *)this + 33) + 1268) = *(_DWORD *)(*((void *)this + 33) + 1268) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v1 + 2516) & 1));
    *(_DWORD *)(*((void *)this + 33) + 1268) = *(_DWORD *)(*((void *)this + 33) + 1268) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v1 + 2520) & 1));
    *(_DWORD *)(*((void *)this + 33) + 1268) = *(_DWORD *)(*((void *)this + 33) + 1268) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v1 + 2524) & 1));
    if (*(_DWORD *)(v1 + 2516))
    {
      *(_DWORD *)(v3 + 1508) = 0;
      if (*(_DWORD *)(v1 + 2476) == 2) {
        int v8 = 805306368;
      }
      else {
        int v8 = 813694976;
      }
      *(_DWORD *)(v3 + 1508) = v8;
      memcpy((void *)(v3 + 1512), (const void *)(v1 + 2480), 4 * *(unsigned int *)(v1 + 2476));
      *(_DWORD *)(v1 + 2516) = 0;
    }
    *(_DWORD *)(*((void *)this + 33) + 1268) = *(_DWORD *)(*((void *)this + 33) + 1268) & 0xFFFEFFFF | ((*(_DWORD *)(v1 + 2632) & 1) << 16);
    if (*(_DWORD *)(v1 + 2632))
    {
      *(_DWORD *)(v3 + 1400) = 0x80000000;
      unsigned int v9 = ((*(_DWORD *)(v1 + 2528) & 1) << 27) | 0x80000000;
      *(_DWORD *)(v3 + 1400) = v9;
      *(_DWORD *)(v3 + 1400) = v9 | (((2 * *(_DWORD *)(v1 + 2528)) & 4 | (*(_DWORD *)(v1 + 2528) >> 1) & 2 | (*(_DWORD *)(v1 + 2528) >> 3) & 1) << 24);
      long long v10 = *(_OWORD *)(v1 + 2532);
      long long v11 = *(_OWORD *)(v1 + 2564);
      *(_OWORD *)(v3 + 1420) = *(_OWORD *)(v1 + 2548);
      *(_OWORD *)(v3 + 1436) = v11;
      *(_OWORD *)(v3 + 1404) = v10;
      *(void *)(v3 + 1452) = *(void *)(v1 + 2580);
      *(void *)(v3 + 1460) = *(void *)(v1 + 2588);
      int v12 = *(_DWORD *)(v1 + 2528);
      if ((v12 & 6) != 0 && (v12 & 8) == 0)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = 136315138;
          uint64_t v17 = "populateDecryptionRegisters";
          int v13 = &_os_log_internal;
          uint64_t v14 = "AppleAVD: %s(): chip id is not used while ecid and/or board id is used\n";
LABEL_23:
          _os_log_impl(&dword_223977000, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v16, 0xCu);
          return 0xFFFFFFFFLL;
        }
        return 0xFFFFFFFFLL;
      }
      *(_OWORD *)(v3 + 1468) = *(_OWORD *)(v1 + 2596);
    }
    *(_DWORD *)(*((void *)this + 33) + 1268) = *(_DWORD *)(*((void *)this + 33) + 1268) & 0xFFFDFFFF | ((*(_DWORD *)(v1 + 2636) & 1) << 17);
    if (*(_DWORD *)(v1 + 2636))
    {
      uint64_t result = 0;
      *(_DWORD *)(v3 + 1484) = -1879048192;
      *(_DWORD *)(v3 + 1484) = ((*(_DWORD *)(v1 + 2612) & 1) << 23) | 0x90000000;
      *(_OWORD *)(v3 + 1488) = *(_OWORD *)(v1 + 2616);
      *(_DWORD *)(v1 + 2640) = 1;
      return result;
    }
    return 0;
  }
  *(_DWORD *)(v3 + 1348) = 0;
  if (*(_DWORD *)(v1 + 2424))
  {
    *(_DWORD *)(v1 + 2640) = 0;
    int v5 = *(_DWORD *)(v3 + 1348) & 0xF7FFFFF | ((*(_DWORD *)(v1 + 2420) & 1) << 23) | 0x20000000;
    *(_DWORD *)(v3 + 1348) = v5;
    *(_DWORD *)(v3 + 1348) = v5 & 0xFFC00000 | (*(_DWORD *)(v1 + 2364) == 0);
    long long v6 = *(_OWORD *)(v1 + 2428);
    long long v7 = *(_OWORD *)(v1 + 2444);
    *(_OWORD *)(v3 + 1384) = *(_OWORD *)(v1 + 2460);
    *(_OWORD *)(v3 + 1368) = v7;
    *(_OWORD *)(v3 + 1352) = v6;
    goto LABEL_7;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315138;
    uint64_t v17 = "populateDecryptionRegisters";
    int v13 = &_os_log_internal;
    uint64_t v14 = "AppleAVD: %s(): H13A descrambler is not supported\n";
    goto LABEL_23;
  }
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecThymeAvx::populateTiles(CAHDecThymeAvx *this)
{
  uint64_t v2 = (*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 140)
                    * *(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 136));
  uint64_t v3 = *((void *)this + *((unsigned int *)this + 13) + 34);
  CAHDecThymeAvx::populateClearTiles(this);
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 1528;
    do
    {
      CAHDecTansyAvx::populateTileRegisters((uint64_t)this, v5, v4++);
      v5 += 12;
    }
    while (v2 != v4);
  }
  return 0;
}

uint64_t CAHDecThymeAvx::populateAvxVPDependency(CAVDAvxDecoder **this)
{
  if (CAVDAvxDecoder::isParallelDecode(this[32])) {
    int v2 = 0;
  }
  else {
    int v2 = 32;
  }
  *((_DWORD *)this[33] + 317) = *((_DWORD *)this[33] + 317) & 0xFFFFFFDF | v2;
  *((_DWORD *)this[33] + 317) &= 0xFFFFF83F;
  *((_DWORD *)this[33] + 317) &= 0xFFFF07FF;
  *((_DWORD *)this[33] + 318) = 0;
  return 0;
}

uint64_t CAHDecThymeAvx::populateCommonRegisters(CAHDecThymeAvx *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000003;
  return 0;
}

uint64_t CAHDecThymeAvx::updateCommonRegisters(CAHDecThymeAvx *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecThymeAvx::populateSequenceRegisters(CAHDecThymeAvx *this)
{
  uint64_t v2 = *((void *)this + 32);
  uint64_t v1 = *((void *)this + 33);
  uint64_t v3 = *(void *)(v2 + 42424);
  uint64_t v4 = *(void *)(v2 + 15944);
  *(_DWORD *)(v1 + 32) = 0;
  unsigned __int16 v5 = *(_DWORD *)(v4 + 8) - 1;
  *(_DWORD *)(v1 + 32) = v5;
  *(_DWORD *)(v1 + 32) = (v5 | ((unsigned __int16)*(_DWORD *)(v4 + 12) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 36) = 0;
  int v6 = *(_DWORD *)(v3 + 80) & 1;
  *(_DWORD *)(v1 + 36) = v6;
  unsigned int v7 = v6 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v3 + 76) & 7));
  *(_DWORD *)(v1 + 36) = v7;
  unsigned int v8 = v7 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v3 + 72) & 1));
  *(_DWORD *)(v1 + 36) = v8;
  unsigned int v9 = v8 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v3 + 96) & 1));
  *(_DWORD *)(v1 + 36) = v9;
  unsigned int v10 = v9 & 0xFFFFFFBF | ((*(unsigned char *)(v3 + 95) & 1) << 6);
  *(_DWORD *)(v1 + 36) = v10;
  unsigned int v11 = v10 & 0xFFFFFF7F | ((*(unsigned char *)(v3 + 94) & 1) << 7);
  *(_DWORD *)(v1 + 36) = v11;
  unsigned int v12 = v11 & 0xFFFFFEFF | ((*(unsigned char *)(v3 + 93) & 1) << 8);
  *(_DWORD *)(v1 + 36) = v12;
  unsigned int v13 = v12 & 0xFFFFFDFF | ((*(unsigned char *)(v3 + 92) & 1) << 9);
  *(_DWORD *)(v1 + 36) = v13;
  unsigned int v14 = v13 & 0xFFFFFBFF | ((*(_DWORD *)(v3 + 60) == 15) << 10);
  *(_DWORD *)(v1 + 36) = v14;
  LODWORD(v3) = v14 & 0xFFFFF7FF | (*(unsigned __int8 *)(v3 + 1942) << 11);
  *(_DWORD *)(v1 + 36) = v3;
  LODWORD(v3) = v3 & 0xFFF87FFF | ((*(unsigned char *)(v4 + 58) & 0xF) << 15);
  *(_DWORD *)(v1 + 36) = v3;
  LODWORD(v3) = v3 & 0xFF87FFFF | ((*(unsigned char *)(v4 + 57) & 0xF) << 19);
  *(_DWORD *)(v1 + 36) = v3;
  *(_DWORD *)(v1 + 36) = v3 & 0xFCFFFFFF | ((*(unsigned char *)(v4 + 56) & 3) << 24);
  return 0;
}

uint64_t CAHDecThymeAvx::getUpscaleConvolveStep(CAHDecThymeAvx *this, int a2, int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 >= 0) {
      int v3 = a3;
    }
    else {
      int v3 = a3 + 1;
    }
    return (((v3 >> 1) + (a2 << 14)) / a3);
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      int v6 = "int32_t CAHDecThymeAvx::getUpscaleConvolveStep(int, int)";
      __int16 v7 = 1024;
      int v8 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid out_length %d\n", (uint8_t *)&v5, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t CAHDecThymeAvx::getUpscaleConvolveX0(CAHDecThymeAvx *this, int a2, int a3, int a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 >= 0) {
      int v4 = a3;
    }
    else {
      int v4 = a3 + 1;
    }
    return ((((a2 - a3) << 13) + (v4 >> 1)) / a3
          - ((a4 * a3 - (a2 << 14) + (a4 * a3 - (a2 << 14) < 0)) >> 1)
          + 128) & 0x3FFF;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      __int16 v7 = "int32_t CAHDecThymeAvx::getUpscaleConvolveX0(int, int, int32_t)";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid out_length %d\n", (uint8_t *)&v6, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t CAHDecThymeAvx::populatePictureRegisters(CAHDecThymeAvx *this)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v3 = *(void *)(v1 + 15944);
  uint64_t v4 = *(void *)(v1 + 42424);
  *(_DWORD *)(v2 + 40) = 766509056;
  int v5 = ((*(unsigned char *)(v1 + 2652) & 1) << 19) | 0x2DB00000;
  *(_DWORD *)(v2 + 40) = v5;
  unsigned int v6 = v5 & 0xFFFBFFFF | ((*(unsigned char *)(v1 + 2653) & 1) << 18);
  *(_DWORD *)(v2 + 40) = v6;
  unsigned int v7 = v6 & 0xFFFDFFFF | ((*(unsigned char *)(v1 + 2654) & 1) << 17);
  *(_DWORD *)(v2 + 40) = v7;
  int v8 = *(unsigned __int8 *)(v3 + 128);
  if (*(unsigned char *)(v3 + 128)) {
    int v8 = (*(unsigned char *)(v4 + 1956) == 0) << 13;
  }
  int v9 = v8 | v7;
  *(_DWORD *)(v2 + 40) = v9;
  int v10 = v9 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v2 + 40) = v10;
  unsigned int v11 = v10 & 0xFFFFF00F | ((*(_DWORD *)(*((void *)this + 32) + 2644) == 1) << 10) | 0x2E0;
  *(_DWORD *)(v2 + 40) = v11;
  unsigned int v12 = v11 & 0xFFFFFFE3 | (4 * (*(_DWORD *)(v3 + 78516) & 3));
  *(_DWORD *)(v2 + 40) = v12;
  *(_DWORD *)(v2 + 40) = v12 & 0xFFFFFFFC | *(_DWORD *)(v3 + 78520) & 3;
  *(_DWORD *)(v2 + 44) = 0;
  if (*(unsigned char *)(v4 + 1956)) {
    int v13 = 318767104;
  }
  else {
    int v13 = 50331648;
  }
  *(_DWORD *)(v2 + 44) = v13;
  int v14 = *(_DWORD *)(v3 + 24);
  int v15 = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v2 + 48) = 0;
  if (*(unsigned char *)(v4 + 1956)) {
    int v15 = ((_WORD)v15 + 7) & 0xFFF8;
  }
  int v16 = (v15 << 16) - 0x10000;
  *(_DWORD *)(v2 + 48) = v16;
  if (*(unsigned char *)(v4 + 1956)) {
    LOWORD(v14) = (v14 + 7) & 0xFFF8;
  }
  *(_DWORD *)(v2 + 52) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  *(_DWORD *)(v2 + 48) = v16 & 0xFFFF0000 | (unsigned __int16)(v14 - 1);
  int v17 = *(unsigned __int8 *)(v3 + 128) << 31;
  *(_DWORD *)(v2 + 56) = v17;
  unsigned int v18 = v17 & 0x807FFFFF | (*(_DWORD *)(v4 + 1876) << 23);
  *(_DWORD *)(v2 + 56) = v18;
  unsigned int v19 = v18 & 0xFF8FFFFF | ((*(_DWORD *)(v4 + 1896) & 7) << 20);
  *(_DWORD *)(v2 + 56) = v19;
  unsigned int v20 = v19 & 0xFFF1FFFF | ((*(_DWORD *)(v4 + 1900) & 7) << 17);
  *(_DWORD *)(v2 + 56) = v20;
  unsigned int v21 = v20 & 0xFFFEFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79300) & 1) << 16);
  *(_DWORD *)(v2 + 56) = v21;
  unsigned int v22 = v21 & 0xFFFF7FFF | ((*(unsigned char *)(v4 + 2284) & 1) << 15);
  *(_DWORD *)(v2 + 56) = v22;
  char v23 = *(unsigned char *)(v4 + 2284);
  if (v23) {
    char v23 = *(unsigned char *)(v4 + 2285);
  }
  unsigned int v24 = v22 & 0xFFFFBFFF | ((v23 & 1) << 14);
  *(_DWORD *)(v2 + 56) = v24;
  char v25 = *(unsigned char *)(v4 + 2284);
  if (v25) {
    char v25 = *(unsigned char *)(v4 + 2287);
  }
  unsigned int v26 = v24 & 0xFFFFDFFF | ((v25 & 1) << 13);
  *(_DWORD *)(v2 + 56) = v26;
  unsigned int v27 = v26 & 0xFFFFEFFF | (*(unsigned __int8 *)(v4 + 1957) << 12);
  *(_DWORD *)(v2 + 56) = v27;
  if (*(unsigned char *)(v3 + 128)) {
    char v28 = 0;
  }
  else {
    char v28 = *(unsigned char *)(v4 + 1958);
  }
  unsigned int v29 = v27 & 0xFFFFFBFF | ((v28 & 1) << 10);
  *(_DWORD *)(v2 + 56) = v29;
  unsigned int v30 = v29 & 0xFFFFFDFF | (*(unsigned __int8 *)(v4 + 1962) << 9);
  *(_DWORD *)(v2 + 56) = v30;
  unsigned int v31 = v30 & 0xFFFFFEFF | (*(unsigned __int8 *)(v4 + 1941) << 8);
  *(_DWORD *)(v2 + 56) = v31;
  if (*(unsigned char *)(v3 + 128)) {
    char v32 = 1;
  }
  else {
    char v32 = *(unsigned char *)(v4 + 1948);
  }
  uint64_t v33 = 0;
  unsigned int v34 = v31 & 0xFFFFFF7F | ((v32 & 1) << 7);
  *(_DWORD *)(v2 + 56) = v34;
  unsigned int v35 = v34 & 0xFFFFFFBF | (*(unsigned __int8 *)(v4 + 1956) << 6);
  *(_DWORD *)(v2 + 56) = v35;
  unsigned int v36 = v35 & 0xFFFFFFDF | (32 * *(unsigned __int8 *)(v4 + 1959));
  *(_DWORD *)(v2 + 56) = v36;
  unsigned int v37 = v36 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v4 + 1892) & 1));
  *(_DWORD *)(v2 + 56) = v37;
  unsigned int v38 = v37 & 0xFFFFFFF7 | (8 * *(unsigned __int8 *)(v4 + 1960));
  *(_DWORD *)(v2 + 56) = v38;
  unsigned int v39 = v38 & 0xFFFFFFFB | (4 * *(unsigned __int8 *)(v4 + 1961));
  *(_DWORD *)(v2 + 56) = v39;
  *(_DWORD *)(v2 + 56) = v39 & 0xFFFFFFFC | *(_DWORD *)(v4 + 1964) & 3;
  do
  {
    *(&v210 + v33) = v33 + 1;
    ++v33;
  }
  while (v33 != 7);
  unint64_t v40 = 0;
  uint64_t v41 = 1;
  do
  {
    if (v40 <= 5)
    {
      uint64_t v42 = *(void *)(v3 + 79224);
      uint64_t v43 = v41;
      do
      {
        if (v42 && *(void *)(v42 + 8 * v40) == *(void *)(v42 + 8 * v43)) {
          *(&v210 + v43) = *(&v210 + v40);
        }
        ++v43;
      }
      while (v43 != 7);
    }
    ++v40;
    ++v41;
  }
  while (v40 != 7);
  int v44 = 0;
  *(_DWORD *)(v2 + 60) = 0;
  if (!*(unsigned char *)(v3 + 128)) {
    int v44 = *(unsigned __int8 *)(v4 + 2192);
  }
  uint64_t v45 = 0;
  *(_DWORD *)(v2 + 60) = v44 << 29;
  int v46 = ((v210 & 7) << 25) | ((*(_DWORD *)(v4 + 1872) != 0) << 28) | ((v211 & 7) << 22) | ((v212 & 7) << 19) | ((v213 & 7) << 16) | ((v214 & 7) << 13) | ((v215 & 7) << 10) | ((v216 & 7) << 7) | (v44 << 29);
  *(_DWORD *)(v2 + 60) = v46;
  unsigned int v47 = v46 & 0xFFFFFFBF | ((*(_DWORD *)(v4 + 2116) & 1) << 6);
  *(_DWORD *)(v2 + 60) = v47;
  unsigned int v48 = v47 & 0xFFFFFFDF | (32 * (*(_DWORD *)(v4 + 2120) & 1));
  *(_DWORD *)(v2 + 60) = v48;
  unsigned int v49 = v48 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v4 + 2124) & 1));
  *(_DWORD *)(v2 + 60) = v49;
  unsigned int v50 = v49 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v4 + 2128) & 1));
  *(_DWORD *)(v2 + 60) = v50;
  unsigned int v51 = v50 & 0xFFFFFFFB | (4 * (*(_DWORD *)(v4 + 2132) & 1));
  *(_DWORD *)(v2 + 60) = v51;
  unsigned int v52 = v51 & 0xFFFFFFFD | (2 * (*(_DWORD *)(v4 + 2136) & 1));
  *(_DWORD *)(v2 + 60) = v52;
  *(_DWORD *)(v2 + 60) = v52 & 0xFFFFFFFE | *(_DWORD *)(v4 + 2140) & 1;
  uint64_t v53 = (unsigned char *)(v4 + 2300);
  int v54 = (_WORD *)(v4 + 2368);
  do
  {
    uint64_t v55 = (_DWORD *)(v2 + 96 + v45);
    *(v55 - 8) = 0;
    int v56 = (*(_DWORD *)(v4 + 2524 + v45) & 1) << 16;
    *(v55 - 8) = v56;
    int v57 = v56 | ((*v53 != 0) << 15);
    *(v55 - 8) = v57;
    int v58 = v57 | ((*(v53 - 1) != 0) << 14);
    *(v55 - 8) = v58;
    int v59 = v58 | ((*(v53 - 2) != 0) << 13);
    *(v55 - 8) = v59;
    unsigned int v60 = v59 & 0xFFFFE3FF | ((*v54 & 7) << 10);
    *(v55 - 8) = v60;
    int v61 = v60 | ((*(v53 - 7) != 0) << 9);
    *(v55 - 8) = v61;
    *(v55 - 8) = v61 & 0xFFFFFE00 | *(v54 - 5) & 0x1FF;
    *uint64_t v55 = 0;
    int v62 = (*(v53 - 6) != 0) << 31;
    *uint64_t v55 = v62;
    unsigned int v63 = v62 & 0x80FFFFFF | ((*(v54 - 4) & 0x7F) << 24);
    *uint64_t v55 = v63;
    int v64 = v63 | ((*(v53 - 5) != 0) << 23);
    *uint64_t v55 = v64;
    unsigned int v65 = v64 & 0xFF80FFFF | ((*(v54 - 3) & 0x7F) << 16);
    *uint64_t v55 = v65;
    int v66 = v65 | ((*(v53 - 4) != 0) << 15);
    *uint64_t v55 = v66;
    unsigned int v67 = v66 & 0xFFFF80FF | ((*(v54 - 2) & 0x7F) << 8);
    *uint64_t v55 = v67;
    int v68 = v67 | ((*(v53 - 3) != 0) << 7);
    *uint64_t v55 = v68;
    *uint64_t v55 = v68 & 0xFFFFFF80 | *(v54 - 1) & 0x7F;
    v45 += 4;
    v53 += 8;
    v54 += 8;
  }
  while (v45 != 32);
  uint64_t v69 = 0;
  *(_DWORD *)(v2 + 128) = 0x20000;
  uint64_t v70 = v3 + 78544;
  do
  {
    int v71 = (unsigned int *)(v2 + 144 + v69);
    *(v71 - 3) = 0;
    unsigned int v72 = *(_DWORD *)(v70 - 16) << 29;
    *(v71 - 3) = v72;
    unsigned int v73 = v72 & 0xFF00FFFF | (*(_DWORD *)(v70 - 12) << 16);
    *(v71 - 3) = v73;
    unsigned int v74 = v73 & 0xFFFF00FF | (*(_DWORD *)(v70 - 8) << 8);
    *(v71 - 3) = v74;
    *(v71 - 3) = v74 | *(unsigned __int8 *)(v70 - 4);
    *int v71 = 0;
    unsigned int v75 = *(_DWORD *)v70 << 24;
    *int v71 = v75;
    unsigned int v76 = v75 & 0xFF00FFFF | (*(_DWORD *)(v70 + 4) << 16);
    *int v71 = v76;
    unsigned int v77 = v76 & 0xFFFF00FF | (*(_DWORD *)(v70 + 8) << 8);
    *int v71 = v77;
    *int v71 = v77 | *(unsigned __int8 *)(v70 + 12);
    v69 += 4;
    v70 += 224;
  }
  while (v69 != 12);
  *(_DWORD *)(v2 + 156) = 0;
  int v78 = *(_DWORD *)(v4 + 3160) << 31;
  *(_DWORD *)(v2 + 156) = v78;
  unsigned int v79 = v78 & 0x9FFFFFFF | ((*(_DWORD *)(v3 + 79200) & 3) << 29);
  *(_DWORD *)(v2 + 156) = v79;
  unsigned int v80 = v79 & 0xE01FFFFF | (*(_DWORD *)(v4 + 2244) << 21);
  *(_DWORD *)(v2 + 156) = v80;
  unsigned int v81 = v80 & 0xFFE03FFF | ((*(_DWORD *)(v4 + 2248) & 0x7F) << 14);
  *(_DWORD *)(v2 + 156) = v81;
  unsigned int v82 = v81 & 0xFFFFC07F | ((*(_DWORD *)(v4 + 2252) & 0x7F) << 7);
  *(_DWORD *)(v2 + 156) = v82;
  *(_DWORD *)(v2 + 156) = v82 & 0xFFFFFF80 | *(_DWORD *)(v4 + 2260) & 0x7F;
  *(_DWORD *)(v2 + 160) = 0;
  int v83 = (*(_DWORD *)(v4 + 2256) & 0x7F) << 20;
  *(_DWORD *)(v2 + 160) = v83;
  unsigned int v84 = v83 & 0xFFF01FFF | ((*(_DWORD *)(v4 + 2264) & 0x7F) << 13);
  *(_DWORD *)(v2 + 160) = v84;
  int v85 = v84 | (*(unsigned __int8 *)(v4 + 2268) << 12);
  *(_DWORD *)(v2 + 160) = v85;
  unsigned int v86 = v85 & 0xFFFFF0FF | ((*(_DWORD *)(v4 + 2272) & 0xF) << 8);
  *(_DWORD *)(v2 + 160) = v86;
  unsigned int v87 = v86 & 0xFFFFFF0F | (16 * (*(_DWORD *)(v4 + 2276) & 0xF));
  *(_DWORD *)(v2 + 160) = v87;
  *(_DWORD *)(v2 + 160) = v87 & 0xFFFFFFF0 | *(_DWORD *)(v4 + 2280) & 0xF;
  *(_DWORD *)(v2 + 164) = 0;
  if (!*(unsigned char *)(v4 + 1956))
  {
    int v102 = *(_DWORD *)(v4 + 3160);
    if (!v102) {
      goto LABEL_177;
    }
    int v102 = *(_DWORD *)(v4 + 3168) << 31;
    *(_DWORD *)(v2 + 164) = v102;
    if (*(_DWORD *)(v4 + 3168))
    {
      int v103 = ((*(_DWORD *)(v4 + 3176) & 1) << 28) | v102;
      *(_DWORD *)(v2 + 164) = v103;
      int v102 = ((*(_DWORD *)(v3 + 79204) & 3) << 29) | v103;
      *(_DWORD *)(v2 + 164) = v102;
    }
    if (!*(unsigned char *)(v4 + 1956))
    {
LABEL_177:
      if (!*(unsigned char *)(v4 + 1962))
      {
        unsigned int v104 = v102 & 0xF7FFFFFF | ((*(unsigned char *)(v4 + 2216) & 1) << 27);
        *(_DWORD *)(v2 + 164) = v104;
        unsigned int v105 = v104 & 0xF8FFFFFF | ((*(_DWORD *)(v4 + 2212) & 7) << 24);
        *(_DWORD *)(v2 + 164) = v105;
        unsigned int v106 = v105 & 0xFF03FFFF | ((*(_DWORD *)(v4 + 2196) & 0x3F) << 18);
        *(_DWORD *)(v2 + 164) = v106;
        unsigned int v107 = v106 & 0xFFFC0FFF | ((*(_DWORD *)(v4 + 2200) & 0x3F) << 12);
        *(_DWORD *)(v2 + 164) = v107;
        if (*(_DWORD *)(v4 + 2196) || *(_DWORD *)(v4 + 2200)) {
          int v108 = *(_DWORD *)(v4 + 2204);
        }
        else {
          LOBYTE(v108) = 0;
        }
        unsigned int v109 = v107 & 0xFFFFF03F | ((v108 & 0x3F) << 6);
        *(_DWORD *)(v2 + 164) = v109;
        if (*(_DWORD *)(v4 + 2196) || (int v110 = *(_DWORD *)(v4 + 2200)) != 0) {
          int v110 = *(_DWORD *)(v4 + 2208);
        }
        *(_DWORD *)(v2 + 164) = v109 & 0xFFFFFFC0 | v110 & 0x3F;
        if (!*(unsigned char *)(v3 + 56)) {
          *(_DWORD *)(v2 + 164) = v107 & 0xFFFFF000;
        }
      }
    }
  }
  *(_DWORD *)(v2 + 168) = 0;
  int v88 = (*(unsigned char *)(v4 + 2226) & 0x7F) << 21;
  *(_DWORD *)(v2 + 168) = v88;
  unsigned int v89 = v88 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 2227) & 0x7F) << 14);
  *(_DWORD *)(v2 + 168) = v89;
  unsigned int v90 = v89 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 2228) & 0x7F) << 7);
  *(_DWORD *)(v2 + 168) = v90;
  *(_DWORD *)(v2 + 168) = v90 & 0xFFFFFF80 | *(unsigned char *)(v4 + 2229) & 0x7F;
  *(_DWORD *)(v2 + 172) = 0;
  int v91 = (*(unsigned char *)(v4 + 2230) & 0x7F) << 21;
  *(_DWORD *)(v2 + 172) = v91;
  unsigned int v92 = v91 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 2231) & 0x7F) << 14);
  *(_DWORD *)(v2 + 172) = v92;
  unsigned int v93 = v92 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 2232) & 0x7F) << 7);
  *(_DWORD *)(v2 + 172) = v93;
  *(_DWORD *)(v2 + 172) = v93 & 0xFFFFFF80 | *(unsigned char *)(v4 + 2233) & 0x7F;
  *(_DWORD *)(v2 + 176) = 0;
  LOBYTE(v93) = *(unsigned char *)(v4 + 2236);
  *(_DWORD *)(v2 + 176) = (v93 & 0x7F) << 7;
  *(_DWORD *)(v2 + 176) = *(unsigned char *)(v4 + 2237) & 0x7F | ((v93 & 0x7F) << 7);
  *(void *)(v2 + 180) = 0;
  uint64_t v94 = (_DWORD *)(v2 + 180);
  *(void *)(v2 + 188) = 0;
  if (*(unsigned char *)(v4 + 99) && !*(unsigned char *)(v4 + 1962) && !*(unsigned char *)(v4 + 1956))
  {
    *uint64_t v94 = 0x10000000;
    int v95 = ((*(_DWORD *)(v4 + 3180) << 26) + 0x4000000) & 0xC000000 | 0x10000000;
    *uint64_t v94 = v95;
    unsigned int v96 = v95 & 0xFCFFFFFF | ((*(_DWORD *)(v4 + 3184) & 3) << 24);
    *uint64_t v94 = v96;
    unsigned int v97 = v96 & 0xFF0FFFFF | ((*(_DWORD *)(v4 + 3192) & 0xF) << 20);
    *uint64_t v94 = v97;
    unsigned int v98 = v97 & 0xFFF3FFFF | ((*(_DWORD *)(v4 + 3256) & 3) << 18);
    *uint64_t v94 = v98;
    unsigned int v99 = v98 & 0xFFFC3FFF | ((*(_DWORD *)(v4 + 3320) & 0xF) << 14);
    *uint64_t v94 = v99;
    unsigned int v100 = v99 & 0xFFFFCFFF | ((*(_DWORD *)(v4 + 3384) & 3) << 12);
    *uint64_t v94 = v100;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v101) = 0;
    }
    else {
      int v101 = *(_DWORD *)(v4 + 3196);
    }
    unsigned int v111 = v100 & 0xFFFFF0FF | ((v101 & 0xF) << 8);
    *uint64_t v94 = v111;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v112) = 0;
    }
    else {
      int v112 = *(_DWORD *)(v4 + 3260);
    }
    unsigned int v113 = v111 & 0xFFFFFF3F | ((v112 & 3) << 6);
    *uint64_t v94 = v113;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v114) = 0;
    }
    else {
      int v114 = *(_DWORD *)(v4 + 3324);
    }
    unsigned int v115 = v113 & 0xFFFFFFC3 | (4 * (v114 & 0xF));
    *uint64_t v94 = v115;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v116) = 0;
    }
    else {
      int v116 = *(_DWORD *)(v4 + 3388);
    }
    *uint64_t v94 = v115 & 0xFFFFFFFC | v116 & 3;
    if (*(int *)(v4 + 3188) <= 2) {
      LOBYTE(v117) = 0;
    }
    else {
      int v117 = *(_DWORD *)(v4 + 3200);
    }
    int v118 = (v117 & 0xF) << 20;
    *(_DWORD *)(v2 + 184) = v118;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v119) = 0;
    }
    else {
      int v119 = *(_DWORD *)(v4 + 3264);
    }
    int v120 = ((v119 & 3) << 18) | v118;
    *(_DWORD *)(v2 + 184) = v120;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v121) = 0;
    }
    else {
      int v121 = *(_DWORD *)(v4 + 3328);
    }
    int v122 = ((v121 & 0xF) << 14) | v120;
    *(_DWORD *)(v2 + 184) = v122;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v123) = 0;
    }
    else {
      int v123 = *(_DWORD *)(v4 + 3392);
    }
    int v124 = ((v123 & 3) << 12) | v122;
    *(_DWORD *)(v2 + 184) = v124;
    if (*(int *)(v4 + 3188) <= 3) {
      LOBYTE(v125) = 0;
    }
    else {
      int v125 = *(_DWORD *)(v4 + 3204);
    }
    int v126 = ((v125 & 0xF) << 8) | v124;
    *(_DWORD *)(v2 + 184) = v126;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v127) = 0;
    }
    else {
      int v127 = *(_DWORD *)(v4 + 3268);
    }
    int v128 = ((v127 & 3) << 6) | v126;
    *(_DWORD *)(v2 + 184) = v128;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v129) = 0;
    }
    else {
      int v129 = *(_DWORD *)(v4 + 3332);
    }
    unsigned int v130 = (4 * (v129 & 0xF)) | v128 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 184) = v130;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v131) = 0;
    }
    else {
      int v131 = *(_DWORD *)(v4 + 3396);
    }
    *(_DWORD *)(v2 + 184) = v130 & 0xFFFFFFFC | v131 & 3;
    if (*(int *)(v4 + 3188) <= 4) {
      LOBYTE(v132) = 0;
    }
    else {
      int v132 = *(_DWORD *)(v4 + 3208);
    }
    int v133 = (v132 & 0xF) << 20;
    *(_DWORD *)(v2 + 188) = v133;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v134) = 0;
    }
    else {
      int v134 = *(_DWORD *)(v4 + 3272);
    }
    int v135 = ((v134 & 3) << 18) | v133;
    *(_DWORD *)(v2 + 188) = v135;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v136) = 0;
    }
    else {
      int v136 = *(_DWORD *)(v4 + 3336);
    }
    int v137 = ((v136 & 0xF) << 14) | v135;
    *(_DWORD *)(v2 + 188) = v137;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v138) = 0;
    }
    else {
      int v138 = *(_DWORD *)(v4 + 3400);
    }
    int v139 = ((v138 & 3) << 12) | v137;
    *(_DWORD *)(v2 + 188) = v139;
    if (*(int *)(v4 + 3188) <= 5) {
      LOBYTE(v140) = 0;
    }
    else {
      int v140 = *(_DWORD *)(v4 + 3212);
    }
    int v141 = ((v140 & 0xF) << 8) | v139;
    *(_DWORD *)(v2 + 188) = v141;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v142) = 0;
    }
    else {
      int v142 = *(_DWORD *)(v4 + 3276);
    }
    int v143 = ((v142 & 3) << 6) | v141;
    *(_DWORD *)(v2 + 188) = v143;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v144) = 0;
    }
    else {
      int v144 = *(_DWORD *)(v4 + 3340);
    }
    unsigned int v145 = (4 * (v144 & 0xF)) | v143 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 188) = v145;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v146) = 0;
    }
    else {
      int v146 = *(_DWORD *)(v4 + 3404);
    }
    *(_DWORD *)(v2 + 188) = v145 & 0xFFFFFFFC | v146 & 3;
    if (*(int *)(v4 + 3188) <= 6) {
      LOBYTE(v147) = 0;
    }
    else {
      int v147 = *(_DWORD *)(v4 + 3216);
    }
    int v148 = (v147 & 0xF) << 20;
    *(_DWORD *)(v2 + 192) = v148;
    if (*(int *)(v4 + 3188) < 7) {
      LOBYTE(v149) = 0;
    }
    else {
      int v149 = *(_DWORD *)(v4 + 3280);
    }
    int v150 = ((v149 & 3) << 18) | v148;
    *(_DWORD *)(v2 + 192) = v150;
    if (*(int *)(v4 + 3188) < 7) {
      int v151 = 0;
    }
    else {
      int v151 = (*(_DWORD *)(v4 + 3344) & 0xF) << 14;
    }
    int v152 = v151 | v150;
    *(_DWORD *)(v2 + 192) = v152;
    if (*(int *)(v4 + 3188) < 7) {
      int v153 = 0;
    }
    else {
      int v153 = (*(_DWORD *)(v4 + 3408) & 3) << 12;
    }
    int v154 = v153 | v152;
    *(_DWORD *)(v2 + 192) = v154;
    if (*(int *)(v4 + 3188) <= 7) {
      int v155 = 0;
    }
    else {
      int v155 = (*(_DWORD *)(v4 + 3220) & 0xF) << 8;
    }
    int v156 = v155 | v154;
    *(_DWORD *)(v2 + 192) = v156;
    if (*(int *)(v4 + 3188) < 8) {
      int v157 = 0;
    }
    else {
      int v157 = (*(_DWORD *)(v4 + 3284) & 3) << 6;
    }
    int v158 = v157 | v156;
    *(_DWORD *)(v2 + 192) = v158;
    if (*(int *)(v4 + 3188) < 8) {
      int v159 = 0;
    }
    else {
      int v159 = 4 * (*(_DWORD *)(v4 + 3348) & 0xF);
    }
    unsigned int v160 = v159 | v158 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 192) = v160;
    if (*(int *)(v4 + 3188) < 8) {
      int v161 = 0;
    }
    else {
      int v161 = *(_DWORD *)(v4 + 3412) & 3;
    }
    *(_DWORD *)(v2 + 192) = v161 | v160 & 0xFFFFFFFC;
  }
  if (*(unsigned char *)(v4 + 98))
  {
    int v162 = (_DWORD *)(v2 + 196);
    if (*(unsigned char *)(v4 + 2172) != 8)
    {
      *int v162 = 0x80000000;
      unsigned int v163 = ((*(unsigned __int8 *)(v4 + 2172) << 28) - 0x10000000) | 0x80000000;
      goto LABEL_143;
    }
  }
  else
  {
    int v162 = (_DWORD *)(v2 + 196);
  }
  unsigned int v163 = 0;
  *int v162 = 0;
LABEL_143:
  *(_DWORD *)(v2 + 196) = v163;
  *(_DWORD *)(v2 + 196) = (unsigned __int16)(*(_DWORD *)(v4 + 2164) - 1) | v163;
  UpscaleConvolveStep = (CAHDecThymeAvx *)CAHDecThymeAvx::getUpscaleConvolveStep(this, *(_DWORD *)(v4 + 2176), *(_DWORD *)(v4 + 2164));
  __int16 v165 = (__int16)UpscaleConvolveStep;
  UpscaleConvolveX0 = (CAHDecThymeAvx *)CAHDecThymeAvx::getUpscaleConvolveX0(UpscaleConvolveStep, *(_DWORD *)(v4 + 2176), *(_DWORD *)(v4 + 2164), (int)UpscaleConvolveStep);
  *(_DWORD *)(v2 + 200) = v165 & 0x3FFF | (((unsigned __int16)UpscaleConvolveX0 & 0x3FFF) << 14);
  unsigned int v167 = (*(_DWORD *)(v4 + 2176) + 1) >> 1;
  unsigned int v168 = (*(_DWORD *)(v4 + 2164) + 1) >> 1;
  uint64_t v169 = (CAHDecThymeAvx *)CAHDecThymeAvx::getUpscaleConvolveStep(UpscaleConvolveX0, v167, v168);
  *(_DWORD *)(v2 + 204) = (unsigned __int16)v169 & 0x3FFF | ((CAHDecThymeAvx::getUpscaleConvolveX0(v169, v167, v168, (int)v169) & 0x3FFF) << 14);
  *(_DWORD *)(v2 + 208) = 0;
  int v170 = (*(_DWORD *)(v4 + 3448) & 3) << 10;
  *(_DWORD *)(v2 + 208) = v170;
  int v171 = *(unsigned __int8 *)(v3 + 56);
  if (*(unsigned char *)(v3 + 56)) {
    int v171 = (*(_DWORD *)(v4 + 3452) & 3) << 8;
  }
  int v172 = v171 | v170;
  *(_DWORD *)(v2 + 208) = v172;
  int v173 = *(unsigned __int8 *)(v3 + 56);
  if (*(unsigned char *)(v3 + 56)) {
    int v173 = (*(_DWORD *)(v4 + 3456) & 3) << 6;
  }
  int v174 = v173 | v172;
  *(_DWORD *)(v2 + 208) = v174;
  int v175 = (16 * (*(_DWORD *)(v3 + 79208) & 3)) | v174;
  *(_DWORD *)(v2 + 208) = v175;
  int v176 = (4 * (*(_DWORD *)(v3 + 79212) & 3)) | v175;
  *(_DWORD *)(v2 + 208) = v176;
  *(_DWORD *)(v2 + 208) = v176 & 0xFFC | *(_DWORD *)(v3 + 79216) & 3;
  *(_DWORD *)(v2 + 212) = 0;
  int v177 = *(_DWORD *)(v3 + 78496);
  *(_DWORD *)(v2 + 212) = v177 << 16;
  *(_DWORD *)(v2 + 212) = *(unsigned __int16 *)(v3 + 78492) | ((unsigned __int16)v177 << 16);
  *(_DWORD *)(v2 + 216) = 0;
  int v178 = *(_DWORD *)(v3 + 78504);
  *(_DWORD *)(v2 + 216) = v178 << 16;
  *(_DWORD *)(v2 + 216) = *(unsigned __int16 *)(v3 + 78500) | ((unsigned __int16)v178 << 16);
  if (*(unsigned char *)(v3 + 128))
  {
    uint64_t result = 0;
    if (*(unsigned char *)(v4 + 1956))
    {
      *(_DWORD *)(v2 + 360) = (*(_DWORD *)(v2 + 40) << 18) & 0x1000000 | (((*(_DWORD *)(v2 + 40) >> 4) & 1) << 25);
      *(_DWORD *)(v2 + 392) = 0;
      unsigned int v180 = (((*(_DWORD *)(v3 + 12) << 16) + 458752) & 0xFFF80000) - 0x10000;
      *(_DWORD *)(v2 + 392) = v180;
      *(_DWORD *)(v2 + 392) = ((((unsigned __int16)*(_DWORD *)(v3 + 8) + 7) & 0xFFF8) + 0xFFFF) | v180;
      *(_DWORD *)(v2 + 424) = 1073758208;
    }
  }
  else
  {
    uint64_t v181 = (_DWORD *)(v2 + 220);
    uint64_t v182 = -308;
    do
    {
      uint64_t v183 = v4 + v182;
      uint64_t v184 = (unsigned char *)(v4 + v182 + 4136);
      if (*v184 == 1)
      {
        if ((*(unsigned char *)(v2 + 57) & 4) != 0) {
          char v185 = -3;
        }
        else {
          char v185 = -2;
        }
      }
      else
      {
        char v185 = -6;
      }
      char v186 = v185 + 16;
      *uint64_t v181 = 0;
      int v187 = *v184 << 30;
      *uint64_t v181 = v187;
      unsigned int v188 = v187 & 0xC0007FFF | (((*(int *)(v183 + 4096) >> v186) & 0x7FFF) << 15);
      *uint64_t v181 = v188;
      *uint64_t v181 = v188 & 0xFFFF8000 | (*(int *)(v183 + 4100) >> v186) & 0x7FFF;
      v181[7] = 0;
      int v189 = (*(unsigned char *)(v183 + 4137) == 0) << 30;
      v181[7] = v189;
      unsigned int v190 = v189 & 0xC0007FFF | (((*(_DWORD *)(v183 + 4104) >> 1) & 0x7FFF) << 15);
      v181[7] = v190;
      v181[7] = v190 & 0xFFFF8000 | ((unsigned __int16)*(_DWORD *)(v183 + 4108) >> 1);
      v181[14] = 0;
      int v191 = (*(_DWORD *)(v183 + 4112) << 14) & 0x3FFF8000;
      v181[14] = v191;
      v181[14] = v191 & 0xFFFF8000 | ((unsigned __int16)*(_DWORD *)(v183 + 4116) >> 1);
      v181[21] = 0;
      int v192 = *(unsigned __int16 *)(v183 + 4128);
      v181[21] = v192 << 16;
      v181[21] = *(unsigned __int16 *)(v183 + 4130) | ((unsigned __int16)v192 << 16);
      v181[28] = 0;
      int v193 = *(unsigned __int16 *)(v183 + 4132);
      v181[28] = v193 << 16;
      v181[28] = *(unsigned __int16 *)(v183 + 4134) | ((unsigned __int16)v193 << 16);
      ++v181;
      v182 += 44;
    }
    while (v182);
    uint64_t v194 = **(void **)(v3 + 79224);
    if (v194)
    {
      uint64_t v195 = 0;
      uint64_t v196 = (_DWORD *)(v2 + 428);
      while (1)
      {
        *(v196 - 16) = 0;
        int v197 = (*(_DWORD *)(v2 + 40) << 18) & 0x1000000 | (((*(_DWORD *)(v2 + 40) >> 4) & 1) << 25);
        *(v196 - 16) = v197;
        *(v196 - 16) = v197 | *(unsigned __int8 *)(v194 + 4);
        *(v196 - 8) = 0;
        int v198 = (*(_DWORD *)(v194 + 1768) << 16) - 0x10000;
        *(v196 - 8) = v198;
        *(v196 - 8) = v198 & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)(v194 + 1760) - 1);
        *uint64_t v196 = 0;
        int v199 = *(_DWORD *)(v3 + 12);
        int v200 = v199 >= 0 ? *(_DWORD *)(v3 + 12) : v199 + 1;
        int v201 = (((v200 >> 1) + (*(_DWORD *)(v194 + 1768) << 14)) / v199) << 16;
        *uint64_t v196 = v201;
        int v202 = *(_DWORD *)(v194 + 1760);
        int v203 = *(_DWORD *)(v3 + 8);
        int v204 = v203 >= 0 ? *(_DWORD *)(v3 + 8) : v203 + 1;
        *uint64_t v196 = v201 & 0xFFFF0000 | (unsigned __int16)(((v204 >> 1) + (v202 << 14)) / v203);
        if (v195 == 6) {
          break;
        }
        uint64_t v194 = *(void *)(*(void *)(v3 + 79224) + 8 * v195 + 8);
        ++v196;
        ++v195;
        if (!v194)
        {
          int v205 = (unint64_t)(v195 - 1) < 6;
          goto LABEL_170;
        }
      }
      int v205 = 0;
    }
    else
    {
      LODWORD(v195) = 0;
      int v205 = 1;
LABEL_170:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v206 = 136315394;
        int v207 = "virtual int CAHDecThymeAvx::populatePictureRegisters()";
        __int16 v208 = 1024;
        int v209 = v195;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid reference buffer %d\n", (uint8_t *)&v206, 0x12u);
      }
    }
    return (v205 << 31 >> 31);
  }
  return result;
}

uint64_t CAHDecThymeAvx::populateClearTiles(CAHDecThymeAvx *this)
{
  uint64_t v2 = (CAVDAvxDecoder *)*((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = (_DWORD *)*((void *)v2 + 1993);
  int v5 = v4[34];
  *(_WORD *)(v3 + 996) = v4[35];
  *(_WORD *)(v3 + 998) = v5;
  if (CAVDAvxDecoder::isParallelDecode(v2)) {
    int v6 = -1;
  }
  else {
    int v6 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 42424) + 3156);
  }
  unsigned int v7 = v4 + 16420;
  uint64_t v8 = *((void *)this + 33);
  *(_DWORD *)(v8 + 1260) = v6;
  uint64_t v9 = v4[35];
  if (v9)
  {
    int v10 = v4 + 16485;
    unsigned int v11 = (_WORD *)(v8 + 1000);
    do
    {
      int v12 = *v10++;
      *v11++ = v12;
      --v9;
    }
    while (v9);
  }
  uint64_t v13 = v4[34];
  if (v13)
  {
    int v14 = (_WORD *)(v8 + 1130);
    do
    {
      int v15 = *v7++;
      *v14++ = v15;
      --v13;
    }
    while (v13);
  }
  return 0;
}

uint64_t CAHDecThymeAvx::getTileStartCTU(CAHDecThymeAvx *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 996);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecThymeAvx::getTileEndCTU(CAHDecThymeAvx *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 996);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecThymeAvx::populateAvdWork(CAHDecThymeAvx *this)
{
  unsigned int v1 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)(v4 + 42424);
  uint64_t v3 = *(uint64_t **)(v4 + 15944);
  unsigned int v5 = *((_DWORD *)v3 + 34);
  LODWORD(v4) = *((_DWORD *)v3 + 35);
  unsigned int v6 = v2[74];
  unsigned int v45 = (v6 >> 28) + 2;
  int v7 = (v4 * v5 > (v6 >> 28) + 1) & (v6 >> 1);
  if ((v6 & 4) != 0 && ((v4 * v5 > (v6 >> 28) + 1) & (v6 >> 1)) == 0) {
    unsigned int v1 = (*(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) - 1) % v45;
  }
  int v8 = *(_DWORD *)(*(void *)v2 + 60);
  if (v7) {
    unsigned int v9 = (v6 >> 28) + 2;
  }
  else {
    unsigned int v9 = 1;
  }
  unsigned int v10 = 0x1000 / v9;
  if (v8 == 15) {
    char v11 = 5;
  }
  else {
    char v11 = 4;
  }
  char v50 = v11;
  if (v5)
  {
    unint64_t v12 = 0;
    int v13 = 0;
    __int16 v53 = 0;
    uint64_t v14 = *((void *)this + 33);
    uint64_t v51 = *v3;
    LODWORD(v15) = ((36 * v10 * (v9 - 1)) & 0xFFFFFFFC) / 0x24;
    unint64_t v16 = v14 + 50680 + 36 * v10 * (unint64_t)(v9 - 1);
    uint64_t v17 = -50644 - v14;
    unsigned int v18 = v3 + 8243;
    int v44 = -(v4 * v5);
    uint64_t v43 = v3 + 8210;
    unsigned int v19 = v1;
    unint64_t v20 = v16;
    unsigned int v47 = v3;
    int v46 = v7;
    unsigned int v39 = 0x1000 / v9;
    unsigned int v40 = v1;
    unsigned int v38 = v9;
    unsigned int v36 = v3 + 8243;
    uint64_t v37 = -50644 - v14;
    do
    {
      if (v4)
      {
        unint64_t v21 = 0;
        uint64_t v22 = v17 + v20;
        int v52 = v44 + v13;
        unint64_t v42 = v12 + 1;
        unsigned int v48 = (_DWORD *)v43 + v12 + 1;
        unsigned int v49 = (_DWORD *)v43 + v12;
        int v41 = v13;
        int v54 = v13;
        do
        {
          int v23 = v52 + v21;
          *(_WORD *)(v16 + 4) = v53 + v21;
          *(_WORD *)(v16 + 6) = v19;
          *(_WORD *)(v16 + 10) = v54 + v21;
          if (v54 + v21) {
            __int16 v24 = 4;
          }
          else {
            __int16 v24 = 5;
          }
          *(_WORD *)(v16 + 12) = v24;
          if (v23 == -1)
          {
            *(_DWORD *)(v16 + 14) = 262149;
          }
          else
          {
            if (v23 == -2) {
              int v25 = v7;
            }
            else {
              int v25 = 0;
            }
            *(_WORD *)(v16 + 14) = 4;
            if (v25 == 1) {
              *(_WORD *)(v16 + 16) = 4;
            }
            else {
              *(_WORD *)(v16 + 16) = 0;
            }
          }
          uint64_t v26 = *((void *)this + 32);
          unsigned int v55 = v19;
          if (*(unsigned char *)(v26 + 2834)) {
            uint64_t v27 = *(void *)(v26 + 2840);
          }
          else {
            uint64_t v27 = *(void *)(v26 + 1048) + 8;
          }
          unint64_t v28 = v51 + v3[(v54 + v21) + 18] - *(void *)v27;
          int v29 = 36 * v15;
          unint64_t v30 = HIDWORD(v28);
          if (*(void *)v27 || *(_DWORD *)(v27 + 152) || *(_DWORD *)(v27 + 156))
          {
            if (v30 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136315394;
              int v58 = "populateAvdWork";
              __int16 v59 = 1024;
              int v60 = 1687;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v27, v29 + 50700, v28, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
            if (*(void *)v27) {
              goto LABEL_59;
            }
          }
          if (*(_DWORD *)(v27 + 152) || *(_DWORD *)(v27 + 156))
          {
LABEL_59:
            if (v30 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136315394;
              int v58 = "populateAvdWork";
              __int16 v59 = 1024;
              int v60 = 1688;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v27, v29 + 50698, v28, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
          }
          uint64_t v3 = v47;
          char v32 = &v47[(v54 + v21) + 4114];
          uint64_t v33 = *v32;
          if (HIDWORD(*v32))
          {
            int v7 = v46;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136315394;
              int v58 = "populateAvdWork";
              __int16 v59 = 1024;
              int v60 = 1690;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              uint64_t v33 = *v32;
            }
          }
          else
          {
            int v7 = v46;
          }
          *(_DWORD *)(v16 + 24) = v33;
          *(_DWORD *)(v16 + 28) = (*(v18 - 1) >> v50) | (*v49 >> v50 << 16);
          ++v21;
          *(_DWORD *)(v16 + 32) = ((*v18 - 1) >> v50) | ((*v48 - 1) >> v50 << 16);
          unsigned int v19 = v55;
          if (v7) {
            unsigned int v19 = ((int)v21 + v54) % v45;
          }
          v20 += 36;
          *(_WORD *)(v16 + 8) = v19;
          unint64_t v15 = 0x8E38E38E38E38E39 * (v22 >> 2);
          unint64_t v4 = *((unsigned int *)v47 + 35);
          v22 += 36;
          ++v18;
          unint64_t v16 = v20;
        }
        while (v21 < v4);
        unsigned int v5 = *((_DWORD *)v47 + 34);
        unsigned int v1 = v40;
        int v13 = v41 + v21;
        v53 += v21;
        unint64_t v16 = v20;
        unsigned int v9 = v38;
        unsigned int v10 = v39;
        unint64_t v12 = v42;
        unsigned int v18 = v36;
        uint64_t v17 = v37;
      }
      else
      {
        ++v12;
      }
    }
    while (v12 < v5);
  }
  else
  {
    __int16 v53 = 0;
  }
  uint64_t v34 = v1;
  uint64_t v35 = *((void *)this + 33) + 28;
  do
  {
    *(_WORD *)(v35 + 2 * v34 - 2) = v53;
    *(_DWORD *)(v35 + 4 * v34) = 36 * (v34 - v1) * v10 + 50680;
    ++v34;
  }
  while (v1 + v9 != v34);
  return 0;
}

uint64_t CAHDecThymeAvx::allocWorkBuf_SPS(CAHDecThymeAvx *this, int *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  int v4 = a2[1];
  unsigned int v6 = *((unsigned __int8 *)a2 + 32);
  if (v6 >= 4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 136315394;
    unsigned int v49 = "allocWorkBuf_SPS";
    __int16 v50 = 1024;
    int v51 = 1837;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v48, 0x12u);
  }
  int v7 = (_DWORD *)*((void *)this + 32);
  int v8 = v7[10681];
  if (!v8 || (int v9 = v7[10682]) == 0)
  {
    int v8 = v5;
    int v9 = v4;
  }
  int v10 = v8 + 31;
  if (v8 < -31) {
    int v10 = v8 + 62;
  }
  unsigned int v11 = v10 >> 5;
  int v12 = v9 + 31;
  if (v9 < -31) {
    int v12 = v9 + 62;
  }
  unsigned int v13 = v12 >> 5;
  unsigned int v14 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v15 = v14;
  }
  else {
    char v15 = 0;
  }
  unsigned int v16 = 32 - __clz(v13 - 1);
  if (v13 >= 2) {
    char v17 = v16;
  }
  else {
    char v17 = 0;
  }
  unsigned int v18 = ((32 << (v17 + v15)) + 127) & 0xFFFFFF80;
  if (!v6)
  {
    unsigned int v27 = 0;
LABEL_27:
    LOBYTE(v28) = 0;
    goto LABEL_28;
  }
  int v19 = v8 << (v6 == 3);
  int v20 = v19 + 31;
  int v21 = v19 + 62;
  if (v20 >= 0) {
    int v21 = v20;
  }
  unsigned int v22 = v21 >> 5;
  if (v6 == 1) {
    ++v9;
  }
  int v23 = v9 >> (v6 == 1);
  int v25 = v23 + 15;
  BOOL v24 = v23 < -15;
  int v26 = v23 + 30;
  if (!v24) {
    int v26 = v25;
  }
  unsigned int v27 = v26 >> 4;
  if (v22 <= 1) {
    goto LABEL_27;
  }
  unsigned int v28 = 32 - __clz(v22 - 1);
LABEL_28:
  unsigned int v29 = 32 - __clz(v27 - 1);
  if (v27 >= 2) {
    char v30 = v29;
  }
  else {
    char v30 = 0;
  }
  unsigned int v31 = ((8 << (v30 + v28)) + 127) & 0xFFFFFF80;
  if (!v6) {
    unsigned int v31 = 0;
  }
  *((_DWORD *)this + 1040) = v18;
  *((_DWORD *)this + 1041) = v31;
  *((_DWORD *)this + 1045) = 9168;
  if (*((_WORD *)a2 + 14) == 64) {
    char v32 = 6;
  }
  else {
    char v32 = 7;
  }
  if (*((_WORD *)a2 + 14) == 64) {
    int v33 = 96;
  }
  else {
    int v33 = 384;
  }
  if (*((_WORD *)a2 + 14) == 64) {
    char v34 = 8;
  }
  else {
    char v34 = 10;
  }
  unsigned int v35 = ((v5 + (1 << v32) - 1) >> v32) * ((v4 + (1 << v32) - 1) >> v32);
  *((_DWORD *)this + 1047) = v35 * v33;
  *((_DWORD *)this + 1046) = v35 << v34;
  if (v7[662])
  {
LABEL_51:
    for (uint64_t i = 0; i != 2288; i += 176)
    {
      uint64_t v42 = *((unsigned int *)this + 1047);
      if (v42
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + i + 13424), v42, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_69;
        }
        int v48 = 136315650;
        unsigned int v49 = "allocWorkBuf_SPS";
        __int16 v50 = 1024;
        int v51 = 1939;
        __int16 v52 = 2080;
        __int16 v53 = "segMap";
        int v46 = &_os_log_internal;
        goto LABEL_68;
      }
    }
    uint64_t v43 = 0;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 1046);
      if (v44)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v43 + 8008), v44, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 2288) {
        return 0;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v48 = 136315650;
      unsigned int v49 = "allocWorkBuf_SPS";
      __int16 v50 = 1024;
      int v51 = 1945;
      __int16 v52 = 2080;
      __int16 v53 = "MvColo";
      int v46 = &_os_log_internal;
      goto LABEL_68;
    }
    goto LABEL_69;
  }
  uint64_t v36 = 0;
  while (1)
  {
    uint64_t v37 = *((unsigned int *)this + 1040);
    if (v37
      && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v36 + 3072), v37, 7, 1, 0))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_69;
      }
      int v48 = 136315650;
      unsigned int v49 = "allocWorkBuf_SPS";
      __int16 v50 = 1024;
      int v51 = 1880;
      __int16 v52 = 2080;
      __int16 v53 = "HdrY";
      int v46 = &_os_log_internal;
      goto LABEL_68;
    }
    uint64_t v38 = *((unsigned int *)this + 1041);
    uint64_t v39 = *((void *)this + 32);
    unsigned int v40 = (_OWORD *)(v39 + v36 + 5536);
    if (!v38)
    {
      *(void *)unsigned int v40 = 0;
      goto LABEL_50;
    }
    if (CAVDDecoder::allocAVDMem(v39, v40, v38, 7, 1, 0)) {
      break;
    }
LABEL_50:
    v36 += 176;
    if (v36 == 2464) {
      goto LABEL_51;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 136315650;
    unsigned int v49 = "allocWorkBuf_SPS";
    __int16 v50 = 1024;
    int v51 = 1885;
    __int16 v52 = 2080;
    __int16 v53 = "HdrC";
    int v46 = &_os_log_internal;
LABEL_68:
    _os_log_impl(&dword_223977000, v46, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v48, 0x1Cu);
  }
LABEL_69:
  (*(void (**)(CAHDecThymeAvx *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

void CAHDecThymeAvx::getPPSWorkBufSize(uint64_t this, unsigned __int8 *a2, char *a3)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  unsigned int v97 = (CAHDecTansyAvx *)this;
  uint64_t v4 = *(void *)(*(void *)(this + 256) + 42424);
  unsigned int v108 = *(_DWORD *)(v4 + 2176);
  int v5 = *(_DWORD *)(v4 + 2180);
  int v6 = a2[32];
  unsigned int v7 = a2[34];
  int v8 = *(_DWORD *)(v4 + 60);
  int v98 = v8 == 15;
  if (v8 == 15) {
    int v9 = 128;
  }
  else {
    int v9 = 64;
  }
  if (a2[33] > v7) {
    unsigned int v7 = a2[33];
  }
  int v10 = ((_WORD)v7 + 9) & 0x1FE;
  unsigned int v90 = v7;
  if (*(_DWORD *)(v4 + 13932))
  {
    unsigned int v11 = *(_DWORD *)(v4 + 13932);
    if (v8 == 15) {
      int v12 = 800;
    }
    else {
      int v12 = 400;
    }
    goto LABEL_10;
  }
  this = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (this)
  {
    *(_DWORD *)CMTime buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 1976;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
    if (v8 == 15) {
      int v12 = 800;
    }
    else {
      int v12 = 400;
    }
    unsigned int v11 = *(_DWORD *)(v4 + 13932);
    if (v11)
    {
LABEL_10:
      int v13 = 0;
      uint64_t v14 = v11;
      int v15 = *(_DWORD *)(v4 + 2624);
      unsigned int v16 = (int *)(v4 + 2628);
      do
      {
        int v18 = *v16++;
        int v17 = v18;
        int v19 = (v18 - v15) * v12;
        if (v13 <= v19) {
          int v13 = v19;
        }
        int v15 = v17;
        --v14;
      }
      while (v14);
      char v20 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  int v13 = 0;
  char v20 = 1;
LABEL_23:
  int v88 = v13;
  int v112 = v5;
  unsigned int v89 = a3;
  if (v6 == 3) {
    int v21 = 48;
  }
  else {
    int v21 = 32;
  }
  int v107 = v6;
  if (!v6) {
    int v21 = 16;
  }
  int v22 = *(unsigned __int8 *)(v4 + 2172);
  unsigned int v100 = (_DWORD *)v4;
  if (*(unsigned char *)(v4 + 98)) {
    BOOL v23 = v22 == 8;
  }
  else {
    BOOL v23 = 1;
  }
  int v24 = !v23;
  int v99 = v9;
  int v106 = v10;
  int v85 = v8;
  int v96 = v24;
  if (v20)
  {
    unint64_t v104 = 0;
    int v105 = 0;
    unint64_t v25 = 0;
    *(void *)&long long v103 = 0;
    char v26 = v8 == 15;
  }
  else
  {
    uint64_t v27 = 0;
    int v28 = 0;
    unint64_t v25 = 0;
    int v105 = 0;
    unint64_t v104 = 0;
    unsigned int v93 = (v10 * v21) >> 3;
    int v94 = *(unsigned __int8 *)(v4 + 2172);
    if (v8 == 15) {
      char v29 = 7;
    }
    else {
      char v29 = 6;
    }
    char v101 = v29;
    unsigned int v30 = (v22 << v29) >> 3;
    if (!v24) {
      unsigned int v30 = v9;
    }
    unsigned int v92 = v30;
    long long v103 = 0u;
    char v26 = v8 == 15;
    do
    {
      uint64_t v31 = v11 - 1;
      if (v27 == v31) {
        int v32 = v108 - v28;
      }
      else {
        int v32 = (v100[v27 + 657] - v100[v27 + 656]) << v101;
      }
      if (v32 > 4096)
      {
        this = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          *(_DWORD *)CMTime buf = 136315394;
          int v114 = "getPPSWorkBufSize";
          __int16 v115 = 1024;
          int v116 = 2010;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
          unsigned int v11 = v100[3483];
          uint64_t v31 = v11 - 1;
        }
      }
      if (v32 >= -15) {
        int v33 = v32 + 15;
      }
      else {
        int v33 = v32 + 30;
      }
      unint64_t v34 = v104;
      if (v104 <= (int)((v33 >> 4) * v93)) {
        unint64_t v34 = (int)((v33 >> 4) * v93);
      }
      unint64_t v104 = v34;
      unint64_t v35 = v27 + 1;
      uint64_t v36 = &v100[v27];
      int v37 = v36[657];
      int v38 = v36[656];
      unsigned int v39 = *(_DWORD *)(*(void *)(*((void *)v97 + 32) + 42424) + 2164);
      if (v39 <= v108) {
        unsigned int v39 = v108;
      }
      int v40 = v38 << v101;
      if (v96) {
        int v40 = ((v38 << v101) * v94) >> 3;
      }
      int v41 = v40 + v92 + v92 * (v37 - v38);
      if ((int)v39 < v41) {
        int v41 = v39;
      }
      *((void *)&v42 + 1) = *((void *)&v103 + 1);
      *(int32x2_t *)&long long v42 = vadd_s32((int32x2_t)(*(void *)&vmla_s32((int32x2_t)0x7F0000007FLL, (int32x2_t)__PAIR64__(((v41 + 63) >> 6) - (v40 >> 6), (v37 - v38) << v98), (int32x2_t)0xC0000002CLL) & 0xFFFFFF80FFFFFF80), *(int32x2_t *)&v103);
      long long v103 = v42;
      this = CAHDecTansyAvx::calc_lf_above_pix_tile_size((CAHDecTansyAvx *)this, v10, v107, v108, v98, v27 == 0, v27 == v31, v38, v37);
      v105 += this;
      v28 += v32;
      if (v25 <= 20 * (v33 >> 4)) {
        unint64_t v25 = 20 * (v33 >> 4);
      }
      ++v27;
    }
    while (v35 < v11);
  }
  uint64_t v43 = v100;
  uint64_t v44 = v100[3482];
  unsigned int v45 = v90;
  if (!v44)
  {
    int v102 = 0;
    unsigned int v71 = 0;
    unint64_t v87 = 0;
    unint64_t v111 = 0;
    unsigned int v72 = v97;
    goto LABEL_80;
  }
  unsigned int v86 = &v100[v44 + 721];
  int v46 = *v86;
  int v47 = v100[721];
  long long v48 = 0uLL;
  unsigned int v49 = v100 + 722;
  uint64_t v91 = v100[3482];
  do
  {
    long long v109 = v48;
    int v51 = *v49++;
    int v50 = v51;
    this = CAHDecTansyAvx::calc_lf_left_tile_size((CAHDecTansyAvx *)this, 11, 7, v106, v107, v99, v47, v51, v112, v46);
    *((void *)&v48 + 1) = *((void *)&v109 + 1);
    int v52 = ((v112 + 63) >> 6) - (v47 << v26);
    int v53 = (v51 - v47) << v26;
    if (v51 != v46) {
      int v52 = v53;
    }
    *(int32x2_t *)&long long v48 = vmax_s32(*(int32x2_t *)&v109, (int32x2_t)__PAIR64__(72 * v52, this));
    int v47 = v50;
    --v44;
  }
  while (v44);
  int v102 = 0;
  unint64_t v87 = *(void *)&vadd_s32(*(int32x2_t *)&v48, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80;
  int v54 = *v86;
  int v95 = (v112 + 7) >> 6;
  unsigned int v55 = v100[721];
  long long v56 = 0uLL;
  int v57 = v100 + 722;
  uint64_t v58 = v91;
  do
  {
    long long v110 = v56;
    int v60 = *v57++;
    unsigned int v59 = v60;
    uint64_t v61 = (CAHDecTansyAvx *)CAHDecTansyAvx::calc_lr_left_tile_size((CAHDecTansyAvx *)this, 13, 12, v106, v107, v99, v55, v60, v112, v54);
    unsigned int v62 = v61;
    this = CAHDecTansyAvx::calc_lr_left_tile_size(v61, 6, 6, v106, v107, v99, v55, v60, v112, v54);
    if (v60 == v54)
    {
      long long v56 = v110;
      if (v102 > (int)(24 * (v95 - (v55 << v98)) + 24)) {
        goto LABEL_73;
      }
      int v63 = 3 * (v95 + 1 - (v55 << v98));
    }
    else
    {
      int v63 = 3 * ((v59 - v55) << v98);
      long long v56 = v110;
      if (v102 > (int)(24 * ((v59 - v55) << v98))) {
        goto LABEL_73;
      }
    }
    int v102 = 8 * v63;
LABEL_73:
    *(int32x2_t *)&long long v56 = vmax_s32(*(int32x2_t *)&v56, (int32x2_t)__PAIR64__(this, v62));
    unsigned int v55 = v59;
    --v58;
  }
  while (v58);
  int v64 = 0;
  unint64_t v111 = *(void *)&vadd_s32(*(int32x2_t *)&v56, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80;
  int v65 = *v86;
  int v66 = v100[721];
  unsigned int v67 = v100 + 722;
  uint64_t v68 = v91;
  do
  {
    int v70 = *v67++;
    int v69 = v70;
    this = CAHDecTansyAvx::calc_az_left_tile_size((CAHDecTansyAvx *)this, v107, v99, v96, v106, v66, v70, v112, v65);
    if (v64 <= (int)this) {
      int v64 = this;
    }
    int v66 = v69;
    --v68;
  }
  while (v68);
  unsigned int v71 = (v64 + 127) & 0xFFFFFF80;
  unsigned int v72 = v97;
  unsigned int v45 = v90;
  uint64_t v44 = v91;
  uint64_t v43 = v100;
LABEL_80:
  BOOL v73 = *(_DWORD *)(*((void *)v72 + 32) + 2644) != 1 || v45 == 0;
  if (v73
    || (v107 != 1 ? (int v74 = 32) : (int v74 = 24),
        v107 ? (int v75 = v74) : (int v75 = 16),
        !CAHDecTansyAvx::isLfPadDis(v72) ? (int v76 = 8) : (int v76 = 0),
        !v44))
  {
    signed int v77 = 0;
    unint64_t v82 = v25;
  }
  else
  {
    signed int v77 = 0;
    unsigned int v78 = (v112 + v76 + 15) >> 4;
    uint64_t v79 = (v44 - 1);
    if (v85 == 15) {
      char v80 = 3;
    }
    else {
      char v80 = 2;
    }
    unsigned int v81 = v43 + 722;
    unint64_t v82 = v25;
    do
    {
      unsigned int v83 = v78;
      if (v79) {
        unsigned int v83 = *v81 << v80;
      }
      signed int v84 = ((v83 - (*(v81 - 1) << v80)) * v75 + 133) & 0xFFFFFF80;
      if (v77 <= v84) {
        signed int v77 = v84;
      }
      ++v81;
      --v79;
      --v44;
    }
    while (v44);
  }
  *(_DWORD *)unsigned int v89 = v88;
  if (HIDWORD(v104) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CMTime buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 2100;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  *((_DWORD *)v89 + 1) = v104;
  *((_DWORD *)v89 + 2) = v105;
  *(void *)(v89 + 12) = v103;
  if (HIDWORD(v82) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CMTime buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 2104;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  *((_DWORD *)v89 + 5) = v82;
  *((void *)v89 + 3) = v87;
  *((void *)v89 + 4) = v111;
  *((_DWORD *)v89 + 10) = (v102 + 127) & 0xFFFFFF80;
  *((_DWORD *)v89 + 11) = v71;
  *((_DWORD *)v89 + 12) = v77;
}

BOOL CAHDecThymeAvx::ppsWorkBufSizeIncrease(CAHDecThymeAvx *this, _DWORD *a2, _DWORD *a3)
{
  return *a3 > *a2
      || a3[1] > a2[1]
      || a3[2] > a2[2]
      || a3[3] > a2[3]
      || a3[4] > a2[4]
      || a3[5] > a2[5]
      || a3[6] > a2[6]
      || a3[7] > a2[7]
      || a3[8] > a2[8]
      || a3[9] > a2[9]
      || a3[10] > a2[10]
      || a3[11] > a2[11]
      || a3[12] > a2[12];
}

uint64_t CAHDecThymeAvx::allocWorkBuf_PPS(CAHDecThymeAvx *this, void *a2, void *a3, int *a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a4;
  uint64_t v7 = *((void *)this + 32);
  int v8 = *(_DWORD **)(v7 + 15944);
  if ((int)v6 > v8[19809])
  {
    if (v6)
    {
      if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 106, v6, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v36 = 136315650;
          int v37 = "allocWorkBuf_PPS";
          __int16 v38 = 1024;
          int v39 = 2159;
          __int16 v40 = 2080;
          int v41 = "OvpAboveInfo";
          int v9 = &_os_log_internal;
LABEL_102:
          _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v36, 0x1Cu);
          goto LABEL_103;
        }
        goto LABEL_103;
      }
      int v10 = *a4;
      uint64_t v7 = *((void *)this + 32);
      int v8 = *(_DWORD **)(v7 + 15944);
    }
    else
    {
      int v10 = 0;
    }
    v8[19809] = v10;
  }
  uint64_t v11 = a4[1];
  if ((int)v11 <= v8[19810])
  {
LABEL_17:
    uint64_t v13 = a4[2];
    if ((int)v13 > v8[19811])
    {
      if (v13)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 128, v13, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2174;
            __int16 v40 = 2080;
            int v41 = "LfAbovePixel";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v14 = a4[2];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v14 = 0;
      }
      v8[19811] = v14;
    }
    uint64_t v15 = a4[3];
    if ((int)v15 > v8[19812])
    {
      if (v15)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 139, v15, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2181;
            __int16 v40 = 2080;
            int v41 = "LfAboveInfo";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v16 = a4[3];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v16 = 0;
      }
      v8[19812] = v16;
    }
    uint64_t v17 = a4[4];
    if ((int)v17 > v8[19813])
    {
      if (v17)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 183, v17, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2188;
            __int16 v40 = 2080;
            int v41 = "RfAboveInfo";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v18 = a4[4];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v18 = 0;
      }
      v8[19813] = v18;
    }
    uint64_t v19 = a4[5];
    if ((int)v19 > v8[19814])
    {
      if (v19)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 249, v19, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2195;
            __int16 v40 = 2080;
            int v41 = "MvAboveInfo";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v20 = a4[5];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v20 = 0;
      }
      v8[19814] = v20;
    }
    uint64_t v21 = a4[6];
    if ((int)v21 > v8[19815])
    {
      if (v21)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 150, v21, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2202;
            __int16 v40 = 2080;
            int v41 = "LfLeftPixel";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v22 = a4[6];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v22 = 0;
      }
      v8[19815] = v22;
    }
    uint64_t v23 = a4[7];
    if ((int)v23 > v8[19816])
    {
      if (v23)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 161, v23, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2209;
            __int16 v40 = 2080;
            int v41 = "LfLeftInfo";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v24 = a4[7];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v24 = 0;
      }
      v8[19816] = v24;
    }
    uint64_t v25 = a4[8];
    if ((int)v25 > v8[19817])
    {
      if (v25)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 172, v25, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2216;
            __int16 v40 = 2080;
            int v41 = "SrLeftPixel";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v26 = a4[8];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v26 = 0;
      }
      v8[19817] = v26;
    }
    uint64_t v27 = a4[9];
    if ((int)v27 > v8[19818])
    {
      if (v27)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 194, v27, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2223;
            __int16 v40 = 2080;
            int v41 = "RfLeftPixel";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v28 = a4[9];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v28 = 0;
      }
      v8[19818] = v28;
    }
    uint64_t v29 = a4[10];
    if ((int)v29 > v8[19819])
    {
      if (v29)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 205, v29, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2230;
            __int16 v40 = 2080;
            int v41 = "RfLeftInfo";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v30 = a4[10];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v30 = 0;
      }
      v8[19819] = v30;
    }
    uint64_t v31 = a4[11];
    if ((int)v31 > v8[19820])
    {
      if (v31)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 238, v31, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2237;
            __int16 v40 = 2080;
            int v41 = "AzLeftPixel";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v32 = a4[11];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v32 = 0;
      }
      v8[19820] = v32;
    }
    uint64_t v33 = a4[12];
    if ((int)v33 <= v8[19821]) {
      return 0;
    }
    if (v33)
    {
      if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 227, v33, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v36 = 136315650;
          int v37 = "allocWorkBuf_PPS";
          __int16 v38 = 1024;
          int v39 = 2244;
          __int16 v40 = 2080;
          int v41 = "SWrLeftPixel";
          int v9 = &_os_log_internal;
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      int v35 = a4[12];
      int v8 = *(_DWORD **)(*((void *)this + 32) + 15944);
    }
    else
    {
      int v35 = 0;
    }
    uint64_t result = 0;
    v8[19821] = v35;
    return result;
  }
  if (!v11)
  {
    int v12 = 0;
LABEL_16:
    v8[19810] = v12;
    goto LABEL_17;
  }
  if (!CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 117, v11, 7, 1, 0))
  {
    int v12 = a4[1];
    uint64_t v7 = *((void *)this + 32);
    int v8 = *(_DWORD **)(v7 + 15944);
    goto LABEL_16;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v36 = 136315650;
    int v37 = "allocWorkBuf_PPS";
    __int16 v38 = 1024;
    int v39 = 2167;
    __int16 v40 = 2080;
    int v41 = "IPAbovePixel";
    int v9 = &_os_log_internal;
    goto LABEL_102;
  }
LABEL_103:
  (*(void (**)(CAHDecThymeAvx *, int *))(*(void *)this + 152))(this, a4);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecThymeAvx::freeWorkBuf_SPS(CAHDecThymeAvx *this)
{
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    for (uint64_t i = 0; i != 2464; i += 176)
    {
      uint64_t v3 = *((void *)this + 32);
      if (*(void *)(v3 + i + 3072))
      {
        CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 3072));
        uint64_t v4 = (_OWORD *)(*((void *)this + 32) + i);
        v4[192] = 0u;
        v4[193] = 0u;
        v4[194] = 0u;
        v4[195] = 0u;
        v4[196] = 0u;
        v4[197] = 0u;
        v4[198] = 0u;
        v4[199] = 0u;
        v4[200] = 0u;
        v4[201] = 0u;
        v4[202] = 0u;
        uint64_t v3 = *((void *)this + 32);
      }
      if (*(void *)(v3 + i + 5536))
      {
        CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 5536));
        int v5 = (_OWORD *)(*((void *)this + 32) + i);
        v5[346] = 0u;
        v5[347] = 0u;
        v5[348] = 0u;
        v5[349] = 0u;
        v5[350] = 0u;
        v5[351] = 0u;
        v5[352] = 0u;
        v5[353] = 0u;
        v5[354] = 0u;
        v5[355] = 0u;
        v5[356] = 0u;
      }
    }
  }
  for (uint64_t j = 0; j != 2288; j += 176)
  {
    uint64_t v7 = *((void *)this + 32);
    if (*(void *)(v7 + j + 8008))
    {
      CAVDDecoder::deallocAVDMem(v7, (uint64_t *)(v7 + j + 8008));
      int v8 = (_OWORD *)(*((void *)this + 32) + j + 8008);
      *int v8 = 0u;
      v8[1] = 0u;
      unsigned int v8[2] = 0u;
      v8[3] = 0u;
      v8[4] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      v8[10] = 0u;
    }
  }
  for (uint64_t k = 0; k != 2288; k += 176)
  {
    uint64_t result = *((void *)this + 32);
    if (*(void *)(result + k + 13424))
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + k + 13424));
      uint64_t v11 = (_OWORD *)(*((void *)this + 32) + k);
      v11[839] = 0u;
      v11[840] = 0u;
      v11[841] = 0u;
      v11[842] = 0u;
      v11[843] = 0u;
      v11[844] = 0u;
      v11[845] = 0u;
      v11[846] = 0u;
      v11[847] = 0u;
      v11[848] = 0u;
      v11[849] = 0u;
    }
  }
  return result;
}

double CAHDecThymeAvx::freeWorkBuf_PPS(CAHDecThymeAvx *this, _DWORD *a2)
{
  if (!a2 || (uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944), *a2 > v4[19809]))
  {
    if (*((void *)this + 212))
    {
      int v5 = (_OWORD *)((char *)this + 1696);
      CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 212);
      double result = 0.0;
      *int v5 = 0u;
      *((_OWORD *)this + 107) = 0u;
      *((_OWORD *)this + 108) = 0u;
      *((_OWORD *)this + 109) = 0u;
      *((_OWORD *)this + 110) = 0u;
      *((_OWORD *)this + 111) = 0u;
      *((_OWORD *)this + 112) = 0u;
      *((_OWORD *)this + 113) = 0u;
      *((_OWORD *)this + 114) = 0u;
      *((_OWORD *)this + 115) = 0u;
      *((_OWORD *)this + 116) = 0u;
    }
    if (!a2) {
      goto LABEL_8;
    }
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
  }
  if (a2[1] <= v4[19810]) {
    goto LABEL_12;
  }
LABEL_8:
  if (*((void *)this + 234))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 234);
    double result = 0.0;
    *((_OWORD *)this + 117) = 0u;
    *((_OWORD *)this + 118) = 0u;
    *((_OWORD *)this + 119) = 0u;
    *((_OWORD *)this + 120) = 0u;
    *((_OWORD *)this + 121) = 0u;
    *((_OWORD *)this + 122) = 0u;
    *((_OWORD *)this + 123) = 0u;
    *((_OWORD *)this + 124) = 0u;
    *((_OWORD *)this + 125) = 0u;
    *((_OWORD *)this + 126) = 0u;
    *((_OWORD *)this + 127) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_12:
    if (a2[2] <= v4[19811]) {
      goto LABEL_17;
    }
  }
  if (*((void *)this + 256))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 256);
    double result = 0.0;
    *((_OWORD *)this + 128) = 0u;
    *((_OWORD *)this + 129) = 0u;
    *((_OWORD *)this + 130) = 0u;
    *((_OWORD *)this + 131) = 0u;
    *((_OWORD *)this + 132) = 0u;
    *((_OWORD *)this + 133) = 0u;
    *((_OWORD *)this + 134) = 0u;
    *((_OWORD *)this + 135) = 0u;
    *((_OWORD *)this + 136) = 0u;
    *((_OWORD *)this + 137) = 0u;
    *((_OWORD *)this + 138) = 0u;
  }
  if (!a2) {
    goto LABEL_18;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_17:
  if (a2[3] <= v4[19812]) {
    goto LABEL_22;
  }
LABEL_18:
  if (*((void *)this + 278))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 278);
    double result = 0.0;
    *((_OWORD *)this + 139) = 0u;
    *((_OWORD *)this + 140) = 0u;
    *((_OWORD *)this + 141) = 0u;
    *((_OWORD *)this + 142) = 0u;
    *((_OWORD *)this + 143) = 0u;
    *((_OWORD *)this + 144) = 0u;
    *((_OWORD *)this + 145) = 0u;
    *((_OWORD *)this + 146) = 0u;
    *((_OWORD *)this + 147) = 0u;
    *((_OWORD *)this + 148) = 0u;
    *((_OWORD *)this + 149) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_22:
    if (a2[4] <= v4[19813]) {
      goto LABEL_27;
    }
  }
  if (*((void *)this + 366))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 366);
    double result = 0.0;
    *((_OWORD *)this + 183) = 0u;
    *((_OWORD *)this + 184) = 0u;
    *((_OWORD *)this + 185) = 0u;
    *((_OWORD *)this + 186) = 0u;
    *((_OWORD *)this + 187) = 0u;
    *((_OWORD *)this + 188) = 0u;
    *((_OWORD *)this + 189) = 0u;
    *((_OWORD *)this + 190) = 0u;
    *((_OWORD *)this + 191) = 0u;
    *((_OWORD *)this + 192) = 0u;
    *((_OWORD *)this + 193) = 0u;
  }
  if (!a2) {
    goto LABEL_28;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_27:
  if (a2[5] <= v4[19814]) {
    goto LABEL_32;
  }
LABEL_28:
  if (*((void *)this + 498))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 498);
    double result = 0.0;
    *((_OWORD *)this + 249) = 0u;
    *((_OWORD *)this + 250) = 0u;
    *((_OWORD *)this + 251) = 0u;
    *((_OWORD *)this + 252) = 0u;
    *((_OWORD *)this + 253) = 0u;
    *((_OWORD *)this + 254) = 0u;
    *((_OWORD *)this + 255) = 0u;
    *((_OWORD *)this + 256) = 0u;
    *((_OWORD *)this + 257) = 0u;
    *((_OWORD *)this + 258) = 0u;
    *((_OWORD *)this + 259) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_32:
    if (a2[6] <= v4[19815]) {
      goto LABEL_37;
    }
  }
  if (*((void *)this + 300))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 300);
    double result = 0.0;
    *((_OWORD *)this + 150) = 0u;
    *((_OWORD *)this + 151) = 0u;
    *((_OWORD *)this + 152) = 0u;
    *((_OWORD *)this + 153) = 0u;
    *((_OWORD *)this + 154) = 0u;
    *((_OWORD *)this + 155) = 0u;
    *((_OWORD *)this + 156) = 0u;
    *((_OWORD *)this + 157) = 0u;
    *((_OWORD *)this + 158) = 0u;
    *((_OWORD *)this + 159) = 0u;
    *((_OWORD *)this + 160) = 0u;
  }
  if (!a2) {
    goto LABEL_38;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_37:
  if (a2[7] <= v4[19816]) {
    goto LABEL_42;
  }
LABEL_38:
  if (*((void *)this + 322))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 322);
    double result = 0.0;
    *((_OWORD *)this + 161) = 0u;
    *((_OWORD *)this + 162) = 0u;
    *((_OWORD *)this + 163) = 0u;
    *((_OWORD *)this + 164) = 0u;
    *((_OWORD *)this + 165) = 0u;
    *((_OWORD *)this + 166) = 0u;
    *((_OWORD *)this + 167) = 0u;
    *((_OWORD *)this + 168) = 0u;
    *((_OWORD *)this + 169) = 0u;
    *((_OWORD *)this + 170) = 0u;
    *((_OWORD *)this + 171) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_42:
    if (a2[8] <= v4[19817]) {
      goto LABEL_47;
    }
  }
  if (*((void *)this + 344))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 344);
    double result = 0.0;
    *((_OWORD *)this + 172) = 0u;
    *((_OWORD *)this + 173) = 0u;
    *((_OWORD *)this + 174) = 0u;
    *((_OWORD *)this + 175) = 0u;
    *((_OWORD *)this + 176) = 0u;
    *((_OWORD *)this + 177) = 0u;
    *((_OWORD *)this + 178) = 0u;
    *((_OWORD *)this + 179) = 0u;
    *((_OWORD *)this + 180) = 0u;
    *((_OWORD *)this + 181) = 0u;
    *((_OWORD *)this + 182) = 0u;
  }
  if (!a2) {
    goto LABEL_48;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_47:
  if (a2[9] <= v4[19818]) {
    goto LABEL_52;
  }
LABEL_48:
  if (*((void *)this + 388))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 388);
    double result = 0.0;
    *((_OWORD *)this + 194) = 0u;
    *((_OWORD *)this + 195) = 0u;
    *((_OWORD *)this + 196) = 0u;
    *((_OWORD *)this + 197) = 0u;
    *((_OWORD *)this + 198) = 0u;
    *((_OWORD *)this + 199) = 0u;
    *((_OWORD *)this + 200) = 0u;
    *((_OWORD *)this + 201) = 0u;
    *((_OWORD *)this + 202) = 0u;
    *((_OWORD *)this + 203) = 0u;
    *((_OWORD *)this + 204) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_52:
    if (a2[10] <= v4[19819]) {
      goto LABEL_57;
    }
  }
  if (*((void *)this + 410))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 410);
    double result = 0.0;
    *((_OWORD *)this + 205) = 0u;
    *((_OWORD *)this + 206) = 0u;
    *((_OWORD *)this + 207) = 0u;
    *((_OWORD *)this + 208) = 0u;
    *((_OWORD *)this + 209) = 0u;
    *((_OWORD *)this + 210) = 0u;
    *((_OWORD *)this + 211) = 0u;
    *((_OWORD *)this + 212) = 0u;
    *((_OWORD *)this + 213) = 0u;
    *((_OWORD *)this + 214) = 0u;
    *((_OWORD *)this + 215) = 0u;
  }
  if (!a2) {
    goto LABEL_58;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_57:
  if (a2[11] <= v4[19820]) {
    goto LABEL_62;
  }
LABEL_58:
  if (*((void *)this + 476))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 476);
    double result = 0.0;
    *((_OWORD *)this + 238) = 0u;
    *((_OWORD *)this + 239) = 0u;
    *((_OWORD *)this + 240) = 0u;
    *((_OWORD *)this + 241) = 0u;
    *((_OWORD *)this + 242) = 0u;
    *((_OWORD *)this + 243) = 0u;
    *((_OWORD *)this + 244) = 0u;
    *((_OWORD *)this + 245) = 0u;
    *((_OWORD *)this + 246) = 0u;
    *((_OWORD *)this + 247) = 0u;
    *((_OWORD *)this + 248) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_62:
    if (a2[12] <= v4[19821]) {
      return result;
    }
  }
  if (*((void *)this + 454))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 454);
    double result = 0.0;
    *((_OWORD *)this + 227) = 0u;
    *((_OWORD *)this + 228) = 0u;
    *((_OWORD *)this + 229) = 0u;
    *((_OWORD *)this + 230) = 0u;
    *((_OWORD *)this + 231) = 0u;
    *((_OWORD *)this + 232) = 0u;
    *((_OWORD *)this + 233) = 0u;
    *((_OWORD *)this + 234) = 0u;
    *((_OWORD *)this + 235) = 0u;
    *((_OWORD *)this + 236) = 0u;
    *((_OWORD *)this + 237) = 0u;
  }
  return result;
}

uint64_t CAHDecThymeAvx::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 4176) = a2;
  return this;
}

uint64_t CAHDecThymeAvx::initPicture(CAHDecThymeAvx *this)
{
  return 0;
}

uint64_t CAHDecThymeAvx::populateSlices(CAHDecThymeAvx *this)
{
  return 0;
}

uint64_t CAHDecThymeAvx::getTileIdxAbove(CAHDecThymeAvx *this)
{
  return 0;
}

uint64_t CAHDecThymeAvx::decodeBuffer(CAHDecThymeAvx *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecThymeAvx::decodeBufferSize(CAHDecThymeAvx *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecThymeAvx::decHdrYLinAddr(CAHDecThymeAvx *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 3072);
}

uint64_t CAHDecThymeAvx::decHdrCLinAddr(CAHDecThymeAvx *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 5536);
}

uint64_t CAHDecThymeAvx::decHdrYSize(CAHDecThymeAvx *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 3116);
}

uint64_t CAHDecThymeAvx::decHdrCSize(CAHDecThymeAvx *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 5580);
}

uint64_t CAHDecThymeAvx::decHdrYStride(CAHDecThymeAvx *this)
{
  return *((unsigned int *)this + 1042);
}

uint64_t CAHDecThymeAvx::decHdrCStride(CAHDecThymeAvx *this)
{
  return *((unsigned int *)this + 1043);
}

unsigned int *GetDetiledResolution(unsigned int *result, unsigned int *a2, int a3, int a4)
{
  *double result = a3 + 5;
  *a2 = a4 + 4;
  int v4 = *result + 30;
  if ((int)*result >= -15) {
    int v4 = *result + 15;
  }
  *double result = v4 & 0xFFFFFFF0;
  int v5 = *a2 + 14;
  if ((int)*a2 >= -7) {
    int v5 = *a2 + 7;
  }
  *a2 = v5 & 0xFFFFFFF8;
  result[1] = a3 + 4;
  a2[1] = (a4 >> 1) + 2;
  int v6 = result[1];
  int v8 = v6 + 15;
  BOOL v7 = v6 < -15;
  int v9 = v6 + 30;
  if (!v7) {
    int v9 = v8;
  }
  result[1] = v9 & 0xFFFFFFF0;
  int v10 = a2[1];
  int v11 = v10 + 7;
  BOOL v7 = v10 < -7;
  int v12 = v10 + 14;
  if (!v7) {
    int v12 = v11;
  }
  a2[1] = v12 & 0xFFFFFFF8;
  return result;
}

unsigned int *Detile420(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4, int a5, int a6, _DWORD *a7)
{
  double result = GetDetiledResolution(a2, a3, a5, a6);
  uint64_t v9 = 0;
  char v10 = 1;
  do
  {
    char v25 = v10;
    uint64_t v11 = *(void *)(a1 + 8 * v9);
    if (v11)
    {
      uint64_t v12 = *(void *)(a4 + 8 * v9);
      if (v12)
      {
        unint64_t v26 = a3[v9];
        if ((int)v26 >= 1)
        {
          uint64_t v13 = 0;
          unsigned int v14 = 0;
          uint64_t v15 = (int)a2[v9];
          int v16 = &a7[2 * v9];
          uint64_t v17 = v16 + 2;
          int v18 = v16 + 6;
          do
          {
            uint64_t v27 = v13;
            if ((int)v15 >= 1)
            {
              uint64_t v19 = 0;
              int v20 = 0;
              do
              {
                double result = (unsigned int *)DetileRow_filter_tiled_test(v11 + v19, v15, v12+ (*(_DWORD *)(*v18+ (4 * (v20 << *a7))+ *v17 * (v14 >> *a7)+ 4 * (v14 & ~(-1 << *a7))) & 0xFFFFFFF), 1);
                v19 += 16;
                ++v20;
              }
              while (v19 < v15);
            }
            uint64_t v13 = v27 + 8;
            ++v14;
            v11 += 8 * v15;
          }
          while (v27 + 8 < v26);
        }
      }
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v25 & 1) != 0);
  return result;
}

uint64_t InLoopChromaFilterInterchangeFormat(unsigned __int8 *a1, unsigned __int8 *a2, int a3, int a4, int a5, int a6, unsigned __int8 *a7)
{
  size_t v12 = a3;
  unint64_t v13 = (a3 + 31) & 0xFFFFFFFFFFFFFFE0;
  LODWORD(v14) = a4 >> 1;
  signed int v36 = ((a4 >> 1) + 15) & 0xFFFFFFF0;
  FilterFunctionInit();
  InLoopChromaRows((uint64_t)a1, a3, a4, a5, a6);
  if (a4 >= 2)
  {
    uint64_t v15 = a5;
    uint64_t v14 = (int)v14;
    int v16 = a7;
    do
    {
      --v14;
      memcpy(v16, a1, v12);
      v16 += v13;
      a1 += v15;
    }
    while (v14);
  }
  if (v36)
  {
    size_t v17 = (int)v13 - a3;
    uint64_t v18 = v36;
    uint64_t v19 = &a7[v12];
    do
    {
      --v18;
      memset(v19, 128, v17);
      v19 += v13;
    }
    while (v18);
    interchange_tile_sb_filter_tiled_test = (uint64_t (*)(void, void, void, void))interchange_tile_sb_neon;
    if (v36 >= 1)
    {
      signed int v20 = 0;
      uint64_t v31 = 16 * (int)v13;
      do
      {
        if ((int)v13 >= 1)
        {
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          do
          {
            unsigned int v23 = 0;
            int v24 = &a7[v21];
            uint64_t v34 = v22;
            uint64_t v35 = v21;
            char v25 = &a2[v22 << 9];
            int v26 = v21 | 0x10;
            do
            {
              uint64_t v27 = 0;
              char v28 = 1;
              do
              {
                interchange_tile_sb_filter_tiled_test(v25, &v24[v27], v13, 2);
                v25 += 64;
                if ((v28 & 1) == 0) {
                  break;
                }
                char v28 = 0;
                int v29 = v26 + v27;
                uint64_t v27 = 16;
              }
              while ((int)v13 > v29);
              if (v23 > 0xB) {
                break;
              }
              v24 += 4 * (int)v13;
              v23 += 4;
            }
            while ((int)(v23 + v20) < v36);
            uint64_t v21 = v35 + 32;
            uint64_t v22 = v34 + 1;
          }
          while (v34 + 1 != ((v13 - 1) >> 5) + 1);
        }
        a2 += v31;
        a7 += v31;
        v20 += 16;
      }
      while (v20 < v36);
    }
  }
  else
  {
    interchange_tile_sb_filter_tiled_test = (uint64_t (*)(void, void, void, void))interchange_tile_sb_neon;
  }
  return 0;
}

uint64_t InLoopChromaFilter(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, _DWORD *a7, uint64_t a8, unsigned int a9)
{
  size_t v12 = (char *)a1;
  v54[2] = *MEMORY[0x263EF8340];
  LODWORD(v13) = a4 >> 1;
  int v14 = a3 + 19;
  if (a3 < -19) {
    int v14 = a3 + 34;
  }
  int v15 = v14 >> 4;
  uint64_t v16 = (uint64_t)v14 >> 4;
  uint64_t v17 = 16 * v15;
  int v18 = v13 + 9;
  unsigned int v19 = v13 + 16;
  if ((int)v13 < -9) {
    int v18 = v13 + 16;
  }
  signed int v20 = v18 & 0xFFFFFFF8;
  uint64_t v21 = a8 + 32 * v16 + 4;
  InLoopChromaRows(a1, a3, a4, a5, a6);
  uint64_t v22 = a3;
  if (a4 >= 2)
  {
    uint64_t v23 = a5;
    uint64_t v13 = (int)v13;
    int v24 = (char *)v21;
    do
    {
      --v13;
      memcpy(v24, v12, a3);
      v24 += v17;
      v12 += v23;
    }
    while (v13);
  }
  if (v19 >= 0xF)
  {
    size_t v25 = (int)v17 - a3;
    uint64_t v26 = v20;
    uint64_t v27 = (char *)(v21 + v22);
    do
    {
      --v26;
      memset(v27, 128, v25);
      v27 += v17;
    }
    while (v26);
  }
  uint64_t v28 = 0;
  v54[0] = 0;
  v54[1] = a2;
  v53[0] = 0;
  v53[1] = a8;
  v52[0] = 0;
  v52[1] = v17;
  v51[0] = 0;
  v51[1] = v17;
  char v29 = 1;
  v50[0] = 0;
  v50[1] = v20;
  while (1)
  {
    char v30 = v29;
    uint64_t v31 = v54[v28];
    if (v31)
    {
      uint64_t v32 = v53[v28];
      if (v32)
      {
        unint64_t v46 = v50[v28];
        if ((int)v46 >= 1) {
          break;
        }
      }
    }
LABEL_21:
    char v29 = 0;
    uint64_t v28 = 1;
    if ((v30 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = (int)v52[v28];
  uint64_t v36 = (int)v51[v28];
  int v37 = &a7[2 * v28];
  __int16 v38 = v37 + 2;
  int v39 = v37 + 6;
  char v44 = v29;
  while (1)
  {
    uint64_t v48 = v33;
    if ((int)v36 >= 1) {
      break;
    }
LABEL_20:
    uint64_t v33 = v48 + 8;
    ++v34;
    v32 += 8 * v35;
    char v30 = v44;
    if (v48 + 8 >= v46) {
      goto LABEL_21;
    }
  }
  uint64_t v40 = 0;
  int v41 = 0;
  while (1)
  {
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v43 = *(_DWORD *)(*v39 + (4 * (v41 << *a7)) + *v38 * (v34 >> *a7) + 4 * (v34 & ~(-1 << *a7))) & 0xFFFFFFF;
    if ((int)v43 + 128 > a9) {
      return result;
    }
    TileRow_filter_tiled_test(v31 + v43, v32 + v40, v35, 1);
    v40 += 16;
    ++v41;
    if (v40 >= v36) {
      goto LABEL_20;
    }
  }
}

size_t Dump_NV12(size_t __stream, char **a2, int *a3, int a4, int a5, int a6, int a7)
{
  uint64_t v11 = (FILE *)__stream;
  v36[2] = *MEMORY[0x263EF8340];
  if (a5 >= 1)
  {
    size_t v12 = *a2;
    size_t v13 = a6 - a4;
    int v14 = a5;
    do
    {
      __stream = fwrite(v12, 1uLL, a4, v11);
      if (a6 > a4) {
        __stream = fwrite(&Dump_NV12(__sFILE *,unsigned char **,int *,int,int,int,int)::value, 1uLL, v13, v11);
      }
      v12 += *a3;
      --v14;
    }
    while (v14);
  }
  int v15 = a7 - a5;
  if (a7 > a5) {
    __stream = fwrite(&Dump_NV12(__sFILE *,unsigned char **,int *,int,int,int,int)::value, 1uLL, v15 * a6, v11);
  }
  uint64_t v17 = *a2;
  uint64_t v16 = (unsigned __int8 *)a2[1];
  int v18 = (unsigned __int8 *)&(*a2)[a5 * a4 / 2];
  v36[0] = *a2;
  v36[1] = v18;
  int v19 = a5 >> 1;
  LODWORD(v20) = a4 >> 1;
  if (a5 <= 1)
  {
    size_t v22 = (int)v20;
    if (v19 <= 1) {
      int v26 = 1;
    }
    else {
      int v26 = a5 >> 1;
    }
    int v34 = v26;
  }
  else
  {
    int v21 = 0;
    size_t v22 = (int)v20;
    if ((int)v20 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v20;
    }
    if (v19 <= 1) {
      int v19 = 1;
    }
    int v34 = v19;
    do
    {
      if (a4 >= 2)
      {
        uint64_t v23 = 0;
        int v24 = v16 + 1;
        do
        {
          v17[v23] = *(v24 - 1);
          unsigned __int8 v25 = *v24;
          v24 += 2;
          v18[v23++] = v25;
        }
        while (v20 != v23);
      }
      v17 += v22;
      v18 += v22;
      v16 += a3[1];
      ++v21;
    }
    while (v21 != v34);
  }
  uint64_t v27 = 0;
  uint64_t __nitems = (uint64_t)(v15 * a6) >> 2;
  char v28 = 1;
  do
  {
    char v29 = v28;
    if (a5 >= 2)
    {
      char v30 = (char *)v36[v27];
      int v31 = v34;
      do
      {
        __stream = fwrite(v30, 1uLL, v22, v11);
        if (a6 > a4) {
          __stream = fwrite(&Dump_NV12(__sFILE *,unsigned char **,int *,int,int,int,int)::value, 1uLL, (uint64_t)(a6 - a4) >> 1, v11);
        }
        v30 += v22;
        --v31;
      }
      while (v31);
    }
    if (a7 > a5) {
      __stream = fwrite(&Dump_NV12(__sFILE *,unsigned char **,int *,int,int,int,int)::value, 1uLL, __nitems, v11);
    }
    char v28 = 0;
    uint64_t v27 = 1;
  }
  while ((v29 & 1) != 0);
  return __stream;
}

uint64_t RVRAInLoopChromaFilter(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, _DWORD *a7, uint64_t a8, unsigned int a9)
{
  FilterFunctionInit();
  DetileRow_filter_tiled_test = DetileRow_neon;
  TileRow_filter_tiled_test = (uint64_t (*)(void, void, void, void))TileRow_neon;

  return InLoopChromaFilter(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

CAHDecLotusLgh *createLotusLghDecoder(CAVDLghDecoder *a1)
{
  uint64_t v2 = (CAHDecLotusLgh *)operator new(0xC48uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecLotusLgh::CAHDecLotusLgh(v2, a1);
  }
  return v3;
}

void sub_223AC2CFC(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecLotusLgh::CAHDecLotusLgh(CAHDecLotusLgh *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73E840;
  *(_DWORD *)(v1 + 456) = 150180;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecLotusLgh::CAHDecLotusLgh(CAHDecLotusLgh *this, CAVDLghDecoder *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73E840;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 150180;
  *(_DWORD *)(v4 + 8) = 676;
  *(_OWORD *)(v4 + 16) = xmmword_223ADA920;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 150180, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      uint64_t v17 = "CAHDecLotusLgh";
      __int16 v18 = 1024;
      int v19 = 0;
      int v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
LABEL_16:
      _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v7);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v8;
    *((void *)this + 34) = v8;
    uint64_t v9 = *((void *)this + 32);
    *(_DWORD *)(v9 + 17552) = 0;
    bzero((void *)(v9 + 11792), 0xB00uLL);
    *(_OWORD *)(v9 + 5712) = 0u;
    bzero((void *)(*((void *)this + 32) + 14608), 0xB00uLL);
    bzero((char *)this + 464, 0x4D0uLL);
    char v10 = (_OWORD *)*((void *)this + 32);
    v10[356] = 0u;
    v10[355] = 0u;
    v10[354] = 0u;
    v10[353] = 0u;
    v10[352] = 0u;
    v10[351] = 0u;
    v10[350] = 0u;
    v10[349] = 0u;
    v10[348] = 0u;
    v10[347] = 0u;
    v10[346] = 0u;
    v10[345] = 0u;
    v10[344] = 0u;
    v10[343] = 0u;
    v10[342] = 0u;
    v10[341] = 0u;
    v10[340] = 0u;
    v10[339] = 0u;
    v10[338] = 0u;
    v10[337] = 0u;
    v10[336] = 0u;
    v10[335] = 0u;
    bzero((char *)this + 1696, 0x580uLL);
    for (uint64_t i = 3072; i != 3776; i += 176)
    {
      size_t v12 = (_OWORD *)(*((void *)this + 32) + i);
      v12[9] = 0uLL;
      v12[10] = 0uLL;
      v12[7] = 0uLL;
      v12[8] = 0uLL;
      v12[5] = 0uLL;
      v12[6] = 0uLL;
      v12[3] = 0uLL;
      v12[4] = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *size_t v12 = 0uLL;
    }
    do
    {
      size_t v13 = (_OWORD *)(*((void *)this + 32) + i);
      v13[9] = 0uLL;
      v13[10] = 0uLL;
      v13[7] = 0uLL;
      v13[8] = 0uLL;
      v13[5] = 0uLL;
      v13[6] = 0uLL;
      v13[3] = 0uLL;
      v13[4] = 0uLL;
      v13[1] = 0uLL;
      _DWORD v13[2] = 0uLL;
      *size_t v13 = 0uLL;
      i += 176;
    }
    while (i != 5184);
    int v14 = (_OWORD *)*((void *)this + 32);
    v14[334] = 0u;
    v14[333] = 0u;
    v14[332] = 0u;
    v14[331] = 0u;
    v14[330] = 0u;
    v14[329] = 0u;
    v14[328] = 0u;
    v14[327] = 0u;
    v14[326] = 0u;
    v14[325] = 0u;
    uint64_t v15 = 3072;
    v14[324] = 0u;
    do
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), 1913, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        int v16 = 136315650;
        uint64_t v17 = "CAHDecLotusLgh";
        __int16 v18 = 1024;
        int v19 = 171;
        __int16 v20 = 2080;
        int v21 = "probBuf";
        int v5 = &_os_log_internal;
        int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
        goto LABEL_15;
      }
      v15 += 176;
    }
    while (v15 != 3776);
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 5184), 12284, 7, 1, 0))return; {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    }
    {
      int v16 = 136315650;
      uint64_t v17 = "CAHDecLotusLgh";
      __int16 v18 = 1024;
      int v19 = 173;
      __int16 v20 = 2080;
      int v21 = "stateBuf";
      int v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_15:
      uint32_t v7 = 28;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
}

void sub_223AC3134(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecLotusLgh::~CAHDecLotusLgh(CAHDecLotusLgh *this)
{
  *(void *)this = &unk_26D73E840;
  CAHDecLotusLgh::freeWorkBuf_SPS(this);
  uint64_t v2 = *((void *)this + 32);
  for (uint64_t i = 3072; i != 3776; i += 176)
  {
    if (*(void *)(v2 + i))
    {
      CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + i));
      uint64_t v2 = *((void *)this + 32);
      *(void *)(v2 + i) = 0;
    }
  }
  if (*(void *)(v2 + 5184))
  {
    CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + 5184));
    *(void *)(*((void *)this + 32) + 5184) = 0;
  }
  (*(void (**)(CAHDecLotusLgh *, void))(*(void *)this + 152))(this, 0);
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecLotusLgh::~CAHDecLotusLgh(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecLotusLgh::DecodePicture(CAHDecLotusLgh *this, int a2)
{
  if (CAHDecViolaLgh::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecLotusLgh *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecLotusLgh *))(*(void *)this + 48))(this);
  (*(void (**)(CAHDecLotusLgh *))(*(void *)this + 56))(this);
  CAHDecViolaLgh::populateTiles(this);
  (*(void (**)(CAHDecLotusLgh *, void))(*(void *)this + 88))(this, 0);
  (*(void (**)(CAHDecLotusLgh *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecLotusLgh::populateCommonRegisters(CAHDecLotusLgh *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000002;
  return 0;
}

uint64_t CAHDecLotusLgh::updateCommonRegisters(CAHDecLotusLgh *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecLotusLgh::populateSequenceRegisters(CAHDecLotusLgh *this)
{
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  *(_DWORD *)(v1 + 40) = 0;
  unsigned __int16 v3 = *(_DWORD *)(v2 + 108) - 1;
  *(_DWORD *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 40) = (v3 | ((unsigned __int16)*(_DWORD *)(v2 + 112) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 304);
  if (v4 >= 3) {
    int v5 = 6528;
  }
  else {
    int v5 = ((v4 & 3) << 7) | 0x1800;
  }
  *(_DWORD *)(v1 + 44) = v5;
  unsigned int v6 = v5 & 0xFFF87FFF | (((*(unsigned char *)(v2 + 105) + 8) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFF87FFFF | (((*(unsigned __int8 *)(v2 + 105) + 8) & 0xF) << 19) | 0x1000000;
  *(_DWORD *)(v1 + 44) = v7;
  *(_DWORD *)(v1 + 44) = v7 & 0xFDFFFFFF | (*(unsigned char *)(v2 + 304) == 4);
  return 0;
}

uint64_t CAHDecLotusLgh::populatePictureRegisters(CAHDecLotusLgh *this)
{
  uint64_t v269 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v2 + 17560);
  if (*(unsigned char *)(v4 + 37)) {
    BOOL v5 = *(unsigned char *)(v4 + 40) != 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = *(_DWORD *)(v2 + 11748);
  int v8 = *(_DWORD *)(v4 + 96);
  int v7 = *(_DWORD *)(v4 + 100);
  int v255 = 1 << v7;
  char v9 = *(unsigned char *)(v2 + 2675);
  char v10 = *(unsigned char *)(v2 + 2674);
  if (v5) {
    int v11 = 766517248;
  }
  else {
    int v11 = 766509056;
  }
  *(_DWORD *)(v3 + 48) = v11;
  int v12 = v11 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v3 + 48) = v12;
  if (*(_DWORD *)(*((void *)this + 32) + 2644) == 1) {
    int v13 = 1024;
  }
  else {
    int v13 = 1;
  }
  unsigned int v14 = v13 & 0xFFFFFFF0 | (4 * (v9 & 3)) | v10 & 3 | v12 | 0x2E0;
  *(_DWORD *)(v3 + 48) = v14;
  uint64_t v15 = (unsigned char *)*((void *)this + 32);
  int v16 = v14 | ((v15[2652] & 1) << 19);
  *(_DWORD *)(v3 + 48) = v16;
  int v17 = v16 | ((v15[2653] & 1) << 18);
  *(_DWORD *)(v3 + 48) = v17;
  *(_DWORD *)(v3 + 48) = v17 | ((v15[2654] & 1) << 17);
  *(void *)(v3 + 52) = 0x2000000;
  LOWORD(v17) = *(_DWORD *)(v4 + 108) - 1;
  *(_DWORD *)(v3 + 56) = (unsigned __int16)v17;
  *(_DWORD *)(v3 + 56) = ((unsigned __int16)v17 | ((unsigned __int16)*(_DWORD *)(v4 + 112) << 16)) - 0x10000;
  *(void *)(v3 + 60) = 0;
  int v18 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2688) & 7;
  *(_DWORD *)(v3 + 64) = v18;
  unsigned int v19 = v18 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2692) & 1));
  *(_DWORD *)(v3 + 64) = v19;
  unsigned int v20 = v19 & 0xFFFFFF8F | (16 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2696) & 7));
  *(_DWORD *)(v3 + 64) = v20;
  unsigned int v21 = v20 & 0xFFFFFF7F | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2700) & 1) << 7);
  *(_DWORD *)(v3 + 64) = v21;
  unsigned int v22 = v21 & 0xFFFFF8FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2704) & 7) << 8);
  *(_DWORD *)(v3 + 64) = v22;
  unsigned int v23 = v22 & 0xFFFFF7FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2708) & 1) << 11);
  *(_DWORD *)(v3 + 64) = v23;
  unsigned int v24 = v23 & 0xFFFFCFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2712) & 3) << 12);
  *(_DWORD *)(v3 + 64) = v24;
  unsigned int v25 = v24 & 0xFFFFBFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2716) & 1) << 14);
  *(_DWORD *)(v3 + 64) = v25;
  unsigned int v26 = v25 & 0xFFFF7FFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2720) & 1) << 15);
  *(_DWORD *)(v3 + 64) = v26;
  unsigned int v27 = v26 & 0xFFF8FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2724) & 7) << 16);
  *(_DWORD *)(v3 + 64) = v27;
  unsigned int v28 = v27 & 0xFFF7FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2728) & 1) << 19);
  *(_DWORD *)(v3 + 64) = v28;
  unsigned int v29 = v28 & 0xFFEFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2732) & 1) << 20);
  *(_DWORD *)(v3 + 64) = v29;
  unsigned int v30 = v29 & 0xFFDFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2736) & 1) << 21);
  *(_DWORD *)(v3 + 64) = v30;
  unsigned int v31 = v30 & 0xFFBFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2740) & 1) << 22);
  *(_DWORD *)(v3 + 64) = v31;
  unsigned int v32 = v31 & 0xFF7FFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2744) & 1) << 23);
  *(_DWORD *)(v3 + 64) = v32;
  unsigned int v33 = v32 & 0xFEFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2748) & 1) << 24);
  *(_DWORD *)(v3 + 64) = v33;
  unsigned int v34 = v33 & 0xFDFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2752) & 1) << 25);
  *(_DWORD *)(v3 + 64) = v34;
  *(_DWORD *)(v3 + 64) = v34 & 0xFBFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2756) & 1) << 26);
  *(void *)(v3 + 68) = 0;
  if (*(unsigned char *)(v4 + 60))
  {
    int v35 = *(unsigned char *)(v4 + 69) & 0x7F;
    *(_DWORD *)(v3 + 68) = v35;
    unsigned int v36 = v35 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 68) & 0x7F) << 7);
    *(_DWORD *)(v3 + 68) = v36;
    unsigned int v37 = v36 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 67) & 0x7F) << 14);
    *(_DWORD *)(v3 + 68) = v37;
    unsigned int v38 = v37 & 0xF01FFFFF | ((*(unsigned char *)(v4 + 66) & 0x7F) << 21);
    *(_DWORD *)(v3 + 68) = v38;
    *(_DWORD *)(v3 + 68) = v38 & 0x8FFFFFFF | ((*(unsigned char *)(v4 + 59) & 7) << 28);
    int v39 = *(unsigned char *)(v4 + 73) & 0x7F;
    *(_DWORD *)(v3 + 72) = v39;
    unsigned int v40 = v39 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 72) & 0x7F) << 7);
    *(_DWORD *)(v3 + 72) = v40;
    unsigned int v41 = v40 & 0xFFF03FFF | ((*(unsigned char *)(v4 + 58) & 0x3F) << 14);
  }
  else
  {
    *(_DWORD *)(v3 + 68) = (*(unsigned char *)(v4 + 59) & 7) << 28;
    unsigned int v41 = (*(unsigned char *)(v4 + 58) & 0x3F) << 14;
  }
  uint64_t v42 = 0;
  *(_DWORD *)(v3 + 72) = v41;
  *(_DWORD *)(v3 + 76) = 0;
  int v43 = *(unsigned char *)(v4 + 77) & 0x1F;
  *(_DWORD *)(v3 + 76) = v43;
  unsigned int v44 = v43 & 0xFFFFFC1F | (32 * (*(unsigned char *)(v4 + 76) & 0x1F));
  *(_DWORD *)(v3 + 76) = v44;
  unsigned int v45 = v44 & 0xFFFF83FF | ((*(unsigned char *)(v4 + 75) & 0x1F) << 10);
  *(_DWORD *)(v3 + 76) = v45;
  *(_DWORD *)(v3 + 76) = v45 | (*(unsigned __int8 *)(v4 + 74) << 15);
  uint64_t v46 = v3 + 80;
  int v47 = (_WORD *)(v4 + 242);
  uint64_t v48 = v4 + 208;
  do
  {
    int v49 = *(unsigned __int8 *)(v4 + 78);
    *(_DWORD *)(v46 + v42) = 0;
    if (v49)
    {
      BOOL v50 = *(unsigned char *)(v48 + v42) != 0;
      *(_DWORD *)(v46 + v42) = v50;
      BOOL v51 = *(unsigned __int8 *)(v48 + v42 - 1) != 0;
    }
    else
    {
      BOOL v50 = 0;
      BOOL v51 = 0;
    }
    int v52 = v50 | (8 * v51);
    *(_DWORD *)(v46 + v42) = v52;
    unsigned int v53 = v52 & 0xFFFFFFF9 | (2 * (*v47 & 3));
    *(_DWORD *)(v46 + v42) = v53;
    if (v49)
    {
      int v54 = *(unsigned __int8 *)(v48 + v42 - 2);
      int v55 = v53 | ((*(unsigned char *)(v48 + v42 - 2) != 0) << 11);
      *(_DWORD *)(v46 + v42) = v55;
      if (v54) {
        LOWORD(v54) = *(v47 - 1);
      }
      unsigned int v56 = (16 * (v54 & 0x7F)) | v55 & 0xFFFFF80F;
      *(_DWORD *)(v46 + v42) = v56;
      int v49 = *(unsigned __int8 *)(v48 + v42 - 3);
      unsigned int v53 = v56 | ((v49 != 0) << 21);
      *(_DWORD *)(v46 + v42) = v53;
      if (v49) {
        LOWORD(v49) = *(v47 - 2);
      }
    }
    *(_DWORD *)(v46 + v42) = v53 & 0xFFE00FFF | ((v49 & 0x1FF) << 12);
    v42 += 4;
    v47 += 4;
  }
  while (v42 != 32);
  *(_DWORD *)(v3 + 152) = 0x20000;
  int v257 = 1 << v8;
  BOOL v258 = v5;
  int v256 = v8;
  int v254 = v7;
  int v253 = 1 << v8 << v7;
  if (v5)
  {
    uint64_t v252 = 8;
  }
  else
  {
    int v57 = (_DWORD *)(v3 + 112);
    uint64_t v58 = 2178;
    uint64_t v252 = 3;
    unsigned int v59 = &_os_log_internal;
    do
    {
      v57[11] = 0x1000000;
      _DWORD *v57 = 0;
      unsigned __int16 v60 = **(_DWORD **)(*((void *)this + 32) + 8 * v58) - 1;
      _DWORD *v57 = v60;
      _DWORD *v57 = (v60 | ((unsigned __int16)*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v58) + 4) << 16))
           - 0x10000;
      _OWORD v57[3] = 0;
      int v61 = (unsigned __int16)((**(_DWORD **)(*((void *)this + 32) + 8 * v58) << 14) / *(_DWORD *)(v4 + 108));
      _OWORD v57[3] = v61;
      int v62 = v61 | ((unsigned __int16)((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v58) + 4) << 14)
                                    / *(_DWORD *)(v4 + 112)) << 16);
      _OWORD v57[3] = v62;
      if ((v61 - 1024) >= 0x7C01 && os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315394;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = 542;
        _os_log_impl(&dword_223977000, v59, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
        int v62 = v57[3];
      }
      if ((v62 - 0x4000000) >= 0x7C010000 && os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315394;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = 543;
        _os_log_impl(&dword_223977000, v59, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
      }
      ++v58;
      ++v57;
    }
    while (v58 != 2181);
  }
  if ((~*(_DWORD *)(v3 + 48) & 0xC0000) != 0)
  {
    unsigned __int16 v68 = *(_DWORD *)(v4 + 2672);
    *(_WORD *)(v3 + 144) = v68;
    *(_DWORD *)(v3 + 144) = v68 | ((unsigned __int16)*(_DWORD *)(v4 + 2676) << 16);
    unsigned __int16 v69 = *(_DWORD *)(v4 + 2680);
    *(_WORD *)(v3 + 148) = v69;
    int v67 = v69 | ((unsigned __int16)*(_DWORD *)(v4 + 2684) << 16);
  }
  else
  {
    int v63 = (_DWORD *)*((void *)this + 32);
    int v64 = v63[664];
    if (!v64 || !v63[665])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v177 = v63[665];
        *(_DWORD *)CMTime buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v64;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v177;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): invalid stat crop width/height %d/%d", buf, 0x18u);
      }
      return 0xFFFFFFFFLL;
    }
    unsigned __int16 v65 = v63[666];
    *(_WORD *)(v3 + 144) = v65;
    *(_DWORD *)(v3 + 144) = v65 | ((unsigned __int16)v63[667] << 16);
    unsigned __int16 v66 = v63[666] + v63[664] - 1;
    *(_WORD *)(v3 + 148) = v66;
    int v67 = (v66 | ((unsigned __int16)(v63[665] + *((_WORD *)v63 + 1334)) << 16)) - 0x10000;
  }
  *(_DWORD *)(v3 + 148) = v67;
  int v70 = (char *)this + 464;
  for (uint64_t i = 168; i != 196; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v72 = *((void *)this + 33);
    int v73 = *(_DWORD *)(v72 + i);
    *(_DWORD *)(v72 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFu;
    uint64_t v74 = *((void *)this + 33);
    int v75 = *(_DWORD *)(v74 + i);
    *(_DWORD *)(v74 + i) = v73;
    if (*(void *)v70 || *((_DWORD *)v70 + 38) || *((_DWORD *)v70 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v70, i, 0, 0xFFFFFFFFLL, 8, v75, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 28) = *(_DWORD *)(*((void *)this + 33) + i + 28) & 0x800001FF | (((*((_DWORD *)this + 780) >> 9) & 0x3FFFFF) << 9);
    v70 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 228) = 0;
  if ((*(unsigned char *)(v3 + 50) & 8) == 0) {
    goto LABEL_227;
  }
  uint64_t v77 = *((void *)this + 33);
  uint64_t v78 = *(void *)(*((void *)this + 32) + 2680);
  long long v267 = 0u;
  long long v268 = 0u;
  long long v265 = 0u;
  long long v266 = 0u;
  long long v263 = 0u;
  long long v264 = 0u;
  long long v261 = 0u;
  long long v262 = 0u;
  long long v260 = 0u;
  memset(buf, 0, sizeof(buf));
  int v79 = *(_DWORD *)(v77 + 16);
  *(void *)CMTime buf = v78;
  int v80 = *(_DWORD *)(v77 + 228);
  *(_DWORD *)(v77 + 228) = 0;
  *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFFu;
  uint64_t v81 = *((void *)this + 33);
  int v82 = *(_DWORD *)(v81 + 228);
  *(_DWORD *)(v81 + 228) = v80;
  if (!v78
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 228, (v79 & 0xF) << 9, 0xFFFFFFFFLL, 8, v82, 4), !result))
  {
LABEL_227:
    *(_DWORD *)(*((void *)this + 33) + 224) = 0;
    uint64_t v83 = *((void *)this + 33);
    int v84 = *(_DWORD *)(v83 + 224);
    *(_DWORD *)(v83 + 224) = 0;
    *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFFu;
    uint64_t v85 = *((void *)this + 33);
    int v86 = *(_DWORD *)(v85 + 224);
    *(_DWORD *)(v85 + 224) = v84;
    uint64_t v87 = *((void *)this + 32);
    if (!*(void *)(v87 + 5184) && !*(_DWORD *)(v87 + 5336) && !*(_DWORD *)(v87 + 5340)) {
      goto LABEL_228;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v87 + 5184), 224, 0, 0xFFFFFFFFLL, 8, v86, 4);
    if (!result)
    {
LABEL_228:
      *(_DWORD *)(*((void *)this + 33) + 280) = 0;
      uint64_t v88 = *((void *)this + 33);
      int v89 = *(_DWORD *)(v88 + 280);
      *(_DWORD *)(v88 + 280) = 0;
      *(_DWORD *)(*((void *)this + 33) + 280) ^= 0xFFFFFFu;
      uint64_t v90 = *((void *)this + 33);
      int v91 = *(_DWORD *)(v90 + 280);
      *(_DWORD *)(v90 + 280) = v89;
      if (!*((void *)this + 278) && !*((_DWORD *)this + 594) && !*((_DWORD *)this + 595)) {
        goto LABEL_215;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 280, 0, 0xFFFFFFFFLL, 8, v91, 4);
      if (!result)
      {
LABEL_215:
        *(_DWORD *)(*((void *)this + 33) + 232) = 0;
        uint64_t v92 = *((void *)this + 33);
        int v93 = *(_DWORD *)(v92 + 232);
        *(_DWORD *)(v92 + 232) = 0;
        *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFFu;
        uint64_t v94 = *((void *)this + 33);
        int v95 = *(_DWORD *)(v94 + 232);
        *(_DWORD *)(v94 + 232) = v93;
        if (!*((void *)this + 234) && !*((_DWORD *)this + 506) && !*((_DWORD *)this + 507)) {
          goto LABEL_216;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 232, 0, 0xFFFFFFFFLL, 8, v95, 4);
        if (!result)
        {
LABEL_216:
          *(_DWORD *)(*((void *)this + 33) + 236) = 0;
          uint64_t v96 = *((void *)this + 33);
          int v97 = *(_DWORD *)(v96 + 236);
          *(_DWORD *)(v96 + 236) = 0;
          *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFFu;
          uint64_t v98 = *((void *)this + 33);
          int v99 = *(_DWORD *)(v98 + 236);
          *(_DWORD *)(v98 + 236) = v97;
          if (!*((void *)this + 256) && !*((_DWORD *)this + 550) && !*((_DWORD *)this + 551)) {
            goto LABEL_217;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 236, 0, 0xFFFFFFFFLL, 8, v99, 4);
          if (!result)
          {
LABEL_217:
            *(_DWORD *)(*((void *)this + 33) + 240) = 0;
            *(_DWORD *)(*((void *)this + 33) + 244) = 0;
            uint64_t v100 = *((void *)this + 33);
            int v101 = *(_DWORD *)(v100 + 244);
            *(_DWORD *)(v100 + 244) = 0;
            *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFFu;
            uint64_t v102 = *((void *)this + 33);
            int v103 = *(_DWORD *)(v102 + 244);
            *(_DWORD *)(v102 + 244) = v101;
            if (!*((void *)this + 300) && !*((_DWORD *)this + 638) && !*((_DWORD *)this + 639)) {
              goto LABEL_218;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 244, 0, 0xFFFFFFFFLL, 8, v103, 4);
            if (!result)
            {
LABEL_218:
              *(_DWORD *)(*((void *)this + 33) + 248) = 0;
              uint64_t v104 = *((void *)this + 33);
              int v105 = *(_DWORD *)(v104 + 248);
              *(_DWORD *)(v104 + 248) = 0;
              *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFFu;
              uint64_t v106 = *((void *)this + 33);
              int v107 = *(_DWORD *)(v106 + 248);
              *(_DWORD *)(v106 + 248) = v105;
              if (!*((void *)this + 322) && !*((_DWORD *)this + 682) && !*((_DWORD *)this + 683)) {
                goto LABEL_219;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 248, 0, 0xFFFFFFFFLL, 8, v107, 4);
              if (!result)
              {
LABEL_219:
                *(_DWORD *)(*((void *)this + 33) + 252) = 0;
                uint64_t v108 = *((void *)this + 33);
                int v109 = *(_DWORD *)(v108 + 252);
                *(_DWORD *)(v108 + 252) = 0;
                *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFFu;
                uint64_t v110 = *((void *)this + 33);
                int v111 = *(_DWORD *)(v110 + 252);
                *(_DWORD *)(v110 + 252) = v109;
                if (!*((void *)this + 344) && !*((_DWORD *)this + 726) && !*((_DWORD *)this + 727)) {
                  goto LABEL_220;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 252, 0, 0xFFFFFFFFLL, 8, v111, 4);
                if (!result)
                {
LABEL_220:
                  *(_DWORD *)(*((void *)this + 33) + 256) = 0;
                  uint64_t v112 = *((void *)this + 33);
                  int v113 = *(_DWORD *)(v112 + 256);
                  *(_DWORD *)(v112 + 256) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFFu;
                  uint64_t v114 = *((void *)this + 33);
                  int v115 = *(_DWORD *)(v114 + 256);
                  *(_DWORD *)(v114 + 256) = v113;
                  if (!*((void *)this + 366) && !*((_DWORD *)this + 770) && !*((_DWORD *)this + 771)) {
                    goto LABEL_221;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 256, 0, 0xFFFFFFFFLL, 8, v115, 4);
                  if (!result)
                  {
LABEL_221:
                    *(_DWORD *)(*((void *)this + 33) + 260) = 0;
                    uint64_t v116 = *((void *)this + 33);
                    int v117 = *(_DWORD *)(v116 + 260);
                    *(_DWORD *)(v116 + 260) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFFu;
                    uint64_t v118 = *((void *)this + 33);
                    int v119 = *(_DWORD *)(v118 + 260);
                    *(_DWORD *)(v118 + 260) = v117;
                    uint64_t v120 = *((void *)this + 32);
                    unsigned int v121 = *(_DWORD *)(v120 + 17568);
                    uint64_t v122 = v120 + 176 * v121;
                    if (!*(void *)(v122 + 3072)
                      && !*(_DWORD *)(v120 + 176 * v121 + 3224)
                      && !*(_DWORD *)(v120 + 176 * v121 + 3228))
                    {
                      goto LABEL_222;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v122 + 3072), 260, 0, 0xFFFFFFFFLL, 8, v119, 4);
                    if (!result)
                    {
LABEL_222:
                      *(_DWORD *)(*((void *)this + 33) + 264) = *(unsigned __int8 *)(*((void *)this + 33) + 267) << 24;
                      uint64_t v123 = *((void *)this + 33);
                      int v124 = *(_DWORD *)(v123 + 264);
                      *(_DWORD *)(v123 + 264) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFFu;
                      uint64_t v125 = *((void *)this + 33);
                      int v126 = *(_DWORD *)(v125 + 264);
                      *(_DWORD *)(v125 + 264) = v124;
                      uint64_t v127 = *((void *)this + 32);
                      int v128 = *(_DWORD *)(v127 + 5724);
                      uint64_t v129 = v127 + 176 * v128;
                      if (!*(void *)(v129 + 3776)
                        && !*(_DWORD *)(v127 + 176 * v128 + 3928)
                        && !*(_DWORD *)(v127 + 176 * v128 + 3932))
                      {
                        goto LABEL_223;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v129 + 3776), 264, 0, 0xFFFFFFFFLL, 8, v126, 4);
                      if (!result)
                      {
LABEL_223:
                        *(_DWORD *)(*((void *)this + 33) + 268) = *(unsigned __int8 *)(*((void *)this + 33) + 271) << 24;
                        uint64_t v130 = *((void *)this + 33);
                        int v131 = *(_DWORD *)(v130 + 268);
                        *(_DWORD *)(v130 + 268) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFFu;
                        uint64_t v132 = *((void *)this + 33);
                        int v133 = *(_DWORD *)(v132 + 268);
                        *(_DWORD *)(v132 + 268) = v131;
                        uint64_t v134 = *((void *)this + 32);
                        int v135 = *(_DWORD *)(v134 + 5720);
                        uint64_t v136 = v134 + 176 * v135;
                        if (!*(void *)(v136 + 3776)
                          && !*(_DWORD *)(v134 + 176 * v135 + 3928)
                          && !*(_DWORD *)(v134 + 176 * v135 + 3932))
                        {
                          goto LABEL_224;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v136 + 3776), 268, 0, 0xFFFFFFFFLL, 8, v133, 4);
                        if (!result)
                        {
LABEL_224:
                          *(_DWORD *)(*((void *)this + 33) + 272) = 0;
                          uint64_t v137 = *((void *)this + 33);
                          int v138 = *(_DWORD *)(v137 + 272);
                          *(_DWORD *)(v137 + 272) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFFu;
                          uint64_t v139 = *((void *)this + 33);
                          int v140 = *(_DWORD *)(v139 + 272);
                          *(_DWORD *)(v139 + 272) = v138;
                          uint64_t v141 = *((void *)this + 32);
                          int v142 = *(_DWORD *)(v141 + 5716);
                          uint64_t v143 = v141 + 176 * v142;
                          if (!*(void *)(v143 + 5360)
                            && !*(_DWORD *)(v141 + 176 * v142 + 5512)
                            && !*(_DWORD *)(v141 + 176 * v142 + 5516))
                          {
                            goto LABEL_225;
                          }
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v143 + 5360), 272, 0, 0xFFFFFFFFLL, 8, v140, 4);
                          if (!result)
                          {
LABEL_225:
                            *(_DWORD *)(*((void *)this + 33) + 276) = 0;
                            uint64_t v144 = *((void *)this + 33);
                            int v145 = *(_DWORD *)(v144 + 276);
                            *(_DWORD *)(v144 + 276) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 276) ^= 0xFFFFFFu;
                            uint64_t v146 = *((void *)this + 33);
                            int v147 = *(_DWORD *)(v146 + 276);
                            *(_DWORD *)(v146 + 276) = v145;
                            uint64_t v148 = *((void *)this + 32);
                            int v149 = *(_DWORD *)(v148 + 5712);
                            uint64_t v150 = v148 + 176 * v149;
                            if (!*(void *)(v150 + 5360)
                              && !*(_DWORD *)(v148 + 176 * v149 + 5512)
                              && !*(_DWORD *)(v148 + 176 * v149 + 5516))
                            {
                              goto LABEL_226;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v150 + 5360), 276, 0, 0xFFFFFFFFLL, 8, v147, 4);
                            if (!result)
                            {
LABEL_226:
                              *(_DWORD *)(*((void *)this + 33) + 284) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 288) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 292) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 296) = 0;
                              uint64_t v151 = *((void *)this + 33);
                              int v152 = *(_DWORD *)(v151 + 288);
                              *(_DWORD *)(v151 + 288) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 288) ^= 0x1FFFFFFu;
                              uint64_t v153 = *((void *)this + 33);
                              int v154 = *(_DWORD *)(v153 + 288);
                              *(_DWORD *)(v153 + 288) = v152;
                              uint64_t v155 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
                              if (!*(void *)v155 && !*(_DWORD *)(v155 + 152) && !*(_DWORD *)(v155 + 156)) {
                                goto LABEL_103;
                              }
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v155, 288, *(_DWORD *)(v155 + 52), 0xFFFFFFFFLL, 7, v154, 4);
                              if (!result)
                              {
LABEL_103:
                                uint64_t v156 = v3;
                                uint64_t v157 = *((void *)this + 33);
                                int v158 = *(_DWORD *)(v157 + 296);
                                *(_DWORD *)(v157 + 296) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 296) ^= 0x1FFFFFFu;
                                uint64_t v159 = *((void *)this + 33);
                                int v160 = *(_DWORD *)(v159 + 296);
                                *(_DWORD *)(v159 + 296) = v158;
                                uint64_t v161 = *((void *)this + 32);
                                uint64_t v162 = *(void *)(v161 + 376 * v6 + 5736);
                                if (*(void *)v162 || *(_DWORD *)(v162 + 152) || *(_DWORD *)(v162 + 156))
                                {
                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v162, 296, *(_DWORD *)(v162 + 56), 0xFFFFFFFFLL, 7, v160, 4);
                                  if (result) {
                                    return result;
                                  }
                                  uint64_t v161 = *((void *)this + 32);
                                }
                                int v163 = *(_DWORD *)(v161 + 2648);
                                uint64_t v164 = *((void *)this + 33);
                                int v165 = *(_DWORD *)(v164 + 284);
                                *(_DWORD *)(v164 + 284) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 284) ^= 0x1FFFFFFu;
                                uint64_t v166 = *((void *)this + 33);
                                int v167 = *(_DWORD *)(v166 + 284);
                                *(_DWORD *)(v166 + 284) = v165;
                                uint64_t v168 = *((void *)this + 32);
                                if (v163 == 1)
                                {
                                  uint64_t v169 = *(void *)(v168 + 376 * v6 + 5736);
                                  if (*(void *)v169 || *(_DWORD *)(v169 + 152) || *(_DWORD *)(v169 + 156))
                                  {
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v169, 284, *(_DWORD *)(v169 + 64), 0xFFFFFFFFLL, 7, v167, 4);
                                    if (result) {
                                      return result;
                                    }
                                  }
                                  uint64_t v170 = *((void *)this + 33);
                                  int v171 = *(_DWORD *)(v170 + 292);
                                  *(_DWORD *)(v170 + 292) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 292) ^= 0x1FFFFFFu;
                                  uint64_t v172 = *((void *)this + 33);
                                  int v173 = *(_DWORD *)(v172 + 292);
                                  *(_DWORD *)(v172 + 292) = v171;
                                  uint64_t v174 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
                                  if (!*(void *)v174 && !*(_DWORD *)(v174 + 152) && !*(_DWORD *)(v174 + 156)) {
                                    goto LABEL_130;
                                  }
                                  int v175 = *(_DWORD *)(v174 + 68);
                                  int v176 = this;
                                }
                                else
                                {
                                  uint64_t v178 = v168 + 376 * v6;
                                  if (*(void *)(v178 + 5752)
                                    || *(_DWORD *)(v168 + 376 * v6 + 5904)
                                    || *(_DWORD *)(v168 + 376 * v6 + 5908))
                                  {
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v178 + 5752), 284, 0, 0xFFFFFFFFLL, 7, v167, 4);
                                    if (result) {
                                      return result;
                                    }
                                  }
                                  uint64_t v179 = *((void *)this + 33);
                                  int v180 = *(_DWORD *)(v179 + 292);
                                  *(_DWORD *)(v179 + 292) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 292) ^= 0x1FFFFFFu;
                                  uint64_t v181 = *((void *)this + 33);
                                  int v173 = *(_DWORD *)(v181 + 292);
                                  *(_DWORD *)(v181 + 292) = v180;
                                  uint64_t v182 = *((void *)this + 32);
                                  uint64_t v183 = v182 + 376 * v6;
                                  if (!*(void *)(v183 + 5928)
                                    && !*(_DWORD *)(v182 + 376 * v6 + 6080)
                                    && !*(_DWORD *)(v182 + 376 * v6 + 6084))
                                  {
                                    goto LABEL_130;
                                  }
                                  uint64_t v174 = v183 + 5928;
                                  int v176 = this;
                                  int v175 = 0;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)v176, (void *)v174, 292, v175, 0xFFFFFFFFLL, 7, v173, 4);
                                if (result) {
                                  return result;
                                }
LABEL_130:
                                if (v258)
                                {
LABEL_131:
                                  unsigned int v184 = subWidth[*(int *)(*(void *)(*((void *)this + 32) + 17560) + 4)];
                                  *(_DWORD *)(*((void *)this + 33) + 360) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 364) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 368) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 372) = 0;
                                  if (!*(_DWORD *)(*((void *)this + 32) + 2644))
                                  {
LABEL_152:
                                    if (v253 < 2)
                                    {
                                      uint64_t v207 = *((void *)this + 33);
                                      *(_DWORD *)(v207 + 376) = 65537;
                                      *(_WORD *)(v207 + 380) = 0;
                                      *(_WORD *)(v207 + 382) = *(_DWORD *)(v4 + 108) >> 6;
                                      *(_WORD *)(v207 + 510) = 0;
                                      *(_WORD *)(v207 + 512) = *(_DWORD *)(v4 + 112) >> 6;
                                      uint64_t v208 = *((void *)this + 32);
                                    }
                                    else
                                    {
                                      uint64_t v207 = *((void *)this + 33);
                                      *(_WORD *)(v207 + 376) = v257;
                                      uint64_t v208 = *((void *)this + 32);
                                      if (v254 != 31)
                                      {
                                        if (v255 <= 1) {
                                          uint64_t v209 = 1;
                                        }
                                        else {
                                          uint64_t v209 = v255;
                                        }
                                        int v210 = (unsigned char *)(*(void *)(v208 + 17560) + 2786);
                                        do
                                        {
                                          if (!*v210) {
                                            *(_WORD *)(v207 + 2 * v252 + 510) = *(_DWORD *)(v210 - 26) >> 3;
                                          }
                                          v210 += 1792;
                                          --v209;
                                        }
                                        while (v209);
                                      }
                                      *(_WORD *)(v207 + 378) = v255;
                                      if (v256 != 31)
                                      {
                                        uint64_t v211 = *(void *)(v208 + 17560);
                                        if (v257 <= 1) {
                                          uint64_t v212 = 1;
                                        }
                                        else {
                                          uint64_t v212 = v257;
                                        }
                                        int v213 = (unsigned __int8 *)(v211 + 2786);
                                        int v214 = (unsigned __int8 *)(v211 + 2786);
                                        do
                                        {
                                          int v215 = *v214;
                                          v214 += 28;
                                          if (!v215) {
                                            *(_WORD *)(v207 + 2 * v252 + 380) = *(_DWORD *)(v213 - 18) >> 3;
                                          }
                                          int v213 = v214;
                                          --v212;
                                        }
                                        while (v212);
                                      }
                                    }
                                    if (*(_DWORD *)(v208 + 2360) != 1) {
                                      return 0;
                                    }
                                    *(_DWORD *)(v207 + 524) = *(_DWORD *)(v207 + 524) & 0xFFFFFFFE | *(_DWORD *)(v208 + 2508) & 1;
                                    if (*(_DWORD *)(v208 + 2508))
                                    {
                                      *(_DWORD *)(v207 + 532) = 0x10000000;
                                      *(_DWORD *)(v207 + 536) = *(_DWORD *)(v208 + 2368);
                                      *(void *)(v207 + 544) = 0;
                                      *(_DWORD *)(v207 + 540) = 0;
                                      *(_OWORD *)(v207 + 552) = *(_OWORD *)(v208 + 2372);
                                      long long v246 = *(_OWORD *)(v208 + 2388);
                                      *(_OWORD *)(v207 + 584) = *(_OWORD *)(v208 + 2404);
                                      *(_OWORD *)(v207 + 568) = v246;
                                    }
                                    *(_DWORD *)(*((void *)this + 33) + 524) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 524) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v208 + 2512) & 1));
                                    if (*(_DWORD *)(v208 + 2512))
                                    {
                                      *(_DWORD *)(v207 + 600) = 0;
                                      char v247 = *(_DWORD *)(v208 + 2424);
                                      *(_DWORD *)(v207 + 600) = (*(_DWORD *)(v208 + 2424) & 1) << 22;
                                      int v248 = ((*(_DWORD *)(v208 + 2420) & 1) << 23) | ((v247 & 1) << 22) | 0x20000000;
                                      *(_DWORD *)(v207 + 600) = v248;
                                      *(_DWORD *)(v207 + 600) = v248 | (*(_DWORD *)(v208 + 2364) == 0);
                                      long long v249 = *(_OWORD *)(v208 + 2428);
                                      long long v250 = *(_OWORD *)(v208 + 2444);
                                      *(_OWORD *)(v207 + 636) = *(_OWORD *)(v208 + 2460);
                                      *(_OWORD *)(v207 + 620) = v250;
                                      *(_OWORD *)(v207 + 604) = v249;
                                    }
                                    *(_DWORD *)(*((void *)this + 33) + 524) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 524) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v208 + 2516) & 1));
                                    *(_DWORD *)(*((void *)this + 33) + 524) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 524) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v208 + 2520) & 1));
                                    *(_DWORD *)(*((void *)this + 33) + 524) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 524) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v208 + 2524) & 1));
                                    if (!*(_DWORD *)(v208 + 2516)) {
                                      return 0;
                                    }
                                    *(_DWORD *)(v207 + 656) = 0;
                                    if (*(_DWORD *)(v208 + 2476) == 2) {
                                      int v251 = 805306368;
                                    }
                                    else {
                                      int v251 = 813694976;
                                    }
                                    *(_DWORD *)(v207 + 656) = v251;
                                    memcpy((void *)(v207 + 660), (const void *)(v208 + 2480), 4 * *(unsigned int *)(v208 + 2476));
                                    uint64_t result = 0;
                                    *(_DWORD *)(v208 + 2516) = 0;
                                    return result;
                                  }
                                  uint64_t v185 = *((void *)this + 33);
                                  int v186 = *(_DWORD *)(v185 + 360);
                                  *(_DWORD *)(v185 + 360) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 360) ^= 0xFFFFFFu;
                                  uint64_t v187 = *((void *)this + 33);
                                  int v188 = *(_DWORD *)(v187 + 360);
                                  *(_DWORD *)(v187 + 360) = v186;
                                  uint64_t v189 = *(void *)(*((void *)this + 32) + 11768);
                                  if (*(void *)v189 || *(_DWORD *)(v189 + 152) || *(_DWORD *)(v189 + 156))
                                  {
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v189, 360, *(_DWORD *)(v189 + 52), 0xFFFFFFFFLL, 8, v188, 4);
                                    if (result) {
                                      return result;
                                    }
                                  }
                                  uint64_t v190 = *((void *)this + 33);
                                  int v191 = *(_DWORD *)(v190 + 364);
                                  *(_DWORD *)(v190 + 364) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 364) ^= 0xFFFFFFu;
                                  uint64_t v192 = *((void *)this + 33);
                                  int v193 = *(_DWORD *)(v192 + 364);
                                  *(_DWORD *)(v192 + 364) = v191;
                                  uint64_t v194 = *(void *)(*((void *)this + 32) + 11768);
                                  if (*(void *)v194 || *(_DWORD *)(v194 + 152) || *(_DWORD *)(v194 + 156))
                                  {
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v194, 364, *(_DWORD *)(v194 + 56), 0xFFFFFFFFLL, 8, v193, 4);
                                    if (result) {
                                      return result;
                                    }
                                  }
                                  uint64_t v195 = *((void *)this + 33);
                                  int v196 = *(_DWORD *)(v195 + 368);
                                  *(_DWORD *)(v195 + 368) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 368) ^= 0xC0000000;
                                  uint64_t v197 = *((void *)this + 33);
                                  int v198 = *(_DWORD *)(v197 + 368);
                                  *(_DWORD *)(v197 + 368) = v196;
                                  uint64_t v199 = *(void *)(*((void *)this + 32) + 11768);
                                  if (*(void *)v199 || *(_DWORD *)(v199 + 152) || *(_DWORD *)(v199 + 156))
                                  {
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v199, 368, *(_DWORD *)(v199 + 52), 192, 6, v198, 4);
                                    if (result) {
                                      return result;
                                    }
                                  }
                                  uint64_t v200 = *((void *)this + 33);
                                  int v201 = *(_DWORD *)(v200 + 372);
                                  *(_DWORD *)(v200 + 372) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 372) ^= 0xC0000000;
                                  uint64_t v202 = *((void *)this + 33);
                                  int v203 = *(_DWORD *)(v202 + 372);
                                  *(_DWORD *)(v202 + 372) = v201;
                                  uint64_t v204 = *((void *)this + 32);
                                  uint64_t v205 = *(void *)(v204 + 11768);
                                  if (*(void *)v205 || *(_DWORD *)(v205 + 152) || *(_DWORD *)(v205 + 156))
                                  {
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v205, 372, *(_DWORD *)(v205 + 56), 192, 6, v203, 4);
                                    if (result) {
                                      return result;
                                    }
                                    uint64_t v204 = *((void *)this + 32);
                                  }
                                  if (*(unsigned char *)(v204 + 8))
                                  {
                                    *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 368) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(v204 + 11768) + 76) >> 6) & 0xFFF));
                                    int v206 = (_DWORD *)(*(void *)(*((void *)this + 32) + 11768) + 80);
LABEL_151:
                                    *(_DWORD *)(*((void *)this + 33) + 372) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 372) & 0xFFFF8003 | (4 * ((*v206 >> 6) & 0x1FFF));
                                    goto LABEL_152;
                                  }
                                  if (!CAHDecLotusLgh::getSWRStride(this, *(unsigned __int16 *)(v156 + 148) + 1, *(unsigned __int8 *)(v4 + 105) - 8, *(unsigned __int8 *)(v4 + 105) - 8, v184))
                                  {
                                    *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33)
                                                                                            + 368) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 783) >> 6) & 0xFFF));
                                    int v206 = (_DWORD *)((char *)this + 3136);
                                    goto LABEL_151;
                                  }
                                  return 0xFFFFFFFFLL;
                                }
                                uint64_t v216 = 0;
                                uint64_t v217 = 17424;
                                while (1)
                                {
                                  uint64_t v218 = *(void *)(*(void *)(*((void *)this + 32) + v217) + 40);
                                  *(_DWORD *)(*((void *)this + 33) + v216 + 312) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + v216 + 324) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + v216 + 336) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + v216 + 348) = 0;
                                  uint64_t v219 = *((void *)this + 33) + v216;
                                  int v220 = *(_DWORD *)(v219 + 324);
                                  *(_DWORD *)(v219 + 324) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + v216 + 324) ^= 0x1FFFFFFu;
                                  uint64_t v221 = *((void *)this + 33) + v216;
                                  int v222 = *(_DWORD *)(v221 + 324);
                                  *(_DWORD *)(v221 + 324) = v220;
                                  uint64_t v223 = *(void *)(v218 + 8);
                                  if (*(void *)v223 || *(_DWORD *)(v223 + 152) || *(_DWORD *)(v223 + 156))
                                  {
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v223, (int)v216 + 324, *(_DWORD *)(v223 + 52), 0xFFFFFFFFLL, 7, v222, 4);
                                    if (result) {
                                      return result;
                                    }
                                  }
                                  uint64_t v224 = *((void *)this + 33) + v216;
                                  int v225 = *(_DWORD *)(v224 + 348);
                                  *(_DWORD *)(v224 + 348) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + v216 + 348) ^= 0x1FFFFFFu;
                                  uint64_t v226 = *((void *)this + 33) + v216;
                                  int v227 = *(_DWORD *)(v226 + 348);
                                  *(_DWORD *)(v226 + 348) = v225;
                                  uint64_t v228 = *(void *)(v218 + 8);
                                  if (*(void *)v228 || *(_DWORD *)(v228 + 152) || *(_DWORD *)(v228 + 156))
                                  {
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v228, (int)v216 + 348, *(_DWORD *)(v228 + 56), 0xFFFFFFFFLL, 7, v227, 4);
                                    if (result) {
                                      return result;
                                    }
                                  }
                                  int v229 = *(_DWORD *)(*((void *)this + 32) + 2648);
                                  uint64_t v230 = *((void *)this + 33) + v216;
                                  int v231 = *(_DWORD *)(v230 + 312);
                                  *(_DWORD *)(v230 + 312) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + v216 + 312) ^= 0x1FFFFFFu;
                                  uint64_t v232 = *((void *)this + 33) + v216;
                                  int v233 = *(_DWORD *)(v232 + 312);
                                  *(_DWORD *)(v232 + 312) = v231;
                                  if (v229 == 1)
                                  {
                                    uint64_t v234 = *(void *)(v218 + 8);
                                    if (*(void *)v234 || *(_DWORD *)(v234 + 152) || *(_DWORD *)(v234 + 156))
                                    {
                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v234, (int)v216 + 312, *(_DWORD *)(v234 + 64), 0xFFFFFFFFLL, 7, v233, 4);
                                      if (result) {
                                        return result;
                                      }
                                    }
                                    uint64_t v235 = *((void *)this + 33) + v216;
                                    int v236 = *(_DWORD *)(v235 + 336);
                                    *(_DWORD *)(v235 + 336) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + v216 + 336) ^= 0x1FFFFFFu;
                                    uint64_t v237 = *((void *)this + 33) + v216;
                                    int v238 = *(_DWORD *)(v237 + 336);
                                    *(_DWORD *)(v237 + 336) = v236;
                                    uint64_t v239 = *(void *)(v218 + 8);
                                    if (*(void *)v239 || *(_DWORD *)(v239 + 152) || *(_DWORD *)(v239 + 156))
                                    {
                                      int v240 = *(_DWORD *)(v239 + 68);
                                      int v241 = v216 + 336;
                                      int v242 = this;
                                      goto LABEL_196;
                                    }
                                  }
                                  else
                                  {
                                    if (*(void *)(v218 + 24) || *(_DWORD *)(v218 + 176) || *(_DWORD *)(v218 + 180))
                                    {
                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v218 + 24), (int)v216 + 312, 0, 0xFFFFFFFFLL, 7, v233, 4);
                                      if (result) {
                                        return result;
                                      }
                                    }
                                    uint64_t v243 = *((void *)this + 33) + v216;
                                    int v244 = *(_DWORD *)(v243 + 336);
                                    *(_DWORD *)(v243 + 336) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + v216 + 336) ^= 0x1FFFFFFu;
                                    uint64_t v245 = *((void *)this + 33) + v216;
                                    int v238 = *(_DWORD *)(v245 + 336);
                                    *(_DWORD *)(v245 + 336) = v244;
                                    uint64_t v239 = v218 + 200;
                                    if (*(void *)(v218 + 200) || *(_DWORD *)(v218 + 352) || *(_DWORD *)(v218 + 356))
                                    {
                                      int v241 = v216 + 336;
                                      int v242 = this;
                                      int v240 = 0;
LABEL_196:
                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)v242, (void *)v239, v241, v240, 0xFFFFFFFFLL, 7, v238, 4);
                                      if (result) {
                                        return result;
                                      }
                                    }
                                  }
                                  v217 += 8;
                                  v216 += 4;
                                  if (v216 == 12) {
                                    goto LABEL_131;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecLotusLgh::getSWRStride(CAHDecLotusLgh *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *(void *)((char *)this + 3132) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 784) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        unsigned int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecLotusLgh::getTileStartCTU(CAHDecLotusLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 376);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecLotusLgh::getTileEndCTU(CAHDecLotusLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 376);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecLotusLgh::populateAvdWork(CAHDecLotusLgh *this)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  uint64_t v38 = *(void *)(v2 + 16);
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  unint64_t v3 = *(unsigned int *)(v2 + 312);
  if (!v3)
  {
    LOWORD(v8) = 0;
    goto LABEL_34;
  }
  uint64_t v5 = 0;
  uint64_t v39 = 0;
  int v6 = 0;
  LODWORD(v7) = 0;
  int v8 = 0;
  uint64_t v9 = v1 + 2724;
  unint64_t v10 = *(unsigned int *)(v2 + 316);
  unint64_t v11 = v10;
  uint64_t v37 = v9;
  while (1)
  {
    uint64_t v36 = v5;
    if (v11) {
      break;
    }
LABEL_31:
    uint64_t v5 = v36 + 1792;
    if (++v39 >= v3)
    {
      uint64_t v1 = *((void *)this + 33);
LABEL_34:
      uint64_t result = 0;
      *(_WORD *)(v1 + 26) = v8;
      *(_DWORD *)(v1 + 32) = 2724;
      return result;
    }
  }
  unint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *((void *)this + 32);
    uint64_t v14 = *(void *)(v13 + 17560);
    uint64_t v15 = v14 + v5;
    if (*(unsigned char *)(v14 + v5 + 2786)) {
      goto LABEL_30;
    }
    *(_WORD *)(v9 + 4) = v8;
    *(_WORD *)(v9 + 6) = 0;
    *(_WORD *)(v9 + 10) = v6;
    if (!CAVDLghDecoder::GetTileMemInfo(v13, v38 + *(unsigned int *)(v15 + 2780), &v43, &v42)) {
      return 0xFFFFFFFFLL;
    }
    int v41 = v7;
    unsigned int v16 = (void *)v43;
    if (*(void *)v43 || *(_DWORD *)(v43 + 152) || *(_DWORD *)(v43 + 156))
    {
      int v40 = v8;
      int v17 = v6;
      uint64_t v18 = v2;
      int v19 = v42;
      if (HIDWORD(v42) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315394;
        unsigned int v45 = "populateAvdWork";
        __int16 v46 = 1024;
        int v47 = 1055;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        int v19 = v42;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v16, 36 * v41 + 2744, v19, 0xFFFFFFFFLL, 0, -1, 4);
      uint64_t v2 = v18;
      int v6 = v17;
      int v8 = v40;
      if (result) {
        return result;
      }
    }
    unsigned int v21 = (_DWORD *)(v14 + v5);
    *(_DWORD *)(v9 + 24) = *(_DWORD *)(v14 + v5 + 2776);
    int v22 = *(_DWORD *)(v15 + 2760);
    int v23 = v22 + 7;
    if (v22 >= 0) {
      int v23 = *(_DWORD *)(v15 + 2760);
    }
    int v24 = v21[692];
    *(_DWORD *)(v9 + 28) = (v23 << 13) & 0xFFFF0000 | (v24 / 8);
    int v25 = v21[691];
    int v27 = v25 - 1;
    BOOL v26 = v25 < 1;
    int v28 = v25 + 6;
    if (!v26) {
      int v28 = v27;
    }
    unsigned int v29 = (v28 << 13) & 0xFFFF0000;
    int v30 = v21[693];
    int v31 = v30 - 1;
    BOOL v26 = v30 < 1;
    int v32 = v30 + 6;
    if (!v26) {
      int v32 = v31;
    }
    *(_DWORD *)(v9 + 32) = v29 | (v32 >> 3);
    if (v22 + v24) {
      __int16 v33 = 4;
    }
    else {
      __int16 v33 = 5;
    }
    *(_WORD *)(v9 + 12) = v33;
    unint64_t v3 = *(unsigned int *)(v2 + 312);
    unint64_t v10 = *(unsigned int *)(v2 + 316);
    if (v12 == v10 && v39 == v3) {
      __int16 v35 = 5;
    }
    else {
      __int16 v35 = 4;
    }
    *(_WORD *)(v9 + 14) = v35;
    ++v6;
    ++v8;
    v9 += 36;
    unint64_t v7 = 0x8E38E38E38E38E39 * ((v9 - v37) >> 2);
LABEL_30:
    ++v12;
    v5 += 28;
    unint64_t v11 = v10;
    if (v12 >= v10) {
      goto LABEL_31;
    }
  }
}

uint64_t CAHDecLotusLgh::allocWorkBuf_SPS(CAHDecLotusLgh *this, int *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  int v4 = *a2;
  int v3 = a2[1];
  int v5 = *a2 + 31;
  if (*a2 < -31) {
    int v5 = *a2 + 62;
  }
  unsigned int v6 = v5 >> 5;
  int v7 = v3 + 31;
  if (v3 < -31) {
    int v7 = v3 + 62;
  }
  unsigned int v8 = v7 >> 5;
  unsigned int v9 = 32 - __clz(v6 - 1);
  if (v6 >= 2) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  unsigned int v11 = 32 - __clz(v8 - 1);
  if (v8 >= 2) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unsigned int v13 = ((32 << (v12 + v10)) + 127) & 0xFFFFFF80;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v34 = 136315394;
    __int16 v35 = "get_pic_width_mem_tile";
    __int16 v36 = 1024;
    int v37 = 1195;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v34, 0x12u);
  }
  int v14 = 2 * v4 + 62;
  if (2 * v4 >= -31) {
    int v14 = 2 * v4 + 31;
  }
  unsigned int v15 = v14 >> 5;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v34 = 136315394;
    __int16 v35 = "get_pic_height_mem_tile";
    __int16 v36 = 1024;
    int v37 = 1212;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v34, 0x12u);
  }
  int v16 = v3 + 15;
  if (v3 < -15) {
    int v16 = v3 + 30;
  }
  unsigned int v17 = v16 >> 4;
  unsigned int v18 = 32 - __clz(v15 - 1);
  if (v15 < 2) {
    LOBYTE(v18) = 0;
  }
  unsigned int v19 = 32 - __clz(v17 - 1);
  if (v17 >= 2) {
    char v20 = v19;
  }
  else {
    char v20 = 0;
  }
  *((_DWORD *)this + 776) = v13;
  *((_DWORD *)this + 777) = ((8 << (v18 + v20)) + 127) & 0xFFFFFF80;
  unsigned int v21 = ((v3 + 63) >> 6) * ((v4 + 63) >> 6);
  *((_DWORD *)this + 781) = 576 * v21;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_31:
    uint64_t v26 = 0;
    char v27 = 1;
    do
    {
      char v28 = v27;
      uint64_t v29 = *((unsigned int *)this + 781);
      if (v29
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 176 * v26 + 5360), v29, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_50;
        }
        int v34 = 136315650;
        __int16 v35 = "allocWorkBuf_SPS";
        __int16 v36 = 1024;
        int v37 = 1316;
        __int16 v38 = 2080;
        uint64_t v39 = "MvColo";
        int v32 = &_os_log_internal;
        goto LABEL_49;
      }
      char v27 = 0;
      uint64_t v26 = 1;
    }
    while ((v28 & 1) != 0);
    unsigned int v30 = 24 * v21;
    *((_DWORD *)this + 785) = 24 * v21;
    uint64_t v31 = 3776;
    if (!v30) {
      goto LABEL_37;
    }
LABEL_36:
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v31), v30, 7, 1, 0))
    {
LABEL_37:
      while (v31 != 5008)
      {
        unsigned int v30 = *((_DWORD *)this + 785);
        v31 += 176;
        if (v30) {
          goto LABEL_36;
        }
      }
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_50;
    }
    int v34 = 136315650;
    __int16 v35 = "allocWorkBuf_SPS";
    __int16 v36 = 1024;
    int v37 = 1321;
    __int16 v38 = 2080;
    uint64_t v39 = "segMap";
    int v32 = &_os_log_internal;
  }
  else
  {
    uint64_t v22 = 14608;
    uint64_t v23 = 16;
    while (1)
    {
      uint64_t v24 = *((unsigned int *)this + 776);
      if (v24
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v22 - 2816), v24, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_50;
        }
        int v34 = 136315650;
        __int16 v35 = "allocWorkBuf_SPS";
        __int16 v36 = 1024;
        int v37 = 1300;
        __int16 v38 = 2080;
        uint64_t v39 = "HdrY";
        int v32 = &_os_log_internal;
        goto LABEL_49;
      }
      uint64_t v25 = *((unsigned int *)this + 777);
      if (v25)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v22), v25, 7, 1, 0))break; {
      }
        }
      v22 += 176;
      if (!--v23) {
        goto LABEL_31;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_50;
    }
    int v34 = 136315650;
    __int16 v35 = "allocWorkBuf_SPS";
    __int16 v36 = 1024;
    int v37 = 1305;
    __int16 v38 = 2080;
    uint64_t v39 = "HdrC";
    int v32 = &_os_log_internal;
  }
LABEL_49:
  _os_log_impl(&dword_223977000, v32, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v34, 0x1Cu);
LABEL_50:
  (*(void (**)(CAHDecLotusLgh *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecLotusLgh::allocWorkBuf_PPS(CAHDecLotusLgh *this, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = *(void *)(v5 + 17560);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 100);
  unsigned int v9 = (*(unsigned __int8 *)(v6 + 105) + 1) & 0x1FE;
  if (v7 == 3) {
    int v10 = 48;
  }
  else {
    int v10 = 32;
  }
  if (!v7) {
    int v10 = 16;
  }
  int v12 = *(_DWORD *)(v6 + 108);
  int v11 = *(_DWORD *)(v6 + 112);
  unsigned int v13 = (v12 + 15) >> 4;
  int v14 = ~(-1 << *(_DWORD *)(v6 + 96));
  signed int v15 = v13 * ((v10 * v9) >> 3) + (v14 << 7);
  if (v15)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 117, v15, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1395;
        __int16 v27 = 2080;
        char v28 = "IpAbove";
        int v16 = &_os_log_internal;
LABEL_34:
        _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  int v17 = 16 * v9;
  if ((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 != 192)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 128, (int)((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 - 192), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1398;
        __int16 v27 = 2080;
        char v28 = "LfAbovePix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
LABEL_35:
      (*(void (**)(CAHDecLotusLgh *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  signed int v18 = 288 * ((v12 + 63) >> 6) + (v14 << 7);
  if (v18)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 139, v18, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1404;
        __int16 v27 = 2080;
        char v28 = "LfAboveInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  unsigned int v19 = (v11 + 7) >> 3;
  if (v19 * v17)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 150, (int)(v19 * v17), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1410;
        __int16 v27 = 2080;
        char v28 = "LfLeftPix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  uint64_t v20 = ((v11 + 63) >> 2) & 0x3FFFFFF0;
  if (v20)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 161, v20, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1418;
        __int16 v27 = 2080;
        char v28 = "LfLeftInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 172, (int)(24 * v13 + 30), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 1426;
      __int16 v27 = 2080;
      char v28 = "SwLeftPix";
      int v16 = &_os_log_internal;
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  int v22 = 192 * v9 + (v19 + 2) * (((v9 >> 1) << 8) | 8);
  if (!v22) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 183, v22, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 1432;
    __int16 v27 = 2080;
    char v28 = "AZLeftPix";
    int v16 = &_os_log_internal;
    goto LABEL_34;
  }
  return result;
}

uint64_t CAHDecLotusLgh::freeWorkBuf_SPS(CAHDecLotusLgh *this)
{
  uint64_t result = *((void *)this + 32);
  if (!*(_DWORD *)(result + 2648))
  {
    uint64_t v3 = 14608;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = (uint64_t *)(result + v3 - 2816);
      if (*v5)
      {
        CAVDDecoder::deallocAVDMem(result, v5);
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3 - 2816) = 0;
      }
      if (*(void *)(result + v3))
      {
        CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + v3));
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3) = 0;
      }
      v3 += 176;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = result + 176 * v6;
    if (*(void *)(v9 + 5360))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(v9 + 5360));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + 176 * v6 + 5360) = 0;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  for (uint64_t i = 3776; i != 5184; i += 176)
  {
    if (*(void *)(result + i))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + i));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + i) = 0;
    }
  }
  return result;
}

uint64_t *CAHDecLotusLgh::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[256])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 256);
    v2[256] = 0;
  }
  if (v2[278])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 278);
    v2[278] = 0;
  }
  if (v2[234])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 234);
    v2[234] = 0;
  }
  if (v2[300])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 300);
    v2[300] = 0;
  }
  if (v2[322])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 322);
    v2[322] = 0;
  }
  if (v2[344])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 344);
    v2[344] = 0;
  }
  if (v2[366])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 366);
    v2[366] = 0;
  }
  return this;
}

uint64_t CAHDecLotusLgh::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 3120) = a2;
  return this;
}

uint64_t CAHDecLotusLgh::initPicture(CAHDecLotusLgh *this)
{
  return 0;
}

uint64_t CAHDecLotusLgh::populateSlices(CAHDecLotusLgh *this)
{
  return 0;
}

uint64_t CAHDecLotusLgh::getTileIdxAbove(CAHDecLotusLgh *this)
{
  return 0;
}

uint64_t CAHDecLotusLgh::decodeBuffer(CAHDecLotusLgh *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecLotusLgh::decodeBufferSize(CAHDecLotusLgh *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecLotusLgh::decHdrYLinAddr(CAHDecLotusLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 11792);
}

uint64_t CAHDecLotusLgh::decHdrCLinAddr(CAHDecLotusLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 14608);
}

uint64_t CAHDecLotusLgh::decHdrYSize(CAHDecLotusLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 11836);
}

uint64_t CAHDecLotusLgh::decHdrCSize(CAHDecLotusLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 14652);
}

uint64_t CAHDecLotusLgh::decHdrYStride(CAHDecLotusLgh *this)
{
  return *((unsigned int *)this + 778);
}

uint64_t CAHDecLotusLgh::decHdrCStride(CAHDecLotusLgh *this)
{
  return *((unsigned int *)this + 779);
}

void CAHDecLotusLgh::clearSegBuffer(CAHDecLotusLgh *this)
{
}

uint64_t InLoopChromaRows(uint64_t result, int a2, int a3, int a4, int a5)
{
  uint64_t v19 = result;
  if (a5 >= 51) {
    int v5 = 51;
  }
  else {
    int v5 = a5;
  }
  if (v5 <= 15) {
    int v5 = 15;
  }
  unsigned int v6 = v5 - 15;
  uint64_t v7 = kTable_8_11_tc[v6];
  if (kTable_8_11_tc[v6]) {
    BOOL v8 = a2 < 2;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = kTable_8_11_beta[v6];
    unint64_t v11 = a2 >> 1;
    uint64_t v12 = a4;
    uint64_t v17 = (a3 >> 1);
    unint64_t v18 = v11;
    uint64_t v13 = 4 * a4;
    uint64_t v14 = result + v13;
    do
    {
      if ((v9 | 4) < v11) {
        uint64_t result = InLoopChromaV(v19 + 2 * (v9 | 4), v12, v10, v7, v17);
      }
      v9 += 8;
      if (v9 < v11) {
        uint64_t result = InLoopChromaV(v19 + 2 * v9, v12, v10, v7, v17);
      }
      if (a3 >= 10)
      {
        uint64_t v15 = v14;
        uint64_t v16 = 4;
        do
        {
          uint64_t result = InLoopChromaH(v15, v12, v10, v7, 8);
          v16 += 4;
          v15 += v13;
        }
        while (v16 < (int)v17);
      }
      v14 += 16;
      unint64_t v11 = v18;
    }
    while (v9 < v18);
  }
  return result;
}

uint64_t FilterFunctionInit()
{
  InLoopChromaH = (uint64_t (*)(void, void, void, void, void))InLoopChromaH_neon;
  InLoopChromaV = (uint64_t (*)(void, void, void, void, void))InLoopChromaV_neon;
  return 0;
}

uint64_t InLoopChromaV_neon(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  if (a5 >= 8)
  {
    unsigned int v5 = a5 >> 3;
    int16x8_t v6 = vdupq_n_s16(a3);
    int16x8_t v174 = vshrq_n_s16(v6, 3uLL);
    int8x16_t v175 = (int8x16_t)vdupq_n_s16(a4);
    int16x8_t v173 = vshrq_n_s16(vsraq_n_s16(v6, v6, 1uLL), 3uLL);
    uint64_t v7 = (int8x16_t *)(result - 8);
    int16x8_t v170 = v6;
    do
    {
      int8x16_t v8 = *(int8x16_t *)((char *)v7 + a2);
      int8x16_t v9 = *(int8x16_t *)((char *)v7 + 2 * a2);
      int8x16_t v10 = *(int8x16_t *)((char *)v7 + 3 * a2);
      int8x16_t v11 = *(int8x16_t *)((char *)v7 + 4 * a2);
      int8x16_t v12 = *(int8x16_t *)((char *)v7 + 5 * a2);
      int8x16_t v13 = *(int8x16_t *)((char *)v7 + 6 * a2);
      int8x16_t v14 = *(int8x16_t *)((char *)v7 + 7 * a2);
      int16x8_t v15 = (int16x8_t)vtrn1q_s8(*v7, v8);
      int16x8_t v16 = (int16x8_t)vtrn1q_s8(v9, v10);
      int16x8_t v17 = (int16x8_t)vtrn1q_s8(v11, v12);
      int16x8_t v18 = (int16x8_t)vtrn1q_s8(v13, v14);
      int32x4_t v19 = (int32x4_t)vtrn1q_s16(v15, v16);
      int32x4_t v20 = (int32x4_t)vtrn2q_s16(v15, v16);
      int32x4_t v21 = (int32x4_t)vtrn1q_s16(v17, v18);
      int32x4_t v22 = (int32x4_t)vtrn2q_s16(v17, v18);
      int8x16_t v23 = (int8x16_t)vtrn1q_s32(v19, v21);
      int16x8_t v24 = (int16x8_t)vtrn2q_s32(v19, v21);
      int8x16_t v25 = (int8x16_t)vtrn1q_s32(v20, v22);
      int8x16_t v26 = (int8x16_t)vtrn2q_s32(v20, v22);
      uint8x8_t v27 = (uint8x8_t)vextq_s8(v23, v23, 8uLL).u64[0];
      uint8x8_t v28 = (uint8x8_t)vextq_s8(v25, v25, 8uLL).u64[0];
      int8x8_t v29 = (int8x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
      int16x8_t v30 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v26.i8);
      int16x8_t v31 = (int16x8_t)vshll_n_u8(*(uint8x8_t *)v24.i8, 1uLL);
      int16x8_t v32 = vabdq_s16(v30, v31);
      int16x8_t v33 = (int16x8_t)vaddl_high_u8((uint8x16_t)v24, (uint8x16_t)v23);
      int16x8_t v34 = (int16x8_t)vshll_high_n_u8((uint8x16_t)v25, 1uLL);
      int16x8_t v35 = vabdq_s16(v33, v34);
      int16x8_t v36 = vabaq_s16(vrev64q_s16(v32), v30, v31);
      int16x8_t v37 = vabaq_s16(vrev64q_s16(v35), v33, v34);
      *(int16x4_t *)v38.i8 = vdup_lane_s16(*(int16x4_t *)v36.i8, 0);
      v38.u64[1] = (unint64_t)vdup_laneq_s16(v36, 4);
      *(int16x4_t *)v40.i8 = vdup_lane_s16(*(int16x4_t *)v37.i8, 0);
      uint8x8_t v39 = (uint8x8_t)vextq_s8(v26, v26, 8uLL).u64[0];
      v40.u64[1] = (unint64_t)vdup_laneq_s16(v37, 4);
      int8x16_t v41 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v40, v38));
      int16x8_t v42 = vrshrq_n_s16(v6, 3uLL);
      if (vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)).u16[0])
      {
        uint8x8_t v43 = (uint8x8_t)v29;
        int16x8_t v44 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v24.i8);
        int16x8_t v45 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v26.i8);
        int16x8_t v46 = (int16x8_t)vmovl_u8(v28);
        int16x8_t v47 = (int16x8_t)vmovl_u8(v27);
        int16x8_t v48 = (int16x8_t)vandq_s8(v175, v41);
        int16x8_t v171 = v42;
        int16x8_t v49 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v48, vshlq_n_s16(v48, 2uLL)), (int16x8_t)vabdl_u8(*(uint8x8_t *)v26.i8, v27)), vandq_s8((int8x16_t)vcgtq_s16(v42, vaddq_s16(v35, v32)), (int8x16_t)vcgtq_s16(v174, (int16x8_t)vabal_u8(vabdl_u8(v39, v27), *(uint8x8_t *)v23.i8, *(uint8x8_t *)v26.i8))));
        int16x8_t v50 = (int16x8_t)vandq_s8((int8x16_t)vrev64q_s16(v49), (int8x16_t)v49);
        *(int16x4_t *)v51.i8 = vdup_lane_s16(*(int16x4_t *)v50.i8, 0);
        v51.u64[1] = (unint64_t)vdup_laneq_s16(v50, 4);
        int8x16_t v52 = (int8x16_t)vcgtq_s16(v173, v38);
        int8x16_t v53 = (int8x16_t)vcgtq_s16(v173, v40);
        if (vorr_s8(*(int8x8_t *)v50.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL)).u16[0])
        {
          int8x8_t v54 = vmovn_s16(v48);
          uint8x8_t v55 = (uint8x8_t)vadd_s8(v54, v54);
          int16x8_t v56 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v24.i8);
          int16x8_t v57 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v26.i8, v27);
          int16x8_t v58 = (int16x8_t)vaddl_high_u8((uint8x16_t)v25, (uint8x16_t)v24);
          uint8x8_t v176 = v39;
          int8x16_t v166 = v52;
          int16x8_t v59 = v47;
          int16x8_t v60 = v45;
          int8x8_t v61 = (int8x8_t)v43;
          int8x8_t v168 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v57, v44), vhadd_u8(*(uint8x8_t *)v25.i8, v28)), 2uLL), vqadd_u8(*(uint8x8_t *)v26.i8, v55)), vqsub_u8(*(uint8x8_t *)v26.i8, v55));
          int8x8_t v62 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v57, v46), vhadd_u8(v43, *(uint8x8_t *)v24.i8)), 2uLL), vqadd_u8(v27, v55)), vqsub_u8(v27, v55));
          int8x8_t v63 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v56, v57), 2uLL), vqadd_u8(*(uint8x8_t *)v24.i8, v55)), vqsub_u8(*(uint8x8_t *)v24.i8, v55));
          int8x8_t v64 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v58, v57), 2uLL), vqadd_u8(v28, v55)), vqsub_u8(v28, v55));
          *(uint8x8_t *)v56.i8 = vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)v25.i8), (int16x8_t)vhaddq_u16((uint16x8_t)v56, (uint16x8_t)v57)), 2uLL), vqadd_u8(*(uint8x8_t *)v25.i8, v55)), vqsub_u8(*(uint8x8_t *)v25.i8, v55));
          int8x8_t v65 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_high_u8((uint8x16_t)v24, (uint8x16_t)v26), (int16x8_t)vhaddq_u16((uint16x8_t)v58, (uint16x8_t)v57)), 2uLL), vqadd_u8(v43, v55)), vqsub_u8(v43, v55));
          int16x8_t v66 = (int16x8_t)vbicq_s8((int8x16_t)v48, (int8x16_t)v51);
          v67.i64[0] = 0x9000900090009;
          v67.i64[1] = 0x9000900090009;
          int16x8_t v68 = vmulq_s16((int16x8_t)vsubl_u8(v27, *(uint8x8_t *)v26.i8), v67);
          v67.i64[0] = 0x2000200020002;
          v67.i64[1] = 0x2000200020002;
          int16x8_t v69 = vrshrq_n_s16(vmlaq_s16(v68, (int16x8_t)vsubl_u8(v28, *(uint8x8_t *)v24.i8), v67), 4uLL);
          v67.i64[0] = 0xA000A000A000ALL;
          v67.i64[1] = 0xA000A000A000ALL;
          int8x16_t v70 = (int8x16_t)vcgtq_s16(vmulq_s16(v66, v67), vabsq_s16(v69));
          int16x8_t v71 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v69, v70), v66), vnegq_s16(v66));
          int16x8_t v72 = vshrq_n_s16(v66, 1uLL);
          int16x8_t v73 = vnegq_s16(v72);
          int16x8_t v24 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v26.i8), *(uint8x8_t *)v24.i8), v71), v72), v73), vandq_s8(v166, v70)), v44);
          int16x8_t v74 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v61, v27), v28), v71), v72), v73), vandq_s8(v53, v70)), v46);
          *(int8x8_t *)v67.i8 = vqmovn_s16(v51);
          *(int8x8_t *)v25.i8 = vbsl_s8(*(int8x8_t *)v67.i8, *(int8x8_t *)v56.i8, *(int8x8_t *)v25.i8);
          *(int8x8_t *)v24.i8 = vbsl_s8(*(int8x8_t *)v67.i8, v63, vqmovun_s16(v24));
          int16x8_t v6 = v170;
          *(int8x8_t *)v26.i8 = vbsl_s8(*(int8x8_t *)v67.i8, v168, vqmovun_s16(vaddq_s16(v71, v60)));
          uint8x8_t v27 = (uint8x8_t)vbsl_s8(*(int8x8_t *)v67.i8, v62, vqmovun_s16(vsubq_s16(v59, v71)));
          uint8x8_t v28 = (uint8x8_t)vbsl_s8(*(int8x8_t *)v67.i8, v64, vqmovun_s16(v74));
          int8x8_t v29 = vbsl_s8(*(int8x8_t *)v67.i8, v65, v61);
          uint8x8_t v39 = v176;
        }
        else
        {
          int16x8_t v75 = (int16x8_t)vbicq_s8((int8x16_t)v48, (int8x16_t)v51);
          v76.i64[0] = 0x2000200020002;
          v76.i64[1] = 0x2000200020002;
          int16x8_t v77 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v27, (uint8x8_t)0x909090909090909), *(uint8x8_t *)v26.i8, (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8(v28, *(uint8x8_t *)v24.i8), v76), 4uLL);
          v76.i64[0] = 0xA000A000A000ALL;
          v76.i64[1] = 0xA000A000A000ALL;
          int8x16_t v78 = (int8x16_t)vcgtq_s16(vmulq_s16(v75, v76), vabsq_s16(v77));
          int16x8_t v79 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v77, v78), v75), vnegq_s16(v75));
          int16x8_t v80 = vaddq_s16(v79, v45);
          int16x8_t v81 = vshrq_n_s16(v75, 1uLL);
          int16x8_t v82 = vnegq_s16(v81);
          int16x8_t v83 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v26.i8), *(uint8x8_t *)v24.i8), v79), v81), v82), vandq_s8(v52, v78)), v44);
          int8x8_t v29 = (int8x8_t)v43;
          int16x8_t v84 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8(v43, v27), v28), v79), v81), v82), vandq_s8(v53, v78)), v46);
          *(int8x8_t *)v24.i8 = vqmovun_s16(v83);
          *(int8x8_t *)v26.i8 = vqmovun_s16(v80);
          uint8x8_t v27 = (uint8x8_t)vqmovun_s16(vsubq_s16(v47, v79));
          uint8x8_t v28 = (uint8x8_t)vqmovun_s16(v84);
        }
        int16x8_t v42 = v171;
      }
      int16x8_t v85 = (int16x8_t)vtrn2q_s8(*v7, v8);
      int16x8_t v86 = (int16x8_t)vtrn2q_s8(v9, v10);
      int16x8_t v87 = (int16x8_t)vtrn2q_s8(v11, v12);
      int16x8_t v88 = (int16x8_t)vtrn2q_s8(v13, v14);
      int32x4_t v89 = (int32x4_t)vtrn1q_s16(v85, v86);
      int32x4_t v90 = (int32x4_t)vtrn2q_s16(v85, v86);
      int32x4_t v91 = (int32x4_t)vtrn1q_s16(v87, v88);
      int32x4_t v92 = (int32x4_t)vtrn2q_s16(v87, v88);
      int8x16_t v93 = (int8x16_t)vtrn1q_s32(v89, v91);
      int16x8_t v94 = (int16x8_t)vtrn2q_s32(v89, v91);
      int8x16_t v95 = (int8x16_t)vtrn1q_s32(v90, v92);
      int8x16_t v96 = (int8x16_t)vtrn2q_s32(v90, v92);
      uint8x8_t v97 = (uint8x8_t)vextq_s8(v93, v93, 8uLL).u64[0];
      uint8x8_t v98 = (uint8x8_t)vextq_s8(v95, v95, 8uLL).u64[0];
      int8x8_t v99 = (int8x8_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
      uint8x8_t v100 = (uint8x8_t)vextq_s8(v96, v96, 8uLL).u64[0];
      int16x8_t v101 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v95.i8, *(uint8x8_t *)v96.i8);
      int16x8_t v102 = (int16x8_t)vshll_n_u8(*(uint8x8_t *)v94.i8, 1uLL);
      int16x8_t v103 = vabdq_s16(v101, v102);
      int16x8_t v104 = (int16x8_t)vaddl_high_u8((uint8x16_t)v94, (uint8x16_t)v93);
      int16x8_t v105 = (int16x8_t)vshll_high_n_u8((uint8x16_t)v95, 1uLL);
      int16x8_t v106 = vabdq_s16(v104, v105);
      int16x8_t v107 = vabaq_s16(vrev64q_s16(v103), v101, v102);
      int16x8_t v108 = vabaq_s16(vrev64q_s16(v106), v104, v105);
      *(int16x4_t *)v109.i8 = vdup_lane_s16(*(int16x4_t *)v107.i8, 0);
      v109.u64[1] = (unint64_t)vdup_laneq_s16(v107, 4);
      *(int16x4_t *)v110.i8 = vdup_lane_s16(*(int16x4_t *)v108.i8, 0);
      v110.u64[1] = (unint64_t)vdup_laneq_s16(v108, 4);
      int8x16_t v111 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v110, v109));
      if (vorr_s8(*(int8x8_t *)v111.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL)).u16[0])
      {
        int8x8_t v172 = v29;
        int16x8_t v112 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v94.i8);
        int16x8_t v113 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v96.i8);
        int16x8_t v114 = (int16x8_t)vmovl_u8(v98);
        int16x8_t v115 = (int16x8_t)vmovl_u8(v97);
        int16x8_t v116 = (int16x8_t)vandq_s8(v175, v111);
        int16x8_t v117 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v116, vshlq_n_s16(v116, 2uLL)), (int16x8_t)vabdl_u8(*(uint8x8_t *)v96.i8, v97)), vandq_s8((int8x16_t)vcgtq_s16(v42, vaddq_s16(v106, v103)), (int8x16_t)vcgtq_s16(v174, (int16x8_t)vabal_u8(vabdl_u8(v100, v97), *(uint8x8_t *)v93.i8, *(uint8x8_t *)v96.i8))));
        int16x8_t v118 = (int16x8_t)vandq_s8((int8x16_t)vrev64q_s16(v117), (int8x16_t)v117);
        *(int16x4_t *)v119.i8 = vdup_lane_s16(*(int16x4_t *)v118.i8, 0);
        v119.u64[1] = (unint64_t)vdup_laneq_s16(v118, 4);
        int8x16_t v120 = (int8x16_t)vcgtq_s16(v173, v109);
        int8x16_t v121 = (int8x16_t)vcgtq_s16(v173, v110);
        if (vorr_s8(*(int8x8_t *)v118.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL)).u16[0])
        {
          int8x8_t v122 = vmovn_s16(v116);
          uint8x8_t v123 = (uint8x8_t)vadd_s8(v122, v122);
          int16x8_t v124 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v95.i8, *(uint8x8_t *)v94.i8);
          int16x8_t v125 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v96.i8, v97);
          int16x8_t v126 = (int16x8_t)vaddl_high_u8((uint8x16_t)v95, (uint8x16_t)v94);
          uint8x8_t v177 = v39;
          int8x16_t v167 = v121;
          int8x8_t v169 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v125, v112), vhadd_u8(*(uint8x8_t *)v95.i8, v98)), 2uLL), vqadd_u8(*(uint8x8_t *)v96.i8, v123)), vqsub_u8(*(uint8x8_t *)v96.i8, v123));
          int8x8_t v127 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v125, v114), vhadd_u8((uint8x8_t)v99, *(uint8x8_t *)v94.i8)), 2uLL), vqadd_u8(v97, v123)), vqsub_u8(v97, v123));
          int8x8_t v128 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v124, v125), 2uLL), vqadd_u8(*(uint8x8_t *)v94.i8, v123)), vqsub_u8(*(uint8x8_t *)v94.i8, v123));
          int8x8_t v129 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v126, v125), 2uLL), vqadd_u8(v98, v123)), vqsub_u8(v98, v123));
          int8x8_t v130 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v93.i8, *(uint8x8_t *)v95.i8), (int16x8_t)vhaddq_u16((uint16x8_t)v124, (uint16x8_t)v125)), 2uLL), vqadd_u8(*(uint8x8_t *)v95.i8, v123)), vqsub_u8(*(uint8x8_t *)v95.i8, v123));
          int8x8_t v131 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_high_u8((uint8x16_t)v94, (uint8x16_t)v96), (int16x8_t)vhaddq_u16((uint16x8_t)v126, (uint16x8_t)v125)), 2uLL), vqadd_u8((uint8x8_t)v99, v123)), vqsub_u8((uint8x8_t)v99, v123));
          int16x8_t v132 = (int16x8_t)vbicq_s8((int8x16_t)v116, (int8x16_t)v119);
          v133.i64[0] = 0x9000900090009;
          v133.i64[1] = 0x9000900090009;
          int16x8_t v134 = vmulq_s16((int16x8_t)vsubl_u8(v97, *(uint8x8_t *)v96.i8), v133);
          v133.i64[0] = 0x2000200020002;
          v133.i64[1] = 0x2000200020002;
          int16x8_t v135 = vrshrq_n_s16(vmlaq_s16(v134, (int16x8_t)vsubl_u8(v98, *(uint8x8_t *)v94.i8), v133), 4uLL);
          v133.i64[0] = 0xA000A000A000ALL;
          v133.i64[1] = 0xA000A000A000ALL;
          int8x16_t v136 = (int8x16_t)vcgtq_s16(vmulq_s16(v132, v133), vabsq_s16(v135));
          int16x8_t v137 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v135, v136), v132), vnegq_s16(v132));
          int16x8_t v138 = vshrq_n_s16(v132, 1uLL);
          int16x8_t v139 = vnegq_s16(v138);
          int16x8_t v94 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v95.i8, *(uint8x8_t *)v96.i8), *(uint8x8_t *)v94.i8), v137), v138), v139), vandq_s8(v120, v136)), v112);
          int16x8_t v140 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v99, v97), v98), v137), v138), v139), vandq_s8(v167, v136)), v114);
          *(int8x8_t *)v133.i8 = vqmovn_s16(v119);
          *(int8x8_t *)v95.i8 = vbsl_s8(*(int8x8_t *)v133.i8, v130, *(int8x8_t *)v95.i8);
          *(int8x8_t *)v94.i8 = vbsl_s8(*(int8x8_t *)v133.i8, v128, vqmovun_s16(v94));
          int16x8_t v6 = v170;
          *(int8x8_t *)v96.i8 = vbsl_s8(*(int8x8_t *)v133.i8, v169, vqmovun_s16(vaddq_s16(v137, v113)));
          uint8x8_t v97 = (uint8x8_t)vbsl_s8(*(int8x8_t *)v133.i8, v127, vqmovun_s16(vsubq_s16(v115, v137)));
          uint8x8_t v98 = (uint8x8_t)vbsl_s8(*(int8x8_t *)v133.i8, v129, vqmovun_s16(v140));
          int8x8_t v99 = vbsl_s8(*(int8x8_t *)v133.i8, v131, v99);
          uint8x8_t v39 = v177;
        }
        else
        {
          int16x8_t v141 = (int16x8_t)vbicq_s8((int8x16_t)v116, (int8x16_t)v119);
          v142.i64[0] = 0x2000200020002;
          v142.i64[1] = 0x2000200020002;
          int16x8_t v143 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v97, (uint8x8_t)0x909090909090909), *(uint8x8_t *)v96.i8, (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8(v98, *(uint8x8_t *)v94.i8), v142), 4uLL);
          v142.i64[0] = 0xA000A000A000ALL;
          v142.i64[1] = 0xA000A000A000ALL;
          int8x16_t v144 = (int8x16_t)vcgtq_s16(vmulq_s16(v141, v142), vabsq_s16(v143));
          int16x8_t v145 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v143, v144), v141), vnegq_s16(v141));
          int16x8_t v146 = vshrq_n_s16(v141, 1uLL);
          int16x8_t v147 = vnegq_s16(v146);
          int16x8_t v148 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v95.i8, *(uint8x8_t *)v96.i8), *(uint8x8_t *)v94.i8), v145), v146), v147), vandq_s8(v120, v144)), v112);
          int16x8_t v149 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v99, v97), v98), v145), v146), v147), vandq_s8(v121, v144)), v114);
          *(int8x8_t *)v94.i8 = vqmovun_s16(v148);
          *(int8x8_t *)v96.i8 = vqmovun_s16(vaddq_s16(v145, v113));
          uint8x8_t v97 = (uint8x8_t)vqmovun_s16(vsubq_s16(v115, v145));
          uint8x8_t v98 = (uint8x8_t)vqmovun_s16(v149);
        }
        int8x8_t v29 = v172;
      }
      v23.u64[1] = (unint64_t)v27;
      v25.u64[1] = (unint64_t)v28;
      v24.u64[1] = (unint64_t)v29;
      v26.u64[1] = (unint64_t)v39;
      v93.u64[1] = (unint64_t)v97;
      v95.u64[1] = (unint64_t)v98;
      v94.u64[1] = (unint64_t)v99;
      v96.u64[1] = (unint64_t)v100;
      int16x8_t v150 = (int16x8_t)vtrn1q_s8(v23, v93);
      int16x8_t v151 = (int16x8_t)vtrn2q_s8(v23, v93);
      int16x8_t v152 = (int16x8_t)vtrn1q_s8(v25, v95);
      int16x8_t v153 = (int16x8_t)vtrn2q_s8(v25, v95);
      int16x8_t v154 = (int16x8_t)vtrn1q_s8((int8x16_t)v24, (int8x16_t)v94);
      int16x8_t v155 = (int16x8_t)vtrn2q_s8((int8x16_t)v24, (int8x16_t)v94);
      int16x8_t v156 = (int16x8_t)vtrn1q_s8(v26, v96);
      int16x8_t v157 = (int16x8_t)vtrn2q_s8(v26, v96);
      int32x4_t v158 = (int32x4_t)vtrn1q_s16(v150, v152);
      int32x4_t v159 = (int32x4_t)vtrn2q_s16(v150, v152);
      int32x4_t v160 = (int32x4_t)vtrn1q_s16(v151, v153);
      int32x4_t v161 = (int32x4_t)vtrn2q_s16(v151, v153);
      int32x4_t v162 = (int32x4_t)vtrn1q_s16(v154, v156);
      int32x4_t v163 = (int32x4_t)vtrn2q_s16(v154, v156);
      int32x4_t v164 = (int32x4_t)vtrn1q_s16(v155, v157);
      int32x4_t v165 = (int32x4_t)vtrn2q_s16(v155, v157);
      *(int32x4_t *)uint64_t v7 = vtrn1q_s32(v158, v162);
      *(int32x4_t *)((char *)v7 + a2) = vtrn1q_s32(v160, v164);
      *(int32x4_t *)((char *)v7 + 2 * a2) = vtrn1q_s32(v159, v163);
      *(int32x4_t *)((char *)v7 + 3 * a2) = vtrn1q_s32(v161, v165);
      *(int32x4_t *)((char *)v7 + 4 * a2) = vtrn2q_s32(v158, v162);
      *(int32x4_t *)((char *)v7 + 5 * a2) = vtrn2q_s32(v160, v164);
      *(int32x4_t *)((char *)v7 + 6 * a2) = vtrn2q_s32(v159, v163);
      *(int32x4_t *)((char *)v7 + 7 * a2) = vtrn2q_s32(v161, v165);
      uint64_t v7 = (int8x16_t *)((char *)v7 + 8 * a2);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t InLoopChromaH_neon(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  if (a5 >= 8)
  {
    int16x8_t v5 = vdupq_n_s16(a3);
    unsigned int v6 = a5 >> 3;
    int16x8_t v148 = vshrq_n_s16(v5, 3uLL);
    int8x16_t v149 = (int8x16_t)vdupq_n_s16(a4);
    int16x8_t v147 = vshrq_n_s16(vsraq_n_s16(v5, v5, 1uLL), 3uLL);
    uint64_t v7 = (const char *)(result - 4 * a2);
    int16x8_t v141 = v5;
    while (1)
    {
      int8x16_t v8 = v7;
      int8x8x2_t v154 = vld2_s8(v8);
      int8x16_t v9 = &v8[a2];
      int8x8x2_t v157 = vld2_s8(v9);
      int8x16_t v10 = &v9[a2];
      int8x8x2_t v160 = vld2_s8(v10);
      int8x16_t v11 = &v10[a2];
      int16x8_t v12 = (int16x8_t)vshll_n_u8((uint8x8_t)v160.val[0], 1uLL);
      int8x8x2_t v161 = vld2_s8(v11);
      int8x16_t v13 = &v11[a2];
      int16x8_t v14 = (int16x8_t)vaddl_u8((uint8x8_t)v161.val[0], (uint8x8_t)v157.val[0]);
      int16x8_t v15 = vabdq_s16(v14, v12);
      int8x8x2_t v159 = vld2_s8(v13);
      int16x8_t v16 = &v13[a2];
      int8x8x2_t v158 = vld2_s8(v16);
      int16x8_t v17 = &v16[a2];
      int16x8_t v18 = (int16x8_t)vshll_n_u8((uint8x8_t)v158.val[0], 1uLL);
      int8x8x2_t v156 = vld2_s8(v17);
      int32x4_t v19 = &v17[a2];
      int16x8_t v20 = (int16x8_t)vaddl_u8((uint8x8_t)v156.val[0], (uint8x8_t)v159.val[0]);
      int16x8_t v21 = vabdq_s16(v20, v18);
      int8x8x2_t v155 = vld2_s8(v19);
      int16x8_t v22 = vabaq_s16(vrev64q_s16(v15), v14, v12);
      int16x8_t v23 = vabaq_s16(vrev64q_s16(v21), v20, v18);
      *(int16x4_t *)v24.i8 = vdup_lane_s16(*(int16x4_t *)v22.i8, 0);
      v24.u64[1] = (unint64_t)vdup_laneq_s16(v22, 4);
      *(int16x4_t *)v25.i8 = vdup_lane_s16(*(int16x4_t *)v23.i8, 0);
      v25.u64[1] = (unint64_t)vdup_laneq_s16(v23, 4);
      int8x16_t v26 = (int8x16_t)vcgtq_s16(v5, vaddq_s16(v25, v24));
      int16x8_t v27 = vrshrq_n_s16(v5, 3uLL);
      uint8x8_t v151 = (uint8x8_t)v154.val[1];
      if (!vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)).u16[0]) {
        break;
      }
      int16x8_t v28 = (int16x8_t)vmovl_u8((uint8x8_t)v160.val[0]);
      int16x8_t v29 = (int16x8_t)vmovl_u8((uint8x8_t)v161.val[0]);
      int16x8_t v30 = (int16x8_t)vmovl_u8((uint8x8_t)v158.val[0]);
      int16x8_t v31 = (int16x8_t)vmovl_u8((uint8x8_t)v159.val[0]);
      int16x8_t v32 = (int16x8_t)vandq_s8(v149, v26);
      int16x8_t v33 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v32, vshlq_n_s16(v32, 2uLL)), (int16x8_t)vabdl_u8((uint8x8_t)v161.val[0], (uint8x8_t)v159.val[0])), vandq_s8((int8x16_t)vcgtq_s16(v27, vaddq_s16(v21, v15)), (int8x16_t)vcgtq_s16(v148, (int16x8_t)vabal_u8(vabdl_u8((uint8x8_t)v155.val[0], (uint8x8_t)v159.val[0]), (uint8x8_t)v154.val[0], (uint8x8_t)v161.val[0]))));
      int16x8_t v34 = (int16x8_t)vandq_s8((int8x16_t)vrev64q_s16(v33), (int8x16_t)v33);
      *(int16x4_t *)v35.i8 = vdup_lane_s16(*(int16x4_t *)v34.i8, 0);
      v35.u64[1] = (unint64_t)vdup_laneq_s16(v34, 4);
      int8x16_t v36 = (int8x16_t)vcgtq_s16(v147, v24);
      int8x16_t v37 = (int8x16_t)vcgtq_s16(v147, v25);
      if (!vorr_s8(*(int8x8_t *)v34.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL)).u16[0])
      {
        int16x8_t v68 = (int16x8_t)vbicq_s8((int8x16_t)v32, (int8x16_t)v35);
        v69.i64[0] = 0x2000200020002;
        v69.i64[1] = 0x2000200020002;
        int16x8_t v70 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8((uint8x8_t)v159.val[0], (uint8x8_t)0x909090909090909), (uint8x8_t)v161.val[0], (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8((uint8x8_t)v158.val[0], (uint8x8_t)v160.val[0]), v69), 4uLL);
        v69.i64[0] = 0xA000A000A000ALL;
        v69.i64[1] = 0xA000A000A000ALL;
        int8x16_t v71 = (int8x16_t)vcgtq_s16(vmulq_s16(v68, v69), vabsq_s16(v70));
        int16x8_t v72 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v70, v71), v68), vnegq_s16(v68));
        int16x8_t v73 = vshrq_n_s16(v68, 1uLL);
        int16x8_t v74 = vnegq_s16(v73);
        int8x8_t v64 = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v157.val[0], (uint8x8_t)v161.val[0]), (uint8x8_t)v160.val[0]), v72), v73), v74), vandq_s8(v36, v71)), v28));
        int8x8_t v152 = vqmovun_s16(vaddq_s16(v72, v29));
        int8x8_t v65 = vqmovun_s16(vsubq_s16(v31, v72));
        int8x8_t v66 = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v156.val[0], (uint8x8_t)v159.val[0]), (uint8x8_t)v158.val[0]), v72), v73), v74), vandq_s8(v37, v71)), v30));
        int8x8_t v63 = v157.val[0];
        goto LABEL_8;
      }
      int8x8_t v38 = vmovn_s16(v32);
      uint8x8_t v39 = (uint8x8_t)vadd_s8(v38, v38);
      int16x8_t v145 = v27;
      int16x8_t v40 = (int16x8_t)vaddl_u8((uint8x8_t)v157.val[0], (uint8x8_t)v154.val[0]);
      int16x8_t v41 = (int16x8_t)vaddl_u8((uint8x8_t)v160.val[0], (uint8x8_t)v157.val[0]);
      int16x8_t v42 = (int16x8_t)vaddl_u8((uint8x8_t)v159.val[0], (uint8x8_t)v161.val[0]);
      int16x8_t v43 = (int16x8_t)vaddl_u8((uint8x8_t)v156.val[0], (uint8x8_t)v158.val[0]);
      int8x8_t v44 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v42, v28), vhadd_u8((uint8x8_t)v157.val[0], (uint8x8_t)v158.val[0])), 2uLL), vqadd_u8((uint8x8_t)v161.val[0], v39)), vqsub_u8((uint8x8_t)v161.val[0], v39));
      int8x8_t v45 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v42, v30), vhadd_u8((uint8x8_t)v156.val[0], (uint8x8_t)v160.val[0])), 2uLL), vqadd_u8((uint8x8_t)v159.val[0], v39)), vqsub_u8((uint8x8_t)v159.val[0], v39));
      int8x8_t v46 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v42, v41), 2uLL), vqadd_u8((uint8x8_t)v160.val[0], v39)), vqsub_u8((uint8x8_t)v160.val[0], v39));
      int8x8_t v47 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v43, v42), 2uLL), vqadd_u8((uint8x8_t)v158.val[0], v39)), vqsub_u8((uint8x8_t)v158.val[0], v39));
      *(uint8x8_t *)v40.i8 = vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v40, (int16x8_t)vhaddq_u16((uint16x8_t)v41, (uint16x8_t)v42)), 2uLL), vqadd_u8((uint8x8_t)v157.val[0], v39)), vqsub_u8((uint8x8_t)v157.val[0], v39));
      int8x8_t v48 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v155.val[0], (uint8x8_t)v156.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v43, (uint16x8_t)v42)), 2uLL), vqadd_u8((uint8x8_t)v156.val[0], v39)), vqsub_u8((uint8x8_t)v156.val[0], v39));
      int16x8_t v49 = (int16x8_t)vbicq_s8((int8x16_t)v32, (int8x16_t)v35);
      v50.i64[0] = 0x9000900090009;
      v50.i64[1] = 0x9000900090009;
      int16x8_t v51 = vmulq_s16((int16x8_t)vsubl_u8((uint8x8_t)v159.val[0], (uint8x8_t)v161.val[0]), v50);
      v50.i64[0] = 0x2000200020002;
      v50.i64[1] = 0x2000200020002;
      int16x8_t v52 = vrshrq_n_s16(vmlaq_s16(v51, (int16x8_t)vsubl_u8((uint8x8_t)v158.val[0], (uint8x8_t)v160.val[0]), v50), 4uLL);
      v50.i64[0] = 0xA000A000A000ALL;
      v50.i64[1] = 0xA000A000A000ALL;
      int8x16_t v53 = (int8x16_t)vcgtq_s16(vmulq_s16(v49, v50), vabsq_s16(v52));
      int16x8_t v54 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v52, v53), v49), vnegq_s16(v49));
      int16x8_t v55 = vshrq_n_s16(v49, 1uLL);
      int16x8_t v56 = vnegq_s16(v55);
      int16x8_t v57 = vaddq_s16(v54, v29);
      int16x8_t v58 = vsubq_s16(v31, v54);
      int16x8_t v59 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v157.val[0], (uint8x8_t)v161.val[0]), (uint8x8_t)v160.val[0]), v54), v55), v56), vandq_s8(v36, v53)), v28);
      int16x8_t v60 = vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v156.val[0], (uint8x8_t)v159.val[0]), (uint8x8_t)v158.val[0]), v54);
      int16x8_t v5 = v141;
      int16x8_t v61 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(v60, v55), v56), vandq_s8(v37, v53)), v30);
      int8x8_t v62 = vqmovn_s16(v35);
      int8x8_t v63 = vbsl_s8(v62, *(int8x8_t *)v40.i8, v157.val[0]);
      int8x8_t v64 = vbsl_s8(v62, v46, vqmovun_s16(v59));
      int8x8_t v152 = vbsl_s8(v62, v44, vqmovun_s16(v57));
      int16x8_t v27 = v145;
      int8x8_t v65 = vbsl_s8(v62, v45, vqmovun_s16(v58));
      int8x8_t v66 = vbsl_s8(v62, v47, vqmovun_s16(v61));
      int8x8_t v67 = vbsl_s8(v62, v48, v156.val[0]);
LABEL_9:
      int16x8_t v75 = (int16x8_t)vaddl_u8((uint8x8_t)v161.val[1], (uint8x8_t)v157.val[1]);
      int16x8_t v76 = (int16x8_t)vshll_n_u8((uint8x8_t)v160.val[1], 1uLL);
      int16x8_t v77 = vabdq_s16(v75, v76);
      int16x8_t v78 = (int16x8_t)vaddl_u8((uint8x8_t)v156.val[1], (uint8x8_t)v159.val[1]);
      int16x8_t v79 = (int16x8_t)vshll_n_u8((uint8x8_t)v158.val[1], 1uLL);
      int16x8_t v80 = vabdq_s16(v78, v79);
      int16x8_t v81 = vabaq_s16(vrev64q_s16(v77), v75, v76);
      int16x8_t v82 = vabaq_s16(vrev64q_s16(v80), v78, v79);
      *(int16x4_t *)v83.i8 = vdup_lane_s16(*(int16x4_t *)v81.i8, 0);
      v83.u64[1] = (unint64_t)vdup_laneq_s16(v81, 4);
      *(int16x4_t *)v84.i8 = vdup_lane_s16(*(int16x4_t *)v82.i8, 0);
      v84.u64[1] = (unint64_t)vdup_laneq_s16(v82, 4);
      int8x16_t v85 = (int8x16_t)vcgtq_s16(v5, vaddq_s16(v84, v83));
      if (vorr_s8(*(int8x8_t *)v85.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL)).u16[0])
      {
        int8x8_t v146 = v66;
        int16x8_t v86 = (int16x8_t)vmovl_u8((uint8x8_t)v160.val[1]);
        int16x8_t v143 = (int16x8_t)vmovl_u8((uint8x8_t)v161.val[1]);
        int16x8_t v144 = (int16x8_t)vmovl_u8((uint8x8_t)v158.val[1]);
        int16x8_t v142 = (int16x8_t)vmovl_u8((uint8x8_t)v159.val[1]);
        int16x8_t v87 = (int16x8_t)vandq_s8(v149, v85);
        int16x8_t v88 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v87, vshlq_n_s16(v87, 2uLL)), (int16x8_t)vabdl_u8((uint8x8_t)v161.val[1], (uint8x8_t)v159.val[1])), vandq_s8((int8x16_t)vcgtq_s16(v27, vaddq_s16(v80, v77)), (int8x16_t)vcgtq_s16(v148, (int16x8_t)vabal_u8(vabdl_u8((uint8x8_t)v155.val[1], (uint8x8_t)v159.val[1]), v151, (uint8x8_t)v161.val[1]))));
        int16x8_t v89 = (int16x8_t)vandq_s8((int8x16_t)vrev64q_s16(v88), (int8x16_t)v88);
        *(int16x4_t *)v90.i8 = vdup_lane_s16(*(int16x4_t *)v89.i8, 0);
        v90.u64[1] = (unint64_t)vdup_laneq_s16(v89, 4);
        int16x8_t v91 = vcgtq_s16(v147, v83);
        int8x16_t v92 = (int8x16_t)vcgtq_s16(v147, v84);
        if (vorr_s8(*(int8x8_t *)v89.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL)).u16[0])
        {
          int8x8_t v93 = vmovn_s16(v87);
          uint8x8_t v94 = (uint8x8_t)vadd_s8(v93, v93);
          int16x8_t v95 = (int16x8_t)vaddl_u8((uint8x8_t)v157.val[1], v151);
          int8x16_t v150 = v92;
          int16x8_t v96 = (int16x8_t)vaddl_u8((uint8x8_t)v160.val[1], (uint8x8_t)v157.val[1]);
          int16x8_t v97 = (int16x8_t)vaddl_u8((uint8x8_t)v159.val[1], (uint8x8_t)v161.val[1]);
          int8x16_t v140 = (int8x16_t)v91;
          int16x8_t v98 = (int16x8_t)vaddl_u8((uint8x8_t)v156.val[1], (uint8x8_t)v158.val[1]);
          int8x8_t v99 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v97, v86), vhadd_u8((uint8x8_t)v157.val[1], (uint8x8_t)v158.val[1])), 2uLL), vqadd_u8((uint8x8_t)v161.val[1], v94)), vqsub_u8((uint8x8_t)v161.val[1], v94));
          int8x8_t v100 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v97, v144), vhadd_u8((uint8x8_t)v156.val[1], (uint8x8_t)v160.val[1])), 2uLL), vqadd_u8((uint8x8_t)v159.val[1], v94)), vqsub_u8((uint8x8_t)v159.val[1], v94));
          int8x8_t v101 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v97, v96), 2uLL), vqadd_u8((uint8x8_t)v160.val[1], v94)), vqsub_u8((uint8x8_t)v160.val[1], v94));
          int8x8_t v102 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v98, v97), 2uLL), vqadd_u8((uint8x8_t)v158.val[1], v94)), vqsub_u8((uint8x8_t)v158.val[1], v94));
          int16x8_t v5 = v141;
          *(uint8x8_t *)v95.i8 = vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v95, (int16x8_t)vhaddq_u16((uint16x8_t)v96, (uint16x8_t)v97)), 2uLL), vqadd_u8((uint8x8_t)v157.val[1], v94)), vqsub_u8((uint8x8_t)v157.val[1], v94));
          *(uint8x8_t *)v98.i8 = vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v155.val[1], (uint8x8_t)v156.val[1]), (int16x8_t)vhaddq_u16((uint16x8_t)v98, (uint16x8_t)v97)), 2uLL), vqadd_u8((uint8x8_t)v156.val[1], v94)), vqsub_u8((uint8x8_t)v156.val[1], v94));
          int16x8_t v103 = (int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v157.val[1], (uint8x8_t)v161.val[1]), (uint8x8_t)v160.val[1]);
          int16x8_t v104 = (int16x8_t)vsubl_u8((uint8x8_t)v158.val[1], (uint8x8_t)v160.val[1]);
          v105.i64[0] = 0x9000900090009;
          v105.i64[1] = 0x9000900090009;
          int16x8_t v106 = vmulq_s16((int16x8_t)vsubl_u8((uint8x8_t)v159.val[1], (uint8x8_t)v161.val[1]), v105);
          v105.i64[0] = 0x2000200020002;
          v105.i64[1] = 0x2000200020002;
          int16x8_t v107 = (int16x8_t)vbicq_s8((int8x16_t)v87, (int8x16_t)v90);
          int16x8_t v108 = vrshrq_n_s16(vmlaq_s16(v106, v104, v105), 4uLL);
          int16x8_t v109 = (int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v156.val[1], (uint8x8_t)v159.val[1]), (uint8x8_t)v158.val[1]);
          v110.i64[0] = 0xA000A000A000ALL;
          v110.i64[1] = 0xA000A000A000ALL;
          int8x16_t v111 = (int8x16_t)vcgtq_s16(vmulq_s16(v107, v110), vabsq_s16(v108));
          int16x8_t v112 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v108, v111), v107), vnegq_s16(v107));
          int16x8_t v113 = vshrq_n_s16(v107, 1uLL);
          int16x8_t v114 = vnegq_s16(v113);
          int16x8_t v115 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(v103, v112), v113), v114), vandq_s8(v140, v111)), v86);
          int16x8_t v116 = vaddq_s16(v112, v143);
          int16x8_t v117 = vsubq_s16(v142, v112);
          int16x8_t v118 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(v109, v112), v113), v114), vandq_s8(v150, v111)), v144);
          *(int8x8_t *)v112.i8 = vqmovn_s16(v90);
          v157.val[1] = vbsl_s8(*(int8x8_t *)v112.i8, *(int8x8_t *)v95.i8, v157.val[1]);
          v156.val[1] = vbsl_s8(*(int8x8_t *)v112.i8, *(int8x8_t *)v98.i8, v156.val[1]);
          v160.val[1] = vbsl_s8(*(int8x8_t *)v112.i8, v101, vqmovun_s16(v115));
          v161.val[1] = vbsl_s8(*(int8x8_t *)v112.i8, v99, vqmovun_s16(v116));
          v159.val[1] = vbsl_s8(*(int8x8_t *)v112.i8, v100, vqmovun_s16(v117));
          v158.val[1] = vbsl_s8(*(int8x8_t *)v112.i8, v102, vqmovun_s16(v118));
        }
        else
        {
          int16x8_t v119 = (int16x8_t)vbicq_s8((int8x16_t)v87, (int8x16_t)v90);
          int8x16_t v120 = (int8x16_t)v91;
          v121.i64[0] = 0x2000200020002;
          v121.i64[1] = 0x2000200020002;
          int16x8_t v122 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8((uint8x8_t)v159.val[1], (uint8x8_t)0x909090909090909), (uint8x8_t)v161.val[1], (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8((uint8x8_t)v158.val[1], (uint8x8_t)v160.val[1]), v121), 4uLL);
          v121.i64[0] = 0xA000A000A000ALL;
          v121.i64[1] = 0xA000A000A000ALL;
          int8x16_t v123 = (int8x16_t)vcgtq_s16(vmulq_s16(v119, v121), vabsq_s16(v122));
          int16x8_t v124 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v122, v123), v119), vnegq_s16(v119));
          int16x8_t v125 = vshrq_n_s16(v119, 1uLL);
          int16x8_t v126 = vnegq_s16(v125);
          int16x8_t v127 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v157.val[1], (uint8x8_t)v161.val[1]), (uint8x8_t)v160.val[1]), v124), v125), v126), vandq_s8(v120, v123)), v86);
          int16x8_t v128 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v156.val[1], (uint8x8_t)v159.val[1]), (uint8x8_t)v158.val[1]), v124), v125), v126), vandq_s8(v92, v123));
          v160.val[1] = vqmovun_s16(v127);
          v161.val[1] = vqmovun_s16(vaddq_s16(v124, v143));
          v159.val[1] = vqmovun_s16(vsubq_s16(v142, v124));
          v158.val[1] = vqmovun_s16(vaddq_s16(v128, v144));
        }
        int8x8_t v66 = v146;
      }
      v153.val[0] = v152;
      int8x8_t v129 = (char *)&v19[-6 * a2];
      int8x8_t v130 = v157.val[1];
      vst2_s8(v129, *(int8x8x2_t *)v63.i8);
      int8x8_t v131 = &v129[a2];
      int8x8_t v132 = v160.val[1];
      vst2_s8(v131, *(int8x8x2_t *)v64.i8);
      int16x8_t v133 = &v131[a2];
      v153.val[1] = v161.val[1];
      vst2_s8(v133, v153);
      int16x8_t v134 = &v133[a2];
      int8x8_t v135 = v159.val[1];
      vst2_s8(v134, *(int8x8x2_t *)v65.i8);
      int8x16_t v136 = &v134[a2];
      int8x8_t v137 = v158.val[1];
      vst2_s8(v136, *(int8x8x2_t *)v66.i8);
      int16x8_t v138 = &v136[a2];
      int8x8_t v139 = v156.val[1];
      vst2_s8(v138, *(int8x8x2_t *)v67.i8);
      v7 += 16;
      if (!--v6) {
        return result;
      }
    }
    int8x8_t v63 = v157.val[0];
    int8x8_t v64 = v160.val[0];
    int8x8_t v152 = v161.val[0];
    int8x8_t v65 = v159.val[0];
    int8x8_t v66 = v158.val[0];
LABEL_8:
    int8x8_t v67 = v156.val[0];
    goto LABEL_9;
  }
  return result;
}

BOOL sameMD5(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
}

char *generateMD5(char *data, int a2, int a3, int a4, int a5, unsigned char *a6, CC_MD5_CTX *c)
{
  int8x16_t v10 = data;
  if (!c) {
    operator new();
  }
  if (a3 >= 1)
  {
    CC_LONG v12 = a5 * a2;
    uint64_t v13 = a3;
    do
    {
      data = (char *)CC_MD5_Update(c, v10, v12);
      v10 += a4;
      --v13;
    }
    while (v13);
  }
  if (!c)
  {
    data = (char *)CC_MD5_Final(a6 + 1, c);
    *a6 = 1;
  }
  return data;
}

char *generateMD5_YUV_8bit(char *a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned char *a9, CC_MD5_CTX *a10)
{
  int16x8_t v16 = &a2[a8 * a4 / a7];
  generateMD5(a1, a3, a4, a5, 1, a9, a10);
  int v17 = a3 / a6;
  int v18 = a4 / a7;
  generateMD5(a2, v17, v18, a8, 1, a9 + 17, a10);

  return generateMD5(v16, v17, v18, a8, 1, a9 + 34, a10);
}

char *generateMD5_444_8bit(char *a1, char *a2, int a3, int a4, int a5, int a6, unsigned char *a7, CC_MD5_CTX *a8)
{
  return generateMD5_YUV_8bit(a1, a2, a3, a4, a5, 1, 1, a6, a7, a8);
}

char *generateMD5_422_8bit(char *a1, char *a2, int a3, int a4, int a5, int a6, unsigned char *a7, CC_MD5_CTX *a8)
{
  return generateMD5_YUV_8bit(a1, a2, a3, a4, a5, 2, 1, a6, a7, a8);
}

char *generateMD5_420_8bit(char *a1, char *a2, int a3, int a4, int a5, int a6, unsigned char *a7, CC_MD5_CTX *a8)
{
  return generateMD5_YUV_8bit(a1, a2, a3, a4, a5, 2, 2, a6, a7, a8);
}

char *generateMD5_YUV_10bit(char *a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned char *a9, CC_MD5_CTX *a10)
{
  int16x8_t v16 = &a2[a8 * a4 / a7];
  generateMD5(a1, a3, a4, a5, 2, a9, a10);
  int v17 = a3 / a6;
  int v18 = a4 / a7;
  generateMD5(a2, v17, v18, a8, 2, a9 + 17, a10);

  return generateMD5(v16, v17, v18, a8, 2, a9 + 34, a10);
}

char *generateMD5_444_10bit(char *a1, char *a2, int a3, int a4, int a5, int a6, unsigned char *a7, CC_MD5_CTX *a8)
{
  return generateMD5_YUV_10bit(a1, a2, a3, a4, a5, 1, 1, a6, a7, a8);
}

char *generateMD5_422_10bit(char *a1, char *a2, int a3, int a4, int a5, int a6, unsigned char *a7, CC_MD5_CTX *a8)
{
  return generateMD5_YUV_10bit(a1, a2, a3, a4, a5, 2, 1, a6, a7, a8);
}

char *generateMD5_420_10bit(char *a1, char *a2, int a3, int a4, int a5, int a6, unsigned char *a7, CC_MD5_CTX *a8)
{
  return generateMD5_YUV_10bit(a1, a2, a3, a4, a5, 2, 2, a6, a7, a8);
}

_WORD *shiftToRight(_WORD *result, unsigned __int8 *a2, int a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = a3 >> 1;
    do
    {
      unsigned int v4 = *(unsigned __int16 *)a2;
      a2 += 2;
      *result++ = v4 >> 6;
      --v3;
    }
    while (v3);
  }
  return result;
}

CAHDecThymeHevc *createThymeHevcDecoder(CAVDHevcDecoder *a1)
{
  uint64_t v2 = (CAHDecThymeHevc *)operator new(0x2EE8uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecThymeHevc::CAHDecThymeHevc(v2, a1);
  }
  return v3;
}

void sub_223AC75C4(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecThymeHevc::CAHDecThymeHevc(CAHDecThymeHevc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D742488;
  *(_DWORD *)(v1 + 456) = 420444;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = 0;
  *(void *)(v1 + 272) = 0;
}

void CAHDecThymeHevc::CAHDecThymeHevc(CAHDecThymeHevc *this, CAVDHevcDecoder *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D742488;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 420444;
  *(_DWORD *)(v4 + 8) = 3036;
  *(_OWORD *)(v4 + 16) = xmmword_223AD0620;
  *(_DWORD *)(v4 + 32) = 2;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 420444, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      uint64_t v7 = "CAHDecThymeHevc";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v6, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v5 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v5;
    *((void *)this + 34) = v5;
    bzero((char *)this + 528, 0x2CB0uLL);
  }
}

void sub_223AC7784(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecThymeHevc::~CAHDecThymeHevc(CAHDecThymeHevc *this)
{
  *(void *)this = &unk_26D742488;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecThymeHevc::~CAHDecThymeHevc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecThymeHevc::initPicture(CAHDecThymeHevc *this, int a2, __int16 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 114) = 420444;
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v4;
  if (v4)
  {
    bzero(v4, 0x66A5CuLL);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v7 + 16) = a2;
    *(_WORD *)(v7 + 24) = 257;
    *(_WORD *)(v7 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 2999) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "initPicture";
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v9, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecThymeHevc::populateSlices(CAHDecThymeHevc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 3036;
    uint64_t v5 = a2;
    do
    {
      CAHDecThymeHevc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 368;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecThymeHevc::populateSliceRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 256);
  int v6 = *(_DWORD *)(v5 + 8320);
  int v7 = *(_DWORD *)(v5 + 8324);
  uint64_t v8 = *(void *)(v5 + 8288);
  uint64_t v9 = *(void *)(v5 + 8280);
  uint64_t v10 = *(void *)(v5 + 8296);
  int v11 = a3;
  uint64_t v12 = v9 + 23176 * v6;
  *(_DWORD *)(a1 + 460) = 6 * *(_DWORD *)(v12 + 3636);
  LODWORD(v12) = *(_DWORD *)(v12 + 22880);
  *(_DWORD *)(a2 + 352) = 0x1000000;
  uint64_t v13 = v10 + 2360 * (int)a3;
  unsigned int v14 = (((*(_DWORD *)(v13 + 36) / v12) & 0xFFF) << 12) | 0x1000000;
  *(_DWORD *)(a2 + 352) = v14;
  *(_DWORD *)(a2 + 352) = v14 & 0xFFFFF000 | (*(_DWORD *)(v13 + 36) % v12) & 0xFFF;
  *(_DWORD *)(a2 + 4) = 0;
  char v15 = *(unsigned char *)(v8 + 9856 * v7 + 6477);
  if (v15) {
    char v15 = *(unsigned char *)(v10 + 2360 * (int)a3 + 1880);
  }
  int v16 = v15 & 1;
  *(_DWORD *)(a2 + 4) = v16;
  uint64_t v17 = v10 + 2360 * (int)a3;
  int v19 = *(_DWORD *)(v17 + 44);
  int v18 = (int *)(v17 + 44);
  if (v19 == 2) {
    LOBYTE(v20) = 0;
  }
  else {
    int v20 = 5 - *(_DWORD *)(v10 + 2360 * (int)a3 + 1864);
  }
  unsigned int v21 = v16 & 0xFFFFFFF1 | (2 * (v20 & 7));
  *(_DWORD *)(a2 + 4) = v21;
  if (*v18)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *(unsigned __int8 *)(v10 + 2360 * (int)a3 + 616);
    if (*(unsigned char *)(v10 + 2360 * (int)a3 + 616)) {
      int v22 = *(unsigned char *)(v10 + 2360 * (int)a3 + 762) == 0;
    }
  }
  int v23 = v21 | (16 * v22);
  *(_DWORD *)(a2 + 4) = v23;
  if (*v18 == 2)
  {
    char v24 = 0;
  }
  else
  {
    char v24 = *(unsigned char *)(v8 + 9856 * v7 + 17);
    if (v24) {
      char v24 = *(unsigned char *)(v10 + 2360 * (int)a3 + 761);
    }
  }
  unsigned int v25 = v23 & 0xFFFFFFDF | (32 * (v24 & 1));
  *(_DWORD *)(a2 + 4) = v25;
  if (*v18) {
    int v26 = 0;
  }
  else {
    int v26 = *(unsigned char *)(v10 + 2360 * (int)a3 + 760) == 0;
  }
  char v27 = 0;
  int v28 = v25 | (v26 << 6);
  *(_DWORD *)(a2 + 4) = v28;
  uint64_t v29 = v10 + 2360 * (int)a3;
  int v30 = (*(_DWORD *)(v29 + 624) & 0xF) << 7;
  if (*(_DWORD *)(v29 + 624) == -1) {
    int v30 = 0;
  }
  int v31 = v30 | v28;
  *(_DWORD *)(a2 + 4) = v31;
  int v32 = (*(_DWORD *)(v29 + 620) & 0xF) << 11;
  if (*(_DWORD *)(v29 + 620) == -1) {
    int v32 = 0;
  }
  int v33 = v31 | v32;
  *(_DWORD *)(a2 + 4) = v33;
  if (*v18 != 2)
  {
    char v27 = *(unsigned char *)(v9 + 23176 * v6 + 22284);
    if (v27) {
      char v27 = *(unsigned char *)(v10 + 2360 * (int)a3 + 616);
    }
  }
  uint64_t v133 = v9;
  int v134 = v6;
  unsigned int v34 = v33 & 0xFFFF7FFF | ((v27 & 1) << 15);
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a2 + 4) = v34 & 0xFFFCFFFF | ((*v18 & 3) << 16);
  *(_DWORD *)(a2 + 336) = 0;
  if (*v18 > 1) {
    goto LABEL_28;
  }
  if (!*(void *)(v10 + 2360 * (int)a3 + 2344)) {
    goto LABEL_28;
  }
  if (*(_DWORD *)(a1 + 11996)) {
    goto LABEL_28;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 256) + 344))(*(void *)(a1 + 256), a3);
  uint64_t v4 = a1;
  uint64_t v35 = *(void *)(a1 + 256);
  if (*(_DWORD *)(v35 + 9032)) {
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 11996) = 1;
  *(_DWORD *)(a2 + 4) |= 0x40000u;
  int v132 = 368 * a3;
  if (!*(void *)(v35 + 8856) && !*(_DWORD *)(v35 + 9008) && !*(_DWORD *)(v35 + 9012)) {
    goto LABEL_147;
  }
  uint64_t result = CAHDec::addToPatcherList(a1, (void *)(v35 + 8856), v132 + 3372, 0, 0xFFFFFFFFLL, 8, -256, 4);
  int v132 = 368 * a3;
  uint64_t v4 = a1;
  if (result) {
    return result;
  }
  if (!*(void *)(v35 + 8856))
  {
LABEL_147:
    if (!*(_DWORD *)(v35 + 9008) && !*(_DWORD *)(v35 + 9012)) {
      goto LABEL_28;
    }
  }
  uint64_t result = CAHDec::addToPatcherList(v4, (void *)(v35 + 8856), v132 + 3400, 0, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  uint64_t v4 = a1;
  if (!result)
  {
LABEL_28:
    int8x16_t v36 = (unsigned int *)(v29 + 624);
    int8x16_t v37 = (unsigned int *)(v29 + 620);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
    (*(void (**)(void, void))(**(void **)(v4 + 256) + 352))(*(void *)(v4 + 256), 0);
    if (*v18 > 1) {
      goto LABEL_38;
    }
    uint64_t v38 = v5 + 8456;
    if ((*v37 & 0x80000000) != 0)
    {
      uint64_t v40 = 0;
      if (*v18) {
        goto LABEL_38;
      }
    }
    else
    {
      int v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = a2 + 8;
      do
      {
        uint64_t v42 = v40;
        *(_DWORD *)(v41 + 4 * v40) = v39 & 0xF0 | 0x2DC00000;
        *(_DWORD *)(v41 + 4 * v40) = v39 & 0xF0 | 0x2DC00000 | *(_DWORD *)(v38 + 4 * v40) & 0xF;
        ++v40;
        v39 += 16;
      }
      while (v42 < (int)*v37);
      if (*v18) {
        goto LABEL_38;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 256) + 352))(*(void *)(a1 + 256), 1, a3);
    if ((*v36 & 0x80000000) == 0)
    {
      int v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = a2 + 4 * v40 + 8;
      do
      {
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100;
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100 | *(_DWORD *)(v38 + 4 * v44) & 0xF;
        v43 += 16;
      }
      while (v44++ < (int)*v36);
    }
LABEL_38:
    *(void *)(a2 + 128) = 0x2DD0000000000000;
    int v47 = *v18;
    if (*v18)
    {
      uint64_t v48 = a1;
      uint64_t v50 = v133;
      int v49 = v134;
      if (v47 != 1 || !*(unsigned char *)(v8 + 9856 * v7 + 49)) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v48 = a1;
      uint64_t v50 = v133;
      int v49 = v134;
      if (!*(unsigned char *)(v8 + 9856 * v7 + 50)) {
        goto LABEL_62;
      }
    }
    unsigned int v51 = 0;
    unsigned int v52 = 0;
    uint64_t v53 = v10 + 2360 * v11;
    uint64_t v54 = v8 + 9856 * v7;
    int16x8_t v55 = (unsigned char *)(v54 + 50);
    int16x8_t v56 = (unsigned char *)(v54 + 49);
    if (v47) {
      int16x8_t v57 = v56;
    }
    else {
      int16x8_t v57 = v55;
    }
    int v58 = ((*v57 & 1) << 6) | 0x2DD00000;
    *(_DWORD *)(a2 + 132) = v58;
    char v59 = *(_DWORD *)(v53 + 768);
    unsigned int v60 = v58 & 0xFFFFFFC7 | (8 * (*(_DWORD *)(v53 + 768) & 7));
    *(_DWORD *)(a2 + 132) = v60;
    unsigned __int8 v61 = (*(_DWORD *)(v53 + 772) + *(_DWORD *)(v53 + 768)) & 7;
    *(_DWORD *)(a2 + 132) = v60 & 0xFFFFFFF8 | v61;
    int v62 = 1 << (v59 & 7);
    int v63 = 1 << v61;
    do
    {
      uint64_t v64 = v51;
      if (*(unsigned char *)(v10 + 2360 * v11 + v51 + 776))
      {
        int v65 = ((v51 & 0xF) << 9) | 0x2DE04000;
        uint64_t v66 = a2 + 4 * v52;
        *(_DWORD *)(v66 + 136) = v65;
        uint64_t v67 = v10 + 2360 * v11 + 4 * v64;
        *(_DWORD *)(v66 + 136) = ((unsigned __int16)*(_DWORD *)(v67 + 808) + (_WORD)v62) & 0x1FF | v65;
        *(_DWORD *)(v66 + 232) = 770703360;
        *(_DWORD *)(v66 + 232) = *(unsigned __int16 *)(v67 + 872) | 0x2DF00000;
        ++v52;
      }
      if (*(unsigned char *)(v10 + 2360 * v11 + v64 + 792))
      {
        uint64_t v68 = 0;
        char v69 = 1;
        do
        {
          char v70 = v69;
          int v71 = ((v64 & 0xF) << 9) | (v68 << 14) | 0x2DE08000;
          uint64_t v72 = a2 + 4 * v52;
          *(_DWORD *)(v72 + 136) = v71;
          uint64_t v73 = v10 + 2360 * v11 + 8 * v64 + 4 * v68;
          *(_DWORD *)(v72 + 136) = ((unsigned __int16)*(_DWORD *)(v73 + 936) + (_WORD)v63) & 0x1FF | v71;
          *(_DWORD *)(v72 + 232) = 770703360;
          *(_DWORD *)(v72 + 232) = *(unsigned __int16 *)(v73 + 1608) | 0x2DF00000;
          ++v52;
          uint64_t v68 = 1;
          char v69 = 0;
        }
        while ((v70 & 1) != 0);
      }
      unsigned int v51 = v64 + 1;
    }
    while ((int)v64 + 1 <= *v37);
    if (!*v18)
    {
      unsigned int v74 = 0;
      do
      {
        uint64_t v75 = v74;
        if (*(unsigned char *)(v10 + 2360 * v11 + v74 + 1192))
        {
          int v76 = ((v74 & 0xF) << 9) | 0x2DE06000;
          uint64_t v77 = a2 + 4 * v52;
          *(_DWORD *)(v77 + 136) = v76;
          uint64_t v78 = v10 + 2360 * v11 + 4 * v75;
          *(_DWORD *)(v77 + 136) = ((unsigned __int16)*(_DWORD *)(v78 + 1224) + (_WORD)v62) & 0x1FF | v76;
          *(_DWORD *)(v77 + 232) = 770703360;
          *(_DWORD *)(v77 + 232) = *(unsigned __int16 *)(v78 + 1288) | 0x2DF00000;
          ++v52;
        }
        if (*(unsigned char *)(v10 + 2360 * v11 + v75 + 1208))
        {
          uint64_t v79 = 0;
          char v80 = 1;
          do
          {
            char v81 = v80;
            int v82 = ((v75 & 0xF) << 9) | (v79 << 14) | 0x2DE0A000;
            uint64_t v83 = a2 + 4 * v52;
            *(_DWORD *)(v83 + 136) = v82;
            uint64_t v84 = v10 + 2360 * v11 + 8 * v75 + 4 * v79;
            *(_DWORD *)(v83 + 136) = ((unsigned __int16)*(_DWORD *)(v84 + 1352) + (_WORD)v63) & 0x1FF | v82;
            *(_DWORD *)(v83 + 232) = 770703360;
            *(_DWORD *)(v83 + 232) = *(unsigned __int16 *)(v84 + 1736) | 0x2DF00000;
            ++v52;
            uint64_t v79 = 1;
            char v80 = 0;
          }
          while ((v81 & 1) != 0);
        }
        unsigned int v74 = v75 + 1;
      }
      while ((int)v75 + 1 <= *v36);
    }
    *(_DWORD *)(a2 + 128) = v52;
LABEL_62:
    uint64_t v85 = v8 + 9856 * v7;
    int v88 = *(unsigned __int8 *)(v85 + 48);
    int16x8_t v86 = (unsigned __int8 *)(v85 + 48);
    LOBYTE(v87) = v88;
    if (v88) {
      int v87 = *(_DWORD *)(v10 + 2360 * v11 + 1876);
    }
    unsigned int v89 = *(_DWORD *)(a2 + 328) & 0xFFFFFFE0 | ((_BYTE)v87 + *((_DWORD *)v86 - 1)) & 0x1F;
    *(_DWORD *)(a2 + 328) = v89;
    int v90 = *v86;
    if (v90) {
      int v90 = *(_DWORD *)(v10 + 2360 * v11 + 1872);
    }
    unsigned int v91 = v89 & 0xFFFFFC1F | (32 * (((_BYTE)v90 + *(_DWORD *)(v8 + 9856 * v7 + 40)) & 0x1F));
    *(_DWORD *)(a2 + 328) = v91;
    int8x16_t v92 = (_DWORD *)(v8 + 9856 * v7);
    int v93 = v92[7] + *(_DWORD *)(v10 + 2360 * v11 + 1868) + 26;
    *(_DWORD *)(a2 + 328) = v91 & 0xE03FF | ((v93 & 0x7F) << 10) | 0x2D900000;
    *(_DWORD *)(*(void *)(v48 + 256) + 2868) = *(_DWORD *)(v48 + 460) + (v93 << 25 >> 25);
    *(_DWORD *)(a2 + 332) = 0;
    int v94 = v92[1635] & 7;
    *(_DWORD *)(a2 + 332) = v94;
    unsigned int v95 = v94 & 0xFFFFFFC7 | (8 * (v92[1634] & 7));
    *(_DWORD *)(a2 + 332) = v95;
    int16x8_t v96 = (char *)(v50 + 23176 * v49 + 10649);
    char v97 = *v96;
    if (*v96) {
      char v97 = *(unsigned char *)(v10 + 2360 * v11 + 618);
    }
    unsigned int v98 = v95 & 0xFFFFFFBF | ((v97 & 1) << 6);
    *(_DWORD *)(a2 + 332) = v98;
    if (*v96) {
      char v99 = *(unsigned char *)(v10 + 2360 * v11 + 617);
    }
    else {
      char v99 = 0;
    }
    int v100 = (v97 & 1) << 6;
    int v101 = (v99 & 1) << 7;
    unsigned int v102 = v98 & 0xFFFFFF7F | v101;
    *(_DWORD *)(a2 + 332) = v102;
    uint64_t v103 = v10 + 2360 * v11;
    uint64_t v104 = v8 + 9856 * v7;
    if (*(unsigned char *)(v103 + 1881)) {
      int16x8_t v105 = (_DWORD *)(v103 + 1888);
    }
    else {
      int16x8_t v105 = (_DWORD *)(v104 + 248);
    }
    unsigned int v106 = v102 & 0xFFFFF0FF | ((*v105 & 0xF) << 8);
    *(_DWORD *)(a2 + 332) = v106;
    if (*(unsigned char *)(v103 + 1881)) {
      int16x8_t v107 = (_DWORD *)(v103 + 1884);
    }
    else {
      int16x8_t v107 = (_DWORD *)(v104 + 244);
    }
    unsigned int v108 = v106 & 0xFFFF0FFF | ((*v107 & 0xF) << 12);
    *(_DWORD *)(a2 + 332) = v108;
    if (*(unsigned char *)(v104 + 239) && *(unsigned char *)(v103 + 1881)) {
      int16x8_t v109 = (unsigned __int8 *)(v10 + 2360 * v11 + 1882);
    }
    else {
      int16x8_t v109 = (unsigned __int8 *)(v8 + 9856 * v7 + 240);
    }
    int v110 = *v109;
    BOOL v111 = (v101 | v100) != 0;
    int v112 = v108 | ((v110 == 0) << 16);
    *(_DWORD *)(a2 + 332) = v112;
    if (!v110) {
      BOOL v111 = 1;
    }
    uint64_t v113 = v8 + 9856 * v7;
    if (v111) {
      int16x8_t v114 = (unsigned char *)(v10 + 2360 * v11 + 1892);
    }
    else {
      int16x8_t v114 = (unsigned char *)(v113 + 237);
    }
    unsigned int v115 = v112 & 0xFFFDFFFF | ((*v114 & 1) << 17);
    *(_DWORD *)(a2 + 332) = v115;
    if (*(unsigned char *)(v113 + 52)) {
      char v116 = *(unsigned char *)(v8 + 9856 * v7 + 236);
    }
    else {
      char v116 = 1;
    }
    unsigned int v117 = v115 & 0xFFFBFFFF | ((v116 & 1) << 18);
    *(_DWORD *)(a2 + 332) = v117;
    int v118 = *(unsigned __int8 *)(v50 + 23176 * v49 + 10650);
    if (*(unsigned char *)(v50 + 23176 * v49 + 10650)) {
      int v118 = *(unsigned char *)(v50 + 23176 * v49 + 10668) == 0;
    }
    *(_DWORD *)(a2 + 332) = v117 | (v118 << 19) | 0x2DA00000;
    uint64_t v119 = *(void *)(v48 + 256);
    int v120 = *(_DWORD *)(v119 + 2504);
    if (*(_DWORD *)(v119 + 2360) == 1)
    {
      unint64_t v137 = 0;
      uint64_t v138 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))
      {
        int v121 = 368 * a3;
        *(_DWORD *)(a2 + 340) = 0;
        uint64_t v122 = v138;
        if (*(void *)v138 || *(_DWORD *)(v138 + 152) || *(_DWORD *)(v138 + 156))
        {
          int v123 = v137;
          if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315394;
            int8x16_t v140 = "populateSliceRegisters";
            __int16 v141 = 1024;
            int v142 = 1613;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v123 = v137;
          }
          uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v121 + 3376, v123, 0x3FFFFFFFFFFLL, 32, 1023, 4);
          if (result) {
            return result;
          }
          uint64_t v122 = v138;
          if (*(void *)v138) {
            goto LABEL_103;
          }
        }
        if (*(_DWORD *)(v122 + 152) || *(_DWORD *)(v122 + 156))
        {
LABEL_103:
          int v125 = v121 + 3380;
          int v126 = v137;
          if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315394;
            int8x16_t v140 = "populateSliceRegisters";
            __int16 v141 = 1024;
            int v142 = 1614;
            int16x8_t v127 = &_os_log_internal;
LABEL_120:
            _os_log_impl(&dword_223977000, v127, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v126 = v137;
            goto LABEL_121;
          }
          goto LABEL_121;
        }
        goto LABEL_122;
      }
    }
    else
    {
      unint64_t v137 = 0;
      uint64_t v138 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))
      {
        int v128 = 368 * a3;
        *(_DWORD *)(a2 + 340) = 0;
        uint64_t v122 = v138;
        if (*(void *)v138 || *(_DWORD *)(v138 + 152) || *(_DWORD *)(v138 + 156))
        {
          int v129 = v137;
          if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315394;
            int8x16_t v140 = "populateSliceRegisters";
            __int16 v141 = 1024;
            int v142 = 1634;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v129 = v137;
          }
          uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v128 + 3376, v129, 0x3FFFFFFFFFFLL, 32, 1023, 4);
          if (result) {
            return result;
          }
          uint64_t v122 = v138;
          if (*(void *)v138) {
            goto LABEL_117;
          }
        }
        if (*(_DWORD *)(v122 + 152) || *(_DWORD *)(v122 + 156))
        {
LABEL_117:
          int v125 = v128 + 3380;
          int v126 = v137;
          if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315394;
            int8x16_t v140 = "populateSliceRegisters";
            __int16 v141 = 1024;
            int v142 = 1635;
            int16x8_t v127 = &_os_log_internal;
            goto LABEL_120;
          }
LABEL_121:
          uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v125, v126, 0xFFFFFFFFLL, 0, -1, 4);
          if (!result) {
            goto LABEL_122;
          }
          return result;
        }
LABEL_122:
        unsigned int v130 = *(_DWORD *)(v10 + 2360 * v11 + 16) - (*(_DWORD *)(v10 + 2360 * v11 + 2080) >> 3);
        *(_DWORD *)(a2 + 348) = v130;
        if (*(_DWORD *)(v119 + 2360) != 1) {
          return 0;
        }
        *(void *)(a2 + 356) = 0;
        if (*(_DWORD *)(v119 + 2640))
        {
          if ((*(unsigned char *)(v119 + 2612) & 1) == 0)
          {
LABEL_125:
            uint64_t result = 0;
            if (v130 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
              unsigned int v130 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
            }
            int v131 = (unsigned __int16)v120 | (v130 << 22);
LABEL_144:
            *(_DWORD *)(a2 + 360) = v131;
            return result;
          }
        }
        else if (!*(_DWORD *)(v119 + 2420))
        {
          goto LABEL_125;
        }
        uint64_t result = 0;
        if (v130 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
          unsigned int v130 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
        }
        int v131 = v130 | v120 & 0x10000;
        goto LABEL_144;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecThymeHevc::populateCommonRegisters(CAHDecThymeHevc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000000;
  return 0;
}

uint64_t CAHDecThymeHevc::updateCommonRegisters(CAHDecThymeHevc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecThymeHevc::populateSequenceRegisters(CAHDecThymeHevc *this)
{
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)*((void *)this + 33);
  int v3 = *(_DWORD *)(v1 + 8320);
  uint64_t v4 = *(void *)(v1 + 8280);
  v2[13] = 0;
  uint64_t v5 = v4 + 23176 * v3;
  __int16 v6 = (*(_DWORD *)(v5 + 3608) >> 3) - 1;
  v2[13] = v6 & 0x1FFF;
  v2[13] = ((*(_DWORD *)(v5 + 3612) << 13) + 536805376) & 0x1FFF0000 | v6 & 0x1FFF;
  v2[14] = 0;
  int v7 = *(unsigned char *)(v5 + 10648) & 1;
  v2[14] = v7;
  unsigned int v8 = v7 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v5 + 4440) & 7));
  v2[14] = v8;
  unsigned int v9 = v8 & 0xFFFFFF8F | (16 * (*(_DWORD *)(v5 + 4436) & 7));
  v2[14] = v9;
  unsigned int v10 = v9 & 0xFFFFFE7F | (((*(_DWORD *)(v5 + 4428) + *(_DWORD *)(v5 + 4432)) & 3) << 7);
  v2[14] = v10;
  unsigned int v11 = v10 & 0xFFFFF9FF | ((*(_DWORD *)(v5 + 4428) & 3) << 9);
  v2[14] = v11;
  unsigned int v12 = v11 & 0xFFFFE7FF | (((*(_DWORD *)(v5 + 4424) + *(_DWORD *)(v5 + 4420)) & 3) << 11);
  v2[14] = v12;
  unsigned int v13 = v12 & 0xFFFF9FFF | ((*(_DWORD *)(v5 + 4420) & 3) << 13);
  v2[14] = v13;
  unsigned int v14 = v13 & 0xFFF87FFF | ((*(_DWORD *)(v5 + 3640) & 0xF) << 15);
  v2[14] = v14;
  unsigned int v15 = v14 & 0xFF87FFFF | ((*(_DWORD *)(v5 + 3636) & 0xF) << 19);
  v2[14] = v15;
  unsigned int v16 = v15 & 0xFF7FFFFF | ((*(unsigned char *)(v5 + 3604) & 1) << 23);
  v2[14] = v16;
  v2[14] = v16 & 0xFCFFFFFF | ((*(_DWORD *)(v5 + 3600) & 3) << 24);
  v2[15] = 0;
  if (*(unsigned char *)(v5 + 10650))
  {
    v2[15] = 4096;
    uint64_t v17 = (_DWORD *)(v4 + 23176 * v3);
    int v18 = (v17[2666] + v17[2665]) & 3 | 0x1000;
    v2[15] = v18;
    unsigned int v19 = v18 & 0xFFFFFFF3 | (4 * (v17[2665] & 3));
    v2[15] = v19;
    unsigned int v20 = v19 & 0xFFFFFF0F | (16 * (v17[2664] & 0xF));
    v2[15] = v20;
    v2[15] = v20 & 0xFFFFF0FF | ((v17[2663] & 0xF) << 8);
  }
  v2[16] = 0;
  if (*(unsigned char *)(v4 + 23176 * v3 + 22833))
  {
    int v21 = *(unsigned char *)(v4 + 23176 * v3 + 22844) & 1;
    v2[16] = v21;
    unsigned int v22 = v21 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v4 + 23176 * v3 + 22843) & 1));
    v2[16] = v22;
    unsigned int v23 = v22 & 0xFFFFFFFB | (4 * (*(unsigned char *)(v4 + 23176 * v3 + 22842) & 1));
    v2[16] = v23;
    int v24 = v23 | (8 * (*(unsigned char *)(v4 + 23176 * v3 + 22841) == 0));
    v2[16] = v24;
    unsigned int v25 = v24 & 0xFFFFFFEF | (16 * (*(unsigned char *)(v4 + 23176 * v3 + 22840) & 1));
    v2[16] = v25;
    unsigned int v26 = v25 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v4 + 23176 * v3 + 22839) & 1));
    v2[16] = v26;
    unsigned int v27 = v26 & 0xFFFFFFBF | ((*(unsigned char *)(v4 + 23176 * v3 + 22838) & 1) << 6);
    v2[16] = v27;
    int v28 = v27 | ((*(unsigned char *)(v4 + 23176 * v3 + 22837) & 1) << 7);
    v2[16] = v28;
    int v29 = v28 | ((*(unsigned char *)(v4 + 23176 * v3 + 22836) & 1) << 8);
  }
  else
  {
    int v29 = 8;
  }
  v2[16] = v29;
  uint64_t v30 = v4 + 23176 * v3;
  v2[16] = v29 & 0xFFFFFDFF | ((*(unsigned char *)(v30 + 22285) & 1) << 9);
  if (*(unsigned char *)(v30 + 4444)) {
    CAHDecTansyHevc::copyScalingList((uint64_t)this, (uint64_t)(v2 + 17), *((void *)this + 33) + 796, *(_DWORD *)(v5 + 3600), v4 + 23176 * v3 + 4448);
  }
  return 0;
}

uint64_t CAHDecThymeHevc::getTileHdrMemInfo(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 176 * a2;
  *a3 = v3 + 528;
  a3[1] = v3 + 3344;
  return result;
}

__n128 CAHDecThymeHevc::getMVmemInfo(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1 + 176 * a2;
  long long v5 = *(_OWORD *)(v4 + 7568);
  long long v6 = *(_OWORD *)(v4 + 7600);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 7584);
  *(_OWORD *)(a3 + 32) = v6;
  *(_OWORD *)a3 = v5;
  long long v7 = *(_OWORD *)(v4 + 7616);
  long long v8 = *(_OWORD *)(v4 + 7632);
  long long v9 = *(_OWORD *)(v4 + 7664);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(v4 + 7648);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_OWORD *)(a3 + 64) = v8;
  __n128 result = *(__n128 *)(v4 + 7680);
  long long v11 = *(_OWORD *)(v4 + 7696);
  long long v12 = *(_OWORD *)(v4 + 7728);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v4 + 7712);
  *(_OWORD *)(a3 + 160) = v12;
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v11;
  *a4 = *(_DWORD *)(a1 + 4 * a2 + 464);
  return result;
}

uint64_t CAHDecThymeHevc::populatePictureRegisters(CAHDecThymeHevc *this)
{
  uint64_t v424 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 8320);
  int v4 = *(_DWORD *)(v2 + 8324);
  uint64_t v5 = *(void *)(v2 + 8280);
  uint64_t v6 = *(void *)(v2 + 8288);
  unsigned int v401 = *(_DWORD *)(v2 + 9036);
  unsigned int v7 = *(_DWORD *)(v2 + 3068);
  int v408 = *(_DWORD *)(v2 + 3072);
  uint64_t v8 = *(void *)(v2 + 2088);
  int v395 = *(_DWORD *)(v2 + 3660);
  int v406 = *(_DWORD *)(v2 + 2644);
  uint64_t v397 = *(unsigned int *)(v2 + 8424);
  int v9 = *(unsigned __int8 *)(v2 + 8);
  long long v10 = *(_OWORD *)(v2 + 8536);
  v423[0] = *(_OWORD *)(v2 + 8520);
  v423[1] = v10;
  long long v11 = *(_OWORD *)(v2 + 8568);
  v423[2] = *(_OWORD *)(v2 + 8552);
  v423[3] = v11;
  uint64_t v391 = v8;
  uint64_t v393 = *(unsigned int *)(v2 + 8720);
  int v405 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  long long v12 = (char *)this + 264;
  int v403 = *(_DWORD *)(v5 + 23176 * v3 + 4424) + *(_DWORD *)(v5 + 23176 * v3 + 4420);
  memset(v422, 0, sizeof(v422));
  memset(v421, 0, sizeof(v421));
  uint64_t v13 = *((void *)this + 33);
  (*(void (**)(void))(**((void **)this + 32) + 336))();
  uint64_t v14 = 0;
  unsigned int v15 = (unsigned __int8 *)*((void *)this + 32);
  unsigned int v16 = (const double *)(v15 + 8728);
  do
  {
    float64x2x2_t v425 = vld2q_f64(v16);
    v16 += 4;
    v422[v14] = v425.val[0];
    v421[v14++] = v425.val[1];
  }
  while (v14 != 4);
  uint64_t v17 = v6 + 9856 * v4;
  int v19 = *(unsigned __int8 *)(v17 + 52);
  int v18 = (unsigned char *)(v17 + 52);
  uint64_t v407 = (char *)this + 264;
  int v396 = v9;
  unsigned int v399 = v7;
  if (v19)
  {
    unint64_t v20 = 0;
    uint64_t v21 = v6 + 9856 * v4;
    unsigned __int16 v22 = *(_WORD *)(v21 + 56) + 1;
    uint64_t v23 = *(void *)v12;
    *(_WORD *)(*(void *)v12 + 692) = v22;
    uint64_t v24 = v21 + 9676;
    do
    {
      *(_WORD *)(v23 + 696 + 2 * v20) = *(_DWORD *)(v24 + 4 * v20);
      BOOL v25 = v20++ >= v22;
    }
    while (!v25);
    uint64_t v26 = v13;
    unint64_t v27 = 0;
    uint64_t v28 = v6 + 9856 * v4;
    unsigned __int16 v29 = *(_WORD *)(v28 + 60) + 1;
    *(_WORD *)(v23 + 694) = v29;
    int v30 = v29;
    uint64_t v31 = v28 + 9760;
    uint64_t v32 = v23 + 738;
    do
    {
      *(_WORD *)(v32 + 2 * v27) = *(_DWORD *)(v31 + 4 * v27);
      BOOL v25 = v27++ >= v29;
    }
    while (!v25);
    uint64_t v33 = v5;
    int v34 = v3;
  }
  else
  {
    uint64_t v26 = v13;
    uint64_t v35 = *(void *)v12;
    *(_DWORD *)(v35 + 692) = 65537;
    *(_WORD *)(v35 + 696) = 0;
    int v34 = v3;
    uint64_t v33 = v5;
    uint64_t v36 = v5 + 23176 * v3;
    *(_WORD *)(v35 + 698) = *(_DWORD *)(v36 + 22880);
    *(_WORD *)(v35 + 738) = 0;
    *(_WORD *)(v35 + 740) = *(_DWORD *)(v36 + 22888);
    int v30 = 1;
    unsigned __int16 v22 = 1;
  }
  int v37 = v15[2675];
  unsigned int v38 = v15[2674];
  if (v37 | v38)
  {
    uint64_t v39 = v33 + 23176 * v34;
    unsigned int v40 = *(_DWORD *)(v39 + 3636);
    unsigned int v41 = *(_DWORD *)(v39 + 3640);
    if (v40 > v41) {
      unsigned int v41 = v40;
    }
    unsigned int v42 = (v41 + 9) & 0xFFFFFFFE;
    if (v42 == 8)
    {
      unsigned int v51 = 1;
      int v50 = 8;
      if (!v15[2675]) {
        goto LABEL_47;
      }
    }
    else
    {
      int v43 = v15[2672];
      if (v43) {
        int v44 = 12;
      }
      else {
        int v44 = 11;
      }
      if (v43) {
        int v45 = 5;
      }
      else {
        int v45 = 4;
      }
      BOOL v46 = v43 == 0;
      if (v43) {
        int v47 = 10;
      }
      else {
        int v47 = 9;
      }
      if (v46) {
        int v48 = 2;
      }
      else {
        int v48 = 3;
      }
      if (v42 == 10)
      {
        int v49 = v48;
      }
      else
      {
        int v47 = 27;
        int v49 = 27;
      }
      if (v42 == 12) {
        int v50 = v44;
      }
      else {
        int v50 = v47;
      }
      if (v42 == 12) {
        unsigned int v51 = v45;
      }
      else {
        unsigned int v51 = v49;
      }
      if (!v37)
      {
LABEL_47:
        if (v38 && (v38 == 3 && v51 - 9 < 2 || v51 <= 0x1A && ((1 << v51) & 0x4C00000) != 0 && v38 <= 2))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315650;
            *(void *)&uint8_t buf[4] = "populatePictureRegisters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v51;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v38;
            unsigned int v52 = &_os_log_internal;
            uint64_t v53 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
            goto LABEL_139;
          }
          return 0xFFFFFFFFLL;
        }
        goto LABEL_55;
      }
    }
    if (*(_DWORD *)(v33 + 23176 * v34 + 3600) && (v37 == 2 && v50 == 8 || v37 == 3 && (v50 - 9) <= 1))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v50;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v37;
        unsigned int v52 = &_os_log_internal;
        uint64_t v53 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
LABEL_139:
        int16x8_t v148 = buf;
        uint32_t v149 = 24;
LABEL_140:
        _os_log_impl(&dword_223977000, v52, OS_LOG_TYPE_DEFAULT, v53, v148, v149);
      }
      return 0xFFFFFFFFLL;
    }
    goto LABEL_47;
  }
LABEL_55:
  unsigned __int16 v389 = v22;
  uint64_t v54 = v18;
  uint64_t v55 = v26;
  *(_DWORD *)(v26 + 88) = 766509056;
  if ((*(unsigned int (**)(void))(**((void **)this + 32) + 216))(*((void *)this + 32))) {
    int v56 = (*(_DWORD *)(*((void *)this + 32) + 3092) == 2) << 13;
  }
  else {
    int v56 = 0;
  }
  unsigned int v57 = v401 >> 28;
  if (v405) {
    int v58 = 688;
  }
  else {
    int v58 = 672;
  }
  if (v406) {
    int v59 = 4160;
  }
  else {
    int v59 = 64;
  }
  unsigned int v60 = v59 & 0xFFFFFFF0 | ((v406 == 1) << 10) | v58 & 0xFFFFFFF0 | (4 * (v37 & 3)) | v38 & 3 | v56;
  unsigned int v61 = v60 | *(_DWORD *)(v55 + 88) & 0xFFFFC100;
  *(_DWORD *)(v55 + 88) = v61;
  int v62 = (unsigned char *)*((void *)this + 32);
  unsigned int v63 = v61 & 0xFFF7FFFF | ((v62[2652] & 1) << 19);
  *(_DWORD *)(v55 + 88) = v63;
  unsigned int v64 = v63 & 0xFFFBFFFF | ((v62[2653] & 1) << 18);
  *(_DWORD *)(v55 + 88) = v64;
  *(void *)(v55 + 88) = v64 & 0xFFFDFFFF | ((v62[2654] & 1) << 17);
  int v65 = v34;
  uint64_t v66 = (uint64_t)v54;
  if ((v401 & 1) != 0 && *(unsigned char *)(v6 + 9856 * v4 + 53) && *(_DWORD *)(v33 + 23176 * v34 + 22888) > v57 + 1
    || (v401 & 2) != 0 && !*(unsigned char *)(v6 + 9856 * v4 + 53) && *v54 && v30 * v389 > v57 + 1)
  {
    goto LABEL_77;
  }
  if ((v401 & 0x20) == 0 || (int v67 = *(unsigned __int8 *)(v6 + 9856 * v4 + 53), *(unsigned char *)(v6 + 9856 * v4 + 53)))
  {
    int v67 = 0;
    goto LABEL_78;
  }
  if (!*v54 && v399 > v57 + 1) {
LABEL_77:
  }
    int v67 = (v408 == 0) << 27;
LABEL_78:
  *(_DWORD *)(v55 + 92) = v67;
  *(_DWORD *)(v55 + 96) = 0;
  uint64_t v68 = v33 + 23176 * v34;
  unsigned __int16 v69 = *(_DWORD *)(v68 + 3608) - 1;
  *(_DWORD *)(v55 + 96) = v69;
  int v70 = (v69 | ((unsigned __int16)*(_DWORD *)(v68 + 3612) << 16)) - 0x10000;
  *(_DWORD *)(v55 + 100) = 0;
  *(_DWORD *)(v55 + 104) = 0;
  *(_DWORD *)(v55 + 96) = v70;
  if (*(unsigned char *)(v6 + 9856 * v4 + 6466))
  {
    int v71 = (unsigned char *)(v6 + 9856 * v4 + 6477);
    int v72 = 32 * (*v71 & 1);
    *(_DWORD *)(v55 + 104) = v72;
    LOBYTE(v73) = *v71;
    if (*v71) {
      int v73 = *(_DWORD *)(v6 + 9856 * v4 + 6484);
    }
    unint64_t v74 = v73 & 7;
    int v75 = v74 | v72;
    *(_DWORD *)(v55 + 104) = v74 | v72;
    if (v72)
    {
      int v76 = (_DWORD *)(v6 + 9856 * v4 + 6512);
      uint64_t v77 = (unsigned int *)(v55 + 112);
      unint64_t v78 = -1;
      do
      {
        unsigned int v79 = *v77 & 0xFFFFFFE0 | *v76 & 0x1F;
        *uint64_t v77 = v79;
        *v77++ = v79 & 0xFFFFFC1F | (32 * (*(v76 - 6) & 0x1F));
        ++v78;
        ++v76;
      }
      while (v78 < v74);
    }
    int v80 = *v71;
    if (v80) {
      int v80 = *(_DWORD *)(v6 + 9856 * v4 + 6480);
    }
    int v81 = (8 * (((_BYTE)v403 - (_BYTE)v80) & 3)) | v75;
    *(_DWORD *)(v55 + 104) = v81;
    unsigned int v82 = v81 & 0xFFFFFFBF | ((*(unsigned char *)(v6 + 9856 * v4 + 6476) & 1) << 6);
    *(_DWORD *)(v55 + 104) = v82;
    unsigned int v83 = v82 & 0xFFFFFE7F | ((*(_DWORD *)(v6 + 9856 * v4 + 6472) & 3) << 7);
  }
  else
  {
    unsigned int v83 = 8 * (v403 & 3);
  }
  *(_DWORD *)(v55 + 104) = v83;
  uint64_t v84 = v6 + 9856 * v4;
  int v87 = *(unsigned __int8 *)(v84 + 34);
  uint64_t v85 = (unsigned char *)(v84 + 34);
  LOBYTE(v86) = v87;
  if (v87) {
    int v86 = *(_DWORD *)(v6 + 9856 * v4 + 36);
  }
  unsigned int v88 = v83 & 0xFFFE7FFF | ((((_BYTE)v403 - (_BYTE)v86) & 3) << 15);
  *(_DWORD *)(v55 + 104) = v88;
  uint64_t v89 = v6 + 9856 * v4;
  unsigned int v90 = v88 & 0xFFFFF1FF | ((*(_DWORD *)(v89 + 6460) & 7) << 9);
  *(_DWORD *)(v55 + 104) = v90;
  unsigned int v91 = v90 & 0xFFFFEFFF | ((*(unsigned char *)(v89 + 53) & 1) << 12);
  *(_DWORD *)(v55 + 104) = v91;
  unsigned int v92 = v91 & 0xFFFFDFFF | ((*v54 & 1) << 13);
  *(_DWORD *)(v55 + 104) = v92;
  unsigned int v93 = v92 & 0xFFFFBFFF | ((*(unsigned char *)(v89 + 51) & 1) << 14);
  *(_DWORD *)(v55 + 104) = v93;
  unsigned int v94 = v93 & 0xFFFDFFFF | ((*v85 & 1) << 17);
  *(_DWORD *)(v55 + 104) = v94;
  unsigned int v95 = v94 & 0xFFFBFFFF | ((*(unsigned char *)(v89 + 33) & 1) << 18);
  *(_DWORD *)(v55 + 104) = v95;
  unsigned int v96 = v95 & 0xFFF7FFFF | ((*(unsigned char *)(v89 + 32) & 1) << 19);
  *(_DWORD *)(v55 + 104) = v96;
  unsigned int v97 = v96 & 0xFFEFFFFF | ((*(unsigned char *)(v89 + 16) & 1) << 20);
  *(_DWORD *)(v55 + 104) = v97;
  if (v60 >> 13) {
    BOOL v98 = 0;
  }
  else {
    BOOL v98 = *(unsigned char *)(v33 + 23176 * v34 + 22284) != 0;
  }
  *(_DWORD *)(v55 + 104) = v97 & 0xFFDFFFFF | (v98 << 21);
  uint64_t v99 = v6 + 9856 * v4;
  unsigned int v100 = *(_DWORD *)(v55 + 108) & 0xFFFFFFE0 | *(_DWORD *)(v99 + 44) & 0x1F;
  *(_DWORD *)(v55 + 108) = v100;
  unsigned int v101 = v100 & 0xFFFFFC1F | (32 * (*(_DWORD *)(v99 + 40) & 0x1F));
  *(_DWORD *)(v55 + 108) = v101;
  uint64_t v102 = *((void *)this + 32);
  if (*(unsigned char *)(v102 + 12)
    && *(_DWORD *)(v33 + 23176 * v34 + 22864) >= 5u
    && !*v54
    && *(_DWORD *)(v33 + 23176 * v34 + 3600) == 1
    && (*(_DWORD *)(v33 + 23176 * v34 + 3636) | 2) == 2
    && (*(_DWORD *)(v33 + 23176 * v34 + 3640) | 2) == 2)
  {
    uint64_t v103 = *(void *)(v102 + 8296);
    unsigned int v104 = v101 | 0x80000000;
    *(_DWORD *)(v55 + 108) = v104;
    uint64_t v105 = v6 + 9856 * v4;
    int v106 = *(_DWORD *)(v105 + 28) + *(_DWORD *)(v103 + 1868);
    int v107 = v106 + 26;
    unsigned int v108 = v106 + 11;
    if (v107 > 51) {
      unsigned int v108 = 36;
    }
    if (v107 < 15) {
      unsigned int v108 = 0;
    }
    unsigned int v109 = v104 & 0xFFFF83FF | ((kTable_8_11_tc[v108] & 0x1F) << 10);
    *(_DWORD *)(v55 + 108) = v109;
    int v110 = *(_DWORD *)(v105 + 28) + *(_DWORD *)(v103 + 1868);
    int v111 = v110 + 26;
    unsigned int v112 = v110 + 11;
    if (v111 > 51) {
      unsigned int v112 = 36;
    }
    if (v111 < 15) {
      unsigned int v112 = 0;
    }
    *(_DWORD *)(v55 + 108) = v109 & 0xFFC07FFF | ((kTable_8_11_beta[v112] & 0x7F) << 15);
    uint64_t v113 = *((void *)this + 32);
    int v114 = 2;
  }
  else
  {
    *(_DWORD *)(v55 + 108) = v101 & 0x7FC003FF;
    uint64_t v113 = *((void *)this + 32);
    int v114 = *(unsigned __int8 *)(v113 + 12);
  }
  *(_DWORD *)(v113 + 16) = v114;
  if (*(unsigned char *)(v6 + 9856 * v4 + 252))
  {
    CAHDecTansyHevc::copyScalingList(v66, v55 + 136, *((void *)this + 33) + 1792, *(_DWORD *)(v33 + 23176 * v34 + 3600), v6 + 9856 * v4 + 256);
    uint64_t v113 = *((void *)this + 32);
  }
  int v115 = *(_DWORD *)(v55 + 88);
  if ((~v115 & 0xC0000) != 0)
  {
    int v119 = 0;
    int v121 = 0;
    *(_DWORD *)(v55 + 156) = 0;
    *(_DWORD *)(v55 + 160) = 0;
  }
  else
  {
    int v116 = *(_DWORD *)(v113 + 2656);
    if (!v116 || !*(_DWORD *)(v113 + 2660))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v147 = *(_DWORD *)(v113 + 2660);
        *(_DWORD *)CMTime buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v116;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v147;
        unsigned int v52 = &_os_log_internal;
        uint64_t v53 = "AppleAVD: %s(): invalid stat crop width/height %d/%d";
        goto LABEL_139;
      }
      return 0xFFFFFFFFLL;
    }
    unsigned __int16 v117 = *(_DWORD *)(v113 + 2664);
    *(_WORD *)(v55 + 156) = v117;
    int v118 = *(_DWORD *)(v113 + 2668);
    int v119 = v118 << 16;
    *(_DWORD *)(v55 + 156) = v117 | ((unsigned __int16)v118 << 16);
    unsigned __int16 v120 = *(_DWORD *)(v113 + 2664) + *(_DWORD *)(v113 + 2656) - 1;
    *(_WORD *)(v55 + 160) = v120;
    int v121 = (v120 | ((unsigned __int16)(*(_WORD *)(v113 + 2660) + *(_WORD *)(v113 + 2668)) << 16)) - 0x10000;
    *(_DWORD *)(v55 + 160) = v121;
  }
  if (v408) {
    int v122 = 7340080;
  }
  else {
    int v122 = 3145776;
  }
  *(_DWORD *)(v55 + 164) = v122;
  if (!*(unsigned char *)(*((void *)this + 32) + 3004))
  {
    unsigned __int16 v123 = *(_DWORD *)(v68 + 3608) - 1;
    *(_DWORD *)(v55 + 160) = v121 & 0xFFFF0000 | v123;
    int v124 = (*(_DWORD *)(v68 + 3612) << 16) - 0x10000;
    *(_DWORD *)(v55 + 160) = v124 & 0xFFFF0000 | v123;
    if (*(unsigned char *)(v33 + 23176 * v65 + 3616))
    {
      if ((v115 & 0x800) != 0)
      {
        uint64_t v125 = v33 + 23176 * v65;
        unsigned __int16 v126 = *(_DWORD *)(v125 + 3620) * *(_DWORD *)(v125 + 22852);
        *(_DWORD *)(v55 + 156) = v119 | v126;
        *(_DWORD *)(v55 + 156) = v126 | ((unsigned __int16)(*(_WORD *)(v125 + 22856) * *(_DWORD *)(v125 + 3628)) << 16);
        unsigned __int16 v127 = *(_DWORD *)(v68 + 3608) + ~(*(_DWORD *)(v125 + 3624) * *(_DWORD *)(v125 + 22852));
        *(_DWORD *)(v55 + 160) = v127 | v124;
        *(_DWORD *)(v55 + 160) = v127 | ((unsigned __int16)(*(_WORD *)(v68 + 3612)
                                                          + ~(*(_WORD *)(v125 + 3632) * *(_WORD *)(v125 + 22856))) << 16);
      }
    }
  }
  uint64_t v128 = 0;
  int v129 = (char *)this + 6160;
  do
  {
    *(_DWORD *)(*(void *)v407 + v128 + 168) = 0;
    uint64_t v130 = *(void *)v407 + v128;
    int v131 = *(_DWORD *)(v130 + 168);
    *(_DWORD *)(v130 + 168) = 0;
    *(_DWORD *)(*(void *)v407 + v128 + 168) ^= 0xFFFFFF00;
    uint64_t v132 = *(void *)v407 + v128;
    int v133 = *(_DWORD *)(v132 + 168);
    *(_DWORD *)(v132 + 168) = v131;
    if (*(void *)v129 || *((_DWORD *)v129 + 38) || *((_DWORD *)v129 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, (int)v128 + 168, 0, 0xFFFFFFFFLL, 8, v133, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v128 + 196) = 0;
    *(_DWORD *)(*((void *)this + 33) + v128 + 196) = *(_DWORD *)(*((void *)this + 33) + v128 + 196) & 0x800001FF | (((*((_DWORD *)this + 2996) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v128 + 464) = 0;
    uint64_t v135 = *((void *)this + 33) + v128;
    int v136 = *(_DWORD *)(v135 + 464);
    *(_DWORD *)(v135 + 464) = 0;
    *(_DWORD *)(*((void *)this + 33) + v128 + 464) ^= 0x3FFu;
    uint64_t v137 = *((void *)this + 33) + v128;
    int v138 = *(_DWORD *)(v137 + 464);
    *(_DWORD *)(v137 + 464) = v136;
    if (*(void *)v129 || *((_DWORD *)v129 + 38) || *((_DWORD *)v129 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v129, (int)v128 + 464, 0, 0x3FFFFFFFFFFLL, 32, v138, 4);
      if (result) {
        return result;
      }
    }
    v128 += 4;
    v129 += 176;
  }
  while (v128 != 28);
  *(_DWORD *)(*(void *)v407 + 224) = 0;
  *(_DWORD *)(*(void *)v407 + 492) = 0;
  if ((*(unsigned char *)(v55 + 90) & 8) == 0) {
    goto LABEL_446;
  }
  uint64_t v139 = *((void *)this + 33);
  uint64_t v140 = *(void *)(*((void *)this + 32) + 2680);
  long long v419 = 0u;
  long long v420 = 0u;
  long long v417 = 0u;
  long long v418 = 0u;
  long long v415 = 0u;
  long long v416 = 0u;
  long long v413 = 0u;
  long long v414 = 0u;
  long long v412 = 0u;
  memset(buf, 0, sizeof(buf));
  int v141 = (*(_DWORD *)(v139 + 16) & 0xF) << 9;
  *(void *)CMTime buf = v140;
  int v142 = *(_DWORD *)(v139 + 224);
  *(_DWORD *)(v139 + 224) = 0;
  *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFF00;
  uint64_t v143 = *((void *)this + 33);
  int v144 = *(_DWORD *)(v143 + 224);
  *(_DWORD *)(v143 + 224) = v142;
  if (v140)
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 224, v141, 0xFFFFFFFFLL, 8, v144, 4);
    if (result) {
      return result;
    }
    uint64_t v145 = *(void *)buf;
    int v146 = DWORD2(v419);
    LODWORD(v140) = HIDWORD(v419);
  }
  else
  {
    int v146 = 0;
    uint64_t v145 = 0;
  }
  if ((*(_DWORD *)(*(void *)v407 + 492) = 0,
        int v150 = *(_DWORD *)(*(void *)v407 + 492),
        *(_DWORD *)(*(void *)v407 + 492) = 0,
        *(_DWORD *)(*(void *)v407 + 492) ^= 0x3FFu,
        int v151 = *(_DWORD *)(*(void *)v407 + 492),
        *(_DWORD *)(*(void *)v407 + 492) = v150,
        !v145)
    && !v146
    && !v140
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 492, v141, 0x3FFFFFFFFFFLL, 32, v151, 4), !result))
  {
LABEL_446:
    *(_DWORD *)(*((void *)this + 33) + 228) = 0;
    uint64_t v152 = *((void *)this + 33);
    int v153 = *(_DWORD *)(v152 + 228);
    *(_DWORD *)(v152 + 228) = 0;
    *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFF00;
    uint64_t v154 = *((void *)this + 33);
    int v155 = *(_DWORD *)(v154 + 228);
    *(_DWORD *)(v154 + 228) = v153;
    if (!*((void *)this + 1298) && !*((_DWORD *)this + 2634) && !*((_DWORD *)this + 2635)) {
      goto LABEL_458;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1298, 228, 0, 0xFFFFFFFFLL, 8, v155, 4);
    if (!result)
    {
LABEL_458:
      if ((*(_DWORD *)(*(void *)v407 + 496) = 0,
            int v156 = *(_DWORD *)(*(void *)v407 + 496),
            *(_DWORD *)(*(void *)v407 + 496) = 0,
            *(_DWORD *)(*(void *)v407 + 496) ^= 0x3FFu,
            int v157 = *(_DWORD *)(*(void *)v407 + 496),
            *(_DWORD *)(*(void *)v407 + 496) = v156,
            !*((void *)this + 1298))
        && !*((_DWORD *)this + 2634)
        && !*((_DWORD *)this + 2635)
        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1298, 496, 0, 0x3FFFFFFFFFFLL, 32, v157, 4), !result))
      {
        *(_DWORD *)(*((void *)this + 33) + 232) = 0;
        uint64_t v158 = *((void *)this + 33);
        int v159 = *(_DWORD *)(v158 + 232);
        *(_DWORD *)(v158 + 232) = 0;
        *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFF00;
        uint64_t v160 = *((void *)this + 33);
        int v161 = *(_DWORD *)(v160 + 232);
        *(_DWORD *)(v160 + 232) = v159;
        if (!*((void *)this + 1320) && !*((_DWORD *)this + 2678) && !*((_DWORD *)this + 2679)) {
          goto LABEL_459;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1320, 232, 0, 0xFFFFFFFFLL, 8, v161, 4);
        if (!result)
        {
LABEL_459:
          if ((*(_DWORD *)(*(void *)v407 + 500) = 0,
                int v162 = *(_DWORD *)(*(void *)v407 + 500),
                *(_DWORD *)(*(void *)v407 + 500) = 0,
                *(_DWORD *)(*(void *)v407 + 500) ^= 0x3FFu,
                int v163 = *(_DWORD *)(*(void *)v407 + 500),
                *(_DWORD *)(*(void *)v407 + 500) = v162,
                !*((void *)this + 1320))
            && !*((_DWORD *)this + 2678)
            && !*((_DWORD *)this + 2679)
            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1320, 500, 0, 0x3FFFFFFFFFFLL, 32, v163, 4), !result))
          {
            *(_DWORD *)(*((void *)this + 33) + 236) = 0;
            uint64_t v164 = *((void *)this + 33);
            int v165 = *(_DWORD *)(v164 + 236);
            *(_DWORD *)(v164 + 236) = 0;
            *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFF00;
            uint64_t v166 = *((void *)this + 33);
            int v167 = *(_DWORD *)(v166 + 236);
            *(_DWORD *)(v166 + 236) = v165;
            if (!*((void *)this + 1342) && !*((_DWORD *)this + 2722) && !*((_DWORD *)this + 2723)) {
              goto LABEL_460;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1342, 236, 0, 0xFFFFFFFFLL, 8, v167, 4);
            if (!result)
            {
LABEL_460:
              if ((*(_DWORD *)(*(void *)v407 + 504) = 0,
                    int v168 = *(_DWORD *)(*(void *)v407 + 504),
                    *(_DWORD *)(*(void *)v407 + 504) = 0,
                    *(_DWORD *)(*(void *)v407 + 504) ^= 0x3FFu,
                    int v169 = *(_DWORD *)(*(void *)v407 + 504),
                    *(_DWORD *)(*(void *)v407 + 504) = v168,
                    !*((void *)this + 1342))
                && !*((_DWORD *)this + 2722)
                && !*((_DWORD *)this + 2723)
                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1342, 504, 0, 0x3FFFFFFFFFFLL, 32, v169, 4), !result))
              {
                *(_DWORD *)(*((void *)this + 33) + 240) = 0;
                uint64_t v170 = *((void *)this + 33);
                int v171 = *(_DWORD *)(v170 + 240);
                *(_DWORD *)(v170 + 240) = 0;
                *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFF00;
                uint64_t v172 = *((void *)this + 33);
                int v173 = *(_DWORD *)(v172 + 240);
                *(_DWORD *)(v172 + 240) = v171;
                if (!*((void *)this + 1364) && !*((_DWORD *)this + 2766) && !*((_DWORD *)this + 2767)) {
                  goto LABEL_461;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1364, 240, 0, 0xFFFFFFFFLL, 8, v173, 4);
                if (!result)
                {
LABEL_461:
                  if ((*(_DWORD *)(*(void *)v407 + 508) = 0,
                        int v174 = *(_DWORD *)(*(void *)v407 + 508),
                        *(_DWORD *)(*(void *)v407 + 508) = 0,
                        *(_DWORD *)(*(void *)v407 + 508) ^= 0x3FFu,
                        int v175 = *(_DWORD *)(*(void *)v407 + 508),
                        *(_DWORD *)(*(void *)v407 + 508) = v174,
                        !*((void *)this + 1364))
                    && !*((_DWORD *)this + 2766)
                    && !*((_DWORD *)this + 2767)
                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1364, 508, 0, 0x3FFFFFFFFFFLL, 32, v175, 4), !result))
                  {
                    *(_DWORD *)(*((void *)this + 33) + 244) = 0;
                    uint64_t v176 = *((void *)this + 33);
                    int v177 = *(_DWORD *)(v176 + 244);
                    *(_DWORD *)(v176 + 244) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFF00;
                    uint64_t v178 = *((void *)this + 33);
                    int v179 = *(_DWORD *)(v178 + 244);
                    *(_DWORD *)(v178 + 244) = v177;
                    if (!*((void *)this + 1386) && !*((_DWORD *)this + 2810) && !*((_DWORD *)this + 2811)) {
                      goto LABEL_462;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1386, 244, 0, 0xFFFFFFFFLL, 8, v179, 4);
                    if (!result)
                    {
LABEL_462:
                      if ((*(_DWORD *)(*(void *)v407 + 512) = 0,
                            int v180 = *(_DWORD *)(*(void *)v407 + 512),
                            *(_DWORD *)(*(void *)v407 + 512) = 0,
                            *(_DWORD *)(*(void *)v407 + 512) ^= 0x3FFu,
                            int v181 = *(_DWORD *)(*(void *)v407 + 512),
                            *(_DWORD *)(*(void *)v407 + 512) = v180,
                            !*((void *)this + 1386))
                        && !*((_DWORD *)this + 2810)
                        && !*((_DWORD *)this + 2811)
                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1386, 512, 0, 0x3FFFFFFFFFFLL, 32, v181, 4), !result))
                      {
                        *(_DWORD *)(*((void *)this + 33) + 268) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 536) = 0;
                        if (*(_DWORD *)(*((void *)this + 32) + 16) != 2) {
                          goto LABEL_463;
                        }
                        uint64_t v182 = *((void *)this + 33);
                        int v183 = *(_DWORD *)(v182 + 268);
                        *(_DWORD *)(v182 + 268) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFF00;
                        uint64_t v184 = *((void *)this + 33);
                        int v185 = *(_DWORD *)(v184 + 268);
                        *(_DWORD *)(v184 + 268) = v183;
                        if (!*((void *)this + 1474) && !*((_DWORD *)this + 2986) && !*((_DWORD *)this + 2987)) {
                          goto LABEL_464;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1474, 268, 0, 0xFFFFFFFFLL, 8, v185, 4);
                        if (!result)
                        {
LABEL_464:
                          if ((int v186 = *(_DWORD *)(*(void *)v407 + 536),
                                *(_DWORD *)(*(void *)v407 + 536) = 0,
                                *(_DWORD *)(*(void *)v407 + 536) ^= 0x3FFu,
                                int v187 = *(_DWORD *)(*(void *)v407 + 536),
                                *(_DWORD *)(*(void *)v407 + 536) = v186,
                                !*((void *)this + 1474))
                            && !*((_DWORD *)this + 2986)
                            && !*((_DWORD *)this + 2987)
                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1474, 536, 0, 0x3FFFFFFFFFFLL, 32, v187, 4), !result))
                          {
LABEL_463:
                            *(_DWORD *)(*((void *)this + 33) + 248) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 516) = 0;
                            uint64_t v188 = *((void *)this + 33);
                            int v189 = *(_DWORD *)(v188 + 248);
                            *(_DWORD *)(v188 + 248) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFF00;
                            uint64_t v190 = *((void *)this + 33);
                            int v191 = *(_DWORD *)(v190 + 248);
                            *(_DWORD *)(v190 + 248) = v189;
                            if (!*((void *)this + 1408) && !*((_DWORD *)this + 2854) && !*((_DWORD *)this + 2855)) {
                              goto LABEL_447;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1408, 248, 0, 0xFFFFFFFFLL, 8, v191, 4);
                            if (!result)
                            {
LABEL_447:
                              if ((int v192 = *(_DWORD *)(*(void *)v407 + 516),
                                    *(_DWORD *)(*(void *)v407 + 516) = 0,
                                    *(_DWORD *)(*(void *)v407 + 516) ^= 0x3FFu,
                                    int v193 = *(_DWORD *)(*(void *)v407 + 516),
                                    *(_DWORD *)(*(void *)v407 + 516) = v192,
                                    !*((void *)this + 1408))
                                && !*((_DWORD *)this + 2854)
                                && !*((_DWORD *)this + 2855)
                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1408, 516, 0, 0x3FFFFFFFFFFLL, 32, v193, 4), !result))
                              {
                                *(_DWORD *)(*((void *)this + 33) + 252) = 0;
                                uint64_t v194 = *((void *)this + 33);
                                int v195 = *(_DWORD *)(v194 + 252);
                                *(_DWORD *)(v194 + 252) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFF00;
                                uint64_t v196 = *((void *)this + 33);
                                int v197 = *(_DWORD *)(v196 + 252);
                                *(_DWORD *)(v196 + 252) = v195;
                                if (!*((void *)this + 924) && !*((_DWORD *)this + 1886) && !*((_DWORD *)this + 1887)) {
                                  goto LABEL_448;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 924, 252, 0, 0xFFFFFFFFLL, 8, v197, 4);
                                if (!result)
                                {
LABEL_448:
                                  if ((*(_DWORD *)(*(void *)v407 + 520) = 0,
                                        int v198 = *(_DWORD *)(*(void *)v407 + 520),
                                        *(_DWORD *)(*(void *)v407 + 520) = 0,
                                        *(_DWORD *)(*(void *)v407 + 520) ^= 0x3FFu,
                                        int v199 = *(_DWORD *)(*(void *)v407 + 520),
                                        *(_DWORD *)(*(void *)v407 + 520) = v198,
                                        !*((void *)this + 924))
                                    && !*((_DWORD *)this + 1886)
                                    && !*((_DWORD *)this + 1887)
                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 924, 520, 0, 0x3FFFFFFFFFFLL, 32, v199, 4), !result))
                                  {
                                    *(_DWORD *)(*((void *)this + 33) + 256) = 0;
                                    uint64_t v200 = *((void *)this + 33);
                                    int v201 = *(_DWORD *)(v200 + 256);
                                    *(_DWORD *)(v200 + 256) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFF00;
                                    uint64_t v202 = *((void *)this + 33);
                                    int v203 = *(_DWORD *)(v202 + 256);
                                    *(_DWORD *)(v202 + 256) = v201;
                                    uint64_t v204 = (void *)((char *)this + 176 * v397 + 7568);
                                    if (!*v204
                                      && !*((_DWORD *)this + 44 * v397 + 1930)
                                      && !*((_DWORD *)this + 44 * v397 + 1931))
                                    {
                                      goto LABEL_449;
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v397 + 946, 256, 0, 0xFFFFFFFFLL, 8, v203, 4);
                                    if (!result)
                                    {
LABEL_449:
                                      if ((*(_DWORD *)(*(void *)v407 + 524) = 0,
                                            int v205 = *(_DWORD *)(*(void *)v407 + 524),
                                            *(_DWORD *)(*(void *)v407 + 524) = 0,
                                            *(_DWORD *)(*(void *)v407 + 524) ^= 0x3FFu,
                                            int v206 = *(_DWORD *)(*(void *)v407 + 524),
                                            *(_DWORD *)(*(void *)v407 + 524) = v205,
                                            !*v204)
                                        && !*((_DWORD *)this + 44 * v397 + 1930)
                                        && !*((_DWORD *)this + 44 * v397 + 1931)
                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 524, 0, 0x3FFFFFFFFFFLL, 32, v206, 4), !result))
                                      {
                                        *(_DWORD *)(*((void *)this + 33) + 260) = 0;
                                        uint64_t v207 = *((void *)this + 33);
                                        int v208 = *(_DWORD *)(v207 + 260);
                                        *(_DWORD *)(v207 + 260) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFF00;
                                        uint64_t v209 = *((void *)this + 33);
                                        int v210 = *(_DWORD *)(v209 + 260);
                                        *(_DWORD *)(v209 + 260) = v208;
                                        if (!*((void *)this + 1430)
                                          && !*((_DWORD *)this + 2898)
                                          && !*((_DWORD *)this + 2899))
                                        {
                                          goto LABEL_450;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1430, 260, 0, 0xFFFFFFFFLL, 8, v210, 4);
                                        if (!result)
                                        {
LABEL_450:
                                          if ((*(_DWORD *)(*(void *)v407 + 528) = 0,
                                                int v211 = *(_DWORD *)(*(void *)v407 + 528),
                                                *(_DWORD *)(*(void *)v407 + 528) = 0,
                                                *(_DWORD *)(*(void *)v407 + 528) ^= 0x3FFu,
                                                int v212 = *(_DWORD *)(*(void *)v407 + 528),
                                                *(_DWORD *)(*(void *)v407 + 528) = v211,
                                                !*((void *)this + 1430))
                                            && !*((_DWORD *)this + 2898)
                                            && !*((_DWORD *)this + 2899)
                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1430, 528, 0, 0x3FFFFFFFFFFLL, 32, v212, 4), !result))
                                          {
                                            *(_DWORD *)(*((void *)this + 33) + 264) = 0;
                                            uint64_t v213 = *((void *)this + 33);
                                            int v214 = *(_DWORD *)(v213 + 264);
                                            *(_DWORD *)(v213 + 264) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFF00;
                                            uint64_t v215 = *((void *)this + 33);
                                            int v216 = *(_DWORD *)(v215 + 264);
                                            *(_DWORD *)(v215 + 264) = v214;
                                            if (!*((void *)this + 1452)
                                              && !*((_DWORD *)this + 2942)
                                              && !*((_DWORD *)this + 2943))
                                            {
                                              goto LABEL_451;
                                            }
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1452, 264, 0, 0xFFFFFFFFLL, 8, v216, 4);
                                            if (!result)
                                            {
LABEL_451:
                                              if ((*(_DWORD *)(*(void *)v407 + 532) = 0,
                                                    int v217 = *(_DWORD *)(*(void *)v407 + 532),
                                                    *(_DWORD *)(*(void *)v407 + 532) = 0,
                                                    *(_DWORD *)(*(void *)v407 + 532) ^= 0x3FFu,
                                                    int v218 = *(_DWORD *)(*(void *)v407 + 532),
                                                    *(_DWORD *)(*(void *)v407 + 532) = v217,
                                                    !*((void *)this + 1452))
                                                && !*((_DWORD *)this + 2942)
                                                && !*((_DWORD *)this + 2943)
                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1452, 532, 0, 0x3FFFFFFFFFFLL, 32, v218, 4), !result))
                                              {
                                                *(_DWORD *)(*((void *)this + 33) + 272) = 0;
                                                uint64_t v219 = *((void *)this + 33);
                                                int v220 = *(_DWORD *)(v219 + 272);
                                                *(_DWORD *)(v219 + 272) = 0;
                                                *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFF80;
                                                uint64_t v221 = *((void *)this + 33);
                                                int v222 = *(_DWORD *)(v221 + 272);
                                                *(_DWORD *)(v221 + 272) = v220;
                                                uint64_t v223 = (void *)((char *)this + 176 * v397 + 528);
                                                if (!*v223
                                                  && !*((_DWORD *)this + 44 * v397 + 170)
                                                  && !*((_DWORD *)this + 44 * v397 + 171))
                                                {
                                                  goto LABEL_452;
                                                }
                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v397 + 66, 272, 0, 0xFFFFFFFFLL, 7, v222, 4);
                                                if (!result)
                                                {
LABEL_452:
                                                  if ((*(_DWORD *)(*(void *)v407 + 540) = 0,
                                                        int v224 = *(_DWORD *)(*(void *)v407 + 540),
                                                        *(_DWORD *)(*(void *)v407 + 540) = 0,
                                                        *(_DWORD *)(*(void *)v407 + 540) ^= 0x3FFu,
                                                        int v225 = *(_DWORD *)(*(void *)v407 + 540),
                                                        *(_DWORD *)(*(void *)v407 + 540) = v224,
                                                        !*v223)
                                                    && !*((_DWORD *)this + 44 * v397 + 170)
                                                    && !*((_DWORD *)this + 44 * v397 + 171)
                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v223, 540, 0, 0x3FFFFFFFFFFLL, 32, v225, 4), !result))
                                                  {
                                                    *(_DWORD *)(*(void *)v407 + 276) = 0;
                                                    int v226 = *(_DWORD *)(*(void *)v407 + 276);
                                                    *(_DWORD *)(*(void *)v407 + 276) = 0;
                                                    *(_DWORD *)(*(void *)v407 + 276) ^= 0xFFFFFF80;
                                                    int v227 = *(_DWORD *)(*(void *)v407 + 276);
                                                    *(_DWORD *)(*(void *)v407 + 276) = v226;
                                                    uint64_t v228 = (void *)(v391 + 8);
                                                    if (!*(void *)(v391 + 8)
                                                      && !*(_DWORD *)(v391 + 160)
                                                      && !*(_DWORD *)(v391 + 164))
                                                    {
                                                      goto LABEL_453;
                                                    }
                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v391 + 8), 276, *(_DWORD *)(v391 + 60), 0xFFFFFFFFLL, 7, v227, 4);
                                                    if (!result)
                                                    {
LABEL_453:
                                                      if ((*(_DWORD *)(*(void *)v407 + 544) = 0,
                                                            int v229 = *(_DWORD *)(*(void *)v407 + 544),
                                                            *(_DWORD *)(*(void *)v407 + 544) = 0,
                                                            *(_DWORD *)(*(void *)v407 + 544) ^= 0x3FFu,
                                                            int v230 = *(_DWORD *)(*(void *)v407 + 544),
                                                            *(_DWORD *)(*(void *)v407 + 544) = v229,
                                                            !*v228)
                                                        && !*(_DWORD *)(v391 + 160)
                                                        && !*(_DWORD *)(v391 + 164)
                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v228, 544, *(_DWORD *)(v391 + 60), 0x3FFFFFFFFFFLL, 32, v230, 4), !result))
                                                      {
                                                        *(_DWORD *)(*((void *)this + 33) + 280) = 0;
                                                        uint64_t v231 = *((void *)this + 33);
                                                        int v232 = *(_DWORD *)(v231 + 280);
                                                        *(_DWORD *)(v231 + 280) = 0;
                                                        *(_DWORD *)(*((void *)this + 33) + 280) ^= 0xFFFFFF80;
                                                        uint64_t v233 = *((void *)this + 33);
                                                        int v234 = *(_DWORD *)(v233 + 280);
                                                        *(_DWORD *)(v233 + 280) = v232;
                                                        uint64_t v235 = (void *)((char *)this + 176 * v397 + 3344);
                                                        if (!*v235
                                                          && !*((_DWORD *)this + 44 * v397 + 874)
                                                          && !*((_DWORD *)this + 44 * v397 + 875))
                                                        {
                                                          goto LABEL_454;
                                                        }
                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v397 + 418, 280, 0, 0xFFFFFFFFLL, 7, v234, 4);
                                                        if (!result)
                                                        {
LABEL_454:
                                                          if ((*(_DWORD *)(*(void *)v407 + 548) = 0,
                                                                int v236 = *(_DWORD *)(*(void *)v407 + 548),
                                                                *(_DWORD *)(*(void *)v407 + 548) = 0,
                                                                *(_DWORD *)(*(void *)v407 + 548) ^= 0x3FFu,
                                                                int v237 = *(_DWORD *)(*(void *)v407 + 548),
                                                                *(_DWORD *)(*(void *)v407 + 548) = v236,
                                                                !*v235)
                                                            && !*((_DWORD *)this + 44 * v397 + 874)
                                                            && !*((_DWORD *)this + 44 * v397 + 875)
                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v235, 548, 0, 0x3FFFFFFFFFFLL, 32, v237, 4), !result))
                                                          {
                                                            if ((*(_DWORD *)(*(void *)v407 + 284) = 0,
                                                                  int v238 = *(_DWORD *)(*(void *)v407 + 284),
                                                                  *(_DWORD *)(*(void *)v407 + 284) = 0,
                                                                  *(_DWORD *)(*(void *)v407 + 284) ^= 0xFFFFFF80,
                                                                  int v239 = *(_DWORD *)(*(void *)v407 + 284),
                                                                  *(_DWORD *)(*(void *)v407 + 284) = v238,
                                                                  !*v228)
                                                              && !*(_DWORD *)(v391 + 160)
                                                              && !*(_DWORD *)(v391 + 164)
                                                              || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v228, 284, *(_DWORD *)(v391 + 64), 0xFFFFFFFFLL, 7, v239, 4), !result))
                                                            {
                                                              if ((*(_DWORD *)(*(void *)v407 + 552) = 0,
                                                                    int v240 = *(_DWORD *)(*(void *)v407 + 552),
                                                                    *(_DWORD *)(*(void *)v407 + 552) = 0,
                                                                    *(_DWORD *)(*(void *)v407 + 552) ^= 0x3FFu,
                                                                    int v241 = *(_DWORD *)(*(void *)v407 + 552),
                                                                    *(_DWORD *)(*(void *)v407 + 552) = v240,
                                                                    !*v228)
                                                                && !*(_DWORD *)(v391 + 160)
                                                                && !*(_DWORD *)(v391 + 164)
                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v228, 552, *(_DWORD *)(v391 + 64), 0x3FFFFFFFFFFLL, 32, v241, 4), !result))
                                                              {
                                                                if (*(_DWORD *)(*((void *)this + 32) + 2648) != 1) {
                                                                  goto LABEL_302;
                                                                }
                                                                if ((int v242 = *(_DWORD *)(*(void *)v407 + 276),
                                                                      *(_DWORD *)(*(void *)v407 + 276) = 0,
                                                                      *(_DWORD *)(*(void *)v407 + 276) ^= 0xFFFFFF80,
                                                                      int v243 = *(_DWORD *)(*(void *)v407 + 276),
                                                                      *(_DWORD *)(*(void *)v407 + 276) = v242,
                                                                      !*v228)
                                                                  && !*(_DWORD *)(v391 + 160)
                                                                  && !*(_DWORD *)(v391 + 164)
                                                                  || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v228, 276, *(_DWORD *)(v391 + 60), 0xFFFFFFFFLL, 7, v243, 4), !result))
                                                                {
                                                                  if ((int v244 = *(_DWORD *)(*(void *)v407 + 284),
                                                                        *(_DWORD *)(*(void *)v407 + 284) = 0,
                                                                        *(_DWORD *)(*(void *)v407 + 284) ^= 0xFFFFFF80,
                                                                        int v245 = *(_DWORD *)(*(void *)v407 + 284),
                                                                        *(_DWORD *)(*(void *)v407 + 284) = v244,
                                                                        !*v228)
                                                                    && !*(_DWORD *)(v391 + 160)
                                                                    && !*(_DWORD *)(v391 + 164)
                                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v228, 284, *(_DWORD *)(v391 + 64), 0xFFFFFFFFLL, 7, v245, 4), !result))
                                                                  {
                                                                    if ((int v246 = *(_DWORD *)(*(void *)v407 + 272),
                                                                          *(_DWORD *)(*(void *)v407 + 272) = 0,
                                                                          *(_DWORD *)(*(void *)v407 + 272) ^= 0xFFFFFF80,
                                                                          int v247 = *(_DWORD *)(*(void *)v407 + 272),
                                                                          *(_DWORD *)(*(void *)v407 + 272) = v246,
                                                                          !*v228)
                                                                      && !*(_DWORD *)(v391 + 160)
                                                                      && !*(_DWORD *)(v391 + 164)
                                                                      || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v228, 272, *(_DWORD *)(v391 + 72), 0xFFFFFFFFLL, 7, v247, 4), !result))
                                                                    {
                                                                      if ((int v248 = *(_DWORD *)(*(void *)v407 + 280),
                                                                            *(_DWORD *)(*(void *)v407 + 280) = 0,
                                                                            *(_DWORD *)(*(void *)v407 + 280) ^= 0xFFFFFF80,
                                                                            int v249 = *(_DWORD *)(*(void *)v407 + 280),
                                                                            *(_DWORD *)(*(void *)v407 + 280) = v248,
                                                                            !*v228)
                                                                        && !*(_DWORD *)(v391 + 160)
                                                                        && !*(_DWORD *)(v391 + 164)
                                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v228, 280, *(_DWORD *)(v391 + 76), 0xFFFFFFFFLL, 7, v249, 4), !result))
                                                                      {
                                                                        if ((int v250 = *(_DWORD *)(*(void *)v407 + 544),
                                                                              *(_DWORD *)(*(void *)v407 + 544) = 0,
                                                                              *(_DWORD *)(*(void *)v407 + 544) ^= 0x3FFu,
                                                                              int v251 = *(_DWORD *)(*(void *)v407 + 544),
                                                                              *(_DWORD *)(*(void *)v407 + 544) = v250,
                                                                              !*v228)
                                                                          && !*(_DWORD *)(v391 + 160)
                                                                          && !*(_DWORD *)(v391 + 164)
                                                                          || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v228, 544, *(_DWORD *)(v391 + 60), 0x3FFFFFFFFFFLL, 32, v251, 4), !result))
                                                                        {
                                                                          if ((int v252 = *(_DWORD *)(*(void *)v407
                                                                                                 + 552),
                                                                                *(_DWORD *)(*(void *)v407 + 552) = 0,
                                                                                *(_DWORD *)(*(void *)v407 + 552) ^= 0x3FFu,
                                                                                int v253 = *(_DWORD *)(*(void *)v407
                                                                                                 + 552),
                                                                                *(_DWORD *)(*(void *)v407 + 552) = v252,
                                                                                !*v228)
                                                                            && !*(_DWORD *)(v391 + 160)
                                                                            && !*(_DWORD *)(v391 + 164)
                                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v228, 552, *(_DWORD *)(v391 + 64), 0x3FFFFFFFFFFLL, 32, v253, 4), !result))
                                                                          {
                                                                            if ((int v254 = *(_DWORD *)(*(void *)v407 + 540),
                                                                                  *(_DWORD *)(*(void *)v407 + 540) = 0,
                                                                                  *(_DWORD *)(*(void *)v407 + 540) ^= 0x3FFu,
                                                                                  int v255 = *(_DWORD *)(*(void *)v407 + 540),
                                                                                  *(_DWORD *)(*(void *)v407 + 540) = v254,
                                                                                  !*v228)
                                                                              && !*(_DWORD *)(v391 + 160)
                                                                              && !*(_DWORD *)(v391 + 164)
                                                                              || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v228, 540, *(_DWORD *)(v391 + 72), 0x3FFFFFFFFFFLL, 32, v255, 4), !result))
                                                                            {
                                                                              if ((int v256 = *(_DWORD *)(*(void *)v407 + 548),
                                                                                    *(_DWORD *)(*(void *)v407 + 548) = 0,
                                                                                    *(_DWORD *)(*(void *)v407 + 548) ^= 0x3FFu,
                                                                                    int v257 = *(_DWORD *)(*(void *)v407 + 548),
                                                                                    *(_DWORD *)(*(void *)v407 + 548) = v256,
                                                                                    !*v228)
                                                                                && !*(_DWORD *)(v391 + 160)
                                                                                && !*(_DWORD *)(v391 + 164)
                                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v228, 548, *(_DWORD *)(v391 + 76), 0x3FFFFFFFFFFLL, 32, v257, 4), !result))
                                                                              {
LABEL_302:
                                                                                int v387 = v65;
                                                                                if (*(_DWORD *)(v55 + 88) & 0x2000 | v393)
                                                                                {
                                                                                  *((_DWORD *)this + v397 + 116) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 288) = 0;
                                                                                  if (v393)
                                                                                  {
                                                                                    uint64_t v258 = 0;
                                                                                    uint64_t v259 = 4 * v393;
                                                                                    long long v260 = (uint64_t *)v423;
                                                                                    long long v261 = (void **)v422;
                                                                                    int v409 = (void **)v421;
                                                                                    int v388 = (v393 << 28)
                                                                                         - 0x10000000;
                                                                                    do
                                                                                    {
                                                                                      uint64_t v262 = *v260;
                                                                                      if (!*v260
                                                                                        || !*(void *)(v262 + 48))
                                                                                      {
                                                                                        return 0xFFFFFFFFLL;
                                                                                      }
                                                                                      int v263 = v405;
                                                                                      if (v405)
                                                                                      {
                                                                                        uint64_t v264 = *(unsigned int *)(v262 + 44);
                                                                                        *(void *)CMTime buf = 0;
                                                                                        if (((*(uint64_t (**)(void, uint64_t, uint8_t *))(**((void **)this + 32) + 304))(*((void *)this + 32), v264, buf) & 1) == 0)
                                                                                        {
                                                                                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                                          __int16 v410 = 0;
                                                                                          }
                                                                                          unsigned int v52 = &_os_log_internal;
                                                                                          uint64_t v53 = "AppleAVD: decodeGetRende"
                                                                                                "rTargetRef RETURNED ERROR\n";
                                                                                          int16x8_t v148 = (uint8_t *)&v410;
                                                                                          uint32_t v149 = 2;
                                                                                          goto LABEL_140;
                                                                                        }
                                                                                        *(void *)(v262 + 48) = *(void *)buf + 8;
                                                                                        int v263 = 0x2000000;
                                                                                      }
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 288) = 0;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 288) = *(_DWORD *)(*(void *)v407 + v258 + 288) & 0xFFFFFFF | v388;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 288) &= 0xF3FFFFFF;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 288) = *(_DWORD *)(*(void *)v407 + v258 + 288) & 0xFDFFFFFF | v263;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 288) |= 0x1000000u;
                                                                                      int v265 = v395
                                                                                           - *(_DWORD *)(v262 + 12);
                                                                                      int v266 = v265 & 0x1FFFF;
                                                                                      if (v265 < -32768) {
                                                                                        int v266 = 98304;
                                                                                      }
                                                                                      if (v265 <= 0x8000) {
                                                                                        int v267 = v266;
                                                                                      }
                                                                                      else {
                                                                                        int v267 = 0x8000;
                                                                                      }
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 288) = *(_DWORD *)(*(void *)v407 + v258 + 288) & 0xFFFE0000 | v267;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 288) = *(_DWORD *)(*(void *)v407 + v258 + 288) & 0xFFFDFFFF | ((*(_DWORD *)(v262 + 20) == 2) << 17);
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 320) = 0;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 556) = 0;
                                                                                      int v404 = v258 + 320;
                                                                                      uint64_t v268 = *(void *)v407 + v258;
                                                                                      int v269 = *(_DWORD *)(v268 + 320);
                                                                                      *(_DWORD *)(v268 + 320) = 0;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 320) ^= 0xFFFFFF80;
                                                                                      uint64_t v270 = *(void *)v407 + v258;
                                                                                      int v271 = *(_DWORD *)(v270 + 320);
                                                                                      *(_DWORD *)(v270 + 320) = v269;
                                                                                      uint64_t v272 = (uint64_t)*v261;
                                                                                      if (**v261
                                                                                        || *(_DWORD *)(v272 + 152)
                                                                                        || *(_DWORD *)(v272 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v261, v404, 0, 0xFFFFFFFFLL, 7, v271, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      int v400 = v258 + 556;
                                                                                      uint64_t v273 = *(void *)v407 + v258;
                                                                                      int v274 = *(_DWORD *)(v273 + 556);
                                                                                      *(_DWORD *)(v273 + 556) = 0;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 556) ^= 0x3FFu;
                                                                                      uint64_t v275 = *(void *)v407 + v258;
                                                                                      int v276 = *(_DWORD *)(v275 + 556);
                                                                                      *(_DWORD *)(v275 + 556) = v274;
                                                                                      if (*(void *)v272
                                                                                        || *(_DWORD *)(v272 + 152)
                                                                                        || *(_DWORD *)(v272 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v272, v400, 0, 0x3FFFFFFFFFFLL, 32, v276, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 352) = 0;
                                                                                      int v402 = v258 + 352;
                                                                                      uint64_t v277 = *(void *)v407 + v258;
                                                                                      int v278 = *(_DWORD *)(v277 + 352);
                                                                                      *(_DWORD *)(v277 + 352) = 0;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 352) ^= 0xFFFFFF80;
                                                                                      uint64_t v279 = *(void *)v407 + v258;
                                                                                      int v280 = *(_DWORD *)(v279 + 352);
                                                                                      *(_DWORD *)(v279 + 352) = v278;
                                                                                      uint64_t v281 = *(void *)(v262 + 48);
                                                                                      if (*(void *)v281
                                                                                        || *(_DWORD *)(v281 + 152)
                                                                                        || *(_DWORD *)(v281 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v281, v402, *(_DWORD *)(v281 + 52), 0xFFFFFFFFLL, 7, v280, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 588) = 0;
                                                                                      int v398 = v258 + 588;
                                                                                      uint64_t v282 = *(void *)v407 + v258;
                                                                                      int v283 = *(_DWORD *)(v282 + 588);
                                                                                      *(_DWORD *)(v282 + 588) = 0;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 588) ^= 0x3FFu;
                                                                                      uint64_t v284 = *(void *)v407 + v258;
                                                                                      int v285 = *(_DWORD *)(v284 + 588);
                                                                                      *(_DWORD *)(v284 + 588) = v283;
                                                                                      uint64_t v286 = *(void *)(v262 + 48);
                                                                                      if (*(void *)v286
                                                                                        || *(_DWORD *)(v286 + 152)
                                                                                        || *(_DWORD *)(v286 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v286, v398, *(_DWORD *)(v286 + 52), 0x3FFFFFFFFFFLL, 32, v285, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 384) = 0;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 620) = 0;
                                                                                      int v394 = v258 + 384;
                                                                                      uint64_t v287 = *(void *)v407 + v258;
                                                                                      int v288 = *(_DWORD *)(v287 + 384);
                                                                                      *(_DWORD *)(v287 + 384) = 0;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 384) ^= 0xFFFFFF80;
                                                                                      uint64_t v289 = *(void *)v407 + v258;
                                                                                      int v290 = *(_DWORD *)(v289 + 384);
                                                                                      *(_DWORD *)(v289 + 384) = v288;
                                                                                      uint64_t v291 = (uint64_t)*v409;
                                                                                      if (**v409
                                                                                        || *(_DWORD *)(v291 + 152)
                                                                                        || *(_DWORD *)(v291 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v409, v394, 0, 0xFFFFFFFFLL, 7, v290, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      int v392 = v258 + 620;
                                                                                      uint64_t v292 = *(void *)v407 + v258;
                                                                                      int v293 = *(_DWORD *)(v292 + 620);
                                                                                      *(_DWORD *)(v292 + 620) = 0;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 620) ^= 0x3FFu;
                                                                                      uint64_t v294 = *(void *)v407 + v258;
                                                                                      int v295 = *(_DWORD *)(v294 + 620);
                                                                                      *(_DWORD *)(v294 + 620) = v293;
                                                                                      if (*(void *)v291
                                                                                        || *(_DWORD *)(v291 + 152)
                                                                                        || *(_DWORD *)(v291 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v291, v392, 0, 0x3FFFFFFFFFFLL, 32, v295, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 416) = 0;
                                                                                      uint64_t v296 = *(void *)v407 + v258;
                                                                                      int v297 = *(_DWORD *)(v296 + 416);
                                                                                      *(_DWORD *)(v296 + 416) = 0;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 416) ^= 0xFFFFFF80;
                                                                                      uint64_t v298 = *(void *)v407 + v258;
                                                                                      int v299 = *(_DWORD *)(v298 + 416);
                                                                                      *(_DWORD *)(v298 + 416) = v297;
                                                                                      uint64_t v300 = *(void *)(v262 + 48);
                                                                                      if (*(void *)v300
                                                                                        || *(_DWORD *)(v300 + 152)
                                                                                        || *(_DWORD *)(v300 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v300, (int)v258 + 416, *(_DWORD *)(v300 + 56), 0xFFFFFFFFLL, 7, v299, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 652) = 0;
                                                                                      int v390 = v258 + 652;
                                                                                      uint64_t v301 = *(void *)v407 + v258;
                                                                                      int v302 = *(_DWORD *)(v301 + 652);
                                                                                      *(_DWORD *)(v301 + 652) = 0;
                                                                                      *(_DWORD *)(*(void *)v407
                                                                                                + v258
                                                                                                + 652) ^= 0x3FFu;
                                                                                      uint64_t v303 = *(void *)v407 + v258;
                                                                                      int v304 = *(_DWORD *)(v303 + 652);
                                                                                      *(_DWORD *)(v303 + 652) = v302;
                                                                                      uint64_t v305 = *(void *)(v262 + 48);
                                                                                      if (*(void *)v305
                                                                                        || *(_DWORD *)(v305 + 152)
                                                                                        || *(_DWORD *)(v305 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v305, v390, *(_DWORD *)(v305 + 56), 0x3FFFFFFFFFFLL, 32, v304, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                                                                                      {
                                                                                        uint64_t v306 = *(void *)v407 + v258;
                                                                                        int v307 = *(_DWORD *)(v306 + 352);
                                                                                        *(_DWORD *)(v306 + 352) = 0;
                                                                                        *(_DWORD *)(*(void *)v407
                                                                                                  + v258
                                                                                                  + 352) ^= 0xFFFFFF80;
                                                                                        uint64_t v308 = *(void *)v407 + v258;
                                                                                        int v309 = *(_DWORD *)(v308 + 352);
                                                                                        *(_DWORD *)(v308 + 352) = v307;
                                                                                        uint64_t v310 = *(void *)(v262 + 48);
                                                                                        if (*(void *)v310
                                                                                          || *(_DWORD *)(v310 + 152)
                                                                                          || *(_DWORD *)(v310 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v310, v402, *(_DWORD *)(v310 + 52), 0xFFFFFFFFLL, 7, v309, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v311 = *(void *)v407 + v258;
                                                                                        int v312 = *(_DWORD *)(v311 + 416);
                                                                                        *(_DWORD *)(v311 + 416) = 0;
                                                                                        *(_DWORD *)(*(void *)v407
                                                                                                  + v258
                                                                                                  + 416) ^= 0xFFFFFF80;
                                                                                        uint64_t v313 = *(void *)v407 + v258;
                                                                                        int v314 = *(_DWORD *)(v313 + 416);
                                                                                        *(_DWORD *)(v313 + 416) = v312;
                                                                                        uint64_t v315 = *(void *)(v262 + 48);
                                                                                        if (*(void *)v315
                                                                                          || *(_DWORD *)(v315 + 152)
                                                                                          || *(_DWORD *)(v315 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v315, (int)v258 + 416, *(_DWORD *)(v315 + 56), 0xFFFFFFFFLL, 7, v314, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v316 = *(void *)v407 + v258;
                                                                                        int v317 = *(_DWORD *)(v316 + 320);
                                                                                        *(_DWORD *)(v316 + 320) = 0;
                                                                                        *(_DWORD *)(*(void *)v407
                                                                                                  + v258
                                                                                                  + 320) ^= 0xFFFFFF80;
                                                                                        uint64_t v318 = *(void *)v407 + v258;
                                                                                        int v319 = *(_DWORD *)(v318 + 320);
                                                                                        *(_DWORD *)(v318 + 320) = v317;
                                                                                        uint64_t v320 = *(void *)(v262 + 48);
                                                                                        if (*(void *)v320
                                                                                          || *(_DWORD *)(v320 + 152)
                                                                                          || *(_DWORD *)(v320 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v320, v404, *(_DWORD *)(v320 + 64), 0xFFFFFFFFLL, 7, v319, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v321 = *(void *)v407 + v258;
                                                                                        int v322 = *(_DWORD *)(v321 + 384);
                                                                                        *(_DWORD *)(v321 + 384) = 0;
                                                                                        *(_DWORD *)(*(void *)v407
                                                                                                  + v258
                                                                                                  + 384) ^= 0xFFFFFF80;
                                                                                        uint64_t v323 = *(void *)v407 + v258;
                                                                                        int v324 = *(_DWORD *)(v323 + 384);
                                                                                        *(_DWORD *)(v323 + 384) = v322;
                                                                                        uint64_t v325 = *(void *)(v262 + 48);
                                                                                        if (*(void *)v325
                                                                                          || *(_DWORD *)(v325 + 152)
                                                                                          || *(_DWORD *)(v325 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v325, v394, *(_DWORD *)(v325 + 68), 0xFFFFFFFFLL, 7, v324, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v326 = *(void *)v407 + v258;
                                                                                        int v327 = *(_DWORD *)(v326 + 588);
                                                                                        *(_DWORD *)(v326 + 588) = 0;
                                                                                        *(_DWORD *)(*(void *)v407
                                                                                                  + v258
                                                                                                  + 588) ^= 0x3FFu;
                                                                                        uint64_t v328 = *(void *)v407 + v258;
                                                                                        int v329 = *(_DWORD *)(v328 + 588);
                                                                                        *(_DWORD *)(v328 + 588) = v327;
                                                                                        uint64_t v330 = *(void *)(v262 + 48);
                                                                                        if (*(void *)v330
                                                                                          || *(_DWORD *)(v330 + 152)
                                                                                          || *(_DWORD *)(v330 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v330, v398, *(_DWORD *)(v330 + 52), 0x3FFFFFFFFFFLL, 32, v329, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v331 = *(void *)v407 + v258;
                                                                                        int v332 = *(_DWORD *)(v331 + 652);
                                                                                        *(_DWORD *)(v331 + 652) = 0;
                                                                                        *(_DWORD *)(*(void *)v407
                                                                                                  + v258
                                                                                                  + 652) ^= 0x3FFu;
                                                                                        uint64_t v333 = *(void *)v407 + v258;
                                                                                        int v334 = *(_DWORD *)(v333 + 652);
                                                                                        *(_DWORD *)(v333 + 652) = v332;
                                                                                        uint64_t v335 = *(void *)(v262 + 48);
                                                                                        if (*(void *)v335
                                                                                          || *(_DWORD *)(v335 + 152)
                                                                                          || *(_DWORD *)(v335 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v335, v390, *(_DWORD *)(v335 + 56), 0x3FFFFFFFFFFLL, 32, v334, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v336 = *(void *)v407 + v258;
                                                                                        int v337 = *(_DWORD *)(v336 + 556);
                                                                                        *(_DWORD *)(v336 + 556) = 0;
                                                                                        *(_DWORD *)(*(void *)v407
                                                                                                  + v258
                                                                                                  + 556) ^= 0x3FFu;
                                                                                        uint64_t v338 = *(void *)v407 + v258;
                                                                                        int v339 = *(_DWORD *)(v338 + 556);
                                                                                        *(_DWORD *)(v338 + 556) = v337;
                                                                                        uint64_t v340 = *(void *)(v262 + 48);
                                                                                        if (*(void *)v340
                                                                                          || *(_DWORD *)(v340 + 152)
                                                                                          || *(_DWORD *)(v340 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v340, v400, *(_DWORD *)(v340 + 64), 0x3FFFFFFFFFFLL, 32, v339, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v341 = *(void *)v407 + v258;
                                                                                        int v342 = *(_DWORD *)(v341 + 620);
                                                                                        *(_DWORD *)(v341 + 620) = 0;
                                                                                        *(_DWORD *)(*(void *)v407
                                                                                                  + v258
                                                                                                  + 620) ^= 0x3FFu;
                                                                                        uint64_t v343 = *(void *)v407 + v258;
                                                                                        int v344 = *(_DWORD *)(v343 + 620);
                                                                                        *(_DWORD *)(v343 + 620) = v342;
                                                                                        uint64_t v345 = *(void *)(v262 + 48);
                                                                                        if (*(void *)v345
                                                                                          || *(_DWORD *)(v345 + 152)
                                                                                          || *(_DWORD *)(v345 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v345, v392, *(_DWORD *)(v345 + 68), 0x3FFFFFFFFFFLL, 32, v344, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      v258 += 4;
                                                                                      ++v260;
                                                                                      ++v261;
                                                                                      ++v409;
                                                                                    }
                                                                                    while (v259 != v258);
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  *(_DWORD *)(v55 + 88) |= 0x2000u;
                                                                                  *((_DWORD *)this + v397 + 116) = 1;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 288) = 0;
                                                                                }
                                                                                *(_DWORD *)(*(void *)v407 + 448) = 0;
                                                                                *(_DWORD *)(*(void *)v407 + 452) = 0;
                                                                                *(_DWORD *)(*(void *)v407 + 456) = 0;
                                                                                *(_DWORD *)(*(void *)v407 + 460) = 0;
                                                                                if (!v406) {
                                                                                  goto LABEL_417;
                                                                                }
                                                                                uint64_t v346 = *((void *)this + 32);
                                                                                unsigned int v347 = *(unsigned __int8 *)(v346 + 3004);
                                                                                if (*(unsigned char *)(v346 + 3004))
                                                                                {
                                                                                  unsigned int v347 = *(_DWORD *)(v346 + 3016);
                                                                                  unsigned int v348 = *(_DWORD *)(v346 + 3020);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unsigned int v348 = 0;
                                                                                }
                                                                                uint64_t v349 = *(void *)(v346 + 8360);
                                                                                uint64_t v350 = *(unsigned int *)(v349 + 56);
                                                                                unint64_t v351 = *(unsigned int *)(v349 + 52)
                                                                                     + (unint64_t)v347;
                                                                                uint64_t v352 = *((void *)this + 33);
                                                                                int v353 = *(_DWORD *)(v352 + 448);
                                                                                *(_DWORD *)(v352 + 448) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 448) ^= 0xFFFFFFC0;
                                                                                uint64_t v354 = *((void *)this + 33);
                                                                                int v355 = *(_DWORD *)(v354 + 448);
                                                                                *(_DWORD *)(v354 + 448) = v353;
                                                                                uint64_t v356 = *(void *)(*((void *)this + 32)
                                                                                                 + 8360);
                                                                                unint64_t v357 = HIDWORD(v351);
                                                                                if (!*(void *)v356
                                                                                  && !*(_DWORD *)(v356 + 152)
                                                                                  && !*(_DWORD *)(v356 + 156))
                                                                                {
                                                                                  goto LABEL_455;
                                                                                }
                                                                                if (v357
                                                                                  && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                                {
                                                                                  *(_DWORD *)CMTime buf = 136315394;
                                                                                  *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                                                                                  *(_WORD *)&unsigned char buf[12] = 1024;
                                                                                  *(_DWORD *)&unsigned char buf[14] = 1185;
                                                                                  _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
                                                                                }
                                                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v356, 448, v351, 0xFFFFFFFFLL, 6, v355, 4);
                                                                                if (!result)
                                                                                {
LABEL_455:
                                                                                  uint64_t v358 = *((void *)this + 33);
                                                                                  int v359 = *(_DWORD *)(v358 + 684);
                                                                                  *(_DWORD *)(v358 + 684) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 684) ^= 0x3FFu;
                                                                                  uint64_t v360 = *((void *)this + 33);
                                                                                  int v361 = *(_DWORD *)(v360 + 684);
                                                                                  *(_DWORD *)(v360 + 684) = v359;
                                                                                  uint64_t v362 = *(void *)(*((void *)this + 32) + 8360);
                                                                                  if (!*(void *)v362
                                                                                    && !*(_DWORD *)(v362 + 152)
                                                                                    && !*(_DWORD *)(v362 + 156))
                                                                                  {
                                                                                    goto LABEL_456;
                                                                                  }
                                                                                  if (v357
                                                                                    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                                  {
                                                                                    *(_DWORD *)CMTime buf = 136315394;
                                                                                    *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                                                                                    *(_WORD *)&unsigned char buf[12] = 1024;
                                                                                    *(_DWORD *)&unsigned char buf[14] = 1187;
                                                                                    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
                                                                                  }
                                                                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v362, 684, v351, 0x3FFFFFFFFFFLL, 32, v361, 4);
                                                                                  if (!result)
                                                                                  {
LABEL_456:
                                                                                    unint64_t v363 = v350 + v348;
                                                                                    uint64_t v364 = *((void *)this + 33);
                                                                                    int v365 = *(_DWORD *)(v364 + 452);
                                                                                    *(_DWORD *)(v364 + 452) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 452) ^= 0xFFFFFFC0;
                                                                                    uint64_t v366 = *((void *)this + 33);
                                                                                    int v367 = *(_DWORD *)(v366 + 452);
                                                                                    *(_DWORD *)(v366 + 452) = v365;
                                                                                    uint64_t v368 = *(void *)(*((void *)this + 32) + 8360);
                                                                                    unint64_t v369 = HIDWORD(v363);
                                                                                    if (!*(void *)v368
                                                                                      && !*(_DWORD *)(v368 + 152)
                                                                                      && !*(_DWORD *)(v368 + 156))
                                                                                    {
                                                                                      goto LABEL_457;
                                                                                    }
                                                                                    if (v369
                                                                                      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                                    {
                                                                                      *(_DWORD *)CMTime buf = 136315394;
                                                                                      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                                                                                      *(_WORD *)&unsigned char buf[12] = 1024;
                                                                                      *(_DWORD *)&unsigned char buf[14] = 1190;
                                                                                      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
                                                                                    }
                                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v368, 452, v363, 0xFFFFFFFFLL, 6, v367, 4);
                                                                                    if (!result)
                                                                                    {
LABEL_457:
                                                                                      uint64_t v370 = *((void *)this + 33);
                                                                                      int v371 = *(_DWORD *)(v370 + 688);
                                                                                      *(_DWORD *)(v370 + 688) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 688) ^= 0x3FFu;
                                                                                      uint64_t v372 = *((void *)this + 33);
                                                                                      int v373 = *(_DWORD *)(v372 + 688);
                                                                                      *(_DWORD *)(v372 + 688) = v371;
                                                                                      uint64_t v374 = *(void *)(*((void *)this + 32) + 8360);
                                                                                      if (!*(void *)v374
                                                                                        && !*(_DWORD *)(v374 + 152)
                                                                                        && !*(_DWORD *)(v374 + 156))
                                                                                      {
                                                                                        goto LABEL_414;
                                                                                      }
                                                                                      if (v369
                                                                                        && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                                      {
                                                                                        *(_DWORD *)CMTime buf = 136315394;
                                                                                        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                                                                                        *(_WORD *)&unsigned char buf[12] = 1024;
                                                                                        *(_DWORD *)&unsigned char buf[14] = 1192;
                                                                                        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
                                                                                      }
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v374, 688, v363, 0x3FFFFFFFFFFLL, 32, v373, 4);
                                                                                      if (!result)
                                                                                      {
LABEL_414:
                                                                                        if (v396)
                                                                                        {
                                                                                          *(_DWORD *)(*((void *)this + 33) + 456) = *(_DWORD *)(*((void *)this + 33) + 456) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 76) >> 6) & 0xFFF) << 6);
                                                                                          int v375 = (_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 80);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          if (CAHDecThymeHevc::getSWRStride(this, *(unsigned __int16 *)(v55 + 160) - *(unsigned __int16 *)(v55 + 156) + 1, *(_DWORD *)(v33 + 23176 * v387 + 3636), *(_DWORD *)(v33 + 23176 * v387 + 3640), *(_DWORD *)(v33 + 23176 * v387 + 22852))) {
                                                                                            return 0xFFFFFFFFLL;
                                                                                          }
                                                                                          *(_DWORD *)(*((void *)this + 33) + 456) = *(_DWORD *)(*((void *)this + 33) + 456) & 0xFFFC003F | (((*((_DWORD *)this + 3000) >> 6) & 0xFFF) << 6);
                                                                                          int v375 = (_DWORD *)((char *)this + 12004);
                                                                                        }
                                                                                        *(_DWORD *)(*(void *)v407
                                                                                                  + 460) = *(_DWORD *)(*(void *)v407 + 460) & 0xFFF8003F | (((*v375 >> 6) & 0x1FFF) << 6);
LABEL_417:
                                                                                        uint64_t v376 = *((void *)this + 32);
                                                                                        if (*(_DWORD *)(v376 + 2360) == 1)
                                                                                        {
                                                                                          uint64_t v377 = *(void *)v407;
                                                                                          *(_DWORD *)(*(void *)v407 + 788) = *(_DWORD *)(*(void *)v407 + 788) & 0xFFFFFFFE | *(_DWORD *)(v376 + 2508) & 1;
                                                                                          if (*(_DWORD *)(v376 + 2508))
                                                                                          {
                                                                                            *(_DWORD *)(v377 + 2788) = 0x10000000;
                                                                                            *(_DWORD *)(v377 + 2792) = *(_DWORD *)(v376 + 2368);
                                                                                            *(void *)(v377 + 2800) = 0;
                                                                                            *(_DWORD *)(v377 + 2796) = 0;
                                                                                            *(_OWORD *)(v377 + 2808) = *(_OWORD *)(v376 + 2372);
                                                                                            long long v378 = *(_OWORD *)(v376 + 2388);
                                                                                            *(_OWORD *)(v377 + 2840) = *(_OWORD *)(v376 + 2404);
                                                                                            *(_OWORD *)(v377 + 2824) = v378;
                                                                                          }
                                                                                          *(_DWORD *)(*(void *)v407 + 788) = *(_DWORD *)(*(void *)v407 + 788) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v376 + 2512) & 1));
                                                                                          if (*(_DWORD *)(v376 + 2512))
                                                                                          {
                                                                                            *(_DWORD *)(v377 + 2856) = 0;
                                                                                            if (!*(_DWORD *)(v376 + 2424))
                                                                                            {
                                                                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                                                                                return 0xFFFFFFFFLL;
                                                                                              }
                                                                                              *(_DWORD *)CMTime buf = 136315138;
                                                                                              *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                                                                                              unsigned int v52 = &_os_log_internal;
                                                                                              uint64_t v53 = "AppleAVD: %s(): H13A descrambler is not supported\n";
                                                                                              goto LABEL_439;
                                                                                            }
                                                                                            *(_DWORD *)(v376 + 2640) = 0;
                                                                                            int v379 = *(_DWORD *)(v377 + 2856) & 0xF7FFFFF | ((*(_DWORD *)(v376 + 2420) & 1) << 23) | 0x20000000;
                                                                                            *(_DWORD *)(v377 + 2856) = v379;
                                                                                            *(_DWORD *)(v377 + 2856) = v379 & 0xFFC00000 | (*(_DWORD *)(v376 + 2364) == 0);
                                                                                            long long v380 = *(_OWORD *)(v376 + 2428);
                                                                                            long long v381 = *(_OWORD *)(v376 + 2444);
                                                                                            *(_OWORD *)(v377 + 2892) = *(_OWORD *)(v376 + 2460);
                                                                                            *(_OWORD *)(v377 + 2876) = v381;
                                                                                            *(_OWORD *)(v377 + 2860) = v380;
                                                                                          }
                                                                                          *(_DWORD *)(*(void *)v407 + 788) = *(_DWORD *)(*(void *)v407 + 788) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v376 + 2516) & 1));
                                                                                          *(_DWORD *)(*(void *)v407 + 788) = *(_DWORD *)(*(void *)v407 + 788) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v376 + 2520) & 1));
                                                                                          *(_DWORD *)(*(void *)v407 + 788) = *(_DWORD *)(*(void *)v407 + 788) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v376 + 2524) & 1));
                                                                                          if (*(_DWORD *)(v376 + 2516))
                                                                                          {
                                                                                            *(_DWORD *)(v377 + 3016) = 0;
                                                                                            if (*(_DWORD *)(v376 + 2476) == 2) {
                                                                                              int v382 = 805306368;
                                                                                            }
                                                                                            else {
                                                                                              int v382 = 813694976;
                                                                                            }
                                                                                            *(_DWORD *)(v377 + 3016) = v382;
                                                                                            memcpy((void *)(v377 + 3020), (const void *)(v376 + 2480), 4* *(unsigned int *)(v376 + 2476));
                                                                                            *(_DWORD *)(v376 + 2516) = 0;
                                                                                          }
                                                                                          *(_DWORD *)(*(void *)v407 + 788) = *(_DWORD *)(*(void *)v407 + 788) & 0xFFFFFFDF | (32 * (*(_DWORD *)(v376 + 2632) & 1));
                                                                                          if (*(_DWORD *)(v376 + 2632))
                                                                                          {
                                                                                            *(_DWORD *)(v377 + 2908) = 0x80000000;
                                                                                            unsigned int v383 = ((*(_DWORD *)(v376 + 2528) & 1) << 27) | 0x80000000;
                                                                                            *(_DWORD *)(v377 + 2908) = v383;
                                                                                            *(_DWORD *)(v377 + 2908) = v383 | (((2 * *(_DWORD *)(v376 + 2528)) & 4 | (*(_DWORD *)(v376 + 2528) >> 1) & 2 | (*(_DWORD *)(v376 + 2528) >> 3) & 1) << 24);
                                                                                            long long v384 = *(_OWORD *)(v376 + 2532);
                                                                                            long long v385 = *(_OWORD *)(v376 + 2548);
                                                                                            *(_OWORD *)(v377 + 2944) = *(_OWORD *)(v376 + 2564);
                                                                                            *(_OWORD *)(v377 + 2928) = v385;
                                                                                            *(_OWORD *)(v377 + 2912) = v384;
                                                                                            *(void *)(v377 + 2960) = *(void *)(v376 + 2580);
                                                                                            *(void *)(v377 + 2968) = *(void *)(v376 + 2588);
                                                                                            int v386 = *(_DWORD *)(v376 + 2528);
                                                                                            if ((v386 & 6) != 0
                                                                                              && (v386 & 8) == 0)
                                                                                            {
                                                                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                                                                                return 0xFFFFFFFFLL;
                                                                                              }
                                                                                              *(_DWORD *)CMTime buf = 136315138;
                                                                                              *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                                                                                              unsigned int v52 = &_os_log_internal;
                                                                                              uint64_t v53 = "AppleAVD: %s(): chip id is not used while ecid and/or board id is used\n";
LABEL_439:
                                                                                              int16x8_t v148 = buf;
                                                                                              uint32_t v149 = 12;
                                                                                              goto LABEL_140;
                                                                                            }
                                                                                            *(_OWORD *)(v377 + 2976) = *(_OWORD *)(v376 + 2596);
                                                                                          }
                                                                                          *(_DWORD *)(*(void *)v407 + 788) = *(_DWORD *)(*(void *)v407 + 788) & 0xFFFFFFBF | ((*(_DWORD *)(v376 + 2636) & 1) << 6);
                                                                                          if (*(_DWORD *)(v376 + 2636))
                                                                                          {
                                                                                            uint64_t result = 0;
                                                                                            *(_DWORD *)(v377 + 2992) = -1879048192;
                                                                                            *(_DWORD *)(v377 + 2992) = ((*(_DWORD *)(v376 + 2612) & 1) << 23) | 0x90000000;
                                                                                            *(_OWORD *)(v377 + 2996) = *(_OWORD *)(v376 + 2616);
                                                                                            *(_DWORD *)(v376 + 2640) = 1;
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        return 0;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecThymeHevc::getSWRStride(CAHDecThymeHevc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1500) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 3000) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 3000) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 3000) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 3000) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3001) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecThymeHevc::getTileStartCTU(CAHDecThymeHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 692);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecThymeHevc::getTileEndCTU(CAHDecThymeHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 692);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecThymeHevc::getTileIdxAbove(CAHDecThymeHevc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 692);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecThymeHevc::populateAvdWork(CAHDecThymeHevc *this, unsigned int a2)
{
  v144[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 32);
  uint64_t v5 = *((void *)this + 33);
  int v6 = *(_DWORD *)(v4 + 8320);
  int v7 = *(_DWORD *)(v4 + 8324);
  uint64_t v8 = *(void *)(v4 + 8280);
  uint64_t v9 = *(void *)(v4 + 8288);
  uint64_t v109 = *(void *)(v4 + 8296);
  unsigned int v10 = *(_DWORD *)(v4 + 9036);
  unsigned int v11 = *(_DWORD *)(v4 + 3068);
  int v12 = *(_DWORD *)(v4 + 3072);
  v144[0] = 0;
  v144[1] = 0;
  uint64_t v143 = 0;
  unsigned int v13 = v10 >> 28;
  uint64_t v14 = v8 + 23176 * v6;
  unsigned int v15 = *(_DWORD *)(v14 + 22888);
  if (v10)
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v16 = v15 > v13 + 1;
    }
    else {
      BOOL v16 = 0;
    }
    BOOL v17 = v16 && v12 == 0;
    int v18 = v17;
    int v133 = v18;
  }
  else
  {
    int v133 = 0;
  }
  unsigned int v126 = *(unsigned __int16 *)(v5 + 694) * *(unsigned __int16 *)(v5 + 692);
  if ((v10 & 2) != 0 && *(unsigned char *)(v9 + 9856 * v7 + 52))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v126 > v13 + 1;
    }
    int v21 = v19 && v12 == 0;
    int v135 = v21;
  }
  else
  {
    int v135 = 0;
  }
  int v115 = (unsigned int *)(v14 + 22880);
  if ((v10 & 0x20) != 0 && !*(unsigned char *)(v9 + 9856 * v7 + 53))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 52)) {
      BOOL v83 = 0;
    }
    else {
      BOOL v83 = v11 > v13 + 1;
    }
    int v85 = v83 && v12 == 0;
    int v129 = v85;
  }
  else
  {
    int v129 = 0;
  }
  unsigned int v22 = 0;
  unsigned int v137 = *v115;
  unsigned int v23 = v13 + 2;
  BOOL v17 = (v10 & 4) == 0;
  int v24 = v133;
  if (v17) {
    int v24 = 1;
  }
  if (((v24 | v135) & 1) == 0 && (v129 & 1) == 0) {
    unsigned int v22 = *(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & (v13 + 1);
  }
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  memset_pattern16(__b, &unk_223AD0630, 8uLL);
  uint64_t v25 = v5 + 223836;
  unsigned int v103 = v133 | v135 | v129;
  if (v103) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = 1;
  }
  unint64_t v27 = v22 + v26;
  uint64_t v120 = v26;
  unsigned int v105 = 0x1000 / v26;
  uint64_t v28 = 48 * (0x1000 / v26);
  uint64_t v29 = v22;
  unint64_t v30 = v22;
  do
  {
    v144[v30] = v25 + (v30 - v22) * v28;
    ++v30;
  }
  while (v30 < v27);
  uint64_t v102 = v28;
  unint64_t v106 = v27;
  uint64_t v31 = v144[v22];
  uint64_t v123 = v5 + 223836;
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v25) >> 4);
  unint64_t v104 = v22;
  if (!a2)
  {
    uint64_t v95 = 0;
    int v96 = 0;
    HIDWORD(v138) = 0;
    unsigned int v43 = v22;
    goto LABEL_165;
  }
  uint64_t v136 = 0;
  unsigned int v117 = 0;
  int v113 = 0;
  int v121 = 0;
  uint64_t v130 = 0;
  uint64_t v134 = 0;
  unsigned int v33 = v22;
  unsigned int v34 = v15;
  int v35 = 0;
  uint64_t v138 = 0;
  unsigned int v36 = a2;
  uint64_t v37 = 0;
  uint64_t v38 = v9 + 9856 * v7;
  uint64_t v39 = (unsigned char *)(v38 + 52);
  int v118 = (unsigned char *)(v38 + 53);
  int v40 = v133;
  if (v133) {
    int v41 = 12;
  }
  else {
    int v41 = 4;
  }
  int v116 = v41;
  unsigned int v122 = v36 - 1;
  unsigned int v111 = v34 - 1;
  unsigned int v112 = v34;
  unsigned int v110 = v34 - 2;
  unsigned int v42 = v120;
  unsigned int v108 = &__b[v29];
  unsigned int v101 = v36;
  uint64_t v107 = v36;
  uint64_t v124 = v5 + 3384;
  unsigned int v100 = v33;
  unsigned int v43 = v33;
  uint64_t v128 = v39;
  do
  {
    if (*v39) {
      int v44 = 1;
    }
    else {
      int v44 = v40;
    }
    if (v44 != 1)
    {
      unsigned int v47 = 1;
LABEL_54:
      uint64_t v48 = 0;
      int v114 = 0;
      uint64_t v49 = v109 + 2360 * v136;
      int v119 = (void *)(v49 + 1904);
      uint64_t v125 = (int *)(v49 + 36);
      unsigned __int16 v127 = (unsigned char *)(v49 + 32);
      uint64_t v132 = v47;
      while (1)
      {
        if (!(v48 | v136))
        {
          *(_WORD *)(v31 + 4) = 0;
          *(_WORD *)(v31 + 6) = v43;
          *(_DWORD *)(v31 + 8) = 0;
          *(_WORD *)(v31 + 12) = 0;
          LODWORD(v130) = *(_DWORD *)(v124 + 368 * v136);
          if (!(*(unsigned int (**)(void))(**((void **)this + 32) + 448))()) {
            return 0xFFFFFFFFLL;
          }
          int v54 = *v125;
          *(_DWORD *)(v31 + 32) = *v125;
          *(_DWORD *)(v31 + 36) = v54;
          HIDWORD(v138) = 0;
          *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecThymeHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v137);
          __int16 v55 = 271;
          goto LABEL_159;
        }
        if (v48)
        {
          int v50 = *(_DWORD *)(*v119 + 4 * v48 - 4) + 1;
          if (*v128)
          {
            if (*v118)
            {
              unsigned int v51 = *v115;
              unsigned int v52 = (v51 + v138) / v51;
              v50 += v114;
              if (v52 >= *(unsigned __int16 *)(*((void *)this + 33) + 2 * (v121 + 1) + 738))
              {
                LODWORD(v138) = (*(uint64_t (**)(CAHDecThymeHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v137);
                int v114 = 0;
                int v35 = v116;
              }
              else
              {
                LODWORD(v138) = v113 + v52 * v51;
                if (!v133)
                {
                  int v114 = v50;
                  int v40 = 0;
                  goto LABEL_160;
                }
                int v114 = 0;
                int v53 = __b[v43];
                __b[v43] = 0;
                if (v53) {
                  int v35 = 72;
                }
                else {
                  int v35 = 8;
                }
              }
            }
            else
            {
              LODWORD(v138) = (*(uint64_t (**)(CAHDecThymeHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v137);
              int v35 = 4;
            }
          }
          else if (v133)
          {
            LODWORD(v138) = (*v115 + v138) / *v115 * *v115;
            int v35 = 8;
          }
          int v62 = 48 * v32;
          uint64_t v63 = v140;
          if (*(void *)v140 || *(_DWORD *)(v140 + 152) || *(_DWORD *)(v140 + 156))
          {
            int v64 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1892;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v64 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223858, HIDWORD(v138) + v64, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v63 = v140;
            if (*(void *)v140) {
              goto LABEL_103;
            }
          }
          if (*(_DWORD *)(v63 + 152) || *(_DWORD *)(v63 + 156))
          {
LABEL_103:
            int v65 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1893;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v65 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223860, HIDWORD(v138) + v65, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v50;
          HIDWORD(v138) += v50;
          unsigned int v42 = v120;
          int v40 = v133;
        }
        else
        {
          int v56 = 48 * v32;
          uint64_t v57 = v140;
          if (*(void *)v140 || *(_DWORD *)(v140 + 152) || *(_DWORD *)(v140 + 156))
          {
            int v58 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1816;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v58 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223858, HIDWORD(v138) + v58, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v57 = v140;
            if (*(void *)v140) {
              goto LABEL_76;
            }
          }
          if (*(_DWORD *)(v57 + 152) || *(_DWORD *)(v57 + 156))
          {
LABEL_76:
            int v60 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1817;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v60 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223860, HIDWORD(v138) + v60, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v130 - HIDWORD(v138);
          int v61 = *(_DWORD *)(v124 + 368 * v136);
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t *))(**((void **)this + 32) + 448))(*((void *)this + 32), v136, &v140, &v139))return 0xFFFFFFFFLL; {
          LODWORD(v130) = v61;
          }
          if (*v127) {
            int v35 = 2;
          }
          else {
            int v35 = 258;
          }
          int v40 = v133;
          LODWORD(v138) = *v125;
          if (v133 && *v125 % v137 == v113)
          {
            HIDWORD(v138) = 0;
            if (__b[v43])
            {
              v35 |= 0x48u;
              __b[v43] = 0;
            }
            else
            {
              v35 |= 8u;
            }
          }
          else
          {
            HIDWORD(v138) = 0;
          }
        }
        unsigned int v66 = v37 + 1;
        if ((int)v37 + 1 < v126)
        {
          int v67 = (*(uint64_t (**)(CAHDecThymeHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v137);
          int v68 = v116;
          if (v138 != v67) {
            int v68 = 0;
          }
          v35 |= v68;
        }
        *(_WORD *)(v31 + 16) = v35;
        if (v134 == v122) {
          *(_WORD *)(v31 + 18) |= 2u;
        }
        if (v37 == v126 - 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        int v69 = v135;
        if (v37 != v126 - 2) {
          int v69 = 0;
        }
        if (v69 == 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        if (v40
          && ((int v70 = *(unsigned __int16 *)(v31 + 10), v112 > 1) ? (v71 = v110 == v70) : (v71 = 0),
              !v71 ? (int v72 = 0) : (int v72 = 1),
              v111 == v70 || v72))
        {
          *(_WORD *)(v31 + 18) |= 8u;
          if ((v35 & 4) != 0)
          {
LABEL_132:
            if (*v128 && *v118)
            {
              uint64_t v73 = *((void *)this + 33);
              unsigned int v74 = *(unsigned __int16 *)(v73 + 692);
              unsigned int v117 = (v43
                    - *(unsigned __int16 *)(v73 + 738 + 2 * (v66 / v74))
                    + *(unsigned __int16 *)(v73 + 738 + 2 * (v66 / v74 + 1)))
                   % v42;
              int v121 = v66 / v74;
              int v113 = *(unsigned __int16 *)(v73 + 692 + 2 * (v66 % v74) + 4);
              memset_pattern16(v108, &unk_223AD0630, 4 * (v120 - 1) + 4);
            }
            uint64_t v37 = (v37 + 1);
          }
        }
        else if ((v35 & 4) != 0)
        {
          goto LABEL_132;
        }
        if ((v35 & 0x44) != 0)
        {
          int v75 = (*(uint64_t (**)(CAHDecThymeHevc *, uint64_t))(*(void *)this + 80))(this, v37);
          unsigned int v76 = HIDWORD(v134);
          if (SHIDWORD(v134) <= v75) {
            v35 |= 0x20u;
          }
        }
        else
        {
          unsigned int v76 = HIDWORD(v134);
        }
        if (!v48)
        {
          if (!*v127) {
            unsigned int v76 = v37;
          }
          int v77 = HIDWORD(v130);
          if (!*v127) {
            int v77 = v138;
          }
          HIDWORD(v130) = v77;
        }
        if ((v35 & 0x44) != 0)
        {
          unsigned int v78 = *(unsigned __int16 *)(*((void *)this + 33) + 692);
          if (v76 / v78 + 1 == v37 / v78) {
            v35 |= 0x10u;
          }
        }
        ++*((_DWORD *)&v144[-1] + v43);
        v144[v43] += 48;
        unsigned int v79 = v138 / v137;
        if (v40) {
          unsigned int v43 = (v79 - v121 + v117) % v42;
        }
        if (v135) {
          unsigned int v43 = v37 % v42;
        }
        char v80 = v129 ^ 1;
        if (v48) {
          char v80 = 1;
        }
        HIDWORD(v134) = v76;
        if ((v80 & 1) == 0 && !*v127) {
          unsigned int v43 = (v43 + 1) % v42;
        }
        uint64_t v31 = v144[v43];
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v123) >> 4);
        *(_WORD *)(v31 + 4) = *((_DWORD *)&v144[-1] + v43);
        *(_WORD *)(v31 + 6) = v43;
        *(_WORD *)(v31 + 8) = v136;
        *(_WORD *)(v31 + 10) = v79;
        *(_WORD *)(v31 + 12) = v37;
        *(_DWORD *)(v31 + 32) = v138;
        *(_DWORD *)(v31 + 36) = HIDWORD(v130);
        *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecThymeHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v137);
        __int16 v55 = v35;
        LODWORD(v134) = v136;
LABEL_159:
        *(_WORD *)(v31 + 14) = v55;
LABEL_160:
        if (v132 == ++v48) {
          goto LABEL_51;
        }
      }
    }
    int v45 = *(_DWORD *)(v109 + 2360 * v136 + 1896);
    BOOL v46 = __CFADD__(v45, 1);
    unsigned int v47 = v45 + 1;
    if (!v46) {
      goto LABEL_54;
    }
LABEL_51:
    ++v136;
    uint64_t v39 = v128;
  }
  while (v136 != v107);
  uint64_t v95 = v140;
  unsigned int v22 = v100;
  a2 = v101;
  int v96 = v130;
LABEL_165:
  int v131 = v96;
  int v81 = 48 * v32;
  if (!*(void *)v95 && !*(_DWORD *)(v95 + 152) && !*(_DWORD *)(v95 + 156))
  {
LABEL_185:
    if (*(_DWORD *)(v95 + 152) || *(_DWORD *)(v95 + 156)) {
      goto LABEL_187;
    }
    goto LABEL_191;
  }
  int v82 = v139;
  if ((v139 + (unint64_t)HIDWORD(v138)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "populateAvdWork";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 1987;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
    int v82 = v139;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223858, HIDWORD(v138) + v82, 0x3FFFFFFFFFFLL, 32, -1, 2);
  if (!result)
  {
    uint64_t v95 = v140;
    if (!*(void *)v140) {
      goto LABEL_185;
    }
LABEL_187:
    int v86 = v139;
    if ((v139 + (unint64_t)HIDWORD(v138)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "populateAvdWork";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = 1988;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
      int v86 = v139;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223860, HIDWORD(v138) + v86, 0xFFFFFFFFLL, 0, -1, 4);
    if (!result)
    {
LABEL_191:
      *(_DWORD *)(v31 + 28) = v131 - HIDWORD(v138);
      *(_DWORD *)(v31 + 16) = 917519;
      ++*((_DWORD *)&v144[-1] + v43);
      unint64_t v87 = v104;
      if (v129)
      {
        uint64_t v88 = 0;
        buf[0] = 0;
        buf[1] = 0;
        do
        {
          buf[v88] = v123 + v88 * v102;
          ++v88;
        }
        while (v120 != v88);
        uint64_t v89 = buf[0];
        unsigned int v90 = *(unsigned __int16 *)(buf[0] + 8) + 1;
        uint64_t v91 = v103;
        uint64_t v92 = 0;
        if (v90 >= a2)
        {
          unsigned int v94 = buf;
        }
        else
        {
          uint64_t v93 = 0;
          unsigned int v94 = buf;
          do
          {
            if (*(unsigned __int16 *)(v89 + 4) + 1 == *((_DWORD *)&v144[-1] + v92))
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 40) = *(_DWORD *)(buf[v91] + 36);
            }
            else if (v90 == *(unsigned __int16 *)(v89 + 56))
            {
              *unsigned int v94 = v89 + 48;
              uint64_t v92 = v93;
              uint64_t v91 = v93;
            }
            else
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 40) = *(_DWORD *)(buf[v91] + 36);
              *unsigned int v94 = v89 + 48;
            }
            uint64_t v93 = v91;
            uint64_t v91 = ((int)v91 + 1) % v120;
            unsigned int v94 = &buf[v92];
            uint64_t v89 = *v94;
            unsigned int v90 = *(unsigned __int16 *)(*v94 + 8) + 1;
          }
          while (v90 < a2);
        }
        int v97 = *((_DWORD *)&v144[-1] + v92);
        if (*(unsigned __int16 *)(v89 + 4) + 1 != v97)
        {
          do
          {
            int v98 = *(unsigned __int16 *)(v89 + 52);
            v89 += 48;
          }
          while (v98 + 1 != v97);
          *unsigned int v94 = v89;
        }
        *(_DWORD *)(v89 + 40) = *(_DWORD *)(v89 + 44) + 1;
      }
      uint64_t v99 = *((void *)this + 33) + 36;
      do
      {
        *(_WORD *)(v99 + 2 * v87 - 8) = *((_DWORD *)&v144[-1] + v87);
        *(_DWORD *)(v99 + 4 * v87) = 48 * (v87 - v22) * v105 + 223836;
        ++v87;
      }
      while (v87 < v106);
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecThymeHevc::allocWorkBuf_SPS(CAHDecThymeHevc *this, _DWORD *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 5718;
  int v5 = a2[902];
  int v6 = a2[903];
  int v7 = a2[900];
  if (v5 < (*(unsigned int (**)(CAHDecThymeHevc *))(*(void *)this + 96))(this)
    || (unsigned int v8 = a2[903], v8 < (*(unsigned int (**)(CAHDecThymeHevc *))(*(void *)this + 104))(this))
    || (unsigned int v9 = a2[909], v9 > (*(unsigned int (**)(CAHDecThymeHevc *))(*(void *)this + 112))(this) - 8)
    || (unsigned int v10 = a2[910], v10 > (*(unsigned int (**)(CAHDecThymeHevc *))(*(void *)this + 120))(this) - 8)
    || (unsigned int v17 = *v4, v18 = *v4 - 16, v18 > 0x30)
    || ((1 << v18) & 0x1000000010001) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = a2[902];
      int v12 = a2[903];
      int v13 = a2[909];
      int v14 = a2[910];
      unsigned int v15 = *v4;
      int v49 = 136316418;
      int v50 = "allocWorkBuf_SPS";
      __int16 v51 = 1024;
      int v52 = v11;
      __int16 v53 = 1024;
      *(_DWORD *)int v54 = v12;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v13;
      __int16 v55 = 1024;
      int v56 = v14;
      __int16 v57 = 1024;
      unsigned int v58 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported bit stream w %d h %d bd %d %d CtbSizeY %d\n", (uint8_t *)&v49, 0x2Au);
    }
    return 0xFFFFFFFFLL;
  }
  int v19 = v5 + 31;
  if (v5 < -31) {
    int v19 = v5 + 62;
  }
  unsigned int v20 = v19 >> 5;
  int v21 = v6 + 31;
  if (v6 < -31) {
    int v21 = v6 + 62;
  }
  unsigned int v22 = v21 >> 5;
  unsigned int v23 = 32 - __clz(v20 - 1);
  if (v20 >= 2) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  unsigned int v25 = 32 - __clz(v22 - 1);
  if (v22 >= 2) {
    char v26 = v25;
  }
  else {
    char v26 = 0;
  }
  unsigned int v27 = ((32 << (v26 + v24)) + 127) & 0xFFFFFF80;
  if (v7)
  {
    int v28 = v5 << (v7 == 3);
    int v29 = v28 + 31;
    int v30 = v28 + 62;
    if (v29 >= 0) {
      int v30 = v29;
    }
    unsigned int v31 = v30 >> 5;
    if (v7 == 1) {
      int v32 = v6 + 1;
    }
    else {
      int v32 = v6;
    }
    int v33 = v32 >> (v7 == 1);
    int v35 = v33 + 15;
    BOOL v34 = v33 < -15;
    int v36 = v33 + 30;
    if (!v34) {
      int v36 = v35;
    }
    unsigned int v37 = v36 >> 4;
    if (v31 > 1)
    {
      unsigned int v38 = 32 - __clz(v31 - 1);
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v37 = 0;
  }
  LOBYTE(v38) = 0;
LABEL_32:
  unsigned int v39 = 32 - __clz(v37 - 1);
  if (v37 >= 2) {
    char v40 = v39;
  }
  else {
    char v40 = 0;
  }
  unsigned int v41 = ((8 << (v40 + v38)) + 127) & 0xFFFFFF80;
  if (!v7) {
    unsigned int v41 = 0;
  }
  *((_DWORD *)this + 2992) = v27;
  *((_DWORD *)this + 2993) = v41;
  *((void *)this + 1497) = 0;
  unsigned int v42 = (v17 & 0xFFFFFFF0) * (v17 >> 4) * v4[2];
  *((_DWORD *)this + 2998) = v42;
  *((_DWORD *)this + 2997) = v4[4] * v42;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_44:
    uint64_t v46 = 0;
    while (1)
    {
      uint64_t v47 = *((unsigned int *)this + 2997);
      if (v47)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecThymeHevc *)((char *)this + v46 + 7568), v47, 7, 1, 0))break; {
      }
        }
      uint64_t result = 0;
      v46 += 176;
      if (v46 == 2816) {
        return result;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2254;
    __int16 v53 = 2080;
    *(void *)int v54 = "MvColo";
    uint64_t v48 = &_os_log_internal;
  }
  else
  {
    uint64_t v43 = 528;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 2992);
      if (v44
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecThymeHevc *)((char *)this + v43), v44, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_56;
        }
        int v49 = 136315650;
        int v50 = "allocWorkBuf_SPS";
        __int16 v51 = 1024;
        int v52 = 2245;
        __int16 v53 = 2080;
        *(void *)int v54 = "HdrY";
        uint64_t v48 = &_os_log_internal;
        goto LABEL_55;
      }
      uint64_t v45 = *((unsigned int *)this + 2993);
      if (v45)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecThymeHevc *)((char *)this + v43 + 2816), v45, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 3344) {
        goto LABEL_44;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2246;
    __int16 v53 = 2080;
    *(void *)int v54 = "HdrC";
    uint64_t v48 = &_os_log_internal;
  }
LABEL_55:
  _os_log_impl(&dword_223977000, v48, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v49, 0x1Cu);
LABEL_56:
  (*(void (**)(CAHDecThymeHevc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecThymeHevc::allocWorkBuf_PPS(CAHDecThymeHevc *this, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  unsigned int v4 = (a2[909] + 9) & 0xFFFFFFFE;
  int v5 = a2[910];
  unsigned int v6 = (v5 + 9) & 0xFFFFFFFE;
  if (v4 <= v6) {
    unsigned int v7 = (v5 + 9) & 0xFFFFFFFE;
  }
  else {
    unsigned int v7 = (a2[909] + 9) & 0xFFFFFFFE;
  }
  int v8 = a2[900];
  if (v7 == 10) {
    int v9 = 40;
  }
  else {
    int v9 = 48;
  }
  if (v7 == 8) {
    int v9 = 32;
  }
  char v10 = v8 != 3;
  if (*((unsigned char *)a3 + 52))
  {
    uint64_t v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = a2[1106] + a2[1105];
    uint64_t v17 = a3[14];
    int v18 = a2[5718];
    unsigned int v19 = a2[902];
    do
    {
      int v20 = a3[v11 + 17] + 1;
      int v21 = v20 * v18;
      if (v20 * v18 + v14 > v19) {
        int v21 = v19 - v14;
      }
      if (v12 <= v21) {
        int v12 = v21;
      }
      if (v8)
      {
        unsigned int v22 = (v20 << v16) >> v10;
        if (v17 == v11) {
          unsigned int v22 = (((v19 >> 3) - (v15 << v16)) >> v10) + 1;
        }
        v13 += ((v22 + 2 * (v11 != 0)) * v9 + 127) & 0xFFFFFF80;
      }
      v14 += v21;
      v15 += v20;
      ++v11;
    }
    while (v17 + 1 != v11);
  }
  else
  {
    unsigned int v19 = a2[902];
    int v23 = (v9 + v9 * (v19 >> 3 >> v10) + 127) & 0x7FFFFF80;
    if (v8) {
      int v13 = v23;
    }
    else {
      int v13 = 0;
    }
    int v12 = a2[902];
  }
  signed int v24 = 0;
  uint64_t v25 = *((void *)this + 32);
  if (v12 >= -15) {
    int v26 = v12 + 15;
  }
  else {
    int v26 = v12 + 30;
  }
  int v27 = a3[14];
  if (*((unsigned char *)a3 + 52)) {
    int v28 = a3[14];
  }
  else {
    int v28 = 0;
  }
  int v68 = v28;
  if (v8 == 3) {
    int v29 = 48;
  }
  else {
    int v29 = 32;
  }
  if (v8 == 3) {
    int v30 = 176;
  }
  else {
    int v30 = 128;
  }
  if (!v8) {
    int v29 = 16;
  }
  unsigned int v31 = (v29 * v7) >> 3;
  if (!v8) {
    int v30 = 80;
  }
  int v66 = v26;
  int v67 = v30;
  int v32 = v26 >> 4;
  int v33 = (v26 >> 4) * v31;
  if (v5) {
    int v34 = 60;
  }
  else {
    int v34 = 48;
  }
  int v65 = v34;
  unsigned int v35 = 0;
  unsigned int v36 = 0;
  unsigned int v37 = 0;
  if (*((unsigned char *)a3 + 52) && v27)
  {
    uint64_t v38 = 0;
    int v39 = 0;
    unsigned int v37 = 0;
    unsigned int v36 = 0;
    unsigned int v35 = 0;
    if (v8 == 1) {
      int v40 = 8;
    }
    else {
      int v40 = 16;
    }
    if (!v8) {
      int v40 = 0;
    }
    unsigned int v41 = ((((6 * v40 + 96) * v7) >> 3) + 7) & 0x3FFFFFF8;
    int v42 = v40 + 16;
    unsigned int v43 = a2[903];
    signed int v44 = v4 - 8;
    signed int v45 = v6 - 8;
    if (v44 <= v45) {
      signed int v46 = v45;
    }
    else {
      signed int v46 = v44;
    }
    uint64_t v47 = a3[15];
    int v48 = a2[5718];
    BOOL v50 = *(_DWORD *)(v25 + 2644) == 1 && v46 != 0;
    __int16 v51 = (char *)(a3 + 37);
    do
    {
      int v52 = v48 + v48 * *(_DWORD *)&v51[4 * v38];
      if (v52 + v39 > v43) {
        int v52 = v43 - v39;
      }
      int v53 = v52 + 15;
      if (v52 < -15) {
        int v53 = v52 + 30;
      }
      if (v38) {
        int v54 = (v53 >> 4) + 1;
      }
      else {
        int v54 = v53 >> 4;
      }
      unsigned int v55 = v54 * v41;
      if (v35 <= v55) {
        unsigned int v35 = v55;
      }
      unsigned int v56 = 36 * (v53 >> 4);
      if (v36 <= v56) {
        unsigned int v36 = v56;
      }
      if (v50)
      {
        if (v47 == v38) {
          int v57 = 23;
        }
        else {
          int v57 = 15;
        }
        unsigned int v58 = ((v57 + v52) / 16 * v42) | 6;
        if (v37 <= v58) {
          unsigned int v37 = v58;
        }
      }
      v39 += v52;
      ++v38;
    }
    while (v47 + 1 != v38);
    signed int v24 = (((3 * v7) & 0x7FFFFF) << 6) + (((v43 + 7) >> 3) + 2) * ((((v7 >> 1) & 0x1FFFFF) << 8) | 8);
  }
  if (v33 && CAVDDecoder::allocAVDMem(v25, (_OWORD *)this + 649, v33, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2428;
      __int16 v74 = 2080;
      int v75 = "IpAbove";
      uint64_t v59 = &_os_log_internal;
LABEL_120:
      _os_log_impl(&dword_223977000, v59, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", buf, 0x1Cu);
      goto LABEL_121;
    }
    goto LABEL_121;
  }
  if ((v12 + 30) >= 0x1F
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 462, 4 * (4 * v32 + (v66 >> 4)), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2429;
      __int16 v74 = 2080;
      int v75 = "MvAboveInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
LABEL_121:
    (*(void (**)(CAHDecThymeHevc *, void))(*(void *)this + 152))(this, 0);
    return 0xFFFFFFFFLL;
  }
  int v60 = v68 + ((v19 + 15) >> 4);
  signed int v61 = v60 * ((((v67 * v7) >> 3) + 7) & 0x3FFFFFF8) + (v27 << 7);
  if (v61 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 660, v61, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2430;
      __int16 v74 = 2080;
      int v75 = "LfAbovePix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  int v62 = 36 * v60 + (v27 << 7);
  if (v62 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 671, v62, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2431;
      __int16 v74 = 2080;
      int v75 = "LfAboveInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v35 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 682, (int)v35, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2432;
      __int16 v74 = 2080;
      int v75 = "LfLeftPix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v36 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 693, (int)v36, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2433;
      __int16 v74 = 2080;
      int v75 = "LfLeftInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v37 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 704, (int)v37, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2434;
      __int16 v74 = 2080;
      int v75 = "SwLeftPix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v13 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 715, v13, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2435;
      __int16 v74 = 2080;
      int v75 = "AZAbovePix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v24 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 726, v24, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2436;
      __int16 v74 = 2080;
      int v75 = "AZLeftPix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  int v63 = (v19 >> 3) * v65;
  if (!v63) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 737, v63, 7, 1, 0);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2438;
      __int16 v74 = 2080;
      int v75 = "RfAboveInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  return result;
}

uint64_t CAHDecThymeHevc::freeWorkBuf_SPS(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(_DWORD *)(*(void *)(this + 256) + 2648))
  {
    for (uint64_t i = 528; i != 3344; i += 176)
    {
      BOOL v3 = (void *)(v1 + i);
      if (*(void *)(v1 + i))
      {
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v1 + i));
        void *v3 = 0;
      }
      if (v3[352])
      {
        unsigned int v4 = v3 + 352;
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), v4);
        *unsigned int v4 = 0;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1 + 7568;
  do
  {
    if (*(void *)(v6 + v5))
    {
      this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v6 + v5));
      *(void *)(v6 + v5) = 0;
    }
    v5 += 176;
  }
  while (v5 != 2816);
  return this;
}

uint64_t *CAHDecThymeHevc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  unsigned int v2 = this;
  if (this[1298])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1298);
    v2[1298] = 0;
  }
  if (v2[924])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 924);
    v2[924] = 0;
  }
  if (v2[1320])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1320);
    v2[1320] = 0;
  }
  if (v2[1342])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1342);
    v2[1342] = 0;
  }
  if (v2[1364])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1364);
    v2[1364] = 0;
  }
  if (v2[1386])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1386);
    v2[1386] = 0;
  }
  if (v2[1408])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1408);
    v2[1408] = 0;
  }
  if (v2[1430])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1430);
    v2[1430] = 0;
  }
  if (v2[1452])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1452);
    v2[1452] = 0;
  }
  if (v2[1474])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1474);
    v2[1474] = 0;
  }
  return this;
}

uint64_t CAHDecThymeHevc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 6160;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 11984) = a2;
  return this;
}

uint64_t CAHDecThymeHevc::decodeBuffer(CAHDecThymeHevc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecThymeHevc::decodeBufferSize(CAHDecThymeHevc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecThymeHevc::decHdrYLinAddr(CAHDecThymeHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 66);
}

uint64_t CAHDecThymeHevc::decHdrCLinAddr(CAHDecThymeHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 418);
}

uint64_t CAHDecThymeHevc::decHdrYSize(CAHDecThymeHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 143);
}

uint64_t CAHDecThymeHevc::decHdrCSize(CAHDecThymeHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 847);
}

uint64_t CAHDecThymeHevc::decHdrYStride(CAHDecThymeHevc *this)
{
  return *((unsigned int *)this + 2994);
}

uint64_t CAHDecThymeHevc::decHdrCStride(CAHDecThymeHevc *this)
{
  return *((unsigned int *)this + 2995);
}

uint64_t is_lgh_ivf_file(int *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a1 || !a3)
  {
    BOOL v8 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v8) {
      return result;
    }
    int v9 = 136315650;
    char v10 = "is_lgh_ivf_file";
    __int16 v11 = 2048;
    int v12 = a1;
    __int16 v13 = 2048;
    uint64_t v14 = a3;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: buf %p format %p\n", (uint8_t *)&v9, 0x20u);
    return 0;
  }
  if (a2 < 0x20) {
    return 0;
  }
  int v5 = *a1;
  *(_DWORD *)a3 = *a1;
  int v6 = *((unsigned __int16 *)a1 + 2);
  *(_WORD *)(a3 + 4) = v6;
  *(_WORD *)(a3 + 6) = *((_WORD *)a1 + 3);
  *(_DWORD *)(a3 + 8) = a1[2];
  *(_WORD *)(a3 + 12) = *((_WORD *)a1 + 6);
  *(_WORD *)(a3 + 14) = *((_WORD *)a1 + 7);
  *(_DWORD *)(a3 + 16) = a1[4];
  *(_DWORD *)(a3 + 20) = a1[5];
  *(_DWORD *)(a3 + 24) = a1[6];
  if (v5 != 1179208516) {
    return 0;
  }
  if (v6)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      char v10 = "is_lgh_ivf_file";
      __int16 v11 = 1024;
      LODWORD(v12) = v6;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect version 0 got %d\n", (uint8_t *)&v9, 0x12u);
    }
  }
  return 1;
}

uint64_t is_lgh_ivf_frame(_DWORD *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2 >= 0xC && a1 && a3)
  {
    *a3 = *a1;
    a3[1] = a1[1];
    a3[2] = a1[2];
    return 1;
  }
  else
  {
    BOOL v7 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v7)
    {
      int v8 = 136316162;
      int v9 = "is_lgh_ivf_frame";
      __int16 v10 = 2048;
      __int16 v11 = a1;
      __int16 v12 = 2048;
      __int16 v13 = a3;
      __int16 v14 = 2048;
      unint64_t v15 = a2;
      __int16 v16 = 1024;
      int v17 = 12;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: buf %p frame %p size %zu expect at least %d\n", (uint8_t *)&v8, 0x30u);
      return 0;
    }
  }
  return result;
}

uint64_t is_lgh_super_frame(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (!a1 || !a2 || !a3)
  {
    BOOL v22 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v22) {
      return result;
    }
    int v29 = 136315906;
    int v30 = "is_lgh_super_frame";
    __int16 v31 = 2048;
    *(void *)int v32 = a1;
    *(_WORD *)&v32[8] = 1024;
    unsigned int v33 = a2;
    __int16 v34 = 2048;
    unsigned int v35 = a3;
    int v23 = &_os_log_internal;
    signed int v24 = "AppleAVD: %s: buf %p size %d sf %p\n";
    uint32_t v25 = 38;
    goto LABEL_24;
  }
  unsigned int v6 = *(unsigned __int8 *)(a1 + a2 - 1);
  if ((v6 & 0xE0) != 0xC0) {
    return 0;
  }
  uint64_t v7 = (v6 & 7) + 1;
  unsigned int v8 = v7 + v7 * ((v6 >> 3) & 3) + 2;
  if (a2 <= v8)
  {
    BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v26) {
      return result;
    }
    int v29 = 136315650;
    int v30 = "is_lgh_super_frame";
    __int16 v31 = 1024;
    *(_DWORD *)int v32 = a2;
    *(_WORD *)&v32[4] = 1024;
    *(_DWORD *)&v32[6] = v8;
    int v23 = &_os_log_internal;
    signed int v24 = "AppleAVD: %s: buffer size %d expect bigger than %d (two super frame header bytes plus total frame size bytes)\n";
    goto LABEL_23;
  }
  int v9 = *(unsigned __int8 *)(a1 + a2 - v8);
  if (v6 != v9)
  {
    BOOL v27 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v27) {
      return result;
    }
    int v29 = 136315650;
    int v30 = "is_lgh_super_frame";
    __int16 v31 = 1024;
    *(_DWORD *)int v32 = v6;
    *(_WORD *)&v32[4] = 1024;
    *(_DWORD *)&v32[6] = v9;
    int v23 = &_os_log_internal;
    signed int v24 = "AppleAVD: %s: inconsistent super frame header %x %x\n";
    goto LABEL_23;
  }
  int v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = 0;
  *a3 = 0;
  __int16 v13 = (unsigned __int8 *)(a1 + a2 - v8 + 1);
  int v14 = (v6 & 0x18) + 8;
  do
  {
    int v15 = 0;
    int v16 = 0;
    int v17 = &a3[v11];
    v17[1] = 0;
    uint64_t v18 = v17 + 1;
    *(void *)&a3[2 * v11 + 10] = a1 + v12;
    do
    {
      int v19 = *v13++;
      v16 |= v19 << v15;
      *uint64_t v18 = v16;
      v15 += 8;
    }
    while (v14 != v15);
    v12 += v16;
    unsigned int v20 = v12 + v8;
    if (v12 + v8 <= a2) {
      *a3 = ++v10;
    }
    ++v11;
  }
  while (v11 != v7);
  if (v20 == a2) {
    return 1;
  }
  BOOL v28 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v28)
  {
    int v29 = 136315650;
    int v30 = "is_lgh_super_frame";
    __int16 v31 = 1024;
    *(_DWORD *)int v32 = v20;
    *(_WORD *)&v32[4] = 1024;
    *(_DWORD *)&v32[6] = a2;
    int v23 = &_os_log_internal;
    signed int v24 = "AppleAVD: %s: total frame size plus super frame index size %d not equal to buffer size %d\n";
LABEL_23:
    uint32_t v25 = 24;
LABEL_24:
    _os_log_impl(&dword_223977000, v23, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v29, v25);
    return 0;
  }
  return result;
}

BOOL is_lgh_super_frame_mask(char a1)
{
  return (a1 & 0xE0) == 192;
}

uint64_t get_lgh_super_frame_index_size(unsigned int a1)
{
  return (a1 & 7) + 1 + ((a1 & 7) + 1) * ((a1 >> 3) & 3) + 2;
}

BOOL is_lgh_super_frame_offset(uint64_t a1, unint64_t a2, _DWORD *a3, unsigned int a4, char a5)
{
  int v6 = 0;
  uint64_t v7 = 0;
  int v8 = 0;
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v9 = (a4 >> 3) & 3;
  uint64_t v10 = (a4 & 7) + 1;
  int v11 = v10 + v10 * v9 + 2;
  *a3 = 0;
  unsigned int v12 = (unsigned __int8 *)(a1 + 1);
  int v13 = 8 * v9 + 8;
  do
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = &a3[v7];
    v16[1] = 0;
    int v17 = v16 + 1;
    v17[8] = v8;
    do
    {
      int v18 = *v12++;
      v15 |= v18 << v14;
      *int v17 = v15;
      v14 += 8;
    }
    while (v13 != v14);
    v8 += v15;
    unint64_t v19 = (v8 + v11);
    if (v19 <= a2) {
      *a3 = ++v6;
    }
    ++v7;
  }
  while (v7 != v10);
  BOOL result = v19 == a2;
  if (v19 != a2 && (a5 & 1) == 0)
  {
    BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v21)
    {
      int v22 = 136315650;
      int v23 = "is_lgh_super_frame_offset";
      __int16 v24 = 1024;
      int v25 = v19;
      __int16 v26 = 2048;
      unint64_t v27 = a2;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: total frame size plus super frame index size %d not equal to buffer size %zu\n", (uint8_t *)&v22, 0x1Cu);
      return 0;
    }
  }
  return result;
}

int CC_MD5_Final(unsigned __int8 *md, CC_MD5_CTX *c)
{
  return MEMORY[0x270ED7AD8](md, c);
}

int CC_MD5_Init(CC_MD5_CTX *c)
{
  return MEMORY[0x270ED7AE0](c);
}

int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x270ED7AE8](c, data, *(void *)&len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x270EE42E8](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x270EE42F0](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x270EE42F8](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x270EE4348]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x270EE4788](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x270EE47F0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x270EE4838]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE48F0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x270EE4968](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x270EE4A20](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x270EE4AE8](allocator, port, order);
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x270EE4AF0](allocator, *(void *)&portNum, callout, context, shouldFreeInfo);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x270EE4CC0](key, applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateFromXMLData(CFAllocatorRef allocator, CFDataRef xmlData, CFOptionFlags mutabilityOption, CFStringRef *errorString)
{
  return (CFPropertyListRef)MEMORY[0x270EE4D30](allocator, xmlData, mutabilityOption, errorString);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x270EE4E58]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRun(void)
{
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5048](theString1, theString2, compareOptions);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B0](alloc, maxLength);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x270EE5178](theString, buffer, bufferSize, *(void *)&encoding);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x270EE51C8](str);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x270EE79C0]();
}

uint64_t CMBaseObjectGetVTable()
{
  return MEMORY[0x270EE79D0]();
}

OSStatus CMBlockBufferCopyDataBytes(CMBlockBufferRef theSourceBuffer, size_t offsetToData, size_t dataLength, void *destination)
{
  return MEMORY[0x270EE79F0](theSourceBuffer, offsetToData, dataLength, destination);
}

size_t CMBlockBufferGetDataLength(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x270EE7A20](theBuffer);
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x270EE7AD0]();
}

Boolean CMFormatDescriptionEqual(CMFormatDescriptionRef formatDescription, CMFormatDescriptionRef otherFormatDescription)
{
  return MEMORY[0x270EE7AE0](formatDescription, otherFormatDescription);
}

CFPropertyListRef CMFormatDescriptionGetExtension(CMFormatDescriptionRef desc, CFStringRef extensionKey)
{
  return (CFPropertyListRef)MEMORY[0x270EE7AF0](desc, extensionKey);
}

CFDictionaryRef CMFormatDescriptionGetExtensions(CMFormatDescriptionRef desc)
{
  return (CFDictionaryRef)MEMORY[0x270EE7B00](desc);
}

FourCharCode CMFormatDescriptionGetMediaSubType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x270EE7B10](desc);
}

CFTypeRef CMGetAttachment(CMAttachmentBearerRef target, CFStringRef key, CMAttachmentMode *attachmentModeOut)
{
  return (CFTypeRef)MEMORY[0x270EE7B30](target, key, attachmentModeOut);
}

CMBlockBufferRef CMSampleBufferGetDataBuffer(CMSampleBufferRef sbuf)
{
  return (CMBlockBufferRef)MEMORY[0x270EE7C18](sbuf);
}

CMTime *__cdecl CMSampleBufferGetDecodeTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x270EE7C20](retstr, sbuf);
}

CMFormatDescriptionRef CMSampleBufferGetFormatDescription(CMSampleBufferRef sbuf)
{
  return (CMFormatDescriptionRef)MEMORY[0x270EE7C30](sbuf);
}

CMTime *__cdecl CMSampleBufferGetOutputDuration(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x270EE7C60](retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x270EE7C78](retstr, sbuf);
}

CFArrayRef CMSampleBufferGetSampleAttachmentsArray(CMSampleBufferRef sbuf, Boolean createIfNecessary)
{
  return (CFArrayRef)MEMORY[0x270EE7C88](sbuf, createIfNecessary);
}

OSStatus CMTagCollectionCreate(CFAllocatorRef allocator, const CMTag *tags, CMItemCount tagCount, CMTagCollectionRef *newCollectionOut)
{
  return MEMORY[0x270EE7D68](allocator, tags, tagCount, newCollectionOut);
}

CMTag CMTagMakeWithSInt64Value(CMTagCategory category, int64_t value)
{
  uint64_t v2 = MEMORY[0x270EE7D70](*(void *)&category, value);
  result.value = v3;
  result.category = v2;
  result.dataType = HIDWORD(v2);
  return result;
}

OSStatus CMTaggedBufferGroupCreate(CFAllocatorRef allocator, CFArrayRef tagCollections, CFArrayRef buffers, CMTaggedBufferGroupRef *groupOut)
{
  return MEMORY[0x270EE7D78](allocator, tagCollections, buffers, groupOut);
}

OSStatus CMTaggedBufferGroupCreateCombined(CFAllocatorRef allocator, CFArrayRef taggedBufferGroups, CMTaggedBufferGroupRef *groupOut)
{
  return MEMORY[0x270EE7D80](allocator, taggedBufferGroups, groupOut);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x270EE7F08](retstr, lhs, rhs);
}

CMVideoDimensions CMVideoFormatDescriptionGetDimensions(CMVideoFormatDescriptionRef videoDesc)
{
  return (CMVideoDimensions)MEMORY[0x270EE7FD0](videoDesc);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA150](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x270EEA1A0](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA1C8](pixelBuffer, planeIndex);
}

void CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer, size_t *extraColumnsOnLeft, size_t *extraColumnsOnRight, size_t *extraRowsOnTop, size_t *extraRowsOnBottom)
{
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1E8](pixelBuffer);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x270EEA200](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA218](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x270EEA260](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x270EEA278](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA288](allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferPoolRelease(CVPixelBufferPoolRef pixelBufferPool)
{
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x270EEA320](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x270EEA330](pixelBuffer, unlockFlags);
}

uint64_t CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()
{
  return MEMORY[0x270EEA348]();
}

uint64_t FigFormatDescriptionRelease()
{
  return MEMORY[0x270EE8228]();
}

uint64_t FigFormatDescriptionRetain()
{
  return MEMORY[0x270EE8230]();
}

uint64_t FigH264Bridge_CreateHLSfMP4ParsingInfoFromAVCCData()
{
  return MEMORY[0x270EE8260]();
}

uint64_t FigH264Bridge_HLSfMP4ParsingInfoDestroy()
{
  return MEMORY[0x270EE8268]();
}

uint64_t FigH264Bridge_LocateSliceHeaderForHLSfMP4EncryptableNAL()
{
  return MEMORY[0x270EE8270]();
}

uint64_t FigHEVCBridge_CreateHLSfMP4ParsingInfoFromHVCCAndLHVCData()
{
  return MEMORY[0x270EE8280]();
}

uint64_t FigHEVCBridge_HLSfMP4ParsingInfoDestroy()
{
  return MEMORY[0x270EE82C0]();
}

uint64_t FigHEVCBridge_LocateSliceHeaderForHLSfMP4EncryptableNAL()
{
  return MEMORY[0x270EE82C8]();
}

uint64_t FigSampleBufferGetDecryptor()
{
  return MEMORY[0x270EE8338]();
}

uint64_t FigSignalErrorAt3()
{
  return MEMORY[0x270EE8380]();
}

uint64_t FigThreadRunOnce()
{
  return MEMORY[0x270EE8418]();
}

kern_return_t IOConnectCallAsyncMethod(mach_port_t connection, uint32_t selector, mach_port_t wake_port, uint64_t *reference, uint32_t referenceCnt, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x270EF3F18](*(void *)&connection, *(void *)&selector, *(void *)&wake_port, reference, *(void *)&referenceCnt, input, *(void *)&inputCnt, inputStruct);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x270EF3F40](*(void *)&connection, *(void *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOCreateReceivePort(uint32_t msgType, mach_port_t *recvPort)
{
  return MEMORY[0x270EF3FD0](*(void *)&msgType, recvPort);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x270EF4790](*(void *)&iterator);
}

kern_return_t IOMainPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return MEMORY[0x270EF47A8](*(void *)&bootstrapPort, mainPort);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x270EF4820](*(void *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x270EF49D8](*(void *)&entry, key, allocator, *(void *)&options);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x270EF4A98](*(void *)&connect);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x270EF4AB8](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EF4AD0](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x270EF4AE0](*(void *)&service, *(void *)&owningTask, *(void *)&type, connect);
}

uint64_t IOSurfaceAcceleratorCreate()
{
  return MEMORY[0x270F3D440]();
}

uint64_t IOSurfaceAcceleratorTransformSurface()
{
  return MEMORY[0x270F3D470]();
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x270EF4C28](properties);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4C50](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x270EF4C58](buffer);
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane()
{
  return MEMORY[0x270EF4C60]();
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane()
{
  return MEMORY[0x270EF4C70]();
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x270EF4C80](buffer, planeIndex);
}

uint64_t IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane()
{
  return MEMORY[0x270EF4CB8]();
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4CC0](buffer, planeIndex);
}

uint64_t IOSurfaceGetCacheMode()
{
  return MEMORY[0x270EF4CD8]();
}

uint64_t IOSurfaceGetCompressedTileHeightOfPlane()
{
  return MEMORY[0x270EF4CE0]();
}

uint64_t IOSurfaceGetCompressedTileWidthOfPlane()
{
  return MEMORY[0x270EF4CE8]();
}

uint64_t IOSurfaceGetCompressionTypeOfPlane()
{
  return MEMORY[0x270EF4CF8]();
}

uint64_t IOSurfaceGetDataProperty()
{
  return MEMORY[0x270EF4D00]();
}

uint64_t IOSurfaceGetExtendedPixelsOfPlane()
{
  return MEMORY[0x270EF4D30]();
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D48](buffer);
}

uint64_t IOSurfaceGetHeightInCompressedTilesOfPlane()
{
  return MEMORY[0x270EF4D50]();
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4D58](buffer, planeIndex);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D68](buffer);
}

uint64_t IOSurfaceGetSizeOfPlane()
{
  return MEMORY[0x270EF4DB0]();
}

IOSurfaceSubsampling IOSurfaceGetSubsampling(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4DC0](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4DE0](buffer);
}

uint64_t IOSurfaceGetWidthInCompressedTilesOfPlane()
{
  return MEMORY[0x270EF4DE8]();
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4DF0](buffer, planeIndex);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E18](buffer, *(void *)&options, seed);
}

IOSurfaceRef IOSurfaceLookup(IOSurfaceID csid)
{
  return (IOSurfaceRef)MEMORY[0x270EF4E28](*(void *)&csid);
}

uint64_t IOSurfaceSetBulkAttachments2()
{
  return MEMORY[0x270EF4E40]();
}

uint64_t IOSurfaceSetCompressedTileDataRegionMemoryUsedOfPlane()
{
  return MEMORY[0x270EF4E48]();
}

uint64_t IOSurfaceSetDataProperty()
{
  return MEMORY[0x270EF4E50]();
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E88](buffer, *(void *)&options, seed);
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x270F95FB8]();
}

uint64_t VTDecoderSessionCreatePixelBuffer()
{
  return MEMORY[0x270F06688]();
}

uint64_t VTDecoderSessionCreatePixelBufferWithOptions()
{
  return MEMORY[0x270F06690]();
}

uint64_t VTDecoderSessionEmitDecodedFrame()
{
  return MEMORY[0x270F06698]();
}

uint64_t VTDecoderSessionEmitDecodedMultiImageFrame()
{
  return MEMORY[0x270F066A0]();
}

uint64_t VTDecoderSessionEmitDecodedTile()
{
  return MEMORY[0x270F066A8]();
}

uint64_t VTDecoderSessionGetDestinationPixelBufferAttributes()
{
  return MEMORY[0x270F066B0]();
}

uint64_t VTDecoderSessionGetPixelBufferPool()
{
  return MEMORY[0x270F066B8]();
}

uint64_t VTDecoderSessionSetPixelBufferAttributes()
{
  return MEMORY[0x270F066C0]();
}

uint64_t VTRegisterVideoDecoderWithInfo()
{
  return MEMORY[0x270F06800]();
}

uint64_t VTTileDecoderSessionSetTileDecodeRequirements()
{
  return MEMORY[0x270F06850]();
}

uint64_t VTVideoDecoderGetCMBaseObject()
{
  return MEMORY[0x270F06870]();
}

uint64_t VTVideoDecoderGetClassID()
{
  return MEMORY[0x270F06878]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x270ED7E38]();
}

uint64_t __strncat_chk()
{
  return MEMORY[0x270ED7EE8]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x270ED8070]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void bzero(void *a1, size_t a2)
{
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x270ED9D98](a1, a2);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x270ED9F50]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x270EDA098](a1);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x270EDA210](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_release(void *object)
{
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x270EDAA50](object);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x270EDADF8](a1);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return MEMORY[0x270EDAE00](a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x270EDAE10](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x270EDAE20](a1, *(void *)&a2);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x270EDAE30](a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x270EDAE38](a1, *(void *)&a2);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x270EDAE58](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x270EDAE60](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x270EDAE68](a1);
}

int pthread_cond_timedwait(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x270EDAE78](a1, a2, a3);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x270EDAE80](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x270EDAE88](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x270EDAEB0](a1, a2);
}

void pthread_exit(void *a1)
{
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x270EDAF10](a1, a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x270EDAF38](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x270EDAFA0](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x270EDB038](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x270EDB098](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

char *__cdecl setlocale(int a1, const char *a2)
{
  return (char *)MEMORY[0x270EDB408](*(void *)&a1, a2);
}

int setpriority(int a1, id_t a2, int a3)
{
  return MEMORY[0x270EDB410](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x270EDB5F0](a1, a2, a3, a4);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB5F8](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x270EDB658](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x270EDB660](__big, __little, __len);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return (char *)MEMORY[0x270EDB688](__stringp, __delim);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x270EDB908](*(void *)&thread, *(void *)&flavor, policy_info, *(void *)&policy_infoCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x270EDB9E8](*(void *)&a1);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x270EDBA80](*(void *)&target_task, address, size, *(void *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x270EDBA90](*(void *)&target_task, address, size);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x270EDBAD0]();
}