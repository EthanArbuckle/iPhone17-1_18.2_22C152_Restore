uint64_t HEVC_RBSP::parseScalingListData(HEVC_RBSP *this, uint64_t a2)
{
  unint64_t v4;
  BOOL v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int *v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int *v36;
  int *v37;
  uint64_t v38;
  unsigned int *v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t i;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  char v53;
  char v55;
  _DWORD *v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  _DWORD *v60;
  uint8_t buf[4];
  int v62;
  __int16 v63;
  unsigned int v64;
  uint64_t v65;

  v4 = 0;
  v5 = 0;
  v65 = *MEMORY[0x263EF8340];
  *(_WORD *)(a2 + 6192) = 16191;
  *(_WORD *)(a2 + 6195) = 265;
  *(unsigned char *)(a2 + 6194) = 63;
  v6 = (_DWORD *)a2;
  while (2)
  {
    v55 = v5;
    v7 = 0;
    v8 = 16 << (2 * v4);
    if (v8 >= 0x40) {
      v8 = 64;
    }
    v9 = 32;
    if (!v4) {
      v9 = 8;
    }
    v10 = *(unsigned int **)((char *)this + v9);
    v57 = v4 - 2;
    v56 = v6;
    if (v8 <= 1) {
      v11 = 1;
    }
    else {
      v11 = v8;
    }
    v12 = 6;
    if (v4 == 3) {
      v12 = 2;
    }
    v58 = v12;
    v13 = 1;
    v60 = v6;
    do
    {
      v14 = *((void *)this + 13);
      ++*((_DWORD *)this + 41);
      HEVC_RBSP::flush_bits((uint64_t)this, 1);
      v59 = v13;
      if (v14 < 0)
      {
        if (v4 < 2)
        {
          LOBYTE(v43) = 8;
        }
        else
        {
          v28 = *((void *)this + 13);
          if ((v28 & 0x8000000000000000) != 0)
          {
            ++*((_DWORD *)this + 41);
            HEVC_RBSP::flush_bits((uint64_t)this, 1);
            v35 = 0;
          }
          else
          {
            v29 = HIDWORD(v28);
            v30 = -32;
            do
            {
              LODWORD(v29) = 2 * v29;
              v31 = v30 + 1;
              if ((v29 & 0x80000000) != 0) {
                break;
              }
              v32 = v30 + 32;
              ++v30;
            }
            while (v32 < 0x1E);
            *((_DWORD *)this + 41) += v31 + 33;
            HEVC_RBSP::flush_bits((uint64_t)this, v31 + 33);
            v33 = *((_DWORD *)this + 27);
            *((_DWORD *)this + 41) += v31 + 32;
            v34 = v33 >> -(char)v31;
            HEVC_RBSP::flush_bits((uint64_t)this, v31 + 32);
            v35 = v34 + ~(-2 << (v31 + 31));
          }
          v43 = (((v35 | 0xFFFFFFFE) + 1) ^ ((v35 + 1) >> 1)) - (v35 & 1) + 9;
          *(_DWORD *)(a2 + 24 * v57 + 4 * v7 + 6144) = v43;
        }
        for (i = 0; i != v11; ++i)
        {
          v45 = *((void *)this + 13);
          if ((v45 & 0x8000000000000000) != 0)
          {
            ++*((_DWORD *)this + 41);
            HEVC_RBSP::flush_bits((uint64_t)this, 1);
            v52 = 0;
          }
          else
          {
            v46 = HIDWORD(v45);
            v47 = -32;
            do
            {
              LODWORD(v46) = 2 * v46;
              v48 = v47 + 1;
              if ((v46 & 0x80000000) != 0) {
                break;
              }
              v49 = v47 + 32;
              ++v47;
            }
            while (v49 < 0x1E);
            *((_DWORD *)this + 41) += v48 + 33;
            HEVC_RBSP::flush_bits((uint64_t)this, v48 + 33);
            v50 = *((_DWORD *)this + 27);
            *((_DWORD *)this + 41) += v48 + 32;
            v51 = v50 >> -(char)v48;
            HEVC_RBSP::flush_bits((uint64_t)this, v48 + 32);
            v52 = v51 + ~(-2 << (v48 + 31));
          }
          v43 = (((v52 & 1) == 0) + v43 + (-((v52 & 1) == 0) ^ ((v52 + 1) >> 1)));
          *(_DWORD *)(a2 + 1536 * v4 + (v7 << 8) + 4 * v10[i]) = v43;
        }
        goto LABEL_56;
      }
      v15 = *((void *)this + 13);
      if ((v15 & 0x8000000000000000) != 0)
      {
        ++*((_DWORD *)this + 41);
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
LABEL_31:
        *(unsigned char *)(a2 + v4 + 6192) &= ~(1 << v7);
        if (v4)
        {
          if (v4 != 1) {
            *(_DWORD *)(a2 + 24 * v57 + 4 * v7 + 6144) = 16;
          }
          v36 = (int *)&defaultInterScalingList8x8;
          if (v7 >= 3) {
            v37 = (int *)&defaultInterScalingList8x8;
          }
          else {
            v37 = (int *)&defaultIntraScalingList8x8;
          }
          if (!v7) {
            v36 = (int *)&defaultIntraScalingList8x8;
          }
          if (v4 >= 3) {
            v37 = v36;
          }
          v38 = v11;
          v39 = v10;
          do
          {
            v41 = *v37++;
            v40 = v41;
            v42 = *v39++;
            *(_DWORD *)(a2 + 1536 * v4 + (v7 << 8) + 4 * v42) = v40;
            --v38;
          }
          while (v38);
        }
        else
        {
          memset_pattern16((void *)(a2 + (v7 << 8)), &unk_223ADBFC0, (4 * v11));
        }
        goto LABEL_56;
      }
      v16 = HIDWORD(v15);
      v17 = -32;
      do
      {
        LODWORD(v16) = 2 * v16;
        v18 = v17 + 1;
        if ((v16 & 0x80000000) != 0) {
          break;
        }
        v19 = v17 + 32;
        ++v17;
      }
      while (v19 < 0x1E);
      *((_DWORD *)this + 41) += v18 + 33;
      HEVC_RBSP::flush_bits((uint64_t)this, v18 + 33);
      v20 = *((_DWORD *)this + 27);
      *((_DWORD *)this + 41) += v18 + 32;
      v21 = v20 >> -(char)v18;
      HEVC_RBSP::flush_bits((uint64_t)this, v18 + 32);
      v22 = -2 << (v18 + 31);
      v23 = v21 + ~v22;
      if (!v23) {
        goto LABEL_31;
      }
      if (v7 < v23)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          v62 = v7;
          v63 = 1024;
          v64 = v23;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: matrixId %d < scaling_list_pred_matrix_id_delta %d", buf, 0xEu);
        }
        v53 = v55;
        return v53 & 1;
      }
      if (v4 >= 2) {
        *(_DWORD *)(a2 + 24 * v57 + 6144 + 4 * v7) = *(_DWORD *)(a2
      }
                                                                 + 24 * v57
                                                                 + 6144
                                                                 + 4 * (v7 - v23));
      v24 = &v56[64 * (unint64_t)(v22 + v13 - v21)];
      v25 = v11;
      v26 = v60;
      do
      {
        v27 = *v24++;
        *v26++ = v27;
        --v25;
      }
      while (v25);
LABEL_56:
      ++v7;
      v13 = v59 + 1;
      v60 += 64;
    }
    while (v7 != v58);
    v5 = v4 > 2;
    v6 = v56 + 384;
    if (++v4 != 4) {
      continue;
    }
    break;
  }
  v53 = 1;
  return v53 & 1;
}

uint64_t HEVC_RBSP::parseProfileTierLevel(HEVC_RBSP *this, uint64_t a2, int a3, unsigned int a4)
{
  if (a3)
  {
    unint64_t v7 = *((void *)this + 13);
    *((_DWORD *)this + 41) += 2;
    unint64_t v8 = v7 >> 62;
    HEVC_RBSP::flush_bits((uint64_t)this, 2);
    *(_DWORD *)a2 = v8;
    unint64_t v9 = *((void *)this + 13);
    ++*((_DWORD *)this + 41);
    unint64_t v10 = v9 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(unsigned char *)(a2 + 4) = v10;
    unint64_t v11 = *((void *)this + 13);
    *((_DWORD *)this + 41) += 5;
    unint64_t v12 = v11 >> 59;
    HEVC_RBSP::flush_bits((uint64_t)this, 5);
    uint64_t v13 = 0;
    *(_DWORD *)(a2 + 8) = v12;
    do
    {
      unint64_t v14 = *((void *)this + 13);
      ++*((_DWORD *)this + 41);
      unint64_t v15 = v14 >> 63;
      HEVC_RBSP::flush_bits((uint64_t)this, 1);
      *(unsigned char *)(a2 + 12 + v13++) = v15;
    }
    while (v13 != 32);
    unint64_t v16 = *((void *)this + 13);
    ++*((_DWORD *)this + 41);
    unint64_t v17 = v16 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(unsigned char *)(a2 + 44) = v17;
    unint64_t v18 = *((void *)this + 13);
    ++*((_DWORD *)this + 41);
    unint64_t v19 = v18 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(unsigned char *)(a2 + 45) = v19;
    unint64_t v20 = *((void *)this + 13);
    ++*((_DWORD *)this + 41);
    unint64_t v21 = v20 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(unsigned char *)(a2 + 46) = v21;
    unint64_t v22 = *((void *)this + 13);
    ++*((_DWORD *)this + 41);
    unint64_t v23 = v22 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(unsigned char *)(a2 + 47) = v23;
    LODWORD(v23) = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += 32;
    HEVC_RBSP::flush_bits((uint64_t)this, 32);
    *(_DWORD *)(a2 + 48) = v23;
    unint64_t v24 = *((void *)this + 13);
    *((_DWORD *)this + 41) += 12;
    unint64_t v25 = v24 >> 52;
    HEVC_RBSP::flush_bits((uint64_t)this, 12);
    *(_DWORD *)(a2 + 48) = v25;
  }
  int v26 = *((unsigned __int8 *)this + 111);
  *((_DWORD *)this + 41) += 8;
  uint64_t result = HEVC_RBSP::flush_bits((uint64_t)this, 8);
  *(_DWORD *)(a2 + 52) = v26;
  if (a4)
  {
    uint64_t v28 = a4;
    v29 = (unsigned char *)(a2 + 120);
    uint64_t v30 = a4;
    do
    {
      unint64_t v31 = *((void *)this + 13);
      ++*((_DWORD *)this + 41);
      unint64_t v32 = v31 >> 63;
      HEVC_RBSP::flush_bits((uint64_t)this, 1);
      *(v29 - 64) = v32;
      unint64_t v33 = *((void *)this + 13);
      ++*((_DWORD *)this + 41);
      unint64_t v34 = v33 >> 63;
      uint64_t result = HEVC_RBSP::flush_bits((uint64_t)this, 1);
      *v29++ = v34;
      --v30;
    }
    while (v30);
    if (a4 <= 7)
    {
      unsigned int v35 = a4 - 8;
      do
      {
        *((_DWORD *)this + 41) += 2;
        uint64_t result = HEVC_RBSP::flush_bits((uint64_t)this, 2);
      }
      while (!__CFADD__(v35++, 1));
    }
    uint64_t v37 = 0;
    uint64_t v38 = a2 + 760;
    do
    {
      uint64_t v39 = a2 + v37;
      if (*(unsigned char *)(a2 + v37 + 56))
      {
        unint64_t v40 = *((void *)this + 13);
        *((_DWORD *)this + 41) += 2;
        unint64_t v41 = v40 >> 62;
        HEVC_RBSP::flush_bits((uint64_t)this, 2);
        uint64_t v42 = a2 + 4 * v37;
        *(_DWORD *)(v42 + 184) = v41;
        unint64_t v43 = *((void *)this + 13);
        ++*((_DWORD *)this + 41);
        unint64_t v44 = v43 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        *(unsigned char *)(v39 + 440) = v44;
        unint64_t v45 = *((void *)this + 13);
        *((_DWORD *)this + 41) += 5;
        unint64_t v46 = v45 >> 59;
        HEVC_RBSP::flush_bits((uint64_t)this, 5);
        uint64_t v47 = 0;
        *(_DWORD *)(v42 + 504) = v46;
        do
        {
          unint64_t v48 = *((void *)this + 13);
          ++*((_DWORD *)this + 41);
          unint64_t v49 = v48 >> 63;
          HEVC_RBSP::flush_bits((uint64_t)this, 1);
          *(unsigned char *)(v38 + v47++) = v49;
        }
        while (v47 != 32);
        unint64_t v50 = *((void *)this + 13);
        ++*((_DWORD *)this + 41);
        unint64_t v51 = v50 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        v52 = (unsigned char *)(a2 + v37);
        *(unsigned char *)(a2 + v37 + 2808) = v51;
        unint64_t v53 = *((void *)this + 13);
        ++*((_DWORD *)this + 41);
        unint64_t v54 = v53 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        v52[2872] = v54;
        unint64_t v55 = *((void *)this + 13);
        ++*((_DWORD *)this + 41);
        unint64_t v56 = v55 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        v52[2936] = v56;
        unint64_t v57 = *((void *)this + 13);
        ++*((_DWORD *)this + 41);
        unint64_t v58 = v57 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        v52[3000] = v58;
        LODWORD(v58) = *((_DWORD *)this + 27);
        *((_DWORD *)this + 41) += 32;
        HEVC_RBSP::flush_bits((uint64_t)this, 32);
        uint64_t v59 = a2 + 4 * v37;
        *(_DWORD *)(v59 + 3064) = v58;
        unint64_t v60 = *((void *)this + 13);
        *((_DWORD *)this + 41) += 12;
        unint64_t v61 = v60 >> 52;
        uint64_t result = HEVC_RBSP::flush_bits((uint64_t)this, 12);
        *(_DWORD *)(v59 + 3064) = v61;
      }
      if (*(unsigned char *)(v39 + 120))
      {
        int v62 = *((unsigned __int8 *)this + 111);
        *((_DWORD *)this + 41) += 8;
        uint64_t result = HEVC_RBSP::flush_bits((uint64_t)this, 8);
        *(_DWORD *)(a2 + 4 * v37 + 3320) = v62;
      }
      ++v37;
      v38 += 32;
    }
    while (v37 != v28);
  }
  return result;
}

uint64_t HEVC_RBSP::parseSliceHeader(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v316 = *MEMORY[0x263EF8340];
  int v13 = a3[4];
  unsigned int v14 = a3[1];
  uint64_t v301 = a3[2];
  uint64_t v15 = *(void *)(a6 + 4448);
  bzero(a2, 0x800uLL);
  a2[512] = v14;
  a2[513] = v13;
  unint64_t v16 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v17 = v16 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)a2 = v17;
  if ((v14 & 0xFFFFFFF8) == 0x10)
  {
    unint64_t v18 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    unint64_t v19 = v18 >> 63;
    HEVC_RBSP::flush_bits(a1, 1);
    *((unsigned char *)a2 + 1) = v19;
    if (a8)
    {
      int v20 = *(unsigned __int8 *)(a8 + 1);
      if (v20 != v19)
      {
        BOOL v47 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v47)
        {
          *(_DWORD *)buf = 136316674;
          v305 = "parseSliceHeader";
          __int16 v306 = 1024;
          int v307 = 3625;
          __int16 v308 = 2080;
          v309 = "no_output_of_prior_pics_flag";
          __int16 v310 = 2080;
          *(void *)v311 = "slice";
          *(_WORD *)&v311[8] = 1024;
          *(_DWORD *)v312 = v19;
          *(_WORD *)&v312[4] = 2080;
          v313 = "prev_slice";
          __int16 v314 = 1024;
          int v315 = v20;
          unint64_t v32 = &_os_log_internal;
          unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
          goto LABEL_30;
        }
        return result;
      }
    }
  }
  *((unsigned char *)a2 + 37) = (v14 < 0x16) & (0x270000u >> v14);
  unint64_t v21 = *(void *)(a1 + 104);
  if ((v21 & 0x8000000000000000) != 0)
  {
    ++*(_DWORD *)(a1 + 164);
    HEVC_RBSP::flush_bits(a1, 1);
    unsigned int v28 = 0;
  }
  else
  {
    unint64_t v22 = HIDWORD(v21);
    int v23 = -32;
    do
    {
      LODWORD(v22) = 2 * v22;
      int v24 = v23 + 1;
      if ((v22 & 0x80000000) != 0) {
        break;
      }
      unsigned int v25 = v23 + 32;
      ++v23;
    }
    while (v25 < 0x1E);
    *(_DWORD *)(a1 + 164) += v24 + 33;
    HEVC_RBSP::flush_bits(a1, v24 + 33);
    unsigned int v26 = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 164) += v24 + 32;
    unsigned int v27 = v26 >> -(char)v24;
    HEVC_RBSP::flush_bits(a1, v24 + 32);
    unsigned int v28 = v27 + ~(-2 << (v24 + 31));
  }
  a2[1] = v28;
  if (a8)
  {
    int v29 = *(_DWORD *)(a8 + 4);
    if (v28 != v29)
    {
      BOOL v46 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v46)
      {
        *(_DWORD *)buf = 136316674;
        v305 = "parseSliceHeader";
        __int16 v306 = 1024;
        int v307 = 3631;
        __int16 v308 = 2080;
        v309 = "slice_pic_parameter_set_id";
        __int16 v310 = 2080;
        *(void *)v311 = "slice";
        *(_WORD *)&v311[8] = 1024;
        *(_DWORD *)v312 = v28;
        *(_WORD *)&v312[4] = 2080;
        v313 = "prev_slice";
        __int16 v314 = 1024;
        int v315 = v29;
        unint64_t v32 = &_os_log_internal;
        unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
        goto LABEL_30;
      }
      return result;
    }
  }
  if (v28 >= 0x40)
  {
    BOOL v30 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v30)
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v305) = v28;
      unint64_t v32 = &_os_log_internal;
      unint64_t v33 = "AppleAVD: slice->slice_pic_parameter_set_id > HEVC_MAX_PPS_SET, is %d";
      uint32_t v34 = 8;
      goto LABEL_49;
    }
    return result;
  }
  if (*(_DWORD *)(a5 + 9856 * v28) == -1)
  {
    BOOL v48 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v48) {
      return result;
    }
    *(_WORD *)buf = 0;
    unint64_t v32 = &_os_log_internal;
    unint64_t v33 = "AppleAVD: PPS doesn't exist for slice header parsing";
    goto LABEL_48;
  }
  int v35 = *(_DWORD *)(a5 + 9856 * v28 + 4);
  uint64_t v36 = a4;
  if (*(_DWORD *)(a4 + 23176 * v35 + 3588) == -1)
  {
    BOOL v49 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v49) {
      return result;
    }
    *(_WORD *)buf = 0;
    unint64_t v32 = &_os_log_internal;
    unint64_t v33 = "AppleAVD: SPS doesn't exist for slice header parsing";
    goto LABEL_48;
  }
  if (*(_DWORD *)a6 == -1)
  {
    BOOL v60 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v60) {
      return result;
    }
    *(_WORD *)buf = 0;
    unint64_t v32 = &_os_log_internal;
    unint64_t v33 = "AppleAVD: VPS doesn't exist for slice header parsing";
    goto LABEL_48;
  }
  uint64_t v296 = a4 + 23176 * v35;
  int v298 = *(_DWORD *)(a5 + 9856 * v28 + 4);
  unsigned int v299 = v28;
  if (!*(unsigned char *)a2)
  {
    if (*(unsigned char *)(a5 + 9856 * v28 + 8))
    {
      unint64_t v37 = *(void *)(a1 + 104);
      ++*(_DWORD *)(a1 + 164);
      unint64_t v38 = v37 >> 63;
      HEVC_RBSP::flush_bits(a1, 1);
      int v35 = v298;
      *((unsigned char *)a2 + 8) = v38;
    }
    uint64_t v39 = (_DWORD *)(a4 + 23176 * v35 + 22896);
    int v40 = 0;
    unsigned int v41 = *v39 - 1;
    if (*v39 != 1)
    {
      do
      {
        ++v40;
        BOOL v219 = v41 > 1;
        v41 >>= 1;
      }
      while (v219);
    }
    unsigned int v42 = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 164) += v40;
    unsigned int v43 = v42 >> -(char)v40;
    HEVC_RBSP::flush_bits(a1, v40);
    a2[3] = v43;
    unsigned int v44 = *v39 - 1;
    uint64_t v36 = a4;
    int v35 = v298;
    if (v43 > v44)
    {
      BOOL v45 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v45) {
        return result;
      }
      *(_DWORD *)buf = 136316418;
      v305 = "parseSliceHeader";
      __int16 v306 = 1024;
      int v307 = 3665;
      __int16 v308 = 2080;
      v309 = "slice->slice_segment_address";
      __int16 v310 = 1024;
      *(_DWORD *)v311 = v43;
      *(_WORD *)&v311[4] = 1024;
      *(_DWORD *)&v311[6] = 0;
      *(_WORD *)v312 = 1024;
      *(_DWORD *)&v312[2] = v44;
      unint64_t v32 = &_os_log_internal;
      unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_302;
    }
  }
  int v294 = *(_DWORD *)(v36 + 23176 * v35 + 3644);
  int v295 = v294 + 4;
  uint64_t v297 = v15;
  unsigned int v50 = v299;
  if (*((unsigned char *)a2 + 8))
  {
LABEL_36:
    if (*(unsigned char *)(a5 + 9856 * v50 + 52) || *(unsigned char *)(a5 + 9856 * v50 + 53))
    {
      unint64_t v51 = *(void *)(a1 + 104);
      if ((v51 & 0x8000000000000000) != 0)
      {
        ++*(_DWORD *)(a1 + 164);
        HEVC_RBSP::flush_bits(a1, 1);
        a2[468] = 0;
      }
      else
      {
        unint64_t v52 = HIDWORD(v51);
        int v53 = -32;
        do
        {
          LODWORD(v52) = 2 * v52;
          int v54 = v53 + 1;
          if ((v52 & 0x80000000) != 0) {
            break;
          }
          unsigned int v55 = v53 + 32;
          ++v53;
        }
        while (v55 < 0x1E);
        *(_DWORD *)(a1 + 164) += v54 + 33;
        HEVC_RBSP::flush_bits(a1, v54 + 33);
        unsigned int v56 = *(_DWORD *)(a1 + 108);
        *(_DWORD *)(a1 + 164) += v54 + 32;
        unsigned int v57 = v56 >> -(char)v54;
        HEVC_RBSP::flush_bits(a1, v54 + 32);
        unsigned int v58 = v57 + ~(-2 << (v54 + 31));
        a2[468] = v58;
        if (v58)
        {
          if (v58 >= 0xA8D)
          {
            BOOL v59 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
            uint64_t result = 0;
            if (!v59) {
              return result;
            }
            *(_DWORD *)buf = 136315394;
            v305 = "parseSliceHeader";
            __int16 v306 = 1024;
            int v307 = v58;
            unint64_t v32 = &_os_log_internal;
            unint64_t v33 = "AppleAVD: %s(): illegal num_entry_point_offsets %d";
            goto LABEL_115;
          }
          v76 = malloc_type_malloc(4 * v58, 0x100004052888210uLL);
          *((void *)a2 + 235) = v76;
          if (!v76)
          {
            BOOL v113 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
            uint64_t result = 0;
            if (!v113) {
              return result;
            }
            int v114 = a2[468];
            *(_DWORD *)buf = 136315394;
            v305 = "parseSliceHeader";
            __int16 v306 = 1024;
            int v307 = v114;
            unint64_t v32 = &_os_log_internal;
            unint64_t v33 = "AppleAVD: %s(): failed to allocate %d x4 bytes mem for slice->entry_point_offset_minus1";
LABEL_115:
            uint32_t v34 = 18;
            goto LABEL_49;
          }
          unsigned int v77 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
          unsigned int v78 = v77;
          a2[469] = v77;
          if (v77 >= 0x20)
          {
            BOOL v79 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
            uint64_t result = 0;
            if (!v79) {
              return result;
            }
            *(_DWORD *)buf = 136316418;
            v305 = "parseSliceHeader";
            __int16 v306 = 1024;
            int v307 = 4051;
            __int16 v308 = 2080;
            v309 = "slice->offset_len_minus1";
            __int16 v310 = 1024;
            *(_DWORD *)v311 = v78;
            *(_WORD *)&v311[4] = 1024;
            *(_DWORD *)&v311[6] = 0;
            *(_WORD *)v312 = 1024;
            *(_DWORD *)&v312[2] = 31;
            unint64_t v32 = &_os_log_internal;
            unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
            goto LABEL_302;
          }
          if (a2[468])
          {
            unint64_t v115 = 0;
            int v116 = v77 + 1;
            char v117 = 31 - v77;
            do
            {
              unsigned int v118 = *(_DWORD *)(a1 + 108);
              *(_DWORD *)(a1 + 164) += v116;
              unsigned int v119 = v118 >> v117;
              HEVC_RBSP::flush_bits(a1, v116);
              *(_DWORD *)(*((void *)a2 + 235) + 4 * v115++) = v119;
            }
            while (v115 < a2[468]);
          }
        }
      }
    }
    if (a7)
    {
      if (*(unsigned char *)(a5 + 9856 * v50 + 6464))
      {
        unsigned int v70 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
        a2[472] = v70;
        if (v70 >= 0x101)
        {
          unsigned int v71 = v70;
          BOOL v72 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (!v72) {
            return result;
          }
          *(_DWORD *)buf = 136316418;
          v305 = "parseSliceHeader";
          __int16 v306 = 1024;
          int v307 = 4070;
          __int16 v308 = 2080;
          v309 = "slice->slice_segment_header_extension_length";
          __int16 v310 = 1024;
          *(_DWORD *)v311 = v71;
          *(_WORD *)&v311[4] = 1024;
          *(_DWORD *)&v311[6] = 0;
          *(_WORD *)v312 = 1024;
          *(_DWORD *)&v312[2] = 256;
          unint64_t v32 = &_os_log_internal;
          unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
          goto LABEL_302;
        }
        int v80 = *(_DWORD *)(a1 + 164);
        *((unsigned char *)a2 + 1893) = 0;
        if (*(unsigned char *)(a5 + 9856 * v50 + 6544))
        {
          unint64_t v81 = *(void *)(a1 + 104);
          *(_DWORD *)(a1 + 164) = v80 + 2;
          unint64_t v82 = v81 >> 62;
          HEVC_RBSP::flush_bits(a1, 2);
          a2[75] = v82;
          *((unsigned char *)a2 + 1893) = 1;
          uint64_t v83 = v297;
          if (*((unsigned char *)a2 + 37) && v82 == 3)
          {
            BOOL v84 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
            uint64_t result = 0;
            if (!v84) {
              return result;
            }
            *(_DWORD *)buf = 136316418;
            v305 = "parseSliceHeader";
            __int16 v306 = 1024;
            int v307 = 4080;
            __int16 v308 = 2080;
            v309 = "slice->poc_reset_idc";
            __int16 v310 = 1024;
            *(_DWORD *)v311 = 3;
            *(_WORD *)&v311[4] = 1024;
            *(_DWORD *)&v311[6] = 0;
            *(_WORD *)v312 = 1024;
            *(_DWORD *)&v312[2] = 2;
            unint64_t v32 = &_os_log_internal;
            unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
            goto LABEL_302;
          }
        }
        else
        {
          LODWORD(v82) = a2[75];
          uint64_t v83 = v297;
        }
        if (v82)
        {
          unint64_t v124 = *(void *)(a1 + 104);
          *(_DWORD *)(a1 + 164) += 6;
          unint64_t v125 = v124 >> 58;
          HEVC_RBSP::flush_bits(a1, 6);
          a2[76] = v125;
          if (a2[75] == 3)
          {
            unint64_t v126 = *(void *)(a1 + 104);
            ++*(_DWORD *)(a1 + 164);
            unint64_t v127 = v126 >> 63;
            HEVC_RBSP::flush_bits(a1, 1);
            *((unsigned char *)a2 + 308) = v127;
            unsigned int v128 = *(_DWORD *)(a1 + 108);
            *(_DWORD *)(a1 + 164) += v295;
            LODWORD(v127) = v128 >> (28 - v294);
            HEVC_RBSP::flush_bits(a1, v295);
            a2[78] = v127;
          }
        }
        if (*((unsigned char *)a2 + 37))
        {
          if (!*(unsigned char *)(v83 + 746)
            || *(_WORD *)(*(void *)(v83 + 512) + 28 * *(unsigned __int16 *)(v83 + 2 * (int)v301 + 580) + 18))
          {
            goto LABEL_141;
          }
        }
        else if (!*(unsigned char *)(v83 + 746))
        {
LABEL_141:
          if (*((unsigned char *)a2 + 316)) {
            a2[80] = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
          }
          unsigned int v137 = 8 * a2[472];
          int v138 = *(_DWORD *)(a1 + 164);
          if (v137 > v138 - v80 && v80 - v138 + v137)
          {
            unsigned int v139 = v138 - v80 - v137;
            do
            {
              unint64_t v140 = *(void *)(a1 + 104);
              ++*(_DWORD *)(a1 + 164);
              unint64_t v141 = v140 >> 63;
              HEVC_RBSP::flush_bits(a1, 1);
              *((unsigned char *)a2 + 1892) = v141;
              BOOL v107 = __CFADD__(v139++, 1);
            }
            while (!v107);
          }
          goto LABEL_148;
        }
        unint64_t v135 = *(void *)(a1 + 104);
        ++*(_DWORD *)(a1 + 164);
        unint64_t v136 = v135 >> 63;
        HEVC_RBSP::flush_bits(a1, 1);
        *((unsigned char *)a2 + 316) = v136;
        goto LABEL_141;
      }
    }
    else if (*(unsigned char *)(a5 + 9856 * v50 + 6464))
    {
      unsigned int v73 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
      unsigned int v74 = v73;
      a2[472] = v73;
      if (v73 > 0x100)
      {
        BOOL v75 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v75) {
          return result;
        }
        *(_DWORD *)buf = 136316418;
        v305 = "parseSliceHeader";
        __int16 v306 = 1024;
        int v307 = 4118;
        __int16 v308 = 2080;
        v309 = "slice->slice_segment_header_extension_length";
        __int16 v310 = 1024;
        *(_DWORD *)v311 = v74;
        *(_WORD *)&v311[4] = 1024;
        *(_DWORD *)&v311[6] = 0;
        *(_WORD *)v312 = 1024;
        *(_DWORD *)&v312[2] = 256;
        unint64_t v32 = &_os_log_internal;
        unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
        goto LABEL_302;
      }
      if (v73)
      {
        unsigned int v85 = 0;
        do
        {
          *(_DWORD *)(a1 + 164) += 8;
          HEVC_RBSP::flush_bits(a1, 8);
          ++v85;
        }
        while (v85 < a2[472]);
      }
    }
LABEL_148:
    HEVC_RBSP::byte_alignment((HEVC_RBSP *)a1);
    return 1;
  }
  *((unsigned char *)a2 + 738) = 1;
  uint64_t v61 = a5;
  if (a7)
  {
    uint64_t v62 = a5 + 9856 * v299;
    int v64 = *(_DWORD *)(v62 + 12);
    v63 = (_DWORD *)(v62 + 12);
    if (v64)
    {
      unint64_t v65 = *(void *)(a1 + 104);
      ++*(_DWORD *)(a1 + 164);
      unint64_t v66 = v65 >> 63;
      unsigned int v67 = 1;
      HEVC_RBSP::flush_bits(a1, 1);
      *((unsigned char *)a2 + 16) = v66;
      uint64_t v61 = a5;
      if (*v63 >= 2u)
      {
        unint64_t v68 = *(void *)(a1 + 104);
        ++*(_DWORD *)(a1 + 164);
        unint64_t v69 = v68 >> 63;
        HEVC_RBSP::flush_bits(a1, 1);
        *((unsigned char *)a2 + 17) = v69;
        uint64_t v61 = a5;
        unsigned int v67 = 2;
      }
    }
    else
    {
      unsigned int v67 = 0;
      uint64_t v61 = a5;
    }
  }
  else
  {
    unsigned int v67 = 0;
  }
  uint64_t v86 = v61 + 9856 * v299;
  unsigned int v89 = *(_DWORD *)(v86 + 12);
  v88 = (unsigned int *)(v86 + 12);
  for (unsigned int i = v89; v67 < i; unsigned int i = *v88)
  {
    unint64_t v90 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    unint64_t v91 = v90 >> 63;
    HEVC_RBSP::flush_bits(a1, 1);
    *((unsigned char *)a2 + 18) = v91;
    ++v67;
  }
  unint64_t v92 = *(void *)(a1 + 104);
  if ((v92 & 0x8000000000000000) != 0)
  {
    ++*(_DWORD *)(a1 + 164);
    HEVC_RBSP::flush_bits(a1, 1);
    a2[5] = 0;
    v293 = a2 + 5;
    uint64_t v95 = v297;
  }
  else
  {
    unint64_t v93 = HIDWORD(v92);
    int v94 = -32;
    uint64_t v95 = v297;
    do
    {
      LODWORD(v93) = 2 * v93;
      int v96 = v94 + 1;
      if ((v93 & 0x80000000) != 0) {
        break;
      }
      unsigned int v97 = v94 + 32;
      ++v94;
    }
    while (v97 < 0x1E);
    *(_DWORD *)(a1 + 164) += v96 + 33;
    HEVC_RBSP::flush_bits(a1, v96 + 33);
    unsigned int v98 = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 164) += v96 + 32;
    unsigned int v99 = v98 >> -(char)v96;
    HEVC_RBSP::flush_bits(a1, v96 + 32);
    unsigned int v100 = v99 + ~(-2 << (v96 + 31));
    a2[5] = v100;
    if (v100 > 2)
    {
      BOOL v101 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v101) {
        return result;
      }
      *(_DWORD *)buf = 136316418;
      v305 = "parseSliceHeader";
      __int16 v306 = 1024;
      int v307 = 3696;
      __int16 v308 = 2080;
      v309 = "slice->slice_type";
      __int16 v310 = 1024;
      *(_DWORD *)v311 = v100;
      *(_WORD *)&v311[4] = 1024;
      *(_DWORD *)&v311[6] = 0;
      *(_WORD *)v312 = 1024;
      *(_DWORD *)&v312[2] = 2;
      unint64_t v32 = &_os_log_internal;
      unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_302;
    }
    v293 = a2 + 5;
  }
  if (*(unsigned char *)(a5 + 9856 * v299 + 9))
  {
    unint64_t v102 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    unint64_t v103 = v102 >> 63;
    HEVC_RBSP::flush_bits(a1, 1);
  }
  else
  {
    LODWORD(v103) = 1;
  }
  *((unsigned char *)a2 + 24) = v103;
  if (a8)
  {
    int v104 = *(unsigned __int8 *)(a8 + 24);
    if (v103 != v104)
    {
      BOOL v112 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v112)
      {
        *(_DWORD *)buf = 136316674;
        v305 = "parseSliceHeader";
        __int16 v306 = 1024;
        int v307 = 3703;
        __int16 v308 = 2080;
        v309 = "pic_output_flag";
        __int16 v310 = 2080;
        *(void *)v311 = "slice";
        *(_WORD *)&v311[8] = 1024;
        *(_DWORD *)v312 = v103;
        *(_WORD *)&v312[4] = 2080;
        v313 = "prev_slice";
        __int16 v314 = 1024;
        int v315 = v104;
        unint64_t v32 = &_os_log_internal;
        unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
        goto LABEL_30;
      }
      return result;
    }
  }
  if (*(unsigned char *)(a4 + 23176 * v298 + 3604) == 1)
  {
    unint64_t v105 = *(void *)(a1 + 104);
    *(_DWORD *)(a1 + 164) += 2;
    unint64_t v106 = v105 >> 62;
    HEVC_RBSP::flush_bits(a1, 2);
    a2[7] = v106;
  }
  if (a7)
  {
    if ((int)v301 < 1)
    {
      if (v14 - 21 > 0xFFFFFFFD) {
        goto LABEL_210;
      }
    }
    else
    {
      if (*(unsigned char *)(*(void *)(v95 + 512) + 28 * *(unsigned __int16 *)(v95 + 2 * v301 + 580) + 25)) {
        BOOL v107 = v14 - 21 >= 0xFFFFFFFE;
      }
      else {
        BOOL v107 = 0;
      }
      if (v107)
      {
LABEL_209:
        if (!*(unsigned char *)(v297 + 714))
        {
          uint64_t v235 = v297 + 2 * v301;
          if (*(_WORD *)(*(void *)(v297 + 512) + 28 * *(unsigned __int16 *)(v235 + 580) + 18))
          {
            uint64_t v236 = *(void *)(a1 + 104);
            ++*(_DWORD *)(a1 + 164);
            uint64_t v237 = HEVC_RBSP::flush_bits(a1, 1);
            *((unsigned char *)a2 + 38) = v236 < 0;
            if (v236 < 0)
            {
              v292 = (unsigned __int16 *)(v235 + 580);
              unsigned int v238 = *(unsigned __int16 *)(*(void *)(v297 + 512) + 28 * *(unsigned __int16 *)(v235 + 580) + 18);
              if (v238 >= 2)
              {
                int v239 = 0;
                unsigned int v240 = v238 - 1;
                unsigned int v241 = v238 - 1;
                do
                {
                  --v239;
                  BOOL v219 = v241 > 1;
                  v241 >>= 1;
                }
                while (v219);
                if (!*(unsigned char *)(v297 + 745))
                {
                  unsigned int v242 = *(_DWORD *)(a1 + 108);
                  *(_DWORD *)(a1 + 164) -= v239;
                  unsigned int v243 = v242 >> v239;
                  uint64_t v237 = HEVC_RBSP::flush_bits(a1, -v239);
                  a2[10] = v243;
                  if (v243 > v238)
                  {
                    BOOL v244 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
                    uint64_t result = 0;
                    if (!v244) {
                      return result;
                    }
                    *(_DWORD *)buf = 136316418;
                    v305 = "parseSliceHeader";
                    __int16 v306 = 1024;
                    int v307 = 3837;
                    __int16 v308 = 2080;
                    v309 = "slice->num_inter_layer_ref_pics_minus1";
                    __int16 v310 = 1024;
                    *(_DWORD *)v311 = v243;
                    *(_WORD *)&v311[4] = 1024;
                    *(_DWORD *)&v311[6] = 0;
                    *(_WORD *)v312 = 1024;
                    *(_DWORD *)&v312[2] = v238;
                    unint64_t v32 = &_os_log_internal;
                    unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
                    goto LABEL_302;
                  }
                  unsigned int v238 = *(unsigned __int16 *)(*(void *)(v297 + 512) + 28 * *v292 + 18);
                  unsigned int v240 = v238 - 1;
                }
                int v272 = 0;
                if (v240)
                {
                  do
                  {
                    ++v272;
                    BOOL v219 = v240 > 1;
                    v240 >>= 1;
                  }
                  while (v219);
                }
                if (HEVC_RBSP::calcNumReflayerPics(v237, a6, v301, v13) != v238)
                {
                  int active = HEVC_RBSP::calcNumActiveRefLayerPics(a1, a6, v301, v13, (uint64_t)a2);
                  uint64_t v274 = v297;
                  if (active >= 1)
                  {
                    uint64_t v275 = 11;
                    while (1)
                    {
                      unsigned int v276 = *(unsigned __int16 *)(*(void *)(v274 + 512) + 28 * *v292 + 18);
                      unsigned int v277 = *(_DWORD *)(a1 + 108);
                      *(_DWORD *)(a1 + 164) += v272;
                      unsigned int v278 = v277 >> (32 - v272);
                      HEVC_RBSP::flush_bits(a1, v272);
                      a2[v275] = v278;
                      if (v278 > v276) {
                        break;
                      }
                      int v279 = HEVC_RBSP::calcNumActiveRefLayerPics(a1, a6, v301, v13, (uint64_t)a2);
                      uint64_t v280 = v275 - 10;
                      ++v275;
                      uint64_t v274 = v297;
                      if (v280 >= v279) {
                        goto LABEL_213;
                      }
                    }
                    BOOL v281 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
                    uint64_t result = 0;
                    if (!v281) {
                      return result;
                    }
                    *(_DWORD *)buf = 136316418;
                    v305 = "parseSliceHeader";
                    __int16 v306 = 1024;
                    int v307 = 3850;
                    __int16 v308 = 2080;
                    v309 = "slice->inter_layer_pred_layer_idc[idx]";
                    __int16 v310 = 1024;
                    *(_DWORD *)v311 = v278;
                    *(_WORD *)&v311[4] = 1024;
                    *(_DWORD *)&v311[6] = 0;
                    *(_WORD *)v312 = 1024;
                    *(_DWORD *)&v312[2] = v276;
                    unint64_t v32 = &_os_log_internal;
                    unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
LABEL_302:
                    uint32_t v34 = 46;
                    goto LABEL_49;
                  }
LABEL_213:
                  if (*((unsigned char *)a2 + 36) == 1) {
                    v193 = a2 + 81;
                  }
                  else {
                    v193 = (unsigned int *)(a4 + 23176 * v298 + 10672);
                  }
                  unsigned int v194 = *v193;
                  a2[474] = v194;
                  v195 = a2 + 82;
                  if (v14 == 20 || (v14 & 0xFFFFFFFC) == 0x10)
                  {
                    *(_OWORD *)(a2 + 118) = 0u;
                    *(_OWORD *)(a2 + 122) = 0u;
                    *(_OWORD *)(a2 + 110) = 0u;
                    *(_OWORD *)(a2 + 114) = 0u;
                    *(_OWORD *)(a2 + 102) = 0u;
                    *(_OWORD *)(a2 + 106) = 0u;
                    *(_OWORD *)(a2 + 94) = 0u;
                    *(_OWORD *)(a2 + 98) = 0u;
                    *(_OWORD *)(a2 + 86) = 0u;
                    *(_OWORD *)(a2 + 90) = 0u;
                    _OWORD *v195 = 0u;
                    unsigned int v50 = v299;
                    uint64_t v196 = a4;
                  }
                  else
                  {
                    uint64_t v196 = a4;
                    v197 = (long long *)(a4 + 23176 * v298 + 176 * v194 + 10676);
                    long long v198 = *v197;
                    long long v199 = v197[2];
                    *(_OWORD *)(a2 + 86) = v197[1];
                    *(_OWORD *)(a2 + 90) = v199;
                    _OWORD *v195 = v198;
                    long long v200 = v197[3];
                    long long v201 = v197[4];
                    long long v202 = v197[6];
                    *(_OWORD *)(a2 + 102) = v197[5];
                    *(_OWORD *)(a2 + 106) = v202;
                    *(_OWORD *)(a2 + 94) = v200;
                    *(_OWORD *)(a2 + 98) = v201;
                    long long v203 = v197[7];
                    long long v204 = v197[8];
                    long long v205 = v197[10];
                    *(_OWORD *)(a2 + 118) = v197[9];
                    *(_OWORD *)(a2 + 122) = v205;
                    *(_OWORD *)(a2 + 110) = v203;
                    *(_OWORD *)(a2 + 114) = v204;
                    unsigned int v50 = v299;
                  }
                  v206 = a2 + 149;
                  if (*(unsigned char *)(v196 + 23176 * v298 + 10649))
                  {
                    unint64_t v207 = *(void *)(a1 + 104);
                    ++*(_DWORD *)(a1 + 164);
                    unint64_t v208 = v207 >> 63;
                    HEVC_RBSP::flush_bits(a1, 1);
                    *((unsigned char *)a2 + 593) = v208;
                    if (*(_DWORD *)(a4 + 23176 * v298 + 3600))
                    {
                      unint64_t v209 = *(void *)(a1 + 104);
                      ++*(_DWORD *)(a1 + 164);
                      unint64_t v210 = v209 >> 63;
                      HEVC_RBSP::flush_bits(a1, 1);
                      *((unsigned char *)a2 + 594) = v210;
                    }
                  }
                  void *v206 = -1;
                  if (a2[5] > 1)
                  {
                    *((unsigned char *)a2 + 738) = 1;
                    uint64_t v213 = a5;
                    goto LABEL_227;
                  }
                  uint64_t v211 = *(void *)(a1 + 104);
                  ++*(_DWORD *)(a1 + 164);
                  HEVC_RBSP::flush_bits(a1, 1);
                  *((unsigned char *)a2 + 595) = v211 < 0;
                  a2[149] = *(_DWORD *)(a5 + 9856 * v50 + 20);
                  if (a2[5]) {
                    int v212 = -1;
                  }
                  else {
                    int v212 = *(_DWORD *)(a5 + 9856 * v50 + 24);
                  }
                  a2[150] = v212;
                  if (v211 < 0)
                  {
                    unsigned int v232 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
                    *(_DWORD *)v206 = v232;
                    if (v232 >= 0xF)
                    {
                      unsigned int v233 = v232;
                      BOOL v234 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
                      uint64_t result = 0;
                      if (!v234) {
                        return result;
                      }
                      *(_DWORD *)buf = 136316418;
                      v305 = "parseSliceHeader";
                      __int16 v306 = 1024;
                      int v307 = 3899;
                      __int16 v308 = 2080;
                      v309 = "slice->num_ref_idx_l0_active_minus1";
                      __int16 v310 = 1024;
                      *(_DWORD *)v311 = v233;
                      *(_WORD *)&v311[4] = 1024;
                      *(_DWORD *)&v311[6] = 0;
                      *(_WORD *)v312 = 1024;
                      *(_DWORD *)&v312[2] = 14;
                      unint64_t v32 = &_os_log_internal;
                      unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
                      goto LABEL_302;
                    }
                    if (!*v293)
                    {
                      unsigned int v245 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
                      a2[150] = v245;
                      if (v245 >= 0xF)
                      {
                        unsigned int v246 = v245;
                        BOOL v247 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
                        uint64_t result = 0;
                        if (!v247) {
                          return result;
                        }
                        *(_DWORD *)buf = 136316418;
                        v305 = "parseSliceHeader";
                        __int16 v306 = 1024;
                        int v307 = 3908;
                        __int16 v308 = 2080;
                        v309 = "slice->num_ref_idx_l1_active_minus1";
                        __int16 v310 = 1024;
                        *(_DWORD *)v311 = v246;
                        *(_WORD *)&v311[4] = 1024;
                        *(_DWORD *)&v311[6] = 0;
                        *(_WORD *)v312 = 1024;
                        *(_DWORD *)&v312[2] = 14;
                        unint64_t v32 = &_os_log_internal;
                        unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
                        goto LABEL_302;
                      }
                    }
                  }
                  unsigned int v226 = HEVC_RBSP::calcNumPocTotalCurr(a1, a6, (uint64_t)(a2 + 82), (uint64_t)a2, (uint64_t)a3, a7);
                  a2[475] = v226;
                  uint64_t v213 = a5;
                  if (*(unsigned char *)(a5 + 9856 * v50 + 6456))
                  {
                    if (v226 >= 2)
                    {
                      uint64_t result = HEVC_RBSP::parseRefPicListsModification(a1, (uint64_t)a2);
                      if (!result) {
                        return result;
                      }
                    }
                  }
                  v227 = v293;
                  if (!*v293)
                  {
                    unint64_t v228 = *(void *)(a1 + 104);
                    ++*(_DWORD *)(a1 + 164);
                    unint64_t v229 = v228 >> 63;
                    HEVC_RBSP::flush_bits(a1, 1);
                    v227 = v293;
                    *((unsigned char *)a2 + 736) = v229;
                    uint64_t v213 = a5;
                  }
                  if (*(unsigned char *)(v213 + 9856 * v50 + 17))
                  {
                    unint64_t v230 = *(void *)(a1 + 104);
                    ++*(_DWORD *)(a1 + 164);
                    unint64_t v231 = v230 >> 63;
                    HEVC_RBSP::flush_bits(a1, 1);
                    v227 = v293;
                    *((unsigned char *)a2 + 737) = v231;
                    uint64_t v213 = a5;
                  }
                  if (!*((unsigned char *)a2 + 592))
                  {
LABEL_282:
                    if ((*(unsigned char *)(v213 + 9856 * v50 + 49) && *v227 == 1
                       || *(unsigned char *)(v213 + 9856 * v50 + 50) && !*v227)
                      && !HEVC_RBSP::parsePredWeightTable((HEVC_RBSP *)a1, v296, a2, *(_DWORD *)(a4 + 23176 * v298 + 3600)))
                    {
                      BOOL v266 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
                      uint64_t result = 0;
                      if (!v266) {
                        return result;
                      }
                      *(_WORD *)buf = 0;
                      unint64_t v32 = &_os_log_internal;
                      unint64_t v33 = "AppleAVD: invalid weight table";
LABEL_48:
                      uint32_t v34 = 2;
                      goto LABEL_49;
                    }
                    unsigned int v258 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
                    a2[460] = v258;
                    if (v258 >= 5)
                    {
                      unsigned int v259 = v258;
                      BOOL v260 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
                      uint64_t result = 0;
                      if (!v260) {
                        return result;
                      }
                      *(_DWORD *)buf = 136316418;
                      v305 = "parseSliceHeader";
                      __int16 v306 = 1024;
                      int v307 = 3966;
                      __int16 v308 = 2080;
                      v309 = "slice->five_minus_max_num_merge_cand";
                      __int16 v310 = 1024;
                      *(_DWORD *)v311 = v259;
                      *(_WORD *)&v311[4] = 1024;
                      *(_DWORD *)&v311[6] = 0;
                      *(_WORD *)v312 = 1024;
                      *(_DWORD *)&v312[2] = 4;
                      unint64_t v32 = &_os_log_internal;
                      unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
                      goto LABEL_302;
                    }
LABEL_227:
                    int v214 = HEVC_RBSP::se_v((HEVC_RBSP *)a1);
                    a2[461] = v214;
                    int v215 = *(_DWORD *)(v213 + 9856 * v50 + 28);
                    uint64_t v216 = v213;
                    int v217 = -6 * *(_DWORD *)(a4 + 23176 * v298 + 3636) - v215 - 26;
                    if (25 - v215 <= v217) {
                      int v218 = -6 * *(_DWORD *)(a4 + 23176 * v298 + 3636) - v215 - 26;
                    }
                    else {
                      int v218 = 25 - v215;
                    }
                    BOOL v219 = v214 >= v217 && v214 <= v218;
                    if (!v219)
                    {
                      int v220 = v214;
                      BOOL v221 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
                      uint64_t result = 0;
                      if (!v221) {
                        return result;
                      }
                      *(_DWORD *)buf = 136316418;
                      v305 = "parseSliceHeader";
                      __int16 v306 = 1024;
                      int v307 = 3980;
                      __int16 v308 = 2080;
                      v309 = "slice->slice_qp_delta";
                      __int16 v310 = 1024;
                      *(_DWORD *)v311 = v220;
                      *(_WORD *)&v311[4] = 1024;
                      *(_DWORD *)&v311[6] = v217;
                      *(_WORD *)v312 = 1024;
                      *(_DWORD *)&v312[2] = v218;
                      unint64_t v32 = &_os_log_internal;
                      unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
                      goto LABEL_302;
                    }
                    uint64_t v222 = v216;
                    if (*(unsigned char *)(v216 + 9856 * v50 + 48))
                    {
                      a2[462] = HEVC_RBSP::se_v((HEVC_RBSP *)a1);
                      unsigned int v223 = HEVC_RBSP::se_v((HEVC_RBSP *)a1);
                      a2[463] = v223;
                      unsigned int v224 = a2[462];
                      if (v224 - 13 <= 0xFFFFFFE6)
                      {
                        BOOL v225 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
                        uint64_t result = 0;
                        if (!v225) {
                          return result;
                        }
                        *(_DWORD *)buf = 136316418;
                        v305 = "parseSliceHeader";
                        __int16 v306 = 1024;
                        int v307 = 3986;
                        __int16 v308 = 2080;
                        v309 = "slice->slice_cb_qp_offset";
                        __int16 v310 = 1024;
                        *(_DWORD *)v311 = v224;
                        *(_WORD *)&v311[4] = 1024;
                        *(_DWORD *)&v311[6] = -12;
                        *(_WORD *)v312 = 1024;
                        *(_DWORD *)&v312[2] = 12;
                        unint64_t v32 = &_os_log_internal;
                        unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
                        goto LABEL_302;
                      }
                      unsigned int v248 = v223;
                      uint64_t v222 = a5;
                      if (v223 - 13 <= 0xFFFFFFE6)
                      {
                        BOOL v249 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
                        uint64_t result = 0;
                        if (!v249) {
                          return result;
                        }
                        *(_DWORD *)buf = 136316418;
                        v305 = "parseSliceHeader";
                        __int16 v306 = 1024;
                        int v307 = 3987;
                        __int16 v308 = 2080;
                        v309 = "slice->slice_cr_qp_offset";
                        __int16 v310 = 1024;
                        *(_DWORD *)v311 = v248;
                        *(_WORD *)&v311[4] = 1024;
                        *(_DWORD *)&v311[6] = -12;
                        *(_WORD *)v312 = 1024;
                        *(_DWORD *)&v312[2] = 12;
                        unint64_t v32 = &_os_log_internal;
                        unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
                        goto LABEL_302;
                      }
                    }
                    if (*(unsigned char *)(v222 + 9856 * v50 + 6477))
                    {
                      unint64_t v250 = *(void *)(a1 + 104);
                      ++*(_DWORD *)(a1 + 164);
                      unint64_t v251 = v250 >> 63;
                      HEVC_RBSP::flush_bits(a1, 1);
                      *((unsigned char *)a2 + 1856) = v251;
                      uint64_t v222 = a5;
                    }
                    if (*(unsigned char *)(v222 + 9856 * v50 + 239))
                    {
                      unint64_t v252 = *(void *)(a1 + 104);
                      ++*(_DWORD *)(a1 + 164);
                      unint64_t v253 = v252 >> 63;
                      HEVC_RBSP::flush_bits(a1, 1);
                      *((unsigned char *)a2 + 1857) = v253;
                    }
                    else
                    {
                      LODWORD(v253) = *((unsigned __int8 *)a2 + 1857);
                    }
                    if (v253)
                    {
                      uint64_t v261 = *(void *)(a1 + 104);
                      ++*(_DWORD *)(a1 + 164);
                      HEVC_RBSP::flush_bits(a1, 1);
                      *((unsigned char *)a2 + 1858) = v261 < 0;
                      if ((v261 & 0x8000000000000000) == 0)
                      {
                        a2[465] = HEVC_RBSP::se_v((HEVC_RBSP *)a1);
                        unsigned int v262 = HEVC_RBSP::se_v((HEVC_RBSP *)a1);
                        a2[466] = v262;
                        unsigned int v263 = a2[465];
                        if (v263 - 7 <= 0xFFFFFFF2)
                        {
                          BOOL v264 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
                          uint64_t result = 0;
                          if (!v264) {
                            return result;
                          }
                          *(_DWORD *)buf = 136316418;
                          v305 = "parseSliceHeader";
                          __int16 v306 = 1024;
                          int v307 = 4004;
                          __int16 v308 = 2080;
                          v309 = "slice->slice_beta_offset_div2";
                          __int16 v310 = 1024;
                          *(_DWORD *)v311 = v263;
                          *(_WORD *)&v311[4] = 1024;
                          *(_DWORD *)&v311[6] = -6;
                          *(_WORD *)v312 = 1024;
                          *(_DWORD *)&v312[2] = 6;
                          unint64_t v32 = &_os_log_internal;
                          unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
                          goto LABEL_302;
                        }
                        unsigned int v267 = v262;
                        if (v262 - 7 <= 0xFFFFFFF2)
                        {
                          BOOL v268 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
                          uint64_t result = 0;
                          if (!v268) {
                            return result;
                          }
                          *(_DWORD *)buf = 136316418;
                          v305 = "parseSliceHeader";
                          __int16 v306 = 1024;
                          int v307 = 4005;
                          __int16 v308 = 2080;
                          v309 = "slice->slice_tc_offset_div2";
                          __int16 v310 = 1024;
                          *(_DWORD *)v311 = v267;
                          *(_WORD *)&v311[4] = 1024;
                          *(_DWORD *)&v311[6] = -6;
                          *(_WORD *)v312 = 1024;
                          *(_DWORD *)&v312[2] = 6;
                          unint64_t v32 = &_os_log_internal;
                          unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
                          goto LABEL_302;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v265 = a5 + 9856 * v50;
                      *(void *)(a2 + 465) = *(void *)(v265 + 244);
                      *((unsigned char *)a2 + 1858) = *(unsigned char *)(v265 + 240);
                    }
                    LOBYTE(v269) = *(unsigned char *)(a5 + 9856 * v50 + 237);
                    if ((_BYTE)v269 && (*((unsigned char *)a2 + 593) || *((unsigned char *)a2 + 594) || !*((unsigned char *)a2 + 1858)))
                    {
                      unint64_t v270 = *(void *)(a1 + 104);
                      ++*(_DWORD *)(a1 + 164);
                      unint64_t v269 = v270 >> 63;
                      HEVC_RBSP::flush_bits(a1, 1);
                    }
                    *((unsigned char *)a2 + 1868) = v269;
                    goto LABEL_36;
                  }
                  if (*v227)
                  {
                    *((unsigned char *)a2 + 738) = 1;
                  }
                  else
                  {
                    uint64_t v254 = *(void *)(a1 + 104);
                    ++*(_DWORD *)(a1 + 164);
                    HEVC_RBSP::flush_bits(a1, 1);
                    v227 = v293;
                    *((unsigned char *)a2 + 738) = v254 < 0;
                    if ((v254 & 0x8000000000000000) == 0)
                    {
                      uint64_t v213 = a5;
                      if ((int)a2[150] < 1) {
                        goto LABEL_282;
                      }
                      goto LABEL_279;
                    }
                  }
                  uint64_t v213 = a5;
                  if (*(int *)v206 <= 0) {
                    goto LABEL_282;
                  }
LABEL_279:
                  unsigned int v255 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
                  v227 = v293;
                  a2[185] = v255;
                  if (v255 >= 0xF)
                  {
                    unsigned int v256 = v255;
                    BOOL v257 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
                    uint64_t result = 0;
                    if (!v257) {
                      return result;
                    }
                    *(_DWORD *)buf = 136316418;
                    v305 = "parseSliceHeader";
                    __int16 v306 = 1024;
                    int v307 = 3949;
                    __int16 v308 = 2080;
                    v309 = "slice->collocated_ref_idx";
                    __int16 v310 = 1024;
                    *(_DWORD *)v311 = v256;
                    *(_WORD *)&v311[4] = 1024;
                    *(_DWORD *)&v311[6] = 0;
                    *(_WORD *)v312 = 1024;
                    *(_DWORD *)&v312[2] = 14;
                    unint64_t v32 = &_os_log_internal;
                    unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
                    goto LABEL_302;
                  }
                  goto LABEL_282;
                }
              }
            }
          }
        }
LABEL_210:
        uint64_t v191 = HEVC_RBSP::calcNumActiveRefLayerPics(a1, a6, v301, v13, (uint64_t)a2);
        if ((int)v191 >= 1)
        {
          uint64_t v192 = 0;
          do
          {
            a2[v192 + 11] = HEVC_RBSP::calcReflayerPicIdc(v191, a6, v301, v192, v13);
            ++v192;
            uint64_t v191 = HEVC_RBSP::calcNumActiveRefLayerPics(a1, a6, v301, v13, (uint64_t)a2);
          }
          while (v192 < (int)v191);
        }
        goto LABEL_213;
      }
    }
    unsigned int v120 = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 164) += v295;
    unsigned int v121 = v120 >> (28 - v294);
    HEVC_RBSP::flush_bits(a1, v295);
    a2[8] = v121;
    unsigned int v122 = *(_DWORD *)(a4 + 23176 * v298 + 22912) - 1;
    if (v121 > v122)
    {
      BOOL v123 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v123) {
        return result;
      }
      *(_DWORD *)buf = 136316418;
      v305 = "parseSliceHeader";
      __int16 v306 = 1024;
      int v307 = 3718;
      __int16 v308 = 2080;
      v309 = "slice->slice_pic_order_cnt_lsb";
      __int16 v310 = 1024;
      *(_DWORD *)v311 = v121;
      *(_WORD *)&v311[4] = 1024;
      *(_DWORD *)&v311[6] = 0;
      *(_WORD *)v312 = 1024;
      *(_DWORD *)&v312[2] = v122;
      unint64_t v32 = &_os_log_internal;
      unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_302;
    }
    if (v14 - 21 > 0xFFFFFFFD)
    {
LABEL_208:
      if ((int)v301 < 1) {
        goto LABEL_210;
      }
      goto LABEL_209;
    }
  }
  else
  {
    if (v14 - 21 > 0xFFFFFFFD) {
      goto LABEL_213;
    }
    unsigned int v108 = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 164) += v295;
    unsigned int v109 = v108 >> (28 - v294);
    HEVC_RBSP::flush_bits(a1, v295);
    a2[8] = v109;
    unsigned int v110 = *(_DWORD *)(a4 + 23176 * v298 + 22912) - 1;
    if (v109 > v110)
    {
      BOOL v111 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v111) {
        return result;
      }
      *(_DWORD *)buf = 136316418;
      v305 = "parseSliceHeader";
      __int16 v306 = 1024;
      int v307 = 3728;
      __int16 v308 = 2080;
      v309 = "slice->slice_pic_order_cnt_lsb";
      __int16 v310 = 1024;
      *(_DWORD *)v311 = v109;
      *(_WORD *)&v311[4] = 1024;
      *(_DWORD *)&v311[6] = 0;
      *(_WORD *)v312 = 1024;
      *(_DWORD *)&v312[2] = v110;
      unint64_t v32 = &_os_log_internal;
      unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_302;
    }
  }
  uint64_t v129 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *((unsigned char *)a2 + 36) = v129 < 0;
  if (a8)
  {
    int v130 = *(unsigned __int8 *)(a8 + 36);
    if (v130 != (unint64_t)v129 >> 63)
    {
      BOOL v142 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v142)
      {
        *(_DWORD *)buf = 136316674;
        v305 = "parseSliceHeader";
        __int16 v306 = 1024;
        int v307 = 3744;
        __int16 v308 = 2080;
        v309 = "short_term_ref_pic_set_sps_flag";
        __int16 v310 = 2080;
        *(void *)v311 = "slice";
        *(_WORD *)&v311[8] = 1024;
        *(_DWORD *)v312 = (unint64_t)v129 >> 63;
        *(_WORD *)&v312[4] = 2080;
        v313 = "prev_slice";
        __int16 v314 = 1024;
        int v315 = v130;
        unint64_t v32 = &_os_log_internal;
        unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
        goto LABEL_30;
      }
      return result;
    }
  }
  if (v129 < 0)
  {
    uint64_t v131 = a4;
    int v133 = v298;
    unsigned int v143 = *(_DWORD *)(a4 + 23176 * v298 + 10672);
    if (v143 >= 2)
    {
      int v144 = 0;
      unsigned int v145 = v143 - 1;
      do
      {
        --v144;
        BOOL v219 = v145 > 1;
        v145 >>= 1;
      }
      while (v219);
      unsigned int v146 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) -= v144;
      unsigned int v147 = v146 >> v144;
      HEVC_RBSP::flush_bits(a1, -v144);
      a2[81] = v147;
      uint64_t v131 = a4;
      int v133 = v298;
      if (a8)
      {
        int v148 = *(_DWORD *)(a8 + 324);
        if (v147 != v148)
        {
          BOOL v165 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v165)
          {
            *(_DWORD *)buf = 136316674;
            v305 = "parseSliceHeader";
            __int16 v306 = 1024;
            int v307 = 3759;
            __int16 v308 = 2080;
            v309 = "short_term_ref_pic_set_idx";
            __int16 v310 = 2080;
            *(void *)v311 = "slice";
            *(_WORD *)&v311[8] = 1024;
            *(_DWORD *)v312 = v147;
            *(_WORD *)&v312[4] = 2080;
            v313 = "prev_slice";
            __int16 v314 = 1024;
            int v315 = v148;
            unint64_t v32 = &_os_log_internal;
            unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
            goto LABEL_30;
          }
          return result;
        }
      }
    }
  }
  else
  {
    uint64_t v131 = a4;
    char v132 = HEVC_RBSP::parseShortTermRefPicSet((HEVC_RBSP *)a1, a4 + 23176 * v298 + 10676, *(_DWORD *)(a4 + 23176 * v298 + 10672), *(_DWORD *)(a4 + 23176 * v298 + 10672));
    int v133 = v298;
    if ((v132 & 1) == 0)
    {
      BOOL v134 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v134) {
        return result;
      }
      *(_WORD *)buf = 0;
      unint64_t v32 = &_os_log_internal;
      unint64_t v33 = "AppleAVD: parseShortTermRefPicSet prasing failure";
      goto LABEL_48;
    }
  }
  if (!*(unsigned char *)(v131 + 23176 * v133 + 22116)) {
    goto LABEL_204;
  }
  v149 = (unsigned int *)(v131 + 23176 * v133 + 22120);
  if (*v149)
  {
    unsigned int v150 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
    unsigned int v151 = v150;
    a2[126] = v150;
    if (a8)
    {
      int v152 = *(_DWORD *)(a8 + 504);
      if (v150 != v152)
      {
        BOOL v163 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v163)
        {
          *(_DWORD *)buf = 136316674;
          v305 = "parseSliceHeader";
          __int16 v306 = 1024;
          int v307 = 3766;
          __int16 v308 = 2080;
          v309 = "num_long_term_sps";
          __int16 v310 = 2080;
          *(void *)v311 = "slice";
          *(_WORD *)&v311[8] = 1024;
          *(_DWORD *)v312 = v151;
          *(_WORD *)&v312[4] = 2080;
          v313 = "prev_slice";
          __int16 v314 = 1024;
          int v315 = v152;
          unint64_t v32 = &_os_log_internal;
          unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
          goto LABEL_30;
        }
        return result;
      }
    }
    unsigned int v153 = *v149;
    if (v150 > *v149)
    {
      BOOL v154 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v154) {
        return result;
      }
      *(_DWORD *)buf = 136316418;
      v305 = "parseSliceHeader";
      __int16 v306 = 1024;
      int v307 = 3767;
      __int16 v308 = 2080;
      v309 = "slice->num_long_term_sps";
      __int16 v310 = 1024;
      *(_DWORD *)v311 = v151;
      *(_WORD *)&v311[4] = 1024;
      *(_DWORD *)&v311[6] = 0;
      *(_WORD *)v312 = 1024;
      *(_DWORD *)&v312[2] = v153;
      unint64_t v32 = &_os_log_internal;
      unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_302;
    }
  }
  unsigned int v155 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
  unsigned int v156 = v155;
  a2[127] = v155;
  if (a8)
  {
    int v157 = *(_DWORD *)(a8 + 508);
    if (v155 != v157)
    {
      BOOL v164 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v164)
      {
        *(_DWORD *)buf = 136316674;
        v305 = "parseSliceHeader";
        __int16 v306 = 1024;
        int v307 = 3773;
        __int16 v308 = 2080;
        v309 = "num_long_term_pics";
        __int16 v310 = 2080;
        *(void *)v311 = "slice";
        *(_WORD *)&v311[8] = 1024;
        *(_DWORD *)v312 = v156;
        *(_WORD *)&v312[4] = 2080;
        v313 = "prev_slice";
        __int16 v314 = 1024;
        int v315 = v157;
        unint64_t v32 = &_os_log_internal;
        unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
        goto LABEL_30;
      }
      return result;
    }
  }
  unsigned int v158 = a2[126];
  if (v158 >= 0x11)
  {
    BOOL v159 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v159) {
      return result;
    }
    *(_DWORD *)buf = 136316418;
    v305 = "parseSliceHeader";
    __int16 v306 = 1024;
    int v307 = 3775;
    __int16 v308 = 2080;
    v309 = "slice->num_long_term_sps";
    __int16 v310 = 1024;
    *(_DWORD *)v311 = v158;
    *(_WORD *)&v311[4] = 1024;
    *(_DWORD *)&v311[6] = 0;
    *(_WORD *)v312 = 1024;
    *(_DWORD *)&v312[2] = 16;
    unint64_t v32 = &_os_log_internal;
    unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
    goto LABEL_302;
  }
  unsigned int v160 = a2[126];
  unsigned int v161 = 16 - v158;
  if (v155 > v161)
  {
    BOOL v162 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v162) {
      return result;
    }
    *(_DWORD *)buf = 136316418;
    v305 = "parseSliceHeader";
    __int16 v306 = 1024;
    int v307 = 3776;
    __int16 v308 = 2080;
    v309 = "slice->num_long_term_pics";
    __int16 v310 = 1024;
    *(_DWORD *)v311 = v156;
    *(_WORD *)&v311[4] = 1024;
    *(_DWORD *)&v311[6] = 0;
    *(_WORD *)v312 = 1024;
    *(_DWORD *)&v312[2] = v161;
    unint64_t v32 = &_os_log_internal;
    unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
    goto LABEL_302;
  }
  v290 = v149;
  int v166 = 0;
  unsigned int v167 = *v149 - 1;
  if (*v149 != 1)
  {
    do
    {
      ++v166;
      BOOL v219 = v167 > 1;
      v167 >>= 1;
    }
    while (v219);
  }
  int v289 = v166;
  uint64_t v131 = a4;
  int v133 = v298;
  if (!(v155 + v160))
  {
LABEL_204:
    if (*(unsigned char *)(v131 + 23176 * v133 + 22284))
    {
      unint64_t v188 = *(void *)(a1 + 104);
      ++*(_DWORD *)(a1 + 164);
      unint64_t v189 = v188 >> 63;
      HEVC_RBSP::flush_bits(a1, 1);
      *((unsigned char *)a2 + 592) = v189;
      if (a8)
      {
        int v190 = *(unsigned __int8 *)(a8 + 592);
        if (v190 != v189)
        {
          BOOL v271 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v271)
          {
            *(_DWORD *)buf = 136316674;
            v305 = "parseSliceHeader";
            __int16 v306 = 1024;
            int v307 = 3819;
            __int16 v308 = 2080;
            v309 = "slice_temporal_mvp_enabled_flag";
            __int16 v310 = 2080;
            *(void *)v311 = "slice";
            *(_WORD *)&v311[8] = 1024;
            *(_DWORD *)v312 = v189;
            *(_WORD *)&v312[4] = 2080;
            v313 = "prev_slice";
            __int16 v314 = 1024;
            int v315 = v190;
            unint64_t v32 = &_os_log_internal;
            unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
            goto LABEL_30;
          }
          return result;
        }
      }
    }
    if (!a7) {
      goto LABEL_213;
    }
    goto LABEL_208;
  }
  unint64_t v168 = 0;
  uint64_t v169 = 1904;
  while (1)
  {
    unint64_t v170 = v168;
    uint64_t v291 = v169;
    if (v168 < v160) {
      break;
    }
    unsigned int v174 = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 164) += v295;
    unsigned int v175 = v174 >> (28 - v294);
    HEVC_RBSP::flush_bits(a1, v295);
    *(unsigned int *)((char *)a2 + v169) = v175;
    unint64_t v176 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    unint64_t v177 = v176 >> 63;
    HEVC_RBSP::flush_bits(a1, 1);
    int v178 = v177;
LABEL_189:
    *((unsigned char *)a2 + v170 + 1968) = v178;
    if (a8)
    {
      int v180 = *(unsigned int *)((char *)a2 + v291);
      int v181 = *(_DWORD *)(a8 + v291);
      if (v180 != v181)
      {
        BOOL v282 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v282) {
          return result;
        }
        *(_DWORD *)buf = 136316674;
        v305 = "parseSliceHeader";
        __int16 v306 = 1024;
        int v307 = 3797;
        __int16 v308 = 2080;
        v309 = "PocLsbLt[i]";
        __int16 v310 = 2080;
        *(void *)v311 = "slice";
        *(_WORD *)&v311[8] = 1024;
        *(_DWORD *)v312 = v180;
        *(_WORD *)&v312[4] = 2080;
        v313 = "prev_slice";
        __int16 v314 = 1024;
        int v315 = v181;
        unint64_t v32 = &_os_log_internal;
        unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
        goto LABEL_30;
      }
      int v182 = *(unsigned __int8 *)(a8 + v170 + 1968);
      if (v178 != v182)
      {
        int v283 = v178;
        BOOL v284 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v284) {
          return result;
        }
        *(_DWORD *)buf = 136316674;
        v305 = "parseSliceHeader";
        __int16 v306 = 1024;
        int v307 = 3798;
        __int16 v308 = 2080;
        v309 = "UsedByCurrPicLt[i]";
        __int16 v310 = 2080;
        *(void *)v311 = "slice";
        *(_WORD *)&v311[8] = 1024;
        *(_DWORD *)v312 = v283;
        *(_WORD *)&v312[4] = 2080;
        v313 = "prev_slice";
        __int16 v314 = 1024;
        int v315 = v182;
        unint64_t v32 = &_os_log_internal;
        unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
        goto LABEL_30;
      }
    }
    uint64_t v183 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    HEVC_RBSP::flush_bits(a1, 1);
    *((unsigned char *)a2 + v170 + 576) = v183 < 0;
    if (a8)
    {
      int v184 = *(unsigned __int8 *)(a8 + v170 + 576);
      if (v184 != (unint64_t)v183 >> 63)
      {
        BOOL v285 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v285) {
          return result;
        }
        *(_DWORD *)buf = 136316674;
        v305 = "parseSliceHeader";
        __int16 v306 = 1024;
        int v307 = 3801;
        __int16 v308 = 2080;
        v309 = "delta_poc_msb_present_flag[i]";
        __int16 v310 = 2080;
        *(void *)v311 = "slice";
        *(_WORD *)&v311[8] = 1024;
        *(_DWORD *)v312 = (unint64_t)v183 >> 63;
        *(_WORD *)&v312[4] = 2080;
        v313 = "prev_slice";
        __int16 v314 = 1024;
        int v315 = v184;
        unint64_t v32 = &_os_log_internal;
        unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
        goto LABEL_30;
      }
    }
    if (v183 < 0) {
      unsigned int v185 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
    }
    else {
      unsigned int v185 = 0;
    }
    int v133 = v298;
    if (v170 && v170 != a2[126]) {
      v185 += *(unsigned int *)((char *)a2 + v291 + 76);
    }
    *(unsigned int *)((char *)a2 + v291 + 80) = v185;
    if (a8)
    {
      int v186 = *(_DWORD *)(a8 + v291 + 80);
      if (v185 != v186)
      {
        unsigned int v286 = v185;
        BOOL v287 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v287) {
          return result;
        }
        *(_DWORD *)buf = 136316674;
        v305 = "parseSliceHeader";
        __int16 v306 = 1024;
        int v307 = 3813;
        __int16 v308 = 2080;
        v309 = "DeltaPocMsbCycleLt[i]";
        __int16 v310 = 2080;
        *(void *)v311 = "slice";
        *(_WORD *)&v311[8] = 1024;
        *(_DWORD *)v312 = v286;
        *(_WORD *)&v312[4] = 2080;
        v313 = "prev_slice";
        __int16 v314 = 1024;
        int v315 = v186;
        unint64_t v32 = &_os_log_internal;
        unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
        goto LABEL_30;
      }
    }
    unint64_t v187 = v170 + 1;
    unsigned int v160 = a2[126];
    uint64_t v169 = v291 + 4;
    BOOL v107 = v187 >= a2[127] + v160;
    unint64_t v168 = v187;
    uint64_t v131 = a4;
    if (v107) {
      goto LABEL_204;
    }
  }
  if (*v290 <= 1)
  {
    unsigned int v172 = a2[v168 + 128];
LABEL_188:
    uint64_t v179 = a4 + 23176 * v298;
    *(unsigned int *)((char *)a2 + v291) = *(_DWORD *)(v179 + 4 * v172 + 22124);
    int v178 = *(unsigned __int8 *)(v179 + v172 + 22252);
    goto LABEL_189;
  }
  unsigned int v171 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 164) += v289;
  unsigned int v172 = v171 >> (32 - v289);
  HEVC_RBSP::flush_bits(a1, v289);
  a2[v170 + 128] = v172;
  if (!a8) {
    goto LABEL_188;
  }
  int v173 = *(_DWORD *)(a8 + 4 * v170 + 512);
  if (v172 == v173) {
    goto LABEL_188;
  }
  BOOL v288 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (!v288) {
    return result;
  }
  *(_DWORD *)buf = 136316674;
  v305 = "parseSliceHeader";
  __int16 v306 = 1024;
  int v307 = 3786;
  __int16 v308 = 2080;
  v309 = "lt_idx_sps[i]";
  __int16 v310 = 2080;
  *(void *)v311 = "slice";
  *(_WORD *)&v311[8] = 1024;
  *(_DWORD *)v312 = v172;
  *(_WORD *)&v312[4] = 2080;
  v313 = "prev_slice";
  __int16 v314 = 1024;
  int v315 = v173;
  unint64_t v32 = &_os_log_internal;
  unint64_t v33 = "AppleAVD: ERROR: %s() Line %d: %s mismatch b/w %s %d and %s %d";
LABEL_30:
  uint32_t v34 = 60;
LABEL_49:
  _os_log_impl(&dword_223977000, v32, OS_LOG_TYPE_DEFAULT, v33, buf, v34);
  return 0;
}

uint64_t HEVC_RBSP::flush_bits(uint64_t this, int a2)
{
  uint64_t v2 = this;
  signed int v3 = *(_DWORD *)(this + 112);
  int v4 = a2 - v3;
  if (a2 <= v3)
  {
    *(void *)(this + 104) <<= a2;
    *(void *)(this + 152) <<= a2;
  }
  else
  {
    *(void *)uint64_t v15 = 0;
    unint64_t v5 = *(void *)(this + 104);
    unint64_t v6 = *(void *)(this + 152);
    uint64_t v7 = v5 << v3;
    uint64_t v8 = v6 << v3;
    unint64_t v9 = v5 >> -(char)v3;
    unint64_t v10 = v6 >> -(char)v3;
    if (v3 < 0) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = v7;
    }
    if (v3 < 0) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = v8;
    }
    unsigned int v14 = 0;
    this = HEVC_RBSP::get_next_uint32((HEVC_RBSP *)this, *(unsigned __int8 **)(this + 120), v15, &v14, &v15[1]);
    *(void *)(v2 + 120) += v15[0];
    signed int v3 = 8 * v14;
    uint64_t v13 = (v12 | v15[1]) << v4;
    *(void *)(v2 + 104) = (v11 | this) << v4;
    *(void *)(v2 + 152) = v13;
    a2 = v4;
  }
  *(_DWORD *)(v2 + 112) = v3 - a2;
  return this;
}

uint64_t HEVC_RBSP::get_next_uint32(HEVC_RBSP *this, unsigned __int8 *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 16) - (void)a2;
  *a5 = 0;
  if (v5 <= 0)
  {
    *a4 = 0;
    *a3 = 0;
    *((_WORD *)this + 72) = -1;
    return 0xFFFFFFFFLL;
  }
  if (v5 == 1)
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 255;
    int v9 = 255;
    int v10 = 255;
LABEL_9:
    int v12 = 255;
LABEL_10:
    int v13 = 255;
    goto LABEL_11;
  }
  int v10 = a2[1];
  if ((unint64_t)v5 < 3)
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 255;
    int v9 = 255;
    goto LABEL_9;
  }
  int v9 = a2[2];
  if (v5 == 3)
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 255;
    goto LABEL_9;
  }
  int v12 = a2[3];
  if ((unint64_t)v5 < 5)
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 255;
    goto LABEL_10;
  }
  int v8 = a2[4];
  if (v5 == 5)
  {
    int v6 = 0;
    int v13 = 255;
  }
  else
  {
    int v13 = a2[5];
    int v6 = 1;
  }
  int v7 = 1;
LABEL_11:
  int v14 = *a2;
  if (!*((_WORD *)this + 72) && v14 == 3 && !v9 && !v12 && v8 == 3)
  {
    int v8 = 0;
    unsigned int v21 = -16776961;
    goto LABEL_63;
  }
  if (*((unsigned __int8 *)this + 145) | v14) {
    BOOL v15 = 0;
  }
  else {
    BOOL v15 = v10 == 3;
  }
  int v16 = v15;
  if (v16 == 1 && v9 == 0 && v12 == 0 && v8 == 3)
  {
    int v10 = 0;
    int v8 = 0;
    unsigned int v21 = 16711935;
LABEL_63:
    *a5 = v21;
    unsigned int v27 = v5 - 2;
    if (v6) {
      unsigned int v27 = 4;
    }
    *a4 = v27;
    unsigned int v28 = v27 + 2;
    *a3 = v28;
    if ((unint64_t)(v5 - 1) >= 3)
    {
      if (v5 == 4)
      {
        int v9 = 0;
        *((unsigned char *)this + 144) = a2[2];
        unsigned __int8 v29 = a2[3];
      }
      else
      {
        int v9 = 0;
        if (v5 == 5)
        {
          *((unsigned char *)this + 144) = a2[3];
          unsigned __int8 v29 = a2[4];
        }
        else
        {
          *((unsigned char *)this + 144) = a2[4];
          unsigned __int8 v29 = a2[5];
        }
      }
    }
    else
    {
      int v9 = 0;
      unsigned __int8 v29 = -1;
      *((unsigned char *)this + 144) = -1;
    }
    int v12 = v8;
    goto LABEL_88;
  }
  if (!*((unsigned char *)this + 144))
  {
    if (*((unsigned char *)this + 145)) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v14 == 3;
    }
    int v23 = v22;
    if (v23 == 1 && v10 == 0 && v9 == 0 && v12 == 3)
    {
      int v10 = 0;
      unsigned int v21 = -16711936;
      goto LABEL_63;
    }
    if (v23)
    {
      unsigned int v20 = -16777216;
      goto LABEL_77;
    }
  }
  if (v16)
  {
    int v10 = 0;
    unsigned int v20 = 16711680;
LABEL_77:
    *a5 = v20;
    if (v7) {
      unsigned int v30 = 4;
    }
    else {
      unsigned int v30 = v5 - 1;
    }
    *a4 = v30;
    unsigned int v28 = v30 + 1;
    *a3 = v28;
    switch(v5)
    {
      case 1:
        unsigned __int8 v29 = -1;
        *((unsigned char *)this + 144) = -1;
        break;
      case 2:
        *((unsigned char *)this + 144) = *a2;
        unsigned __int8 v29 = a2[1];
        break;
      case 3:
        *((unsigned char *)this + 144) = a2[1];
        unsigned __int8 v29 = a2[2];
        break;
      case 4:
        *((unsigned char *)this + 144) = a2[2];
        unsigned __int8 v29 = a2[3];
        break;
      default:
        *((unsigned char *)this + 144) = a2[3];
        unsigned __int8 v29 = a2[4];
        break;
    }
    int v13 = v8;
    goto LABEL_88;
  }
  if (!*a2 && !v10 && v9 == 3)
  {
    int v10 = 0;
    int v9 = 0;
    unsigned int v20 = 65280;
    goto LABEL_77;
  }
  if (!v10 && !v9 && v12 == 3)
  {
    int v9 = 0;
    int v12 = 0;
    unsigned int v20 = 255;
    int v10 = *a2;
    goto LABEL_77;
  }
  if (v5 >= 4) {
    unsigned int v28 = 4;
  }
  else {
    unsigned int v28 = v5;
  }
  *a4 = v28;
  *a3 = v28;
  switch(v5)
  {
    case 3:
      *((unsigned char *)this + 144) = a2[1];
      unsigned __int8 v29 = a2[2];
      break;
    case 2:
      *((unsigned char *)this + 144) = *a2;
      unsigned __int8 v29 = a2[1];
      break;
    case 1:
      *((unsigned char *)this + 144) = -1;
      unsigned __int8 v29 = *a2;
      break;
    default:
      *((unsigned char *)this + 144) = a2[2];
      unsigned __int8 v29 = a2[3];
      break;
  }
  int v13 = v12;
  int v12 = v9;
  int v9 = v10;
  int v10 = v14;
LABEL_88:
  *((unsigned char *)this + 145) = v29;
  if (v5 < (unint64_t)v28 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v31 = 136315394;
    unint64_t v32 = "get_next_uint32";
    __int16 v33 = 1024;
    int v34 = 463;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v31, 0x12u);
  }
  return v13 | (((v9 << 8) | (v10 << 16) | v12) << 8);
}

uint64_t HEVC_RBSP::ue_v(HEVC_RBSP *this)
{
  unint64_t v2 = *((void *)this + 13);
  if ((v2 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    return 0;
  }
  else
  {
    unint64_t v3 = HIDWORD(v2);
    int v4 = -32;
    do
    {
      LODWORD(v3) = 2 * v3;
      int v5 = v4 + 1;
      if ((v3 & 0x80000000) != 0) {
        break;
      }
      unsigned int v6 = v4 + 32;
      ++v4;
    }
    while (v6 < 0x1E);
    *((_DWORD *)this + 41) += v5 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v5 + 33);
    unsigned int v7 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v5 + 32;
    unsigned int v8 = v7 >> -(char)v5;
    HEVC_RBSP::flush_bits((uint64_t)this, v5 + 32);
    return v8 + ~(-2 << (v5 + 31));
  }
}

uint64_t HEVC_RBSP::se_v(HEVC_RBSP *this)
{
  unint64_t v2 = *((void *)this + 13);
  if ((v2 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned int v9 = 0;
  }
  else
  {
    unint64_t v3 = HIDWORD(v2);
    int v4 = -32;
    do
    {
      LODWORD(v3) = 2 * v3;
      int v5 = v4 + 1;
      if ((v3 & 0x80000000) != 0) {
        break;
      }
      unsigned int v6 = v4 + 32;
      ++v4;
    }
    while (v6 < 0x1E);
    *((_DWORD *)this + 41) += v5 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v5 + 33);
    unsigned int v7 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v5 + 32;
    unsigned int v8 = v7 >> -(char)v5;
    HEVC_RBSP::flush_bits((uint64_t)this, v5 + 32);
    unsigned int v9 = v8 + ~(-2 << (v5 + 31));
  }
  return (-((v9 & 1) == 0) ^ ((v9 + 1) >> 1)) + ((v9 & 1) == 0);
}

uint64_t HEVC_RBSP::byte_alignment(HEVC_RBSP *this)
{
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  int v2 = *((_DWORD *)this + 28) & 7;

  return HEVC_RBSP::flush_bits((uint64_t)this, v2);
}

uint64_t HEVC_RBSP::calcNumPocTotalCurr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6 = *(unsigned int *)(a3 + 4);
  if (v6)
  {
    LODWORD(v7) = 0;
    unsigned int v8 = (unsigned __int8 *)(a3 + 16);
    do
    {
      if (*v8++) {
        uint64_t v7 = (v7 + 1);
      }
      else {
        uint64_t v7 = v7;
      }
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v10 = *(unsigned int *)(a3 + 8);
  if (v10)
  {
    unint64_t v11 = (unsigned __int8 *)(a3 + 32);
    do
    {
      if (*v11++) {
        uint64_t v7 = (v7 + 1);
      }
      else {
        uint64_t v7 = v7;
      }
      --v10;
    }
    while (v10);
  }
  uint64_t v13 = (*(_DWORD *)(a4 + 508) + *(_DWORD *)(a4 + 504));
  if (v13)
  {
    int v14 = (unsigned __int8 *)(a4 + 1968);
    do
    {
      if (*v14++) {
        uint64_t v7 = (v7 + 1);
      }
      else {
        uint64_t v7 = v7;
      }
      --v13;
    }
    while (v13);
  }
  if (a6) {
    return HEVC_RBSP::calcNumActiveRefLayerPics(a1, a2, *(_DWORD *)(a5 + 8), *(_DWORD *)(a5 + 16), a4)
  }
         + v7;
  return v7;
}

uint64_t AppleAVDWrapperHEVCDecoderCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  pthread_once(&sCreateSupportedPropertyDictionaryOnce_0, hevc_createSupportedPropertyDictionary);
  if (a2 && sHEVCVideoDecoderSupportedPropertyDictionary)
  {
    CFTypeRef v3 = CFRetain((CFTypeRef)sHEVCVideoDecoderSupportedPropertyDictionary);
    uint64_t result = 0;
    *a2 = v3;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder Error:: CFDictionaryCreate - HEVCVideoDecoder_CopySupportedPropertyDictionary- failed.\n", v5, 2u);
    }
    return 4294954392;
  }
  return result;
}

void CAVDHevcDecoder::~CAVDHevcDecoder(CAVDHevcDecoder *this)
{
  *(void *)this = &unk_26D73FAD0;
  pthread_mutex_destroy((pthread_mutex_t *)this + 42);
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 2752));
  for (uint64_t i = 24; i != 1056; i += 8)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    if (v3)
    {
      CAVDDecoder::unmapAVDMemory((uint64_t)this, *((mach_port_t ***)this + 293), (_OWORD *)(v3 + 8), 1);
      free((void *)v3);
    }
    *(void *)((char *)this + i) = 0;
  }
  do
  {
    uint64_t v4 = *(void *)((char *)this + i);
    if (v4)
    {
      CAVDDecoder::unmapAVDMemory((uint64_t)this, *((mach_port_t ***)this + 293), (_OWORD *)(v4 + 8), *(unsigned char *)(v4 + 169));
      free((void *)v4);
    }
    *(void *)((char *)this + i) = 0;
    i += 8;
  }
  while (i != 2088);
  HEVCReleaseVPS((uint64_t)this + 3824);
  if (*((void *)this + 1035))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 16;
    do
    {
      HEVCReleaseSPS(*((void *)this + 1035) + v5);
      v5 += 23176;
      --v6;
    }
    while (v6);
  }
  if (*((void *)this + 1036))
  {
    for (uint64_t j = 0; j != 630784; j += 9856)
      HEVCReleasePPS(*((void *)this + 1036) + j);
  }
  if (*((void *)this + 1037))
  {
    uint64_t v8 = 24;
    uint64_t v9 = 600;
    do
    {
      HevcReleaseSliceHeader(*((void *)this + 1037) + v8);
      v8 += 2360;
      --v9;
    }
    while (v9);
  }
  uint64_t v10 = *((void *)this + 389);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    *((void *)this + 389) = 0;
  }
  free(*((void **)this + 1035));
  *((void *)this + 1035) = 0;
  free(*((void **)this + 1036));
  *((void *)this + 1036) = 0;
  free(*((void **)this + 1037));
  *((void *)this + 1037) = 0;
  free(*((void **)this + 1038));
  *((void *)this + 1038) = 0;
  free(*((void **)this + 1039));
  *((void *)this + 1039) = 0;
  free(*((void **)this + 1130));
  *((void *)this + 1130) = 0;
  free(*((void **)this + 1131));
  *((void *)this + 1131) = 0;
  free(*((void **)this + 1135));
  *((void *)this + 1135) = 0;
  free(*((void **)this + 1136));
  *((void *)this + 1136) = 0;
  free(*((void **)this + 1055));
  *((void *)this + 1055) = 0;
  uint64_t v11 = *((void *)this + 262);
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 136))(v11);
    (*(void (**)(void, void))(**((void **)this + 262) + 152))(*((void *)this + 262), 0);
    uint64_t v12 = *((void *)this + 262);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    *((void *)this + 262) = 0;
  }
  (*(void (**)(CAVDHevcDecoder *, void))(*(void *)this + 280))(this, *((unsigned int *)this + 2308));
  *((_DWORD *)this + 2308) = 0;

  CAVDDecoder::~CAVDDecoder(this);
}

{
  uint64_t vars8;

  CAVDHevcDecoder::~CAVDHevcDecoder(this);

  JUMPOUT(0x223CBAD30);
}

void HevcReleaseSliceHeader(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1872))
  {
    free(*(void **)(a1 + 1880));
    *(void *)(a1 + 1880) = 0;
  }
}

uint64_t AppleAVDWrapperHEVCDecoderDecodeTile(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, int *a9)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDWrapperHEVCDecoderDecodeTile - ERROR! storage is NULL\n", buf, 2u);
    }
    return 311;
  }
  uint64_t v15 = DerivedStorage;
  int v16 = (pthread_mutex_t *)(DerivedStorage + 5648);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 5648));
  int v17 = *(_DWORD *)(v15 + 5204);
  if (v17 != 2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      unint64_t v51 = "AppleAVDWrapperHEVCDecoderDecodeTile";
      __int16 v52 = 1024;
      int v53 = v17;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s called on plugin in state %d", buf, 0x12u);
    }
    pthread_mutex_unlock(v16);
    return 311;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a3);
  unint64_t v19 = DataBuffer;
  if (!DataBuffer) {
    goto LABEL_62;
  }
  int DataLength = CMBlockBufferGetDataLength(DataBuffer);
  if (CMBlockBufferGetDataLength(v19) != DataLength && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    unint64_t v51 = "AppleAVDWrapperHEVCDecoderDecodeTile";
    __int16 v52 = 1024;
    int v53 = 5055;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  unsigned int v21 = CMBlockBufferGetDataLength(v19);
  unsigned int v22 = v21;
  if (!v21)
  {
LABEL_62:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v51 = (const char *)v19;
      __int16 v52 = 1024;
      int v53 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR:  either tile dataBuffer=%p is invalid or dataLength=%u is invalid!", buf, 0x12u);
    }
    int v24 = -12909;
    MEMORY[0x223CBAC70](*(void *)(v15 + 8), a2, 4294954387, 2, 0);
    goto LABEL_21;
  }
  destination[1] = (void *)v21;
  uint64_t v40 = 0;
  destination[0] = 0;
  LODWORD(v40) = *(_DWORD *)(v15 + 5208);
  int v23 = AppleAVDGetParameter(*(void *)(v15 + 5184), 8, (uint64_t)destination);
  if (v23)
  {
    int v24 = v23;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCTileDecoder ERROR: Could not get bitstream buffer", buf, 2u);
    }
    MEMORY[0x223CBAC70](*(void *)(v15 + 8), a2, 4294954385, 2, 0);
LABEL_21:
    if (a9) {
      *a9 = 2;
    }
    goto LABEL_23;
  }
  unsigned int v26 = (unsigned __int8 *)destination[0];
  if (CMBlockBufferCopyDataBytes(v19, 0, v22, destination[0]))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING, fail to copy data bytes, nothing to decode", buf, 2u);
    }
    MEMORY[0x223CBAC70](*(void *)(v15 + 8), a2, 0, 2, 0);
    AppleAVDReleaseCurrentInputBuffer(*(void *)(v15 + 5184), v22, v26);
    if (a9) {
      *a9 = 2;
    }
    int v24 = -12911;
    goto LABEL_23;
  }
  bzero(v42, 0x878uLL);
  v41[0] = v26;
  v41[1] = v22;
  int v27 = *(_DWORD *)(v15 + 5208);
  v42[0] = v27;
  if (*(_DWORD *)(v15 + 8016))
  {
    if ((a8 & 4) != 0) {
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  if (!*(_DWORD *)(v15 + 8012))
  {
LABEL_38:
    int v28 = 1;
    goto LABEL_39;
  }
  int v28 = 2;
LABEL_39:
  v42[1] = v28;
LABEL_40:
  uint64_t v45 = 0;
  int v44 = 0;
  uint64_t v46 = 0x100000000;
  char v48 = 1;
  uint64_t v47 = a7;
  uint64_t v49 = a6;
  if (a8)
  {
    char v43 = 0;
    unsigned __int8 v29 = a9;
    int v30 = *a9 | 1;
    *a9 = v30;
    LOBYTE(v27) = *(unsigned char *)(v15 + 5208);
  }
  else
  {
    char v43 = 1;
    unsigned __int8 v29 = a9;
    int v30 = *a9;
  }
  *(void *)(v15 + 8 * v27 + 2112) = a2;
  *(_DWORD *)(v15 + 4 * v27 + 4160) = v30;
  int v31 = *(FILE **)(v15 + 8032);
  if (v31)
  {
    if (WriteNAL(v31, (uint64_t)v26, v22))
    {
      unint64_t v32 = *(FILE **)(v15 + 8040);
      if (v32) {
        fprintf(v32, "Error writing decEncryptedOutput for frame %d \n", *(_DWORD *)(v15 + 5208));
      }
    }
  }
  __int16 v33 = *(FILE **)(v15 + 8048);
  if (v33) {
    fwrite(v26, 1uLL, v22, v33);
  }
  uint64_t v34 = AppleAVDDecodeFrame(*(void *)(v15 + 5184), (uint64_t)v41);
  if (!v34)
  {
    uint64_t v36 = *(FILE **)(v15 + 8024);
    if (v36)
    {
      if (WriteNAL(v36, (uint64_t)v26, v22))
      {
        unint64_t v37 = *(FILE **)(v15 + 8040);
        if (v37) {
          fprintf(v37, "Error writing decOutput for frame %d \n", *(_DWORD *)(v15 + 5208));
        }
      }
    }
    unint64_t v38 = *(FILE **)(v15 + 8056);
    if (v38) {
      fwrite(v26, 1uLL, v22, v38);
    }
    ++*(_DWORD *)(v15 + 5208);
    goto LABEL_25;
  }
  MEMORY[0x223CBAC70](*(void *)(v15 + 8), a2, v34, 2, 0);
  AppleAVDReleaseCurrentInputBuffer(*(void *)(v15 + 5184), v22, v26);
  int *v29 = 2;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v35 = *(_DWORD *)(v15 + 5208);
    *(_DWORD *)buf = 67109120;
    LODWORD(v51) = v35;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCTileDecoder_DecodeFrame ERROR: framenum %d kVTVideoDecoderMalfunctionErr", buf, 8u);
  }
  int v24 = -12911;
LABEL_23:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    unint64_t v51 = "AppleAVDWrapperHEVCDecoderDecodeTile";
    __int16 v52 = 1024;
    int v53 = v24;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
LABEL_25:
  pthread_mutex_unlock(v16);
  return 0;
}

uint64_t AppleAVDGetParameter(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = 3758097095;
  if (a2 > 27)
  {
    if (a2 > 61)
    {
      if (a2 == 62)
      {
        uint64_t v3 = 0;
        *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 3916);
        int v4 = *(_DWORD *)(a1 + 3912);
      }
      else
      {
        if (a2 != 69) {
          return v3;
        }
        uint64_t v3 = 0;
        int v4 = *(_DWORD *)(a1 + 1400);
      }
    }
    else if (a2 == 28)
    {
      uint64_t v3 = 0;
      int v4 = *(_DWORD *)(a1 + 3600);
    }
    else
    {
      if (a2 != 51) {
        return v3;
      }
      uint64_t v3 = 0;
      int v4 = 1;
      *(unsigned char *)(a1 + 1493) = 1;
    }
LABEL_18:
    *(_DWORD *)a3 = v4;
    return v3;
  }
  switch(a2)
  {
    case 6:
      uint64_t v3 = 0;
      int v4 = *(_DWORD *)(a1 + 196);
      goto LABEL_18;
    case 8:
      uint64_t v3 = RingBuffer::requestRingBuffer(*(RingBuffer **)(a1 + 888), *(void *)(a3 + 8) + 16, (unsigned __int8 **)a3);
      if (v3 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 136315394;
        uint64_t v12 = "AppleAVDGetParameter";
        __int16 v13 = 1024;
        int v14 = v3;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Request ring buffer error (%d)!\n", (uint8_t *)&v11, 0x12u);
      }
      break;
    case 9:
      uint64_t v3 = 0;
      int v4 = *(_DWORD *)(a1 + 776);
      goto LABEL_18;
    case 13:
      uint64_t v3 = 0;
      long long v5 = *(_OWORD *)(a1 + 904);
      long long v6 = *(_OWORD *)(a1 + 936);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(a1 + 920);
      *(_OWORD *)(a3 + 32) = v6;
      *(_OWORD *)a3 = v5;
      long long v7 = *(_OWORD *)(a1 + 952);
      long long v8 = *(_OWORD *)(a1 + 968);
      long long v9 = *(_OWORD *)(a1 + 984);
      *(void *)(a3 + 96) = *(void *)(a1 + 1000);
      *(_OWORD *)(a3 + 64) = v8;
      *(_OWORD *)(a3 + 80) = v9;
      *(_OWORD *)(a3 + 48) = v7;
      break;
    default:
      return v3;
  }
  return v3;
}

uint64_t RingBuffer::requestRingBuffer(RingBuffer *this, int64_t a2, unsigned __int8 **a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 19);
  if (v4 - 1 < (unint64_t)a2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      int v28 = "RINGBUFFER";
      __int16 v29 = 2080;
      unint64_t v30 = (unint64_t)"requestRingBuffer";
      __int16 v31 = 2048;
      *(void *)unint64_t v32 = v4;
      *(_WORD *)&v32[8] = 2048;
      *(void *)&v32[10] = a2;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s :%s(): bbuf size %zu < request frame size %zu !!!\n\n", buf, 0x2Au);
    }
    return 4294967168;
  }
  kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)this);
  if (*((unsigned __int8 *)this + 161) >= *((unsigned __int8 *)this + 162))
  {
    unint64_t v14 = 0;
    while (1)
    {
      timespec v26 = (timespec)xmmword_223ADC3C0;
      int v15 = pthread_cond_timedwait_relative_np((pthread_cond_t *)((char *)this + 64), (pthread_mutex_t *)this, &v26);
      if (v15)
      {
        int v16 = v15;
        if (v15 != 60)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            int v28 = "requestRingBuffer";
            __int16 v29 = 1024;
            LODWORD(v30) = v16;
            unint64_t v18 = &_os_log_internal;
            unint64_t v19 = "AppleAVD: ERROR: %s(): pthread_cond_timedwait exited with error: %d";
            uint32_t v20 = 18;
LABEL_39:
            _os_log_impl(&dword_223977000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, v20);
          }
LABEL_40:
          pthread_mutex_unlock((pthread_mutex_t *)this);
          kdebug_trace();
          return 4294967168;
        }
        v14 += 100000000;
      }
      unsigned int v17 = *((unsigned __int8 *)this + 161);
      if (v17 < *((unsigned __int8 *)this + 162)) {
        break;
      }
      if (v14 > 0x2540BE3FFLL)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          int v28 = "requestRingBuffer";
          __int16 v29 = 2048;
          unint64_t v30 = v14 / 0xF4240;
          __int16 v31 = 1024;
          *(_DWORD *)unint64_t v32 = v17;
          *(_WORD *)&v32[4] = 2048;
          *(void *)&v32[6] = 10000000000;
          unint64_t v18 = &_os_log_internal;
          unint64_t v19 = "AppleAVD: WARNING: %s(): Timed out, waited at least %llums! m_num_buffers_outstanding=%u WAIT_TIMEOUT_NS=%llu";
          uint32_t v20 = 38;
          goto LABEL_39;
        }
        goto LABEL_40;
      }
    }
  }
  for (int i = 0; ; ++i)
  {
    long long v9 = (unsigned __int8 *)*((void *)this + 16);
    long long v8 = (unsigned __int8 *)*((void *)this + 17);
    if (v9 == v8) {
      break;
    }
    if (v9 <= v8) {
      goto LABEL_11;
    }
    if ((uint64_t)&v9[~(unint64_t)v8] >= a2)
    {
      *a3 = v8;
      *((void *)this + 17) += a2;
      goto LABEL_36;
    }
LABEL_19:
    *a3 = 0;
    if (i >= 9) {
      goto LABEL_40;
    }
    pthread_cond_wait((pthread_cond_t *)((char *)this + 64), (pthread_mutex_t *)this);
  }
  long long v9 = (unsigned __int8 *)*((void *)this + 14);
  *((void *)this + 16) = v9;
  *((void *)this + 17) = v9;
  long long v8 = v9;
LABEL_11:
  uint64_t v10 = (unsigned __int8 *)*((void *)this + 14);
  if (v9 == v10)
  {
    int64_t v11 = 0;
    int64_t v12 = *((void *)this + 15) + ~(unint64_t)v8;
  }
  else
  {
    int64_t v11 = (int64_t)&v9[~(unint64_t)v10];
    int64_t v12 = *((void *)this + 15) - (void)v8;
  }
  if (v11 < a2 && v12 < a2) {
    goto LABEL_19;
  }
  if (v12 >= a2)
  {
    *a3 = v8;
    int64_t v23 = *((void *)this + 17) + a2;
    *((void *)this + 17) = v23;
    if (v23 == *((void *)this + 15))
    {
      uint64_t v24 = *((void *)this + 14);
      *((void *)this + 17) = v24;
      *((void *)this + 18) = v23;
      if (*((void *)this + 16) == v23) {
        *((void *)this + 16) = v24;
      }
    }
  }
  else
  {
    *((void *)this + 17) = v10;
    *((void *)this + 18) = v8;
    *a3 = v10;
    uint64_t v21 = *((void *)this + 16);
    *((void *)this + 17) += a2;
    if (v21 == *((void *)this + 18))
    {
      uint64_t v22 = *((void *)this + 15);
      *((void *)this + 16) = *((void *)this + 14);
      *((void *)this + 18) = v22;
    }
  }
LABEL_36:
  ++*((unsigned char *)this + 161);
  pthread_mutex_unlock((pthread_mutex_t *)this);
  kdebug_trace();
  return 0;
}

uint64_t AppleAVDDecodeFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  if (HIDWORD(v5) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)BOOL v59 = "AppleAVDDecodeFrame";
    *(_WORD *)&v59[8] = 1024;
    int v60 = 2665;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    unint64_t v5 = *(unsigned int *)(a2 + 8);
  }
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  unsigned int v53 = -1;
  unsigned int v54 = -1;
  unsigned int v52 = -1;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 784));
  *(_DWORD *)(a1 + 224) = v6;
  *(_DWORD *)(a1 + 1308) = v5;
  int v7 = *(unsigned __int8 *)(a2 + 24);
  *(unsigned char *)(a1 + 1456) = v7;
  *(_DWORD *)(a1 + 3620) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 3624) = *(_DWORD *)(a2 + 2108);
  *(_DWORD *)(a1 + 3880) = *(_DWORD *)(a2 + 2168);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 2136);
  *(_DWORD *)(a1 + 3792) = *(_DWORD *)(a2 + 2140);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 2144);
  *(void *)(a1 + 3592) = 0;
  uint64_t v51 = 0;
  *(void *)(a1 + 1312) = v4;
  if (*(_DWORD *)(a1 + 3664))
  {
    if (!v7)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)BOOL v59 = "AppleAVDDecodeFrame";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() - Sync Decode not enabled for FT chroma deblocking filter\n", buf, 0xCu);
      }
      *(unsigned char *)(a1 + 1456) = 1;
    }
  }
  else if (*(_DWORD *)(a1 + 1284))
  {
    if (v6 >= 2
      && !v7
      && (*(_DWORD *)(a1 + 1028) != *(_DWORD *)(a1 + 1020) || *(_DWORD *)(a1 + 1032) != *(_DWORD *)(a1 + 1024)))
    {
      long long v8 = *(RingBuffer **)(a1 + 888);
      if (v8) {
        RingBuffer::waitForRingBuffersOutstanding(v8, 1u, 10000);
      }
    }
    *(_DWORD *)(a1 + 1028) = *(_DWORD *)(a1 + 1020);
    *(_DWORD *)(a1 + 1032) = *(_DWORD *)(a1 + 1024);
  }
  *(void *)(a1 + 1520) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 1528) = *(_OWORD *)(a2 + 40);
  unsigned int v9 = *(_DWORD *)(a1 + 1496);
  if ((v9 & 0xFFFFFFFE) == 4 || *(unsigned char *)(a1 + 1493) && v9 <= 3 && v9 != 1)
  {
    bzero((void *)(a1 + 1544), 0x800uLL);
    uint64_t v10 = *(unsigned int *)(a2 + 2104);
    *(_DWORD *)(a1 + 3592) = v10;
    memcpy((void *)(a1 + 1544), (const void *)(a2 + 56), 4 * v10);
    memcpy((void *)(a1 + 2568), (const void *)(a2 + 1080), 4 * *(unsigned int *)(a1 + 3592));
  }
  else
  {
    *(_DWORD *)(a1 + 3592) = 0;
  }
  int v11 = *(unsigned __int8 *)(a2 + 2120);
  *(unsigned char *)(a1 + 3628) = v11;
  *(void *)(a1 + 3640) = *(void *)(a2 + 2128);
  if (*(_DWORD *)(a1 + 228) == 4)
  {
    int v12 = (*(uint64_t (**)(void, unint64_t, unint64_t, uint64_t))(**(void **)(*(void *)(a1 + 3848) + 8)
                                                                                         + 192))(*(void *)(*(void *)(a1 + 3848) + 8), v4, v5, v6);
    if (v12)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)BOOL v59 = v12;
        __int16 v13 = &_os_log_internal;
        unint64_t v14 = "AppleAVD: ERROR: bad header, got error %d parsing header\n";
LABEL_78:
        uint32_t v25 = 8;
LABEL_93:
        _os_log_impl(&dword_223977000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, v25);
        goto LABEL_94;
      }
      goto LABEL_94;
    }
    if (!*(unsigned char *)(a1 + 3844)
      || !(*(unsigned int (**)(void, uint64_t, int *))(**(void **)(*(void *)(a1 + 3848) + 8) + 88))(*(void *)(*(void *)(a1 + 3848) + 8), 56, &v55)|| !v57)
    {
      goto LABEL_43;
    }
    int v15 = v56;
    CFDictionaryRef v16 = *(const __CFDictionary **)(a1 + 3904);
    int v50 = v55;
    if (v16)
    {
      if (*(void *)(a1 + 32))
      {
        int v17 = 0;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_38;
        }
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)BOOL v59 = 82;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %u: WARNING! resizing CVPixelBufferPool is not supported", buf, 8u);
      }
      else
      {
        int v17 = AppleAVDChangeVTResolutionInternal(a1, (void *)(a1 + 32), v16, v55, v56);
        if (v17) {
          goto LABEL_38;
        }
        unint64_t v18 = *(pthread_mutex_t **)(a1 + 208);
        if (v18) {
          BufferPool::setCVPixelBufferPool(v18, *(__CVPixelBufferPool **)(a1 + 32));
        }
      }
    }
    int v17 = 0;
LABEL_38:
    CFDictionaryRef v19 = *(const __CFDictionary **)(a1 + 3896);
    if (v19)
    {
      if (!*(void *)(a1 + 40))
      {
        if (!AppleAVDChangeVTResolutionInternal(a1, (void *)(a1 + 40), v19, v50, v15))
        {
          unsigned int v41 = *(pthread_mutex_t **)(a1 + 200);
          if (v41) {
            BufferPool::setCVPixelBufferPool(v41, *(__CVPixelBufferPool **)(a1 + 40));
          }
          goto LABEL_43;
        }
LABEL_136:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)BOOL v59 = v55;
          *(_WORD *)&v59[4] = 1024;
          *(_DWORD *)&v59[6] = v56;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: failed to change video resolution to %ux%u\n", buf, 0xEu);
        }
        int v12 = 301;
        goto LABEL_94;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)BOOL v59 = 97;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %u: WARNING! resizing CVPixelBufferPool is not supported", buf, 8u);
      }
    }
    if (!v17)
    {
LABEL_43:
      int v11 = *(unsigned __int8 *)(a1 + 3628);
      goto LABEL_44;
    }
    goto LABEL_136;
  }
LABEL_44:
  if (!v11)
  {
    *(unsigned char *)(a1 + 880) = *(unsigned char *)(a2 + 2172);
    int v12 = AppleAVDGetPixelBufferFromBufferPool(a1, &v53, 0, *(void *)(a2 + 2152), *(void *)(a2 + 2160));
    if (v12)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_94;
      }
      *(_WORD *)buf = 0;
      __int16 v13 = &_os_log_internal;
      unint64_t v14 = "AppleAVD: AppleAVDDecodeFrame could not get reference buffer from buffer pool";
    }
    else
    {
      if (!*(unsigned char *)(a1 + 880))
      {
        int v12 = AppleAVDGetPixelBufferFromBufferPool(a1, &v54, 1, *(void *)(a2 + 2152), *(void *)(a2 + 2160));
        if (v12)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_94;
          }
          *(_WORD *)buf = 0;
          __int16 v13 = &_os_log_internal;
          unint64_t v14 = "AppleAVD: AppleAVDDecodeFrame could not get display buffer from buffer pool";
          goto LABEL_92;
        }
      }
      if (!*(_DWORD *)(a1 + 1284)) {
        goto LABEL_85;
      }
      int v12 = AppleAVDGetSecondPixelBufferFromBufferPoolAndLink(a1, v53, &v52, 0, *(void *)(a2 + 2152), *(void *)(a2 + 2160));
      if (!v12) {
        goto LABEL_85;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_94;
      }
      *(_WORD *)buf = 0;
      __int16 v13 = &_os_log_internal;
      unint64_t v14 = "AppleAVD: AppleAVDDecodeFrame could not get scaler buffer from buffer pool";
    }
LABEL_92:
    uint32_t v25 = 2;
    goto LABEL_93;
  }
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a1 + 3640));
  if (PixelFormatType <= 1278226487)
  {
    if (PixelFormatType > 875704949)
    {
      if (PixelFormatType == 875704950 || PixelFormatType == 875836518) {
        goto LABEL_64;
      }
      int v22 = 875836534;
    }
    else
    {
      if (PixelFormatType == 875704422 || PixelFormatType == 875704438) {
        goto LABEL_64;
      }
      int v22 = 875704934;
    }
    if (PixelFormatType != v22) {
      goto LABEL_111;
    }
LABEL_64:
    int v24 = *(_DWORD *)(a2 + 2112);
    goto LABEL_75;
  }
  if (PixelFormatType <= 1882469427)
  {
    if (PixelFormatType != 1278226488)
    {
      if (PixelFormatType != 1882468912)
      {
        int v23 = 1882468914;
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    goto LABEL_64;
  }
  if (PixelFormatType > 1885745713)
  {
    if (PixelFormatType != 1885745714)
    {
      unsigned __int16 v21 = 13364;
      goto LABEL_72;
    }
LABEL_74:
    int v24 = (2 * ((2863311531u * (unint64_t)*(unsigned int *)(a2 + 2112)) >> 32)) & 0xFFFFFFFC;
    goto LABEL_75;
  }
  if (PixelFormatType == 1882469428) {
    goto LABEL_74;
  }
  unsigned __int16 v21 = 12848;
LABEL_72:
  int v23 = v21 | 0x70660000;
LABEL_73:
  if (PixelFormatType == v23) {
    goto LABEL_74;
  }
LABEL_111:
  int v24 = 2 * *(_DWORD *)(a2 + 2112);
LABEL_75:
  *(_DWORD *)(a1 + 3632) = v24;
  if ((v24 & 0x3F) == 0)
  {
    *(_DWORD *)(a1 + 3636) = *(_DWORD *)(a2 + 2116);
    int v12 = AppleAVDPutTiledPixelBufferIntoBufferPool(a1, &v54, 1, 0, *(void *)(a2 + 2152), *(void *)(a2 + 2160));
    if (v12)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_94;
      }
      *(_WORD *)buf = 0;
      __int16 v13 = &_os_log_internal;
      unint64_t v14 = "AppleAVD: AppleAVDDecodeFrame could not put display buffer into the buffer pool";
      goto LABEL_92;
    }
    int v12 = AppleAVDPutTiledPixelBufferIntoBufferPool(a1, &v53, 0, 0, *(void *)(a2 + 2152), *(void *)(a2 + 2160));
    if (v12)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_94;
      }
      *(_WORD *)buf = 0;
      __int16 v13 = &_os_log_internal;
      unint64_t v14 = "AppleAVD: AppleAVDDecodeFrame could not put decode/reference buffer into the buffer pool";
      goto LABEL_92;
    }
LABEL_85:
    uint64_t v51 = 0;
    timespec v26 = &v53;
    if (!*(unsigned char *)(a1 + 880)) {
      timespec v26 = &v54;
    }
    BufferPool::getBufferInfo(*(void *)(a1 + 8 * (*(unsigned char *)(a1 + 880) == 0) + 200), *v26, &v51);
    if (v51) {
      buffer = *(__CVBuffer **)(v51 + 16);
    }
    else {
      buffer = 0;
    }
    if (*(unsigned char *)(a1 + 3756) && *(_DWORD *)(a1 + 3720))
    {
      uint64_t v49 = (unsigned int *)(a1 + 3744);
      *(_DWORD *)(a1 + 3744) = 0;
      int v29 = *(_DWORD *)(a1 + 228);
      if (v29 == 2) {
        operator new();
      }
      int v12 = 0;
      if (v29 != 1) {
        goto LABEL_94;
      }
      int v12 = 0;
      if (v5 > 0x1800000) {
        goto LABEL_94;
      }
      unsigned int v30 = *(_DWORD *)(a1 + 1468);
      if (v30 > v5) {
        goto LABEL_94;
      }
      if (v30 <= 4 && ((1 << v30) & 0x16) != 0)
      {
        unsigned int v31 = 0;
        do
        {
          unint64_t v32 = (unsigned int *)(v4 + v31);
          if (v30 == 2)
          {
            unsigned int v37 = *(unsigned __int16 *)v32;
            uint64_t v33 = (char *)v32 + 2;
            unsigned int v35 = __rev16(v37);
            unsigned int v36 = v35 + 2;
          }
          else if (v30 == 4)
          {
            unsigned int v34 = *v32;
            uint64_t v33 = v32 + 1;
            unsigned int v35 = bswap32(v34);
            unsigned int v36 = v35 + 4;
          }
          else
          {
            unsigned int v38 = *(unsigned __int8 *)v32;
            uint64_t v33 = (char *)v32 + 1;
            unsigned int v35 = v38;
            unsigned int v36 = v38 + 1;
          }
          v31 += v36;
          if (v31 > v5 || v35 > v5) {
            break;
          }
          if ((*v33 & 0x1F) == 6)
          {
            unsigned int v40 = RemoveEPB(v33 + 1, v35 - 1, *(unsigned __int8 **)(a1 + 3736));
            parseSEI(*(unsigned __int8 **)(a1 + 3736), v40, *(unsigned __int8 **)(a1 + 3728), v49);
          }
        }
        while (v31 + v30 <= v5);
      }
      CFIndex v42 = *v49;
      if (v42)
      {
        if (buffer)
        {
          uint64_t v43 = *(void *)(a1 + 3728);
          if (*(unsigned char *)v43 == 109
            && *(unsigned char *)(v43 + 1) == 101
            && *(unsigned char *)(v43 + 2) == 116
            && *(unsigned char *)(v43 + 3) == 97)
          {
            CFAllocatorRef v44 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            CFDataRef v45 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)(v43 + 4), v42, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
            if (v45)
            {
              CFPropertyListRef v46 = CFPropertyListCreateFromXMLData(v44, v45, 0, 0);
              if (v46)
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  int v47 = *(_DWORD *)(a1 + 224);
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)BOOL v59 = v47;
                  _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDDecodeFrame - frame # %d metadataDict attached\n", buf, 8u);
                }
                CVBufferSetAttachment(buffer, @"MetadataDictionary", v46, kCVAttachmentMode_ShouldPropagate);
                CFRelease(v46);
              }
              CFRelease(v45);
            }
          }
        }
        int v12 = 0;
        *uint64_t v49 = 0;
        goto LABEL_94;
      }
    }
    int v12 = 0;
    goto LABEL_94;
  }
  int v12 = -536870212;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)BOOL v59 = v24;
    __int16 v13 = &_os_log_internal;
    unint64_t v14 = "AppleAVD: ERROR: ERROR: tileX offset not a multiple of 64! tileOffsetX:%d";
    goto LABEL_78;
  }
LABEL_94:
  uint64_t v27 = AppleAVDDecodeFrameInternal(a1, v4, v5, v6, v54, v53, v52, v12);
  if (v27 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDDecodeFrameInternal failed\n", buf, 2u);
  }
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 3596);
  if (*(_DWORD *)(a1 + 3912) != 503 && *(unsigned char *)(a1 + 1456) && *(_DWORD *)(a1 + 1460) != *(_DWORD *)(a1 + 224))
  {
    do
      pthread_cond_wait((pthread_cond_t *)(a1 + 1408), (pthread_mutex_t *)(a1 + 784));
    while (*(_DWORD *)(a1 + 1460) != *(_DWORD *)(a1 + 224));
  }
  if (v27)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)BOOL v59 = "AppleAVDDecodeFrame";
      *(_WORD *)&v59[8] = 1024;
      int v60 = v27;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
    }
    if (v53 != -1) {
      AppleAVDReleaseCVPixelBuffer(a1, v53, 0, *(_DWORD *)(a1 + 224), 0);
    }
    if (v52 != -1) {
      AppleAVDReleaseCVPixelBuffer(a1, v52, 0, *(_DWORD *)(a1 + 224), 0);
    }
    if (v54 != -1) {
      AppleAVDReleaseCVPixelBuffer(a1, v54, 1, *(_DWORD *)(a1 + 224), 0);
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 784));
  return v27;
}

void sub_22397E044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t BufferPool::getBuffer(uint64_t a1, unsigned int *a2, int a3, __CVBuffer *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  CVPixelBufferRef pixelBuffer = 0;
  if (!*(void *)(a1 + 128) && !a5 && !*(unsigned char *)(a1 + 160) && *(_DWORD *)(a1 + 140) == 1)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      unsigned int v41 = "getBuffer";
      __int16 v42 = 2048;
      *(void *)uint64_t v43 = 0;
      *(_WORD *)&v43[8] = 2048;
      uint64_t v44 = 0;
      __int16 v45 = 2048;
      uint64_t v46 = a6;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR! Invalid parameter(s) m_p_cv_pool: %p - vtSession: %p - vtFrame: %p", buf, 0x2Au);
    }
    return 4294967294;
  }
  kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(unsigned char *)(a1 + 160))
  {
    CVPixelBufferRef pixelBuffer = a4;
    if (*(_DWORD *)(a1 + 140) == 1) {
      CVPixelBufferRetain(a4);
    }
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 144);
    if (!v18)
    {
      uint64_t VTPixelBuffer = 0xFFFFFFFFLL;
      goto LABEL_61;
    }
    if (*(unsigned char *)(v18 + 880) && !*(unsigned char *)(v18 + 3864) || a5 && *(_DWORD *)(a1 + 140))
    {
      uint64_t VTPixelBuffer = getVTPixelBuffer(a5, a6, (uint64_t)&pixelBuffer, *(unsigned __int8 *)(a1 + 172), *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 180));
      if (VTPixelBuffer) {
        goto LABEL_61;
      }
    }
    else
    {
      CVReturn v31 = CVPixelBufferPoolCreatePixelBuffer(0, *(CVPixelBufferPoolRef *)(a1 + 128), &pixelBuffer);
      if (v31)
      {
        CVReturn v32 = v31;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136315394;
        unsigned int v41 = "getCVPixelBuffer";
        __int16 v42 = 1024;
        *(_DWORD *)uint64_t v43 = v32;
        CFDictionaryRef v19 = &_os_log_internal;
        uint32_t v20 = "AppleAVD: %s(): Failed to create pixel buffer! error: 0x%x\n";
        uint32_t v21 = 18;
        goto LABEL_32;
      }
    }
  }
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  if (!IOSurface)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_33:
      uint64_t VTPixelBuffer = 4294967293;
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136315138;
    unsigned int v41 = "getBuffer";
    CFDictionaryRef v19 = &_os_log_internal;
    uint32_t v20 = "AppleAVD: %s(): Failed to get IOSurfaceRef!\n";
    uint32_t v21 = 12;
LABEL_32:
    _os_log_impl(&dword_223977000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
    goto LABEL_33;
  }
  uint64_t v10 = IOSurface;
  uint64_t ID = IOSurfaceGetID(IOSurface);
  uint64_t v12 = ID;
  if (*(unsigned char *)(a1 + 160))
  {
    uint64_t v13 = *(unsigned int *)(a1 + 136);
    if (v13)
    {
      uint64_t v14 = 0;
      int v15 = (_DWORD *)(*(void *)(a1 + 120) + 36);
      do
      {
        if (*(v15 - 1) == ID
          && *(CVPixelBufferRef *)(v15 - 5) == pixelBuffer
          && *(__IOSurface **)(v15 - 3) == v10)
        {
          uint64_t VTPixelBuffer = 0;
          *a2 = v14;
          ++*v15;
          goto LABEL_66;
        }
        ++v14;
        v15 += 46;
      }
      while (v13 != v14);
    }
    goto LABEL_36;
  }
  if (!IOSurfaceGetCompressionTypeOfPlane())
  {
LABEL_36:
    uint64_t BaseAddress = (uint64_t)IOSurfaceGetBaseAddress(v10);
    IOSurfaceGetBaseAddressOfPlane(v10, 0);
    IOSurfaceGetBaseAddressOfPlane(v10, 1uLL);
    IOSurfaceGetBytesPerRowOfPlane(v10, 0);
    goto LABEL_37;
  }
  uint64_t BaseAddress = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane();
LABEL_37:
  IOSurfaceGetHeight(v10);
  size_t Width = IOSurfaceGetWidth(v10);
  int v23 = 0;
  int v24 = &_os_log_internal;
  while (1)
  {
    unsigned int v25 = *(_DWORD *)(a1 + 136);
    if (v25) {
      break;
    }
LABEL_42:
    if (++v23 >= *(_DWORD *)(a1 + 164))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        unsigned int v41 = "getBuffer";
        __int16 v42 = 1024;
        *(_DWORD *)uint64_t v43 = v23;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR! Failed to get an available buffer after %d attempts!\n", buf, 0x12u);
      }
      uint64_t VTPixelBuffer = 4294967293;
      goto LABEL_61;
    }
    size_t Width = BufferPool::pthreadCondTimedWait((BufferPool *)Width, (_opaque_pthread_mutex_t *)a1, (_opaque_pthread_cond_t *)(a1 + 64), 1000);
    if (Width == 60)
    {
      size_t Width = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (Width)
      {
        *(_DWORD *)buf = 136315650;
        unsigned int v41 = "getBuffer";
        __int16 v42 = 1024;
        *(_DWORD *)uint64_t v43 = 1000;
        *(_WORD *)&v43[4] = 1024;
        *(_DWORD *)&v43[6] = v23;
        _os_log_impl(&dword_223977000, v24, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): pthread_cond_timedwait (%d msec)! tryCount: %d", buf, 0x18u);
      }
    }
    unsigned int v26 = -1;
LABEL_49:
    if (v26 != -1)
    {
      uint64_t VTPixelBuffer = 0;
      goto LABEL_66;
    }
  }
  unsigned int v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 184 * v25;
  while (*(_DWORD *)(*(void *)(a1 + 120) + v27))
  {
    v27 += 184;
    ++v26;
    if (v28 == v27) {
      goto LABEL_42;
    }
  }
  int v29 = AppleAVDMapPixelBuffer(*(void *)(a1 + 144), v26, v12, *(_DWORD *)(a1 + 140));
  if (!v29)
  {
    size_t Width = (size_t)CFRetain(v10);
    uint64_t v30 = *(void *)(a1 + 120) + v27;
    *(_DWORD *)(v30 + 32) = v12;
    *(void *)(v30 + 8) = BaseAddress;
    *(void *)(v30 + 16) = pixelBuffer;
    *(void *)(v30 + 24) = v10;
    *(_DWORD *)uint64_t v30 = 1;
    *(_DWORD *)(v30 + 40) = a3;
    *(void *)(v30 + 160) = a5;
    *(void *)(v30 + 168) = a6;
    *(_DWORD *)(v30 + 36) = *(_DWORD *)(a1 + 168);
    *(unsigned char *)(v30 + 176) = 1;
    *a2 = v26;
    ++*(_DWORD *)(a1 + 152);
    goto LABEL_49;
  }
  int v33 = v29;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v41 = "mapPixelBuffer";
    __int16 v42 = 1024;
    *(_DWORD *)uint64_t v43 = v33;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Failed to map pixel buffer! - error: 0x%x\n", buf, 0x12u);
  }
  uint64_t VTPixelBuffer = 4294967293;
LABEL_61:
  if (!*(unsigned char *)(a1 + 160) || *(_DWORD *)(a1 + 140) == 1)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      unsigned int v41 = "getBuffer";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Releasing CVPixelBufferRef!\n", buf, 0xCu);
    }
    CVPixelBufferRelease(pixelBuffer);
  }
LABEL_66:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  kdebug_trace();
  return VTPixelBuffer;
}

uint64_t BufferPool::releaseBuffer(BufferPool *this, uint64_t a2, unsigned int a3, char a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 34) <= a2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = 136315394;
      CVReturn v31 = "releaseBuffer";
      __int16 v32 = 1024;
      int v33 = a2;
      uint64_t v13 = &_os_log_internal;
      uint64_t v14 = "AppleAVD: %s(): error index %d \n";
      uint32_t v15 = 18;
LABEL_17:
      _os_log_impl(&dword_223977000, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v30, v15);
    }
  }
  else
  {
    if (*((void *)this + 15))
    {
      unsigned int v8 = a2;
      kdebug_trace();
      pthread_mutex_lock((pthread_mutex_t *)this);
      uint64_t v9 = *((void *)this + 15);
      if ((a4 & 1) != 0 || (unsigned int v10 = *(_DWORD *)(v9 + 184 * v8 + 40), v10 <= a3))
      {
        unsigned int v16 = *(_DWORD *)(v9 + 184 * v8);
        if (v16 == 1)
        {
          uint64_t v17 = v9 + 184 * v8;
          int v19 = *(_DWORD *)(v17 + 36);
          uint64_t v18 = (int *)(v17 + 36);
          int v20 = v19 - 1;
          if (v19 < 1)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v30 = 136315138;
              CVReturn v31 = "releaseBuffer";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): buffer ref_count is already zero\n", (uint8_t *)&v30, 0xCu);
            }
          }
          else
          {
            *uint64_t v18 = v20;
            if (*((unsigned char *)this + 160) && *((_DWORD *)this + 35) == 1 && v20) {
              CVPixelBufferRelease(*(CVPixelBufferRef *)(v9 + 184 * v8 + 16));
            }
          }
          uint64_t v23 = *((void *)this + 15);
          if (*(_DWORD *)(v23 + 184 * v8 + 36))
          {
            uint64_t v21 = 0;
          }
          else
          {
            if (!*((unsigned char *)this + 160))
            {
              uint64_t v27 = *(unsigned int *)(v23 + 184 * v8 + 152);
              if ((v27 & 0x80000000) == 0 && v27 < *((_DWORD *)this + 34))
              {
                if (*(unsigned char *)(v23 + 184 * v27 + 176))
                {
                  AppleAVDUnmapPixelBuffer(*((void *)this + 18), v27);
                  uint64_t v23 = *((void *)this + 15);
                  *(unsigned char *)(v23 + 184 * v27 + 176) = 0;
                }
                uint64_t v28 = *(const void **)(v23 + 184 * v27 + 24);
                if (v28)
                {
                  CFRelease(v28);
                  uint64_t v23 = *((void *)this + 15);
                  *(void *)(v23 + 184 * v27 + 24) = 0;
                }
                CVPixelBufferRelease(*(CVPixelBufferRef *)(v23 + 184 * v27 + 16));
                uint64_t v23 = *((void *)this + 15);
                uint64_t v29 = v23 + 184 * v27;
                *(_DWORD *)uint64_t v29 = 0;
                *(void *)(v29 + 32) = 0;
                *(void *)(v29 + 8) = 0;
                *(void *)(v29 + 16) = 0;
                *(_DWORD *)(v23 + 184 * v8 + 152) = -1;
                ++*((_DWORD *)this + 39);
              }
            }
            if (*(unsigned char *)(v23 + 184 * v8 + 176))
            {
              AppleAVDUnmapPixelBuffer(*((void *)this + 18), a2);
              uint64_t v23 = *((void *)this + 15);
              *(unsigned char *)(v23 + 184 * v8 + 176) = 0;
            }
            int v24 = *(const void **)(v23 + 184 * v8 + 24);
            if (v24)
            {
              CFRelease(v24);
              uint64_t v23 = *((void *)this + 15);
              *(void *)(v23 + 184 * v8 + 24) = 0;
            }
            if (!*((unsigned char *)this + 160) || *((_DWORD *)this + 35) == 1) {
              CVPixelBufferRelease(*(CVPixelBufferRef *)(v23 + 184 * v8 + 16));
            }
            uint64_t v21 = 0;
            uint64_t v25 = *((void *)this + 15) + 184 * v8;
            *(_DWORD *)(v25 + 32) = 0;
            *(_DWORD *)uint64_t v25 = 0;
            *(void *)(v25 + 8) = 0;
            *(void *)(v25 + 16) = 0;
            *(void *)(v25 + 160) = 0;
            *(void *)(v25 + 168) = 0;
            ++*((_DWORD *)this + 39);
          }
          goto LABEL_36;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v22 = *((_DWORD *)this + 35);
          int v30 = 136315906;
          CVReturn v31 = "releaseBuffer";
          __int16 v32 = 1024;
          int v33 = v22;
          __int16 v34 = 1024;
          int v35 = a2;
          __int16 v36 = 1024;
          unsigned int v37 = v16;
          int v11 = &_os_log_internal;
          uint64_t v12 = "AppleAVD: %s(): BufferPoolId[%d]: Index %d is not in use! in_use: %d\n";
          goto LABEL_21;
        }
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = 136315906;
        CVReturn v31 = "releaseBuffer";
        __int16 v32 = 1024;
        int v33 = a2;
        __int16 v34 = 1024;
        int v35 = a3;
        __int16 v36 = 1024;
        unsigned int v37 = v10;
        int v11 = &_os_log_internal;
        uint64_t v12 = "AppleAVD: %s(): WARNING! index: %d - trying to release! frameNum (%d) < get frameNum (%d), returning early!";
LABEL_21:
        _os_log_impl(&dword_223977000, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v30, 0x1Eu);
      }
      uint64_t v21 = 0xFFFFFFFFLL;
LABEL_36:
      pthread_cond_signal((pthread_cond_t *)((char *)this + 64));
      pthread_mutex_unlock((pthread_mutex_t *)this);
      kdebug_trace();
      return v21;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = 136315138;
      CVReturn v31 = "releaseBuffer";
      uint64_t v13 = &_os_log_internal;
      uint64_t v14 = "AppleAVD: %s(): m_p_buf_pool is NULL \n";
      uint32_t v15 = 12;
      goto LABEL_17;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t BufferPool::getBufferInfo(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(_DWORD *)(a1 + 136);
  if (v4 <= a2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315650;
      int v11 = "getBufferInfo";
      __int16 v12 = 1024;
      unsigned int v13 = a2;
      __int16 v14 = 1024;
      unsigned int v15 = v4;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): error index %d m_max_cache_size:%d \n", (uint8_t *)&v10, 0x18u);
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)a1);
    int v7 = (_DWORD *)(*(void *)(a1 + 120) + 184 * a2);
    if (*v7 == 1)
    {
      uint64_t v8 = 0;
      *a3 = v7;
    }
    else
    {
      *a3 = 0;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 136315394;
        int v11 = "getBufferInfo";
        __int16 v12 = 1024;
        unsigned int v13 = a2;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): buff NOT in use! error index %d\n", (uint8_t *)&v10, 0x12u);
      }
      uint64_t v8 = 0xFFFFFFFFLL;
    }
    pthread_mutex_unlock((pthread_mutex_t *)a1);
  }
  return v8;
}

uint64_t AppleAVDPutTiledPixelBufferIntoBufferPool(uint64_t a1, unsigned int *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 8 * a3 + 200);
  if (!v7) {
    operator new();
  }
  uint64_t v8 = 3648;
  if (a3 == 1) {
    uint64_t v8 = 3640;
  }
  if (a4) {
    uint64_t v8 = 3656;
  }
  uint64_t v9 = *(__CVBuffer **)(a1 + v8);
  int v10 = *(_DWORD *)(a1 + 224);

  return BufferPool::getBuffer(v7, a2, v10, v9, a5, a6);
}

void sub_22397EF4C(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v1, 0x10A0C408E268E6BLL);
  _Unwind_Resume(a1);
}

uint64_t AppleAVDMapPixelBuffer(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2 > 0x80) {
    return 308;
  }
  uint64_t v5 = *(void *)(a1 + 3848);
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6)
  {
    uint64_t v4 = 312;
LABEL_10:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      int v11 = "AppleAVDMapPixelBuffer";
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed error: %d \n", (uint8_t *)&v10, 0x12u);
    }
    return v4;
  }
  *(_DWORD *)(v5 + 6048) = a4;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
  uint64_t v4 = v7;
  if (v7 != -536870210 && v7 != 0) {
    goto LABEL_10;
  }
  return v4;
}

uint64_t CAVDDecoder::VAMapPixelBuffer(CAVDDecoder *this, int a2, int a3, int a4, char a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a4 == 1) {
    unsigned int v15 = (char *)this + 24;
  }
  else {
    unsigned int v15 = (char *)this + 1056;
  }
  BOOL v16 = a4 == 1 && a2 == 128;
  uint64_t v17 = malloc_type_malloc(0xE0uLL, 0x1000040DD4DCD2DuLL);
  *(void *)&v15[8 * a2] = v17;
  *uint64_t v17 = 2;
  v17[50] = a2;
  v17[51] = 0;
  *((void *)v17 + 26) = 0;
  uint64_t v18 = *((void *)this + 293);
  if (v16)
  {
    if (*(unsigned char *)(v18 + 5888)) {
      uint64_t v19 = 2;
    }
    else {
      uint64_t v19 = 1;
    }
  }
  else
  {
    uint64_t v19 = 1;
  }
  HIBYTE(v22) = v16;
  LOBYTE(v22) = a5;
  uint64_t v20 = CAVDDecoder::mapAVDMemory((uint64_t)v17, (mach_port_t **)v18, a3, v19, 0, 3, v17 + 2, 0, v22, a6, a7, a8);
  if (v20)
  {
    free(*(void **)&v15[8 * a2]);
    *(void *)&v15[8 * a2] = 0;
    if (v20 != -536870210 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v24 = "VAMapPixelBuffer";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): error allocating surface\n", buf, 0xCu);
    }
  }
  return v20;
}

uint64_t AppleAVDUnmapPixelBuffer(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a2 < 0x81)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 3848) + 8);
    if (v4)
    {
      uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 56))(v4, a2);
      if (!v3) {
        return v3;
      }
    }
    else
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315138;
        uint64_t v7 = "AppleAVDUnmapPixelBuffer";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): NULL DECODER type", (uint8_t *)&v6, 0xCu);
      }
      uint64_t v3 = 312;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      uint64_t v7 = "AppleAVDUnmapPixelBuffer";
      __int16 v8 = 1024;
      int v9 = v3;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed error: %d \n", (uint8_t *)&v6, 0x12u);
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      uint64_t v7 = "AppleAVDUnmapPixelBuffer";
      __int16 v8 = 1024;
      int v9 = v2;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad buffer index %d\n", (uint8_t *)&v6, 0x12u);
    }
    return 308;
  }
  return v3;
}

uint64_t CAVDDecoder::VAUnmapPixelBuffer(CAVDDecoder *this, int a2, int a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)this + 8 * a2;
  uint64_t v5 = v4 + 24;
  int v6 = v4 + 1056;
  if (a3 == 1) {
    uint64_t v7 = (uint64_t *)(v4 + 24);
  }
  else {
    uint64_t v7 = (uint64_t *)(v4 + 1056);
  }
  uint64_t v8 = *v7;
  if (!*v7)
  {
    uint64_t v11 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  if (a3) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = *(unsigned char *)(v8 + 169) != 0;
  }
  __int16 v12 = (mach_port_t **)*((void *)this + 293);
  size_t v22 = 4;
  long long v13 = *(_OWORD *)(v8 + 8);
  long long v14 = *(_OWORD *)(v8 + 40);
  *(_OWORD *)&inputStruct[16] = *(_OWORD *)(v8 + 24);
  long long v25 = v14;
  *(_OWORD *)inputStruct = v13;
  long long v15 = *(_OWORD *)(v8 + 56);
  long long v16 = *(_OWORD *)(v8 + 72);
  long long v17 = *(_OWORD *)(v8 + 104);
  long long v28 = *(_OWORD *)(v8 + 88);
  long long v29 = v17;
  long long v26 = v15;
  long long v27 = v16;
  long long v18 = *(_OWORD *)(v8 + 120);
  long long v19 = *(_OWORD *)(v8 + 136);
  long long v20 = *(_OWORD *)(v8 + 168);
  long long v32 = *(_OWORD *)(v8 + 152);
  long long v33 = v20;
  long long v30 = v18;
  long long v31 = v19;
  BOOL v34 = v10;
  uint64_t v11 = IOConnectCallStructMethod(**v12, 4u, inputStruct, 0xB8uLL, outputStruct, &v22);
  if (!v11)
  {
    free((void *)v8);
LABEL_13:
    if (a3 == 1) {
      *uint64_t v5 = 0;
    }
    else {
      *int v6 = 0;
    }
    return v11;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)inputStruct = 136315650;
    *(void *)&inputStruct[4] = "VAUnmapPixelBuffer";
    *(_WORD *)&inputStruct[12] = 1024;
    *(_DWORD *)&inputStruct[14] = a2;
    *(_WORD *)&inputStruct[18] = 1024;
    *(_DWORD *)&inputStruct[20] = a3;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): error deallocating AVD surface index %d from pool %u\n", inputStruct, 0x18u);
  }
  return v11;
}

uint64_t AppleAVDGetPixelBufferFromBufferPool(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 8 * a3 + 200);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 180) = *(_DWORD *)(a1 + 56);
  return BufferPool::getBuffer(v6, a2, *(_DWORD *)(a1 + 224), 0, a4, a5);
}

void sub_22397F958(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v1, 0x10A0C408E268E6BLL);
  _Unwind_Resume(a1);
}

uint64_t getVTPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int valuePtr = a6;
  if (a4)
  {
    if (a5)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F1ED08], v7);
    }
    else
    {
      Mutable = 0;
      CFNumberRef v7 = 0;
    }
    uint64_t PixelBufferWithOptions = VTDecoderSessionCreatePixelBufferWithOptions();
    if (!PixelBufferWithOptions) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t PixelBufferWithOptions = VTDecoderSessionCreatePixelBuffer();
    Mutable = 0;
    CFNumberRef v7 = 0;
    if (!PixelBufferWithOptions) {
      goto LABEL_11;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v12 = "getVTPixelBuffer";
    __int16 v13 = 1024;
    int v14 = PixelBufferWithOptions;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Failed to create pixel buffer! error: 0x%x\n", buf, 0x12u);
  }
  uint64_t PixelBufferWithOptions = 4294967293;
LABEL_11:
  if (v7) {
    CFRelease(v7);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return PixelBufferWithOptions;
}

void BufferPool::BufferPool(BufferPool *this)
{
  *((unsigned char *)this + 112) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((void *)this + 19) = 0;
  *((unsigned char *)this + 160) = 0;
  *((_DWORD *)this + 42) = 1;
  *((unsigned char *)this + 172) = 0;
  *((void *)this + 22) = 0;
}

uint64_t BufferPool::initBufferPool(BufferPool *this, void *a2, __CVPixelBufferPool *a3, int a4, int a5, int a6, int a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 35) = a5;
  *((_DWORD *)this + 41) = a6;
  *((_DWORD *)this + 42) = a7;
  int v10 = *((unsigned __int8 *)this + 112);
  if (!a2 || *((unsigned char *)this + 112))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 134218752;
      *(void *)uint64_t v21 = a2;
      *(_WORD *)&v21[8] = 2048;
      *(void *)&v21[10] = a3;
      __int16 v22 = 1024;
      int v23 = a4;
      __int16 v24 = 1024;
      int v25 = v10;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: failed due to p_ctx=%p, p_cv_pool=%p, max_cache_size=%d, m_is_initialized=%d", (uint8_t *)&v20, 0x22u);
    }
    uint64_t v13 = 4294967294;
  }
  else
  {
    uint64_t v12 = pthread_mutex_init((pthread_mutex_t *)this, 0);
    if (v12)
    {
      uint64_t v13 = v12;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      int v14 = "ENOMEM";
      if (v13 == 22) {
        int v14 = "EINVAL";
      }
      if (v13 == 35) {
        int v14 = "EAGAIN";
      }
      int v20 = 67109378;
      *(_DWORD *)uint64_t v21 = v13;
      *(_WORD *)&v21[4] = 2080;
      *(void *)&v21[6] = v14;
      uint64_t v15 = &_os_log_internal;
      long long v16 = "AppleAVD:  cannot initialize mutex, return error %d [ %s ]";
      goto LABEL_20;
    }
    uint64_t v17 = pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0);
    if (!v17)
    {
      *((_DWORD *)this + 34) = a4;
      operator new[]();
    }
    uint64_t v13 = v17;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      long long v18 = "ENOMEM";
      if (v13 == 22) {
        long long v18 = "EINVAL";
      }
      if (v13 == 35) {
        long long v18 = "EAGAIN";
      }
      int v20 = 67109378;
      *(_DWORD *)uint64_t v21 = v13;
      *(_WORD *)&v21[4] = 2080;
      *(void *)&v21[6] = v18;
      uint64_t v15 = &_os_log_internal;
      long long v16 = "AppleAVD:  cannot initialize cond variable, return error %d [ %s ]";
LABEL_20:
      _os_log_impl(&dword_223977000, v15, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v20, 0x12u);
    }
  }
LABEL_21:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 136315394;
    *(void *)uint64_t v21 = "initBufferPool";
    *(_WORD *)&v21[8] = 1024;
    *(_DWORD *)&v21[10] = v13;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", (uint8_t *)&v20, 0x12u);
  }
  return v13;
}

uint64_t CAVDHevcDecoder::deallocateMembersPerLayer(CAVDHevcDecoder *this, int a2)
{
  int v2 = a2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)this + 2308);
  if (v4 != a2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315650;
      uint64_t v15 = "deallocateMembersPerLayer";
      __int16 v16 = 1024;
      int v17 = v4;
      __int16 v18 = 1024;
      int v19 = v2;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): mismatch - m_numLayers %d, numLayers %d", (uint8_t *)&v14, 0x18u);
      int v2 = *((_DWORD *)this + 2308);
    }
    else
    {
      int v2 = v4;
    }
  }
  if (v2 >= 1)
  {
    uint64_t v5 = v2;
    uint64_t v6 = (void *)((char *)this + 3128);
    uint64_t v7 = v5;
    do
    {
      if (*v6)
      {
        (*(void (**)(void))(*(void *)*v6 + 8))(*v6);
        *uint64_t v6 = 0;
      }
      ++v6;
      --v7;
    }
    while (v7);
    uint64_t v8 = 0;
    uint64_t v9 = 8 * v5;
    do
    {
      uint64_t v10 = *((void *)this + 1050);
      if (v10)
      {
        free(*(void **)(v10 + v8));
        *(void *)(*((void *)this + 1050) + v8) = 0;
      }
      uint64_t v11 = *((void *)this + 1051);
      if (v11)
      {
        free(*(void **)(v11 + v8));
        *(void *)(*((void *)this + 1051) + v8) = 0;
      }
      uint64_t v12 = *((void *)this + 1052);
      if (v12)
      {
        free(*(void **)(v12 + v8));
        *(void *)(*((void *)this + 1052) + v8) = 0;
      }
      v8 += 8;
    }
    while (v9 != v8);
  }
  free(*((void **)this + 1050));
  *((void *)this + 1050) = 0;
  free(*((void **)this + 1051));
  *((void *)this + 1051) = 0;
  free(*((void **)this + 1052));
  *((void *)this + 1052) = 0;
  return 0;
}

uint64_t CAVDDecoder::unmapAVDMemory(uint64_t a1, mach_port_t **a2, _OWORD *a3, char a4)
{
  size_t v11 = 4;
  long long v4 = a3[5];
  inputStruct[4] = a3[4];
  inputStruct[5] = v4;
  long long v5 = a3[10];
  long long v6 = a3[8];
  inputStruct[9] = a3[9];
  inputStruct[10] = v5;
  long long v7 = a3[7];
  inputStruct[6] = a3[6];
  inputStruct[7] = v7;
  inputStruct[8] = v6;
  long long v8 = a3[1];
  inputStruct[0] = *a3;
  inputStruct[1] = v8;
  long long v9 = a3[3];
  inputStruct[2] = a3[2];
  inputStruct[3] = v9;
  char v14 = a4;
  return IOConnectCallStructMethod(**a2, 4u, inputStruct, 0xB8uLL, outputStruct, &v11);
}

void HEVC_RLM::~HEVC_RLM(HEVC_RLM *this)
{
  HEVC_RLM::~HEVC_RLM(this);

  JUMPOUT(0x223CBAD30);
}

{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;

  int v2 = 0;
  *(void *)this = &unk_26D740200;
  uint64_t v3 = (unsigned __int8 *)this + 16;
  do
  {
    long long v4 = *v3;
    v3 += 176;
    if (v4) {
      HEVC_RLM::removeEntry(this, v2);
    }
    ++v2;
  }
  while (v2 != 16);
  *((void *)this + 824) = 0;
  *((_DWORD *)this + 1650) = 0;
}

uint64_t CAVDHevcDecoder::DecodePicture(CAVDHevcDecoder *this, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(**((void **)this + 262) + 16))(*((void *)this + 262), a3, a2))
  {
    return 1;
  }
  (*(void (**)(void))(**((void **)this + 262) + 32))(*((void *)this + 262));
  (*(void (**)(void))(**((void **)this + 262) + 48))(*((void *)this + 262));
  if ((*(unsigned int (**)(void))(**((void **)this + 262) + 56))(*((void *)this + 262))
    || (*(unsigned int (**)(void, uint64_t))(**((void **)this + 262) + 24))(*((void *)this + 262), a2))
  {
    return 4;
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 262) + 88))(*((void *)this + 262), a2);
  (*(void (**)(void, void))(**((void **)this + 262) + 40))(*((void *)this + 262), *((unsigned int *)this + 910));
  return 0;
}

uint64_t CAHDecCatnipHevc::populatePictureRegisters(CAHDecCatnipHevc *this)
{
  uint64_t v466 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 8320);
  int v4 = *(_DWORD *)(v2 + 8324);
  uint64_t v5 = *(void *)(v2 + 8280);
  uint64_t v6 = *(void *)(v2 + 8288);
  unsigned int v444 = *(_DWORD *)(v2 + 9036);
  unsigned int v7 = *(_DWORD *)(v2 + 3068);
  int v449 = *(_DWORD *)(v2 + 3072);
  int v8 = *(unsigned __int8 *)(v2 + 3060);
  int v9 = *(_DWORD *)(v2 + 3064);
  uint64_t v439 = *(void *)(v2 + 8392);
  int v440 = *(_DWORD *)(v2 + 3036);
  uint64_t v10 = *(void *)(v2 + 2088);
  int v435 = *(_DWORD *)(v2 + 3660);
  int v436 = *(unsigned __int8 *)(v2 + 9098);
  int v447 = *(_DWORD *)(v2 + 2644);
  uint64_t v442 = *(unsigned int *)(v2 + 8424);
  int v11 = *(unsigned __int8 *)(v2 + 8);
  long long v12 = *(_OWORD *)(v2 + 8536);
  v465[0] = *(_OWORD *)(v2 + 8520);
  v465[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 8568);
  v465[2] = *(_OWORD *)(v2 + 8552);
  v465[3] = v13;
  uint64_t v433 = v10;
  uint64_t v434 = *(unsigned int *)(v2 + 8720);
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  uint64_t v15 = (char *)this + 264;
  int v445 = *(_DWORD *)(v5 + 23176 * v3 + 4424) + *(_DWORD *)(v5 + 23176 * v3 + 4420);
  int v446 = v14;
  memset(v464, 0, sizeof(v464));
  memset(v463, 0, sizeof(v463));
  uint64_t v451 = *((void *)this + 33);
  (*(void (**)(void))(**((void **)this + 32) + 336))();
  uint64_t v16 = 0;
  int v17 = (unsigned __int8 *)*((void *)this + 32);
  __int16 v18 = (const double *)(v17 + 8728);
  do
  {
    float64x2x2_t v467 = vld2q_f64(v18);
    v18 += 4;
    v464[v16] = v467.val[0];
    v463[v16++] = v467.val[1];
  }
  while (v16 != 4);
  uint64_t v19 = v6 + 9856 * v4;
  int v21 = *(unsigned __int8 *)(v19 + 52);
  uint64_t v20 = (unsigned char *)(v19 + 52);
  v448 = (char *)this + 264;
  int v441 = v11;
  int v437 = v8;
  int v438 = v9;
  unsigned int v443 = v7;
  if (v21)
  {
    unint64_t v22 = 0;
    uint64_t v23 = v6 + 9856 * v4;
    unsigned __int16 v24 = *(_WORD *)(v23 + 56) + 1;
    uint64_t v25 = *(void *)v15;
    *(_WORD *)(*(void *)v15 + 684) = v24;
    uint64_t v26 = v23 + 9676;
    do
    {
      *(_WORD *)(v25 + 688 + 2 * v22) = *(_DWORD *)(v26 + 4 * v22);
      BOOL v27 = v22++ >= v24;
    }
    while (!v27);
    unint64_t v28 = 0;
    uint64_t v29 = v6 + 9856 * v4;
    unsigned __int16 v30 = *(_WORD *)(v29 + 60) + 1;
    *(_WORD *)(v25 + 686) = v30;
    int v31 = v30;
    uint64_t v32 = v29 + 9760;
    uint64_t v33 = v25 + 730;
    do
    {
      *(_WORD *)(v33 + 2 * v28) = *(_DWORD *)(v32 + 4 * v28);
      BOOL v27 = v28++ >= v30;
    }
    while (!v27);
    uint64_t v34 = v5;
    int v35 = v3;
  }
  else
  {
    uint64_t v36 = *(void *)v15;
    *(_DWORD *)(v36 + 684) = 65537;
    *(_WORD *)(v36 + 688) = 0;
    int v35 = v3;
    uint64_t v34 = v5;
    uint64_t v37 = v5 + 23176 * v3;
    *(_WORD *)(v36 + 690) = *(_DWORD *)(v37 + 22880);
    *(_WORD *)(v36 + 730) = 0;
    *(_WORD *)(v36 + 732) = *(_DWORD *)(v37 + 22888);
    int v31 = 1;
    unsigned __int16 v24 = 1;
  }
  int v38 = v17[2675];
  unsigned int v39 = v17[2674];
  if (v38 | v39)
  {
    uint64_t v40 = v34 + 23176 * v35;
    unsigned int v41 = *(_DWORD *)(v40 + 3636);
    unsigned int v42 = *(_DWORD *)(v40 + 3640);
    if (v41 > v42) {
      unsigned int v42 = v41;
    }
    unsigned int v43 = (v42 + 9) & 0xFFFFFFFE;
    if (v43 == 8)
    {
      unsigned int v52 = 1;
      int v51 = 8;
      if (!v17[2675]) {
        goto LABEL_47;
      }
    }
    else
    {
      int v44 = v17[2672];
      if (v44) {
        int v45 = 12;
      }
      else {
        int v45 = 11;
      }
      if (v44) {
        int v46 = 5;
      }
      else {
        int v46 = 4;
      }
      BOOL v47 = v44 == 0;
      if (v44) {
        int v48 = 10;
      }
      else {
        int v48 = 9;
      }
      if (v47) {
        int v49 = 2;
      }
      else {
        int v49 = 3;
      }
      if (v43 == 10)
      {
        int v50 = v49;
      }
      else
      {
        int v48 = 27;
        int v50 = 27;
      }
      if (v43 == 12) {
        int v51 = v45;
      }
      else {
        int v51 = v48;
      }
      if (v43 == 12) {
        unsigned int v52 = v46;
      }
      else {
        unsigned int v52 = v50;
      }
      if (!v38) {
        goto LABEL_47;
      }
    }
    if (*(_DWORD *)(v34 + 23176 * v35 + 3600) && (v38 == 2 && v51 == 8 || v38 == 3 && (v51 - 9) <= 1))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v51;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v38;
        unsigned int v53 = &_os_log_internal;
        unsigned int v54 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
        goto LABEL_123;
      }
      return 0xFFFFFFFFLL;
    }
LABEL_47:
    if (v39 && (v39 == 3 && v52 - 9 < 2 || v52 <= 0x1A && ((1 << v52) & 0x4C00000) != 0 && v39 <= 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v52;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v39;
        unsigned int v53 = &_os_log_internal;
        unsigned int v54 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
        goto LABEL_123;
      }
      return 0xFFFFFFFFLL;
    }
  }
  unsigned __int16 v432 = v24;
  int v55 = v20;
  *(_DWORD *)(v451 + 88) = 766509056;
  uint64_t v56 = (*(uint64_t (**)(void))(**((void **)this + 32) + 216))(*((void *)this + 32));
  if (v56) {
    int v57 = (*(_DWORD *)(*((void *)this + 32) + 3092) == 2) << 13;
  }
  else {
    int v57 = 0;
  }
  unsigned int v58 = v444 >> 28;
  unsigned int v59 = *(_DWORD *)(v451 + 88) & 0xFFFFC100;
  if (v446) {
    int v60 = 688;
  }
  else {
    int v60 = 672;
  }
  if (v447) {
    int v61 = 4160;
  }
  else {
    int v61 = 64;
  }
  unsigned int v62 = v61 & 0xFFFFFFF0 | ((v447 == 1) << 10) | v60 & 0xFFFFFFF0 | (4 * (v38 & 3)) | v39 & 3 | v57;
  int v63 = v62 | v59;
  *(_DWORD *)(v451 + 88) = v62 | v59;
  int v64 = (unsigned char *)*((void *)this + 32);
  unsigned int v65 = v63 & 0xFFF7FFFF | ((v64[2652] & 1) << 19);
  *(_DWORD *)(v451 + 88) = v65;
  unsigned int v66 = v65 & 0xFFFBFFFF | ((v64[2653] & 1) << 18);
  *(_DWORD *)(v451 + 88) = v66;
  unsigned int v67 = v66 & 0xFFFDFFFF | ((v64[2654] & 1) << 17);
  *(void *)(v451 + 88) = v67;
  if ((v444 & 1) != 0 && *(unsigned char *)(v6 + 9856 * v4 + 53) && *(_DWORD *)(v34 + 23176 * v35 + 22888) > v58 + 1
    || (v444 & 2) != 0 && !*(unsigned char *)(v6 + 9856 * v4 + 53) && *v55 && v31 * v432 > v58 + 1)
  {
    goto LABEL_77;
  }
  if ((v444 & 0x20) == 0 || (int v68 = *(unsigned __int8 *)(v6 + 9856 * v4 + 53), *(unsigned char *)(v6 + 9856 * v4 + 53)))
  {
    int v68 = 0;
    goto LABEL_78;
  }
  if (!*v55 && v443 > v58 + 1) {
LABEL_77:
  }
    int v68 = (v449 == 0) << 27;
LABEL_78:
  *(_DWORD *)(v451 + 92) = v68;
  *(_DWORD *)(v451 + 96) = 0;
  uint64_t v69 = v34 + 23176 * v35;
  unsigned __int16 v70 = *(_DWORD *)(v69 + 3608) - 1;
  *(_DWORD *)(v451 + 96) = v70;
  int v71 = (v70 | ((unsigned __int16)*(_DWORD *)(v69 + 3612) << 16)) - 0x10000;
  *(_DWORD *)(v451 + 100) = 0;
  *(_DWORD *)(v451 + 104) = 0;
  *(_DWORD *)(v451 + 96) = v71;
  if (*(unsigned char *)(v6 + 9856 * v4 + 6466))
  {
    BOOL v72 = (unsigned char *)(v6 + 9856 * v4 + 6477);
    int v73 = 32 * (*v72 & 1);
    *(_DWORD *)(v451 + 104) = v73;
    LOBYTE(v74) = *v72;
    if (*v72) {
      int v74 = *(_DWORD *)(v6 + 9856 * v4 + 6484);
    }
    unint64_t v75 = v74 & 7;
    int v76 = v75 | v73;
    *(_DWORD *)(v451 + 104) = v75 | v73;
    if (v73)
    {
      unsigned int v77 = (_DWORD *)(v6 + 9856 * v4 + 6512);
      unsigned int v78 = (unsigned int *)(v451 + 112);
      unint64_t v79 = -1;
      do
      {
        unsigned int v80 = *v78 & 0xFFFFFFE0 | *v77 & 0x1F;
        *unsigned int v78 = v80;
        uint64_t v56 = v80 & 0xFFFFFC1F | (32 * (*(v77 - 6) & 0x1F));
        *v78++ = v56;
        ++v79;
        ++v77;
      }
      while (v79 < v75);
    }
    int v81 = *v72;
    if (v81) {
      int v81 = *(_DWORD *)(v6 + 9856 * v4 + 6480);
    }
    int v82 = (8 * (((_BYTE)v445 - (_BYTE)v81) & 3)) | v76;
    *(_DWORD *)(v451 + 104) = v82;
    unsigned int v83 = v82 & 0xFFFFFFBF | ((*(unsigned char *)(v6 + 9856 * v4 + 6476) & 1) << 6);
    *(_DWORD *)(v451 + 104) = v83;
    unsigned int v84 = v83 & 0xFFFFFE7F | ((*(_DWORD *)(v6 + 9856 * v4 + 6472) & 3) << 7);
  }
  else
  {
    unsigned int v84 = 8 * (v445 & 3);
  }
  *(_DWORD *)(v451 + 104) = v84;
  uint64_t v85 = v6 + 9856 * v4;
  int v88 = *(unsigned __int8 *)(v85 + 34);
  uint64_t v86 = (unsigned char *)(v85 + 34);
  LOBYTE(v87) = v88;
  if (v88) {
    int v87 = *(_DWORD *)(v6 + 9856 * v4 + 36);
  }
  unsigned int v89 = v84 & 0xFFFE7FFF | ((((_BYTE)v445 - (_BYTE)v87) & 3) << 15);
  *(_DWORD *)(v451 + 104) = v89;
  uint64_t v90 = v6 + 9856 * v4;
  unsigned int v91 = v89 & 0xFFFFF1FF | ((*(_DWORD *)(v90 + 6460) & 7) << 9);
  *(_DWORD *)(v451 + 104) = v91;
  unsigned int v92 = v91 & 0xFFFFEFFF | ((*(unsigned char *)(v90 + 53) & 1) << 12);
  *(_DWORD *)(v451 + 104) = v92;
  unsigned int v93 = v92 & 0xFFFFDFFF | ((*v55 & 1) << 13);
  *(_DWORD *)(v451 + 104) = v93;
  unsigned int v94 = v93 & 0xFFFFBFFF | ((*(unsigned char *)(v90 + 51) & 1) << 14);
  *(_DWORD *)(v451 + 104) = v94;
  unsigned int v95 = v94 & 0xFFFDFFFF | ((*v86 & 1) << 17);
  *(_DWORD *)(v451 + 104) = v95;
  unsigned int v96 = v95 & 0xFFFBFFFF | ((*(unsigned char *)(v90 + 33) & 1) << 18);
  *(_DWORD *)(v451 + 104) = v96;
  unsigned int v97 = v96 & 0xFFF7FFFF | ((*(unsigned char *)(v90 + 32) & 1) << 19);
  *(_DWORD *)(v451 + 104) = v97;
  unsigned int v98 = v97 & 0xFFEFFFFF | ((*(unsigned char *)(v90 + 16) & 1) << 20);
  *(_DWORD *)(v451 + 104) = v98;
  if (v62 >> 13) {
    BOOL v99 = 0;
  }
  else {
    BOOL v99 = *(unsigned char *)(v34 + 23176 * v35 + 22284) != 0;
  }
  *(_DWORD *)(v451 + 104) = v98 & 0xFFDFFFFF | (v99 << 21);
  uint64_t v100 = v6 + 9856 * v4;
  unsigned int v101 = *(_DWORD *)(v451 + 108) & 0xFFFFFFE0 | *(_DWORD *)(v100 + 44) & 0x1F;
  *(_DWORD *)(v451 + 108) = v101;
  *(_DWORD *)(v451 + 108) = v101 & 0xFFFFFC1F | (32 * (*(_DWORD *)(v100 + 40) & 0x1F));
  if (*(unsigned char *)(v100 + 252))
  {
    CAHDecTansyHevc::copyScalingList(v56, v451 + 136, *(void *)v448 + 1784, *(_DWORD *)(v34 + 23176 * v35 + 3600), v6 + 9856 * v4 + 256);
    unsigned int v67 = *(_DWORD *)(v451 + 88);
  }
  if ((~v67 & 0xC0000) != 0)
  {
    int v106 = 0;
    int v108 = 0;
    *(_DWORD *)(v451 + 156) = 0;
    *(_DWORD *)(v451 + 160) = 0;
  }
  else
  {
    unint64_t v102 = (_DWORD *)*((void *)this + 32);
    int v103 = v102[664];
    if (!v103 || !v102[665])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v134 = v102[665];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v103;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v134;
        unsigned int v53 = &_os_log_internal;
        unsigned int v54 = "AppleAVD: %s(): invalid stat crop width/height %d/%d";
LABEL_123:
        unint64_t v135 = buf;
        uint32_t v136 = 24;
LABEL_124:
        _os_log_impl(&dword_223977000, v53, OS_LOG_TYPE_DEFAULT, v54, v135, v136);
      }
      return 0xFFFFFFFFLL;
    }
    unsigned __int16 v104 = v102[666];
    *(_WORD *)(v451 + 156) = v104;
    int v105 = v102[667];
    int v106 = v105 << 16;
    *(_DWORD *)(v451 + 156) = v104 | ((unsigned __int16)v105 << 16);
    unsigned __int16 v107 = v102[666] + v102[664] - 1;
    *(_WORD *)(v451 + 160) = v107;
    int v108 = (v107 | ((unsigned __int16)(*((_WORD *)v102 + 1330) + *((_WORD *)v102 + 1334)) << 16)) - 0x10000;
    *(_DWORD *)(v451 + 160) = v108;
  }
  if (v449) {
    int v109 = 7340080;
  }
  else {
    int v109 = 3145776;
  }
  *(_DWORD *)(v451 + 164) = v109;
  if (!*(unsigned char *)(*((void *)this + 32) + 3004))
  {
    unsigned __int16 v110 = *(_DWORD *)(v69 + 3608) - 1;
    *(_DWORD *)(v451 + 160) = v108 & 0xFFFF0000 | v110;
    int v111 = (*(_DWORD *)(v69 + 3612) << 16) - 0x10000;
    *(_DWORD *)(v451 + 160) = v111 & 0xFFFF0000 | v110;
    if (*(unsigned char *)(v34 + 23176 * v35 + 3616))
    {
      if ((v67 & 0x800) != 0)
      {
        uint64_t v112 = v34 + 23176 * v35;
        unsigned __int16 v113 = *(_DWORD *)(v112 + 3620) * *(_DWORD *)(v112 + 22852);
        *(_DWORD *)(v451 + 156) = v106 | v113;
        *(_DWORD *)(v451 + 156) = v113 | ((unsigned __int16)(*(_WORD *)(v112 + 22856) * *(_DWORD *)(v112 + 3628)) << 16);
        unsigned __int16 v114 = *(_DWORD *)(v69 + 3608) + ~(*(_DWORD *)(v112 + 3624) * *(_DWORD *)(v112 + 22852));
        *(_DWORD *)(v451 + 160) = v114 | v111;
        *(_DWORD *)(v451 + 160) = v114 | ((unsigned __int16)(*(_WORD *)(v69 + 3612)
                                                           + ~(*(_WORD *)(v112 + 3632) * *(_WORD *)(v112 + 22856))) << 16);
      }
    }
  }
  uint64_t v115 = 0;
  int v116 = (char *)this + 6160;
  do
  {
    *(_DWORD *)(*(void *)v448 + v115 + 168) = 0;
    uint64_t v117 = *(void *)v448 + v115;
    int v118 = *(_DWORD *)(v117 + 168);
    *(_DWORD *)(v117 + 168) = 0;
    *(_DWORD *)(*(void *)v448 + v115 + 168) ^= 0xFFFFFF00;
    uint64_t v119 = *(void *)v448 + v115;
    int v120 = *(_DWORD *)(v119 + 168);
    *(_DWORD *)(v119 + 168) = v118;
    if (*(void *)v116 || *((_DWORD *)v116 + 38) || *((_DWORD *)v116 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v116, (int)v115 + 168, 0, 0xFFFFFFFFLL, 8, v120, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v115 + 196) = 0;
    *(_DWORD *)(*((void *)this + 33) + v115 + 196) = *(_DWORD *)(*((void *)this + 33) + v115 + 196) & 0x800001FF | (((*((_DWORD *)this + 2952) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v115 + 460) = 0;
    uint64_t v122 = *((void *)this + 33) + v115;
    int v123 = *(_DWORD *)(v122 + 460);
    *(_DWORD *)(v122 + 460) = 0;
    *(_DWORD *)(*((void *)this + 33) + v115 + 460) ^= 0x3FFu;
    uint64_t v124 = *((void *)this + 33) + v115;
    int v125 = *(_DWORD *)(v124 + 460);
    *(_DWORD *)(v124 + 460) = v123;
    if (*(void *)v116 || *((_DWORD *)v116 + 38) || *((_DWORD *)v116 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v116, (int)v115 + 460, 0, 0x3FFFFFFFFFFLL, 32, v125, 4);
      if (result) {
        return result;
      }
    }
    v115 += 4;
    v116 += 176;
  }
  while (v115 != 28);
  *(_DWORD *)(*(void *)v448 + 224) = 0;
  *(_DWORD *)(*(void *)v448 + 488) = 0;
  if ((*(unsigned char *)(v451 + 90) & 8) != 0)
  {
    uint64_t v126 = *((void *)this + 33);
    uint64_t v127 = *(void *)(*((void *)this + 32) + 2680);
    long long v461 = 0u;
    long long v462 = 0u;
    long long v459 = 0u;
    long long v460 = 0u;
    long long v457 = 0u;
    long long v458 = 0u;
    long long v455 = 0u;
    long long v456 = 0u;
    long long v454 = 0u;
    memset(buf, 0, sizeof(buf));
    int v128 = (*(_DWORD *)(v126 + 16) & 0xF) << 9;
    *(void *)buf = v127;
    int v129 = *(_DWORD *)(v126 + 224);
    *(_DWORD *)(v126 + 224) = 0;
    *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFF00;
    uint64_t v130 = *((void *)this + 33);
    int v131 = *(_DWORD *)(v130 + 224);
    *(_DWORD *)(v130 + 224) = v129;
    if (v127)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 224, v128, 0xFFFFFFFFLL, 8, v131, 4);
      if (result) {
        return result;
      }
      uint64_t v132 = *(void *)buf;
      int v133 = DWORD2(v461);
      LODWORD(v127) = HIDWORD(v461);
    }
    else
    {
      int v133 = 0;
      uint64_t v132 = 0;
    }
    int v137 = *(_DWORD *)(*(void *)v448 + 488);
    *(_DWORD *)(*(void *)v448 + 488) = 0;
    *(_DWORD *)(*(void *)v448 + 488) ^= 0x3FFu;
    int v138 = *(_DWORD *)(*(void *)v448 + 488);
    *(_DWORD *)(*(void *)v448 + 488) = v137;
    if (v132 || v133 || v127)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 488, v128, 0x3FFFFFFFFFFLL, 32, v138, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 228) = 0;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 228);
  *(_DWORD *)(v139 + 228) = 0;
  *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFF00;
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 228);
  *(_DWORD *)(v141 + 228) = v140;
  if (*((void *)this + 1298) || *((_DWORD *)this + 2634) || *((_DWORD *)this + 2635))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1298, 228, 0, 0xFFFFFFFFLL, 8, v142, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 492) = 0;
  int v143 = *(_DWORD *)(*(void *)v448 + 492);
  *(_DWORD *)(*(void *)v448 + 492) = 0;
  *(_DWORD *)(*(void *)v448 + 492) ^= 0x3FFu;
  int v144 = *(_DWORD *)(*(void *)v448 + 492);
  *(_DWORD *)(*(void *)v448 + 492) = v143;
  if (*((void *)this + 1298) || *((_DWORD *)this + 2634) || *((_DWORD *)this + 2635))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1298, 492, 0, 0x3FFFFFFFFFFLL, 32, v144, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 232) = 0;
  uint64_t v145 = *((void *)this + 33);
  int v146 = *(_DWORD *)(v145 + 232);
  *(_DWORD *)(v145 + 232) = 0;
  *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFF00;
  uint64_t v147 = *((void *)this + 33);
  int v148 = *(_DWORD *)(v147 + 232);
  *(_DWORD *)(v147 + 232) = v146;
  if (*((void *)this + 1320) || *((_DWORD *)this + 2678) || *((_DWORD *)this + 2679))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1320, 232, 0, 0xFFFFFFFFLL, 8, v148, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 496) = 0;
  int v149 = *(_DWORD *)(*(void *)v448 + 496);
  *(_DWORD *)(*(void *)v448 + 496) = 0;
  *(_DWORD *)(*(void *)v448 + 496) ^= 0x3FFu;
  int v150 = *(_DWORD *)(*(void *)v448 + 496);
  *(_DWORD *)(*(void *)v448 + 496) = v149;
  if (*((void *)this + 1320) || *((_DWORD *)this + 2678) || *((_DWORD *)this + 2679))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1320, 496, 0, 0x3FFFFFFFFFFLL, 32, v150, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 236) = 0;
  uint64_t v151 = *((void *)this + 33);
  int v152 = *(_DWORD *)(v151 + 236);
  *(_DWORD *)(v151 + 236) = 0;
  *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFF00;
  uint64_t v153 = *((void *)this + 33);
  int v154 = *(_DWORD *)(v153 + 236);
  *(_DWORD *)(v153 + 236) = v152;
  if (*((void *)this + 1342) || *((_DWORD *)this + 2722) || *((_DWORD *)this + 2723))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1342, 236, 0, 0xFFFFFFFFLL, 8, v154, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 500) = 0;
  int v155 = *(_DWORD *)(*(void *)v448 + 500);
  *(_DWORD *)(*(void *)v448 + 500) = 0;
  *(_DWORD *)(*(void *)v448 + 500) ^= 0x3FFu;
  int v156 = *(_DWORD *)(*(void *)v448 + 500);
  *(_DWORD *)(*(void *)v448 + 500) = v155;
  if (*((void *)this + 1342) || *((_DWORD *)this + 2722) || *((_DWORD *)this + 2723))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1342, 500, 0, 0x3FFFFFFFFFFLL, 32, v156, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 240) = 0;
  uint64_t v157 = *((void *)this + 33);
  int v158 = *(_DWORD *)(v157 + 240);
  *(_DWORD *)(v157 + 240) = 0;
  *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFF00;
  uint64_t v159 = *((void *)this + 33);
  int v160 = *(_DWORD *)(v159 + 240);
  *(_DWORD *)(v159 + 240) = v158;
  if (*((void *)this + 1364) || *((_DWORD *)this + 2766) || *((_DWORD *)this + 2767))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1364, 240, 0, 0xFFFFFFFFLL, 8, v160, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 504) = 0;
  int v161 = *(_DWORD *)(*(void *)v448 + 504);
  *(_DWORD *)(*(void *)v448 + 504) = 0;
  *(_DWORD *)(*(void *)v448 + 504) ^= 0x3FFu;
  int v162 = *(_DWORD *)(*(void *)v448 + 504);
  *(_DWORD *)(*(void *)v448 + 504) = v161;
  if (*((void *)this + 1364) || *((_DWORD *)this + 2766) || *((_DWORD *)this + 2767))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1364, 504, 0, 0x3FFFFFFFFFFLL, 32, v162, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 244) = 0;
  uint64_t v163 = *((void *)this + 33);
  int v164 = *(_DWORD *)(v163 + 244);
  *(_DWORD *)(v163 + 244) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFF00;
  uint64_t v165 = *((void *)this + 33);
  int v166 = *(_DWORD *)(v165 + 244);
  *(_DWORD *)(v165 + 244) = v164;
  if (*((void *)this + 1386) || *((_DWORD *)this + 2810) || *((_DWORD *)this + 2811))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1386, 244, 0, 0xFFFFFFFFLL, 8, v166, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 508) = 0;
  int v167 = *(_DWORD *)(*(void *)v448 + 508);
  *(_DWORD *)(*(void *)v448 + 508) = 0;
  *(_DWORD *)(*(void *)v448 + 508) ^= 0x3FFu;
  int v168 = *(_DWORD *)(*(void *)v448 + 508);
  *(_DWORD *)(*(void *)v448 + 508) = v167;
  if (*((void *)this + 1386) || *((_DWORD *)this + 2810) || *((_DWORD *)this + 2811))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1386, 508, 0, 0x3FFFFFFFFFFLL, 32, v168, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 512) = 0;
  uint64_t v169 = *((void *)this + 33);
  int v170 = *(_DWORD *)(v169 + 248);
  *(_DWORD *)(v169 + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFF00;
  uint64_t v171 = *((void *)this + 33);
  int v172 = *(_DWORD *)(v171 + 248);
  *(_DWORD *)(v171 + 248) = v170;
  if (*((void *)this + 1408) || *((_DWORD *)this + 2854) || *((_DWORD *)this + 2855))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1408, 248, 0, 0xFFFFFFFFLL, 8, v172, 4);
    if (result) {
      return result;
    }
  }
  int v173 = *(_DWORD *)(*(void *)v448 + 512);
  *(_DWORD *)(*(void *)v448 + 512) = 0;
  *(_DWORD *)(*(void *)v448 + 512) ^= 0x3FFu;
  int v174 = *(_DWORD *)(*(void *)v448 + 512);
  *(_DWORD *)(*(void *)v448 + 512) = v173;
  if (*((void *)this + 1408) || *((_DWORD *)this + 2854) || *((_DWORD *)this + 2855))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1408, 512, 0, 0x3FFFFFFFFFFLL, 32, v174, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
  uint64_t v175 = *((void *)this + 33);
  int v176 = *(_DWORD *)(v175 + 252);
  *(_DWORD *)(v175 + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFF00;
  uint64_t v177 = *((void *)this + 33);
  int v178 = *(_DWORD *)(v177 + 252);
  *(_DWORD *)(v177 + 252) = v176;
  if (*((void *)this + 924) || *((_DWORD *)this + 1886) || *((_DWORD *)this + 1887))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 924, 252, 0, 0xFFFFFFFFLL, 8, v178, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 516) = 0;
  int v179 = *(_DWORD *)(*(void *)v448 + 516);
  *(_DWORD *)(*(void *)v448 + 516) = 0;
  *(_DWORD *)(*(void *)v448 + 516) ^= 0x3FFu;
  int v180 = *(_DWORD *)(*(void *)v448 + 516);
  *(_DWORD *)(*(void *)v448 + 516) = v179;
  if (*((void *)this + 924) || *((_DWORD *)this + 1886) || *((_DWORD *)this + 1887))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 924, 516, 0, 0x3FFFFFFFFFFLL, 32, v180, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 256) = 0;
  uint64_t v181 = *((void *)this + 33);
  int v182 = *(_DWORD *)(v181 + 256);
  *(_DWORD *)(v181 + 256) = 0;
  *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFF00;
  uint64_t v183 = *((void *)this + 33);
  int v184 = *(_DWORD *)(v183 + 256);
  *(_DWORD *)(v183 + 256) = v182;
  unsigned int v185 = (void *)((char *)this + 176 * v442 + 7568);
  if (*v185 || *((_DWORD *)this + 44 * v442 + 1930) || *((_DWORD *)this + 44 * v442 + 1931))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v442 + 946, 256, 0, 0xFFFFFFFFLL, 8, v184, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 520) = 0;
  int v186 = *(_DWORD *)(*(void *)v448 + 520);
  *(_DWORD *)(*(void *)v448 + 520) = 0;
  *(_DWORD *)(*(void *)v448 + 520) ^= 0x3FFu;
  int v187 = *(_DWORD *)(*(void *)v448 + 520);
  *(_DWORD *)(*(void *)v448 + 520) = v186;
  if (*v185 || *((_DWORD *)this + 44 * v442 + 1930) || *((_DWORD *)this + 44 * v442 + 1931))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v185, 520, 0, 0x3FFFFFFFFFFLL, 32, v187, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 260) = 0;
  uint64_t v188 = *((void *)this + 33);
  int v189 = *(_DWORD *)(v188 + 260);
  *(_DWORD *)(v188 + 260) = 0;
  *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFF00;
  uint64_t v190 = *((void *)this + 33);
  int v191 = *(_DWORD *)(v190 + 260);
  *(_DWORD *)(v190 + 260) = v189;
  if (*((void *)this + 1430) || *((_DWORD *)this + 2898) || *((_DWORD *)this + 2899))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1430, 260, 0, 0xFFFFFFFFLL, 8, v191, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 524) = 0;
  int v192 = *(_DWORD *)(*(void *)v448 + 524);
  *(_DWORD *)(*(void *)v448 + 524) = 0;
  *(_DWORD *)(*(void *)v448 + 524) ^= 0x3FFu;
  int v193 = *(_DWORD *)(*(void *)v448 + 524);
  *(_DWORD *)(*(void *)v448 + 524) = v192;
  if (*((void *)this + 1430) || *((_DWORD *)this + 2898) || *((_DWORD *)this + 2899))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1430, 524, 0, 0x3FFFFFFFFFFLL, 32, v193, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 264) = 0;
  uint64_t v194 = *((void *)this + 33);
  int v195 = *(_DWORD *)(v194 + 264);
  *(_DWORD *)(v194 + 264) = 0;
  *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFF00;
  uint64_t v196 = *((void *)this + 33);
  int v197 = *(_DWORD *)(v196 + 264);
  *(_DWORD *)(v196 + 264) = v195;
  if (*((void *)this + 1452) || *((_DWORD *)this + 2942) || *((_DWORD *)this + 2943))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1452, 264, 0, 0xFFFFFFFFLL, 8, v197, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 528) = 0;
  int v198 = *(_DWORD *)(*(void *)v448 + 528);
  *(_DWORD *)(*(void *)v448 + 528) = 0;
  *(_DWORD *)(*(void *)v448 + 528) ^= 0x3FFu;
  int v199 = *(_DWORD *)(*(void *)v448 + 528);
  *(_DWORD *)(*(void *)v448 + 528) = v198;
  if (*((void *)this + 1452) || *((_DWORD *)this + 2942) || *((_DWORD *)this + 2943))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1452, 528, 0, 0x3FFFFFFFFFFLL, 32, v199, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 268) = 0;
  *(_DWORD *)(*((void *)this + 33) + 532) = 0;
  *(_DWORD *)(*((void *)this + 33) + 272) = 0;
  *(_DWORD *)(*((void *)this + 33) + 536) = 0;
  *(_DWORD *)(*((void *)this + 33) + 276) = 0;
  *(_DWORD *)(*((void *)this + 33) + 540) = 0;
  *(_DWORD *)(*((void *)this + 33) + 280) = 0;
  *(_DWORD *)(*((void *)this + 33) + 544) = 0;
  uint64_t v200 = *((void *)this + 33);
  if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
  {
    int v201 = *(_DWORD *)(v200 + 272);
    *(_DWORD *)(v200 + 272) = 0;
    *(_DWORD *)(*(void *)v448 + 272) ^= 0xFFFFFF80;
    int v202 = *(_DWORD *)(*(void *)v448 + 272);
    *(_DWORD *)(*(void *)v448 + 272) = v201;
    long long v204 = (void *)(v433 + 8);
    uint64_t v203 = *(void *)(v433 + 8);
    if (v436)
    {
      if (v203 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v433 + 8), 272, *(_DWORD *)(v433 + 68), 0xFFFFFFFFLL, 7, v202, 4);
        if (result) {
          return result;
        }
      }
      int v205 = *(_DWORD *)(*(void *)v448 + 536);
      *(_DWORD *)(*(void *)v448 + 536) = 0;
      *(_DWORD *)(*(void *)v448 + 536) ^= 0x3FFu;
      int v206 = *(_DWORD *)(*(void *)v448 + 536);
      *(_DWORD *)(*(void *)v448 + 536) = v205;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 536, *(_DWORD *)(v433 + 68), 0x3FFFFFFFFFFLL, 32, v206, 4);
        if (result) {
          return result;
        }
      }
      int v207 = *(_DWORD *)(*(void *)v448 + 268);
      *(_DWORD *)(*(void *)v448 + 268) = 0;
      *(_DWORD *)(*(void *)v448 + 268) ^= 0xFFFFFF80;
      int v208 = *(_DWORD *)(*(void *)v448 + 268);
      *(_DWORD *)(*(void *)v448 + 268) = v207;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 268, *(_DWORD *)(v433 + 80), 0xFFFFFFFFLL, 7, v208, 4);
        if (result) {
          return result;
        }
      }
      int v209 = *(_DWORD *)(*(void *)v448 + 532);
      *(_DWORD *)(*(void *)v448 + 532) = 0;
      *(_DWORD *)(*(void *)v448 + 532) ^= 0x3FFu;
      int v210 = *(_DWORD *)(*(void *)v448 + 532);
      *(_DWORD *)(*(void *)v448 + 532) = v209;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 532, *(_DWORD *)(v433 + 80), 0x3FFFFFFFFFFLL, 32, v210, 4);
        if (result) {
          return result;
        }
      }
      if (v440)
      {
        int v211 = *(_DWORD *)(*(void *)v448 + 280);
        *(_DWORD *)(*(void *)v448 + 280) = 0;
        *(_DWORD *)(*(void *)v448 + 280) ^= 0xFFFFFF80;
        int v212 = *(_DWORD *)(*(void *)v448 + 280);
        *(_DWORD *)(*(void *)v448 + 280) = v211;
        if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 280, *(_DWORD *)(v439 + 56), 0xFFFFFFFFLL, 7, v212, 4);
          if (result) {
            return result;
          }
        }
        int v213 = *(_DWORD *)(*(void *)v448 + 544);
        *(_DWORD *)(*(void *)v448 + 544) = 0;
        *(_DWORD *)(*(void *)v448 + 544) ^= 0x3FFu;
        int v214 = *(_DWORD *)(*(void *)v448 + 544);
        *(_DWORD *)(*(void *)v448 + 544) = v213;
        if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 544, *(_DWORD *)(v439 + 56), 0x3FFFFFFFFFFLL, 32, v214, 4);
          if (result) {
            return result;
          }
        }
        int v215 = *(_DWORD *)(*(void *)v448 + 276);
        *(_DWORD *)(*(void *)v448 + 276) = 0;
        *(_DWORD *)(*(void *)v448 + 276) ^= 0xFFFFFF80;
        int v216 = *(_DWORD *)(*(void *)v448 + 276);
        *(_DWORD *)(*(void *)v448 + 276) = v215;
        if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 276, *(_DWORD *)(v439 + 68), 0xFFFFFFFFLL, 7, v216, 4);
          if (result) {
            return result;
          }
        }
        int v217 = *(_DWORD *)(*(void *)v448 + 540);
        *(_DWORD *)(*(void *)v448 + 540) = 0;
        *(_DWORD *)(*(void *)v448 + 540) ^= 0x3FFu;
        int v218 = *(_DWORD *)(*(void *)v448 + 540);
        *(_DWORD *)(*(void *)v448 + 540) = v217;
        if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
        {
          BOOL v219 = (void *)v439;
          int v220 = *(_DWORD *)(v439 + 68);
          BOOL v221 = this;
LABEL_311:
          int v243 = 540;
LABEL_312:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v221, v219, v243, v220, 0x3FFFFFFFFFFLL, 32, v218, 4);
          if (result) {
            return result;
          }
        }
      }
    }
    else
    {
      if (v203 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v433 + 8), 272, *(_DWORD *)(v433 + 60), 0xFFFFFFFFLL, 7, v202, 4);
        if (result) {
          return result;
        }
      }
      int v244 = *(_DWORD *)(*(void *)v448 + 280);
      *(_DWORD *)(*(void *)v448 + 280) = 0;
      *(_DWORD *)(*(void *)v448 + 280) ^= 0xFFFFFF80;
      int v245 = *(_DWORD *)(*(void *)v448 + 280);
      *(_DWORD *)(*(void *)v448 + 280) = v244;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 280, *(_DWORD *)(v433 + 64), 0xFFFFFFFFLL, 7, v245, 4);
        if (result) {
          return result;
        }
      }
      int v246 = *(_DWORD *)(*(void *)v448 + 268);
      *(_DWORD *)(*(void *)v448 + 268) = 0;
      *(_DWORD *)(*(void *)v448 + 268) ^= 0xFFFFFF80;
      int v247 = *(_DWORD *)(*(void *)v448 + 268);
      *(_DWORD *)(*(void *)v448 + 268) = v246;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 268, *(_DWORD *)(v433 + 72), 0xFFFFFFFFLL, 7, v247, 4);
        if (result) {
          return result;
        }
      }
      int v248 = *(_DWORD *)(*(void *)v448 + 276);
      *(_DWORD *)(*(void *)v448 + 276) = 0;
      *(_DWORD *)(*(void *)v448 + 276) ^= 0xFFFFFF80;
      int v249 = *(_DWORD *)(*(void *)v448 + 276);
      *(_DWORD *)(*(void *)v448 + 276) = v248;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 276, *(_DWORD *)(v433 + 76), 0xFFFFFFFFLL, 7, v249, 4);
        if (result) {
          return result;
        }
      }
      int v250 = *(_DWORD *)(*(void *)v448 + 536);
      *(_DWORD *)(*(void *)v448 + 536) = 0;
      *(_DWORD *)(*(void *)v448 + 536) ^= 0x3FFu;
      int v251 = *(_DWORD *)(*(void *)v448 + 536);
      *(_DWORD *)(*(void *)v448 + 536) = v250;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 536, *(_DWORD *)(v433 + 60), 0x3FFFFFFFFFFLL, 32, v251, 4);
        if (result) {
          return result;
        }
      }
      int v252 = *(_DWORD *)(*(void *)v448 + 544);
      *(_DWORD *)(*(void *)v448 + 544) = 0;
      *(_DWORD *)(*(void *)v448 + 544) ^= 0x3FFu;
      int v253 = *(_DWORD *)(*(void *)v448 + 544);
      *(_DWORD *)(*(void *)v448 + 544) = v252;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 544, *(_DWORD *)(v433 + 64), 0x3FFFFFFFFFFLL, 32, v253, 4);
        if (result) {
          return result;
        }
      }
      int v254 = *(_DWORD *)(*(void *)v448 + 532);
      *(_DWORD *)(*(void *)v448 + 532) = 0;
      *(_DWORD *)(*(void *)v448 + 532) ^= 0x3FFu;
      int v255 = *(_DWORD *)(*(void *)v448 + 532);
      *(_DWORD *)(*(void *)v448 + 532) = v254;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 532, *(_DWORD *)(v433 + 72), 0x3FFFFFFFFFFLL, 32, v255, 4);
        if (result) {
          return result;
        }
      }
      int v256 = *(_DWORD *)(*(void *)v448 + 540);
      *(_DWORD *)(*(void *)v448 + 540) = 0;
      *(_DWORD *)(*(void *)v448 + 540) ^= 0x3FFu;
      int v218 = *(_DWORD *)(*(void *)v448 + 540);
      *(_DWORD *)(*(void *)v448 + 540) = v256;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        int v220 = *(_DWORD *)(v433 + 76);
        BOOL v221 = this;
        BOOL v219 = (void *)(v433 + 8);
        goto LABEL_311;
      }
    }
  }
  else
  {
    int v222 = *(_DWORD *)(v200 + 268);
    *(_DWORD *)(v200 + 268) = 0;
    *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFF80;
    uint64_t v223 = *((void *)this + 33);
    int v224 = *(_DWORD *)(v223 + 268);
    *(_DWORD *)(v223 + 268) = v222;
    BOOL v225 = (void *)((char *)this + 176 * v442 + 528);
    if (*v225 || *((_DWORD *)this + 44 * v442 + 170) || *((_DWORD *)this + 44 * v442 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v442 + 66, 268, 0, 0xFFFFFFFFLL, 7, v224, 4);
      if (result) {
        return result;
      }
    }
    int v226 = *(_DWORD *)(*(void *)v448 + 532);
    *(_DWORD *)(*(void *)v448 + 532) = 0;
    *(_DWORD *)(*(void *)v448 + 532) ^= 0x3FFu;
    int v227 = *(_DWORD *)(*(void *)v448 + 532);
    *(_DWORD *)(*(void *)v448 + 532) = v226;
    if (*v225 || *((_DWORD *)this + 44 * v442 + 170) || *((_DWORD *)this + 44 * v442 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v225, 532, 0, 0x3FFFFFFFFFFLL, 32, v227, 4);
      if (result) {
        return result;
      }
    }
    int v228 = *(_DWORD *)(*(void *)v448 + 272);
    *(_DWORD *)(*(void *)v448 + 272) = 0;
    *(_DWORD *)(*(void *)v448 + 272) ^= 0xFFFFFF80;
    int v229 = *(_DWORD *)(*(void *)v448 + 272);
    *(_DWORD *)(*(void *)v448 + 272) = v228;
    unint64_t v230 = (void *)(v433 + 8);
    if (*(void *)(v433 + 8) || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v433 + 8), 272, *(_DWORD *)(v433 + 60), 0xFFFFFFFFLL, 7, v229, 4);
      if (result) {
        return result;
      }
    }
    int v231 = *(_DWORD *)(*(void *)v448 + 536);
    *(_DWORD *)(*(void *)v448 + 536) = 0;
    *(_DWORD *)(*(void *)v448 + 536) ^= 0x3FFu;
    int v232 = *(_DWORD *)(*(void *)v448 + 536);
    *(_DWORD *)(*(void *)v448 + 536) = v231;
    if (*v230 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v230, 536, *(_DWORD *)(v433 + 60), 0x3FFFFFFFFFFLL, 32, v232, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v233 = *((void *)this + 33);
    int v234 = *(_DWORD *)(v233 + 276);
    *(_DWORD *)(v233 + 276) = 0;
    *(_DWORD *)(*((void *)this + 33) + 276) ^= 0xFFFFFF80;
    uint64_t v235 = *((void *)this + 33);
    int v236 = *(_DWORD *)(v235 + 276);
    *(_DWORD *)(v235 + 276) = v234;
    uint64_t v237 = (void *)((char *)this + 176 * v442 + 3344);
    if (*v237 || *((_DWORD *)this + 44 * v442 + 874) || *((_DWORD *)this + 44 * v442 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v442 + 418, 276, 0, 0xFFFFFFFFLL, 7, v236, 4);
      if (result) {
        return result;
      }
    }
    int v238 = *(_DWORD *)(*(void *)v448 + 540);
    *(_DWORD *)(*(void *)v448 + 540) = 0;
    *(_DWORD *)(*(void *)v448 + 540) ^= 0x3FFu;
    int v239 = *(_DWORD *)(*(void *)v448 + 540);
    *(_DWORD *)(*(void *)v448 + 540) = v238;
    if (*v237 || *((_DWORD *)this + 44 * v442 + 874) || *((_DWORD *)this + 44 * v442 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v237, 540, 0, 0x3FFFFFFFFFFLL, 32, v239, 4);
      if (result) {
        return result;
      }
    }
    int v240 = *(_DWORD *)(*(void *)v448 + 280);
    *(_DWORD *)(*(void *)v448 + 280) = 0;
    *(_DWORD *)(*(void *)v448 + 280) ^= 0xFFFFFF80;
    int v241 = *(_DWORD *)(*(void *)v448 + 280);
    *(_DWORD *)(*(void *)v448 + 280) = v240;
    if (*v230 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v230, 280, *(_DWORD *)(v433 + 64), 0xFFFFFFFFLL, 7, v241, 4);
      if (result) {
        return result;
      }
    }
    int v242 = *(_DWORD *)(*(void *)v448 + 544);
    *(_DWORD *)(*(void *)v448 + 544) = 0;
    *(_DWORD *)(*(void *)v448 + 544) ^= 0x3FFu;
    int v218 = *(_DWORD *)(*(void *)v448 + 544);
    *(_DWORD *)(*(void *)v448 + 544) = v242;
    if (*v230 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
    {
      int v220 = *(_DWORD *)(v433 + 64);
      BOOL v221 = this;
      BOOL v219 = (void *)(v433 + 8);
      int v243 = 544;
      goto LABEL_312;
    }
  }
  if (*(_DWORD *)(v451 + 88) & 0x2000 | v434)
  {
    *((_DWORD *)this + v442 + 116) = 0;
    *(_DWORD *)(*((void *)this + 33) + 284) = 0;
    if (!v434) {
      goto LABEL_429;
    }
    uint64_t v257 = 0;
    unsigned int v258 = (uint64_t *)v465;
    unsigned int v259 = (void **)v464;
    v450 = (void **)v463;
    while (1)
    {
      uint64_t v260 = *v258;
      if (!*v258 || !*(void *)(v260 + 48)) {
        return 0xFFFFFFFFLL;
      }
      int v261 = v446;
      if (v446)
      {
        uint64_t v262 = *(unsigned int *)(v260 + 44);
        *(void *)buf = 0;
        if (((*(uint64_t (**)(void, uint64_t, uint8_t *))(**((void **)this + 32) + 304))(*((void *)this + 32), v262, buf) & 1) == 0)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          __int16 v452 = 0;
          unsigned int v53 = &_os_log_internal;
          unsigned int v54 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
          unint64_t v135 = (uint8_t *)&v452;
          uint32_t v136 = 2;
          goto LABEL_124;
        }
        *(void *)(v260 + 48) = *(void *)buf + 8;
        int v261 = 0x2000000;
      }
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) = *(_DWORD *)(*((void *)this + 33) + v257 + 284) & 0xFFFFFFF | ((v434 << 28) - 0x10000000);
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) &= 0xF3FFFFFF;
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) = *(_DWORD *)(*((void *)this + 33) + v257 + 284) & 0xFDFFFFFF | v261;
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) |= 0x1000000u;
      int v263 = v435 - *(_DWORD *)(v260 + 12);
      int v264 = v263 & 0x1FFFF;
      if (v263 < -32768) {
        int v264 = 98304;
      }
      if (v263 <= 0x8000) {
        int v265 = v264;
      }
      else {
        int v265 = 0x8000;
      }
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) = *(_DWORD *)(*((void *)this + 33) + v257 + 284) & 0xFFFE0000 | v265;
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) = *(_DWORD *)(*((void *)this + 33) + v257 + 284) & 0xFFFDFFFF | ((*(_DWORD *)(v260 + 20) == 2) << 17);
      *(_DWORD *)(*((void *)this + 33) + v257 + 316) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 548) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 580) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 380) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 612) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 412) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 644) = 0;
      uint64_t v266 = *((void *)this + 33);
      if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
      {
        int v267 = v257 + 348;
        uint64_t v268 = v266 + v257;
        int v269 = *(_DWORD *)(v268 + 348);
        *(_DWORD *)(v268 + 348) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 348) ^= 0xFFFFFF80;
        uint64_t v270 = *(void *)v448 + v257;
        int v271 = *(_DWORD *)(v270 + 348);
        *(_DWORD *)(v270 + 348) = v269;
        int v272 = *(uint64_t **)(v260 + 48);
        uint64_t v273 = *v272;
        if (v436)
        {
          if (v273 || *((_DWORD *)v272 + 38) || *((_DWORD *)v272 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v272, v267, *((_DWORD *)v272 + 15), 0xFFFFFFFFLL, 7, v271, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v274 = *(void *)v448 + v257;
          int v275 = *(_DWORD *)(v274 + 580);
          *(_DWORD *)(v274 + 580) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 580) ^= 0x3FFu;
          uint64_t v276 = *(void *)v448 + v257;
          int v277 = *(_DWORD *)(v276 + 580);
          *(_DWORD *)(v276 + 580) = v275;
          uint64_t v278 = *(void *)(v260 + 48);
          if (*(void *)v278 || *(_DWORD *)(v278 + 152) || *(_DWORD *)(v278 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v278, (int)v257 + 580, *(_DWORD *)(v278 + 60), 0x3FFFFFFFFFFLL, 32, v277, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v279 = *(void *)v448 + v257;
          int v280 = *(_DWORD *)(v279 + 316);
          *(_DWORD *)(v279 + 316) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 316) ^= 0xFFFFFF80;
          uint64_t v281 = *(void *)v448 + v257;
          int v282 = *(_DWORD *)(v281 + 316);
          *(_DWORD *)(v281 + 316) = v280;
          uint64_t v283 = *(void *)(v260 + 48);
          if (*(void *)v283 || *(_DWORD *)(v283 + 152) || *(_DWORD *)(v283 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v283, (int)v257 + 316, *(_DWORD *)(v283 + 72), 0xFFFFFFFFLL, 7, v282, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v284 = *(void *)v448 + v257;
          int v285 = *(_DWORD *)(v284 + 548);
          *(_DWORD *)(v284 + 548) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 548) ^= 0x3FFu;
          uint64_t v286 = *(void *)v448 + v257;
          int v287 = *(_DWORD *)(v286 + 548);
          *(_DWORD *)(v286 + 548) = v285;
          uint64_t v288 = *(void *)(v260 + 48);
          if (*(void *)v288 || *(_DWORD *)(v288 + 152) || *(_DWORD *)(v288 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v288, (int)v257 + 548, *(_DWORD *)(v288 + 72), 0x3FFFFFFFFFFLL, 32, v287, 4);
            if (result) {
              return result;
            }
          }
          if (v440)
          {
            uint64_t v289 = *(void *)v448 + v257;
            int v290 = *(_DWORD *)(v289 + 412);
            *(_DWORD *)(v289 + 412) = 0;
            *(_DWORD *)(*(void *)v448 + v257 + 412) ^= 0xFFFFFF80;
            uint64_t v291 = *(void *)v448 + v257;
            int v292 = *(_DWORD *)(v291 + 412);
            *(_DWORD *)(v291 + 412) = v290;
            if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, (int)v257 + 412, *(_DWORD *)(v439 + 56), 0xFFFFFFFFLL, 7, v292, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v293 = *(void *)v448 + v257;
            int v294 = *(_DWORD *)(v293 + 644);
            *(_DWORD *)(v293 + 644) = 0;
            *(_DWORD *)(*(void *)v448 + v257 + 644) ^= 0x3FFu;
            uint64_t v295 = *(void *)v448 + v257;
            int v296 = *(_DWORD *)(v295 + 644);
            *(_DWORD *)(v295 + 644) = v294;
            if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, (int)v257 + 644, *(_DWORD *)(v439 + 56), 0x3FFFFFFFFFFLL, 32, v296, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v297 = *(void *)v448 + v257;
            int v298 = *(_DWORD *)(v297 + 380);
            *(_DWORD *)(v297 + 380) = 0;
            *(_DWORD *)(*(void *)v448 + v257 + 380) ^= 0xFFFFFF80;
            uint64_t v299 = *(void *)v448 + v257;
            int v300 = *(_DWORD *)(v299 + 380);
            *(_DWORD *)(v299 + 380) = v298;
            if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, (int)v257 + 380, *(_DWORD *)(v439 + 68), 0xFFFFFFFFLL, 7, v300, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v301 = *(void *)v448 + v257;
            int v302 = *(_DWORD *)(v301 + 612);
            *(_DWORD *)(v301 + 612) = 0;
            *(_DWORD *)(*(void *)v448 + v257 + 612) ^= 0x3FFu;
            uint64_t v303 = *(void *)v448 + v257;
            int v304 = *(_DWORD *)(v303 + 612);
            *(_DWORD *)(v303 + 612) = v302;
            if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
            {
              int v305 = v257 + 612;
              uint64_t v306 = v439;
LABEL_426:
              int v343 = *(_DWORD *)(v306 + 68);
LABEL_427:
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v306, v305, v343, 0x3FFFFFFFFFFLL, 32, v304, 4);
              if (result) {
                return result;
              }
            }
          }
        }
        else
        {
          if (v273 || *((_DWORD *)v272 + 38) || *((_DWORD *)v272 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v272, v267, *((_DWORD *)v272 + 13), 0xFFFFFFFFLL, 7, v271, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v344 = *(void *)v448 + v257;
          int v345 = *(_DWORD *)(v344 + 412);
          *(_DWORD *)(v344 + 412) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 412) ^= 0xFFFFFF80;
          uint64_t v346 = *(void *)v448 + v257;
          int v347 = *(_DWORD *)(v346 + 412);
          *(_DWORD *)(v346 + 412) = v345;
          uint64_t v348 = *(void *)(v260 + 48);
          if (*(void *)v348 || *(_DWORD *)(v348 + 152) || *(_DWORD *)(v348 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v348, (int)v257 + 412, *(_DWORD *)(v348 + 56), 0xFFFFFFFFLL, 7, v347, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v349 = *(void *)v448 + v257;
          int v350 = *(_DWORD *)(v349 + 316);
          *(_DWORD *)(v349 + 316) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 316) ^= 0xFFFFFF80;
          uint64_t v351 = *(void *)v448 + v257;
          int v352 = *(_DWORD *)(v351 + 316);
          *(_DWORD *)(v351 + 316) = v350;
          uint64_t v353 = *(void *)(v260 + 48);
          if (*(void *)v353 || *(_DWORD *)(v353 + 152) || *(_DWORD *)(v353 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v353, (int)v257 + 316, *(_DWORD *)(v353 + 64), 0xFFFFFFFFLL, 7, v352, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v354 = *(void *)v448 + v257;
          int v355 = *(_DWORD *)(v354 + 380);
          *(_DWORD *)(v354 + 380) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 380) ^= 0xFFFFFF80;
          uint64_t v356 = *(void *)v448 + v257;
          int v357 = *(_DWORD *)(v356 + 380);
          *(_DWORD *)(v356 + 380) = v355;
          uint64_t v358 = *(void *)(v260 + 48);
          if (*(void *)v358 || *(_DWORD *)(v358 + 152) || *(_DWORD *)(v358 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v358, (int)v257 + 380, *(_DWORD *)(v358 + 68), 0xFFFFFFFFLL, 7, v357, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v359 = *(void *)v448 + v257;
          int v360 = *(_DWORD *)(v359 + 580);
          *(_DWORD *)(v359 + 580) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 580) ^= 0x3FFu;
          uint64_t v361 = *(void *)v448 + v257;
          int v362 = *(_DWORD *)(v361 + 580);
          *(_DWORD *)(v361 + 580) = v360;
          uint64_t v363 = *(void *)(v260 + 48);
          if (*(void *)v363 || *(_DWORD *)(v363 + 152) || *(_DWORD *)(v363 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v363, (int)v257 + 580, *(_DWORD *)(v363 + 52), 0x3FFFFFFFFFFLL, 32, v362, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v364 = *(void *)v448 + v257;
          int v365 = *(_DWORD *)(v364 + 644);
          *(_DWORD *)(v364 + 644) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 644) ^= 0x3FFu;
          uint64_t v366 = *(void *)v448 + v257;
          int v367 = *(_DWORD *)(v366 + 644);
          *(_DWORD *)(v366 + 644) = v365;
          uint64_t v368 = *(void *)(v260 + 48);
          if (*(void *)v368 || *(_DWORD *)(v368 + 152) || *(_DWORD *)(v368 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v368, (int)v257 + 644, *(_DWORD *)(v368 + 56), 0x3FFFFFFFFFFLL, 32, v367, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v369 = *(void *)v448 + v257;
          int v370 = *(_DWORD *)(v369 + 548);
          *(_DWORD *)(v369 + 548) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 548) ^= 0x3FFu;
          uint64_t v371 = *(void *)v448 + v257;
          int v372 = *(_DWORD *)(v371 + 548);
          *(_DWORD *)(v371 + 548) = v370;
          uint64_t v373 = *(void *)(v260 + 48);
          if (*(void *)v373 || *(_DWORD *)(v373 + 152) || *(_DWORD *)(v373 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v373, (int)v257 + 548, *(_DWORD *)(v373 + 64), 0x3FFFFFFFFFFLL, 32, v372, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v374 = *(void *)v448 + v257;
          int v375 = *(_DWORD *)(v374 + 612);
          *(_DWORD *)(v374 + 612) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 612) ^= 0x3FFu;
          uint64_t v376 = *(void *)v448 + v257;
          int v304 = *(_DWORD *)(v376 + 612);
          *(_DWORD *)(v376 + 612) = v375;
          uint64_t v306 = *(void *)(v260 + 48);
          if (*(void *)v306 || *(_DWORD *)(v306 + 152) || *(_DWORD *)(v306 + 156))
          {
            int v305 = v257 + 612;
            goto LABEL_426;
          }
        }
      }
      else
      {
        uint64_t v307 = v266 + v257;
        int v308 = *(_DWORD *)(v307 + 316);
        *(_DWORD *)(v307 + 316) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 316) ^= 0xFFFFFF80;
        uint64_t v309 = *(void *)v448 + v257;
        int v310 = *(_DWORD *)(v309 + 316);
        *(_DWORD *)(v309 + 316) = v308;
        uint64_t v311 = (uint64_t)*v259;
        if (**v259 || *(_DWORD *)(v311 + 152) || *(_DWORD *)(v311 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v259, (int)v257 + 316, 0, 0xFFFFFFFFLL, 7, v310, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v312 = *(void *)v448 + v257;
        int v313 = *(_DWORD *)(v312 + 548);
        *(_DWORD *)(v312 + 548) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 548) ^= 0x3FFu;
        uint64_t v314 = *(void *)v448 + v257;
        int v315 = *(_DWORD *)(v314 + 548);
        *(_DWORD *)(v314 + 548) = v313;
        if (*(void *)v311 || *(_DWORD *)(v311 + 152) || *(_DWORD *)(v311 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v311, (int)v257 + 548, 0, 0x3FFFFFFFFFFLL, 32, v315, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v316 = *(void *)v448 + v257;
        int v317 = *(_DWORD *)(v316 + 348);
        *(_DWORD *)(v316 + 348) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 348) ^= 0xFFFFFF80;
        uint64_t v318 = *(void *)v448 + v257;
        int v319 = *(_DWORD *)(v318 + 348);
        *(_DWORD *)(v318 + 348) = v317;
        uint64_t v320 = *(void *)(v260 + 48);
        if (*(void *)v320 || *(_DWORD *)(v320 + 152) || *(_DWORD *)(v320 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v320, (int)v257 + 348, *(_DWORD *)(v320 + 52), 0xFFFFFFFFLL, 7, v319, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v321 = *(void *)v448 + v257;
        int v322 = *(_DWORD *)(v321 + 580);
        *(_DWORD *)(v321 + 580) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 580) ^= 0x3FFu;
        uint64_t v323 = *(void *)v448 + v257;
        int v324 = *(_DWORD *)(v323 + 580);
        *(_DWORD *)(v323 + 580) = v322;
        uint64_t v325 = *(void *)(v260 + 48);
        if (*(void *)v325 || *(_DWORD *)(v325 + 152) || *(_DWORD *)(v325 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v325, (int)v257 + 580, *(_DWORD *)(v325 + 52), 0x3FFFFFFFFFFLL, 32, v324, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v326 = *(void *)v448 + v257;
        int v327 = *(_DWORD *)(v326 + 380);
        *(_DWORD *)(v326 + 380) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 380) ^= 0xFFFFFF80;
        uint64_t v328 = *(void *)v448 + v257;
        int v329 = *(_DWORD *)(v328 + 380);
        *(_DWORD *)(v328 + 380) = v327;
        uint64_t v330 = (uint64_t)*v450;
        if (**v450 || *(_DWORD *)(v330 + 152) || *(_DWORD *)(v330 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v450, (int)v257 + 380, 0, 0xFFFFFFFFLL, 7, v329, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v331 = *(void *)v448 + v257;
        int v332 = *(_DWORD *)(v331 + 612);
        *(_DWORD *)(v331 + 612) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 612) ^= 0x3FFu;
        uint64_t v333 = *(void *)v448 + v257;
        int v334 = *(_DWORD *)(v333 + 612);
        *(_DWORD *)(v333 + 612) = v332;
        if (*(void *)v330 || *(_DWORD *)(v330 + 152) || *(_DWORD *)(v330 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v330, (int)v257 + 612, 0, 0x3FFFFFFFFFFLL, 32, v334, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v335 = *(void *)v448 + v257;
        int v336 = *(_DWORD *)(v335 + 412);
        *(_DWORD *)(v335 + 412) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 412) ^= 0xFFFFFF80;
        uint64_t v337 = *(void *)v448 + v257;
        int v338 = *(_DWORD *)(v337 + 412);
        *(_DWORD *)(v337 + 412) = v336;
        uint64_t v339 = *(void *)(v260 + 48);
        if (*(void *)v339 || *(_DWORD *)(v339 + 152) || *(_DWORD *)(v339 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v339, (int)v257 + 412, *(_DWORD *)(v339 + 56), 0xFFFFFFFFLL, 7, v338, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v340 = *(void *)v448 + v257;
        int v341 = *(_DWORD *)(v340 + 644);
        *(_DWORD *)(v340 + 644) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 644) ^= 0x3FFu;
        uint64_t v342 = *(void *)v448 + v257;
        int v304 = *(_DWORD *)(v342 + 644);
        *(_DWORD *)(v342 + 644) = v341;
        uint64_t v306 = *(void *)(v260 + 48);
        if (*(void *)v306 || *(_DWORD *)(v306 + 152) || *(_DWORD *)(v306 + 156))
        {
          int v305 = v257 + 644;
          int v343 = *(_DWORD *)(v306 + 56);
          goto LABEL_427;
        }
      }
      v257 += 4;
      ++v258;
      ++v259;
      ++v450;
      if (4 * v434 == v257) {
        goto LABEL_429;
      }
    }
  }
  *(_DWORD *)(v451 + 88) |= 0x2000u;
  *((_DWORD *)this + v442 + 116) = 1;
  *(_DWORD *)(*((void *)this + 33) + 284) = 0;
LABEL_429:
  *(_DWORD *)(*(void *)v448 + 444) = 0;
  *(_DWORD *)(*(void *)v448 + 448) = 0;
  *(_DWORD *)(*(void *)v448 + 452) = 0;
  *(_DWORD *)(*(void *)v448 + 456) = 0;
  if (!v447) {
    goto LABEL_487;
  }
  uint64_t v377 = *((void *)this + 32);
  if (v437 && v438 == 2)
  {
    int v378 = *(_DWORD *)(*(void *)(v377 + 8360) + 60);
    uint64_t v379 = *((void *)this + 33);
    int v380 = *(_DWORD *)(v379 + 444);
    *(_DWORD *)(v379 + 444) = 0;
    *(_DWORD *)(*((void *)this + 33) + 444) ^= 0xFFFFFFC0;
    uint64_t v381 = *((void *)this + 33);
    int v382 = *(_DWORD *)(v381 + 444);
    *(_DWORD *)(v381 + 444) = v380;
    uint64_t v383 = *(void *)(*((void *)this + 32) + 8360);
    if (*(void *)v383 || *(_DWORD *)(v383 + 152) || *(_DWORD *)(v383 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v383, 444, v378, 0xFFFFFFFFLL, 6, v382, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v384 = *((void *)this + 33);
    int v385 = *(_DWORD *)(v384 + 676);
    *(_DWORD *)(v384 + 676) = 0;
    *(_DWORD *)(*((void *)this + 33) + 676) ^= 0x3FFu;
    uint64_t v386 = *((void *)this + 33);
    int v387 = *(_DWORD *)(v386 + 676);
    *(_DWORD *)(v386 + 676) = v385;
    uint64_t v388 = *(void *)(*((void *)this + 32) + 8360);
    if (*(void *)v388 || *(_DWORD *)(v388 + 152) || *(_DWORD *)(v388 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v388, 676, v378, 0x3FFFFFFFFFFLL, 32, v387, 4);
      if (result) {
        return result;
      }
    }
    if (v440)
    {
      int v389 = *(_DWORD *)(v439 + 56);
      int v390 = *(_DWORD *)(*(void *)v448 + 448);
      *(_DWORD *)(*(void *)v448 + 448) = 0;
      *(_DWORD *)(*(void *)v448 + 448) ^= 0xFFFFFFC0;
      int v391 = *(_DWORD *)(*(void *)v448 + 448);
      *(_DWORD *)(*(void *)v448 + 448) = v390;
      if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 448, v389, 0xFFFFFFFFLL, 6, v391, 4);
        if (result) {
          return result;
        }
      }
      int v392 = *(_DWORD *)(*(void *)v448 + 680);
      *(_DWORD *)(*(void *)v448 + 680) = 0;
      *(_DWORD *)(*(void *)v448 + 680) ^= 0x3FFu;
      int v393 = *(_DWORD *)(*(void *)v448 + 680);
      *(_DWORD *)(*(void *)v448 + 680) = v392;
      if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 680, v389, 0x3FFFFFFFFFFLL, 32, v393, 4);
        if (result) {
          return result;
        }
      }
    }
    if (v441)
    {
      *(_DWORD *)(*((void *)this + 33) + 452) = *(_DWORD *)(*((void *)this + 33) + 452) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 84) >> 6) & 0xFFF) << 6);
      if (v440)
      {
        uint64_t v394 = v439;
LABEL_485:
        v423 = (_DWORD *)(v394 + 80);
LABEL_486:
        *(_DWORD *)(*(void *)v448 + 456) = *(_DWORD *)(*(void *)v448 + 456) & 0xFFF8003F | (((*v423 >> 6) & 0x1FFF) << 6);
      }
LABEL_487:
      uint64_t v424 = *((void *)this + 32);
      if (*(_DWORD *)(v424 + 2360) != 1) {
        return 0;
      }
      uint64_t v425 = *(void *)v448;
      *(_DWORD *)(*(void *)v448 + 780) = *(_DWORD *)(*(void *)v448 + 780) & 0xFFFFFFFE | *(_DWORD *)(v424 + 2508) & 1;
      if (*(_DWORD *)(v424 + 2508))
      {
        *(_DWORD *)(v425 + 2780) = 0x10000000;
        *(_DWORD *)(v425 + 2784) = *(_DWORD *)(v424 + 2368);
        *(void *)(v425 + 2792) = 0;
        *(_DWORD *)(v425 + 2788) = 0;
        *(_OWORD *)(v425 + 2800) = *(_OWORD *)(v424 + 2372);
        long long v426 = *(_OWORD *)(v424 + 2388);
        *(_OWORD *)(v425 + 2832) = *(_OWORD *)(v424 + 2404);
        *(_OWORD *)(v425 + 2816) = v426;
      }
      *(_DWORD *)(*(void *)v448 + 780) = *(_DWORD *)(*(void *)v448 + 780) & 0xFFFFFFFD | (2
                                                                                                * (*(_DWORD *)(v424 + 2512) & 1));
      if (*(_DWORD *)(v424 + 2512))
      {
        *(_DWORD *)(v425 + 2848) = 0;
        char v427 = *(_DWORD *)(v424 + 2424);
        *(_DWORD *)(v425 + 2848) = (*(_DWORD *)(v424 + 2424) & 1) << 22;
        int v428 = ((*(_DWORD *)(v424 + 2420) & 1) << 23) | ((v427 & 1) << 22) | 0x20000000;
        *(_DWORD *)(v425 + 2848) = v428;
        *(_DWORD *)(v425 + 2848) = v428 | (*(_DWORD *)(v424 + 2364) == 0);
        long long v429 = *(_OWORD *)(v424 + 2428);
        long long v430 = *(_OWORD *)(v424 + 2444);
        *(_OWORD *)(v425 + 2884) = *(_OWORD *)(v424 + 2460);
        *(_OWORD *)(v425 + 2868) = v430;
        *(_OWORD *)(v425 + 2852) = v429;
      }
      *(_DWORD *)(*(void *)v448 + 780) = *(_DWORD *)(*(void *)v448 + 780) & 0xFFFFFFFB | (4
                                                                                                * (*(_DWORD *)(v424 + 2516) & 1));
      *(_DWORD *)(*(void *)v448 + 780) = *(_DWORD *)(*(void *)v448 + 780) & 0xFFFFFFF7 | (8
                                                                                                * (*(_DWORD *)(v424 + 2520) & 1));
      *(_DWORD *)(*(void *)v448 + 780) = *(_DWORD *)(*(void *)v448 + 780) & 0xFFFFFFEF | (16
                                                                                                * (*(_DWORD *)(v424 + 2524) & 1));
      if (!*(_DWORD *)(v424 + 2516)) {
        return 0;
      }
      *(_DWORD *)(v425 + 2904) = 0;
      if (*(_DWORD *)(v424 + 2476) == 2) {
        int v431 = 805306368;
      }
      else {
        int v431 = 813694976;
      }
      *(_DWORD *)(v425 + 2904) = v431;
      memcpy((void *)(v425 + 2908), (const void *)(v424 + 2480), 4 * *(unsigned int *)(v424 + 2476));
      uint64_t result = 0;
      *(_DWORD *)(v424 + 2516) = 0;
      return result;
    }
    if (CAHDecCatnipHevc::getSWRStride(this, *(unsigned __int16 *)(v451 + 160) - *(unsigned __int16 *)(v451 + 156) + 1, *(_DWORD *)(v34 + 23176 * v35 + 3636), *(_DWORD *)(v34 + 23176 * v35 + 3640), *(_DWORD *)(v34 + 23176 * v35 + 22852)))return 0xFFFFFFFFLL; {
    *(_DWORD *)(*((void *)this + 33) + 452) = *(_DWORD *)(*((void *)this + 33) + 452) & 0xFFFC003F | (((*((_DWORD *)this + 2956) >> 6) & 0xFFF) << 6);
    }
    if (!v440) {
      goto LABEL_487;
    }
LABEL_505:
    v423 = (_DWORD *)((char *)this + 11828);
    goto LABEL_486;
  }
  unsigned int v395 = *(unsigned __int8 *)(v377 + 3004);
  if (*(unsigned char *)(v377 + 3004))
  {
    unsigned int v395 = *(_DWORD *)(v377 + 3016);
    unsigned int v396 = *(_DWORD *)(v377 + 3020);
  }
  else
  {
    unsigned int v396 = 0;
  }
  uint64_t v397 = *(void *)(v377 + 8360);
  uint64_t v398 = *(unsigned int *)(v397 + 56);
  unint64_t v399 = *(unsigned int *)(v397 + 52) + (unint64_t)v395;
  uint64_t v400 = *((void *)this + 33);
  int v401 = *(_DWORD *)(v400 + 444);
  *(_DWORD *)(v400 + 444) = 0;
  *(_DWORD *)(*((void *)this + 33) + 444) ^= 0xFFFFFFC0;
  uint64_t v402 = *((void *)this + 33);
  int v403 = *(_DWORD *)(v402 + 444);
  *(_DWORD *)(v402 + 444) = v401;
  uint64_t v404 = *(void *)(*((void *)this + 32) + 8360);
  unint64_t v405 = HIDWORD(v399);
  if (!*(void *)v404 && !*(_DWORD *)(v404 + 152) && !*(_DWORD *)(v404 + 156)) {
    goto LABEL_508;
  }
  if (v405 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "populatePictureRegisters";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1238;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v404, 444, v399, 0xFFFFFFFFLL, 6, v403, 4);
  if (!result)
  {
LABEL_508:
    uint64_t v406 = *((void *)this + 33);
    int v407 = *(_DWORD *)(v406 + 676);
    *(_DWORD *)(v406 + 676) = 0;
    *(_DWORD *)(*((void *)this + 33) + 676) ^= 0x3FFu;
    uint64_t v408 = *((void *)this + 33);
    int v409 = *(_DWORD *)(v408 + 676);
    *(_DWORD *)(v408 + 676) = v407;
    uint64_t v410 = *(void *)(*((void *)this + 32) + 8360);
    if (!*(void *)v410 && !*(_DWORD *)(v410 + 152) && !*(_DWORD *)(v410 + 156)) {
      goto LABEL_509;
    }
    if (v405 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1240;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v410, 676, v399, 0x3FFFFFFFFFFLL, 32, v409, 4);
    if (!result)
    {
LABEL_509:
      unint64_t v411 = v398 + v396;
      uint64_t v412 = *((void *)this + 33);
      int v413 = *(_DWORD *)(v412 + 448);
      *(_DWORD *)(v412 + 448) = 0;
      *(_DWORD *)(*((void *)this + 33) + 448) ^= 0xFFFFFFC0;
      uint64_t v414 = *((void *)this + 33);
      int v415 = *(_DWORD *)(v414 + 448);
      *(_DWORD *)(v414 + 448) = v413;
      uint64_t v416 = *(void *)(*((void *)this + 32) + 8360);
      unint64_t v417 = HIDWORD(v411);
      if (!*(void *)v416 && !*(_DWORD *)(v416 + 152) && !*(_DWORD *)(v416 + 156)) {
        goto LABEL_510;
      }
      if (v417 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1243;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v416, 448, v411, 0xFFFFFFFFLL, 6, v415, 4);
      if (!result)
      {
LABEL_510:
        uint64_t v418 = *((void *)this + 33);
        int v419 = *(_DWORD *)(v418 + 680);
        *(_DWORD *)(v418 + 680) = 0;
        *(_DWORD *)(*((void *)this + 33) + 680) ^= 0x3FFu;
        uint64_t v420 = *((void *)this + 33);
        int v421 = *(_DWORD *)(v420 + 680);
        *(_DWORD *)(v420 + 680) = v419;
        uint64_t v422 = *(void *)(*((void *)this + 32) + 8360);
        if (!*(void *)v422 && !*(_DWORD *)(v422 + 152) && !*(_DWORD *)(v422 + 156)) {
          goto LABEL_483;
        }
        if (v417 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "populatePictureRegisters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1245;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v422, 680, v411, 0x3FFFFFFFFFFLL, 32, v421, 4);
        if (!result)
        {
LABEL_483:
          if (v441)
          {
            *(_DWORD *)(*((void *)this + 33) + 452) = *(_DWORD *)(*((void *)this + 33) + 452) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 76) >> 6) & 0xFFF) << 6);
            uint64_t v394 = *(void *)(*((void *)this + 32) + 8360);
            goto LABEL_485;
          }
          if (CAHDecCatnipHevc::getSWRStride(this, *(unsigned __int16 *)(v451 + 160) - *(unsigned __int16 *)(v451 + 156) + 1, *(_DWORD *)(v34 + 23176 * v35 + 3636), *(_DWORD *)(v34 + 23176 * v35 + 3640), *(_DWORD *)(v34 + 23176 * v35 + 22852)))return 0xFFFFFFFFLL; {
          *(_DWORD *)(*((void *)this + 33) + 452) = *(_DWORD *)(*((void *)this + 33) + 452) & 0xFFFC003F | (((*((_DWORD *)this + 2956) >> 6) & 0xFFF) << 6);
          }
          goto LABEL_505;
        }
      }
    }
  }
  return result;
}

uint64_t CAHDec::addToPatcherList(uint64_t a1, void *a2, int a3, int a4, uint64_t a5, int a6, int a7, char a8)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v16 = *(void *)(a1 + 72);
  if (!v16)
  {
    uint64_t v31 = CAVDDecoder::allocAVDMem(*(void *)(a1 + 56), (_OWORD *)(a1 + 80), 12288, 6, 1, 0);
    if (v31)
    {
      uint64_t v25 = v31;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v25;
      }
      goto LABEL_25;
    }
    uint64_t v16 = *(void *)(a1 + 80);
    *(void *)(a1 + 72) = v16;
    *(_DWORD *)(a1 + 68) = 256;
  }
  unsigned int v18 = *(_DWORD *)(a1 + 64);
  unsigned int v17 = *(_DWORD *)(a1 + 68);
  if (v18) {
    goto LABEL_4;
  }
  if (v17 == 256)
  {
    unsigned int v18 = 0;
    goto LABEL_14;
  }
  uint64_t v33 = CAVDDecoder::deallocAVDMem(*(void *)(a1 + 56), (uint64_t *)(a1 + 80));
  if (v33)
  {
    uint64_t v25 = v33;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return v25;
    }
    uint64_t v34 = *(void *)(a1 + 72);
    int v35 = *(_DWORD *)(a1 + 64);
    int v36 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)__src = 136315906;
    *(void *)&__src[4] = "addToPatcherList";
    *(_WORD *)&__src[12] = 2048;
    *(void *)&__src[14] = v34;
    *(_WORD *)&__src[22] = 1024;
    *(_DWORD *)&__src[24] = v35;
    *(_WORD *)&__src[28] = 1024;
    *(_DWORD *)&__src[30] = v36;
    uint64_t v29 = &_os_log_internal;
    unsigned __int16 v30 = "AppleAVD: %s(): Error deallocating patch requests list, m_fwPatchRequests=%p, m_fwPatchRequestWriteIndex=%u, m"
          "_maxFwPatchRequests=%u";
LABEL_26:
    unsigned int v41 = __src;
    goto LABEL_27;
  }
  uint64_t v42 = CAVDDecoder::allocAVDMem(*(void *)(a1 + 56), (_OWORD *)(a1 + 80), 12288, 6, 1, 0);
  if (v42)
  {
    uint64_t v25 = v42;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return v25;
    }
LABEL_25:
    uint64_t v43 = *(void *)(a1 + 72);
    int v44 = *(_DWORD *)(a1 + 64);
    int v45 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)__src = 136315906;
    *(void *)&__src[4] = "addToPatcherList";
    *(_WORD *)&__src[12] = 2048;
    *(void *)&__src[14] = v43;
    *(_WORD *)&__src[22] = 1024;
    *(_DWORD *)&__src[24] = v44;
    *(_WORD *)&__src[28] = 1024;
    *(_DWORD *)&__src[30] = v45;
    uint64_t v29 = &_os_log_internal;
    unsigned __int16 v30 = "AppleAVD: %s(): Error allocating patch requests list, m_fwPatchRequests=%p, m_fwPatchRequestWriteIndex=%u, m_m"
          "axFwPatchRequests=%u";
    goto LABEL_26;
  }
  uint64_t v16 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v16;
  unsigned int v17 = 256;
  *(_DWORD *)(a1 + 68) = 256;
  unsigned int v18 = *(_DWORD *)(a1 + 64);
LABEL_4:
  if (v18 < v17)
  {
LABEL_14:
    uint64_t v25 = 0;
    uint64_t v32 = v16 + 48 * v18;
    *(void *)uint64_t v32 = *a2;
    *(void *)(v32 + 16) = a2[19];
    *(_DWORD *)(v32 + 24) = a3;
    *(_DWORD *)(v32 + 28) = a4;
    *(void *)(v32 + 8) = a5;
    *(_DWORD *)(v32 + 32) = a6;
    *(_DWORD *)(v32 + 36) = a7;
    *(unsigned char *)(v32 + 40) = a8;
    *(_DWORD *)(a1 + 64) = v18 + 1;
    return v25;
  }
  long long v19 = *(_OWORD *)(a1 + 224);
  long long v61 = *(_OWORD *)(a1 + 208);
  long long v62 = v19;
  long long v63 = *(_OWORD *)(a1 + 240);
  long long v20 = *(_OWORD *)(a1 + 160);
  long long v57 = *(_OWORD *)(a1 + 144);
  long long v58 = v20;
  long long v21 = *(_OWORD *)(a1 + 192);
  long long v59 = *(_OWORD *)(a1 + 176);
  long long v60 = v21;
  long long v22 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)__src = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&__src[16] = v22;
  long long v23 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)&__src[32] = *(_OWORD *)(a1 + 112);
  long long v56 = v23;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v24 = CAVDDecoder::allocAVDMem(*(void *)(a1 + 56), (_OWORD *)(a1 + 80), 48 * (v17 + 256), 6, 1, 0);
  if (v24)
  {
    uint64_t v25 = v24;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(void *)(a1 + 72);
      int v27 = *(_DWORD *)(a1 + 64);
      int v28 = *(_DWORD *)(a1 + 68);
      int v47 = 136315906;
      int v48 = "addToPatcherList";
      __int16 v49 = 2048;
      uint64_t v50 = v26;
      __int16 v51 = 1024;
      int v52 = v27;
      __int16 v53 = 1024;
      int v54 = v28;
      uint64_t v29 = &_os_log_internal;
      unsigned __int16 v30 = "AppleAVD: %s(): Error allocating patch requests list, m_fwPatchRequests=%p, m_fwPatchRequestWriteIndex=%u, m"
            "_maxFwPatchRequests=%u";
LABEL_22:
      unsigned int v41 = (uint8_t *)&v47;
LABEL_27:
      _os_log_impl(&dword_223977000, v29, OS_LOG_TYPE_DEFAULT, v30, v41, 0x22u);
      return v25;
    }
    return v25;
  }
  memcpy(*(void **)(a1 + 80), *(const void **)__src, 48 * *(unsigned int *)(a1 + 68));
  uint64_t v37 = CAVDDecoder::deallocAVDMem(*(void *)(a1 + 56), (uint64_t *)__src);
  if (!v37)
  {
    uint64_t v16 = *(void *)(a1 + 80);
    *(void *)(a1 + 72) = v16;
    unsigned int v18 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 68) += 256;
    goto LABEL_14;
  }
  uint64_t v25 = v37;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v38 = *(void *)(a1 + 72);
    int v39 = *(_DWORD *)(a1 + 64);
    int v40 = *(_DWORD *)(a1 + 68);
    int v47 = 136315906;
    int v48 = "addToPatcherList";
    __int16 v49 = 2048;
    uint64_t v50 = v38;
    __int16 v51 = 1024;
    int v52 = v39;
    __int16 v53 = 1024;
    int v54 = v40;
    uint64_t v29 = &_os_log_internal;
    unsigned __int16 v30 = "AppleAVD: %s(): Error deallocating patch requests list, m_fwPatchRequests=%p, m_fwPatchRequestWriteIndex=%u, m"
          "_maxFwPatchRequests=%u";
    goto LABEL_22;
  }
  return v25;
}

uint64_t CAHDecCatnipHevc::initPicture(CAHDecCatnipHevc *this, int a2, __int16 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 114) = 420332;
  *((_DWORD *)this + 13) = 0;
  int v4 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v4;
  if (v4)
  {
    bzero(v4, 0x669ECuLL);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v7 + 16) = a2;
    *(_WORD *)(v7 + 24) = 257;
    *(_WORD *)(v7 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 2955) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "initPicture";
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v9, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecCatnipHevc::updateCommonRegisters(CAHDecCatnipHevc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 20) = -559035650;
  return 0;
}

uint64_t CAHDecCatnipHevc::populateAvdWork(CAHDecCatnipHevc *this, unsigned int a2)
{
  v144[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 32);
  uint64_t v5 = *((void *)this + 33);
  int v6 = *(_DWORD *)(v4 + 8320);
  int v7 = *(_DWORD *)(v4 + 8324);
  uint64_t v8 = *(void *)(v4 + 8280);
  uint64_t v9 = *(void *)(v4 + 8288);
  uint64_t v109 = *(void *)(v4 + 8296);
  unsigned int v10 = *(_DWORD *)(v4 + 9036);
  unsigned int v11 = *(_DWORD *)(v4 + 3068);
  int v12 = *(_DWORD *)(v4 + 3072);
  v144[0] = 0;
  v144[1] = 0;
  uint64_t v143 = 0;
  unsigned int v13 = v10 >> 28;
  uint64_t v14 = v8 + 23176 * v6;
  unsigned int v15 = *(_DWORD *)(v14 + 22888);
  if (v10)
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v16 = v15 > v13 + 1;
    }
    else {
      BOOL v16 = 0;
    }
    BOOL v17 = v16 && v12 == 0;
    int v18 = v17;
    int v133 = v18;
  }
  else
  {
    int v133 = 0;
  }
  unsigned int v126 = *(unsigned __int16 *)(v5 + 686) * *(unsigned __int16 *)(v5 + 684);
  if ((v10 & 2) != 0 && *(unsigned char *)(v9 + 9856 * v7 + 52))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v126 > v13 + 1;
    }
    int v21 = v19 && v12 == 0;
    int v135 = v21;
  }
  else
  {
    int v135 = 0;
  }
  uint64_t v115 = (unsigned int *)(v14 + 22880);
  if ((v10 & 0x20) != 0 && !*(unsigned char *)(v9 + 9856 * v7 + 53))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 52)) {
      BOOL v83 = 0;
    }
    else {
      BOOL v83 = v11 > v13 + 1;
    }
    int v85 = v83 && v12 == 0;
    int v129 = v85;
  }
  else
  {
    int v129 = 0;
  }
  unsigned int v22 = 0;
  unsigned int v137 = *v115;
  unsigned int v23 = v13 + 2;
  BOOL v17 = (v10 & 4) == 0;
  int v24 = v133;
  if (v17) {
    int v24 = 1;
  }
  if (((v24 | v135) & 1) == 0 && (v129 & 1) == 0) {
    unsigned int v22 = *(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & (v13 + 1);
  }
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  memset_pattern16(__b, &unk_223AD0630, 8uLL);
  uint64_t v25 = v5 + 223724;
  unsigned int v103 = v133 | v135 | v129;
  if (v103) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = 1;
  }
  unint64_t v27 = v22 + v26;
  uint64_t v120 = v26;
  unsigned int v105 = 0x1000 / v26;
  uint64_t v28 = 48 * (0x1000 / v26);
  uint64_t v29 = v22;
  unint64_t v30 = v22;
  do
  {
    v144[v30] = v25 + (v30 - v22) * v28;
    ++v30;
  }
  while (v30 < v27);
  uint64_t v102 = v28;
  unint64_t v106 = v27;
  uint64_t v31 = v144[v22];
  uint64_t v123 = v5 + 223724;
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v25) >> 4);
  unint64_t v104 = v22;
  if (!a2)
  {
    uint64_t v95 = 0;
    int v96 = 0;
    HIDWORD(v138) = 0;
    unsigned int v43 = v22;
    goto LABEL_165;
  }
  uint64_t v136 = 0;
  unsigned int v117 = 0;
  int v113 = 0;
  int v121 = 0;
  uint64_t v130 = 0;
  uint64_t v134 = 0;
  unsigned int v33 = v22;
  unsigned int v34 = v15;
  int v35 = 0;
  uint64_t v138 = 0;
  unsigned int v36 = a2;
  uint64_t v37 = 0;
  uint64_t v38 = v9 + 9856 * v7;
  int v39 = (unsigned char *)(v38 + 52);
  int v118 = (unsigned char *)(v38 + 53);
  int v40 = v133;
  if (v133) {
    int v41 = 12;
  }
  else {
    int v41 = 4;
  }
  int v116 = v41;
  unsigned int v122 = v36 - 1;
  unsigned int v111 = v34 - 1;
  unsigned int v112 = v34;
  unsigned int v110 = v34 - 2;
  unsigned int v42 = v120;
  int v108 = &__b[v29];
  unsigned int v101 = v36;
  uint64_t v107 = v36;
  uint64_t v124 = v5 + 3272;
  unsigned int v100 = v33;
  unsigned int v43 = v33;
  int v128 = v39;
  do
  {
    if (*v39) {
      int v44 = 1;
    }
    else {
      int v44 = v40;
    }
    if (v44 != 1)
    {
      unsigned int v47 = 1;
LABEL_54:
      uint64_t v48 = 0;
      int v114 = 0;
      uint64_t v49 = v109 + 2360 * v136;
      uint64_t v119 = (void *)(v49 + 1904);
      int v125 = (int *)(v49 + 36);
      uint64_t v127 = (unsigned char *)(v49 + 32);
      uint64_t v132 = v47;
      while (1)
      {
        if (!(v48 | v136))
        {
          *(_WORD *)(v31 + 4) = 0;
          *(_WORD *)(v31 + 6) = v43;
          *(_DWORD *)(v31 + 8) = 0;
          *(_WORD *)(v31 + 12) = 0;
          LODWORD(v130) = *(_DWORD *)(v124 + 368 * v136);
          if (!(*(unsigned int (**)(void))(**((void **)this + 32) + 448))()) {
            return 0xFFFFFFFFLL;
          }
          int v54 = *v125;
          *(_DWORD *)(v31 + 32) = *v125;
          *(_DWORD *)(v31 + 36) = v54;
          HIDWORD(v138) = 0;
          *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecCatnipHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v137);
          __int16 v55 = 271;
          goto LABEL_159;
        }
        if (v48)
        {
          int v50 = *(_DWORD *)(*v119 + 4 * v48 - 4) + 1;
          if (*v128)
          {
            if (*v118)
            {
              unsigned int v51 = *v115;
              unsigned int v52 = (v51 + v138) / v51;
              v50 += v114;
              if (v52 >= *(unsigned __int16 *)(*((void *)this + 33) + 2 * (v121 + 1) + 730))
              {
                LODWORD(v138) = (*(uint64_t (**)(CAHDecCatnipHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v137);
                int v114 = 0;
                int v35 = v116;
              }
              else
              {
                LODWORD(v138) = v113 + v52 * v51;
                if (!v133)
                {
                  int v114 = v50;
                  int v40 = 0;
                  goto LABEL_160;
                }
                int v114 = 0;
                int v53 = __b[v43];
                __b[v43] = 0;
                if (v53) {
                  int v35 = 72;
                }
                else {
                  int v35 = 8;
                }
              }
            }
            else
            {
              LODWORD(v138) = (*(uint64_t (**)(CAHDecCatnipHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v137);
              int v35 = 4;
            }
          }
          else if (v133)
          {
            LODWORD(v138) = (*v115 + v138) / *v115 * *v115;
            int v35 = 8;
          }
          int v62 = 48 * v32;
          uint64_t v63 = v140;
          if (*(void *)v140 || *(_DWORD *)(v140 + 152) || *(_DWORD *)(v140 + 156))
          {
            int v64 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1870;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v64 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223746, HIDWORD(v138) + v64, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v63 = v140;
            if (*(void *)v140) {
              goto LABEL_103;
            }
          }
          if (*(_DWORD *)(v63 + 152) || *(_DWORD *)(v63 + 156))
          {
LABEL_103:
            int v65 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1871;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v65 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223748, HIDWORD(v138) + v65, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v50;
          HIDWORD(v138) += v50;
          unsigned int v42 = v120;
          int v40 = v133;
        }
        else
        {
          int v56 = 48 * v32;
          uint64_t v57 = v140;
          if (*(void *)v140 || *(_DWORD *)(v140 + 152) || *(_DWORD *)(v140 + 156))
          {
            int v58 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1794;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v58 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223746, HIDWORD(v138) + v58, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v57 = v140;
            if (*(void *)v140) {
              goto LABEL_76;
            }
          }
          if (*(_DWORD *)(v57 + 152) || *(_DWORD *)(v57 + 156))
          {
LABEL_76:
            int v60 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1795;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v60 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223748, HIDWORD(v138) + v60, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v130 - HIDWORD(v138);
          int v61 = *(_DWORD *)(v124 + 368 * v136);
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t *))(**((void **)this + 32) + 448))(*((void *)this + 32), v136, &v140, &v139))return 0xFFFFFFFFLL; {
          LODWORD(v130) = v61;
          }
          if (*v127) {
            int v35 = 2;
          }
          else {
            int v35 = 258;
          }
          int v40 = v133;
          LODWORD(v138) = *v125;
          if (v133 && *v125 % v137 == v113)
          {
            HIDWORD(v138) = 0;
            if (__b[v43])
            {
              v35 |= 0x48u;
              __b[v43] = 0;
            }
            else
            {
              v35 |= 8u;
            }
          }
          else
          {
            HIDWORD(v138) = 0;
          }
        }
        unsigned int v66 = v37 + 1;
        if ((int)v37 + 1 < v126)
        {
          int v67 = (*(uint64_t (**)(CAHDecCatnipHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v137);
          int v68 = v116;
          if (v138 != v67) {
            int v68 = 0;
          }
          v35 |= v68;
        }
        *(_WORD *)(v31 + 16) = v35;
        if (v134 == v122) {
          *(_WORD *)(v31 + 18) |= 2u;
        }
        if (v37 == v126 - 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        int v69 = v135;
        if (v37 != v126 - 2) {
          int v69 = 0;
        }
        if (v69 == 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        if (v40
          && ((int v70 = *(unsigned __int16 *)(v31 + 10), v112 > 1) ? (v71 = v110 == v70) : (v71 = 0),
              !v71 ? (int v72 = 0) : (int v72 = 1),
              v111 == v70 || v72))
        {
          *(_WORD *)(v31 + 18) |= 8u;
          if ((v35 & 4) != 0)
          {
LABEL_132:
            if (*v128 && *v118)
            {
              uint64_t v73 = *((void *)this + 33);
              unsigned int v74 = *(unsigned __int16 *)(v73 + 684);
              unsigned int v117 = (v43
                    - *(unsigned __int16 *)(v73 + 730 + 2 * (v66 / v74))
                    + *(unsigned __int16 *)(v73 + 730 + 2 * (v66 / v74 + 1)))
                   % v42;
              int v121 = v66 / v74;
              int v113 = *(unsigned __int16 *)(v73 + 684 + 2 * (v66 % v74) + 4);
              memset_pattern16(v108, &unk_223AD0630, 4 * (v120 - 1) + 4);
            }
            uint64_t v37 = (v37 + 1);
          }
        }
        else if ((v35 & 4) != 0)
        {
          goto LABEL_132;
        }
        if ((v35 & 0x44) != 0)
        {
          int v75 = (*(uint64_t (**)(CAHDecCatnipHevc *, uint64_t))(*(void *)this + 80))(this, v37);
          unsigned int v76 = HIDWORD(v134);
          if (SHIDWORD(v134) <= v75) {
            v35 |= 0x20u;
          }
        }
        else
        {
          unsigned int v76 = HIDWORD(v134);
        }
        if (!v48)
        {
          if (!*v127) {
            unsigned int v76 = v37;
          }
          int v77 = HIDWORD(v130);
          if (!*v127) {
            int v77 = v138;
          }
          HIDWORD(v130) = v77;
        }
        if ((v35 & 0x44) != 0)
        {
          unsigned int v78 = *(unsigned __int16 *)(*((void *)this + 33) + 684);
          if (v76 / v78 + 1 == v37 / v78) {
            v35 |= 0x10u;
          }
        }
        ++*((_DWORD *)&v144[-1] + v43);
        v144[v43] += 48;
        unsigned int v79 = v138 / v137;
        if (v40) {
          unsigned int v43 = (v79 - v121 + v117) % v42;
        }
        if (v135) {
          unsigned int v43 = v37 % v42;
        }
        char v80 = v129 ^ 1;
        if (v48) {
          char v80 = 1;
        }
        HIDWORD(v134) = v76;
        if ((v80 & 1) == 0 && !*v127) {
          unsigned int v43 = (v43 + 1) % v42;
        }
        uint64_t v31 = v144[v43];
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v123) >> 4);
        *(_WORD *)(v31 + 4) = *((_DWORD *)&v144[-1] + v43);
        *(_WORD *)(v31 + 6) = v43;
        *(_WORD *)(v31 + 8) = v136;
        *(_WORD *)(v31 + 10) = v79;
        *(_WORD *)(v31 + 12) = v37;
        *(_DWORD *)(v31 + 32) = v138;
        *(_DWORD *)(v31 + 36) = HIDWORD(v130);
        *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecCatnipHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v137);
        __int16 v55 = v35;
        LODWORD(v134) = v136;
LABEL_159:
        *(_WORD *)(v31 + 14) = v55;
LABEL_160:
        if (v132 == ++v48) {
          goto LABEL_51;
        }
      }
    }
    int v45 = *(_DWORD *)(v109 + 2360 * v136 + 1896);
    BOOL v46 = __CFADD__(v45, 1);
    unsigned int v47 = v45 + 1;
    if (!v46) {
      goto LABEL_54;
    }
LABEL_51:
    ++v136;
    int v39 = v128;
  }
  while (v136 != v107);
  uint64_t v95 = v140;
  unsigned int v22 = v100;
  a2 = v101;
  int v96 = v130;
LABEL_165:
  int v131 = v96;
  int v81 = 48 * v32;
  if (!*(void *)v95 && !*(_DWORD *)(v95 + 152) && !*(_DWORD *)(v95 + 156))
  {
LABEL_185:
    if (*(_DWORD *)(v95 + 152) || *(_DWORD *)(v95 + 156)) {
      goto LABEL_187;
    }
    goto LABEL_191;
  }
  int v82 = v139;
  if ((v139 + (unint64_t)HIDWORD(v138)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "populateAvdWork";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 1965;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
    int v82 = v139;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223746, HIDWORD(v138) + v82, 0x3FFFFFFFFFFLL, 32, -1, 2);
  if (!result)
  {
    uint64_t v95 = v140;
    if (!*(void *)v140) {
      goto LABEL_185;
    }
LABEL_187:
    int v86 = v139;
    if ((v139 + (unint64_t)HIDWORD(v138)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "populateAvdWork";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = 1966;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
      int v86 = v139;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223748, HIDWORD(v138) + v86, 0xFFFFFFFFLL, 0, -1, 4);
    if (!result)
    {
LABEL_191:
      *(_DWORD *)(v31 + 28) = v131 - HIDWORD(v138);
      *(_DWORD *)(v31 + 16) = 917519;
      ++*((_DWORD *)&v144[-1] + v43);
      unint64_t v87 = v104;
      if (v129)
      {
        uint64_t v88 = 0;
        buf[0] = 0;
        buf[1] = 0;
        do
        {
          buf[v88] = v123 + v88 * v102;
          ++v88;
        }
        while (v120 != v88);
        uint64_t v89 = buf[0];
        unsigned int v90 = *(unsigned __int16 *)(buf[0] + 8) + 1;
        uint64_t v91 = v103;
        uint64_t v92 = 0;
        if (v90 >= a2)
        {
          unsigned int v94 = buf;
        }
        else
        {
          uint64_t v93 = 0;
          unsigned int v94 = buf;
          do
          {
            if (*(unsigned __int16 *)(v89 + 4) + 1 == *((_DWORD *)&v144[-1] + v92))
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 40) = *(_DWORD *)(buf[v91] + 36);
            }
            else if (v90 == *(unsigned __int16 *)(v89 + 56))
            {
              *unsigned int v94 = v89 + 48;
              uint64_t v92 = v93;
              uint64_t v91 = v93;
            }
            else
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 40) = *(_DWORD *)(buf[v91] + 36);
              *unsigned int v94 = v89 + 48;
            }
            uint64_t v93 = v91;
            uint64_t v91 = ((int)v91 + 1) % v120;
            unsigned int v94 = &buf[v92];
            uint64_t v89 = *v94;
            unsigned int v90 = *(unsigned __int16 *)(*v94 + 8) + 1;
          }
          while (v90 < a2);
        }
        int v97 = *((_DWORD *)&v144[-1] + v92);
        if (*(unsigned __int16 *)(v89 + 4) + 1 != v97)
        {
          do
          {
            int v98 = *(unsigned __int16 *)(v89 + 52);
            v89 += 48;
          }
          while (v98 + 1 != v97);
          *unsigned int v94 = v89;
        }
        *(_DWORD *)(v89 + 40) = *(_DWORD *)(v89 + 44) + 1;
      }
      uint64_t v99 = *((void *)this + 33) + 36;
      do
      {
        *(_WORD *)(v99 + 2 * v87 - 8) = *((_DWORD *)&v144[-1] + v87);
        *(_DWORD *)(v99 + 4 * v87) = 48 * (v87 - v22) * v105 + 223724;
        ++v87;
      }
      while (v87 < v106);
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecCatnipHevc::getTileEndCTU(CAHDecCatnipHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 684);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecCatnipHevc::populateSequenceRegisters(CAHDecCatnipHevc *this)
{
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)*((void *)this + 33);
  int v3 = *(_DWORD *)(v1 + 8320);
  uint64_t v4 = *(void *)(v1 + 8280);
  v2[13] = 0;
  uint64_t v5 = v4 + 23176 * v3;
  __int16 v6 = (*(_DWORD *)(v5 + 3608) >> 3) - 1;
  v2[13] = v6 & 0x1FFF;
  v2[13] = ((*(_DWORD *)(v5 + 3612) << 13) + 536805376) & 0x1FFF0000 | v6 & 0x1FFF;
  v2[14] = 0;
  int v7 = *(unsigned char *)(v5 + 10648) & 1;
  v2[14] = v7;
  unsigned int v8 = v7 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v5 + 4440) & 7));
  v2[14] = v8;
  unsigned int v9 = v8 & 0xFFFFFF8F | (16 * (*(_DWORD *)(v5 + 4436) & 7));
  v2[14] = v9;
  unsigned int v10 = v9 & 0xFFFFFE7F | (((*(_DWORD *)(v5 + 4428) + *(_DWORD *)(v5 + 4432)) & 3) << 7);
  v2[14] = v10;
  unsigned int v11 = v10 & 0xFFFFF9FF | ((*(_DWORD *)(v5 + 4428) & 3) << 9);
  v2[14] = v11;
  unsigned int v12 = v11 & 0xFFFFE7FF | (((*(_DWORD *)(v5 + 4424) + *(_DWORD *)(v5 + 4420)) & 3) << 11);
  v2[14] = v12;
  unsigned int v13 = v12 & 0xFFFF9FFF | ((*(_DWORD *)(v5 + 4420) & 3) << 13);
  v2[14] = v13;
  unsigned int v14 = v13 & 0xFFF87FFF | ((*(_DWORD *)(v5 + 3640) & 0xF) << 15);
  v2[14] = v14;
  unsigned int v15 = v14 & 0xFF87FFFF | ((*(_DWORD *)(v5 + 3636) & 0xF) << 19);
  v2[14] = v15;
  unsigned int v16 = v15 & 0xFF7FFFFF | ((*(unsigned char *)(v5 + 3604) & 1) << 23);
  v2[14] = v16;
  v2[14] = v16 & 0xFCFFFFFF | ((*(_DWORD *)(v5 + 3600) & 3) << 24);
  v2[15] = 0;
  if (*(unsigned char *)(v5 + 10650))
  {
    v2[15] = 4096;
    BOOL v17 = (_DWORD *)(v4 + 23176 * v3);
    int v18 = (v17[2666] + v17[2665]) & 3 | 0x1000;
    v2[15] = v18;
    unsigned int v19 = v18 & 0xFFFFFFF3 | (4 * (v17[2665] & 3));
    v2[15] = v19;
    unsigned int v20 = v19 & 0xFFFFFF0F | (16 * (v17[2664] & 0xF));
    v2[15] = v20;
    v2[15] = v20 & 0xFFFFF0FF | ((v17[2663] & 0xF) << 8);
  }
  v2[16] = 0;
  if (*(unsigned char *)(v4 + 23176 * v3 + 22833))
  {
    int v21 = *(unsigned char *)(v4 + 23176 * v3 + 22844) & 1;
    v2[16] = v21;
    unsigned int v22 = v21 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v4 + 23176 * v3 + 22843) & 1));
    v2[16] = v22;
    unsigned int v23 = v22 & 0xFFFFFFFB | (4 * (*(unsigned char *)(v4 + 23176 * v3 + 22842) & 1));
    v2[16] = v23;
    int v24 = v23 | (8 * (*(unsigned char *)(v4 + 23176 * v3 + 22841) == 0));
    v2[16] = v24;
    unsigned int v25 = v24 & 0xFFFFFFEF | (16 * (*(unsigned char *)(v4 + 23176 * v3 + 22840) & 1));
    v2[16] = v25;
    unsigned int v26 = v25 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v4 + 23176 * v3 + 22839) & 1));
    v2[16] = v26;
    unsigned int v27 = v26 & 0xFFFFFFBF | ((*(unsigned char *)(v4 + 23176 * v3 + 22838) & 1) << 6);
    v2[16] = v27;
    int v28 = v27 | ((*(unsigned char *)(v4 + 23176 * v3 + 22837) & 1) << 7);
    v2[16] = v28;
    int v29 = v28 | ((*(unsigned char *)(v4 + 23176 * v3 + 22836) & 1) << 8);
  }
  else
  {
    int v29 = 8;
  }
  v2[16] = v29;
  uint64_t v30 = v4 + 23176 * v3;
  v2[16] = v29 & 0xFFFFFDFF | ((*(unsigned char *)(v30 + 22285) & 1) << 9);
  if (*(unsigned char *)(v30 + 4444)) {
    CAHDecTansyHevc::copyScalingList((uint64_t)this, (uint64_t)(v2 + 17), *((void *)this + 33) + 788, *(_DWORD *)(v5 + 3600), v4 + 23176 * v3 + 4448);
  }
  return 0;
}

uint64_t CAHDecCatnipHevc::populateCommonRegisters(CAHDecCatnipHevc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000000;
  return 0;
}

BOOL CAVDHevcDecoder::IsIrap(CAVDHevcDecoder *this)
{
  BOOL v1 = (**((_DWORD **)this + 1037) & 0xFFFFFFF8) == 16;
  *((unsigned char *)this + 3120) = v1;
  return v1;
}

uint64_t CAVDHevcDecoder::getRefTileHdrsInfo(uint64_t this)
{
  if (*(_DWORD *)(this + 8720))
  {
    uint64_t v1 = this;
    uint64_t v2 = 1065;
    uint64_t v3 = 8728;
    do
    {
      this = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(v1 + 2096) + 256))(*(void *)(v1 + 2096), *(unsigned int *)(*(void *)(v1 + 8 * v2) + 44), v1 + v3);
      unint64_t v4 = v2 - 1064;
      ++v2;
      v3 += 16;
    }
    while (v4 < *(unsigned int *)(v1 + 8720));
  }
  return this;
}

uint64_t CAHDecTansyHevc::copyScalingList(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v5 = *(_DWORD *)(a2 + 4);
  unsigned int v6 = *(_DWORD *)a2 & 0xFEFFFFFF | ((*(unsigned char *)(a5 + 6196) & 1) << 24);
  *(_DWORD *)a2 = v6;
  unsigned int v7 = v6 & 0xFFFFFFC0 | *(unsigned char *)(a5 + 6192) & 0x3F;
  *(_DWORD *)a2 = v7;
  unsigned int v8 = v7 & 0xFFFFF03F | ((*(unsigned char *)(a5 + 6193) & 0x3F) << 6);
  *(_DWORD *)a2 = v8;
  int v9 = *(unsigned __int8 *)(a5 + 6194);
  unsigned int v10 = v8 & 0xFFFC0FFF | ((v9 & 0x3F) << 12);
  *(_DWORD *)a2 = v10;
  int v11 = *(unsigned char *)(a5 + 6195) & 0x3F;
  unsigned int v12 = v10 & 0xFF03FFFF | (v11 << 18);
  *(_DWORD *)a2 = v12;
  unsigned int v13 = v5 & 0xFF00FFFF | ((((v9 << 31 >> 31) & (*(_DWORD *)(a5 + 6144) << 16)) >> 16) << 16);
  *(_DWORD *)(a2 + 4) = v13;
  unsigned int v14 = v13 & 0xFFFF00FF | (((unsigned __int16)((*(_WORD *)(a5 + 6148) << 8) & ((__int16)((_WORD)v9 << 14) >> 15)) >> 8) << 8);
  *(_DWORD *)(a2 + 4) = v14;
  *(_DWORD *)(a2 + 4) = v14 & 0xFFFFFF00 | *(unsigned __int8 *)(a5 + 6152) & (v9 << 29 >> 31);
  unsigned int v15 = *(_DWORD *)(a2 + 8) & 0xFF00FFFF | ((((*(_DWORD *)(a5 + 6156) << 16) & (v9 << 28 >> 31)) >> 16) << 16);
  *(_DWORD *)(a2 + 8) = v15;
  unsigned int v16 = v15 & 0xFFFF00FF | (((unsigned __int16)((*(_WORD *)(a5 + 6160) << 8) & ((__int16)((_WORD)v9 << 11) >> 15)) >> 8) << 8);
  *(_DWORD *)(a2 + 8) = v16;
  int v17 = *(unsigned __int8 *)(a5 + 6164);
  if ((v9 & 0x20) == 0) {
    int v17 = 0;
  }
  *(_DWORD *)(a2 + 8) = v16 & 0xFFFFFF00 | v17;
  if (a4 == 3)
  {
    unsigned int v18 = v12 | ((v9 & 0x3F) << 18) & 0xD80000;
    *(_DWORD *)a2 = v18;
    int v19 = *(_DWORD *)(a2 + 16);
    unsigned int v20 = *(_DWORD *)(a2 + 12) & 0xFF00FFFF | ((((v11 << 31 >> 31) & (*(_DWORD *)(a5 + 6168) << 16)) >> 16) << 16);
    *(_DWORD *)(a2 + 12) = v20;
    unsigned int v21 = v20 & 0xFFFF00FF | (((unsigned __int16)((*(_WORD *)(a5 + 6148) << 8) & ((__int16)(v18 >> 4) >> 15)) >> 8) << 8);
    *(_DWORD *)(a2 + 12) = v21;
    *(_DWORD *)(a2 + 12) = v21 & 0xFFFFFF00 | *(unsigned __int8 *)(a5 + 6152) & ((int)(v18 << 11) >> 31);
    unsigned int v22 = v19 & 0xFF00FFFF | ((((*(_DWORD *)(a5 + 6172) << 16) & (v11 << 28 >> 31)) >> 16) << 16);
    *(_DWORD *)(a2 + 16) = v22;
    unsigned int v23 = v22 & 0xFFFF00FF | (((unsigned __int16)((*(_WORD *)(a5 + 6160) << 8) & ((__int16)(v18 >> 7) >> 15)) >> 8) << 8);
    *(_DWORD *)(a2 + 16) = v23;
    unsigned int v24 = v23 & 0xFFFFFF00 | *(unsigned __int8 *)(a5 + 6164) & ((int)(v18 << 8) >> 31);
  }
  else
  {
    *(_DWORD *)(a2 + 12) = (v11 << 31 >> 31) & (*(_DWORD *)(a5 + 6168) << 16) & 0xFF0000 | (*(unsigned __int8 *)(a2 + 15) << 24);
    unsigned int v24 = (*(_DWORD *)(a5 + 6172) << 16) & (v11 << 28 >> 31) & 0xFF0000 | (*(unsigned __int8 *)(a2 + 19) << 24);
  }
  *(_DWORD *)(a2 + 16) = v24;
  uint64_t v25 = 0;
  uint64_t v26 = a5;
  uint64_t v27 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v29 = *(_DWORD *)(v27 + i) & 0xFFFFFF | (*(_DWORD *)(v26 + i) << 24);
      *(_DWORD *)(v27 + i) = v29;
      unsigned int v30 = v29 & 0xFF00FFFF | (*(_DWORD *)(v26 + i + 16) << 16);
      *(_DWORD *)(v27 + i) = v30;
      unsigned int v31 = v30 & 0xFFFF00FF | (*(_DWORD *)(v26 + i + 32) << 8);
      *(_DWORD *)(v27 + i) = v31;
      *(_DWORD *)(v27 + i) = v31 & 0xFFFFFF00 | *(unsigned __int8 *)(v26 + i + 48);
    }
    ++v25;
    v27 += 16;
    v26 += 256;
  }
  while (v25 != 6);
  uint64_t v32 = 0;
  uint64_t v33 = a3 + 96;
  uint64_t v34 = a5 + 1536;
  do
  {
    for (unint64_t j = 0; j != 16; ++j)
    {
      int v36 = *(_DWORD *)(v33 + 4 * j) & 0xFFFFFF | (*(_DWORD *)(v34 + 96 * (j >> 3) + 4 * j) << 24);
      *(_DWORD *)(v33 + 4 * j) = v36;
      int v37 = ((j & 0x7FFFFFFC) + 24 * (j >> 3)) & 0xFFFFFFFC | j & 3;
      uint64_t v38 = a5 + (v32 << 8) + 1536;
      unsigned int v39 = v36 & 0xFF00FFFF | (*(_DWORD *)(v38 + 4 * (v37 + 8)) << 16);
      *(_DWORD *)(v33 + 4 * j) = v39;
      unsigned int v40 = v39 & 0xFFFF00FF | (*(_DWORD *)(v38 + 4 * (v37 + 16)) << 8);
      *(_DWORD *)(v33 + 4 * j) = v40;
      *(_DWORD *)(v33 + 4 * j) = v40 & 0xFFFFFF00 | *(unsigned __int8 *)(v38 + 4 * (v37 + 24));
    }
    ++v32;
    v33 += 64;
    v34 += 256;
  }
  while (v32 != 6);
  uint64_t v41 = 0;
  uint64_t v42 = a3 + 480;
  uint64_t v43 = a5 + 3072;
  do
  {
    for (unint64_t k = 0; k != 16; ++k)
    {
      int v45 = *(_DWORD *)(v42 + 4 * k) & 0xFFFFFF | (*(_DWORD *)(v43 + 96 * (k >> 3) + 4 * k) << 24);
      *(_DWORD *)(v42 + 4 * k) = v45;
      int v46 = ((k & 0x7FFFFFFC) + 24 * (k >> 3)) & 0xFFFFFFFC | k & 3;
      uint64_t v47 = a5 + (v41 << 8) + 3072;
      unsigned int v48 = v45 & 0xFF00FFFF | (*(_DWORD *)(v47 + 4 * (v46 + 8)) << 16);
      *(_DWORD *)(v42 + 4 * k) = v48;
      unsigned int v49 = v48 & 0xFFFF00FF | (*(_DWORD *)(v47 + 4 * (v46 + 16)) << 8);
      *(_DWORD *)(v42 + 4 * k) = v49;
      *(_DWORD *)(v42 + 4 * k) = v49 & 0xFFFFFF00 | *(unsigned __int8 *)(v47 + 4 * (v46 + 24));
    }
    ++v41;
    v42 += 64;
    v43 += 256;
  }
  while (v41 != 6);
  uint64_t v50 = 0;
  uint64_t v51 = a3 + 864;
  char v52 = 1;
  do
  {
    unint64_t v53 = 0;
    char v54 = v52;
    uint64_t v55 = v51 + (v50 << 6);
    do
    {
      int v56 = *(_DWORD *)(v55 + 4 * v53) & 0xFFFFFF | (*(_DWORD *)(a5
                                                                                + 4608
                                                                                + (v50 << 8)
                                                                                + 96 * (v53 >> 3)
                                                                                + 4 * v53) << 24);
      *(_DWORD *)(v55 + 4 * v53) = v56;
      int v57 = ((v53 & 0x7FFFFFFC) + 24 * (v53 >> 3)) & 0xFFFFFFFC | v53 & 3;
      uint64_t v58 = a5 + (v50 << 8) + 4608;
      unsigned int v59 = v56 & 0xFF00FFFF | (*(_DWORD *)(v58 + 4 * (v57 + 8)) << 16);
      *(_DWORD *)(v55 + 4 * v53) = v59;
      unsigned int v60 = v59 & 0xFFFF00FF | (*(_DWORD *)(v58 + 4 * (v57 + 16)) << 8);
      *(_DWORD *)(v55 + 4 * v53) = v60;
      uint64_t result = v60 & 0xFFFFFF00 | *(unsigned __int8 *)(v58 + 4 * (v57 + 24));
      *(_DWORD *)(v55 + 4 * v53++) = result;
    }
    while (v53 != 16);
    char v52 = 0;
    uint64_t v50 = 1;
  }
  while ((v54 & 1) != 0);
  return result;
}

uint64_t CAHDecCatnipHevc::getTileHdrMemInfo(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 176 * a2;
  *a3 = v3 + 528;
  a3[1] = v3 + 3344;
  return result;
}

CAHDecCatnipHevc *createCatnipHevcDecoder(CAVDHevcDecoder *a1)
{
  uint64_t v2 = (CAHDecCatnipHevc *)operator new(0x2E38uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecCatnipHevc::CAHDecCatnipHevc(v2, a1);
  }
  return v3;
}

void sub_2239856E8(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecCatnipHevc::CAHDecCatnipHevc(CAHDecCatnipHevc *this, CAVDHevcDecoder *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73FCC0;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 420332;
  *(_DWORD *)(v4 + 8) = 2924;
  *(_OWORD *)(v4 + 16) = xmmword_223AD0620;
  *(_DWORD *)(v4 + 32) = 2;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 420332, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      unsigned int v7 = "CAHDecCatnipHevc";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v6, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 2820) = 301;
  }
  else
  {
    uint64_t v5 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v5;
    *((void *)this + 34) = v5;
    bzero((char *)this + 528, 0x2C00uLL);
  }
}

void sub_22398585C(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDec::CAHDec(CAHDec *this)
{
  *(void *)this = &unk_26D740068;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 228) = 0u;
  *((_OWORD *)this + 15) = 0u;
}

uint64_t CAHDecCatnipHevc::allocWorkBuf_SPS(CAHDecCatnipHevc *this, _DWORD *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 5718;
  int v5 = a2[902];
  int v6 = a2[903];
  int v7 = a2[900];
  if (v5 < (*(unsigned int (**)(CAHDecCatnipHevc *))(*(void *)this + 96))(this)
    || (unsigned int v8 = a2[903], v8 < (*(unsigned int (**)(CAHDecCatnipHevc *))(*(void *)this + 104))(this))
    || (unsigned int v9 = a2[909], v9 > (*(unsigned int (**)(CAHDecCatnipHevc *))(*(void *)this + 112))(this) - 8)
    || (unsigned int v10 = a2[910], v10 > (*(unsigned int (**)(CAHDecCatnipHevc *))(*(void *)this + 120))(this) - 8)
    || (unsigned int v17 = *v4, v18 = *v4 - 16, v18 > 0x30)
    || ((1 << v18) & 0x1000000010001) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = a2[902];
      int v12 = a2[903];
      int v13 = a2[909];
      int v14 = a2[910];
      unsigned int v15 = *v4;
      int v49 = 136316418;
      uint64_t v50 = "allocWorkBuf_SPS";
      __int16 v51 = 1024;
      int v52 = v11;
      __int16 v53 = 1024;
      *(_DWORD *)char v54 = v12;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v13;
      __int16 v55 = 1024;
      int v56 = v14;
      __int16 v57 = 1024;
      unsigned int v58 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported bit stream w %d h %d bd %d %d CtbSizeY %d\n", (uint8_t *)&v49, 0x2Au);
    }
    return 0xFFFFFFFFLL;
  }
  int v19 = v5 + 31;
  if (v5 < -31) {
    int v19 = v5 + 62;
  }
  unsigned int v20 = v19 >> 5;
  int v21 = v6 + 31;
  if (v6 < -31) {
    int v21 = v6 + 62;
  }
  unsigned int v22 = v21 >> 5;
  unsigned int v23 = 32 - __clz(v20 - 1);
  if (v20 >= 2) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  unsigned int v25 = 32 - __clz(v22 - 1);
  if (v22 >= 2) {
    char v26 = v25;
  }
  else {
    char v26 = 0;
  }
  unsigned int v27 = ((32 << (v26 + v24)) + 127) & 0xFFFFFF80;
  if (v7)
  {
    int v28 = v5 << (v7 == 3);
    int v29 = v28 + 31;
    int v30 = v28 + 62;
    if (v29 >= 0) {
      int v30 = v29;
    }
    unsigned int v31 = v30 >> 5;
    if (v7 == 1) {
      int v32 = v6 + 1;
    }
    else {
      int v32 = v6;
    }
    int v33 = v32 >> (v7 == 1);
    int v35 = v33 + 15;
    BOOL v34 = v33 < -15;
    int v36 = v33 + 30;
    if (!v34) {
      int v36 = v35;
    }
    unsigned int v37 = v36 >> 4;
    if (v31 > 1)
    {
      unsigned int v38 = 32 - __clz(v31 - 1);
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v37 = 0;
  }
  LOBYTE(v38) = 0;
LABEL_32:
  unsigned int v39 = 32 - __clz(v37 - 1);
  if (v37 >= 2) {
    char v40 = v39;
  }
  else {
    char v40 = 0;
  }
  unsigned int v41 = ((8 << (v40 + v38)) + 127) & 0xFFFFFF80;
  if (!v7) {
    unsigned int v41 = 0;
  }
  *((_DWORD *)this + 2948) = v27;
  *((_DWORD *)this + 2949) = v41;
  *((void *)this + 1475) = 0;
  unsigned int v42 = (v17 & 0xFFFFFFF0) * (v17 >> 4) * v4[2];
  *((_DWORD *)this + 2954) = v42;
  *((_DWORD *)this + 2953) = v4[4] * v42;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_44:
    uint64_t v46 = 0;
    while (1)
    {
      uint64_t v47 = *((unsigned int *)this + 2953);
      if (v47)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecCatnipHevc *)((char *)this + v46 + 7568), v47, 7, 1, 0))break; {
      }
        }
      uint64_t result = 0;
      v46 += 176;
      if (v46 == 2816) {
        return result;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    uint64_t v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2232;
    __int16 v53 = 2080;
    *(void *)char v54 = "MvColo";
    unsigned int v48 = &_os_log_internal;
  }
  else
  {
    uint64_t v43 = 528;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 2948);
      if (v44
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecCatnipHevc *)((char *)this + v43), v44, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_56;
        }
        int v49 = 136315650;
        uint64_t v50 = "allocWorkBuf_SPS";
        __int16 v51 = 1024;
        int v52 = 2223;
        __int16 v53 = 2080;
        *(void *)char v54 = "HdrY";
        unsigned int v48 = &_os_log_internal;
        goto LABEL_55;
      }
      uint64_t v45 = *((unsigned int *)this + 2949);
      if (v45)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecCatnipHevc *)((char *)this + v43 + 2816), v45, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 3344) {
        goto LABEL_44;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    uint64_t v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2224;
    __int16 v53 = 2080;
    *(void *)char v54 = "HdrC";
    unsigned int v48 = &_os_log_internal;
  }
LABEL_55:
  _os_log_impl(&dword_223977000, v48, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v49, 0x1Cu);
LABEL_56:
  (*(void (**)(CAHDecCatnipHevc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAVDDecoder::allocAVDMem(uint64_t a1, _OWORD *a2, uint64_t a3, int a4, int a5, char a6)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  vm_address_t address = 0;
  vm_size_t v11 = (*MEMORY[0x263EF8AD0] + a3) & ~*MEMORY[0x263EF8AD0];
  uint64_t v12 = vm_allocate(*MEMORY[0x263EF8960], &address, v11, 1);
  vm_address_t v13 = address;
  if (v12) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = address == 0;
  }
  if (v14)
  {
    int v15 = v12;
    uint64_t v16 = 3758097085;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v21 = "allocAVDMem";
      __int16 v22 = 1024;
      int v23 = v15;
      __int16 v24 = 2048;
      vm_address_t v25 = v13;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR! vm_allocate failed! allocStatus: %d - addr: 0x%lx\n", buf, 0x1Cu);
    }
  }
  else
  {
    HIBYTE(v18) = a6;
    LOBYTE(v18) = 0;
    return CAVDDecoder::mapAVDMemory(v12, *(mach_port_t ***)(a1 + 2344), 0, v11, a5, a4, a2, 0, 0, address, v11, v18);
  }
  return v16;
}

uint64_t CAVDDecoder::mapAVDMemory(uint64_t a1, mach_port_t **a2, int a3, uint64_t a4, int a5, int a6, _OWORD *a7, unsigned __int8 a8, __int16 a9, uint64_t a10, uint64_t a11, __int16 a12)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  size_t outputStructCnt = 176;
  long long v38 = 0u;
  long long outputStruct = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  inputStruct[1] = 0;
  inputStruct[0] = a3;
  uint64_t v34 = a4;
  int v35 = a5;
  int v36 = a6;
  uint64_t v37 = a10;
  *(void *)&long long v38 = a11;
  *(_WORD *)((char *)&v38 + 11) = a12;
  BYTE8(v38) = a8 ^ 1;
  *(_WORD *)((char *)&v38 + 9) = ((a8 | 0xFF00) ^ 1) & a9;
  uint64_t v13 = IOConnectCallStructMethod(**a2, 3u, inputStruct, 0x30uLL, &outputStruct, &outputStructCnt);
  uint64_t v14 = v13;
  if (v13 != -536870210)
  {
    if (v13)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        char v40 = "mapAVDMemory";
        __int16 v41 = 1024;
        int v42 = v14;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): failed error: %d \n", buf, 0x12u);
      }
    }
    else
    {
      long long v15 = v31;
      a7[8] = v30;
      a7[9] = v15;
      a7[10] = v32;
      long long v16 = v27;
      a7[4] = v26;
      a7[5] = v16;
      long long v17 = v29;
      a7[6] = v28;
      a7[7] = v17;
      long long v18 = v23;
      *a7 = outputStruct;
      a7[1] = v18;
      long long v19 = v25;
      a7[2] = v24;
      a7[3] = v19;
    }
  }
  return v14;
}

uint64_t CAHDec::getMinLumaPixelHeight(CAHDec *this)
{
  return 16;
}

uint64_t CAHDec::getMinLumaPixelWidth(CAHDec *this)
{
  return 16;
}

uint64_t CAHDec::getMaxChromaBitDepth(CAHDec *this)
{
  return 12;
}

uint64_t CAHDec::getMaxLumaBitDepth(CAHDec *this)
{
  return 12;
}

uint64_t AppleAVDCommandBuilder::destroyDecoder(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v30 = 136315138;
    long long v31 = "destroyDecoder";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Error: NULL decoder", (uint8_t *)&v30, 0xCu);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    int v9 = *(_DWORD *)(a1 + 4 * v6 + 16);
    if (v9 >= 1)
    {
      unsigned int v10 = (int *)(a1 + 24 + (v6 << 7));
      uint64_t v11 = *(unsigned int *)(a1 + 4 * v6 + 16);
      uint64_t v12 = &a3[32 * v6 + 3];
      do
      {
        int v13 = *v10++;
        *v12++ = v13;
        --v11;
      }
      while (v11);
    }
    char v7 = 0;
    a3[v6 + 1] = v9;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  LODWORD(v14) = *(_DWORD *)(a1 + 280);
  if ((int)v14 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 100;
    do
    {
      int v17 = *(_DWORD *)(a1 + 284 + 4 * v15);
      a3[v15 + 67] = v17;
      uint64_t v18 = a1 + 104 * v17;
      long long v19 = &a3[v16];
      long long v21 = *(_OWORD *)(v18 + 480);
      long long v20 = *(_OWORD *)(v18 + 496);
      long long v22 = *(_OWORD *)(v18 + 464);
      *((void *)v19 + 12) = *(void *)(v18 + 512);
      *((_OWORD *)v19 + 4) = v21;
      *((_OWORD *)v19 + 5) = v20;
      *((_OWORD *)v19 + 3) = v22;
      long long v23 = *(_OWORD *)(v18 + 416);
      long long v24 = *(_OWORD *)(v18 + 448);
      *((_OWORD *)v19 + 1) = *(_OWORD *)(v18 + 432);
      *((_OWORD *)v19 + 2) = v24;
      *(_OWORD *)long long v19 = v23;
      ++v15;
      uint64_t v14 = *(int *)(a1 + 280);
      v16 += 52;
    }
    while (v15 < v14);
  }
  *a3 = v14;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  unsigned int v25 = *(_DWORD *)(a1 + 5616);
  if ((v25 == 28 || v25 > 0x12E) && (*(unsigned char *)(a1 + 6052) & 8) != 0)
  {
    int v26 = CAVDDecoder::deallocAVDMem(*(void *)(a1 + 8), (uint64_t *)(a1 + 6056));
    if (v26)
    {
      int v27 = v26;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = 136315394;
        long long v31 = "destroyDecoder";
        __int16 v32 = 1024;
        int v33 = v27;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Failed to destroy histogram stat buffer! status: 0x%x", (uint8_t *)&v30, 0x12u);
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, int *))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), 3, &v30);
  uint64_t v29 = *(void *)(a1 + 6296);
  *(unsigned char *)(v29 + 2) = v34;
  *(unsigned char *)(v29 + 5) = v35;
  return result;
}

uint64_t AppleAVDCommandBuilder::createDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 6052) = *(_DWORD *)(a2 + 36);
  *(void *)a1 = a4;
  *(unsigned char *)(a1 + 5905) = 0;
  *(unsigned char *)(a1 + 5904) = *(unsigned char *)(a2 + 30);
  *(void *)(a1 + 5656) = 0;
  *(_DWORD *)(a1 + 5652) = 0;
  *(_DWORD *)(a1 + 5892) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 6248) = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 6033) = 0;
  *(_DWORD *)(a1 + 5684) = 1;
  switch(*(_DWORD *)(a1 + 5416))
  {
    case 1:
      if (*(_DWORD *)(a1 + 5616) >= 0xDu) {
        operator new();
      }
      return result;
    case 2:
      int v4 = *(_DWORD *)(a4 + 52);
      if (v4 == 1) {
        operator new();
      }
      if (!v4) {
        operator new();
      }
      return result;
    case 3:
      operator new();
    case 4:
      operator new();
    default:
      break;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "createDecoder";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported codec type \n", buf, 0xCu);
  }
  return 310;
}

void sub_2239870FC(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v1, 0x10B1C40C982656BLL);
  _Unwind_Resume(a1);
}

uint64_t AppleAVDDecodeFrameInternal(uint64_t a1, unint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  bzero(v48, 0x918uLL);
  int v36 = 0;
  uint64_t v35 = 0;
  int v85 = a8;
  unint64_t v43 = a2;
  int v44 = a3;
  unsigned int v45 = a4;
  int v46 = a5;
  int v47 = a6;
  char v57 = *(unsigned char *)(a1 + 880);
  int v16 = *(_DWORD *)(a1 + 1300);
  v48[0] = a7;
  char v49 = *(unsigned char *)(a1 + 1492);
  char v17 = *(unsigned char *)(a1 + 1008);
  if (*(_DWORD *)(a1 + 1012)) {
    int v18 = 1;
  }
  else {
    int v18 = *(unsigned __int8 *)(a1 + 1008);
  }
  v48[2] = v16;
  v48[3] = v18;
  char v55 = v17;
  int v56 = *(_DWORD *)(a1 + 3620);
  int v58 = *(_DWORD *)(a1 + 3624);
  int v61 = *(_DWORD *)(a1 + 1284);
  uint64_t v62 = *(void *)(a1 + 1016);
  int v63 = *(_DWORD *)(a1 + 1024);
  int v64 = *(_DWORD *)(a1 + 3616);
  int v19 = *(_DWORD *)(a1 + 52);
  int v68 = *(_DWORD *)(a1 + 56);
  int v69 = *(_DWORD *)(a1 + 3792);
  int v70 = v19;
  int v71 = *(_DWORD *)(a1 + 60);
  long long v20 = *(_OWORD *)(a1 + 176);
  long long v78 = *(_OWORD *)(a1 + 160);
  long long v79 = v20;
  long long v21 = *(_OWORD *)(a1 + 144);
  long long v76 = *(_OWORD *)(a1 + 128);
  long long v77 = v21;
  long long v22 = *(_OWORD *)(a1 + 112);
  long long v74 = *(_OWORD *)(a1 + 96);
  long long v75 = v22;
  long long v23 = *(_OWORD *)(a1 + 80);
  long long v72 = *(_OWORD *)(a1 + 64);
  long long v73 = v23;
  __int16 v80 = *(_WORD *)(a1 + 192);
  int v81 = *(_DWORD *)(a1 + 196);
  int v84 = *(_DWORD *)(a1 + 3880);
  if (*(unsigned char *)(a1 + 3885))
  {
    char v66 = 1;
    int v67 = *(_DWORD *)(a1 + 3888);
  }
  if (*(unsigned char *)(a1 + 3628))
  {
    char v59 = *(unsigned char *)(a1 + 3628);
    uint64_t v60 = *(void *)(a1 + 3632);
  }
  RingBuffer::getRingBufferInfo(*(void *)(a1 + 888), (uint64_t)v34);
  if (v34[1] <= a2 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: nalData* out of range!\n", buf, 2u);
  }
  BOOL v83 = *(_DWORD *)(a1 + 3664) != 0;
  uint64_t v50 = *(void *)(a1 + 1520);
  long long v51 = *(_OWORD *)(a1 + 1528);
  unsigned int v24 = *(_DWORD *)(a1 + 1496);
  if ((v24 & 0xFFFFFFFE) == 4 || *(unsigned char *)(a1 + 1493) && v24 <= 3 && v24 != 1)
  {
    unsigned int v54 = *(_DWORD *)(a1 + 3592);
    size_t v25 = 4 * v54;
    memcpy(&v52, (const void *)(a1 + 1544), v25);
    memcpy(&v53, (const void *)(a1 + 2568), v25);
  }
  else
  {
    unsigned int v54 = 0;
  }
  int v26 = a2 - LODWORD(v34[0]);
  if ((a2 - v34[0]) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    long long v38 = "AppleAVDDecodeFrameInternal";
    __int16 v39 = 1024;
    int v40 = 926;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v26 = a2 - LODWORD(v34[0]);
  }
  int v27 = *(_DWORD *)(a1 + 3752);
  v48[1] = v26;
  int v65 = v27;
  int v82 = *(_DWORD *)(a1 + 3840);
  uint64_t v28 = AppleAVDCommandBuilder::decodeFrameFig(*(void *)(a1 + 3848), (uint64_t)&v43, (int *)&v35);
  if (v28)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      long long v38 = "AppleAVDDecodeFrameInternal";
      __int16 v39 = 1024;
      int v40 = v28;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): cmdBuilder->decodeFrameFig returned error: %d \n", buf, 0x12u);
    }
  }
  else if (v35 == 503)
  {
    AppleAVDReleaseCVPixelBuffer(a1, a6, 0, a4, 0);
    if (*(unsigned char *)(a1 + 880))
    {
      uint64_t v29 = a6;
      int v30 = 0;
    }
    else
    {
      uint64_t v29 = a5;
      int v30 = 1;
    }
    AppleAVDReleaseCVPixelBuffer(a1, v29, v30, a4, 0);
  }
  int v31 = HIDWORD(v35);
  *(_DWORD *)(a1 + 3596) = HIDWORD(v35);
  if (v31 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    long long v38 = "AppleAVDDecodeFrameInternal";
    __int16 v39 = 1024;
    int v40 = a4;
    __int16 v41 = 1024;
    int v42 = v31;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Frame# %d, DecodeFrame failed with decryptError: %d\n", buf, 0x18u);
  }
  int v32 = v35;
  *(_DWORD *)(a1 + 3916) = v36;
  *(_DWORD *)(a1 + 3912) = v32;
  if (v32 && v32 != 503)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      long long v38 = "AppleAVDDecodeFrameInternal";
      __int16 v39 = 1024;
      int v40 = v32;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed - error: %d \n", buf, 0x12u);
    }
    if (v32 != 305 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      long long v38 = "AppleAVDDecodeFrameInternal";
      __int16 v39 = 1024;
      int v40 = a4;
      __int16 v41 = 1024;
      int v42 = v32;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): avdDec - Frame# %6d, DecodeFrame failed with error: 0x%x \n", buf, 0x18u);
    }
  }
  return v28;
}

uint64_t AppleAVDCommandBuilder::decodeFrameFig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  kdebug_trace();
  uint64_t result = AppleAVDCommandBuilder::decodeFrameFigHelper_CheckParameters(a1, a2, (uint64_t)a3);
  if (!result)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 12) & 0xF;
    uint64_t v8 = *(void *)(a1 + 5608);
    int v9 = (_WORD *)(v8 + 3664 * v7);
    bzero(v9, 0xE50uLL);
    int v10 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 5668) = v10;
    *(_DWORD *)(a1 + 5676) = *(_DWORD *)(a2 + 2180);
    *(_DWORD *)(a1 + 5680) = *(_DWORD *)(a2 + 2188);
    *(_DWORD *)(a1 + 5684) = *(_DWORD *)(a2 + 2328);
    *(unsigned char *)(a1 + 6032) = *(unsigned char *)(a2 + 2128);
    *(_DWORD *)(a1 + 5652) = *(_DWORD *)(a2 + 8);
    int v11 = *(unsigned __int8 *)(a2 + 2120);
    *(unsigned char *)(a1 + 5904) = v11;
    *(_DWORD *)(a1 + 6252) = *(_DWORD *)(a2 + 2332);
    if (*(_DWORD *)(a2 + 2344))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "decodeFrameFig";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v10;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): foreError detected!! frameNumber: %d", buf, 0x12u);
      }
      BOOL v12 = 0;
      int v13 = 316;
      goto LABEL_16;
    }
    *(void *)(a1 + 5656) = *(void *)(a1 + 5408) + *(unsigned int *)(a2 + 28);
    if (!*(unsigned char *)(a1 + 5905) && v11 == 1)
    {
      int v14 = AppleAVDCommandBuilder::allocRVRAMemory((AppleAVDCommandBuilder *)a1, *(_DWORD *)(a1 + 5632), *(_DWORD *)(a1 + 5636));
      if (v14)
      {
        int v13 = v14;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          uint64_t v15 = &_os_log_internal;
          int v16 = "AppleAVD: createDecoder() error creating rvra buffers!";
          uint32_t v17 = 2;
LABEL_11:
          _os_log_impl(&dword_223977000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, v17);
        }
LABEL_15:
        BOOL v12 = 0;
        goto LABEL_16;
      }
      *(unsigned char *)(a1 + 5905) = 1;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 29, a1 + 5912);
    }
    int v18 = AppleAVDCommandBuilder::decodeFrameFigHelper_VASetParameters(a1, a2);
    if (v18)
    {
      int v13 = v18;
      goto LABEL_15;
    }
    a3[1] = 0;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 11, a2 + 2196);
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 40, a2 + 2116);
    int v67 = *(_DWORD *)(a1 + 6248);
    if (!v67) {
      goto LABEL_96;
    }
    if (*(_DWORD *)(a2 + 2116))
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 41, a2 + 1092);
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 42, a2 + 68);
      int v67 = *(_DWORD *)(a1 + 6248);
    }
    if (v67 != 4)
    {
      if (v67 == 2)
      {
        uint64_t v68 = *(void *)(a1 + 5656);
        int v69 = *(_DWORD *)(a1 + 5892);
        if (v69 == 5)
        {
          uint64_t v76 = *(void *)(a1 + 6240);
          *(_DWORD *)(v76 + 216) = 2;
          *(void *)(v76 + 236) = 1;
          *(void *)(v76 + 220) = *(void *)(a2 + 52);
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 37, *(void *)(a1 + 6240) + 216);
          *(_DWORD *)(*(void *)(a1 + 6240) + 244) = *(unsigned __int16 *)(*(void *)(a1 + 6240) + 246) << 16;
          *(_DWORD *)(*(void *)(a1 + 6240) + 244) |= 0x10000u;
          int v71 = *(void (**)(void))(**(void **)(a1 + 8) + 96);
          goto LABEL_119;
        }
        if (v69 == 4 && *(_DWORD *)(a2 + 48) && *(_DWORD *)(a1 + 5416) == 4)
        {
          uint64_t v70 = *(void *)(a1 + 6240);
          *(_DWORD *)(v70 + 216) = 4;
          *(void *)(v70 + 236) = 0x100000001;
          *(_OWORD *)(v70 + 220) = *(_OWORD *)(a2 + 52);
          int v71 = *(void (**)(void))(**(void **)(a1 + 8) + 96);
LABEL_119:
          v71();
        }
LABEL_97:
        *(_DWORD *)(a1 + 5688) = *(_DWORD *)(a2 + 20);
        unsigned int v73 = *(_DWORD *)(a1 + 5616);
        if ((v73 == 28 || v73 >= 0x12F) && (*(unsigned char *)(a1 + 6052) & 8) != 0) {
          (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 52, *(void *)(a1 + 6056));
        }
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 25, a2 + 2336);
        kdebug_trace();
        int v13 = (*(uint64_t (**)(void, uint64_t, void, void, void, void, void, _WORD *))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v68, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 24), v9 + 1736);
        kdebug_trace();
        BOOL v12 = v13 == 0;
        if (!v13 || v13 == 51 || v13 == 409)
        {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), 23, a1 + 5640);
          (*(void (**)(void, uint64_t, _WORD *))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), 8, v9 + 1790);
          if (*(_DWORD *)(a1 + 6248) == 3)
          {
            int SampleBufferForSIODecrypt = AppleAVDCommandBuilder::retrieveSampleBufferForSIODecrypt((void **)a1);
            if (SampleBufferForSIODecrypt) {
              int v13 = SampleBufferForSIODecrypt;
            }
          }
LABEL_16:
          if (*(unsigned char *)(a2 + 2128))
          {
            unsigned int v19 = *(_DWORD *)(a2 + 20);
            if (v19 == -1) {
              goto LABEL_19;
            }
          }
          else
          {
            unsigned int v19 = *(_DWORD *)(a2 + 16);
            if (v19 > 0x2F)
            {
LABEL_19:
              *((_DWORD *)v9 + 903) = *(_DWORD *)(a2 + 2168);
              *((_DWORD *)v9 + 859) = *(_DWORD *)(a2 + 12);
              *((_DWORD *)v9 + 864) = *(_DWORD *)(a2 + 28);
              *((_DWORD *)v9 + 865) = *(_DWORD *)(a2 + 8);
              *((_DWORD *)v9 + 894) = a3[1];
              int v27 = (int *)(a2 + 20);
              int v26 = *(_DWORD *)(a2 + 20);
              *((_DWORD *)v9 + 861) = v26;
              *((_DWORD *)v9 + 863) = v26;
              *((void *)v9 + 452) = *(void *)(a2 + 2180);
              int v28 = *(_DWORD *)(a2 + 2188);
              *((_DWORD *)v9 + 906) = v28;
              BOOL v29 = v28 == 0;
              uint64_t v30 = 2192;
              if (v29) {
                uint64_t v30 = 12;
              }
              int v31 = *(_DWORD *)(a2 + v30);
              uint64_t v32 = 3664 * v7;
              *((_DWORD *)v9 + 907) = v31;
              *((void *)v9 + 454) = *(void *)(a2 + 2140);
              LODWORD(v33) = *(_DWORD *)(a1 + 280);
              if ((int)v33 >= 1)
              {
                uint64_t v34 = 0;
                uint64_t v35 = a1 + 284;
                uint64_t v36 = v32 + v8 + 104;
                do
                {
                  *(unsigned char *)(v32 + v8 + 68 + v34) = *(_DWORD *)(v35 + 4 * v34);
                  uint64_t v37 = a1 + 104 * *(int *)(v35 + 4 * v34);
                  long long v38 = *(_OWORD *)(v37 + 416);
                  long long v39 = *(_OWORD *)(v37 + 448);
                  *(_OWORD *)(v36 + 16) = *(_OWORD *)(v37 + 432);
                  *(_OWORD *)(v36 + 32) = v39;
                  *(_OWORD *)uint64_t v36 = v38;
                  long long v40 = *(_OWORD *)(v37 + 464);
                  long long v41 = *(_OWORD *)(v37 + 480);
                  long long v42 = *(_OWORD *)(v37 + 496);
                  *(void *)(v36 + 96) = *(void *)(v37 + 512);
                  *(_OWORD *)(v36 + 64) = v41;
                  *(_OWORD *)(v36 + 80) = v42;
                  *(_OWORD *)(v36 + 48) = v40;
                  ++v34;
                  uint64_t v33 = *(int *)(a1 + 280);
                  v36 += 104;
                }
                while (v34 < v33);
              }
              *int v9 = v33;
              unsigned int v43 = *(_DWORD *)(a1 + 5416);
              if (v43 >= 3)
              {
                if (v43 != 3)
                {
                  if (v43 != 4) {
                    goto LABEL_28;
                  }
                  if (*(unsigned char *)(a1 + 6032))
                  {
                    int v56 = -1;
                    *((_DWORD *)v9 + 860) = -1;
                    if ((int)v33 >= 1) {
                      int v27 = (int *)(a1 + 4 * (v33 - 1) + 284);
                    }
                    int v57 = *v27;
                    *((_DWORD *)v9 + 861) = v57;
                  }
                  else
                  {
                    long long v72 = (int *)(a2 + 16);
                    if ((int)v33 >= 1) {
                      long long v72 = (int *)(a1 + 4 * (v33 - 1) + 284);
                    }
                    int v56 = *v72;
                    *((_DWORD *)v9 + 860) = *v72;
                    int v57 = *((_DWORD *)v9 + 861);
                  }
                  *((_DWORD *)v9 + 862) = v56;
                  *((_DWORD *)v9 + 863) = v57;
                  if (*((_DWORD *)v9 + 903) == 1)
                  {
LABEL_28:
                    uint64_t v45 = 0;
                    uint64_t v46 = v32 + v8 + 4;
                    char v47 = 1;
                    do
                    {
                      char v48 = v47;
                      uint64_t v49 = a1 + 4 * v45;
                      int v52 = *(_DWORD *)(v49 + 16);
                      uint64_t v50 = (int *)(v49 + 16);
                      LOBYTE(v51) = v52;
                      if (v52 >= 1)
                      {
                        uint64_t v53 = 0;
                        do
                        {
                          *(unsigned char *)(v46 + 32 * v45 + v53) = *(_DWORD *)(a1 + 24 + (v45 << 7) + 4 * v53);
                          ++v53;
                          uint64_t v51 = *v50;
                        }
                        while (v53 < v51);
                      }
                      char v47 = 0;
                      *((unsigned char *)v9 + v45 + 2) = v51;
                      *uint64_t v50 = 0;
                      uint64_t v45 = 1;
                    }
                    while ((v48 & 1) != 0);
                    *a3 = v13;
                    *((_DWORD *)v9 + 858) = v13;
                    (*(void (**)(void, uint64_t, _WORD *))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), 10, v9 + 1824);
                    if (!v13) {
                      (*(void (**)(void, uint64_t, _WORD *))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), 4, v9 + 1826);
                    }
                    unsigned int v54 = *(unsigned char **)(a1 + 6296);
                    v54[27] |= *(unsigned char *)(a2 + 2336);
                    if (*(_DWORD *)(a1 + 5416) == 4)
                    {
                      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), 55, a1 + 6256);
                      unsigned int v54 = *(unsigned char **)(a1 + 6296);
                      v54[28] |= *(unsigned char *)(a1 + 6256);
                      if (!v54[25])
                      {
                        if (*((unsigned char *)v9 + 3574))
                        {
                          v54[25] = 1;
                          v54[26] = *(_DWORD *)(a1 + 6252);
                        }
                      }
                    }
                    v54[22] |= *(unsigned char *)(a1 + 6032);
                    v54[24] = (*(_DWORD *)(a2 + 2148) | v54[24]) != 0;
                    v54[23] = (v54[23] | *(unsigned __int8 *)(a2 + 2136)) != 0;
                    v54[29] = 1;
                    int v55 = v13;
                    if (v13)
                    {
                      if (v13 == 51)
                      {
                        int v55 = 0;
                        *a3 = 0;
                        *((_DWORD *)v9 + 858) = 0;
                        goto LABEL_58;
                      }
                      int v58 = RingBuffer::waitForRingBuffersOutstanding(*(RingBuffer **)(*(void *)a1 + 888), 1u, 10000);
                      if (v58)
                      {
                        int v59 = v58;
                        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 136315394;
                          *(void *)&uint8_t buf[4] = "decodeFrameFig";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = v59;
                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): timeout timeoutStatus: %d", buf, 0x12u);
                        }
                      }
                      int v55 = v13;
                      if (v13 == 410)
                      {
LABEL_56:
                        if (v12) {
                          goto LABEL_58;
                        }
                        goto LABEL_57;
                      }
                      if (v13 == 409)
                      {
                        *a3 = 0;
                        int v55 = 409;
                        *((_DWORD *)v9 + 858) = 409;
                        goto LABEL_56;
                      }
                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 136315138;
                        *(void *)&uint8_t buf[4] = "decodeFrameFig";
                        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Error! Calling processHWResponse()!", buf, 0xCu);
                      }
                      int v55 = 315;
                      if (!v12) {
LABEL_57:
                      }
                        AppleAVDCommandBuilder::setReleaseCurrentBuffersToResponseBuffer(a1, (uint64_t)v9);
                    }
LABEL_58:
                    int v60 = AppleAVDCommandBuilder::decodeFrameFigHelper_CreateAndSubmitDecodeCMD(a1, a2, v13, v55);
                    if (v60)
                    {
                      if (*(_DWORD *)(a2 + 2188))
                      {
                        if ((v60 - 409) < 2 || v60 == 51) {
                          goto LABEL_72;
                        }
                        *(_DWORD *)__str = 1;
                        int v61 = (*(uint64_t (**)(void, uint64_t, char *))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 19, __str);
                        if (v61)
                        {
                          int v62 = v61;
                          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)buf = 67109120;
                            *(_DWORD *)&uint8_t buf[4] = v62;
                            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDDecodeFrameResponse kVASetSkipToNextIDR error: %d", buf, 8u);
                          }
                        }
                        if (!*(_DWORD *)(a2 + 2184)) {
                          goto LABEL_72;
                        }
                        int v63 = RingBuffer::waitForRingBuffersOutstanding(*(RingBuffer **)(*(void *)a1 + 888), 0, 10000);
                        if (!v63) {
                          goto LABEL_72;
                        }
                        int v64 = v63;
                        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                          goto LABEL_72;
                        }
                      }
                      else
                      {
                        int v65 = RingBuffer::waitForRingBuffersOutstanding(*(RingBuffer **)(*(void *)a1 + 888), 0, 10000);
                        if (!v65) {
                          goto LABEL_72;
                        }
                        int v64 = v65;
                        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                          goto LABEL_72;
                        }
                      }
                      *(_DWORD *)buf = 136315394;
                      *(void *)&uint8_t buf[4] = "decodeFrameFig";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v64;
                      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): timeout timeoutStatus: %d", buf, 0x12u);
                    }
LABEL_72:
                    kdebug_trace();
                    return 0;
                  }
LABEL_27:
                  *(_DWORD *)(a1 + 280) = 0;
                  goto LABEL_28;
                }
                int v66 = *(_DWORD *)(a2 + 16);
                *((_DWORD *)v9 + 860) = v66;
                *((_DWORD *)v9 + 862) = v66;
                if (v13 != 51) {
                  goto LABEL_27;
                }
                if (*(unsigned char *)(a1 + 6032))
                {
                  *((_DWORD *)v9 + 862) = -1;
                  *((_DWORD *)v9 + 863) = *(_DWORD *)(a1 + 6260);
                  goto LABEL_27;
                }
                int v44 = *(_DWORD *)(a1 + 6260);
              }
              else
              {
                int v44 = *(_DWORD *)(a2 + 16);
                *((_DWORD *)v9 + 860) = v44;
              }
              *((_DWORD *)v9 + 862) = v44;
              goto LABEL_27;
            }
          }
          uint64_t v20 = a1 + 104 * v19;
          long long v21 = *((_OWORD *)v9 + 217);
          long long v22 = *((_OWORD *)v9 + 219);
          *(_OWORD *)(v20 + 432) = *((_OWORD *)v9 + 218);
          *(_OWORD *)(v20 + 448) = v22;
          *(_OWORD *)(v20 + 416) = v21;
          long long v23 = *((_OWORD *)v9 + 220);
          long long v24 = *((_OWORD *)v9 + 221);
          long long v25 = *((_OWORD *)v9 + 222);
          *(void *)(v20 + 512) = *((void *)v9 + 446);
          *(_OWORD *)(v20 + 480) = v24;
          *(_OWORD *)(v20 + 496) = v25;
          *(_OWORD *)(v20 + 464) = v23;
          goto LABEL_19;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_15;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "decodeFrameFig";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v13;
        uint64_t v15 = &_os_log_internal;
        int v16 = "AppleAVD: %s(): ERROR! Failed to decode frame - status (%d)";
LABEL_115:
        uint32_t v17 = 18;
        goto LABEL_11;
      }
LABEL_96:
      a3[1] = 0;
      uint64_t v68 = *(void *)(a1 + 5656);
      goto LABEL_97;
    }
    if (*(_DWORD *)(a1 + 5416) != 1)
    {
      int v80 = *(_DWORD *)(a1 + 5416);
      int v13 = -536870206;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "decodeFrameFig";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v80;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&uint8_t buf[20] = 4;
      uint64_t v15 = &_os_log_internal;
      int v16 = "AppleAVD: %s incompatible codec %d and decrypt method %d";
      uint32_t v17 = 24;
      goto LABEL_11;
    }
    int v75 = *(_DWORD *)(a1 + 5892);
    if (v75)
    {
      if (v75 != 3)
      {
        if (v75 != 2)
        {
          int v81 = *(_DWORD *)(a1 + 5892);
          int v13 = -536870206;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_15;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "decodeFrameFig";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v81;
          uint64_t v15 = &_os_log_internal;
          int v16 = "AppleAVD: %s(): transcryption attempted with incompatible scheme %d";
          goto LABEL_115;
        }
        *(_DWORD *)(*(void *)(a1 + 6240) + 244) |= 0x100000u;
        *(unsigned char *)(*(void *)(a1 + 6240) + 244) = 1;
        *(unsigned char *)(*(void *)(a1 + 6240) + 245) = 9;
        goto LABEL_128;
      }
      *(unsigned char *)(*(void *)(a1 + 6240) + 244) = 10;
      *(_DWORD *)(*(void *)(a1 + 6240) + 244) &= 0xFFFF00FF;
      char v85 = 0;
      memset(buf, 0, sizeof(buf));
      *(void *)__str = 0;
      uint64_t v83 = 0;
      if (*(_DWORD *)(a2 + 48))
      {
        unint64_t v78 = 0;
        do
        {
          snprintf(__str, 3uLL, "%02x", *(unsigned __int8 *)(a2 + 52 + v78));
          strlcat((char *)buf, __str, 0x21uLL);
          ++v78;
        }
        while (v78 < *(unsigned int *)(a2 + 48));
      }
    }
    else
    {
      *(_DWORD *)(*(void *)(a1 + 6240) + 244) &= ~0x100000u;
      *(unsigned char *)(*(void *)(a1 + 6240) + 244) = 10;
      *(_DWORD *)(*(void *)(a1 + 6240) + 244) &= 0xFFFF00FF;
      char v85 = 0;
      memset(buf, 0, sizeof(buf));
      *(void *)__str = 0;
      uint64_t v83 = 0;
      if (*(_DWORD *)(a2 + 48))
      {
        unint64_t v77 = 0;
        do
        {
          snprintf(__str, 3uLL, "%02x", *(unsigned __int8 *)(a2 + 52 + v77));
          strlcat((char *)buf, __str, 0x21uLL);
          ++v77;
        }
        while (v77 < *(unsigned int *)(a2 + 48));
      }
    }
    uint64_t v79 = *(void *)(a1 + 6240);
    *(_DWORD *)(v79 + 216) = 4;
    *(void *)(v79 + 236) = 0x100000001;
    *(_OWORD *)(v79 + 220) = *(_OWORD *)(a2 + 52);
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 37, *(void *)(a1 + 6240) + 216);
LABEL_128:
    *(_DWORD *)(*(void *)(a1 + 6240) + 244) &= 0x3FFFFFu;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 39, *(void *)(a1 + 6240) + 244);
    uint64_t v68 = *(void *)(a1 + 5656);
    goto LABEL_97;
  }
  return result;
}

uint64_t CAVDHevcDecoder::VAGetParams(CAVDHevcDecoder *this, int a2, unsigned int *a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v5 = (_DWORD *)(*((void *)this + 1035) + 23176 * *((int *)this + 2080));
      unsigned int v6 = v5[16];
      unsigned int v7 = v5[903] * v5[902];
      if (v6 >= 0x9D) {
        int v8 = 35651584;
      }
      else {
        int v8 = 8912896;
      }
      if (v6 >= 0x7C) {
        int v9 = v8;
      }
      else {
        int v9 = 2228224;
      }
      if (v6 >= 0x5E) {
        int v10 = v9;
      }
      else {
        int v10 = 983040;
      }
      if (v6 >= 0x5B) {
        int v11 = v10;
      }
      else {
        int v11 = 552960;
      }
      if (v6 >= 0x40) {
        int v12 = v11;
      }
      else {
        int v12 = 245760;
      }
      if (v6 >= 0x3D) {
        int v13 = v12;
      }
      else {
        int v13 = 122880;
      }
      if (v6 >= 0x1F) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = 36864;
      }
      if (v7 <= v14 >> 2)
      {
        int v15 = 16;
      }
      else if (v7 <= v14 >> 1)
      {
        int v15 = 12;
      }
      else if (v7 <= (3 * v14) >> 2)
      {
        int v15 = 8;
      }
      else
      {
        int v15 = 6;
      }
      break;
    case 1:
      long long v21 = *(uint64_t (**)(void))(*(void *)this + 384);
      return v21();
    case 2:
      *(void *)a3 = (*(uint64_t (**)(void))(**((void **)this + 262) + 160))(*((void *)this + 262));
      a3[2] = (*(uint64_t (**)(void))(**((void **)this + 262) + 168))(*((void *)this + 262));
      return 0;
    case 3:
      unsigned int v16 = *((_DWORD *)this + 2080);
      if ((v16 & 0x80000000) == 0)
      {
        uint64_t v17 = *((void *)this + 1035) + 23176 * v16;
        *((unsigned char *)a3 + 88) = *(unsigned char *)(v17 + 3616);
        uint64_t v18 = *(void *)(v17 + 3620);
        char v19 = *(unsigned char *)(v17 + 22312);
        *((void *)a3 + 2) = *(void *)(v17 + 3628);
        *((unsigned char *)a3 + 89) = v19;
        *((unsigned char *)a3 + 32) = *(_DWORD *)(v17 + 3600);
        *((unsigned char *)a3 + 33) = *(_DWORD *)(v17 + 3636);
        *((unsigned char *)a3 + 34) = *(_DWORD *)(v17 + 3640);
        *(void *)&long long v20 = *(void *)(v17 + 3608);
        *((void *)&v20 + 1) = v18;
        *(_OWORD *)a3 = v20;
      }
      return 0;
    case 4:
      *a3 = *((_DWORD *)this + 703);
      *((_WORD *)a3 + 2) = *((_WORD *)this + 1408);
      return 0;
    case 5:
      int v15 = *((_DWORD *)this + 959) + 1;
      break;
    case 7:
      *(void *)a3 = (*(uint64_t (**)(void, void))(**((void **)this + 262) + 176))(*((void *)this + 262), *((unsigned int *)this + 2106));
      *((void *)a3 + 1) = (*(uint64_t (**)(void, void))(**((void **)this + 262) + 184))(*((void *)this + 262), *((unsigned int *)this + 2106));
      a3[4] = (*(uint64_t (**)(void, void))(**((void **)this + 262) + 192))(*((void *)this + 262), *((unsigned int *)this + 2106));
      a3[5] = (*(uint64_t (**)(void, void))(**((void **)this + 262) + 200))(*((void *)this + 262), *((unsigned int *)this + 2106));
      a3[6] = (*(uint64_t (**)(void))(**((void **)this + 262) + 216))(*((void *)this + 262));
      a3[7] = 3;
      return 0;
    case 8:
      if (!a3) {
        return 0;
      }
      int v15 = *((_DWORD *)this + 717);
      break;
    case 9:
      int v15 = *((unsigned __int8 *)this + 12);
      break;
    case 10:
      int v15 = *((_DWORD *)this + 4);
      break;
    case 23:
      if (!a3) {
        return 0;
      }
      int v15 = *((_DWORD *)this + 750);
      break;
    default:
      return 0;
  }
  *a3 = v15;
  return 0;
}

uint64_t CAHDecCatnipHevc::decodeBuffer(CAHDecCatnipHevc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t AppleAVDCommandBuilder::decodeFrameFigHelper_CreateAndSubmitDecodeCMD(uint64_t a1, uint64_t a2, int a3, int a4)
{
  kern_return_t v18;
  kern_return_t v19;
  size_t v21;
  unsigned int outputStruct;
  uint64_t v23;
  int v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  kern_return_t v28;
  uint64_t inputStruct;
  int v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  _DWORD v42[28];
  int v43;
  int v44;
  char v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  char v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  _DWORD v58[257];
  long long v59;
  uint64_t PatchList;
  unsigned char v61[28];
  int NumPatchRequests;
  uint64_t v63;
  void v64[2];

  v64[1] = *MEMORY[0x263EF8340];
  long long v21 = 4;
  bzero(&inputStruct, 0xB48uLL);
  long long outputStruct = 0;
  (*(void (**)(void, uint64_t, uint64_t *))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), 2, &v23);
  (*(void (**)(void, uint64_t, _DWORD *))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), 3, v42);
  (*(void (**)(void, uint64_t, void *))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), 6, v64);
  inputStruct = v23;
  uint64_t v30 = v24;
  long long v8 = *(_OWORD *)(a1 + 5576);
  long long v39 = *(_OWORD *)(a1 + 5560);
  long long v40 = v8;
  long long v41 = *(_OWORD *)(a1 + 5592);
  long long v9 = *(_OWORD *)(a1 + 5512);
  uint64_t v35 = *(_OWORD *)(a1 + 5496);
  uint64_t v36 = v9;
  long long v10 = *(_OWORD *)(a1 + 5544);
  uint64_t v37 = *(_OWORD *)(a1 + 5528);
  long long v38 = v10;
  long long v11 = *(_OWORD *)(a1 + 5448);
  int v31 = *(_OWORD *)(a1 + 5432);
  uint64_t v32 = v11;
  long long v13 = *(_OWORD *)(a1 + 5464);
  long long v12 = *(_OWORD *)(a1 + 5480);
  int v14 = *(_DWORD *)(a2 + 8);
  v42[27] = *(_DWORD *)(a2 + 12);
  unsigned int v43 = a3;
  int v44 = a4;
  uint64_t v46 = *(_DWORD *)(a2 + 2124);
  char v47 = *(_DWORD *)(a2 + 2132);
  uint64_t v45 = *(unsigned char *)(a1 + 5904);
  char v48 = *(_DWORD *)(a2 + 2328);
  int v56 = v14;
  int v55 = *(_DWORD *)(a2 + 28);
  uint64_t v50 = *(_DWORD *)(a2 + 2116);
  size_t v15 = 4 * v50;
  uint64_t v33 = v13;
  uint64_t v34 = v12;
  memcpy(&v57, (const void *)(a2 + 68), v15);
  memcpy(v58, (const void *)(a2 + 1092), v15);
  int v16 = *(_DWORD *)(a2 + 48);
  v58[256] = *(_DWORD *)(a2 + 44);
  int v59 = *(_OWORD *)(a2 + 52);
  uint64_t v49 = v16;
  uint64_t v51 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), *(unsigned int *)(a2 + 20), 0);
  if (*(unsigned char *)(a2 + 2128))
  {
    char v17 = 1;
  }
  else
  {
    int v52 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), *(unsigned int *)(a2 + 16), 1);
    char v17 = *(unsigned char *)(a2 + 2128);
  }
  uint64_t v53 = v17;
  unsigned int v54 = *(_DWORD *)(a2 + 2340);
  PatchList = CAVDDecoder::getPatchList(*(CAVDDecoder **)(a1 + 8));
  NumPatchRequests = CAVDDecoder::getNumPatchRequests(*(CAVDDecoder **)(a1 + 8));
  *(_OWORD *)int v61 = *(_OWORD *)(a1 + 6264);
  *(_OWORD *)&v61[12] = *(_OWORD *)(a1 + 6276);
  *(void *)(a1 + 6264) = 0;
  *(void *)(a1 + 6272) = 0;
  *(void *)(a1 + 6280) = 0;
  *(_DWORD *)(a1 + 6288) = 0;
  v42[26] = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
  if (*(unsigned char *)(*(void *)(a1 + 8) + 2356))
  {
    if (!v43)
    {
      unsigned int v43 = AppleAVDCommandBuilder::populateOnDemandDVAInfo(a1, (uint64_t)&v63, *(unsigned int *)(a2 + 12));
      if (v43) {
        int v44 = 315;
      }
    }
  }
  uint64_t v18 = IOConnectCallStructMethod(**(_DWORD **)a1, 2u, &inputStruct, 0xB48uLL, &outputStruct, &v21);
  if (v18)
  {
    char v19 = v18;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v26 = "decodeFrameFigHelper_CreateAndSubmitDecodeCMD";
      int v27 = 1024;
      int v28 = v19;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): AppleAVDSubmitDecodeCMD failed: %d \n", buf, 0x12u);
    }
  }
  return outputStruct;
}

uint64_t CAVDHevcDecoder::VAGetIOSurfaceIDForBufferIndex(CAVDHevcDecoder *this, unsigned int a2, int a3)
{
  if (a2 <= 0x80)
  {
    uint64_t v3 = (char *)this + 24;
    if (a3 != 1) {
      uint64_t v3 = (char *)this + 1056;
    }
    uint64_t v4 = *(void *)&v3[8 * a2];
    if (v4) {
      return *(unsigned int *)(v4 + 160);
    }
  }
  BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v6)
  {
    *(_WORD *)unsigned int v7 = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: CAVDHevcDecoder::VAGetIOSurfaceIDForBufferIndex couldn't resolve index\n", v7, 2u);
    return 0;
  }
  return result;
}

uint64_t CAHDecCatnipHevc::decodeBufferSize(CAHDecCatnipHevc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAVDDecoder::getNumPatchRequests(CAVDDecoder *this)
{
  return *(unsigned int *)(*((void *)this + 262) + 64);
}

uint64_t CAVDDecoder::getPatchList(CAVDDecoder *this)
{
  return *(void *)(*((void *)this + 262) + 72);
}

uint64_t AppleAVDCommandBuilder::decodeFrameFigHelper_VASetParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = (unsigned __int8 *)(a2 + 2120);
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 24, a2 + 2120);
  if (v5)
  {
    uint64_t v6 = v5;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v7 = *v4;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "decodeFrameFigHelper_VASetParameters";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v6;
      *(_WORD *)&buf[18] = 1024;
      unsigned int v29 = v7;
      long long v8 = &_os_log_internal;
      long long v9 = "AppleAVD: ERROR: %s(): Failed to set usage mode parameter - status %d usageMode %d\n";
LABEL_4:
      long long v10 = buf;
      uint32_t v11 = 24;
LABEL_19:
      _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, v9, v10, v11);
      return v6;
    }
    return v6;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 5416) - 1;
  if (v12 > 1)
  {
LABEL_10:
    if (v12 <= 2
      && (uint64_t v15 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 22, 0), v15))
    {
      uint64_t v6 = v15;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v6;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "decodeFrameFigHelper_VASetParameters";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v6;
      long long v8 = &_os_log_internal;
      long long v9 = "AppleAVD: %s(): ERROR! Failed to set parameter kVASetYUVMD5Hash - status %d";
    }
    else
    {
      uint64_t v16 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 12, a2 + 36);
      if (v16)
      {
        uint64_t v6 = v16;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return v6;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "decodeFrameFigHelper_VASetParameters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v6;
        long long v8 = &_os_log_internal;
        long long v9 = "AppleAVD: %s(): ERROR! Failed to set parameter kVASetDisableSkipToIDR - status %d";
      }
      else
      {
        if ((*(_DWORD *)(a2 + 2152) & 0xFFFFFFFE) != 2) {
          goto LABEL_31;
        }
        unsigned int v18 = *(_DWORD *)(a2 + 2156);
        int v24 = *(_DWORD *)(a2 + 2152);
        LODWORD(v25) = v18;
        unsigned int v19 = *(_DWORD *)(a2 + 2160);
        HIDWORD(v25) = v19;
        if (!v18 || !v19 || v18 > *(_DWORD *)(a1 + 5632) || v19 > *(_DWORD *)(a1 + 5636))
        {
          uint64_t v6 = 3758097084;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return v6;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "decodeFrameFigHelper_VASetParameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v18;
          *(_WORD *)&buf[18] = 1024;
          unsigned int v29 = v19;
          long long v8 = &_os_log_internal;
          long long v9 = "AppleAVD: %s(): ERROR! Invalid VRA Dimensions - w:%d h:%d";
          goto LABEL_4;
        }
        uint64_t v20 = (*(uint64_t (**)(void, uint64_t, int *))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 16, &v24);
        if (v20)
        {
          uint64_t v6 = v20;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return v6;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "decodeFrameFigHelper_VASetParameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v6;
          long long v8 = &_os_log_internal;
          long long v9 = "AppleAVD: %s(): ERROR! Failed to set parameter kVASetVRATypeAndDimensions - status %d";
        }
        else
        {
LABEL_31:
          unsigned __int8 v21 = *(unsigned char *)(a2 + 2136);
          if (v21)
          {
            *(void *)&buf[8] = 0;
            *(_DWORD *)&buf[16] = 0;
            *(void *)buf = v21;
            uint64_t v22 = *(void *)(a2 + 2140);
            *(unsigned char *)(a1 + 6033) = 1;
            *(void *)&uint8_t buf[4] = v22;
            uint64_t v23 = (*(uint64_t (**)(void, uint64_t, unsigned char *))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 21, buf);
            if (v23)
            {
              uint64_t v6 = v23;
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return v6;
              }
              int v24 = 136315394;
              long long v25 = "decodeFrameFigHelper_VASetParameters";
              __int16 v26 = 1024;
              int v27 = v6;
              long long v8 = &_os_log_internal;
              long long v9 = "AppleAVD: %s(): ERROR! Failed to set parameter kVASetTileDecodeParams - status %d";
              long long v10 = (uint8_t *)&v24;
              goto LABEL_18;
            }
          }
          if (!*(unsigned char *)(a2 + 2172) || *(unsigned char *)(a2 + 2136)) {
            return 0;
          }
          LOBYTE(v24) = *(unsigned char *)(a2 + 2172);
          LODWORD(v25) = *(_DWORD *)(a2 + 2176);
          uint64_t v6 = (*(uint64_t (**)(void, uint64_t, int *))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 46, &v24);
          if (!v6 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return v6;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "decodeFrameFigHelper_VASetParameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v6;
          long long v8 = &_os_log_internal;
          long long v9 = "AppleAVD: %s(): ERROR! Failed to set parameter kVASetMuxedAlphaParams - status %d";
        }
      }
    }
    long long v10 = buf;
LABEL_18:
    uint32_t v11 = 18;
    goto LABEL_19;
  }
  uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 30, a2 + 2164);
  if (!v13)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 5416) - 1;
    goto LABEL_10;
  }
  uint64_t v6 = v13;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v14 = *(_DWORD *)(a2 + 2164);
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "decodeFrameFigHelper_VASetParameters";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v6;
    *(_WORD *)&buf[18] = 1024;
    unsigned int v29 = v14;
    long long v8 = &_os_log_internal;
    long long v9 = "AppleAVD: %s(): ERROR! Failed to set HandleCRAFrameAsBLA parameter - status %d handleCRAFrameAsBLA %d";
    goto LABEL_4;
  }
  return v6;
}

double CAVDHevcDecoder::VASetParams(CAVDHevcDecoder *this, int a2, unsigned int *a3, __n128 a4)
{
  switch(a2)
  {
    case 11:
      *(_OWORD *)((char *)this + 9100) = *(_OWORD *)a3;
      long long v6 = *((_OWORD *)a3 + 1);
      long long v7 = *((_OWORD *)a3 + 2);
      long long v8 = *((_OWORD *)a3 + 4);
      *(_OWORD *)((char *)this + 9148) = *((_OWORD *)a3 + 3);
      *(_OWORD *)((char *)this + 9164) = v8;
      *(_OWORD *)((char *)this + 9116) = v6;
      *(_OWORD *)((char *)this + 9132) = v7;
      a4 = *((__n128 *)a3 + 5);
      long long v9 = *((_OWORD *)a3 + 6);
      long long v10 = *((_OWORD *)a3 + 7);
      *((_WORD *)this + 4614) = *((_WORD *)a3 + 64);
      *(_OWORD *)((char *)this + 9196) = v9;
      *(_OWORD *)((char *)this + 9212) = v10;
      *(__n128 *)((char *)this + 9180) = a4;
      break;
    case 12:
      *((unsigned char *)this + 2832) = *(unsigned char *)a3;
      break;
    case 13:
      *((_DWORD *)this + 714) = *a3;
      *((_DWORD *)this + 715) = a3[1];
      break;
    case 16:
      a4.n128_u64[0] = *(void *)(a3 + 1);
      *((void *)this + 357) = a4.n128_u64[0];
      *((_DWORD *)this + 716) = *a3;
      break;
    case 17:
      *((unsigned char *)this + 2834) = 1;
      *((void *)this + 355) = a3;
      break;
    case 18:
      *((_DWORD *)this + 712) = *a3;
      break;
    case 19:
      if (!*((unsigned char *)this + 2832)) {
        *((unsigned char *)this + 2833) = *(unsigned char *)a3;
      }
      break;
    case 21:
      *((unsigned char *)this + 3004) = *(unsigned char *)a3;
      a4.n128_u64[0] = *(void *)(a3 + 1);
      *((void *)this + 376) = a4.n128_u64[0];
      break;
    case 22:
      unsigned int v11 = *((_DWORD *)this + 771);
      unsigned int v12 = (_OWORD *)(*((void *)this + 1038) + 104 * v11 + 40);
      if (a3)
      {
        a4 = *(__n128 *)a3;
        long long v13 = *((_OWORD *)a3 + 1);
        *(_OWORD *)(*((void *)this + 1038) + 104 * v11 + 72) = *((_OWORD *)a3 + 2);
        goto LABEL_23;
      }
      a4.n128_u64[0] = 0;
      *(_OWORD *)(*((void *)this + 1038) + 104 * v11 + 56) = 0u;
      v12[2] = 0u;
      *unsigned int v12 = 0u;
      break;
    case 23:
      if (a3) {
        *((_DWORD *)this + 750) = *a3;
      }
      break;
    case 24:
      *((_DWORD *)this + 702) = *a3;
      break;
    case 25:
      int v14 = *(unsigned __int8 *)a3;
      *((unsigned char *)this + 12) = v14;
      goto LABEL_18;
    case 26:
      int v14 = *a3;
LABEL_18:
      *((_DWORD *)this + 4) = v14;
      break;
    case 27:
      if (a3[5] <= *(_DWORD *)(*((void *)this + 260) + 56))
      {
        uint64_t v15 = **((void **)this + 292);
        uint64_t v16 = *(void **)(v15 + 3688);
        IOSurfaceLock(*(IOSurfaceRef *)(v15 + 3680), 0, 0);
        memcpy(v16, *((const void **)a3 + 1), a3[5]);
        IOSurfaceUnlock(*(IOSurfaceRef *)(**((void **)this + 292) + 3680), 0, 0);
      }
      break;
    case 28:
      *((unsigned char *)this + 9060) = *(unsigned char *)a3;
      break;
    case 29:
      *((_DWORD *)this + 724) = *a3;
      *((void *)this + 360) = *((void *)a3 + 1);
      unsigned int v12 = (_OWORD *)((char *)this + 2904);
      long long v17 = *(_OWORD *)(a3 + 18);
      long long v18 = *(_OWORD *)(a3 + 26);
      long long v19 = *(_OWORD *)(a3 + 14);
      *(_OWORD *)((char *)this + 2968) = *(_OWORD *)(a3 + 22);
      *(_OWORD *)((char *)this + 2984) = v18;
      *(_OWORD *)((char *)this + 2936) = v19;
      *(_OWORD *)((char *)this + 2952) = v17;
      a4 = *(__n128 *)(a3 + 6);
      long long v13 = *(_OWORD *)(a3 + 10);
LABEL_23:
      *unsigned int v12 = a4;
      v12[1] = v13;
      break;
    case 30:
      *((_DWORD *)this + 2264) = *a3;
      break;
    case 31:
      *((unsigned char *)this + 10) = *(unsigned char *)a3;
      break;
    case 32:
      *((_DWORD *)this + 2268) = *a3;
      break;
    case 34:
      *((_DWORD *)this + 701) = *a3;
      *((_DWORD *)this + 590) = CAVDDecoder::isADSDecryption(this);
      break;
    case 35:
      a4 = *(__n128 *)a3;
      long long v20 = *((_OWORD *)a3 + 1);
      long long v21 = *((_OWORD *)a3 + 2);
      *(void *)((char *)this + 2412) = *((void *)a3 + 6);
      *(_OWORD *)((char *)this + 2396) = v21;
      *(_OWORD *)((char *)this + 2380) = v20;
      *(__n128 *)((char *)this + 2364) = a4;
      *((_DWORD *)this + 627) = 1;
      break;
    case 36:
      a4 = *(__n128 *)a3;
      long long v22 = *((_OWORD *)a3 + 1);
      long long v23 = *((_OWORD *)a3 + 2);
      *(void *)((char *)this + 2468) = *((void *)a3 + 6);
      *(_OWORD *)((char *)this + 2452) = v23;
      *(_OWORD *)((char *)this + 2436) = v22;
      *(__n128 *)((char *)this + 2420) = a4;
      *((_DWORD *)this + 628) = 1;
      break;
    case 37:
      a4 = *(__n128 *)a3;
      *(_OWORD *)((char *)this + 2488) = *(_OWORD *)(a3 + 3);
      *(__n128 *)((char *)this + 2476) = a4;
      *((_DWORD *)this + 629) = 1;
      a4.n128_u64[0] = *((void *)this + 312);
      *((void *)this + 315) = a4.n128_u64[0];
      break;
    case 38:
      *((_DWORD *)this + 629) = 1;
      break;
    case 39:
      *((_DWORD *)this + 626) = *a3;
      break;
    case 40:
      *((_DWORD *)this + 764) = *a3;
      break;
    case 41:
      *((void *)this + 380) = a3;
      break;
    case 42:
      *((void *)this + 381) = a3;
      break;
    case 43:
      int v24 = (_WORD *)(*((void *)this + 1037) + 2352);
      uint64_t v25 = 600;
      do
      {
        *int v24 = *(_WORD *)a3;
        v24 += 1180;
        --v25;
      }
      while (v25);
      break;
    case 44:
      long long v26 = *(_OWORD *)a3;
      *((_OWORD *)this + 159) = *((_OWORD *)a3 + 1);
      *((_OWORD *)this + 158) = v26;
      a4 = *((__n128 *)a3 + 2);
      long long v27 = *((_OWORD *)a3 + 3);
      long long v28 = *((_OWORD *)a3 + 4);
      *((_DWORD *)this + 652) = a3[20];
      *((_DWORD *)this + 658) = 1;
      *((_OWORD *)this + 162) = v28;
      *((_OWORD *)this + 161) = v27;
      *((__n128 *)this + 160) = a4;
      break;
    case 45:
      a4 = *(__n128 *)a3;
      *((_DWORD *)this + 657) = a3[4];
      *(__n128 *)((char *)this + 2612) = a4;
      *((_DWORD *)this + 659) = 1;
      break;
    case 46:
      *((unsigned char *)this + 3060) = *(unsigned char *)a3;
      *((_DWORD *)this + 766) = a3[1];
      break;
    case 48:
      *((_DWORD *)this + 663) = *a3;
      break;
    case 49:
      a4 = *(__n128 *)a3;
      *((_OWORD *)this + 166) = *(_OWORD *)a3;
      break;
    case 50:
      *((unsigned char *)this + 2674) = *(unsigned char *)a3;
      break;
    case 51:
      *((unsigned char *)this + 2675) = *(unsigned char *)a3;
      break;
    case 52:
      *((void *)this + 335) = a3;
      break;
    case 57:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: INFO: HEVC decoder does not support kVASetSliceHeaderThreshold, command has been ignored", v30, 2u);
      }
      break;
    default:
      return a4.n128_f64[0];
  }
  return a4.n128_f64[0];
}

uint64_t AppleAVDCommandBuilder::decodeFrameFigHelper_CheckParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a2 || !a3)
  {
    uint64_t v7 = 3758097131;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315650;
      long long v17 = "decodeFrameFigHelper_CheckParameters";
      __int16 v18 = 2048;
      *(void *)long long v19 = a2;
      *(_WORD *)&v19[8] = 2048;
      uint64_t v20 = a3;
      long long v9 = &_os_log_internal;
      long long v10 = "AppleAVD: %s(): ERROR! NULL arguments - in (%p) out (%p)";
      uint32_t v11 = 32;
      goto LABEL_17;
    }
    return v7;
  }
  if (!*(void *)(a1 + 5408))
  {
    uint64_t v7 = 3758097131;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return v7;
    }
    int v16 = 136315394;
    long long v17 = "decodeFrameFigHelper_CheckParameters";
    __int16 v18 = 2048;
    *(void *)long long v19 = 0;
    long long v9 = &_os_log_internal;
    long long v10 = "AppleAVD: %s(): ERROR! NULL input buffer base (%p)";
LABEL_16:
    uint32_t v11 = 22;
    goto LABEL_17;
  }
  if (!*(void *)(a1 + 8))
  {
    uint64_t v7 = 3758097131;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return v7;
    }
    int v16 = 136315394;
    long long v17 = "decodeFrameFigHelper_CheckParameters";
    __int16 v18 = 2048;
    *(void *)long long v19 = 0;
    long long v9 = &_os_log_internal;
    long long v10 = "AppleAVD: %s(): ERROR! NULL decoder! (%p)";
    goto LABEL_16;
  }
  unsigned int v5 = *(_DWORD *)(a2 + 28);
  if (!(v5 >> 29))
  {
    unsigned int v6 = *(_DWORD *)(a2 + 8);
    if (v6 < 0x20000001)
    {
      unsigned int v13 = *(_DWORD *)(a1 + 5476);
      if (v5 >= v13)
      {
        uint64_t v7 = 3758097131;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return v7;
        }
        int v16 = 136315650;
        long long v17 = "decodeFrameFigHelper_CheckParameters";
        __int16 v18 = 1024;
        *(_DWORD *)long long v19 = v5;
        *(_WORD *)&v19[4] = 1024;
        *(_DWORD *)&v19[6] = v13;
        long long v9 = &_os_log_internal;
        long long v10 = "AppleAVD: %s(): ERROR! Bad byte offset %d m_inputBufferMemInfo.ui32AllocSize %d";
      }
      else
      {
        if (v6 < v13)
        {
          if (v6 + v5 > v13)
          {
            uint64_t v7 = 3758097131;
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return v7;
            }
            int v16 = 136315906;
            long long v17 = "decodeFrameFigHelper_CheckParameters";
            __int16 v18 = 1024;
            *(_DWORD *)long long v19 = v6;
            *(_WORD *)&v19[4] = 1024;
            *(_DWORD *)&v19[6] = v5;
            LOWORD(v20) = 1024;
            *(_DWORD *)((char *)&v20 + 2) = v13;
            long long v9 = &_os_log_internal;
            long long v10 = "AppleAVD: %s(): ERROR! Bad input size %d offset %d >= %d";
            goto LABEL_9;
          }
          if (*(_DWORD *)(a2 + 2344)) {
            return 0;
          }
          unsigned int v14 = *(_DWORD *)(a2 + 20);
          if (v14 < 0x30)
          {
            if (*(unsigned char *)(a2 + 2128)) {
              return 0;
            }
            unsigned int v15 = *(_DWORD *)(a2 + 16);
            if (v15 < 0x30) {
              return 0;
            }
            uint64_t v7 = 3758097131;
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return v7;
            }
            int v16 = 136315394;
            long long v17 = "decodeFrameFigHelper_CheckParameters";
            __int16 v18 = 1024;
            *(_DWORD *)long long v19 = v15;
            long long v9 = &_os_log_internal;
            long long v10 = "AppleAVD: %s(): ERROR!  Display index out of range (%d)";
          }
          else
          {
            uint64_t v7 = 3758097131;
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return v7;
            }
            int v16 = 136315394;
            long long v17 = "decodeFrameFigHelper_CheckParameters";
            __int16 v18 = 1024;
            *(_DWORD *)long long v19 = v14;
            long long v9 = &_os_log_internal;
            long long v10 = "AppleAVD: %s(): ERROR! Invalid reference index (%d)";
          }
          uint32_t v11 = 18;
          goto LABEL_17;
        }
        uint64_t v7 = 3758097131;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return v7;
        }
        int v16 = 136315650;
        long long v17 = "decodeFrameFigHelper_CheckParameters";
        __int16 v18 = 1024;
        *(_DWORD *)long long v19 = v6;
        *(_WORD *)&v19[4] = 1024;
        *(_DWORD *)&v19[6] = v13;
        long long v9 = &_os_log_internal;
        long long v10 = "AppleAVD: %s(): ERROR! Bad dataLength %d m_inputBufferMemInfo.ui32AllocSize %d";
      }
      uint32_t v11 = 24;
      goto LABEL_17;
    }
  }
  uint64_t v7 = 3758097131;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(a2 + 8);
    int v16 = 136315906;
    long long v17 = "decodeFrameFigHelper_CheckParameters";
    __int16 v18 = 1024;
    *(_DWORD *)long long v19 = v8;
    *(_WORD *)&v19[4] = 1024;
    *(_DWORD *)&v19[6] = v5;
    LOWORD(v20) = 1024;
    *(_DWORD *)((char *)&v20 + 2) = 0x20000000;
    long long v9 = &_os_log_internal;
    long long v10 = "AppleAVD: %s(): ERROR! Bad input size %d offset %d >= %d";
LABEL_9:
    uint32_t v11 = 30;
LABEL_17:
    _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v16, v11);
  }
  return v7;
}

uint64_t CAHDecCatnipHevc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 6160;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 11808) = a2;
  return this;
}

void CAVDHevcDecoder::CAVDHevcDecoder(CAVDHevcDecoder *this, void *a2, int a3, int a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  CAVDDecoder::CAVDDecoder(this, a2, a3);
  *(void *)uint64_t v6 = &unk_26D73FAD0;
  uint64_t v7 = (_OWORD *)(v6 + 3128);
  int v8 = (_OWORD *)(v6 + 8280);
  *(_DWORD *)(v6 + 8720) = 0;
  *(_DWORD *)(v6 + 9232) = 0;
  uint64_t v9 = v6 + 8400;
  long long v10 = (_OWORD *)(v6 + 8456);
  uint64_t v11 = v6 + 9032;
  *(void *)(v6 + 8440) = 0;
  uint64_t v12 = v6 + 9064;
  *(_OWORD *)(v6 + 3068) = 0u;
  *(_OWORD *)(v6 + 3084) = 0u;
  *(unsigned char *)(v6 + 3100) = 0;
  uint64_t v13 = v6 + 9080;
  unsigned int v14 = (pthread_mutex_t *)(v6 + 2688);
  *(_OWORD *)(v6 + 3104) = 0u;
  *(unsigned char *)(v6 + 3120) = 0;
  bzero((void *)(v6 + 3128), 0x204uLL);
  *((void *)this + 1041) = 0;
  v8[1] = 0u;
  v8[2] = 0u;
  *int v8 = 0u;
  *((void *)this + 1050) = 0;
  *(_OWORD *)(v9 + 8) = 0u;
  *((_DWORD *)this + 2106) = 0;
  *long long v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  *((void *)this + 1129) = 0;
  *((_OWORD *)this + 565) = 0u;
  *(void *)(v11 + 21) = 0;
  *(void *)(v12 + 5) = 0;
  *((void *)this + 1133) = 0;
  *(_DWORD *)(v13 + 15) = 0;
  *(_OWORD *)uint64_t v13 = 0u;
  pthread_mutex_init(v14, 0);
  pthread_cond_init((pthread_cond_t *)((char *)this + 2752), 0);
  v7[30] = 0u;
  v7[31] = 0u;
  v7[28] = 0u;
  v7[29] = 0u;
  v7[26] = 0u;
  v7[27] = 0u;
  v7[24] = 0u;
  v7[25] = 0u;
  v7[22] = 0u;
  v7[23] = 0u;
  v7[20] = 0u;
  v7[21] = 0u;
  v7[18] = 0u;
  v7[19] = 0u;
  uint8_t v7[16] = 0u;
  v7[17] = 0u;
  v7[14] = 0u;
  v7[15] = 0u;
  v7[12] = 0u;
  v7[13] = 0u;
  v7[10] = 0u;
  v7[11] = 0u;
  v7[8] = 0u;
  v7[9] = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  *uint64_t v7 = 0u;
  v7[1] = 0u;
  bzero((char *)this + 3824, 0x1168uLL);
  *((_DWORD *)this + 956) = -1;
  if ((*(unsigned int (**)(CAVDHevcDecoder *))(*(void *)this + 288))(this))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      long long v23 = "CAVDHevcDecoder";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: CAVDHevcDecoder::%s(): AVD decoder Init failed ", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      long long v23 = "CAVDHevcDecoder";
      __int16 v24 = 1024;
      int v25 = 301;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: CAVDHevcDecoder::%s(): error creating context %d", buf, 0x12u);
    }
    *((_DWORD *)this + 705) = 301;
  }
  else
  {
    unsigned int v15 = (_DWORD *)(*(void *)v8 + 3588);
    uint64_t v16 = 16;
    do
    {
      *unsigned int v15 = -1;
      v15 += 5794;
      --v16;
    }
    while (v16);
    uint64_t v17 = 0;
    uint64_t v18 = *((void *)this + 1036);
    do
    {
      *(_DWORD *)(v18 + v17) = -1;
      v17 += 9856;
    }
    while (v17 != 630784);
    *((void *)this + 1056) = 0;
    *((_OWORD *)this + 527) = 0u;
    *((void *)this + 293) = a2;
    *((_DWORD *)this + 2080) = -1;
    *((_DWORD *)this + 2083) = 0x7FFFFFFF;
    *((_DWORD *)this + 769) = a3;
    if (a4) {
      int v19 = 1;
    }
    else {
      int v19 = 2;
    }
    *((_DWORD *)this + 661) = v19;
    *((_DWORD *)this + 755) = 0;
    *(_OWORD *)((char *)this + 3004) = 0uLL;
    *((_DWORD *)this + 2259) = 0;
    bzero((char *)this + 24, 0x810uLL);
  }
}

void sub_22398A130(_Unwind_Exception *a1)
{
  CAVDDecoder::~CAVDDecoder(v1);
  _Unwind_Resume(a1);
}

uint64_t CAVDHevcDecoder::VAInit(CAVDHevcDecoder *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = malloc_type_calloc(0x5A88uLL, 0x10uLL, 0x914C19B9uLL);
  *((void *)this + 1035) = v2;
  if (!v2)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v8 = 136315138;
    uint64_t v9 = "VAInit";
    uint64_t v6 = &_os_log_internal;
    uint64_t v7 = "AppleAVD: ERROR: CAVDHevcDecoder::%s() m_sps_list mem alloc failed";
LABEL_11:
    _os_log_impl(&dword_223977000, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v8, 0xCu);
    return 304;
  }
  uint64_t v3 = malloc_type_calloc(0x2680uLL, 0x40uLL, 0xA971E286uLL);
  *((void *)this + 1036) = v3;
  if (!v3)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v8 = 136315138;
    uint64_t v9 = "VAInit";
    uint64_t v6 = &_os_log_internal;
    uint64_t v7 = "AppleAVD: ERROR: CAVDHevcDecoder::%s() m_pps_list mem alloc failed";
    goto LABEL_11;
  }
  uint64_t v4 = malloc_type_calloc(0x938uLL, 0x258uLL, 0xA509B970uLL);
  *((void *)this + 1037) = v4;
  if (v4) {
    return 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315138;
    uint64_t v9 = "VAInit";
    uint64_t v6 = &_os_log_internal;
    uint64_t v7 = "AppleAVD: ERROR: CAVDHevcDecoder::%s() m_slices mem alloc failed";
    goto LABEL_11;
  }
  return 304;
}

uint64_t CAVDHevcDecoder::VAGetError(CAVDHevcDecoder *this)
{
  return *((unsigned int *)this + 705);
}

void CAVDDecoder::CAVDDecoder(CAVDDecoder *this, void *a2, int a3)
{
  *(void *)this = &unk_26D73E3B0;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *((void *)this + 292) = a2;
  *((void *)this + 293) = 0;
  *((_DWORD *)this + 588) = a3;
  *((unsigned char *)this + 2356) = 0;
  *((_DWORD *)this + 705) = 0;
  *((unsigned char *)this + 2824) = 0;
  *((_DWORD *)this + 750) = 0;
  *((_DWORD *)this + 766) = 0;
  bzero((char *)this + 24, 0x810uLL);
  *((void *)this + 333) = 0;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *(_OWORD *)((char *)this + 2616) = 0u;
  *(_OWORD *)((char *)this + 2568) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 2536) = 0u;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *(_OWORD *)((char *)this + 2520) = 0u;
  *(_OWORD *)((char *)this + 2472) = 0u;
  *(_OWORD *)((char *)this + 2488) = 0u;
  *(_OWORD *)((char *)this + 2440) = 0u;
  *(_OWORD *)((char *)this + 2456) = 0u;
  *(_OWORD *)((char *)this + 2408) = 0u;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *(_OWORD *)((char *)this + 2376) = 0u;
  *(_OWORD *)((char *)this + 2392) = 0u;
  *(_OWORD *)((char *)this + 2360) = 0u;
  *((_WORD *)this + 1408) = 0;
  *((void *)this + 351) = 0;
  *((_DWORD *)this + 707) = 0;
  *(_DWORD *)((char *)this + 2831) = 0;
  *(_OWORD *)((char *)this + 2840) = 0u;
  *(_OWORD *)((char *)this + 2856) = 0u;
  *((_DWORD *)this + 718) = 0;
  *((_OWORD *)this + 180) = 0u;
  *((_DWORD *)this + 724) = 0;
  *((_OWORD *)this + 189) = 0u;
  *((_OWORD *)this + 190) = 0u;
  *(void *)((char *)this + 3053) = 0;
  *((_DWORD *)this + 668) = 1;
  *((void *)this + 350) = 0;
}

uint64_t CAVDDecoder::setAVDSharedMem(CAVDDecoder *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 262) + 288))();
}

void CAVDHevcDecoder::VAStartDecode(CAVDHevcDecoder *this, unsigned __int8 *a2, int a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 2824) = 0;
  *((_DWORD *)this + 777) = a3 >> 24;
  operator new();
}

void sub_22398A9BC(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v1, 0x1091C40CC5F6689);
  _Unwind_Resume(a1);
}

uint64_t CAVDHevcDecoder::VADecodeFrame(uint64_t a1, unsigned int *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LODWORD(v11) = a4;
  uint64_t v217 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 3068) = 0;
  *(void *)(a1 + 3080) = 0;
  uint64_t v200 = (unsigned __int8 *)(a1 + 9076);
  *(unsigned char *)(a1 + 9098) = 0;
  char v202 = a4 == 1;
  if (a4 == 1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, 1);
  }
  if (a5 == -1)
  {
    uint64_t v15 = 0;
    *(void *)(a1 + 8360) = 0;
    *(void *)(a1 + 8352) = 0xFFFFFFFF00000000;
  }
  else
  {
    *(void *)buf = 0;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, _DWORD *, uint64_t))(*(void *)a1 + 112))(a1, a5, buf, 1))
    {
      *(void *)(a1 + 8360) = 0;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      LOWORD(buf[0]) = 0;
      int v19 = &_os_log_internal;
      uint64_t v20 = "AppleAVD: Error getting display buffer!";
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 8352) = 1;
    *(_DWORD *)(a1 + 8356) = a5;
    uint64_t v15 = *(void *)buf;
    *(void *)(a1 + 8360) = *(void *)buf + 8;
  }
  *(void *)buf = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, void))(*(void *)a1 + 112))(a1, a6, buf, 0) & 1) == 0)
  {
    *(void *)(a1 + 8344) = 0;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
    LOWORD(buf[0]) = 0;
    int v19 = &_os_log_internal;
    uint64_t v20 = "AppleAVD: Error getting decoder buffer!";
    goto LABEL_17;
  }
  *(_DWORD *)(a1 + 8336) = 0;
  *(_DWORD *)(a1 + 8340) = a6;
  uint64_t v16 = *(void *)buf;
  *(void *)(a1 + 2088) = *(void *)buf;
  *(void *)(a1 + 8344) = v16 + 8;
  *(void *)(v16 + 204) = *(void *)(a1 + 2856);
  int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (a7 != -1 && v17)
  {
    *(void *)buf = 0;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, _DWORD *, void))(*(void *)a1 + 112))(a1, a7, buf, 0))
    {
      *(void *)(a1 + 8376) = 0;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_26;
      }
      buf[0] = 136315394;
      *(void *)&buf[1] = "VADecodeFrame";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v11;
      __int16 v24 = &_os_log_internal;
      int v25 = "AppleAVD: ERROR: %s(): Error getting second decoder buffer for scaling! (frameNum :%d)";
      goto LABEL_25;
    }
    *(_DWORD *)(a1 + 8368) = 0;
    *(_DWORD *)(a1 + 8372) = a7;
    uint64_t v18 = *(void *)buf;
    *(void *)(a1 + 8376) = *(void *)buf + 8;
    if (v18)
    {
      *(_DWORD *)(v18 + 204) = 0;
      *(_DWORD *)(v18 + 208) = 0;
      goto LABEL_26;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "VADecodeFrame";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = v11;
      __int16 v24 = &_os_log_internal;
      int v25 = "AppleAVD: ERROR: %s(): vSurfInfoScalerRef was not set! (frameNum :%d)";
LABEL_25:
      _os_log_impl(&dword_223977000, v24, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)buf, 0x12u);
    }
  }
LABEL_26:
  *(_DWORD *)(a1 + 2648) = *(unsigned __int8 *)(*(void *)(a1 + 8344) + 160);
  uint64_t v26 = *(void *)(a1 + 8360);
  if (!*(unsigned char *)(a1 + 9))
  {
    if (v26)
    {
      int v27 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 424))(a1, *(unsigned int *)(v26 + 148));
LABEL_32:
      *(_DWORD *)(a1 + 2644) = v27;
      goto LABEL_33;
    }
LABEL_31:
    int v27 = 0;
    goto LABEL_32;
  }
  if (!v26) {
    goto LABEL_31;
  }
LABEL_33:
  if (!*(unsigned char *)(a1 + 3060) || *(_DWORD *)(a1 + 3064) != 2 || *(unsigned char *)(a1 + 3004)) {
    goto LABEL_42;
  }
  if (*(_DWORD *)(a1 + 3036))
  {
    *(void *)buf = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, _DWORD *, void))(*(void *)a1 + 112))(a1, 125, buf, 0))
    {
      *(void *)(a1 + 8384) = 0x7D00000000;
      *(void *)(a1 + 8392) = *(void *)buf + 8;
      goto LABEL_39;
    }
    *(void *)(a1 + 8392) = 0;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
    LOWORD(buf[0]) = 0;
    int v19 = &_os_log_internal;
    uint64_t v20 = "AppleAVD: Error getting chroma scratch buffer!";
LABEL_17:
    uint32_t v21 = 2;
    goto LABEL_18;
  }
LABEL_39:
  if (!*(_DWORD *)(a1 + 2644) && *(_DWORD *)(a1 + 2648) == 1) {
    v200[22] = 1;
  }
LABEL_42:
  uint64_t v190 = v15;
  uint64_t v28 = *(void *)(a1 + 8360);
  if (!v28) {
    uint64_t v28 = *(void *)(a1 + 8344);
  }
  unsigned int v196 = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 23, v28 + 148);
  LODWORD(v29) = *(_DWORD *)(a1 + 3108);
  if ((int)v29 > a3)
  {
    uint64_t v30 = 0;
    int v31 = 0;
    uint64_t v32 = 0;
    goto LABEL_46;
  }
  unsigned int v181 = a6;
  uint64_t v197 = 0;
  int v31 = 0;
  int v40 = 0;
  unsigned int v41 = 0;
  int v42 = 0;
  unint64_t v43 = (unint64_t)a2 + a3;
  uint64_t v187 = 0;
  uint64_t v188 = (_DWORD *)(a1 + 3824);
  uint64_t v191 = a1 + 3648;
  unint64_t v194 = v43;
  int v195 = a2;
  int v44 = a2;
  while (2)
  {
    switch(v29)
    {
      case 1:
        unsigned int v49 = *(unsigned __int8 *)v44;
        uint64_t v45 = (unsigned __int8 *)v44 + 1;
        unsigned int v47 = v49;
        unsigned int v48 = v49 + 1;
        break;
      case 2:
        unsigned int v50 = *(unsigned __int16 *)v44;
        uint64_t v45 = (unsigned __int8 *)v44 + 2;
        unsigned int v47 = __rev16(v50);
        unsigned int v48 = v47 + 2;
        break;
      case 4:
        unsigned int v46 = *v44;
        uint64_t v45 = (unsigned __int8 *)(v44 + 1);
        unsigned int v47 = bswap32(v46);
        unsigned int v48 = v47 + 4;
        break;
      default:
        int v22 = 0;
        int v23 = 317;
        goto LABEL_256;
    }
    if (v47) {
      BOOL v51 = (unint64_t)&v45[v47] > v43;
    }
    else {
      BOOL v51 = 1;
    }
    if (v51)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "VADecodeFrame";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = v47;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s NALU bad size! %d", (uint8_t *)buf, 0x12u);
      }
      int v22 = 0;
      int v23 = 318;
      goto LABEL_256;
    }
    int v203 = v40;
    HEVC_RBSP::setRBSP(*(HEVC_RBSP **)(a1 + 3112), v45, v47);
    if ((HEVC_RBSP::parseNAL(*(void *)(a1 + 3112), &v206, 0) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "VADecodeFrame";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = v47;
        uint64_t v139 = &_os_log_internal;
        uint64_t v140 = "AppleAVD: %s parse NAL error ! %d";
        uint32_t v141 = 18;
        goto LABEL_253;
      }
      int v22 = 0;
      int v23 = 305;
LABEL_256:
      LODWORD(v11) = v196;
      goto LABEL_257;
    }
    unsigned int v52 = v29 + v41;
    unsigned int v53 = v207;
    if ((0x7003F03FFuLL >> v207)) {
      int v54 = (0x7FFC0FC00uLL >> v207) & 1;
    }
    else {
      int v54 = v42;
    }
    if (v207 <= 0x22) {
      int v42 = v54;
    }
    if (v208) {
      goto LABEL_187;
    }
    switch(v207)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
        if (!*(unsigned char *)(a1 + 3004)) {
          goto LABEL_71;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_254;
        }
        buf[0] = 67109120;
        buf[1] = v53;
        uint64_t v139 = &_os_log_internal;
        uint64_t v140 = "AppleAVD: Rejecting non-IRAP frame in tiled decode %d";
        uint32_t v141 = 8;
        goto LABEL_253;
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
LABEL_71:
        if (*(_DWORD *)(a1 + 2804))
        {
          uint64_t v11 = v196;
        }
        else
        {
          int v55 = &v45[v47 - 1];
          unsigned int v56 = v47 + 1;
          uint64_t v11 = v196;
          do
          {
            int v57 = *v55--;
            unsigned int v47 = v56 - 1;
            if (v57) {
              BOOL v58 = 1;
            }
            else {
              BOOL v58 = v56 == 1;
            }
            --v56;
          }
          while (!v58);
        }
        int v59 = v197;
        if (v197)
        {
          if ((int)v197 > 599) {
            goto LABEL_290;
          }
        }
        else if (*(unsigned char *)(a1 + 2833))
        {
          if (v11 != 1 && (v207 & 0xFFFFFFF8) != 0x10)
          {
            int v22 = 0;
            int v23 = 406;
            goto LABEL_257;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 67109120;
            buf[1] = v11;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: FOUND IRAP-- SETTING m_skipToIdr FALSE! %d", (uint8_t *)buf, 8u);
          }
          *(unsigned char *)(a1 + 2833) = 0;
          uint64_t v89 = *(HEVC_RLM **)(a1 + 3128);
          int v59 = v197;
          if (v89)
          {
            HEVC_RLM::releaseAllPictures(v89);
            int v59 = v197;
          }
        }
        unsigned int v186 = v52;
        unsigned int v185 = v48;
        uint64_t v60 = v11;
        int v61 = v59;
        uint64_t v11 = *(void *)(a1 + 8296);
        int v62 = (unsigned char *)(v11 + 2360 * v59 + 24);
        unsigned int v63 = v59 - 1;
        if (v59 <= 0) {
          uint64_t v64 = 0;
        }
        else {
          uint64_t v64 = v11 + 2360 * v63 + 24;
        }
        HevcReleaseSliceHeader(v11 + 2360 * v59 + 24);
        bzero((void *)(v11 + 2360 * v61 + 24), 0x808uLL);
        if ((HEVC_RBSP::parseSliceHeader(*(void *)(a1 + 3112), (unsigned int *)(v11 + 2360 * v61 + 24), &v206, *(void *)(a1 + 8280), *(void *)(a1 + 8288), (uint64_t)v188, 0, v64) & 1) == 0)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 136315650;
            *(void *)&buf[1] = "VADecodeFrame";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = v61;
            HIWORD(buf[4]) = 1024;
            buf[5] = v207;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() slice header parsing error - slice_count: %d - nal_unit_type: %d", (uint8_t *)buf, 0x18u);
          }
          int v22 = 0;
          int v23 = 305;
          LODWORD(v11) = v60;
          goto LABEL_257;
        }
        int v65 = v61;
        int v198 = v61;
        if (v61 >= 1 && *(unsigned char *)(v11 + 2360 * v61 + 32)) {
          HevcCopyDependentSliceHeader((__int16 *)(v11 + 2360 * v61 + 24), (const void *)(*(void *)(a1 + 8296) + 2360 * v63 + 24));
        }
        else {
          ++*(_DWORD *)(a1 + 3068);
        }
        int v66 = CAVDHevcDecoder::activatePS(a1, v11 + 2360 * v61 + 24);
        LODWORD(v11) = v60;
        if (v66)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 136315138;
            *(void *)&buf[1] = "VADecodeFrame";
            int v19 = &_os_log_internal;
            uint64_t v20 = "AppleAVD: %s(): fail to activate parameter set for slice\n";
            goto LABEL_279;
          }
LABEL_307:
          int v22 = 0;
          int v23 = 305;
          goto LABEL_257;
        }
        int v192 = *(_DWORD *)(a1 + 8324);
        uint64_t v193 = *(void *)(a1 + 8288);
        uint64_t v67 = *(void *)(a1 + 8280);
        int v68 = *(_DWORD *)(a1 + 8320);
        uint64_t v69 = *(void *)(a1 + 8296) + 2360 * v65;
        *(void *)(v69 + 8) = v45;
        *(_DWORD *)(v69 + 16) = v47;
        *(_DWORD *)uint64_t v69 = v207;
        *(_DWORD *)(v69 + 2084) = v209;
        unsigned int NumberOfBitsParsed = HEVC_RBSP::getNumberOfBitsParsed(*(int8x8_t **)(a1 + 3112));
        int v189 = v65;
        uint64_t v71 = *(void *)(a1 + 8296) + 2360 * v65;
        *(_DWORD *)(v71 + 2080) = NumberOfBitsParsed;
        int v72 = *(_DWORD *)(v71 + 16);
        if (NumberOfBitsParsed > 8 * v72)
        {
          unsigned int v155 = NumberOfBitsParsed;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_307;
          }
          buf[0] = 136315650;
          *(void *)&buf[1] = "VADecodeFrame";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 8 * v72;
          HIWORD(buf[4]) = 1024;
          buf[5] = v155;
          int v19 = &_os_log_internal;
          uint64_t v20 = "AppleAVD: %s(): rbsp return invalid bitUsed %d nalL_inBits = %d";
          uint32_t v21 = 24;
LABEL_18:
          _os_log_impl(&dword_223977000, v19, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)buf, v21);
          goto LABEL_19;
        }
        if (CAVDDecoder::isADSDecryption((CAVDDecoder *)a1) && !*(unsigned char *)(a1 + 10))
        {
          int v73 = CAVDDecoder::calculateClearBytes((CAVDDecoder *)a1, v186, v47, *(_DWORD *)(*(void *)(a1 + 8296) + 2360 * v65 + 2080), *(_DWORD *)(a1 + 3056), *(unsigned int **)(a1 + 3040), *(unsigned int **)(a1 + 3048));
          if (v73 == -1) {
            __int16 v74 = 1023;
          }
          else {
            __int16 v74 = v73;
          }
          *(_WORD *)(*(void *)(a1 + 8296) + 2360 * v65 + 2352) = v74;
          if (*(_DWORD *)(a1 + 2420)) {
            int v75 = 0x10000;
          }
          else {
            int v75 = 0x200000;
          }
          *(_DWORD *)(a1 + 2504) |= v75;
        }
        uint64_t v76 = v193 + 9856 * v192;
        int v78 = *(unsigned __int8 *)(v76 + 52);
        unint64_t v77 = (unsigned __int8 *)(v76 + 52);
        if (!v78 || (uint64_t v79 = *(unsigned int *)(v193 + 9856 * v192 + 56), v80 = v79 + 1, v79 == -1))
        {
LABEL_108:
          int v184 = v77;
          LODWORD(v11) = v60;
          if (!*v62)
          {
            if (v198) {
              goto LABEL_124;
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "VADecodeFrame";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 0;
              uint64_t v163 = &_os_log_internal;
              int v164 = "AppleAVD: %s(): ERROR! Bad Bitstream! first_slice_segment_in_pic_flag NOT set on slice_count: %d";
              goto LABEL_289;
            }
LABEL_290:
            int v22 = 0;
            int v23 = 310;
            goto LABEL_257;
          }
          if (v198)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "VADecodeFrame";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = v198;
              uint64_t v163 = &_os_log_internal;
              int v164 = "AppleAVD: %s(): ERROR! Bad Bitstream! first_slice_segment_in_pic_flag set on slice_count: %d";
LABEL_289:
              _os_log_impl(&dword_223977000, v163, OS_LOG_TYPE_DEFAULT, v164, (uint8_t *)buf, 0x12u);
              int v22 = 0;
              int v23 = 310;
              goto LABEL_257;
            }
            goto LABEL_290;
          }
          uint64_t v87 = *(unsigned int *)(a1 + 3080);
          if (*(_DWORD *)(*(void *)(a1 + 9080) + 4 * v87)) {
            BOOL v88 = *(_DWORD *)(*(void *)(a1 + 9088) + 4 * v87) != 0;
          }
          else {
            BOOL v88 = 1;
          }
          if ((*(unsigned int (**)(uint64_t, _DWORD *, int *, uint64_t, unsigned char *, uint64_t, BOOL))(*(void *)a1 + 312))(a1, v188, &v206, v67 + 23176 * v68, v62, v191, v88))
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_307;
            }
            buf[0] = 136315138;
            *(void *)&buf[1] = "VADecodeFrame";
            int v19 = &_os_log_internal;
            uint64_t v20 = "AppleAVD: caught initPicture error in %s";
LABEL_279:
            uint32_t v21 = 12;
            goto LABEL_18;
          }
          *(_DWORD *)(*(void *)(a1 + 9088) + 4 * *(unsigned int *)(a1 + 3080)) = 0;
          ++*(_DWORD *)(*(void *)(a1 + 9080) + 4 * *(unsigned int *)(a1 + 3080));
LABEL_124:
          if ((*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 392))(a1, v191, *(unsigned int *)(*(void *)(a1 + 8296) + 2360 * v189 + 44), v60))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              buf[0] = 136315138;
              *(void *)&buf[1] = "VADecodeFrame";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): isRandomAccessSkipPicture skip", (uint8_t *)buf, 0xCu);
            }
            return 409;
          }
          uint64_t v187 = v67 + 23176 * v68;
          int v90 = *(unsigned __int8 *)(v187 + 3600);
          int v91 = *(unsigned __int8 *)(v187 + 3604);
          int v92 = *(unsigned __int8 *)(v187 + 3636);
          int v93 = *(unsigned __int8 *)(v187 + 3640);
          *(void *)&long long v94 = *(void *)(v187 + 3608);
          char v95 = *(unsigned char *)(v187 + 3616);
          uint64_t v96 = *(void *)(v187 + 3628);
          int v97 = *(_DWORD *)(v187 + 22872);
          int v98 = *(unsigned __int8 *)(v187 + 23172);
          if (*(unsigned char *)(a1 + 10))
          {
            int v99 = *(_DWORD *)(a1 + 9072);
            if (v98 > v99) {
              goto LABEL_249;
            }
            goto LABEL_136;
          }
          int v100 = *(_DWORD *)(a1 + 3024);
          int v101 = *(void *)(v187 + 3608);
          if (v94 != v100)
          {
            int v205 = HIDWORD(*(void *)(v187 + 3608));
            goto LABEL_293;
          }
          if (DWORD1(v94) != *(_DWORD *)(a1 + 3028))
          {
            int v205 = HIDWORD(*(void *)(v187 + 3608));
            int v100 = *(void *)(v187 + 3608);
LABEL_293:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v166 = *(_DWORD *)(a1 + 3028);
              buf[0] = 67110144;
              buf[1] = v60;
              LOWORD(buf[2]) = 1024;
              *(_DWORD *)((char *)&buf[2] + 2) = v100;
              HIWORD(buf[3]) = 1024;
              uint8_t buf[4] = v166;
              LOWORD(buf[5]) = 1024;
              *(_DWORD *)((char *)&buf[5] + 2) = v101;
              HIWORD(buf[6]) = 1024;
              buf[7] = v205;
              int v19 = &_os_log_internal;
              uint64_t v20 = "AppleAVD: #### <WARNING> Frame resolution change not supported Frame %d old %d %d new %d %d";
              uint32_t v21 = 32;
              goto LABEL_18;
            }
            goto LABEL_19;
          }
          int v99 = *(_DWORD *)(a1 + 9072);
          if (v98 > v99)
          {
LABEL_249:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v159 = *(unsigned __int8 *)(*(void *)(a1 + 8304) + 104 * *(unsigned int *)(a1 + 3080) + 35);
              buf[0] = 67109632;
              buf[1] = v99;
              LOWORD(buf[2]) = 1024;
              *(_DWORD *)((char *)&buf[2] + 2) = v98;
              HIWORD(buf[3]) = 1024;
              uint8_t buf[4] = v159;
              int v19 = &_os_log_internal;
              uint64_t v20 = "AppleAVD: #### <WARNING> DPB Size Requirement Changed: origDpbSize: %d -> curDpbSize: %d, prevDpbSize: %d";
              uint32_t v21 = 20;
              goto LABEL_18;
            }
            goto LABEL_19;
          }
          int v102 = *(_DWORD *)(a1 + 3036);
          if (v90 != v102)
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_307;
            }
            buf[0] = 67109376;
            buf[1] = v90;
            LOWORD(buf[2]) = 1024;
            *(_DWORD *)((char *)&buf[2] + 2) = v102;
            int v19 = &_os_log_internal;
            uint64_t v20 = "AppleAVD: #### <WARNING> Chroma format Changed: %d -> %d";
            goto LABEL_306;
          }
          int v103 = *(_DWORD *)(a1 + 3032);
          if (v92 != v103)
          {
            int v167 = *(unsigned __int8 *)(v187 + 3636);
LABEL_300:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v168 = *(_DWORD *)(a1 + 9064);
              buf[0] = 67109888;
              buf[1] = v167;
              LOWORD(buf[2]) = 1024;
              *(_DWORD *)((char *)&buf[2] + 2) = v103;
              HIWORD(buf[3]) = 1024;
              uint8_t buf[4] = v93;
              LOWORD(buf[5]) = 1024;
              *(_DWORD *)((char *)&buf[5] + 2) = v168;
              int v19 = &_os_log_internal;
              uint64_t v20 = "AppleAVD: #### <WARNING> Bit depth changed: new_bit_depth_luma_minus8:%d m_orig_bit_depth_luma_minus"
                    "8:%d new_bit_depth_chroma_minus8:%d m_orig_bit_depth_chroma_minus8:%d";
              uint32_t v21 = 26;
              goto LABEL_18;
            }
LABEL_19:
            int v22 = 0;
LABEL_20:
            int v23 = 305;
            goto LABEL_257;
          }
          if (v93 != *(_DWORD *)(a1 + 9064))
          {
            int v167 = *(unsigned __int8 *)(v187 + 3636);
            int v103 = v167;
            goto LABEL_300;
          }
          int v104 = *(_DWORD *)(a1 + 9068);
          if (v97 != v104)
          {
            int v169 = *(_DWORD *)(v187 + 22872);
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_307;
            }
            buf[0] = 67109376;
            buf[1] = v169;
            LOWORD(buf[2]) = 1024;
            *(_DWORD *)((char *)&buf[2] + 2) = v104;
            int v19 = &_os_log_internal;
            uint64_t v20 = "AppleAVD: #### <WARNING> CTB size changed new_CtbSizeY:%d m_orig_CtbSizeY:%d";
            goto LABEL_306;
          }
          int v105 = *v200;
          if (v91 != v105)
          {
            int v170 = *(unsigned __int8 *)(v187 + 3604);
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_307;
            }
            buf[0] = 67109376;
            buf[1] = v170;
            LOWORD(buf[2]) = 1024;
            *(_DWORD *)((char *)&buf[2] + 2) = v105;
            int v19 = &_os_log_internal;
            uint64_t v20 = "AppleAVD: #### <WARNING> new_separate_colour_plane_flag:%d m_orig_separate_colour_plane_flag:%d";
LABEL_306:
            uint32_t v21 = 14;
            goto LABEL_18;
          }
LABEL_136:
          uint64_t v106 = *(void *)(a1 + 8304);
          unsigned int v107 = *(_DWORD *)(a1 + 3080);
          if (*(_DWORD *)(*(void *)(a1 + 9040) + 4 * v208))
          {
            if (*(unsigned __int8 *)(v106 + 104 * v107 + 32) == v90
              && v91 == *(unsigned __int8 *)(v106 + 104 * v107 + 30)
              && *(unsigned __int8 *)(v106 + 104 * v107 + 33) == v92
              && *(unsigned __int8 *)(v106 + 104 * v107 + 34) == v93
              && (void)v94 == *(void *)(v106 + 104 * v107)
              && v97 == *(_DWORD *)(v106 + 104 * v107 + 24))
            {
              int v108 = v60;
              int v183 = 0;
            }
            else
            {
              int v108 = v60;
              int v183 = 1;
            }
          }
          else
          {
            int v108 = v60;
            int v183 = 0;
          }
          uint64_t v109 = v106 + 104 * v107;
          *((void *)&v94 + 1) = *(void *)(v187 + 3620);
          *(_OWORD *)uint64_t v109 = v94;
          *(void *)(v109 + 16) = v96;
          *(_DWORD *)(v109 + 24) = v97;
          *(unsigned char *)(v109 + 30) = v91;
          *(unsigned char *)(v109 + 31) = v95;
          *(unsigned char *)(v109 + 32) = v90;
          *(unsigned char *)(v109 + 33) = v92;
          *(unsigned char *)(v109 + 34) = v93;
          *(unsigned char *)(v109 + 35) = v98;
          *(unsigned char *)(v109 + 36) = 0;
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 96))(a1, 22, 0);
          memset(&buf[2], 0, 172);
          int v110 = *v184;
          buf[0] = v110;
          unsigned int v111 = (_DWORD *)(v193 + 9856 * v192);
          unsigned int v112 = v111[14];
          buf[1] = v112;
          if (v112 + 1 > 1) {
            unsigned int v113 = v112 + 1;
          }
          else {
            unsigned int v113 = 1;
          }
          memcpy(&buf[2], v111 + 17, 4 * v113);
          unsigned int v114 = v111[15];
          buf[22] = v114;
          if (v114 + 1 > 1) {
            unsigned int v115 = v114 + 1;
          }
          else {
            unsigned int v115 = 1;
          }
          memcpy(&buf[23], v111 + 37, 4 * v115);
          uint64_t v116 = *(void *)(a1 + 8312);
          unsigned int v117 = *(_DWORD *)(a1 + 3080);
          if (*(_DWORD *)(*(void *)(a1 + 9048) + 4 * v208))
          {
            LODWORD(v11) = v108;
            int v118 = v183;
            if (*(_DWORD *)(v116 + 180 * v117) == v110)
            {
              unsigned int v48 = v185;
              if (v112 != *(_DWORD *)(v116 + 180 * v117 + 4) || v114 != *(_DWORD *)(v116 + 180 * v117 + 88)) {
                goto LABEL_170;
              }
              int v119 = 0;
              unsigned int v120 = 1;
              do
              {
                if (buf[v120 + 1] != *(_DWORD *)(v116 + 180 * v117 + 4 * (v120 - 1) + 8)) {
                  int v119 = 1;
                }
                if (v120 > v112) {
                  break;
                }
                ++v120;
              }
              while ((v119 & 1) == 0);
              if ((v119 & 1) == 0)
              {
                unsigned int v121 = 1;
                do
                {
                  if (buf[v121 + 22] != *(_DWORD *)(v116 + 180 * v117 + 4 * (v121 - 1) + 92)) {
                    int v119 = 1;
                  }
                  int v122 = v119;
                  if (v121 > v114) {
                    break;
                  }
                  ++v121;
                }
                while (!v119);
              }
              else
              {
LABEL_170:
                int v122 = 1;
              }
            }
            else
            {
              int v122 = 1;
              unsigned int v48 = v185;
            }
            BOOL v123 = v122 != 0;
          }
          else
          {
            BOOL v123 = 0;
            LODWORD(v11) = v108;
            unsigned int v48 = v185;
            int v118 = v183;
          }
          uint64_t v124 = v116 + 180 * v117;
          *(_OWORD *)(v124 + 128) = *(_OWORD *)&buf[32];
          *(_OWORD *)(v124 + 144) = *(_OWORD *)&buf[36];
          *(_OWORD *)(v124 + 160) = *(_OWORD *)&buf[40];
          *(_DWORD *)(v124 + 176) = buf[44];
          *(_OWORD *)(v124 + 64) = *(_OWORD *)&buf[16];
          *(_OWORD *)(v124 + 80) = *(_OWORD *)&buf[20];
          *(_OWORD *)(v124 + 96) = *(_OWORD *)&buf[24];
          *(_OWORD *)(v124 + 112) = *(_OWORD *)&buf[28];
          *(_OWORD *)uint64_t v124 = *(_OWORD *)buf;
          *(_OWORD *)(v124 + 16) = *(_OWORD *)&buf[4];
          *(_OWORD *)(v124 + 32) = *(_OWORD *)&buf[8];
          *(_OWORD *)(v124 + 48) = *(_OWORD *)&buf[12];
          char v125 = v118 | v123;
          if ((v118 | v123) == 1)
          {
            int v126 = AppleAVDCommandBuilder::waitNumInFlight(*(AppleAVDCommandBuilder **)(a1 + 2344), 1u);
            if (v126)
            {
              int v127 = v126;
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)int v212 = 136315394;
                int v213 = "VADecodeFrame";
                __int16 v214 = 1024;
                int v215 = v127;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): timeout status: %d", v212, 0x12u);
              }
            }
          }
          uint64_t v128 = v208;
          unsigned int v52 = v186;
          if (((*(_DWORD *)(*(void *)(a1 + 9040) + 4 * v208) != 0) & ~v118) == 0)
          {
            (*(void (**)(void))(**(void **)(a1 + 2096) + 136))(*(void *)(a1 + 2096));
            *(_DWORD *)(*(void *)(a1 + 9040) + 4 * v208) = 0;
            if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 2096) + 128))(*(void *)(a1 + 2096), v187))
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)int v212 = 136315138;
                int v213 = "virtual int CAVDHevcDecoder::VADecodeFrame(unsigned char *, int, uint32_t, int, int, int, avd_seq_params *)";
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s fail to allocate work buffer for sps", v212, 0xCu);
              }
              int v23 = 304;
              goto LABEL_323;
            }
            *(_DWORD *)(*(void *)(a1 + 9040) + 4 * v208) = 1;
            uint64_t v128 = v208;
          }
          int v129 = v118;
          uint64_t v130 = v193 + 9856 * v192;
          if (*(_DWORD *)(*(void *)(a1 + 9048) + 4 * v128)) {
            int v131 = v129;
          }
          else {
            int v131 = 1;
          }
          if ((v131 | v123) == 1)
          {
            (*(void (**)(void, void))(**(void **)(a1 + 2096) + 152))(*(void *)(a1 + 2096), 0);
            *(_DWORD *)(*(void *)(a1 + 9048) + 4 * v208) = 0;
            if ((*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 2096) + 144))(*(void *)(a1 + 2096), v187, v130, 0))
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)int v212 = 136315138;
                int v213 = "virtual int CAVDHevcDecoder::VADecodeFrame(unsigned char *, int, uint32_t, int, int, int, avd_seq_params *)";
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s fail to allocate work buffer for pps", v212, 0xCu);
              }
              int v23 = 304;
              LODWORD(v11) = v196;
              goto LABEL_323;
            }
            *(_DWORD *)(*(void *)(a1 + 9048) + 4 * v208) = 1;
          }
          int v31 = (unsigned char *)(v193 + 9856 * v192);
          int v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 320))(a1, v130, *(void *)(a1 + 8296) + 2360 * v189, v191);
          if (v132)
          {
            int v162 = v132;
            LODWORD(v11) = v196;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int v212 = 136315394;
              int v213 = "VADecodeFrame";
              __int16 v214 = 1024;
              int v215 = v162;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): fail to create reference picture list - result: %d\n", v212, 0x12u);
            }
            if (v162 == 410) {
              int v23 = 410;
            }
            else {
              int v23 = 305;
            }
LABEL_323:
            int v22 = 0;
            goto LABEL_257;
          }
          v202 |= v125;
          uint64_t v197 = (v198 + 1);
LABEL_187:
          int v40 = v48 + v203;
          unint64_t v43 = v194;
          int v44 = (unsigned int *)((char *)v195 + v48 + v203);
          unsigned int v41 = v47 + v52;
          uint64_t v29 = *(int *)(a1 + 3108);
          if ((unint64_t)v44 + v29 > v194)
          {
            a6 = v181;
            uint64_t v30 = v197;
            uint64_t v32 = v187;
            if (v42)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                buf[0] = 136315138;
                *(void *)&buf[1] = "VADecodeFrame";
                uint64_t v139 = &_os_log_internal;
                uint64_t v140 = "AppleAVD: ERROR: %s(): hevc - unpermitted non-VCL NAL following last VCL NAL\n";
                uint32_t v141 = 12;
LABEL_253:
                _os_log_impl(&dword_223977000, v139, OS_LOG_TYPE_DEFAULT, v140, (uint8_t *)buf, v141);
              }
LABEL_254:
              int v22 = 0;
              goto LABEL_255;
            }
LABEL_46:
            if (a8)
            {
              uint64_t v33 = *(void *)(a1 + 8304) + 104 * *(unsigned int *)(a1 + 3080);
              long long v35 = *(_OWORD *)(v33 + 64);
              long long v34 = *(_OWORD *)(v33 + 80);
              long long v36 = *(_OWORD *)(v33 + 48);
              *(void *)(a8 + 96) = *(void *)(v33 + 96);
              *(_OWORD *)(a8 + 64) = v35;
              *(_OWORD *)(a8 + 80) = v34;
              *(_OWORD *)(a8 + 48) = v36;
              long long v37 = *(_OWORD *)v33;
              long long v38 = *(_OWORD *)(v33 + 32);
              *(_OWORD *)(a8 + 16) = *(_OWORD *)(v33 + 16);
              *(_OWORD *)(a8 + 32) = v38;
              *(_OWORD *)a8 = v37;
            }
            if (!v30)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                buf[0] = 136315138;
                *(void *)&buf[1] = "VADecodeFrame";
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): slice count 0", (uint8_t *)buf, 0xCu);
              }
              int v22 = 0;
              int v23 = 403;
              goto LABEL_256;
            }
            BOOL v39 = v31[51] == 1 && v31[33] == 1;
            *(unsigned char *)(a1 + 2816) = v39;
            *(unsigned char *)(a1 + 2817) = *(unsigned char *)(v32 + 10650) == 1;
            *(_DWORD *)(a1 + 2812) = v30;
            uint64_t v137 = v30;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 328))(a1, v32, a1 + 3648))
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                buf[0] = 136315138;
                *(void *)&buf[1] = "VADecodeFrame";
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): createDPB fail", (uint8_t *)buf, 0xCu);
              }
              int v22 = 0;
              int v23 = 317;
              goto LABEL_256;
            }
            BOOL v138 = v31[53]
                && !(*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)a1 + 400))(a1, *(unsigned int *)(v32 + 22880), v137);
            uint64_t v11 = v196;
            *(_DWORD *)(a1 + 3072) = v138;
            while (!(*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)a1 + 384))(a1, v210))
              (*(void (**)(uint64_t, void))(*(void *)a1 + 80))(a1, v211);
            if (*(unsigned char *)(a1 + 3004))
            {
              if (v190)
              {
                IOSurfaceRef v142 = IOSurfaceLookup(*(_DWORD *)(v190 + 160));
                if (v142)
                {
                  IOSurfaceRef v143 = v142;
                  uint64_t v199 = v137;
                  unint64_t SizeOfPlane = IOSurfaceGetSizeOfPlane();
                  CFRelease(v143);
                  int v144 = *(_DWORD *)(a1 + 3008);
                  uint64_t v145 = *(void *)(a1 + 8280);
                  int v146 = *(_DWORD *)(a1 + 8320);
                  int v147 = *(_DWORD *)(v145 + 23176 * v146 + 3608);
                  if (__CFADD__(v144, v147 - 1))
                  {
                    unint64_t v148 = 0;
                    unsigned int v149 = 0;
                    LODWORD(v150) = 0;
                    int v151 = 1;
                  }
                  else
                  {
                    unsigned int v182 = a6;
                    unsigned int v156 = *(_DWORD *)(a1 + 3012);
                    int v157 = *(_DWORD *)(v145 + 23176 * v146 + 3612) - 1;
                    unsigned int v149 = v156 + v157;
                    if (!__CFADD__(v156, v157))
                    {
                      unint64_t v150 = *(unsigned int *)(v190 + 84) * (unint64_t)v149;
                      if ((v150 & 0xFFFFFFFF00000000) != 0)
                      {
                        unint64_t v148 = 0;
                        int v151 = 4;
                        goto LABEL_325;
                      }
                      unint64_t v148 = v150 + (unint64_t)(v144 + v147 - 1);
                      if (v148 >= SizeOfPlane)
                      {
                        int v151 = 6;
                        goto LABEL_325;
                      }
                      char v171 = CAVDDecoder::calcLumaChromaTileOffset((CAVDDecoder *)a1, v144, v156, *(_DWORD *)(*(void *)(a1 + 8360) + 76), *(_DWORD *)(*(void *)(a1 + 8360) + 80), *(unsigned __int8 *)(a1 + 3752), (unsigned int *)(a1 + 3016), (unsigned int *)(a1 + 3020));
                      uint64_t v11 = v196;
                      a6 = v182;
                      uint64_t v137 = v199;
                      if ((v171 & 1) == 0)
                      {
                        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                          goto LABEL_319;
                        }
                        buf[0] = 136315138;
                        *(void *)&buf[1] = "VADecodeFrame";
                        int v152 = &_os_log_internal;
                        uint64_t v153 = "AppleAVD: %s(): calcLumaChromaTileOffset returns fail";
                        goto LABEL_317;
                      }
                      goto LABEL_310;
                    }
                    unint64_t v148 = 0;
                    LODWORD(v150) = 0;
                    int v151 = 2;
                  }
LABEL_325:
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    int v22 = 1;
                    int v23 = 305;
                    LODWORD(v11) = v196;
                    goto LABEL_257;
                  }
                  int v174 = *(_DWORD *)(a1 + 3012);
                  int v175 = *(_DWORD *)(v145 + 23176 * v146 + 3612);
                  int v176 = *(_DWORD *)(v190 + 84);
                  buf[0] = 67111680;
                  buf[1] = v144;
                  LOWORD(buf[2]) = 1024;
                  *(_DWORD *)((char *)&buf[2] + 2) = v174;
                  HIWORD(buf[3]) = 1024;
                  uint8_t buf[4] = v147;
                  LOWORD(buf[5]) = 1024;
                  *(_DWORD *)((char *)&buf[5] + 2) = v175;
                  HIWORD(buf[6]) = 1024;
                  buf[7] = v176;
                  LOWORD(buf[8]) = 2048;
                  *(void *)((char *)&buf[8] + 2) = v148;
                  HIWORD(buf[10]) = 2048;
                  *(void *)&buf[11] = SizeOfPlane;
                  LOWORD(buf[13]) = 1024;
                  *(_DWORD *)((char *)&buf[13] + 2) = v151;
                  HIWORD(buf[14]) = 1024;
                  buf[15] = v144 + v147 - 1;
                  LOWORD(buf[16]) = 1024;
                  *(_DWORD *)((char *)&buf[16] + 2) = v149;
                  HIWORD(buf[17]) = 1024;
                  buf[18] = v150;
                  _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: tile offset out of bounds! [%u %u] + [%u %u], %u, %zu >= %zu ?, %u; %u %u %u",
                    (uint8_t *)buf,
                    0x4Cu);
                  int v22 = 1;
LABEL_255:
                  int v23 = 305;
                  goto LABEL_256;
                }
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(buf[0]) = 0;
                  int v152 = &_os_log_internal;
                  uint64_t v153 = "AppleAVD: bad IOSurface* in tile offset check";
                  uint32_t v154 = 2;
LABEL_318:
                  _os_log_impl(&dword_223977000, v152, OS_LOG_TYPE_DEFAULT, v153, (uint8_t *)buf, v154);
                }
              }
              else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                buf[0] = 136315138;
                *(void *)&buf[1] = "vSurfInfoDisp is NULL";
                int v152 = &_os_log_internal;
                uint64_t v153 = "AppleAVD: ERROR: [CAVDHevcDecErr] %s";
LABEL_317:
                uint32_t v154 = 12;
                goto LABEL_318;
              }
LABEL_319:
              int v22 = 1;
              goto LABEL_20;
            }
LABEL_310:
            if (*(unsigned char *)(a1 + 2356)) {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 208))(a1, v11, a6);
            }
            int v172 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 296))(a1, v137, v11, v202 & 1);
            (*(void (**)(uint64_t, void))(*(void *)a1 + 240))(a1, 0);
            uint64_t v173 = *(void *)(a1 + 2096);
            *(_DWORD *)(v173 + 12) = v137;
            AppleAVDCommandBuilder::setDecodeBufferSections(*(void *)(a1 + 2344), v173 + 8);
            if (*(unsigned char *)(a1 + 2356)) {
              *(_DWORD *)(a1 + 2332) = CAHDec::getDecBufIndex(*(CAHDec **)(a1 + 2096));
            }
            if (!v172) {
              return 0;
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_319;
            }
            buf[0] = 136315138;
            *(void *)&buf[1] = "VADecodeFrame";
            int v152 = &_os_log_internal;
            uint64_t v153 = "AppleAVD: %s(): DecodePicture fail";
            goto LABEL_317;
          }
          continue;
        }
        uint64_t v81 = 0;
        uint64_t v82 = v193 + 9856 * v192 + 9680;
        uint64_t v83 = -v79;
        uint64_t v84 = -(uint64_t)v80;
        while (1)
        {
          char v85 = (_DWORD *)(v83 == v81 ? v67 + 23176 * v68 + 22880 : v82);
          unsigned int v86 = *v85 - *(_DWORD *)(v82 - 4);
          if (v86 <= 1) {
            break;
          }
          v82 += 4;
          if (v84 == --v81) {
            goto LABEL_108;
          }
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          buf[0] = 136315650;
          *(void *)&buf[1] = "virtual int CAVDHevcDecoder::VADecodeFrame(unsigned char *, int, uint32_t, int, int, int,"
                               " avd_seq_params *)";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = -(int)v81;
          HIWORD(buf[4]) = 1024;
          buf[5] = v86;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() tile[%d] width %d, need at least two CTU wide\n", (uint8_t *)buf, 0x18u);
        }
        int v22 = 0;
        int v23 = 310;
        LODWORD(v11) = v60;
LABEL_257:
        if (*(unsigned char *)(a1 + 2832))
        {
          if (v22)
          {
            int v160 = *(HEVC_RLM **)(a1 + 3128);
            if (v160) {
              HEVC_RLM::removeCurrentFrameFromDPB(v160, *(_DWORD *)(a1 + 8424));
            }
          }
          *(unsigned char *)(a1 + 2833) = 0;
          if (v23 == 410) {
            return 410;
          }
          else {
            return 305;
          }
        }
        else
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 67109376;
            buf[1] = v11;
            LOWORD(buf[2]) = 1024;
            *(_DWORD *)((char *)&buf[2] + 2) = v23;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: SETTING m_skipToIdr TRUE! fno=%d, err=%d", (uint8_t *)buf, 0xEu);
          }
          *(unsigned char *)(a1 + 2833) = 1;
          int v161 = *(HEVC_RLM **)(a1 + 3128);
          if (v161) {
            HEVC_RLM::releaseAllPictures(v161);
          }
          return 406;
        }
      case 0x20u:
        if (HEVC_RBSP::parseVPS(*(int8x8_t **)(a1 + 3112), v188, 0, 0)) {
          goto LABEL_187;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_335;
        }
        buf[0] = 136315394;
        *(void *)&buf[1] = "VADecodeFrame";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = v47;
        int v178 = &_os_log_internal;
        int v179 = "AppleAVD: %s parse VPS error ! %d";
        goto LABEL_334;
      case 0x21u:
        unsigned int v133 = HEVC_RBSP::parseSPS(*(int8x8_t **)(a1 + 3112), (uint64_t)v188, *(void *)(a1 + 8280), 0, 0);
        if ((v133 & 0x80000000) != 0)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "VADecodeFrame";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = v47;
            int v178 = &_os_log_internal;
            int v179 = "AppleAVD: %s parse SPS error ! %d";
LABEL_334:
            _os_log_impl(&dword_223977000, v178, OS_LOG_TYPE_DEFAULT, v179, (uint8_t *)buf, 0x12u);
            int v22 = 0;
            int v23 = 310;
          }
          else
          {
LABEL_335:
            int v22 = 0;
            int v23 = 310;
          }
          goto LABEL_256;
        }
        unsigned int v134 = v133;
        uint64_t v135 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 416))(a1, *(void *)(a1 + 8280) + 23176 * v133);
        uint64_t v136 = (unsigned int *)(*(void *)(a1 + 8280) + 23176 * v134);
        v136[5793] = CAVDHevcDecoder::DpbMaxSize(v135, v136);
        goto LABEL_187;
      case 0x22u:
        if ((HEVC_RBSP::parsePPS(*(int8x8_t **)(a1 + 3112), *(void *)(a1 + 8288), *(void *)(a1 + 8280)) & 0x80000000) == 0) {
          goto LABEL_187;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_335;
        }
        buf[0] = 136315394;
        *(void *)&buf[1] = "VADecodeFrame";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = v47;
        int v178 = &_os_log_internal;
        int v179 = "AppleAVD: %s parse PPS error ! %d";
        goto LABEL_334;
      case 0x24u:
        *(_DWORD *)(*(void *)(a1 + 9088) + 4 * *(unsigned int *)(a1 + 3080)) = 1;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 408))(a1, 0x7FFFFFFFLL);
        goto LABEL_187;
      default:
        goto LABEL_187;
    }
  }
}

BOOL CAVDHevcDecoder::decodeGetRenderTarget(uint64_t a1, unsigned int a2, void *a3, int a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2 > 0x80)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      uint64_t v12 = "decodeGetRenderTarget";
      __int16 v13 = 1024;
      unsigned int v14 = a2;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s bad index %u", (uint8_t *)&v11, 0x12u);
    }
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v6 = a1 + 8 * a2;
    uint64_t v7 = (uint64_t *)(v6 + 24);
    int v8 = (uint64_t *)(v6 + 1056);
    if (a4 == 1) {
      int v8 = v7;
    }
    uint64_t v9 = *v8;
  }
  *a3 = v9;
  return v9 != 0;
}

uint64_t CAVDHevcDecoder::getDispFrameParams(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8280) + 23176 * *(int *)(a1 + 8320);
  if (HEVC_RLM::isBumpingNeeded(*(void *)(a1 + 3128), v4))
  {
    unsigned int v5 = 0;
    do
    {
      if (!HEVC_RLM::bumpingProcess(*(HEVC_RLM **)(a1 + 3128), v8) || v5 > 0xF) {
        break;
      }
      ++v5;
      (*(void (**)(uint64_t, _OWORD *))(*(void *)a1 + 360))(a1, v8);
    }
    while ((HEVC_RLM::isBumpingNeeded(*(void *)(a1 + 3128), v4) & 1) != 0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 368))(a1, a2);
}

uint64_t HEVC_RLM::isBumpingNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = 0;
  uint64_t v4 = *(unsigned int *)(a2 + 4);
  do
  {
    if (*(unsigned char *)(a1 + v2 + 16) && *(unsigned char *)(a1 + v2 + 18) == 1) {
      ++v3;
    }
    v2 += 176;
  }
  while (v2 != 2816);
  uint64_t v5 = a2 + 4 * v4;
  if (v3 > *(_DWORD *)(v5 + 3908)) {
    return 1;
  }
  if (*(_DWORD *)(v5 + 4164))
  {
    uint64_t v7 = 0;
    int v8 = (_DWORD *)(a2 + 4 * v4 + 22916);
    while (!*(unsigned char *)(a1 + v7 + 16) || *(unsigned char *)(a1 + v7 + 18) != 1 || *(_DWORD *)(a1 + v7 + 40) < *v8)
    {
      v7 += 176;
      if (v7 == 2816) {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t CAVDHevcDecoder::removeFrame(uint64_t a1, _OWORD *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8432);
  if (v2 >= *(_DWORD *)(a1 + 8436)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(a1 + 8440);
  if (v3)
  {
    uint64_t v4 = (long long *)(v3 + ((unint64_t)(v2 % *(_DWORD *)(a1 + 8448)) << 7));
    long long v5 = *v4;
    long long v6 = v4[1];
    long long v7 = v4[3];
    a2[2] = v4[2];
    a2[3] = v7;
    *a2 = v5;
    a2[1] = v6;
    long long v8 = v4[4];
    long long v9 = v4[5];
    long long v10 = v4[7];
    a2[6] = v4[6];
    a2[7] = v10;
    a2[4] = v8;
    a2[5] = v9;
    unsigned int v2 = *(_DWORD *)(a1 + 8432);
  }
  uint64_t v11 = 0;
  *(_DWORD *)(a1 + 8432) = v2 + 1;
  return v11;
}

uint64_t HEVC_RBSP::parseNAL(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t access_unit = HEVC_RBSP::next_access_unit((HEVC_RBSP *)a1, a3);
  if (access_unit)
  {
    unint64_t v6 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    unint64_t v7 = v6 >> 63;
    HEVC_RBSP::flush_bits(a1, 1);
    *a2 = v7;
    unint64_t v8 = *(void *)(a1 + 104);
    *(_DWORD *)(a1 + 164) += 6;
    unint64_t v9 = v8 >> 58;
    HEVC_RBSP::flush_bits(a1, 6);
    a2[1] = v9;
    unint64_t v10 = *(void *)(a1 + 104);
    *(_DWORD *)(a1 + 164) += 6;
    unint64_t v11 = v10 >> 58;
    HEVC_RBSP::flush_bits(a1, 6);
    a2[2] = v11;
    unint64_t v12 = *(void *)(a1 + 104);
    *(_DWORD *)(a1 + 164) += 3;
    unint64_t v13 = v12 >> 61;
    HEVC_RBSP::flush_bits(a1, 3);
    a2[3] = v13;
    a2[4] = v13 - 1;
  }
  return access_unit;
}

uint64_t HEVC_RBSP::next_access_unit(HEVC_RBSP *this, int a2)
{
  HEVC_RBSP::flush_bits((uint64_t)this, *((_DWORD *)this + 28) & 7);
  if (!a2) {
    return 1;
  }
  int v4 = *((_DWORD *)this + 27);
  int v5 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = v5 + 32;
  if (v4 == 1)
  {
    int v6 = 32;
    int v7 = 64;
LABEL_6:
    *((_DWORD *)this + 41) = v5 + v7;
    HEVC_RBSP::flush_bits((uint64_t)this, v6);
    return 1;
  }
  if ((v4 & 0xFFFFFF00) == 0x100)
  {
    int v6 = 24;
    int v7 = 56;
    goto LABEL_6;
  }
  return 0;
}

uint64_t HEVC_RBSP::setRBSP(HEVC_RBSP *this, unsigned __int8 *a2, uint64_t a3)
{
  *(void *)unint64_t v8 = 0;
  *((void *)this + 16) = &a2[a3];
  *((void *)this + 17) = a2;
  *((void *)this + 19) = 0;
  *((_WORD *)this + 72) = -1;
  *((_DWORD *)this + 41) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 40) = a3;
  unsigned int v7 = 0;
  *((void *)this + 13) = HEVC_RBSP::get_next_uint32(this, a2, v8, &v7, &v8[1]) << 32;
  *((void *)this + 19) = (unint64_t)v8[1] << 32;
  int v5 = &a2[v8[0]];
  uint64_t result = HEVC_RBSP::get_next_uint32(this, v5, v8, &v7, &v8[1]);
  *((void *)this + 13) |= result;
  *((void *)this + 19) |= v8[1];
  *((void *)this + 15) = &v5[v8[0]];
  *((_DWORD *)this + 28) = 8 * v7;
  return result;
}

BOOL CAVDDecoder::isADSDecryption(CAVDDecoder *this)
{
  int v1 = *((_DWORD *)this + 701);
  return v1 == 2 || v1 == 4;
}

uint64_t CAVDHevcDecoder::SetFirstPicAfterEosNal(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3100) = a2;
  return this;
}

uint64_t CAVDHevcDecoder::createDPB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 464))(a1, a4);
  unsigned int v6 = HEVC_RLM::addNewReferencePicture(*(void *)(a1 + 3128), a3);
  if (v6 > 0xF) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v8 = v6;
  *(_DWORD *)(**(void **)(a1 + 8400) + 4 * v6) = *(_DWORD *)(a1 + 8340);
  *(_DWORD *)(**(void **)(a1 + 8408) + 4 * v6) = *(_DWORD *)(a1 + 8356);
  *(_DWORD *)(a1 + 8424) = v6;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (result)
  {
    uint64_t result = 0;
    *(_DWORD *)(**(void **)(a1 + 8416) + 4 * v8) = *(_DWORD *)(a1 + 8372);
  }
  return result;
}

BOOL CAVDDecoder::isUsageModeiChat(CAVDDecoder *this)
{
  return *((_DWORD *)this + 702) == 1;
}

uint64_t HEVC_RLM::addNewReferencePicture(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 2))
  {
    for (uint64_t i = 0; i != 2816; i += 176)
    {
      if (*(unsigned char *)(a1 + i + 16) && *(unsigned char *)(a1 + i + 18) && *(_DWORD *)(a1 + i + 28) > *(_DWORD *)(a2 + 12)) {
        ++*(_DWORD *)(a1 + i + 40);
      }
    }
  }
  uint64_t v5 = HEVC_RLM::addNewEntry(a1, (long long *)a2);
  int v6 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = (v6 - 6) >= 4;
  }
  if (v7 && (v6 & 0xFFFFFFF1) != 0)
  {
    *(_DWORD *)(a1 + 6596) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 6600) = *(_DWORD *)(a1 + 6592);
  }
  if ((v6 & 0xFFFFFFF8) == 0x10) {
    *(void *)(a1 + 2840) = v5;
  }
  if (v5) {
    return *(unsigned int *)(v5 + 44);
  }
  else {
    return 16;
  }
}

uint64_t HEVC_RLM::addNewEntry(uint64_t a1, long long *a2)
{
  int v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = -2816;
  do
  {
    uint64_t v4 = a1 + v3;
    if (!*(unsigned char *)(a1 + v3 + 2832))
    {
      uint64_t v5 = v4 + 2832;
      long long v6 = a2[2];
      long long v7 = *a2;
      *(_OWORD *)(v4 + 2848) = a2[1];
      *(_OWORD *)(v4 + 2832) = v7;
      *(_OWORD *)(v4 + 2864) = v6;
      long long v8 = a2[3];
      long long v9 = a2[4];
      long long v10 = a2[5];
      *(_OWORD *)(v4 + 2928) = a2[6];
      *(_OWORD *)(v4 + 2912) = v10;
      *(_OWORD *)(v4 + 2896) = v9;
      *(_OWORD *)(v4 + 2880) = v8;
      long long v11 = a2[7];
      long long v12 = a2[8];
      long long v13 = a2[9];
      *(_OWORD *)(v4 + 2992) = a2[10];
      *(_OWORD *)(v4 + 2976) = v13;
      *(_OWORD *)(v4 + 2960) = v12;
      *(_OWORD *)(v4 + 2944) = v11;
      *(void *)(v4 + 2852) = 1;
      *(unsigned char *)(v4 + 2832) = 1;
      *(_DWORD *)(v4 + 2876) = v2;
      ++*(_DWORD *)(a1 + 2832);
      return v5;
    }
    ++v2;
    v3 += 176;
  }
  while (v3);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315394;
    uint64_t v16 = "addNewEntry";
    __int16 v17 = 1024;
    int v18 = 196;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v15, 0x12u);
  }
  return 0;
}

uint64_t CAVDHevcDecoder::getSlicesTypeInFrame(CAVDHevcDecoder *this, int a2)
{
  uint64_t v2 = *((void *)this + 1037);
  int v3 = *(_DWORD *)(v2 + 44);
  *((_DWORD *)this + 773) = v3;
  if (a2 >= 1)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (_DWORD *)(v2 + 44);
    do
    {
      v3 &= *v5;
      v5 += 590;
      --v4;
    }
    while (v4);
    *((_DWORD *)this + 773) = v3;
  }
  *((unsigned char *)this + 3689) = v3 != 2;
  return 0;
}

uint64_t CAVDHevcDecoder::createRefPicList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a3 + 44) <= 1u)
  {
    uint64_t v5 = *(unsigned int **)(a1 + 3128);
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    uint64_t result = HEVC_RLM::getReferencePictureList(v5, a3 + 24, (_OWORD *)(a3 + 2088), (_OWORD *)(a3 + 2216));
    if (result) {
      return result;
    }
    unsigned int v7 = *(_DWORD *)(a3 + 44);
    if (v7 <= 1)
    {
      unsigned int v8 = 0;
      unsigned int v9 = *(_DWORD *)(a3 + 620);
      while (2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a3 + 8 * v8 + 2088);
        do
        {
          if (v11 == *(void *)(a1 + 8520 + v10)) {
            goto LABEL_11;
          }
          v10 += 8;
        }
        while (v10 != 64);
        uint64_t v12 = *(unsigned int *)(a1 + 8720);
        if (v12 <= 7)
        {
          if (*(void *)(v11 + 48))
          {
            *(void *)(a1 + 8 * v12 + 8520) = v11;
            *(_DWORD *)(a1 + 8720) = v12 + 1;
LABEL_11:
            if (++v8 <= v9) {
              continue;
            }
            if (v7)
            {
              *(void *)(a3 + 2344) = 0;
              long long v13 = (void *)(a3 + 2344);
LABEL_30:
              if (!*(unsigned char *)(a3 + 616)) {
                return 0;
              }
              uint64_t v21 = *(unsigned int *)(a3 + 764);
              if (*(unsigned char *)(a3 + 762))
              {
                if (v21 <= *(_DWORD *)(a3 + 620))
                {
                  int v22 = (uint64_t *)(a3 + 8 * v21 + 2088);
LABEL_39:
                  uint64_t v23 = *v22;
                  goto LABEL_40;
                }
              }
              else if (v21 <= *(_DWORD *)(a3 + 624))
              {
                int v22 = (uint64_t *)(a3 + 8 * v21 + 2216);
                goto LABEL_39;
              }
              uint64_t v23 = 0;
LABEL_40:
              if (*(unsigned char *)(a1 + 8264) && *(_DWORD *)(a1 + 3836))
              {
                if (!v23 || !*(unsigned char *)(v23 + 41)) {
                  return 0;
                }
              }
              else if (!v23 || (*(_DWORD *)(v23 + 4) - 24) > 0xFFFFFFF7)
              {
                return 0;
              }
              uint64_t result = 0;
              *long long v13 = v23;
              return result;
            }
            unsigned int v16 = 0;
            unsigned int v17 = *(_DWORD *)(a3 + 624);
            while (2)
            {
              uint64_t v18 = 0;
              uint64_t v19 = *(void *)(a3 + 8 * v16 + 2216);
              do
              {
                if (v19 == *(void *)(a1 + 8520 + v18)) {
                  goto LABEL_28;
                }
                v18 += 8;
              }
              while (v18 != 64);
              uint64_t v20 = *(unsigned int *)(a1 + 8720);
              if (v20 > 7) {
                return 0xFFFFFFFFLL;
              }
              if (*(void *)(v19 + 48))
              {
                *(void *)(a1 + 8 * v20 + 8520) = v19;
                *(_DWORD *)(a1 + 8720) = v20 + 1;
LABEL_28:
                if (++v16 <= v17) {
                  continue;
                }
                long long v13 = (void *)(a3 + 2344);
                *(void *)(a3 + 2344) = 0;
                goto LABEL_30;
              }
              break;
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 0xFFFFFFFFLL;
            }
            int v24 = 136315394;
            int v25 = "createRefPicList";
            __int16 v26 = 1024;
            unsigned int v27 = v16;
            unsigned int v14 = &_os_log_internal;
            int v15 = "AppleAVD: %s(): bad ref list1[%d]";
            goto LABEL_19;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v24 = 136315394;
            int v25 = "createRefPicList";
            __int16 v26 = 1024;
            unsigned int v27 = v8;
            unsigned int v14 = &_os_log_internal;
            int v15 = "AppleAVD: %s(): bad ref list0[%d]";
LABEL_19:
            _os_log_impl(&dword_223977000, v14, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v24, 0x12u);
          }
        }
        return 0xFFFFFFFFLL;
      }
    }
  }
  uint64_t result = 0;
  *(void *)(a3 + 2344) = 0;
  return result;
}

__n128 AppleAVDCommandBuilder::setDecodeBufferSections(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 6276) = *(_OWORD *)(a2 + 12);
  *(__n128 *)(a1 + 6264) = result;
  return result;
}

BOOL CAVDHevcDecoder::isWPPCompliant(CAVDHevcDecoder *this, unsigned int a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    BOOL v3 = 0;
    int v4 = 0;
    int v5 = 0;
    long long v6 = (_DWORD *)(*((void *)this + 1037) + 2396);
    uint64_t v7 = 1;
    do
    {
      int v8 = v4;
      int v9 = *v6 / a2;
      int v4 = *v6 % a2;
      if (v8 && v9 != v5 && (v9 != v5 + 1 || v4 != 0)) {
        break;
      }
      v6 += 590;
      BOOL v3 = ++v7 >= (unint64_t)a3;
      int v5 = v9;
    }
    while (a3 != v7);
  }
  else
  {
    return 1;
  }
  return v3;
}

BOOL HEVC_RLM::bumpingProcess(HEVC_RLM *a1, _OWORD *a2)
{
  uint64_t v2 = 0;
  BOOL v3 = (char *)a1 + 16;
  signed int v4 = -1;
  int v5 = 0x7FFFFFFF;
  long long v6 = (char *)a1 + 16;
  do
  {
    int v7 = *v6;
    v6 += 176;
    if (v7)
    {
      if (v3[2])
      {
        int v8 = *((_DWORD *)v3 + 3);
        if (v8 < v5)
        {
          signed int v4 = v2;
          int v5 = v8;
        }
      }
    }
    ++v2;
    BOOL v3 = v6;
  }
  while (v2 != 16);
  if (v4 != -1)
  {
    if (a2)
    {
      int v9 = (_OWORD *)((char *)a1 + 176 * v4);
      long long v10 = v9[1];
      long long v11 = v9[3];
      a2[1] = v9[2];
      a2[2] = v11;
      *a2 = v10;
      long long v12 = v9[4];
      long long v13 = v9[5];
      long long v14 = v9[7];
      a2[5] = v9[6];
      a2[6] = v14;
      a2[3] = v12;
      a2[4] = v13;
      long long v15 = v9[8];
      long long v16 = v9[9];
      long long v17 = v9[11];
      a2[9] = v9[10];
      a2[10] = v17;
      a2[7] = v15;
      a2[8] = v16;
    }
    uint64_t v18 = (char *)a1 + 176 * v4;
    v18[18] = 0;
    if (!*((_DWORD *)v18 + 9)) {
      HEVC_RLM::removeEntry(a1, v4);
    }
  }
  return v4 != -1;
}

uint64_t HEVC_RBSP::getNumberOfBitsParsed(int8x8_t *this)
{
  return 8 * (this[15].i32[0] - this[17].i32[0])
       - this[14].i32[0]
       - (vaddlv_u8((uint8x8_t)vcnt_s8(this[19])) & 0x78u)
       - 32;
}

uint64_t CAVDHevcDecoder::isRandomAccessSkipPicture(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (!a2) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  signed int v5 = *(_DWORD *)(a2 + 12);
  if (v4 - 19 < 2) {
    goto LABEL_3;
  }
  signed int v6 = *(_DWORD *)(a1 + 8332);
  if (v6 == 0x7FFFFFFF)
  {
    if (v4 <= 0x15 && ((1 << v4) & 0x270000) != 0)
    {
LABEL_18:
      signed int v6 = *(_DWORD *)(a2 + 12);
      goto LABEL_19;
    }
  }
  else
  {
    BOOL v9 = v4 != 21 || *(_DWORD *)(a1 + 9056) == 0;
    if (!v9 || v4 - 16 < 3) {
      goto LABEL_18;
    }
    if (v4 == 21 && v6 != v5)
    {
LABEL_3:
      signed int v6 = 0x80000000;
LABEL_19:
      *(_DWORD *)(a1 + 8332) = v6;
      return (v4 & 0xFFFFFFFE) == 8 && v5 < v6;
    }
  }
  if (a3 == 2)
  {
    int v11 = *(_DWORD *)(a2 + 12);
    if (a4 == 1) {
      goto LABEL_33;
    }
  }
  if (a3 != 2 && a4 == 1)
  {
    int v11 = 0x7FFFFFFF;
LABEL_33:
    *(_DWORD *)(a1 + 8332) = v11;
    signed int v6 = v11;
  }
  if (v4 - 16 >= 6 && v6 == 0x7FFFFFFF) {
    return 1;
  }
  return (v4 & 0xFFFFFFFE) == 8 && v5 < v6;
}

uint64_t CAVDHevcDecoder::getDisplayMode(CAVDHevcDecoder *this, int a2)
{
  uint64_t result = 1;
  if (a2 > 1885745711)
  {
    if (a2 != 1885745712 && a2 != 1885745714)
    {
      int v3 = 1885746228;
LABEL_8:
      if (a2 != v3) {
        return 2;
      }
    }
  }
  else if (a2 != 1882468912 && a2 != 1882468914)
  {
    int v3 = 1882469428;
    goto LABEL_8;
  }
  return result;
}

uint64_t CAVDHevcDecoder::activatePS(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8324) = v2;
  if (v2 >= 64)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      BOOL v9 = "activatePS";
      __int16 v10 = 1024;
      int v11 = v2;
      int v3 = &_os_log_internal;
      unsigned int v4 = "AppleAVD: WARNING: %s(): bad PPS index %d";
LABEL_7:
      _os_log_impl(&dword_223977000, v3, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&v8, 0x12u);
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  int v5 = *(_DWORD *)(*(void *)(a1 + 8288) + 9856 * v2 + 4);
  *(_DWORD *)(a1 + 8320) = v5;
  if (v5 >= 16)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      BOOL v9 = "activatePS";
      __int16 v10 = 1024;
      int v11 = v5;
      int v3 = &_os_log_internal;
      unsigned int v4 = "AppleAVD: WARNING: %s(): bad SPS index %d";
      goto LABEL_7;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *(void *)(a1 + 8280);
  uint64_t result = 0;
  if (!*(_DWORD *)(v7 + 23176 * v5 + 3600)) {
    *(_DWORD *)(v7 + 23176 * v5 + 3640) = 0;
  }
  return result;
}

uint64_t CAVDHevcDecoder::VADisplaySurface(CAVDHevcDecoder *this, int a2)
{
  return 0;
}

uint64_t AppleAVDCommandBuilder::setDisplaySurf(uint64_t this, int a2)
{
  uint64_t v2 = *(int *)(this + 280);
  if ((int)v2 <= 31)
  {
    *(_DWORD *)(this + 4 * v2 + 284) = a2;
    ++*(_DWORD *)(this + 280);
  }
  return this;
}

uint64_t CAVDHevcDecoder::insertFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(_DWORD *)(a1 + 8436);
  unsigned int v5 = *(_DWORD *)(a1 + 8448);
  if (v4 - *(_DWORD *)(a1 + 8432) >= v5 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 136315394;
    int v22 = "insertFrame";
    __int16 v23 = 1024;
    int v24 = 3176;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v21, 0x12u);
  }
  uint64_t v6 = *(void *)(a1 + 8440);
  if (v6)
  {
    uint64_t v7 = v4 % v5;
    uint64_t v8 = *(unsigned int *)(a2 + 28);
    BOOL v9 = (_DWORD *)(v6 + (v7 << 7));
    *BOOL v9 = 1;
    v9[1] = v8;
    __int16 v10 = v9 + 2;
    if (*(_DWORD *)(a1 + 2644))
    {
      *__int16 v10 = 1;
      int v11 = (_DWORD *)(*(void *)(*(void *)(a1 + 8408) + 8 * v8) + 4 * *(unsigned int *)(a2 + 44));
      uint64_t v12 = (uint64_t *)(a2 + 56);
    }
    else
    {
      *__int16 v10 = 0;
      int v11 = (_DWORD *)(*(void *)(*(void *)(a1 + 8400) + 8 * v8) + 4 * *(unsigned int *)(a2 + 44));
      uint64_t v12 = (uint64_t *)(a2 + 48);
    }
    uint64_t v13 = *v12;
    uint64_t v14 = v6 + (v7 << 7);
    *(_DWORD *)(v14 + 12) = *v11;
    *(void *)(v14 + 16) = v13;
    long long v15 = *(_OWORD *)(a2 + 72);
    long long v16 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v14 + 56) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(v14 + 40) = v16;
    *(_OWORD *)(v14 + 24) = v15;
    long long v17 = *(_OWORD *)(a2 + 120);
    long long v18 = *(_OWORD *)(a2 + 136);
    long long v19 = *(_OWORD *)(a2 + 152);
    *(void *)(v14 + 120) = *(void *)(a2 + 168);
    *(_OWORD *)(v14 + 104) = v19;
    *(_OWORD *)(v14 + 88) = v18;
    *(_OWORD *)(v14 + 72) = v17;
    ++*(_DWORD *)(a1 + 8436);
  }
  return 0;
}

uint64_t CAVDDecoder::calcLumaChromaTileOffset(CAVDDecoder *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, unsigned int *a7, unsigned int *a8)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v8 = a4 * (unint64_t)a3;
  BOOL v9 = (v8 & 0xFFFFFFFF00000000) != 0;
  unsigned int v10 = a2 + v8;
  BOOL v11 = __CFADD__(a2, v8);
  *a7 = v10;
  int v12 = 1;
  if (v9 || v11) {
    goto LABEL_30;
  }
  if (a6 == 3)
  {
    if ((a2 & 0x80000000) == 0)
    {
      unint64_t v14 = a5 * (unint64_t)a3;
      BOOL v15 = (v14 & 0xFFFFFFFF00000000) != 0;
      unsigned int v16 = v14 + 2 * a2;
      BOOL v17 = __CFADD__(v14, 2 * a2);
      *a8 = v16;
      int v12 = 6;
      if (v15 || v17) {
        goto LABEL_30;
      }
      return 1;
    }
    int v12 = 5;
  }
  else
  {
    if (a6 != 1)
    {
      unint64_t v18 = a5 * (unint64_t)a3;
      BOOL v19 = (v18 & 0xFFFFFFFF00000000) != 0;
      unsigned int v20 = a2 + v18;
      BOOL v21 = __CFADD__(a2, v18);
      *a8 = v20;
      int v12 = 7;
      if (v19 || v21) {
        goto LABEL_30;
      }
      return 1;
    }
    unint64_t v13 = a5 * (unint64_t)a3;
    if ((v13 & 0xFFFFFFFF00000000) != 0)
    {
      int v12 = 2;
      goto LABEL_30;
    }
    uint64_t v22 = v13 + 1;
    uint64_t v23 = v22 << 31 >> 31;
    int v12 = 3;
    if (v23 != v22 || v23 < 0) {
      goto LABEL_30;
    }
    *a8 = a2 + (v23 >> 1);
    if (!__CFADD__(a2, v23 >> 1)) {
      return 1;
    }
    int v12 = 4;
  }
LABEL_30:
  BOOL v25 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v25)
  {
    int v26 = 136315394;
    unsigned int v27 = "calcLumaChromaTileOffset";
    __int16 v28 = 1024;
    int v29 = v12;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failKind = %d", (uint8_t *)&v26, 0x12u);
    return 0;
  }
  return result;
}

uint64_t HEVC_RLM::getReferencePictureList(unsigned int *a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  unint64_t v4 = a1[712];
  unint64_t v5 = a1[713];
  unint64_t v6 = a1[715];
  unint64_t v7 = a1[717];
  unint64_t v8 = a1[718];
  if (!(v5 + v4 + v6 + v7 + v8)) {
    return 201;
  }
  int v10 = *(_DWORD *)(a2 + 596);
  uint64_t v91 = (v10 + 1);
  int v90 = v10;
  unsigned int v88 = *(_DWORD *)(a2 + 1900);
  if (v91 > v88) {
    unsigned int v11 = v10 + 1;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a2 + 1900);
  }
  memset(v110, 0, sizeof(v110));
  *a3 = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  if (v11 >= 0x10) {
    unsigned int v12 = 16;
  }
  else {
    unsigned int v12 = v11;
  }
  if (v12)
  {
    unsigned int v13 = 0;
    int v98 = a1 + 880;
    __src = a1 + 784;
    unsigned int v14 = v12 - 1;
    int v97 = a1 + 816;
    uint64_t v96 = a1 + 720;
    char v95 = a1 + 912;
    do
    {
      if (v4)
      {
        if (v12 <= v13 + 1) {
          unsigned int v15 = v13 + 1;
        }
        else {
          unsigned int v15 = v12;
        }
        unsigned int v16 = v15 + ~v13;
        if (v16 >= (int)v4 - 1) {
          unsigned int v16 = v4 - 1;
        }
        memcpy((char *)v110 + 8 * (int)v13, __src, 8 * v16 + 8);
        uint64_t v17 = 0;
        do
        {
          int v18 = v17 + 1;
          if (v17 + 1 >= v4) {
            break;
          }
          unsigned int v19 = v13 + v17++ + 1;
        }
        while (v12 > v19);
        v13 += v18;
      }
      if (v7 && v13 < v12)
      {
        unsigned int v20 = v14 - v13;
        if (v14 - v13 >= (int)v7 - 1) {
          unsigned int v20 = v7 - 1;
        }
        memcpy((char *)v110 + 8 * (int)v13, v98, 8 * v20 + 8);
        uint64_t v21 = 0;
        do
        {
          int v22 = v21 + 1;
          if (v21 + 1 >= v7) {
            break;
          }
          unsigned int v23 = v13 + v21++ + 1;
        }
        while (v12 > v23);
        v13 += v22;
      }
      if (v5 && v13 < v12)
      {
        unsigned int v24 = v14 - v13;
        if (v14 - v13 >= (int)v5 - 1) {
          unsigned int v24 = v5 - 1;
        }
        memcpy((char *)v110 + 8 * (int)v13, v97, 8 * v24 + 8);
        uint64_t v25 = 0;
        do
        {
          int v26 = v25 + 1;
          if (v25 + 1 >= v5) {
            break;
          }
          unsigned int v27 = v13 + v25++ + 1;
        }
        while (v12 > v27);
        v13 += v26;
      }
      if (v6 && v13 < v12)
      {
        unsigned int v28 = v14 - v13;
        if (v14 - v13 >= (int)v6 - 1) {
          unsigned int v28 = v6 - 1;
        }
        memcpy((char *)v110 + 8 * (int)v13, v96, 8 * v28 + 8);
        uint64_t v29 = 0;
        do
        {
          int v30 = v29 + 1;
          if (v29 + 1 >= v6) {
            break;
          }
          unsigned int v31 = v13 + v29++ + 1;
        }
        while (v12 > v31);
        v13 += v30;
      }
      if (v8 && v13 < v12)
      {
        unsigned int v32 = v14 - v13;
        if (v14 - v13 >= (int)v8 - 1) {
          unsigned int v32 = v8 - 1;
        }
        memcpy((char *)v110 + 8 * (int)v13, v95, 8 * v32 + 8);
        uint64_t v33 = 0;
        do
        {
          int v34 = v33 + 1;
          if (v33 + 1 >= v8) {
            break;
          }
          unsigned int v35 = v13 + v33++ + 1;
        }
        while (v12 > v35);
        v13 += v34;
      }
    }
    while (v13 < v12);
  }
  if ((v90 & 0x80000000) == 0)
  {
    uint64_t v36 = 0;
    uint64_t v38 = a2;
    long long v37 = a3;
    int v39 = *(unsigned __int8 *)(a2 + 604);
    int v40 = a4;
    uint64_t v41 = v91;
    while (1)
    {
      uint64_t v42 = v39 ? *(unsigned int *)(a2 + 608 + 4 * v36) : v36;
      uint64_t v43 = *((void *)v110 + v42);
      *((void *)a3 + v36) = v43;
      if (!v43) {
        break;
      }
      if (v91 == ++v36)
      {
        unsigned int v44 = v91;
        goto LABEL_63;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 410;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "getReferencePictureList";
    unsigned int v46 = &_os_log_internal;
    unsigned int v47 = "AppleAVD: %s(): RefPicList0 Missing Reference detected !";
    unsigned int v48 = buf;
    goto LABEL_151;
  }
  unsigned int v44 = 0;
  long long v37 = a3;
  int v40 = a4;
  uint64_t v41 = v91;
  uint64_t v38 = a2;
LABEL_63:
  if (*(_DWORD *)(v38 + 20))
  {
    unsigned int v45 = 0;
    if (!v44) {
      goto LABEL_136;
    }
  }
  else
  {
    unsigned int v86 = v44;
    int v49 = *(_DWORD *)(v38 + 600);
    uint64_t v85 = (v49 + 1);
    int v87 = v49;
    if (v85 > v88) {
      unsigned int v50 = v49 + 1;
    }
    else {
      unsigned int v50 = v88;
    }
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    *(_OWORD *)buf = 0u;
    long long v103 = 0u;
    *int v40 = 0u;
    v40[1] = 0u;
    v40[2] = 0u;
    v40[3] = 0u;
    v40[4] = 0u;
    v40[5] = 0u;
    v40[6] = 0u;
    v40[7] = 0u;
    if (v50 >= 0x10) {
      unsigned int v51 = 16;
    }
    else {
      unsigned int v51 = v50;
    }
    if (v51)
    {
      unsigned int v52 = 0;
      unsigned int v53 = v51 - 1;
      do
      {
        if (v5)
        {
          if (v51 <= v52 + 1) {
            unsigned int v54 = v52 + 1;
          }
          else {
            unsigned int v54 = v51;
          }
          unsigned int v55 = v54 + ~v52;
          if (v55 >= (int)v5 - 1) {
            unsigned int v55 = v5 - 1;
          }
          memcpy(&buf[8 * v52], a1 + 816, 8 * v55 + 8);
          uint64_t v56 = 0;
          do
          {
            int v57 = v56 + 1;
            if (v56 + 1 >= v5) {
              break;
            }
            unsigned int v58 = v52 + v56++ + 1;
          }
          while (v51 > v58);
          v52 += v57;
        }
        if (v8 && v52 < v51)
        {
          unsigned int v59 = v53 - v52;
          if (v53 - v52 >= (int)v8 - 1) {
            unsigned int v59 = v8 - 1;
          }
          memcpy(&buf[8 * v52], a1 + 912, 8 * v59 + 8);
          uint64_t v60 = 0;
          do
          {
            int v61 = v60 + 1;
            if (v60 + 1 >= v8) {
              break;
            }
            unsigned int v62 = v52 + v60++ + 1;
          }
          while (v51 > v62);
          v52 += v61;
        }
        if (v4 && v52 < v51)
        {
          unsigned int v63 = v53 - v52;
          if (v53 - v52 >= (int)v4 - 1) {
            unsigned int v63 = v4 - 1;
          }
          memcpy(&buf[8 * v52], a1 + 784, 8 * v63 + 8);
          uint64_t v64 = 0;
          do
          {
            int v65 = v64 + 1;
            if (v64 + 1 >= v4) {
              break;
            }
            unsigned int v66 = v52 + v64++ + 1;
          }
          while (v51 > v66);
          v52 += v65;
        }
        if (v6 && v52 < v51)
        {
          unsigned int v67 = v53 - v52;
          if (v53 - v52 >= (int)v6 - 1) {
            unsigned int v67 = v6 - 1;
          }
          memcpy(&buf[8 * v52], a1 + 720, 8 * v67 + 8);
          uint64_t v68 = 0;
          do
          {
            int v69 = v68 + 1;
            if (v68 + 1 >= v6) {
              break;
            }
            unsigned int v70 = v52 + v68++ + 1;
          }
          while (v51 > v70);
          v52 += v69;
        }
        if (v7 && v52 < v51)
        {
          unsigned int v71 = v53 - v52;
          if (v53 - v52 >= (int)v7 - 1) {
            unsigned int v71 = v7 - 1;
          }
          memcpy(&buf[8 * v52], a1 + 880, 8 * v71 + 8);
          uint64_t v72 = 0;
          do
          {
            int v73 = v72 + 1;
            if (v72 + 1 >= v7) {
              break;
            }
            unsigned int v74 = v52 + v72++ + 1;
          }
          while (v51 > v74);
          v52 += v73;
        }
      }
      while (v52 < v51);
    }
    if ((v87 & 0x80000000) == 0)
    {
      uint64_t v75 = 0;
      uint64_t v38 = a2;
      long long v37 = a3;
      int v76 = *(unsigned __int8 *)(a2 + 605);
      int v40 = a4;
      unsigned int v45 = v85;
      while (1)
      {
        uint64_t v77 = v76 ? *(unsigned int *)(a2 + 672 + 4 * v75) : v75;
        uint64_t v78 = *(void *)&buf[8 * v77];
        *((void *)a4 + v75) = v78;
        if (!v78) {
          break;
        }
        if (v85 == ++v75) {
          goto LABEL_128;
        }
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 410;
      }
      *(_DWORD *)int v100 = 136315138;
      int v101 = "getReferencePictureList";
      unsigned int v46 = &_os_log_internal;
      unsigned int v47 = "AppleAVD: %s(): RefPicList1 Missing Reference detected !";
      unsigned int v48 = v100;
LABEL_151:
      _os_log_impl(&dword_223977000, v46, OS_LOG_TYPE_DEFAULT, v47, v48, 0xCu);
      return 410;
    }
    unsigned int v45 = 0;
    long long v37 = a3;
    int v40 = a4;
    uint64_t v38 = a2;
LABEL_128:
    uint64_t v41 = v91;
    unsigned int v44 = v86;
    if (!v86) {
      goto LABEL_136;
    }
  }
  if (!v45)
  {
    uint64_t v79 = *(unsigned int *)(v38 + 600);
    if ((v79 & 0x80000000) == 0)
    {
      unint64_t v80 = 0;
      uint64_t v81 = v79 + 1;
      do
      {
        uint64_t v82 = (void *)v40 + (v80 - 1);
        if (v80 < v44) {
          uint64_t v82 = v37;
        }
        *((void *)v40 + v80++) = *v82;
        ++v37;
      }
      while (v81 != v80);
    }
    return 0;
  }
LABEL_136:
  if (v45 && !v44)
  {
    if ((v90 & 0x80000000) == 0)
    {
      unint64_t v83 = 0;
      do
      {
        uint64_t v84 = &v37[(v83 - 1)];
        if (v83 < v45) {
          uint64_t v84 = v40;
        }
        v37[v83++] = *v84;
        int v40 = (_OWORD *)((char *)v40 + 8);
      }
      while (v41 != v83);
    }
    return 0;
  }
  if (v44 + v45) {
    return 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "getReferencePictureList";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): l0_count + l1_count ==0 !", buf, 0xCu);
  }
  return 1;
}

uint64_t CAHDecCatnipHevc::allocWorkBuf_PPS(CAHDecCatnipHevc *this, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  unsigned int v4 = (a2[909] + 9) & 0xFFFFFFFE;
  unsigned int v5 = (a2[910] + 9) & 0xFFFFFFFE;
  if (v4 <= v5) {
    unsigned int v6 = (a2[910] + 9) & 0xFFFFFFFE;
  }
  else {
    unsigned int v6 = (a2[909] + 9) & 0xFFFFFFFE;
  }
  int v7 = a2[900];
  if (v6 == 10) {
    int v8 = 40;
  }
  else {
    int v8 = 48;
  }
  if (v6 == 8) {
    int v8 = 32;
  }
  char v9 = v7 != 3;
  if (*((unsigned char *)a3 + 52))
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = a2[1106] + a2[1105];
    uint64_t v16 = a3[14];
    int v17 = a2[5718];
    unsigned int v18 = a2[902];
    do
    {
      int v19 = a3[v10 + 17] + 1;
      int v20 = v19 * v17;
      if (v19 * v17 + v13 > v18) {
        int v20 = v18 - v13;
      }
      if (v11 <= v20) {
        int v11 = v20;
      }
      if (v7)
      {
        unsigned int v21 = (v19 << v15) >> v9;
        if (v16 == v10) {
          unsigned int v21 = (((v18 >> 3) - (v14 << v15)) >> v9) + 1;
        }
        v12 += ((v21 + 2 * (v10 != 0)) * v8 + 127) & 0xFFFFFF80;
      }
      v13 += v20;
      v14 += v19;
      ++v10;
    }
    while (v16 + 1 != v10);
  }
  else
  {
    unsigned int v18 = a2[902];
    int v22 = (v8 + v8 * (v18 >> 3 >> v9) + 127) & 0x7FFFFF80;
    if (v7) {
      int v12 = v22;
    }
    else {
      int v12 = 0;
    }
    int v11 = a2[902];
  }
  signed int v23 = 0;
  uint64_t v24 = *((void *)this + 32);
  if (v11 >= -15) {
    int v25 = v11 + 15;
  }
  else {
    int v25 = v11 + 30;
  }
  int v26 = a3[14];
  if (*((unsigned char *)a3 + 52)) {
    int v27 = a3[14];
  }
  else {
    int v27 = 0;
  }
  int v65 = v27;
  if (v7 == 3) {
    int v28 = 48;
  }
  else {
    int v28 = 32;
  }
  if (v7 == 3) {
    int v29 = 176;
  }
  else {
    int v29 = 128;
  }
  if (!v7) {
    int v28 = 16;
  }
  unsigned int v30 = (v28 * v6) >> 3;
  if (!v7) {
    int v29 = 80;
  }
  int v63 = v25;
  int v64 = v29;
  int v31 = v25 >> 4;
  int v32 = (v25 >> 4) * v30;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  if (*((unsigned char *)a3 + 52) && v26)
  {
    uint64_t v36 = 0;
    int v37 = 0;
    unsigned int v35 = 0;
    unsigned int v34 = 0;
    unsigned int v33 = 0;
    if (v7 == 1) {
      int v38 = 8;
    }
    else {
      int v38 = 16;
    }
    if (!v7) {
      int v38 = 0;
    }
    unsigned int v39 = ((((6 * v38 + 96) * v6) >> 3) + 7) & 0x3FFFFFF8;
    int v40 = v38 + 16;
    unsigned int v41 = a2[903];
    signed int v42 = v4 - 8;
    signed int v43 = v5 - 8;
    if (v42 <= v43) {
      signed int v44 = v43;
    }
    else {
      signed int v44 = v42;
    }
    uint64_t v45 = a3[15];
    int v46 = a2[5718];
    BOOL v48 = *(_DWORD *)(v24 + 2644) == 1 && v44 != 0;
    int v49 = (char *)(a3 + 37);
    do
    {
      int v50 = v46 + v46 * *(_DWORD *)&v49[4 * v36];
      if (v50 + v37 > v41) {
        int v50 = v41 - v37;
      }
      int v51 = v50 + 15;
      if (v50 < -15) {
        int v51 = v50 + 30;
      }
      if (v36) {
        int v52 = (v51 >> 4) + 1;
      }
      else {
        int v52 = v51 >> 4;
      }
      unsigned int v53 = v52 * v39;
      if (v33 <= v53) {
        unsigned int v33 = v53;
      }
      unsigned int v54 = 36 * (v51 >> 4);
      if (v34 <= v54) {
        unsigned int v34 = v54;
      }
      if (v48)
      {
        if (v45 == v36) {
          int v55 = 23;
        }
        else {
          int v55 = 15;
        }
        unsigned int v56 = ((v55 + v50) / 16 * v40) | 6;
        if (v35 <= v56) {
          unsigned int v35 = v56;
        }
      }
      v37 += v50;
      ++v36;
    }
    while (v45 + 1 != v36);
    signed int v23 = (((3 * v6) & 0x7FFFFF) << 6) + (((v41 + 7) >> 3) + 2) * ((((v6 >> 1) & 0x1FFFFF) << 8) | 8);
  }
  if (v32 && CAVDDecoder::allocAVDMem(v24, (_OWORD *)this + 649, v32, 7, 1, 0))
  {
    int v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2402;
      __int16 v71 = 2080;
      uint64_t v72 = "IpAbove";
      unsigned int v58 = &_os_log_internal;
LABEL_113:
      _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", buf, 0x1Cu);
      goto LABEL_114;
    }
    goto LABEL_114;
  }
  if ((v11 + 30) >= 0x1F
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 462, 4 * (4 * v31 + (v63 >> 4)), 7, 1, 0))
  {
    int v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2403;
      __int16 v71 = 2080;
      uint64_t v72 = "MvAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
LABEL_114:
    (*(void (**)(CAHDecCatnipHevc *, void))(*(void *)v57 + 152))(v57, 0);
    return 0xFFFFFFFFLL;
  }
  int v59 = v65 + ((v18 + 15) >> 4);
  signed int v60 = v59 * ((((v64 * v6) >> 3) + 7) & 0x3FFFFFF8) + (v26 << 7);
  if (v60 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 660, v60, 7, 1, 0))
  {
    int v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2404;
      __int16 v71 = 2080;
      uint64_t v72 = "LfAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  int v61 = 36 * v59 + (v26 << 7);
  int v57 = this;
  if (v61 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 671, v61, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2405;
      __int16 v71 = 2080;
      uint64_t v72 = "LfAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v33 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 682, (int)v33, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2406;
      __int16 v71 = 2080;
      uint64_t v72 = "LfLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v34 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 693, (int)v34, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2407;
      __int16 v71 = 2080;
      uint64_t v72 = "LfLeftInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v35 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 704, (int)v35, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2408;
      __int16 v71 = 2080;
      uint64_t v72 = "SwLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v12 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 715, v12, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2409;
      __int16 v71 = 2080;
      uint64_t v72 = "AZAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (!v23) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 726, v23, 7, 1, 0);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2410;
      __int16 v71 = 2080;
      uint64_t v72 = "AZLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  return result;
}

void CAVDHevcDecoder::patchSps(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 10650))
  {
    *(void *)(a2 + 10652) = 0x700000007;
    *(_DWORD *)(a2 + 10664) = 2;
  }
}

CAHDecCatnipHevc *CAVDHevcDecoder::allocateHwDecoder(CAVDHevcDecoder *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v1 = *((_DWORD *)this + 769);
  if (v1 <= 399)
  {
    if (v1 > 300)
    {
      if (v1 > 315)
      {
        if (v1 == 316)
        {
          return (CAHDecCatnipHevc *)createRadishHevcDecoder(this);
        }
        else
        {
          if (v1 != 324) {
            goto LABEL_64;
          }
          return createClaryHevcDecoder(this);
        }
      }
      else if (v1 == 301)
      {
        return (CAHDecCatnipHevc *)createLilyDHevcDecoder(this);
      }
      else
      {
        if (v1 != 308) {
          goto LABEL_64;
        }
        return createDahliaHevcDecoder(this);
      }
    }
    else if (v1 > 25)
    {
      if (v1 == 26)
      {
        return createViolaHevcDecoder(this);
      }
      else
      {
        if (v1 != 28) {
          goto LABEL_64;
        }
        return createLotusHevcDecoder(this);
      }
    }
    else if (v1 == 14)
    {
      return createCloverHevcDecoder(this);
    }
    else
    {
      if (v1 != 21) {
        goto LABEL_64;
      }
      return createSalviaHevcDecoder(this);
    }
  }
  else
  {
    if (v1 > 415)
    {
      if (v1 <= 431)
      {
        if ((v1 - 416) < 2)
        {
          return createDaisyHevcDecoder(this);
        }
        if (v1 == 424)
        {
          return createTansyHevcDecoder(this);
        }
        goto LABEL_64;
      }
      if ((v1 - 432) < 2)
      {
        return createHibiscusHevcDecoder(this);
      }
      if (v1 == 440)
      {
        return createThymeHevcDecoder(this);
      }
LABEL_64:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v3 = 136315394;
        unsigned int v4 = "allocateHwDecoder";
        __int16 v5 = 1024;
        int v6 = v1;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Not supported AVD device type... %d", (uint8_t *)&v3, 0x12u);
      }
      return 0;
    }
    if ((v1 - 400) < 3 || v1 == 404)
    {
      return createIxoraHevcDecoder(this);
    }
    else
    {
      if (v1 != 408) {
        goto LABEL_64;
      }
      return createCatnipHevcDecoder(this);
    }
  }
}

uint64_t CAVDHevcDecoder::SetNumSurfaces(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2828) = a2;
  return this;
}

uint64_t CAVDHevcDecoder::DpbMaxSize(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = a2[16];
  if (v2)
  {
    unsigned int v3 = a2[903] * a2[902];
    signed int v4 = v2 / 3;
    if (v4 <= 29)
    {
      int v11 = 36864;
      if (v4 == 21) {
        int v12 = 245760;
      }
      else {
        int v12 = 0;
      }
      if (v4 == 20) {
        int v13 = 122880;
      }
      else {
        int v13 = v12;
      }
      BOOL v14 = v4 == 10;
    }
    else
    {
      if (v4 <= 0x3E)
      {
        if (((1 << v4) & 0x1C000000000000) != 0)
        {
          unsigned int v5 = 8912896;
          goto LABEL_32;
        }
        if (((1 << v4) & 0x7000000000000000) != 0)
        {
          unsigned int v5 = 35651584;
          goto LABEL_32;
        }
        if (((1 << v4) & 0x30000000000) != 0)
        {
          unsigned int v5 = 2228224;
LABEL_32:
          if (v3 <= v5 >> 2) {
            return 16;
          }
          if (v3 <= v5 >> 1) {
            return 12;
          }
          if (v3 <= (3 * v5) >> 2) {
            return 8;
          }
          return 6;
        }
      }
      int v11 = 552960;
      if (v4 == 31) {
        int v13 = 983040;
      }
      else {
        int v13 = 0;
      }
      BOOL v14 = v4 == 30;
    }
    if (v14) {
      unsigned int v5 = v11;
    }
    else {
      unsigned int v5 = v13;
    }
    goto LABEL_32;
  }
  int v6 = &a2[a2[1]];
  unsigned int v7 = v6[977];
  unsigned int v8 = v6[913];
  if (v7 <= v8 + 1) {
    unsigned int v7 = v8 + 1;
  }
  if (v6[1041])
  {
    unsigned int v9 = v6[5729];
    if (v7 <= v9) {
      unsigned int v7 = v9;
    }
  }
  if (v7 >= 0x10) {
    return 16;
  }
  else {
    return v7;
  }
}

uint64_t CAVDHevcDecoder::VAStopDecode(HEVC_RLM **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 2824))
  {
    LOBYTE(v10[0]) = 0;
    if (HEVC_RLM::bumpingProcess(this[391], v10) && LOBYTE(v10[0]) != 0)
    {
      unsigned int v3 = 1;
      do
      {
        if (BYTE2(v10[0])) {
          (*((void (**)(HEVC_RLM **, _OWORD *))*this + 45))(this, v10);
        }
        LOBYTE(v10[0]) = 0;
      }
      while (HEVC_RLM::bumpingProcess(this[391], v10) && v3++ <= 0xF && LOBYTE(v10[0]) != 0);
    }
    while (!(*((unsigned int (**)(HEVC_RLM **, _OWORD *))*this + 48))(this, v10))
      (*((void (**)(HEVC_RLM **, void))*this + 10))(this, HIDWORD(v10[0]));
    int v6 = this[391];
    if (v6) {
      HEVC_RLM::releaseAllPictures(v6);
    }
    unsigned int v7 = this[262];
    if (v7)
    {
      (*(void (**)(HEVC_RLM *))(*(void *)v7 + 136))(v7);
      (*(void (**)(HEVC_RLM *, void))(*(void *)this[262] + 152))(this[262], 0);
      unsigned int v8 = this[262];
      if (v8) {
        (*(void (**)(HEVC_RLM *))(*(void *)v8 + 8))(v8);
      }
      this[262] = 0;
    }
    (*((void (**)(HEVC_RLM **, uint64_t))*this + 35))(this, 1);
    return 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v10[0]) = 136315138;
      *(void *)((char *)v10 + 4) = "VAStopDecode";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: bailing out of %s because start didn't complete", (uint8_t *)v10, 0xCu);
    }
    return 305;
  }
}

uint64_t *CAHDecCatnipHevc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  unsigned int v2 = this;
  if (this[1298])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1298);
    v2[1298] = 0;
  }
  if (v2[924])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 924);
    v2[924] = 0;
  }
  if (v2[1320])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1320);
    v2[1320] = 0;
  }
  if (v2[1342])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1342);
    v2[1342] = 0;
  }
  if (v2[1364])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1364);
    v2[1364] = 0;
  }
  if (v2[1386])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1386);
    v2[1386] = 0;
  }
  if (v2[1408])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1408);
    v2[1408] = 0;
  }
  if (v2[1430])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1430);
    v2[1430] = 0;
  }
  if (v2[1452])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1452);
    v2[1452] = 0;
  }
  return this;
}

uint64_t CAHDecCatnipHevc::freeWorkBuf_SPS(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(_DWORD *)(*(void *)(this + 256) + 2648))
  {
    for (uint64_t i = 528; i != 3344; i += 176)
    {
      unsigned int v3 = (void *)(v1 + i);
      if (*(void *)(v1 + i))
      {
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v1 + i));
        *unsigned int v3 = 0;
      }
      if (v3[352])
      {
        signed int v4 = v3 + 352;
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), v4);
        *signed int v4 = 0;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1 + 7568;
  do
  {
    if (*(void *)(v6 + v5))
    {
      this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v6 + v5));
      *(void *)(v6 + v5) = 0;
    }
    v5 += 176;
  }
  while (v5 != 2816);
  return this;
}

uint64_t CAVDDecoder::deallocAVDMem(uint64_t a1, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v4 = MEMORY[0x223CBB190](*MEMORY[0x263EF8960], *a2, *((unsigned int *)a2 + 11));
  if (v4)
  {
    int v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *a2;
      int v7 = *((_DWORD *)a2 + 11);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "deallocAVDMem";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v6;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v7;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): WARNING! vm_deallocate failed! status: 0x%x Check for leaks! addr = 0x%llx - roundedUpSize: 0x%x", buf, 0x22u);
    }
  }
  unsigned int v8 = *(mach_port_t ***)(a1 + 2344);
  size_t v16 = 4;
  long long v9 = *((_OWORD *)a2 + 5);
  long long v20 = *((_OWORD *)a2 + 4);
  long long v21 = v9;
  long long v10 = *((_OWORD *)a2 + 10);
  long long v11 = *((_OWORD *)a2 + 8);
  long long v25 = *((_OWORD *)a2 + 9);
  long long v26 = v10;
  long long v12 = *((_OWORD *)a2 + 7);
  long long v22 = *((_OWORD *)a2 + 6);
  long long v23 = v12;
  long long v24 = v11;
  long long v13 = *((_OWORD *)a2 + 1);
  *(_OWORD *)buf = *(_OWORD *)a2;
  *(_OWORD *)&uint8_t buf[16] = v13;
  long long v14 = *((_OWORD *)a2 + 3);
  *(_OWORD *)&uint8_t buf[32] = *((_OWORD *)a2 + 2);
  long long v19 = v14;
  char v27 = 1;
  return IOConnectCallStructMethod(**v8, 4u, buf, 0xB8uLL, outputStruct, &v16);
}

void HEVC_RLM::releaseAllPictures(HEVC_RLM *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = 16;
  do
  {
    if (*((unsigned char *)this + v3)) {
      HEVC_RLM::removeEntry(this, v2);
    }
    ++v2;
    v3 += 176;
  }
  while (v2 != 16);
}

void CAHDecCatnipHevc::~CAHDecCatnipHevc(CAHDecCatnipHevc *this)
{
  CAHDecCatnipHevc::~CAHDecCatnipHevc(this);

  JUMPOUT(0x223CBAD30);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D73FCC0;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

void CAHDec::~CAHDec(CAHDec *this)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26D740068;
  if (*((void *)this + 10)
    && CAVDDecoder::deallocAVDMem(*((void *)this + 7), (uint64_t *)this + 10)
    && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v1 = 136315138;
    uint64_t v2 = "~CAHDec";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Error deallocating patch requests list", (uint8_t *)&v1, 0xCu);
  }
}

void sub_22398FE94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t CAVDHevcDecoder::initPicture(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, _DWORD *a5, unint64_t a6, char a7)
{
  int v12 = a3[1];
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)a6 = 0u;
  int v13 = a3[4];
  int v14 = a3[3] - 1;
  *(_DWORD *)(a6 + 4) = v12;
  *(_DWORD *)(a6 + 8) = v14;
  *(_DWORD *)(a6 + 16) = a5[8];
  uint64_t v15 = *(void *)(a1 + 8344);
  *(void *)(a6 + 48) = v15;
  *(_DWORD *)(a6 + 28) = *(_DWORD *)(a1 + 3080);
  int v16 = *(_DWORD *)(a1 + 8340);
  *(_DWORD *)(a6 + 64) = v16;
  *(_DWORD *)(a6 + 36) = v13;
  if (*(_DWORD *)(a1 + 2644))
  {
    uint64_t v15 = *(void *)(a1 + 8360);
    int v16 = *(_DWORD *)(a1 + 8356);
  }
  *(void *)(a6 + 56) = v15;
  *(_DWORD *)(a6 + 68) = v16;
  *(unsigned char *)(a6 + 104) = *(_DWORD *)(a4 + 3600);
  *(unsigned char *)(a6 + 102) = *(unsigned char *)(a4 + 3604);
  *(void *)&long long v17 = *(void *)(a4 + 3608);
  *(unsigned char *)(a6 + 103) = *(unsigned char *)(a4 + 3616);
  *((void *)&v17 + 1) = *(void *)(a4 + 3620);
  *(_OWORD *)(a6 + 72) = v17;
  *(void *)(a6 + 88) = *(void *)(a4 + 3628);
  *(unsigned char *)(a6 + 105) = *(_DWORD *)(a4 + 3636);
  *(unsigned char *)(a6 + 106) = *(_DWORD *)(a4 + 3640);
  CAVDHevcDecoder::deriveHevcOutputControlFlags(a1, (uint64_t)a3, (uint64_t)a5, a6, a7);
  *(_DWORD *)(a6 + 12) = HEVC_RLM::decodePicOrderCnt(*(_DWORD **)(a1 + 3128), (uint64_t)a3, a4, (uint64_t)a5, *(unsigned __int8 *)(a6 + 1));
  HEVC_RLM::decodeReferencePictureSet(*(void *)(a1 + 3128), a6, a4, a5);
  *(void *)&long long v18 = -1;
  *((void *)&v18 + 1) = -1;
  *(_OWORD *)(a1 + 8488) = v18;
  *(_OWORD *)(a1 + 8504) = v18;
  *(_OWORD *)(a1 + 8456) = v18;
  *(_OWORD *)(a1 + 8472) = v18;
  *(_DWORD *)(a1 + 8720) = 0;
  *(_OWORD *)(a1 + 8520) = 0u;
  *(_OWORD *)(a1 + 8536) = 0u;
  *(_OWORD *)(a1 + 8552) = 0u;
  *(_OWORD *)(a1 + 8568) = 0u;
  CAVDHevcDecoder::hevcOutputBumping((HEVC_RLM **)a1, (uint64_t)a3, a4, (uint64_t)a5, a6);
  return 0;
}

void HEVC_RLM::decodeReferencePictureSet(uint64_t a1, unint64_t a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v4 = (uint64_t)a4;
  unint64_t v5 = a3;
  uint64_t v108 = *MEMORY[0x263EF8340];
  int v7 = *(_DWORD *)(a2 + 12);
  unint64_t v89 = a2;
  int v8 = *(_DWORD *)(a2 + 4);
  if ((v8 & 0xFFFFFFF8) == 0x10 && *(unsigned char *)(a2 + 1) == 1 && a4[5] == 2)
  {
    for (uint64_t i = 36; i != 2852; i += 176)
      *(_DWORD *)(a1 + i) = 0;
  }
  else
  {
    for (uint64_t j = 36; j != 2852; j += 176)
    {
      if ((*(_DWORD *)(a1 + j) - 1) <= 1) {
        *(_DWORD *)(a1 + j) = 3;
      }
    }
    *(_DWORD *)(a1 + 2872) = 0;
    *(void *)(a1 + 2864) = 0;
    *(_OWORD *)(a1 + 2848) = 0u;
    memset(v107, 0, sizeof(v107));
    memset(v106, 0, sizeof(v106));
    memset(v105, 0, sizeof(v105));
    memset(v104, 0, sizeof(v104));
    memset(v103, 0, sizeof(v103));
    memset(v102, 0, sizeof(v102));
    memset(v101, 0, sizeof(v101));
    if ((v8 - 19) >= 2)
    {
      uint64_t v11 = a4[83];
      if (v11)
      {
        uint64_t v12 = 0;
        unsigned int v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = a4 + 86;
        do
        {
          if (*((unsigned char *)v15 + v12)) {
            unsigned int v16 = v14;
          }
          else {
            unsigned int v16 = v13;
          }
          if (*((unsigned char *)v15 + v12)) {
            a2 = (unint64_t)v107;
          }
          else {
            a2 = (unint64_t)v105;
          }
          if (*((unsigned char *)v15 + v12)) {
            ++v14;
          }
          else {
            ++v13;
          }
          *(_DWORD *)(a2 + 4 * v16) = v15[v12++ + 8] + v7;
        }
        while (v11 != v12);
      }
      else
      {
        unsigned int v14 = 0;
        unsigned int v13 = 0;
      }
      *(_DWORD *)(a1 + 2848) = v14;
      uint64_t v17 = a4[84];
      if (v17)
      {
        uint64_t v18 = 0;
        unsigned int v19 = 0;
        long long v20 = a4 + 90;
        do
        {
          if (*((unsigned char *)v20 + v18)) {
            unsigned int v21 = v19;
          }
          else {
            unsigned int v21 = v13;
          }
          if (*((unsigned char *)v20 + v18)) {
            a2 = (unint64_t)v106;
          }
          else {
            a2 = (unint64_t)v105;
          }
          if (*((unsigned char *)v20 + v18)) {
            ++v19;
          }
          else {
            ++v13;
          }
          *(_DWORD *)(a2 + 4 * v21) = v20[v18++ + 20] + v7;
        }
        while (v17 != v18);
      }
      else
      {
        unsigned int v19 = 0;
      }
      *(_DWORD *)(a1 + 2852) = v19;
      *(_DWORD *)(a1 + 2856) = v13;
      int v22 = a4[126];
      int v23 = a4[127];
      uint64_t v24 = (v23 + v22);
      if (v23 + v22)
      {
        uint64_t v25 = 0;
        unsigned int v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = (_DWORD *)(a3 + 22912);
        a2 = (unint64_t)v104;
        a3 = (unint64_t)v102;
        do
        {
          uint64_t v29 = v4 + 4 * v25;
          int v30 = *(_DWORD *)(v29 + 1904);
          int v31 = *(unsigned __int8 *)(v4 + v25 + 576);
          if (*(unsigned char *)(v4 + v25 + 576)) {
            int v30 = v30 + v7 - (((*v28 - 1) & v7) + *v28 * *(_DWORD *)(v29 + 1984));
          }
          if (*(unsigned char *)(v4 + v25 + 1968))
          {
            *((_DWORD *)v104 + v27) = v30;
            int v32 = (char *)v102 + 4 * v27++;
          }
          else
          {
            *((_DWORD *)v103 + v26) = v30;
            int v32 = (char *)v101 + 4 * v26++;
          }
          *(_DWORD *)int v32 = v31;
          ++v25;
        }
        while (v24 != v25);
        *(_DWORD *)(a1 + 2860) = v27;
        *(_DWORD *)(a1 + 2864) = v26;
        if (v27)
        {
          for (uint64_t k = 0; k != v27; ++k)
          {
            int v34 = *((_DWORD *)v104 + k);
            if (*((_DWORD *)v102 + k))
            {
              a2 = 0;
              while (1)
              {
                a3 = a1 + a2;
                if (*(unsigned char *)(a1 + a2 + 16))
                {
                  a3 = *(unsigned int *)(a3 + 28);
                  if (a3 == v34)
                  {
                    a3 = a1 + a2;
                    if (*(_DWORD *)(a1 + a2 + 36) == 3) {
                      break;
                    }
                  }
                }
                a2 += 176;
                if (a2 == 2816) {
                  goto LABEL_62;
                }
              }
              a2 = a3 + 16;
              *(void *)(a1 + 8 * k + 2880) = a3 + 16;
              *(_DWORD *)(a3 + 36) = 2;
            }
            else
            {
              a2 = 0;
              a3 = (*v28 - 1);
              while (1)
              {
                if (*(unsigned char *)(a1 + a2 + 16))
                {
                  if ((*(_DWORD *)(a1 + a2 + 28) & a3) == v34)
                  {
                    unsigned int v35 = (char *)(a1 + a2);
                    if (*(_DWORD *)(a1 + a2 + 36) == 3) {
                      break;
                    }
                  }
                }
                a2 += 176;
                if (a2 == 2816)
                {
LABEL_62:
                  *(void *)(a1 + 8 * k + 2880) = 0;
                  goto LABEL_63;
                }
              }
              a2 = (unint64_t)(v35 + 16);
              *(void *)(a1 + 8 * k + 2880) = v35 + 16;
              *((_DWORD *)v35 + 9) = 2;
            }
LABEL_63:
            ;
          }
        }
        if (v26)
        {
          for (uint64_t m = 0; m != v26; ++m)
          {
            int v37 = *((_DWORD *)v103 + m);
            if (*((_DWORD *)v101 + m))
            {
              uint64_t v38 = 0;
              while (1)
              {
                a2 = a1 + v38;
                a3 = *(unsigned __int8 *)(a1 + v38 + 16);
                if (*(unsigned char *)(a1 + v38 + 16))
                {
                  a2 = *(unsigned int *)(a2 + 28);
                  if (a2 == v37)
                  {
                    a2 = a1 + v38;
                    a3 = *(unsigned int *)(a1 + v38 + 36);
                    if (a3 == 3) {
                      break;
                    }
                  }
                }
                v38 += 176;
                if (v38 == 2816) {
                  goto LABEL_81;
                }
              }
              *(void *)(a1 + 8 * m + 3008) = a2 + 16;
              *(_DWORD *)(a2 + 36) = 2;
            }
            else
            {
              uint64_t v39 = 0;
              a2 = (*v28 - 1);
              while (1)
              {
                a3 = a1 + v39;
                if (*(unsigned char *)(a1 + v39 + 16))
                {
                  a3 = *(_DWORD *)(a3 + 28) & a2;
                  if (a3 == v37)
                  {
                    a3 = a1 + v39;
                    if (*(_DWORD *)(a1 + v39 + 36) == 3) {
                      break;
                    }
                  }
                }
                v39 += 176;
                if (v39 == 2816)
                {
LABEL_81:
                  *(void *)(a1 + 8 * m + 3008) = 0;
                  goto LABEL_82;
                }
              }
              *(void *)(a1 + 8 * m + 3008) = a3 + 16;
              *(_DWORD *)(a3 + 36) = 2;
            }
LABEL_82:
            ;
          }
        }
      }
      else
      {
        *(void *)(a1 + 2860) = 0;
      }
      if (v14)
      {
        for (uint64_t n = 0; n != v14; ++n)
        {
          uint64_t v41 = 0;
          while (1)
          {
            if (*(unsigned char *)(a1 + v41 + 16))
            {
              if (*(_DWORD *)(a1 + v41 + 28) == *((_DWORD *)v107 + n))
              {
                uint64_t v42 = a1 + v41;
                if (*(_DWORD *)(a1 + v41 + 36) == 3) {
                  break;
                }
              }
            }
            v41 += 176;
            if (v41 == 2816)
            {
              *(void *)(a1 + 8 * n + 3136) = 0;
              goto LABEL_96;
            }
          }
          *(void *)(a1 + 8 * n + 3136) = v42 + 16;
          *(_DWORD *)(v42 + 36) = 1;
LABEL_96:
          ;
        }
      }
      if (v19)
      {
        for (iuint64_t i = 0; ii != v19; ++ii)
        {
          uint64_t v44 = 0;
          while (1)
          {
            if (*(unsigned char *)(a1 + v44 + 16))
            {
              if (*(_DWORD *)(a1 + v44 + 28) == *((_DWORD *)v106 + ii))
              {
                uint64_t v45 = a1 + v44;
                if (*(_DWORD *)(a1 + v44 + 36) == 3) {
                  break;
                }
              }
            }
            v44 += 176;
            if (v44 == 2816)
            {
              *(void *)(a1 + 8 * ii + 3264) = 0;
              goto LABEL_106;
            }
          }
          *(void *)(a1 + 8 * ii + 3264) = v45 + 16;
          *(_DWORD *)(v45 + 36) = 1;
LABEL_106:
          ;
        }
      }
      if (v13)
      {
        for (juint64_t j = 0; jj != v13; ++jj)
        {
          uint64_t v47 = 0;
          while (1)
          {
            if (*(unsigned char *)(a1 + v47 + 16))
            {
              if (*(_DWORD *)(a1 + v47 + 28) == *((_DWORD *)v105 + jj))
              {
                uint64_t v48 = a1 + v47;
                if (*(_DWORD *)(a1 + v47 + 36) == 3) {
                  break;
                }
              }
            }
            v47 += 176;
            if (v47 == 2816)
            {
              *(void *)(a1 + 8 * jj + 3392) = 0;
              goto LABEL_116;
            }
          }
          *(void *)(a1 + 8 * jj + 3392) = v48 + 16;
          *(_DWORD *)(v48 + 36) = 1;
LABEL_116:
          ;
        }
      }
    }
    unint64_t v88 = v5;
    int v49 = *(unsigned char **)(a1 + 8);
    if (v49[9096])
    {
      uint64_t v50 = (*(uint64_t (**)(unsigned char *, unint64_t, unint64_t))(*(void *)v49 + 248))(v49, a2, a3);
      uint64_t v51 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 256))();
      int v52 = *(_DWORD *)(v89 + 28);
      int active = HEVC_RBSP::calcNumActiveRefLayerPics(v51, v50, v52, *(_DWORD *)(v89 + 36), v4);
      int v92 = v52;
      int v54 = HEVC_RBSP::calcViewId(v51, v50, v52);
      uint64_t v93 = v50;
      int v94 = HEVC_RBSP::calcViewId(v51, v50, 0);
      if (active >= 1)
      {
        uint64_t v55 = 0;
        int v56 = 0;
        int v57 = 0;
        unsigned int v91 = *(_DWORD *)(v89 + 12);
        uint64_t v58 = a1 + 3776;
        uint64_t v90 = active;
        do
        {
          uint64_t v59 = v4;
          uint64_t v60 = HEVC_RBSP::calcRefPiclayerId(v51, v93, v55, v92, v4);
          int v61 = HEVC_RBSP::calcViewId(v51, v93, v60);
          int v62 = v54 <= v94 && v54 <= v61 || v54 >= v94 && v54 >= v61;
          int v64 = (long long *)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 264))(*(void *)(a1 + 8), v91, v60);
          if (v64)
          {
            long long v65 = *v64;
            long long v66 = v64[2];
            *(_OWORD *)(v58 + 16) = v64[1];
            *(_OWORD *)(v58 + 32) = v66;
            *(_OWORD *)uint64_t v58 = v65;
            long long v67 = v64[3];
            long long v68 = v64[4];
            long long v69 = v64[6];
            *(_OWORD *)(v58 + 80) = v64[5];
            *(_OWORD *)(v58 + 96) = v69;
            *(_OWORD *)(v58 + 48) = v67;
            *(_OWORD *)(v58 + 64) = v68;
            long long v70 = v64[7];
            long long v71 = v64[8];
            long long v72 = v64[10];
            *(_OWORD *)(v58 + 144) = v64[9];
            *(_OWORD *)(v58 + 160) = v72;
            *(_OWORD *)(v58 + 112) = v70;
            *(_OWORD *)(v58 + 128) = v71;
            uint64_t v73 = (void *)(a1 + 2848 + 8 * v57 + 672);
            if (!v62) {
              uint64_t v73 = (void *)(a1 + 2848 + 8 * v56 + 800);
            }
            v57 += v62;
            v56 += v62 ^ 1;
            *uint64_t v73 = v58;
            *(_DWORD *)(v58 + 20) = 2;
          }
          else if (v62)
          {
            uint64_t v74 = a1 + 8 * v57++;
            *(void *)(v74 + 3520) = 0;
          }
          else
          {
            uint64_t v75 = a1 + 8 * v56++;
            *(void *)(v75 + 3648) = 0;
          }
          *(_DWORD *)(a1 + 2868) = v57;
          *(_DWORD *)(a1 + 2872) = v56;
          ++v55;
          v58 += 176;
          uint64_t v4 = v59;
        }
        while (v90 != v55);
      }
    }
    int v76 = *(_DWORD *)(v89 + 4);
    if ((v76 - 16) < 3 || v76 == 21 && *(unsigned char *)(v89 + 1) == 1)
    {
      unint64_t v77 = *(unsigned int *)(a1 + 2856);
      if (v77)
      {
        unint64_t v78 = 0;
        uint64_t v79 = &_os_log_internal;
        do
        {
          uint64_t v80 = *(void *)(a1 + 3392 + 8 * v78);
          if (v80)
          {
            *(_DWORD *)(v80 + 12) = *((_DWORD *)v105 + v78);
            *(unsigned char *)(v80 + 2) = 0;
            *(_DWORD *)(v80 + 20) = 1;
            *(void *)(v80 + 48) = 0;
          }
          else if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            uint64_t v96 = "decodeReferencePictureSet";
            __int16 v97 = 1024;
            int v98 = v77;
            __int16 v99 = 1024;
            int v100 = v78;
            _os_log_impl(&dword_223977000, v79, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s - missing st reference StFoll %d stIdx %d", buf, 0x18u);
            unint64_t v77 = *(unsigned int *)(a1 + 2856);
          }
          ++v78;
        }
        while (v78 < v77);
      }
      unint64_t v81 = *(unsigned int *)(a1 + 2864);
      if (v81)
      {
        unint64_t v82 = 0;
        unint64_t v83 = &_os_log_internal;
        do
        {
          uint64_t v84 = *(void *)(a1 + 3008 + 8 * v82);
          if (v84)
          {
            int v85 = *((_DWORD *)v103 + v82);
            *(_DWORD *)(v84 + 12) = v85;
            int v86 = (*(_DWORD *)(v88 + 22912) - 1) & v85;
            *(unsigned char *)(v84 + 2) = 0;
            *(_DWORD *)(v84 + 16) = v86;
            *(_DWORD *)(v84 + 20) = 2;
            *(void *)(v84 + 48) = 0;
          }
          else if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            uint64_t v96 = "decodeReferencePictureSet";
            __int16 v97 = 1024;
            int v98 = v81;
            __int16 v99 = 1024;
            int v100 = v82;
            _os_log_impl(&dword_223977000, v83, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s - missing lt reference LtFoll %d stIdx %d", buf, 0x18u);
            unint64_t v81 = *(unsigned int *)(a1 + 2864);
          }
          ++v82;
        }
        while (v82 < v81);
      }
    }
    for (kuint64_t k = 36; kk != 2852; kk += 176)
    {
      if (*(_DWORD *)(a1 + kk) == 3) {
        *(_DWORD *)(a1 + kk) = 0;
      }
    }
  }
}

uint64_t HEVC_RLM::decodePicOrderCnt(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 == 1 && (*(_DWORD *)(a2 + 4) & 0xFFFFFFF8) == 0x10)
  {
    unsigned int v5 = 0;
    a1[1648] = 0;
    unsigned int v6 = *(_DWORD *)(a4 + 32);
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a4 + 32);
    unsigned int v7 = a1[1649];
    if (v6 < v7 && (unsigned int v8 = *(_DWORD *)(a3 + 22912), v7 - v6 >= v8 >> 1))
    {
      unsigned int v5 = a1[1650] + v8;
    }
    else
    {
      BOOL v9 = v6 >= v7;
      unsigned int v10 = v6 - v7;
      if (v10 != 0 && v9 && (unsigned int v11 = *(_DWORD *)(a3 + 22912), v10 > v11 >> 1)) {
        unsigned int v5 = a1[1650] - v11;
      }
      else {
        unsigned int v5 = a1[1650];
      }
    }
    a1[1648] = v5;
  }
  return v6 + v5;
}

uint64_t CAVDHevcDecoder::deriveHevcOutputControlFlags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(a2 + 4);
  if ((v5 & 0xFFFFFFF8) == 0x10)
  {
    LOBYTE(v6) = 1;
    if ((v5 - 16) >= 5 && (a5 & 1) == 0) {
      int v6 = *(_DWORD *)(a1 + 9056);
    }
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  *(unsigned char *)(a4 + 1) = v6;
  *(unsigned char *)(a4 + 2) = *(unsigned char *)(a3 + 24);
  if ((v5 & 0xFFFFFFFE) != 8) {
    return 0;
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 3128) + 2840);
  if (v7)
  {
    if (*(unsigned char *)(v7 + 1))
    {
      uint64_t result = 0;
      *(unsigned char *)(a4 + 2) = 0;
      return result;
    }
    return 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315394;
    unsigned int v10 = "deriveHevcOutputControlFlags";
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s RASL picture %d with no associated IRAP picture", (uint8_t *)&v9, 0x12u);
  }
  return 310;
}

void CAVDHevcDecoder::hevcOutputBumping(HEVC_RLM **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(a2 + 4) & 0xFFFFFFF8) == 0x10 && *(unsigned char *)(a5 + 1) == 1)
  {
    if (*(_DWORD *)(a5 + 4) == 21 || *(unsigned char *)(a4 + 1) == 1)
    {
      uint64_t v7 = a1[391];
      HEVC_RLM::releaseAllPictures(v7);
    }
    else
    {
      HEVC_RLM::releaseUnusedPictures(a1[391]);
      unsigned int v10 = a1[391];
      if (*((_DWORD *)v10 + 708))
      {
        unsigned int v11 = 0;
        do
        {
          if (!HEVC_RLM::bumpingProcess(v10, v12)) {
            break;
          }
          if (v11 > 0xF) {
            break;
          }
          ++v11;
          (*((void (**)(HEVC_RLM **, _OWORD *))*a1 + 45))(a1, v12);
          unsigned int v10 = a1[391];
        }
        while (*((_DWORD *)v10 + 708));
      }
    }
  }
  else
  {
    HEVC_RLM::releaseUnusedPictures(a1[391]);
    if (HEVC_RLM::isBumpingNeededForNonIRAP((uint64_t)a1[391], a3))
    {
      unsigned int v8 = 0;
      do
      {
        if (!HEVC_RLM::bumpingProcess(a1[391], v12) || v8 > 0xF) {
          break;
        }
        ++v8;
        (*((void (**)(HEVC_RLM **, _OWORD *))*a1 + 45))(a1, v12);
      }
      while (HEVC_RLM::isBumpingNeededForNonIRAP((uint64_t)a1[391], a3));
    }
  }
}

void HEVC_RLM::releaseUnusedPictures(HEVC_RLM *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (char *)this + 18;
  do
  {
    if (*(v3 - 2) && !*(_DWORD *)(v3 + 18) && !*v3) {
      HEVC_RLM::removeEntry(this, v2);
    }
    v3 += 176;
    ++v2;
  }
  while (v2 != 16);
}

void HEVC_RLM::removeEntry(HEVC_RLM *this, unsigned int a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2 < 0x10)
  {
    int v5 = (char *)this + 176 * a2;
    uint64_t v7 = *((void *)v5 + 8);
    int v6 = v5 + 64;
    unsigned int v8 = v6 - 6;
    if (v7)
    {
      *int v6 = 0;
      uint64_t v9 = *((void *)this + 1);
      if (v9)
      {
        unsigned int v10 = (char *)this + 176 * a2;
        (*(void (**)(uint64_t, void, void))(*(void *)v9 + 40))(v9, *((unsigned int *)v10 + 20), 0);
        (*(void (**)(void, void, uint64_t))(**((void **)this + 1) + 40))(*((void *)this + 1), *((unsigned int *)v10 + 21), 1);
      }
    }
    *unsigned int v8 = 0;
    unsigned int v11 = (char *)this + 176 * a2;
    *((_DWORD *)v11 + 7) = 0;
    *((_DWORD *)v11 + 9) = 0;
    LODWORD(v11) = *((_DWORD *)this + 708);
    int v12 = v11 - 1;
    *((_DWORD *)this + 708) = v11 - 1;
    if ((int)v11 <= 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        unsigned int v14 = "removeEntry";
        __int16 v15 = 1024;
        unsigned int v16 = v12;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: WARNING _numActivePictures=%d is not valid, now clamped to 0\n", (uint8_t *)&v13, 0x12u);
      }
      *((_DWORD *)this + 708) = 0;
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315650;
    unsigned int v14 = "removeEntry";
    __int16 v15 = 1024;
    unsigned int v16 = a2;
    __int16 v17 = 1024;
    int v18 = 16;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): WARNING, index=%d is invalid, maximum allowable is %d\n", (uint8_t *)&v13, 0x18u);
  }
}

uint64_t CAVDHevcDecoder::VAReleaseOutputSurface(AppleAVDCommandBuilder **this, int a2, unsigned int a3)
{
  if (a3 != 1 || *((_DWORD *)this + 661)) {
    AppleAVDCommandBuilder::setReleaseCVPixelBufferIndex(this[292], a2, a3);
  }
  return 0;
}

void AppleAVDCommandBuilder::setReleaseCVPixelBufferIndex(AppleAVDCommandBuilder *this, int a2, unsigned int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 4 * a3;
  uint64_t v6 = *((int *)v3 + 4);
  uint64_t v4 = v3 + 16;
  uint64_t v5 = v6;
  if ((int)v6 > 31)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      unsigned int v8 = "setReleaseCVPixelBufferIndex";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR!!!", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    *((_DWORD *)this + 32 * (unint64_t)a3 + v5 + 6) = a2;
    ++*v4;
  }
}

BOOL HEVC_RLM::isBumpingNeededForNonIRAP(uint64_t a1, uint64_t a2)
{
  return (HEVC_RLM::isBumpingNeeded(a1, a2) & 1) != 0
      || *(_DWORD *)(a1 + 2832) >= (*(_DWORD *)(a2 + 4 * *(unsigned int *)(a2 + 4) + 3652) + 1);
}

uint64_t CAHDecCatnipHevc::populateSlices(CAHDecCatnipHevc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2924;
    uint64_t v5 = a2;
    do
    {
      CAHDecCatnipHevc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 368;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecCatnipHevc::populateSliceRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 256);
  int v6 = *(_DWORD *)(v5 + 8320);
  int v7 = *(_DWORD *)(v5 + 8324);
  uint64_t v8 = *(void *)(v5 + 8288);
  uint64_t v9 = *(void *)(v5 + 8280);
  uint64_t v10 = *(void *)(v5 + 8296);
  int v11 = a3;
  uint64_t v12 = v9 + 23176 * v6;
  *(_DWORD *)(a1 + 460) = 6 * *(_DWORD *)(v12 + 3636);
  LODWORD(v12) = *(_DWORD *)(v12 + 22880);
  *(_DWORD *)(a2 + 352) = 0x1000000;
  uint64_t v13 = v10 + 2360 * (int)a3;
  unsigned int v14 = (((*(_DWORD *)(v13 + 36) / v12) & 0xFFF) << 12) | 0x1000000;
  *(_DWORD *)(a2 + 352) = v14;
  *(_DWORD *)(a2 + 352) = v14 & 0xFFFFF000 | (*(_DWORD *)(v13 + 36) % v12) & 0xFFF;
  *(_DWORD *)(a2 + 4) = 0;
  char v15 = *(unsigned char *)(v8 + 9856 * v7 + 6477);
  if (v15) {
    char v15 = *(unsigned char *)(v10 + 2360 * (int)a3 + 1880);
  }
  int v16 = v15 & 1;
  *(_DWORD *)(a2 + 4) = v16;
  uint64_t v17 = v10 + 2360 * (int)a3;
  int v19 = *(_DWORD *)(v17 + 44);
  int v18 = (int *)(v17 + 44);
  if (v19 == 2) {
    LOBYTE(v20) = 0;
  }
  else {
    int v20 = 5 - *(_DWORD *)(v10 + 2360 * (int)a3 + 1864);
  }
  unsigned int v21 = v16 & 0xFFFFFFF1 | (2 * (v20 & 7));
  *(_DWORD *)(a2 + 4) = v21;
  if (*v18)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *(unsigned __int8 *)(v10 + 2360 * (int)a3 + 616);
    if (*(unsigned char *)(v10 + 2360 * (int)a3 + 616)) {
      int v22 = *(unsigned char *)(v10 + 2360 * (int)a3 + 762) == 0;
    }
  }
  int v23 = v21 | (16 * v22);
  *(_DWORD *)(a2 + 4) = v23;
  if (*v18 == 2)
  {
    char v24 = 0;
  }
  else
  {
    char v24 = *(unsigned char *)(v8 + 9856 * v7 + 17);
    if (v24) {
      char v24 = *(unsigned char *)(v10 + 2360 * (int)a3 + 761);
    }
  }
  unsigned int v25 = v23 & 0xFFFFFFDF | (32 * (v24 & 1));
  *(_DWORD *)(a2 + 4) = v25;
  if (*v18) {
    int v26 = 0;
  }
  else {
    int v26 = *(unsigned char *)(v10 + 2360 * (int)a3 + 760) == 0;
  }
  char v27 = 0;
  int v28 = v25 | (v26 << 6);
  *(_DWORD *)(a2 + 4) = v28;
  uint64_t v29 = v10 + 2360 * (int)a3;
  int v30 = (*(_DWORD *)(v29 + 624) & 0xF) << 7;
  if (*(_DWORD *)(v29 + 624) == -1) {
    int v30 = 0;
  }
  int v31 = v30 | v28;
  *(_DWORD *)(a2 + 4) = v31;
  int v32 = (*(_DWORD *)(v29 + 620) & 0xF) << 11;
  if (*(_DWORD *)(v29 + 620) == -1) {
    int v32 = 0;
  }
  int v33 = v31 | v32;
  *(_DWORD *)(a2 + 4) = v33;
  if (*v18 != 2)
  {
    char v27 = *(unsigned char *)(v9 + 23176 * v6 + 22284);
    if (v27) {
      char v27 = *(unsigned char *)(v10 + 2360 * (int)a3 + 616);
    }
  }
  uint64_t v133 = v9;
  int v134 = v6;
  unsigned int v34 = v33 & 0xFFFF7FFF | ((v27 & 1) << 15);
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a2 + 4) = v34 & 0xFFFCFFFF | ((*v18 & 3) << 16);
  *(_DWORD *)(a2 + 336) = 0;
  if (*v18 <= 1)
  {
    if (*(void *)(v10 + 2360 * (int)a3 + 2344))
    {
      if (!*(_DWORD *)(a1 + 11820))
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 256) + 344))(*(void *)(a1 + 256), a3);
        uint64_t v4 = a1;
        uint64_t v35 = *(void *)(a1 + 256);
        if (!*(_DWORD *)(v35 + 9032))
        {
          *(_DWORD *)(a1 + 11820) = 1;
          *(_DWORD *)(a2 + 4) |= 0x40000u;
          int v132 = 368 * a3;
          if (*(void *)(v35 + 8856) || *(_DWORD *)(v35 + 9008) || *(_DWORD *)(v35 + 9012))
          {
            uint64_t result = CAHDec::addToPatcherList(a1, (void *)(v35 + 8856), v132 + 3260, 0, 0xFFFFFFFFLL, 8, -256, 4);
            int v132 = 368 * a3;
            uint64_t v4 = a1;
            if (result) {
              return result;
            }
            if (*(void *)(v35 + 8856)) {
              goto LABEL_136;
            }
          }
          if (*(_DWORD *)(v35 + 9008) || *(_DWORD *)(v35 + 9012))
          {
LABEL_136:
            uint64_t result = CAHDec::addToPatcherList(v4, (void *)(v35 + 8856), v132 + 3288, 0, 0x3FFFFFFFFFFLL, 32, 1023, 4);
            uint64_t v4 = a1;
            if (result) {
              return result;
            }
          }
        }
      }
    }
  }
  uint64_t v36 = (unsigned int *)(v29 + 624);
  int v37 = (unsigned int *)(v29 + 620);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
  (*(void (**)(void, void))(**(void **)(v4 + 256) + 352))(*(void *)(v4 + 256), 0);
  if (*v18 <= 1)
  {
    uint64_t v38 = v5 + 8456;
    if ((*v37 & 0x80000000) != 0)
    {
      uint64_t v40 = 0;
      if (*v18) {
        goto LABEL_38;
      }
    }
    else
    {
      int v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = a2 + 8;
      do
      {
        uint64_t v42 = v40;
        *(_DWORD *)(v41 + 4 * v40) = v39 & 0xF0 | 0x2DC00000;
        *(_DWORD *)(v41 + 4 * v40) = v39 & 0xF0 | 0x2DC00000 | *(_DWORD *)(v38 + 4 * v40) & 0xF;
        ++v40;
        v39 += 16;
      }
      while (v42 < (int)*v37);
      if (*v18) {
        goto LABEL_38;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 256) + 352))(*(void *)(a1 + 256), 1, a3);
    if ((*v36 & 0x80000000) == 0)
    {
      int v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = a2 + 4 * v40 + 8;
      do
      {
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100;
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100 | *(_DWORD *)(v38 + 4 * v44) & 0xF;
        v43 += 16;
      }
      while (v44++ < (int)*v36);
    }
  }
LABEL_38:
  *(void *)(a2 + 128) = 0x2DD0000000000000;
  int v47 = *v18;
  if (*v18)
  {
    uint64_t v48 = a1;
    uint64_t v50 = v133;
    int v49 = v134;
    if (v47 != 1 || !*(unsigned char *)(v8 + 9856 * v7 + 49)) {
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v48 = a1;
    uint64_t v50 = v133;
    int v49 = v134;
    if (!*(unsigned char *)(v8 + 9856 * v7 + 50)) {
      goto LABEL_62;
    }
  }
  unsigned int v51 = 0;
  unsigned int v52 = 0;
  uint64_t v53 = v10 + 2360 * v11;
  uint64_t v54 = v8 + 9856 * v7;
  uint64_t v55 = (unsigned char *)(v54 + 50);
  int v56 = (unsigned char *)(v54 + 49);
  if (v47) {
    int v57 = v56;
  }
  else {
    int v57 = v55;
  }
  int v58 = ((*v57 & 1) << 6) | 0x2DD00000;
  *(_DWORD *)(a2 + 132) = v58;
  char v59 = *(_DWORD *)(v53 + 768);
  unsigned int v60 = v58 & 0xFFFFFFC7 | (8 * (*(_DWORD *)(v53 + 768) & 7));
  *(_DWORD *)(a2 + 132) = v60;
  unsigned __int8 v61 = (*(_DWORD *)(v53 + 772) + *(_DWORD *)(v53 + 768)) & 7;
  *(_DWORD *)(a2 + 132) = v60 & 0xFFFFFFF8 | v61;
  int v62 = 1 << (v59 & 7);
  int v63 = 1 << v61;
  do
  {
    uint64_t v64 = v51;
    if (*(unsigned char *)(v10 + 2360 * v11 + v51 + 776))
    {
      int v65 = ((v51 & 0xF) << 9) | 0x2DE04000;
      uint64_t v66 = a2 + 4 * v52;
      *(_DWORD *)(v66 + 136) = v65;
      uint64_t v67 = v10 + 2360 * v11 + 4 * v64;
      *(_DWORD *)(v66 + 136) = ((unsigned __int16)*(_DWORD *)(v67 + 808) + (_WORD)v62) & 0x1FF | v65;
      *(_DWORD *)(v66 + 232) = 770703360;
      *(_DWORD *)(v66 + 232) = *(unsigned __int16 *)(v67 + 872) | 0x2DF00000;
      ++v52;
    }
    if (*(unsigned char *)(v10 + 2360 * v11 + v64 + 792))
    {
      uint64_t v68 = 0;
      char v69 = 1;
      do
      {
        char v70 = v69;
        int v71 = ((v64 & 0xF) << 9) | (v68 << 14) | 0x2DE08000;
        uint64_t v72 = a2 + 4 * v52;
        *(_DWORD *)(v72 + 136) = v71;
        uint64_t v73 = v10 + 2360 * v11 + 8 * v64 + 4 * v68;
        *(_DWORD *)(v72 + 136) = ((unsigned __int16)*(_DWORD *)(v73 + 936) + (_WORD)v63) & 0x1FF | v71;
        *(_DWORD *)(v72 + 232) = 770703360;
        *(_DWORD *)(v72 + 232) = *(unsigned __int16 *)(v73 + 1608) | 0x2DF00000;
        ++v52;
        uint64_t v68 = 1;
        char v69 = 0;
      }
      while ((v70 & 1) != 0);
    }
    unsigned int v51 = v64 + 1;
  }
  while ((int)v64 + 1 <= *v37);
  if (!*v18)
  {
    unsigned int v74 = 0;
    do
    {
      uint64_t v75 = v74;
      if (*(unsigned char *)(v10 + 2360 * v11 + v74 + 1192))
      {
        int v76 = ((v74 & 0xF) << 9) | 0x2DE06000;
        uint64_t v77 = a2 + 4 * v52;
        *(_DWORD *)(v77 + 136) = v76;
        uint64_t v78 = v10 + 2360 * v11 + 4 * v75;
        *(_DWORD *)(v77 + 136) = ((unsigned __int16)*(_DWORD *)(v78 + 1224) + (_WORD)v62) & 0x1FF | v76;
        *(_DWORD *)(v77 + 232) = 770703360;
        *(_DWORD *)(v77 + 232) = *(unsigned __int16 *)(v78 + 1288) | 0x2DF00000;
        ++v52;
      }
      if (*(unsigned char *)(v10 + 2360 * v11 + v75 + 1208))
      {
        uint64_t v79 = 0;
        char v80 = 1;
        do
        {
          char v81 = v80;
          int v82 = ((v75 & 0xF) << 9) | (v79 << 14) | 0x2DE0A000;
          uint64_t v83 = a2 + 4 * v52;
          *(_DWORD *)(v83 + 136) = v82;
          uint64_t v84 = v10 + 2360 * v11 + 8 * v75 + 4 * v79;
          *(_DWORD *)(v83 + 136) = ((unsigned __int16)*(_DWORD *)(v84 + 1352) + (_WORD)v63) & 0x1FF | v82;
          *(_DWORD *)(v83 + 232) = 770703360;
          *(_DWORD *)(v83 + 232) = *(unsigned __int16 *)(v84 + 1736) | 0x2DF00000;
          ++v52;
          uint64_t v79 = 1;
          char v80 = 0;
        }
        while ((v81 & 1) != 0);
      }
      unsigned int v74 = v75 + 1;
    }
    while ((int)v75 + 1 <= *v36);
  }
  *(_DWORD *)(a2 + 128) = v52;
LABEL_62:
  uint64_t v85 = v8 + 9856 * v7;
  int v88 = *(unsigned __int8 *)(v85 + 48);
  int v86 = (unsigned __int8 *)(v85 + 48);
  LOBYTE(v87) = v88;
  if (v88) {
    int v87 = *(_DWORD *)(v10 + 2360 * v11 + 1876);
  }
  unsigned int v89 = *(_DWORD *)(a2 + 328) & 0xFFFFFFE0 | ((_BYTE)v87 + *((_DWORD *)v86 - 1)) & 0x1F;
  *(_DWORD *)(a2 + 328) = v89;
  int v90 = *v86;
  if (v90) {
    int v90 = *(_DWORD *)(v10 + 2360 * v11 + 1872);
  }
  unsigned int v91 = v89 & 0xFFFFFC1F | (32 * (((_BYTE)v90 + *(_DWORD *)(v8 + 9856 * v7 + 40)) & 0x1F));
  *(_DWORD *)(a2 + 328) = v91;
  int v92 = (_DWORD *)(v8 + 9856 * v7);
  int v93 = v92[7] + *(_DWORD *)(v10 + 2360 * v11 + 1868) + 26;
  *(_DWORD *)(a2 + 328) = v91 & 0xE03FF | ((v93 & 0x7F) << 10) | 0x2D900000;
  *(_DWORD *)(*(void *)(v48 + 256) + 2868) = *(_DWORD *)(v48 + 460) + (v93 << 25 >> 25);
  *(_DWORD *)(a2 + 332) = 0;
  int v94 = v92[1635] & 7;
  *(_DWORD *)(a2 + 332) = v94;
  unsigned int v95 = v94 & 0xFFFFFFC7 | (8 * (v92[1634] & 7));
  *(_DWORD *)(a2 + 332) = v95;
  uint64_t v96 = (char *)(v50 + 23176 * v49 + 10649);
  char v97 = *v96;
  if (*v96) {
    char v97 = *(unsigned char *)(v10 + 2360 * v11 + 618);
  }
  unsigned int v98 = v95 & 0xFFFFFFBF | ((v97 & 1) << 6);
  *(_DWORD *)(a2 + 332) = v98;
  if (*v96) {
    char v99 = *(unsigned char *)(v10 + 2360 * v11 + 617);
  }
  else {
    char v99 = 0;
  }
  int v100 = (v97 & 1) << 6;
  int v101 = (v99 & 1) << 7;
  unsigned int v102 = v98 & 0xFFFFFF7F | v101;
  *(_DWORD *)(a2 + 332) = v102;
  uint64_t v103 = v10 + 2360 * v11;
  uint64_t v104 = v8 + 9856 * v7;
  if (*(unsigned char *)(v103 + 1881)) {
    long long v105 = (_DWORD *)(v103 + 1888);
  }
  else {
    long long v105 = (_DWORD *)(v104 + 248);
  }
  unsigned int v106 = v102 & 0xFFFFF0FF | ((*v105 & 0xF) << 8);
  *(_DWORD *)(a2 + 332) = v106;
  if (*(unsigned char *)(v103 + 1881)) {
    long long v107 = (_DWORD *)(v103 + 1884);
  }
  else {
    long long v107 = (_DWORD *)(v104 + 244);
  }
  unsigned int v108 = v106 & 0xFFFF0FFF | ((*v107 & 0xF) << 12);
  *(_DWORD *)(a2 + 332) = v108;
  if (*(unsigned char *)(v104 + 239) && *(unsigned char *)(v103 + 1881)) {
    long long v109 = (unsigned __int8 *)(v10 + 2360 * v11 + 1882);
  }
  else {
    long long v109 = (unsigned __int8 *)(v8 + 9856 * v7 + 240);
  }
  int v110 = *v109;
  BOOL v111 = (v101 | v100) != 0;
  int v112 = v108 | ((v110 == 0) << 16);
  *(_DWORD *)(a2 + 332) = v112;
  if (!v110) {
    BOOL v111 = 1;
  }
  uint64_t v113 = v8 + 9856 * v7;
  if (v111) {
    unsigned int v114 = (unsigned char *)(v10 + 2360 * v11 + 1892);
  }
  else {
    unsigned int v114 = (unsigned char *)(v113 + 237);
  }
  unsigned int v115 = v112 & 0xFFFDFFFF | ((*v114 & 1) << 17);
  *(_DWORD *)(a2 + 332) = v115;
  if (*(unsigned char *)(v113 + 52)) {
    char v116 = *(unsigned char *)(v8 + 9856 * v7 + 236);
  }
  else {
    char v116 = 1;
  }
  unsigned int v117 = v115 & 0xFFFBFFFF | ((v116 & 1) << 18);
  *(_DWORD *)(a2 + 332) = v117;
  int v118 = *(unsigned __int8 *)(v50 + 23176 * v49 + 10650);
  if (*(unsigned char *)(v50 + 23176 * v49 + 10650)) {
    int v118 = *(unsigned char *)(v50 + 23176 * v49 + 10668) == 0;
  }
  *(_DWORD *)(a2 + 332) = v117 | (v118 << 19) | 0x2DA00000;
  int v119 = *(_DWORD **)(v48 + 256);
  int v120 = v119[626];
  if (v119[590] != 1)
  {
    unint64_t v137 = 0;
    uint64_t v138 = 0;
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))
    {
      int v128 = 368 * a3;
      *(_DWORD *)(a2 + 340) = 0;
      uint64_t v122 = v138;
      if (!*(void *)v138 && !*(_DWORD *)(v138 + 152) && !*(_DWORD *)(v138 + 156)) {
        goto LABEL_116;
      }
      int v129 = v137;
      if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v140 = "populateSliceRegisters";
        __int16 v141 = 1024;
        int v142 = 1617;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        int v129 = v137;
      }
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v128 + 3264, v129, 0x3FFFFFFFFFFLL, 32, 1023, 4);
      if (result) {
        return result;
      }
      uint64_t v122 = v138;
      if (!*(void *)v138)
      {
LABEL_116:
        if (!*(_DWORD *)(v122 + 152) && !*(_DWORD *)(v122 + 156)) {
          goto LABEL_122;
        }
      }
      int v125 = v128 + 3268;
      int v126 = v137;
      if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v140 = "populateSliceRegisters";
        __int16 v141 = 1024;
        int v142 = 1618;
        int v127 = &_os_log_internal;
        goto LABEL_120;
      }
LABEL_121:
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v125, v126, 0xFFFFFFFFLL, 0, -1, 4);
      if (result) {
        return result;
      }
      goto LABEL_122;
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t v137 = 0;
  uint64_t v138 = 0;
  if (!(*(unsigned int (**)(_DWORD *, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))return 0xFFFFFFFFLL; {
  int v121 = 368 * a3;
  }
  *(_DWORD *)(a2 + 340) = 0;
  uint64_t v122 = v138;
  if (!*(void *)v138 && !*(_DWORD *)(v138 + 152) && !*(_DWORD *)(v138 + 156)) {
    goto LABEL_101;
  }
  int v123 = v137;
  if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v140 = "populateSliceRegisters";
    __int16 v141 = 1024;
    int v142 = 1598;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v123 = v137;
  }
  uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v121 + 3264, v123, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  if (!result)
  {
    uint64_t v122 = v138;
    if (*(void *)v138) {
      goto LABEL_103;
    }
LABEL_101:
    if (*(_DWORD *)(v122 + 152) || *(_DWORD *)(v122 + 156))
    {
LABEL_103:
      int v125 = v121 + 3268;
      int v126 = v137;
      if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v140 = "populateSliceRegisters";
        __int16 v141 = 1024;
        int v142 = 1599;
        int v127 = &_os_log_internal;
LABEL_120:
        _os_log_impl(&dword_223977000, v127, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        int v126 = v137;
        goto LABEL_121;
      }
      goto LABEL_121;
    }
LABEL_122:
    unsigned int v130 = *(_DWORD *)(v10 + 2360 * v11 + 16) - (*(_DWORD *)(v10 + 2360 * v11 + 2080) >> 3);
    *(_DWORD *)(a2 + 348) = v130;
    if (v119[590] == 1)
    {
      *(void *)(a2 + 356) = 0;
      if (v130 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
        unsigned int v130 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
      }
      uint64_t result = 0;
      if (v119[605]) {
        int v131 = v130 | v120 & 0x10000;
      }
      else {
        int v131 = (unsigned __int16)v120 | (v130 << 22);
      }
      *(_DWORD *)(a2 + 360) = v131;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CAVDHevcDecoder::GetSDataMemInfo(uint64_t a1, unsigned int a2, void *a3, void *a4)
{
  if (*(unsigned char *)(a1 + 2834))
  {
    uint64_t v4 = *(void *)(a1 + 8296) + 2360 * a2;
    uint64_t v5 = *(void **)(a1 + 2840);
    uint64_t v6 = *(void *)(v4 + 8) - *v5;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 1048);
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v5 = (void *)(v7 + 8);
    uint64_t v4 = *(void *)(a1 + 8296) + 2360 * a2;
    uint64_t v6 = *(void *)(v4 + 8) - v8;
  }
  *a4 = v6 + ((unint64_t)*(unsigned int *)(v4 + 2080) >> 3);
  *a3 = v5;
  return 1;
}

uint64_t CAVDHevcDecoder::getSliceRefIDmap(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 8296);
  unsigned int v4 = *(_DWORD *)(v3 + 2360 * a3 + 44);
  if (a2)
  {
    if (!v4)
    {
      unsigned int v5 = 0;
      do
      {
        uint64_t v6 = 0;
        uint64_t v7 = v5;
        uint64_t v8 = *(void *)(v3 + 2360 * a3 + 8 * v5 + 2216);
        do
        {
          if (v8 == *(void *)(result + 8520 + 8 * v6)) {
            break;
          }
          ++v6;
        }
        while (v6 != 8);
        *(_DWORD *)(result + 4 * v7 + 8456) = v6;
        unsigned int v5 = v7 + 1;
      }
      while ((v7 + 1) <= *(_DWORD *)(v3 + 2360 * a3 + 624));
    }
  }
  else if (v4 <= 1)
  {
    unsigned int v9 = 0;
    do
    {
      uint64_t v10 = 0;
      uint64_t v11 = v9;
      uint64_t v12 = *(void *)(v3 + 2360 * a3 + 8 * v9 + 2088);
      do
      {
        if (v12 == *(void *)(result + 8520 + 8 * v10)) {
          break;
        }
        ++v10;
      }
      while (v10 != 8);
      *(_DWORD *)(result + 4 * v11 + 8456) = v10;
      unsigned int v9 = v11 + 1;
    }
    while ((v11 + 1) <= *(_DWORD *)(v3 + 2360 * a3 + 620));
  }
  return result;
}

uint64_t AppleAVDWrapperHEVCDecoderInvalidate()
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    int v1 = (_DWORD *)DerivedStorage;
    uint64_t v2 = (pthread_mutex_t *)(DerivedStorage + 5648);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 5648));
    int v3 = v1[1301];
    if ((v3 - 1) >= 2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 136315394;
        uint64_t v10 = "AppleAVDWrapperHEVCDecoderInvalidate";
        __int16 v11 = 1024;
        int v12 = v3;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s called but plugin state is %d", (uint8_t *)&v9, 0x12u);
      }
    }
    else
    {
      v1[1301] = 3;
      AppleAVDWrapperHEVCDecoderCleanUp();
    }
    pthread_mutex_unlock(v2);
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v5)
    {
      int v6 = v1[1457];
      int v7 = v1[1303];
      int v8 = v1[1304];
      int v9 = 136316162;
      uint64_t v10 = "AppleAVDWrapperHEVCDecoderInvalidate";
      __int16 v11 = 1024;
      int v12 = v6;
      __int16 v13 = 1024;
      int v14 = v7;
      __int16 v15 = 1024;
      int v16 = v8;
      __int16 v17 = 2048;
      int v18 = v1;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: HEVC, encryptionScheme %d, %d x %d, session: %p", (uint8_t *)&v9, 0x28u);
      return 0;
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = "AppleAVDWrapperHEVCDecoderInvalidate";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s called with invalid storage", (uint8_t *)&v9, 0xCu);
    }
    return 4294954393;
  }
  return result;
}

void AppleAVDWrapperHEVCDecoderCleanUp()
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(v1 + 5184);
  if (!v2) {
    goto LABEL_12;
  }
  int v3 = (uint64_t *)(v1 + 5184);
  int v4 = AppleAVDTerminateDecoder(v2);
  if (!v4)
  {
    int v6 = AppleAVDCloseConnection(v3);
    if (!v6) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  int v5 = v4;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCDecoder - ERROR terminate decoder", (uint8_t *)&v12, 2u);
  }
  int v6 = AppleAVDCloseConnection(v3);
  if (v6)
  {
LABEL_8:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCDecoder - ERROR closing connection", (uint8_t *)&v12, 2u);
    }
    goto LABEL_10;
  }
  int v6 = v5;
LABEL_10:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315394;
    __int16 v13 = "AppleAVDWrapperHEVCDecoderCleanUp";
    __int16 v14 = 1024;
    int v15 = v6;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR :: closeAppleAVDHW_HEVCDecoderInstance returned error %d", (uint8_t *)&v12, 0x12u);
  }
LABEL_12:
  ReleaseHeaderBufferAndCloseFileIO(DerivedStorage);
  int v7 = (__CVPixelBufferPool *)DerivedStorage[4];
  if (v7) {
    CVPixelBufferPoolRelease(v7);
  }
  DerivedStorage[4] = 0;
  int v8 = (__CVPixelBufferPool *)DerivedStorage[5];
  if (v8) {
    CVPixelBufferPoolRelease(v8);
  }
  DerivedStorage[5] = 0;
  int v9 = (const void *)DerivedStorage[6];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[6] = 0;
  }
  uint64_t v10 = (const void *)DerivedStorage[7];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[7] = 0;
  }
  *uint64_t DerivedStorage = 0;
  FigFormatDescriptionRelease();
  DerivedStorage[3] = 0;
  __int16 v11 = (const void *)DerivedStorage[649];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[649] = 0;
  }
  if (DerivedStorage[742])
  {
    FigHEVCBridge_HLSfMP4ParsingInfoDestroy();
    DerivedStorage[742] = 0;
  }
  AppleAVDWrapperHEVCDecoderCleanUpMVHEVCResources((uint64_t)DerivedStorage);
}

void ReleaseHeaderBufferAndCloseFileIO(void *a1)
{
  uint64_t v2 = (FILE *)a1[1003];
  if (v2)
  {
    fclose(v2);
    a1[1003] = 0;
  }
  int v3 = (FILE *)a1[1004];
  if (v3)
  {
    fclose(v3);
    a1[1004] = 0;
  }
  int v4 = (FILE *)a1[1005];
  if (v4)
  {
    fclose(v4);
    a1[1005] = 0;
  }
  int v5 = (FILE *)a1[1006];
  if (v5)
  {
    fclose(v5);
    a1[1006] = 0;
  }
  int v6 = (FILE *)a1[1007];
  if (v6)
  {
    fclose(v6);
    a1[1007] = 0;
  }
  int v7 = (void *)a1[704];
  if (v7) {
    free(v7);
  }
  a1[704] = 0;
  int v8 = (void *)a1[654];
  if (v8) {
    free(v8);
  }
  a1[654] = 0;
  int v9 = (void *)a1[655];
  if (v9) {
    free(v9);
  }
  a1[655] = 0;
  uint64_t v10 = (void *)a1[656];
  if (v10) {
    free(v10);
  }
  a1[656] = 0;
}

void ReleaseHeaderBufferAndCloseFileIO_0(void *a1)
{
  uint64_t v2 = (FILE *)a1[1103];
  if (v2)
  {
    fclose(v2);
    a1[1103] = 0;
  }
  int v3 = (FILE *)a1[1104];
  if (v3)
  {
    fclose(v3);
    a1[1104] = 0;
  }
  int v4 = (FILE *)a1[1105];
  if (v4)
  {
    fclose(v4);
    a1[1105] = 0;
  }
  int v5 = (FILE *)a1[1106];
  if (v5)
  {
    fclose(v5);
    a1[1106] = 0;
  }
  int v6 = (FILE *)a1[1107];
  if (v6)
  {
    fclose(v6);
    a1[1107] = 0;
  }
  int v7 = (void *)a1[802];
  if (v7) {
    free(v7);
  }
  a1[802] = 0;
  int v8 = (void *)a1[654];
  if (v8) {
    free(v8);
  }
  a1[654] = 0;
  int v9 = (void *)a1[655];
  if (v9) {
    free(v9);
  }
  a1[655] = 0;
}

void AppleAVDWrapperHEVCDecoderCleanUpMVHEVCResources(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16808);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16808) = 0;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 16816);
  if (v3)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16816), i);
        if (ValueAtIndex) {
          CFRelease(ValueAtIndex);
        }
      }
    }
    int v8 = *(const void **)(a1 + 16816);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 16816) = 0;
    }
  }
}

uint64_t AppleAVDTerminateDecoder(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(RingBuffer **)(a1 + 888);
  if (v2) {
    RingBuffer::waitForRingBuffersOutstanding(v2, 0, 10000);
  }
  StopAVDFrameReceiver(*(__CFRunLoop ***)(a1 + 1320), (pthread_t *)(a1 + 1392));
  if (*(unsigned char *)(a1 + 3756))
  {
    CFArrayRef v3 = *(void **)(a1 + 3736);
    if (v3) {
      free(v3);
    }
    int v4 = *(void **)(a1 + 3728);
    if (v4) {
      free(v4);
    }
  }
  *(_DWORD *)(a1 + 3744) = 0;
  DeleteCompressedBitBuffer(*(__IOSurface **)(a1 + 856));
  DeleteInputRingBuffer(a1);
  CFIndex v5 = *(__IOSurface **)(a1 + 3680);
  if (v5) {
    DeleteCompressedBitBuffer(v5);
  }
  int v6 = *(__CVBuffer **)(a1 + 3696);
  if (v6) {
    CVPixelBufferRelease(v6);
  }
  int v7 = *(__CVBuffer **)(a1 + 3704);
  if (v7) {
    CVPixelBufferRelease(v7);
  }
  int v8 = *(__CVBuffer **)(a1 + 3712);
  if (v8) {
    CVPixelBufferRelease(v8);
  }
  int v9 = *(const void **)(a1 + 3808);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 3808) = 0;
  }
  uint64_t v10 = AppleAVDDestroyDecodeDeviceInternal(a1);
  if (v10 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315394;
    __int16 v13 = "AppleAVDTerminateDecoder";
    __int16 v14 = 1024;
    int v15 = v10;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed error: %d \n", (uint8_t *)&v12, 0x12u);
  }
  return v10;
}

uint64_t RingBuffer::waitForRingBuffersOutstanding(RingBuffer *this, unsigned int a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  pthread_mutex_lock((pthread_mutex_t *)this);
  unsigned int v6 = *((unsigned __int8 *)this + 161);
  if (v6 <= a2)
  {
LABEL_11:
    uint64_t v9 = 0;
    goto LABEL_12;
  }
  unint64_t v7 = 0;
  if (!(1000000 * a3))
  {
LABEL_8:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v13 = "waitForRingBuffersOutstanding";
      __int16 v14 = 2048;
      unint64_t v15 = v7 / 0xF4240;
      __int16 v16 = 1024;
      unsigned int v17 = v6;
      __int16 v18 = 2048;
      uint64_t v19 = a3;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): Timed out, waited at least %llums! m_num_CPBs_on_the_fly=%u timeoutMS=%llu", buf, 0x26u);
    }
    uint64_t v9 = 60;
    goto LABEL_12;
  }
  while (1)
  {
    timespec v11 = (timespec)xmmword_223ADC3C0;
    uint64_t v8 = pthread_cond_timedwait_relative_np((pthread_cond_t *)((char *)this + 64), (pthread_mutex_t *)this, &v11);
    if (v8) {
      break;
    }
LABEL_6:
    unsigned int v6 = *((unsigned __int8 *)this + 161);
    if (v6 <= a2) {
      goto LABEL_11;
    }
    if (v7 >= 1000000 * a3) {
      goto LABEL_8;
    }
  }
  uint64_t v9 = v8;
  if (v8 == 60)
  {
    v7 += 100000000;
    goto LABEL_6;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v13 = "waitForRingBuffersOutstanding";
    __int16 v14 = 1024;
    LODWORD(v15) = v9;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): pthread_cond_timedwait exited with error: %d", buf, 0x12u);
  }
LABEL_12:
  pthread_mutex_unlock((pthread_mutex_t *)this);
  return v9;
}

void DeleteCompressedBitBuffer(__IOSurface *a1)
{
  kern_return_t v2;
  int v3;
  const char *v4;
  __int16 v5;
  kern_return_t v6;
  uint64_t v7;

  unint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v2 = IOSurfaceUnlock(a1, 0, 0);
    CFRelease(a1);
    if (v2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        CFArrayRef v3 = 136315394;
        int v4 = "DeleteCompressedBitBuffer";
        CFIndex v5 = 1024;
        unsigned int v6 = v2;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", (uint8_t *)&v3, 0x12u);
      }
    }
  }
}

uint64_t DeleteInputRingBuffer(uint64_t a1)
{
  uint64_t v2 = *(RingBuffer **)(a1 + 888);
  if (v2)
  {
    RingBuffer::~RingBuffer(v2);
    MEMORY[0x223CBAD30]();
    *(void *)(a1 + 888) = 0;
  }
  return 0;
}

void RingBuffer::~RingBuffer(RingBuffer *this)
{
  if (*((void *)this + 14))
  {
    if (*((unsigned char *)this + 160)) {
      MEMORY[0x223CBAD10]();
    }
    *((void *)this + 14) = 0;
  }
}

uint64_t StopAVDFrameReceiver(__CFRunLoop **this, pthread_t *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (this)
  {
    CFArrayRef v3 = *this;
    if (*this)
    {
      AVDFrameReceiver::RemoveIODispatcherFromRunLoop((AVDFrameReceiver *)this);
      CFRunLoopStop(v3);
      CFIndex v5 = pthread_self();
      if (pthread_equal(v5, *a2))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = "StopAVDFrameReceiver";
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): FrameReceiver->Emit thread called Invalidate|Finalize!", buf, 0xCu);
        }
      }
      else
      {
        *(void *)buf = 0;
        pthread_join(*a2, (void **)buf);
      }
      CFIndex v10 = CFGetRetainCount(v3);
      if (v10 != 1)
      {
        timespec v11 = (const char *)v10;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "StopAVDFrameReceiver";
          __int16 v14 = 2048;
          unint64_t v15 = v11;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s retain count is %ld", buf, 0x16u);
        }
      }
      CFRelease(v3);
      uint64_t v7 = 0;
      *this = 0;
      return v7;
    }
    uint64_t v7 = 3758097084;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return v7;
    }
    *(_WORD *)buf = 0;
    uint64_t v8 = &_os_log_internal;
    uint64_t v9 = "AppleAVD: AVDFrameReceiver ERROR: runLoopRef NULL\n";
LABEL_12:
    _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 2u);
    return v7;
  }
  unsigned int v6 = (FILE **)MEMORY[0x263EF8348];
  fprintf((FILE *)*MEMORY[0x263EF8348], "Assert - (%s) - f: %s l: %d\n", "pFrameReceiver != NULL", "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp", 435);
  fwrite("AVDFrameReceiver ERROR: StopAVDFrameReceiver called with pFrameReceiver NULL.\n", 0x4EuLL, 1uLL, *v6);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "pFrameReceiver != NULL";
    __int16 v14 = 2080;
    unint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp";
    __int16 v16 = 1024;
    int v17 = 435;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Assert - (%s) - f: %s l: %d\n", buf, 0x1Cu);
  }
  uint64_t v7 = 3758097084;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    uint64_t v8 = &_os_log_internal;
    uint64_t v9 = "AVDFrameReceiver ERROR: StopAVDFrameReceiver called with pFrameReceiver NULL.\n";
    goto LABEL_12;
  }
  return v7;
}

uint64_t AVDFrameReceiver::RemoveIODispatcherFromRunLoop(AVDFrameReceiver *this)
{
  uint64_t v2 = (__CFRunLoopSource *)*((void *)this + 2);
  if (v2)
  {
    CFRunLoopRemoveSource(*(CFRunLoopRef *)this, v2, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
    CFArrayRef v3 = (const void *)*((void *)this + 2);
    if (v3)
    {
      CFRelease(v3);
      *((void *)this + 2) = 0;
    }
  }
  int v4 = (__CFMachPort *)*((void *)this + 4);
  if (v4)
  {
    CFMachPortInvalidate(v4);
    CFIndex v5 = (const void *)*((void *)this + 4);
    if (v5)
    {
      CFRelease(v5);
      *((void *)this + 4) = 0;
    }
  }
  ipc_space_t v6 = *MEMORY[0x263EF8960];
  mach_port_name_t v7 = *((_DWORD *)this + 6);

  return mach_port_mod_refs(v6, v7, 1u, -1);
}

uint64_t AppleAVDDestroyDecodeDeviceInternal(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  size_t outputStructCnt = 3528;
  bzero(outputStruct, 0xDC8uLL);
  uint64_t v2 = IOConnectCallStructMethod(*(_DWORD *)a1, 1u, inputStruct, 4uLL, outputStruct, &outputStructCnt);
  if (v2 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v18 = "AppleAVDDestroyDecodeDeviceInternal";
    __int16 v19 = 1024;
    int v20 = v2;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed error: %d \n", buf, 0x12u);
  }
  uint64_t v3 = *(void *)(a1 + 3848);
  if (v3) {
    AppleAVDCommandBuilder::destroyDecoder(v3, (uint64_t)inputStruct, outputStruct);
  }
  char v4 = 0;
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    char v7 = v6;
    if ((*(_DWORD *)(a1 + 228) - 3) >= 2)
    {
      if (!*(unsigned char *)(a1 + 880)) {
        v4 &= *(void *)(a1 + 16) != 0;
      }
      if (v4) {
        break;
      }
    }
    uint64_t v8 = &outputStruct[v5];
    int v10 = (unsigned __int16)v8[1];
    uint64_t v9 = v8 + 1;
    if (v10)
    {
      unint64_t v11 = 0;
      do
        AppleAVDReleaseCVPixelBuffer(a1, (unsigned __int16)outputStruct[32 * v5 + 3 + v11++], v5, 0xFFFFFFFF, 1);
      while (v11 < *v9);
    }
    char v6 = 0;
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v7 & 1) != 0);
  int v12 = *(AppleAVDCommandBuilder **)(a1 + 3848);
  if (v12)
  {
    AppleAVDCommandBuilder::~AppleAVDCommandBuilder(v12);
    MEMORY[0x223CBAD30]();
    *(void *)(a1 + 3848) = 0;
  }
  return v2;
}

void AppleAVDCommandBuilder::~AppleAVDCommandBuilder(AppleAVDCommandBuilder *this)
{
  uint64_t v2 = (char *)this + 5905;
  if (*((unsigned char *)this + 5905)) {
    AppleAVDCommandBuilder::freeRVRAMemory(this);
  }
  *uint64_t v2 = 0;
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 1) = 0;
}

void CAVDDecoder::~CAVDDecoder(CAVDDecoder *this)
{
  *(void *)this = &unk_26D73E3B0;
}

uint64_t AppleAVDCloseConnection(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 1320);
  if (v3)
  {
    DestroyAVDFrameReceiver(v3, v2 + 1328);
    *(void *)(v2 + 1320) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)(v2 + 784));
  pthread_cond_destroy((pthread_cond_t *)(v2 + 1408));
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    char v6 = v5;
    char v7 = *(BufferPool **)(v2 + 8 * v4 + 200);
    if (v7)
    {
      BufferPool::~BufferPool(v7);
      MEMORY[0x223CBAD30]();
    }
    char v5 = 0;
    uint64_t v4 = 1;
  }
  while ((v6 & 1) != 0);
  uint64_t v8 = IOServiceClose(*(_DWORD *)v2);
  if (*(unsigned char *)(v2 + 3628))
  {
    uint64_t v9 = *(__CVBuffer **)(v2 + 3648);
    if (!v9 || (CVPixelBufferRelease(v9), *(unsigned char *)(v2 + 3628)))
    {
      int v10 = *(__CVBuffer **)(v2 + 3656);
      if (v10) {
        CVPixelBufferRelease(v10);
      }
    }
  }
  free(*(void **)(v2 + 3936));
  free((void *)v2);
  *a1 = 0;
  return v8;
}

void BufferPool::~BufferPool(BufferPool *this)
{
  pthread_mutex_lock((pthread_mutex_t *)this);
  if (!*((_DWORD *)this + 34))
  {
    uint64_t v4 = *((void *)this + 15);
    if (!v4) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  uint64_t v4 = *((void *)this + 15);
  do
  {
    if (*(void *)(v4 + v2 + 24))
    {
      if (*(_DWORD *)(v4 + v2) == 1
        && *(void *)(v4 + v2 + 16)
        && (!*((unsigned char *)this + 160) || *((_DWORD *)this + 35) == 1))
      {
        CVPixelBufferRelease(*(CVPixelBufferRef *)(v4 + v2 + 16));
        uint64_t v4 = *((void *)this + 15);
      }
      if (*(void *)(v4 + v2 + 24))
      {
        CFRelease(*(CFTypeRef *)(v4 + v2 + 24));
        uint64_t v4 = *((void *)this + 15);
        *(void *)(v4 + v2 + 24) = 0;
      }
    }
    ++v3;
    v2 += 184;
  }
  while (v3 < *((unsigned int *)this + 34));
  if (v4)
  {
LABEL_13:
    MEMORY[0x223CBAD10](v4, 0x10A0C80F1046F04);
    *((void *)this + 15) = 0;
  }
LABEL_14:
  pthread_mutex_unlock((pthread_mutex_t *)this);
  pthread_mutex_destroy((pthread_mutex_t *)this);
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 64));
}

uint64_t DestroyAVDFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1)
  {
    MEMORY[0x223CBAD30](a1, 0x10A0C40FE0E7621);
    if (a2)
    {
      pthread_attr_destroy((pthread_attr_t *)a2);
      return 0;
    }
  }
  else
  {
    unint64_t v3 = (FILE **)MEMORY[0x263EF8348];
    fprintf((FILE *)*MEMORY[0x263EF8348], "Assert - (%s) - f: %s l: %d\n", "pFrameReceiver != NULL", "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp", 493);
    fwrite("AVDFrameReceiver ERROR: DestroyAVDFrameReceiver called with pFrameReceiver NULL.\n", 0x51uLL, 1uLL, *v3);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      char v6 = "pFrameReceiver != NULL";
      __int16 v7 = 2080;
      uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp";
      __int16 v9 = 1024;
      int v10 = 493;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Assert - (%s) - f: %s l: %d\n", buf, 0x1Cu);
    }
    a2 = 3758097084;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AVDFrameReceiver ERROR: DestroyAVDFrameReceiver called with pFrameReceiver NULL.\n", buf, 2u);
    }
  }
  return a2;
}

uint64_t AVDFrameReceiver::FrameDone(AVDFrameReceiver *this, void *a2, uint64_t *a3, unint64_t *a4)
{
  int v5 = (int)a2;
  uint64_t v24 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (a3)
  {
    if (this)
    {
      if (v5)
      {
        __int16 v7 = (FILE **)MEMORY[0x263EF8348];
        fprintf((FILE *)*MEMORY[0x263EF8348], "Assert - (%s) - f: %s l: %d\n", "commandResult == kIOReturnSuccess", "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp", 293);
        fwrite("AVDFrameReceiver ERROR: commandResult != kIOReturnSuccess.\n", 0x3BuLL, 1uLL, *v7);
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          __int16 v19 = "commandResult == kIOReturnSuccess";
          __int16 v20 = 2080;
          uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp";
          __int16 v22 = 1024;
          int v23 = 293;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Assert - (%s) - f: %s l: %d\n", buf, 0x1Cu);
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          uint64_t v8 = &_os_log_internal;
          __int16 v9 = "AVDFrameReceiver ERROR: commandResult != kIOReturnSuccess.\n";
LABEL_16:
          _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 2u);
        }
      }
      else
      {
        uint64_t v12 = *a3;
        if (HIDWORD(*a3) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          __int16 v19 = "FrameDone";
          __int16 v20 = 1024;
          LODWORD(v21) = 295;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          uint64_t v12 = *a3;
        }
        unint64_t v13 = a3[1];
        if (HIDWORD(v13) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          __int16 v19 = "FrameDone";
          __int16 v20 = 1024;
          LODWORD(v21) = 296;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          unint64_t v13 = a3[1];
        }
        unint64_t v14 = a3[2];
        if (HIDWORD(v14) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          __int16 v19 = "FrameDone";
          __int16 v20 = 1024;
          LODWORD(v21) = 297;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          unint64_t v14 = a3[2];
        }
        unint64_t v15 = a3[3];
        if (HIDWORD(v15) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          __int16 v19 = "FrameDone";
          __int16 v20 = 1024;
          LODWORD(v21) = 298;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          unint64_t v15 = a3[3];
        }
        if (*((unsigned char *)this + 73))
        {
          if (*((unsigned char *)this + 72))
          {
            setpriority(3, 0, 4096);
          }
          else
          {
            __int16 v16 = (AVDFrameReceiver *)setpriority(3, 0, 0);
            if (*((unsigned char *)this + 74)) {
              AVDFrameReceiver::MakeCurrentThreadTimeConstraintThread(v16);
            }
          }
          *((unsigned char *)this + 73) = 0;
        }
        (*((void (**)(void, void, uint64_t, unint64_t, unint64_t, unint64_t))this + 8))(*((void *)this + 7), 0, v12, v13, v14, v15);
      }
    }
    else
    {
      uint64_t v11 = (FILE **)MEMORY[0x263EF8348];
      fprintf((FILE *)*MEMORY[0x263EF8348], "Assert - (%s) - f: %s l: %d\n", "frContext != NULL", "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp", 292);
      fwrite("AVDFrameReceiver ERROR: context == NULL.\n", 0x29uLL, 1uLL, *v11);
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        __int16 v19 = "frContext != NULL";
        __int16 v20 = 2080;
        uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp";
        __int16 v22 = 1024;
        int v23 = 292;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Assert - (%s) - f: %s l: %d\n", buf, 0x1Cu);
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v8 = &_os_log_internal;
        __int16 v9 = "AVDFrameReceiver ERROR: context == NULL.\n";
        goto LABEL_16;
      }
    }
  }
  else
  {
    int v10 = (FILE **)MEMORY[0x263EF8348];
    fprintf((FILE *)*MEMORY[0x263EF8348], "Assert - (%s) - f: %s l: %d\n", "args != NULL", "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp", 291);
    fwrite("AVDFrameReceiver ERROR: args == NULL.\n", 0x26uLL, 1uLL, *v10);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v19 = "args != NULL";
      __int16 v20 = 2080;
      uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp";
      __int16 v22 = 1024;
      int v23 = 291;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Assert - (%s) - f: %s l: %d\n", buf, 0x1Cu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v8 = &_os_log_internal;
      __int16 v9 = "AVDFrameReceiver ERROR: args == NULL.\n";
      goto LABEL_16;
    }
  }
  return kdebug_trace();
}

uint64_t AppleAVDDecodeFrameResponse(unsigned __int8 *a1, int a2, uint64_t a3, unsigned int a4, int a5, int a6)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  kdebug_trace();
  unsigned int v11 = a4 - 315;
  if (a4 - 315 <= 1)
  {
    *(_DWORD *)buf = 1;
    (*(void (**)(void, uint64_t, unsigned char *))(**(void **)(*((void *)a1 + 481) + 8) + 96))(*(void *)(*((void *)a1 + 481) + 8), 19, buf);
  }
  uint64_t v12 = *((void *)a1 + 482);
  uint64_t v13 = v12 + 3664 * a5;
  if (a1[1008] == 1 && *((_DWORD *)a1 + 57) == 2 && *((_DWORD *)a1 + 194) <= 0x13u)
  {
    (*(void (**)(void, uint64_t, unsigned char *))(**(void **)(*((void *)a1 + 481) + 8) + 88))(*(void *)(*((void *)a1 + 481) + 8), 7, buf);
    if (v11 <= 1)
    {
      bzero(*(void **)buf, *(unsigned int *)&buf[16]);
      bzero(*(void **)&buf[8], *(unsigned int *)v38);
    }
    (*(void (**)(void, uint64_t, unsigned char *))(**(void **)(*((void *)a1 + 481) + 8) + 96))(*(void *)(*((void *)a1 + 481) + 8), 27, buf);
    *(void *)(v13 + 3584) = *(void *)v38;
    *(_DWORD *)(v13 + 3592) = *(_DWORD *)&v38[8];
  }
  int v14 = *(_DWORD *)(v13 + 3432);
  if (*(unsigned char *)(v13 + 3645))
  {
    *(_DWORD *)buf = 1;
    (*(void (**)(void, uint64_t, unsigned char *))(**(void **)(*((void *)a1 + 481) + 8) + 96))(*(void *)(*((void *)a1 + 481) + 8), 38, buf);
  }
  if (v14 && v14 != 409 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AppleAVDDecodeFrameResponse";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)uint64_t v38 = v14;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Frame# %d DecodeFrame failed with error 0x%08x\n", buf, 0x18u);
  }
  int v15 = *(_DWORD *)(v13 + 3576);
  *((_DWORD *)a1 + 899) = v15;
  int v16 = *(_DWORD *)(v13 + 3616);
  int v35 = *(_DWORD *)(v13 + 3620);
  if (v15 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v15;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDDecodeFrameResponse() failed - decryptError: %d \n", buf, 8u);
  }
  *((_DWORD *)a1 + 918) = *(_DWORD *)(v13 + 3580);
  *((_DWORD *)a1 + 917) = *(_DWORD *)(v13 + 3648);
  if (*((void *)a1 + 472))
  {
    unsigned int v17 = *((_DWORD *)a1 + 194);
    if ((v17 == 28 || v17 >= 0x12F) && (a1[3772] & 8) != 0)
    {
      uint64_t v36 = 0;
      int v18 = a1[880];
      uint64_t v19 = 3452;
      if (!a1[880]) {
        uint64_t v19 = 3448;
      }
      unsigned int v20 = *(_DWORD *)(v13 + v19);
      if (v20 == -1 || (uint64_t v21 = *(void *)&a1[8 * (v18 == 0) + 200]) == 0)
      {
        BOOL v34 = a1[880] == 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "AppleAVDDecodeFrameResponse";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v20;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)uint64_t v38 = v34;
          *(_WORD *)&v38[4] = 1024;
          *(_DWORD *)&v38[6] = v18;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Invalid dispbufIndex=%u or ctx->pBufferPool[poolIndex=%u] is NULL!, ctx->noSecondWrite %d", buf, 0x1Eu);
        }
      }
      else
      {
        BufferPool::getBufferInfo(v21, v20, &v36);
      }
      if (v36 && *(_DWORD *)(v36 + 40) == a3) {
        attachHistogramToIOSurface((uint64_t)a1, a3, *(CVPixelBufferRef *)(v36 + 16));
      }
      unsigned int v11 = a4 - 315;
    }
  }
  if ((*(_DWORD *)(v13 + 3612) | 2) == 2) {
    AppleAVDDisplayCallback((uint64_t)a1, a3, *(_DWORD *)(v13 + 3448), *(_DWORD *)(v13 + 3452), *(void *)(v13 + 3584), *(CMTagCategory *)(v13 + 3592), *(void *)(v13 + 3596), *(void *)(v13 + 3604), a4, v16, v35);
  }
  unsigned int v22 = *((_DWORD *)a1 + 57);
  if (v22 >= 3)
  {
    if (v22 == 4)
    {
      if (*((void *)a1 + 2) && !a1[880] && !a1[3628]) {
        AppleAVDUnmapCVPixelBuffer((uint64_t)a1, *(unsigned int *)(v13 + 3440), 1, a3, 0);
      }
      if (v11 <= 1 && *((void *)a1 + 2))
      {
        char v23 = 0;
        if (a6 || a1[880]) {
          goto LABEL_50;
        }
        goto LABEL_38;
      }
    }
LABEL_49:
    char v23 = 0;
    goto LABEL_50;
  }
  if (!*((void *)a1 + 2) || a1[880]) {
    goto LABEL_49;
  }
LABEL_38:
  char v23 = 1;
  AppleAVDReleaseCVPixelBuffer((uint64_t)a1, *(unsigned int *)(v13 + 3440), 1, a3, 0);
LABEL_50:
  uint64_t v24 = 3664 * a5;
  if (a1[880])
  {
    BOOL v25 = v11 < 2 && a6 == 0;
    BOOL v26 = v25;
    if (*((_DWORD *)a1 + 57) != 4 || v26) {
      AppleAVDReleaseCVPixelBuffer((uint64_t)a1, *(unsigned int *)(v13 + 3444), 0, a3, 0);
    }
  }
  char v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = v24 + v12 + 4;
  char v30 = 1;
  do
  {
    char v31 = v30;
    if (!a1[880]) {
      v27 &= v23;
    }
    if (v27) {
      break;
    }
    if (*(unsigned __int8 *)(v13 + v28 + 2) - 1 <= 0x1F)
    {
      unint64_t v32 = 0;
      do
        AppleAVDReleaseCVPixelBuffer((uint64_t)a1, *(unsigned __int8 *)(v29 + 32 * v28 + v32++), v28, a3, 0);
      while (v32 < *(unsigned __int8 *)(v13 + v28 + 2));
    }
    char v30 = 0;
    char v27 = 1;
    uint64_t v28 = 1;
  }
  while ((v31 & 1) != 0);
  if (v35 || !*(_DWORD *)(v13 + 3624) || !*((void *)a1 + 2))
  {
    RingBuffer::getRingBufferInfo(*((void *)a1 + 111), (uint64_t)buf);
    RingBuffer::releaseRingBuffer(*((RingBuffer **)a1 + 111), *(int *)(v13 + 3460) + 16, (unsigned __int8 *)(*(void *)buf + *(unsigned int *)(v13 + 3456)));
  }
  if (a1[1456])
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 784));
    *((_DWORD *)a1 + 365) = a3;
    pthread_cond_signal((pthread_cond_t *)(a1 + 1408));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 784));
  }
  else
  {
    *((_DWORD *)a1 + 365) = a3;
  }
  return kdebug_trace();
}

uint64_t RingBuffer::getRingBufferInfo(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 120);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  unint64_t v6 = *(void *)(a1 + 128);
  *(void *)(a2 + 16) = v6;
  long long v7 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 24) = v7;
  uint64_t v8 = *(void *)(a1 + 152);
  int64_t v9 = v5 - v7;
  int64_t v10 = ~(void)v7 + v5;
  BOOL v11 = v6 == v4;
  if (v6 == v4) {
    int64_t v12 = 0;
  }
  else {
    int64_t v12 = v6 + ~v4;
  }
  if (!v11) {
    int64_t v10 = v9;
  }
  if (v12 <= v10) {
    unint64_t v13 = v10;
  }
  else {
    unint64_t v13 = v12;
  }
  unint64_t v14 = v10 + v12;
  unint64_t v15 = ~(void)v7 + v6;
  if (v6 <= (unint64_t)v7) {
    unint64_t v15 = v13;
  }
  else {
    unint64_t v14 = ~(void)v7 + v6;
  }
  if (v6 == (void)v7)
  {
    unint64_t v15 = v8 - 1;
    unint64_t v14 = v8 - 1;
  }
  *(void *)(a2 + 40) = v8;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v15;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return 0;
}

uint64_t AppleAVDReleaseCVPixelBuffer(uint64_t a1, uint64_t a2, int a3, unsigned int a4, char a5)
{
  int v5 = a2;
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(BufferPool **)(a1 + 8 * a3 + 200);
  if (v6)
  {
    return BufferPool::releaseBuffer(v6, a2, a4, a5);
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 67109376;
      v9[1] = a3;
      __int16 v10 = 1024;
      int v11 = v5;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: pBufferPool[%d] is NULL cvPixBufIndex:%d!", (uint8_t *)v9, 0xEu);
    }
    return 314;
  }
}

uint64_t RingBuffer::releaseRingBuffer(RingBuffer *this, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)this);
  if (*((void *)this + 14) > (unint64_t)a3)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *((unsigned __int8 *)this + 161);
      int v14 = 67109120;
      LODWORD(v15) = v6;
      long long v7 = &_os_log_internal;
      uint64_t v8 = "AppleAVD: releaseRingBuffer: ERROR: (p_buffer < p_base) : m_num_buffers_outstanding %d\n";
LABEL_7:
      _os_log_impl(&dword_223977000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v14, 8u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if ((unint64_t)&a3[a2] > *((void *)this + 15))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *((unsigned __int8 *)this + 161);
      int v14 = 67109120;
      LODWORD(v15) = v9;
      long long v7 = &_os_log_internal;
      uint64_t v8 = "AppleAVD: releaseRingBuffer: ERROR: (p_buffer + size > p_end) : m_num_buffers_outstanding %d\n";
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v10 = 4294966272;
    goto LABEL_19;
  }
  if (*((unsigned __int8 **)this + 16) != a3)
  {
    a3 = (unsigned __int8 *)*((void *)this + 16);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *((unsigned __int8 *)this + 161);
      int v14 = 67109120;
      LODWORD(v15) = v11;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: releaseRingBuffer: WARNING: (p_buffer != p_rd) : m_num_buffers_outstanding %d\n", (uint8_t *)&v14, 8u);
      a3 = (unsigned __int8 *)*((void *)this + 16);
    }
  }
  *((void *)this + 16) = &a3[a2];
  if (&a3[a2] == *((unsigned __int8 **)this + 18))
  {
    uint64_t v12 = *((void *)this + 15);
    *((void *)this + 16) = *((void *)this + 14);
    *((void *)this + 18) = v12;
  }
  if (*((unsigned char *)this + 161))
  {
    --*((unsigned char *)this + 161);
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 136315650;
    unint64_t v15 = "RINGBUFFER";
    __int16 v16 = 2080;
    unsigned int v17 = "releaseRingBuffer";
    __int16 v18 = 1024;
    int v19 = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s :%s(): m_num_buffers_outstanding:%d == 0\n", (uint8_t *)&v14, 0x1Cu);
  }
  pthread_cond_signal((pthread_cond_t *)((char *)this + 64));
  uint64_t v10 = 0;
LABEL_19:
  pthread_mutex_unlock((pthread_mutex_t *)this);
  kdebug_trace();
  return v10;
}

void AppleAVDDisplayCallback(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unint64_t a5, CMTagCategory a6, uint64_t a7, uint64_t a8, unsigned int a9, int a10, int a11)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  unsigned int v90 = -1;
  CMTaggedBufferGroupRef groupOut = 0;
  if (a3 != -1)
  {
    int v16 = a3;
    uint64_t v17 = *(void *)(a1 + 200);
    if (v17 && *(void *)(a1 + 208))
    {
      BufferPool::getBufferInfo(v17, a4, &v91);
      BufferPool::getBufferInfo(*(void *)(a1 + 208), v16, &v92);
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0].category) = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: pBufferPool[AVD_PIXBUF_DEC] && pBufferPool[AVD_PIXBUF_DISP] are NULL!", (uint8_t *)buf, 2u);
    }
LABEL_14:
    unsigned int v84 = 1;
    goto LABEL_15;
  }
  if (a4 == -1 || !*(unsigned char *)(a1 + 880) || (uint64_t v18 = *(void *)(a1 + 200)) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      CMTagDataType v19 = *(unsigned __int8 *)(a1 + 880);
      buf[0].category = 136315650;
      *(void *)&buf[0].dataType = "AppleAVDDisplayCallback";
      WORD2(buf[0].value) = 1024;
      *(_DWORD *)((char *)&buf[0].value + 6) = a4;
      HIWORD(buf[1].category) = 1024;
      buf[1].dataType = v19;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s invalid dispbufIndex, refBufIndex = %d ctx->noSecondWrite %d or ctx->pBufferPool[AVD_PIXBUF_DEC] is NULL! \n", (uint8_t *)buf, 0x18u);
    }
    int v16 = -1;
    goto LABEL_14;
  }
  BufferPool::getBufferInfo(v18, a4, &v91);
  unsigned int v84 = 0;
  uint64_t v92 = v91;
  int v16 = a4;
LABEL_15:
  CMTagDataType v78 = v16;
  if (!v92 || !v91)
  {
    uint64_t v23 = 0xFFFFFFFFLL;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      buf[0].category = 136316418;
      *(void *)&buf[0].dataType = "AppleAVDDisplayCallback";
      WORD2(buf[0].value) = 1024;
      *(_DWORD *)((char *)&buf[0].value + 6) = a2;
      HIWORD(buf[1].category) = 1024;
      buf[1].dataType = v16;
      LOWORD(buf[1].value) = 1024;
      *(_DWORD *)((char *)&buf[1].value + 2) = a4;
      HIWORD(buf[1].value) = 1024;
      LODWORD(v96) = -1;
      WORD2(v96) = 1024;
      *(_DWORD *)((char *)&v96 + 6) = -1;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): %d %d %d %d - errorStatus %d\n", (uint8_t *)buf, 0x2Au);
    }
    goto LABEL_64;
  }
  uint64_t v20 = *(__CVBuffer **)(v92 + 16);
  uint64_t v21 = *(__CVBuffer **)(v91 + 16);
  if (v20) {
    BOOL v22 = v21 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22)
  {
    uint64_t v23 = 0xFFFFFFFFLL;
    goto LABEL_64;
  }
  unint64_t v76 = a5;
  unsigned int v82 = a2;
  CVPixelBufferGetIOSurface(v20);
  if (*(_DWORD *)(a1 + 228) == 4)
  {
    extraRowsOnBottouint64_t m = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    *(_OWORD *)extraColumnsOnRight = 0u;
    CVPixelBufferGetIOSurface(v20);
    int v104 = 0;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    memset(buf, 0, sizeof(buf));
    IOSurfaceGetDataProperty();
  }
  IOSurfaceSetCompressedTileDataRegionMemoryUsedOfPlane();
  IOSurfaceSetCompressedTileDataRegionMemoryUsedOfPlane();
  a2 = a2;
  if (*(unsigned char *)(a1 + 1008) == 1 && *(_DWORD *)(a1 + 3668) == 1 && *(_DWORD *)(a1 + 228) == 2)
  {
    CVReturn v24 = CVPixelBufferLockBaseAddress(v20, 0);
    CVReturn v25 = CVPixelBufferLockBaseAddress(v21, 0);
    if (v24 | v25)
    {
      uint64_t v28 = v20;
      if (v25)
      {
LABEL_60:
        uint64_t v20 = v28;
        if (!v24) {
          CVPixelBufferUnlockBaseAddress(v28, 0);
        }
        a2 = v82;
        goto LABEL_63;
      }
    }
    else
    {
      BaseAddressOfPlane = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(v20, 1uLL);
      int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v20, 1uLL);
      if (CVPixelBufferGetBytesPerRowOfPlane(v20, 1uLL) != BytesPerRowOfPlane
        && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        buf[0].category = 136315394;
        *(void *)&buf[0].dataType = "AppleAVDDisplayCallback";
        WORD2(buf[0].value) = 1024;
        *(_DWORD *)((char *)&buf[0].value + 6) = 682;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
      }
      int value = CVPixelBufferGetBytesPerRowOfPlane(v20, 1uLL);
      if (*(_DWORD *)(a1 + 776) < 0x14u)
      {
        uint64_t v28 = v20;
        theDict = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(v21, 1uLL);
        int v40 = CVPixelBufferGetBytesPerRowOfPlane(v21, 1uLL);
        if (CVPixelBufferGetBytesPerRowOfPlane(v21, 1uLL) != v40
          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].category = 136315394;
          *(void *)&buf[0].dataType = "AppleAVDDisplayCallback";
          WORD2(buf[0].value) = 1024;
          *(_DWORD *)((char *)&buf[0].value + 6) = 696;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        int v41 = CVPixelBufferGetBytesPerRowOfPlane(v21, 1uLL);
        *(void *)int v94 = 0;
        extraColumnsOnRight[0] = 0;
        *(void *)int valuePtr = 0;
        extraRowsOnBottouint64_t m = 0;
        CVPixelBufferGetExtendedPixels(v21, (size_t *)v94, extraColumnsOnRight, (size_t *)valuePtr, &extraRowsOnBottom);
        size_t Height = CVPixelBufferGetHeight(v21);
        uint64_t v43 = (Height >> 1) + extraRowsOnBottom;
        size_t v44 = CVPixelBufferGetHeight(v21);
        if (v43 != extraRowsOnBottom + (v44 >> 1) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].category = 136315394;
          *(void *)&buf[0].dataType = "AppleAVDDisplayCallback";
          WORD2(buf[0].value) = 1024;
          *(_DWORD *)((char *)&buf[0].value + 6) = 699;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        size_t v45 = CVPixelBufferGetHeight(v21);
        LODWORD(v38) = ((v45 >> 1) + extraRowsOnBottom) * v41;
        uint64_t v39 = (unsigned __int8 *)malloc_type_malloc(v38, 0xF729B4F7uLL);
        memset(buf, 0, sizeof(buf));
        long long v96 = 0u;
      }
      else
      {
        unsigned int v74 = BaseAddressOfPlane;
        uint64_t v28 = v20;
        CVPixelBufferGetIOSurface(v21);
        theDict = (unsigned __int8 *)IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
        int CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
        uint64_t v30 = IOSurfaceGetWidthInCompressedTilesOfPlane() * CompressedTileWidthOfPlane;
        uint64_t v31 = IOSurfaceGetCompressedTileWidthOfPlane();
        if (v30 != IOSurfaceGetWidthInCompressedTilesOfPlane() * v31
          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].category = 136315394;
          *(void *)&buf[0].dataType = "AppleAVDDisplayCallback";
          WORD2(buf[0].value) = 1024;
          *(_DWORD *)((char *)&buf[0].value + 6) = 688;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        int v32 = IOSurfaceGetCompressedTileWidthOfPlane();
        int v33 = IOSurfaceGetWidthInCompressedTilesOfPlane() * v32;
        int CompressedTileHeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
        uint64_t v35 = IOSurfaceGetHeightInCompressedTilesOfPlane() * CompressedTileHeightOfPlane;
        uint64_t v36 = IOSurfaceGetCompressedTileHeightOfPlane();
        if (v35 != IOSurfaceGetHeightInCompressedTilesOfPlane() * v36
          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].category = 136315394;
          *(void *)&buf[0].dataType = "AppleAVDDisplayCallback";
          WORD2(buf[0].value) = 1024;
          *(_DWORD *)((char *)&buf[0].value + 6) = 689;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
        }
        int v37 = IOSurfaceGetCompressedTileHeightOfPlane();
        size_t v38 = IOSurfaceGetHeightInCompressedTilesOfPlane() * v37 * v33;
        uint64_t v39 = (unsigned __int8 *)malloc_type_malloc(v38, 0xC53690F1uLL);
        BaseAddressOfPlane = v74;
      }
      if (v39)
      {
        if (*(_DWORD *)(a1 + 776) < 0x14u)
        {
          uint64_t v47 = *(void *)(a1 + 3688);
          HIDWORD(v96) = v76;
          *(void *)&long long v96 = v47;
          *(void *)&buf[1].category = HIDWORD(v76);
          buf[0].category = a6;
          buf[0].dataType = kCMTagDataType_Invalid;
          int v46 = RVRAInLoopChromaFilter((uint64_t)BaseAddressOfPlane, (uint64_t)theDict, *(_DWORD *)(a1 + 3604), *(_DWORD *)(a1 + 3608), value, *(_DWORD *)(a1 + 3672), buf, (uint64_t)v39, v38);
        }
        else
        {
          int v46 = InLoopChromaFilterInterchangeFormat(BaseAddressOfPlane, theDict, *(_DWORD *)(a1 + 3604), *(_DWORD *)(a1 + 3608), value, *(_DWORD *)(a1 + 3672), v39);
        }
        if (v46 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v94 = 136315138;
          *(void *)&v94[4] = "AppleAVDDisplayCallback";
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): RVRAInLoopChromaFilter() failed! \n", v94, 0xCu);
        }
        free(v39);
      }
    }
    CVPixelBufferUnlockBaseAddress(v21, 0);
    goto LABEL_60;
  }
LABEL_63:
  uint64_t v23 = a9;
  if (!a9)
  {
    CMTagDataType v48 = kCMTagDataType_Invalid;
    goto LABEL_72;
  }
LABEL_64:
  if ((v23 - 409) >= 2) {
    CMTagDataType v48 = -12909;
  }
  else {
    CMTagDataType v48 = -17694;
  }
  if (a9 == 409) {
    goto LABEL_71;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    buf[0].category = 136315906;
    *(void *)&buf[0].dataType = "AppleAVDDisplayCallback";
    WORD2(buf[0].value) = 1024;
    *(_DWORD *)((char *)&buf[0].value + 6) = a2;
    HIWORD(buf[1].category) = 1024;
    buf[1].dataType = v48;
    LOWORD(buf[1].value) = 1024;
    *(_DWORD *)((char *)&buf[1].value + 2) = v23;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Asking fig to drop frame # %d with err %d - internalStatus: %d\n", (uint8_t *)buf, 0x1Eu);
  }
  if (*(_DWORD *)(a1 + 3600))
  {
LABEL_71:
    uint64_t v20 = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      buf[0].category = 136315394;
      *(void *)&buf[0].dataType = "AppleAVDDisplayCallback";
      WORD2(buf[0].value) = 1024;
      *(_DWORD *)((char *)&buf[0].value + 6) = v23;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s sending error %d to test app main\n", (uint8_t *)buf, 0x12u);
    }
    uint64_t v20 = 0;
    *(_DWORD *)(a1 + 3600) = v23;
  }
LABEL_72:
  valuea = v20;
  CMTagDataType v77 = v48;
  if (!*(void *)(a1 + 3800))
  {
    uint64_t v64 = 0;
    int v61 = 0;
    goto LABEL_115;
  }
  unsigned int v83 = a2;
  *(void *)int v94 = 0;
  extraColumnsOnRight[0] = 0;
  *(_DWORD *)int valuePtr = a10;
  CFAllocatorRef v49 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v50 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, valuePtr);
  unsigned int v79 = v23;
  if (v50
    && (CFArrayRef v51 = *(const __CFArray **)(a1 + 3800),
        v106.length = CFArrayGetCount(v51),
        v106.locatiouint64_t n = 0,
        CFArrayContainsValue(v51, v106, v50)))
  {
    unsigned int v52 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    Mutable = CFArrayCreateMutable(v49, 0, MEMORY[0x263EFFF70]);
    CFMutableArrayRef v54 = CFArrayCreateMutable(v49, 0, v52);
    uint64_t v55 = v54;
    int v56 = -12904;
    if (Mutable && v54)
    {
      *(void *)&buf[0].category = 0;
      buf[0].int value = 0;
      buf[0] = CMTagMakeWithSInt64Value(kCMTagCategory_VideoLayerID, *(int *)valuePtr);
      OSStatus v57 = CMTagCollectionCreate(v49, buf, 1, (CMTagCollectionRef *)v94);
      int v58 = -12904;
      if (!v57)
      {
        if (valuea)
        {
          CFArrayAppendValue(Mutable, *(const void **)v94);
          CFArrayAppendValue(v55, valuea);
          int v58 = MEMORY[0x223CBA780](v49, Mutable, v55, extraColumnsOnRight);
          if (!v58)
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3816), (const void *)extraColumnsOnRight[0]);
            int v58 = 0;
          }
        }
      }
      int v56 = v58 | v57;
    }
    buf[0].category = v56 | v48;
    CFNumberRef v59 = CFNumberCreate(v49, kCFNumberIntType, buf);
    if (v59) {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3808), v59);
    }
    if (a11)
    {
LABEL_85:
      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3808)) < 1)
      {
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3808));
      }
      else
      {
        CFIndex v60 = 0;
        int v61 = 0;
        do
        {
          buf[0].category = kCMTagCategory_Undefined;
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3808), v60);
          CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, buf);
          v61 |= buf[0].category;
          ++v60;
        }
        while (v60 < CFArrayGetCount(*(CFArrayRef *)(a1 + 3808)));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3808));
        if (v61)
        {
          OSStatus v63 = 0;
LABEL_98:
          CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3816));
          if (Count >= 1)
          {
            CFIndex v66 = Count;
            for (CFIndex i = 0; i != v66; ++i)
            {
              uint64_t v68 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3816), i);
              if (v68) {
                CFRelease(v68);
              }
            }
          }
          CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3816));
          if (v61 | v63) {
            uint64_t v64 = 4294954387;
          }
          else {
            uint64_t v64 = 0;
          }
          goto LABEL_106;
        }
      }
      OSStatus v63 = CMTaggedBufferGroupCreateCombined(v49, *(CFArrayRef *)(a1 + 3816), &groupOut);
      int v61 = 0;
      goto LABEL_98;
    }
  }
  else
  {
    Mutable = 0;
    uint64_t v55 = 0;
    if (a11) {
      goto LABEL_85;
    }
  }
  uint64_t v64 = 0;
  int v61 = 0;
LABEL_106:
  if (*(void *)v94)
  {
    CFRelease(*(CFTypeRef *)v94);
    *(void *)int v94 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v55) {
    CFRelease(v55);
  }
  uint64_t v23 = v79;
  if (v50) {
    CFRelease(v50);
  }
  a2 = v83;
LABEL_115:
  char v69 = *(void (**)(uint64_t, uint64_t, CMTaggedBufferGroupRef, uint64_t, uint64_t))(a1 + 16);
  if (v69)
  {
    if (*(void *)(a1 + 3800))
    {
      if (a11)
      {
        if (v61 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].category = 136316162;
          *(void *)&buf[0].dataType = "AppleAVDDisplayCallback";
          WORD2(buf[0].value) = 1024;
          *(_DWORD *)((char *)&buf[0].value + 6) = a2;
          HIWORD(buf[1].category) = 1024;
          buf[1].dataType = v78;
          LOWORD(buf[1].value) = 1024;
          *(_DWORD *)((char *)&buf[1].value + 2) = v23;
          HIWORD(buf[1].value) = 1024;
          LODWORD(v96) = v64;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): frameNum %d dispIndx %d errorStatus %d multiImageDecodeErr %d - multi-image emit displayCallBack callback\n", (uint8_t *)buf, 0x24u);
          char v69 = *(void (**)(uint64_t, uint64_t, CMTaggedBufferGroupRef, uint64_t, uint64_t))(a1 + 16);
        }
        uint64_t v70 = *(void *)(a1 + 24);
        CMTaggedBufferGroupRef v71 = groupOut;
        uint64_t v72 = a2;
        uint64_t v73 = v64;
        goto LABEL_124;
      }
    }
    else if (!a10)
    {
      uint64_t v70 = *(void *)(a1 + 24);
      uint64_t v72 = a2;
      CMTaggedBufferGroupRef v71 = valuea;
      uint64_t v73 = v77;
LABEL_124:
      v69(v70, v72, v71, v73, v23);
    }
  }
  if (*(_DWORD *)(a1 + 228) == 4 && v90 != -1)
  {
    if (*(void *)(a1 + 8 * v84 + 200)) {
      AppleAVDReleaseCVPixelBuffer(a1, v90, v84, a2, 1);
    }
  }
}

uint64_t DisplayCallBack(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2;
  kdebug_trace();
  if (*(_DWORD *)(a1 + 16))
  {
    MEMORY[0x223CBAC70](*(void *)(a1 + 8), *(void *)(a1 + 8 * v7 + 2112), a4, 0, a3);
  }
  else
  {
    kdebug_trace();
    VTDecoderSessionEmitDecodedFrame();
  }

  return kdebug_trace();
}

uint64_t DisplayCallBack_0(uint64_t a1, unsigned __int8 a2, const void *a3, uint64_t a4, int a5)
{
  unsigned int v9 = a2;
  kdebug_trace();
  if (*(_DWORD *)(a1 + 16))
  {
    MEMORY[0x223CBAC70](*(void *)(a1 + 8), *(void *)(a1 + 8 * v9 + 2112), a4, 0, a3);
  }
  else
  {
    if (a5 == 409) {
      *(_DWORD *)(a1 + 4 * v9 + 4160) = 10;
    }
    uint64_t v11 = *(void *)(a1 + 16808);
    kdebug_trace();
    if (v11)
    {
      VTDecoderSessionEmitDecodedMultiImageFrame();
      if (a3) {
        CFRelease(a3);
      }
    }
    else
    {
      VTDecoderSessionEmitDecodedFrame();
    }
  }

  return kdebug_trace();
}

uint64_t DisplayCallBack_1(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2;
  kdebug_trace();
  if (*(_DWORD *)(a1 + 16))
  {
    MEMORY[0x223CBAC70](*(void *)(a1 + 8), *(void *)(a1 + 8 * v7 + 2112), a4, 0, a3);
  }
  else
  {
    kdebug_trace();
    VTDecoderSessionEmitDecodedFrame();
  }

  return kdebug_trace();
}

uint64_t DisplayCallBack_2()
{
  kdebug_trace();
  kdebug_trace();
  VTDecoderSessionEmitDecodedFrame();

  return kdebug_trace();
}

uint64_t attachHistogramToIOSurface(uint64_t a1, int a2, CVPixelBufferRef pixelBuffer)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t valuePtr = a1;
  int v21 = a2;
  if (!pixelBuffer) {
    return 0xFFFFFFFFLL;
  }
  char v3 = a2;
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  int v6 = (const UInt8 *)(*(void *)(a1 + 3776) + ((v3 & 0xF) << 9));
  if (*(void *)(a1 + 3784))
  {
    unint64_t v7 = 0;
    do
    {
      snprintf(__str, 0xAuLL, "%08x\n", *(_DWORD *)&v6[v7]);
      size_t v8 = strlen(__str);
      fwrite(__str, 1uLL, v8, *(FILE **)(a1 + 3784));
      BOOL v9 = v7 >= 0x1FC;
      v7 += 4;
    }
    while (!v9);
  }
  *(_OWORD *)keys = xmmword_2646CEAB0;
  int v33 = @"kIOSurfaceSessionFrameNumber";
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, &valuePtr);
  CFNumberRef v12 = CFNumberCreate(v10, kCFNumberSInt32Type, &v21);
  CFDataRef v13 = CFDataCreate(v10, v6, 512);
  values[0] = v11;
  values[1] = v13;
  values[2] = v12;
  if (v13) {
    BOOL v14 = v11 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14 && v12 != 0)
  {
    CFDictionaryRef v19 = CFDictionaryCreate(v10, (const void **)keys, (const void **)values, 3, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v19)
    {
      CFDictionaryRef v20 = v19;
      IOSurfaceSetValue(IOSurface, @"kIOSurfacePixelMetadata", v19);
      CFRelease(v20);
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__str = 136315138;
      CVReturn v24 = "attachHistogramToIOSurface";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): WARNING! Failed to create CFDictionary!", (uint8_t *)__str, 0xCu);
    }
    goto LABEL_29;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__str = 136315906;
    CVReturn v24 = "attachHistogramToIOSurface";
    __int16 v25 = 2048;
    CFNumberRef v26 = v11;
    __int16 v27 = 2048;
    CFDataRef v28 = v13;
    __int16 v29 = 2048;
    CFNumberRef v30 = v12;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): WARNING! Failed to create CFType! sessionIdentifier: %p - hist: %p - sessionFrameNumberRef: %p", (uint8_t *)__str, 0x2Au);
  }
  if (v13)
  {
LABEL_29:
    CFRelease(v13);
    if (!v11) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v11) {
LABEL_18:
  }
    CFRelease(v11);
LABEL_19:
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v16 = valuePtr;
  uint64_t v17 = *(void *)(valuePtr + 3936);
  if (v17)
  {
    *(void *)uint64_t v17 = 0x6161766468737431;
    *(void *)(v17 + 8) = v16;
    *(_DWORD *)(v17 + 16) = v21;
    *(void *)(v17 + 20) = 0x2000000080;
    *(_DWORD *)(v17 + 28) = *(unsigned __int8 *)(v16 + 993);
    memcpy((void *)(v17 + 32), v6, 0x200uLL);
    IOSurfaceSetDataProperty();
  }
  return 0;
}

uint64_t AppleAVDWrapperHEVCDecoderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7A8]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E708]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E6F8])) {
      goto LABEL_7;
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E730]))
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E770]))
      {
        CFNumberRef v11 = *(const void **)(DerivedStorage + 16808);
        goto LABEL_8;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7B0]))
      {
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E778]))
        {
          if (*(unsigned char *)(DerivedStorage + 16832))
          {
            uint64_t result = 0;
            CFNumberRef v12 = (void *)*MEMORY[0x263EFFB40];
            goto LABEL_10;
          }
        }
        else
        {
          if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7C0])) {
            return 4294954396;
          }
          if (*(unsigned char *)(DerivedStorage + 16840))
          {
            uint64_t v8 = 16844;
            goto LABEL_3;
          }
        }
        uint64_t result = 0;
        *a4 = 0;
        return result;
      }
LABEL_7:
      CFNumberRef v11 = (const void *)*MEMORY[0x263EFFB40];
LABEL_8:
      CFAllocatorRef v10 = (void *)CFRetain(v11);
      goto LABEL_9;
    }
    int v17 = 0;
    uint64_t v14 = *(void *)(DerivedStorage + 5184);
    if (v14)
    {
      if (!AppleAVDGetParameter(v14, 69, (uint64_t)&v17))
      {
        BOOL v9 = &v17;
        goto LABEL_4;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        CFDictionaryRef v19 = "AppleAVDWrapperHEVCDecoderCopyProperty";
        unint64_t v15 = &_os_log_internal;
        uint64_t v16 = "AppleAVD: ERROR: %s() - AppleAVDGetParameter call for kAppleAVDGetFrameReceiverThreadPriority returned ERROR\n";
LABEL_21:
        _os_log_impl(&dword_223977000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      CFDictionaryRef v19 = "AppleAVDWrapperHEVCDecoderCopyProperty";
      unint64_t v15 = &_os_log_internal;
      uint64_t v16 = "AppleAVD: WARNING: %s() - trying to get FrameReceiverThreadPriority before videoContext was created!\n";
      goto LABEL_21;
    }
    return 4294954385;
  }
  uint64_t v8 = 5816;
LABEL_3:
  BOOL v9 = (int *)(DerivedStorage + v8);
LABEL_4:
  CFAllocatorRef v10 = CFNumberCreate(a3, kCFNumberSInt32Type, v9);
LABEL_9:
  CFNumberRef v12 = v10;
  uint64_t result = 0;
LABEL_10:
  *a4 = v12;
  return result;
}

void parseHevcSps()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_223996D64(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v1, 0x1091C40CC5F6689);
  _Unwind_Resume(a1);
}

void HEVCReleasePPS(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 != -1 && *(unsigned char *)(a1 + 6465))
  {
    if (*(unsigned char *)(a1 + 6467))
    {
      free(*(void **)(a1 + 6560));
      *(void *)(a1 + 6560) = 0;
      free(*(void **)(a1 + 6568));
      *(void *)(a1 + 6568) = 0;
      free(*(void **)(a1 + 7600));
      *(void *)(a1 + 7600) = 0;
      free(*(void **)(a1 + 8632));
      *(void *)(a1 + 8632) = 0;
    }
  }
}

void HEVCReleaseSPS(uint64_t a1)
{
  if (a1 && *(_DWORD *)(a1 + 3588) != -1 && *(unsigned char *)(a1 + 22286) && *(unsigned char *)(a1 + 22360) && *(unsigned char *)(a1 + 22380))
  {
    unsigned int v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(a1 + 22792);
      if (v3 && *(unsigned char *)(a1 + 22385)) {
        HEVCReleaseSubLayerHRD((void **)(v3 + 48 * v2), *(unsigned __int8 *)(a1 + 22386));
      }
      uint64_t v4 = *(void *)(a1 + 22784);
      if (v4)
      {
        if (*(unsigned char *)(a1 + 22384)) {
          HEVCReleaseSubLayerHRD((void **)(v4 + 48 * v2), *(unsigned __int8 *)(a1 + 22386));
        }
      }
      ++v2;
    }
    while (v2 <= *(_DWORD *)(a1 + 4));
    free(*(void **)(a1 + 22784));
    *(void *)(a1 + 22784) = 0;
    free(*(void **)(a1 + 22792));
    *(void *)(a1 + 22792) = 0;
  }
}

void HEVC_RBSP::HEVC_RBSP(HEVC_RBSP *this)
{
  *(void *)this = &unk_26D740220;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 40) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 15) = 0;
  *((_WORD *)this + 72) = -1;
  HEVC_RBSP::initScanOrder((unsigned int **)this);
}

void HEVC_RBSP::initScanOrder(unsigned int **this)
{
  uint64_t v2 = 0;
  uint64_t v3 = this;
  do
  {
    for (uint64_t i = 1; i != 4; ++i)
    {
      int v5 = (HEVC_RBSP *)malloc_type_calloc(4uLL, (4 << v2 << (v2 + 2)), 0x46BB4D8uLL);
      v3[i] = (unsigned int *)v5;
    }
    HEVC_RBSP::calcScanOrder(v5, 4 << v2, this[3 * v2 + 1], this[3 * v2 + 2], this[3 * v2 + 3]);
    ++v2;
    v3 += 3;
  }
  while (v2 != 4);
}

void HEVC_RBSP::calcScanOrder(HEVC_RBSP *this, unsigned int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5 = 0;
  unsigned int v6 = 0;
  do
  {
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v8 = 0;
    }
    else
    {
      unsigned int v7 = 0;
      unsigned int v8 = v6 + 1;
      int v9 = a2 * v6;
      do
      {
        if (v6 < a2 && v7 < a2) {
          a3[v5++] = v9;
        }
        --v6;
        ++v7;
        v9 += 1 - a2;
      }
      while (v6 != -1);
    }
    unsigned int v6 = v8;
  }
  while (v5 < a2 * a2);
  if (a2)
  {
    int v10 = 0;
    int v11 = 0;
    for (int i = 0; i != a2; ++i)
    {
      for (int j = 0; j != a2; ++j)
        a4[v11 + j] = v10 + j;
      v11 += j;
      v10 += a2;
    }
    int v14 = 0;
    for (unsigned int k = 0; k != a2; ++k)
    {
      int v16 = 0;
      unsigned int v17 = k;
      do
      {
        a5[v14 + v16++] = v17;
        v17 += a2;
      }
      while (a2 != v16);
      v14 += v16;
    }
  }
}

uint64_t HEVC_RBSP::parseVPS(int8x8_t *a1, _DWORD *a2, int a3, int a4)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  int v8 = a2[1095];
  int8x8_t v9 = a1[13];
  a1[20].i32[1] += 4;
  HEVC_RBSP::flush_bits((uint64_t)a1, 4);
  uint64_t v10 = (uint64_t)a1[13];
  ++a1[20].i32[1];
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  uint64_t v11 = (uint64_t)a1[13];
  ++a1[20].i32[1];
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  int8x8_t v12 = a1[13];
  a1[20].i32[1] += 6;
  uint64_t v13 = *(void *)&v12 >> 58;
  HEVC_RBSP::flush_bits((uint64_t)a1, 6);
  if (a4)
  {
    unsigned int v14 = a2[3];
    if (v14 != v13)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136315650;
      int v104 = "parseVPS";
      __int16 v105 = 1024;
      int v106 = v13;
      __int16 v107 = 1024;
      unsigned int v108 = v14;
      int v61 = &_os_log_internal;
      int v62 = "AppleAVD: %s: ERROR: layers do not match! %d, %d\n";
      goto LABEL_66;
    }
  }
  long long v102 = (BOOL *)(a2 + 1098);
  HEVCReleaseVPS((uint64_t)a2);
  bzero(a2, 0x1168uLL);
  *a2 = *(void *)&v9 >> 60;
  *((unsigned char *)a2 + 8) = v10 < 0;
  *((unsigned char *)a2 + 9) = v11 < 0;
  a2[3] = v13;
  int8x8_t v15 = a1[13];
  a1[20].i32[1] += 3;
  uint64_t v16 = *(void *)&v15 >> 61;
  HEVC_RBSP::flush_bits((uint64_t)a1, 3);
  a2[4] = v16;
  int8x8_t v17 = a1[13];
  ++a1[20].i32[1];
  uint64_t v18 = *(void *)&v17 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  *((unsigned char *)a2 + 20) = v18;
  LODWORD(v18) = a1[13].u16[3];
  a1[20].i32[1] += 16;
  HEVC_RBSP::flush_bits((uint64_t)a1, 16);
  a2[6] = v18;
  HEVC_RBSP::parseProfileTierLevel((HEVC_RBSP *)a1, (uint64_t)(a2 + 7), 1, a2[4]);
  uint64_t v19 = (uint64_t)a1[13];
  ++a1[20].i32[1];
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  *((unsigned char *)a2 + 3604) = v19 < 0;
  if (v19 < 0) {
    unsigned int v20 = 0;
  }
  else {
    unsigned int v20 = a2[4];
  }
  do
  {
    int8x8_t v21 = a1[13];
    if ((*(void *)&v21 & 0x8000000000000000) != 0)
    {
      ++a1[20].i32[1];
      HEVC_RBSP::flush_bits((uint64_t)a1, 1);
      unsigned __int32 v28 = 0;
    }
    else
    {
      uint64_t v22 = HIDWORD(*(void *)&v21);
      int v23 = -32;
      do
      {
        LODWORD(v22) = 2 * v22;
        int v24 = v23 + 1;
        if ((v22 & 0x80000000) != 0) {
          break;
        }
        unsigned int v25 = v23 + 32;
        ++v23;
      }
      while (v25 < 0x1E);
      a1[20].i32[1] += v24 + 33;
      HEVC_RBSP::flush_bits((uint64_t)a1, v24 + 33);
      unsigned __int32 v26 = a1[13].u32[1];
      a1[20].i32[1] += v24 + 32;
      unsigned __int32 v27 = v26 >> -(char)v24;
      HEVC_RBSP::flush_bits((uint64_t)a1, v24 + 32);
      unsigned __int32 v28 = v27 + ~(-2 << (v24 + 31));
    }
    a2[v20 + 902] = v28;
    int8x8_t v29 = a1[13];
    if ((*(void *)&v29 & 0x8000000000000000) != 0)
    {
      ++a1[20].i32[1];
      HEVC_RBSP::flush_bits((uint64_t)a1, 1);
      unsigned __int32 v36 = 0;
    }
    else
    {
      uint64_t v30 = HIDWORD(*(void *)&v29);
      int v31 = -32;
      do
      {
        LODWORD(v30) = 2 * v30;
        int v32 = v31 + 1;
        if ((v30 & 0x80000000) != 0) {
          break;
        }
        unsigned int v33 = v31 + 32;
        ++v31;
      }
      while (v33 < 0x1E);
      a1[20].i32[1] += v32 + 33;
      HEVC_RBSP::flush_bits((uint64_t)a1, v32 + 33);
      unsigned __int32 v34 = a1[13].u32[1];
      a1[20].i32[1] += v32 + 32;
      unsigned __int32 v35 = v34 >> -(char)v32;
      HEVC_RBSP::flush_bits((uint64_t)a1, v32 + 32);
      unsigned __int32 v36 = v35 + ~(-2 << (v32 + 31));
    }
    a2[v20 + 966] = v36;
    int8x8_t v37 = a1[13];
    if ((*(void *)&v37 & 0x8000000000000000) != 0)
    {
      ++a1[20].i32[1];
      HEVC_RBSP::flush_bits((uint64_t)a1, 1);
      unsigned __int32 v44 = 0;
    }
    else
    {
      uint64_t v38 = HIDWORD(*(void *)&v37);
      int v39 = -32;
      do
      {
        LODWORD(v38) = 2 * v38;
        int v40 = v39 + 1;
        if ((v38 & 0x80000000) != 0) {
          break;
        }
        unsigned int v41 = v39 + 32;
        ++v39;
      }
      while (v41 < 0x1E);
      a1[20].i32[1] += v40 + 33;
      HEVC_RBSP::flush_bits((uint64_t)a1, v40 + 33);
      unsigned __int32 v42 = a1[13].u32[1];
      a1[20].i32[1] += v40 + 32;
      unsigned __int32 v43 = v42 >> -(char)v40;
      HEVC_RBSP::flush_bits((uint64_t)a1, v40 + 32);
      unsigned __int32 v44 = v43 + ~(-2 << (v40 + 31));
    }
    a2[v20++ + 1030] = v44;
    uint64_t v45 = a2[4];
  }
  while (v20 <= v45);
  if (!*((unsigned char *)a2 + 3604) && v45)
  {
    int v46 = a2 + 902;
    uint64_t v47 = &a2[v45 + 902];
    CMTagDataType v48 = &a2[v45];
    CFAllocatorRef v49 = v48 + 966;
    CFNumberRef v50 = v48 + 1030;
    do
    {
      *int v46 = *v47;
      v46[64] = *v49;
      v46[128] = *v50;
      ++v46;
      --v45;
    }
    while (v45);
  }
  int8x8_t v51 = a1[13];
  a1[20].i32[1] += 6;
  uint64_t v52 = *(void *)&v51 >> 58;
  HEVC_RBSP::flush_bits((uint64_t)a1, 6);
  a2[1094] = v52;
  int8x8_t v53 = a1[13];
  if ((*(void *)&v53 & 0x8000000000000000) == 0)
  {
    uint64_t v54 = HIDWORD(*(void *)&v53);
    int v55 = -32;
    do
    {
      LODWORD(v54) = 2 * v54;
      int v56 = v55 + 1;
      if ((v54 & 0x80000000) != 0) {
        break;
      }
      unsigned int v57 = v55 + 32;
      ++v55;
    }
    while (v57 < 0x1E);
    a1[20].i32[1] += v56 + 33;
    HEVC_RBSP::flush_bits((uint64_t)a1, v56 + 33);
    unsigned __int32 v58 = a1[13].u32[1];
    a1[20].i32[1] += v56 + 32;
    unsigned __int32 v59 = v58 >> -(char)v56;
    HEVC_RBSP::flush_bits((uint64_t)a1, v56 + 32);
    unsigned int v60 = v59 + ~(-2 << (v56 + 31));
    a2[1095] = v60;
    if (!a4 || v8 == v60)
    {
      if (v60 > 0x3FF) {
        goto LABEL_67;
      }
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  ++a1[20].i32[1];
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  unsigned int v60 = 0;
  a2[1095] = 0;
  if (a4 && v8)
  {
LABEL_39:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_67;
    }
    *(_DWORD *)buf = 136315650;
    int v104 = "parseVPS";
    __int16 v105 = 1024;
    int v106 = v8;
    __int16 v107 = 1024;
    unsigned int v108 = v60;
    int v61 = &_os_log_internal;
    int v62 = "AppleAVD: %s: ERROR: layer sets do not match! %d, %d\n";
LABEL_66:
    _os_log_impl(&dword_223977000, v61, OS_LOG_TYPE_DEFAULT, v62, buf, 0x18u);
    goto LABEL_67;
  }
LABEL_41:
  OSStatus v63 = malloc_type_calloc(8uLL, v60 + 1, 0x83EAAD33uLL);
  *((void *)a2 + 548) = v63;
  if (v63)
  {
    uint64_t v64 = 0;
    int v65 = a2[1095];
    if ((v65 + 1) > 1) {
      unsigned int v66 = v65 + 1;
    }
    else {
      unsigned int v66 = 1;
    }
    uint64_t v67 = 8 * v66;
    do
    {
      *(void *)(*((void *)a2 + 548) + v64) = 0;
      v64 += 8;
    }
    while (v67 != v64);
    unsigned int v68 = 0;
    do
    {
      *(void *)(*((void *)a2 + 548) + 8 * v68) = malloc_type_malloc((a2[1094] + 1), 0x100004077774924uLL);
      char v69 = *(void **)(*((void *)a2 + 548) + 8 * v68);
      if (!v69) {
        goto LABEL_67;
      }
      bzero(v69, a2[1094] + 1);
      ++v68;
      unsigned int v70 = a2[1095];
    }
    while (v68 <= v70);
    if (v70)
    {
      unsigned int v71 = 1;
      do
      {
        unsigned int v72 = 0;
        uint64_t v73 = v71;
        do
        {
          int8x8_t v74 = a1[13];
          ++a1[20].i32[1];
          uint64_t v75 = *(void *)&v74 >> 63;
          HEVC_RBSP::flush_bits((uint64_t)a1, 1);
          *(unsigned char *)(*(void *)(*((void *)a2 + 548) + 8 * v73) + v72++) = v75;
        }
        while (v72 <= a2[1094]);
        unsigned int v71 = v73 + 1;
      }
      while ((v73 + 1) <= a2[1095]);
    }
    uint64_t v76 = (uint64_t)a1[13];
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    CMTagDataType v77 = a2 + 1098;
    *long long v102 = v76 < 0;
    if (v76 < 0)
    {
      __int32 v82 = a1[13].i32[1];
      a1[20].i32[1] += 32;
      HEVC_RBSP::flush_bits((uint64_t)a1, 32);
      a2[1099] = v82;
      __int32 v83 = a1[13].i32[1];
      a1[20].i32[1] += 32;
      HEVC_RBSP::flush_bits((uint64_t)a1, 32);
      a2[1100] = v83;
      uint64_t v84 = (uint64_t)a1[13];
      ++a1[20].i32[1];
      HEVC_RBSP::flush_bits((uint64_t)a1, 1);
      *((unsigned char *)a2 + 4404) = v84 < 0;
      if (v84 < 0) {
        a2[1102] = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
      }
      unsigned int v85 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
      a2[1103] = v85;
      if (v85 > 0x400) {
        goto LABEL_67;
      }
      long long v86 = malloc_type_malloc(2 * v85, 0x1000040BDFB0063uLL);
      *((void *)a2 + 552) = v86;
      if (!v86) {
        goto LABEL_67;
      }
      long long v87 = malloc_type_malloc(a2[1103], 0x100004077774924uLL);
      *((void *)a2 + 553) = v87;
      if (!v87) {
        goto LABEL_67;
      }
      int v88 = malloc_type_calloc(0x1A8uLL, a2[1103], 0x56094AD2uLL);
      *((void *)a2 + 554) = v88;
      if (!v88) {
        goto LABEL_67;
      }
      CMTagDataType v77 = a2 + 1098;
      if (a2[1103])
      {
        **((unsigned char **)a2 + 553) = 1;
        if (a2[1103])
        {
          unint64_t v89 = 0;
          do
          {
            int8x8_t v90 = a1[13];
            if ((*(void *)&v90 & 0x8000000000000000) != 0)
            {
              ++a1[20].i32[1];
              HEVC_RBSP::flush_bits((uint64_t)a1, 1);
              LOWORD(v97) = 0;
            }
            else
            {
              uint64_t v91 = HIDWORD(*(void *)&v90);
              int v92 = -32;
              do
              {
                LODWORD(v91) = 2 * v91;
                int v93 = v92 + 1;
                if ((v91 & 0x80000000) != 0) {
                  break;
                }
                unsigned int v94 = v92 + 32;
                ++v92;
              }
              while (v94 < 0x1E);
              a1[20].i32[1] += v93 + 33;
              HEVC_RBSP::flush_bits((uint64_t)a1, v93 + 33);
              unsigned __int32 v95 = a1[13].u32[1];
              a1[20].i32[1] += v93 + 32;
              unsigned __int32 v96 = v95 >> -(char)v93;
              HEVC_RBSP::flush_bits((uint64_t)a1, v93 + 32);
              unsigned __int32 v97 = v96 + ~(-2 << (v93 + 31));
            }
            *(_WORD *)(*((void *)a2 + 552) + 2 * v89) = v97;
            if (v89)
            {
              int8x8_t v98 = a1[13];
              ++a1[20].i32[1];
              uint64_t v99 = *(void *)&v98 >> 63;
              HEVC_RBSP::flush_bits((uint64_t)a1, 1);
              *(unsigned char *)(*((void *)a2 + 553) + v89) = v99;
            }
            if ((HEVC_RBSP::parseHRD((HEVC_RBSP *)a1, *((void *)a2 + 554) + 424 * v89, *(unsigned __int8 *)(*((void *)a2 + 553) + v89), a2[4]) & 1) == 0)goto LABEL_67; {
            ++v89;
            }
            CMTagDataType v77 = a2 + 1098;
          }
          while (v89 < a2[1103]);
        }
      }
    }
    uint64_t v78 = (uint64_t)a1[13];
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    *((unsigned char *)v77 + 48) = v78 < 0;
    if (a3)
    {
      if ((v78 & 0x8000000000000000) == 0 && a2[3]) {
        goto LABEL_67;
      }
      unsigned int v79 = malloc_type_calloc(0xF70uLL, 1uLL, 0x68B6042DuLL);
      *((void *)a2 + 556) = v79;
      if (!v79) {
        goto LABEL_67;
      }
      bzero(v79, 0xF70uLL);
      if (*((unsigned char *)a2 + 4440))
      {
        while ((a1[14].i8[0] & 7) != 0)
        {
          int8x8_t v80 = a1[13];
          ++a1[20].i32[1];
          HEVC_RBSP::flush_bits((uint64_t)a1, 1);
          if ((*(void *)&v80 & 0x8000000000000000) == 0) {
            goto LABEL_67;
          }
        }
        if (HEVC_RBSP::parseVPSextension((uint64_t)a1, (uint64_t)a2)) {
          goto LABEL_67;
        }
        while (a1[14].i32[0]
              + (vaddlv_u8((uint8x8_t)vcnt_s8(a1[19])) & 0x78)
              + 8 * (a1[20].i32[0] + a1[17].i32[0] - a1[15].i32[0])
              + 32 >= 9)
        {
          int8x8_t v100 = a1[13];
          ++a1[20].i32[1];
          BOOL v101 = *(void *)&v100 >> 63;
          HEVC_RBSP::flush_bits((uint64_t)a1, 1);
          v102[49] = v101;
        }
      }
    }
    HEVC_RBSP::byte_alignment((HEVC_RBSP *)a1);
    return 1;
  }
LABEL_67:
  HEVCReleaseVPS((uint64_t)a2);
  uint64_t result = 0;
  *a2 = -1;
  return result;
}

void HEVCReleaseVPS(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 != -1)
  {
    if (*(unsigned char *)(a1 + 4392))
    {
      uint64_t v2 = *(void **)(a1 + 4432);
      if (v2)
      {
        if (*(_DWORD *)(a1 + 4412))
        {
          unint64_t v3 = 0;
          do
          {
            unsigned int v4 = 0;
            do
            {
              uint64_t v5 = *(void *)(a1 + 4432);
              uint64_t v6 = *(void *)(v5 + 424 * v3 + 408);
              if (v6 && *(unsigned char *)(v5 + 424 * v3 + 1))
              {
                HEVCReleaseSubLayerHRD((void **)(v6 + 48 * v4), *(unsigned __int8 *)(v5 + 424 * v3 + 2));
                uint64_t v5 = *(void *)(a1 + 4432);
              }
              uint64_t v7 = *(void *)(v5 + 424 * v3 + 400);
              if (v7 && *(unsigned char *)(v5 + 424 * v3)) {
                HEVCReleaseSubLayerHRD((void **)(v7 + 48 * v4), *(unsigned __int8 *)(v5 + 424 * v3 + 2));
              }
              ++v4;
            }
            while (v4 <= *(_DWORD *)(a1 + 16));
            free(*(void **)(*(void *)(a1 + 4432) + 424 * v3 + 400));
            uint64_t v8 = *(void *)(a1 + 4432) + 424 * v3;
            *(void *)(v8 + 400) = 0;
            free(*(void **)(v8 + 408));
            uint64_t v2 = *(void **)(a1 + 4432);
            v2[53 * v3++ + 51] = 0;
          }
          while (v3 < *(unsigned int *)(a1 + 4412));
        }
        free(v2);
        *(void *)(a1 + 4432) = 0;
      }
      free(*(void **)(a1 + 4424));
      *(void *)(a1 + 4424) = 0;
      free(*(void **)(a1 + 4416));
      *(void *)(a1 + 4416) = 0;
    }
    if (*(void *)(a1 + 4384))
    {
      unsigned int v9 = 0;
      do
      {
        free(*(void **)(*(void *)(a1 + 4384) + 8 * v9));
        *(void *)(*(void *)(a1 + 4384) + 8 * v9++) = 0;
      }
      while (v9 <= *(_DWORD *)(a1 + 4380));
      free(*(void **)(a1 + 4384));
      *(void *)(a1 + 4384) = 0;
    }
    uint64_t v10 = *(void *)(a1 + 4448);
    if (v10)
    {
      uint64_t v11 = *(void **)(v10 + 3848);
      if (v11)
      {
        if (*(_DWORD *)(a1 + 4380) + 1 + *(unsigned __int16 *)(v10 + 3838))
        {
          int v12 = 0;
          do
          {
            free(*(void **)(*(void *)(v10 + 3848) + 8 * (unsigned __int16)v12));
            *(void *)(*(void *)(v10 + 3848) + 8 * (unsigned __int16)v12++) = 0;
          }
          while (*(_DWORD *)(a1 + 4380) + *(unsigned __int16 *)(v10 + 3838) + 1 > (unsigned __int16)v12);
          uint64_t v11 = *(void **)(v10 + 3848);
        }
        free(v11);
        *(void *)(v10 + 3848) = 0;
      }
      free(*(void **)(v10 + 3856));
      uint64_t v13 = 0;
      *(void *)(v10 + 3856) = 0;
      do
      {
        free(*(void **)(v10 + v13));
        *(void *)(v10 + v13) = 0;
        v13 += 8;
      }
      while (v13 != 512);
      releaseTargetLayerIdLists(a1);
      free(*(void **)(v10 + 736));
      *(void *)(v10 + 736) = 0;
      releaseVpsDpb(a1, *(unsigned __int16 *)(v10 + 3866), *(_DWORD *)(a1 + 4376) + 1);
      free(*(void **)(v10 + 512));
      *(void *)(v10 + 512) = 0;
      if (*(void *)(v10 + 520))
      {
        unint64_t v14 = 0;
        do
        {
          free(*(void **)(*(void *)(v10 + 520) + 8 * v14));
          *(void *)(*(void *)(v10 + 520) + 8 * v14) = 0;
        }
        while (v14++ < *(unsigned int *)(a1 + 12));
        free(*(void **)(v10 + 520));
        *(void *)(v10 + 520) = 0;
      }
      free(*(void **)(v10 + 528));
      *(void *)(v10 + 528) = 0;
      uint64_t v16 = *(void **)(v10 + 536);
      if (v16)
      {
        if (*(_WORD *)(v10 + 3866))
        {
          unint64_t v17 = 0;
          do
          {
            free(*(void **)(*(void *)(v10 + 536) + 8 * v17));
            *(void *)(*(void *)(v10 + 536) + 8 * v17++) = 0;
          }
          while (v17 < *(unsigned __int16 *)(v10 + 3866));
          uint64_t v16 = *(void **)(v10 + 536);
        }
        free(v16);
        *(void *)(v10 + 536) = 0;
      }
      uint64_t v18 = *(void **)(v10 + 3840);
      if (v18)
      {
        if (*(_WORD *)(v10 + 3838))
        {
          unint64_t v19 = 0;
          do
          {
            free(*(void **)(*(void *)(v10 + 3840) + 8 * v19));
            *(void *)(*(void *)(v10 + 3840) + 8 * v19++) = 0;
          }
          while (v19 < *(unsigned __int16 *)(v10 + 3838));
          uint64_t v18 = *(void **)(v10 + 3840);
        }
        free(v18);
        *(void *)(v10 + 3840) = 0;
      }
      free(*(void **)(v10 + 720));
      *(void *)(v10 + 720) = 0;
      unsigned int v20 = *(void **)(a1 + 4448);
    }
    else
    {
      unsigned int v20 = 0;
    }
    free(v20);
    *(void *)(a1 + 4448) = 0;
  }
}

uint64_t HEVC_RBSP::parsePPS(int8x8_t *this, uint64_t a2, uint64_t a3)
{
  uint64_t v159 = *MEMORY[0x263EF8340];
  int8x8_t v6 = this[13];
  if ((*(void *)&v6 & 0x8000000000000000) != 0)
  {
    ++this[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v7 = HIDWORD(*(void *)&v6);
    int v8 = -32;
    do
    {
      LODWORD(v7) = 2 * v7;
      int v9 = v8 + 1;
      if ((v7 & 0x80000000) != 0) {
        break;
      }
      unsigned int v10 = v8 + 32;
      ++v8;
    }
    while (v10 < 0x1E);
    this[20].i32[1] += v9 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v9 + 33);
    unsigned __int32 v11 = this[13].u32[1];
    this[20].i32[1] += v9 + 32;
    unsigned __int32 v12 = v11 >> -(char)v9;
    HEVC_RBSP::flush_bits((uint64_t)this, v9 + 32);
    uint64_t v13 = v12 + ~(-2 << (v9 + 31));
    if (v13 >= 0x40)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)unsigned int v149 = "int32_t HEVC_RBSP::parsePPS(hevc_picture_parameter_set_t *, hevc_sequence_parameter_set_t *)";
        *(_WORD *)&v149[8] = 1024;
        int v150 = v13;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s out of range PPS id %d", buf, 0x12u);
      }
      return 0xFFFFFFFFLL;
    }
  }
  unint64_t v14 = (_DWORD *)(a2 + 9856 * v13);
  HEVCReleasePPS((uint64_t)v14);
  bzero(v14, 0x2680uLL);
  *unint64_t v14 = v13;
  int8x8_t v15 = this[13];
  if ((*(void *)&v15 & 0x8000000000000000) != 0)
  {
    ++this[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned int v22 = 0;
  }
  else
  {
    uint64_t v16 = HIDWORD(*(void *)&v15);
    int v17 = -32;
    do
    {
      LODWORD(v16) = 2 * v16;
      int v18 = v17 + 1;
      if ((v16 & 0x80000000) != 0) {
        break;
      }
      unsigned int v19 = v17 + 32;
      ++v17;
    }
    while (v19 < 0x1E);
    this[20].i32[1] += v18 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v18 + 33);
    unsigned __int32 v20 = this[13].u32[1];
    this[20].i32[1] += v18 + 32;
    unsigned __int32 v21 = v20 >> -(char)v18;
    HEVC_RBSP::flush_bits((uint64_t)this, v18 + 32);
    unsigned int v22 = v21 + ~(-2 << (v18 + 31));
    if (v22 >= 0x10)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = *(_DWORD *)(a2 + 9856 * v13 + 4);
        *(_DWORD *)buf = 136315394;
        *(void *)unsigned int v149 = "int32_t HEVC_RBSP::parsePPS(hevc_picture_parameter_set_t *, hevc_sequence_parameter_set_t *)";
        *(_WORD *)&v149[8] = 1024;
        int v150 = v23;
        int v24 = &_os_log_internal;
        unsigned int v25 = "AppleAVD: %s out of range SPS id %d";
        uint32_t v26 = 18;
LABEL_104:
        _os_log_impl(&dword_223977000, v24, OS_LOG_TYPE_DEFAULT, v25, buf, v26);
      }
LABEL_105:
      HEVCReleasePPS((uint64_t)v14);
      uint64_t v13 = 0xFFFFFFFFLL;
      *unint64_t v14 = -1;
      return v13;
    }
  }
  uint64_t v27 = a2 + 9856 * v13;
  *(_DWORD *)(v27 + 4) = v22;
  unsigned __int32 v28 = (int *)(v27 + 4);
  int8x8_t v29 = this[13];
  ++this[20].i32[1];
  uint64_t v30 = *(void *)&v29 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *((unsigned char *)v28 + 4) = v30;
  int8x8_t v31 = this[13];
  ++this[20].i32[1];
  uint64_t v32 = *(void *)&v31 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *((unsigned char *)v28 + 5) = v32;
  int8x8_t v33 = this[13];
  this[20].i32[1] += 3;
  uint64_t v34 = *(void *)&v33 >> 61;
  HEVC_RBSP::flush_bits((uint64_t)this, 3);
  v28[2] = v34;
  int8x8_t v35 = this[13];
  ++this[20].i32[1];
  uint64_t v36 = *(void *)&v35 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *((unsigned char *)v28 + 12) = v36;
  int8x8_t v37 = this[13];
  ++this[20].i32[1];
  uint64_t v38 = *(void *)&v37 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *((unsigned char *)v28 + 13) = v38;
  int8x8_t v39 = this[13];
  if ((*(void *)&v39 & 0x8000000000000000) != 0)
  {
    ++this[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(_DWORD *)(a2 + 9856 * v13 + 20) = 0;
  }
  else
  {
    uint64_t v40 = HIDWORD(*(void *)&v39);
    int v41 = -32;
    do
    {
      LODWORD(v40) = 2 * v40;
      int v42 = v41 + 1;
      if ((v40 & 0x80000000) != 0) {
        break;
      }
      unsigned int v43 = v41 + 32;
      ++v41;
    }
    while (v43 < 0x1E);
    this[20].i32[1] += v42 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v42 + 33);
    unsigned __int32 v44 = this[13].u32[1];
    this[20].i32[1] += v42 + 32;
    unsigned __int32 v45 = v44 >> -(char)v42;
    HEVC_RBSP::flush_bits((uint64_t)this, v42 + 32);
    unsigned int v46 = v45 + ~(-2 << (v42 + 31));
    *(_DWORD *)(a2 + 9856 * v13 + 20) = v46;
    if (v46 >= 0xF)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)unsigned int v149 = v46;
      int v24 = &_os_log_internal;
      unsigned int v25 = "AppleAVD: pps->num_ref_idx_l0_default_active_minus1 > HEVC_MAX_REF_INDEX_FOR_RPL, is %d";
LABEL_33:
      uint32_t v26 = 8;
      goto LABEL_104;
    }
  }
  int8x8_t v47 = this[13];
  if ((*(void *)&v47 & 0x8000000000000000) != 0)
  {
    ++this[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(_DWORD *)(a2 + 9856 * v13 + 24) = 0;
  }
  else
  {
    uint64_t v48 = HIDWORD(*(void *)&v47);
    int v49 = -32;
    do
    {
      LODWORD(v48) = 2 * v48;
      int v50 = v49 + 1;
      if ((v48 & 0x80000000) != 0) {
        break;
      }
      unsigned int v51 = v49 + 32;
      ++v49;
    }
    while (v51 < 0x1E);
    this[20].i32[1] += v50 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v50 + 33);
    unsigned __int32 v52 = this[13].u32[1];
    this[20].i32[1] += v50 + 32;
    unsigned __int32 v53 = v52 >> -(char)v50;
    HEVC_RBSP::flush_bits((uint64_t)this, v50 + 32);
    unsigned int v54 = v53 + ~(-2 << (v50 + 31));
    *(_DWORD *)(a2 + 9856 * v13 + 24) = v54;
    if (v54 >= 0xF)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)unsigned int v149 = v54;
      int v24 = &_os_log_internal;
      unsigned int v25 = "AppleAVD: pps->num_ref_idx_l1_default_active_minus1 > HEVC_MAX_REF_INDEX_FOR_RPL, is %d";
      goto LABEL_33;
    }
  }
  unsigned int v55 = v22;
  int8x8_t v56 = this[13];
  if ((*(void *)&v56 & 0x8000000000000000) != 0)
  {
    ++this[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned __int32 v63 = 0;
  }
  else
  {
    uint64_t v57 = HIDWORD(*(void *)&v56);
    int v58 = -32;
    do
    {
      LODWORD(v57) = 2 * v57;
      int v59 = v58 + 1;
      if ((v57 & 0x80000000) != 0) {
        break;
      }
      unsigned int v60 = v58 + 32;
      ++v58;
    }
    while (v60 < 0x1E);
    this[20].i32[1] += v59 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v59 + 33);
    unsigned __int32 v61 = this[13].u32[1];
    this[20].i32[1] += v59 + 32;
    unsigned __int32 v62 = v61 >> -(char)v59;
    HEVC_RBSP::flush_bits((uint64_t)this, v59 + 32);
    unsigned __int32 v63 = v62 + ~(-2 << (v59 + 31));
  }
  signed int v64 = (-((v63 & 1) == 0) ^ ((v63 + 1) >> 1)) + ((v63 & 1) == 0);
  *(_DWORD *)(a2 + 9856 * v13 + 28) = v64;
  int v65 = -6 * *(_DWORD *)(a3 + 23176 * v55 + 3636) - 26;
  if (v64 < v65 || v64 >= 26)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_105;
    }
    *(_DWORD *)buf = 136316418;
    *(void *)unsigned int v149 = "parsePPS";
    *(_WORD *)&v149[8] = 1024;
    int v150 = 3225;
    __int16 v151 = 2080;
    int v152 = "pps->init_qp_minus26";
    __int16 v153 = 1024;
    unsigned int v154 = v64;
    __int16 v155 = 1024;
    int v156 = v65;
    __int16 v157 = 1024;
    int v158 = 25;
    int v24 = &_os_log_internal;
    unsigned int v25 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
LABEL_103:
    uint32_t v26 = 46;
    goto LABEL_104;
  }
  unsigned int v147 = v55;
  int8x8_t v67 = this[13];
  ++this[20].i32[1];
  uint64_t v68 = *(void *)&v67 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  char v69 = (unsigned char *)(a2 + 9856 * v13);
  v69[32] = v68;
  int8x8_t v70 = this[13];
  ++this[20].i32[1];
  uint64_t v71 = *(void *)&v70 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  v69[33] = v71;
  uint64_t v72 = (uint64_t)this[13];
  ++this[20].i32[1];
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  v69[34] = v72 < 0;
  if (v72 < 0) {
    *(_DWORD *)(a2 + 9856 * v13 + 36) = HEVC_RBSP::ue_v((HEVC_RBSP *)this);
  }
  int8x8_t v73 = this[13];
  if ((*(void *)&v73 & 0x8000000000000000) != 0)
  {
    ++this[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned __int32 v80 = 0;
  }
  else
  {
    uint64_t v74 = HIDWORD(*(void *)&v73);
    int v75 = -32;
    do
    {
      LODWORD(v74) = 2 * v74;
      int v76 = v75 + 1;
      if ((v74 & 0x80000000) != 0) {
        break;
      }
      unsigned int v77 = v75 + 32;
      ++v75;
    }
    while (v77 < 0x1E);
    this[20].i32[1] += v76 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v76 + 33);
    unsigned __int32 v78 = this[13].u32[1];
    this[20].i32[1] += v76 + 32;
    unsigned __int32 v79 = v78 >> -(char)v76;
    HEVC_RBSP::flush_bits((uint64_t)this, v76 + 32);
    unsigned __int32 v80 = v79 + ~(-2 << (v76 + 31));
  }
  unsigned int v81 = (-((v80 & 1) == 0) ^ ((v80 + 1) >> 1)) + ((v80 & 1) == 0);
  *(_DWORD *)(a2 + 9856 * v13 + 40) = v81;
  if (v81 - 13 <= 0xFFFFFFE6)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_105;
    }
    *(_DWORD *)buf = 136316418;
    *(void *)unsigned int v149 = "parsePPS";
    *(_WORD *)&v149[8] = 1024;
    int v150 = 3236;
    __int16 v151 = 2080;
    int v152 = "pps->pps_cb_qp_offset";
    __int16 v153 = 1024;
    unsigned int v154 = v81;
    __int16 v155 = 1024;
    int v156 = -12;
    __int16 v157 = 1024;
    int v158 = 12;
    int v24 = &_os_log_internal;
    unsigned int v25 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
    goto LABEL_103;
  }
  unsigned int v82 = HEVC_RBSP::se_v((HEVC_RBSP *)this);
  *(_DWORD *)(a2 + 9856 * v13 + 44) = v82;
  if (v82 - 13 <= 0xFFFFFFE6)
  {
    unsigned int v83 = v82;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_105;
    }
    *(_DWORD *)buf = 136316418;
    *(void *)unsigned int v149 = "parsePPS";
    *(_WORD *)&v149[8] = 1024;
    int v150 = 3238;
    __int16 v151 = 2080;
    int v152 = "pps->pps_cr_qp_offset";
    __int16 v153 = 1024;
    unsigned int v154 = v83;
    __int16 v155 = 1024;
    int v156 = -12;
    __int16 v157 = 1024;
    int v158 = 12;
    int v24 = &_os_log_internal;
    unsigned int v25 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
    goto LABEL_103;
  }
  int8x8_t v84 = this[13];
  ++this[20].i32[1];
  uint64_t v85 = *(void *)&v84 >> 63;
  LOBYTE(v86) = 1;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  long long v87 = (unsigned char *)(a2 + 9856 * v13);
  v87[48] = v85;
  int8x8_t v88 = this[13];
  ++this[20].i32[1];
  uint64_t v89 = *(void *)&v88 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  v87[49] = v89;
  int8x8_t v90 = this[13];
  ++this[20].i32[1];
  uint64_t v91 = *(void *)&v90 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  v87[50] = v91;
  int8x8_t v92 = this[13];
  ++this[20].i32[1];
  uint64_t v93 = *(void *)&v92 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  v87[51] = v93;
  int8x8_t v94 = this[13];
  ++this[20].i32[1];
  uint64_t v95 = *(void *)&v94 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  v87[52] = v95;
  int8x8_t v96 = this[13];
  ++this[20].i32[1];
  uint64_t v97 = *(void *)&v96 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  v87[53] = v97;
  if (v87[52])
  {
    uint64_t v98 = a2 + 9856 * v13;
    *(_DWORD *)(v98 + 56) = HEVC_RBSP::ue_v((HEVC_RBSP *)this);
    uint64_t v99 = (unsigned int *)(v98 + 56);
    unsigned int v100 = HEVC_RBSP::ue_v((HEVC_RBSP *)this);
    *(_DWORD *)(v98 + 60) = v100;
    BOOL v101 = (_DWORD *)(v98 + 60);
    unsigned int v102 = *(_DWORD *)(a3 + 23176 * v147 + 22880) - 1;
    if (*v99 > v102)
    {
      unsigned int v103 = *v99;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136316418;
      *(void *)unsigned int v149 = "parsePPS";
      *(_WORD *)&v149[8] = 1024;
      int v150 = 3249;
      __int16 v151 = 2080;
      int v152 = "pps->num_tile_columns_minus1";
      __int16 v153 = 1024;
      unsigned int v154 = v103;
      __int16 v155 = 1024;
      int v156 = 0;
      __int16 v157 = 1024;
      int v158 = v102;
      int v24 = &_os_log_internal;
      unsigned int v25 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_103;
    }
    unsigned int v104 = *(_DWORD *)(a3 + 23176 * v147 + 22888) - 1;
    if (v100 > v104)
    {
      unsigned int v105 = v100;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136316418;
      *(void *)unsigned int v149 = "parsePPS";
      *(_WORD *)&v149[8] = 1024;
      int v150 = 3250;
      __int16 v151 = 2080;
      int v152 = "pps->num_tile_rows_minus1";
      __int16 v153 = 1024;
      unsigned int v154 = v105;
      __int16 v155 = 1024;
      int v156 = 0;
      __int16 v157 = 1024;
      int v158 = v104;
      int v24 = &_os_log_internal;
      unsigned int v25 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_103;
    }
    if (*v99 > 0x13 || v100 >= 0x16)
    {
      unsigned int v131 = *v99;
      unsigned int v132 = v100;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)unsigned int v149 = v131;
        *(_WORD *)&v149[4] = 1024;
        *(_DWORD *)&v149[6] = v132;
        int v24 = &_os_log_internal;
        unsigned int v25 = "AppleAVD: value out of range: num_tile_columns_minus1 %d num_tile_rows_minus1 %d";
        uint32_t v26 = 14;
        goto LABEL_104;
      }
      goto LABEL_105;
    }
    uint64_t v106 = (uint64_t)this[13];
    ++this[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(unsigned char *)(a2 + 9856 * v13 + 64) = v106 < 0;
    uint64_t v146 = a3 + 23176 * *v28;
    if ((v106 & 0x8000000000000000) == 0)
    {
      if (*v99)
      {
        unint64_t v107 = 0;
        do
          *(_DWORD *)(a2 + 9856 * v13 + 68 + 4 * v107++) = HEVC_RBSP::ue_v((HEVC_RBSP *)this);
        while (v107 < *v99);
      }
      if (*v101)
      {
        unint64_t v108 = 0;
        do
          *(_DWORD *)(a2 + 9856 * v13 + 148 + 4 * v108++) = HEVC_RBSP::ue_v((HEVC_RBSP *)this);
        while (v108 < *v101);
      }
    }
    calcTilePositions(a2 + 9856 * v13, v146);
    int8x8_t v109 = this[13];
    ++this[20].i32[1];
    uint64_t v86 = *(void *)&v109 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
  }
  uint64_t v110 = a2 + 9856 * v13;
  *(unsigned char *)(v110 + 236) = v86;
  int8x8_t v111 = this[13];
  ++this[20].i32[1];
  uint64_t v112 = *(void *)&v111 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *(unsigned char *)(v110 + 237) = v112;
  uint64_t v113 = (uint64_t)this[13];
  ++this[20].i32[1];
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *(_DWORD *)(v110 + 244) = 0;
  unsigned int v114 = (unsigned int *)(v110 + 244);
  *((unsigned char *)v114 - 6) = v113 < 0;
  *(_WORD *)((char *)v114 - 5) = 0;
  v114[1] = 0;
  if (v113 < 0)
  {
    int8x8_t v122 = this[13];
    ++this[20].i32[1];
    uint64_t v123 = *(void *)&v122 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *((unsigned char *)v114 - 5) = v123;
    uint64_t v124 = (uint64_t)this[13];
    ++this[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *((unsigned char *)v114 - 4) = v124 < 0;
    if ((v124 & 0x8000000000000000) == 0)
    {
      unsigned int v125 = HEVC_RBSP::se_v((HEVC_RBSP *)this);
      *unsigned int v114 = v125;
      if (v125 - 7 <= 0xFFFFFFF2)
      {
        unsigned int v126 = v125;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136316418;
        *(void *)unsigned int v149 = "parsePPS";
        *(_WORD *)&v149[8] = 1024;
        int v150 = 3297;
        __int16 v151 = 2080;
        int v152 = "pps->pps_beta_offset_div2";
        __int16 v153 = 1024;
        unsigned int v154 = v126;
        __int16 v155 = 1024;
        int v156 = -6;
        __int16 v157 = 1024;
        int v158 = 6;
        int v24 = &_os_log_internal;
        unsigned int v25 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
        goto LABEL_103;
      }
      unsigned int v143 = HEVC_RBSP::se_v((HEVC_RBSP *)this);
      v114[1] = v143;
      if (v143 - 7 <= 0xFFFFFFF2)
      {
        unsigned int v144 = v143;
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136316418;
        *(void *)unsigned int v149 = "parsePPS";
        *(_WORD *)&v149[8] = 1024;
        int v150 = 3300;
        __int16 v151 = 2080;
        int v152 = "pps->pps_tc_offset_div2";
        __int16 v153 = 1024;
        unsigned int v154 = v144;
        __int16 v155 = 1024;
        int v156 = -6;
        __int16 v157 = 1024;
        int v158 = 6;
        int v24 = &_os_log_internal;
        unsigned int v25 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
        goto LABEL_103;
      }
    }
  }
  uint64_t v115 = (uint64_t)this[13];
  ++this[20].i32[1];
  HEVC_RBSP::flush_bits((uint64_t)this, 1);
  *(unsigned char *)(a2 + 9856 * v13 + 252) = v115 < 0;
  if ((v115 & 0x8000000000000000) == 0
    || HEVC_RBSP::parseScalingListData((HEVC_RBSP *)this, a2 + 9856 * v13 + 256))
  {
    int8x8_t v116 = this[13];
    ++this[20].i32[1];
    uint64_t v117 = *(void *)&v116 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    uint64_t v118 = a2 + 9856 * v13;
    *(unsigned char *)(v118 + 6456) = v117;
    unsigned int v119 = HEVC_RBSP::ue_v((HEVC_RBSP *)this);
    *(_DWORD *)(v118 + 6460) = v119;
    unsigned int v120 = *(_DWORD *)(a3 + 23176 * v147 + 22864) - 2;
    if (v119 > v120)
    {
      unsigned int v121 = v119;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_105;
      }
      *(_DWORD *)buf = 136316418;
      *(void *)unsigned int v149 = "parsePPS";
      *(_WORD *)&v149[8] = 1024;
      int v150 = 3315;
      __int16 v151 = 2080;
      int v152 = "pps->log2_parallel_merge_level_minus2";
      __int16 v153 = 1024;
      unsigned int v154 = v121;
      __int16 v155 = 1024;
      int v156 = 0;
      __int16 v157 = 1024;
      int v158 = v120;
      int v24 = &_os_log_internal;
      unsigned int v25 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_103;
    }
    int8x8_t v127 = this[13];
    ++this[20].i32[1];
    uint64_t v128 = *(void *)&v127 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    uint64_t v129 = a2 + 9856 * v13;
    *(unsigned char *)(v129 + 6464) = v128;
    uint64_t v130 = (uint64_t)this[13];
    ++this[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    *(unsigned char *)(v129 + 6465) = v130 < 0;
    if ((v130 & 0x8000000000000000) == 0)
    {
LABEL_89:
      HEVC_RBSP::byte_alignment((HEVC_RBSP *)this);
      return v13;
    }
    int8x8_t v133 = this[13];
    ++this[20].i32[1];
    uint64_t v134 = *(void *)&v133 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    uint64_t v135 = (unsigned char *)(a2 + 9856 * v13);
    v135[6466] = v134;
    int8x8_t v136 = this[13];
    ++this[20].i32[1];
    uint64_t v137 = *(void *)&v136 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    v135[6467] = v137;
    int8x8_t v138 = this[13];
    this[20].i32[1] += 6;
    uint64_t v139 = *(void *)&v138 >> 58;
    HEVC_RBSP::flush_bits((uint64_t)this, 6);
    v135[6468] = v139;
    if (v135[6466]
      && (HEVC_RBSP::parsePpsRangeExtension((HEVC_RBSP *)this, a2 + 9856 * v13, a2 + 9856 * v13 + 6472) & 1) == 0)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_105;
      }
      *(_WORD *)buf = 0;
      int v24 = &_os_log_internal;
      unsigned int v25 = "AppleAVD: parsePpsRangeExtension error";
    }
    else
    {
      if (!v135[6467]
        || (HEVC_RBSP::parsePpsMultiLayerExtension((uint64_t)this, a2 + 9856 * v13 + 6544) & 1) != 0)
      {
        if (v135[6468])
        {
          uint64_t v140 = (unsigned char *)(a2 + 9856 * v13 + 9672);
          while (this[14].i32[0]
                + (vaddlv_u8((uint8x8_t)vcnt_s8(this[19])) & 0x78)
                + 8 * (this[20].i32[0] + this[17].i32[0] - this[15].i32[0])
                + 32 >= 9)
          {
            int8x8_t v141 = this[13];
            ++this[20].i32[1];
            uint64_t v142 = *(void *)&v141 >> 63;
            HEVC_RBSP::flush_bits((uint64_t)this, 1);
            *uint64_t v140 = v142;
          }
        }
        goto LABEL_89;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_105;
      }
      *(_WORD *)buf = 0;
      int v24 = &_os_log_internal;
      unsigned int v25 = "AppleAVD: parsePpsMultiLayerExtension error";
    }
    uint32_t v26 = 2;
    goto LABEL_104;
  }
  return 0xFFFFFFFFLL;
}

void HEVC_RBSP::~HEVC_RBSP(HEVC_RBSP *this)
{
  *(void *)this = &unk_26D740220;
  HEVC_RBSP::releaseScanOrder(this);

  JUMPOUT(0x223CBAD30);
}

{
  *(void *)this = &unk_26D740220;
  HEVC_RBSP::releaseScanOrder(this);
}

{
  *(void *)this = &unk_26D740220;
  HEVC_RBSP::releaseScanOrder(this);
}

void HEVC_RBSP::releaseScanOrder(HEVC_RBSP *this)
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    for (uint64_t j = 8; j != 32; j += 8)
    {
      unsigned int v4 = *(void **)((char *)this + j);
      if (v4)
      {
        free(v4);
        *(void *)((char *)this + j) = 0;
      }
    }
    this = (HEVC_RBSP *)((char *)this + 24);
  }
}

uint64_t calcHevcDpbMaxSize(unsigned int *a1)
{
  unsigned int v1 = a1[16];
  if (v1)
  {
    unsigned int v2 = a1[903] * a1[902];
    signed int v3 = v1 / 3;
    if (v3 <= 29)
    {
      int v10 = 36864;
      if (v3 == 21) {
        int v11 = 245760;
      }
      else {
        int v11 = 0;
      }
      if (v3 == 20) {
        int v12 = 122880;
      }
      else {
        int v12 = v11;
      }
      BOOL v13 = v3 == 10;
    }
    else
    {
      if (v3 <= 0x3E)
      {
        if (((1 << v3) & 0x1C000000000000) != 0)
        {
          unsigned int v4 = 8912896;
          goto LABEL_32;
        }
        if (((1 << v3) & 0x7000000000000000) != 0)
        {
          unsigned int v4 = 35651584;
          goto LABEL_32;
        }
        if (((1 << v3) & 0x30000000000) != 0)
        {
          unsigned int v4 = 2228224;
LABEL_32:
          if (v2 <= v4 >> 2) {
            return 16;
          }
          if (v2 <= v4 >> 1) {
            return 12;
          }
          if (v2 <= (3 * v4) >> 2) {
            return 8;
          }
          return 6;
        }
      }
      int v10 = 552960;
      if (v3 == 31) {
        int v12 = 983040;
      }
      else {
        int v12 = 0;
      }
      BOOL v13 = v3 == 30;
    }
    if (v13) {
      unsigned int v4 = v10;
    }
    else {
      unsigned int v4 = v12;
    }
    goto LABEL_32;
  }
  uint64_t v5 = &a1[a1[1]];
  unsigned int v6 = v5[977];
  unsigned int v7 = v5[913];
  if (v6 <= v7 + 1) {
    unsigned int v6 = v7 + 1;
  }
  if (v5[1041])
  {
    unsigned int v8 = v5[5729];
    if (v6 <= v8) {
      unsigned int v6 = v8;
    }
  }
  if (v6 >= 0x10) {
    return 16;
  }
  else {
    return v6;
  }
}

uint64_t CreateAVDHEVCInstance(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v32 = 0;
  uint64_t v3 = AppleAVDOpenConnection(&v32, 2, 1, a2);
  if (!v3)
  {
    uint64_t v9 = v32;
    *(void *)(a1 + 5184) = v32;
    *(_DWORD *)(a1 + 5204) = 1;
    int v10 = *(_DWORD *)(a1 + 8068);
    if (v10 != -1)
    {
      LODWORD(v29) = *(_DWORD *)(a1 + 8068);
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)uint64_t v34 = v10;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: #HEVC# storage->memCacheMode = %d", buf, 8u);
        uint64_t v9 = *(void *)(a1 + 5184);
      }
      if (AppleAVDSetParameter(v9, 41, (unsigned __int8 *)&v29)
        && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder ERROR: kAppleAVDMemCacheMode set failed", buf, 2u);
      }
      uint64_t v9 = *(void *)(a1 + 5184);
    }
    int v31 = *(_DWORD *)(a1 + 8064);
    if (AppleAVDSetParameter(v9, 50, (unsigned __int8 *)&v31)
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder ERROR: kAppleAVDSetTryEveryFrame set failed", buf, 2u);
    }
    if (AppleAVDSetParameter(*(void *)(a1 + 5184), 52, (unsigned __int8 *)(a1 + 8072))
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)uint64_t v34 = "CreateAVDHEVCInstance";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetOnDemandDVAMap failed", buf, 0xCu);
    }
    if (AppleAVDSetParameter(*(void *)(a1 + 5184), 53, (unsigned __int8 *)(a1 + 16828))
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)uint64_t v34 = "CreateAVDHEVCInstance";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetAVDCoreControlPerfWeight failed", buf, 0xCu);
    }
    if (AppleAVDSetParameter(*(void *)(a1 + 5184), 56, (unsigned __int8 *)(a1 + 8076))
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)uint64_t v34 = "CreateAVDHEVCInstance";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetMiscPreferences failed", buf, 0xCu);
    }
    int v30 = *(_DWORD *)(a1 + 5828);
    uint64_t v11 = AppleAVDSetParameter(*(void *)(a1 + 5184), 25, (unsigned __int8 *)&v30);
    if (v11)
    {
      uint64_t v4 = v11;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(_DWORD *)(a1 + 5208);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)uint64_t v34 = v12;
        *(_WORD *)&v34[4] = 1024;
        *(_DWORD *)&v34[6] = v4;
        uint64_t v5 = &_os_log_internal;
        unsigned int v6 = "AppleAVD: AppleAVD_HEVCVideoDecoder: frame# %d, Could not set kAppleAVDSetCryptScheme, err %d\n";
        unsigned int v7 = buf;
        uint32_t v8 = 14;
        goto LABEL_28;
      }
      return v4;
    }
    int8x8_t v29 = DisplayCallBack_0;
    uint64_t v14 = AppleAVDSetParameter(v32, 1, (unsigned __int8 *)&v29);
    if (v14)
    {
      uint64_t v4 = v14;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v4;
      }
      *(_WORD *)buf = 0;
      uint64_t v5 = &_os_log_internal;
      unsigned int v6 = "AppleAVD: AppleAVD_HEVCDecoder - ERROR setting parameter kAppleAVDDisplayCallBack";
      goto LABEL_4;
    }
    uint64_t v15 = AppleAVDSetParameter(v32, 2, (unsigned __int8 *)a1);
    if (v15)
    {
      uint64_t v4 = v15;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v4;
      }
      *(_WORD *)buf = 0;
      uint64_t v5 = &_os_log_internal;
      unsigned int v6 = "AppleAVD: AppleAVD_HEVCDecoder - ERROR setting parameter kAppleAVDFIGUserRefCon";
      goto LABEL_4;
    }
    uint64_t v16 = AppleAVDSetParameter(*(void *)(a1 + 5184), 10, 0);
    if (v16)
    {
      uint64_t v4 = v16;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v4;
      }
      *(_WORD *)buf = 0;
      uint64_t v5 = &_os_log_internal;
      unsigned int v6 = "AppleAVD: AppleAVD_HEVCDecoder - ERROR setting parameter kAppleAVDSetOutputFileName";
      goto LABEL_4;
    }
    uint64_t v17 = AppleAVDSetParameter(*(void *)(a1 + 5184), 18, (unsigned __int8 *)(a1 + 5816));
    if (v17)
    {
      uint64_t v4 = v17;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v4;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)uint64_t v34 = "CreateAVDHEVCInstance";
      uint64_t v5 = &_os_log_internal;
      unsigned int v6 = "AppleAVD: %s(): AppleAVD_HEVCDecoder - ERROR setting parameter kAppleAVDSetUsageMode";
      unsigned int v7 = buf;
      uint32_t v8 = 12;
      goto LABEL_28;
    }
    if (AppleAVDSetParameter(*(void *)(a1 + 5184), 20, (unsigned __int8 *)(a1 + 5824)))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        int v18 = &_os_log_internal;
        unsigned int v19 = "AppleAVD: AppleAVD_HEVCDecoder - AppleAVDSetParameter kAppleAVDExtraInloopFilter returned ERROR";
LABEL_65:
        _os_log_impl(&dword_223977000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 2u);
      }
    }
    else
    {
      if (AppleAVDSetParameter(*(void *)(a1 + 5184), 7, (unsigned __int8 *)(a1 + 8145))
        && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)uint64_t v34 = "CreateAVDHEVCInstance";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR setting kAppleAVDSetSkipVPSExtParsing failed", buf, 0xCu);
      }
      int v20 = AppleAVDSetParameter(*(void *)(a1 + 5184), 63, *(unsigned __int8 **)(a1 + 16816));
      BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      if (v20)
      {
        if (v21)
        {
          *(_WORD *)buf = 0;
          int v18 = &_os_log_internal;
          unsigned int v19 = "AppleAVD: AppleAVD_HEVCDecoder - AppleAVDSetParameter kAppleAVDSetTaggedBufGroupArray returned ERROR";
          goto LABEL_65;
        }
      }
      else
      {
        if (v21)
        {
          int v22 = *(_DWORD *)(a1 + 8156);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)uint64_t v34 = v22;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCDecoder - setting parameter kAppleAVDMultiViewDecodeClient %d ", buf, 8u);
        }
        if (AppleAVDSetParameter(*(void *)(a1 + 5184), 5, (unsigned __int8 *)(a1 + 8156)))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            int v18 = &_os_log_internal;
            unsigned int v19 = "AppleAVD: AppleAVD_HEVCDecoder - AppleAVDSetParameter kAppleAVDMultiViewDecodeClient returned ERROR";
            goto LABEL_65;
          }
        }
        else if (AppleAVDSetParameter(*(void *)(a1 + 5184), 36, (unsigned __int8 *)(a1 + 5820)))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            int v18 = &_os_log_internal;
            unsigned int v19 = "AppleAVD: AppleAVD_HEVCDecoder - AppleAVDSetParameter kAppleAVDEnableRVRA returned ERROR";
            goto LABEL_65;
          }
        }
        else if (AppleAVDSetParameter(*(void *)(a1 + 5184), 37, (unsigned __int8 *)(a1 + 16832)))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            int v18 = &_os_log_internal;
            unsigned int v19 = "AppleAVD: AppleAVD_HEVCDecoder - AppleAVDSetParameter kAppleAVDSetEnableMuxedAlpha returned ERROR";
            goto LABEL_65;
          }
        }
        else
        {
          if (!AppleAVDSetParameter(*(void *)(a1 + 5184), 38, (unsigned __int8 *)(a1 + 16844)))
          {
            *(_OWORD *)&v34[4] = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            uint64_t v37 = 0;
            *(_DWORD *)buf = 2;
            *(void *)uint64_t v34 = *(void *)(a1 + 5212);
            *(void *)&v34[12] = *(void *)(a1 + 5632);
            int v23 = *(_DWORD *)(a1 + 5624);
            LODWORD(v35) = *(_DWORD *)(a1 + 5640);
            DWORD1(v35) = v23;
            BYTE8(v36) = *(unsigned char *)(a1 + 5644);
            uint64_t v24 = AppleAVDInitializeDecoder(*(void *)(a1 + 5184), (unsigned int *)buf);
            if (v24)
            {
              uint64_t v4 = v24;
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                return v4;
              }
              *(_WORD *)unsigned __int32 v28 = 0;
              uint64_t v5 = &_os_log_internal;
              unsigned int v6 = "AppleAVD: AppleAVD_HEVCDecoder ERROR: AppleAVDInitializeDecoder : init decoder device";
            }
            else
            {
              uint64_t v25 = AppleAVDGetParameter(v32, 9, a1 + 5220);
              if (v25)
              {
                uint64_t v4 = v25;
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  return v4;
                }
                *(_WORD *)unsigned __int32 v28 = 0;
                uint64_t v5 = &_os_log_internal;
                unsigned int v6 = "AppleAVD: AppleAVD_HEVCDecoder - AppleAVDDeviceType returned ERROR";
              }
              else
              {
                uint64_t v26 = AppleAVDGetParameter(*(void *)(a1 + 5184), 13, a1 + 5712);
                if (v26)
                {
                  uint64_t v4 = v26;
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    return v4;
                  }
                  *(_WORD *)unsigned __int32 v28 = 0;
                  uint64_t v5 = &_os_log_internal;
                  unsigned int v6 = "AppleAVD: AppleAVD_HEVCDecoder ERROR: kAppleAVDGetSequenceParams : Could not get Params";
                }
                else
                {
                  uint64_t v27 = AppleAVDGetParameter(*(void *)(a1 + 5184), 6, a1 + 8152);
                  if (!v27)
                  {
                    if (*(_DWORD *)(a1 + 5712) >= 0x40u && *(_DWORD *)(a1 + 5716) > 0x3Fu) {
                      return 0;
                    }
                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)unsigned __int32 v28 = 0;
                      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCDecoder ERROR: Unsupported picture size!", v28, 2u);
                    }
                    return 305;
                  }
                  uint64_t v4 = v27;
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    return v4;
                  }
                  *(_WORD *)unsigned __int32 v28 = 0;
                  uint64_t v5 = &_os_log_internal;
                  unsigned int v6 = "AppleAVD: AppleAVD_HEVCDecoder ERROR: kAppleAVDGetNumLayersMultiViewClient : Could not get Params";
                }
              }
            }
            unsigned int v7 = v28;
            goto LABEL_5;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            int v18 = &_os_log_internal;
            unsigned int v19 = "AppleAVD: AppleAVD_HEVCDecoder - AppleAVDSetParameter kAppleAVDSetMuxedAlphaStartingPlaneOffset returned ERROR";
            goto LABEL_65;
          }
        }
      }
    }
    return 4294954385;
  }
  uint64_t v4 = v3;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    uint64_t v5 = &_os_log_internal;
    unsigned int v6 = "AppleAVD: AppleAVD_HEVCDecoder - ERROR opening kernel connection";
LABEL_4:
    unsigned int v7 = buf;
LABEL_5:
    uint32_t v8 = 2;
LABEL_28:
    _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, v7, v8);
  }
  return v4;
}

uint64_t AppleAVDWrapperHEVCDecoderDecodeFrame(uint64_t a1, uint64_t a2, void *a3, char a4, int *a5)
{
  uint64_t v177 = *MEMORY[0x263EF8340];
  unsigned int valuePtr = 0;
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDWrapperHEVCDecoderDecodeFrame - ERROR! storage is NULL\n", buf, 2u);
    }
    return 311;
  }
  uint64_t v10 = DerivedStorage;
  kdebug_trace();
  kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 5648));
  int v11 = *(_DWORD *)(v10 + 5204);
  if (v11 != 2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperHEVCDecoderDecodeFrame";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v11;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s called on plugin in state %d", buf, 0x12u);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 5648));
    return 311;
  }
  int v12 = AppleAVDSetParameter(*(void *)(v10 + 5184), 18, (unsigned __int8 *)(v10 + 5816));
  if (v12 | AppleAVDSetParameter(*(void *)(v10 + 5184), 36, (unsigned __int8 *)(v10 + 5820)))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "AppleAVDWrapperHEVCDecoderDecodeFrame";
      BOOL v13 = &_os_log_internal;
      uint64_t v14 = "AppleAVD: %s(): AppleAVD_HEVCDecoder - AppleAVDSetParameter kAppleAVDSetUsageMode or kAppleAVDEnableRVRA returned ERROR";
      uint32_t v15 = 12;
LABEL_22:
      _os_log_impl(&dword_223977000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, v15);
    }
LABEL_23:
    kdebug_trace();
    uint64_t v19 = v10;
LABEL_24:
    AppleAVDHEVCDecoderEmitErrorToVT(v19);
    if (a5) {
      *a5 = 2;
    }
    goto LABEL_26;
  }
  if (AppleAVDSetParameter(*(void *)(v10 + 5184), 20, (unsigned __int8 *)(v10 + 5824)))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_23;
    }
    *(_WORD *)buf = 0;
    BOOL v13 = &_os_log_internal;
    uint64_t v14 = "AppleAVD: AppleAVD_HEVCDecoder - AppleAVDSetParameter kAppleAVDExtraInloopFilter returned ERROR";
LABEL_21:
    uint32_t v15 = 2;
    goto LABEL_22;
  }
  CFTypeRef v17 = CMGetAttachment(a3, (CFStringRef)*MEMORY[0x263F01058], 0);
  if (v17) {
    BOOL v18 = CFEqual(v17, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  }
  else {
    BOOL v18 = 0;
  }
  BOOL v126 = v18;
  if (AppleAVDSetParameter(*(void *)(v10 + 5184), 35, (unsigned __int8 *)&v126))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_23;
    }
    *(_WORD *)buf = 0;
    BOOL v13 = &_os_log_internal;
    uint64_t v14 = "AppleAVD: AppleAVD_HEVCDecoder - AppleAVDSetParameter kAppleAVDHandleCRAFrameAsBLA returned ERROR";
    goto LABEL_21;
  }
  DataBuffer = CMSampleBufferGetDataBuffer((CMSampleBufferRef)a3);
  BOOL v21 = DataBuffer;
  if (!DataBuffer || (dataunsigned int Length = CMBlockBufferGetDataLength(DataBuffer)) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR:  either dataBuffer=%p is invalid or dataLength=%zu is invalid!", buf, 0x16u);
    }
    kdebug_trace();
    int inited = -12909;
    uint64_t v26 = v10;
LABEL_36:
    AppleAVDHEVCDecoderEmitErrorToVT(v26);
    if (!a5) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  theSourceBuffer = v21;
  if (*(_DWORD *)(v10 + 5828) != 6)
  {
    int v109 = 0;
    size_t v24 = dataLength;
    goto LABEL_44;
  }
  FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription((CMSampleBufferRef)a3);
  if (FormatDescription
    && (int v23 = FormatDescription, !CMFormatDescriptionEqual(*(CMFormatDescriptionRef *)(v10 + 24), FormatDescription)))
  {
    FigFormatDescriptionRelease();
    *(void *)(v10 + 24) = FigFormatDescriptionRetain();
    CreateHeaderBuffer_0(v10, v23);
    size_t v24 = dataLength + (*(_DWORD *)(v10 + 5640) & 0xFFFFFF);
    int v109 = 1;
  }
  else
  {
    int v109 = 0;
    size_t v24 = dataLength;
  }
  if (*(_DWORD *)(v10 + 5828) != 6)
  {
LABEL_44:
    uint64_t Decryptor = FigSampleBufferGetDecryptor();
    if (*(_DWORD *)(v10 + 5208) == 1 && !Decryptor)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = 1;
        *(_WORD *)&buf[8] = 2048;
        *(void *)&buf[10] = v10;
        unsigned __int32 v28 = &_os_log_internal;
        int8x8_t v29 = "AppleAVD: AppleAVD_HEVCVideoDecoder: frame# %d, session: %p, decryptor attachment is NULL \n";
        uint32_t v30 = 18;
LABEL_48:
        _os_log_impl(&dword_223977000, v28, OS_LOG_TYPE_DEFAULT, v29, buf, v30);
        goto LABEL_49;
      }
      goto LABEL_49;
    }
    uint64_t v115 = (void *)v24;
    if (!Decryptor || Decryptor == *(void *)(v10 + 5192))
    {
LABEL_75:
      int v47 = *(_DWORD *)(v10 + 5828);
      if (v47 == 4)
      {
        SliceDataForuint64_t Decryptor = GetSliceDataForDecryptor((void *)v10);
        if (SliceDataForDecryptor)
        {
          int inited = SliceDataForDecryptor;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v49 = *(_DWORD *)(v10 + 5208);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v49;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = inited;
            uint64_t v37 = &_os_log_internal;
            uint64_t v38 = "AppleAVD: AppleAVD_HEVCVideoDecoder: frame# %d, Could not get slice data for decryptor, err %d\n";
            goto LABEL_79;
          }
          goto LABEL_80;
        }
        uint64_t v50 = *(void *)(v10 + 7992);
        if ((unint64_t)(v50 - 257) <= 0xFFFFFFFFFFFFFEFFLL)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v50;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 256;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder ERROR: BAD encryptedSliceCount %zd MAX_SLICES %d", buf, 0x12u);
          }
          uint64_t v31 = v10;
          goto LABEL_50;
        }
        int v47 = *(_DWORD *)(v10 + 5828);
      }
      if (v47 != 5) {
        goto LABEL_95;
      }
      CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)a3, 0);
      if (!SampleAttachmentsArray) {
        goto LABEL_95;
      }
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
      if (!ValueAtIndex) {
        goto LABEL_95;
      }
      CFDictionaryRef v53 = ValueAtIndex;
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x263F00FC0]);
      if (!Value)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v83 = *(_DWORD *)(v10 + 5208);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v83;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = 312;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder: frame# %d, cryptorIV is NULL, err %d\n", buf, 0xEu);
        }
        AppleAVDHEVCDecoderEmitErrorToVT(v10);
        int inited = 312;
        goto LABEL_38;
      }
      CFDataRef v55 = Value;
      unsigned int Length = CFDataGetLength(Value);
      if (Length >= 0x11)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AppleAVDWrapperHEVCDecoderDecodeFrame";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = Length;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s oversized iv %d", buf, 0x12u);
        }
        AppleAVDHEVCDecoderEmitErrorToVT(v10);
        int inited = 313;
        goto LABEL_38;
      }
      v178.length = CFDataGetLength(v55);
      v178.locatiouint64_t n = 0;
      CFDataGetBytes(v55, v178, (UInt8 *)(v10 + 5916));
      CFNumberRef v87 = (const __CFNumber *)CFDictionaryGetValue(v53, (const void *)*MEMORY[0x263F00FB8]);
      CFNumberGetValue(v87, kCFNumberSInt32Type, &valuePtr);
      CFDataRef v88 = (const __CFData *)CFDictionaryGetValue(v53, (const void *)*MEMORY[0x263F00FC8]);
      if (v88)
      {
        CFDataRef v89 = v88;
        BytePtr = CFDataGetBytePtr(v88);
        unint64_t v91 = CFDataGetLength(v89);
        unint64_t v92 = v91 >> 3;
        if (v91 < 0x808)
        {
          *(void *)(v10 + 7992) = v92;
          if (BytePtr)
          {
            if (v91 >= 8)
            {
              int v94 = *(_DWORD *)BytePtr;
              *(_DWORD *)(v10 + 5944) = *(_DWORD *)BytePtr;
              *(_DWORD *)(v10 + 6968) = *((_DWORD *)BytePtr + 1);
              if (v91 >= 0x10)
              {
                uint64_t v95 = 2;
                if (v92 > 2) {
                  uint64_t v95 = v91 >> 3;
                }
                uint64_t v96 = v95 - 1;
                uint64_t v97 = BytePtr + 8;
                uint64_t v98 = (_DWORD *)(v10 + 5948);
                do
                {
                  v94 += *v97 + *(v97 - 1);
                  *uint64_t v98 = v94;
                  v98[256] = v97[1];
                  v97 += 2;
                  ++v98;
                  --v96;
                }
                while (v96);
              }
            }
          }
          goto LABEL_96;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AppleAVDWrapperHEVCDecoderDecodeFrame";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v92;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() ERROR: crauxNumEntries %ld out of range", buf, 0x16u);
        }
        kdebug_trace();
        goto LABEL_49;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = "AppleAVDWrapperHEVCDecoderDecodeFrame";
        unsigned __int32 v28 = &_os_log_internal;
        int8x8_t v29 = "AppleAVD: %s() ERROR: CryptorSubsampleAuxiliaryData is NULL";
        uint32_t v30 = 12;
        goto LABEL_48;
      }
LABEL_49:
      uint64_t v31 = v10;
LABEL_50:
      AppleAVDHEVCDecoderEmitErrorToVT(v31);
      goto LABEL_26;
    }
    LODWORD(rhs.value) = *(_DWORD *)(v10 + 5828);
    lhs.int value = 0;
    uint64_t v32 = Decryptor;
    int cf = FigCPECryptorGetNativeSession(Decryptor, (uint64_t)&lhs);
    if (cf)
    {
      int inited = cf;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v33 = *(_DWORD *)(v10 + 5208);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v33;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = cf;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder: frame# %d, FigCPECryptorGetNativeSession returned err %d \n", buf, 0xEu);
      }
      uint64_t v34 = v10;
      goto LABEL_81;
    }
    CFTypeRef cfa = (CFTypeRef)v32;
    int v35 = AppleAVDSetParameter(*(void *)(v10 + 5184), 25, (unsigned __int8 *)&rhs);
    if (v35)
    {
      int inited = v35;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v36 = *(_DWORD *)(v10 + 5208);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v36;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = inited;
        uint64_t v37 = &_os_log_internal;
        uint64_t v38 = "AppleAVD: AppleAVD_HEVCVideoDecoder: frame# %d, Could not set kAppleAVDSetCryptScheme, err %d\n";
LABEL_79:
        _os_log_impl(&dword_223977000, v37, OS_LOG_TYPE_DEFAULT, v38, buf, 0xEu);
        goto LABEL_80;
      }
      goto LABEL_80;
    }
    int v39 = AppleAVDSetParameter(*(void *)(v10 + 5184), 26, (unsigned __int8 *)lhs.value);
    if (v39)
    {
      int inited = v39;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v40 = *(_DWORD *)(v10 + 5208);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v40;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = inited;
        uint64_t v37 = &_os_log_internal;
        uint64_t v38 = "AppleAVD: AppleAVD_HEVCVideoDecoder: frame# %d, Could not set kAppleAVDSetCryptRef, err %d\n";
        goto LABEL_79;
      }
LABEL_80:
      uint64_t v34 = v10;
LABEL_81:
      AppleAVDHEVCDecoderEmitErrorToVT(v34);
LABEL_38:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AppleAVDWrapperHEVCDecoderDecodeFrame";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = inited;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
      }
      goto LABEL_26;
    }
    uint64_t v107 = *(void *)(v10 + 8000);
    int v125 = 0;
    int ExternalProtectionMethods = FigCPECryptorGetExternalProtectionMethods(v32, (uint64_t)&v125);
    if (ExternalProtectionMethods)
    {
      int inited = ExternalProtectionMethods;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v42 = *(_DWORD *)(v10 + 5208);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v42;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = inited;
        uint64_t v37 = &_os_log_internal;
        uint64_t v38 = "AppleAVD: AppleAVD_HEVCVideoDecoder: frame# %d, FigCPECryptorGetExternalProtectionMethods, err %d\n";
        goto LABEL_79;
      }
      goto LABEL_80;
    }
    uint64_t v43 = 3;
    if ((v125 & 1) == 0) {
      uint64_t v43 = 1;
    }
    uint64_t v44 = 7;
    if ((v125 & 2) == 0) {
      uint64_t v44 = v43;
    }
    uint64_t v45 = *(void *)(v10 + 8000);
    unint64_t v105 = v44;
    if (v45 == v44)
    {
LABEL_71:
      CFTypeRef v46 = *(CFTypeRef *)(v10 + 5192);
      if (cfa != v46)
      {
        if (v46) {
          CFRelease(v46);
        }
        *(void *)(v10 + 5192) = cfa;
        CFRetain(cfa);
      }
      goto LABEL_75;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v99 = *(_DWORD *)(v10 + 5208);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v99;
      *(_WORD *)&buf[8] = 2048;
      *(void *)&buf[10] = v45;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v105;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder: frame# %d, new CVPixelBufferPool created protectionOptions %llu %llu \n", buf, 0x1Cu);
    }
    *(void *)(v10 + 8000) = v105;
    if (*(_DWORD *)(v10 + 8008))
    {
      int inited = InitPixelBufferCompressionSupported(*(void *)v10, *(void *)(v10 + 5184), *(_DWORD *)(v10 + 5220), *(_DWORD *)(v10 + 5212), *(_DWORD *)(v10 + 5216), *(_DWORD *)(v10 + 5224), *(_DWORD *)(v10 + 5228), *(unsigned __int8 *)(v10 + 5745), *(unsigned __int8 *)(v10 + 5744), *(unsigned __int8 *)(v10 + 5801), v105, 5, 4, 2, 2, (CFTypeRef *)(v10 + 40), (CFTypeRef *)(v10 + 56), *(unsigned char *)(v10 + 16832), *(_DWORD *)(v10 + 16836),
                 *(unsigned char *)(v10 + 16850));
      if (inited) {
        goto LABEL_228;
      }
      int v100 = GetNoSecondWriteFlag(*(__CVPixelBufferPool **)(v10 + 40), (BOOL *)(v10 + 16849));
    }
    else
    {
      int inited = InitPixelBufferCompressionNotSupported_0(v10);
      if (inited) {
        goto LABEL_228;
      }
      int v100 = GetNoSecondWriteFlagDisp(*(void *)v10, (BOOL *)(v10 + 16849));
    }
    int inited = v100;
    if (!v100) {
      goto LABEL_71;
    }
LABEL_228:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v101 = *(_DWORD *)(v10 + 5208);
      int v102 = *(_DWORD *)(v10 + 8008);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v101;
      *(_WORD *)&buf[8] = 2048;
      *(void *)&buf[10] = v107;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v105;
      __int16 v173 = 1024;
      int v174 = v102;
      __int16 v175 = 1024;
      int v176 = inited;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder: frame# %d, new CVPixelBufferPool created protectionOptions %llu %llu - ioSurfaceType: %d, err: %d\n", buf, 0x28u);
    }
    AppleAVDHEVCDecoderEmitErrorToVT(v10);
    *(void *)(v10 + 8000) = v107;
    goto LABEL_38;
  }
  uint64_t v115 = (void *)v24;
LABEL_95:
  unsigned int Length = 0;
LABEL_96:
  CMTime v124 = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
  CMTime v123 = v124;
  int8x8_t v56 = (_OWORD *)(v10 + 5880);
  CMSampleBufferGetOutputDuration((CMTime *)buf, (CMSampleBufferRef)a3);
  *(_OWORD *)(v10 + 5880) = *(_OWORD *)buf;
  *(void *)(v10 + 5896) = *(void *)&buf[16];
  if ((*(_DWORD *)(v10 + 5892) & 0x1D) == 1)
  {
    if ((*(_DWORD *)(v10 + 5844) & 0x1D) == 1)
    {
      CMSampleBufferGetDecodeTimeStamp(&v124, (CMSampleBufferRef)a3);
      CMTime lhs = v124;
      CMTime rhs = *(CMTime *)(v10 + 5832);
      CMTimeSubtract((CMTime *)buf, &lhs, &rhs);
      *int8x8_t v56 = *(_OWORD *)buf;
      *(void *)(v10 + 5896) = *(void *)&buf[16];
      *(CMTime *)(v10 + 5832) = v124;
    }
    else
    {
      CMSampleBufferGetPresentationTimeStamp(&v123, (CMSampleBufferRef)a3);
      CMTime lhs = v123;
      CMTime rhs = *(CMTime *)(v10 + 5856);
      CMTimeSubtract((CMTime *)buf, &lhs, &rhs);
      *int8x8_t v56 = *(_OWORD *)buf;
      *(void *)(v10 + 5896) = *(void *)&buf[16];
      *(CMTime *)(v10 + 5856) = v123;
    }
    uint64_t v59 = *(void *)(v10 + 5880);
    if (v59 < 1) {
      double v57 = 0.0;
    }
    else {
      double v57 = (double)*(int *)(v10 + 5888) / (double)v59;
    }
    int v58 = v115;
    *(double *)(v10 + 5904) = v57;
  }
  else
  {
    double v57 = *(double *)(v10 + 5904);
    int v58 = v115;
  }
  if (((int)(v57 + 0.5) - 1025) >= 0xFFFFFC00) {
    int v60 = (int)(v57 + 0.5);
  }
  else {
    int v60 = 30;
  }
  uint64_t v61 = *(unsigned int *)(v10 + 5912);
  if (v60 != v61) {
    int v60 = filterSmallDeltaFPS(v61, v60);
  }
  int v106 = v60;
  *(_DWORD *)(v10 + 5912) = v60;
  *(_DWORD *)(v10 + 8148) = 1;
  if (*(_DWORD *)(v10 + 8156) == 1)
  {
    if (!*(unsigned char *)(v10 + 8145) && !*(_DWORD *)(v10 + 8160))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AppleAVDWrapperHEVCDecoderDecodeFrame";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 0;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s - lhvc is not received %d for mvhevc stream", buf, 0x12u);
      }
      uint64_t v19 = v10;
      goto LABEL_24;
    }
    if (*(_DWORD *)(v10 + 5208) == 1)
    {
      AppleAVDHEVCCheckEnableMultiViewDecode(v10);
      int v62 = AppleAVDSetParameter(*(void *)(v10 + 5184), 5, (unsigned __int8 *)(v10 + 8156));
      if (v62)
      {
        int inited = v62;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(lhs.value) = 0;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder ERROR: Could not get bitstream buffer", (uint8_t *)&lhs, 2u);
        }
        AppleAVDHEVCDecoderEmitErrorToVT(v10);
        if (!a5) {
          goto LABEL_126;
        }
        goto LABEL_125;
      }
    }
    if (*(_DWORD *)(v10 + 8152) >= 2u)
    {
      if (*(_DWORD *)(v10 + 8156))
      {
        calcLayersToDecodeFromDisplayLayersList(v10);
        if (getMultiViewLayerOffsetInfo(v10, theSourceBuffer, dataLength, (uint64_t)buf))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(lhs.value) = 0;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder ERROR: Could not get getMultiViewLayerOffsetInfo", (uint8_t *)&lhs, 2u);
          }
          AppleAVDHEVCDecoderEmitErrorToVT(v10);
          int inited = 0;
          if (!a5) {
            goto LABEL_126;
          }
LABEL_125:
          *a5 = 2;
          goto LABEL_126;
        }
      }
    }
    int v58 = v115;
  }
  v119[1] = v58;
  uint64_t v120 = 0;
  v119[0] = 0;
  LODWORD(v120) = *(_DWORD *)(v10 + 5208);
  int v63 = AppleAVDGetParameter(*(void *)(v10 + 5184), 8, (uint64_t)v119);
  if (v63)
  {
    int inited = v63;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder ERROR: Could not get bitstream buffer", buf, 2u);
    }
    uint64_t v26 = v10;
    goto LABEL_36;
  }
  signed int v64 = (unsigned __int8 *)v119[0];
  cfb = (unsigned __int8 *)v119[0];
  if (v109)
  {
    memcpy(v119[0], *(const void **)(v10 + 5632), *(_DWORD *)(v10 + 5640) & 0xFFFFFF);
    signed int v64 = &cfb[*(_DWORD *)(v10 + 5640) & 0xFFFFFF];
  }
  if (CMBlockBufferCopyDataBytes(theSourceBuffer, 0, dataLength, v64))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING, fail to copy data bytes, nothing to decode", buf, 2u);
    }
    kdebug_trace();
    int inited = -12911;
    AppleAVDHEVCDecoderEmitErrorToVT(v10);
    AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 5184), dataLength, cfb);
    if (!a5) {
      goto LABEL_38;
    }
LABEL_37:
    *a5 = 2;
    goto LABEL_38;
  }
  int v103 = *(_DWORD *)(v10 + 5208);
  int v65 = (OpaqueCMBlockBuffer *)*(unsigned __int8 *)(v10 + 8080);
  memset(v117, 0, sizeof(v117));
  __int16 v118 = 0;
  LOBYTE(v117[0]) = (_BYTE)v65;
  if (!v65)
  {
    AppleAVDSetParameter(*(void *)(v10 + 5184), 40, (unsigned __int8 *)v117);
    long long v128 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v140 = 0u;
    long long v141 = 0u;
    long long v142 = 0u;
    long long v143 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v159 = 0u;
    goto LABEL_26;
  }
  for (uint64_t i = 0; i != v65; uint64_t i = (OpaqueCMBlockBuffer *)((char *)i + 1))
    *((_WORD *)v117 + (void)i + 1) = *((char *)i + v10 + 8081);
  AppleAVDSetParameter(*(void *)(v10 + 5184), 40, (unsigned __int8 *)v117);
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  long long v141 = 0u;
  long long v142 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v147 = 0u;
  CMBlockBufferRef theSourceBuffera = v65;
  uint64_t v67 = (v65 - 1);
  long long v148 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  long long v151 = 0u;
  uint64_t v68 = 8081;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v159 = 0u;
  int v69 = *(_DWORD *)(v10 + 5208);
  while (1)
  {
    bzero(&v129, 0x878uLL);
    *(void *)&long long v128 = cfb;
    *((void *)&v128 + 1) = v115;
    LODWORD(v129) = v69;
    int v165 = *(char *)(v10 + v68);
    BOOL v70 = !*(_DWORD *)(v10 + 8156) || v67 == 0;
    BOOL v71 = v70;
    BOOL v166 = v71;
    int v167 = v103;
    uint64_t v168 = *(void *)v10;
    uint64_t v169 = a2;
    if (*(_DWORD *)(v10 + 8016))
    {
      if ((a4 & 4) != 0) {
        goto LABEL_157;
      }
      int v72 = 1;
    }
    else
    {
      int v72 = *(_DWORD *)(v10 + 8012) ? 2 : 1;
    }
    DWORD1(v129) = v72;
LABEL_157:
    HIDWORD(v129) = 0;
    *(void *)&long long v130 = __PAIR64__(Length, valuePtr);
    int v161 = v106;
    *((void *)&v130 + 1) = *(void *)(v10 + 5916);
    uint64_t v164 = 0;
    int v170 = 0;
    char v163 = 0;
    uint64_t v162 = 0;
    char v171 = *(unsigned char *)(v10 + 16849);
    uint64_t v104 = v68;
    if ((*(_DWORD *)(v10 + 5828) & 0xFFFFFFFE) == 4)
    {
      uint64_t v73 = *(void *)(v10 + 7992);
      if (v73 >= 257)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AppleAVDWrapperHEVCDecoderDecodeFrame";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v73;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 256;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): encryptedSliceCount (%ld) exceeds MAX_SLICES (%d)\n", buf, 0x1Cu);
        }
        kdebug_trace();
        AppleAVDHEVCDecoderEmitErrorToVT(v10);
        AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 5184), dataLength, cfb);
        if (a5) {
          *a5 = 2;
        }
        goto LABEL_209;
      }
      if (HIDWORD(v73) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AppleAVDWrapperHEVCDecoderDecodeFrame";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3687;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        uint64_t v73 = *(void *)(v10 + 7992);
      }
      int v160 = v73;
      __memcpy_chk();
      __memcpy_chk();
    }
    else
    {
      int v160 = 0;
    }
    if (a4)
    {
      BYTE8(v129) = 0;
      int v74 = *a5 | 1;
      *a5 = v74;
    }
    else
    {
      BYTE8(v129) = 1;
      int v74 = *a5;
    }
    uint64_t v75 = *(unsigned __int8 *)(v10 + 5208);
    *(void *)(v10 + 8 * v75 + 64) = a2;
    *(_DWORD *)(v10 + 4 * v75 + 4160) = v74;
    int v76 = *(FILE **)(v10 + 8032);
    size_t v77 = HIDWORD(dataLength);
    if (v76)
    {
      if (v77 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AppleAVDWrapperHEVCDecoderDecodeFrame";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3718;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      if (WriteNAL(v76, (uint64_t)cfb, dataLength))
      {
        unsigned __int32 v78 = *(FILE **)(v10 + 8040);
        if (v78) {
          fprintf(v78, "Error writing decEncryptedOutput for frame %d \n", *(_DWORD *)(v10 + 5208));
        }
      }
    }
    unsigned __int32 v79 = *(FILE **)(v10 + 8048);
    if (v79) {
      fwrite(cfb, 1uLL, dataLength, v79);
    }
    if (AppleAVDDecodeFrame(*(void *)(v10 + 5184), (uint64_t)&v128)) {
      break;
    }
    unsigned __int32 v80 = *(FILE **)(v10 + 8024);
    if (v80)
    {
      if (v77 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AppleAVDWrapperHEVCDecoderDecodeFrame";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3768;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      if (WriteNAL(v80, (uint64_t)cfb, dataLength))
      {
        unsigned int v81 = *(FILE **)(v10 + 8040);
        if (v81) {
          fprintf(v81, "Error writing decOutput for frame %d \n", *(_DWORD *)(v10 + 5208));
        }
      }
    }
    unsigned int v82 = *(FILE **)(v10 + 8056);
    if (v82) {
      fwrite(cfb, 1uLL, dataLength, v82);
    }
    int v69 = *(_DWORD *)(v10 + 5208) + 1;
    *(_DWORD *)(v10 + 5208) = v69;
    --v67;
    uint64_t v68 = v104 + 1;
    CMBlockBufferRef theSourceBuffera = (CMBlockBufferRef)((char *)theSourceBuffera - 1);
    if (!theSourceBuffera) {
      goto LABEL_26;
    }
  }
  kdebug_trace();
  AppleAVDHEVCDecoderEmitErrorToVT(v10);
  AppleAVDReleaseCurrentInputBuffer(*(void *)(v10 + 5184), dataLength, cfb);
  *a5 = 2;
  int v84 = HIDWORD(v129);
  BOOL v85 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (!v84)
  {
    if (v85)
    {
      int v93 = *(_DWORD *)(v10 + 5208);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v93;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder_DecodeFrame ERROR: framenum %d kVTVideoDecoderMalfunctionErr", buf, 8u);
    }
LABEL_209:
    int inited = -12911;
    goto LABEL_38;
  }
  int inited = v84;
  if (!v85) {
    goto LABEL_38;
  }
  int v86 = *(_DWORD *)(v10 + 5208);
  *(_DWORD *)buf = 67109376;
  *(_DWORD *)&uint8_t buf[4] = v86;
  *(_WORD *)&buf[8] = 1024;
  *(_DWORD *)&buf[10] = v84;
  _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder_DecodeFrame ERROR: framenum %d decryptError %x", buf, 0xEu);
  int inited = HIDWORD(v129);
LABEL_126:
  if (inited) {
    goto LABEL_38;
  }
LABEL_26:
  pthread_mutex_unlock((pthread_mutex_t *)(v10 + 5648));
  kdebug_trace();
  return 0;
}

uint64_t AppleAVDSetParameter(uint64_t a1, int a2, unsigned __int8 *a3)
{
  if (!a1) {
    return 312;
  }
  uint64_t result = 3758097095;
  switch(a2)
  {
    case 1:
      uint64_t result = 0;
      *(void *)(a1 + 16) = *(void *)a3;
      return result;
    case 2:
      uint64_t result = 0;
      *(void *)(a1 + 24) = a3;
      return result;
    case 3:
      uint64_t result = 0;
      *(void *)(a1 + 40) = a3;
      return result;
    case 4:
      uint64_t result = 0;
      *(void *)(a1 + 32) = a3;
      return result;
    case 5:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 52) = *(_DWORD *)a3;
      return result;
    case 7:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)a3;
      return result;
    case 10:
      uint64_t result = 0;
      *(void *)(a1 + 240) = a3;
      return result;
    case 12:
      uint64_t result = 0;
      *(void *)(a1 + 760) = a3;
      return result;
    case 14:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 896) = *(_DWORD *)a3;
      return result;
    case 15:
      uint64_t result = 0;
      *(void *)(a1 + 752) = a3;
      return result;
    case 16:
      uint64_t result = 0;
      *(void *)(a1 + 768) = a3;
      return result;
    case 17:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 780) = *(_DWORD *)a3;
      return result;
    case 18:
      int v5 = *(_DWORD *)a3;
      if (*(_DWORD *)a3 == 42 || v5 == 20 || v5 == 1)
      {
        uint64_t result = 0;
        *(unsigned char *)(a1 + 1008) = v5;
      }
      else
      {
        uint64_t result = 0;
        *(unsigned char *)(a1 + 1008) = 0;
      }
      return result;
    case 20:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 3664) = *(_DWORD *)a3;
      return result;
    case 21:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 3668) = *(_DWORD *)a3;
      return result;
    case 22:
      uint64_t result = 0;
      *(unsigned char *)(a1 + 3612) = *a3;
      return result;
    case 23:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1288) = *(_DWORD *)a3;
      return result;
    case 24:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1292) = *(_DWORD *)a3;
      return result;
    case 25:
      int v6 = *(_DWORD *)a3;
      *(_DWORD *)(a1 + 1496) = *(_DWORD *)a3;
      if (v6 == 6) {
        goto LABEL_86;
      }
      uint64_t result = 0;
      *(unsigned char *)(a1 + 1492) = 1;
      return result;
    case 26:
      *(void *)(a1 + 1504) = a3;
      AppleAVDSetCryptSession(a1);
      goto LABEL_86;
    case 27:
      uint64_t result = 0;
      *(void *)(a1 + 1512) = a3;
      return result;
    case 29:
      uint64_t result = 0;
      *(void *)(a1 + 3648) = a3;
      *(unsigned char *)(a1 + 3628) = 1;
      return result;
    case 30:
      uint64_t result = 0;
      *(void *)(a1 + 3656) = a3;
      return result;
    case 31:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1016) = *(_DWORD *)a3;
      return result;
    case 32:
      if (*(_DWORD *)a3 > *(_DWORD *)(a1 + 8) || *((_DWORD *)a3 + 1) > *(_DWORD *)(a1 + 12)) {
        return 308;
      }
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1020) = *(_DWORD *)a3;
      *(_DWORD *)(a1 + 1024) = *((_DWORD *)a3 + 1);
      return result;
    case 33:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1036) = *(_DWORD *)a3;
      return result;
    case 34:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 3604) = *(_DWORD *)a3;
      *(_DWORD *)(a1 + 3608) = *((_DWORD *)a3 + 1);
      return result;
    case 35:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 3616) = *(_DWORD *)a3;
      return result;
    case 36:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1284) = *(_DWORD *)a3;
      return result;
    case 37:
      uint64_t result = 0;
      *(unsigned char *)(a1 + 3885) = *a3;
      return result;
    case 38:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 3888) = *(_DWORD *)a3;
      return result;
    case 39:
      uint64_t result = 0;
      *(void *)(a1 + 3748) = *(void *)a3;
      return result;
    case 40:
      uint64_t result = 0;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)a3;
      long long v15 = *((_OWORD *)a3 + 1);
      long long v16 = *((_OWORD *)a3 + 2);
      long long v17 = *((_OWORD *)a3 + 4);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)a3 + 3);
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 80) = v15;
      *(_OWORD *)(a1 + 96) = v16;
      long long v18 = *((_OWORD *)a3 + 5);
      long long v19 = *((_OWORD *)a3 + 6);
      long long v20 = *((_OWORD *)a3 + 7);
      *(_WORD *)(a1 + 192) = *((_WORD *)a3 + 64);
      *(_OWORD *)(a1 + 160) = v19;
      *(_OWORD *)(a1 + 176) = v20;
      *(_OWORD *)(a1 + 144) = v18;
      return result;
    case 41:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1048) = *(_DWORD *)a3;
      return result;
    case 42:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1052) = *(_DWORD *)a3;
      return result;
    case 43:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1056) = *(_DWORD *)a3;
      return result;
    case 44:
      uint64_t v7 = 0;
      uint64_t v8 = a1 + 1060;
      do
      {
        uint64_t result = 0;
        *(unsigned char *)(v8 + v7) = a3[v7];
        ++v7;
      }
      while (v7 != 96);
      return result;
    case 45:
      uint64_t v21 = 0;
      uint64_t v22 = a1 + 1156;
      do
      {
        uint64_t result = 0;
        *(unsigned char *)(v22 + v21) = a3[v21];
        ++v21;
      }
      while (v21 != 64);
      return result;
    case 46:
      uint64_t v9 = 0;
      uint64_t v10 = a1 + 1220;
      do
      {
        uint64_t result = 0;
        *(unsigned char *)(v10 + v9) = a3[v9];
        ++v9;
      }
      while (v9 != 48);
      return result;
    case 47:
      uint64_t v11 = 0;
      uint64_t v12 = a1 + 1268;
      do
      {
        uint64_t result = 0;
        *(unsigned char *)(v12 + v11) = a3[v11];
        ++v11;
      }
      while (v11 != 16);
      return result;
    case 48:
      uint64_t result = 0;
      *(unsigned char *)(a1 + 3757) = *a3;
      return result;
    case 49:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 232) = *(_DWORD *)a3;
      return result;
    case 50:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1012) = *(_DWORD *)a3;
      return result;
    case 52:
      uint64_t result = 0;
      *(unsigned char *)(a1 + 3758) = *a3;
      return result;
    case 53:
      unsigned int v13 = *(_DWORD *)a3;
      *(_DWORD *)(a1 + 3760) = *(_DWORD *)a3;
      if (v13 >= 0x74)
      {
        uint64_t result = 0;
        int v14 = 115;
LABEL_85:
        *(_DWORD *)(a1 + 3760) = v14;
        return result;
      }
      if (v13 <= 0x59)
      {
        uint64_t result = 0;
        int v14 = 90;
        goto LABEL_85;
      }
LABEL_86:
      uint64_t result = 0;
      break;
    case 54:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1040) = *(_DWORD *)a3;
      return result;
    case 55:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1044) = *(_DWORD *)a3;
      return result;
    case 56:
      uint64_t result = 0;
      unsigned int v23 = *a3;
      goto LABEL_88;
    case 57:
      int v24 = *(_DWORD *)(a1 + 3772);
      uint64_t result = 0;
      if (*a3) {
        unsigned int v23 = v24 | 8;
      }
      else {
        unsigned int v23 = v24 & 0xFFFFFFF7;
      }
LABEL_88:
      *(_DWORD *)(a1 + 3772) = v23;
      return result;
    case 58:
      uint64_t result = 0;
      *(void *)(a1 + 3784) = a3;
      return result;
    case 59:
      uint64_t result = 0;
      *(unsigned char *)(a1 + 3824) = *a3;
      return result;
    case 60:
      uint64_t result = 0;
      *(void *)(a1 + 3832) = *(void *)a3;
      return result;
    case 61:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 3840) = *(_DWORD *)a3;
      return result;
    case 63:
      uint64_t result = 0;
      *(void *)(a1 + 3816) = a3;
      return result;
    case 64:
      uint64_t result = 0;
      *(void *)(a1 + 3800) = a3;
      return result;
    case 65:
      uint64_t result = 0;
      *(unsigned char *)(a1 + 3864) = *a3;
      return result;
    case 66:
      uint64_t result = 0;
      *(void *)(a1 + 3872) = *(void *)a3;
      return result;
    case 67:
      uint64_t result = 0;
      *(void *)(a1 + 3896) = a3;
      return result;
    case 68:
      uint64_t result = 0;
      *(void *)(a1 + 3904) = a3;
      return result;
    case 70:
      uint64_t result = 0;
      *(unsigned char *)(a1 + 3844) = *a3;
      return result;
    case 71:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 3920) = *(_DWORD *)a3;
      return result;
    case 72:
      uint64_t result = 0;
      *(unsigned char *)(a1 + 880) = *a3;
      return result;
    default:
      return result;
  }
  return result;
}

uint64_t AppleAVDInitializeDecoder(uint64_t a1, unsigned int *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint32x2_t *)(a1 + 996);
  uint64_t v5 = *a2;
  unsigned int v6 = a2[1];
  unsigned int v7 = a2[2];
  unsigned int v8 = (v7 + 15) & 0xFFFFFFF0;
  if (v5 == 4) {
    unsigned int v8 = a2[2];
  }
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 228) = v5;
  *(unsigned char *)(a1 + 1456) = 0;
  *(unsigned char *)(a1 + 880) = 0;
  *(void *)(a1 + 3764) = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 3884) = *((unsigned char *)a2 + 56);
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  *(void *)(a1 + 3808) = Mutable;
  if (!Mutable)
  {
    uint64_t InputBuffer = 3758097085;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return InputBuffer;
    }
    *(_DWORD *)buf = 136315138;
    long long v19 = "AppleAVDInitializeDecoder";
    uint64_t v12 = &_os_log_internal;
    unsigned int v13 = "AppleAVD: %s(): ERROR: Create layersErrorStatus Failed";
LABEL_9:
    _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, v13, buf, 0xCu);
    return InputBuffer;
  }
  uint64_t InputBuffer = CreateInputBuffer(a1, (uint64_t)a2);
  if (InputBuffer) {
    return InputBuffer;
  }
  uint64_t v11 = AppleAVDCreateDecodeDeviceInternal(a1, v5, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(void *)(a1 + 864), a2[6], a2[8], a2[13]);
  if (v11)
  {
    uint64_t InputBuffer = v11;
    printf("%s(): create device failed error: %d \n", "AppleAVDInitializeDecoder", v11);
    DeleteInputRingBuffer(a1);
    return InputBuffer;
  }
  int v14 = *(_DWORD *)(a1 + 228);
  if (v14 == 4)
  {
    *(uint32x2_t *)(a1 + 8) = vmax_u32(*v4, *(uint32x2_t *)(a1 + 8));
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 1008) != 1) {
    goto LABEL_23;
  }
  if (v14 != 2 || *(_DWORD *)(a1 + 776) > 0x13u)
  {
LABEL_20:
    if (*(_DWORD *)(a1 + 776) >= 0x14u)
    {
      *(_OWORD *)(a1 + 3696) = 0u;
      uint64_t InputBuffer = AppleAVDAllocateCVPixelBuffer(a1, 0x7Fu);
      if (InputBuffer) {
        return InputBuffer;
      }
      uint64_t InputBuffer = AppleAVDAllocateCVPixelBuffer(a1, 0x7Eu);
      if (InputBuffer) {
        return InputBuffer;
      }
    }
    goto LABEL_23;
  }
  CompressedBitBuffer = CreateCompressedBitBuffer(*(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8), 2);
  *(void *)(a1 + 3680) = CompressedBitBuffer;
  if (!CompressedBitBuffer)
  {
    uint64_t InputBuffer = 3758097085;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return InputBuffer;
    }
    *(_DWORD *)buf = 136315138;
    long long v19 = "AppleAVDInitializeDecoder";
    uint64_t v12 = &_os_log_internal;
    unsigned int v13 = "AppleAVD: %s(): ERROR: Create RVRA HDR buffer Failed";
    goto LABEL_9;
  }
  IOSurfaceSetValue(CompressedBitBuffer, (CFStringRef)*MEMORY[0x263F0EE28], @"AVD video decoder RVRA");
  *(_DWORD *)(a1 + 3676) = IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 3680));
  *(void *)(a1 + 3688) = IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(a1 + 3680));
  uint64_t InputBuffer = AppleAVDMapPixelBuffer(a1, 0x80u, *(unsigned int *)(a1 + 3676), 0);
  if (InputBuffer) {
    return InputBuffer;
  }
LABEL_12:
  if (*(unsigned char *)(a1 + 1008) == 1) {
    goto LABEL_20;
  }
LABEL_23:
  if (*(unsigned char *)(a1 + 3756) && *(_DWORD *)(a1 + 3720))
  {
    size_t v16 = (int)(3 * v6 * v7);
    *(void *)(a1 + 3728) = malloc_type_malloc(v16, 0x44C5EB22uLL);
    *(void *)(a1 + 3736) = malloc_type_malloc(v16, 0xD9188430uLL);
  }
  uint64_t InputBuffer = 0;
  *(_DWORD *)(a1 + 3744) = 0;
  return InputBuffer;
}

uint64_t CreateInputBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v4 = 3 * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 12);
  int v5 = *(_DWORD *)(a1 + 228);
  if (v5 == 2 && *(unsigned char *)(a2 + 48))
  {
    int v6 = *(_DWORD *)(a2 + 4);
    int v7 = *(_DWORD *)(a2 + 8);
    int v9 = v6 + 63;
    BOOL v8 = v6 < -63;
    int v10 = v6 + 126;
    if (!v8) {
      int v10 = v9;
    }
    int v11 = v10 >> 6;
    int v12 = v7 + 63;
    BOOL v8 = v7 < -63;
    int v13 = v7 + 126;
    if (!v8) {
      int v13 = v12;
    }
    int v4 = (61440 * *(_DWORD *)(a2 + 40) + 491520) / 0x18u * v11 * (v13 >> 6);
  }
  int v14 = *(_DWORD *)(a2 + 24);
  long long v15 = *(const void **)(a2 + 16);
  unsigned int v16 = 100000000;
  *(_DWORD *)(a1 + 1464) = 3;
  if (v4 <= 100000000)
  {
    unsigned int v16 = v4;
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 136315906;
    unsigned __int32 v28 = "CreateInputBuffer";
    __int16 v29 = 1024;
    int v30 = v4;
    __int16 v31 = 1024;
    int v32 = 100000000;
    __int16 v33 = 1024;
    int v34 = 100000000;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): inputBufSize: %d > %d, capping to %d!", (uint8_t *)&v27, 0x1Eu);
    int v5 = *(_DWORD *)(a1 + 228);
  }
  int v17 = *(_DWORD *)(a2 + 36);
  if (!v17) {
    int v17 = 0x100000;
  }
  if (v16 > v17) {
    int v17 = v16;
  }
  int v18 = v17;
  if (v17 <= 0) {
    int v18 = --(char)v17;
  }
  if (v18) {
    int v19 = 256 - v18;
  }
  else {
    int v19 = 0;
  }
  int v20 = v19 + v17;
  *(_DWORD *)(a1 + 1296) = v19 + v17;
  *(_DWORD *)(a1 + 1304) = 59392;
  *(_DWORD *)(a1 + 1300) = v19 + v17;
  CompressedBitBuffer = CreateCompressedBitBuffer(v19 + v17 + 59392, v5);
  *(void *)(a1 + 856) = CompressedBitBuffer;
  if (CompressedBitBuffer)
  {
    IOSurfaceSetValue(CompressedBitBuffer, (CFStringRef)*MEMORY[0x263F0EE28], @"AVD video decoder bitstream");
    *(_DWORD *)(a1 + 848) = IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 856));
    uint64_t BaseAddress = IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(a1 + 856));
    *(void *)(a1 + 864) = BaseAddress;
    if (BaseAddress)
    {
      size_t AllocSize = IOSurfaceGetAllocSize(*(IOSurfaceRef *)(a1 + 856));
      LODWORD(v24) = AllocSize;
      *(void *)(a1 + 872) = AllocSize;
      if (AllocSize >= v20)
      {
        if (AllocSize <= (*(void *)&v14 & 0xFFFFFFuLL))
        {
          if (HIDWORD(AllocSize) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v27 = 136315394;
            unsigned __int32 v28 = "CreateInputBuffer";
            __int16 v29 = 1024;
            int v30 = 1795;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v27, 0x12u);
            uint64_t v24 = *(void *)(a1 + 872);
          }
          *(_DWORD *)(a2 + 24) = v24;
          int v14 = v24;
        }
        if (v15) {
          memcpy(*(void **)(a1 + 864), v15, v14 & 0xFFFFFF);
        }
        *(_DWORD *)(a1 + 1468) = v14 >> 24;
        operator new();
      }
    }
    return 4294954387;
  }
  else
  {
    uint64_t v25 = 3758097085;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 136315138;
      unsigned __int32 v28 = "CreateInputBuffer";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR: CreateCompressedBitBuffer Failed", (uint8_t *)&v27, 0xCu);
    }
  }
  return v25;
}

void sub_22399C2CC(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v1, 0x1010C4028D36069);
  _Unwind_Resume(a1);
}

void RingBuffer::RingBuffer(RingBuffer *this)
{
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_DWORD *)((char *)this + 159) = 0;
}

uint64_t RingBuffer::initRingBuffer(pthread_mutex_t *this, char *a2, uint64_t a3, char a4)
{
  *(void *)&this[1].__opaque[40] = a2;
  *(void *)&this[1].__opaque[48] = &a2[a3];
  this[2].__sig = (uint64_t)a2;
  *(void *)this[2].__opaque = a2;
  *(void *)&this[2].__opaque[16] = a3;
  *(_WORD *)&this[2].__opaque[24] = 0;
  this[2].__opaque[26] = a4;
  pthread_mutex_unlock(this);
  if (a2) {
    return 0;
  }
  else {
    return 4294967293;
  }
}

__IOSurface *CreateCompressedBitBuffer(int a1, int a2)
{
  kern_return_t v5;
  __IOSurface *v6;
  CFDictionaryRef v7;
  IOSurfaceRef v8;
  kern_return_t CacheMode;
  NSObject *v10;
  const char *v11;
  uint32_t v12;
  kern_return_t v13;
  unsigned int valuePtr;
  int v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  kern_return_t v20;
  void *values;
  CFTypeRef cf;
  CFTypeRef v23;
  uint64_t v24;
  void *keys;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  __int16 v29 = *MEMORY[0x263EF8340];
  int v27 = 0;
  unsigned __int32 v28 = 0;
  int cf = 0;
  unsigned int v23 = 0;
  uint64_t v24 = 0;
  unsigned int valuePtr = (a1 + 4095) & 0xFFFFF000;
  unsigned int v16 = 0;
  keys = (void *)*MEMORY[0x263F0ED30];
  uint64_t v26 = 0;
  values = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!values)
  {
    CFDictionaryRef v4 = 0;
    int v5 = 0;
    int v6 = 0;
    goto LABEL_27;
  }
  uint64_t v26 = *MEMORY[0x263F0EE48];
  if (a2 == 2)
  {
    int v3 = 1752589105;
  }
  else if (a2 == 1)
  {
    int v3 = 1635148593;
  }
  else if (a2)
  {
    int v3 = 1748121140;
  }
  else
  {
    int v3 = 1836070006;
  }
  unsigned int v16 = v3;
  int cf = CFNumberCreate(0, kCFNumberIntType, &v16);
  if (!cf || (v27 = *MEMORY[0x263F0ED58], unsigned int v16 = 1024, (v23 = CFNumberCreate(0, kCFNumberIntType, &v16)) == 0))
  {
    int v6 = 0;
    int v5 = 0;
    CFDictionaryRef v4 = 0;
    goto LABEL_25;
  }
  int v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)&keys, (const void **)&values, 3, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryRef v4 = v7;
  if (!v7) {
    goto LABEL_21;
  }
  BOOL v8 = IOSurfaceCreate(v7);
  if (!v8)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_VideoDecoder - ERROR IOSurfaceCreate failed\n", buf, 2u);
    }
LABEL_21:
    int v6 = 0;
    int v5 = 0;
    goto LABEL_25;
  }
  int v6 = v8;
  CacheMode = IOSurfaceGetCacheMode();
  if (CacheMode != v16)
  {
    int v13 = CacheMode;
    int v5 = -536870212;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    *(_DWORD *)buf = 136315394;
    int v18 = "CreateCompressedBitBuffer";
    int v19 = 1024;
    int v20 = v13;
    int v10 = &_os_log_internal;
    int v11 = "AppleAVD: ERROR: %s: Incorrect Cache Mode=%d\n";
    int v12 = 18;
    goto LABEL_24;
  }
  int v5 = IOSurfaceLock(v6, 0, 0);
  if (v5 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    int v10 = &_os_log_internal;
    int v11 = "AppleAVD: AppleAVD_VideoDecoder - ERROR IOSurfaceLock failed\n";
    int v12 = 2;
LABEL_24:
    _os_log_impl(&dword_223977000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, v12);
  }
LABEL_25:
  if (values)
  {
    CFRelease(values);
    values = 0;
  }
LABEL_27:
  if (cf)
  {
    CFRelease(cf);
    int cf = 0;
  }
  if (v23)
  {
    CFRelease(v23);
    unsigned int v23 = 0;
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v5)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v18 = "CreateCompressedBitBuffer";
      int v19 = 1024;
      int v20 = v5;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
    }
    if (v6)
    {
      CFRelease(v6);
      return 0;
    }
  }
  return v6;
}

uint64_t AppleAVDCreateDecodeDeviceInternal(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  memset(v44, 0, sizeof(v44));
  uint64_t v47 = 0;
  uint64_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v35 = 0u;
  *(_OWORD *)__int16 v33 = 0u;
  long long v34 = 0u;
  *(_OWORD *)int v32 = 0u;
  memset(outputStruct, 0, sizeof(outputStruct));
  size_t outputStructCnt = 184;
  inputStruct[0] = a3;
  inputStruct[1] = a4;
  int v9 = *(_DWORD *)(a1 + 848);
  int v10 = *(_DWORD *)(a1 + 1468);
  _DWORD inputStruct[2] = a6;
  inputStruct[3] = v10;
  uint64_t v42 = *(void *)(a1 + 3764);
  char v11 = *(unsigned char *)(a1 + 1008);
  if (*(_DWORD *)(a1 + 1012)) {
    char v12 = 1;
  }
  else {
    char v12 = *(unsigned char *)(a1 + 1008);
  }
  LOBYTE(v43) = v12;
  BYTE6(v43) = v11;
  int v13 = *(_DWORD *)(a1 + 1036);
  *(void *)&long long v45 = *(void *)(a1 + 1040);
  BYTE7(v43) = *(_DWORD *)(a1 + 1048);
  v44[63] = *(_DWORD *)(a1 + 1496);
  *(void *)&v44[3] = *(void *)(a1 + 1052);
  long long v14 = *(_OWORD *)(a1 + 1076);
  *(_OWORD *)&v44[5] = *(_OWORD *)(a1 + 1060);
  long long v15 = *(_OWORD *)(a1 + 1092);
  long long v16 = *(_OWORD *)(a1 + 1108);
  *(_OWORD *)&v44[21] = *(_OWORD *)(a1 + 1124);
  *(_OWORD *)&v44[17] = v16;
  *(_OWORD *)&v44[13] = v15;
  *(_OWORD *)&v44[9] = v14;
  *(_OWORD *)&v44[25] = *(_OWORD *)(a1 + 1140);
  BYTE8(v43) = *(unsigned char *)(a1 + 3758);
  BYTE9(v43) = *(_DWORD *)(a1 + 3760);
  int v17 = *(_DWORD *)(a1 + 3772);
  v44[1] = v13;
  HIDWORD(v43) = v17;
  long long v18 = *(_OWORD *)(a1 + 1156);
  long long v19 = *(_OWORD *)(a1 + 1172);
  long long v20 = *(_OWORD *)(a1 + 1188);
  *(_OWORD *)&v44[41] = *(_OWORD *)(a1 + 1204);
  *(_OWORD *)&v44[37] = v20;
  *(_OWORD *)&v44[33] = v19;
  *(_OWORD *)&v44[29] = v18;
  long long v21 = *(_OWORD *)(a1 + 1220);
  long long v22 = *(_OWORD *)(a1 + 1236);
  *(_OWORD *)&v44[53] = *(_OWORD *)(a1 + 1252);
  *(_OWORD *)&v44[49] = v22;
  *(_OWORD *)&v44[45] = v21;
  *(_OWORD *)&v44[57] = *(_OWORD *)(a1 + 1268);
  BYTE2(v43) = 1;
  int v23 = *(_DWORD *)(a1 + 232);
  v44[62] = v9;
  v44[2] = v23;
  if (*(_DWORD *)(a1 + 1288) == 2) {
    BYTE5(v43) = 1;
  }
  if (*(void *)(a1 + 240) || *(void *)(a1 + 768)) {
    BYTE2(v43) = 0;
  }
  BYTE3(v43) = *(unsigned char *)(a1 + 897) & 1;
  BYTE4(v43) = a7 != 0;
  *((void *)&v45 + 1) = *(void *)(a1 + 48);
  LOBYTE(v46) = *(unsigned char *)(a1 + 3824);
  if (*(_DWORD *)(a1 + 228) == 4)
  {
    BYTE2(v43) = 1;
    DWORD1(v46) = a8;
  }
  BYTE8(v46) = *(unsigned char *)(a1 + 3844);
  BYTE9(v46) = *(unsigned char *)(a1 + 3864);
  HIDWORD(v46) = *(_DWORD *)(a1 + 3920);
  LOBYTE(v47) = *(unsigned char *)(a1 + 3884);
  uint64_t v24 = IOConnectCallStructMethod(*(_DWORD *)a1, 0, inputStruct, 0x150uLL, outputStruct, &outputStructCnt);
  if (!v24)
  {
    *(void *)(a1 + 3928) = *(void *)&v32[8];
    operator new();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    unsigned __int32 v28 = "AppleAVDCreateDecodeDeviceInternal";
    __int16 v29 = 1024;
    int v30 = v24;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed error: %d \n", buf, 0x12u);
  }
  return v24;
}

void sub_22399CC44(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v1, 0x10B0C40A28F3CCALL);
  _Unwind_Resume(a1);
}

uint64_t AppleAVDOpenConnection(void *a1, int a2, char a3, unsigned __int8 a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  *a1 = 0;
  BOOL v8 = malloc_type_calloc(1uLL, 0xF68uLL, 0x10F0040DFEEA449uLL);
  int v27 = v8;
  if (!v8) {
    return 4294967294;
  }
  int v9 = v8;
  *(void *)existing = 0;
  bzero(v8, 0xF68uLL);
  v9[374] = 6;
  *((void *)v9 + 492) = malloc_type_calloc(1uLL, 0x220uLL, 0x4D2D6959uLL);
  uint64_t MatchingServices = MEMORY[0x223CBA9B0](0, &existing[1]);
  if (MatchingServices
    || (mach_port_t v11 = existing[1],
        CFDictionaryRef v12 = IOServiceMatching("AppleAVD"),
        uint64_t MatchingServices = IOServiceGetMatchingServices(v11, v12, existing),
        MatchingServices))
  {
    uint64_t AVDFrameReceiver = MatchingServices;
    goto LABEL_15;
  }
  uint64_t AVDFrameReceiver = 3758097086;
  io_service_t v14 = IOIteratorNext(existing[0]);
  if (v14)
  {
    io_object_t v15 = v14;
    if (IOServiceOpen(v14, *MEMORY[0x263EF8960], a3 & 1 | (16 * a2) | (a4 << 12) | 0x100, v9))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)int v32 = "AppleAVDOpenConnection";
        *(_WORD *)&v32[8] = 1024;
        *(_DWORD *)&v32[10] = -536870210;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): IOServiceOpen failed %x", buf, 0x12u);
      }
LABEL_13:
      IOObjectRelease(v15);
      goto LABEL_14;
    }
    *(_DWORD *)buf = *v9;
    char v33 = 0;
    *(void *)&v32[4] = &v27;
    *(void *)&v32[12] = AppleAVDDecodeFrameResponse;
    char v34 = *((unsigned char *)v9 + 1472);
    object = (void *)voucher_copy();
    uint64_t AVDFrameReceiver = CreateAVDFrameReceiver((void *)v27 + 165, (uint64_t)buf, (pthread_attr_t *)((char *)v27 + 1328), (pthread_t *)v27 + 174, (_DWORD *)v27 + 350);
    os_release(object);
    if (AVDFrameReceiver)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int16 v29 = 67109120;
        int v30 = AVDFrameReceiver;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDOpenConnection - CreateAVDFrameReceiver failed %x", v29, 8u);
      }
      IOServiceClose(*(_DWORD *)v27);
      goto LABEL_13;
    }
    pthread_mutex_init((pthread_mutex_t *)((char *)v27 + 784), 0);
    pthread_cond_init((pthread_cond_t *)((char *)v27 + 1408), 0);
    long long v16 = v27;
    *((unsigned char *)v27 + 3756) = 0;
    v16[262] = -1;
    int v17 = MGGetBoolAnswer();
    long long v18 = v27;
    if (!v17)
    {
LABEL_37:
      *a1 = v18;
      IOObjectRelease(v15);
      IOObjectRelease(existing[0]);
      return 0;
    }
    *((unsigned char *)v27 + 3756) = 1;
    SInt32 v19 = v18[930];
    CFStringRef v20 = (const __CFString *)CFPreferencesCopyValue(@"VXD_DebugMetaDataSEI", @"com.apple.coremedia", (CFStringRef)*MEMORY[0x263EFFE70], (CFStringRef)*MEMORY[0x263EFFE50]);
    if (!v20)
    {
LABEL_34:
      long long v18 = v27;
      *((_DWORD *)v27 + 93pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v19;
      if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)int v32 = v19;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: avdDec - Setting CFDebugMetaDataSEI to %d\n", buf, 8u);
        long long v18 = v27;
      }
      goto LABEL_37;
    }
    CFStringRef v21 = v20;
    CFTypeID v22 = CFGetTypeID(v20);
    if (v22 == CFStringGetTypeID())
    {
      IntCFDataRef Value = CFStringGetIntValue(v21);
      if (IntValue < 0)
      {
        IntCFDataRef Value = 1;
        if (CFStringCompare(v21, @"true", 1uLL))
        {
          IntCFDataRef Value = 1;
          if (CFStringCompare(v21, @"yes", 1uLL))
          {
            if (CFStringCompare(v21, @"false", 1uLL) == kCFCompareEqualTo
              || (IntCFDataRef Value = v19, CFStringCompare(v21, @"no", 1uLL) == kCFCompareEqualTo))
            {
              IntCFDataRef Value = 0;
            }
          }
        }
      }
      goto LABEL_33;
    }
    CFTypeID v24 = CFGetTypeID(v21);
    if (v24 == CFNumberGetTypeID())
    {
      *(_DWORD *)buf = 0;
      if (CFNumberGetValue((CFNumberRef)v21, kCFNumberIntType, buf))
      {
        IntCFDataRef Value = *(_DWORD *)buf;
LABEL_33:
        CFRelease(v21);
        SInt32 v19 = IntValue;
        goto LABEL_34;
      }
      printf("H3H264VideoDecoder FIG: cannot convert number %p %p");
    }
    else
    {
      CFTypeID v25 = CFGetTypeID(v21);
      if (v25 == CFBooleanGetTypeID())
      {
        IntCFDataRef Value = CFEqual(v21, (CFTypeRef)*MEMORY[0x263EFFB40]);
        goto LABEL_33;
      }
      printf("H3H264VideoDecoder FIG: Cannot use type of %p %p");
    }
    IntCFDataRef Value = v19;
    goto LABEL_33;
  }
  uint64_t AVDFrameReceiver = 3758097088;
LABEL_14:
  IOObjectRelease(existing[0]);
  int v9 = v27;
  if (v27) {
LABEL_15:
  }
    free(v9);
  return AVDFrameReceiver;
}

uint64_t CreateAVDFrameReceiver(void *a1, uint64_t a2, pthread_attr_t *a3, pthread_t *a4, _DWORD *a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  v19[0] = 0;
  uint64_t v10 = 3758097084;
  uint64_t v20 = 0;
  uint64_t v21 = a2;
  pthread_attr_init(a3);
  pthread_attr_setdetachstate(a3, 1);
  if (*(unsigned char *)(a2 + 33)
    || (pthread_attr_getschedparam(a3, &v18), v18.sched_priority = 53, !pthread_attr_setschedparam(a3, &v18))
    && (*a5 = 53, !pthread_attr_setschedpolicy(a3, 2)))
  {
    int v17 = a1;
    pthread_create(a4, a3, (void *(__cdecl *)(void *))AVDFrameReceiverEntry, v19);
    int v11 = 0;
    unsigned int v12 = 1;
    int v13 = &_os_log_internal;
    while (!v19[0])
    {
      usleep(0x3E8u);
      unsigned int v14 = v11 + 1;
      if (1000 * (v12 / 0x3E8) - 1 == v11 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        int v23 = "CreateAVDFrameReceiver";
        __int16 v24 = 1024;
        unsigned int v25 = v14 / 0x3E8;
        _os_log_impl(&dword_223977000, v13, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): threadReady state false with wait count %d secs \n", buf, 0x12u);
      }
      ++v12;
      ++v11;
      if (v14 == 4000)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          int v23 = "CreateAVDFrameReceiver";
          __int16 v24 = 1024;
          unsigned int v25 = 4;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): threadReady state false with wait count limit reached %d secs \n", buf, 0x12u);
        }
        if (a3) {
          pthread_attr_destroy(a3);
        }
        break;
      }
    }
    uint64_t v15 = v20;
    *int v17 = v20;
    if (v15) {
      return 0;
    }
    else {
      return 3758097084;
    }
  }
  return v10;
}

void AppleAVDCommandBuilder::AppleAVDCommandBuilder(AppleAVDCommandBuilder *this, int a2, int a3)
{
  *((_DWORD *)this + 1404) = a2;
  *((_DWORD *)this + 1354) = a3;
  *((void *)this + 783) = 0;
  *((void *)this + 785) = 0;
  *((void *)this + 784) = 0;
  *((_DWORD *)this + 1572) = 0;
  *((_DWORD *)this + 1558) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 268) = 0u;
}

uint64_t AppleAVDCommandBuilder::updateSecuredClient(uint64_t this, char a2)
{
  *(unsigned char *)(this + 5888) = a2;
  return this;
}

uint64_t filterSmallDeltaFPS(uint64_t result, int a2)
{
  double v2 = (double)(int)result * 0.15 + 0.5;
  if ((int)v2 + (int)result >= a2 && (int)result - (int)v2 <= a2 && a2 < (int)result) {
    return result;
  }
  else {
    return a2;
  }
}

uint64_t AppleAVDWrapperHEVCDecoderStartTileSession(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  CFTypeRef v31 = 0;
  CFTypeRef cf = 0;
  v45[0] = 875704438;
  int v30 = 1;
  CVPixelBufferRef pixelBufferOut = 0;
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      char v34 = "AppleAVDWrapperHEVCDecoderStartTileSession";
      BOOL v8 = &_os_log_internal;
      int v9 = "AppleAVD: ERROR: %s no instance storage!";
      uint32_t v10 = 12;
      goto LABEL_7;
    }
    return 4294954387;
  }
  uint64_t v6 = DerivedStorage;
  int v7 = *(_DWORD *)(DerivedStorage + 5204);
  if (v7)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      char v34 = "AppleAVDWrapperHEVCDecoderStartTileSession";
      __int16 v35 = 1024;
      int v36 = v7;
      BOOL v8 = &_os_log_internal;
      int v9 = "AppleAVD: %s ERROR: pluginState isn't kPluginCreated, is %d";
      uint32_t v10 = 18;
LABEL_7:
      _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
      return 4294954387;
    }
    return 4294954387;
  }
  unsigned int v12 = (unsigned char *)(DerivedStorage + 16832);
  int v13 = (unsigned char *)(DerivedStorage + 5201);
  unsigned __int8 CFPreferenceNumber = VideoDecoder_getCFPreferenceNumber(@"AVD_CoreSelect", @"com.apple.coremedia", 32);
  pthread_mutex_init((pthread_mutex_t *)(v6 + 5648), 0);
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 5648));
  *(void *)(v6 + 8) = a2;
  *(_DWORD *)(v6 + 16) = 1;
  FigFormatDescriptionRelease();
  uint64_t v15 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
  *(void *)(v6 + 24) = v15;
  unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(v15);
  int32_t v17 = Dimensions;
  *(void *)(v6 + 5212) = Dimensions;
  *(_DWORD *)(v6 + 5208) = 1;
  unint64_t v18 = HIDWORD(Dimensions);
  *(void *)(v6 + 5632) = 0;
  *(unsigned char *)(v6 + 5644) = 0;
  *(unsigned char *)(v6 + 16849) = 1;
  *unsigned int v12 = 0;
  *(unsigned char *)(v6 + 1684pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(v6 + 16844) = 0;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316418;
    char v34 = "AppleAVDWrapperHEVCDecoderStartTileSession";
    __int16 v35 = 1024;
    int v36 = v17;
    __int16 v37 = 1024;
    int v38 = v18;
    __int16 v39 = 2048;
    uint64_t v40 = v6;
    __int16 v41 = 2080;
    uint64_t v42 = "22:55:20";
    __int16 v43 = 2080;
    uint64_t v44 = "Nov 14 2024";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: HEVC, %d x %d, session: %p, built %s %s", buf, 0x36u);
  }
  uint64_t HeaderBuffer_0 = CreateHeaderBuffer_0(v6, a3);
  if (HeaderBuffer_0)
  {
    uint64_t v11 = HeaderBuffer_0;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_31;
  }
  int AVDHEVCInstance = CreateAVDHEVCInstance(v6, CFPreferenceNumber);
  if (AVDHEVCInstance)
  {
    int v22 = AVDHEVCInstance;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder ERROR: CreateAVDHEVCInstance returned error", buf, 2u);
    }
    if (*(_DWORD *)(v6 + 5204) != 1) {
      ReleaseHeaderBufferAndCloseFileIO((void *)v6);
    }
    CFMutableArrayRef Mutable = 0;
    if (v22 == -536870210) {
      uint64_t v11 = 4294954383;
    }
    else {
      uint64_t v11 = 4294954385;
    }
    goto LABEL_31;
  }
  if (*(_DWORD *)(v6 + 8020))
  {
    DumpHevcStream(v6);
  }
  else
  {
    *(void *)(v6 + 8056) = 0;
    *(_OWORD *)(v6 + 8024) = 0u;
    *(_OWORD *)(v6 + 804pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  }
  uint64_t v23 = *(unsigned __int8 *)(v6 + 5745);
  if ((v23 | 2) != 2 || v23 != *(unsigned __int8 *)(v6 + 5746)) {
    goto LABEL_29;
  }
  createPixelFormatList(v23, *(unsigned __int8 *)(v6 + 5744), *(unsigned __int8 *)(v6 + 5801), 1, v45, &v30, 0, *(_DWORD *)(v6 + 5220), 0, 0, 0);
  int v24 = *(_DWORD *)(v6 + 5712);
  *(_DWORD *)(v6 + 5224) = v24;
  int v25 = *(_DWORD *)(v6 + 5716);
  *(_DWORD *)(v6 + 5228) = v25;
  if (CreateDispPixelBufferAttributesDictionary(*(_DWORD *)(v6 + 5220), v17, v18, v24, v25, (char *)v45, v30, 0, (__CFDictionary **)&cf))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder ERROR: CreateDispPixelBufferAttributesDictionary failed", buf, 2u);
    }
LABEL_29:
    CFMutableArrayRef Mutable = 0;
LABEL_30:
    uint64_t v11 = 4294954385;
LABEL_31:
    FigFormatDescriptionRelease();
    *(void *)(v6 + 24) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      char v34 = "AppleAVDWrapperHEVCDecoderStartTileSession";
      __int16 v35 = 1024;
      int v36 = v11;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
    }
    goto LABEL_33;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECF0], 8);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECE8], 8);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECE0], 64);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECB0], 0x10000);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECD0], 64);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECB8], 0x10000);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECD8], 64);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECA0], 262080);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECC8], 64);
  setSIntValue(Mutable, (const void *)*MEMORY[0x263F1ECC0], 64);
  VTTileDecoderSessionSetTileDecodeRequirements();
  if (CreateUncompressedPixelBufferAttributesDictionary(*(_DWORD *)(v6 + 5220), *(_DWORD *)(v6 + 5224), *(_DWORD *)(v6 + 5228), *(_DWORD *)(v6 + 5224), *(_DWORD *)(v6 + 5228), (char *)v45, v30, 0, (__CFDictionary **)&v31))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_30;
    }
    *(_WORD *)buf = 0;
    int v27 = &_os_log_internal;
    unsigned __int32 v28 = "AppleAVD: AppleAVD_HEVCVideoDecoder ERROR: CreatePixelBufferAttributesDictionary failed";
LABEL_47:
    _os_log_impl(&dword_223977000, v27, OS_LOG_TYPE_DEFAULT, v28, buf, 2u);
    goto LABEL_30;
  }
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], *(unsigned int *)(v6 + 5224), *(unsigned int *)(v6 + 5228), v45[0], (CFDictionaryRef)v31, &pixelBufferOut))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_30;
    }
    *(_WORD *)buf = 0;
    int v27 = &_os_log_internal;
    unsigned __int32 v28 = "AppleAVD: AppleAVD_HEVCVideoDecoder ERROR: CVPixelBufferCreate failed";
    goto LABEL_47;
  }
  if (AppleAVDSetParameter(*(void *)(v6 + 5184), 29, (unsigned __int8 *)pixelBufferOut))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder ERROR: AppleAVDSetParameter:kAppleAVDSetTileCVPixelBufRefDecode failed", buf, 2u);
    }
    if (pixelBufferOut) {
      CVPixelBufferRelease(pixelBufferOut);
    }
    goto LABEL_30;
  }
  uint64_t v11 = 0;
  *int v13 = 1;
  *(_DWORD *)(v6 + 5204) = 2;
LABEL_33:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v31)
  {
    CFRelease(v31);
    CFTypeRef v31 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v6 + 5648));
  return v11;
}

void setSIntValue(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t AppleAVDWrapperHEVCDecoderStartSession(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v55 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  kdebug_trace();
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v36 = "AppleAVDWrapperHEVCDecoderStartSession";
      BOOL v8 = &_os_log_internal;
      int v9 = "AppleAVD: ERROR: %s no instance storage!";
      uint32_t v10 = 12;
      goto LABEL_7;
    }
    return 4294954387;
  }
  uint64_t v6 = DerivedStorage;
  int v7 = *(_DWORD *)(DerivedStorage + 5204);
  if (v7)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v36 = "AppleAVDWrapperHEVCDecoderStartSession";
      __int16 v37 = 1024;
      *(_DWORD *)int v38 = v7;
      BOOL v8 = &_os_log_internal;
      int v9 = "AppleAVD: %s ERROR: pluginState isn't kPluginCreated, is %d";
      uint32_t v10 = 18;
LABEL_7:
      _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
      return 4294954387;
    }
    return 4294954387;
  }
  VideoDecoder_getCFPreferenceNumber(@"AVD_CoreSelect", @"com.apple.coremedia", 32);
  unsigned int v12 = (pthread_mutex_t *)(v6 + 5648);
  pthread_mutex_init((pthread_mutex_t *)(v6 + 5648), 0);
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 5648));
  *(void *)uint64_t v6 = a2;
  *(_DWORD *)(v6 + 16) = 0;
  FigFormatDescriptionRelease();
  int v13 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
  *(void *)(v6 + 24) = v13;
  *(CMVideoDimensions *)(v6 + 5212) = CMVideoFormatDescriptionGetDimensions(v13);
  *(_DWORD *)(v6 + 5208) = 1;
  *(void *)(v6 + 5632) = 0;
  *(unsigned char *)(v6 + 5644) = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  *(void *)(v6 + 16816) = Mutable;
  if (Mutable)
  {
    uint64_t v15 = v6 + 16828;
    if (*(unsigned char *)(v6 + 16832))
    {
      CFDictionaryRef DestinationPixelBufferAttributes = (const __CFDictionary *)VTDecoderSessionGetDestinationPixelBufferAttributes();
      if (DestinationPixelBufferAttributes)
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(DestinationPixelBufferAttributes, (const void *)*MEMORY[0x263F04180]);
        if (Value)
        {
          CFArrayRef ValueAtIndex = Value;
          CFTypeID v19 = CFGetTypeID(Value);
          if (v19 == CFArrayGetTypeID() && CFArrayGetCount(ValueAtIndex) == 1) {
            CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
          }
          CFTypeID v20 = CFGetTypeID(ValueAtIndex);
          Typeuint64_t ID = CFNumberGetTypeID();
          int v22 = (_DWORD *)(v6 + 16836);
          if (v20 == TypeID) {
            CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, v22);
          }
          else {
            *int v22 = 0;
          }
        }
      }
      else
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          int v36 = "AppleAVDWrapperHEVCDecoderStartSession";
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): preconfiguredPixBufAttrs is NULL!", buf, 0xCu);
        }
        *(_DWORD *)(v6 + 16836) = 0;
      }
    }
    CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(v6 + 24));
    if (Extensions) {
      *(unsigned char *)(v6 + 8145) = CFDictionaryContainsKey(Extensions, (const void *)*MEMORY[0x263F00E80]) != 0;
    }
    if (MGGetBoolAnswer()) {
      *(_DWORD *)(v6 + 802pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = VideoDecoder_getCFPreferenceNumber(@"AVD_EnableFileDump", @"com.apple.coremedia", 0);
    }
    int CFPreferenceNumber = VideoDecoder_getCFPreferenceNumber(@"AVD_TryAllFrames", @"com.apple.coremedia", 0);
    *(_DWORD *)(v6 + 8064) = CFPreferenceNumber;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(_DWORD *)(v6 + 5828);
      int v26 = *(_DWORD *)(v6 + 5212);
      int v27 = *(_DWORD *)(v6 + 5216);
      int v28 = *(unsigned __int8 *)(v6 + 5816);
      *(_DWORD *)buf = 136317186;
      int v36 = "AppleAVDWrapperHEVCDecoderStartSession";
      __int16 v37 = 1024;
      *(_DWORD *)int v38 = v25;
      *(_WORD *)&v38[4] = 1024;
      *(_DWORD *)&v38[6] = v26;
      LOWORD(v39) = 1024;
      *(_DWORD *)((char *)&v39 + 2) = v27;
      HIWORD(v39) = 1024;
      int v40 = CFPreferenceNumber;
      __int16 v41 = 1024;
      int v42 = v28;
      __int16 v43 = 2048;
      uint64_t v44 = v6;
      __int16 v45 = 2080;
      uint64_t v46 = "22:55:20";
      __int16 v47 = 2080;
      uint64_t v48 = "Nov 14 2024";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s() codecType: HEVC, encryptionScheme %d, %d x %d, tryAllFrames = %d, usageMode: %d, session: %p, built %s %s", buf, 0x48u);
    }
    if (MGGetBoolAnswer() && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      if (_os_feature_enabled_impl()) {
        __int16 v29 = "True";
      }
      else {
        __int16 v29 = "False";
      }
      if (_os_feature_enabled_impl()) {
        int v30 = "True";
      }
      else {
        int v30 = "False";
      }
      int v31 = _os_feature_enabled_impl();
      *(_DWORD *)buf = 136315650;
      if (v31) {
        int v32 = "True";
      }
      else {
        int v32 = "False";
      }
      unsigned int v12 = (pthread_mutex_t *)(v6 + 5648);
      uint64_t v15 = v6 + 16828;
      int v36 = v29;
      __int16 v37 = 2080;
      *(void *)int v38 = v30;
      *(_WORD *)&v38[8] = 2080;
      __int16 v39 = v32;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: FeatureFlagIsPWDEnabled: %s FeatureFlagIsHEVCWithAlphaCompressedIOSurfaces: %s MVHEVCAlpha: %s", buf, 0x20u);
    }
    *(unsigned char *)(v15 + 23) = _os_feature_enabled_impl();
    *(unsigned char *)(v15 + 22) = _os_feature_enabled_impl();
    *(_DWORD *)(v6 + 8072) = VideoDecoder_getCFPreferenceNumber(@"AVD_OnDemandDartMap", @"com.apple.coremedia", 1);
    *(_DWORD *)uint64_t v15 = VideoDecoder_getCFPreferenceNumber(@"AVD_avdCoreControlPerfWeight", @"com.apple.coremedia", 90);
    *(_DWORD *)(v6 + 8068) = VideoDecoder_getCFPreferenceNumber(@"AVD_MCacheMode", @"com.apple.coremedia", 0xFFFFFFFFLL);
    *(_DWORD *)(v6 + 8076) = 0;
    if (VideoDecoder_getCFPreferenceNumber(@"AVD_InhibitADSForAVCHEVC", @"com.apple.coremedia", 0))*(_DWORD *)(v6 + 8076) = 1; {
    *(_DWORD *)(v6 + 8076) = *(_DWORD *)(v6 + 8076) & 0xFFFFFFFB | (4
    }
                                                                  * (VideoDecoder_getCFPreferenceNumber(@"AVD_AllowADSOnUnsupported", @"com.apple.coremedia", 0) != 0));
    *(_DWORD *)(v6 + 8076) = *(_DWORD *)(v6 + 8076) & 0xFFFFFFF7 | (8
                                                                  * (VideoDecoder_getCFPreferenceNumber(@"AVD_EnableHistogram", @"com.apple.coremedia", 1) != 0));
    int v33 = *(_DWORD *)(v6 + 8020);
    if (v33 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v36) = v33;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_HEVCVideoDecoder enableFileDump %d", buf, 8u);
    }
    uint64_t HeaderBuffer_0 = CreateHeaderBuffer_0(v6, a3);
    if (!HeaderBuffer_0) {
      parseHevcSps();
    }
  }
  else
  {
    uint64_t HeaderBuffer_0 = 4294954392;
  }
  FigFormatDescriptionRelease();
  *(void *)(v6 + 24) = 0;
  AppleAVDWrapperHEVCDecoderCleanUpMVHEVCResources(v6);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v36 = "AppleAVDWrapperHEVCDecoderStartSession";
    __int16 v37 = 1024;
    *(_DWORD *)int v38 = HeaderBuffer_0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
  pthread_mutex_unlock(v12);
  kdebug_trace();
  return HeaderBuffer_0;
}

uint64_t VideoDecoder_getCFPreferenceNumber(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  CFStringRef v6 = (const __CFString *)CFPreferencesCopyValue(a1, a2, (CFStringRef)*MEMORY[0x263EFFE70], (CFStringRef)*MEMORY[0x263EFFE50]);
  if (v6)
  {
    CFStringRef v7 = v6;
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == CFStringGetTypeID())
    {
      IntCFArrayRef Value = CFStringGetIntValue(v7);
      if ((IntValue & 0x80000000) != 0)
      {
        IntCFArrayRef Value = 1;
        if (CFStringCompare(v7, @"true", 1uLL))
        {
          IntCFArrayRef Value = 1;
          if (CFStringCompare(v7, @"yes", 1uLL))
          {
            if (CFStringCompare(v7, @"false", 1uLL) == kCFCompareEqualTo
              || (IntCFArrayRef Value = a3, CFStringCompare(v7, @"no", 1uLL) == kCFCompareEqualTo))
            {
              IntCFArrayRef Value = 0;
            }
          }
        }
      }
      goto LABEL_20;
    }
    CFTypeID v10 = CFGetTypeID(v7);
    if (v10 == CFNumberGetTypeID())
    {
      unsigned int valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)v7, kCFNumberIntType, &valuePtr))
      {
        a3 = valuePtr;
        goto LABEL_19;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 134218240;
      CFStringRef v17 = a1;
      __int16 v18 = 2048;
      CFStringRef v19 = a2;
      unsigned int v12 = &_os_log_internal;
      int v13 = "AppleAVD: AppleAVD_HEVCDecoder: cannot convert number %p %p";
    }
    else
    {
      CFTypeID v11 = CFGetTypeID(v7);
      if (v11 == CFBooleanGetTypeID())
      {
        IntCFArrayRef Value = CFEqual(v7, (CFTypeRef)*MEMORY[0x263EFFB40]);
LABEL_20:
        CFRelease(v7);
        return IntValue;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
LABEL_19:
        IntCFArrayRef Value = a3;
        goto LABEL_20;
      }
      *(_DWORD *)buf = 134218240;
      CFStringRef v17 = a1;
      __int16 v18 = 2048;
      CFStringRef v19 = a2;
      unsigned int v12 = &_os_log_internal;
      int v13 = "AppleAVD: AppleAVD_HEVCDecoder: Cannot use type of %p %p";
    }
    _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, v13, buf, 0x16u);
    goto LABEL_19;
  }
  return a3;
}

uint64_t GetNoSecondWriteFlag(__CVPixelBufferPool *a1, BOOL *a2)
{
  int v6 = 0;
  uint64_t IOSurfaceTypeFromPool = GetIOSurfaceTypeFromPool(a1, &v6);
  if (IOSurfaceTypeFromPool)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFNumberRef v5 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: failed to get IO Surface from buffer pool!", v5, 2u);
    }
  }
  else
  {
    *a2 = v6 != 0;
  }
  return IOSurfaceTypeFromPool;
}

uint64_t GetIOSurfaceTypeFromPool(CVPixelBufferPoolRef pixelBufferPool, _DWORD *a2)
{
  CVPixelBufferRef pixelBufferOut = 0;
  if (CVPixelBufferPoolCreatePixelBuffer(0, pixelBufferPool, &pixelBufferOut)) {
    return 4294954385;
  }
  CVPixelBufferGetIOSurface(pixelBufferOut);
  *a2 = IOSurfaceGetCompressionTypeOfPlane();
  uint64_t result = (uint64_t)pixelBufferOut;
  if (pixelBufferOut)
  {
    CVPixelBufferRelease(pixelBufferOut);
    return 0;
  }
  return result;
}

uint64_t CreateHeaderBuffer(uint64_t a1, CMFormatDescriptionRef desc)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  Extensiouint64_t n = CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x263F00E90]);
  if (!Extension
    || (CFDictionaryRef v4 = Extension, TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(v4))
    || (CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)v4, @"av1C")) == 0
    || (ValueAtIndex = Value, CFTypeID v8 = CFArrayGetTypeID(), v8 == CFGetTypeID(ValueAtIndex))
    && (CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 0)) == 0
    || (CFTypeID v9 = CFDataGetTypeID(), v9 != CFGetTypeID(ValueAtIndex)))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v32) = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: FGHDecoder ERROR: ConfigRecordData error - Cannot find config record", (uint8_t *)&v32, 2u);
    }
    uint64_t v14 = 4294958325;
    goto LABEL_13;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)ValueAtIndex);
  CFIndex Length = CFDataGetLength((CFDataRef)ValueAtIndex);
  if (Length <= 3)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v32) = 0;
      unsigned int v12 = &_os_log_internal;
      int v13 = "AppleAVD: ERROR, config record is too short\n";
LABEL_35:
      uint32_t v22 = 2;
LABEL_36:
      _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v32, v22);
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  if (*BytePtr != 129)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v32) = 0;
      unsigned int v12 = &_os_log_internal;
      int v13 = "AppleAVD: ERROR, invalid marker bit and/or version number\n";
      goto LABEL_35;
    }
LABEL_37:
    uint64_t v14 = 4294954386;
    goto LABEL_13;
  }
  unsigned int v17 = BytePtr[1];
  unsigned int v18 = v17 >> 5;
  if (v17 >= 0x20 && v18 != 2)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_37;
    }
    int v32 = 67109120;
    LODWORD(v33) = v18;
    unsigned int v12 = &_os_log_internal;
    int v13 = "AppleAVD: ERROR, unsupported profile %d\n";
LABEL_40:
    uint32_t v22 = 8;
    goto LABEL_36;
  }
  if (v18 != 2 || (BytePtr[2] & 0x40) == 0)
  {
    if (v17 > 0x5F)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_37;
      }
      LOWORD(v32) = 0;
      unsigned int v12 = &_os_log_internal;
      int v13 = "AppleAVD: ERROR, invalid profile\n";
      goto LABEL_35;
    }
    if ((BytePtr[2] & 0x40) != 0) {
      char v21 = 10;
    }
    else {
      char v21 = 8;
    }
  }
  else if ((BytePtr[2] & 0x20) != 0)
  {
    char v21 = 12;
  }
  else
  {
    char v21 = 10;
  }
  int v24 = (char *)(a1 + 5344);
  char v25 = v21 - 8;
  *(unsigned char *)(a1 + 5345) = v25;
  *(unsigned char *)(a1 + 5346) = v25;
  int v26 = (BytePtr[2] >> 2) & 7;
  if (v26 == 7)
  {
    char v27 = 0;
  }
  else
  {
    if (v26 != 3)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_37;
      }
      int v30 = *v24;
      int v32 = 67109120;
      LODWORD(v33) = v30;
      unsigned int v12 = &_os_log_internal;
      int v13 = "AppleAVD: ERROR, unsupported chroma format %d\n";
      goto LABEL_40;
    }
    char v27 = 1;
  }
  *int v24 = v27;
  unsigned int v28 = Length - 4;
  if (Length == 4)
  {
    if (*(void *)(a1 + 5232) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v32 = 136315138;
      int v33 = "CreateHeaderBuffer";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: WARNING, initial_obu_buffer isn't empty like it should\n", (uint8_t *)&v32, 0xCu);
    }
    int v31 = malloc_type_malloc(1uLL, 0x9B166501uLL);
    *(void *)(a1 + 5232) = v31;
    if (v31)
    {
      uint64_t v14 = 0;
      *(_DWORD *)(a1 + 524pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      return v14;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 524pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v28;
    if (*(void *)(a1 + 5232) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v32 = 136315138;
      int v33 = "CreateHeaderBuffer";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: WARNING, initial_obu_buffer isn't empty like it should\n", (uint8_t *)&v32, 0xCu);
      unsigned int v28 = *(_DWORD *)(a1 + 5240);
    }
    __int16 v29 = malloc_type_malloc(v28, 0xEFB2DAA8uLL);
    *(void *)(a1 + 5232) = v29;
    if (v29)
    {
      memcpy(v29, BytePtr + 4, *(unsigned int *)(a1 + 5240));
      return 0;
    }
  }
  uint64_t v14 = 4294954392;
LABEL_13:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v32 = 136315394;
    int v33 = "CreateHeaderBuffer";
    __int16 v34 = 1024;
    int v35 = v14;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", (uint8_t *)&v32, 0x12u);
  }
  uint64_t v15 = *(void **)(a1 + 5232);
  if (v15)
  {
    free(v15);
    *(void *)(a1 + 5232) = 0;
  }
  return v14;
}

uint64_t CreateHeaderBuffer_0(uint64_t a1, CMFormatDescriptionRef desc)
{
  uint64_t v153 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 5232;
  *(_DWORD *)(a1 + 816pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(a1 + 8156) = 0;
  Extensiouint64_t n = CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x263F00E90]);
  if (!Extension) {
    goto LABEL_322;
  }
  CFNumberRef v5 = Extension;
  Typeuint64_t ID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(v5)) {
    goto LABEL_322;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v5, @"hvcC");
  CFArrayRef ValueAtIndex = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v5, @"lhvC");
  if (Value)
  {
    CFTypeID v9 = CFArrayGetTypeID();
    if (v9 == CFGetTypeID(Value)) {
      CFArrayRef Value = (const __CFArray *)CFArrayGetValueAtIndex(Value, 0);
    }
  }
  if (ValueAtIndex)
  {
    CFTypeID v10 = CFArrayGetTypeID();
    if (v10 == CFGetTypeID(ValueAtIndex)) {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    }
  }
  if (!Value || (CFTypeID v11 = CFDataGetTypeID(), v11 != CFGetTypeID(Value)))
  {
LABEL_322:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: HEVCDecoder ERROR: ConfigRecordData error - Cannot find config record", buf, 2u);
    }
    uint64_t v16 = 4294958325;
    goto LABEL_17;
  }
  BytePtr = CFDataGetBytePtr(Value);
  CFIndex Length = CFDataGetLength(Value);
  if (ValueAtIndex)
  {
    CFTypeID v14 = CFDataGetTypeID();
    if (v14 == CFGetTypeID(ValueAtIndex))
    {
      uint64_t v15 = CFDataGetBytePtr(ValueAtIndex);
      CFArrayRef ValueAtIndex = (const __CFArray *)CFDataGetLength(ValueAtIndex);
      *(void *)(a1 + 8156) = 0x100000001;
    }
    else
    {
      uint64_t v15 = 0;
      CFArrayRef ValueAtIndex = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  if (!*(unsigned char *)(a1 + 8145) && !*(_DWORD *)(a1 + 8160)) {
    *(_DWORD *)(a1 + 8156) = 0;
  }
  __int16 v147 = 0;
  int v146 = 0;
  uint64_t v145 = 0;
  char v144 = 0;
  __int16 v143 = 0;
  __int16 v142 = 0;
  __int16 v141 = 0;
  __int16 v140 = 0;
  __int16 v139 = 0;
  memset(__n, 0, sizeof(__n));
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)uint64_t v3 = 0;
  if (safeGetByte((uint64_t)BytePtr, (unsigned char *)&v147 + 1, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -10;
    goto LABEL_61;
  }
  if (safeGetByte((uint64_t)BytePtr, &v147, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -11;
    goto LABEL_61;
  }
  LOBYTE(v147) = v147 >> 6;
  if (safeGet32((uint64_t)BytePtr, &v146, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -12;
    goto LABEL_61;
  }
  if (safeGet32((uint64_t)BytePtr, &v145, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -13;
    goto LABEL_61;
  }
  if (safeGetShort((uint64_t)BytePtr, &v145, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -14;
    goto LABEL_61;
  }
  if (safeGetByte((uint64_t)BytePtr, &v144, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -15;
    goto LABEL_61;
  }
  if (safeGetShort((uint64_t)BytePtr, &v143, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -16;
    goto LABEL_61;
  }
  v143 &= 0xFFFu;
  if (safeGetByte((uint64_t)BytePtr, (unsigned char *)&v142 + 1, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -17;
    goto LABEL_61;
  }
  HIBYTE(v142) &= 3u;
  uint64_t v131 = (uint64_t)BytePtr;
  unint64_t v132 = Length;
  if (safeGetByte((uint64_t)BytePtr, &v142, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -18;
    goto LABEL_61;
  }
  LOBYTE(v142) = v142 & 3;
  if (safeGetByte((uint64_t)BytePtr, (unsigned char *)&v141 + 1, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -19;
    goto LABEL_61;
  }
  HIBYTE(v141) &= 7u;
  if (safeGetByte((uint64_t)BytePtr, &v141, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -20;
    goto LABEL_61;
  }
  LOBYTE(v141) = v141 & 7;
  if (safeGetShort((uint64_t)BytePtr, &v140, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -21;
    goto LABEL_61;
  }
  if (safeGetByte((uint64_t)BytePtr, (unsigned char *)&v139 + 1, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -22;
    goto LABEL_61;
  }
  char v24 = HIBYTE(v139);
  HIBYTE(v139) >>= 5;
  if (safeGetByte(v131, &v139, &__n[3], Length))
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint32_t v22 = 0;
    int v23 = -23;
    goto LABEL_61;
  }
  *(_DWORD *)(a1 + 5624) = (v24 & 3) + 1;
  char v137 = 0;
  unsigned int v136 = *(_DWORD *)&__n[3];
  unsigned __int16 v135 = 0;
  if ((_BYTE)v139)
  {
    int v25 = 0;
    unsigned __int16 v26 = 0;
    unsigned __int16 v27 = 0;
    unsigned __int16 v129 = 0;
    LOBYTE(__dst) = 0;
    LOBYTE(v127) = 0;
    int v123 = 0;
    while (1)
    {
      if (safeGetByte(v131, &v137, &v136, v132))
      {
        uint64_t v20 = 0;
        char v21 = 0;
        uint32_t v22 = 0;
        int v23 = -24;
        goto LABEL_61;
      }
      v137 &= 0x3Fu;
      if (safeGetShort(v131, &v135, &v136, v132))
      {
        uint64_t v20 = 0;
        char v21 = 0;
        uint32_t v22 = 0;
        int v23 = -25;
        goto LABEL_61;
      }
      switch(v137)
      {
        case '""':
          int v31 = v135;
          if (!v135 || (unsigned int __dst = v135 + __dst, __dst >= 0x41))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)long long v149 = "decodeHEVCDecoderConfigurationRecord";
              *(_WORD *)&v149[8] = 1024;
              *(_DWORD *)long long v150 = v31;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s too many PPS %d", buf, 0x12u);
            }
            uint64_t v20 = 0;
            char v21 = 0;
            uint32_t v22 = 0;
            int v23 = -31;
            goto LABEL_61;
          }
          for (unsigned int i = 0; i < v135; ++i)
          {
            if (safeGetShort(v131, __n, &v136, v132))
            {
              uint64_t v20 = 0;
              char v21 = 0;
              uint32_t v22 = 0;
              int v23 = -32;
              goto LABEL_61;
            }
            if (!__n[0])
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315138;
                *(void *)long long v149 = "decodeHEVCDecoderConfigurationRecord";
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s PPS size <= 0", buf, 0xCu);
              }
              uint64_t v20 = 0;
              char v21 = 0;
              uint32_t v22 = 0;
              int v23 = -33;
              goto LABEL_61;
            }
            if (__n[0] > v26) {
              unsigned __int16 v26 = __n[0];
            }
            v136 += __n[0];
          }
          break;
        case '!':
          int v33 = v135;
          if (!v135 || (unsigned int v127 = v135 + v127, v127 >= 0x11))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)long long v149 = "decodeHEVCDecoderConfigurationRecord";
              *(_WORD *)&v149[8] = 1024;
              *(_DWORD *)long long v150 = v33;
              long long v49 = &_os_log_internal;
              goto LABEL_198;
            }
            goto LABEL_199;
          }
          for (unsigned int j = 0; j < v135; ++j)
          {
            if (safeGetShort(v131, &__n[1], &v136, v132))
            {
              uint64_t v20 = 0;
              char v21 = 0;
              uint32_t v22 = 0;
              int v23 = -29;
              goto LABEL_61;
            }
            if (!__n[1])
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315138;
                *(void *)long long v149 = "decodeHEVCDecoderConfigurationRecord";
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s SPS size <= 0", buf, 0xCu);
              }
              uint64_t v20 = 0;
              char v21 = 0;
              uint32_t v22 = 0;
              int v23 = -30;
              goto LABEL_61;
            }
            if (__n[1] > v27) {
              unsigned __int16 v27 = __n[1];
            }
            v136 += __n[1];
          }
          break;
        case ' ':
          int v28 = v135;
          if (!v135 || v135 + v123 >= 9)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)long long v149 = "decodeHEVCDecoderConfigurationRecord";
              *(_WORD *)&v149[8] = 1024;
              *(_DWORD *)long long v150 = v28;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s too many VPS %d", buf, 0x12u);
            }
            uint64_t v20 = 0;
            char v21 = 0;
            uint32_t v22 = 0;
            int v23 = -26;
            goto LABEL_61;
          }
          unsigned int v29 = 0;
          int v123 = (v135 + v123);
          do
          {
            if (safeGetShort(v131, &__n[2], &v136, v132))
            {
              uint64_t v20 = 0;
              char v21 = 0;
              uint32_t v22 = 0;
              int v23 = -27;
              goto LABEL_61;
            }
            if (!__n[2])
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315138;
                *(void *)long long v149 = "decodeHEVCDecoderConfigurationRecord";
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s VPS size <= 0", buf, 0xCu);
              }
              uint64_t v20 = 0;
              char v21 = 0;
              uint32_t v22 = 0;
              int v23 = -28;
              goto LABEL_61;
            }
            unsigned __int16 v30 = v129;
            if (__n[2] > v129) {
              unsigned __int16 v30 = __n[2];
            }
            unsigned __int16 v129 = v30;
            v136 += __n[2];
            ++v29;
          }
          while (v29 < v135);
          break;
      }
      if (++v25 >= v139) {
        goto LABEL_106;
      }
    }
  }
  int v123 = 0;
  LOBYTE(v127) = 0;
  LOBYTE(__dst) = 0;
  unsigned __int16 v129 = 0;
  unsigned __int16 v27 = 0;
  unsigned __int16 v26 = 0;
LABEL_106:
  unsigned int v134 = 5;
  unsigned __int8 v133 = 0;
  if (v15)
  {
    if (safeGetByte((uint64_t)v15, &v133, &v134, (unint64_t)ValueAtIndex)) {
      goto LABEL_108;
    }
    if (v133)
    {
      int v35 = 0;
      while (1)
      {
        if (safeGetByte((uint64_t)v15, &v137, &v134, (unint64_t)ValueAtIndex)) {
          goto LABEL_108;
        }
        v137 &= 0x3Fu;
        if (safeGetShort((uint64_t)v15, &v135, &v134, (unint64_t)ValueAtIndex)) {
          goto LABEL_108;
        }
        if (v137 == 34)
        {
          int v38 = v135;
          if ((unsigned __int16)((unsigned __int16)(v135 - 65) >> 6) <= 0x3FEu)
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_108;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)long long v149 = "decodeHEVCDecoderConfigurationRecord";
            *(_WORD *)&v149[8] = 1024;
            *(_DWORD *)long long v150 = v38;
            long long v50 = &_os_log_internal;
            long long v51 = "AppleAVD: %s too many PPS %d";
            uint32_t v52 = 18;
          }
          else
          {
            int v39 = 0;
            LOBYTE(__dst) = __dst + v135;
            while (1)
            {
              if (safeGetShort((uint64_t)v15, __n, &v134, (unint64_t)ValueAtIndex)) {
                goto LABEL_108;
              }
              if (!__n[0]) {
                break;
              }
              if (__n[0] > v26) {
                unsigned __int16 v26 = __n[0];
              }
              v134 += __n[0];
              if (++v39 >= v135) {
                goto LABEL_131;
              }
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_108;
            }
            *(_DWORD *)buf = 136315138;
            *(void *)long long v149 = "decodeHEVCDecoderConfigurationRecord";
            long long v50 = &_os_log_internal;
            long long v51 = "AppleAVD: %s PPS size <= 0";
LABEL_204:
            uint32_t v52 = 12;
          }
          _os_log_impl(&dword_223977000, v50, OS_LOG_TYPE_DEFAULT, v51, buf, v52);
          goto LABEL_108;
        }
        if (v137 == 33) {
          break;
        }
LABEL_131:
        if (++v35 >= v133) {
          goto LABEL_132;
        }
      }
      int v36 = v135;
      if ((unsigned __int16)((unsigned __int16)(v135 - 17) >> 4) <= 0xFFEu)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)long long v149 = "decodeHEVCDecoderConfigurationRecord";
          *(_WORD *)&v149[8] = 1024;
          *(_DWORD *)long long v150 = v36;
          long long v49 = &_os_log_internal;
LABEL_198:
          _os_log_impl(&dword_223977000, v49, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s too many SPS %d", buf, 0x12u);
        }
LABEL_199:
        uint64_t v20 = 0;
        char v21 = 0;
        uint32_t v22 = 0;
        int v23 = -12902;
        goto LABEL_61;
      }
      int v37 = 0;
      LOBYTE(v127) = v127 + v135;
      while (1)
      {
        if (safeGetShort((uint64_t)v15, &__n[1], &v134, (unint64_t)ValueAtIndex)) {
          goto LABEL_108;
        }
        if (!__n[1]) {
          break;
        }
        if (__n[1] > v27) {
          unsigned __int16 v27 = __n[1];
        }
        v134 += __n[1];
        if (++v37 >= v135) {
          goto LABEL_131;
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)long long v149 = "decodeHEVCDecoderConfigurationRecord";
        long long v50 = &_os_log_internal;
        long long v51 = "AppleAVD: %s SPS size <= 0";
        goto LABEL_204;
      }
LABEL_108:
      uint64_t v20 = 0;
      char v21 = 0;
      uint32_t v22 = 0;
LABEL_109:
      int v23 = -4;
      goto LABEL_61;
    }
  }
LABEL_132:
  uint64_t v20 = 0;
  int v23 = -5;
  if (!v123
    || !v129
    || v127 > 0x10u
    || !(_BYTE)v127
    || !v27
    || __dst > 0x40u
    || !(_BYTE)__dst)
  {
    char v21 = 0;
    uint32_t v22 = 0;
    goto LABEL_61;
  }
  char v21 = 0;
  uint32_t v22 = 0;
  if (!v26) {
    goto LABEL_61;
  }
  *(_DWORD *)(a1 + 5608) = v123;
  int v40 = (char *)malloc_type_malloc(v129 * v123, 0x4E94B031uLL);
  uint64_t v20 = v40;
  if (!v40)
  {
    char v21 = 0;
    goto LABEL_187;
  }
  *(void *)(a1 + 5232) = v40;
  *(_DWORD *)(a1 + 5612) = v127;
  __int16 v41 = (char *)malloc_type_malloc(v27 * v127, 0xD51EA834uLL);
  char v21 = v41;
  if (!v41)
  {
LABEL_187:
    uint32_t v22 = 0;
    goto LABEL_188;
  }
  *(void *)(a1 + 524pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v41;
  *(_DWORD *)(a1 + 5616) = __dst;
  int v42 = (char *)malloc_type_malloc(v26 * __dst, 0x937639DBuLL);
  uint32_t v22 = v42;
  if (!v42)
  {
LABEL_188:
    int v23 = -6;
    goto LABEL_61;
  }
  long long v130 = (_DWORD *)(a1 + 5288);
  long long v128 = (_DWORD *)(a1 + 5352);
  *(void *)(a1 + 5248) = v42;
  unsigned __int16 v135 = 0;
  unsigned int v136 = *(_DWORD *)&__n[3];
  if (!(_BYTE)v139)
  {
    CMTime v124 = v21;
    __dsta = v42;
LABEL_207:
    if (v15)
    {
      unsigned __int16 v135 = 0;
      unsigned int v134 = 6;
      if (v133)
      {
        int v53 = 0;
        while (!safeGetByte((uint64_t)v15, &v137, &v134, (unint64_t)ValueAtIndex))
        {
          v137 &= 0x3Fu;
          if (safeGetShort((uint64_t)v15, &v135, &v134, (unint64_t)ValueAtIndex)) {
            break;
          }
          if (v137 == 33)
          {
            if (v135)
            {
              int v56 = 0;
              while (!safeGetShort((uint64_t)v15, &__n[1], &v134, (unint64_t)ValueAtIndex)
                   && __n[1]
                   && (unint64_t)ValueAtIndex >= v134 + __n[1])
              {
                memcpy(v124, &v15[v134], __n[1]);
                v134 += __n[1];
                v124 += __n[1];
                *v130++ = __n[1];
                if (++v56 >= v135) {
                  goto LABEL_227;
                }
              }
              goto LABEL_109;
            }
          }
          else if (v137 == 34 && v135)
          {
            int v54 = 0;
            while (!safeGetShort((uint64_t)v15, __n, &v134, (unint64_t)ValueAtIndex)
                 && __n[0]
                 && (unint64_t)ValueAtIndex >= v134 + __n[0])
            {
              memcpy(__dsta, &v15[v134], __n[0]);
              v134 += __n[0];
              uint64_t v55 = &__dsta[__n[0]];
              *long long v128 = __n[0];
              __dsta = v55;
              ++v128;
              if (++v54 >= v135) {
                goto LABEL_227;
              }
            }
            goto LABEL_109;
          }
LABEL_227:
          if (++v53 >= v133) {
            goto LABEL_228;
          }
        }
        goto LABEL_109;
      }
    }
LABEL_228:
    int v57 = *(_DWORD *)(a1 + 5624);
    switch(v57)
    {
      case 1:
        int v58 = 3;
        break;
      case 4:
        int v58 = 5;
        break;
      case 2:
        int v58 = 4;
        break;
      default:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)long long v149 = v57;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD:  ERROR:  kJVTLibCompressedDataFormat_WrappedNALU_* :: NOT SUPPORTED, storage->naluLengthSize %d", buf, 8u);
        }
        uint64_t v16 = 4294954386;
        goto LABEL_19;
    }
    *(_DWORD *)(a1 + 562pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v58;
    uint64_t v59 = *(unsigned int *)(a1 + 5608);
    if (v59)
    {
      int v60 = 0;
      uint64_t v61 = (int *)(a1 + 5256);
      do
      {
        int v62 = *v61++;
        v60 += v62;
        --v59;
      }
      while (v59);
    }
    else
    {
      int v60 = 0;
    }
    uint64_t v63 = *(unsigned int *)(a1 + 5612);
    if (v63)
    {
      signed int v64 = (int *)(a1 + 5288);
      do
      {
        int v65 = *v64++;
        v60 += v65;
        --v63;
      }
      while (v63);
    }
    uint64_t v66 = *(unsigned int *)(a1 + 5616);
    if (v66)
    {
      uint64_t v67 = (int *)(a1 + 5352);
      do
      {
        int v68 = *v67++;
        v60 += v68;
        --v66;
      }
      while (v66);
    }
    int v69 = *(void **)(a1 + 5632);
    if (v69) {
      free(v69);
    }
    BOOL v70 = malloc_type_malloc(v60 + 1024, 0x8A625851uLL);
    *(void *)(a1 + 5632) = v70;
    if (!v70)
    {
      uint64_t v16 = 4294954392;
      goto LABEL_19;
    }
    int v71 = *(_DWORD *)(a1 + 5620);
    switch(v71)
    {
      case 3:
        if (*(_DWORD *)(a1 + 5608))
        {
          unint64_t v78 = 0;
          int v79 = 0;
          unsigned __int32 v80 = *(char **)(a1 + 5232);
          do
          {
            unsigned int v81 = (unsigned int *)(a1 + 5256 + 4 * v78);
            size_t v82 = *v81;
            int v83 = v79 + v82 + 1;
            memcpy((void *)(*(void *)(a1 + 5632) + v79 + 1), v80, v82);
            *(unsigned char *)(*(void *)(a1 + 5632) + v79) = *((unsigned char *)v81 + 3);
            v80 += *v81;
            ++v78;
            int v79 = v83;
          }
          while (v78 < *(unsigned int *)(a1 + 5608));
        }
        else
        {
          int v83 = 0;
        }
        if (*(_DWORD *)(a1 + 5612))
        {
          unint64_t v96 = 0;
          uint64_t v97 = *(char **)(a1 + 5240);
          uint64_t v98 = a1 + 5288;
          do
          {
            size_t v99 = *(unsigned int *)(v98 + 4 * v96);
            int v100 = v83 + v99 + 1;
            memcpy((void *)(*(void *)(a1 + 5632) + v83 + 1), v97, v99);
            *(unsigned char *)(*(void *)(a1 + 5632) + v83) = *(_DWORD *)(v98 + 4 * v96);
            v97 += *(unsigned int *)(v98 + 4 * v96++);
            int v83 = v100;
          }
          while (v96 < *(unsigned int *)(a1 + 5612));
        }
        else
        {
          int v100 = v83;
        }
        if (*(_DWORD *)(a1 + 5616))
        {
          unint64_t v111 = 0;
          uint64_t v112 = *(char **)(a1 + 5248);
          uint64_t v113 = a1 + 5352;
          do
          {
            size_t v114 = *(unsigned int *)(v113 + 4 * v111);
            int v110 = v100 + v114 + 1;
            memcpy((void *)(*(void *)(a1 + 5632) + v100 + 1), v112, v114);
            *(unsigned char *)(*(void *)(a1 + 5632) + v10pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v113 + 4 * v111);
            v112 += *(unsigned int *)(v113 + 4 * v111++);
            int v100 = v110;
          }
          while (v111 < *(unsigned int *)(a1 + 5616));
        }
        else
        {
          int v110 = v100;
        }
        int v119 = 0x1000000;
        break;
      case 4:
        if (*(_DWORD *)(a1 + 5608))
        {
          unint64_t v84 = 0;
          int v85 = 0;
          int v86 = *(char **)(a1 + 5232);
          do
          {
            CFNumberRef v87 = (unsigned int *)(a1 + 5256 + 4 * v84);
            size_t v88 = *v87;
            int v89 = v85 + v88 + 2;
            memcpy((void *)(*(void *)(a1 + 5632) + v85 + 2), v86, v88);
            *(unsigned char *)(*(void *)(a1 + 5632) + v85) = *((unsigned char *)v87 + 3);
            *(unsigned char *)(*(void *)(a1 + 5632) + v85 + 1) = *((_WORD *)v87 + 1);
            v86 += *v87;
            ++v84;
            int v85 = v89;
          }
          while (v84 < *(unsigned int *)(a1 + 5608));
        }
        else
        {
          int v89 = 0;
        }
        if (*(_DWORD *)(a1 + 5612))
        {
          unint64_t v101 = 0;
          int v102 = *(char **)(a1 + 5240);
          uint64_t v103 = a1 + 5288;
          do
          {
            size_t v104 = *(unsigned int *)(v103 + 4 * v101);
            int v105 = v89 + v104 + 2;
            memcpy((void *)(*(void *)(a1 + 5632) + v89 + 2), v102, v104);
            *(unsigned char *)(*(void *)(a1 + 5632) + v89) = BYTE1(*(_DWORD *)(v103 + 4 * v101));
            *(unsigned char *)(*(void *)(a1 + 5632) + v89 + 1) = *(_DWORD *)(v103 + 4 * v101);
            v102 += *(unsigned int *)(v103 + 4 * v101++);
            int v89 = v105;
          }
          while (v101 < *(unsigned int *)(a1 + 5612));
        }
        else
        {
          int v105 = v89;
        }
        if (*(_DWORD *)(a1 + 5616))
        {
          unint64_t v115 = 0;
          int8x8_t v116 = *(char **)(a1 + 5248);
          uint64_t v117 = a1 + 5352;
          do
          {
            size_t v118 = *(unsigned int *)(v117 + 4 * v115);
            int v110 = v105 + v118 + 2;
            memcpy((void *)(*(void *)(a1 + 5632) + v105 + 2), v116, v118);
            *(unsigned char *)(*(void *)(a1 + 5632) + v105) = BYTE1(*(_DWORD *)(v117 + 4 * v115));
            *(unsigned char *)(*(void *)(a1 + 5632) + v105 + 1) = *(_DWORD *)(v117 + 4 * v115);
            v116 += *(unsigned int *)(v117 + 4 * v115++);
            int v105 = v110;
          }
          while (v115 < *(unsigned int *)(a1 + 5616));
        }
        else
        {
          int v110 = v105;
        }
        int v119 = 0x2000000;
        break;
      case 5:
        if (*(_DWORD *)(a1 + 5608))
        {
          unint64_t v72 = 0;
          int v73 = 0;
          int v74 = *(char **)(a1 + 5232);
          do
          {
            uint64_t v75 = (unsigned int *)(a1 + 5256 + 4 * v72);
            size_t v76 = *v75;
            int v77 = v73 + v76 + 4;
            memcpy((void *)(*(void *)(a1 + 5632) + v73 + 4), v74, v76);
            *(unsigned char *)(*(void *)(a1 + 5632) + v73) = *((unsigned char *)v75 + 3);
            *(unsigned char *)(*(void *)(a1 + 5632) + v73 + 1) = *((_WORD *)v75 + 1);
            *(unsigned char *)(*(void *)(a1 + 5632) + v73 + 2) = BYTE1(*v75);
            *(unsigned char *)(*(void *)(a1 + 5632) + v73 + 3) = *v75;
            v74 += *v75;
            ++v72;
            int v73 = v77;
          }
          while (v72 < *(unsigned int *)(a1 + 5608));
        }
        else
        {
          int v77 = 0;
        }
        if (*(_DWORD *)(a1 + 5612))
        {
          unint64_t v91 = 0;
          unint64_t v92 = *(char **)(a1 + 5240);
          do
          {
            int v93 = (unsigned int *)(a1 + 5288 + 4 * v91);
            size_t v94 = *v93;
            int v95 = v77 + v94 + 4;
            memcpy((void *)(*(void *)(a1 + 5632) + v77 + 4), v92, v94);
            *(unsigned char *)(*(void *)(a1 + 5632) + v77) = *((unsigned char *)v93 + 3);
            *(unsigned char *)(*(void *)(a1 + 5632) + v77 + 1) = *((_WORD *)v93 + 1);
            *(unsigned char *)(*(void *)(a1 + 5632) + v77 + 2) = BYTE1(*v93);
            *(unsigned char *)(*(void *)(a1 + 5632) + v77 + 3) = *v93;
            v92 += *v93;
            ++v91;
            int v77 = v95;
          }
          while (v91 < *(unsigned int *)(a1 + 5612));
        }
        else
        {
          int v95 = v77;
        }
        if (*(_DWORD *)(a1 + 5616))
        {
          unint64_t v106 = 0;
          uint64_t v107 = *(char **)(a1 + 5248);
          do
          {
            unint64_t v108 = (unsigned int *)(a1 + 5352 + 4 * v106);
            size_t v109 = *v108;
            int v110 = v95 + v109 + 4;
            memcpy((void *)(*(void *)(a1 + 5632) + v95 + 4), v107, v109);
            *(unsigned char *)(*(void *)(a1 + 5632) + v95) = *((unsigned char *)v108 + 3);
            *(unsigned char *)(*(void *)(a1 + 5632) + v95 + 1) = *((_WORD *)v108 + 1);
            *(unsigned char *)(*(void *)(a1 + 5632) + v95 + 2) = BYTE1(*v108);
            *(unsigned char *)(*(void *)(a1 + 5632) + v95 + 3) = *v108;
            v107 += *v108;
            ++v106;
            int v95 = v110;
          }
          while (v106 < *(unsigned int *)(a1 + 5616));
        }
        else
        {
          int v110 = v95;
        }
        int v119 = 0x4000000;
        break;
      default:
        unsigned int v90 = 0;
LABEL_319:
        uint64_t v16 = 0;
        *(_DWORD *)(a1 + 564pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v90;
        goto LABEL_21;
    }
    unsigned int v90 = v119 & 0xFF000000 | v110 & 0xFFFFFF;
    goto LABEL_319;
  }
  int v120 = 0;
  int8x8_t v122 = (_DWORD *)(a1 + 5256);
  CMTime v124 = v21;
  __dsta = v42;
  unsigned int v121 = v20;
  while (1)
  {
    if (safeGetByte(v131, &v137, &v136, v132))
    {
      int v23 = -34;
      goto LABEL_61;
    }
    v137 &= 0x3Fu;
    if (safeGetShort(v131, &v135, &v136, v132))
    {
      int v23 = -35;
      goto LABEL_61;
    }
    if (v137 == 32) {
      break;
    }
    if (v137 == 33)
    {
      if (v135)
      {
        int v48 = 0;
        while (!safeGetShort(v131, &__n[1], &v136, v132))
        {
          if (!__n[1] || v132 < v136 + __n[1])
          {
            int v23 = -39;
            goto LABEL_61;
          }
          memcpy(v124, (const void *)(v131 + v136), __n[1]);
          v136 += __n[1];
          v124 += __n[1];
          *v130++ = __n[1];
          if (++v48 >= v135) {
            goto LABEL_170;
          }
        }
        int v23 = -38;
        goto LABEL_61;
      }
    }
    else if (v137 == 34 && v135)
    {
      int v43 = 0;
      while (1)
      {
        if (safeGetShort(v131, __n, &v136, v132))
        {
          int v23 = -40;
          goto LABEL_61;
        }
        int v44 = __n[0];
        if (!__n[0] || v132 < v136 + __n[0]) {
          break;
        }
        memcpy(__dsta, (const void *)(v131 + v136), __n[0]);
        v136 += __n[0];
        __int16 v45 = &__dsta[__n[0]];
        *long long v128 = __n[0];
        __dsta = v45;
        ++v128;
        if (++v43 >= v135) {
          goto LABEL_170;
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)long long v149 = v44;
        *(_WORD *)&v149[4] = 1024;
        *(_DWORD *)&v149[6] = v136;
        *(_WORD *)long long v150 = 2048;
        *(void *)&v150[2] = v132;
        __int16 v151 = 1024;
        int v152 = v43;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ppsNALUAndRBSPSize %d size1 %d configRecordSize %zu i %d\n", buf, 0x1Eu);
      }
      int v23 = -41;
      goto LABEL_61;
    }
LABEL_170:
    if (++v120 >= v139) {
      goto LABEL_207;
    }
  }
  if (!v135) {
    goto LABEL_170;
  }
  int v46 = 0;
  while (!safeGetShort(v131, &__n[2], &v136, v132))
  {
    if (!__n[2] || v132 < v136 + __n[2])
    {
      int v23 = -37;
      goto LABEL_61;
    }
    memcpy(v121, (const void *)(v131 + v136), __n[2]);
    v136 += __n[2];
    __int16 v47 = &v121[__n[2]];
    *int8x8_t v122 = __n[2];
    unsigned int v121 = v47;
    ++v122;
    if (++v46 >= v135) {
      goto LABEL_170;
    }
  }
  int v23 = -36;
LABEL_61:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)long long v149 = "decodeHEVCDecoderConfigurationRecord";
    *(_WORD *)&v149[8] = 1024;
    *(_DWORD *)long long v150 = v23;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
  if (v20)
  {
    free(v20);
    *(void *)uint64_t v3 = 0;
  }
  if (v21)
  {
    free(v21);
    *(void *)(a1 + 524pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  if (v22)
  {
    free(v22);
    *(void *)(a1 + 5248) = 0;
  }
  uint64_t v16 = 4294967292;
LABEL_17:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)long long v149 = "SeqAndPicParamSetFromImageDescExt";
    *(_WORD *)&v149[8] = 1024;
    *(_DWORD *)long long v150 = v16;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
LABEL_19:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)long long v149 = "CreateHeaderBuffer";
    *(_WORD *)&v149[8] = 1024;
    *(_DWORD *)long long v150 = v16;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
LABEL_21:
  if (*(void *)v3) {
    free(*(void **)v3);
  }
  *(void *)(a1 + 5232) = 0;
  unsigned int v17 = *(void **)(a1 + 5240);
  if (v17) {
    free(v17);
  }
  *(void *)(a1 + 524pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  unsigned int v18 = *(void **)(a1 + 5248);
  if (v18) {
    free(v18);
  }
  *(void *)(a1 + 5248) = 0;
  return v16;
}

uint64_t CreateHeaderBuffer_1(uint64_t a1, CMFormatDescriptionRef desc)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 5232;
  Extensiouint64_t n = CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x263F00E90]);
  if (!Extension
    || (CFNumberRef v5 = Extension, TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(v5))
    || (CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)v5, @"avcC")) == 0
    || (ValueAtIndex = Value, CFTypeID v9 = CFArrayGetTypeID(), v9 == CFGetTypeID(ValueAtIndex))
    && (CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 0)) == 0
    || (CFTypeID v10 = CFDataGetTypeID(), v10 != CFGetTypeID(ValueAtIndex)))
  {
    uint64_t v15 = 4294958325;
LABEL_21:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v89 = "SeqAndPicParamSetFromImageDescExt";
      __int16 v90 = 1024;
      int v91 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD_H264VideoDecoder ERROR: SeqAndPicParamSetFromImageDescExt returned error", buf, 2u);
    }
    goto LABEL_25;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)ValueAtIndex);
  unint64_t Length = CFDataGetLength((CFDataRef)ValueAtIndex);
  char v87 = 1;
  char v86 = 0;
  __int16 v85 = 0;
  char v84 = -1;
  char v83 = -31;
  unsigned __int8 v82 = 0;
  __uint64_t n = 0;
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  if (safeGetByte((uint64_t)BytePtr, &v87, (_DWORD *)&__n + 1, Length)) {
    goto LABEL_13;
  }
  if (safeGetByte((uint64_t)BytePtr, &v86, (_DWORD *)&__n + 1, Length)) {
    goto LABEL_13;
  }
  if (safeGetByte((uint64_t)BytePtr, (unsigned char *)&v85 + 1, (_DWORD *)&__n + 1, Length)) {
    goto LABEL_13;
  }
  if (safeGetByte((uint64_t)BytePtr, &v85, (_DWORD *)&__n + 1, Length)) {
    goto LABEL_13;
  }
  if (safeGetByte((uint64_t)BytePtr, &v84, (_DWORD *)&__n + 1, Length)) {
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 6412) = (v84 & 3) + 1;
  if (safeGetByte((uint64_t)BytePtr, &v83, (_DWORD *)&__n + 1, Length)) {
    goto LABEL_13;
  }
  int v80 = HIDWORD(__n);
  int v18 = v83 & 0x1F;
  *(_DWORD *)(a1 + 640pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v18;
  if (v18)
  {
    LODWORD(v19) = 0;
    while (!safeGetShort((uint64_t)BytePtr, (_WORD *)&__n + 1, &v80, Length)
         && WORD1(__n)
         && Length >= v80 + WORD1(__n))
    {
      size_t v19 = v19 + WORD1(__n);
      v80 += WORD1(__n);
      if (!--v18)
      {
        uint64_t v79 = v3;
        goto LABEL_40;
      }
    }
LABEL_13:
    int v13 = 0;
    CFTypeID v14 = 0;
    uint64_t v15 = 4294967292;
LABEL_14:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v89 = "JVTLibCompDecodeAVCDecoderConfigurationRecord";
      __int16 v90 = 1024;
      int v91 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
    }
    if (v13)
    {
      free(v13);
      *(void *)uint64_t v3 = 0;
    }
    if (v14)
    {
      free(v14);
      *(void *)(a1 + 524pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    }
    goto LABEL_21;
  }
  uint64_t v79 = v3;
  size_t v19 = 0;
LABEL_40:
  uint64_t v20 = (char *)malloc_type_malloc(v19, 0xD5BCC562uLL);
  int v13 = v20;
  if (!v20)
  {
    CFTypeID v14 = 0;
    goto LABEL_51;
  }
  *(void *)(a1 + 5232) = v20;
  int v21 = *(_DWORD *)(a1 + 6400);
  if (v21)
  {
    uint32_t v22 = (_DWORD *)(a1 + 5248);
    int v23 = v20;
    while (!safeGetShort((uint64_t)BytePtr, (_WORD *)&__n + 1, (_DWORD *)&__n + 1, Length)
         && WORD1(__n)
         && Length >= HIDWORD(__n) + WORD1(__n))
    {
      memcpy(v23, &BytePtr[HIDWORD(__n)], WORD1(__n));
      HIDWORD(__n) += WORD1(__n);
      v23 += WORD1(__n);
      *v22++ = WORD1(__n);
      if (!--v21) {
        goto LABEL_47;
      }
    }
    goto LABEL_48;
  }
LABEL_47:
  if (safeGetByte((uint64_t)BytePtr, &v82, (_DWORD *)&__n + 1, Length))
  {
LABEL_48:
    CFTypeID v14 = 0;
LABEL_49:
    uint64_t v15 = 4294967292;
LABEL_52:
    uint64_t v3 = v79;
    goto LABEL_14;
  }
  int v24 = v82;
  *(_DWORD *)(a1 + 6404) = v82;
  int v80 = HIDWORD(__n);
  if (v24)
  {
    LODWORD(v25) = 0;
    while (!safeGetShort((uint64_t)BytePtr, &__n, &v80, Length)
         && (_WORD)__n
         && Length >= v80 + (unsigned __int16)__n)
    {
      size_t v25 = v25 + (unsigned __int16)__n;
      --v82;
      v80 += (unsigned __int16)__n;
      if (!v82) {
        goto LABEL_61;
      }
    }
    goto LABEL_48;
  }
  size_t v25 = 0;
LABEL_61:
  unsigned __int16 v26 = (char *)malloc_type_malloc(v25, 0xF0363C9CuLL);
  CFTypeID v14 = v26;
  if (!v26)
  {
LABEL_51:
    uint64_t v15 = 4294967290;
    goto LABEL_52;
  }
  uint64_t v27 = a1 + 5376;
  *(void *)(a1 + 524pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v26;
  unsigned __int8 v82 = *(unsigned char *)(a1 + 6404);
  if (v82)
  {
    int v28 = v26;
    unsigned int v29 = (_DWORD *)(a1 + 5376);
    while (!safeGetShort((uint64_t)BytePtr, &__n, (_DWORD *)&__n + 1, Length)
         && (_WORD)__n
         && Length >= HIDWORD(__n) + (unsigned __int16)__n)
    {
      memcpy(v28, &BytePtr[HIDWORD(__n)], (unsigned __int16)__n);
      int v30 = (unsigned __int16)__n;
      v28 += (unsigned __int16)__n;
      *v29++ = (unsigned __int16)__n;
      --v82;
      HIDWORD(__n) += v30;
      if (!v82) {
        goto LABEL_68;
      }
    }
    goto LABEL_49;
  }
LABEL_68:
  int v31 = *(_DWORD *)(a1 + 6412);
  switch(v31)
  {
    case 1:
      int v32 = 3;
      break;
    case 4:
      int v32 = 5;
      break;
    case 2:
      int v32 = 4;
      break;
    default:
      uint64_t v15 = 4294954386;
      goto LABEL_94;
  }
  *(_DWORD *)(a1 + 6408) = v32;
  int v33 = *(_DWORD *)(a1 + 6400);
  if (v33)
  {
    int v34 = 0;
    int v35 = (int *)(a1 + 5248);
    uint64_t v36 = *(unsigned int *)(a1 + 6400);
    do
    {
      int v37 = *v35++;
      v34 += v37;
      --v36;
    }
    while (v36);
  }
  else
  {
    int v34 = 0;
  }
  int v38 = v34 + v33 * v31;
  int v39 = *(_DWORD *)(a1 + 6404);
  if (v39)
  {
    uint64_t v40 = *(unsigned int *)(a1 + 6404);
    __int16 v41 = (int *)(a1 + 5376);
    do
    {
      int v42 = *v41++;
      v38 += v42;
      --v40;
    }
    while (v40);
  }
  int v43 = v39 * v31;
  int v44 = *(void **)(a1 + 6416);
  if (v44) {
    free(v44);
  }
  __int16 v45 = malloc_type_malloc(v38 + v43 + 1024, 0xB818FA50uLL);
  *(void *)(a1 + 6416) = v45;
  if (v45)
  {
    int v46 = *(_DWORD *)(a1 + 6408);
    if (v46 == 3)
    {
      if (*(_DWORD *)(a1 + 6400))
      {
        unint64_t v53 = 0;
        int v54 = 0;
        uint64_t v55 = *(char **)(a1 + 5232);
        uint64_t v56 = a1 + 5248;
        do
        {
          size_t v57 = *(unsigned int *)(v56 + 4 * v53);
          int v58 = v54 + v57 + 1;
          memcpy((void *)(*(void *)(a1 + 6416) + v54 + 1), v55, v57);
          *(unsigned char *)(*(void *)(a1 + 6416) + v54) = *(_DWORD *)(v56 + 4 * v53);
          v55 += *(unsigned int *)(v56 + 4 * v53++);
          int v54 = v58;
        }
        while (v53 < *(unsigned int *)(a1 + 6400));
      }
      else
      {
        int v58 = 0;
      }
      if (*(_DWORD *)(a1 + 6404))
      {
        unint64_t v71 = 0;
        unint64_t v72 = *(char **)(a1 + 5240);
        do
        {
          size_t v73 = *(unsigned int *)(v27 + 4 * v71);
          int v74 = v58 + v73 + 1;
          memcpy((void *)(*(void *)(a1 + 6416) + v58 + 1), v72, v73);
          *(unsigned char *)(*(void *)(a1 + 6416) + v58) = *(_DWORD *)(v27 + 4 * v71);
          v72 += *(unsigned int *)(v27 + 4 * v71++);
          int v58 = v74;
        }
        while (v71 < *(unsigned int *)(a1 + 6404));
      }
      else
      {
        int v74 = v58;
      }
      int v78 = 0x1000000;
    }
    else
    {
      if (v46 != 4)
      {
        if (v46 == 5)
        {
          if (*(_DWORD *)(a1 + 6400))
          {
            unint64_t v47 = 0;
            int v48 = 0;
            long long v49 = *(char **)(a1 + 5232);
            do
            {
              long long v50 = (unsigned int *)(a1 + 5248 + 4 * v47);
              size_t v51 = *v50;
              int v52 = v48 + v51 + 4;
              memcpy((void *)(*(void *)(a1 + 6416) + v48 + 4), v49, v51);
              *(unsigned char *)(*(void *)(a1 + 6416) + v48) = *((unsigned char *)v50 + 3);
              *(unsigned char *)(*(void *)(a1 + 6416) + v48 + 1) = *((_WORD *)v50 + 1);
              *(unsigned char *)(*(void *)(a1 + 6416) + v48 + 2) = BYTE1(*v50);
              *(unsigned char *)(*(void *)(a1 + 6416) + v48 + 3) = *v50;
              v49 += *v50;
              ++v47;
              int v48 = v52;
            }
            while (v47 < *(unsigned int *)(a1 + 6400));
          }
          else
          {
            int v52 = 0;
          }
          if (*(_DWORD *)(a1 + 6404))
          {
            unint64_t v66 = 0;
            uint64_t v67 = *(char **)(a1 + 5240);
            do
            {
              int v68 = (unsigned int *)(a1 + 5376 + 4 * v66);
              size_t v69 = *v68;
              int v70 = v52 + v69 + 4;
              memcpy((void *)(*(void *)(a1 + 6416) + v52 + 4), v67, v69);
              *(unsigned char *)(*(void *)(a1 + 6416) + v52) = *((unsigned char *)v68 + 3);
              *(unsigned char *)(*(void *)(a1 + 6416) + v52 + 1) = *((_WORD *)v68 + 1);
              *(unsigned char *)(*(void *)(a1 + 6416) + v52 + 2) = BYTE1(*v68);
              *(unsigned char *)(*(void *)(a1 + 6416) + v52 + 3) = *v68;
              v67 += *v68;
              ++v66;
              int v52 = v70;
            }
            while (v66 < *(unsigned int *)(a1 + 6404));
          }
          else
          {
            int v70 = v52;
          }
          unsigned int v65 = v70 & 0xFFFFFF | 0x4000000;
        }
        else
        {
          unsigned int v65 = 0;
        }
        goto LABEL_126;
      }
      if (*(_DWORD *)(a1 + 6400))
      {
        unint64_t v59 = 0;
        int v60 = 0;
        uint64_t v61 = *(char **)(a1 + 5232);
        uint64_t v62 = a1 + 5248;
        do
        {
          size_t v63 = *(unsigned int *)(v62 + 4 * v59);
          int v64 = v60 + v63 + 2;
          memcpy((void *)(*(void *)(a1 + 6416) + v60 + 2), v61, v63);
          *(unsigned char *)(*(void *)(a1 + 6416) + v6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = BYTE1(*(_DWORD *)(v62 + 4 * v59));
          *(unsigned char *)(*(void *)(a1 + 6416) + v60 + 1) = *(_DWORD *)(v62 + 4 * v59);
          v61 += *(unsigned int *)(v62 + 4 * v59++);
          int v60 = v64;
        }
        while (v59 < *(unsigned int *)(a1 + 6400));
      }
      else
      {
        int v64 = 0;
      }
      if (*(_DWORD *)(a1 + 6404))
      {
        unint64_t v75 = 0;
        size_t v76 = *(char **)(a1 + 5240);
        do
        {
          size_t v77 = *(unsigned int *)(v27 + 4 * v75);
          int v74 = v64 + v77 + 2;
          memcpy((void *)(*(void *)(a1 + 6416) + v64 + 2), v76, v77);
          *(unsigned char *)(*(void *)(a1 + 6416) + v64) = BYTE1(*(_DWORD *)(v27 + 4 * v75));
          *(unsigned char *)(*(void *)(a1 + 6416) + v64 + 1) = *(_DWORD *)(v27 + 4 * v75);
          v76 += *(unsigned int *)(v27 + 4 * v75++);
          int v64 = v74;
        }
        while (v75 < *(unsigned int *)(a1 + 6404));
      }
      else
      {
        int v74 = v64;
      }
      int v78 = 0x2000000;
    }
    unsigned int v65 = v78 & 0xFF000000 | v74 & 0xFFFFFF;
LABEL_126:
    uint64_t v15 = 0;
    *(_DWORD *)(a1 + 6424) = v65;
    uint64_t v3 = v79;
    goto LABEL_27;
  }
  uint64_t v15 = 4294954392;
LABEL_94:
  uint64_t v3 = v79;
LABEL_25:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v89 = "CreateHeaderBuffer";
    __int16 v90 = 1024;
    int v91 = v15;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
LABEL_27:
  if (*(void *)v3) {
    free(*(void **)v3);
  }
  *(void *)(a1 + 5232) = 0;
  uint64_t v16 = *(void **)(a1 + 5240);
  if (v16) {
    free(v16);
  }
  *(void *)(a1 + 524pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  return v15;
}

uint64_t safeGetShort(uint64_t a1, _WORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v4 = *a3;
  unint64_t v5 = (v4 + 2);
  if (v5 > a4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *a2 = bswap32(*(unsigned __int16 *)(a1 + v4)) >> 16;
  *a3 = v5;
  return result;
}

uint64_t safeGetByte(uint64_t a1, unsigned char *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v4 = *a3;
  if ((v4 + 1) > a4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *a2 = *(unsigned char *)(a1 + v4);
  ++*a3;
  return result;
}

uint64_t safeGet32(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v4 = *a3;
  if ((v4 + 4) > a4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *a2 = bswap32(*(_DWORD *)(a1 + v4));
  *a3 += 4;
  return result;
}

uint64_t isEligibleToUseCompression(int a1, signed int a2, signed int a3, signed int a4, signed int a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (MGGetBoolAnswer())
  {
    int CFPreferenceNumber = VideoDecoder_getCFPreferenceNumber(@"AVDUseCompression", @"com.apple.coremedia", 0xFFFFFFFFLL);
    if (CFPreferenceNumber != -1)
    {
      int v11 = CFPreferenceNumber;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 136315394;
        *(void *)uint64_t v16 = "isEligibleToUseCompression";
        *(_WORD *)&v16[8] = 1024;
        *(_DWORD *)unsigned int v17 = v11;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s internal build, useCompression %d", (uint8_t *)&v15, 0x12u);
      }
      if (!v11) {
        return 0;
      }
      if (v11 == 1) {
        return 1;
      }
    }
  }
  if (a1 < 20) {
    return 1;
  }
  if (a2 >= 130 && a3 >= 66)
  {
    BOOL v13 = check_cropping(a2, a3);
    if (a5 >= a3 && a4 >= a2 && !v13 && a4 - a2 <= 15 && a5 - a3 < 16) {
      return 1;
    }
  }
  BOOL v14 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (!v14) {
    return result;
  }
  int v15 = 67109888;
  *(_DWORD *)uint64_t v16 = a2;
  *(_WORD *)&v16[4] = 1024;
  *(_DWORD *)&v16[6] = a3;
  *(_WORD *)unsigned int v17 = 1024;
  *(_DWORD *)&v17[2] = a4;
  __int16 v18 = 1024;
  signed int v19 = a5;
  _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVD: padding ineligible for compression w x h = %d %d, cw x cw = %d %d", (uint8_t *)&v15, 0x1Au);
  return 0;
}

BOOL check_cropping(unsigned int a1, unsigned int a2)
{
  if (a1 <= 0xC0) {
    int v2 = 192;
  }
  else {
    int v2 = a1;
  }
  unsigned int v3 = (v2 + 15) & 0xFFFFFFF0;
  if (a2 <= 0x60) {
    int v4 = 96;
  }
  else {
    int v4 = a2;
  }
  unsigned int v5 = v3 + 31;
  unsigned int v6 = (v3 + 31) >> 5;
  unsigned int v7 = ((v4 + 15) & 0xFFFFFFF0) + 31;
  if (v5 < 0x40)
  {
    unsigned int v9 = 0;
  }
  else
  {
    unsigned int v8 = v6 - 1;
    unsigned int v9 = 1;
    if (v6 != 2)
    {
      do
      {
        ++v9;
        BOOL v10 = v8 > 3;
        v8 >>= 1;
      }
      while (v10);
    }
  }
  unsigned int v11 = a2 & 0xFFFFFFFE;
  unsigned int v12 = v7 >> 5;
  if (v7 < 0x40)
  {
    unsigned int v14 = 0;
  }
  else
  {
    unsigned int v13 = v12 - 1;
    unsigned int v14 = 1;
    if (v12 != 2)
    {
      do
      {
        ++v14;
        BOOL v10 = v13 > 3;
        v13 >>= 1;
      }
      while (v10);
    }
  }
  unsigned int v15 = (a1 & 0xFFFFFFFE) + 31;
  unsigned int v16 = v11 + 31;
  unsigned int v17 = (v11 + 31) >> 5;
  unsigned int v18 = (v15 >> 5) - 1;
  if (v15 < 0x40)
  {
    unsigned int v19 = 0;
  }
  else
  {
    unsigned int v19 = 1;
    if (v15 >> 5 != 2)
    {
      unsigned int v20 = (v15 >> 5) - 1;
      do
      {
        ++v19;
        BOOL v10 = v20 > 3;
        v20 >>= 1;
      }
      while (v10);
    }
  }
  unsigned int v21 = v17 - 1;
  if (v16 < 0x40)
  {
    unsigned int v22 = 0;
  }
  else
  {
    unsigned int v22 = 1;
    if (v17 != 2)
    {
      unsigned int v23 = v17 - 1;
      do
      {
        ++v22;
        BOOL v10 = v23 > 3;
        v23 >>= 1;
      }
      while (v10);
    }
  }
  if (v9 >= v14) {
    unsigned int v9 = v14;
  }
  uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(v18);
  uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(v21);
  if (v9)
  {
    unsigned int v26 = (v9 + 3) & 0xFFFFFFFC;
    uint32x4_t v27 = (uint32x4_t)vdupq_n_s32(v9 - 1);
    int32x4_t v28 = (int32x4_t)xmmword_223ADC330;
    int8x16_t v29 = 0uLL;
    v30.i64[0] = 0x100000001;
    v30.i64[1] = 0x100000001;
    v31.i64[0] = 0x400000004;
    v31.i64[1] = 0x400000004;
    do
    {
      int8x16_t v32 = v29;
      int32x4_t v33 = v28;
      uint32x4_t v34 = (uint32x4_t)vnegq_s32(v28);
      uint32x4_t v35 = (uint32x4_t)vaddq_s32(v33, v33);
      int8x16_t v29 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v24, v34), v30), v35), (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v25, v34), v30), (uint32x4_t)(*(_OWORD *)&v35 | __PAIR128__(0x100000001, 0x100000001)))), v32);
      int32x4_t v28 = vaddq_s32(v28, v31);
      v26 -= 4;
    }
    while (v26);
    int8x16_t v36 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v33, v27), v32, v29);
    *(int8x8_t *)v36.i8 = vorr_s8(*(int8x8_t *)v36.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
    __int32 v37 = v36.i32[0] | v36.i32[1];
  }
  else
  {
    __int32 v37 = 0;
  }
  if (v19 >= v22) {
    unsigned int v19 = v22;
  }
  if (v19)
  {
    unsigned int v38 = (v19 + 3) & 0xFFFFFFFC;
    uint32x4_t v39 = (uint32x4_t)vdupq_n_s32(v19 - 1);
    int32x4_t v40 = (int32x4_t)xmmword_223ADC330;
    int8x16_t v41 = 0uLL;
    v42.i64[0] = 0x100000001;
    v42.i64[1] = 0x100000001;
    v43.i64[0] = 0x400000004;
    v43.i64[1] = 0x400000004;
    do
    {
      int8x16_t v44 = v41;
      int32x4_t v45 = v40;
      uint32x4_t v46 = (uint32x4_t)vnegq_s32(v40);
      uint32x4_t v47 = (uint32x4_t)vaddq_s32(v45, v45);
      int8x16_t v41 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v24, v46), v42), v47), (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v25, v46), v42), (uint32x4_t)(*(_OWORD *)&v47 | __PAIR128__(0x100000001, 0x100000001)))), v44);
      int32x4_t v40 = vaddq_s32(v40, v43);
      v38 -= 4;
    }
    while (v38);
    int8x16_t v48 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v45, v39), v44, v41);
    *(int8x8_t *)v48.i8 = vorr_s8(*(int8x8_t *)v48.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
    __int32 v49 = v48.i32[0] | v48.i32[1];
  }
  else
  {
    __int32 v49 = 0;
  }
  return v12 * (v6 << 10) + (uint64_t)(32 * (v37 | ((int)(v21 | v18) >> v9 << (2 * v9)))) != (v6 << 10) * v17
                                                                                          + (uint64_t)(32 * (v49 | ((int)(v21 | v18) >> v19 << (2 * v19))));
}

uint64_t InitPixelBufferCompressionNotSupported(uint64_t a1)
{
  int v2 = (unsigned __int8 *)(a1 + 5344);
  uint64_t result = InitDisplayPixelBufferCompressionNotSupported(*(void *)a1, *(void *)(a1 + 5184), *(_DWORD *)(a1 + 5224), *(_DWORD *)(a1 + 5208), *(_DWORD *)(a1 + 5212), *(_DWORD *)(a1 + 5216), *(_DWORD *)(a1 + 5220), *(unsigned __int8 *)(a1 + 5345), *(unsigned __int8 *)(a1 + 5344), *(unsigned __int8 *)(a1 + 5401), *(void *)(a1 + 5528), (CFTypeRef *)(a1 + 32), (CFTypeRef *)(a1 + 48), 0, 0);
  if (!result) {
    return InitReferencePixelBufferCompressionNotSupported(*(void *)a1, *(void *)(a1 + 5184), *(_DWORD *)(a1 + 5224), *(_DWORD *)(a1 + 5208), *(_DWORD *)(a1 + 5212), *(_DWORD *)(a1 + 5216), *(_DWORD *)(a1 + 5220), *(unsigned __int8 *)(a1 + 5345), *v2, *(unsigned __int8 *)(a1 + 5401), *(void *)(a1 + 5528), 0, 8, 0, 0, 0, (CFTypeRef *)(a1 + 40), (CFTypeRef *)(a1 + 56));
  }
  return result;
}

uint64_t InitPixelBufferCompressionNotSupported_0(uint64_t a1)
{
  int v2 = (unsigned __int8 *)(a1 + 5744);
  uint64_t result = InitDisplayPixelBufferCompressionNotSupported(*(void *)a1, *(void *)(a1 + 5184), *(_DWORD *)(a1 + 5220), *(_DWORD *)(a1 + 5212), *(_DWORD *)(a1 + 5216), *(_DWORD *)(a1 + 5224), *(_DWORD *)(a1 + 5228), *(unsigned __int8 *)(a1 + 5745), *(unsigned __int8 *)(a1 + 5744), *(unsigned __int8 *)(a1 + 5801), *(void *)(a1 + 8000), (CFTypeRef *)(a1 + 32), (CFTypeRef *)(a1 + 48), *(unsigned char *)(a1 + 16832), *(_DWORD *)(a1 + 16836));
  if (!result) {
    return InitReferencePixelBufferCompressionNotSupported(*(void *)a1, *(void *)(a1 + 5184), *(_DWORD *)(a1 + 5220), *(_DWORD *)(a1 + 5212), *(_DWORD *)(a1 + 5216), *(_DWORD *)(a1 + 5224), *(_DWORD *)(a1 + 5228), *(unsigned __int8 *)(a1 + 5745), *v2, *(unsigned __int8 *)(a1 + 5801), *(void *)(a1 + 8000), *(unsigned __int8 *)(a1 + 5816), 5, 4, 2, 2, (CFTypeRef *)(a1 + 40), (CFTypeRef *)(a1 + 56));
  }
  return result;
}

uint64_t InitPixelBufferCompressionNotSupported_1(uint64_t a1)
{
  int v2 = (unsigned __int8 *)(a1 + 6528);
  uint64_t result = InitDisplayPixelBufferCompressionNotSupported(*(void *)a1, *(void *)(a1 + 5184), *(_DWORD *)(a1 + 5224), *(_DWORD *)(a1 + 5208), *(_DWORD *)(a1 + 5212), *(_DWORD *)(a1 + 5216), *(_DWORD *)(a1 + 5220), *(unsigned __int8 *)(a1 + 6529), *(unsigned __int8 *)(a1 + 6528), *(unsigned __int8 *)(a1 + 6585), *(void *)(a1 + 8792), (CFTypeRef *)(a1 + 32), (CFTypeRef *)(a1 + 48), 0, 0);
  if (!result) {
    return InitReferencePixelBufferCompressionNotSupported(*(void *)a1, *(void *)(a1 + 5184), *(_DWORD *)(a1 + 5224), *(_DWORD *)(a1 + 5208), *(_DWORD *)(a1 + 5212), *(_DWORD *)(a1 + 5216), *(_DWORD *)(a1 + 5220), *(unsigned __int8 *)(a1 + 6529), *v2, *(unsigned __int8 *)(a1 + 6585), *(void *)(a1 + 8792), *(unsigned __int8 *)(a1 + 6600), 4, 4, 4, 4, (CFTypeRef *)(a1 + 40), (CFTypeRef *)(a1 + 56));
  }
  return result;
}

uint64_t InitPixelBufferCompressionNotSupported_2(uint64_t a1)
{
  uint64_t result = InitDisplayPixelBufferCompressionNotSupported(*(void *)a1, *(void *)(a1 + 3120), *(_DWORD *)(a1 + 3160), *(_DWORD *)(a1 + 3144), *(_DWORD *)(a1 + 3148), *(_DWORD *)(a1 + 3152), *(_DWORD *)(a1 + 3156), *(unsigned __int8 *)(a1 + 3265), *(unsigned __int8 *)(a1 + 3264), *(unsigned __int8 *)(a1 + 3321), *(void *)(a1 + 5488), (CFTypeRef *)(a1 + 16), (CFTypeRef *)(a1 + 32), 0, 0);
  if (!result) {
    return InitReferencePixelBufferCompressionNotSupported(*(void *)a1, *(void *)(a1 + 3120), *(_DWORD *)(a1 + 3160), *(_DWORD *)(a1 + 3144), *(_DWORD *)(a1 + 3148), *(_DWORD *)(a1 + 3152), *(_DWORD *)(a1 + 3156), *(unsigned __int8 *)(a1 + 3265), *(unsigned __int8 *)(a1 + 3264), *(unsigned __int8 *)(a1 + 3321), *(void *)(a1 + 5488), 0, 8, 0, 0, 0, (CFTypeRef *)(a1 + 24), (CFTypeRef *)(a1 + 40));
  }
  return result;
}

uint64_t InitReferencePixelBufferCompressionNotSupported(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, unint64_t a11, int a12, int a13, int a14, int a15, int a16, CFTypeRef *a17, CFTypeRef *a18)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  int valuePtr = 6;
  int v43 = 1;
  if (*a18)
  {
    CFRelease(*a18);
    *a18 = 0;
  }
  DescriptionWithsigned int PixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if ((a12 == 1 || a9 == 0) && a3 < 20 || DescriptionWithPixelFormatType == 0)
  {
    createPixelFormatListRef(a8, a9, a10, v48, &v43, 0, a3, 0);
    int UncompressedPixelBufferAttributesDictionary = CreateUncompressedPixelBufferAttributesDictionary(a3, a4, a5, a6, a7, (char *)v48, v43, a11, (__CFDictionary **)a18);
  }
  else
  {
    createPixelFormatListRef(a8, a9, a10, v48, &v43, 1, a3, a12 == 1);
    int UncompressedPixelBufferAttributesDictionary = CreateCompressedPixelBufferAttributesDictionary(a3, a4, a5, a6, a7, (char *)v48, v43, a11, (__CFDictionary **)a18, v40, a13, a14, a15, a16);
  }
  int v29 = UncompressedPixelBufferAttributesDictionary;
  if (UncompressedPixelBufferAttributesDictionary)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int32x4_t v45 = "InitReferencePixelBufferCompressionNotSupported";
      __int16 v46 = 1024;
      int v47 = v29;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Failed to create reference pixel buffer attributes dictionary! ERROR! Status: 0x%x", buf, 0x12u);
    }
    return 4294954385;
  }
  CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFNumberRef v33 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F041C0], v33);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F041D0], @"AVD video decoder - references");
  if (*a17)
  {
    CFRelease(*a17);
    *a17 = 0;
  }
  CVReturn v34 = CVPixelBufferPoolCreate(v31, Mutable, (CFDictionaryRef)*a18, (CVPixelBufferPoolRef *)a17);
  if (v34 || !*a17)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int32x4_t v45 = "InitReferencePixelBufferCompressionNotSupported";
      __int16 v46 = 1024;
      int v47 = v34;
      uint32x4_t v35 = &_os_log_internal;
      int8x16_t v36 = "AppleAVD: %s(): Failed to Create Pixel Buffer Pool! ERROR! CVReturnStatus: 0x%x";
LABEL_24:
      _os_log_impl(&dword_223977000, v35, OS_LOG_TYPE_DEFAULT, v36, buf, 0x12u);
    }
  }
  else
  {
    int v38 = AppleAVDSetParameter(a2, 67, (unsigned __int8 *)*a18);
    if (v38)
    {
      int v39 = v38;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136315394;
      int32x4_t v45 = "InitReferencePixelBufferCompressionNotSupported";
      __int16 v46 = 1024;
      int v47 = v39;
      uint32x4_t v35 = &_os_log_internal;
      int8x16_t v36 = "AppleAVD: %s(): Failed to set parameter! ERROR! Status: 0x%x";
      goto LABEL_24;
    }
    uint64_t v30 = AppleAVDSetParameter(a2, 3, (unsigned __int8 *)*a17);
    if (!v30) {
      goto LABEL_26;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int32x4_t v45 = "InitReferencePixelBufferCompressionNotSupported";
      __int16 v46 = 1024;
      int v47 = v30;
      uint32x4_t v35 = &_os_log_internal;
      int8x16_t v36 = "AppleAVD: %s(): Failed to set parameter! ERROR! Status: 0x%x";
      goto LABEL_24;
    }
  }
LABEL_25:
  uint64_t v30 = 4294954385;
LABEL_26:
  if (v33) {
    CFRelease(v33);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v30;
}

uint64_t createPixelFormatListRef(uint64_t result, int a2, int a3, int *a4, _DWORD *a5, int a6, int a7, int a8)
{
  *a5 = 1;
  int v8 = 875704438;
  *a4 = 875704438;
  if (a6)
  {
    if (!result)
    {
      switch(a2)
      {
        case 0:
          if (a7 <= 19) {
            int v9 = 1278226488;
          }
          else {
            int v9 = 642527288;
          }
          goto LABEL_63;
        case 1:
          if (a3) {
            int v9 = 1534617136;
          }
          else {
            int v9 = 1534621232;
          }
          if (a3) {
            int v10 = 645424688;
          }
          else {
            int v10 = 645428784;
          }
          if (a3) {
            int v15 = 590898736;
          }
          else {
            int v15 = 590902832;
          }
          if (a8) {
            int v10 = v15;
          }
          goto LABEL_57;
        case 2:
LABEL_21:
          if (a3) {
            int v9 = 1534617138;
          }
          else {
            int v9 = 1534621234;
          }
          int v10 = 645424690;
          BOOL v11 = a3 == 0;
          int v12 = 645428786;
          goto LABEL_55;
        case 3:
          BOOL v11 = a3 == 0;
          if (a3) {
            int v9 = 1530422836;
          }
          else {
            int v9 = 1530426932;
          }
          int v10 = 641230388;
LABEL_54:
          int v12 = v10 | 0x1000;
LABEL_55:
          if (v11) {
            int v10 = v12;
          }
LABEL_57:
          if (a7 >= 20) {
            int v9 = v10;
          }
          goto LABEL_63;
        default:
          return result;
      }
    }
    switch(a2)
    {
      case 0:
        if (result >= 3) {
          int v9 = 1278226742;
        }
        else {
          int v9 = 1278226736;
        }
        if (result >= 3) {
          int v10 = 642527542;
        }
        else {
          int v10 = 642527536;
        }
        goto LABEL_57;
      case 1:
        BOOL v11 = a3 == 0;
        if (a3) {
          int v9 = 1534617136;
        }
        else {
          int v9 = 1534621232;
        }
        int v10 = 645424688;
        goto LABEL_54;
      case 2:
        goto LABEL_21;
      case 3:
        if (a3) {
          int v9 = 1534617140;
        }
        else {
          int v9 = 1534621236;
        }
        int v10 = 645424692;
        int v12 = 645428788;
        BOOL v11 = a3 == 0;
        goto LABEL_55;
      default:
        return result;
    }
  }
  else
  {
    if (result)
    {
      switch(a2)
      {
        case 0:
          if (result >= 3) {
            int v9 = 1278226742;
          }
          else {
            int v9 = 1278226736;
          }
          goto LABEL_63;
        case 1:
          int v9 = 1882468912;
          int v13 = 1885745712;
          goto LABEL_36;
        case 2:
          int v9 = 1882468914;
          BOOL v14 = a3 == 0;
          int v13 = 1885745714;
          goto LABEL_37;
        case 3:
          int v9 = 1882469428;
          int v13 = 1885746228;
LABEL_36:
          BOOL v14 = a3 == 0;
LABEL_37:
          if (!v14) {
            int v9 = v13;
          }
          goto LABEL_63;
        default:
          return result;
      }
    }
    int v9 = 1278226488;
    switch(a2)
    {
      case 0:
        goto LABEL_63;
      case 1:
        int v9 = 875704422;
        goto LABEL_61;
      case 2:
        int v9 = 875704934;
        int v8 = 875704950;
        goto LABEL_61;
      case 3:
        int v9 = 875836518;
        int v8 = 875836534;
LABEL_61:
        if (!a3) {
          int v9 = v8;
        }
LABEL_63:
        *a4 = v9;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t InitDisplayPixelBufferCompressionNotSupported(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, unsigned int a9, int a10, unint64_t a11, CFTypeRef *a12, CFTypeRef *a13, char a14, int a15)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v29 = 1;
  if (*a13)
  {
    CFRelease(*a13);
    *a13 = 0;
  }
  createPixelFormatList(a8, a9, a10, 1, v34, &v29, 0, a3, a14, a15, 0);
  int DispPixelBufferAttributesDictionary = CreateDispPixelBufferAttributesDictionary(a3, a4, a5, a6, a7, (char *)v34, v29, a11, (__CFDictionary **)a13);
  if (!DispPixelBufferAttributesDictionary)
  {
    if (*a12)
    {
      CFRelease(*a12);
      *a12 = 0;
    }
    VTDecoderSessionSetPixelBufferAttributes();
    *a12 = 0;
    int v23 = AppleAVDSetParameter(a2, 68, (unsigned __int8 *)*a13);
    if (v23)
    {
      int v24 = v23;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 4294954385;
      }
    }
    else
    {
      uint64_t result = AppleAVDSetParameter(a2, 4, (unsigned __int8 *)*a12);
      if (!result) {
        return result;
      }
      int v24 = result;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 4294954385;
      }
    }
    *(_DWORD *)buf = 136315394;
    CFAllocatorRef v31 = "InitDisplayPixelBufferCompressionNotSupported";
    __int16 v32 = 1024;
    int v33 = v24;
    unsigned int v21 = &_os_log_internal;
    unsigned int v22 = "AppleAVD: %s(): Failed to set parameter! ERROR! Status: 0x%x";
    goto LABEL_14;
  }
  int v20 = DispPixelBufferAttributesDictionary;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    CFAllocatorRef v31 = "InitDisplayPixelBufferCompressionNotSupported";
    __int16 v32 = 1024;
    int v33 = v20;
    unsigned int v21 = &_os_log_internal;
    unsigned int v22 = "AppleAVD: %s(): Failed to create display pixel buffer attributes dictionary! ERROR! Status: 0x%x";
LABEL_14:
    _os_log_impl(&dword_223977000, v21, OS_LOG_TYPE_DEFAULT, v22, buf, 0x12u);
  }
  return 4294954385;
}

uint64_t GetNoSecondWriteFlagDisp(uint64_t a1, BOOL *a2)
{
  PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool();
  if (PixelBufferPool)
  {
    uint64_t v4 = GetNoSecondWriteFlag(PixelBufferPool, a2);
    if (v4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v6 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: failed to get IO Surface from buffer pool!", v6, 2u);
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: failed to get a handle to the disp buffer pool!", buf, 2u);
    }
    return 4294954385;
  }
  return v4;
}

BOOL isEligibleToUseSharedDestPixelBuffer(int a1, int a2)
{
  if (a1) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = a2 == 1;
  }
  return !v2;
}

uint64_t AppleAVDWrapperHEVCDecoderDecodeFrameWithOptions(uint64_t a1, uint64_t a2, void *a3, char a4, const __CFDictionary *a5, int *a6)
{
  valuePtr[1] = *MEMORY[0x263EF8340];
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    if (!a5) {
      goto LABEL_25;
    }
    uint64_t v13 = DerivedStorage;
    valuePtr[0] = 0;
    int v33 = 0;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x263F1E6C8]);
    if (!Value)
    {
LABEL_20:
      CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x263F1E6D0]);
      if (v25)
      {
        CFNumberGetValue(v25, kCFNumberIntType, &v33);
        *(_DWORD *)(v13 + 5824) = v33;
        uint64_t v26 = *(void *)(v13 + 5184);
        if (!v26)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            uint64_t v35 = "AppleAVDWrapperHEVCDecoderDecodeFrameWithOptions";
            unsigned int v22 = &_os_log_internal;
            int v23 = "AppleAVD: ERROR: %s() - trying to set kAppleAVDExtraInloopFilter before videoContext was created!\n";
            goto LABEL_37;
          }
          goto LABEL_39;
        }
        if (AppleAVDSetParameter(v26, 20, (unsigned __int8 *)&v33))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            uint64_t v35 = "AppleAVDWrapperHEVCDecoderDecodeFrameWithOptions";
            unsigned int v22 = &_os_log_internal;
            int v23 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDExtraInloopFilter returned ERROR\n";
            goto LABEL_37;
          }
LABEL_39:
          uint64_t v24 = 4294954385;
LABEL_40:
          AppleAVDHEVCDecoderEmitErrorToVT(v13);
          int v27 = 2;
          if (!a6)
          {
LABEL_41:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              uint64_t v35 = "AppleAVDWrapperHEVCDecoderDecodeFrameWithOptions";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): Got NULL infoFlagsOut!\n", buf, 0xCu);
            }
            return v24;
          }
LABEL_26:
          *a6 = v27;
          return v24;
        }
      }
LABEL_25:
      uint64_t v24 = AppleAVDWrapperHEVCDecoderDecodeFrame(a1, a2, a3, a4, a6);
      int v27 = 0;
      if (!a6) {
        goto LABEL_41;
      }
      goto LABEL_26;
    }
    CFDictionaryRef v15 = Value;
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x263F1E810]);
    if (v16)
    {
      CFNumberGetValue(v16, kCFNumberIntType, valuePtr);
      CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(v15, (const void *)*MEMORY[0x263F1E808]);
      if (v17)
      {
        CFNumberGetValue(v17, kCFNumberIntType, (char *)valuePtr + 4);
        int v18 = valuePtr[0];
        if (LODWORD(valuePtr[0]) != 1080)
        {
          int v19 = HIDWORD(valuePtr[0]);
          if (HIDWORD(valuePtr[0]) != 1080 && ((LOBYTE(valuePtr[0]) | BYTE4(valuePtr[0])) & 0xF) != 0)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              uint64_t v35 = "AppleAVDWrapperHEVCDecoderDecodeFrameWithOptions";
              __int16 v36 = 1024;
              int v37 = v18;
              __int16 v38 = 1024;
              int v39 = v19;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): Non-mod16 VRA dimensions with width %d, height %d\n", buf, 0x18u);
            }
            if (*(_DWORD *)(v13 + 5204) == 2)
            {
              int v20 = *(_DWORD *)(v13 + 5224);
              if (valuePtr[0] != *(void *)(v13 + 5224))
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_39;
                }
                int v32 = *(_DWORD *)(v13 + 5228);
                *(_DWORD *)buf = 136315650;
                uint64_t v35 = "AppleAVDWrapperHEVCDecoderDecodeFrameWithOptions";
                __int16 v36 = 1024;
                int v37 = v20;
                __int16 v38 = 1024;
                int v39 = v32;
                unsigned int v22 = &_os_log_internal;
                int v23 = "AppleAVD: ERROR: %s(): invalid dimensions (coded width %d, height %d)\n";
                uint32_t v30 = 24;
                goto LABEL_38;
              }
            }
          }
        }
        uint64_t v21 = *(void *)(v13 + 5184);
        if (!v21)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            uint64_t v35 = "AppleAVDWrapperHEVCDecoderDecodeFrameWithOptions";
            unsigned int v22 = &_os_log_internal;
            int v23 = "AppleAVD: ERROR: %s() - trying to set kAppleAVDSetVRADimensions before videoContext was created!\n";
            goto LABEL_37;
          }
          goto LABEL_39;
        }
        if (AppleAVDSetParameter(v21, 32, (unsigned __int8 *)valuePtr))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            uint64_t v35 = "AppleAVDWrapperHEVCDecoderDecodeFrameWithOptions";
            unsigned int v22 = &_os_log_internal;
            int v23 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDSetVRADimensions returned ERROR\n";
LABEL_37:
            uint32_t v30 = 12;
LABEL_38:
            _os_log_impl(&dword_223977000, v22, OS_LOG_TYPE_DEFAULT, v23, buf, v30);
            goto LABEL_39;
          }
          goto LABEL_39;
        }
        goto LABEL_20;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v35 = "AppleAVDWrapperHEVCDecoderDecodeFrameWithOptions";
        int32x4_t v28 = &_os_log_internal;
        int v29 = "AppleAVD: ERROR: %s(): Failed to retrieve kVTDecompressionResolutionKey_Height from dictionary\n";
        goto LABEL_31;
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v35 = "AppleAVDWrapperHEVCDecoderDecodeFrameWithOptions";
      int32x4_t v28 = &_os_log_internal;
      int v29 = "AppleAVD: ERROR: %s(): Failed to retrieve kVTDecompressionResolutionKey_Width from dictionary\n";
LABEL_31:
      _os_log_impl(&dword_223977000, v28, OS_LOG_TYPE_DEFAULT, v29, buf, 0xCu);
    }
    uint64_t v24 = 4294954394;
    goto LABEL_40;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: AppleAVDWrapperHEVCDecoderDecodeFrameWithOptions - ERROR! storage is NULL\n", buf, 2u);
  }
  return 311;
}

uint64_t AppleAVDAllocateCVPixelBuffer(uint64_t a1, unsigned int a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  CFDictionaryRef pixelBufferAttributes = 0;
  OSType valuePtr = 875704438;
  switch(a2)
  {
    case '\x7F':
      uint64_t v4 = (CVPixelBufferRef *)(a1 + 3696);
      break;
    case '}':
      uint64_t v4 = (CVPixelBufferRef *)(a1 + 3712);
      if (*(unsigned char *)(a1 + 880))
      {
        unsigned int v5 = *(_DWORD *)(a1 + 776);
        if (v5 <= 0x13) {
          OSType v6 = 1530426928;
        }
        else {
          OSType v6 = 641234480;
        }
        OSType valuePtr = v6;
        uint64_t v7 = CreateCompressedPixelBufferAttributesDictionary(v5, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 904), *(_DWORD *)(a1 + 908), (char *)&valuePtr, 1, 0, &pixelBufferAttributes, *(unsigned __int8 *)(a1 + 936), 5, 4, 2, 2);
        if (!v7)
        {
          CFDictionaryRef Mutable = pixelBufferAttributes;
          goto LABEL_36;
        }
LABEL_48:
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_51;
        }
        *(_DWORD *)buf = 136315138;
        int8x16_t v42 = "AppleAVDAllocateCVPixelBuffer";
        CFAllocatorRef v31 = &_os_log_internal;
        int v32 = "AppleAVD: %s() :  ERROR: CreateUncompressedPixelBufferAttributesDictionaryRVRA() failed!";
        uint32_t v33 = 12;
        goto LABEL_50;
      }
      break;
    case '~':
      uint64_t v4 = (CVPixelBufferRef *)(a1 + 3704);
      break;
    default:
      uint64_t v4 = 0;
      break;
  }
  int v9 = *(_DWORD *)(a1 + 8);
  int v10 = *(_DWORD *)(a1 + 12);
  int v11 = *(_DWORD *)(a1 + 904);
  int v12 = *(_DWORD *)(a1 + 908);
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    CFMutableArrayRef v13 = 0;
LABEL_41:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int8x16_t v42 = "CreateUncompressedPixelBufferAttributesDictionaryRVRA";
      __int16 v43 = 1024;
      int v44 = -12904;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v13) {
      CFRelease(v13);
    }
    uint64_t v7 = 4294954392;
    goto LABEL_48;
  }
  CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (!v13) {
    goto LABEL_41;
  }
  CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (!v14) {
    goto LABEL_41;
  }
  CFNumberRef v15 = v14;
  CFArrayAppendValue(v13, v14);
  CFRelease(v15);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F04180], v13);
  CFRelease(v13);
  CFNumberRef v16 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFMutableArrayRef v13 = v16;
  if (!v16) {
    goto LABEL_41;
  }
  CFDictionaryAddValue(v16, (const void *)*MEMORY[0x263F0EDC8], (const void *)*MEMORY[0x263EFFB40]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F04130], v13);
  addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04078], 64);
  addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04240], v9);
  addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04118], v10);
  addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04198], 256);
  int v17 = v11 + 31;
  if (v11 < -31) {
    int v17 = v11 + 62;
  }
  signed int v18 = v17 & 0xFFFFFFE0;
  int v19 = v12 + 31;
  if (v12 < -31) {
    int v19 = v12 + 62;
  }
  signed int v20 = v19 & 0xFFFFFFE0;
  if (v12 >= 0) {
    int v21 = v12;
  }
  else {
    int v21 = v12 + 1;
  }
  int v22 = v21 >> 1;
  int v24 = v22 + 15;
  BOOL v23 = v22 < -15;
  int v25 = v22 + 30;
  if (!v23) {
    int v25 = v24;
  }
  signed int v26 = (2 * v25) & 0xFFFFFFE0;
  if (v20 <= v26) {
    signed int v20 = v26;
  }
  BOOL v27 = __OFSUB__(v20, v10);
  int v28 = v20 - v10;
  if ((v28 < 0) ^ v27 | (v28 == 0)) {
    int v29 = 0;
  }
  else {
    int v29 = v28;
  }
  if (v18 > v9) {
    addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F040F8], v18 - v9);
  }
  if (v29) {
    addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F040D8], v29);
  }
  CFDictionaryRef pixelBufferAttributes = Mutable;
  CFRelease(v13);
LABEL_36:
  uint64_t v30 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], *(int *)(a1 + 8), *(int *)(a1 + 12), valuePtr, Mutable, v4);
  if (v30)
  {
    uint64_t v7 = v30;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_51;
    }
    *(_DWORD *)buf = 136315394;
    int8x16_t v42 = "AppleAVDAllocateCVPixelBuffer";
    __int16 v43 = 1024;
    int v44 = a2;
    CFAllocatorRef v31 = &_os_log_internal;
    int v32 = "AppleAVD: %s() :  ERROR: CVPixelBufferCreate failed refSurfaceListIndx:%d";
    goto LABEL_39;
  }
  IOSurface = CVPixelBufferGetIOSurface(*v4);
  if (IOSurface)
  {
    __int16 v36 = IOSurface;
    switch(a2)
    {
      case '\x7F':
        int v37 = @"AVD video decoder RVRABuffFirst";
        break;
      case '~':
        int v37 = @"AVD video decoder RVRABuffSecond";
        break;
      case '}':
        int v37 = @"AVD video decoder MuxedAlphaChromaScratchBuff";
        break;
      default:
LABEL_64:
        uint64_t ID = IOSurfaceGetID(v36);
        uint64_t v7 = AppleAVDMapPixelBuffer(a1, a2, ID, 0);
        if (v7 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          int8x16_t v42 = "AppleAVDAllocateCVPixelBuffer";
          __int16 v43 = 1024;
          int v44 = v7;
          __int16 v45 = 1024;
          unsigned int v46 = a2;
          CFAllocatorRef v31 = &_os_log_internal;
          int v32 = "AppleAVD: %s(): buffer map failed error: %d refSurfaceListIndx:%d\n";
          uint32_t v33 = 24;
          goto LABEL_50;
        }
        goto LABEL_51;
    }
    IOSurfaceSetValue(IOSurface, (CFStringRef)*MEMORY[0x263F0EE28], v37);
    goto LABEL_64;
  }
  uint64_t v7 = 3758097085;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int8x16_t v42 = "AppleAVDAllocateCVPixelBuffer";
    __int16 v43 = 1024;
    int v44 = a2;
    CFAllocatorRef v31 = &_os_log_internal;
    int v32 = "AppleAVD: %s() :  ioSurfaceRef for refSurfaceListIndx:%d is NULL!";
LABEL_39:
    uint32_t v33 = 18;
LABEL_50:
    _os_log_impl(&dword_223977000, v31, OS_LOG_TYPE_DEFAULT, v32, buf, v33);
  }
LABEL_51:
  if (pixelBufferAttributes) {
    CFRelease(pixelBufferAttributes);
  }
  return v7;
}

uint64_t CreateUncompressedPixelBufferAttributesDictionary(int a1, int a2, int a3, int a4, int a5, char *a6, int a7, unint64_t a8, __CFDictionary **a9)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    CFMutableArrayRef v18 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
    if (v18)
    {
      int v50 = a4;
      int v19 = a3;
      int v20 = a2;
      int v21 = a1;
      if (a7 < 1)
      {
LABEL_7:
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F04180], v18);
        CFRelease(v18);
        CFMutableArrayRef v18 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (v18)
        {
          int v25 = (const void **)MEMORY[0x263EFFB40];
          int v26 = v21;
          int v27 = v20;
          if (a8)
          {
            int v28 = (const void *)*MEMORY[0x263F0EF40];
            if (HIDWORD(a8) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              int v52 = "CreateUncompressedPixelBufferAttributesDictionary";
              __int16 v53 = 1024;
              int v54 = 1113;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            setIntValue(v18, v28, a8);
            CFDictionaryAddValue(v18, (const void *)*MEMORY[0x263F0EDC8], *v25);
          }
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F04130], v18);
          addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04078], 64);
          addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04240], v20);
          addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04118], v19);
          addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04198], 256);
          if (v26 < 20)
          {
            int v40 = v50 + 15;
            if (v50 < -15) {
              int v40 = v50 + 30;
            }
            signed int v30 = (v40 & 0xFFFFFFF0) + 16;
            int v41 = a5 + 7;
            if (a5 < -7) {
              int v41 = a5 + 14;
            }
            signed int v32 = (v41 & 0xFFFFFFF8) + 8;
            if (a5 >= 0) {
              int v42 = a5;
            }
            else {
              int v42 = a5 + 1;
            }
            int v43 = v42 >> 1;
            int v44 = v43 + 7;
            BOOL v35 = v43 < -7;
            int v45 = v43 + 14;
            if (!v35) {
              int v45 = v44;
            }
            signed int v38 = ((2 * v45) & 0xFFFFFFF0) + 16;
          }
          else
          {
            int v29 = v50 + 31;
            if (v50 < -31) {
              int v29 = v50 + 62;
            }
            signed int v30 = v29 & 0xFFFFFFE0;
            int v31 = a5 + 31;
            if (a5 < -31) {
              int v31 = a5 + 62;
            }
            signed int v32 = v31 & 0xFFFFFFE0;
            if (a5 >= 0) {
              int v33 = a5;
            }
            else {
              int v33 = a5 + 1;
            }
            int v34 = v33 >> 1;
            int v36 = v34 + 15;
            BOOL v35 = v34 < -15;
            int v37 = v34 + 30;
            if (!v35) {
              int v37 = v36;
            }
            signed int v38 = (2 * v37) & 0xFFFFFFE0;
          }
          if (v32 <= v38) {
            signed int v32 = v38;
          }
          BOOL v46 = __OFSUB__(v32, v19);
          int v47 = v32 - v19;
          if ((v47 < 0) ^ v46 | (v47 == 0)) {
            int v48 = 0;
          }
          else {
            int v48 = v47;
          }
          if (v30 > v27) {
            addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F040F8], v30 - v27);
          }
          if (v48) {
            addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F040D8], v48);
          }
          if (v26 >= 26) {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F041D8], *v25);
          }
          uint64_t v39 = 0;
          *a9 = Mutable;
LABEL_53:
          CFRelease(v18);
          return v39;
        }
      }
      else
      {
        uint64_t v22 = a7;
        while (1)
        {
          CFNumberRef v23 = CFNumberCreate(0, kCFNumberSInt32Type, a6);
          if (!v23) {
            break;
          }
          CFNumberRef v24 = v23;
          CFArrayAppendValue(v18, v23);
          CFRelease(v24);
          a6 += 4;
          if (!--v22) {
            goto LABEL_7;
          }
        }
      }
    }
  }
  else
  {
    CFMutableArrayRef v18 = 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v52 = "CreateUncompressedPixelBufferAttributesDictionary";
    __int16 v53 = 1024;
    int v54 = -12904;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t v39 = 4294954392;
  if (v18) {
    goto LABEL_53;
  }
  return v39;
}

uint64_t InitPixelBufferCompressionSupported(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, unsigned int a9, int a10, unint64_t a11, int a12, int a13, int a14, int a15, CFTypeRef *a16, CFTypeRef *a17, char a18, int a19, char a20)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  int v37 = 1;
  if (*a17)
  {
    CFRelease(*a17);
    *a17 = 0;
  }
  createPixelFormatList(a8, a9, a10, 1, v42, &v37, 1, a3, a18, a19, a20);
  int CompressedPixelBufferAttributesDictionary = CreateCompressedPixelBufferAttributesDictionary(a3, a4, a5, a6, a7, (char *)v42, v37, a11, (__CFDictionary **)a17, v31, a12, a13, a14, a15);
  if (CompressedPixelBufferAttributesDictionary)
  {
    int v23 = CompressedPixelBufferAttributesDictionary;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 4294954385;
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v39 = "InitPixelBufferCompressionSupported";
    __int16 v40 = 1024;
    int v41 = v23;
    CFNumberRef v24 = &_os_log_internal;
    int v25 = "AppleAVD: %s(): Failed to create compressed pixel buffer attributes dictionary! ERROR! Status: 0x%x";
    goto LABEL_6;
  }
  if (*a16)
  {
    CFRelease(*a16);
    *a16 = 0;
  }
  VTDecoderSessionSetPixelBufferAttributes();
  PixelBufferPool = (const void *)VTDecoderSessionGetPixelBufferPool();
  *a16 = PixelBufferPool;
  if (!PixelBufferPool)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 4294954385;
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v39 = "InitPixelBufferCompressionSupported";
    CFNumberRef v24 = &_os_log_internal;
    int v25 = "AppleAVD: %s(): VT Failed to get Pixel Buffer Pool! ERROR!";
    uint32_t v26 = 12;
    goto LABEL_7;
  }
  CFRetain(PixelBufferPool);
  int v29 = AppleAVDSetParameter(a2, 67, (unsigned __int8 *)*a17);
  if (v29)
  {
    int v30 = v29;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 4294954385;
    }
    goto LABEL_15;
  }
  uint64_t result = AppleAVDSetParameter(a2, 3, 0);
  if (result)
  {
    int v30 = result;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 4294954385;
    }
LABEL_15:
    *(_DWORD *)buf = 136315394;
    uint64_t v39 = "InitPixelBufferCompressionSupported";
    __int16 v40 = 1024;
    int v41 = v30;
    CFNumberRef v24 = &_os_log_internal;
    int v25 = "AppleAVD: %s(): Failed to set parameter! ERROR! Status: 0x%x";
LABEL_6:
    uint32_t v26 = 18;
LABEL_7:
    _os_log_impl(&dword_223977000, v24, OS_LOG_TYPE_DEFAULT, v25, buf, v26);
    return 4294954385;
  }
  return result;
}

uint64_t createPixelFormatList(uint64_t result, unsigned int a2, int a3, int a4, int *a5, int *a6, int a7, int a8, char a9, int a10, char a11)
{
  if (!a9)
  {
    if (result)
    {
      switch(a2)
      {
        case 0u:
          if (result >= 3) {
            int v12 = 1278226742;
          }
          else {
            int v12 = 1278226736;
          }
          *a5 = v12;
          int v11 = 1;
          if (a8 < 20 || !a7) {
            goto LABEL_115;
          }
          if (result >= 3) {
            int v13 = 642527542;
          }
          else {
            int v13 = 642527536;
          }
          goto LABEL_113;
        case 1u:
          if (a3) {
            int v17 = 1885745712;
          }
          else {
            int v17 = 1882468912;
          }
          a5[a4 == 0] = v17;
          if (a3) {
            int v18 = 2019963440;
          }
          else {
            int v18 = 2016686640;
          }
          a5[a4 != 0] = v18;
          if (!a7) {
            goto LABEL_114;
          }
          if (a8 < 20) {
            int v19 = 1534617136;
          }
          else {
            int v19 = 645424688;
          }
          int v23 = v19 | 0x1000;
          goto LABEL_97;
        case 2u:
          if (a3) {
            int v20 = 1885745714;
          }
          else {
            int v20 = 1882468914;
          }
          a5[a4 == 0] = v20;
          if (a3) {
            int v21 = 2019963442;
          }
          else {
            int v21 = 2016686642;
          }
          a5[a4 != 0] = v21;
          if (!a7) {
            goto LABEL_114;
          }
          if (a8 < 20)
          {
            int v19 = 1534617138;
            BOOL v22 = a3 == 0;
            int v23 = 1534621234;
          }
          else
          {
            int v19 = 645424690;
            BOOL v22 = a3 == 0;
            int v23 = 645428786;
          }
          goto LABEL_98;
        case 3u:
          if (a3) {
            int v24 = 1885746228;
          }
          else {
            int v24 = 1882469428;
          }
          a5[a4 == 0] = v24;
          if (a3) {
            int v25 = 2019963956;
          }
          else {
            int v25 = 2016687156;
          }
          a5[a4 != 0] = v25;
          if (!a7) {
            goto LABEL_114;
          }
          if (a8 < 20)
          {
            int v19 = 1534617140;
            int v26 = 1534621234;
          }
          else
          {
            int v19 = 645424692;
            int v26 = 645428786;
          }
          int v23 = v26 + 2;
LABEL_97:
          BOOL v22 = a3 == 0;
LABEL_98:
          if (v22) {
            int v19 = v23;
          }
          a5[2] = v19;
          int v11 = 3;
          goto LABEL_115;
        default:
          goto LABEL_34;
      }
    }
    switch(a2)
    {
      case 0u:
        *a5 = 1278226488;
        int v11 = 1;
        if (a8 < 20 || !a7) {
          goto LABEL_115;
        }
        int v13 = 642527288;
        break;
      case 1u:
        if (a3) {
          int v28 = 875704422;
        }
        else {
          int v28 = 875704438;
        }
        *a5 = v28;
        if (!a7) {
          goto LABEL_4;
        }
        if (a8 < 20) {
          int v13 = 1530422832;
        }
        else {
          int v13 = 641230384;
        }
        int v31 = v13 | 0x1000;
        goto LABEL_110;
      case 2u:
        if (a3) {
          int v29 = 875704934;
        }
        else {
          int v29 = 875704950;
        }
        *a5 = v29;
        if (!a7) {
          goto LABEL_4;
        }
        if (a8 < 20)
        {
          int v13 = 1530422834;
          BOOL v30 = a3 == 0;
          int v31 = 1530426930;
        }
        else
        {
          int v13 = 641230386;
          BOOL v30 = a3 == 0;
          int v31 = 641234482;
        }
        goto LABEL_111;
      case 3u:
        if (a3) {
          int v32 = 875836518;
        }
        else {
          int v32 = 875836534;
        }
        *a5 = v32;
        if (!a7) {
          goto LABEL_4;
        }
        if (a8 < 20)
        {
          int v13 = 1530422836;
          int v33 = 1530426930;
        }
        else
        {
          int v13 = 641230388;
          int v33 = 641234482;
        }
        int v31 = v33 + 2;
LABEL_110:
        BOOL v30 = a3 == 0;
LABEL_111:
        if (v30) {
          int v13 = v31;
        }
        break;
      default:
        goto LABEL_34;
    }
    goto LABEL_113;
  }
  if (a10)
  {
    *a5 = a10;
LABEL_4:
    int v11 = 1;
    goto LABEL_115;
  }
  char v14 = a7 & a11;
  if (!result)
  {
    if (a2 < 2)
    {
      *a5 = 1982882104;
      char v34 = v14 ^ 1;
      if (a8 < 20) {
        char v34 = 1;
      }
      if (v34) {
        goto LABEL_4;
      }
      int v13 = 645279800;
      goto LABEL_113;
    }
    if (a2 == 2)
    {
      *a5 = 1983013176;
      char v36 = v14 ^ 1;
      if (a8 < 20) {
        char v36 = 1;
      }
      if (v36) {
        goto LABEL_4;
      }
      int v13 = 645280312;
      goto LABEL_113;
    }
    if (a2 == 3)
    {
      *a5 = 1983144248;
      char v16 = v14 ^ 1;
      if (a8 < 20) {
        char v16 = 1;
      }
      if (v16) {
        goto LABEL_4;
      }
      int v13 = 645280824;
      goto LABEL_113;
    }
    goto LABEL_34;
  }
  if (a2 < 2)
  {
    *a5 = 2016436536;
    char v27 = v14 ^ 1;
    if (a8 < 20) {
      char v27 = 1;
    }
    if (v27) {
      goto LABEL_4;
    }
    int v13 = 645410872;
    goto LABEL_113;
  }
  if (a2 == 2)
  {
    *a5 = 2016567608;
    char v35 = v14 ^ 1;
    if (a8 < 20) {
      char v35 = 1;
    }
    if (v35) {
      goto LABEL_4;
    }
    int v13 = 645411384;
    goto LABEL_113;
  }
  if (a2 != 3)
  {
LABEL_34:
    int v11 = 0;
    goto LABEL_115;
  }
  *a5 = 2016698680;
  char v15 = v14 ^ 1;
  if (a8 < 20) {
    char v15 = 1;
  }
  if (v15) {
    goto LABEL_4;
  }
  int v13 = 645411896;
LABEL_113:
  a5[1] = v13;
LABEL_114:
  int v11 = 2;
LABEL_115:
  *a6 = v11;
  return result;
}

uint64_t CreateCompressedPixelBufferAttributesDictionary(int a1, int a2, int a3, int a4, int a5, char *a6, int a7, unint64_t a8, __CFDictionary **a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    CFMutableArrayRef v23 = 0;
    goto LABEL_17;
  }
  CFMutableArrayRef v23 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (!v23) {
    goto LABEL_17;
  }
  int v47 = a5;
  if (a7 < 1)
  {
LABEL_7:
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F04180], v23);
    CFRelease(v23);
    CFMutableArrayRef v23 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v23) {
      goto LABEL_17;
    }
    char v27 = (const void **)MEMORY[0x263EFFB40];
    int v28 = v47;
    if (a8)
    {
      int v29 = (const void *)*MEMORY[0x263F0EF40];
      if (HIDWORD(a8) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        int v50 = "CreateCompressedPixelBufferAttributesDictionary";
        __int16 v51 = 1024;
        int v52 = 752;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      setIntValue(v23, v29, a8);
      CFDictionaryAddValue(v23, (const void *)*MEMORY[0x263F0EDC8], *v27);
    }
    int valuePtr = 0;
    if (a1 < 20)
    {
      int v46 = a4;
      if (a1 < 14)
      {
        int valuePtr = 128;
        CFNumberRef v35 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
        char v36 = (const void **)MEMORY[0x263F040B8];
      }
      else
      {
        int valuePtr = 4;
        CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberRef v34 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F040B8], v34);
        if (v34) {
          CFRelease(v34);
        }
        *(_DWORD *)buf = 256;
        CFNumberRef v35 = CFNumberCreate(v33, kCFNumberIntType, buf);
        char v36 = (const void **)MEMORY[0x263F040B0];
      }
      CFDictionarySetValue(Mutable, *v36, v35);
      if (v35) {
        CFRelease(v35);
      }
      int v37 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
      signed int v38 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      uint64_t v39 = (const void *)*MEMORY[0x263F0EEF8];
      setIntValue(v38, (const void *)*MEMORY[0x263F0EEF8], a11);
      __int16 v40 = (const void *)*MEMORY[0x263F0EF18];
      setIntValue(v38, (const void *)*MEMORY[0x263F0EF18], a12);
      int v41 = (const void *)*MEMORY[0x263F0EEE0];
      addNumberToDictionary(v38, (const void *)*MEMORY[0x263F0EEE0], 3);
      CFArrayAppendValue(v37, v38);
      if (v38) {
        CFRelease(v38);
      }
      int v42 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      setIntValue(v42, v39, a13);
      setIntValue(v42, v40, a14);
      addNumberToDictionary(v42, v41, 3);
      CFArrayAppendValue(v37, v42);
      if (v42) {
        CFRelease(v42);
      }
      CFDictionaryAddValue(v23, (const void *)*MEMORY[0x263F042C8], v37);
      a4 = v46;
      int v28 = v47;
      if (!v37) {
        goto LABEL_37;
      }
      int v31 = v37;
    }
    else
    {
      *(_DWORD *)buf = 128;
      CFNumberRef v30 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, buf);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F040B0], v30);
      if (!v30)
      {
LABEL_37:
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F04130], v23);
        addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04078], 64);
        addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04240], a2);
        addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04118], a3);
        addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04198], 256);
        if (v28 >= a3) {
          int v43 = v28 - a3;
        }
        else {
          int v43 = 0;
        }
        if (a4 > a2) {
          addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F040F8], a4 - a2);
        }
        int v44 = (const void **)MEMORY[0x263EFFB40];
        if (v43) {
          addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F040D8], v43);
        }
        if (a1 >= 26) {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F041D8], *v44);
        }
        uint64_t v32 = 0;
        *a9 = Mutable;
LABEL_47:
        CFRelease(v23);
        return v32;
      }
      int v31 = v30;
    }
    CFRelease(v31);
    goto LABEL_37;
  }
  uint64_t v24 = a7;
  while (1)
  {
    CFNumberRef v25 = CFNumberCreate(0, kCFNumberSInt32Type, a6);
    if (!v25) {
      break;
    }
    CFNumberRef v26 = v25;
    CFArrayAppendValue(v23, v25);
    CFRelease(v26);
    a6 += 4;
    if (!--v24) {
      goto LABEL_7;
    }
  }
LABEL_17:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v50 = "CreateCompressedPixelBufferAttributesDictionary";
    __int16 v51 = 1024;
    int v52 = -12904;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t v32 = 4294954392;
  if (v23) {
    goto LABEL_47;
  }
  return v32;
}

uint64_t CreateDispPixelBufferAttributesDictionary(int a1, int a2, int a3, int a4, int a5, char *a6, int a7, unint64_t a8, __CFDictionary **a9)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    CFMutableArrayRef v18 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
    if (v18)
    {
      int v31 = a4;
      int v19 = a5;
      int v20 = a1;
      if (a7 < 1)
      {
LABEL_7:
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F04180], v18);
        CFRelease(v18);
        CFMutableArrayRef v18 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (v18)
        {
          uint64_t v24 = (const void **)MEMORY[0x263EFFB40];
          int v25 = v20;
          if (a8)
          {
            CFNumberRef v26 = (const void *)*MEMORY[0x263F0EF40];
            if (HIDWORD(a8) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              CFAllocatorRef v33 = "CreateDispPixelBufferAttributesDictionary";
              __int16 v34 = 1024;
              int v35 = 999;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            setIntValue(v18, v26, a8);
            CFDictionaryAddValue(v18, (const void *)*MEMORY[0x263F0EDC8], *v24);
          }
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F04130], v18);
          addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04078], 64);
          addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04240], a2);
          addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04118], a3);
          addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F04198], 256);
          if (v31 >= a2) {
            int v27 = v31 - a2;
          }
          else {
            int v27 = -a2 & 0xF;
          }
          if (v19 >= a3) {
            int v28 = v19 - a3;
          }
          else {
            int v28 = -a3 & 0xF;
          }
          if (v27) {
            addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F040F8], v27);
          }
          if (v28) {
            addNumberToDictionary(Mutable, (const void *)*MEMORY[0x263F040D8], v28);
          }
          if (v25 >= 26) {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F041D8], *v24);
          }
          uint64_t v29 = 0;
          *a9 = Mutable;
LABEL_32:
          CFRelease(v18);
          return v29;
        }
      }
      else
      {
        uint64_t v21 = a7;
        while (1)
        {
          CFNumberRef v22 = CFNumberCreate(0, kCFNumberSInt32Type, a6);
          if (!v22) {
            break;
          }
          CFNumberRef v23 = v22;
          CFArrayAppendValue(v18, v22);
          CFRelease(v23);
          a6 += 4;
          if (!--v21) {
            goto LABEL_7;
          }
        }
      }
    }
  }
  else
  {
    CFMutableArrayRef v18 = 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    CFAllocatorRef v33 = "CreateDispPixelBufferAttributesDictionary";
    __int16 v34 = 1024;
    int v35 = -12904;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t v29 = 4294954392;
  if (v18) {
    goto LABEL_32;
  }
  return v29;
}

void addNumberToDictionary(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(a1, a2, v5);
    CFRelease(v6);
  }
}

void AVDFrameReceiverEntry(void *a1)
{
  a1[1] = 0;
  operator new();
}

uint64_t AVDFrameReceiver::Setup(mach_port_t *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  *(void *)this = Current;
  if (!Current)
  {
    CFNumberRef v6 = (FILE **)MEMORY[0x263EF8348];
    fprintf((FILE *)*MEMORY[0x263EF8348], "Assert - (%s) - f: %s l: %d\n", "m_CFRunLoopRef != NULL", "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp", 108);
    fwrite("AVDFrameReceiver ERROR: CFRunLoopGetCurrent failed.\n", 0x34uLL, 1uLL, *v6);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v9 = "m_CFRunLoopRef != NULL";
      __int16 v10 = 2080;
      int v11 = "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp";
      __int16 v12 = 1024;
      int v13 = 108;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Assert - (%s) - f: %s l: %d\n", buf, 0x1Cu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AVDFrameReceiver ERROR: CFRunLoopGetCurrent failed.\n", buf, 2u);
    }
    uint64_t v5 = 3758097085;
    goto LABEL_15;
  }
  CFRetain(Current);
  unsigned int v3 = (AVDFrameReceiver *)AVDFrameReceiver::AddIODispatcherToRunLoop(this);
  if (v3)
  {
    uint64_t v4 = (FILE **)MEMORY[0x263EF8348];
    fprintf((FILE *)*MEMORY[0x263EF8348], "Assert - (%s) - f: %s l: %d\n", "err == kIOReturnSuccess", "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp", 117);
    fwrite("AVDFrameReceiver ERROR: AddIODispatcherToRunLoop failed.\n", 0x39uLL, 1uLL, *v4);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v9 = "err == kIOReturnSuccess";
      __int16 v10 = 2080;
      int v11 = "/Library/Caches/com.apple.xbs/Sources/AppleAVD/framework/AppleAVDFrameReceiver.cpp";
      __int16 v12 = 1024;
      int v13 = 117;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Assert - (%s) - f: %s l: %d\n", buf, 0x1Cu);
    }
    uint64_t v5 = 3758097084;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AVDFrameReceiver ERROR: AddIODispatcherToRunLoop failed.\n", buf, 2u);
    }
LABEL_15:
    if (*(void *)this)
    {
      CFRelease(*(CFTypeRef *)this);
      *(void *)this = 0;
    }
    return v5;
  }
  if (*((unsigned char *)this + 72))
  {
    setpriority(3, 0, 4096);
  }
  else if (*((unsigned char *)this + 74))
  {
    AVDFrameReceiver::MakeCurrentThreadTimeConstraintThread(v3);
  }
  return 0;
}

uint64_t AVDFrameReceiver::AddIODispatcherToRunLoop(mach_port_t *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = 3758097085;
  if (IOCreateReceivePort(0x39u, this + 6)) {
    return 3758097084;
  }
  Boolean shouldFreeInfo = 0;
  context.versiouint64_t n = 1;
  context.info = this;
  memset(&context.retain, 0, 24);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v4 = CFMachPortCreateWithPort((CFAllocatorRef)*MEMORY[0x263EFFB08], this[6], MEMORY[0x263F0EBE0], &context, &shouldFreeInfo);
  *((void *)this + 4) = v4;
  if (v4) {
    BOOL v5 = shouldFreeInfo == 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    *((void *)this + 4) = 0;
LABEL_11:
    AVDFrameReceiver::RemoveIODispatcherFromRunLoop((AVDFrameReceiver *)this);
    return v2;
  }
  RunLoopSource = CFMachPortCreateRunLoopSource(v3, v4, 0);
  *((void *)this + 2) = RunLoopSource;
  if (!RunLoopSource) {
    goto LABEL_11;
  }
  CFRunLoopAddSource(*(CFRunLoopRef *)this, RunLoopSource, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
  inputStruct[1] = this;
  size_t outputStructCnt = 4;
  inputStruct[0] = AVDFrameReceiver::FrameDone;
  *(_OWORD *)reference = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v2 = IOConnectCallAsyncMethod(this[10], 8u, this[6], reference, 8u, 0, 0, inputStruct, 0x10uLL, 0, 0, v8, &outputStructCnt);
  if (v2) {
    goto LABEL_11;
  }
  return v2;
}

uint64_t AppleAVDWrapperHEVCDecoderCreateInstance(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  VTVideoDecoderGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v7 = "AppleAVDWrapperHEVCDecoderCreateInstance";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): FigDerivedObjectCreate failed", buf, 0xCu);
  }
  if (v4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v7 = "AppleAVDWrapperHEVCDecoderCreateInstance";
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): failed with error %d\n", buf, 0x12u);
  }
  *a3 = 0;
  return v4;
}

uint64_t CAVDHevcDecoder::allocateMembersPerLayer(CAVDHevcDecoder *this, int a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 2308) = a2;
  if (a2 >= 1)
  {
    bzero((char *)this + 3128, 8 * a2);
    operator new();
  }
  uint64_t v4 = malloc_type_calloc(0x80uLL, 16 * a2, 0x67D514BBuLL);
  *((void *)this + 1055) = v4;
  if (!v4)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v20 = 136315138;
    uint64_t v21 = "allocateMembersPerLayer";
    CFMutableArrayRef v18 = &_os_log_internal;
    int v19 = "AppleAVD: %s m_curAu mem alloc fialed ";
LABEL_40:
    _os_log_impl(&dword_223977000, v18, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v20, 0xCu);
    return 304;
  }
  *((_DWORD *)this + 2112) = 16 * a2;
  BOOL v5 = malloc_type_malloc(104 * a2, 0x1000040014E8DEAuLL);
  *((void *)this + 1038) = v5;
  if (!v5)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v20 = 136315138;
    uint64_t v21 = "allocateMembersPerLayer";
    CFMutableArrayRef v18 = &_os_log_internal;
    int v19 = "AppleAVD: %s m_spsInfo mem alloc fialed ";
    goto LABEL_40;
  }
  uint64_t v6 = a2;
  uint64_t v7 = malloc_type_malloc(180 * a2, 0x1000040A69A29C8uLL);
  *((void *)this + 1039) = v7;
  if (!v7)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v20 = 136315138;
    uint64_t v21 = "allocateMembersPerLayer";
    CFMutableArrayRef v18 = &_os_log_internal;
    int v19 = "AppleAVD: %s m_spsInfo mem alloc fialed ";
    goto LABEL_40;
  }
  __int16 v8 = malloc_type_calloc(8uLL, a2, 0x5E55BFD8uLL);
  *((void *)this + 105pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v8;
  if (!v8)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v20 = 136315138;
    uint64_t v21 = "allocateMembersPerLayer";
    CFMutableArrayRef v18 = &_os_log_internal;
    int v19 = "AppleAVD: %s m_dec_pb_idx mem alloc fialed ";
    goto LABEL_40;
  }
  int v9 = malloc_type_calloc(8uLL, a2, 0x2C8E2489uLL);
  *((void *)this + 1051) = v9;
  if (!v9)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v20 = 136315138;
    uint64_t v21 = "allocateMembersPerLayer";
    CFMutableArrayRef v18 = &_os_log_internal;
    int v19 = "AppleAVD: %s m_disp_pb_idx mem alloc fialed ";
    goto LABEL_40;
  }
  uint64_t v10 = malloc_type_calloc(8uLL, a2, 0xD4BDEB10uLL);
  *((void *)this + 1052) = v10;
  if (!v10)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v20 = 136315138;
    uint64_t v21 = "allocateMembersPerLayer";
    CFMutableArrayRef v18 = &_os_log_internal;
    int v19 = "AppleAVD: %s m_second_dec_pb_idx mem alloc fialed ";
    goto LABEL_40;
  }
  if (a2 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 8 * a2;
    do
    {
      *(void *)(*((void *)this + 1050) + v11) = malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
      if (!*(void *)(*((void *)this + 1050) + v11)) {
        return 304;
      }
      *(void *)(*((void *)this + 1051) + v11) = malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
      if (!*(void *)(*((void *)this + 1051) + v11)) {
        return 304;
      }
      *(void *)(*((void *)this + 1052) + v11) = malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
      if (!*(void *)(*((void *)this + 1052) + v11)) {
        return 304;
      }
      v11 += 8;
    }
    while (v12 != v11);
  }
  int v13 = malloc_type_malloc(4 * v6, 0x100004052888210uLL);
  *((void *)this + 113pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v13;
  if (!v13)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v20 = 136315138;
    uint64_t v21 = "allocateMembersPerLayer";
    CFMutableArrayRef v18 = &_os_log_internal;
    int v19 = "AppleAVD: %s m_dec_pb_idx mem alloc fialed ";
    goto LABEL_40;
  }
  long long v14 = malloc_type_malloc(4 * v6, 0x100004052888210uLL);
  *((void *)this + 1131) = v14;
  if (!v14)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v20 = 136315138;
    uint64_t v21 = "allocateMembersPerLayer";
    CFMutableArrayRef v18 = &_os_log_internal;
    int v19 = "AppleAVD: %s m_dec_pb_idx mem alloc fialed ";
    goto LABEL_40;
  }
  long long v15 = malloc_type_malloc(4 * v6, 0x100004052888210uLL);
  *((void *)this + 1135) = v15;
  if (!v15)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 304;
    }
    int v20 = 136315138;
    uint64_t v21 = "allocateMembersPerLayer";
    CFMutableArrayRef v18 = &_os_log_internal;
    int v19 = "AppleAVD: %s m_dec_pb_idx mem alloc fialed ";
    goto LABEL_40;
  }
  long long v16 = malloc_type_malloc(4 * v6, 0x100004052888210uLL);
  *((void *)this + 1136) = v16;
  if (v16) {
    return 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 136315138;
    uint64_t v21 = "allocateMembersPerLayer";
    CFMutableArrayRef v18 = &_os_log_internal;
    int v19 = "AppleAVD: %s m_dec_pb_idx mem alloc fialed ";
    goto LABEL_40;
  }
  return 304;
}

void sub_2239A562C(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v1, 0x10A1C404345B713);
  _Unwind_Resume(a1);
}

void HEVC_RLM::HEVC_RLM(HEVC_RLM *this, CAVDHevcDecoder *a2)
{
  *((_DWORD *)this + 708) = 0;
  *((void *)this + 824) = 0;
  *((_DWORD *)this + 165pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *((void *)this + 355) = 0;
  *(void *)this = &unk_26D740200;
  *((void *)this + 1) = a2;
  bzero((char *)this + 16, 0xB00uLL);
  uint64_t v3 = 0;
  uint64_t v4 = (_DWORD *)((char *)this + 60);
  do
  {
    *uint64_t v4 = v3;
    v4 += 44;
    ++v3;
  }
  while (v3 != 16);
  bzero((char *)this + 2848, 0x3A0uLL);
}

{
  uint64_t v3;
  uint64_t v4;

  *((_DWORD *)this + 708) = 0;
  *((void *)this + 824) = 0;
  *((_DWORD *)this + 165pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *((void *)this + 355) = 0;
  *(void *)this = &unk_26D740200;
  *((void *)this + 1) = a2;
  bzero((char *)this + 16, 0xB00uLL);
  uint64_t v3 = 0;
  uint64_t v4 = 60;
  do
  {
    *(_DWORD *)((char *)this + v4) = v3++;
    v4 += 176;
  }
  while (v3 != 16);
  bzero((char *)this + 2848, 0x3A0uLL);
}

uint64_t HEVC_RBSP::parseSPS(int8x8_t *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v288 = *MEMORY[0x263EF8340];
  int8x8_t v9 = a1[13];
  a1[20].i32[1] += 4;
  HEVC_RBSP::flush_bits((uint64_t)a1, 4);
  if (a5)
  {
    int8x8_t v10 = a1[13];
    a1[20].i32[1] += 3;
    uint64_t v11 = *(void *)&v10 >> 61;
    HEVC_RBSP::flush_bits((uint64_t)a1, 3);
    if (a4)
    {
      if (v11 == 7)
      {
        LODWORD(v11) = 0;
        LOBYTE(v12) = 0;
        int v13 = 7;
        goto LABEL_9;
      }
      int v13 = v11;
      LODWORD(v11) = 0;
    }
    else
    {
      int v13 = 0;
    }
    int8x8_t v16 = a1[13];
    ++a1[20].i32[1];
    uint64_t v12 = *(void *)&v16 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    bzero(__src, 0xDF8uLL);
    HEVC_RBSP::parseProfileTierLevel((HEVC_RBSP *)a1, (uint64_t)__src, 1, v11);
  }
  else
  {
    int8x8_t v14 = a1[13];
    a1[20].i32[1] += 3;
    uint64_t v11 = *(void *)&v14 >> 61;
    HEVC_RBSP::flush_bits((uint64_t)a1, 3);
    int8x8_t v15 = a1[13];
    ++a1[20].i32[1];
    uint64_t v12 = *(void *)&v15 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    bzero(__src, 0xDF8uLL);
    HEVC_RBSP::parseProfileTierLevel((HEVC_RBSP *)a1, (uint64_t)__src, 1, v11);
    int v13 = 0;
  }
LABEL_9:
  int8x8_t v17 = a1[13];
  if ((*(void *)&v17 & 0x8000000000000000) != 0)
  {
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    unsigned __int32 v26 = 0;
  }
  else
  {
    int v18 = a4;
    uint64_t v19 = HIDWORD(*(void *)&v17);
    int v20 = -32;
    do
    {
      LODWORD(v19) = 2 * v19;
      int v21 = v20 + 1;
      if ((v19 & 0x80000000) != 0) {
        break;
      }
      unsigned int v22 = v20 + 32;
      ++v20;
    }
    while (v22 < 0x1E);
    a1[20].i32[1] += v21 + 33;
    HEVC_RBSP::flush_bits((uint64_t)a1, v21 + 33);
    unsigned __int32 v23 = a1[13].u32[1];
    a1[20].i32[1] += v21 + 32;
    unsigned __int32 v24 = v23 >> -(char)v21;
    HEVC_RBSP::flush_bits((uint64_t)a1, v21 + 32);
    int v25 = ~(-2 << (v21 + 31));
    unsigned __int32 v26 = v24 + v25;
    if (v24 + v25 >= 0x10)
    {
      int v27 = v24 + v25;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)int v277 = "int32_t HEVC_RBSP::parseSPS(hevc_video_parameter_set_t *, hevc_sequence_parameter_set_t *, int, int)";
        *(_WORD *)&v277[8] = 1024;
        int v278 = v27;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s out of range SPS id %u", buf, 0x12u);
      }
      return 0xFFFFFFFFLL;
    }
    a4 = v18;
  }
  unsigned int v275 = v26;
  uint64_t v29 = *(void *)&v9 >> 60;
  CFNumberRef v30 = (unsigned int *)(a3 + 23176 * v26);
  HEVCReleaseSPS((uint64_t)v30);
  bzero(v30, 0x5A88uLL);
  memcpy(v30 + 3, __src, 0xDF8uLL);
  BOOL v31 = a5 != 0;
  if (a5) {
    char v32 = v13;
  }
  else {
    char v32 = 0;
  }
  if (a4) {
    BOOL v33 = v13 == 7;
  }
  else {
    BOOL v33 = 0;
  }
  if (!v33) {
    BOOL v31 = 0;
  }
  __int16 v34 = (char *)v30 + 22847;
  *((unsigned char *)v30 + 22848) = v32;
  *((unsigned char *)v30 + 22847) = v31;
  *CFNumberRef v30 = v29;
  uint64_t v274 = (uint64_t)v30;
  v30[1] = v11;
  int v35 = v30 + 1;
  if (v11 >= 7)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_32:
      HEVCReleaseSPS(v274);
      uint64_t result = 0xFFFFFFFFLL;
      *(_DWORD *)(a3 + 23176 * v275 + 3588) = -1;
      return result;
    }
    *(_DWORD *)buf = 136316418;
    *(void *)int v277 = "parseSPS";
    *(_WORD *)&v277[8] = 1024;
    int v278 = 2462;
    __int16 v279 = 2080;
    int v280 = "sps->sps_max_sub_layers_minus1";
    __int16 v281 = 1024;
    unsigned int v282 = v11;
    __int16 v283 = 1024;
    int v284 = 0;
    __int16 v285 = 1024;
    int v286 = 6;
    uint64_t v36 = &_os_log_internal;
    int v37 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
    goto LABEL_30;
  }
  uint64_t v39 = a3 + 23176 * v275;
  *(unsigned char *)(v39 + 8) = v12;
  *(_DWORD *)(v39 + 3588) = v275;
  uint64_t v40 = (uint64_t)a1[13];
  int v272 = v34;
  if (v31)
  {
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    *(unsigned char *)(a3 + 23176 * v275 + 3592) = v40 < 0;
    if (v40 < 0)
    {
      int v41 = a1[13].u8[7];
      a1[20].i32[1] += 8;
      HEVC_RBSP::flush_bits((uint64_t)a1, 8);
      *(_DWORD *)(a3 + 23176 * v275 + 3596) = v41;
    }
  }
  else
  {
    if (v40 < 0)
    {
      ++a1[20].i32[1];
      HEVC_RBSP::flush_bits((uint64_t)a1, 1);
      *(_DWORD *)(a3 + 23176 * v275 + 360pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    }
    else
    {
      unint64_t v42 = HIDWORD(v40);
      int v43 = -32;
      do
      {
        LODWORD(v42) = 2 * v42;
        int v44 = v43 + 1;
        if ((v42 & 0x80000000) != 0) {
          break;
        }
        unsigned int v45 = v43 + 32;
        ++v43;
      }
      while (v45 < 0x1E);
      a1[20].i32[1] += v44 + 33;
      HEVC_RBSP::flush_bits((uint64_t)a1, v44 + 33);
      unsigned __int32 v46 = a1[13].u32[1];
      a1[20].i32[1] += v44 + 32;
      unsigned __int32 v47 = v46 >> -(char)v44;
      HEVC_RBSP::flush_bits((uint64_t)a1, v44 + 32);
      unsigned int v48 = v47 + ~(-2 << (v44 + 31));
      *(_DWORD *)(a3 + 23176 * v275 + 360pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v48;
      if (v48 >= 4)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136316418;
        *(void *)int v277 = "parseSPS";
        *(_WORD *)&v277[8] = 1024;
        int v278 = 2479;
        __int16 v279 = 2080;
        int v280 = "sps->chroma_format_idc";
        __int16 v281 = 1024;
        unsigned int v282 = v48;
        __int16 v283 = 1024;
        int v284 = 0;
        __int16 v285 = 1024;
        int v286 = 3;
        uint64_t v36 = &_os_log_internal;
        int v37 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
        goto LABEL_30;
      }
      if (v48 == 3)
      {
        int8x8_t v49 = a1[13];
        ++a1[20].i32[1];
        uint64_t v50 = *(void *)&v49 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)a1, 1);
        *(unsigned char *)(a3 + 23176 * v275 + 3604) = v50;
      }
    }
    int8x8_t v51 = a1[13];
    if ((*(void *)&v51 & 0x8000000000000000) != 0)
    {
      ++a1[20].i32[1];
      HEVC_RBSP::flush_bits((uint64_t)a1, 1);
      unsigned __int32 v58 = 0;
    }
    else
    {
      uint64_t v52 = HIDWORD(*(void *)&v51);
      int v53 = -32;
      do
      {
        LODWORD(v52) = 2 * v52;
        int v54 = v53 + 1;
        if ((v52 & 0x80000000) != 0) {
          break;
        }
        unsigned int v55 = v53 + 32;
        ++v53;
      }
      while (v55 < 0x1E);
      a1[20].i32[1] += v54 + 33;
      HEVC_RBSP::flush_bits((uint64_t)a1, v54 + 33);
      unsigned __int32 v56 = a1[13].u32[1];
      a1[20].i32[1] += v54 + 32;
      unsigned __int32 v57 = v56 >> -(char)v54;
      HEVC_RBSP::flush_bits((uint64_t)a1, v54 + 32);
      unsigned __int32 v58 = v57 + ~(-2 << (v54 + 31));
    }
    unint64_t v59 = (unsigned __int32 *)(a3 + 23176 * v275 + 3608);
    *unint64_t v59 = v58;
    int8x8_t v60 = a1[13];
    if ((*(void *)&v60 & 0x8000000000000000) != 0)
    {
      ++a1[20].i32[1];
      HEVC_RBSP::flush_bits((uint64_t)a1, 1);
      unsigned int v67 = 0;
    }
    else
    {
      uint64_t v61 = HIDWORD(*(void *)&v60);
      int v62 = -32;
      do
      {
        LODWORD(v61) = 2 * v61;
        int v63 = v62 + 1;
        if ((v61 & 0x80000000) != 0) {
          break;
        }
        unsigned int v64 = v62 + 32;
        ++v62;
      }
      while (v64 < 0x1E);
      a1[20].i32[1] += v63 + 33;
      HEVC_RBSP::flush_bits((uint64_t)a1, v63 + 33);
      unsigned __int32 v65 = a1[13].u32[1];
      a1[20].i32[1] += v63 + 32;
      unsigned __int32 v66 = v65 >> -(char)v63;
      HEVC_RBSP::flush_bits((uint64_t)a1, v63 + 32);
      unsigned int v67 = v66 + ~(-2 << (v63 + 31));
    }
    *(_DWORD *)(a3 + 23176 * v275 + 3612) = v67;
    unsigned __int32 v68 = *v59;
    if (*v59 - 65537 < 0xFFFF000F || v67 > 0x10000 || v67 <= 0xF)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)int v277 = v68;
      *(_WORD *)&v277[4] = 1024;
      *(_DWORD *)&v277[6] = v67;
      uint64_t v36 = &_os_log_internal;
      int v37 = "AppleAVD: Unsupported sps->pic_width_in_luma_samples:%d or sps->pic_height_in_luma_samples:%d";
      uint32_t v38 = 14;
      goto LABEL_31;
    }
    uint64_t v69 = (uint64_t)a1[13];
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    *(unsigned char *)(a3 + 23176 * v275 + 3616) = v69 < 0;
    if (v69 < 0)
    {
      int v70 = (_DWORD *)(a3 + 23176 * v275);
      v70[905] = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
      v70[906] = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
      v70[907] = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
      v70[908] = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
    }
    uint64_t v71 = a3 + 23176 * v275;
    *(_DWORD *)(v71 + 3636) = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
    unsigned int v72 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
    *(_DWORD *)(v71 + 364pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v72;
    if (v72 >= 9)
    {
      unsigned int v73 = v72;
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136316418;
      *(void *)int v277 = "parseSPS";
      *(_WORD *)&v277[8] = 1024;
      int v278 = 2506;
      __int16 v279 = 2080;
      int v280 = "sps->bit_depth_chroma_minus8";
      __int16 v281 = 1024;
      unsigned int v282 = v73;
      __int16 v283 = 1024;
      int v284 = 0;
      __int16 v285 = 1024;
      int v286 = 8;
      uint64_t v36 = &_os_log_internal;
      int v37 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_30;
    }
  }
  int8x8_t v74 = a1[13];
  if ((*(void *)&v74 & 0x8000000000000000) != 0)
  {
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    int v271 = (_DWORD *)(a3 + 23176 * v275 + 3644);
    *int v271 = 0;
  }
  else
  {
    uint64_t v75 = HIDWORD(*(void *)&v74);
    int v76 = -32;
    do
    {
      LODWORD(v75) = 2 * v75;
      int v77 = v76 + 1;
      if ((v75 & 0x80000000) != 0) {
        break;
      }
      unsigned int v78 = v76 + 32;
      ++v76;
    }
    while (v78 < 0x1E);
    a1[20].i32[1] += v77 + 33;
    HEVC_RBSP::flush_bits((uint64_t)a1, v77 + 33);
    unsigned __int32 v79 = a1[13].u32[1];
    a1[20].i32[1] += v77 + 32;
    unsigned __int32 v80 = v79 >> -(char)v77;
    HEVC_RBSP::flush_bits((uint64_t)a1, v77 + 32);
    unsigned int v81 = v80 + ~(-2 << (v77 + 31));
    uint64_t v82 = a3 + 23176 * v275;
    *(_DWORD *)(v82 + 3644) = v81;
    if (v81 >= 0xD)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136316418;
      *(void *)int v277 = "parseSPS";
      *(_WORD *)&v277[8] = 1024;
      int v278 = 2512;
      __int16 v279 = 2080;
      int v280 = "sps->log2_max_pic_order_cnt_lsb_minus4";
      __int16 v281 = 1024;
      unsigned int v282 = v81;
      __int16 v283 = 1024;
      int v284 = 0;
      __int16 v285 = 1024;
      int v286 = 12;
      uint64_t v36 = &_os_log_internal;
      int v37 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_30;
    }
    int v271 = (_DWORD *)(v82 + 3644);
  }
  int v270 = a4;
  if (!*v272)
  {
    uint64_t v83 = (uint64_t)a1[13];
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    uint64_t v84 = a3 + 23176 * v275;
    *(unsigned char *)(v84 + 3648) = v83 < 0;
    if (v83 < 0) {
      unsigned int v85 = 0;
    }
    else {
      unsigned int v85 = *v35;
    }
    int v269 = (unsigned char *)(v84 + 3648);
    do
    {
      int8x8_t v86 = a1[13];
      if ((*(void *)&v86 & 0x8000000000000000) != 0)
      {
        ++a1[20].i32[1];
        HEVC_RBSP::flush_bits((uint64_t)a1, 1);
        unsigned __int32 v93 = 0;
      }
      else
      {
        uint64_t v87 = HIDWORD(*(void *)&v86);
        int v88 = -32;
        do
        {
          LODWORD(v87) = 2 * v87;
          int v89 = v88 + 1;
          if ((v87 & 0x80000000) != 0) {
            break;
          }
          unsigned int v90 = v88 + 32;
          ++v88;
        }
        while (v90 < 0x1E);
        a1[20].i32[1] += v89 + 33;
        HEVC_RBSP::flush_bits((uint64_t)a1, v89 + 33);
        unsigned __int32 v91 = a1[13].u32[1];
        a1[20].i32[1] += v89 + 32;
        unsigned __int32 v92 = v91 >> -(char)v89;
        HEVC_RBSP::flush_bits((uint64_t)a1, v89 + 32);
        unsigned __int32 v93 = v92 + ~(-2 << (v89 + 31));
      }
      *(_DWORD *)(a3 + 23176 * v275 + 4 * v85 + 3652) = v93;
      int8x8_t v94 = a1[13];
      if ((*(void *)&v94 & 0x8000000000000000) != 0)
      {
        ++a1[20].i32[1];
        HEVC_RBSP::flush_bits((uint64_t)a1, 1);
        unsigned __int32 v101 = 0;
      }
      else
      {
        uint64_t v95 = HIDWORD(*(void *)&v94);
        int v96 = -32;
        do
        {
          LODWORD(v95) = 2 * v95;
          int v97 = v96 + 1;
          if ((v95 & 0x80000000) != 0) {
            break;
          }
          unsigned int v98 = v96 + 32;
          ++v96;
        }
        while (v98 < 0x1E);
        a1[20].i32[1] += v97 + 33;
        HEVC_RBSP::flush_bits((uint64_t)a1, v97 + 33);
        unsigned __int32 v99 = a1[13].u32[1];
        a1[20].i32[1] += v97 + 32;
        unsigned __int32 v100 = v99 >> -(char)v97;
        HEVC_RBSP::flush_bits((uint64_t)a1, v97 + 32);
        unsigned __int32 v101 = v100 + ~(-2 << (v97 + 31));
      }
      uint64_t v102 = a3 + 23176 * v275 + 4 * v85;
      *(_DWORD *)(v102 + 3908) = v101;
      int8x8_t v103 = a1[13];
      if ((*(void *)&v103 & 0x8000000000000000) != 0)
      {
        ++a1[20].i32[1];
        HEVC_RBSP::flush_bits((uint64_t)a1, 1);
        *(_DWORD *)(a3 + 23176 * v275 + 4 * v85 + 4164) = 0;
      }
      else
      {
        size_t v104 = v35;
        int v105 = (_DWORD *)(v102 + 3908);
        uint64_t v106 = HIDWORD(*(void *)&v103);
        int v107 = -32;
        do
        {
          LODWORD(v106) = 2 * v106;
          int v108 = v107 + 1;
          if ((v106 & 0x80000000) != 0) {
            break;
          }
          unsigned int v109 = v107 + 32;
          ++v107;
        }
        while (v109 < 0x1E);
        a1[20].i32[1] += v108 + 33;
        HEVC_RBSP::flush_bits((uint64_t)a1, v108 + 33);
        unsigned __int32 v110 = a1[13].u32[1];
        a1[20].i32[1] += v108 + 32;
        unsigned __int32 v111 = v110 >> -(char)v108;
        HEVC_RBSP::flush_bits((uint64_t)a1, v108 + 32);
        unsigned __int32 v112 = v111 + ~(-2 << (v108 + 31));
        *(_DWORD *)(a3 + 23176 * v275 + 4 * v85 + 4164) = v112;
        int v35 = v104;
        if (v112) {
          *(_DWORD *)(a3 + 23176 * v275 + 4 * v85 + 22916) = v112 + *v105 - 1;
        }
      }
      ++v85;
      unint64_t v113 = *v35;
    }
    while (v85 <= v113);
    if (!*v269 && v113)
    {
      unint64_t v114 = 0;
      uint64_t v115 = a3 + 23176 * v275;
      int8x8_t v116 = (_DWORD *)(v115 + 3652);
      uint64_t v117 = (_DWORD *)(v115 + 3652 + 4 * v113);
      uint64_t v118 = v115 + 4 * v113;
      int v119 = (_DWORD *)(v118 + 3908);
      int v120 = (_DWORD *)(v118 + 4164);
      do
      {
        *int8x8_t v116 = *v117;
        v116[64] = *v119;
        v116[128] = *v120;
        ++v114;
        ++v116;
      }
      while (v114 < v113);
    }
  }
  int8x8_t v121 = a1[13];
  if ((*(void *)&v121 & 0x8000000000000000) != 0)
  {
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    unsigned __int32 v128 = 0;
  }
  else
  {
    uint64_t v122 = HIDWORD(*(void *)&v121);
    int v123 = -32;
    do
    {
      LODWORD(v122) = 2 * v122;
      int v124 = v123 + 1;
      if ((v122 & 0x80000000) != 0) {
        break;
      }
      unsigned int v125 = v123 + 32;
      ++v123;
    }
    while (v125 < 0x1E);
    a1[20].i32[1] += v124 + 33;
    HEVC_RBSP::flush_bits((uint64_t)a1, v124 + 33);
    unsigned __int32 v126 = a1[13].u32[1];
    a1[20].i32[1] += v124 + 32;
    unsigned __int32 v127 = v126 >> -(char)v124;
    HEVC_RBSP::flush_bits((uint64_t)a1, v124 + 32);
    unsigned __int32 v128 = v127 + ~(-2 << (v124 + 31));
  }
  *(_DWORD *)(a3 + 23176 * v275 + 442pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v128;
  int8x8_t v129 = a1[13];
  if ((*(void *)&v129 & 0x8000000000000000) != 0)
  {
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    unsigned __int32 v136 = 0;
  }
  else
  {
    uint64_t v130 = HIDWORD(*(void *)&v129);
    int v131 = -32;
    do
    {
      LODWORD(v13pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 2 * v130;
      int v132 = v131 + 1;
      if ((v130 & 0x80000000) != 0) {
        break;
      }
      unsigned int v133 = v131 + 32;
      ++v131;
    }
    while (v133 < 0x1E);
    a1[20].i32[1] += v132 + 33;
    HEVC_RBSP::flush_bits((uint64_t)a1, v132 + 33);
    unsigned __int32 v134 = a1[13].u32[1];
    a1[20].i32[1] += v132 + 32;
    unsigned __int32 v135 = v134 >> -(char)v132;
    HEVC_RBSP::flush_bits((uint64_t)a1, v132 + 32);
    unsigned __int32 v136 = v135 + ~(-2 << (v132 + 31));
  }
  *(_DWORD *)(a3 + 23176 * v275 + 4424) = v136;
  int8x8_t v137 = a1[13];
  if ((*(void *)&v137 & 0x8000000000000000) != 0)
  {
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    unsigned __int32 v144 = 0;
  }
  else
  {
    uint64_t v138 = HIDWORD(*(void *)&v137);
    int v139 = -32;
    do
    {
      LODWORD(v138) = 2 * v138;
      int v140 = v139 + 1;
      if ((v138 & 0x80000000) != 0) {
        break;
      }
      unsigned int v141 = v139 + 32;
      ++v139;
    }
    while (v141 < 0x1E);
    a1[20].i32[1] += v140 + 33;
    HEVC_RBSP::flush_bits((uint64_t)a1, v140 + 33);
    unsigned __int32 v142 = a1[13].u32[1];
    a1[20].i32[1] += v140 + 32;
    unsigned __int32 v143 = v142 >> -(char)v140;
    HEVC_RBSP::flush_bits((uint64_t)a1, v140 + 32);
    unsigned __int32 v144 = v143 + ~(-2 << (v140 + 31));
  }
  *(_DWORD *)(a3 + 23176 * v275 + 4428) = v144;
  int8x8_t v145 = a1[13];
  if ((*(void *)&v145 & 0x8000000000000000) != 0)
  {
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    unsigned __int32 v152 = 0;
  }
  else
  {
    uint64_t v146 = HIDWORD(*(void *)&v145);
    int v147 = -32;
    do
    {
      LODWORD(v146) = 2 * v146;
      int v148 = v147 + 1;
      if ((v146 & 0x80000000) != 0) {
        break;
      }
      unsigned int v149 = v147 + 32;
      ++v147;
    }
    while (v149 < 0x1E);
    a1[20].i32[1] += v148 + 33;
    HEVC_RBSP::flush_bits((uint64_t)a1, v148 + 33);
    unsigned __int32 v150 = a1[13].u32[1];
    a1[20].i32[1] += v148 + 32;
    unsigned __int32 v151 = v150 >> -(char)v148;
    HEVC_RBSP::flush_bits((uint64_t)a1, v148 + 32);
    unsigned __int32 v152 = v151 + ~(-2 << (v148 + 31));
  }
  *(_DWORD *)(a3 + 23176 * v275 + 4432) = v152;
  int8x8_t v153 = a1[13];
  if ((*(void *)&v153 & 0x8000000000000000) != 0)
  {
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    unsigned __int32 v160 = 0;
  }
  else
  {
    uint64_t v154 = HIDWORD(*(void *)&v153);
    int v155 = -32;
    do
    {
      LODWORD(v154) = 2 * v154;
      int v156 = v155 + 1;
      if ((v154 & 0x80000000) != 0) {
        break;
      }
      unsigned int v157 = v155 + 32;
      ++v155;
    }
    while (v157 < 0x1E);
    a1[20].i32[1] += v156 + 33;
    HEVC_RBSP::flush_bits((uint64_t)a1, v156 + 33);
    unsigned __int32 v158 = a1[13].u32[1];
    a1[20].i32[1] += v156 + 32;
    unsigned __int32 v159 = v158 >> -(char)v156;
    HEVC_RBSP::flush_bits((uint64_t)a1, v156 + 32);
    unsigned __int32 v160 = v159 + ~(-2 << (v156 + 31));
  }
  *(_DWORD *)(a3 + 23176 * v275 + 4436) = v160;
  int8x8_t v161 = a1[13];
  if ((*(void *)&v161 & 0x8000000000000000) != 0)
  {
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    unsigned __int32 v168 = 0;
  }
  else
  {
    uint64_t v162 = HIDWORD(*(void *)&v161);
    int v163 = -32;
    do
    {
      LODWORD(v162) = 2 * v162;
      int v164 = v163 + 1;
      if ((v162 & 0x80000000) != 0) {
        break;
      }
      unsigned int v165 = v163 + 32;
      ++v163;
    }
    while (v165 < 0x1E);
    a1[20].i32[1] += v164 + 33;
    HEVC_RBSP::flush_bits((uint64_t)a1, v164 + 33);
    unsigned __int32 v166 = a1[13].u32[1];
    a1[20].i32[1] += v164 + 32;
    unsigned __int32 v167 = v166 >> -(char)v164;
    HEVC_RBSP::flush_bits((uint64_t)a1, v164 + 32);
    unsigned __int32 v168 = v167 + ~(-2 << (v164 + 31));
  }
  uint64_t v169 = a3 + 23176 * v275;
  *(_DWORD *)(v169 + 444pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v168;
  uint64_t v170 = (uint64_t)a1[13];
  ++a1[20].i32[1];
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  *(unsigned char *)(v169 + 4444) = v170 < 0;
  if (v170 < 0)
  {
    char v171 = (BOOL *)(a3 + 23176 * v275 + 4445);
    *char v171 = 0;
    if (*v272
      && (v172 = (uint64_t)a1[13], ++a1[20].i32[1], HEVC_RBSP::flush_bits((uint64_t)a1, 1), *char v171 = v172 < 0, v172 < 0))
    {
      int8x8_t v176 = a1[13];
      a1[20].i32[1] += 6;
      uint64_t v177 = *(void *)&v176 >> 58;
      HEVC_RBSP::flush_bits((uint64_t)a1, 6);
      *(unsigned char *)(a3 + 23176 * v275 + 4446) = v177;
    }
    else
    {
      uint64_t v173 = (uint64_t)a1[13];
      ++a1[20].i32[1];
      HEVC_RBSP::flush_bits((uint64_t)a1, 1);
      uint64_t v174 = a3 + 23176 * v275;
      *(unsigned char *)(v174 + 4447) = v173 < 0;
      uint64_t v175 = v174 + 4448;
      if (v173 < 0)
      {
        if ((HEVC_RBSP::parseScalingListData((HEVC_RBSP *)a1, v175) & 1) == 0) {
          goto LABEL_32;
        }
      }
      else
      {
        HEVC_RBSP::setDefaultScalingListData((uint64_t)a1, v175);
      }
    }
  }
  int8x8_t v178 = a1[13];
  ++a1[20].i32[1];
  uint64_t v179 = *(void *)&v178 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  int v180 = (unsigned char *)(a3 + 23176 * v275);
  v180[10648] = v179;
  int8x8_t v181 = a1[13];
  ++a1[20].i32[1];
  uint64_t v182 = *(void *)&v181 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  v180[10649] = v182;
  uint64_t v183 = (uint64_t)a1[13];
  ++a1[20].i32[1];
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  v180[10650] = v183 < 0;
  if (v183 < 0)
  {
    int8x8_t v184 = a1[13];
    a1[20].i32[1] += 4;
    uint64_t v185 = *(void *)&v184 >> 60;
    HEVC_RBSP::flush_bits((uint64_t)a1, 4);
    uint64_t v186 = a3 + 23176 * v275;
    *(_DWORD *)(v186 + 10652) = v185;
    int8x8_t v187 = a1[13];
    a1[20].i32[1] += 4;
    uint64_t v188 = *(void *)&v187 >> 60;
    HEVC_RBSP::flush_bits((uint64_t)a1, 4);
    *(_DWORD *)(v186 + 10656) = v188;
    int8x8_t v189 = a1[13];
    if ((*(void *)&v189 & 0x8000000000000000) != 0)
    {
      ++a1[20].i32[1];
      HEVC_RBSP::flush_bits((uint64_t)a1, 1);
      unsigned __int32 v196 = 0;
    }
    else
    {
      uint64_t v190 = HIDWORD(*(void *)&v189);
      int v191 = -32;
      do
      {
        LODWORD(v19pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 2 * v190;
        int v192 = v191 + 1;
        if ((v190 & 0x80000000) != 0) {
          break;
        }
        unsigned int v193 = v191 + 32;
        ++v191;
      }
      while (v193 < 0x1E);
      a1[20].i32[1] += v192 + 33;
      HEVC_RBSP::flush_bits((uint64_t)a1, v192 + 33);
      unsigned __int32 v194 = a1[13].u32[1];
      a1[20].i32[1] += v192 + 32;
      unsigned __int32 v195 = v194 >> -(char)v192;
      HEVC_RBSP::flush_bits((uint64_t)a1, v192 + 32);
      unsigned __int32 v196 = v195 + ~(-2 << (v192 + 31));
    }
    *(_DWORD *)(a3 + 23176 * v275 + 1066pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v196;
    int8x8_t v197 = a1[13];
    if ((*(void *)&v197 & 0x8000000000000000) != 0)
    {
      ++a1[20].i32[1];
      HEVC_RBSP::flush_bits((uint64_t)a1, 1);
      unsigned __int32 v204 = 0;
    }
    else
    {
      uint64_t v198 = HIDWORD(*(void *)&v197);
      int v199 = -32;
      do
      {
        LODWORD(v198) = 2 * v198;
        int v200 = v199 + 1;
        if ((v198 & 0x80000000) != 0) {
          break;
        }
        unsigned int v201 = v199 + 32;
        ++v199;
      }
      while (v201 < 0x1E);
      a1[20].i32[1] += v200 + 33;
      HEVC_RBSP::flush_bits((uint64_t)a1, v200 + 33);
      unsigned __int32 v202 = a1[13].u32[1];
      a1[20].i32[1] += v200 + 32;
      unsigned __int32 v203 = v202 >> -(char)v200;
      HEVC_RBSP::flush_bits((uint64_t)a1, v200 + 32);
      unsigned __int32 v204 = v203 + ~(-2 << (v200 + 31));
    }
    uint64_t v205 = a3 + 23176 * v275;
    *(_DWORD *)(v205 + 10664) = v204;
    int8x8_t v206 = a1[13];
    ++a1[20].i32[1];
    uint64_t v207 = *(void *)&v206 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    *(unsigned char *)(v205 + 10668) = v207;
  }
  int8x8_t v208 = a1[13];
  if ((*(void *)&v208 & 0x8000000000000000) != 0)
  {
    ++a1[20].i32[1];
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    *(_DWORD *)(a3 + 23176 * v275 + 10672) = 0;
  }
  else
  {
    uint64_t v209 = HIDWORD(*(void *)&v208);
    int v210 = -32;
    do
    {
      LODWORD(v209) = 2 * v209;
      int v211 = v210 + 1;
      if ((v209 & 0x80000000) != 0) {
        break;
      }
      unsigned int v212 = v210 + 32;
      ++v210;
    }
    while (v212 < 0x1E);
    a1[20].i32[1] += v211 + 33;
    HEVC_RBSP::flush_bits((uint64_t)a1, v211 + 33);
    unsigned __int32 v213 = a1[13].u32[1];
    a1[20].i32[1] += v211 + 32;
    unsigned __int32 v214 = v213 >> -(char)v211;
    HEVC_RBSP::flush_bits((uint64_t)a1, v211 + 32);
    unsigned int v215 = v214 + ~(-2 << (v211 + 31));
    uint64_t v216 = a3 + 23176 * v275;
    *(_DWORD *)(v216 + 10672) = v215;
    if (v215 > 0x40)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136316418;
      *(void *)int v277 = "parseSPS";
      *(_WORD *)&v277[8] = 1024;
      int v278 = 2582;
      __int16 v279 = 2080;
      int v280 = "sps->num_short_term_ref_pic_sets";
      __int16 v281 = 1024;
      unsigned int v282 = v214 + ~(-2 << (v211 + 31));
      __int16 v283 = 1024;
      int v284 = 0;
      __int16 v285 = 1024;
      int v286 = 64;
      uint64_t v36 = &_os_log_internal;
      int v37 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
      goto LABEL_30;
    }
    if (v215)
    {
      unsigned int v217 = 0;
      int v218 = (unsigned int *)(v216 + 10672);
      while ((HEVC_RBSP::parseShortTermRefPicSet((HEVC_RBSP *)a1, a3 + 23176 * v275 + 10676, v217, v215) & 1) != 0)
      {
        ++v217;
        unsigned int v215 = *v218;
        if (v217 >= *v218) {
          goto LABEL_176;
        }
      }
      goto LABEL_32;
    }
  }
LABEL_176:
  uint64_t v268 = v35;
  uint64_t v219 = (uint64_t)a1[13];
  ++a1[20].i32[1];
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  *(unsigned char *)(a3 + 23176 * v275 + 22116) = v219 < 0;
  if (v219 < 0)
  {
    unsigned int v234 = HEVC_RBSP::ue_v((HEVC_RBSP *)a1);
    unsigned int v235 = v234;
    int v236 = (unsigned int *)(a3 + 23176 * v275 + 22120);
    *int v236 = v234;
    if (v234 >= 0x21)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136316418;
      *(void *)int v277 = "parseSPS";
      *(_WORD *)&v277[8] = 1024;
      int v278 = 2599;
      __int16 v279 = 2080;
      int v280 = "sps->num_long_term_ref_pics_sps";
      __int16 v281 = 1024;
      unsigned int v282 = v235;
      __int16 v283 = 1024;
      int v284 = 0;
      __int16 v285 = 1024;
      int v286 = 32;
      uint64_t v36 = &_os_log_internal;
      int v37 = "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n";
LABEL_30:
      uint32_t v38 = 46;
LABEL_31:
      _os_log_impl(&dword_223977000, v36, OS_LOG_TYPE_DEFAULT, v37, buf, v38);
      goto LABEL_32;
    }
    if (v234)
    {
      unint64_t v258 = 0;
      int v259 = *v271 + 4;
      int v260 = 28 - *v271;
      uint64_t v261 = a3 + 23176 * v275;
      uint64_t v262 = v261 + 22124;
      uint64_t v263 = v261 + 22252;
      do
      {
        unsigned __int32 v264 = a1[13].u32[1];
        a1[20].i32[1] += v259;
        unsigned __int32 v265 = v264 >> v260;
        HEVC_RBSP::flush_bits((uint64_t)a1, v259);
        *(_DWORD *)(v262 + 4 * v258) = v265;
        int8x8_t v266 = a1[13];
        ++a1[20].i32[1];
        uint64_t v267 = *(void *)&v266 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)a1, 1);
        *(unsigned char *)(v263 + v258++) = v267;
      }
      while (v258 < *v236);
    }
  }
  int8x8_t v220 = a1[13];
  ++a1[20].i32[1];
  uint64_t v221 = *(void *)&v220 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  int v222 = (unsigned char *)(a3 + 23176 * v275);
  v222[22284] = v221;
  int8x8_t v223 = a1[13];
  ++a1[20].i32[1];
  uint64_t v224 = *(void *)&v223 >> 63;
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  v222[22285] = v224;
  uint64_t v225 = (uint64_t)a1[13];
  ++a1[20].i32[1];
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  v222[22286] = v225 < 0;
  if (v225 < 0 && !HEVC_RBSP::parseVUI((uint64_t)a1, a3 + 23176 * v275 + 22288, *v268)) {
    goto LABEL_32;
  }
  uint64_t v226 = (uint64_t)a1[13];
  ++a1[20].i32[1];
  HEVC_RBSP::flush_bits((uint64_t)a1, 1);
  *(unsigned char *)(a3 + 23176 * v275 + 22832) = v226 < 0;
  if (v226 < 0)
  {
    int8x8_t v237 = a1[13];
    ++a1[20].i32[1];
    uint64_t v238 = *(void *)&v237 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    int v239 = (unsigned char *)(a3 + 23176 * v275);
    v239[22833] = v238;
    int8x8_t v240 = a1[13];
    ++a1[20].i32[1];
    uint64_t v241 = *(void *)&v240 >> 63;
    HEVC_RBSP::flush_bits((uint64_t)a1, 1);
    v239[22834] = v241;
    int8x8_t v242 = a1[13];
    a1[20].i32[1] += 6;
    uint64_t v243 = *(void *)&v242 >> 58;
    HEVC_RBSP::flush_bits((uint64_t)a1, 6);
    v239[22835] = v243;
    if (v239[22833]) {
      HEVC_RBSP::parseSpsRangeExtension((uint64_t)a1, (unsigned char *)(a3 + 23176 * v275 + 22836));
    }
    if (v239[22834])
    {
      int8x8_t v244 = a1[13];
      ++a1[20].i32[1];
      uint64_t v245 = *(void *)&v244 >> 63;
      HEVC_RBSP::flush_bits((uint64_t)a1, 1);
      *(unsigned char *)(a3 + 23176 * v275 + 22845) = v245;
    }
    if (v239[22835])
    {
      while (a1[14].i32[0]
            + (vaddlv_u8((uint8x8_t)vcnt_s8(a1[19])) & 0x78)
            + 8 * (a1[20].i32[0] + a1[17].i32[0] - a1[15].i32[0])
            + 32 >= 9)
      {
        int8x8_t v246 = a1[13];
        ++a1[20].i32[1];
        uint64_t v247 = *(void *)&v246 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)a1, 1);
        *(unsigned char *)(a3 + 23176 * v275 + 22846) = v247;
      }
    }
  }
  uint64_t v227 = HEVC_RBSP::byte_alignment((HEVC_RBSP *)a1);
  if (*v272)
  {
    if (HEVC_RBSP::calcRepFormat(v227, a2, v274, v270)) {
      goto LABEL_32;
    }
  }
  int v228 = (int *)(a3 + 23176 * v275);
  uint64_t v229 = v228[900];
  unint64_t v230 = (unsigned int *)(v228 + 5713);
  int v231 = (unsigned int *)(v228 + 5714);
  if (v229 >= 4)
  {
    unsigned int v232 = *v230;
    unsigned int v233 = *v231;
  }
  else
  {
    unsigned int v232 = dword_223ADBFD0[v229];
    unsigned int v233 = dword_223ADBFE0[v229];
    *unint64_t v230 = v232;
    *int v231 = v233;
  }
  uint64_t result = v275;
  int v248 = *(_DWORD *)(a3 + 23176 * v275 + 4420) + 3;
  int v249 = (_DWORD *)(a3 + 23176 * v275);
  v249[5715] = v248;
  int v250 = v249[1106] + v248;
  v249[5716] = v250;
  v249[5717] = 1 << v248;
  v249[5718] = 1 << v250;
  unsigned int v251 = v249[902];
  unsigned int v252 = v251 >> v248;
  v249[5719] = v251 >> v248;
  int v253 = (1 << v250) - 1;
  unsigned int v254 = (v253 + v251) >> v250;
  v249[5720] = v254;
  unsigned int v255 = v249[903];
  unsigned int v256 = v255 >> v248;
  v249[5721] = v256;
  unsigned int v257 = (v253 + v255) >> v250;
  v249[5722] = v257;
  v249[5723] = v256 * v252;
  v249[5724] = v257 * v254;
  v249[5725] = v255 * v251;
  v249[5726] = v251 / v232;
  v249[5727] = v255 / v233;
  v249[5728] = 1 << (*v271 + 4);
  return result;
}

uint64_t HEVC_RBSP::parseShortTermRefPicSet(HEVC_RBSP *this, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v9 = *((void *)this + 13);
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    if (v9 < 0)
    {
      if (a3 == a4)
      {
        unint64_t v57 = *((void *)this + 13);
        if ((v57 & 0x8000000000000000) == 0)
        {
          unint64_t v58 = HIDWORD(v57);
          int v59 = -32;
          do
          {
            LODWORD(v58) = 2 * v58;
            int v60 = v59 + 1;
            if ((v58 & 0x80000000) != 0) {
              break;
            }
            unsigned int v61 = v59 + 32;
            ++v59;
          }
          while (v61 < 0x1E);
          *((_DWORD *)this + 41) += v60 + 33;
          HEVC_RBSP::flush_bits((uint64_t)this, v60 + 33);
          unsigned int v62 = *((_DWORD *)this + 27);
          *((_DWORD *)this + 41) += v60 + 32;
          unsigned int v63 = v62 >> -(char)v60;
          HEVC_RBSP::flush_bits((uint64_t)this, v60 + 32);
          unsigned int v64 = v63 + ~(-2 << (v60 + 31));
          if (v64 > a3 - 1) {
            return 0;
          }
LABEL_52:
          unint64_t v65 = *((void *)this + 13);
          ++*((_DWORD *)this + 41);
          HEVC_RBSP::flush_bits((uint64_t)this, 1);
          unint64_t v66 = *((void *)this + 13);
          if ((v66 & 0x8000000000000000) != 0)
          {
            ++*((_DWORD *)this + 41);
            HEVC_RBSP::flush_bits((uint64_t)this, 1);
            unsigned int v73 = 0;
          }
          else
          {
            unint64_t v67 = HIDWORD(v66);
            int v68 = -32;
            do
            {
              LODWORD(v67) = 2 * v67;
              int v69 = v68 + 1;
              if ((v67 & 0x80000000) != 0) {
                break;
              }
              unsigned int v70 = v68 + 32;
              ++v68;
            }
            while (v70 < 0x1E);
            *((_DWORD *)this + 41) += v69 + 33;
            HEVC_RBSP::flush_bits((uint64_t)this, v69 + 33);
            unsigned int v71 = *((_DWORD *)this + 27);
            *((_DWORD *)this + 41) += v69 + 32;
            unsigned int v72 = v71 >> -(char)v69;
            HEVC_RBSP::flush_bits((uint64_t)this, v69 + 32);
            unsigned int v73 = v72 + ~(-2 << (v69 + 31));
            if (v73 >= 0x8000)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136316418;
                unsigned int v125 = "parseShortTermRefPicSet";
                __int16 v126 = 1024;
                int v127 = 2879;
                __int16 v128 = 2080;
                int8x8_t v129 = "abs_delta_rps_minus1";
                __int16 v130 = 1024;
                unsigned int v131 = v73;
                __int16 v132 = 1024;
                int v133 = 0;
                __int16 v134 = 1024;
                int v135 = 0x7FFF;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: RNG_CHECK failed for %s x %d low %d up %d\n", buf, 0x2Eu);
              }
              return 0;
            }
          }
          unsigned int v74 = 0;
          unsigned int v75 = ~v64 + a3;
          int v122 = (v65 >> 62) & 2;
          *(_DWORD *)(a2 + 176 * a3) = v75;
          unsigned int v123 = v75;
          int v76 = (unsigned int *)(a2 + 176 * v75 + 12);
          do
          {
            uint64_t v77 = *((void *)this + 13);
            ++*((_DWORD *)this + 41);
            LOBYTE(v78) = 1;
            HEVC_RBSP::flush_bits((uint64_t)this, 1);
            v136[v74 + 16] = v77 < 0;
            if ((v77 & 0x8000000000000000) == 0)
            {
              unint64_t v79 = *((void *)this + 13);
              ++*((_DWORD *)this + 41);
              unint64_t v78 = v79 >> 63;
              HEVC_RBSP::flush_bits((uint64_t)this, 1);
            }
            v136[v74++] = v78;
          }
          while (v74 <= *v76);
          int v80 = v73 + 1 - (v73 + 1) * v122;
          uint64_t v81 = a2 + 176 * v123;
          int v83 = *(_DWORD *)(v81 + 8);
          uint64_t v82 = (unsigned int *)(v81 + 8);
          unsigned int v84 = v83 - 1;
          if (v83 - 1 < 0)
          {
            unsigned int v85 = 0;
            if ((v80 & 0x80000000) == 0) {
              goto LABEL_76;
            }
          }
          else
          {
            unsigned int v85 = 0;
            int8x8_t v86 = (_DWORD *)(a2 + 176 * v123 + 4);
            uint64_t v87 = (int *)(176 * v123 + 4 * v84 + a2 + 112);
            do
            {
              int v88 = *v87--;
              int v89 = v88 + v80;
              if (v88 + v80 < 0 && v136[v84 + *v86])
              {
                uint64_t v90 = a2 + 176 * a3;
                *(_DWORD *)(v90 + 4 * v85 + 48) = v89;
                uint64_t v91 = v90 + v85++;
                *(unsigned char *)(v91 + 16) = v136[v84 + 16 + *v86];
              }
            }
            while ((int)v84-- > 0);
            if ((v80 & 0x80000000) == 0)
            {
LABEL_76:
              uint64_t v95 = a2 + 176 * v123;
              unsigned int v98 = *(_DWORD *)(v95 + 4);
              int v96 = (int *)(v95 + 4);
              unint64_t v97 = v98;
              if (v98)
              {
                unint64_t v99 = 0;
                do
                {
                  int v100 = *(_DWORD *)(a2 + 176 * v123 + 48 + 4 * v99) + v80;
                  if (v100 < 0 && v136[v99])
                  {
                    uint64_t v101 = a2 + 176 * a3;
                    char v102 = v136[v99 + 16];
                    *(_DWORD *)(v101 + 4 * v85 + 48) = v100;
                    uint64_t v103 = v101 + v85++;
                    *(unsigned char *)(v103 + 16) = v102;
                    unint64_t v97 = *v96;
                  }
                  ++v99;
                }
                while (v99 < v97);
              }
              *(_DWORD *)(a2 + 176 * a3 + 4) = v85;
              if (v85 <= 0xF)
              {
                int v104 = *v96;
                unsigned int v105 = 0;
                int v106 = *v96 - 1;
                if (v106 >= 0)
                {
                  int v107 = (int *)(176 * v123 + 4 * v106 + a2 + 48);
                  int v108 = &v136[v106];
                  unsigned int v109 = &v136[v106 + 16];
                  do
                  {
                    int v110 = *v107--;
                    int v111 = v110 + v80;
                    if (v110 + v80 >= 1 && *v108)
                    {
                      uint64_t v112 = a2 + 176 * a3;
                      *(_DWORD *)(v112 + 4 * v105 + 112) = v111;
                      uint64_t v113 = v112 + v105++;
                      *(unsigned char *)(v113 + 32) = *v109;
                    }
                    --v104;
                    --v108;
                    --v109;
                  }
                  while (v104 > 0);
                }
                if (v80 > 0 && v136[*v76])
                {
                  uint64_t v114 = a2 + 176 * a3;
                  *(_DWORD *)(v114 + 4 * v105 + 112) = v80;
                  uint64_t v115 = v114 + v105++;
                  *(unsigned char *)(v115 + 32) = v136[*v76 + 16];
                }
                unint64_t v116 = *v82;
                if (v116)
                {
                  for (unint64_t i = 0; i < v116; ++i)
                  {
                    int v118 = *(_DWORD *)(a2 + 176 * v123 + 112 + 4 * i) + v80;
                    if (v118 >= 1 && v136[(i + *v96)])
                    {
                      uint64_t v119 = a2 + 176 * a3;
                      *(_DWORD *)(v119 + 4 * v105 + 112) = v118;
                      uint64_t v120 = v119 + v105++;
                      *(unsigned char *)(v120 + 32) = v136[(i + *v96) + 16];
                      unint64_t v116 = *v82;
                    }
                  }
                }
                uint64_t v121 = a2 + 176 * a3;
                *(_DWORD *)(v121 + 8) = v105;
                *(_DWORD *)(v121 + 12) = v85 + v105;
                if ((v105 | (v85 + v105)) < 0x10) {
                  return 1;
                }
              }
              return 0;
            }
          }
          if (v136[*v76])
          {
            uint64_t v93 = a2 + 176 * a3;
            *(_DWORD *)(v93 + 4 * v85 + 48) = v80;
            uint64_t v94 = v93 + v85++;
            *(unsigned char *)(v94 + 16) = v136[*v76 + 16];
          }
          goto LABEL_76;
        }
        ++*((_DWORD *)this + 41);
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
      }
      unsigned int v64 = 0;
      goto LABEL_52;
    }
  }
  unint64_t v10 = *((void *)this + 13);
  if ((v10 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned int v17 = 0;
  }
  else
  {
    unint64_t v11 = HIDWORD(v10);
    int v12 = -32;
    do
    {
      LODWORD(v11) = 2 * v11;
      int v13 = v12 + 1;
      if ((v11 & 0x80000000) != 0) {
        break;
      }
      unsigned int v14 = v12 + 32;
      ++v12;
    }
    while (v14 < 0x1E);
    *((_DWORD *)this + 41) += v13 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v13 + 33);
    unsigned int v15 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v13 + 32;
    unsigned int v16 = v15 >> -(char)v13;
    HEVC_RBSP::flush_bits((uint64_t)this, v13 + 32);
    unsigned int v17 = v16 + ~(-2 << (v13 + 31));
  }
  uint64_t v18 = a2 + 176 * a3;
  *(_DWORD *)(v18 + 4) = v17;
  uint64_t v19 = (unsigned int *)(v18 + 4);
  unint64_t v20 = *((void *)this + 13);
  if ((v20 & 0x8000000000000000) != 0)
  {
    ++*((_DWORD *)this + 41);
    HEVC_RBSP::flush_bits((uint64_t)this, 1);
    unsigned int v27 = 0;
  }
  else
  {
    unint64_t v21 = HIDWORD(v20);
    int v22 = -32;
    do
    {
      LODWORD(v21) = 2 * v21;
      int v23 = v22 + 1;
      if ((v21 & 0x80000000) != 0) {
        break;
      }
      unsigned int v24 = v22 + 32;
      ++v22;
    }
    while (v24 < 0x1E);
    *((_DWORD *)this + 41) += v23 + 33;
    HEVC_RBSP::flush_bits((uint64_t)this, v23 + 33);
    unsigned int v25 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 41) += v23 + 32;
    unsigned int v26 = v25 >> -(char)v23;
    HEVC_RBSP::flush_bits((uint64_t)this, v23 + 32);
    unsigned int v27 = v26 + ~(-2 << (v23 + 31));
  }
  uint64_t result = 0;
  uint64_t v29 = a2 + 176 * a3;
  unsigned int v30 = *v19;
  unsigned int v31 = *v19 + v27;
  *(_DWORD *)(v29 + 8) = v27;
  *(_DWORD *)(v29 + 12) = v31;
  char v32 = (unsigned int *)(v29 + 8);
  if (v30 <= 0xF && (v31 | v27) <= 0xF)
  {
    if (v30)
    {
      unint64_t v33 = 0;
      do
      {
        unint64_t v34 = *((void *)this + 13);
        if ((v34 & 0x8000000000000000) != 0)
        {
          ++*((_DWORD *)this + 41);
          HEVC_RBSP::flush_bits((uint64_t)this, 1);
          unsigned int v41 = 0;
        }
        else
        {
          unint64_t v35 = HIDWORD(v34);
          int v36 = -32;
          do
          {
            LODWORD(v35) = 2 * v35;
            int v37 = v36 + 1;
            if ((v35 & 0x80000000) != 0) {
              break;
            }
            unsigned int v38 = v36 + 32;
            ++v36;
          }
          while (v38 < 0x1E);
          *((_DWORD *)this + 41) += v37 + 33;
          HEVC_RBSP::flush_bits((uint64_t)this, v37 + 33);
          unsigned int v39 = *((_DWORD *)this + 27);
          *((_DWORD *)this + 41) += v37 + 32;
          unsigned int v40 = v39 >> -(char)v37;
          HEVC_RBSP::flush_bits((uint64_t)this, v37 + 32);
          unsigned int v41 = v40 + ~(-2 << (v37 + 31));
        }
        unint64_t v42 = *((void *)this + 13);
        ++*((_DWORD *)this + 41);
        unint64_t v43 = v42 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        *(unsigned char *)(a2 + 176 * a3 + v33 + 16) = v43;
        if (v33) {
          int v44 = *(_DWORD *)(a2 + 176 * a3 + 4 * v33 + 44) + ~v41;
        }
        else {
          int v44 = ~v41;
        }
        *(_DWORD *)(a2 + 176 * a3 + 4 * v33++ + 48) = v44;
      }
      while (v33 < *v19);
      unsigned int v27 = *v32;
    }
    if (v27)
    {
      unint64_t v45 = 0;
      do
      {
        unint64_t v46 = *((void *)this + 13);
        if ((v46 & 0x8000000000000000) != 0)
        {
          ++*((_DWORD *)this + 41);
          HEVC_RBSP::flush_bits((uint64_t)this, 1);
          unsigned int v53 = 0;
        }
        else
        {
          unint64_t v47 = HIDWORD(v46);
          int v48 = -32;
          do
          {
            LODWORD(v47) = 2 * v47;
            int v49 = v48 + 1;
            if ((v47 & 0x80000000) != 0) {
              break;
            }
            unsigned int v50 = v48 + 32;
            ++v48;
          }
          while (v50 < 0x1E);
          *((_DWORD *)this + 41) += v49 + 33;
          HEVC_RBSP::flush_bits((uint64_t)this, v49 + 33);
          unsigned int v51 = *((_DWORD *)this + 27);
          *((_DWORD *)this + 41) += v49 + 32;
          unsigned int v52 = v51 >> -(char)v49;
          HEVC_RBSP::flush_bits((uint64_t)this, v49 + 32);
          unsigned int v53 = v52 + ~(-2 << (v49 + 31));
        }
        unint64_t v54 = *((void *)this + 13);
        ++*((_DWORD *)this + 41);
        unint64_t v55 = v54 >> 63;
        HEVC_RBSP::flush_bits((uint64_t)this, 1);
        *(unsigned char *)(a2 + 176 * a3 + v45 + 32) = v55;
        if (v45) {
          int v56 = v53 + *(_DWORD *)(a2 + 176 * a3 + 4 * v45 + 108) + 1;
        }
        else {
          int v56 = v53 + 1;
        }
        *(_DWORD *)(a2 + 176 * a3 + 4 * v45++ + 112) = v56;
      }
      while (v45 < *v32);
    }
    return 1;
  }
  return result;
}

uint64_t HEVC_RBSP::parseVUI(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)a2 = v6 < 0;
  if (v6 < 0)
  {
    int v7 = *(unsigned __int8 *)(a1 + 111);
    *(_DWORD *)(a1 + 164) += 8;
    HEVC_RBSP::flush_bits(a1, 8);
    *(_DWORD *)(a2 + 4) = v7;
    if (v7 == 255)
    {
      int v8 = *(unsigned __int16 *)(a1 + 110);
      *(_DWORD *)(a1 + 164) += 16;
      HEVC_RBSP::flush_bits(a1, 16);
      *(_DWORD *)(a2 + 8) = v8;
      int v9 = *(unsigned __int16 *)(a1 + 110);
      *(_DWORD *)(a1 + 164) += 16;
      HEVC_RBSP::flush_bits(a1, 16);
      *(_DWORD *)(a2 + 12) = v9;
    }
  }
  uint64_t v10 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 16) = v10 < 0;
  if (v10 < 0)
  {
    unint64_t v11 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    unint64_t v12 = v11 >> 63;
    HEVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(a2 + 17) = v12;
  }
  uint64_t v13 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 18) = v13 < 0;
  if (v13 < 0)
  {
    unint64_t v14 = *(void *)(a1 + 104);
    *(_DWORD *)(a1 + 164) += 3;
    unint64_t v15 = v14 >> 61;
    HEVC_RBSP::flush_bits(a1, 3);
    *(_DWORD *)(a2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v15;
    unint64_t v16 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    unint64_t v17 = v16 >> 63;
    HEVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(a2 + 24) = v17;
    uint64_t v18 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    HEVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(a2 + 25) = v18 < 0;
    if (v18 < 0)
    {
      int v19 = *(unsigned __int8 *)(a1 + 111);
      *(_DWORD *)(a1 + 164) += 8;
      HEVC_RBSP::flush_bits(a1, 8);
      *(_DWORD *)(a2 + 28) = v19;
      int v20 = *(unsigned __int8 *)(a1 + 111);
      *(_DWORD *)(a1 + 164) += 8;
      HEVC_RBSP::flush_bits(a1, 8);
      *(_DWORD *)(a2 + 32) = v20;
      int v21 = *(unsigned __int8 *)(a1 + 111);
      *(_DWORD *)(a1 + 164) += 8;
      HEVC_RBSP::flush_bits(a1, 8);
      *(_DWORD *)(a2 + 36) = v21;
    }
  }
  uint64_t v22 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v22 < 0;
  if (v22 < 0)
  {
    unint64_t v23 = *(void *)(a1 + 104);
    if ((v23 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v30 = 0;
    }
    else
    {
      unint64_t v24 = HIDWORD(v23);
      int v25 = -32;
      do
      {
        LODWORD(v24) = 2 * v24;
        int v26 = v25 + 1;
        if ((v24 & 0x80000000) != 0) {
          break;
        }
        unsigned int v27 = v25 + 32;
        ++v25;
      }
      while (v27 < 0x1E);
      *(_DWORD *)(a1 + 164) += v26 + 33;
      HEVC_RBSP::flush_bits(a1, v26 + 33);
      unsigned int v28 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v26 + 32;
      unsigned int v29 = v28 >> -(char)v26;
      HEVC_RBSP::flush_bits(a1, v26 + 32);
      unsigned int v30 = v29 + ~(-2 << (v26 + 31));
    }
    *(_DWORD *)(a2 + 44) = v30;
    unint64_t v31 = *(void *)(a1 + 104);
    if ((v31 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v38 = 0;
    }
    else
    {
      unint64_t v32 = HIDWORD(v31);
      int v33 = -32;
      do
      {
        LODWORD(v32) = 2 * v32;
        int v34 = v33 + 1;
        if ((v32 & 0x80000000) != 0) {
          break;
        }
        unsigned int v35 = v33 + 32;
        ++v33;
      }
      while (v35 < 0x1E);
      *(_DWORD *)(a1 + 164) += v34 + 33;
      HEVC_RBSP::flush_bits(a1, v34 + 33);
      unsigned int v36 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v34 + 32;
      unsigned int v37 = v36 >> -(char)v34;
      HEVC_RBSP::flush_bits(a1, v34 + 32);
      unsigned int v38 = v37 + ~(-2 << (v34 + 31));
    }
    *(_DWORD *)(a2 + 48) = v38;
  }
  unint64_t v39 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v40 = v39 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 52) = v40;
  unint64_t v41 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v42 = v41 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 53) = v42;
  unint64_t v43 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  unint64_t v44 = v43 >> 63;
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 54) = v44;
  uint64_t v45 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 55) = v45 < 0;
  if (v45 < 0)
  {
    unint64_t v46 = *(void *)(a1 + 104);
    if ((v46 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v53 = 0;
    }
    else
    {
      unint64_t v47 = HIDWORD(v46);
      int v48 = -32;
      do
      {
        LODWORD(v47) = 2 * v47;
        int v49 = v48 + 1;
        if ((v47 & 0x80000000) != 0) {
          break;
        }
        unsigned int v50 = v48 + 32;
        ++v48;
      }
      while (v50 < 0x1E);
      *(_DWORD *)(a1 + 164) += v49 + 33;
      HEVC_RBSP::flush_bits(a1, v49 + 33);
      unsigned int v51 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v49 + 32;
      unsigned int v52 = v51 >> -(char)v49;
      HEVC_RBSP::flush_bits(a1, v49 + 32);
      unsigned int v53 = v52 + ~(-2 << (v49 + 31));
    }
    *(_DWORD *)(a2 + 56) = v53;
    unint64_t v54 = *(void *)(a1 + 104);
    if ((v54 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v61 = 0;
    }
    else
    {
      unint64_t v55 = HIDWORD(v54);
      int v56 = -32;
      do
      {
        LODWORD(v55) = 2 * v55;
        int v57 = v56 + 1;
        if ((v55 & 0x80000000) != 0) {
          break;
        }
        unsigned int v58 = v56 + 32;
        ++v56;
      }
      while (v58 < 0x1E);
      *(_DWORD *)(a1 + 164) += v57 + 33;
      HEVC_RBSP::flush_bits(a1, v57 + 33);
      unsigned int v59 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v57 + 32;
      unsigned int v60 = v59 >> -(char)v57;
      HEVC_RBSP::flush_bits(a1, v57 + 32);
      unsigned int v61 = v60 + ~(-2 << (v57 + 31));
    }
    *(_DWORD *)(a2 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v61;
    unint64_t v62 = *(void *)(a1 + 104);
    if ((v62 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v69 = 0;
    }
    else
    {
      unint64_t v63 = HIDWORD(v62);
      int v64 = -32;
      do
      {
        LODWORD(v63) = 2 * v63;
        int v65 = v64 + 1;
        if ((v63 & 0x80000000) != 0) {
          break;
        }
        unsigned int v66 = v64 + 32;
        ++v64;
      }
      while (v66 < 0x1E);
      *(_DWORD *)(a1 + 164) += v65 + 33;
      HEVC_RBSP::flush_bits(a1, v65 + 33);
      unsigned int v67 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v65 + 32;
      unsigned int v68 = v67 >> -(char)v65;
      HEVC_RBSP::flush_bits(a1, v65 + 32);
      unsigned int v69 = v68 + ~(-2 << (v65 + 31));
    }
    *(_DWORD *)(a2 + 64) = v69;
    unint64_t v70 = *(void *)(a1 + 104);
    if ((v70 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v77 = 0;
    }
    else
    {
      unint64_t v71 = HIDWORD(v70);
      int v72 = -32;
      do
      {
        LODWORD(v71) = 2 * v71;
        int v73 = v72 + 1;
        if ((v71 & 0x80000000) != 0) {
          break;
        }
        unsigned int v74 = v72 + 32;
        ++v72;
      }
      while (v74 < 0x1E);
      *(_DWORD *)(a1 + 164) += v73 + 33;
      HEVC_RBSP::flush_bits(a1, v73 + 33);
      unsigned int v75 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v73 + 32;
      unsigned int v76 = v75 >> -(char)v73;
      HEVC_RBSP::flush_bits(a1, v73 + 32);
      unsigned int v77 = v76 + ~(-2 << (v73 + 31));
    }
    *(_DWORD *)(a2 + 68) = v77;
  }
  uint64_t v78 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 72) = v78 < 0;
  if ((v78 & 0x8000000000000000) == 0) {
    goto LABEL_60;
  }
  int v79 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 164) += 32;
  HEVC_RBSP::flush_bits(a1, 32);
  *(_DWORD *)(a2 + 76) = v79;
  int v80 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 164) += 32;
  HEVC_RBSP::flush_bits(a1, 32);
  *(_DWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v80;
  uint64_t v81 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 84) = v81 < 0;
  if (v81 < 0)
  {
    unint64_t v82 = *(void *)(a1 + 104);
    if ((v82 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v89 = 0;
    }
    else
    {
      unint64_t v83 = HIDWORD(v82);
      int v84 = -32;
      do
      {
        LODWORD(v83) = 2 * v83;
        int v85 = v84 + 1;
        if ((v83 & 0x80000000) != 0) {
          break;
        }
        unsigned int v86 = v84 + 32;
        ++v84;
      }
      while (v86 < 0x1E);
      *(_DWORD *)(a1 + 164) += v85 + 33;
      HEVC_RBSP::flush_bits(a1, v85 + 33);
      unsigned int v87 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v85 + 32;
      unsigned int v88 = v87 >> -(char)v85;
      HEVC_RBSP::flush_bits(a1, v85 + 32);
      unsigned int v89 = v88 + ~(-2 << (v85 + 31));
    }
    *(_DWORD *)(a2 + 88) = v89;
  }
  uint64_t v90 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 92) = v90 < 0;
  if (v90 < 0 && !HEVC_RBSP::parseHRD((HEVC_RBSP *)a1, a2 + 96, 1, a3)) {
    return 0;
  }
LABEL_60:
  uint64_t v91 = *(void *)(a1 + 104);
  ++*(_DWORD *)(a1 + 164);
  uint64_t v92 = 1;
  HEVC_RBSP::flush_bits(a1, 1);
  *(unsigned char *)(a2 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v91 < 0;
  if (v91 < 0)
  {
    unint64_t v93 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    unint64_t v94 = v93 >> 63;
    HEVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(a2 + 521) = v94;
    unint64_t v95 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    unint64_t v96 = v95 >> 63;
    HEVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(a2 + 522) = v96;
    unint64_t v97 = *(void *)(a1 + 104);
    ++*(_DWORD *)(a1 + 164);
    unint64_t v98 = v97 >> 63;
    HEVC_RBSP::flush_bits(a1, 1);
    *(unsigned char *)(a2 + 523) = v98;
    unint64_t v99 = *(void *)(a1 + 104);
    if ((v99 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v106 = 0;
    }
    else
    {
      unint64_t v100 = HIDWORD(v99);
      int v101 = -32;
      do
      {
        LODWORD(v10pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 2 * v100;
        int v102 = v101 + 1;
        if ((v100 & 0x80000000) != 0) {
          break;
        }
        unsigned int v103 = v101 + 32;
        ++v101;
      }
      while (v103 < 0x1E);
      *(_DWORD *)(a1 + 164) += v102 + 33;
      HEVC_RBSP::flush_bits(a1, v102 + 33);
      unsigned int v104 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v102 + 32;
      unsigned int v105 = v104 >> -(char)v102;
      HEVC_RBSP::flush_bits(a1, v102 + 32);
      unsigned int v106 = v105 + ~(-2 << (v102 + 31));
    }
    *(_DWORD *)(a2 + 524) = v106;
    unint64_t v107 = *(void *)(a1 + 104);
    if ((v107 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v114 = 0;
    }
    else
    {
      unint64_t v108 = HIDWORD(v107);
      int v109 = -32;
      do
      {
        LODWORD(v108) = 2 * v108;
        int v110 = v109 + 1;
        if ((v108 & 0x80000000) != 0) {
          break;
        }
        unsigned int v111 = v109 + 32;
        ++v109;
      }
      while (v111 < 0x1E);
      *(_DWORD *)(a1 + 164) += v110 + 33;
      HEVC_RBSP::flush_bits(a1, v110 + 33);
      unsigned int v112 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v110 + 32;
      unsigned int v113 = v112 >> -(char)v110;
      HEVC_RBSP::flush_bits(a1, v110 + 32);
      unsigned int v114 = v113 + ~(-2 << (v110 + 31));
    }
    *(_DWORD *)(a2 + 528) = v114;
    unint64_t v115 = *(void *)(a1 + 104);
    if ((v115 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v122 = 0;
    }
    else
    {
      unint64_t v116 = HIDWORD(v115);
      int v117 = -32;
      do
      {
        LODWORD(v116) = 2 * v116;
        int v118 = v117 + 1;
        if ((v116 & 0x80000000) != 0) {
          break;
        }
        unsigned int v119 = v117 + 32;
        ++v117;
      }
      while (v119 < 0x1E);
      *(_DWORD *)(a1 + 164) += v118 + 33;
      HEVC_RBSP::flush_bits(a1, v118 + 33);
      unsigned int v120 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v118 + 32;
      unsigned int v121 = v120 >> -(char)v118;
      HEVC_RBSP::flush_bits(a1, v118 + 32);
      unsigned int v122 = v121 + ~(-2 << (v118 + 31));
    }
    *(_DWORD *)(a2 + 532) = v122;
    unint64_t v123 = *(void *)(a1 + 104);
    if ((v123 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v130 = 0;
    }
    else
    {
      unint64_t v124 = HIDWORD(v123);
      int v125 = -32;
      do
      {
        LODWORD(v124) = 2 * v124;
        int v126 = v125 + 1;
        if ((v124 & 0x80000000) != 0) {
          break;
        }
        unsigned int v127 = v125 + 32;
        ++v125;
      }
      while (v127 < 0x1E);
      *(_DWORD *)(a1 + 164) += v126 + 33;
      HEVC_RBSP::flush_bits(a1, v126 + 33);
      unsigned int v128 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v126 + 32;
      unsigned int v129 = v128 >> -(char)v126;
      HEVC_RBSP::flush_bits(a1, v126 + 32);
      unsigned int v130 = v129 + ~(-2 << (v126 + 31));
    }
    *(_DWORD *)(a2 + 536) = v130;
    unint64_t v131 = *(void *)(a1 + 104);
    if ((v131 & 0x8000000000000000) != 0)
    {
      ++*(_DWORD *)(a1 + 164);
      HEVC_RBSP::flush_bits(a1, 1);
      unsigned int v138 = 0;
    }
    else
    {
      unint64_t v132 = HIDWORD(v131);
      int v133 = -32;
      do
      {
        LODWORD(v132) = 2 * v132;
        int v134 = v133 + 1;
        if ((v132 & 0x80000000) != 0) {
          break;
        }
        unsigned int v135 = v133 + 32;
        ++v133;
      }
      while (v135 < 0x1E);
      *(_DWORD *)(a1 + 164) += v134 + 33;
      HEVC_RBSP::flush_bits(a1, v134 + 33);
      unsigned int v136 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 164) += v134 + 32;
      unsigned int v137 = v136 >> -(char)v134;
      HEVC_RBSP::flush_bits(a1, v134 + 32);
      unsigned int v138 = v137 + ~(-2 << (v134 + 31));
    }
    *(_DWORD *)(a2 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v138;
    return 1;
  }
  return v92;
}

void HEVC_RBSP::setDefaultScalingListData(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = 0;
  *(unsigned char *)(a2 + 6196) = 1;
  *(_DWORD *)(a2 + 6192) = 0;
  do
  {
    unint64_t v4 = 0;
    unsigned int v5 = 16 << (2 * v3);
    if (v5 >= 0x40) {
      unsigned int v5 = 64;
    }
    uint64_t v6 = 32;
    if (!v3) {
      uint64_t v6 = 8;
    }
    int v7 = *(unsigned int **)(a1 + v6);
    if (v5 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v5;
    }
    if (v3 == 3) {
      uint64_t v9 = 2;
    }
    else {
      uint64_t v9 = 6;
    }
    do
    {
      if (v3)
      {
        if (v3 != 1) {
          *(_DWORD *)(a2 + 24 * (v3 - 2) + 4 * v4 + 6144) = 16;
        }
        if (v4 >= 3) {
          uint64_t v10 = (int *)&defaultInterScalingList8x8;
        }
        else {
          uint64_t v10 = (int *)&defaultIntraScalingList8x8;
        }
        if (v4) {
          unint64_t v11 = (int *)&defaultInterScalingList8x8;
        }
        else {
          unint64_t v11 = (int *)&defaultIntraScalingList8x8;
        }
        if (v3 >= 3) {
          uint64_t v10 = v11;
        }
        uint64_t v12 = v8;
        uint64_t v13 = v7;
        do
        {
          int v15 = *v10++;
          int v14 = v15;
          unsigned int v16 = *v13++;
          *(_DWORD *)(a2 + 1536 * v3 + (v4 << 8) + 4 * v16) = v14;
          --v12;
        }
        while (v12);
      }
      else
      {
        memset_pattern16((void *)(a2 + (v4 << 8)), &unk_223ADBFC0, (4 * v8));
      }
      ++v4;
    }
    while (v4 != v9);
    ++v3;
  }
  while (v3 != 4);
}

uint64_t AppleAVDWrapperHEVCDecoderSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  valuePtr[1] = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = (unsigned __int8 *)(DerivedStorage + 5816);
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7A8]))
  {
    LODWORD(valuePtr[0]) = 0;
    CFNumberGetValue(a3, kCFNumberSInt32Type, valuePtr);
    if (LODWORD(valuePtr[0]) <= 0x2A && ((1 << SLOBYTE(valuePtr[0])) & 0x40000100002) != 0)
    {
      *uint64_t v6 = valuePtr[0];
      uint64_t v7 = *(void *)(DerivedStorage + 5184);
      if (!v7)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
          uint64_t v8 = &_os_log_internal;
          uint64_t v9 = "AppleAVD: WARNING: %s() - trying to set kAppleAVDSetUsageMode before videoContext was created!\n";
          goto LABEL_20;
        }
        return 4294954385;
      }
      if (AppleAVDSetParameter(v7, 18, v6))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
          uint64_t v8 = &_os_log_internal;
          uint64_t v9 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDSetUsageMode returned ERROR\n";
LABEL_20:
          uint32_t v14 = 12;
LABEL_21:
          _os_log_impl(&dword_223977000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v14);
          return 4294954385;
        }
        return 4294954385;
      }
    }
    uint64_t v13 = *(FILE **)(DerivedStorage + 8040);
    if (v13) {
      fprintf(v13, "%d usage %d\n", *(_DWORD *)(DerivedStorage + 5208), LODWORD(valuePtr[0]));
    }
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7B8]))
  {
    LODWORD(valuePtr[0]) = 0;
    if (!a3) {
      return 4294954394;
    }
    CFNumberGetValue(a3, kCFNumberSInt32Type, valuePtr);
    int v10 = valuePtr[0];
    if (LODWORD(valuePtr[0]) == 3)
    {
      uint64_t v11 = *(void *)(DerivedStorage + 5184);
      if (v11)
      {
        uint64_t result = AppleAVDSetParameter(v11, 31, (unsigned __int8 *)valuePtr);
        if (!result) {
          return result;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 4294954385;
        }
        *(_DWORD *)buf = 136315138;
        unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
        uint64_t v8 = &_os_log_internal;
        uint64_t v9 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDSetVRAType returned ERROR\n";
      }
      else
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 4294954385;
        }
        *(_DWORD *)buf = 136315138;
        unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
        uint64_t v8 = &_os_log_internal;
        uint64_t v9 = "AppleAVD: WARNING: %s() - trying to set kAppleAVDSetVRAType before videoContext was created!\n";
      }
      goto LABEL_20;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 4294954394;
    }
    *(_DWORD *)buf = 67109120;
    LODWORD(v52) = v10;
    int v21 = &_os_log_internal;
    uint64_t v22 = "AppleAVD: ERROR: AppleAVD_HEVCDecoder - AppleAVDSetParameter kAppleAVDSetVRAType: Unsupported VRA Type:%d\n";
    uint32_t v23 = 8;
    goto LABEL_41;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E6E0]))
  {
    valuePtr[0] = 0;
    if (!a3) {
      return 4294954394;
    }
    CFTypeID v15 = CFGetTypeID(a3);
    if (v15 != CFDictionaryGetTypeID()) {
      return 4294954394;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x263F1E810]);
    if (!Value) {
      return 4294954394;
    }
    CFNumberGetValue(Value, kCFNumberIntType, valuePtr);
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x263F1E808]);
    if (!v17) {
      return 4294954394;
    }
    CFNumberGetValue(v17, kCFNumberIntType, (char *)valuePtr + 4);
    int v18 = valuePtr[0];
    if (LODWORD(valuePtr[0]) != 1080)
    {
      int v19 = HIDWORD(valuePtr[0]);
      if (HIDWORD(valuePtr[0]) != 1080 && ((LOBYTE(valuePtr[0]) | BYTE4(valuePtr[0])) & 0xF) != 0)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
          __int16 v53 = 1024;
          LODWORD(v54[0]) = v18;
          WORD2(v54[0]) = 1024;
          *(_DWORD *)((char *)v54 + 6) = v19;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() - Non-mod16 VRA dimensions with width %d, height %d\n", buf, 0x18u);
        }
        if (*(_DWORD *)(DerivedStorage + 5204) == 2 && valuePtr[0] != *(void *)(DerivedStorage + 5224)) {
          return 4294954385;
        }
      }
    }
    uint64_t v20 = *(void *)(DerivedStorage + 5184);
    if (!v20)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 4294954385;
      }
      *(_DWORD *)buf = 136315138;
      unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
      uint64_t v8 = &_os_log_internal;
      uint64_t v9 = "AppleAVD: WARNING: %s() - trying to set kAppleAVDSetVRADimensions before videoContext was created!\n";
      goto LABEL_20;
    }
    uint64_t result = AppleAVDSetParameter(v20, 32, (unsigned __int8 *)valuePtr);
    if (result)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 4294954385;
      }
      *(_DWORD *)buf = 136315138;
      unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
      uint64_t v8 = &_os_log_internal;
      uint64_t v9 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDSetVRADimensions returned ERROR\n";
      goto LABEL_20;
    }
    return result;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E710]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E758]))
    {
      if (a3)
      {
        int v25 = CFBooleanGetValue(a3);
        uint64_t result = 0;
        *(_DWORD *)(DerivedStorage + 8016) = v25;
        return result;
      }
      return 4294954394;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E738]))
    {
      if (a3)
      {
        int v26 = CFBooleanGetValue(a3);
        uint64_t result = 0;
        *(_DWORD *)(DerivedStorage + 8012) = v26;
        return result;
      }
      return 4294954394;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E770]))
    {
      if (!*(unsigned char *)(DerivedStorage + 8145))
      {
        if (a3)
        {
          Typeuint64_t ID = CFArrayGetTypeID();
          if (TypeID != CFGetTypeID(a3))
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 4294954385;
            }
            *(_DWORD *)buf = 136315138;
            unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
            uint64_t v8 = &_os_log_internal;
            uint64_t v9 = "AppleAVD: %s - kVTDecompressionPropertyKey_RequestedMVHEVCVideoLayerIDs error";
            goto LABEL_20;
          }
          Copy = (unsigned __int8 *)CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a3);
          *(void *)(DerivedStorage + 16808) = Copy;
        }
        else
        {
          Copy = *(unsigned __int8 **)(DerivedStorage + 16808);
        }
        if (!Copy) {
          return 0;
        }
        uint64_t v33 = *(void *)(DerivedStorage + 5184);
        if (!v33)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 4294954385;
          }
          *(_DWORD *)buf = 136315138;
          unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
          uint64_t v8 = &_os_log_internal;
          uint64_t v9 = "AppleAVD: WARNING: %s() - trying to set kAppleAVDSetMVHEVCDisplayLayerIDs before videoContext was created!\n";
          goto LABEL_20;
        }
        if (AppleAVDSetParameter(v33, 64, Copy))
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 4294954385;
          }
          *(_DWORD *)buf = 136315138;
          unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
          uint64_t v8 = &_os_log_internal;
          uint64_t v9 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDSetMVHEVCDisplayLayerIDs returned ERROR\n";
          goto LABEL_20;
        }
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16808));
        if (Count < 1) {
          return 0;
        }
        CFIndex v38 = Count;
        for (CFIndex i = 0; i != v38; ++i)
        {
          *(_DWORD *)buf = 0;
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16808), i);
          CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, buf);
          uint64_t result = 0;
        }
        return result;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s - kVTDecompressionPropertyKey_RequestedMVHEVCVideoLayerIDs not supported for hevc stream", buf, 0xCu);
      }
      return 4294954396;
    }
    if (CFEqual(a2, @"NegotiationDetails"))
    {
      uint64_t result = (uint64_t)malloc_type_malloc(0x3E9uLL, 0xF0C05DD0uLL);
      if (result)
      {
        unsigned int v27 = (char *)result;
        LODWORD(valuePtr[0]) = 0;
        CFTypeID v28 = CFStringGetTypeID();
        int v29 = 0;
        if (v28 == CFGetTypeID(a3))
        {
          if (CFStringGetCString((CFStringRef)a3, v27, 1001, 0x8000100u)
            && (size_t v30 = strnlen(v27, 0x3E9uLL), strnstr(v27, "RVRA1:", v30)))
          {
            int v29 = 1;
            LODWORD(valuePtr[0]) = 1;
          }
          else
          {
            int v29 = 0;
          }
        }
        free(v27);
        *(_DWORD *)(DerivedStorage + 582pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v29;
        uint64_t v36 = *(void *)(DerivedStorage + 5184);
        if (!v36)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 4294954385;
          }
          *(_DWORD *)buf = 136315138;
          unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
          uint64_t v8 = &_os_log_internal;
          uint64_t v9 = "AppleAVD: WARNING: %s() - trying to set kAppleAVDEnableRVRA before videoContext was created!\n";
          goto LABEL_20;
        }
        uint64_t result = AppleAVDSetParameter(v36, 36, (unsigned __int8 *)valuePtr);
        if (result)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 4294954385;
          }
          *(_DWORD *)buf = 136315138;
          unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
          uint64_t v8 = &_os_log_internal;
          uint64_t v9 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDEnableRVRA returned ERROR\n";
          goto LABEL_20;
        }
      }
      return result;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7B0])) {
      return 4294954395;
    }
    int v34 = (BOOL *)(DerivedStorage + 16832);
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E778]))
    {
      unsigned int v35 = *(_DWORD *)(DerivedStorage + 5204);
      if (v35 >= 2)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 4294954385;
        }
        *(_DWORD *)buf = 136315394;
        unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
        __int16 v53 = 1024;
        LODWORD(v54[0]) = v35;
        uint64_t v8 = &_os_log_internal;
        uint64_t v9 = "AppleAVD: %s(): WARNING! pluginState (%d) was already started! Trying to change kVTDecompressionPropertyKey"
             "_SelectPixelFormatWithAlpha";
        goto LABEL_105;
      }
      if (a3)
      {
        CFTypeID v42 = CFBooleanGetTypeID();
        if (v42 == CFGetTypeID(a3))
        {
          int v43 = CFBooleanGetValue(a3);
          *int v34 = v43 != 0;
          BOOL v44 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (!v44) {
            return result;
          }
          *(_DWORD *)buf = 136315394;
          unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
          __int16 v53 = 1024;
          LODWORD(v54[0]) = v43 != 0;
          uint64_t v45 = &_os_log_internal;
          unint64_t v46 = "AppleAVD: %s(): kVTDecompressionPropertyKey_SelectPixelFormatWithAlpha storage->decodeToBufferWithAlpha:%d";
          goto LABEL_110;
        }
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 4294954394;
      }
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x263F1E7C0])) {
        return 4294954396;
      }
      unsigned int v41 = *(_DWORD *)(DerivedStorage + 5204);
      if (v41 >= 2)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return 4294954385;
        }
        *(_DWORD *)buf = 136315394;
        unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
        __int16 v53 = 1024;
        LODWORD(v54[0]) = v41;
        uint64_t v8 = &_os_log_internal;
        uint64_t v9 = "AppleAVD: %s(): WARNING! pluginState (%d) was already started! Trying to change kVTDecompressionPropertyKey"
             "_WriteDirectlyToPlanesOfTargetCVPixelBuffer";
LABEL_105:
        uint32_t v14 = 18;
        goto LABEL_21;
      }
      if (a3)
      {
        CFTypeID v47 = CFNumberGetTypeID();
        if (v47 == CFGetTypeID(a3))
        {
          LODWORD(valuePtr[0]) = 0;
          BOOL v48 = *v34;
          CFNumberGetValue(a3, kCFNumberSInt32Type, valuePtr);
          int v49 = valuePtr[0];
          if ((valuePtr[0] & 0x80000000) != 0) {
            return 4294954394;
          }
          unsigned int v50 = v48 ? 2 : 1;
          if (LODWORD(valuePtr[0]) > v50) {
            return 4294954394;
          }
          void v34[8] = 1;
          *((_DWORD *)v34 + 3) = v49;
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0;
          }
          *(_DWORD *)buf = 136315394;
          unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
          __int16 v53 = 1024;
          LODWORD(v54[0]) = v49;
          uint64_t v45 = &_os_log_internal;
          unint64_t v46 = "AppleAVD: %s(): kVTDecompressionPropertyKey_WriteDirectlyToPlanesOfTargetCVPixelBuffer storage->startingPlaneOffset:%d";
LABEL_110:
          _os_log_impl(&dword_223977000, v45, OS_LOG_TYPE_DEFAULT, v46, buf, 0x12u);
          return 0;
        }
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 4294954394;
      }
    }
    *(_DWORD *)buf = 136315394;
    unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
    __int16 v53 = 2048;
    v54[0] = a3;
    int v21 = &_os_log_internal;
    uint64_t v22 = "AppleAVD: %s(): propertyValue (%p) is invalid!";
    uint32_t v23 = 22;
LABEL_41:
    _os_log_impl(&dword_223977000, v21, OS_LOG_TYPE_DEFAULT, v22, buf, v23);
    return 4294954394;
  }
  LODWORD(valuePtr[0]) = 0;
  if (!a3) {
    return 4294954394;
  }
  CFNumberGetValue(a3, kCFNumberSInt32Type, valuePtr);
  *(_DWORD *)(DerivedStorage + 5824) = valuePtr[0];
  uint64_t v24 = *(void *)(DerivedStorage + 5184);
  if (!v24)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 4294954385;
    }
    *(_DWORD *)buf = 136315138;
    unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
    uint64_t v8 = &_os_log_internal;
    uint64_t v9 = "AppleAVD: WARNING: %s() - trying to set kAppleAVDExtraInloopFilter before videoContext was created!\n";
    goto LABEL_20;
  }
  uint64_t result = AppleAVDSetParameter(v24, 20, (unsigned __int8 *)valuePtr);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 4294954385;
    }
    *(_DWORD *)buf = 136315138;
    unsigned int v52 = "AppleAVDWrapperHEVCDecoderSetProperty";
    uint64_t v8 = &_os_log_internal;
    uint64_t v9 = "AppleAVD: ERROR: %s() - AppleAVDSetParameter call for kAppleAVDExtraInloopFilter returned ERROR\n";
    goto LABEL_20;
  }
  return result;
}

void AVDRegister()
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    uint64_t v1 = Mutable;
    int v2 = AppleAVDCheckPlatform(&v29);
    if (v2)
    {
      int v3 = v2;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        unint64_t v31 = "AVDRegister";
        __int16 v32 = 1024;
        LODWORD(v33) = v3;
        unint64_t v4 = &_os_log_internal;
        unsigned int v5 = "AppleAVD: ERROR: %s() - AppleAVDCheckPlatform() returned error %d\n";
        uint32_t v6 = 18;
LABEL_42:
        _os_log_impl(&dword_223977000, v4, OS_LOG_TYPE_DEFAULT, v5, buf, v6);
        goto LABEL_43;
      }
      goto LABEL_43;
    }
    CFDictionarySetValue(v1, (const void *)*MEMORY[0x263F1ED20], (const void *)*MEMORY[0x263EFFB40]);
    BOOL v7 = registerDecoder(0x68766331u);
    BOOL v8 = registerDecoder(0x71687663u);
    BOOL v9 = registerDecoder(0x63687663u);
    BOOL v10 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    if (v7 || v8 || v9)
    {
      if (!v10) {
        goto LABEL_15;
      }
      *(_DWORD *)buf = 136315394;
      unint64_t v31 = "AVDRegister";
      __int16 v32 = 2048;
      uint64_t v33 = v29;
      uint64_t v11 = &_os_log_internal;
      uint64_t v12 = "AppleAVD: ERROR: %s() - AppleAVD HEVC codec registration FAILED. CheckPlatform 0x%llx\n";
    }
    else
    {
      if (!v10) {
        goto LABEL_15;
      }
      *(_DWORD *)buf = 136315394;
      unint64_t v31 = "AVDRegister";
      __int16 v32 = 2048;
      uint64_t v33 = v29;
      uint64_t v11 = &_os_log_internal;
      uint64_t v12 = "AppleAVD: INFO: %s() - AppleAVD HEVC codec registered. CheckPlatform 0x%llx\n";
    }
    _os_log_impl(&dword_223977000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 0x16u);
LABEL_15:
    if ((v29 & 2) == 0) {
      goto LABEL_26;
    }
    BOOL v13 = registerDecoder(0x61766331u);
    BOOL v14 = registerDecoder(0x64726D69u);
    BOOL v15 = registerDecoder(0x7A617663u);
    BOOL v16 = registerDecoder(0x63617663u);
    BOOL v17 = registerDecoder(0x71617663u);
    BOOL v18 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    if (v13 || v14 || v15 || v16 || v17)
    {
      if (!v18) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136315138;
      unint64_t v31 = "AVDRegister";
      int v19 = &_os_log_internal;
      uint64_t v20 = "AppleAVD: ERROR: %s() - AppleAVD H264 codec registration FAILED\n";
    }
    else
    {
      if (!v18) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136315138;
      unint64_t v31 = "AVDRegister";
      int v19 = &_os_log_internal;
      uint64_t v20 = "AppleAVD: INFO: %s() - AppleAVD H264 codec registered\n";
    }
    _os_log_impl(&dword_223977000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
LABEL_26:
    if ((v29 & 4) == 0) {
      goto LABEL_34;
    }
    BOOL v21 = registerDecoder(0x76703039u);
    BOOL v22 = registerDecoder(0x71767039u);
    BOOL v23 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    if (v21 || v22)
    {
      if (!v23) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136315138;
      unint64_t v31 = "AVDRegister";
      uint64_t v24 = &_os_log_internal;
      int v25 = "AppleAVD: ERROR: %s() - AppleAVD Leghorn codec registration FAILED\n";
    }
    else
    {
      if (!v23) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136315138;
      unint64_t v31 = "AVDRegister";
      uint64_t v24 = &_os_log_internal;
      int v25 = "AppleAVD: INFO: %s() - AppleAVD Leghorn codec registered\n";
    }
    _os_log_impl(&dword_223977000, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 0xCu);
LABEL_34:
    if ((v29 & 8) != 0)
    {
      BOOL v26 = registerDecoder(0x61763031u);
      BOOL v27 = registerDecoder(0x71617631u);
      BOOL v28 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      if (v26 || v27)
      {
        if (!v28) {
          goto LABEL_43;
        }
        *(_DWORD *)buf = 136315138;
        unint64_t v31 = "AVDRegister";
        unint64_t v4 = &_os_log_internal;
        unsigned int v5 = "AppleAVD: ERROR: %s() - AppleAVD Foghorn codec registration FAILED\n";
      }
      else
      {
        if (!v28) {
          goto LABEL_43;
        }
        *(_DWORD *)buf = 136315138;
        unint64_t v31 = "AVDRegister";
        unint64_t v4 = &_os_log_internal;
        unsigned int v5 = "AppleAVD: INFO: %s() - AppleAVD Foghorn codec registered\n";
      }
      uint32_t v6 = 12;
      goto LABEL_42;
    }
LABEL_43:
    CFRelease(v1);
    return;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    unint64_t v31 = "AVDRegister";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() - infoDict creation failed!\n", buf, 0xCu);
  }
}

BOOL registerDecoder(unsigned int a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v2 = VTRegisterVideoDecoderWithInfo();
  if (v2 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136316418;
    unsigned int v5 = "registerDecoder";
    __int16 v6 = 1024;
    unsigned int v7 = HIBYTE(a1);
    __int16 v8 = 1024;
    int v9 = BYTE2(a1);
    __int16 v10 = 1024;
    int v11 = BYTE1(a1);
    __int16 v12 = 1024;
    int v13 = a1;
    __int16 v14 = 1024;
    int v15 = v2;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Registration for %c%c%c%c failed with status %d\n", (uint8_t *)&v4, 0x2Au);
  }
  return v2 != 0;
}

uint64_t AppleAVDCheckPlatform(void *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(void *)existing = 0;
  *a1 = 42405;
  if (MEMORY[0x223CBA9B0](0, &existing[1]))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_8;
    }
    *(_DWORD *)buf = 136315138;
    int v19 = "AppleAVDCheckPlatform";
    int v2 = &_os_log_internal;
    int v3 = "AppleAVD: %s(): IOMainPort failed \n";
LABEL_7:
    _os_log_impl(&dword_223977000, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 0xCu);
    goto LABEL_8;
  }
  mach_port_t v4 = existing[1];
  CFDictionaryRef v5 = IOServiceMatching("AppleAVD");
  if (IOServiceGetMatchingServices(v4, v5, existing))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_8;
    }
    *(_DWORD *)buf = 136315138;
    int v19 = "AppleAVDCheckPlatform";
    int v2 = &_os_log_internal;
    int v3 = "AppleAVD: %s(): IOServiceGetMatchingServices failed \n";
    goto LABEL_7;
  }
  io_registry_entry_t v11 = IOIteratorNext(existing[0]);
  if (v11)
  {
    io_object_t v12 = v11;
    CFNumberRef CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(v11, @"AVCSupported", (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    if (CFProperty)
    {
      CFNumberRef v14 = CFProperty;
      CFTypeID v15 = CFGetTypeID(CFProperty);
      if (v15 == CFNumberGetTypeID())
      {
        int Value = CFNumberGetValue(v14, kCFNumberSInt64Type, a1);
      }
      else
      {
        int Value = 0;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          int v19 = "AppleAVDCheckPlatform";
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): ERROR! AVCSupported is not CFNumberType!", buf, 0xCu);
          int Value = 0;
        }
      }
      CFRelease(v14);
    }
    else
    {
      int Value = 0;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        int v19 = "AppleAVDCheckPlatform";
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Error: couldn't get AVCSupported property!", buf, 0xCu);
        int Value = 0;
      }
    }
    IOObjectRelease(v12);
    IOObjectRelease(existing[0]);
    if (Value) {
      return 0;
    }
    uint64_t v6 = 3758097084;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return v6;
    }
    *(_DWORD *)buf = 136315138;
    int v19 = "AppleAVDCheckPlatform";
    unsigned int v7 = &_os_log_internal;
    __int16 v8 = "AppleAVD: %s(): problem with CFNumberGetValue\n";
    uint32_t v9 = 12;
    goto LABEL_10;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    int v19 = "AppleAVDCheckPlatform";
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): IOIteratorNext failed \n", buf, 0xCu);
  }
  IOObjectRelease(existing[0]);
LABEL_8:
  uint64_t v6 = 3758097084;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v19 = "AppleAVDCheckPlatform";
    __int16 v20 = 2080;
    BOOL v21 = "AppleAVD";
    unsigned int v7 = &_os_log_internal;
    __int16 v8 = "AppleAVD: %s(): NOT on the appropriate system - %s not found\n";
    uint32_t v9 = 22;
LABEL_10:
    _os_log_impl(&dword_223977000, v7, OS_LOG_TYPE_DEFAULT, v8, buf, v9);
  }
  return v6;
}

void AppleAVDWrapperHEVCDecoderFinalize()
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v10 = 136315138;
    io_registry_entry_t v11 = "AppleAVDWrapperHEVCDecoderFinalize";
    mach_port_t v4 = &_os_log_internal;
    CFDictionaryRef v5 = "AppleAVD: %s called with invalid storage";
    uint32_t v6 = 12;
    goto LABEL_11;
  }
  uint64_t v1 = (_DWORD *)DerivedStorage;
  int v2 = (pthread_mutex_t *)(DerivedStorage + 5648);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 5648));
  int v3 = v1[1301];
  if ((v3 - 1) >= 3)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      io_registry_entry_t v11 = "AppleAVDWrapperHEVCDecoderFinalize";
      __int16 v12 = 1024;
      int v13 = v3;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s called but plugin state is %d", (uint8_t *)&v10, 0x12u);
    }
  }
  else if (v3 != 3)
  {
    AppleAVDWrapperHEVCDecoderCleanUp();
  }
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = v1[1457];
    int v8 = v1[1303];
    int v9 = v1[1304];
    int v10 = 136316162;
    io_registry_entry_t v11 = "AppleAVDWrapperHEVCDecoderFinalize";
    __int16 v12 = 1024;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    __int16 v16 = 1024;
    int v17 = v9;
    __int16 v18 = 2048;
    int v19 = v1;
    mach_port_t v4 = &_os_log_internal;
    CFDictionaryRef v5 = "AppleAVD: %s() codecType: HEVC, encryptionScheme %d, %d x %d, session: %p";
    uint32_t v6 = 40;
LABEL_11:
    _os_log_impl(&dword_223977000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v10, v6);
  }
}

uint64_t CAHDecCatnipHevc::getSWRStride(CAHDecCatnipHevc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1478) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 2957) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        __int16 v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

CAHDecTansyAvc *createTansyAvcDecoder(CAVDAvcDecoder *a1)
{
  int v2 = (CAHDecTansyAvc *)operator new(0x2F10uLL, MEMORY[0x263F8C180]);
  int v3 = v2;
  if (v2) {
    CAHDecTansyAvc::CAHDecTansyAvc(v2, a1);
  }
  return v3;
}

void sub_2239AA6EC(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecTansyAvc::CAHDecTansyAvc(CAHDecTansyAvc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D7405A0;
  *(_DWORD *)(v1 + 456) = 956 * *(unsigned __int16 *)(*(void *)(v1 + 256) + 7500) + 182432;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecTansyAvc::CAHDecTansyAvc(CAHDecTansyAvc *this, CAVDAvcDecoder *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D7405A0;
  *(void *)(v4 + 256) = a2;
  uint64_t v5 = 956 * *((unsigned __int16 *)a2 + 3750) + 182432;
  *(_DWORD *)(v4 + 456) = v5;
  *(_DWORD *)(v4 + 8) = 2208;
  *(_OWORD *)(v4 + 16) = xmmword_223AD04F0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), v5, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      unsigned int v8 = "CAHDecTansyAvc";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v7, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
  }
  else
  {
    uint64_t v6 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v6;
    *((void *)this + 34) = v6;
    *((_OWORD *)this + 742) = 0u;
    *((_OWORD *)this + 743) = 0u;
    *((_OWORD *)this + 744) = 0u;
    *((_OWORD *)this + 745) = 0u;
    *((_OWORD *)this + 746) = 0u;
    *((_OWORD *)this + 747) = 0u;
    *((_OWORD *)this + 748) = 0u;
    *((_OWORD *)this + 749) = 0u;
    *((_OWORD *)this + 75pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 751) = 0u;
    *((_OWORD *)this + 752) = 0u;
    bzero((char *)this + 560, 0x2C00uLL);
  }
}

void sub_2239AA8F4(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecTansyAvc::~CAHDecTansyAvc(CAHDecTansyAvc *this)
{
  *(void *)this = &unk_26D7405A0;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecTansyAvc::~CAHDecTansyAvc(this);

  JUMPOUT(0x223CBAD30);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t CAHDecTansyAvc::initPicture(CAHDecTansyAvc *this, int a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v5 = 956 * *(unsigned __int16 *)(*((void *)this + 32) + 7500) + 182432;
  *((_DWORD *)this + 114) = v5;
  *((_DWORD *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v6;
  if (v6)
  {
    bzero(v6, v5);
    uint64_t v8 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v8 + 16) = a2;
    *(_WORD *)(v8 + 24) = 257;
    *(_WORD *)(v8 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 2963) = 0;
    *((void *)this + 1489) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "initPicture";
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v10, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecTansyAvc::populateSlices(CAHDecTansyAvc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2208;
    uint64_t v5 = a2;
    do
    {
      CAHDecTansyAvc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 956;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecTansyAvc::populateSliceRegisters(uint64_t a1, uint64_t a2, signed int a3)
{
  char v6 = 0;
  uint64_t v125 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 256);
  int v8 = *(_DWORD *)(v7 + 3616);
  uint64_t v9 = *(void *)(v7 + 3304);
  uint64_t v112 = *(void *)(v7 + 3296);
  int v113 = *(_DWORD *)(v7 + 3612);
  uint64_t v10 = *(void *)(v7 + 3312);
  uint64_t v11 = *(unsigned int *)(v7 + 7064);
  uint64_t v12 = *(void *)(v7 + 3320);
  *(_DWORD *)(a2 + 4) = 0;
  uint64_t v14 = v10 + 1848 * a3;
  int v15 = 32 * (*(unsigned char *)(v14 + 1424) & 3);
  *(_DWORD *)(a2 + 4) = v15;
  int v17 = *(unsigned __int8 *)(v14 + 24);
  unsigned int v16 = (unsigned char *)(v14 + 24);
  if (v17 != 2) {
    char v6 = *(unsigned char *)(v10 + 1848 * a3 + 63);
  }
  unsigned int v18 = v15 & 0xFFFF87FF | ((v6 & 0xF) << 11);
  *(_DWORD *)(a2 + 4) = v18;
  if (*v16 == 1) {
    char v19 = *(unsigned char *)(v10 + 1848 * a3 + 64);
  }
  else {
    char v19 = 0;
  }
  int v20 = ((v19 & 0xF) << 7) | v18;
  *(_DWORD *)(a2 + 4) = v20;
  if (*v16 == 1 && !*(unsigned char *)(v10 + 1848 * a3 + 61)) {
    int v21 = 0x8000;
  }
  else {
    int v21 = 0;
  }
  uint64_t v114 = v9;
  int v115 = v8;
  int v22 = v21 | v20;
  *(_DWORD *)(a2 + 4) = v22;
  if (*v16) {
    int v23 = 0x20000;
  }
  else {
    int v23 = 0x10000;
  }
  if (*v16 == 1) {
    int v24 = 0;
  }
  else {
    int v24 = v23;
  }
  *(_DWORD *)(a2 + 4) = v24 | v22;
  if (*v16 != 1) {
    goto LABEL_20;
  }
  uint64_t v25 = v12 + 13040 * a3 + 7224;
  uint64_t v26 = v10 + 1848 * a3;
  *(void *)(v26 + 1832) = v25;
  if (*(unsigned char *)(v12 + 13040 * a3 + 7227)
    || (uint64_t v27 = *(unsigned int *)(v12 + 13040 * a3 + 7256), *(_DWORD *)(a1 + 4 * v27 + 464)))
  {
    int v28 = 16;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 11852))
    {
      *(void *)(a1 + 11912) = *(void *)(v12 + 13040 * a3 + 7264);
      *(_DWORD *)(a1 + 11904) = v27;
      *(_DWORD *)(a1 + 11852) = 1;
      *(_DWORD *)(a2 + 4) |= 0x40000u;
      uint64_t v25 = *(void *)(v26 + 1832);
      if (!v25 || !*(_DWORD *)(a1 + 11852)) {
        goto LABEL_20;
      }
    }
    uint64_t v107 = *(void *)(v25 + 40);
    if (v107 == *(void *)(a1 + 11912)) {
      goto LABEL_20;
    }
    *(void *)(a1 + 11912) = v107;
    *(_DWORD *)(a1 + 11904) = *(_DWORD *)(v25 + 32);
    int v28 = 0x40000;
  }
  *(_DWORD *)(a2 + 4) |= v28;
LABEL_20:
  uint64_t v118 = v12;
  *(_DWORD *)(a2 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(a2 + 952) = 0;
  int v117 = v16;
  if (*v16 == 1 && (*(unsigned char *)(a2 + 6) & 4) != 0)
  {
    int v41 = *(_DWORD *)(*(void *)(v10 + 1848 * a3 + 1832) + 32);
    *(_DWORD *)(a1 + 11852) = 1;
    int v42 = *(_DWORD *)(a1 + 11844) * v41;
    int v43 = 956 * a3;
    BOOL v44 = (void *)(a1 + 11648);
    if (*(void *)(a1 + 11648) || *(_DWORD *)(a1 + 11800) || *(_DWORD *)(a1 + 11804))
    {
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)(a1 + 11648), v43 + 3128, v42, 0xFFFFFFFFLL, 8, -256, 4);
      if (result) {
        return result;
      }
      if (*v44) {
        goto LABEL_41;
      }
    }
    if (*(_DWORD *)(a1 + 11800) || *(_DWORD *)(a1 + 11804))
    {
LABEL_41:
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)(a1 + 11648), v43 + 3160, v42, 0x3FFFFFFFFFFLL, 32, 1023, 4);
      if (result) {
        return result;
      }
    }
  }
  unsigned int v111 = a3;
  uint64_t v116 = a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
  unsigned int v29 = *v117;
  if (v29 <= 1)
  {
    uint64_t v30 = v7 + 6872;
    uint64_t v31 = v118 + 13040 * a3;
    if (*(_DWORD *)(v31 + 13032))
    {
      unint64_t v32 = 0;
      uint64_t v33 = (unsigned int *)(v31 + 13032);
      uint64_t v34 = v118 + 13040 * a3 + 1416;
      unsigned int v35 = &_os_log_internal;
      do
      {
        uint64_t v36 = a2 + 4 * v32;
        int v37 = (16 * (v32 & 0xF)) | 0x2DC00000;
        *(_DWORD *)(v36 + 8) = v37;
        CFIndex v38 = (_DWORD *)(v36 + 8);
        if (v11)
        {
          uint64_t v39 = 0;
          while (*(_DWORD *)(*(void *)(v30 + 8 * v39) + 12) != *(_DWORD *)(v34 + 176 * v32 + 12))
          {
            if (v11 == ++v39) {
              goto LABEL_29;
            }
          }
          *CFIndex v38 = v39 & 0xF | v37;
        }
        else
        {
LABEL_29:
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            int v40 = *(_DWORD *)(v34 + 176 * v32 + 32);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)unint64_t v123 = v32;
            *(_WORD *)&v123[4] = 1024;
            *(_DWORD *)&v123[6] = v40;
            LOWORD(v124[0]) = 1024;
            *(_DWORD *)((char *)v124 + 2) = v11;
            _os_log_impl(&dword_223977000, v35, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-0 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
          }
        }
        ++v32;
      }
      while (v32 < *v33);
      unsigned int v29 = *v117;
    }
    else
    {
      LODWORD(v32) = 0;
    }
    if (v29 == 1)
    {
      uint64_t v46 = v118 + 13040 * a3;
      if (*(_DWORD *)(v46 + 13036))
      {
        unint64_t v47 = 0;
        BOOL v48 = (unsigned int *)(v46 + 13036);
        int v49 = &_os_log_internal;
        do
        {
          uint64_t v50 = a2 + 4 * v32;
          int v51 = (16 * (v47 & 0xF)) | 0x2DC00100;
          *(_DWORD *)(v50 + 8) = v51;
          unsigned int v52 = (_DWORD *)(v50 + 8);
          if (v11)
          {
            uint64_t v53 = 0;
            while (*(_DWORD *)(*(void *)(v30 + 8 * v53) + 12) != *(_DWORD *)(v118 + 13040 * a3 + 176 * v47 + 7236))
            {
              if (v11 == ++v53) {
                goto LABEL_52;
              }
            }
            _DWORD *v52 = v53 & 0xF | v51;
          }
          else
          {
LABEL_52:
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            {
              int v54 = *(_DWORD *)(v118 + 13040 * a3 + 176 * v47 + 7256);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)unint64_t v123 = v32;
              *(_WORD *)&v123[4] = 1024;
              *(_DWORD *)&v123[6] = v54;
              LOWORD(v124[0]) = 1024;
              *(_DWORD *)((char *)v124 + 2) = v11;
              _os_log_impl(&dword_223977000, v49, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-1 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
            }
          }
          LODWORD(v32) = v32 + 1;
          ++v47;
        }
        while (v47 < *v48);
      }
    }
  }
  *(void *)(a2 + 136) = 0x2DD0000000000000;
  uint64_t v55 = v114 + 604 * v115;
  int v56 = (char *)(v55 + 88);
  int v57 = (char *)(v55 + 87);
  if (*v117 == 1) {
    unsigned int v58 = v56;
  }
  else {
    unsigned int v58 = v57;
  }
  char v59 = *v58;
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = ((v59 & 3) << 6) | 0x2DD00000;
  int v60 = ((v59 & 3) << 6) | 0x2DD00000 | (8 * (*(unsigned char *)(v10 + 1848 * a3 + 376) & 7));
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v60;
  char v61 = *(unsigned char *)(v112 + 2224 * v113 + 4);
  if (v61) {
    char v61 = *(unsigned char *)(v10 + 1848 * a3 + 377);
  }
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v61 & 7 | v60;
  int v62 = *v117;
  if (v62 != 1) {
    goto LABEL_145;
  }
  int v63 = *v56;
  if (v63 != 2) {
    goto LABEL_65;
  }
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = ((v59 & 3) << 6) | 0x2DD0002D;
  int v62 = *v117;
  if (v62 != 1)
  {
LABEL_145:
    if (v62 || !*v57) {
      goto LABEL_85;
    }
    goto LABEL_69;
  }
  int v63 = *v56;
LABEL_65:
  if (v63 != 1) {
    goto LABEL_85;
  }
LABEL_69:
  unsigned int v64 = 0;
  unsigned int v65 = 0;
  do
  {
    uint64_t v66 = v64;
    if (*(unsigned char *)(v10 + 1848 * a3 + v64 + 378))
    {
      int v67 = ((v64 & 0xF) << 9) | 0x2DE04000;
      uint64_t v68 = a2 + 4 * v65;
      *(_DWORD *)(v68 + 144) = v67;
      uint64_t v69 = v10 + 1848 * a3 + 2 * v66;
      *(_DWORD *)(v68 + 144) = v67 | *(_WORD *)(v69 + 394) & 0x1FF;
      *(_DWORD *)(v68 + 528) = 770703360;
      *(_DWORD *)(v68 + 528) = *(unsigned __int16 *)(v69 + 426) | 0x2DF00000;
      ++v65;
    }
    if (*(unsigned char *)(v10 + 1848 * a3 + v66 + 458))
    {
      uint64_t v70 = 0;
      char v71 = 1;
      do
      {
        char v72 = v71;
        int v73 = ((v66 & 0xF) << 9) | (v70 << 14) | 0x2DE08000;
        uint64_t v74 = a2 + 4 * v65;
        *(_DWORD *)(v74 + 144) = v73;
        uint64_t v75 = v10 + 1848 * a3 + 4 * v66 + 2 * v70;
        *(_DWORD *)(v74 + 144) = v73 | *(_WORD *)(v75 + 474) & 0x1FF;
        *(_DWORD *)(v74 + 528) = 770703360;
        *(_DWORD *)(v74 + 528) = *(unsigned __int16 *)(v75 + 538) | 0x2DF00000;
        ++v65;
        uint64_t v70 = 1;
        char v71 = 0;
      }
      while ((v72 & 1) != 0);
    }
    unsigned int v64 = v66 + 1;
  }
  while ((int)v66 + 1 <= *(char *)(v10 + 1848 * a3 + 63));
  if (*v117 == 1)
  {
    unsigned int v76 = 0;
    do
    {
      uint64_t v77 = v76;
      if (*(unsigned char *)(v10 + 1848 * a3 + v76 + 602))
      {
        int v78 = ((v76 & 0xF) << 9) | 0x2DE06000;
        uint64_t v79 = a2 + 4 * v65;
        *(_DWORD *)(v79 + 144) = v78;
        uint64_t v80 = v10 + 1848 * a3 + 2 * v77;
        *(_DWORD *)(v79 + 144) = v78 | *(_WORD *)(v80 + 618) & 0x1FF;
        *(_DWORD *)(v79 + 528) = 770703360;
        *(_DWORD *)(v79 + 528) = *(unsigned __int16 *)(v80 + 650) | 0x2DF00000;
        ++v65;
      }
      if (*(unsigned char *)(v10 + 1848 * a3 + v77 + 682))
      {
        uint64_t v81 = 0;
        char v82 = 1;
        do
        {
          char v83 = v82;
          int v84 = ((v77 & 0xF) << 9) | (v81 << 14) | 0x2DE0A000;
          uint64_t v85 = a2 + 4 * v65;
          *(_DWORD *)(v85 + 144) = v84;
          uint64_t v86 = v10 + 1848 * a3 + 4 * v77 + 2 * v81;
          *(_DWORD *)(v85 + 144) = v84 | *(_WORD *)(v86 + 698) & 0x1FF;
          *(_DWORD *)(v85 + 528) = 770703360;
          *(_DWORD *)(v85 + 528) = *(unsigned __int16 *)(v86 + 762) | 0x2DF00000;
          ++v65;
          uint64_t v81 = 1;
          char v82 = 0;
        }
        while ((v83 & 1) != 0);
      }
      unsigned int v76 = v77 + 1;
    }
    while ((int)v77 + 1 <= *(char *)(v10 + 1848 * a3 + 64));
  }
  *(_DWORD *)(a2 + 136) = v65;
LABEL_85:
  *(_DWORD *)(a2 + 912) = 0;
  uint64_t v87 = v10 + 1848 * a3;
  *(_DWORD *)(a2 + 912) = (((*(unsigned __int8 *)(v114 + 604 * v115 + 89) + *(unsigned __int8 *)(v87 + 1425)) << 10)
                         + 26624) & 0x1FC00 | 0x2D900000;
  *(_DWORD *)(a2 + 916) = 0;
  int v88 = (*(unsigned char *)(v87 + 1428) == 0) << 17;
  *(_DWORD *)(a2 + 916) = v88;
  if (*(unsigned char *)(v87 + 1428) != 1)
  {
    int v89 = v88 | 0x10000;
    *(_DWORD *)(a2 + 916) = v89;
    uint64_t v90 = v10 + 1848 * a3;
    int v91 = v89 | ((*(unsigned char *)(v90 + 1429) & 0xF) << 8);
    *(_DWORD *)(a2 + 916) = v91;
    int v88 = v91 | ((*(unsigned char *)(v90 + 1430) & 0xF) << 12);
  }
  *(_DWORD *)(a2 + 916) = v88 | 0x2DA00000;
  uint64_t v92 = (unsigned int *)(v10 + 1848 * a3 + 1436);
  unsigned int v93 = *v92;
  if (*(unsigned char *)(v114 + 604 * v115 + 3))
  {
    int v94 = 0;
    if ((v93 & 7) != 0) {
      *uint64_t v92 = (v93 + 7) & 0xFFFFFFF8;
    }
  }
  else
  {
    int v94 = *v92 & 7;
  }
  *(_DWORD *)(a2 + 924) = (v94 << 15) | 0x2D800000;
  uint64_t v95 = *(void *)(v116 + 256);
  unsigned int v96 = *(_DWORD *)(v95 + 2504);
  unint64_t v120 = 0;
  uint64_t v121 = 0;
  if (!CAVDAvcDecoder::GetSDataMemInfo(v95, v111, &v121, &v120)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v119 = v96;
  int v97 = 956 * v111;
  uint64_t v98 = v121;
  if (!*(void *)v121 && !*(_DWORD *)(v121 + 152) && !*(_DWORD *)(v121 + 156)) {
    goto LABEL_101;
  }
  int v99 = v120;
  if (HIDWORD(v120) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)unint64_t v123 = "populateSliceRegisters";
    *(_WORD *)&v123[8] = 1024;
    v124[0] = 1815;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v99 = v120;
  }
  uint64_t result = CAHDec::addToPatcherList(v116, (void *)v98, v97 + 3132, v99, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  if (result) {
    return result;
  }
  uint64_t v98 = v121;
  if (!*(void *)v121)
  {
LABEL_101:
    if (!*(_DWORD *)(v98 + 152) && !*(_DWORD *)(v98 + 156)) {
      goto LABEL_109;
    }
  }
  int v100 = v97 + 3140;
  int v101 = v120;
  if (HIDWORD(v120))
  {
    uint64_t v102 = v116;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)unint64_t v123 = "populateSliceRegisters";
      *(_WORD *)&v123[8] = 1024;
      v124[0] = 1816;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      int v101 = v120;
    }
  }
  else
  {
    uint64_t v102 = v116;
  }
  uint64_t result = CAHDec::addToPatcherList(v102, (void *)v98, v100, v101, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result)
  {
LABEL_109:
    unsigned int v103 = *(_DWORD *)(v10 + 1848 * a3 + 16) - (*v92 >> 3);
    *(_DWORD *)(a2 + 936) = v103;
    if (*(_DWORD *)(v95 + 2360) != 1) {
      return 0;
    }
    *(void *)(a2 + 944) = 0;
    if (*(_DWORD *)(v95 + 2640))
    {
      unsigned int v104 = v119;
      if ((*(unsigned char *)(v95 + 2612) & 1) == 0)
      {
LABEL_112:
        unsigned int v105 = *(unsigned __int16 *)(v10 + 1848 * a3 + 1840);
        int v106 = 0;
        if ((v104 & 0x200000) != 0)
        {
          if (v94 && !*(_WORD *)(v10 + 1848 * a3 + 1840))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(void *)unint64_t v123 = "int CAHDecTansyAvc::populateSliceRegisters(AvcSliceRegisters *, int)";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect off_to_prot_data to be set when slice header is not byte aligned\n", buf, 0xCu);
              unsigned int v103 = *(_DWORD *)(a2 + 936);
              int v106 = *(_DWORD *)(a2 + 948) & 0x1F0000;
            }
            else
            {
              int v106 = 0;
            }
            unsigned int v105 = 1;
          }
        }
        else if (v94)
        {
          ++v105;
        }
        uint64_t result = 0;
        if (v105 >= v103) {
          unsigned int v105 = v103;
        }
        unsigned int v110 = v106 & 0xFFDFFFFF | (v105 << 22) | (unsigned __int16)v104 | (((v104 >> 20) & 1) << 21);
LABEL_142:
        *(_DWORD *)(a2 + 948) = v110;
        return result;
      }
    }
    else
    {
      unsigned int v104 = v119;
      if (!*(_DWORD *)(v95 + 2420)) {
        goto LABEL_112;
      }
    }
    uint64_t result = 0;
    unsigned int v108 = *(unsigned __int16 *)(v10 + 1848 * a3 + 1840);
    if (v103 < v108) {
      unsigned int v108 = v103;
    }
    if (v94) {
      BOOL v109 = v108 == 0;
    }
    else {
      BOOL v109 = 0;
    }
    if (v109) {
      unsigned int v108 = 1;
    }
    unsigned int v110 = v104 & 0x10000 | v108;
    goto LABEL_142;
  }
  return result;
}

uint64_t CAHDecTansyAvc::populateCommonRegisters(CAHDecTansyAvc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000001;
  return 0;
}

uint64_t CAHDecTansyAvc::updateCommonRegisters(CAHDecTansyAvc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

void CAHDecTansyAvc::copyScalingList(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = *a2 & 0xFEFFFFC0 | 0x1000000;
  *a2 = v8;
  do
  {
    v8 |= (*(unsigned char *)(a4 + v7) == 0) << v7;
    *a2 = v8;
    ++v7;
  }
  while (v7 != 6);
  unsigned int v9 = v8 & 0xFFFFF03F;
  *a2 = v8 & 0xFFFFF03F;
  if (a7 >= 7)
  {
    uint64_t v10 = (a7 - 6);
    uint64_t v11 = (unsigned __int8 *)(a4 + 6);
    uint64_t v12 = &dword_223AD0538;
    do
    {
      int v13 = *v11++;
      BOOL v14 = v13 == 0;
      int v16 = *v12++;
      char v15 = v16;
      int v17 = v14;
      v9 |= ((v17 << v15) & 0x3F) << 6;
      *a2 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 1;
  uint64_t v20 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v22 = *(_DWORD *)(v20 + i) & 0xFFFFFF | (*(unsigned __int8 *)(v19 + i - 1) << 24);
      *(_DWORD *)(v20 + i) = v22;
      unsigned int v23 = v22 & 0xFF00FFFF | (*(unsigned __int8 *)(v19 + i) << 16);
      *(_DWORD *)(v20 + i) = v23;
      unsigned int v24 = v23 & 0xFFFF00FF | (*(unsigned __int8 *)(v19 + i + 1) << 8);
      *(_DWORD *)(v20 + i) = v24;
      *(_DWORD *)(v20 + i) = v24 & 0xFFFFFF00 | *(unsigned __int8 *)(v19 + i + 2);
    }
    ++v18;
    v20 += 16;
    v19 += 16;
  }
  while (v18 != 6);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 96;
  do
  {
    int v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = a6 + ((uint64_t)dword_223AD0550[v25] << 6);
    do
    {
      uint64_t v31 = (unsigned __int8 *)(v30 + (v28 & 0x7FFFFFE0 | v29 & 4 | v27 & 0x18));
      int v32 = *(_DWORD *)(v26 + v28) & 0xFFFFFF | (*v31 << 24);
      *(_DWORD *)(v26 + v28) = v32;
      unsigned int v33 = v32 & 0xFF00FFFF | (v31[1] << 16);
      *(_DWORD *)(v26 + v28) = v33;
      unsigned int v34 = v33 & 0xFFFF00FF | (v31[2] << 8);
      *(_DWORD *)(v26 + v28) = v34;
      *(_DWORD *)(v26 + v28) = v34 & 0xFFFFFF00 | v31[3];
      ++v29;
      v28 += 4;
      v27 += 8;
    }
    while (v28 != 64);
    ++v25;
    v26 += 64;
  }
  while (v25 != 6);
}

uint64_t CAHDecTansyAvc::AvcSeqScalingListFallBack(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v3 = 12;
    }
    uint64_t v4 = a2 + 22;
    uint64_t v5 = (_OWORD *)(a2 + 34);
    while (v2 > 5)
    {
      if (*(unsigned char *)(v4 + v2 - 12))
      {
        if (*(unsigned char *)(v4 + v2) == 2)
        {
          unsigned int v9 = (_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 130);
          if (v2 == 6 || (v2 & 0x7FFFFFFD) == 8)
          {
            *unsigned int v9 = avcDefaultIntraScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223AD05B8;
            long long v10 = xmmword_223AD05C8;
            long long v11 = unk_223AD05D8;
          }
          else
          {
            *unsigned int v9 = avcDefaultInterScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223AD0578;
            long long v10 = xmmword_223AD0588;
            long long v11 = unk_223AD0598;
          }
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 162) = v10;
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 178) = v11;
        }
        goto LABEL_24;
      }
      if ((v2 - 8) <= 0xFFFFFFFD)
      {
        uint64_t result = a2 + 130;
        int v13 = (_OWORD *)(a2 + 130 + ((unint64_t)(v2 - 6) << 6));
        BOOL v14 = (long long *)(a2 + 130 + ((unint64_t)(v2 - 8) << 6));
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[3];
        v13[2] = v14[2];
        v13[3] = v17;
        *int v13 = v15;
        v13[1] = v16;
        uint64_t v8 = (v2 - 2);
LABEL_21:
        *(unsigned char *)(v4 + v2) = *(unsigned char *)(a2 + v8 + 22);
      }
LABEL_24:
      ++v2;
      ++v5;
      if (v3 == v2) {
        return result;
      }
    }
    if (*(unsigned char *)(v4 + v2 - 12)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (v6 || v2 == 3) {
      goto LABEL_24;
    }
    uint64_t v8 = (v2 - 1);
    *uint64_t v5 = *(_OWORD *)(a2 + 16 * v8 + 34);
    goto LABEL_21;
  }
  return result;
}

long long *CAHDecTansyAvc::AvcPicScalingListFallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 96))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = a3 + 97;
    uint64_t v6 = -96;
    uint64_t result = &avcDefaultIntraScalingList8x8;
    do
    {
      if (v3 > 5)
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if (*(unsigned char *)(v5 + v3 + 12) == 2)
          {
            unsigned int v9 = (_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 217);
            if (v3 == 6 || (v3 & 0x7FFFFFFD) == 8)
            {
              *unsigned int v9 = avcDefaultIntraScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223AD05B8;
              long long v10 = xmmword_223AD05C8;
              long long v11 = unk_223AD05D8;
            }
            else
            {
              *unsigned int v9 = avcDefaultInterScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223AD0578;
              long long v10 = xmmword_223AD0588;
              long long v11 = unk_223AD0598;
            }
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 249) = v10;
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 265) = v11;
          }
          goto LABEL_31;
        }
        if ((v3 - 8) <= 0xFFFFFFFD)
        {
          uint64_t v12 = (_OWORD *)(a3 + 217 + ((unint64_t)(v3 - 6) << 6));
          int v13 = (long long *)(a3 + 217 + ((unint64_t)(v3 - 8) << 6));
          long long v14 = *v13;
          long long v15 = v13[1];
          long long v16 = v13[3];
          v12[2] = v13[2];
          v12[3] = v16;
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v17 = a3 + (v3 - 2);
          goto LABEL_29;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          uint64_t v18 = (v3 - 6);
          uint64_t v19 = a3 + (v18 << 6);
          uint64_t v20 = a2 + (v18 << 6);
          long long v21 = *(_OWORD *)(v20 + 130);
          long long v22 = *(_OWORD *)(v20 + 146);
          long long v23 = *(_OWORD *)(v20 + 162);
          *(_OWORD *)(v19 + 265) = *(_OWORD *)(v20 + 178);
          *(_OWORD *)(v19 + 249) = v23;
          *(_OWORD *)(v19 + 233) = v22;
          *(_OWORD *)(v19 + 217) = v21;
LABEL_23:
          char v24 = *(unsigned char *)(a2 + 22 + v3);
LABEL_30:
          *(unsigned char *)(v5 + v3 + 12) = v24;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if ((*(unsigned char *)(v5 + v3 + 12) & 2) != 0)
          {
            if (v3 > 2) {
              long long v8 = avcDefaultInterScalingList4x4;
            }
            else {
              long long v8 = avcDefaultIntraScalingList4x4;
            }
            *(_OWORD *)(v5 + v6 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v8;
          }
          goto LABEL_31;
        }
        if (v3 && v3 != 3)
        {
          uint64_t v25 = (v3 - 1);
          *(_OWORD *)(v5 + v6 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(a3 + 16 * v25 + 121);
          uint64_t v17 = a3 + v25;
LABEL_29:
          char v24 = *(unsigned char *)(v17 + 109);
          goto LABEL_30;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          *(_OWORD *)(v5 + v6 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(a2 + v6 + 130);
          goto LABEL_23;
        }
      }
LABEL_31:
      ++v3;
      v6 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CAHDecTansyAvc::populateSequenceRegisters(CAHDecTansyAvc *this)
{
  uint64_t v2 = *((void *)this + 32);
  unint64_t v3 = (_DWORD *)*((void *)this + 33);
  int v4 = *(_DWORD *)(v2 + 3612);
  int v5 = *(_DWORD *)(v2 + 3616);
  uint64_t v6 = *(void *)(v2 + 3296);
  uint64_t v7 = *(void *)(v2 + 3304);
  uint64_t v8 = v6 + 2224 * v4;
  v3[10] = 0;
  __int16 v9 = *(_WORD *)(v8 + 1558);
  v3[10] = (2 * (v9 & 0xFFF)) | 1;
  v3[10] = ((*(_WORD *)(v8 + 1560) & 0xFFF) << 17) | (2 * (v9 & 0xFFF)) | 0x10001;
  v3[11] = 0;
  int v10 = *(unsigned char *)(v8 + 1564) & 1;
  v3[11] = v10;
  int v11 = v10 | ((*(unsigned char *)(v7 + 604 * v5 + 95) != 0) << 7) | 0x2800;
  v3[11] = v11;
  uint64_t v12 = (unsigned char *)(v8 + 4);
  int v13 = *(unsigned __int8 *)(v8 + 4);
  if (*(unsigned char *)(v8 + 4)) {
    int v13 = (*(unsigned char *)(v6 + 2224 * v4 + 7) & 0xF) << 15;
  }
  int v14 = v13 | v11;
  v3[11] = v14;
  long long v15 = (unsigned char *)(v6 + 2224 * v4);
  int v16 = v14 & 0x7F87A881 | ((v15[6] & 0xF) << 19);
  v3[11] = v16;
  unsigned int v17 = v16 & 0xFF7FFFFF | ((v15[5] & 1) << 23);
  v3[11] = v17;
  v3[11] = v17 & 0xFCFFFFFF | ((*v12 & 3) << 24);
  if (v15[9])
  {
    if (*v12 == 3) {
      int v18 = 12;
    }
    else {
      int v18 = 8;
    }
    uint64_t v19 = CAHDecTansyAvc::AvcSeqScalingListFallBack((uint64_t)this, v8);
    CAHDecTansyAvc::copyScalingList(v19, v3 + 12, *((void *)this + 33) + 992, v6 + 2224 * v4 + 22, v6 + 2224 * v4 + 34, v6 + 2224 * v4 + 130, v18);
  }
  return 0;
}

uint64_t CAHDecTansyAvc::populatePictureRegisters(CAHDecTansyAvc *this)
{
  uint64_t v319 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 3612);
  int v4 = *(_DWORD *)(v2 + 3616);
  uint64_t v5 = *(void *)(v2 + 3296);
  uint64_t v6 = *(void *)(v2 + 3304);
  uint64_t v296 = *(void *)(v2 + 2088);
  uint64_t v302 = *(unsigned int *)(v2 + 3152);
  int v299 = *(_DWORD *)(v2 + 3132);
  int v300 = *(_DWORD *)(v2 + 2644);
  int v7 = *(unsigned __int8 *)(v2 + 8);
  long long v8 = *(_OWORD *)(v2 + 7016);
  v318[8] = *(_OWORD *)(v2 + 7000);
  v318[9] = v8;
  long long v9 = *(_OWORD *)(v2 + 7048);
  v318[10] = *(_OWORD *)(v2 + 7032);
  v318[11] = v9;
  long long v10 = *(_OWORD *)(v2 + 6952);
  v318[4] = *(_OWORD *)(v2 + 6936);
  v318[5] = v10;
  long long v11 = *(_OWORD *)(v2 + 6984);
  v318[6] = *(_OWORD *)(v2 + 6968);
  v318[7] = v11;
  long long v12 = *(_OWORD *)(v2 + 6888);
  v318[0] = *(_OWORD *)(v2 + 6872);
  v318[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 6920);
  v318[2] = *(_OWORD *)(v2 + 6904);
  v318[3] = v13;
  uint64_t v298 = *(unsigned int *)(v2 + 7064);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  long long v15 = (unsigned __int8 *)*((void *)this + 32);
  uint64_t v16 = *((void *)this + 33);
  int v17 = v15[2675];
  unsigned int v18 = v15[2674];
  if (!(v17 | v18)) {
    goto LABEL_41;
  }
  uint64_t v19 = v5 + 2224 * v3;
  unsigned int v20 = *(unsigned __int8 *)(v19 + 6);
  unsigned int v21 = *(unsigned __int8 *)(v19 + 7);
  if (v20 > v21) {
    LOWORD(v21) = v20;
  }
  int v22 = ((_WORD)v21 + 9) & 0x1FE;
  if (v22 == 8)
  {
    int v24 = v7;
    unsigned int v28 = 1;
    int v26 = 8;
    if (!v15[2675]) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  int v23 = v15[2672];
  int v24 = v7;
  if (v22 != 12)
  {
    if (v22 == 10)
    {
      BOOL v25 = v23 == 0;
      if (v23) {
        int v26 = 10;
      }
      else {
        int v26 = 9;
      }
      int v27 = 2;
      goto LABEL_15;
    }
    int v26 = 27;
    unsigned int v28 = 27;
    if (!v17) {
      goto LABEL_30;
    }
LABEL_23:
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) && (v17 == 2 && v26 == 8 || v17 == 3 && (v26 - 9) <= 1))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = "populatePictureRegisters";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = v26;
      WORD1(buf[2]) = 1024;
      HIDWORD(buf[2]) = v17;
      int v29 = &_os_log_internal;
      uint64_t v30 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
      goto LABEL_38;
    }
    goto LABEL_30;
  }
  BOOL v25 = v23 == 0;
  if (v23) {
    int v26 = 12;
  }
  else {
    int v26 = 11;
  }
  int v27 = 4;
LABEL_15:
  if (v25) {
    unsigned int v28 = v27;
  }
  else {
    unsigned int v28 = v27 + 1;
  }
  if (v17) {
    goto LABEL_23;
  }
LABEL_30:
  int v7 = v24;
  if (v18 && (v18 == 3 && v28 - 9 < 2 || v28 <= 0x1A && ((1 << v28) & 0x4C00000) != 0 && v18 <= 2))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "populatePictureRegisters";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = v28;
    WORD1(buf[2]) = 1024;
    HIDWORD(buf[2]) = v18;
    int v29 = &_os_log_internal;
    uint64_t v30 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
LABEL_38:
    uint64_t v31 = (uint8_t *)buf;
    uint32_t v32 = 24;
    goto LABEL_39;
  }
LABEL_41:
  int v293 = v14;
  int v294 = *((_DWORD *)this + 2961) * v302;
  unsigned int v34 = (char *)this + 264;
  *(_DWORD *)(v16 + 52) = 766509056;
  if (**(_DWORD **)(*((void *)this + 32) + 3312) == 5) {
    int v35 = 766517248;
  }
  else {
    int v35 = 766509056;
  }
  if (v14) {
    int v36 = 688;
  }
  else {
    int v36 = 672;
  }
  if (v300) {
    int v37 = 4160;
  }
  else {
    int v37 = 64;
  }
  unsigned int v38 = v37 & 0xFFFFFFF0 | ((v300 == 1) << 10) | v36 & 0xFFFFFFF0 | (4 * (v17 & 3)) | v18 & 3 | v35;
  *(_DWORD *)(v16 + 52) = v38;
  uint64_t v39 = (unsigned char *)*((void *)this + 32);
  int v40 = v38 | ((v39[2652] & 1) << 19);
  *(_DWORD *)(v16 + 52) = v40;
  unsigned int v41 = v40 & 0xFFFBFFFF | ((v39[2653] & 1) << 18);
  *(_DWORD *)(v16 + 52) = v41;
  *(_DWORD *)(v16 + 52) = v41 & 0xFFFDFFFF | ((v39[2654] & 1) << 17);
  *(void *)(v16 + 56) = 0x1000000;
  uint64_t v42 = v5 + 2224 * v3;
  int v43 = (16 * (*(_WORD *)(v42 + 1558) & 0xFFF)) | 0xF;
  *(_DWORD *)(v16 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v43;
  LODWORD(v39) = v43 | (*(unsigned __int16 *)(v42 + 1560) << 20) | 0xF0000;
  *(void *)(v16 + 64) = 0;
  *(_DWORD *)(v16 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v39;
  LODWORD(v42) = (*(unsigned char *)(v42 + 8) & 1) << 18;
  *(_DWORD *)(v16 + 68) = v42;
  BOOL v44 = (unsigned char *)(v6 + 604 * v4);
  LODWORD(v42) = v42 & 0xFFF7FFFF | ((v44[93] & 1) << 19);
  *(_DWORD *)(v16 + 68) = v42;
  LODWORD(v42) = v42 & 0xFFEFFFFF | ((v44[3] & 1) << 20);
  *(_DWORD *)(v16 + 68) = v42;
  *(_DWORD *)(v16 + 68) = v42 | ((**(_DWORD **)(*((void *)this + 32) + 3312) != 5) << 21);
  unsigned int v45 = *(_DWORD *)(v16 + 72) & 0xFFFFFC1F | (32 * (v44[91] & 0x1F));
  *(_DWORD *)(v16 + 72) = v45;
  *(_DWORD *)(v16 + 72) = v45 & 0xFFFFFFE0 | v44[601] & 0x1F;
  if (v44[96])
  {
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) == 3) {
      int v46 = 12;
    }
    else {
      int v46 = 8;
    }
    uint64_t v47 = *(void *)v34 + 1476;
    BOOL v48 = CAHDecTansyAvc::AvcPicScalingListFallBack(v14, v5 + 2224 * v3, v6 + 604 * v4);
    CAHDecTansyAvc::copyScalingList((uint64_t)v48, (unsigned int *)(v16 + 76), v47, v6 + 604 * v4 + 109, v6 + 604 * v4 + 121, v6 + 604 * v4 + 217, v46);
  }
  uint64_t v49 = 0;
  *(_DWORD *)(v16 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *((_DWORD *)this + 2966);
  *(_DWORD *)(v16 + 84) = *((_DWORD *)this + 2967);
  *(_DWORD *)(v16 + 88) = 3145786;
  uint64_t v50 = (char *)this + 9008;
  do
  {
    *(_DWORD *)(*(void *)v34 + v49 + 92) = 0;
    uint64_t v51 = *(void *)v34 + v49;
    int v52 = *(_DWORD *)(v51 + 92);
    *(_DWORD *)(v51 + 92) = 0;
    *(_DWORD *)(*(void *)v34 + v49 + 92) ^= 0xFFFFFF00;
    uint64_t v53 = *(void *)v34 + v49;
    int v54 = *(_DWORD *)(v53 + 92);
    *(_DWORD *)(v53 + 92) = v52;
    if (*(void *)v50 || *((_DWORD *)v50 + 38) || *((_DWORD *)v50 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v50, (int)v49 + 92, 0, 0xFFFFFFFFLL, 8, v54, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v49 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + v49 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*((void *)this + 33) + v49 + 120) & 0x800001FF | (((*((_DWORD *)this + 2960) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v49 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    uint64_t v55 = *((void *)this + 33) + v49;
    int v56 = *(_DWORD *)(v55 + 540);
    *(_DWORD *)(v55 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + v49 + 540) ^= 0x3FFu;
    uint64_t v57 = *((void *)this + 33) + v49;
    int v58 = *(_DWORD *)(v57 + 540);
    *(_DWORD *)(v57 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v56;
    if (*(void *)v50 || *((_DWORD *)v50 + 38) || *((_DWORD *)v50 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v50, (int)v49 + 540, 0, 0x3FFFFFFFFFFLL, 32, v58, 4);
      if (result) {
        return result;
      }
    }
    v49 += 4;
    v50 += 176;
  }
  while (v49 != 28);
  *(_DWORD *)(*(void *)v34 + 148) = 0;
  *(_DWORD *)(*(void *)v34 + 568) = 0;
  if ((*(unsigned char *)(v16 + 54) & 8) == 0) {
    goto LABEL_363;
  }
  uint64_t v59 = *((void *)this + 33);
  uint64_t v60 = *(void *)(*((void *)this + 32) + 2680);
  long long v315 = 0u;
  long long v316 = 0u;
  long long v313 = 0u;
  long long v314 = 0u;
  long long v311 = 0u;
  long long v312 = 0u;
  long long v309 = 0u;
  long long v310 = 0u;
  long long v308 = 0u;
  memset(buf, 0, sizeof(buf));
  int v61 = (*(_DWORD *)(v59 + 16) & 0xF) << 9;
  buf[0] = v60;
  int v62 = *(_DWORD *)(v59 + 148);
  *(_DWORD *)(v59 + 148) = 0;
  *(_DWORD *)(*((void *)this + 33) + 148) ^= 0xFFFFFF00;
  uint64_t v63 = *((void *)this + 33);
  int v64 = *(_DWORD *)(v63 + 148);
  *(_DWORD *)(v63 + 148) = v62;
  if (v60 || DWORD2(v315) || (int v65 = HIDWORD(v315)) != 0)
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 148, v61, 0xFFFFFFFFLL, 8, v64, 4);
    if (result) {
      return result;
    }
    uint64_t v67 = buf[0];
    int v66 = DWORD2(v315);
    int v65 = HIDWORD(v315);
  }
  else
  {
    int v66 = 0;
    uint64_t v67 = 0;
  }
  if ((*(_DWORD *)(*(void *)v34 + 568) = 0,
        int v68 = *(_DWORD *)(*(void *)v34 + 568),
        *(_DWORD *)(*(void *)v34 + 568) = 0,
        *(_DWORD *)(*(void *)v34 + 568) ^= 0x3FFu,
        int v69 = *(_DWORD *)(*(void *)v34 + 568),
        *(_DWORD *)(*(void *)v34 + 568) = v68,
        !v67)
    && !v66
    && !v65
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 568, v61, 0x3FFFFFFFFFFLL, 32, v69, 4), !result))
  {
LABEL_363:
    int v70 = v7;
    *(_DWORD *)(*((void *)this + 33) + 152) = 0;
    uint64_t v71 = *((void *)this + 33);
    int v72 = *(_DWORD *)(v71 + 152);
    *(_DWORD *)(v71 + 152) = 0;
    *(_DWORD *)(*((void *)this + 33) + 152) ^= 0xFFFFFF00;
    uint64_t v73 = *((void *)this + 33);
    int v74 = *(_DWORD *)(v73 + 152);
    *(_DWORD *)(v73 + 152) = v72;
    if (!*((void *)this + 1302) && !*((_DWORD *)this + 2642) && !*((_DWORD *)this + 2643)) {
      goto LABEL_364;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1302, 152, 0, 0xFFFFFFFFLL, 8, v74, 4);
    if (!result)
    {
LABEL_364:
      if ((*(_DWORD *)(*(void *)v34 + 572) = 0,
            int v75 = *(_DWORD *)(*(void *)v34 + 572),
            *(_DWORD *)(*(void *)v34 + 572) = 0,
            *(_DWORD *)(*(void *)v34 + 572) ^= 0x3FFu,
            int v76 = *(_DWORD *)(*(void *)v34 + 572),
            *(_DWORD *)(*(void *)v34 + 572) = v75,
            !*((void *)this + 1302))
        && !*((_DWORD *)this + 2642)
        && !*((_DWORD *)this + 2643)
        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1302, 572, 0, 0x3FFFFFFFFFFLL, 32, v76, 4),
            !result))
      {
        *(_DWORD *)(*((void *)this + 33) + 156) = 0;
        uint64_t v77 = *((void *)this + 33);
        int v78 = *(_DWORD *)(v77 + 156);
        *(_DWORD *)(v77 + 156) = 0;
        *(_DWORD *)(*((void *)this + 33) + 156) ^= 0xFFFFFF00;
        uint64_t v79 = *((void *)this + 33);
        int v80 = *(_DWORD *)(v79 + 156);
        *(_DWORD *)(v79 + 156) = v78;
        if (!*((void *)this + 1324) && !*((_DWORD *)this + 2686) && !*((_DWORD *)this + 2687)) {
          goto LABEL_365;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1324, 156, 0, 0xFFFFFFFFLL, 8, v80, 4);
        if (!result)
        {
LABEL_365:
          if ((*(_DWORD *)(*(void *)v34 + 576) = 0,
                int v81 = *(_DWORD *)(*(void *)v34 + 576),
                *(_DWORD *)(*(void *)v34 + 576) = 0,
                *(_DWORD *)(*(void *)v34 + 576) ^= 0x3FFu,
                int v82 = *(_DWORD *)(*(void *)v34 + 576),
                *(_DWORD *)(*(void *)v34 + 576) = v81,
                !*((void *)this + 1324))
            && !*((_DWORD *)this + 2686)
            && !*((_DWORD *)this + 2687)
            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1324, 576, 0, 0x3FFFFFFFFFFLL, 32, v82, 4), !result))
          {
            *(_DWORD *)(*((void *)this + 33) + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
            uint64_t v83 = *((void *)this + 33);
            int v84 = *(_DWORD *)(v83 + 160);
            *(_DWORD *)(v83 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
            *(_DWORD *)(*((void *)this + 33) + 160) ^= 0xFFFFFF00;
            uint64_t v85 = *((void *)this + 33);
            int v86 = *(_DWORD *)(v85 + 160);
            *(_DWORD *)(v85 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v84;
            if (!*((void *)this + 1346) && !*((_DWORD *)this + 2730) && !*((_DWORD *)this + 2731)) {
              goto LABEL_366;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1346, 160, 0, 0xFFFFFFFFLL, 8, v86, 4);
            if (!result)
            {
LABEL_366:
              if ((*(_DWORD *)(*(void *)v34 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                    int v87 = *(_DWORD *)(*(void *)v34 + 580),
              }
                    *(_DWORD *)(*(void *)v34 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                    *(_DWORD *)(*(void *)v34 + 580) ^= 0x3FFu,
                    int v88 = *(_DWORD *)(*(void *)v34 + 580),
                    *(_DWORD *)(*(void *)v34 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v87,
                    !*((void *)this + 1346))
                && !*((_DWORD *)this + 2730)
                && !*((_DWORD *)this + 2731)
                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1346, 580, 0, 0x3FFFFFFFFFFLL, 32, v88, 4), !result))
              {
                *(_DWORD *)(*((void *)this + 33) + 164) = 0;
                uint64_t v89 = *((void *)this + 33);
                int v90 = *(_DWORD *)(v89 + 164);
                *(_DWORD *)(v89 + 164) = 0;
                *(_DWORD *)(*((void *)this + 33) + 164) ^= 0xFFFFFF00;
                uint64_t v91 = *((void *)this + 33);
                int v92 = *(_DWORD *)(v91 + 164);
                *(_DWORD *)(v91 + 164) = v90;
                if (!*((void *)this + 1368) && !*((_DWORD *)this + 2774) && !*((_DWORD *)this + 2775)) {
                  goto LABEL_367;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1368, 164, 0, 0xFFFFFFFFLL, 8, v92, 4);
                if (!result)
                {
LABEL_367:
                  if ((*(_DWORD *)(*(void *)v34 + 584) = 0,
                        int v93 = *(_DWORD *)(*(void *)v34 + 584),
                        *(_DWORD *)(*(void *)v34 + 584) = 0,
                        *(_DWORD *)(*(void *)v34 + 584) ^= 0x3FFu,
                        int v94 = *(_DWORD *)(*(void *)v34 + 584),
                        *(_DWORD *)(*(void *)v34 + 584) = v93,
                        !*((void *)this + 1368))
                    && !*((_DWORD *)this + 2774)
                    && !*((_DWORD *)this + 2775)
                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1368, 584, 0, 0x3FFFFFFFFFFLL, 32, v94, 4), !result))
                  {
                    *(_DWORD *)(*((void *)this + 33) + 168) = 0;
                    uint64_t v95 = *((void *)this + 33);
                    int v96 = *(_DWORD *)(v95 + 168);
                    *(_DWORD *)(v95 + 168) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 168) ^= 0xFFFFFF00;
                    uint64_t v97 = *((void *)this + 33);
                    int v98 = *(_DWORD *)(v97 + 168);
                    *(_DWORD *)(v97 + 168) = v96;
                    if (!*((void *)this + 1390) && !*((_DWORD *)this + 2818) && !*((_DWORD *)this + 2819)) {
                      goto LABEL_368;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1390, 168, 0, 0xFFFFFFFFLL, 8, v98, 4);
                    if (!result)
                    {
LABEL_368:
                      if ((*(_DWORD *)(*(void *)v34 + 588) = 0,
                            int v99 = *(_DWORD *)(*(void *)v34 + 588),
                            *(_DWORD *)(*(void *)v34 + 588) = 0,
                            *(_DWORD *)(*(void *)v34 + 588) ^= 0x3FFu,
                            int v100 = *(_DWORD *)(*(void *)v34 + 588),
                            *(_DWORD *)(*(void *)v34 + 588) = v99,
                            !*((void *)this + 1390))
                        && !*((_DWORD *)this + 2818)
                        && !*((_DWORD *)this + 2819)
                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1390, 588, 0, 0x3FFFFFFFFFFLL, 32, v100, 4), !result))
                      {
                        *(_DWORD *)(*((void *)this + 33) + 172) = 0;
                        uint64_t v101 = *((void *)this + 33);
                        int v102 = *(_DWORD *)(v101 + 172);
                        *(_DWORD *)(v101 + 172) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 172) ^= 0xFFFFFF00;
                        uint64_t v103 = *((void *)this + 33);
                        int v104 = *(_DWORD *)(v103 + 172);
                        *(_DWORD *)(v103 + 172) = v102;
                        if (!*((void *)this + 1412) && !*((_DWORD *)this + 2862) && !*((_DWORD *)this + 2863)) {
                          goto LABEL_369;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1412, 172, 0, 0xFFFFFFFFLL, 8, v104, 4);
                        if (!result)
                        {
LABEL_369:
                          if ((*(_DWORD *)(*(void *)v34 + 592) = 0,
                                int v105 = *(_DWORD *)(*(void *)v34 + 592),
                                *(_DWORD *)(*(void *)v34 + 592) = 0,
                                *(_DWORD *)(*(void *)v34 + 592) ^= 0x3FFu,
                                int v106 = *(_DWORD *)(*(void *)v34 + 592),
                                *(_DWORD *)(*(void *)v34 + 592) = v105,
                                !*((void *)this + 1412))
                            && !*((_DWORD *)this + 2862)
                            && !*((_DWORD *)this + 2863)
                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1412, 592, 0, 0x3FFFFFFFFFFLL, 32, v106, 4), !result))
                          {
                            *(_DWORD *)(*((void *)this + 33) + 176) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 596) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            uint64_t v107 = *((void *)this + 33);
                            int v108 = *(_DWORD *)(v107 + 180);
                            *(_DWORD *)(v107 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 180) ^= 0xFFFFFF00;
                            uint64_t v109 = *((void *)this + 33);
                            int v110 = *(_DWORD *)(v109 + 180);
                            *(_DWORD *)(v109 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v108;
                            if (!*((void *)this + 1280) && !*((_DWORD *)this + 2598) && !*((_DWORD *)this + 2599)) {
                              goto LABEL_370;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1280, 180, 0, 0xFFFFFFFFLL, 8, v110, 4);
                            if (!result)
                            {
LABEL_370:
                              if ((*(_DWORD *)(*(void *)v34 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                    int v111 = *(_DWORD *)(*(void *)v34 + 600),
                              }
                                    *(_DWORD *)(*(void *)v34 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                    *(_DWORD *)(*(void *)v34 + 600) ^= 0x3FFu,
                                    int v112 = *(_DWORD *)(*(void *)v34 + 600),
                                    *(_DWORD *)(*(void *)v34 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v111,
                                    !*((void *)this + 1280))
                                && !*((_DWORD *)this + 2598)
                                && !*((_DWORD *)this + 2599)
                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1280, 600, 0, 0x3FFFFFFFFFFLL, 32, v112, 4), !result))
                              {
                                *(_DWORD *)(*((void *)this + 33) + 184) = 0;
                                uint64_t v113 = *((void *)this + 33);
                                int v114 = *(_DWORD *)(v113 + 184);
                                *(_DWORD *)(v113 + 184) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 184) ^= 0xFFFFFF00;
                                uint64_t v115 = *((void *)this + 33);
                                int v116 = *(_DWORD *)(v115 + 184);
                                *(_DWORD *)(v115 + 184) = v114;
                                if (!*((void *)this + 1456) && !*((_DWORD *)this + 2950) && !*((_DWORD *)this + 2951)) {
                                  goto LABEL_371;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 184, v294, 0xFFFFFFFFLL, 8, v116, 4);
                                if (!result)
                                {
LABEL_371:
                                  if ((*(_DWORD *)(*(void *)v34 + 604) = 0,
                                        int v117 = *(_DWORD *)(*(void *)v34 + 604),
                                        *(_DWORD *)(*(void *)v34 + 604) = 0,
                                        *(_DWORD *)(*(void *)v34 + 604) ^= 0x3FFu,
                                        int v118 = *(_DWORD *)(*(void *)v34 + 604),
                                        *(_DWORD *)(*(void *)v34 + 604) = v117,
                                        !*((void *)this + 1456))
                                    && !*((_DWORD *)this + 2950)
                                    && !*((_DWORD *)this + 2951)
                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 604, v294, 0x3FFFFFFFFFFLL, 32, v118, 4), !result))
                                  {
                                    *(_DWORD *)(*((void *)this + 33) + 188) = 0;
                                    uint64_t v119 = *((void *)this + 33);
                                    int v120 = *(_DWORD *)(v119 + 188);
                                    *(_DWORD *)(v119 + 188) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 188) ^= 0xFFFFFF80;
                                    uint64_t v121 = *((void *)this + 33);
                                    int v122 = *(_DWORD *)(v121 + 188);
                                    *(_DWORD *)(v121 + 188) = v120;
                                    unint64_t v123 = (void *)((char *)this + 176 * v302 + 560);
                                    if (!*v123
                                      && !*((_DWORD *)this + 44 * v302 + 178)
                                      && !*((_DWORD *)this + 44 * v302 + 179))
                                    {
                                      goto LABEL_372;
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v302 + 70, 188, 0, 0xFFFFFFFFLL, 7, v122, 4);
                                    if (!result)
                                    {
LABEL_372:
                                      if ((*(_DWORD *)(*(void *)v34 + 608) = 0,
                                            int v124 = *(_DWORD *)(*(void *)v34 + 608),
                                            *(_DWORD *)(*(void *)v34 + 608) = 0,
                                            *(_DWORD *)(*(void *)v34 + 608) ^= 0x3FFu,
                                            int v125 = *(_DWORD *)(*(void *)v34 + 608),
                                            *(_DWORD *)(*(void *)v34 + 608) = v124,
                                            !*v123)
                                        && !*((_DWORD *)this + 44 * v302 + 178)
                                        && !*((_DWORD *)this + 44 * v302 + 179)
                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v123, 608, 0, 0x3FFFFFFFFFFLL, 32, v125, 4), !result))
                                      {
                                        *(_DWORD *)(*(void *)v34 + 192) = 0;
                                        int v126 = *(_DWORD *)(*(void *)v34 + 192);
                                        *(_DWORD *)(*(void *)v34 + 192) = 0;
                                        *(_DWORD *)(*(void *)v34 + 192) ^= 0xFFFFFF80;
                                        int v127 = *(_DWORD *)(*(void *)v34 + 192);
                                        *(_DWORD *)(*(void *)v34 + 192) = v126;
                                        unsigned int v128 = (void *)(v296 + 8);
                                        if (!*(void *)(v296 + 8)
                                          && !*(_DWORD *)(v296 + 160)
                                          && !*(_DWORD *)(v296 + 164))
                                        {
                                          goto LABEL_373;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v296 + 8), 192, *(_DWORD *)(v296 + 60), 0xFFFFFFFFLL, 7, v127, 4);
                                        if (!result)
                                        {
LABEL_373:
                                          if ((*(_DWORD *)(*(void *)v34 + 612) = 0,
                                                int v129 = *(_DWORD *)(*(void *)v34 + 612),
                                                *(_DWORD *)(*(void *)v34 + 612) = 0,
                                                *(_DWORD *)(*(void *)v34 + 612) ^= 0x3FFu,
                                                int v130 = *(_DWORD *)(*(void *)v34 + 612),
                                                *(_DWORD *)(*(void *)v34 + 612) = v129,
                                                !*v128)
                                            && !*(_DWORD *)(v296 + 160)
                                            && !*(_DWORD *)(v296 + 164)
                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 612, *(_DWORD *)(v296 + 60), 0x3FFFFFFFFFFLL, 32, v130, 4), !result))
                                          {
                                            *(_DWORD *)(*((void *)this + 33) + 196) = 0;
                                            uint64_t v131 = *((void *)this + 33);
                                            int v132 = *(_DWORD *)(v131 + 196);
                                            *(_DWORD *)(v131 + 196) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 196) ^= 0xFFFFFF80;
                                            uint64_t v133 = *((void *)this + 33);
                                            int v134 = *(_DWORD *)(v133 + 196);
                                            *(_DWORD *)(v133 + 196) = v132;
                                            unsigned int v135 = (void *)((char *)this + 176 * v302 + 4784);
                                            if (!*v135
                                              && !*((_DWORD *)this + 44 * v302 + 1234)
                                              && !*((_DWORD *)this + 44 * v302 + 1235))
                                            {
                                              goto LABEL_374;
                                            }
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v302 + 598, 196, 0, 0xFFFFFFFFLL, 7, v134, 4);
                                            if (!result)
                                            {
LABEL_374:
                                              if ((*(_DWORD *)(*(void *)v34 + 616) = 0,
                                                    int v136 = *(_DWORD *)(*(void *)v34 + 616),
                                                    *(_DWORD *)(*(void *)v34 + 616) = 0,
                                                    *(_DWORD *)(*(void *)v34 + 616) ^= 0x3FFu,
                                                    int v137 = *(_DWORD *)(*(void *)v34 + 616),
                                                    *(_DWORD *)(*(void *)v34 + 616) = v136,
                                                    !*v135)
                                                && !*((_DWORD *)this + 44 * v302 + 1234)
                                                && !*((_DWORD *)this + 44 * v302 + 1235)
                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v135, 616, 0, 0x3FFFFFFFFFFLL, 32, v137, 4), !result))
                                              {
                                                if ((*(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                                      int v138 = *(_DWORD *)(*(void *)v34 + 200),
                                                }
                                                      *(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                      *(_DWORD *)(*(void *)v34 + 200) ^= 0xFFFFFF80,
                                                      int v139 = *(_DWORD *)(*(void *)v34 + 200),
                                                      *(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v138,
                                                      !*v128)
                                                  && !*(_DWORD *)(v296 + 160)
                                                  && !*(_DWORD *)(v296 + 164)
                                                  || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 200, *(_DWORD *)(v296 + 64), 0xFFFFFFFFLL, 7, v139, 4), !result))
                                                {
                                                  if ((*(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                                        int v140 = *(_DWORD *)(*(void *)v34 + 620),
                                                  }
                                                        *(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                        *(_DWORD *)(*(void *)v34 + 620) ^= 0x3FFu,
                                                        int v141 = *(_DWORD *)(*(void *)v34 + 620),
                                                        *(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v140,
                                                        !*v128)
                                                    && !*(_DWORD *)(v296 + 160)
                                                    && !*(_DWORD *)(v296 + 164)
                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 620, *(_DWORD *)(v296 + 64), 0x3FFFFFFFFFFLL, 32, v141, 4), !result))
                                                  {
                                                    if (*(_DWORD *)(*((void *)this + 32) + 2648) != 1) {
                                                      goto LABEL_375;
                                                    }
                                                    if ((int v142 = *(_DWORD *)(*(void *)v34 + 192),
                                                          *(_DWORD *)(*(void *)v34 + 192) = 0,
                                                          *(_DWORD *)(*(void *)v34 + 192) ^= 0xFFFFFF80,
                                                          int v143 = *(_DWORD *)(*(void *)v34 + 192),
                                                          *(_DWORD *)(*(void *)v34 + 192) = v142,
                                                          !*v128)
                                                      && !*(_DWORD *)(v296 + 160)
                                                      && !*(_DWORD *)(v296 + 164)
                                                      || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 192, *(_DWORD *)(v296 + 60), 0xFFFFFFFFLL, 7, v143, 4), !result))
                                                    {
                                                      if ((int v144 = *(_DWORD *)(*(void *)v34 + 612),
                                                            *(_DWORD *)(*(void *)v34 + 612) = 0,
                                                            *(_DWORD *)(*(void *)v34 + 612) ^= 0x3FFu,
                                                            int v145 = *(_DWORD *)(*(void *)v34 + 612),
                                                            *(_DWORD *)(*(void *)v34 + 612) = v144,
                                                            !*v128)
                                                        && !*(_DWORD *)(v296 + 160)
                                                        && !*(_DWORD *)(v296 + 164)
                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 612, *(_DWORD *)(v296 + 60), 0x3FFFFFFFFFFLL, 32, v145, 4), !result))
                                                      {
                                                        if ((int v146 = *(_DWORD *)(*(void *)v34 + 200), {
                                                              *(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                        }
                                                              *(_DWORD *)(*(void *)v34 + 200) ^= 0xFFFFFF80,
                                                              int v147 = *(_DWORD *)(*(void *)v34 + 200),
                                                              *(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v146,
                                                              !*v128)
                                                          && !*(_DWORD *)(v296 + 160)
                                                          && !*(_DWORD *)(v296 + 164)
                                                          || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 200, *(_DWORD *)(v296 + 64), 0xFFFFFFFFLL, 7, v147, 4), !result))
                                                        {
                                                          if ((int v148 = *(_DWORD *)(*(void *)v34 + 620), {
                                                                *(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                          }
                                                                *(_DWORD *)(*(void *)v34 + 620) ^= 0x3FFu,
                                                                int v149 = *(_DWORD *)(*(void *)v34 + 620),
                                                                *(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v148,
                                                                !*v128)
                                                            && !*(_DWORD *)(v296 + 160)
                                                            && !*(_DWORD *)(v296 + 164)
                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 620, *(_DWORD *)(v296 + 64), 0x3FFFFFFFFFFLL, 32, v149, 4), !result))
                                                          {
                                                            if ((int v150 = *(_DWORD *)(*(void *)v34 + 188),
                                                                  *(_DWORD *)(*(void *)v34 + 188) = 0,
                                                                  *(_DWORD *)(*(void *)v34 + 188) ^= 0xFFFFFF80,
                                                                  int v151 = *(_DWORD *)(*(void *)v34 + 188),
                                                                  *(_DWORD *)(*(void *)v34 + 188) = v150,
                                                                  !*v128)
                                                              && !*(_DWORD *)(v296 + 160)
                                                              && !*(_DWORD *)(v296 + 164)
                                                              || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 188, *(_DWORD *)(v296 + 72), 0xFFFFFFFFLL, 7, v151, 4), !result))
                                                            {
                                                              if ((int v152 = *(_DWORD *)(*(void *)v34 + 608),
                                                                    *(_DWORD *)(*(void *)v34 + 608) = 0,
                                                                    *(_DWORD *)(*(void *)v34 + 608) ^= 0x3FFu,
                                                                    int v153 = *(_DWORD *)(*(void *)v34 + 608),
                                                                    *(_DWORD *)(*(void *)v34 + 608) = v152,
                                                                    !*v128)
                                                                && !*(_DWORD *)(v296 + 160)
                                                                && !*(_DWORD *)(v296 + 164)
                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 608, *(_DWORD *)(v296 + 72), 0x3FFFFFFFFFFLL, 32, v153, 4), !result))
                                                              {
                                                                if ((int v154 = *(_DWORD *)(*(void *)v34 + 196),
                                                                      *(_DWORD *)(*(void *)v34 + 196) = 0,
                                                                      *(_DWORD *)(*(void *)v34 + 196) ^= 0xFFFFFF80,
                                                                      int v155 = *(_DWORD *)(*(void *)v34 + 196),
                                                                      *(_DWORD *)(*(void *)v34 + 196) = v154,
                                                                      !*v128)
                                                                  && !*(_DWORD *)(v296 + 160)
                                                                  && !*(_DWORD *)(v296 + 164)
                                                                  || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 196, *(_DWORD *)(v296 + 76), 0xFFFFFFFFLL, 7, v155, 4), !result))
                                                                {
                                                                  if ((int v156 = *(_DWORD *)(*(void *)v34 + 616),
                                                                        *(_DWORD *)(*(void *)v34 + 616) = 0,
                                                                        *(_DWORD *)(*(void *)v34 + 616) ^= 0x3FFu,
                                                                        int v157 = *(_DWORD *)(*(void *)v34 + 616),
                                                                        *(_DWORD *)(*(void *)v34 + 616) = v156,
                                                                        !*v128)
                                                                    && !*(_DWORD *)(v296 + 160)
                                                                    && !*(_DWORD *)(v296 + 164)
                                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 616, *(_DWORD *)(v296 + 76), 0x3FFFFFFFFFFLL, 32, v157, 4), !result))
                                                                  {
LABEL_375:
                                                                    if (*(_DWORD *)(v16 + 52) & 0x2000 | v298)
                                                                    {
                                                                      *((_DWORD *)this + v302 + 116) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 204) = 0;
                                                                      if (v298)
                                                                      {
                                                                        uint64_t v158 = 0;
                                                                        if (v293) {
                                                                          int v159 = 0x2000000;
                                                                        }
                                                                        else {
                                                                          int v159 = 0;
                                                                        }
                                                                        int v289 = v159;
                                                                        do
                                                                        {
                                                                          uint64_t v160 = *((void *)v318 + v158);
                                                                          uint64_t v161 = *(unsigned int *)(v160 + 32);
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) & 0xFFFFFFF | ((v298 << 28) - 0x10000000);
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) &= 0xF3FFFFFF;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) & 0xFDFFFFFF | v289;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) |= 0x1000000u;
                                                                          int v162 = v299 - *(_DWORD *)(v160 + 12);
                                                                          int v163 = v162 & 0x1FFFF;
                                                                          if (v162 < -32768) {
                                                                            int v163 = 98304;
                                                                          }
                                                                          if (v162 < 0x8000) {
                                                                            int v164 = v163;
                                                                          }
                                                                          else {
                                                                            int v164 = 0x7FFF;
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) & 0xFFFE0000 | v164;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) & 0xFFFDFFFF | (*(unsigned __int8 *)(v160 + 1) << 17);
                                                                          if (*(_DWORD *)(v160 + 28) == 1)
                                                                          {
                                                                            long long v316 = 0u;
                                                                            long long v317 = 0u;
                                                                            long long v314 = 0u;
                                                                            long long v315 = 0u;
                                                                            long long v312 = 0u;
                                                                            long long v313 = 0u;
                                                                            long long v310 = 0u;
                                                                            long long v311 = 0u;
                                                                            long long v308 = 0u;
                                                                            long long v309 = 0u;
                                                                            memset(buf, 0, sizeof(buf));
                                                                            int DPB = AVC_RLM::getDPB(*(void *)(*((void *)this + 32)+ 3104), buf);
                                                                            if (DPB < 1)
                                                                            {
                                                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                              int v305 = 136315138;
                                                                              }
                                                                              uint64_t v306 = "populatePictureRegisters";
                                                                              int v29 = &_os_log_internal;
                                                                              uint64_t v30 = "AppleAVD: ERROR: %s: No ref pics found!\n";
                                                                            }
                                                                            else
                                                                            {
                                                                              uint64_t v166 = DPB;
                                                                              while (v166-- >= 1)
                                                                              {
                                                                                uint64_t v160 = buf[v166];
                                                                                if (!*(_DWORD *)(v160 + 28))
                                                                                {
                                                                                  uint64_t v161 = *(unsigned int *)(v160 + 32);
                                                                                  goto LABEL_224;
                                                                                }
                                                                              }
                                                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                              int v305 = 136315138;
                                                                              }
                                                                              uint64_t v306 = "populatePictureRegisters";
                                                                              int v29 = &_os_log_internal;
                                                                              uint64_t v30 = "AppleAVD: ERROR: %s: No non-existing"
                                                                                    " ref frames found!\n";
                                                                            }
                                                                            uint64_t v31 = (uint8_t *)&v305;
                                                                            goto LABEL_354;
                                                                          }
LABEL_224:
                                                                          if (v293)
                                                                          {
                                                                            buf[0] = 0;
                                                                            if (!CAVDAvcDecoder::decodeGetRenderTargetRef(*((void *)this + 32), v161, *(_DWORD *)(v160 + 56), *(_DWORD *)(v160 + 64), buf))
                                                                            {
                                                                              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                              {
                                                                                LOWORD(v305) = 0;
                                                                                int v29 = &_os_log_internal;
                                                                                uint64_t v30 = "AppleAVD: decodeGetRenderTargetRef"
                                                                                      " RETURNED ERROR\n";
                                                                                uint64_t v31 = (uint8_t *)&v305;
                                                                                uint32_t v32 = 2;
                                                                                goto LABEL_39;
                                                                              }
                                                                              return 0xFFFFFFFFLL;
                                                                            }
                                                                            *(void *)(v160 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = buf[0] + 8;
                                                                          }
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v158
                                                                                    + 268) = 0;
                                                                          int v303 = 4 * v158;
                                                                          int v295 = 4 * v158 + 268;
                                                                          uint64_t v168 = *((void *)this + 33) + 4 * v158;
                                                                          int v169 = *(_DWORD *)(v168 + 268);
                                                                          *(_DWORD *)(v168 + 268) = 0;
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v158
                                                                                    + 268) ^= 0xFFFFFF80;
                                                                          uint64_t v170 = *((void *)this + 33) + 4 * v158;
                                                                          int v171 = *(_DWORD *)(v170 + 268);
                                                                          *(_DWORD *)(v170 + 268) = v169;
                                                                          unsigned int v297 = v161;
                                                                          uint64_t v172 = (void *)((char *)this
                                                                                          + 176 * v161
                                                                                          + 560);
                                                                          if (*v172
                                                                            || *((_DWORD *)this
                                                                               + 44 * v161
                                                                               + 178)
                                                                            || *((_DWORD *)this
                                                                               + 44 * v161
                                                                               + 179))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this+ 22 * v161+ 70, v295, 0, 0xFFFFFFFFLL, 7, v171, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 624) = 0;
                                                                          int v292 = v303 + 624;
                                                                          uint64_t v173 = *(void *)v34 + 4 * v158;
                                                                          int v174 = *(_DWORD *)(v173 + 624);
                                                                          *(_DWORD *)(v173 + 624) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 624) ^= 0x3FFu;
                                                                          uint64_t v175 = *(void *)v34 + 4 * v158;
                                                                          int v176 = *(_DWORD *)(v175 + 624);
                                                                          *(_DWORD *)(v175 + 624) = v174;
                                                                          if (*v172
                                                                            || *((_DWORD *)this
                                                                               + 44 * v161
                                                                               + 178)
                                                                            || *((_DWORD *)this
                                                                               + 44 * v161
                                                                               + 179))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this+ 22 * v161+ 70, v292, 0, 0x3FFFFFFFFFFLL, 32, v176, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 332) = 0;
                                                                          int v291 = v303 + 332;
                                                                          uint64_t v177 = *(void *)v34 + 4 * v158;
                                                                          int v178 = *(_DWORD *)(v177 + 332);
                                                                          *(_DWORD *)(v177 + 332) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 332) ^= 0xFFFFFF80;
                                                                          uint64_t v179 = *(void *)v34 + 4 * v158;
                                                                          int v180 = *(_DWORD *)(v179 + 332);
                                                                          *(_DWORD *)(v179 + 332) = v178;
                                                                          uint64_t v181 = *(void *)(v160 + 40);
                                                                          if (*(void *)v181
                                                                            || *(_DWORD *)(v181 + 152)
                                                                            || *(_DWORD *)(v181 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v181, v291, *(_DWORD *)(v181 + 52), 0xFFFFFFFFLL, 7, v180, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 688) = 0;
                                                                          int v290 = v303 + 688;
                                                                          uint64_t v182 = *(void *)v34 + 4 * v158;
                                                                          int v183 = *(_DWORD *)(v182 + 688);
                                                                          *(_DWORD *)(v182 + 688) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 688) ^= 0x3FFu;
                                                                          uint64_t v184 = *(void *)v34 + 4 * v158;
                                                                          int v185 = *(_DWORD *)(v184 + 688);
                                                                          *(_DWORD *)(v184 + 688) = v183;
                                                                          uint64_t v186 = *(void *)(v160 + 40);
                                                                          if (*(void *)v186
                                                                            || *(_DWORD *)(v186 + 152)
                                                                            || *(_DWORD *)(v186 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v186, v290, *(_DWORD *)(v186 + 52), 0x3FFFFFFFFFFLL, 32, v185, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v158
                                                                                    + 396) = 0;
                                                                          int v288 = v303 + 396;
                                                                          uint64_t v187 = *((void *)this + 33) + 4 * v158;
                                                                          int v188 = *(_DWORD *)(v187 + 396);
                                                                          *(_DWORD *)(v187 + 396) = 0;
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v158
                                                                                    + 396) ^= 0xFFFFFF80;
                                                                          uint64_t v189 = *((void *)this + 33) + 4 * v158;
                                                                          int v190 = *(_DWORD *)(v189 + 396);
                                                                          *(_DWORD *)(v189 + 396) = v188;
                                                                          int v191 = (void *)((char *)this
                                                                                          + 176 * v161
                                                                                          + 4784);
                                                                          if (*v191
                                                                            || *((_DWORD *)this + 44 * v297 + 1234)
                                                                            || *((_DWORD *)this + 44 * v297 + 1235))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v297 + 598, v288, 0, 0xFFFFFFFFLL, 7, v190, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 752) = 0;
                                                                          int v287 = v303 + 752;
                                                                          uint64_t v192 = *(void *)v34 + 4 * v158;
                                                                          int v193 = *(_DWORD *)(v192 + 752);
                                                                          *(_DWORD *)(v192 + 752) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 752) ^= 0x3FFu;
                                                                          uint64_t v194 = *(void *)v34 + 4 * v158;
                                                                          int v195 = *(_DWORD *)(v194 + 752);
                                                                          *(_DWORD *)(v194 + 752) = v193;
                                                                          if (*v191
                                                                            || *((_DWORD *)this + 44 * v297 + 1234)
                                                                            || *((_DWORD *)this + 44 * v297 + 1235))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v191, v287, 0, 0x3FFFFFFFFFFLL, 32, v195, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                          int v196 = v303 + 460;
                                                                          uint64_t v197 = *(void *)v34 + 4 * v158;
                                                                          int v198 = *(_DWORD *)(v197 + 460);
                                                                          *(_DWORD *)(v197 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 460) ^= 0xFFFFFF80;
                                                                          uint64_t v199 = *(void *)v34 + 4 * v158;
                                                                          int v200 = *(_DWORD *)(v199 + 460);
                                                                          *(_DWORD *)(v199 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v198;
                                                                          uint64_t v201 = *(void *)(v160 + 40);
                                                                          if (*(void *)v201
                                                                            || *(_DWORD *)(v201 + 152)
                                                                            || *(_DWORD *)(v201 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v201, v196, *(_DWORD *)(v201 + 56), 0xFFFFFFFFLL, 7, v200, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 816) = 0;
                                                                          int v202 = v303 + 816;
                                                                          uint64_t v203 = *(void *)v34 + 4 * v158;
                                                                          int v204 = *(_DWORD *)(v203 + 816);
                                                                          *(_DWORD *)(v203 + 816) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 816) ^= 0x3FFu;
                                                                          uint64_t v205 = *(void *)v34 + 4 * v158;
                                                                          int v206 = *(_DWORD *)(v205 + 816);
                                                                          *(_DWORD *)(v205 + 816) = v204;
                                                                          uint64_t v207 = *(void *)(v160 + 40);
                                                                          if (*(void *)v207
                                                                            || *(_DWORD *)(v207 + 152)
                                                                            || *(_DWORD *)(v207 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v207, v202, *(_DWORD *)(v207 + 56), 0x3FFFFFFFFFFLL, 32, v206, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          if (*(_DWORD *)(*((void *)this + 32)
                                                                                         + 2648) == 1)
                                                                          {
                                                                            uint64_t v208 = *(void *)v34 + 4 * v158;
                                                                            int v209 = *(_DWORD *)(v208 + 332);
                                                                            *(_DWORD *)(v208 + 332) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 332) ^= 0xFFFFFF80;
                                                                            uint64_t v210 = *(void *)v34 + 4 * v158;
                                                                            int v211 = *(_DWORD *)(v210 + 332);
                                                                            *(_DWORD *)(v210 + 332) = v209;
                                                                            uint64_t v212 = *(void *)(v160 + 40);
                                                                            if (*(void *)v212
                                                                              || *(_DWORD *)(v212 + 152)
                                                                              || *(_DWORD *)(v212 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v212, v291, *(_DWORD *)(v212 + 52), 0xFFFFFFFFLL, 7, v211, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v213 = *(void *)v34 + 4 * v158;
                                                                            int v214 = *(_DWORD *)(v213 + 688);
                                                                            *(_DWORD *)(v213 + 688) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 688) ^= 0x3FFu;
                                                                            uint64_t v215 = *(void *)v34 + 4 * v158;
                                                                            int v216 = *(_DWORD *)(v215 + 688);
                                                                            *(_DWORD *)(v215 + 688) = v214;
                                                                            uint64_t v217 = *(void *)(v160 + 40);
                                                                            if (*(void *)v217
                                                                              || *(_DWORD *)(v217 + 152)
                                                                              || *(_DWORD *)(v217 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v217, v290, *(_DWORD *)(v217 + 52), 0x3FFFFFFFFFFLL, 32, v216, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v218 = *(void *)v34 + 4 * v158;
                                                                            int v219 = *(_DWORD *)(v218 + 460);
                                                                            *(_DWORD *)(v218 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 460) ^= 0xFFFFFF80;
                                                                            uint64_t v220 = *(void *)v34 + 4 * v158;
                                                                            int v221 = *(_DWORD *)(v220 + 460);
                                                                            *(_DWORD *)(v220 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v219;
                                                                            uint64_t v222 = *(void *)(v160 + 40);
                                                                            if (*(void *)v222
                                                                              || *(_DWORD *)(v222 + 152)
                                                                              || *(_DWORD *)(v222 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v222, v196, *(_DWORD *)(v222 + 56), 0xFFFFFFFFLL, 7, v221, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v223 = *(void *)v34 + 4 * v158;
                                                                            int v224 = *(_DWORD *)(v223 + 816);
                                                                            *(_DWORD *)(v223 + 816) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 816) ^= 0x3FFu;
                                                                            uint64_t v225 = *(void *)v34 + 4 * v158;
                                                                            int v226 = *(_DWORD *)(v225 + 816);
                                                                            *(_DWORD *)(v225 + 816) = v224;
                                                                            uint64_t v227 = *(void *)(v160 + 40);
                                                                            if (*(void *)v227
                                                                              || *(_DWORD *)(v227 + 152)
                                                                              || *(_DWORD *)(v227 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v227, v202, *(_DWORD *)(v227 + 56), 0x3FFFFFFFFFFLL, 32, v226, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v228 = *(void *)v34 + 4 * v158;
                                                                            int v229 = *(_DWORD *)(v228 + 268);
                                                                            *(_DWORD *)(v228 + 268) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 268) ^= 0xFFFFFF80;
                                                                            uint64_t v230 = *(void *)v34 + 4 * v158;
                                                                            int v231 = *(_DWORD *)(v230 + 268);
                                                                            *(_DWORD *)(v230 + 268) = v229;
                                                                            uint64_t v232 = *(void *)(v160 + 40);
                                                                            if (*(void *)v232
                                                                              || *(_DWORD *)(v232 + 152)
                                                                              || *(_DWORD *)(v232 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v232, v295, *(_DWORD *)(v232 + 64), 0xFFFFFFFFLL, 7, v231, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v233 = *(void *)v34 + 4 * v158;
                                                                            int v234 = *(_DWORD *)(v233 + 624);
                                                                            *(_DWORD *)(v233 + 624) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 624) ^= 0x3FFu;
                                                                            uint64_t v235 = *(void *)v34 + 4 * v158;
                                                                            int v236 = *(_DWORD *)(v235 + 624);
                                                                            *(_DWORD *)(v235 + 624) = v234;
                                                                            uint64_t v237 = *(void *)(v160 + 40);
                                                                            if (*(void *)v237
                                                                              || *(_DWORD *)(v237 + 152)
                                                                              || *(_DWORD *)(v237 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v237, v292, *(_DWORD *)(v237 + 64), 0x3FFFFFFFFFFLL, 32, v236, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v238 = *(void *)v34 + 4 * v158;
                                                                            int v239 = *(_DWORD *)(v238 + 396);
                                                                            *(_DWORD *)(v238 + 396) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 396) ^= 0xFFFFFF80;
                                                                            uint64_t v240 = *(void *)v34 + 4 * v158;
                                                                            int v241 = *(_DWORD *)(v240 + 396);
                                                                            *(_DWORD *)(v240 + 396) = v239;
                                                                            uint64_t v242 = *(void *)(v160 + 40);
                                                                            if (*(void *)v242
                                                                              || *(_DWORD *)(v242 + 152)
                                                                              || *(_DWORD *)(v242 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v242, v288, *(_DWORD *)(v242 + 68), 0xFFFFFFFFLL, 7, v241, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v243 = *(void *)v34 + 4 * v158;
                                                                            int v244 = *(_DWORD *)(v243 + 752);
                                                                            *(_DWORD *)(v243 + 752) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 752) ^= 0x3FFu;
                                                                            uint64_t v245 = *(void *)v34 + 4 * v158;
                                                                            int v246 = *(_DWORD *)(v245 + 752);
                                                                            *(_DWORD *)(v245 + 752) = v244;
                                                                            uint64_t v247 = *(void *)(v160 + 40);
                                                                            if (*(void *)v247
                                                                              || *(_DWORD *)(v247 + 152)
                                                                              || *(_DWORD *)(v247 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v247, v287, *(_DWORD *)(v247 + 68), 0x3FFFFFFFFFFLL, 32, v246, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                          }
                                                                          ++v158;
                                                                        }
                                                                        while (v158 != v298);
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      *(_DWORD *)(v16 + 52) |= 0x2000u;
                                                                      *((_DWORD *)this + v302 + 116) = 1;
                                                                      *(_DWORD *)(*((void *)this + 33) + 204) = 0;
                                                                    }
                                                                    *(_DWORD *)(*(void *)v34 + 524) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 88pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 528) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 884) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 532) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 536) = 0;
                                                                    if (v300)
                                                                    {
                                                                      uint64_t v248 = *((void *)this + 32);
                                                                      unsigned int v249 = *(unsigned __int8 *)(v248 + 3004);
                                                                      if (*(unsigned char *)(v248 + 3004))
                                                                      {
                                                                        unsigned int v249 = *(_DWORD *)(v248 + 3016);
                                                                        unsigned int v301 = *(_DWORD *)(v248 + 3020);
                                                                      }
                                                                      else
                                                                      {
                                                                        unsigned int v301 = 0;
                                                                      }
                                                                      uint64_t v250 = *(void *)(v248 + 3656);
                                                                      uint64_t v304 = *(unsigned int *)(v250 + 56);
                                                                      unint64_t v251 = *(unsigned int *)(v250 + 52)
                                                                           + (unint64_t)v249;
                                                                      uint64_t v252 = *((void *)this + 33);
                                                                      int v253 = *(_DWORD *)(v252 + 524);
                                                                      *(_DWORD *)(v252 + 524) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 524) ^= 0xFFFFFFC0;
                                                                      uint64_t v254 = *((void *)this + 33);
                                                                      int v255 = *(_DWORD *)(v254 + 524);
                                                                      *(_DWORD *)(v254 + 524) = v253;
                                                                      uint64_t v256 = *(void *)(*((void *)this + 32) + 3656);
                                                                      unint64_t v257 = HIDWORD(v251);
                                                                      if (*(void *)v256
                                                                        || *(_DWORD *)(v256 + 152)
                                                                        || *(_DWORD *)(v256 + 156))
                                                                      {
                                                                        if (v257
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1274;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v256, 524, v251, 0xFFFFFFFFLL, 6, v255, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      uint64_t v258 = *((void *)this + 33);
                                                                      int v259 = *(_DWORD *)(v258 + 880);
                                                                      *(_DWORD *)(v258 + 88pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 880) ^= 0x3FFu;
                                                                      uint64_t v260 = *((void *)this + 33);
                                                                      int v261 = *(_DWORD *)(v260 + 880);
                                                                      *(_DWORD *)(v260 + 88pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v259;
                                                                      uint64_t v262 = *(void *)(*((void *)this + 32) + 3656);
                                                                      if (*(void *)v262
                                                                        || *(_DWORD *)(v262 + 152)
                                                                        || *(_DWORD *)(v262 + 156))
                                                                      {
                                                                        if (v257
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1276;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v262, 880, v251, 0x3FFFFFFFFFFLL, 32, v261, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      unint64_t v263 = v304 + v301;
                                                                      uint64_t v264 = *((void *)this + 33);
                                                                      int v265 = *(_DWORD *)(v264 + 528);
                                                                      *(_DWORD *)(v264 + 528) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 528) ^= 0xFFFFFFC0;
                                                                      uint64_t v266 = *((void *)this + 33);
                                                                      int v267 = *(_DWORD *)(v266 + 528);
                                                                      *(_DWORD *)(v266 + 528) = v265;
                                                                      uint64_t v268 = *(void *)(*((void *)this + 32) + 3656);
                                                                      unint64_t v269 = HIDWORD(v263);
                                                                      if (*(void *)v268
                                                                        || *(_DWORD *)(v268 + 152)
                                                                        || *(_DWORD *)(v268 + 156))
                                                                      {
                                                                        if (v269
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1279;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v268, 528, v263, 0xFFFFFFFFLL, 6, v267, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      uint64_t v270 = *((void *)this + 33);
                                                                      int v271 = *(_DWORD *)(v270 + 884);
                                                                      *(_DWORD *)(v270 + 884) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 884) ^= 0x3FFu;
                                                                      uint64_t v272 = *((void *)this + 33);
                                                                      int v273 = *(_DWORD *)(v272 + 884);
                                                                      *(_DWORD *)(v272 + 884) = v271;
                                                                      uint64_t v274 = *(void *)(*((void *)this + 32) + 3656);
                                                                      if (*(void *)v274
                                                                        || *(_DWORD *)(v274 + 152)
                                                                        || *(_DWORD *)(v274 + 156))
                                                                      {
                                                                        if (v269
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1281;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v274, 884, v263, 0x3FFFFFFFFFFLL, 32, v273, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      if (v70)
                                                                      {
                                                                        *(_DWORD *)(*((void *)this + 33) + 532) = *(_DWORD *)(*((void *)this + 33) + 532) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 76) >> 6) & 0xFFF) << 6);
                                                                        unsigned int v275 = (_DWORD *)(*(void *)(*((void *)this + 32) + 3656)
                                                                                        + 80);
                                                                      }
                                                                      else
                                                                      {
                                                                        if (CAHDecTansyAvc::getSWRStride(this, *(unsigned __int16 *)(v16 + 84)- *(unsigned __int16 *)(v16 + 80)+ 1, *(unsigned __int8 *)(v5 + 2224 * v3 + 6), *(unsigned __int8 *)(v5 + 2224 * v3 + 7), *(_DWORD *)(v5 + 2224 * v3 + 2212)))return 0xFFFFFFFFLL; {
                                                                        *(_DWORD *)(*((void *)this + 33) + 532) = *(_DWORD *)(*((void *)this + 33) + 532) & 0xFFFC003F | (((*((_DWORD *)this + 2964) >> 6) & 0xFFF) << 6);
                                                                        }
                                                                        unsigned int v275 = (_DWORD *)((char *)this + 11860);
                                                                      }
                                                                      *(_DWORD *)(*(void *)v34 + 536) = *(_DWORD *)(*(void *)v34 + 536) & 0xFFF8003F | (((*v275 >> 6) & 0x1FFF) << 6);
                                                                    }
                                                                    uint64_t v276 = *((void *)this + 32);
                                                                    if (*(_DWORD *)(v276 + 2360) == 1)
                                                                    {
                                                                      uint64_t v277 = *(void *)v34;
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFFE | *(_DWORD *)(v276 + 2508) & 1;
                                                                      if (*(_DWORD *)(v276 + 2508))
                                                                      {
                                                                        *(_DWORD *)(v277 + 196pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x10000000;
                                                                        *(_DWORD *)(v277 + 1964) = *(_DWORD *)(v276 + 2368);
                                                                        *(_DWORD *)(v277 + 1976) = 0;
                                                                        *(void *)(v277 + 1968) = 0;
                                                                        *(_OWORD *)(v277 + 198pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v276 + 2372);
                                                                        long long v278 = *(_OWORD *)(v276 + 2404);
                                                                        *(_OWORD *)(v277 + 1996) = *(_OWORD *)(v276 + 2388);
                                                                        *(_OWORD *)(v277 + 2012) = v278;
                                                                      }
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v276 + 2512) & 1));
                                                                      if (*(_DWORD *)(v276 + 2512))
                                                                      {
                                                                        *(_DWORD *)(v277 + 2028) = 0;
                                                                        if (!*(_DWORD *)(v276 + 2424))
                                                                        {
                                                                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                          LODWORD(buf[0]) = 136315138;
                                                                          }
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          int v29 = &_os_log_internal;
                                                                          uint64_t v30 = "AppleAVD: %s(): H13A descrambler is not supported\n";
                                                                          goto LABEL_353;
                                                                        }
                                                                        *(_DWORD *)(v276 + 264pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                        int v279 = *(_DWORD *)(v277 + 2028) & 0xF7FFFFF | ((*(_DWORD *)(v276 + 2420) & 1) << 23) | 0x20000000;
                                                                        *(_DWORD *)(v277 + 2028) = v279;
                                                                        *(_DWORD *)(v277 + 2028) = v279 & 0xFFC00000 | (*(_DWORD *)(v276 + 2364) == 0);
                                                                        long long v280 = *(_OWORD *)(v276 + 2428);
                                                                        long long v281 = *(_OWORD *)(v276 + 2444);
                                                                        *(_OWORD *)(v277 + 2064) = *(_OWORD *)(v276 + 2460);
                                                                        *(_OWORD *)(v277 + 2048) = v281;
                                                                        *(_OWORD *)(v277 + 2032) = v280;
                                                                      }
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v276 + 2516) & 1));
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v276 + 2520) & 1));
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v276 + 2524) & 1));
                                                                      if (*(_DWORD *)(v276 + 2516))
                                                                      {
                                                                        *(_DWORD *)(v277 + 2188) = 0;
                                                                        if (*(_DWORD *)(v276 + 2476) == 2) {
                                                                          int v282 = 805306368;
                                                                        }
                                                                        else {
                                                                          int v282 = 813694976;
                                                                        }
                                                                        *(_DWORD *)(v277 + 2188) = v282;
                                                                        memcpy((void *)(v277 + 2192), (const void *)(v276 + 2480), 4 * *(unsigned int *)(v276 + 2476));
                                                                        *(_DWORD *)(v276 + 2516) = 0;
                                                                      }
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFDF | (32 * (*(_DWORD *)(v276 + 2632) & 1));
                                                                      if (*(_DWORD *)(v276 + 2632))
                                                                      {
                                                                        *(_DWORD *)(v277 + 208pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x80000000;
                                                                        unsigned int v283 = ((*(_DWORD *)(v276 + 2528) & 1) << 27) | 0x80000000;
                                                                        *(_DWORD *)(v277 + 208pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v283;
                                                                        *(_DWORD *)(v277 + 208pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v283 | (((2 * *(_DWORD *)(v276 + 2528)) & 4 | (*(_DWORD *)(v276 + 2528) >> 1) & 2 | (*(_DWORD *)(v276 + 2528) >> 3) & 1) << 24);
                                                                        long long v284 = *(_OWORD *)(v276 + 2532);
                                                                        long long v285 = *(_OWORD *)(v276 + 2548);
                                                                        *(_OWORD *)(v277 + 2116) = *(_OWORD *)(v276 + 2564);
                                                                        *(_OWORD *)(v277 + 210pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v285;
                                                                        *(_OWORD *)(v277 + 2084) = v284;
                                                                        *(void *)(v277 + 2132) = *(void *)(v276 + 2580);
                                                                        *(void *)(v277 + 214pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(v276 + 2588);
                                                                        int v286 = *(_DWORD *)(v276 + 2528);
                                                                        if ((v286 & 6) != 0 && (v286 & 8) == 0)
                                                                        {
                                                                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                          LODWORD(buf[0]) = 136315138;
                                                                          }
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          int v29 = &_os_log_internal;
                                                                          uint64_t v30 = "AppleAVD: %s(): chip id is not used whil"
                                                                                "e ecid and/or board id is used\n";
LABEL_353:
                                                                          uint64_t v31 = (uint8_t *)buf;
LABEL_354:
                                                                          uint32_t v32 = 12;
LABEL_39:
                                                                          _os_log_impl(&dword_223977000, v29, OS_LOG_TYPE_DEFAULT, v30, v31, v32);
                                                                          return 0xFFFFFFFFLL;
                                                                        }
                                                                        *(_OWORD *)(v277 + 2148) = *(_OWORD *)(v276 + 2596);
                                                                      }
                                                                      *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFBF | ((*(_DWORD *)(v276 + 2636) & 1) << 6);
                                                                      if (*(_DWORD *)(v276 + 2636))
                                                                      {
                                                                        uint64_t result = 0;
                                                                        *(_DWORD *)(v277 + 2164) = -1879048192;
                                                                        *(_DWORD *)(v277 + 2164) = ((*(_DWORD *)(v276 + 2612) & 1) << 23) | 0x90000000;
                                                                        *(_OWORD *)(v277 + 2168) = *(_OWORD *)(v276 + 2616);
                                                                        *(_DWORD *)(v276 + 264pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
                                                                        return result;
                                                                      }
                                                                    }
                                                                    return 0;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecTansyAvc::getSWRStride(CAHDecTansyAvc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1482) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 2964) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 2964) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 2964) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 2964) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 2965) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecTansyAvc::getTileStartCTU(CAHDecTansyAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 888);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecTansyAvc::getTileEndCTU(CAHDecTansyAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 888);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecTansyAvc::getTileIdxAbove(CAHDecTansyAvc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 888);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecTansyAvc::populateAvdWork(CAHDecTansyAvc *this, unsigned int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v3 + 3312);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 7500);
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    long long v9 = (int *)(v2 + 3144);
    long long v10 = (int *)(v4 + 20);
    __int16 v22 = a2;
    uint64_t v11 = 44 * a2;
    uint64_t v12 = v2 + 956 * v5;
    while (1)
    {
      uint64_t v13 = v12 + v7;
      *(_WORD *)(v13 + 2212) = v8;
      *(_WORD *)(v13 + 2214) = 0;
      *(_WORD *)(v13 + 2216) = v8;
      *(_DWORD *)(v12 + v7 + 2218) = 0;
      int v14 = *v9;
      if (!CAVDAvcDecoder::GetSDataMemInfo(*((void *)this + 32), v8, &v24, &v23)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *v10;
      *(_DWORD *)(v13 + 224pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *v10;
      *(_DWORD *)(v13 + 2244) = v15;
      *(_DWORD *)(v13 + 2248) = 0;
      if (v7) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = 15;
      }
      *(_WORD *)(v13 + 2222) = v16;
      uint64_t v17 = v24;
      if (*(void *)v24 || *(_DWORD *)(v24 + 152) || *(_DWORD *)(v24 + 156))
      {
        int v18 = v23;
        if (HIDWORD(v23) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          int v26 = "populateAvdWork";
          __int16 v27 = 1024;
          int v28 = 1998;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          int v18 = v23;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 575830, v18, 0x3FFFFFFFFFFLL, 32, -1, 2);
        if (result) {
          return result;
        }
        uint64_t v17 = v24;
        if (*(void *)v24) {
          goto LABEL_17;
        }
      }
      if (*(_DWORD *)(v17 + 152) || *(_DWORD *)(v17 + 156))
      {
LABEL_17:
        int v20 = v23;
        if (HIDWORD(v23))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            int v26 = "populateAvdWork";
            __int16 v27 = 1024;
            int v28 = 1999;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v20 = v23;
          }
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 575832, v20, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
      v9 += 239;
      *(_DWORD *)(v12 + v7 + 2236) = v14;
      ++v8;
      v7 += 44;
      v10 += 462;
      if (v11 == v7)
      {
        uint64_t v2 = *((void *)this + 33);
        __int16 v21 = v22;
        goto LABEL_24;
      }
    }
  }
  else
  {
    __int16 v21 = 0;
LABEL_24:
    uint64_t result = 0;
    *(_WORD *)(v2 + 28) = v21;
    *(_DWORD *)(v2 + 32) = 575808;
  }
  return result;
}

uint64_t CAHDecTansyAvc::getDecHdrStride(CAHDecTansyAvc *this, int a2, char a3, unsigned int a4)
{
  return (a2 + (a4 >> 2 >> a3) - 1) / (a4 >> 2 >> a3);
}

uint64_t CAHDecTansyAvc::getDecHdrSize(CAHDecTansyAvc *this, int a2, char a3, int a4, int a5)
{
  return a5 * a4 * ((a2 + (1 << a3) - 1) >> a3);
}

uint64_t CAHDecTansyAvc::allocWorkBuf_SPS(CAHDecTansyAvc *this, unsigned char *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v3 = a2[4];
  unsigned int v4 = *((unsigned __int16 *)a2 + 779);
  int v5 = 16 * v4;
  unsigned int v6 = *((unsigned __int16 *)a2 + 780);
  unsigned int v7 = 32 - __clz(((16 * v4 + 47) >> 5) - 1);
  if (v4 < 2) {
    LOBYTE(v7) = 0;
  }
  unsigned int v8 = 32 - __clz(((16 * v6 + 47) >> 5) - 1);
  if (v6 < 2) {
    LOBYTE(v8) = 0;
  }
  unsigned int v9 = ((32 << (v8 + v7)) + 127) & 0xFFFFFF80;
  if (a2[4])
  {
    unsigned int v10 = (v5 + 16) << (v3 == 3);
    unsigned int v11 = ((((16 * v6 + 16) | (v3 == 1)) >> (v3 == 1)) + 15) >> 4;
    if (v10 > 0x20)
    {
      unsigned int v12 = 32 - __clz(((v10 + 31) >> 5) - 1);
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  LOBYTE(v12) = 0;
LABEL_10:
  unsigned int v13 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  unsigned int v15 = ((8 << (v14 + v12)) + 127) & 0xFFFFFF80;
  if (a2[4]) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = 0;
  }
  *((_DWORD *)this + 2956) = v9;
  *((_DWORD *)this + 2957) = v16;
  *((void *)this + 1479) = 0;
  int v17 = (v4 << 6) + 64;
  *((_DWORD *)this + 2962) = v17;
  unsigned int v18 = v17 + v17 * v6;
  *((_DWORD *)this + 2961) = v18;
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    uint64_t v19 = 24;
    int v20 = this;
    while (1)
    {
      uint64_t v21 = *((unsigned int *)this + 2956);
      if (v21
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 35, v21, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_34;
        }
        int v27 = 136315650;
        int v28 = "allocWorkBuf_SPS";
        __int16 v29 = 1024;
        int v30 = 2240;
        __int16 v31 = 2080;
        uint32_t v32 = "HdrY";
        BOOL v25 = &_os_log_internal;
        goto LABEL_33;
      }
      uint64_t v22 = *((unsigned int *)this + 2957);
      if (v22)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 299, v22, 7, 1, 0)) {
          break;
        }
      }
      int v20 = (CAHDecTansyAvc *)((char *)v20 + 176);
      if (!--v19)
      {
        unsigned int v18 = *((_DWORD *)this + 2961);
        goto LABEL_24;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    int v27 = 136315650;
    int v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2241;
    __int16 v31 = 2080;
    uint32_t v32 = "HdrC";
    BOOL v25 = &_os_log_internal;
    goto LABEL_33;
  }
LABEL_24:
  int v23 = (*MEMORY[0x263EF8AD0] + v18) & ~*MEMORY[0x263EF8AD0];
  *((_DWORD *)this + 2961) = v23;
  uint64_t v24 = (24 * v23);
  if (!v24
    || !CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 728, v24, 7, 1, 32))
  {
    uint64_t result = 0;
    *((_DWORD *)this + 2966) = 0;
    *((_DWORD *)this + 2967) = v5 | (v6 << 20) | 0xF000F;
    return result;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 136315650;
    int v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2259;
    __int16 v31 = 2080;
    uint32_t v32 = "MvColo";
    BOOL v25 = &_os_log_internal;
LABEL_33:
    _os_log_impl(&dword_223977000, v25, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v27, 0x1Cu);
  }
LABEL_34:
  (*(void (**)(CAHDecTansyAvc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecTansyAvc::allocWorkBuf_PPS(CAHDecTansyAvc *this, unsigned char *a2, void *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = 16 * *((unsigned __int16 *)a2 + 779);
  if (((a2[6] + 9) & 0x1FEu) <= ((a2[7] + 9) & 0x1FEu)) {
    int v6 = (a2[7] + 9) & 0x1FE;
  }
  else {
    int v6 = (a2[6] + 9) & 0x1FE;
  }
  int v7 = a2[4];
  if (v7 == 3) {
    int v8 = 48;
  }
  else {
    int v8 = 32;
  }
  if (v7 == 3) {
    int v9 = 192;
  }
  else {
    int v9 = 128;
  }
  if (a2[4]) {
    int v10 = v8;
  }
  else {
    int v10 = 16;
  }
  if (a2[4]) {
    int v11 = v9;
  }
  else {
    int v11 = 64;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 651, 4 * (((unint64_t)(v5 + 16) >> 2) + ((unint64_t)(v5 + 16) >> 4)), 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_20:
      (*(void (**)(CAHDecTansyAvc *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2407;
    __int16 v21 = 2080;
    uint64_t v22 = "AvpAboveInfo";
    unsigned int v12 = &_os_log_internal;
LABEL_19:
    _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v17, 0x1Cu);
    goto LABEL_20;
  }
  unsigned int v14 = (v5 + 31) >> 4;
  uint64_t v15 = ((v6 * v10) >> 3) * v14;
  if (v15 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 662, v15, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2411;
    __int16 v21 = 2080;
    uint64_t v22 = "IpAbove";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t v16 = ((v6 * v11) >> 3) * v14;
  if (v16 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 673, v16, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2412;
    __int16 v21 = 2080;
    uint64_t v22 = "LfAbovePix";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 684, 32 * v14, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2413;
    __int16 v21 = 2080;
    uint64_t v22 = "LfAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 640, 32 * v14, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2416;
    __int16 v21 = 2080;
    uint64_t v22 = "MvAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  return result;
}

uint64_t CAHDecTansyAvc::freeWorkBuf_SPS(CAHDecTansyAvc *this)
{
  uint64_t v2 = 24;
  int v3 = this;
  do
  {
    uint64_t result = *((void *)this + 32);
    if (!*(_DWORD *)(result + 2648))
    {
      if (*((void *)v3 + 70))
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(result, (uint64_t *)v3 + 70);
        *((void *)v3 + 7pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      }
      if (*((void *)v3 + 598))
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)v3 + 598);
        *((void *)v3 + 598) = 0;
      }
    }
    int v3 = (CAHDecTansyAvc *)((char *)v3 + 176);
    --v2;
  }
  while (v2);
  if (*((void *)this + 1456))
  {
    uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 1456);
    *((void *)this + 1456) = 0;
  }
  return result;
}

uint64_t *CAHDecTansyAvc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[1302])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1302);
    v2[1302] = 0;
  }
  if (v2[1324])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1324);
    v2[1324] = 0;
  }
  if (v2[1280])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1280);
    v2[1280] = 0;
  }
  if (v2[1346])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1346);
    v2[1346] = 0;
  }
  if (v2[1368])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1368);
    v2[1368] = 0;
  }
  if (v2[1390])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1390);
    v2[1390] = 0;
  }
  if (v2[1412])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1412);
    v2[1412] = 0;
  }
  if (v2[1434])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1434);
    v2[1434] = 0;
  }
  return this;
}

uint64_t CAHDecTansyAvc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 9008;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 1184pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  return this;
}

uint64_t CAHDecTansyAvc::decodeBuffer(CAHDecTansyAvc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecTansyAvc::decodeBufferSize(CAHDecTansyAvc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecTansyAvc::decHdrYLinAddr(CAHDecTansyAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 70);
}

uint64_t CAHDecTansyAvc::decHdrCLinAddr(CAHDecTansyAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 598);
}

uint64_t CAHDecTansyAvc::decHdrYSize(CAHDecTansyAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 151);
}

uint64_t CAHDecTansyAvc::decHdrCSize(CAHDecTansyAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 1207);
}

uint64_t CAHDecTansyAvc::decHdrYStride(CAHDecTansyAvc *this)
{
  return *((unsigned int *)this + 2958);
}

uint64_t CAHDecTansyAvc::decHdrCStride(CAHDecTansyAvc *this)
{
  return *((unsigned int *)this + 2959);
}

uint64_t CAHDec::DecodePicture(CAHDec *this)
{
  return 0;
}

{
  return 0;
}

uint64_t CAHDec::ppsWorkBufSizeIncrease(CAHDec *this, void *a2, void *a3)
{
  return 0;
}

CAHDecTansyHevc *createTansyHevcDecoder(CAVDHevcDecoder *a1)
{
  uint64_t v2 = (CAHDecTansyHevc *)operator new(0x2EE8uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecTansyHevc::CAHDecTansyHevc(v2, a1);
  }
  return v3;
}

void sub_2239AF5C0(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecTansyHevc::CAHDecTansyHevc(CAHDecTansyHevc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D7406F0;
  *(_DWORD *)(v1 + 456) = 420444;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = 0;
  *(void *)(v1 + 272) = 0;
}

void CAHDecTansyHevc::CAHDecTansyHevc(CAHDecTansyHevc *this, CAVDHevcDecoder *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D7406F0;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 420444;
  *(_DWORD *)(v4 + 8) = 3036;
  *(_OWORD *)(v4 + 16) = xmmword_223AD0620;
  *(_DWORD *)(v4 + 32) = 2;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 420444, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      int v7 = "CAHDecTansyHevc";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v6, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
  }
  else
  {
    uint64_t v5 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v5;
    *((void *)this + 34) = v5;
    bzero((char *)this + 528, 0x2CB0uLL);
  }
}

void sub_2239AF780(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecTansyHevc::~CAHDecTansyHevc(CAHDecTansyHevc *this)
{
  *(void *)this = &unk_26D7406F0;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecTansyHevc::~CAHDecTansyHevc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecTansyHevc::initPicture(CAHDecTansyHevc *this, int a2, __int16 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 114) = 420444;
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v4;
  if (v4)
  {
    bzero(v4, 0x66A5CuLL);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v7 + 16) = a2;
    *(_WORD *)(v7 + 24) = 257;
    *(_WORD *)(v7 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 2999) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "initPicture";
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v9, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecTansyHevc::populateSlices(CAHDecTansyHevc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 3036;
    uint64_t v5 = a2;
    do
    {
      CAHDecTansyHevc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 368;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecTansyHevc::populateSliceRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 256);
  int v6 = *(_DWORD *)(v5 + 8320);
  int v7 = *(_DWORD *)(v5 + 8324);
  uint64_t v8 = *(void *)(v5 + 8288);
  uint64_t v9 = *(void *)(v5 + 8280);
  uint64_t v10 = *(void *)(v5 + 8296);
  int v11 = a3;
  uint64_t v12 = v9 + 23176 * v6;
  *(_DWORD *)(a1 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 6 * *(_DWORD *)(v12 + 3636);
  LODWORD(v12) = *(_DWORD *)(v12 + 22880);
  *(_DWORD *)(a2 + 352) = 0x1000000;
  uint64_t v13 = v10 + 2360 * (int)a3;
  unsigned int v14 = (((*(_DWORD *)(v13 + 36) / v12) & 0xFFF) << 12) | 0x1000000;
  *(_DWORD *)(a2 + 352) = v14;
  *(_DWORD *)(a2 + 352) = v14 & 0xFFFFF000 | (*(_DWORD *)(v13 + 36) % v12) & 0xFFF;
  *(_DWORD *)(a2 + 4) = 0;
  char v15 = *(unsigned char *)(v8 + 9856 * v7 + 6477);
  if (v15) {
    char v15 = *(unsigned char *)(v10 + 2360 * (int)a3 + 1880);
  }
  int v16 = v15 & 1;
  *(_DWORD *)(a2 + 4) = v16;
  uint64_t v17 = v10 + 2360 * (int)a3;
  int v19 = *(_DWORD *)(v17 + 44);
  unsigned int v18 = (int *)(v17 + 44);
  if (v19 == 2) {
    LOBYTE(v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  else {
    int v20 = 5 - *(_DWORD *)(v10 + 2360 * (int)a3 + 1864);
  }
  unsigned int v21 = v16 & 0xFFFFFFF1 | (2 * (v20 & 7));
  *(_DWORD *)(a2 + 4) = v21;
  if (*v18)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *(unsigned __int8 *)(v10 + 2360 * (int)a3 + 616);
    if (*(unsigned char *)(v10 + 2360 * (int)a3 + 616)) {
      int v22 = *(unsigned char *)(v10 + 2360 * (int)a3 + 762) == 0;
    }
  }
  int v23 = v21 | (16 * v22);
  *(_DWORD *)(a2 + 4) = v23;
  if (*v18 == 2)
  {
    char v24 = 0;
  }
  else
  {
    char v24 = *(unsigned char *)(v8 + 9856 * v7 + 17);
    if (v24) {
      char v24 = *(unsigned char *)(v10 + 2360 * (int)a3 + 761);
    }
  }
  unsigned int v25 = v23 & 0xFFFFFFDF | (32 * (v24 & 1));
  *(_DWORD *)(a2 + 4) = v25;
  if (*v18) {
    int v26 = 0;
  }
  else {
    int v26 = *(unsigned char *)(v10 + 2360 * (int)a3 + 760) == 0;
  }
  char v27 = 0;
  int v28 = v25 | (v26 << 6);
  *(_DWORD *)(a2 + 4) = v28;
  uint64_t v29 = v10 + 2360 * (int)a3;
  int v30 = (*(_DWORD *)(v29 + 624) & 0xF) << 7;
  if (*(_DWORD *)(v29 + 624) == -1) {
    int v30 = 0;
  }
  int v31 = v30 | v28;
  *(_DWORD *)(a2 + 4) = v31;
  int v32 = (*(_DWORD *)(v29 + 620) & 0xF) << 11;
  if (*(_DWORD *)(v29 + 620) == -1) {
    int v32 = 0;
  }
  int v33 = v31 | v32;
  *(_DWORD *)(a2 + 4) = v33;
  if (*v18 != 2)
  {
    char v27 = *(unsigned char *)(v9 + 23176 * v6 + 22284);
    if (v27) {
      char v27 = *(unsigned char *)(v10 + 2360 * (int)a3 + 616);
    }
  }
  uint64_t v133 = v9;
  int v134 = v6;
  unsigned int v34 = v33 & 0xFFFF7FFF | ((v27 & 1) << 15);
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a2 + 4) = v34 & 0xFFFCFFFF | ((*v18 & 3) << 16);
  *(_DWORD *)(a2 + 336) = 0;
  if (*v18 > 1) {
    goto LABEL_28;
  }
  if (!*(void *)(v10 + 2360 * (int)a3 + 2344)) {
    goto LABEL_28;
  }
  if (*(_DWORD *)(a1 + 11996)) {
    goto LABEL_28;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 256) + 344))(*(void *)(a1 + 256), a3);
  uint64_t v4 = a1;
  uint64_t v35 = *(void *)(a1 + 256);
  if (*(_DWORD *)(v35 + 9032)) {
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 11996) = 1;
  *(_DWORD *)(a2 + 4) |= 0x40000u;
  int v132 = 368 * a3;
  if (!*(void *)(v35 + 8856) && !*(_DWORD *)(v35 + 9008) && !*(_DWORD *)(v35 + 9012)) {
    goto LABEL_147;
  }
  uint64_t result = CAHDec::addToPatcherList(a1, (void *)(v35 + 8856), v132 + 3372, 0, 0xFFFFFFFFLL, 8, -256, 4);
  int v132 = 368 * a3;
  uint64_t v4 = a1;
  if (result) {
    return result;
  }
  if (!*(void *)(v35 + 8856))
  {
LABEL_147:
    if (!*(_DWORD *)(v35 + 9008) && !*(_DWORD *)(v35 + 9012)) {
      goto LABEL_28;
    }
  }
  uint64_t result = CAHDec::addToPatcherList(v4, (void *)(v35 + 8856), v132 + 3400, 0, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  uint64_t v4 = a1;
  if (!result)
  {
LABEL_28:
    int v36 = (unsigned int *)(v29 + 624);
    int v37 = (unsigned int *)(v29 + 620);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
    (*(void (**)(void, void))(**(void **)(v4 + 256) + 352))(*(void *)(v4 + 256), 0);
    if (*v18 > 1) {
      goto LABEL_38;
    }
    uint64_t v38 = v5 + 8456;
    if ((*v37 & 0x80000000) != 0)
    {
      uint64_t v40 = 0;
      if (*v18) {
        goto LABEL_38;
      }
    }
    else
    {
      int v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = a2 + 8;
      do
      {
        uint64_t v42 = v40;
        *(_DWORD *)(v41 + 4 * v4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v39 & 0xF0 | 0x2DC00000;
        *(_DWORD *)(v41 + 4 * v4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v39 & 0xF0 | 0x2DC00000 | *(_DWORD *)(v38 + 4 * v40) & 0xF;
        ++v40;
        v39 += 16;
      }
      while (v42 < (int)*v37);
      if (*v18) {
        goto LABEL_38;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 256) + 352))(*(void *)(a1 + 256), 1, a3);
    if ((*v36 & 0x80000000) == 0)
    {
      int v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = a2 + 4 * v40 + 8;
      do
      {
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100;
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100 | *(_DWORD *)(v38 + 4 * v44) & 0xF;
        v43 += 16;
      }
      while (v44++ < (int)*v36);
    }
LABEL_38:
    *(void *)(a2 + 128) = 0x2DD0000000000000;
    int v47 = *v18;
    if (*v18)
    {
      uint64_t v48 = a1;
      uint64_t v50 = v133;
      int v49 = v134;
      if (v47 != 1 || !*(unsigned char *)(v8 + 9856 * v7 + 49)) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v48 = a1;
      uint64_t v50 = v133;
      int v49 = v134;
      if (!*(unsigned char *)(v8 + 9856 * v7 + 50)) {
        goto LABEL_62;
      }
    }
    unsigned int v51 = 0;
    unsigned int v52 = 0;
    uint64_t v53 = v10 + 2360 * v11;
    uint64_t v54 = v8 + 9856 * v7;
    uint64_t v55 = (unsigned char *)(v54 + 50);
    int v56 = (unsigned char *)(v54 + 49);
    if (v47) {
      uint64_t v57 = v56;
    }
    else {
      uint64_t v57 = v55;
    }
    int v58 = ((*v57 & 1) << 6) | 0x2DD00000;
    *(_DWORD *)(a2 + 132) = v58;
    char v59 = *(_DWORD *)(v53 + 768);
    unsigned int v60 = v58 & 0xFFFFFFC7 | (8 * (*(_DWORD *)(v53 + 768) & 7));
    *(_DWORD *)(a2 + 132) = v60;
    unsigned __int8 v61 = (*(_DWORD *)(v53 + 772) + *(_DWORD *)(v53 + 768)) & 7;
    *(_DWORD *)(a2 + 132) = v60 & 0xFFFFFFF8 | v61;
    int v62 = 1 << (v59 & 7);
    int v63 = 1 << v61;
    do
    {
      uint64_t v64 = v51;
      if (*(unsigned char *)(v10 + 2360 * v11 + v51 + 776))
      {
        int v65 = ((v51 & 0xF) << 9) | 0x2DE04000;
        uint64_t v66 = a2 + 4 * v52;
        *(_DWORD *)(v66 + 136) = v65;
        uint64_t v67 = v10 + 2360 * v11 + 4 * v64;
        *(_DWORD *)(v66 + 136) = ((unsigned __int16)*(_DWORD *)(v67 + 808) + (_WORD)v62) & 0x1FF | v65;
        *(_DWORD *)(v66 + 232) = 770703360;
        *(_DWORD *)(v66 + 232) = *(unsigned __int16 *)(v67 + 872) | 0x2DF00000;
        ++v52;
      }
      if (*(unsigned char *)(v10 + 2360 * v11 + v64 + 792))
      {
        uint64_t v68 = 0;
        char v69 = 1;
        do
        {
          char v70 = v69;
          int v71 = ((v64 & 0xF) << 9) | (v68 << 14) | 0x2DE08000;
          uint64_t v72 = a2 + 4 * v52;
          *(_DWORD *)(v72 + 136) = v71;
          uint64_t v73 = v10 + 2360 * v11 + 8 * v64 + 4 * v68;
          *(_DWORD *)(v72 + 136) = ((unsigned __int16)*(_DWORD *)(v73 + 936) + (_WORD)v63) & 0x1FF | v71;
          *(_DWORD *)(v72 + 232) = 770703360;
          *(_DWORD *)(v72 + 232) = *(unsigned __int16 *)(v73 + 1608) | 0x2DF00000;
          ++v52;
          uint64_t v68 = 1;
          char v69 = 0;
        }
        while ((v70 & 1) != 0);
      }
      unsigned int v51 = v64 + 1;
    }
    while ((int)v64 + 1 <= *v37);
    if (!*v18)
    {
      unsigned int v74 = 0;
      do
      {
        uint64_t v75 = v74;
        if (*(unsigned char *)(v10 + 2360 * v11 + v74 + 1192))
        {
          int v76 = ((v74 & 0xF) << 9) | 0x2DE06000;
          uint64_t v77 = a2 + 4 * v52;
          *(_DWORD *)(v77 + 136) = v76;
          uint64_t v78 = v10 + 2360 * v11 + 4 * v75;
          *(_DWORD *)(v77 + 136) = ((unsigned __int16)*(_DWORD *)(v78 + 1224) + (_WORD)v62) & 0x1FF | v76;
          *(_DWORD *)(v77 + 232) = 770703360;
          *(_DWORD *)(v77 + 232) = *(unsigned __int16 *)(v78 + 1288) | 0x2DF00000;
          ++v52;
        }
        if (*(unsigned char *)(v10 + 2360 * v11 + v75 + 1208))
        {
          uint64_t v79 = 0;
          char v80 = 1;
          do
          {
            char v81 = v80;
            int v82 = ((v75 & 0xF) << 9) | (v79 << 14) | 0x2DE0A000;
            uint64_t v83 = a2 + 4 * v52;
            *(_DWORD *)(v83 + 136) = v82;
            uint64_t v84 = v10 + 2360 * v11 + 8 * v75 + 4 * v79;
            *(_DWORD *)(v83 + 136) = ((unsigned __int16)*(_DWORD *)(v84 + 1352) + (_WORD)v63) & 0x1FF | v82;
            *(_DWORD *)(v83 + 232) = 770703360;
            *(_DWORD *)(v83 + 232) = *(unsigned __int16 *)(v84 + 1736) | 0x2DF00000;
            ++v52;
            uint64_t v79 = 1;
            char v80 = 0;
          }
          while ((v81 & 1) != 0);
        }
        unsigned int v74 = v75 + 1;
      }
      while ((int)v75 + 1 <= *v36);
    }
    *(_DWORD *)(a2 + 128) = v52;
LABEL_62:
    uint64_t v85 = v8 + 9856 * v7;
    int v88 = *(unsigned __int8 *)(v85 + 48);
    int v86 = (unsigned __int8 *)(v85 + 48);
    LOBYTE(v87) = v88;
    if (v88) {
      int v87 = *(_DWORD *)(v10 + 2360 * v11 + 1876);
    }
    unsigned int v89 = *(_DWORD *)(a2 + 328) & 0xFFFFFFE0 | ((_BYTE)v87 + *((_DWORD *)v86 - 1)) & 0x1F;
    *(_DWORD *)(a2 + 328) = v89;
    int v90 = *v86;
    if (v90) {
      int v90 = *(_DWORD *)(v10 + 2360 * v11 + 1872);
    }
    unsigned int v91 = v89 & 0xFFFFFC1F | (32 * (((_BYTE)v90 + *(_DWORD *)(v8 + 9856 * v7 + 40)) & 0x1F));
    *(_DWORD *)(a2 + 328) = v91;
    int v92 = (_DWORD *)(v8 + 9856 * v7);
    int v93 = v92[7] + *(_DWORD *)(v10 + 2360 * v11 + 1868) + 26;
    *(_DWORD *)(a2 + 328) = v91 & 0xE03FF | ((v93 & 0x7F) << 10) | 0x2D900000;
    *(_DWORD *)(*(void *)(v48 + 256) + 2868) = *(_DWORD *)(v48 + 460) + (v93 << 25 >> 25);
    *(_DWORD *)(a2 + 332) = 0;
    int v94 = v92[1635] & 7;
    *(_DWORD *)(a2 + 332) = v94;
    unsigned int v95 = v94 & 0xFFFFFFC7 | (8 * (v92[1634] & 7));
    *(_DWORD *)(a2 + 332) = v95;
    int v96 = (char *)(v50 + 23176 * v49 + 10649);
    char v97 = *v96;
    if (*v96) {
      char v97 = *(unsigned char *)(v10 + 2360 * v11 + 618);
    }
    unsigned int v98 = v95 & 0xFFFFFFBF | ((v97 & 1) << 6);
    *(_DWORD *)(a2 + 332) = v98;
    if (*v96) {
      char v99 = *(unsigned char *)(v10 + 2360 * v11 + 617);
    }
    else {
      char v99 = 0;
    }
    int v100 = (v97 & 1) << 6;
    int v101 = (v99 & 1) << 7;
    unsigned int v102 = v98 & 0xFFFFFF7F | v101;
    *(_DWORD *)(a2 + 332) = v102;
    uint64_t v103 = v10 + 2360 * v11;
    uint64_t v104 = v8 + 9856 * v7;
    if (*(unsigned char *)(v103 + 1881)) {
      int v105 = (_DWORD *)(v103 + 1888);
    }
    else {
      int v105 = (_DWORD *)(v104 + 248);
    }
    unsigned int v106 = v102 & 0xFFFFF0FF | ((*v105 & 0xF) << 8);
    *(_DWORD *)(a2 + 332) = v106;
    if (*(unsigned char *)(v103 + 1881)) {
      uint64_t v107 = (_DWORD *)(v103 + 1884);
    }
    else {
      uint64_t v107 = (_DWORD *)(v104 + 244);
    }
    unsigned int v108 = v106 & 0xFFFF0FFF | ((*v107 & 0xF) << 12);
    *(_DWORD *)(a2 + 332) = v108;
    if (*(unsigned char *)(v104 + 239) && *(unsigned char *)(v103 + 1881)) {
      uint64_t v109 = (unsigned __int8 *)(v10 + 2360 * v11 + 1882);
    }
    else {
      uint64_t v109 = (unsigned __int8 *)(v8 + 9856 * v7 + 240);
    }
    int v110 = *v109;
    BOOL v111 = (v101 | v100) != 0;
    int v112 = v108 | ((v110 == 0) << 16);
    *(_DWORD *)(a2 + 332) = v112;
    if (!v110) {
      BOOL v111 = 1;
    }
    uint64_t v113 = v8 + 9856 * v7;
    if (v111) {
      int v114 = (unsigned char *)(v10 + 2360 * v11 + 1892);
    }
    else {
      int v114 = (unsigned char *)(v113 + 237);
    }
    unsigned int v115 = v112 & 0xFFFDFFFF | ((*v114 & 1) << 17);
    *(_DWORD *)(a2 + 332) = v115;
    if (*(unsigned char *)(v113 + 52)) {
      char v116 = *(unsigned char *)(v8 + 9856 * v7 + 236);
    }
    else {
      char v116 = 1;
    }
    unsigned int v117 = v115 & 0xFFFBFFFF | ((v116 & 1) << 18);
    *(_DWORD *)(a2 + 332) = v117;
    int v118 = *(unsigned __int8 *)(v50 + 23176 * v49 + 10650);
    if (*(unsigned char *)(v50 + 23176 * v49 + 10650)) {
      int v118 = *(unsigned char *)(v50 + 23176 * v49 + 10668) == 0;
    }
    *(_DWORD *)(a2 + 332) = v117 | (v118 << 19) | 0x2DA00000;
    uint64_t v119 = *(void *)(v48 + 256);
    int v120 = *(_DWORD *)(v119 + 2504);
    if (*(_DWORD *)(v119 + 2360) == 1)
    {
      unint64_t v137 = 0;
      uint64_t v138 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))
      {
        int v121 = 368 * a3;
        *(_DWORD *)(a2 + 34pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        uint64_t v122 = v138;
        if (*(void *)v138 || *(_DWORD *)(v138 + 152) || *(_DWORD *)(v138 + 156))
        {
          int v123 = v137;
          if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            int v140 = "populateSliceRegisters";
            __int16 v141 = 1024;
            int v142 = 1733;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v123 = v137;
          }
          uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v121 + 3376, v123, 0x3FFFFFFFFFFLL, 32, 1023, 4);
          if (result) {
            return result;
          }
          uint64_t v122 = v138;
          if (*(void *)v138) {
            goto LABEL_103;
          }
        }
        if (*(_DWORD *)(v122 + 152) || *(_DWORD *)(v122 + 156))
        {
LABEL_103:
          int v125 = v121 + 3380;
          int v126 = v137;
          if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            int v140 = "populateSliceRegisters";
            __int16 v141 = 1024;
            int v142 = 1734;
            int v127 = &_os_log_internal;
LABEL_120:
            _os_log_impl(&dword_223977000, v127, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v126 = v137;
            goto LABEL_121;
          }
          goto LABEL_121;
        }
        goto LABEL_122;
      }
    }
    else
    {
      unint64_t v137 = 0;
      uint64_t v138 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))
      {
        int v128 = 368 * a3;
        *(_DWORD *)(a2 + 34pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        uint64_t v122 = v138;
        if (*(void *)v138 || *(_DWORD *)(v138 + 152) || *(_DWORD *)(v138 + 156))
        {
          int v129 = v137;
          if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            int v140 = "populateSliceRegisters";
            __int16 v141 = 1024;
            int v142 = 1753;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v129 = v137;
          }
          uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v128 + 3376, v129, 0x3FFFFFFFFFFLL, 32, 1023, 4);
          if (result) {
            return result;
          }
          uint64_t v122 = v138;
          if (*(void *)v138) {
            goto LABEL_117;
          }
        }
        if (*(_DWORD *)(v122 + 152) || *(_DWORD *)(v122 + 156))
        {
LABEL_117:
          int v125 = v128 + 3380;
          int v126 = v137;
          if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            int v140 = "populateSliceRegisters";
            __int16 v141 = 1024;
            int v142 = 1754;
            int v127 = &_os_log_internal;
            goto LABEL_120;
          }
LABEL_121:
          uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v125, v126, 0xFFFFFFFFLL, 0, -1, 4);
          if (!result) {
            goto LABEL_122;
          }
          return result;
        }
LABEL_122:
        unsigned int v130 = *(_DWORD *)(v10 + 2360 * v11 + 16) - (*(_DWORD *)(v10 + 2360 * v11 + 2080) >> 3);
        *(_DWORD *)(a2 + 348) = v130;
        if (*(_DWORD *)(v119 + 2360) != 1) {
          return 0;
        }
        *(void *)(a2 + 356) = 0;
        if (*(_DWORD *)(v119 + 2640))
        {
          if ((*(unsigned char *)(v119 + 2612) & 1) == 0)
          {
LABEL_125:
            uint64_t result = 0;
            if (v130 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
              unsigned int v130 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
            }
            int v131 = (unsigned __int16)v120 | (v130 << 22);
LABEL_144:
            *(_DWORD *)(a2 + 36pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v131;
            return result;
          }
        }
        else if (!*(_DWORD *)(v119 + 2420))
        {
          goto LABEL_125;
        }
        uint64_t result = 0;
        if (v130 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
          unsigned int v130 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
        }
        int v131 = v130 | v120 & 0x10000;
        goto LABEL_144;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecTansyHevc::populateCommonRegisters(CAHDecTansyHevc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000000;
  return 0;
}

uint64_t CAHDecTansyHevc::updateCommonRegisters(CAHDecTansyHevc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

uint64_t CAHDecTansyHevc::populateSequenceRegisters(CAHDecTansyHevc *this)
{
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)*((void *)this + 33);
  int v3 = *(_DWORD *)(v1 + 8320);
  uint64_t v4 = *(void *)(v1 + 8280);
  v2[13] = 0;
  uint64_t v5 = v4 + 23176 * v3;
  __int16 v6 = (*(_DWORD *)(v5 + 3608) >> 3) - 1;
  v2[13] = v6 & 0x1FFF;
  v2[13] = ((*(_DWORD *)(v5 + 3612) << 13) + 536805376) & 0x1FFF0000 | v6 & 0x1FFF;
  v2[14] = 0;
  int v7 = *(unsigned char *)(v5 + 10648) & 1;
  v2[14] = v7;
  unsigned int v8 = v7 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v5 + 4440) & 7));
  v2[14] = v8;
  unsigned int v9 = v8 & 0xFFFFFF8F | (16 * (*(_DWORD *)(v5 + 4436) & 7));
  v2[14] = v9;
  unsigned int v10 = v9 & 0xFFFFFE7F | (((*(_DWORD *)(v5 + 4428) + *(_DWORD *)(v5 + 4432)) & 3) << 7);
  v2[14] = v10;
  unsigned int v11 = v10 & 0xFFFFF9FF | ((*(_DWORD *)(v5 + 4428) & 3) << 9);
  v2[14] = v11;
  unsigned int v12 = v11 & 0xFFFFE7FF | (((*(_DWORD *)(v5 + 4424) + *(_DWORD *)(v5 + 4420)) & 3) << 11);
  v2[14] = v12;
  unsigned int v13 = v12 & 0xFFFF9FFF | ((*(_DWORD *)(v5 + 4420) & 3) << 13);
  v2[14] = v13;
  unsigned int v14 = v13 & 0xFFF87FFF | ((*(_DWORD *)(v5 + 3640) & 0xF) << 15);
  v2[14] = v14;
  unsigned int v15 = v14 & 0xFF87FFFF | ((*(_DWORD *)(v5 + 3636) & 0xF) << 19);
  v2[14] = v15;
  unsigned int v16 = v15 & 0xFF7FFFFF | ((*(unsigned char *)(v5 + 3604) & 1) << 23);
  v2[14] = v16;
  v2[14] = v16 & 0xFCFFFFFF | ((*(_DWORD *)(v5 + 3600) & 3) << 24);
  v2[15] = 0;
  if (*(unsigned char *)(v5 + 10650))
  {
    v2[15] = 4096;
    uint64_t v17 = (_DWORD *)(v4 + 23176 * v3);
    int v18 = (v17[2666] + v17[2665]) & 3 | 0x1000;
    v2[15] = v18;
    unsigned int v19 = v18 & 0xFFFFFFF3 | (4 * (v17[2665] & 3));
    v2[15] = v19;
    unsigned int v20 = v19 & 0xFFFFFF0F | (16 * (v17[2664] & 0xF));
    v2[15] = v20;
    v2[15] = v20 & 0xFFFFF0FF | ((v17[2663] & 0xF) << 8);
  }
  v2[16] = 0;
  if (*(unsigned char *)(v4 + 23176 * v3 + 22833))
  {
    int v21 = *(unsigned char *)(v4 + 23176 * v3 + 22844) & 1;
    v2[16] = v21;
    unsigned int v22 = v21 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v4 + 23176 * v3 + 22843) & 1));
    v2[16] = v22;
    unsigned int v23 = v22 & 0xFFFFFFFB | (4 * (*(unsigned char *)(v4 + 23176 * v3 + 22842) & 1));
    v2[16] = v23;
    int v24 = v23 | (8 * (*(unsigned char *)(v4 + 23176 * v3 + 22841) == 0));
    v2[16] = v24;
    unsigned int v25 = v24 & 0xFFFFFFEF | (16 * (*(unsigned char *)(v4 + 23176 * v3 + 22840) & 1));
    v2[16] = v25;
    unsigned int v26 = v25 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v4 + 23176 * v3 + 22839) & 1));
    v2[16] = v26;
    unsigned int v27 = v26 & 0xFFFFFFBF | ((*(unsigned char *)(v4 + 23176 * v3 + 22838) & 1) << 6);
    v2[16] = v27;
    int v28 = v27 | ((*(unsigned char *)(v4 + 23176 * v3 + 22837) & 1) << 7);
    v2[16] = v28;
    int v29 = v28 | ((*(unsigned char *)(v4 + 23176 * v3 + 22836) & 1) << 8);
  }
  else
  {
    int v29 = 8;
  }
  v2[16] = v29;
  uint64_t v30 = v4 + 23176 * v3;
  v2[16] = v29 & 0xFFFFFDFF | ((*(unsigned char *)(v30 + 22285) & 1) << 9);
  if (*(unsigned char *)(v30 + 4444)) {
    CAHDecTansyHevc::copyScalingList((uint64_t)this, (uint64_t)(v2 + 17), *((void *)this + 33) + 796, *(_DWORD *)(v5 + 3600), v4 + 23176 * v3 + 4448);
  }
  return 0;
}

uint64_t CAHDecTansyHevc::getTileHdrMemInfo(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 176 * a2;
  *a3 = v3 + 528;
  a3[1] = v3 + 3344;
  return result;
}

__n128 CAHDecTansyHevc::getMVmemInfo(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1 + 176 * a2;
  long long v5 = *(_OWORD *)(v4 + 7568);
  long long v6 = *(_OWORD *)(v4 + 7600);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 7584);
  *(_OWORD *)(a3 + 32) = v6;
  *(_OWORD *)a3 = v5;
  long long v7 = *(_OWORD *)(v4 + 7616);
  long long v8 = *(_OWORD *)(v4 + 7632);
  long long v9 = *(_OWORD *)(v4 + 7664);
  *(_OWORD *)(a3 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v4 + 7648);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_OWORD *)(a3 + 64) = v8;
  __n128 result = *(__n128 *)(v4 + 7680);
  long long v11 = *(_OWORD *)(v4 + 7696);
  long long v12 = *(_OWORD *)(v4 + 7728);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v4 + 7712);
  *(_OWORD *)(a3 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v12;
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v11;
  *a4 = *(_DWORD *)(a1 + 4 * a2 + 464);
  return result;
}

uint64_t CAHDecTansyHevc::populatePictureRegisters(CAHDecTansyHevc *this)
{
  uint64_t v493 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 8320);
  int v4 = *(_DWORD *)(v2 + 8324);
  uint64_t v5 = *(void *)(v2 + 8280);
  uint64_t v6 = *(void *)(v2 + 8288);
  unsigned int v469 = *(_DWORD *)(v2 + 3068);
  unsigned int v470 = *(_DWORD *)(v2 + 9036);
  int v473 = *(_DWORD *)(v2 + 3072);
  int v7 = *(unsigned __int8 *)(v2 + 3060);
  int v8 = *(_DWORD *)(v2 + 3064);
  uint64_t v465 = *(void *)(v2 + 8392);
  int v466 = *(_DWORD *)(v2 + 3036);
  uint64_t v9 = *(void *)(v2 + 2088);
  int v461 = *(_DWORD *)(v2 + 3660);
  int v462 = *(unsigned __int8 *)(v2 + 9098);
  int v476 = *(_DWORD *)(v2 + 2644);
  uint64_t v468 = *(unsigned int *)(v2 + 8424);
  int v10 = *(unsigned __int8 *)(v2 + 8);
  long long v11 = *(_OWORD *)(v2 + 8536);
  v492[0] = *(_OWORD *)(v2 + 8520);
  v492[1] = v11;
  long long v12 = *(_OWORD *)(v2 + 8568);
  v492[2] = *(_OWORD *)(v2 + 8552);
  v492[3] = v12;
  uint64_t v459 = v9;
  uint64_t v460 = *(unsigned int *)(v2 + 8720);
  int v475 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  unsigned int v13 = (char *)this + 264;
  int v472 = *(_DWORD *)(v5 + 23176 * v3 + 4424) + *(_DWORD *)(v5 + 23176 * v3 + 4420);
  memset(v491, 0, sizeof(v491));
  memset(v490, 0, sizeof(v490));
  uint64_t v14 = *((void *)this + 33);
  (*(void (**)(void))(**((void **)this + 32) + 336))();
  uint64_t v15 = 0;
  unsigned int v16 = (unsigned __int8 *)*((void *)this + 32);
  uint64_t v17 = (const double *)(v16 + 8728);
  do
  {
    float64x2x2_t v494 = vld2q_f64(v17);
    v17 += 4;
    v491[v15] = v494.val[0];
    v490[v15++] = v494.val[1];
  }
  while (v15 != 4);
  uint64_t v18 = v6 + 9856 * v4;
  int v20 = *(unsigned __int8 *)(v18 + 52);
  unsigned int v19 = (unsigned char *)(v18 + 52);
  int v467 = v10;
  int v463 = v7;
  int v464 = v8;
  uint64_t v478 = v5;
  if (v20)
  {
    unint64_t v21 = 0;
    uint64_t v22 = v6 + 9856 * v4;
    unsigned __int16 v23 = *(_WORD *)(v22 + 56) + 1;
    uint64_t v24 = *(void *)v13;
    *(_WORD *)(*(void *)v13 + 692) = v23;
    uint64_t v25 = v22 + 9676;
    do
    {
      *(_WORD *)(v24 + 696 + 2 * v21) = *(_DWORD *)(v25 + 4 * v21);
      BOOL v26 = v21++ >= v23;
    }
    while (!v26);
    uint64_t v27 = v14;
    unint64_t v28 = 0;
    uint64_t v29 = v6 + 9856 * v4;
    unsigned __int16 v30 = *(_WORD *)(v29 + 60) + 1;
    *(_WORD *)(v24 + 694) = v30;
    int v31 = v30;
    uint64_t v32 = v29 + 9760;
    uint64_t v33 = v24 + 738;
    do
    {
      *(_WORD *)(v33 + 2 * v28) = *(_DWORD *)(v32 + 4 * v28);
      BOOL v26 = v28++ >= v30;
    }
    while (!v26);
    int v34 = v3;
  }
  else
  {
    uint64_t v27 = v14;
    uint64_t v35 = *(void *)v13;
    *(_DWORD *)(v35 + 692) = 65537;
    *(_WORD *)(v35 + 696) = 0;
    int v34 = v3;
    uint64_t v36 = v5 + 23176 * v3;
    *(_WORD *)(v35 + 698) = *(_DWORD *)(v36 + 22880);
    *(_WORD *)(v35 + 738) = 0;
    *(_WORD *)(v35 + 74pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v36 + 22888);
    int v31 = 1;
    unsigned __int16 v23 = 1;
  }
  int v37 = v16[2675];
  unsigned int v38 = v16[2674];
  if (v37 | v38)
  {
    uint64_t v39 = v478 + 23176 * v34;
    unsigned int v40 = *(_DWORD *)(v39 + 3636);
    unsigned int v41 = *(_DWORD *)(v39 + 3640);
    if (v40 > v41) {
      unsigned int v41 = v40;
    }
    unsigned int v42 = (v41 + 9) & 0xFFFFFFFE;
    if (v42 == 8)
    {
      unsigned int v51 = 1;
      int v50 = 8;
      if (!v16[2675]) {
        goto LABEL_47;
      }
    }
    else
    {
      int v43 = v16[2672];
      if (v43) {
        int v44 = 12;
      }
      else {
        int v44 = 11;
      }
      if (v43) {
        int v45 = 5;
      }
      else {
        int v45 = 4;
      }
      BOOL v46 = v43 == 0;
      if (v43) {
        int v47 = 10;
      }
      else {
        int v47 = 9;
      }
      if (v46) {
        int v48 = 2;
      }
      else {
        int v48 = 3;
      }
      if (v42 == 10)
      {
        int v49 = v48;
      }
      else
      {
        int v47 = 27;
        int v49 = 27;
      }
      if (v42 == 12) {
        int v50 = v44;
      }
      else {
        int v50 = v47;
      }
      if (v42 == 12) {
        unsigned int v51 = v45;
      }
      else {
        unsigned int v51 = v49;
      }
      if (!v37)
      {
LABEL_47:
        unsigned int v13 = (char *)this + 264;
        if (v38 && (v38 == 3 && v51 - 9 < 2 || v51 <= 0x1A && ((1 << v51) & 0x4C00000) != 0 && v38 <= 2))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "populatePictureRegisters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v51;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = v38;
            unsigned int v52 = &_os_log_internal;
            uint64_t v53 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
            goto LABEL_139;
          }
          return 0xFFFFFFFFLL;
        }
        goto LABEL_55;
      }
    }
    if (*(_DWORD *)(v478 + 23176 * v34 + 3600) && (v37 == 2 && v50 == 8 || v37 == 3 && (v50 - 9) <= 1))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v50;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v37;
        unsigned int v52 = &_os_log_internal;
        uint64_t v53 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
LABEL_139:
        int v152 = buf;
        uint32_t v153 = 24;
LABEL_140:
        _os_log_impl(&dword_223977000, v52, OS_LOG_TYPE_DEFAULT, v53, v152, v153);
      }
      return 0xFFFFFFFFLL;
    }
    goto LABEL_47;
  }
LABEL_55:
  unsigned __int16 v458 = v23;
  uint64_t v54 = v6;
  int v55 = v4;
  int v56 = v19;
  uint64_t v57 = v27;
  *(_DWORD *)(v27 + 88) = 766509056;
  uint64_t v58 = (*(uint64_t (**)(void))(**((void **)this + 32) + 216))(*((void *)this + 32));
  if (v58) {
    int v59 = (*(_DWORD *)(*((void *)this + 32) + 3092) == 2) << 13;
  }
  else {
    int v59 = 0;
  }
  unsigned int v60 = v470 >> 28;
  if (v475) {
    int v61 = 688;
  }
  else {
    int v61 = 672;
  }
  if (v476) {
    int v62 = 4160;
  }
  else {
    int v62 = 64;
  }
  unsigned int v63 = v62 & 0xFFFFFFF0 | ((v476 == 1) << 10) | v61 & 0xFFFFFFF0 | (4 * (v37 & 3)) | v38 & 3 | v59;
  unsigned int v64 = v63 | *(_DWORD *)(v57 + 88) & 0xFFFFC100;
  *(_DWORD *)(v57 + 88) = v64;
  int v65 = (unsigned char *)*((void *)this + 32);
  unsigned int v66 = v64 & 0xFFF7FFFF | ((v65[2652] & 1) << 19);
  *(_DWORD *)(v57 + 88) = v66;
  unsigned int v67 = v66 & 0xFFFBFFFF | ((v65[2653] & 1) << 18);
  *(_DWORD *)(v57 + 88) = v67;
  *(void *)(v57 + 88) = v67 & 0xFFFDFFFF | ((v65[2654] & 1) << 17);
  int v68 = v34;
  if ((v470 & 1) != 0 && *(unsigned char *)(v54 + 9856 * v55 + 53) && *(_DWORD *)(v478 + 23176 * v34 + 22888) > v60 + 1
    || (v470 & 2) != 0 && !*(unsigned char *)(v54 + 9856 * v55 + 53) && *v56 && v31 * v458 > v60 + 1)
  {
    goto LABEL_77;
  }
  if ((v470 & 0x20) == 0 || (int v69 = *(unsigned __int8 *)(v54 + 9856 * v55 + 53), *(unsigned char *)(v54 + 9856 * v55 + 53)))
  {
    int v69 = 0;
    goto LABEL_78;
  }
  if (!*v56 && v469 > v60 + 1) {
LABEL_77:
  }
    int v69 = (v473 == 0) << 27;
LABEL_78:
  *(_DWORD *)(v57 + 92) = v69;
  *(_DWORD *)(v57 + 96) = 0;
  uint64_t v70 = v478 + 23176 * v34;
  unsigned __int16 v71 = *(_DWORD *)(v70 + 3608) - 1;
  *(_DWORD *)(v57 + 96) = v71;
  int v72 = (v71 | ((unsigned __int16)*(_DWORD *)(v70 + 3612) << 16)) - 0x10000;
  *(_DWORD *)(v57 + 10pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(v57 + 104) = 0;
  *(_DWORD *)(v57 + 96) = v72;
  if (*(unsigned char *)(v54 + 9856 * v55 + 6466))
  {
    uint64_t v73 = (unsigned char *)(v54 + 9856 * v55 + 6477);
    int v74 = 32 * (*v73 & 1);
    *(_DWORD *)(v57 + 104) = v74;
    LOBYTE(v75) = *v73;
    if (*v73) {
      int v75 = *(_DWORD *)(v54 + 9856 * v55 + 6484);
    }
    unint64_t v76 = v75 & 7;
    int v77 = v76 | v74;
    *(_DWORD *)(v57 + 104) = v76 | v74;
    if (v74)
    {
      uint64_t v78 = (_DWORD *)(v54 + 9856 * v55 + 6512);
      uint64_t v79 = (unsigned int *)(v57 + 112);
      unint64_t v80 = -1;
      do
      {
        unsigned int v81 = *v79 & 0xFFFFFFE0 | *v78 & 0x1F;
        *uint64_t v79 = v81;
        *v79++ = v81 & 0xFFFFFC1F | (32 * (*(v78 - 6) & 0x1F));
        ++v80;
        ++v78;
      }
      while (v80 < v76);
    }
    int v82 = *v73;
    if (v82) {
      int v82 = *(_DWORD *)(v54 + 9856 * v55 + 6480);
    }
    int v83 = (8 * (((_BYTE)v472 - (_BYTE)v82) & 3)) | v77;
    *(_DWORD *)(v57 + 104) = v83;
    unsigned int v84 = v83 & 0xFFFFFFBF | ((*(unsigned char *)(v54 + 9856 * v55 + 6476) & 1) << 6);
    *(_DWORD *)(v57 + 104) = v84;
    unsigned int v85 = v84 & 0xFFFFFE7F | ((*(_DWORD *)(v54 + 9856 * v55 + 6472) & 3) << 7);
  }
  else
  {
    unsigned int v85 = 8 * (v472 & 3);
  }
  *(_DWORD *)(v57 + 104) = v85;
  uint64_t v86 = v54 + 9856 * v55;
  int v89 = *(unsigned __int8 *)(v86 + 34);
  int v87 = (unsigned char *)(v86 + 34);
  LOBYTE(v88) = v89;
  if (v89) {
    int v88 = *(_DWORD *)(v54 + 9856 * v55 + 36);
  }
  unsigned int v90 = v85 & 0xFFFE7FFF | ((((_BYTE)v472 - (_BYTE)v88) & 3) << 15);
  *(_DWORD *)(v57 + 104) = v90;
  uint64_t v91 = v54 + 9856 * v55;
  unsigned int v92 = v90 & 0xFFFFF1FF | ((*(_DWORD *)(v91 + 6460) & 7) << 9);
  *(_DWORD *)(v57 + 104) = v92;
  unsigned int v93 = v92 & 0xFFFFEFFF | ((*(unsigned char *)(v91 + 53) & 1) << 12);
  *(_DWORD *)(v57 + 104) = v93;
  unsigned int v94 = v93 & 0xFFFFDFFF | ((*v56 & 1) << 13);
  *(_DWORD *)(v57 + 104) = v94;
  unsigned int v95 = v94 & 0xFFFFBFFF | ((*(unsigned char *)(v91 + 51) & 1) << 14);
  *(_DWORD *)(v57 + 104) = v95;
  unsigned int v96 = v95 & 0xFFFDFFFF | ((*v87 & 1) << 17);
  *(_DWORD *)(v57 + 104) = v96;
  unsigned int v97 = v96 & 0xFFFBFFFF | ((*(unsigned char *)(v91 + 33) & 1) << 18);
  *(_DWORD *)(v57 + 104) = v97;
  unsigned int v98 = v97 & 0xFFF7FFFF | ((*(unsigned char *)(v91 + 32) & 1) << 19);
  *(_DWORD *)(v57 + 104) = v98;
  unsigned int v99 = v98 & 0xFFEFFFFF | ((*(unsigned char *)(v91 + 16) & 1) << 20);
  *(_DWORD *)(v57 + 104) = v99;
  if (v63 >> 13) {
    BOOL v100 = 0;
  }
  else {
    BOOL v100 = *(unsigned char *)(v478 + 23176 * v34 + 22284) != 0;
  }
  *(_DWORD *)(v57 + 104) = v99 & 0xFFDFFFFF | (v100 << 21);
  uint64_t v101 = v54 + 9856 * v55;
  unsigned int v102 = *(_DWORD *)(v57 + 108) & 0xFFFFFFE0 | *(_DWORD *)(v101 + 44) & 0x1F;
  *(_DWORD *)(v57 + 108) = v102;
  unsigned int v103 = v102 & 0xFFFFFC1F | (32 * (*(_DWORD *)(v101 + 40) & 0x1F));
  *(_DWORD *)(v57 + 108) = v103;
  uint64_t v104 = *((void *)this + 32);
  if (*(unsigned char *)(v104 + 12)
    && *(_DWORD *)(v478 + 23176 * v34 + 22864) == 5
    && !*v56
    && *(_DWORD *)(v478 + 23176 * v34 + 3600) == 1
    && (*(_DWORD *)(v478 + 23176 * v34 + 3636) | 2) == 2
    && (*(_DWORD *)(v478 + 23176 * v34 + 3640) | 2) == 2)
  {
    uint64_t v105 = *(void *)(v104 + 8296);
    unsigned int v106 = v103 | 0x80000000;
    *(_DWORD *)(v57 + 108) = v106;
    uint64_t v107 = v54 + 9856 * v55;
    int v108 = *(_DWORD *)(v107 + 28) + *(_DWORD *)(v105 + 1868);
    int v109 = v108 + 26;
    unsigned int v110 = v108 + 11;
    if (v109 > 51) {
      unsigned int v110 = 36;
    }
    if (v109 < 15) {
      unsigned int v110 = 0;
    }
    unsigned int v111 = v106 & 0xFFFF83FF | ((kTable_8_11_tc[v110] & 0x1F) << 10);
    *(_DWORD *)(v57 + 108) = v111;
    int v112 = *(_DWORD *)(v107 + 28) + *(_DWORD *)(v105 + 1868);
    int v113 = v112 + 26;
    unsigned int v114 = v112 + 11;
    if (v113 > 51) {
      unsigned int v114 = 36;
    }
    if (v113 < 15) {
      unsigned int v114 = 0;
    }
    *(_DWORD *)(v57 + 108) = v111 & 0xFFC07FFF | ((kTable_8_11_beta[v114] & 0x7F) << 15);
    uint64_t v115 = *((void *)this + 32);
    int v116 = 2;
  }
  else
  {
    *(_DWORD *)(v57 + 108) = v103 & 0x7FC003FF;
    uint64_t v115 = *((void *)this + 32);
    int v116 = *(unsigned __int8 *)(v115 + 12);
  }
  *(_DWORD *)(v115 + 16) = v116;
  if (*(unsigned char *)(v54 + 9856 * v55 + 252))
  {
    CAHDecTansyHevc::copyScalingList(v58, v57 + 136, *((void *)this + 33) + 1792, *(_DWORD *)(v478 + 23176 * v34 + 3600), v54 + 9856 * v55 + 256);
    int v68 = v34;
    uint64_t v115 = *((void *)this + 32);
  }
  int v117 = *(_DWORD *)(v57 + 88);
  if ((~v117 & 0xC0000) != 0)
  {
    int v122 = 0;
    int v124 = 0;
    *(_DWORD *)(v57 + 156) = 0;
    *(_DWORD *)(v57 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  else
  {
    int v118 = v13;
    int v119 = *(_DWORD *)(v115 + 2656);
    if (!v119 || !*(_DWORD *)(v115 + 2660))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v151 = *(_DWORD *)(v115 + 2660);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v119;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v151;
        unsigned int v52 = &_os_log_internal;
        uint64_t v53 = "AppleAVD: %s(): invalid stat crop width/height %d/%d";
        goto LABEL_139;
      }
      return 0xFFFFFFFFLL;
    }
    unsigned __int16 v120 = *(_DWORD *)(v115 + 2664);
    *(_WORD *)(v57 + 156) = v120;
    int v121 = *(_DWORD *)(v115 + 2668);
    int v122 = v121 << 16;
    *(_DWORD *)(v57 + 156) = v120 | ((unsigned __int16)v121 << 16);
    unsigned __int16 v123 = *(_DWORD *)(v115 + 2664) + *(_DWORD *)(v115 + 2656) - 1;
    *(_WORD *)(v57 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v123;
    int v124 = (v123 | ((unsigned __int16)(*(_WORD *)(v115 + 2660) + *(_WORD *)(v115 + 2668)) << 16)) - 0x10000;
    *(_DWORD *)(v57 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v124;
    unsigned int v13 = v118;
  }
  if (v473) {
    int v125 = 7340080;
  }
  else {
    int v125 = 3145776;
  }
  *(_DWORD *)(v57 + 164) = v125;
  if (!*(unsigned char *)(*((void *)this + 32) + 3004))
  {
    unsigned __int16 v126 = *(_DWORD *)(v70 + 3608) - 1;
    *(_DWORD *)(v57 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v124 & 0xFFFF0000 | v126;
    int v127 = (*(_DWORD *)(v70 + 3612) << 16) - 0x10000;
    *(_DWORD *)(v57 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v127 & 0xFFFF0000 | v126;
    if (*(unsigned char *)(v478 + 23176 * v68 + 3616))
    {
      if ((v117 & 0x800) != 0)
      {
        uint64_t v128 = v478 + 23176 * v68;
        unsigned __int16 v129 = *(_DWORD *)(v128 + 3620) * *(_DWORD *)(v128 + 22852);
        *(_DWORD *)(v57 + 156) = v122 | v129;
        *(_DWORD *)(v57 + 156) = v129 | ((unsigned __int16)(*(_WORD *)(v128 + 22856) * *(_DWORD *)(v128 + 3628)) << 16);
        unsigned __int16 v130 = *(_DWORD *)(v70 + 3608) + ~(*(_DWORD *)(v128 + 3624) * *(_DWORD *)(v128 + 22852));
        *(_DWORD *)(v57 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v130 | v127;
        *(_DWORD *)(v57 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v130 | ((unsigned __int16)(*(_WORD *)(v70 + 3612)
                                                          + ~(*(_WORD *)(v128 + 3632) * *(_WORD *)(v128 + 22856))) << 16);
      }
    }
  }
  int v131 = v68;
  uint64_t v132 = 0;
  uint64_t v133 = (char *)this + 6160;
  do
  {
    *(_DWORD *)(*(void *)v13 + v132 + 168) = 0;
    uint64_t v134 = *(void *)v13 + v132;
    int v135 = *(_DWORD *)(v134 + 168);
    *(_DWORD *)(v134 + 168) = 0;
    *(_DWORD *)(*(void *)v13 + v132 + 168) ^= 0xFFFFFF00;
    uint64_t v136 = *(void *)v13 + v132;
    int v137 = *(_DWORD *)(v136 + 168);
    *(_DWORD *)(v136 + 168) = v135;
    if (*(void *)v133 || *((_DWORD *)v133 + 38) || *((_DWORD *)v133 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v133, (int)v132 + 168, 0, 0xFFFFFFFFLL, 8, v137, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v132 + 196) = 0;
    *(_DWORD *)(*((void *)this + 33) + v132 + 196) = *(_DWORD *)(*((void *)this + 33) + v132 + 196) & 0x800001FF | (((*((_DWORD *)this + 2996) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v132 + 464) = 0;
    uint64_t v139 = *((void *)this + 33) + v132;
    int v140 = *(_DWORD *)(v139 + 464);
    *(_DWORD *)(v139 + 464) = 0;
    *(_DWORD *)(*((void *)this + 33) + v132 + 464) ^= 0x3FFu;
    uint64_t v141 = *((void *)this + 33) + v132;
    int v142 = *(_DWORD *)(v141 + 464);
    *(_DWORD *)(v141 + 464) = v140;
    if (*(void *)v133 || *((_DWORD *)v133 + 38) || *((_DWORD *)v133 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v133, (int)v132 + 464, 0, 0x3FFFFFFFFFFLL, 32, v142, 4);
      if (result) {
        return result;
      }
    }
    v132 += 4;
    v133 += 176;
  }
  while (v132 != 28);
  *(_DWORD *)(*(void *)v13 + 224) = 0;
  *(_DWORD *)(*(void *)v13 + 492) = 0;
  if ((*(unsigned char *)(v57 + 90) & 8) != 0)
  {
    uint64_t v143 = *((void *)this + 33);
    uint64_t v144 = *(void *)(*((void *)this + 32) + 2680);
    long long v488 = 0u;
    long long v489 = 0u;
    long long v486 = 0u;
    long long v487 = 0u;
    long long v484 = 0u;
    long long v485 = 0u;
    long long v482 = 0u;
    long long v483 = 0u;
    long long v481 = 0u;
    memset(buf, 0, sizeof(buf));
    int v145 = (*(_DWORD *)(v143 + 16) & 0xF) << 9;
    *(void *)buf = v144;
    int v146 = *(_DWORD *)(v143 + 224);
    *(_DWORD *)(v143 + 224) = 0;
    *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFF00;
    uint64_t v147 = *((void *)this + 33);
    int v148 = *(_DWORD *)(v147 + 224);
    *(_DWORD *)(v147 + 224) = v146;
    if (v144)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 224, v145, 0xFFFFFFFFLL, 8, v148, 4);
      if (result) {
        return result;
      }
      uint64_t v149 = *(void *)buf;
      int v150 = DWORD2(v488);
      LODWORD(v144) = HIDWORD(v488);
    }
    else
    {
      int v150 = 0;
      uint64_t v149 = 0;
    }
    *(_DWORD *)(*(void *)v13 + 492) = 0;
    int v154 = *(_DWORD *)(*(void *)v13 + 492);
    *(_DWORD *)(*(void *)v13 + 492) = 0;
    *(_DWORD *)(*(void *)v13 + 492) ^= 0x3FFu;
    int v155 = *(_DWORD *)(*(void *)v13 + 492);
    *(_DWORD *)(*(void *)v13 + 492) = v154;
    if (v149 || v150 || v144)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 492, v145, 0x3FFFFFFFFFFLL, 32, v155, 4);
      if (result) {
        return result;
      }
    }
  }
  uint64_t v156 = v57;
  int v157 = v13;
  *(_DWORD *)(*((void *)this + 33) + 228) = 0;
  uint64_t v158 = *((void *)this + 33);
  int v159 = *(_DWORD *)(v158 + 228);
  *(_DWORD *)(v158 + 228) = 0;
  *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFF00;
  uint64_t v160 = *((void *)this + 33);
  int v161 = *(_DWORD *)(v160 + 228);
  *(_DWORD *)(v160 + 228) = v159;
  if (*((void *)this + 1298) || *((_DWORD *)this + 2634) || *((_DWORD *)this + 2635))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1298, 228, 0, 0xFFFFFFFFLL, 8, v161, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 496) = 0;
  int v162 = *(_DWORD *)(*(void *)v13 + 496);
  *(_DWORD *)(*(void *)v13 + 496) = 0;
  *(_DWORD *)(*(void *)v13 + 496) ^= 0x3FFu;
  int v163 = *(_DWORD *)(*(void *)v13 + 496);
  *(_DWORD *)(*(void *)v13 + 496) = v162;
  if (*((void *)this + 1298) || *((_DWORD *)this + 2634) || *((_DWORD *)this + 2635))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1298, 496, 0, 0x3FFFFFFFFFFLL, 32, v163, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 232) = 0;
  uint64_t v164 = *((void *)this + 33);
  int v165 = *(_DWORD *)(v164 + 232);
  *(_DWORD *)(v164 + 232) = 0;
  *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFF00;
  uint64_t v166 = *((void *)this + 33);
  int v167 = *(_DWORD *)(v166 + 232);
  *(_DWORD *)(v166 + 232) = v165;
  if (*((void *)this + 1320) || *((_DWORD *)this + 2678) || *((_DWORD *)this + 2679))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1320, 232, 0, 0xFFFFFFFFLL, 8, v167, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 50pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v168 = *(_DWORD *)(*(void *)v13 + 500);
  *(_DWORD *)(*(void *)v13 + 50pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*(void *)v13 + 500) ^= 0x3FFu;
  int v169 = *(_DWORD *)(*(void *)v13 + 500);
  *(_DWORD *)(*(void *)v13 + 50pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v168;
  if (*((void *)this + 1320) || *((_DWORD *)this + 2678) || *((_DWORD *)this + 2679))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1320, 500, 0, 0x3FFFFFFFFFFLL, 32, v169, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 236) = 0;
  uint64_t v170 = *((void *)this + 33);
  int v171 = *(_DWORD *)(v170 + 236);
  *(_DWORD *)(v170 + 236) = 0;
  *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFF00;
  uint64_t v172 = *((void *)this + 33);
  int v173 = *(_DWORD *)(v172 + 236);
  *(_DWORD *)(v172 + 236) = v171;
  if (*((void *)this + 1342) || *((_DWORD *)this + 2722) || *((_DWORD *)this + 2723))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1342, 236, 0, 0xFFFFFFFFLL, 8, v173, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 504) = 0;
  int v174 = *(_DWORD *)(*(void *)v13 + 504);
  *(_DWORD *)(*(void *)v13 + 504) = 0;
  *(_DWORD *)(*(void *)v13 + 504) ^= 0x3FFu;
  int v175 = *(_DWORD *)(*(void *)v13 + 504);
  *(_DWORD *)(*(void *)v13 + 504) = v174;
  if (*((void *)this + 1342) || *((_DWORD *)this + 2722) || *((_DWORD *)this + 2723))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1342, 504, 0, 0x3FFFFFFFFFFLL, 32, v175, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v176 = *((void *)this + 33);
  int v177 = *(_DWORD *)(v176 + 240);
  *(_DWORD *)(v176 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFF00;
  uint64_t v178 = *((void *)this + 33);
  int v179 = *(_DWORD *)(v178 + 240);
  *(_DWORD *)(v178 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v177;
  if (*((void *)this + 1364) || *((_DWORD *)this + 2766) || *((_DWORD *)this + 2767))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1364, 240, 0, 0xFFFFFFFFLL, 8, v179, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 508) = 0;
  int v180 = *(_DWORD *)(*(void *)v13 + 508);
  *(_DWORD *)(*(void *)v13 + 508) = 0;
  *(_DWORD *)(*(void *)v13 + 508) ^= 0x3FFu;
  int v181 = *(_DWORD *)(*(void *)v13 + 508);
  *(_DWORD *)(*(void *)v13 + 508) = v180;
  if (*((void *)this + 1364) || *((_DWORD *)this + 2766) || *((_DWORD *)this + 2767))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1364, 508, 0, 0x3FFFFFFFFFFLL, 32, v181, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 244) = 0;
  uint64_t v182 = *((void *)this + 33);
  int v183 = *(_DWORD *)(v182 + 244);
  *(_DWORD *)(v182 + 244) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFF00;
  uint64_t v184 = *((void *)this + 33);
  int v185 = *(_DWORD *)(v184 + 244);
  *(_DWORD *)(v184 + 244) = v183;
  if (*((void *)this + 1386) || *((_DWORD *)this + 2810) || *((_DWORD *)this + 2811))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1386, 244, 0, 0xFFFFFFFFLL, 8, v185, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 512) = 0;
  int v186 = *(_DWORD *)(*(void *)v13 + 512);
  *(_DWORD *)(*(void *)v13 + 512) = 0;
  *(_DWORD *)(*(void *)v13 + 512) ^= 0x3FFu;
  int v187 = *(_DWORD *)(*(void *)v13 + 512);
  *(_DWORD *)(*(void *)v13 + 512) = v186;
  if (*((void *)this + 1386) || *((_DWORD *)this + 2810) || *((_DWORD *)this + 2811))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1386, 512, 0, 0x3FFFFFFFFFFLL, 32, v187, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 268) = 0;
  *(_DWORD *)(*((void *)this + 33) + 536) = 0;
  if (*(_DWORD *)(*((void *)this + 32) + 16) == 2)
  {
    uint64_t v188 = *((void *)this + 33);
    int v189 = *(_DWORD *)(v188 + 268);
    *(_DWORD *)(v188 + 268) = 0;
    *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFF00;
    uint64_t v190 = *((void *)this + 33);
    int v191 = *(_DWORD *)(v190 + 268);
    *(_DWORD *)(v190 + 268) = v189;
    if (*((void *)this + 1474) || *((_DWORD *)this + 2986) || *((_DWORD *)this + 2987))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1474, 268, 0, 0xFFFFFFFFLL, 8, v191, 4);
      if (result) {
        return result;
      }
    }
    int v192 = *(_DWORD *)(*(void *)v13 + 536);
    *(_DWORD *)(*(void *)v13 + 536) = 0;
    *(_DWORD *)(*(void *)v13 + 536) ^= 0x3FFu;
    int v193 = *(_DWORD *)(*(void *)v13 + 536);
    *(_DWORD *)(*(void *)v13 + 536) = v192;
    if (*((void *)this + 1474) || *((_DWORD *)this + 2986) || *((_DWORD *)this + 2987))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1474, 536, 0, 0x3FFFFFFFFFFLL, 32, v193, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 516) = 0;
  uint64_t v194 = *((void *)this + 33);
  int v195 = *(_DWORD *)(v194 + 248);
  *(_DWORD *)(v194 + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFF00;
  uint64_t v196 = *((void *)this + 33);
  int v197 = *(_DWORD *)(v196 + 248);
  *(_DWORD *)(v196 + 248) = v195;
  if (*((void *)this + 1408) || *((_DWORD *)this + 2854) || *((_DWORD *)this + 2855))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1408, 248, 0, 0xFFFFFFFFLL, 8, v197, 4);
    if (result) {
      return result;
    }
  }
  int v198 = *(_DWORD *)(*(void *)v13 + 516);
  *(_DWORD *)(*(void *)v13 + 516) = 0;
  *(_DWORD *)(*(void *)v13 + 516) ^= 0x3FFu;
  int v199 = *(_DWORD *)(*(void *)v13 + 516);
  *(_DWORD *)(*(void *)v13 + 516) = v198;
  if (*((void *)this + 1408) || *((_DWORD *)this + 2854) || *((_DWORD *)this + 2855))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1408, 516, 0, 0x3FFFFFFFFFFLL, 32, v199, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
  uint64_t v200 = *((void *)this + 33);
  int v201 = *(_DWORD *)(v200 + 252);
  *(_DWORD *)(v200 + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFF00;
  uint64_t v202 = *((void *)this + 33);
  int v203 = *(_DWORD *)(v202 + 252);
  *(_DWORD *)(v202 + 252) = v201;
  if (*((void *)this + 924) || *((_DWORD *)this + 1886) || *((_DWORD *)this + 1887))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 924, 252, 0, 0xFFFFFFFFLL, 8, v203, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v204 = *(_DWORD *)(*(void *)v13 + 520);
  *(_DWORD *)(*(void *)v13 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*(void *)v13 + 520) ^= 0x3FFu;
  int v205 = *(_DWORD *)(*(void *)v13 + 520);
  *(_DWORD *)(*(void *)v13 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v204;
  if (*((void *)this + 924) || *((_DWORD *)this + 1886) || *((_DWORD *)this + 1887))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 924, 520, 0, 0x3FFFFFFFFFFLL, 32, v205, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 256) = 0;
  uint64_t v206 = *((void *)this + 33);
  int v207 = *(_DWORD *)(v206 + 256);
  *(_DWORD *)(v206 + 256) = 0;
  *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFF00;
  uint64_t v208 = *((void *)this + 33);
  int v209 = *(_DWORD *)(v208 + 256);
  *(_DWORD *)(v208 + 256) = v207;
  uint64_t v210 = (void *)((char *)this + 176 * v468 + 7568);
  if (*v210 || *((_DWORD *)this + 44 * v468 + 1930) || *((_DWORD *)this + 44 * v468 + 1931))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v468 + 946, 256, 0, 0xFFFFFFFFLL, 8, v209, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 524) = 0;
  int v211 = *(_DWORD *)(*(void *)v13 + 524);
  *(_DWORD *)(*(void *)v13 + 524) = 0;
  *(_DWORD *)(*(void *)v13 + 524) ^= 0x3FFu;
  int v212 = *(_DWORD *)(*(void *)v13 + 524);
  *(_DWORD *)(*(void *)v13 + 524) = v211;
  if (*v210 || *((_DWORD *)this + 44 * v468 + 1930) || *((_DWORD *)this + 44 * v468 + 1931))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v210, 524, 0, 0x3FFFFFFFFFFLL, 32, v212, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v213 = *((void *)this + 33);
  int v214 = *(_DWORD *)(v213 + 260);
  *(_DWORD *)(v213 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFF00;
  uint64_t v215 = *((void *)this + 33);
  int v216 = *(_DWORD *)(v215 + 260);
  *(_DWORD *)(v215 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v214;
  if (*((void *)this + 1430) || *((_DWORD *)this + 2898) || *((_DWORD *)this + 2899))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1430, 260, 0, 0xFFFFFFFFLL, 8, v216, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 528) = 0;
  int v217 = *(_DWORD *)(*(void *)v13 + 528);
  *(_DWORD *)(*(void *)v13 + 528) = 0;
  *(_DWORD *)(*(void *)v13 + 528) ^= 0x3FFu;
  int v218 = *(_DWORD *)(*(void *)v13 + 528);
  *(_DWORD *)(*(void *)v13 + 528) = v217;
  if (*((void *)this + 1430) || *((_DWORD *)this + 2898) || *((_DWORD *)this + 2899))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1430, 528, 0, 0x3FFFFFFFFFFLL, 32, v218, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 264) = 0;
  uint64_t v219 = *((void *)this + 33);
  int v220 = *(_DWORD *)(v219 + 264);
  *(_DWORD *)(v219 + 264) = 0;
  *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFF00;
  uint64_t v221 = *((void *)this + 33);
  int v222 = *(_DWORD *)(v221 + 264);
  *(_DWORD *)(v221 + 264) = v220;
  if (*((void *)this + 1452) || *((_DWORD *)this + 2942) || *((_DWORD *)this + 2943))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1452, 264, 0, 0xFFFFFFFFLL, 8, v222, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v13 + 532) = 0;
  int v223 = *(_DWORD *)(*(void *)v13 + 532);
  *(_DWORD *)(*(void *)v13 + 532) = 0;
  *(_DWORD *)(*(void *)v13 + 532) ^= 0x3FFu;
  int v224 = *(_DWORD *)(*(void *)v13 + 532);
  *(_DWORD *)(*(void *)v13 + 532) = v223;
  if (*((void *)this + 1452) || *((_DWORD *)this + 2942) || *((_DWORD *)this + 2943))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1452, 532, 0, 0x3FFFFFFFFFFLL, 32, v224, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 272) = 0;
  *(_DWORD *)(*((void *)this + 33) + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 276) = 0;
  *(_DWORD *)(*((void *)this + 33) + 544) = 0;
  *(_DWORD *)(*((void *)this + 33) + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 548) = 0;
  *(_DWORD *)(*((void *)this + 33) + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 552) = 0;
  uint64_t v225 = *((void *)this + 33);
  if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
  {
    int v226 = *(_DWORD *)(v225 + 276);
    *(_DWORD *)(v225 + 276) = 0;
    *(_DWORD *)(*(void *)v13 + 276) ^= 0xFFFFFF80;
    int v227 = *(_DWORD *)(*(void *)v13 + 276);
    *(_DWORD *)(*(void *)v13 + 276) = v226;
    int v229 = (void *)(v459 + 8);
    uint64_t v228 = *(void *)(v459 + 8);
    if (v462)
    {
      if (v228 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v459 + 8), 276, *(_DWORD *)(v459 + 68), 0xFFFFFFFFLL, 7, v227, 4);
        if (result) {
          return result;
        }
      }
      int v230 = *(_DWORD *)(*(void *)v13 + 544);
      *(_DWORD *)(*(void *)v13 + 544) = 0;
      *(_DWORD *)(*(void *)v13 + 544) ^= 0x3FFu;
      int v231 = *(_DWORD *)(*(void *)v13 + 544);
      *(_DWORD *)(*(void *)v13 + 544) = v230;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 544, *(_DWORD *)(v459 + 68), 0x3FFFFFFFFFFLL, 32, v231, 4);
        if (result) {
          return result;
        }
      }
      int v232 = *(_DWORD *)(*(void *)v13 + 272);
      *(_DWORD *)(*(void *)v13 + 272) = 0;
      *(_DWORD *)(*(void *)v13 + 272) ^= 0xFFFFFF80;
      int v233 = *(_DWORD *)(*(void *)v13 + 272);
      *(_DWORD *)(*(void *)v13 + 272) = v232;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 272, *(_DWORD *)(v459 + 80), 0xFFFFFFFFLL, 7, v233, 4);
        if (result) {
          return result;
        }
      }
      int v234 = *(_DWORD *)(*(void *)v13 + 540);
      *(_DWORD *)(*(void *)v13 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*(void *)v13 + 540) ^= 0x3FFu;
      int v235 = *(_DWORD *)(*(void *)v13 + 540);
      *(_DWORD *)(*(void *)v13 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v234;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 540, *(_DWORD *)(v459 + 80), 0x3FFFFFFFFFFLL, 32, v235, 4);
        if (result) {
          return result;
        }
      }
      if (v466)
      {
        int v236 = *(_DWORD *)(*(void *)v13 + 284);
        *(_DWORD *)(*(void *)v13 + 284) = 0;
        *(_DWORD *)(*(void *)v13 + 284) ^= 0xFFFFFF80;
        int v237 = *(_DWORD *)(*(void *)v13 + 284);
        *(_DWORD *)(*(void *)v13 + 284) = v236;
        if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, 284, *(_DWORD *)(v465 + 56), 0xFFFFFFFFLL, 7, v237, 4);
          if (result) {
            return result;
          }
        }
        int v238 = *(_DWORD *)(*(void *)v13 + 552);
        *(_DWORD *)(*(void *)v13 + 552) = 0;
        *(_DWORD *)(*(void *)v13 + 552) ^= 0x3FFu;
        int v239 = *(_DWORD *)(*(void *)v13 + 552);
        *(_DWORD *)(*(void *)v13 + 552) = v238;
        if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, 552, *(_DWORD *)(v465 + 56), 0x3FFFFFFFFFFLL, 32, v239, 4);
          if (result) {
            return result;
          }
        }
        int v240 = *(_DWORD *)(*(void *)v13 + 280);
        *(_DWORD *)(*(void *)v13 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*(void *)v13 + 280) ^= 0xFFFFFF80;
        int v241 = *(_DWORD *)(*(void *)v13 + 280);
        *(_DWORD *)(*(void *)v13 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v240;
        if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, 280, *(_DWORD *)(v465 + 68), 0xFFFFFFFFLL, 7, v241, 4);
          if (result) {
            return result;
          }
        }
        int v242 = *(_DWORD *)(*(void *)v13 + 548);
        *(_DWORD *)(*(void *)v13 + 548) = 0;
        *(_DWORD *)(*(void *)v13 + 548) ^= 0x3FFu;
        int v243 = *(_DWORD *)(*(void *)v13 + 548);
        *(_DWORD *)(*(void *)v13 + 548) = v242;
        if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
        {
          int v244 = (void *)v465;
          int v245 = *(_DWORD *)(v465 + 68);
          int v246 = this;
LABEL_336:
          int v268 = 548;
LABEL_337:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v246, v244, v268, v245, 0x3FFFFFFFFFFLL, 32, v243, 4);
          if (result) {
            return result;
          }
        }
      }
    }
    else
    {
      if (v228 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v459 + 8), 276, *(_DWORD *)(v459 + 60), 0xFFFFFFFFLL, 7, v227, 4);
        if (result) {
          return result;
        }
      }
      int v269 = *(_DWORD *)(*(void *)v13 + 284);
      *(_DWORD *)(*(void *)v13 + 284) = 0;
      *(_DWORD *)(*(void *)v13 + 284) ^= 0xFFFFFF80;
      int v270 = *(_DWORD *)(*(void *)v13 + 284);
      *(_DWORD *)(*(void *)v13 + 284) = v269;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 284, *(_DWORD *)(v459 + 64), 0xFFFFFFFFLL, 7, v270, 4);
        if (result) {
          return result;
        }
      }
      int v271 = *(_DWORD *)(*(void *)v13 + 272);
      *(_DWORD *)(*(void *)v13 + 272) = 0;
      *(_DWORD *)(*(void *)v13 + 272) ^= 0xFFFFFF80;
      int v272 = *(_DWORD *)(*(void *)v13 + 272);
      *(_DWORD *)(*(void *)v13 + 272) = v271;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 272, *(_DWORD *)(v459 + 72), 0xFFFFFFFFLL, 7, v272, 4);
        if (result) {
          return result;
        }
      }
      int v273 = *(_DWORD *)(*(void *)v13 + 280);
      *(_DWORD *)(*(void *)v13 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*(void *)v13 + 280) ^= 0xFFFFFF80;
      int v274 = *(_DWORD *)(*(void *)v13 + 280);
      *(_DWORD *)(*(void *)v13 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v273;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 280, *(_DWORD *)(v459 + 76), 0xFFFFFFFFLL, 7, v274, 4);
        if (result) {
          return result;
        }
      }
      int v275 = *(_DWORD *)(*(void *)v13 + 544);
      *(_DWORD *)(*(void *)v13 + 544) = 0;
      *(_DWORD *)(*(void *)v13 + 544) ^= 0x3FFu;
      int v276 = *(_DWORD *)(*(void *)v13 + 544);
      *(_DWORD *)(*(void *)v13 + 544) = v275;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 544, *(_DWORD *)(v459 + 60), 0x3FFFFFFFFFFLL, 32, v276, 4);
        if (result) {
          return result;
        }
      }
      int v277 = *(_DWORD *)(*(void *)v13 + 552);
      *(_DWORD *)(*(void *)v13 + 552) = 0;
      *(_DWORD *)(*(void *)v13 + 552) ^= 0x3FFu;
      int v278 = *(_DWORD *)(*(void *)v13 + 552);
      *(_DWORD *)(*(void *)v13 + 552) = v277;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 552, *(_DWORD *)(v459 + 64), 0x3FFFFFFFFFFLL, 32, v278, 4);
        if (result) {
          return result;
        }
      }
      int v279 = *(_DWORD *)(*(void *)v13 + 540);
      *(_DWORD *)(*(void *)v13 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*(void *)v13 + 540) ^= 0x3FFu;
      int v280 = *(_DWORD *)(*(void *)v13 + 540);
      *(_DWORD *)(*(void *)v13 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v279;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v229, 540, *(_DWORD *)(v459 + 72), 0x3FFFFFFFFFFLL, 32, v280, 4);
        if (result) {
          return result;
        }
      }
      int v281 = *(_DWORD *)(*(void *)v13 + 548);
      *(_DWORD *)(*(void *)v13 + 548) = 0;
      *(_DWORD *)(*(void *)v13 + 548) ^= 0x3FFu;
      int v243 = *(_DWORD *)(*(void *)v13 + 548);
      *(_DWORD *)(*(void *)v13 + 548) = v281;
      if (*v229 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
      {
        int v245 = *(_DWORD *)(v459 + 76);
        int v246 = this;
        int v244 = (void *)(v459 + 8);
        goto LABEL_336;
      }
    }
  }
  else
  {
    int v247 = *(_DWORD *)(v225 + 272);
    *(_DWORD *)(v225 + 272) = 0;
    *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFF80;
    uint64_t v248 = *((void *)this + 33);
    int v249 = *(_DWORD *)(v248 + 272);
    *(_DWORD *)(v248 + 272) = v247;
    uint64_t v250 = (void *)((char *)this + 176 * v468 + 528);
    if (*v250 || *((_DWORD *)this + 44 * v468 + 170) || *((_DWORD *)this + 44 * v468 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v468 + 66, 272, 0, 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    int v251 = *(_DWORD *)(*(void *)v13 + 540);
    *(_DWORD *)(*(void *)v13 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*(void *)v13 + 540) ^= 0x3FFu;
    int v252 = *(_DWORD *)(*(void *)v13 + 540);
    *(_DWORD *)(*(void *)v13 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v251;
    if (*v250 || *((_DWORD *)this + 44 * v468 + 170) || *((_DWORD *)this + 44 * v468 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v250, 540, 0, 0x3FFFFFFFFFFLL, 32, v252, 4);
      if (result) {
        return result;
      }
    }
    int v253 = *(_DWORD *)(*(void *)v13 + 276);
    *(_DWORD *)(*(void *)v13 + 276) = 0;
    *(_DWORD *)(*(void *)v13 + 276) ^= 0xFFFFFF80;
    int v254 = *(_DWORD *)(*(void *)v13 + 276);
    *(_DWORD *)(*(void *)v13 + 276) = v253;
    int v255 = (void *)(v459 + 8);
    if (*(void *)(v459 + 8) || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v459 + 8), 276, *(_DWORD *)(v459 + 60), 0xFFFFFFFFLL, 7, v254, 4);
      if (result) {
        return result;
      }
    }
    int v256 = *(_DWORD *)(*(void *)v13 + 544);
    *(_DWORD *)(*(void *)v13 + 544) = 0;
    *(_DWORD *)(*(void *)v13 + 544) ^= 0x3FFu;
    int v257 = *(_DWORD *)(*(void *)v13 + 544);
    *(_DWORD *)(*(void *)v13 + 544) = v256;
    if (*v255 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v255, 544, *(_DWORD *)(v459 + 60), 0x3FFFFFFFFFFLL, 32, v257, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v258 = *((void *)this + 33);
    int v259 = *(_DWORD *)(v258 + 280);
    *(_DWORD *)(v258 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + 280) ^= 0xFFFFFF80;
    uint64_t v260 = *((void *)this + 33);
    int v261 = *(_DWORD *)(v260 + 280);
    *(_DWORD *)(v260 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v259;
    uint64_t v262 = (void *)((char *)this + 176 * v468 + 3344);
    if (*v262 || *((_DWORD *)this + 44 * v468 + 874) || *((_DWORD *)this + 44 * v468 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v468 + 418, 280, 0, 0xFFFFFFFFLL, 7, v261, 4);
      if (result) {
        return result;
      }
    }
    int v263 = *(_DWORD *)(*(void *)v157 + 548);
    *(_DWORD *)(*(void *)v157 + 548) = 0;
    *(_DWORD *)(*(void *)v157 + 548) ^= 0x3FFu;
    int v264 = *(_DWORD *)(*(void *)v157 + 548);
    *(_DWORD *)(*(void *)v157 + 548) = v263;
    if (*v262 || *((_DWORD *)this + 44 * v468 + 874) || *((_DWORD *)this + 44 * v468 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v262, 548, 0, 0x3FFFFFFFFFFLL, 32, v264, 4);
      if (result) {
        return result;
      }
    }
    int v265 = *(_DWORD *)(*(void *)v157 + 284);
    *(_DWORD *)(*(void *)v157 + 284) = 0;
    *(_DWORD *)(*(void *)v157 + 284) ^= 0xFFFFFF80;
    int v266 = *(_DWORD *)(*(void *)v157 + 284);
    *(_DWORD *)(*(void *)v157 + 284) = v265;
    if (*v255 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v255, 284, *(_DWORD *)(v459 + 64), 0xFFFFFFFFLL, 7, v266, 4);
      if (result) {
        return result;
      }
    }
    int v267 = *(_DWORD *)(*(void *)v157 + 552);
    *(_DWORD *)(*(void *)v157 + 552) = 0;
    *(_DWORD *)(*(void *)v157 + 552) ^= 0x3FFu;
    int v243 = *(_DWORD *)(*(void *)v157 + 552);
    *(_DWORD *)(*(void *)v157 + 552) = v267;
    if (*v255 || *(_DWORD *)(v459 + 160) || *(_DWORD *)(v459 + 164))
    {
      int v245 = *(_DWORD *)(v459 + 64);
      int v246 = this;
      int v244 = (void *)(v459 + 8);
      int v268 = 552;
      goto LABEL_337;
    }
  }
  if (!(*(_DWORD *)(v156 + 88) & 0x2000 | v460))
  {
    *(_DWORD *)(v156 + 88) |= 0x2000u;
    *((_DWORD *)this + v468 + 116) = 1;
    *(_DWORD *)(*((void *)this + 33) + 288) = 0;
    goto LABEL_454;
  }
  *((_DWORD *)this + v468 + 116) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) = 0;
  if (v460)
  {
    uint64_t v282 = 0;
    unsigned int v283 = (uint64_t *)v492;
    v474 = (void **)v491;
    v471 = (void **)v490;
    do
    {
      uint64_t v284 = *v283;
      if (!*v283 || !*(void *)(v284 + 48)) {
        return 0xFFFFFFFFLL;
      }
      int v285 = v475;
      if (v475)
      {
        uint64_t v286 = *(unsigned int *)(v284 + 44);
        *(void *)buf = 0;
        if (((*(uint64_t (**)(void, uint64_t, uint8_t *))(**((void **)this + 32) + 304))(*((void *)this + 32), v286, buf) & 1) == 0)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          __int16 v479 = 0;
          unsigned int v52 = &_os_log_internal;
          uint64_t v53 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
          int v152 = (uint8_t *)&v479;
          uint32_t v153 = 2;
          goto LABEL_140;
        }
        *(void *)(v284 + 48) = *(void *)buf + 8;
        int v285 = 0x2000000;
      }
      *(_DWORD *)(*((void *)this + 33) + v282 + 288) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 288) = *(_DWORD *)(*((void *)this + 33) + v282 + 288) & 0xFFFFFFF | ((v460 << 28) - 0x10000000);
      *(_DWORD *)(*((void *)this + 33) + v282 + 288) &= 0xF3FFFFFF;
      *(_DWORD *)(*((void *)this + 33) + v282 + 288) = *(_DWORD *)(*((void *)this + 33) + v282 + 288) & 0xFDFFFFFF | v285;
      *(_DWORD *)(*((void *)this + 33) + v282 + 288) |= 0x1000000u;
      int v287 = v461 - *(_DWORD *)(v284 + 12);
      int v288 = v287 & 0x1FFFF;
      if (v287 < -32768) {
        int v288 = 98304;
      }
      if (v287 <= 0x8000) {
        int v289 = v288;
      }
      else {
        int v289 = 0x8000;
      }
      *(_DWORD *)(*((void *)this + 33) + v282 + 288) = *(_DWORD *)(*((void *)this + 33) + v282 + 288) & 0xFFFE0000 | v289;
      *(_DWORD *)(*((void *)this + 33) + v282 + 288) = *(_DWORD *)(*((void *)this + 33) + v282 + 288) & 0xFFFDFFFF | ((*(_DWORD *)(v284 + 20) == 2) << 17);
      *(_DWORD *)(*((void *)this + 33) + v282 + 32pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 556) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 352) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 588) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 384) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 416) = 0;
      *(_DWORD *)(*((void *)this + 33) + v282 + 652) = 0;
      uint64_t v290 = *((void *)this + 33);
      if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
      {
        int v291 = v282 + 352;
        uint64_t v292 = v290 + v282;
        int v293 = *(_DWORD *)(v292 + 352);
        *(_DWORD *)(v292 + 352) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 352) ^= 0xFFFFFF80;
        uint64_t v294 = *(void *)v157 + v282;
        int v295 = *(_DWORD *)(v294 + 352);
        *(_DWORD *)(v294 + 352) = v293;
        uint64_t v296 = *(uint64_t **)(v284 + 48);
        uint64_t v297 = *v296;
        if (v462)
        {
          if (v297 || *((_DWORD *)v296 + 38) || *((_DWORD *)v296 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v296, v291, *((_DWORD *)v296 + 15), 0xFFFFFFFFLL, 7, v295, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v298 = *(void *)v157 + v282;
          int v299 = *(_DWORD *)(v298 + 588);
          *(_DWORD *)(v298 + 588) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 588) ^= 0x3FFu;
          uint64_t v300 = *(void *)v157 + v282;
          int v301 = *(_DWORD *)(v300 + 588);
          *(_DWORD *)(v300 + 588) = v299;
          uint64_t v302 = *(void *)(v284 + 48);
          if (*(void *)v302 || *(_DWORD *)(v302 + 152) || *(_DWORD *)(v302 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v302, (int)v282 + 588, *(_DWORD *)(v302 + 60), 0x3FFFFFFFFFFLL, 32, v301, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v303 = *(void *)v157 + v282;
          int v304 = *(_DWORD *)(v303 + 320);
          *(_DWORD *)(v303 + 32pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 320) ^= 0xFFFFFF80;
          uint64_t v305 = *(void *)v157 + v282;
          int v306 = *(_DWORD *)(v305 + 320);
          *(_DWORD *)(v305 + 32pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v304;
          uint64_t v307 = *(void *)(v284 + 48);
          if (*(void *)v307 || *(_DWORD *)(v307 + 152) || *(_DWORD *)(v307 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v307, (int)v282 + 320, *(_DWORD *)(v307 + 72), 0xFFFFFFFFLL, 7, v306, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v308 = *(void *)v157 + v282;
          int v309 = *(_DWORD *)(v308 + 556);
          *(_DWORD *)(v308 + 556) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 556) ^= 0x3FFu;
          uint64_t v310 = *(void *)v157 + v282;
          int v311 = *(_DWORD *)(v310 + 556);
          *(_DWORD *)(v310 + 556) = v309;
          uint64_t v312 = *(void *)(v284 + 48);
          if (*(void *)v312 || *(_DWORD *)(v312 + 152) || *(_DWORD *)(v312 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v312, (int)v282 + 556, *(_DWORD *)(v312 + 72), 0x3FFFFFFFFFFLL, 32, v311, 4);
            if (result) {
              return result;
            }
          }
          if (v466)
          {
            uint64_t v313 = *(void *)v157 + v282;
            int v314 = *(_DWORD *)(v313 + 416);
            *(_DWORD *)(v313 + 416) = 0;
            *(_DWORD *)(*(void *)v157 + v282 + 416) ^= 0xFFFFFF80;
            uint64_t v315 = *(void *)v157 + v282;
            int v316 = *(_DWORD *)(v315 + 416);
            *(_DWORD *)(v315 + 416) = v314;
            if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, (int)v282 + 416, *(_DWORD *)(v465 + 56), 0xFFFFFFFFLL, 7, v316, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v317 = *(void *)v157 + v282;
            int v318 = *(_DWORD *)(v317 + 652);
            *(_DWORD *)(v317 + 652) = 0;
            *(_DWORD *)(*(void *)v157 + v282 + 652) ^= 0x3FFu;
            uint64_t v319 = *(void *)v157 + v282;
            int v320 = *(_DWORD *)(v319 + 652);
            *(_DWORD *)(v319 + 652) = v318;
            if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, (int)v282 + 652, *(_DWORD *)(v465 + 56), 0x3FFFFFFFFFFLL, 32, v320, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v321 = *(void *)v157 + v282;
            int v322 = *(_DWORD *)(v321 + 384);
            *(_DWORD *)(v321 + 384) = 0;
            *(_DWORD *)(*(void *)v157 + v282 + 384) ^= 0xFFFFFF80;
            uint64_t v323 = *(void *)v157 + v282;
            int v324 = *(_DWORD *)(v323 + 384);
            *(_DWORD *)(v323 + 384) = v322;
            if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, (int)v282 + 384, *(_DWORD *)(v465 + 68), 0xFFFFFFFFLL, 7, v324, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v325 = *(void *)v157 + v282;
            int v326 = *(_DWORD *)(v325 + 620);
            *(_DWORD *)(v325 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
            *(_DWORD *)(*(void *)v157 + v282 + 620) ^= 0x3FFu;
            uint64_t v327 = *(void *)v157 + v282;
            int v328 = *(_DWORD *)(v327 + 620);
            *(_DWORD *)(v327 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v326;
            if (*(void *)v465 || *(_DWORD *)(v465 + 152) || *(_DWORD *)(v465 + 156))
            {
              int v329 = v282 + 620;
              uint64_t v330 = v465;
LABEL_451:
              int v367 = *(_DWORD *)(v330 + 68);
LABEL_452:
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v330, v329, v367, 0x3FFFFFFFFFFLL, 32, v328, 4);
              if (result) {
                return result;
              }
            }
          }
        }
        else
        {
          if (v297 || *((_DWORD *)v296 + 38) || *((_DWORD *)v296 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v296, v291, *((_DWORD *)v296 + 13), 0xFFFFFFFFLL, 7, v295, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v368 = *(void *)v157 + v282;
          int v369 = *(_DWORD *)(v368 + 416);
          *(_DWORD *)(v368 + 416) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 416) ^= 0xFFFFFF80;
          uint64_t v370 = *(void *)v157 + v282;
          int v371 = *(_DWORD *)(v370 + 416);
          *(_DWORD *)(v370 + 416) = v369;
          uint64_t v372 = *(void *)(v284 + 48);
          if (*(void *)v372 || *(_DWORD *)(v372 + 152) || *(_DWORD *)(v372 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v372, (int)v282 + 416, *(_DWORD *)(v372 + 56), 0xFFFFFFFFLL, 7, v371, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v373 = *(void *)v157 + v282;
          int v374 = *(_DWORD *)(v373 + 320);
          *(_DWORD *)(v373 + 32pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 320) ^= 0xFFFFFF80;
          uint64_t v375 = *(void *)v157 + v282;
          int v376 = *(_DWORD *)(v375 + 320);
          *(_DWORD *)(v375 + 32pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v374;
          uint64_t v377 = *(void *)(v284 + 48);
          if (*(void *)v377 || *(_DWORD *)(v377 + 152) || *(_DWORD *)(v377 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v377, (int)v282 + 320, *(_DWORD *)(v377 + 64), 0xFFFFFFFFLL, 7, v376, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v378 = *(void *)v157 + v282;
          int v379 = *(_DWORD *)(v378 + 384);
          *(_DWORD *)(v378 + 384) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 384) ^= 0xFFFFFF80;
          uint64_t v380 = *(void *)v157 + v282;
          int v381 = *(_DWORD *)(v380 + 384);
          *(_DWORD *)(v380 + 384) = v379;
          uint64_t v382 = *(void *)(v284 + 48);
          if (*(void *)v382 || *(_DWORD *)(v382 + 152) || *(_DWORD *)(v382 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v382, (int)v282 + 384, *(_DWORD *)(v382 + 68), 0xFFFFFFFFLL, 7, v381, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v383 = *(void *)v157 + v282;
          int v384 = *(_DWORD *)(v383 + 588);
          *(_DWORD *)(v383 + 588) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 588) ^= 0x3FFu;
          uint64_t v385 = *(void *)v157 + v282;
          int v386 = *(_DWORD *)(v385 + 588);
          *(_DWORD *)(v385 + 588) = v384;
          uint64_t v387 = *(void *)(v284 + 48);
          if (*(void *)v387 || *(_DWORD *)(v387 + 152) || *(_DWORD *)(v387 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v387, (int)v282 + 588, *(_DWORD *)(v387 + 52), 0x3FFFFFFFFFFLL, 32, v386, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v388 = *(void *)v157 + v282;
          int v389 = *(_DWORD *)(v388 + 652);
          *(_DWORD *)(v388 + 652) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 652) ^= 0x3FFu;
          uint64_t v390 = *(void *)v157 + v282;
          int v391 = *(_DWORD *)(v390 + 652);
          *(_DWORD *)(v390 + 652) = v389;
          uint64_t v392 = *(void *)(v284 + 48);
          if (*(void *)v392 || *(_DWORD *)(v392 + 152) || *(_DWORD *)(v392 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v392, (int)v282 + 652, *(_DWORD *)(v392 + 56), 0x3FFFFFFFFFFLL, 32, v391, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v393 = *(void *)v157 + v282;
          int v394 = *(_DWORD *)(v393 + 556);
          *(_DWORD *)(v393 + 556) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 556) ^= 0x3FFu;
          uint64_t v395 = *(void *)v157 + v282;
          int v396 = *(_DWORD *)(v395 + 556);
          *(_DWORD *)(v395 + 556) = v394;
          uint64_t v397 = *(void *)(v284 + 48);
          if (*(void *)v397 || *(_DWORD *)(v397 + 152) || *(_DWORD *)(v397 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v397, (int)v282 + 556, *(_DWORD *)(v397 + 64), 0x3FFFFFFFFFFLL, 32, v396, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v398 = *(void *)v157 + v282;
          int v399 = *(_DWORD *)(v398 + 620);
          *(_DWORD *)(v398 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
          *(_DWORD *)(*(void *)v157 + v282 + 620) ^= 0x3FFu;
          uint64_t v400 = *(void *)v157 + v282;
          int v328 = *(_DWORD *)(v400 + 620);
          *(_DWORD *)(v400 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v399;
          uint64_t v330 = *(void *)(v284 + 48);
          if (*(void *)v330 || *(_DWORD *)(v330 + 152) || *(_DWORD *)(v330 + 156))
          {
            int v329 = v282 + 620;
            goto LABEL_451;
          }
        }
      }
      else
      {
        uint64_t v331 = v290 + v282;
        int v332 = *(_DWORD *)(v331 + 320);
        *(_DWORD *)(v331 + 32pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 320) ^= 0xFFFFFF80;
        uint64_t v333 = *(void *)v157 + v282;
        int v334 = *(_DWORD *)(v333 + 320);
        *(_DWORD *)(v333 + 32pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v332;
        uint64_t v335 = (uint64_t)*v474;
        if (**v474 || *(_DWORD *)(v335 + 152) || *(_DWORD *)(v335 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v474, (int)v282 + 320, 0, 0xFFFFFFFFLL, 7, v334, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v336 = *(void *)v157 + v282;
        int v337 = *(_DWORD *)(v336 + 556);
        *(_DWORD *)(v336 + 556) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 556) ^= 0x3FFu;
        uint64_t v338 = *(void *)v157 + v282;
        int v339 = *(_DWORD *)(v338 + 556);
        *(_DWORD *)(v338 + 556) = v337;
        if (*(void *)v335 || *(_DWORD *)(v335 + 152) || *(_DWORD *)(v335 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v335, (int)v282 + 556, 0, 0x3FFFFFFFFFFLL, 32, v339, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v340 = *(void *)v157 + v282;
        int v341 = *(_DWORD *)(v340 + 352);
        *(_DWORD *)(v340 + 352) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 352) ^= 0xFFFFFF80;
        uint64_t v342 = *(void *)v157 + v282;
        int v343 = *(_DWORD *)(v342 + 352);
        *(_DWORD *)(v342 + 352) = v341;
        uint64_t v344 = *(void *)(v284 + 48);
        if (*(void *)v344 || *(_DWORD *)(v344 + 152) || *(_DWORD *)(v344 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v344, (int)v282 + 352, *(_DWORD *)(v344 + 52), 0xFFFFFFFFLL, 7, v343, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v345 = *(void *)v157 + v282;
        int v346 = *(_DWORD *)(v345 + 588);
        *(_DWORD *)(v345 + 588) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 588) ^= 0x3FFu;
        uint64_t v347 = *(void *)v157 + v282;
        int v348 = *(_DWORD *)(v347 + 588);
        *(_DWORD *)(v347 + 588) = v346;
        uint64_t v349 = *(void *)(v284 + 48);
        if (*(void *)v349 || *(_DWORD *)(v349 + 152) || *(_DWORD *)(v349 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v349, (int)v282 + 588, *(_DWORD *)(v349 + 52), 0x3FFFFFFFFFFLL, 32, v348, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v350 = *(void *)v157 + v282;
        int v351 = *(_DWORD *)(v350 + 384);
        *(_DWORD *)(v350 + 384) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 384) ^= 0xFFFFFF80;
        uint64_t v352 = *(void *)v157 + v282;
        int v353 = *(_DWORD *)(v352 + 384);
        *(_DWORD *)(v352 + 384) = v351;
        uint64_t v354 = (uint64_t)*v471;
        if (**v471 || *(_DWORD *)(v354 + 152) || *(_DWORD *)(v354 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v471, (int)v282 + 384, 0, 0xFFFFFFFFLL, 7, v353, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v355 = *(void *)v157 + v282;
        int v356 = *(_DWORD *)(v355 + 620);
        *(_DWORD *)(v355 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 620) ^= 0x3FFu;
        uint64_t v357 = *(void *)v157 + v282;
        int v358 = *(_DWORD *)(v357 + 620);
        *(_DWORD *)(v357 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v356;
        if (*(void *)v354 || *(_DWORD *)(v354 + 152) || *(_DWORD *)(v354 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v354, (int)v282 + 620, 0, 0x3FFFFFFFFFFLL, 32, v358, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v359 = *(void *)v157 + v282;
        int v360 = *(_DWORD *)(v359 + 416);
        *(_DWORD *)(v359 + 416) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 416) ^= 0xFFFFFF80;
        uint64_t v361 = *(void *)v157 + v282;
        int v362 = *(_DWORD *)(v361 + 416);
        *(_DWORD *)(v361 + 416) = v360;
        uint64_t v363 = *(void *)(v284 + 48);
        if (*(void *)v363 || *(_DWORD *)(v363 + 152) || *(_DWORD *)(v363 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v363, (int)v282 + 416, *(_DWORD *)(v363 + 56), 0xFFFFFFFFLL, 7, v362, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v364 = *(void *)v157 + v282;
        int v365 = *(_DWORD *)(v364 + 652);
        *(_DWORD *)(v364 + 652) = 0;
        *(_DWORD *)(*(void *)v157 + v282 + 652) ^= 0x3FFu;
        uint64_t v366 = *(void *)v157 + v282;
        int v328 = *(_DWORD *)(v366 + 652);
        *(_DWORD *)(v366 + 652) = v365;
        uint64_t v330 = *(void *)(v284 + 48);
        if (*(void *)v330 || *(_DWORD *)(v330 + 152) || *(_DWORD *)(v330 + 156))
        {
          int v329 = v282 + 652;
          int v367 = *(_DWORD *)(v330 + 56);
          goto LABEL_452;
        }
      }
      v282 += 4;
      ++v283;
      ++v474;
      ++v471;
    }
    while (4 * v460 != v282);
  }
LABEL_454:
  *(_DWORD *)(*(void *)v157 + 448) = 0;
  *(_DWORD *)(*(void *)v157 + 452) = 0;
  *(_DWORD *)(*(void *)v157 + 456) = 0;
  *(_DWORD *)(*(void *)v157 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  if (!v476) {
    goto LABEL_512;
  }
  uint64_t v401 = *((void *)this + 32);
  if (v463 && v464 == 2)
  {
    int v402 = *(_DWORD *)(*(void *)(v401 + 8360) + 60);
    uint64_t v403 = *((void *)this + 33);
    int v404 = *(_DWORD *)(v403 + 448);
    *(_DWORD *)(v403 + 448) = 0;
    *(_DWORD *)(*((void *)this + 33) + 448) ^= 0xFFFFFFC0;
    uint64_t v405 = *((void *)this + 33);
    int v406 = *(_DWORD *)(v405 + 448);
    *(_DWORD *)(v405 + 448) = v404;
    uint64_t v407 = *(void *)(*((void *)this + 32) + 8360);
    if (!*(void *)v407 && !*(_DWORD *)(v407 + 152) && !*(_DWORD *)(v407 + 156)
      || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v407, 448, v402, 0xFFFFFFFFLL, 6, v406, 4),
          !result))
    {
      uint64_t v408 = *((void *)this + 33);
      int v409 = *(_DWORD *)(v408 + 684);
      *(_DWORD *)(v408 + 684) = 0;
      *(_DWORD *)(*((void *)this + 33) + 684) ^= 0x3FFu;
      uint64_t v410 = *((void *)this + 33);
      int v411 = *(_DWORD *)(v410 + 684);
      *(_DWORD *)(v410 + 684) = v409;
      uint64_t v412 = *(void *)(*((void *)this + 32) + 8360);
      if (!*(void *)v412 && !*(_DWORD *)(v412 + 152) && !*(_DWORD *)(v412 + 156)) {
        goto LABEL_544;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v412, 684, v402, 0x3FFFFFFFFFFLL, 32, v411, 4);
      if (!result)
      {
LABEL_544:
        if (!v466) {
          goto LABEL_474;
        }
        if ((int v413 = *(_DWORD *)(v465 + 56),
              int v414 = *(_DWORD *)(*(void *)v157 + 452),
              *(_DWORD *)(*(void *)v157 + 452) = 0,
              *(_DWORD *)(*(void *)v157 + 452) ^= 0xFFFFFFC0,
              int v415 = *(_DWORD *)(*(void *)v157 + 452),
              *(_DWORD *)(*(void *)v157 + 452) = v414,
              !*(void *)v465)
          && !*(_DWORD *)(v465 + 152)
          && !*(_DWORD *)(v465 + 156)
          || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, 452, v413, 0xFFFFFFFFLL, 6, v415, 4),
              !result))
        {
          if ((int v416 = *(_DWORD *)(*(void *)v157 + 688),
                *(_DWORD *)(*(void *)v157 + 688) = 0,
                *(_DWORD *)(*(void *)v157 + 688) ^= 0x3FFu,
                int v417 = *(_DWORD *)(*(void *)v157 + 688),
                *(_DWORD *)(*(void *)v157 + 688) = v416,
                !*(void *)v465)
            && !*(_DWORD *)(v465 + 152)
            && !*(_DWORD *)(v465 + 156)
            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v465, 688, v413, 0x3FFFFFFFFFFLL, 32, v417, 4), !result))
          {
LABEL_474:
            if (!v467)
            {
              if (CAHDecTansyHevc::getSWRStride(this, *(unsigned __int16 *)(v156 + 160)- *(unsigned __int16 *)(v156 + 156)+ 1, *(_DWORD *)(v478 + 23176 * v131 + 3636), *(_DWORD *)(v478 + 23176 * v131 + 3640), *(_DWORD *)(v478 + 23176 * v131 + 22852)))return 0xFFFFFFFFLL; {
              *(_DWORD *)(*((void *)this + 33) + 456) = *(_DWORD *)(*((void *)this + 33) + 456) & 0xFFFC003F | (((*((_DWORD *)this + 3000) >> 6) & 0xFFF) << 6);
              }
              if (!v466)
              {
LABEL_512:
                uint64_t v447 = *((void *)this + 32);
                if (*(_DWORD *)(v447 + 2360) == 1)
                {
                  uint64_t v448 = *(void *)v157;
                  *(_DWORD *)(*(void *)v157 + 788) = *(_DWORD *)(*(void *)v157 + 788) & 0xFFFFFFFE | *(_DWORD *)(v447 + 2508) & 1;
                  if (*(_DWORD *)(v447 + 2508))
                  {
                    *(_DWORD *)(v448 + 2788) = 0x10000000;
                    *(_DWORD *)(v448 + 2792) = *(_DWORD *)(v447 + 2368);
                    *(void *)(v448 + 280pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                    *(_DWORD *)(v448 + 2796) = 0;
                    *(_OWORD *)(v448 + 2808) = *(_OWORD *)(v447 + 2372);
                    long long v449 = *(_OWORD *)(v447 + 2388);
                    *(_OWORD *)(v448 + 284pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v447 + 2404);
                    *(_OWORD *)(v448 + 2824) = v449;
                  }
                  *(_DWORD *)(*(void *)v157 + 788) = *(_DWORD *)(*(void *)v157 + 788) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v447 + 2512) & 1));
                  if (*(_DWORD *)(v447 + 2512))
                  {
                    *(_DWORD *)(v448 + 2856) = 0;
                    if (!*(_DWORD *)(v447 + 2424))
                    {
                      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                        return 0xFFFFFFFFLL;
                      }
                      *(_DWORD *)buf = 136315138;
                      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                      unsigned int v52 = &_os_log_internal;
                      uint64_t v53 = "AppleAVD: %s(): H13A descrambler is not supported\n";
LABEL_534:
                      int v152 = buf;
                      uint32_t v153 = 12;
                      goto LABEL_140;
                    }
                    *(_DWORD *)(v447 + 264pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                    int v450 = *(_DWORD *)(v448 + 2856) & 0xF7FFFFF | ((*(_DWORD *)(v447 + 2420) & 1) << 23) | 0x20000000;
                    *(_DWORD *)(v448 + 2856) = v450;
                    *(_DWORD *)(v448 + 2856) = v450 & 0xFFC00000 | (*(_DWORD *)(v447 + 2364) == 0);
                    long long v451 = *(_OWORD *)(v447 + 2428);
                    long long v452 = *(_OWORD *)(v447 + 2444);
                    *(_OWORD *)(v448 + 2892) = *(_OWORD *)(v447 + 2460);
                    *(_OWORD *)(v448 + 2876) = v452;
                    *(_OWORD *)(v448 + 286pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v451;
                  }
                  *(_DWORD *)(*(void *)v157 + 788) = *(_DWORD *)(*(void *)v157 + 788) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v447 + 2516) & 1));
                  *(_DWORD *)(*(void *)v157 + 788) = *(_DWORD *)(*(void *)v157 + 788) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v447 + 2520) & 1));
                  *(_DWORD *)(*(void *)v157 + 788) = *(_DWORD *)(*(void *)v157 + 788) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v447 + 2524) & 1));
                  if (*(_DWORD *)(v447 + 2516))
                  {
                    *(_DWORD *)(v448 + 3016) = 0;
                    if (*(_DWORD *)(v447 + 2476) == 2) {
                      int v453 = 805306368;
                    }
                    else {
                      int v453 = 813694976;
                    }
                    *(_DWORD *)(v448 + 3016) = v453;
                    memcpy((void *)(v448 + 3020), (const void *)(v447 + 2480), 4 * *(unsigned int *)(v447 + 2476));
                    *(_DWORD *)(v447 + 2516) = 0;
                  }
                  *(_DWORD *)(*(void *)v157 + 788) = *(_DWORD *)(*(void *)v157 + 788) & 0xFFFFFFDF | (32 * (*(_DWORD *)(v447 + 2632) & 1));
                  if (*(_DWORD *)(v447 + 2632))
                  {
                    *(_DWORD *)(v448 + 2908) = 0x80000000;
                    unsigned int v454 = ((*(_DWORD *)(v447 + 2528) & 1) << 27) | 0x80000000;
                    *(_DWORD *)(v448 + 2908) = v454;
                    *(_DWORD *)(v448 + 2908) = v454 | (((2 * *(_DWORD *)(v447 + 2528)) & 4 | (*(_DWORD *)(v447 + 2528) >> 1) & 2 | (*(_DWORD *)(v447 + 2528) >> 3) & 1) << 24);
                    long long v455 = *(_OWORD *)(v447 + 2532);
                    long long v456 = *(_OWORD *)(v447 + 2548);
                    *(_OWORD *)(v448 + 2944) = *(_OWORD *)(v447 + 2564);
                    *(_OWORD *)(v448 + 2928) = v456;
                    *(_OWORD *)(v448 + 2912) = v455;
                    *(void *)(v448 + 296pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(v447 + 2580);
                    *(void *)(v448 + 2968) = *(void *)(v447 + 2588);
                    int v457 = *(_DWORD *)(v447 + 2528);
                    if ((v457 & 6) != 0 && (v457 & 8) == 0)
                    {
                      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                        return 0xFFFFFFFFLL;
                      }
                      *(_DWORD *)buf = 136315138;
                      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                      unsigned int v52 = &_os_log_internal;
                      uint64_t v53 = "AppleAVD: %s(): chip id is not used while ecid and/or board id is used\n";
                      goto LABEL_534;
                    }
                    *(_OWORD *)(v448 + 2976) = *(_OWORD *)(v447 + 2596);
                  }
                  *(_DWORD *)(*(void *)v157 + 788) = *(_DWORD *)(*(void *)v157 + 788) & 0xFFFFFFBF | ((*(_DWORD *)(v447 + 2636) & 1) << 6);
                  if (*(_DWORD *)(v447 + 2636))
                  {
                    uint64_t result = 0;
                    *(_DWORD *)(v448 + 2992) = -1879048192;
                    *(_DWORD *)(v448 + 2992) = ((*(_DWORD *)(v447 + 2612) & 1) << 23) | 0x90000000;
                    *(_OWORD *)(v448 + 2996) = *(_OWORD *)(v447 + 2616);
                    *(_DWORD *)(v447 + 264pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
                    return result;
                  }
                }
                return 0;
              }
              int v446 = (_DWORD *)((char *)this + 12004);
LABEL_511:
              *(_DWORD *)(*(void *)v157 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*(void *)v157 + 460) & 0xFFF8003F | (((*v446 >> 6) & 0x1FFF) << 6);
              goto LABEL_512;
            }
            *(_DWORD *)(*((void *)this + 33) + 456) = *(_DWORD *)(*((void *)this + 33) + 456) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 84) >> 6) & 0xFFF) << 6);
            if (!v466) {
              goto LABEL_512;
            }
            uint64_t v418 = v465;
LABEL_510:
            int v446 = (_DWORD *)(v418 + 80);
            goto LABEL_511;
          }
        }
      }
    }
  }
  else
  {
    unsigned int v419 = *(unsigned __int8 *)(v401 + 3004);
    if (*(unsigned char *)(v401 + 3004))
    {
      unsigned int v419 = *(_DWORD *)(v401 + 3016);
      unsigned int v477 = *(_DWORD *)(v401 + 3020);
    }
    else
    {
      unsigned int v477 = 0;
    }
    uint64_t v420 = *(void *)(v401 + 8360);
    uint64_t v421 = *(unsigned int *)(v420 + 56);
    unint64_t v422 = *(unsigned int *)(v420 + 52) + (unint64_t)v419;
    uint64_t v423 = *((void *)this + 33);
    int v424 = *(_DWORD *)(v423 + 448);
    *(_DWORD *)(v423 + 448) = 0;
    *(_DWORD *)(*((void *)this + 33) + 448) ^= 0xFFFFFFC0;
    uint64_t v425 = *((void *)this + 33);
    int v426 = *(_DWORD *)(v425 + 448);
    *(_DWORD *)(v425 + 448) = v424;
    uint64_t v427 = *(void *)(*((void *)this + 32) + 8360);
    unint64_t v428 = HIDWORD(v422);
    if (!*(void *)v427 && !*(_DWORD *)(v427 + 152) && !*(_DWORD *)(v427 + 156)) {
      goto LABEL_545;
    }
    if (v428 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1307;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v427, 448, v422, 0xFFFFFFFFLL, 6, v426, 4);
    if (!result)
    {
LABEL_545:
      uint64_t v429 = *((void *)this + 33);
      int v430 = *(_DWORD *)(v429 + 684);
      *(_DWORD *)(v429 + 684) = 0;
      *(_DWORD *)(*((void *)this + 33) + 684) ^= 0x3FFu;
      uint64_t v431 = *((void *)this + 33);
      int v432 = *(_DWORD *)(v431 + 684);
      *(_DWORD *)(v431 + 684) = v430;
      uint64_t v433 = *(void *)(*((void *)this + 32) + 8360);
      if (!*(void *)v433 && !*(_DWORD *)(v433 + 152) && !*(_DWORD *)(v433 + 156)) {
        goto LABEL_546;
      }
      if (v428 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1309;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v433, 684, v422, 0x3FFFFFFFFFFLL, 32, v432, 4);
      if (!result)
      {
LABEL_546:
        unint64_t v434 = v421 + v477;
        uint64_t v435 = *((void *)this + 33);
        int v436 = *(_DWORD *)(v435 + 452);
        *(_DWORD *)(v435 + 452) = 0;
        *(_DWORD *)(*((void *)this + 33) + 452) ^= 0xFFFFFFC0;
        uint64_t v437 = *((void *)this + 33);
        int v438 = *(_DWORD *)(v437 + 452);
        *(_DWORD *)(v437 + 452) = v436;
        uint64_t v439 = *(void *)(*((void *)this + 32) + 8360);
        unint64_t v440 = HIDWORD(v434);
        if (!*(void *)v439 && !*(_DWORD *)(v439 + 152) && !*(_DWORD *)(v439 + 156)) {
          goto LABEL_547;
        }
        if (v440 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "populatePictureRegisters";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1312;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 452, v434, 0xFFFFFFFFLL, 6, v438, 4);
        if (!result)
        {
LABEL_547:
          uint64_t v441 = *((void *)this + 33);
          int v442 = *(_DWORD *)(v441 + 688);
          *(_DWORD *)(v441 + 688) = 0;
          *(_DWORD *)(*((void *)this + 33) + 688) ^= 0x3FFu;
          uint64_t v443 = *((void *)this + 33);
          int v444 = *(_DWORD *)(v443 + 688);
          *(_DWORD *)(v443 + 688) = v442;
          uint64_t v445 = *(void *)(*((void *)this + 32) + 8360);
          if (!*(void *)v445 && !*(_DWORD *)(v445 + 152) && !*(_DWORD *)(v445 + 156)) {
            goto LABEL_508;
          }
          if (v440 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "populatePictureRegisters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1314;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v445, 688, v434, 0x3FFFFFFFFFFLL, 32, v444, 4);
          if (!result)
          {
LABEL_508:
            if (!v467)
            {
              if (CAHDecTansyHevc::getSWRStride(this, *(unsigned __int16 *)(v156 + 160)- *(unsigned __int16 *)(v156 + 156)+ 1, *(_DWORD *)(v478 + 23176 * v131 + 3636), *(_DWORD *)(v478 + 23176 * v131 + 3640), *(_DWORD *)(v478 + 23176 * v131 + 22852)))return 0xFFFFFFFFLL; {
              *(_DWORD *)(*((void *)this + 33) + 456) = *(_DWORD *)(*((void *)this + 33) + 456) & 0xFFFC003F | (((*((_DWORD *)this + 3000) >> 6) & 0xFFF) << 6);
              }
              int v446 = (_DWORD *)((char *)this + 12004);
              goto LABEL_511;
            }
            *(_DWORD *)(*((void *)this + 33) + 456) = *(_DWORD *)(*((void *)this + 33) + 456) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 76) >> 6) & 0xFFF) << 6);
            uint64_t v418 = *(void *)(*((void *)this + 32) + 8360);
            goto LABEL_510;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecTansyHevc::getSWRStride(CAHDecTansyHevc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 150pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 300pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 300pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 300pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 300pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3001) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecTansyHevc::getTileStartCTU(CAHDecTansyHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 692);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecTansyHevc::getTileEndCTU(CAHDecTansyHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 692);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecTansyHevc::getTileIdxAbove(CAHDecTansyHevc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 692);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecTansyHevc::populateAvdWork(CAHDecTansyHevc *this, unsigned int a2)
{
  v144[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 32);
  uint64_t v5 = *((void *)this + 33);
  int v6 = *(_DWORD *)(v4 + 8320);
  int v7 = *(_DWORD *)(v4 + 8324);
  uint64_t v8 = *(void *)(v4 + 8280);
  uint64_t v9 = *(void *)(v4 + 8288);
  uint64_t v109 = *(void *)(v4 + 8296);
  unsigned int v10 = *(_DWORD *)(v4 + 9036);
  unsigned int v11 = *(_DWORD *)(v4 + 3068);
  int v12 = *(_DWORD *)(v4 + 3072);
  v144[0] = 0;
  v144[1] = 0;
  uint64_t v143 = 0;
  unsigned int v13 = v10 >> 28;
  uint64_t v14 = v8 + 23176 * v6;
  unsigned int v15 = *(_DWORD *)(v14 + 22888);
  if (v10)
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v16 = v15 > v13 + 1;
    }
    else {
      BOOL v16 = 0;
    }
    BOOL v17 = v16 && v12 == 0;
    int v18 = v17;
    int v133 = v18;
  }
  else
  {
    int v133 = 0;
  }
  unsigned int v126 = *(unsigned __int16 *)(v5 + 694) * *(unsigned __int16 *)(v5 + 692);
  if ((v10 & 2) != 0 && *(unsigned char *)(v9 + 9856 * v7 + 52))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v126 > v13 + 1;
    }
    int v21 = v19 && v12 == 0;
    int v135 = v21;
  }
  else
  {
    int v135 = 0;
  }
  uint64_t v115 = (unsigned int *)(v14 + 22880);
  if ((v10 & 0x20) != 0 && !*(unsigned char *)(v9 + 9856 * v7 + 53))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 52)) {
      BOOL v83 = 0;
    }
    else {
      BOOL v83 = v11 > v13 + 1;
    }
    int v85 = v83 && v12 == 0;
    int v129 = v85;
  }
  else
  {
    int v129 = 0;
  }
  unsigned int v22 = 0;
  unsigned int v137 = *v115;
  unsigned int v23 = v13 + 2;
  BOOL v17 = (v10 & 4) == 0;
  int v24 = v133;
  if (v17) {
    int v24 = 1;
  }
  if (((v24 | v135) & 1) == 0 && (v129 & 1) == 0) {
    unsigned int v22 = *(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & (v13 + 1);
  }
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  memset_pattern16(__b, &unk_223AD0630, 8uLL);
  uint64_t v25 = v5 + 223836;
  unsigned int v103 = v133 | v135 | v129;
  if (v103) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = 1;
  }
  unint64_t v27 = v22 + v26;
  uint64_t v120 = v26;
  unsigned int v105 = 0x1000 / v26;
  uint64_t v28 = 48 * (0x1000 / v26);
  uint64_t v29 = v22;
  unint64_t v30 = v22;
  do
  {
    v144[v30] = v25 + (v30 - v22) * v28;
    ++v30;
  }
  while (v30 < v27);
  uint64_t v102 = v28;
  unint64_t v106 = v27;
  uint64_t v31 = v144[v22];
  uint64_t v123 = v5 + 223836;
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v25) >> 4);
  unint64_t v104 = v22;
  if (!a2)
  {
    uint64_t v95 = 0;
    int v96 = 0;
    HIDWORD(v138) = 0;
    unsigned int v43 = v22;
    goto LABEL_165;
  }
  uint64_t v136 = 0;
  unsigned int v117 = 0;
  int v113 = 0;
  int v121 = 0;
  uint64_t v130 = 0;
  uint64_t v134 = 0;
  unsigned int v33 = v22;
  unsigned int v34 = v15;
  int v35 = 0;
  uint64_t v138 = 0;
  unsigned int v36 = a2;
  uint64_t v37 = 0;
  uint64_t v38 = v9 + 9856 * v7;
  uint64_t v39 = (unsigned char *)(v38 + 52);
  int v118 = (unsigned char *)(v38 + 53);
  int v40 = v133;
  if (v133) {
    int v41 = 12;
  }
  else {
    int v41 = 4;
  }
  int v116 = v41;
  unsigned int v122 = v36 - 1;
  unsigned int v111 = v34 - 1;
  unsigned int v112 = v34;
  unsigned int v110 = v34 - 2;
  unsigned int v42 = v120;
  int v108 = &__b[v29];
  unsigned int v101 = v36;
  uint64_t v107 = v36;
  uint64_t v124 = v5 + 3384;
  unsigned int v100 = v33;
  unsigned int v43 = v33;
  uint64_t v128 = v39;
  do
  {
    if (*v39) {
      int v44 = 1;
    }
    else {
      int v44 = v40;
    }
    if (v44 != 1)
    {
      unsigned int v47 = 1;
LABEL_54:
      uint64_t v48 = 0;
      int v114 = 0;
      uint64_t v49 = v109 + 2360 * v136;
      int v119 = (void *)(v49 + 1904);
      int v125 = (int *)(v49 + 36);
      int v127 = (unsigned char *)(v49 + 32);
      uint64_t v132 = v47;
      while (1)
      {
        if (!(v48 | v136))
        {
          *(_WORD *)(v31 + 4) = 0;
          *(_WORD *)(v31 + 6) = v43;
          *(_DWORD *)(v31 + 8) = 0;
          *(_WORD *)(v31 + 12) = 0;
          LODWORD(v13pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v124 + 368 * v136);
          if (!(*(unsigned int (**)(void))(**((void **)this + 32) + 448))()) {
            return 0xFFFFFFFFLL;
          }
          int v54 = *v125;
          *(_DWORD *)(v31 + 32) = *v125;
          *(_DWORD *)(v31 + 36) = v54;
          HIDWORD(v138) = 0;
          *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecTansyHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v137);
          __int16 v55 = 271;
          goto LABEL_159;
        }
        if (v48)
        {
          int v50 = *(_DWORD *)(*v119 + 4 * v48 - 4) + 1;
          if (*v128)
          {
            if (*v118)
            {
              unsigned int v51 = *v115;
              unsigned int v52 = (v51 + v138) / v51;
              v50 += v114;
              if (v52 >= *(unsigned __int16 *)(*((void *)this + 33) + 2 * (v121 + 1) + 738))
              {
                LODWORD(v138) = (*(uint64_t (**)(CAHDecTansyHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v137);
                int v114 = 0;
                int v35 = v116;
              }
              else
              {
                LODWORD(v138) = v113 + v52 * v51;
                if (!v133)
                {
                  int v114 = v50;
                  int v40 = 0;
                  goto LABEL_160;
                }
                int v114 = 0;
                int v53 = __b[v43];
                __b[v43] = 0;
                if (v53) {
                  int v35 = 72;
                }
                else {
                  int v35 = 8;
                }
              }
            }
            else
            {
              LODWORD(v138) = (*(uint64_t (**)(CAHDecTansyHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v137);
              int v35 = 4;
            }
          }
          else if (v133)
          {
            LODWORD(v138) = (*v115 + v138) / *v115 * *v115;
            int v35 = 8;
          }
          int v62 = 48 * v32;
          uint64_t v63 = v140;
          if (*(void *)v140 || *(_DWORD *)(v140 + 152) || *(_DWORD *)(v140 + 156))
          {
            int v64 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 2011;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v64 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223858, HIDWORD(v138) + v64, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v63 = v140;
            if (*(void *)v140) {
              goto LABEL_103;
            }
          }
          if (*(_DWORD *)(v63 + 152) || *(_DWORD *)(v63 + 156))
          {
LABEL_103:
            int v65 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 2012;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v65 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223860, HIDWORD(v138) + v65, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v50;
          HIDWORD(v138) += v50;
          unsigned int v42 = v120;
          int v40 = v133;
        }
        else
        {
          int v56 = 48 * v32;
          uint64_t v57 = v140;
          if (*(void *)v140 || *(_DWORD *)(v140 + 152) || *(_DWORD *)(v140 + 156))
          {
            int v58 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1935;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v58 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223858, HIDWORD(v138) + v58, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v57 = v140;
            if (*(void *)v140) {
              goto LABEL_76;
            }
          }
          if (*(_DWORD *)(v57 + 152) || *(_DWORD *)(v57 + 156))
          {
LABEL_76:
            int v60 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1936;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v60 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223860, HIDWORD(v138) + v60, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v130 - HIDWORD(v138);
          int v61 = *(_DWORD *)(v124 + 368 * v136);
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t *))(**((void **)this + 32) + 448))(*((void *)this + 32), v136, &v140, &v139))return 0xFFFFFFFFLL; {
          LODWORD(v13pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v61;
          }
          if (*v127) {
            int v35 = 2;
          }
          else {
            int v35 = 258;
          }
          int v40 = v133;
          LODWORD(v138) = *v125;
          if (v133 && *v125 % v137 == v113)
          {
            HIDWORD(v138) = 0;
            if (__b[v43])
            {
              v35 |= 0x48u;
              __b[v43] = 0;
            }
            else
            {
              v35 |= 8u;
            }
          }
          else
          {
            HIDWORD(v138) = 0;
          }
        }
        unsigned int v66 = v37 + 1;
        if ((int)v37 + 1 < v126)
        {
          int v67 = (*(uint64_t (**)(CAHDecTansyHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v137);
          int v68 = v116;
          if (v138 != v67) {
            int v68 = 0;
          }
          v35 |= v68;
        }
        *(_WORD *)(v31 + 16) = v35;
        if (v134 == v122) {
          *(_WORD *)(v31 + 18) |= 2u;
        }
        if (v37 == v126 - 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        int v69 = v135;
        if (v37 != v126 - 2) {
          int v69 = 0;
        }
        if (v69 == 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        if (v40
          && ((int v70 = *(unsigned __int16 *)(v31 + 10), v112 > 1) ? (v71 = v110 == v70) : (v71 = 0),
              !v71 ? (int v72 = 0) : (int v72 = 1),
              v111 == v70 || v72))
        {
          *(_WORD *)(v31 + 18) |= 8u;
          if ((v35 & 4) != 0)
          {
LABEL_132:
            if (*v128 && *v118)
            {
              uint64_t v73 = *((void *)this + 33);
              unsigned int v74 = *(unsigned __int16 *)(v73 + 692);
              unsigned int v117 = (v43
                    - *(unsigned __int16 *)(v73 + 738 + 2 * (v66 / v74))
                    + *(unsigned __int16 *)(v73 + 738 + 2 * (v66 / v74 + 1)))
                   % v42;
              int v121 = v66 / v74;
              int v113 = *(unsigned __int16 *)(v73 + 692 + 2 * (v66 % v74) + 4);
              memset_pattern16(v108, &unk_223AD0630, 4 * (v120 - 1) + 4);
            }
            uint64_t v37 = (v37 + 1);
          }
        }
        else if ((v35 & 4) != 0)
        {
          goto LABEL_132;
        }
        if ((v35 & 0x44) != 0)
        {
          int v75 = (*(uint64_t (**)(CAHDecTansyHevc *, uint64_t))(*(void *)this + 80))(this, v37);
          unsigned int v76 = HIDWORD(v134);
          if (SHIDWORD(v134) <= v75) {
            v35 |= 0x20u;
          }
        }
        else
        {
          unsigned int v76 = HIDWORD(v134);
        }
        if (!v48)
        {
          if (!*v127) {
            unsigned int v76 = v37;
          }
          int v77 = HIDWORD(v130);
          if (!*v127) {
            int v77 = v138;
          }
          HIDWORD(v13pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v77;
        }
        if ((v35 & 0x44) != 0)
        {
          unsigned int v78 = *(unsigned __int16 *)(*((void *)this + 33) + 692);
          if (v76 / v78 + 1 == v37 / v78) {
            v35 |= 0x10u;
          }
        }
        ++*((_DWORD *)&v144[-1] + v43);
        v144[v43] += 48;
        unsigned int v79 = v138 / v137;
        if (v40) {
          unsigned int v43 = (v79 - v121 + v117) % v42;
        }
        if (v135) {
          unsigned int v43 = v37 % v42;
        }
        char v80 = v129 ^ 1;
        if (v48) {
          char v80 = 1;
        }
        HIDWORD(v134) = v76;
        if ((v80 & 1) == 0 && !*v127) {
          unsigned int v43 = (v43 + 1) % v42;
        }
        uint64_t v31 = v144[v43];
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v123) >> 4);
        *(_WORD *)(v31 + 4) = *((_DWORD *)&v144[-1] + v43);
        *(_WORD *)(v31 + 6) = v43;
        *(_WORD *)(v31 + 8) = v136;
        *(_WORD *)(v31 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v79;
        *(_WORD *)(v31 + 12) = v37;
        *(_DWORD *)(v31 + 32) = v138;
        *(_DWORD *)(v31 + 36) = HIDWORD(v130);
        *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecTansyHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v137);
        __int16 v55 = v35;
        LODWORD(v134) = v136;
LABEL_159:
        *(_WORD *)(v31 + 14) = v55;
LABEL_160:
        if (v132 == ++v48) {
          goto LABEL_51;
        }
      }
    }
    int v45 = *(_DWORD *)(v109 + 2360 * v136 + 1896);
    BOOL v46 = __CFADD__(v45, 1);
    unsigned int v47 = v45 + 1;
    if (!v46) {
      goto LABEL_54;
    }
LABEL_51:
    ++v136;
    uint64_t v39 = v128;
  }
  while (v136 != v107);
  uint64_t v95 = v140;
  unsigned int v22 = v100;
  a2 = v101;
  int v96 = v130;
LABEL_165:
  int v131 = v96;
  int v81 = 48 * v32;
  if (!*(void *)v95 && !*(_DWORD *)(v95 + 152) && !*(_DWORD *)(v95 + 156))
  {
LABEL_185:
    if (*(_DWORD *)(v95 + 152) || *(_DWORD *)(v95 + 156)) {
      goto LABEL_187;
    }
    goto LABEL_191;
  }
  int v82 = v139;
  if ((v139 + (unint64_t)HIDWORD(v138)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "populateAvdWork";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 2106;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
    int v82 = v139;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223858, HIDWORD(v138) + v82, 0x3FFFFFFFFFFLL, 32, -1, 2);
  if (!result)
  {
    uint64_t v95 = v140;
    if (!*(void *)v140) {
      goto LABEL_185;
    }
LABEL_187:
    int v86 = v139;
    if ((v139 + (unint64_t)HIDWORD(v138)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "populateAvdWork";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = 2107;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
      int v86 = v139;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223860, HIDWORD(v138) + v86, 0xFFFFFFFFLL, 0, -1, 4);
    if (!result)
    {
LABEL_191:
      *(_DWORD *)(v31 + 28) = v131 - HIDWORD(v138);
      *(_DWORD *)(v31 + 16) = 917519;
      ++*((_DWORD *)&v144[-1] + v43);
      unint64_t v87 = v104;
      if (v129)
      {
        uint64_t v88 = 0;
        buf[0] = 0;
        buf[1] = 0;
        do
        {
          buf[v88] = v123 + v88 * v102;
          ++v88;
        }
        while (v120 != v88);
        uint64_t v89 = buf[0];
        unsigned int v90 = *(unsigned __int16 *)(buf[0] + 8) + 1;
        uint64_t v91 = v103;
        uint64_t v92 = 0;
        if (v90 >= a2)
        {
          unsigned int v94 = buf;
        }
        else
        {
          uint64_t v93 = 0;
          unsigned int v94 = buf;
          do
          {
            if (*(unsigned __int16 *)(v89 + 4) + 1 == *((_DWORD *)&v144[-1] + v92))
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(buf[v91] + 36);
            }
            else if (v90 == *(unsigned __int16 *)(v89 + 56))
            {
              *unsigned int v94 = v89 + 48;
              uint64_t v92 = v93;
              uint64_t v91 = v93;
            }
            else
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(buf[v91] + 36);
              *unsigned int v94 = v89 + 48;
            }
            uint64_t v93 = v91;
            uint64_t v91 = ((int)v91 + 1) % v120;
            unsigned int v94 = &buf[v92];
            uint64_t v89 = *v94;
            unsigned int v90 = *(unsigned __int16 *)(*v94 + 8) + 1;
          }
          while (v90 < a2);
        }
        int v97 = *((_DWORD *)&v144[-1] + v92);
        if (*(unsigned __int16 *)(v89 + 4) + 1 != v97)
        {
          do
          {
            int v98 = *(unsigned __int16 *)(v89 + 52);
            v89 += 48;
          }
          while (v98 + 1 != v97);
          *unsigned int v94 = v89;
        }
        *(_DWORD *)(v89 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v89 + 44) + 1;
      }
      uint64_t v99 = *((void *)this + 33) + 36;
      do
      {
        *(_WORD *)(v99 + 2 * v87 - 8) = *((_DWORD *)&v144[-1] + v87);
        *(_DWORD *)(v99 + 4 * v87) = 48 * (v87 - v22) * v105 + 223836;
        ++v87;
      }
      while (v87 < v106);
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecTansyHevc::allocWorkBuf_SPS(CAHDecTansyHevc *this, _DWORD *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 5718;
  int v5 = a2[902];
  int v6 = a2[903];
  int v7 = a2[900];
  if (v5 < (*(unsigned int (**)(CAHDecTansyHevc *))(*(void *)this + 96))(this)
    || (unsigned int v8 = a2[903], v8 < (*(unsigned int (**)(CAHDecTansyHevc *))(*(void *)this + 104))(this))
    || (unsigned int v9 = a2[909], v9 > (*(unsigned int (**)(CAHDecTansyHevc *))(*(void *)this + 112))(this) - 8)
    || (unsigned int v10 = a2[910], v10 > (*(unsigned int (**)(CAHDecTansyHevc *))(*(void *)this + 120))(this) - 8)
    || (unsigned int v17 = *v4, v18 = *v4 - 16, v18 > 0x30)
    || ((1 << v18) & 0x1000000010001) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = a2[902];
      int v12 = a2[903];
      int v13 = a2[909];
      int v14 = a2[910];
      unsigned int v15 = *v4;
      int v49 = 136316418;
      int v50 = "allocWorkBuf_SPS";
      __int16 v51 = 1024;
      int v52 = v11;
      __int16 v53 = 1024;
      *(_DWORD *)int v54 = v12;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v13;
      __int16 v55 = 1024;
      int v56 = v14;
      __int16 v57 = 1024;
      unsigned int v58 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported bit stream w %d h %d bd %d %d CtbSizeY %d\n", (uint8_t *)&v49, 0x2Au);
    }
    return 0xFFFFFFFFLL;
  }
  int v19 = v5 + 31;
  if (v5 < -31) {
    int v19 = v5 + 62;
  }
  unsigned int v20 = v19 >> 5;
  int v21 = v6 + 31;
  if (v6 < -31) {
    int v21 = v6 + 62;
  }
  unsigned int v22 = v21 >> 5;
  unsigned int v23 = 32 - __clz(v20 - 1);
  if (v20 >= 2) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  unsigned int v25 = 32 - __clz(v22 - 1);
  if (v22 >= 2) {
    char v26 = v25;
  }
  else {
    char v26 = 0;
  }
  unsigned int v27 = ((32 << (v26 + v24)) + 127) & 0xFFFFFF80;
  if (v7)
  {
    int v28 = v5 << (v7 == 3);
    int v29 = v28 + 31;
    int v30 = v28 + 62;
    if (v29 >= 0) {
      int v30 = v29;
    }
    unsigned int v31 = v30 >> 5;
    if (v7 == 1) {
      int v32 = v6 + 1;
    }
    else {
      int v32 = v6;
    }
    int v33 = v32 >> (v7 == 1);
    int v35 = v33 + 15;
    BOOL v34 = v33 < -15;
    int v36 = v33 + 30;
    if (!v34) {
      int v36 = v35;
    }
    unsigned int v37 = v36 >> 4;
    if (v31 > 1)
    {
      unsigned int v38 = 32 - __clz(v31 - 1);
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v37 = 0;
  }
  LOBYTE(v38) = 0;
LABEL_32:
  unsigned int v39 = 32 - __clz(v37 - 1);
  if (v37 >= 2) {
    char v40 = v39;
  }
  else {
    char v40 = 0;
  }
  unsigned int v41 = ((8 << (v40 + v38)) + 127) & 0xFFFFFF80;
  if (!v7) {
    unsigned int v41 = 0;
  }
  *((_DWORD *)this + 2992) = v27;
  *((_DWORD *)this + 2993) = v41;
  *((void *)this + 1497) = 0;
  unsigned int v42 = (v17 & 0xFFFFFFF0) * (v17 >> 4) * v4[2];
  *((_DWORD *)this + 2998) = v42;
  *((_DWORD *)this + 2997) = v4[4] * v42;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_44:
    uint64_t v46 = 0;
    while (1)
    {
      uint64_t v47 = *((unsigned int *)this + 2997);
      if (v47)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecTansyHevc *)((char *)this + v46 + 7568), v47, 7, 1, 0))break; {
      }
        }
      uint64_t result = 0;
      v46 += 176;
      if (v46 == 2816) {
        return result;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2373;
    __int16 v53 = 2080;
    *(void *)int v54 = "MvColo";
    uint64_t v48 = &_os_log_internal;
  }
  else
  {
    uint64_t v43 = 528;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 2992);
      if (v44
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecTansyHevc *)((char *)this + v43), v44, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_56;
        }
        int v49 = 136315650;
        int v50 = "allocWorkBuf_SPS";
        __int16 v51 = 1024;
        int v52 = 2364;
        __int16 v53 = 2080;
        *(void *)int v54 = "HdrY";
        uint64_t v48 = &_os_log_internal;
        goto LABEL_55;
      }
      uint64_t v45 = *((unsigned int *)this + 2993);
      if (v45)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecTansyHevc *)((char *)this + v43 + 2816), v45, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 3344) {
        goto LABEL_44;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2365;
    __int16 v53 = 2080;
    *(void *)int v54 = "HdrC";
    uint64_t v48 = &_os_log_internal;
  }
LABEL_55:
  _os_log_impl(&dword_223977000, v48, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v49, 0x1Cu);
LABEL_56:
  (*(void (**)(CAHDecTansyHevc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecTansyHevc::allocWorkBuf_PPS(CAHDecTansyHevc *this, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  unsigned int v4 = (a2[909] + 9) & 0xFFFFFFFE;
  int v5 = a2[910];
  unsigned int v6 = (v5 + 9) & 0xFFFFFFFE;
  if (v4 <= v6) {
    unsigned int v7 = (v5 + 9) & 0xFFFFFFFE;
  }
  else {
    unsigned int v7 = (a2[909] + 9) & 0xFFFFFFFE;
  }
  int v8 = a2[900];
  if (v7 == 10) {
    int v9 = 40;
  }
  else {
    int v9 = 48;
  }
  if (v7 == 8) {
    int v9 = 32;
  }
  char v10 = v8 != 3;
  if (*((unsigned char *)a3 + 52))
  {
    uint64_t v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = a2[1106] + a2[1105];
    uint64_t v17 = a3[14];
    int v18 = a2[5718];
    unsigned int v19 = a2[902];
    do
    {
      int v20 = a3[v11 + 17] + 1;
      int v21 = v20 * v18;
      if (v20 * v18 + v14 > v19) {
        int v21 = v19 - v14;
      }
      if (v12 <= v21) {
        int v12 = v21;
      }
      if (v8)
      {
        unsigned int v22 = (v20 << v16) >> v10;
        if (v17 == v11) {
          unsigned int v22 = (((v19 >> 3) - (v15 << v16)) >> v10) + 1;
        }
        v13 += ((v22 + 2 * (v11 != 0)) * v9 + 127) & 0xFFFFFF80;
      }
      v14 += v21;
      v15 += v20;
      ++v11;
    }
    while (v17 + 1 != v11);
  }
  else
  {
    unsigned int v19 = a2[902];
    int v23 = (v9 + v9 * (v19 >> 3 >> v10) + 127) & 0x7FFFFF80;
    if (v8) {
      int v13 = v23;
    }
    else {
      int v13 = 0;
    }
    int v12 = a2[902];
  }
  signed int v24 = 0;
  uint64_t v25 = *((void *)this + 32);
  if (v12 >= -15) {
    int v26 = v12 + 15;
  }
  else {
    int v26 = v12 + 30;
  }
  int v27 = a3[14];
  if (*((unsigned char *)a3 + 52)) {
    int v28 = a3[14];
  }
  else {
    int v28 = 0;
  }
  int v68 = v28;
  if (v8 == 3) {
    int v29 = 48;
  }
  else {
    int v29 = 32;
  }
  if (v8 == 3) {
    int v30 = 176;
  }
  else {
    int v30 = 128;
  }
  if (!v8) {
    int v29 = 16;
  }
  unsigned int v31 = (v29 * v7) >> 3;
  if (!v8) {
    int v30 = 80;
  }
  int v66 = v26;
  int v67 = v30;
  int v32 = v26 >> 4;
  int v33 = (v26 >> 4) * v31;
  if (v5) {
    int v34 = 60;
  }
  else {
    int v34 = 48;
  }
  int v65 = v34;
  unsigned int v35 = 0;
  unsigned int v36 = 0;
  unsigned int v37 = 0;
  if (*((unsigned char *)a3 + 52) && v27)
  {
    uint64_t v38 = 0;
    int v39 = 0;
    unsigned int v37 = 0;
    unsigned int v36 = 0;
    unsigned int v35 = 0;
    if (v8 == 1) {
      int v40 = 8;
    }
    else {
      int v40 = 16;
    }
    if (!v8) {
      int v40 = 0;
    }
    unsigned int v41 = ((((6 * v40 + 96) * v7) >> 3) + 7) & 0x3FFFFFF8;
    int v42 = v40 + 16;
    unsigned int v43 = a2[903];
    signed int v44 = v4 - 8;
    signed int v45 = v6 - 8;
    if (v44 <= v45) {
      signed int v46 = v45;
    }
    else {
      signed int v46 = v44;
    }
    uint64_t v47 = a3[15];
    int v48 = a2[5718];
    BOOL v50 = *(_DWORD *)(v25 + 2644) == 1 && v46 != 0;
    __int16 v51 = (char *)(a3 + 37);
    do
    {
      int v52 = v48 + v48 * *(_DWORD *)&v51[4 * v38];
      if (v52 + v39 > v43) {
        int v52 = v43 - v39;
      }
      int v53 = v52 + 15;
      if (v52 < -15) {
        int v53 = v52 + 30;
      }
      if (v38) {
        int v54 = (v53 >> 4) + 1;
      }
      else {
        int v54 = v53 >> 4;
      }
      unsigned int v55 = v54 * v41;
      if (v35 <= v55) {
        unsigned int v35 = v55;
      }
      unsigned int v56 = 36 * (v53 >> 4);
      if (v36 <= v56) {
        unsigned int v36 = v56;
      }
      if (v50)
      {
        if (v47 == v38) {
          int v57 = 23;
        }
        else {
          int v57 = 15;
        }
        unsigned int v58 = ((v57 + v52) / 16 * v42) | 6;
        if (v37 <= v58) {
          unsigned int v37 = v58;
        }
      }
      v39 += v52;
      ++v38;
    }
    while (v47 + 1 != v38);
    signed int v24 = (((3 * v7) & 0x7FFFFF) << 6) + (((v43 + 7) >> 3) + 2) * ((((v7 >> 1) & 0x1FFFFF) << 8) | 8);
  }
  if (v33 && CAVDDecoder::allocAVDMem(v25, (_OWORD *)this + 649, v33, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2547;
      __int16 v74 = 2080;
      int v75 = "IpAbove";
      uint64_t v59 = &_os_log_internal;
LABEL_120:
      _os_log_impl(&dword_223977000, v59, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", buf, 0x1Cu);
      goto LABEL_121;
    }
    goto LABEL_121;
  }
  if ((v12 + 30) >= 0x1F
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 462, 4 * (4 * v32 + (v66 >> 4)), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2548;
      __int16 v74 = 2080;
      int v75 = "MvAboveInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
LABEL_121:
    (*(void (**)(CAHDecTansyHevc *, void))(*(void *)this + 152))(this, 0);
    return 0xFFFFFFFFLL;
  }
  int v60 = v68 + ((v19 + 15) >> 4);
  signed int v61 = v60 * ((((v67 * v7) >> 3) + 7) & 0x3FFFFFF8) + (v27 << 7);
  if (v61 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 660, v61, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2549;
      __int16 v74 = 2080;
      int v75 = "LfAbovePix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  int v62 = 36 * v60 + (v27 << 7);
  if (v62 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 671, v62, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2550;
      __int16 v74 = 2080;
      int v75 = "LfAboveInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v35 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 682, (int)v35, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2551;
      __int16 v74 = 2080;
      int v75 = "LfLeftPix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v36 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 693, (int)v36, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2552;
      __int16 v74 = 2080;
      int v75 = "LfLeftInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v37 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 704, (int)v37, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2553;
      __int16 v74 = 2080;
      int v75 = "SwLeftPix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v13 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 715, v13, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2554;
      __int16 v74 = 2080;
      int v75 = "AZAbovePix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (v24 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 726, v24, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2555;
      __int16 v74 = 2080;
      int v75 = "AZLeftPix";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  int v63 = (v19 >> 3) * v65;
  if (!v63) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 737, v63, 7, 1, 0);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v71 = "allocWorkBuf_PPS";
      __int16 v72 = 1024;
      int v73 = 2557;
      __int16 v74 = 2080;
      int v75 = "RfAboveInfo";
      uint64_t v59 = &_os_log_internal;
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  return result;
}

uint64_t CAHDecTansyHevc::freeWorkBuf_SPS(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(_DWORD *)(*(void *)(this + 256) + 2648))
  {
    for (uint64_t i = 528; i != 3344; i += 176)
    {
      BOOL v3 = (void *)(v1 + i);
      if (*(void *)(v1 + i))
      {
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v1 + i));
        *BOOL v3 = 0;
      }
      if (v3[352])
      {
        unsigned int v4 = v3 + 352;
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), v4);
        *unsigned int v4 = 0;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1 + 7568;
  do
  {
    if (*(void *)(v6 + v5))
    {
      this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v6 + v5));
      *(void *)(v6 + v5) = 0;
    }
    v5 += 176;
  }
  while (v5 != 2816);
  return this;
}

uint64_t *CAHDecTansyHevc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  unsigned int v2 = this;
  if (this[1298])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1298);
    v2[1298] = 0;
  }
  if (v2[924])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 924);
    v2[924] = 0;
  }
  if (v2[1320])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1320);
    v2[1320] = 0;
  }
  if (v2[1342])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1342);
    v2[1342] = 0;
  }
  if (v2[1364])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1364);
    v2[1364] = 0;
  }
  if (v2[1386])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1386);
    v2[1386] = 0;
  }
  if (v2[1408])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1408);
    v2[1408] = 0;
  }
  if (v2[1430])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1430);
    v2[1430] = 0;
  }
  if (v2[1452])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1452);
    v2[1452] = 0;
  }
  if (v2[1474])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1474);
    v2[1474] = 0;
  }
  return this;
}

uint64_t CAHDecTansyHevc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 6160;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 11984) = a2;
  return this;
}

uint64_t CAHDecTansyHevc::decodeBuffer(CAHDecTansyHevc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecTansyHevc::decodeBufferSize(CAHDecTansyHevc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecTansyHevc::decHdrYLinAddr(CAHDecTansyHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 66);
}

uint64_t CAHDecTansyHevc::decHdrCLinAddr(CAHDecTansyHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 418);
}

uint64_t CAHDecTansyHevc::decHdrYSize(CAHDecTansyHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 143);
}

uint64_t CAHDecTansyHevc::decHdrCSize(CAHDecTansyHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 847);
}

uint64_t CAHDecTansyHevc::decHdrYStride(CAHDecTansyHevc *this)
{
  return *((unsigned int *)this + 2994);
}

uint64_t CAHDecTansyHevc::decHdrCStride(CAHDecTansyHevc *this)
{
  return *((unsigned int *)this + 2995);
}

CAHDecTansyLgh *createTansyLghDecoder(CAVDLghDecoder *a1)
{
  uint64_t v2 = (CAHDecTansyLgh *)operator new(0xC48uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecTansyLgh::CAHDecTansyLgh(v2, a1);
  }
  return v3;
}

void sub_2239B6AA0(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecTansyLgh::CAHDecTansyLgh(CAHDecTansyLgh *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D740840;
  *(_DWORD *)(v1 + 456) = 151468;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecTansyLgh::CAHDecTansyLgh(CAHDecTansyLgh *this, CAVDLghDecoder *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D740840;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 151468;
  *(_DWORD *)(v4 + 8) = 940;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 151468, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      uint64_t v17 = "CAHDecTansyLgh";
      __int16 v18 = 1024;
      int v19 = 0;
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
LABEL_16:
      _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v7);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v8;
    *((void *)this + 34) = v8;
    uint64_t v9 = *((void *)this + 32);
    *(_DWORD *)(v9 + 17552) = 0;
    bzero((void *)(v9 + 11792), 0xB00uLL);
    *(_OWORD *)(v9 + 5712) = 0u;
    bzero((void *)(*((void *)this + 32) + 14608), 0xB00uLL);
    bzero((char *)this + 464, 0x4D0uLL);
    char v10 = (_OWORD *)*((void *)this + 32);
    v10[356] = 0u;
    v10[355] = 0u;
    v10[354] = 0u;
    v10[353] = 0u;
    v10[352] = 0u;
    v10[351] = 0u;
    v10[350] = 0u;
    v10[349] = 0u;
    v10[348] = 0u;
    v10[347] = 0u;
    v10[346] = 0u;
    v10[345] = 0u;
    v10[344] = 0u;
    v10[343] = 0u;
    v10[342] = 0u;
    v10[341] = 0u;
    v10[340] = 0u;
    v10[339] = 0u;
    v10[338] = 0u;
    v10[337] = 0u;
    v10[336] = 0u;
    v10[335] = 0u;
    bzero((char *)this + 1696, 0x580uLL);
    for (uint64_t i = 3072; i != 3776; i += 176)
    {
      int v12 = (_OWORD *)(*((void *)this + 32) + i);
      v12[9] = 0uLL;
      v12[10] = 0uLL;
      v12[7] = 0uLL;
      v12[8] = 0uLL;
      v12[5] = 0uLL;
      v12[6] = 0uLL;
      v12[3] = 0uLL;
      v12[4] = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *int v12 = 0uLL;
    }
    do
    {
      int v13 = (_OWORD *)(*((void *)this + 32) + i);
      v13[9] = 0uLL;
      v13[10] = 0uLL;
      v13[7] = 0uLL;
      v13[8] = 0uLL;
      v13[5] = 0uLL;
      v13[6] = 0uLL;
      v13[3] = 0uLL;
      v13[4] = 0uLL;
      v13[1] = 0uLL;
      v13[2] = 0uLL;
      *int v13 = 0uLL;
      i += 176;
    }
    while (i != 5184);
    int v14 = (_OWORD *)*((void *)this + 32);
    v14[334] = 0u;
    v14[333] = 0u;
    v14[332] = 0u;
    v14[331] = 0u;
    v14[330] = 0u;
    v14[329] = 0u;
    v14[328] = 0u;
    v14[327] = 0u;
    v14[326] = 0u;
    v14[325] = 0u;
    uint64_t v15 = 3072;
    v14[324] = 0u;
    do
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), 1913, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        int v16 = 136315650;
        uint64_t v17 = "CAHDecTansyLgh";
        __int16 v18 = 1024;
        int v19 = 174;
        __int16 v20 = 2080;
        int v21 = "probBuf";
        uint64_t v5 = &_os_log_internal;
        uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
        goto LABEL_15;
      }
      v15 += 176;
    }
    while (v15 != 3776);
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 5184), 12284, 7, 1, 0))return; {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    }
    {
      int v16 = 136315650;
      uint64_t v17 = "CAHDecTansyLgh";
      __int16 v18 = 1024;
      int v19 = 176;
      __int16 v20 = 2080;
      int v21 = "stateBuf";
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_15:
      uint32_t v7 = 28;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
}

void sub_2239B6ED8(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecTansyLgh::~CAHDecTansyLgh(CAHDecTansyLgh *this)
{
  *(void *)this = &unk_26D740840;
  CAHDecTansyLgh::freeWorkBuf_SPS(this);
  uint64_t v2 = *((void *)this + 32);
  for (uint64_t i = 3072; i != 3776; i += 176)
  {
    if (*(void *)(v2 + i))
    {
      CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + i));
      uint64_t v2 = *((void *)this + 32);
      *(void *)(v2 + i) = 0;
    }
  }
  if (*(void *)(v2 + 5184))
  {
    CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + 5184));
    *(void *)(*((void *)this + 32) + 5184) = 0;
  }
  (*(void (**)(CAHDecTansyLgh *, void))(*(void *)this + 152))(this, 0);
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecTansyLgh::~CAHDecTansyLgh(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecTansyLgh::startPicture(CAHDecTansyLgh *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  uint64_t v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x24FACuLL);
    uint64_t v5 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v5 + 16) = a2;
    *(_WORD *)(v5 + 24) = 257;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecTansyLgh::DecodePicture(CAHDecTansyLgh *this, uint64_t a2)
{
  if (CAHDecTansyLgh::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecTansyLgh *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecTansyLgh *))(*(void *)this + 48))(this);
  (*(void (**)(CAHDecTansyLgh *))(*(void *)this + 56))(this);
  CAHDecTansyLgh::populateTiles(this);
  (*(void (**)(CAHDecTansyLgh *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecTansyLgh *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecTansyLgh::populateTiles(CAHDecTansyLgh *this)
{
  uint64_t v1 = (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 316)
                    * *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 312));
  if (v1)
  {
    uint64_t v3 = *((void *)this + *((unsigned int *)this + 13) + 34) + 940;
    do
    {
      CAHDecTansyLgh::populateTileRegisters((uint64_t)this, v3);
      v3 += 12;
      --v1;
    }
    while (v1);
  }
  return 0;
}

uint64_t CAHDecTansyLgh::populateCommonRegisters(CAHDecTansyLgh *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000002;
  return 0;
}

uint64_t CAHDecTansyLgh::updateCommonRegisters(CAHDecTansyLgh *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

uint64_t CAHDecTansyLgh::populateSequenceRegisters(CAHDecTansyLgh *this)
{
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  unsigned __int16 v3 = *(_DWORD *)(v2 + 108) - 1;
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (v3 | ((unsigned __int16)*(_DWORD *)(v2 + 112) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 304);
  if (v4 >= 3) {
    int v5 = 6528;
  }
  else {
    int v5 = ((v4 & 3) << 7) | 0x1800;
  }
  *(_DWORD *)(v1 + 44) = v5;
  unsigned int v6 = v5 & 0xFFF87FFF | (((*(unsigned char *)(v2 + 105) + 8) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFF87FFFF | (((*(unsigned __int8 *)(v2 + 105) + 8) & 0xF) << 19) | 0x1000000;
  *(_DWORD *)(v1 + 44) = v7;
  *(_DWORD *)(v1 + 44) = v7 & 0xFDFFFFFF | (*(unsigned char *)(v2 + 304) == 4);
  return 0;
}

uint64_t CAHDecTansyLgh::populatePictureRegisters(CAHDecTansyLgh *this)
{
  uint64_t v399 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v2 + 17560);
  if (*(unsigned char *)(v4 + 37)) {
    BOOL v5 = *(unsigned char *)(v4 + 40) != 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = *(_DWORD *)(v2 + 11748);
  int v7 = *(_DWORD *)(v4 + 100);
  int v393 = *(_DWORD *)(v4 + 96);
  int v392 = 1 << v7;
  char v8 = *(unsigned char *)(v2 + 2675);
  char v9 = *(unsigned char *)(v2 + 2674);
  if (v5) {
    int v10 = 766517248;
  }
  else {
    int v10 = 766509056;
  }
  *(_DWORD *)(v3 + 48) = v10;
  int v11 = v10 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v3 + 48) = v11;
  if (*(_DWORD *)(*((void *)this + 32) + 2644) == 1) {
    int v12 = 1024;
  }
  else {
    int v12 = 1;
  }
  unsigned int v13 = v12 & 0xFFFFFFF0 | (4 * (v8 & 3)) | v9 & 3 | v11 | 0x2E0;
  *(_DWORD *)(v3 + 48) = v13;
  int v14 = (unsigned char *)*((void *)this + 32);
  int v15 = v13 | ((v14[2652] & 1) << 19);
  *(_DWORD *)(v3 + 48) = v15;
  int v16 = v15 | ((v14[2653] & 1) << 18);
  *(_DWORD *)(v3 + 48) = v16;
  *(_DWORD *)(v3 + 48) = v16 | ((v14[2654] & 1) << 17);
  *(void *)(v3 + 52) = 0x2000000;
  LOWORD(v16) = *(_DWORD *)(v4 + 108) - 1;
  *(_DWORD *)(v3 + 56) = (unsigned __int16)v16;
  *(_DWORD *)(v3 + 56) = ((unsigned __int16)v16 | ((unsigned __int16)*(_DWORD *)(v4 + 112) << 16)) - 0x10000;
  *(void *)(v3 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v17 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2688) & 7;
  *(_DWORD *)(v3 + 64) = v17;
  unsigned int v18 = v17 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2692) & 1));
  *(_DWORD *)(v3 + 64) = v18;
  unsigned int v19 = v18 & 0xFFFFFF8F | (16 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2696) & 7));
  *(_DWORD *)(v3 + 64) = v19;
  unsigned int v20 = v19 & 0xFFFFFF7F | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2700) & 1) << 7);
  *(_DWORD *)(v3 + 64) = v20;
  unsigned int v21 = v20 & 0xFFFFF8FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2704) & 7) << 8);
  *(_DWORD *)(v3 + 64) = v21;
  unsigned int v22 = v21 & 0xFFFFF7FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2708) & 1) << 11);
  *(_DWORD *)(v3 + 64) = v22;
  unsigned int v23 = v22 & 0xFFFFCFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2712) & 3) << 12);
  *(_DWORD *)(v3 + 64) = v23;
  unsigned int v24 = v23 & 0xFFFFBFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2716) & 1) << 14);
  *(_DWORD *)(v3 + 64) = v24;
  unsigned int v25 = v24 & 0xFFFF7FFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2720) & 1) << 15);
  *(_DWORD *)(v3 + 64) = v25;
  unsigned int v26 = v25 & 0xFFF8FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2724) & 7) << 16);
  *(_DWORD *)(v3 + 64) = v26;
  unsigned int v27 = v26 & 0xFFF7FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2728) & 1) << 19);
  *(_DWORD *)(v3 + 64) = v27;
  unsigned int v28 = v27 & 0xFFEFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2732) & 1) << 20);
  *(_DWORD *)(v3 + 64) = v28;
  unsigned int v29 = v28 & 0xFFDFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2736) & 1) << 21);
  *(_DWORD *)(v3 + 64) = v29;
  unsigned int v30 = v29 & 0xFFBFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2740) & 1) << 22);
  *(_DWORD *)(v3 + 64) = v30;
  unsigned int v31 = v30 & 0xFF7FFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2744) & 1) << 23);
  *(_DWORD *)(v3 + 64) = v31;
  unsigned int v32 = v31 & 0xFEFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2748) & 1) << 24);
  *(_DWORD *)(v3 + 64) = v32;
  unsigned int v33 = v32 & 0xFDFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2752) & 1) << 25);
  *(_DWORD *)(v3 + 64) = v33;
  *(_DWORD *)(v3 + 64) = v33 & 0xFBFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2756) & 1) << 26);
  *(void *)(v3 + 68) = 0;
  if (*(unsigned char *)(v4 + 60))
  {
    int v34 = *(unsigned char *)(v4 + 69) & 0x7F;
    *(_DWORD *)(v3 + 68) = v34;
    unsigned int v35 = v34 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 68) & 0x7F) << 7);
    *(_DWORD *)(v3 + 68) = v35;
    unsigned int v36 = v35 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 67) & 0x7F) << 14);
    *(_DWORD *)(v3 + 68) = v36;
    unsigned int v37 = v36 & 0xF01FFFFF | ((*(unsigned char *)(v4 + 66) & 0x7F) << 21);
    *(_DWORD *)(v3 + 68) = v37;
    *(_DWORD *)(v3 + 68) = v37 & 0x8FFFFFFF | ((*(unsigned char *)(v4 + 59) & 7) << 28);
    int v38 = *(unsigned char *)(v4 + 73) & 0x7F;
    *(_DWORD *)(v3 + 72) = v38;
    unsigned int v39 = v38 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 72) & 0x7F) << 7);
    *(_DWORD *)(v3 + 72) = v39;
    unsigned int v40 = v39 & 0xFFF03FFF | ((*(unsigned char *)(v4 + 58) & 0x3F) << 14);
  }
  else
  {
    *(_DWORD *)(v3 + 68) = (*(unsigned char *)(v4 + 59) & 7) << 28;
    unsigned int v40 = (*(unsigned char *)(v4 + 58) & 0x3F) << 14;
  }
  uint64_t v41 = 0;
  int v394 = 1 << v393;
  int v391 = v7;
  int v390 = 1 << v393 << v7;
  *(_DWORD *)(v3 + 72) = v40;
  *(_DWORD *)(v3 + 76) = 0;
  int v42 = *(unsigned char *)(v4 + 77) & 0x1F;
  *(_DWORD *)(v3 + 76) = v42;
  unsigned int v43 = v42 & 0xFFFFFC1F | (32 * (*(unsigned char *)(v4 + 76) & 0x1F));
  *(_DWORD *)(v3 + 76) = v43;
  unsigned int v44 = v43 & 0xFFFF83FF | ((*(unsigned char *)(v4 + 75) & 0x1F) << 10);
  *(_DWORD *)(v3 + 76) = v44;
  *(_DWORD *)(v3 + 76) = v44 | (*(unsigned __int8 *)(v4 + 74) << 15);
  uint64_t v45 = v3 + 80;
  signed int v46 = (_WORD *)(v4 + 242);
  uint64_t v47 = v4 + 208;
  do
  {
    int v48 = *(unsigned __int8 *)(v4 + 78);
    *(_DWORD *)(v45 + v41) = 0;
    if (v48)
    {
      BOOL v49 = *(unsigned char *)(v47 + v41) != 0;
      *(_DWORD *)(v45 + v41) = v49;
      BOOL v50 = *(unsigned __int8 *)(v47 + v41 - 1) != 0;
    }
    else
    {
      BOOL v49 = 0;
      BOOL v50 = 0;
    }
    int v51 = v49 | (8 * v50);
    *(_DWORD *)(v45 + v41) = v51;
    unsigned int v52 = v51 & 0xFFFFFFF9 | (2 * (*v46 & 3));
    *(_DWORD *)(v45 + v41) = v52;
    if (v48)
    {
      int v53 = *(unsigned __int8 *)(v47 + v41 - 2);
      int v54 = v52 | ((*(unsigned char *)(v47 + v41 - 2) != 0) << 11);
      *(_DWORD *)(v45 + v41) = v54;
      if (v53) {
        LOWORD(v53) = *(v46 - 1);
      }
      unsigned int v55 = (16 * (v53 & 0x7F)) | v54 & 0xFFFFF80F;
      *(_DWORD *)(v45 + v41) = v55;
      int v48 = *(unsigned __int8 *)(v47 + v41 - 3);
      unsigned int v52 = v55 | ((v48 != 0) << 21);
      *(_DWORD *)(v45 + v41) = v52;
      if (v48) {
        LOWORD(v48) = *(v46 - 2);
      }
    }
    *(_DWORD *)(v45 + v41) = v52 & 0xFFE00FFF | ((v48 & 0x1FF) << 12);
    v41 += 4;
    v46 += 4;
  }
  while (v41 != 32);
  *(_DWORD *)(v3 + 152) = 0x20000;
  uint64_t v395 = v4;
  BOOL v388 = v5;
  if (v5)
  {
    uint64_t v389 = 8;
  }
  else
  {
    unsigned int v56 = (_DWORD *)(v3 + 112);
    uint64_t v57 = 2178;
    uint64_t v389 = 3;
    unsigned int v58 = &_os_log_internal;
    do
    {
      v56[11] = 0x1000000;
      *unsigned int v56 = 0;
      unsigned __int16 v59 = **(_DWORD **)(*((void *)this + 32) + 8 * v57) - 1;
      *unsigned int v56 = v59;
      *unsigned int v56 = (v59 | ((unsigned __int16)*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 16))
           - 0x10000;
      v56[3] = 0;
      int v60 = (unsigned __int16)((**(_DWORD **)(*((void *)this + 32) + 8 * v57) << 14) / *(_DWORD *)(v4 + 108));
      v56[3] = v60;
      int v61 = v60 | ((unsigned __int16)((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 14)
                                    / *(_DWORD *)(v4 + 112)) << 16);
      v56[3] = v61;
      if ((v60 - 1024) >= 0x7C01 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 545;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
        int v61 = v56[3];
      }
      if ((v61 - 0x4000000) >= 0x7C010000 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 546;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
      }
      ++v57;
      ++v56;
      uint64_t v4 = v395;
    }
    while (v57 != 2181);
  }
  *(void *)(v3 + 144) = 0;
  int v62 = *(unsigned __int16 *)(v4 + 2672);
  *(_DWORD *)(v3 + 144) = v62;
  *(_DWORD *)(v3 + 144) = v62 | (*(_DWORD *)(v4 + 2676) << 16);
  int v63 = *(unsigned __int16 *)(v4 + 2680);
  *(_DWORD *)(v3 + 148) = v63;
  *(_DWORD *)(v3 + 148) = v63 | (*(_DWORD *)(v4 + 2684) << 16);
  int v64 = (char *)this + 464;
  for (uint64_t i = 196; i != 224; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i - 28) = 0;
    uint64_t v66 = *((void *)this + 33) + i;
    int v67 = *(_DWORD *)(v66 - 28);
    *(_DWORD *)(v66 - 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i - 28) ^= 0xFFFFFF00;
    uint64_t v68 = *((void *)this + 33) + i;
    int v69 = *(_DWORD *)(v68 - 28);
    *(_DWORD *)(v68 - 28) = v67;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)i - 28, 0, 0xFFFFFFFFLL, 8, v69, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) = *(_DWORD *)(*((void *)this + 33) + i) & 0x800001FF | (((*((_DWORD *)this + 780) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + i + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    uint64_t v71 = *((void *)this + 33) + i;
    int v72 = *(_DWORD *)(v71 + 180);
    *(_DWORD *)(v71 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 180) ^= 0x3FFu;
    uint64_t v73 = *((void *)this + 33) + i;
    int v74 = *(_DWORD *)(v73 + 180);
    *(_DWORD *)(v73 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v72;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)i + 180, 0, 0x3FFFFFFFFFFLL, 32, v74, 4);
      if (result) {
        return result;
      }
    }
    v64 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 224) = 0;
  uint64_t v75 = *((void *)this + 33);
  int v76 = *(_DWORD *)(v75 + 224);
  *(_DWORD *)(v75 + 224) = 0;
  *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFF00;
  uint64_t v77 = *((void *)this + 33);
  int v78 = *(_DWORD *)(v77 + 224);
  *(_DWORD *)(v77 + 224) = v76;
  uint64_t v79 = *((void *)this + 32);
  if (*(void *)(v79 + 5184) || *(_DWORD *)(v79 + 5336) || *(_DWORD *)(v79 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v79 + 5184), 224, 0, 0xFFFFFFFFLL, 8, v78, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 404) = 0;
  uint64_t v80 = *((void *)this + 33);
  int v81 = *(_DWORD *)(v80 + 404);
  *(_DWORD *)(v80 + 404) = 0;
  *(_DWORD *)(*((void *)this + 33) + 404) ^= 0x3FFu;
  uint64_t v82 = *((void *)this + 33);
  int v83 = *(_DWORD *)(v82 + 404);
  *(_DWORD *)(v82 + 404) = v81;
  uint64_t v84 = *((void *)this + 32);
  if (*(void *)(v84 + 5184) || *(_DWORD *)(v84 + 5336) || *(_DWORD *)(v84 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v84 + 5184), 404, 0, 0x3FFFFFFFFFFLL, 32, v83, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 228) = 0;
  *(_DWORD *)(*((void *)this + 33) + 408) = 0;
  if ((*(unsigned char *)(v3 + 50) & 8) != 0)
  {
    uint64_t v85 = *((void *)this + 33);
    uint64_t v86 = *(void *)(*((void *)this + 32) + 2680);
    long long v397 = 0u;
    long long v398 = 0u;
    memset(buf, 0, sizeof(buf));
    int v87 = (*(_DWORD *)(v85 + 16) & 0xF) << 9;
    *(void *)&buf[0] = v86;
    int v88 = *(_DWORD *)(v85 + 228);
    *(_DWORD *)(v85 + 228) = 0;
    *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFF00;
    uint64_t v89 = *((void *)this + 33);
    int v90 = *(_DWORD *)(v89 + 228);
    *(_DWORD *)(v89 + 228) = v88;
    if (v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 228, v87, 0xFFFFFFFFLL, 8, v90, 4);
      if (result) {
        return result;
      }
      uint64_t v91 = *(void *)&buf[0];
      int v92 = DWORD2(v397);
      LODWORD(v86) = HIDWORD(v397);
    }
    else
    {
      int v92 = 0;
      uint64_t v91 = 0;
    }
    *(_DWORD *)(*((void *)this + 33) + 408) = 0;
    uint64_t v93 = *((void *)this + 33);
    int v94 = *(_DWORD *)(v93 + 408);
    *(_DWORD *)(v93 + 408) = 0;
    *(_DWORD *)(*((void *)this + 33) + 408) ^= 0x3FFu;
    uint64_t v95 = *((void *)this + 33);
    int v96 = *(_DWORD *)(v95 + 408);
    *(_DWORD *)(v95 + 408) = v94;
    if (v91 || v92 || v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 408, v87, 0x3FFFFFFFFFFLL, 32, v96, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v97 = *((void *)this + 33);
  int v98 = *(_DWORD *)(v97 + 280);
  *(_DWORD *)(v97 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 280) ^= 0xFFFFFF00;
  uint64_t v99 = *((void *)this + 33);
  int v100 = *(_DWORD *)(v99 + 280);
  *(_DWORD *)(v99 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v98;
  if (*((void *)this + 278) || *((_DWORD *)this + 594) || *((_DWORD *)this + 595))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 280, 0, 0xFFFFFFFFLL, 8, v100, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v101 = *((void *)this + 33);
  int v102 = *(_DWORD *)(v101 + 460);
  *(_DWORD *)(v101 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 460) ^= 0x3FFu;
  uint64_t v103 = *((void *)this + 33);
  int v104 = *(_DWORD *)(v103 + 460);
  *(_DWORD *)(v103 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v102;
  if (*((void *)this + 278) || *((_DWORD *)this + 594) || *((_DWORD *)this + 595))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 460, 0, 0x3FFFFFFFFFFLL, 32, v104, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 232) = 0;
  uint64_t v105 = *((void *)this + 33);
  int v106 = *(_DWORD *)(v105 + 232);
  *(_DWORD *)(v105 + 232) = 0;
  *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFF00;
  uint64_t v107 = *((void *)this + 33);
  int v108 = *(_DWORD *)(v107 + 232);
  *(_DWORD *)(v107 + 232) = v106;
  if (*((void *)this + 234) || *((_DWORD *)this + 506) || *((_DWORD *)this + 507))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 232, 0, 0xFFFFFFFFLL, 8, v108, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 412) = 0;
  uint64_t v109 = *((void *)this + 33);
  int v110 = *(_DWORD *)(v109 + 412);
  *(_DWORD *)(v109 + 412) = 0;
  *(_DWORD *)(*((void *)this + 33) + 412) ^= 0x3FFu;
  uint64_t v111 = *((void *)this + 33);
  int v112 = *(_DWORD *)(v111 + 412);
  *(_DWORD *)(v111 + 412) = v110;
  if (*((void *)this + 234) || *((_DWORD *)this + 506) || *((_DWORD *)this + 507))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 412, 0, 0x3FFFFFFFFFFLL, 32, v112, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 236) = 0;
  uint64_t v113 = *((void *)this + 33);
  int v114 = *(_DWORD *)(v113 + 236);
  *(_DWORD *)(v113 + 236) = 0;
  *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFF00;
  uint64_t v115 = *((void *)this + 33);
  int v116 = *(_DWORD *)(v115 + 236);
  *(_DWORD *)(v115 + 236) = v114;
  if (*((void *)this + 256) || *((_DWORD *)this + 550) || *((_DWORD *)this + 551))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 236, 0, 0xFFFFFFFFLL, 8, v116, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 416) = 0;
  uint64_t v117 = *((void *)this + 33);
  int v118 = *(_DWORD *)(v117 + 416);
  *(_DWORD *)(v117 + 416) = 0;
  *(_DWORD *)(*((void *)this + 33) + 416) ^= 0x3FFu;
  uint64_t v119 = *((void *)this + 33);
  int v120 = *(_DWORD *)(v119 + 416);
  *(_DWORD *)(v119 + 416) = v118;
  if (*((void *)this + 256) || *((_DWORD *)this + 550) || *((_DWORD *)this + 551))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 416, 0, 0x3FFFFFFFFFFLL, 32, v120, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 42pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) = 0;
  uint64_t v121 = *((void *)this + 33);
  int v122 = *(_DWORD *)(v121 + 244);
  *(_DWORD *)(v121 + 244) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFF00;
  uint64_t v123 = *((void *)this + 33);
  int v124 = *(_DWORD *)(v123 + 244);
  *(_DWORD *)(v123 + 244) = v122;
  if (*((void *)this + 300) || *((_DWORD *)this + 638) || *((_DWORD *)this + 639))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 244, 0, 0xFFFFFFFFLL, 8, v124, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 424) = 0;
  uint64_t v125 = *((void *)this + 33);
  int v126 = *(_DWORD *)(v125 + 424);
  *(_DWORD *)(v125 + 424) = 0;
  *(_DWORD *)(*((void *)this + 33) + 424) ^= 0x3FFu;
  uint64_t v127 = *((void *)this + 33);
  int v128 = *(_DWORD *)(v127 + 424);
  *(_DWORD *)(v127 + 424) = v126;
  if (*((void *)this + 300) || *((_DWORD *)this + 638) || *((_DWORD *)this + 639))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 424, 0, 0x3FFFFFFFFFFLL, 32, v128, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 248) = 0;
  uint64_t v129 = *((void *)this + 33);
  int v130 = *(_DWORD *)(v129 + 248);
  *(_DWORD *)(v129 + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFF00;
  uint64_t v131 = *((void *)this + 33);
  int v132 = *(_DWORD *)(v131 + 248);
  *(_DWORD *)(v131 + 248) = v130;
  if (*((void *)this + 322) || *((_DWORD *)this + 682) || *((_DWORD *)this + 683))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 248, 0, 0xFFFFFFFFLL, 8, v132, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 428) = 0;
  uint64_t v133 = *((void *)this + 33);
  int v134 = *(_DWORD *)(v133 + 428);
  *(_DWORD *)(v133 + 428) = 0;
  *(_DWORD *)(*((void *)this + 33) + 428) ^= 0x3FFu;
  uint64_t v135 = *((void *)this + 33);
  int v136 = *(_DWORD *)(v135 + 428);
  *(_DWORD *)(v135 + 428) = v134;
  if (*((void *)this + 322) || *((_DWORD *)this + 682) || *((_DWORD *)this + 683))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 428, 0, 0x3FFFFFFFFFFLL, 32, v136, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 432) = 0;
  uint64_t v137 = *((void *)this + 33);
  int v138 = *(_DWORD *)(v137 + 252);
  *(_DWORD *)(v137 + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFF00;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 252);
  *(_DWORD *)(v139 + 252) = v138;
  if (*((void *)this + 344) || *((_DWORD *)this + 726) || *((_DWORD *)this + 727))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 252, 0, 0xFFFFFFFFLL, 8, v140, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 432);
  *(_DWORD *)(v141 + 432) = 0;
  *(_DWORD *)(*((void *)this + 33) + 432) ^= 0x3FFu;
  uint64_t v143 = *((void *)this + 33);
  int v144 = *(_DWORD *)(v143 + 432);
  *(_DWORD *)(v143 + 432) = v142;
  if (*((void *)this + 344) || *((_DWORD *)this + 726) || *((_DWORD *)this + 727))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 432, 0, 0x3FFFFFFFFFFLL, 32, v144, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 256) = 0;
  uint64_t v145 = *((void *)this + 33);
  int v146 = *(_DWORD *)(v145 + 256);
  *(_DWORD *)(v145 + 256) = 0;
  *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFF00;
  uint64_t v147 = *((void *)this + 33);
  int v148 = *(_DWORD *)(v147 + 256);
  *(_DWORD *)(v147 + 256) = v146;
  if (*((void *)this + 366) || *((_DWORD *)this + 770) || *((_DWORD *)this + 771))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 256, 0, 0xFFFFFFFFLL, 8, v148, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 436) = 0;
  uint64_t v149 = *((void *)this + 33);
  int v150 = *(_DWORD *)(v149 + 436);
  *(_DWORD *)(v149 + 436) = 0;
  *(_DWORD *)(*((void *)this + 33) + 436) ^= 0x3FFu;
  uint64_t v151 = *((void *)this + 33);
  int v152 = *(_DWORD *)(v151 + 436);
  *(_DWORD *)(v151 + 436) = v150;
  if (*((void *)this + 366) || *((_DWORD *)this + 770) || *((_DWORD *)this + 771))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 436, 0, 0x3FFFFFFFFFFLL, 32, v152, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v153 = *((void *)this + 33);
  int v154 = *(_DWORD *)(v153 + 260);
  *(_DWORD *)(v153 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFF00;
  uint64_t v155 = *((void *)this + 33);
  int v156 = *(_DWORD *)(v155 + 260);
  *(_DWORD *)(v155 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v154;
  uint64_t v157 = *((void *)this + 32);
  unsigned int v158 = *(_DWORD *)(v157 + 17568);
  uint64_t v159 = v157 + 176 * v158;
  if (*(void *)(v159 + 3072) || *(_DWORD *)(v157 + 176 * v158 + 3224) || *(_DWORD *)(v157 + 176 * v158 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v159 + 3072), 260, 0, 0xFFFFFFFFLL, 8, v156, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v160 = *((void *)this + 33);
  int v161 = *(_DWORD *)(v160 + 440);
  *(_DWORD *)(v160 + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 440) ^= 0x3FFu;
  uint64_t v162 = *((void *)this + 33);
  int v163 = *(_DWORD *)(v162 + 440);
  *(_DWORD *)(v162 + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v161;
  uint64_t v164 = *((void *)this + 32);
  unsigned int v165 = *(_DWORD *)(v164 + 17568);
  uint64_t v166 = v164 + 176 * v165;
  if (*(void *)(v166 + 3072) || *(_DWORD *)(v164 + 176 * v165 + 3224) || *(_DWORD *)(v164 + 176 * v165 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v166 + 3072), 440, 0, 0x3FFFFFFFFFFLL, 32, v163, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 264) = 0;
  uint64_t v167 = *((void *)this + 33);
  int v168 = *(_DWORD *)(v167 + 264);
  *(_DWORD *)(v167 + 264) = 0;
  *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFF00;
  uint64_t v169 = *((void *)this + 33);
  int v170 = *(_DWORD *)(v169 + 264);
  *(_DWORD *)(v169 + 264) = v168;
  uint64_t v171 = *((void *)this + 32);
  int v172 = *(_DWORD *)(v171 + 5724);
  uint64_t v173 = v171 + 176 * v172;
  if (*(void *)(v173 + 3776) || *(_DWORD *)(v171 + 176 * v172 + 3928) || *(_DWORD *)(v171 + 176 * v172 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v173 + 3776), 264, 0, 0xFFFFFFFFLL, 8, v170, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 444) = 0;
  uint64_t v174 = *((void *)this + 33);
  int v175 = *(_DWORD *)(v174 + 444);
  *(_DWORD *)(v174 + 444) = 0;
  *(_DWORD *)(*((void *)this + 33) + 444) ^= 0x3FFu;
  uint64_t v176 = *((void *)this + 33);
  int v177 = *(_DWORD *)(v176 + 444);
  *(_DWORD *)(v176 + 444) = v175;
  uint64_t v178 = *((void *)this + 32);
  int v179 = *(_DWORD *)(v178 + 5724);
  uint64_t v180 = v178 + 176 * v179;
  if (*(void *)(v180 + 3776) || *(_DWORD *)(v178 + 176 * v179 + 3928) || *(_DWORD *)(v178 + 176 * v179 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v180 + 3776), 444, 0, 0x3FFFFFFFFFFLL, 32, v177, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 268) = 0;
  uint64_t v181 = *((void *)this + 33);
  int v182 = *(_DWORD *)(v181 + 268);
  *(_DWORD *)(v181 + 268) = 0;
  *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFF00;
  uint64_t v183 = *((void *)this + 33);
  int v184 = *(_DWORD *)(v183 + 268);
  *(_DWORD *)(v183 + 268) = v182;
  uint64_t v185 = *((void *)this + 32);
  int v186 = *(_DWORD *)(v185 + 5720);
  uint64_t v187 = v185 + 176 * v186;
  if (*(void *)(v187 + 3776) || *(_DWORD *)(v185 + 176 * v186 + 3928) || *(_DWORD *)(v185 + 176 * v186 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v187 + 3776), 268, 0, 0xFFFFFFFFLL, 8, v184, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 448) = 0;
  uint64_t v188 = *((void *)this + 33);
  int v189 = *(_DWORD *)(v188 + 448);
  *(_DWORD *)(v188 + 448) = 0;
  *(_DWORD *)(*((void *)this + 33) + 448) ^= 0x3FFu;
  uint64_t v190 = *((void *)this + 33);
  int v191 = *(_DWORD *)(v190 + 448);
  *(_DWORD *)(v190 + 448) = v189;
  uint64_t v192 = *((void *)this + 32);
  int v193 = *(_DWORD *)(v192 + 5720);
  uint64_t v194 = v192 + 176 * v193;
  if (*(void *)(v194 + 3776) || *(_DWORD *)(v192 + 176 * v193 + 3928) || *(_DWORD *)(v192 + 176 * v193 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v194 + 3776), 448, 0, 0x3FFFFFFFFFFLL, 32, v191, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 272) = 0;
  uint64_t v195 = *((void *)this + 33);
  int v196 = *(_DWORD *)(v195 + 272);
  *(_DWORD *)(v195 + 272) = 0;
  *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFF00;
  uint64_t v197 = *((void *)this + 33);
  int v198 = *(_DWORD *)(v197 + 272);
  *(_DWORD *)(v197 + 272) = v196;
  uint64_t v199 = *((void *)this + 32);
  int v200 = *(_DWORD *)(v199 + 5716);
  uint64_t v201 = v199 + 176 * v200;
  if (*(void *)(v201 + 5360) || *(_DWORD *)(v199 + 176 * v200 + 5512) || *(_DWORD *)(v199 + 176 * v200 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v201 + 5360), 272, 0, 0xFFFFFFFFLL, 8, v198, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 452) = 0;
  uint64_t v202 = *((void *)this + 33);
  int v203 = *(_DWORD *)(v202 + 452);
  *(_DWORD *)(v202 + 452) = 0;
  *(_DWORD *)(*((void *)this + 33) + 452) ^= 0x3FFu;
  uint64_t v204 = *((void *)this + 33);
  int v205 = *(_DWORD *)(v204 + 452);
  *(_DWORD *)(v204 + 452) = v203;
  uint64_t v206 = *((void *)this + 32);
  int v207 = *(_DWORD *)(v206 + 5716);
  uint64_t v208 = v206 + 176 * v207;
  if (*(void *)(v208 + 5360) || *(_DWORD *)(v206 + 176 * v207 + 5512) || *(_DWORD *)(v206 + 176 * v207 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v208 + 5360), 452, 0, 0x3FFFFFFFFFFLL, 32, v205, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 276) = 0;
  uint64_t v209 = *((void *)this + 33);
  int v210 = *(_DWORD *)(v209 + 276);
  *(_DWORD *)(v209 + 276) = 0;
  *(_DWORD *)(*((void *)this + 33) + 276) ^= 0xFFFFFF00;
  uint64_t v211 = *((void *)this + 33);
  int v212 = *(_DWORD *)(v211 + 276);
  *(_DWORD *)(v211 + 276) = v210;
  uint64_t v213 = *((void *)this + 32);
  int v214 = *(_DWORD *)(v213 + 5712);
  uint64_t v215 = v213 + 176 * v214;
  if (*(void *)(v215 + 5360) || *(_DWORD *)(v213 + 176 * v214 + 5512) || *(_DWORD *)(v213 + 176 * v214 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v215 + 5360), 276, 0, 0xFFFFFFFFLL, 8, v212, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 456) = 0;
  uint64_t v216 = *((void *)this + 33);
  int v217 = *(_DWORD *)(v216 + 456);
  *(_DWORD *)(v216 + 456) = 0;
  *(_DWORD *)(*((void *)this + 33) + 456) ^= 0x3FFu;
  uint64_t v218 = *((void *)this + 33);
  int v219 = *(_DWORD *)(v218 + 456);
  *(_DWORD *)(v218 + 456) = v217;
  uint64_t v220 = *((void *)this + 32);
  int v221 = *(_DWORD *)(v220 + 5712);
  uint64_t v222 = v220 + 176 * v221;
  if (*(void *)(v222 + 5360) || *(_DWORD *)(v220 + 176 * v221 + 5512) || *(_DWORD *)(v220 + 176 * v221 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v222 + 5360), 456, 0, 0x3FFFFFFFFFFLL, 32, v219, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 464) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 468) = 0;
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 472) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 476) = 0;
  uint64_t v223 = *((void *)this + 33);
  int v224 = *(_DWORD *)(v223 + 288);
  *(_DWORD *)(v223 + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) ^= 0xFFFFFF80;
  uint64_t v225 = *((void *)this + 33);
  int v226 = *(_DWORD *)(v225 + 288);
  *(_DWORD *)(v225 + 288) = v224;
  uint64_t v227 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v227 || *(_DWORD *)(v227 + 152) || *(_DWORD *)(v227 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v227, 288, *(_DWORD *)(v227 + 52), 0xFFFFFFFFLL, 7, v226, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v228 = *((void *)this + 33);
  int v229 = *(_DWORD *)(v228 + 468);
  *(_DWORD *)(v228 + 468) = 0;
  *(_DWORD *)(*((void *)this + 33) + 468) ^= 0x3FFu;
  uint64_t v230 = *((void *)this + 33);
  int v231 = *(_DWORD *)(v230 + 468);
  *(_DWORD *)(v230 + 468) = v229;
  uint64_t v232 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v232 || *(_DWORD *)(v232 + 152) || *(_DWORD *)(v232 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v232, 468, *(_DWORD *)(v232 + 52), 0x3FFFFFFFFFFLL, 32, v231, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v233 = *((void *)this + 33);
  int v234 = *(_DWORD *)(v233 + 296);
  *(_DWORD *)(v233 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0xFFFFFF80;
  uint64_t v235 = *((void *)this + 33);
  int v236 = *(_DWORD *)(v235 + 296);
  *(_DWORD *)(v235 + 296) = v234;
  uint64_t v237 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v237 || *(_DWORD *)(v237 + 152) || *(_DWORD *)(v237 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v237, 296, *(_DWORD *)(v237 + 56), 0xFFFFFFFFLL, 7, v236, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v238 = v3;
  uint64_t v239 = *((void *)this + 33);
  int v240 = *(_DWORD *)(v239 + 476);
  *(_DWORD *)(v239 + 476) = 0;
  *(_DWORD *)(*((void *)this + 33) + 476) ^= 0x3FFu;
  uint64_t v241 = *((void *)this + 33);
  int v242 = *(_DWORD *)(v241 + 476);
  *(_DWORD *)(v241 + 476) = v240;
  uint64_t v243 = *((void *)this + 32);
  uint64_t v244 = *(void *)(v243 + 376 * v6 + 5736);
  if (*(void *)v244 || *(_DWORD *)(v244 + 152) || *(_DWORD *)(v244 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v244, 476, *(_DWORD *)(v244 + 56), 0x3FFFFFFFFFFLL, 32, v242, 4);
    if (result) {
      return result;
    }
    uint64_t v243 = *((void *)this + 32);
  }
  int v245 = *(_DWORD *)(v243 + 2648);
  uint64_t v246 = *((void *)this + 33);
  int v247 = *(_DWORD *)(v246 + 284);
  *(_DWORD *)(v246 + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 284) ^= 0xFFFFFF80;
  uint64_t v248 = *((void *)this + 33);
  int v249 = *(_DWORD *)(v248 + 284);
  *(_DWORD *)(v248 + 284) = v247;
  uint64_t v250 = *((void *)this + 32);
  if (v245 == 1)
  {
    uint64_t v251 = *(void *)(v250 + 376 * v6 + 5736);
    if (*(void *)v251 || *(_DWORD *)(v251 + 152) || *(_DWORD *)(v251 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v251, 284, *(_DWORD *)(v251 + 64), 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v252 = *((void *)this + 33);
    int v253 = *(_DWORD *)(v252 + 464);
    *(_DWORD *)(v252 + 464) = 0;
    *(_DWORD *)(*((void *)this + 33) + 464) ^= 0x3FFu;
    uint64_t v254 = *((void *)this + 33);
    int v255 = *(_DWORD *)(v254 + 464);
    *(_DWORD *)(v254 + 464) = v253;
    uint64_t v256 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v256 || *(_DWORD *)(v256 + 152) || *(_DWORD *)(v256 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v256, 464, *(_DWORD *)(v256 + 64), 0x3FFFFFFFFFFLL, 32, v255, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v257 = *((void *)this + 33);
    int v258 = *(_DWORD *)(v257 + 292);
    *(_DWORD *)(v257 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF80;
    uint64_t v259 = *((void *)this + 33);
    int v260 = *(_DWORD *)(v259 + 292);
    *(_DWORD *)(v259 + 292) = v258;
    uint64_t v261 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v261 || *(_DWORD *)(v261 + 152) || *(_DWORD *)(v261 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v261, 292, *(_DWORD *)(v261 + 68), 0xFFFFFFFFLL, 7, v260, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v262 = *((void *)this + 33);
    int v263 = *(_DWORD *)(v262 + 472);
    *(_DWORD *)(v262 + 472) = 0;
    *(_DWORD *)(*((void *)this + 33) + 472) ^= 0x3FFu;
    uint64_t v264 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v264 + 472);
    *(_DWORD *)(v264 + 472) = v263;
    uint64_t v266 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v266 || *(_DWORD *)(v266 + 152) || *(_DWORD *)(v266 + 156))
    {
      int v267 = *(_DWORD *)(v266 + 68);
      int v268 = this;
      goto LABEL_207;
    }
  }
  else
  {
    uint64_t v269 = v250 + 376 * v6;
    if (*(void *)(v269 + 5752) || *(_DWORD *)(v250 + 376 * v6 + 5904) || *(_DWORD *)(v250 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v269 + 5752), 284, 0, 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v270 = *((void *)this + 33);
    int v271 = *(_DWORD *)(v270 + 464);
    *(_DWORD *)(v270 + 464) = 0;
    *(_DWORD *)(*((void *)this + 33) + 464) ^= 0x3FFu;
    uint64_t v272 = *((void *)this + 33);
    int v273 = *(_DWORD *)(v272 + 464);
    *(_DWORD *)(v272 + 464) = v271;
    uint64_t v274 = *((void *)this + 32);
    uint64_t v275 = v274 + 376 * v6;
    if (*(void *)(v275 + 5752) || *(_DWORD *)(v274 + 376 * v6 + 5904) || *(_DWORD *)(v274 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v275 + 5752), 464, 0, 0x3FFFFFFFFFFLL, 32, v273, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v276 = *((void *)this + 33);
    int v277 = *(_DWORD *)(v276 + 292);
    *(_DWORD *)(v276 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF80;
    uint64_t v278 = *((void *)this + 33);
    int v279 = *(_DWORD *)(v278 + 292);
    *(_DWORD *)(v278 + 292) = v277;
    uint64_t v280 = *((void *)this + 32);
    uint64_t v281 = v280 + 376 * v6;
    if (*(void *)(v281 + 5928) || *(_DWORD *)(v280 + 376 * v6 + 6080) || *(_DWORD *)(v280 + 376 * v6 + 6084))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v281 + 5928), 292, 0, 0xFFFFFFFFLL, 7, v279, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v282 = *((void *)this + 33);
    int v283 = *(_DWORD *)(v282 + 472);
    *(_DWORD *)(v282 + 472) = 0;
    *(_DWORD *)(*((void *)this + 33) + 472) ^= 0x3FFu;
    uint64_t v284 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v284 + 472);
    *(_DWORD *)(v284 + 472) = v283;
    uint64_t v285 = *((void *)this + 32);
    uint64_t v286 = v285 + 376 * v6;
    if (*(void *)(v286 + 5928) || *(_DWORD *)(v285 + 376 * v6 + 6080) || *(_DWORD *)(v285 + 376 * v6 + 6084))
    {
      uint64_t v266 = v286 + 5928;
      int v268 = this;
      int v267 = 0;
LABEL_207:
      uint64_t result = CAHDec::addToPatcherList((uint64_t)v268, (void *)v266, 472, v267, 0x3FFFFFFFFFFLL, 32, v265, 4);
      if (result) {
        return result;
      }
    }
  }
  if (!v388)
  {
    uint64_t v319 = 0;
    uint64_t v320 = 17424;
    do
    {
      uint64_t v321 = *(void *)(*(void *)(*((void *)this + 32) + v320) + 40);
      *(_DWORD *)(*((void *)this + 33) + v319 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 48pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 492) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 336) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 504) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 516) = 0;
      uint64_t v322 = *((void *)this + 33) + v319;
      int v323 = *(_DWORD *)(v322 + 324);
      *(_DWORD *)(v322 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 324) ^= 0xFFFFFF80;
      uint64_t v324 = *((void *)this + 33) + v319;
      int v325 = *(_DWORD *)(v324 + 324);
      *(_DWORD *)(v324 + 324) = v323;
      uint64_t v326 = *(void *)(v321 + 8);
      if (*(void *)v326 || *(_DWORD *)(v326 + 152) || *(_DWORD *)(v326 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v326, (int)v319 + 324, *(_DWORD *)(v326 + 52), 0xFFFFFFFFLL, 7, v325, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v327 = *((void *)this + 33) + v319;
      int v328 = *(_DWORD *)(v327 + 492);
      *(_DWORD *)(v327 + 492) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 492) ^= 0x3FFu;
      uint64_t v329 = *((void *)this + 33) + v319;
      int v330 = *(_DWORD *)(v329 + 492);
      *(_DWORD *)(v329 + 492) = v328;
      uint64_t v331 = *(void *)(v321 + 8);
      if (*(void *)v331 || *(_DWORD *)(v331 + 152) || *(_DWORD *)(v331 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v331, (int)v319 + 492, *(_DWORD *)(v331 + 52), 0x3FFFFFFFFFFLL, 32, v330, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v332 = *((void *)this + 33) + v319;
      int v333 = *(_DWORD *)(v332 + 348);
      *(_DWORD *)(v332 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 348) ^= 0xFFFFFF80;
      uint64_t v334 = *((void *)this + 33) + v319;
      int v335 = *(_DWORD *)(v334 + 348);
      *(_DWORD *)(v334 + 348) = v333;
      uint64_t v336 = *(void *)(v321 + 8);
      if (*(void *)v336 || *(_DWORD *)(v336 + 152) || *(_DWORD *)(v336 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v336, (int)v319 + 348, *(_DWORD *)(v336 + 56), 0xFFFFFFFFLL, 7, v335, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v337 = *((void *)this + 33) + v319;
      int v338 = *(_DWORD *)(v337 + 516);
      *(_DWORD *)(v337 + 516) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 516) ^= 0x3FFu;
      uint64_t v339 = *((void *)this + 33) + v319;
      int v340 = *(_DWORD *)(v339 + 516);
      *(_DWORD *)(v339 + 516) = v338;
      uint64_t v341 = *(void *)(v321 + 8);
      if (*(void *)v341 || *(_DWORD *)(v341 + 152) || *(_DWORD *)(v341 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v341, (int)v319 + 516, *(_DWORD *)(v341 + 56), 0x3FFFFFFFFFFLL, 32, v340, 4);
        if (result) {
          return result;
        }
      }
      int v342 = *(_DWORD *)(*((void *)this + 32) + 2648);
      uint64_t v343 = *((void *)this + 33) + v319;
      int v344 = *(_DWORD *)(v343 + 312);
      *(_DWORD *)(v343 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 312) ^= 0xFFFFFF80;
      uint64_t v345 = *((void *)this + 33) + v319;
      int v346 = *(_DWORD *)(v345 + 312);
      *(_DWORD *)(v345 + 312) = v344;
      if (v342 == 1)
      {
        uint64_t v347 = *(void *)(v321 + 8);
        if (*(void *)v347 || *(_DWORD *)(v347 + 152) || *(_DWORD *)(v347 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v347, (int)v319 + 312, *(_DWORD *)(v347 + 64), 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v348 = *((void *)this + 33) + v319;
        int v349 = *(_DWORD *)(v348 + 480);
        *(_DWORD *)(v348 + 48pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 480) ^= 0x3FFu;
        uint64_t v350 = *((void *)this + 33) + v319;
        int v351 = *(_DWORD *)(v350 + 480);
        *(_DWORD *)(v350 + 48pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v349;
        uint64_t v352 = *(void *)(v321 + 8);
        if (*(void *)v352 || *(_DWORD *)(v352 + 152) || *(_DWORD *)(v352 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v352, (int)v319 + 480, *(_DWORD *)(v352 + 64), 0x3FFFFFFFFFFLL, 32, v351, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v353 = *((void *)this + 33) + v319;
        int v354 = *(_DWORD *)(v353 + 336);
        *(_DWORD *)(v353 + 336) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 336) ^= 0xFFFFFF80;
        uint64_t v355 = *((void *)this + 33) + v319;
        int v356 = *(_DWORD *)(v355 + 336);
        *(_DWORD *)(v355 + 336) = v354;
        uint64_t v357 = *(void *)(v321 + 8);
        if (*(void *)v357 || *(_DWORD *)(v357 + 152) || *(_DWORD *)(v357 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v357, (int)v319 + 336, *(_DWORD *)(v357 + 68), 0xFFFFFFFFLL, 7, v356, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v358 = *((void *)this + 33) + v319;
        int v359 = *(_DWORD *)(v358 + 504);
        *(_DWORD *)(v358 + 504) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 504) ^= 0x3FFu;
        uint64_t v360 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v360 + 504);
        *(_DWORD *)(v360 + 504) = v359;
        uint64_t v362 = *(void *)(v321 + 8);
        if (*(void *)v362 || *(_DWORD *)(v362 + 152) || *(_DWORD *)(v362 + 156))
        {
          int v363 = *(_DWORD *)(v362 + 68);
          int v364 = v319 + 504;
          int v365 = this;
          goto LABEL_298;
        }
      }
      else
      {
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 312, 0, 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v366 = *((void *)this + 33) + v319;
        int v367 = *(_DWORD *)(v366 + 480);
        *(_DWORD *)(v366 + 48pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 480) ^= 0x3FFu;
        uint64_t v368 = *((void *)this + 33) + v319;
        int v369 = *(_DWORD *)(v368 + 480);
        *(_DWORD *)(v368 + 48pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v367;
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 480, 0, 0x3FFFFFFFFFFLL, 32, v369, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v370 = *((void *)this + 33) + v319;
        int v371 = *(_DWORD *)(v370 + 336);
        *(_DWORD *)(v370 + 336) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 336) ^= 0xFFFFFF80;
        uint64_t v372 = *((void *)this + 33) + v319;
        int v373 = *(_DWORD *)(v372 + 336);
        *(_DWORD *)(v372 + 336) = v371;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 200), (int)v319 + 336, 0, 0xFFFFFFFFLL, 7, v373, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v374 = *((void *)this + 33) + v319;
        int v375 = *(_DWORD *)(v374 + 504);
        *(_DWORD *)(v374 + 504) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 504) ^= 0x3FFu;
        uint64_t v376 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v376 + 504);
        *(_DWORD *)(v376 + 504) = v375;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          int v364 = v319 + 504;
          int v365 = this;
          uint64_t v362 = v321 + 200;
          int v363 = 0;
LABEL_298:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v365, (void *)v362, v364, v363, 0x3FFFFFFFFFFLL, 32, v361, 4);
          if (result) {
            return result;
          }
        }
      }
      v320 += 8;
      v319 += 4;
    }
    while (v319 != 12);
  }
  unsigned int v287 = subWidth[*(int *)(*(void *)(*((void *)this + 32) + 17560) + 4)];
  *(_DWORD *)(*((void *)this + 33) + 36pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 528) = 0;
  *(_DWORD *)(*((void *)this + 33) + 364) = 0;
  *(_DWORD *)(*((void *)this + 33) + 532) = 0;
  *(_DWORD *)(*((void *)this + 33) + 368) = 0;
  *(_DWORD *)(*((void *)this + 33) + 372) = 0;
  if (!*(_DWORD *)(*((void *)this + 32) + 2644)) {
    goto LABEL_230;
  }
  uint64_t v288 = *((void *)this + 33);
  int v289 = *(_DWORD *)(v288 + 360);
  *(_DWORD *)(v288 + 36pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 360) ^= 0xFFFFFFC0;
  uint64_t v290 = *((void *)this + 33);
  int v291 = *(_DWORD *)(v290 + 360);
  *(_DWORD *)(v290 + 36pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v289;
  uint64_t v292 = *(void *)(*((void *)this + 32) + 11768);
  if (!*(void *)v292 && !*(_DWORD *)(v292 + 152) && !*(_DWORD *)(v292 + 156)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v292, 360, *(_DWORD *)(v292 + 52), 0xFFFFFFFFLL, 6, v291, 4), !result))
  {
    uint64_t v293 = *((void *)this + 33);
    int v294 = *(_DWORD *)(v293 + 528);
    *(_DWORD *)(v293 + 528) = 0;
    *(_DWORD *)(*((void *)this + 33) + 528) ^= 0x3FFu;
    uint64_t v295 = *((void *)this + 33);
    int v296 = *(_DWORD *)(v295 + 528);
    *(_DWORD *)(v295 + 528) = v294;
    uint64_t v297 = *(void *)(*((void *)this + 32) + 11768);
    if (!*(void *)v297 && !*(_DWORD *)(v297 + 152) && !*(_DWORD *)(v297 + 156)) {
      goto LABEL_330;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v297, 528, *(_DWORD *)(v297 + 52), 0x3FFFFFFFFFFLL, 32, v296, 4);
    if (!result)
    {
LABEL_330:
      uint64_t v298 = *((void *)this + 33);
      int v299 = *(_DWORD *)(v298 + 364);
      *(_DWORD *)(v298 + 364) = 0;
      *(_DWORD *)(*((void *)this + 33) + 364) ^= 0xFFFFFFC0;
      uint64_t v300 = *((void *)this + 33);
      int v301 = *(_DWORD *)(v300 + 364);
      *(_DWORD *)(v300 + 364) = v299;
      uint64_t v302 = *(void *)(*((void *)this + 32) + 11768);
      if (!*(void *)v302 && !*(_DWORD *)(v302 + 152) && !*(_DWORD *)(v302 + 156)) {
        goto LABEL_222;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v302, 364, *(_DWORD *)(v302 + 56), 0xFFFFFFFFLL, 6, v301, 4);
      if (!result)
      {
LABEL_222:
        uint64_t v303 = *((void *)this + 33);
        int v304 = *(_DWORD *)(v303 + 532);
        *(_DWORD *)(v303 + 532) = 0;
        *(_DWORD *)(*((void *)this + 33) + 532) ^= 0x3FFu;
        uint64_t v305 = *((void *)this + 33);
        int v306 = *(_DWORD *)(v305 + 532);
        *(_DWORD *)(v305 + 532) = v304;
        uint64_t v307 = *((void *)this + 32);
        uint64_t v308 = *(void *)(v307 + 11768);
        if (!*(void *)v308 && !*(_DWORD *)(v308 + 152) && !*(_DWORD *)(v308 + 156)) {
          goto LABEL_227;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v308, 532, *(_DWORD *)(v308 + 56), 0x3FFFFFFFFFFLL, 32, v306, 4);
        if (!result)
        {
          uint64_t v307 = *((void *)this + 32);
LABEL_227:
          if (*(unsigned char *)(v307 + 8))
          {
            *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33) + 368) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(v307 + 11768) + 76) >> 6) & 0xFFF) << 6);
            int v309 = (_DWORD *)(*(void *)(*((void *)this + 32) + 11768) + 80);
          }
          else
          {
            if (CAHDecTansyLgh::getSWRStride(this, *(unsigned __int16 *)(v238 + 148) + 1, *(unsigned __int8 *)(v395 + 105) - 8, *(unsigned __int8 *)(v395 + 105) - 8, v287))return 0xFFFFFFFFLL; {
            *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33) + 368) & 0xFFFC003F | (((*((_DWORD *)this + 783) >> 6) & 0xFFF) << 6);
            }
            int v309 = (_DWORD *)((char *)this + 3136);
          }
          *(_DWORD *)(*((void *)this + 33) + 372) = *(_DWORD *)(*((void *)this + 33) + 372) & 0xFFF8003F | (((*v309 >> 6) & 0x1FFF) << 6);
LABEL_230:
          if (v390 < 2)
          {
            uint64_t v310 = *((void *)this + 33);
            *(_DWORD *)(v310 + 536) = 65537;
            *(_WORD *)(v310 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
            *(_WORD *)(v310 + 542) = *(_DWORD *)(v395 + 108) >> 6;
            *(_WORD *)(v310 + 67pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
            *(_WORD *)(v310 + 672) = *(_DWORD *)(v395 + 112) >> 6;
            uint64_t v311 = *((void *)this + 32);
          }
          else
          {
            uint64_t v310 = *((void *)this + 33);
            *(_WORD *)(v310 + 536) = v394;
            uint64_t v311 = *((void *)this + 32);
            if (v391 != 31)
            {
              if (v392 <= 1) {
                uint64_t v312 = 1;
              }
              else {
                uint64_t v312 = v392;
              }
              uint64_t v313 = (unsigned char *)(*(void *)(v311 + 17560) + 2786);
              do
              {
                if (!*v313) {
                  *(_WORD *)(v310 + 2 * v389 + 67pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v313 - 26) >> 3;
                }
                v313 += 1792;
                --v312;
              }
              while (v312);
            }
            *(_WORD *)(v310 + 538) = v392;
            if (v393 != 31)
            {
              uint64_t v314 = *(void *)(v311 + 17560);
              if (v394 <= 1) {
                uint64_t v315 = 1;
              }
              else {
                uint64_t v315 = v394;
              }
              int v316 = (unsigned __int8 *)(v314 + 2786);
              uint64_t v317 = (unsigned __int8 *)(v314 + 2786);
              do
              {
                int v318 = *v317;
                v317 += 28;
                if (!v318) {
                  *(_WORD *)(v310 + 2 * v389 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v316 - 18) >> 3;
                }
                int v316 = v317;
                --v315;
              }
              while (v315);
            }
          }
          if (*(_DWORD *)(v311 + 2360) == 1)
          {
            *(_DWORD *)(v310 + 684) = *(_DWORD *)(v310 + 684) & 0xFFFFFFFE | *(_DWORD *)(v311 + 2508) & 1;
            if (*(_DWORD *)(v311 + 2508))
            {
              *(_DWORD *)(v310 + 692) = 0x10000000;
              *(_DWORD *)(v310 + 696) = *(_DWORD *)(v311 + 2368);
              *(void *)(v310 + 704) = 0;
              *(_DWORD *)(v310 + 70pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
              *(_OWORD *)(v310 + 712) = *(_OWORD *)(v311 + 2372);
              long long v377 = *(_OWORD *)(v311 + 2388);
              *(_OWORD *)(v310 + 744) = *(_OWORD *)(v311 + 2404);
              *(_OWORD *)(v310 + 728) = v377;
            }
            *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v311 + 2512) & 1));
            if (*(_DWORD *)(v311 + 2512))
            {
              *(_DWORD *)(v310 + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
              if (!*(_DWORD *)(v311 + 2424))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0]) = 136315138;
                  *(void *)((char *)buf + 4) = "populatePictureRegisters";
                  int v386 = &_os_log_internal;
                  uint64_t v387 = "AppleAVD: %s(): H13A descrambler is not supported\n";
                  goto LABEL_324;
                }
                return 0xFFFFFFFFLL;
              }
              *(_DWORD *)(v311 + 264pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
              int v378 = *(_DWORD *)(v310 + 760) & 0xF7FFFFF | ((*(_DWORD *)(v311 + 2420) & 1) << 23) | 0x20000000;
              *(_DWORD *)(v310 + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v378;
              *(_DWORD *)(v310 + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v378 & 0xFFC00000 | (*(_DWORD *)(v311 + 2364) == 0);
              long long v379 = *(_OWORD *)(v311 + 2428);
              long long v380 = *(_OWORD *)(v311 + 2444);
              *(_OWORD *)(v310 + 796) = *(_OWORD *)(v311 + 2460);
              *(_OWORD *)(v310 + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v380;
              *(_OWORD *)(v310 + 764) = v379;
            }
            *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v311 + 2516) & 1));
            *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v311 + 2520) & 1));
            *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v311 + 2524) & 1));
            if (*(_DWORD *)(v311 + 2516))
            {
              *(_DWORD *)(v310 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
              if (*(_DWORD *)(v311 + 2476) == 2) {
                int v381 = 805306368;
              }
              else {
                int v381 = 813694976;
              }
              *(_DWORD *)(v310 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v381;
              memcpy((void *)(v310 + 924), (const void *)(v311 + 2480), 4 * *(unsigned int *)(v311 + 2476));
              *(_DWORD *)(v311 + 2516) = 0;
            }
            *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFDF | (32 * (*(_DWORD *)(v311 + 2632) & 1));
            if (*(_DWORD *)(v311 + 2632))
            {
              *(_DWORD *)(v310 + 812) = 0x80000000;
              unsigned int v382 = ((*(_DWORD *)(v311 + 2528) & 1) << 27) | 0x80000000;
              *(_DWORD *)(v310 + 812) = v382;
              *(_DWORD *)(v310 + 812) = v382 | (((2 * *(_DWORD *)(v311 + 2528)) & 4 | (*(_DWORD *)(v311 + 2528) >> 1) & 2 | (*(_DWORD *)(v311 + 2528) >> 3) & 1) << 24);
              long long v383 = *(_OWORD *)(v311 + 2532);
              long long v384 = *(_OWORD *)(v311 + 2564);
              *(_OWORD *)(v310 + 832) = *(_OWORD *)(v311 + 2548);
              *(_OWORD *)(v310 + 848) = v384;
              *(_OWORD *)(v310 + 816) = v383;
              *(void *)(v310 + 864) = *(void *)(v311 + 2580);
              *(void *)(v310 + 872) = *(void *)(v311 + 2588);
              int v385 = *(_DWORD *)(v311 + 2528);
              if ((v385 & 6) != 0 && (v385 & 8) == 0)
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0]) = 136315138;
                  *(void *)((char *)buf + 4) = "populatePictureRegisters";
                  int v386 = &_os_log_internal;
                  uint64_t v387 = "AppleAVD: %s(): chip id is not used while ecid and/or board id is used\n";
LABEL_324:
                  _os_log_impl(&dword_223977000, v386, OS_LOG_TYPE_DEFAULT, v387, (uint8_t *)buf, 0xCu);
                  return 0xFFFFFFFFLL;
                }
                return 0xFFFFFFFFLL;
              }
              *(_OWORD *)(v310 + 88pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v311 + 2596);
            }
            *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFBF | ((*(_DWORD *)(v311 + 2636) & 1) << 6);
            if (*(_DWORD *)(v311 + 2636))
            {
              uint64_t result = 0;
              *(_DWORD *)(v310 + 896) = -1879048192;
              *(_DWORD *)(v310 + 896) = ((*(_DWORD *)(v311 + 2612) & 1) << 23) | 0x90000000;
              *(_OWORD *)(v310 + 90pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v311 + 2616);
              *(_DWORD *)(v311 + 264pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
              return result;
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecTansyLgh::getSWRStride(CAHDecTansyLgh *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *(void *)((char *)this + 3132) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 784) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecTansyLgh::populateTileRegisters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 256);
  if (*(_DWORD *)(v2 + 2360) == 1)
  {
    *(void *)(a2 + 4) = 0;
    if (*(_DWORD *)(v2 + 2640))
    {
      if ((*(unsigned char *)(v2 + 2612) & 1) == 0)
      {
LABEL_4:
        *(_DWORD *)(a2 + 8) = 0;
        uint64_t v3 = (int *)(a2 + 8);
        int v4 = *(unsigned __int8 *)(v2 + 2504);
        *uint64_t v3 = v4;
        int v5 = 65280;
LABEL_7:
        *uint64_t v3 = v4 | *(_DWORD *)(v2 + 2504) & v5;
        return 0;
      }
    }
    else if (!*(_DWORD *)(v2 + 2420))
    {
      goto LABEL_4;
    }
    int v4 = *(unsigned __int16 *)(v2 + 2504);
    *(_DWORD *)(a2 + 8) = v4;
    uint64_t v3 = (int *)(a2 + 8);
    int v5 = 0x10000;
    goto LABEL_7;
  }
  return 0;
}

uint64_t CAHDecTansyLgh::getTileStartCTU(CAHDecTansyLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 536);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecTansyLgh::getTileEndCTU(CAHDecTansyLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 536);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecTansyLgh::populateAvdWork(CAHDecTansyLgh *this)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  unint64_t v3 = *(unsigned int *)(v2 + 312);
  if (v3)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    LODWORD(v7) = 0;
    int v8 = 0;
    uint64_t v9 = v1 + 4012;
    uint64_t v39 = *(void *)(v2 + 16);
    unint64_t v40 = 0;
    unint64_t v10 = *(unsigned int *)(v2 + 316);
    unint64_t v11 = v10;
    uint64_t v37 = v9;
    uint64_t v38 = *(void *)(*((void *)this + 32) + 17560);
    do
    {
      uint64_t v36 = v5;
      if (v11)
      {
        unint64_t v12 = 0;
        do
        {
          uint64_t v13 = *((void *)this + 32);
          uint64_t v14 = *(void *)(v13 + 17560);
          uint64_t v15 = v14 + v5;
          if (!*(unsigned char *)(v14 + v5 + 2786))
          {
            *(_WORD *)(v9 + 4) = v8;
            *(_WORD *)(v9 + 6) = 0;
            *(_WORD *)(v9 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v6;
            int v41 = v6;
            int v42 = v8;
            if (*(unsigned char *)(v13 + 2834)) {
              uint64_t v16 = *(void *)(v13 + 2840);
            }
            else {
              uint64_t v16 = *(void *)(v13 + 1048) + 8;
            }
            unint64_t v17 = v39 + *(unsigned int *)(v15 + 2780) - *(void *)v16;
            int v18 = 36 * v7;
            unint64_t v19 = HIDWORD(v17);
            if (*(void *)v16 || *(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1161;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 4030, v17, 0x3FFFFFFFFFFLL, 32, -1, 2);
              if (result) {
                return result;
              }
              if (*(void *)v16) {
                goto LABEL_46;
              }
            }
            if (*(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
LABEL_46:
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1162;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 4032, v17, 0xFFFFFFFFLL, 0, -1, 4);
              if (result) {
                return result;
              }
            }
            unsigned int v21 = (_DWORD *)(v14 + v5);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v14 + v5 + 2776);
            int v22 = *(_DWORD *)(v15 + 2760);
            int v23 = v22 + 7;
            if (v22 >= 0) {
              int v23 = *(_DWORD *)(v15 + 2760);
            }
            int v24 = v21[692];
            *(_DWORD *)(v9 + 28) = (v23 << 13) & 0xFFFF0000 | (v24 / 8);
            int v25 = v21[691];
            int v27 = v25 - 1;
            BOOL v26 = v25 < 1;
            int v28 = v25 + 6;
            if (!v26) {
              int v28 = v27;
            }
            unsigned int v29 = (v28 << 13) & 0xFFFF0000;
            int v30 = v21[693];
            int v31 = v30 - 1;
            BOOL v26 = v30 < 1;
            int v32 = v30 + 6;
            if (!v26) {
              int v32 = v31;
            }
            *(_DWORD *)(v9 + 32) = v29 | (v32 >> 3);
            if (v22 + v24) {
              __int16 v33 = 4;
            }
            else {
              __int16 v33 = 5;
            }
            *(_WORD *)(v9 + 12) = v33;
            unint64_t v3 = *(unsigned int *)(v38 + 312);
            unint64_t v10 = *(unsigned int *)(v38 + 316);
            if (v12 == v10 && v40 == v3) {
              __int16 v35 = 5;
            }
            else {
              __int16 v35 = 4;
            }
            *(_WORD *)(v9 + 14) = v35;
            int v6 = v41 + 1;
            int v8 = v42 + 1;
            v9 += 36;
            unint64_t v7 = 0x8E38E38E38E38E39 * ((v9 - v37) >> 2);
          }
          ++v12;
          v5 += 28;
          unint64_t v11 = v10;
        }
        while (v12 < v10);
      }
      uint64_t v5 = v36 + 1792;
      ++v40;
    }
    while (v40 < v3);
    uint64_t v1 = *((void *)this + 33);
  }
  else
  {
    LOWORD(v8) = 0;
  }
  uint64_t result = 0;
  *(_WORD *)(v1 + 26) = v8;
  *(_DWORD *)(v1 + 32) = 4012;
  return result;
}

unsigned __int8 *CAHDecTansyLgh::GetTileAddr(CAHDecTansyLgh *this, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)this + 32);
  if (*(unsigned char *)(v2 + 2834))
  {
    unint64_t v3 = *(uint64_t **)(v2 + 2840);
    uint64_t v5 = *v3;
    int v4 = v3 + 2;
    int v6 = &a2[-v5];
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 1048);
    int v6 = &a2[-*(void *)(v7 + 8)];
    int v4 = (void *)(v7 + 24);
  }
  return &v6[*v4];
}

uint64_t CAHDecTansyLgh::GetTileMemInfo(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 256);
  if (*(unsigned char *)(v5 + 2834)) {
    int v6 = *(void **)(v5 + 2840);
  }
  else {
    int v6 = (void *)(*(void *)(v5 + 1048) + 8);
  }
  *a5 = a2 - *v6;
  *a4 = v6;
  return 1;
}

unsigned __int8 *CAHDecTansyLgh::getTileAddr(CAHDecTansyLgh *this, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  if (*(unsigned char *)(v2 + 2834))
  {
    unint64_t v3 = *(void **)(v2 + 2840);
    int v4 = &a2[-*v3];
    uint64_t v5 = &v4[v3[2]];
    if ((unint64_t)v5 >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1263;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      uint64_t v7 = (void *)(*(void *)(*((void *)this + 32) + 2840) + 16);
      return &v4[*v7];
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 1048);
    uint64_t v9 = *(void *)(v8 + 24);
    uint64_t v7 = (void *)(v8 + 24);
    int v4 = &a2[-*(v7 - 2)];
    uint64_t v5 = &v4[v9];
    if ((unint64_t)&v4[v9] >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1279;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      return &v4[*v7];
    }
  }
  return v5;
}

uint64_t CAHDecTansyLgh::allocWorkBuf_SPS(CAHDecTansyLgh *this, int *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = *a2 + 31;
  if (*a2 < -31) {
    int v5 = *a2 + 62;
  }
  unsigned int v6 = v5 >> 5;
  int v7 = v4 + 31;
  if (v4 < -31) {
    int v7 = v4 + 62;
  }
  unsigned int v8 = v7 >> 5;
  unsigned int v9 = 32 - __clz(v6 - 1);
  if (v6 >= 2) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  unsigned int v11 = 32 - __clz(v8 - 1);
  if (v8 >= 2) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unsigned int v13 = ((32 << (v12 + v10)) + 127) & 0xFFFFFF80;
  int v14 = 2 * v3 + 62;
  if (2 * v3 >= -31) {
    int v14 = 2 * v3 + 31;
  }
  unsigned int v15 = v14 >> 5;
  int v16 = v4 + 15;
  if (v4 < -15) {
    int v16 = v4 + 30;
  }
  unsigned int v17 = v16 >> 4;
  unsigned int v18 = 32 - __clz(v15 - 1);
  if (v15 >= 2) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  unsigned int v20 = 32 - __clz(v17 - 1);
  if (v17 >= 2) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  *((_DWORD *)this + 776) = v13;
  *((_DWORD *)this + 777) = ((8 << (v19 + v21)) + 127) & 0xFFFFFF80;
  unsigned int v22 = ((v4 + 63) >> 6) * ((v3 + 63) >> 6);
  *((_DWORD *)this + 781) = 576 * v22;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_28:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      char v29 = v28;
      uint64_t v30 = *((unsigned int *)this + 781);
      if (v30
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 176 * v27 + 5360), v30, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1485;
        __int16 v39 = 2080;
        unint64_t v40 = "MvColo";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v29 & 1) != 0);
    unsigned int v31 = 24 * v22;
    *((_DWORD *)this + 785) = 24 * v22;
    uint64_t v32 = 3776;
    if (!v31) {
      goto LABEL_34;
    }
LABEL_33:
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v32), v31, 7, 1, 0))
    {
LABEL_34:
      while (v32 != 5008)
      {
        unsigned int v31 = *((_DWORD *)this + 785);
        v32 += 176;
        if (v31) {
          goto LABEL_33;
        }
      }
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1490;
    __int16 v39 = 2080;
    unint64_t v40 = "segMap";
    __int16 v33 = &_os_log_internal;
  }
  else
  {
    uint64_t v23 = 14608;
    uint64_t v24 = 16;
    while (1)
    {
      uint64_t v25 = *((unsigned int *)this + 776);
      if (v25
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23 - 2816), v25, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1469;
        __int16 v39 = 2080;
        unint64_t v40 = "HdrY";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      uint64_t v26 = *((unsigned int *)this + 777);
      if (v26)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23), v26, 7, 1, 0))break; {
      }
        }
      v23 += 176;
      if (!--v24) {
        goto LABEL_28;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1474;
    __int16 v39 = 2080;
    unint64_t v40 = "HdrC";
    __int16 v33 = &_os_log_internal;
  }
LABEL_46:
  _os_log_impl(&dword_223977000, v33, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v35, 0x1Cu);
LABEL_47:
  (*(void (**)(CAHDecTansyLgh *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecTansyLgh::allocWorkBuf_PPS(CAHDecTansyLgh *this, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = *(void *)(v5 + 17560);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 100);
  unsigned int v9 = (*(unsigned __int8 *)(v6 + 105) + 1) & 0x1FE;
  if (v7 == 3) {
    int v10 = 48;
  }
  else {
    int v10 = 32;
  }
  if (!v7) {
    int v10 = 16;
  }
  int v12 = *(_DWORD *)(v6 + 108);
  int v11 = *(_DWORD *)(v6 + 112);
  unsigned int v13 = (v12 + 15) >> 4;
  int v14 = ~(-1 << *(_DWORD *)(v6 + 96));
  signed int v15 = v13 * ((v10 * v9) >> 3) + (v14 << 7);
  if (v15)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 117, v15, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1566;
        __int16 v27 = 2080;
        char v28 = "IpAbove";
        int v16 = &_os_log_internal;
LABEL_34:
        _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  int v17 = 16 * v9;
  if ((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 != 192)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 128, (int)((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 - 192), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1569;
        __int16 v27 = 2080;
        char v28 = "LfAbovePix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
LABEL_35:
      (*(void (**)(CAHDecTansyLgh *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  signed int v18 = 288 * ((v12 + 63) >> 6) + (v14 << 7);
  if (v18)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 139, v18, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1575;
        __int16 v27 = 2080;
        char v28 = "LfAboveInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  unsigned int v19 = (v11 + 7) >> 3;
  if (v19 * v17)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 150, (int)(v19 * v17), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1581;
        __int16 v27 = 2080;
        char v28 = "LfLeftPix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  uint64_t v20 = ((v11 + 63) >> 2) & 0x3FFFFFF0;
  if (v20)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 161, v20, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1589;
        __int16 v27 = 2080;
        char v28 = "LfLeftInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 172, (int)(24 * v13 + 30), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 1597;
      __int16 v27 = 2080;
      char v28 = "SwLeftPix";
      int v16 = &_os_log_internal;
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  int v22 = 192 * v9 + (v19 + 2) * (((v9 >> 1) << 8) | 8);
  if (!v22) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 183, v22, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 1603;
    __int16 v27 = 2080;
    char v28 = "AZLeftPix";
    int v16 = &_os_log_internal;
    goto LABEL_34;
  }
  return result;
}

uint64_t CAHDecTansyLgh::freeWorkBuf_SPS(CAHDecTansyLgh *this)
{
  uint64_t result = *((void *)this + 32);
  if (!*(_DWORD *)(result + 2648))
  {
    uint64_t v3 = 14608;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = (uint64_t *)(result + v3 - 2816);
      if (*v5)
      {
        CAVDDecoder::deallocAVDMem(result, v5);
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3 - 2816) = 0;
      }
      if (*(void *)(result + v3))
      {
        CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + v3));
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3) = 0;
      }
      v3 += 176;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = result + 176 * v6;
    if (*(void *)(v9 + 5360))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(v9 + 5360));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + 176 * v6 + 536pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  for (uint64_t i = 3776; i != 5184; i += 176)
  {
    if (*(void *)(result + i))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + i));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + i) = 0;
    }
  }
  return result;
}

uint64_t *CAHDecTansyLgh::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[256])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 256);
    v2[256] = 0;
  }
  if (v2[278])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 278);
    v2[278] = 0;
  }
  if (v2[234])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 234);
    v2[234] = 0;
  }
  if (v2[300])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 300);
    v2[300] = 0;
  }
  if (v2[322])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 322);
    v2[322] = 0;
  }
  if (v2[344])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 344);
    v2[344] = 0;
  }
  if (v2[366])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 366);
    v2[366] = 0;
  }
  return this;
}

uint64_t CAHDecTansyLgh::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 312pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  return this;
}

uint64_t CAHDecTansyLgh::initPicture(CAHDecTansyLgh *this)
{
  return 0;
}

uint64_t CAHDecTansyLgh::populateSlices(CAHDecTansyLgh *this)
{
  return 0;
}

uint64_t CAHDecTansyLgh::getTileIdxAbove(CAHDecTansyLgh *this)
{
  return 0;
}

uint64_t CAHDecTansyLgh::decodeBuffer(CAHDecTansyLgh *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecTansyLgh::decodeBufferSize(CAHDecTansyLgh *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecTansyLgh::decHdrYLinAddr(CAHDecTansyLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 11792);
}

uint64_t CAHDecTansyLgh::decHdrCLinAddr(CAHDecTansyLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 14608);
}

uint64_t CAHDecTansyLgh::decHdrYSize(CAHDecTansyLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 11836);
}

uint64_t CAHDecTansyLgh::decHdrCSize(CAHDecTansyLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 14652);
}

uint64_t CAHDecTansyLgh::decHdrYStride(CAHDecTansyLgh *this)
{
  return *((unsigned int *)this + 778);
}

uint64_t CAHDecTansyLgh::decHdrCStride(CAHDecTansyLgh *this)
{
  return *((unsigned int *)this + 779);
}

void CAHDecTansyLgh::clearSegBuffer(CAHDecTansyLgh *this)
{
}

CAHDecTansyAvx *createTansyAvxDecoder(void **a1)
{
  uint64_t v2 = (CAHDecTansyAvx *)operator new(0x1060uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecTansyAvx::CAHDecTansyAvx(v2, a1);
  }
  return v3;
}

void sub_2239BAF34(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecTansyAvx::CAHDecTansyAvx(CAHDecTansyAvx *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D740990;
  *(_DWORD *)(v1 + 456) = 198144;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecTansyAvx::CAHDecTansyAvx(CAHDecTansyAvx *this, void **a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D740990;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 198144;
  *(_DWORD *)(v4 + 8) = 1536;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 198144, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315394;
      int v22 = "CAHDecTansyAvx";
      __int16 v23 = 1024;
      int v24 = 0;
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  uint64_t v8 = *((void *)this + 35);
  *((_DWORD *)this + 13) = 0;
  *((void *)this + 33) = v8;
  *((void *)this + 34) = v8;
  bzero(a2 + 384, 0x1340uLL);
  bzero(a2[1000], 0x1500uLL);
  bzero((char *)this + 464, 0xE70uLL);
  bzero(a2 + 1001, 0x1E18uLL);
  uint64_t v9 = 0;
  *((void *)this + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *((_OWORD *)this + 261) = 0u;
  uint64_t v10 = 9168;
  *((_DWORD *)this + 1045) = 9168;
  uint64_t v11 = *((void *)this + 32);
LABEL_5:
  if (CAVDDecoder::allocAVDMem(v11, (_OWORD *)(v11 + v9 + 10304), v10, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315650;
      int v22 = "CAHDecTansyAvx";
      __int16 v23 = 1024;
      int v24 = 168;
      __int16 v25 = 2080;
      int v26 = "probs_Buf";
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v11 = *((void *)this + 32);
  while (1)
  {
    uint64_t v12 = *(void *)(v11 + v9 + 10304);
    if (v12) {
      *(void *)(v11 + v9 + 10296) = v12;
    }
    if (v9 == 2208) {
      break;
    }
    uint64_t v10 = *((unsigned int *)this + 1045);
    v9 += 184;
    if (*((_DWORD *)this + 1045)) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = *(void *)(v11 + 42392);
  if (v13)
  {
    uint64_t v14 = 0;
    signed int v15 = (void *)(v13 + 1960);
    do
    {
      *signed int v15 = v11 + 10296 + v14;
      v14 += 184;
      v15 += 254;
    }
    while (v14 != 2392);
  }
  uint64_t v16 = 0;
  for (uint64_t i = 12696; ; i += 184)
  {
    uint64_t v18 = *((unsigned int *)this + 1045);
    uint64_t v19 = *((void *)this + 32);
    if (v18) {
      break;
    }
LABEL_19:
    uint64_t v20 = *(void *)(v19 + i);
    if (v20) {
      *(void *)(v19 + i - 8) = v20;
    }
    if (*(void *)(v19 + 15952)) {
      AV1_Syntax::Set_Default_Frame_Context_Info(*(void *)(v19 + 15952), (uint64_t *)(v19 + i - 8), v16);
    }
    if (++v16 == 4) {
      return;
    }
  }
  if (!CAVDDecoder::allocAVDMem(v19, (_OWORD *)(v19 + i), v18, 7, 1, 0))
  {
    uint64_t v19 = *((void *)this + 32);
    goto LABEL_19;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 136315650;
    int v22 = "CAHDecTansyAvx";
    __int16 v23 = 1024;
    int v24 = 183;
    __int16 v25 = 2080;
    int v26 = "probs_Buf";
    uint64_t v5 = &_os_log_internal;
    uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_29:
    uint32_t v7 = 28;
LABEL_30:
    _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v21, v7);
  }
LABEL_31:
  *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
}

void sub_2239BB31C(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecTansyAvx::~CAHDecTansyAvx(CAHDecTansyAvx *this)
{
  uint64_t v2 = 0;
  *(void *)this = &unk_26D740990;
  uint64_t v3 = *((void *)this + 32);
  do
  {
    if (*(void *)(v3 + v2 + 10304))
    {
      CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + v2 + 10304));
      uint64_t v3 = *((void *)this + 32);
      *(_OWORD *)(v3 + v2 + 10296) = 0u;
    }
    v2 += 184;
  }
  while (v2 != 2392);
  for (uint64_t i = 0; i != 736; i += 184)
  {
    if (*(void *)(v3 + i + 12696))
    {
      CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 12696));
      uint64_t v3 = *((void *)this + 32);
      *(_OWORD *)(v3 + i + 12688) = 0u;
    }
  }
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(v3, (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecTansyAvx::~CAHDecTansyAvx(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecTansyAvx::startPicture(CAHDecTansyAvx *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  uint64_t v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x30600uLL);
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    uint64_t v6 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v6 + 16) = a2;
    *(_WORD *)(v6 + 24) = 257;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecTansyAvx::DecodePicture(CAHDecTansyAvx *this, uint64_t a2)
{
  if (CAHDecTansyAvx::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecTansyAvx *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecTansyAvx *))(*(void *)this + 48))(this);
  if ((*(unsigned int (**)(CAHDecTansyAvx *))(*(void *)this + 56))(this)
    || CAHDecTansyAvx::populateAddressRegisters(this)
    || CAHDecTansyAvx::populateDecryptionRegisters(this))
  {
    return 4;
  }
  CAHDecTansyAvx::populateTiles(this);
  CAHDecTansyAvx::populateAvxVPDependency((CAVDAvxDecoder **)this);
  (*(void (**)(CAHDecTansyAvx *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecTansyAvx *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecTansyAvx::populateAddressRegisters(CAHDecTansyAvx *this)
{
  uint64_t v2 = 0;
  uint64_t v332 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 264;
  uint64_t v4 = (char *)this + 464;
  do
  {
    *(_DWORD *)(*(void *)v3 + v2 + 464) = 0;
    uint64_t v5 = *(void *)v3 + v2;
    int v6 = *(_DWORD *)(v5 + 464);
    *(_DWORD *)(v5 + 464) = 0;
    *(_DWORD *)(*(void *)v3 + v2 + 464) ^= 0xFFFFFF00;
    uint64_t v7 = *(void *)v3 + v2;
    int v8 = *(_DWORD *)(v7 + 464);
    *(_DWORD *)(v7 + 464) = v6;
    if (*(void *)v4 || *((_DWORD *)v4 + 38) || *((_DWORD *)v4 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v4, (int)v2 + 464, 0, 0xFFFFFFFFLL, 8, v8, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v3 + v2 + 492) = 0;
    uint64_t v10 = *(void *)v3 + v2;
    int v11 = *(_DWORD *)(v10 + 492);
    *(_DWORD *)(v10 + 492) = 0;
    *(_DWORD *)(*(void *)v3 + v2 + 492) ^= 0x3FFu;
    uint64_t v12 = *(void *)v3 + v2;
    int v13 = *(_DWORD *)(v12 + 492);
    *(_DWORD *)(v12 + 492) = v11;
    if (*(void *)v4 || *((_DWORD *)v4 + 38) || *((_DWORD *)v4 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v4, (int)v2 + 492, 0, 0x3FFFFFFFFFFLL, 32, v13, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v2 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + v2 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*((void *)this + 33) + v2 + 520) & 0x800001FF | (((*((_DWORD *)this + 1044) >> 9) & 0x3FFFFF) << 9);
    v2 += 4;
    v4 += 176;
  }
  while (v2 != 28);
  uint64_t v14 = *((void *)this + 32);
  uint64_t v15 = *(void *)(*(void *)(v14 + 15944) + 79288);
  uint64_t v16 = *(void *)(*(void *)(*(void *)(v14 + 42424) + 1920) + 1960);
  *(_DWORD *)(*((void *)this + 33) + 548) = 0;
  uint64_t v17 = *((void *)this + 33);
  int v18 = *(_DWORD *)(v17 + 548);
  *(_DWORD *)(v17 + 548) = 0;
  *(_DWORD *)(*((void *)this + 33) + 548) ^= 0xFFFFFF00;
  uint64_t v19 = *((void *)this + 33);
  int v20 = *(_DWORD *)(v19 + 548);
  *(_DWORD *)(v19 + 548) = v18;
  if (!*(void *)(v16 + 8) && !*(_DWORD *)(v16 + 160) && !*(_DWORD *)(v16 + 164)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v16 + 8), 548, 0, 0xFFFFFFFFLL, 8, v20, 4),
        !result))
  {
    if ((*(_DWORD *)(*(void *)v3 + 552) = 0,
          int v21 = *(_DWORD *)(*(void *)v3 + 552),
          *(_DWORD *)(*(void *)v3 + 552) = 0,
          *(_DWORD *)(*(void *)v3 + 552) ^= 0x3FFu,
          int v22 = *(_DWORD *)(*(void *)v3 + 552),
          *(_DWORD *)(*(void *)v3 + 552) = v21,
          !*(void *)(v16 + 8))
      && !*(_DWORD *)(v16 + 160)
      && !*(_DWORD *)(v16 + 164)
      || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v16 + 8), 552, 0, 0x3FFFFFFFFFFLL, 32, v22, 4),
          !result))
    {
      if ((*(_DWORD *)(*(void *)v3 + 556) = 0,
            int v23 = *(_DWORD *)(*(void *)v3 + 556),
            *(_DWORD *)(*(void *)v3 + 556) = 0,
            *(_DWORD *)(*(void *)v3 + 556) ^= 0xFFFFFF00,
            int v24 = *(_DWORD *)(*(void *)v3 + 556),
            *(_DWORD *)(*(void *)v3 + 556) = v23,
            !*(void *)(v15 + 8))
        && !*(_DWORD *)(v15 + 160)
        && !*(_DWORD *)(v15 + 164)
        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v15 + 8), 556, 0, 0xFFFFFFFFLL, 8, v24, 4),
            !result))
      {
        if ((*(_DWORD *)(*(void *)v3 + 56pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
              int v25 = *(_DWORD *)(*(void *)v3 + 560),
        }
              *(_DWORD *)(*(void *)v3 + 56pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
              *(_DWORD *)(*(void *)v3 + 560) ^= 0x3FFu,
              int v26 = *(_DWORD *)(*(void *)v3 + 560),
              *(_DWORD *)(*(void *)v3 + 56pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v25,
              !*(void *)(v15 + 8))
          && !*(_DWORD *)(v15 + 160)
          && !*(_DWORD *)(v15 + 164)
          || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v15 + 8), 560, 0, 0x3FFFFFFFFFFLL, 32, v26, 4),
              !result))
        {
          *(_DWORD *)(*((void *)this + 33) + 564) = 0;
          uint64_t v27 = *((void *)this + 33);
          int v28 = *(_DWORD *)(v27 + 564);
          *(_DWORD *)(v27 + 564) = 0;
          *(_DWORD *)(*((void *)this + 33) + 564) ^= 0xFFFFFF00;
          uint64_t v29 = *((void *)this + 33);
          int v30 = *(_DWORD *)(v29 + 564);
          *(_DWORD *)(v29 + 564) = v28;
          if (!*((void *)this + 212) && !*((_DWORD *)this + 462) && !*((_DWORD *)this + 463)) {
            goto LABEL_355;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 212, 564, 0, 0xFFFFFFFFLL, 8, v30, 4);
          if (!result)
          {
LABEL_355:
            if ((*(_DWORD *)(*(void *)v3 + 568) = 0,
                  int v31 = *(_DWORD *)(*(void *)v3 + 568),
                  *(_DWORD *)(*(void *)v3 + 568) = 0,
                  *(_DWORD *)(*(void *)v3 + 568) ^= 0x3FFu,
                  int v32 = *(_DWORD *)(*(void *)v3 + 568),
                  *(_DWORD *)(*(void *)v3 + 568) = v31,
                  !*((void *)this + 212))
              && !*((_DWORD *)this + 462)
              && !*((_DWORD *)this + 463)
              || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 212, 568, 0, 0x3FFFFFFFFFFLL, 32, v32, 4), !result))
            {
              *(_DWORD *)(*((void *)this + 33) + 572) = 0;
              *(_DWORD *)(*((void *)this + 33) + 576) = 0;
              if (!*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312)) {
                goto LABEL_44;
              }
              uint64_t v33 = *((void *)this + 33);
              int v34 = *(_DWORD *)(v33 + 572);
              *(_DWORD *)(v33 + 572) = 0;
              *(_DWORD *)(*((void *)this + 33) + 572) ^= 0xFFFFFF00;
              uint64_t v35 = *((void *)this + 33);
              int v36 = *(_DWORD *)(v35 + 572);
              *(_DWORD *)(v35 + 572) = v34;
              uint64_t v37 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312);
              if (!*(void *)(v37 + 8) && !*(_DWORD *)(v37 + 160) && !*(_DWORD *)(v37 + 164)) {
                goto LABEL_356;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v37 + 8), 572, 0, 0xFFFFFFFFLL, 8, v36, 4);
              if (!result)
              {
LABEL_356:
                uint64_t v38 = *((void *)this + 33);
                int v39 = *(_DWORD *)(v38 + 576);
                *(_DWORD *)(v38 + 576) = 0;
                *(_DWORD *)(*((void *)this + 33) + 576) ^= 0x3FFu;
                uint64_t v40 = *((void *)this + 33);
                int v41 = *(_DWORD *)(v40 + 576);
                *(_DWORD *)(v40 + 576) = v39;
                uint64_t v42 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312);
                if (!*(void *)(v42 + 8) && !*(_DWORD *)(v42 + 160) && !*(_DWORD *)(v42 + 164)) {
                  goto LABEL_44;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v42 + 8), 576, 0, 0x3FFFFFFFFFFLL, 32, v41, 4);
                if (!result)
                {
LABEL_44:
                  *(_DWORD *)(*((void *)this + 33) + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 584) = 0;
                  if (!*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304)) {
                    goto LABEL_346;
                  }
                  uint64_t v43 = *((void *)this + 33);
                  int v44 = *(_DWORD *)(v43 + 580);
                  *(_DWORD *)(v43 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 580) ^= 0xFFFFFF00;
                  uint64_t v45 = *((void *)this + 33);
                  int v46 = *(_DWORD *)(v45 + 580);
                  *(_DWORD *)(v45 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v44;
                  uint64_t v47 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304);
                  if (!*(void *)(v47 + 8) && !*(_DWORD *)(v47 + 160) && !*(_DWORD *)(v47 + 164)) {
                    goto LABEL_347;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v47 + 8), 580, 0, 0xFFFFFFFFLL, 8, v46, 4);
                  if (!result)
                  {
LABEL_347:
                    uint64_t v48 = *((void *)this + 33);
                    int v49 = *(_DWORD *)(v48 + 584);
                    *(_DWORD *)(v48 + 584) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 584) ^= 0x3FFu;
                    uint64_t v50 = *((void *)this + 33);
                    int v51 = *(_DWORD *)(v50 + 584);
                    *(_DWORD *)(v50 + 584) = v49;
                    uint64_t v52 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304);
                    if (!*(void *)(v52 + 8) && !*(_DWORD *)(v52 + 160) && !*(_DWORD *)(v52 + 164)) {
                      goto LABEL_346;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v52 + 8), 584, 0, 0x3FFFFFFFFFFLL, 32, v51, 4);
                    if (!result)
                    {
LABEL_346:
                      *(_DWORD *)(*((void *)this + 33) + 588) = 0;
                      uint64_t v53 = *((void *)this + 33);
                      int v54 = *(_DWORD *)(v53 + 588);
                      *(_DWORD *)(v53 + 588) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 588) ^= 0xFFFFFF00;
                      uint64_t v55 = *((void *)this + 33);
                      int v56 = *(_DWORD *)(v55 + 588);
                      *(_DWORD *)(v55 + 588) = v54;
                      uint64_t v57 = *(void *)(*(void *)(*((void *)this + 32) + 42424) + 1920);
                      if (!*(void *)(v57 + 136) && !*(_DWORD *)(v57 + 288) && !*(_DWORD *)(v57 + 292)) {
                        goto LABEL_348;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v57 + 136), 588, 0, 0xFFFFFFFFLL, 8, v56, 4);
                      if (!result)
                      {
LABEL_348:
                        *(_DWORD *)(*((void *)this + 33) + 592) = 0;
                        uint64_t v58 = *((void *)this + 33);
                        int v59 = *(_DWORD *)(v58 + 592);
                        *(_DWORD *)(v58 + 592) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 592) ^= 0x3FFu;
                        uint64_t v60 = *((void *)this + 33);
                        int v61 = *(_DWORD *)(v60 + 592);
                        *(_DWORD *)(v60 + 592) = v59;
                        uint64_t v62 = *(void *)(*(void *)(*((void *)this + 32) + 42424) + 1920);
                        if (!*(void *)(v62 + 136) && !*(_DWORD *)(v62 + 288) && !*(_DWORD *)(v62 + 292)) {
                          goto LABEL_349;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v62 + 136), 592, 0, 0x3FFFFFFFFFFLL, 32, v61, 4);
                        if (!result)
                        {
LABEL_349:
                          *(_DWORD *)(*((void *)this + 33) + 596) = 0;
                          uint64_t v63 = *((void *)this + 33);
                          int v64 = *(_DWORD *)(v63 + 596);
                          *(_DWORD *)(v63 + 596) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 596) ^= 0xFFFFFF00;
                          uint64_t v65 = *((void *)this + 33);
                          int v66 = *(_DWORD *)(v65 + 596);
                          *(_DWORD *)(v65 + 596) = v64;
                          int v67 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78568);
                          if (!*v67
                            && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78720)
                            && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78724))
                          {
                            goto LABEL_350;
                          }
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v67, 596, 0, 0xFFFFFFFFLL, 8, v66, 4);
                          if (!result)
                          {
LABEL_350:
                            *(_DWORD *)(*((void *)this + 33) + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            uint64_t v68 = *((void *)this + 33);
                            int v69 = *(_DWORD *)(v68 + 600);
                            *(_DWORD *)(v68 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 600) ^= 0x3FFu;
                            uint64_t v70 = *((void *)this + 33);
                            int v71 = *(_DWORD *)(v70 + 600);
                            *(_DWORD *)(v70 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v69;
                            int v72 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78568);
                            if (!*v72
                              && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78720)
                              && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78724))
                            {
                              goto LABEL_351;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v72, 600, 0, 0x3FFFFFFFFFFLL, 32, v71, 4);
                            if (!result)
                            {
LABEL_351:
                              *(_DWORD *)(*((void *)this + 33) + 604) = 0;
                              uint64_t v73 = *((void *)this + 33);
                              int v74 = *(_DWORD *)(v73 + 604);
                              *(_DWORD *)(v73 + 604) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 604) ^= 0xFFFFFF00;
                              uint64_t v75 = *((void *)this + 33);
                              int v76 = *(_DWORD *)(v75 + 604);
                              *(_DWORD *)(v75 + 604) = v74;
                              uint64_t v77 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78792);
                              if (!*v77
                                && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78944)
                                && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78948))
                              {
                                goto LABEL_352;
                              }
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v77, 604, 0, 0xFFFFFFFFLL, 8, v76, 4);
                              if (!result)
                              {
LABEL_352:
                                *(_DWORD *)(*((void *)this + 33) + 608) = 0;
                                uint64_t v78 = *((void *)this + 33);
                                int v79 = *(_DWORD *)(v78 + 608);
                                *(_DWORD *)(v78 + 608) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 608) ^= 0x3FFu;
                                uint64_t v80 = *((void *)this + 33);
                                int v81 = *(_DWORD *)(v80 + 608);
                                *(_DWORD *)(v80 + 608) = v79;
                                uint64_t v82 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78792);
                                if (!*v82
                                  && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78944)
                                  && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78948))
                                {
                                  goto LABEL_353;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v82, 608, 0, 0x3FFFFFFFFFFLL, 32, v81, 4);
                                if (!result)
                                {
LABEL_353:
                                  *(_DWORD *)(*((void *)this + 33) + 612) = 0;
                                  uint64_t v83 = *((void *)this + 33);
                                  int v84 = *(_DWORD *)(v83 + 612);
                                  *(_DWORD *)(v83 + 612) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 612) ^= 0xFFFFFF00;
                                  uint64_t v85 = *((void *)this + 33);
                                  int v86 = *(_DWORD *)(v85 + 612);
                                  *(_DWORD *)(v85 + 612) = v84;
                                  int v87 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 79016);
                                  if (!*v87
                                    && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79168)
                                    && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79172))
                                  {
                                    goto LABEL_354;
                                  }
                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v87, 612, 0, 0xFFFFFFFFLL, 8, v86, 4);
                                  if (!result)
                                  {
LABEL_354:
                                    *(_DWORD *)(*((void *)this + 33) + 616) = 0;
                                    uint64_t v88 = *((void *)this + 33);
                                    int v89 = *(_DWORD *)(v88 + 616);
                                    *(_DWORD *)(v88 + 616) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 616) ^= 0x3FFu;
                                    uint64_t v90 = *((void *)this + 33);
                                    int v91 = *(_DWORD *)(v90 + 616);
                                    *(_DWORD *)(v90 + 616) = v89;
                                    int v92 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 79016);
                                    if (!*v92
                                      && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79168)
                                      && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79172))
                                    {
                                      goto LABEL_85;
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v92, 616, 0, 0x3FFFFFFFFFFLL, 32, v91, 4);
                                    if (!result)
                                    {
LABEL_85:
                                      *(_DWORD *)(*((void *)this + 33) + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                      *(_DWORD *)(*((void *)this + 33) + 624) = 0;
                                      uint64_t v93 = *((void *)this + 32);
                                      if (!*(unsigned char *)(v93 + 2652)) {
                                        goto LABEL_345;
                                      }
                                      uint64_t v94 = *(void *)(v93 + 2680);
                                      long long v330 = 0u;
                                      long long v331 = 0u;
                                      memset(v329, 0, sizeof(v329));
                                      uint64_t v95 = *(void *)v3;
                                      int v96 = (*(_DWORD *)(*(void *)v3 + 16) & 0xF) << 9;
                                      *(void *)&v329[0] = v94;
                                      int v97 = *(_DWORD *)(v95 + 620);
                                      *(_DWORD *)(v95 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                      *(_DWORD *)(*(void *)v3 + 620) ^= 0xFFFFFF00;
                                      int v98 = *(_DWORD *)(*(void *)v3 + 620);
                                      *(_DWORD *)(*(void *)v3 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v97;
                                      if (v94)
                                      {
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v329, 620, v96, 0xFFFFFFFFLL, 8, v98, 4);
                                        if (result) {
                                          return result;
                                        }
                                        uint64_t v99 = *(void *)&v329[0];
                                        int v100 = DWORD2(v330);
                                        LODWORD(v94) = HIDWORD(v330);
                                      }
                                      else
                                      {
                                        int v100 = 0;
                                        uint64_t v99 = 0;
                                      }
                                      if ((*(_DWORD *)(*(void *)v3 + 624) = 0,
                                            int v101 = *(_DWORD *)(*(void *)v3 + 624),
                                            *(_DWORD *)(*(void *)v3 + 624) = 0,
                                            *(_DWORD *)(*(void *)v3 + 624) ^= 0x3FFu,
                                            int v102 = *(_DWORD *)(*(void *)v3 + 624),
                                            *(_DWORD *)(*(void *)v3 + 624) = v101,
                                            !v99)
                                        && !v100
                                        && !v94
                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v329, 624, v96, 0x3FFFFFFFFFFLL, 32, v102, 4), !result))
                                      {
LABEL_345:
                                        *(_DWORD *)(*((void *)this + 33) + 628) = 0;
                                        uint64_t v103 = *((void *)this + 33);
                                        int v104 = *(_DWORD *)(v103 + 628);
                                        *(_DWORD *)(v103 + 628) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 628) ^= 0xFFFFFF00;
                                        uint64_t v105 = *((void *)this + 33);
                                        int v106 = *(_DWORD *)(v105 + 628);
                                        *(_DWORD *)(v105 + 628) = v104;
                                        if (!*((void *)this + 234)
                                          && !*((_DWORD *)this + 506)
                                          && !*((_DWORD *)this + 507))
                                        {
                                          goto LABEL_333;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 628, 0, 0xFFFFFFFFLL, 8, v106, 4);
                                        if (!result)
                                        {
LABEL_333:
                                          if ((*(_DWORD *)(*(void *)v3 + 632) = 0,
                                                int v107 = *(_DWORD *)(*(void *)v3 + 632),
                                                *(_DWORD *)(*(void *)v3 + 632) = 0,
                                                *(_DWORD *)(*(void *)v3 + 632) ^= 0x3FFu,
                                                int v108 = *(_DWORD *)(*(void *)v3 + 632),
                                                *(_DWORD *)(*(void *)v3 + 632) = v107,
                                                !*((void *)this + 234))
                                            && !*((_DWORD *)this + 506)
                                            && !*((_DWORD *)this + 507)
                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 632, 0, 0x3FFFFFFFFFFLL, 32, v108, 4), !result))
                                          {
                                            *(_DWORD *)(*((void *)this + 33) + 636) = 0;
                                            uint64_t v109 = *((void *)this + 33);
                                            int v110 = *(_DWORD *)(v109 + 636);
                                            *(_DWORD *)(v109 + 636) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 636) ^= 0xFFFFFF00;
                                            uint64_t v111 = *((void *)this + 33);
                                            int v112 = *(_DWORD *)(v111 + 636);
                                            *(_DWORD *)(v111 + 636) = v110;
                                            if (!*((void *)this + 256)
                                              && !*((_DWORD *)this + 550)
                                              && !*((_DWORD *)this + 551))
                                            {
                                              goto LABEL_334;
                                            }
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 636, 0, 0xFFFFFFFFLL, 8, v112, 4);
                                            if (!result)
                                            {
LABEL_334:
                                              if ((*(_DWORD *)(*(void *)v3 + 64pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                                    int v113 = *(_DWORD *)(*(void *)v3 + 640),
                                              }
                                                    *(_DWORD *)(*(void *)v3 + 64pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                    *(_DWORD *)(*(void *)v3 + 640) ^= 0x3FFu,
                                                    int v114 = *(_DWORD *)(*(void *)v3 + 640),
                                                    *(_DWORD *)(*(void *)v3 + 64pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v113,
                                                    !*((void *)this + 256))
                                                && !*((_DWORD *)this + 550)
                                                && !*((_DWORD *)this + 551)
                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 640, 0, 0x3FFFFFFFFFFLL, 32, v114, 4), !result))
                                              {
                                                *(_DWORD *)(*((void *)this + 33) + 644) = 0;
                                                uint64_t v115 = *((void *)this + 33);
                                                int v116 = *(_DWORD *)(v115 + 644);
                                                *(_DWORD *)(v115 + 644) = 0;
                                                *(_DWORD *)(*((void *)this + 33) + 644) ^= 0xFFFFFF00;
                                                uint64_t v117 = *((void *)this + 33);
                                                int v118 = *(_DWORD *)(v117 + 644);
                                                *(_DWORD *)(v117 + 644) = v116;
                                                if (!*((void *)this + 278)
                                                  && !*((_DWORD *)this + 594)
                                                  && !*((_DWORD *)this + 595))
                                                {
                                                  goto LABEL_335;
                                                }
                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 644, 0, 0xFFFFFFFFLL, 8, v118, 4);
                                                if (!result)
                                                {
LABEL_335:
                                                  if ((*(_DWORD *)(*(void *)v3 + 648) = 0,
                                                        int v119 = *(_DWORD *)(*(void *)v3 + 648),
                                                        *(_DWORD *)(*(void *)v3 + 648) = 0,
                                                        *(_DWORD *)(*(void *)v3 + 648) ^= 0x3FFu,
                                                        int v120 = *(_DWORD *)(*(void *)v3 + 648),
                                                        *(_DWORD *)(*(void *)v3 + 648) = v119,
                                                        !*((void *)this + 278))
                                                    && !*((_DWORD *)this + 594)
                                                    && !*((_DWORD *)this + 595)
                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 648, 0, 0x3FFFFFFFFFFLL, 32, v120, 4), !result))
                                                  {
                                                    *(_DWORD *)(*((void *)this + 33) + 652) = 0;
                                                    uint64_t v121 = *((void *)this + 33);
                                                    int v122 = *(_DWORD *)(v121 + 652);
                                                    *(_DWORD *)(v121 + 652) = 0;
                                                    *(_DWORD *)(*((void *)this + 33) + 652) ^= 0xFFFFFF00;
                                                    uint64_t v123 = *((void *)this + 33);
                                                    int v124 = *(_DWORD *)(v123 + 652);
                                                    *(_DWORD *)(v123 + 652) = v122;
                                                    if (!*((void *)this + 300)
                                                      && !*((_DWORD *)this + 638)
                                                      && !*((_DWORD *)this + 639))
                                                    {
                                                      goto LABEL_336;
                                                    }
                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 652, 0, 0xFFFFFFFFLL, 8, v124, 4);
                                                    if (!result)
                                                    {
LABEL_336:
                                                      if ((*(_DWORD *)(*(void *)v3 + 656) = 0,
                                                            int v125 = *(_DWORD *)(*(void *)v3 + 656),
                                                            *(_DWORD *)(*(void *)v3 + 656) = 0,
                                                            *(_DWORD *)(*(void *)v3 + 656) ^= 0x3FFu,
                                                            int v126 = *(_DWORD *)(*(void *)v3 + 656),
                                                            *(_DWORD *)(*(void *)v3 + 656) = v125,
                                                            !*((void *)this + 300))
                                                        && !*((_DWORD *)this + 638)
                                                        && !*((_DWORD *)this + 639)
                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 656, 0, 0x3FFFFFFFFFFLL, 32, v126, 4), !result))
                                                      {
                                                        *(_DWORD *)(*((void *)this + 33) + 66pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                        uint64_t v127 = *((void *)this + 33);
                                                        int v128 = *(_DWORD *)(v127 + 660);
                                                        *(_DWORD *)(v127 + 66pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                        *(_DWORD *)(*((void *)this + 33) + 660) ^= 0xFFFFFF00;
                                                        uint64_t v129 = *((void *)this + 33);
                                                        int v130 = *(_DWORD *)(v129 + 660);
                                                        *(_DWORD *)(v129 + 66pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v128;
                                                        if (!*((void *)this + 322)
                                                          && !*((_DWORD *)this + 682)
                                                          && !*((_DWORD *)this + 683))
                                                        {
                                                          goto LABEL_337;
                                                        }
                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 660, 0, 0xFFFFFFFFLL, 8, v130, 4);
                                                        if (!result)
                                                        {
LABEL_337:
                                                          if ((*(_DWORD *)(*(void *)v3 + 664) = 0,
                                                                int v131 = *(_DWORD *)(*(void *)v3 + 664),
                                                                *(_DWORD *)(*(void *)v3 + 664) = 0,
                                                                *(_DWORD *)(*(void *)v3 + 664) ^= 0x3FFu,
                                                                int v132 = *(_DWORD *)(*(void *)v3 + 664),
                                                                *(_DWORD *)(*(void *)v3 + 664) = v131,
                                                                !*((void *)this + 322))
                                                            && !*((_DWORD *)this + 682)
                                                            && !*((_DWORD *)this + 683)
                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 664, 0, 0x3FFFFFFFFFFLL, 32, v132, 4), !result))
                                                          {
                                                            *(_DWORD *)(*((void *)this + 33) + 668) = 0;
                                                            uint64_t v133 = *((void *)this + 33);
                                                            int v134 = *(_DWORD *)(v133 + 668);
                                                            *(_DWORD *)(v133 + 668) = 0;
                                                            *(_DWORD *)(*((void *)this + 33) + 668) ^= 0xFFFFFF00;
                                                            uint64_t v135 = *((void *)this + 33);
                                                            int v136 = *(_DWORD *)(v135 + 668);
                                                            *(_DWORD *)(v135 + 668) = v134;
                                                            if (!*((void *)this + 344)
                                                              && !*((_DWORD *)this + 726)
                                                              && !*((_DWORD *)this + 727))
                                                            {
                                                              goto LABEL_338;
                                                            }
                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 668, 0, 0xFFFFFFFFLL, 8, v136, 4);
                                                            if (!result)
                                                            {
LABEL_338:
                                                              if ((*(_DWORD *)(*(void *)v3 + 672) = 0,
                                                                    int v137 = *(_DWORD *)(*(void *)v3 + 672),
                                                                    *(_DWORD *)(*(void *)v3 + 672) = 0,
                                                                    *(_DWORD *)(*(void *)v3 + 672) ^= 0x3FFu,
                                                                    int v138 = *(_DWORD *)(*(void *)v3 + 672),
                                                                    *(_DWORD *)(*(void *)v3 + 672) = v137,
                                                                    !*((void *)this + 344))
                                                                && !*((_DWORD *)this + 726)
                                                                && !*((_DWORD *)this + 727)
                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 672, 0, 0x3FFFFFFFFFFLL, 32, v138, 4), !result))
                                                              {
                                                                *(_DWORD *)(*((void *)this + 33) + 676) = 0;
                                                                uint64_t v139 = *((void *)this + 33);
                                                                int v140 = *(_DWORD *)(v139 + 676);
                                                                *(_DWORD *)(v139 + 676) = 0;
                                                                *(_DWORD *)(*((void *)this + 33) + 676) ^= 0xFFFFFF00;
                                                                uint64_t v141 = *((void *)this + 33);
                                                                int v142 = *(_DWORD *)(v141 + 676);
                                                                *(_DWORD *)(v141 + 676) = v140;
                                                                if (!*((void *)this + 366)
                                                                  && !*((_DWORD *)this + 770)
                                                                  && !*((_DWORD *)this + 771))
                                                                {
                                                                  goto LABEL_339;
                                                                }
                                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 676, 0, 0xFFFFFFFFLL, 8, v142, 4);
                                                                if (!result)
                                                                {
LABEL_339:
                                                                  if ((*(_DWORD *)(*(void *)v3 + 68pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                                                        int v143 = *(_DWORD *)(*(void *)v3 + 680),
                                                                  }
                                                                        *(_DWORD *)(*(void *)v3 + 68pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                                        *(_DWORD *)(*(void *)v3 + 680) ^= 0x3FFu,
                                                                        int v144 = *(_DWORD *)(*(void *)v3 + 680),
                                                                        *(_DWORD *)(*(void *)v3 + 68pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v143,
                                                                        !*((void *)this + 366))
                                                                    && !*((_DWORD *)this + 770)
                                                                    && !*((_DWORD *)this + 771)
                                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 680, 0, 0x3FFFFFFFFFFLL, 32, v144, 4), !result))
                                                                  {
                                                                    *(_DWORD *)(*((void *)this + 33) + 684) = 0;
                                                                    uint64_t v145 = *((void *)this + 33);
                                                                    int v146 = *(_DWORD *)(v145 + 684);
                                                                    *(_DWORD *)(v145 + 684) = 0;
                                                                    *(_DWORD *)(*((void *)this + 33) + 684) ^= 0xFFFFFF00;
                                                                    uint64_t v147 = *((void *)this + 33);
                                                                    int v148 = *(_DWORD *)(v147 + 684);
                                                                    *(_DWORD *)(v147 + 684) = v146;
                                                                    if (!*((void *)this + 388)
                                                                      && !*((_DWORD *)this + 814)
                                                                      && !*((_DWORD *)this + 815))
                                                                    {
                                                                      goto LABEL_340;
                                                                    }
                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 388, 684, 0, 0xFFFFFFFFLL, 8, v148, 4);
                                                                    if (!result)
                                                                    {
LABEL_340:
                                                                      if ((*(_DWORD *)(*(void *)v3 + 688) = 0,
                                                                            int v149 = *(_DWORD *)(*(void *)v3 + 688),
                                                                            *(_DWORD *)(*(void *)v3 + 688) = 0,
                                                                            *(_DWORD *)(*(void *)v3 + 688) ^= 0x3FFu,
                                                                            int v150 = *(_DWORD *)(*(void *)v3 + 688),
                                                                            *(_DWORD *)(*(void *)v3 + 688) = v149,
                                                                            !*((void *)this + 388))
                                                                        && !*((_DWORD *)this + 814)
                                                                        && !*((_DWORD *)this + 815)
                                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 388, 688, 0, 0x3FFFFFFFFFFLL, 32, v150, 4), !result))
                                                                      {
                                                                        *(_DWORD *)(*((void *)this + 33) + 692) = 0;
                                                                        uint64_t v151 = *((void *)this + 33);
                                                                        int v152 = *(_DWORD *)(v151 + 692);
                                                                        *(_DWORD *)(v151 + 692) = 0;
                                                                        *(_DWORD *)(*((void *)this + 33) + 692) ^= 0xFFFFFF00;
                                                                        uint64_t v153 = *((void *)this + 33);
                                                                        int v154 = *(_DWORD *)(v153 + 692);
                                                                        *(_DWORD *)(v153 + 692) = v152;
                                                                        if (!*((void *)this + 410)
                                                                          && !*((_DWORD *)this + 858)
                                                                          && !*((_DWORD *)this + 859))
                                                                        {
                                                                          goto LABEL_341;
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 692, 0, 0xFFFFFFFFLL, 8, v154, 4);
                                                                        if (!result)
                                                                        {
LABEL_341:
                                                                          if ((*(_DWORD *)(*(void *)v3 + 696) = 0,
                                                                                int v155 = *(_DWORD *)(*(void *)v3 + 696),
                                                                                *(_DWORD *)(*(void *)v3 + 696) = 0,
                                                                                *(_DWORD *)(*(void *)v3 + 696) ^= 0x3FFu,
                                                                                int v156 = *(_DWORD *)(*(void *)v3 + 696),
                                                                                *(_DWORD *)(*(void *)v3 + 696) = v155,
                                                                                !*((void *)this + 410))
                                                                            && !*((_DWORD *)this + 858)
                                                                            && !*((_DWORD *)this + 859)
                                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 696, 0, 0x3FFFFFFFFFFLL, 32, v156, 4), !result))
                                                                          {
                                                                            *(_DWORD *)(*((void *)this + 33) + 70pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                            uint64_t v157 = *((void *)this + 33);
                                                                            int v158 = *(_DWORD *)(v157 + 700);
                                                                            *(_DWORD *)(v157 + 70pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 700) ^= 0xFFFFFF00;
                                                                            uint64_t v159 = *((void *)this + 33);
                                                                            int v160 = *(_DWORD *)(v159 + 700);
                                                                            *(_DWORD *)(v159 + 70pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v158;
                                                                            if (!*((void *)this + 476)
                                                                              && !*((_DWORD *)this + 990)
                                                                              && !*((_DWORD *)this + 991))
                                                                            {
                                                                              goto LABEL_342;
                                                                            }
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 700, 0, 0xFFFFFFFFLL, 8, v160, 4);
                                                                            if (!result)
                                                                            {
LABEL_342:
                                                                              if ((*(_DWORD *)(*(void *)v3 + 704) = 0,
                                                                                    int v161 = *(_DWORD *)(*(void *)v3 + 704),
                                                                                    *(_DWORD *)(*(void *)v3 + 704) = 0,
                                                                                    *(_DWORD *)(*(void *)v3 + 704) ^= 0x3FFu,
                                                                                    int v162 = *(_DWORD *)(*(void *)v3 + 704),
                                                                                    *(_DWORD *)(*(void *)v3 + 704) = v161,
                                                                                    !*((void *)this + 476))
                                                                                && !*((_DWORD *)this + 990)
                                                                                && !*((_DWORD *)this + 991)
                                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 704, 0, 0x3FFFFFFFFFFLL, 32, v162, 4), !result))
                                                                              {
                                                                                int v163 = *(_DWORD *)(*((void *)this + 32)
                                                                                                 + 42676);
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 708) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 712) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 716) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 72pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 724) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 728) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 732) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 736) = 0;
                                                                                uint64_t v164 = *((void *)this + 33);
                                                                                int v165 = *(_DWORD *)(v164 + 716);
                                                                                *(_DWORD *)(v164 + 716) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 716) ^= 0xFFFFFF80;
                                                                                uint64_t v166 = *((void *)this + 33);
                                                                                int v167 = *(_DWORD *)(v166 + 716);
                                                                                *(_DWORD *)(v166 + 716) = v165;
                                                                                uint64_t v168 = *(void *)(*(void *)(*((void *)this + 32) + 8000)
                                                                                                 + 384 * v163
                                                                                                 + 8);
                                                                                if (!*(void *)v168
                                                                                  && !*(_DWORD *)(v168 + 152)
                                                                                  && !*(_DWORD *)(v168 + 156))
                                                                                {
                                                                                  goto LABEL_343;
                                                                                }
                                                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v168, 716, *(_DWORD *)(v168 + 52), 0xFFFFFFFFLL, 7, v167, 4);
                                                                                if (!result)
                                                                                {
LABEL_343:
                                                                                  uint64_t v169 = *((void *)this + 33);
                                                                                  int v170 = *(_DWORD *)(v169 + 720);
                                                                                  *(_DWORD *)(v169 + 72pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 720) ^= 0x3FFu;
                                                                                  uint64_t v171 = *((void *)this + 33);
                                                                                  int v172 = *(_DWORD *)(v171 + 720);
                                                                                  *(_DWORD *)(v171 + 72pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v170;
                                                                                  uint64_t v173 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                  if (!*(void *)v173
                                                                                    && !*(_DWORD *)(v173 + 152)
                                                                                    && !*(_DWORD *)(v173 + 156))
                                                                                  {
                                                                                    goto LABEL_344;
                                                                                  }
                                                                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v173, 720, *(_DWORD *)(v173 + 52), 0x3FFFFFFFFFFLL, 32, v172, 4);
                                                                                  if (!result)
                                                                                  {
LABEL_344:
                                                                                    uint64_t v174 = *((void *)this + 33);
                                                                                    int v175 = *(_DWORD *)(v174 + 732);
                                                                                    *(_DWORD *)(v174 + 732) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 732) ^= 0xFFFFFF80;
                                                                                    uint64_t v176 = *((void *)this + 33);
                                                                                    int v177 = *(_DWORD *)(v176 + 732);
                                                                                    *(_DWORD *)(v176 + 732) = v175;
                                                                                    uint64_t v178 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                    if (!*(void *)v178
                                                                                      && !*(_DWORD *)(v178 + 152)
                                                                                      && !*(_DWORD *)(v178 + 156))
                                                                                    {
                                                                                      goto LABEL_186;
                                                                                    }
                                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v178, 732, *(_DWORD *)(v178 + 56), 0xFFFFFFFFLL, 7, v177, 4);
                                                                                    if (!result)
                                                                                    {
LABEL_186:
                                                                                      uint64_t v179 = *((void *)this + 33);
                                                                                      int v180 = *(_DWORD *)(v179 + 736);
                                                                                      *(_DWORD *)(v179 + 736) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 736) ^= 0x3FFu;
                                                                                      uint64_t v181 = *((void *)this + 33);
                                                                                      int v182 = *(_DWORD *)(v181 + 736);
                                                                                      *(_DWORD *)(v181 + 736) = v180;
                                                                                      uint64_t v183 = *((void *)this + 32);
                                                                                      uint64_t v184 = *(void *)(*(void *)(v183 + 8000) + 384 * v163 + 8);
                                                                                      if (*(void *)v184
                                                                                        || *(_DWORD *)(v184 + 152)
                                                                                        || *(_DWORD *)(v184 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v184, 736, *(_DWORD *)(v184 + 56), 0x3FFFFFFFFFFLL, 32, v182, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                        uint64_t v183 = *((void *)this + 32);
                                                                                      }
                                                                                      int v185 = *(_DWORD *)(v183 + 2648);
                                                                                      uint64_t v186 = *((void *)this + 33);
                                                                                      int v187 = *(_DWORD *)(v186 + 708);
                                                                                      *(_DWORD *)(v186 + 708) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 708) ^= 0xFFFFFF80;
                                                                                      uint64_t v188 = *((void *)this + 33);
                                                                                      int v189 = *(_DWORD *)(v188 + 708);
                                                                                      *(_DWORD *)(v188 + 708) = v187;
                                                                                      uint64_t v190 = *((void *)this + 32);
                                                                                      if (v185 == 1)
                                                                                      {
                                                                                        uint64_t v191 = *(void *)(*(void *)(v190 + 8000) + 384 * v163 + 8);
                                                                                        if (*(void *)v191
                                                                                          || *(_DWORD *)(v191 + 152)
                                                                                          || *(_DWORD *)(v191 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v191, 708, *(_DWORD *)(v191 + 64), 0xFFFFFFFFLL, 7, v189, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v192 = *((void *)this + 33);
                                                                                        int v193 = *(_DWORD *)(v192 + 712);
                                                                                        *(_DWORD *)(v192 + 712) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 712) ^= 0x3FFu;
                                                                                        uint64_t v194 = *((void *)this + 33);
                                                                                        int v195 = *(_DWORD *)(v194 + 712);
                                                                                        *(_DWORD *)(v194 + 712) = v193;
                                                                                        uint64_t v196 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                        if (*(void *)v196
                                                                                          || *(_DWORD *)(v196 + 152)
                                                                                          || *(_DWORD *)(v196 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v196, 712, *(_DWORD *)(v196 + 64), 0x3FFFFFFFFFFLL, 32, v195, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v197 = *((void *)this + 33);
                                                                                        int v198 = *(_DWORD *)(v197 + 724);
                                                                                        *(_DWORD *)(v197 + 724) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 724) ^= 0xFFFFFF80;
                                                                                        uint64_t v199 = *((void *)this + 33);
                                                                                        int v200 = *(_DWORD *)(v199 + 724);
                                                                                        *(_DWORD *)(v199 + 724) = v198;
                                                                                        uint64_t v201 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                        if (*(void *)v201
                                                                                          || *(_DWORD *)(v201 + 152)
                                                                                          || *(_DWORD *)(v201 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v201, 724, *(_DWORD *)(v201 + 68), 0xFFFFFFFFLL, 7, v200, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v202 = *((void *)this + 33);
                                                                                        int v203 = *(_DWORD *)(v202 + 728);
                                                                                        *(_DWORD *)(v202 + 728) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 728) ^= 0x3FFu;
                                                                                        uint64_t v204 = *((void *)this + 33);
                                                                                        int v205 = *(_DWORD *)(v204 + 728);
                                                                                        *(_DWORD *)(v204 + 728) = v203;
                                                                                        uint64_t v206 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                        if (!*(void *)v206
                                                                                          && !*(_DWORD *)(v206 + 152)
                                                                                          && !*(_DWORD *)(v206 + 156))
                                                                                        {
                                                                                          goto LABEL_224;
                                                                                        }
                                                                                        int v207 = *(_DWORD *)(v206 + 68);
                                                                                        uint64_t v208 = this;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        uint64_t v209 = v190 + 176 * v163;
                                                                                        if (*(void *)(v209 + 3072)
                                                                                          || *(_DWORD *)(v190 + 176 * v163 + 3224)
                                                                                          || *(_DWORD *)(v190 + 176 * v163 + 3228))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v209 + 3072), 708, 0, 0xFFFFFFFFLL, 7, v189, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v210 = *((void *)this + 33);
                                                                                        int v211 = *(_DWORD *)(v210 + 712);
                                                                                        *(_DWORD *)(v210 + 712) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 712) ^= 0x3FFu;
                                                                                        uint64_t v212 = *((void *)this + 33);
                                                                                        int v213 = *(_DWORD *)(v212 + 712);
                                                                                        *(_DWORD *)(v212 + 712) = v211;
                                                                                        uint64_t v214 = *((void *)this + 32);
                                                                                        uint64_t v215 = v214 + 176 * v163;
                                                                                        if (*(void *)(v215 + 3072)
                                                                                          || *(_DWORD *)(v214 + 176 * v163 + 3224)
                                                                                          || *(_DWORD *)(v214 + 176 * v163 + 3228))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v215 + 3072), 712, 0, 0x3FFFFFFFFFFLL, 32, v213, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v216 = *((void *)this + 33);
                                                                                        int v217 = *(_DWORD *)(v216 + 724);
                                                                                        *(_DWORD *)(v216 + 724) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 724) ^= 0xFFFFFF80;
                                                                                        uint64_t v218 = *((void *)this + 33);
                                                                                        int v219 = *(_DWORD *)(v218 + 724);
                                                                                        *(_DWORD *)(v218 + 724) = v217;
                                                                                        uint64_t v220 = *((void *)this + 32);
                                                                                        uint64_t v221 = v220 + 176 * v163;
                                                                                        if (*(void *)(v221 + 5536)
                                                                                          || *(_DWORD *)(v220 + 176 * v163 + 5688)
                                                                                          || *(_DWORD *)(v220 + 176 * v163 + 5692))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v221 + 5536), 724, 0, 0xFFFFFFFFLL, 7, v219, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v222 = *((void *)this + 33);
                                                                                        int v223 = *(_DWORD *)(v222 + 728);
                                                                                        *(_DWORD *)(v222 + 728) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 728) ^= 0x3FFu;
                                                                                        uint64_t v224 = *((void *)this + 33);
                                                                                        int v205 = *(_DWORD *)(v224 + 728);
                                                                                        *(_DWORD *)(v224 + 728) = v223;
                                                                                        uint64_t v225 = *((void *)this + 32);
                                                                                        uint64_t v226 = v225 + 176 * v163;
                                                                                        if (!*(void *)(v226 + 5536)
                                                                                          && !*(_DWORD *)(v225 + 176 * v163 + 5688)
                                                                                          && !*(_DWORD *)(v225 + 176 * v163 + 5692))
                                                                                        {
                                                                                          goto LABEL_224;
                                                                                        }
                                                                                        uint64_t v206 = v226 + 5536;
                                                                                        uint64_t v208 = this;
                                                                                        int v207 = 0;
                                                                                      }
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)v208, (void *)v206, 728, v207, 0x3FFFFFFFFFFLL, 32, v205, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
LABEL_224:
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 74pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 744) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 748) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 752) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 756) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 764) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 768) = 0;
                                                                                      if (*(_DWORD *)(*((void *)this + 32) + 2644))
                                                                                      {
                                                                                        uint64_t v227 = *((void *)this + 33);
                                                                                        int v228 = *(_DWORD *)(v227 + 740);
                                                                                        *(_DWORD *)(v227 + 74pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 740) ^= 0xFFFFFF00;
                                                                                        uint64_t v229 = *((void *)this + 33);
                                                                                        int v230 = *(_DWORD *)(v229 + 740);
                                                                                        *(_DWORD *)(v229 + 74pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v228;
                                                                                        if (*((void *)this + 454)
                                                                                          || *((_DWORD *)this + 946)
                                                                                          || *((_DWORD *)this + 947))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 740, 0, 0xFFFFFFFFLL, 8, v230, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        int v231 = *(_DWORD *)(*(void *)v3 + 744);
                                                                                        *(_DWORD *)(*(void *)v3 + 744) = 0;
                                                                                        *(_DWORD *)(*(void *)v3 + 744) ^= 0x3FFu;
                                                                                        int v232 = *(_DWORD *)(*(void *)v3 + 744);
                                                                                        *(_DWORD *)(*(void *)v3 + 744) = v231;
                                                                                        if (*((void *)this + 454)
                                                                                          || *((_DWORD *)this + 946)
                                                                                          || *((_DWORD *)this + 947))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 744, 0, 0x3FFFFFFFFFFLL, 32, v232, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v233 = *((void *)this + 32);
                                                                                        int v234 = *(unsigned __int8 *)(v233 + 3004);
                                                                                        if (*(unsigned char *)(v233 + 3004))
                                                                                        {
                                                                                          int v234 = *(_DWORD *)(v233 + 3016);
                                                                                          int v235 = *(_DWORD *)(v233 + 3020);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int v235 = 0;
                                                                                        }
                                                                                        uint64_t v236 = *(void *)(v233 + 42696);
                                                                                        int v237 = *(_DWORD *)(v236 + 56);
                                                                                        int v238 = *(_DWORD *)(v236 + 52)
                                                                                             + v234;
                                                                                        uint64_t v239 = *((void *)this + 33);
                                                                                        int v240 = *(_DWORD *)(v239 + 748);
                                                                                        *(_DWORD *)(v239 + 748) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 748) ^= 0xFFFFFFC0;
                                                                                        uint64_t v241 = *((void *)this + 33);
                                                                                        int v242 = *(_DWORD *)(v241 + 748);
                                                                                        *(_DWORD *)(v241 + 748) = v240;
                                                                                        uint64_t v243 = *(void *)(*((void *)this + 32) + 42696);
                                                                                        if (*(void *)v243
                                                                                          || *(_DWORD *)(v243 + 152)
                                                                                          || *(_DWORD *)(v243 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v243, 748, v238, 0xFFFFFFFFLL, 6, v242, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v244 = *((void *)this + 33);
                                                                                        int v245 = *(_DWORD *)(v244 + 752);
                                                                                        *(_DWORD *)(v244 + 752) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 752) ^= 0x3FFu;
                                                                                        uint64_t v246 = *((void *)this + 33);
                                                                                        int v247 = *(_DWORD *)(v246 + 752);
                                                                                        *(_DWORD *)(v246 + 752) = v245;
                                                                                        uint64_t v248 = *(void *)(*((void *)this + 32) + 42696);
                                                                                        if (*(void *)v248
                                                                                          || *(_DWORD *)(v248 + 152)
                                                                                          || *(_DWORD *)(v248 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v248, 752, v238, 0x3FFFFFFFFFFLL, 32, v247, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v249 = *((void *)this + 33);
                                                                                        int v250 = *(_DWORD *)(v249 + 760);
                                                                                        *(_DWORD *)(v249 + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 760) ^= 0xFFFFFFC0;
                                                                                        uint64_t v251 = *((void *)this + 33);
                                                                                        int v252 = *(_DWORD *)(v251 + 760);
                                                                                        *(_DWORD *)(v251 + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v250;
                                                                                        uint64_t v253 = *(void *)(*((void *)this + 32) + 42696);
                                                                                        if (*(void *)v253
                                                                                          || *(_DWORD *)(v253 + 152)
                                                                                          || *(_DWORD *)(v253 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v253, 760, v237 + v235, 0xFFFFFFFFLL, 6, v252, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v254 = *((void *)this + 33);
                                                                                        int v255 = *(_DWORD *)(v254 + 764);
                                                                                        *(_DWORD *)(v254 + 764) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 764) ^= 0x3FFu;
                                                                                        uint64_t v256 = *((void *)this + 33);
                                                                                        int v257 = *(_DWORD *)(v256 + 764);
                                                                                        *(_DWORD *)(v256 + 764) = v255;
                                                                                        uint64_t v258 = *((void *)this + 32);
                                                                                        uint64_t v259 = *(void *)(v258 + 42696);
                                                                                        if (*(void *)v259
                                                                                          || *(_DWORD *)(v259 + 152)
                                                                                          || *(_DWORD *)(v259 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v259, 764, v237 + v235, 0x3FFFFFFFFFFLL, 32, v257, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                          uint64_t v258 = *((void *)this + 32);
                                                                                        }
                                                                                        uint64_t v260 = *(void *)v3;
                                                                                        unsigned int v261 = *(_DWORD *)(*(void *)v3 + 756) & 0xFFFC003F;
                                                                                        if (*(unsigned char *)(v258 + 8))
                                                                                        {
                                                                                          *(_DWORD *)(v260 + 756) = v261 | *(_DWORD *)(*(void *)(v258 + 42696) + 76) & 0x3FFC0;
                                                                                          uint64_t v262 = (_DWORD *)(*(void *)(*((void *)this + 32) + 42696) + 80);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          *(_DWORD *)(v260 + 756) = v261 | *(_DWORD *)(*(void *)(v258 + 15944) + 78508) & 0x3FFC0;
                                                                                          uint64_t v262 = (_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78512);
                                                                                        }
                                                                                        *(_DWORD *)(*(void *)v3 + 768) = *(_DWORD *)(*(void *)v3 + 768) & 0xFFF8003F | (((*v262 >> 6) & 0x1FFF) << 6);
                                                                                      }
                                                                                      uint64_t v263 = *((void *)this + 32);
                                                                                      if (*(unsigned char *)(*(void *)(v263 + 15944) + 128)
                                                                                        && !*(unsigned char *)(*(void *)(v263 + 42424) + 1956))
                                                                                      {
                                                                                        return 0;
                                                                                      }
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 772) = 0;
                                                                                      uint64_t v264 = *((void *)this + 33);
                                                                                      int v265 = *(_DWORD *)(v264 + 772);
                                                                                      *(_DWORD *)(v264 + 772) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 772) ^= 0xFFFFFF00;
                                                                                      uint64_t v266 = *((void *)this + 33);
                                                                                      int v267 = *(_DWORD *)(v266 + 772);
                                                                                      *(_DWORD *)(v266 + 772) = v265;
                                                                                      if (*((void *)this + 498)
                                                                                        || *((_DWORD *)this + 1034)
                                                                                        || *((_DWORD *)this + 1035))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 772, 0, 0xFFFFFFFFLL, 8, v267, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      *(_DWORD *)(*(void *)v3 + 776) = 0;
                                                                                      int v268 = *(_DWORD *)(*(void *)v3 + 776);
                                                                                      *(_DWORD *)(*(void *)v3 + 776) = 0;
                                                                                      *(_DWORD *)(*(void *)v3 + 776) ^= 0x3FFu;
                                                                                      int v269 = *(_DWORD *)(*(void *)v3 + 776);
                                                                                      *(_DWORD *)(*(void *)v3 + 776) = v268;
                                                                                      if (*((void *)this + 498)
                                                                                        || *((_DWORD *)this + 1034)
                                                                                        || *((_DWORD *)this + 1035))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 776, 0, 0x3FFFFFFFFFFLL, 32, v269, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      if (*(unsigned char *)(*(void *)(*((void *)this + 32) + 15944) + 128)) {
                                                                                        return 0;
                                                                                      }
                                                                                      uint64_t v270 = 0;
                                                                                      uint64_t v271 = 0;
                                                                                      do
                                                                                      {
                                                                                        uint64_t v272 = *(void *)(*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79224) + v271);
                                                                                        if (!v272
                                                                                          || (uint64_t v273 = *(void *)(v272 + 2016)) == 0)
                                                                                        {
                                                                                          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                                          {
                                                                                            LODWORD(v329[0]) = 136315138;
                                                                                            *(void *)((char *)v329 + 4) = "populateAddressRegisters";
                                                                                            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Unexpected. av1_fb->buffer is 0x0!", (uint8_t *)v329, 0xCu);
                                                                                          }
                                                                                          return 0xFFFFFFFFLL;
                                                                                        }
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 808) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 836) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 864) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 892) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 948) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 976) = 0;
                                                                                        uint64_t v274 = *(void *)v3 + v270;
                                                                                        int v275 = *(_DWORD *)(v274 + 836);
                                                                                        *(_DWORD *)(v274 + 836) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 836) ^= 0xFFFFFF80;
                                                                                        uint64_t v276 = *(void *)v3 + v270;
                                                                                        int v277 = *(_DWORD *)(v276 + 836);
                                                                                        *(_DWORD *)(v276 + 836) = v275;
                                                                                        uint64_t v278 = *(void *)(v273 + 8);
                                                                                        if (*(void *)v278
                                                                                          || *(_DWORD *)(v278 + 152)
                                                                                          || *(_DWORD *)(v278 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v278, (int)v270 + 836, *(_DWORD *)(v278 + 52), 0xFFFFFFFFLL, 7, v277, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v279 = *(void *)v3 + v270;
                                                                                        int v280 = *(_DWORD *)(v279 + 864);
                                                                                        *(_DWORD *)(v279 + 864) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 864) ^= 0x3FFu;
                                                                                        uint64_t v281 = *(void *)v3 + v270;
                                                                                        int v282 = *(_DWORD *)(v281 + 864);
                                                                                        *(_DWORD *)(v281 + 864) = v280;
                                                                                        uint64_t v283 = *(void *)(v273 + 8);
                                                                                        if (*(void *)v283
                                                                                          || *(_DWORD *)(v283 + 152)
                                                                                          || *(_DWORD *)(v283 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v283, (int)v270 + 864, *(_DWORD *)(v283 + 52), 0x3FFFFFFFFFFLL, 32, v282, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v284 = *(void *)v3 + v270;
                                                                                        int v285 = *(_DWORD *)(v284 + 948);
                                                                                        *(_DWORD *)(v284 + 948) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 948) ^= 0xFFFFFF80;
                                                                                        uint64_t v286 = *(void *)v3 + v270;
                                                                                        int v287 = *(_DWORD *)(v286 + 948);
                                                                                        *(_DWORD *)(v286 + 948) = v285;
                                                                                        uint64_t v288 = *(void *)(v273 + 8);
                                                                                        if (*(void *)v288
                                                                                          || *(_DWORD *)(v288 + 152)
                                                                                          || *(_DWORD *)(v288 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v288, (int)v270 + 948, *(_DWORD *)(v288 + 56), 0xFFFFFFFFLL, 7, v287, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v289 = *(void *)v3 + v270;
                                                                                        int v290 = *(_DWORD *)(v289 + 976);
                                                                                        *(_DWORD *)(v289 + 976) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 976) ^= 0x3FFu;
                                                                                        uint64_t v291 = *(void *)v3 + v270;
                                                                                        int v292 = *(_DWORD *)(v291 + 976);
                                                                                        *(_DWORD *)(v291 + 976) = v290;
                                                                                        uint64_t v293 = *(void *)(v273 + 8);
                                                                                        if (*(void *)v293
                                                                                          || *(_DWORD *)(v293 + 152)
                                                                                          || *(_DWORD *)(v293 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v293, (int)v270 + 976, *(_DWORD *)(v293 + 56), 0x3FFFFFFFFFFLL, 32, v292, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        int v294 = *(_DWORD *)(*((void *)this + 32) + 2648);
                                                                                        uint64_t v295 = *((void *)this + 33)
                                                                                             + v270;
                                                                                        int v296 = *(_DWORD *)(v295 + 780);
                                                                                        *(_DWORD *)(v295 + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + v270
                                                                                                  + 780) ^= 0xFFFFFF80;
                                                                                        uint64_t v297 = *((void *)this + 33)
                                                                                             + v270;
                                                                                        int v298 = *(_DWORD *)(v297 + 780);
                                                                                        *(_DWORD *)(v297 + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v296;
                                                                                        if (v294 == 1)
                                                                                        {
                                                                                          uint64_t v299 = *(void *)(v273 + 8);
                                                                                          if (*(void *)v299
                                                                                            || *(_DWORD *)(v299 + 152)
                                                                                            || *(_DWORD *)(v299 + 156))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v299, (int)v270 + 780, *(_DWORD *)(v299 + 64), 0xFFFFFFFFLL, 7, v298, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v300 = *(void *)v3 + v270;
                                                                                          int v301 = *(_DWORD *)(v300 + 808);
                                                                                          *(_DWORD *)(v300 + 808) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 808) ^= 0x3FFu;
                                                                                          uint64_t v302 = *(void *)v3 + v270;
                                                                                          int v303 = *(_DWORD *)(v302 + 808);
                                                                                          *(_DWORD *)(v302 + 808) = v301;
                                                                                          uint64_t v304 = *(void *)(v273 + 8);
                                                                                          if (*(void *)v304
                                                                                            || *(_DWORD *)(v304 + 152)
                                                                                            || *(_DWORD *)(v304 + 156))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v304, (int)v270 + 808, *(_DWORD *)(v304 + 64), 0x3FFFFFFFFFFLL, 32, v303, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v305 = *(void *)v3 + v270;
                                                                                          int v306 = *(_DWORD *)(v305 + 892);
                                                                                          *(_DWORD *)(v305 + 892) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 892) ^= 0xFFFFFF80;
                                                                                          uint64_t v307 = *(void *)v3 + v270;
                                                                                          int v308 = *(_DWORD *)(v307 + 892);
                                                                                          *(_DWORD *)(v307 + 892) = v306;
                                                                                          uint64_t v309 = *(void *)(v273 + 8);
                                                                                          if (*(void *)v309
                                                                                            || *(_DWORD *)(v309 + 152)
                                                                                            || *(_DWORD *)(v309 + 156))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v309, (int)v270 + 892, *(_DWORD *)(v309 + 68), 0xFFFFFFFFLL, 7, v308, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v310 = *(void *)v3 + v270;
                                                                                          int v311 = *(_DWORD *)(v310 + 920);
                                                                                          *(_DWORD *)(v310 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 920) ^= 0x3FFu;
                                                                                          uint64_t v312 = *(void *)v3 + v270;
                                                                                          int v313 = *(_DWORD *)(v312 + 920);
                                                                                          *(_DWORD *)(v312 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v311;
                                                                                          uint64_t v314 = *(void *)(v273 + 8);
                                                                                          if (*(void *)v314
                                                                                            || *(_DWORD *)(v314 + 152)
                                                                                            || *(_DWORD *)(v314 + 156))
                                                                                          {
                                                                                            int v315 = *(_DWORD *)(v314 + 68);
                                                                                            int v316 = v270 + 920;
                                                                                            uint64_t v317 = this;
                                                                                            goto LABEL_325;
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          if (*(void *)(v273 + 24)
                                                                                            || *(_DWORD *)(v273 + 176)
                                                                                            || *(_DWORD *)(v273 + 180))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v273 + 24), (int)v270 + 780, 0, 0xFFFFFFFFLL, 7, v298, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v318 = *(void *)v3 + v270;
                                                                                          int v319 = *(_DWORD *)(v318 + 808);
                                                                                          *(_DWORD *)(v318 + 808) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 808) ^= 0x3FFu;
                                                                                          uint64_t v320 = *(void *)v3 + v270;
                                                                                          int v321 = *(_DWORD *)(v320 + 808);
                                                                                          *(_DWORD *)(v320 + 808) = v319;
                                                                                          if (*(void *)(v273 + 24)
                                                                                            || *(_DWORD *)(v273 + 176)
                                                                                            || *(_DWORD *)(v273 + 180))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v273 + 24), (int)v270 + 808, 0, 0x3FFFFFFFFFFLL, 32, v321, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v322 = *(void *)v3 + v270;
                                                                                          int v323 = *(_DWORD *)(v322 + 892);
                                                                                          *(_DWORD *)(v322 + 892) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 892) ^= 0xFFFFFF80;
                                                                                          uint64_t v324 = *(void *)v3 + v270;
                                                                                          int v325 = *(_DWORD *)(v324 + 892);
                                                                                          *(_DWORD *)(v324 + 892) = v323;
                                                                                          if (*(void *)(v273 + 200)
                                                                                            || *(_DWORD *)(v273 + 352)
                                                                                            || *(_DWORD *)(v273 + 356))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v273 + 200), (int)v270 + 892, 0, 0xFFFFFFFFLL, 7, v325, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v326 = *(void *)v3 + v270;
                                                                                          int v327 = *(_DWORD *)(v326 + 920);
                                                                                          *(_DWORD *)(v326 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 920) ^= 0x3FFu;
                                                                                          uint64_t v328 = *(void *)v3 + v270;
                                                                                          int v313 = *(_DWORD *)(v328 + 920);
                                                                                          *(_DWORD *)(v328 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v327;
                                                                                          if (*(void *)(v273 + 200)
                                                                                            || *(_DWORD *)(v273 + 352)
                                                                                            || *(_DWORD *)(v273 + 356))
                                                                                          {
                                                                                            int v316 = v270 + 920;
                                                                                            uint64_t v317 = this;
                                                                                            uint64_t v314 = v273 + 200;
                                                                                            int v315 = 0;
LABEL_325:
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)v317, (void *)v314, v316, v315, 0x3FFFFFFFFFFLL, 32, v313, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                        uint64_t result = 0;
                                                                                        v271 += 8;
                                                                                        v270 += 4;
                                                                                      }
                                                                                      while (v270 != 28);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecTansyAvx::populateDecryptionRegisters(CAHDecTansyAvx *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 32);
  if (*(_DWORD *)(v1 + 2360) != 1) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 33);
  *(_DWORD *)(v3 + 1276) = *(_DWORD *)(v3 + 1276) & 0xFFFFFFFE | *(_DWORD *)(v1 + 2508) & 1;
  if (*(_DWORD *)(v1 + 2508))
  {
    *(_DWORD *)(v3 + 1288) = 0x10000000;
    *(_DWORD *)(v3 + 1292) = *(_DWORD *)(v1 + 2368);
    *(_DWORD *)(v3 + 1304) = 0;
    *(void *)(v3 + 1296) = 0;
    *(_OWORD *)(v3 + 1308) = *(_OWORD *)(v1 + 2372);
    long long v4 = *(_OWORD *)(v1 + 2388);
    *(_OWORD *)(v3 + 134pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v1 + 2404);
    *(_OWORD *)(v3 + 1324) = v4;
  }
  *(_DWORD *)(*((void *)this + 33) + 1276) = *(_DWORD *)(*((void *)this + 33) + 1276) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v1 + 2512) & 1));
  if (!*(_DWORD *)(v1 + 2512))
  {
LABEL_7:
    *(_DWORD *)(*((void *)this + 33) + 1276) = *(_DWORD *)(*((void *)this + 33) + 1276) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v1 + 2516) & 1));
    *(_DWORD *)(*((void *)this + 33) + 1276) = *(_DWORD *)(*((void *)this + 33) + 1276) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v1 + 2520) & 1));
    *(_DWORD *)(*((void *)this + 33) + 1276) = *(_DWORD *)(*((void *)this + 33) + 1276) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v1 + 2524) & 1));
    if (*(_DWORD *)(v1 + 2516))
    {
      *(_DWORD *)(v3 + 1516) = 0;
      if (*(_DWORD *)(v1 + 2476) == 2) {
        int v8 = 805306368;
      }
      else {
        int v8 = 813694976;
      }
      *(_DWORD *)(v3 + 1516) = v8;
      memcpy((void *)(v3 + 1520), (const void *)(v1 + 2480), 4 * *(unsigned int *)(v1 + 2476));
      *(_DWORD *)(v1 + 2516) = 0;
    }
    *(_DWORD *)(*((void *)this + 33) + 1276) = *(_DWORD *)(*((void *)this + 33) + 1276) & 0xFFFEFFFF | ((*(_DWORD *)(v1 + 2632) & 1) << 16);
    if (*(_DWORD *)(v1 + 2632))
    {
      *(_DWORD *)(v3 + 1408) = 0x80000000;
      unsigned int v9 = ((*(_DWORD *)(v1 + 2528) & 1) << 27) | 0x80000000;
      *(_DWORD *)(v3 + 1408) = v9;
      *(_DWORD *)(v3 + 1408) = v9 | (((2 * *(_DWORD *)(v1 + 2528)) & 4 | (*(_DWORD *)(v1 + 2528) >> 1) & 2 | (*(_DWORD *)(v1 + 2528) >> 3) & 1) << 24);
      long long v10 = *(_OWORD *)(v1 + 2532);
      long long v11 = *(_OWORD *)(v1 + 2564);
      *(_OWORD *)(v3 + 1428) = *(_OWORD *)(v1 + 2548);
      *(_OWORD *)(v3 + 1444) = v11;
      *(_OWORD *)(v3 + 1412) = v10;
      *(void *)(v3 + 146pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(v1 + 2580);
      *(void *)(v3 + 1468) = *(void *)(v1 + 2588);
      int v12 = *(_DWORD *)(v1 + 2528);
      if ((v12 & 6) != 0 && (v12 & 8) == 0)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = 136315138;
          uint64_t v17 = "populateDecryptionRegisters";
          int v13 = &_os_log_internal;
          uint64_t v14 = "AppleAVD: %s(): chip id is not used while ecid and/or board id is used\n";
LABEL_23:
          _os_log_impl(&dword_223977000, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v16, 0xCu);
          return 0xFFFFFFFFLL;
        }
        return 0xFFFFFFFFLL;
      }
      *(_OWORD *)(v3 + 1476) = *(_OWORD *)(v1 + 2596);
    }
    *(_DWORD *)(*((void *)this + 33) + 1276) = *(_DWORD *)(*((void *)this + 33) + 1276) & 0xFFFDFFFF | ((*(_DWORD *)(v1 + 2636) & 1) << 17);
    if (*(_DWORD *)(v1 + 2636))
    {
      uint64_t result = 0;
      *(_DWORD *)(v3 + 1492) = -1879048192;
      *(_DWORD *)(v3 + 1492) = ((*(_DWORD *)(v1 + 2612) & 1) << 23) | 0x90000000;
      *(_OWORD *)(v3 + 1496) = *(_OWORD *)(v1 + 2616);
      *(_DWORD *)(v1 + 264pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
      return result;
    }
    return 0;
  }
  *(_DWORD *)(v3 + 1356) = 0;
  if (*(_DWORD *)(v1 + 2424))
  {
    *(_DWORD *)(v1 + 264pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    int v5 = *(_DWORD *)(v3 + 1356) & 0xF7FFFFF | ((*(_DWORD *)(v1 + 2420) & 1) << 23) | 0x20000000;
    *(_DWORD *)(v3 + 1356) = v5;
    *(_DWORD *)(v3 + 1356) = v5 & 0xFFC00000 | (*(_DWORD *)(v1 + 2364) == 0);
    long long v6 = *(_OWORD *)(v1 + 2428);
    long long v7 = *(_OWORD *)(v1 + 2444);
    *(_OWORD *)(v3 + 1392) = *(_OWORD *)(v1 + 2460);
    *(_OWORD *)(v3 + 1376) = v7;
    *(_OWORD *)(v3 + 136pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v6;
    goto LABEL_7;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315138;
    uint64_t v17 = "populateDecryptionRegisters";
    int v13 = &_os_log_internal;
    uint64_t v14 = "AppleAVD: %s(): H13A descrambler is not supported\n";
    goto LABEL_23;
  }
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecTansyAvx::populateTiles(CAHDecTansyAvx *this)
{
  uint64_t v2 = (*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 140)
                    * *(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 136));
  uint64_t v3 = *((void *)this + *((unsigned int *)this + 13) + 34);
  CAHDecTansyAvx::populateClearTiles(this);
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 1536;
    do
    {
      CAHDecTansyAvx::populateTileRegisters((uint64_t)this, v5, v4++);
      v5 += 12;
    }
    while (v2 != v4);
  }
  return 0;
}

uint64_t CAHDecTansyAvx::populateAvxVPDependency(CAVDAvxDecoder **this)
{
  if (CAVDAvxDecoder::isParallelDecode(this[32])) {
    int v2 = 0;
  }
  else {
    int v2 = 32;
  }
  *((_DWORD *)this[33] + 319) = *((_DWORD *)this[33] + 319) & 0xFFFFFFDF | v2;
  *((_DWORD *)this[33] + 319) &= 0xFFFFF83F;
  *((_DWORD *)this[33] + 319) &= 0xFFFF07FF;
  *((_DWORD *)this[33] + 32pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  return 0;
}

uint64_t CAHDecTansyAvx::populateCommonRegisters(CAHDecTansyAvx *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000003;
  return 0;
}

uint64_t CAHDecTansyAvx::updateCommonRegisters(CAHDecTansyAvx *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

uint64_t CAHDecTansyAvx::populateSequenceRegisters(CAHDecTansyAvx *this)
{
  uint64_t v2 = *((void *)this + 32);
  uint64_t v1 = *((void *)this + 33);
  uint64_t v3 = *(void *)(v2 + 42424);
  uint64_t v4 = *(void *)(v2 + 15944);
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  unsigned __int16 v5 = *(_DWORD *)(v4 + 8) - 1;
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (v5 | ((unsigned __int16)*(_DWORD *)(v4 + 12) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  int v6 = *(_DWORD *)(v3 + 80) & 1;
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v3 + 76) & 7));
  *(_DWORD *)(v1 + 44) = v7;
  unsigned int v8 = v7 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v3 + 72) & 1));
  *(_DWORD *)(v1 + 44) = v8;
  unsigned int v9 = v8 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v3 + 96) & 1));
  *(_DWORD *)(v1 + 44) = v9;
  unsigned int v10 = v9 & 0xFFFFFFBF | ((*(unsigned char *)(v3 + 95) & 1) << 6);
  *(_DWORD *)(v1 + 44) = v10;
  unsigned int v11 = v10 & 0xFFFFFF7F | ((*(unsigned char *)(v3 + 94) & 1) << 7);
  *(_DWORD *)(v1 + 44) = v11;
  unsigned int v12 = v11 & 0xFFFFFEFF | ((*(unsigned char *)(v3 + 93) & 1) << 8);
  *(_DWORD *)(v1 + 44) = v12;
  unsigned int v13 = v12 & 0xFFFFFDFF | ((*(unsigned char *)(v3 + 92) & 1) << 9);
  *(_DWORD *)(v1 + 44) = v13;
  unsigned int v14 = v13 & 0xFFFFFBFF | ((*(_DWORD *)(v3 + 60) == 15) << 10);
  *(_DWORD *)(v1 + 44) = v14;
  LODWORD(v3) = v14 & 0xFFFFF7FF | (*(unsigned __int8 *)(v3 + 1942) << 11);
  *(_DWORD *)(v1 + 44) = v3;
  LODWORD(v3) = v3 & 0xFFF87FFF | ((*(unsigned char *)(v4 + 58) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v3;
  LODWORD(v3) = v3 & 0xFF87FFFF | ((*(unsigned char *)(v4 + 57) & 0xF) << 19);
  *(_DWORD *)(v1 + 44) = v3;
  *(_DWORD *)(v1 + 44) = v3 & 0xFCFFFFFF | ((*(unsigned char *)(v4 + 56) & 3) << 24);
  return 0;
}

uint64_t CAHDecTansyAvx::getUpscaleConvolveStep(CAHDecTansyAvx *this, int a2, int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 >= 0) {
      int v3 = a3;
    }
    else {
      int v3 = a3 + 1;
    }
    return (((v3 >> 1) + (a2 << 14)) / a3);
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      int v6 = "int32_t CAHDecTansyAvx::getUpscaleConvolveStep(int, int)";
      __int16 v7 = 1024;
      int v8 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid out_length %d\n", (uint8_t *)&v5, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t CAHDecTansyAvx::getUpscaleConvolveX0(CAHDecTansyAvx *this, int a2, int a3, int a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 >= 0) {
      int v4 = a3;
    }
    else {
      int v4 = a3 + 1;
    }
    return ((((a2 - a3) << 13) + (v4 >> 1)) / a3
          - ((a4 * a3 - (a2 << 14) + (a4 * a3 - (a2 << 14) < 0)) >> 1)
          + 128) & 0x3FFF;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      __int16 v7 = "int32_t CAHDecTansyAvx::getUpscaleConvolveX0(int, int, int32_t)";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid out_length %d\n", (uint8_t *)&v6, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t CAHDecTansyAvx::populatePictureRegisters(CAHDecTansyAvx *this)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v3 = *(void *)(v1 + 15944);
  uint64_t v4 = *(void *)(v1 + 42424);
  *(_DWORD *)(v2 + 48) = 766509056;
  int v5 = ((*(unsigned char *)(v1 + 2652) & 1) << 19) | 0x2DB00000;
  *(_DWORD *)(v2 + 48) = v5;
  unsigned int v6 = v5 & 0xFFFBFFFF | ((*(unsigned char *)(v1 + 2653) & 1) << 18);
  *(_DWORD *)(v2 + 48) = v6;
  unsigned int v7 = v6 & 0xFFFDFFFF | ((*(unsigned char *)(v1 + 2654) & 1) << 17);
  *(_DWORD *)(v2 + 48) = v7;
  int v8 = *(unsigned __int8 *)(v3 + 128);
  if (*(unsigned char *)(v3 + 128)) {
    int v8 = (*(unsigned char *)(v4 + 1956) == 0) << 13;
  }
  int v9 = v8 | v7;
  *(_DWORD *)(v2 + 48) = v9;
  int v10 = v9 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v2 + 48) = v10;
  unsigned int v11 = v10 & 0xFFFFF00F | ((*(_DWORD *)(*((void *)this + 32) + 2644) == 1) << 10) | 0x2E0;
  *(_DWORD *)(v2 + 48) = v11;
  unsigned int v12 = v11 & 0xFFFFFFE3 | (4 * (*(_DWORD *)(v3 + 78516) & 3));
  *(_DWORD *)(v2 + 48) = v12;
  *(_DWORD *)(v2 + 48) = v12 & 0xFFFFFFFC | *(_DWORD *)(v3 + 78520) & 3;
  *(_DWORD *)(v2 + 52) = 0;
  if (*(unsigned char *)(v4 + 1956)) {
    int v13 = 318767104;
  }
  else {
    int v13 = 50331648;
  }
  *(_DWORD *)(v2 + 52) = v13;
  int v14 = *(_DWORD *)(v3 + 24);
  int v15 = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v2 + 56) = 0;
  if (*(unsigned char *)(v4 + 1956)) {
    int v15 = ((_WORD)v15 + 7) & 0xFFF8;
  }
  int v16 = (v15 << 16) - 0x10000;
  *(_DWORD *)(v2 + 56) = v16;
  if (*(unsigned char *)(v4 + 1956)) {
    LOWORD(v14) = (v14 + 7) & 0xFFF8;
  }
  *(_DWORD *)(v2 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 56) = v16 & 0xFFFF0000 | (unsigned __int16)(v14 - 1);
  int v17 = *(unsigned __int8 *)(v3 + 128) << 31;
  *(_DWORD *)(v2 + 64) = v17;
  unsigned int v18 = v17 & 0x807FFFFF | (*(_DWORD *)(v4 + 1876) << 23);
  *(_DWORD *)(v2 + 64) = v18;
  unsigned int v19 = v18 & 0xFF8FFFFF | ((*(_DWORD *)(v4 + 1896) & 7) << 20);
  *(_DWORD *)(v2 + 64) = v19;
  unsigned int v20 = v19 & 0xFFF1FFFF | ((*(_DWORD *)(v4 + 1900) & 7) << 17);
  *(_DWORD *)(v2 + 64) = v20;
  unsigned int v21 = v20 & 0xFFFEFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79300) & 1) << 16);
  *(_DWORD *)(v2 + 64) = v21;
  unsigned int v22 = v21 & 0xFFFF7FFF | ((*(unsigned char *)(v4 + 2284) & 1) << 15);
  *(_DWORD *)(v2 + 64) = v22;
  char v23 = *(unsigned char *)(v4 + 2284);
  if (v23) {
    char v23 = *(unsigned char *)(v4 + 2285);
  }
  unsigned int v24 = v22 & 0xFFFFBFFF | ((v23 & 1) << 14);
  *(_DWORD *)(v2 + 64) = v24;
  char v25 = *(unsigned char *)(v4 + 2284);
  if (v25) {
    char v25 = *(unsigned char *)(v4 + 2287);
  }
  unsigned int v26 = v24 & 0xFFFFDFFF | ((v25 & 1) << 13);
  *(_DWORD *)(v2 + 64) = v26;
  unsigned int v27 = v26 & 0xFFFFEFFF | (*(unsigned __int8 *)(v4 + 1957) << 12);
  *(_DWORD *)(v2 + 64) = v27;
  if (*(unsigned char *)(v3 + 128)) {
    char v28 = 0;
  }
  else {
    char v28 = *(unsigned char *)(v4 + 1958);
  }
  unsigned int v29 = v27 & 0xFFFFFBFF | ((v28 & 1) << 10);
  *(_DWORD *)(v2 + 64) = v29;
  unsigned int v30 = v29 & 0xFFFFFDFF | (*(unsigned __int8 *)(v4 + 1962) << 9);
  *(_DWORD *)(v2 + 64) = v30;
  unsigned int v31 = v30 & 0xFFFFFEFF | (*(unsigned __int8 *)(v4 + 1941) << 8);
  *(_DWORD *)(v2 + 64) = v31;
  if (*(unsigned char *)(v3 + 128)) {
    char v32 = 1;
  }
  else {
    char v32 = *(unsigned char *)(v4 + 1948);
  }
  uint64_t v33 = 0;
  unsigned int v34 = v31 & 0xFFFFFF7F | ((v32 & 1) << 7);
  *(_DWORD *)(v2 + 64) = v34;
  unsigned int v35 = v34 & 0xFFFFFFBF | (*(unsigned __int8 *)(v4 + 1956) << 6);
  *(_DWORD *)(v2 + 64) = v35;
  unsigned int v36 = v35 & 0xFFFFFFDF | (32 * *(unsigned __int8 *)(v4 + 1959));
  *(_DWORD *)(v2 + 64) = v36;
  unsigned int v37 = v36 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v4 + 1892) & 1));
  *(_DWORD *)(v2 + 64) = v37;
  unsigned int v38 = v37 & 0xFFFFFFF7 | (8 * *(unsigned __int8 *)(v4 + 1960));
  *(_DWORD *)(v2 + 64) = v38;
  unsigned int v39 = v38 & 0xFFFFFFFB | (4 * *(unsigned __int8 *)(v4 + 1961));
  *(_DWORD *)(v2 + 64) = v39;
  *(_DWORD *)(v2 + 64) = v39 & 0xFFFFFFFC | *(_DWORD *)(v4 + 1964) & 3;
  do
  {
    *(&v210 + v33) = v33 + 1;
    ++v33;
  }
  while (v33 != 7);
  unint64_t v40 = 0;
  uint64_t v41 = 1;
  do
  {
    if (v40 <= 5)
    {
      uint64_t v42 = *(void *)(v3 + 79224);
      uint64_t v43 = v41;
      do
      {
        if (v42 && *(void *)(v42 + 8 * v40) == *(void *)(v42 + 8 * v43)) {
          *(&v210 + v43) = *(&v210 + v40);
        }
        ++v43;
      }
      while (v43 != 7);
    }
    ++v40;
    ++v41;
  }
  while (v40 != 7);
  int v44 = 0;
  *(_DWORD *)(v2 + 68) = 0;
  if (!*(unsigned char *)(v3 + 128)) {
    int v44 = *(unsigned __int8 *)(v4 + 2192);
  }
  uint64_t v45 = 0;
  *(_DWORD *)(v2 + 68) = v44 << 29;
  int v46 = ((v210 & 7) << 25) | ((*(_DWORD *)(v4 + 1872) != 0) << 28) | ((v211 & 7) << 22) | ((v212 & 7) << 19) | ((v213 & 7) << 16) | ((v214 & 7) << 13) | ((v215 & 7) << 10) | ((v216 & 7) << 7) | (v44 << 29);
  *(_DWORD *)(v2 + 68) = v46;
  unsigned int v47 = v46 & 0xFFFFFFBF | ((*(_DWORD *)(v4 + 2116) & 1) << 6);
  *(_DWORD *)(v2 + 68) = v47;
  unsigned int v48 = v47 & 0xFFFFFFDF | (32 * (*(_DWORD *)(v4 + 2120) & 1));
  *(_DWORD *)(v2 + 68) = v48;
  unsigned int v49 = v48 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v4 + 2124) & 1));
  *(_DWORD *)(v2 + 68) = v49;
  unsigned int v50 = v49 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v4 + 2128) & 1));
  *(_DWORD *)(v2 + 68) = v50;
  unsigned int v51 = v50 & 0xFFFFFFFB | (4 * (*(_DWORD *)(v4 + 2132) & 1));
  *(_DWORD *)(v2 + 68) = v51;
  unsigned int v52 = v51 & 0xFFFFFFFD | (2 * (*(_DWORD *)(v4 + 2136) & 1));
  *(_DWORD *)(v2 + 68) = v52;
  *(_DWORD *)(v2 + 68) = v52 & 0xFFFFFFFE | *(_DWORD *)(v4 + 2140) & 1;
  uint64_t v53 = (unsigned char *)(v4 + 2300);
  int v54 = (_WORD *)(v4 + 2368);
  do
  {
    uint64_t v55 = (_DWORD *)(v2 + 104 + v45);
    *(v55 - 8) = 0;
    int v56 = (*(_DWORD *)(v4 + 2524 + v45) & 1) << 16;
    *(v55 - 8) = v56;
    int v57 = v56 | ((*v53 != 0) << 15);
    *(v55 - 8) = v57;
    int v58 = v57 | ((*(v53 - 1) != 0) << 14);
    *(v55 - 8) = v58;
    int v59 = v58 | ((*(v53 - 2) != 0) << 13);
    *(v55 - 8) = v59;
    unsigned int v60 = v59 & 0xFFFFE3FF | ((*v54 & 7) << 10);
    *(v55 - 8) = v60;
    int v61 = v60 | ((*(v53 - 7) != 0) << 9);
    *(v55 - 8) = v61;
    *(v55 - 8) = v61 & 0xFFFFFE00 | *(v54 - 5) & 0x1FF;
    *uint64_t v55 = 0;
    int v62 = (*(v53 - 6) != 0) << 31;
    *uint64_t v55 = v62;
    unsigned int v63 = v62 & 0x80FFFFFF | ((*(v54 - 4) & 0x7F) << 24);
    *uint64_t v55 = v63;
    int v64 = v63 | ((*(v53 - 5) != 0) << 23);
    *uint64_t v55 = v64;
    unsigned int v65 = v64 & 0xFF80FFFF | ((*(v54 - 3) & 0x7F) << 16);
    *uint64_t v55 = v65;
    int v66 = v65 | ((*(v53 - 4) != 0) << 15);
    *uint64_t v55 = v66;
    unsigned int v67 = v66 & 0xFFFF80FF | ((*(v54 - 2) & 0x7F) << 8);
    *uint64_t v55 = v67;
    int v68 = v67 | ((*(v53 - 3) != 0) << 7);
    *uint64_t v55 = v68;
    *uint64_t v55 = v68 & 0xFFFFFF80 | *(v54 - 1) & 0x7F;
    v45 += 4;
    v53 += 8;
    v54 += 8;
  }
  while (v45 != 32);
  uint64_t v69 = 0;
  *(_DWORD *)(v2 + 136) = 0x20000;
  uint64_t v70 = v3 + 78544;
  do
  {
    int v71 = (unsigned int *)(v2 + 152 + v69);
    *(v71 - 3) = 0;
    unsigned int v72 = *(_DWORD *)(v70 - 16) << 29;
    *(v71 - 3) = v72;
    unsigned int v73 = v72 & 0xFF00FFFF | (*(_DWORD *)(v70 - 12) << 16);
    *(v71 - 3) = v73;
    unsigned int v74 = v73 & 0xFFFF00FF | (*(_DWORD *)(v70 - 8) << 8);
    *(v71 - 3) = v74;
    *(v71 - 3) = v74 | *(unsigned __int8 *)(v70 - 4);
    *int v71 = 0;
    unsigned int v75 = *(_DWORD *)v70 << 24;
    *int v71 = v75;
    unsigned int v76 = v75 & 0xFF00FFFF | (*(_DWORD *)(v70 + 4) << 16);
    *int v71 = v76;
    unsigned int v77 = v76 & 0xFFFF00FF | (*(_DWORD *)(v70 + 8) << 8);
    *int v71 = v77;
    *int v71 = v77 | *(unsigned __int8 *)(v70 + 12);
    v69 += 4;
    v70 += 224;
  }
  while (v69 != 12);
  *(_DWORD *)(v2 + 164) = 0;
  int v78 = *(_DWORD *)(v4 + 3160) << 31;
  *(_DWORD *)(v2 + 164) = v78;
  unsigned int v79 = v78 & 0x9FFFFFFF | ((*(_DWORD *)(v3 + 79200) & 3) << 29);
  *(_DWORD *)(v2 + 164) = v79;
  unsigned int v80 = v79 & 0xE01FFFFF | (*(_DWORD *)(v4 + 2244) << 21);
  *(_DWORD *)(v2 + 164) = v80;
  unsigned int v81 = v80 & 0xFFE03FFF | ((*(_DWORD *)(v4 + 2248) & 0x7F) << 14);
  *(_DWORD *)(v2 + 164) = v81;
  unsigned int v82 = v81 & 0xFFFFC07F | ((*(_DWORD *)(v4 + 2252) & 0x7F) << 7);
  *(_DWORD *)(v2 + 164) = v82;
  *(_DWORD *)(v2 + 164) = v82 & 0xFFFFFF80 | *(_DWORD *)(v4 + 2260) & 0x7F;
  *(_DWORD *)(v2 + 168) = 0;
  int v83 = (*(_DWORD *)(v4 + 2256) & 0x7F) << 20;
  *(_DWORD *)(v2 + 168) = v83;
  unsigned int v84 = v83 & 0xFFF01FFF | ((*(_DWORD *)(v4 + 2264) & 0x7F) << 13);
  *(_DWORD *)(v2 + 168) = v84;
  int v85 = v84 | (*(unsigned __int8 *)(v4 + 2268) << 12);
  *(_DWORD *)(v2 + 168) = v85;
  unsigned int v86 = v85 & 0xFFFFF0FF | ((*(_DWORD *)(v4 + 2272) & 0xF) << 8);
  *(_DWORD *)(v2 + 168) = v86;
  unsigned int v87 = v86 & 0xFFFFFF0F | (16 * (*(_DWORD *)(v4 + 2276) & 0xF));
  *(_DWORD *)(v2 + 168) = v87;
  *(_DWORD *)(v2 + 168) = v87 & 0xFFFFFFF0 | *(_DWORD *)(v4 + 2280) & 0xF;
  *(_DWORD *)(v2 + 172) = 0;
  if (!*(unsigned char *)(v4 + 1956))
  {
    int v102 = *(_DWORD *)(v4 + 3160);
    if (!v102) {
      goto LABEL_177;
    }
    int v102 = *(_DWORD *)(v4 + 3168) << 31;
    *(_DWORD *)(v2 + 172) = v102;
    if (*(_DWORD *)(v4 + 3168))
    {
      int v103 = ((*(_DWORD *)(v4 + 3176) & 1) << 28) | v102;
      *(_DWORD *)(v2 + 172) = v103;
      int v102 = ((*(_DWORD *)(v3 + 79204) & 3) << 29) | v103;
      *(_DWORD *)(v2 + 172) = v102;
    }
    if (!*(unsigned char *)(v4 + 1956))
    {
LABEL_177:
      if (!*(unsigned char *)(v4 + 1962))
      {
        unsigned int v104 = v102 & 0xF7FFFFFF | ((*(unsigned char *)(v4 + 2216) & 1) << 27);
        *(_DWORD *)(v2 + 172) = v104;
        unsigned int v105 = v104 & 0xF8FFFFFF | ((*(_DWORD *)(v4 + 2212) & 7) << 24);
        *(_DWORD *)(v2 + 172) = v105;
        unsigned int v106 = v105 & 0xFF03FFFF | ((*(_DWORD *)(v4 + 2196) & 0x3F) << 18);
        *(_DWORD *)(v2 + 172) = v106;
        unsigned int v107 = v106 & 0xFFFC0FFF | ((*(_DWORD *)(v4 + 2200) & 0x3F) << 12);
        *(_DWORD *)(v2 + 172) = v107;
        if (*(_DWORD *)(v4 + 2196) || *(_DWORD *)(v4 + 2200)) {
          int v108 = *(_DWORD *)(v4 + 2204);
        }
        else {
          LOBYTE(v108) = 0;
        }
        unsigned int v109 = v107 & 0xFFFFF03F | ((v108 & 0x3F) << 6);
        *(_DWORD *)(v2 + 172) = v109;
        if (*(_DWORD *)(v4 + 2196) || (int v110 = *(_DWORD *)(v4 + 2200)) != 0) {
          int v110 = *(_DWORD *)(v4 + 2208);
        }
        *(_DWORD *)(v2 + 172) = v109 & 0xFFFFFFC0 | v110 & 0x3F;
        if (!*(unsigned char *)(v3 + 56)) {
          *(_DWORD *)(v2 + 172) = v107 & 0xFFFFF000;
        }
      }
    }
  }
  *(_DWORD *)(v2 + 176) = 0;
  int v88 = (*(unsigned char *)(v4 + 2226) & 0x7F) << 21;
  *(_DWORD *)(v2 + 176) = v88;
  unsigned int v89 = v88 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 2227) & 0x7F) << 14);
  *(_DWORD *)(v2 + 176) = v89;
  unsigned int v90 = v89 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 2228) & 0x7F) << 7);
  *(_DWORD *)(v2 + 176) = v90;
  *(_DWORD *)(v2 + 176) = v90 & 0xFFFFFF80 | *(unsigned char *)(v4 + 2229) & 0x7F;
  *(_DWORD *)(v2 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v91 = (*(unsigned char *)(v4 + 2230) & 0x7F) << 21;
  *(_DWORD *)(v2 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v91;
  unsigned int v92 = v91 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 2231) & 0x7F) << 14);
  *(_DWORD *)(v2 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v92;
  unsigned int v93 = v92 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 2232) & 0x7F) << 7);
  *(_DWORD *)(v2 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v93;
  *(_DWORD *)(v2 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v93 & 0xFFFFFF80 | *(unsigned char *)(v4 + 2233) & 0x7F;
  *(_DWORD *)(v2 + 184) = 0;
  LOBYTE(v93) = *(unsigned char *)(v4 + 2236);
  *(_DWORD *)(v2 + 184) = (v93 & 0x7F) << 7;
  *(_DWORD *)(v2 + 184) = *(unsigned char *)(v4 + 2237) & 0x7F | ((v93 & 0x7F) << 7);
  *(void *)(v2 + 188) = 0;
  uint64_t v94 = (_DWORD *)(v2 + 188);
  *(void *)(v2 + 196) = 0;
  if (*(unsigned char *)(v4 + 99) && !*(unsigned char *)(v4 + 1962) && !*(unsigned char *)(v4 + 1956))
  {
    *uint64_t v94 = 0x10000000;
    int v95 = ((*(_DWORD *)(v4 + 3180) << 26) + 0x4000000) & 0xC000000 | 0x10000000;
    *uint64_t v94 = v95;
    unsigned int v96 = v95 & 0xFCFFFFFF | ((*(_DWORD *)(v4 + 3184) & 3) << 24);
    *uint64_t v94 = v96;
    unsigned int v97 = v96 & 0xFF0FFFFF | ((*(_DWORD *)(v4 + 3192) & 0xF) << 20);
    *uint64_t v94 = v97;
    unsigned int v98 = v97 & 0xFFF3FFFF | ((*(_DWORD *)(v4 + 3256) & 3) << 18);
    *uint64_t v94 = v98;
    unsigned int v99 = v98 & 0xFFFC3FFF | ((*(_DWORD *)(v4 + 3320) & 0xF) << 14);
    *uint64_t v94 = v99;
    unsigned int v100 = v99 & 0xFFFFCFFF | ((*(_DWORD *)(v4 + 3384) & 3) << 12);
    *uint64_t v94 = v100;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v101) = 0;
    }
    else {
      int v101 = *(_DWORD *)(v4 + 3196);
    }
    unsigned int v111 = v100 & 0xFFFFF0FF | ((v101 & 0xF) << 8);
    *uint64_t v94 = v111;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v112) = 0;
    }
    else {
      int v112 = *(_DWORD *)(v4 + 3260);
    }
    unsigned int v113 = v111 & 0xFFFFFF3F | ((v112 & 3) << 6);
    *uint64_t v94 = v113;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v114) = 0;
    }
    else {
      int v114 = *(_DWORD *)(v4 + 3324);
    }
    unsigned int v115 = v113 & 0xFFFFFFC3 | (4 * (v114 & 0xF));
    *uint64_t v94 = v115;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v116) = 0;
    }
    else {
      int v116 = *(_DWORD *)(v4 + 3388);
    }
    *uint64_t v94 = v115 & 0xFFFFFFFC | v116 & 3;
    if (*(int *)(v4 + 3188) <= 2) {
      LOBYTE(v117) = 0;
    }
    else {
      int v117 = *(_DWORD *)(v4 + 3200);
    }
    int v118 = (v117 & 0xF) << 20;
    *(_DWORD *)(v2 + 192) = v118;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v119) = 0;
    }
    else {
      int v119 = *(_DWORD *)(v4 + 3264);
    }
    int v120 = ((v119 & 3) << 18) | v118;
    *(_DWORD *)(v2 + 192) = v120;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v121) = 0;
    }
    else {
      int v121 = *(_DWORD *)(v4 + 3328);
    }
    int v122 = ((v121 & 0xF) << 14) | v120;
    *(_DWORD *)(v2 + 192) = v122;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v123) = 0;
    }
    else {
      int v123 = *(_DWORD *)(v4 + 3392);
    }
    int v124 = ((v123 & 3) << 12) | v122;
    *(_DWORD *)(v2 + 192) = v124;
    if (*(int *)(v4 + 3188) <= 3) {
      LOBYTE(v125) = 0;
    }
    else {
      int v125 = *(_DWORD *)(v4 + 3204);
    }
    int v126 = ((v125 & 0xF) << 8) | v124;
    *(_DWORD *)(v2 + 192) = v126;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v127) = 0;
    }
    else {
      int v127 = *(_DWORD *)(v4 + 3268);
    }
    int v128 = ((v127 & 3) << 6) | v126;
    *(_DWORD *)(v2 + 192) = v128;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v129) = 0;
    }
    else {
      int v129 = *(_DWORD *)(v4 + 3332);
    }
    unsigned int v130 = (4 * (v129 & 0xF)) | v128 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 192) = v130;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v131) = 0;
    }
    else {
      int v131 = *(_DWORD *)(v4 + 3396);
    }
    *(_DWORD *)(v2 + 192) = v130 & 0xFFFFFFFC | v131 & 3;
    if (*(int *)(v4 + 3188) <= 4) {
      LOBYTE(v132) = 0;
    }
    else {
      int v132 = *(_DWORD *)(v4 + 3208);
    }
    int v133 = (v132 & 0xF) << 20;
    *(_DWORD *)(v2 + 196) = v133;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v134) = 0;
    }
    else {
      int v134 = *(_DWORD *)(v4 + 3272);
    }
    int v135 = ((v134 & 3) << 18) | v133;
    *(_DWORD *)(v2 + 196) = v135;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v136) = 0;
    }
    else {
      int v136 = *(_DWORD *)(v4 + 3336);
    }
    int v137 = ((v136 & 0xF) << 14) | v135;
    *(_DWORD *)(v2 + 196) = v137;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v138) = 0;
    }
    else {
      int v138 = *(_DWORD *)(v4 + 3400);
    }
    int v139 = ((v138 & 3) << 12) | v137;
    *(_DWORD *)(v2 + 196) = v139;
    if (*(int *)(v4 + 3188) <= 5) {
      LOBYTE(v14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    }
    else {
      int v140 = *(_DWORD *)(v4 + 3212);
    }
    int v141 = ((v140 & 0xF) << 8) | v139;
    *(_DWORD *)(v2 + 196) = v141;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v142) = 0;
    }
    else {
      int v142 = *(_DWORD *)(v4 + 3276);
    }
    int v143 = ((v142 & 3) << 6) | v141;
    *(_DWORD *)(v2 + 196) = v143;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v144) = 0;
    }
    else {
      int v144 = *(_DWORD *)(v4 + 3340);
    }
    unsigned int v145 = (4 * (v144 & 0xF)) | v143 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 196) = v145;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v146) = 0;
    }
    else {
      int v146 = *(_DWORD *)(v4 + 3404);
    }
    *(_DWORD *)(v2 + 196) = v145 & 0xFFFFFFFC | v146 & 3;
    if (*(int *)(v4 + 3188) <= 6) {
      LOBYTE(v147) = 0;
    }
    else {
      int v147 = *(_DWORD *)(v4 + 3216);
    }
    int v148 = (v147 & 0xF) << 20;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v148;
    if (*(int *)(v4 + 3188) < 7) {
      LOBYTE(v149) = 0;
    }
    else {
      int v149 = *(_DWORD *)(v4 + 3280);
    }
    int v150 = ((v149 & 3) << 18) | v148;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v150;
    if (*(int *)(v4 + 3188) < 7) {
      int v151 = 0;
    }
    else {
      int v151 = (*(_DWORD *)(v4 + 3344) & 0xF) << 14;
    }
    int v152 = v151 | v150;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v152;
    if (*(int *)(v4 + 3188) < 7) {
      int v153 = 0;
    }
    else {
      int v153 = (*(_DWORD *)(v4 + 3408) & 3) << 12;
    }
    int v154 = v153 | v152;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v154;
    if (*(int *)(v4 + 3188) <= 7) {
      int v155 = 0;
    }
    else {
      int v155 = (*(_DWORD *)(v4 + 3220) & 0xF) << 8;
    }
    int v156 = v155 | v154;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v156;
    if (*(int *)(v4 + 3188) < 8) {
      int v157 = 0;
    }
    else {
      int v157 = (*(_DWORD *)(v4 + 3284) & 3) << 6;
    }
    int v158 = v157 | v156;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v158;
    if (*(int *)(v4 + 3188) < 8) {
      int v159 = 0;
    }
    else {
      int v159 = 4 * (*(_DWORD *)(v4 + 3348) & 0xF);
    }
    unsigned int v160 = v159 | v158 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v160;
    if (*(int *)(v4 + 3188) < 8) {
      int v161 = 0;
    }
    else {
      int v161 = *(_DWORD *)(v4 + 3412) & 3;
    }
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v161 | v160 & 0xFFFFFFFC;
  }
  if (*(unsigned char *)(v4 + 98))
  {
    int v162 = (_DWORD *)(v2 + 204);
    if (*(unsigned char *)(v4 + 2172) != 8)
    {
      *int v162 = 0x80000000;
      unsigned int v163 = ((*(unsigned __int8 *)(v4 + 2172) << 28) - 0x10000000) | 0x80000000;
      goto LABEL_143;
    }
  }
  else
  {
    int v162 = (_DWORD *)(v2 + 204);
  }
  unsigned int v163 = 0;
  *int v162 = 0;
LABEL_143:
  *(_DWORD *)(v2 + 204) = v163;
  *(_DWORD *)(v2 + 204) = (unsigned __int16)(*(_DWORD *)(v4 + 2164) - 1) | v163;
  UpscaleConvolveStep = (CAHDecTansyAvx *)CAHDecTansyAvx::getUpscaleConvolveStep(this, *(_DWORD *)(v4 + 2176), *(_DWORD *)(v4 + 2164));
  __int16 v165 = (__int16)UpscaleConvolveStep;
  UpscaleConvolveX0 = (CAHDecTansyAvx *)CAHDecTansyAvx::getUpscaleConvolveX0(UpscaleConvolveStep, *(_DWORD *)(v4 + 2176), *(_DWORD *)(v4 + 2164), (int)UpscaleConvolveStep);
  *(_DWORD *)(v2 + 208) = v165 & 0x3FFF | (((unsigned __int16)UpscaleConvolveX0 & 0x3FFF) << 14);
  unsigned int v167 = (*(_DWORD *)(v4 + 2176) + 1) >> 1;
  unsigned int v168 = (*(_DWORD *)(v4 + 2164) + 1) >> 1;
  uint64_t v169 = (CAHDecTansyAvx *)CAHDecTansyAvx::getUpscaleConvolveStep(UpscaleConvolveX0, v167, v168);
  *(_DWORD *)(v2 + 212) = (unsigned __int16)v169 & 0x3FFF | ((CAHDecTansyAvx::getUpscaleConvolveX0(v169, v167, v168, (int)v169) & 0x3FFF) << 14);
  *(_DWORD *)(v2 + 216) = 0;
  int v170 = (*(_DWORD *)(v4 + 3448) & 3) << 10;
  *(_DWORD *)(v2 + 216) = v170;
  int v171 = *(unsigned __int8 *)(v3 + 56);
  if (*(unsigned char *)(v3 + 56)) {
    int v171 = (*(_DWORD *)(v4 + 3452) & 3) << 8;
  }
  int v172 = v171 | v170;
  *(_DWORD *)(v2 + 216) = v172;
  int v173 = *(unsigned __int8 *)(v3 + 56);
  if (*(unsigned char *)(v3 + 56)) {
    int v173 = (*(_DWORD *)(v4 + 3456) & 3) << 6;
  }
  int v174 = v173 | v172;
  *(_DWORD *)(v2 + 216) = v174;
  int v175 = (16 * (*(_DWORD *)(v3 + 79208) & 3)) | v174;
  *(_DWORD *)(v2 + 216) = v175;
  int v176 = (4 * (*(_DWORD *)(v3 + 79212) & 3)) | v175;
  *(_DWORD *)(v2 + 216) = v176;
  *(_DWORD *)(v2 + 216) = v176 & 0xFFC | *(_DWORD *)(v3 + 79216) & 3;
  *(_DWORD *)(v2 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v177 = *(_DWORD *)(v3 + 78496);
  *(_DWORD *)(v2 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v177 << 16;
  *(_DWORD *)(v2 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(unsigned __int16 *)(v3 + 78492) | ((unsigned __int16)v177 << 16);
  *(_DWORD *)(v2 + 224) = 0;
  int v178 = *(_DWORD *)(v3 + 78504);
  *(_DWORD *)(v2 + 224) = v178 << 16;
  *(_DWORD *)(v2 + 224) = *(unsigned __int16 *)(v3 + 78500) | ((unsigned __int16)v178 << 16);
  if (*(unsigned char *)(v3 + 128))
  {
    uint64_t result = 0;
    if (*(unsigned char *)(v4 + 1956))
    {
      *(_DWORD *)(v2 + 368) = (*(_DWORD *)(v2 + 48) << 18) & 0x1000000 | (((*(_DWORD *)(v2 + 48) >> 4) & 1) << 25);
      *(_DWORD *)(v2 + 40pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      unsigned int v180 = (((*(_DWORD *)(v3 + 12) << 16) + 458752) & 0xFFF80000) - 0x10000;
      *(_DWORD *)(v2 + 40pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v180;
      *(_DWORD *)(v2 + 40pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = ((((unsigned __int16)*(_DWORD *)(v3 + 8) + 7) & 0xFFF8) + 0xFFFF) | v180;
      *(_DWORD *)(v2 + 432) = 1073758208;
    }
  }
  else
  {
    uint64_t v181 = (_DWORD *)(v2 + 228);
    uint64_t v182 = -308;
    do
    {
      uint64_t v183 = v4 + v182;
      uint64_t v184 = (unsigned char *)(v4 + v182 + 4136);
      if (*v184 == 1)
      {
        if ((*(unsigned char *)(v2 + 65) & 4) != 0) {
          char v185 = -3;
        }
        else {
          char v185 = -2;
        }
      }
      else
      {
        char v185 = -6;
      }
      char v186 = v185 + 16;
      *uint64_t v181 = 0;
      int v187 = *v184 << 30;
      *uint64_t v181 = v187;
      unsigned int v188 = v187 & 0xC0007FFF | (((*(int *)(v183 + 4096) >> v186) & 0x7FFF) << 15);
      *uint64_t v181 = v188;
      *uint64_t v181 = v188 & 0xFFFF8000 | (*(int *)(v183 + 4100) >> v186) & 0x7FFF;
      v181[7] = 0;
      int v189 = (*(unsigned char *)(v183 + 4137) == 0) << 30;
      v181[7] = v189;
      unsigned int v190 = v189 & 0xC0007FFF | (((*(_DWORD *)(v183 + 4104) >> 1) & 0x7FFF) << 15);
      v181[7] = v190;
      v181[7] = v190 & 0xFFFF8000 | ((unsigned __int16)*(_DWORD *)(v183 + 4108) >> 1);
      v181[14] = 0;
      int v191 = (*(_DWORD *)(v183 + 4112) << 14) & 0x3FFF8000;
      v181[14] = v191;
      v181[14] = v191 & 0xFFFF8000 | ((unsigned __int16)*(_DWORD *)(v183 + 4116) >> 1);
      v181[21] = 0;
      int v192 = *(unsigned __int16 *)(v183 + 4128);
      v181[21] = v192 << 16;
      v181[21] = *(unsigned __int16 *)(v183 + 4130) | ((unsigned __int16)v192 << 16);
      v181[28] = 0;
      int v193 = *(unsigned __int16 *)(v183 + 4132);
      v181[28] = v193 << 16;
      v181[28] = *(unsigned __int16 *)(v183 + 4134) | ((unsigned __int16)v193 << 16);
      ++v181;
      v182 += 44;
    }
    while (v182);
    uint64_t v194 = **(void **)(v3 + 79224);
    if (v194)
    {
      uint64_t v195 = 0;
      uint64_t v196 = (_DWORD *)(v2 + 436);
      while (1)
      {
        *(v196 - 16) = 0;
        int v197 = (*(_DWORD *)(v2 + 48) << 18) & 0x1000000 | (((*(_DWORD *)(v2 + 48) >> 4) & 1) << 25);
        *(v196 - 16) = v197;
        *(v196 - 16) = v197 | *(unsigned __int8 *)(v194 + 4);
        *(v196 - 8) = 0;
        int v198 = (*(_DWORD *)(v194 + 1768) << 16) - 0x10000;
        *(v196 - 8) = v198;
        *(v196 - 8) = v198 & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)(v194 + 1760) - 1);
        *uint64_t v196 = 0;
        int v199 = *(_DWORD *)(v3 + 12);
        int v200 = v199 >= 0 ? *(_DWORD *)(v3 + 12) : v199 + 1;
        int v201 = (((v200 >> 1) + (*(_DWORD *)(v194 + 1768) << 14)) / v199) << 16;
        *uint64_t v196 = v201;
        int v202 = *(_DWORD *)(v194 + 1760);
        int v203 = *(_DWORD *)(v3 + 8);
        int v204 = v203 >= 0 ? *(_DWORD *)(v3 + 8) : v203 + 1;
        *uint64_t v196 = v201 & 0xFFFF0000 | (unsigned __int16)(((v204 >> 1) + (v202 << 14)) / v203);
        if (v195 == 6) {
          break;
        }
        uint64_t v194 = *(void *)(*(void *)(v3 + 79224) + 8 * v195 + 8);
        ++v196;
        ++v195;
        if (!v194)
        {
          int v205 = (unint64_t)(v195 - 1) < 6;
          goto LABEL_170;
        }
      }
      int v205 = 0;
    }
    else
    {
      LODWORD(v195) = 0;
      int v205 = 1;
LABEL_170:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v206 = 136315394;
        int v207 = "virtual int CAHDecTansyAvx::populatePictureRegisters()";
        __int16 v208 = 1024;
        int v209 = v195;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid reference buffer %d\n", (uint8_t *)&v206, 0x12u);
      }
    }
    return (v205 << 31 >> 31);
  }
  return result;
}

uint64_t CAHDecTansyAvx::populateTileRegisters(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 256);
  if (*(_DWORD *)(v3 + 2360) == 1)
  {
    uint64_t v4 = *(void *)(v3 + 15944);
    *(_WORD *)(a2 + 4) = 0;
    if (*(_DWORD *)(v3 + 2640))
    {
      if ((*(unsigned char *)(v3 + 2612) & 1) == 0)
      {
LABEL_4:
        uint64_t v5 = v4 + 136;
        int v6 = *(_DWORD *)(a2 + 8) & 0x3FFFFF | (*(unsigned __int16 *)(v4 + 136 + 2 * a3 + 66064) << 22);
        *(_DWORD *)(a2 + 8) = v6;
        int v7 = *(unsigned __int8 *)(v5 + a3 + 74256);
        if (v7) {
          int v7 = *(unsigned __int8 *)(v3 + 2504);
        }
        unsigned int v8 = v7 | v6 & 0xFFFFFF00;
        *(_DWORD *)(a2 + 8) = v8;
        unsigned int v9 = v8 & 0xFFFF00FF | (*(unsigned __int8 *)(v3 + 2505) << 8);
        goto LABEL_9;
      }
    }
    else if (!*(_DWORD *)(v3 + 2420))
    {
      goto LABEL_4;
    }
    int v10 = *(unsigned __int16 *)(v3 + 2504) | (*(unsigned __int16 *)(a2 + 10) << 16);
    *(_DWORD *)(a2 + 8) = v10;
    unsigned int v9 = v10 & 0xFFFEFFFF | ((HIWORD(*(_DWORD *)(v3 + 2504)) & 1) << 16);
LABEL_9:
    *(_DWORD *)(a2 + 8) = v9;
  }
  return 0;
}

uint64_t CAHDecTansyAvx::populateClearTiles(CAHDecTansyAvx *this)
{
  uint64_t v2 = (CAVDAvxDecoder *)*((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = (_DWORD *)*((void *)v2 + 1993);
  int v5 = v4[34];
  *(_WORD *)(v3 + 1004) = v4[35];
  *(_WORD *)(v3 + 1006) = v5;
  if (CAVDAvxDecoder::isParallelDecode(v2)) {
    int v6 = -1;
  }
  else {
    int v6 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 42424) + 3156);
  }
  int v7 = v4 + 16420;
  uint64_t v8 = *((void *)this + 33);
  *(_DWORD *)(v8 + 1268) = v6;
  uint64_t v9 = v4[35];
  if (v9)
  {
    int v10 = v4 + 16485;
    unsigned int v11 = (_WORD *)(v8 + 1008);
    do
    {
      int v12 = *v10++;
      *v11++ = v12;
      --v9;
    }
    while (v9);
  }
  uint64_t v13 = v4[34];
  if (v13)
  {
    int v14 = (_WORD *)(v8 + 1138);
    do
    {
      int v15 = *v7++;
      *v14++ = v15;
      --v13;
    }
    while (v13);
  }
  return 0;
}

uint64_t CAHDecTansyAvx::getTileStartCTU(CAHDecTansyAvx *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 1004);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecTansyAvx::getTileEndCTU(CAHDecTansyAvx *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 1004);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecTansyAvx::populateAvdWork(CAHDecTansyAvx *this)
{
  unsigned int v1 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)(v4 + 42424);
  uint64_t v3 = *(uint64_t **)(v4 + 15944);
  unsigned int v5 = *((_DWORD *)v3 + 34);
  LODWORD(v4) = *((_DWORD *)v3 + 35);
  unsigned int v6 = v2[74];
  unsigned int v45 = (v6 >> 28) + 2;
  int v7 = (v4 * v5 > (v6 >> 28) + 1) & (v6 >> 1);
  if ((v6 & 4) != 0 && ((v4 * v5 > (v6 >> 28) + 1) & (v6 >> 1)) == 0) {
    unsigned int v1 = (*(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) - 1) % v45;
  }
  int v8 = *(_DWORD *)(*(void *)v2 + 60);
  if (v7) {
    unsigned int v9 = (v6 >> 28) + 2;
  }
  else {
    unsigned int v9 = 1;
  }
  unsigned int v10 = 0x1000 / v9;
  if (v8 == 15) {
    char v11 = 5;
  }
  else {
    char v11 = 4;
  }
  char v50 = v11;
  if (v5)
  {
    unint64_t v12 = 0;
    int v13 = 0;
    __int16 v53 = 0;
    uint64_t v14 = *((void *)this + 33);
    uint64_t v51 = *v3;
    LODWORD(v15) = ((36 * v10 * (v9 - 1)) & 0xFFFFFFFC) / 0x24;
    unint64_t v16 = v14 + 50688 + 36 * v10 * (unint64_t)(v9 - 1);
    uint64_t v17 = -50652 - v14;
    unsigned int v18 = v3 + 8243;
    int v44 = -(v4 * v5);
    uint64_t v43 = v3 + 8210;
    unsigned int v19 = v1;
    unint64_t v20 = v16;
    unsigned int v47 = v3;
    int v46 = v7;
    unsigned int v39 = 0x1000 / v9;
    unsigned int v40 = v1;
    unsigned int v38 = v9;
    unsigned int v36 = v3 + 8243;
    uint64_t v37 = -50652 - v14;
    do
    {
      if (v4)
      {
        unint64_t v21 = 0;
        uint64_t v22 = v17 + v20;
        int v52 = v44 + v13;
        unint64_t v42 = v12 + 1;
        unsigned int v48 = (_DWORD *)v43 + v12 + 1;
        unsigned int v49 = (_DWORD *)v43 + v12;
        int v41 = v13;
        int v54 = v13;
        do
        {
          int v23 = v52 + v21;
          *(_WORD *)(v16 + 4) = v53 + v21;
          *(_WORD *)(v16 + 6) = v19;
          *(_WORD *)(v16 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v54 + v21;
          if (v54 + v21) {
            __int16 v24 = 4;
          }
          else {
            __int16 v24 = 5;
          }
          *(_WORD *)(v16 + 12) = v24;
          if (v23 == -1)
          {
            *(_DWORD *)(v16 + 14) = 262149;
          }
          else
          {
            if (v23 == -2) {
              int v25 = v7;
            }
            else {
              int v25 = 0;
            }
            *(_WORD *)(v16 + 14) = 4;
            if (v25 == 1) {
              *(_WORD *)(v16 + 16) = 4;
            }
            else {
              *(_WORD *)(v16 + 16) = 0;
            }
          }
          uint64_t v26 = *((void *)this + 32);
          unsigned int v55 = v19;
          if (*(unsigned char *)(v26 + 2834)) {
            uint64_t v27 = *(void *)(v26 + 2840);
          }
          else {
            uint64_t v27 = *(void *)(v26 + 1048) + 8;
          }
          unint64_t v28 = v51 + v3[(v54 + v21) + 18] - *(void *)v27;
          int v29 = 36 * v15;
          unint64_t v30 = HIDWORD(v28);
          if (*(void *)v27 || *(_DWORD *)(v27 + 152) || *(_DWORD *)(v27 + 156))
          {
            if (v30 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              int v58 = "populateAvdWork";
              __int16 v59 = 1024;
              int v60 = 1687;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v27, v29 + 50708, v28, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
            if (*(void *)v27) {
              goto LABEL_59;
            }
          }
          if (*(_DWORD *)(v27 + 152) || *(_DWORD *)(v27 + 156))
          {
LABEL_59:
            if (v30 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              int v58 = "populateAvdWork";
              __int16 v59 = 1024;
              int v60 = 1688;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v27, v29 + 50706, v28, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
          }
          uint64_t v3 = v47;
          char v32 = &v47[(v54 + v21) + 4114];
          uint64_t v33 = *v32;
          if (HIDWORD(*v32))
          {
            int v7 = v46;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              int v58 = "populateAvdWork";
              __int16 v59 = 1024;
              int v60 = 1690;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              uint64_t v33 = *v32;
            }
          }
          else
          {
            int v7 = v46;
          }
          *(_DWORD *)(v16 + 24) = v33;
          *(_DWORD *)(v16 + 28) = (*(v18 - 1) >> v50) | (*v49 >> v50 << 16);
          ++v21;
          *(_DWORD *)(v16 + 32) = ((*v18 - 1) >> v50) | ((*v48 - 1) >> v50 << 16);
          unsigned int v19 = v55;
          if (v7) {
            unsigned int v19 = ((int)v21 + v54) % v45;
          }
          v20 += 36;
          *(_WORD *)(v16 + 8) = v19;
          unint64_t v15 = 0x8E38E38E38E38E39 * (v22 >> 2);
          unint64_t v4 = *((unsigned int *)v47 + 35);
          v22 += 36;
          ++v18;
          unint64_t v16 = v20;
        }
        while (v21 < v4);
        unsigned int v5 = *((_DWORD *)v47 + 34);
        unsigned int v1 = v40;
        int v13 = v41 + v21;
        v53 += v21;
        unint64_t v16 = v20;
        unsigned int v9 = v38;
        unsigned int v10 = v39;
        unint64_t v12 = v42;
        unsigned int v18 = v36;
        uint64_t v17 = v37;
      }
      else
      {
        ++v12;
      }
    }
    while (v12 < v5);
  }
  else
  {
    __int16 v53 = 0;
  }
  uint64_t v34 = v1;
  uint64_t v35 = *((void *)this + 33) + 32;
  do
  {
    *(_WORD *)(v35 + 2 * v34 - 6) = v53;
    *(_DWORD *)(v35 + 4 * v34) = 36 * (v34 - v1) * v10 + 50688;
    ++v34;
  }
  while (v1 + v9 != v34);
  return 0;
}

uint64_t CAHDecTansyAvx::allocWorkBuf_SPS(CAHDecTansyAvx *this, int *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  int v4 = a2[1];
  unsigned int v6 = *((unsigned __int8 *)a2 + 32);
  if (v6 >= 4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 136315394;
    unsigned int v49 = "allocWorkBuf_SPS";
    __int16 v50 = 1024;
    int v51 = 1837;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v48, 0x12u);
  }
  int v7 = (_DWORD *)*((void *)this + 32);
  int v8 = v7[10681];
  if (!v8 || (int v9 = v7[10682]) == 0)
  {
    int v8 = v5;
    int v9 = v4;
  }
  int v10 = v8 + 31;
  if (v8 < -31) {
    int v10 = v8 + 62;
  }
  unsigned int v11 = v10 >> 5;
  int v12 = v9 + 31;
  if (v9 < -31) {
    int v12 = v9 + 62;
  }
  unsigned int v13 = v12 >> 5;
  unsigned int v14 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v15 = v14;
  }
  else {
    char v15 = 0;
  }
  unsigned int v16 = 32 - __clz(v13 - 1);
  if (v13 >= 2) {
    char v17 = v16;
  }
  else {
    char v17 = 0;
  }
  unsigned int v18 = ((32 << (v17 + v15)) + 127) & 0xFFFFFF80;
  if (!v6)
  {
    unsigned int v27 = 0;
LABEL_27:
    LOBYTE(v28) = 0;
    goto LABEL_28;
  }
  int v19 = v8 << (v6 == 3);
  int v20 = v19 + 31;
  int v21 = v19 + 62;
  if (v20 >= 0) {
    int v21 = v20;
  }
  unsigned int v22 = v21 >> 5;
  if (v6 == 1) {
    ++v9;
  }
  int v23 = v9 >> (v6 == 1);
  int v25 = v23 + 15;
  BOOL v24 = v23 < -15;
  int v26 = v23 + 30;
  if (!v24) {
    int v26 = v25;
  }
  unsigned int v27 = v26 >> 4;
  if (v22 <= 1) {
    goto LABEL_27;
  }
  unsigned int v28 = 32 - __clz(v22 - 1);
LABEL_28:
  unsigned int v29 = 32 - __clz(v27 - 1);
  if (v27 >= 2) {
    char v30 = v29;
  }
  else {
    char v30 = 0;
  }
  unsigned int v31 = ((8 << (v30 + v28)) + 127) & 0xFFFFFF80;
  if (!v6) {
    unsigned int v31 = 0;
  }
  *((_DWORD *)this + 104pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v18;
  *((_DWORD *)this + 1041) = v31;
  *((_DWORD *)this + 1045) = 9168;
  if (*((_WORD *)a2 + 14) == 64) {
    char v32 = 6;
  }
  else {
    char v32 = 7;
  }
  if (*((_WORD *)a2 + 14) == 64) {
    int v33 = 96;
  }
  else {
    int v33 = 384;
  }
  if (*((_WORD *)a2 + 14) == 64) {
    char v34 = 8;
  }
  else {
    char v34 = 10;
  }
  unsigned int v35 = ((v5 + (1 << v32) - 1) >> v32) * ((v4 + (1 << v32) - 1) >> v32);
  *((_DWORD *)this + 1047) = v35 * v33;
  *((_DWORD *)this + 1046) = v35 << v34;
  if (v7[662])
  {
LABEL_51:
    for (uint64_t i = 0; i != 2288; i += 176)
    {
      uint64_t v42 = *((unsigned int *)this + 1047);
      if (v42
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + i + 13424), v42, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_69;
        }
        int v48 = 136315650;
        unsigned int v49 = "allocWorkBuf_SPS";
        __int16 v50 = 1024;
        int v51 = 1939;
        __int16 v52 = 2080;
        __int16 v53 = "segMap";
        int v46 = &_os_log_internal;
        goto LABEL_68;
      }
    }
    uint64_t v43 = 0;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 1046);
      if (v44)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v43 + 8008), v44, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 2288) {
        return 0;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v48 = 136315650;
      unsigned int v49 = "allocWorkBuf_SPS";
      __int16 v50 = 1024;
      int v51 = 1945;
      __int16 v52 = 2080;
      __int16 v53 = "MvColo";
      int v46 = &_os_log_internal;
      goto LABEL_68;
    }
    goto LABEL_69;
  }
  uint64_t v36 = 0;
  while (1)
  {
    uint64_t v37 = *((unsigned int *)this + 1040);
    if (v37
      && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v36 + 3072), v37, 7, 1, 0))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_69;
      }
      int v48 = 136315650;
      unsigned int v49 = "allocWorkBuf_SPS";
      __int16 v50 = 1024;
      int v51 = 1880;
      __int16 v52 = 2080;
      __int16 v53 = "HdrY";
      int v46 = &_os_log_internal;
      goto LABEL_68;
    }
    uint64_t v38 = *((unsigned int *)this + 1041);
    uint64_t v39 = *((void *)this + 32);
    unsigned int v40 = (_OWORD *)(v39 + v36 + 5536);
    if (!v38)
    {
      *(void *)unsigned int v40 = 0;
      goto LABEL_50;
    }
    if (CAVDDecoder::allocAVDMem(v39, v40, v38, 7, 1, 0)) {
      break;
    }
LABEL_50:
    v36 += 176;
    if (v36 == 2464) {
      goto LABEL_51;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 136315650;
    unsigned int v49 = "allocWorkBuf_SPS";
    __int16 v50 = 1024;
    int v51 = 1885;
    __int16 v52 = 2080;
    __int16 v53 = "HdrC";
    int v46 = &_os_log_internal;
LABEL_68:
    _os_log_impl(&dword_223977000, v46, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v48, 0x1Cu);
  }
LABEL_69:
  (*(void (**)(CAHDecTansyAvx *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

void CAHDecTansyAvx::getPPSWorkBufSize(uint64_t this, unsigned __int8 *a2, char *a3)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  unsigned int v97 = (CAHDecTansyAvx *)this;
  uint64_t v4 = *(void *)(*(void *)(this + 256) + 42424);
  unsigned int v108 = *(_DWORD *)(v4 + 2176);
  int v5 = *(_DWORD *)(v4 + 2180);
  int v6 = a2[32];
  unsigned int v7 = a2[34];
  int v8 = *(_DWORD *)(v4 + 60);
  int v98 = v8 == 15;
  if (v8 == 15) {
    int v9 = 128;
  }
  else {
    int v9 = 64;
  }
  if (a2[33] > v7) {
    unsigned int v7 = a2[33];
  }
  int v10 = ((_WORD)v7 + 9) & 0x1FE;
  unsigned int v90 = v7;
  if (*(_DWORD *)(v4 + 13932))
  {
    unsigned int v11 = *(_DWORD *)(v4 + 13932);
    if (v8 == 15) {
      int v12 = 800;
    }
    else {
      int v12 = 400;
    }
    goto LABEL_10;
  }
  this = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (this)
  {
    *(_DWORD *)buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 1976;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
    if (v8 == 15) {
      int v12 = 800;
    }
    else {
      int v12 = 400;
    }
    unsigned int v11 = *(_DWORD *)(v4 + 13932);
    if (v11)
    {
LABEL_10:
      int v13 = 0;
      uint64_t v14 = v11;
      int v15 = *(_DWORD *)(v4 + 2624);
      unsigned int v16 = (int *)(v4 + 2628);
      do
      {
        int v18 = *v16++;
        int v17 = v18;
        int v19 = (v18 - v15) * v12;
        if (v13 <= v19) {
          int v13 = v19;
        }
        int v15 = v17;
        --v14;
      }
      while (v14);
      char v20 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  int v13 = 0;
  char v20 = 1;
LABEL_23:
  int v88 = v13;
  int v112 = v5;
  unsigned int v89 = a3;
  if (v6 == 3) {
    int v21 = 48;
  }
  else {
    int v21 = 32;
  }
  int v107 = v6;
  if (!v6) {
    int v21 = 16;
  }
  int v22 = *(unsigned __int8 *)(v4 + 2172);
  unsigned int v100 = (_DWORD *)v4;
  if (*(unsigned char *)(v4 + 98)) {
    BOOL v23 = v22 == 8;
  }
  else {
    BOOL v23 = 1;
  }
  int v24 = !v23;
  int v99 = v9;
  int v106 = v10;
  int v85 = v8;
  int v96 = v24;
  if (v20)
  {
    unint64_t v104 = 0;
    int v105 = 0;
    unint64_t v25 = 0;
    *(void *)&long long v103 = 0;
    char v26 = v8 == 15;
  }
  else
  {
    uint64_t v27 = 0;
    int v28 = 0;
    unint64_t v25 = 0;
    int v105 = 0;
    unint64_t v104 = 0;
    unsigned int v93 = (v10 * v21) >> 3;
    int v94 = *(unsigned __int8 *)(v4 + 2172);
    if (v8 == 15) {
      char v29 = 7;
    }
    else {
      char v29 = 6;
    }
    char v101 = v29;
    unsigned int v30 = (v22 << v29) >> 3;
    if (!v24) {
      unsigned int v30 = v9;
    }
    unsigned int v92 = v30;
    long long v103 = 0u;
    char v26 = v8 == 15;
    do
    {
      uint64_t v31 = v11 - 1;
      if (v27 == v31) {
        int v32 = v108 - v28;
      }
      else {
        int v32 = (v100[v27 + 657] - v100[v27 + 656]) << v101;
      }
      if (v32 > 4096)
      {
        this = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          *(_DWORD *)buf = 136315394;
          int v114 = "getPPSWorkBufSize";
          __int16 v115 = 1024;
          int v116 = 2010;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
          unsigned int v11 = v100[3483];
          uint64_t v31 = v11 - 1;
        }
      }
      if (v32 >= -15) {
        int v33 = v32 + 15;
      }
      else {
        int v33 = v32 + 30;
      }
      unint64_t v34 = v104;
      if (v104 <= (int)((v33 >> 4) * v93)) {
        unint64_t v34 = (int)((v33 >> 4) * v93);
      }
      unint64_t v104 = v34;
      unint64_t v35 = v27 + 1;
      uint64_t v36 = &v100[v27];
      int v37 = v36[657];
      int v38 = v36[656];
      unsigned int v39 = *(_DWORD *)(*(void *)(*((void *)v97 + 32) + 42424) + 2164);
      if (v39 <= v108) {
        unsigned int v39 = v108;
      }
      int v40 = v38 << v101;
      if (v96) {
        int v40 = ((v38 << v101) * v94) >> 3;
      }
      int v41 = v40 + v92 + v92 * (v37 - v38);
      if ((int)v39 < v41) {
        int v41 = v39;
      }
      *((void *)&v42 + 1) = *((void *)&v103 + 1);
      *(int32x2_t *)&long long v42 = vadd_s32((int32x2_t)(*(void *)&vmla_s32((int32x2_t)0x7F0000007FLL, (int32x2_t)__PAIR64__(((v41 + 63) >> 6) - (v40 >> 6), (v37 - v38) << v98), (int32x2_t)0xC0000002CLL) & 0xFFFFFF80FFFFFF80), *(int32x2_t *)&v103);
      long long v103 = v42;
      this = CAHDecTansyAvx::calc_lf_above_pix_tile_size((CAHDecTansyAvx *)this, v10, v107, v108, v98, v27 == 0, v27 == v31, v38, v37);
      v105 += this;
      v28 += v32;
      if (v25 <= 20 * (v33 >> 4)) {
        unint64_t v25 = 20 * (v33 >> 4);
      }
      ++v27;
    }
    while (v35 < v11);
  }
  uint64_t v43 = v100;
  uint64_t v44 = v100[3482];
  unsigned int v45 = v90;
  if (!v44)
  {
    int v102 = 0;
    unsigned int v71 = 0;
    unint64_t v87 = 0;
    unint64_t v111 = 0;
    unsigned int v72 = v97;
    goto LABEL_80;
  }
  unsigned int v86 = &v100[v44 + 721];
  int v46 = *v86;
  int v47 = v100[721];
  long long v48 = 0uLL;
  unsigned int v49 = v100 + 722;
  uint64_t v91 = v100[3482];
  do
  {
    long long v109 = v48;
    int v51 = *v49++;
    int v50 = v51;
    this = CAHDecTansyAvx::calc_lf_left_tile_size((CAHDecTansyAvx *)this, 11, 7, v106, v107, v99, v47, v51, v112, v46);
    *((void *)&v48 + 1) = *((void *)&v109 + 1);
    int v52 = ((v112 + 63) >> 6) - (v47 << v26);
    int v53 = (v51 - v47) << v26;
    if (v51 != v46) {
      int v52 = v53;
    }
    *(int32x2_t *)&long long v48 = vmax_s32(*(int32x2_t *)&v109, (int32x2_t)__PAIR64__(72 * v52, this));
    int v47 = v50;
    --v44;
  }
  while (v44);
  int v102 = 0;
  unint64_t v87 = *(void *)&vadd_s32(*(int32x2_t *)&v48, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80;
  int v54 = *v86;
  int v95 = (v112 + 7) >> 6;
  unsigned int v55 = v100[721];
  long long v56 = 0uLL;
  int v57 = v100 + 722;
  uint64_t v58 = v91;
  do
  {
    long long v110 = v56;
    int v60 = *v57++;
    unsigned int v59 = v60;
    uint64_t v61 = (CAHDecTansyAvx *)CAHDecTansyAvx::calc_lr_left_tile_size((CAHDecTansyAvx *)this, 13, 12, v106, v107, v99, v55, v60, v112, v54);
    unsigned int v62 = v61;
    this = CAHDecTansyAvx::calc_lr_left_tile_size(v61, 6, 6, v106, v107, v99, v55, v60, v112, v54);
    if (v60 == v54)
    {
      long long v56 = v110;
      if (v102 > (int)(24 * (v95 - (v55 << v98)) + 24)) {
        goto LABEL_73;
      }
      int v63 = 3 * (v95 + 1 - (v55 << v98));
    }
    else
    {
      int v63 = 3 * ((v59 - v55) << v98);
      long long v56 = v110;
      if (v102 > (int)(24 * ((v59 - v55) << v98))) {
        goto LABEL_73;
      }
    }
    int v102 = 8 * v63;
LABEL_73:
    *(int32x2_t *)&long long v56 = vmax_s32(*(int32x2_t *)&v56, (int32x2_t)__PAIR64__(this, v62));
    unsigned int v55 = v59;
    --v58;
  }
  while (v58);
  int v64 = 0;
  unint64_t v111 = *(void *)&vadd_s32(*(int32x2_t *)&v56, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80;
  int v65 = *v86;
  int v66 = v100[721];
  unsigned int v67 = v100 + 722;
  uint64_t v68 = v91;
  do
  {
    int v70 = *v67++;
    int v69 = v70;
    this = CAHDecTansyAvx::calc_az_left_tile_size((CAHDecTansyAvx *)this, v107, v99, v96, v106, v66, v70, v112, v65);
    if (v64 <= (int)this) {
      int v64 = this;
    }
    int v66 = v69;
    --v68;
  }
  while (v68);
  unsigned int v71 = (v64 + 127) & 0xFFFFFF80;
  unsigned int v72 = v97;
  unsigned int v45 = v90;
  uint64_t v44 = v91;
  uint64_t v43 = v100;
LABEL_80:
  BOOL v73 = *(_DWORD *)(*((void *)v72 + 32) + 2644) != 1 || v45 == 0;
  if (v73
    || (v107 != 1 ? (int v74 = 32) : (int v74 = 24),
        v107 ? (int v75 = v74) : (int v75 = 16),
        !CAHDecTansyAvx::isLfPadDis(v72) ? (int v76 = 8) : (int v76 = 0),
        !v44))
  {
    signed int v77 = 0;
    unint64_t v82 = v25;
  }
  else
  {
    signed int v77 = 0;
    unsigned int v78 = (v112 + v76 + 15) >> 4;
    uint64_t v79 = (v44 - 1);
    if (v85 == 15) {
      char v80 = 3;
    }
    else {
      char v80 = 2;
    }
    unsigned int v81 = v43 + 722;
    unint64_t v82 = v25;
    do
    {
      unsigned int v83 = v78;
      if (v79) {
        unsigned int v83 = *v81 << v80;
      }
      signed int v84 = ((v83 - (*(v81 - 1) << v80)) * v75 + 133) & 0xFFFFFF80;
      if (v77 <= v84) {
        signed int v77 = v84;
      }
      ++v81;
      --v79;
      --v44;
    }
    while (v44);
  }
  *(_DWORD *)unsigned int v89 = v88;
  if (HIDWORD(v104) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 2100;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  *((_DWORD *)v89 + 1) = v104;
  *((_DWORD *)v89 + 2) = v105;
  *(void *)(v89 + 12) = v103;
  if (HIDWORD(v82) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 2104;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  *((_DWORD *)v89 + 5) = v82;
  *((void *)v89 + 3) = v87;
  *((void *)v89 + 4) = v111;
  *((_DWORD *)v89 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (v102 + 127) & 0xFFFFFF80;
  *((_DWORD *)v89 + 11) = v71;
  *((_DWORD *)v89 + 12) = v77;
}

uint64_t CAHDecTansyAvx::calc_rf_above_info_tile_size(CAHDecTansyAvx *this, int a2, int a3, unsigned int a4, int a5, int a6, int a7)
{
  int v7 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 42424) + 2164);
  if (v7 <= a4) {
    int v7 = a4;
  }
  int v8 = a5 * a2;
  if (a6) {
    int v8 = (a5 * a2 * a7) >> 3;
  }
  int v9 = (a7 * a5) >> 3;
  if (!a6) {
    int v9 = a5;
  }
  if (v7 >= v9 + v9 * (a3 - a2) + v8) {
    int v7 = v9 + v9 * (a3 - a2) + v8;
  }
  return (12 * (((v7 + 63) >> 6) - (v8 >> 6)) + 127) & 0xFFFFFF80;
}

uint64_t CAHDecTansyAvx::calc_lf_above_pix_tile_size(CAHDecTansyAvx *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  int v9 = (a4 + 7) >> 3;
  if (a5) {
    char v10 = 4;
  }
  else {
    char v10 = 3;
  }
  int v11 = (a9 - a8) << (v10 - 3);
  int v12 = (v9 - (a8 << v10)) >> 3;
  if (a7) {
    int v11 = v12;
  }
  unsigned int v13 = v9 & 0xFFFFFFF8;
  if (a4 <= 56) {
    unsigned int v13 = 0;
  }
  int v14 = a2 + a2 * (v9 - v13);
  unsigned int v15 = (6 * v14 + 15) & 0xFFFFFFF0;
  if (a2 == 8) {
    int v16 = 32;
  }
  else {
    int v16 = 48;
  }
  if (a2 == 8) {
    int v17 = 16;
  }
  else {
    int v17 = 32;
  }
  if (a3 != 1)
  {
    unsigned int v15 = 0;
    int v16 = 0;
  }
  unsigned int v18 = v15 + ((10 * v14 + 15) & 0xFFFFFFF0);
  int v19 = v16 + v17;
  int v20 = 48 * a2;
  if (a3 != 1) {
    int v20 = 0;
  }
  int v21 = v19 + 127;
  if (!a7) {
    unsigned int v18 = 0;
  }
  if (a6) {
    int v21 = 127;
  }
  return (v21 + v18 + v11 * (v20 + 80 * a2)) & 0xFFFFFF80;
}

uint64_t CAHDecTansyAvx::calc_lf_left_tile_size(CAHDecTansyAvx *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  if (a6 == 128) {
    char v10 = 4;
  }
  else {
    char v10 = 3;
  }
  char v11 = v10 - 3;
  int v12 = (a8 - a7) << v11;
  int v13 = ~(a7 << v11) + ((a9 + 63) >> 6);
  if (a8 != a10) {
    int v13 = v12;
  }
  int v14 = ((((a9 + 7) & 0x38) >> 1) + 5) & 0x3C;
  if ((((_BYTE)a9 + 7) & 0x38) == 0) {
    int v14 = 36;
  }
  int v15 = (v14 * 2 * a3 * a4 + 63) >> 6;
  int v16 = a4 * a2;
  int v17 = ((((_BYTE)a9 + 7) & 0x38) + 13) & 0x78;
  if ((((_BYTE)a9 + 7) & 0x38) == 0) {
    int v17 = 72;
  }
  int v18 = v17 * v16 + 63;
  if (!a5) {
    int v15 = 0;
  }
  int v19 = v15 + (v18 >> 6);
  int v20 = (a3 * a4) & 0x7FFFFFFF;
  if (!a5) {
    int v20 = 0;
  }
  if (a8 == a10) {
    int v21 = v19;
  }
  else {
    int v21 = 0;
  }
  return (8 * (v21 + v13 * (v20 + v16)));
}

uint64_t CAHDecTansyAvx::calc_lf_left_tile_info_size(CAHDecTansyAvx *this, int a2, int a3, int a4, int a5, int a6)
{
  if (a2 == 128) {
    char v6 = 4;
  }
  else {
    char v6 = 3;
  }
  char v7 = v6 - 3;
  int v8 = (a4 - a3) << v7;
  int v9 = ((a5 + 63) >> 6) - (a3 << v7);
  if (a4 != a6) {
    int v9 = v8;
  }
  return (72 * v9);
}

uint64_t CAHDecTansyAvx::calc_lr_left_tile_size(CAHDecTansyAvx *this, int a2, int a3, int a4, int a5, int a6, unsigned int a7, int a8, int a9, int a10)
{
  if (a6 == 128) {
    char v10 = 4;
  }
  else {
    char v10 = 3;
  }
  int v11 = a9 + 7;
  int v12 = (__PAIR64__((a8 - a7) << (v10 - 3), a7) - 1) >> 32;
  int v13 = (int)(((a9 + 7) >> 3) - (a7 << v10)) >> 3;
  if (a7) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = a9 <= 56;
  }
  int v15 = !v14;
  int v16 = v13 - v15;
  if (a8 != a10) {
    int v16 = v12;
  }
  int v17 = 2 * a3 * a4;
  unsigned int v18 = (v11 & 0x38) + 8;
  if (a9 <= 56) {
    unsigned int v18 = 0;
  }
  int v19 = (int)(((v18 >> 1) & 0xFFFFFFFD | (2 * (a9 > 56))) * v17 + 63) >> 6;
  int v20 = a4 * a2;
  int v21 = (v18 | (2 * (a9 > 56))) * a4 * a2 + 63;
  signed int v22 = v11 & 0xFFFFFFF8;
  int v23 = v22 >> 1;
  if (a9 > 56) {
    int v23 = 30;
  }
  int v24 = (v23 * v17 + 63) >> 6;
  if (a9 > 56) {
    signed int v22 = 58;
  }
  int v25 = v22 * v20 + 63;
  if (!a5) {
    int v24 = 0;
  }
  int v26 = v24 + (v25 >> 6);
  if (a5) {
    int v27 = v19;
  }
  else {
    int v27 = 0;
  }
  int v28 = (72 * a3 * a4 + 63) >> 6;
  if (!a5) {
    int v28 = 0;
  }
  int v29 = v27 + (v21 >> 6);
  if (a7) {
    int v26 = 0;
  }
  if (a8 != a10) {
    int v29 = 0;
  }
  return (8 * (v29 + v26 + v16 * (v28 + ((68 * v20 + 63) >> 6))));
}

uint64_t CAHDecTansyAvx::calc_lr_left_tile_info_size(CAHDecTansyAvx *this, int a2, int a3, int a4, int a5, int a6)
{
  if (a2 == 128) {
    char v6 = 4;
  }
  else {
    char v6 = 3;
  }
  char v7 = v6 - 3;
  int v8 = (a4 - a3) << v7;
  int v9 = ((a5 + 7) >> 6) - (a3 << v7);
  if (a4 == a6) {
    int v10 = v9 + 1;
  }
  else {
    int v10 = v8;
  }
  return (24 * v10);
}

uint64_t CAHDecTansyAvx::calc_az_left_tile_size(CAHDecTansyAvx *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  if (a3 == 128) {
    char v9 = 4;
  }
  else {
    char v9 = 3;
  }
  BOOL v10 = a7 >= a9 || a6 != 0;
  if (a6 != 0 && a7 >= a9) {
    int v11 = 8;
  }
  else {
    int v11 = 0;
  }
  if (!v10) {
    int v11 = -8;
  }
  int v12 = (a8 + 1) >> 1;
  if (a2 == 1)
  {
    char v13 = 2;
  }
  else
  {
    int v12 = a8;
    char v13 = 3;
  }
  char v14 = v13 + v9;
  if (a7 < a9) {
    int v12 = a7 << v14;
  }
  unsigned int v15 = (v12 - (a6 << v14) + (v11 >> 1) + 3) & 0xFFFFFFFC;
  if (!a2) {
    unsigned int v15 = 0;
  }
  char v16 = v9 + 3;
  if (a7 < a9) {
    int v17 = a7 << v16;
  }
  else {
    int v17 = a8;
  }
  unsigned int v18 = (v17 - (a6 << v16) + v11 + 7) & 0xFFFFFFF8;
  if (a4) {
    int v19 = 4;
  }
  else {
    int v19 = 3;
  }
  return v19 * a5 * (v15 + v18);
}

BOOL CAHDecTansyAvx::isLfPadDis(CAHDecTansyAvx *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 32) + 42424);
  if (*(_DWORD *)(v1 + 2196)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = *(_DWORD *)(v1 + 2200) != 0;
  }
  if (*(unsigned char *)(v1 + 1962))
  {
    BOOL v3 = 0;
    if (!*(unsigned char *)(v1 + 1956)) {
      goto LABEL_11;
    }
LABEL_9:
    BOOL v4 = 1;
    goto LABEL_14;
  }
  if (*(unsigned char *)(v1 + 1956))
  {
    BOOL v3 = 0;
    goto LABEL_9;
  }
  BOOL v3 = *(unsigned char *)(v1 + 99) != 0;
LABEL_11:
  BOOL v4 = !*(_DWORD *)(v1 + 3448) && !*(_DWORD *)(v1 + 3452) && *(_DWORD *)(v1 + 3456) == 0;
LABEL_14:
  if (v2 || v3) {
    return 0;
  }
  if (*(_DWORD *)(v1 + 2164) == *(_DWORD *)(v1 + 2176)) {
    return v4;
  }
  return 0;
}

BOOL CAHDecTansyAvx::ppsWorkBufSizeIncrease(CAHDecTansyAvx *this, _DWORD *a2, _DWORD *a3)
{
  return *a3 > *a2
      || a3[1] > a2[1]
      || a3[2] > a2[2]
      || a3[3] > a2[3]
      || a3[4] > a2[4]
      || a3[5] > a2[5]
      || a3[6] > a2[6]
      || a3[7] > a2[7]
      || a3[8] > a2[8]
      || a3[9] > a2[9]
      || a3[10] > a2[10]
      || a3[11] > a2[11]
      || a3[12] > a2[12];
}

uint64_t CAHDecTansyAvx::allocWorkBuf_PPS(CAHDecTansyAvx *this, void *a2, void *a3, int *a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a4;
  uint64_t v7 = *((void *)this + 32);
  int v8 = *(_DWORD **)(v7 + 15944);
  if ((int)v6 > v8[19809])
  {
    if (v6)
    {
      if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 106, v6, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v36 = 136315650;
          int v37 = "allocWorkBuf_PPS";
          __int16 v38 = 1024;
          int v39 = 2159;
          __int16 v40 = 2080;
          int v41 = "OvpAboveInfo";
          char v9 = &_os_log_internal;
LABEL_102:
          _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v36, 0x1Cu);
          goto LABEL_103;
        }
        goto LABEL_103;
      }
      int v10 = *a4;
      uint64_t v7 = *((void *)this + 32);
      int v8 = *(_DWORD **)(v7 + 15944);
    }
    else
    {
      int v10 = 0;
    }
    v8[19809] = v10;
  }
  uint64_t v11 = a4[1];
  if ((int)v11 <= v8[19810])
  {
LABEL_17:
    uint64_t v13 = a4[2];
    if ((int)v13 > v8[19811])
    {
      if (v13)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 128, v13, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2174;
            __int16 v40 = 2080;
            int v41 = "LfAbovePixel";
            char v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v14 = a4[2];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v14 = 0;
      }
      v8[19811] = v14;
    }
    uint64_t v15 = a4[3];
    if ((int)v15 > v8[19812])
    {
      if (v15)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 139, v15, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2181;
            __int16 v40 = 2080;
            int v41 = "LfAboveInfo";
            char v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v16 = a4[3];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v16 = 0;
      }
      v8[19812] = v16;
    }
    uint64_t v17 = a4[4];
    if ((int)v17 > v8[19813])
    {
      if (v17)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 183, v17, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2188;
            __int16 v40 = 2080;
            int v41 = "RfAboveInfo";
            char v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v18 = a4[4];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v18 = 0;
      }
      v8[19813] = v18;
    }
    uint64_t v19 = a4[5];
    if ((int)v19 > v8[19814])
    {
      if (v19)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 249, v19, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2195;
            __int16 v40 = 2080;
            int v41 = "MvAboveInfo";
            char v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v20 = a4[5];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v20 = 0;
      }
      v8[19814] = v20;
    }
    uint64_t v21 = a4[6];
    if ((int)v21 > v8[19815])
    {
      if (v21)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 150, v21, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2202;
            __int16 v40 = 2080;
            int v41 = "LfLeftPixel";
            char v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v22 = a4[6];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v22 = 0;
      }
      v8[19815] = v22;
    }
    uint64_t v23 = a4[7];
    if ((int)v23 > v8[19816])
    {
      if (v23)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 161, v23, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2209;
            __int16 v40 = 2080;
            int v41 = "LfLeftInfo";
            char v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v24 = a4[7];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v24 = 0;
      }
      v8[19816] = v24;
    }
    uint64_t v25 = a4[8];
    if ((int)v25 > v8[19817])
    {
      if (v25)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 172, v25, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2216;
            __int16 v40 = 2080;
            int v41 = "SrLeftPixel";
            char v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v26 = a4[8];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v26 = 0;
      }
      v8[19817] = v26;
    }
    uint64_t v27 = a4[9];
    if ((int)v27 > v8[19818])
    {
      if (v27)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 194, v27, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2223;
            __int16 v40 = 2080;
            int v41 = "RfLeftPixel";
            char v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v28 = a4[9];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v28 = 0;
      }
      v8[19818] = v28;
    }
    uint64_t v29 = a4[10];
    if ((int)v29 > v8[19819])
    {
      if (v29)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 205, v29, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2230;
            __int16 v40 = 2080;
            int v41 = "RfLeftInfo";
            char v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v30 = a4[10];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v30 = 0;
      }
      v8[19819] = v30;
    }
    uint64_t v31 = a4[11];
    if ((int)v31 > v8[19820])
    {
      if (v31)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 238, v31, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2237;
            __int16 v40 = 2080;
            int v41 = "AzLeftPixel";
            char v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v32 = a4[11];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v32 = 0;
      }
      v8[19820] = v32;
    }
    uint64_t v33 = a4[12];
    if ((int)v33 <= v8[19821]) {
      return 0;
    }
    if (v33)
    {
      if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 227, v33, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v36 = 136315650;
          int v37 = "allocWorkBuf_PPS";
          __int16 v38 = 1024;
          int v39 = 2244;
          __int16 v40 = 2080;
          int v41 = "SWrLeftPixel";
          char v9 = &_os_log_internal;
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      int v35 = a4[12];
      int v8 = *(_DWORD **)(*((void *)this + 32) + 15944);
    }
    else
    {
      int v35 = 0;
    }
    uint64_t result = 0;
    v8[19821] = v35;
    return result;
  }
  if (!v11)
  {
    int v12 = 0;
LABEL_16:
    v8[19810] = v12;
    goto LABEL_17;
  }
  if (!CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 117, v11, 7, 1, 0))
  {
    int v12 = a4[1];
    uint64_t v7 = *((void *)this + 32);
    int v8 = *(_DWORD **)(v7 + 15944);
    goto LABEL_16;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v36 = 136315650;
    int v37 = "allocWorkBuf_PPS";
    __int16 v38 = 1024;
    int v39 = 2167;
    __int16 v40 = 2080;
    int v41 = "IPAbovePixel";
    char v9 = &_os_log_internal;
    goto LABEL_102;
  }
LABEL_103:
  (*(void (**)(CAHDecTansyAvx *, int *))(*(void *)this + 152))(this, a4);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecTansyAvx::freeWorkBuf_SPS(CAHDecTansyAvx *this)
{
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    for (uint64_t i = 0; i != 2464; i += 176)
    {
      uint64_t v3 = *((void *)this + 32);
      if (*(void *)(v3 + i + 3072))
      {
        CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 3072));
        BOOL v4 = (_OWORD *)(*((void *)this + 32) + i);
        v4[192] = 0u;
        v4[193] = 0u;
        v4[194] = 0u;
        v4[195] = 0u;
        v4[196] = 0u;
        v4[197] = 0u;
        v4[198] = 0u;
        v4[199] = 0u;
        v4[200] = 0u;
        v4[201] = 0u;
        v4[202] = 0u;
        uint64_t v3 = *((void *)this + 32);
      }
      if (*(void *)(v3 + i + 5536))
      {
        CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 5536));
        int v5 = (_OWORD *)(*((void *)this + 32) + i);
        v5[346] = 0u;
        v5[347] = 0u;
        v5[348] = 0u;
        v5[349] = 0u;
        v5[350] = 0u;
        v5[351] = 0u;
        v5[352] = 0u;
        v5[353] = 0u;
        v5[354] = 0u;
        v5[355] = 0u;
        v5[356] = 0u;
      }
    }
  }
  for (uint64_t j = 0; j != 2288; j += 176)
  {
    uint64_t v7 = *((void *)this + 32);
    if (*(void *)(v7 + j + 8008))
    {
      CAVDDecoder::deallocAVDMem(v7, (uint64_t *)(v7 + j + 8008));
      int v8 = (_OWORD *)(*((void *)this + 32) + j + 8008);
      *int v8 = 0u;
      v8[1] = 0u;
      unsigned int v8[2] = 0u;
      v8[3] = 0u;
      unsigned char v8[4] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      v8[10] = 0u;
    }
  }
  for (uint64_t k = 0; k != 2288; k += 176)
  {
    uint64_t result = *((void *)this + 32);
    if (*(void *)(result + k + 13424))
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + k + 13424));
      uint64_t v11 = (_OWORD *)(*((void *)this + 32) + k);
      v11[839] = 0u;
      v11[840] = 0u;
      v11[841] = 0u;
      v11[842] = 0u;
      v11[843] = 0u;
      v11[844] = 0u;
      v11[845] = 0u;
      v11[846] = 0u;
      v11[847] = 0u;
      v11[848] = 0u;
      v11[849] = 0u;
    }
  }
  return result;
}

double CAHDecTansyAvx::freeWorkBuf_PPS(CAHDecTansyAvx *this, _DWORD *a2)
{
  if (!a2 || (BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944), *a2 > v4[19809]))
  {
    if (*((void *)this + 212))
    {
      int v5 = (_OWORD *)((char *)this + 1696);
      CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 212);
      double result = 0.0;
      *int v5 = 0u;
      *((_OWORD *)this + 107) = 0u;
      *((_OWORD *)this + 108) = 0u;
      *((_OWORD *)this + 109) = 0u;
      *((_OWORD *)this + 11pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
      *((_OWORD *)this + 111) = 0u;
      *((_OWORD *)this + 112) = 0u;
      *((_OWORD *)this + 113) = 0u;
      *((_OWORD *)this + 114) = 0u;
      *((_OWORD *)this + 115) = 0u;
      *((_OWORD *)this + 116) = 0u;
    }
    if (!a2) {
      goto LABEL_8;
    }
    BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
  }
  if (a2[1] <= v4[19810]) {
    goto LABEL_12;
  }
LABEL_8:
  if (*((void *)this + 234))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 234);
    double result = 0.0;
    *((_OWORD *)this + 117) = 0u;
    *((_OWORD *)this + 118) = 0u;
    *((_OWORD *)this + 119) = 0u;
    *((_OWORD *)this + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 121) = 0u;
    *((_OWORD *)this + 122) = 0u;
    *((_OWORD *)this + 123) = 0u;
    *((_OWORD *)this + 124) = 0u;
    *((_OWORD *)this + 125) = 0u;
    *((_OWORD *)this + 126) = 0u;
    *((_OWORD *)this + 127) = 0u;
  }
  if (a2)
  {
    BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_12:
    if (a2[2] <= v4[19811]) {
      goto LABEL_17;
    }
  }
  if (*((void *)this + 256))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 256);
    double result = 0.0;
    *((_OWORD *)this + 128) = 0u;
    *((_OWORD *)this + 129) = 0u;
    *((_OWORD *)this + 13pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 131) = 0u;
    *((_OWORD *)this + 132) = 0u;
    *((_OWORD *)this + 133) = 0u;
    *((_OWORD *)this + 134) = 0u;
    *((_OWORD *)this + 135) = 0u;
    *((_OWORD *)this + 136) = 0u;
    *((_OWORD *)this + 137) = 0u;
    *((_OWORD *)this + 138) = 0u;
  }
  if (!a2) {
    goto LABEL_18;
  }
  BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_17:
  if (a2[3] <= v4[19812]) {
    goto LABEL_22;
  }
LABEL_18:
  if (*((void *)this + 278))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 278);
    double result = 0.0;
    *((_OWORD *)this + 139) = 0u;
    *((_OWORD *)this + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 141) = 0u;
    *((_OWORD *)this + 142) = 0u;
    *((_OWORD *)this + 143) = 0u;
    *((_OWORD *)this + 144) = 0u;
    *((_OWORD *)this + 145) = 0u;
    *((_OWORD *)this + 146) = 0u;
    *((_OWORD *)this + 147) = 0u;
    *((_OWORD *)this + 148) = 0u;
    *((_OWORD *)this + 149) = 0u;
  }
  if (a2)
  {
    BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_22:
    if (a2[4] <= v4[19813]) {
      goto LABEL_27;
    }
  }
  if (*((void *)this + 366))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 366);
    double result = 0.0;
    *((_OWORD *)this + 183) = 0u;
    *((_OWORD *)this + 184) = 0u;
    *((_OWORD *)this + 185) = 0u;
    *((_OWORD *)this + 186) = 0u;
    *((_OWORD *)this + 187) = 0u;
    *((_OWORD *)this + 188) = 0u;
    *((_OWORD *)this + 189) = 0u;
    *((_OWORD *)this + 19pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 191) = 0u;
    *((_OWORD *)this + 192) = 0u;
    *((_OWORD *)this + 193) = 0u;
  }
  if (!a2) {
    goto LABEL_28;
  }
  BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_27:
  if (a2[5] <= v4[19814]) {
    goto LABEL_32;
  }
LABEL_28:
  if (*((void *)this + 498))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 498);
    double result = 0.0;
    *((_OWORD *)this + 249) = 0u;
    *((_OWORD *)this + 25pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 251) = 0u;
    *((_OWORD *)this + 252) = 0u;
    *((_OWORD *)this + 253) = 0u;
    *((_OWORD *)this + 254) = 0u;
    *((_OWORD *)this + 255) = 0u;
    *((_OWORD *)this + 256) = 0u;
    *((_OWORD *)this + 257) = 0u;
    *((_OWORD *)this + 258) = 0u;
    *((_OWORD *)this + 259) = 0u;
  }
  if (a2)
  {
    BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_32:
    if (a2[6] <= v4[19815]) {
      goto LABEL_37;
    }
  }
  if (*((void *)this + 300))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 300);
    double result = 0.0;
    *((_OWORD *)this + 15pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 151) = 0u;
    *((_OWORD *)this + 152) = 0u;
    *((_OWORD *)this + 153) = 0u;
    *((_OWORD *)this + 154) = 0u;
    *((_OWORD *)this + 155) = 0u;
    *((_OWORD *)this + 156) = 0u;
    *((_OWORD *)this + 157) = 0u;
    *((_OWORD *)this + 158) = 0u;
    *((_OWORD *)this + 159) = 0u;
    *((_OWORD *)this + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  }
  if (!a2) {
    goto LABEL_38;
  }
  BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_37:
  if (a2[7] <= v4[19816]) {
    goto LABEL_42;
  }
LABEL_38:
  if (*((void *)this + 322))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 322);
    double result = 0.0;
    *((_OWORD *)this + 161) = 0u;
    *((_OWORD *)this + 162) = 0u;
    *((_OWORD *)this + 163) = 0u;
    *((_OWORD *)this + 164) = 0u;
    *((_OWORD *)this + 165) = 0u;
    *((_OWORD *)this + 166) = 0u;
    *((_OWORD *)this + 167) = 0u;
    *((_OWORD *)this + 168) = 0u;
    *((_OWORD *)this + 169) = 0u;
    *((_OWORD *)this + 17pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 171) = 0u;
  }
  if (a2)
  {
    BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_42:
    if (a2[8] <= v4[19817]) {
      goto LABEL_47;
    }
  }
  if (*((void *)this + 344))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 344);
    double result = 0.0;
    *((_OWORD *)this + 172) = 0u;
    *((_OWORD *)this + 173) = 0u;
    *((_OWORD *)this + 174) = 0u;
    *((_OWORD *)this + 175) = 0u;
    *((_OWORD *)this + 176) = 0u;
    *((_OWORD *)this + 177) = 0u;
    *((_OWORD *)this + 178) = 0u;
    *((_OWORD *)this + 179) = 0u;
    *((_OWORD *)this + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 181) = 0u;
    *((_OWORD *)this + 182) = 0u;
  }
  if (!a2) {
    goto LABEL_48;
  }
  BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_47:
  if (a2[9] <= v4[19818]) {
    goto LABEL_52;
  }
LABEL_48:
  if (*((void *)this + 388))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 388);
    double result = 0.0;
    *((_OWORD *)this + 194) = 0u;
    *((_OWORD *)this + 195) = 0u;
    *((_OWORD *)this + 196) = 0u;
    *((_OWORD *)this + 197) = 0u;
    *((_OWORD *)this + 198) = 0u;
    *((_OWORD *)this + 199) = 0u;
    *((_OWORD *)this + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 201) = 0u;
    *((_OWORD *)this + 202) = 0u;
    *((_OWORD *)this + 203) = 0u;
    *((_OWORD *)this + 204) = 0u;
  }
  if (a2)
  {
    BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_52:
    if (a2[10] <= v4[19819]) {
      goto LABEL_57;
    }
  }
  if (*((void *)this + 410))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 410);
    double result = 0.0;
    *((_OWORD *)this + 205) = 0u;
    *((_OWORD *)this + 206) = 0u;
    *((_OWORD *)this + 207) = 0u;
    *((_OWORD *)this + 208) = 0u;
    *((_OWORD *)this + 209) = 0u;
    *((_OWORD *)this + 21pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 211) = 0u;
    *((_OWORD *)this + 212) = 0u;
    *((_OWORD *)this + 213) = 0u;
    *((_OWORD *)this + 214) = 0u;
    *((_OWORD *)this + 215) = 0u;
  }
  if (!a2) {
    goto LABEL_58;
  }
  BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_57:
  if (a2[11] <= v4[19820]) {
    goto LABEL_62;
  }
LABEL_58:
  if (*((void *)this + 476))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 476);
    double result = 0.0;
    *((_OWORD *)this + 238) = 0u;
    *((_OWORD *)this + 239) = 0u;
    *((_OWORD *)this + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 241) = 0u;
    *((_OWORD *)this + 242) = 0u;
    *((_OWORD *)this + 243) = 0u;
    *((_OWORD *)this + 244) = 0u;
    *((_OWORD *)this + 245) = 0u;
    *((_OWORD *)this + 246) = 0u;
    *((_OWORD *)this + 247) = 0u;
    *((_OWORD *)this + 248) = 0u;
  }
  if (a2)
  {
    BOOL v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_62:
    if (a2[12] <= v4[19821]) {
      return result;
    }
  }
  if (*((void *)this + 454))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 454);
    double result = 0.0;
    *((_OWORD *)this + 227) = 0u;
    *((_OWORD *)this + 228) = 0u;
    *((_OWORD *)this + 229) = 0u;
    *((_OWORD *)this + 23pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 231) = 0u;
    *((_OWORD *)this + 232) = 0u;
    *((_OWORD *)this + 233) = 0u;
    *((_OWORD *)this + 234) = 0u;
    *((_OWORD *)this + 235) = 0u;
    *((_OWORD *)this + 236) = 0u;
    *((_OWORD *)this + 237) = 0u;
  }
  return result;
}

uint64_t CAHDecTansyAvx::upscale_pos(CAHDecTansyAvx *this, int a2, int a3, unsigned int a4)
{
  if (a2) {
    return ((int)(a4 * a3) >> 3);
  }
  else {
    return a4;
  }
}

uint64_t CAHDecTansyAvx::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 4176) = a2;
  return this;
}

uint64_t CAHDecTansyAvx::initPicture(CAHDecTansyAvx *this)
{
  return 0;
}

uint64_t CAHDecTansyAvx::populateSlices(CAHDecTansyAvx *this)
{
  return 0;
}

uint64_t CAHDecTansyAvx::getTileIdxAbove(CAHDecTansyAvx *this)
{
  return 0;
}

uint64_t CAHDecTansyAvx::decodeBuffer(CAHDecTansyAvx *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecTansyAvx::decodeBufferSize(CAHDecTansyAvx *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecTansyAvx::decHdrYLinAddr(CAHDecTansyAvx *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 3072);
}

uint64_t CAHDecTansyAvx::decHdrCLinAddr(CAHDecTansyAvx *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 5536);
}

uint64_t CAHDecTansyAvx::decHdrYSize(CAHDecTansyAvx *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 3116);
}

uint64_t CAHDecTansyAvx::decHdrCSize(CAHDecTansyAvx *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 5580);
}

uint64_t CAHDecTansyAvx::decHdrYStride(CAHDecTansyAvx *this)
{
  return *((unsigned int *)this + 1042);
}

uint64_t CAHDecTansyAvx::decHdrCStride(CAHDecTansyAvx *this)
{
  return *((unsigned int *)this + 1043);
}

void CAVDMvHevcDecoder::CAVDMvHevcDecoder(CAVDMvHevcDecoder *this, void *a2, int a3, int a4)
{
  CAVDHevcDecoder::CAVDHevcDecoder(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_26D740AE0;
  *(_DWORD *)(v5 + 1158pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(unsigned char *)(v5 + 11584) = 0;
  *(_OWORD *)(v5 + 9752) = 0u;
  *(void *)(v5 + 10432) = 0;
  *((void *)this + 1306) = 0;
  *((void *)this + 1305) = 0;
  *((_DWORD *)this + 2614) = 0;
  *((_OWORD *)this + 654) = 0u;
  *((_OWORD *)this + 655) = 0u;
  *((_OWORD *)this + 656) = 0u;
  *((_OWORD *)this + 657) = 0u;
  *((_OWORD *)this + 658) = 0u;
  *((_OWORD *)this + 659) = 0u;
  *((_OWORD *)this + 66pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *((_OWORD *)this + 661) = 0u;
  *((_OWORD *)this + 662) = 0u;
  *((_OWORD *)this + 663) = 0u;
  *((_OWORD *)this + 664) = 0u;
  *((_OWORD *)this + 665) = 0u;
  *(_OWORD *)(v5 + 10651) = 0u;
  bzero((void *)(v5 + 10668), 0x38EuLL);
  *(void *)((char *)this + 12164) = 0;
  uint64_t v6 = -640;
  do
  {
    *(_OWORD *)((char *)this + v6 + 10432) = 0uLL;
    v6 += 40;
  }
  while (v6);
  *(_OWORD *)((char *)this + 972pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + 9736) = 0u;
  *(_OWORD *)((char *)this + 9688) = 0u;
  *(_OWORD *)((char *)this + 9704) = 0u;
  *(_OWORD *)((char *)this + 9656) = 0u;
  *(_OWORD *)((char *)this + 9672) = 0u;
  *(_OWORD *)((char *)this + 9624) = 0u;
  *(_OWORD *)((char *)this + 964pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + 9592) = 0u;
  *(_OWORD *)((char *)this + 9608) = 0u;
  *(_OWORD *)((char *)this + 956pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + 9576) = 0u;
  *(_OWORD *)((char *)this + 9528) = 0u;
  *(_OWORD *)((char *)this + 9544) = 0u;
  *(_OWORD *)((char *)this + 9496) = 0u;
  *(_OWORD *)((char *)this + 9512) = 0u;
  *(_OWORD *)((char *)this + 9464) = 0u;
  *(_OWORD *)((char *)this + 948pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + 9432) = 0u;
  *(_OWORD *)((char *)this + 9448) = 0u;
  *(_OWORD *)((char *)this + 940pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + 9416) = 0u;
  *(_OWORD *)((char *)this + 9368) = 0u;
  *(_OWORD *)((char *)this + 9384) = 0u;
  *(_OWORD *)((char *)this + 9336) = 0u;
  *(_OWORD *)((char *)this + 9352) = 0u;
  *(_OWORD *)((char *)this + 9304) = 0u;
  *(_OWORD *)((char *)this + 932pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + 9272) = 0u;
  *(_OWORD *)((char *)this + 9288) = 0u;
  *(_OWORD *)((char *)this + 924pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + 9256) = 0u;
  *(_OWORD *)((char *)this + 10634) = 0u;
  *(_OWORD *)((char *)this + 1065pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + 10602) = 0u;
  *(_OWORD *)((char *)this + 10618) = 0u;
  *(_OWORD *)((char *)this + 1057pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)((char *)this + 10586) = 0u;
  *(_OWORD *)((char *)this + 10538) = 0u;
  *(_OWORD *)((char *)this + 10554) = 0u;
  *(_OWORD *)((char *)this + 10506) = 0u;
  *(_OWORD *)((char *)this + 10522) = 0u;
  *(_OWORD *)((char *)this + 10474) = 0u;
  *(_OWORD *)((char *)this + 1049pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  bzero((char *)this + 10680, 0x380uLL);
  bzero((char *)this + 11588, 0x240uLL);
}

uint64_t CAVDMvHevcDecoder::getHwDecoder(CAVDMvHevcDecoder *this, int a2)
{
  uint64_t result = 304;
  if (a2 <= 63)
  {
    uint64_t v4 = *((void *)this + a2 + 1155);
    if (v4)
    {
      uint64_t result = 0;
      *((void *)this + 262) = v4;
    }
  }
  return result;
}

uint64_t CAVDMvHevcDecoder::getInterLayerShortTermPic(HEVC_RLM **this, int a2, unsigned int a3)
{
  if (*((_DWORD *)this + 2050) >= a3) {
    return HEVC_RLM::findShortTermReferencePictureByPicOrderCntVal(this[*((unsigned __int16 *)this[1034] + (int)a3 + 290) + 391], a2);
  }
  else {
    return 0;
  }
}

uint64_t CAVDMvHevcDecoder::allocateMultiViewHwDecoders(CAVDMvHevcDecoder *this, int a2)
{
  if (a2 < 1)
  {
LABEL_6:
    uint64_t v6 = *((int *)this + 771);
    uint64_t v7 = *((void *)this + v6 + 1155);
    if ((int)v6 <= 63 && v7 != 0)
    {
      uint64_t result = 0;
      *((void *)this + 262) = v7;
      return result;
    }
  }
  else
  {
    uint64_t v3 = -(uint64_t)a2;
    uint64_t v4 = 1155;
    while (1)
    {
      HwDecoder = CAVDHevcDecoder::allocateHwDecoder(this);
      *((void *)this + v4) = HwDecoder;
      if (!HwDecoder || !(*(uint64_t (**)(CAHDecCatnipHevc *))(*(void *)HwDecoder + 160))(HwDecoder)) {
        break;
      }
      ++v4;
      if (v3 + v4 == 1155) {
        goto LABEL_6;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: CAVDMvHevcDecoder: error allocating decodeBuffer or m_pAHwDecoder is NULL!", v10, 2u);
    }
  }
  return 304;
}

void CAVDMvHevcDecoder::~CAVDMvHevcDecoder(void **this)
{
  *this = &unk_26D740AE0;
  free(this[1220]);
  this[1220] = 0;
  free(this[1219]);
  this[1219] = 0;
  uint64_t v2 = 0x1FFFFFFFFFFFFFB0;
  do
  {
    uint64_t v3 = &this[v2];
    free(this[v2 + 1304]);
    v3[1304] = 0;
    free(this[v2 + 1305]);
    v3[1305] = 0;
    v2 += 5;
  }
  while (v2 * 8);
  uint64_t v4 = 1155;
  do
  {
    uint64_t v5 = this[v4];
    this[262] = v5;
    if (v5)
    {
      (*(void (**)(void *))(*(void *)v5 + 136))(v5);
      (*(void (**)(void *, void))(*(void *)this[262] + 152))(this[262], 0);
      uint64_t v6 = this[262];
      if (v6) {
        (*(void (**)(void *))(*(void *)v6 + 8))(v6);
      }
      this[262] = 0;
      this[v4] = 0;
    }
    unint64_t v7 = v4 - 1155;
    ++v4;
  }
  while (v7 < *((unsigned int *)this + 959));

  CAVDHevcDecoder::~CAVDHevcDecoder((CAVDHevcDecoder *)this);
}

{
  uint64_t vars8;

  CAVDMvHevcDecoder::~CAVDMvHevcDecoder(this);

  JUMPOUT(0x223CBAD30);
}

void CAVDMvHevcDecoder::VAStartDecode(CAVDMvHevcDecoder *this, unsigned __int8 *a2, int a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 2824) = 0;
  *((_DWORD *)this + 777) = a3 >> 24;
  *((_DWORD *)this + 774) = *(_DWORD *)(*((void *)this + 292) + 5672);
  operator new();
}

void sub_2239C2E98(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD30](v1, 0x1091C40CC5F6689);
  _Unwind_Resume(a1);
}

uint64_t CAVDMvHevcDecoder::calcSmallestLayerId(CAVDMvHevcDecoder *this, int a2)
{
  uint64_t v3 = (char *)this + 3824;
  uint64_t v4 = *((unsigned int *)this + 2051);
  uint64_t v5 = (_DWORD *)((char *)this + 4 * a2 + 11588);
  uint64_t v6 = *v5;
  if (v6 == -1)
  {
    *uint64_t v5 = v4;
    uint64_t v6 = v4;
  }
  uint64_t v7 = a2;
  signed int v8 = HEVC_RBSP::convOlsIdxToLsIdx(*((void *)this + 389), (uint64_t)v3, v6);
  if (v8 <= v4) {
    goto LABEL_12;
  }
  uint64_t v9 = *((void *)this + 1034);
  uint64_t v10 = *(void *)(v9 + 3856);
  if (v10 && *(_WORD *)(v10 + 2 * v8) == 1)
  {
    uint64_t v11 = *(void *)(v9 + 3872);
    if (!v11 || (int v12 = *(unsigned __int16 **)(v11 + 8 * v8)) == 0)
    {
LABEL_12:
      int v14 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(v9 + 3872);
    if (!v13) {
      goto LABEL_12;
    }
    int v12 = *(unsigned __int16 **)(v13 + 8 * v8);
    if (!v12) {
      goto LABEL_12;
    }
  }
  int v14 = *v12;
LABEL_13:
  uint64_t result = HEVC_RBSP::convOlsIdxToLsIdx(*((void *)this + 389), (uint64_t)v3, *v5);
  *((_DWORD *)this + v7 + 2961) = v14;
  return result;
}

void CAVDMvHevcDecoder::deriveSpsParamsFromActiveVps(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a2 + 22847)) {
    HEVC_RBSP::calcSpsMaxDecPicBufferingMinus1(*(void *)(a1 + 3112), a1 + 3824, a2, *(_DWORD *)(a1 + 4 * *(unsigned __int16 *)(*(void *)(a1 + 8272) + 2 * a3 + 580) + 11588), a3);
  }
}

uint64_t CAVDMvHevcDecoder::VAStopDecode(CAVDMvHevcDecoder *this)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 2824))
  {
    if (*((unsigned char *)this + 8264))
    {
      unsigned int v2 = 0;
      do
      {
        if (!CAVDMvHevcDecoder::AccessUnitBumpingProcess(this)) {
          break;
        }
      }
      while (v2++ < 0x10);
    }
    else
    {
      LOBYTE(v19[0]) = 0;
      if (HEVC_RLM::bumpingProcess(*((HEVC_RLM **)this + 391), v19) && LOBYTE(v19[0]) != 0)
      {
        unsigned int v6 = 1;
        do
        {
          if (BYTE2(v19[0])) {
            (*(void (**)(CAVDMvHevcDecoder *, _OWORD *))(*(void *)this + 360))(this, v19);
          }
          LOBYTE(v19[0]) = 0;
        }
        while (HEVC_RLM::bumpingProcess(*((HEVC_RLM **)this + 391), v19) && v6++ <= 0xF && LOBYTE(v19[0]) != 0);
      }
    }
    while (!(*(unsigned int (**)(CAVDMvHevcDecoder *, _OWORD *))(*(void *)this + 384))(this, v19))
      (*(void (**)(CAVDMvHevcDecoder *, void))(*(void *)this + 80))(this, HIDWORD(v19[0]));
    uint64_t v9 = 391;
    do
    {
      uint64_t v10 = (HEVC_RLM *)*((void *)this + v9);
      if (v10) {
        HEVC_RLM::releaseAllPictures(v10);
      }
      unint64_t v11 = v9 - 391;
      ++v9;
    }
    while (v11 < *((unsigned int *)this + 959));
    free(*((void **)this + 1220));
    *((void *)this + 122pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    free(*((void **)this + 1219));
    *((void *)this + 1219) = 0;
    uint64_t v12 = -640;
    do
    {
      uint64_t v13 = (char *)this + v12;
      free(*(void **)((char *)this + v12 + 10432));
      *((void *)v13 + 1304) = 0;
      free(*(void **)((char *)this + v12 + 10440));
      *((void *)v13 + 1305) = 0;
      v12 += 40;
    }
    while (v12);
    uint64_t v14 = 1155;
    do
    {
      uint64_t v15 = *((void *)this + v14);
      *((void *)this + 262) = v15;
      if (v15)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 136))(v15);
        (*(void (**)(void, void))(**((void **)this + 262) + 152))(*((void *)this + 262), 0);
        uint64_t v16 = *((void *)this + 262);
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
        *((void *)this + 262) = 0;
        *((void *)this + v14) = 0;
      }
      unint64_t v17 = *((unsigned int *)this + 959);
      unint64_t v18 = v14 - 1155;
      ++v14;
    }
    while (v18 < v17);
    (*(void (**)(CAVDMvHevcDecoder *, void))(*(void *)this + 280))(this, (v17 + 1));
    return 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v19[0]) = 136315138;
      *(void *)((char *)v19 + 4) = "VAStopDecode";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: bailing out of %s because start didn't complete", (uint8_t *)v19, 0xCu);
    }
    return 305;
  }
}

BOOL CAVDMvHevcDecoder::AccessUnitBumpingProcess(CAVDMvHevcDecoder *this)
{
  uint64_t v2 = 0;
  int v3 = -1;
  int v4 = 0x7FFFFFFF;
  do
  {
    if (*((unsigned char *)this + 40 * v2 + 9824))
    {
      uint64_t v5 = *((unsigned int *)this + 10 * v2 + 2455);
      if (v5)
      {
        BOOL v6 = 0;
        uint64_t v7 = *((void *)this + 5 * v2 + 1224);
        do
        {
          if (*(void *)v7) {
            BOOL v6 = (*(unsigned __int8 *)(*(void *)v7 + 2) | v6) != 0;
          }
          v7 += 8;
          --v5;
        }
        while (v5);
        if (v6 && *((_DWORD *)this + 10 * v2 + 2452) < v4)
        {
          int v3 = v2;
          int v4 = *((_DWORD *)this + 10 * v2 + 2452);
        }
      }
    }
    ++v2;
  }
  while (v2 != 16);
  if (v3 != -1)
  {
    signed int v8 = (char *)this + 40 * v3;
    if (!*((_DWORD *)v8 + 2455)) {
      goto LABEL_32;
    }
    unint64_t v9 = 0;
    uint64_t v10 = v8 + 9792;
    unint64_t v11 = (unsigned int *)(v8 + 9820);
    do
    {
      uint64_t v12 = *(void *)(*v10 + 8 * v9);
      if (v12)
      {
        uint64_t v13 = *(int *)(v12 + 28);
        unsigned int v14 = *(_DWORD *)(v12 + 44);
        if (*(unsigned char *)(v12 + 2))
        {
          *(unsigned char *)(v12 + 2) = 0;
          (*(void (**)(CAVDMvHevcDecoder *, uint64_t))(*(void *)this + 360))(this, v12);
        }
        if (!*(_DWORD *)(v12 + 20))
        {
          HEVC_RLM::removeEntry(*((HEVC_RLM **)this + *(unsigned __int16 *)(*((void *)this + 1034) + 2 * v13 + 580) + 391), v14);
          *(void *)(*v10 + 8 * v9) = 0;
        }
      }
      ++v9;
      unint64_t v15 = *v11;
    }
    while (v9 < v15);
    if (!v15) {
      goto LABEL_32;
    }
    int v16 = 0;
    unint64_t v17 = (void *)*v10;
    do
    {
      if (*v17++) {
        ++v16;
      }
      --v15;
    }
    while (v15);
    if (!v16)
    {
LABEL_32:
      if (*((unsigned char *)this + 40 * v3 + 9824))
      {
        uint64_t v19 = (char *)this + 40 * v3;
        *((_DWORD *)v19 + 2452) = 0;
        v19[9824] = 0;
        *((void *)v19 + 1227) = 0;
        bzero(*((void **)v19 + 1225), *((unsigned int *)this + 959) + 1);
        --*((_DWORD *)this + 2608);
      }
    }
  }
  return v3 != -1;
}

void CAVDMvHevcDecoder::flushMV_RLM(CAVDMvHevcDecoder *this)
{
  uint64_t v2 = (char *)this + 9824;
  uint64_t v3 = 16;
  int v4 = (unsigned __int8 *)this + 9824;
  do
  {
    int v5 = *v4;
    v4 += 40;
    if (v5)
    {
      *((_DWORD *)v2 - 4) = 0;
      *((void *)v2 - 1) = 0;
      *uint64_t v2 = 0;
      bzero(*((void **)v2 - 3), *((unsigned int *)this + 959) + 1);
      --*((_DWORD *)this + 2608);
    }
    uint64_t v2 = v4;
    --v3;
  }
  while (v3);
  uint64_t v6 = 391;
  do
  {
    uint64_t v7 = (HEVC_RLM *)*((void *)this + v6);
    if (v7) {
      HEVC_RLM::releaseAllPictures(v7);
    }
    unint64_t v8 = v6 - 391;
    ++v6;
  }
  while (v8 < *((unsigned int *)this + 959));
}

void CAVDMvHevcDecoder::removeAccessUnitEntry(CAVDMvHevcDecoder *this, int a2)
{
  if (*((unsigned char *)this + 40 * a2 + 9824))
  {
    uint64_t v3 = (char *)this + 40 * a2;
    *((_DWORD *)v3 + 2452) = 0;
    v3[9824] = 0;
    *((void *)v3 + 1227) = 0;
    bzero(*((void **)v3 + 1225), *((unsigned int *)this + 959) + 1);
    --*((_DWORD *)this + 2608);
  }
}

uint64_t CAVDMvHevcDecoder::VADecodeFrame(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = a4;
  uint64_t v240 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 3068) = 0;
  uint64_t v227 = 0;
  uint64_t v228 = 0;
  uint64_t v226 = 0;
  int v223 = (unsigned char *)(a1 + 9096);
  *(unsigned char *)(a1 + 9098) = 0;
  *(_DWORD *)(a1 + 308pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*(void *)(a1 + 2336) + 5676);
  uint64_t v16 = a4 == 1;
  if (a4 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, 1);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *(_DWORD *)(*(void *)(a1 + 2336) + 5680);
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s MultiView client %d", buf, 0x12u);
    }
    if (!*(_DWORD *)(*(void *)(a1 + 2336) + 5680)) {
      *int v223 = 0;
    }
  }
  uint64_t v18 = *(void *)(a1 + 8272);
  if (!v18)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      uint64_t v19 = &_os_log_internal;
      uint64_t v20 = "AppleAVD: ERROR: %s: VPS extension missing!\n";
      goto LABEL_13;
    }
    goto LABEL_25;
  }
  *(_DWORD *)(a1 + 3084) = *(unsigned __int16 *)(v18 + 2 * *(unsigned int *)(a1 + 3080) + 580);
  if (a5 == -1)
  {
    *(void *)(a1 + 836pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(void *)(a1 + 8352) = 0xFFFFFFFF00000000;
  }
  else
  {
    CAVDAvxDecoder::setPixelBuffer(a1, a1 + 8352, a5, 1, &v228);
    if (!*(void *)(a1 + 8360))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_25;
      }
      *(_WORD *)buf = 0;
      uint64_t v19 = &_os_log_internal;
      uint64_t v20 = "AppleAVD: Error getting display buffer!";
      goto LABEL_23;
    }
  }
  CAVDAvxDecoder::setPixelBuffer(a1, a1 + 8336, a6, 0, (void *)(a1 + 2088));
  if (!*(void *)(a1 + 8344))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    *(_WORD *)buf = 0;
    uint64_t v19 = &_os_log_internal;
    uint64_t v20 = "AppleAVD: Error getting decoder buffer!";
    goto LABEL_23;
  }
  *(void *)(*(void *)(a1 + 2088) + 204) = *(void *)(a1 + 2856);
  int v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (a7 != -1 && v22)
  {
    CAVDAvxDecoder::setPixelBuffer(a1, a1 + 8368, a7, 0, &v227);
    if (!*(void *)(a1 + 8376))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      int v26 = &_os_log_internal;
      uint64_t v27 = "AppleAVD: ERROR: %s(): Error getting second decoder buffer for scaling! (frameNum :%d)";
      goto LABEL_37;
    }
    uint64_t v23 = v227;
    if (v227)
    {
      *(_DWORD *)(v227 + 204) = 0;
      *(_DWORD *)(v23 + 208) = 0;
      goto LABEL_38;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      int v26 = &_os_log_internal;
      uint64_t v27 = "AppleAVD: ERROR: %s(): vSurfInfoScalerRef was not set! (frameNum :%d)";
LABEL_37:
      _os_log_impl(&dword_223977000, v26, OS_LOG_TYPE_DEFAULT, v27, buf, 0x12u);
    }
  }
LABEL_38:
  *(_DWORD *)(a1 + 2648) = *(unsigned __int8 *)(*(void *)(a1 + 8344) + 160);
  uint64_t v28 = *(void *)(a1 + 8360);
  if (!*(unsigned char *)(a1 + 9))
  {
    if (v28)
    {
      int v29 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 424))(a1, *(unsigned int *)(v28 + 148));
LABEL_44:
      *(_DWORD *)(a1 + 2644) = v29;
      goto LABEL_45;
    }
LABEL_43:
    int v29 = 0;
    goto LABEL_44;
  }
  if (!v28) {
    goto LABEL_43;
  }
LABEL_45:
  if (*(unsigned char *)(a1 + 3060) && *(_DWORD *)(a1 + 3064) == 2 && !*(unsigned char *)(a1 + 3004))
  {
    if (*(_DWORD *)(a1 + 3036))
    {
      CAVDAvxDecoder::setPixelBuffer(a1, a1 + 8384, 125, 0, &v226);
      if (!*(void *)(a1 + 8392))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_25;
        }
        *(_WORD *)buf = 0;
        uint64_t v19 = &_os_log_internal;
        uint64_t v20 = "AppleAVD: Error getting chroma scratch buffer!";
        goto LABEL_23;
      }
    }
    if (!*(_DWORD *)(a1 + 2644) && *(_DWORD *)(a1 + 2648) == 1) {
      v223[2] = 1;
    }
  }
  uint64_t v222 = a2;
  uint64_t v30 = *(void *)(a1 + 8360);
  if (!v30) {
    uint64_t v30 = *(void *)(a1 + 8344);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 23, v30 + 148);
  LODWORD(v31) = *(_DWORD *)(a1 + 3108);
  if ((int)v31 > a3)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    goto LABEL_57;
  }
  uint64_t v32 = 0;
  uint64_t v213 = 0;
  unsigned int v42 = 0;
  unsigned int v43 = 0;
  int v216 = 0;
  unint64_t v44 = (unint64_t)v222 + a3;
  uint64_t v221 = (_DWORD *)(a1 + 3824);
  int v210 = 0;
  uint64_t v212 = a1 + 3648;
  uint64_t v206 = a1 + 10538;
  unsigned int v45 = v222;
  unsigned int v217 = v12;
  unsigned int v208 = a6;
  unint64_t v207 = v44;
LABEL_63:
  switch(v31)
  {
    case 1:
      uint64_t v46 = v16;
      unsigned int v51 = *(unsigned __int8 *)v45;
      int v47 = (unsigned __int8 *)v45 + 1;
      unsigned int v49 = v51;
      unsigned int v50 = v51 + 1;
      break;
    case 2:
      uint64_t v46 = v16;
      unsigned int v52 = *(unsigned __int16 *)v45;
      int v47 = (unsigned __int8 *)v45 + 2;
      unsigned int v49 = __rev16(v52);
      unsigned int v50 = v49 + 2;
      break;
    case 4:
      uint64_t v46 = v16;
      unsigned int v48 = *v45;
      int v47 = (unsigned __int8 *)(v45 + 1);
      unsigned int v49 = bswap32(v48);
      unsigned int v50 = v49 + 4;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        __int16 v165 = &_os_log_internal;
        uint64_t v166 = "AppleAVD: AVC_Decoder::ParseHeader unsupported naluLengthSize ";
        uint32_t v167 = 2;
LABEL_243:
        _os_log_impl(&dword_223977000, v165, OS_LOG_TYPE_DEFAULT, v166, buf, v167);
      }
LABEL_244:
      int v24 = 317;
      goto LABEL_26;
  }
  if (v49) {
    BOOL v53 = (unint64_t)&v47[v49] > v44;
  }
  else {
    BOOL v53 = 1;
  }
  if (v53)
  {
    unsigned int v182 = v49;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v182;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s NALU bad size! %d", buf, 0x12u);
    }
    int v24 = 318;
    goto LABEL_235;
  }
  unsigned int v54 = v43;
  unsigned int v55 = v42;
  unsigned int v220 = v49;
  uint64_t v56 = v49;
  int v214 = v47;
  HEVC_RBSP::setRBSP(*(HEVC_RBSP **)(a1 + 3112), v47, v49);
  if ((HEVC_RBSP::parseNAL(*(void *)(a1 + 3112), &v229, 0) & 1) == 0)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_234;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "VADecodeFrame";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v220;
    int v162 = &_os_log_internal;
    unsigned int v163 = "AppleAVD: %s parse NAL error ! %d";
    uint32_t v164 = 18;
    goto LABEL_233;
  }
  if (*v221 == -1)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_234;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "VADecodeFrame";
    int v162 = &_os_log_internal;
    unsigned int v163 = "AppleAVD: %s invalid VPS id!";
    goto LABEL_232;
  }
  uint64_t v218 = v32;
  unsigned int v57 = v231;
  unsigned int v58 = *(_DWORD *)(a1 + 8200);
  if (v231 > v58)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VADecodeFrame";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v57;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v58;
      int v162 = &_os_log_internal;
      unsigned int v163 = "AppleAVD: %s nuh_layer_id > max layer ! %d %d";
      goto LABEL_292;
    }
LABEL_324:
    int v24 = 305;
    goto LABEL_235;
  }
  unsigned __int16 v59 = 0;
  unsigned int v42 = v50 + v55;
  unsigned int v60 = v31 + v54;
  uint64_t v16 = v46;
  do
  {
    if (v231 == *(char *)(*(void *)(*(void *)(a1 + 8272) + 512) + 28 * v59 + 26))
    {
      unsigned int v61 = v230;
      int v62 = v216;
      if ((0x7003F03FFuLL >> v230)) {
        int v63 = (0x7FFC0FC00uLL >> v230) & 1;
      }
      else {
        int v63 = v216;
      }
      if (v230 <= 0x22) {
        int v62 = v63;
      }
      int v216 = v62;
      int v64 = *(_DWORD *)(a1 + 3080);
      if (v231 == v64 || v223[1])
      {
        switch(v230)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 9u:
            if (!*(unsigned char *)(a1 + 3004)) {
              goto LABEL_89;
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_234;
            }
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v61;
            int v162 = &_os_log_internal;
            unsigned int v163 = "AppleAVD: Rejecting non-IRAP frame in tiled decode %d";
            uint32_t v164 = 8;
            goto LABEL_233;
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
LABEL_89:
            if (*(_DWORD *)(a1 + 2804))
            {
              int v65 = v218;
              unsigned int v66 = v220;
            }
            else
            {
              unsigned int v67 = &v214[v56 - 1];
              unsigned int v68 = v220 + 1;
              int v65 = v218;
              do
              {
                int v69 = *v67--;
                unsigned int v66 = v68 - 1;
                if (v69) {
                  BOOL v70 = 1;
                }
                else {
                  BOOL v70 = v68 == 1;
                }
                --v68;
              }
              while (!v70);
            }
            unsigned int v203 = v42;
            unsigned int v204 = v60;
            unsigned int v220 = v66;
            if (v65)
            {
              if (v65 > 599) {
                goto LABEL_264;
              }
            }
            else if (*(unsigned char *)(a1 + 2833))
            {
              BOOL v101 = (v230 & 0xFFFFFFF8) == 0x10 && v64 == 0;
              if (v217 != 1 && !v101)
              {
                int v24 = 406;
                goto LABEL_235;
              }
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v217;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: FOUND IRAP-- SETTING m_skipToIdr FALSE! %d", buf, 8u);
              }
              *(unsigned char *)(a1 + 2833) = 0;
              int v102 = *(HEVC_RLM **)(a1 + 8 * *(unsigned int *)(a1 + 3084) + 3128);
              if (v102) {
                HEVC_RLM::releaseAllPictures(v102);
              }
            }
            uint64_t v205 = *(void *)(a1 + 8296);
            unsigned int v71 = (unsigned char *)(v205 + 2360 * v65 + 24);
            HevcReleaseSliceHeader((uint64_t)v71);
            bzero(v71, 0x808uLL);
            if (*v223 && !v223[1376])
            {
              CAVDMvHevcDecoder::initOutputDecodeLayerSetInfo((CAVDMvHevcDecoder *)a1);
              if (!CAVDMvHevcDecoder::InitMultiViewDpbInfo((CAVDMvHevcDecoder *)a1)) {
                goto LABEL_234;
              }
              v223[1376] = 1;
              v223[3068] = 1;
              if (*(_DWORD *)(a1 + 3836) != -1)
              {
                unint64_t v72 = 0;
                uint64_t v73 = *(void *)(a1 + 9088);
                do
                {
                  *(_DWORD *)(v206 + 4 * v72 + 398) = 0x80000000;
                  int v74 = (unsigned char *)(v206 + v72);
                  v74[718] = 0;
                  *(_DWORD *)(v73 + 4 * v72) = 0;
                  v74[654] = 1;
                  *int v74 = 0;
                  v74[64] = 0;
                  ++v72;
                }
                while (v72 < (*(_DWORD *)(a1 + 3836) + 1));
              }
            }
            if ((HEVC_RBSP::parseSliceHeader(*(void *)(a1 + 3112), (unsigned int *)v71, &v229, *(void *)(a1 + 8280), *(void *)(a1 + 8288), (uint64_t)v221, 1, 0) & 1) == 0)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_234;
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "VADecodeFrame";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v65;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = v230;
              int v162 = &_os_log_internal;
              unsigned int v163 = "AppleAVD: %s() slice header parsing error - slice_count: %d - nal_unit_type: %d";
              goto LABEL_292;
            }
            int v75 = v65;
            if (v65 >= 1 && *(unsigned char *)(v205 + 2360 * v65 + 32)) {
              HevcCopyDependentSliceHeader((__int16 *)v71, (const void *)(*(void *)(a1 + 8296) + 2360 * (v65 - 1) + 24));
            }
            else {
              ++*(_DWORD *)(a1 + 3068);
            }
            if (CAVDHevcDecoder::activatePS(a1, (uint64_t)v71))
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_234;
              }
              *(_DWORD *)buf = 136315138;
              *(void *)&uint8_t buf[4] = "VADecodeFrame";
              int v162 = &_os_log_internal;
              unsigned int v163 = "AppleAVD: %s(): fail to activate parameter set for slice";
              goto LABEL_232;
            }
            unsigned int v201 = v16;
            int v209 = *(_DWORD *)(a1 + 8324);
            uint64_t v211 = *(void *)(a1 + 8288);
            uint64_t v76 = *(void *)(a1 + 8280);
            int v77 = *(_DWORD *)(a1 + 8320);
            uint64_t v213 = v76 + 23176 * v77;
            CAVDMvHevcDecoder::deriveSpsParamsFromActiveVps(a1, v213, *(_DWORD *)(a1 + 3080));
            uint64_t v78 = *(void *)(a1 + 8296) + 2360 * v75;
            *(void *)(v78 + 8) = v214;
            *(_DWORD *)(v78 + 16) = v220;
            *(_DWORD *)uint64_t v78 = v230;
            *(_DWORD *)(v78 + 2084) = v232;
            unsigned int NumberOfBitsParsed = HEVC_RBSP::getNumberOfBitsParsed(*(int8x8_t **)(a1 + 3112));
            int v215 = v75;
            uint64_t v80 = *(void *)(a1 + 8296) + 2360 * v75;
            *(_DWORD *)(v80 + 208pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = NumberOfBitsParsed;
            int v81 = *(_DWORD *)(v80 + 16);
            if (NumberOfBitsParsed > 8 * v81)
            {
              unsigned int v185 = NumberOfBitsParsed;
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_234;
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "VADecodeFrame";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 8 * v81;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = v185;
              int v162 = &_os_log_internal;
              unsigned int v163 = "AppleAVD: %s(): rbsp return invalid bitUsed %d nalL_inBits = %d";
LABEL_292:
              uint32_t v164 = 24;
              goto LABEL_233;
            }
            if (CAVDDecoder::isADSDecryption((CAVDDecoder *)a1) && !*(unsigned char *)(a1 + 10))
            {
              int v82 = CAVDDecoder::calculateClearBytes((CAVDDecoder *)a1, v204, v220, *(_DWORD *)(*(void *)(a1 + 8296) + 2360 * v75 + 2080), *(_DWORD *)(a1 + 3056), *(unsigned int **)(a1 + 3040), *(unsigned int **)(a1 + 3048));
              if (v82 == -1) {
                __int16 v83 = 1023;
              }
              else {
                __int16 v83 = v82;
              }
              *(_WORD *)(*(void *)(a1 + 8296) + 2360 * v75 + 2352) = v83;
              if (*(_DWORD *)(a1 + 2420)) {
                int v84 = 0x10000;
              }
              else {
                int v84 = 0x200000;
              }
              *(_DWORD *)(a1 + 2504) |= v84;
            }
            uint64_t v85 = v211 + 9856 * v209;
            int v87 = *(unsigned __int8 *)(v85 + 52);
            unsigned int v86 = (unsigned __int8 *)(v85 + 52);
            if (v87)
            {
              uint64_t v88 = *(unsigned int *)(v211 + 9856 * v209 + 56);
              unsigned int v89 = v88 + 1;
              if (v88 != -1)
              {
                uint64_t v90 = 0;
                uint64_t v91 = v211 + 9856 * v209 + 9680;
                uint64_t v92 = -v88;
                uint64_t v93 = -(uint64_t)v89;
                while (1)
                {
                  int v94 = (_DWORD *)(v92 == v90 ? v76 + 23176 * v77 + 22880 : v91);
                  unsigned int v95 = *v94 - *(_DWORD *)(v91 - 4);
                  if (v95 <= 1) {
                    break;
                  }
                  v91 += 4;
                  if (v93 == --v90) {
                    goto LABEL_129;
                  }
                }
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "virtual int CAVDMvHevcDecoder::VADecodeFrame(unsigned char *, int, uint32_t, int,"
                                       " int, int, avd_seq_params *)";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = -(int)v90;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&unsigned char buf[20] = v95;
                  uint64_t v179 = &_os_log_internal;
                  unsigned int v180 = "AppleAVD: %s() tile[%d] width %d, need at least two CTU wide";
                  uint32_t v181 = 24;
                  goto LABEL_263;
                }
                goto LABEL_264;
              }
            }
LABEL_129:
            if (*v71)
            {
              if (v218)
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_264;
                }
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "VADecodeFrame";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v218;
                uint64_t v179 = &_os_log_internal;
                unsigned int v180 = "AppleAVD: %s(): ERROR! Bad Bitstream! first_slice_segment_in_pic_flag set on slice_count: %d";
                goto LABEL_331;
              }
              *(_DWORD *)(a1 + 3088) = HEVC_RBSP::calcViewId(*(void *)(a1 + 3112), (uint64_t)v221, v231);
              uint64_t v96 = *(int *)(a1 + 3084);
              if ((int)v96 > 63 || (uint64_t v97 = *(void *)(a1 + 8 * v96 + 9240)) == 0)
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_234;
                }
                *(_DWORD *)buf = 136315138;
                *(void *)&uint8_t buf[4] = "VADecodeFrame";
                int v162 = &_os_log_internal;
                unsigned int v163 = "AppleAVD: getHwDecoder error in %s";
LABEL_232:
                uint32_t v164 = 12;
                goto LABEL_233;
              }
              uint64_t v98 = *(unsigned int *)(a1 + 3084);
              *(void *)(a1 + 2096) = v97;
              if (*(_DWORD *)(*(void *)(a1 + 9080) + 4 * v98)) {
                BOOL v99 = *(_DWORD *)(*(void *)(a1 + 9088) + 4 * v98) != 0;
              }
              else {
                BOOL v99 = 1;
              }
              if ((*(unsigned int (**)(uint64_t, _DWORD *, int *, uint64_t, unsigned char *, uint64_t, BOOL))(*(void *)a1 + 312))(a1, v221, &v229, v213, v71, v212, v99))
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_234;
                }
                *(_DWORD *)buf = 136315138;
                *(void *)&uint8_t buf[4] = "VADecodeFrame";
                int v162 = &_os_log_internal;
                unsigned int v163 = "AppleAVD: caught initPicture error in %s";
                goto LABEL_232;
              }
              *(_DWORD *)(*(void *)(a1 + 9088) + 4 * *(unsigned int *)(a1 + 3084)) = 0;
              ++*(_DWORD *)(*(void *)(a1 + 9080) + 4 * *(unsigned int *)(a1 + 3084));
              *(unsigned char *)(a1 + 11584) = 0;
              v223[3068] = 0;
              int v103 = v215;
              *(_DWORD *)(a1 + 1158pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v205 + 2360 * v215 + 328);
              *(unsigned char *)(a1 + 12166) = 0;
            }
            else
            {
              int v103 = v215;
              if (!v218)
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_264;
                }
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "VADecodeFrame";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 0;
                uint64_t v179 = &_os_log_internal;
                unsigned int v180 = "AppleAVD: %s(): ERROR! Bad Bitstream! first_slice_segment_in_pic_flag NOT set on slice_count: %d";
LABEL_331:
                uint32_t v181 = 18;
LABEL_263:
                _os_log_impl(&dword_223977000, v179, OS_LOG_TYPE_DEFAULT, v180, buf, v181);
LABEL_264:
                int v24 = 310;
                goto LABEL_235;
              }
            }
            if ((*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 392))(a1, v212, *(unsigned int *)(*(void *)(a1 + 8296) + 2360 * v103 + 44), v217))return 409; {
            uint64_t v104 = v76 + 23176 * v77;
            }
            int v105 = *(unsigned __int8 *)(v104 + 3600);
            int v106 = *(unsigned __int8 *)(v104 + 3604);
            int v107 = *(unsigned __int8 *)(v104 + 3636);
            int v108 = *(unsigned __int8 *)(v104 + 3640);
            *(void *)&long long v109 = *(void *)(v104 + 3608);
            char v110 = *(unsigned char *)(v104 + 3616);
            uint64_t v111 = *(void *)(v104 + 3620);
            uint64_t v112 = *(void *)(v104 + 3628);
            int v113 = *(_DWORD *)(v104 + 22872);
            int v114 = *(unsigned __int8 *)(v104 + 23172);
            int v115 = *(_DWORD *)(a1 + 3080);
            if (*(unsigned char *)(a1 + 10))
            {
              int v116 = *(_DWORD *)(a1 + 9072);
              if (v114 > v116) {
                goto LABEL_294;
              }
            }
            else
            {
              int v117 = *(_DWORD *)(a1 + 3024);
              int v118 = v109;
              if (v109 != v117)
              {
                int v225 = DWORD1(v109);
LABEL_334:
                LODWORD(v12) = v217;
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_25;
                }
                int v196 = *(_DWORD *)(a1 + 3028);
                *(_DWORD *)buf = 67110144;
                *(_DWORD *)&uint8_t buf[4] = v217;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v117;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v196;
                *(_WORD *)&unsigned char buf[20] = 1024;
                *(_DWORD *)&buf[22] = v118;
                *(_WORD *)&buf[26] = 1024;
                *(_DWORD *)&unsigned char buf[28] = v225;
                uint64_t v19 = &_os_log_internal;
                uint64_t v20 = "AppleAVD: #### <WARNING> Frame resolution change not supported Frame %d old %d %d new %d %d";
                uint32_t v21 = 32;
                goto LABEL_24;
              }
              if (DWORD1(v109) != *(_DWORD *)(a1 + 3028))
              {
                int v225 = DWORD1(v109);
                int v117 = v109;
                goto LABEL_334;
              }
              int v116 = *(_DWORD *)(a1 + 9072);
              if (v114 > v116)
              {
LABEL_294:
                LODWORD(v12) = v217;
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_25;
                }
                int v186 = *(unsigned __int8 *)(*(void *)(a1 + 8304) + 104 * *(unsigned int *)(a1 + 3084) + 35);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = v116;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v114;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v186;
                uint64_t v19 = &_os_log_internal;
                uint64_t v20 = "AppleAVD: #### <WARNING> DPB Size Requirement Changed: origDpbSize: %d -> curDpbSize: %d, prevDpbSize: %d";
                uint32_t v21 = 20;
                goto LABEL_24;
              }
              int v119 = *(_DWORD *)(a1 + 3036);
              if (v105 != v119)
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_234;
                }
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v105;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v119;
                int v162 = &_os_log_internal;
                unsigned int v163 = "AppleAVD: #### <WARNING> Chroma format Changed: %d -> %d";
LABEL_347:
                uint32_t v164 = 14;
                goto LABEL_233;
              }
              int v120 = *(_DWORD *)(a1 + 3032);
              if (v107 != v120)
              {
                int v197 = v107;
                int v198 = v108;
                goto LABEL_341;
              }
              if (v108 != *(_DWORD *)(a1 + 9064))
              {
                int v198 = v108;
                int v197 = v107;
                int v120 = v107;
LABEL_341:
                LODWORD(v12) = v217;
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_25;
                }
                int v199 = *(_DWORD *)(a1 + 9064);
                *(_DWORD *)buf = 67109888;
                *(_DWORD *)&uint8_t buf[4] = v197;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v120;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v198;
                *(_WORD *)&unsigned char buf[20] = 1024;
                *(_DWORD *)&buf[22] = v199;
                uint64_t v19 = &_os_log_internal;
                uint64_t v20 = "AppleAVD: #### <WARNING> Bit depth changed: new_bit_depth_luma_minus8:%d m_orig_bit_depth_luma_min"
                      "us8:%d new_bit_depth_chroma_minus8:%d m_orig_bit_depth_chroma_minus8:%d";
                uint32_t v21 = 26;
LABEL_24:
                _os_log_impl(&dword_223977000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
                goto LABEL_25;
              }
              int v121 = *(_DWORD *)(a1 + 9068);
              if (v113 != v121)
              {
                int v200 = v113;
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_234;
                }
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v200;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v121;
                int v162 = &_os_log_internal;
                unsigned int v163 = "AppleAVD: #### <WARNING> CTB size changed new_CtbSizeY:%d m_orig_CtbSizeY:%d";
                goto LABEL_347;
              }
              int v122 = *(unsigned __int8 *)(a1 + 9076);
              if (v106 != v122)
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_234;
                }
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v106;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v122;
                int v162 = &_os_log_internal;
                unsigned int v163 = "AppleAVD: #### <WARNING> new_separate_colour_plane_flag:%d m_orig_separate_colour_plane_flag:%d";
                goto LABEL_347;
              }
            }
            uint64_t v123 = *(unsigned int *)(a1 + 3084);
            uint64_t v124 = *(void *)(a1 + 8304);
            if (*(_DWORD *)(*(void *)(a1 + 9040) + 4 * v123)) {
              BOOL v125 = *(unsigned __int8 *)(v124 + 104 * v123 + 32) != v105
            }
                  || v106 != *(unsigned __int8 *)(v124 + 104 * v123 + 30)
                  || *(unsigned __int8 *)(v124 + 104 * v123 + 33) != v107
                  || *(unsigned __int8 *)(v124 + 104 * v123 + 34) != v108
                  || (void)v109 != *(void *)(v124 + 104 * v123)
                  || v113 != *(_DWORD *)(v124 + 104 * v123 + 24);
            else {
              BOOL v125 = 0;
            }
            uint64_t v126 = v124 + 104 * v123;
            *((void *)&v109 + 1) = v111;
            *(_OWORD *)uint64_t v126 = v109;
            *(void *)(v126 + 16) = v112;
            *(_DWORD *)(v126 + 24) = v113;
            *(unsigned char *)(v126 + 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v106;
            *(unsigned char *)(v126 + 31) = v110;
            *(unsigned char *)(v126 + 32) = v105;
            *(unsigned char *)(v126 + 33) = v107;
            *(unsigned char *)(v126 + 34) = v108;
            *(unsigned char *)(v126 + 35) = v114;
            *(unsigned char *)(v126 + 36) = v115;
            (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 96))(a1, 22, 0);
            memset(&buf[8], 0, 172);
            int v127 = *v86;
            *(_DWORD *)buf = v127;
            int v128 = (_DWORD *)(v211 + 9856 * v209);
            unsigned int v129 = v128[14];
            *(_DWORD *)&uint8_t buf[4] = v129;
            if (v129 + 1 > 1) {
              unsigned int v130 = v129 + 1;
            }
            else {
              unsigned int v130 = 1;
            }
            memcpy(&buf[8], v128 + 17, 4 * v130);
            unsigned int v131 = v128[15];
            *(_DWORD *)&buf[88] = v131;
            if (v131 + 1 > 1) {
              unsigned int v132 = v131 + 1;
            }
            else {
              unsigned int v132 = 1;
            }
            memcpy(&buf[92], v128 + 37, 4 * v132);
            uint64_t v133 = *(unsigned int *)(a1 + 3084);
            uint64_t v134 = *(void *)(a1 + 8312);
            if (*(_DWORD *)(*(void *)(a1 + 9048) + 4 * v133))
            {
              if (*(_DWORD *)(v134 + 180 * v133) == v127)
              {
                unsigned int v135 = v201;
                int v136 = v125;
                if (v129 == *(_DWORD *)(v134 + 180 * v133 + 4))
                {
                  if (v131 != *(_DWORD *)(v134 + 180 * v133 + 88)) {
                    goto LABEL_200;
                  }
                  int v137 = 0;
                  unsigned int v138 = 1;
                  do
                  {
                    if (*(_DWORD *)&buf[4 * v138 + 4] != *(_DWORD *)(v134
                                                                    + 180 * v133
                                                                    + 4 * (v138 - 1)
                                                                    + 8))
                      int v137 = 1;
                    if (v138 > v129) {
                      break;
                    }
                    ++v138;
                  }
                  while ((v137 & 1) == 0);
                  if (v137)
                  {
LABEL_200:
                    int v140 = 1;
                  }
                  else
                  {
                    unsigned int v139 = 1;
                    do
                    {
                      if (*(_DWORD *)&buf[4 * v139 + 88] != *(_DWORD *)(v134
                                                                       + 180 * v133
                                                                       + 4 * (v139 - 1)
                                                                       + 92))
                        int v137 = 1;
                      int v140 = v137;
                      if (v139 > v131) {
                        break;
                      }
                      ++v139;
                    }
                    while (!v137);
                  }
                }
                else
                {
                  int v140 = 1;
                }
              }
              else
              {
                int v140 = 1;
                unsigned int v135 = v201;
                int v136 = v125;
              }
              BOOL v141 = v140 != 0;
            }
            else
            {
              BOOL v141 = 0;
              unsigned int v135 = v201;
              int v136 = v125;
            }
            uint64_t v142 = v134 + 180 * v133;
            *(_OWORD *)(v142 + 128) = *(_OWORD *)&buf[128];
            *(_OWORD *)(v142 + 144) = *(_OWORD *)&buf[144];
            *(_OWORD *)(v142 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)&buf[160];
            *(_DWORD *)(v142 + 176) = *(_DWORD *)&buf[176];
            *(_OWORD *)(v142 + 64) = *(_OWORD *)&buf[64];
            *(_OWORD *)(v142 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)&buf[80];
            *(_OWORD *)(v142 + 96) = *(_OWORD *)&buf[96];
            *(_OWORD *)(v142 + 112) = *(_OWORD *)&buf[112];
            *(_OWORD *)uint64_t v142 = *(_OWORD *)buf;
            *(_OWORD *)(v142 + 16) = *(_OWORD *)&buf[16];
            *(_OWORD *)(v142 + 32) = *(_OWORD *)&buf[32];
            *(_OWORD *)(v142 + 48) = *(_OWORD *)&buf[48];
            int v143 = v136 | v141;
            if ((v136 | v141) == 1)
            {
              int v144 = AppleAVDCommandBuilder::waitNumInFlight(*(AppleAVDCommandBuilder **)(a1 + 2344), 1u);
              if (v144)
              {
                int v145 = v144;
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)int v235 = 136315394;
                  uint64_t v236 = "VADecodeFrame";
                  __int16 v237 = 1024;
                  int v238 = v145;
                  _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s(): timeout status: %d", v235, 0x12u);
                }
              }
            }
            uint64_t v146 = *(unsigned int *)(a1 + 3084);
            if (((*(_DWORD *)(*(void *)(a1 + 9040) + 4 * v146) != 0) & ~v136) == 0)
            {
              (*(void (**)(void))(**(void **)(a1 + 2096) + 136))(*(void *)(a1 + 2096));
              *(_DWORD *)(*(void *)(a1 + 9040) + 4 * *(unsigned int *)(a1 + 3084)) = 0;
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 2096) + 128))(*(void *)(a1 + 2096), v213))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)int v235 = 136315138;
                  uint64_t v236 = "virtual int CAVDMvHevcDecoder::VADecodeFrame(unsigned char *, int, uint32_t, int, int, int, avd_seq_params *)";
                  unsigned int v190 = &_os_log_internal;
                  int v191 = "AppleAVD: %s fail to allocate work buffer for sps";
                  goto LABEL_327;
                }
LABEL_328:
                int v24 = 304;
                goto LABEL_235;
              }
              *(_DWORD *)(*(void *)(a1 + 9040) + 4 * *(unsigned int *)(a1 + 3084)) = 1;
              uint64_t v146 = *(unsigned int *)(a1 + 3084);
            }
            int v147 = v136;
            uint64_t v148 = v211 + 9856 * v209;
            if (*(_DWORD *)(*(void *)(a1 + 9048) + 4 * v146)) {
              int v149 = v147;
            }
            else {
              int v149 = 1;
            }
            if ((v149 | v141) == 1)
            {
              (*(void (**)(void, void))(**(void **)(a1 + 2096) + 152))(*(void *)(a1 + 2096), 0);
              *(_DWORD *)(*(void *)(a1 + 9048) + 4 * *(unsigned int *)(a1 + 3084)) = 0;
              if ((*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 2096) + 144))(*(void *)(a1 + 2096), v213, v148, 0))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)int v235 = 136315138;
                  uint64_t v236 = "virtual int CAVDMvHevcDecoder::VADecodeFrame(unsigned char *, int, uint32_t, int, int, int, avd_seq_params *)";
                  unsigned int v190 = &_os_log_internal;
                  int v191 = "AppleAVD: %s fail to allocate work buffer for pps";
LABEL_327:
                  _os_log_impl(&dword_223977000, v190, OS_LOG_TYPE_DEFAULT, v191, v235, 0xCu);
                }
                goto LABEL_328;
              }
              *(_DWORD *)(*(void *)(a1 + 9048) + 4 * *(unsigned int *)(a1 + 3084)) = 1;
            }
            int v210 = (unsigned char *)(v211 + 9856 * v209);
            int v150 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 320))(a1, v148, *(void *)(a1 + 8296) + 2360 * v215, v212);
            if (v150)
            {
              int v189 = v150;
              LODWORD(v12) = v217;
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)int v235 = 136315394;
                uint64_t v236 = "VADecodeFrame";
                __int16 v237 = 1024;
                int v238 = v189;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): fail to create reference picture list - result: %d\n", v235, 0x12u);
              }
              if (v189 == 410) {
                int v24 = 410;
              }
              else {
                int v24 = 305;
              }
              goto LABEL_26;
            }
            uint64_t v16 = v143 | v135;
            uint64_t v218 = (v218 + 1);
            unsigned int v42 = v203;
            unsigned int v60 = v204;
            break;
          case 0x20u:
            unsigned int v151 = v60;
            unsigned int v152 = v42;
            if ((HEVC_RBSP::parseVPS(*(int8x8_t **)(a1 + 3112), v221, 1, 1) & 1) == 0)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_264;
              }
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VADecodeFrame";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v220;
              uint64_t v179 = &_os_log_internal;
              unsigned int v180 = "AppleAVD: %s parse VPS error ! %d";
              goto LABEL_331;
            }
            v223[1376] = 0;
            goto LABEL_228;
          case 0x21u:
            unsigned int v153 = v60;
            unsigned int v154 = v42;
            unsigned int v155 = HEVC_RBSP::parseSPS(*(int8x8_t **)(a1 + 3112), (uint64_t)v221, *(void *)(a1 + 8280), v231, 1);
            if ((v155 & 0x80000000) != 0)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_264;
              }
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VADecodeFrame";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v220;
              uint64_t v179 = &_os_log_internal;
              unsigned int v180 = "AppleAVD: %s parse SPS error ! %d";
              goto LABEL_331;
            }
            unsigned int v156 = v155;
            if (CAVDAvxDecoder::queueTrace((CAVDAvxDecoder *)a1)) {
              goto LABEL_264;
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 416))(a1, *(void *)(a1 + 8280) + 23176 * v156);
            *(_DWORD *)(*(void *)(a1 + 8280) + 23176 * v156 + 23172) = CAVDHevcDecoder::DpbMaxSize(a1, (unsigned int *)(*(void *)(a1 + 8280)+ 23176 * v156));
            unsigned int v42 = v154;
            unsigned int v60 = v153;
            break;
          case 0x22u:
            unsigned int v151 = v60;
            unsigned int v152 = v42;
            unsigned int v157 = HEVC_RBSP::parsePPS(*(int8x8_t **)(a1 + 3112), *(void *)(a1 + 8288), *(void *)(a1 + 8280));
            if ((v157 & 0x80000000) != 0)
            {
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_264;
              }
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VADecodeFrame";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v220;
              uint64_t v179 = &_os_log_internal;
              unsigned int v180 = "AppleAVD: %s parse PPS error ! %d";
              goto LABEL_331;
            }
            if (*(unsigned char *)(*(void *)(a1 + 8288) + 9856 * v157 + 6465))
            {
              char v158 = CAVDAvxDecoder::queueTrace((CAVDAvxDecoder *)a1);
              unsigned int v42 = v152;
              unsigned int v60 = v151;
              if (v158) {
                goto LABEL_264;
              }
            }
            else
            {
LABEL_228:
              unsigned int v42 = v152;
              unsigned int v60 = v151;
            }
            break;
          case 0x24u:
            *(_DWORD *)(*(void *)(a1 + 9088) + 4 * *(unsigned int *)(a1 + 3084)) = 1;
            unsigned int v159 = v60;
            unsigned int v160 = v42;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 408))(a1, 0x7FFFFFFFLL);
            unsigned int v60 = v159;
            unsigned int v42 = v160;
            break;
          default:
            break;
        }
      }
      unsigned int v45 = (unsigned int *)((char *)v222 + v42);
      unsigned int v43 = v220 + v60;
      uint64_t v31 = *(int *)(a1 + 3108);
      unint64_t v44 = v207;
      uint64_t v12 = v217;
      a6 = v208;
      uint64_t v32 = v218;
      if ((unint64_t)v45 + v31 > v207)
      {
        uint64_t v34 = v213;
        uint64_t v33 = v210;
        if (v216)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "VADecodeFrame";
            uint64_t v19 = &_os_log_internal;
            uint64_t v20 = "AppleAVD: ERROR: %s(): mvhevc - unpermitted non-VCL NAL following last VCL NAL\n";
            goto LABEL_13;
          }
LABEL_25:
          int v24 = 305;
          goto LABEL_26;
        }
LABEL_57:
        if (a8)
        {
          uint64_t v35 = *(void *)(a1 + 8304) + 104 * *(unsigned int *)(a1 + 3084);
          long long v37 = *(_OWORD *)(v35 + 64);
          long long v36 = *(_OWORD *)(v35 + 80);
          long long v38 = *(_OWORD *)(v35 + 48);
          *(void *)(a8 + 96) = *(void *)(v35 + 96);
          *(_OWORD *)(a8 + 64) = v37;
          *(_OWORD *)(a8 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v36;
          *(_OWORD *)(a8 + 48) = v38;
          long long v39 = *(_OWORD *)v35;
          long long v40 = *(_OWORD *)(v35 + 32);
          *(_OWORD *)(a8 + 16) = *(_OWORD *)(v35 + 16);
          *(_OWORD *)(a8 + 32) = v40;
          *(_OWORD *)a8 = v39;
        }
        if (!v32)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "VADecodeFrame";
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): slice count for frame is 0", buf, 0xCu);
          }
          int v24 = 403;
          goto LABEL_26;
        }
        BOOL v41 = v33[51] == 1 && v33[33] == 1;
        *(unsigned char *)(a1 + 2816) = v41;
        *(unsigned char *)(a1 + 2817) = *(unsigned char *)(v34 + 10650) == 1;
        *(_DWORD *)(a1 + 2812) = v32;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 328))(a1, v34, a1 + 3648, v32))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "VADecodeFrame";
            __int16 v165 = &_os_log_internal;
            uint64_t v166 = "AppleAVD: %s(): createDPB fail";
            uint32_t v167 = 12;
            goto LABEL_243;
          }
          goto LABEL_244;
        }
        BOOL v168 = v33[53]
            && !(*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)a1 + 400))(a1, *(unsigned int *)(v34 + 22880), v32);
        *(_DWORD *)(a1 + 3072) = v168;
        while (!(*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)a1 + 384))(a1, v233))
          (*(void (**)(uint64_t, void))(*(void *)a1 + 80))(a1, v234);
        if (!*(unsigned char *)(a1 + 3004)) {
          goto LABEL_300;
        }
        if (!v228)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "vSurfInfoDisp is NULL";
            uint64_t v19 = &_os_log_internal;
            uint64_t v20 = "AppleAVD: ERROR: [CAVDMvHevcDecErr] %s";
            goto LABEL_13;
          }
          goto LABEL_25;
        }
        IOSurfaceRef v169 = IOSurfaceLookup(*(_DWORD *)(v228 + 160));
        if (v169)
        {
          IOSurfaceRef v170 = v169;
          uint64_t v219 = v32;
          unint64_t SizeOfPlane = IOSurfaceGetSizeOfPlane();
          CFRelease(v170);
          int v171 = *(_DWORD *)(a1 + 3008);
          uint64_t v172 = *(void *)(a1 + 8280);
          int v173 = *(_DWORD *)(a1 + 8320);
          int v174 = *(_DWORD *)(v172 + 23176 * v173 + 3608);
          unsigned int v217 = v12;
          if (__CFADD__(v171, v174 - 1))
          {
            unint64_t v175 = 0;
            unsigned int v176 = 0;
            LODWORD(v177) = 0;
            int v178 = 1;
          }
          else
          {
            unsigned int v183 = *(_DWORD *)(a1 + 3012);
            int v184 = *(_DWORD *)(v172 + 23176 * v173 + 3612) - 1;
            unsigned int v176 = v183 + v184;
            if (!__CFADD__(v183, v184))
            {
              char v202 = v16;
              uint64_t v16 = a6;
              unint64_t v177 = *(unsigned int *)(v228 + 84) * (unint64_t)v176;
              if ((v177 & 0xFFFFFFFF00000000) != 0)
              {
                unint64_t v175 = 0;
                int v178 = 4;
                goto LABEL_322;
              }
              unint64_t v175 = v177 + (unint64_t)(v171 + v174 - 1);
              if (v175 >= SizeOfPlane)
              {
                int v178 = 6;
                goto LABEL_322;
              }
              uint64_t v12 = v217;
              a6 = v16;
              LOBYTE(v16) = v202;
              uint64_t v32 = v219;
              if (CAVDDecoder::calcLumaChromaTileOffset((CAVDDecoder *)a1, v171, v183, *(_DWORD *)(*(void *)(a1 + 8360) + 76), *(_DWORD *)(*(void *)(a1 + 8360) + 80), *(unsigned __int8 *)(a1 + 3752), (unsigned int *)(a1 + 3016), (unsigned int *)(a1 + 3020)))
              {
LABEL_300:
                if (*(unsigned char *)(a1 + 2356)) {
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 208))(a1, v12, a6);
                }
                int v187 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 296))(a1, v32, v12, v16 & 1);
                (*(void (**)(uint64_t, void))(*(void *)a1 + 240))(a1, 0);
                uint64_t v188 = *(void *)(a1 + 2096);
                *(_DWORD *)(v188 + 12) = v32;
                AppleAVDCommandBuilder::setDecodeBufferSections(*(void *)(a1 + 2344), v188 + 8);
                if (*(unsigned char *)(a1 + 2356)) {
                  *(_DWORD *)(a1 + 2332) = CAHDec::getDecBufIndex(*(CAHDec **)(a1 + 2096));
                }
                if (!v187) {
                  return 0;
                }
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_25;
                }
                *(_DWORD *)buf = 136315138;
                *(void *)&uint8_t buf[4] = "VADecodeFrame";
                uint64_t v19 = &_os_log_internal;
                uint64_t v20 = "AppleAVD: %s(): DecodePicture fail";
              }
              else
              {
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_25;
                }
                *(_DWORD *)buf = 136315138;
                *(void *)&uint8_t buf[4] = "VADecodeFrame";
                uint64_t v19 = &_os_log_internal;
                uint64_t v20 = "AppleAVD: %s(): calcLumaChromaTileOffset returns fail";
              }
LABEL_13:
              uint32_t v21 = 12;
              goto LABEL_24;
            }
            unint64_t v175 = 0;
            LODWORD(v177) = 0;
            int v178 = 2;
          }
LABEL_322:
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_324;
          }
          int v192 = *(_DWORD *)(a1 + 3012);
          int v193 = *(_DWORD *)(v172 + 23176 * v173 + 3612);
          int v194 = *(_DWORD *)(v228 + 84);
          *(_DWORD *)buf = 67111680;
          *(_DWORD *)&uint8_t buf[4] = v171;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v192;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v174;
          *(_WORD *)&unsigned char buf[20] = 1024;
          *(_DWORD *)&buf[22] = v193;
          *(_WORD *)&buf[26] = 1024;
          *(_DWORD *)&unsigned char buf[28] = v194;
          *(_WORD *)&uint8_t buf[32] = 2048;
          *(void *)&buf[34] = v175;
          *(_WORD *)&buf[42] = 2048;
          *(void *)&buf[44] = SizeOfPlane;
          *(_WORD *)&buf[52] = 1024;
          *(_DWORD *)&buf[54] = v178;
          *(_WORD *)&buf[58] = 1024;
          *(_DWORD *)&buf[60] = v171 + v174 - 1;
          *(_WORD *)&buf[64] = 1024;
          *(_DWORD *)&buf[66] = v176;
          *(_WORD *)&buf[70] = 1024;
          *(_DWORD *)&buf[72] = v177;
          int v162 = &_os_log_internal;
          unsigned int v163 = "AppleAVD: tile offset out of bounds! [%u %u] + [%u %u], %u, %zu >= %zu ?, %u; %u %u %u";
          uint32_t v164 = 76;
LABEL_233:
          _os_log_impl(&dword_223977000, v162, OS_LOG_TYPE_DEFAULT, v163, buf, v164);
          goto LABEL_234;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_25;
        }
        *(_WORD *)buf = 0;
        uint64_t v19 = &_os_log_internal;
        uint64_t v20 = "AppleAVD: bad IOSurface* in tile offset check";
LABEL_23:
        uint32_t v21 = 2;
        goto LABEL_24;
      }
      goto LABEL_63;
    }
    ++v59;
  }
  while (*(_DWORD *)(a1 + 3836) >= v59);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "VADecodeFrame";
    int v162 = &_os_log_internal;
    unsigned int v163 = "AppleAVD: %s layer id not found in vps_layer_id_in_nuh";
    goto LABEL_232;
  }
LABEL_234:
  int v24 = 305;
LABEL_235:
  LODWORD(v12) = v217;
LABEL_26:
  if (*(unsigned char *)(a1 + 2832))
  {
    *(unsigned char *)(a1 + 2833) = 0;
    if (v24 == 410) {
      return 410;
    }
    else {
      return 305;
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v24;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: SETTING m_skipToIdr TRUE! fno=%d, err=%d", buf, 0xEu);
    }
    *(unsigned char *)(a1 + 2833) = 1;
    CAVDMvHevcDecoder::flushMV_RLM((CAVDMvHevcDecoder *)a1);
    return 406;
  }
}

uint64_t CAVDMvHevcDecoder::initOutputDecodeLayerSetInfo(CAVDMvHevcDecoder *this)
{
  uint64_t v2 = *((unsigned int *)this + 2609);
  if (v2 == -1)
  {
    uint64_t v2 = *((unsigned int *)this + *((unsigned int *)this + 771) + 2897);
    *((_DWORD *)this + 2609) = v2;
  }
  *((_DWORD *)this + 261pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = HEVC_RBSP::convOlsIdxToLsIdx(*((void *)this + 389), (uint64_t)this + 3824, v2);
  uint64_t result = HEVC_RBSP::decodeTargetLayerIdlist(*((void *)this + 389), (uint64_t)this + 3824, *((_DWORD *)this + 2609));
  *((void *)this + 1308) = result;
  *((_DWORD *)this + 2613) = *(_DWORD *)(*((void *)this + 1035) + 23176 * *((int *)this + 2080) + 4);
  *((_DWORD *)this + 2612) = *((_DWORD *)this + *((unsigned int *)this + 771) + 2961);
  if (!*((unsigned char *)this + 3832))
  {
    if (*((unsigned char *)this + 3833))
    {
      unsigned int v4 = *((_DWORD *)this + 2610);
      if ((v4 & 0x80000000) == 0 && v4 <= *((_DWORD *)this + 2051))
      {
        uint64_t v5 = (*((_DWORD *)this + 2050) + 1);
        uint64_t v6 = (char *)this + 10602;
        do
        {
          *uint64_t v6 = 0;
          *(v6 - 64) = 0;
          ++v6;
          --v5;
        }
        while (v5);
      }
    }
  }
  return result;
}

BOOL CAVDMvHevcDecoder::InitMultiViewDpbInfo(CAVDMvHevcDecoder *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((int *)this + 2613);
  unsigned int v2 = *((_DWORD *)this + 960);
  if (v1 > v2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 136315138;
      uint64_t v18 = "InitMultiViewDpbInfo";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): m_highestTid > vps_max_sub_layers_minus1\n", (uint8_t *)&v17, 0xCu);
    }
  }
  else
  {
    unsigned int v4 = (void *)*((void *)this + 1034);
    uint64_t v5 = *((int *)this + 2609);
    int v6 = *(_DWORD *)(*(void *)(v4[492] + 8 * v5) + 4 * v1);
    *((_DWORD *)this + 2667) = v6;
    LODWORD(v5) = *(_DWORD *)(*(void *)(v4[493] + 8 * v5) + 4 * v1);
    *((_DWORD *)this + 2668) = v5;
    *((_DWORD *)this + 2669) = v6 + v5 - 1;
    memset_pattern16((char *)this + 10680, &unk_223AD0760, 0x100uLL);
    uint64_t v7 = 0;
    uint64_t v8 = v4[64];
    uint64_t v9 = *((int *)this + 2610);
    uint64_t v10 = *(unsigned __int16 *)(v4[482] + 2 * v9);
    uint64_t v11 = (*((_DWORD *)this + 959) + 1);
    do
    {
      if (v10)
      {
        uint64_t v12 = 0;
        int v13 = *(char *)(v8 + 28 * v7 + 26);
        uint64_t v14 = *(void *)(v4[481] + 8 * v9);
        unint64_t v15 = (_DWORD *)((char *)this + 4 * *((unsigned __int16 *)v4 + *(char *)(v8 + 28 * v7 + 26) + 290) + 10680);
        do
        {
          if (*(unsigned __int16 *)(v14 + 2 * v12) == v13) {
            *unint64_t v15 = *(_DWORD *)(*(void *)(*(void *)(v4[491] + 8 * v9) + 8 * v12) + 4 * v1);
          }
          ++v12;
        }
        while (v10 != v12);
      }
      ++v7;
    }
    while (v7 != v11);
  }
  return v1 <= v2;
}

uint64_t CAVDMvHevcDecoder::DecodePicture(CAVDMvHevcDecoder *this, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(**((void **)this + 262) + 16))(*((void *)this + 262), a3, a2))
  {
    return 1;
  }
  (*(void (**)(void))(**((void **)this + 262) + 32))(*((void *)this + 262));
  (*(void (**)(void))(**((void **)this + 262) + 48))(*((void *)this + 262));
  if ((*(unsigned int (**)(void))(**((void **)this + 262) + 56))(*((void *)this + 262))
    || (*(unsigned int (**)(void, uint64_t))(**((void **)this + 262) + 24))(*((void *)this + 262), a2))
  {
    return 4;
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 262) + 88))(*((void *)this + 262), a2);
  (*(void (**)(void, void))(**((void **)this + 262) + 40))(*((void *)this + 262), *((unsigned int *)this + 910));
  return 0;
}

uint64_t CAVDMvHevcDecoder::initPicture(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, _DWORD *a5, unint64_t a6, int a7)
{
  int v13 = a3[1];
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)a6 = 0u;
  int v14 = a3[4];
  int v15 = a3[3] - 1;
  *(_DWORD *)(a6 + 4) = v13;
  *(_DWORD *)(a6 + 8) = v15;
  *(_DWORD *)(a6 + 16) = a5[8];
  uint64_t v16 = *(void *)(a1 + 8344);
  *(void *)(a6 + 48) = v16;
  int v17 = *(_DWORD *)(a1 + 3088);
  *(_DWORD *)(a6 + 28) = *(_DWORD *)(a1 + 3080);
  *(_DWORD *)(a6 + 32) = v17;
  int v18 = *(_DWORD *)(a1 + 8340);
  *(_DWORD *)(a6 + 64) = v18;
  *(_DWORD *)(a6 + 36) = v14;
  if (*(_DWORD *)(a1 + 2644))
  {
    uint64_t v16 = *(void *)(a1 + 8360);
    int v18 = *(_DWORD *)(a1 + 8356);
  }
  *(void *)(a6 + 56) = v16;
  *(_DWORD *)(a6 + 68) = v18;
  *(unsigned char *)(a6 + 104) = *(_DWORD *)(a4 + 3600);
  *(unsigned char *)(a6 + 102) = *(unsigned char *)(a4 + 3604);
  *(void *)&long long v19 = *(void *)(a4 + 3608);
  *(unsigned char *)(a6 + 103) = *(unsigned char *)(a4 + 3616);
  *((void *)&v19 + 1) = *(void *)(a4 + 3620);
  *(_OWORD *)(a6 + 72) = v19;
  *(void *)(a6 + 88) = *(void *)(a4 + 3628);
  *(unsigned char *)(a6 + 105) = *(_DWORD *)(a4 + 3636);
  *(unsigned char *)(a6 + 106) = *(_DWORD *)(a4 + 3640);
  uint64_t v20 = (unsigned char *)(a1 + 9096);
  if (*(unsigned char *)(a1 + 9096))
  {
    CAVDMvHevcDecoder::checkNewPocResettingPeriod(a1, (uint64_t)a3, (uint64_t)a5);
    if (CAVDMvHevcDecoder::deriveMvHevcOutputControlFlags(a1, (uint64_t)a3, (uint64_t)a5, (unsigned char *)a6, a7)) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    CAVDHevcDecoder::deriveHevcOutputControlFlags(a1, (uint64_t)a3, (uint64_t)a5, a6, a7);
  }
  int v21 = *(_DWORD *)(a1 + 3080);
  if (*v20)
  {
    *(_DWORD *)(a6 + 12) = CAVDMvHevcDecoder::decodeMultiViewPictureOrderCount(a1, a4);
    CAVDMvHevcDecoder::handlePOCResetPicture(a1);
  }
  else
  {
    *(_DWORD *)(a6 + 12) = HEVC_RLM::decodePicOrderCnt(*(_DWORD **)(a1 + 8 * *(unsigned int *)(a1 + 3084) + 3128), (uint64_t)a3, a4, (uint64_t)a5, *(unsigned __int8 *)(a6 + 1));
  }
  uint64_t v22 = *(unsigned int *)(a1 + 3084);
  uint64_t result = 0xFFFFFFFFLL;
  if (v22 <= *(_DWORD *)(a1 + 8200) && (v21 & 0x80000000) == 0)
  {
    HEVC_RLM::decodeReferencePictureSet(*(void *)(a1 + 8 * v22 + 3128), a6, a4, a5);
    *(void *)&long long v25 = -1;
    *((void *)&v25 + 1) = -1;
    *(_OWORD *)(a1 + 8488) = v25;
    *(_OWORD *)(a1 + 8504) = v25;
    *(_OWORD *)(a1 + 8456) = v25;
    *(_OWORD *)(a1 + 8472) = v25;
    *(_DWORD *)(a1 + 872pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_OWORD *)(a1 + 852pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *(_OWORD *)(a1 + 8536) = 0u;
    *(_OWORD *)(a1 + 8552) = 0u;
    *(_OWORD *)(a1 + 8568) = 0u;
    if (*v20)
    {
      if (CAVDMvHevcDecoder::mvhevcOutputBumping((CAVDMvHevcDecoder *)a1, (uint64_t)a3, v24, (uint64_t)a5, a6))return 0xFFFFFFFFLL; {
    }
      }
    else
    {
      CAVDHevcDecoder::hevcOutputBumping((HEVC_RLM **)a1, (uint64_t)a3, a4, (uint64_t)a5, a6);
    }
    return 0;
  }
  return result;
}

uint64_t CAVDMvHevcDecoder::checkNewPocResettingPeriod(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 1893))
  {
    *(_DWORD *)(result + 4 * *(unsigned int *)(result + 3084) + 10936) = *(_DWORD *)(a3 + 304);
    int v3 = *(_DWORD *)(a3 + 304);
  }
  else
  {
    *(_DWORD *)(a3 + 304) = 0;
    int v3 = *(_DWORD *)(result + 4 * *(unsigned int *)(result + 3084) + 10936);
    if (v3 == 0x80000000) {
      int v3 = 0;
    }
    *(_DWORD *)(a3 + 304) = v3;
  }
  if (*(unsigned char *)(result + 11584)) {
    unsigned int v4 = 0x80000000;
  }
  else {
    unsigned int v4 = *(_DWORD *)(result + 11580);
  }
  if ((*(_DWORD *)(a3 + 300) - 3) < 0xFFFFFFFE || v4 == v3)
  {
    char v6 = 0;
  }
  else
  {
    *(_OWORD *)(result + 11224) = 0u;
    *(_OWORD *)(result + 1124pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *(_OWORD *)(result + 11192) = 0u;
    *(_OWORD *)(result + 11208) = 0u;
    char v6 = 1;
  }
  *(unsigned char *)(result + 11576) = v6;
  uint64_t v7 = (unsigned char *)(result
               + 11192
               + *(unsigned __int16 *)(*(void *)(result + 8272) + 2 * *(unsigned int *)(a2 + 8) + 580));
  if (*v7)
  {
    *(unsigned char *)(result + 11577) = 0;
  }
  else
  {
    *(unsigned char *)(result + 11577) = 1;
    *uint64_t v7 = 1;
  }
  return result;
}

uint64_t CAVDMvHevcDecoder::deriveMvHevcOutputControlFlags(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, int a5)
{
  int v9 = *(_DWORD *)(a2 + 4);
  unsigned int v10 = v9 & 0xFFFFFFF8;
  if ((v9 & 0xFFFFFFF8) != 0x10) {
    goto LABEL_19;
  }
  uint64_t v11 = *(int *)(a1 + 3080);
  unsigned int v12 = *(_DWORD *)(a1 + 10448);
  if (v11 != v12) {
    goto LABEL_9;
  }
  a4[40] = 0;
  if (*(unsigned char *)(a1 + 12166)) {
    goto LABEL_7;
  }
  int v13 = *(_DWORD **)(a1 + 9088);
  if (*v13 || v13[*(unsigned int *)(a1 + 3084)] || (v9 - 16) < 3) {
    goto LABEL_7;
  }
  if (v9 == 21)
  {
    if (!*(_DWORD *)(a1 + 9056)) {
      goto LABEL_74;
    }
  }
  else if ((v9 - 19) > 1 || !*(unsigned char *)(a3 + 17))
  {
LABEL_74:
    if (!*(_DWORD *)(a1 + 9056)) {
      goto LABEL_9;
    }
  }
LABEL_7:
  a4[40] = 1;
  uint64_t v14 = (*(_DWORD *)(a1 + 8200) + 1);
  int v15 = (unsigned char *)(a1 + 10602);
  do
  {
    *int v15 = 0;
    *(v15 - 64) = 0;
    ++v15;
    --v14;
  }
  while (v14);
LABEL_9:
  if (v11 <= v12)
  {
LABEL_19:
    *(unsigned char *)(a1 + 10666) = 0;
LABEL_20:
    if (!*(_DWORD *)(a1 + 3836)) {
      goto LABEL_28;
    }
    if (v10 != 16)
    {
      a4[1] = 0;
      if (*(_DWORD *)(a1 + 3080)) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
    unsigned int v26 = v9 - 16;
    goto LABEL_23;
  }
  *(unsigned char *)(a1 + 10666) = 0;
  if (*(_DWORD *)(*(void *)(a1 + 9088) + 4 * *(unsigned int *)(a1 + 3084)))
  {
LABEL_11:
    *(unsigned char *)(a1 + 10666) = 1;
    if (v11 == -1) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v16 = *(void *)(a1 + 8272);
    uint64_t v17 = *(unsigned __int16 *)(v16 + 2 * v11 + 580);
    uint64_t v18 = *(unsigned __int16 *)(*(void *)(v16 + 512) + 28 * v17 + 22);
    if (*(_WORD *)(*(void *)(v16 + 512) + 28 * v17 + 22))
    {
      long long v19 = (__int16 *)(*(void *)(*(void *)(v16 + 520) + 8 * v17) + 10);
      do
      {
        uint64_t v20 = *v19;
        v19 += 7;
        uint64_t v21 = a1 + *(unsigned __int16 *)(v16 + 2 * v20 + 580);
        *(unsigned char *)(v21 + 10602) = 0;
        *(unsigned char *)(v21 + 10538) = 0;
        --v18;
      }
      while (v18);
    }
    HEVC_RLM::markAllRefPicturesasUnused(*(void *)(a1 + 8 * v17 + 3128));
    uint64_t v22 = *(void *)(a1 + 8272);
    uint64_t v23 = *(unsigned __int16 *)(v22 + 2 * v11 + 580);
    if (*(_WORD *)(*(void *)(v22 + 512) + 28 * v23 + 22))
    {
      unint64_t v24 = 0;
      uint64_t v25 = 10;
      do
      {
        HEVC_RLM::markAllRefPicturesasUnused(*(void *)(a1
                                                       + 8
                                                       * *(unsigned __int16 *)(v22
                                                                             + 2
                                                                             * *(__int16 *)(*(void *)(*(void *)(v22 + 520) + 8 * v23)
                                                                                          + v25)
                                                                             + 580)
                                                       + 3128));
        ++v24;
        uint64_t v22 = *(void *)(a1 + 8272);
        uint64_t v23 = *(unsigned __int16 *)(v22 + 2 * v11 + 580);
        v25 += 14;
      }
      while (v24 < *(unsigned __int16 *)(*(void *)(v22 + 512) + 28 * v23 + 22));
    }
    goto LABEL_20;
  }
  if (v9 == 21)
  {
    if (*(_DWORD *)(a1 + 9056)) {
      goto LABEL_11;
    }
    goto LABEL_60;
  }
  if ((v9 - 19) <= 1)
  {
    if (*(unsigned char *)(a3 + 17)) {
      goto LABEL_11;
    }
LABEL_60:
    unsigned int v26 = v9 - 16;
    goto LABEL_67;
  }
  unsigned int v26 = v9 - 16;
  if ((v9 - 16) <= 2) {
    goto LABEL_11;
  }
LABEL_67:
  if (!*(_DWORD *)(a1 + 3836))
  {
LABEL_28:
    unsigned int v29 = *(_DWORD *)(a1 + 3080);
    if (v29)
    {
      if (v10 != 16 || !a4[1]) {
        goto LABEL_36;
      }
      goto LABEL_31;
    }
    if (v10 == 16)
    {
      unsigned int v26 = v9 - 16;
LABEL_40:
      if (v26 < 5 || a5)
      {
        a4[1] = 1;
      }
      else
      {
        int v33 = *(unsigned __int8 *)(a1 + 9056);
        a4[1] = v33;
        if (!v33) {
          goto LABEL_50;
        }
      }
      *(unsigned char *)(a1 + *(unsigned int *)(a1 + 3084) + 10602) = 1;
LABEL_50:
      char v31 = *(unsigned char *)(a3 + 24);
      a4[3] = v31;
      uint64_t v32 = a4 + 3;
      goto LABEL_51;
    }
LABEL_44:
    char v31 = *(unsigned char *)(a3 + 24);
    a4[3] = v31;
    uint64_t v32 = a4 + 3;
    *(v32 - 2) = 0;
    goto LABEL_51;
  }
LABEL_23:
  if (v26 < 5
    || (uint64_t v27 = *(unsigned int *)(a1 + 3084), !*(_DWORD *)(*(void *)(a1 + 9080) + 4 * v27))
    || *(_DWORD *)(*(void *)(a1 + 9088) + 4 * v27))
  {
    LOBYTE(v28) = 1;
LABEL_27:
    a4[1] = v28;
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + v27 + 10602)
    || (unsigned int v29 = *(_DWORD *)(a1 + 3080), !CAVDMvHevcDecoder::checkRefLayersInitialized((CAVDMvHevcDecoder *)a1, v29)))
  {
    int v28 = *(_DWORD *)(a1 + 9056);
    goto LABEL_27;
  }
  a4[1] = 1;
  if (!v29) {
    goto LABEL_40;
  }
LABEL_31:
  uint64_t v30 = (unsigned char *)(a1 + 10602 + *(unsigned int *)(a1 + 3084));
  if (!*v30
    && (!*(_WORD *)(*(void *)(*(void *)(a1 + 8272) + 512)
                  + 28 * *(unsigned __int16 *)(*(void *)(a1 + 8272) + 2 * v29 + 580)
                  + 18)
     || CAVDMvHevcDecoder::checkRefLayersInitialized((CAVDMvHevcDecoder *)a1, v29)))
  {
    *uint64_t v30 = 1;
  }
LABEL_36:
  char v31 = *(unsigned char *)(a3 + 24);
  a4[3] = v31;
  uint64_t v32 = a4 + 3;
  if (!*(unsigned char *)(a1 + *(unsigned int *)(a1 + 3084) + 10602)) {
    goto LABEL_54;
  }
LABEL_51:
  if ((v9 & 0xFFFFFFFE) != 8)
  {
    uint64_t result = 0;
    *uint64_t v32 = v31;
    return result;
  }
  uint64_t v34 = *(void *)(*(void *)(a1 + 8 * *(unsigned int *)(a1 + 3084) + 3128) + 2840);
  if (!v34) {
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(v34 + 1))
  {
LABEL_54:
    uint64_t result = 0;
    *uint64_t v32 = 0;
    return result;
  }
  return 0;
}

uint64_t CAVDMvHevcDecoder::decodeMultiViewPictureOrderCount(uint64_t a1, uint64_t a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 11576;
  int v4 = *(_DWORD *)(a1 + 3080);
  uint64_t v5 = *(void *)(a1 + 8296);
  int v6 = *(_DWORD *)(v5 + 2072);
  if (*(unsigned char *)(a1 + 11576))
  {
    *(_OWORD *)(a1 + 11303) = 0u;
    *(_OWORD *)(a1 + 11272) = 0u;
    *(_OWORD *)(a1 + 11288) = 0u;
    *(_OWORD *)(a1 + 11256) = 0u;
  }
  uint64_t v7 = v4;
  uint64_t v8 = *(void *)(a1 + 8272);
  int v9 = *(unsigned __int8 *)(v8 + 746);
  if (*(unsigned char *)(a1 + 11577))
  {
    if (!*(unsigned char *)(v8 + 746))
    {
      memset((char *)v62 + 4, 0, 248);
      unsigned int v15 = 1;
      LODWORD(v62[0]) = v4;
      goto LABEL_15;
    }
    BOOL v10 = *(unsigned __int8 *)(a1 + *(unsigned __int16 *)(v8 + 2 * v4 + 580) + 11256) == 0;
    memset((char *)v62 + 4, 0, 248);
  }
  else
  {
    memset(v62, 0, 252);
    if (!v9)
    {
      LODWORD(v62[0]) = v4;
      unsigned int v15 = 1;
      goto LABEL_51;
    }
    BOOL v10 = 0;
  }
  LODWORD(v62[0]) = v4;
  uint64_t v11 = *(unsigned __int16 *)(*(void *)(v8 + 512) + 28 * *(unsigned __int16 *)(v8 + 2 * v4 + 580) + 22);
  if (!*(_WORD *)(*(void *)(v8 + 512) + 28 * *(unsigned __int16 *)(v8 + 2 * v7 + 580) + 22))
  {
    unsigned int v15 = 1;
    if (v10) {
      goto LABEL_15;
    }
LABEL_51:
    if (*(unsigned char *)(v5 + 340) == 1)
    {
      int v41 = *(_DWORD *)(a2 + 22912) * *(_DWORD *)(v5 + 344);
    }
    else
    {
      if (*(unsigned char *)(a1 + *(unsigned __int16 *)(v8 + 2 * v7 + 580) + 10538)) {
        BOOL v43 = (v6 - 19) >= 2;
      }
      else {
        BOOL v43 = 0;
      }
      if (v43)
      {
        int v44 = *(_DWORD *)(a1 + 4 * v7 + 11320);
        int v45 = *(_DWORD *)(a2 + 22912);
        int v46 = (v45 - 1) & v44;
        int v47 = v44 - v46;
        int v48 = *(_DWORD *)(v5 + 56);
        if (v45 >= 0) {
          int v49 = *(_DWORD *)(a2 + 22912);
        }
        else {
          int v49 = v45 + 1;
        }
        if (v46 - v48 >= v49 >> 1)
        {
          int v41 = v47 + v45;
        }
        else
        {
          if (v48 - v46 <= v49 >> 1) {
            int v45 = 0;
          }
          int v41 = v47 - v45;
        }
      }
      else
      {
        int v41 = 0;
      }
    }
    int v54 = *(_DWORD *)(v5 + 56);
    goto LABEL_77;
  }
  uint64_t v12 = 0;
  int v13 = (__int16 *)(*(void *)(*(void *)(v8 + 520) + 8 * *(unsigned __int16 *)(v8 + 2 * v7 + 580)) + 10);
  do
  {
    int v14 = *v13;
    v13 += 7;
    *((_DWORD *)v62 + ++v12) = v14;
  }
  while (v11 != v12);
  unsigned int v15 = v12 + 1;
  if (!v10) {
    goto LABEL_51;
  }
LABEL_15:
  if (*(unsigned char *)(a1 + *(unsigned __int16 *)(v8 + 2 * v7 + 580) + 10538))
  {
    int v16 = *(_DWORD *)(v5 + 324);
    uint64_t v17 = 56;
    if (v16 == 3) {
      uint64_t v17 = 336;
    }
    int v18 = *(_DWORD *)(v5 + v17);
    int v19 = *(_DWORD *)(a2 + 22912);
    if (*(unsigned char *)(v5 + 340) == 1)
    {
      int v20 = v19 * *(_DWORD *)(v5 + 344);
    }
    else
    {
      int v21 = *(_DWORD *)(a1 + 4 * v7 + 11320);
      int v22 = (v19 - 1) & v21;
      int v23 = v21 - v22;
      int v24 = v22 - v18;
      if (v19 >= 0) {
        int v25 = *(_DWORD *)(a2 + 22912);
      }
      else {
        int v25 = v19 + 1;
      }
      if (v18 - v22 <= v25 >> 1) {
        int v26 = 0;
      }
      else {
        int v26 = *(_DWORD *)(a2 + 22912);
      }
      int v27 = v23 - v26;
      int v20 = v23 + v19;
      if (v24 < v25 >> 1) {
        int v20 = v27;
      }
    }
    int v61 = v6;
    uint64_t v60 = a2;
    if (v16 != 2 && (v16 != 3 || *(unsigned char *)(v5 + 332) != 1)) {
      int v18 = 0;
    }
    int v28 = v18 + v20;
    uint64_t v29 = v15;
    uint64_t v30 = (int *)v62;
    uint64_t v31 = v15;
    do
    {
      uint64_t v32 = *(void *)(a1 + 8272);
      uint64_t v34 = *v30++;
      unsigned int v33 = v34;
      int v35 = *(unsigned __int8 *)(a1 + *(unsigned __int16 *)(v32 + 2 * v34 + 580) + 11256);
      BOOL v36 = (int)v34 >= 1 && v35 == 0;
      if (v36 && *(_DWORD *)(a1 + 8200) >= v33) {
        HEVC_RLM::decrementPOCvalues(*(void *)(a1 + 8 * *(unsigned __int16 *)(v32 + 2 * v33 + 580) + 3128), v28);
      }
      --v31;
    }
    while (v31);
    uint64_t v8 = *(void *)(a1 + 8272);
    long long v37 = (int *)v62;
    do
    {
      uint64_t v38 = *v37++;
      *(unsigned char *)(a1 + *(unsigned __int16 *)(v8 + 2 * v38 + 580) + 11256) = 1;
      --v29;
    }
    while (v29);
    int v6 = v61;
    a2 = v60;
  }
  int v39 = *(_DWORD *)(v5 + 324);
  if (v39 == 2)
  {
    uint64_t result = 0;
  }
  else
  {
    if (v39 != 1)
    {
      int v41 = *(_DWORD *)(v5 + 56);
      if (*(unsigned char *)(v5 + 332)) {
        int v42 = 0;
      }
      else {
        int v42 = *(_DWORD *)(v5 + 336);
      }
      int v50 = *(_DWORD *)(a2 + 22912);
      int v51 = v42 - v41;
      if (v50 >= 0) {
        int v52 = *(_DWORD *)(a2 + 22912);
      }
      else {
        int v52 = v50 + 1;
      }
      if (v41 - v42 <= v52 >> 1) {
        int v53 = 0;
      }
      else {
        int v53 = *(_DWORD *)(a2 + 22912);
      }
      if (v51 < v52 >> 1) {
        int v54 = -v53;
      }
      else {
        int v54 = *(_DWORD *)(a2 + 22912);
      }
LABEL_77:
      uint64_t result = (v54 + v41);
      goto LABEL_78;
    }
    uint64_t result = *(unsigned int *)(v5 + 56);
  }
LABEL_78:
  uint64_t v55 = 0;
  unsigned int v56 = v6 & 0xFFFFFFFE;
  unsigned int v57 = (unsigned __int16 *)(v8 + 2 * v7 + 580);
  do
  {
    if (v56 != 6 && v56 != 8 && (v6 & 0xFFFFFFF1) != 0 && !*(_DWORD *)(v5 + 2076))
    {
      int v58 = result;
      if (!*(unsigned char *)(v5 + 40)) {
        goto LABEL_90;
      }
    }
    if (*(_DWORD *)(v5 + 324) == 3 && (!*(unsigned char *)(a1 + *v57 + 10538) || *(unsigned char *)(v3 + 1)))
    {
      if (*(unsigned char *)(v5 + 332)) {
        int v58 = 0;
      }
      else {
        int v58 = *(_DWORD *)(v5 + 336);
      }
LABEL_90:
      *(_DWORD *)(a1 + 4 * *(int *)((char *)v62 + v55) + 1132pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v58;
    }
    v55 += 4;
  }
  while (4 * v15 != v55);
  unsigned __int16 v59 = (unsigned char *)(a1 + 10538 + *(unsigned int *)(a1 + 3084));
  if (!*v59) {
    *unsigned __int16 v59 = 1;
  }
  return result;
}

void CAVDMvHevcDecoder::handlePOCResetPicture(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*(void *)(a1 + 9080) + 4 * *(unsigned int *)(a1 + 3084)))
  {
    if (*(unsigned char *)(a1 + 11577))
    {
      unint64_t v2 = *(unsigned int *)(a1 + 10432);
      if (v2)
      {
        unint64_t v3 = 0;
        int v4 = &_os_log_internal;
        do
        {
          uint64_t v5 = a1 + 40 * v3;
          unint64_t v6 = *(unsigned int *)(v5 + 9820);
          if (v6)
          {
            unint64_t v7 = 0;
            unint64_t v13 = v3;
            int v14 = (void *)(v5 + 9792);
            uint64_t v8 = (unsigned int *)(v5 + 9820);
            int v9 = (unsigned char *)(a1 + 40 * v3 + 9824);
            do
            {
              if (*v9 && *(_DWORD *)(a1 + 9780))
              {
                unint64_t v10 = 0;
                uint64_t v11 = *(void *)(*v14 + 8 * v7);
                do
                {
                  uint64_t v12 = *(void *)(*(void *)(a1 + 9752) + 8 * v10);
                  if (v12)
                  {
                    if (v11)
                    {
                      if (*(_DWORD *)(v12 + 28) != *(_DWORD *)(v11 + 28) && *(unsigned char *)v11)
                      {
                        if (*(unsigned char *)v12)
                        {
                          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 360))(a1, v11);
                          *(unsigned char *)(v11 + 2) = 0;
                        }
                      }
                    }
                    else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136315138;
                      int v16 = "handlePOCResetPicture";
                      _os_log_impl(&dword_223977000, v4, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): WARNING, frame insertion is aborted because pic=NULL\n", buf, 0xCu);
                    }
                  }
                  ++v10;
                }
                while (v10 < *(unsigned int *)(a1 + 9780));
                unint64_t v6 = *v8;
              }
              ++v7;
            }
            while (v7 < v6);
            unint64_t v2 = *(unsigned int *)(a1 + 10432);
            unint64_t v3 = v13;
          }
          ++v3;
        }
        while (v3 < v2);
      }
    }
  }
}

uint64_t CAVDMvHevcDecoder::mvhevcOutputBumping(CAVDMvHevcDecoder *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  int v6 = *((_DWORD *)this + 770);
  memset(v46, 0, sizeof(v46));
  int v7 = *(_DWORD *)(a2 + 4);
  if (*((unsigned char *)this + 12164)) {
    goto LABEL_2;
  }
  if ((v7 & 0xFFFFFFF8) != 0x10) {
    goto LABEL_19;
  }
  int v13 = *((_DWORD *)this + 2612);
  if (v6 == v13 && *(unsigned char *)(a5 + 1) && *(unsigned char *)(a5 + 40))
  {
LABEL_2:
    LODWORD(v8) = *((_DWORD *)this + 959) + 1;
    int v9 = (char *)(*(void *)(*((void *)this + 1034) + 512) + 26);
    unint64_t v10 = v46;
    uint64_t v11 = v8;
    do
    {
      int v12 = *v9;
      v9 += 28;
      *v10++ = v12;
      --v11;
    }
    while (v11);
    goto LABEL_21;
  }
  uint64_t v14 = *((void *)this + 1034);
  uint64_t v15 = *(void *)(v14 + 512);
  uint64_t v16 = *(unsigned __int16 *)(v14 + 2 * v6 + 580);
  BOOL v17 = *(_WORD *)(v15 + 28 * v16 + 18) || v6 <= v13;
  if (v17 || !*(unsigned char *)(a5 + 1) || !*((unsigned char *)this + 10666))
  {
LABEL_19:
    LODWORD(v46[0]) = v6;
    goto LABEL_20;
  }
  LODWORD(v46[0]) = v6;
  uint64_t v18 = *(unsigned __int16 *)(v15 + 28 * v16 + 22);
  if (!*(_WORD *)(v15 + 28 * v16 + 22))
  {
LABEL_20:
    LODWORD(v8) = 1;
    goto LABEL_21;
  }
  uint64_t v19 = 0;
  int v20 = (__int16 *)(*(void *)(*(void *)(v14 + 520) + 8 * v16) + 10);
  do
  {
    int v21 = *v20;
    v20 += 7;
    *((_DWORD *)v46 + ++v19) = v21;
  }
  while (v18 != v19);
  LODWORD(v8) = v19 + 1;
LABEL_21:
  unsigned int v22 = *((_DWORD *)this + 2608);
  if (v22 >= 0x11)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v42 = 136315394;
      BOOL v43 = "mvhevcOutputBumping";
      __int16 v44 = 1024;
      unsigned int v45 = v22;
      int v23 = &_os_log_internal;
      int v24 = "AppleAVD: %s -- m_numActiveAccessUnits out of range %d";
      uint32_t v25 = 18;
      goto LABEL_24;
    }
    return 0xFFFFFFFFLL;
  }
  if ((v7 & 0xFFFFFFF8) == 0x10)
  {
    if (*(unsigned char *)(a5 + 1))
    {
      int v27 = *((_DWORD *)this + 2612);
      if (v6 == v27
        || v6 > v27
        && !*(_WORD *)(*(void *)(*((void *)this + 1034) + 512)
                     + 28 * *(unsigned __int16 *)(*((void *)this + 1034) + 2 * v6 + 580)
                     + 18))
      {
        if (v7 == 21 || *(unsigned char *)(a4 + 1))
        {
          CAVDMvHevcDecoder::releaseUnusedPicturesFromAllSubDpbs(this);
          if (v8 <= 1) {
            uint64_t v28 = 1;
          }
          else {
            uint64_t v28 = v8;
          }
          uint64_t v29 = (int *)v46;
          while (1)
          {
            uint64_t v31 = *v29++;
            int v30 = v31;
            unsigned int v32 = *(unsigned __int16 *)(*((void *)this + 1034) + 2 * v31 + 580);
            if (*((_DWORD *)this + 959) < v32) {
              break;
            }
            CAVDMvHevcDecoder::removeSubDpbPicturesInAuList(this, v30, v32);
            if (!--v28) {
              return 0;
            }
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v42 = 136315138;
            BOOL v43 = "mvhevcOutputBumping";
            int v23 = &_os_log_internal;
            int v24 = "AppleAVD: %s -- emptyLayer out of range";
            goto LABEL_69;
          }
          return 0xFFFFFFFFLL;
        }
        unsigned int v36 = 0;
        if (v8 <= 1) {
          uint64_t v8 = 1;
        }
        else {
          uint64_t v8 = v8;
        }
        uint64_t v37 = SLODWORD(v46[0]);
LABEL_53:
        uint64_t v38 = *(unsigned __int16 *)(*((void *)this + 1034) + 2 * v37 + 580);
        if (*((_DWORD *)this + 959) >= v38)
        {
          uint64_t v39 = 0;
          BOOL v40 = 1;
          do
          {
            if (v40)
            {
              uint64_t result = HEVC_RLM::getNumberOfPicturesNeededForOutput(*((HEVC_RLM **)this + v38 + 391));
              BOOL v40 = result == 0;
              if (++v39 == v8)
              {
                if (!result) {
                  return result;
                }
LABEL_63:
                BOOL v41 = CAVDMvHevcDecoder::AccessUnitBumpingProcess(this);
                uint64_t result = 0;
                if (!v41) {
                  return result;
                }
                BOOL v35 = v36++ >= 0x10;
                if (v35) {
                  return result;
                }
                goto LABEL_53;
              }
            }
            else
            {
              if (++v39 == v8) {
                goto LABEL_63;
              }
              BOOL v40 = 0;
            }
            uint64_t v38 = *(unsigned __int16 *)(*((void *)this + 1034) + 2 * *((int *)v46 + v39) + 580);
          }
          while (*((_DWORD *)this + 959) >= v38);
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v42 = 136315138;
          BOOL v43 = "mvhevcOutputBumping";
          int v23 = &_os_log_internal;
          int v24 = "AppleAVD: %s -- emptyLayer out of range";
LABEL_69:
          uint32_t v25 = 12;
LABEL_24:
          _os_log_impl(&dword_223977000, v23, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v42, v25);
        }
        return 0xFFFFFFFFLL;
      }
    }
  }
  CAVDMvHevcDecoder::releaseUnusedPicturesFromOneSubDpb(this, v6);
  unsigned int v33 = 0;
  do
  {
    uint64_t result = CAVDMvHevcDecoder::isAuBumpingNeededForNonIRAP(this, v6);
    if (!result) {
      break;
    }
    BOOL v34 = CAVDMvHevcDecoder::AccessUnitBumpingProcess(this);
    uint64_t result = 0;
    if (!v34) {
      break;
    }
    BOOL v35 = v33++ >= 0x10;
  }
  while (!v35);
  return result;
}

uint64_t CAVDMvHevcDecoder::createRefPicList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a3 + 44) <= 1u)
  {
    uint64_t v5 = *(unsigned int **)(a1 + 8 * *(unsigned int *)(a1 + 3084) + 3128);
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    uint64_t result = HEVC_RLM::getReferencePictureList(v5, a3 + 24, (_OWORD *)(a3 + 2088), (_OWORD *)(a3 + 2216));
    if (result) {
      return result;
    }
    unsigned int v7 = *(_DWORD *)(a3 + 44);
    if (v7 <= 1)
    {
      unsigned int v8 = 0;
      unsigned int v9 = *(_DWORD *)(a3 + 620);
      while (2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a3 + 8 * v8 + 2088);
        do
        {
          if (v11 == *(void *)(a1 + 8520 + v10)) {
            goto LABEL_14;
          }
          v10 += 8;
        }
        while (v10 != 64);
        uint64_t v12 = *(unsigned int *)(a1 + 8720);
        if (v12 <= 7)
        {
          if (*(void *)(v11 + 48))
          {
            if (!*(_WORD *)(*(void *)(*(void *)(a1 + 8272) + 512) + 28 * *(unsigned int *)(a1 + 3084) + 10)
              || (uint64_t v13 = *(void *)(a1 + 8280),
                  int v14 = *(_DWORD *)(a1 + 8320),
                  *(_DWORD *)(v11 + 72) == *(_DWORD *)(v13 + 23176 * v14 + 3608))
              && *(_DWORD *)(v11 + 76) == *(_DWORD *)(v13 + 23176 * v14 + 3612))
            {
              *(void *)(a1 + 8 * v12 + 852pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v11;
              *(_DWORD *)(a1 + 872pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v12 + 1;
LABEL_14:
              if (++v8 <= v9) {
                continue;
              }
              if (v7)
              {
                *(void *)(a3 + 2344) = 0;
                uint64_t v15 = (void *)(a3 + 2344);
LABEL_38:
                if (!*(unsigned char *)(a3 + 616)) {
                  return 0;
                }
                uint64_t v25 = *(unsigned int *)(a3 + 764);
                if (*(unsigned char *)(a3 + 762))
                {
                  if (v25 <= *(_DWORD *)(a3 + 620))
                  {
                    int v26 = (uint64_t *)(a3 + 8 * v25 + 2088);
LABEL_49:
                    uint64_t v27 = *v26;
                    goto LABEL_50;
                  }
                }
                else if (v25 <= *(_DWORD *)(a3 + 624))
                {
                  int v26 = (uint64_t *)(a3 + 8 * v25 + 2216);
                  goto LABEL_49;
                }
                uint64_t v27 = 0;
LABEL_50:
                if (*(unsigned char *)(a1 + 8264) && *(_DWORD *)(a1 + 3836))
                {
                  if (!v27 || !*(unsigned char *)(v27 + 41)) {
                    return 0;
                  }
                }
                else if (!v27 || (*(_DWORD *)(v27 + 4) - 24) > 0xFFFFFFF7)
                {
                  return 0;
                }
                uint64_t result = 0;
                *uint64_t v15 = v27;
                return result;
              }
              unsigned int v18 = 0;
              unsigned int v19 = *(_DWORD *)(a3 + 624);
              while (2)
              {
                uint64_t v20 = 0;
                uint64_t v21 = *(void *)(a3 + 8 * v18 + 2216);
                do
                {
                  if (v21 == *(void *)(a1 + 8520 + v20)) {
                    goto LABEL_36;
                  }
                  v20 += 8;
                }
                while (v20 != 64);
                uint64_t v22 = *(unsigned int *)(a1 + 8720);
                if (v22 > 7) {
                  return 0xFFFFFFFFLL;
                }
                if (*(void *)(v21 + 48))
                {
                  if (!*(_WORD *)(*(void *)(*(void *)(a1 + 8272) + 512) + 28 * *(unsigned int *)(a1 + 3084) + 10)
                    || (uint64_t v23 = *(void *)(a1 + 8280),
                        int v24 = *(_DWORD *)(a1 + 8320),
                        *(_DWORD *)(v21 + 72) == *(_DWORD *)(v23 + 23176 * v24 + 3608))
                    && *(_DWORD *)(v21 + 76) == *(_DWORD *)(v23 + 23176 * v24 + 3612))
                  {
                    *(void *)(a1 + 8 * v22 + 852pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v21;
                    *(_DWORD *)(a1 + 872pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v22 + 1;
LABEL_36:
                    if (++v18 <= v19) {
                      continue;
                    }
                    uint64_t v15 = (void *)(a3 + 2344);
                    *(void *)(a3 + 2344) = 0;
                    goto LABEL_38;
                  }
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    return 0xFFFFFFFFLL;
                  }
                  int v28 = 136315394;
                  uint64_t v29 = "createRefPicList";
                  __int16 v30 = 1024;
                  unsigned int v31 = v18;
                  uint64_t v16 = &_os_log_internal;
                  BOOL v17 = "AppleAVD: ERROR: %s(): ref pic list1[%d] has dimension mismatch\n";
                }
                else
                {
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    return 0xFFFFFFFFLL;
                  }
                  int v28 = 136315394;
                  uint64_t v29 = "createRefPicList";
                  __int16 v30 = 1024;
                  unsigned int v31 = v18;
                  uint64_t v16 = &_os_log_internal;
                  BOOL v17 = "AppleAVD: %s(): bad ref list1[%d]";
                }
                goto LABEL_24;
              }
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              int v28 = 136315394;
              uint64_t v29 = "createRefPicList";
              __int16 v30 = 1024;
              unsigned int v31 = v8;
              uint64_t v16 = &_os_log_internal;
              BOOL v17 = "AppleAVD: ERROR: %s(): ref pic list0[%d] has dimension mismatch\n";
LABEL_24:
              _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v28, 0x12u);
            }
          }
          else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v28 = 136315394;
            uint64_t v29 = "createRefPicList";
            __int16 v30 = 1024;
            unsigned int v31 = v8;
            uint64_t v16 = &_os_log_internal;
            BOOL v17 = "AppleAVD: %s(): bad ref list0[%d]";
            goto LABEL_24;
          }
        }
        return 0xFFFFFFFFLL;
      }
    }
  }
  uint64_t result = 0;
  *(void *)(a3 + 2344) = 0;
  return result;
}

uint64_t CAVDMvHevcDecoder::getRefTileHdrsInfo(uint64_t this)
{
  if (*(_DWORD *)(this + 8720))
  {
    uint64_t v1 = this;
    uint64_t v2 = 1065;
    uint64_t v3 = 8728;
    do
    {
      this = (*(uint64_t (**)(void))(**(void **)(v1
                                                + 8
                                                * *(unsigned __int16 *)(*(void *)(v1 + 8272)
                                                                      + 2 * *(int *)(*(void *)(v1 + 8 * v2) + 28)
                                                                      + 580)
                                                + 9240)
                                  + 256))();
      unint64_t v4 = v2 - 1064;
      ++v2;
      v3 += 16;
    }
    while (v4 < *(unsigned int *)(v1 + 8720));
  }
  return this;
}

uint64_t CAVDMvHevcDecoder::getCollocMVInfo(CAVDMvHevcDecoder *this, int a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 1037) + 2360 * a2 + 2344);
  uint64_t v3 = *(unsigned int *)(v2 + 44);
  uint64_t v4 = *((void *)this + *(unsigned __int16 *)(*((void *)this + 1034) + 2 * *(int *)(v2 + 28) + 580) + 1155);
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, char *))(*(void *)v4 + 264))(v4, v3, (char *)this + 8856, (char *)this + 9032);
}

uint64_t CAVDMvHevcDecoder::getSliceRefIDmap(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 8296);
  unsigned int v4 = *(_DWORD *)(v3 + 2360 * a3 + 44);
  if (a2)
  {
    if (!v4)
    {
      unsigned int v5 = 0;
      do
      {
        uint64_t v6 = 0;
        uint64_t v7 = v5;
        uint64_t v8 = *(void *)(v3 + 2360 * a3 + 8 * v5 + 2216);
        do
        {
          if (v8 == *(void *)(result + 8520 + 8 * v6)) {
            break;
          }
          ++v6;
        }
        while (v6 != 8);
        *(_DWORD *)(result + 4 * v7 + 8456) = v6;
        unsigned int v5 = v7 + 1;
      }
      while ((v7 + 1) <= *(_DWORD *)(v3 + 2360 * a3 + 624));
    }
  }
  else if (v4 <= 1)
  {
    unsigned int v9 = 0;
    do
    {
      uint64_t v10 = 0;
      uint64_t v11 = v9;
      uint64_t v12 = *(void *)(v3 + 2360 * a3 + 8 * v9 + 2088);
      do
      {
        if (v12 == *(void *)(result + 8520 + 8 * v10)) {
          break;
        }
        ++v10;
      }
      while (v10 != 8);
      *(_DWORD *)(result + 4 * v11 + 8456) = v10;
      unsigned int v9 = v11 + 1;
    }
    while ((v11 + 1) <= *(_DWORD *)(v3 + 2360 * a3 + 620));
  }
  return result;
}

uint64_t CAVDMvHevcDecoder::createDPB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 464))(a1, a4);
  unsigned int v6 = HEVC_RLM::addNewReferencePicture(*(void *)(a1 + 8 * *(unsigned int *)(a1 + 3084) + 3128), a3);
  if (v6 > 0xF) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v8 = v6;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 8400) + 8 * *(unsigned int *)(a1 + 3084)) + 4 * v6) = *(_DWORD *)(a1 + 8340);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 8408) + 8 * *(unsigned int *)(a1 + 3084)) + 4 * v6) = *(_DWORD *)(a1 + 8356);
  *(_DWORD *)(a1 + 8424) = v6;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 184))(a1)) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 8416) + 8 * *(unsigned int *)(a1 + 3084)) + 4 * v8) = *(_DWORD *)(a1 + 8372);
  }
  if (!*(unsigned char *)(a1 + 9096)) {
    return 0;
  }
  uint64_t DPBEntry = HEVC_RLM::getDPBEntry(*(HEVC_RLM **)(a1 + 8 * *(unsigned int *)(a1 + 3084) + 3128), v8);
  if (CAVDMvHevcDecoder::insertCurPicIntoAuList(a1, DPBEntry))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315138;
      int v24 = "createDPB";
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): insertCurPicIntoAuList fail", (uint8_t *)&v23, 0xCu);
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 3084);
  if (v10 <= *(_DWORD *)(a1 + 3836))
  {
    *(void *)(*(void *)(a1 + 9752) + 8 * *(unsigned int *)(a1 + 3084)) = HEVC_RLM::getDPBEntry(*(HEVC_RLM **)(a1 + 8 * v10 + 3128), v8);
    ++*(_DWORD *)(a1 + 9780);
    int v11 = *(_DWORD *)(a1 + 12168) + 1;
    *(_DWORD *)(a1 + 12168) = v11;
  }
  else
  {
    int v11 = *(_DWORD *)(a1 + 12168);
  }
  if (v11 != *(unsigned __int8 *)(a1 + 9100) && !*(unsigned char *)(a1 + 12167)) {
    return 0;
  }
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v14 = *(void *)(a1 + 9752);
  uint64_t v15 = (*(_DWORD *)(a1 + 3836) + 1);
  do
  {
    while (1)
    {
      uint64_t v16 = *(void *)(v14 + 8 * v12);
      if (!v16 || !*(unsigned char *)(v16 + 3)) {
        break;
      }
      char v13 = 1;
      *(unsigned char *)(v16 + 2) = 1;
      if (v15 - 1 == v12++) {
        goto LABEL_24;
      }
    }
    ++v12;
  }
  while (v15 != v12);
  if ((v13 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_24:
  for (uint64_t i = 0; i != 16; ++i)
  {
    if (*(unsigned char *)(a1 + 40 * i + 9824))
    {
      uint64_t v19 = *(unsigned int *)(a1 + 40 * i + 9820);
      if (v19)
      {
        BOOL v20 = 0;
        uint64_t v21 = *(void *)(a1 + 40 * i + 9792);
        do
        {
          if (*(void *)v21) {
            BOOL v20 = (*(unsigned __int8 *)(*(void *)v21 + 2) | v20) != 0;
          }
          v21 += 8;
          --v19;
        }
        while (v19);
        if (v20 && *(_DWORD *)(a1 + 40 * i + 9808) > *(_DWORD *)(a3 + 12)) {
          ++*(_DWORD *)(a1 + 40 * i + 9812);
        }
      }
    }
  }
LABEL_35:
  uint64_t v22 = 0;
  do
    *(void *)(*(void *)(a1 + 9752) + 8 * v22++) = 0;
  while (v15 != v22);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 12168) = 0;
  *(_DWORD *)(a1 + 978pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(unsigned char *)(a1 + 9784) = 0;
  *(_DWORD *)(a1 + 9768) = 0;
  *(unsigned char *)(a1 + 12167) = 0;
  return result;
}

uint64_t CAVDMvHevcDecoder::insertCurPicIntoAuList(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = 0;
  BOOL v4 = 0;
  uint64_t v32 = *MEMORY[0x263EF8340];
  unsigned int v5 = (unsigned char *)(a1 + 9100);
  int v6 = *(_DWORD *)(a2 + 12);
  uint64_t v7 = (__int16 *)(a1 + 9102);
  while (1)
  {
    if (*(_DWORD *)(a1 + 40 * v3 + 9808) == v6)
    {
      if (*(unsigned char *)(a1 + 40 * v3 + 9824))
      {
        uint64_t v8 = *v5;
        if (*v5)
        {
          char v9 = 1;
          uint64_t v10 = v7;
          do
          {
            uint64_t v11 = *v10++;
            v9 &= *(unsigned char *)(*(void *)(a1 + 40 * v3 + 9800)
                           + *(unsigned __int16 *)(*(void *)(a1 + 8272) + 2 * v11 + 580)) != 0;
            --v8;
          }
          while (v8);
          if ((v9 & 1) == 0) {
            break;
          }
        }
      }
    }
    BOOL v4 = v3++ > 0xE;
    if (v3 == 16)
    {
      LODWORD(v3) = -1;
      break;
    }
  }
  if (v4)
  {
    uint64_t v12 = 0;
    char v13 = v5 + 724;
    while (1)
    {
      int v14 = *v13;
      v13 += 40;
      if (!v14) {
        break;
      }
      if (++v12 == 16) {
        goto LABEL_14;
      }
    }
    LODWORD(v3) = v12;
    goto LABEL_21;
  }
LABEL_14:
  if (v3 != -1)
  {
    if ((int)v3 >= 16)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *(_DWORD *)(a1 + 10432);
      int v26 = 136315650;
      uint64_t v27 = "insertCurPicIntoAuList";
      __int16 v28 = 1024;
      int v29 = v15;
      __int16 v30 = 1024;
      int v31 = v3;
      uint64_t v16 = &_os_log_internal;
      BOOL v17 = "AppleAVD: %s -- DPB is full numAus %d auIndex %d";
      uint32_t v18 = 24;
LABEL_29:
      _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v26, v18);
      return 0xFFFFFFFFLL;
    }
LABEL_21:
    uint64_t v20 = *(unsigned __int16 *)(*(void *)(a1 + 8272) + 2 * *(int *)(a2 + 28) + 580);
    uint64_t v21 = a1 + 40 * (int)v3;
    *(_DWORD *)(v21 + 9808) = v6;
    *(_DWORD *)(v21 + 9812) = *(_DWORD *)(a2 + 24);
    uint64_t v22 = *(unsigned int *)(v21 + 9820);
    *(void *)(*(void *)(v21 + 9792) + 8 * v22) = a2;
    *(unsigned char *)(v21 + 9824) = 1;
    *(_DWORD *)(v21 + 9816) |= *(unsigned __int8 *)(a2 + 2);
    uint64_t v23 = *(void *)(v21 + 9800);
    if (!*(unsigned char *)(v23 + v20))
    {
      LODWORD(v22) = v22 + 1;
      *(_DWORD *)(v21 + 982pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v22;
    }
    *(unsigned char *)(v23 + v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
    if (v22 > *v5) {
      return 0xFFFFFFFFLL;
    }
    unsigned int v24 = *(_DWORD *)(a1 + 10432);
    if (v4) {
      *(_DWORD *)(a1 + 10432) = ++v24;
    }
    if (v24 < 0x11) {
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    int v26 = 136315394;
    uint64_t v27 = "insertCurPicIntoAuList";
    __int16 v28 = 1024;
    int v29 = v24;
    uint64_t v16 = &_os_log_internal;
    BOOL v17 = "AppleAVD: %s -- m_numActiveAccessUnits out of range %d";
    uint32_t v18 = 18;
    goto LABEL_29;
  }
  uint64_t v19 = 0xFFFFFFFFLL;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v26 = 136315394;
    uint64_t v27 = "insertCurPicIntoAuList";
    __int16 v28 = 1024;
    int v29 = -1;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s -- DPB is full auIndex %d", (uint8_t *)&v26, 0x12u);
  }
  return v19;
}

BOOL CAVDMvHevcDecoder::getAuOutputFlag(CAVDMvHevcDecoder *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 10 * a2 + 2455);
  if (v2)
  {
    BOOL v3 = 0;
    uint64_t v4 = *((void *)this + 5 * a2 + 1224);
    do
    {
      if (*(void *)v4) {
        BOOL v3 = (*(unsigned __int8 *)(*(void *)v4 + 2) | v3) != 0;
      }
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t CAVDMvHevcDecoder::insertFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(_DWORD *)(a1 + 8436);
  unsigned int v5 = *(_DWORD *)(a1 + 8448);
  if (v4 - *(_DWORD *)(a1 + 8432) >= v5 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 136315394;
    uint64_t v23 = "insertFrame";
    __int16 v24 = 1024;
    int v25 = 2412;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v22, 0x12u);
  }
  uint64_t v6 = *(void *)(a1 + 8440);
  if (v6)
  {
    uint64_t v7 = v4 % v5;
    uint64_t v8 = *(unsigned int *)(a2 + 28);
    uint64_t v9 = *(unsigned __int16 *)(*(void *)(a1 + 8272) + 2 * v8 + 580);
    uint64_t v10 = (_DWORD *)(v6 + (v7 << 7));
    *uint64_t v10 = 1;
    v10[1] = v8;
    uint64_t v11 = v10 + 2;
    if (*(_DWORD *)(a1 + 2644))
    {
      *uint64_t v11 = 1;
      uint64_t v12 = (_DWORD *)(*(void *)(*(void *)(a1 + 8408) + 8 * v9) + 4 * *(unsigned int *)(a2 + 44));
      char v13 = (uint64_t *)(a2 + 56);
    }
    else
    {
      *uint64_t v11 = 0;
      uint64_t v12 = (_DWORD *)(*(void *)(*(void *)(a1 + 8400) + 8 * v9) + 4 * *(unsigned int *)(a2 + 44));
      char v13 = (uint64_t *)(a2 + 48);
    }
    uint64_t v14 = *v13;
    uint64_t v15 = v6 + (v7 << 7);
    *(_DWORD *)(v15 + 12) = *v12;
    *(void *)(v15 + 16) = v14;
    long long v16 = *(_OWORD *)(a2 + 72);
    long long v17 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v15 + 56) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(v15 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v17;
    *(_OWORD *)(v15 + 24) = v16;
    long long v18 = *(_OWORD *)(a2 + 120);
    long long v19 = *(_OWORD *)(a2 + 136);
    long long v20 = *(_OWORD *)(a2 + 152);
    *(void *)(v15 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(a2 + 168);
    *(_OWORD *)(v15 + 104) = v20;
    *(_OWORD *)(v15 + 88) = v19;
    *(_OWORD *)(v15 + 72) = v18;
    ++*(_DWORD *)(a1 + 8436);
  }
  return 0;
}

uint64_t CAVDMvHevcDecoder::removeFrame(uint64_t a1, _OWORD *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8432);
  if (v2 >= *(_DWORD *)(a1 + 8436)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(a1 + 8440);
  if (v3)
  {
    unsigned int v4 = (long long *)(v3 + ((unint64_t)(v2 % *(_DWORD *)(a1 + 8448)) << 7));
    long long v5 = *v4;
    long long v6 = v4[1];
    long long v7 = v4[3];
    a2[2] = v4[2];
    a2[3] = v7;
    *a2 = v5;
    a2[1] = v6;
    long long v8 = v4[4];
    long long v9 = v4[5];
    long long v10 = v4[7];
    a2[6] = v4[6];
    a2[7] = v10;
    a2[4] = v8;
    a2[5] = v9;
    unsigned int v2 = *(_DWORD *)(a1 + 8432);
  }
  uint64_t v11 = 0;
  *(_DWORD *)(a1 + 8432) = v2 + 1;
  return v11;
}

uint64_t CAVDMvHevcDecoder::getFrameParams(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8344)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(_DWORD *)a2 = *(unsigned __int8 *)(a1 + 3650);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8336);
  return result;
}

uint64_t CAVDMvHevcDecoder::getDispFrameParams(HEVC_RLM **this, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 8264))
  {
    unsigned int v4 = 0;
    do
    {
      if (!CAVDMvHevcDecoder::isAuBumpingNeeded((CAVDMvHevcDecoder *)this)) {
        break;
      }
      if (!CAVDMvHevcDecoder::AccessUnitBumpingProcess((CAVDMvHevcDecoder *)this)) {
        break;
      }
    }
    while (v4++ < 0x10);
  }
  else
  {
    uint64_t v6 = (uint64_t)this[1035] + 23176 * *((int *)this + 2080);
    if (HEVC_RLM::isBumpingNeeded((uint64_t)this[391], v6))
    {
      unsigned int v7 = 0;
      do
      {
        if (!HEVC_RLM::bumpingProcess(this[391], v10) || v7 > 0xF) {
          break;
        }
        ++v7;
        (*((void (**)(HEVC_RLM **, _OWORD *))*this + 45))(this, v10);
      }
      while ((HEVC_RLM::isBumpingNeeded((uint64_t)this[391], v6) & 1) != 0);
    }
  }
  return (*((uint64_t (**)(HEVC_RLM **, uint64_t))*this + 46))(this, a2);
}

uint64_t CAVDMvHevcDecoder::isAuBumpingNeeded(CAVDMvHevcDecoder *this)
{
  if ((int)CAVDMvHevcDecoder::getNumAusMarkedforOutput(this) > *((_DWORD *)this + 2667)) {
    return 1;
  }
  int v3 = *((_DWORD *)this + 2669);
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      if (*((_DWORD *)this + 2668))
      {
        if (*((unsigned char *)this + 40 * v4 + 9824))
        {
          if (*((_DWORD *)this + 10 * v4 + 2453) > v3)
          {
            uint64_t v5 = *((unsigned int *)this + 10 * v4 + 2455);
            if (v5)
            {
              BOOL v6 = 0;
              uint64_t v7 = *((void *)this + 5 * v4 + 1224);
              do
              {
                if (*(void *)v7) {
                  BOOL v6 = (*(unsigned __int8 *)(*(void *)v7 + 2) | v6) != 0;
                }
                v7 += 8;
                --v5;
              }
              while (v5);
              if (v6) {
                break;
              }
            }
          }
        }
      }
      if (++v4 == 16) {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

__n128 CAVDMvHevcDecoder::populateSnapshotStruct(CAVDMvHevcDecoder *this, unsigned int a2, int a3)
{
  int v3 = *((_DWORD *)this + 2180);
  if (v3)
  {
    uint64_t v4 = (_DWORD *)((char *)this + 8596);
    uint64_t v5 = (uint64_t *)((char *)this + 8520);
    uint64_t v6 = *((unsigned int *)this + 2180);
    do
    {
      uint64_t v7 = *v5++;
      *(void *)(v4 - 3) = *(void *)(v7 + 48);
      *(v4 - 1) = *(_DWORD *)(v7 + 64);
      *uint64_t v4 = *(_DWORD *)(v7 + 28);
      v4 += 4;
      --v6;
    }
    while (v6);
  }
  *((_DWORD *)this + 2178) = v3;
  uint64_t v8 = *((void *)this + 261);
  long long v9 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)((char *)this + 2104) = *(_OWORD *)v8;
  *(_OWORD *)((char *)this + 212pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v9;
  long long v10 = *(_OWORD *)(v8 + 32);
  long long v11 = *(_OWORD *)(v8 + 48);
  long long v12 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)((char *)this + 2168) = *(_OWORD *)(v8 + 64);
  *(_OWORD *)((char *)this + 2184) = v12;
  *(_OWORD *)((char *)this + 2136) = v10;
  *(_OWORD *)((char *)this + 2152) = v11;
  long long v13 = *(_OWORD *)(v8 + 96);
  long long v14 = *(_OWORD *)(v8 + 112);
  long long v15 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)((char *)this + 2232) = *(_OWORD *)(v8 + 128);
  *(_OWORD *)((char *)this + 2248) = v15;
  *(_OWORD *)((char *)this + 220pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v13;
  *(_OWORD *)((char *)this + 2216) = v14;
  __n128 result = *(__n128 *)(v8 + 160);
  long long v17 = *(_OWORD *)(v8 + 176);
  long long v18 = *(_OWORD *)(v8 + 208);
  *(_OWORD *)((char *)this + 2296) = *(_OWORD *)(v8 + 192);
  *(_OWORD *)((char *)this + 2312) = v18;
  *(__n128 *)((char *)this + 2264) = result;
  *(_OWORD *)((char *)this + 228pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v17;
  *((_DWORD *)this + 582) = a3;
  return result;
}

uint64_t CAVDMvHevcDecoder::derivePocResetPeriodId(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 1893))
  {
    *(_DWORD *)(result + 4 * *(unsigned int *)(result + 3084) + 10936) = *(_DWORD *)(a2 + 304);
  }
  else
  {
    *(_DWORD *)(a2 + 304) = 0;
    int v2 = *(_DWORD *)(result + 4 * *(unsigned int *)(result + 3084) + 10936);
    if (v2 == 0x80000000) {
      int v2 = 0;
    }
    *(_DWORD *)(a2 + 304) = v2;
  }
  return result;
}

BOOL CAVDMvHevcDecoder::checkRefLayersInitialized(CAVDMvHevcDecoder *this, int a2)
{
  uint64_t v2 = *((void *)this + 1034);
  if (!*(_WORD *)(*(void *)(v2 + 512) + 28 * *(unsigned __int16 *)(v2 + 2 * a2 + 580) + 18)) {
    return 1;
  }
  uint64_t v3 = 0;
  LOBYTE(v4) = 1;
  do
  {
    BOOL v4 = v4
      && *((unsigned char *)this
         + *(unsigned __int16 *)(v2
                               + 2
                               * *(__int16 *)(*(void *)(*(void *)(v2 + 520)
                                                        + 8 * *(unsigned __int16 *)(v2 + 2 * a2 + 580))
                                            + v3
                                            + 6)
                               + 580)
         + 10602) != 0;
    v3 += 14;
  }
  while (14 * *(unsigned __int16 *)(*(void *)(v2 + 512) + 28 * *(unsigned __int16 *)(v2 + 2 * a2 + 580) + 18) != v3);
  return v4;
}

uint64_t CAVDMvHevcDecoder::GetCurrMsb(CAVDMvHevcDecoder *this, int a2, int a3, int a4, int a5)
{
  if (a5 >= 0) {
    int v5 = a5;
  }
  else {
    int v5 = a5 + 1;
  }
  if (a2 - a3 <= v5 >> 1) {
    int v6 = 0;
  }
  else {
    int v6 = a5;
  }
  unsigned int v7 = a4 - v6;
  if (a3 - a2 >= v5 >> 1) {
    return (a5 + a4);
  }
  else {
    return v7;
  }
}

void CAVDMvHevcDecoder::releaseUnusedPicturesFromAllSubDpbs(CAVDMvHevcDecoder *this)
{
  for (uint64_t i = 0; i != 16; ++i)
  {
    uint64_t v3 = (char *)this + 40 * i;
    uint64_t v4 = *((unsigned int *)v3 + 2455);
    if (!v4)
    {
      if (!*((unsigned char *)this + 40 * i + 9824)) {
        continue;
      }
LABEL_17:
      long long v11 = (char *)this + 40 * i;
      *((_DWORD *)v11 + 2452) = 0;
      v11[9824] = 0;
      *((void *)v11 + 1227) = 0;
      bzero(*((void **)v11 + 1225), *((unsigned int *)this + 959) + 1);
      --*((_DWORD *)this + 2608);
      continue;
    }
    uint64_t v5 = 0;
    int v6 = v3 + 9792;
    do
    {
      uint64_t v7 = *(void *)(*v6 + v5);
      if (v7 && !*(_DWORD *)(v7 + 20) && !*(unsigned char *)(v7 + 2)) {
        *(void *)(*v6 + v5) = 0;
      }
      v5 += 8;
    }
    while (8 * v4 != v5);
    if (*((unsigned char *)this + 40 * i + 9824))
    {
      int v8 = 0;
      long long v9 = (void *)*v6;
      do
      {
        if (*v9++) {
          ++v8;
        }
        --v4;
      }
      while (v4);
      if (!v8) {
        goto LABEL_17;
      }
    }
  }
  uint64_t v12 = 391;
  do
  {
    HEVC_RLM::releaseUnusedPictures(*((HEVC_RLM **)this + v12));
    unint64_t v13 = v12 - 391;
    ++v12;
  }
  while (v13 < *((unsigned int *)this + 959));
}

void CAVDMvHevcDecoder::removeSubDpbPicturesInAuList(CAVDMvHevcDecoder *this, int a2, int a3)
{
  for (uint64_t i = 0; i != 16; ++i)
  {
    uint64_t v7 = (void *)((char *)this + 40 * i + 9792);
    if (*((unsigned char *)this + 40 * i + 9824))
    {
      uint64_t v8 = *((unsigned int *)this + 10 * i + 2455);
      if (!v8) {
        goto LABEL_15;
      }
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void *)(*v7 + v9);
        if (v10 && *(_DWORD *)(v10 + 28) == a2 && *(unsigned char *)v10) {
          *(void *)(*v7 + v9) = 0;
        }
        v9 += 8;
      }
      while (8 * v8 != v9);
      int v11 = 0;
      uint64_t v12 = (void *)*v7;
      do
      {
        if (*v12++) {
          ++v11;
        }
        --v8;
      }
      while (v8);
      if (!v11)
      {
LABEL_15:
        long long v14 = (char *)this + 40 * i;
        *((_DWORD *)v14 + 2452) = 0;
        v14[9824] = 0;
        *((void *)v14 + 1227) = 0;
        bzero(*((void **)v14 + 1225), *((unsigned int *)this + 959) + 1);
        --*((_DWORD *)this + 2608);
      }
    }
  }
  long long v15 = (HEVC_RLM *)*((void *)this + a3 + 391);

  HEVC_RLM::releaseAllPictures(v15);
}

void CAVDMvHevcDecoder::releaseUnusedPicturesFromOneSubDpb(CAVDMvHevcDecoder *this, int a2)
{
  for (uint64_t i = 0; i != 16; ++i)
  {
    uint64_t v5 = (char *)this + 40 * i;
    uint64_t v6 = *((unsigned int *)v5 + 2455);
    if (!v6)
    {
      if (!*((unsigned char *)this + 40 * i + 9824)) {
        continue;
      }
LABEL_19:
      unint64_t v13 = (char *)this + 40 * i;
      *((_DWORD *)v13 + 2452) = 0;
      v13[9824] = 0;
      *((void *)v13 + 1227) = 0;
      bzero(*((void **)v13 + 1225), *((unsigned int *)this + 959) + 1);
      --*((_DWORD *)this + 2608);
      continue;
    }
    uint64_t v7 = 0;
    uint64_t v8 = v5 + 9792;
    do
    {
      uint64_t v9 = *(void *)(*v8 + v7);
      if (v9 && !*(_DWORD *)(v9 + 20) && !*(unsigned char *)(v9 + 2) && *(_DWORD *)(v9 + 28) == a2 && *(unsigned char *)v9) {
        *(void *)(*v8 + v7) = 0;
      }
      v7 += 8;
    }
    while (8 * v6 != v7);
    if (*((unsigned char *)this + 40 * i + 9824))
    {
      int v10 = 0;
      int v11 = (void *)*v8;
      do
      {
        if (*v11++) {
          ++v10;
        }
        --v6;
      }
      while (v6);
      if (!v10) {
        goto LABEL_19;
      }
    }
  }
  uint64_t v14 = *(unsigned __int16 *)(*((void *)this + 1034) + 2 * a2 + 580);
  if (*((_DWORD *)this + 2050) >= v14)
  {
    long long v15 = (HEVC_RLM *)*((void *)this + v14 + 391);
    HEVC_RLM::releaseUnusedPictures(v15);
  }
}

BOOL CAVDMvHevcDecoder::isAuBumpingNeededForNonIRAP(CAVDMvHevcDecoder *this, int a2)
{
  if (CAVDMvHevcDecoder::isAuBumpingNeeded(this)) {
    return 1;
  }
  uint64_t v5 = *(unsigned __int16 *)(*((void *)this + 1034) + 2 * a2 + 580);
  return *(_DWORD *)(*((void *)this + v5 + 391) + 2832) >= (*((_DWORD *)this + v5 + 2670) + 1);
}

uint64_t CAVDMvHevcDecoder::getNumAusMarkedforOutput(CAVDMvHevcDecoder *this)
{
  uint64_t v2 = 0;
  uint64_t result = 0;
  do
  {
    if (*((unsigned char *)this + 40 * v2 + 9824))
    {
      uint64_t v4 = *((unsigned int *)this + 10 * v2 + 2455);
      if (v4)
      {
        BOOL v5 = 0;
        uint64_t v6 = *((void *)this + 5 * v2 + 1224);
        do
        {
          if (*(void *)v6) {
            BOOL v5 = (*(unsigned __int8 *)(*(void *)v6 + 2) | v5) != 0;
          }
          v6 += 8;
          --v4;
        }
        while (v4);
        uint64_t result = result + v5;
      }
    }
    ++v2;
  }
  while (v2 != 16);
  return result;
}

uint64_t CAVDMvHevcDecoder::getAuRemainingLayers(uint64_t this, int a2)
{
  uint64_t v2 = *(unsigned int *)(this + 40 * a2 + 9820);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = this;
  LODWORD(this) = 0;
  uint64_t v4 = *(void **)(v3 + 40 * a2 + 9792);
  do
  {
    if (*v4++) {
      this = (this + 1);
    }
    else {
      this = this;
    }
    --v2;
  }
  while (v2);
  return this;
}

uint64_t CAVDMvHevcDecoder::decrementPocValuesInLayerSubDPB(uint64_t this, int a2, int a3)
{
  if (a2 >= 1 && *(_DWORD *)(this + 8200) >= a2) {
    return HEVC_RLM::decrementPOCvalues(*(void *)(this+ 8 * *(unsigned __int16 *)(*(void *)(this + 8272) + 2 * a2 + 580)+ 3128), a3);
  }
  return this;
}

uint64_t CAVDMvHevcDecoder::setAVDSharedMem(uint64_t this, uint64_t a2)
{
  if (*(_DWORD *)(this + 10456))
  {
    uint64_t v3 = this;
    unint64_t v4 = 0;
    uint64_t v5 = this + 9240;
    do
    {
      this = (*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 8 * v4) + 288))(*(void *)(v5 + 8 * v4), a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 10456));
  }
  return this;
}

uint64_t CAVDHevcDecoder::getVPS(CAVDHevcDecoder *this)
{
  return (uint64_t)this + 3824;
}

uint64_t CAVDHevcDecoder::getRBSP(CAVDHevcDecoder *this)
{
  return *((void *)this + 389);
}

uint64_t CAVDHevcDecoder::setIRAPPoc(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8332) = a2;
  return this;
}

CAHDecCloverLgh *createCloverLghDecoder(CAVDLghDecoder *a1)
{
  uint64_t v2 = (CAHDecCloverLgh *)operator new(0xB98uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecCloverLgh::CAHDecCloverLgh(v2, a1);
  }
  return v3;
}

void sub_2239C8A7C(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecCloverLgh::CAHDecCloverLgh(CAHDecCloverLgh *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D740CE8;
  *(_DWORD *)(v1 + 456) = 147956;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecCloverLgh::CAHDecCloverLgh(CAHDecCloverLgh *this, CAVDLghDecoder *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D740CE8;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 147956;
  *(_DWORD *)(v4 + 8) = 500;
  *(_OWORD *)(v4 + 16) = xmmword_223AD0770;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 147956, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      long long v17 = "CAHDecCloverLgh";
      __int16 v18 = 1024;
      int v19 = 0;
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
LABEL_16:
      _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v7);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v8;
    *((void *)this + 34) = v8;
    uint64_t v9 = *((void *)this + 32);
    *(_DWORD *)(v9 + 17552) = 0;
    bzero((void *)(v9 + 11792), 0xB00uLL);
    *(_OWORD *)(v9 + 5712) = 0u;
    bzero((void *)(*((void *)this + 32) + 14608), 0xB00uLL);
    bzero((char *)this + 464, 0x4D0uLL);
    int v10 = (_OWORD *)*((void *)this + 32);
    v10[356] = 0u;
    v10[355] = 0u;
    v10[354] = 0u;
    v10[353] = 0u;
    v10[352] = 0u;
    v10[351] = 0u;
    v10[350] = 0u;
    v10[349] = 0u;
    v10[348] = 0u;
    v10[347] = 0u;
    v10[346] = 0u;
    v10[345] = 0u;
    v10[344] = 0u;
    v10[343] = 0u;
    v10[342] = 0u;
    v10[341] = 0u;
    v10[340] = 0u;
    v10[339] = 0u;
    v10[338] = 0u;
    v10[337] = 0u;
    v10[336] = 0u;
    v10[335] = 0u;
    bzero((char *)this + 1696, 0x4D0uLL);
    for (uint64_t i = 3072; i != 3776; i += 176)
    {
      uint64_t v12 = (_OWORD *)(*((void *)this + 32) + i);
      v12[9] = 0uLL;
      v12[10] = 0uLL;
      v12[7] = 0uLL;
      v12[8] = 0uLL;
      v12[5] = 0uLL;
      v12[6] = 0uLL;
      v12[3] = 0uLL;
      v12[4] = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *uint64_t v12 = 0uLL;
    }
    do
    {
      unint64_t v13 = (_OWORD *)(*((void *)this + 32) + i);
      v13[9] = 0uLL;
      v13[10] = 0uLL;
      v13[7] = 0uLL;
      v13[8] = 0uLL;
      v13[5] = 0uLL;
      v13[6] = 0uLL;
      v13[3] = 0uLL;
      v13[4] = 0uLL;
      v13[1] = 0uLL;
      v13[2] = 0uLL;
      *unint64_t v13 = 0uLL;
      i += 176;
    }
    while (i != 5184);
    uint64_t v14 = (_OWORD *)*((void *)this + 32);
    v14[334] = 0u;
    v14[333] = 0u;
    v14[332] = 0u;
    v14[331] = 0u;
    v14[330] = 0u;
    v14[329] = 0u;
    v14[328] = 0u;
    v14[327] = 0u;
    v14[326] = 0u;
    v14[325] = 0u;
    uint64_t v15 = 3072;
    v14[324] = 0u;
    do
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), 1913, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        int v16 = 136315650;
        long long v17 = "CAHDecCloverLgh";
        __int16 v18 = 1024;
        int v19 = 165;
        __int16 v20 = 2080;
        uint64_t v21 = "probBuf";
        uint64_t v5 = &_os_log_internal;
        uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
        goto LABEL_15;
      }
      v15 += 176;
    }
    while (v15 != 3776);
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 5184), 12284, 7, 1, 0))return; {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    }
    {
      int v16 = 136315650;
      long long v17 = "CAHDecCloverLgh";
      __int16 v18 = 1024;
      int v19 = 167;
      __int16 v20 = 2080;
      uint64_t v21 = "stateBuf";
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_15:
      uint32_t v7 = 28;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
}

void sub_2239C8EB4(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecCloverLgh::~CAHDecCloverLgh(CAHDecCloverLgh *this)
{
  *(void *)this = &unk_26D740CE8;
  CAHDecCloverLgh::freeWorkBuf_SPS(this);
  uint64_t v2 = *((void *)this + 32);
  for (uint64_t i = 3072; i != 3776; i += 176)
  {
    if (*(void *)(v2 + i))
    {
      CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + i));
      uint64_t v2 = *((void *)this + 32);
      *(void *)(v2 + i) = 0;
    }
  }
  if (*(void *)(v2 + 5184))
  {
    CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + 5184));
    *(void *)(*((void *)this + 32) + 5184) = 0;
  }
  (*(void (**)(CAHDecCloverLgh *, void))(*(void *)this + 152))(this, 0);
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecCloverLgh::~CAHDecCloverLgh(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecCloverLgh::startPicture(CAHDecCloverLgh *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  uint64_t v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x241F4uLL);
    uint64_t v5 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v5 + 16) = a2;
    *(_WORD *)(v5 + 24) = 257;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecCloverLgh::DecodePicture(CAHDecCloverLgh *this, int a2)
{
  if (CAHDecCloverLgh::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecCloverLgh *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecCloverLgh *))(*(void *)this + 48))(this);
  (*(void (**)(CAHDecCloverLgh *))(*(void *)this + 56))(this);
  (*(void (**)(CAHDecCloverLgh *, void))(*(void *)this + 88))(this, 0);
  (*(void (**)(CAHDecCloverLgh *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecCloverLgh::populateCommonRegisters(CAHDecCloverLgh *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000002;
  return 0;
}

uint64_t CAHDecCloverLgh::updateCommonRegisters(CAHDecCloverLgh *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

uint64_t CAHDecCloverLgh::populateSequenceRegisters(CAHDecCloverLgh *this)
{
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  unsigned __int16 v3 = *(_DWORD *)(v2 + 108) - 1;
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (v3 | ((unsigned __int16)*(_DWORD *)(v2 + 112) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 304);
  if (v4 >= 3) {
    int v5 = 6528;
  }
  else {
    int v5 = ((v4 & 3) << 7) | 0x1800;
  }
  *(_DWORD *)(v1 + 44) = v5;
  unsigned int v6 = v5 & 0xFFF87FFF | (((*(unsigned char *)(v2 + 105) + 8) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFF87FFFF | (((*(unsigned __int8 *)(v2 + 105) + 8) & 0xF) << 19) | 0x1000000;
  *(_DWORD *)(v1 + 44) = v7;
  *(_DWORD *)(v1 + 44) = v7 & 0xFDFFFFFF | (*(unsigned char *)(v2 + 304) == 4);
  return 0;
}

uint64_t CAHDecCloverLgh::populatePictureRegisters(CAHDecCloverLgh *this)
{
  uint64_t v235 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v2 + 17560);
  if (*(unsigned char *)(v4 + 37))
  {
    int v5 = *(_DWORD *)(v4 + 100);
    int v6 = *(_DWORD *)(v2 + 11748);
    int v227 = 1 << v5;
    int v228 = 1 << *(_DWORD *)(v4 + 96);
    int v229 = v228 << v5;
    if (!*(unsigned char *)(v4 + 40))
    {
      char v7 = 0;
      int v8 = 766509056;
      goto LABEL_6;
    }
  }
  else
  {
    int v9 = *(_DWORD *)(v4 + 100);
    int v6 = *(_DWORD *)(v2 + 11748);
    int v227 = 1 << v9;
    int v228 = 1 << *(_DWORD *)(v4 + 96);
    int v229 = v228 << v9;
  }
  int v8 = 766517248;
  char v7 = 1;
LABEL_6:
  *(_DWORD *)(v3 + 48) = v8;
  int v10 = v8 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v3 + 48) = v10;
  if (*(_DWORD *)(*((void *)this + 32) + 2644) == 1) {
    int v11 = 1024;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(v3 + 48) = v10 | v11 | 0x2AB;
  *(void *)(v3 + 52) = 0x2000000;
  int v12 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2688) & 7;
  *(_DWORD *)(v3 + 56) = v12;
  unsigned int v13 = v12 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2692) & 1));
  *(_DWORD *)(v3 + 56) = v13;
  unsigned int v14 = v13 & 0xFFFFFF8F | (16 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2696) & 7));
  *(_DWORD *)(v3 + 56) = v14;
  unsigned int v15 = v14 & 0xFFFFFF7F | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2700) & 1) << 7);
  *(_DWORD *)(v3 + 56) = v15;
  unsigned int v16 = v15 & 0xFFFFF8FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2704) & 7) << 8);
  *(_DWORD *)(v3 + 56) = v16;
  unsigned int v17 = v16 & 0xFFFFF7FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2708) & 1) << 11);
  *(_DWORD *)(v3 + 56) = v17;
  unsigned int v18 = v17 & 0xFFFFCFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2712) & 3) << 12);
  *(_DWORD *)(v3 + 56) = v18;
  unsigned int v19 = v18 & 0xFFFFBFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2716) & 1) << 14);
  *(_DWORD *)(v3 + 56) = v19;
  unsigned int v20 = v19 & 0xFFFF7FFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2720) & 1) << 15);
  *(_DWORD *)(v3 + 56) = v20;
  unsigned int v21 = v20 & 0xFFF8FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2724) & 7) << 16);
  *(_DWORD *)(v3 + 56) = v21;
  unsigned int v22 = v21 & 0xFFF7FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2728) & 1) << 19);
  *(_DWORD *)(v3 + 56) = v22;
  unsigned int v23 = v22 & 0xFFEFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2732) & 1) << 20);
  *(_DWORD *)(v3 + 56) = v23;
  unsigned int v24 = v23 & 0xFFDFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2736) & 1) << 21);
  *(_DWORD *)(v3 + 56) = v24;
  unsigned int v25 = v24 & 0xFFBFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2740) & 1) << 22);
  *(_DWORD *)(v3 + 56) = v25;
  unsigned int v26 = v25 & 0xFF7FFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2744) & 1) << 23);
  *(_DWORD *)(v3 + 56) = v26;
  unsigned int v27 = v26 & 0xFEFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2748) & 1) << 24);
  *(_DWORD *)(v3 + 56) = v27;
  unsigned int v28 = v27 & 0xFDFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2752) & 1) << 25);
  *(_DWORD *)(v3 + 56) = v28;
  int v29 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2756);
  *(_DWORD *)(v3 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 56) = v28 & 0xFBFFFFFF | ((v29 & 1) << 26);
  if (*(unsigned char *)(v4 + 60))
  {
    int v30 = *(unsigned char *)(v4 + 69) & 0x7F;
    *(_DWORD *)(v3 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v30;
    unsigned int v31 = v30 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 68) & 0x7F) << 7);
    *(_DWORD *)(v3 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v31;
    unsigned int v32 = v31 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 67) & 0x7F) << 14);
    *(_DWORD *)(v3 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v32;
    unsigned int v33 = v32 & 0xF01FFFFF | ((*(unsigned char *)(v4 + 66) & 0x7F) << 21);
    *(_DWORD *)(v3 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v33;
    *(_DWORD *)(v3 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v33 & 0x8FFFFFFF | ((*(unsigned char *)(v4 + 59) & 7) << 28);
    int v34 = *(unsigned char *)(v4 + 73) & 0x7F;
    *(_DWORD *)(v3 + 64) = v34;
    unsigned int v35 = v34 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 72) & 0x7F) << 7);
    *(_DWORD *)(v3 + 64) = v35;
    unsigned int v36 = v35 & 0xFFF03FFF | ((*(unsigned char *)(v4 + 58) & 0x3F) << 14);
  }
  else
  {
    *(_DWORD *)(v3 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (*(unsigned char *)(v4 + 59) & 7) << 28;
    unsigned int v36 = (*(unsigned char *)(v4 + 58) & 0x3F) << 14;
  }
  uint64_t v37 = 0;
  *(_DWORD *)(v3 + 64) = v36;
  *(_DWORD *)(v3 + 68) = 0;
  int v38 = *(unsigned char *)(v4 + 77) & 0x1F;
  *(_DWORD *)(v3 + 68) = v38;
  unsigned int v39 = v38 & 0xFFFFFC1F | (32 * (*(unsigned char *)(v4 + 76) & 0x1F));
  *(_DWORD *)(v3 + 68) = v39;
  unsigned int v40 = v39 & 0xFFFF83FF | ((*(unsigned char *)(v4 + 75) & 0x1F) << 10);
  *(_DWORD *)(v3 + 68) = v40;
  *(_DWORD *)(v3 + 68) = v40 | (*(unsigned __int8 *)(v4 + 74) << 15);
  uint64_t v41 = v3 + 72;
  int v42 = (_WORD *)(v4 + 242);
  uint64_t v43 = v4 + 208;
  do
  {
    int v44 = *(unsigned __int8 *)(v4 + 78);
    *(_DWORD *)(v41 + v37) = 0;
    if (v44)
    {
      BOOL v45 = *(unsigned char *)(v43 + v37) != 0;
      *(_DWORD *)(v41 + v37) = v45;
      BOOL v46 = *(unsigned __int8 *)(v43 + v37 - 1) != 0;
    }
    else
    {
      BOOL v45 = 0;
      BOOL v46 = 0;
    }
    int v47 = v45 | (8 * v46);
    *(_DWORD *)(v41 + v37) = v47;
    unsigned int v48 = v47 & 0xFFFFFFF9 | (2 * (*v42 & 3));
    *(_DWORD *)(v41 + v37) = v48;
    if (v44)
    {
      int v49 = *(unsigned __int8 *)(v43 + v37 - 2);
      int v50 = v48 | ((*(unsigned char *)(v43 + v37 - 2) != 0) << 11);
      *(_DWORD *)(v41 + v37) = v50;
      if (v49) {
        LOWORD(v49) = *(v42 - 1);
      }
      unsigned int v51 = (16 * (v49 & 0x7F)) | v50 & 0xFFFFF80F;
      *(_DWORD *)(v41 + v37) = v51;
      int v44 = *(unsigned __int8 *)(v43 + v37 - 3);
      unsigned int v48 = v51 | ((v44 != 0) << 21);
      *(_DWORD *)(v41 + v37) = v48;
      if (v44) {
        LOWORD(v44) = *(v42 - 2);
      }
    }
    *(_DWORD *)(v41 + v37) = v48 & 0xFFE00FFF | ((v44 & 0x1FF) << 12);
    v37 += 4;
    v42 += 4;
  }
  while (v37 != 32);
  *(_DWORD *)(v3 + 144) = 0x20000;
  char v230 = v7;
  if (v7)
  {
    uint64_t v226 = 8;
  }
  else
  {
    int v225 = v6;
    int v52 = (int *)(v3 + 116);
    uint64_t v53 = 2178;
    uint64_t v226 = 3;
    int v54 = &_os_log_internal;
    do
    {
      *(v52 - 3) = 0;
      unsigned __int16 v55 = **(_DWORD **)(*((void *)this + 32) + 8 * v53) - 1;
      *(v52 - 3) = v55;
      *(v52 - 3) = (v55 | ((unsigned __int16)*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v53) + 4) << 16))
                 - 0x10000;
      int *v52 = 0;
      int v56 = (unsigned __int16)((**(_DWORD **)(*((void *)this + 32) + 8 * v53) << 14) / *(_DWORD *)(v4 + 108));
      int *v52 = v56;
      int v57 = v56 | ((unsigned __int16)((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v53) + 4) << 14)
                                    / *(_DWORD *)(v4 + 112)) << 16);
      int *v52 = v57;
      if ((v56 - 1024) >= 0x7C01 && os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        int v232 = "populatePictureRegisters";
        __int16 v233 = 1024;
        int v234 = 489;
        _os_log_impl(&dword_223977000, v54, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
        int v57 = *v52;
      }
      if ((v57 - 0x4000000) >= 0x7C010000 && os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        int v232 = "populatePictureRegisters";
        __int16 v233 = 1024;
        int v234 = 490;
        _os_log_impl(&dword_223977000, v54, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
      }
      ++v53;
      ++v52;
    }
    while (v53 != 2181);
    int v6 = v225;
  }
  *(void *)(v3 + 136) = 0;
  int v58 = *(unsigned __int16 *)(v4 + 2672);
  *(_DWORD *)(v3 + 136) = v58;
  *(_DWORD *)(v3 + 136) = v58 | (*(_DWORD *)(v4 + 2676) << 16);
  int v59 = *(unsigned __int16 *)(v4 + 2680);
  *(_DWORD *)(v3 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v59;
  *(_DWORD *)(v3 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v59 | (*(_DWORD *)(v4 + 2684) << 16);
  uint64_t v60 = (char *)this + 464;
  for (uint64_t i = 148; i != 176; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v62 = *((void *)this + 33);
    int v63 = *(_DWORD *)(v62 + i);
    *(_DWORD *)(v62 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFu;
    uint64_t v64 = *((void *)this + 33);
    int v65 = *(_DWORD *)(v64 + i);
    *(_DWORD *)(v64 + i) = v63;
    if (*(void *)v60 || *((_DWORD *)v60 + 38) || *((_DWORD *)v60 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v60, i, 0, 0xFFFFFFFFLL, 8, v65, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 28) = *(_DWORD *)(*((void *)this + 33) + i + 28) & 0x800001FF | (((*((_DWORD *)this + 736) >> 9) & 0x3FFFFF) << 9);
    v60 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 204) = 0;
  uint64_t v67 = *((void *)this + 33);
  int v68 = *(_DWORD *)(v67 + 204);
  *(_DWORD *)(v67 + 204) = 0;
  *(_DWORD *)(*((void *)this + 33) + 204) ^= 0xFFFFFFu;
  uint64_t v69 = *((void *)this + 33);
  int v70 = *(_DWORD *)(v69 + 204);
  *(_DWORD *)(v69 + 204) = v68;
  uint64_t v71 = *((void *)this + 32);
  if (*(void *)(v71 + 5184) || *(_DWORD *)(v71 + 5336) || *(_DWORD *)(v71 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v71 + 5184), 204, 0, 0xFFFFFFFFLL, 8, v70, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 208) = 0;
  *(_DWORD *)(*((void *)this + 33) + 256) = 0;
  uint64_t v72 = *((void *)this + 33);
  int v73 = *(_DWORD *)(v72 + 256);
  *(_DWORD *)(v72 + 256) = 0;
  *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFFu;
  uint64_t v74 = *((void *)this + 33);
  int v75 = *(_DWORD *)(v74 + 256);
  *(_DWORD *)(v74 + 256) = v73;
  if (*((void *)this + 278) || *((_DWORD *)this + 594) || *((_DWORD *)this + 595))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 256, 0, 0xFFFFFFFFLL, 8, v75, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 212) = 0;
  uint64_t v76 = *((void *)this + 33);
  int v77 = *(_DWORD *)(v76 + 212);
  *(_DWORD *)(v76 + 212) = 0;
  *(_DWORD *)(*((void *)this + 33) + 212) ^= 0xFFFFFFu;
  uint64_t v78 = *((void *)this + 33);
  int v79 = *(_DWORD *)(v78 + 212);
  *(_DWORD *)(v78 + 212) = v77;
  if (*((void *)this + 234) || *((_DWORD *)this + 506) || *((_DWORD *)this + 507))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 212, 0, 0xFFFFFFFFLL, 8, v79, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 216) = 0;
  uint64_t v80 = *((void *)this + 33);
  int v81 = *(_DWORD *)(v80 + 216);
  *(_DWORD *)(v80 + 216) = 0;
  *(_DWORD *)(*((void *)this + 33) + 216) ^= 0xFFFFFFu;
  uint64_t v82 = *((void *)this + 33);
  int v83 = *(_DWORD *)(v82 + 216);
  *(_DWORD *)(v82 + 216) = v81;
  if (*((void *)this + 256) || *((_DWORD *)this + 550) || *((_DWORD *)this + 551))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 216, 0, 0xFFFFFFFFLL, 8, v83, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 224) = 0;
  uint64_t v84 = *((void *)this + 33);
  int v85 = *(_DWORD *)(v84 + 224);
  *(_DWORD *)(v84 + 224) = 0;
  *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFFu;
  uint64_t v86 = *((void *)this + 33);
  int v87 = *(_DWORD *)(v86 + 224);
  *(_DWORD *)(v86 + 224) = v85;
  if (*((void *)this + 300) || *((_DWORD *)this + 638) || *((_DWORD *)this + 639))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 224, 0, 0xFFFFFFFFLL, 8, v87, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 228) = 0;
  uint64_t v88 = *((void *)this + 33);
  int v89 = *(_DWORD *)(v88 + 228);
  *(_DWORD *)(v88 + 228) = 0;
  *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFFu;
  uint64_t v90 = *((void *)this + 33);
  int v91 = *(_DWORD *)(v90 + 228);
  *(_DWORD *)(v90 + 228) = v89;
  if (*((void *)this + 322) || *((_DWORD *)this + 682) || *((_DWORD *)this + 683))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 228, 0, 0xFFFFFFFFLL, 8, v91, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 232) = 0;
  uint64_t v92 = *((void *)this + 33);
  int v93 = *(_DWORD *)(v92 + 232);
  *(_DWORD *)(v92 + 232) = 0;
  *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFFu;
  uint64_t v94 = *((void *)this + 33);
  int v95 = *(_DWORD *)(v94 + 232);
  *(_DWORD *)(v94 + 232) = v93;
  if (*((void *)this + 344) || *((_DWORD *)this + 726) || *((_DWORD *)this + 727))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 232, 0, 0xFFFFFFFFLL, 8, v95, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 236) = 0;
  uint64_t v96 = *((void *)this + 33);
  int v97 = *(_DWORD *)(v96 + 236);
  *(_DWORD *)(v96 + 236) = 0;
  *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFFu;
  uint64_t v98 = *((void *)this + 33);
  int v99 = *(_DWORD *)(v98 + 236);
  *(_DWORD *)(v98 + 236) = v97;
  uint64_t v100 = *((void *)this + 32);
  unsigned int v101 = *(_DWORD *)(v100 + 17568);
  uint64_t v102 = v100 + 176 * v101;
  if (*(void *)(v102 + 3072) || *(_DWORD *)(v100 + 176 * v101 + 3224) || *(_DWORD *)(v100 + 176 * v101 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v102 + 3072), 236, 0, 0xFFFFFFFFLL, 8, v99, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(unsigned __int8 *)(*((void *)this + 33) + 243) << 24;
  uint64_t v103 = *((void *)this + 33);
  int v104 = *(_DWORD *)(v103 + 240);
  *(_DWORD *)(v103 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFFu;
  uint64_t v105 = *((void *)this + 33);
  int v106 = *(_DWORD *)(v105 + 240);
  *(_DWORD *)(v105 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v104;
  uint64_t v107 = *((void *)this + 32);
  int v108 = *(_DWORD *)(v107 + 5724);
  uint64_t v109 = v107 + 176 * v108;
  if (*(void *)(v109 + 3776) || *(_DWORD *)(v107 + 176 * v108 + 3928) || *(_DWORD *)(v107 + 176 * v108 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v109 + 3776), 240, 0, 0xFFFFFFFFLL, 8, v106, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 244) = *(unsigned __int8 *)(*((void *)this + 33) + 247) << 24;
  uint64_t v110 = *((void *)this + 33);
  int v111 = *(_DWORD *)(v110 + 244);
  *(_DWORD *)(v110 + 244) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFFu;
  uint64_t v112 = *((void *)this + 33);
  int v113 = *(_DWORD *)(v112 + 244);
  *(_DWORD *)(v112 + 244) = v111;
  uint64_t v114 = *((void *)this + 32);
  int v115 = *(_DWORD *)(v114 + 5720);
  uint64_t v116 = v114 + 176 * v115;
  if (*(void *)(v116 + 3776) || *(_DWORD *)(v114 + 176 * v115 + 3928) || *(_DWORD *)(v114 + 176 * v115 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v116 + 3776), 244, 0, 0xFFFFFFFFLL, 8, v113, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 248) = 0;
  uint64_t v117 = *((void *)this + 33);
  int v118 = *(_DWORD *)(v117 + 248);
  *(_DWORD *)(v117 + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFFu;
  uint64_t v119 = *((void *)this + 33);
  int v120 = *(_DWORD *)(v119 + 248);
  *(_DWORD *)(v119 + 248) = v118;
  uint64_t v121 = *((void *)this + 32);
  int v122 = *(_DWORD *)(v121 + 5716);
  uint64_t v123 = v121 + 176 * v122;
  if (*(void *)(v123 + 5360) || *(_DWORD *)(v121 + 176 * v122 + 5512) || *(_DWORD *)(v121 + 176 * v122 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v123 + 5360), 248, 0, 0xFFFFFFFFLL, 8, v120, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
  uint64_t v124 = *((void *)this + 33);
  int v125 = *(_DWORD *)(v124 + 252);
  *(_DWORD *)(v124 + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFFu;
  uint64_t v126 = *((void *)this + 33);
  int v127 = *(_DWORD *)(v126 + 252);
  *(_DWORD *)(v126 + 252) = v125;
  uint64_t v128 = *((void *)this + 32);
  int v129 = *(_DWORD *)(v128 + 5712);
  uint64_t v130 = v128 + 176 * v129;
  if (*(void *)(v130 + 5360) || *(_DWORD *)(v128 + 176 * v129 + 5512) || *(_DWORD *)(v128 + 176 * v129 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v130 + 5360), 252, 0, 0xFFFFFFFFLL, 8, v127, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 264) = 0;
  *(_DWORD *)(*((void *)this + 33) + 268) = 0;
  *(_DWORD *)(*((void *)this + 33) + 272) = 0;
  uint64_t v131 = *((void *)this + 33);
  int v132 = *(_DWORD *)(v131 + 264);
  *(_DWORD *)(v131 + 264) = 0;
  *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFFu;
  uint64_t v133 = *((void *)this + 33);
  int v134 = *(_DWORD *)(v133 + 264);
  *(_DWORD *)(v133 + 264) = v132;
  uint64_t v135 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v135 || *(_DWORD *)(v135 + 152) || *(_DWORD *)(v135 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v135, 264, *(_DWORD *)(v135 + 52), 0xFFFFFFFFLL, 8, v134, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v136 = v3;
  uint64_t v137 = *((void *)this + 33);
  int v138 = *(_DWORD *)(v137 + 272);
  *(_DWORD *)(v137 + 272) = 0;
  *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFFu;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 272);
  *(_DWORD *)(v139 + 272) = v138;
  uint64_t v141 = *((void *)this + 32);
  uint64_t v142 = *(void *)(v141 + 376 * v6 + 5736);
  if (*(void *)v142 || *(_DWORD *)(v142 + 152) || *(_DWORD *)(v142 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v142, 272, *(_DWORD *)(v142 + 56), 0xFFFFFFFFLL, 8, v140, 4);
    if (result) {
      return result;
    }
    uint64_t v141 = *((void *)this + 32);
  }
  int v143 = *(_DWORD *)(v141 + 2648);
  uint64_t v144 = *((void *)this + 33);
  int v145 = *(_DWORD *)(v144 + 260);
  *(_DWORD *)(v144 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFFu;
  uint64_t v146 = *((void *)this + 33);
  int v147 = *(_DWORD *)(v146 + 260);
  *(_DWORD *)(v146 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v145;
  uint64_t v148 = *((void *)this + 32);
  if (v143 == 1)
  {
    uint64_t v149 = *(void *)(v148 + 376 * v6 + 5736);
    if (*(void *)v149 || *(_DWORD *)(v149 + 152) || *(_DWORD *)(v149 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v149, 260, *(_DWORD *)(v149 + 64), 0xFFFFFFFFLL, 8, v147, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v150 = *((void *)this + 33);
    int v151 = *(_DWORD *)(v150 + 268);
    *(_DWORD *)(v150 + 268) = 0;
    *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFFu;
    uint64_t v152 = *((void *)this + 33);
    int v153 = *(_DWORD *)(v152 + 268);
    *(_DWORD *)(v152 + 268) = v151;
    uint64_t v154 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v154 || *(_DWORD *)(v154 + 152) || *(_DWORD *)(v154 + 156))
    {
      int v155 = *(_DWORD *)(v154 + 68);
      unsigned int v156 = this;
      goto LABEL_114;
    }
  }
  else
  {
    uint64_t v157 = v148 + 376 * v6;
    if (*(void *)(v157 + 5752) || *(_DWORD *)(v148 + 376 * v6 + 5904) || *(_DWORD *)(v148 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v157 + 5752), 260, 0, 0xFFFFFFFFLL, 8, v147, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v158 = *((void *)this + 33);
    int v159 = *(_DWORD *)(v158 + 268);
    *(_DWORD *)(v158 + 268) = 0;
    *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFFu;
    uint64_t v160 = *((void *)this + 33);
    int v153 = *(_DWORD *)(v160 + 268);
    *(_DWORD *)(v160 + 268) = v159;
    uint64_t v161 = *((void *)this + 32);
    uint64_t v162 = v161 + 376 * v6;
    if (*(void *)(v162 + 5928) || *(_DWORD *)(v161 + 376 * v6 + 6080) || *(_DWORD *)(v161 + 376 * v6 + 6084))
    {
      uint64_t v154 = v162 + 5928;
      unsigned int v156 = this;
      int v155 = 0;
LABEL_114:
      uint64_t result = CAHDec::addToPatcherList((uint64_t)v156, (void *)v154, 268, v155, 0xFFFFFFFFLL, 8, v153, 4);
      if (result) {
        return result;
      }
    }
  }
  if ((v230 & 1) == 0)
  {
    uint64_t v194 = 0;
    uint64_t v195 = 17424;
    do
    {
      uint64_t v196 = *(void *)(*(void *)(*((void *)this + 32) + v195) + 40);
      *(_DWORD *)(*((void *)this + 33) + v194 + 288) = 0;
      *(_DWORD *)(*((void *)this + 33) + v194 + 30pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*((void *)this + 33) + v194 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v194 + 324) = 0;
      uint64_t v197 = *((void *)this + 33) + v194;
      int v198 = *(_DWORD *)(v197 + 300);
      *(_DWORD *)(v197 + 30pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*((void *)this + 33) + v194 + 300) ^= 0xFFFFFFu;
      uint64_t v199 = *((void *)this + 33) + v194;
      int v200 = *(_DWORD *)(v199 + 300);
      *(_DWORD *)(v199 + 30pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v198;
      uint64_t v201 = *(void *)(v196 + 8);
      if (*(void *)v201 || *(_DWORD *)(v201 + 152) || *(_DWORD *)(v201 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v201, (int)v194 + 300, *(_DWORD *)(v201 + 52), 0xFFFFFFFFLL, 8, v200, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v202 = *((void *)this + 33) + v194;
      int v203 = *(_DWORD *)(v202 + 324);
      *(_DWORD *)(v202 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v194 + 324) ^= 0xFFFFFFu;
      uint64_t v204 = *((void *)this + 33) + v194;
      int v205 = *(_DWORD *)(v204 + 324);
      *(_DWORD *)(v204 + 324) = v203;
      uint64_t v206 = *(void *)(v196 + 8);
      if (*(void *)v206 || *(_DWORD *)(v206 + 152) || *(_DWORD *)(v206 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v206, (int)v194 + 324, *(_DWORD *)(v206 + 56), 0xFFFFFFFFLL, 8, v205, 4);
        if (result) {
          return result;
        }
      }
      int v207 = *(_DWORD *)(*((void *)this + 32) + 2648);
      uint64_t v208 = *((void *)this + 33) + v194;
      int v209 = *(_DWORD *)(v208 + 288);
      *(_DWORD *)(v208 + 288) = 0;
      *(_DWORD *)(*((void *)this + 33) + v194 + 288) ^= 0xFFFFFFu;
      uint64_t v210 = *((void *)this + 33) + v194;
      int v211 = *(_DWORD *)(v210 + 288);
      *(_DWORD *)(v210 + 288) = v209;
      if (v207 == 1)
      {
        uint64_t v212 = *(void *)(v196 + 8);
        if (*(void *)v212 || *(_DWORD *)(v212 + 152) || *(_DWORD *)(v212 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v212, (int)v194 + 288, *(_DWORD *)(v212 + 64), 0xFFFFFFFFLL, 8, v211, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v213 = *((void *)this + 33) + v194;
        int v214 = *(_DWORD *)(v213 + 312);
        *(_DWORD *)(v213 + 312) = 0;
        *(_DWORD *)(*((void *)this + 33) + v194 + 312) ^= 0xFFFFFFu;
        uint64_t v215 = *((void *)this + 33) + v194;
        int v216 = *(_DWORD *)(v215 + 312);
        *(_DWORD *)(v215 + 312) = v214;
        uint64_t v217 = *(void *)(v196 + 8);
        if (*(void *)v217 || *(_DWORD *)(v217 + 152) || *(_DWORD *)(v217 + 156))
        {
          int v218 = *(_DWORD *)(v217 + 68);
          int v219 = v194 + 312;
          unsigned int v220 = this;
          goto LABEL_175;
        }
      }
      else
      {
        if (*(void *)(v196 + 24) || *(_DWORD *)(v196 + 176) || *(_DWORD *)(v196 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v196 + 24), (int)v194 + 288, 0, 0xFFFFFFFFLL, 8, v211, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v221 = *((void *)this + 33) + v194;
        int v222 = *(_DWORD *)(v221 + 312);
        *(_DWORD *)(v221 + 312) = 0;
        *(_DWORD *)(*((void *)this + 33) + v194 + 312) ^= 0xFFFFFFu;
        uint64_t v223 = *((void *)this + 33) + v194;
        int v216 = *(_DWORD *)(v223 + 312);
        *(_DWORD *)(v223 + 312) = v222;
        uint64_t v217 = v196 + 200;
        if (*(void *)(v196 + 200) || *(_DWORD *)(v196 + 352) || *(_DWORD *)(v196 + 356))
        {
          int v219 = v194 + 312;
          unsigned int v220 = this;
          int v218 = 0;
LABEL_175:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v220, (void *)v217, v219, v218, 0xFFFFFFFFLL, 8, v216, 4);
          if (result) {
            return result;
          }
        }
      }
      v195 += 8;
      v194 += 4;
    }
    while (v194 != 12);
  }
  unsigned int v163 = subWidth[*(int *)(*(void *)(*((void *)this + 32) + 17560) + 4)];
  *(_DWORD *)(*((void *)this + 33) + 336) = 0;
  *(_DWORD *)(*((void *)this + 33) + 34pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 344) = 0;
  *(_DWORD *)(*((void *)this + 33) + 348) = 0;
  if (*(_DWORD *)(*((void *)this + 32) + 2644))
  {
    uint64_t v164 = *((void *)this + 33);
    int v165 = *(_DWORD *)(v164 + 336);
    *(_DWORD *)(v164 + 336) = 0;
    *(_DWORD *)(*((void *)this + 33) + 336) ^= 0xFFFFFFu;
    uint64_t v166 = *((void *)this + 33);
    int v167 = *(_DWORD *)(v166 + 336);
    *(_DWORD *)(v166 + 336) = v165;
    uint64_t v168 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v168 || *(_DWORD *)(v168 + 152) || *(_DWORD *)(v168 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v168, 336, *(_DWORD *)(v168 + 52), 0xFFFFFFFFLL, 8, v167, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v169 = *((void *)this + 33);
    int v170 = *(_DWORD *)(v169 + 340);
    *(_DWORD *)(v169 + 34pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + 340) ^= 0xFFFFFFu;
    uint64_t v171 = *((void *)this + 33);
    int v172 = *(_DWORD *)(v171 + 340);
    *(_DWORD *)(v171 + 34pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v170;
    uint64_t v173 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v173 || *(_DWORD *)(v173 + 152) || *(_DWORD *)(v173 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v173, 340, *(_DWORD *)(v173 + 56), 0xFFFFFFFFLL, 8, v172, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v174 = *((void *)this + 33);
    int v175 = *(_DWORD *)(v174 + 344);
    *(_DWORD *)(v174 + 344) = 0;
    *(_DWORD *)(*((void *)this + 33) + 344) ^= 0xC0000000;
    uint64_t v176 = *((void *)this + 33);
    int v177 = *(_DWORD *)(v176 + 344);
    *(_DWORD *)(v176 + 344) = v175;
    uint64_t v178 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v178 || *(_DWORD *)(v178 + 152) || *(_DWORD *)(v178 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v178, 344, *(_DWORD *)(v178 + 52), 192, 6, v177, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v179 = *((void *)this + 33);
    int v180 = *(_DWORD *)(v179 + 348);
    *(_DWORD *)(v179 + 348) = 0;
    *(_DWORD *)(*((void *)this + 33) + 348) ^= 0xC0000000;
    uint64_t v181 = *((void *)this + 33);
    int v182 = *(_DWORD *)(v181 + 348);
    *(_DWORD *)(v181 + 348) = v180;
    uint64_t v183 = *((void *)this + 32);
    uint64_t v184 = *(void *)(v183 + 11768);
    if (*(void *)v184 || *(_DWORD *)(v184 + 152) || *(_DWORD *)(v184 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v184, 348, *(_DWORD *)(v184 + 56), 192, 6, v182, 4);
      if (result) {
        return result;
      }
      uint64_t v183 = *((void *)this + 32);
    }
    if (*(unsigned char *)(v183 + 8))
    {
      *(_DWORD *)(*((void *)this + 33) + 344) = *(_DWORD *)(*((void *)this + 33) + 344) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(v183 + 11768) + 76) >> 6) & 0xFFF));
      unsigned int v185 = (_DWORD *)(*(void *)(*((void *)this + 32) + 11768) + 80);
    }
    else
    {
      if (CAHDecCloverLgh::getSWRStride(this, *(unsigned __int16 *)(v136 + 140) + 1, *(unsigned __int8 *)(v4 + 105) - 8, *(unsigned __int8 *)(v4 + 105) - 8, v163))return 0xFFFFFFFFLL; {
      *(_DWORD *)(*((void *)this + 33) + 344) = *(_DWORD *)(*((void *)this + 33) + 344) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 739) >> 6) & 0xFFF));
      }
      unsigned int v185 = (_DWORD *)((char *)this + 2960);
    }
    *(_DWORD *)(*((void *)this + 33) + 348) = *(_DWORD *)(*((void *)this + 33) + 348) & 0xFFFF8003 | (4 * ((*v185 >> 6) & 0x1FFF));
  }
  if (v229 < 2)
  {
    uint64_t result = 0;
    uint64_t v224 = *((void *)this + 33);
    *(_DWORD *)(v224 + 352) = 65537;
    *(_WORD *)(v224 + 356) = 0;
    *(_WORD *)(v224 + 358) = *(_DWORD *)(v4 + 108) >> 6;
    *(_WORD *)(v224 + 486) = 0;
    *(_WORD *)(v224 + 488) = *(_DWORD *)(v4 + 112) >> 6;
  }
  else
  {
    uint64_t v186 = *((void *)this + 33);
    *(_WORD *)(v186 + 352) = v228;
    if (v227 >= 1)
    {
      uint64_t v187 = v227;
      uint64_t v188 = (unsigned char *)(*(void *)(*((void *)this + 32) + 17560) + 2786);
      do
      {
        if (!*v188) {
          *(_WORD *)(v186 + 2 * v226 + 486) = *(_DWORD *)(v188 - 26) >> 3;
        }
        v188 += 1792;
        --v187;
      }
      while (v187);
    }
    *(_WORD *)(v186 + 354) = v227;
    if (v228 < 1)
    {
      return 0;
    }
    else
    {
      int v189 = (_WORD *)(v186 + 2 * v226 + 356);
      uint64_t v190 = v228;
      uint64_t v191 = *(void *)(*((void *)this + 32) + 17560) + 2786;
      int v192 = (unsigned __int8 *)v191;
      uint64_t result = 0;
      do
      {
        int v193 = *v192;
        v192 += 28;
        if (!v193) {
          *int v189 = *(_DWORD *)(v191 - 18) >> 3;
        }
        uint64_t v191 = (uint64_t)v192;
        --v190;
      }
      while (v190);
    }
  }
  return result;
}

uint64_t CAHDecCloverLgh::getSWRStride(CAHDecCloverLgh *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *(void *)((char *)this + 2956) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 739) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 739) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 739) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 739) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 74pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        unsigned int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecCloverLgh::getTileStartCTU(CAHDecCloverLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 352);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecCloverLgh::getTileEndCTU(CAHDecCloverLgh *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 352);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecCloverLgh::populateAvdWork(CAHDecCloverLgh *this)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  uint64_t v38 = *(void *)(v2 + 16);
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  unint64_t v3 = *(unsigned int *)(v2 + 312);
  if (!v3)
  {
    LOWORD(v8) = 0;
    goto LABEL_34;
  }
  uint64_t v5 = 0;
  uint64_t v39 = 0;
  int v6 = 0;
  LODWORD(v7) = 0;
  int v8 = 0;
  uint64_t v9 = v1 + 500;
  unint64_t v10 = *(unsigned int *)(v2 + 316);
  unint64_t v11 = v10;
  uint64_t v37 = v9;
  while (1)
  {
    uint64_t v36 = v5;
    if (v11) {
      break;
    }
LABEL_31:
    uint64_t v5 = v36 + 1792;
    if (++v39 >= v3)
    {
      uint64_t v1 = *((void *)this + 33);
LABEL_34:
      uint64_t result = 0;
      *(_WORD *)(v1 + 26) = v8;
      *(_DWORD *)(v1 + 32) = 500;
      return result;
    }
  }
  unint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *((void *)this + 32);
    uint64_t v14 = *(void *)(v13 + 17560);
    uint64_t v15 = v14 + v5;
    if (*(unsigned char *)(v14 + v5 + 2786)) {
      goto LABEL_30;
    }
    *(_WORD *)(v9 + 4) = v8;
    *(_WORD *)(v9 + 6) = 0;
    *(_WORD *)(v9 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v6;
    if (!CAVDLghDecoder::GetTileMemInfo(v13, v38 + *(unsigned int *)(v15 + 2780), &v43, &v42)) {
      return 0xFFFFFFFFLL;
    }
    int v41 = v7;
    unsigned int v16 = (void *)v43;
    if (*(void *)v43 || *(_DWORD *)(v43 + 152) || *(_DWORD *)(v43 + 156))
    {
      int v40 = v8;
      int v17 = v6;
      uint64_t v18 = v2;
      int v19 = v42;
      if (HIDWORD(v42) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        BOOL v45 = "populateAvdWork";
        __int16 v46 = 1024;
        int v47 = 848;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        int v19 = v42;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v16, 36 * v41 + 520, v19, 0xFFFFFFFFLL, 0, -1, 4);
      uint64_t v2 = v18;
      int v6 = v17;
      int v8 = v40;
      if (result) {
        return result;
      }
    }
    unsigned int v21 = (_DWORD *)(v14 + v5);
    *(_DWORD *)(v9 + 24) = *(_DWORD *)(v14 + v5 + 2776);
    int v22 = *(_DWORD *)(v15 + 2760);
    int v23 = v22 + 7;
    if (v22 >= 0) {
      int v23 = *(_DWORD *)(v15 + 2760);
    }
    int v24 = v21[692];
    *(_DWORD *)(v9 + 28) = (v23 << 13) & 0xFFFF0000 | (v24 / 8);
    int v25 = v21[691];
    int v27 = v25 - 1;
    BOOL v26 = v25 < 1;
    int v28 = v25 + 6;
    if (!v26) {
      int v28 = v27;
    }
    unsigned int v29 = (v28 << 13) & 0xFFFF0000;
    int v30 = v21[693];
    int v31 = v30 - 1;
    BOOL v26 = v30 < 1;
    int v32 = v30 + 6;
    if (!v26) {
      int v32 = v31;
    }
    *(_DWORD *)(v9 + 32) = v29 | (v32 >> 3);
    if (v22 + v24) {
      __int16 v33 = 4;
    }
    else {
      __int16 v33 = 5;
    }
    *(_WORD *)(v9 + 12) = v33;
    unint64_t v3 = *(unsigned int *)(v2 + 312);
    unint64_t v10 = *(unsigned int *)(v2 + 316);
    if (v12 == v10 && v39 == v3) {
      __int16 v35 = 5;
    }
    else {
      __int16 v35 = 4;
    }
    *(_WORD *)(v9 + 14) = v35;
    ++v6;
    ++v8;
    v9 += 36;
    unint64_t v7 = 0x8E38E38E38E38E39 * ((v9 - v37) >> 2);
LABEL_30:
    ++v12;
    v5 += 28;
    unint64_t v11 = v10;
    if (v12 >= v10) {
      goto LABEL_31;
    }
  }
}

uint64_t CAHDecCloverLgh::allocWorkBuf_SPS(CAHDecCloverLgh *this, int *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  int v4 = a2[1];
  *((void *)this + 366) = *(void *)&vmla_s32((int32x2_t)0x7F0000007FLL, vdup_n_s32((((v4 + 7) >> 3) + 8) >> 3), vadd_s32((int32x2_t)(*(void *)&vshl_u32((uint32x2_t)vdup_n_s32(*a2 + 7), (uint32x2_t)0x200000001) & 0xFFFFFFE1FFFFFFE1), (int32x2_t)0x2000000020)) & 0xFFFFFF80FFFFFF80;
  unsigned int v5 = ((v4 + 63) >> 6) * ((v3 + 63) >> 6);
  *((_DWORD *)this + 737) = 576 * v5;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_8:
    uint64_t v10 = 0;
    char v11 = 1;
    do
    {
      char v12 = v11;
      uint64_t v13 = *((unsigned int *)this + 737);
      if (v13
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 176 * v10 + 5360), v13, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_27;
        }
        int v18 = 136315650;
        int v19 = "allocWorkBuf_SPS";
        __int16 v20 = 1024;
        int v21 = 1022;
        __int16 v22 = 2080;
        int v23 = "MvColo";
        unsigned int v16 = &_os_log_internal;
        goto LABEL_26;
      }
      char v11 = 0;
      uint64_t v10 = 1;
    }
    while ((v12 & 1) != 0);
    unsigned int v14 = 24 * v5;
    *((_DWORD *)this + 741) = 24 * v5;
    uint64_t v15 = 3776;
    if (!v14) {
      goto LABEL_14;
    }
LABEL_13:
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), v14, 7, 1, 0))
    {
LABEL_14:
      while (v15 != 5008)
      {
        unsigned int v14 = *((_DWORD *)this + 741);
        v15 += 176;
        if (v14) {
          goto LABEL_13;
        }
      }
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    int v18 = 136315650;
    int v19 = "allocWorkBuf_SPS";
    __int16 v20 = 1024;
    int v21 = 1028;
    __int16 v22 = 2080;
    int v23 = "segMap";
    unsigned int v16 = &_os_log_internal;
  }
  else
  {
    uint64_t v6 = 14608;
    uint64_t v7 = 16;
    while (1)
    {
      uint64_t v8 = *((unsigned int *)this + 732);
      if (v8
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v6 - 2816), v8, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_27;
        }
        int v18 = 136315650;
        int v19 = "allocWorkBuf_SPS";
        __int16 v20 = 1024;
        int v21 = 1006;
        __int16 v22 = 2080;
        int v23 = "HdrY";
        unsigned int v16 = &_os_log_internal;
        goto LABEL_26;
      }
      uint64_t v9 = *((unsigned int *)this + 733);
      if (v9)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v6), v9, 7, 1, 0))break; {
      }
        }
      v6 += 176;
      if (!--v7) {
        goto LABEL_8;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    int v18 = 136315650;
    int v19 = "allocWorkBuf_SPS";
    __int16 v20 = 1024;
    int v21 = 1011;
    __int16 v22 = 2080;
    int v23 = "HdrC";
    unsigned int v16 = &_os_log_internal;
  }
LABEL_26:
  _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v18, 0x1Cu);
LABEL_27:
  (*(void (**)(CAHDecCloverLgh *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecCloverLgh::allocWorkBuf_PPS(CAHDecCloverLgh *this, void *a2, void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = *(void *)(v5 + 17560);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 100);
  int v9 = (*(unsigned __int8 *)(v6 + 105) + 1) & 0x1FE;
  if (v7 == 3) {
    int v10 = 48;
  }
  else {
    int v10 = 32;
  }
  if (!v7) {
    int v10 = 16;
  }
  int v12 = *(_DWORD *)(v6 + 108);
  int v11 = *(_DWORD *)(v6 + 112);
  unsigned int v13 = (v12 + 15) >> 4;
  int v14 = ~(-1 << *(_DWORD *)(v6 + 96));
  signed int v15 = v13 * ((v10 * v9) >> 3) + (v14 << 7);
  if (v15)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 117, v15, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = 136315650;
        int v23 = "allocWorkBuf_PPS";
        __int16 v24 = 1024;
        int v25 = 1101;
        __int16 v26 = 2080;
        int v27 = "IpAbove";
        unsigned int v16 = &_os_log_internal;
LABEL_34:
        _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v22, 0x1Cu);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  int v17 = 16 * v9;
  if ((192 << v8) + ((v12 + 7) >> 3) * v17 == 192)
  {
LABEL_16:
    signed int v18 = 288 * ((v12 + 63) >> 6) + (v14 << 7);
    if (v18)
    {
      if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 139, v18, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v22 = 136315650;
          int v23 = "allocWorkBuf_PPS";
          __int16 v24 = 1024;
          int v25 = 1110;
          __int16 v26 = 2080;
          int v27 = "LfAboveInfo";
          unsigned int v16 = &_os_log_internal;
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      uint64_t v5 = *((void *)this + 32);
    }
    signed int v19 = ((v11 + 7) >> 3) * v17;
    if (v19)
    {
      if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 150, v19, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v22 = 136315650;
          int v23 = "allocWorkBuf_PPS";
          __int16 v24 = 1024;
          int v25 = 1116;
          __int16 v26 = 2080;
          int v27 = "LfLeftPix";
          unsigned int v16 = &_os_log_internal;
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      uint64_t v5 = *((void *)this + 32);
    }
    uint64_t v20 = ((v11 + 63) >> 2) & 0x3FFFFFF0;
    if (v20)
    {
      if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 161, v20, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v22 = 136315650;
          int v23 = "allocWorkBuf_PPS";
          __int16 v24 = 1024;
          int v25 = 1124;
          __int16 v26 = 2080;
          int v27 = "LfLeftInfo";
          unsigned int v16 = &_os_log_internal;
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      uint64_t v5 = *((void *)this + 32);
    }
    uint64_t result = CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 172, (int)(24 * v13 + 30), 7, 1, 0);
    if (!result) {
      return result;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = 136315650;
      int v23 = "allocWorkBuf_PPS";
      __int16 v24 = 1024;
      int v25 = 1132;
      __int16 v26 = 2080;
      int v27 = "SwLeftPix";
      unsigned int v16 = &_os_log_internal;
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  if (!CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 128, (int)((192 << v8) + ((v12 + 7) >> 3) * v17 - 192), 7, 1, 0))
  {
    uint64_t v5 = *((void *)this + 32);
    goto LABEL_16;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 136315650;
    int v23 = "allocWorkBuf_PPS";
    __int16 v24 = 1024;
    int v25 = 1104;
    __int16 v26 = 2080;
    int v27 = "LfAbovePix";
    unsigned int v16 = &_os_log_internal;
    goto LABEL_34;
  }
LABEL_35:
  (*(void (**)(CAHDecCloverLgh *, void))(*(void *)this + 152))(this, 0);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecCloverLgh::freeWorkBuf_SPS(CAHDecCloverLgh *this)
{
  uint64_t result = *((void *)this + 32);
  if (!*(_DWORD *)(result + 2648))
  {
    uint64_t v3 = 14608;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = (uint64_t *)(result + v3 - 2816);
      if (*v5)
      {
        CAVDDecoder::deallocAVDMem(result, v5);
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3 - 2816) = 0;
      }
      if (*(void *)(result + v3))
      {
        CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + v3));
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3) = 0;
      }
      v3 += 176;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = result + 176 * v6;
    if (*(void *)(v9 + 5360))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(v9 + 5360));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + 176 * v6 + 536pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  for (uint64_t i = 3776; i != 5184; i += 176)
  {
    if (*(void *)(result + i))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + i));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + i) = 0;
    }
  }
  return result;
}

uint64_t *CAHDecCloverLgh::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[256])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 256);
    v2[256] = 0;
  }
  if (v2[278])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 278);
    v2[278] = 0;
  }
  if (v2[234])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 234);
    v2[234] = 0;
  }
  if (v2[300])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 300);
    v2[300] = 0;
  }
  if (v2[322])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 322);
    v2[322] = 0;
  }
  if (v2[344])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 344);
    v2[344] = 0;
  }
  return this;
}

uint64_t CAHDecCloverLgh::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 2944) = a2;
  return this;
}

uint64_t CAHDecCloverLgh::initPicture(CAHDecCloverLgh *this)
{
  return 0;
}

uint64_t CAHDecCloverLgh::populateSlices(CAHDecCloverLgh *this)
{
  return 0;
}

uint64_t CAHDecCloverLgh::getTileIdxAbove(CAHDecCloverLgh *this)
{
  return 0;
}

uint64_t CAHDecCloverLgh::decodeBuffer(CAHDecCloverLgh *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecCloverLgh::decodeBufferSize(CAHDecCloverLgh *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecCloverLgh::decHdrYLinAddr(CAHDecCloverLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 11792);
}

uint64_t CAHDecCloverLgh::decHdrCLinAddr(CAHDecCloverLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 14608);
}

uint64_t CAHDecCloverLgh::decHdrYSize(CAHDecCloverLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 11836);
}

uint64_t CAHDecCloverLgh::decHdrCSize(CAHDecCloverLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 14652);
}

uint64_t CAHDecCloverLgh::decHdrYStride(CAHDecCloverLgh *this)
{
  return *((unsigned int *)this + 734);
}

uint64_t CAHDecCloverLgh::decHdrCStride(CAHDecCloverLgh *this)
{
  return *((unsigned int *)this + 735);
}

void CAHDecCloverLgh::clearSegBuffer(CAHDecCloverLgh *this)
{
}

CAHDecCloverHevc *createCloverHevcDecoder(CAVDHevcDecoder *a1)
{
  uint64_t v2 = (CAHDecCloverHevc *)operator new(0x2CD8uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecCloverHevc::CAHDecCloverHevc(v2, a1);
  }
  return v3;
}

void sub_2239CB91C(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecCloverHevc::CAHDecCloverHevc(CAHDecCloverHevc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D740E38;
  *(_DWORD *)(v1 + 456) = 393948;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecCloverHevc::CAHDecCloverHevc(CAHDecCloverHevc *this, CAVDHevcDecoder *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D740E38;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 393948;
  *(_DWORD *)(v4 + 8) = 2524;
  *(_OWORD *)(v4 + 16) = xmmword_223AD07B0;
  *(_DWORD *)(v4 + 32) = 2;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 393948, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      char v7 = "CAHDecCloverHevc";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v6, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
  }
  else
  {
    uint64_t v5 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v5;
    *((void *)this + 34) = v5;
    bzero((char *)this + 528, 0x2AA0uLL);
  }
}

void sub_2239CBAE0(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecCloverHevc::~CAHDecCloverHevc(CAHDecCloverHevc *this)
{
  *(void *)this = &unk_26D740E38;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecCloverHevc::~CAHDecCloverHevc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecCloverHevc::initPicture(CAHDecCloverHevc *this, int a2, __int16 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 114) = 393948;
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v4;
  if (v4)
  {
    bzero(v4, 0x602DCuLL);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v7 + 16) = a2;
    *(_WORD *)(v7 + 24) = 257;
    *(_WORD *)(v7 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 2867) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "initPicture";
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v9, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecCloverHevc::populateSlices(CAHDecCloverHevc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2524;
    uint64_t v5 = a2;
    do
    {
      CAHDecCloverHevc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 352;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecCloverHevc::populateSliceRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 256);
  int v6 = *(_DWORD *)(v5 + 8320);
  int v7 = *(_DWORD *)(v5 + 8324);
  uint64_t v8 = *(void *)(v5 + 8288);
  uint64_t v9 = *(void *)(v5 + 8280);
  uint64_t v10 = *(void *)(v5 + 8296);
  int v11 = a3;
  uint64_t v12 = v9 + 23176 * v6;
  *(_DWORD *)(a1 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 6 * *(_DWORD *)(v12 + 3636);
  LODWORD(v12) = *(_DWORD *)(v12 + 22880);
  *(_DWORD *)(a2 + 348) = 0x1000000;
  uint64_t v13 = v10 + 2360 * (int)a3;
  unsigned int v14 = (((*(_DWORD *)(v13 + 36) / v12) & 0xFFF) << 12) | 0x1000000;
  *(_DWORD *)(a2 + 348) = v14;
  *(_DWORD *)(a2 + 348) = v14 & 0xFFFFF000 | (*(_DWORD *)(v13 + 36) % v12) & 0xFFF;
  *(_DWORD *)(a2 + 4) = 0;
  char v15 = *(unsigned char *)(v8 + 9856 * v7 + 6477);
  if (v15) {
    char v15 = *(unsigned char *)(v10 + 2360 * (int)a3 + 1880);
  }
  int v16 = v15 & 1;
  *(_DWORD *)(a2 + 4) = v16;
  uint64_t v17 = v10 + 2360 * (int)a3;
  int v19 = *(_DWORD *)(v17 + 44);
  signed int v18 = (int *)(v17 + 44);
  if (v19 == 2) {
    LOBYTE(v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  else {
    int v20 = 5 - *(_DWORD *)(v10 + 2360 * (int)a3 + 1864);
  }
  unsigned int v21 = v16 & 0xFFFFFFF1 | (2 * (v20 & 7));
  *(_DWORD *)(a2 + 4) = v21;
  if (*v18)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *(unsigned __int8 *)(v10 + 2360 * (int)a3 + 616);
    if (*(unsigned char *)(v10 + 2360 * (int)a3 + 616)) {
      int v22 = *(unsigned char *)(v10 + 2360 * (int)a3 + 762) == 0;
    }
  }
  int v23 = v21 | (16 * v22);
  *(_DWORD *)(a2 + 4) = v23;
  if (*v18 == 2)
  {
    char v24 = 0;
  }
  else
  {
    char v24 = *(unsigned char *)(v8 + 9856 * v7 + 17);
    if (v24) {
      char v24 = *(unsigned char *)(v10 + 2360 * (int)a3 + 761);
    }
  }
  unsigned int v25 = v23 & 0xFFFFFFDF | (32 * (v24 & 1));
  *(_DWORD *)(a2 + 4) = v25;
  if (*v18) {
    int v26 = 0;
  }
  else {
    int v26 = *(unsigned char *)(v10 + 2360 * (int)a3 + 760) == 0;
  }
  char v27 = 0;
  int v28 = v25 | (v26 << 6);
  *(_DWORD *)(a2 + 4) = v28;
  uint64_t v29 = v10 + 2360 * (int)a3;
  int v30 = (*(_DWORD *)(v29 + 624) & 0xF) << 7;
  if (*(_DWORD *)(v29 + 624) == -1) {
    int v30 = 0;
  }
  int v31 = v30 | v28;
  *(_DWORD *)(a2 + 4) = v31;
  int v32 = (*(_DWORD *)(v29 + 620) & 0xF) << 11;
  if (*(_DWORD *)(v29 + 620) == -1) {
    int v32 = 0;
  }
  int v33 = v31 | v32;
  *(_DWORD *)(a2 + 4) = v33;
  if (*v18 != 2)
  {
    char v27 = *(unsigned char *)(v9 + 23176 * v6 + 22284);
    if (v27) {
      char v27 = *(unsigned char *)(v10 + 2360 * (int)a3 + 616);
    }
  }
  uint64_t v119 = v8;
  int v120 = v7;
  unsigned int v34 = v33 & 0xFFFF7FFF | ((v27 & 1) << 15);
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a2 + 4) = v34 & 0xFFFCFFFF | ((*v18 & 3) << 16);
  *(_DWORD *)(a2 + 336) = 0;
  if (*v18 > 1
    || !*(void *)(v10 + 2360 * (int)a3 + 2344)
    || *(_DWORD *)(a1 + 11468)
    || ((*(void (**)(void, uint64_t))(**(void **)(a1 + 256) + 344))(*(void *)(a1 + 256), a3),
        uint64_t v35 = *(void *)(a1 + 256),
        *(_DWORD *)(v35 + 9032))
    || (*(_DWORD *)(a1 + 11468) = 1, *(_DWORD *)(a2 + 4) |= 0x40000u, !*(void *)(v35 + 8856))
    && !*(_DWORD *)(v35 + 9008)
    && !*(_DWORD *)(v35 + 9012)
    || (uint64_t result = CAHDec::addToPatcherList(a1, (void *)(v35 + 8856), 352 * (int)a3 + 2860, 0, 0xFFFFFFFFLL, 8, 0xFFFFFF, 4), !result))
  {
    int v118 = v6;
    uint64_t v36 = (unsigned int *)(v29 + 624);
    uint64_t v37 = (unsigned int *)(v29 + 620);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
    uint64_t v38 = a1;
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 256) + 352))(*(void *)(a1 + 256), 0, a3);
    uint64_t v40 = v119;
    int v39 = v120;
    if (*v18 > 1) {
      goto LABEL_38;
    }
    uint64_t v41 = v5 + 8456;
    if ((*v37 & 0x80000000) != 0)
    {
      uint64_t v43 = 0;
      if (*v18) {
        goto LABEL_38;
      }
    }
    else
    {
      int v42 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = a2 + 8;
      do
      {
        uint64_t v45 = v43;
        *(_DWORD *)(v44 + 4 * v43) = v42 & 0xF0 | 0x2DC00000;
        *(_DWORD *)(v44 + 4 * v43) = v42 & 0xF0 | 0x2DC00000 | *(_DWORD *)(v41 + 4 * v43) & 0xF;
        ++v43;
        v42 += 16;
      }
      while (v45 < (int)*v37);
      if (*v18) {
        goto LABEL_38;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v38 + 256) + 352))(*(void *)(v38 + 256), 1, a3);
    uint64_t v40 = v119;
    int v39 = v120;
    if ((*v36 & 0x80000000) == 0)
    {
      int v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = a2 + 4 * v43 + 8;
      do
      {
        *(_DWORD *)(v48 + 4 * v47) = v46 & 0xF0 | 0x2DC00100;
        *(_DWORD *)(v48 + 4 * v47) = v46 & 0xF0 | 0x2DC00100 | *(_DWORD *)(v41 + 4 * v47) & 0xF;
        v46 += 16;
      }
      while (v47++ < (int)*v36);
    }
LABEL_38:
    *(void *)(a2 + 128) = 0x2DD0000000000000;
    int v50 = *v18;
    if (*v18)
    {
      if (v50 != 1 || !*(unsigned char *)(v40 + 9856 * v39 + 49)) {
        goto LABEL_62;
      }
    }
    else if (!*(unsigned char *)(v40 + 9856 * v39 + 50))
    {
LABEL_62:
      uint64_t v85 = v40 + 9856 * v39;
      int v88 = *(unsigned __int8 *)(v85 + 48);
      uint64_t v86 = (unsigned __int8 *)(v85 + 48);
      LOBYTE(v87) = v88;
      if (v88) {
        int v87 = *(_DWORD *)(v10 + 2360 * v11 + 1876);
      }
      unsigned int v89 = *(_DWORD *)(a2 + 328) & 0xFFFFFFE0 | ((_BYTE)v87 + *((_DWORD *)v86 - 1)) & 0x1F;
      *(_DWORD *)(a2 + 328) = v89;
      int v90 = *v86;
      if (v90) {
        int v90 = *(_DWORD *)(v10 + 2360 * v11 + 1872);
      }
      unsigned int v91 = v89 & 0xFFFFFC1F | (32 * (((_BYTE)v90 + *(_DWORD *)(v40 + 9856 * v39 + 40)) & 0x1F));
      *(_DWORD *)(a2 + 328) = v91;
      uint64_t v92 = (_DWORD *)(v40 + 9856 * v39);
      int v93 = v92[7] + *(_DWORD *)(v10 + 2360 * v11 + 1868) + 26;
      *(_DWORD *)(a2 + 328) = v91 & 0xE03FF | ((v93 & 0x7F) << 10) | 0x2D900000;
      *(_DWORD *)(*(void *)(v38 + 256) + 2868) = *(_DWORD *)(v38 + 460) + (v93 << 25 >> 25);
      *(_DWORD *)(a2 + 332) = 0;
      int v94 = v92[1635] & 7;
      *(_DWORD *)(a2 + 332) = v94;
      unsigned int v95 = v94 & 0xFFFFFFC7 | (8 * (v92[1634] & 7));
      *(_DWORD *)(a2 + 332) = v95;
      uint64_t v96 = (unsigned char *)(v9 + 23176 * v118 + 10649);
      int v97 = *v96;
      if (*v96) {
        int v97 = (*(unsigned char *)(v10 + 2360 * v11 + 618) & 1) << 6;
      }
      int v98 = v97 | v95;
      *(_DWORD *)(a2 + 332) = v97 | v95;
      int v99 = *v96;
      if (*v96) {
        int v99 = (*(unsigned char *)(v10 + 2360 * v11 + 617) & 1) << 7;
      }
      int v100 = v99 | v98;
      *(_DWORD *)(a2 + 332) = v99 | v98;
      uint64_t v101 = v10 + 2360 * v11;
      uint64_t v102 = v40 + 9856 * v39;
      if (*(unsigned char *)(v101 + 1881)) {
        uint64_t v103 = (_DWORD *)(v101 + 1888);
      }
      else {
        uint64_t v103 = (_DWORD *)(v102 + 248);
      }
      unsigned int v104 = v100 & 0xFFFFF0FF | ((*v103 & 0xF) << 8);
      *(_DWORD *)(a2 + 332) = v104;
      if (*(unsigned char *)(v101 + 1881)) {
        uint64_t v105 = (_DWORD *)(v101 + 1884);
      }
      else {
        uint64_t v105 = (_DWORD *)(v102 + 244);
      }
      unsigned int v106 = v104 & 0xFFFF0FFF | ((*v105 & 0xF) << 12);
      *(_DWORD *)(a2 + 332) = v106;
      if (*(unsigned char *)(v102 + 239) && *(unsigned char *)(v101 + 1881)) {
        uint64_t v107 = (unsigned __int8 *)(v10 + 2360 * v11 + 1882);
      }
      else {
        uint64_t v107 = (unsigned __int8 *)(v40 + 9856 * v39 + 240);
      }
      int v108 = *v107;
      BOOL v109 = (v99 | v97) != 0;
      int v110 = v106 | ((v108 == 0) << 16);
      *(_DWORD *)(a2 + 332) = v110;
      if (!v108) {
        BOOL v109 = 1;
      }
      uint64_t v111 = v40 + 9856 * v39;
      if (v109) {
        uint64_t v112 = (unsigned char *)(v10 + 2360 * v11 + 1892);
      }
      else {
        uint64_t v112 = (unsigned char *)(v111 + 237);
      }
      unsigned int v113 = v110 & 0xFFFDFFFF | ((*v112 & 1) << 17);
      *(_DWORD *)(a2 + 332) = v113;
      if (*(unsigned char *)(v111 + 52)) {
        int v114 = (*(unsigned char *)(v40 + 9856 * v39 + 236) & 1) << 18;
      }
      else {
        int v114 = 0x40000;
      }
      int v115 = v114 | v113;
      *(_DWORD *)(a2 + 332) = v115;
      int v116 = *(unsigned __int8 *)(v9 + 23176 * v118 + 10650);
      if (*(unsigned char *)(v9 + 23176 * v118 + 10650)) {
        int v116 = (*(unsigned char *)(v9 + 23176 * v118 + 10668) == 0) << 19;
      }
      *(_DWORD *)(a2 + 332) = v115 | v116 | 0x2DA00000;
      if (!(*(unsigned int (**)(void))(**(void **)(v38 + 256) + 448))()) {
        return 0xFFFFFFFFLL;
      }
      if (!MEMORY[0] && !MEMORY[0x98] && !MEMORY[0x9C]
        || (uint64_t result = CAHDec::addToPatcherList(v38, 0, 352 * (int)a3 + 2864, 0, 0xFFFFFFFFLL, 0, -1, 4), !result))
      {
        uint64_t result = 0;
        *(_DWORD *)(a2 + 344) = *(_DWORD *)(v10 + 2360 * v11 + 16) - (*(_DWORD *)(v10 + 2360 * v11 + 2080) >> 3);
      }
      return result;
    }
    unsigned int v51 = 0;
    unsigned int v52 = 0;
    uint64_t v53 = v10 + 2360 * v11;
    uint64_t v54 = v40 + 9856 * v39;
    unsigned __int16 v55 = (unsigned char *)(v54 + 50);
    int v56 = (unsigned char *)(v54 + 49);
    if (v50) {
      int v57 = v56;
    }
    else {
      int v57 = v55;
    }
    int v58 = ((*v57 & 1) << 6) | 0x2DD00000;
    *(_DWORD *)(a2 + 132) = v58;
    char v59 = *(_DWORD *)(v53 + 768);
    unsigned int v60 = v58 & 0xFFFFFFC7 | (8 * (*(_DWORD *)(v53 + 768) & 7));
    *(_DWORD *)(a2 + 132) = v60;
    unsigned __int8 v61 = (*(_DWORD *)(v53 + 772) + *(_DWORD *)(v53 + 768)) & 7;
    *(_DWORD *)(a2 + 132) = v60 & 0xFFFFFFF8 | v61;
    int v62 = 1 << (v59 & 7);
    int v63 = 1 << v61;
    do
    {
      uint64_t v64 = v51;
      if (*(unsigned char *)(v10 + 2360 * v11 + v51 + 776))
      {
        int v65 = ((v51 & 0xF) << 9) | 0x2DE04000;
        uint64_t v66 = a2 + 4 * v52;
        *(_DWORD *)(v66 + 136) = v65;
        uint64_t v67 = v10 + 2360 * v11 + 4 * v64;
        *(_DWORD *)(v66 + 136) = ((unsigned __int16)*(_DWORD *)(v67 + 808) + (_WORD)v62) & 0x1FF | v65;
        *(_DWORD *)(v66 + 232) = 770703360;
        *(_DWORD *)(v66 + 232) = *(unsigned __int16 *)(v67 + 872) | 0x2DF00000;
        ++v52;
      }
      if (*(unsigned char *)(v10 + 2360 * v11 + v64 + 792))
      {
        uint64_t v68 = 0;
        char v69 = 1;
        do
        {
          char v70 = v69;
          int v71 = ((v64 & 0xF) << 9) | (v68 << 14) | 0x2DE08000;
          uint64_t v72 = a2 + 4 * v52;
          *(_DWORD *)(v72 + 136) = v71;
          uint64_t v73 = v10 + 2360 * v11 + 8 * v64 + 4 * v68;
          *(_DWORD *)(v72 + 136) = ((unsigned __int16)*(_DWORD *)(v73 + 936) + (_WORD)v63) & 0x1FF | v71;
          *(_DWORD *)(v72 + 232) = 770703360;
          *(_DWORD *)(v72 + 232) = *(unsigned __int16 *)(v73 + 1608) | 0x2DF00000;
          ++v52;
          uint64_t v68 = 1;
          char v69 = 0;
        }
        while ((v70 & 1) != 0);
      }
      unsigned int v51 = v64 + 1;
    }
    while ((int)v64 + 1 <= *v37);
    if (!*v18)
    {
      unsigned int v74 = 0;
      do
      {
        uint64_t v75 = v74;
        if (*(unsigned char *)(v10 + 2360 * v11 + v74 + 1192))
        {
          int v76 = ((v74 & 0xF) << 9) | 0x2DE06000;
          uint64_t v77 = a2 + 4 * v52;
          *(_DWORD *)(v77 + 136) = v76;
          uint64_t v78 = v10 + 2360 * v11 + 4 * v75;
          *(_DWORD *)(v77 + 136) = ((unsigned __int16)*(_DWORD *)(v78 + 1224) + (_WORD)v62) & 0x1FF | v76;
          *(_DWORD *)(v77 + 232) = 770703360;
          *(_DWORD *)(v77 + 232) = *(unsigned __int16 *)(v78 + 1288) | 0x2DF00000;
          ++v52;
        }
        if (*(unsigned char *)(v10 + 2360 * v11 + v75 + 1208))
        {
          uint64_t v79 = 0;
          char v80 = 1;
          do
          {
            char v81 = v80;
            int v82 = ((v75 & 0xF) << 9) | (v79 << 14) | 0x2DE0A000;
            uint64_t v83 = a2 + 4 * v52;
            *(_DWORD *)(v83 + 136) = v82;
            uint64_t v84 = v10 + 2360 * v11 + 8 * v75 + 4 * v79;
            *(_DWORD *)(v83 + 136) = ((unsigned __int16)*(_DWORD *)(v84 + 1352) + (_WORD)v63) & 0x1FF | v82;
            *(_DWORD *)(v83 + 232) = 770703360;
            *(_DWORD *)(v83 + 232) = *(unsigned __int16 *)(v84 + 1736) | 0x2DF00000;
            ++v52;
            uint64_t v79 = 1;
            char v80 = 0;
          }
          while ((v81 & 1) != 0);
        }
        unsigned int v74 = v75 + 1;
      }
      while ((int)v75 + 1 <= *v36);
    }
    *(_DWORD *)(a2 + 128) = v52;
    goto LABEL_62;
  }
  return result;
}

uint64_t CAHDecCloverHevc::populateCommonRegisters(CAHDecCloverHevc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000000;
  return 0;
}

uint64_t CAHDecCloverHevc::updateCommonRegisters(CAHDecCloverHevc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

uint64_t CAHDecCloverHevc::populateSequenceRegisters(CAHDecCloverHevc *this)
{
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)*((void *)this + 33);
  int v3 = *(_DWORD *)(v1 + 8320);
  uint64_t v4 = *(void *)(v1 + 8280);
  v2[10] = 0;
  uint64_t v5 = v4 + 23176 * v3;
  __int16 v6 = (*(_DWORD *)(v5 + 3608) >> 3) - 1;
  v2[10] = v6 & 0x1FFF;
  v2[10] = ((*(_DWORD *)(v5 + 3612) << 13) + 536805376) & 0x1FFF0000 | v6 & 0x1FFF;
  v2[11] = 0;
  int v7 = *(unsigned char *)(v5 + 10648) & 1;
  v2[11] = v7;
  unsigned int v8 = v7 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v5 + 4440) & 7));
  v2[11] = v8;
  unsigned int v9 = v8 & 0xFFFFFF8F | (16 * (*(_DWORD *)(v5 + 4436) & 7));
  v2[11] = v9;
  unsigned int v10 = v9 & 0xFFFFFE7F | (((*(_DWORD *)(v5 + 4428) + *(_DWORD *)(v5 + 4432)) & 3) << 7);
  v2[11] = v10;
  unsigned int v11 = v10 & 0xFFFFF9FF | ((*(_DWORD *)(v5 + 4428) & 3) << 9);
  v2[11] = v11;
  unsigned int v12 = v11 & 0xFFFFE7FF | (((*(_DWORD *)(v5 + 4424) + *(_DWORD *)(v5 + 4420)) & 3) << 11);
  v2[11] = v12;
  unsigned int v13 = v12 & 0xFFFF9FFF | ((*(_DWORD *)(v5 + 4420) & 3) << 13);
  v2[11] = v13;
  unsigned int v14 = v13 & 0xFFF87FFF | ((*(_DWORD *)(v5 + 3640) & 0xF) << 15);
  v2[11] = v14;
  unsigned int v15 = v14 & 0xFF87FFFF | ((*(_DWORD *)(v5 + 3636) & 0xF) << 19);
  v2[11] = v15;
  unsigned int v16 = v15 & 0xFF7FFFFF | ((*(unsigned char *)(v5 + 3604) & 1) << 23);
  v2[11] = v16;
  v2[11] = v16 & 0xFCFFFFFF | ((*(_DWORD *)(v5 + 3600) & 3) << 24);
  v2[12] = 0;
  if (*(unsigned char *)(v5 + 10650))
  {
    v2[12] = 4096;
    uint64_t v17 = (_DWORD *)(v4 + 23176 * v3);
    int v18 = (v17[2666] + v17[2665]) & 3 | 0x1000;
    v2[12] = v18;
    unsigned int v19 = v18 & 0xFFFFFFF3 | (4 * (v17[2665] & 3));
    v2[12] = v19;
    unsigned int v20 = v19 & 0xFFFFFF0F | (16 * (v17[2664] & 0xF));
    v2[12] = v20;
    v2[12] = v20 & 0xFFFFF0FF | ((v17[2663] & 0xF) << 8);
  }
  v2[13] = 0;
  if (*(unsigned char *)(v4 + 23176 * v3 + 22833))
  {
    int v21 = *(unsigned char *)(v4 + 23176 * v3 + 22844) & 1;
    v2[13] = v21;
    unsigned int v22 = v21 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v4 + 23176 * v3 + 22843) & 1));
    v2[13] = v22;
    unsigned int v23 = v22 & 0xFFFFFFFB | (4 * (*(unsigned char *)(v4 + 23176 * v3 + 22842) & 1));
    v2[13] = v23;
    int v24 = v23 | (8 * (*(unsigned char *)(v4 + 23176 * v3 + 22841) == 0));
    v2[13] = v24;
    unsigned int v25 = v24 & 0xFFFFFFEF | (16 * (*(unsigned char *)(v4 + 23176 * v3 + 22840) & 1));
    v2[13] = v25;
    unsigned int v26 = v25 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v4 + 23176 * v3 + 22839) & 1));
    v2[13] = v26;
    unsigned int v27 = v26 & 0xFFFFFFBF | ((*(unsigned char *)(v4 + 23176 * v3 + 22838) & 1) << 6);
    v2[13] = v27;
    int v28 = v27 | ((*(unsigned char *)(v4 + 23176 * v3 + 22837) & 1) << 7);
    v2[13] = v28;
    int v29 = v28 | ((*(unsigned char *)(v4 + 23176 * v3 + 22836) & 1) << 8);
  }
  else
  {
    int v29 = 8;
  }
  v2[13] = v29;
  uint64_t v30 = v4 + 23176 * v3;
  v2[13] = v29 & 0xFFFFFDFF | ((*(unsigned char *)(v30 + 22285) & 1) << 9);
  if (*(unsigned char *)(v30 + 4444)) {
    CAHDecTansyHevc::copyScalingList((uint64_t)this, (uint64_t)(v2 + 14), *((void *)this + 33) + 536, *(_DWORD *)(v5 + 3600), v4 + 23176 * v3 + 4448);
  }
  return 0;
}

uint64_t CAHDecCloverHevc::getTileHdrMemInfo(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 176 * a2;
  *a3 = v3 + 528;
  a3[1] = v3 + 3344;
  return result;
}

__n128 CAHDecCloverHevc::getMVmemInfo(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1 + 176 * a2;
  long long v5 = *(_OWORD *)(v4 + 7568);
  long long v6 = *(_OWORD *)(v4 + 7600);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 7584);
  *(_OWORD *)(a3 + 32) = v6;
  *(_OWORD *)a3 = v5;
  long long v7 = *(_OWORD *)(v4 + 7616);
  long long v8 = *(_OWORD *)(v4 + 7632);
  long long v9 = *(_OWORD *)(v4 + 7664);
  *(_OWORD *)(a3 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v4 + 7648);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_OWORD *)(a3 + 64) = v8;
  __n128 result = *(__n128 *)(v4 + 7680);
  long long v11 = *(_OWORD *)(v4 + 7696);
  long long v12 = *(_OWORD *)(v4 + 7728);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v4 + 7712);
  *(_OWORD *)(a3 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v12;
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v11;
  *a4 = *(_DWORD *)(a1 + 4 * a2 + 464);
  return result;
}

uint64_t CAHDecCloverHevc::populatePictureRegisters(CAHDecCloverHevc *this)
{
  uint64_t v305 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 8320);
  int v4 = *(_DWORD *)(v2 + 8324);
  uint64_t v5 = *(void *)(v2 + 8280);
  uint64_t v6 = *(void *)(v2 + 8288);
  int v7 = *(_DWORD *)(v2 + 9036);
  unsigned int v8 = *(_DWORD *)(v2 + 3068);
  int v9 = *(_DWORD *)(v2 + 3072);
  int v283 = *(_DWORD *)(v2 + 3064);
  int v284 = *(unsigned __int8 *)(v2 + 3060);
  int v290 = *(unsigned __int8 *)(v2 + 9098);
  int v285 = *(_DWORD *)(v2 + 3660);
  int v286 = *(_DWORD *)(v2 + 3036);
  int v295 = *(_DWORD *)(v2 + 2644);
  uint64_t v291 = *(void *)(v2 + 2088);
  uint64_t v293 = *(unsigned int *)(v2 + 8424);
  int v282 = *(unsigned __int8 *)(v2 + 8);
  uint64_t v287 = *(unsigned int *)(v2 + 8720);
  uint64_t v289 = *(void *)(v2 + 8392);
  int v296 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  int v297 = v3;
  uint64_t v10 = v5 + 23176 * v3;
  int v11 = *(_DWORD *)(v10 + 4420);
  int v12 = *(_DWORD *)(v10 + 4424);
  uint64_t v13 = *((void *)this + 32);
  uint64_t v14 = *((void *)this + 33);
  long long v15 = *(_OWORD *)(v13 + 8536);
  v304[0] = *(_OWORD *)(v13 + 8520);
  v304[1] = v15;
  long long v16 = *(_OWORD *)(v13 + 8568);
  v304[2] = *(_OWORD *)(v13 + 8552);
  v304[3] = v16;
  memset(v303, 0, sizeof(v303));
  memset(v302, 0, sizeof(v302));
  (*(void (**)(void))(*(void *)v13 + 336))();
  uint64_t v17 = 0;
  int v18 = (const double *)(*((void *)this + 32) + 8728);
  do
  {
    float64x2x2_t v306 = vld2q_f64(v18);
    v18 += 4;
    v303[v17] = v306.val[0];
    v302[v17++] = v306.val[1];
  }
  while (v17 != 4);
  *(_DWORD *)(v14 + 76) = 766509056;
  uint64_t v19 = (*(uint64_t (**)(void))(**((void **)this + 32) + 216))(*((void *)this + 32));
  if (v19) {
    int v20 = (*(_DWORD *)(*((void *)this + 32) + 3092) == 2) << 13;
  }
  else {
    int v20 = 0;
  }
  if (v296) {
    int v21 = 688;
  }
  else {
    int v21 = 672;
  }
  if (v295 == 1) {
    int v22 = 1035;
  }
  else {
    int v22 = 11;
  }
  *(void *)(v14 + 76) = v22 | ((v295 != 0) << 12) | v21 | *(_DWORD *)(v14 + 76) & 0xFFFFC100 | v20;
  if ((v7 & 1) != 0 && *(unsigned char *)(v6 + 9856 * v4 + 53) && *(_DWORD *)(v5 + 23176 * v297 + 22888) > 1u
    || (v7 & 2) != 0 && !*(unsigned char *)(v6 + 9856 * v4 + 53) && *(unsigned char *)(v6 + 9856 * v4 + 52))
  {
LABEL_24:
    int v23 = (v9 == 0) << 27;
    goto LABEL_25;
  }
  if ((v7 & 0x20) != 0 && !*(unsigned char *)(v6 + 9856 * v4 + 53))
  {
    int v23 = 0;
    if (*(unsigned char *)(v6 + 9856 * v4 + 52) || v8 < 2) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  int v23 = 0;
LABEL_25:
  char v24 = v12 + v11;
  *(_DWORD *)(v14 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v23;
  *(_DWORD *)(v14 + 84) = 0;
  if (*(unsigned char *)(v6 + 9856 * v4 + 6466))
  {
    unsigned int v25 = (unsigned char *)(v6 + 9856 * v4 + 6477);
    int v26 = 32 * (*v25 & 1);
    *(_DWORD *)(v14 + 84) = v26;
    LOBYTE(v27) = *v25;
    int v28 = v297;
    if (*v25) {
      int v27 = *(_DWORD *)(v6 + 9856 * v4 + 6484);
    }
    unint64_t v29 = v27 & 7;
    int v30 = v29 | v26;
    *(_DWORD *)(v14 + 84) = v29 | v26;
    if (v26)
    {
      int v31 = (_DWORD *)(v6 + 9856 * v4 + 6512);
      int v32 = (unsigned int *)(v14 + 92);
      unint64_t v33 = -1;
      do
      {
        unsigned int v34 = *v32 & 0xFFFFFFE0 | *v31 & 0x1F;
        *int v32 = v34;
        uint64_t v19 = v34 & 0xFFFFFC1F | (32 * (*(v31 - 6) & 0x1F));
        *v32++ = v19;
        ++v33;
        ++v31;
      }
      while (v33 < v29);
    }
    int v35 = *v25;
    if (v35) {
      int v35 = *(_DWORD *)(v6 + 9856 * v4 + 6480);
    }
    int v36 = (8 * ((v24 - (_BYTE)v35) & 3)) | v30;
    *(_DWORD *)(v14 + 84) = v36;
    unsigned int v37 = v36 & 0xFFFFFFBF | ((*(unsigned char *)(v6 + 9856 * v4 + 6476) & 1) << 6);
    *(_DWORD *)(v14 + 84) = v37;
    unsigned int v38 = v37 & 0xFFFFFE7F | ((*(_DWORD *)(v6 + 9856 * v4 + 6472) & 3) << 7);
  }
  else
  {
    unsigned int v38 = 8 * (v24 & 3);
    int v28 = v297;
  }
  *(_DWORD *)(v14 + 84) = v38;
  uint64_t v39 = v6 + 9856 * v4;
  int v42 = *(unsigned __int8 *)(v39 + 34);
  uint64_t v40 = (unsigned char *)(v39 + 34);
  LOBYTE(v41) = v42;
  if (v42) {
    int v41 = *(_DWORD *)(v6 + 9856 * v4 + 36);
  }
  unsigned int v43 = v38 & 0xFFFE7FFF | (((v24 - (_BYTE)v41) & 3) << 15);
  *(_DWORD *)(v14 + 84) = v43;
  uint64_t v44 = v6 + 9856 * v4;
  unsigned int v45 = v43 & 0xFFFFF1FF | ((*(_DWORD *)(v44 + 6460) & 7) << 9);
  *(_DWORD *)(v14 + 84) = v45;
  unsigned int v46 = v45 & 0xFFFFEFFF | ((*(unsigned char *)(v44 + 53) & 1) << 12);
  *(_DWORD *)(v14 + 84) = v46;
  char v48 = *(unsigned char *)(v44 + 52);
  uint64_t v47 = (unsigned char *)(v44 + 52);
  unsigned int v49 = v46 & 0xFFFFDFFF | ((v48 & 1) << 13);
  *(_DWORD *)(v14 + 84) = v49;
  unsigned int v50 = v49 & 0xFFFFBFFF | ((*(v47 - 1) & 1) << 14);
  *(_DWORD *)(v14 + 84) = v50;
  unsigned int v51 = v50 & 0xFFFDFFFF | ((*v40 & 1) << 17);
  *(_DWORD *)(v14 + 84) = v51;
  unsigned int v52 = v51 & 0xFFFBFFFF | ((*(v47 - 19) & 1) << 18);
  *(_DWORD *)(v14 + 84) = v52;
  unsigned int v53 = v52 & 0xFFF7FFFF | ((*(v47 - 20) & 1) << 19);
  *(_DWORD *)(v14 + 84) = v53;
  unsigned int v54 = v53 & 0xFFEFFFFF | ((*(v47 - 36) & 1) << 20);
  *(_DWORD *)(v14 + 84) = v54;
  if (v20) {
    BOOL v55 = 0;
  }
  else {
    BOOL v55 = *(unsigned char *)(v5 + 23176 * v28 + 22284) != 0;
  }
  *(_DWORD *)(v14 + 84) = v54 & 0xFFDFFFFF | (v55 << 21);
  uint64_t v56 = v6 + 9856 * v4;
  unsigned int v57 = *(_DWORD *)(v14 + 88) & 0xFFFFFFE0 | *(_DWORD *)(v56 + 44) & 0x1F;
  *(_DWORD *)(v14 + 88) = v57;
  *(_DWORD *)(v14 + 88) = v57 & 0xFFFFFC1F | (32 * (*(_DWORD *)(v56 + 40) & 0x1F));
  if (*(unsigned char *)(v56 + 252)) {
    CAHDecTansyHevc::copyScalingList(v19, v14 + 116, *((void *)this + 33) + 1532, *(_DWORD *)(v5 + 23176 * v28 + 3600), v6 + 9856 * v4 + 256);
  }
  *(void *)(v14 + 136) = 0;
  if (v9) {
    int v58 = 7340032;
  }
  else {
    int v58 = 3145728;
  }
  *(_DWORD *)(v14 + 144) = v58;
  if (!*(unsigned char *)(*((void *)this + 32) + 3004))
  {
    uint64_t v99 = v5 + 23176 * v28;
    unsigned __int16 v100 = *(_DWORD *)(v99 + 3608) - 1;
    *(_DWORD *)(v14 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v100;
    int v101 = (*(_DWORD *)(v99 + 3612) << 16) - 0x10000;
    *(_DWORD *)(v14 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v101 & 0xFFFF0000 | v100;
    if (*(unsigned char *)(v99 + 3616))
    {
      if ((*(unsigned char *)(v14 + 77) & 8) != 0)
      {
        uint64_t v102 = v5 + 23176 * v28;
        unsigned __int16 v103 = *(_DWORD *)(v102 + 3620) * *(_DWORD *)(v102 + 22852);
        *(_DWORD *)(v14 + 136) = v103;
        *(_DWORD *)(v14 + 136) = v103 | ((unsigned __int16)(*(_WORD *)(v102 + 22856) * *(_DWORD *)(v102 + 3628)) << 16);
        unsigned __int16 v104 = *(_DWORD *)(v99 + 3608) + ~(*(_DWORD *)(v102 + 3624) * *(_DWORD *)(v102 + 22852));
        *(_DWORD *)(v14 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v104 | v101;
        *(_DWORD *)(v14 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v104 | ((unsigned __int16)(*(_WORD *)(v99 + 3612)
                                                          + ~(*(_WORD *)(v102 + 3632) * *(_WORD *)(v102 + 22856))) << 16);
      }
    }
  }
  char v59 = (char *)this + 6160;
  for (uint64_t i = 148; i != 176; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v61 = *((void *)this + 33);
    int v62 = *(_DWORD *)(v61 + i);
    *(_DWORD *)(v61 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFu;
    uint64_t v63 = *((void *)this + 33);
    int v64 = *(_DWORD *)(v63 + i);
    *(_DWORD *)(v63 + i) = v62;
    if (*(void *)v59 || *((_DWORD *)v59 + 38) || *((_DWORD *)v59 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v59, i, 0, 0xFFFFFFFFLL, 8, v64, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 28) = *(_DWORD *)(*((void *)this + 33) + i + 28) & 0x800001FF | (((*((_DWORD *)this + 2864) >> 9) & 0x3FFFFF) << 9);
    v59 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 204) = 0;
  *(_DWORD *)(*((void *)this + 33) + 208) = 0;
  *(_DWORD *)(*((void *)this + 33) + 212) = 0;
  uint64_t v66 = *((void *)this + 33);
  int v67 = *(_DWORD *)(v66 + 212);
  *(_DWORD *)(v66 + 212) = 0;
  *(_DWORD *)(*((void *)this + 33) + 212) ^= 0xFFFFFFu;
  uint64_t v68 = *((void *)this + 33);
  int v69 = *(_DWORD *)(v68 + 212);
  *(_DWORD *)(v68 + 212) = v67;
  if (!*((void *)this + 1298) && !*((_DWORD *)this + 2634) && !*((_DWORD *)this + 2635)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1298, 212, 0, 0xFFFFFFFFLL, 8, v69, 4),
        !result))
  {
    *(_DWORD *)(*((void *)this + 33) + 216) = 0;
    uint64_t v70 = *((void *)this + 33);
    int v71 = *(_DWORD *)(v70 + 216);
    *(_DWORD *)(v70 + 216) = 0;
    *(_DWORD *)(*((void *)this + 33) + 216) ^= 0xFFFFFFu;
    uint64_t v72 = *((void *)this + 33);
    int v73 = *(_DWORD *)(v72 + 216);
    *(_DWORD *)(v72 + 216) = v71;
    if (!*((void *)this + 1320) && !*((_DWORD *)this + 2678) && !*((_DWORD *)this + 2679)) {
      goto LABEL_278;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1320, 216, 0, 0xFFFFFFFFLL, 8, v73, 4);
    if (!result)
    {
LABEL_278:
      *(_DWORD *)(*((void *)this + 33) + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      uint64_t v74 = *((void *)this + 33);
      int v75 = *(_DWORD *)(v74 + 220);
      *(_DWORD *)(v74 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*((void *)this + 33) + 220) ^= 0xFFFFFFu;
      uint64_t v76 = *((void *)this + 33);
      int v77 = *(_DWORD *)(v76 + 220);
      *(_DWORD *)(v76 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v75;
      if (!*((void *)this + 1342) && !*((_DWORD *)this + 2722) && !*((_DWORD *)this + 2723)) {
        goto LABEL_279;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1342, 220, 0, 0xFFFFFFFFLL, 8, v77, 4);
      if (!result)
      {
LABEL_279:
        *(_DWORD *)(*((void *)this + 33) + 224) = 0;
        uint64_t v78 = *((void *)this + 33);
        int v79 = *(_DWORD *)(v78 + 224);
        *(_DWORD *)(v78 + 224) = 0;
        *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFFu;
        uint64_t v80 = *((void *)this + 33);
        int v81 = *(_DWORD *)(v80 + 224);
        *(_DWORD *)(v80 + 224) = v79;
        if (!*((void *)this + 1364) && !*((_DWORD *)this + 2766) && !*((_DWORD *)this + 2767)) {
          goto LABEL_280;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1364, 224, 0, 0xFFFFFFFFLL, 8, v81, 4);
        if (!result)
        {
LABEL_280:
          *(_DWORD *)(*((void *)this + 33) + 228) = 0;
          uint64_t v82 = *((void *)this + 33);
          int v83 = *(_DWORD *)(v82 + 228);
          *(_DWORD *)(v82 + 228) = 0;
          *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFFu;
          uint64_t v84 = *((void *)this + 33);
          int v85 = *(_DWORD *)(v84 + 228);
          *(_DWORD *)(v84 + 228) = v83;
          if (!*((void *)this + 1386) && !*((_DWORD *)this + 2810) && !*((_DWORD *)this + 2811)) {
            goto LABEL_281;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1386, 228, 0, 0xFFFFFFFFLL, 8, v85, 4);
          if (!result)
          {
LABEL_281:
            *(_DWORD *)(*((void *)this + 33) + 232) = 0;
            uint64_t v86 = *((void *)this + 33);
            int v87 = *(_DWORD *)(v86 + 232);
            *(_DWORD *)(v86 + 232) = 0;
            *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFFu;
            uint64_t v88 = *((void *)this + 33);
            int v89 = *(_DWORD *)(v88 + 232);
            *(_DWORD *)(v88 + 232) = v87;
            if (!*((void *)this + 1408) && !*((_DWORD *)this + 2854) && !*((_DWORD *)this + 2855)) {
              goto LABEL_282;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1408, 232, 0, 0xFFFFFFFFLL, 8, v89, 4);
            if (!result)
            {
LABEL_282:
              *(_DWORD *)(*((void *)this + 33) + 236) = 0;
              uint64_t v90 = *((void *)this + 33);
              int v91 = *(_DWORD *)(v90 + 236);
              *(_DWORD *)(v90 + 236) = 0;
              *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFFu;
              uint64_t v92 = *((void *)this + 33);
              int v93 = *(_DWORD *)(v92 + 236);
              *(_DWORD *)(v92 + 236) = v91;
              if (!*((void *)this + 924) && !*((_DWORD *)this + 1886) && !*((_DWORD *)this + 1887)) {
                goto LABEL_283;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 924, 236, 0, 0xFFFFFFFFLL, 8, v93, 4);
              if (!result)
              {
LABEL_283:
                *(_DWORD *)(*((void *)this + 33) + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                uint64_t v94 = *((void *)this + 33);
                int v95 = *(_DWORD *)(v94 + 240);
                *(_DWORD *)(v94 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFFu;
                uint64_t v96 = *((void *)this + 33);
                int v97 = *(_DWORD *)(v96 + 240);
                *(_DWORD *)(v96 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v95;
                int v98 = (char *)this + 176 * v293;
                if (!*((void *)v98 + 946)
                  && !*((_DWORD *)this + 44 * v293 + 1930)
                  && !*((_DWORD *)this + 44 * v293 + 1931))
                {
                  goto LABEL_88;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v98 + 946, 240, 0, 0xFFFFFFFFLL, 8, v97, 4);
                if (!result)
                {
LABEL_88:
                  *(_DWORD *)(*((void *)this + 33) + 244) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 248) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 256) = 0;
                  uint64_t v105 = *((void *)this + 33);
                  if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                  {
                    int v106 = *(_DWORD *)(v105 + 248);
                    *(_DWORD *)(v105 + 248) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFFu;
                    uint64_t v107 = *((void *)this + 33);
                    int v108 = *(_DWORD *)(v107 + 248);
                    *(_DWORD *)(v107 + 248) = v106;
                    int v110 = (void *)(v291 + 8);
                    uint64_t v109 = *(void *)(v291 + 8);
                    if (v290)
                    {
                      if (v109 || *(_DWORD *)(v291 + 160) || *(_DWORD *)(v291 + 164))
                      {
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v291 + 8), 248, *(_DWORD *)(v291 + 68), 0xFFFFFFFFLL, 8, v108, 4);
                        if (result) {
                          return result;
                        }
                      }
                      uint64_t v111 = *((void *)this + 33);
                      int v112 = *(_DWORD *)(v111 + 244);
                      *(_DWORD *)(v111 + 244) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFFu;
                      uint64_t v113 = *((void *)this + 33);
                      int v114 = *(_DWORD *)(v113 + 244);
                      *(_DWORD *)(v113 + 244) = v112;
                      if (*v110 || *(_DWORD *)(v291 + 160) || *(_DWORD *)(v291 + 164))
                      {
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v110, 244, *(_DWORD *)(v291 + 80), 0xFFFFFFFFLL, 8, v114, 4);
                        if (result) {
                          return result;
                        }
                      }
                      if (!v286) {
                        goto LABEL_141;
                      }
                      uint64_t v115 = *((void *)this + 33);
                      int v116 = *(_DWORD *)(v115 + 256);
                      *(_DWORD *)(v115 + 256) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFFu;
                      uint64_t v117 = *((void *)this + 33);
                      int v118 = *(_DWORD *)(v117 + 256);
                      *(_DWORD *)(v117 + 256) = v116;
                      if (*(void *)v289 || *(_DWORD *)(v289 + 152) || *(_DWORD *)(v289 + 156))
                      {
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v289, 256, *(_DWORD *)(v289 + 56), 0xFFFFFFFFLL, 8, v118, 4);
                        if (result) {
                          return result;
                        }
                      }
                      uint64_t v119 = *((void *)this + 33);
                      int v120 = *(_DWORD *)(v119 + 252);
                      *(_DWORD *)(v119 + 252) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFFu;
                      uint64_t v121 = *((void *)this + 33);
                      int v122 = *(_DWORD *)(v121 + 252);
                      *(_DWORD *)(v121 + 252) = v120;
                      if (!*(void *)v289 && !*(_DWORD *)(v289 + 152) && !*(_DWORD *)(v289 + 156)) {
                        goto LABEL_141;
                      }
                      uint64_t v123 = (void *)v289;
                      int v124 = *(_DWORD *)(v289 + 68);
                      int v125 = this;
                    }
                    else
                    {
                      if (v109 || *(_DWORD *)(v291 + 160) || *(_DWORD *)(v291 + 164))
                      {
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v291 + 8), 248, *(_DWORD *)(v291 + 60), 0xFFFFFFFFLL, 8, v108, 4);
                        if (result) {
                          return result;
                        }
                      }
                      uint64_t v143 = *((void *)this + 33);
                      int v144 = *(_DWORD *)(v143 + 256);
                      *(_DWORD *)(v143 + 256) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFFu;
                      uint64_t v145 = *((void *)this + 33);
                      int v146 = *(_DWORD *)(v145 + 256);
                      *(_DWORD *)(v145 + 256) = v144;
                      if (*v110 || *(_DWORD *)(v291 + 160) || *(_DWORD *)(v291 + 164))
                      {
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v110, 256, *(_DWORD *)(v291 + 64), 0xFFFFFFFFLL, 8, v146, 4);
                        if (result) {
                          return result;
                        }
                      }
                      uint64_t v147 = *((void *)this + 33);
                      int v148 = *(_DWORD *)(v147 + 244);
                      *(_DWORD *)(v147 + 244) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFFu;
                      uint64_t v149 = *((void *)this + 33);
                      int v150 = *(_DWORD *)(v149 + 244);
                      *(_DWORD *)(v149 + 244) = v148;
                      if (*v110 || *(_DWORD *)(v291 + 160) || *(_DWORD *)(v291 + 164))
                      {
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v110, 244, *(_DWORD *)(v291 + 72), 0xFFFFFFFFLL, 8, v150, 4);
                        if (result) {
                          return result;
                        }
                      }
                      uint64_t v151 = *((void *)this + 33);
                      int v152 = *(_DWORD *)(v151 + 252);
                      *(_DWORD *)(v151 + 252) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFFu;
                      uint64_t v153 = *((void *)this + 33);
                      int v122 = *(_DWORD *)(v153 + 252);
                      *(_DWORD *)(v153 + 252) = v152;
                      if (!*v110 && !*(_DWORD *)(v291 + 160) && !*(_DWORD *)(v291 + 164)) {
                        goto LABEL_141;
                      }
                      int v124 = *(_DWORD *)(v291 + 76);
                      int v125 = this;
                      uint64_t v123 = (void *)(v291 + 8);
                    }
                    int v142 = 252;
                  }
                  else
                  {
                    int v126 = *(_DWORD *)(v105 + 244);
                    *(_DWORD *)(v105 + 244) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFFu;
                    uint64_t v127 = *((void *)this + 33);
                    int v128 = *(_DWORD *)(v127 + 244);
                    *(_DWORD *)(v127 + 244) = v126;
                    int v129 = (char *)this + 176 * v293;
                    if (*((void *)v129 + 66)
                      || *((_DWORD *)this + 44 * v293 + 170)
                      || *((_DWORD *)this + 44 * v293 + 171))
                    {
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v129 + 66, 244, 0, 0xFFFFFFFFLL, 8, v128, 4);
                      if (result) {
                        return result;
                      }
                    }
                    uint64_t v130 = *((void *)this + 33);
                    int v131 = *(_DWORD *)(v130 + 248);
                    *(_DWORD *)(v130 + 248) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFFu;
                    uint64_t v132 = *((void *)this + 33);
                    int v133 = *(_DWORD *)(v132 + 248);
                    *(_DWORD *)(v132 + 248) = v131;
                    if (*(void *)(v291 + 8) || *(_DWORD *)(v291 + 160) || *(_DWORD *)(v291 + 164))
                    {
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v291 + 8), 248, *(_DWORD *)(v291 + 60), 0xFFFFFFFFLL, 8, v133, 4);
                      if (result) {
                        return result;
                      }
                    }
                    uint64_t v134 = *((void *)this + 33);
                    int v135 = *(_DWORD *)(v134 + 252);
                    *(_DWORD *)(v134 + 252) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFFu;
                    uint64_t v136 = *((void *)this + 33);
                    int v137 = *(_DWORD *)(v136 + 252);
                    *(_DWORD *)(v136 + 252) = v135;
                    int v138 = (char *)this + 176 * v293;
                    if (*((void *)v138 + 418)
                      || *((_DWORD *)this + 44 * v293 + 874)
                      || *((_DWORD *)this + 44 * v293 + 875))
                    {
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v138 + 418, 252, 0, 0xFFFFFFFFLL, 8, v137, 4);
                      if (result) {
                        return result;
                      }
                    }
                    uint64_t v139 = *((void *)this + 33);
                    int v140 = *(_DWORD *)(v139 + 256);
                    *(_DWORD *)(v139 + 256) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFFu;
                    uint64_t v141 = *((void *)this + 33);
                    int v122 = *(_DWORD *)(v141 + 256);
                    *(_DWORD *)(v141 + 256) = v140;
                    if (!*(void *)(v291 + 8) && !*(_DWORD *)(v291 + 160) && !*(_DWORD *)(v291 + 164)) {
                      goto LABEL_141;
                    }
                    int v124 = *(_DWORD *)(v291 + 64);
                    int v125 = this;
                    uint64_t v123 = (void *)(v291 + 8);
                    int v142 = 256;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)v125, v123, v142, v124, 0xFFFFFFFFLL, 8, v122, 4);
                  if (result) {
                    return result;
                  }
LABEL_141:
                  if (!(*(_DWORD *)(v14 + 76) & 0x2000 | v287))
                  {
                    *(_DWORD *)(v14 + 76) |= 0x2000u;
                    *((_DWORD *)this + v293 + 116) = 1;
                    *(_DWORD *)(*((void *)this + 33) + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                    goto LABEL_204;
                  }
                  *((_DWORD *)this + v293 + 116) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                  if (!v287)
                  {
LABEL_204:
                    *(_DWORD *)(*((void *)this + 33) + 42pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 424) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 428) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 432) = 0;
                    if (!v295) {
                      goto LABEL_229;
                    }
                    uint64_t v214 = *((void *)this + 32);
                    if (v284 && v283 == 2)
                    {
                      int v215 = *(_DWORD *)(*(void *)(v214 + 8360) + 60);
                      uint64_t v216 = *((void *)this + 33);
                      int v217 = *(_DWORD *)(v216 + 420);
                      *(_DWORD *)(v216 + 42pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 420) ^= 0xFFFFFFu;
                      uint64_t v218 = *((void *)this + 33);
                      int v219 = *(_DWORD *)(v218 + 420);
                      *(_DWORD *)(v218 + 42pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v217;
                      uint64_t v220 = *(void *)(*((void *)this + 32) + 8360);
                      if (*(void *)v220 || *(_DWORD *)(v220 + 152) || *(_DWORD *)(v220 + 156))
                      {
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v220, 420, v215, 0xFFFFFFFFLL, 8, v219, 4);
                        if (result) {
                          return result;
                        }
                      }
                      uint64_t v221 = *((void *)this + 33);
                      int v222 = *(_DWORD *)(v221 + 428);
                      *(_DWORD *)(v221 + 428) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 428) ^= 0xC0000000;
                      uint64_t v223 = *((void *)this + 33);
                      int v224 = *(_DWORD *)(v223 + 428);
                      *(_DWORD *)(v223 + 428) = v222;
                      uint64_t v225 = *(void *)(*((void *)this + 32) + 8360);
                      if (*(void *)v225 || *(_DWORD *)(v225 + 152) || *(_DWORD *)(v225 + 156))
                      {
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v225, 428, v215, 192, 6, v224, 4);
                        if (result) {
                          return result;
                        }
                      }
                      if (v286)
                      {
                        int v226 = *(_DWORD *)(v289 + 56);
                        uint64_t v227 = *((void *)this + 33);
                        int v228 = *(_DWORD *)(v227 + 424);
                        *(_DWORD *)(v227 + 424) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 424) ^= 0xFFFFFFu;
                        uint64_t v229 = *((void *)this + 33);
                        int v230 = *(_DWORD *)(v229 + 424);
                        *(_DWORD *)(v229 + 424) = v228;
                        if (*(void *)v289 || *(_DWORD *)(v289 + 152) || *(_DWORD *)(v289 + 156))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v289, 424, v226, 0xFFFFFFFFLL, 8, v230, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v231 = *((void *)this + 33);
                        int v232 = *(_DWORD *)(v231 + 432);
                        *(_DWORD *)(v231 + 432) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 432) ^= 0xC0000000;
                        uint64_t v233 = *((void *)this + 33);
                        int v234 = *(_DWORD *)(v233 + 432);
                        *(_DWORD *)(v233 + 432) = v232;
                        if (*(void *)v289 || *(_DWORD *)(v289 + 152) || *(_DWORD *)(v289 + 156))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v289, 432, v226, 192, 6, v234, 4);
                          if (result) {
                            return result;
                          }
                        }
                      }
                      if (v282)
                      {
                        *(_DWORD *)(*((void *)this + 33) + 428) = *(_DWORD *)(*((void *)this + 33) + 428) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 84) >> 6) & 0xFFF));
                        if (!v286) {
                          goto LABEL_229;
                        }
                        uint64_t v235 = v289;
                        goto LABEL_227;
                      }
                      if (!CAHDecCloverHevc::getSWRStride(this, *(unsigned __int16 *)(v14 + 140)- *(unsigned __int16 *)(v14 + 136)+ 1, *(_DWORD *)(v5 + 23176 * v297 + 3636), *(_DWORD *)(v5 + 23176 * v297 + 3640), *(_DWORD *)(v5 + 23176 * v297 + 22852)))
                      {
                        *(_DWORD *)(*((void *)this + 33) + 428) = *(_DWORD *)(*((void *)this + 33) + 428) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 2868) >> 6) & 0xFFF));
                        if (!v286)
                        {
LABEL_229:
                          if (*v47)
                          {
                            unint64_t v237 = 0;
                            uint64_t v238 = v6 + 9856 * v4;
                            unsigned __int16 v239 = *(_WORD *)(v238 + 56) + 1;
                            uint64_t v240 = *((void *)this + 33);
                            *(_WORD *)(v240 + 436) = v239;
                            uint64_t v241 = v238 + 9676;
                            do
                            {
                              *(_WORD *)(v240 + 440 + 2 * v237) = *(_DWORD *)(v241 + 4 * v237);
                              BOOL v242 = v237++ >= v239;
                            }
                            while (!v242);
                            unint64_t v243 = 0;
                            uint64_t v244 = v6 + 9856 * v4;
                            unsigned __int16 v245 = *(_WORD *)(v244 + 60) + 1;
                            *(_WORD *)(v240 + 438) = v245;
                            uint64_t v246 = v244 + 9760;
                            uint64_t v247 = v240 + 482;
                            do
                            {
                              uint64_t result = 0;
                              *(_WORD *)(v247 + 2 * v243) = *(_DWORD *)(v246 + 4 * v243);
                              BOOL v242 = v243++ >= v245;
                            }
                            while (!v242);
                          }
                          else
                          {
                            uint64_t result = 0;
                            uint64_t v250 = *((void *)this + 33);
                            *(_DWORD *)(v250 + 436) = 65537;
                            *(_WORD *)(v250 + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            uint64_t v251 = v5 + 23176 * v297;
                            *(_WORD *)(v250 + 442) = *(_DWORD *)(v251 + 22880);
                            *(_WORD *)(v250 + 482) = 0;
                            *(_WORD *)(v250 + 484) = *(_DWORD *)(v251 + 22888);
                          }
                          return result;
                        }
                        goto LABEL_273;
                      }
                      return 0xFFFFFFFFLL;
                    }
                    int v248 = *(unsigned __int8 *)(v214 + 3004);
                    if (*(unsigned char *)(v214 + 3004))
                    {
                      int v249 = *(_DWORD *)(v214 + 3016);
                      int v248 = *(_DWORD *)(v214 + 3020);
                    }
                    else
                    {
                      int v249 = 0;
                    }
                    uint64_t v252 = *(void *)(v214 + 8360);
                    int v253 = *(_DWORD *)(v252 + 52);
                    int v254 = v253 + v249;
                    if (__CFADD__(v253, v249))
                    {
                      int v255 = 1;
                    }
                    else
                    {
                      int v256 = *(_DWORD *)(v252 + 56);
                      int v257 = v256 + v248;
                      if (!__CFADD__(v256, v248))
                      {
                        uint64_t v262 = *((void *)this + 33);
                        int v263 = *(_DWORD *)(v262 + 420);
                        *(_DWORD *)(v262 + 42pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 420) ^= 0xFFFFFFu;
                        uint64_t v264 = *((void *)this + 33);
                        int v265 = *(_DWORD *)(v264 + 420);
                        *(_DWORD *)(v264 + 42pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v263;
                        uint64_t v266 = *(void *)(*((void *)this + 32) + 8360);
                        if (*(void *)v266 || *(_DWORD *)(v266 + 152) || *(_DWORD *)(v266 + 156))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v266, 420, v254, 0xFFFFFFFFLL, 8, v265, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v267 = *((void *)this + 33);
                        int v268 = *(_DWORD *)(v267 + 424);
                        *(_DWORD *)(v267 + 424) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 424) ^= 0xFFFFFFu;
                        uint64_t v269 = *((void *)this + 33);
                        int v270 = *(_DWORD *)(v269 + 424);
                        *(_DWORD *)(v269 + 424) = v268;
                        uint64_t v271 = *(void *)(*((void *)this + 32) + 8360);
                        if (*(void *)v271 || *(_DWORD *)(v271 + 152) || *(_DWORD *)(v271 + 156))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v271, 424, v257, 0xFFFFFFFFLL, 8, v270, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v272 = *((void *)this + 33);
                        int v273 = *(_DWORD *)(v272 + 428);
                        *(_DWORD *)(v272 + 428) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 428) ^= 0xC0000000;
                        uint64_t v274 = *((void *)this + 33);
                        int v275 = *(_DWORD *)(v274 + 428);
                        *(_DWORD *)(v274 + 428) = v273;
                        uint64_t v276 = *(void *)(*((void *)this + 32) + 8360);
                        if (*(void *)v276 || *(_DWORD *)(v276 + 152) || *(_DWORD *)(v276 + 156))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v276, 428, v254, 192, 6, v275, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v277 = *((void *)this + 33);
                        int v278 = *(_DWORD *)(v277 + 432);
                        *(_DWORD *)(v277 + 432) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 432) ^= 0xC0000000;
                        uint64_t v279 = *((void *)this + 33);
                        int v280 = *(_DWORD *)(v279 + 432);
                        *(_DWORD *)(v279 + 432) = v278;
                        uint64_t v281 = *(void *)(*((void *)this + 32) + 8360);
                        if (*(void *)v281 || *(_DWORD *)(v281 + 152) || *(_DWORD *)(v281 + 156))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v281, 432, v257, 192, 6, v280, 4);
                          if (result) {
                            return result;
                          }
                        }
                        if (v282)
                        {
                          *(_DWORD *)(*((void *)this + 33) + 428) = *(_DWORD *)(*((void *)this + 33) + 428) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 76) >> 6) & 0xFFF));
                          uint64_t v235 = *(void *)(*((void *)this + 32) + 8360);
LABEL_227:
                          uint64_t v236 = (_DWORD *)(v235 + 80);
LABEL_228:
                          *(_DWORD *)(*((void *)this + 33) + 432) = *(_DWORD *)(*((void *)this + 33) + 432) & 0xFFFF8003 | (4 * ((*v236 >> 6) & 0x1FFF));
                          goto LABEL_229;
                        }
                        if (!CAHDecCloverHevc::getSWRStride(this, *(unsigned __int16 *)(v14 + 140)- *(unsigned __int16 *)(v14 + 136)+ 1, *(_DWORD *)(v5 + 23176 * v297 + 3636), *(_DWORD *)(v5 + 23176 * v297 + 3640), *(_DWORD *)(v5 + 23176 * v297 + 22852)))
                        {
                          *(_DWORD *)(*((void *)this + 33) + 428) = *(_DWORD *)(*((void *)this + 33) + 428) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 2868) >> 6) & 0xFFF));
LABEL_273:
                          uint64_t v236 = (_DWORD *)((char *)this + 11476);
                          goto LABEL_228;
                        }
                        return 0xFFFFFFFFLL;
                      }
                      int v255 = 2;
                    }
                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136315394;
                      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                      __int16 v300 = 1024;
                      int v301 = v255;
                      uint64_t v258 = &_os_log_internal;
                      uint64_t v259 = "AppleAVD: %s(): failKind = %d";
                      uint64_t v260 = buf;
                      uint32_t v261 = 18;
LABEL_249:
                      _os_log_impl(&dword_223977000, v258, OS_LOG_TYPE_DEFAULT, v259, v260, v261);
                    }
                    return 0xFFFFFFFFLL;
                  }
                  uint64_t v154 = 0;
                  int v155 = (v287 << 28) - 0x10000000;
                  uint64_t v156 = 4 * v287;
                  int v294 = (uint64_t *)v304;
                  int v292 = (void **)v303;
                  uint64_t v288 = (void **)v302;
                  while (1)
                  {
                    uint64_t v157 = *v294;
                    if (!*v294 || !*(void *)(v157 + 48)) {
                      return 0xFFFFFFFFLL;
                    }
                    if (v296)
                    {
                      uint64_t v158 = *(unsigned int *)(v157 + 44);
                      *(void *)buf = 0;
                      if (((*(uint64_t (**)(void, uint64_t, unsigned char *))(**((void **)this + 32) + 304))(*((void *)this + 32), v158, buf) & 1) == 0)
                      {
                        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                          return 0xFFFFFFFFLL;
                        }
                        __int16 v298 = 0;
                        uint64_t v258 = &_os_log_internal;
                        uint64_t v259 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
                        uint64_t v260 = (uint8_t *)&v298;
                        uint32_t v261 = 2;
                        goto LABEL_249;
                      }
                      *(void *)(v157 + 48) = *(void *)buf + 8;
                    }
                    *(_DWORD *)(*((void *)this + 33) + v154 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                    *(_DWORD *)(*((void *)this + 33) + v154 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*((void *)this + 33) + v154 + 260) & 0xFFFFFFF | v155;
                    *(_DWORD *)(*((void *)this + 33) + v154 + 260) &= 0xF3FFFFFF;
                    *(_WORD *)(*((void *)this + 33) + v154 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v285 - *(_DWORD *)(v157 + 12);
                    *(_DWORD *)(*((void *)this + 33) + v154 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*((void *)this + 33) + v154 + 260) & 0xFFFEFFFF | ((*(_DWORD *)(v157 + 20) == 2) << 16);
                    *(_DWORD *)(*((void *)this + 33) + v154 + 292) = 0;
                    *(_DWORD *)(*((void *)this + 33) + v154 + 324) = 0;
                    *(_DWORD *)(*((void *)this + 33) + v154 + 356) = 0;
                    *(_DWORD *)(*((void *)this + 33) + v154 + 388) = 0;
                    uint64_t v159 = *((void *)this + 33);
                    if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                    {
                      int v160 = v154 + 324;
                      uint64_t v161 = v159 + v154;
                      int v162 = *(_DWORD *)(v161 + 324);
                      *(_DWORD *)(v161 + 324) = 0;
                      *(_DWORD *)(*((void *)this + 33) + v154 + 324) ^= 0xFFFFFFu;
                      uint64_t v163 = *((void *)this + 33) + v154;
                      int v164 = *(_DWORD *)(v163 + 324);
                      *(_DWORD *)(v163 + 324) = v162;
                      int v165 = *(uint64_t **)(v157 + 48);
                      uint64_t v166 = *v165;
                      if (v290)
                      {
                        if (v166 || *((_DWORD *)v165 + 38) || *((_DWORD *)v165 + 39))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v165, v160, *((_DWORD *)v165 + 15), 0xFFFFFFFFLL, 8, v164, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v167 = *((void *)this + 33) + v154;
                        int v168 = *(_DWORD *)(v167 + 292);
                        *(_DWORD *)(v167 + 292) = 0;
                        *(_DWORD *)(*((void *)this + 33) + v154 + 292) ^= 0xFFFFFFu;
                        uint64_t v169 = *((void *)this + 33) + v154;
                        int v170 = *(_DWORD *)(v169 + 292);
                        *(_DWORD *)(v169 + 292) = v168;
                        uint64_t v171 = *(void *)(v157 + 48);
                        if (*(void *)v171 || *(_DWORD *)(v171 + 152) || *(_DWORD *)(v171 + 156))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v171, (int)v154 + 292, *(_DWORD *)(v171 + 72), 0xFFFFFFFFLL, 8, v170, 4);
                          if (result) {
                            return result;
                          }
                        }
                        if (v286)
                        {
                          uint64_t v172 = *((void *)this + 33) + v154;
                          int v173 = *(_DWORD *)(v172 + 388);
                          *(_DWORD *)(v172 + 388) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v154 + 388) ^= 0xFFFFFFu;
                          uint64_t v174 = *((void *)this + 33) + v154;
                          int v175 = *(_DWORD *)(v174 + 388);
                          *(_DWORD *)(v174 + 388) = v173;
                          if (*(void *)v289 || *(_DWORD *)(v289 + 152) || *(_DWORD *)(v289 + 156))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v289, (int)v154 + 388, *(_DWORD *)(v289 + 56), 0xFFFFFFFFLL, 8, v175, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v176 = *((void *)this + 33) + v154;
                          int v177 = *(_DWORD *)(v176 + 356);
                          *(_DWORD *)(v176 + 356) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v154 + 356) ^= 0xFFFFFFu;
                          uint64_t v178 = *((void *)this + 33) + v154;
                          int v179 = *(_DWORD *)(v178 + 356);
                          *(_DWORD *)(v178 + 356) = v177;
                          if (*(void *)v289 || *(_DWORD *)(v289 + 152) || *(_DWORD *)(v289 + 156))
                          {
                            int v180 = v154 + 356;
                            uint64_t v181 = v289;
LABEL_201:
                            int v200 = *(_DWORD *)(v181 + 68);
LABEL_202:
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v181, v180, v200, 0xFFFFFFFFLL, 8, v179, 4);
                            if (result) {
                              return result;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v166 || *((_DWORD *)v165 + 38) || *((_DWORD *)v165 + 39))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v165, v160, *((_DWORD *)v165 + 13), 0xFFFFFFFFLL, 8, v164, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v201 = *((void *)this + 33) + v154;
                        int v202 = *(_DWORD *)(v201 + 388);
                        *(_DWORD *)(v201 + 388) = 0;
                        *(_DWORD *)(*((void *)this + 33) + v154 + 388) ^= 0xFFFFFFu;
                        uint64_t v203 = *((void *)this + 33) + v154;
                        int v204 = *(_DWORD *)(v203 + 388);
                        *(_DWORD *)(v203 + 388) = v202;
                        uint64_t v205 = *(void *)(v157 + 48);
                        if (*(void *)v205 || *(_DWORD *)(v205 + 152) || *(_DWORD *)(v205 + 156))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v205, (int)v154 + 388, *(_DWORD *)(v205 + 56), 0xFFFFFFFFLL, 8, v204, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v206 = *((void *)this + 33) + v154;
                        int v207 = *(_DWORD *)(v206 + 292);
                        *(_DWORD *)(v206 + 292) = 0;
                        *(_DWORD *)(*((void *)this + 33) + v154 + 292) ^= 0xFFFFFFu;
                        uint64_t v208 = *((void *)this + 33) + v154;
                        int v209 = *(_DWORD *)(v208 + 292);
                        *(_DWORD *)(v208 + 292) = v207;
                        uint64_t v210 = *(void *)(v157 + 48);
                        if (*(void *)v210 || *(_DWORD *)(v210 + 152) || *(_DWORD *)(v210 + 156))
                        {
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v210, (int)v154 + 292, *(_DWORD *)(v210 + 64), 0xFFFFFFFFLL, 8, v209, 4);
                          if (result) {
                            return result;
                          }
                        }
                        uint64_t v211 = *((void *)this + 33) + v154;
                        int v212 = *(_DWORD *)(v211 + 356);
                        *(_DWORD *)(v211 + 356) = 0;
                        *(_DWORD *)(*((void *)this + 33) + v154 + 356) ^= 0xFFFFFFu;
                        uint64_t v213 = *((void *)this + 33) + v154;
                        int v179 = *(_DWORD *)(v213 + 356);
                        *(_DWORD *)(v213 + 356) = v212;
                        uint64_t v181 = *(void *)(v157 + 48);
                        if (*(void *)v181 || *(_DWORD *)(v181 + 152) || *(_DWORD *)(v181 + 156))
                        {
                          int v180 = v154 + 356;
                          goto LABEL_201;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v182 = v159 + v154;
                      int v183 = *(_DWORD *)(v182 + 292);
                      *(_DWORD *)(v182 + 292) = 0;
                      *(_DWORD *)(*((void *)this + 33) + v154 + 292) ^= 0xFFFFFFu;
                      uint64_t v184 = *((void *)this + 33) + v154;
                      int v185 = *(_DWORD *)(v184 + 292);
                      *(_DWORD *)(v184 + 292) = v183;
                      uint64_t v186 = *v292;
                      if (**v292 || *((_DWORD *)v186 + 38) || *((_DWORD *)v186 + 39))
                      {
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v186, (int)v154 + 292, 0, 0xFFFFFFFFLL, 8, v185, 4);
                        if (result) {
                          return result;
                        }
                      }
                      uint64_t v187 = *((void *)this + 33) + v154;
                      int v188 = *(_DWORD *)(v187 + 324);
                      *(_DWORD *)(v187 + 324) = 0;
                      *(_DWORD *)(*((void *)this + 33) + v154 + 324) ^= 0xFFFFFFu;
                      uint64_t v189 = *((void *)this + 33) + v154;
                      int v190 = *(_DWORD *)(v189 + 324);
                      *(_DWORD *)(v189 + 324) = v188;
                      uint64_t v191 = *(void *)(v157 + 48);
                      if (*(void *)v191 || *(_DWORD *)(v191 + 152) || *(_DWORD *)(v191 + 156))
                      {
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v191, (int)v154 + 324, *(_DWORD *)(v191 + 52), 0xFFFFFFFFLL, 8, v190, 4);
                        if (result) {
                          return result;
                        }
                      }
                      uint64_t v192 = *((void *)this + 33) + v154;
                      int v193 = *(_DWORD *)(v192 + 356);
                      *(_DWORD *)(v192 + 356) = 0;
                      *(_DWORD *)(*((void *)this + 33) + v154 + 356) ^= 0xFFFFFFu;
                      uint64_t v194 = *((void *)this + 33) + v154;
                      int v195 = *(_DWORD *)(v194 + 356);
                      *(_DWORD *)(v194 + 356) = v193;
                      uint64_t v196 = *v288;
                      if (**v288 || *((_DWORD *)v196 + 38) || *((_DWORD *)v196 + 39))
                      {
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v196, (int)v154 + 356, 0, 0xFFFFFFFFLL, 8, v195, 4);
                        if (result) {
                          return result;
                        }
                      }
                      uint64_t v197 = *((void *)this + 33) + v154;
                      int v198 = *(_DWORD *)(v197 + 388);
                      *(_DWORD *)(v197 + 388) = 0;
                      *(_DWORD *)(*((void *)this + 33) + v154 + 388) ^= 0xFFFFFFu;
                      uint64_t v199 = *((void *)this + 33) + v154;
                      int v179 = *(_DWORD *)(v199 + 388);
                      *(_DWORD *)(v199 + 388) = v198;
                      uint64_t v181 = *(void *)(v157 + 48);
                      if (*(void *)v181 || *(_DWORD *)(v181 + 152) || *(_DWORD *)(v181 + 156))
                      {
                        int v180 = v154 + 388;
                        int v200 = *(_DWORD *)(v181 + 56);
                        goto LABEL_202;
                      }
                    }
                    ++v292;
                    ++v294;
                    ++v288;
                    v154 += 4;
                    if (v156 == v154) {
                      goto LABEL_204;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecCloverHevc::getSWRStride(CAHDecCloverHevc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1434) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 2868) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 2868) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 2868) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 2868) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 2869) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecCloverHevc::getTileStartCTU(CAHDecCloverHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 436);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecCloverHevc::getTileEndCTU(CAHDecCloverHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 436);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecCloverHevc::getTileIdxAbove(CAHDecCloverHevc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 436);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecCloverHevc::populateAvdWork(CAHDecCloverHevc *this, unsigned int a2)
{
  v118[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v4 = *((void *)this + 33);
  int v5 = *(_DWORD *)(v3 + 8320);
  int v6 = *(_DWORD *)(v3 + 8324);
  uint64_t v7 = *(void *)(v3 + 8280);
  uint64_t v8 = *(void *)(v3 + 8288);
  uint64_t v84 = *(void *)(v3 + 8296);
  int v9 = *(_DWORD *)(v3 + 9036);
  unsigned int v10 = *(_DWORD *)(v3 + 3068);
  int v11 = *(_DWORD *)(v3 + 3072);
  uint64_t v101 = v4 + 213724;
  v118[0] = v4 + 213724;
  v118[1] = v4 + 303836;
  uint64_t v81 = v4 + 303836;
  uint64_t v82 = v4;
  uint64_t v117 = 0;
  uint64_t v12 = v7 + 23176 * v5;
  unsigned int v13 = *(_DWORD *)(v12 + 22888);
  int v14 = *(unsigned __int16 *)(v4 + 436);
  int v15 = *(unsigned __int16 *)(v4 + 438);
  if (v9)
  {
    if (*(unsigned char *)(v8 + 9856 * v6 + 53)) {
      BOOL v17 = v13 > 1;
    }
    else {
      BOOL v17 = 0;
    }
    int v16 = v17 && v11 == 0;
  }
  else
  {
    int v16 = 0;
  }
  unsigned int v99 = v15 * v14;
  if ((v9 & 2) != 0 && *(unsigned char *)(v8 + 9856 * v6 + 52))
  {
    if (*(unsigned char *)(v8 + 9856 * v6 + 53)) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v99 > 1;
    }
    int v21 = v19 && v11 == 0;
    int v110 = v21;
  }
  else
  {
    int v110 = 0;
  }
  uint64_t v86 = (unsigned int *)(v12 + 22880);
  if ((v9 & 0x20) != 0 && !*(unsigned char *)(v8 + 9856 * v6 + 53))
  {
    if (*(unsigned char *)(v8 + 9856 * v6 + 52)) {
      BOOL v67 = 0;
    }
    else {
      BOOL v67 = v10 > 1;
    }
    int v69 = v67 && v11 == 0;
    int v96 = v69;
  }
  else
  {
    int v96 = 0;
  }
  LODWORD(v22) = 0;
  unsigned int v112 = *v86;
  if ((v9 & 4) != 0) {
    int v23 = v16;
  }
  else {
    int v23 = 1;
  }
  unsigned int v90 = *(_DWORD *)(v12 + 22888);
  if ((v23 | v110))
  {
    uint64_t v24 = v101;
  }
  else
  {
    uint64_t v24 = v101;
    if ((v96 & 1) == 0)
    {
      uint64_t v22 = *(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & 1;
      uint64_t v24 = v118[v22];
    }
  }
  uint64_t v111 = 0;
  BOOL v102 = 0;
  int v89 = 0;
  uint64_t v85 = 0;
  int v106 = 0;
  uint64_t v109 = 0;
  int v25 = 0;
  uint64_t v26 = 0;
  unsigned int v113 = 0;
  int v27 = 0;
  uint64_t v28 = 0;
  uint64_t v108 = 0x2E8BA2E8BA2E8BA3 * ((v24 - v101) >> 2);
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v29 = v8 + 9856 * v6;
  int v30 = (unsigned char *)(v29 + 52);
  uint64_t v94 = (unsigned char *)(v29 + 53);
  if (v16) {
    int v31 = 12;
  }
  else {
    int v31 = 4;
  }
  int v92 = v31;
  unsigned int v95 = a2 - 1;
  unsigned int v87 = v13 - 2;
  unsigned int v88 = v13 - 1;
  uint64_t v97 = v82 + 2868;
  unsigned __int16 v103 = v30;
  int v98 = v16;
  do
  {
    if (*v30) {
      int v32 = 1;
    }
    else {
      int v32 = v16;
    }
    if (v32 != 1)
    {
      unsigned int v35 = 1;
LABEL_48:
      uint64_t v36 = 0;
      int v91 = 0;
      uint64_t v37 = v84 + 2360 * v111;
      int v93 = (void *)(v37 + 1904);
      unsigned __int16 v100 = (unsigned int *)(v37 + 36);
      uint64_t v105 = (unsigned char *)(v37 + 32);
      uint64_t v107 = v35;
      while (1)
      {
        if (!(v36 | v111))
        {
          uint64_t v41 = v26;
          *(_WORD *)(v24 + 4) = 0;
          *(_WORD *)(v24 + 6) = v22;
          *(_DWORD *)(v24 + 8) = 0;
          *(_WORD *)(v24 + 12) = 0;
          int v27 = *(_DWORD *)(v97 + 352 * v111);
          if (!(*(unsigned int (**)(void))(**((void **)this + 32) + 448))()) {
            return 0xFFFFFFFFLL;
          }
          int v42 = *v100;
          *(_DWORD *)(v24 + 28) = *v100;
          *(_DWORD *)(v24 + 32) = v42;
          unsigned int v113 = 0;
          *(_DWORD *)(v24 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (*(uint64_t (**)(CAHDecCloverHevc *, uint64_t, void))(*(void *)this + 72))(this, v28, v112);
          __int16 v43 = 271;
          goto LABEL_141;
        }
        if (v36)
        {
          int v104 = v27;
          int v38 = *(_DWORD *)(*v93 + 4 * v36 - 4) + 1;
          if (*v103)
          {
            if (*v94)
            {
              unsigned int v39 = *v86;
              unsigned int v40 = (v39 + v26) / v39;
              v38 += v91;
              if (v40 >= *(unsigned __int16 *)(*((void *)this + 33) + 2 * (HIDWORD(v85) + 1) + 482))
              {
                uint64_t v26 = (*(uint64_t (**)(CAHDecCloverHevc *, void, void))(*(void *)this + 64))(this, (v28 + 1), v112);
                int v91 = 0;
                int v25 = v92;
              }
              else
              {
                uint64_t v26 = v89 + v40 * v39;
                if (!v98)
                {
                  int v91 = v38;
                  int v16 = 0;
                  goto LABEL_142;
                }
                int v91 = 0;
                if (v40 == v85 + 1) {
                  int v25 = 72;
                }
                else {
                  int v25 = 8;
                }
              }
            }
            else
            {
              uint64_t v26 = (*(uint64_t (**)(CAHDecCloverHevc *, void, void))(*(void *)this + 64))(this, (v28 + 1), v112);
              int v25 = 4;
            }
          }
          else if (v98)
          {
            uint64_t v26 = (*v86 + v26) / *v86 * *v86;
            int v25 = 8;
          }
          char v48 = (void *)v115;
          if (*(void *)v115 || *(_DWORD *)(v115 + 152) || *(_DWORD *)(v115 + 156))
          {
            int v49 = v22;
            uint64_t v22 = v26;
            int v50 = v114;
            if ((v114 + (unint64_t)v113) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1490;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v50 = v114;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v48, 44 * (int)v108 + 213744, v113 + v50, 0xFFFFFFFFLL, 0, -1, 4);
            uint64_t v26 = v22;
            LODWORD(v22) = v49;
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v24 + 24) = v38;
          v113 += v38;
          int v16 = v98;
          int v27 = v104;
        }
        else
        {
          uint64_t v44 = (void *)v115;
          if (*(void *)v115 || *(_DWORD *)(v115 + 152) || *(_DWORD *)(v115 + 156))
          {
            int v45 = v114;
            if ((v114 + (unint64_t)v113) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1420;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v45 = v114;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v44, 44 * (int)v108 + 213744, v113 + v45, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v24 + 24) = v27 - v113;
          int v27 = *(_DWORD *)(v97 + 352 * v111);
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t *))(**((void **)this + 32) + 448))(*((void *)this + 32), v111, &v115, &v114))return 0xFFFFFFFFLL; {
          uint64_t v26 = *v100;
          }
          if (*v105) {
            int v25 = 2;
          }
          else {
            int v25 = 258;
          }
          if (v16 && v26 % v112 == v89)
          {
            unsigned int v113 = 0;
            if (v26 / v112 == v85 + 1) {
              int v47 = 72;
            }
            else {
              int v47 = 8;
            }
            v25 |= v47;
          }
          else
          {
            unsigned int v113 = 0;
          }
        }
        unsigned int v51 = v28 + 1;
        uint64_t v41 = v26;
        if ((int)v28 + 1 < v99)
        {
          int v52 = (*(uint64_t (**)(CAHDecCloverHevc *, void, void))(*(void *)this + 64))(this, (v28 + 1), v112);
          LODWORD(v26) = v41;
          int v53 = v92;
          if (v41 != v52) {
            int v53 = 0;
          }
          v25 |= v53;
        }
        *(_WORD *)(v24 + 16) = v25;
        if (v109 == v95) {
          *(_WORD *)(v24 + 18) |= 2u;
        }
        if (v28 == v99 - 1) {
          *(_WORD *)(v24 + 18) |= 4u;
        }
        int v54 = v110;
        if (v28 != v99 - 2) {
          int v54 = 0;
        }
        if (v54 == 1) {
          *(_WORD *)(v24 + 18) |= 4u;
        }
        if (v16
          && ((int v55 = *(unsigned __int16 *)(v24 + 10), v90 > 1) ? (v56 = v87 == v55) : (v56 = 0),
              !v56 ? (int v57 = 0) : (int v57 = 1),
              v88 == v55 || v57))
        {
          *(_WORD *)(v24 + 18) |= 8u;
          if ((v25 & 4) != 0)
          {
LABEL_114:
            int v58 = HIDWORD(v109);
            if (*v103 && *v94)
            {
              char v59 = (unsigned __int16 *)(*((void *)this + 33) + 436);
              unsigned int v60 = *v59;
              HIDWORD(v85) = v51 / v60;
              int v89 = v59[v51 % v60 + 2];
              LODWORD(v85) = v59[v51 / v60 + 23];
              BOOL v102 = ((v22 + v85) & 1) == 0;
            }
            uint64_t v28 = (v28 + 1);
            goto LABEL_118;
          }
        }
        else if ((v25 & 4) != 0)
        {
          goto LABEL_114;
        }
        int v58 = HIDWORD(v109);
LABEL_118:
        if ((v25 & 0x44) != 0)
        {
          int v61 = (*(uint64_t (**)(CAHDecCloverHevc *, uint64_t))(*(void *)this + 80))(this, v28);
          LODWORD(v26) = v41;
          if (v58 <= v61) {
            v25 |= 0x20u;
          }
        }
        if (!v36)
        {
          if (!*v105) {
            int v58 = v28;
          }
          int v62 = v106;
          if (!*v105) {
            int v62 = v26;
          }
          int v106 = v62;
        }
        if ((v25 & 0x44) != 0)
        {
          unsigned int v63 = *(unsigned __int16 *)(*((void *)this + 33) + 436);
          if (v58 / v63 + 1 == v28 / v63) {
            v25 |= 0x10u;
          }
        }
        int v64 = (v102 + (v26 / v112)) & 1;
        if (!v16) {
          int v64 = v22;
        }
        if (v110) {
          BOOL v65 = v28 & 1;
        }
        else {
          BOOL v65 = v64;
        }
        ++*((_DWORD *)&v118[-1] + v22);
        v118[v22] += 44;
        char v66 = v96 ^ 1;
        if (v36) {
          char v66 = 1;
        }
        HIDWORD(v109) = v58;
        if ((v66 & 1) == 0 && !*v105) {
          BOOL v65 = !v65;
        }
        uint64_t v24 = v118[v65];
        uint64_t v108 = 0x2E8BA2E8BA2E8BA3 * ((v24 - v101) >> 2);
        *(_WORD *)(v24 + 4) = *((_DWORD *)&v118[-1] + v65);
        *(_WORD *)(v24 + 6) = v65;
        *(_WORD *)(v24 + 8) = v111;
        *(_WORD *)(v24 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v26 / v112;
        *(_WORD *)(v24 + 12) = v28;
        *(_DWORD *)(v24 + 28) = v26;
        *(_DWORD *)(v24 + 32) = v106;
        *(_DWORD *)(v24 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (*(uint64_t (**)(CAHDecCloverHevc *, uint64_t, void))(*(void *)this + 72))(this, v28, v112);
        __int16 v43 = v25;
        LODWORD(v109) = v111;
        LODWORD(v22) = v65;
LABEL_141:
        *(_WORD *)(v24 + 14) = v43;
        uint64_t v26 = v41;
LABEL_142:
        if (v107 == ++v36) {
          goto LABEL_45;
        }
      }
    }
    int v33 = *(_DWORD *)(v84 + 2360 * v111 + 1896);
    BOOL v34 = __CFADD__(v33, 1);
    unsigned int v35 = v33 + 1;
    if (!v34) {
      goto LABEL_48;
    }
LABEL_45:
    ++v111;
    int v30 = v103;
  }
  while (v111 != a2);
  uint64_t v70 = (void *)v115;
  if (!*(void *)v115 && !*(_DWORD *)(v115 + 152) && !*(_DWORD *)(v115 + 156)) {
    goto LABEL_164;
  }
  int v71 = v114;
  if ((v114 + (unint64_t)v113) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "populateAvdWork";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 1580;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
    int v71 = v114;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v70, 44 * (int)v108 + 213744, v113 + v71, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result)
  {
LABEL_164:
    *(_DWORD *)(v24 + 24) = v27 - v113;
    *(_DWORD *)(v24 + 16) = 917519;
    ++*((_DWORD *)&v118[-1] + v22);
    if (v96)
    {
      uint64_t v72 = v101;
      buf[0] = v101;
      buf[1] = v81;
      unsigned int v73 = *(unsigned __int16 *)(v82 + 213732) + 1;
      if (v73 >= a2)
      {
        BOOL v74 = 0;
        uint64_t v76 = buf;
      }
      else
      {
        BOOL v74 = 0;
        BOOL v75 = 0;
        uint64_t v76 = buf;
        do
        {
          if (*(unsigned __int16 *)(v72 + 4) + 1 == *((_DWORD *)&v118[-1] + v74))
          {
            BOOL v75 = !v75;
            *(_DWORD *)(v72 + 36) = *(_DWORD *)(buf[v75] + 32);
          }
          else
          {
            if (v73 != *(unsigned __int16 *)(v72 + 52))
            {
              BOOL v75 = !v75;
              *(_DWORD *)(v72 + 36) = *(_DWORD *)(buf[v75] + 32);
            }
            void *v76 = v72 + 44;
          }
          BOOL v74 = v75;
          uint64_t v76 = &buf[v75];
          uint64_t v72 = *v76;
          unsigned int v73 = *(unsigned __int16 *)(*v76 + 8) + 1;
        }
        while (v73 < a2);
      }
      int v77 = *((_DWORD *)&v118[-1] + v74);
      if (*(unsigned __int16 *)(v72 + 4) + 1 != v77)
      {
        do
        {
          int v78 = *(unsigned __int16 *)(v72 + 48);
          v72 += 44;
        }
        while (v78 + 1 != v77);
        void *v76 = v72;
      }
      *(_DWORD *)(v72 + 36) = *(_DWORD *)(v72 + 40) + 1;
    }
    uint64_t result = 0;
    uint64_t v79 = *((void *)this + 33);
    __int16 v80 = WORD2(v117);
    *(_WORD *)(v79 + 28) = v117;
    *(_WORD *)(v79 + 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v80;
    *(_DWORD *)(v79 + 32) = 213724;
    *(_DWORD *)(v79 + 36) = 303836;
  }
  return result;
}

uint64_t CAHDecCloverHevc::allocWorkBuf_SPS(CAHDecCloverHevc *this, _DWORD *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 5713;
  unsigned int v5 = a2[902];
  int v6 = a2[903];
  int v7 = a2[900];
  unsigned int v9 = a2[5713];
  unsigned int v8 = a2[5714];
  if (v5 < (*(unsigned int (**)(CAHDecCloverHevc *))(*(void *)this + 96))(this)
    || (unsigned int v10 = a2[903], v10 < (*(unsigned int (**)(CAHDecCloverHevc *))(*(void *)this + 104))(this))
    || (unsigned int v11 = a2[909], v11 > (*(unsigned int (**)(CAHDecCloverHevc *))(*(void *)this + 112))(this) - 8)
    || (unsigned int v12 = a2[910], v12 > (*(unsigned int (**)(CAHDecCloverHevc *))(*(void *)this + 120))(this) - 8)
    || (unsigned int v19 = v4[5], v19 - 16 > 0x30)
    || ((1 << (v19 - 16)) & 0x1000000010001) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = a2[902];
      int v14 = a2[903];
      int v15 = a2[909];
      int v16 = a2[910];
      int v17 = v4[5];
      int v31 = 136316418;
      int v32 = "allocWorkBuf_SPS";
      __int16 v33 = 1024;
      int v34 = v13;
      __int16 v35 = 1024;
      *(_DWORD *)uint64_t v36 = v14;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v15;
      __int16 v37 = 1024;
      int v38 = v16;
      __int16 v39 = 1024;
      int v40 = v17;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported bit stream w %d h %d bd %d %d CtbSizeY %d\n", (uint8_t *)&v31, 0x2Au);
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v20 = (v6 + 7) >> 3;
  unsigned int v21 = ((2 * (v5 + 7)) & 0xFFFFFFE0) + 32;
  *((_DWORD *)this + 2862) = v21;
  *((_DWORD *)this + 286pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (((v20 + 8) >> 3) * v21 + 127) & 0xFFFFFF80;
  unsigned int v22 = ((16 * ((((v5 + 7) >> 2) & 0x3FFFFFFE) / v9)) & 0xFFFFFFE0) + 32;
  *((_DWORD *)this + 2863) = v22;
  unsigned int v23 = (((v20 / v8 + 8) >> 3) * v22 + 127) & 0xFFFFFF80;
  if (!v7) {
    unsigned int v23 = 0;
  }
  *((_DWORD *)this + 2861) = v23;
  unsigned int v24 = (v19 & 0xFFFFFFF0) * (v19 >> 4) * v4[7];
  *((_DWORD *)this + 2866) = v24;
  *((_DWORD *)this + 2865) = v4[9] * v24;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_19:
    uint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *((unsigned int *)this + 2865);
      if (v29)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecCloverHevc *)((char *)this + v28 + 7568), v29, 7, 1, 0))break; {
      }
        }
      uint64_t result = 0;
      v28 += 176;
      if (v28 == 2816) {
        return result;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    int v31 = 136315650;
    int v32 = "allocWorkBuf_SPS";
    __int16 v33 = 1024;
    int v34 = 1782;
    __int16 v35 = 2080;
    *(void *)uint64_t v36 = "MvColo";
    int v30 = &_os_log_internal;
  }
  else
  {
    uint64_t v25 = 528;
    while (1)
    {
      uint64_t v26 = *((unsigned int *)this + 2860);
      if (v26
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecCloverHevc *)((char *)this + v25), v26, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_31;
        }
        int v31 = 136315650;
        int v32 = "allocWorkBuf_SPS";
        __int16 v33 = 1024;
        int v34 = 1770;
        __int16 v35 = 2080;
        *(void *)uint64_t v36 = "HdrY";
        int v30 = &_os_log_internal;
        goto LABEL_30;
      }
      uint64_t v27 = *((unsigned int *)this + 2861);
      if (v27)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecCloverHevc *)((char *)this + v25 + 2816), v27, 7, 1, 0))break; {
      }
        }
      v25 += 176;
      if (v25 == 3344) {
        goto LABEL_19;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    int v31 = 136315650;
    int v32 = "allocWorkBuf_SPS";
    __int16 v33 = 1024;
    int v34 = 1771;
    __int16 v35 = 2080;
    *(void *)uint64_t v36 = "HdrC";
    int v30 = &_os_log_internal;
  }
LABEL_30:
  _os_log_impl(&dword_223977000, v30, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v31, 0x1Cu);
LABEL_31:
  (*(void (**)(CAHDecCloverHevc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecCloverHevc::allocWorkBuf_PPS(CAHDecCloverHevc *this, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  unsigned int v5 = (a2[909] + 9) & 0xFFFFFFFE;
  unsigned int v6 = (a2[910] + 9) & 0xFFFFFFFE;
  if (v5 <= v6) {
    unsigned int v7 = (a2[910] + 9) & 0xFFFFFFFE;
  }
  else {
    unsigned int v7 = (a2[909] + 9) & 0xFFFFFFFE;
  }
  int v8 = a2[900];
  if (*((unsigned char *)a3 + 52))
  {
    int v9 = 0;
    int v10 = 0;
    unsigned int v11 = a2[902];
    uint64_t v12 = (a3[14] + 1);
    int v13 = a3 + 17;
    do
    {
      int v14 = *v13++;
      int v15 = a2[5718] + a2[5718] * v14;
      if (v15 + v10 > v11) {
        int v15 = v11 - v10;
      }
      if (v9 <= v15) {
        int v9 = v15;
      }
      v10 += v15;
      --v12;
    }
    while (v12);
  }
  else
  {
    unsigned int v11 = a2[902];
    int v9 = v11;
  }
  unsigned int v16 = 0;
  uint64_t v17 = *((void *)this + 32);
  if (v9 >= -15) {
    int v18 = v9 + 15;
  }
  else {
    int v18 = v9 + 30;
  }
  int v19 = a3[14];
  if (*((unsigned char *)a3 + 52)) {
    int v20 = a3[14];
  }
  else {
    int v20 = 0;
  }
  int v52 = v20;
  if (v8 == 3) {
    int v21 = 48;
  }
  else {
    int v21 = 32;
  }
  if (v8 == 3) {
    int v22 = 176;
  }
  else {
    int v22 = 128;
  }
  if (!v8) {
    int v21 = 16;
  }
  unsigned int v23 = (v21 * v7) >> 3;
  if (!v8) {
    int v22 = 80;
  }
  int v51 = v22;
  int v24 = (v18 >> 4) * v23;
  int v25 = 0;
  unsigned int v26 = 0;
  if (*((unsigned char *)a3 + 52) && v19)
  {
    uint64_t v27 = 0;
    int v28 = 0;
    unsigned int v26 = 0;
    int v25 = 0;
    unsigned int v16 = 0;
    if (v8 == 1) {
      int v29 = 8;
    }
    else {
      int v29 = 16;
    }
    if (!v8) {
      int v29 = 0;
    }
    unsigned int v30 = ((((6 * v29 + 96) * v7) >> 3) + 7) & 0x3FFFFFF8;
    int v31 = v29 + 16;
    signed int v32 = v5 - 8;
    signed int v33 = v6 - 8;
    if (v32 <= v33) {
      signed int v34 = v33;
    }
    else {
      signed int v34 = v32;
    }
    uint64_t v35 = a3[15];
    unsigned int v36 = a2[903];
    BOOL v38 = *(_DWORD *)(v17 + 2644) == 1 && v34 != 0;
    do
    {
      int v39 = a2[5718] + a2[5718] * a3[v27 + 37];
      if (v39 + v28 > v36) {
        int v39 = v36 - v28;
      }
      int v40 = v39 + 15;
      if (v39 < -15) {
        int v40 = v39 + 30;
      }
      if (v27) {
        int v41 = (v40 >> 4) + 1;
      }
      else {
        int v41 = v40 >> 4;
      }
      unsigned int v42 = v41 * v30;
      if (v16 <= v42) {
        unsigned int v16 = v42;
      }
      if (v25 <= (36 * (v40 >> 4))) {
        int v25 = 36 * (v40 >> 4);
      }
      if (v38)
      {
        if (v35 == v27) {
          int v43 = 23;
        }
        else {
          int v43 = 15;
        }
        unsigned int v44 = ((v43 + v39) / 16 * v31) | 6;
        if (v26 <= v44) {
          unsigned int v26 = v44;
        }
      }
      v28 += v39;
      ++v27;
    }
    while (v35 + 1 != v27);
  }
  if (v24 && CAVDDecoder::allocAVDMem(v17, (_OWORD *)this + 649, v24, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v54 = "allocWorkBuf_PPS";
      __int16 v55 = 1024;
      int v56 = 1896;
      __int16 v57 = 2080;
      int v58 = "IpAbove";
      int v45 = &_os_log_internal;
LABEL_91:
      _os_log_impl(&dword_223977000, v45, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", buf, 0x1Cu);
      goto LABEL_92;
    }
    goto LABEL_92;
  }
  if ((v9 + 30) >= 0x1F
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 462, 20 * (v18 >> 4), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v54 = "allocWorkBuf_PPS";
      __int16 v55 = 1024;
      int v56 = 1897;
      __int16 v57 = 2080;
      int v58 = "MvAboveInfo";
      int v45 = &_os_log_internal;
      goto LABEL_91;
    }
LABEL_92:
    (*(void (**)(CAHDecCloverHevc *, void))(*(void *)this + 152))(this, 0);
    return 0xFFFFFFFFLL;
  }
  unsigned int v46 = ((v51 * v7) >> 3) + 7;
  int v47 = v52 + ((v11 + 15) >> 4);
  int v48 = v47 * (v46 & 0x3FFFFFF8) + (v19 << 7);
  if (v48 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 660, v48, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v54 = "allocWorkBuf_PPS";
      __int16 v55 = 1024;
      int v56 = 1898;
      __int16 v57 = 2080;
      int v58 = "LfAbovePix";
      int v45 = &_os_log_internal;
      goto LABEL_91;
    }
    goto LABEL_92;
  }
  int v49 = 36 * v47 + (v19 << 7);
  if (v49 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 671, v49, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v54 = "allocWorkBuf_PPS";
      __int16 v55 = 1024;
      int v56 = 1899;
      __int16 v57 = 2080;
      int v58 = "LfAboveInfo";
      int v45 = &_os_log_internal;
      goto LABEL_91;
    }
    goto LABEL_92;
  }
  if (v16 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 682, (int)v16, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v54 = "allocWorkBuf_PPS";
      __int16 v55 = 1024;
      int v56 = 1900;
      __int16 v57 = 2080;
      int v58 = "LfLeftPix";
      int v45 = &_os_log_internal;
      goto LABEL_91;
    }
    goto LABEL_92;
  }
  if (v25 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 693, v25, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v54 = "allocWorkBuf_PPS";
      __int16 v55 = 1024;
      int v56 = 1901;
      __int16 v57 = 2080;
      int v58 = "LfLeftInfo";
      int v45 = &_os_log_internal;
      goto LABEL_91;
    }
    goto LABEL_92;
  }
  if (!v26) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 704, (int)v26, 7, 1, 0);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v54 = "allocWorkBuf_PPS";
      __int16 v55 = 1024;
      int v56 = 1902;
      __int16 v57 = 2080;
      int v58 = "SwLeftPix";
      int v45 = &_os_log_internal;
      goto LABEL_91;
    }
    goto LABEL_92;
  }
  return result;
}

uint64_t CAHDecCloverHevc::freeWorkBuf_SPS(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(_DWORD *)(*(void *)(this + 256) + 2648))
  {
    for (uint64_t i = 528; i != 3344; i += 176)
    {
      uint64_t v3 = (void *)(v1 + i);
      if (*(void *)(v1 + i))
      {
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v1 + i));
        *uint64_t v3 = 0;
      }
      if (v3[352])
      {
        uint64_t v4 = v3 + 352;
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), v4);
        *uint64_t v4 = 0;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1 + 7568;
  do
  {
    if (*(void *)(v6 + v5))
    {
      this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v6 + v5));
      *(void *)(v6 + v5) = 0;
    }
    v5 += 176;
  }
  while (v5 != 2816);
  return this;
}

uint64_t *CAHDecCloverHevc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  unsigned int v2 = this;
  if (this[1298])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1298);
    v2[1298] = 0;
  }
  if (v2[924])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 924);
    v2[924] = 0;
  }
  if (v2[1320])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1320);
    v2[1320] = 0;
  }
  if (v2[1342])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1342);
    v2[1342] = 0;
  }
  if (v2[1364])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1364);
    v2[1364] = 0;
  }
  if (v2[1386])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1386);
    v2[1386] = 0;
  }
  if (v2[1408])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1408);
    v2[1408] = 0;
  }
  return this;
}

uint64_t CAHDecCloverHevc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 6160;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 11456) = a2;
  return this;
}

uint64_t CAHDecCloverHevc::decodeBuffer(CAHDecCloverHevc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecCloverHevc::decodeBufferSize(CAHDecCloverHevc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecCloverHevc::decHdrYLinAddr(CAHDecCloverHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 66);
}

uint64_t CAHDecCloverHevc::decHdrCLinAddr(CAHDecCloverHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 418);
}

uint64_t CAHDecCloverHevc::decHdrYSize(CAHDecCloverHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 143);
}

uint64_t CAHDecCloverHevc::decHdrCSize(CAHDecCloverHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 847);
}

uint64_t CAHDecCloverHevc::decHdrYStride(CAHDecCloverHevc *this)
{
  return *((unsigned int *)this + 2862);
}

uint64_t CAHDecCloverHevc::decHdrCStride(CAHDecCloverHevc *this)
{
  return *((unsigned int *)this + 2863);
}

CAHDecCloverAvc *createCloverAvcDecoder(CAVDAvcDecoder *a1)
{
  uint64_t v2 = (CAHDecCloverAvc *)operator new(0x3EE0uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecCloverAvc::CAHDecCloverAvc(v2, a1);
  }
  return v3;
}

void sub_2239D0630(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecCloverAvc::CAHDecCloverAvc(CAHDecCloverAvc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D740F88;
  uint64_t v2 = *(void *)(v1 + 256);
  *(_DWORD *)(v1 + 456) = 944 * *(unsigned __int16 *)(v2 + 7500) + 165440;
  *(_DWORD *)(v1 + 8) = 1600;
  *(_OWORD *)(v1 + 16) = xmmword_223AD07E0;
  *(_DWORD *)(v1 + 32) = 1;
  *(void *)(v1 + 56) = v2;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecCloverAvc::CAHDecCloverAvc(CAHDecCloverAvc *this, CAVDAvcDecoder *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D740F88;
  *(void *)(v4 + 256) = a2;
  uint64_t v5 = 944 * *((unsigned __int16 *)a2 + 3750) + 165440;
  *(_DWORD *)(v4 + 456) = v5;
  *(_DWORD *)(v4 + 8) = 1600;
  *(_OWORD *)(v4 + 16) = xmmword_223AD07E0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), v5, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      int v8 = "CAHDecCloverAvc";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v7, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
  }
  else
  {
    uint64_t v6 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v6;
    *((void *)this + 34) = v6;
    *((_OWORD *)this + 995) = 0u;
    *((_OWORD *)this + 996) = 0u;
    *((_OWORD *)this + 997) = 0u;
    *((_OWORD *)this + 998) = 0u;
    *((_OWORD *)this + 999) = 0u;
    *((_OWORD *)this + 100pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 1001) = 0u;
    *((_OWORD *)this + 1002) = 0u;
    *((_OWORD *)this + 1003) = 0u;
    *((_OWORD *)this + 1004) = 0u;
    *((_OWORD *)this + 1005) = 0u;
    bzero((char *)this + 560, 0x3BD0uLL);
  }
}

void sub_2239D085C(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecCloverAvc::~CAHDecCloverAvc(CAHDecCloverAvc *this)
{
  *(void *)this = &unk_26D740F88;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecCloverAvc::~CAHDecCloverAvc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecCloverAvc::initPicture(CAHDecCloverAvc *this, int a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v5 = 944 * *(unsigned __int16 *)(*((void *)this + 32) + 7500) + 165440;
  *((_DWORD *)this + 114) = v5;
  *((_DWORD *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v6;
  if (v6)
  {
    bzero(v6, v5);
    uint64_t v8 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v8 + 16) = a2;
    *(_WORD *)(v8 + 24) = 257;
    *(_WORD *)(v8 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 3975) = 0;
    *((void *)this + 1995) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "initPicture";
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v10, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecCloverAvc::populateSlices(CAHDecCloverAvc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 1600;
    uint64_t v5 = a2;
    do
    {
      CAHDecCloverAvc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 944;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecCloverAvc::populateSliceRegisters(uint64_t a1, uint64_t a2, signed int a3)
{
  char v6 = 0;
  uint64_t v120 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 256);
  int v105 = *(_DWORD *)(v7 + 3616);
  int v103 = *(_DWORD *)(v7 + 3612);
  uint64_t v104 = *(void *)(v7 + 3304);
  uint64_t v102 = *(void *)(v7 + 3296);
  uint64_t v8 = *(void *)(v7 + 3312);
  uint64_t v9 = *(unsigned int *)(v7 + 7064);
  uint64_t v10 = *(void *)(v7 + 3320);
  *(_DWORD *)(a2 + 4) = 0;
  uint64_t v12 = v8 + 1848 * a3;
  int v13 = 32 * (*(unsigned char *)(v12 + 1424) & 3);
  *(_DWORD *)(a2 + 4) = v13;
  int v15 = *(unsigned __int8 *)(v12 + 24);
  uint64_t v14 = (unsigned char *)(v12 + 24);
  if (v15 != 2) {
    char v6 = *(unsigned char *)(v8 + 1848 * a3 + 63);
  }
  unsigned int v16 = v13 & 0xFFFF87FF | ((v6 & 0xF) << 11);
  *(_DWORD *)(a2 + 4) = v16;
  if (*v14 == 1) {
    char v17 = *(unsigned char *)(v8 + 1848 * a3 + 64);
  }
  else {
    char v17 = 0;
  }
  int v18 = ((v17 & 0xF) << 7) | v16;
  *(_DWORD *)(a2 + 4) = v18;
  if (*v14 == 1 && !*(unsigned char *)(v8 + 1848 * a3 + 61)) {
    int v19 = 0x8000;
  }
  else {
    int v19 = 0;
  }
  int v20 = v19 | v18;
  *(_DWORD *)(a2 + 4) = v20;
  if (*v14) {
    int v21 = 0x20000;
  }
  else {
    int v21 = 0x10000;
  }
  if (*v14 == 1) {
    int v22 = 0;
  }
  else {
    int v22 = v21;
  }
  *(_DWORD *)(a2 + 4) = v22 | v20;
  if (*v14 != 1) {
    goto LABEL_20;
  }
  uint64_t v23 = v10 + 13040 * a3 + 7224;
  uint64_t v24 = v8 + 1848 * a3;
  *(void *)(v24 + 1832) = v23;
  if (*(unsigned char *)(v10 + 13040 * a3 + 7227)
    || (uint64_t v25 = *(unsigned int *)(v10 + 13040 * a3 + 7256), *(_DWORD *)(a1 + 4 * v25 + 464)))
  {
    int v26 = 16;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 15900))
    {
      *(void *)(a1 + 1596pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(void *)(v10 + 13040 * a3 + 7264);
      *(_DWORD *)(a1 + 15952) = v25;
      *(_DWORD *)(a1 + 1590pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
      *(_DWORD *)(a2 + 4) |= 0x40000u;
      uint64_t v23 = *(void *)(v24 + 1832);
      if (!v23 || !*(_DWORD *)(a1 + 15900)) {
        goto LABEL_20;
      }
    }
    uint64_t v99 = *(void *)(v23 + 40);
    if (v99 == *(void *)(a1 + 15960)) {
      goto LABEL_20;
    }
    *(void *)(a1 + 1596pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v99;
    *(_DWORD *)(a1 + 15952) = *(_DWORD *)(v23 + 32);
    int v26 = 0x40000;
  }
  *(_DWORD *)(a2 + 4) |= v26;
LABEL_20:
  *(_DWORD *)(a2 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v27 = *(_DWORD *)(a2 + 4);
  if (*v14 == 1 && (v27 & 0x40000) != 0)
  {
    int v29 = (_OWORD *)(a1 + 176 * *(unsigned int *)(*(void *)(v8 + 1848 * a3 + 1832) + 32));
    long long v30 = v29[658];
    long long v31 = v29[660];
    long long v117 = v29[659];
    long long v118 = v31;
    long long v119 = v29[661];
    long long v32 = v29[654];
    long long v33 = v29[656];
    long long v113 = v29[655];
    long long v114 = v33;
    long long v115 = v29[657];
    long long v116 = v30;
    long long v34 = v29[652];
    *(_OWORD *)buf = v29[651];
    *(_OWORD *)&uint8_t buf[16] = v34;
    long long v111 = v29[653];
    long long v112 = v32;
    *(_DWORD *)(a1 + 1590pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
    if (*(void *)buf || *((void *)&v118 + 1))
    {
      uint64_t result = CAHDec::addToPatcherList(a1, buf, 944 * a3 + 2520, 0, 0xFFFFFFFFLL, 8, 0xFFFFFF, 4);
      if (result) {
        return result;
      }
    }
    int v27 = *(_DWORD *)(a2 + 4);
  }
  uint64_t v107 = v10;
  unsigned int v100 = a3;
  uint64_t v101 = a1;
  *(_DWORD *)(a2 + 4) = v27 & 0x77FFFF | 0x2D000000;
  int v106 = v14;
  unsigned int v36 = *v14;
  if (v36 <= 1)
  {
    uint64_t v37 = v7 + 6872;
    uint64_t v38 = v10 + 13040 * a3;
    if (*(_DWORD *)(v38 + 13032))
    {
      unint64_t v39 = 0;
      int v40 = (unsigned int *)(v38 + 13032);
      uint64_t v41 = v10 + 13040 * a3 + 1416;
      unsigned int v42 = &_os_log_internal;
      do
      {
        uint64_t v43 = a2 + 4 * v39;
        int v44 = (16 * (v39 & 0xF)) | 0x2DC00000;
        *(_DWORD *)(v43 + 8) = v44;
        int v45 = (_DWORD *)(v43 + 8);
        if (v9)
        {
          uint64_t v46 = 0;
          while (*(_DWORD *)(*(void *)(v37 + 8 * v46) + 12) != *(_DWORD *)(v41 + 176 * v39 + 12))
          {
            if (v9 == ++v46) {
              goto LABEL_35;
            }
          }
          *int v45 = v46 & 0xF | v44;
        }
        else
        {
LABEL_35:
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            int v47 = *(_DWORD *)(v41 + 176 * v39 + 32);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v39;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v47;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&uint8_t buf[16] = v9;
            _os_log_impl(&dword_223977000, v42, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-0 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
          }
        }
        ++v39;
      }
      while (v39 < *v40);
      unsigned int v36 = *v106;
    }
    else
    {
      LODWORD(v39) = 0;
    }
    if (v36 == 1)
    {
      uint64_t v48 = v10 + 13040 * a3;
      if (*(_DWORD *)(v48 + 13036))
      {
        unint64_t v49 = 0;
        int v50 = (unsigned int *)(v48 + 13036);
        int v51 = &_os_log_internal;
        do
        {
          uint64_t v52 = a2 + 4 * v39;
          int v53 = (16 * (v49 & 0xF)) | 0x2DC00100;
          *(_DWORD *)(v52 + 8) = v53;
          int v54 = (_DWORD *)(v52 + 8);
          if (v9)
          {
            uint64_t v55 = 0;
            while (*(_DWORD *)(*(void *)(v37 + 8 * v55) + 12) != *(_DWORD *)(v107 + 13040 * a3 + 176 * v49 + 7236))
            {
              if (v9 == ++v55) {
                goto LABEL_49;
              }
            }
            *int v54 = v55 & 0xF | v53;
          }
          else
          {
LABEL_49:
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            {
              int v56 = *(_DWORD *)(v107 + 13040 * a3 + 176 * v49 + 7256);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v39;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v56;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v9;
              _os_log_impl(&dword_223977000, v51, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-1 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
            }
          }
          LODWORD(v39) = v39 + 1;
          ++v49;
        }
        while (v49 < *v50);
      }
    }
  }
  *(void *)(a2 + 136) = 0x2DD0000000000000;
  uint64_t v57 = v104 + 604 * v105;
  int v58 = (char *)(v57 + 88);
  uint64_t v59 = (char *)(v57 + 87);
  if (*v106 == 1) {
    unsigned int v60 = v58;
  }
  else {
    unsigned int v60 = v59;
  }
  char v61 = *v60;
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = ((v61 & 3) << 6) | 0x2DD00000;
  int v62 = ((v61 & 3) << 6) | 0x2DD00000 | (8 * (*(unsigned char *)(v8 + 1848 * a3 + 376) & 7));
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v62;
  int v63 = *(unsigned __int8 *)(v102 + 2224 * v103 + 4);
  if (*(unsigned char *)(v102 + 2224 * v103 + 4)) {
    int v63 = *(unsigned char *)(v8 + 1848 * a3 + 377) & 7;
  }
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v63 | v62;
  int v64 = *v106;
  if (v64 != 1) {
    goto LABEL_108;
  }
  int v65 = *v58;
  if (v65 != 2) {
    goto LABEL_62;
  }
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = ((v61 & 3) << 6) | 0x2DD0002D;
  int v64 = *v106;
  if (v64 != 1)
  {
LABEL_108:
    if (v64 || !*v59) {
      goto LABEL_82;
    }
LABEL_66:
    unsigned int v66 = 0;
    unsigned int v67 = 0;
    do
    {
      uint64_t v68 = v66;
      if (*(unsigned char *)(v8 + 1848 * a3 + v66 + 378))
      {
        int v69 = ((v66 & 0xF) << 9) | 0x2DE04000;
        uint64_t v70 = a2 + 4 * v67;
        *(_DWORD *)(v70 + 144) = v69;
        uint64_t v71 = v8 + 1848 * a3 + 2 * v68;
        *(_DWORD *)(v70 + 144) = v69 | *(_WORD *)(v71 + 394) & 0x1FF;
        *(_DWORD *)(v70 + 528) = 770703360;
        *(_DWORD *)(v70 + 528) = *(unsigned __int16 *)(v71 + 426) | 0x2DF00000;
        ++v67;
      }
      if (*(unsigned char *)(v8 + 1848 * a3 + v68 + 458))
      {
        uint64_t v72 = 0;
        char v73 = 1;
        do
        {
          char v74 = v73;
          int v75 = ((v68 & 0xF) << 9) | (v72 << 14) | 0x2DE08000;
          uint64_t v76 = a2 + 4 * v67;
          *(_DWORD *)(v76 + 144) = v75;
          uint64_t v77 = v8 + 1848 * a3 + 4 * v68 + 2 * v72;
          *(_DWORD *)(v76 + 144) = v75 | *(_WORD *)(v77 + 474) & 0x1FF;
          *(_DWORD *)(v76 + 528) = 770703360;
          *(_DWORD *)(v76 + 528) = *(unsigned __int16 *)(v77 + 538) | 0x2DF00000;
          ++v67;
          uint64_t v72 = 1;
          char v73 = 0;
        }
        while ((v74 & 1) != 0);
      }
      unsigned int v66 = v68 + 1;
    }
    while ((int)v68 + 1 <= *(char *)(v8 + 1848 * a3 + 63));
    if (*v106 == 1)
    {
      unsigned int v78 = 0;
      do
      {
        uint64_t v79 = v78;
        if (*(unsigned char *)(v8 + 1848 * a3 + v78 + 602))
        {
          int v80 = ((v78 & 0xF) << 9) | 0x2DE06000;
          uint64_t v81 = a2 + 4 * v67;
          *(_DWORD *)(v81 + 144) = v80;
          uint64_t v82 = v8 + 1848 * a3 + 2 * v79;
          *(_DWORD *)(v81 + 144) = v80 | *(_WORD *)(v82 + 618) & 0x1FF;
          *(_DWORD *)(v81 + 528) = 770703360;
          *(_DWORD *)(v81 + 528) = *(unsigned __int16 *)(v82 + 650) | 0x2DF00000;
          ++v67;
        }
        if (*(unsigned char *)(v8 + 1848 * a3 + v79 + 682))
        {
          uint64_t v83 = 0;
          char v84 = 1;
          do
          {
            char v85 = v84;
            int v86 = ((v79 & 0xF) << 9) | (v83 << 14) | 0x2DE0A000;
            uint64_t v87 = a2 + 4 * v67;
            *(_DWORD *)(v87 + 144) = v86;
            uint64_t v88 = v8 + 1848 * a3 + 4 * v79 + 2 * v83;
            *(_DWORD *)(v87 + 144) = v86 | *(_WORD *)(v88 + 698) & 0x1FF;
            *(_DWORD *)(v87 + 528) = 770703360;
            *(_DWORD *)(v87 + 528) = *(unsigned __int16 *)(v88 + 762) | 0x2DF00000;
            ++v67;
            uint64_t v83 = 1;
            char v84 = 0;
          }
          while ((v85 & 1) != 0);
        }
        unsigned int v78 = v79 + 1;
      }
      while ((int)v79 + 1 <= *(char *)(v8 + 1848 * a3 + 64));
    }
    *(_DWORD *)(a2 + 136) = v67;
    goto LABEL_82;
  }
  int v65 = *v58;
LABEL_62:
  if (v65 == 1) {
    goto LABEL_66;
  }
LABEL_82:
  *(_DWORD *)(a2 + 912) = 0;
  uint64_t v89 = v8 + 1848 * a3;
  *(_DWORD *)(a2 + 912) = (((*(unsigned __int8 *)(v104 + 604 * v105 + 89) + *(unsigned __int8 *)(v89 + 1425)) << 10)
                         + 26624) & 0x1FC00 | 0x2D900000;
  *(_DWORD *)(a2 + 916) = 0;
  int v90 = (*(unsigned char *)(v89 + 1428) == 0) << 17;
  *(_DWORD *)(a2 + 916) = v90;
  if (*(unsigned char *)(v89 + 1428) != 1)
  {
    int v91 = v90 | 0x10000;
    *(_DWORD *)(a2 + 916) = v91;
    uint64_t v92 = v8 + 1848 * a3;
    int v93 = v91 | ((*(unsigned char *)(v92 + 1429) & 0xF) << 8);
    *(_DWORD *)(a2 + 916) = v93;
    int v90 = v93 | ((*(unsigned char *)(v92 + 1430) & 0xF) << 12);
  }
  *(_DWORD *)(a2 + 916) = v90 | 0x2DA00000;
  uint64_t v94 = (unsigned int *)(v8 + 1848 * a3 + 1436);
  unsigned int v95 = *v94;
  if (*(unsigned char *)(v104 + 604 * v105 + 3))
  {
    if ((v95 & 7) != 0) {
      *uint64_t v94 = (v95 + 7) & 0xFFFFFFF8;
    }
    int v96 = 763363328;
  }
  else
  {
    int v96 = ((*v94 & 7) << 15) | 0x2D800000;
  }
  *(_DWORD *)(a2 + 924) = v96;
  unint64_t v108 = 0;
  uint64_t v109 = 0;
  if (!CAVDAvcDecoder::GetSDataMemInfo(*(void *)(v101 + 256), v100, &v109, &v108)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v97 = (void *)v109;
  if (!*(void *)v109 && !*(_DWORD *)(v109 + 152) && !*(_DWORD *)(v109 + 156)) {
    goto LABEL_97;
  }
  int v98 = v108;
  if (HIDWORD(v108))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "populateSliceRegisters";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1462;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      int v98 = v108;
    }
  }
  uint64_t result = CAHDec::addToPatcherList(v101, v97, 944 * v100 + 2532, v98, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result)
  {
LABEL_97:
    uint64_t result = 0;
    *(_DWORD *)(a2 + 936) = *(_DWORD *)(v8 + 1848 * a3 + 16) - (*v94 >> 3);
  }
  return result;
}

uint64_t CAHDecCloverAvc::populateCommonRegisters(CAHDecCloverAvc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000001;
  return 0;
}

uint64_t CAHDecCloverAvc::updateCommonRegisters(CAHDecCloverAvc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

void CAHDecCloverAvc::copyScalingList(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = *a2 & 0xFEFFFFC0 | 0x1000000;
  *a2 = v8;
  do
  {
    v8 |= (*(unsigned char *)(a4 + v7) == 0) << v7;
    *a2 = v8;
    ++v7;
  }
  while (v7 != 6);
  unsigned int v9 = v8 & 0xFFFFF03F;
  *a2 = v8 & 0xFFFFF03F;
  if (a7 >= 7)
  {
    uint64_t v10 = (a7 - 6);
    uint64_t v11 = (unsigned __int8 *)(a4 + 6);
    uint64_t v12 = &dword_223AD07F0;
    do
    {
      int v13 = *v11++;
      BOOL v14 = v13 == 0;
      int v16 = *v12++;
      char v15 = v16;
      int v17 = v14;
      v9 |= ((v17 << v15) & 0x3F) << 6;
      *a2 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 1;
  uint64_t v20 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v22 = *(_DWORD *)(v20 + i) & 0xFFFFFF | (*(unsigned __int8 *)(v19 + i - 1) << 24);
      *(_DWORD *)(v20 + i) = v22;
      unsigned int v23 = v22 & 0xFF00FFFF | (*(unsigned __int8 *)(v19 + i) << 16);
      *(_DWORD *)(v20 + i) = v23;
      unsigned int v24 = v23 & 0xFFFF00FF | (*(unsigned __int8 *)(v19 + i + 1) << 8);
      *(_DWORD *)(v20 + i) = v24;
      *(_DWORD *)(v20 + i) = v24 & 0xFFFFFF00 | *(unsigned __int8 *)(v19 + i + 2);
    }
    ++v18;
    v20 += 16;
    v19 += 16;
  }
  while (v18 != 6);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 96;
  do
  {
    int v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = a6 + ((uint64_t)dword_223AD0808[v25] << 6);
    do
    {
      long long v31 = (unsigned __int8 *)(v30 + (v28 & 0x7FFFFFE0 | v29 & 4 | v27 & 0x18));
      int v32 = *(_DWORD *)(v26 + v28) & 0xFFFFFF | (*v31 << 24);
      *(_DWORD *)(v26 + v28) = v32;
      unsigned int v33 = v32 & 0xFF00FFFF | (v31[1] << 16);
      *(_DWORD *)(v26 + v28) = v33;
      unsigned int v34 = v33 & 0xFFFF00FF | (v31[2] << 8);
      *(_DWORD *)(v26 + v28) = v34;
      *(_DWORD *)(v26 + v28) = v34 & 0xFFFFFF00 | v31[3];
      ++v29;
      v28 += 4;
      v27 += 8;
    }
    while (v28 != 64);
    ++v25;
    v26 += 64;
  }
  while (v25 != 6);
}

uint64_t CAHDecCloverAvc::AvcSeqScalingListFallBack(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v3 = 12;
    }
    uint64_t v4 = a2 + 22;
    uint64_t v5 = (_OWORD *)(a2 + 34);
    while (v2 > 5)
    {
      if (*(unsigned char *)(v4 + v2 - 12))
      {
        if (*(unsigned char *)(v4 + v2) == 2)
        {
          unsigned int v9 = (_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 130);
          if (v2 == 6 || (v2 & 0x7FFFFFFD) == 8)
          {
            *unsigned int v9 = avcDefaultIntraScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223AD0870;
            long long v10 = xmmword_223AD0880;
            long long v11 = unk_223AD0890;
          }
          else
          {
            *unsigned int v9 = avcDefaultInterScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223AD0830;
            long long v10 = xmmword_223AD0840;
            long long v11 = unk_223AD0850;
          }
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 162) = v10;
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 178) = v11;
        }
        goto LABEL_24;
      }
      if ((v2 - 8) <= 0xFFFFFFFD)
      {
        uint64_t result = a2 + 130;
        int v13 = (_OWORD *)(a2 + 130 + ((unint64_t)(v2 - 6) << 6));
        BOOL v14 = (long long *)(a2 + 130 + ((unint64_t)(v2 - 8) << 6));
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[3];
        v13[2] = v14[2];
        v13[3] = v17;
        *int v13 = v15;
        v13[1] = v16;
        uint64_t v8 = (v2 - 2);
LABEL_21:
        *(unsigned char *)(v4 + v2) = *(unsigned char *)(a2 + v8 + 22);
      }
LABEL_24:
      ++v2;
      ++v5;
      if (v3 == v2) {
        return result;
      }
    }
    if (*(unsigned char *)(v4 + v2 - 12)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (v6 || v2 == 3) {
      goto LABEL_24;
    }
    uint64_t v8 = (v2 - 1);
    *uint64_t v5 = *(_OWORD *)(a2 + 16 * v8 + 34);
    goto LABEL_21;
  }
  return result;
}

long long *CAHDecCloverAvc::AvcPicScalingListFallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 96))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = a3 + 97;
    uint64_t v6 = -96;
    uint64_t result = &avcDefaultIntraScalingList8x8;
    do
    {
      if (v3 > 5)
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if (*(unsigned char *)(v5 + v3 + 12) == 2)
          {
            unsigned int v9 = (_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 217);
            if (v3 == 6 || (v3 & 0x7FFFFFFD) == 8)
            {
              *unsigned int v9 = avcDefaultIntraScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223AD0870;
              long long v10 = xmmword_223AD0880;
              long long v11 = unk_223AD0890;
            }
            else
            {
              *unsigned int v9 = avcDefaultInterScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223AD0830;
              long long v10 = xmmword_223AD0840;
              long long v11 = unk_223AD0850;
            }
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 249) = v10;
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 265) = v11;
          }
          goto LABEL_31;
        }
        if ((v3 - 8) <= 0xFFFFFFFD)
        {
          uint64_t v12 = (_OWORD *)(a3 + 217 + ((unint64_t)(v3 - 6) << 6));
          int v13 = (long long *)(a3 + 217 + ((unint64_t)(v3 - 8) << 6));
          long long v14 = *v13;
          long long v15 = v13[1];
          long long v16 = v13[3];
          v12[2] = v13[2];
          v12[3] = v16;
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v17 = a3 + (v3 - 2);
          goto LABEL_29;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          uint64_t v18 = (v3 - 6);
          uint64_t v19 = a3 + (v18 << 6);
          uint64_t v20 = a2 + (v18 << 6);
          long long v21 = *(_OWORD *)(v20 + 130);
          long long v22 = *(_OWORD *)(v20 + 146);
          long long v23 = *(_OWORD *)(v20 + 162);
          *(_OWORD *)(v19 + 265) = *(_OWORD *)(v20 + 178);
          *(_OWORD *)(v19 + 249) = v23;
          *(_OWORD *)(v19 + 233) = v22;
          *(_OWORD *)(v19 + 217) = v21;
LABEL_23:
          char v24 = *(unsigned char *)(a2 + 22 + v3);
LABEL_30:
          *(unsigned char *)(v5 + v3 + 12) = v24;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if ((*(unsigned char *)(v5 + v3 + 12) & 2) != 0)
          {
            if (v3 > 2) {
              long long v8 = avcDefaultInterScalingList4x4;
            }
            else {
              long long v8 = avcDefaultIntraScalingList4x4;
            }
            *(_OWORD *)(v5 + v6 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v8;
          }
          goto LABEL_31;
        }
        if (v3 && v3 != 3)
        {
          uint64_t v25 = (v3 - 1);
          *(_OWORD *)(v5 + v6 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(a3 + 16 * v25 + 121);
          uint64_t v17 = a3 + v25;
LABEL_29:
          char v24 = *(unsigned char *)(v17 + 109);
          goto LABEL_30;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          *(_OWORD *)(v5 + v6 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(a2 + v6 + 130);
          goto LABEL_23;
        }
      }
LABEL_31:
      ++v3;
      v6 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CAHDecCloverAvc::populateSequenceRegisters(CAHDecCloverAvc *this)
{
  uint64_t v2 = *((void *)this + 32);
  unint64_t v3 = (_DWORD *)*((void *)this + 33);
  int v4 = *(_DWORD *)(v2 + 3612);
  int v5 = *(_DWORD *)(v2 + 3616);
  uint64_t v6 = *(void *)(v2 + 3296);
  uint64_t v7 = *(void *)(v2 + 3304);
  uint64_t v8 = v6 + 2224 * v4;
  v3[10] = 0;
  __int16 v9 = *(_WORD *)(v8 + 1558);
  v3[10] = (2 * (v9 & 0xFFF)) | 1;
  v3[10] = ((*(_WORD *)(v8 + 1560) & 0xFFF) << 17) | (2 * (v9 & 0xFFF)) | 0x10001;
  v3[11] = 0;
  int v10 = *(unsigned char *)(v8 + 1564) & 1;
  v3[11] = v10;
  int v11 = v10 | ((*(unsigned char *)(v7 + 604 * v5 + 95) != 0) << 7) | 0x2800;
  v3[11] = v11;
  uint64_t v12 = (unsigned char *)(v8 + 4);
  int v13 = *(unsigned __int8 *)(v8 + 4);
  if (*(unsigned char *)(v8 + 4)) {
    int v13 = (*(unsigned char *)(v6 + 2224 * v4 + 7) & 0xF) << 15;
  }
  int v14 = v13 | v11;
  v3[11] = v14;
  long long v15 = (unsigned char *)(v6 + 2224 * v4);
  int v16 = v14 & 0x7F87A881 | ((v15[6] & 0xF) << 19);
  v3[11] = v16;
  unsigned int v17 = v16 & 0xFF7FFFFF | ((v15[5] & 1) << 23);
  v3[11] = v17;
  v3[11] = v17 & 0xFCFFFFFF | ((*v12 & 3) << 24);
  if (v15[9])
  {
    if (*v12 == 3) {
      int v18 = 12;
    }
    else {
      int v18 = 8;
    }
    uint64_t v19 = CAHDecCloverAvc::AvcSeqScalingListFallBack((uint64_t)this, v8);
    CAHDecCloverAvc::copyScalingList(v19, v3 + 12, *((void *)this + 33) + 636, v6 + 2224 * v4 + 22, v6 + 2224 * v4 + 34, v6 + 2224 * v4 + 130, v18);
  }
  return 0;
}

uint64_t CAHDecCloverAvc::populatePictureRegisters(CAHDecCloverAvc *this)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 3612);
  int v4 = *(_DWORD *)(v2 + 3616);
  uint64_t v5 = *(void *)(v2 + 3296);
  uint64_t v6 = *(void *)(v2 + 3304);
  uint64_t v199 = *(void *)(v2 + 2088);
  uint64_t v201 = *(unsigned int *)(v2 + 3152);
  int v7 = *(_DWORD *)(v2 + 2644);
  int v197 = *(unsigned __int8 *)(v2 + 8);
  int v198 = *(_DWORD *)(v2 + 3132);
  long long v8 = *(_OWORD *)(v2 + 7016);
  v216[8] = *(_OWORD *)(v2 + 7000);
  v216[9] = v8;
  long long v9 = *(_OWORD *)(v2 + 7048);
  v216[10] = *(_OWORD *)(v2 + 7032);
  v216[11] = v9;
  long long v10 = *(_OWORD *)(v2 + 6952);
  v216[4] = *(_OWORD *)(v2 + 6936);
  v216[5] = v10;
  long long v11 = *(_OWORD *)(v2 + 6984);
  v216[6] = *(_OWORD *)(v2 + 6968);
  v216[7] = v11;
  long long v12 = *(_OWORD *)(v2 + 6888);
  v216[0] = *(_OWORD *)(v2 + 6872);
  v216[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 6920);
  v216[2] = *(_OWORD *)(v2 + 6904);
  v216[3] = v13;
  uint64_t v14 = *(unsigned int *)(v2 + 7064);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  int v16 = v15;
  uint64_t v17 = *((void *)this + 33);
  *(_DWORD *)(v17 + 52) = 766509056;
  if (**(_DWORD **)(*((void *)this + 32) + 3312) == 5) {
    int v18 = 766517248;
  }
  else {
    int v18 = 766509056;
  }
  if (v15) {
    int v19 = 688;
  }
  else {
    int v19 = 672;
  }
  if (v7 == 1) {
    int v20 = 1024;
  }
  else {
    int v20 = 1;
  }
  if (v7) {
    int v21 = 4107;
  }
  else {
    int v21 = 11;
  }
  *(_DWORD *)(v17 + 52) = v21 | v20 | v18 | v19;
  *(void *)(v17 + 56) = 0x1000000;
  int v22 = (*(unsigned char *)(v5 + 2224 * v3 + 8) & 1) << 18;
  *(_DWORD *)(v17 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v22;
  long long v23 = (unsigned char *)(v6 + 604 * v4);
  unsigned int v24 = v22 & 0xFFF7FFFF | ((v23[93] & 1) << 19);
  *(_DWORD *)(v17 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v24;
  unsigned int v25 = v24 & 0xFFEFFFFF | ((v23[3] & 1) << 20);
  *(_DWORD *)(v17 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v25;
  *(_DWORD *)(v17 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v25 | ((**(_DWORD **)(*((void *)this + 32) + 3312) != 5) << 21);
  unsigned int v26 = *(_DWORD *)(v17 + 64) & 0xFFFFFC1F | (32 * (v23[91] & 0x1F));
  *(_DWORD *)(v17 + 64) = v26;
  *(_DWORD *)(v17 + 64) = v26 & 0xFFFFFFE0 | v23[601] & 0x1F;
  if (v23[96])
  {
    uint64_t v27 = v6 + 604 * v4;
    uint64_t v28 = v5 + 2224 * v3;
    if (*(unsigned char *)(v28 + 4) == 3) {
      int v29 = 12;
    }
    else {
      int v29 = 8;
    }
    uint64_t v30 = *((void *)this + 33) + 1120;
    long long v31 = CAHDecCloverAvc::AvcPicScalingListFallBack(v15, v28, v27);
    CAHDecCloverAvc::copyScalingList((uint64_t)v31, (unsigned int *)(v17 + 68), v30, v27 + 109, v27 + 121, v27 + 217, v29);
  }
  *(_DWORD *)(v17 + 72) = *((_DWORD *)this + 3978);
  *(_DWORD *)(v17 + 76) = *((_DWORD *)this + 3979);
  *(_DWORD *)(v17 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 3145738;
  int v32 = (char *)this + 9008;
  for (uint64_t i = 84; i != 112; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v34 = *((void *)this + 33);
    int v35 = *(_DWORD *)(v34 + i);
    *(_DWORD *)(v34 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFu;
    uint64_t v36 = *((void *)this + 33);
    int v37 = *(_DWORD *)(v36 + i);
    *(_DWORD *)(v36 + i) = v35;
    if (*(void *)v32 || *((_DWORD *)v32 + 38) || *((_DWORD *)v32 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v32, i, 0, 0xFFFFFFFFLL, 8, v37, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 28) = *(_DWORD *)(*((void *)this + 33) + i + 28) & 0x800001FF | (((*((_DWORD *)this + 3972) >> 9) & 0x3FFFFF) << 9);
    v32 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 144) = 0;
  *(_DWORD *)(*((void *)this + 33) + 148) = 0;
  uint64_t v39 = *((void *)this + 33);
  int v40 = *(_DWORD *)(v39 + 148);
  *(_DWORD *)(v39 + 148) = 0;
  *(_DWORD *)(*((void *)this + 33) + 148) ^= 0xFFFFFFu;
  uint64_t v41 = *((void *)this + 33);
  int v42 = *(_DWORD *)(v41 + 148);
  *(_DWORD *)(v41 + 148) = v40;
  if (!*((void *)this + 1830) && !*((_DWORD *)this + 3698) && !*((_DWORD *)this + 3699)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1830, 148, 0, 0xFFFFFFFFLL, 8, v42, 4),
        !result))
  {
    *(_DWORD *)(*((void *)this + 33) + 152) = 0;
    uint64_t v43 = *((void *)this + 33);
    int v44 = *(_DWORD *)(v43 + 152);
    *(_DWORD *)(v43 + 152) = 0;
    *(_DWORD *)(*((void *)this + 33) + 152) ^= 0xFFFFFFu;
    uint64_t v45 = *((void *)this + 33);
    int v46 = *(_DWORD *)(v45 + 152);
    *(_DWORD *)(v45 + 152) = v44;
    if (!*((void *)this + 1852) && !*((_DWORD *)this + 3742) && !*((_DWORD *)this + 3743)) {
      goto LABEL_182;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1852, 152, 0, 0xFFFFFFFFLL, 8, v46, 4);
    if (!result)
    {
LABEL_182:
      *(_DWORD *)(*((void *)this + 33) + 156) = 0;
      uint64_t v47 = *((void *)this + 33);
      int v48 = *(_DWORD *)(v47 + 156);
      *(_DWORD *)(v47 + 156) = 0;
      *(_DWORD *)(*((void *)this + 33) + 156) ^= 0xFFFFFFu;
      uint64_t v49 = *((void *)this + 33);
      int v50 = *(_DWORD *)(v49 + 156);
      *(_DWORD *)(v49 + 156) = v48;
      if (!*((void *)this + 1874) && !*((_DWORD *)this + 3786) && !*((_DWORD *)this + 3787)) {
        goto LABEL_183;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1874, 156, 0, 0xFFFFFFFFLL, 8, v50, 4);
      if (!result)
      {
LABEL_183:
        *(_DWORD *)(*((void *)this + 33) + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        uint64_t v51 = *((void *)this + 33);
        int v52 = *(_DWORD *)(v51 + 160);
        *(_DWORD *)(v51 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*((void *)this + 33) + 160) ^= 0xFFFFFFu;
        uint64_t v53 = *((void *)this + 33);
        int v54 = *(_DWORD *)(v53 + 160);
        *(_DWORD *)(v53 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v52;
        if (!*((void *)this + 1896) && !*((_DWORD *)this + 3830) && !*((_DWORD *)this + 3831)) {
          goto LABEL_184;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1896, 160, 0, 0xFFFFFFFFLL, 8, v54, 4);
        if (!result)
        {
LABEL_184:
          *(_DWORD *)(*((void *)this + 33) + 164) = 0;
          uint64_t v55 = *((void *)this + 33);
          int v56 = *(_DWORD *)(v55 + 164);
          *(_DWORD *)(v55 + 164) = 0;
          *(_DWORD *)(*((void *)this + 33) + 164) ^= 0xFFFFFFu;
          uint64_t v57 = *((void *)this + 33);
          int v58 = *(_DWORD *)(v57 + 164);
          *(_DWORD *)(v57 + 164) = v56;
          if (!*((void *)this + 1918) && !*((_DWORD *)this + 3874) && !*((_DWORD *)this + 3875)) {
            goto LABEL_185;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1918, 164, 0, 0xFFFFFFFFLL, 8, v58, 4);
          if (!result)
          {
LABEL_185:
            *(_DWORD *)(*((void *)this + 33) + 168) = 0;
            uint64_t v59 = *((void *)this + 33);
            int v60 = *(_DWORD *)(v59 + 168);
            *(_DWORD *)(v59 + 168) = 0;
            *(_DWORD *)(*((void *)this + 33) + 168) ^= 0xFFFFFFu;
            uint64_t v61 = *((void *)this + 33);
            int v62 = *(_DWORD *)(v61 + 168);
            *(_DWORD *)(v61 + 168) = v60;
            if (!*((void *)this + 1940) && !*((_DWORD *)this + 3918) && !*((_DWORD *)this + 3919)) {
              goto LABEL_186;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1940, 168, 0, 0xFFFFFFFFLL, 8, v62, 4);
            if (!result)
            {
LABEL_186:
              *(_DWORD *)(*((void *)this + 33) + 172) = 0;
              *(_DWORD *)(*((void *)this + 33) + 176) = 0;
              uint64_t v63 = *((void *)this + 33);
              int v64 = *(_DWORD *)(v63 + 176);
              *(_DWORD *)(v63 + 176) = 0;
              *(_DWORD *)(*((void *)this + 33) + 176) ^= 0xFFFFFFu;
              uint64_t v65 = *((void *)this + 33);
              int v66 = *(_DWORD *)(v65 + 176);
              *(_DWORD *)(v65 + 176) = v64;
              if (!*((void *)this + 1280) && !*((_DWORD *)this + 2598) && !*((_DWORD *)this + 2599)) {
                goto LABEL_187;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1280, 176, 0, 0xFFFFFFFFLL, 8, v66, 4);
              if (!result)
              {
LABEL_187:
                *(_DWORD *)(*((void *)this + 33) + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                uint64_t v67 = *((void *)this + 33);
                int v68 = *(_DWORD *)(v67 + 180);
                *(_DWORD *)(v67 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                *(_DWORD *)(*((void *)this + 33) + 180) ^= 0xFFFFFFu;
                uint64_t v69 = *((void *)this + 33);
                int v70 = *(_DWORD *)(v69 + 180);
                *(_DWORD *)(v69 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v68;
                uint64_t v71 = (char *)this + 176 * v201;
                if (!*((void *)v71 + 1302)
                  && !*((_DWORD *)this + 44 * v201 + 2642)
                  && !*((_DWORD *)this + 44 * v201 + 2643))
                {
                  goto LABEL_188;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v71 + 1302, 180, 0, 0xFFFFFFFFLL, 8, v70, 4);
                if (!result)
                {
LABEL_188:
                  *(_DWORD *)(*((void *)this + 33) + 184) = 0;
                  uint64_t v72 = *((void *)this + 33);
                  int v73 = *(_DWORD *)(v72 + 184);
                  *(_DWORD *)(v72 + 184) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 184) ^= 0xFFFFFFu;
                  uint64_t v74 = *((void *)this + 33);
                  int v75 = *(_DWORD *)(v74 + 184);
                  *(_DWORD *)(v74 + 184) = v73;
                  uint64_t v76 = (char *)this + 176 * v201;
                  if (!*((void *)v76 + 70)
                    && !*((_DWORD *)this + 44 * v201 + 178)
                    && !*((_DWORD *)this + 44 * v201 + 179))
                  {
                    goto LABEL_189;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v76 + 70, 184, 0, 0xFFFFFFFFLL, 8, v75, 4);
                  if (!result)
                  {
LABEL_189:
                    *(_DWORD *)(*((void *)this + 33) + 188) = 0;
                    uint64_t v77 = *((void *)this + 33);
                    int v78 = *(_DWORD *)(v77 + 188);
                    *(_DWORD *)(v77 + 188) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 188) ^= 0xFFFFFFu;
                    uint64_t v79 = *((void *)this + 33);
                    int v80 = *(_DWORD *)(v79 + 188);
                    *(_DWORD *)(v79 + 188) = v78;
                    uint64_t v81 = (void *)(v199 + 8);
                    if (!*(void *)(v199 + 8) && !*(_DWORD *)(v199 + 160) && !*(_DWORD *)(v199 + 164)) {
                      goto LABEL_190;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v199 + 8), 188, *(_DWORD *)(v199 + 60), 0xFFFFFFFFLL, 8, v80, 4);
                    if (!result)
                    {
LABEL_190:
                      *(_DWORD *)(*((void *)this + 33) + 192) = 0;
                      uint64_t v82 = *((void *)this + 33);
                      int v83 = *(_DWORD *)(v82 + 192);
                      *(_DWORD *)(v82 + 192) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 192) ^= 0xFFFFFFu;
                      uint64_t v84 = *((void *)this + 33);
                      int v85 = *(_DWORD *)(v84 + 192);
                      *(_DWORD *)(v84 + 192) = v83;
                      int v86 = (char *)this + 176 * v201;
                      if (!*((void *)v86 + 598)
                        && !*((_DWORD *)this + 44 * v201 + 1234)
                        && !*((_DWORD *)this + 44 * v201 + 1235))
                      {
                        goto LABEL_191;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v86 + 598, 192, 0, 0xFFFFFFFFLL, 8, v85, 4);
                      if (!result)
                      {
LABEL_191:
                        *(_DWORD *)(*((void *)this + 33) + 196) = 0;
                        uint64_t v87 = *((void *)this + 33);
                        int v88 = *(_DWORD *)(v87 + 196);
                        *(_DWORD *)(v87 + 196) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 196) ^= 0xFFFFFFu;
                        uint64_t v89 = *((void *)this + 33);
                        int v90 = *(_DWORD *)(v89 + 196);
                        *(_DWORD *)(v89 + 196) = v88;
                        if (!*v81 && !*(_DWORD *)(v199 + 160) && !*(_DWORD *)(v199 + 164)) {
                          goto LABEL_192;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v81, 196, *(_DWORD *)(v199 + 64), 0xFFFFFFFFLL, 8, v90, 4);
                        if (!result)
                        {
LABEL_192:
                          if (*(_DWORD *)(*((void *)this + 32) + 2648) != 1) {
                            goto LABEL_90;
                          }
                          uint64_t v91 = *((void *)this + 33);
                          int v92 = *(_DWORD *)(v91 + 188);
                          *(_DWORD *)(v91 + 188) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 188) ^= 0xFFFFFFu;
                          uint64_t v93 = *((void *)this + 33);
                          int v94 = *(_DWORD *)(v93 + 188);
                          *(_DWORD *)(v93 + 188) = v92;
                          if (!*v81 && !*(_DWORD *)(v199 + 160) && !*(_DWORD *)(v199 + 164)) {
                            goto LABEL_193;
                          }
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v81, 188, *(_DWORD *)(v199 + 60), 0xFFFFFFFFLL, 8, v94, 4);
                          if (!result)
                          {
LABEL_193:
                            uint64_t v95 = *((void *)this + 33);
                            int v96 = *(_DWORD *)(v95 + 196);
                            *(_DWORD *)(v95 + 196) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 196) ^= 0xFFFFFFu;
                            uint64_t v97 = *((void *)this + 33);
                            int v98 = *(_DWORD *)(v97 + 196);
                            *(_DWORD *)(v97 + 196) = v96;
                            if (!*v81 && !*(_DWORD *)(v199 + 160) && !*(_DWORD *)(v199 + 164)) {
                              goto LABEL_194;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v81, 196, *(_DWORD *)(v199 + 64), 0xFFFFFFFFLL, 8, v98, 4);
                            if (!result)
                            {
LABEL_194:
                              uint64_t v99 = *((void *)this + 33);
                              int v100 = *(_DWORD *)(v99 + 184);
                              *(_DWORD *)(v99 + 184) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 184) ^= 0xFFFFFFu;
                              uint64_t v101 = *((void *)this + 33);
                              int v102 = *(_DWORD *)(v101 + 184);
                              *(_DWORD *)(v101 + 184) = v100;
                              if (!*v81 && !*(_DWORD *)(v199 + 160) && !*(_DWORD *)(v199 + 164)) {
                                goto LABEL_195;
                              }
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v81, 184, *(_DWORD *)(v199 + 72), 0xFFFFFFFFLL, 8, v102, 4);
                              if (!result)
                              {
LABEL_195:
                                uint64_t v103 = *((void *)this + 33);
                                int v104 = *(_DWORD *)(v103 + 192);
                                *(_DWORD *)(v103 + 192) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 192) ^= 0xFFFFFFu;
                                uint64_t v105 = *((void *)this + 33);
                                int v106 = *(_DWORD *)(v105 + 192);
                                *(_DWORD *)(v105 + 192) = v104;
                                if (!*v81 && !*(_DWORD *)(v199 + 160) && !*(_DWORD *)(v199 + 164)) {
                                  goto LABEL_90;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v81, 192, *(_DWORD *)(v199 + 76), 0xFFFFFFFFLL, 8, v106, 4);
                                if (!result)
                                {
LABEL_90:
                                  int v200 = v7;
                                  uint64_t v194 = v5;
                                  uint64_t v196 = v17;
                                  if (*(_DWORD *)(v17 + 52) & 0x2000 | v14)
                                  {
                                    uint64_t v107 = v14;
                                    *((_DWORD *)this + v201 + 116) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                    if (v14)
                                    {
                                      uint64_t v108 = 0;
                                      int v195 = (v14 << 28) - 0x10000000;
                                      do
                                      {
                                        uint64_t v109 = *((void *)v216 + v108);
                                        uint64_t v110 = *(unsigned int *)(v109 + 32);
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 200) & 0xFFFFFFF | v195;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 200) &= 0xF3FFFFFF;
                                        *(_WORD *)(*((void *)this + 33) + 4 * v108 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v198
                                                                                            - *(_DWORD *)(v109 + 12);
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 200) & 0xFFFEFFFF | (*(unsigned __int8 *)(v109 + 1) << 16);
                                        if (*(_DWORD *)(v109 + 28) == 1)
                                        {
                                          long long v214 = 0u;
                                          long long v215 = 0u;
                                          long long v212 = 0u;
                                          long long v213 = 0u;
                                          long long v210 = 0u;
                                          long long v211 = 0u;
                                          long long v208 = 0u;
                                          long long v209 = 0u;
                                          long long v206 = 0u;
                                          long long v207 = 0u;
                                          memset(buf, 0, sizeof(buf));
                                          int DPB = AVC_RLM::getDPB(*(void *)(*((void *)this + 32) + 3104), buf);
                                          if (DPB < 1)
                                          {
                                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                              return 0xFFFFFFFFLL;
                                            }
                                            int v203 = 136315138;
                                            int v204 = "populatePictureRegisters";
                                            int v162 = &_os_log_internal;
                                            uint64_t v163 = "AppleAVD: ERROR: %s: No ref pics found!\n";
                                          }
                                          else
                                          {
                                            uint64_t v112 = DPB;
                                            while (v112-- >= 1)
                                            {
                                              uint64_t v109 = buf[v112];
                                              if (!*(_DWORD *)(v109 + 28))
                                              {
                                                uint64_t v110 = *(unsigned int *)(v109 + 32);
                                                goto LABEL_100;
                                              }
                                            }
                                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                              return 0xFFFFFFFFLL;
                                            }
                                            int v203 = 136315138;
                                            int v204 = "populatePictureRegisters";
                                            int v162 = &_os_log_internal;
                                            uint64_t v163 = "AppleAVD: ERROR: %s: No non-existing ref frames found!\n";
                                          }
                                          int v164 = (uint8_t *)&v203;
                                          uint32_t v165 = 12;
                                          goto LABEL_153;
                                        }
LABEL_100:
                                        if (v16)
                                        {
                                          buf[0] = 0;
                                          if (!CAVDAvcDecoder::decodeGetRenderTargetRef(*((void *)this + 32), v110, *(_DWORD *)(v109 + 56), *(_DWORD *)(v109 + 64), buf))
                                          {
                                            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                            {
                                              LOWORD(v203) = 0;
                                              int v162 = &_os_log_internal;
                                              uint64_t v163 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
                                              int v164 = (uint8_t *)&v203;
                                              uint32_t v165 = 2;
LABEL_153:
                                              _os_log_impl(&dword_223977000, v162, OS_LOG_TYPE_DEFAULT, v163, v164, v165);
                                            }
                                            return 0xFFFFFFFFLL;
                                          }
                                          *(void *)(v109 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = buf[0] + 8;
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 264) = 0;
                                        int v114 = 4 * v108;
                                        int v202 = 4 * v108 + 264;
                                        uint64_t v115 = *((void *)this + 33) + 4 * v108;
                                        int v116 = *(_DWORD *)(v115 + 264);
                                        *(_DWORD *)(v115 + 264) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 264) ^= 0xFFFFFFu;
                                        uint64_t v117 = *((void *)this + 33) + 4 * v108;
                                        int v118 = *(_DWORD *)(v117 + 264);
                                        *(_DWORD *)(v117 + 264) = v116;
                                        unsigned int v119 = v110;
                                        uint64_t v120 = (char *)this + 176 * v110;
                                        if (*((void *)v120 + 70)
                                          || *((_DWORD *)this + 44 * v110 + 178)
                                          || *((_DWORD *)this + 44 * v110 + 179))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v120 + 70, v202, 0, 0xFFFFFFFFLL, 8, v118, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 328) = 0;
                                        int v121 = v114 + 328;
                                        uint64_t v122 = *((void *)this + 33) + 4 * v108;
                                        int v123 = *(_DWORD *)(v122 + 328);
                                        *(_DWORD *)(v122 + 328) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 328) ^= 0xFFFFFFu;
                                        uint64_t v124 = *((void *)this + 33) + 4 * v108;
                                        int v125 = *(_DWORD *)(v124 + 328);
                                        *(_DWORD *)(v124 + 328) = v123;
                                        uint64_t v126 = *(void *)(v109 + 40);
                                        if (*(void *)v126 || *(_DWORD *)(v126 + 152) || *(_DWORD *)(v126 + 156))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v126, v114 + 328, *(_DWORD *)(v126 + 52), 0xFFFFFFFFLL, 8, v125, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 392) = 0;
                                        int v127 = v114 + 392;
                                        uint64_t v128 = *((void *)this + 33) + 4 * v108;
                                        int v129 = *(_DWORD *)(v128 + 392);
                                        *(_DWORD *)(v128 + 392) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 392) ^= 0xFFFFFFu;
                                        uint64_t v130 = *((void *)this + 33) + 4 * v108;
                                        int v131 = *(_DWORD *)(v130 + 392);
                                        *(_DWORD *)(v130 + 392) = v129;
                                        uint64_t v132 = (char *)this + 176 * v119;
                                        if (*((void *)v132 + 598)
                                          || *((_DWORD *)this + 44 * v119 + 1234)
                                          || *((_DWORD *)this + 44 * v119 + 1235))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v132 + 598, v114 + 392, 0, 0xFFFFFFFFLL, 8, v131, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 456) = 0;
                                        int v133 = v114 + 456;
                                        uint64_t v134 = *((void *)this + 33) + 4 * v108;
                                        int v135 = *(_DWORD *)(v134 + 456);
                                        *(_DWORD *)(v134 + 456) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 456) ^= 0xFFFFFFu;
                                        uint64_t v136 = *((void *)this + 33) + 4 * v108;
                                        int v137 = *(_DWORD *)(v136 + 456);
                                        *(_DWORD *)(v136 + 456) = v135;
                                        uint64_t v138 = *(void *)(v109 + 40);
                                        if (*(void *)v138 || *(_DWORD *)(v138 + 152) || *(_DWORD *)(v138 + 156))
                                        {
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v138, v133, *(_DWORD *)(v138 + 56), 0xFFFFFFFFLL, 8, v137, 4);
                                          if (result) {
                                            return result;
                                          }
                                        }
                                        if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                                        {
                                          uint64_t v139 = *((void *)this + 33) + 4 * v108;
                                          int v140 = *(_DWORD *)(v139 + 328);
                                          *(_DWORD *)(v139 + 328) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 328) ^= 0xFFFFFFu;
                                          uint64_t v141 = *((void *)this + 33) + 4 * v108;
                                          int v142 = *(_DWORD *)(v141 + 328);
                                          *(_DWORD *)(v141 + 328) = v140;
                                          uint64_t v143 = *(void *)(v109 + 40);
                                          if (*(void *)v143 || *(_DWORD *)(v143 + 152) || *(_DWORD *)(v143 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v143, v121, *(_DWORD *)(v143 + 52), 0xFFFFFFFFLL, 8, v142, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          uint64_t v144 = *((void *)this + 33) + 4 * v108;
                                          int v145 = *(_DWORD *)(v144 + 456);
                                          *(_DWORD *)(v144 + 456) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 456) ^= 0xFFFFFFu;
                                          uint64_t v146 = *((void *)this + 33) + 4 * v108;
                                          int v147 = *(_DWORD *)(v146 + 456);
                                          *(_DWORD *)(v146 + 456) = v145;
                                          uint64_t v148 = *(void *)(v109 + 40);
                                          if (*(void *)v148 || *(_DWORD *)(v148 + 152) || *(_DWORD *)(v148 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v148, v133, *(_DWORD *)(v148 + 56), 0xFFFFFFFFLL, 8, v147, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          uint64_t v149 = *((void *)this + 33) + 4 * v108;
                                          int v150 = *(_DWORD *)(v149 + 264);
                                          *(_DWORD *)(v149 + 264) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 264) ^= 0xFFFFFFu;
                                          uint64_t v151 = *((void *)this + 33) + 4 * v108;
                                          int v152 = *(_DWORD *)(v151 + 264);
                                          *(_DWORD *)(v151 + 264) = v150;
                                          uint64_t v153 = *(void *)(v109 + 40);
                                          if (*(void *)v153 || *(_DWORD *)(v153 + 152) || *(_DWORD *)(v153 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v153, v202, *(_DWORD *)(v153 + 64), 0xFFFFFFFFLL, 8, v152, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                          uint64_t v154 = *((void *)this + 33) + 4 * v108;
                                          int v155 = *(_DWORD *)(v154 + 392);
                                          *(_DWORD *)(v154 + 392) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 4 * v108 + 392) ^= 0xFFFFFFu;
                                          uint64_t v156 = *((void *)this + 33) + 4 * v108;
                                          int v157 = *(_DWORD *)(v156 + 392);
                                          *(_DWORD *)(v156 + 392) = v155;
                                          uint64_t v158 = *(void *)(v109 + 40);
                                          if (*(void *)v158 || *(_DWORD *)(v158 + 152) || *(_DWORD *)(v158 + 156))
                                          {
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v158, v127, *(_DWORD *)(v158 + 68), 0xFFFFFFFFLL, 8, v157, 4);
                                            if (result) {
                                              return result;
                                            }
                                          }
                                        }
                                        ++v108;
                                      }
                                      while (v108 != v107);
                                    }
                                  }
                                  else
                                  {
                                    *(_DWORD *)(v17 + 52) |= 0x2000u;
                                    *((_DWORD *)this + v201 + 116) = 1;
                                    *(_DWORD *)(*((void *)this + 33) + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                  }
                                  *(_DWORD *)(*((void *)this + 33) + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 524) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 528) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 532) = 0;
                                  if (!v200) {
                                    return 0;
                                  }
                                  uint64_t v159 = *((void *)this + 32);
                                  int v160 = *(unsigned __int8 *)(v159 + 3004);
                                  if (*(unsigned char *)(v159 + 3004))
                                  {
                                    int v161 = *(_DWORD *)(v159 + 3016);
                                    int v160 = *(_DWORD *)(v159 + 3020);
                                  }
                                  else
                                  {
                                    int v161 = 0;
                                  }
                                  uint64_t v166 = *(void *)(v159 + 3656);
                                  int v167 = *(_DWORD *)(v166 + 52);
                                  int v168 = v167 + v161;
                                  if (__CFADD__(v167, v161))
                                  {
                                    int v169 = 1;
                                  }
                                  else
                                  {
                                    int v170 = *(_DWORD *)(v166 + 56);
                                    int v171 = v170 + v160;
                                    if (!__CFADD__(v170, v160))
                                    {
                                      uint64_t v172 = *((void *)this + 33);
                                      int v173 = *(_DWORD *)(v172 + 520);
                                      *(_DWORD *)(v172 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                      *(_DWORD *)(*((void *)this + 33) + 520) ^= 0xFFFFFFu;
                                      uint64_t v174 = *((void *)this + 33);
                                      int v175 = *(_DWORD *)(v174 + 520);
                                      *(_DWORD *)(v174 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v173;
                                      uint64_t v176 = *(void *)(*((void *)this + 32) + 3656);
                                      if (!*(void *)v176 && !*(_DWORD *)(v176 + 152) && !*(_DWORD *)(v176 + 156)
                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v176, 520, v168, 0xFFFFFFFFLL, 8, v175, 4), !result))
                                      {
                                        uint64_t v177 = *((void *)this + 33);
                                        int v178 = *(_DWORD *)(v177 + 524);
                                        *(_DWORD *)(v177 + 524) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 524) ^= 0xFFFFFFu;
                                        uint64_t v179 = *((void *)this + 33);
                                        int v180 = *(_DWORD *)(v179 + 524);
                                        *(_DWORD *)(v179 + 524) = v178;
                                        uint64_t v181 = *(void *)(*((void *)this + 32) + 3656);
                                        if (!*(void *)v181 && !*(_DWORD *)(v181 + 152) && !*(_DWORD *)(v181 + 156)) {
                                          goto LABEL_196;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v181, 524, v171, 0xFFFFFFFFLL, 8, v180, 4);
                                        if (!result)
                                        {
LABEL_196:
                                          uint64_t v182 = *((void *)this + 33);
                                          int v183 = *(_DWORD *)(v182 + 528);
                                          *(_DWORD *)(v182 + 528) = 0;
                                          *(_DWORD *)(*((void *)this + 33) + 528) ^= 0xC0000000;
                                          uint64_t v184 = *((void *)this + 33);
                                          int v185 = *(_DWORD *)(v184 + 528);
                                          *(_DWORD *)(v184 + 528) = v183;
                                          uint64_t v186 = *(void *)(*((void *)this + 32) + 3656);
                                          if (!*(void *)v186 && !*(_DWORD *)(v186 + 152) && !*(_DWORD *)(v186 + 156)) {
                                            goto LABEL_197;
                                          }
                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v186, 528, v168, 192, 6, v185, 4);
                                          if (!result)
                                          {
LABEL_197:
                                            uint64_t v187 = *((void *)this + 33);
                                            int v188 = *(_DWORD *)(v187 + 532);
                                            *(_DWORD *)(v187 + 532) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 532) ^= 0xC0000000;
                                            uint64_t v189 = *((void *)this + 33);
                                            int v190 = *(_DWORD *)(v189 + 532);
                                            *(_DWORD *)(v189 + 532) = v188;
                                            uint64_t v191 = *(void *)(*((void *)this + 32) + 3656);
                                            if (!*(void *)v191
                                              && !*(_DWORD *)(v191 + 152)
                                              && !*(_DWORD *)(v191 + 156))
                                            {
                                              goto LABEL_171;
                                            }
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v191, 532, v171, 192, 6, v190, 4);
                                            if (!result)
                                            {
LABEL_171:
                                              if (v197)
                                              {
                                                uint64_t result = 0;
                                                *(_DWORD *)(*((void *)this + 33) + 528) = *(_DWORD *)(*((void *)this + 33) + 528) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 76) >> 6) & 0xFFF));
                                                uint64_t v192 = *((void *)this + 33);
                                                unsigned int v193 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 80);
                                              }
                                              else
                                              {
                                                uint64_t result = CAHDecCloverAvc::getSWRStride(this, *(unsigned __int16 *)(v196 + 76)- *(unsigned __int16 *)(v196 + 72)+ 1, *(unsigned __int8 *)(v194 + 2224 * v3 + 6), *(unsigned __int8 *)(v194 + 2224 * v3 + 7), *(_DWORD *)(v194 + 2224 * v3 + 2212));
                                                if (result) {
                                                  return 0xFFFFFFFFLL;
                                                }
                                                *(_DWORD *)(*((void *)this + 33) + 528) = *(_DWORD *)(*((void *)this + 33) + 528) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 3976) >> 6) & 0xFFF));
                                                unsigned int v193 = *((_DWORD *)this + 3977);
                                                uint64_t v192 = *((void *)this + 33);
                                              }
                                              *(_DWORD *)(v192 + 532) = *(_DWORD *)(v192 + 532) & 0xFFFF8003 | (4 * ((v193 >> 6) & 0x1FFF));
                                            }
                                          }
                                        }
                                      }
                                      return result;
                                    }
                                    int v169 = 2;
                                  }
                                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                  {
                                    LODWORD(buf[0]) = 136315394;
                                    *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                    WORD2(buf[1]) = 1024;
                                    *(_DWORD *)((char *)&buf[1] + 6) = v169;
                                    int v162 = &_os_log_internal;
                                    uint64_t v163 = "AppleAVD: %s(): failKind = %d";
                                    int v164 = (uint8_t *)buf;
                                    uint32_t v165 = 18;
                                    goto LABEL_153;
                                  }
                                  return 0xFFFFFFFFLL;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecCloverAvc::getSWRStride(CAHDecCloverAvc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1988) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 3976) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 3977) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecCloverAvc::getTileStartCTU(CAHDecCloverAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 536);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecCloverAvc::getTileEndCTU(CAHDecCloverAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 536);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecCloverAvc::getTileIdxAbove(CAHDecCloverAvc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 536);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecCloverAvc::populateAvdWork(CAHDecCloverAvc *this, unsigned int a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v3 + 3312);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 7500);
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    long long v9 = (int *)(v2 + 2536);
    long long v10 = (int *)(v4 + 20);
    __int16 v21 = a2;
    uint64_t v11 = 40 * a2;
    uint64_t v12 = v2 + 944 * v5;
    while (1)
    {
      uint64_t v13 = v12 + v7;
      *(_WORD *)(v13 + 1604) = v8;
      *(_WORD *)(v13 + 1606) = 0;
      *(_WORD *)(v13 + 1608) = v8;
      *(_DWORD *)(v12 + v7 + 161pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      int v14 = *v9;
      if (!CAVDAvcDecoder::GetSDataMemInfo(*((void *)this + 32), v8, &v23, &v22)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *v10;
      *(_DWORD *)(v13 + 1628) = *v10;
      *(_DWORD *)(v13 + 1632) = v15;
      *(_DWORD *)(v13 + 1636) = 0;
      if (v7) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = 15;
      }
      *(_WORD *)(v13 + 1614) = v16;
      uint64_t v17 = (void *)v23;
      if (*(void *)v23 || *(_DWORD *)(v23 + 152) || *(_DWORD *)(v23 + 156))
      {
        int v18 = v22;
        if (HIDWORD(v22))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            unsigned int v25 = "populateAvdWork";
            __int16 v26 = 1024;
            int v27 = 1571;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v18 = v22;
          }
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v17, (int)v7 + 568020, v18, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
      v9 += 236;
      *(_DWORD *)(v12 + v7 + 1624) = v14;
      ++v8;
      v7 += 40;
      v10 += 462;
      if (v11 == v7)
      {
        uint64_t v2 = *((void *)this + 33);
        __int16 v20 = v21;
        goto LABEL_17;
      }
    }
  }
  else
  {
    __int16 v20 = 0;
LABEL_17:
    uint64_t result = 0;
    *(_WORD *)(v2 + 28) = v20;
    *(_DWORD *)(v2 + 32) = 568000;
  }
  return result;
}

uint64_t CAHDecCloverAvc::allocWorkBuf_SPS(CAHDecCloverAvc *this, _DWORD *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v3 = *((unsigned __int8 *)a2 + 4);
  int v4 = *((unsigned __int16 *)a2 + 779);
  int v5 = 16 * v4;
  int v6 = *((unsigned __int16 *)a2 + 780);
  unsigned int v7 = a2[553];
  unsigned int v8 = a2[554];
  unsigned int v9 = (16 * v6 + 23) >> 3;
  int v10 = ((2 * (16 * v4 + 23)) & 0x3FFFE0) + 32;
  *((_DWORD *)this + 397pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v10;
  *((_DWORD *)this + 3968) = (((v9 + 8) >> 3) * v10 + 127) & 0xFFFFFF80;
  unsigned int v11 = ((16 * ((((16 * v4 + 23) >> 2) & 0x7FFFC) / v7)) & 0x7FFFE0) + 32;
  *((_DWORD *)this + 3971) = v11;
  if (v3) {
    unsigned int v12 = (((v9 / v8 + 8) >> 3) * v11 + 127) & 0xFFFFFF80;
  }
  else {
    unsigned int v12 = 0;
  }
  *((_DWORD *)this + 3969) = v12;
  int v13 = (v4 << 6) + 64;
  *((_DWORD *)this + 3974) = v13;
  *((_DWORD *)this + 3973) = v13 + v13 * v6;
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    uint64_t v14 = 24;
    int v15 = this;
    while (1)
    {
      uint64_t v16 = *((unsigned int *)this + 3968);
      if (v16
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v15 + 35, v16, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_23;
        }
        int v23 = 136315650;
        unsigned int v24 = "allocWorkBuf_SPS";
        __int16 v25 = 1024;
        int v26 = 1745;
        __int16 v27 = 2080;
        uint64_t v28 = "HdrY";
        unint64_t v22 = &_os_log_internal;
        goto LABEL_22;
      }
      uint64_t v17 = *((unsigned int *)this + 3969);
      if (v17)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v15 + 299, v17, 7, 1, 0)) {
          break;
        }
      }
      int v15 = (CAHDecCloverAvc *)((char *)v15 + 176);
      if (!--v14) {
        goto LABEL_11;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_23;
    }
    int v23 = 136315650;
    unsigned int v24 = "allocWorkBuf_SPS";
    __int16 v25 = 1024;
    int v26 = 1746;
    __int16 v27 = 2080;
    uint64_t v28 = "HdrC";
    unint64_t v22 = &_os_log_internal;
    goto LABEL_22;
  }
LABEL_11:
  int v18 = (_OWORD *)((char *)this + 10416);
  uint64_t v19 = 24;
  while (1)
  {
    uint64_t v20 = *((unsigned int *)this + 3973);
    if (v20)
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), v18, v20, 7, 1, 0)) {
        break;
      }
    }
    v18 += 11;
    if (!--v19)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 3978) = 0;
      *((_DWORD *)this + 3979) = v5 | (v6 << 20) | 0xF000F;
      return result;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = 136315650;
    unsigned int v24 = "allocWorkBuf_SPS";
    __int16 v25 = 1024;
    int v26 = 1754;
    __int16 v27 = 2080;
    uint64_t v28 = "MvColo";
    unint64_t v22 = &_os_log_internal;
LABEL_22:
    _os_log_impl(&dword_223977000, v22, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
  }
LABEL_23:
  (*(void (**)(CAHDecCloverAvc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecCloverAvc::allocWorkBuf_PPS(CAHDecCloverAvc *this, unsigned char *a2, void *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = 16 * *((unsigned __int16 *)a2 + 779);
  if (((a2[6] + 9) & 0x1FEu) <= ((a2[7] + 9) & 0x1FEu)) {
    int v6 = (a2[7] + 9) & 0x1FE;
  }
  else {
    int v6 = (a2[6] + 9) & 0x1FE;
  }
  int v7 = a2[4];
  if (v7 == 3) {
    int v8 = 48;
  }
  else {
    int v8 = 32;
  }
  if (v7 == 3) {
    int v9 = 192;
  }
  else {
    int v9 = 128;
  }
  if (a2[4]) {
    int v10 = v8;
  }
  else {
    int v10 = 16;
  }
  if (a2[4]) {
    int v11 = v9;
  }
  else {
    int v11 = 64;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 915, 4 * (((unint64_t)(v5 + 16) >> 2) + ((unint64_t)(v5 + 16) >> 4)), 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_20:
      (*(void (**)(CAHDecCloverAvc *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    int v17 = 136315650;
    int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 1871;
    __int16 v21 = 2080;
    unint64_t v22 = "AvpAboveInfo";
    unsigned int v12 = &_os_log_internal;
LABEL_19:
    _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v17, 0x1Cu);
    goto LABEL_20;
  }
  unsigned int v14 = (v5 + 31) >> 4;
  uint64_t v15 = ((v6 * v10) >> 3) * v14;
  if (v15 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 926, v15, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 1874;
    __int16 v21 = 2080;
    unint64_t v22 = "IpAbove";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t v16 = ((v6 * v11) >> 3) * v14;
  if (v16 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 937, v16, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 1875;
    __int16 v21 = 2080;
    unint64_t v22 = "LfAbovePix";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 948, 32 * v14, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 1876;
    __int16 v21 = 2080;
    unint64_t v22 = "LfAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 640, 32 * v14, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 1879;
    __int16 v21 = 2080;
    unint64_t v22 = "MvAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  return result;
}

uint64_t CAHDecCloverAvc::freeWorkBuf_SPS(CAHDecCloverAvc *this)
{
  uint64_t v2 = 24;
  int v3 = (uint64_t *)this;
  do
  {
    uint64_t result = *((void *)this + 32);
    if (!*(_DWORD *)(result + 2648))
    {
      if (v3[70])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(result, v3 + 70);
        v3[70] = 0;
      }
      if (v3[598])
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 598);
        v3[598] = 0;
      }
    }
    if (v3[1302])
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), v3 + 1302);
      v3[1302] = 0;
    }
    v3 += 22;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t *CAHDecCloverAvc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[1830])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1830);
    v2[1830] = 0;
  }
  if (v2[1852])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1852);
    v2[1852] = 0;
  }
  if (v2[1280])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1280);
    v2[1280] = 0;
  }
  if (v2[1874])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1874);
    v2[1874] = 0;
  }
  if (v2[1896])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1896);
    v2[1896] = 0;
  }
  if (v2[1918])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1918);
    v2[1918] = 0;
  }
  if (v2[1940])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1940);
    v2[1940] = 0;
  }
  if (v2[1962])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1962);
    v2[1962] = 0;
  }
  return this;
}

uint64_t CAHDecCloverAvc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 9008;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 15888) = a2;
  return this;
}

uint64_t CAHDecCloverAvc::decodeBuffer(CAHDecCloverAvc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecCloverAvc::decodeBufferSize(CAHDecCloverAvc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecCloverAvc::decHdrYLinAddr(CAHDecCloverAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 70);
}

uint64_t CAHDecCloverAvc::decHdrCLinAddr(CAHDecCloverAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 598);
}

uint64_t CAHDecCloverAvc::decHdrYSize(CAHDecCloverAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 151);
}

uint64_t CAHDecCloverAvc::decHdrCSize(CAHDecCloverAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 1207);
}

uint64_t CAHDecCloverAvc::decHdrYStride(CAHDecCloverAvc *this)
{
  return *((unsigned int *)this + 3970);
}

uint64_t CAHDecCloverAvc::decHdrCStride(CAHDecCloverAvc *this)
{
  return *((unsigned int *)this + 3971);
}

CAHDecClaryLgh *createClaryLghDecoder(CAVDLghDecoder *a1)
{
  uint64_t v2 = (CAHDecClaryLgh *)operator new(0xC48uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecClaryLgh::CAHDecClaryLgh(v2, a1);
  }
  return v3;
}

void sub_2239D3D74(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecClaryLgh::CAHDecClaryLgh(CAHDecClaryLgh *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73E5D0;
  *(_DWORD *)(v1 + 456) = 151364;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecClaryLgh::CAHDecClaryLgh(CAHDecClaryLgh *this, CAVDLghDecoder *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73E5D0;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 151364;
  *(_DWORD *)(v4 + 8) = 836;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 151364, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      int v17 = "CAHDecClaryLgh";
      __int16 v18 = 1024;
      int v19 = 0;
      uint64_t v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
LABEL_16:
      _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v7);
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v8;
    *((void *)this + 34) = v8;
    uint64_t v9 = *((void *)this + 32);
    *(_DWORD *)(v9 + 17552) = 0;
    bzero((void *)(v9 + 11792), 0xB00uLL);
    *(_OWORD *)(v9 + 5712) = 0u;
    bzero((void *)(*((void *)this + 32) + 14608), 0xB00uLL);
    bzero((char *)this + 464, 0x4D0uLL);
    int v10 = (_OWORD *)*((void *)this + 32);
    v10[356] = 0u;
    v10[355] = 0u;
    v10[354] = 0u;
    v10[353] = 0u;
    v10[352] = 0u;
    v10[351] = 0u;
    v10[350] = 0u;
    v10[349] = 0u;
    v10[348] = 0u;
    v10[347] = 0u;
    v10[346] = 0u;
    v10[345] = 0u;
    v10[344] = 0u;
    v10[343] = 0u;
    v10[342] = 0u;
    v10[341] = 0u;
    v10[340] = 0u;
    v10[339] = 0u;
    v10[338] = 0u;
    v10[337] = 0u;
    v10[336] = 0u;
    v10[335] = 0u;
    bzero((char *)this + 1696, 0x580uLL);
    for (uint64_t i = 3072; i != 3776; i += 176)
    {
      unsigned int v12 = (_OWORD *)(*((void *)this + 32) + i);
      v12[9] = 0uLL;
      v12[10] = 0uLL;
      v12[7] = 0uLL;
      v12[8] = 0uLL;
      v12[5] = 0uLL;
      v12[6] = 0uLL;
      v12[3] = 0uLL;
      v12[4] = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      *unsigned int v12 = 0uLL;
    }
    do
    {
      int v13 = (_OWORD *)(*((void *)this + 32) + i);
      v13[9] = 0uLL;
      v13[10] = 0uLL;
      v13[7] = 0uLL;
      v13[8] = 0uLL;
      v13[5] = 0uLL;
      v13[6] = 0uLL;
      v13[3] = 0uLL;
      v13[4] = 0uLL;
      v13[1] = 0uLL;
      v13[2] = 0uLL;
      *int v13 = 0uLL;
      i += 176;
    }
    while (i != 5184);
    unsigned int v14 = (_OWORD *)*((void *)this + 32);
    v14[334] = 0u;
    v14[333] = 0u;
    v14[332] = 0u;
    v14[331] = 0u;
    v14[330] = 0u;
    v14[329] = 0u;
    v14[328] = 0u;
    v14[327] = 0u;
    v14[326] = 0u;
    v14[325] = 0u;
    uint64_t v15 = 3072;
    v14[324] = 0u;
    do
    {
      if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v15), 1913, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_17;
        }
        int v16 = 136315650;
        int v17 = "CAHDecClaryLgh";
        __int16 v18 = 1024;
        int v19 = 172;
        __int16 v20 = 2080;
        __int16 v21 = "probBuf";
        uint64_t v5 = &_os_log_internal;
        int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
        goto LABEL_15;
      }
      v15 += 176;
    }
    while (v15 != 3776);
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 5184), 12284, 7, 1, 0))return; {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    }
    {
      int v16 = 136315650;
      int v17 = "CAHDecClaryLgh";
      __int16 v18 = 1024;
      int v19 = 174;
      __int16 v20 = 2080;
      __int16 v21 = "stateBuf";
      uint64_t v5 = &_os_log_internal;
      int v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_15:
      uint32_t v7 = 28;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
}

void sub_2239D41AC(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecClaryLgh::~CAHDecClaryLgh(CAHDecClaryLgh *this)
{
  *(void *)this = &unk_26D73E5D0;
  CAHDecClaryLgh::freeWorkBuf_SPS(this);
  uint64_t v2 = *((void *)this + 32);
  for (uint64_t i = 3072; i != 3776; i += 176)
  {
    if (*(void *)(v2 + i))
    {
      CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + i));
      uint64_t v2 = *((void *)this + 32);
      *(void *)(v2 + i) = 0;
    }
  }
  if (*(void *)(v2 + 5184))
  {
    CAVDDecoder::deallocAVDMem(v2, (uint64_t *)(v2 + 5184));
    *(void *)(*((void *)this + 32) + 5184) = 0;
  }
  (*(void (**)(CAHDecClaryLgh *, void))(*(void *)this + 152))(this, 0);
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecClaryLgh::~CAHDecClaryLgh(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecClaryLgh::startPicture(CAHDecClaryLgh *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  uint64_t v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x24F44uLL);
    uint64_t v5 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v5 + 16) = a2;
    *(_WORD *)(v5 + 24) = 257;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecClaryLgh::DecodePicture(CAHDecClaryLgh *this, uint64_t a2)
{
  if (CAHDecClaryLgh::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecClaryLgh *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecClaryLgh *))(*(void *)this + 48))(this);
  (*(void (**)(CAHDecClaryLgh *))(*(void *)this + 56))(this);
  CAHDecClaryLgh::populateTiles(this);
  (*(void (**)(CAHDecClaryLgh *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecClaryLgh *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecClaryLgh::populateTiles(CAHDecClaryLgh *this)
{
  uint64_t v1 = (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 316)
                    * *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 312));
  if (v1)
  {
    uint64_t v3 = *((void *)this + *((unsigned int *)this + 13) + 34) + 836;
    do
    {
      CAHDecClaryLgh::populateTileRegisters((uint64_t)this, v3);
      v3 += 12;
      --v1;
    }
    while (v1);
  }
  return 0;
}

uint64_t CAHDecClaryLgh::populateCommonRegisters(CAHDecClaryLgh *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000002;
  return 0;
}

uint64_t CAHDecClaryLgh::updateCommonRegisters(CAHDecClaryLgh *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

uint64_t CAHDecClaryLgh::populateSequenceRegisters(CAHDecClaryLgh *this)
{
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  unsigned __int16 v3 = *(_DWORD *)(v2 + 108) - 1;
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v3;
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (v3 | ((unsigned __int16)*(_DWORD *)(v2 + 112) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 304);
  if (v4 >= 3) {
    int v5 = 6528;
  }
  else {
    int v5 = ((v4 & 3) << 7) | 0x1800;
  }
  *(_DWORD *)(v1 + 44) = v5;
  unsigned int v6 = v5 & 0xFFF87FFF | (((*(unsigned char *)(v2 + 105) + 8) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFF87FFFF | (((*(unsigned __int8 *)(v2 + 105) + 8) & 0xF) << 19) | 0x1000000;
  *(_DWORD *)(v1 + 44) = v7;
  *(_DWORD *)(v1 + 44) = v7 & 0xFDFFFFFF | (*(unsigned char *)(v2 + 304) == 4);
  return 0;
}

uint64_t CAHDecClaryLgh::populatePictureRegisters(CAHDecClaryLgh *this)
{
  uint64_t v394 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v2 + 17560);
  if (*(unsigned char *)(v4 + 37)) {
    BOOL v5 = *(unsigned char *)(v4 + 40) != 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = *(_DWORD *)(v2 + 11748);
  int v7 = *(_DWORD *)(v4 + 100);
  int v388 = *(_DWORD *)(v4 + 96);
  int v387 = 1 << v7;
  char v8 = *(unsigned char *)(v2 + 2675);
  char v9 = *(unsigned char *)(v2 + 2674);
  if (v5) {
    int v10 = 766517248;
  }
  else {
    int v10 = 766509056;
  }
  *(_DWORD *)(v3 + 48) = v10;
  int v11 = v10 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v3 + 48) = v11;
  if (*(_DWORD *)(*((void *)this + 32) + 2644) == 1) {
    int v12 = 1024;
  }
  else {
    int v12 = 1;
  }
  unsigned int v13 = v12 & 0xFFFFFFF0 | (4 * (v8 & 3)) | v9 & 3 | v11 | 0x2E0;
  *(_DWORD *)(v3 + 48) = v13;
  unsigned int v14 = (unsigned char *)*((void *)this + 32);
  int v15 = v13 | ((v14[2652] & 1) << 19);
  *(_DWORD *)(v3 + 48) = v15;
  int v16 = v15 | ((v14[2653] & 1) << 18);
  *(_DWORD *)(v3 + 48) = v16;
  *(_DWORD *)(v3 + 48) = v16 | ((v14[2654] & 1) << 17);
  *(void *)(v3 + 52) = 0x2000000;
  LOWORD(v16) = *(_DWORD *)(v4 + 108) - 1;
  *(_DWORD *)(v3 + 56) = (unsigned __int16)v16;
  *(_DWORD *)(v3 + 56) = ((unsigned __int16)v16 | ((unsigned __int16)*(_DWORD *)(v4 + 112) << 16)) - 0x10000;
  *(void *)(v3 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v17 = *(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2688) & 7;
  *(_DWORD *)(v3 + 64) = v17;
  unsigned int v18 = v17 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2692) & 1));
  *(_DWORD *)(v3 + 64) = v18;
  unsigned int v19 = v18 & 0xFFFFFF8F | (16 * (*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2696) & 7));
  *(_DWORD *)(v3 + 64) = v19;
  unsigned int v20 = v19 & 0xFFFFFF7F | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2700) & 1) << 7);
  *(_DWORD *)(v3 + 64) = v20;
  unsigned int v21 = v20 & 0xFFFFF8FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2704) & 7) << 8);
  *(_DWORD *)(v3 + 64) = v21;
  unsigned int v22 = v21 & 0xFFFFF7FF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2708) & 1) << 11);
  *(_DWORD *)(v3 + 64) = v22;
  unsigned int v23 = v22 & 0xFFFFCFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2712) & 3) << 12);
  *(_DWORD *)(v3 + 64) = v23;
  unsigned int v24 = v23 & 0xFFFFBFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2716) & 1) << 14);
  *(_DWORD *)(v3 + 64) = v24;
  unsigned int v25 = v24 & 0xFFFF7FFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2720) & 1) << 15);
  *(_DWORD *)(v3 + 64) = v25;
  unsigned int v26 = v25 & 0xFFF8FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2724) & 7) << 16);
  *(_DWORD *)(v3 + 64) = v26;
  unsigned int v27 = v26 & 0xFFF7FFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2728) & 1) << 19);
  *(_DWORD *)(v3 + 64) = v27;
  unsigned int v28 = v27 & 0xFFEFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2732) & 1) << 20);
  *(_DWORD *)(v3 + 64) = v28;
  unsigned int v29 = v28 & 0xFFDFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2736) & 1) << 21);
  *(_DWORD *)(v3 + 64) = v29;
  unsigned int v30 = v29 & 0xFFBFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2740) & 1) << 22);
  *(_DWORD *)(v3 + 64) = v30;
  unsigned int v31 = v30 & 0xFF7FFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2744) & 1) << 23);
  *(_DWORD *)(v3 + 64) = v31;
  unsigned int v32 = v31 & 0xFEFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2748) & 1) << 24);
  *(_DWORD *)(v3 + 64) = v32;
  unsigned int v33 = v32 & 0xFDFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2752) & 1) << 25);
  *(_DWORD *)(v3 + 64) = v33;
  *(_DWORD *)(v3 + 64) = v33 & 0xFBFFFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 17560) + 2756) & 1) << 26);
  *(void *)(v3 + 68) = 0;
  if (*(unsigned char *)(v4 + 60))
  {
    int v34 = *(unsigned char *)(v4 + 69) & 0x7F;
    *(_DWORD *)(v3 + 68) = v34;
    unsigned int v35 = v34 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 68) & 0x7F) << 7);
    *(_DWORD *)(v3 + 68) = v35;
    unsigned int v36 = v35 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 67) & 0x7F) << 14);
    *(_DWORD *)(v3 + 68) = v36;
    unsigned int v37 = v36 & 0xF01FFFFF | ((*(unsigned char *)(v4 + 66) & 0x7F) << 21);
    *(_DWORD *)(v3 + 68) = v37;
    *(_DWORD *)(v3 + 68) = v37 & 0x8FFFFFFF | ((*(unsigned char *)(v4 + 59) & 7) << 28);
    int v38 = *(unsigned char *)(v4 + 73) & 0x7F;
    *(_DWORD *)(v3 + 72) = v38;
    unsigned int v39 = v38 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 72) & 0x7F) << 7);
    *(_DWORD *)(v3 + 72) = v39;
    unsigned int v40 = v39 & 0xFFF03FFF | ((*(unsigned char *)(v4 + 58) & 0x3F) << 14);
  }
  else
  {
    *(_DWORD *)(v3 + 68) = (*(unsigned char *)(v4 + 59) & 7) << 28;
    unsigned int v40 = (*(unsigned char *)(v4 + 58) & 0x3F) << 14;
  }
  uint64_t v41 = 0;
  int v389 = 1 << v388;
  int v386 = v7;
  int v385 = 1 << v388 << v7;
  *(_DWORD *)(v3 + 72) = v40;
  *(_DWORD *)(v3 + 76) = 0;
  int v42 = *(unsigned char *)(v4 + 77) & 0x1F;
  *(_DWORD *)(v3 + 76) = v42;
  unsigned int v43 = v42 & 0xFFFFFC1F | (32 * (*(unsigned char *)(v4 + 76) & 0x1F));
  *(_DWORD *)(v3 + 76) = v43;
  unsigned int v44 = v43 & 0xFFFF83FF | ((*(unsigned char *)(v4 + 75) & 0x1F) << 10);
  *(_DWORD *)(v3 + 76) = v44;
  *(_DWORD *)(v3 + 76) = v44 | (*(unsigned __int8 *)(v4 + 74) << 15);
  uint64_t v45 = v3 + 80;
  int v46 = (_WORD *)(v4 + 242);
  uint64_t v47 = v4 + 208;
  do
  {
    int v48 = *(unsigned __int8 *)(v4 + 78);
    *(_DWORD *)(v45 + v41) = 0;
    if (v48)
    {
      BOOL v49 = *(unsigned char *)(v47 + v41) != 0;
      *(_DWORD *)(v45 + v41) = v49;
      BOOL v50 = *(unsigned __int8 *)(v47 + v41 - 1) != 0;
    }
    else
    {
      BOOL v49 = 0;
      BOOL v50 = 0;
    }
    int v51 = v49 | (8 * v50);
    *(_DWORD *)(v45 + v41) = v51;
    unsigned int v52 = v51 & 0xFFFFFFF9 | (2 * (*v46 & 3));
    *(_DWORD *)(v45 + v41) = v52;
    if (v48)
    {
      int v53 = *(unsigned __int8 *)(v47 + v41 - 2);
      int v54 = v52 | ((*(unsigned char *)(v47 + v41 - 2) != 0) << 11);
      *(_DWORD *)(v45 + v41) = v54;
      if (v53) {
        LOWORD(v53) = *(v46 - 1);
      }
      unsigned int v55 = (16 * (v53 & 0x7F)) | v54 & 0xFFFFF80F;
      *(_DWORD *)(v45 + v41) = v55;
      int v48 = *(unsigned __int8 *)(v47 + v41 - 3);
      unsigned int v52 = v55 | ((v48 != 0) << 21);
      *(_DWORD *)(v45 + v41) = v52;
      if (v48) {
        LOWORD(v48) = *(v46 - 2);
      }
    }
    *(_DWORD *)(v45 + v41) = v52 & 0xFFE00FFF | ((v48 & 0x1FF) << 12);
    v41 += 4;
    v46 += 4;
  }
  while (v41 != 32);
  *(_DWORD *)(v3 + 152) = 0x20000;
  uint64_t v390 = v4;
  BOOL v383 = v5;
  if (v5)
  {
    uint64_t v384 = 8;
  }
  else
  {
    int v56 = (_DWORD *)(v3 + 112);
    uint64_t v57 = 2178;
    uint64_t v384 = 3;
    int v58 = &_os_log_internal;
    do
    {
      v56[11] = 0x1000000;
      *int v56 = 0;
      unsigned __int16 v59 = **(_DWORD **)(*((void *)this + 32) + 8 * v57) - 1;
      *int v56 = v59;
      *int v56 = (v59 | ((unsigned __int16)*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 16))
           - 0x10000;
      v56[3] = 0;
      int v60 = (unsigned __int16)((**(_DWORD **)(*((void *)this + 32) + 8 * v57) << 14) / *(_DWORD *)(v4 + 108));
      v56[3] = v60;
      int v61 = v60 | ((unsigned __int16)((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8 * v57) + 4) << 14)
                                    / *(_DWORD *)(v4 + 112)) << 16);
      v56[3] = v61;
      if ((v60 - 1024) >= 0x7C01 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 543;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
        int v61 = v56[3];
      }
      if ((v61 - 0x4000000) >= 0x7C010000 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "populatePictureRegisters";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 544;
        _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)buf, 0x12u);
      }
      ++v57;
      ++v56;
      uint64_t v4 = v390;
    }
    while (v57 != 2181);
  }
  *(void *)(v3 + 144) = 0;
  int v62 = *(unsigned __int16 *)(v4 + 2672);
  *(_DWORD *)(v3 + 144) = v62;
  *(_DWORD *)(v3 + 144) = v62 | (*(_DWORD *)(v4 + 2676) << 16);
  int v63 = *(unsigned __int16 *)(v4 + 2680);
  *(_DWORD *)(v3 + 148) = v63;
  *(_DWORD *)(v3 + 148) = v63 | (*(_DWORD *)(v4 + 2684) << 16);
  int v64 = (char *)this + 464;
  for (uint64_t i = 196; i != 224; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i - 28) = 0;
    uint64_t v66 = *((void *)this + 33) + i;
    int v67 = *(_DWORD *)(v66 - 28);
    *(_DWORD *)(v66 - 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i - 28) ^= 0xFFFFFF00;
    uint64_t v68 = *((void *)this + 33) + i;
    int v69 = *(_DWORD *)(v68 - 28);
    *(_DWORD *)(v68 - 28) = v67;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)i - 28, 0, 0xFFFFFFFFLL, 8, v69, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) = *(_DWORD *)(*((void *)this + 33) + i) & 0x800001FF | (((*((_DWORD *)this + 780) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + i + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    uint64_t v71 = *((void *)this + 33) + i;
    int v72 = *(_DWORD *)(v71 + 180);
    *(_DWORD *)(v71 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 180) ^= 0x3FFu;
    uint64_t v73 = *((void *)this + 33) + i;
    int v74 = *(_DWORD *)(v73 + 180);
    *(_DWORD *)(v73 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v72;
    if (*(void *)v64 || *((_DWORD *)v64 + 38) || *((_DWORD *)v64 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v64, (int)i + 180, 0, 0x3FFFFFFFFFFLL, 32, v74, 4);
      if (result) {
        return result;
      }
    }
    v64 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 224) = 0;
  uint64_t v75 = *((void *)this + 33);
  int v76 = *(_DWORD *)(v75 + 224);
  *(_DWORD *)(v75 + 224) = 0;
  *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFF00;
  uint64_t v77 = *((void *)this + 33);
  int v78 = *(_DWORD *)(v77 + 224);
  *(_DWORD *)(v77 + 224) = v76;
  uint64_t v79 = *((void *)this + 32);
  if (*(void *)(v79 + 5184) || *(_DWORD *)(v79 + 5336) || *(_DWORD *)(v79 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v79 + 5184), 224, 0, 0xFFFFFFFFLL, 8, v78, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 404) = 0;
  uint64_t v80 = *((void *)this + 33);
  int v81 = *(_DWORD *)(v80 + 404);
  *(_DWORD *)(v80 + 404) = 0;
  *(_DWORD *)(*((void *)this + 33) + 404) ^= 0x3FFu;
  uint64_t v82 = *((void *)this + 33);
  int v83 = *(_DWORD *)(v82 + 404);
  *(_DWORD *)(v82 + 404) = v81;
  uint64_t v84 = *((void *)this + 32);
  if (*(void *)(v84 + 5184) || *(_DWORD *)(v84 + 5336) || *(_DWORD *)(v84 + 5340))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v84 + 5184), 404, 0, 0x3FFFFFFFFFFLL, 32, v83, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 228) = 0;
  *(_DWORD *)(*((void *)this + 33) + 408) = 0;
  if ((*(unsigned char *)(v3 + 50) & 8) != 0)
  {
    uint64_t v85 = *((void *)this + 33);
    uint64_t v86 = *(void *)(*((void *)this + 32) + 2680);
    long long v392 = 0u;
    long long v393 = 0u;
    memset(buf, 0, sizeof(buf));
    int v87 = (*(_DWORD *)(v85 + 16) & 0xF) << 9;
    *(void *)&buf[0] = v86;
    int v88 = *(_DWORD *)(v85 + 228);
    *(_DWORD *)(v85 + 228) = 0;
    *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFF00;
    uint64_t v89 = *((void *)this + 33);
    int v90 = *(_DWORD *)(v89 + 228);
    *(_DWORD *)(v89 + 228) = v88;
    if (v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 228, v87, 0xFFFFFFFFLL, 8, v90, 4);
      if (result) {
        return result;
      }
      uint64_t v91 = *(void *)&buf[0];
      int v92 = DWORD2(v392);
      LODWORD(v86) = HIDWORD(v392);
    }
    else
    {
      int v92 = 0;
      uint64_t v91 = 0;
    }
    uint64_t v93 = *((void *)this + 33);
    int v94 = *(_DWORD *)(v93 + 408);
    *(_DWORD *)(v93 + 408) = 0;
    *(_DWORD *)(*((void *)this + 33) + 408) ^= 0x3FFu;
    uint64_t v95 = *((void *)this + 33);
    int v96 = *(_DWORD *)(v95 + 408);
    *(_DWORD *)(v95 + 408) = v94;
    if (v91 || v92 || v86)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 408, v87, 0x3FFFFFFFFFFLL, 32, v96, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v97 = *((void *)this + 33);
  int v98 = *(_DWORD *)(v97 + 280);
  *(_DWORD *)(v97 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 280) ^= 0xFFFFFF00;
  uint64_t v99 = *((void *)this + 33);
  int v100 = *(_DWORD *)(v99 + 280);
  *(_DWORD *)(v99 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v98;
  if (*((void *)this + 278) || *((_DWORD *)this + 594) || *((_DWORD *)this + 595))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 280, 0, 0xFFFFFFFFLL, 8, v100, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v101 = *((void *)this + 33);
  int v102 = *(_DWORD *)(v101 + 460);
  *(_DWORD *)(v101 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 460) ^= 0x3FFu;
  uint64_t v103 = *((void *)this + 33);
  int v104 = *(_DWORD *)(v103 + 460);
  *(_DWORD *)(v103 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v102;
  if (*((void *)this + 278) || *((_DWORD *)this + 594) || *((_DWORD *)this + 595))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 460, 0, 0x3FFFFFFFFFFLL, 32, v104, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 232) = 0;
  uint64_t v105 = *((void *)this + 33);
  int v106 = *(_DWORD *)(v105 + 232);
  *(_DWORD *)(v105 + 232) = 0;
  *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFF00;
  uint64_t v107 = *((void *)this + 33);
  int v108 = *(_DWORD *)(v107 + 232);
  *(_DWORD *)(v107 + 232) = v106;
  if (*((void *)this + 234) || *((_DWORD *)this + 506) || *((_DWORD *)this + 507))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 232, 0, 0xFFFFFFFFLL, 8, v108, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 412) = 0;
  uint64_t v109 = *((void *)this + 33);
  int v110 = *(_DWORD *)(v109 + 412);
  *(_DWORD *)(v109 + 412) = 0;
  *(_DWORD *)(*((void *)this + 33) + 412) ^= 0x3FFu;
  uint64_t v111 = *((void *)this + 33);
  int v112 = *(_DWORD *)(v111 + 412);
  *(_DWORD *)(v111 + 412) = v110;
  if (*((void *)this + 234) || *((_DWORD *)this + 506) || *((_DWORD *)this + 507))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 412, 0, 0x3FFFFFFFFFFLL, 32, v112, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 236) = 0;
  uint64_t v113 = *((void *)this + 33);
  int v114 = *(_DWORD *)(v113 + 236);
  *(_DWORD *)(v113 + 236) = 0;
  *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFF00;
  uint64_t v115 = *((void *)this + 33);
  int v116 = *(_DWORD *)(v115 + 236);
  *(_DWORD *)(v115 + 236) = v114;
  if (*((void *)this + 256) || *((_DWORD *)this + 550) || *((_DWORD *)this + 551))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 236, 0, 0xFFFFFFFFLL, 8, v116, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 416) = 0;
  uint64_t v117 = *((void *)this + 33);
  int v118 = *(_DWORD *)(v117 + 416);
  *(_DWORD *)(v117 + 416) = 0;
  *(_DWORD *)(*((void *)this + 33) + 416) ^= 0x3FFu;
  uint64_t v119 = *((void *)this + 33);
  int v120 = *(_DWORD *)(v119 + 416);
  *(_DWORD *)(v119 + 416) = v118;
  if (*((void *)this + 256) || *((_DWORD *)this + 550) || *((_DWORD *)this + 551))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 416, 0, 0x3FFFFFFFFFFLL, 32, v120, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 42pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) = 0;
  uint64_t v121 = *((void *)this + 33);
  int v122 = *(_DWORD *)(v121 + 244);
  *(_DWORD *)(v121 + 244) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFF00;
  uint64_t v123 = *((void *)this + 33);
  int v124 = *(_DWORD *)(v123 + 244);
  *(_DWORD *)(v123 + 244) = v122;
  if (*((void *)this + 300) || *((_DWORD *)this + 638) || *((_DWORD *)this + 639))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 244, 0, 0xFFFFFFFFLL, 8, v124, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 424) = 0;
  uint64_t v125 = *((void *)this + 33);
  int v126 = *(_DWORD *)(v125 + 424);
  *(_DWORD *)(v125 + 424) = 0;
  *(_DWORD *)(*((void *)this + 33) + 424) ^= 0x3FFu;
  uint64_t v127 = *((void *)this + 33);
  int v128 = *(_DWORD *)(v127 + 424);
  *(_DWORD *)(v127 + 424) = v126;
  if (*((void *)this + 300) || *((_DWORD *)this + 638) || *((_DWORD *)this + 639))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 424, 0, 0x3FFFFFFFFFFLL, 32, v128, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 248) = 0;
  uint64_t v129 = *((void *)this + 33);
  int v130 = *(_DWORD *)(v129 + 248);
  *(_DWORD *)(v129 + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFF00;
  uint64_t v131 = *((void *)this + 33);
  int v132 = *(_DWORD *)(v131 + 248);
  *(_DWORD *)(v131 + 248) = v130;
  if (*((void *)this + 322) || *((_DWORD *)this + 682) || *((_DWORD *)this + 683))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 248, 0, 0xFFFFFFFFLL, 8, v132, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 428) = 0;
  uint64_t v133 = *((void *)this + 33);
  int v134 = *(_DWORD *)(v133 + 428);
  *(_DWORD *)(v133 + 428) = 0;
  *(_DWORD *)(*((void *)this + 33) + 428) ^= 0x3FFu;
  uint64_t v135 = *((void *)this + 33);
  int v136 = *(_DWORD *)(v135 + 428);
  *(_DWORD *)(v135 + 428) = v134;
  if (*((void *)this + 322) || *((_DWORD *)this + 682) || *((_DWORD *)this + 683))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 428, 0, 0x3FFFFFFFFFFLL, 32, v136, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 432) = 0;
  uint64_t v137 = *((void *)this + 33);
  int v138 = *(_DWORD *)(v137 + 252);
  *(_DWORD *)(v137 + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFF00;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 252);
  *(_DWORD *)(v139 + 252) = v138;
  if (*((void *)this + 344) || *((_DWORD *)this + 726) || *((_DWORD *)this + 727))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 252, 0, 0xFFFFFFFFLL, 8, v140, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 432);
  *(_DWORD *)(v141 + 432) = 0;
  *(_DWORD *)(*((void *)this + 33) + 432) ^= 0x3FFu;
  uint64_t v143 = *((void *)this + 33);
  int v144 = *(_DWORD *)(v143 + 432);
  *(_DWORD *)(v143 + 432) = v142;
  if (*((void *)this + 344) || *((_DWORD *)this + 726) || *((_DWORD *)this + 727))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 432, 0, 0x3FFFFFFFFFFLL, 32, v144, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 256) = 0;
  uint64_t v145 = *((void *)this + 33);
  int v146 = *(_DWORD *)(v145 + 256);
  *(_DWORD *)(v145 + 256) = 0;
  *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFF00;
  uint64_t v147 = *((void *)this + 33);
  int v148 = *(_DWORD *)(v147 + 256);
  *(_DWORD *)(v147 + 256) = v146;
  if (*((void *)this + 366) || *((_DWORD *)this + 770) || *((_DWORD *)this + 771))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 256, 0, 0xFFFFFFFFLL, 8, v148, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 436) = 0;
  uint64_t v149 = *((void *)this + 33);
  int v150 = *(_DWORD *)(v149 + 436);
  *(_DWORD *)(v149 + 436) = 0;
  *(_DWORD *)(*((void *)this + 33) + 436) ^= 0x3FFu;
  uint64_t v151 = *((void *)this + 33);
  int v152 = *(_DWORD *)(v151 + 436);
  *(_DWORD *)(v151 + 436) = v150;
  if (*((void *)this + 366) || *((_DWORD *)this + 770) || *((_DWORD *)this + 771))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 436, 0, 0x3FFFFFFFFFFLL, 32, v152, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v153 = *((void *)this + 33);
  int v154 = *(_DWORD *)(v153 + 260);
  *(_DWORD *)(v153 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFF00;
  uint64_t v155 = *((void *)this + 33);
  int v156 = *(_DWORD *)(v155 + 260);
  *(_DWORD *)(v155 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v154;
  uint64_t v157 = *((void *)this + 32);
  unsigned int v158 = *(_DWORD *)(v157 + 17568);
  uint64_t v159 = v157 + 176 * v158;
  if (*(void *)(v159 + 3072) || *(_DWORD *)(v157 + 176 * v158 + 3224) || *(_DWORD *)(v157 + 176 * v158 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v159 + 3072), 260, 0, 0xFFFFFFFFLL, 8, v156, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v160 = *((void *)this + 33);
  int v161 = *(_DWORD *)(v160 + 440);
  *(_DWORD *)(v160 + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 440) ^= 0x3FFu;
  uint64_t v162 = *((void *)this + 33);
  int v163 = *(_DWORD *)(v162 + 440);
  *(_DWORD *)(v162 + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v161;
  uint64_t v164 = *((void *)this + 32);
  unsigned int v165 = *(_DWORD *)(v164 + 17568);
  uint64_t v166 = v164 + 176 * v165;
  if (*(void *)(v166 + 3072) || *(_DWORD *)(v164 + 176 * v165 + 3224) || *(_DWORD *)(v164 + 176 * v165 + 3228))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v166 + 3072), 440, 0, 0x3FFFFFFFFFFLL, 32, v163, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 264) = 0;
  uint64_t v167 = *((void *)this + 33);
  int v168 = *(_DWORD *)(v167 + 264);
  *(_DWORD *)(v167 + 264) = 0;
  *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFF00;
  uint64_t v169 = *((void *)this + 33);
  int v170 = *(_DWORD *)(v169 + 264);
  *(_DWORD *)(v169 + 264) = v168;
  uint64_t v171 = *((void *)this + 32);
  int v172 = *(_DWORD *)(v171 + 5724);
  uint64_t v173 = v171 + 176 * v172;
  if (*(void *)(v173 + 3776) || *(_DWORD *)(v171 + 176 * v172 + 3928) || *(_DWORD *)(v171 + 176 * v172 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v173 + 3776), 264, 0, 0xFFFFFFFFLL, 8, v170, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 444) = 0;
  uint64_t v174 = *((void *)this + 33);
  int v175 = *(_DWORD *)(v174 + 444);
  *(_DWORD *)(v174 + 444) = 0;
  *(_DWORD *)(*((void *)this + 33) + 444) ^= 0x3FFu;
  uint64_t v176 = *((void *)this + 33);
  int v177 = *(_DWORD *)(v176 + 444);
  *(_DWORD *)(v176 + 444) = v175;
  uint64_t v178 = *((void *)this + 32);
  int v179 = *(_DWORD *)(v178 + 5724);
  uint64_t v180 = v178 + 176 * v179;
  if (*(void *)(v180 + 3776) || *(_DWORD *)(v178 + 176 * v179 + 3928) || *(_DWORD *)(v178 + 176 * v179 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v180 + 3776), 444, 0, 0x3FFFFFFFFFFLL, 32, v177, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 268) = 0;
  uint64_t v181 = *((void *)this + 33);
  int v182 = *(_DWORD *)(v181 + 268);
  *(_DWORD *)(v181 + 268) = 0;
  *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFF00;
  uint64_t v183 = *((void *)this + 33);
  int v184 = *(_DWORD *)(v183 + 268);
  *(_DWORD *)(v183 + 268) = v182;
  uint64_t v185 = *((void *)this + 32);
  int v186 = *(_DWORD *)(v185 + 5720);
  uint64_t v187 = v185 + 176 * v186;
  if (*(void *)(v187 + 3776) || *(_DWORD *)(v185 + 176 * v186 + 3928) || *(_DWORD *)(v185 + 176 * v186 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v187 + 3776), 268, 0, 0xFFFFFFFFLL, 8, v184, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 448) = 0;
  uint64_t v188 = *((void *)this + 33);
  int v189 = *(_DWORD *)(v188 + 448);
  *(_DWORD *)(v188 + 448) = 0;
  *(_DWORD *)(*((void *)this + 33) + 448) ^= 0x3FFu;
  uint64_t v190 = *((void *)this + 33);
  int v191 = *(_DWORD *)(v190 + 448);
  *(_DWORD *)(v190 + 448) = v189;
  uint64_t v192 = *((void *)this + 32);
  int v193 = *(_DWORD *)(v192 + 5720);
  uint64_t v194 = v192 + 176 * v193;
  if (*(void *)(v194 + 3776) || *(_DWORD *)(v192 + 176 * v193 + 3928) || *(_DWORD *)(v192 + 176 * v193 + 3932))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v194 + 3776), 448, 0, 0x3FFFFFFFFFFLL, 32, v191, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 272) = 0;
  uint64_t v195 = *((void *)this + 33);
  int v196 = *(_DWORD *)(v195 + 272);
  *(_DWORD *)(v195 + 272) = 0;
  *(_DWORD *)(*((void *)this + 33) + 272) ^= 0xFFFFFF00;
  uint64_t v197 = *((void *)this + 33);
  int v198 = *(_DWORD *)(v197 + 272);
  *(_DWORD *)(v197 + 272) = v196;
  uint64_t v199 = *((void *)this + 32);
  int v200 = *(_DWORD *)(v199 + 5716);
  uint64_t v201 = v199 + 176 * v200;
  if (*(void *)(v201 + 5360) || *(_DWORD *)(v199 + 176 * v200 + 5512) || *(_DWORD *)(v199 + 176 * v200 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v201 + 5360), 272, 0, 0xFFFFFFFFLL, 8, v198, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 452) = 0;
  uint64_t v202 = *((void *)this + 33);
  int v203 = *(_DWORD *)(v202 + 452);
  *(_DWORD *)(v202 + 452) = 0;
  *(_DWORD *)(*((void *)this + 33) + 452) ^= 0x3FFu;
  uint64_t v204 = *((void *)this + 33);
  int v205 = *(_DWORD *)(v204 + 452);
  *(_DWORD *)(v204 + 452) = v203;
  uint64_t v206 = *((void *)this + 32);
  int v207 = *(_DWORD *)(v206 + 5716);
  uint64_t v208 = v206 + 176 * v207;
  if (*(void *)(v208 + 5360) || *(_DWORD *)(v206 + 176 * v207 + 5512) || *(_DWORD *)(v206 + 176 * v207 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v208 + 5360), 452, 0, 0x3FFFFFFFFFFLL, 32, v205, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 276) = 0;
  uint64_t v209 = *((void *)this + 33);
  int v210 = *(_DWORD *)(v209 + 276);
  *(_DWORD *)(v209 + 276) = 0;
  *(_DWORD *)(*((void *)this + 33) + 276) ^= 0xFFFFFF00;
  uint64_t v211 = *((void *)this + 33);
  int v212 = *(_DWORD *)(v211 + 276);
  *(_DWORD *)(v211 + 276) = v210;
  uint64_t v213 = *((void *)this + 32);
  int v214 = *(_DWORD *)(v213 + 5712);
  uint64_t v215 = v213 + 176 * v214;
  if (*(void *)(v215 + 5360) || *(_DWORD *)(v213 + 176 * v214 + 5512) || *(_DWORD *)(v213 + 176 * v214 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v215 + 5360), 276, 0, 0xFFFFFFFFLL, 8, v212, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 456) = 0;
  uint64_t v216 = *((void *)this + 33);
  int v217 = *(_DWORD *)(v216 + 456);
  *(_DWORD *)(v216 + 456) = 0;
  *(_DWORD *)(*((void *)this + 33) + 456) ^= 0x3FFu;
  uint64_t v218 = *((void *)this + 33);
  int v219 = *(_DWORD *)(v218 + 456);
  *(_DWORD *)(v218 + 456) = v217;
  uint64_t v220 = *((void *)this + 32);
  int v221 = *(_DWORD *)(v220 + 5712);
  uint64_t v222 = v220 + 176 * v221;
  if (*(void *)(v222 + 5360) || *(_DWORD *)(v220 + 176 * v221 + 5512) || *(_DWORD *)(v220 + 176 * v221 + 5516))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v222 + 5360), 456, 0, 0x3FFFFFFFFFFLL, 32, v219, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 464) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 468) = 0;
  *(_DWORD *)(*((void *)this + 33) + 292) = 0;
  *(_DWORD *)(*((void *)this + 33) + 472) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 476) = 0;
  uint64_t v223 = *((void *)this + 33);
  int v224 = *(_DWORD *)(v223 + 288);
  *(_DWORD *)(v223 + 288) = 0;
  *(_DWORD *)(*((void *)this + 33) + 288) ^= 0xFFFFFF80;
  uint64_t v225 = *((void *)this + 33);
  int v226 = *(_DWORD *)(v225 + 288);
  *(_DWORD *)(v225 + 288) = v224;
  uint64_t v227 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v227 || *(_DWORD *)(v227 + 152) || *(_DWORD *)(v227 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v227, 288, *(_DWORD *)(v227 + 52), 0xFFFFFFFFLL, 7, v226, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v228 = *((void *)this + 33);
  int v229 = *(_DWORD *)(v228 + 468);
  *(_DWORD *)(v228 + 468) = 0;
  *(_DWORD *)(*((void *)this + 33) + 468) ^= 0x3FFu;
  uint64_t v230 = *((void *)this + 33);
  int v231 = *(_DWORD *)(v230 + 468);
  *(_DWORD *)(v230 + 468) = v229;
  uint64_t v232 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v232 || *(_DWORD *)(v232 + 152) || *(_DWORD *)(v232 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v232, 468, *(_DWORD *)(v232 + 52), 0x3FFFFFFFFFFLL, 32, v231, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v233 = *((void *)this + 33);
  int v234 = *(_DWORD *)(v233 + 296);
  *(_DWORD *)(v233 + 296) = 0;
  *(_DWORD *)(*((void *)this + 33) + 296) ^= 0xFFFFFF80;
  uint64_t v235 = *((void *)this + 33);
  int v236 = *(_DWORD *)(v235 + 296);
  *(_DWORD *)(v235 + 296) = v234;
  uint64_t v237 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
  if (*(void *)v237 || *(_DWORD *)(v237 + 152) || *(_DWORD *)(v237 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v237, 296, *(_DWORD *)(v237 + 56), 0xFFFFFFFFLL, 7, v236, 4);
    if (result) {
      return result;
    }
  }
  uint64_t v238 = v3;
  uint64_t v239 = *((void *)this + 33);
  int v240 = *(_DWORD *)(v239 + 476);
  *(_DWORD *)(v239 + 476) = 0;
  *(_DWORD *)(*((void *)this + 33) + 476) ^= 0x3FFu;
  uint64_t v241 = *((void *)this + 33);
  int v242 = *(_DWORD *)(v241 + 476);
  *(_DWORD *)(v241 + 476) = v240;
  uint64_t v243 = *((void *)this + 32);
  uint64_t v244 = *(void *)(v243 + 376 * v6 + 5736);
  if (*(void *)v244 || *(_DWORD *)(v244 + 152) || *(_DWORD *)(v244 + 156))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v244, 476, *(_DWORD *)(v244 + 56), 0x3FFFFFFFFFFLL, 32, v242, 4);
    if (result) {
      return result;
    }
    uint64_t v243 = *((void *)this + 32);
  }
  int v245 = *(_DWORD *)(v243 + 2648);
  uint64_t v246 = *((void *)this + 33);
  int v247 = *(_DWORD *)(v246 + 284);
  *(_DWORD *)(v246 + 284) = 0;
  *(_DWORD *)(*((void *)this + 33) + 284) ^= 0xFFFFFF80;
  uint64_t v248 = *((void *)this + 33);
  int v249 = *(_DWORD *)(v248 + 284);
  *(_DWORD *)(v248 + 284) = v247;
  uint64_t v250 = *((void *)this + 32);
  if (v245 == 1)
  {
    uint64_t v251 = *(void *)(v250 + 376 * v6 + 5736);
    if (*(void *)v251 || *(_DWORD *)(v251 + 152) || *(_DWORD *)(v251 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v251, 284, *(_DWORD *)(v251 + 64), 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v252 = *((void *)this + 33);
    int v253 = *(_DWORD *)(v252 + 464);
    *(_DWORD *)(v252 + 464) = 0;
    *(_DWORD *)(*((void *)this + 33) + 464) ^= 0x3FFu;
    uint64_t v254 = *((void *)this + 33);
    int v255 = *(_DWORD *)(v254 + 464);
    *(_DWORD *)(v254 + 464) = v253;
    uint64_t v256 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v256 || *(_DWORD *)(v256 + 152) || *(_DWORD *)(v256 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v256, 464, *(_DWORD *)(v256 + 64), 0x3FFFFFFFFFFLL, 32, v255, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v257 = *((void *)this + 33);
    int v258 = *(_DWORD *)(v257 + 292);
    *(_DWORD *)(v257 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF80;
    uint64_t v259 = *((void *)this + 33);
    int v260 = *(_DWORD *)(v259 + 292);
    *(_DWORD *)(v259 + 292) = v258;
    uint64_t v261 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v261 || *(_DWORD *)(v261 + 152) || *(_DWORD *)(v261 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v261, 292, *(_DWORD *)(v261 + 68), 0xFFFFFFFFLL, 7, v260, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v262 = *((void *)this + 33);
    int v263 = *(_DWORD *)(v262 + 472);
    *(_DWORD *)(v262 + 472) = 0;
    *(_DWORD *)(*((void *)this + 33) + 472) ^= 0x3FFu;
    uint64_t v264 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v264 + 472);
    *(_DWORD *)(v264 + 472) = v263;
    uint64_t v266 = *(void *)(*((void *)this + 32) + 376 * v6 + 5736);
    if (*(void *)v266 || *(_DWORD *)(v266 + 152) || *(_DWORD *)(v266 + 156))
    {
      int v267 = *(_DWORD *)(v266 + 68);
      int v268 = this;
      goto LABEL_207;
    }
  }
  else
  {
    uint64_t v269 = v250 + 376 * v6;
    if (*(void *)(v269 + 5752) || *(_DWORD *)(v250 + 376 * v6 + 5904) || *(_DWORD *)(v250 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v269 + 5752), 284, 0, 0xFFFFFFFFLL, 7, v249, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v270 = *((void *)this + 33);
    int v271 = *(_DWORD *)(v270 + 464);
    *(_DWORD *)(v270 + 464) = 0;
    *(_DWORD *)(*((void *)this + 33) + 464) ^= 0x3FFu;
    uint64_t v272 = *((void *)this + 33);
    int v273 = *(_DWORD *)(v272 + 464);
    *(_DWORD *)(v272 + 464) = v271;
    uint64_t v274 = *((void *)this + 32);
    uint64_t v275 = v274 + 376 * v6;
    if (*(void *)(v275 + 5752) || *(_DWORD *)(v274 + 376 * v6 + 5904) || *(_DWORD *)(v274 + 376 * v6 + 5908))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v275 + 5752), 464, 0, 0x3FFFFFFFFFFLL, 32, v273, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v276 = *((void *)this + 33);
    int v277 = *(_DWORD *)(v276 + 292);
    *(_DWORD *)(v276 + 292) = 0;
    *(_DWORD *)(*((void *)this + 33) + 292) ^= 0xFFFFFF80;
    uint64_t v278 = *((void *)this + 33);
    int v279 = *(_DWORD *)(v278 + 292);
    *(_DWORD *)(v278 + 292) = v277;
    uint64_t v280 = *((void *)this + 32);
    uint64_t v281 = v280 + 376 * v6;
    if (*(void *)(v281 + 5928) || *(_DWORD *)(v280 + 376 * v6 + 6080) || *(_DWORD *)(v280 + 376 * v6 + 6084))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v281 + 5928), 292, 0, 0xFFFFFFFFLL, 7, v279, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v282 = *((void *)this + 33);
    int v283 = *(_DWORD *)(v282 + 472);
    *(_DWORD *)(v282 + 472) = 0;
    *(_DWORD *)(*((void *)this + 33) + 472) ^= 0x3FFu;
    uint64_t v284 = *((void *)this + 33);
    int v265 = *(_DWORD *)(v284 + 472);
    *(_DWORD *)(v284 + 472) = v283;
    uint64_t v285 = *((void *)this + 32);
    uint64_t v286 = v285 + 376 * v6;
    if (*(void *)(v286 + 5928) || *(_DWORD *)(v285 + 376 * v6 + 6080) || *(_DWORD *)(v285 + 376 * v6 + 6084))
    {
      uint64_t v266 = v286 + 5928;
      int v268 = this;
      int v267 = 0;
LABEL_207:
      uint64_t result = CAHDec::addToPatcherList((uint64_t)v268, (void *)v266, 472, v267, 0x3FFFFFFFFFFLL, 32, v265, 4);
      if (result) {
        return result;
      }
    }
  }
  if (!v383)
  {
    uint64_t v319 = 0;
    uint64_t v320 = 17424;
    do
    {
      uint64_t v321 = *(void *)(*(void *)(*((void *)this + 32) + v320) + 40);
      *(_DWORD *)(*((void *)this + 33) + v319 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 48pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 492) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 336) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 504) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 516) = 0;
      uint64_t v322 = *((void *)this + 33) + v319;
      int v323 = *(_DWORD *)(v322 + 324);
      *(_DWORD *)(v322 + 324) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 324) ^= 0xFFFFFF80;
      uint64_t v324 = *((void *)this + 33) + v319;
      int v325 = *(_DWORD *)(v324 + 324);
      *(_DWORD *)(v324 + 324) = v323;
      uint64_t v326 = *(void *)(v321 + 8);
      if (*(void *)v326 || *(_DWORD *)(v326 + 152) || *(_DWORD *)(v326 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v326, (int)v319 + 324, *(_DWORD *)(v326 + 52), 0xFFFFFFFFLL, 7, v325, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v327 = *((void *)this + 33) + v319;
      int v328 = *(_DWORD *)(v327 + 492);
      *(_DWORD *)(v327 + 492) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 492) ^= 0x3FFu;
      uint64_t v329 = *((void *)this + 33) + v319;
      int v330 = *(_DWORD *)(v329 + 492);
      *(_DWORD *)(v329 + 492) = v328;
      uint64_t v331 = *(void *)(v321 + 8);
      if (*(void *)v331 || *(_DWORD *)(v331 + 152) || *(_DWORD *)(v331 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v331, (int)v319 + 492, *(_DWORD *)(v331 + 52), 0x3FFFFFFFFFFLL, 32, v330, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v332 = *((void *)this + 33) + v319;
      int v333 = *(_DWORD *)(v332 + 348);
      *(_DWORD *)(v332 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 348) ^= 0xFFFFFF80;
      uint64_t v334 = *((void *)this + 33) + v319;
      int v335 = *(_DWORD *)(v334 + 348);
      *(_DWORD *)(v334 + 348) = v333;
      uint64_t v336 = *(void *)(v321 + 8);
      if (*(void *)v336 || *(_DWORD *)(v336 + 152) || *(_DWORD *)(v336 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v336, (int)v319 + 348, *(_DWORD *)(v336 + 56), 0xFFFFFFFFLL, 7, v335, 4);
        if (result) {
          return result;
        }
      }
      uint64_t v337 = *((void *)this + 33) + v319;
      int v338 = *(_DWORD *)(v337 + 516);
      *(_DWORD *)(v337 + 516) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 516) ^= 0x3FFu;
      uint64_t v339 = *((void *)this + 33) + v319;
      int v340 = *(_DWORD *)(v339 + 516);
      *(_DWORD *)(v339 + 516) = v338;
      uint64_t v341 = *(void *)(v321 + 8);
      if (*(void *)v341 || *(_DWORD *)(v341 + 152) || *(_DWORD *)(v341 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v341, (int)v319 + 516, *(_DWORD *)(v341 + 56), 0x3FFFFFFFFFFLL, 32, v340, 4);
        if (result) {
          return result;
        }
      }
      int v342 = *(_DWORD *)(*((void *)this + 32) + 2648);
      uint64_t v343 = *((void *)this + 33) + v319;
      int v344 = *(_DWORD *)(v343 + 312);
      *(_DWORD *)(v343 + 312) = 0;
      *(_DWORD *)(*((void *)this + 33) + v319 + 312) ^= 0xFFFFFF80;
      uint64_t v345 = *((void *)this + 33) + v319;
      int v346 = *(_DWORD *)(v345 + 312);
      *(_DWORD *)(v345 + 312) = v344;
      if (v342 == 1)
      {
        uint64_t v347 = *(void *)(v321 + 8);
        if (*(void *)v347 || *(_DWORD *)(v347 + 152) || *(_DWORD *)(v347 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v347, (int)v319 + 312, *(_DWORD *)(v347 + 64), 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v348 = *((void *)this + 33) + v319;
        int v349 = *(_DWORD *)(v348 + 480);
        *(_DWORD *)(v348 + 48pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 480) ^= 0x3FFu;
        uint64_t v350 = *((void *)this + 33) + v319;
        int v351 = *(_DWORD *)(v350 + 480);
        *(_DWORD *)(v350 + 48pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v349;
        uint64_t v352 = *(void *)(v321 + 8);
        if (*(void *)v352 || *(_DWORD *)(v352 + 152) || *(_DWORD *)(v352 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v352, (int)v319 + 480, *(_DWORD *)(v352 + 64), 0x3FFFFFFFFFFLL, 32, v351, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v353 = *((void *)this + 33) + v319;
        int v354 = *(_DWORD *)(v353 + 336);
        *(_DWORD *)(v353 + 336) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 336) ^= 0xFFFFFF80;
        uint64_t v355 = *((void *)this + 33) + v319;
        int v356 = *(_DWORD *)(v355 + 336);
        *(_DWORD *)(v355 + 336) = v354;
        uint64_t v357 = *(void *)(v321 + 8);
        if (*(void *)v357 || *(_DWORD *)(v357 + 152) || *(_DWORD *)(v357 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v357, (int)v319 + 336, *(_DWORD *)(v357 + 68), 0xFFFFFFFFLL, 7, v356, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v358 = *((void *)this + 33) + v319;
        int v359 = *(_DWORD *)(v358 + 504);
        *(_DWORD *)(v358 + 504) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 504) ^= 0x3FFu;
        uint64_t v360 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v360 + 504);
        *(_DWORD *)(v360 + 504) = v359;
        uint64_t v362 = *(void *)(v321 + 8);
        if (*(void *)v362 || *(_DWORD *)(v362 + 152) || *(_DWORD *)(v362 + 156))
        {
          int v363 = *(_DWORD *)(v362 + 68);
          int v364 = v319 + 504;
          int v365 = this;
          goto LABEL_298;
        }
      }
      else
      {
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 312, 0, 0xFFFFFFFFLL, 7, v346, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v366 = *((void *)this + 33) + v319;
        int v367 = *(_DWORD *)(v366 + 480);
        *(_DWORD *)(v366 + 48pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 480) ^= 0x3FFu;
        uint64_t v368 = *((void *)this + 33) + v319;
        int v369 = *(_DWORD *)(v368 + 480);
        *(_DWORD *)(v368 + 48pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v367;
        if (*(void *)(v321 + 24) || *(_DWORD *)(v321 + 176) || *(_DWORD *)(v321 + 180))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 24), (int)v319 + 480, 0, 0x3FFFFFFFFFFLL, 32, v369, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v370 = *((void *)this + 33) + v319;
        int v371 = *(_DWORD *)(v370 + 336);
        *(_DWORD *)(v370 + 336) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 336) ^= 0xFFFFFF80;
        uint64_t v372 = *((void *)this + 33) + v319;
        int v373 = *(_DWORD *)(v372 + 336);
        *(_DWORD *)(v372 + 336) = v371;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v321 + 200), (int)v319 + 336, 0, 0xFFFFFFFFLL, 7, v373, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v374 = *((void *)this + 33) + v319;
        int v375 = *(_DWORD *)(v374 + 504);
        *(_DWORD *)(v374 + 504) = 0;
        *(_DWORD *)(*((void *)this + 33) + v319 + 504) ^= 0x3FFu;
        uint64_t v376 = *((void *)this + 33) + v319;
        int v361 = *(_DWORD *)(v376 + 504);
        *(_DWORD *)(v376 + 504) = v375;
        if (*(void *)(v321 + 200) || *(_DWORD *)(v321 + 352) || *(_DWORD *)(v321 + 356))
        {
          int v364 = v319 + 504;
          int v365 = this;
          uint64_t v362 = v321 + 200;
          int v363 = 0;
LABEL_298:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v365, (void *)v362, v364, v363, 0x3FFFFFFFFFFLL, 32, v361, 4);
          if (result) {
            return result;
          }
        }
      }
      v320 += 8;
      v319 += 4;
    }
    while (v319 != 12);
  }
  unsigned int v287 = subWidth[*(int *)(*(void *)(*((void *)this + 32) + 17560) + 4)];
  *(_DWORD *)(*((void *)this + 33) + 36pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 528) = 0;
  *(_DWORD *)(*((void *)this + 33) + 364) = 0;
  *(_DWORD *)(*((void *)this + 33) + 532) = 0;
  *(_DWORD *)(*((void *)this + 33) + 368) = 0;
  *(_DWORD *)(*((void *)this + 33) + 372) = 0;
  if (*(_DWORD *)(*((void *)this + 32) + 2644))
  {
    uint64_t v288 = *((void *)this + 33);
    int v289 = *(_DWORD *)(v288 + 360);
    *(_DWORD *)(v288 + 36pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + 360) ^= 0xFFFFFFC0;
    uint64_t v290 = *((void *)this + 33);
    int v291 = *(_DWORD *)(v290 + 360);
    *(_DWORD *)(v290 + 36pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v289;
    uint64_t v292 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v292 || *(_DWORD *)(v292 + 152) || *(_DWORD *)(v292 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v292, 360, *(_DWORD *)(v292 + 52), 0xFFFFFFFFLL, 6, v291, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v293 = *((void *)this + 33);
    int v294 = *(_DWORD *)(v293 + 528);
    *(_DWORD *)(v293 + 528) = 0;
    *(_DWORD *)(*((void *)this + 33) + 528) ^= 0x3FFu;
    uint64_t v295 = *((void *)this + 33);
    int v296 = *(_DWORD *)(v295 + 528);
    *(_DWORD *)(v295 + 528) = v294;
    uint64_t v297 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v297 || *(_DWORD *)(v297 + 152) || *(_DWORD *)(v297 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v297, 528, *(_DWORD *)(v297 + 52), 0x3FFFFFFFFFFLL, 32, v296, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v298 = *((void *)this + 33);
    int v299 = *(_DWORD *)(v298 + 364);
    *(_DWORD *)(v298 + 364) = 0;
    *(_DWORD *)(*((void *)this + 33) + 364) ^= 0xFFFFFFC0;
    uint64_t v300 = *((void *)this + 33);
    int v301 = *(_DWORD *)(v300 + 364);
    *(_DWORD *)(v300 + 364) = v299;
    uint64_t v302 = *(void *)(*((void *)this + 32) + 11768);
    if (*(void *)v302 || *(_DWORD *)(v302 + 152) || *(_DWORD *)(v302 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v302, 364, *(_DWORD *)(v302 + 56), 0xFFFFFFFFLL, 6, v301, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v303 = *((void *)this + 33);
    int v304 = *(_DWORD *)(v303 + 532);
    *(_DWORD *)(v303 + 532) = 0;
    *(_DWORD *)(*((void *)this + 33) + 532) ^= 0x3FFu;
    uint64_t v305 = *((void *)this + 33);
    int v306 = *(_DWORD *)(v305 + 532);
    *(_DWORD *)(v305 + 532) = v304;
    uint64_t v307 = *((void *)this + 32);
    uint64_t v308 = *(void *)(v307 + 11768);
    if (*(void *)v308 || *(_DWORD *)(v308 + 152) || *(_DWORD *)(v308 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v308, 532, *(_DWORD *)(v308 + 56), 0x3FFFFFFFFFFLL, 32, v306, 4);
      if (result) {
        return result;
      }
      uint64_t v307 = *((void *)this + 32);
    }
    if (*(unsigned char *)(v307 + 8))
    {
      *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33) + 368) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(v307 + 11768) + 76) >> 6) & 0xFFF) << 6);
      uint64_t v309 = (_DWORD *)(*(void *)(*((void *)this + 32) + 11768) + 80);
    }
    else
    {
      if (CAHDecClaryLgh::getSWRStride(this, *(unsigned __int16 *)(v238 + 148) + 1, *(unsigned __int8 *)(v390 + 105) - 8, *(unsigned __int8 *)(v390 + 105) - 8, v287))return 0xFFFFFFFFLL; {
      *(_DWORD *)(*((void *)this + 33) + 368) = *(_DWORD *)(*((void *)this + 33) + 368) & 0xFFFC003F | (((*((_DWORD *)this + 783) >> 6) & 0xFFF) << 6);
      }
      uint64_t v309 = (_DWORD *)((char *)this + 3136);
    }
    *(_DWORD *)(*((void *)this + 33) + 372) = *(_DWORD *)(*((void *)this + 33) + 372) & 0xFFF8003F | (((*v309 >> 6) & 0x1FFF) << 6);
  }
  if (v385 < 2)
  {
    uint64_t v310 = *((void *)this + 33);
    *(_DWORD *)(v310 + 536) = 65537;
    *(_WORD *)(v310 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_WORD *)(v310 + 542) = *(_DWORD *)(v390 + 108) >> 6;
    *(_WORD *)(v310 + 67pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_WORD *)(v310 + 672) = *(_DWORD *)(v390 + 112) >> 6;
    uint64_t v311 = *((void *)this + 32);
  }
  else
  {
    uint64_t v310 = *((void *)this + 33);
    *(_WORD *)(v310 + 536) = v389;
    uint64_t v311 = *((void *)this + 32);
    if (v386 != 31)
    {
      if (v387 <= 1) {
        uint64_t v312 = 1;
      }
      else {
        uint64_t v312 = v387;
      }
      int v313 = (unsigned char *)(*(void *)(v311 + 17560) + 2786);
      do
      {
        if (!*v313) {
          *(_WORD *)(v310 + 2 * v384 + 67pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v313 - 26) >> 3;
        }
        v313 += 1792;
        --v312;
      }
      while (v312);
    }
    *(_WORD *)(v310 + 538) = v387;
    if (v388 != 31)
    {
      uint64_t v314 = *(void *)(v311 + 17560);
      if (v389 <= 1) {
        uint64_t v315 = 1;
      }
      else {
        uint64_t v315 = v389;
      }
      int v316 = (unsigned __int8 *)(v314 + 2786);
      uint64_t v317 = (unsigned __int8 *)(v314 + 2786);
      do
      {
        int v318 = *v317;
        v317 += 28;
        if (!v318) {
          *(_WORD *)(v310 + 2 * v384 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v316 - 18) >> 3;
        }
        int v316 = v317;
        --v315;
      }
      while (v315);
    }
  }
  if (*(_DWORD *)(v311 + 2360) != 1) {
    return 0;
  }
  *(_DWORD *)(v310 + 684) = *(_DWORD *)(v310 + 684) & 0xFFFFFFFE | *(_DWORD *)(v311 + 2508) & 1;
  if (*(_DWORD *)(v311 + 2508))
  {
    *(_DWORD *)(v310 + 692) = 0x10000000;
    *(_DWORD *)(v310 + 696) = *(_DWORD *)(v311 + 2368);
    *(void *)(v310 + 704) = 0;
    *(_DWORD *)(v310 + 70pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_OWORD *)(v310 + 712) = *(_OWORD *)(v311 + 2372);
    long long v377 = *(_OWORD *)(v311 + 2388);
    *(_OWORD *)(v310 + 744) = *(_OWORD *)(v311 + 2404);
    *(_OWORD *)(v310 + 728) = v377;
  }
  *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v311 + 2512) & 1));
  if (*(_DWORD *)(v311 + 2512))
  {
    *(_DWORD *)(v310 + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    char v378 = *(_DWORD *)(v311 + 2424);
    *(_DWORD *)(v310 + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (*(_DWORD *)(v311 + 2424) & 1) << 22;
    int v379 = ((*(_DWORD *)(v311 + 2420) & 1) << 23) | ((v378 & 1) << 22) | 0x20000000;
    *(_DWORD *)(v310 + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v379;
    *(_DWORD *)(v310 + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v379 | (*(_DWORD *)(v311 + 2364) == 0);
    long long v380 = *(_OWORD *)(v311 + 2428);
    long long v381 = *(_OWORD *)(v311 + 2444);
    *(_OWORD *)(v310 + 796) = *(_OWORD *)(v311 + 2460);
    *(_OWORD *)(v310 + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v381;
    *(_OWORD *)(v310 + 764) = v380;
  }
  *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v311 + 2516) & 1));
  *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v311 + 2520) & 1));
  *(_DWORD *)(*((void *)this + 33) + 684) = *(_DWORD *)(*((void *)this + 33) + 684) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v311 + 2524) & 1));
  if (!*(_DWORD *)(v311 + 2516)) {
    return 0;
  }
  *(_DWORD *)(v310 + 816) = 0;
  if (*(_DWORD *)(v311 + 2476) == 2) {
    int v382 = 805306368;
  }
  else {
    int v382 = 813694976;
  }
  *(_DWORD *)(v310 + 816) = v382;
  memcpy((void *)(v310 + 820), (const void *)(v311 + 2480), 4 * *(unsigned int *)(v311 + 2476));
  uint64_t result = 0;
  *(_DWORD *)(v311 + 2516) = 0;
  return result;
}

uint64_t CAHDecClaryLgh::getSWRStride(CAHDecClaryLgh *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *(void *)((char *)this + 3132) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                               + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 783) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 784) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        unsigned int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecClaryLgh::populateTileRegisters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 256);
  if (*(_DWORD *)(v2 + 2360) == 1)
  {
    *(void *)(a2 + 4) = 0;
    if (*(_DWORD *)(v2 + 2420))
    {
      int v3 = *(unsigned __int16 *)(v2 + 2504);
      *(_DWORD *)(a2 + 8) = v3;
      uint64_t v4 = (int *)(a2 + 8);
      int v5 = 0x10000;
    }
    else
    {
      *(_DWORD *)(a2 + 8) = 0;
      uint64_t v4 = (int *)(a2 + 8);
      int v3 = *(unsigned __int8 *)(v2 + 2504);
      *uint64_t v4 = v3;
      int v5 = 65280;
    }
    *uint64_t v4 = v3 | *(_DWORD *)(v2 + 2504) & v5;
  }
  return 0;
}

uint64_t CAHDecClaryLgh::getTileStartCTU(CAHDecClaryLgh *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 536);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecClaryLgh::getTileEndCTU(CAHDecClaryLgh *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 536);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecClaryLgh::populateAvdWork(CAHDecClaryLgh *this)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 33);
  uint64_t v2 = *(void *)(*((void *)this + 32) + 17560);
  unint64_t v3 = *(unsigned int *)(v2 + 312);
  if (v3)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    LODWORD(v7) = 0;
    int v8 = 0;
    uint64_t v9 = v1 + 3908;
    uint64_t v39 = *(void *)(v2 + 16);
    unint64_t v40 = 0;
    unint64_t v10 = *(unsigned int *)(v2 + 316);
    unint64_t v11 = v10;
    uint64_t v37 = v9;
    uint64_t v38 = *(void *)(*((void *)this + 32) + 17560);
    do
    {
      uint64_t v36 = v5;
      if (v11)
      {
        unint64_t v12 = 0;
        do
        {
          uint64_t v13 = *((void *)this + 32);
          uint64_t v14 = *(void *)(v13 + 17560);
          uint64_t v15 = v14 + v5;
          if (!*(unsigned char *)(v14 + v5 + 2786))
          {
            *(_WORD *)(v9 + 4) = v8;
            *(_WORD *)(v9 + 6) = 0;
            *(_WORD *)(v9 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v6;
            int v41 = v6;
            int v42 = v8;
            if (*(unsigned char *)(v13 + 2834)) {
              uint64_t v16 = *(void *)(v13 + 2840);
            }
            else {
              uint64_t v16 = *(void *)(v13 + 1048) + 8;
            }
            unint64_t v17 = v39 + *(unsigned int *)(v15 + 2780) - *(void *)v16;
            int v18 = 36 * v7;
            unint64_t v19 = HIDWORD(v17);
            if (*(void *)v16 || *(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1100;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 3926, v17, 0x3FFFFFFFFFFLL, 32, -1, 2);
              if (result) {
                return result;
              }
              if (*(void *)v16) {
                goto LABEL_46;
              }
            }
            if (*(_DWORD *)(v16 + 152) || *(_DWORD *)(v16 + 156))
            {
LABEL_46:
              if (v19 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                unsigned int v44 = "populateAvdWork";
                __int16 v45 = 1024;
                int v46 = 1101;
                _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v16, v18 + 3928, v17, 0xFFFFFFFFLL, 0, -1, 4);
              if (result) {
                return result;
              }
            }
            unsigned int v21 = (_DWORD *)(v14 + v5);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v14 + v5 + 2776);
            int v22 = *(_DWORD *)(v15 + 2760);
            int v23 = v22 + 7;
            if (v22 >= 0) {
              int v23 = *(_DWORD *)(v15 + 2760);
            }
            int v24 = v21[692];
            *(_DWORD *)(v9 + 28) = (v23 << 13) & 0xFFFF0000 | (v24 / 8);
            int v25 = v21[691];
            int v27 = v25 - 1;
            BOOL v26 = v25 < 1;
            int v28 = v25 + 6;
            if (!v26) {
              int v28 = v27;
            }
            unsigned int v29 = (v28 << 13) & 0xFFFF0000;
            int v30 = v21[693];
            int v31 = v30 - 1;
            BOOL v26 = v30 < 1;
            int v32 = v30 + 6;
            if (!v26) {
              int v32 = v31;
            }
            *(_DWORD *)(v9 + 32) = v29 | (v32 >> 3);
            if (v22 + v24) {
              __int16 v33 = 4;
            }
            else {
              __int16 v33 = 5;
            }
            *(_WORD *)(v9 + 12) = v33;
            unint64_t v3 = *(unsigned int *)(v38 + 312);
            unint64_t v10 = *(unsigned int *)(v38 + 316);
            if (v12 == v10 && v40 == v3) {
              __int16 v35 = 5;
            }
            else {
              __int16 v35 = 4;
            }
            *(_WORD *)(v9 + 14) = v35;
            int v6 = v41 + 1;
            int v8 = v42 + 1;
            v9 += 36;
            unint64_t v7 = 0x8E38E38E38E38E39 * ((v9 - v37) >> 2);
          }
          ++v12;
          v5 += 28;
          unint64_t v11 = v10;
        }
        while (v12 < v10);
      }
      uint64_t v5 = v36 + 1792;
      ++v40;
    }
    while (v40 < v3);
    uint64_t v1 = *((void *)this + 33);
  }
  else
  {
    LOWORD(v8) = 0;
  }
  uint64_t result = 0;
  *(_WORD *)(v1 + 26) = v8;
  *(_DWORD *)(v1 + 32) = 3908;
  return result;
}

unsigned __int8 *CAHDecClaryLgh::getTileAddr(CAHDecClaryLgh *this, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  if (*(unsigned char *)(v2 + 2834))
  {
    unint64_t v3 = *(void **)(v2 + 2840);
    uint64_t v4 = &a2[-*v3];
    uint64_t v5 = &v4[v3[2]];
    if ((unint64_t)v5 >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1201;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      unint64_t v7 = (void *)(*(void *)(*((void *)this + 32) + 2840) + 16);
      return &v4[*v7];
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 1048);
    uint64_t v9 = *(void *)(v8 + 24);
    unint64_t v7 = (void *)(v8 + 24);
    uint64_t v4 = &a2[-*(v7 - 2)];
    uint64_t v5 = &v4[v9];
    if ((unint64_t)&v4[v9] >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      unint64_t v12 = "getTileAddr";
      __int16 v13 = 1024;
      int v14 = 1218;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)&v11, 0x12u);
      return &v4[*v7];
    }
  }
  return v5;
}

uint64_t CAHDecClaryLgh::allocWorkBuf_SPS(CAHDecClaryLgh *this, int *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = *a2 + 31;
  if (*a2 < -31) {
    int v5 = *a2 + 62;
  }
  unsigned int v6 = v5 >> 5;
  int v7 = v4 + 31;
  if (v4 < -31) {
    int v7 = v4 + 62;
  }
  unsigned int v8 = v7 >> 5;
  unsigned int v9 = 32 - __clz(v6 - 1);
  if (v6 >= 2) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  unsigned int v11 = 32 - __clz(v8 - 1);
  if (v8 >= 2) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unsigned int v13 = ((32 << (v12 + v10)) + 127) & 0xFFFFFF80;
  int v14 = 2 * v3 + 62;
  if (2 * v3 >= -31) {
    int v14 = 2 * v3 + 31;
  }
  unsigned int v15 = v14 >> 5;
  int v16 = v4 + 15;
  if (v4 < -15) {
    int v16 = v4 + 30;
  }
  unsigned int v17 = v16 >> 4;
  unsigned int v18 = 32 - __clz(v15 - 1);
  if (v15 >= 2) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  unsigned int v20 = 32 - __clz(v17 - 1);
  if (v17 >= 2) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  *((_DWORD *)this + 776) = v13;
  *((_DWORD *)this + 777) = ((8 << (v19 + v21)) + 127) & 0xFFFFFF80;
  unsigned int v22 = ((v4 + 63) >> 6) * ((v3 + 63) >> 6);
  *((_DWORD *)this + 781) = 576 * v22;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_28:
    uint64_t v27 = 0;
    char v28 = 1;
    do
    {
      char v29 = v28;
      uint64_t v30 = *((unsigned int *)this + 781);
      if (v30
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + 176 * v27 + 5360), v30, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1424;
        __int16 v39 = 2080;
        unint64_t v40 = "MvColo";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      char v28 = 0;
      uint64_t v27 = 1;
    }
    while ((v29 & 1) != 0);
    unsigned int v31 = 24 * v22;
    *((_DWORD *)this + 785) = 24 * v22;
    uint64_t v32 = 3776;
    if (!v31) {
      goto LABEL_34;
    }
LABEL_33:
    if (!CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v32), v31, 7, 1, 0))
    {
LABEL_34:
      while (v32 != 5008)
      {
        unsigned int v31 = *((_DWORD *)this + 785);
        v32 += 176;
        if (v31) {
          goto LABEL_33;
        }
      }
      return 0;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1429;
    __int16 v39 = 2080;
    unint64_t v40 = "segMap";
    __int16 v33 = &_os_log_internal;
  }
  else
  {
    uint64_t v23 = 14608;
    uint64_t v24 = 16;
    while (1)
    {
      uint64_t v25 = *((unsigned int *)this + 776);
      if (v25
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23 - 2816), v25, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v35 = 136315650;
        uint64_t v36 = "allocWorkBuf_SPS";
        __int16 v37 = 1024;
        int v38 = 1408;
        __int16 v39 = 2080;
        unint64_t v40 = "HdrY";
        __int16 v33 = &_os_log_internal;
        goto LABEL_46;
      }
      uint64_t v26 = *((unsigned int *)this + 777);
      if (v26)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v23), v26, 7, 1, 0))break; {
      }
        }
      v23 += 176;
      if (!--v24) {
        goto LABEL_28;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_47;
    }
    int v35 = 136315650;
    uint64_t v36 = "allocWorkBuf_SPS";
    __int16 v37 = 1024;
    int v38 = 1413;
    __int16 v39 = 2080;
    unint64_t v40 = "HdrC";
    __int16 v33 = &_os_log_internal;
  }
LABEL_46:
  _os_log_impl(&dword_223977000, v33, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v35, 0x1Cu);
LABEL_47:
  (*(void (**)(CAHDecClaryLgh *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecClaryLgh::allocWorkBuf_PPS(CAHDecClaryLgh *this, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 32);
  uint64_t v6 = *(void *)(v5 + 17560);
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(_DWORD *)(v6 + 100);
  unsigned int v9 = (*(unsigned __int8 *)(v6 + 105) + 1) & 0x1FE;
  if (v7 == 3) {
    int v10 = 48;
  }
  else {
    int v10 = 32;
  }
  if (!v7) {
    int v10 = 16;
  }
  int v12 = *(_DWORD *)(v6 + 108);
  int v11 = *(_DWORD *)(v6 + 112);
  unsigned int v13 = (v12 + 15) >> 4;
  int v14 = ~(-1 << *(_DWORD *)(v6 + 96));
  signed int v15 = v13 * ((v10 * v9) >> 3) + (v14 << 7);
  if (v15)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 117, v15, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1505;
        __int16 v27 = 2080;
        char v28 = "IpAbove";
        int v16 = &_os_log_internal;
LABEL_34:
        _os_log_impl(&dword_223977000, v16, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v23, 0x1Cu);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  int v17 = 16 * v9;
  if ((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 != 192)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 128, (int)((192 << v8) + ((v12 + 7) >> 3) * 16 * v9 - 192), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1508;
        __int16 v27 = 2080;
        char v28 = "LfAbovePix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
LABEL_35:
      (*(void (**)(CAHDecClaryLgh *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  signed int v18 = 288 * ((v12 + 63) >> 6) + (v14 << 7);
  if (v18)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 139, v18, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1514;
        __int16 v27 = 2080;
        char v28 = "LfAboveInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  unsigned int v19 = (v11 + 7) >> 3;
  if (v19 * v17)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 150, (int)(v19 * v17), 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1520;
        __int16 v27 = 2080;
        char v28 = "LfLeftPix";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  uint64_t v20 = ((v11 + 63) >> 2) & 0x3FFFFFF0;
  if (v20)
  {
    if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 161, v20, 7, 1, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = "allocWorkBuf_PPS";
        __int16 v25 = 1024;
        int v26 = 1528;
        __int16 v27 = 2080;
        char v28 = "LfLeftInfo";
        int v16 = &_os_log_internal;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v5 = *((void *)this + 32);
  }
  if (CAVDDecoder::allocAVDMem(v5, (_OWORD *)this + 172, (int)(24 * v13 + 30), 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = "allocWorkBuf_PPS";
      __int16 v25 = 1024;
      int v26 = 1536;
      __int16 v27 = 2080;
      char v28 = "SwLeftPix";
      int v16 = &_os_log_internal;
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  int v22 = 192 * v9 + (v19 + 2) * (((v9 >> 1) << 8) | 8);
  if (!v22) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 183, v22, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    int v23 = 136315650;
    uint64_t v24 = "allocWorkBuf_PPS";
    __int16 v25 = 1024;
    int v26 = 1542;
    __int16 v27 = 2080;
    char v28 = "AZLeftPix";
    int v16 = &_os_log_internal;
    goto LABEL_34;
  }
  return result;
}

uint64_t CAHDecClaryLgh::freeWorkBuf_SPS(CAHDecClaryLgh *this)
{
  uint64_t result = *((void *)this + 32);
  if (!*(_DWORD *)(result + 2648))
  {
    uint64_t v3 = 14608;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = (uint64_t *)(result + v3 - 2816);
      if (*v5)
      {
        CAVDDecoder::deallocAVDMem(result, v5);
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3 - 2816) = 0;
      }
      if (*(void *)(result + v3))
      {
        CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + v3));
        uint64_t result = *((void *)this + 32);
        *(void *)(result + v3) = 0;
      }
      v3 += 176;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = result + 176 * v6;
    if (*(void *)(v9 + 5360))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(v9 + 5360));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + 176 * v6 + 536pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  for (uint64_t i = 3776; i != 5184; i += 176)
  {
    if (*(void *)(result + i))
    {
      CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + i));
      uint64_t result = *((void *)this + 32);
      *(void *)(result + i) = 0;
    }
  }
  return result;
}

uint64_t *CAHDecClaryLgh::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[256])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 256);
    v2[256] = 0;
  }
  if (v2[278])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 278);
    v2[278] = 0;
  }
  if (v2[234])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 234);
    v2[234] = 0;
  }
  if (v2[300])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 300);
    v2[300] = 0;
  }
  if (v2[322])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 322);
    v2[322] = 0;
  }
  if (v2[344])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 344);
    v2[344] = 0;
  }
  if (v2[366])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 366);
    v2[366] = 0;
  }
  return this;
}

uint64_t CAHDecClaryLgh::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 312pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  return this;
}

uint64_t CAHDecClaryLgh::initPicture(CAHDecClaryLgh *this)
{
  return 0;
}

uint64_t CAHDecClaryLgh::populateSlices(CAHDecClaryLgh *this)
{
  return 0;
}

uint64_t CAHDecClaryLgh::getTileIdxAbove(CAHDecClaryLgh *this)
{
  return 0;
}

uint64_t CAHDecClaryLgh::decodeBuffer(CAHDecClaryLgh *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecClaryLgh::decodeBufferSize(CAHDecClaryLgh *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecClaryLgh::decHdrYLinAddr(CAHDecClaryLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 11792);
}

uint64_t CAHDecClaryLgh::decHdrCLinAddr(CAHDecClaryLgh *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 14608);
}

uint64_t CAHDecClaryLgh::decHdrYSize(CAHDecClaryLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 11836);
}

uint64_t CAHDecClaryLgh::decHdrCSize(CAHDecClaryLgh *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 14652);
}

uint64_t CAHDecClaryLgh::decHdrYStride(CAHDecClaryLgh *this)
{
  return *((unsigned int *)this + 778);
}

uint64_t CAHDecClaryLgh::decHdrCStride(CAHDecClaryLgh *this)
{
  return *((unsigned int *)this + 779);
}

void CAHDecClaryLgh::clearSegBuffer(CAHDecClaryLgh *this)
{
}

CAHDecClaryAvc *createClaryAvcDecoder(CAVDAvcDecoder *a1)
{
  uint64_t v2 = (CAHDecClaryAvc *)operator new(0x2F10uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecClaryAvc::CAHDecClaryAvc(v2, a1);
  }
  return v3;
}

void sub_2239D8000(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecClaryAvc::CAHDecClaryAvc(CAHDecClaryAvc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73E498;
  *(_DWORD *)(v1 + 456) = 956 * *(unsigned __int16 *)(*(void *)(v1 + 256) + 7500) + 182328;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecClaryAvc::CAHDecClaryAvc(CAHDecClaryAvc *this, CAVDAvcDecoder *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73E498;
  *(void *)(v4 + 256) = a2;
  uint64_t v5 = 956 * *((unsigned __int16 *)a2 + 3750) + 182328;
  *(_DWORD *)(v4 + 456) = v5;
  *(_DWORD *)(v4 + 8) = 2104;
  *(_OWORD *)(v4 + 16) = xmmword_223AD04F0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), v5, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      char v8 = "CAHDecClaryAvc";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v7, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
  }
  else
  {
    uint64_t v6 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v6;
    *((void *)this + 34) = v6;
    *((_OWORD *)this + 742) = 0u;
    *((_OWORD *)this + 743) = 0u;
    *((_OWORD *)this + 744) = 0u;
    *((_OWORD *)this + 745) = 0u;
    *((_OWORD *)this + 746) = 0u;
    *((_OWORD *)this + 747) = 0u;
    *((_OWORD *)this + 748) = 0u;
    *((_OWORD *)this + 749) = 0u;
    *((_OWORD *)this + 75pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 751) = 0u;
    *((_OWORD *)this + 752) = 0u;
    bzero((char *)this + 560, 0x2C00uLL);
  }
}

void sub_2239D8208(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecClaryAvc::~CAHDecClaryAvc(CAHDecClaryAvc *this)
{
  *(void *)this = &unk_26D73E498;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecClaryAvc::~CAHDecClaryAvc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecClaryAvc::initPicture(CAHDecClaryAvc *this, int a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v5 = 956 * *(unsigned __int16 *)(*((void *)this + 32) + 7500) + 182328;
  *((_DWORD *)this + 114) = v5;
  *((_DWORD *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v6;
  if (v6)
  {
    bzero(v6, v5);
    uint64_t v8 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v8 + 16) = a2;
    *(_WORD *)(v8 + 24) = 257;
    *(_WORD *)(v8 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 2963) = 0;
    *((void *)this + 1489) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "initPicture";
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v10, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecClaryAvc::populateSlices(CAHDecClaryAvc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2104;
    uint64_t v5 = a2;
    do
    {
      CAHDecClaryAvc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 956;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecClaryAvc::populateSliceRegisters(uint64_t a1, uint64_t a2, signed int a3)
{
  char v6 = 0;
  uint64_t v123 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 256);
  int v8 = *(_DWORD *)(v7 + 3616);
  uint64_t v9 = *(void *)(v7 + 3304);
  uint64_t v110 = *(void *)(v7 + 3296);
  int v111 = *(_DWORD *)(v7 + 3612);
  uint64_t v10 = *(void *)(v7 + 3312);
  uint64_t v11 = *(unsigned int *)(v7 + 7064);
  uint64_t v12 = *(void *)(v7 + 3320);
  *(_DWORD *)(a2 + 4) = 0;
  uint64_t v14 = v10 + 1848 * a3;
  int v15 = 32 * (*(unsigned char *)(v14 + 1424) & 3);
  *(_DWORD *)(a2 + 4) = v15;
  int v17 = *(unsigned __int8 *)(v14 + 24);
  int v16 = (unsigned char *)(v14 + 24);
  if (v17 != 2) {
    char v6 = *(unsigned char *)(v10 + 1848 * a3 + 63);
  }
  unsigned int v18 = v15 & 0xFFFF87FF | ((v6 & 0xF) << 11);
  *(_DWORD *)(a2 + 4) = v18;
  if (*v16 == 1) {
    char v19 = *(unsigned char *)(v10 + 1848 * a3 + 64);
  }
  else {
    char v19 = 0;
  }
  int v20 = ((v19 & 0xF) << 7) | v18;
  *(_DWORD *)(a2 + 4) = v20;
  if (*v16 == 1 && !*(unsigned char *)(v10 + 1848 * a3 + 61)) {
    int v21 = 0x8000;
  }
  else {
    int v21 = 0;
  }
  uint64_t v112 = v9;
  int v113 = v8;
  int v22 = v21 | v20;
  *(_DWORD *)(a2 + 4) = v22;
  if (*v16) {
    int v23 = 0x20000;
  }
  else {
    int v23 = 0x10000;
  }
  if (*v16 == 1) {
    int v24 = 0;
  }
  else {
    int v24 = v23;
  }
  *(_DWORD *)(a2 + 4) = v24 | v22;
  if (*v16 != 1) {
    goto LABEL_20;
  }
  uint64_t v25 = v12 + 13040 * a3 + 7224;
  uint64_t v26 = v10 + 1848 * a3;
  *(void *)(v26 + 1832) = v25;
  if (*(unsigned char *)(v12 + 13040 * a3 + 7227)
    || (uint64_t v27 = *(unsigned int *)(v12 + 13040 * a3 + 7256), *(_DWORD *)(a1 + 4 * v27 + 464)))
  {
    int v28 = 16;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 11852))
    {
      *(void *)(a1 + 11912) = *(void *)(v12 + 13040 * a3 + 7264);
      *(_DWORD *)(a1 + 11904) = v27;
      *(_DWORD *)(a1 + 11852) = 1;
      *(_DWORD *)(a2 + 4) |= 0x40000u;
      uint64_t v25 = *(void *)(v26 + 1832);
      if (!v25 || !*(_DWORD *)(a1 + 11852)) {
        goto LABEL_20;
      }
    }
    uint64_t v107 = *(void *)(v25 + 40);
    if (v107 == *(void *)(a1 + 11912)) {
      goto LABEL_20;
    }
    *(void *)(a1 + 11912) = v107;
    *(_DWORD *)(a1 + 11904) = *(_DWORD *)(v25 + 32);
    int v28 = 0x40000;
  }
  *(_DWORD *)(a2 + 4) |= v28;
LABEL_20:
  uint64_t v116 = v12;
  *(_DWORD *)(a2 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(a2 + 952) = 0;
  uint64_t v115 = v16;
  if (*v16 == 1 && (*(unsigned char *)(a2 + 6) & 4) != 0)
  {
    int v41 = *(_DWORD *)(*(void *)(v10 + 1848 * a3 + 1832) + 32);
    *(_DWORD *)(a1 + 11852) = 1;
    int v42 = *(_DWORD *)(a1 + 11844) * v41;
    int v43 = 956 * a3;
    unsigned int v44 = (void *)(a1 + 11648);
    if (*(void *)(a1 + 11648) || *(_DWORD *)(a1 + 11800) || *(_DWORD *)(a1 + 11804))
    {
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)(a1 + 11648), v43 + 3024, v42, 0xFFFFFFFFLL, 8, -256, 4);
      if (result) {
        return result;
      }
      if (*v44) {
        goto LABEL_41;
      }
    }
    if (*(_DWORD *)(a1 + 11800) || *(_DWORD *)(a1 + 11804))
    {
LABEL_41:
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)(a1 + 11648), v43 + 3056, v42, 0x3FFFFFFFFFFLL, 32, 1023, 4);
      if (result) {
        return result;
      }
    }
  }
  unsigned int v109 = a3;
  uint64_t v114 = a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
  unsigned int v29 = *v115;
  if (v29 <= 1)
  {
    uint64_t v30 = v7 + 6872;
    uint64_t v31 = v116 + 13040 * a3;
    if (*(_DWORD *)(v31 + 13032))
    {
      unint64_t v32 = 0;
      __int16 v33 = (unsigned int *)(v31 + 13032);
      uint64_t v34 = v116 + 13040 * a3 + 1416;
      int v35 = &_os_log_internal;
      do
      {
        uint64_t v36 = a2 + 4 * v32;
        int v37 = (16 * (v32 & 0xF)) | 0x2DC00000;
        *(_DWORD *)(v36 + 8) = v37;
        int v38 = (_DWORD *)(v36 + 8);
        if (v11)
        {
          uint64_t v39 = 0;
          while (*(_DWORD *)(*(void *)(v30 + 8 * v39) + 12) != *(_DWORD *)(v34 + 176 * v32 + 12))
          {
            if (v11 == ++v39) {
              goto LABEL_29;
            }
          }
          *int v38 = v39 & 0xF | v37;
        }
        else
        {
LABEL_29:
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            int v40 = *(_DWORD *)(v34 + 176 * v32 + 32);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)uint64_t v121 = v32;
            *(_WORD *)&v121[4] = 1024;
            *(_DWORD *)&v121[6] = v40;
            LOWORD(v122[0]) = 1024;
            *(_DWORD *)((char *)v122 + 2) = v11;
            _os_log_impl(&dword_223977000, v35, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-0 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
          }
        }
        ++v32;
      }
      while (v32 < *v33);
      unsigned int v29 = *v115;
    }
    else
    {
      LODWORD(v32) = 0;
    }
    if (v29 == 1)
    {
      uint64_t v46 = v116 + 13040 * a3;
      if (*(_DWORD *)(v46 + 13036))
      {
        unint64_t v47 = 0;
        int v48 = (unsigned int *)(v46 + 13036);
        BOOL v49 = &_os_log_internal;
        do
        {
          uint64_t v50 = a2 + 4 * v32;
          int v51 = (16 * (v47 & 0xF)) | 0x2DC00100;
          *(_DWORD *)(v50 + 8) = v51;
          unsigned int v52 = (_DWORD *)(v50 + 8);
          if (v11)
          {
            uint64_t v53 = 0;
            while (*(_DWORD *)(*(void *)(v30 + 8 * v53) + 12) != *(_DWORD *)(v116 + 13040 * a3 + 176 * v47 + 7236))
            {
              if (v11 == ++v53) {
                goto LABEL_52;
              }
            }
            _DWORD *v52 = v53 & 0xF | v51;
          }
          else
          {
LABEL_52:
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            {
              int v54 = *(_DWORD *)(v116 + 13040 * a3 + 176 * v47 + 7256);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)uint64_t v121 = v32;
              *(_WORD *)&v121[4] = 1024;
              *(_DWORD *)&v121[6] = v54;
              LOWORD(v122[0]) = 1024;
              *(_DWORD *)((char *)v122 + 2) = v11;
              _os_log_impl(&dword_223977000, v49, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-1 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
            }
          }
          LODWORD(v32) = v32 + 1;
          ++v47;
        }
        while (v47 < *v48);
      }
    }
  }
  *(void *)(a2 + 136) = 0x2DD0000000000000;
  uint64_t v55 = v112 + 604 * v113;
  int v56 = (char *)(v55 + 88);
  uint64_t v57 = (char *)(v55 + 87);
  if (*v115 == 1) {
    int v58 = v56;
  }
  else {
    int v58 = v57;
  }
  char v59 = *v58;
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = ((v59 & 3) << 6) | 0x2DD00000;
  int v60 = ((v59 & 3) << 6) | 0x2DD00000 | (8 * (*(unsigned char *)(v10 + 1848 * a3 + 376) & 7));
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v60;
  char v61 = *(unsigned char *)(v110 + 2224 * v111 + 4);
  if (v61) {
    char v61 = *(unsigned char *)(v10 + 1848 * a3 + 377);
  }
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v61 & 7 | v60;
  int v62 = *v115;
  if (v62 != 1) {
    goto LABEL_143;
  }
  int v63 = *v56;
  if (v63 != 2) {
    goto LABEL_65;
  }
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = ((v59 & 3) << 6) | 0x2DD0002D;
  int v62 = *v115;
  if (v62 != 1)
  {
LABEL_143:
    if (v62 || !*v57) {
      goto LABEL_85;
    }
    goto LABEL_69;
  }
  int v63 = *v56;
LABEL_65:
  if (v63 != 1) {
    goto LABEL_85;
  }
LABEL_69:
  unsigned int v64 = 0;
  unsigned int v65 = 0;
  do
  {
    uint64_t v66 = v64;
    if (*(unsigned char *)(v10 + 1848 * a3 + v64 + 378))
    {
      int v67 = ((v64 & 0xF) << 9) | 0x2DE04000;
      uint64_t v68 = a2 + 4 * v65;
      *(_DWORD *)(v68 + 144) = v67;
      uint64_t v69 = v10 + 1848 * a3 + 2 * v66;
      *(_DWORD *)(v68 + 144) = v67 | *(_WORD *)(v69 + 394) & 0x1FF;
      *(_DWORD *)(v68 + 528) = 770703360;
      *(_DWORD *)(v68 + 528) = *(unsigned __int16 *)(v69 + 426) | 0x2DF00000;
      ++v65;
    }
    if (*(unsigned char *)(v10 + 1848 * a3 + v66 + 458))
    {
      uint64_t v70 = 0;
      char v71 = 1;
      do
      {
        char v72 = v71;
        int v73 = ((v66 & 0xF) << 9) | (v70 << 14) | 0x2DE08000;
        uint64_t v74 = a2 + 4 * v65;
        *(_DWORD *)(v74 + 144) = v73;
        uint64_t v75 = v10 + 1848 * a3 + 4 * v66 + 2 * v70;
        *(_DWORD *)(v74 + 144) = v73 | *(_WORD *)(v75 + 474) & 0x1FF;
        *(_DWORD *)(v74 + 528) = 770703360;
        *(_DWORD *)(v74 + 528) = *(unsigned __int16 *)(v75 + 538) | 0x2DF00000;
        ++v65;
        uint64_t v70 = 1;
        char v71 = 0;
      }
      while ((v72 & 1) != 0);
    }
    unsigned int v64 = v66 + 1;
  }
  while ((int)v66 + 1 <= *(char *)(v10 + 1848 * a3 + 63));
  if (*v115 == 1)
  {
    unsigned int v76 = 0;
    do
    {
      uint64_t v77 = v76;
      if (*(unsigned char *)(v10 + 1848 * a3 + v76 + 602))
      {
        int v78 = ((v76 & 0xF) << 9) | 0x2DE06000;
        uint64_t v79 = a2 + 4 * v65;
        *(_DWORD *)(v79 + 144) = v78;
        uint64_t v80 = v10 + 1848 * a3 + 2 * v77;
        *(_DWORD *)(v79 + 144) = v78 | *(_WORD *)(v80 + 618) & 0x1FF;
        *(_DWORD *)(v79 + 528) = 770703360;
        *(_DWORD *)(v79 + 528) = *(unsigned __int16 *)(v80 + 650) | 0x2DF00000;
        ++v65;
      }
      if (*(unsigned char *)(v10 + 1848 * a3 + v77 + 682))
      {
        uint64_t v81 = 0;
        char v82 = 1;
        do
        {
          char v83 = v82;
          int v84 = ((v77 & 0xF) << 9) | (v81 << 14) | 0x2DE0A000;
          uint64_t v85 = a2 + 4 * v65;
          *(_DWORD *)(v85 + 144) = v84;
          uint64_t v86 = v10 + 1848 * a3 + 4 * v77 + 2 * v81;
          *(_DWORD *)(v85 + 144) = v84 | *(_WORD *)(v86 + 698) & 0x1FF;
          *(_DWORD *)(v85 + 528) = 770703360;
          *(_DWORD *)(v85 + 528) = *(unsigned __int16 *)(v86 + 762) | 0x2DF00000;
          ++v65;
          uint64_t v81 = 1;
          char v82 = 0;
        }
        while ((v83 & 1) != 0);
      }
      unsigned int v76 = v77 + 1;
    }
    while ((int)v77 + 1 <= *(char *)(v10 + 1848 * a3 + 64));
  }
  *(_DWORD *)(a2 + 136) = v65;
LABEL_85:
  *(_DWORD *)(a2 + 912) = 0;
  uint64_t v87 = v10 + 1848 * a3;
  *(_DWORD *)(a2 + 912) = (((*(unsigned __int8 *)(v112 + 604 * v113 + 89) + *(unsigned __int8 *)(v87 + 1425)) << 10)
                         + 26624) & 0x1FC00 | 0x2D900000;
  *(_DWORD *)(a2 + 916) = 0;
  int v88 = (*(unsigned char *)(v87 + 1428) == 0) << 17;
  *(_DWORD *)(a2 + 916) = v88;
  if (*(unsigned char *)(v87 + 1428) != 1)
  {
    int v89 = v88 | 0x10000;
    *(_DWORD *)(a2 + 916) = v89;
    uint64_t v90 = v10 + 1848 * a3;
    int v91 = v89 | ((*(unsigned char *)(v90 + 1429) & 0xF) << 8);
    *(_DWORD *)(a2 + 916) = v91;
    int v88 = v91 | ((*(unsigned char *)(v90 + 1430) & 0xF) << 12);
  }
  *(_DWORD *)(a2 + 916) = v88 | 0x2DA00000;
  int v92 = (unsigned int *)(v10 + 1848 * a3 + 1436);
  unsigned int v93 = *v92;
  if (*(unsigned char *)(v112 + 604 * v113 + 3))
  {
    int v94 = 0;
    if ((v93 & 7) != 0) {
      *int v92 = (v93 + 7) & 0xFFFFFFF8;
    }
  }
  else
  {
    int v94 = *v92 & 7;
  }
  *(_DWORD *)(a2 + 924) = (v94 << 15) | 0x2D800000;
  uint64_t v95 = *(_DWORD **)(v114 + 256);
  unsigned int v96 = v95[626];
  unint64_t v118 = 0;
  uint64_t v119 = 0;
  if (!CAVDAvcDecoder::GetSDataMemInfo((uint64_t)v95, v109, &v119, &v118)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v117 = v96;
  int v97 = 956 * v109;
  uint64_t v98 = v119;
  if (!*(void *)v119 && !*(_DWORD *)(v119 + 152) && !*(_DWORD *)(v119 + 156)) {
    goto LABEL_101;
  }
  int v99 = v118;
  if (HIDWORD(v118) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)uint64_t v121 = "populateSliceRegisters";
    *(_WORD *)&v121[8] = 1024;
    v122[0] = 1763;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v99 = v118;
  }
  uint64_t result = CAHDec::addToPatcherList(v114, (void *)v98, v97 + 3028, v99, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  if (result) {
    return result;
  }
  uint64_t v98 = v119;
  if (!*(void *)v119)
  {
LABEL_101:
    if (!*(_DWORD *)(v98 + 152) && !*(_DWORD *)(v98 + 156))
    {
LABEL_109:
      unsigned int v103 = *(_DWORD *)(v10 + 1848 * a3 + 16) - (*v92 >> 3);
      *(_DWORD *)(a2 + 936) = v103;
      if (v95[590] != 1) {
        return 0;
      }
      *(void *)(a2 + 944) = 0;
      unsigned int v104 = *(unsigned __int16 *)(v10 + 1848 * a3 + 1840);
      if (v95[605])
      {
        uint64_t result = 0;
        if (v103 < v104) {
          unsigned int v104 = v103;
        }
        if (v94) {
          BOOL v105 = v104 == 0;
        }
        else {
          BOOL v105 = 0;
        }
        if (v105) {
          unsigned int v104 = 1;
        }
        unsigned int v106 = v117 & 0x10000 | v104;
      }
      else
      {
        if ((v117 & 0x200000) != 0)
        {
          int v108 = 0;
          if (v94 && !*(_WORD *)(v10 + 1848 * a3 + 1840))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(void *)uint64_t v121 = "int CAHDecClaryAvc::populateSliceRegisters(AvcSliceRegisters *, int)";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect off_to_prot_data to be set when slice header is not byte aligned\n", buf, 0xCu);
              unsigned int v103 = *(_DWORD *)(a2 + 936);
              int v108 = *(_DWORD *)(a2 + 948) & 0x1F0000;
            }
            else
            {
              int v108 = 0;
            }
            unsigned int v104 = 1;
          }
        }
        else
        {
          int v108 = 0;
          if (v94) {
            ++v104;
          }
        }
        uint64_t result = 0;
        if (v104 >= v103) {
          unsigned int v104 = v103;
        }
        unsigned int v106 = v108 & 0xFFDFFFFF | (v104 << 22) | (unsigned __int16)v117 | (((v117 >> 20) & 1) << 21);
      }
      *(_DWORD *)(a2 + 948) = v106;
      return result;
    }
  }
  int v100 = v97 + 3036;
  int v101 = v118;
  if (HIDWORD(v118))
  {
    uint64_t v102 = v114;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)uint64_t v121 = "populateSliceRegisters";
      *(_WORD *)&v121[8] = 1024;
      v122[0] = 1764;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      int v101 = v118;
    }
  }
  else
  {
    uint64_t v102 = v114;
  }
  uint64_t result = CAHDec::addToPatcherList(v102, (void *)v98, v100, v101, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result) {
    goto LABEL_109;
  }
  return result;
}

uint64_t CAHDecClaryAvc::populateCommonRegisters(CAHDecClaryAvc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000001;
  return 0;
}

uint64_t CAHDecClaryAvc::updateCommonRegisters(CAHDecClaryAvc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

void CAHDecClaryAvc::copyScalingList(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = *a2 & 0xFEFFFFC0 | 0x1000000;
  *a2 = v8;
  do
  {
    v8 |= (*(unsigned char *)(a4 + v7) == 0) << v7;
    *a2 = v8;
    ++v7;
  }
  while (v7 != 6);
  unsigned int v9 = v8 & 0xFFFFF03F;
  *a2 = v8 & 0xFFFFF03F;
  if (a7 >= 7)
  {
    uint64_t v10 = (a7 - 6);
    uint64_t v11 = (unsigned __int8 *)(a4 + 6);
    uint64_t v12 = &dword_223AD08F8;
    do
    {
      int v13 = *v11++;
      BOOL v14 = v13 == 0;
      int v16 = *v12++;
      char v15 = v16;
      int v17 = v14;
      v9 |= ((v17 << v15) & 0x3F) << 6;
      *a2 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 1;
  uint64_t v20 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v22 = *(_DWORD *)(v20 + i) & 0xFFFFFF | (*(unsigned __int8 *)(v19 + i - 1) << 24);
      *(_DWORD *)(v20 + i) = v22;
      unsigned int v23 = v22 & 0xFF00FFFF | (*(unsigned __int8 *)(v19 + i) << 16);
      *(_DWORD *)(v20 + i) = v23;
      unsigned int v24 = v23 & 0xFFFF00FF | (*(unsigned __int8 *)(v19 + i + 1) << 8);
      *(_DWORD *)(v20 + i) = v24;
      *(_DWORD *)(v20 + i) = v24 & 0xFFFFFF00 | *(unsigned __int8 *)(v19 + i + 2);
    }
    ++v18;
    v20 += 16;
    v19 += 16;
  }
  while (v18 != 6);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 96;
  do
  {
    int v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = a6 + ((uint64_t)dword_223AD0910[v25] << 6);
    do
    {
      uint64_t v31 = (unsigned __int8 *)(v30 + (v28 & 0x7FFFFFE0 | v29 & 4 | v27 & 0x18));
      int v32 = *(_DWORD *)(v26 + v28) & 0xFFFFFF | (*v31 << 24);
      *(_DWORD *)(v26 + v28) = v32;
      unsigned int v33 = v32 & 0xFF00FFFF | (v31[1] << 16);
      *(_DWORD *)(v26 + v28) = v33;
      unsigned int v34 = v33 & 0xFFFF00FF | (v31[2] << 8);
      *(_DWORD *)(v26 + v28) = v34;
      *(_DWORD *)(v26 + v28) = v34 & 0xFFFFFF00 | v31[3];
      ++v29;
      v28 += 4;
      v27 += 8;
    }
    while (v28 != 64);
    ++v25;
    v26 += 64;
  }
  while (v25 != 6);
}

uint64_t CAHDecClaryAvc::AvcSeqScalingListFallBack(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v3 = 12;
    }
    uint64_t v4 = a2 + 22;
    uint64_t v5 = (_OWORD *)(a2 + 34);
    while (v2 > 5)
    {
      if (*(unsigned char *)(v4 + v2 - 12))
      {
        if (*(unsigned char *)(v4 + v2) == 2)
        {
          unsigned int v9 = (_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 130);
          if (v2 == 6 || (v2 & 0x7FFFFFFD) == 8)
          {
            *unsigned int v9 = avcDefaultIntraScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223AD0978;
            long long v10 = xmmword_223AD0988;
            long long v11 = unk_223AD0998;
          }
          else
          {
            *unsigned int v9 = avcDefaultInterScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223AD0938;
            long long v10 = xmmword_223AD0948;
            long long v11 = unk_223AD0958;
          }
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 162) = v10;
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 178) = v11;
        }
        goto LABEL_24;
      }
      if ((v2 - 8) <= 0xFFFFFFFD)
      {
        uint64_t result = a2 + 130;
        int v13 = (_OWORD *)(a2 + 130 + ((unint64_t)(v2 - 6) << 6));
        BOOL v14 = (long long *)(a2 + 130 + ((unint64_t)(v2 - 8) << 6));
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[3];
        v13[2] = v14[2];
        v13[3] = v17;
        *int v13 = v15;
        v13[1] = v16;
        uint64_t v8 = (v2 - 2);
LABEL_21:
        *(unsigned char *)(v4 + v2) = *(unsigned char *)(a2 + v8 + 22);
      }
LABEL_24:
      ++v2;
      ++v5;
      if (v3 == v2) {
        return result;
      }
    }
    if (*(unsigned char *)(v4 + v2 - 12)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (v6 || v2 == 3) {
      goto LABEL_24;
    }
    uint64_t v8 = (v2 - 1);
    *uint64_t v5 = *(_OWORD *)(a2 + 16 * v8 + 34);
    goto LABEL_21;
  }
  return result;
}

long long *CAHDecClaryAvc::AvcPicScalingListFallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 96))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = a3 + 97;
    uint64_t v6 = -96;
    uint64_t result = &avcDefaultIntraScalingList8x8;
    do
    {
      if (v3 > 5)
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if (*(unsigned char *)(v5 + v3 + 12) == 2)
          {
            unsigned int v9 = (_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 217);
            if (v3 == 6 || (v3 & 0x7FFFFFFD) == 8)
            {
              *unsigned int v9 = avcDefaultIntraScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223AD0978;
              long long v10 = xmmword_223AD0988;
              long long v11 = unk_223AD0998;
            }
            else
            {
              *unsigned int v9 = avcDefaultInterScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223AD0938;
              long long v10 = xmmword_223AD0948;
              long long v11 = unk_223AD0958;
            }
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 249) = v10;
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 265) = v11;
          }
          goto LABEL_31;
        }
        if ((v3 - 8) <= 0xFFFFFFFD)
        {
          uint64_t v12 = (_OWORD *)(a3 + 217 + ((unint64_t)(v3 - 6) << 6));
          int v13 = (long long *)(a3 + 217 + ((unint64_t)(v3 - 8) << 6));
          long long v14 = *v13;
          long long v15 = v13[1];
          long long v16 = v13[3];
          v12[2] = v13[2];
          v12[3] = v16;
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v17 = a3 + (v3 - 2);
          goto LABEL_29;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          uint64_t v18 = (v3 - 6);
          uint64_t v19 = a3 + (v18 << 6);
          uint64_t v20 = a2 + (v18 << 6);
          long long v21 = *(_OWORD *)(v20 + 130);
          long long v22 = *(_OWORD *)(v20 + 146);
          long long v23 = *(_OWORD *)(v20 + 162);
          *(_OWORD *)(v19 + 265) = *(_OWORD *)(v20 + 178);
          *(_OWORD *)(v19 + 249) = v23;
          *(_OWORD *)(v19 + 233) = v22;
          *(_OWORD *)(v19 + 217) = v21;
LABEL_23:
          char v24 = *(unsigned char *)(a2 + 22 + v3);
LABEL_30:
          *(unsigned char *)(v5 + v3 + 12) = v24;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if ((*(unsigned char *)(v5 + v3 + 12) & 2) != 0)
          {
            if (v3 > 2) {
              long long v8 = avcDefaultInterScalingList4x4;
            }
            else {
              long long v8 = avcDefaultIntraScalingList4x4;
            }
            *(_OWORD *)(v5 + v6 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v8;
          }
          goto LABEL_31;
        }
        if (v3 && v3 != 3)
        {
          uint64_t v25 = (v3 - 1);
          *(_OWORD *)(v5 + v6 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(a3 + 16 * v25 + 121);
          uint64_t v17 = a3 + v25;
LABEL_29:
          char v24 = *(unsigned char *)(v17 + 109);
          goto LABEL_30;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          *(_OWORD *)(v5 + v6 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(a2 + v6 + 130);
          goto LABEL_23;
        }
      }
LABEL_31:
      ++v3;
      v6 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CAHDecClaryAvc::populateSequenceRegisters(CAHDecClaryAvc *this)
{
  uint64_t v2 = *((void *)this + 32);
  unint64_t v3 = (_DWORD *)*((void *)this + 33);
  int v4 = *(_DWORD *)(v2 + 3612);
  int v5 = *(_DWORD *)(v2 + 3616);
  uint64_t v6 = *(void *)(v2 + 3296);
  uint64_t v7 = *(void *)(v2 + 3304);
  uint64_t v8 = v6 + 2224 * v4;
  v3[10] = 0;
  __int16 v9 = *(_WORD *)(v8 + 1558);
  v3[10] = (2 * (v9 & 0xFFF)) | 1;
  v3[10] = ((*(_WORD *)(v8 + 1560) & 0xFFF) << 17) | (2 * (v9 & 0xFFF)) | 0x10001;
  v3[11] = 0;
  int v10 = *(unsigned char *)(v8 + 1564) & 1;
  v3[11] = v10;
  int v11 = v10 | ((*(unsigned char *)(v7 + 604 * v5 + 95) != 0) << 7) | 0x2800;
  v3[11] = v11;
  uint64_t v12 = (unsigned char *)(v8 + 4);
  int v13 = *(unsigned __int8 *)(v8 + 4);
  if (*(unsigned char *)(v8 + 4)) {
    int v13 = (*(unsigned char *)(v6 + 2224 * v4 + 7) & 0xF) << 15;
  }
  int v14 = v13 | v11;
  v3[11] = v14;
  long long v15 = (unsigned char *)(v6 + 2224 * v4);
  int v16 = v14 & 0x7F87A881 | ((v15[6] & 0xF) << 19);
  v3[11] = v16;
  unsigned int v17 = v16 & 0xFF7FFFFF | ((v15[5] & 1) << 23);
  v3[11] = v17;
  v3[11] = v17 & 0xFCFFFFFF | ((*v12 & 3) << 24);
  if (v15[9])
  {
    if (*v12 == 3) {
      int v18 = 12;
    }
    else {
      int v18 = 8;
    }
    uint64_t v19 = CAHDecClaryAvc::AvcSeqScalingListFallBack((uint64_t)this, v8);
    CAHDecClaryAvc::copyScalingList(v19, v3 + 12, *((void *)this + 33) + 992, v6 + 2224 * v4 + 22, v6 + 2224 * v4 + 34, v6 + 2224 * v4 + 130, v18);
  }
  return 0;
}

uint64_t CAHDecClaryAvc::populatePictureRegisters(CAHDecClaryAvc *this)
{
  uint64_t v316 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 3612);
  int v4 = *(_DWORD *)(v2 + 3616);
  uint64_t v5 = *(void *)(v2 + 3296);
  uint64_t v6 = *(void *)(v2 + 3304);
  uint64_t v293 = *(void *)(v2 + 2088);
  uint64_t v299 = *(unsigned int *)(v2 + 3152);
  int v296 = *(_DWORD *)(v2 + 3132);
  int v297 = *(_DWORD *)(v2 + 2644);
  int v7 = *(unsigned __int8 *)(v2 + 8);
  long long v8 = *(_OWORD *)(v2 + 7016);
  v315[8] = *(_OWORD *)(v2 + 7000);
  v315[9] = v8;
  long long v9 = *(_OWORD *)(v2 + 7048);
  v315[10] = *(_OWORD *)(v2 + 7032);
  v315[11] = v9;
  long long v10 = *(_OWORD *)(v2 + 6952);
  v315[4] = *(_OWORD *)(v2 + 6936);
  v315[5] = v10;
  long long v11 = *(_OWORD *)(v2 + 6984);
  v315[6] = *(_OWORD *)(v2 + 6968);
  v315[7] = v11;
  long long v12 = *(_OWORD *)(v2 + 6888);
  v315[0] = *(_OWORD *)(v2 + 6872);
  v315[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 6920);
  v315[2] = *(_OWORD *)(v2 + 6904);
  v315[3] = v13;
  uint64_t v295 = *(unsigned int *)(v2 + 7064);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  long long v15 = (unsigned __int8 *)*((void *)this + 32);
  uint64_t v16 = *((void *)this + 33);
  int v17 = v15[2675];
  unsigned int v18 = v15[2674];
  if (!(v17 | v18)) {
    goto LABEL_41;
  }
  uint64_t v19 = v5 + 2224 * v3;
  unsigned int v20 = *(unsigned __int8 *)(v19 + 6);
  unsigned int v21 = *(unsigned __int8 *)(v19 + 7);
  if (v20 > v21) {
    LOWORD(v21) = v20;
  }
  int v22 = ((_WORD)v21 + 9) & 0x1FE;
  if (v22 == 8)
  {
    int v24 = v7;
    unsigned int v28 = 1;
    int v26 = 8;
    if (!v15[2675]) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  int v23 = v15[2672];
  int v24 = v7;
  if (v22 != 12)
  {
    if (v22 == 10)
    {
      BOOL v25 = v23 == 0;
      if (v23) {
        int v26 = 10;
      }
      else {
        int v26 = 9;
      }
      int v27 = 2;
      goto LABEL_15;
    }
    int v26 = 27;
    unsigned int v28 = 27;
    if (!v17) {
      goto LABEL_30;
    }
LABEL_23:
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) && (v17 == 2 && v26 == 8 || v17 == 3 && (v26 - 9) <= 1))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = "populatePictureRegisters";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = v26;
      WORD1(buf[2]) = 1024;
      HIDWORD(buf[2]) = v17;
      int v29 = &_os_log_internal;
      uint64_t v30 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
      goto LABEL_38;
    }
    goto LABEL_30;
  }
  BOOL v25 = v23 == 0;
  if (v23) {
    int v26 = 12;
  }
  else {
    int v26 = 11;
  }
  int v27 = 4;
LABEL_15:
  if (v25) {
    unsigned int v28 = v27;
  }
  else {
    unsigned int v28 = v27 + 1;
  }
  if (v17) {
    goto LABEL_23;
  }
LABEL_30:
  int v7 = v24;
  if (v18 && (v18 == 3 && v28 - 9 < 2 || v28 <= 0x1A && ((1 << v28) & 0x4C00000) != 0 && v18 <= 2))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "populatePictureRegisters";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = v28;
    WORD1(buf[2]) = 1024;
    HIDWORD(buf[2]) = v18;
    int v29 = &_os_log_internal;
    uint64_t v30 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
LABEL_38:
    uint64_t v31 = (uint8_t *)buf;
    uint32_t v32 = 24;
    goto LABEL_39;
  }
LABEL_41:
  int v290 = v14;
  int v291 = *((_DWORD *)this + 2961) * v299;
  unsigned int v34 = (char *)this + 264;
  *(_DWORD *)(v16 + 52) = 766509056;
  if (**(_DWORD **)(*((void *)this + 32) + 3312) == 5) {
    int v35 = 766517248;
  }
  else {
    int v35 = 766509056;
  }
  if (v14) {
    int v36 = 688;
  }
  else {
    int v36 = 672;
  }
  if (v297) {
    int v37 = 4160;
  }
  else {
    int v37 = 64;
  }
  unsigned int v38 = v37 & 0xFFFFFFF0 | ((v297 == 1) << 10) | v36 & 0xFFFFFFF0 | (4 * (v17 & 3)) | v18 & 3 | v35;
  *(_DWORD *)(v16 + 52) = v38;
  uint64_t v39 = (unsigned char *)*((void *)this + 32);
  int v40 = v38 | ((v39[2652] & 1) << 19);
  *(_DWORD *)(v16 + 52) = v40;
  unsigned int v41 = v40 & 0xFFFBFFFF | ((v39[2653] & 1) << 18);
  *(_DWORD *)(v16 + 52) = v41;
  *(_DWORD *)(v16 + 52) = v41 & 0xFFFDFFFF | ((v39[2654] & 1) << 17);
  *(void *)(v16 + 56) = 0x1000000;
  uint64_t v42 = v5 + 2224 * v3;
  int v43 = (16 * (*(_WORD *)(v42 + 1558) & 0xFFF)) | 0xF;
  *(_DWORD *)(v16 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v43;
  LODWORD(v39) = v43 | (*(unsigned __int16 *)(v42 + 1560) << 20) | 0xF0000;
  *(void *)(v16 + 64) = 0;
  *(_DWORD *)(v16 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v39;
  LODWORD(v42) = (*(unsigned char *)(v42 + 8) & 1) << 18;
  *(_DWORD *)(v16 + 68) = v42;
  unsigned int v44 = (unsigned char *)(v6 + 604 * v4);
  LODWORD(v42) = v42 & 0xFFF7FFFF | ((v44[93] & 1) << 19);
  *(_DWORD *)(v16 + 68) = v42;
  LODWORD(v42) = v42 & 0xFFEFFFFF | ((v44[3] & 1) << 20);
  *(_DWORD *)(v16 + 68) = v42;
  *(_DWORD *)(v16 + 68) = v42 | ((**(_DWORD **)(*((void *)this + 32) + 3312) != 5) << 21);
  unsigned int v45 = *(_DWORD *)(v16 + 72) & 0xFFFFFC1F | (32 * (v44[91] & 0x1F));
  *(_DWORD *)(v16 + 72) = v45;
  *(_DWORD *)(v16 + 72) = v45 & 0xFFFFFFE0 | v44[601] & 0x1F;
  if (v44[96])
  {
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) == 3) {
      int v46 = 12;
    }
    else {
      int v46 = 8;
    }
    uint64_t v47 = *(void *)v34 + 1476;
    int v48 = CAHDecClaryAvc::AvcPicScalingListFallBack(v14, v5 + 2224 * v3, v6 + 604 * v4);
    CAHDecClaryAvc::copyScalingList((uint64_t)v48, (unsigned int *)(v16 + 76), v47, v6 + 604 * v4 + 109, v6 + 604 * v4 + 121, v6 + 604 * v4 + 217, v46);
  }
  uint64_t v49 = 0;
  *(_DWORD *)(v16 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *((_DWORD *)this + 2966);
  *(_DWORD *)(v16 + 84) = *((_DWORD *)this + 2967);
  *(_DWORD *)(v16 + 88) = 3145786;
  uint64_t v50 = (char *)this + 9008;
  do
  {
    *(_DWORD *)(*(void *)v34 + v49 + 92) = 0;
    uint64_t v51 = *(void *)v34 + v49;
    int v52 = *(_DWORD *)(v51 + 92);
    *(_DWORD *)(v51 + 92) = 0;
    *(_DWORD *)(*(void *)v34 + v49 + 92) ^= 0xFFFFFF00;
    uint64_t v53 = *(void *)v34 + v49;
    int v54 = *(_DWORD *)(v53 + 92);
    *(_DWORD *)(v53 + 92) = v52;
    if (*(void *)v50 || *((_DWORD *)v50 + 38) || *((_DWORD *)v50 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v50, (int)v49 + 92, 0, 0xFFFFFFFFLL, 8, v54, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v49 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + v49 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*((void *)this + 33) + v49 + 120) & 0x800001FF | (((*((_DWORD *)this + 2960) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v49 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    uint64_t v55 = *((void *)this + 33) + v49;
    int v56 = *(_DWORD *)(v55 + 540);
    *(_DWORD *)(v55 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + v49 + 540) ^= 0x3FFu;
    uint64_t v57 = *((void *)this + 33) + v49;
    int v58 = *(_DWORD *)(v57 + 540);
    *(_DWORD *)(v57 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v56;
    if (*(void *)v50 || *((_DWORD *)v50 + 38) || *((_DWORD *)v50 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v50, (int)v49 + 540, 0, 0x3FFFFFFFFFFLL, 32, v58, 4);
      if (result) {
        return result;
      }
    }
    v49 += 4;
    v50 += 176;
  }
  while (v49 != 28);
  *(_DWORD *)(*(void *)v34 + 148) = 0;
  *(_DWORD *)(*(void *)v34 + 568) = 0;
  if ((*(unsigned char *)(v16 + 54) & 8) == 0) {
    goto LABEL_350;
  }
  uint64_t v59 = *((void *)this + 33);
  uint64_t v60 = *(void *)(*((void *)this + 32) + 2680);
  long long v312 = 0u;
  long long v313 = 0u;
  long long v310 = 0u;
  long long v311 = 0u;
  long long v308 = 0u;
  long long v309 = 0u;
  long long v306 = 0u;
  long long v307 = 0u;
  long long v305 = 0u;
  memset(buf, 0, sizeof(buf));
  int v61 = (*(_DWORD *)(v59 + 16) & 0xF) << 9;
  buf[0] = v60;
  int v62 = *(_DWORD *)(v59 + 148);
  *(_DWORD *)(v59 + 148) = 0;
  *(_DWORD *)(*((void *)this + 33) + 148) ^= 0xFFFFFF00;
  uint64_t v63 = *((void *)this + 33);
  int v64 = *(_DWORD *)(v63 + 148);
  *(_DWORD *)(v63 + 148) = v62;
  if (v60 || DWORD2(v312) || (int v65 = HIDWORD(v312)) != 0)
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 148, v61, 0xFFFFFFFFLL, 8, v64, 4);
    if (result) {
      return result;
    }
    uint64_t v67 = buf[0];
    int v66 = DWORD2(v312);
    int v65 = HIDWORD(v312);
  }
  else
  {
    int v66 = 0;
    uint64_t v67 = 0;
  }
  if ((int v68 = *(_DWORD *)(*(void *)v34 + 568),
        *(_DWORD *)(*(void *)v34 + 568) = 0,
        *(_DWORD *)(*(void *)v34 + 568) ^= 0x3FFu,
        int v69 = *(_DWORD *)(*(void *)v34 + 568),
        *(_DWORD *)(*(void *)v34 + 568) = v68,
        !v67)
    && !v66
    && !v65
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 568, v61, 0x3FFFFFFFFFFLL, 32, v69, 4), !result))
  {
LABEL_350:
    int v70 = v7;
    *(_DWORD *)(*((void *)this + 33) + 152) = 0;
    uint64_t v71 = *((void *)this + 33);
    int v72 = *(_DWORD *)(v71 + 152);
    *(_DWORD *)(v71 + 152) = 0;
    *(_DWORD *)(*((void *)this + 33) + 152) ^= 0xFFFFFF00;
    uint64_t v73 = *((void *)this + 33);
    int v74 = *(_DWORD *)(v73 + 152);
    *(_DWORD *)(v73 + 152) = v72;
    if (!*((void *)this + 1302) && !*((_DWORD *)this + 2642) && !*((_DWORD *)this + 2643)) {
      goto LABEL_351;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1302, 152, 0, 0xFFFFFFFFLL, 8, v74, 4);
    if (!result)
    {
LABEL_351:
      if ((*(_DWORD *)(*(void *)v34 + 572) = 0,
            int v75 = *(_DWORD *)(*(void *)v34 + 572),
            *(_DWORD *)(*(void *)v34 + 572) = 0,
            *(_DWORD *)(*(void *)v34 + 572) ^= 0x3FFu,
            int v76 = *(_DWORD *)(*(void *)v34 + 572),
            *(_DWORD *)(*(void *)v34 + 572) = v75,
            !*((void *)this + 1302))
        && !*((_DWORD *)this + 2642)
        && !*((_DWORD *)this + 2643)
        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1302, 572, 0, 0x3FFFFFFFFFFLL, 32, v76, 4),
            !result))
      {
        *(_DWORD *)(*((void *)this + 33) + 156) = 0;
        uint64_t v77 = *((void *)this + 33);
        int v78 = *(_DWORD *)(v77 + 156);
        *(_DWORD *)(v77 + 156) = 0;
        *(_DWORD *)(*((void *)this + 33) + 156) ^= 0xFFFFFF00;
        uint64_t v79 = *((void *)this + 33);
        int v80 = *(_DWORD *)(v79 + 156);
        *(_DWORD *)(v79 + 156) = v78;
        if (!*((void *)this + 1324) && !*((_DWORD *)this + 2686) && !*((_DWORD *)this + 2687)) {
          goto LABEL_352;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1324, 156, 0, 0xFFFFFFFFLL, 8, v80, 4);
        if (!result)
        {
LABEL_352:
          if ((*(_DWORD *)(*(void *)v34 + 576) = 0,
                int v81 = *(_DWORD *)(*(void *)v34 + 576),
                *(_DWORD *)(*(void *)v34 + 576) = 0,
                *(_DWORD *)(*(void *)v34 + 576) ^= 0x3FFu,
                int v82 = *(_DWORD *)(*(void *)v34 + 576),
                *(_DWORD *)(*(void *)v34 + 576) = v81,
                !*((void *)this + 1324))
            && !*((_DWORD *)this + 2686)
            && !*((_DWORD *)this + 2687)
            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1324, 576, 0, 0x3FFFFFFFFFFLL, 32, v82, 4), !result))
          {
            *(_DWORD *)(*((void *)this + 33) + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
            uint64_t v83 = *((void *)this + 33);
            int v84 = *(_DWORD *)(v83 + 160);
            *(_DWORD *)(v83 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
            *(_DWORD *)(*((void *)this + 33) + 160) ^= 0xFFFFFF00;
            uint64_t v85 = *((void *)this + 33);
            int v86 = *(_DWORD *)(v85 + 160);
            *(_DWORD *)(v85 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v84;
            if (!*((void *)this + 1346) && !*((_DWORD *)this + 2730) && !*((_DWORD *)this + 2731)) {
              goto LABEL_353;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1346, 160, 0, 0xFFFFFFFFLL, 8, v86, 4);
            if (!result)
            {
LABEL_353:
              if ((*(_DWORD *)(*(void *)v34 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                    int v87 = *(_DWORD *)(*(void *)v34 + 580),
              }
                    *(_DWORD *)(*(void *)v34 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                    *(_DWORD *)(*(void *)v34 + 580) ^= 0x3FFu,
                    int v88 = *(_DWORD *)(*(void *)v34 + 580),
                    *(_DWORD *)(*(void *)v34 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v87,
                    !*((void *)this + 1346))
                && !*((_DWORD *)this + 2730)
                && !*((_DWORD *)this + 2731)
                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1346, 580, 0, 0x3FFFFFFFFFFLL, 32, v88, 4), !result))
              {
                *(_DWORD *)(*((void *)this + 33) + 164) = 0;
                uint64_t v89 = *((void *)this + 33);
                int v90 = *(_DWORD *)(v89 + 164);
                *(_DWORD *)(v89 + 164) = 0;
                *(_DWORD *)(*((void *)this + 33) + 164) ^= 0xFFFFFF00;
                uint64_t v91 = *((void *)this + 33);
                int v92 = *(_DWORD *)(v91 + 164);
                *(_DWORD *)(v91 + 164) = v90;
                if (!*((void *)this + 1368) && !*((_DWORD *)this + 2774) && !*((_DWORD *)this + 2775)) {
                  goto LABEL_354;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1368, 164, 0, 0xFFFFFFFFLL, 8, v92, 4);
                if (!result)
                {
LABEL_354:
                  if ((*(_DWORD *)(*(void *)v34 + 584) = 0,
                        int v93 = *(_DWORD *)(*(void *)v34 + 584),
                        *(_DWORD *)(*(void *)v34 + 584) = 0,
                        *(_DWORD *)(*(void *)v34 + 584) ^= 0x3FFu,
                        int v94 = *(_DWORD *)(*(void *)v34 + 584),
                        *(_DWORD *)(*(void *)v34 + 584) = v93,
                        !*((void *)this + 1368))
                    && !*((_DWORD *)this + 2774)
                    && !*((_DWORD *)this + 2775)
                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1368, 584, 0, 0x3FFFFFFFFFFLL, 32, v94, 4), !result))
                  {
                    *(_DWORD *)(*((void *)this + 33) + 168) = 0;
                    uint64_t v95 = *((void *)this + 33);
                    int v96 = *(_DWORD *)(v95 + 168);
                    *(_DWORD *)(v95 + 168) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 168) ^= 0xFFFFFF00;
                    uint64_t v97 = *((void *)this + 33);
                    int v98 = *(_DWORD *)(v97 + 168);
                    *(_DWORD *)(v97 + 168) = v96;
                    if (!*((void *)this + 1390) && !*((_DWORD *)this + 2818) && !*((_DWORD *)this + 2819)) {
                      goto LABEL_355;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1390, 168, 0, 0xFFFFFFFFLL, 8, v98, 4);
                    if (!result)
                    {
LABEL_355:
                      if ((*(_DWORD *)(*(void *)v34 + 588) = 0,
                            int v99 = *(_DWORD *)(*(void *)v34 + 588),
                            *(_DWORD *)(*(void *)v34 + 588) = 0,
                            *(_DWORD *)(*(void *)v34 + 588) ^= 0x3FFu,
                            int v100 = *(_DWORD *)(*(void *)v34 + 588),
                            *(_DWORD *)(*(void *)v34 + 588) = v99,
                            !*((void *)this + 1390))
                        && !*((_DWORD *)this + 2818)
                        && !*((_DWORD *)this + 2819)
                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1390, 588, 0, 0x3FFFFFFFFFFLL, 32, v100, 4), !result))
                      {
                        *(_DWORD *)(*((void *)this + 33) + 172) = 0;
                        uint64_t v101 = *((void *)this + 33);
                        int v102 = *(_DWORD *)(v101 + 172);
                        *(_DWORD *)(v101 + 172) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 172) ^= 0xFFFFFF00;
                        uint64_t v103 = *((void *)this + 33);
                        int v104 = *(_DWORD *)(v103 + 172);
                        *(_DWORD *)(v103 + 172) = v102;
                        if (!*((void *)this + 1412) && !*((_DWORD *)this + 2862) && !*((_DWORD *)this + 2863)) {
                          goto LABEL_356;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1412, 172, 0, 0xFFFFFFFFLL, 8, v104, 4);
                        if (!result)
                        {
LABEL_356:
                          if ((*(_DWORD *)(*(void *)v34 + 592) = 0,
                                int v105 = *(_DWORD *)(*(void *)v34 + 592),
                                *(_DWORD *)(*(void *)v34 + 592) = 0,
                                *(_DWORD *)(*(void *)v34 + 592) ^= 0x3FFu,
                                int v106 = *(_DWORD *)(*(void *)v34 + 592),
                                *(_DWORD *)(*(void *)v34 + 592) = v105,
                                !*((void *)this + 1412))
                            && !*((_DWORD *)this + 2862)
                            && !*((_DWORD *)this + 2863)
                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1412, 592, 0, 0x3FFFFFFFFFFLL, 32, v106, 4), !result))
                          {
                            *(_DWORD *)(*((void *)this + 33) + 176) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 596) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            uint64_t v107 = *((void *)this + 33);
                            int v108 = *(_DWORD *)(v107 + 180);
                            *(_DWORD *)(v107 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 180) ^= 0xFFFFFF00;
                            uint64_t v109 = *((void *)this + 33);
                            int v110 = *(_DWORD *)(v109 + 180);
                            *(_DWORD *)(v109 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v108;
                            if (!*((void *)this + 1280) && !*((_DWORD *)this + 2598) && !*((_DWORD *)this + 2599)) {
                              goto LABEL_357;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1280, 180, 0, 0xFFFFFFFFLL, 8, v110, 4);
                            if (!result)
                            {
LABEL_357:
                              if ((*(_DWORD *)(*(void *)v34 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                    int v111 = *(_DWORD *)(*(void *)v34 + 600),
                              }
                                    *(_DWORD *)(*(void *)v34 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                    *(_DWORD *)(*(void *)v34 + 600) ^= 0x3FFu,
                                    int v112 = *(_DWORD *)(*(void *)v34 + 600),
                                    *(_DWORD *)(*(void *)v34 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v111,
                                    !*((void *)this + 1280))
                                && !*((_DWORD *)this + 2598)
                                && !*((_DWORD *)this + 2599)
                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1280, 600, 0, 0x3FFFFFFFFFFLL, 32, v112, 4), !result))
                              {
                                *(_DWORD *)(*((void *)this + 33) + 184) = 0;
                                uint64_t v113 = *((void *)this + 33);
                                int v114 = *(_DWORD *)(v113 + 184);
                                *(_DWORD *)(v113 + 184) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 184) ^= 0xFFFFFF00;
                                uint64_t v115 = *((void *)this + 33);
                                int v116 = *(_DWORD *)(v115 + 184);
                                *(_DWORD *)(v115 + 184) = v114;
                                if (!*((void *)this + 1456) && !*((_DWORD *)this + 2950) && !*((_DWORD *)this + 2951)) {
                                  goto LABEL_358;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 184, v291, 0xFFFFFFFFLL, 8, v116, 4);
                                if (!result)
                                {
LABEL_358:
                                  if ((*(_DWORD *)(*(void *)v34 + 604) = 0,
                                        int v117 = *(_DWORD *)(*(void *)v34 + 604),
                                        *(_DWORD *)(*(void *)v34 + 604) = 0,
                                        *(_DWORD *)(*(void *)v34 + 604) ^= 0x3FFu,
                                        int v118 = *(_DWORD *)(*(void *)v34 + 604),
                                        *(_DWORD *)(*(void *)v34 + 604) = v117,
                                        !*((void *)this + 1456))
                                    && !*((_DWORD *)this + 2950)
                                    && !*((_DWORD *)this + 2951)
                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 604, v291, 0x3FFFFFFFFFFLL, 32, v118, 4), !result))
                                  {
                                    *(_DWORD *)(*((void *)this + 33) + 188) = 0;
                                    uint64_t v119 = *((void *)this + 33);
                                    int v120 = *(_DWORD *)(v119 + 188);
                                    *(_DWORD *)(v119 + 188) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 188) ^= 0xFFFFFF80;
                                    uint64_t v121 = *((void *)this + 33);
                                    int v122 = *(_DWORD *)(v121 + 188);
                                    *(_DWORD *)(v121 + 188) = v120;
                                    uint64_t v123 = (void *)((char *)this + 176 * v299 + 560);
                                    if (!*v123
                                      && !*((_DWORD *)this + 44 * v299 + 178)
                                      && !*((_DWORD *)this + 44 * v299 + 179))
                                    {
                                      goto LABEL_359;
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v299 + 70, 188, 0, 0xFFFFFFFFLL, 7, v122, 4);
                                    if (!result)
                                    {
LABEL_359:
                                      if ((*(_DWORD *)(*(void *)v34 + 608) = 0,
                                            int v124 = *(_DWORD *)(*(void *)v34 + 608),
                                            *(_DWORD *)(*(void *)v34 + 608) = 0,
                                            *(_DWORD *)(*(void *)v34 + 608) ^= 0x3FFu,
                                            int v125 = *(_DWORD *)(*(void *)v34 + 608),
                                            *(_DWORD *)(*(void *)v34 + 608) = v124,
                                            !*v123)
                                        && !*((_DWORD *)this + 44 * v299 + 178)
                                        && !*((_DWORD *)this + 44 * v299 + 179)
                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v123, 608, 0, 0x3FFFFFFFFFFLL, 32, v125, 4), !result))
                                      {
                                        *(_DWORD *)(*(void *)v34 + 192) = 0;
                                        int v126 = *(_DWORD *)(*(void *)v34 + 192);
                                        *(_DWORD *)(*(void *)v34 + 192) = 0;
                                        *(_DWORD *)(*(void *)v34 + 192) ^= 0xFFFFFF80;
                                        int v127 = *(_DWORD *)(*(void *)v34 + 192);
                                        *(_DWORD *)(*(void *)v34 + 192) = v126;
                                        int v128 = (void *)(v293 + 8);
                                        if (!*(void *)(v293 + 8)
                                          && !*(_DWORD *)(v293 + 160)
                                          && !*(_DWORD *)(v293 + 164))
                                        {
                                          goto LABEL_360;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v293 + 8), 192, *(_DWORD *)(v293 + 60), 0xFFFFFFFFLL, 7, v127, 4);
                                        if (!result)
                                        {
LABEL_360:
                                          if ((*(_DWORD *)(*(void *)v34 + 612) = 0,
                                                int v129 = *(_DWORD *)(*(void *)v34 + 612),
                                                *(_DWORD *)(*(void *)v34 + 612) = 0,
                                                *(_DWORD *)(*(void *)v34 + 612) ^= 0x3FFu,
                                                int v130 = *(_DWORD *)(*(void *)v34 + 612),
                                                *(_DWORD *)(*(void *)v34 + 612) = v129,
                                                !*v128)
                                            && !*(_DWORD *)(v293 + 160)
                                            && !*(_DWORD *)(v293 + 164)
                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 612, *(_DWORD *)(v293 + 60), 0x3FFFFFFFFFFLL, 32, v130, 4), !result))
                                          {
                                            *(_DWORD *)(*((void *)this + 33) + 196) = 0;
                                            uint64_t v131 = *((void *)this + 33);
                                            int v132 = *(_DWORD *)(v131 + 196);
                                            *(_DWORD *)(v131 + 196) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 196) ^= 0xFFFFFF80;
                                            uint64_t v133 = *((void *)this + 33);
                                            int v134 = *(_DWORD *)(v133 + 196);
                                            *(_DWORD *)(v133 + 196) = v132;
                                            uint64_t v135 = (void *)((char *)this + 176 * v299 + 4784);
                                            if (!*v135
                                              && !*((_DWORD *)this + 44 * v299 + 1234)
                                              && !*((_DWORD *)this + 44 * v299 + 1235))
                                            {
                                              goto LABEL_361;
                                            }
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v299 + 598, 196, 0, 0xFFFFFFFFLL, 7, v134, 4);
                                            if (!result)
                                            {
LABEL_361:
                                              if ((*(_DWORD *)(*(void *)v34 + 616) = 0,
                                                    int v136 = *(_DWORD *)(*(void *)v34 + 616),
                                                    *(_DWORD *)(*(void *)v34 + 616) = 0,
                                                    *(_DWORD *)(*(void *)v34 + 616) ^= 0x3FFu,
                                                    int v137 = *(_DWORD *)(*(void *)v34 + 616),
                                                    *(_DWORD *)(*(void *)v34 + 616) = v136,
                                                    !*v135)
                                                && !*((_DWORD *)this + 44 * v299 + 1234)
                                                && !*((_DWORD *)this + 44 * v299 + 1235)
                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v135, 616, 0, 0x3FFFFFFFFFFLL, 32, v137, 4), !result))
                                              {
                                                if ((*(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                                      int v138 = *(_DWORD *)(*(void *)v34 + 200),
                                                }
                                                      *(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                      *(_DWORD *)(*(void *)v34 + 200) ^= 0xFFFFFF80,
                                                      int v139 = *(_DWORD *)(*(void *)v34 + 200),
                                                      *(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v138,
                                                      !*v128)
                                                  && !*(_DWORD *)(v293 + 160)
                                                  && !*(_DWORD *)(v293 + 164)
                                                  || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 200, *(_DWORD *)(v293 + 64), 0xFFFFFFFFLL, 7, v139, 4), !result))
                                                {
                                                  if ((*(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                                        int v140 = *(_DWORD *)(*(void *)v34 + 620),
                                                  }
                                                        *(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                        *(_DWORD *)(*(void *)v34 + 620) ^= 0x3FFu,
                                                        int v141 = *(_DWORD *)(*(void *)v34 + 620),
                                                        *(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v140,
                                                        !*v128)
                                                    && !*(_DWORD *)(v293 + 160)
                                                    && !*(_DWORD *)(v293 + 164)
                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 620, *(_DWORD *)(v293 + 64), 0x3FFFFFFFFFFLL, 32, v141, 4), !result))
                                                  {
                                                    if (*(_DWORD *)(*((void *)this + 32) + 2648) != 1) {
                                                      goto LABEL_362;
                                                    }
                                                    if ((int v142 = *(_DWORD *)(*(void *)v34 + 192),
                                                          *(_DWORD *)(*(void *)v34 + 192) = 0,
                                                          *(_DWORD *)(*(void *)v34 + 192) ^= 0xFFFFFF80,
                                                          int v143 = *(_DWORD *)(*(void *)v34 + 192),
                                                          *(_DWORD *)(*(void *)v34 + 192) = v142,
                                                          !*v128)
                                                      && !*(_DWORD *)(v293 + 160)
                                                      && !*(_DWORD *)(v293 + 164)
                                                      || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 192, *(_DWORD *)(v293 + 60), 0xFFFFFFFFLL, 7, v143, 4), !result))
                                                    {
                                                      if ((int v144 = *(_DWORD *)(*(void *)v34 + 612),
                                                            *(_DWORD *)(*(void *)v34 + 612) = 0,
                                                            *(_DWORD *)(*(void *)v34 + 612) ^= 0x3FFu,
                                                            int v145 = *(_DWORD *)(*(void *)v34 + 612),
                                                            *(_DWORD *)(*(void *)v34 + 612) = v144,
                                                            !*v128)
                                                        && !*(_DWORD *)(v293 + 160)
                                                        && !*(_DWORD *)(v293 + 164)
                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 612, *(_DWORD *)(v293 + 60), 0x3FFFFFFFFFFLL, 32, v145, 4), !result))
                                                      {
                                                        if ((int v146 = *(_DWORD *)(*(void *)v34 + 200), {
                                                              *(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                        }
                                                              *(_DWORD *)(*(void *)v34 + 200) ^= 0xFFFFFF80,
                                                              int v147 = *(_DWORD *)(*(void *)v34 + 200),
                                                              *(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v146,
                                                              !*v128)
                                                          && !*(_DWORD *)(v293 + 160)
                                                          && !*(_DWORD *)(v293 + 164)
                                                          || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 200, *(_DWORD *)(v293 + 64), 0xFFFFFFFFLL, 7, v147, 4), !result))
                                                        {
                                                          if ((int v148 = *(_DWORD *)(*(void *)v34 + 620), {
                                                                *(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                          }
                                                                *(_DWORD *)(*(void *)v34 + 620) ^= 0x3FFu,
                                                                int v149 = *(_DWORD *)(*(void *)v34 + 620),
                                                                *(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v148,
                                                                !*v128)
                                                            && !*(_DWORD *)(v293 + 160)
                                                            && !*(_DWORD *)(v293 + 164)
                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 620, *(_DWORD *)(v293 + 64), 0x3FFFFFFFFFFLL, 32, v149, 4), !result))
                                                          {
                                                            if ((int v150 = *(_DWORD *)(*(void *)v34 + 188),
                                                                  *(_DWORD *)(*(void *)v34 + 188) = 0,
                                                                  *(_DWORD *)(*(void *)v34 + 188) ^= 0xFFFFFF80,
                                                                  int v151 = *(_DWORD *)(*(void *)v34 + 188),
                                                                  *(_DWORD *)(*(void *)v34 + 188) = v150,
                                                                  !*v128)
                                                              && !*(_DWORD *)(v293 + 160)
                                                              && !*(_DWORD *)(v293 + 164)
                                                              || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 188, *(_DWORD *)(v293 + 72), 0xFFFFFFFFLL, 7, v151, 4), !result))
                                                            {
                                                              if ((int v152 = *(_DWORD *)(*(void *)v34 + 608),
                                                                    *(_DWORD *)(*(void *)v34 + 608) = 0,
                                                                    *(_DWORD *)(*(void *)v34 + 608) ^= 0x3FFu,
                                                                    int v153 = *(_DWORD *)(*(void *)v34 + 608),
                                                                    *(_DWORD *)(*(void *)v34 + 608) = v152,
                                                                    !*v128)
                                                                && !*(_DWORD *)(v293 + 160)
                                                                && !*(_DWORD *)(v293 + 164)
                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 608, *(_DWORD *)(v293 + 72), 0x3FFFFFFFFFFLL, 32, v153, 4), !result))
                                                              {
                                                                if ((int v154 = *(_DWORD *)(*(void *)v34 + 196),
                                                                      *(_DWORD *)(*(void *)v34 + 196) = 0,
                                                                      *(_DWORD *)(*(void *)v34 + 196) ^= 0xFFFFFF80,
                                                                      int v155 = *(_DWORD *)(*(void *)v34 + 196),
                                                                      *(_DWORD *)(*(void *)v34 + 196) = v154,
                                                                      !*v128)
                                                                  && !*(_DWORD *)(v293 + 160)
                                                                  && !*(_DWORD *)(v293 + 164)
                                                                  || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 196, *(_DWORD *)(v293 + 76), 0xFFFFFFFFLL, 7, v155, 4), !result))
                                                                {
                                                                  if ((int v156 = *(_DWORD *)(*(void *)v34 + 616),
                                                                        *(_DWORD *)(*(void *)v34 + 616) = 0,
                                                                        *(_DWORD *)(*(void *)v34 + 616) ^= 0x3FFu,
                                                                        int v157 = *(_DWORD *)(*(void *)v34 + 616),
                                                                        *(_DWORD *)(*(void *)v34 + 616) = v156,
                                                                        !*v128)
                                                                    && !*(_DWORD *)(v293 + 160)
                                                                    && !*(_DWORD *)(v293 + 164)
                                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 616, *(_DWORD *)(v293 + 76), 0x3FFFFFFFFFFLL, 32, v157, 4), !result))
                                                                  {
LABEL_362:
                                                                    if (*(_DWORD *)(v16 + 52) & 0x2000 | v295)
                                                                    {
                                                                      *((_DWORD *)this + v299 + 116) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 204) = 0;
                                                                      if (v295)
                                                                      {
                                                                        uint64_t v158 = 0;
                                                                        if (v290) {
                                                                          int v159 = 0x2000000;
                                                                        }
                                                                        else {
                                                                          int v159 = 0;
                                                                        }
                                                                        int v286 = v159;
                                                                        do
                                                                        {
                                                                          uint64_t v160 = *((void *)v315 + v158);
                                                                          uint64_t v161 = *(unsigned int *)(v160 + 32);
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) & 0xFFFFFFF | ((v295 << 28) - 0x10000000);
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) &= 0xF3FFFFFF;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) & 0xFDFFFFFF | v286;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) |= 0x1000000u;
                                                                          int v162 = v296 - *(_DWORD *)(v160 + 12);
                                                                          int v163 = v162 & 0x1FFFF;
                                                                          if (v162 < -32768) {
                                                                            int v163 = 98304;
                                                                          }
                                                                          if (v162 < 0x8000) {
                                                                            int v164 = v163;
                                                                          }
                                                                          else {
                                                                            int v164 = 0x7FFF;
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) & 0xFFFE0000 | v164;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) & 0xFFFDFFFF | (*(unsigned __int8 *)(v160 + 1) << 17);
                                                                          if (*(_DWORD *)(v160 + 28) == 1)
                                                                          {
                                                                            long long v313 = 0u;
                                                                            long long v314 = 0u;
                                                                            long long v311 = 0u;
                                                                            long long v312 = 0u;
                                                                            long long v309 = 0u;
                                                                            long long v310 = 0u;
                                                                            long long v307 = 0u;
                                                                            long long v308 = 0u;
                                                                            long long v305 = 0u;
                                                                            long long v306 = 0u;
                                                                            memset(buf, 0, sizeof(buf));
                                                                            int DPB = AVC_RLM::getDPB(*(void *)(*((void *)this + 32)+ 3104), buf);
                                                                            if (DPB < 1)
                                                                            {
                                                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                              int v302 = 136315138;
                                                                              }
                                                                              uint64_t v303 = "populatePictureRegisters";
                                                                              int v29 = &_os_log_internal;
                                                                              uint64_t v30 = "AppleAVD: ERROR: %s: No ref pics found!\n";
                                                                            }
                                                                            else
                                                                            {
                                                                              uint64_t v166 = DPB;
                                                                              while (v166-- >= 1)
                                                                              {
                                                                                uint64_t v160 = buf[v166];
                                                                                if (!*(_DWORD *)(v160 + 28))
                                                                                {
                                                                                  uint64_t v161 = *(unsigned int *)(v160 + 32);
                                                                                  goto LABEL_224;
                                                                                }
                                                                              }
                                                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                              int v302 = 136315138;
                                                                              }
                                                                              uint64_t v303 = "populatePictureRegisters";
                                                                              int v29 = &_os_log_internal;
                                                                              uint64_t v30 = "AppleAVD: ERROR: %s: No non-existing"
                                                                                    " ref frames found!\n";
                                                                            }
                                                                            uint64_t v31 = (uint8_t *)&v302;
                                                                            uint32_t v32 = 12;
                                                                            goto LABEL_39;
                                                                          }
LABEL_224:
                                                                          if (v290)
                                                                          {
                                                                            buf[0] = 0;
                                                                            if (!CAVDAvcDecoder::decodeGetRenderTargetRef(*((void *)this + 32), v161, *(_DWORD *)(v160 + 56), *(_DWORD *)(v160 + 64), buf))
                                                                            {
                                                                              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                              {
                                                                                LOWORD(v302) = 0;
                                                                                int v29 = &_os_log_internal;
                                                                                uint64_t v30 = "AppleAVD: decodeGetRenderTargetRef"
                                                                                      " RETURNED ERROR\n";
                                                                                uint64_t v31 = (uint8_t *)&v302;
                                                                                uint32_t v32 = 2;
LABEL_39:
                                                                                _os_log_impl(&dword_223977000, v29, OS_LOG_TYPE_DEFAULT, v30, v31, v32);
                                                                              }
                                                                              return 0xFFFFFFFFLL;
                                                                            }
                                                                            *(void *)(v160 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = buf[0] + 8;
                                                                          }
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v158
                                                                                    + 268) = 0;
                                                                          int v300 = 4 * v158;
                                                                          int v292 = 4 * v158 + 268;
                                                                          uint64_t v168 = *((void *)this + 33) + 4 * v158;
                                                                          int v169 = *(_DWORD *)(v168 + 268);
                                                                          *(_DWORD *)(v168 + 268) = 0;
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v158
                                                                                    + 268) ^= 0xFFFFFF80;
                                                                          uint64_t v170 = *((void *)this + 33) + 4 * v158;
                                                                          int v171 = *(_DWORD *)(v170 + 268);
                                                                          *(_DWORD *)(v170 + 268) = v169;
                                                                          unsigned int v294 = v161;
                                                                          int v172 = (void *)((char *)this
                                                                                          + 176 * v161
                                                                                          + 560);
                                                                          if (*v172
                                                                            || *((_DWORD *)this
                                                                               + 44 * v161
                                                                               + 178)
                                                                            || *((_DWORD *)this
                                                                               + 44 * v161
                                                                               + 179))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this+ 22 * v161+ 70, v292, 0, 0xFFFFFFFFLL, 7, v171, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 624) = 0;
                                                                          int v289 = v300 + 624;
                                                                          uint64_t v173 = *(void *)v34 + 4 * v158;
                                                                          int v174 = *(_DWORD *)(v173 + 624);
                                                                          *(_DWORD *)(v173 + 624) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 624) ^= 0x3FFu;
                                                                          uint64_t v175 = *(void *)v34 + 4 * v158;
                                                                          int v176 = *(_DWORD *)(v175 + 624);
                                                                          *(_DWORD *)(v175 + 624) = v174;
                                                                          if (*v172
                                                                            || *((_DWORD *)this
                                                                               + 44 * v161
                                                                               + 178)
                                                                            || *((_DWORD *)this
                                                                               + 44 * v161
                                                                               + 179))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this+ 22 * v161+ 70, v289, 0, 0x3FFFFFFFFFFLL, 32, v176, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 332) = 0;
                                                                          int v288 = v300 + 332;
                                                                          uint64_t v177 = *(void *)v34 + 4 * v158;
                                                                          int v178 = *(_DWORD *)(v177 + 332);
                                                                          *(_DWORD *)(v177 + 332) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 332) ^= 0xFFFFFF80;
                                                                          uint64_t v179 = *(void *)v34 + 4 * v158;
                                                                          int v180 = *(_DWORD *)(v179 + 332);
                                                                          *(_DWORD *)(v179 + 332) = v178;
                                                                          uint64_t v181 = *(void *)(v160 + 40);
                                                                          if (*(void *)v181
                                                                            || *(_DWORD *)(v181 + 152)
                                                                            || *(_DWORD *)(v181 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v181, v288, *(_DWORD *)(v181 + 52), 0xFFFFFFFFLL, 7, v180, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 688) = 0;
                                                                          int v287 = v300 + 688;
                                                                          uint64_t v182 = *(void *)v34 + 4 * v158;
                                                                          int v183 = *(_DWORD *)(v182 + 688);
                                                                          *(_DWORD *)(v182 + 688) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 688) ^= 0x3FFu;
                                                                          uint64_t v184 = *(void *)v34 + 4 * v158;
                                                                          int v185 = *(_DWORD *)(v184 + 688);
                                                                          *(_DWORD *)(v184 + 688) = v183;
                                                                          uint64_t v186 = *(void *)(v160 + 40);
                                                                          if (*(void *)v186
                                                                            || *(_DWORD *)(v186 + 152)
                                                                            || *(_DWORD *)(v186 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v186, v287, *(_DWORD *)(v186 + 52), 0x3FFFFFFFFFFLL, 32, v185, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v158
                                                                                    + 396) = 0;
                                                                          int v285 = v300 + 396;
                                                                          uint64_t v187 = *((void *)this + 33) + 4 * v158;
                                                                          int v188 = *(_DWORD *)(v187 + 396);
                                                                          *(_DWORD *)(v187 + 396) = 0;
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v158
                                                                                    + 396) ^= 0xFFFFFF80;
                                                                          uint64_t v189 = *((void *)this + 33) + 4 * v158;
                                                                          int v190 = *(_DWORD *)(v189 + 396);
                                                                          *(_DWORD *)(v189 + 396) = v188;
                                                                          int v191 = (void *)((char *)this
                                                                                          + 176 * v161
                                                                                          + 4784);
                                                                          if (*v191
                                                                            || *((_DWORD *)this + 44 * v294 + 1234)
                                                                            || *((_DWORD *)this + 44 * v294 + 1235))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v294 + 598, v285, 0, 0xFFFFFFFFLL, 7, v190, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 752) = 0;
                                                                          int v284 = v300 + 752;
                                                                          uint64_t v192 = *(void *)v34 + 4 * v158;
                                                                          int v193 = *(_DWORD *)(v192 + 752);
                                                                          *(_DWORD *)(v192 + 752) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 752) ^= 0x3FFu;
                                                                          uint64_t v194 = *(void *)v34 + 4 * v158;
                                                                          int v195 = *(_DWORD *)(v194 + 752);
                                                                          *(_DWORD *)(v194 + 752) = v193;
                                                                          if (*v191
                                                                            || *((_DWORD *)this + 44 * v294 + 1234)
                                                                            || *((_DWORD *)this + 44 * v294 + 1235))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v191, v284, 0, 0x3FFFFFFFFFFLL, 32, v195, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                          int v196 = v300 + 460;
                                                                          uint64_t v197 = *(void *)v34 + 4 * v158;
                                                                          int v198 = *(_DWORD *)(v197 + 460);
                                                                          *(_DWORD *)(v197 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 460) ^= 0xFFFFFF80;
                                                                          uint64_t v199 = *(void *)v34 + 4 * v158;
                                                                          int v200 = *(_DWORD *)(v199 + 460);
                                                                          *(_DWORD *)(v199 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v198;
                                                                          uint64_t v201 = *(void *)(v160 + 40);
                                                                          if (*(void *)v201
                                                                            || *(_DWORD *)(v201 + 152)
                                                                            || *(_DWORD *)(v201 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v201, v196, *(_DWORD *)(v201 + 56), 0xFFFFFFFFLL, 7, v200, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 816) = 0;
                                                                          int v202 = v300 + 816;
                                                                          uint64_t v203 = *(void *)v34 + 4 * v158;
                                                                          int v204 = *(_DWORD *)(v203 + 816);
                                                                          *(_DWORD *)(v203 + 816) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 816) ^= 0x3FFu;
                                                                          uint64_t v205 = *(void *)v34 + 4 * v158;
                                                                          int v206 = *(_DWORD *)(v205 + 816);
                                                                          *(_DWORD *)(v205 + 816) = v204;
                                                                          uint64_t v207 = *(void *)(v160 + 40);
                                                                          if (*(void *)v207
                                                                            || *(_DWORD *)(v207 + 152)
                                                                            || *(_DWORD *)(v207 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v207, v202, *(_DWORD *)(v207 + 56), 0x3FFFFFFFFFFLL, 32, v206, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          if (*(_DWORD *)(*((void *)this + 32)
                                                                                         + 2648) == 1)
                                                                          {
                                                                            uint64_t v208 = *(void *)v34 + 4 * v158;
                                                                            int v209 = *(_DWORD *)(v208 + 332);
                                                                            *(_DWORD *)(v208 + 332) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 332) ^= 0xFFFFFF80;
                                                                            uint64_t v210 = *(void *)v34 + 4 * v158;
                                                                            int v211 = *(_DWORD *)(v210 + 332);
                                                                            *(_DWORD *)(v210 + 332) = v209;
                                                                            uint64_t v212 = *(void *)(v160 + 40);
                                                                            if (*(void *)v212
                                                                              || *(_DWORD *)(v212 + 152)
                                                                              || *(_DWORD *)(v212 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v212, v288, *(_DWORD *)(v212 + 52), 0xFFFFFFFFLL, 7, v211, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v213 = *(void *)v34 + 4 * v158;
                                                                            int v214 = *(_DWORD *)(v213 + 688);
                                                                            *(_DWORD *)(v213 + 688) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 688) ^= 0x3FFu;
                                                                            uint64_t v215 = *(void *)v34 + 4 * v158;
                                                                            int v216 = *(_DWORD *)(v215 + 688);
                                                                            *(_DWORD *)(v215 + 688) = v214;
                                                                            uint64_t v217 = *(void *)(v160 + 40);
                                                                            if (*(void *)v217
                                                                              || *(_DWORD *)(v217 + 152)
                                                                              || *(_DWORD *)(v217 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v217, v287, *(_DWORD *)(v217 + 52), 0x3FFFFFFFFFFLL, 32, v216, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v218 = *(void *)v34 + 4 * v158;
                                                                            int v219 = *(_DWORD *)(v218 + 460);
                                                                            *(_DWORD *)(v218 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 460) ^= 0xFFFFFF80;
                                                                            uint64_t v220 = *(void *)v34 + 4 * v158;
                                                                            int v221 = *(_DWORD *)(v220 + 460);
                                                                            *(_DWORD *)(v220 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v219;
                                                                            uint64_t v222 = *(void *)(v160 + 40);
                                                                            if (*(void *)v222
                                                                              || *(_DWORD *)(v222 + 152)
                                                                              || *(_DWORD *)(v222 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v222, v196, *(_DWORD *)(v222 + 56), 0xFFFFFFFFLL, 7, v221, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v223 = *(void *)v34 + 4 * v158;
                                                                            int v224 = *(_DWORD *)(v223 + 816);
                                                                            *(_DWORD *)(v223 + 816) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 816) ^= 0x3FFu;
                                                                            uint64_t v225 = *(void *)v34 + 4 * v158;
                                                                            int v226 = *(_DWORD *)(v225 + 816);
                                                                            *(_DWORD *)(v225 + 816) = v224;
                                                                            uint64_t v227 = *(void *)(v160 + 40);
                                                                            if (*(void *)v227
                                                                              || *(_DWORD *)(v227 + 152)
                                                                              || *(_DWORD *)(v227 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v227, v202, *(_DWORD *)(v227 + 56), 0x3FFFFFFFFFFLL, 32, v226, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v228 = *(void *)v34 + 4 * v158;
                                                                            int v229 = *(_DWORD *)(v228 + 268);
                                                                            *(_DWORD *)(v228 + 268) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 268) ^= 0xFFFFFF80;
                                                                            uint64_t v230 = *(void *)v34 + 4 * v158;
                                                                            int v231 = *(_DWORD *)(v230 + 268);
                                                                            *(_DWORD *)(v230 + 268) = v229;
                                                                            uint64_t v232 = *(void *)(v160 + 40);
                                                                            if (*(void *)v232
                                                                              || *(_DWORD *)(v232 + 152)
                                                                              || *(_DWORD *)(v232 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v232, v292, *(_DWORD *)(v232 + 64), 0xFFFFFFFFLL, 7, v231, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v233 = *(void *)v34 + 4 * v158;
                                                                            int v234 = *(_DWORD *)(v233 + 624);
                                                                            *(_DWORD *)(v233 + 624) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 624) ^= 0x3FFu;
                                                                            uint64_t v235 = *(void *)v34 + 4 * v158;
                                                                            int v236 = *(_DWORD *)(v235 + 624);
                                                                            *(_DWORD *)(v235 + 624) = v234;
                                                                            uint64_t v237 = *(void *)(v160 + 40);
                                                                            if (*(void *)v237
                                                                              || *(_DWORD *)(v237 + 152)
                                                                              || *(_DWORD *)(v237 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v237, v289, *(_DWORD *)(v237 + 64), 0x3FFFFFFFFFFLL, 32, v236, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v238 = *(void *)v34 + 4 * v158;
                                                                            int v239 = *(_DWORD *)(v238 + 396);
                                                                            *(_DWORD *)(v238 + 396) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 396) ^= 0xFFFFFF80;
                                                                            uint64_t v240 = *(void *)v34 + 4 * v158;
                                                                            int v241 = *(_DWORD *)(v240 + 396);
                                                                            *(_DWORD *)(v240 + 396) = v239;
                                                                            uint64_t v242 = *(void *)(v160 + 40);
                                                                            if (*(void *)v242
                                                                              || *(_DWORD *)(v242 + 152)
                                                                              || *(_DWORD *)(v242 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v242, v285, *(_DWORD *)(v242 + 68), 0xFFFFFFFFLL, 7, v241, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v243 = *(void *)v34 + 4 * v158;
                                                                            int v244 = *(_DWORD *)(v243 + 752);
                                                                            *(_DWORD *)(v243 + 752) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 752) ^= 0x3FFu;
                                                                            uint64_t v245 = *(void *)v34 + 4 * v158;
                                                                            int v246 = *(_DWORD *)(v245 + 752);
                                                                            *(_DWORD *)(v245 + 752) = v244;
                                                                            uint64_t v247 = *(void *)(v160 + 40);
                                                                            if (*(void *)v247
                                                                              || *(_DWORD *)(v247 + 152)
                                                                              || *(_DWORD *)(v247 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v247, v284, *(_DWORD *)(v247 + 68), 0x3FFFFFFFFFFLL, 32, v246, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                          }
                                                                          ++v158;
                                                                        }
                                                                        while (v158 != v295);
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      *(_DWORD *)(v16 + 52) |= 0x2000u;
                                                                      *((_DWORD *)this + v299 + 116) = 1;
                                                                      *(_DWORD *)(*((void *)this + 33) + 204) = 0;
                                                                    }
                                                                    *(_DWORD *)(*(void *)v34 + 524) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 88pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 528) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 884) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 532) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 536) = 0;
                                                                    if (v297)
                                                                    {
                                                                      uint64_t v248 = *((void *)this + 32);
                                                                      unsigned int v249 = *(unsigned __int8 *)(v248 + 3004);
                                                                      if (*(unsigned char *)(v248 + 3004))
                                                                      {
                                                                        unsigned int v249 = *(_DWORD *)(v248 + 3016);
                                                                        unsigned int v298 = *(_DWORD *)(v248 + 3020);
                                                                      }
                                                                      else
                                                                      {
                                                                        unsigned int v298 = 0;
                                                                      }
                                                                      uint64_t v250 = *(void *)(v248 + 3656);
                                                                      uint64_t v301 = *(unsigned int *)(v250 + 56);
                                                                      unint64_t v251 = *(unsigned int *)(v250 + 52)
                                                                           + (unint64_t)v249;
                                                                      uint64_t v252 = *((void *)this + 33);
                                                                      int v253 = *(_DWORD *)(v252 + 524);
                                                                      *(_DWORD *)(v252 + 524) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 524) ^= 0xFFFFFFC0;
                                                                      uint64_t v254 = *((void *)this + 33);
                                                                      int v255 = *(_DWORD *)(v254 + 524);
                                                                      *(_DWORD *)(v254 + 524) = v253;
                                                                      uint64_t v256 = *(void *)(*((void *)this + 32) + 3656);
                                                                      unint64_t v257 = HIDWORD(v251);
                                                                      if (*(void *)v256
                                                                        || *(_DWORD *)(v256 + 152)
                                                                        || *(_DWORD *)(v256 + 156))
                                                                      {
                                                                        if (v257
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1288;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v256, 524, v251, 0xFFFFFFFFLL, 6, v255, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      uint64_t v258 = *((void *)this + 33);
                                                                      int v259 = *(_DWORD *)(v258 + 880);
                                                                      *(_DWORD *)(v258 + 88pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 880) ^= 0x3FFu;
                                                                      uint64_t v260 = *((void *)this + 33);
                                                                      int v261 = *(_DWORD *)(v260 + 880);
                                                                      *(_DWORD *)(v260 + 88pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v259;
                                                                      uint64_t v262 = *(void *)(*((void *)this + 32) + 3656);
                                                                      if (*(void *)v262
                                                                        || *(_DWORD *)(v262 + 152)
                                                                        || *(_DWORD *)(v262 + 156))
                                                                      {
                                                                        if (v257
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1290;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v262, 880, v251, 0x3FFFFFFFFFFLL, 32, v261, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      unint64_t v263 = v301 + v298;
                                                                      uint64_t v264 = *((void *)this + 33);
                                                                      int v265 = *(_DWORD *)(v264 + 528);
                                                                      *(_DWORD *)(v264 + 528) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 528) ^= 0xFFFFFFC0;
                                                                      uint64_t v266 = *((void *)this + 33);
                                                                      int v267 = *(_DWORD *)(v266 + 528);
                                                                      *(_DWORD *)(v266 + 528) = v265;
                                                                      uint64_t v268 = *(void *)(*((void *)this + 32) + 3656);
                                                                      unint64_t v269 = HIDWORD(v263);
                                                                      if (*(void *)v268
                                                                        || *(_DWORD *)(v268 + 152)
                                                                        || *(_DWORD *)(v268 + 156))
                                                                      {
                                                                        if (v269
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1293;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v268, 528, v263, 0xFFFFFFFFLL, 6, v267, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      uint64_t v270 = *((void *)this + 33);
                                                                      int v271 = *(_DWORD *)(v270 + 884);
                                                                      *(_DWORD *)(v270 + 884) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 884) ^= 0x3FFu;
                                                                      uint64_t v272 = *((void *)this + 33);
                                                                      int v273 = *(_DWORD *)(v272 + 884);
                                                                      *(_DWORD *)(v272 + 884) = v271;
                                                                      uint64_t v274 = *(void *)(*((void *)this + 32) + 3656);
                                                                      if (*(void *)v274
                                                                        || *(_DWORD *)(v274 + 152)
                                                                        || *(_DWORD *)(v274 + 156))
                                                                      {
                                                                        if (v269
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1295;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v274, 884, v263, 0x3FFFFFFFFFFLL, 32, v273, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      if (v70)
                                                                      {
                                                                        *(_DWORD *)(*((void *)this + 33) + 532) = *(_DWORD *)(*((void *)this + 33) + 532) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 76) >> 6) & 0xFFF) << 6);
                                                                        uint64_t v275 = (_DWORD *)(*(void *)(*((void *)this + 32) + 3656)
                                                                                        + 80);
                                                                      }
                                                                      else
                                                                      {
                                                                        if (CAHDecClaryAvc::getSWRStride(this, *(unsigned __int16 *)(v16 + 84)- *(unsigned __int16 *)(v16 + 80)+ 1, *(unsigned __int8 *)(v5 + 2224 * v3 + 6), *(unsigned __int8 *)(v5 + 2224 * v3 + 7), *(_DWORD *)(v5 + 2224 * v3 + 2212)))return 0xFFFFFFFFLL; {
                                                                        *(_DWORD *)(*((void *)this + 33) + 532) = *(_DWORD *)(*((void *)this + 33) + 532) & 0xFFFC003F | (((*((_DWORD *)this + 2964) >> 6) & 0xFFF) << 6);
                                                                        }
                                                                        uint64_t v275 = (_DWORD *)((char *)this + 11860);
                                                                      }
                                                                      *(_DWORD *)(*(void *)v34 + 536) = *(_DWORD *)(*(void *)v34 + 536) & 0xFFF8003F | (((*v275 >> 6) & 0x1FFF) << 6);
                                                                    }
                                                                    uint64_t v276 = *((void *)this + 32);
                                                                    if (*(_DWORD *)(v276 + 2360) != 1) {
                                                                      return 0;
                                                                    }
                                                                    uint64_t v277 = *(void *)v34;
                                                                    *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFFE | *(_DWORD *)(v276 + 2508) & 1;
                                                                    if (*(_DWORD *)(v276 + 2508))
                                                                    {
                                                                      *(_DWORD *)(v277 + 196pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x10000000;
                                                                      *(_DWORD *)(v277 + 1964) = *(_DWORD *)(v276 + 2368);
                                                                      *(_DWORD *)(v277 + 1976) = 0;
                                                                      *(void *)(v277 + 1968) = 0;
                                                                      *(_OWORD *)(v277 + 198pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v276 + 2372);
                                                                      long long v278 = *(_OWORD *)(v276 + 2404);
                                                                      *(_OWORD *)(v277 + 1996) = *(_OWORD *)(v276 + 2388);
                                                                      *(_OWORD *)(v277 + 2012) = v278;
                                                                    }
                                                                    *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v276 + 2512) & 1));
                                                                    if (*(_DWORD *)(v276 + 2512))
                                                                    {
                                                                      *(_DWORD *)(v277 + 2028) = 0;
                                                                      char v279 = *(_DWORD *)(v276 + 2424);
                                                                      *(_DWORD *)(v277 + 2028) = (*(_DWORD *)(v276 + 2424) & 1) << 22;
                                                                      int v280 = ((*(_DWORD *)(v276 + 2420) & 1) << 23) | ((v279 & 1) << 22) | 0x20000000;
                                                                      *(_DWORD *)(v277 + 2028) = v280;
                                                                      *(_DWORD *)(v277 + 2028) = v280 | (*(_DWORD *)(v276 + 2364) == 0);
                                                                      long long v281 = *(_OWORD *)(v276 + 2428);
                                                                      long long v282 = *(_OWORD *)(v276 + 2444);
                                                                      *(_OWORD *)(v277 + 2064) = *(_OWORD *)(v276 + 2460);
                                                                      *(_OWORD *)(v277 + 2048) = v282;
                                                                      *(_OWORD *)(v277 + 2032) = v281;
                                                                    }
                                                                    *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v276 + 2516) & 1));
                                                                    *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v276 + 2520) & 1));
                                                                    *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v276 + 2524) & 1));
                                                                    if (*(_DWORD *)(v276 + 2516))
                                                                    {
                                                                      *(_DWORD *)(v277 + 2084) = 0;
                                                                      if (*(_DWORD *)(v276 + 2476) == 2) {
                                                                        int v283 = 805306368;
                                                                      }
                                                                      else {
                                                                        int v283 = 813694976;
                                                                      }
                                                                      *(_DWORD *)(v277 + 2084) = v283;
                                                                      memcpy((void *)(v277 + 2088), (const void *)(v276 + 2480), 4 * *(unsigned int *)(v276 + 2476));
                                                                      uint64_t result = 0;
                                                                      *(_DWORD *)(v276 + 2516) = 0;
                                                                    }
                                                                    else
                                                                    {
                                                                      return 0;
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecClaryAvc::getSWRStride(CAHDecClaryAvc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1482) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 2964) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 2964) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 2964) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 2964) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 2965) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        uint64_t v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecClaryAvc::getTileStartCTU(CAHDecClaryAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 888);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecClaryAvc::getTileEndCTU(CAHDecClaryAvc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 888);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecClaryAvc::getTileIdxAbove(CAHDecClaryAvc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 888);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecClaryAvc::populateAvdWork(CAHDecClaryAvc *this, unsigned int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v4 = *(void *)(v3 + 3312);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 7500);
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    long long v9 = (int *)(v2 + 3040);
    long long v10 = (int *)(v4 + 20);
    __int16 v22 = a2;
    uint64_t v11 = 44 * a2;
    uint64_t v12 = v2 + 956 * v5;
    while (1)
    {
      uint64_t v13 = v12 + v7;
      *(_WORD *)(v13 + 2108) = v8;
      *(_WORD *)(v13 + 211pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_WORD *)(v13 + 2112) = v8;
      *(_DWORD *)(v12 + v7 + 2114) = 0;
      int v14 = *v9;
      if (!CAVDAvcDecoder::GetSDataMemInfo(*((void *)this + 32), v8, &v24, &v23)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = *v10;
      *(_DWORD *)(v13 + 2136) = *v10;
      *(_DWORD *)(v13 + 214pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v15;
      *(_DWORD *)(v13 + 2144) = 0;
      if (v7) {
        __int16 v16 = 0;
      }
      else {
        __int16 v16 = 15;
      }
      *(_WORD *)(v13 + 2118) = v16;
      uint64_t v17 = v24;
      if (*(void *)v24 || *(_DWORD *)(v24 + 152) || *(_DWORD *)(v24 + 156))
      {
        int v18 = v23;
        if (HIDWORD(v23) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          int v26 = "populateAvdWork";
          __int16 v27 = 1024;
          int v28 = 1941;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
          int v18 = v23;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 575726, v18, 0x3FFFFFFFFFFLL, 32, -1, 2);
        if (result) {
          return result;
        }
        uint64_t v17 = v24;
        if (*(void *)v24) {
          goto LABEL_17;
        }
      }
      if (*(_DWORD *)(v17 + 152) || *(_DWORD *)(v17 + 156))
      {
LABEL_17:
        int v20 = v23;
        if (HIDWORD(v23))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            int v26 = "populateAvdWork";
            __int16 v27 = 1024;
            int v28 = 1942;
            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v20 = v23;
          }
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v17, (int)v7 + 575728, v20, 0xFFFFFFFFLL, 0, -1, 4);
        if (result) {
          return result;
        }
      }
      v9 += 239;
      *(_DWORD *)(v12 + v7 + 2132) = v14;
      ++v8;
      v7 += 44;
      v10 += 462;
      if (v11 == v7)
      {
        uint64_t v2 = *((void *)this + 33);
        __int16 v21 = v22;
        goto LABEL_24;
      }
    }
  }
  else
  {
    __int16 v21 = 0;
LABEL_24:
    uint64_t result = 0;
    *(_WORD *)(v2 + 28) = v21;
    *(_DWORD *)(v2 + 32) = 575704;
  }
  return result;
}

uint64_t CAHDecClaryAvc::allocWorkBuf_SPS(CAHDecClaryAvc *this, unsigned char *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v3 = a2[4];
  unsigned int v4 = *((unsigned __int16 *)a2 + 779);
  int v5 = 16 * v4;
  unsigned int v6 = *((unsigned __int16 *)a2 + 780);
  unsigned int v7 = 32 - __clz(((16 * v4 + 47) >> 5) - 1);
  if (v4 < 2) {
    LOBYTE(v7) = 0;
  }
  unsigned int v8 = 32 - __clz(((16 * v6 + 47) >> 5) - 1);
  if (v6 < 2) {
    LOBYTE(v8) = 0;
  }
  unsigned int v9 = ((32 << (v8 + v7)) + 127) & 0xFFFFFF80;
  if (a2[4])
  {
    unsigned int v10 = (v5 + 16) << (v3 == 3);
    unsigned int v11 = ((((16 * v6 + 16) | (v3 == 1)) >> (v3 == 1)) + 15) >> 4;
    if (v10 > 0x20)
    {
      unsigned int v12 = 32 - __clz(((v10 + 31) >> 5) - 1);
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  LOBYTE(v12) = 0;
LABEL_10:
  unsigned int v13 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  unsigned int v15 = ((8 << (v14 + v12)) + 127) & 0xFFFFFF80;
  if (a2[4]) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = 0;
  }
  *((_DWORD *)this + 2956) = v9;
  *((_DWORD *)this + 2957) = v16;
  *((void *)this + 1479) = 0;
  int v17 = (v4 << 6) + 64;
  *((_DWORD *)this + 2962) = v17;
  unsigned int v18 = v17 + v17 * v6;
  *((_DWORD *)this + 2961) = v18;
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    uint64_t v19 = 24;
    int v20 = this;
    while (1)
    {
      uint64_t v21 = *((unsigned int *)this + 2956);
      if (v21
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 35, v21, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_34;
        }
        int v27 = 136315650;
        int v28 = "allocWorkBuf_SPS";
        __int16 v29 = 1024;
        int v30 = 2183;
        __int16 v31 = 2080;
        uint32_t v32 = "HdrY";
        BOOL v25 = &_os_log_internal;
        goto LABEL_33;
      }
      uint64_t v22 = *((unsigned int *)this + 2957);
      if (v22)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)v20 + 299, v22, 7, 1, 0)) {
          break;
        }
      }
      int v20 = (CAHDecClaryAvc *)((char *)v20 + 176);
      if (!--v19)
      {
        unsigned int v18 = *((_DWORD *)this + 2961);
        goto LABEL_24;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    int v27 = 136315650;
    int v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2184;
    __int16 v31 = 2080;
    uint32_t v32 = "HdrC";
    BOOL v25 = &_os_log_internal;
    goto LABEL_33;
  }
LABEL_24:
  int v23 = (*MEMORY[0x263EF8AD0] + v18) & ~*MEMORY[0x263EF8AD0];
  *((_DWORD *)this + 2961) = v23;
  uint64_t v24 = (24 * v23);
  if (!v24
    || !CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 728, v24, 7, 1, 32))
  {
    uint64_t result = 0;
    *((_DWORD *)this + 2966) = 0;
    *((_DWORD *)this + 2967) = v5 | (v6 << 20) | 0xF000F;
    return result;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 136315650;
    int v28 = "allocWorkBuf_SPS";
    __int16 v29 = 1024;
    int v30 = 2202;
    __int16 v31 = 2080;
    uint32_t v32 = "MvColo";
    BOOL v25 = &_os_log_internal;
LABEL_33:
    _os_log_impl(&dword_223977000, v25, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v27, 0x1Cu);
  }
LABEL_34:
  (*(void (**)(CAHDecClaryAvc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecClaryAvc::allocWorkBuf_PPS(CAHDecClaryAvc *this, unsigned char *a2, void *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = 16 * *((unsigned __int16 *)a2 + 779);
  if (((a2[6] + 9) & 0x1FEu) <= ((a2[7] + 9) & 0x1FEu)) {
    int v6 = (a2[7] + 9) & 0x1FE;
  }
  else {
    int v6 = (a2[6] + 9) & 0x1FE;
  }
  int v7 = a2[4];
  if (v7 == 3) {
    int v8 = 48;
  }
  else {
    int v8 = 32;
  }
  if (v7 == 3) {
    int v9 = 192;
  }
  else {
    int v9 = 128;
  }
  if (a2[4]) {
    int v10 = v8;
  }
  else {
    int v10 = 16;
  }
  if (a2[4]) {
    int v11 = v9;
  }
  else {
    int v11 = 64;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 651, 4 * (((unint64_t)(v5 + 16) >> 2) + ((unint64_t)(v5 + 16) >> 4)), 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
LABEL_20:
      (*(void (**)(CAHDecClaryAvc *, void))(*(void *)this + 152))(this, 0);
      return 0xFFFFFFFFLL;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2325;
    __int16 v21 = 2080;
    uint64_t v22 = "AvpAboveInfo";
    unsigned int v12 = &_os_log_internal;
LABEL_19:
    _os_log_impl(&dword_223977000, v12, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v17, 0x1Cu);
    goto LABEL_20;
  }
  unsigned int v14 = (v5 + 31) >> 4;
  uint64_t v15 = ((v6 * v10) >> 3) * v14;
  if (v15 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 662, v15, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2329;
    __int16 v21 = 2080;
    uint64_t v22 = "IpAbove";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t v16 = ((v6 * v11) >> 3) * v14;
  if (v16 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 673, v16, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2330;
    __int16 v21 = 2080;
    uint64_t v22 = "LfAbovePix";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 684, 32 * v14, 7, 1, 0))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2331;
    __int16 v21 = 2080;
    uint64_t v22 = "LfAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 640, 32 * v14, 7, 1, 0);
  if (result)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v17 = 136315650;
    unsigned int v18 = "allocWorkBuf_PPS";
    __int16 v19 = 1024;
    int v20 = 2334;
    __int16 v21 = 2080;
    uint64_t v22 = "MvAboveInfo";
    unsigned int v12 = &_os_log_internal;
    goto LABEL_19;
  }
  return result;
}

uint64_t CAHDecClaryAvc::freeWorkBuf_SPS(CAHDecClaryAvc *this)
{
  uint64_t v2 = 24;
  int v3 = this;
  do
  {
    uint64_t result = *((void *)this + 32);
    if (!*(_DWORD *)(result + 2648))
    {
      if (*((void *)v3 + 70))
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(result, (uint64_t *)v3 + 70);
        *((void *)v3 + 7pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      }
      if (*((void *)v3 + 598))
      {
        uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)v3 + 598);
        *((void *)v3 + 598) = 0;
      }
    }
    int v3 = (CAHDecClaryAvc *)((char *)v3 + 176);
    --v2;
  }
  while (v2);
  if (*((void *)this + 1456))
  {
    uint64_t result = CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 1456);
    *((void *)this + 1456) = 0;
  }
  return result;
}

uint64_t *CAHDecClaryAvc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  if (this[1302])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1302);
    v2[1302] = 0;
  }
  if (v2[1324])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1324);
    v2[1324] = 0;
  }
  if (v2[1280])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1280);
    v2[1280] = 0;
  }
  if (v2[1346])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1346);
    v2[1346] = 0;
  }
  if (v2[1368])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1368);
    v2[1368] = 0;
  }
  if (v2[1390])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1390);
    v2[1390] = 0;
  }
  if (v2[1412])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1412);
    v2[1412] = 0;
  }
  if (v2[1434])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1434);
    v2[1434] = 0;
  }
  return this;
}

uint64_t CAHDecClaryAvc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 9008;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 1184pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = a2;
  return this;
}

uint64_t CAHDecClaryAvc::decodeBuffer(CAHDecClaryAvc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecClaryAvc::decodeBufferSize(CAHDecClaryAvc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecClaryAvc::decHdrYLinAddr(CAHDecClaryAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 70);
}

uint64_t CAHDecClaryAvc::decHdrCLinAddr(CAHDecClaryAvc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 598);
}

uint64_t CAHDecClaryAvc::decHdrYSize(CAHDecClaryAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 151);
}

uint64_t CAHDecClaryAvc::decHdrCSize(CAHDecClaryAvc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 1207);
}

uint64_t CAHDecClaryAvc::decHdrYStride(CAHDecClaryAvc *this)
{
  return *((unsigned int *)this + 2958);
}

uint64_t CAHDecClaryAvc::decHdrCStride(CAHDecClaryAvc *this)
{
  return *((unsigned int *)this + 2959);
}

CAHDecClaryHevc *createClaryHevcDecoder(CAVDHevcDecoder *a1)
{
  uint64_t v2 = (CAHDecClaryHevc *)operator new(0x2E38uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecClaryHevc::CAHDecClaryHevc(v2, a1);
  }
  return v3;
}

void sub_2239DCCB0(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecClaryHevc::CAHDecClaryHevc(CAHDecClaryHevc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73F248;
  *(_DWORD *)(v1 + 456) = 420332;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = 0;
  *(void *)(v1 + 272) = 0;
}

void CAHDecClaryHevc::CAHDecClaryHevc(CAHDecClaryHevc *this, CAVDHevcDecoder *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73F248;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 420332;
  *(_DWORD *)(v4 + 8) = 2924;
  *(_OWORD *)(v4 + 16) = xmmword_223AD0620;
  *(_DWORD *)(v4 + 32) = 2;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 420332, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      int v7 = "CAHDecClaryHevc";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v6, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
  }
  else
  {
    uint64_t v5 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v5;
    *((void *)this + 34) = v5;
    bzero((char *)this + 528, 0x2C00uLL);
  }
}

void sub_2239DCE70(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecClaryHevc::~CAHDecClaryHevc(CAHDecClaryHevc *this)
{
  *(void *)this = &unk_26D73F248;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecClaryHevc::~CAHDecClaryHevc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecClaryHevc::initPicture(CAHDecClaryHevc *this, int a2, __int16 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 114) = 420332;
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v4;
  if (v4)
  {
    bzero(v4, 0x669ECuLL);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v7 + 16) = a2;
    *(_WORD *)(v7 + 24) = 257;
    *(_WORD *)(v7 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 2955) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "initPicture";
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v9, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecClaryHevc::populateSlices(CAHDecClaryHevc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2924;
    uint64_t v5 = a2;
    do
    {
      CAHDecClaryHevc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 368;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecClaryHevc::populateSliceRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 256);
  int v6 = *(_DWORD *)(v5 + 8320);
  int v7 = *(_DWORD *)(v5 + 8324);
  uint64_t v8 = *(void *)(v5 + 8288);
  uint64_t v9 = *(void *)(v5 + 8280);
  uint64_t v10 = *(void *)(v5 + 8296);
  int v11 = a3;
  uint64_t v12 = v9 + 23176 * v6;
  *(_DWORD *)(a1 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 6 * *(_DWORD *)(v12 + 3636);
  LODWORD(v12) = *(_DWORD *)(v12 + 22880);
  *(_DWORD *)(a2 + 352) = 0x1000000;
  uint64_t v13 = v10 + 2360 * (int)a3;
  unsigned int v14 = (((*(_DWORD *)(v13 + 36) / v12) & 0xFFF) << 12) | 0x1000000;
  *(_DWORD *)(a2 + 352) = v14;
  *(_DWORD *)(a2 + 352) = v14 & 0xFFFFF000 | (*(_DWORD *)(v13 + 36) % v12) & 0xFFF;
  *(_DWORD *)(a2 + 4) = 0;
  char v15 = *(unsigned char *)(v8 + 9856 * v7 + 6477);
  if (v15) {
    char v15 = *(unsigned char *)(v10 + 2360 * (int)a3 + 1880);
  }
  int v16 = v15 & 1;
  *(_DWORD *)(a2 + 4) = v16;
  uint64_t v17 = v10 + 2360 * (int)a3;
  int v19 = *(_DWORD *)(v17 + 44);
  unsigned int v18 = (int *)(v17 + 44);
  if (v19 == 2) {
    LOBYTE(v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  else {
    int v20 = 5 - *(_DWORD *)(v10 + 2360 * (int)a3 + 1864);
  }
  unsigned int v21 = v16 & 0xFFFFFFF1 | (2 * (v20 & 7));
  *(_DWORD *)(a2 + 4) = v21;
  if (*v18)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *(unsigned __int8 *)(v10 + 2360 * (int)a3 + 616);
    if (*(unsigned char *)(v10 + 2360 * (int)a3 + 616)) {
      int v22 = *(unsigned char *)(v10 + 2360 * (int)a3 + 762) == 0;
    }
  }
  int v23 = v21 | (16 * v22);
  *(_DWORD *)(a2 + 4) = v23;
  if (*v18 == 2)
  {
    char v24 = 0;
  }
  else
  {
    char v24 = *(unsigned char *)(v8 + 9856 * v7 + 17);
    if (v24) {
      char v24 = *(unsigned char *)(v10 + 2360 * (int)a3 + 761);
    }
  }
  unsigned int v25 = v23 & 0xFFFFFFDF | (32 * (v24 & 1));
  *(_DWORD *)(a2 + 4) = v25;
  if (*v18) {
    int v26 = 0;
  }
  else {
    int v26 = *(unsigned char *)(v10 + 2360 * (int)a3 + 760) == 0;
  }
  char v27 = 0;
  int v28 = v25 | (v26 << 6);
  *(_DWORD *)(a2 + 4) = v28;
  uint64_t v29 = v10 + 2360 * (int)a3;
  int v30 = (*(_DWORD *)(v29 + 624) & 0xF) << 7;
  if (*(_DWORD *)(v29 + 624) == -1) {
    int v30 = 0;
  }
  int v31 = v30 | v28;
  *(_DWORD *)(a2 + 4) = v31;
  int v32 = (*(_DWORD *)(v29 + 620) & 0xF) << 11;
  if (*(_DWORD *)(v29 + 620) == -1) {
    int v32 = 0;
  }
  int v33 = v31 | v32;
  *(_DWORD *)(a2 + 4) = v33;
  if (*v18 != 2)
  {
    char v27 = *(unsigned char *)(v9 + 23176 * v6 + 22284);
    if (v27) {
      char v27 = *(unsigned char *)(v10 + 2360 * (int)a3 + 616);
    }
  }
  uint64_t v133 = v9;
  int v134 = v6;
  unsigned int v34 = v33 & 0xFFFF7FFF | ((v27 & 1) << 15);
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a2 + 4) = v34 & 0xFFFCFFFF | ((*v18 & 3) << 16);
  *(_DWORD *)(a2 + 336) = 0;
  if (*v18 <= 1)
  {
    if (*(void *)(v10 + 2360 * (int)a3 + 2344))
    {
      if (!*(_DWORD *)(a1 + 11820))
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 256) + 344))(*(void *)(a1 + 256), a3);
        uint64_t v4 = a1;
        uint64_t v35 = *(void *)(a1 + 256);
        if (!*(_DWORD *)(v35 + 9032))
        {
          *(_DWORD *)(a1 + 1182pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1;
          *(_DWORD *)(a2 + 4) |= 0x40000u;
          int v132 = 368 * a3;
          if (*(void *)(v35 + 8856) || *(_DWORD *)(v35 + 9008) || *(_DWORD *)(v35 + 9012))
          {
            uint64_t result = CAHDec::addToPatcherList(a1, (void *)(v35 + 8856), v132 + 3260, 0, 0xFFFFFFFFLL, 8, -256, 4);
            int v132 = 368 * a3;
            uint64_t v4 = a1;
            if (result) {
              return result;
            }
            if (*(void *)(v35 + 8856)) {
              goto LABEL_136;
            }
          }
          if (*(_DWORD *)(v35 + 9008) || *(_DWORD *)(v35 + 9012))
          {
LABEL_136:
            uint64_t result = CAHDec::addToPatcherList(v4, (void *)(v35 + 8856), v132 + 3288, 0, 0x3FFFFFFFFFFLL, 32, 1023, 4);
            uint64_t v4 = a1;
            if (result) {
              return result;
            }
          }
        }
      }
    }
  }
  int v36 = (unsigned int *)(v29 + 624);
  int v37 = (unsigned int *)(v29 + 620);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
  (*(void (**)(void, void))(**(void **)(v4 + 256) + 352))(*(void *)(v4 + 256), 0);
  if (*v18 <= 1)
  {
    uint64_t v38 = v5 + 8456;
    if ((*v37 & 0x80000000) != 0)
    {
      uint64_t v40 = 0;
      if (*v18) {
        goto LABEL_38;
      }
    }
    else
    {
      int v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = a2 + 8;
      do
      {
        uint64_t v42 = v40;
        *(_DWORD *)(v41 + 4 * v4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v39 & 0xF0 | 0x2DC00000;
        *(_DWORD *)(v41 + 4 * v4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v39 & 0xF0 | 0x2DC00000 | *(_DWORD *)(v38 + 4 * v40) & 0xF;
        ++v40;
        v39 += 16;
      }
      while (v42 < (int)*v37);
      if (*v18) {
        goto LABEL_38;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 256) + 352))(*(void *)(a1 + 256), 1, a3);
    if ((*v36 & 0x80000000) == 0)
    {
      int v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = a2 + 4 * v40 + 8;
      do
      {
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100;
        *(_DWORD *)(v45 + 4 * v44) = v43 & 0xF0 | 0x2DC00100 | *(_DWORD *)(v38 + 4 * v44) & 0xF;
        v43 += 16;
      }
      while (v44++ < (int)*v36);
    }
  }
LABEL_38:
  *(void *)(a2 + 128) = 0x2DD0000000000000;
  int v47 = *v18;
  if (*v18)
  {
    uint64_t v48 = a1;
    uint64_t v50 = v133;
    int v49 = v134;
    if (v47 != 1 || !*(unsigned char *)(v8 + 9856 * v7 + 49)) {
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v48 = a1;
    uint64_t v50 = v133;
    int v49 = v134;
    if (!*(unsigned char *)(v8 + 9856 * v7 + 50)) {
      goto LABEL_62;
    }
  }
  unsigned int v51 = 0;
  unsigned int v52 = 0;
  uint64_t v53 = v10 + 2360 * v11;
  uint64_t v54 = v8 + 9856 * v7;
  uint64_t v55 = (unsigned char *)(v54 + 50);
  int v56 = (unsigned char *)(v54 + 49);
  if (v47) {
    uint64_t v57 = v56;
  }
  else {
    uint64_t v57 = v55;
  }
  int v58 = ((*v57 & 1) << 6) | 0x2DD00000;
  *(_DWORD *)(a2 + 132) = v58;
  char v59 = *(_DWORD *)(v53 + 768);
  unsigned int v60 = v58 & 0xFFFFFFC7 | (8 * (*(_DWORD *)(v53 + 768) & 7));
  *(_DWORD *)(a2 + 132) = v60;
  unsigned __int8 v61 = (*(_DWORD *)(v53 + 772) + *(_DWORD *)(v53 + 768)) & 7;
  *(_DWORD *)(a2 + 132) = v60 & 0xFFFFFFF8 | v61;
  int v62 = 1 << (v59 & 7);
  int v63 = 1 << v61;
  do
  {
    uint64_t v64 = v51;
    if (*(unsigned char *)(v10 + 2360 * v11 + v51 + 776))
    {
      int v65 = ((v51 & 0xF) << 9) | 0x2DE04000;
      uint64_t v66 = a2 + 4 * v52;
      *(_DWORD *)(v66 + 136) = v65;
      uint64_t v67 = v10 + 2360 * v11 + 4 * v64;
      *(_DWORD *)(v66 + 136) = ((unsigned __int16)*(_DWORD *)(v67 + 808) + (_WORD)v62) & 0x1FF | v65;
      *(_DWORD *)(v66 + 232) = 770703360;
      *(_DWORD *)(v66 + 232) = *(unsigned __int16 *)(v67 + 872) | 0x2DF00000;
      ++v52;
    }
    if (*(unsigned char *)(v10 + 2360 * v11 + v64 + 792))
    {
      uint64_t v68 = 0;
      char v69 = 1;
      do
      {
        char v70 = v69;
        int v71 = ((v64 & 0xF) << 9) | (v68 << 14) | 0x2DE08000;
        uint64_t v72 = a2 + 4 * v52;
        *(_DWORD *)(v72 + 136) = v71;
        uint64_t v73 = v10 + 2360 * v11 + 8 * v64 + 4 * v68;
        *(_DWORD *)(v72 + 136) = ((unsigned __int16)*(_DWORD *)(v73 + 936) + (_WORD)v63) & 0x1FF | v71;
        *(_DWORD *)(v72 + 232) = 770703360;
        *(_DWORD *)(v72 + 232) = *(unsigned __int16 *)(v73 + 1608) | 0x2DF00000;
        ++v52;
        uint64_t v68 = 1;
        char v69 = 0;
      }
      while ((v70 & 1) != 0);
    }
    unsigned int v51 = v64 + 1;
  }
  while ((int)v64 + 1 <= *v37);
  if (!*v18)
  {
    unsigned int v74 = 0;
    do
    {
      uint64_t v75 = v74;
      if (*(unsigned char *)(v10 + 2360 * v11 + v74 + 1192))
      {
        int v76 = ((v74 & 0xF) << 9) | 0x2DE06000;
        uint64_t v77 = a2 + 4 * v52;
        *(_DWORD *)(v77 + 136) = v76;
        uint64_t v78 = v10 + 2360 * v11 + 4 * v75;
        *(_DWORD *)(v77 + 136) = ((unsigned __int16)*(_DWORD *)(v78 + 1224) + (_WORD)v62) & 0x1FF | v76;
        *(_DWORD *)(v77 + 232) = 770703360;
        *(_DWORD *)(v77 + 232) = *(unsigned __int16 *)(v78 + 1288) | 0x2DF00000;
        ++v52;
      }
      if (*(unsigned char *)(v10 + 2360 * v11 + v75 + 1208))
      {
        uint64_t v79 = 0;
        char v80 = 1;
        do
        {
          char v81 = v80;
          int v82 = ((v75 & 0xF) << 9) | (v79 << 14) | 0x2DE0A000;
          uint64_t v83 = a2 + 4 * v52;
          *(_DWORD *)(v83 + 136) = v82;
          uint64_t v84 = v10 + 2360 * v11 + 8 * v75 + 4 * v79;
          *(_DWORD *)(v83 + 136) = ((unsigned __int16)*(_DWORD *)(v84 + 1352) + (_WORD)v63) & 0x1FF | v82;
          *(_DWORD *)(v83 + 232) = 770703360;
          *(_DWORD *)(v83 + 232) = *(unsigned __int16 *)(v84 + 1736) | 0x2DF00000;
          ++v52;
          uint64_t v79 = 1;
          char v80 = 0;
        }
        while ((v81 & 1) != 0);
      }
      unsigned int v74 = v75 + 1;
    }
    while ((int)v75 + 1 <= *v36);
  }
  *(_DWORD *)(a2 + 128) = v52;
LABEL_62:
  uint64_t v85 = v8 + 9856 * v7;
  int v88 = *(unsigned __int8 *)(v85 + 48);
  int v86 = (unsigned __int8 *)(v85 + 48);
  LOBYTE(v87) = v88;
  if (v88) {
    int v87 = *(_DWORD *)(v10 + 2360 * v11 + 1876);
  }
  unsigned int v89 = *(_DWORD *)(a2 + 328) & 0xFFFFFFE0 | ((_BYTE)v87 + *((_DWORD *)v86 - 1)) & 0x1F;
  *(_DWORD *)(a2 + 328) = v89;
  int v90 = *v86;
  if (v90) {
    int v90 = *(_DWORD *)(v10 + 2360 * v11 + 1872);
  }
  unsigned int v91 = v89 & 0xFFFFFC1F | (32 * (((_BYTE)v90 + *(_DWORD *)(v8 + 9856 * v7 + 40)) & 0x1F));
  *(_DWORD *)(a2 + 328) = v91;
  int v92 = (_DWORD *)(v8 + 9856 * v7);
  int v93 = v92[7] + *(_DWORD *)(v10 + 2360 * v11 + 1868) + 26;
  *(_DWORD *)(a2 + 328) = v91 & 0xE03FF | ((v93 & 0x7F) << 10) | 0x2D900000;
  *(_DWORD *)(*(void *)(v48 + 256) + 2868) = *(_DWORD *)(v48 + 460) + (v93 << 25 >> 25);
  *(_DWORD *)(a2 + 332) = 0;
  int v94 = v92[1635] & 7;
  *(_DWORD *)(a2 + 332) = v94;
  unsigned int v95 = v94 & 0xFFFFFFC7 | (8 * (v92[1634] & 7));
  *(_DWORD *)(a2 + 332) = v95;
  int v96 = (char *)(v50 + 23176 * v49 + 10649);
  char v97 = *v96;
  if (*v96) {
    char v97 = *(unsigned char *)(v10 + 2360 * v11 + 618);
  }
  unsigned int v98 = v95 & 0xFFFFFFBF | ((v97 & 1) << 6);
  *(_DWORD *)(a2 + 332) = v98;
  if (*v96) {
    char v99 = *(unsigned char *)(v10 + 2360 * v11 + 617);
  }
  else {
    char v99 = 0;
  }
  int v100 = (v97 & 1) << 6;
  int v101 = (v99 & 1) << 7;
  unsigned int v102 = v98 & 0xFFFFFF7F | v101;
  *(_DWORD *)(a2 + 332) = v102;
  uint64_t v103 = v10 + 2360 * v11;
  uint64_t v104 = v8 + 9856 * v7;
  if (*(unsigned char *)(v103 + 1881)) {
    int v105 = (_DWORD *)(v103 + 1888);
  }
  else {
    int v105 = (_DWORD *)(v104 + 248);
  }
  unsigned int v106 = v102 & 0xFFFFF0FF | ((*v105 & 0xF) << 8);
  *(_DWORD *)(a2 + 332) = v106;
  if (*(unsigned char *)(v103 + 1881)) {
    uint64_t v107 = (_DWORD *)(v103 + 1884);
  }
  else {
    uint64_t v107 = (_DWORD *)(v104 + 244);
  }
  unsigned int v108 = v106 & 0xFFFF0FFF | ((*v107 & 0xF) << 12);
  *(_DWORD *)(a2 + 332) = v108;
  if (*(unsigned char *)(v104 + 239) && *(unsigned char *)(v103 + 1881)) {
    uint64_t v109 = (unsigned __int8 *)(v10 + 2360 * v11 + 1882);
  }
  else {
    uint64_t v109 = (unsigned __int8 *)(v8 + 9856 * v7 + 240);
  }
  int v110 = *v109;
  BOOL v111 = (v101 | v100) != 0;
  int v112 = v108 | ((v110 == 0) << 16);
  *(_DWORD *)(a2 + 332) = v112;
  if (!v110) {
    BOOL v111 = 1;
  }
  uint64_t v113 = v8 + 9856 * v7;
  if (v111) {
    int v114 = (unsigned char *)(v10 + 2360 * v11 + 1892);
  }
  else {
    int v114 = (unsigned char *)(v113 + 237);
  }
  unsigned int v115 = v112 & 0xFFFDFFFF | ((*v114 & 1) << 17);
  *(_DWORD *)(a2 + 332) = v115;
  if (*(unsigned char *)(v113 + 52)) {
    char v116 = *(unsigned char *)(v8 + 9856 * v7 + 236);
  }
  else {
    char v116 = 1;
  }
  unsigned int v117 = v115 & 0xFFFBFFFF | ((v116 & 1) << 18);
  *(_DWORD *)(a2 + 332) = v117;
  int v118 = *(unsigned __int8 *)(v50 + 23176 * v49 + 10650);
  if (*(unsigned char *)(v50 + 23176 * v49 + 10650)) {
    int v118 = *(unsigned char *)(v50 + 23176 * v49 + 10668) == 0;
  }
  *(_DWORD *)(a2 + 332) = v117 | (v118 << 19) | 0x2DA00000;
  uint64_t v119 = *(_DWORD **)(v48 + 256);
  int v120 = v119[626];
  if (v119[590] != 1)
  {
    unint64_t v137 = 0;
    uint64_t v138 = 0;
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))
    {
      int v128 = 368 * a3;
      *(_DWORD *)(a2 + 34pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      uint64_t v122 = v138;
      if (!*(void *)v138 && !*(_DWORD *)(v138 + 152) && !*(_DWORD *)(v138 + 156)) {
        goto LABEL_116;
      }
      int v129 = v137;
      if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        int v140 = "populateSliceRegisters";
        __int16 v141 = 1024;
        int v142 = 1632;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        int v129 = v137;
      }
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v128 + 3264, v129, 0x3FFFFFFFFFFLL, 32, 1023, 4);
      if (result) {
        return result;
      }
      uint64_t v122 = v138;
      if (!*(void *)v138)
      {
LABEL_116:
        if (!*(_DWORD *)(v122 + 152) && !*(_DWORD *)(v122 + 156)) {
          goto LABEL_122;
        }
      }
      int v125 = v128 + 3268;
      int v126 = v137;
      if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        int v140 = "populateSliceRegisters";
        __int16 v141 = 1024;
        int v142 = 1633;
        int v127 = &_os_log_internal;
        goto LABEL_120;
      }
LABEL_121:
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v125, v126, 0xFFFFFFFFLL, 0, -1, 4);
      if (result) {
        return result;
      }
      goto LABEL_122;
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t v137 = 0;
  uint64_t v138 = 0;
  if (!(*(unsigned int (**)(_DWORD *, uint64_t, uint64_t *, unint64_t *))(*(void *)v119 + 448))(v119, a3, &v138, &v137))return 0xFFFFFFFFLL; {
  int v121 = 368 * a3;
  }
  *(_DWORD *)(a2 + 34pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v122 = v138;
  if (!*(void *)v138 && !*(_DWORD *)(v138 + 152) && !*(_DWORD *)(v138 + 156)) {
    goto LABEL_101;
  }
  int v123 = v137;
  if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v140 = "populateSliceRegisters";
    __int16 v141 = 1024;
    int v142 = 1613;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v123 = v137;
  }
  uint64_t result = CAHDec::addToPatcherList(a1, (void *)v122, v121 + 3264, v123, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  if (!result)
  {
    uint64_t v122 = v138;
    if (*(void *)v138) {
      goto LABEL_103;
    }
LABEL_101:
    if (*(_DWORD *)(v122 + 152) || *(_DWORD *)(v122 + 156))
    {
LABEL_103:
      int v125 = v121 + 3268;
      int v126 = v137;
      if (HIDWORD(v137) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        int v140 = "populateSliceRegisters";
        __int16 v141 = 1024;
        int v142 = 1614;
        int v127 = &_os_log_internal;
LABEL_120:
        _os_log_impl(&dword_223977000, v127, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        int v126 = v137;
        goto LABEL_121;
      }
      goto LABEL_121;
    }
LABEL_122:
    unsigned int v130 = *(_DWORD *)(v10 + 2360 * v11 + 16) - (*(_DWORD *)(v10 + 2360 * v11 + 2080) >> 3);
    *(_DWORD *)(a2 + 348) = v130;
    if (v119[590] == 1)
    {
      *(void *)(a2 + 356) = 0;
      if (v130 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
        unsigned int v130 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
      }
      uint64_t result = 0;
      if (v119[605]) {
        int v131 = v130 | v120 & 0x10000;
      }
      else {
        int v131 = (unsigned __int16)v120 | (v130 << 22);
      }
      *(_DWORD *)(a2 + 36pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v131;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecClaryHevc::populateCommonRegisters(CAHDecClaryHevc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000000;
  return 0;
}

uint64_t CAHDecClaryHevc::updateCommonRegisters(CAHDecClaryHevc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

uint64_t CAHDecClaryHevc::populateSequenceRegisters(CAHDecClaryHevc *this)
{
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)*((void *)this + 33);
  int v3 = *(_DWORD *)(v1 + 8320);
  uint64_t v4 = *(void *)(v1 + 8280);
  v2[13] = 0;
  uint64_t v5 = v4 + 23176 * v3;
  __int16 v6 = (*(_DWORD *)(v5 + 3608) >> 3) - 1;
  v2[13] = v6 & 0x1FFF;
  v2[13] = ((*(_DWORD *)(v5 + 3612) << 13) + 536805376) & 0x1FFF0000 | v6 & 0x1FFF;
  v2[14] = 0;
  int v7 = *(unsigned char *)(v5 + 10648) & 1;
  v2[14] = v7;
  unsigned int v8 = v7 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v5 + 4440) & 7));
  v2[14] = v8;
  unsigned int v9 = v8 & 0xFFFFFF8F | (16 * (*(_DWORD *)(v5 + 4436) & 7));
  v2[14] = v9;
  unsigned int v10 = v9 & 0xFFFFFE7F | (((*(_DWORD *)(v5 + 4428) + *(_DWORD *)(v5 + 4432)) & 3) << 7);
  v2[14] = v10;
  unsigned int v11 = v10 & 0xFFFFF9FF | ((*(_DWORD *)(v5 + 4428) & 3) << 9);
  v2[14] = v11;
  unsigned int v12 = v11 & 0xFFFFE7FF | (((*(_DWORD *)(v5 + 4424) + *(_DWORD *)(v5 + 4420)) & 3) << 11);
  v2[14] = v12;
  unsigned int v13 = v12 & 0xFFFF9FFF | ((*(_DWORD *)(v5 + 4420) & 3) << 13);
  v2[14] = v13;
  unsigned int v14 = v13 & 0xFFF87FFF | ((*(_DWORD *)(v5 + 3640) & 0xF) << 15);
  v2[14] = v14;
  unsigned int v15 = v14 & 0xFF87FFFF | ((*(_DWORD *)(v5 + 3636) & 0xF) << 19);
  v2[14] = v15;
  unsigned int v16 = v15 & 0xFF7FFFFF | ((*(unsigned char *)(v5 + 3604) & 1) << 23);
  v2[14] = v16;
  v2[14] = v16 & 0xFCFFFFFF | ((*(_DWORD *)(v5 + 3600) & 3) << 24);
  v2[15] = 0;
  if (*(unsigned char *)(v5 + 10650))
  {
    v2[15] = 4096;
    uint64_t v17 = (_DWORD *)(v4 + 23176 * v3);
    int v18 = (v17[2666] + v17[2665]) & 3 | 0x1000;
    v2[15] = v18;
    unsigned int v19 = v18 & 0xFFFFFFF3 | (4 * (v17[2665] & 3));
    v2[15] = v19;
    unsigned int v20 = v19 & 0xFFFFFF0F | (16 * (v17[2664] & 0xF));
    v2[15] = v20;
    v2[15] = v20 & 0xFFFFF0FF | ((v17[2663] & 0xF) << 8);
  }
  v2[16] = 0;
  if (*(unsigned char *)(v4 + 23176 * v3 + 22833))
  {
    int v21 = *(unsigned char *)(v4 + 23176 * v3 + 22844) & 1;
    v2[16] = v21;
    unsigned int v22 = v21 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v4 + 23176 * v3 + 22843) & 1));
    v2[16] = v22;
    unsigned int v23 = v22 & 0xFFFFFFFB | (4 * (*(unsigned char *)(v4 + 23176 * v3 + 22842) & 1));
    v2[16] = v23;
    int v24 = v23 | (8 * (*(unsigned char *)(v4 + 23176 * v3 + 22841) == 0));
    v2[16] = v24;
    unsigned int v25 = v24 & 0xFFFFFFEF | (16 * (*(unsigned char *)(v4 + 23176 * v3 + 22840) & 1));
    v2[16] = v25;
    unsigned int v26 = v25 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v4 + 23176 * v3 + 22839) & 1));
    v2[16] = v26;
    unsigned int v27 = v26 & 0xFFFFFFBF | ((*(unsigned char *)(v4 + 23176 * v3 + 22838) & 1) << 6);
    v2[16] = v27;
    int v28 = v27 | ((*(unsigned char *)(v4 + 23176 * v3 + 22837) & 1) << 7);
    v2[16] = v28;
    int v29 = v28 | ((*(unsigned char *)(v4 + 23176 * v3 + 22836) & 1) << 8);
  }
  else
  {
    int v29 = 8;
  }
  v2[16] = v29;
  uint64_t v30 = v4 + 23176 * v3;
  v2[16] = v29 & 0xFFFFFDFF | ((*(unsigned char *)(v30 + 22285) & 1) << 9);
  if (*(unsigned char *)(v30 + 4444)) {
    CAHDecTansyHevc::copyScalingList((uint64_t)this, (uint64_t)(v2 + 17), *((void *)this + 33) + 788, *(_DWORD *)(v5 + 3600), v4 + 23176 * v3 + 4448);
  }
  return 0;
}

uint64_t CAHDecClaryHevc::getTileHdrMemInfo(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 176 * a2;
  *a3 = v3 + 528;
  a3[1] = v3 + 3344;
  return result;
}

__n128 CAHDecClaryHevc::getMVmemInfo(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1 + 176 * a2;
  long long v5 = *(_OWORD *)(v4 + 7568);
  long long v6 = *(_OWORD *)(v4 + 7600);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 7584);
  *(_OWORD *)(a3 + 32) = v6;
  *(_OWORD *)a3 = v5;
  long long v7 = *(_OWORD *)(v4 + 7616);
  long long v8 = *(_OWORD *)(v4 + 7632);
  long long v9 = *(_OWORD *)(v4 + 7664);
  *(_OWORD *)(a3 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v4 + 7648);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_OWORD *)(a3 + 64) = v8;
  __n128 result = *(__n128 *)(v4 + 7680);
  long long v11 = *(_OWORD *)(v4 + 7696);
  long long v12 = *(_OWORD *)(v4 + 7728);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v4 + 7712);
  *(_OWORD *)(a3 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v12;
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v11;
  *a4 = *(_DWORD *)(a1 + 4 * a2 + 464);
  return result;
}

uint64_t CAHDecClaryHevc::populatePictureRegisters(CAHDecClaryHevc *this)
{
  uint64_t v466 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 8320);
  int v4 = *(_DWORD *)(v2 + 8324);
  uint64_t v5 = *(void *)(v2 + 8280);
  uint64_t v6 = *(void *)(v2 + 8288);
  unsigned int v444 = *(_DWORD *)(v2 + 9036);
  unsigned int v7 = *(_DWORD *)(v2 + 3068);
  int v449 = *(_DWORD *)(v2 + 3072);
  int v8 = *(unsigned __int8 *)(v2 + 3060);
  int v9 = *(_DWORD *)(v2 + 3064);
  uint64_t v439 = *(void *)(v2 + 8392);
  int v440 = *(_DWORD *)(v2 + 3036);
  uint64_t v10 = *(void *)(v2 + 2088);
  int v435 = *(_DWORD *)(v2 + 3660);
  int v436 = *(unsigned __int8 *)(v2 + 9098);
  int v447 = *(_DWORD *)(v2 + 2644);
  uint64_t v442 = *(unsigned int *)(v2 + 8424);
  int v11 = *(unsigned __int8 *)(v2 + 8);
  long long v12 = *(_OWORD *)(v2 + 8536);
  v465[0] = *(_OWORD *)(v2 + 8520);
  v465[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 8568);
  v465[2] = *(_OWORD *)(v2 + 8552);
  v465[3] = v13;
  uint64_t v433 = v10;
  uint64_t v434 = *(unsigned int *)(v2 + 8720);
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  unsigned int v15 = (char *)this + 264;
  int v445 = *(_DWORD *)(v5 + 23176 * v3 + 4424) + *(_DWORD *)(v5 + 23176 * v3 + 4420);
  int v446 = v14;
  memset(v464, 0, sizeof(v464));
  memset(v463, 0, sizeof(v463));
  uint64_t v451 = *((void *)this + 33);
  (*(void (**)(void))(**((void **)this + 32) + 336))();
  uint64_t v16 = 0;
  uint64_t v17 = (unsigned __int8 *)*((void *)this + 32);
  int v18 = (const double *)(v17 + 8728);
  do
  {
    float64x2x2_t v467 = vld2q_f64(v18);
    v18 += 4;
    v464[v16] = v467.val[0];
    v463[v16++] = v467.val[1];
  }
  while (v16 != 4);
  uint64_t v19 = v6 + 9856 * v4;
  int v21 = *(unsigned __int8 *)(v19 + 52);
  unsigned int v20 = (unsigned char *)(v19 + 52);
  uint64_t v448 = (char *)this + 264;
  int v441 = v11;
  int v437 = v8;
  int v438 = v9;
  unsigned int v443 = v7;
  if (v21)
  {
    unint64_t v22 = 0;
    uint64_t v23 = v6 + 9856 * v4;
    unsigned __int16 v24 = *(_WORD *)(v23 + 56) + 1;
    uint64_t v25 = *(void *)v15;
    *(_WORD *)(*(void *)v15 + 684) = v24;
    uint64_t v26 = v23 + 9676;
    do
    {
      *(_WORD *)(v25 + 688 + 2 * v22) = *(_DWORD *)(v26 + 4 * v22);
      BOOL v27 = v22++ >= v24;
    }
    while (!v27);
    unint64_t v28 = 0;
    uint64_t v29 = v6 + 9856 * v4;
    unsigned __int16 v30 = *(_WORD *)(v29 + 60) + 1;
    *(_WORD *)(v25 + 686) = v30;
    int v31 = v30;
    uint64_t v32 = v29 + 9760;
    uint64_t v33 = v25 + 730;
    do
    {
      *(_WORD *)(v33 + 2 * v28) = *(_DWORD *)(v32 + 4 * v28);
      BOOL v27 = v28++ >= v30;
    }
    while (!v27);
    uint64_t v34 = v5;
    int v35 = v3;
  }
  else
  {
    uint64_t v36 = *(void *)v15;
    *(_DWORD *)(v36 + 684) = 65537;
    *(_WORD *)(v36 + 688) = 0;
    int v35 = v3;
    uint64_t v34 = v5;
    uint64_t v37 = v5 + 23176 * v3;
    *(_WORD *)(v36 + 69pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v37 + 22880);
    *(_WORD *)(v36 + 73pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_WORD *)(v36 + 732) = *(_DWORD *)(v37 + 22888);
    int v31 = 1;
    unsigned __int16 v24 = 1;
  }
  int v38 = v17[2675];
  unsigned int v39 = v17[2674];
  if (v38 | v39)
  {
    uint64_t v40 = v34 + 23176 * v35;
    unsigned int v41 = *(_DWORD *)(v40 + 3636);
    unsigned int v42 = *(_DWORD *)(v40 + 3640);
    if (v41 > v42) {
      unsigned int v42 = v41;
    }
    unsigned int v43 = (v42 + 9) & 0xFFFFFFFE;
    if (v43 == 8)
    {
      unsigned int v52 = 1;
      int v51 = 8;
      if (!v17[2675]) {
        goto LABEL_47;
      }
    }
    else
    {
      int v44 = v17[2672];
      if (v44) {
        int v45 = 12;
      }
      else {
        int v45 = 11;
      }
      if (v44) {
        int v46 = 5;
      }
      else {
        int v46 = 4;
      }
      BOOL v47 = v44 == 0;
      if (v44) {
        int v48 = 10;
      }
      else {
        int v48 = 9;
      }
      if (v47) {
        int v49 = 2;
      }
      else {
        int v49 = 3;
      }
      if (v43 == 10)
      {
        int v50 = v49;
      }
      else
      {
        int v48 = 27;
        int v50 = 27;
      }
      if (v43 == 12) {
        int v51 = v45;
      }
      else {
        int v51 = v48;
      }
      if (v43 == 12) {
        unsigned int v52 = v46;
      }
      else {
        unsigned int v52 = v50;
      }
      if (!v38) {
        goto LABEL_47;
      }
    }
    if (*(_DWORD *)(v34 + 23176 * v35 + 3600) && (v38 == 2 && v51 == 8 || v38 == 3 && (v51 - 9) <= 1))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v51;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v38;
        uint64_t v53 = &_os_log_internal;
        uint64_t v54 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
        goto LABEL_123;
      }
      return 0xFFFFFFFFLL;
    }
LABEL_47:
    if (v39 && (v39 == 3 && v52 - 9 < 2 || v52 <= 0x1A && ((1 << v52) & 0x4C00000) != 0 && v39 <= 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v52;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v39;
        uint64_t v53 = &_os_log_internal;
        uint64_t v54 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
        goto LABEL_123;
      }
      return 0xFFFFFFFFLL;
    }
  }
  unsigned __int16 v432 = v24;
  uint64_t v55 = v20;
  *(_DWORD *)(v451 + 88) = 766509056;
  uint64_t v56 = (*(uint64_t (**)(void))(**((void **)this + 32) + 216))(*((void *)this + 32));
  if (v56) {
    int v57 = (*(_DWORD *)(*((void *)this + 32) + 3092) == 2) << 13;
  }
  else {
    int v57 = 0;
  }
  unsigned int v58 = v444 >> 28;
  unsigned int v59 = *(_DWORD *)(v451 + 88) & 0xFFFFC100;
  if (v446) {
    int v60 = 688;
  }
  else {
    int v60 = 672;
  }
  if (v447) {
    int v61 = 4160;
  }
  else {
    int v61 = 64;
  }
  unsigned int v62 = v61 & 0xFFFFFFF0 | ((v447 == 1) << 10) | v60 & 0xFFFFFFF0 | (4 * (v38 & 3)) | v39 & 3 | v57;
  int v63 = v62 | v59;
  *(_DWORD *)(v451 + 88) = v62 | v59;
  uint64_t v64 = (unsigned char *)*((void *)this + 32);
  unsigned int v65 = v63 & 0xFFF7FFFF | ((v64[2652] & 1) << 19);
  *(_DWORD *)(v451 + 88) = v65;
  unsigned int v66 = v65 & 0xFFFBFFFF | ((v64[2653] & 1) << 18);
  *(_DWORD *)(v451 + 88) = v66;
  unsigned int v67 = v66 & 0xFFFDFFFF | ((v64[2654] & 1) << 17);
  *(void *)(v451 + 88) = v67;
  if ((v444 & 1) != 0 && *(unsigned char *)(v6 + 9856 * v4 + 53) && *(_DWORD *)(v34 + 23176 * v35 + 22888) > v58 + 1
    || (v444 & 2) != 0 && !*(unsigned char *)(v6 + 9856 * v4 + 53) && *v55 && v31 * v432 > v58 + 1)
  {
    goto LABEL_77;
  }
  if ((v444 & 0x20) == 0 || (int v68 = *(unsigned __int8 *)(v6 + 9856 * v4 + 53), *(unsigned char *)(v6 + 9856 * v4 + 53)))
  {
    int v68 = 0;
    goto LABEL_78;
  }
  if (!*v55 && v443 > v58 + 1) {
LABEL_77:
  }
    int v68 = (v449 == 0) << 27;
LABEL_78:
  *(_DWORD *)(v451 + 92) = v68;
  *(_DWORD *)(v451 + 96) = 0;
  uint64_t v69 = v34 + 23176 * v35;
  unsigned __int16 v70 = *(_DWORD *)(v69 + 3608) - 1;
  *(_DWORD *)(v451 + 96) = v70;
  int v71 = (v70 | ((unsigned __int16)*(_DWORD *)(v69 + 3612) << 16)) - 0x10000;
  *(_DWORD *)(v451 + 10pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(v451 + 104) = 0;
  *(_DWORD *)(v451 + 96) = v71;
  if (*(unsigned char *)(v6 + 9856 * v4 + 6466))
  {
    uint64_t v72 = (unsigned char *)(v6 + 9856 * v4 + 6477);
    int v73 = 32 * (*v72 & 1);
    *(_DWORD *)(v451 + 104) = v73;
    LOBYTE(v74) = *v72;
    if (*v72) {
      int v74 = *(_DWORD *)(v6 + 9856 * v4 + 6484);
    }
    unint64_t v75 = v74 & 7;
    int v76 = v75 | v73;
    *(_DWORD *)(v451 + 104) = v75 | v73;
    if (v73)
    {
      uint64_t v77 = (_DWORD *)(v6 + 9856 * v4 + 6512);
      uint64_t v78 = (unsigned int *)(v451 + 112);
      unint64_t v79 = -1;
      do
      {
        unsigned int v80 = *v78 & 0xFFFFFFE0 | *v77 & 0x1F;
        *uint64_t v78 = v80;
        uint64_t v56 = v80 & 0xFFFFFC1F | (32 * (*(v77 - 6) & 0x1F));
        *v78++ = v56;
        ++v79;
        ++v77;
      }
      while (v79 < v75);
    }
    int v81 = *v72;
    if (v81) {
      int v81 = *(_DWORD *)(v6 + 9856 * v4 + 6480);
    }
    int v82 = (8 * (((_BYTE)v445 - (_BYTE)v81) & 3)) | v76;
    *(_DWORD *)(v451 + 104) = v82;
    unsigned int v83 = v82 & 0xFFFFFFBF | ((*(unsigned char *)(v6 + 9856 * v4 + 6476) & 1) << 6);
    *(_DWORD *)(v451 + 104) = v83;
    unsigned int v84 = v83 & 0xFFFFFE7F | ((*(_DWORD *)(v6 + 9856 * v4 + 6472) & 3) << 7);
  }
  else
  {
    unsigned int v84 = 8 * (v445 & 3);
  }
  *(_DWORD *)(v451 + 104) = v84;
  uint64_t v85 = v6 + 9856 * v4;
  int v88 = *(unsigned __int8 *)(v85 + 34);
  int v86 = (unsigned char *)(v85 + 34);
  LOBYTE(v87) = v88;
  if (v88) {
    int v87 = *(_DWORD *)(v6 + 9856 * v4 + 36);
  }
  unsigned int v89 = v84 & 0xFFFE7FFF | ((((_BYTE)v445 - (_BYTE)v87) & 3) << 15);
  *(_DWORD *)(v451 + 104) = v89;
  uint64_t v90 = v6 + 9856 * v4;
  unsigned int v91 = v89 & 0xFFFFF1FF | ((*(_DWORD *)(v90 + 6460) & 7) << 9);
  *(_DWORD *)(v451 + 104) = v91;
  unsigned int v92 = v91 & 0xFFFFEFFF | ((*(unsigned char *)(v90 + 53) & 1) << 12);
  *(_DWORD *)(v451 + 104) = v92;
  unsigned int v93 = v92 & 0xFFFFDFFF | ((*v55 & 1) << 13);
  *(_DWORD *)(v451 + 104) = v93;
  unsigned int v94 = v93 & 0xFFFFBFFF | ((*(unsigned char *)(v90 + 51) & 1) << 14);
  *(_DWORD *)(v451 + 104) = v94;
  unsigned int v95 = v94 & 0xFFFDFFFF | ((*v86 & 1) << 17);
  *(_DWORD *)(v451 + 104) = v95;
  unsigned int v96 = v95 & 0xFFFBFFFF | ((*(unsigned char *)(v90 + 33) & 1) << 18);
  *(_DWORD *)(v451 + 104) = v96;
  unsigned int v97 = v96 & 0xFFF7FFFF | ((*(unsigned char *)(v90 + 32) & 1) << 19);
  *(_DWORD *)(v451 + 104) = v97;
  unsigned int v98 = v97 & 0xFFEFFFFF | ((*(unsigned char *)(v90 + 16) & 1) << 20);
  *(_DWORD *)(v451 + 104) = v98;
  if (v62 >> 13) {
    BOOL v99 = 0;
  }
  else {
    BOOL v99 = *(unsigned char *)(v34 + 23176 * v35 + 22284) != 0;
  }
  *(_DWORD *)(v451 + 104) = v98 & 0xFFDFFFFF | (v99 << 21);
  uint64_t v100 = v6 + 9856 * v4;
  unsigned int v101 = *(_DWORD *)(v451 + 108) & 0xFFFFFFE0 | *(_DWORD *)(v100 + 44) & 0x1F;
  *(_DWORD *)(v451 + 108) = v101;
  *(_DWORD *)(v451 + 108) = v101 & 0xFFFFFC1F | (32 * (*(_DWORD *)(v100 + 40) & 0x1F));
  if (*(unsigned char *)(v100 + 252))
  {
    CAHDecTansyHevc::copyScalingList(v56, v451 + 136, *(void *)v448 + 1784, *(_DWORD *)(v34 + 23176 * v35 + 3600), v6 + 9856 * v4 + 256);
    unsigned int v67 = *(_DWORD *)(v451 + 88);
  }
  if ((~v67 & 0xC0000) != 0)
  {
    int v106 = 0;
    int v108 = 0;
    *(_DWORD *)(v451 + 156) = 0;
    *(_DWORD *)(v451 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  else
  {
    unsigned int v102 = (_DWORD *)*((void *)this + 32);
    int v103 = v102[664];
    if (!v103 || !v102[665])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v134 = v102[665];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v103;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v134;
        uint64_t v53 = &_os_log_internal;
        uint64_t v54 = "AppleAVD: %s(): invalid stat crop width/height %d/%d";
LABEL_123:
        uint64_t v135 = buf;
        uint32_t v136 = 24;
LABEL_124:
        _os_log_impl(&dword_223977000, v53, OS_LOG_TYPE_DEFAULT, v54, v135, v136);
      }
      return 0xFFFFFFFFLL;
    }
    unsigned __int16 v104 = v102[666];
    *(_WORD *)(v451 + 156) = v104;
    int v105 = v102[667];
    int v106 = v105 << 16;
    *(_DWORD *)(v451 + 156) = v104 | ((unsigned __int16)v105 << 16);
    unsigned __int16 v107 = v102[666] + v102[664] - 1;
    *(_WORD *)(v451 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v107;
    int v108 = (v107 | ((unsigned __int16)(*((_WORD *)v102 + 1330) + *((_WORD *)v102 + 1334)) << 16)) - 0x10000;
    *(_DWORD *)(v451 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v108;
  }
  if (v449) {
    int v109 = 7340080;
  }
  else {
    int v109 = 3145776;
  }
  *(_DWORD *)(v451 + 164) = v109;
  if (!*(unsigned char *)(*((void *)this + 32) + 3004))
  {
    unsigned __int16 v110 = *(_DWORD *)(v69 + 3608) - 1;
    *(_DWORD *)(v451 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v108 & 0xFFFF0000 | v110;
    int v111 = (*(_DWORD *)(v69 + 3612) << 16) - 0x10000;
    *(_DWORD *)(v451 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v111 & 0xFFFF0000 | v110;
    if (*(unsigned char *)(v34 + 23176 * v35 + 3616))
    {
      if ((v67 & 0x800) != 0)
      {
        uint64_t v112 = v34 + 23176 * v35;
        unsigned __int16 v113 = *(_DWORD *)(v112 + 3620) * *(_DWORD *)(v112 + 22852);
        *(_DWORD *)(v451 + 156) = v106 | v113;
        *(_DWORD *)(v451 + 156) = v113 | ((unsigned __int16)(*(_WORD *)(v112 + 22856) * *(_DWORD *)(v112 + 3628)) << 16);
        unsigned __int16 v114 = *(_DWORD *)(v69 + 3608) + ~(*(_DWORD *)(v112 + 3624) * *(_DWORD *)(v112 + 22852));
        *(_DWORD *)(v451 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v114 | v111;
        *(_DWORD *)(v451 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v114 | ((unsigned __int16)(*(_WORD *)(v69 + 3612)
                                                           + ~(*(_WORD *)(v112 + 3632) * *(_WORD *)(v112 + 22856))) << 16);
      }
    }
  }
  uint64_t v115 = 0;
  char v116 = (char *)this + 6160;
  do
  {
    *(_DWORD *)(*(void *)v448 + v115 + 168) = 0;
    uint64_t v117 = *(void *)v448 + v115;
    int v118 = *(_DWORD *)(v117 + 168);
    *(_DWORD *)(v117 + 168) = 0;
    *(_DWORD *)(*(void *)v448 + v115 + 168) ^= 0xFFFFFF00;
    uint64_t v119 = *(void *)v448 + v115;
    int v120 = *(_DWORD *)(v119 + 168);
    *(_DWORD *)(v119 + 168) = v118;
    if (*(void *)v116 || *((_DWORD *)v116 + 38) || *((_DWORD *)v116 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v116, (int)v115 + 168, 0, 0xFFFFFFFFLL, 8, v120, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v115 + 196) = 0;
    *(_DWORD *)(*((void *)this + 33) + v115 + 196) = *(_DWORD *)(*((void *)this + 33) + v115 + 196) & 0x800001FF | (((*((_DWORD *)this + 2952) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v115 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    uint64_t v122 = *((void *)this + 33) + v115;
    int v123 = *(_DWORD *)(v122 + 460);
    *(_DWORD *)(v122 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + v115 + 460) ^= 0x3FFu;
    uint64_t v124 = *((void *)this + 33) + v115;
    int v125 = *(_DWORD *)(v124 + 460);
    *(_DWORD *)(v124 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v123;
    if (*(void *)v116 || *((_DWORD *)v116 + 38) || *((_DWORD *)v116 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v116, (int)v115 + 460, 0, 0x3FFFFFFFFFFLL, 32, v125, 4);
      if (result) {
        return result;
      }
    }
    v115 += 4;
    v116 += 176;
  }
  while (v115 != 28);
  *(_DWORD *)(*(void *)v448 + 224) = 0;
  *(_DWORD *)(*(void *)v448 + 488) = 0;
  if ((*(unsigned char *)(v451 + 90) & 8) != 0)
  {
    uint64_t v126 = *((void *)this + 33);
    uint64_t v127 = *(void *)(*((void *)this + 32) + 2680);
    long long v461 = 0u;
    long long v462 = 0u;
    long long v459 = 0u;
    long long v460 = 0u;
    long long v457 = 0u;
    long long v458 = 0u;
    long long v455 = 0u;
    long long v456 = 0u;
    long long v454 = 0u;
    memset(buf, 0, sizeof(buf));
    int v128 = (*(_DWORD *)(v126 + 16) & 0xF) << 9;
    *(void *)buf = v127;
    int v129 = *(_DWORD *)(v126 + 224);
    *(_DWORD *)(v126 + 224) = 0;
    *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFF00;
    uint64_t v130 = *((void *)this + 33);
    int v131 = *(_DWORD *)(v130 + 224);
    *(_DWORD *)(v130 + 224) = v129;
    if (v127)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 224, v128, 0xFFFFFFFFLL, 8, v131, 4);
      if (result) {
        return result;
      }
      uint64_t v132 = *(void *)buf;
      int v133 = DWORD2(v461);
      LODWORD(v127) = HIDWORD(v461);
    }
    else
    {
      int v133 = 0;
      uint64_t v132 = 0;
    }
    int v137 = *(_DWORD *)(*(void *)v448 + 488);
    *(_DWORD *)(*(void *)v448 + 488) = 0;
    *(_DWORD *)(*(void *)v448 + 488) ^= 0x3FFu;
    int v138 = *(_DWORD *)(*(void *)v448 + 488);
    *(_DWORD *)(*(void *)v448 + 488) = v137;
    if (v132 || v133 || v127)
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 488, v128, 0x3FFFFFFFFFFLL, 32, v138, 4);
      if (result) {
        return result;
      }
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 228) = 0;
  uint64_t v139 = *((void *)this + 33);
  int v140 = *(_DWORD *)(v139 + 228);
  *(_DWORD *)(v139 + 228) = 0;
  *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFF00;
  uint64_t v141 = *((void *)this + 33);
  int v142 = *(_DWORD *)(v141 + 228);
  *(_DWORD *)(v141 + 228) = v140;
  if (*((void *)this + 1298) || *((_DWORD *)this + 2634) || *((_DWORD *)this + 2635))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1298, 228, 0, 0xFFFFFFFFLL, 8, v142, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 492) = 0;
  int v143 = *(_DWORD *)(*(void *)v448 + 492);
  *(_DWORD *)(*(void *)v448 + 492) = 0;
  *(_DWORD *)(*(void *)v448 + 492) ^= 0x3FFu;
  int v144 = *(_DWORD *)(*(void *)v448 + 492);
  *(_DWORD *)(*(void *)v448 + 492) = v143;
  if (*((void *)this + 1298) || *((_DWORD *)this + 2634) || *((_DWORD *)this + 2635))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1298, 492, 0, 0x3FFFFFFFFFFLL, 32, v144, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 232) = 0;
  uint64_t v145 = *((void *)this + 33);
  int v146 = *(_DWORD *)(v145 + 232);
  *(_DWORD *)(v145 + 232) = 0;
  *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFF00;
  uint64_t v147 = *((void *)this + 33);
  int v148 = *(_DWORD *)(v147 + 232);
  *(_DWORD *)(v147 + 232) = v146;
  if (*((void *)this + 1320) || *((_DWORD *)this + 2678) || *((_DWORD *)this + 2679))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1320, 232, 0, 0xFFFFFFFFLL, 8, v148, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 496) = 0;
  int v149 = *(_DWORD *)(*(void *)v448 + 496);
  *(_DWORD *)(*(void *)v448 + 496) = 0;
  *(_DWORD *)(*(void *)v448 + 496) ^= 0x3FFu;
  int v150 = *(_DWORD *)(*(void *)v448 + 496);
  *(_DWORD *)(*(void *)v448 + 496) = v149;
  if (*((void *)this + 1320) || *((_DWORD *)this + 2678) || *((_DWORD *)this + 2679))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1320, 496, 0, 0x3FFFFFFFFFFLL, 32, v150, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 236) = 0;
  uint64_t v151 = *((void *)this + 33);
  int v152 = *(_DWORD *)(v151 + 236);
  *(_DWORD *)(v151 + 236) = 0;
  *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFF00;
  uint64_t v153 = *((void *)this + 33);
  int v154 = *(_DWORD *)(v153 + 236);
  *(_DWORD *)(v153 + 236) = v152;
  if (*((void *)this + 1342) || *((_DWORD *)this + 2722) || *((_DWORD *)this + 2723))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1342, 236, 0, 0xFFFFFFFFLL, 8, v154, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 50pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v155 = *(_DWORD *)(*(void *)v448 + 500);
  *(_DWORD *)(*(void *)v448 + 50pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*(void *)v448 + 500) ^= 0x3FFu;
  int v156 = *(_DWORD *)(*(void *)v448 + 500);
  *(_DWORD *)(*(void *)v448 + 50pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v155;
  if (*((void *)this + 1342) || *((_DWORD *)this + 2722) || *((_DWORD *)this + 2723))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1342, 500, 0, 0x3FFFFFFFFFFLL, 32, v156, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v157 = *((void *)this + 33);
  int v158 = *(_DWORD *)(v157 + 240);
  *(_DWORD *)(v157 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFF00;
  uint64_t v159 = *((void *)this + 33);
  int v160 = *(_DWORD *)(v159 + 240);
  *(_DWORD *)(v159 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v158;
  if (*((void *)this + 1364) || *((_DWORD *)this + 2766) || *((_DWORD *)this + 2767))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1364, 240, 0, 0xFFFFFFFFLL, 8, v160, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 504) = 0;
  int v161 = *(_DWORD *)(*(void *)v448 + 504);
  *(_DWORD *)(*(void *)v448 + 504) = 0;
  *(_DWORD *)(*(void *)v448 + 504) ^= 0x3FFu;
  int v162 = *(_DWORD *)(*(void *)v448 + 504);
  *(_DWORD *)(*(void *)v448 + 504) = v161;
  if (*((void *)this + 1364) || *((_DWORD *)this + 2766) || *((_DWORD *)this + 2767))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1364, 504, 0, 0x3FFFFFFFFFFLL, 32, v162, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 244) = 0;
  uint64_t v163 = *((void *)this + 33);
  int v164 = *(_DWORD *)(v163 + 244);
  *(_DWORD *)(v163 + 244) = 0;
  *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFF00;
  uint64_t v165 = *((void *)this + 33);
  int v166 = *(_DWORD *)(v165 + 244);
  *(_DWORD *)(v165 + 244) = v164;
  if (*((void *)this + 1386) || *((_DWORD *)this + 2810) || *((_DWORD *)this + 2811))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1386, 244, 0, 0xFFFFFFFFLL, 8, v166, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 508) = 0;
  int v167 = *(_DWORD *)(*(void *)v448 + 508);
  *(_DWORD *)(*(void *)v448 + 508) = 0;
  *(_DWORD *)(*(void *)v448 + 508) ^= 0x3FFu;
  int v168 = *(_DWORD *)(*(void *)v448 + 508);
  *(_DWORD *)(*(void *)v448 + 508) = v167;
  if (*((void *)this + 1386) || *((_DWORD *)this + 2810) || *((_DWORD *)this + 2811))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1386, 508, 0, 0x3FFFFFFFFFFLL, 32, v168, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 512) = 0;
  uint64_t v169 = *((void *)this + 33);
  int v170 = *(_DWORD *)(v169 + 248);
  *(_DWORD *)(v169 + 248) = 0;
  *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFF00;
  uint64_t v171 = *((void *)this + 33);
  int v172 = *(_DWORD *)(v171 + 248);
  *(_DWORD *)(v171 + 248) = v170;
  if (*((void *)this + 1408) || *((_DWORD *)this + 2854) || *((_DWORD *)this + 2855))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1408, 248, 0, 0xFFFFFFFFLL, 8, v172, 4);
    if (result) {
      return result;
    }
  }
  int v173 = *(_DWORD *)(*(void *)v448 + 512);
  *(_DWORD *)(*(void *)v448 + 512) = 0;
  *(_DWORD *)(*(void *)v448 + 512) ^= 0x3FFu;
  int v174 = *(_DWORD *)(*(void *)v448 + 512);
  *(_DWORD *)(*(void *)v448 + 512) = v173;
  if (*((void *)this + 1408) || *((_DWORD *)this + 2854) || *((_DWORD *)this + 2855))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1408, 512, 0, 0x3FFFFFFFFFFLL, 32, v174, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 252) = 0;
  uint64_t v175 = *((void *)this + 33);
  int v176 = *(_DWORD *)(v175 + 252);
  *(_DWORD *)(v175 + 252) = 0;
  *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFF00;
  uint64_t v177 = *((void *)this + 33);
  int v178 = *(_DWORD *)(v177 + 252);
  *(_DWORD *)(v177 + 252) = v176;
  if (*((void *)this + 924) || *((_DWORD *)this + 1886) || *((_DWORD *)this + 1887))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 924, 252, 0, 0xFFFFFFFFLL, 8, v178, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 516) = 0;
  int v179 = *(_DWORD *)(*(void *)v448 + 516);
  *(_DWORD *)(*(void *)v448 + 516) = 0;
  *(_DWORD *)(*(void *)v448 + 516) ^= 0x3FFu;
  int v180 = *(_DWORD *)(*(void *)v448 + 516);
  *(_DWORD *)(*(void *)v448 + 516) = v179;
  if (*((void *)this + 924) || *((_DWORD *)this + 1886) || *((_DWORD *)this + 1887))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 924, 516, 0, 0x3FFFFFFFFFFLL, 32, v180, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 256) = 0;
  uint64_t v181 = *((void *)this + 33);
  int v182 = *(_DWORD *)(v181 + 256);
  *(_DWORD *)(v181 + 256) = 0;
  *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFF00;
  uint64_t v183 = *((void *)this + 33);
  int v184 = *(_DWORD *)(v183 + 256);
  *(_DWORD *)(v183 + 256) = v182;
  int v185 = (void *)((char *)this + 176 * v442 + 7568);
  if (*v185 || *((_DWORD *)this + 44 * v442 + 1930) || *((_DWORD *)this + 44 * v442 + 1931))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v442 + 946, 256, 0, 0xFFFFFFFFLL, 8, v184, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v186 = *(_DWORD *)(*(void *)v448 + 520);
  *(_DWORD *)(*(void *)v448 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*(void *)v448 + 520) ^= 0x3FFu;
  int v187 = *(_DWORD *)(*(void *)v448 + 520);
  *(_DWORD *)(*(void *)v448 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v186;
  if (*v185 || *((_DWORD *)this + 44 * v442 + 1930) || *((_DWORD *)this + 44 * v442 + 1931))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v185, 520, 0, 0x3FFFFFFFFFFLL, 32, v187, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  uint64_t v188 = *((void *)this + 33);
  int v189 = *(_DWORD *)(v188 + 260);
  *(_DWORD *)(v188 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 260) ^= 0xFFFFFF00;
  uint64_t v190 = *((void *)this + 33);
  int v191 = *(_DWORD *)(v190 + 260);
  *(_DWORD *)(v190 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v189;
  if (*((void *)this + 1430) || *((_DWORD *)this + 2898) || *((_DWORD *)this + 2899))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1430, 260, 0, 0xFFFFFFFFLL, 8, v191, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 524) = 0;
  int v192 = *(_DWORD *)(*(void *)v448 + 524);
  *(_DWORD *)(*(void *)v448 + 524) = 0;
  *(_DWORD *)(*(void *)v448 + 524) ^= 0x3FFu;
  int v193 = *(_DWORD *)(*(void *)v448 + 524);
  *(_DWORD *)(*(void *)v448 + 524) = v192;
  if (*((void *)this + 1430) || *((_DWORD *)this + 2898) || *((_DWORD *)this + 2899))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1430, 524, 0, 0x3FFFFFFFFFFLL, 32, v193, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 264) = 0;
  uint64_t v194 = *((void *)this + 33);
  int v195 = *(_DWORD *)(v194 + 264);
  *(_DWORD *)(v194 + 264) = 0;
  *(_DWORD *)(*((void *)this + 33) + 264) ^= 0xFFFFFF00;
  uint64_t v196 = *((void *)this + 33);
  int v197 = *(_DWORD *)(v196 + 264);
  *(_DWORD *)(v196 + 264) = v195;
  if (*((void *)this + 1452) || *((_DWORD *)this + 2942) || *((_DWORD *)this + 2943))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1452, 264, 0, 0xFFFFFFFFLL, 8, v197, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*(void *)v448 + 528) = 0;
  int v198 = *(_DWORD *)(*(void *)v448 + 528);
  *(_DWORD *)(*(void *)v448 + 528) = 0;
  *(_DWORD *)(*(void *)v448 + 528) ^= 0x3FFu;
  int v199 = *(_DWORD *)(*(void *)v448 + 528);
  *(_DWORD *)(*(void *)v448 + 528) = v198;
  if (*((void *)this + 1452) || *((_DWORD *)this + 2942) || *((_DWORD *)this + 2943))
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1452, 528, 0, 0x3FFFFFFFFFFLL, 32, v199, 4);
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(*((void *)this + 33) + 268) = 0;
  *(_DWORD *)(*((void *)this + 33) + 272) = 0;
  *(_DWORD *)(*((void *)this + 33) + 532) = 0;
  *(_DWORD *)(*((void *)this + 33) + 536) = 0;
  *(_DWORD *)(*((void *)this + 33) + 276) = 0;
  *(_DWORD *)(*((void *)this + 33) + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(*((void *)this + 33) + 544) = 0;
  uint64_t v200 = *((void *)this + 33);
  if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
  {
    int v201 = *(_DWORD *)(v200 + 272);
    *(_DWORD *)(v200 + 272) = 0;
    *(_DWORD *)(*(void *)v448 + 272) ^= 0xFFFFFF80;
    int v202 = *(_DWORD *)(*(void *)v448 + 272);
    *(_DWORD *)(*(void *)v448 + 272) = v201;
    int v204 = (void *)(v433 + 8);
    uint64_t v203 = *(void *)(v433 + 8);
    if (v436)
    {
      if (v203 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v433 + 8), 272, *(_DWORD *)(v433 + 68), 0xFFFFFFFFLL, 7, v202, 4);
        if (result) {
          return result;
        }
      }
      int v205 = *(_DWORD *)(*(void *)v448 + 536);
      *(_DWORD *)(*(void *)v448 + 536) = 0;
      *(_DWORD *)(*(void *)v448 + 536) ^= 0x3FFu;
      int v206 = *(_DWORD *)(*(void *)v448 + 536);
      *(_DWORD *)(*(void *)v448 + 536) = v205;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 536, *(_DWORD *)(v433 + 68), 0x3FFFFFFFFFFLL, 32, v206, 4);
        if (result) {
          return result;
        }
      }
      int v207 = *(_DWORD *)(*(void *)v448 + 268);
      *(_DWORD *)(*(void *)v448 + 268) = 0;
      *(_DWORD *)(*(void *)v448 + 268) ^= 0xFFFFFF80;
      int v208 = *(_DWORD *)(*(void *)v448 + 268);
      *(_DWORD *)(*(void *)v448 + 268) = v207;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 268, *(_DWORD *)(v433 + 80), 0xFFFFFFFFLL, 7, v208, 4);
        if (result) {
          return result;
        }
      }
      int v209 = *(_DWORD *)(*(void *)v448 + 532);
      *(_DWORD *)(*(void *)v448 + 532) = 0;
      *(_DWORD *)(*(void *)v448 + 532) ^= 0x3FFu;
      int v210 = *(_DWORD *)(*(void *)v448 + 532);
      *(_DWORD *)(*(void *)v448 + 532) = v209;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 532, *(_DWORD *)(v433 + 80), 0x3FFFFFFFFFFLL, 32, v210, 4);
        if (result) {
          return result;
        }
      }
      if (v440)
      {
        int v211 = *(_DWORD *)(*(void *)v448 + 280);
        *(_DWORD *)(*(void *)v448 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*(void *)v448 + 280) ^= 0xFFFFFF80;
        int v212 = *(_DWORD *)(*(void *)v448 + 280);
        *(_DWORD *)(*(void *)v448 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v211;
        if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 280, *(_DWORD *)(v439 + 56), 0xFFFFFFFFLL, 7, v212, 4);
          if (result) {
            return result;
          }
        }
        int v213 = *(_DWORD *)(*(void *)v448 + 544);
        *(_DWORD *)(*(void *)v448 + 544) = 0;
        *(_DWORD *)(*(void *)v448 + 544) ^= 0x3FFu;
        int v214 = *(_DWORD *)(*(void *)v448 + 544);
        *(_DWORD *)(*(void *)v448 + 544) = v213;
        if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 544, *(_DWORD *)(v439 + 56), 0x3FFFFFFFFFFLL, 32, v214, 4);
          if (result) {
            return result;
          }
        }
        int v215 = *(_DWORD *)(*(void *)v448 + 276);
        *(_DWORD *)(*(void *)v448 + 276) = 0;
        *(_DWORD *)(*(void *)v448 + 276) ^= 0xFFFFFF80;
        int v216 = *(_DWORD *)(*(void *)v448 + 276);
        *(_DWORD *)(*(void *)v448 + 276) = v215;
        if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 276, *(_DWORD *)(v439 + 68), 0xFFFFFFFFLL, 7, v216, 4);
          if (result) {
            return result;
          }
        }
        int v217 = *(_DWORD *)(*(void *)v448 + 540);
        *(_DWORD *)(*(void *)v448 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*(void *)v448 + 540) ^= 0x3FFu;
        int v218 = *(_DWORD *)(*(void *)v448 + 540);
        *(_DWORD *)(*(void *)v448 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v217;
        if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
        {
          int v219 = (void *)v439;
          int v220 = *(_DWORD *)(v439 + 68);
          int v221 = this;
LABEL_311:
          int v243 = 540;
LABEL_312:
          uint64_t result = CAHDec::addToPatcherList((uint64_t)v221, v219, v243, v220, 0x3FFFFFFFFFFLL, 32, v218, 4);
          if (result) {
            return result;
          }
        }
      }
    }
    else
    {
      if (v203 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v433 + 8), 272, *(_DWORD *)(v433 + 60), 0xFFFFFFFFLL, 7, v202, 4);
        if (result) {
          return result;
        }
      }
      int v244 = *(_DWORD *)(*(void *)v448 + 280);
      *(_DWORD *)(*(void *)v448 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*(void *)v448 + 280) ^= 0xFFFFFF80;
      int v245 = *(_DWORD *)(*(void *)v448 + 280);
      *(_DWORD *)(*(void *)v448 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v244;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 280, *(_DWORD *)(v433 + 64), 0xFFFFFFFFLL, 7, v245, 4);
        if (result) {
          return result;
        }
      }
      int v246 = *(_DWORD *)(*(void *)v448 + 268);
      *(_DWORD *)(*(void *)v448 + 268) = 0;
      *(_DWORD *)(*(void *)v448 + 268) ^= 0xFFFFFF80;
      int v247 = *(_DWORD *)(*(void *)v448 + 268);
      *(_DWORD *)(*(void *)v448 + 268) = v246;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 268, *(_DWORD *)(v433 + 72), 0xFFFFFFFFLL, 7, v247, 4);
        if (result) {
          return result;
        }
      }
      int v248 = *(_DWORD *)(*(void *)v448 + 276);
      *(_DWORD *)(*(void *)v448 + 276) = 0;
      *(_DWORD *)(*(void *)v448 + 276) ^= 0xFFFFFF80;
      int v249 = *(_DWORD *)(*(void *)v448 + 276);
      *(_DWORD *)(*(void *)v448 + 276) = v248;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 276, *(_DWORD *)(v433 + 76), 0xFFFFFFFFLL, 7, v249, 4);
        if (result) {
          return result;
        }
      }
      int v250 = *(_DWORD *)(*(void *)v448 + 536);
      *(_DWORD *)(*(void *)v448 + 536) = 0;
      *(_DWORD *)(*(void *)v448 + 536) ^= 0x3FFu;
      int v251 = *(_DWORD *)(*(void *)v448 + 536);
      *(_DWORD *)(*(void *)v448 + 536) = v250;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 536, *(_DWORD *)(v433 + 60), 0x3FFFFFFFFFFLL, 32, v251, 4);
        if (result) {
          return result;
        }
      }
      int v252 = *(_DWORD *)(*(void *)v448 + 544);
      *(_DWORD *)(*(void *)v448 + 544) = 0;
      *(_DWORD *)(*(void *)v448 + 544) ^= 0x3FFu;
      int v253 = *(_DWORD *)(*(void *)v448 + 544);
      *(_DWORD *)(*(void *)v448 + 544) = v252;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 544, *(_DWORD *)(v433 + 64), 0x3FFFFFFFFFFLL, 32, v253, 4);
        if (result) {
          return result;
        }
      }
      int v254 = *(_DWORD *)(*(void *)v448 + 532);
      *(_DWORD *)(*(void *)v448 + 532) = 0;
      *(_DWORD *)(*(void *)v448 + 532) ^= 0x3FFu;
      int v255 = *(_DWORD *)(*(void *)v448 + 532);
      *(_DWORD *)(*(void *)v448 + 532) = v254;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v204, 532, *(_DWORD *)(v433 + 72), 0x3FFFFFFFFFFLL, 32, v255, 4);
        if (result) {
          return result;
        }
      }
      int v256 = *(_DWORD *)(*(void *)v448 + 540);
      *(_DWORD *)(*(void *)v448 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*(void *)v448 + 540) ^= 0x3FFu;
      int v218 = *(_DWORD *)(*(void *)v448 + 540);
      *(_DWORD *)(*(void *)v448 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v256;
      if (*v204 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
      {
        int v220 = *(_DWORD *)(v433 + 76);
        int v221 = this;
        int v219 = (void *)(v433 + 8);
        goto LABEL_311;
      }
    }
  }
  else
  {
    int v222 = *(_DWORD *)(v200 + 268);
    *(_DWORD *)(v200 + 268) = 0;
    *(_DWORD *)(*((void *)this + 33) + 268) ^= 0xFFFFFF80;
    uint64_t v223 = *((void *)this + 33);
    int v224 = *(_DWORD *)(v223 + 268);
    *(_DWORD *)(v223 + 268) = v222;
    uint64_t v225 = (void *)((char *)this + 176 * v442 + 528);
    if (*v225 || *((_DWORD *)this + 44 * v442 + 170) || *((_DWORD *)this + 44 * v442 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v442 + 66, 268, 0, 0xFFFFFFFFLL, 7, v224, 4);
      if (result) {
        return result;
      }
    }
    int v226 = *(_DWORD *)(*(void *)v448 + 532);
    *(_DWORD *)(*(void *)v448 + 532) = 0;
    *(_DWORD *)(*(void *)v448 + 532) ^= 0x3FFu;
    int v227 = *(_DWORD *)(*(void *)v448 + 532);
    *(_DWORD *)(*(void *)v448 + 532) = v226;
    if (*v225 || *((_DWORD *)this + 44 * v442 + 170) || *((_DWORD *)this + 44 * v442 + 171))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v225, 532, 0, 0x3FFFFFFFFFFLL, 32, v227, 4);
      if (result) {
        return result;
      }
    }
    int v228 = *(_DWORD *)(*(void *)v448 + 272);
    *(_DWORD *)(*(void *)v448 + 272) = 0;
    *(_DWORD *)(*(void *)v448 + 272) ^= 0xFFFFFF80;
    int v229 = *(_DWORD *)(*(void *)v448 + 272);
    *(_DWORD *)(*(void *)v448 + 272) = v228;
    uint64_t v230 = (void *)(v433 + 8);
    if (*(void *)(v433 + 8) || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v433 + 8), 272, *(_DWORD *)(v433 + 60), 0xFFFFFFFFLL, 7, v229, 4);
      if (result) {
        return result;
      }
    }
    int v231 = *(_DWORD *)(*(void *)v448 + 536);
    *(_DWORD *)(*(void *)v448 + 536) = 0;
    *(_DWORD *)(*(void *)v448 + 536) ^= 0x3FFu;
    int v232 = *(_DWORD *)(*(void *)v448 + 536);
    *(_DWORD *)(*(void *)v448 + 536) = v231;
    if (*v230 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v230, 536, *(_DWORD *)(v433 + 60), 0x3FFFFFFFFFFLL, 32, v232, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v233 = *((void *)this + 33);
    int v234 = *(_DWORD *)(v233 + 276);
    *(_DWORD *)(v233 + 276) = 0;
    *(_DWORD *)(*((void *)this + 33) + 276) ^= 0xFFFFFF80;
    uint64_t v235 = *((void *)this + 33);
    int v236 = *(_DWORD *)(v235 + 276);
    *(_DWORD *)(v235 + 276) = v234;
    uint64_t v237 = (void *)((char *)this + 176 * v442 + 3344);
    if (*v237 || *((_DWORD *)this + 44 * v442 + 874) || *((_DWORD *)this + 44 * v442 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v442 + 418, 276, 0, 0xFFFFFFFFLL, 7, v236, 4);
      if (result) {
        return result;
      }
    }
    int v238 = *(_DWORD *)(*(void *)v448 + 540);
    *(_DWORD *)(*(void *)v448 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*(void *)v448 + 540) ^= 0x3FFu;
    int v239 = *(_DWORD *)(*(void *)v448 + 540);
    *(_DWORD *)(*(void *)v448 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v238;
    if (*v237 || *((_DWORD *)this + 44 * v442 + 874) || *((_DWORD *)this + 44 * v442 + 875))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v237, 540, 0, 0x3FFFFFFFFFFLL, 32, v239, 4);
      if (result) {
        return result;
      }
    }
    int v240 = *(_DWORD *)(*(void *)v448 + 280);
    *(_DWORD *)(*(void *)v448 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*(void *)v448 + 280) ^= 0xFFFFFF80;
    int v241 = *(_DWORD *)(*(void *)v448 + 280);
    *(_DWORD *)(*(void *)v448 + 28pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v240;
    if (*v230 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v230, 280, *(_DWORD *)(v433 + 64), 0xFFFFFFFFLL, 7, v241, 4);
      if (result) {
        return result;
      }
    }
    int v242 = *(_DWORD *)(*(void *)v448 + 544);
    *(_DWORD *)(*(void *)v448 + 544) = 0;
    *(_DWORD *)(*(void *)v448 + 544) ^= 0x3FFu;
    int v218 = *(_DWORD *)(*(void *)v448 + 544);
    *(_DWORD *)(*(void *)v448 + 544) = v242;
    if (*v230 || *(_DWORD *)(v433 + 160) || *(_DWORD *)(v433 + 164))
    {
      int v220 = *(_DWORD *)(v433 + 64);
      int v221 = this;
      int v219 = (void *)(v433 + 8);
      int v243 = 544;
      goto LABEL_312;
    }
  }
  if (*(_DWORD *)(v451 + 88) & 0x2000 | v434)
  {
    *((_DWORD *)this + v442 + 116) = 0;
    *(_DWORD *)(*((void *)this + 33) + 284) = 0;
    if (!v434) {
      goto LABEL_429;
    }
    uint64_t v257 = 0;
    uint64_t v258 = (uint64_t *)v465;
    int v259 = (void **)v464;
    int v450 = (void **)v463;
    while (1)
    {
      uint64_t v260 = *v258;
      if (!*v258 || !*(void *)(v260 + 48)) {
        return 0xFFFFFFFFLL;
      }
      int v261 = v446;
      if (v446)
      {
        uint64_t v262 = *(unsigned int *)(v260 + 44);
        *(void *)buf = 0;
        if (((*(uint64_t (**)(void, uint64_t, uint8_t *))(**((void **)this + 32) + 304))(*((void *)this + 32), v262, buf) & 1) == 0)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return 0xFFFFFFFFLL;
          }
          __int16 v452 = 0;
          uint64_t v53 = &_os_log_internal;
          uint64_t v54 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
          uint64_t v135 = (uint8_t *)&v452;
          uint32_t v136 = 2;
          goto LABEL_124;
        }
        *(void *)(v260 + 48) = *(void *)buf + 8;
        int v261 = 0x2000000;
      }
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) = *(_DWORD *)(*((void *)this + 33) + v257 + 284) & 0xFFFFFFF | ((v434 << 28) - 0x10000000);
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) &= 0xF3FFFFFF;
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) = *(_DWORD *)(*((void *)this + 33) + v257 + 284) & 0xFDFFFFFF | v261;
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) |= 0x1000000u;
      int v263 = v435 - *(_DWORD *)(v260 + 12);
      int v264 = v263 & 0x1FFFF;
      if (v263 < -32768) {
        int v264 = 98304;
      }
      if (v263 <= 0x8000) {
        int v265 = v264;
      }
      else {
        int v265 = 0x8000;
      }
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) = *(_DWORD *)(*((void *)this + 33) + v257 + 284) & 0xFFFE0000 | v265;
      *(_DWORD *)(*((void *)this + 33) + v257 + 284) = *(_DWORD *)(*((void *)this + 33) + v257 + 284) & 0xFFFDFFFF | ((*(_DWORD *)(v260 + 20) == 2) << 17);
      *(_DWORD *)(*((void *)this + 33) + v257 + 316) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 548) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 348) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 38pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 612) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 412) = 0;
      *(_DWORD *)(*((void *)this + 33) + v257 + 644) = 0;
      uint64_t v266 = *((void *)this + 33);
      if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
      {
        int v267 = v257 + 348;
        uint64_t v268 = v266 + v257;
        int v269 = *(_DWORD *)(v268 + 348);
        *(_DWORD *)(v268 + 348) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 348) ^= 0xFFFFFF80;
        uint64_t v270 = *(void *)v448 + v257;
        int v271 = *(_DWORD *)(v270 + 348);
        *(_DWORD *)(v270 + 348) = v269;
        uint64_t v272 = *(uint64_t **)(v260 + 48);
        uint64_t v273 = *v272;
        if (v436)
        {
          if (v273 || *((_DWORD *)v272 + 38) || *((_DWORD *)v272 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v272, v267, *((_DWORD *)v272 + 15), 0xFFFFFFFFLL, 7, v271, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v274 = *(void *)v448 + v257;
          int v275 = *(_DWORD *)(v274 + 580);
          *(_DWORD *)(v274 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 580) ^= 0x3FFu;
          uint64_t v276 = *(void *)v448 + v257;
          int v277 = *(_DWORD *)(v276 + 580);
          *(_DWORD *)(v276 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v275;
          uint64_t v278 = *(void *)(v260 + 48);
          if (*(void *)v278 || *(_DWORD *)(v278 + 152) || *(_DWORD *)(v278 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v278, (int)v257 + 580, *(_DWORD *)(v278 + 60), 0x3FFFFFFFFFFLL, 32, v277, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v279 = *(void *)v448 + v257;
          int v280 = *(_DWORD *)(v279 + 316);
          *(_DWORD *)(v279 + 316) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 316) ^= 0xFFFFFF80;
          uint64_t v281 = *(void *)v448 + v257;
          int v282 = *(_DWORD *)(v281 + 316);
          *(_DWORD *)(v281 + 316) = v280;
          uint64_t v283 = *(void *)(v260 + 48);
          if (*(void *)v283 || *(_DWORD *)(v283 + 152) || *(_DWORD *)(v283 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v283, (int)v257 + 316, *(_DWORD *)(v283 + 72), 0xFFFFFFFFLL, 7, v282, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v284 = *(void *)v448 + v257;
          int v285 = *(_DWORD *)(v284 + 548);
          *(_DWORD *)(v284 + 548) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 548) ^= 0x3FFu;
          uint64_t v286 = *(void *)v448 + v257;
          int v287 = *(_DWORD *)(v286 + 548);
          *(_DWORD *)(v286 + 548) = v285;
          uint64_t v288 = *(void *)(v260 + 48);
          if (*(void *)v288 || *(_DWORD *)(v288 + 152) || *(_DWORD *)(v288 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v288, (int)v257 + 548, *(_DWORD *)(v288 + 72), 0x3FFFFFFFFFFLL, 32, v287, 4);
            if (result) {
              return result;
            }
          }
          if (v440)
          {
            uint64_t v289 = *(void *)v448 + v257;
            int v290 = *(_DWORD *)(v289 + 412);
            *(_DWORD *)(v289 + 412) = 0;
            *(_DWORD *)(*(void *)v448 + v257 + 412) ^= 0xFFFFFF80;
            uint64_t v291 = *(void *)v448 + v257;
            int v292 = *(_DWORD *)(v291 + 412);
            *(_DWORD *)(v291 + 412) = v290;
            if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, (int)v257 + 412, *(_DWORD *)(v439 + 56), 0xFFFFFFFFLL, 7, v292, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v293 = *(void *)v448 + v257;
            int v294 = *(_DWORD *)(v293 + 644);
            *(_DWORD *)(v293 + 644) = 0;
            *(_DWORD *)(*(void *)v448 + v257 + 644) ^= 0x3FFu;
            uint64_t v295 = *(void *)v448 + v257;
            int v296 = *(_DWORD *)(v295 + 644);
            *(_DWORD *)(v295 + 644) = v294;
            if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, (int)v257 + 644, *(_DWORD *)(v439 + 56), 0x3FFFFFFFFFFLL, 32, v296, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v297 = *(void *)v448 + v257;
            int v298 = *(_DWORD *)(v297 + 380);
            *(_DWORD *)(v297 + 38pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
            *(_DWORD *)(*(void *)v448 + v257 + 380) ^= 0xFFFFFF80;
            uint64_t v299 = *(void *)v448 + v257;
            int v300 = *(_DWORD *)(v299 + 380);
            *(_DWORD *)(v299 + 38pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v298;
            if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
            {
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, (int)v257 + 380, *(_DWORD *)(v439 + 68), 0xFFFFFFFFLL, 7, v300, 4);
              if (result) {
                return result;
              }
            }
            uint64_t v301 = *(void *)v448 + v257;
            int v302 = *(_DWORD *)(v301 + 612);
            *(_DWORD *)(v301 + 612) = 0;
            *(_DWORD *)(*(void *)v448 + v257 + 612) ^= 0x3FFu;
            uint64_t v303 = *(void *)v448 + v257;
            int v304 = *(_DWORD *)(v303 + 612);
            *(_DWORD *)(v303 + 612) = v302;
            if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
            {
              int v305 = v257 + 612;
              uint64_t v306 = v439;
LABEL_426:
              int v343 = *(_DWORD *)(v306 + 68);
LABEL_427:
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v306, v305, v343, 0x3FFFFFFFFFFLL, 32, v304, 4);
              if (result) {
                return result;
              }
            }
          }
        }
        else
        {
          if (v273 || *((_DWORD *)v272 + 38) || *((_DWORD *)v272 + 39))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v272, v267, *((_DWORD *)v272 + 13), 0xFFFFFFFFLL, 7, v271, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v344 = *(void *)v448 + v257;
          int v345 = *(_DWORD *)(v344 + 412);
          *(_DWORD *)(v344 + 412) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 412) ^= 0xFFFFFF80;
          uint64_t v346 = *(void *)v448 + v257;
          int v347 = *(_DWORD *)(v346 + 412);
          *(_DWORD *)(v346 + 412) = v345;
          uint64_t v348 = *(void *)(v260 + 48);
          if (*(void *)v348 || *(_DWORD *)(v348 + 152) || *(_DWORD *)(v348 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v348, (int)v257 + 412, *(_DWORD *)(v348 + 56), 0xFFFFFFFFLL, 7, v347, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v349 = *(void *)v448 + v257;
          int v350 = *(_DWORD *)(v349 + 316);
          *(_DWORD *)(v349 + 316) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 316) ^= 0xFFFFFF80;
          uint64_t v351 = *(void *)v448 + v257;
          int v352 = *(_DWORD *)(v351 + 316);
          *(_DWORD *)(v351 + 316) = v350;
          uint64_t v353 = *(void *)(v260 + 48);
          if (*(void *)v353 || *(_DWORD *)(v353 + 152) || *(_DWORD *)(v353 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v353, (int)v257 + 316, *(_DWORD *)(v353 + 64), 0xFFFFFFFFLL, 7, v352, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v354 = *(void *)v448 + v257;
          int v355 = *(_DWORD *)(v354 + 380);
          *(_DWORD *)(v354 + 38pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 380) ^= 0xFFFFFF80;
          uint64_t v356 = *(void *)v448 + v257;
          int v357 = *(_DWORD *)(v356 + 380);
          *(_DWORD *)(v356 + 38pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v355;
          uint64_t v358 = *(void *)(v260 + 48);
          if (*(void *)v358 || *(_DWORD *)(v358 + 152) || *(_DWORD *)(v358 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v358, (int)v257 + 380, *(_DWORD *)(v358 + 68), 0xFFFFFFFFLL, 7, v357, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v359 = *(void *)v448 + v257;
          int v360 = *(_DWORD *)(v359 + 580);
          *(_DWORD *)(v359 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 580) ^= 0x3FFu;
          uint64_t v361 = *(void *)v448 + v257;
          int v362 = *(_DWORD *)(v361 + 580);
          *(_DWORD *)(v361 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v360;
          uint64_t v363 = *(void *)(v260 + 48);
          if (*(void *)v363 || *(_DWORD *)(v363 + 152) || *(_DWORD *)(v363 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v363, (int)v257 + 580, *(_DWORD *)(v363 + 52), 0x3FFFFFFFFFFLL, 32, v362, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v364 = *(void *)v448 + v257;
          int v365 = *(_DWORD *)(v364 + 644);
          *(_DWORD *)(v364 + 644) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 644) ^= 0x3FFu;
          uint64_t v366 = *(void *)v448 + v257;
          int v367 = *(_DWORD *)(v366 + 644);
          *(_DWORD *)(v366 + 644) = v365;
          uint64_t v368 = *(void *)(v260 + 48);
          if (*(void *)v368 || *(_DWORD *)(v368 + 152) || *(_DWORD *)(v368 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v368, (int)v257 + 644, *(_DWORD *)(v368 + 56), 0x3FFFFFFFFFFLL, 32, v367, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v369 = *(void *)v448 + v257;
          int v370 = *(_DWORD *)(v369 + 548);
          *(_DWORD *)(v369 + 548) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 548) ^= 0x3FFu;
          uint64_t v371 = *(void *)v448 + v257;
          int v372 = *(_DWORD *)(v371 + 548);
          *(_DWORD *)(v371 + 548) = v370;
          uint64_t v373 = *(void *)(v260 + 48);
          if (*(void *)v373 || *(_DWORD *)(v373 + 152) || *(_DWORD *)(v373 + 156))
          {
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v373, (int)v257 + 548, *(_DWORD *)(v373 + 64), 0x3FFFFFFFFFFLL, 32, v372, 4);
            if (result) {
              return result;
            }
          }
          uint64_t v374 = *(void *)v448 + v257;
          int v375 = *(_DWORD *)(v374 + 612);
          *(_DWORD *)(v374 + 612) = 0;
          *(_DWORD *)(*(void *)v448 + v257 + 612) ^= 0x3FFu;
          uint64_t v376 = *(void *)v448 + v257;
          int v304 = *(_DWORD *)(v376 + 612);
          *(_DWORD *)(v376 + 612) = v375;
          uint64_t v306 = *(void *)(v260 + 48);
          if (*(void *)v306 || *(_DWORD *)(v306 + 152) || *(_DWORD *)(v306 + 156))
          {
            int v305 = v257 + 612;
            goto LABEL_426;
          }
        }
      }
      else
      {
        uint64_t v307 = v266 + v257;
        int v308 = *(_DWORD *)(v307 + 316);
        *(_DWORD *)(v307 + 316) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 316) ^= 0xFFFFFF80;
        uint64_t v309 = *(void *)v448 + v257;
        int v310 = *(_DWORD *)(v309 + 316);
        *(_DWORD *)(v309 + 316) = v308;
        uint64_t v311 = (uint64_t)*v259;
        if (**v259 || *(_DWORD *)(v311 + 152) || *(_DWORD *)(v311 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v259, (int)v257 + 316, 0, 0xFFFFFFFFLL, 7, v310, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v312 = *(void *)v448 + v257;
        int v313 = *(_DWORD *)(v312 + 548);
        *(_DWORD *)(v312 + 548) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 548) ^= 0x3FFu;
        uint64_t v314 = *(void *)v448 + v257;
        int v315 = *(_DWORD *)(v314 + 548);
        *(_DWORD *)(v314 + 548) = v313;
        if (*(void *)v311 || *(_DWORD *)(v311 + 152) || *(_DWORD *)(v311 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v311, (int)v257 + 548, 0, 0x3FFFFFFFFFFLL, 32, v315, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v316 = *(void *)v448 + v257;
        int v317 = *(_DWORD *)(v316 + 348);
        *(_DWORD *)(v316 + 348) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 348) ^= 0xFFFFFF80;
        uint64_t v318 = *(void *)v448 + v257;
        int v319 = *(_DWORD *)(v318 + 348);
        *(_DWORD *)(v318 + 348) = v317;
        uint64_t v320 = *(void *)(v260 + 48);
        if (*(void *)v320 || *(_DWORD *)(v320 + 152) || *(_DWORD *)(v320 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v320, (int)v257 + 348, *(_DWORD *)(v320 + 52), 0xFFFFFFFFLL, 7, v319, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v321 = *(void *)v448 + v257;
        int v322 = *(_DWORD *)(v321 + 580);
        *(_DWORD *)(v321 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 580) ^= 0x3FFu;
        uint64_t v323 = *(void *)v448 + v257;
        int v324 = *(_DWORD *)(v323 + 580);
        *(_DWORD *)(v323 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v322;
        uint64_t v325 = *(void *)(v260 + 48);
        if (*(void *)v325 || *(_DWORD *)(v325 + 152) || *(_DWORD *)(v325 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v325, (int)v257 + 580, *(_DWORD *)(v325 + 52), 0x3FFFFFFFFFFLL, 32, v324, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v326 = *(void *)v448 + v257;
        int v327 = *(_DWORD *)(v326 + 380);
        *(_DWORD *)(v326 + 38pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 380) ^= 0xFFFFFF80;
        uint64_t v328 = *(void *)v448 + v257;
        int v329 = *(_DWORD *)(v328 + 380);
        *(_DWORD *)(v328 + 38pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v327;
        uint64_t v330 = (uint64_t)*v450;
        if (**v450 || *(_DWORD *)(v330 + 152) || *(_DWORD *)(v330 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, *v450, (int)v257 + 380, 0, 0xFFFFFFFFLL, 7, v329, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v331 = *(void *)v448 + v257;
        int v332 = *(_DWORD *)(v331 + 612);
        *(_DWORD *)(v331 + 612) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 612) ^= 0x3FFu;
        uint64_t v333 = *(void *)v448 + v257;
        int v334 = *(_DWORD *)(v333 + 612);
        *(_DWORD *)(v333 + 612) = v332;
        if (*(void *)v330 || *(_DWORD *)(v330 + 152) || *(_DWORD *)(v330 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v330, (int)v257 + 612, 0, 0x3FFFFFFFFFFLL, 32, v334, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v335 = *(void *)v448 + v257;
        int v336 = *(_DWORD *)(v335 + 412);
        *(_DWORD *)(v335 + 412) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 412) ^= 0xFFFFFF80;
        uint64_t v337 = *(void *)v448 + v257;
        int v338 = *(_DWORD *)(v337 + 412);
        *(_DWORD *)(v337 + 412) = v336;
        uint64_t v339 = *(void *)(v260 + 48);
        if (*(void *)v339 || *(_DWORD *)(v339 + 152) || *(_DWORD *)(v339 + 156))
        {
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v339, (int)v257 + 412, *(_DWORD *)(v339 + 56), 0xFFFFFFFFLL, 7, v338, 4);
          if (result) {
            return result;
          }
        }
        uint64_t v340 = *(void *)v448 + v257;
        int v341 = *(_DWORD *)(v340 + 644);
        *(_DWORD *)(v340 + 644) = 0;
        *(_DWORD *)(*(void *)v448 + v257 + 644) ^= 0x3FFu;
        uint64_t v342 = *(void *)v448 + v257;
        int v304 = *(_DWORD *)(v342 + 644);
        *(_DWORD *)(v342 + 644) = v341;
        uint64_t v306 = *(void *)(v260 + 48);
        if (*(void *)v306 || *(_DWORD *)(v306 + 152) || *(_DWORD *)(v306 + 156))
        {
          int v305 = v257 + 644;
          int v343 = *(_DWORD *)(v306 + 56);
          goto LABEL_427;
        }
      }
      v257 += 4;
      ++v258;
      ++v259;
      ++v450;
      if (4 * v434 == v257) {
        goto LABEL_429;
      }
    }
  }
  *(_DWORD *)(v451 + 88) |= 0x2000u;
  *((_DWORD *)this + v442 + 116) = 1;
  *(_DWORD *)(*((void *)this + 33) + 284) = 0;
LABEL_429:
  *(_DWORD *)(*(void *)v448 + 444) = 0;
  *(_DWORD *)(*(void *)v448 + 448) = 0;
  *(_DWORD *)(*(void *)v448 + 452) = 0;
  *(_DWORD *)(*(void *)v448 + 456) = 0;
  if (!v447) {
    goto LABEL_487;
  }
  uint64_t v377 = *((void *)this + 32);
  if (v437 && v438 == 2)
  {
    int v378 = *(_DWORD *)(*(void *)(v377 + 8360) + 60);
    uint64_t v379 = *((void *)this + 33);
    int v380 = *(_DWORD *)(v379 + 444);
    *(_DWORD *)(v379 + 444) = 0;
    *(_DWORD *)(*((void *)this + 33) + 444) ^= 0xFFFFFFC0;
    uint64_t v381 = *((void *)this + 33);
    int v382 = *(_DWORD *)(v381 + 444);
    *(_DWORD *)(v381 + 444) = v380;
    uint64_t v383 = *(void *)(*((void *)this + 32) + 8360);
    if (*(void *)v383 || *(_DWORD *)(v383 + 152) || *(_DWORD *)(v383 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v383, 444, v378, 0xFFFFFFFFLL, 6, v382, 4);
      if (result) {
        return result;
      }
    }
    uint64_t v384 = *((void *)this + 33);
    int v385 = *(_DWORD *)(v384 + 676);
    *(_DWORD *)(v384 + 676) = 0;
    *(_DWORD *)(*((void *)this + 33) + 676) ^= 0x3FFu;
    uint64_t v386 = *((void *)this + 33);
    int v387 = *(_DWORD *)(v386 + 676);
    *(_DWORD *)(v386 + 676) = v385;
    uint64_t v388 = *(void *)(*((void *)this + 32) + 8360);
    if (*(void *)v388 || *(_DWORD *)(v388 + 152) || *(_DWORD *)(v388 + 156))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v388, 676, v378, 0x3FFFFFFFFFFLL, 32, v387, 4);
      if (result) {
        return result;
      }
    }
    if (v440)
    {
      int v389 = *(_DWORD *)(v439 + 56);
      int v390 = *(_DWORD *)(*(void *)v448 + 448);
      *(_DWORD *)(*(void *)v448 + 448) = 0;
      *(_DWORD *)(*(void *)v448 + 448) ^= 0xFFFFFFC0;
      int v391 = *(_DWORD *)(*(void *)v448 + 448);
      *(_DWORD *)(*(void *)v448 + 448) = v390;
      if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 448, v389, 0xFFFFFFFFLL, 6, v391, 4);
        if (result) {
          return result;
        }
      }
      int v392 = *(_DWORD *)(*(void *)v448 + 680);
      *(_DWORD *)(*(void *)v448 + 68pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      *(_DWORD *)(*(void *)v448 + 680) ^= 0x3FFu;
      int v393 = *(_DWORD *)(*(void *)v448 + 680);
      *(_DWORD *)(*(void *)v448 + 68pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v392;
      if (*(void *)v439 || *(_DWORD *)(v439 + 152) || *(_DWORD *)(v439 + 156))
      {
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v439, 680, v389, 0x3FFFFFFFFFFLL, 32, v393, 4);
        if (result) {
          return result;
        }
      }
    }
    if (v441)
    {
      *(_DWORD *)(*((void *)this + 33) + 452) = *(_DWORD *)(*((void *)this + 33) + 452) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 84) >> 6) & 0xFFF) << 6);
      if (v440)
      {
        uint64_t v394 = v439;
LABEL_485:
        uint64_t v423 = (_DWORD *)(v394 + 80);
LABEL_486:
        *(_DWORD *)(*(void *)v448 + 456) = *(_DWORD *)(*(void *)v448 + 456) & 0xFFF8003F | (((*v423 >> 6) & 0x1FFF) << 6);
      }
LABEL_487:
      uint64_t v424 = *((void *)this + 32);
      if (*(_DWORD *)(v424 + 2360) != 1) {
        return 0;
      }
      uint64_t v425 = *(void *)v448;
      *(_DWORD *)(*(void *)v448 + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*(void *)v448 + 780) & 0xFFFFFFFE | *(_DWORD *)(v424 + 2508) & 1;
      if (*(_DWORD *)(v424 + 2508))
      {
        *(_DWORD *)(v425 + 278pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x10000000;
        *(_DWORD *)(v425 + 2784) = *(_DWORD *)(v424 + 2368);
        *(void *)(v425 + 2792) = 0;
        *(_DWORD *)(v425 + 2788) = 0;
        *(_OWORD *)(v425 + 280pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v424 + 2372);
        long long v426 = *(_OWORD *)(v424 + 2388);
        *(_OWORD *)(v425 + 2832) = *(_OWORD *)(v424 + 2404);
        *(_OWORD *)(v425 + 2816) = v426;
      }
      *(_DWORD *)(*(void *)v448 + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*(void *)v448 + 780) & 0xFFFFFFFD | (2
                                                                                                * (*(_DWORD *)(v424 + 2512) & 1));
      if (*(_DWORD *)(v424 + 2512))
      {
        *(_DWORD *)(v425 + 2848) = 0;
        char v427 = *(_DWORD *)(v424 + 2424);
        *(_DWORD *)(v425 + 2848) = (*(_DWORD *)(v424 + 2424) & 1) << 22;
        int v428 = ((*(_DWORD *)(v424 + 2420) & 1) << 23) | ((v427 & 1) << 22) | 0x20000000;
        *(_DWORD *)(v425 + 2848) = v428;
        *(_DWORD *)(v425 + 2848) = v428 | (*(_DWORD *)(v424 + 2364) == 0);
        long long v429 = *(_OWORD *)(v424 + 2428);
        long long v430 = *(_OWORD *)(v424 + 2444);
        *(_OWORD *)(v425 + 2884) = *(_OWORD *)(v424 + 2460);
        *(_OWORD *)(v425 + 2868) = v430;
        *(_OWORD *)(v425 + 2852) = v429;
      }
      *(_DWORD *)(*(void *)v448 + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*(void *)v448 + 780) & 0xFFFFFFFB | (4
                                                                                                * (*(_DWORD *)(v424 + 2516) & 1));
      *(_DWORD *)(*(void *)v448 + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*(void *)v448 + 780) & 0xFFFFFFF7 | (8
                                                                                                * (*(_DWORD *)(v424 + 2520) & 1));
      *(_DWORD *)(*(void *)v448 + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*(void *)v448 + 780) & 0xFFFFFFEF | (16
                                                                                                * (*(_DWORD *)(v424 + 2524) & 1));
      if (!*(_DWORD *)(v424 + 2516)) {
        return 0;
      }
      *(_DWORD *)(v425 + 2904) = 0;
      if (*(_DWORD *)(v424 + 2476) == 2) {
        int v431 = 805306368;
      }
      else {
        int v431 = 813694976;
      }
      *(_DWORD *)(v425 + 2904) = v431;
      memcpy((void *)(v425 + 2908), (const void *)(v424 + 2480), 4 * *(unsigned int *)(v424 + 2476));
      uint64_t result = 0;
      *(_DWORD *)(v424 + 2516) = 0;
      return result;
    }
    if (CAHDecClaryHevc::getSWRStride(this, *(unsigned __int16 *)(v451 + 160) - *(unsigned __int16 *)(v451 + 156) + 1, *(_DWORD *)(v34 + 23176 * v35 + 3636), *(_DWORD *)(v34 + 23176 * v35 + 3640), *(_DWORD *)(v34 + 23176 * v35 + 22852)))return 0xFFFFFFFFLL; {
    *(_DWORD *)(*((void *)this + 33) + 452) = *(_DWORD *)(*((void *)this + 33) + 452) & 0xFFFC003F | (((*((_DWORD *)this + 2956) >> 6) & 0xFFF) << 6);
    }
    if (!v440) {
      goto LABEL_487;
    }
LABEL_505:
    uint64_t v423 = (_DWORD *)((char *)this + 11828);
    goto LABEL_486;
  }
  unsigned int v395 = *(unsigned __int8 *)(v377 + 3004);
  if (*(unsigned char *)(v377 + 3004))
  {
    unsigned int v395 = *(_DWORD *)(v377 + 3016);
    unsigned int v396 = *(_DWORD *)(v377 + 3020);
  }
  else
  {
    unsigned int v396 = 0;
  }
  uint64_t v397 = *(void *)(v377 + 8360);
  uint64_t v398 = *(unsigned int *)(v397 + 56);
  unint64_t v399 = *(unsigned int *)(v397 + 52) + (unint64_t)v395;
  uint64_t v400 = *((void *)this + 33);
  int v401 = *(_DWORD *)(v400 + 444);
  *(_DWORD *)(v400 + 444) = 0;
  *(_DWORD *)(*((void *)this + 33) + 444) ^= 0xFFFFFFC0;
  uint64_t v402 = *((void *)this + 33);
  int v403 = *(_DWORD *)(v402 + 444);
  *(_DWORD *)(v402 + 444) = v401;
  uint64_t v404 = *(void *)(*((void *)this + 32) + 8360);
  unint64_t v405 = HIDWORD(v399);
  if (!*(void *)v404 && !*(_DWORD *)(v404 + 152) && !*(_DWORD *)(v404 + 156)) {
    goto LABEL_508;
  }
  if (v405 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "populatePictureRegisters";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1253;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v404, 444, v399, 0xFFFFFFFFLL, 6, v403, 4);
  if (!result)
  {
LABEL_508:
    uint64_t v406 = *((void *)this + 33);
    int v407 = *(_DWORD *)(v406 + 676);
    *(_DWORD *)(v406 + 676) = 0;
    *(_DWORD *)(*((void *)this + 33) + 676) ^= 0x3FFu;
    uint64_t v408 = *((void *)this + 33);
    int v409 = *(_DWORD *)(v408 + 676);
    *(_DWORD *)(v408 + 676) = v407;
    uint64_t v410 = *(void *)(*((void *)this + 32) + 8360);
    if (!*(void *)v410 && !*(_DWORD *)(v410 + 152) && !*(_DWORD *)(v410 + 156)) {
      goto LABEL_509;
    }
    if (v405 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "populatePictureRegisters";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1255;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v410, 676, v399, 0x3FFFFFFFFFFLL, 32, v409, 4);
    if (!result)
    {
LABEL_509:
      unint64_t v411 = v398 + v396;
      uint64_t v412 = *((void *)this + 33);
      int v413 = *(_DWORD *)(v412 + 448);
      *(_DWORD *)(v412 + 448) = 0;
      *(_DWORD *)(*((void *)this + 33) + 448) ^= 0xFFFFFFC0;
      uint64_t v414 = *((void *)this + 33);
      int v415 = *(_DWORD *)(v414 + 448);
      *(_DWORD *)(v414 + 448) = v413;
      uint64_t v416 = *(void *)(*((void *)this + 32) + 8360);
      unint64_t v417 = HIDWORD(v411);
      if (!*(void *)v416 && !*(_DWORD *)(v416 + 152) && !*(_DWORD *)(v416 + 156)) {
        goto LABEL_510;
      }
      if (v417 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1258;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v416, 448, v411, 0xFFFFFFFFLL, 6, v415, 4);
      if (!result)
      {
LABEL_510:
        uint64_t v418 = *((void *)this + 33);
        int v419 = *(_DWORD *)(v418 + 680);
        *(_DWORD *)(v418 + 68pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
        *(_DWORD *)(*((void *)this + 33) + 680) ^= 0x3FFu;
        uint64_t v420 = *((void *)this + 33);
        int v421 = *(_DWORD *)(v420 + 680);
        *(_DWORD *)(v420 + 68pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v419;
        uint64_t v422 = *(void *)(*((void *)this + 32) + 8360);
        if (!*(void *)v422 && !*(_DWORD *)(v422 + 152) && !*(_DWORD *)(v422 + 156)) {
          goto LABEL_483;
        }
        if (v417 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "populatePictureRegisters";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1260;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v422, 680, v411, 0x3FFFFFFFFFFLL, 32, v421, 4);
        if (!result)
        {
LABEL_483:
          if (v441)
          {
            *(_DWORD *)(*((void *)this + 33) + 452) = *(_DWORD *)(*((void *)this + 33) + 452) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 76) >> 6) & 0xFFF) << 6);
            uint64_t v394 = *(void *)(*((void *)this + 32) + 8360);
            goto LABEL_485;
          }
          if (CAHDecClaryHevc::getSWRStride(this, *(unsigned __int16 *)(v451 + 160) - *(unsigned __int16 *)(v451 + 156) + 1, *(_DWORD *)(v34 + 23176 * v35 + 3636), *(_DWORD *)(v34 + 23176 * v35 + 3640), *(_DWORD *)(v34 + 23176 * v35 + 22852)))return 0xFFFFFFFFLL; {
          *(_DWORD *)(*((void *)this + 33) + 452) = *(_DWORD *)(*((void *)this + 33) + 452) & 0xFFFC003F | (((*((_DWORD *)this + 2956) >> 6) & 0xFFF) << 6);
          }
          goto LABEL_505;
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecClaryHevc::getSWRStride(CAHDecClaryHevc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1478) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 2957) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecClaryHevc::getTileStartCTU(CAHDecClaryHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 684);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecClaryHevc::getTileEndCTU(CAHDecClaryHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 684);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecClaryHevc::getTileIdxAbove(CAHDecClaryHevc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 684);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecClaryHevc::populateAvdWork(CAHDecClaryHevc *this, unsigned int a2)
{
  v144[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 32);
  uint64_t v5 = *((void *)this + 33);
  int v6 = *(_DWORD *)(v4 + 8320);
  int v7 = *(_DWORD *)(v4 + 8324);
  uint64_t v8 = *(void *)(v4 + 8280);
  uint64_t v9 = *(void *)(v4 + 8288);
  uint64_t v109 = *(void *)(v4 + 8296);
  unsigned int v10 = *(_DWORD *)(v4 + 9036);
  unsigned int v11 = *(_DWORD *)(v4 + 3068);
  int v12 = *(_DWORD *)(v4 + 3072);
  v144[0] = 0;
  v144[1] = 0;
  uint64_t v143 = 0;
  unsigned int v13 = v10 >> 28;
  uint64_t v14 = v8 + 23176 * v6;
  unsigned int v15 = *(_DWORD *)(v14 + 22888);
  if (v10)
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v16 = v15 > v13 + 1;
    }
    else {
      BOOL v16 = 0;
    }
    BOOL v17 = v16 && v12 == 0;
    int v18 = v17;
    int v133 = v18;
  }
  else
  {
    int v133 = 0;
  }
  unsigned int v126 = *(unsigned __int16 *)(v5 + 686) * *(unsigned __int16 *)(v5 + 684);
  if ((v10 & 2) != 0 && *(unsigned char *)(v9 + 9856 * v7 + 52))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 53)) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v126 > v13 + 1;
    }
    int v21 = v19 && v12 == 0;
    int v135 = v21;
  }
  else
  {
    int v135 = 0;
  }
  uint64_t v115 = (unsigned int *)(v14 + 22880);
  if ((v10 & 0x20) != 0 && !*(unsigned char *)(v9 + 9856 * v7 + 53))
  {
    if (*(unsigned char *)(v9 + 9856 * v7 + 52)) {
      BOOL v83 = 0;
    }
    else {
      BOOL v83 = v11 > v13 + 1;
    }
    int v85 = v83 && v12 == 0;
    int v129 = v85;
  }
  else
  {
    int v129 = 0;
  }
  unsigned int v22 = 0;
  unsigned int v137 = *v115;
  unsigned int v23 = v13 + 2;
  BOOL v17 = (v10 & 4) == 0;
  int v24 = v133;
  if (v17) {
    int v24 = 1;
  }
  if (((v24 | v135) & 1) == 0 && (v129 & 1) == 0) {
    unsigned int v22 = *(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & (v13 + 1);
  }
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  memset_pattern16(__b, &unk_223AD0630, 8uLL);
  uint64_t v25 = v5 + 223724;
  unsigned int v103 = v133 | v135 | v129;
  if (v103) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = 1;
  }
  unint64_t v27 = v22 + v26;
  uint64_t v120 = v26;
  unsigned int v105 = 0x1000 / v26;
  uint64_t v28 = 48 * (0x1000 / v26);
  uint64_t v29 = v22;
  unint64_t v30 = v22;
  do
  {
    v144[v30] = v25 + (v30 - v22) * v28;
    ++v30;
  }
  while (v30 < v27);
  uint64_t v102 = v28;
  unint64_t v106 = v27;
  uint64_t v31 = v144[v22];
  uint64_t v123 = v5 + 223724;
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v25) >> 4);
  unint64_t v104 = v22;
  if (!a2)
  {
    uint64_t v95 = 0;
    int v96 = 0;
    HIDWORD(v138) = 0;
    unsigned int v43 = v22;
    goto LABEL_165;
  }
  uint64_t v136 = 0;
  unsigned int v117 = 0;
  int v113 = 0;
  int v121 = 0;
  uint64_t v130 = 0;
  uint64_t v134 = 0;
  unsigned int v33 = v22;
  unsigned int v34 = v15;
  int v35 = 0;
  uint64_t v138 = 0;
  unsigned int v36 = a2;
  uint64_t v37 = 0;
  uint64_t v38 = v9 + 9856 * v7;
  unsigned int v39 = (unsigned char *)(v38 + 52);
  int v118 = (unsigned char *)(v38 + 53);
  int v40 = v133;
  if (v133) {
    int v41 = 12;
  }
  else {
    int v41 = 4;
  }
  int v116 = v41;
  unsigned int v122 = v36 - 1;
  unsigned int v111 = v34 - 1;
  unsigned int v112 = v34;
  unsigned int v110 = v34 - 2;
  unsigned int v42 = v120;
  int v108 = &__b[v29];
  unsigned int v101 = v36;
  uint64_t v107 = v36;
  uint64_t v124 = v5 + 3272;
  unsigned int v100 = v33;
  unsigned int v43 = v33;
  int v128 = v39;
  do
  {
    if (*v39) {
      int v44 = 1;
    }
    else {
      int v44 = v40;
    }
    if (v44 != 1)
    {
      unsigned int v47 = 1;
LABEL_54:
      uint64_t v48 = 0;
      int v114 = 0;
      uint64_t v49 = v109 + 2360 * v136;
      uint64_t v119 = (void *)(v49 + 1904);
      int v125 = (int *)(v49 + 36);
      uint64_t v127 = (unsigned char *)(v49 + 32);
      uint64_t v132 = v47;
      while (1)
      {
        if (!(v48 | v136))
        {
          *(_WORD *)(v31 + 4) = 0;
          *(_WORD *)(v31 + 6) = v43;
          *(_DWORD *)(v31 + 8) = 0;
          *(_WORD *)(v31 + 12) = 0;
          LODWORD(v13pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v124 + 368 * v136);
          if (!(*(unsigned int (**)(void))(**((void **)this + 32) + 448))()) {
            return 0xFFFFFFFFLL;
          }
          int v54 = *v125;
          *(_DWORD *)(v31 + 32) = *v125;
          *(_DWORD *)(v31 + 36) = v54;
          HIDWORD(v138) = 0;
          *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecClaryHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v137);
          __int16 v55 = 271;
          goto LABEL_159;
        }
        if (v48)
        {
          int v50 = *(_DWORD *)(*v119 + 4 * v48 - 4) + 1;
          if (*v128)
          {
            if (*v118)
            {
              unsigned int v51 = *v115;
              unsigned int v52 = (v51 + v138) / v51;
              v50 += v114;
              if (v52 >= *(unsigned __int16 *)(*((void *)this + 33) + 2 * (v121 + 1) + 730))
              {
                LODWORD(v138) = (*(uint64_t (**)(CAHDecClaryHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v137);
                int v114 = 0;
                int v35 = v116;
              }
              else
              {
                LODWORD(v138) = v113 + v52 * v51;
                if (!v133)
                {
                  int v114 = v50;
                  int v40 = 0;
                  goto LABEL_160;
                }
                int v114 = 0;
                int v53 = __b[v43];
                __b[v43] = 0;
                if (v53) {
                  int v35 = 72;
                }
                else {
                  int v35 = 8;
                }
              }
            }
            else
            {
              LODWORD(v138) = (*(uint64_t (**)(CAHDecClaryHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v137);
              int v35 = 4;
            }
          }
          else if (v133)
          {
            LODWORD(v138) = (*v115 + v138) / *v115 * *v115;
            int v35 = 8;
          }
          int v62 = 48 * v32;
          uint64_t v63 = v140;
          if (*(void *)v140 || *(_DWORD *)(v140 + 152) || *(_DWORD *)(v140 + 156))
          {
            int v64 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1886;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v64 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223746, HIDWORD(v138) + v64, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v63 = v140;
            if (*(void *)v140) {
              goto LABEL_103;
            }
          }
          if (*(_DWORD *)(v63 + 152) || *(_DWORD *)(v63 + 156))
          {
LABEL_103:
            int v65 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1887;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v65 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v63, v62 + 223748, HIDWORD(v138) + v65, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v50;
          HIDWORD(v138) += v50;
          unsigned int v42 = v120;
          int v40 = v133;
        }
        else
        {
          int v56 = 48 * v32;
          uint64_t v57 = v140;
          if (*(void *)v140 || *(_DWORD *)(v140 + 152) || *(_DWORD *)(v140 + 156))
          {
            int v58 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1810;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v58 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223746, HIDWORD(v138) + v58, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
            uint64_t v57 = v140;
            if (*(void *)v140) {
              goto LABEL_76;
            }
          }
          if (*(_DWORD *)(v57 + 152) || *(_DWORD *)(v57 + 156))
          {
LABEL_76:
            int v60 = v139;
            if ((v139 + (unint64_t)HIDWORD(v138)) >> 32
              && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1811;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v60 = v139;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v57, v56 + 223748, HIDWORD(v138) + v60, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v31 + 28) = v130 - HIDWORD(v138);
          int v61 = *(_DWORD *)(v124 + 368 * v136);
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t *))(**((void **)this + 32) + 448))(*((void *)this + 32), v136, &v140, &v139))return 0xFFFFFFFFLL; {
          LODWORD(v13pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v61;
          }
          if (*v127) {
            int v35 = 2;
          }
          else {
            int v35 = 258;
          }
          int v40 = v133;
          LODWORD(v138) = *v125;
          if (v133 && *v125 % v137 == v113)
          {
            HIDWORD(v138) = 0;
            if (__b[v43])
            {
              v35 |= 0x48u;
              __b[v43] = 0;
            }
            else
            {
              v35 |= 8u;
            }
          }
          else
          {
            HIDWORD(v138) = 0;
          }
        }
        unsigned int v66 = v37 + 1;
        if ((int)v37 + 1 < v126)
        {
          int v67 = (*(uint64_t (**)(CAHDecClaryHevc *, void, void))(*(void *)this + 64))(this, (v37 + 1), v137);
          int v68 = v116;
          if (v138 != v67) {
            int v68 = 0;
          }
          v35 |= v68;
        }
        *(_WORD *)(v31 + 16) = v35;
        if (v134 == v122) {
          *(_WORD *)(v31 + 18) |= 2u;
        }
        if (v37 == v126 - 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        int v69 = v135;
        if (v37 != v126 - 2) {
          int v69 = 0;
        }
        if (v69 == 1) {
          *(_WORD *)(v31 + 18) |= 4u;
        }
        if (v40
          && ((int v70 = *(unsigned __int16 *)(v31 + 10), v112 > 1) ? (v71 = v110 == v70) : (v71 = 0),
              !v71 ? (int v72 = 0) : (int v72 = 1),
              v111 == v70 || v72))
        {
          *(_WORD *)(v31 + 18) |= 8u;
          if ((v35 & 4) != 0)
          {
LABEL_132:
            if (*v128 && *v118)
            {
              uint64_t v73 = *((void *)this + 33);
              unsigned int v74 = *(unsigned __int16 *)(v73 + 684);
              unsigned int v117 = (v43
                    - *(unsigned __int16 *)(v73 + 730 + 2 * (v66 / v74))
                    + *(unsigned __int16 *)(v73 + 730 + 2 * (v66 / v74 + 1)))
                   % v42;
              int v121 = v66 / v74;
              int v113 = *(unsigned __int16 *)(v73 + 684 + 2 * (v66 % v74) + 4);
              memset_pattern16(v108, &unk_223AD0630, 4 * (v120 - 1) + 4);
            }
            uint64_t v37 = (v37 + 1);
          }
        }
        else if ((v35 & 4) != 0)
        {
          goto LABEL_132;
        }
        if ((v35 & 0x44) != 0)
        {
          int v75 = (*(uint64_t (**)(CAHDecClaryHevc *, uint64_t))(*(void *)this + 80))(this, v37);
          unsigned int v76 = HIDWORD(v134);
          if (SHIDWORD(v134) <= v75) {
            v35 |= 0x20u;
          }
        }
        else
        {
          unsigned int v76 = HIDWORD(v134);
        }
        if (!v48)
        {
          if (!*v127) {
            unsigned int v76 = v37;
          }
          int v77 = HIDWORD(v130);
          if (!*v127) {
            int v77 = v138;
          }
          HIDWORD(v13pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v77;
        }
        if ((v35 & 0x44) != 0)
        {
          unsigned int v78 = *(unsigned __int16 *)(*((void *)this + 33) + 684);
          if (v76 / v78 + 1 == v37 / v78) {
            v35 |= 0x10u;
          }
        }
        ++*((_DWORD *)&v144[-1] + v43);
        v144[v43] += 48;
        unsigned int v79 = v138 / v137;
        if (v40) {
          unsigned int v43 = (v79 - v121 + v117) % v42;
        }
        if (v135) {
          unsigned int v43 = v37 % v42;
        }
        char v80 = v129 ^ 1;
        if (v48) {
          char v80 = 1;
        }
        HIDWORD(v134) = v76;
        if ((v80 & 1) == 0 && !*v127) {
          unsigned int v43 = (v43 + 1) % v42;
        }
        uint64_t v31 = v144[v43];
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v123) >> 4);
        *(_WORD *)(v31 + 4) = *((_DWORD *)&v144[-1] + v43);
        *(_WORD *)(v31 + 6) = v43;
        *(_WORD *)(v31 + 8) = v136;
        *(_WORD *)(v31 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v79;
        *(_WORD *)(v31 + 12) = v37;
        *(_DWORD *)(v31 + 32) = v138;
        *(_DWORD *)(v31 + 36) = HIDWORD(v130);
        *(_DWORD *)(v31 + 44) = (*(uint64_t (**)(CAHDecClaryHevc *, uint64_t, void))(*(void *)this + 72))(this, v37, v137);
        __int16 v55 = v35;
        LODWORD(v134) = v136;
LABEL_159:
        *(_WORD *)(v31 + 14) = v55;
LABEL_160:
        if (v132 == ++v48) {
          goto LABEL_51;
        }
      }
    }
    int v45 = *(_DWORD *)(v109 + 2360 * v136 + 1896);
    BOOL v46 = __CFADD__(v45, 1);
    unsigned int v47 = v45 + 1;
    if (!v46) {
      goto LABEL_54;
    }
LABEL_51:
    ++v136;
    unsigned int v39 = v128;
  }
  while (v136 != v107);
  uint64_t v95 = v140;
  unsigned int v22 = v100;
  a2 = v101;
  int v96 = v130;
LABEL_165:
  int v131 = v96;
  int v81 = 48 * v32;
  if (!*(void *)v95 && !*(_DWORD *)(v95 + 152) && !*(_DWORD *)(v95 + 156))
  {
LABEL_185:
    if (*(_DWORD *)(v95 + 152) || *(_DWORD *)(v95 + 156)) {
      goto LABEL_187;
    }
    goto LABEL_191;
  }
  int v82 = v139;
  if ((v139 + (unint64_t)HIDWORD(v138)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "populateAvdWork";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 1981;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
    int v82 = v139;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223746, HIDWORD(v138) + v82, 0x3FFFFFFFFFFLL, 32, -1, 2);
  if (!result)
  {
    uint64_t v95 = v140;
    if (!*(void *)v140) {
      goto LABEL_185;
    }
LABEL_187:
    int v86 = v139;
    if ((v139 + (unint64_t)HIDWORD(v138)) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "populateAvdWork";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = 1982;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
      int v86 = v139;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v95, v81 + 223748, HIDWORD(v138) + v86, 0xFFFFFFFFLL, 0, -1, 4);
    if (!result)
    {
LABEL_191:
      *(_DWORD *)(v31 + 28) = v131 - HIDWORD(v138);
      *(_DWORD *)(v31 + 16) = 917519;
      ++*((_DWORD *)&v144[-1] + v43);
      unint64_t v87 = v104;
      if (v129)
      {
        uint64_t v88 = 0;
        buf[0] = 0;
        buf[1] = 0;
        do
        {
          buf[v88] = v123 + v88 * v102;
          ++v88;
        }
        while (v120 != v88);
        uint64_t v89 = buf[0];
        unsigned int v90 = *(unsigned __int16 *)(buf[0] + 8) + 1;
        uint64_t v91 = v103;
        uint64_t v92 = 0;
        if (v90 >= a2)
        {
          unsigned int v94 = buf;
        }
        else
        {
          uint64_t v93 = 0;
          unsigned int v94 = buf;
          do
          {
            if (*(unsigned __int16 *)(v89 + 4) + 1 == *((_DWORD *)&v144[-1] + v92))
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(buf[v91] + 36);
            }
            else if (v90 == *(unsigned __int16 *)(v89 + 56))
            {
              *unsigned int v94 = v89 + 48;
              uint64_t v92 = v93;
              uint64_t v91 = v93;
            }
            else
            {
              uint64_t v92 = v91;
              *(_DWORD *)(v89 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(buf[v91] + 36);
              *unsigned int v94 = v89 + 48;
            }
            uint64_t v93 = v91;
            uint64_t v91 = ((int)v91 + 1) % v120;
            unsigned int v94 = &buf[v92];
            uint64_t v89 = *v94;
            unsigned int v90 = *(unsigned __int16 *)(*v94 + 8) + 1;
          }
          while (v90 < a2);
        }
        int v97 = *((_DWORD *)&v144[-1] + v92);
        if (*(unsigned __int16 *)(v89 + 4) + 1 != v97)
        {
          do
          {
            int v98 = *(unsigned __int16 *)(v89 + 52);
            v89 += 48;
          }
          while (v98 + 1 != v97);
          *unsigned int v94 = v89;
        }
        *(_DWORD *)(v89 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v89 + 44) + 1;
      }
      uint64_t v99 = *((void *)this + 33) + 36;
      do
      {
        *(_WORD *)(v99 + 2 * v87 - 8) = *((_DWORD *)&v144[-1] + v87);
        *(_DWORD *)(v99 + 4 * v87) = 48 * (v87 - v22) * v105 + 223724;
        ++v87;
      }
      while (v87 < v106);
      return 0;
    }
  }
  return result;
}

uint64_t CAHDecClaryHevc::allocWorkBuf_SPS(CAHDecClaryHevc *this, _DWORD *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 5718;
  int v5 = a2[902];
  int v6 = a2[903];
  int v7 = a2[900];
  if (v5 < (*(unsigned int (**)(CAHDecClaryHevc *))(*(void *)this + 96))(this)
    || (unsigned int v8 = a2[903], v8 < (*(unsigned int (**)(CAHDecClaryHevc *))(*(void *)this + 104))(this))
    || (unsigned int v9 = a2[909], v9 > (*(unsigned int (**)(CAHDecClaryHevc *))(*(void *)this + 112))(this) - 8)
    || (unsigned int v10 = a2[910], v10 > (*(unsigned int (**)(CAHDecClaryHevc *))(*(void *)this + 120))(this) - 8)
    || (unsigned int v17 = *v4, v18 = *v4 - 16, v18 > 0x30)
    || ((1 << v18) & 0x1000000010001) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = a2[902];
      int v12 = a2[903];
      int v13 = a2[909];
      int v14 = a2[910];
      unsigned int v15 = *v4;
      int v49 = 136316418;
      int v50 = "allocWorkBuf_SPS";
      __int16 v51 = 1024;
      int v52 = v11;
      __int16 v53 = 1024;
      *(_DWORD *)int v54 = v12;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v13;
      __int16 v55 = 1024;
      int v56 = v14;
      __int16 v57 = 1024;
      unsigned int v58 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported bit stream w %d h %d bd %d %d CtbSizeY %d\n", (uint8_t *)&v49, 0x2Au);
    }
    return 0xFFFFFFFFLL;
  }
  int v19 = v5 + 31;
  if (v5 < -31) {
    int v19 = v5 + 62;
  }
  unsigned int v20 = v19 >> 5;
  int v21 = v6 + 31;
  if (v6 < -31) {
    int v21 = v6 + 62;
  }
  unsigned int v22 = v21 >> 5;
  unsigned int v23 = 32 - __clz(v20 - 1);
  if (v20 >= 2) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  unsigned int v25 = 32 - __clz(v22 - 1);
  if (v22 >= 2) {
    char v26 = v25;
  }
  else {
    char v26 = 0;
  }
  unsigned int v27 = ((32 << (v26 + v24)) + 127) & 0xFFFFFF80;
  if (v7)
  {
    int v28 = v5 << (v7 == 3);
    int v29 = v28 + 31;
    int v30 = v28 + 62;
    if (v29 >= 0) {
      int v30 = v29;
    }
    unsigned int v31 = v30 >> 5;
    if (v7 == 1) {
      int v32 = v6 + 1;
    }
    else {
      int v32 = v6;
    }
    int v33 = v32 >> (v7 == 1);
    int v35 = v33 + 15;
    BOOL v34 = v33 < -15;
    int v36 = v33 + 30;
    if (!v34) {
      int v36 = v35;
    }
    unsigned int v37 = v36 >> 4;
    if (v31 > 1)
    {
      unsigned int v38 = 32 - __clz(v31 - 1);
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v37 = 0;
  }
  LOBYTE(v38) = 0;
LABEL_32:
  unsigned int v39 = 32 - __clz(v37 - 1);
  if (v37 >= 2) {
    char v40 = v39;
  }
  else {
    char v40 = 0;
  }
  unsigned int v41 = ((8 << (v40 + v38)) + 127) & 0xFFFFFF80;
  if (!v7) {
    unsigned int v41 = 0;
  }
  *((_DWORD *)this + 2948) = v27;
  *((_DWORD *)this + 2949) = v41;
  *((void *)this + 1475) = 0;
  unsigned int v42 = (v17 & 0xFFFFFFF0) * (v17 >> 4) * v4[2];
  *((_DWORD *)this + 2954) = v42;
  *((_DWORD *)this + 2953) = v4[4] * v42;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_44:
    uint64_t v46 = 0;
    while (1)
    {
      uint64_t v47 = *((unsigned int *)this + 2953);
      if (v47)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecClaryHevc *)((char *)this + v46 + 7568), v47, 7, 1, 0))break; {
      }
        }
      uint64_t result = 0;
      v46 += 176;
      if (v46 == 2816) {
        return result;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2248;
    __int16 v53 = 2080;
    *(void *)int v54 = "MvColo";
    uint64_t v48 = &_os_log_internal;
  }
  else
  {
    uint64_t v43 = 528;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 2948);
      if (v44
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecClaryHevc *)((char *)this + v43), v44, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_56;
        }
        int v49 = 136315650;
        int v50 = "allocWorkBuf_SPS";
        __int16 v51 = 1024;
        int v52 = 2239;
        __int16 v53 = 2080;
        *(void *)int v54 = "HdrY";
        uint64_t v48 = &_os_log_internal;
        goto LABEL_55;
      }
      uint64_t v45 = *((unsigned int *)this + 2949);
      if (v45)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecClaryHevc *)((char *)this + v43 + 2816), v45, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 3344) {
        goto LABEL_44;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2240;
    __int16 v53 = 2080;
    *(void *)int v54 = "HdrC";
    uint64_t v48 = &_os_log_internal;
  }
LABEL_55:
  _os_log_impl(&dword_223977000, v48, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v49, 0x1Cu);
LABEL_56:
  (*(void (**)(CAHDecClaryHevc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecClaryHevc::allocWorkBuf_PPS(CAHDecClaryHevc *this, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  unsigned int v4 = (a2[909] + 9) & 0xFFFFFFFE;
  unsigned int v5 = (a2[910] + 9) & 0xFFFFFFFE;
  if (v4 <= v5) {
    unsigned int v6 = (a2[910] + 9) & 0xFFFFFFFE;
  }
  else {
    unsigned int v6 = (a2[909] + 9) & 0xFFFFFFFE;
  }
  int v7 = a2[900];
  if (v6 == 10) {
    int v8 = 40;
  }
  else {
    int v8 = 48;
  }
  if (v6 == 8) {
    int v8 = 32;
  }
  char v9 = v7 != 3;
  if (*((unsigned char *)a3 + 52))
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = a2[1106] + a2[1105];
    uint64_t v16 = a3[14];
    int v17 = a2[5718];
    unsigned int v18 = a2[902];
    do
    {
      int v19 = a3[v10 + 17] + 1;
      int v20 = v19 * v17;
      if (v19 * v17 + v13 > v18) {
        int v20 = v18 - v13;
      }
      if (v11 <= v20) {
        int v11 = v20;
      }
      if (v7)
      {
        unsigned int v21 = (v19 << v15) >> v9;
        if (v16 == v10) {
          unsigned int v21 = (((v18 >> 3) - (v14 << v15)) >> v9) + 1;
        }
        v12 += ((v21 + 2 * (v10 != 0)) * v8 + 127) & 0xFFFFFF80;
      }
      v13 += v20;
      v14 += v19;
      ++v10;
    }
    while (v16 + 1 != v10);
  }
  else
  {
    unsigned int v18 = a2[902];
    int v22 = (v8 + v8 * (v18 >> 3 >> v9) + 127) & 0x7FFFFF80;
    if (v7) {
      int v12 = v22;
    }
    else {
      int v12 = 0;
    }
    int v11 = a2[902];
  }
  signed int v23 = 0;
  uint64_t v24 = *((void *)this + 32);
  if (v11 >= -15) {
    int v25 = v11 + 15;
  }
  else {
    int v25 = v11 + 30;
  }
  int v26 = a3[14];
  if (*((unsigned char *)a3 + 52)) {
    int v27 = a3[14];
  }
  else {
    int v27 = 0;
  }
  int v65 = v27;
  if (v7 == 3) {
    int v28 = 48;
  }
  else {
    int v28 = 32;
  }
  if (v7 == 3) {
    int v29 = 176;
  }
  else {
    int v29 = 128;
  }
  if (!v7) {
    int v28 = 16;
  }
  unsigned int v30 = (v28 * v6) >> 3;
  if (!v7) {
    int v29 = 80;
  }
  int v63 = v25;
  int v64 = v29;
  int v31 = v25 >> 4;
  int v32 = (v25 >> 4) * v30;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  if (*((unsigned char *)a3 + 52) && v26)
  {
    uint64_t v36 = 0;
    int v37 = 0;
    unsigned int v35 = 0;
    unsigned int v34 = 0;
    unsigned int v33 = 0;
    if (v7 == 1) {
      int v38 = 8;
    }
    else {
      int v38 = 16;
    }
    if (!v7) {
      int v38 = 0;
    }
    unsigned int v39 = ((((6 * v38 + 96) * v6) >> 3) + 7) & 0x3FFFFFF8;
    int v40 = v38 + 16;
    unsigned int v41 = a2[903];
    signed int v42 = v4 - 8;
    signed int v43 = v5 - 8;
    if (v42 <= v43) {
      signed int v44 = v43;
    }
    else {
      signed int v44 = v42;
    }
    uint64_t v45 = a3[15];
    int v46 = a2[5718];
    BOOL v48 = *(_DWORD *)(v24 + 2644) == 1 && v44 != 0;
    int v49 = (char *)(a3 + 37);
    do
    {
      int v50 = v46 + v46 * *(_DWORD *)&v49[4 * v36];
      if (v50 + v37 > v41) {
        int v50 = v41 - v37;
      }
      int v51 = v50 + 15;
      if (v50 < -15) {
        int v51 = v50 + 30;
      }
      if (v36) {
        int v52 = (v51 >> 4) + 1;
      }
      else {
        int v52 = v51 >> 4;
      }
      unsigned int v53 = v52 * v39;
      if (v33 <= v53) {
        unsigned int v33 = v53;
      }
      unsigned int v54 = 36 * (v51 >> 4);
      if (v34 <= v54) {
        unsigned int v34 = v54;
      }
      if (v48)
      {
        if (v45 == v36) {
          int v55 = 23;
        }
        else {
          int v55 = 15;
        }
        unsigned int v56 = ((v55 + v50) / 16 * v40) | 6;
        if (v35 <= v56) {
          unsigned int v35 = v56;
        }
      }
      v37 += v50;
      ++v36;
    }
    while (v45 + 1 != v36);
    signed int v23 = (((3 * v6) & 0x7FFFFF) << 6) + (((v41 + 7) >> 3) + 2) * ((((v6 >> 1) & 0x1FFFFF) << 8) | 8);
  }
  if (v32 && CAVDDecoder::allocAVDMem(v24, (_OWORD *)this + 649, v32, 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2418;
      __int16 v71 = 2080;
      int v72 = "IpAbove";
      unsigned int v58 = &_os_log_internal;
LABEL_113:
      _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", buf, 0x1Cu);
      goto LABEL_114;
    }
    goto LABEL_114;
  }
  if ((v11 + 30) >= 0x1F
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 462, 4 * (4 * v31 + (v63 >> 4)), 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2419;
      __int16 v71 = 2080;
      int v72 = "MvAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
LABEL_114:
    (*(void (**)(CAHDecClaryHevc *, void))(*(void *)v57 + 152))(v57, 0);
    return 0xFFFFFFFFLL;
  }
  int v59 = v65 + ((v18 + 15) >> 4);
  signed int v60 = v59 * ((((v64 * v6) >> 3) + 7) & 0x3FFFFFF8) + (v26 << 7);
  if (v60 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 660, v60, 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2420;
      __int16 v71 = 2080;
      int v72 = "LfAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  int v61 = 36 * v59 + (v26 << 7);
  __int16 v57 = this;
  if (v61 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 671, v61, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2421;
      __int16 v71 = 2080;
      int v72 = "LfAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v33 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 682, (int)v33, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2422;
      __int16 v71 = 2080;
      int v72 = "LfLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v34 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 693, (int)v34, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2423;
      __int16 v71 = 2080;
      int v72 = "LfLeftInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v35 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 704, (int)v35, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2424;
      __int16 v71 = 2080;
      int v72 = "SwLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v12 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 715, v12, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2425;
      __int16 v71 = 2080;
      int v72 = "AZAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (!v23) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 726, v23, 7, 1, 0);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2426;
      __int16 v71 = 2080;
      int v72 = "AZLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  return result;
}

uint64_t CAHDecClaryHevc::freeWorkBuf_SPS(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(_DWORD *)(*(void *)(this + 256) + 2648))
  {
    for (uint64_t i = 528; i != 3344; i += 176)
    {
      BOOL v3 = (void *)(v1 + i);
      if (*(void *)(v1 + i))
      {
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v1 + i));
        *BOOL v3 = 0;
      }
      if (v3[352])
      {
        unsigned int v4 = v3 + 352;
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), v4);
        *unsigned int v4 = 0;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1 + 7568;
  do
  {
    if (*(void *)(v6 + v5))
    {
      this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v6 + v5));
      *(void *)(v6 + v5) = 0;
    }
    v5 += 176;
  }
  while (v5 != 2816);
  return this;
}

uint64_t *CAHDecClaryHevc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  unsigned int v2 = this;
  if (this[1298])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1298);
    v2[1298] = 0;
  }
  if (v2[924])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 924);
    v2[924] = 0;
  }
  if (v2[1320])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1320);
    v2[1320] = 0;
  }
  if (v2[1342])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1342);
    v2[1342] = 0;
  }
  if (v2[1364])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1364);
    v2[1364] = 0;
  }
  if (v2[1386])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1386);
    v2[1386] = 0;
  }
  if (v2[1408])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1408);
    v2[1408] = 0;
  }
  if (v2[1430])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1430);
    v2[1430] = 0;
  }
  if (v2[1452])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1452);
    v2[1452] = 0;
  }
  return this;
}

uint64_t CAHDecClaryHevc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 6160;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 11808) = a2;
  return this;
}

uint64_t CAHDecClaryHevc::decodeBuffer(CAHDecClaryHevc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecClaryHevc::decodeBufferSize(CAHDecClaryHevc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecClaryHevc::decHdrYLinAddr(CAHDecClaryHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 66);
}

uint64_t CAHDecClaryHevc::decHdrCLinAddr(CAHDecClaryHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 418);
}

uint64_t CAHDecClaryHevc::decHdrYSize(CAHDecClaryHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 143);
}

uint64_t CAHDecClaryHevc::decHdrCSize(CAHDecClaryHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 847);
}

uint64_t CAHDecClaryHevc::decHdrYStride(CAHDecClaryHevc *this)
{
  return *((unsigned int *)this + 2950);
}

uint64_t CAHDecClaryHevc::decHdrCStride(CAHDecClaryHevc *this)
{
  return *((unsigned int *)this + 2951);
}

CAHDecCatnipAvx *createCatnipAvxDecoder(void **a1)
{
  uint64_t v2 = (CAHDecCatnipAvx *)operator new(0x1060uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecCatnipAvx::CAHDecCatnipAvx(v2, a1);
  }
  return v3;
}

void sub_2239E3BDC(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecCatnipAvx::CAHDecCatnipAvx(CAHDecCatnipAvx *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73EFD8;
  *(_DWORD *)(v1 + 456) = 198040;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecCatnipAvx::CAHDecCatnipAvx(CAHDecCatnipAvx *this, void **a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73EFD8;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 198040;
  *(_DWORD *)(v4 + 8) = 1432;
  *(_OWORD *)(v4 + 16) = xmmword_223AD06B0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 198040, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315394;
      int v22 = "CAHDecCatnipAvx";
      __int16 v23 = 1024;
      int v24 = 0;
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]";
      uint32_t v7 = 18;
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  uint64_t v8 = *((void *)this + 35);
  *((_DWORD *)this + 13) = 0;
  *((void *)this + 33) = v8;
  *((void *)this + 34) = v8;
  bzero(a2 + 384, 0x1340uLL);
  bzero(a2[1000], 0x1500uLL);
  bzero((char *)this + 464, 0xE70uLL);
  bzero(a2 + 1001, 0x1E18uLL);
  uint64_t v9 = 0;
  *((void *)this + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *((_OWORD *)this + 261) = 0u;
  uint64_t v10 = 9168;
  *((_DWORD *)this + 1045) = 9168;
  uint64_t v11 = *((void *)this + 32);
LABEL_5:
  if (CAVDDecoder::allocAVDMem(v11, (_OWORD *)(v11 + v9 + 10304), v10, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315650;
      int v22 = "CAHDecCatnipAvx";
      __int16 v23 = 1024;
      int v24 = 175;
      __int16 v25 = 2080;
      int v26 = "probs_Buf";
      uint64_t v5 = &_os_log_internal;
      uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v11 = *((void *)this + 32);
  while (1)
  {
    uint64_t v12 = *(void *)(v11 + v9 + 10304);
    if (v12) {
      *(void *)(v11 + v9 + 10296) = v12;
    }
    if (v9 == 2208) {
      break;
    }
    uint64_t v10 = *((unsigned int *)this + 1045);
    v9 += 184;
    if (*((_DWORD *)this + 1045)) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = *(void *)(v11 + 42392);
  if (v13)
  {
    uint64_t v14 = 0;
    int v15 = (void *)(v13 + 1960);
    do
    {
      *int v15 = v11 + 10296 + v14;
      v14 += 184;
      v15 += 254;
    }
    while (v14 != 2392);
  }
  uint64_t v16 = 0;
  for (uint64_t i = 12696; ; i += 184)
  {
    uint64_t v18 = *((unsigned int *)this + 1045);
    uint64_t v19 = *((void *)this + 32);
    if (v18) {
      break;
    }
LABEL_19:
    uint64_t v20 = *(void *)(v19 + i);
    if (v20) {
      *(void *)(v19 + i - 8) = v20;
    }
    if (*(void *)(v19 + 15952)) {
      AV1_Syntax::Set_Default_Frame_Context_Info(*(void *)(v19 + 15952), (uint64_t *)(v19 + i - 8), v16);
    }
    if (++v16 == 4) {
      return;
    }
  }
  if (!CAVDDecoder::allocAVDMem(v19, (_OWORD *)(v19 + i), v18, 7, 1, 0))
  {
    uint64_t v19 = *((void *)this + 32);
    goto LABEL_19;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 136315650;
    int v22 = "CAHDecCatnipAvx";
    __int16 v23 = 1024;
    int v24 = 190;
    __int16 v25 = 2080;
    int v26 = "probs_Buf";
    uint64_t v5 = &_os_log_internal;
    uint64_t v6 = "AppleAVD: ERROR: %s() Line %d: Error allocating %s";
LABEL_29:
    uint32_t v7 = 28;
LABEL_30:
    _os_log_impl(&dword_223977000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v21, v7);
  }
LABEL_31:
  *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
}

void sub_2239E3FC4(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecCatnipAvx::~CAHDecCatnipAvx(CAHDecCatnipAvx *this)
{
  uint64_t v2 = 0;
  *(void *)this = &unk_26D73EFD8;
  uint64_t v3 = *((void *)this + 32);
  do
  {
    if (*(void *)(v3 + v2 + 10304))
    {
      CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + v2 + 10304));
      uint64_t v3 = *((void *)this + 32);
      *(_OWORD *)(v3 + v2 + 10296) = 0u;
    }
    v2 += 184;
  }
  while (v2 != 2392);
  for (uint64_t i = 0; i != 736; i += 184)
  {
    if (*(void *)(v3 + i + 12696))
    {
      CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 12696));
      uint64_t v3 = *((void *)this + 32);
      *(_OWORD *)(v3 + i + 12688) = 0u;
    }
  }
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(v3, (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecCatnipAvx::~CAHDecCatnipAvx(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecCatnipAvx::startPicture(CAHDecCatnipAvx *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 13) = 0;
  uint64_t v3 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v3;
  if (v3)
  {
    bzero(v3, 0x30598uLL);
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    uint64_t v6 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v6 + 16) = a2;
    *(_WORD *)(v6 + 24) = 257;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "startPicture";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v7, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecCatnipAvx::DecodePicture(CAHDecCatnipAvx *this, uint64_t a2)
{
  if (CAHDecCatnipAvx::startPicture(this, a2)) {
    return 1;
  }
  (*(void (**)(CAHDecCatnipAvx *))(*(void *)this + 32))(this);
  (*(void (**)(CAHDecCatnipAvx *))(*(void *)this + 48))(this);
  if ((*(unsigned int (**)(CAHDecCatnipAvx *))(*(void *)this + 56))(this)
    || CAHDecCatnipAvx::populateAddressRegisters(this))
  {
    return 4;
  }
  CAHDecCatnipAvx::populateDecryptionRegisters(this);
  CAHDecCatnipAvx::populateTiles(this);
  CAHDecTansyAvx::populateAvxVPDependency((CAVDAvxDecoder **)this);
  (*(void (**)(CAHDecCatnipAvx *, uint64_t))(*(void *)this + 88))(this, a2);
  (*(void (**)(CAHDecCatnipAvx *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 114));
  return 0;
}

uint64_t CAHDecCatnipAvx::populateAddressRegisters(CAHDecCatnipAvx *this)
{
  uint64_t v2 = 0;
  uint64_t v332 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 264;
  uint64_t v4 = (char *)this + 464;
  do
  {
    *(_DWORD *)(*(void *)v3 + v2 + 464) = 0;
    uint64_t v5 = *(void *)v3 + v2;
    int v6 = *(_DWORD *)(v5 + 464);
    *(_DWORD *)(v5 + 464) = 0;
    *(_DWORD *)(*(void *)v3 + v2 + 464) ^= 0xFFFFFF00;
    uint64_t v7 = *(void *)v3 + v2;
    int v8 = *(_DWORD *)(v7 + 464);
    *(_DWORD *)(v7 + 464) = v6;
    if (*(void *)v4 || *((_DWORD *)v4 + 38) || *((_DWORD *)v4 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v4, (int)v2 + 464, 0, 0xFFFFFFFFLL, 8, v8, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)v3 + v2 + 492) = 0;
    uint64_t v10 = *(void *)v3 + v2;
    int v11 = *(_DWORD *)(v10 + 492);
    *(_DWORD *)(v10 + 492) = 0;
    *(_DWORD *)(*(void *)v3 + v2 + 492) ^= 0x3FFu;
    uint64_t v12 = *(void *)v3 + v2;
    int v13 = *(_DWORD *)(v12 + 492);
    *(_DWORD *)(v12 + 492) = v11;
    if (*(void *)v4 || *((_DWORD *)v4 + 38) || *((_DWORD *)v4 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v4, (int)v2 + 492, 0, 0x3FFFFFFFFFFLL, 32, v13, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v2 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + v2 + 52pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*((void *)this + 33) + v2 + 520) & 0x800001FF | (((*((_DWORD *)this + 1044) >> 9) & 0x3FFFFF) << 9);
    v2 += 4;
    v4 += 176;
  }
  while (v2 != 28);
  uint64_t v14 = *((void *)this + 32);
  uint64_t v15 = *(void *)(*(void *)(v14 + 15944) + 79288);
  uint64_t v16 = *(void *)(*(void *)(*(void *)(v14 + 42424) + 1920) + 1960);
  *(_DWORD *)(*((void *)this + 33) + 548) = 0;
  uint64_t v17 = *((void *)this + 33);
  int v18 = *(_DWORD *)(v17 + 548);
  *(_DWORD *)(v17 + 548) = 0;
  *(_DWORD *)(*((void *)this + 33) + 548) ^= 0xFFFFFF00;
  uint64_t v19 = *((void *)this + 33);
  int v20 = *(_DWORD *)(v19 + 548);
  *(_DWORD *)(v19 + 548) = v18;
  if (!*(void *)(v16 + 8) && !*(_DWORD *)(v16 + 160) && !*(_DWORD *)(v16 + 164)
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v16 + 8), 548, 0, 0xFFFFFFFFLL, 8, v20, 4),
        !result))
  {
    if ((*(_DWORD *)(*(void *)v3 + 552) = 0,
          int v21 = *(_DWORD *)(*(void *)v3 + 552),
          *(_DWORD *)(*(void *)v3 + 552) = 0,
          *(_DWORD *)(*(void *)v3 + 552) ^= 0x3FFu,
          int v22 = *(_DWORD *)(*(void *)v3 + 552),
          *(_DWORD *)(*(void *)v3 + 552) = v21,
          !*(void *)(v16 + 8))
      && !*(_DWORD *)(v16 + 160)
      && !*(_DWORD *)(v16 + 164)
      || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v16 + 8), 552, 0, 0x3FFFFFFFFFFLL, 32, v22, 4),
          !result))
    {
      if ((*(_DWORD *)(*(void *)v3 + 556) = 0,
            int v23 = *(_DWORD *)(*(void *)v3 + 556),
            *(_DWORD *)(*(void *)v3 + 556) = 0,
            *(_DWORD *)(*(void *)v3 + 556) ^= 0xFFFFFF00,
            int v24 = *(_DWORD *)(*(void *)v3 + 556),
            *(_DWORD *)(*(void *)v3 + 556) = v23,
            !*(void *)(v15 + 8))
        && !*(_DWORD *)(v15 + 160)
        && !*(_DWORD *)(v15 + 164)
        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v15 + 8), 556, 0, 0xFFFFFFFFLL, 8, v24, 4),
            !result))
      {
        if ((*(_DWORD *)(*(void *)v3 + 56pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
              int v25 = *(_DWORD *)(*(void *)v3 + 560),
        }
              *(_DWORD *)(*(void *)v3 + 56pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
              *(_DWORD *)(*(void *)v3 + 560) ^= 0x3FFu,
              int v26 = *(_DWORD *)(*(void *)v3 + 560),
              *(_DWORD *)(*(void *)v3 + 56pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v25,
              !*(void *)(v15 + 8))
          && !*(_DWORD *)(v15 + 160)
          && !*(_DWORD *)(v15 + 164)
          || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v15 + 8), 560, 0, 0x3FFFFFFFFFFLL, 32, v26, 4),
              !result))
        {
          *(_DWORD *)(*((void *)this + 33) + 564) = 0;
          uint64_t v27 = *((void *)this + 33);
          int v28 = *(_DWORD *)(v27 + 564);
          *(_DWORD *)(v27 + 564) = 0;
          *(_DWORD *)(*((void *)this + 33) + 564) ^= 0xFFFFFF00;
          uint64_t v29 = *((void *)this + 33);
          int v30 = *(_DWORD *)(v29 + 564);
          *(_DWORD *)(v29 + 564) = v28;
          if (!*((void *)this + 212) && !*((_DWORD *)this + 462) && !*((_DWORD *)this + 463)) {
            goto LABEL_355;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 212, 564, 0, 0xFFFFFFFFLL, 8, v30, 4);
          if (!result)
          {
LABEL_355:
            if ((*(_DWORD *)(*(void *)v3 + 568) = 0,
                  int v31 = *(_DWORD *)(*(void *)v3 + 568),
                  *(_DWORD *)(*(void *)v3 + 568) = 0,
                  *(_DWORD *)(*(void *)v3 + 568) ^= 0x3FFu,
                  int v32 = *(_DWORD *)(*(void *)v3 + 568),
                  *(_DWORD *)(*(void *)v3 + 568) = v31,
                  !*((void *)this + 212))
              && !*((_DWORD *)this + 462)
              && !*((_DWORD *)this + 463)
              || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 212, 568, 0, 0x3FFFFFFFFFFLL, 32, v32, 4), !result))
            {
              *(_DWORD *)(*((void *)this + 33) + 572) = 0;
              *(_DWORD *)(*((void *)this + 33) + 576) = 0;
              if (!*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312)) {
                goto LABEL_44;
              }
              uint64_t v33 = *((void *)this + 33);
              int v34 = *(_DWORD *)(v33 + 572);
              *(_DWORD *)(v33 + 572) = 0;
              *(_DWORD *)(*((void *)this + 33) + 572) ^= 0xFFFFFF00;
              uint64_t v35 = *((void *)this + 33);
              int v36 = *(_DWORD *)(v35 + 572);
              *(_DWORD *)(v35 + 572) = v34;
              uint64_t v37 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312);
              if (!*(void *)(v37 + 8) && !*(_DWORD *)(v37 + 160) && !*(_DWORD *)(v37 + 164)) {
                goto LABEL_356;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v37 + 8), 572, 0, 0xFFFFFFFFLL, 8, v36, 4);
              if (!result)
              {
LABEL_356:
                uint64_t v38 = *((void *)this + 33);
                int v39 = *(_DWORD *)(v38 + 576);
                *(_DWORD *)(v38 + 576) = 0;
                *(_DWORD *)(*((void *)this + 33) + 576) ^= 0x3FFu;
                uint64_t v40 = *((void *)this + 33);
                int v41 = *(_DWORD *)(v40 + 576);
                *(_DWORD *)(v40 + 576) = v39;
                uint64_t v42 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79312);
                if (!*(void *)(v42 + 8) && !*(_DWORD *)(v42 + 160) && !*(_DWORD *)(v42 + 164)) {
                  goto LABEL_44;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v42 + 8), 576, 0, 0x3FFFFFFFFFFLL, 32, v41, 4);
                if (!result)
                {
LABEL_44:
                  *(_DWORD *)(*((void *)this + 33) + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 584) = 0;
                  if (!*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304)) {
                    goto LABEL_346;
                  }
                  uint64_t v43 = *((void *)this + 33);
                  int v44 = *(_DWORD *)(v43 + 580);
                  *(_DWORD *)(v43 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 580) ^= 0xFFFFFF00;
                  uint64_t v45 = *((void *)this + 33);
                  int v46 = *(_DWORD *)(v45 + 580);
                  *(_DWORD *)(v45 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v44;
                  uint64_t v47 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304);
                  if (!*(void *)(v47 + 8) && !*(_DWORD *)(v47 + 160) && !*(_DWORD *)(v47 + 164)) {
                    goto LABEL_347;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v47 + 8), 580, 0, 0xFFFFFFFFLL, 8, v46, 4);
                  if (!result)
                  {
LABEL_347:
                    uint64_t v48 = *((void *)this + 33);
                    int v49 = *(_DWORD *)(v48 + 584);
                    *(_DWORD *)(v48 + 584) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 584) ^= 0x3FFu;
                    uint64_t v50 = *((void *)this + 33);
                    int v51 = *(_DWORD *)(v50 + 584);
                    *(_DWORD *)(v50 + 584) = v49;
                    uint64_t v52 = *(void *)(*(void *)(*((void *)this + 32) + 15944) + 79304);
                    if (!*(void *)(v52 + 8) && !*(_DWORD *)(v52 + 160) && !*(_DWORD *)(v52 + 164)) {
                      goto LABEL_346;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v52 + 8), 584, 0, 0x3FFFFFFFFFFLL, 32, v51, 4);
                    if (!result)
                    {
LABEL_346:
                      *(_DWORD *)(*((void *)this + 33) + 588) = 0;
                      uint64_t v53 = *((void *)this + 33);
                      int v54 = *(_DWORD *)(v53 + 588);
                      *(_DWORD *)(v53 + 588) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 588) ^= 0xFFFFFF00;
                      uint64_t v55 = *((void *)this + 33);
                      int v56 = *(_DWORD *)(v55 + 588);
                      *(_DWORD *)(v55 + 588) = v54;
                      uint64_t v57 = *(void *)(*(void *)(*((void *)this + 32) + 42424) + 1920);
                      if (!*(void *)(v57 + 136) && !*(_DWORD *)(v57 + 288) && !*(_DWORD *)(v57 + 292)) {
                        goto LABEL_348;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v57 + 136), 588, 0, 0xFFFFFFFFLL, 8, v56, 4);
                      if (!result)
                      {
LABEL_348:
                        *(_DWORD *)(*((void *)this + 33) + 592) = 0;
                        uint64_t v58 = *((void *)this + 33);
                        int v59 = *(_DWORD *)(v58 + 592);
                        *(_DWORD *)(v58 + 592) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 592) ^= 0x3FFu;
                        uint64_t v60 = *((void *)this + 33);
                        int v61 = *(_DWORD *)(v60 + 592);
                        *(_DWORD *)(v60 + 592) = v59;
                        uint64_t v62 = *(void *)(*(void *)(*((void *)this + 32) + 42424) + 1920);
                        if (!*(void *)(v62 + 136) && !*(_DWORD *)(v62 + 288) && !*(_DWORD *)(v62 + 292)) {
                          goto LABEL_349;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v62 + 136), 592, 0, 0x3FFFFFFFFFFLL, 32, v61, 4);
                        if (!result)
                        {
LABEL_349:
                          *(_DWORD *)(*((void *)this + 33) + 596) = 0;
                          uint64_t v63 = *((void *)this + 33);
                          int v64 = *(_DWORD *)(v63 + 596);
                          *(_DWORD *)(v63 + 596) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 596) ^= 0xFFFFFF00;
                          uint64_t v65 = *((void *)this + 33);
                          int v66 = *(_DWORD *)(v65 + 596);
                          *(_DWORD *)(v65 + 596) = v64;
                          int v67 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78568);
                          if (!*v67
                            && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78720)
                            && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78724))
                          {
                            goto LABEL_350;
                          }
                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v67, 596, 0, 0xFFFFFFFFLL, 8, v66, 4);
                          if (!result)
                          {
LABEL_350:
                            *(_DWORD *)(*((void *)this + 33) + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            uint64_t v68 = *((void *)this + 33);
                            int v69 = *(_DWORD *)(v68 + 600);
                            *(_DWORD *)(v68 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 600) ^= 0x3FFu;
                            uint64_t v70 = *((void *)this + 33);
                            int v71 = *(_DWORD *)(v70 + 600);
                            *(_DWORD *)(v70 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v69;
                            int v72 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78568);
                            if (!*v72
                              && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78720)
                              && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78724))
                            {
                              goto LABEL_351;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v72, 600, 0, 0x3FFFFFFFFFFLL, 32, v71, 4);
                            if (!result)
                            {
LABEL_351:
                              *(_DWORD *)(*((void *)this + 33) + 604) = 0;
                              uint64_t v73 = *((void *)this + 33);
                              int v74 = *(_DWORD *)(v73 + 604);
                              *(_DWORD *)(v73 + 604) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 604) ^= 0xFFFFFF00;
                              uint64_t v75 = *((void *)this + 33);
                              int v76 = *(_DWORD *)(v75 + 604);
                              *(_DWORD *)(v75 + 604) = v74;
                              int v77 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78792);
                              if (!*v77
                                && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78944)
                                && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78948))
                              {
                                goto LABEL_352;
                              }
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v77, 604, 0, 0xFFFFFFFFLL, 8, v76, 4);
                              if (!result)
                              {
LABEL_352:
                                *(_DWORD *)(*((void *)this + 33) + 608) = 0;
                                uint64_t v78 = *((void *)this + 33);
                                int v79 = *(_DWORD *)(v78 + 608);
                                *(_DWORD *)(v78 + 608) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 608) ^= 0x3FFu;
                                uint64_t v80 = *((void *)this + 33);
                                int v81 = *(_DWORD *)(v80 + 608);
                                *(_DWORD *)(v80 + 608) = v79;
                                int v82 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 78792);
                                if (!*v82
                                  && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78944)
                                  && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78948))
                                {
                                  goto LABEL_353;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v82, 608, 0, 0x3FFFFFFFFFFLL, 32, v81, 4);
                                if (!result)
                                {
LABEL_353:
                                  *(_DWORD *)(*((void *)this + 33) + 612) = 0;
                                  uint64_t v83 = *((void *)this + 33);
                                  int v84 = *(_DWORD *)(v83 + 612);
                                  *(_DWORD *)(v83 + 612) = 0;
                                  *(_DWORD *)(*((void *)this + 33) + 612) ^= 0xFFFFFF00;
                                  uint64_t v85 = *((void *)this + 33);
                                  int v86 = *(_DWORD *)(v85 + 612);
                                  *(_DWORD *)(v85 + 612) = v84;
                                  unint64_t v87 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 79016);
                                  if (!*v87
                                    && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79168)
                                    && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79172))
                                  {
                                    goto LABEL_354;
                                  }
                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v87, 612, 0, 0xFFFFFFFFLL, 8, v86, 4);
                                  if (!result)
                                  {
LABEL_354:
                                    *(_DWORD *)(*((void *)this + 33) + 616) = 0;
                                    uint64_t v88 = *((void *)this + 33);
                                    int v89 = *(_DWORD *)(v88 + 616);
                                    *(_DWORD *)(v88 + 616) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 616) ^= 0x3FFu;
                                    uint64_t v90 = *((void *)this + 33);
                                    int v91 = *(_DWORD *)(v90 + 616);
                                    *(_DWORD *)(v90 + 616) = v89;
                                    uint64_t v92 = (void *)(*(void *)(*((void *)this + 32) + 15944) + 79016);
                                    if (!*v92
                                      && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79168)
                                      && !*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79172))
                                    {
                                      goto LABEL_85;
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v92, 616, 0, 0x3FFFFFFFFFFLL, 32, v91, 4);
                                    if (!result)
                                    {
LABEL_85:
                                      *(_DWORD *)(*((void *)this + 33) + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                      *(_DWORD *)(*((void *)this + 33) + 624) = 0;
                                      uint64_t v93 = *((void *)this + 32);
                                      if (!*(unsigned char *)(v93 + 2652)) {
                                        goto LABEL_345;
                                      }
                                      uint64_t v94 = *(void *)(v93 + 2680);
                                      long long v330 = 0u;
                                      long long v331 = 0u;
                                      memset(v329, 0, sizeof(v329));
                                      uint64_t v95 = *(void *)v3;
                                      int v96 = (*(_DWORD *)(*(void *)v3 + 16) & 0xF) << 9;
                                      *(void *)&v329[0] = v94;
                                      int v97 = *(_DWORD *)(v95 + 620);
                                      *(_DWORD *)(v95 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                      *(_DWORD *)(*(void *)v3 + 620) ^= 0xFFFFFF00;
                                      int v98 = *(_DWORD *)(*(void *)v3 + 620);
                                      *(_DWORD *)(*(void *)v3 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v97;
                                      if (v94)
                                      {
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v329, 620, v96, 0xFFFFFFFFLL, 8, v98, 4);
                                        if (result) {
                                          return result;
                                        }
                                        uint64_t v99 = *(void *)&v329[0];
                                        int v100 = DWORD2(v330);
                                        LODWORD(v94) = HIDWORD(v330);
                                      }
                                      else
                                      {
                                        int v100 = 0;
                                        uint64_t v99 = 0;
                                      }
                                      if ((int v101 = *(_DWORD *)(*(void *)v3 + 624),
                                            *(_DWORD *)(*(void *)v3 + 624) = 0,
                                            *(_DWORD *)(*(void *)v3 + 624) ^= 0x3FFu,
                                            int v102 = *(_DWORD *)(*(void *)v3 + 624),
                                            *(_DWORD *)(*(void *)v3 + 624) = v101,
                                            !v99)
                                        && !v100
                                        && !v94
                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v329, 624, v96, 0x3FFFFFFFFFFLL, 32, v102, 4), !result))
                                      {
LABEL_345:
                                        *(_DWORD *)(*((void *)this + 33) + 628) = 0;
                                        uint64_t v103 = *((void *)this + 33);
                                        int v104 = *(_DWORD *)(v103 + 628);
                                        *(_DWORD *)(v103 + 628) = 0;
                                        *(_DWORD *)(*((void *)this + 33) + 628) ^= 0xFFFFFF00;
                                        uint64_t v105 = *((void *)this + 33);
                                        int v106 = *(_DWORD *)(v105 + 628);
                                        *(_DWORD *)(v105 + 628) = v104;
                                        if (!*((void *)this + 234)
                                          && !*((_DWORD *)this + 506)
                                          && !*((_DWORD *)this + 507))
                                        {
                                          goto LABEL_333;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 628, 0, 0xFFFFFFFFLL, 8, v106, 4);
                                        if (!result)
                                        {
LABEL_333:
                                          if ((*(_DWORD *)(*(void *)v3 + 632) = 0,
                                                int v107 = *(_DWORD *)(*(void *)v3 + 632),
                                                *(_DWORD *)(*(void *)v3 + 632) = 0,
                                                *(_DWORD *)(*(void *)v3 + 632) ^= 0x3FFu,
                                                int v108 = *(_DWORD *)(*(void *)v3 + 632),
                                                *(_DWORD *)(*(void *)v3 + 632) = v107,
                                                !*((void *)this + 234))
                                            && !*((_DWORD *)this + 506)
                                            && !*((_DWORD *)this + 507)
                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 234, 632, 0, 0x3FFFFFFFFFFLL, 32, v108, 4), !result))
                                          {
                                            *(_DWORD *)(*((void *)this + 33) + 636) = 0;
                                            uint64_t v109 = *((void *)this + 33);
                                            int v110 = *(_DWORD *)(v109 + 636);
                                            *(_DWORD *)(v109 + 636) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 636) ^= 0xFFFFFF00;
                                            uint64_t v111 = *((void *)this + 33);
                                            int v112 = *(_DWORD *)(v111 + 636);
                                            *(_DWORD *)(v111 + 636) = v110;
                                            if (!*((void *)this + 256)
                                              && !*((_DWORD *)this + 550)
                                              && !*((_DWORD *)this + 551))
                                            {
                                              goto LABEL_334;
                                            }
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 636, 0, 0xFFFFFFFFLL, 8, v112, 4);
                                            if (!result)
                                            {
LABEL_334:
                                              if ((*(_DWORD *)(*(void *)v3 + 64pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                                    int v113 = *(_DWORD *)(*(void *)v3 + 640),
                                              }
                                                    *(_DWORD *)(*(void *)v3 + 64pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                    *(_DWORD *)(*(void *)v3 + 640) ^= 0x3FFu,
                                                    int v114 = *(_DWORD *)(*(void *)v3 + 640),
                                                    *(_DWORD *)(*(void *)v3 + 64pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v113,
                                                    !*((void *)this + 256))
                                                && !*((_DWORD *)this + 550)
                                                && !*((_DWORD *)this + 551)
                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 256, 640, 0, 0x3FFFFFFFFFFLL, 32, v114, 4), !result))
                                              {
                                                *(_DWORD *)(*((void *)this + 33) + 644) = 0;
                                                uint64_t v115 = *((void *)this + 33);
                                                int v116 = *(_DWORD *)(v115 + 644);
                                                *(_DWORD *)(v115 + 644) = 0;
                                                *(_DWORD *)(*((void *)this + 33) + 644) ^= 0xFFFFFF00;
                                                uint64_t v117 = *((void *)this + 33);
                                                int v118 = *(_DWORD *)(v117 + 644);
                                                *(_DWORD *)(v117 + 644) = v116;
                                                if (!*((void *)this + 278)
                                                  && !*((_DWORD *)this + 594)
                                                  && !*((_DWORD *)this + 595))
                                                {
                                                  goto LABEL_335;
                                                }
                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 644, 0, 0xFFFFFFFFLL, 8, v118, 4);
                                                if (!result)
                                                {
LABEL_335:
                                                  if ((*(_DWORD *)(*(void *)v3 + 648) = 0,
                                                        int v119 = *(_DWORD *)(*(void *)v3 + 648),
                                                        *(_DWORD *)(*(void *)v3 + 648) = 0,
                                                        *(_DWORD *)(*(void *)v3 + 648) ^= 0x3FFu,
                                                        int v120 = *(_DWORD *)(*(void *)v3 + 648),
                                                        *(_DWORD *)(*(void *)v3 + 648) = v119,
                                                        !*((void *)this + 278))
                                                    && !*((_DWORD *)this + 594)
                                                    && !*((_DWORD *)this + 595)
                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 278, 648, 0, 0x3FFFFFFFFFFLL, 32, v120, 4), !result))
                                                  {
                                                    *(_DWORD *)(*((void *)this + 33) + 652) = 0;
                                                    uint64_t v121 = *((void *)this + 33);
                                                    int v122 = *(_DWORD *)(v121 + 652);
                                                    *(_DWORD *)(v121 + 652) = 0;
                                                    *(_DWORD *)(*((void *)this + 33) + 652) ^= 0xFFFFFF00;
                                                    uint64_t v123 = *((void *)this + 33);
                                                    int v124 = *(_DWORD *)(v123 + 652);
                                                    *(_DWORD *)(v123 + 652) = v122;
                                                    if (!*((void *)this + 300)
                                                      && !*((_DWORD *)this + 638)
                                                      && !*((_DWORD *)this + 639))
                                                    {
                                                      goto LABEL_336;
                                                    }
                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 652, 0, 0xFFFFFFFFLL, 8, v124, 4);
                                                    if (!result)
                                                    {
LABEL_336:
                                                      if ((*(_DWORD *)(*(void *)v3 + 656) = 0,
                                                            int v125 = *(_DWORD *)(*(void *)v3 + 656),
                                                            *(_DWORD *)(*(void *)v3 + 656) = 0,
                                                            *(_DWORD *)(*(void *)v3 + 656) ^= 0x3FFu,
                                                            int v126 = *(_DWORD *)(*(void *)v3 + 656),
                                                            *(_DWORD *)(*(void *)v3 + 656) = v125,
                                                            !*((void *)this + 300))
                                                        && !*((_DWORD *)this + 638)
                                                        && !*((_DWORD *)this + 639)
                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 300, 656, 0, 0x3FFFFFFFFFFLL, 32, v126, 4), !result))
                                                      {
                                                        *(_DWORD *)(*((void *)this + 33) + 66pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                        uint64_t v127 = *((void *)this + 33);
                                                        int v128 = *(_DWORD *)(v127 + 660);
                                                        *(_DWORD *)(v127 + 66pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                        *(_DWORD *)(*((void *)this + 33) + 660) ^= 0xFFFFFF00;
                                                        uint64_t v129 = *((void *)this + 33);
                                                        int v130 = *(_DWORD *)(v129 + 660);
                                                        *(_DWORD *)(v129 + 66pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v128;
                                                        if (!*((void *)this + 322)
                                                          && !*((_DWORD *)this + 682)
                                                          && !*((_DWORD *)this + 683))
                                                        {
                                                          goto LABEL_337;
                                                        }
                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 660, 0, 0xFFFFFFFFLL, 8, v130, 4);
                                                        if (!result)
                                                        {
LABEL_337:
                                                          if ((*(_DWORD *)(*(void *)v3 + 664) = 0,
                                                                int v131 = *(_DWORD *)(*(void *)v3 + 664),
                                                                *(_DWORD *)(*(void *)v3 + 664) = 0,
                                                                *(_DWORD *)(*(void *)v3 + 664) ^= 0x3FFu,
                                                                int v132 = *(_DWORD *)(*(void *)v3 + 664),
                                                                *(_DWORD *)(*(void *)v3 + 664) = v131,
                                                                !*((void *)this + 322))
                                                            && !*((_DWORD *)this + 682)
                                                            && !*((_DWORD *)this + 683)
                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 322, 664, 0, 0x3FFFFFFFFFFLL, 32, v132, 4), !result))
                                                          {
                                                            *(_DWORD *)(*((void *)this + 33) + 668) = 0;
                                                            uint64_t v133 = *((void *)this + 33);
                                                            int v134 = *(_DWORD *)(v133 + 668);
                                                            *(_DWORD *)(v133 + 668) = 0;
                                                            *(_DWORD *)(*((void *)this + 33) + 668) ^= 0xFFFFFF00;
                                                            uint64_t v135 = *((void *)this + 33);
                                                            int v136 = *(_DWORD *)(v135 + 668);
                                                            *(_DWORD *)(v135 + 668) = v134;
                                                            if (!*((void *)this + 344)
                                                              && !*((_DWORD *)this + 726)
                                                              && !*((_DWORD *)this + 727))
                                                            {
                                                              goto LABEL_338;
                                                            }
                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 668, 0, 0xFFFFFFFFLL, 8, v136, 4);
                                                            if (!result)
                                                            {
LABEL_338:
                                                              if ((*(_DWORD *)(*(void *)v3 + 672) = 0,
                                                                    int v137 = *(_DWORD *)(*(void *)v3 + 672),
                                                                    *(_DWORD *)(*(void *)v3 + 672) = 0,
                                                                    *(_DWORD *)(*(void *)v3 + 672) ^= 0x3FFu,
                                                                    int v138 = *(_DWORD *)(*(void *)v3 + 672),
                                                                    *(_DWORD *)(*(void *)v3 + 672) = v137,
                                                                    !*((void *)this + 344))
                                                                && !*((_DWORD *)this + 726)
                                                                && !*((_DWORD *)this + 727)
                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 344, 672, 0, 0x3FFFFFFFFFFLL, 32, v138, 4), !result))
                                                              {
                                                                *(_DWORD *)(*((void *)this + 33) + 676) = 0;
                                                                uint64_t v139 = *((void *)this + 33);
                                                                int v140 = *(_DWORD *)(v139 + 676);
                                                                *(_DWORD *)(v139 + 676) = 0;
                                                                *(_DWORD *)(*((void *)this + 33) + 676) ^= 0xFFFFFF00;
                                                                uint64_t v141 = *((void *)this + 33);
                                                                int v142 = *(_DWORD *)(v141 + 676);
                                                                *(_DWORD *)(v141 + 676) = v140;
                                                                if (!*((void *)this + 366)
                                                                  && !*((_DWORD *)this + 770)
                                                                  && !*((_DWORD *)this + 771))
                                                                {
                                                                  goto LABEL_339;
                                                                }
                                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 676, 0, 0xFFFFFFFFLL, 8, v142, 4);
                                                                if (!result)
                                                                {
LABEL_339:
                                                                  if ((*(_DWORD *)(*(void *)v3 + 68pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                                                        int v143 = *(_DWORD *)(*(void *)v3 + 680),
                                                                  }
                                                                        *(_DWORD *)(*(void *)v3 + 68pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                                        *(_DWORD *)(*(void *)v3 + 680) ^= 0x3FFu,
                                                                        int v144 = *(_DWORD *)(*(void *)v3 + 680),
                                                                        *(_DWORD *)(*(void *)v3 + 68pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v143,
                                                                        !*((void *)this + 366))
                                                                    && !*((_DWORD *)this + 770)
                                                                    && !*((_DWORD *)this + 771)
                                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 366, 680, 0, 0x3FFFFFFFFFFLL, 32, v144, 4), !result))
                                                                  {
                                                                    *(_DWORD *)(*((void *)this + 33) + 684) = 0;
                                                                    uint64_t v145 = *((void *)this + 33);
                                                                    int v146 = *(_DWORD *)(v145 + 684);
                                                                    *(_DWORD *)(v145 + 684) = 0;
                                                                    *(_DWORD *)(*((void *)this + 33) + 684) ^= 0xFFFFFF00;
                                                                    uint64_t v147 = *((void *)this + 33);
                                                                    int v148 = *(_DWORD *)(v147 + 684);
                                                                    *(_DWORD *)(v147 + 684) = v146;
                                                                    if (!*((void *)this + 388)
                                                                      && !*((_DWORD *)this + 814)
                                                                      && !*((_DWORD *)this + 815))
                                                                    {
                                                                      goto LABEL_340;
                                                                    }
                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 388, 684, 0, 0xFFFFFFFFLL, 8, v148, 4);
                                                                    if (!result)
                                                                    {
LABEL_340:
                                                                      if ((*(_DWORD *)(*(void *)v3 + 688) = 0,
                                                                            int v149 = *(_DWORD *)(*(void *)v3 + 688),
                                                                            *(_DWORD *)(*(void *)v3 + 688) = 0,
                                                                            *(_DWORD *)(*(void *)v3 + 688) ^= 0x3FFu,
                                                                            int v150 = *(_DWORD *)(*(void *)v3 + 688),
                                                                            *(_DWORD *)(*(void *)v3 + 688) = v149,
                                                                            !*((void *)this + 388))
                                                                        && !*((_DWORD *)this + 814)
                                                                        && !*((_DWORD *)this + 815)
                                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 388, 688, 0, 0x3FFFFFFFFFFLL, 32, v150, 4), !result))
                                                                      {
                                                                        *(_DWORD *)(*((void *)this + 33) + 692) = 0;
                                                                        uint64_t v151 = *((void *)this + 33);
                                                                        int v152 = *(_DWORD *)(v151 + 692);
                                                                        *(_DWORD *)(v151 + 692) = 0;
                                                                        *(_DWORD *)(*((void *)this + 33) + 692) ^= 0xFFFFFF00;
                                                                        uint64_t v153 = *((void *)this + 33);
                                                                        int v154 = *(_DWORD *)(v153 + 692);
                                                                        *(_DWORD *)(v153 + 692) = v152;
                                                                        if (!*((void *)this + 410)
                                                                          && !*((_DWORD *)this + 858)
                                                                          && !*((_DWORD *)this + 859))
                                                                        {
                                                                          goto LABEL_341;
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 692, 0, 0xFFFFFFFFLL, 8, v154, 4);
                                                                        if (!result)
                                                                        {
LABEL_341:
                                                                          if ((*(_DWORD *)(*(void *)v3 + 696) = 0,
                                                                                int v155 = *(_DWORD *)(*(void *)v3 + 696),
                                                                                *(_DWORD *)(*(void *)v3 + 696) = 0,
                                                                                *(_DWORD *)(*(void *)v3 + 696) ^= 0x3FFu,
                                                                                int v156 = *(_DWORD *)(*(void *)v3 + 696),
                                                                                *(_DWORD *)(*(void *)v3 + 696) = v155,
                                                                                !*((void *)this + 410))
                                                                            && !*((_DWORD *)this + 858)
                                                                            && !*((_DWORD *)this + 859)
                                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 410, 696, 0, 0x3FFFFFFFFFFLL, 32, v156, 4), !result))
                                                                          {
                                                                            *(_DWORD *)(*((void *)this + 33) + 70pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                            uint64_t v157 = *((void *)this + 33);
                                                                            int v158 = *(_DWORD *)(v157 + 700);
                                                                            *(_DWORD *)(v157 + 70pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                            *(_DWORD *)(*((void *)this + 33) + 700) ^= 0xFFFFFF00;
                                                                            uint64_t v159 = *((void *)this + 33);
                                                                            int v160 = *(_DWORD *)(v159 + 700);
                                                                            *(_DWORD *)(v159 + 70pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v158;
                                                                            if (!*((void *)this + 476)
                                                                              && !*((_DWORD *)this + 990)
                                                                              && !*((_DWORD *)this + 991))
                                                                            {
                                                                              goto LABEL_342;
                                                                            }
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 700, 0, 0xFFFFFFFFLL, 8, v160, 4);
                                                                            if (!result)
                                                                            {
LABEL_342:
                                                                              if ((*(_DWORD *)(*(void *)v3 + 704) = 0,
                                                                                    int v161 = *(_DWORD *)(*(void *)v3 + 704),
                                                                                    *(_DWORD *)(*(void *)v3 + 704) = 0,
                                                                                    *(_DWORD *)(*(void *)v3 + 704) ^= 0x3FFu,
                                                                                    int v162 = *(_DWORD *)(*(void *)v3 + 704),
                                                                                    *(_DWORD *)(*(void *)v3 + 704) = v161,
                                                                                    !*((void *)this + 476))
                                                                                && !*((_DWORD *)this + 990)
                                                                                && !*((_DWORD *)this + 991)
                                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 476, 704, 0, 0x3FFFFFFFFFFLL, 32, v162, 4), !result))
                                                                              {
                                                                                int v163 = *(_DWORD *)(*((void *)this + 32)
                                                                                                 + 42676);
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 708) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 712) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 716) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 72pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 724) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 728) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 732) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 736) = 0;
                                                                                uint64_t v164 = *((void *)this + 33);
                                                                                int v165 = *(_DWORD *)(v164 + 716);
                                                                                *(_DWORD *)(v164 + 716) = 0;
                                                                                *(_DWORD *)(*((void *)this + 33)
                                                                                          + 716) ^= 0xFFFFFF80;
                                                                                uint64_t v166 = *((void *)this + 33);
                                                                                int v167 = *(_DWORD *)(v166 + 716);
                                                                                *(_DWORD *)(v166 + 716) = v165;
                                                                                uint64_t v168 = *(void *)(*(void *)(*((void *)this + 32) + 8000)
                                                                                                 + 384 * v163
                                                                                                 + 8);
                                                                                if (!*(void *)v168
                                                                                  && !*(_DWORD *)(v168 + 152)
                                                                                  && !*(_DWORD *)(v168 + 156))
                                                                                {
                                                                                  goto LABEL_343;
                                                                                }
                                                                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v168, 716, *(_DWORD *)(v168 + 52), 0xFFFFFFFFLL, 7, v167, 4);
                                                                                if (!result)
                                                                                {
LABEL_343:
                                                                                  uint64_t v169 = *((void *)this + 33);
                                                                                  int v170 = *(_DWORD *)(v169 + 720);
                                                                                  *(_DWORD *)(v169 + 72pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                  *(_DWORD *)(*((void *)this + 33)
                                                                                            + 720) ^= 0x3FFu;
                                                                                  uint64_t v171 = *((void *)this + 33);
                                                                                  int v172 = *(_DWORD *)(v171 + 720);
                                                                                  *(_DWORD *)(v171 + 72pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v170;
                                                                                  uint64_t v173 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                  if (!*(void *)v173
                                                                                    && !*(_DWORD *)(v173 + 152)
                                                                                    && !*(_DWORD *)(v173 + 156))
                                                                                  {
                                                                                    goto LABEL_344;
                                                                                  }
                                                                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v173, 720, *(_DWORD *)(v173 + 52), 0x3FFFFFFFFFFLL, 32, v172, 4);
                                                                                  if (!result)
                                                                                  {
LABEL_344:
                                                                                    uint64_t v174 = *((void *)this + 33);
                                                                                    int v175 = *(_DWORD *)(v174 + 732);
                                                                                    *(_DWORD *)(v174 + 732) = 0;
                                                                                    *(_DWORD *)(*((void *)this + 33)
                                                                                              + 732) ^= 0xFFFFFF80;
                                                                                    uint64_t v176 = *((void *)this + 33);
                                                                                    int v177 = *(_DWORD *)(v176 + 732);
                                                                                    *(_DWORD *)(v176 + 732) = v175;
                                                                                    uint64_t v178 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                    if (!*(void *)v178
                                                                                      && !*(_DWORD *)(v178 + 152)
                                                                                      && !*(_DWORD *)(v178 + 156))
                                                                                    {
                                                                                      goto LABEL_186;
                                                                                    }
                                                                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v178, 732, *(_DWORD *)(v178 + 56), 0xFFFFFFFFLL, 7, v177, 4);
                                                                                    if (!result)
                                                                                    {
LABEL_186:
                                                                                      uint64_t v179 = *((void *)this + 33);
                                                                                      int v180 = *(_DWORD *)(v179 + 736);
                                                                                      *(_DWORD *)(v179 + 736) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 736) ^= 0x3FFu;
                                                                                      uint64_t v181 = *((void *)this + 33);
                                                                                      int v182 = *(_DWORD *)(v181 + 736);
                                                                                      *(_DWORD *)(v181 + 736) = v180;
                                                                                      uint64_t v183 = *((void *)this + 32);
                                                                                      uint64_t v184 = *(void *)(*(void *)(v183 + 8000) + 384 * v163 + 8);
                                                                                      if (*(void *)v184
                                                                                        || *(_DWORD *)(v184 + 152)
                                                                                        || *(_DWORD *)(v184 + 156))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v184, 736, *(_DWORD *)(v184 + 56), 0x3FFFFFFFFFFLL, 32, v182, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                        uint64_t v183 = *((void *)this + 32);
                                                                                      }
                                                                                      int v185 = *(_DWORD *)(v183 + 2648);
                                                                                      uint64_t v186 = *((void *)this + 33);
                                                                                      int v187 = *(_DWORD *)(v186 + 708);
                                                                                      *(_DWORD *)(v186 + 708) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 708) ^= 0xFFFFFF80;
                                                                                      uint64_t v188 = *((void *)this + 33);
                                                                                      int v189 = *(_DWORD *)(v188 + 708);
                                                                                      *(_DWORD *)(v188 + 708) = v187;
                                                                                      uint64_t v190 = *((void *)this + 32);
                                                                                      if (v185 == 1)
                                                                                      {
                                                                                        uint64_t v191 = *(void *)(*(void *)(v190 + 8000) + 384 * v163 + 8);
                                                                                        if (*(void *)v191
                                                                                          || *(_DWORD *)(v191 + 152)
                                                                                          || *(_DWORD *)(v191 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v191, 708, *(_DWORD *)(v191 + 64), 0xFFFFFFFFLL, 7, v189, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v192 = *((void *)this + 33);
                                                                                        int v193 = *(_DWORD *)(v192 + 712);
                                                                                        *(_DWORD *)(v192 + 712) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 712) ^= 0x3FFu;
                                                                                        uint64_t v194 = *((void *)this + 33);
                                                                                        int v195 = *(_DWORD *)(v194 + 712);
                                                                                        *(_DWORD *)(v194 + 712) = v193;
                                                                                        uint64_t v196 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                        if (*(void *)v196
                                                                                          || *(_DWORD *)(v196 + 152)
                                                                                          || *(_DWORD *)(v196 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v196, 712, *(_DWORD *)(v196 + 64), 0x3FFFFFFFFFFLL, 32, v195, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v197 = *((void *)this + 33);
                                                                                        int v198 = *(_DWORD *)(v197 + 724);
                                                                                        *(_DWORD *)(v197 + 724) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 724) ^= 0xFFFFFF80;
                                                                                        uint64_t v199 = *((void *)this + 33);
                                                                                        int v200 = *(_DWORD *)(v199 + 724);
                                                                                        *(_DWORD *)(v199 + 724) = v198;
                                                                                        uint64_t v201 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                        if (*(void *)v201
                                                                                          || *(_DWORD *)(v201 + 152)
                                                                                          || *(_DWORD *)(v201 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v201, 724, *(_DWORD *)(v201 + 68), 0xFFFFFFFFLL, 7, v200, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v202 = *((void *)this + 33);
                                                                                        int v203 = *(_DWORD *)(v202 + 728);
                                                                                        *(_DWORD *)(v202 + 728) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 728) ^= 0x3FFu;
                                                                                        uint64_t v204 = *((void *)this + 33);
                                                                                        int v205 = *(_DWORD *)(v204 + 728);
                                                                                        *(_DWORD *)(v204 + 728) = v203;
                                                                                        uint64_t v206 = *(void *)(*(void *)(*((void *)this + 32) + 8000) + 384 * v163 + 8);
                                                                                        if (!*(void *)v206
                                                                                          && !*(_DWORD *)(v206 + 152)
                                                                                          && !*(_DWORD *)(v206 + 156))
                                                                                        {
                                                                                          goto LABEL_224;
                                                                                        }
                                                                                        int v207 = *(_DWORD *)(v206 + 68);
                                                                                        int v208 = this;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        uint64_t v209 = v190 + 176 * v163;
                                                                                        if (*(void *)(v209 + 3072)
                                                                                          || *(_DWORD *)(v190 + 176 * v163 + 3224)
                                                                                          || *(_DWORD *)(v190 + 176 * v163 + 3228))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v209 + 3072), 708, 0, 0xFFFFFFFFLL, 7, v189, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v210 = *((void *)this + 33);
                                                                                        int v211 = *(_DWORD *)(v210 + 712);
                                                                                        *(_DWORD *)(v210 + 712) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 712) ^= 0x3FFu;
                                                                                        uint64_t v212 = *((void *)this + 33);
                                                                                        int v213 = *(_DWORD *)(v212 + 712);
                                                                                        *(_DWORD *)(v212 + 712) = v211;
                                                                                        uint64_t v214 = *((void *)this + 32);
                                                                                        uint64_t v215 = v214 + 176 * v163;
                                                                                        if (*(void *)(v215 + 3072)
                                                                                          || *(_DWORD *)(v214 + 176 * v163 + 3224)
                                                                                          || *(_DWORD *)(v214 + 176 * v163 + 3228))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v215 + 3072), 712, 0, 0x3FFFFFFFFFFLL, 32, v213, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v216 = *((void *)this + 33);
                                                                                        int v217 = *(_DWORD *)(v216 + 724);
                                                                                        *(_DWORD *)(v216 + 724) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 724) ^= 0xFFFFFF80;
                                                                                        uint64_t v218 = *((void *)this + 33);
                                                                                        int v219 = *(_DWORD *)(v218 + 724);
                                                                                        *(_DWORD *)(v218 + 724) = v217;
                                                                                        uint64_t v220 = *((void *)this + 32);
                                                                                        uint64_t v221 = v220 + 176 * v163;
                                                                                        if (*(void *)(v221 + 5536)
                                                                                          || *(_DWORD *)(v220 + 176 * v163 + 5688)
                                                                                          || *(_DWORD *)(v220 + 176 * v163 + 5692))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v221 + 5536), 724, 0, 0xFFFFFFFFLL, 7, v219, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v222 = *((void *)this + 33);
                                                                                        int v223 = *(_DWORD *)(v222 + 728);
                                                                                        *(_DWORD *)(v222 + 728) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 728) ^= 0x3FFu;
                                                                                        uint64_t v224 = *((void *)this + 33);
                                                                                        int v205 = *(_DWORD *)(v224 + 728);
                                                                                        *(_DWORD *)(v224 + 728) = v223;
                                                                                        uint64_t v225 = *((void *)this + 32);
                                                                                        uint64_t v226 = v225 + 176 * v163;
                                                                                        if (!*(void *)(v226 + 5536)
                                                                                          && !*(_DWORD *)(v225 + 176 * v163 + 5688)
                                                                                          && !*(_DWORD *)(v225 + 176 * v163 + 5692))
                                                                                        {
                                                                                          goto LABEL_224;
                                                                                        }
                                                                                        uint64_t v206 = v226 + 5536;
                                                                                        int v208 = this;
                                                                                        int v207 = 0;
                                                                                      }
                                                                                      uint64_t result = CAHDec::addToPatcherList((uint64_t)v208, (void *)v206, 728, v207, 0x3FFFFFFFFFFLL, 32, v205, 4);
                                                                                      if (result) {
                                                                                        return result;
                                                                                      }
LABEL_224:
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 74pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 744) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 748) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 752) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 756) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 764) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 768) = 0;
                                                                                      if (*(_DWORD *)(*((void *)this + 32) + 2644))
                                                                                      {
                                                                                        uint64_t v227 = *((void *)this + 33);
                                                                                        int v228 = *(_DWORD *)(v227 + 740);
                                                                                        *(_DWORD *)(v227 + 74pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 740) ^= 0xFFFFFF00;
                                                                                        uint64_t v229 = *((void *)this + 33);
                                                                                        int v230 = *(_DWORD *)(v229 + 740);
                                                                                        *(_DWORD *)(v229 + 74pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v228;
                                                                                        if (*((void *)this + 454)
                                                                                          || *((_DWORD *)this + 946)
                                                                                          || *((_DWORD *)this + 947))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 740, 0, 0xFFFFFFFFLL, 8, v230, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        int v231 = *(_DWORD *)(*(void *)v3 + 744);
                                                                                        *(_DWORD *)(*(void *)v3 + 744) = 0;
                                                                                        *(_DWORD *)(*(void *)v3 + 744) ^= 0x3FFu;
                                                                                        int v232 = *(_DWORD *)(*(void *)v3 + 744);
                                                                                        *(_DWORD *)(*(void *)v3 + 744) = v231;
                                                                                        if (*((void *)this + 454)
                                                                                          || *((_DWORD *)this + 946)
                                                                                          || *((_DWORD *)this + 947))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 454, 744, 0, 0x3FFFFFFFFFFLL, 32, v232, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v233 = *((void *)this + 32);
                                                                                        int v234 = *(unsigned __int8 *)(v233 + 3004);
                                                                                        if (*(unsigned char *)(v233 + 3004))
                                                                                        {
                                                                                          int v234 = *(_DWORD *)(v233 + 3016);
                                                                                          int v235 = *(_DWORD *)(v233 + 3020);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int v235 = 0;
                                                                                        }
                                                                                        uint64_t v236 = *(void *)(v233 + 42696);
                                                                                        int v237 = *(_DWORD *)(v236 + 56);
                                                                                        int v238 = *(_DWORD *)(v236 + 52)
                                                                                             + v234;
                                                                                        uint64_t v239 = *((void *)this + 33);
                                                                                        int v240 = *(_DWORD *)(v239 + 748);
                                                                                        *(_DWORD *)(v239 + 748) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 748) ^= 0xFFFFFFC0;
                                                                                        uint64_t v241 = *((void *)this + 33);
                                                                                        int v242 = *(_DWORD *)(v241 + 748);
                                                                                        *(_DWORD *)(v241 + 748) = v240;
                                                                                        uint64_t v243 = *(void *)(*((void *)this + 32) + 42696);
                                                                                        if (*(void *)v243
                                                                                          || *(_DWORD *)(v243 + 152)
                                                                                          || *(_DWORD *)(v243 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v243, 748, v238, 0xFFFFFFFFLL, 6, v242, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v244 = *((void *)this + 33);
                                                                                        int v245 = *(_DWORD *)(v244 + 752);
                                                                                        *(_DWORD *)(v244 + 752) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 752) ^= 0x3FFu;
                                                                                        uint64_t v246 = *((void *)this + 33);
                                                                                        int v247 = *(_DWORD *)(v246 + 752);
                                                                                        *(_DWORD *)(v246 + 752) = v245;
                                                                                        uint64_t v248 = *(void *)(*((void *)this + 32) + 42696);
                                                                                        if (*(void *)v248
                                                                                          || *(_DWORD *)(v248 + 152)
                                                                                          || *(_DWORD *)(v248 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v248, 752, v238, 0x3FFFFFFFFFFLL, 32, v247, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v249 = *((void *)this + 33);
                                                                                        int v250 = *(_DWORD *)(v249 + 760);
                                                                                        *(_DWORD *)(v249 + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 760) ^= 0xFFFFFFC0;
                                                                                        uint64_t v251 = *((void *)this + 33);
                                                                                        int v252 = *(_DWORD *)(v251 + 760);
                                                                                        *(_DWORD *)(v251 + 76pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v250;
                                                                                        uint64_t v253 = *(void *)(*((void *)this + 32) + 42696);
                                                                                        if (*(void *)v253
                                                                                          || *(_DWORD *)(v253 + 152)
                                                                                          || *(_DWORD *)(v253 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v253, 760, v237 + v235, 0xFFFFFFFFLL, 6, v252, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v254 = *((void *)this + 33);
                                                                                        int v255 = *(_DWORD *)(v254 + 764);
                                                                                        *(_DWORD *)(v254 + 764) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + 764) ^= 0x3FFu;
                                                                                        uint64_t v256 = *((void *)this + 33);
                                                                                        int v257 = *(_DWORD *)(v256 + 764);
                                                                                        *(_DWORD *)(v256 + 764) = v255;
                                                                                        uint64_t v258 = *((void *)this + 32);
                                                                                        uint64_t v259 = *(void *)(v258 + 42696);
                                                                                        if (*(void *)v259
                                                                                          || *(_DWORD *)(v259 + 152)
                                                                                          || *(_DWORD *)(v259 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v259, 764, v237 + v235, 0x3FFFFFFFFFFLL, 32, v257, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                          uint64_t v258 = *((void *)this + 32);
                                                                                        }
                                                                                        uint64_t v260 = *(void *)v3;
                                                                                        unsigned int v261 = *(_DWORD *)(*(void *)v3 + 756) & 0xFFFC003F;
                                                                                        if (*(unsigned char *)(v258 + 8))
                                                                                        {
                                                                                          *(_DWORD *)(v260 + 756) = v261 | *(_DWORD *)(*(void *)(v258 + 42696) + 76) & 0x3FFC0;
                                                                                          uint64_t v262 = (_DWORD *)(*(void *)(*((void *)this + 32) + 42696) + 80);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          *(_DWORD *)(v260 + 756) = v261 | *(_DWORD *)(*(void *)(v258 + 15944) + 78508) & 0x3FFC0;
                                                                                          uint64_t v262 = (_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 78512);
                                                                                        }
                                                                                        *(_DWORD *)(*(void *)v3 + 768) = *(_DWORD *)(*(void *)v3 + 768) & 0xFFF8003F | (((*v262 >> 6) & 0x1FFF) << 6);
                                                                                      }
                                                                                      uint64_t v263 = *((void *)this + 32);
                                                                                      if (*(unsigned char *)(*(void *)(v263 + 15944) + 128)
                                                                                        && !*(unsigned char *)(*(void *)(v263 + 42424) + 1956))
                                                                                      {
                                                                                        return 0;
                                                                                      }
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 772) = 0;
                                                                                      uint64_t v264 = *((void *)this + 33);
                                                                                      int v265 = *(_DWORD *)(v264 + 772);
                                                                                      *(_DWORD *)(v264 + 772) = 0;
                                                                                      *(_DWORD *)(*((void *)this + 33)
                                                                                                + 772) ^= 0xFFFFFF00;
                                                                                      uint64_t v266 = *((void *)this + 33);
                                                                                      int v267 = *(_DWORD *)(v266 + 772);
                                                                                      *(_DWORD *)(v266 + 772) = v265;
                                                                                      if (*((void *)this + 498)
                                                                                        || *((_DWORD *)this + 1034)
                                                                                        || *((_DWORD *)this + 1035))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 772, 0, 0xFFFFFFFFLL, 8, v267, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      *(_DWORD *)(*(void *)v3 + 776) = 0;
                                                                                      int v268 = *(_DWORD *)(*(void *)v3 + 776);
                                                                                      *(_DWORD *)(*(void *)v3 + 776) = 0;
                                                                                      *(_DWORD *)(*(void *)v3 + 776) ^= 0x3FFu;
                                                                                      int v269 = *(_DWORD *)(*(void *)v3 + 776);
                                                                                      *(_DWORD *)(*(void *)v3 + 776) = v268;
                                                                                      if (*((void *)this + 498)
                                                                                        || *((_DWORD *)this + 1034)
                                                                                        || *((_DWORD *)this + 1035))
                                                                                      {
                                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 498, 776, 0, 0x3FFFFFFFFFFLL, 32, v269, 4);
                                                                                        if (result) {
                                                                                          return result;
                                                                                        }
                                                                                      }
                                                                                      if (*(unsigned char *)(*(void *)(*((void *)this + 32) + 15944) + 128)) {
                                                                                        return 0;
                                                                                      }
                                                                                      uint64_t v270 = 0;
                                                                                      uint64_t v271 = 0;
                                                                                      do
                                                                                      {
                                                                                        uint64_t v272 = *(void *)(*(void *)(*(void *)(*((void *)this + 32) + 15944) + 79224) + v271);
                                                                                        if (!v272
                                                                                          || (uint64_t v273 = *(void *)(v272 + 2016)) == 0)
                                                                                        {
                                                                                          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                                          {
                                                                                            LODWORD(v329[0]) = 136315138;
                                                                                            *(void *)((char *)v329 + 4) = "populateAddressRegisters";
                                                                                            _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): Unexpected. av1_fb->buffer is 0x0!", (uint8_t *)v329, 0xCu);
                                                                                          }
                                                                                          return 0xFFFFFFFFLL;
                                                                                        }
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 808) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 836) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 864) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 892) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 948) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 976) = 0;
                                                                                        uint64_t v274 = *(void *)v3 + v270;
                                                                                        int v275 = *(_DWORD *)(v274 + 836);
                                                                                        *(_DWORD *)(v274 + 836) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 836) ^= 0xFFFFFF80;
                                                                                        uint64_t v276 = *(void *)v3 + v270;
                                                                                        int v277 = *(_DWORD *)(v276 + 836);
                                                                                        *(_DWORD *)(v276 + 836) = v275;
                                                                                        uint64_t v278 = *(void *)(v273 + 8);
                                                                                        if (*(void *)v278
                                                                                          || *(_DWORD *)(v278 + 152)
                                                                                          || *(_DWORD *)(v278 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v278, (int)v270 + 836, *(_DWORD *)(v278 + 52), 0xFFFFFFFFLL, 7, v277, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v279 = *(void *)v3 + v270;
                                                                                        int v280 = *(_DWORD *)(v279 + 864);
                                                                                        *(_DWORD *)(v279 + 864) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 864) ^= 0x3FFu;
                                                                                        uint64_t v281 = *(void *)v3 + v270;
                                                                                        int v282 = *(_DWORD *)(v281 + 864);
                                                                                        *(_DWORD *)(v281 + 864) = v280;
                                                                                        uint64_t v283 = *(void *)(v273 + 8);
                                                                                        if (*(void *)v283
                                                                                          || *(_DWORD *)(v283 + 152)
                                                                                          || *(_DWORD *)(v283 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v283, (int)v270 + 864, *(_DWORD *)(v283 + 52), 0x3FFFFFFFFFFLL, 32, v282, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v284 = *(void *)v3 + v270;
                                                                                        int v285 = *(_DWORD *)(v284 + 948);
                                                                                        *(_DWORD *)(v284 + 948) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 948) ^= 0xFFFFFF80;
                                                                                        uint64_t v286 = *(void *)v3 + v270;
                                                                                        int v287 = *(_DWORD *)(v286 + 948);
                                                                                        *(_DWORD *)(v286 + 948) = v285;
                                                                                        uint64_t v288 = *(void *)(v273 + 8);
                                                                                        if (*(void *)v288
                                                                                          || *(_DWORD *)(v288 + 152)
                                                                                          || *(_DWORD *)(v288 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v288, (int)v270 + 948, *(_DWORD *)(v288 + 56), 0xFFFFFFFFLL, 7, v287, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        uint64_t v289 = *(void *)v3 + v270;
                                                                                        int v290 = *(_DWORD *)(v289 + 976);
                                                                                        *(_DWORD *)(v289 + 976) = 0;
                                                                                        *(_DWORD *)(*(void *)v3
                                                                                                  + v270
                                                                                                  + 976) ^= 0x3FFu;
                                                                                        uint64_t v291 = *(void *)v3 + v270;
                                                                                        int v292 = *(_DWORD *)(v291 + 976);
                                                                                        *(_DWORD *)(v291 + 976) = v290;
                                                                                        uint64_t v293 = *(void *)(v273 + 8);
                                                                                        if (*(void *)v293
                                                                                          || *(_DWORD *)(v293 + 152)
                                                                                          || *(_DWORD *)(v293 + 156))
                                                                                        {
                                                                                          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v293, (int)v270 + 976, *(_DWORD *)(v293 + 56), 0x3FFFFFFFFFFLL, 32, v292, 4);
                                                                                          if (result) {
                                                                                            return result;
                                                                                          }
                                                                                        }
                                                                                        int v294 = *(_DWORD *)(*((void *)this + 32) + 2648);
                                                                                        uint64_t v295 = *((void *)this + 33)
                                                                                             + v270;
                                                                                        int v296 = *(_DWORD *)(v295 + 780);
                                                                                        *(_DWORD *)(v295 + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                        *(_DWORD *)(*((void *)this + 33)
                                                                                                  + v270
                                                                                                  + 780) ^= 0xFFFFFF80;
                                                                                        uint64_t v297 = *((void *)this + 33)
                                                                                             + v270;
                                                                                        int v298 = *(_DWORD *)(v297 + 780);
                                                                                        *(_DWORD *)(v297 + 78pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v296;
                                                                                        if (v294 == 1)
                                                                                        {
                                                                                          uint64_t v299 = *(void *)(v273 + 8);
                                                                                          if (*(void *)v299
                                                                                            || *(_DWORD *)(v299 + 152)
                                                                                            || *(_DWORD *)(v299 + 156))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v299, (int)v270 + 780, *(_DWORD *)(v299 + 64), 0xFFFFFFFFLL, 7, v298, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v300 = *(void *)v3 + v270;
                                                                                          int v301 = *(_DWORD *)(v300 + 808);
                                                                                          *(_DWORD *)(v300 + 808) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 808) ^= 0x3FFu;
                                                                                          uint64_t v302 = *(void *)v3 + v270;
                                                                                          int v303 = *(_DWORD *)(v302 + 808);
                                                                                          *(_DWORD *)(v302 + 808) = v301;
                                                                                          uint64_t v304 = *(void *)(v273 + 8);
                                                                                          if (*(void *)v304
                                                                                            || *(_DWORD *)(v304 + 152)
                                                                                            || *(_DWORD *)(v304 + 156))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v304, (int)v270 + 808, *(_DWORD *)(v304 + 64), 0x3FFFFFFFFFFLL, 32, v303, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v305 = *(void *)v3 + v270;
                                                                                          int v306 = *(_DWORD *)(v305 + 892);
                                                                                          *(_DWORD *)(v305 + 892) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 892) ^= 0xFFFFFF80;
                                                                                          uint64_t v307 = *(void *)v3 + v270;
                                                                                          int v308 = *(_DWORD *)(v307 + 892);
                                                                                          *(_DWORD *)(v307 + 892) = v306;
                                                                                          uint64_t v309 = *(void *)(v273 + 8);
                                                                                          if (*(void *)v309
                                                                                            || *(_DWORD *)(v309 + 152)
                                                                                            || *(_DWORD *)(v309 + 156))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v309, (int)v270 + 892, *(_DWORD *)(v309 + 68), 0xFFFFFFFFLL, 7, v308, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v310 = *(void *)v3 + v270;
                                                                                          int v311 = *(_DWORD *)(v310 + 920);
                                                                                          *(_DWORD *)(v310 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 920) ^= 0x3FFu;
                                                                                          uint64_t v312 = *(void *)v3 + v270;
                                                                                          int v313 = *(_DWORD *)(v312 + 920);
                                                                                          *(_DWORD *)(v312 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v311;
                                                                                          uint64_t v314 = *(void *)(v273 + 8);
                                                                                          if (*(void *)v314
                                                                                            || *(_DWORD *)(v314 + 152)
                                                                                            || *(_DWORD *)(v314 + 156))
                                                                                          {
                                                                                            int v315 = *(_DWORD *)(v314 + 68);
                                                                                            int v316 = v270 + 920;
                                                                                            int v317 = this;
                                                                                            goto LABEL_325;
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          if (*(void *)(v273 + 24)
                                                                                            || *(_DWORD *)(v273 + 176)
                                                                                            || *(_DWORD *)(v273 + 180))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v273 + 24), (int)v270 + 780, 0, 0xFFFFFFFFLL, 7, v298, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v318 = *(void *)v3 + v270;
                                                                                          int v319 = *(_DWORD *)(v318 + 808);
                                                                                          *(_DWORD *)(v318 + 808) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 808) ^= 0x3FFu;
                                                                                          uint64_t v320 = *(void *)v3 + v270;
                                                                                          int v321 = *(_DWORD *)(v320 + 808);
                                                                                          *(_DWORD *)(v320 + 808) = v319;
                                                                                          if (*(void *)(v273 + 24)
                                                                                            || *(_DWORD *)(v273 + 176)
                                                                                            || *(_DWORD *)(v273 + 180))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v273 + 24), (int)v270 + 808, 0, 0x3FFFFFFFFFFLL, 32, v321, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v322 = *(void *)v3 + v270;
                                                                                          int v323 = *(_DWORD *)(v322 + 892);
                                                                                          *(_DWORD *)(v322 + 892) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 892) ^= 0xFFFFFF80;
                                                                                          uint64_t v324 = *(void *)v3 + v270;
                                                                                          int v325 = *(_DWORD *)(v324 + 892);
                                                                                          *(_DWORD *)(v324 + 892) = v323;
                                                                                          if (*(void *)(v273 + 200)
                                                                                            || *(_DWORD *)(v273 + 352)
                                                                                            || *(_DWORD *)(v273 + 356))
                                                                                          {
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v273 + 200), (int)v270 + 892, 0, 0xFFFFFFFFLL, 7, v325, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                          uint64_t v326 = *(void *)v3 + v270;
                                                                                          int v327 = *(_DWORD *)(v326 + 920);
                                                                                          *(_DWORD *)(v326 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                                          *(_DWORD *)(*(void *)v3 + v270 + 920) ^= 0x3FFu;
                                                                                          uint64_t v328 = *(void *)v3 + v270;
                                                                                          int v313 = *(_DWORD *)(v328 + 920);
                                                                                          *(_DWORD *)(v328 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v327;
                                                                                          if (*(void *)(v273 + 200)
                                                                                            || *(_DWORD *)(v273 + 352)
                                                                                            || *(_DWORD *)(v273 + 356))
                                                                                          {
                                                                                            int v316 = v270 + 920;
                                                                                            int v317 = this;
                                                                                            uint64_t v314 = v273 + 200;
                                                                                            int v315 = 0;
LABEL_325:
                                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)v317, (void *)v314, v316, v315, 0x3FFFFFFFFFFLL, 32, v313, 4);
                                                                                            if (result) {
                                                                                              return result;
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                        uint64_t result = 0;
                                                                                        v271 += 8;
                                                                                        v270 += 4;
                                                                                      }
                                                                                      while (v270 != 28);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecCatnipAvx::populateDecryptionRegisters(CAHDecCatnipAvx *this)
{
  uint64_t v1 = *((void *)this + 32);
  if (*(_DWORD *)(v1 + 2360) == 1)
  {
    uint64_t v2 = *((void *)this + 33);
    *(_DWORD *)(v2 + 1276) = *(_DWORD *)(v2 + 1276) & 0xFFFFFFFE | *(_DWORD *)(v1 + 2508) & 1;
    if (*(_DWORD *)(v1 + 2508))
    {
      *(_DWORD *)(v2 + 1288) = 0x10000000;
      *(_DWORD *)(v2 + 1292) = *(_DWORD *)(v1 + 2368);
      *(_DWORD *)(v2 + 1304) = 0;
      *(void *)(v2 + 1296) = 0;
      *(_OWORD *)(v2 + 1308) = *(_OWORD *)(v1 + 2372);
      long long v3 = *(_OWORD *)(v1 + 2388);
      *(_OWORD *)(v2 + 134pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v1 + 2404);
      *(_OWORD *)(v2 + 1324) = v3;
    }
    *(_DWORD *)(*((void *)this + 33) + 1276) = *(_DWORD *)(*((void *)this + 33) + 1276) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v1 + 2512) & 1));
    if (*(_DWORD *)(v1 + 2512))
    {
      *(_DWORD *)(v2 + 1356) = 0;
      char v4 = *(_DWORD *)(v1 + 2424);
      *(_DWORD *)(v2 + 1356) = (*(_DWORD *)(v1 + 2424) & 1) << 22;
      int v5 = ((*(_DWORD *)(v1 + 2420) & 1) << 23) | ((v4 & 1) << 22) | 0x20000000;
      *(_DWORD *)(v2 + 1356) = v5;
      *(_DWORD *)(v2 + 1356) = v5 | (*(_DWORD *)(v1 + 2364) == 0);
      long long v6 = *(_OWORD *)(v1 + 2428);
      long long v7 = *(_OWORD *)(v1 + 2444);
      *(_OWORD *)(v2 + 1392) = *(_OWORD *)(v1 + 2460);
      *(_OWORD *)(v2 + 1376) = v7;
      *(_OWORD *)(v2 + 136pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v6;
    }
    *(_DWORD *)(*((void *)this + 33) + 1276) = *(_DWORD *)(*((void *)this + 33) + 1276) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v1 + 2516) & 1));
    *(_DWORD *)(*((void *)this + 33) + 1276) = *(_DWORD *)(*((void *)this + 33) + 1276) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v1 + 2520) & 1));
    *(_DWORD *)(*((void *)this + 33) + 1276) = *(_DWORD *)(*((void *)this + 33) + 1276) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v1 + 2524) & 1));
    if (*(_DWORD *)(v1 + 2516))
    {
      *(_DWORD *)(v2 + 1412) = 0;
      if (*(_DWORD *)(v1 + 2476) == 2) {
        int v8 = 805306368;
      }
      else {
        int v8 = 813694976;
      }
      *(_DWORD *)(v2 + 1412) = v8;
      memcpy((void *)(v2 + 1416), (const void *)(v1 + 2480), 4 * *(unsigned int *)(v1 + 2476));
      *(_DWORD *)(v1 + 2516) = 0;
    }
  }
  return 0;
}

uint64_t CAHDecCatnipAvx::populateTiles(CAHDecCatnipAvx *this)
{
  uint64_t v2 = (*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 140)
                    * *(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 136));
  uint64_t v3 = *((void *)this + *((unsigned int *)this + 13) + 34);
  CAHDecTansyAvx::populateClearTiles(this);
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 1432;
    do
    {
      CAHDecCatnipAvx::populateTileRegisters((uint64_t)this, v5, v4++);
      v5 += 12;
    }
    while (v2 != v4);
  }
  return 0;
}

uint64_t CAHDecCatnipAvx::populateCommonRegisters(CAHDecCatnipAvx *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000003;
  return 0;
}

uint64_t CAHDecCatnipAvx::updateCommonRegisters(CAHDecCatnipAvx *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

uint64_t CAHDecCatnipAvx::populateSequenceRegisters(CAHDecCatnipAvx *this)
{
  uint64_t v2 = *((void *)this + 32);
  uint64_t v1 = *((void *)this + 33);
  uint64_t v3 = *(void *)(v2 + 42424);
  uint64_t v4 = *(void *)(v2 + 15944);
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  unsigned __int16 v5 = *(_DWORD *)(v4 + 8) - 1;
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v5;
  *(_DWORD *)(v1 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (v5 | ((unsigned __int16)*(_DWORD *)(v4 + 12) << 16)) - 0x10000;
  *(_DWORD *)(v1 + 44) = 0;
  int v6 = *(_DWORD *)(v3 + 80) & 1;
  *(_DWORD *)(v1 + 44) = v6;
  unsigned int v7 = v6 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v3 + 76) & 7));
  *(_DWORD *)(v1 + 44) = v7;
  unsigned int v8 = v7 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v3 + 72) & 1));
  *(_DWORD *)(v1 + 44) = v8;
  unsigned int v9 = v8 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v3 + 96) & 1));
  *(_DWORD *)(v1 + 44) = v9;
  unsigned int v10 = v9 & 0xFFFFFFBF | ((*(unsigned char *)(v3 + 95) & 1) << 6);
  *(_DWORD *)(v1 + 44) = v10;
  unsigned int v11 = v10 & 0xFFFFFF7F | ((*(unsigned char *)(v3 + 94) & 1) << 7);
  *(_DWORD *)(v1 + 44) = v11;
  unsigned int v12 = v11 & 0xFFFFFEFF | ((*(unsigned char *)(v3 + 93) & 1) << 8);
  *(_DWORD *)(v1 + 44) = v12;
  unsigned int v13 = v12 & 0xFFFFFDFF | ((*(unsigned char *)(v3 + 92) & 1) << 9);
  *(_DWORD *)(v1 + 44) = v13;
  unsigned int v14 = v13 & 0xFFFFFBFF | ((*(_DWORD *)(v3 + 60) == 15) << 10);
  *(_DWORD *)(v1 + 44) = v14;
  LODWORD(v3) = v14 & 0xFFFFF7FF | (*(unsigned __int8 *)(v3 + 1942) << 11);
  *(_DWORD *)(v1 + 44) = v3;
  LODWORD(v3) = v3 & 0xFFF87FFF | ((*(unsigned char *)(v4 + 58) & 0xF) << 15);
  *(_DWORD *)(v1 + 44) = v3;
  LODWORD(v3) = v3 & 0xFF87FFFF | ((*(unsigned char *)(v4 + 57) & 0xF) << 19);
  *(_DWORD *)(v1 + 44) = v3;
  *(_DWORD *)(v1 + 44) = v3 & 0xFCFFFFFF | ((*(unsigned char *)(v4 + 56) & 3) << 24);
  return 0;
}

uint64_t CAHDecCatnipAvx::getUpscaleConvolveStep(CAHDecCatnipAvx *this, int a2, int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 >= 0) {
      int v3 = a3;
    }
    else {
      int v3 = a3 + 1;
    }
    return (((v3 >> 1) + (a2 << 14)) / a3);
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      int v6 = "int32_t CAHDecCatnipAvx::getUpscaleConvolveStep(int, int)";
      __int16 v7 = 1024;
      int v8 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid out_length %d\n", (uint8_t *)&v5, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t CAHDecCatnipAvx::getUpscaleConvolveX0(CAHDecCatnipAvx *this, int a2, int a3, int a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 >= 0) {
      int v4 = a3;
    }
    else {
      int v4 = a3 + 1;
    }
    return ((((a2 - a3) << 13) + (v4 >> 1)) / a3
          - ((a4 * a3 - (a2 << 14) + (a4 * a3 - (a2 << 14) < 0)) >> 1)
          + 128) & 0x3FFF;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      __int16 v7 = "int32_t CAHDecCatnipAvx::getUpscaleConvolveX0(int, int, int32_t)";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid out_length %d\n", (uint8_t *)&v6, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t CAHDecCatnipAvx::populatePictureRegisters(CAHDecCatnipAvx *this)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v3 = *(void *)(v1 + 15944);
  uint64_t v4 = *(void *)(v1 + 42424);
  *(_DWORD *)(v2 + 48) = 766509056;
  int v5 = ((*(unsigned char *)(v1 + 2652) & 1) << 19) | 0x2DB00000;
  *(_DWORD *)(v2 + 48) = v5;
  unsigned int v6 = v5 & 0xFFFBFFFF | ((*(unsigned char *)(v1 + 2653) & 1) << 18);
  *(_DWORD *)(v2 + 48) = v6;
  unsigned int v7 = v6 & 0xFFFDFFFF | ((*(unsigned char *)(v1 + 2654) & 1) << 17);
  *(_DWORD *)(v2 + 48) = v7;
  int v8 = *(unsigned __int8 *)(v3 + 128);
  if (*(unsigned char *)(v3 + 128)) {
    int v8 = (*(unsigned char *)(v4 + 1956) == 0) << 13;
  }
  int v9 = v8 | v7;
  *(_DWORD *)(v2 + 48) = v9;
  int v10 = v9 | ((*(_DWORD *)(*((void *)this + 32) + 2644) != 0) << 12);
  *(_DWORD *)(v2 + 48) = v10;
  unsigned int v11 = v10 & 0xFFFFF00F | ((*(_DWORD *)(*((void *)this + 32) + 2644) == 1) << 10) | 0x2E0;
  *(_DWORD *)(v2 + 48) = v11;
  unsigned int v12 = v11 & 0xFFFFFFE3 | (4 * (*(_DWORD *)(v3 + 78516) & 3));
  *(_DWORD *)(v2 + 48) = v12;
  *(_DWORD *)(v2 + 48) = v12 & 0xFFFFFFFC | *(_DWORD *)(v3 + 78520) & 3;
  *(_DWORD *)(v2 + 52) = 0;
  if (*(unsigned char *)(v4 + 1956)) {
    int v13 = 318767104;
  }
  else {
    int v13 = 50331648;
  }
  *(_DWORD *)(v2 + 52) = v13;
  int v14 = *(_DWORD *)(v3 + 24);
  int v15 = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v2 + 56) = 0;
  if (*(unsigned char *)(v4 + 1956)) {
    int v15 = ((_WORD)v15 + 7) & 0xFFF8;
  }
  int v16 = (v15 << 16) - 0x10000;
  *(_DWORD *)(v2 + 56) = v16;
  if (*(unsigned char *)(v4 + 1956)) {
    LOWORD(v14) = (v14 + 7) & 0xFFF8;
  }
  *(_DWORD *)(v2 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 56) = v16 & 0xFFFF0000 | (unsigned __int16)(v14 - 1);
  int v17 = *(unsigned __int8 *)(v3 + 128) << 31;
  *(_DWORD *)(v2 + 64) = v17;
  unsigned int v18 = v17 & 0x807FFFFF | (*(_DWORD *)(v4 + 1876) << 23);
  *(_DWORD *)(v2 + 64) = v18;
  unsigned int v19 = v18 & 0xFF8FFFFF | ((*(_DWORD *)(v4 + 1896) & 7) << 20);
  *(_DWORD *)(v2 + 64) = v19;
  unsigned int v20 = v19 & 0xFFF1FFFF | ((*(_DWORD *)(v4 + 1900) & 7) << 17);
  *(_DWORD *)(v2 + 64) = v20;
  unsigned int v21 = v20 & 0xFFFEFFFF | ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 15944) + 79300) & 1) << 16);
  *(_DWORD *)(v2 + 64) = v21;
  unsigned int v22 = v21 & 0xFFFF7FFF | ((*(unsigned char *)(v4 + 2284) & 1) << 15);
  *(_DWORD *)(v2 + 64) = v22;
  char v23 = *(unsigned char *)(v4 + 2284);
  if (v23) {
    char v23 = *(unsigned char *)(v4 + 2285);
  }
  unsigned int v24 = v22 & 0xFFFFBFFF | ((v23 & 1) << 14);
  *(_DWORD *)(v2 + 64) = v24;
  char v25 = *(unsigned char *)(v4 + 2284);
  if (v25) {
    char v25 = *(unsigned char *)(v4 + 2287);
  }
  unsigned int v26 = v24 & 0xFFFFDFFF | ((v25 & 1) << 13);
  *(_DWORD *)(v2 + 64) = v26;
  unsigned int v27 = v26 & 0xFFFFEFFF | (*(unsigned __int8 *)(v4 + 1957) << 12);
  *(_DWORD *)(v2 + 64) = v27;
  if (*(unsigned char *)(v3 + 128)) {
    char v28 = 0;
  }
  else {
    char v28 = *(unsigned char *)(v4 + 1958);
  }
  unsigned int v29 = v27 & 0xFFFFFBFF | ((v28 & 1) << 10);
  *(_DWORD *)(v2 + 64) = v29;
  unsigned int v30 = v29 & 0xFFFFFDFF | (*(unsigned __int8 *)(v4 + 1962) << 9);
  *(_DWORD *)(v2 + 64) = v30;
  unsigned int v31 = v30 & 0xFFFFFEFF | (*(unsigned __int8 *)(v4 + 1941) << 8);
  *(_DWORD *)(v2 + 64) = v31;
  if (*(unsigned char *)(v3 + 128)) {
    char v32 = 1;
  }
  else {
    char v32 = *(unsigned char *)(v4 + 1948);
  }
  uint64_t v33 = 0;
  unsigned int v34 = v31 & 0xFFFFFF7F | ((v32 & 1) << 7);
  *(_DWORD *)(v2 + 64) = v34;
  unsigned int v35 = v34 & 0xFFFFFFBF | (*(unsigned __int8 *)(v4 + 1956) << 6);
  *(_DWORD *)(v2 + 64) = v35;
  unsigned int v36 = v35 & 0xFFFFFFDF | (32 * *(unsigned __int8 *)(v4 + 1959));
  *(_DWORD *)(v2 + 64) = v36;
  unsigned int v37 = v36 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v4 + 1892) & 1));
  *(_DWORD *)(v2 + 64) = v37;
  unsigned int v38 = v37 & 0xFFFFFFF7 | (8 * *(unsigned __int8 *)(v4 + 1960));
  *(_DWORD *)(v2 + 64) = v38;
  unsigned int v39 = v38 & 0xFFFFFFFB | (4 * *(unsigned __int8 *)(v4 + 1961));
  *(_DWORD *)(v2 + 64) = v39;
  *(_DWORD *)(v2 + 64) = v39 & 0xFFFFFFFC | *(_DWORD *)(v4 + 1964) & 3;
  do
  {
    *(&v210 + v33) = v33 + 1;
    ++v33;
  }
  while (v33 != 7);
  unint64_t v40 = 0;
  uint64_t v41 = 1;
  do
  {
    if (v40 <= 5)
    {
      uint64_t v42 = *(void *)(v3 + 79224);
      uint64_t v43 = v41;
      do
      {
        if (v42 && *(void *)(v42 + 8 * v40) == *(void *)(v42 + 8 * v43)) {
          *(&v210 + v43) = *(&v210 + v40);
        }
        ++v43;
      }
      while (v43 != 7);
    }
    ++v40;
    ++v41;
  }
  while (v40 != 7);
  int v44 = 0;
  *(_DWORD *)(v2 + 68) = 0;
  if (!*(unsigned char *)(v3 + 128)) {
    int v44 = *(unsigned __int8 *)(v4 + 2192);
  }
  uint64_t v45 = 0;
  *(_DWORD *)(v2 + 68) = v44 << 29;
  int v46 = ((v210 & 7) << 25) | ((*(_DWORD *)(v4 + 1872) != 0) << 28) | ((v211 & 7) << 22) | ((v212 & 7) << 19) | ((v213 & 7) << 16) | ((v214 & 7) << 13) | ((v215 & 7) << 10) | ((v216 & 7) << 7) | (v44 << 29);
  *(_DWORD *)(v2 + 68) = v46;
  unsigned int v47 = v46 & 0xFFFFFFBF | ((*(_DWORD *)(v4 + 2116) & 1) << 6);
  *(_DWORD *)(v2 + 68) = v47;
  unsigned int v48 = v47 & 0xFFFFFFDF | (32 * (*(_DWORD *)(v4 + 2120) & 1));
  *(_DWORD *)(v2 + 68) = v48;
  unsigned int v49 = v48 & 0xFFFFFFEF | (16 * (*(_DWORD *)(v4 + 2124) & 1));
  *(_DWORD *)(v2 + 68) = v49;
  unsigned int v50 = v49 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v4 + 2128) & 1));
  *(_DWORD *)(v2 + 68) = v50;
  unsigned int v51 = v50 & 0xFFFFFFFB | (4 * (*(_DWORD *)(v4 + 2132) & 1));
  *(_DWORD *)(v2 + 68) = v51;
  unsigned int v52 = v51 & 0xFFFFFFFD | (2 * (*(_DWORD *)(v4 + 2136) & 1));
  *(_DWORD *)(v2 + 68) = v52;
  *(_DWORD *)(v2 + 68) = v52 & 0xFFFFFFFE | *(_DWORD *)(v4 + 2140) & 1;
  uint64_t v53 = (unsigned char *)(v4 + 2300);
  int v54 = (_WORD *)(v4 + 2368);
  do
  {
    uint64_t v55 = (_DWORD *)(v2 + 104 + v45);
    *(v55 - 8) = 0;
    int v56 = (*(_DWORD *)(v4 + 2524 + v45) & 1) << 16;
    *(v55 - 8) = v56;
    int v57 = v56 | ((*v53 != 0) << 15);
    *(v55 - 8) = v57;
    int v58 = v57 | ((*(v53 - 1) != 0) << 14);
    *(v55 - 8) = v58;
    int v59 = v58 | ((*(v53 - 2) != 0) << 13);
    *(v55 - 8) = v59;
    unsigned int v60 = v59 & 0xFFFFE3FF | ((*v54 & 7) << 10);
    *(v55 - 8) = v60;
    int v61 = v60 | ((*(v53 - 7) != 0) << 9);
    *(v55 - 8) = v61;
    *(v55 - 8) = v61 & 0xFFFFFE00 | *(v54 - 5) & 0x1FF;
    *uint64_t v55 = 0;
    int v62 = (*(v53 - 6) != 0) << 31;
    *uint64_t v55 = v62;
    unsigned int v63 = v62 & 0x80FFFFFF | ((*(v54 - 4) & 0x7F) << 24);
    *uint64_t v55 = v63;
    int v64 = v63 | ((*(v53 - 5) != 0) << 23);
    *uint64_t v55 = v64;
    unsigned int v65 = v64 & 0xFF80FFFF | ((*(v54 - 3) & 0x7F) << 16);
    *uint64_t v55 = v65;
    int v66 = v65 | ((*(v53 - 4) != 0) << 15);
    *uint64_t v55 = v66;
    unsigned int v67 = v66 & 0xFFFF80FF | ((*(v54 - 2) & 0x7F) << 8);
    *uint64_t v55 = v67;
    int v68 = v67 | ((*(v53 - 3) != 0) << 7);
    *uint64_t v55 = v68;
    *uint64_t v55 = v68 & 0xFFFFFF80 | *(v54 - 1) & 0x7F;
    v45 += 4;
    v53 += 8;
    v54 += 8;
  }
  while (v45 != 32);
  uint64_t v69 = 0;
  *(_DWORD *)(v2 + 136) = 0x20000;
  uint64_t v70 = v3 + 78544;
  do
  {
    int v71 = (unsigned int *)(v2 + 152 + v69);
    *(v71 - 3) = 0;
    unsigned int v72 = *(_DWORD *)(v70 - 16) << 29;
    *(v71 - 3) = v72;
    unsigned int v73 = v72 & 0xFF00FFFF | (*(_DWORD *)(v70 - 12) << 16);
    *(v71 - 3) = v73;
    unsigned int v74 = v73 & 0xFFFF00FF | (*(_DWORD *)(v70 - 8) << 8);
    *(v71 - 3) = v74;
    *(v71 - 3) = v74 | *(unsigned __int8 *)(v70 - 4);
    *int v71 = 0;
    unsigned int v75 = *(_DWORD *)v70 << 24;
    *int v71 = v75;
    unsigned int v76 = v75 & 0xFF00FFFF | (*(_DWORD *)(v70 + 4) << 16);
    *int v71 = v76;
    unsigned int v77 = v76 & 0xFFFF00FF | (*(_DWORD *)(v70 + 8) << 8);
    *int v71 = v77;
    *int v71 = v77 | *(unsigned __int8 *)(v70 + 12);
    v69 += 4;
    v70 += 224;
  }
  while (v69 != 12);
  *(_DWORD *)(v2 + 164) = 0;
  int v78 = *(_DWORD *)(v4 + 3160) << 31;
  *(_DWORD *)(v2 + 164) = v78;
  unsigned int v79 = v78 & 0x9FFFFFFF | ((*(_DWORD *)(v3 + 79200) & 3) << 29);
  *(_DWORD *)(v2 + 164) = v79;
  unsigned int v80 = v79 & 0xE01FFFFF | (*(_DWORD *)(v4 + 2244) << 21);
  *(_DWORD *)(v2 + 164) = v80;
  unsigned int v81 = v80 & 0xFFE03FFF | ((*(_DWORD *)(v4 + 2248) & 0x7F) << 14);
  *(_DWORD *)(v2 + 164) = v81;
  unsigned int v82 = v81 & 0xFFFFC07F | ((*(_DWORD *)(v4 + 2252) & 0x7F) << 7);
  *(_DWORD *)(v2 + 164) = v82;
  *(_DWORD *)(v2 + 164) = v82 & 0xFFFFFF80 | *(_DWORD *)(v4 + 2260) & 0x7F;
  *(_DWORD *)(v2 + 168) = 0;
  int v83 = (*(_DWORD *)(v4 + 2256) & 0x7F) << 20;
  *(_DWORD *)(v2 + 168) = v83;
  unsigned int v84 = v83 & 0xFFF01FFF | ((*(_DWORD *)(v4 + 2264) & 0x7F) << 13);
  *(_DWORD *)(v2 + 168) = v84;
  int v85 = v84 | (*(unsigned __int8 *)(v4 + 2268) << 12);
  *(_DWORD *)(v2 + 168) = v85;
  unsigned int v86 = v85 & 0xFFFFF0FF | ((*(_DWORD *)(v4 + 2272) & 0xF) << 8);
  *(_DWORD *)(v2 + 168) = v86;
  unsigned int v87 = v86 & 0xFFFFFF0F | (16 * (*(_DWORD *)(v4 + 2276) & 0xF));
  *(_DWORD *)(v2 + 168) = v87;
  *(_DWORD *)(v2 + 168) = v87 & 0xFFFFFFF0 | *(_DWORD *)(v4 + 2280) & 0xF;
  *(_DWORD *)(v2 + 172) = 0;
  if (!*(unsigned char *)(v4 + 1956))
  {
    int v102 = *(_DWORD *)(v4 + 3160);
    if (!v102) {
      goto LABEL_177;
    }
    int v102 = *(_DWORD *)(v4 + 3168) << 31;
    *(_DWORD *)(v2 + 172) = v102;
    if (*(_DWORD *)(v4 + 3168))
    {
      int v103 = ((*(_DWORD *)(v4 + 3176) & 1) << 28) | v102;
      *(_DWORD *)(v2 + 172) = v103;
      int v102 = ((*(_DWORD *)(v3 + 79204) & 3) << 29) | v103;
      *(_DWORD *)(v2 + 172) = v102;
    }
    if (!*(unsigned char *)(v4 + 1956))
    {
LABEL_177:
      if (!*(unsigned char *)(v4 + 1962))
      {
        unsigned int v104 = v102 & 0xF7FFFFFF | ((*(unsigned char *)(v4 + 2216) & 1) << 27);
        *(_DWORD *)(v2 + 172) = v104;
        unsigned int v105 = v104 & 0xF8FFFFFF | ((*(_DWORD *)(v4 + 2212) & 7) << 24);
        *(_DWORD *)(v2 + 172) = v105;
        unsigned int v106 = v105 & 0xFF03FFFF | ((*(_DWORD *)(v4 + 2196) & 0x3F) << 18);
        *(_DWORD *)(v2 + 172) = v106;
        unsigned int v107 = v106 & 0xFFFC0FFF | ((*(_DWORD *)(v4 + 2200) & 0x3F) << 12);
        *(_DWORD *)(v2 + 172) = v107;
        if (*(_DWORD *)(v4 + 2196) || *(_DWORD *)(v4 + 2200)) {
          int v108 = *(_DWORD *)(v4 + 2204);
        }
        else {
          LOBYTE(v108) = 0;
        }
        unsigned int v109 = v107 & 0xFFFFF03F | ((v108 & 0x3F) << 6);
        *(_DWORD *)(v2 + 172) = v109;
        if (*(_DWORD *)(v4 + 2196) || (int v110 = *(_DWORD *)(v4 + 2200)) != 0) {
          int v110 = *(_DWORD *)(v4 + 2208);
        }
        *(_DWORD *)(v2 + 172) = v109 & 0xFFFFFFC0 | v110 & 0x3F;
        if (!*(unsigned char *)(v3 + 56)) {
          *(_DWORD *)(v2 + 172) = v107 & 0xFFFFF000;
        }
      }
    }
  }
  *(_DWORD *)(v2 + 176) = 0;
  int v88 = (*(unsigned char *)(v4 + 2226) & 0x7F) << 21;
  *(_DWORD *)(v2 + 176) = v88;
  unsigned int v89 = v88 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 2227) & 0x7F) << 14);
  *(_DWORD *)(v2 + 176) = v89;
  unsigned int v90 = v89 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 2228) & 0x7F) << 7);
  *(_DWORD *)(v2 + 176) = v90;
  *(_DWORD *)(v2 + 176) = v90 & 0xFFFFFF80 | *(unsigned char *)(v4 + 2229) & 0x7F;
  *(_DWORD *)(v2 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v91 = (*(unsigned char *)(v4 + 2230) & 0x7F) << 21;
  *(_DWORD *)(v2 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v91;
  unsigned int v92 = v91 & 0xFFE03FFF | ((*(unsigned char *)(v4 + 2231) & 0x7F) << 14);
  *(_DWORD *)(v2 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v92;
  unsigned int v93 = v92 & 0xFFFFC07F | ((*(unsigned char *)(v4 + 2232) & 0x7F) << 7);
  *(_DWORD *)(v2 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v93;
  *(_DWORD *)(v2 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v93 & 0xFFFFFF80 | *(unsigned char *)(v4 + 2233) & 0x7F;
  *(_DWORD *)(v2 + 184) = 0;
  LOBYTE(v93) = *(unsigned char *)(v4 + 2236);
  *(_DWORD *)(v2 + 184) = (v93 & 0x7F) << 7;
  *(_DWORD *)(v2 + 184) = *(unsigned char *)(v4 + 2237) & 0x7F | ((v93 & 0x7F) << 7);
  *(void *)(v2 + 188) = 0;
  uint64_t v94 = (_DWORD *)(v2 + 188);
  *(void *)(v2 + 196) = 0;
  if (*(unsigned char *)(v4 + 99) && !*(unsigned char *)(v4 + 1962) && !*(unsigned char *)(v4 + 1956))
  {
    *uint64_t v94 = 0x10000000;
    int v95 = ((*(_DWORD *)(v4 + 3180) << 26) + 0x4000000) & 0xC000000 | 0x10000000;
    *uint64_t v94 = v95;
    unsigned int v96 = v95 & 0xFCFFFFFF | ((*(_DWORD *)(v4 + 3184) & 3) << 24);
    *uint64_t v94 = v96;
    unsigned int v97 = v96 & 0xFF0FFFFF | ((*(_DWORD *)(v4 + 3192) & 0xF) << 20);
    *uint64_t v94 = v97;
    unsigned int v98 = v97 & 0xFFF3FFFF | ((*(_DWORD *)(v4 + 3256) & 3) << 18);
    *uint64_t v94 = v98;
    unsigned int v99 = v98 & 0xFFFC3FFF | ((*(_DWORD *)(v4 + 3320) & 0xF) << 14);
    *uint64_t v94 = v99;
    unsigned int v100 = v99 & 0xFFFFCFFF | ((*(_DWORD *)(v4 + 3384) & 3) << 12);
    *uint64_t v94 = v100;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v101) = 0;
    }
    else {
      int v101 = *(_DWORD *)(v4 + 3196);
    }
    unsigned int v111 = v100 & 0xFFFFF0FF | ((v101 & 0xF) << 8);
    *uint64_t v94 = v111;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v112) = 0;
    }
    else {
      int v112 = *(_DWORD *)(v4 + 3260);
    }
    unsigned int v113 = v111 & 0xFFFFFF3F | ((v112 & 3) << 6);
    *uint64_t v94 = v113;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v114) = 0;
    }
    else {
      int v114 = *(_DWORD *)(v4 + 3324);
    }
    unsigned int v115 = v113 & 0xFFFFFFC3 | (4 * (v114 & 0xF));
    *uint64_t v94 = v115;
    if (*(int *)(v4 + 3188) < 2) {
      LOBYTE(v116) = 0;
    }
    else {
      int v116 = *(_DWORD *)(v4 + 3388);
    }
    *uint64_t v94 = v115 & 0xFFFFFFFC | v116 & 3;
    if (*(int *)(v4 + 3188) <= 2) {
      LOBYTE(v117) = 0;
    }
    else {
      int v117 = *(_DWORD *)(v4 + 3200);
    }
    int v118 = (v117 & 0xF) << 20;
    *(_DWORD *)(v2 + 192) = v118;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v119) = 0;
    }
    else {
      int v119 = *(_DWORD *)(v4 + 3264);
    }
    int v120 = ((v119 & 3) << 18) | v118;
    *(_DWORD *)(v2 + 192) = v120;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v121) = 0;
    }
    else {
      int v121 = *(_DWORD *)(v4 + 3328);
    }
    int v122 = ((v121 & 0xF) << 14) | v120;
    *(_DWORD *)(v2 + 192) = v122;
    if (*(int *)(v4 + 3188) < 3) {
      LOBYTE(v123) = 0;
    }
    else {
      int v123 = *(_DWORD *)(v4 + 3392);
    }
    int v124 = ((v123 & 3) << 12) | v122;
    *(_DWORD *)(v2 + 192) = v124;
    if (*(int *)(v4 + 3188) <= 3) {
      LOBYTE(v125) = 0;
    }
    else {
      int v125 = *(_DWORD *)(v4 + 3204);
    }
    int v126 = ((v125 & 0xF) << 8) | v124;
    *(_DWORD *)(v2 + 192) = v126;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v127) = 0;
    }
    else {
      int v127 = *(_DWORD *)(v4 + 3268);
    }
    int v128 = ((v127 & 3) << 6) | v126;
    *(_DWORD *)(v2 + 192) = v128;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v129) = 0;
    }
    else {
      int v129 = *(_DWORD *)(v4 + 3332);
    }
    unsigned int v130 = (4 * (v129 & 0xF)) | v128 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 192) = v130;
    if (*(int *)(v4 + 3188) < 4) {
      LOBYTE(v131) = 0;
    }
    else {
      int v131 = *(_DWORD *)(v4 + 3396);
    }
    *(_DWORD *)(v2 + 192) = v130 & 0xFFFFFFFC | v131 & 3;
    if (*(int *)(v4 + 3188) <= 4) {
      LOBYTE(v132) = 0;
    }
    else {
      int v132 = *(_DWORD *)(v4 + 3208);
    }
    int v133 = (v132 & 0xF) << 20;
    *(_DWORD *)(v2 + 196) = v133;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v134) = 0;
    }
    else {
      int v134 = *(_DWORD *)(v4 + 3272);
    }
    int v135 = ((v134 & 3) << 18) | v133;
    *(_DWORD *)(v2 + 196) = v135;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v136) = 0;
    }
    else {
      int v136 = *(_DWORD *)(v4 + 3336);
    }
    int v137 = ((v136 & 0xF) << 14) | v135;
    *(_DWORD *)(v2 + 196) = v137;
    if (*(int *)(v4 + 3188) < 5) {
      LOBYTE(v138) = 0;
    }
    else {
      int v138 = *(_DWORD *)(v4 + 3400);
    }
    int v139 = ((v138 & 3) << 12) | v137;
    *(_DWORD *)(v2 + 196) = v139;
    if (*(int *)(v4 + 3188) <= 5) {
      LOBYTE(v14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    }
    else {
      int v140 = *(_DWORD *)(v4 + 3212);
    }
    int v141 = ((v140 & 0xF) << 8) | v139;
    *(_DWORD *)(v2 + 196) = v141;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v142) = 0;
    }
    else {
      int v142 = *(_DWORD *)(v4 + 3276);
    }
    int v143 = ((v142 & 3) << 6) | v141;
    *(_DWORD *)(v2 + 196) = v143;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v144) = 0;
    }
    else {
      int v144 = *(_DWORD *)(v4 + 3340);
    }
    unsigned int v145 = (4 * (v144 & 0xF)) | v143 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 196) = v145;
    if (*(int *)(v4 + 3188) < 6) {
      LOBYTE(v146) = 0;
    }
    else {
      int v146 = *(_DWORD *)(v4 + 3404);
    }
    *(_DWORD *)(v2 + 196) = v145 & 0xFFFFFFFC | v146 & 3;
    if (*(int *)(v4 + 3188) <= 6) {
      LOBYTE(v147) = 0;
    }
    else {
      int v147 = *(_DWORD *)(v4 + 3216);
    }
    int v148 = (v147 & 0xF) << 20;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v148;
    if (*(int *)(v4 + 3188) < 7) {
      LOBYTE(v149) = 0;
    }
    else {
      int v149 = *(_DWORD *)(v4 + 3280);
    }
    int v150 = ((v149 & 3) << 18) | v148;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v150;
    if (*(int *)(v4 + 3188) < 7) {
      int v151 = 0;
    }
    else {
      int v151 = (*(_DWORD *)(v4 + 3344) & 0xF) << 14;
    }
    int v152 = v151 | v150;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v152;
    if (*(int *)(v4 + 3188) < 7) {
      int v153 = 0;
    }
    else {
      int v153 = (*(_DWORD *)(v4 + 3408) & 3) << 12;
    }
    int v154 = v153 | v152;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v154;
    if (*(int *)(v4 + 3188) <= 7) {
      int v155 = 0;
    }
    else {
      int v155 = (*(_DWORD *)(v4 + 3220) & 0xF) << 8;
    }
    int v156 = v155 | v154;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v156;
    if (*(int *)(v4 + 3188) < 8) {
      int v157 = 0;
    }
    else {
      int v157 = (*(_DWORD *)(v4 + 3284) & 3) << 6;
    }
    int v158 = v157 | v156;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v158;
    if (*(int *)(v4 + 3188) < 8) {
      int v159 = 0;
    }
    else {
      int v159 = 4 * (*(_DWORD *)(v4 + 3348) & 0xF);
    }
    unsigned int v160 = v159 | v158 & 0xFFFFFFC3;
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v160;
    if (*(int *)(v4 + 3188) < 8) {
      int v161 = 0;
    }
    else {
      int v161 = *(_DWORD *)(v4 + 3412) & 3;
    }
    *(_DWORD *)(v2 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v161 | v160 & 0xFFFFFFFC;
  }
  if (*(unsigned char *)(v4 + 98))
  {
    int v162 = (_DWORD *)(v2 + 204);
    if (*(unsigned char *)(v4 + 2172) != 8)
    {
      *int v162 = 0x80000000;
      unsigned int v163 = ((*(unsigned __int8 *)(v4 + 2172) << 28) - 0x10000000) | 0x80000000;
      goto LABEL_143;
    }
  }
  else
  {
    int v162 = (_DWORD *)(v2 + 204);
  }
  unsigned int v163 = 0;
  *int v162 = 0;
LABEL_143:
  *(_DWORD *)(v2 + 204) = v163;
  *(_DWORD *)(v2 + 204) = (unsigned __int16)(*(_DWORD *)(v4 + 2164) - 1) | v163;
  UpscaleConvolveStep = (CAHDecCatnipAvx *)CAHDecCatnipAvx::getUpscaleConvolveStep(this, *(_DWORD *)(v4 + 2176), *(_DWORD *)(v4 + 2164));
  __int16 v165 = (__int16)UpscaleConvolveStep;
  UpscaleConvolveX0 = (CAHDecCatnipAvx *)CAHDecCatnipAvx::getUpscaleConvolveX0(UpscaleConvolveStep, *(_DWORD *)(v4 + 2176), *(_DWORD *)(v4 + 2164), (int)UpscaleConvolveStep);
  *(_DWORD *)(v2 + 208) = v165 & 0x3FFF | (((unsigned __int16)UpscaleConvolveX0 & 0x3FFF) << 14);
  unsigned int v167 = (*(_DWORD *)(v4 + 2176) + 1) >> 1;
  unsigned int v168 = (*(_DWORD *)(v4 + 2164) + 1) >> 1;
  uint64_t v169 = (CAHDecCatnipAvx *)CAHDecCatnipAvx::getUpscaleConvolveStep(UpscaleConvolveX0, v167, v168);
  *(_DWORD *)(v2 + 212) = (unsigned __int16)v169 & 0x3FFF | ((CAHDecCatnipAvx::getUpscaleConvolveX0(v169, v167, v168, (int)v169) & 0x3FFF) << 14);
  *(_DWORD *)(v2 + 216) = 0;
  int v170 = (*(_DWORD *)(v4 + 3448) & 3) << 10;
  *(_DWORD *)(v2 + 216) = v170;
  int v171 = *(unsigned __int8 *)(v3 + 56);
  if (*(unsigned char *)(v3 + 56)) {
    int v171 = (*(_DWORD *)(v4 + 3452) & 3) << 8;
  }
  int v172 = v171 | v170;
  *(_DWORD *)(v2 + 216) = v172;
  int v173 = *(unsigned __int8 *)(v3 + 56);
  if (*(unsigned char *)(v3 + 56)) {
    int v173 = (*(_DWORD *)(v4 + 3456) & 3) << 6;
  }
  int v174 = v173 | v172;
  *(_DWORD *)(v2 + 216) = v174;
  int v175 = (16 * (*(_DWORD *)(v3 + 79208) & 3)) | v174;
  *(_DWORD *)(v2 + 216) = v175;
  int v176 = (4 * (*(_DWORD *)(v3 + 79212) & 3)) | v175;
  *(_DWORD *)(v2 + 216) = v176;
  *(_DWORD *)(v2 + 216) = v176 & 0xFFC | *(_DWORD *)(v3 + 79216) & 3;
  *(_DWORD *)(v2 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  int v177 = *(_DWORD *)(v3 + 78496);
  *(_DWORD *)(v2 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v177 << 16;
  *(_DWORD *)(v2 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(unsigned __int16 *)(v3 + 78492) | ((unsigned __int16)v177 << 16);
  *(_DWORD *)(v2 + 224) = 0;
  int v178 = *(_DWORD *)(v3 + 78504);
  *(_DWORD *)(v2 + 224) = v178 << 16;
  *(_DWORD *)(v2 + 224) = *(unsigned __int16 *)(v3 + 78500) | ((unsigned __int16)v178 << 16);
  if (*(unsigned char *)(v3 + 128))
  {
    uint64_t result = 0;
    if (*(unsigned char *)(v4 + 1956))
    {
      *(_DWORD *)(v2 + 368) = (*(_DWORD *)(v2 + 48) << 18) & 0x1000000 | (((*(_DWORD *)(v2 + 48) >> 4) & 1) << 25);
      *(_DWORD *)(v2 + 40pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
      unsigned int v180 = (((*(_DWORD *)(v3 + 12) << 16) + 458752) & 0xFFF80000) - 0x10000;
      *(_DWORD *)(v2 + 40pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v180;
      *(_DWORD *)(v2 + 40pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = ((((unsigned __int16)*(_DWORD *)(v3 + 8) + 7) & 0xFFF8) + 0xFFFF) | v180;
      *(_DWORD *)(v2 + 432) = 1073758208;
    }
  }
  else
  {
    uint64_t v181 = (_DWORD *)(v2 + 228);
    uint64_t v182 = -308;
    do
    {
      uint64_t v183 = v4 + v182;
      uint64_t v184 = (unsigned char *)(v4 + v182 + 4136);
      if (*v184 == 1)
      {
        if ((*(unsigned char *)(v2 + 65) & 4) != 0) {
          char v185 = -3;
        }
        else {
          char v185 = -2;
        }
      }
      else
      {
        char v185 = -6;
      }
      char v186 = v185 + 16;
      *uint64_t v181 = 0;
      int v187 = *v184 << 30;
      *uint64_t v181 = v187;
      unsigned int v188 = v187 & 0xC0007FFF | (((*(int *)(v183 + 4096) >> v186) & 0x7FFF) << 15);
      *uint64_t v181 = v188;
      *uint64_t v181 = v188 & 0xFFFF8000 | (*(int *)(v183 + 4100) >> v186) & 0x7FFF;
      v181[7] = 0;
      int v189 = (*(unsigned char *)(v183 + 4137) == 0) << 30;
      v181[7] = v189;
      unsigned int v190 = v189 & 0xC0007FFF | (((*(_DWORD *)(v183 + 4104) >> 1) & 0x7FFF) << 15);
      v181[7] = v190;
      v181[7] = v190 & 0xFFFF8000 | ((unsigned __int16)*(_DWORD *)(v183 + 4108) >> 1);
      v181[14] = 0;
      int v191 = (*(_DWORD *)(v183 + 4112) << 14) & 0x3FFF8000;
      v181[14] = v191;
      v181[14] = v191 & 0xFFFF8000 | ((unsigned __int16)*(_DWORD *)(v183 + 4116) >> 1);
      v181[21] = 0;
      int v192 = *(unsigned __int16 *)(v183 + 4128);
      v181[21] = v192 << 16;
      v181[21] = *(unsigned __int16 *)(v183 + 4130) | ((unsigned __int16)v192 << 16);
      v181[28] = 0;
      int v193 = *(unsigned __int16 *)(v183 + 4132);
      v181[28] = v193 << 16;
      v181[28] = *(unsigned __int16 *)(v183 + 4134) | ((unsigned __int16)v193 << 16);
      ++v181;
      v182 += 44;
    }
    while (v182);
    uint64_t v194 = **(void **)(v3 + 79224);
    if (v194)
    {
      uint64_t v195 = 0;
      uint64_t v196 = (_DWORD *)(v2 + 436);
      while (1)
      {
        *(v196 - 16) = 0;
        int v197 = (*(_DWORD *)(v2 + 48) << 18) & 0x1000000 | (((*(_DWORD *)(v2 + 48) >> 4) & 1) << 25);
        *(v196 - 16) = v197;
        *(v196 - 16) = v197 | *(unsigned __int8 *)(v194 + 4);
        *(v196 - 8) = 0;
        int v198 = (*(_DWORD *)(v194 + 1768) << 16) - 0x10000;
        *(v196 - 8) = v198;
        *(v196 - 8) = v198 & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)(v194 + 1760) - 1);
        *uint64_t v196 = 0;
        int v199 = *(_DWORD *)(v3 + 12);
        int v200 = v199 >= 0 ? *(_DWORD *)(v3 + 12) : v199 + 1;
        int v201 = (((v200 >> 1) + (*(_DWORD *)(v194 + 1768) << 14)) / v199) << 16;
        *uint64_t v196 = v201;
        int v202 = *(_DWORD *)(v194 + 1760);
        int v203 = *(_DWORD *)(v3 + 8);
        int v204 = v203 >= 0 ? *(_DWORD *)(v3 + 8) : v203 + 1;
        *uint64_t v196 = v201 & 0xFFFF0000 | (unsigned __int16)(((v204 >> 1) + (v202 << 14)) / v203);
        if (v195 == 6) {
          break;
        }
        uint64_t v194 = *(void *)(*(void *)(v3 + 79224) + 8 * v195 + 8);
        ++v196;
        ++v195;
        if (!v194)
        {
          int v205 = (unint64_t)(v195 - 1) < 6;
          goto LABEL_170;
        }
      }
      int v205 = 0;
    }
    else
    {
      LODWORD(v195) = 0;
      int v205 = 1;
LABEL_170:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v206 = 136315394;
        int v207 = "virtual int CAHDecCatnipAvx::populatePictureRegisters()";
        __int16 v208 = 1024;
        int v209 = v195;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: invalid reference buffer %d\n", (uint8_t *)&v206, 0x12u);
      }
    }
    return (v205 << 31 >> 31);
  }
  return result;
}

uint64_t CAHDecCatnipAvx::populateTileRegisters(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 256);
  if (*(_DWORD *)(v3 + 2360) == 1)
  {
    uint64_t v4 = *(void *)(v3 + 15944);
    *(_WORD *)(a2 + 4) = 0;
    if (*(_DWORD *)(v3 + 2420))
    {
      int v5 = *(unsigned __int16 *)(v3 + 2504) | (*(unsigned __int16 *)(a2 + 10) << 16);
      *(_DWORD *)(a2 + 8) = v5;
      unsigned int v6 = v5 & 0xFFFEFFFF | ((HIWORD(*(_DWORD *)(v3 + 2504)) & 1) << 16);
    }
    else
    {
      uint64_t v7 = v4 + 136;
      int v8 = *(_DWORD *)(a2 + 8) & 0x3FFFFF | (*(unsigned __int16 *)(v4 + 136 + 2 * a3 + 66064) << 22);
      *(_DWORD *)(a2 + 8) = v8;
      int v9 = *(unsigned __int8 *)(v7 + a3 + 74256);
      if (v9) {
        int v9 = *(unsigned __int8 *)(v3 + 2504);
      }
      unsigned int v10 = v9 | v8 & 0xFFFFFF00;
      *(_DWORD *)(a2 + 8) = v10;
      unsigned int v6 = v10 & 0xFFFF00FF | (*(unsigned __int8 *)(v3 + 2505) << 8);
    }
    *(_DWORD *)(a2 + 8) = v6;
  }
  return 0;
}

uint64_t CAHDecCatnipAvx::getTileStartCTU(CAHDecCatnipAvx *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 1004);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 67] * a3;
}

uint64_t CAHDecCatnipAvx::getTileEndCTU(CAHDecCatnipAvx *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 1004);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 68] - 1) * a3 - 1;
}

uint64_t CAHDecCatnipAvx::populateAvdWork(CAHDecCatnipAvx *this)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 33);
  uint64_t v3 = v1 + 42424;
  uint64_t v4 = *(uint64_t **)(v1 + 15944);
  unsigned int v6 = *((_DWORD *)v4 + 34);
  LODWORD(v5) = *((_DWORD *)v4 + 35);
  if (*(_DWORD *)(*(void *)(v1 + 42424) + 60) == 15) {
    char v7 = 5;
  }
  else {
    char v7 = 4;
  }
  char v45 = v7;
  if (v6)
  {
    unint64_t v8 = 0;
    LODWORD(v9) = 0;
    int v10 = 0;
    int v11 = 0;
    uint64_t v12 = v2 + 50584;
    int v40 = (v5 * v6 > 1) & (*(unsigned __int8 *)(v3 + 296) >> 1);
    uint64_t v46 = *v4;
    uint64_t v13 = -50548 - v2;
    int v14 = (int *)(v4 + 8243);
    int v15 = -(v5 * v6);
    int v16 = v4 + 8210;
    uint64_t v41 = v4;
    unsigned int v36 = (int *)(v4 + 8243);
    uint64_t v37 = -50548 - v2;
    int v35 = v15;
    unsigned int v34 = v4 + 8210;
    do
    {
      if (v5)
      {
        unint64_t v17 = 0;
        uint64_t v18 = v13 + v12;
        int v48 = v15 + v10;
        unint64_t v39 = v8 + 1;
        uint64_t v42 = (_DWORD *)v16 + v8 + 1;
        uint64_t v43 = (_DWORD *)v16 + v8;
        int v38 = v10;
        int v47 = v10;
        int v44 = v11;
        do
        {
          uint64_t v19 = v12;
          int v20 = v48 + v17;
          *(_WORD *)(v12 + 4) = v11 + v17;
          *(_WORD *)(v12 + 6) = 0;
          *(_WORD *)(v12 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v47 + v17;
          if (v47 + v17) {
            __int16 v21 = 4;
          }
          else {
            __int16 v21 = 5;
          }
          *(_WORD *)(v12 + 12) = v21;
          if (v20 == -1)
          {
            *(_DWORD *)(v12 + 14) = 262149;
          }
          else
          {
            BOOL v22 = v20 == -2;
            int v23 = v40;
            if (!v22) {
              int v23 = 0;
            }
            *(_WORD *)(v12 + 14) = 4;
            if (v23 == 1) {
              *(_WORD *)(v12 + 16) = 4;
            }
            else {
              *(_WORD *)(v12 + 16) = 0;
            }
          }
          uint64_t v24 = v4[(v47 + v17) + 18];
          uint64_t v25 = *((void *)this + 32);
          if (*(unsigned char *)(v25 + 2834)) {
            uint64_t v26 = *(void *)(v25 + 2840);
          }
          else {
            uint64_t v26 = *(void *)(v25 + 1048) + 8;
          }
          unint64_t v27 = v46 + v24 - *(void *)v26;
          int v28 = 36 * v9;
          unint64_t v29 = HIDWORD(v27);
          if (*(void *)v26 || *(_DWORD *)(v26 + 152) || *(_DWORD *)(v26 + 156))
          {
            if (v29 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              unsigned int v51 = "populateAvdWork";
              __int16 v52 = 1024;
              int v53 = 1629;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v26, v28 + 50604, v27, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
            if (*(void *)v26) {
              goto LABEL_48;
            }
          }
          if (*(_DWORD *)(v26 + 152) || *(_DWORD *)(v26 + 156))
          {
LABEL_48:
            if (v29 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              unsigned int v51 = "populateAvdWork";
              __int16 v52 = 1024;
              int v53 = 1630;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v26, v28 + 50602, v27, 0x3FFFFFFFFFFLL, 32, -1, 2);
            if (result) {
              return result;
            }
          }
          uint64_t v4 = v41;
          unsigned int v31 = &v41[(v47 + v17) + 4114];
          uint64_t v32 = *v31;
          if (HIDWORD(*v31))
          {
            int v11 = v44;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              unsigned int v51 = "populateAvdWork";
              __int16 v52 = 1024;
              int v53 = 1632;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
              uint64_t v32 = *v31;
            }
          }
          else
          {
            int v11 = v44;
          }
          *(_DWORD *)(v12 + 24) = v32;
          *(_DWORD *)(v12 + 28) = (*(v14 - 1) >> v45) | (*v43 >> v45 << 16);
          ++v17;
          int v33 = *v14++;
          *(_DWORD *)(v12 + 32) = ((v33 - 1) >> v45) | ((*v42 - 1) >> v45 << 16);
          v12 += 36;
          *(_WORD *)(v19 + 8) = 0;
          unint64_t v9 = 0x8E38E38E38E38E39 * (v18 >> 2);
          unint64_t v5 = *((unsigned int *)v41 + 35);
          v18 += 36;
        }
        while (v17 < v5);
        unsigned int v6 = *((_DWORD *)v41 + 34);
        int v10 = v38 + v17;
        v11 += v17;
        unint64_t v8 = v39;
        int v14 = v36;
        uint64_t v13 = v37;
        int v15 = v35;
        int v16 = v34;
      }
      else
      {
        ++v8;
      }
    }
    while (v8 < v6);
    uint64_t v2 = *((void *)this + 33);
  }
  else
  {
    LOWORD(v11) = 0;
  }
  uint64_t result = 0;
  *(_WORD *)(v2 + 26) = v11;
  *(_DWORD *)(v2 + 32) = 50584;
  return result;
}

uint64_t CAHDecCatnipAvx::allocWorkBuf_SPS(CAHDecCatnipAvx *this, int *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  int v4 = a2[1];
  unsigned int v6 = *((unsigned __int8 *)a2 + 32);
  if (v6 >= 4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 136315394;
    unsigned int v49 = "allocWorkBuf_SPS";
    __int16 v50 = 1024;
    int v51 = 1779;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", (uint8_t *)&v48, 0x12u);
  }
  char v7 = (_DWORD *)*((void *)this + 32);
  int v8 = v7[10681];
  if (!v8 || (int v9 = v7[10682]) == 0)
  {
    int v8 = v5;
    int v9 = v4;
  }
  int v10 = v8 + 31;
  if (v8 < -31) {
    int v10 = v8 + 62;
  }
  unsigned int v11 = v10 >> 5;
  int v12 = v9 + 31;
  if (v9 < -31) {
    int v12 = v9 + 62;
  }
  unsigned int v13 = v12 >> 5;
  unsigned int v14 = 32 - __clz(v11 - 1);
  if (v11 >= 2) {
    char v15 = v14;
  }
  else {
    char v15 = 0;
  }
  unsigned int v16 = 32 - __clz(v13 - 1);
  if (v13 >= 2) {
    char v17 = v16;
  }
  else {
    char v17 = 0;
  }
  unsigned int v18 = ((32 << (v17 + v15)) + 127) & 0xFFFFFF80;
  if (!v6)
  {
    unsigned int v27 = 0;
LABEL_27:
    LOBYTE(v28) = 0;
    goto LABEL_28;
  }
  int v19 = v8 << (v6 == 3);
  int v20 = v19 + 31;
  int v21 = v19 + 62;
  if (v20 >= 0) {
    int v21 = v20;
  }
  unsigned int v22 = v21 >> 5;
  if (v6 == 1) {
    ++v9;
  }
  int v23 = v9 >> (v6 == 1);
  int v25 = v23 + 15;
  BOOL v24 = v23 < -15;
  int v26 = v23 + 30;
  if (!v24) {
    int v26 = v25;
  }
  unsigned int v27 = v26 >> 4;
  if (v22 <= 1) {
    goto LABEL_27;
  }
  unsigned int v28 = 32 - __clz(v22 - 1);
LABEL_28:
  unsigned int v29 = 32 - __clz(v27 - 1);
  if (v27 >= 2) {
    char v30 = v29;
  }
  else {
    char v30 = 0;
  }
  unsigned int v31 = ((8 << (v30 + v28)) + 127) & 0xFFFFFF80;
  if (!v6) {
    unsigned int v31 = 0;
  }
  *((_DWORD *)this + 104pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v18;
  *((_DWORD *)this + 1041) = v31;
  *((_DWORD *)this + 1045) = 9168;
  if (*((_WORD *)a2 + 14) == 64) {
    char v32 = 6;
  }
  else {
    char v32 = 7;
  }
  if (*((_WORD *)a2 + 14) == 64) {
    int v33 = 96;
  }
  else {
    int v33 = 384;
  }
  if (*((_WORD *)a2 + 14) == 64) {
    char v34 = 8;
  }
  else {
    char v34 = 10;
  }
  unsigned int v35 = ((v5 + (1 << v32) - 1) >> v32) * ((v4 + (1 << v32) - 1) >> v32);
  *((_DWORD *)this + 1047) = v35 * v33;
  *((_DWORD *)this + 1046) = v35 << v34;
  if (v7[662])
  {
LABEL_51:
    for (uint64_t i = 0; i != 2288; i += 176)
    {
      uint64_t v42 = *((unsigned int *)this + 1047);
      if (v42
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + i + 13424), v42, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_69;
        }
        int v48 = 136315650;
        unsigned int v49 = "allocWorkBuf_SPS";
        __int16 v50 = 1024;
        int v51 = 1879;
        __int16 v52 = 2080;
        int v53 = "segMap";
        uint64_t v46 = &_os_log_internal;
        goto LABEL_68;
      }
    }
    uint64_t v43 = 0;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 1046);
      if (v44)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v43 + 8008), v44, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 2288) {
        return 0;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v48 = 136315650;
      unsigned int v49 = "allocWorkBuf_SPS";
      __int16 v50 = 1024;
      int v51 = 1885;
      __int16 v52 = 2080;
      int v53 = "MvColo";
      uint64_t v46 = &_os_log_internal;
      goto LABEL_68;
    }
    goto LABEL_69;
  }
  uint64_t v36 = 0;
  while (1)
  {
    uint64_t v37 = *((unsigned int *)this + 1040);
    if (v37
      && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)(*((void *)this + 32) + v36 + 3072), v37, 7, 1, 0))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_69;
      }
      int v48 = 136315650;
      unsigned int v49 = "allocWorkBuf_SPS";
      __int16 v50 = 1024;
      int v51 = 1821;
      __int16 v52 = 2080;
      int v53 = "HdrY";
      uint64_t v46 = &_os_log_internal;
      goto LABEL_68;
    }
    uint64_t v38 = *((unsigned int *)this + 1041);
    uint64_t v39 = *((void *)this + 32);
    int v40 = (_OWORD *)(v39 + v36 + 5536);
    if (!v38)
    {
      *(void *)int v40 = 0;
      goto LABEL_50;
    }
    if (CAVDDecoder::allocAVDMem(v39, v40, v38, 7, 1, 0)) {
      break;
    }
LABEL_50:
    v36 += 176;
    if (v36 == 2464) {
      goto LABEL_51;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v48 = 136315650;
    unsigned int v49 = "allocWorkBuf_SPS";
    __int16 v50 = 1024;
    int v51 = 1826;
    __int16 v52 = 2080;
    int v53 = "HdrC";
    uint64_t v46 = &_os_log_internal;
LABEL_68:
    _os_log_impl(&dword_223977000, v46, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v48, 0x1Cu);
  }
LABEL_69:
  (*(void (**)(CAHDecCatnipAvx *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

void CAHDecCatnipAvx::getPPSWorkBufSize(uint64_t this, unsigned __int8 *a2, char *a3)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  unsigned int v97 = (CAHDecTansyAvx *)this;
  uint64_t v4 = *(void *)(*(void *)(this + 256) + 42424);
  unsigned int v108 = *(_DWORD *)(v4 + 2176);
  int v5 = *(_DWORD *)(v4 + 2180);
  int v6 = a2[32];
  unsigned int v7 = a2[34];
  int v8 = *(_DWORD *)(v4 + 60);
  int v98 = v8 == 15;
  if (v8 == 15) {
    int v9 = 128;
  }
  else {
    int v9 = 64;
  }
  if (a2[33] > v7) {
    unsigned int v7 = a2[33];
  }
  int v10 = ((_WORD)v7 + 9) & 0x1FE;
  unsigned int v90 = v7;
  if (*(_DWORD *)(v4 + 13932))
  {
    unsigned int v11 = *(_DWORD *)(v4 + 13932);
    if (v8 == 15) {
      int v12 = 800;
    }
    else {
      int v12 = 400;
    }
    goto LABEL_10;
  }
  this = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (this)
  {
    *(_DWORD *)buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 1916;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
    if (v8 == 15) {
      int v12 = 800;
    }
    else {
      int v12 = 400;
    }
    unsigned int v11 = *(_DWORD *)(v4 + 13932);
    if (v11)
    {
LABEL_10:
      int v13 = 0;
      uint64_t v14 = v11;
      int v15 = *(_DWORD *)(v4 + 2624);
      unsigned int v16 = (int *)(v4 + 2628);
      do
      {
        int v18 = *v16++;
        int v17 = v18;
        int v19 = (v18 - v15) * v12;
        if (v13 <= v19) {
          int v13 = v19;
        }
        int v15 = v17;
        --v14;
      }
      while (v14);
      char v20 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  int v13 = 0;
  char v20 = 1;
LABEL_23:
  int v88 = v13;
  int v112 = v5;
  unsigned int v89 = a3;
  if (v6 == 3) {
    int v21 = 48;
  }
  else {
    int v21 = 32;
  }
  int v107 = v6;
  if (!v6) {
    int v21 = 16;
  }
  int v22 = *(unsigned __int8 *)(v4 + 2172);
  unsigned int v100 = (_DWORD *)v4;
  if (*(unsigned char *)(v4 + 98)) {
    BOOL v23 = v22 == 8;
  }
  else {
    BOOL v23 = 1;
  }
  int v24 = !v23;
  int v99 = v9;
  int v106 = v10;
  int v85 = v8;
  int v96 = v24;
  if (v20)
  {
    unint64_t v104 = 0;
    int v105 = 0;
    unint64_t v25 = 0;
    *(void *)&long long v103 = 0;
    char v26 = v8 == 15;
  }
  else
  {
    uint64_t v27 = 0;
    int v28 = 0;
    unint64_t v25 = 0;
    int v105 = 0;
    unint64_t v104 = 0;
    unsigned int v93 = (v10 * v21) >> 3;
    int v94 = *(unsigned __int8 *)(v4 + 2172);
    if (v8 == 15) {
      char v29 = 7;
    }
    else {
      char v29 = 6;
    }
    char v101 = v29;
    unsigned int v30 = (v22 << v29) >> 3;
    if (!v24) {
      unsigned int v30 = v9;
    }
    unsigned int v92 = v30;
    long long v103 = 0u;
    char v26 = v8 == 15;
    do
    {
      uint64_t v31 = v11 - 1;
      if (v27 == v31) {
        int v32 = v108 - v28;
      }
      else {
        int v32 = (v100[v27 + 657] - v100[v27 + 656]) << v101;
      }
      if (v32 > 4096)
      {
        this = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          *(_DWORD *)buf = 136315394;
          int v114 = "getPPSWorkBufSize";
          __int16 v115 = 1024;
          int v116 = 1950;
          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ASSERT @ %s() :: Line %d Assert Broken \n", buf, 0x12u);
          unsigned int v11 = v100[3483];
          uint64_t v31 = v11 - 1;
        }
      }
      if (v32 >= -15) {
        int v33 = v32 + 15;
      }
      else {
        int v33 = v32 + 30;
      }
      unint64_t v34 = v104;
      if (v104 <= (int)((v33 >> 4) * v93)) {
        unint64_t v34 = (int)((v33 >> 4) * v93);
      }
      unint64_t v104 = v34;
      unint64_t v35 = v27 + 1;
      uint64_t v36 = &v100[v27];
      int v37 = v36[657];
      int v38 = v36[656];
      unsigned int v39 = *(_DWORD *)(*(void *)(*((void *)v97 + 32) + 42424) + 2164);
      if (v39 <= v108) {
        unsigned int v39 = v108;
      }
      int v40 = v38 << v101;
      if (v96) {
        int v40 = ((v38 << v101) * v94) >> 3;
      }
      int v41 = v40 + v92 + v92 * (v37 - v38);
      if ((int)v39 < v41) {
        int v41 = v39;
      }
      *((void *)&v42 + 1) = *((void *)&v103 + 1);
      *(int32x2_t *)&long long v42 = vadd_s32((int32x2_t)(*(void *)&vmla_s32((int32x2_t)0x7F0000007FLL, (int32x2_t)__PAIR64__(((v41 + 63) >> 6) - (v40 >> 6), (v37 - v38) << v98), (int32x2_t)0xC0000002CLL) & 0xFFFFFF80FFFFFF80), *(int32x2_t *)&v103);
      long long v103 = v42;
      this = CAHDecTansyAvx::calc_lf_above_pix_tile_size((CAHDecTansyAvx *)this, v10, v107, v108, v98, v27 == 0, v27 == v31, v38, v37);
      v105 += this;
      v28 += v32;
      if (v25 <= 20 * (v33 >> 4)) {
        unint64_t v25 = 20 * (v33 >> 4);
      }
      ++v27;
    }
    while (v35 < v11);
  }
  uint64_t v43 = v100;
  uint64_t v44 = v100[3482];
  unsigned int v45 = v90;
  if (!v44)
  {
    int v102 = 0;
    unsigned int v71 = 0;
    unint64_t v87 = 0;
    unint64_t v111 = 0;
    unsigned int v72 = v97;
    goto LABEL_80;
  }
  unsigned int v86 = &v100[v44 + 721];
  int v46 = *v86;
  int v47 = v100[721];
  long long v48 = 0uLL;
  unsigned int v49 = v100 + 722;
  uint64_t v91 = v100[3482];
  do
  {
    long long v109 = v48;
    int v51 = *v49++;
    int v50 = v51;
    this = CAHDecTansyAvx::calc_lf_left_tile_size((CAHDecTansyAvx *)this, 11, 7, v106, v107, v99, v47, v51, v112, v46);
    *((void *)&v48 + 1) = *((void *)&v109 + 1);
    int v52 = ((v112 + 63) >> 6) - (v47 << v26);
    int v53 = (v51 - v47) << v26;
    if (v51 != v46) {
      int v52 = v53;
    }
    *(int32x2_t *)&long long v48 = vmax_s32(*(int32x2_t *)&v109, (int32x2_t)__PAIR64__(72 * v52, this));
    int v47 = v50;
    --v44;
  }
  while (v44);
  int v102 = 0;
  unint64_t v87 = *(void *)&vadd_s32(*(int32x2_t *)&v48, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80;
  int v54 = *v86;
  int v95 = (v112 + 7) >> 6;
  unsigned int v55 = v100[721];
  long long v56 = 0uLL;
  int v57 = v100 + 722;
  uint64_t v58 = v91;
  do
  {
    long long v110 = v56;
    int v60 = *v57++;
    unsigned int v59 = v60;
    int v61 = (CAHDecTansyAvx *)CAHDecTansyAvx::calc_lr_left_tile_size((CAHDecTansyAvx *)this, 13, 12, v106, v107, v99, v55, v60, v112, v54);
    unsigned int v62 = v61;
    this = CAHDecTansyAvx::calc_lr_left_tile_size(v61, 6, 6, v106, v107, v99, v55, v60, v112, v54);
    if (v60 == v54)
    {
      long long v56 = v110;
      if (v102 > (int)(24 * (v95 - (v55 << v98)) + 24)) {
        goto LABEL_73;
      }
      int v63 = 3 * (v95 + 1 - (v55 << v98));
    }
    else
    {
      int v63 = 3 * ((v59 - v55) << v98);
      long long v56 = v110;
      if (v102 > (int)(24 * ((v59 - v55) << v98))) {
        goto LABEL_73;
      }
    }
    int v102 = 8 * v63;
LABEL_73:
    *(int32x2_t *)&long long v56 = vmax_s32(*(int32x2_t *)&v56, (int32x2_t)__PAIR64__(this, v62));
    unsigned int v55 = v59;
    --v58;
  }
  while (v58);
  int v64 = 0;
  unint64_t v111 = *(void *)&vadd_s32(*(int32x2_t *)&v56, (int32x2_t)0x7F0000007FLL) & 0xFFFFFF80FFFFFF80;
  int v65 = *v86;
  int v66 = v100[721];
  unsigned int v67 = v100 + 722;
  uint64_t v68 = v91;
  do
  {
    int v70 = *v67++;
    int v69 = v70;
    this = CAHDecTansyAvx::calc_az_left_tile_size((CAHDecTansyAvx *)this, v107, v99, v96, v106, v66, v70, v112, v65);
    if (v64 <= (int)this) {
      int v64 = this;
    }
    int v66 = v69;
    --v68;
  }
  while (v68);
  unsigned int v71 = (v64 + 127) & 0xFFFFFF80;
  unsigned int v72 = v97;
  unsigned int v45 = v90;
  uint64_t v44 = v91;
  uint64_t v43 = v100;
LABEL_80:
  BOOL v73 = *(_DWORD *)(*((void *)v72 + 32) + 2644) != 1 || v45 == 0;
  if (v73
    || (v107 != 1 ? (int v74 = 32) : (int v74 = 24),
        v107 ? (int v75 = v74) : (int v75 = 16),
        !CAHDecTansyAvx::isLfPadDis(v72) ? (int v76 = 8) : (int v76 = 0),
        !v44))
  {
    signed int v77 = 0;
    unint64_t v82 = v25;
  }
  else
  {
    signed int v77 = 0;
    unsigned int v78 = (v112 + v76 + 15) >> 4;
    uint64_t v79 = (v44 - 1);
    if (v85 == 15) {
      char v80 = 3;
    }
    else {
      char v80 = 2;
    }
    unsigned int v81 = v43 + 722;
    unint64_t v82 = v25;
    do
    {
      unsigned int v83 = v78;
      if (v79) {
        unsigned int v83 = *v81 << v80;
      }
      signed int v84 = ((v83 - (*(v81 - 1) << v80)) * v75 + 133) & 0xFFFFFF80;
      if (v77 <= v84) {
        signed int v77 = v84;
      }
      ++v81;
      --v79;
      --v44;
    }
    while (v44);
  }
  *(_DWORD *)unsigned int v89 = v88;
  if (HIDWORD(v104) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 2040;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  *((_DWORD *)v89 + 1) = v104;
  *((_DWORD *)v89 + 2) = v105;
  *(void *)(v89 + 12) = v103;
  if (HIDWORD(v82) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v114 = "getPPSWorkBufSize";
    __int16 v115 = 1024;
    int v116 = 2044;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
  }
  *((_DWORD *)v89 + 5) = v82;
  *((void *)v89 + 3) = v87;
  *((void *)v89 + 4) = v111;
  *((_DWORD *)v89 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (v102 + 127) & 0xFFFFFF80;
  *((_DWORD *)v89 + 11) = v71;
  *((_DWORD *)v89 + 12) = v77;
}

BOOL CAHDecCatnipAvx::ppsWorkBufSizeIncrease(CAHDecCatnipAvx *this, _DWORD *a2, _DWORD *a3)
{
  return *a3 > *a2
      || a3[1] > a2[1]
      || a3[2] > a2[2]
      || a3[3] > a2[3]
      || a3[4] > a2[4]
      || a3[5] > a2[5]
      || a3[6] > a2[6]
      || a3[7] > a2[7]
      || a3[8] > a2[8]
      || a3[9] > a2[9]
      || a3[10] > a2[10]
      || a3[11] > a2[11]
      || a3[12] > a2[12];
}

uint64_t CAHDecCatnipAvx::allocWorkBuf_PPS(CAHDecCatnipAvx *this, void *a2, void *a3, int *a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a4;
  uint64_t v7 = *((void *)this + 32);
  int v8 = *(_DWORD **)(v7 + 15944);
  if ((int)v6 > v8[19809])
  {
    if (v6)
    {
      if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 106, v6, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v36 = 136315650;
          int v37 = "allocWorkBuf_PPS";
          __int16 v38 = 1024;
          int v39 = 2099;
          __int16 v40 = 2080;
          int v41 = "OvpAboveInfo";
          int v9 = &_os_log_internal;
LABEL_102:
          _os_log_impl(&dword_223977000, v9, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v36, 0x1Cu);
          goto LABEL_103;
        }
        goto LABEL_103;
      }
      int v10 = *a4;
      uint64_t v7 = *((void *)this + 32);
      int v8 = *(_DWORD **)(v7 + 15944);
    }
    else
    {
      int v10 = 0;
    }
    v8[19809] = v10;
  }
  uint64_t v11 = a4[1];
  if ((int)v11 <= v8[19810])
  {
LABEL_17:
    uint64_t v13 = a4[2];
    if ((int)v13 > v8[19811])
    {
      if (v13)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 128, v13, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2114;
            __int16 v40 = 2080;
            int v41 = "LfAbovePixel";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v14 = a4[2];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v14 = 0;
      }
      v8[19811] = v14;
    }
    uint64_t v15 = a4[3];
    if ((int)v15 > v8[19812])
    {
      if (v15)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 139, v15, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2121;
            __int16 v40 = 2080;
            int v41 = "LfAboveInfo";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v16 = a4[3];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v16 = 0;
      }
      v8[19812] = v16;
    }
    uint64_t v17 = a4[4];
    if ((int)v17 > v8[19813])
    {
      if (v17)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 183, v17, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2128;
            __int16 v40 = 2080;
            int v41 = "RfAboveInfo";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v18 = a4[4];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v18 = 0;
      }
      v8[19813] = v18;
    }
    uint64_t v19 = a4[5];
    if ((int)v19 > v8[19814])
    {
      if (v19)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 249, v19, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2135;
            __int16 v40 = 2080;
            int v41 = "MvAboveInfo";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v20 = a4[5];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v20 = 0;
      }
      v8[19814] = v20;
    }
    uint64_t v21 = a4[6];
    if ((int)v21 > v8[19815])
    {
      if (v21)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 150, v21, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2142;
            __int16 v40 = 2080;
            int v41 = "LfLeftPixel";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v22 = a4[6];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v22 = 0;
      }
      v8[19815] = v22;
    }
    uint64_t v23 = a4[7];
    if ((int)v23 > v8[19816])
    {
      if (v23)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 161, v23, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2149;
            __int16 v40 = 2080;
            int v41 = "LfLeftInfo";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v24 = a4[7];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v24 = 0;
      }
      v8[19816] = v24;
    }
    uint64_t v25 = a4[8];
    if ((int)v25 > v8[19817])
    {
      if (v25)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 172, v25, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2156;
            __int16 v40 = 2080;
            int v41 = "SrLeftPixel";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v26 = a4[8];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v26 = 0;
      }
      v8[19817] = v26;
    }
    uint64_t v27 = a4[9];
    if ((int)v27 > v8[19818])
    {
      if (v27)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 194, v27, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2163;
            __int16 v40 = 2080;
            int v41 = "RfLeftPixel";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v28 = a4[9];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v28 = 0;
      }
      v8[19818] = v28;
    }
    uint64_t v29 = a4[10];
    if ((int)v29 > v8[19819])
    {
      if (v29)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 205, v29, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2170;
            __int16 v40 = 2080;
            int v41 = "RfLeftInfo";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v30 = a4[10];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v30 = 0;
      }
      v8[19819] = v30;
    }
    uint64_t v31 = a4[11];
    if ((int)v31 > v8[19820])
    {
      if (v31)
      {
        if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 238, v31, 7, 1, 0))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = 136315650;
            int v37 = "allocWorkBuf_PPS";
            __int16 v38 = 1024;
            int v39 = 2177;
            __int16 v40 = 2080;
            int v41 = "AzLeftPixel";
            int v9 = &_os_log_internal;
            goto LABEL_102;
          }
          goto LABEL_103;
        }
        int v32 = a4[11];
        uint64_t v7 = *((void *)this + 32);
        int v8 = *(_DWORD **)(v7 + 15944);
      }
      else
      {
        int v32 = 0;
      }
      v8[19820] = v32;
    }
    uint64_t v33 = a4[12];
    if ((int)v33 <= v8[19821]) {
      return 0;
    }
    if (v33)
    {
      if (CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 227, v33, 7, 1, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v36 = 136315650;
          int v37 = "allocWorkBuf_PPS";
          __int16 v38 = 1024;
          int v39 = 2184;
          __int16 v40 = 2080;
          int v41 = "SWrLeftPixel";
          int v9 = &_os_log_internal;
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      int v35 = a4[12];
      int v8 = *(_DWORD **)(*((void *)this + 32) + 15944);
    }
    else
    {
      int v35 = 0;
    }
    uint64_t result = 0;
    v8[19821] = v35;
    return result;
  }
  if (!v11)
  {
    int v12 = 0;
LABEL_16:
    v8[19810] = v12;
    goto LABEL_17;
  }
  if (!CAVDDecoder::allocAVDMem(v7, (_OWORD *)this + 117, v11, 7, 1, 0))
  {
    int v12 = a4[1];
    uint64_t v7 = *((void *)this + 32);
    int v8 = *(_DWORD **)(v7 + 15944);
    goto LABEL_16;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v36 = 136315650;
    int v37 = "allocWorkBuf_PPS";
    __int16 v38 = 1024;
    int v39 = 2107;
    __int16 v40 = 2080;
    int v41 = "IPAbovePixel";
    int v9 = &_os_log_internal;
    goto LABEL_102;
  }
LABEL_103:
  (*(void (**)(CAHDecCatnipAvx *, int *))(*(void *)this + 152))(this, a4);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecCatnipAvx::freeWorkBuf_SPS(CAHDecCatnipAvx *this)
{
  if (!*(_DWORD *)(*((void *)this + 32) + 2648))
  {
    for (uint64_t i = 0; i != 2464; i += 176)
    {
      uint64_t v3 = *((void *)this + 32);
      if (*(void *)(v3 + i + 3072))
      {
        CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 3072));
        uint64_t v4 = (_OWORD *)(*((void *)this + 32) + i);
        v4[192] = 0u;
        v4[193] = 0u;
        v4[194] = 0u;
        v4[195] = 0u;
        v4[196] = 0u;
        v4[197] = 0u;
        v4[198] = 0u;
        v4[199] = 0u;
        v4[200] = 0u;
        v4[201] = 0u;
        v4[202] = 0u;
        uint64_t v3 = *((void *)this + 32);
      }
      if (*(void *)(v3 + i + 5536))
      {
        CAVDDecoder::deallocAVDMem(v3, (uint64_t *)(v3 + i + 5536));
        int v5 = (_OWORD *)(*((void *)this + 32) + i);
        v5[346] = 0u;
        v5[347] = 0u;
        v5[348] = 0u;
        v5[349] = 0u;
        v5[350] = 0u;
        v5[351] = 0u;
        v5[352] = 0u;
        v5[353] = 0u;
        v5[354] = 0u;
        v5[355] = 0u;
        v5[356] = 0u;
      }
    }
  }
  for (uint64_t j = 0; j != 2288; j += 176)
  {
    uint64_t v7 = *((void *)this + 32);
    if (*(void *)(v7 + j + 8008))
    {
      CAVDDecoder::deallocAVDMem(v7, (uint64_t *)(v7 + j + 8008));
      int v8 = (_OWORD *)(*((void *)this + 32) + j + 8008);
      *int v8 = 0u;
      v8[1] = 0u;
      unsigned int v8[2] = 0u;
      v8[3] = 0u;
      unsigned char v8[4] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      v8[10] = 0u;
    }
  }
  for (uint64_t k = 0; k != 2288; k += 176)
  {
    uint64_t result = *((void *)this + 32);
    if (*(void *)(result + k + 13424))
    {
      uint64_t result = CAVDDecoder::deallocAVDMem(result, (uint64_t *)(result + k + 13424));
      uint64_t v11 = (_OWORD *)(*((void *)this + 32) + k);
      v11[839] = 0u;
      v11[840] = 0u;
      v11[841] = 0u;
      v11[842] = 0u;
      v11[843] = 0u;
      v11[844] = 0u;
      v11[845] = 0u;
      v11[846] = 0u;
      v11[847] = 0u;
      v11[848] = 0u;
      v11[849] = 0u;
    }
  }
  return result;
}

double CAHDecCatnipAvx::freeWorkBuf_PPS(CAHDecCatnipAvx *this, _DWORD *a2)
{
  if (!a2 || (uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944), *a2 > v4[19809]))
  {
    if (*((void *)this + 212))
    {
      int v5 = (_OWORD *)((char *)this + 1696);
      CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 212);
      double result = 0.0;
      *int v5 = 0u;
      *((_OWORD *)this + 107) = 0u;
      *((_OWORD *)this + 108) = 0u;
      *((_OWORD *)this + 109) = 0u;
      *((_OWORD *)this + 11pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
      *((_OWORD *)this + 111) = 0u;
      *((_OWORD *)this + 112) = 0u;
      *((_OWORD *)this + 113) = 0u;
      *((_OWORD *)this + 114) = 0u;
      *((_OWORD *)this + 115) = 0u;
      *((_OWORD *)this + 116) = 0u;
    }
    if (!a2) {
      goto LABEL_8;
    }
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
  }
  if (a2[1] <= v4[19810]) {
    goto LABEL_12;
  }
LABEL_8:
  if (*((void *)this + 234))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 234);
    double result = 0.0;
    *((_OWORD *)this + 117) = 0u;
    *((_OWORD *)this + 118) = 0u;
    *((_OWORD *)this + 119) = 0u;
    *((_OWORD *)this + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 121) = 0u;
    *((_OWORD *)this + 122) = 0u;
    *((_OWORD *)this + 123) = 0u;
    *((_OWORD *)this + 124) = 0u;
    *((_OWORD *)this + 125) = 0u;
    *((_OWORD *)this + 126) = 0u;
    *((_OWORD *)this + 127) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_12:
    if (a2[2] <= v4[19811]) {
      goto LABEL_17;
    }
  }
  if (*((void *)this + 256))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 256);
    double result = 0.0;
    *((_OWORD *)this + 128) = 0u;
    *((_OWORD *)this + 129) = 0u;
    *((_OWORD *)this + 13pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 131) = 0u;
    *((_OWORD *)this + 132) = 0u;
    *((_OWORD *)this + 133) = 0u;
    *((_OWORD *)this + 134) = 0u;
    *((_OWORD *)this + 135) = 0u;
    *((_OWORD *)this + 136) = 0u;
    *((_OWORD *)this + 137) = 0u;
    *((_OWORD *)this + 138) = 0u;
  }
  if (!a2) {
    goto LABEL_18;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_17:
  if (a2[3] <= v4[19812]) {
    goto LABEL_22;
  }
LABEL_18:
  if (*((void *)this + 278))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 278);
    double result = 0.0;
    *((_OWORD *)this + 139) = 0u;
    *((_OWORD *)this + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 141) = 0u;
    *((_OWORD *)this + 142) = 0u;
    *((_OWORD *)this + 143) = 0u;
    *((_OWORD *)this + 144) = 0u;
    *((_OWORD *)this + 145) = 0u;
    *((_OWORD *)this + 146) = 0u;
    *((_OWORD *)this + 147) = 0u;
    *((_OWORD *)this + 148) = 0u;
    *((_OWORD *)this + 149) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_22:
    if (a2[4] <= v4[19813]) {
      goto LABEL_27;
    }
  }
  if (*((void *)this + 366))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 366);
    double result = 0.0;
    *((_OWORD *)this + 183) = 0u;
    *((_OWORD *)this + 184) = 0u;
    *((_OWORD *)this + 185) = 0u;
    *((_OWORD *)this + 186) = 0u;
    *((_OWORD *)this + 187) = 0u;
    *((_OWORD *)this + 188) = 0u;
    *((_OWORD *)this + 189) = 0u;
    *((_OWORD *)this + 19pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 191) = 0u;
    *((_OWORD *)this + 192) = 0u;
    *((_OWORD *)this + 193) = 0u;
  }
  if (!a2) {
    goto LABEL_28;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_27:
  if (a2[5] <= v4[19814]) {
    goto LABEL_32;
  }
LABEL_28:
  if (*((void *)this + 498))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 498);
    double result = 0.0;
    *((_OWORD *)this + 249) = 0u;
    *((_OWORD *)this + 25pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 251) = 0u;
    *((_OWORD *)this + 252) = 0u;
    *((_OWORD *)this + 253) = 0u;
    *((_OWORD *)this + 254) = 0u;
    *((_OWORD *)this + 255) = 0u;
    *((_OWORD *)this + 256) = 0u;
    *((_OWORD *)this + 257) = 0u;
    *((_OWORD *)this + 258) = 0u;
    *((_OWORD *)this + 259) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_32:
    if (a2[6] <= v4[19815]) {
      goto LABEL_37;
    }
  }
  if (*((void *)this + 300))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 300);
    double result = 0.0;
    *((_OWORD *)this + 15pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 151) = 0u;
    *((_OWORD *)this + 152) = 0u;
    *((_OWORD *)this + 153) = 0u;
    *((_OWORD *)this + 154) = 0u;
    *((_OWORD *)this + 155) = 0u;
    *((_OWORD *)this + 156) = 0u;
    *((_OWORD *)this + 157) = 0u;
    *((_OWORD *)this + 158) = 0u;
    *((_OWORD *)this + 159) = 0u;
    *((_OWORD *)this + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
  }
  if (!a2) {
    goto LABEL_38;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_37:
  if (a2[7] <= v4[19816]) {
    goto LABEL_42;
  }
LABEL_38:
  if (*((void *)this + 322))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 322);
    double result = 0.0;
    *((_OWORD *)this + 161) = 0u;
    *((_OWORD *)this + 162) = 0u;
    *((_OWORD *)this + 163) = 0u;
    *((_OWORD *)this + 164) = 0u;
    *((_OWORD *)this + 165) = 0u;
    *((_OWORD *)this + 166) = 0u;
    *((_OWORD *)this + 167) = 0u;
    *((_OWORD *)this + 168) = 0u;
    *((_OWORD *)this + 169) = 0u;
    *((_OWORD *)this + 17pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 171) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_42:
    if (a2[8] <= v4[19817]) {
      goto LABEL_47;
    }
  }
  if (*((void *)this + 344))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 344);
    double result = 0.0;
    *((_OWORD *)this + 172) = 0u;
    *((_OWORD *)this + 173) = 0u;
    *((_OWORD *)this + 174) = 0u;
    *((_OWORD *)this + 175) = 0u;
    *((_OWORD *)this + 176) = 0u;
    *((_OWORD *)this + 177) = 0u;
    *((_OWORD *)this + 178) = 0u;
    *((_OWORD *)this + 179) = 0u;
    *((_OWORD *)this + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 181) = 0u;
    *((_OWORD *)this + 182) = 0u;
  }
  if (!a2) {
    goto LABEL_48;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_47:
  if (a2[9] <= v4[19818]) {
    goto LABEL_52;
  }
LABEL_48:
  if (*((void *)this + 388))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 388);
    double result = 0.0;
    *((_OWORD *)this + 194) = 0u;
    *((_OWORD *)this + 195) = 0u;
    *((_OWORD *)this + 196) = 0u;
    *((_OWORD *)this + 197) = 0u;
    *((_OWORD *)this + 198) = 0u;
    *((_OWORD *)this + 199) = 0u;
    *((_OWORD *)this + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 201) = 0u;
    *((_OWORD *)this + 202) = 0u;
    *((_OWORD *)this + 203) = 0u;
    *((_OWORD *)this + 204) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_52:
    if (a2[10] <= v4[19819]) {
      goto LABEL_57;
    }
  }
  if (*((void *)this + 410))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 410);
    double result = 0.0;
    *((_OWORD *)this + 205) = 0u;
    *((_OWORD *)this + 206) = 0u;
    *((_OWORD *)this + 207) = 0u;
    *((_OWORD *)this + 208) = 0u;
    *((_OWORD *)this + 209) = 0u;
    *((_OWORD *)this + 21pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 211) = 0u;
    *((_OWORD *)this + 212) = 0u;
    *((_OWORD *)this + 213) = 0u;
    *((_OWORD *)this + 214) = 0u;
    *((_OWORD *)this + 215) = 0u;
  }
  if (!a2) {
    goto LABEL_58;
  }
  uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_57:
  if (a2[11] <= v4[19820]) {
    goto LABEL_62;
  }
LABEL_58:
  if (*((void *)this + 476))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 476);
    double result = 0.0;
    *((_OWORD *)this + 238) = 0u;
    *((_OWORD *)this + 239) = 0u;
    *((_OWORD *)this + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 241) = 0u;
    *((_OWORD *)this + 242) = 0u;
    *((_OWORD *)this + 243) = 0u;
    *((_OWORD *)this + 244) = 0u;
    *((_OWORD *)this + 245) = 0u;
    *((_OWORD *)this + 246) = 0u;
    *((_OWORD *)this + 247) = 0u;
    *((_OWORD *)this + 248) = 0u;
  }
  if (a2)
  {
    uint64_t v4 = *(_DWORD **)(*((void *)this + 32) + 15944);
LABEL_62:
    if (a2[12] <= v4[19821]) {
      return result;
    }
  }
  if (*((void *)this + 454))
  {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 454);
    double result = 0.0;
    *((_OWORD *)this + 227) = 0u;
    *((_OWORD *)this + 228) = 0u;
    *((_OWORD *)this + 229) = 0u;
    *((_OWORD *)this + 23pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 231) = 0u;
    *((_OWORD *)this + 232) = 0u;
    *((_OWORD *)this + 233) = 0u;
    *((_OWORD *)this + 234) = 0u;
    *((_OWORD *)this + 235) = 0u;
    *((_OWORD *)this + 236) = 0u;
    *((_OWORD *)this + 237) = 0u;
  }
  return result;
}

uint64_t CAHDecCatnipAvx::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 464;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 4176) = a2;
  return this;
}

uint64_t CAHDecCatnipAvx::initPicture(CAHDecCatnipAvx *this)
{
  return 0;
}

uint64_t CAHDecCatnipAvx::populateSlices(CAHDecCatnipAvx *this)
{
  return 0;
}

uint64_t CAHDecCatnipAvx::getTileIdxAbove(CAHDecCatnipAvx *this)
{
  return 0;
}

uint64_t CAHDecCatnipAvx::decodeBuffer(CAHDecCatnipAvx *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecCatnipAvx::decodeBufferSize(CAHDecCatnipAvx *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecCatnipAvx::decHdrYLinAddr(CAHDecCatnipAvx *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 3072);
}

uint64_t CAHDecCatnipAvx::decHdrCLinAddr(CAHDecCatnipAvx *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 32) + 176 * a2 + 5536);
}

uint64_t CAHDecCatnipAvx::decHdrYSize(CAHDecCatnipAvx *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 3116);
}

uint64_t CAHDecCatnipAvx::decHdrCSize(CAHDecCatnipAvx *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 32) + 176 * a2 + 5580);
}

uint64_t CAHDecCatnipAvx::decHdrYStride(CAHDecCatnipAvx *this)
{
  return *((unsigned int *)this + 1042);
}

uint64_t CAHDecCatnipAvx::decHdrCStride(CAHDecCatnipAvx *this)
{
  return *((unsigned int *)this + 1043);
}

void CAHDecCatnipHevc::CAHDecCatnipHevc(CAHDecCatnipHevc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73FCC0;
  *(_DWORD *)(v1 + 456) = 420332;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

__n128 CAHDecCatnipHevc::getMVmemInfo(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1 + 176 * a2;
  long long v5 = *(_OWORD *)(v4 + 7568);
  long long v6 = *(_OWORD *)(v4 + 7600);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 7584);
  *(_OWORD *)(a3 + 32) = v6;
  *(_OWORD *)a3 = v5;
  long long v7 = *(_OWORD *)(v4 + 7616);
  long long v8 = *(_OWORD *)(v4 + 7632);
  long long v9 = *(_OWORD *)(v4 + 7664);
  *(_OWORD *)(a3 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v4 + 7648);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_OWORD *)(a3 + 64) = v8;
  __n128 result = *(__n128 *)(v4 + 7680);
  long long v11 = *(_OWORD *)(v4 + 7696);
  long long v12 = *(_OWORD *)(v4 + 7728);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v4 + 7712);
  *(_OWORD *)(a3 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v12;
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v11;
  *a4 = *(_DWORD *)(a1 + 4 * a2 + 464);
  return result;
}

uint64_t CAHDecCatnipHevc::getTileStartCTU(CAHDecCatnipHevc *this, unsigned int a2, int a3)
{
  uint64_t v3 = (unsigned __int16 *)(*((void *)this + 33) + 684);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecCatnipHevc::getTileIdxAbove(CAHDecCatnipHevc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 684);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecCatnipHevc::decHdrYLinAddr(CAHDecCatnipHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 66);
}

uint64_t CAHDecCatnipHevc::decHdrCLinAddr(CAHDecCatnipHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 418);
}

uint64_t CAHDecCatnipHevc::decHdrYSize(CAHDecCatnipHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 143);
}

uint64_t CAHDecCatnipHevc::decHdrCSize(CAHDecCatnipHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 847);
}

uint64_t CAHDecCatnipHevc::decHdrYStride(CAHDecCatnipHevc *this)
{
  return *((unsigned int *)this + 2950);
}

uint64_t CAHDecCatnipHevc::decHdrCStride(CAHDecCatnipHevc *this)
{
  return *((unsigned int *)this + 2951);
}

CAHDecLotusHevc *createLotusHevcDecoder(CAVDHevcDecoder *a1)
{
  unsigned int v2 = (CAHDecLotusHevc *)operator new(0x2E38uLL, MEMORY[0x263F8C180]);
  BOOL v3 = v2;
  if (v2) {
    CAHDecLotusHevc::CAHDecLotusHevc(v2, a1);
  }
  return v3;
}

void sub_2239EA46C(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecLotusHevc::CAHDecLotusHevc(CAHDecLotusHevc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73F5F0;
  *(_DWORD *)(v1 + 456) = 396516;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecLotusHevc::CAHDecLotusHevc(CAHDecLotusHevc *this, CAVDHevcDecoder *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73F5F0;
  *(void *)(v4 + 256) = a2;
  *(_DWORD *)(v4 + 456) = 396516;
  *(_DWORD *)(v4 + 8) = 2692;
  *(_OWORD *)(v4 + 16) = xmmword_223AD0A10;
  *(_DWORD *)(v4 + 32) = 2;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), 396516, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      long long v7 = "CAHDecLotusHevc";
      __int16 v8 = 1024;
      int v9 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v6, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
  }
  else
  {
    uint64_t v5 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v5;
    *((void *)this + 34) = v5;
    bzero((char *)this + 528, 0x2C00uLL);
  }
}

void sub_2239EA630(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecLotusHevc::~CAHDecLotusHevc(CAHDecLotusHevc *this)
{
  *(void *)this = &unk_26D73F5F0;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecLotusHevc::~CAHDecLotusHevc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecLotusHevc::initPicture(CAHDecLotusHevc *this, int a2, __int16 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 114) = 396516;
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v4;
  if (v4)
  {
    bzero(v4, 0x60CE4uLL);
    uint64_t v7 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v7 + 16) = a2;
    *(_WORD *)(v7 + 24) = 257;
    *(_WORD *)(v7 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 2955) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "initPicture";
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v9, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecLotusHevc::populateSlices(CAHDecLotusHevc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2692;
    uint64_t v5 = a2;
    do
    {
      CAHDecLotusHevc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 356;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecLotusHevc::populateSliceRegisters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 256);
  int v6 = *(_DWORD *)(v5 + 8320);
  int v7 = *(_DWORD *)(v5 + 8324);
  uint64_t v8 = *(void *)(v5 + 8288);
  uint64_t v9 = *(void *)(v5 + 8280);
  uint64_t v10 = *(void *)(v5 + 8296);
  int v11 = a3;
  uint64_t v12 = v9 + 23176 * v6;
  *(_DWORD *)(a1 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 6 * *(_DWORD *)(v12 + 3636);
  LODWORD(v12) = *(_DWORD *)(v12 + 22880);
  *(_DWORD *)(a2 + 348) = 0x1000000;
  uint64_t v13 = v10 + 2360 * (int)a3;
  unsigned int v14 = (((*(_DWORD *)(v13 + 36) / v12) & 0xFFF) << 12) | 0x1000000;
  *(_DWORD *)(a2 + 348) = v14;
  *(_DWORD *)(a2 + 348) = v14 & 0xFFFFF000 | (*(_DWORD *)(v13 + 36) % v12) & 0xFFF;
  *(_DWORD *)(a2 + 4) = 0;
  char v15 = *(unsigned char *)(v8 + 9856 * v7 + 6477);
  if (v15) {
    char v15 = *(unsigned char *)(v10 + 2360 * (int)a3 + 1880);
  }
  int v16 = v15 & 1;
  *(_DWORD *)(a2 + 4) = v16;
  uint64_t v17 = v10 + 2360 * (int)a3;
  int v19 = *(_DWORD *)(v17 + 44);
  int v18 = (int *)(v17 + 44);
  if (v19 == 2) {
    LOBYTE(v2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  }
  else {
    int v20 = 5 - *(_DWORD *)(v10 + 2360 * (int)a3 + 1864);
  }
  unsigned int v21 = v16 & 0xFFFFFFF1 | (2 * (v20 & 7));
  *(_DWORD *)(a2 + 4) = v21;
  if (*v18)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *(unsigned __int8 *)(v10 + 2360 * (int)a3 + 616);
    if (*(unsigned char *)(v10 + 2360 * (int)a3 + 616)) {
      int v22 = *(unsigned char *)(v10 + 2360 * (int)a3 + 762) == 0;
    }
  }
  int v23 = v21 | (16 * v22);
  *(_DWORD *)(a2 + 4) = v23;
  if (*v18 == 2)
  {
    char v24 = 0;
  }
  else
  {
    char v24 = *(unsigned char *)(v8 + 9856 * v7 + 17);
    if (v24) {
      char v24 = *(unsigned char *)(v10 + 2360 * (int)a3 + 761);
    }
  }
  unsigned int v25 = v23 & 0xFFFFFFDF | (32 * (v24 & 1));
  *(_DWORD *)(a2 + 4) = v25;
  if (*v18) {
    int v26 = 0;
  }
  else {
    int v26 = *(unsigned char *)(v10 + 2360 * (int)a3 + 760) == 0;
  }
  char v27 = 0;
  int v28 = v25 | (v26 << 6);
  *(_DWORD *)(a2 + 4) = v28;
  uint64_t v29 = v10 + 2360 * (int)a3;
  int v30 = (*(_DWORD *)(v29 + 624) & 0xF) << 7;
  if (*(_DWORD *)(v29 + 624) == -1) {
    int v30 = 0;
  }
  int v31 = v30 | v28;
  *(_DWORD *)(a2 + 4) = v31;
  int v32 = (*(_DWORD *)(v29 + 620) & 0xF) << 11;
  if (*(_DWORD *)(v29 + 620) == -1) {
    int v32 = 0;
  }
  int v33 = v31 | v32;
  *(_DWORD *)(a2 + 4) = v33;
  if (*v18 != 2)
  {
    char v27 = *(unsigned char *)(v9 + 23176 * v6 + 22284);
    if (v27) {
      char v27 = *(unsigned char *)(v10 + 2360 * (int)a3 + 616);
    }
  }
  uint64_t v130 = v8;
  int v131 = v7;
  unsigned int v34 = v33 & 0xFFFF7FFF | ((v27 & 1) << 15);
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a2 + 4) = v34 & 0xFFFCFFFF | ((*v18 & 3) << 16);
  *(_DWORD *)(a2 + 336) = 0;
  if (*v18 > 1 {
    || !*(void *)(v10 + 2360 * (int)a3 + 2344)
  }
    || *(_DWORD *)(a1 + 11820)
    || ((*(void (**)(void, uint64_t))(**(void **)(a1 + 256) + 344))(*(void *)(a1 + 256), a3),
        uint64_t v35 = *(void *)(a1 + 256),
        *(_DWORD *)(v35 + 9032))
    || (*(_DWORD *)(a1 + 1182pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 1, *(_DWORD *)(a2 + 4) |= 0x40000u, !*(void *)(v35 + 8856))
    && !*(_DWORD *)(v35 + 9008)
    && !*(_DWORD *)(v35 + 9012)
    || (uint64_t result = CAHDec::addToPatcherList(a1, (void *)(v35 + 8856), 356 * (int)a3 + 3028, 0, 0xFFFFFFFFLL, 8, 0xFFFFFF, 4), !result))
  {
    int v129 = v6;
    int v36 = (unsigned int *)(v29 + 624);
    int v37 = (unsigned int *)(v29 + 620);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
    uint64_t v38 = a1;
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 256) + 352))(*(void *)(a1 + 256), 0, a3);
    uint64_t v40 = v130;
    int v39 = v131;
    if (*v18 > 1) {
      goto LABEL_38;
    }
    uint64_t v41 = v5 + 8456;
    if ((*v37 & 0x80000000) != 0)
    {
      uint64_t v43 = 0;
      if (*v18) {
        goto LABEL_38;
      }
    }
    else
    {
      int v42 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = a2 + 8;
      do
      {
        uint64_t v45 = v43;
        *(_DWORD *)(v44 + 4 * v43) = v42 & 0xF0 | 0x2DC00000;
        *(_DWORD *)(v44 + 4 * v43) = v42 & 0xF0 | 0x2DC00000 | *(_DWORD *)(v41 + 4 * v43) & 0xF;
        ++v43;
        v42 += 16;
      }
      while (v45 < (int)*v37);
      if (*v18) {
        goto LABEL_38;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v38 + 256) + 352))(*(void *)(v38 + 256), 1, a3);
    uint64_t v40 = v130;
    int v39 = v131;
    if ((*v36 & 0x80000000) == 0)
    {
      int v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = a2 + 4 * v43 + 8;
      do
      {
        *(_DWORD *)(v48 + 4 * v47) = v46 & 0xF0 | 0x2DC00100;
        *(_DWORD *)(v48 + 4 * v47) = v46 & 0xF0 | 0x2DC00100 | *(_DWORD *)(v41 + 4 * v47) & 0xF;
        v46 += 16;
      }
      while (v47++ < (int)*v36);
    }
LABEL_38:
    *(void *)(a2 + 128) = 0x2DD0000000000000;
    int v50 = *v18;
    if (*v18)
    {
      uint64_t v51 = v38;
      if (v50 != 1 || !*(unsigned char *)(v40 + 9856 * v39 + 49)) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v51 = v38;
      if (!*(unsigned char *)(v40 + 9856 * v39 + 50)) {
        goto LABEL_62;
      }
    }
    unsigned int v52 = 0;
    unsigned int v53 = 0;
    uint64_t v54 = v10 + 2360 * v11;
    uint64_t v55 = v40 + 9856 * v39;
    long long v56 = (unsigned char *)(v55 + 50);
    int v57 = (unsigned char *)(v55 + 49);
    if (v50) {
      uint64_t v58 = v57;
    }
    else {
      uint64_t v58 = v56;
    }
    int v59 = ((*v58 & 1) << 6) | 0x2DD00000;
    *(_DWORD *)(a2 + 132) = v59;
    char v60 = *(_DWORD *)(v54 + 768);
    unsigned int v61 = v59 & 0xFFFFFFC7 | (8 * (*(_DWORD *)(v54 + 768) & 7));
    *(_DWORD *)(a2 + 132) = v61;
    unsigned __int8 v62 = (*(_DWORD *)(v54 + 772) + *(_DWORD *)(v54 + 768)) & 7;
    *(_DWORD *)(a2 + 132) = v61 & 0xFFFFFFF8 | v62;
    int v63 = 1 << (v60 & 7);
    int v64 = 1 << v62;
    do
    {
      uint64_t v65 = v52;
      if (*(unsigned char *)(v10 + 2360 * v11 + v52 + 776))
      {
        int v66 = ((v52 & 0xF) << 9) | 0x2DE04000;
        uint64_t v67 = a2 + 4 * v53;
        *(_DWORD *)(v67 + 136) = v66;
        uint64_t v68 = v10 + 2360 * v11 + 4 * v65;
        *(_DWORD *)(v67 + 136) = ((unsigned __int16)*(_DWORD *)(v68 + 808) + (_WORD)v63) & 0x1FF | v66;
        *(_DWORD *)(v67 + 232) = 770703360;
        *(_DWORD *)(v67 + 232) = *(unsigned __int16 *)(v68 + 872) | 0x2DF00000;
        ++v53;
      }
      if (*(unsigned char *)(v10 + 2360 * v11 + v65 + 792))
      {
        uint64_t v69 = 0;
        char v70 = 1;
        do
        {
          char v71 = v70;
          int v72 = ((v65 & 0xF) << 9) | (v69 << 14) | 0x2DE08000;
          uint64_t v73 = a2 + 4 * v53;
          *(_DWORD *)(v73 + 136) = v72;
          uint64_t v74 = v10 + 2360 * v11 + 8 * v65 + 4 * v69;
          *(_DWORD *)(v73 + 136) = ((unsigned __int16)*(_DWORD *)(v74 + 936) + (_WORD)v64) & 0x1FF | v72;
          *(_DWORD *)(v73 + 232) = 770703360;
          *(_DWORD *)(v73 + 232) = *(unsigned __int16 *)(v74 + 1608) | 0x2DF00000;
          ++v53;
          uint64_t v69 = 1;
          char v70 = 0;
        }
        while ((v71 & 1) != 0);
      }
      unsigned int v52 = v65 + 1;
    }
    while ((int)v65 + 1 <= *v37);
    if (!*v18)
    {
      unsigned int v75 = 0;
      do
      {
        uint64_t v76 = v75;
        if (*(unsigned char *)(v10 + 2360 * v11 + v75 + 1192))
        {
          int v77 = ((v75 & 0xF) << 9) | 0x2DE06000;
          uint64_t v78 = a2 + 4 * v53;
          *(_DWORD *)(v78 + 136) = v77;
          uint64_t v79 = v10 + 2360 * v11 + 4 * v76;
          *(_DWORD *)(v78 + 136) = ((unsigned __int16)*(_DWORD *)(v79 + 1224) + (_WORD)v63) & 0x1FF | v77;
          *(_DWORD *)(v78 + 232) = 770703360;
          *(_DWORD *)(v78 + 232) = *(unsigned __int16 *)(v79 + 1288) | 0x2DF00000;
          ++v53;
        }
        if (*(unsigned char *)(v10 + 2360 * v11 + v76 + 1208))
        {
          uint64_t v80 = 0;
          char v81 = 1;
          do
          {
            char v82 = v81;
            int v83 = ((v76 & 0xF) << 9) | (v80 << 14) | 0x2DE0A000;
            uint64_t v84 = a2 + 4 * v53;
            *(_DWORD *)(v84 + 136) = v83;
            uint64_t v85 = v10 + 2360 * v11 + 8 * v76 + 4 * v80;
            *(_DWORD *)(v84 + 136) = ((unsigned __int16)*(_DWORD *)(v85 + 1352) + (_WORD)v64) & 0x1FF | v83;
            *(_DWORD *)(v84 + 232) = 770703360;
            *(_DWORD *)(v84 + 232) = *(unsigned __int16 *)(v85 + 1736) | 0x2DF00000;
            ++v53;
            uint64_t v80 = 1;
            char v81 = 0;
          }
          while ((v82 & 1) != 0);
        }
        unsigned int v75 = v76 + 1;
      }
      while ((int)v76 + 1 <= *v36);
    }
    *(_DWORD *)(a2 + 128) = v53;
LABEL_62:
    uint64_t v86 = v40 + 9856 * v39;
    int v89 = *(unsigned __int8 *)(v86 + 48);
    unint64_t v87 = (unsigned __int8 *)(v86 + 48);
    LOBYTE(v88) = v89;
    if (v89) {
      int v88 = *(_DWORD *)(v10 + 2360 * v11 + 1876);
    }
    unsigned int v90 = *(_DWORD *)(a2 + 328) & 0xFFFFFFE0 | ((_BYTE)v88 + *((_DWORD *)v87 - 1)) & 0x1F;
    *(_DWORD *)(a2 + 328) = v90;
    int v91 = *v87;
    if (v91) {
      int v91 = *(_DWORD *)(v10 + 2360 * v11 + 1872);
    }
    unsigned int v92 = v90 & 0xFFFFFC1F | (32 * (((_BYTE)v91 + *(_DWORD *)(v40 + 9856 * v39 + 40)) & 0x1F));
    *(_DWORD *)(a2 + 328) = v92;
    unsigned int v93 = (_DWORD *)(v40 + 9856 * v39);
    int v94 = v93[7] + *(_DWORD *)(v10 + 2360 * v11 + 1868) + 26;
    *(_DWORD *)(a2 + 328) = v92 & 0xE03FF | ((v94 & 0x7F) << 10) | 0x2D900000;
    *(_DWORD *)(*(void *)(v51 + 256) + 2868) = *(_DWORD *)(v51 + 460) + (v94 << 25 >> 25);
    *(_DWORD *)(a2 + 332) = 0;
    int v95 = v93[1635] & 7;
    *(_DWORD *)(a2 + 332) = v95;
    unsigned int v96 = v95 & 0xFFFFFFC7 | (8 * (v93[1634] & 7));
    *(_DWORD *)(a2 + 332) = v96;
    unsigned int v97 = (char *)(v9 + 23176 * v129 + 10649);
    char v98 = *v97;
    if (*v97) {
      char v98 = *(unsigned char *)(v10 + 2360 * v11 + 618);
    }
    unsigned int v99 = v96 & 0xFFFFFFBF | ((v98 & 1) << 6);
    *(_DWORD *)(a2 + 332) = v99;
    if (*v97) {
      char v100 = *(unsigned char *)(v10 + 2360 * v11 + 617);
    }
    else {
      char v100 = 0;
    }
    int v101 = (v98 & 1) << 6;
    int v102 = (v100 & 1) << 7;
    unsigned int v103 = v99 & 0xFFFFFF7F | v102;
    *(_DWORD *)(a2 + 332) = v103;
    uint64_t v104 = v10 + 2360 * v11;
    uint64_t v105 = v40 + 9856 * v39;
    if (*(unsigned char *)(v104 + 1881)) {
      int v106 = (_DWORD *)(v104 + 1888);
    }
    else {
      int v106 = (_DWORD *)(v105 + 248);
    }
    unsigned int v107 = v103 & 0xFFFFF0FF | ((*v106 & 0xF) << 8);
    *(_DWORD *)(a2 + 332) = v107;
    if (*(unsigned char *)(v104 + 1881)) {
      unsigned int v108 = (_DWORD *)(v104 + 1884);
    }
    else {
      unsigned int v108 = (_DWORD *)(v105 + 244);
    }
    unsigned int v109 = v107 & 0xFFFF0FFF | ((*v108 & 0xF) << 12);
    *(_DWORD *)(a2 + 332) = v109;
    if (*(unsigned char *)(v105 + 239) && *(unsigned char *)(v104 + 1881)) {
      long long v110 = (unsigned __int8 *)(v10 + 2360 * v11 + 1882);
    }
    else {
      long long v110 = (unsigned __int8 *)(v40 + 9856 * v39 + 240);
    }
    int v111 = *v110;
    BOOL v112 = (v102 | v101) != 0;
    int v113 = v109 | ((v111 == 0) << 16);
    *(_DWORD *)(a2 + 332) = v113;
    if (!v111) {
      BOOL v112 = 1;
    }
    uint64_t v114 = v40 + 9856 * v39;
    if (v112) {
      __int16 v115 = (unsigned char *)(v10 + 2360 * v11 + 1892);
    }
    else {
      __int16 v115 = (unsigned char *)(v114 + 237);
    }
    unsigned int v116 = v113 & 0xFFFDFFFF | ((*v115 & 1) << 17);
    *(_DWORD *)(a2 + 332) = v116;
    if (*(unsigned char *)(v114 + 52)) {
      int v117 = (*(unsigned char *)(v40 + 9856 * v39 + 236) & 1) << 18;
    }
    else {
      int v117 = 0x40000;
    }
    int v118 = v117 | v116;
    *(_DWORD *)(a2 + 332) = v118;
    int v119 = *(unsigned __int8 *)(v9 + 23176 * v129 + 10650);
    if (*(unsigned char *)(v9 + 23176 * v129 + 10650)) {
      int v119 = (*(unsigned char *)(v9 + 23176 * v129 + 10668) == 0) << 19;
    }
    *(_DWORD *)(a2 + 332) = v118 | v119 | 0x2DA00000;
    int v120 = *(_DWORD **)(v51 + 256);
    unsigned int v121 = v120[626];
    if (v120[590] == 1)
    {
      unint64_t v133 = 0;
      uint64_t v134 = 0;
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t *, unint64_t *))(*(void *)v120 + 448))(v120, a3, &v134, &v133))
      {
        int v122 = (void *)v134;
        if (*(void *)v134 || *(_DWORD *)(v134 + 152) || *(_DWORD *)(v134 + 156))
        {
          int v123 = v133;
          int v124 = 356 * a3 + 3032;
          if (HIDWORD(v133) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            int v136 = "populateSliceRegisters";
            __int16 v137 = 1024;
            int v138 = 1476;
            int v125 = &_os_log_internal;
LABEL_106:
            _os_log_impl(&dword_223977000, v125, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
            int v123 = v133;
            goto LABEL_107;
          }
          goto LABEL_107;
        }
        goto LABEL_108;
      }
    }
    else
    {
      unint64_t v133 = 0;
      uint64_t v134 = 0;
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t *, unint64_t *))(*(void *)v120 + 448))(v120, a3, &v134, &v133))
      {
        int v122 = (void *)v134;
        if (*(void *)v134 || *(_DWORD *)(v134 + 152) || *(_DWORD *)(v134 + 156))
        {
          int v123 = v133;
          int v124 = 356 * a3 + 3032;
          if (HIDWORD(v133) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            int v136 = "populateSliceRegisters";
            __int16 v137 = 1024;
            int v138 = 1490;
            int v125 = &_os_log_internal;
            goto LABEL_106;
          }
LABEL_107:
          uint64_t result = CAHDec::addToPatcherList(v51, v122, v124, v123, 0xFFFFFFFFLL, 0, -1, 4);
          if (result) {
            return result;
          }
        }
LABEL_108:
        unsigned int v127 = *(_DWORD *)(v10 + 2360 * v11 + 16) - (*(_DWORD *)(v10 + 2360 * v11 + 2080) >> 3);
        *(_DWORD *)(a2 + 344) = v127;
        if (v120[590] != 1) {
          return 0;
        }
        *(_DWORD *)(a2 + 352) = 0;
        if (v120[605])
        {
          uint64_t result = 0;
          if (v127 >= *(unsigned __int16 *)(v10 + 2360 * v11 + 2352)) {
            unsigned int v127 = *(unsigned __int16 *)(v10 + 2360 * v11 + 2352);
          }
          int v128 = v127 | v121 & 0x10000;
        }
        else
        {
          uint64_t result = 0;
          if (v121 >> 22 <= v127) {
            unsigned int v127 = v121 >> 22;
          }
          int v128 = (unsigned __int16)v121 | (v127 << 22);
        }
        *(_DWORD *)(a2 + 352) = v128;
        return result;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecLotusHevc::populateCommonRegisters(CAHDecLotusHevc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000000;
  return 0;
}

uint64_t CAHDecLotusHevc::updateCommonRegisters(CAHDecLotusHevc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

uint64_t CAHDecLotusHevc::populateSequenceRegisters(CAHDecLotusHevc *this)
{
  uint64_t v1 = *((void *)this + 32);
  uint64_t v2 = (_DWORD *)*((void *)this + 33);
  int v3 = *(_DWORD *)(v1 + 8320);
  uint64_t v4 = *(void *)(v1 + 8280);
  v2[10] = 0;
  uint64_t v5 = v4 + 23176 * v3;
  __int16 v6 = (*(_DWORD *)(v5 + 3608) >> 3) - 1;
  v2[10] = v6 & 0x1FFF;
  v2[10] = ((*(_DWORD *)(v5 + 3612) << 13) + 536805376) & 0x1FFF0000 | v6 & 0x1FFF;
  v2[11] = 0;
  int v7 = *(unsigned char *)(v5 + 10648) & 1;
  v2[11] = v7;
  unsigned int v8 = v7 & 0xFFFFFFF1 | (2 * (*(_DWORD *)(v5 + 4440) & 7));
  v2[11] = v8;
  unsigned int v9 = v8 & 0xFFFFFF8F | (16 * (*(_DWORD *)(v5 + 4436) & 7));
  v2[11] = v9;
  unsigned int v10 = v9 & 0xFFFFFE7F | (((*(_DWORD *)(v5 + 4428) + *(_DWORD *)(v5 + 4432)) & 3) << 7);
  v2[11] = v10;
  unsigned int v11 = v10 & 0xFFFFF9FF | ((*(_DWORD *)(v5 + 4428) & 3) << 9);
  v2[11] = v11;
  unsigned int v12 = v11 & 0xFFFFE7FF | (((*(_DWORD *)(v5 + 4424) + *(_DWORD *)(v5 + 4420)) & 3) << 11);
  v2[11] = v12;
  unsigned int v13 = v12 & 0xFFFF9FFF | ((*(_DWORD *)(v5 + 4420) & 3) << 13);
  v2[11] = v13;
  unsigned int v14 = v13 & 0xFFF87FFF | ((*(_DWORD *)(v5 + 3640) & 0xF) << 15);
  v2[11] = v14;
  unsigned int v15 = v14 & 0xFF87FFFF | ((*(_DWORD *)(v5 + 3636) & 0xF) << 19);
  v2[11] = v15;
  unsigned int v16 = v15 & 0xFF7FFFFF | ((*(unsigned char *)(v5 + 3604) & 1) << 23);
  v2[11] = v16;
  v2[11] = v16 & 0xFCFFFFFF | ((*(_DWORD *)(v5 + 3600) & 3) << 24);
  v2[12] = 0;
  if (*(unsigned char *)(v5 + 10650))
  {
    v2[12] = 4096;
    uint64_t v17 = (_DWORD *)(v4 + 23176 * v3);
    int v18 = (v17[2666] + v17[2665]) & 3 | 0x1000;
    v2[12] = v18;
    unsigned int v19 = v18 & 0xFFFFFFF3 | (4 * (v17[2665] & 3));
    v2[12] = v19;
    unsigned int v20 = v19 & 0xFFFFFF0F | (16 * (v17[2664] & 0xF));
    v2[12] = v20;
    v2[12] = v20 & 0xFFFFF0FF | ((v17[2663] & 0xF) << 8);
  }
  v2[13] = 0;
  if (*(unsigned char *)(v4 + 23176 * v3 + 22833))
  {
    int v21 = *(unsigned char *)(v4 + 23176 * v3 + 22844) & 1;
    v2[13] = v21;
    unsigned int v22 = v21 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v4 + 23176 * v3 + 22843) & 1));
    v2[13] = v22;
    unsigned int v23 = v22 & 0xFFFFFFFB | (4 * (*(unsigned char *)(v4 + 23176 * v3 + 22842) & 1));
    v2[13] = v23;
    int v24 = v23 | (8 * (*(unsigned char *)(v4 + 23176 * v3 + 22841) == 0));
    v2[13] = v24;
    unsigned int v25 = v24 & 0xFFFFFFEF | (16 * (*(unsigned char *)(v4 + 23176 * v3 + 22840) & 1));
    v2[13] = v25;
    unsigned int v26 = v25 & 0xFFFFFFDF | (32 * (*(unsigned char *)(v4 + 23176 * v3 + 22839) & 1));
    v2[13] = v26;
    unsigned int v27 = v26 & 0xFFFFFFBF | ((*(unsigned char *)(v4 + 23176 * v3 + 22838) & 1) << 6);
    v2[13] = v27;
    int v28 = v27 | ((*(unsigned char *)(v4 + 23176 * v3 + 22837) & 1) << 7);
    v2[13] = v28;
    int v29 = v28 | ((*(unsigned char *)(v4 + 23176 * v3 + 22836) & 1) << 8);
  }
  else
  {
    int v29 = 8;
  }
  v2[13] = v29;
  uint64_t v30 = v4 + 23176 * v3;
  v2[13] = v29 & 0xFFFFFDFF | ((*(unsigned char *)(v30 + 22285) & 1) << 9);
  if (*(unsigned char *)(v30 + 4444)) {
    CAHDecTansyHevc::copyScalingList((uint64_t)this, (uint64_t)(v2 + 14), *((void *)this + 33) + 556, *(_DWORD *)(v5 + 3600), v4 + 23176 * v3 + 4448);
  }
  return 0;
}

uint64_t CAHDecLotusHevc::getTileHdrMemInfo(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 176 * a2;
  *a3 = v3 + 528;
  a3[1] = v3 + 3344;
  return result;
}

__n128 CAHDecLotusHevc::getMVmemInfo(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1 + 176 * a2;
  long long v5 = *(_OWORD *)(v4 + 7568);
  long long v6 = *(_OWORD *)(v4 + 7600);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 7584);
  *(_OWORD *)(a3 + 32) = v6;
  *(_OWORD *)a3 = v5;
  long long v7 = *(_OWORD *)(v4 + 7616);
  long long v8 = *(_OWORD *)(v4 + 7632);
  long long v9 = *(_OWORD *)(v4 + 7664);
  *(_OWORD *)(a3 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v4 + 7648);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_OWORD *)(a3 + 64) = v8;
  __n128 result = *(__n128 *)(v4 + 7680);
  long long v11 = *(_OWORD *)(v4 + 7696);
  long long v12 = *(_OWORD *)(v4 + 7728);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v4 + 7712);
  *(_OWORD *)(a3 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v12;
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v11;
  *a4 = *(_DWORD *)(a1 + 4 * a2 + 464);
  return result;
}

uint64_t CAHDecLotusHevc::populatePictureRegisters(CAHDecLotusHevc *this)
{
  uint64_t v365 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 8320);
  uint64_t v4 = *(void *)(v2 + 8280);
  uint64_t v346 = *(void *)(v2 + 8288);
  int v347 = *(_DWORD *)(v2 + 8324);
  int v5 = *(_DWORD *)(v2 + 9036);
  unsigned int v345 = *(_DWORD *)(v2 + 3068);
  int v6 = *(_DWORD *)(v2 + 3072);
  int v336 = *(_DWORD *)(v2 + 3064);
  int v337 = *(unsigned __int8 *)(v2 + 3060);
  uint64_t v341 = *(void *)(v2 + 8392);
  int v342 = *(unsigned __int8 *)(v2 + 9098);
  int v338 = *(_DWORD *)(v2 + 3660);
  int v339 = *(_DWORD *)(v2 + 3036);
  int v348 = *(_DWORD *)(v2 + 2644);
  uint64_t v343 = *(void *)(v2 + 2088);
  uint64_t v344 = *(unsigned int *)(v2 + 8424);
  int v335 = *(unsigned __int8 *)(v2 + 8);
  long long v7 = *(_OWORD *)(v2 + 8536);
  v364[0] = *(_OWORD *)(v2 + 8520);
  v364[1] = v7;
  long long v8 = *(_OWORD *)(v2 + 8568);
  v364[2] = *(_OWORD *)(v2 + 8552);
  v364[3] = v8;
  uint64_t v340 = *(unsigned int *)(v2 + 8720);
  int v349 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  uint64_t v350 = v4;
  uint64_t v9 = v4 + 23176 * v3;
  int v10 = *(_DWORD *)(v9 + 4420);
  int v11 = *(_DWORD *)(v9 + 4424);
  memset(v363, 0, sizeof(v363));
  memset(v362, 0, sizeof(v362));
  uint64_t v12 = *((void *)this + 33);
  (*(void (**)(void))(**((void **)this + 32) + 336))();
  uint64_t v13 = 0;
  unsigned int v14 = (unsigned __int8 *)*((void *)this + 32);
  unsigned int v15 = (const double *)(v14 + 8728);
  do
  {
    float64x2x2_t v366 = vld2q_f64(v15);
    v15 += 4;
    v363[v13] = v366.val[0];
    v362[v13++] = v366.val[1];
  }
  while (v13 != 4);
  int v16 = v14[2675];
  unsigned int v17 = v14[2674];
  if (v16 | v17)
  {
    uint64_t v18 = v350 + 23176 * v3;
    unsigned int v19 = *(_DWORD *)(v18 + 3636);
    unsigned int v20 = *(_DWORD *)(v18 + 3640);
    if (v19 > v20) {
      unsigned int v20 = v19;
    }
    unsigned int v21 = (v20 + 9) & 0xFFFFFFFE;
    int v22 = v3;
    if (v21 == 8)
    {
      unsigned int v28 = 1;
      int v27 = 8;
      if (!v14[2675]) {
        goto LABEL_38;
      }
    }
    else
    {
      int v23 = v14[2672];
      if (v21 == 12)
      {
        if (v23) {
          int v27 = 12;
        }
        else {
          int v27 = 11;
        }
        if (v23) {
          unsigned int v28 = 5;
        }
        else {
          unsigned int v28 = 4;
        }
        if (!v16)
        {
LABEL_38:
          int v3 = v22;
          if (v17 && (v17 == 3 && v28 - 9 < 2 || v28 <= 0x1A && ((1 << v28) & 0x4C00000) != 0 && v17 <= 2))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "populatePictureRegisters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v28;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = v17;
              int v29 = &_os_log_internal;
              uint64_t v30 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
              goto LABEL_167;
            }
            return 0xFFFFFFFFLL;
          }
          goto LABEL_46;
        }
      }
      else
      {
        BOOL v24 = v23 == 0;
        if (v23) {
          int v25 = 10;
        }
        else {
          int v25 = 9;
        }
        if (v24) {
          int v26 = 2;
        }
        else {
          int v26 = 3;
        }
        if (v21 == 10) {
          int v27 = v25;
        }
        else {
          int v27 = 27;
        }
        if (v21 == 10) {
          unsigned int v28 = v26;
        }
        else {
          unsigned int v28 = 27;
        }
        if (!v16) {
          goto LABEL_38;
        }
      }
    }
    if (*(_DWORD *)(v350 + 23176 * v22 + 3600) && (v16 == 2 && v27 == 8 || v16 == 3 && (v27 - 9) <= 1))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v27;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v16;
        int v29 = &_os_log_internal;
        uint64_t v30 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
LABEL_167:
        int v171 = buf;
        uint32_t v172 = 24;
LABEL_168:
        _os_log_impl(&dword_223977000, v29, OS_LOG_TYPE_DEFAULT, v30, v171, v172);
      }
      return 0xFFFFFFFFLL;
    }
    goto LABEL_38;
  }
LABEL_46:
  *(_DWORD *)(v12 + 76) = 766509056;
  uint64_t v31 = (*(uint64_t (**)(void))(**((void **)this + 32) + 216))(*((void *)this + 32));
  if (v31) {
    int v32 = (*(_DWORD *)(*((void *)this + 32) + 3092) == 2) << 13;
  }
  else {
    int v32 = 0;
  }
  int v33 = v6;
  unsigned int v34 = *(_DWORD *)(v12 + 76) & 0xFFFFC100;
  if (v349) {
    int v35 = 688;
  }
  else {
    int v35 = 672;
  }
  if (v348) {
    int v36 = 4160;
  }
  else {
    int v36 = 64;
  }
  unsigned int v37 = v36 & 0xFFFFFFF0 | ((v348 == 1) << 10) | v35 & 0xFFFFFFF0 | (4 * (v16 & 3)) | v17 & 3 | v32;
  int v38 = v37 | v34;
  *(_DWORD *)(v12 + 76) = v37 | v34;
  int v39 = (unsigned char *)*((void *)this + 32);
  unsigned int v40 = v38 & 0xFFF7FFFF | ((v39[2652] & 1) << 19);
  *(_DWORD *)(v12 + 76) = v40;
  unsigned int v41 = v40 & 0xFFFBFFFF | ((v39[2653] & 1) << 18);
  *(_DWORD *)(v12 + 76) = v41;
  unsigned int v42 = v41 & 0xFFFDFFFF | ((v39[2654] & 1) << 17);
  *(void *)(v12 + 76) = v42;
  if ((v5 & 1) != 0 && *(unsigned char *)(v346 + 9856 * v347 + 53) && *(_DWORD *)(v350 + 23176 * v3 + 22888) > 1u
    || (v5 & 2) != 0 && !*(unsigned char *)(v346 + 9856 * v347 + 53) && *(unsigned char *)(v346 + 9856 * v347 + 52))
  {
    goto LABEL_67;
  }
  if ((v5 & 0x20) == 0 || *(unsigned char *)(v346 + 9856 * v347 + 53))
  {
    int v43 = 0;
    goto LABEL_68;
  }
  int v43 = 0;
  if (!*(unsigned char *)(v346 + 9856 * v347 + 52) && v345 >= 2) {
LABEL_67:
  }
    int v43 = (v6 == 0) << 27;
LABEL_68:
  char v44 = v11 + v10;
  *(_DWORD *)(v12 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v43;
  *(_DWORD *)(v12 + 84) = 0;
  uint64_t v45 = v350 + 23176 * v3;
  unsigned __int16 v46 = *(_DWORD *)(v45 + 3608) - 1;
  *(_DWORD *)(v12 + 84) = v46;
  int v47 = (v46 | ((unsigned __int16)*(_DWORD *)(v45 + 3612) << 16)) - 0x10000;
  *(void *)(v12 + 88) = 0;
  *(_DWORD *)(v12 + 84) = v47;
  if (*(unsigned char *)(v346 + 9856 * v347 + 6466))
  {
    uint64_t v48 = (unsigned char *)(v346 + 9856 * v347 + 6477);
    int v49 = 32 * (*v48 & 1);
    *(_DWORD *)(v12 + 92) = v49;
    LOBYTE(v5pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *v48;
    if (*v48) {
      int v50 = *(_DWORD *)(v346 + 9856 * v347 + 6484);
    }
    unint64_t v51 = v50 & 7;
    int v52 = v51 | v49;
    *(_DWORD *)(v12 + 92) = v51 | v49;
    if (v49)
    {
      unsigned int v53 = (_DWORD *)(v346 + 9856 * v347 + 6512);
      uint64_t v54 = (unsigned int *)(v12 + 100);
      unint64_t v55 = -1;
      do
      {
        unsigned int v56 = *v54 & 0xFFFFFFE0 | *v53 & 0x1F;
        *uint64_t v54 = v56;
        uint64_t v31 = *(v53 - 6);
        *v54++ = v56 & 0xFFFFFC1F | (32 * (*(v53 - 6) & 0x1F));
        ++v55;
        ++v53;
      }
      while (v55 < v51);
    }
    int v57 = *v48;
    if (v57) {
      int v57 = *(_DWORD *)(v346 + 9856 * v347 + 6480);
    }
    int v58 = (8 * ((v44 - (_BYTE)v57) & 3)) | v52;
    *(_DWORD *)(v12 + 92) = v58;
    unsigned int v59 = v58 & 0xFFFFFFBF | ((*(unsigned char *)(v346 + 9856 * v347 + 6476) & 1) << 6);
    *(_DWORD *)(v12 + 92) = v59;
    unsigned int v60 = v59 & 0xFFFFFE7F | ((*(_DWORD *)(v346 + 9856 * v347 + 6472) & 3) << 7);
  }
  else
  {
    unsigned int v60 = 8 * (v44 & 3);
  }
  *(_DWORD *)(v12 + 92) = v60;
  uint64_t v61 = v346 + 9856 * v347;
  int v64 = *(unsigned __int8 *)(v61 + 34);
  unsigned __int8 v62 = (unsigned char *)(v61 + 34);
  LOBYTE(v63) = v64;
  if (v64) {
    int v63 = *(_DWORD *)(v346 + 9856 * v347 + 36);
  }
  unsigned int v65 = v60 & 0xFFFE7FFF | (((v44 - (_BYTE)v63) & 3) << 15);
  *(_DWORD *)(v12 + 92) = v65;
  uint64_t v66 = v346 + 9856 * v347;
  unsigned int v67 = v65 & 0xFFFFF1FF | ((*(_DWORD *)(v66 + 6460) & 7) << 9);
  *(_DWORD *)(v12 + 92) = v67;
  unsigned int v68 = v67 & 0xFFFFEFFF | ((*(unsigned char *)(v66 + 53) & 1) << 12);
  *(_DWORD *)(v12 + 92) = v68;
  char v70 = *(unsigned char *)(v66 + 52);
  uint64_t v69 = (unsigned char *)(v66 + 52);
  unsigned int v71 = v68 & 0xFFFFDFFF | ((v70 & 1) << 13);
  *(_DWORD *)(v12 + 92) = v71;
  unsigned int v72 = v71 & 0xFFFFBFFF | ((*(v69 - 1) & 1) << 14);
  *(_DWORD *)(v12 + 92) = v72;
  unsigned int v73 = v72 & 0xFFFDFFFF | ((*v62 & 1) << 17);
  *(_DWORD *)(v12 + 92) = v73;
  unsigned int v74 = v73 & 0xFFFBFFFF | ((*(v69 - 19) & 1) << 18);
  *(_DWORD *)(v12 + 92) = v74;
  unsigned int v75 = v74 & 0xFFF7FFFF | ((*(v69 - 20) & 1) << 19);
  *(_DWORD *)(v12 + 92) = v75;
  unsigned int v76 = v75 & 0xFFEFFFFF | ((*(v69 - 36) & 1) << 20);
  *(_DWORD *)(v12 + 92) = v76;
  if (v37 >> 13) {
    BOOL v77 = 0;
  }
  else {
    BOOL v77 = *(unsigned char *)(v350 + 23176 * v3 + 22284) != 0;
  }
  *(_DWORD *)(v12 + 92) = v76 & 0xFFDFFFFF | (v77 << 21);
  uint64_t v78 = v346 + 9856 * v347;
  unsigned int v79 = *(_DWORD *)(v12 + 96) & 0xFFFFFFE0 | *(_DWORD *)(v78 + 44) & 0x1F;
  *(_DWORD *)(v12 + 96) = v79;
  *(_DWORD *)(v12 + 96) = v79 & 0xFFFFFC1F | (32 * (*(_DWORD *)(v78 + 40) & 0x1F));
  if (*(unsigned char *)(v78 + 252))
  {
    CAHDecTansyHevc::copyScalingList(v31, v12 + 124, *((void *)this + 33) + 1552, *(_DWORD *)(v350 + 23176 * v3 + 3600), v346 + 9856 * v347 + 256);
    unsigned int v42 = *(_DWORD *)(v12 + 76);
  }
  if ((~v42 & 0xC0000) != 0)
  {
    int v85 = 0;
    int v87 = 0;
    *(void *)(v12 + 144) = 0;
  }
  else
  {
    int v80 = v3;
    char v81 = (_DWORD *)*((void *)this + 32);
    int v82 = v81[664];
    if (!v82 || !v81[665])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v170 = v81[665];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "populatePictureRegisters";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v82;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v170;
        int v29 = &_os_log_internal;
        uint64_t v30 = "AppleAVD: %s(): invalid stat crop width/height %d/%d";
        goto LABEL_167;
      }
      return 0xFFFFFFFFLL;
    }
    unsigned __int16 v83 = v81[666];
    *(_WORD *)(v12 + 144) = v83;
    int v84 = v81[667];
    int v85 = v84 << 16;
    *(_DWORD *)(v12 + 144) = v83 | ((unsigned __int16)v84 << 16);
    unsigned __int16 v86 = v81[666] + v81[664] - 1;
    *(_WORD *)(v12 + 148) = v86;
    int v87 = (v86 | ((unsigned __int16)(*((_WORD *)v81 + 1330) + *((_WORD *)v81 + 1334)) << 16)) - 0x10000;
    *(_DWORD *)(v12 + 148) = v87;
    int v3 = v80;
  }
  if (v33) {
    int v88 = 7340080;
  }
  else {
    int v88 = 3145776;
  }
  *(_DWORD *)(v12 + 152) = v88;
  if (!*(unsigned char *)(*((void *)this + 32) + 3004))
  {
    unsigned __int16 v89 = *(_DWORD *)(v45 + 3608) - 1;
    *(_DWORD *)(v12 + 148) = v87 & 0xFFFF0000 | v89;
    int v90 = (*(_DWORD *)(v45 + 3612) << 16) - 0x10000;
    *(_DWORD *)(v12 + 148) = v90 & 0xFFFF0000 | v89;
    if (*(unsigned char *)(v350 + 23176 * v3 + 3616))
    {
      if ((v42 & 0x800) != 0)
      {
        uint64_t v91 = v350 + 23176 * v3;
        unsigned __int16 v92 = *(_DWORD *)(v91 + 3620) * *(_DWORD *)(v91 + 22852);
        *(_DWORD *)(v12 + 144) = v85 | v92;
        *(_DWORD *)(v12 + 144) = v92 | ((unsigned __int16)(*(_WORD *)(v91 + 22856) * *(_DWORD *)(v91 + 3628)) << 16);
        unsigned __int16 v93 = *(_DWORD *)(v45 + 3608) + ~(*(_DWORD *)(v91 + 3624) * *(_DWORD *)(v91 + 22852));
        *(_DWORD *)(v12 + 148) = v93 | v90;
        *(_DWORD *)(v12 + 148) = v93 | ((unsigned __int16)(*(_WORD *)(v45 + 3612)
                                                         + ~(*(_WORD *)(v91 + 3632) * *(_WORD *)(v91 + 22856))) << 16);
      }
    }
  }
  int v94 = v3;
  int v95 = (char *)this + 6160;
  for (uint64_t i = 156; i != 184; i += 4)
  {
    *(_DWORD *)(*((void *)this + 33) + i) = 0;
    uint64_t v97 = *((void *)this + 33);
    int v98 = *(_DWORD *)(v97 + i);
    *(_DWORD *)(v97 + i) = 0;
    *(_DWORD *)(*((void *)this + 33) + i) ^= 0xFFFFFFu;
    uint64_t v99 = *((void *)this + 33);
    int v100 = *(_DWORD *)(v99 + i);
    *(_DWORD *)(v99 + i) = v98;
    if (*(void *)v95 || *((_DWORD *)v95 + 38) || *((_DWORD *)v95 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v95, i, 0, 0xFFFFFFFFLL, 8, v100, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + i + 28) = 0;
    *(_DWORD *)(*((void *)this + 33) + i + 28) = *(_DWORD *)(*((void *)this + 33) + i + 28) & 0x800001FF | (((*((_DWORD *)this + 2952) >> 9) & 0x3FFFFF) << 9);
    v95 += 176;
  }
  *(_DWORD *)(*((void *)this + 33) + 212) = 0;
  *(_DWORD *)(*((void *)this + 33) + 216) = 0;
  if ((*(unsigned char *)(v12 + 78) & 8) == 0) {
    goto LABEL_364;
  }
  uint64_t v102 = *((void *)this + 33);
  uint64_t v103 = *(void *)(*((void *)this + 32) + 2680);
  long long v360 = 0u;
  long long v361 = 0u;
  long long v358 = 0u;
  long long v359 = 0u;
  long long v356 = 0u;
  long long v357 = 0u;
  long long v354 = 0u;
  long long v355 = 0u;
  long long v353 = 0u;
  memset(buf, 0, sizeof(buf));
  int v104 = *(_DWORD *)(v102 + 16);
  *(void *)buf = v103;
  int v105 = *(_DWORD *)(v102 + 216);
  *(_DWORD *)(v102 + 216) = 0;
  *(_DWORD *)(*((void *)this + 33) + 216) ^= 0xFFFFFFu;
  uint64_t v106 = *((void *)this + 33);
  int v107 = *(_DWORD *)(v106 + 216);
  *(_DWORD *)(v106 + 216) = v105;
  if (!v103
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 216, (v104 & 0xF) << 9, 0xFFFFFFFFLL, 8, v107, 4), !result))
  {
LABEL_364:
    *(_DWORD *)(*((void *)this + 33) + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    uint64_t v108 = *((void *)this + 33);
    int v109 = *(_DWORD *)(v108 + 220);
    *(_DWORD *)(v108 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + 220) ^= 0xFFFFFFu;
    uint64_t v110 = *((void *)this + 33);
    int v111 = *(_DWORD *)(v110 + 220);
    *(_DWORD *)(v110 + 22pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v109;
    if (!*((void *)this + 1298) && !*((_DWORD *)this + 2634) && !*((_DWORD *)this + 2635)) {
      goto LABEL_365;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1298, 220, 0, 0xFFFFFFFFLL, 8, v111, 4);
    if (!result)
    {
LABEL_365:
      *(_DWORD *)(*((void *)this + 33) + 224) = 0;
      uint64_t v112 = *((void *)this + 33);
      int v113 = *(_DWORD *)(v112 + 224);
      *(_DWORD *)(v112 + 224) = 0;
      *(_DWORD *)(*((void *)this + 33) + 224) ^= 0xFFFFFFu;
      uint64_t v114 = *((void *)this + 33);
      int v115 = *(_DWORD *)(v114 + 224);
      *(_DWORD *)(v114 + 224) = v113;
      if (!*((void *)this + 1320) && !*((_DWORD *)this + 2678) && !*((_DWORD *)this + 2679)) {
        goto LABEL_356;
      }
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1320, 224, 0, 0xFFFFFFFFLL, 8, v115, 4);
      if (!result)
      {
LABEL_356:
        *(_DWORD *)(*((void *)this + 33) + 228) = 0;
        uint64_t v116 = *((void *)this + 33);
        int v117 = *(_DWORD *)(v116 + 228);
        *(_DWORD *)(v116 + 228) = 0;
        *(_DWORD *)(*((void *)this + 33) + 228) ^= 0xFFFFFFu;
        uint64_t v118 = *((void *)this + 33);
        int v119 = *(_DWORD *)(v118 + 228);
        *(_DWORD *)(v118 + 228) = v117;
        if (!*((void *)this + 1342) && !*((_DWORD *)this + 2722) && !*((_DWORD *)this + 2723)) {
          goto LABEL_357;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1342, 228, 0, 0xFFFFFFFFLL, 8, v119, 4);
        if (!result)
        {
LABEL_357:
          *(_DWORD *)(*((void *)this + 33) + 232) = 0;
          uint64_t v120 = *((void *)this + 33);
          int v121 = *(_DWORD *)(v120 + 232);
          *(_DWORD *)(v120 + 232) = 0;
          *(_DWORD *)(*((void *)this + 33) + 232) ^= 0xFFFFFFu;
          uint64_t v122 = *((void *)this + 33);
          int v123 = *(_DWORD *)(v122 + 232);
          *(_DWORD *)(v122 + 232) = v121;
          if (!*((void *)this + 1364) && !*((_DWORD *)this + 2766) && !*((_DWORD *)this + 2767)) {
            goto LABEL_358;
          }
          uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1364, 232, 0, 0xFFFFFFFFLL, 8, v123, 4);
          if (!result)
          {
LABEL_358:
            *(_DWORD *)(*((void *)this + 33) + 236) = 0;
            uint64_t v124 = *((void *)this + 33);
            int v125 = *(_DWORD *)(v124 + 236);
            *(_DWORD *)(v124 + 236) = 0;
            *(_DWORD *)(*((void *)this + 33) + 236) ^= 0xFFFFFFu;
            uint64_t v126 = *((void *)this + 33);
            int v127 = *(_DWORD *)(v126 + 236);
            *(_DWORD *)(v126 + 236) = v125;
            if (!*((void *)this + 1386) && !*((_DWORD *)this + 2810) && !*((_DWORD *)this + 2811)) {
              goto LABEL_359;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1386, 236, 0, 0xFFFFFFFFLL, 8, v127, 4);
            if (!result)
            {
LABEL_359:
              *(_DWORD *)(*((void *)this + 33) + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
              uint64_t v128 = *((void *)this + 33);
              int v129 = *(_DWORD *)(v128 + 240);
              *(_DWORD *)(v128 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
              *(_DWORD *)(*((void *)this + 33) + 240) ^= 0xFFFFFFu;
              uint64_t v130 = *((void *)this + 33);
              int v131 = *(_DWORD *)(v130 + 240);
              *(_DWORD *)(v130 + 24pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v129;
              if (!*((void *)this + 1408) && !*((_DWORD *)this + 2854) && !*((_DWORD *)this + 2855)) {
                goto LABEL_360;
              }
              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1408, 240, 0, 0xFFFFFFFFLL, 8, v131, 4);
              if (!result)
              {
LABEL_360:
                *(_DWORD *)(*((void *)this + 33) + 244) = 0;
                uint64_t v132 = *((void *)this + 33);
                int v133 = *(_DWORD *)(v132 + 244);
                *(_DWORD *)(v132 + 244) = 0;
                *(_DWORD *)(*((void *)this + 33) + 244) ^= 0xFFFFFFu;
                uint64_t v134 = *((void *)this + 33);
                int v135 = *(_DWORD *)(v134 + 244);
                *(_DWORD *)(v134 + 244) = v133;
                if (!*((void *)this + 924) && !*((_DWORD *)this + 1886) && !*((_DWORD *)this + 1887)) {
                  goto LABEL_361;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 924, 244, 0, 0xFFFFFFFFLL, 8, v135, 4);
                if (!result)
                {
LABEL_361:
                  *(_DWORD *)(*((void *)this + 33) + 248) = 0;
                  uint64_t v136 = *((void *)this + 33);
                  int v137 = *(_DWORD *)(v136 + 248);
                  *(_DWORD *)(v136 + 248) = 0;
                  *(_DWORD *)(*((void *)this + 33) + 248) ^= 0xFFFFFFu;
                  uint64_t v138 = *((void *)this + 33);
                  int v139 = *(_DWORD *)(v138 + 248);
                  *(_DWORD *)(v138 + 248) = v137;
                  int v140 = (char *)this + 176 * v344;
                  if (!*((void *)v140 + 946)
                    && !*((_DWORD *)this + 44 * v344 + 1930)
                    && !*((_DWORD *)this + 44 * v344 + 1931))
                  {
                    goto LABEL_362;
                  }
                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v140 + 946, 248, 0, 0xFFFFFFFFLL, 8, v139, 4);
                  if (!result)
                  {
LABEL_362:
                    *(_DWORD *)(*((void *)this + 33) + 252) = 0;
                    uint64_t v141 = *((void *)this + 33);
                    int v142 = *(_DWORD *)(v141 + 252);
                    *(_DWORD *)(v141 + 252) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 252) ^= 0xFFFFFFu;
                    uint64_t v143 = *((void *)this + 33);
                    int v144 = *(_DWORD *)(v143 + 252);
                    *(_DWORD *)(v143 + 252) = v142;
                    if (!*((void *)this + 1430) && !*((_DWORD *)this + 2898) && !*((_DWORD *)this + 2899)) {
                      goto LABEL_363;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1430, 252, 0, 0xFFFFFFFFLL, 8, v144, 4);
                    if (!result)
                    {
LABEL_363:
                      *(_DWORD *)(*((void *)this + 33) + 256) = 0;
                      uint64_t v145 = *((void *)this + 33);
                      int v146 = *(_DWORD *)(v145 + 256);
                      *(_DWORD *)(v145 + 256) = 0;
                      *(_DWORD *)(*((void *)this + 33) + 256) ^= 0xFFFFFFu;
                      uint64_t v147 = *((void *)this + 33);
                      int v148 = *(_DWORD *)(v147 + 256);
                      *(_DWORD *)(v147 + 256) = v146;
                      if (!*((void *)this + 1452) && !*((_DWORD *)this + 2942) && !*((_DWORD *)this + 2943)) {
                        goto LABEL_146;
                      }
                      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1452, 256, 0, 0xFFFFFFFFLL, 8, v148, 4);
                      if (!result)
                      {
LABEL_146:
                        *(_DWORD *)(*((void *)this + 33) + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 264) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 268) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 272) = 0;
                        uint64_t v149 = *((void *)this + 33);
                        if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                        {
                          int v150 = *(_DWORD *)(v149 + 264);
                          *(_DWORD *)(v149 + 264) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 264) ^= 0x1FFFFFFu;
                          uint64_t v151 = *((void *)this + 33);
                          int v152 = *(_DWORD *)(v151 + 264);
                          *(_DWORD *)(v151 + 264) = v150;
                          int v154 = (void *)(v343 + 8);
                          uint64_t v153 = *(void *)(v343 + 8);
                          if (v342)
                          {
                            if (v153 || *(_DWORD *)(v343 + 160) || *(_DWORD *)(v343 + 164))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v343 + 8), 264, *(_DWORD *)(v343 + 68), 0xFFFFFFFFLL, 7, v152, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v155 = *((void *)this + 33);
                            int v156 = *(_DWORD *)(v155 + 260);
                            *(_DWORD *)(v155 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 260) ^= 0x1FFFFFFu;
                            uint64_t v157 = *((void *)this + 33);
                            int v158 = *(_DWORD *)(v157 + 260);
                            *(_DWORD *)(v157 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v156;
                            if (*v154 || *(_DWORD *)(v343 + 160) || *(_DWORD *)(v343 + 164))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v154, 260, *(_DWORD *)(v343 + 80), 0xFFFFFFFFLL, 7, v158, 4);
                              if (result) {
                                return result;
                              }
                            }
                            if (!v339) {
                              goto LABEL_205;
                            }
                            uint64_t v159 = *((void *)this + 33);
                            int v160 = *(_DWORD *)(v159 + 272);
                            *(_DWORD *)(v159 + 272) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 272) ^= 0x1FFFFFFu;
                            uint64_t v161 = *((void *)this + 33);
                            int v162 = *(_DWORD *)(v161 + 272);
                            *(_DWORD *)(v161 + 272) = v160;
                            if (*(void *)v341 || *(_DWORD *)(v341 + 152) || *(_DWORD *)(v341 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v341, 272, *(_DWORD *)(v341 + 56), 0xFFFFFFFFLL, 7, v162, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v163 = *((void *)this + 33);
                            int v164 = *(_DWORD *)(v163 + 268);
                            *(_DWORD *)(v163 + 268) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 268) ^= 0x1FFFFFFu;
                            uint64_t v165 = *((void *)this + 33);
                            int v166 = *(_DWORD *)(v165 + 268);
                            *(_DWORD *)(v165 + 268) = v164;
                            if (!*(void *)v341 && !*(_DWORD *)(v341 + 152) && !*(_DWORD *)(v341 + 156)) {
                              goto LABEL_205;
                            }
                            unsigned int v167 = (void *)v341;
                            int v168 = *(_DWORD *)(v341 + 68);
                            uint64_t v169 = this;
                          }
                          else
                          {
                            if (v153 || *(_DWORD *)(v343 + 160) || *(_DWORD *)(v343 + 164))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v343 + 8), 264, *(_DWORD *)(v343 + 60), 0xFFFFFFFFLL, 7, v152, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v190 = *((void *)this + 33);
                            int v191 = *(_DWORD *)(v190 + 272);
                            *(_DWORD *)(v190 + 272) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 272) ^= 0x1FFFFFFu;
                            uint64_t v192 = *((void *)this + 33);
                            int v193 = *(_DWORD *)(v192 + 272);
                            *(_DWORD *)(v192 + 272) = v191;
                            if (*v154 || *(_DWORD *)(v343 + 160) || *(_DWORD *)(v343 + 164))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v154, 272, *(_DWORD *)(v343 + 64), 0xFFFFFFFFLL, 7, v193, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v194 = *((void *)this + 33);
                            int v195 = *(_DWORD *)(v194 + 260);
                            *(_DWORD *)(v194 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 260) ^= 0x1FFFFFFu;
                            uint64_t v196 = *((void *)this + 33);
                            int v197 = *(_DWORD *)(v196 + 260);
                            *(_DWORD *)(v196 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v195;
                            if (*v154 || *(_DWORD *)(v343 + 160) || *(_DWORD *)(v343 + 164))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v154, 260, *(_DWORD *)(v343 + 72), 0xFFFFFFFFLL, 7, v197, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v198 = *((void *)this + 33);
                            int v199 = *(_DWORD *)(v198 + 268);
                            *(_DWORD *)(v198 + 268) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 268) ^= 0x1FFFFFFu;
                            uint64_t v200 = *((void *)this + 33);
                            int v166 = *(_DWORD *)(v200 + 268);
                            *(_DWORD *)(v200 + 268) = v199;
                            if (!*v154 && !*(_DWORD *)(v343 + 160) && !*(_DWORD *)(v343 + 164)) {
                              goto LABEL_205;
                            }
                            int v168 = *(_DWORD *)(v343 + 76);
                            uint64_t v169 = this;
                            unsigned int v167 = (void *)(v343 + 8);
                          }
                          int v189 = 268;
                        }
                        else
                        {
                          int v173 = *(_DWORD *)(v149 + 260);
                          *(_DWORD *)(v149 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 260) ^= 0x1FFFFFFu;
                          uint64_t v174 = *((void *)this + 33);
                          int v175 = *(_DWORD *)(v174 + 260);
                          *(_DWORD *)(v174 + 26pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v173;
                          int v176 = (char *)this + 176 * v344;
                          if (*((void *)v176 + 66)
                            || *((_DWORD *)this + 44 * v344 + 170)
                            || *((_DWORD *)this + 44 * v344 + 171))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v176 + 66, 260, 0, 0xFFFFFFFFLL, 7, v175, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v177 = *((void *)this + 33);
                          int v178 = *(_DWORD *)(v177 + 264);
                          *(_DWORD *)(v177 + 264) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 264) ^= 0x1FFFFFFu;
                          uint64_t v179 = *((void *)this + 33);
                          int v180 = *(_DWORD *)(v179 + 264);
                          *(_DWORD *)(v179 + 264) = v178;
                          if (*(void *)(v343 + 8) || *(_DWORD *)(v343 + 160) || *(_DWORD *)(v343 + 164))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v343 + 8), 264, *(_DWORD *)(v343 + 60), 0xFFFFFFFFLL, 7, v180, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v181 = *((void *)this + 33);
                          int v182 = *(_DWORD *)(v181 + 268);
                          *(_DWORD *)(v181 + 268) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 268) ^= 0x1FFFFFFu;
                          uint64_t v183 = *((void *)this + 33);
                          int v184 = *(_DWORD *)(v183 + 268);
                          *(_DWORD *)(v183 + 268) = v182;
                          char v185 = (char *)this + 176 * v344;
                          if (*((void *)v185 + 418)
                            || *((_DWORD *)this + 44 * v344 + 874)
                            || *((_DWORD *)this + 44 * v344 + 875))
                          {
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v185 + 418, 268, 0, 0xFFFFFFFFLL, 7, v184, 4);
                            if (result) {
                              return result;
                            }
                          }
                          uint64_t v186 = *((void *)this + 33);
                          int v187 = *(_DWORD *)(v186 + 272);
                          *(_DWORD *)(v186 + 272) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 272) ^= 0x1FFFFFFu;
                          uint64_t v188 = *((void *)this + 33);
                          int v166 = *(_DWORD *)(v188 + 272);
                          *(_DWORD *)(v188 + 272) = v187;
                          if (!*(void *)(v343 + 8) && !*(_DWORD *)(v343 + 160) && !*(_DWORD *)(v343 + 164)) {
                            goto LABEL_205;
                          }
                          int v168 = *(_DWORD *)(v343 + 64);
                          uint64_t v169 = this;
                          unsigned int v167 = (void *)(v343 + 8);
                          int v189 = 272;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)v169, v167, v189, v168, 0xFFFFFFFFLL, 7, v166, 4);
                        if (result) {
                          return result;
                        }
LABEL_205:
                        if (!(*(_DWORD *)(v12 + 76) & 0x2000 | v340))
                        {
                          *(_DWORD *)(v12 + 76) |= 0x2000u;
                          *((_DWORD *)this + v344 + 116) = 1;
                          *(_DWORD *)(*((void *)this + 33) + 276) = 0;
                          goto LABEL_273;
                        }
                        *((_DWORD *)this + v344 + 116) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 276) = 0;
                        if (!v340)
                        {
LABEL_273:
                          *(_DWORD *)(*((void *)this + 33) + 436) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 444) = 0;
                          *(_DWORD *)(*((void *)this + 33) + 448) = 0;
                          if (!v348) {
                            goto LABEL_298;
                          }
                          uint64_t v266 = *((void *)this + 32);
                          if (v337 && v336 == 2)
                          {
                            int v267 = *(_DWORD *)(*(void *)(v266 + 8360) + 60);
                            uint64_t v268 = *((void *)this + 33);
                            int v269 = *(_DWORD *)(v268 + 436);
                            *(_DWORD *)(v268 + 436) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 436) ^= 0xFFFFFFu;
                            uint64_t v270 = *((void *)this + 33);
                            int v271 = *(_DWORD *)(v270 + 436);
                            *(_DWORD *)(v270 + 436) = v269;
                            uint64_t v272 = *(void *)(*((void *)this + 32) + 8360);
                            if (*(void *)v272 || *(_DWORD *)(v272 + 152) || *(_DWORD *)(v272 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v272, 436, v267, 0xFFFFFFFFLL, 8, v271, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v273 = *((void *)this + 33);
                            int v274 = *(_DWORD *)(v273 + 444);
                            *(_DWORD *)(v273 + 444) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 444) ^= 0xC0000000;
                            uint64_t v275 = *((void *)this + 33);
                            int v276 = *(_DWORD *)(v275 + 444);
                            *(_DWORD *)(v275 + 444) = v274;
                            uint64_t v277 = *(void *)(*((void *)this + 32) + 8360);
                            if (*(void *)v277 || *(_DWORD *)(v277 + 152) || *(_DWORD *)(v277 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v277, 444, v267, 192, 6, v276, 4);
                              if (result) {
                                return result;
                              }
                            }
                            if (v339)
                            {
                              int v278 = *(_DWORD *)(v341 + 56);
                              uint64_t v279 = *((void *)this + 33);
                              int v280 = *(_DWORD *)(v279 + 440);
                              *(_DWORD *)(v279 + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 440) ^= 0xFFFFFFu;
                              uint64_t v281 = *((void *)this + 33);
                              int v282 = *(_DWORD *)(v281 + 440);
                              *(_DWORD *)(v281 + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v280;
                              if (*(void *)v341 || *(_DWORD *)(v341 + 152) || *(_DWORD *)(v341 + 156))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v341, 440, v278, 0xFFFFFFFFLL, 8, v282, 4);
                                if (result) {
                                  return result;
                                }
                              }
                              uint64_t v283 = *((void *)this + 33);
                              int v284 = *(_DWORD *)(v283 + 448);
                              *(_DWORD *)(v283 + 448) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 448) ^= 0xC0000000;
                              uint64_t v285 = *((void *)this + 33);
                              int v286 = *(_DWORD *)(v285 + 448);
                              *(_DWORD *)(v285 + 448) = v284;
                              if (*(void *)v341 || *(_DWORD *)(v341 + 152) || *(_DWORD *)(v341 + 156))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v341, 448, v278, 192, 6, v286, 4);
                                if (result) {
                                  return result;
                                }
                              }
                            }
                            if (v335)
                            {
                              *(_DWORD *)(*((void *)this + 33) + 444) = *(_DWORD *)(*((void *)this + 33) + 444) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 84) >> 6) & 0xFFF));
                              if (v339)
                              {
                                uint64_t v287 = v341;
LABEL_296:
                                uint64_t v288 = (_DWORD *)(v287 + 80);
LABEL_297:
                                *(_DWORD *)(*((void *)this + 33) + 448) = *(_DWORD *)(*((void *)this + 33) + 448) & 0xFFFF8003 | (4 * ((*v288 >> 6) & 0x1FFF));
                              }
LABEL_298:
                              if (*v69)
                              {
                                unint64_t v289 = 0;
                                uint64_t v290 = v346 + 9856 * v347;
                                unsigned __int16 v291 = *(_WORD *)(v290 + 56) + 1;
                                uint64_t v292 = *((void *)this + 33);
                                *(_WORD *)(v292 + 452) = v291;
                                uint64_t v293 = v290 + 9676;
                                do
                                {
                                  *(_WORD *)(v292 + 2 * v289 + 456) = *(_DWORD *)(v293 + 4 * v289);
                                  BOOL v294 = v289++ >= v291;
                                }
                                while (!v294);
                                unint64_t v295 = 0;
                                uint64_t v296 = v346 + 9856 * v347;
                                unsigned __int16 v297 = *(_WORD *)(v296 + 60) + 1;
                                *(_WORD *)(v292 + 454) = v297;
                                uint64_t v298 = v296 + 9760;
                                do
                                {
                                  *(_WORD *)(v292 + 2 * v295 + 498) = *(_DWORD *)(v298 + 4 * v295);
                                  BOOL v294 = v295++ >= v297;
                                }
                                while (!v294);
                              }
                              else
                              {
                                uint64_t v292 = *((void *)this + 33);
                                *(_DWORD *)(v292 + 452) = 65537;
                                *(_WORD *)(v292 + 456) = 0;
                                uint64_t v301 = v350 + 23176 * v94;
                                *(_WORD *)(v292 + 458) = *(_DWORD *)(v301 + 22880);
                                *(_WORD *)(v292 + 498) = 0;
                                *(_WORD *)(v292 + 50pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(v301 + 22888);
                              }
                              uint64_t v302 = *((void *)this + 32);
                              if (*(_DWORD *)(v302 + 2360) != 1) {
                                return 0;
                              }
                              *(_DWORD *)(v292 + 548) = *(_DWORD *)(v292 + 548) & 0xFFFFFFFE | *(_DWORD *)(v302 + 2508) & 1;
                              if (*(_DWORD *)(v302 + 2508))
                              {
                                *(_DWORD *)(v292 + 2548) = 0x10000000;
                                *(_DWORD *)(v292 + 2552) = *(_DWORD *)(v302 + 2368);
                                *(void *)(v292 + 256pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                *(_DWORD *)(v292 + 2556) = 0;
                                *(_OWORD *)(v292 + 2568) = *(_OWORD *)(v302 + 2372);
                                long long v303 = *(_OWORD *)(v302 + 2388);
                                *(_OWORD *)(v292 + 260pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v302 + 2404);
                                *(_OWORD *)(v292 + 2584) = v303;
                              }
                              *(_DWORD *)(*((void *)this + 33) + 548) = *(_DWORD *)(*((void *)this + 33) + 548) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v302 + 2512) & 1));
                              if (*(_DWORD *)(v302 + 2512))
                              {
                                *(_DWORD *)(v292 + 2616) = 0;
                                char v304 = *(_DWORD *)(v302 + 2424);
                                *(_DWORD *)(v292 + 2616) = (*(_DWORD *)(v302 + 2424) & 1) << 22;
                                int v305 = ((*(_DWORD *)(v302 + 2420) & 1) << 23) | ((v304 & 1) << 22) | 0x20000000;
                                *(_DWORD *)(v292 + 2616) = v305;
                                *(_DWORD *)(v292 + 2616) = v305 | (*(_DWORD *)(v302 + 2364) == 0);
                                long long v306 = *(_OWORD *)(v302 + 2428);
                                long long v307 = *(_OWORD *)(v302 + 2444);
                                *(_OWORD *)(v292 + 2652) = *(_OWORD *)(v302 + 2460);
                                *(_OWORD *)(v292 + 2636) = v307;
                                *(_OWORD *)(v292 + 262pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v306;
                              }
                              *(_DWORD *)(*((void *)this + 33) + 548) = *(_DWORD *)(*((void *)this + 33) + 548) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v302 + 2516) & 1));
                              *(_DWORD *)(*((void *)this + 33) + 548) = *(_DWORD *)(*((void *)this + 33) + 548) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v302 + 2520) & 1));
                              *(_DWORD *)(*((void *)this + 33) + 548) = *(_DWORD *)(*((void *)this + 33) + 548) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v302 + 2524) & 1));
                              if (!*(_DWORD *)(v302 + 2516)) {
                                return 0;
                              }
                              *(_DWORD *)(v292 + 2672) = 0;
                              if (*(_DWORD *)(v302 + 2476) == 2) {
                                int v308 = 805306368;
                              }
                              else {
                                int v308 = 813694976;
                              }
                              *(_DWORD *)(v292 + 2672) = v308;
                              memcpy((void *)(v292 + 2676), (const void *)(v302 + 2480), 4 * *(unsigned int *)(v302 + 2476));
                              uint64_t result = 0;
                              *(_DWORD *)(v302 + 2516) = 0;
                              return result;
                            }
                            if (CAHDecLotusHevc::getSWRStride(this, *(unsigned __int16 *)(v12 + 148)- *(unsigned __int16 *)(v12 + 144)+ 1, *(_DWORD *)(v350 + 23176 * v94 + 3636), *(_DWORD *)(v350 + 23176 * v94 + 3640), *(_DWORD *)(v350 + 23176 * v94 + 22852)))return 0xFFFFFFFFLL; {
                            *(_DWORD *)(*((void *)this + 33) + 444) = *(_DWORD *)(*((void *)this + 33) + 444) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 2956) >> 6) & 0xFFF));
                            }
                            if (!v339) {
                              goto LABEL_298;
                            }
LABEL_351:
                            uint64_t v288 = (_DWORD *)((char *)this + 11828);
                            goto LABEL_297;
                          }
                          int v299 = *(unsigned __int8 *)(v266 + 3004);
                          if (*(unsigned char *)(v266 + 3004))
                          {
                            int v300 = *(_DWORD *)(v266 + 3016);
                            int v299 = *(_DWORD *)(v266 + 3020);
                          }
                          else
                          {
                            int v300 = 0;
                          }
                          uint64_t v309 = *(void *)(v266 + 8360);
                          int v310 = *(_DWORD *)(v309 + 52);
                          int v311 = v310 + v300;
                          if (__CFADD__(v310, v300))
                          {
                            int v312 = 1;
                          }
                          else
                          {
                            int v313 = *(_DWORD *)(v309 + 56);
                            int v314 = v313 + v299;
                            if (!__CFADD__(v313, v299))
                            {
                              uint64_t v315 = *((void *)this + 33);
                              int v316 = *(_DWORD *)(v315 + 436);
                              *(_DWORD *)(v315 + 436) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 436) ^= 0xFFFFFFu;
                              uint64_t v317 = *((void *)this + 33);
                              int v318 = *(_DWORD *)(v317 + 436);
                              *(_DWORD *)(v317 + 436) = v316;
                              uint64_t v319 = *(void *)(*((void *)this + 32) + 8360);
                              if (*(void *)v319 || *(_DWORD *)(v319 + 152) || *(_DWORD *)(v319 + 156))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v319, 436, v311, 0xFFFFFFFFLL, 8, v318, 4);
                                if (result) {
                                  return result;
                                }
                              }
                              uint64_t v320 = *((void *)this + 33);
                              int v321 = *(_DWORD *)(v320 + 440);
                              *(_DWORD *)(v320 + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 440) ^= 0xFFFFFFu;
                              uint64_t v322 = *((void *)this + 33);
                              int v323 = *(_DWORD *)(v322 + 440);
                              *(_DWORD *)(v322 + 44pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v321;
                              uint64_t v324 = *(void *)(*((void *)this + 32) + 8360);
                              if (*(void *)v324 || *(_DWORD *)(v324 + 152) || *(_DWORD *)(v324 + 156))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v324, 440, v314, 0xFFFFFFFFLL, 8, v323, 4);
                                if (result) {
                                  return result;
                                }
                              }
                              uint64_t v325 = *((void *)this + 33);
                              int v326 = *(_DWORD *)(v325 + 444);
                              *(_DWORD *)(v325 + 444) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 444) ^= 0xC0000000;
                              uint64_t v327 = *((void *)this + 33);
                              int v328 = *(_DWORD *)(v327 + 444);
                              *(_DWORD *)(v327 + 444) = v326;
                              uint64_t v329 = *(void *)(*((void *)this + 32) + 8360);
                              if (*(void *)v329 || *(_DWORD *)(v329 + 152) || *(_DWORD *)(v329 + 156))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v329, 444, v311, 192, 6, v328, 4);
                                if (result) {
                                  return result;
                                }
                              }
                              uint64_t v330 = *((void *)this + 33);
                              int v331 = *(_DWORD *)(v330 + 448);
                              *(_DWORD *)(v330 + 448) = 0;
                              *(_DWORD *)(*((void *)this + 33) + 448) ^= 0xC0000000;
                              uint64_t v332 = *((void *)this + 33);
                              int v333 = *(_DWORD *)(v332 + 448);
                              *(_DWORD *)(v332 + 448) = v331;
                              uint64_t v334 = *(void *)(*((void *)this + 32) + 8360);
                              if (*(void *)v334 || *(_DWORD *)(v334 + 152) || *(_DWORD *)(v334 + 156))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v334, 448, v314, 192, 6, v333, 4);
                                if (result) {
                                  return result;
                                }
                              }
                              if (v335)
                              {
                                *(_DWORD *)(*((void *)this + 33) + 444) = *(_DWORD *)(*((void *)this + 33) + 444) & 0xFFFFC003 | (4 * ((*(_DWORD *)(*(void *)(*((void *)this + 32) + 8360) + 76) >> 6) & 0xFFF));
                                uint64_t v287 = *(void *)(*((void *)this + 32) + 8360);
                                goto LABEL_296;
                              }
                              if (CAHDecLotusHevc::getSWRStride(this, *(unsigned __int16 *)(v12 + 148)- *(unsigned __int16 *)(v12 + 144)+ 1, *(_DWORD *)(v350 + 23176 * v94 + 3636), *(_DWORD *)(v350 + 23176 * v94 + 3640), *(_DWORD *)(v350 + 23176 * v94 + 22852)))return 0xFFFFFFFFLL; {
                              *(_DWORD *)(*((void *)this + 33) + 444) = *(_DWORD *)(*((void *)this + 33) + 444) & 0xFFFFC003 | (4 * ((*((_DWORD *)this + 2956) >> 6) & 0xFFF));
                              }
                              goto LABEL_351;
                            }
                            int v312 = 2;
                          }
                          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                            return 0xFFFFFFFFLL;
                          }
                          *(_DWORD *)buf = 136315394;
                          *(void *)&uint8_t buf[4] = "populatePictureRegisters";
                          *(_WORD *)&unsigned char buf[12] = 1024;
                          *(_DWORD *)&buf[14] = v312;
                          int v29 = &_os_log_internal;
                          uint64_t v30 = "AppleAVD: %s(): failKind = %d";
                          int v171 = buf;
                          uint32_t v172 = 18;
                          goto LABEL_168;
                        }
                        uint64_t v201 = 0;
                        int v202 = (uint64_t *)v364;
                        int v203 = (void **)v363;
                        int v204 = (void **)v362;
                        while (1)
                        {
                          uint64_t v205 = *v202;
                          if (!*v202 || !*(void *)(v205 + 48)) {
                            return 0xFFFFFFFFLL;
                          }
                          int v206 = v349;
                          if (v349)
                          {
                            uint64_t v207 = *(unsigned int *)(v205 + 44);
                            *(void *)buf = 0;
                            if (((*(uint64_t (**)(void, uint64_t, uint8_t *))(**((void **)this + 32)
                                                                                        + 304))(*((void *)this + 32), v207, buf) & 1) == 0)
                            {
                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                                return 0xFFFFFFFFLL;
                              }
                              __int16 v351 = 0;
                              int v29 = &_os_log_internal;
                              uint64_t v30 = "AppleAVD: decodeGetRenderTargetRef RETURNED ERROR\n";
                              int v171 = (uint8_t *)&v351;
                              uint32_t v172 = 2;
                              goto LABEL_168;
                            }
                            *(void *)(v205 + 48) = *(void *)buf + 8;
                            int v206 = 0x2000000;
                          }
                          *(_DWORD *)(*((void *)this + 33) + v201 + 276) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v201 + 276) = *(_DWORD *)(*((void *)this + 33)
                                                                                       + v201
                                                                                       + 276) & 0xFFFFFFF | ((v340 << 28) - 0x10000000);
                          *(_DWORD *)(*((void *)this + 33) + v201 + 276) &= 0xF3FFFFFF;
                          *(_DWORD *)(*((void *)this + 33) + v201 + 276) = *(_DWORD *)(*((void *)this + 33)
                                                                                       + v201
                                                                                       + 276) & 0xFDFFFFFF | v206;
                          *(_DWORD *)(*((void *)this + 33) + v201 + 276) |= 0x1000000u;
                          int v208 = v338 - *(_DWORD *)(v205 + 12);
                          int v209 = v208 & 0x1FFFF;
                          if (v208 < -32768) {
                            int v209 = 98304;
                          }
                          if (v208 <= 0x8000) {
                            int v210 = v209;
                          }
                          else {
                            int v210 = 0x8000;
                          }
                          *(_DWORD *)(*((void *)this + 33) + v201 + 276) = *(_DWORD *)(*((void *)this + 33)
                                                                                       + v201
                                                                                       + 276) & 0xFFFE0000 | v210;
                          *(_DWORD *)(*((void *)this + 33) + v201 + 276) = *(_DWORD *)(*((void *)this + 33)
                                                                                       + v201
                                                                                       + 276) & 0xFFFDFFFF | ((*(_DWORD *)(v205 + 20) == 2) << 17);
                          *(_DWORD *)(*((void *)this + 33) + v201 + 308) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v201 + 34pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v201 + 372) = 0;
                          *(_DWORD *)(*((void *)this + 33) + v201 + 404) = 0;
                          uint64_t v211 = *((void *)this + 33);
                          if (*(_DWORD *)(*((void *)this + 32) + 2648) == 1)
                          {
                            int v212 = v201 + 340;
                            uint64_t v213 = v211 + v201;
                            int v214 = *(_DWORD *)(v213 + 340);
                            *(_DWORD *)(v213 + 34pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v201 + 340) ^= 0x1FFFFFFu;
                            uint64_t v215 = *((void *)this + 33) + v201;
                            int v216 = *(_DWORD *)(v215 + 340);
                            *(_DWORD *)(v215 + 34pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v214;
                            uint64_t v217 = *(uint64_t **)(v205 + 48);
                            uint64_t v218 = *v217;
                            if (v342)
                            {
                              if (v218 || *((_DWORD *)v217 + 38) || *((_DWORD *)v217 + 39))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v217, v212, *((_DWORD *)v217 + 15), 0xFFFFFFFFLL, 7, v216, 4);
                                if (result) {
                                  return result;
                                }
                              }
                              uint64_t v219 = *((void *)this + 33) + v201;
                              int v220 = *(_DWORD *)(v219 + 308);
                              *(_DWORD *)(v219 + 308) = 0;
                              *(_DWORD *)(*((void *)this + 33) + v201 + 308) ^= 0x1FFFFFFu;
                              uint64_t v221 = *((void *)this + 33) + v201;
                              int v222 = *(_DWORD *)(v221 + 308);
                              *(_DWORD *)(v221 + 308) = v220;
                              uint64_t v223 = *(void *)(v205 + 48);
                              if (*(void *)v223 || *(_DWORD *)(v223 + 152) || *(_DWORD *)(v223 + 156))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v223, (int)v201 + 308, *(_DWORD *)(v223 + 72), 0xFFFFFFFFLL, 7, v222, 4);
                                if (result) {
                                  return result;
                                }
                              }
                              if (v339)
                              {
                                uint64_t v224 = *((void *)this + 33) + v201;
                                int v225 = *(_DWORD *)(v224 + 404);
                                *(_DWORD *)(v224 + 404) = 0;
                                *(_DWORD *)(*((void *)this + 33) + v201 + 404) ^= 0x1FFFFFFu;
                                uint64_t v226 = *((void *)this + 33) + v201;
                                int v227 = *(_DWORD *)(v226 + 404);
                                *(_DWORD *)(v226 + 404) = v225;
                                if (*(void *)v341 || *(_DWORD *)(v341 + 152) || *(_DWORD *)(v341 + 156))
                                {
                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v341, (int)v201 + 404, *(_DWORD *)(v341 + 56), 0xFFFFFFFFLL, 7, v227, 4);
                                  if (result) {
                                    return result;
                                  }
                                }
                                uint64_t v228 = *((void *)this + 33) + v201;
                                int v229 = *(_DWORD *)(v228 + 372);
                                *(_DWORD *)(v228 + 372) = 0;
                                *(_DWORD *)(*((void *)this + 33) + v201 + 372) ^= 0x1FFFFFFu;
                                uint64_t v230 = *((void *)this + 33) + v201;
                                int v231 = *(_DWORD *)(v230 + 372);
                                *(_DWORD *)(v230 + 372) = v229;
                                if (*(void *)v341 || *(_DWORD *)(v341 + 152) || *(_DWORD *)(v341 + 156))
                                {
                                  int v232 = v201 + 372;
                                  uint64_t v233 = v341;
LABEL_270:
                                  int v252 = *(_DWORD *)(v233 + 68);
LABEL_271:
                                  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v233, v232, v252, 0xFFFFFFFFLL, 7, v231, 4);
                                  if (result) {
                                    return result;
                                  }
                                }
                              }
                            }
                            else
                            {
                              if (v218 || *((_DWORD *)v217 + 38) || *((_DWORD *)v217 + 39))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v217, v212, *((_DWORD *)v217 + 13), 0xFFFFFFFFLL, 7, v216, 4);
                                if (result) {
                                  return result;
                                }
                              }
                              uint64_t v253 = *((void *)this + 33) + v201;
                              int v254 = *(_DWORD *)(v253 + 404);
                              *(_DWORD *)(v253 + 404) = 0;
                              *(_DWORD *)(*((void *)this + 33) + v201 + 404) ^= 0x1FFFFFFu;
                              uint64_t v255 = *((void *)this + 33) + v201;
                              int v256 = *(_DWORD *)(v255 + 404);
                              *(_DWORD *)(v255 + 404) = v254;
                              uint64_t v257 = *(void *)(v205 + 48);
                              if (*(void *)v257 || *(_DWORD *)(v257 + 152) || *(_DWORD *)(v257 + 156))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v257, (int)v201 + 404, *(_DWORD *)(v257 + 56), 0xFFFFFFFFLL, 7, v256, 4);
                                if (result) {
                                  return result;
                                }
                              }
                              uint64_t v258 = *((void *)this + 33) + v201;
                              int v259 = *(_DWORD *)(v258 + 308);
                              *(_DWORD *)(v258 + 308) = 0;
                              *(_DWORD *)(*((void *)this + 33) + v201 + 308) ^= 0x1FFFFFFu;
                              uint64_t v260 = *((void *)this + 33) + v201;
                              int v261 = *(_DWORD *)(v260 + 308);
                              *(_DWORD *)(v260 + 308) = v259;
                              uint64_t v262 = *(void *)(v205 + 48);
                              if (*(void *)v262 || *(_DWORD *)(v262 + 152) || *(_DWORD *)(v262 + 156))
                              {
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v262, (int)v201 + 308, *(_DWORD *)(v262 + 64), 0xFFFFFFFFLL, 7, v261, 4);
                                if (result) {
                                  return result;
                                }
                              }
                              uint64_t v263 = *((void *)this + 33) + v201;
                              int v264 = *(_DWORD *)(v263 + 372);
                              *(_DWORD *)(v263 + 372) = 0;
                              *(_DWORD *)(*((void *)this + 33) + v201 + 372) ^= 0x1FFFFFFu;
                              uint64_t v265 = *((void *)this + 33) + v201;
                              int v231 = *(_DWORD *)(v265 + 372);
                              *(_DWORD *)(v265 + 372) = v264;
                              uint64_t v233 = *(void *)(v205 + 48);
                              if (*(void *)v233 || *(_DWORD *)(v233 + 152) || *(_DWORD *)(v233 + 156))
                              {
                                int v232 = v201 + 372;
                                goto LABEL_270;
                              }
                            }
                          }
                          else
                          {
                            uint64_t v234 = v211 + v201;
                            int v235 = *(_DWORD *)(v234 + 308);
                            *(_DWORD *)(v234 + 308) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v201 + 308) ^= 0x1FFFFFFu;
                            uint64_t v236 = *((void *)this + 33) + v201;
                            int v237 = *(_DWORD *)(v236 + 308);
                            *(_DWORD *)(v236 + 308) = v235;
                            int v238 = *v203;
                            if (**v203 || *((_DWORD *)v238 + 38) || *((_DWORD *)v238 + 39))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v238, (int)v201 + 308, 0, 0xFFFFFFFFLL, 7, v237, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v239 = *((void *)this + 33) + v201;
                            int v240 = *(_DWORD *)(v239 + 340);
                            *(_DWORD *)(v239 + 34pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v201 + 340) ^= 0x1FFFFFFu;
                            uint64_t v241 = *((void *)this + 33) + v201;
                            int v242 = *(_DWORD *)(v241 + 340);
                            *(_DWORD *)(v241 + 34pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v240;
                            uint64_t v243 = *(void *)(v205 + 48);
                            if (*(void *)v243 || *(_DWORD *)(v243 + 152) || *(_DWORD *)(v243 + 156))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v243, (int)v201 + 340, *(_DWORD *)(v243 + 52), 0xFFFFFFFFLL, 7, v242, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v244 = *((void *)this + 33) + v201;
                            int v245 = *(_DWORD *)(v244 + 372);
                            *(_DWORD *)(v244 + 372) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v201 + 372) ^= 0x1FFFFFFu;
                            uint64_t v246 = *((void *)this + 33) + v201;
                            int v247 = *(_DWORD *)(v246 + 372);
                            *(_DWORD *)(v246 + 372) = v245;
                            uint64_t v248 = *v204;
                            if (**v204 || *((_DWORD *)v248 + 38) || *((_DWORD *)v248 + 39))
                            {
                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v248, (int)v201 + 372, 0, 0xFFFFFFFFLL, 7, v247, 4);
                              if (result) {
                                return result;
                              }
                            }
                            uint64_t v249 = *((void *)this + 33) + v201;
                            int v250 = *(_DWORD *)(v249 + 404);
                            *(_DWORD *)(v249 + 404) = 0;
                            *(_DWORD *)(*((void *)this + 33) + v201 + 404) ^= 0x1FFFFFFu;
                            uint64_t v251 = *((void *)this + 33) + v201;
                            int v231 = *(_DWORD *)(v251 + 404);
                            *(_DWORD *)(v251 + 404) = v250;
                            uint64_t v233 = *(void *)(v205 + 48);
                            if (*(void *)v233 || *(_DWORD *)(v233 + 152) || *(_DWORD *)(v233 + 156))
                            {
                              int v232 = v201 + 404;
                              int v252 = *(_DWORD *)(v233 + 56);
                              goto LABEL_271;
                            }
                          }
                          v201 += 4;
                          ++v202;
                          ++v203;
                          ++v204;
                          if (4 * v340 == v201) {
                            goto LABEL_273;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAHDecLotusHevc::getSWRStride(CAHDecLotusHevc *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 32) + 2644);
  *((void *)this + 1478) = 0;
  if (!v5) {
    return 0;
  }
  if (a3 <= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  unsigned int v7 = (v6 + 1) & 0xFFFFFFFE;
  if (v5 == 1) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = (v7 + 7) & 0xFFFFFFF8;
  }
  switch(v8)
  {
    case 0u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 2 * a2;
      goto LABEL_17;
    case 2u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (((2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((2863311531u * (unint64_t)(2 * a2 / a5 + 5)) >> 32)) & 0xFFFFFFF8;
      goto LABEL_18;
    case 4u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (((2 * ((3435973837u * (unint64_t)(a2 + 4)) >> 32)) & 0xFFFFFFF8)
                                + 63) & 0xFFFFFFC0;
      int v12 = (2 * ((3435973837u * (unint64_t)(2 * a2 / a5 + 9)) >> 32)) & 0xFFFFFFF0;
      goto LABEL_18;
    case 8u:
      uint64_t result = 0;
      *((_DWORD *)this + 2956) = (2 * a2 + 63) & 0xFFFFFFC0;
      unsigned int v11 = 4 * a2;
LABEL_17:
      int v12 = v11 / a5;
LABEL_18:
      *((_DWORD *)this + 2957) = (v12 + 63) & 0xFFFFFFC0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315394;
        unsigned int v14 = "getSWRStride";
        __int16 v15 = 1024;
        unsigned int v16 = v8 + 8;
        _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): bad swr bit depth %d\n", (uint8_t *)&v13, 0x12u);
      }
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t CAHDecLotusHevc::getTileStartCTU(CAHDecLotusHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 452);
  return v3[a2 % *v3 + 2] + v3[a2 / *v3 + 23] * a3;
}

uint64_t CAHDecLotusHevc::getTileEndCTU(CAHDecLotusHevc *this, unsigned int a2, int a3)
{
  int v3 = (unsigned __int16 *)(*((void *)this + 33) + 452);
  return v3[a2 % *v3 + 3] + (v3[a2 / *v3 + 24] - 1) * a3 - 1;
}

uint64_t CAHDecLotusHevc::getTileIdxAbove(CAHDecLotusHevc *this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 33) + 452);
  if (a2 % v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = a2 % v2 + (a2 / v2 - 1) * v2;
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t CAHDecLotusHevc::populateAvdWork(CAHDecLotusHevc *this, unsigned int a2)
{
  v118[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 32);
  uint64_t v4 = *((void *)this + 33);
  int v5 = *(_DWORD *)(v3 + 8320);
  int v6 = *(_DWORD *)(v3 + 8324);
  uint64_t v7 = *(void *)(v3 + 8280);
  uint64_t v8 = *(void *)(v3 + 8288);
  uint64_t v84 = *(void *)(v3 + 8296);
  int v9 = *(_DWORD *)(v3 + 9036);
  unsigned int v10 = *(_DWORD *)(v3 + 3068);
  int v11 = *(_DWORD *)(v3 + 3072);
  uint64_t v101 = v4 + 216292;
  v118[0] = v4 + 216292;
  v118[1] = v4 + 306404;
  uint64_t v81 = v4 + 306404;
  uint64_t v82 = v4;
  uint64_t v117 = 0;
  uint64_t v12 = v7 + 23176 * v5;
  unsigned int v13 = *(_DWORD *)(v12 + 22888);
  int v14 = *(unsigned __int16 *)(v4 + 452);
  int v15 = *(unsigned __int16 *)(v4 + 454);
  if (v9)
  {
    if (*(unsigned char *)(v8 + 9856 * v6 + 53)) {
      BOOL v17 = v13 > 1;
    }
    else {
      BOOL v17 = 0;
    }
    int v16 = v17 && v11 == 0;
  }
  else
  {
    int v16 = 0;
  }
  unsigned int v99 = v15 * v14;
  if ((v9 & 2) != 0 && *(unsigned char *)(v8 + 9856 * v6 + 52))
  {
    if (*(unsigned char *)(v8 + 9856 * v6 + 53)) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v99 > 1;
    }
    int v21 = v19 && v11 == 0;
    int v110 = v21;
  }
  else
  {
    int v110 = 0;
  }
  unsigned __int16 v86 = (unsigned int *)(v12 + 22880);
  if ((v9 & 0x20) != 0 && !*(unsigned char *)(v8 + 9856 * v6 + 53))
  {
    if (*(unsigned char *)(v8 + 9856 * v6 + 52)) {
      BOOL v67 = 0;
    }
    else {
      BOOL v67 = v10 > 1;
    }
    int v69 = v67 && v11 == 0;
    int v96 = v69;
  }
  else
  {
    int v96 = 0;
  }
  LODWORD(v22) = 0;
  unsigned int v112 = *v86;
  if ((v9 & 4) != 0) {
    int v23 = v16;
  }
  else {
    int v23 = 1;
  }
  unsigned int v90 = *(_DWORD *)(v12 + 22888);
  if ((v23 | v110))
  {
    uint64_t v24 = v101;
  }
  else
  {
    uint64_t v24 = v101;
    if ((v96 & 1) == 0)
    {
      uint64_t v22 = *(_DWORD *)(*((void *)this + *((unsigned int *)this + 13) + 34) + 16) & 1;
      uint64_t v24 = v118[v22];
    }
  }
  uint64_t v111 = 0;
  BOOL v102 = 0;
  int v89 = 0;
  uint64_t v85 = 0;
  int v106 = 0;
  uint64_t v109 = 0;
  int v25 = 0;
  uint64_t v26 = 0;
  unsigned int v113 = 0;
  int v27 = 0;
  uint64_t v28 = 0;
  uint64_t v108 = 0x2E8BA2E8BA2E8BA3 * ((v24 - v101) >> 2);
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v29 = v8 + 9856 * v6;
  uint64_t v30 = (unsigned char *)(v29 + 52);
  int v94 = (unsigned char *)(v29 + 53);
  if (v16) {
    int v31 = 12;
  }
  else {
    int v31 = 4;
  }
  int v92 = v31;
  unsigned int v95 = a2 - 1;
  unsigned int v87 = v13 - 2;
  unsigned int v88 = v13 - 1;
  uint64_t v97 = v82 + 3036;
  uint64_t v103 = v30;
  int v98 = v16;
  do
  {
    if (*v30) {
      int v32 = 1;
    }
    else {
      int v32 = v16;
    }
    if (v32 != 1)
    {
      unsigned int v35 = 1;
LABEL_48:
      uint64_t v36 = 0;
      int v91 = 0;
      uint64_t v37 = v84 + 2360 * v111;
      unsigned __int16 v93 = (void *)(v37 + 1904);
      int v100 = (unsigned int *)(v37 + 36);
      int v105 = (unsigned char *)(v37 + 32);
      uint64_t v107 = v35;
      while (1)
      {
        if (!(v36 | v111))
        {
          uint64_t v41 = v26;
          *(_WORD *)(v24 + 4) = 0;
          *(_WORD *)(v24 + 6) = v22;
          *(_DWORD *)(v24 + 8) = 0;
          *(_WORD *)(v24 + 12) = 0;
          int v27 = *(_DWORD *)(v97 + 356 * v111);
          if (!(*(unsigned int (**)(void))(**((void **)this + 32) + 448))()) {
            return 0xFFFFFFFFLL;
          }
          int v42 = *v100;
          *(_DWORD *)(v24 + 28) = *v100;
          *(_DWORD *)(v24 + 32) = v42;
          unsigned int v113 = 0;
          *(_DWORD *)(v24 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (*(uint64_t (**)(CAHDecLotusHevc *, uint64_t, void))(*(void *)this + 72))(this, v28, v112);
          __int16 v43 = 271;
          goto LABEL_141;
        }
        if (v36)
        {
          int v104 = v27;
          int v38 = *(_DWORD *)(*v93 + 4 * v36 - 4) + 1;
          if (*v103)
          {
            if (*v94)
            {
              unsigned int v39 = *v86;
              unsigned int v40 = (v39 + v26) / v39;
              v38 += v91;
              if (v40 >= *(unsigned __int16 *)(*((void *)this + 33) + 2 * (HIDWORD(v85) + 1) + 498))
              {
                uint64_t v26 = (*(uint64_t (**)(CAHDecLotusHevc *, void, void))(*(void *)this + 64))(this, (v28 + 1), v112);
                int v91 = 0;
                int v25 = v92;
              }
              else
              {
                uint64_t v26 = v89 + v40 * v39;
                if (!v98)
                {
                  int v91 = v38;
                  int v16 = 0;
                  goto LABEL_142;
                }
                int v91 = 0;
                if (v40 == v85 + 1) {
                  int v25 = 72;
                }
                else {
                  int v25 = 8;
                }
              }
            }
            else
            {
              uint64_t v26 = (*(uint64_t (**)(CAHDecLotusHevc *, void, void))(*(void *)this + 64))(this, (v28 + 1), v112);
              int v25 = 4;
            }
          }
          else if (v98)
          {
            uint64_t v26 = (*v86 + v26) / *v86 * *v86;
            int v25 = 8;
          }
          uint64_t v48 = (void *)v115;
          if (*(void *)v115 || *(_DWORD *)(v115 + 152) || *(_DWORD *)(v115 + 156))
          {
            int v49 = v22;
            uint64_t v22 = v26;
            int v50 = v114;
            if ((v114 + (unint64_t)v113) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1711;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v50 = v114;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v48, 44 * (int)v108 + 216312, v113 + v50, 0xFFFFFFFFLL, 0, -1, 4);
            uint64_t v26 = v22;
            LODWORD(v22) = v49;
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v24 + 24) = v38;
          v113 += v38;
          int v16 = v98;
          int v27 = v104;
        }
        else
        {
          char v44 = (void *)v115;
          if (*(void *)v115 || *(_DWORD *)(v115 + 152) || *(_DWORD *)(v115 + 156))
          {
            int v45 = v114;
            if ((v114 + (unint64_t)v113) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315394;
              *(void *)((char *)buf + 4) = "populateAvdWork";
              WORD2(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 6) = 1641;
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
              int v45 = v114;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v44, 44 * (int)v108 + 216312, v113 + v45, 0xFFFFFFFFLL, 0, -1, 4);
            if (result) {
              return result;
            }
          }
          *(_DWORD *)(v24 + 24) = v27 - v113;
          int v27 = *(_DWORD *)(v97 + 356 * v111);
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t *))(**((void **)this + 32) + 448))(*((void *)this + 32), v111, &v115, &v114))return 0xFFFFFFFFLL; {
          uint64_t v26 = *v100;
          }
          if (*v105) {
            int v25 = 2;
          }
          else {
            int v25 = 258;
          }
          if (v16 && v26 % v112 == v89)
          {
            unsigned int v113 = 0;
            if (v26 / v112 == v85 + 1) {
              int v47 = 72;
            }
            else {
              int v47 = 8;
            }
            v25 |= v47;
          }
          else
          {
            unsigned int v113 = 0;
          }
        }
        unsigned int v51 = v28 + 1;
        uint64_t v41 = v26;
        if ((int)v28 + 1 < v99)
        {
          int v52 = (*(uint64_t (**)(CAHDecLotusHevc *, void, void))(*(void *)this + 64))(this, (v28 + 1), v112);
          LODWORD(v26) = v41;
          int v53 = v92;
          if (v41 != v52) {
            int v53 = 0;
          }
          v25 |= v53;
        }
        *(_WORD *)(v24 + 16) = v25;
        if (v109 == v95) {
          *(_WORD *)(v24 + 18) |= 2u;
        }
        if (v28 == v99 - 1) {
          *(_WORD *)(v24 + 18) |= 4u;
        }
        int v54 = v110;
        if (v28 != v99 - 2) {
          int v54 = 0;
        }
        if (v54 == 1) {
          *(_WORD *)(v24 + 18) |= 4u;
        }
        if (v16
          && ((int v55 = *(unsigned __int16 *)(v24 + 10), v90 > 1) ? (v56 = v87 == v55) : (v56 = 0),
              !v56 ? (int v57 = 0) : (int v57 = 1),
              v88 == v55 || v57))
        {
          *(_WORD *)(v24 + 18) |= 8u;
          if ((v25 & 4) != 0)
          {
LABEL_114:
            int v58 = HIDWORD(v109);
            if (*v103 && *v94)
            {
              unsigned int v59 = (unsigned __int16 *)(*((void *)this + 33) + 452);
              unsigned int v60 = *v59;
              HIDWORD(v85) = v51 / v60;
              int v89 = v59[v51 % v60 + 2];
              LODWORD(v85) = v59[v51 / v60 + 23];
              BOOL v102 = ((v22 + v85) & 1) == 0;
            }
            uint64_t v28 = (v28 + 1);
            goto LABEL_118;
          }
        }
        else if ((v25 & 4) != 0)
        {
          goto LABEL_114;
        }
        int v58 = HIDWORD(v109);
LABEL_118:
        if ((v25 & 0x44) != 0)
        {
          int v61 = (*(uint64_t (**)(CAHDecLotusHevc *, uint64_t))(*(void *)this + 80))(this, v28);
          LODWORD(v26) = v41;
          if (v58 <= v61) {
            v25 |= 0x20u;
          }
        }
        if (!v36)
        {
          if (!*v105) {
            int v58 = v28;
          }
          int v62 = v106;
          if (!*v105) {
            int v62 = v26;
          }
          int v106 = v62;
        }
        if ((v25 & 0x44) != 0)
        {
          unsigned int v63 = *(unsigned __int16 *)(*((void *)this + 33) + 452);
          if (v58 / v63 + 1 == v28 / v63) {
            v25 |= 0x10u;
          }
        }
        int v64 = (v102 + (v26 / v112)) & 1;
        if (!v16) {
          int v64 = v22;
        }
        if (v110) {
          BOOL v65 = v28 & 1;
        }
        else {
          BOOL v65 = v64;
        }
        ++*((_DWORD *)&v118[-1] + v22);
        v118[v22] += 44;
        char v66 = v96 ^ 1;
        if (v36) {
          char v66 = 1;
        }
        HIDWORD(v109) = v58;
        if ((v66 & 1) == 0 && !*v105) {
          BOOL v65 = !v65;
        }
        uint64_t v24 = v118[v65];
        uint64_t v108 = 0x2E8BA2E8BA2E8BA3 * ((v24 - v101) >> 2);
        *(_WORD *)(v24 + 4) = *((_DWORD *)&v118[-1] + v65);
        *(_WORD *)(v24 + 6) = v65;
        *(_WORD *)(v24 + 8) = v111;
        *(_WORD *)(v24 + 1pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v26 / v112;
        *(_WORD *)(v24 + 12) = v28;
        *(_DWORD *)(v24 + 28) = v26;
        *(_DWORD *)(v24 + 32) = v106;
        *(_DWORD *)(v24 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = (*(uint64_t (**)(CAHDecLotusHevc *, uint64_t, void))(*(void *)this + 72))(this, v28, v112);
        __int16 v43 = v25;
        LODWORD(v109) = v111;
        LODWORD(v22) = v65;
LABEL_141:
        *(_WORD *)(v24 + 14) = v43;
        uint64_t v26 = v41;
LABEL_142:
        if (v107 == ++v36) {
          goto LABEL_45;
        }
      }
    }
    int v33 = *(_DWORD *)(v84 + 2360 * v111 + 1896);
    BOOL v34 = __CFADD__(v33, 1);
    unsigned int v35 = v33 + 1;
    if (!v34) {
      goto LABEL_48;
    }
LABEL_45:
    ++v111;
    uint64_t v30 = v103;
  }
  while (v111 != a2);
  char v70 = (void *)v115;
  if (!*(void *)v115 && !*(_DWORD *)(v115 + 152) && !*(_DWORD *)(v115 + 156)) {
    goto LABEL_164;
  }
  int v71 = v114;
  if ((v114 + (unint64_t)v113) >> 32 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "populateAvdWork";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 1801;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
    int v71 = v114;
  }
  uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v70, 44 * (int)v108 + 216312, v113 + v71, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result)
  {
LABEL_164:
    *(_DWORD *)(v24 + 24) = v27 - v113;
    *(_DWORD *)(v24 + 16) = 917519;
    ++*((_DWORD *)&v118[-1] + v22);
    if (v96)
    {
      uint64_t v72 = v101;
      buf[0] = v101;
      buf[1] = v81;
      unsigned int v73 = *(unsigned __int16 *)(v82 + 216300) + 1;
      if (v73 >= a2)
      {
        BOOL v74 = 0;
        unsigned int v76 = buf;
      }
      else
      {
        BOOL v74 = 0;
        BOOL v75 = 0;
        unsigned int v76 = buf;
        do
        {
          if (*(unsigned __int16 *)(v72 + 4) + 1 == *((_DWORD *)&v118[-1] + v74))
          {
            BOOL v75 = !v75;
            *(_DWORD *)(v72 + 36) = *(_DWORD *)(buf[v75] + 32);
          }
          else
          {
            if (v73 != *(unsigned __int16 *)(v72 + 52))
            {
              BOOL v75 = !v75;
              *(_DWORD *)(v72 + 36) = *(_DWORD *)(buf[v75] + 32);
            }
            void *v76 = v72 + 44;
          }
          BOOL v74 = v75;
          unsigned int v76 = &buf[v75];
          uint64_t v72 = *v76;
          unsigned int v73 = *(unsigned __int16 *)(*v76 + 8) + 1;
        }
        while (v73 < a2);
      }
      int v77 = *((_DWORD *)&v118[-1] + v74);
      if (*(unsigned __int16 *)(v72 + 4) + 1 != v77)
      {
        do
        {
          int v78 = *(unsigned __int16 *)(v72 + 48);
          v72 += 44;
        }
        while (v78 + 1 != v77);
        void *v76 = v72;
      }
      *(_DWORD *)(v72 + 36) = *(_DWORD *)(v72 + 40) + 1;
    }
    uint64_t result = 0;
    uint64_t v79 = *((void *)this + 33);
    __int16 v80 = WORD2(v117);
    *(_WORD *)(v79 + 28) = v117;
    *(_WORD *)(v79 + 3pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v80;
    *(_DWORD *)(v79 + 32) = 216292;
    *(_DWORD *)(v79 + 36) = 306404;
  }
  return result;
}

uint64_t CAHDecLotusHevc::allocWorkBuf_SPS(CAHDecLotusHevc *this, _DWORD *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 5718;
  int v5 = a2[902];
  int v6 = a2[903];
  int v7 = a2[900];
  if (v5 < (*(unsigned int (**)(CAHDecLotusHevc *))(*(void *)this + 96))(this)
    || (unsigned int v8 = a2[903], v8 < (*(unsigned int (**)(CAHDecLotusHevc *))(*(void *)this + 104))(this))
    || (unsigned int v9 = a2[909], v9 > (*(unsigned int (**)(CAHDecLotusHevc *))(*(void *)this + 112))(this) - 8)
    || (unsigned int v10 = a2[910], v10 > (*(unsigned int (**)(CAHDecLotusHevc *))(*(void *)this + 120))(this) - 8)
    || (unsigned int v17 = *v4, v18 = *v4 - 16, v18 > 0x30)
    || ((1 << v18) & 0x1000000010001) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = a2[902];
      int v12 = a2[903];
      int v13 = a2[909];
      int v14 = a2[910];
      unsigned int v15 = *v4;
      int v49 = 136316418;
      int v50 = "allocWorkBuf_SPS";
      __int16 v51 = 1024;
      int v52 = v11;
      __int16 v53 = 1024;
      *(_DWORD *)int v54 = v12;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v13;
      __int16 v55 = 1024;
      int v56 = v14;
      __int16 v57 = 1024;
      unsigned int v58 = v15;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s(): unsupported bit stream w %d h %d bd %d %d CtbSizeY %d\n", (uint8_t *)&v49, 0x2Au);
    }
    return 0xFFFFFFFFLL;
  }
  int v19 = v5 + 31;
  if (v5 < -31) {
    int v19 = v5 + 62;
  }
  unsigned int v20 = v19 >> 5;
  int v21 = v6 + 31;
  if (v6 < -31) {
    int v21 = v6 + 62;
  }
  unsigned int v22 = v21 >> 5;
  unsigned int v23 = 32 - __clz(v20 - 1);
  if (v20 >= 2) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  unsigned int v25 = 32 - __clz(v22 - 1);
  if (v22 >= 2) {
    char v26 = v25;
  }
  else {
    char v26 = 0;
  }
  unsigned int v27 = ((32 << (v26 + v24)) + 127) & 0xFFFFFF80;
  if (v7)
  {
    int v28 = v5 << (v7 == 3);
    int v29 = v28 + 31;
    int v30 = v28 + 62;
    if (v29 >= 0) {
      int v30 = v29;
    }
    unsigned int v31 = v30 >> 5;
    if (v7 == 1) {
      int v32 = v6 + 1;
    }
    else {
      int v32 = v6;
    }
    int v33 = v32 >> (v7 == 1);
    int v35 = v33 + 15;
    BOOL v34 = v33 < -15;
    int v36 = v33 + 30;
    if (!v34) {
      int v36 = v35;
    }
    unsigned int v37 = v36 >> 4;
    if (v31 > 1)
    {
      unsigned int v38 = 32 - __clz(v31 - 1);
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v37 = 0;
  }
  LOBYTE(v38) = 0;
LABEL_32:
  unsigned int v39 = 32 - __clz(v37 - 1);
  if (v37 >= 2) {
    char v40 = v39;
  }
  else {
    char v40 = 0;
  }
  unsigned int v41 = ((8 << (v40 + v38)) + 127) & 0xFFFFFF80;
  if (!v7) {
    unsigned int v41 = 0;
  }
  *((_DWORD *)this + 2948) = v27;
  *((_DWORD *)this + 2949) = v41;
  *((void *)this + 1475) = 0;
  unsigned int v42 = (v17 & 0xFFFFFFF0) * (v17 >> 4) * v4[2];
  *((_DWORD *)this + 2954) = v42;
  *((_DWORD *)this + 2953) = v4[4] * v42;
  if (*(_DWORD *)(*((void *)this + 32) + 2648))
  {
LABEL_44:
    uint64_t v46 = 0;
    while (1)
    {
      uint64_t v47 = *((unsigned int *)this + 2953);
      if (v47)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecLotusHevc *)((char *)this + v46 + 7568), v47, 7, 1, 0))break; {
      }
        }
      uint64_t result = 0;
      v46 += 176;
      if (v46 == 2816) {
        return result;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2062;
    __int16 v53 = 2080;
    *(void *)int v54 = "MvColo";
    uint64_t v48 = &_os_log_internal;
  }
  else
  {
    uint64_t v43 = 528;
    while (1)
    {
      uint64_t v44 = *((unsigned int *)this + 2948);
      if (v44
        && CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecLotusHevc *)((char *)this + v43), v44, 7, 1, 0))
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_56;
        }
        int v49 = 136315650;
        int v50 = "allocWorkBuf_SPS";
        __int16 v51 = 1024;
        int v52 = 2053;
        __int16 v53 = 2080;
        *(void *)int v54 = "HdrY";
        uint64_t v48 = &_os_log_internal;
        goto LABEL_55;
      }
      uint64_t v45 = *((unsigned int *)this + 2949);
      if (v45)
      {
        if (CAVDDecoder::allocAVDMem(*((void *)this + 32), (CAHDecLotusHevc *)((char *)this + v43 + 2816), v45, 7, 1, 0))break; {
      }
        }
      v43 += 176;
      if (v43 == 3344) {
        goto LABEL_44;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    int v49 = 136315650;
    int v50 = "allocWorkBuf_SPS";
    __int16 v51 = 1024;
    int v52 = 2054;
    __int16 v53 = 2080;
    *(void *)int v54 = "HdrC";
    uint64_t v48 = &_os_log_internal;
  }
LABEL_55:
  _os_log_impl(&dword_223977000, v48, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", (uint8_t *)&v49, 0x1Cu);
LABEL_56:
  (*(void (**)(CAHDecLotusHevc *))(*(void *)this + 136))(this);
  return 0xFFFFFFFFLL;
}

uint64_t CAHDecLotusHevc::allocWorkBuf_PPS(CAHDecLotusHevc *this, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  unsigned int v4 = (a2[909] + 9) & 0xFFFFFFFE;
  unsigned int v5 = (a2[910] + 9) & 0xFFFFFFFE;
  if (v4 <= v5) {
    unsigned int v6 = (a2[910] + 9) & 0xFFFFFFFE;
  }
  else {
    unsigned int v6 = (a2[909] + 9) & 0xFFFFFFFE;
  }
  int v7 = a2[900];
  if (v6 == 10) {
    int v8 = 40;
  }
  else {
    int v8 = 48;
  }
  if (v6 == 8) {
    int v8 = 32;
  }
  char v9 = v7 != 3;
  if (*((unsigned char *)a3 + 52))
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = a2[1106] + a2[1105];
    uint64_t v16 = a3[14];
    int v17 = a2[5718];
    unsigned int v18 = a2[902];
    do
    {
      int v19 = a3[v10 + 17] + 1;
      int v20 = v19 * v17;
      if (v19 * v17 + v13 > v18) {
        int v20 = v18 - v13;
      }
      if (v11 <= v20) {
        int v11 = v20;
      }
      if (v7)
      {
        unsigned int v21 = (v19 << v15) >> v9;
        if (v16 == v10) {
          unsigned int v21 = (((v18 >> 3) - (v14 << v15)) >> v9) + 1;
        }
        v12 += ((v21 + 2 * (v10 != 0)) * v8 + 127) & 0xFFFFFF80;
      }
      v13 += v20;
      v14 += v19;
      ++v10;
    }
    while (v16 + 1 != v10);
  }
  else
  {
    unsigned int v18 = a2[902];
    int v22 = (v8 + v8 * (v18 >> 3 >> v9) + 127) & 0x7FFFFF80;
    if (v7) {
      int v12 = v22;
    }
    else {
      int v12 = 0;
    }
    int v11 = a2[902];
  }
  signed int v23 = 0;
  uint64_t v24 = *((void *)this + 32);
  if (v11 >= -15) {
    int v25 = v11 + 15;
  }
  else {
    int v25 = v11 + 30;
  }
  int v26 = a3[14];
  if (*((unsigned char *)a3 + 52)) {
    int v27 = a3[14];
  }
  else {
    int v27 = 0;
  }
  int v65 = v27;
  if (v7 == 3) {
    int v28 = 48;
  }
  else {
    int v28 = 32;
  }
  if (v7 == 3) {
    int v29 = 176;
  }
  else {
    int v29 = 128;
  }
  if (!v7) {
    int v28 = 16;
  }
  unsigned int v30 = (v28 * v6) >> 3;
  if (!v7) {
    int v29 = 80;
  }
  int v63 = v25;
  int v64 = v29;
  int v31 = v25 >> 4;
  int v32 = (v25 >> 4) * v30;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  if (*((unsigned char *)a3 + 52) && v26)
  {
    uint64_t v36 = 0;
    int v37 = 0;
    unsigned int v35 = 0;
    unsigned int v34 = 0;
    unsigned int v33 = 0;
    if (v7 == 1) {
      int v38 = 8;
    }
    else {
      int v38 = 16;
    }
    if (!v7) {
      int v38 = 0;
    }
    unsigned int v39 = ((((6 * v38 + 96) * v6) >> 3) + 7) & 0x3FFFFFF8;
    int v40 = v38 + 16;
    unsigned int v41 = a2[903];
    signed int v42 = v4 - 8;
    signed int v43 = v5 - 8;
    if (v42 <= v43) {
      signed int v44 = v43;
    }
    else {
      signed int v44 = v42;
    }
    uint64_t v45 = a3[15];
    int v46 = a2[5718];
    BOOL v48 = *(_DWORD *)(v24 + 2644) == 1 && v44 != 0;
    int v49 = (char *)(a3 + 37);
    do
    {
      int v50 = v46 + v46 * *(_DWORD *)&v49[4 * v36];
      if (v50 + v37 > v41) {
        int v50 = v41 - v37;
      }
      int v51 = v50 + 15;
      if (v50 < -15) {
        int v51 = v50 + 30;
      }
      if (v36) {
        int v52 = (v51 >> 4) + 1;
      }
      else {
        int v52 = v51 >> 4;
      }
      unsigned int v53 = v52 * v39;
      if (v33 <= v53) {
        unsigned int v33 = v53;
      }
      unsigned int v54 = 36 * (v51 >> 4);
      if (v34 <= v54) {
        unsigned int v34 = v54;
      }
      if (v48)
      {
        if (v45 == v36) {
          int v55 = 23;
        }
        else {
          int v55 = 15;
        }
        unsigned int v56 = ((v55 + v50) / 16 * v40) | 6;
        if (v35 <= v56) {
          unsigned int v35 = v56;
        }
      }
      v37 += v50;
      ++v36;
    }
    while (v45 + 1 != v36);
    signed int v23 = (((3 * v6) & 0x7FFFFF) << 6) + (((v41 + 7) >> 3) + 2) * ((((v6 >> 1) & 0x1FFFFF) << 8) | 8);
  }
  if (v32 && CAVDDecoder::allocAVDMem(v24, (_OWORD *)this + 649, v32, 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      unsigned int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2232;
      __int16 v71 = 2080;
      uint64_t v72 = "IpAbove";
      unsigned int v58 = &_os_log_internal;
LABEL_113:
      _os_log_impl(&dword_223977000, v58, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s() Line %d: Error allocating %s", buf, 0x1Cu);
      goto LABEL_114;
    }
    goto LABEL_114;
  }
  if ((v11 + 30) >= 0x1F
    && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 462, 4 * (4 * v31 + (v63 >> 4)), 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      unsigned int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2233;
      __int16 v71 = 2080;
      uint64_t v72 = "MvAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
LABEL_114:
    (*(void (**)(CAHDecLotusHevc *, void))(*(void *)v57 + 152))(v57, 0);
    return 0xFFFFFFFFLL;
  }
  int v59 = v65 + ((v18 + 15) >> 4);
  signed int v60 = v59 * ((((v64 * v6) >> 3) + 7) & 0x3FFFFFF8) + (v26 << 7);
  if (v60 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 660, v60, 7, 1, 0))
  {
    __int16 v57 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      unsigned int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2234;
      __int16 v71 = 2080;
      uint64_t v72 = "LfAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  int v61 = 36 * v59 + (v26 << 7);
  __int16 v57 = this;
  if (v61 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 671, v61, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      unsigned int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2235;
      __int16 v71 = 2080;
      uint64_t v72 = "LfAboveInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v33 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 682, (int)v33, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      unsigned int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2236;
      __int16 v71 = 2080;
      uint64_t v72 = "LfLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v34 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 693, (int)v34, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      unsigned int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2237;
      __int16 v71 = 2080;
      uint64_t v72 = "LfLeftInfo";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v35 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 704, (int)v35, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      unsigned int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2238;
      __int16 v71 = 2080;
      uint64_t v72 = "SwLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (v12 && CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 715, v12, 7, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      unsigned int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2239;
      __int16 v71 = 2080;
      uint64_t v72 = "AZAbovePix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if (!v23) {
    return 0;
  }
  uint64_t result = CAVDDecoder::allocAVDMem(*((void *)this + 32), (_OWORD *)this + 726, v23, 7, 1, 0);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      unsigned int v68 = "allocWorkBuf_PPS";
      __int16 v69 = 1024;
      int v70 = 2240;
      __int16 v71 = 2080;
      uint64_t v72 = "AZLeftPix";
      unsigned int v58 = &_os_log_internal;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  return result;
}

uint64_t CAHDecLotusHevc::freeWorkBuf_SPS(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(_DWORD *)(*(void *)(this + 256) + 2648))
  {
    for (uint64_t i = 528; i != 3344; i += 176)
    {
      uint64_t v3 = (void *)(v1 + i);
      if (*(void *)(v1 + i))
      {
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v1 + i));
        *uint64_t v3 = 0;
      }
      if (v3[352])
      {
        unsigned int v4 = v3 + 352;
        this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), v4);
        *unsigned int v4 = 0;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1 + 7568;
  do
  {
    if (*(void *)(v6 + v5))
    {
      this = CAVDDecoder::deallocAVDMem(*(void *)(v1 + 256), (uint64_t *)(v6 + v5));
      *(void *)(v6 + v5) = 0;
    }
    v5 += 176;
  }
  while (v5 != 2816);
  return this;
}

uint64_t *CAHDecLotusHevc::freeWorkBuf_PPS(uint64_t *this, void *a2)
{
  unsigned int v2 = this;
  if (this[1298])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(this[32], this + 1298);
    v2[1298] = 0;
  }
  if (v2[924])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 924);
    v2[924] = 0;
  }
  if (v2[1320])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1320);
    v2[1320] = 0;
  }
  if (v2[1342])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1342);
    v2[1342] = 0;
  }
  if (v2[1364])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1364);
    v2[1364] = 0;
  }
  if (v2[1386])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1386);
    v2[1386] = 0;
  }
  if (v2[1408])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1408);
    v2[1408] = 0;
  }
  if (v2[1430])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1430);
    v2[1430] = 0;
  }
  if (v2[1452])
  {
    this = (uint64_t *)CAVDDecoder::deallocAVDMem(v2[32], v2 + 1452);
    v2[1452] = 0;
  }
  return this;
}

uint64_t CAHDecLotusHevc::setVPInstrFifo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this + 6160;
  do
  {
    *(_DWORD *)(v3 + 156) = 1;
    *(void *)uint64_t v3 = v2;
    v3 += 176;
    ++v2;
  }
  while (v2 != 7);
  *(_DWORD *)(this + 11808) = a2;
  return this;
}

uint64_t CAHDecLotusHevc::decodeBuffer(CAHDecLotusHevc *this)
{
  return *((void *)this + 22 * *((unsigned int *)this + 13) + 35);
}

uint64_t CAHDecLotusHevc::decodeBufferSize(CAHDecLotusHevc *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t CAHDecLotusHevc::decHdrYLinAddr(CAHDecLotusHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 66);
}

uint64_t CAHDecLotusHevc::decHdrCLinAddr(CAHDecLotusHevc *this, unsigned int a2)
{
  return *((void *)this + 22 * a2 + 418);
}

uint64_t CAHDecLotusHevc::decHdrYSize(CAHDecLotusHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 143);
}

uint64_t CAHDecLotusHevc::decHdrCSize(CAHDecLotusHevc *this, unsigned int a2)
{
  return *((unsigned int *)this + 44 * a2 + 847);
}

uint64_t CAHDecLotusHevc::decHdrYStride(CAHDecLotusHevc *this)
{
  return *((unsigned int *)this + 2950);
}

uint64_t CAHDecLotusHevc::decHdrCStride(CAHDecLotusHevc *this)
{
  return *((unsigned int *)this + 2951);
}

CAHDecCatnipAvc *createCatnipAvcDecoder(CAVDAvcDecoder *a1)
{
  uint64_t v2 = (CAHDecCatnipAvc *)operator new(0x2F10uLL, MEMORY[0x263F8C180]);
  uint64_t v3 = v2;
  if (v2) {
    CAHDecCatnipAvc::CAHDecCatnipAvc(v2, a1);
  }
  return v3;
}

void sub_2239EFBAC(_Unwind_Exception *a1)
{
  MEMORY[0x223CBAD20](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void CAHDecCatnipAvc::CAHDecCatnipAvc(CAHDecCatnipAvc *this)
{
  CAHDec::CAHDec(this);
  *(void *)uint64_t v1 = &unk_26D73EEA0;
  *(_DWORD *)(v1 + 456) = 956 * *(unsigned __int16 *)(*(void *)(v1 + 256) + 7500) + 182328;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)(v1 + 264) = *(void *)(v1 + 272);
}

void CAHDecCatnipAvc::CAHDecCatnipAvc(CAHDecCatnipAvc *this, CAVDAvcDecoder *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CAHDec::CAHDec(this);
  *(void *)uint64_t v4 = &unk_26D73EEA0;
  *(void *)(v4 + 256) = a2;
  uint64_t v5 = 956 * *((unsigned __int16 *)a2 + 3750) + 182328;
  *(_DWORD *)(v4 + 456) = v5;
  *(_DWORD *)(v4 + 8) = 2104;
  *(_OWORD *)(v4 + 16) = xmmword_223AD04F0;
  *(_DWORD *)(v4 + 32) = 1;
  *(void *)(v4 + 56) = a2;
  if (CAVDDecoder::allocAVDMem((uint64_t)a2, (_OWORD *)(v4 + 280), v5, 6, 1, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      int v8 = "CAHDecCatnipAvc";
      __int16 v9 = 1024;
      int v10 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): Error allocating m_decodeBufferMemInfo[%d]", (uint8_t *)&v7, 0x12u);
    }
    *(_DWORD *)(*((void *)this + 32) + 282pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 301;
  }
  else
  {
    uint64_t v6 = *((void *)this + 35);
    *((_DWORD *)this + 13) = 0;
    *((void *)this + 33) = v6;
    *((void *)this + 34) = v6;
    *((_OWORD *)this + 742) = 0u;
    *((_OWORD *)this + 743) = 0u;
    *((_OWORD *)this + 744) = 0u;
    *((_OWORD *)this + 745) = 0u;
    *((_OWORD *)this + 746) = 0u;
    *((_OWORD *)this + 747) = 0u;
    *((_OWORD *)this + 748) = 0u;
    *((_OWORD *)this + 749) = 0u;
    *((_OWORD *)this + 75pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0u;
    *((_OWORD *)this + 751) = 0u;
    *((_OWORD *)this + 752) = 0u;
    bzero((char *)this + 560, 0x2C00uLL);
  }
}

void sub_2239EFDB4(_Unwind_Exception *a1)
{
  CAHDec::~CAHDec(v1);
  _Unwind_Resume(a1);
}

void CAHDecCatnipAvc::~CAHDecCatnipAvc(CAHDecCatnipAvc *this)
{
  *(void *)this = &unk_26D73EEA0;
  if (*((void *)this + 34)) {
    CAVDDecoder::deallocAVDMem(*((void *)this + 32), (uint64_t *)this + 35);
  }
  *((void *)this + 34) = 0;

  CAHDec::~CAHDec(this);
}

{
  uint64_t vars8;

  CAHDecCatnipAvc::~CAHDecCatnipAvc(this);

  JUMPOUT(0x223CBAD30);
}

uint64_t CAHDecCatnipAvc::initPicture(CAHDecCatnipAvc *this, int a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t v5 = 956 * *(unsigned __int16 *)(*((void *)this + 32) + 7500) + 182328;
  *((_DWORD *)this + 114) = v5;
  *((_DWORD *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 34);
  *((void *)this + 33) = v6;
  if (v6)
  {
    bzero(v6, v5);
    uint64_t v8 = *((void *)this + *((unsigned int *)this + 13) + 34);
    *(_DWORD *)(v8 + 16) = a2;
    *(_WORD *)(v8 + 24) = 257;
    *(_WORD *)(v8 + 26) = a3;
    bzero(*((void **)this + 9), 48 * *((unsigned int *)this + 17));
    uint64_t result = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 2963) = 0;
    *((void *)this + 1489) = 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "initPicture";
      __int16 v12 = 1024;
      int v13 = 0;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: ERROR: %s(): decode buffer at index %d is NULL!\n", (uint8_t *)&v10, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t CAHDecCatnipAvc::populateSlices(CAHDecCatnipAvc *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + *((unsigned int *)this + 13) + 34) + 2104;
    uint64_t v5 = a2;
    do
    {
      CAHDecCatnipAvc::populateSliceRegisters((uint64_t)this, v4, v3++);
      v4 += 956;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t CAHDecCatnipAvc::populateSliceRegisters(uint64_t a1, uint64_t a2, signed int a3)
{
  char v6 = 0;
  uint64_t v123 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 256);
  int v8 = *(_DWORD *)(v7 + 3616);
  uint64_t v9 = *(void *)(v7 + 3304);
  uint64_t v110 = *(void *)(v7 + 3296);
  int v111 = *(_DWORD *)(v7 + 3612);
  uint64_t v10 = *(void *)(v7 + 3312);
  uint64_t v11 = *(unsigned int *)(v7 + 7064);
  uint64_t v12 = *(void *)(v7 + 3320);
  *(_DWORD *)(a2 + 4) = 0;
  uint64_t v14 = v10 + 1848 * a3;
  int v15 = 32 * (*(unsigned char *)(v14 + 1424) & 3);
  *(_DWORD *)(a2 + 4) = v15;
  int v17 = *(unsigned __int8 *)(v14 + 24);
  uint64_t v16 = (unsigned char *)(v14 + 24);
  if (v17 != 2) {
    char v6 = *(unsigned char *)(v10 + 1848 * a3 + 63);
  }
  unsigned int v18 = v15 & 0xFFFF87FF | ((v6 & 0xF) << 11);
  *(_DWORD *)(a2 + 4) = v18;
  if (*v16 == 1) {
    char v19 = *(unsigned char *)(v10 + 1848 * a3 + 64);
  }
  else {
    char v19 = 0;
  }
  int v20 = ((v19 & 0xF) << 7) | v18;
  *(_DWORD *)(a2 + 4) = v20;
  if (*v16 == 1 && !*(unsigned char *)(v10 + 1848 * a3 + 61)) {
    int v21 = 0x8000;
  }
  else {
    int v21 = 0;
  }
  uint64_t v112 = v9;
  int v113 = v8;
  int v22 = v21 | v20;
  *(_DWORD *)(a2 + 4) = v22;
  if (*v16) {
    int v23 = 0x20000;
  }
  else {
    int v23 = 0x10000;
  }
  if (*v16 == 1) {
    int v24 = 0;
  }
  else {
    int v24 = v23;
  }
  *(_DWORD *)(a2 + 4) = v24 | v22;
  if (*v16 != 1) {
    goto LABEL_20;
  }
  uint64_t v25 = v12 + 13040 * a3 + 7224;
  uint64_t v26 = v10 + 1848 * a3;
  *(void *)(v26 + 1832) = v25;
  if (*(unsigned char *)(v12 + 13040 * a3 + 7227)
    || (uint64_t v27 = *(unsigned int *)(v12 + 13040 * a3 + 7256), *(_DWORD *)(a1 + 4 * v27 + 464)))
  {
    int v28 = 16;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 11852))
    {
      *(void *)(a1 + 11912) = *(void *)(v12 + 13040 * a3 + 7264);
      *(_DWORD *)(a1 + 11904) = v27;
      *(_DWORD *)(a1 + 11852) = 1;
      *(_DWORD *)(a2 + 4) |= 0x40000u;
      uint64_t v25 = *(void *)(v26 + 1832);
      if (!v25 || !*(_DWORD *)(a1 + 11852)) {
        goto LABEL_20;
      }
    }
    uint64_t v107 = *(void *)(v25 + 40);
    if (v107 == *(void *)(a1 + 11912)) {
      goto LABEL_20;
    }
    *(void *)(a1 + 11912) = v107;
    *(_DWORD *)(a1 + 11904) = *(_DWORD *)(v25 + 32);
    int v28 = 0x40000;
  }
  *(_DWORD *)(a2 + 4) |= v28;
LABEL_20:
  uint64_t v116 = v12;
  *(_DWORD *)(a2 + 92pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
  *(_DWORD *)(a2 + 952) = 0;
  uint64_t v115 = v16;
  if (*v16 == 1 && (*(unsigned char *)(a2 + 6) & 4) != 0)
  {
    int v41 = *(_DWORD *)(*(void *)(v10 + 1848 * a3 + 1832) + 32);
    *(_DWORD *)(a1 + 11852) = 1;
    int v42 = *(_DWORD *)(a1 + 11844) * v41;
    int v43 = 956 * a3;
    signed int v44 = (void *)(a1 + 11648);
    if (*(void *)(a1 + 11648) || *(_DWORD *)(a1 + 11800) || *(_DWORD *)(a1 + 11804))
    {
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)(a1 + 11648), v43 + 3024, v42, 0xFFFFFFFFLL, 8, -256, 4);
      if (result) {
        return result;
      }
      if (*v44) {
        goto LABEL_41;
      }
    }
    if (*(_DWORD *)(a1 + 11800) || *(_DWORD *)(a1 + 11804))
    {
LABEL_41:
      uint64_t result = CAHDec::addToPatcherList(a1, (void *)(a1 + 11648), v43 + 3056, v42, 0x3FFFFFFFFFFLL, 32, 1023, 4);
      if (result) {
        return result;
      }
    }
  }
  unsigned int v109 = a3;
  uint64_t v114 = a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x77FFFF | 0x2D000000;
  unsigned int v29 = *v115;
  if (v29 <= 1)
  {
    uint64_t v30 = v7 + 6872;
    uint64_t v31 = v116 + 13040 * a3;
    if (*(_DWORD *)(v31 + 13032))
    {
      unint64_t v32 = 0;
      unsigned int v33 = (unsigned int *)(v31 + 13032);
      uint64_t v34 = v116 + 13040 * a3 + 1416;
      unsigned int v35 = &_os_log_internal;
      do
      {
        uint64_t v36 = a2 + 4 * v32;
        int v37 = (16 * (v32 & 0xF)) | 0x2DC00000;
        *(_DWORD *)(v36 + 8) = v37;
        int v38 = (_DWORD *)(v36 + 8);
        if (v11)
        {
          uint64_t v39 = 0;
          while (*(_DWORD *)(*(void *)(v30 + 8 * v39) + 12) != *(_DWORD *)(v34 + 176 * v32 + 12))
          {
            if (v11 == ++v39) {
              goto LABEL_29;
            }
          }
          *int v38 = v39 & 0xF | v37;
        }
        else
        {
LABEL_29:
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            int v40 = *(_DWORD *)(v34 + 176 * v32 + 32);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)int v121 = v32;
            *(_WORD *)&v121[4] = 1024;
            *(_DWORD *)&v121[6] = v40;
            LOWORD(v122[0]) = 1024;
            *(_DWORD *)((char *)v122 + 2) = v11;
            _os_log_impl(&dword_223977000, v35, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-0 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
          }
        }
        ++v32;
      }
      while (v32 < *v33);
      unsigned int v29 = *v115;
    }
    else
    {
      LODWORD(v32) = 0;
    }
    if (v29 == 1)
    {
      uint64_t v46 = v116 + 13040 * a3;
      if (*(_DWORD *)(v46 + 13036))
      {
        unint64_t v47 = 0;
        BOOL v48 = (unsigned int *)(v46 + 13036);
        int v49 = &_os_log_internal;
        do
        {
          uint64_t v50 = a2 + 4 * v32;
          int v51 = (16 * (v47 & 0xF)) | 0x2DC00100;
          *(_DWORD *)(v50 + 8) = v51;
          int v52 = (_DWORD *)(v50 + 8);
          if (v11)
          {
            uint64_t v53 = 0;
            while (*(_DWORD *)(*(void *)(v30 + 8 * v53) + 12) != *(_DWORD *)(v116 + 13040 * a3 + 176 * v47 + 7236))
            {
              if (v11 == ++v53) {
                goto LABEL_52;
              }
            }
            _DWORD *v52 = v53 & 0xF | v51;
          }
          else
          {
LABEL_52:
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            {
              int v54 = *(_DWORD *)(v116 + 13040 * a3 + 176 * v47 + 7256);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)int v121 = v32;
              *(_WORD *)&v121[4] = 1024;
              *(_DWORD *)&v121[6] = v54;
              LOWORD(v122[0]) = 1024;
              *(_DWORD *)((char *)v122 + 2) = v11;
              _os_log_impl(&dword_223977000, v49, OS_LOG_TYPE_DEFAULT, "AppleAVD: Error: list-1 slice(%2d) RefIdx[%2d] not found in %d ref_pics!!\n", buf, 0x14u);
            }
          }
          LODWORD(v32) = v32 + 1;
          ++v47;
        }
        while (v47 < *v48);
      }
    }
  }
  *(void *)(a2 + 136) = 0x2DD0000000000000;
  uint64_t v55 = v112 + 604 * v113;
  unsigned int v56 = (char *)(v55 + 88);
  __int16 v57 = (char *)(v55 + 87);
  if (*v115 == 1) {
    unsigned int v58 = v56;
  }
  else {
    unsigned int v58 = v57;
  }
  char v59 = *v58;
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = ((v59 & 3) << 6) | 0x2DD00000;
  int v60 = ((v59 & 3) << 6) | 0x2DD00000 | (8 * (*(unsigned char *)(v10 + 1848 * a3 + 376) & 7));
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v60;
  char v61 = *(unsigned char *)(v110 + 2224 * v111 + 4);
  if (v61) {
    char v61 = *(unsigned char *)(v10 + 1848 * a3 + 377);
  }
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v61 & 7 | v60;
  int v62 = *v115;
  if (v62 != 1) {
    goto LABEL_143;
  }
  int v63 = *v56;
  if (v63 != 2) {
    goto LABEL_65;
  }
  *(_DWORD *)(a2 + 14pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = ((v59 & 3) << 6) | 0x2DD0002D;
  int v62 = *v115;
  if (v62 != 1)
  {
LABEL_143:
    if (v62 || !*v57) {
      goto LABEL_85;
    }
    goto LABEL_69;
  }
  int v63 = *v56;
LABEL_65:
  if (v63 != 1) {
    goto LABEL_85;
  }
LABEL_69:
  unsigned int v64 = 0;
  unsigned int v65 = 0;
  do
  {
    uint64_t v66 = v64;
    if (*(unsigned char *)(v10 + 1848 * a3 + v64 + 378))
    {
      int v67 = ((v64 & 0xF) << 9) | 0x2DE04000;
      uint64_t v68 = a2 + 4 * v65;
      *(_DWORD *)(v68 + 144) = v67;
      uint64_t v69 = v10 + 1848 * a3 + 2 * v66;
      *(_DWORD *)(v68 + 144) = v67 | *(_WORD *)(v69 + 394) & 0x1FF;
      *(_DWORD *)(v68 + 528) = 770703360;
      *(_DWORD *)(v68 + 528) = *(unsigned __int16 *)(v69 + 426) | 0x2DF00000;
      ++v65;
    }
    if (*(unsigned char *)(v10 + 1848 * a3 + v66 + 458))
    {
      uint64_t v70 = 0;
      char v71 = 1;
      do
      {
        char v72 = v71;
        int v73 = ((v66 & 0xF) << 9) | (v70 << 14) | 0x2DE08000;
        uint64_t v74 = a2 + 4 * v65;
        *(_DWORD *)(v74 + 144) = v73;
        uint64_t v75 = v10 + 1848 * a3 + 4 * v66 + 2 * v70;
        *(_DWORD *)(v74 + 144) = v73 | *(_WORD *)(v75 + 474) & 0x1FF;
        *(_DWORD *)(v74 + 528) = 770703360;
        *(_DWORD *)(v74 + 528) = *(unsigned __int16 *)(v75 + 538) | 0x2DF00000;
        ++v65;
        uint64_t v70 = 1;
        char v71 = 0;
      }
      while ((v72 & 1) != 0);
    }
    unsigned int v64 = v66 + 1;
  }
  while ((int)v66 + 1 <= *(char *)(v10 + 1848 * a3 + 63));
  if (*v115 == 1)
  {
    unsigned int v76 = 0;
    do
    {
      uint64_t v77 = v76;
      if (*(unsigned char *)(v10 + 1848 * a3 + v76 + 602))
      {
        int v78 = ((v76 & 0xF) << 9) | 0x2DE06000;
        uint64_t v79 = a2 + 4 * v65;
        *(_DWORD *)(v79 + 144) = v78;
        uint64_t v80 = v10 + 1848 * a3 + 2 * v77;
        *(_DWORD *)(v79 + 144) = v78 | *(_WORD *)(v80 + 618) & 0x1FF;
        *(_DWORD *)(v79 + 528) = 770703360;
        *(_DWORD *)(v79 + 528) = *(unsigned __int16 *)(v80 + 650) | 0x2DF00000;
        ++v65;
      }
      if (*(unsigned char *)(v10 + 1848 * a3 + v77 + 682))
      {
        uint64_t v81 = 0;
        char v82 = 1;
        do
        {
          char v83 = v82;
          int v84 = ((v77 & 0xF) << 9) | (v81 << 14) | 0x2DE0A000;
          uint64_t v85 = a2 + 4 * v65;
          *(_DWORD *)(v85 + 144) = v84;
          uint64_t v86 = v10 + 1848 * a3 + 4 * v77 + 2 * v81;
          *(_DWORD *)(v85 + 144) = v84 | *(_WORD *)(v86 + 698) & 0x1FF;
          *(_DWORD *)(v85 + 528) = 770703360;
          *(_DWORD *)(v85 + 528) = *(unsigned __int16 *)(v86 + 762) | 0x2DF00000;
          ++v65;
          uint64_t v81 = 1;
          char v82 = 0;
        }
        while ((v83 & 1) != 0);
      }
      unsigned int v76 = v77 + 1;
    }
    while ((int)v77 + 1 <= *(char *)(v10 + 1848 * a3 + 64));
  }
  *(_DWORD *)(a2 + 136) = v65;
LABEL_85:
  *(_DWORD *)(a2 + 912) = 0;
  uint64_t v87 = v10 + 1848 * a3;
  *(_DWORD *)(a2 + 912) = (((*(unsigned __int8 *)(v112 + 604 * v113 + 89) + *(unsigned __int8 *)(v87 + 1425)) << 10)
                         + 26624) & 0x1FC00 | 0x2D900000;
  *(_DWORD *)(a2 + 916) = 0;
  int v88 = (*(unsigned char *)(v87 + 1428) == 0) << 17;
  *(_DWORD *)(a2 + 916) = v88;
  if (*(unsigned char *)(v87 + 1428) != 1)
  {
    int v89 = v88 | 0x10000;
    *(_DWORD *)(a2 + 916) = v89;
    uint64_t v90 = v10 + 1848 * a3;
    int v91 = v89 | ((*(unsigned char *)(v90 + 1429) & 0xF) << 8);
    *(_DWORD *)(a2 + 916) = v91;
    int v88 = v91 | ((*(unsigned char *)(v90 + 1430) & 0xF) << 12);
  }
  *(_DWORD *)(a2 + 916) = v88 | 0x2DA00000;
  int v92 = (unsigned int *)(v10 + 1848 * a3 + 1436);
  unsigned int v93 = *v92;
  if (*(unsigned char *)(v112 + 604 * v113 + 3))
  {
    int v94 = 0;
    if ((v93 & 7) != 0) {
      *int v92 = (v93 + 7) & 0xFFFFFFF8;
    }
  }
  else
  {
    int v94 = *v92 & 7;
  }
  *(_DWORD *)(a2 + 924) = (v94 << 15) | 0x2D800000;
  unsigned int v95 = *(_DWORD **)(v114 + 256);
  unsigned int v96 = v95[626];
  unint64_t v118 = 0;
  uint64_t v119 = 0;
  if (!CAVDAvcDecoder::GetSDataMemInfo((uint64_t)v95, v109, &v119, &v118)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v117 = v96;
  int v97 = 956 * v109;
  uint64_t v98 = v119;
  if (!*(void *)v119 && !*(_DWORD *)(v119 + 152) && !*(_DWORD *)(v119 + 156)) {
    goto LABEL_101;
  }
  int v99 = v118;
  if (HIDWORD(v118) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)int v121 = "populateSliceRegisters";
    *(_WORD *)&v121[8] = 1024;
    v122[0] = 1721;
    _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
    int v99 = v118;
  }
  uint64_t result = CAHDec::addToPatcherList(v114, (void *)v98, v97 + 3028, v99, 0x3FFFFFFFFFFLL, 32, 1023, 4);
  if (result) {
    return result;
  }
  uint64_t v98 = v119;
  if (!*(void *)v119)
  {
LABEL_101:
    if (!*(_DWORD *)(v98 + 152) && !*(_DWORD *)(v98 + 156))
    {
LABEL_109:
      unsigned int v103 = *(_DWORD *)(v10 + 1848 * a3 + 16) - (*v92 >> 3);
      *(_DWORD *)(a2 + 936) = v103;
      if (v95[590] != 1) {
        return 0;
      }
      *(void *)(a2 + 944) = 0;
      unsigned int v104 = *(unsigned __int16 *)(v10 + 1848 * a3 + 1840);
      if (v95[605])
      {
        uint64_t result = 0;
        if (v103 < v104) {
          unsigned int v104 = v103;
        }
        if (v94) {
          BOOL v105 = v104 == 0;
        }
        else {
          BOOL v105 = 0;
        }
        if (v105) {
          unsigned int v104 = 1;
        }
        unsigned int v106 = v117 & 0x10000 | v104;
      }
      else
      {
        if ((v117 & 0x200000) != 0)
        {
          int v108 = 0;
          if (v94 && !*(_WORD *)(v10 + 1848 * a3 + 1840))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(void *)int v121 = "int CAHDecCatnipAvc::populateSliceRegisters(AvcSliceRegisters *, int)";
              _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: %s: expect off_to_prot_data to be set when slice header is not byte aligned\n", buf, 0xCu);
              unsigned int v103 = *(_DWORD *)(a2 + 936);
              int v108 = *(_DWORD *)(a2 + 948) & 0x1F0000;
            }
            else
            {
              int v108 = 0;
            }
            unsigned int v104 = 1;
          }
        }
        else
        {
          int v108 = 0;
          if (v94) {
            ++v104;
          }
        }
        uint64_t result = 0;
        if (v104 >= v103) {
          unsigned int v104 = v103;
        }
        unsigned int v106 = v108 & 0xFFDFFFFF | (v104 << 22) | (unsigned __int16)v117 | (((v117 >> 20) & 1) << 21);
      }
      *(_DWORD *)(a2 + 948) = v106;
      return result;
    }
  }
  int v100 = v97 + 3036;
  int v101 = v118;
  if (HIDWORD(v118))
  {
    uint64_t v102 = v114;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)int v121 = "populateSliceRegisters";
      *(_WORD *)&v121[8] = 1024;
      v122[0] = 1722;
      _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", buf, 0x12u);
      int v101 = v118;
    }
  }
  else
  {
    uint64_t v102 = v114;
  }
  uint64_t result = CAHDec::addToPatcherList(v102, (void *)v98, v100, v101, 0xFFFFFFFFLL, 0, -1, 4);
  if (!result) {
    goto LABEL_109;
  }
  return result;
}

uint64_t CAHDecCatnipAvc::populateCommonRegisters(CAHDecCatnipAvc *this)
{
  *(void *)(*((void *)this + 33) + 4) = 0x1000000001;
  return 0;
}

uint64_t CAHDecCatnipAvc::updateCommonRegisters(CAHDecCatnipAvc *this, int a2)
{
  uint64_t v2 = *((void *)this + 33);
  *(_DWORD *)(v2 + 12) = a2;
  *(_DWORD *)(v2 + 2pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = -559035650;
  return 0;
}

void CAHDecCatnipAvc::copyScalingList(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = *a2 & 0xFEFFFFC0 | 0x1000000;
  *a2 = v8;
  do
  {
    v8 |= (*(unsigned char *)(a4 + v7) == 0) << v7;
    *a2 = v8;
    ++v7;
  }
  while (v7 != 6);
  unsigned int v9 = v8 & 0xFFFFF03F;
  *a2 = v8 & 0xFFFFF03F;
  if (a7 >= 7)
  {
    uint64_t v10 = (a7 - 6);
    uint64_t v11 = (unsigned __int8 *)(a4 + 6);
    uint64_t v12 = &dword_223AD0A34;
    do
    {
      int v13 = *v11++;
      BOOL v14 = v13 == 0;
      int v16 = *v12++;
      char v15 = v16;
      int v17 = v14;
      v9 |= ((v17 << v15) & 0x3F) << 6;
      *a2 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 1;
  uint64_t v20 = a3;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v22 = *(_DWORD *)(v20 + i) & 0xFFFFFF | (*(unsigned __int8 *)(v19 + i - 1) << 24);
      *(_DWORD *)(v20 + i) = v22;
      unsigned int v23 = v22 & 0xFF00FFFF | (*(unsigned __int8 *)(v19 + i) << 16);
      *(_DWORD *)(v20 + i) = v23;
      unsigned int v24 = v23 & 0xFFFF00FF | (*(unsigned __int8 *)(v19 + i + 1) << 8);
      *(_DWORD *)(v20 + i) = v24;
      *(_DWORD *)(v20 + i) = v24 & 0xFFFFFF00 | *(unsigned __int8 *)(v19 + i + 2);
    }
    ++v18;
    v20 += 16;
    v19 += 16;
  }
  while (v18 != 6);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 96;
  do
  {
    int v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = a6 + ((uint64_t)dword_223AD0A4C[v25] << 6);
    do
    {
      uint64_t v31 = (unsigned __int8 *)(v30 + (v28 & 0x7FFFFFE0 | v29 & 4 | v27 & 0x18));
      int v32 = *(_DWORD *)(v26 + v28) & 0xFFFFFF | (*v31 << 24);
      *(_DWORD *)(v26 + v28) = v32;
      unsigned int v33 = v32 & 0xFF00FFFF | (v31[1] << 16);
      *(_DWORD *)(v26 + v28) = v33;
      unsigned int v34 = v33 & 0xFFFF00FF | (v31[2] << 8);
      *(_DWORD *)(v26 + v28) = v34;
      *(_DWORD *)(v26 + v28) = v34 & 0xFFFFFF00 | v31[3];
      ++v29;
      v28 += 4;
      v27 += 8;
    }
    while (v28 != 64);
    ++v25;
    v26 += 64;
  }
  while (v25 != 6);
}

uint64_t CAHDecCatnipAvc::AvcSeqScalingListFallBack(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v3 = 12;
    }
    uint64_t v4 = a2 + 22;
    uint64_t v5 = (_OWORD *)(a2 + 34);
    while (v2 > 5)
    {
      if (*(unsigned char *)(v4 + v2 - 12))
      {
        if (*(unsigned char *)(v4 + v2) == 2)
        {
          unsigned int v9 = (_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 130);
          if (v2 == 6 || (v2 & 0x7FFFFFFD) == 8)
          {
            *unsigned int v9 = avcDefaultIntraScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223AD0AB4;
            long long v10 = xmmword_223AD0AC4;
            long long v11 = unk_223AD0AD4;
          }
          else
          {
            *unsigned int v9 = avcDefaultInterScalingList8x8;
            *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 146) = unk_223AD0A74;
            long long v10 = xmmword_223AD0A84;
            long long v11 = unk_223AD0A94;
          }
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 162) = v10;
          *(_OWORD *)(a2 + ((unint64_t)(v2 - 6) << 6) + 178) = v11;
        }
        goto LABEL_24;
      }
      if ((v2 - 8) <= 0xFFFFFFFD)
      {
        uint64_t result = a2 + 130;
        int v13 = (_OWORD *)(a2 + 130 + ((unint64_t)(v2 - 6) << 6));
        BOOL v14 = (long long *)(a2 + 130 + ((unint64_t)(v2 - 8) << 6));
        long long v15 = *v14;
        long long v16 = v14[1];
        long long v17 = v14[3];
        v13[2] = v14[2];
        v13[3] = v17;
        *int v13 = v15;
        v13[1] = v16;
        uint64_t v8 = (v2 - 2);
LABEL_21:
        *(unsigned char *)(v4 + v2) = *(unsigned char *)(a2 + v8 + 22);
      }
LABEL_24:
      ++v2;
      ++v5;
      if (v3 == v2) {
        return result;
      }
    }
    if (*(unsigned char *)(v4 + v2 - 12)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (v6 || v2 == 3) {
      goto LABEL_24;
    }
    uint64_t v8 = (v2 - 1);
    *uint64_t v5 = *(_OWORD *)(a2 + 16 * v8 + 34);
    goto LABEL_21;
  }
  return result;
}

long long *CAHDecCatnipAvc::AvcPicScalingListFallBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 96))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    if (*(unsigned char *)(a2 + 4) == 3) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = a3 + 97;
    uint64_t v6 = -96;
    uint64_t result = &avcDefaultIntraScalingList8x8;
    do
    {
      if (v3 > 5)
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if (*(unsigned char *)(v5 + v3 + 12) == 2)
          {
            unsigned int v9 = (_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 217);
            if (v3 == 6 || (v3 & 0x7FFFFFFD) == 8)
            {
              *unsigned int v9 = avcDefaultIntraScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223AD0AB4;
              long long v10 = xmmword_223AD0AC4;
              long long v11 = unk_223AD0AD4;
            }
            else
            {
              *unsigned int v9 = avcDefaultInterScalingList8x8;
              *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 233) = unk_223AD0A74;
              long long v10 = xmmword_223AD0A84;
              long long v11 = unk_223AD0A94;
            }
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 249) = v10;
            *(_OWORD *)(a3 + ((unint64_t)(v3 - 6) << 6) + 265) = v11;
          }
          goto LABEL_31;
        }
        if ((v3 - 8) <= 0xFFFFFFFD)
        {
          uint64_t v12 = (_OWORD *)(a3 + 217 + ((unint64_t)(v3 - 6) << 6));
          int v13 = (long long *)(a3 + 217 + ((unint64_t)(v3 - 8) << 6));
          long long v14 = *v13;
          long long v15 = v13[1];
          long long v16 = v13[3];
          v12[2] = v13[2];
          v12[3] = v16;
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v17 = a3 + (v3 - 2);
          goto LABEL_29;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          uint64_t v18 = (v3 - 6);
          uint64_t v19 = a3 + (v18 << 6);
          uint64_t v20 = a2 + (v18 << 6);
          long long v21 = *(_OWORD *)(v20 + 130);
          long long v22 = *(_OWORD *)(v20 + 146);
          long long v23 = *(_OWORD *)(v20 + 162);
          *(_OWORD *)(v19 + 265) = *(_OWORD *)(v20 + 178);
          *(_OWORD *)(v19 + 249) = v23;
          *(_OWORD *)(v19 + 233) = v22;
          *(_OWORD *)(v19 + 217) = v21;
LABEL_23:
          char v24 = *(unsigned char *)(a2 + 22 + v3);
LABEL_30:
          *(unsigned char *)(v5 + v3 + 12) = v24;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + v3))
        {
          if ((*(unsigned char *)(v5 + v3 + 12) & 2) != 0)
          {
            if (v3 > 2) {
              long long v8 = avcDefaultInterScalingList4x4;
            }
            else {
              long long v8 = avcDefaultIntraScalingList4x4;
            }
            *(_OWORD *)(v5 + v6 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v8;
          }
          goto LABEL_31;
        }
        if (v3 && v3 != 3)
        {
          uint64_t v25 = (v3 - 1);
          *(_OWORD *)(v5 + v6 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(a3 + 16 * v25 + 121);
          uint64_t v17 = a3 + v25;
LABEL_29:
          char v24 = *(unsigned char *)(v17 + 109);
          goto LABEL_30;
        }
        if (*(unsigned char *)(a2 + 9))
        {
          *(_OWORD *)(v5 + v6 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(a2 + v6 + 130);
          goto LABEL_23;
        }
      }
LABEL_31:
      ++v3;
      v6 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CAHDecCatnipAvc::populateSequenceRegisters(CAHDecCatnipAvc *this)
{
  uint64_t v2 = *((void *)this + 32);
  unint64_t v3 = (_DWORD *)*((void *)this + 33);
  int v4 = *(_DWORD *)(v2 + 3612);
  int v5 = *(_DWORD *)(v2 + 3616);
  uint64_t v6 = *(void *)(v2 + 3296);
  uint64_t v7 = *(void *)(v2 + 3304);
  uint64_t v8 = v6 + 2224 * v4;
  v3[10] = 0;
  __int16 v9 = *(_WORD *)(v8 + 1558);
  v3[10] = (2 * (v9 & 0xFFF)) | 1;
  v3[10] = ((*(_WORD *)(v8 + 1560) & 0xFFF) << 17) | (2 * (v9 & 0xFFF)) | 0x10001;
  v3[11] = 0;
  int v10 = *(unsigned char *)(v8 + 1564) & 1;
  v3[11] = v10;
  int v11 = v10 | ((*(unsigned char *)(v7 + 604 * v5 + 95) != 0) << 7) | 0x2800;
  v3[11] = v11;
  uint64_t v12 = (unsigned char *)(v8 + 4);
  int v13 = *(unsigned __int8 *)(v8 + 4);
  if (*(unsigned char *)(v8 + 4)) {
    int v13 = (*(unsigned char *)(v6 + 2224 * v4 + 7) & 0xF) << 15;
  }
  int v14 = v13 | v11;
  v3[11] = v14;
  long long v15 = (unsigned char *)(v6 + 2224 * v4);
  int v16 = v14 & 0x7F87A881 | ((v15[6] & 0xF) << 19);
  v3[11] = v16;
  unsigned int v17 = v16 & 0xFF7FFFFF | ((v15[5] & 1) << 23);
  v3[11] = v17;
  v3[11] = v17 & 0xFCFFFFFF | ((*v12 & 3) << 24);
  if (v15[9])
  {
    if (*v12 == 3) {
      int v18 = 12;
    }
    else {
      int v18 = 8;
    }
    uint64_t v19 = CAHDecCatnipAvc::AvcSeqScalingListFallBack((uint64_t)this, v8);
    CAHDecCatnipAvc::copyScalingList(v19, v3 + 12, *((void *)this + 33) + 992, v6 + 2224 * v4 + 22, v6 + 2224 * v4 + 34, v6 + 2224 * v4 + 130, v18);
  }
  return 0;
}

uint64_t CAHDecCatnipAvc::populatePictureRegisters(CAHDecCatnipAvc *this)
{
  uint64_t v316 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(_DWORD *)(v2 + 3612);
  int v4 = *(_DWORD *)(v2 + 3616);
  uint64_t v5 = *(void *)(v2 + 3296);
  uint64_t v6 = *(void *)(v2 + 3304);
  uint64_t v293 = *(void *)(v2 + 2088);
  uint64_t v299 = *(unsigned int *)(v2 + 3152);
  int v296 = *(_DWORD *)(v2 + 3132);
  int v297 = *(_DWORD *)(v2 + 2644);
  int v7 = *(unsigned __int8 *)(v2 + 8);
  long long v8 = *(_OWORD *)(v2 + 7016);
  v315[8] = *(_OWORD *)(v2 + 7000);
  v315[9] = v8;
  long long v9 = *(_OWORD *)(v2 + 7048);
  v315[10] = *(_OWORD *)(v2 + 7032);
  v315[11] = v9;
  long long v10 = *(_OWORD *)(v2 + 6952);
  v315[4] = *(_OWORD *)(v2 + 6936);
  v315[5] = v10;
  long long v11 = *(_OWORD *)(v2 + 6984);
  v315[6] = *(_OWORD *)(v2 + 6968);
  v315[7] = v11;
  long long v12 = *(_OWORD *)(v2 + 6888);
  v315[0] = *(_OWORD *)(v2 + 6872);
  v315[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 6920);
  v315[2] = *(_OWORD *)(v2 + 6904);
  v315[3] = v13;
  uint64_t v295 = *(unsigned int *)(v2 + 7064);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  long long v15 = (unsigned __int8 *)*((void *)this + 32);
  uint64_t v16 = *((void *)this + 33);
  int v17 = v15[2675];
  unsigned int v18 = v15[2674];
  if (!(v17 | v18)) {
    goto LABEL_41;
  }
  uint64_t v19 = v5 + 2224 * v3;
  unsigned int v20 = *(unsigned __int8 *)(v19 + 6);
  unsigned int v21 = *(unsigned __int8 *)(v19 + 7);
  if (v20 > v21) {
    LOWORD(v21) = v20;
  }
  int v22 = ((_WORD)v21 + 9) & 0x1FE;
  if (v22 == 8)
  {
    int v24 = v7;
    unsigned int v28 = 1;
    int v26 = 8;
    if (!v15[2675]) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  int v23 = v15[2672];
  int v24 = v7;
  if (v22 != 12)
  {
    if (v22 == 10)
    {
      BOOL v25 = v23 == 0;
      if (v23) {
        int v26 = 10;
      }
      else {
        int v26 = 9;
      }
      int v27 = 2;
      goto LABEL_15;
    }
    int v26 = 27;
    unsigned int v28 = 27;
    if (!v17) {
      goto LABEL_30;
    }
LABEL_23:
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) && (v17 == 2 && v26 == 8 || v17 == 3 && (v26 - 9) <= 1))
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = "populatePictureRegisters";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = v26;
      WORD1(buf[2]) = 1024;
      HIDWORD(buf[2]) = v17;
      int v29 = &_os_log_internal;
      uint64_t v30 = "AppleAVD: [ERROR] %s(): chroma compression format %d lossy level %d not supported\n";
      goto LABEL_38;
    }
    goto LABEL_30;
  }
  BOOL v25 = v23 == 0;
  if (v23) {
    int v26 = 12;
  }
  else {
    int v26 = 11;
  }
  int v27 = 4;
LABEL_15:
  if (v25) {
    unsigned int v28 = v27;
  }
  else {
    unsigned int v28 = v27 + 1;
  }
  if (v17) {
    goto LABEL_23;
  }
LABEL_30:
  int v7 = v24;
  if (v18 && (v18 == 3 && v28 - 9 < 2 || v28 <= 0x1A && ((1 << v28) & 0x4C00000) != 0 && v18 <= 2))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "populatePictureRegisters";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = v28;
    WORD1(buf[2]) = 1024;
    HIDWORD(buf[2]) = v18;
    int v29 = &_os_log_internal;
    uint64_t v30 = "AppleAVD: [ERROR] %s(): luma compression format %d lossy level %d not supported\n";
LABEL_38:
    uint64_t v31 = (uint8_t *)buf;
    uint32_t v32 = 24;
    goto LABEL_39;
  }
LABEL_41:
  int v290 = v14;
  int v291 = *((_DWORD *)this + 2961) * v299;
  unsigned int v34 = (char *)this + 264;
  *(_DWORD *)(v16 + 52) = 766509056;
  if (**(_DWORD **)(*((void *)this + 32) + 3312) == 5) {
    int v35 = 766517248;
  }
  else {
    int v35 = 766509056;
  }
  if (v14) {
    int v36 = 688;
  }
  else {
    int v36 = 672;
  }
  if (v297) {
    int v37 = 4160;
  }
  else {
    int v37 = 64;
  }
  unsigned int v38 = v37 & 0xFFFFFFF0 | ((v297 == 1) << 10) | v36 & 0xFFFFFFF0 | (4 * (v17 & 3)) | v18 & 3 | v35;
  *(_DWORD *)(v16 + 52) = v38;
  uint64_t v39 = (unsigned char *)*((void *)this + 32);
  int v40 = v38 | ((v39[2652] & 1) << 19);
  *(_DWORD *)(v16 + 52) = v40;
  unsigned int v41 = v40 & 0xFFFBFFFF | ((v39[2653] & 1) << 18);
  *(_DWORD *)(v16 + 52) = v41;
  *(_DWORD *)(v16 + 52) = v41 & 0xFFFDFFFF | ((v39[2654] & 1) << 17);
  *(void *)(v16 + 56) = 0x1000000;
  uint64_t v42 = v5 + 2224 * v3;
  int v43 = (16 * (*(_WORD *)(v42 + 1558) & 0xFFF)) | 0xF;
  *(_DWORD *)(v16 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v43;
  LODWORD(v39) = v43 | (*(unsigned __int16 *)(v42 + 1560) << 20) | 0xF0000;
  *(void *)(v16 + 64) = 0;
  *(_DWORD *)(v16 + 6pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v39;
  LODWORD(v42) = (*(unsigned char *)(v42 + 8) & 1) << 18;
  *(_DWORD *)(v16 + 68) = v42;
  signed int v44 = (unsigned char *)(v6 + 604 * v4);
  LODWORD(v42) = v42 & 0xFFF7FFFF | ((v44[93] & 1) << 19);
  *(_DWORD *)(v16 + 68) = v42;
  LODWORD(v42) = v42 & 0xFFEFFFFF | ((v44[3] & 1) << 20);
  *(_DWORD *)(v16 + 68) = v42;
  *(_DWORD *)(v16 + 68) = v42 | ((**(_DWORD **)(*((void *)this + 32) + 3312) != 5) << 21);
  unsigned int v45 = *(_DWORD *)(v16 + 72) & 0xFFFFFC1F | (32 * (v44[91] & 0x1F));
  *(_DWORD *)(v16 + 72) = v45;
  *(_DWORD *)(v16 + 72) = v45 & 0xFFFFFFE0 | v44[601] & 0x1F;
  if (v44[96])
  {
    if (*(unsigned char *)(v5 + 2224 * v3 + 4) == 3) {
      int v46 = 12;
    }
    else {
      int v46 = 8;
    }
    uint64_t v47 = *(void *)v34 + 1476;
    BOOL v48 = CAHDecCatnipAvc::AvcPicScalingListFallBack(v14, v5 + 2224 * v3, v6 + 604 * v4);
    CAHDecCatnipAvc::copyScalingList((uint64_t)v48, (unsigned int *)(v16 + 76), v47, v6 + 604 * v4 + 109, v6 + 604 * v4 + 121, v6 + 604 * v4 + 217, v46);
  }
  uint64_t v49 = 0;
  *(_DWORD *)(v16 + 8pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *((_DWORD *)this + 2966);
  *(_DWORD *)(v16 + 84) = *((_DWORD *)this + 2967);
  *(_DWORD *)(v16 + 88) = 3145786;
  uint64_t v50 = (char *)this + 9008;
  do
  {
    *(_DWORD *)(*(void *)v34 + v49 + 92) = 0;
    uint64_t v51 = *(void *)v34 + v49;
    int v52 = *(_DWORD *)(v51 + 92);
    *(_DWORD *)(v51 + 92) = 0;
    *(_DWORD *)(*(void *)v34 + v49 + 92) ^= 0xFFFFFF00;
    uint64_t v53 = *(void *)v34 + v49;
    int v54 = *(_DWORD *)(v53 + 92);
    *(_DWORD *)(v53 + 92) = v52;
    if (*(void *)v50 || *((_DWORD *)v50 + 38) || *((_DWORD *)v50 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v50, (int)v49 + 92, 0, 0xFFFFFFFFLL, 8, v54, 4);
      if (result) {
        return result;
      }
    }
    *(_DWORD *)(*((void *)this + 33) + v49 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + v49 + 12pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_DWORD *)(*((void *)this + 33) + v49 + 120) & 0x800001FF | (((*((_DWORD *)this + 2960) >> 9) & 0x3FFFFF) << 9);
    *(_DWORD *)(*((void *)this + 33) + v49 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    uint64_t v55 = *((void *)this + 33) + v49;
    int v56 = *(_DWORD *)(v55 + 540);
    *(_DWORD *)(v55 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
    *(_DWORD *)(*((void *)this + 33) + v49 + 540) ^= 0x3FFu;
    uint64_t v57 = *((void *)this + 33) + v49;
    int v58 = *(_DWORD *)(v57 + 540);
    *(_DWORD *)(v57 + 54pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v56;
    if (*(void *)v50 || *((_DWORD *)v50 + 38) || *((_DWORD *)v50 + 39))
    {
      uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v50, (int)v49 + 540, 0, 0x3FFFFFFFFFFLL, 32, v58, 4);
      if (result) {
        return result;
      }
    }
    v49 += 4;
    v50 += 176;
  }
  while (v49 != 28);
  *(_DWORD *)(*(void *)v34 + 148) = 0;
  *(_DWORD *)(*(void *)v34 + 568) = 0;
  if ((*(unsigned char *)(v16 + 54) & 8) == 0) {
    goto LABEL_350;
  }
  uint64_t v59 = *((void *)this + 33);
  uint64_t v60 = *(void *)(*((void *)this + 32) + 2680);
  long long v312 = 0u;
  long long v313 = 0u;
  long long v310 = 0u;
  long long v311 = 0u;
  long long v308 = 0u;
  long long v309 = 0u;
  long long v306 = 0u;
  long long v307 = 0u;
  long long v305 = 0u;
  memset(buf, 0, sizeof(buf));
  int v61 = (*(_DWORD *)(v59 + 16) & 0xF) << 9;
  buf[0] = v60;
  int v62 = *(_DWORD *)(v59 + 148);
  *(_DWORD *)(v59 + 148) = 0;
  *(_DWORD *)(*((void *)this + 33) + 148) ^= 0xFFFFFF00;
  uint64_t v63 = *((void *)this + 33);
  int v64 = *(_DWORD *)(v63 + 148);
  *(_DWORD *)(v63 + 148) = v62;
  if (v60 || DWORD2(v312) || (int v65 = HIDWORD(v312)) != 0)
  {
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 148, v61, 0xFFFFFFFFLL, 8, v64, 4);
    if (result) {
      return result;
    }
    uint64_t v67 = buf[0];
    int v66 = DWORD2(v312);
    int v65 = HIDWORD(v312);
  }
  else
  {
    int v66 = 0;
    uint64_t v67 = 0;
  }
  if ((int v68 = *(_DWORD *)(*(void *)v34 + 568),
        *(_DWORD *)(*(void *)v34 + 568) = 0,
        *(_DWORD *)(*(void *)v34 + 568) ^= 0x3FFu,
        int v69 = *(_DWORD *)(*(void *)v34 + 568),
        *(_DWORD *)(*(void *)v34 + 568) = v68,
        !v67)
    && !v66
    && !v65
    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, buf, 568, v61, 0x3FFFFFFFFFFLL, 32, v69, 4), !result))
  {
LABEL_350:
    int v70 = v7;
    *(_DWORD *)(*((void *)this + 33) + 152) = 0;
    uint64_t v71 = *((void *)this + 33);
    int v72 = *(_DWORD *)(v71 + 152);
    *(_DWORD *)(v71 + 152) = 0;
    *(_DWORD *)(*((void *)this + 33) + 152) ^= 0xFFFFFF00;
    uint64_t v73 = *((void *)this + 33);
    int v74 = *(_DWORD *)(v73 + 152);
    *(_DWORD *)(v73 + 152) = v72;
    if (!*((void *)this + 1302) && !*((_DWORD *)this + 2642) && !*((_DWORD *)this + 2643)) {
      goto LABEL_351;
    }
    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1302, 152, 0, 0xFFFFFFFFLL, 8, v74, 4);
    if (!result)
    {
LABEL_351:
      if ((*(_DWORD *)(*(void *)v34 + 572) = 0,
            int v75 = *(_DWORD *)(*(void *)v34 + 572),
            *(_DWORD *)(*(void *)v34 + 572) = 0,
            *(_DWORD *)(*(void *)v34 + 572) ^= 0x3FFu,
            int v76 = *(_DWORD *)(*(void *)v34 + 572),
            *(_DWORD *)(*(void *)v34 + 572) = v75,
            !*((void *)this + 1302))
        && !*((_DWORD *)this + 2642)
        && !*((_DWORD *)this + 2643)
        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1302, 572, 0, 0x3FFFFFFFFFFLL, 32, v76, 4),
            !result))
      {
        *(_DWORD *)(*((void *)this + 33) + 156) = 0;
        uint64_t v77 = *((void *)this + 33);
        int v78 = *(_DWORD *)(v77 + 156);
        *(_DWORD *)(v77 + 156) = 0;
        *(_DWORD *)(*((void *)this + 33) + 156) ^= 0xFFFFFF00;
        uint64_t v79 = *((void *)this + 33);
        int v80 = *(_DWORD *)(v79 + 156);
        *(_DWORD *)(v79 + 156) = v78;
        if (!*((void *)this + 1324) && !*((_DWORD *)this + 2686) && !*((_DWORD *)this + 2687)) {
          goto LABEL_352;
        }
        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1324, 156, 0, 0xFFFFFFFFLL, 8, v80, 4);
        if (!result)
        {
LABEL_352:
          if ((*(_DWORD *)(*(void *)v34 + 576) = 0,
                int v81 = *(_DWORD *)(*(void *)v34 + 576),
                *(_DWORD *)(*(void *)v34 + 576) = 0,
                *(_DWORD *)(*(void *)v34 + 576) ^= 0x3FFu,
                int v82 = *(_DWORD *)(*(void *)v34 + 576),
                *(_DWORD *)(*(void *)v34 + 576) = v81,
                !*((void *)this + 1324))
            && !*((_DWORD *)this + 2686)
            && !*((_DWORD *)this + 2687)
            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1324, 576, 0, 0x3FFFFFFFFFFLL, 32, v82, 4), !result))
          {
            *(_DWORD *)(*((void *)this + 33) + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
            uint64_t v83 = *((void *)this + 33);
            int v84 = *(_DWORD *)(v83 + 160);
            *(_DWORD *)(v83 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
            *(_DWORD *)(*((void *)this + 33) + 160) ^= 0xFFFFFF00;
            uint64_t v85 = *((void *)this + 33);
            int v86 = *(_DWORD *)(v85 + 160);
            *(_DWORD *)(v85 + 16pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v84;
            if (!*((void *)this + 1346) && !*((_DWORD *)this + 2730) && !*((_DWORD *)this + 2731)) {
              goto LABEL_353;
            }
            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1346, 160, 0, 0xFFFFFFFFLL, 8, v86, 4);
            if (!result)
            {
LABEL_353:
              if ((*(_DWORD *)(*(void *)v34 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                    int v87 = *(_DWORD *)(*(void *)v34 + 580),
              }
                    *(_DWORD *)(*(void *)v34 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                    *(_DWORD *)(*(void *)v34 + 580) ^= 0x3FFu,
                    int v88 = *(_DWORD *)(*(void *)v34 + 580),
                    *(_DWORD *)(*(void *)v34 + 58pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v87,
                    !*((void *)this + 1346))
                && !*((_DWORD *)this + 2730)
                && !*((_DWORD *)this + 2731)
                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1346, 580, 0, 0x3FFFFFFFFFFLL, 32, v88, 4), !result))
              {
                *(_DWORD *)(*((void *)this + 33) + 164) = 0;
                uint64_t v89 = *((void *)this + 33);
                int v90 = *(_DWORD *)(v89 + 164);
                *(_DWORD *)(v89 + 164) = 0;
                *(_DWORD *)(*((void *)this + 33) + 164) ^= 0xFFFFFF00;
                uint64_t v91 = *((void *)this + 33);
                int v92 = *(_DWORD *)(v91 + 164);
                *(_DWORD *)(v91 + 164) = v90;
                if (!*((void *)this + 1368) && !*((_DWORD *)this + 2774) && !*((_DWORD *)this + 2775)) {
                  goto LABEL_354;
                }
                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1368, 164, 0, 0xFFFFFFFFLL, 8, v92, 4);
                if (!result)
                {
LABEL_354:
                  if ((*(_DWORD *)(*(void *)v34 + 584) = 0,
                        int v93 = *(_DWORD *)(*(void *)v34 + 584),
                        *(_DWORD *)(*(void *)v34 + 584) = 0,
                        *(_DWORD *)(*(void *)v34 + 584) ^= 0x3FFu,
                        int v94 = *(_DWORD *)(*(void *)v34 + 584),
                        *(_DWORD *)(*(void *)v34 + 584) = v93,
                        !*((void *)this + 1368))
                    && !*((_DWORD *)this + 2774)
                    && !*((_DWORD *)this + 2775)
                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1368, 584, 0, 0x3FFFFFFFFFFLL, 32, v94, 4), !result))
                  {
                    *(_DWORD *)(*((void *)this + 33) + 168) = 0;
                    uint64_t v95 = *((void *)this + 33);
                    int v96 = *(_DWORD *)(v95 + 168);
                    *(_DWORD *)(v95 + 168) = 0;
                    *(_DWORD *)(*((void *)this + 33) + 168) ^= 0xFFFFFF00;
                    uint64_t v97 = *((void *)this + 33);
                    int v98 = *(_DWORD *)(v97 + 168);
                    *(_DWORD *)(v97 + 168) = v96;
                    if (!*((void *)this + 1390) && !*((_DWORD *)this + 2818) && !*((_DWORD *)this + 2819)) {
                      goto LABEL_355;
                    }
                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1390, 168, 0, 0xFFFFFFFFLL, 8, v98, 4);
                    if (!result)
                    {
LABEL_355:
                      if ((*(_DWORD *)(*(void *)v34 + 588) = 0,
                            int v99 = *(_DWORD *)(*(void *)v34 + 588),
                            *(_DWORD *)(*(void *)v34 + 588) = 0,
                            *(_DWORD *)(*(void *)v34 + 588) ^= 0x3FFu,
                            int v100 = *(_DWORD *)(*(void *)v34 + 588),
                            *(_DWORD *)(*(void *)v34 + 588) = v99,
                            !*((void *)this + 1390))
                        && !*((_DWORD *)this + 2818)
                        && !*((_DWORD *)this + 2819)
                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1390, 588, 0, 0x3FFFFFFFFFFLL, 32, v100, 4), !result))
                      {
                        *(_DWORD *)(*((void *)this + 33) + 172) = 0;
                        uint64_t v101 = *((void *)this + 33);
                        int v102 = *(_DWORD *)(v101 + 172);
                        *(_DWORD *)(v101 + 172) = 0;
                        *(_DWORD *)(*((void *)this + 33) + 172) ^= 0xFFFFFF00;
                        uint64_t v103 = *((void *)this + 33);
                        int v104 = *(_DWORD *)(v103 + 172);
                        *(_DWORD *)(v103 + 172) = v102;
                        if (!*((void *)this + 1412) && !*((_DWORD *)this + 2862) && !*((_DWORD *)this + 2863)) {
                          goto LABEL_356;
                        }
                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1412, 172, 0, 0xFFFFFFFFLL, 8, v104, 4);
                        if (!result)
                        {
LABEL_356:
                          if ((*(_DWORD *)(*(void *)v34 + 592) = 0,
                                int v105 = *(_DWORD *)(*(void *)v34 + 592),
                                *(_DWORD *)(*(void *)v34 + 592) = 0,
                                *(_DWORD *)(*(void *)v34 + 592) ^= 0x3FFu,
                                int v106 = *(_DWORD *)(*(void *)v34 + 592),
                                *(_DWORD *)(*(void *)v34 + 592) = v105,
                                !*((void *)this + 1412))
                            && !*((_DWORD *)this + 2862)
                            && !*((_DWORD *)this + 2863)
                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1412, 592, 0, 0x3FFFFFFFFFFLL, 32, v106, 4), !result))
                          {
                            *(_DWORD *)(*((void *)this + 33) + 176) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 596) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            uint64_t v107 = *((void *)this + 33);
                            int v108 = *(_DWORD *)(v107 + 180);
                            *(_DWORD *)(v107 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                            *(_DWORD *)(*((void *)this + 33) + 180) ^= 0xFFFFFF00;
                            uint64_t v109 = *((void *)this + 33);
                            int v110 = *(_DWORD *)(v109 + 180);
                            *(_DWORD *)(v109 + 18pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v108;
                            if (!*((void *)this + 1280) && !*((_DWORD *)this + 2598) && !*((_DWORD *)this + 2599)) {
                              goto LABEL_357;
                            }
                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1280, 180, 0, 0xFFFFFFFFLL, 8, v110, 4);
                            if (!result)
                            {
LABEL_357:
                              if ((*(_DWORD *)(*(void *)v34 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                    int v111 = *(_DWORD *)(*(void *)v34 + 600),
                              }
                                    *(_DWORD *)(*(void *)v34 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                    *(_DWORD *)(*(void *)v34 + 600) ^= 0x3FFu,
                                    int v112 = *(_DWORD *)(*(void *)v34 + 600),
                                    *(_DWORD *)(*(void *)v34 + 60pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v111,
                                    !*((void *)this + 1280))
                                && !*((_DWORD *)this + 2598)
                                && !*((_DWORD *)this + 2599)
                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1280, 600, 0, 0x3FFFFFFFFFFLL, 32, v112, 4), !result))
                              {
                                *(_DWORD *)(*((void *)this + 33) + 184) = 0;
                                uint64_t v113 = *((void *)this + 33);
                                int v114 = *(_DWORD *)(v113 + 184);
                                *(_DWORD *)(v113 + 184) = 0;
                                *(_DWORD *)(*((void *)this + 33) + 184) ^= 0xFFFFFF00;
                                uint64_t v115 = *((void *)this + 33);
                                int v116 = *(_DWORD *)(v115 + 184);
                                *(_DWORD *)(v115 + 184) = v114;
                                if (!*((void *)this + 1456) && !*((_DWORD *)this + 2950) && !*((_DWORD *)this + 2951)) {
                                  goto LABEL_358;
                                }
                                uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 184, v291, 0xFFFFFFFFLL, 8, v116, 4);
                                if (!result)
                                {
LABEL_358:
                                  if ((*(_DWORD *)(*(void *)v34 + 604) = 0,
                                        int v117 = *(_DWORD *)(*(void *)v34 + 604),
                                        *(_DWORD *)(*(void *)v34 + 604) = 0,
                                        *(_DWORD *)(*(void *)v34 + 604) ^= 0x3FFu,
                                        int v118 = *(_DWORD *)(*(void *)v34 + 604),
                                        *(_DWORD *)(*(void *)v34 + 604) = v117,
                                        !*((void *)this + 1456))
                                    && !*((_DWORD *)this + 2950)
                                    && !*((_DWORD *)this + 2951)
                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 1456, 604, v291, 0x3FFFFFFFFFFLL, 32, v118, 4), !result))
                                  {
                                    *(_DWORD *)(*((void *)this + 33) + 188) = 0;
                                    uint64_t v119 = *((void *)this + 33);
                                    int v120 = *(_DWORD *)(v119 + 188);
                                    *(_DWORD *)(v119 + 188) = 0;
                                    *(_DWORD *)(*((void *)this + 33) + 188) ^= 0xFFFFFF80;
                                    uint64_t v121 = *((void *)this + 33);
                                    int v122 = *(_DWORD *)(v121 + 188);
                                    *(_DWORD *)(v121 + 188) = v120;
                                    uint64_t v123 = (void *)((char *)this + 176 * v299 + 560);
                                    if (!*v123
                                      && !*((_DWORD *)this + 44 * v299 + 178)
                                      && !*((_DWORD *)this + 44 * v299 + 179))
                                    {
                                      goto LABEL_359;
                                    }
                                    uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v299 + 70, 188, 0, 0xFFFFFFFFLL, 7, v122, 4);
                                    if (!result)
                                    {
LABEL_359:
                                      if ((*(_DWORD *)(*(void *)v34 + 608) = 0,
                                            int v124 = *(_DWORD *)(*(void *)v34 + 608),
                                            *(_DWORD *)(*(void *)v34 + 608) = 0,
                                            *(_DWORD *)(*(void *)v34 + 608) ^= 0x3FFu,
                                            int v125 = *(_DWORD *)(*(void *)v34 + 608),
                                            *(_DWORD *)(*(void *)v34 + 608) = v124,
                                            !*v123)
                                        && !*((_DWORD *)this + 44 * v299 + 178)
                                        && !*((_DWORD *)this + 44 * v299 + 179)
                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v123, 608, 0, 0x3FFFFFFFFFFLL, 32, v125, 4), !result))
                                      {
                                        *(_DWORD *)(*(void *)v34 + 192) = 0;
                                        int v126 = *(_DWORD *)(*(void *)v34 + 192);
                                        *(_DWORD *)(*(void *)v34 + 192) = 0;
                                        *(_DWORD *)(*(void *)v34 + 192) ^= 0xFFFFFF80;
                                        int v127 = *(_DWORD *)(*(void *)v34 + 192);
                                        *(_DWORD *)(*(void *)v34 + 192) = v126;
                                        uint64_t v128 = (void *)(v293 + 8);
                                        if (!*(void *)(v293 + 8)
                                          && !*(_DWORD *)(v293 + 160)
                                          && !*(_DWORD *)(v293 + 164))
                                        {
                                          goto LABEL_360;
                                        }
                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)(v293 + 8), 192, *(_DWORD *)(v293 + 60), 0xFFFFFFFFLL, 7, v127, 4);
                                        if (!result)
                                        {
LABEL_360:
                                          if ((*(_DWORD *)(*(void *)v34 + 612) = 0,
                                                int v129 = *(_DWORD *)(*(void *)v34 + 612),
                                                *(_DWORD *)(*(void *)v34 + 612) = 0,
                                                *(_DWORD *)(*(void *)v34 + 612) ^= 0x3FFu,
                                                int v130 = *(_DWORD *)(*(void *)v34 + 612),
                                                *(_DWORD *)(*(void *)v34 + 612) = v129,
                                                !*v128)
                                            && !*(_DWORD *)(v293 + 160)
                                            && !*(_DWORD *)(v293 + 164)
                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 612, *(_DWORD *)(v293 + 60), 0x3FFFFFFFFFFLL, 32, v130, 4), !result))
                                          {
                                            *(_DWORD *)(*((void *)this + 33) + 196) = 0;
                                            uint64_t v131 = *((void *)this + 33);
                                            int v132 = *(_DWORD *)(v131 + 196);
                                            *(_DWORD *)(v131 + 196) = 0;
                                            *(_DWORD *)(*((void *)this + 33) + 196) ^= 0xFFFFFF80;
                                            uint64_t v133 = *((void *)this + 33);
                                            int v134 = *(_DWORD *)(v133 + 196);
                                            *(_DWORD *)(v133 + 196) = v132;
                                            int v135 = (void *)((char *)this + 176 * v299 + 4784);
                                            if (!*v135
                                              && !*((_DWORD *)this + 44 * v299 + 1234)
                                              && !*((_DWORD *)this + 44 * v299 + 1235))
                                            {
                                              goto LABEL_361;
                                            }
                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v299 + 598, 196, 0, 0xFFFFFFFFLL, 7, v134, 4);
                                            if (!result)
                                            {
LABEL_361:
                                              if ((*(_DWORD *)(*(void *)v34 + 616) = 0,
                                                    int v136 = *(_DWORD *)(*(void *)v34 + 616),
                                                    *(_DWORD *)(*(void *)v34 + 616) = 0,
                                                    *(_DWORD *)(*(void *)v34 + 616) ^= 0x3FFu,
                                                    int v137 = *(_DWORD *)(*(void *)v34 + 616),
                                                    *(_DWORD *)(*(void *)v34 + 616) = v136,
                                                    !*v135)
                                                && !*((_DWORD *)this + 44 * v299 + 1234)
                                                && !*((_DWORD *)this + 44 * v299 + 1235)
                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v135, 616, 0, 0x3FFFFFFFFFFLL, 32, v137, 4), !result))
                                              {
                                                if ((*(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                                      int v138 = *(_DWORD *)(*(void *)v34 + 200),
                                                }
                                                      *(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                      *(_DWORD *)(*(void *)v34 + 200) ^= 0xFFFFFF80,
                                                      int v139 = *(_DWORD *)(*(void *)v34 + 200),
                                                      *(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v138,
                                                      !*v128)
                                                  && !*(_DWORD *)(v293 + 160)
                                                  && !*(_DWORD *)(v293 + 164)
                                                  || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 200, *(_DWORD *)(v293 + 64), 0xFFFFFFFFLL, 7, v139, 4), !result))
                                                {
                                                  if ((*(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0, {
                                                        int v140 = *(_DWORD *)(*(void *)v34 + 620),
                                                  }
                                                        *(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                        *(_DWORD *)(*(void *)v34 + 620) ^= 0x3FFu,
                                                        int v141 = *(_DWORD *)(*(void *)v34 + 620),
                                                        *(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v140,
                                                        !*v128)
                                                    && !*(_DWORD *)(v293 + 160)
                                                    && !*(_DWORD *)(v293 + 164)
                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 620, *(_DWORD *)(v293 + 64), 0x3FFFFFFFFFFLL, 32, v141, 4), !result))
                                                  {
                                                    if (*(_DWORD *)(*((void *)this + 32) + 2648) != 1) {
                                                      goto LABEL_362;
                                                    }
                                                    if ((int v142 = *(_DWORD *)(*(void *)v34 + 192),
                                                          *(_DWORD *)(*(void *)v34 + 192) = 0,
                                                          *(_DWORD *)(*(void *)v34 + 192) ^= 0xFFFFFF80,
                                                          int v143 = *(_DWORD *)(*(void *)v34 + 192),
                                                          *(_DWORD *)(*(void *)v34 + 192) = v142,
                                                          !*v128)
                                                      && !*(_DWORD *)(v293 + 160)
                                                      && !*(_DWORD *)(v293 + 164)
                                                      || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 192, *(_DWORD *)(v293 + 60), 0xFFFFFFFFLL, 7, v143, 4), !result))
                                                    {
                                                      if ((int v144 = *(_DWORD *)(*(void *)v34 + 612),
                                                            *(_DWORD *)(*(void *)v34 + 612) = 0,
                                                            *(_DWORD *)(*(void *)v34 + 612) ^= 0x3FFu,
                                                            int v145 = *(_DWORD *)(*(void *)v34 + 612),
                                                            *(_DWORD *)(*(void *)v34 + 612) = v144,
                                                            !*v128)
                                                        && !*(_DWORD *)(v293 + 160)
                                                        && !*(_DWORD *)(v293 + 164)
                                                        || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 612, *(_DWORD *)(v293 + 60), 0x3FFFFFFFFFFLL, 32, v145, 4), !result))
                                                      {
                                                        if ((int v146 = *(_DWORD *)(*(void *)v34 + 200), {
                                                              *(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                        }
                                                              *(_DWORD *)(*(void *)v34 + 200) ^= 0xFFFFFF80,
                                                              int v147 = *(_DWORD *)(*(void *)v34 + 200),
                                                              *(_DWORD *)(*(void *)v34 + 20pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v146,
                                                              !*v128)
                                                          && !*(_DWORD *)(v293 + 160)
                                                          && !*(_DWORD *)(v293 + 164)
                                                          || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 200, *(_DWORD *)(v293 + 64), 0xFFFFFFFFLL, 7, v147, 4), !result))
                                                        {
                                                          if ((int v148 = *(_DWORD *)(*(void *)v34 + 620), {
                                                                *(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0,
                                                          }
                                                                *(_DWORD *)(*(void *)v34 + 620) ^= 0x3FFu,
                                                                int v149 = *(_DWORD *)(*(void *)v34 + 620),
                                                                *(_DWORD *)(*(void *)v34 + 62pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v148,
                                                                !*v128)
                                                            && !*(_DWORD *)(v293 + 160)
                                                            && !*(_DWORD *)(v293 + 164)
                                                            || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 620, *(_DWORD *)(v293 + 64), 0x3FFFFFFFFFFLL, 32, v149, 4), !result))
                                                          {
                                                            if ((int v150 = *(_DWORD *)(*(void *)v34 + 188),
                                                                  *(_DWORD *)(*(void *)v34 + 188) = 0,
                                                                  *(_DWORD *)(*(void *)v34 + 188) ^= 0xFFFFFF80,
                                                                  int v151 = *(_DWORD *)(*(void *)v34 + 188),
                                                                  *(_DWORD *)(*(void *)v34 + 188) = v150,
                                                                  !*v128)
                                                              && !*(_DWORD *)(v293 + 160)
                                                              && !*(_DWORD *)(v293 + 164)
                                                              || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 188, *(_DWORD *)(v293 + 72), 0xFFFFFFFFLL, 7, v151, 4), !result))
                                                            {
                                                              if ((int v152 = *(_DWORD *)(*(void *)v34 + 608),
                                                                    *(_DWORD *)(*(void *)v34 + 608) = 0,
                                                                    *(_DWORD *)(*(void *)v34 + 608) ^= 0x3FFu,
                                                                    int v153 = *(_DWORD *)(*(void *)v34 + 608),
                                                                    *(_DWORD *)(*(void *)v34 + 608) = v152,
                                                                    !*v128)
                                                                && !*(_DWORD *)(v293 + 160)
                                                                && !*(_DWORD *)(v293 + 164)
                                                                || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 608, *(_DWORD *)(v293 + 72), 0x3FFFFFFFFFFLL, 32, v153, 4), !result))
                                                              {
                                                                if ((int v154 = *(_DWORD *)(*(void *)v34 + 196),
                                                                      *(_DWORD *)(*(void *)v34 + 196) = 0,
                                                                      *(_DWORD *)(*(void *)v34 + 196) ^= 0xFFFFFF80,
                                                                      int v155 = *(_DWORD *)(*(void *)v34 + 196),
                                                                      *(_DWORD *)(*(void *)v34 + 196) = v154,
                                                                      !*v128)
                                                                  && !*(_DWORD *)(v293 + 160)
                                                                  && !*(_DWORD *)(v293 + 164)
                                                                  || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 196, *(_DWORD *)(v293 + 76), 0xFFFFFFFFLL, 7, v155, 4), !result))
                                                                {
                                                                  if ((int v156 = *(_DWORD *)(*(void *)v34 + 616),
                                                                        *(_DWORD *)(*(void *)v34 + 616) = 0,
                                                                        *(_DWORD *)(*(void *)v34 + 616) ^= 0x3FFu,
                                                                        int v157 = *(_DWORD *)(*(void *)v34 + 616),
                                                                        *(_DWORD *)(*(void *)v34 + 616) = v156,
                                                                        !*v128)
                                                                    && !*(_DWORD *)(v293 + 160)
                                                                    && !*(_DWORD *)(v293 + 164)
                                                                    || (uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v128, 616, *(_DWORD *)(v293 + 76), 0x3FFFFFFFFFFLL, 32, v157, 4), !result))
                                                                  {
LABEL_362:
                                                                    if (*(_DWORD *)(v16 + 52) & 0x2000 | v295)
                                                                    {
                                                                      *((_DWORD *)this + v299 + 116) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 204) = 0;
                                                                      if (v295)
                                                                      {
                                                                        uint64_t v158 = 0;
                                                                        if (v290) {
                                                                          int v159 = 0x2000000;
                                                                        }
                                                                        else {
                                                                          int v159 = 0;
                                                                        }
                                                                        int v286 = v159;
                                                                        do
                                                                        {
                                                                          uint64_t v160 = *((void *)v315 + v158);
                                                                          uint64_t v161 = *(unsigned int *)(v160 + 32);
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) & 0xFFFFFFF | ((v295 << 28) - 0x10000000);
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) &= 0xF3FFFFFF;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) & 0xFDFFFFFF | v286;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) |= 0x1000000u;
                                                                          int v162 = v296 - *(_DWORD *)(v160 + 12);
                                                                          int v163 = v162 & 0x1FFFF;
                                                                          if (v162 < -32768) {
                                                                            int v163 = 98304;
                                                                          }
                                                                          if (v162 < 0x8000) {
                                                                            int v164 = v163;
                                                                          }
                                                                          else {
                                                                            int v164 = 0x7FFF;
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) & 0xFFFE0000 | v164;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) = *(_DWORD *)(*(void *)v34 + 4 * v158 + 204) & 0xFFFDFFFF | (*(unsigned __int8 *)(v160 + 1) << 17);
                                                                          if (*(_DWORD *)(v160 + 28) == 1)
                                                                          {
                                                                            long long v313 = 0u;
                                                                            long long v314 = 0u;
                                                                            long long v311 = 0u;
                                                                            long long v312 = 0u;
                                                                            long long v309 = 0u;
                                                                            long long v310 = 0u;
                                                                            long long v307 = 0u;
                                                                            long long v308 = 0u;
                                                                            long long v305 = 0u;
                                                                            long long v306 = 0u;
                                                                            memset(buf, 0, sizeof(buf));
                                                                            int DPB = AVC_RLM::getDPB(*(void *)(*((void *)this + 32)+ 3104), buf);
                                                                            if (DPB < 1)
                                                                            {
                                                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                              int v302 = 136315138;
                                                                              }
                                                                              long long v303 = "populatePictureRegisters";
                                                                              int v29 = &_os_log_internal;
                                                                              uint64_t v30 = "AppleAVD: ERROR: %s: No ref pics found!\n";
                                                                            }
                                                                            else
                                                                            {
                                                                              uint64_t v166 = DPB;
                                                                              while (v166-- >= 1)
                                                                              {
                                                                                uint64_t v160 = buf[v166];
                                                                                if (!*(_DWORD *)(v160 + 28))
                                                                                {
                                                                                  uint64_t v161 = *(unsigned int *)(v160 + 32);
                                                                                  goto LABEL_224;
                                                                                }
                                                                              }
                                                                              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))return 0xFFFFFFFFLL; {
                                                                              int v302 = 136315138;
                                                                              }
                                                                              long long v303 = "populatePictureRegisters";
                                                                              int v29 = &_os_log_internal;
                                                                              uint64_t v30 = "AppleAVD: ERROR: %s: No non-existing"
                                                                                    " ref frames found!\n";
                                                                            }
                                                                            uint64_t v31 = (uint8_t *)&v302;
                                                                            uint32_t v32 = 12;
                                                                            goto LABEL_39;
                                                                          }
LABEL_224:
                                                                          if (v290)
                                                                          {
                                                                            buf[0] = 0;
                                                                            if (!CAVDAvcDecoder::decodeGetRenderTargetRef(*((void *)this + 32), v161, *(_DWORD *)(v160 + 56), *(_DWORD *)(v160 + 64), buf))
                                                                            {
                                                                              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                              {
                                                                                LOWORD(v302) = 0;
                                                                                int v29 = &_os_log_internal;
                                                                                uint64_t v30 = "AppleAVD: decodeGetRenderTargetRef"
                                                                                      " RETURNED ERROR\n";
                                                                                uint64_t v31 = (uint8_t *)&v302;
                                                                                uint32_t v32 = 2;
LABEL_39:
                                                                                _os_log_impl(&dword_223977000, v29, OS_LOG_TYPE_DEFAULT, v30, v31, v32);
                                                                              }
                                                                              return 0xFFFFFFFFLL;
                                                                            }
                                                                            *(void *)(v160 + 4pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = buf[0] + 8;
                                                                          }
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v158
                                                                                    + 268) = 0;
                                                                          int v300 = 4 * v158;
                                                                          int v292 = 4 * v158 + 268;
                                                                          uint64_t v168 = *((void *)this + 33) + 4 * v158;
                                                                          int v169 = *(_DWORD *)(v168 + 268);
                                                                          *(_DWORD *)(v168 + 268) = 0;
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v158
                                                                                    + 268) ^= 0xFFFFFF80;
                                                                          uint64_t v170 = *((void *)this + 33) + 4 * v158;
                                                                          int v171 = *(_DWORD *)(v170 + 268);
                                                                          *(_DWORD *)(v170 + 268) = v169;
                                                                          unsigned int v294 = v161;
                                                                          uint32_t v172 = (void *)((char *)this
                                                                                          + 176 * v161
                                                                                          + 560);
                                                                          if (*v172
                                                                            || *((_DWORD *)this
                                                                               + 44 * v161
                                                                               + 178)
                                                                            || *((_DWORD *)this
                                                                               + 44 * v161
                                                                               + 179))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this+ 22 * v161+ 70, v292, 0, 0xFFFFFFFFLL, 7, v171, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 624) = 0;
                                                                          int v289 = v300 + 624;
                                                                          uint64_t v173 = *(void *)v34 + 4 * v158;
                                                                          int v174 = *(_DWORD *)(v173 + 624);
                                                                          *(_DWORD *)(v173 + 624) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 624) ^= 0x3FFu;
                                                                          uint64_t v175 = *(void *)v34 + 4 * v158;
                                                                          int v176 = *(_DWORD *)(v175 + 624);
                                                                          *(_DWORD *)(v175 + 624) = v174;
                                                                          if (*v172
                                                                            || *((_DWORD *)this
                                                                               + 44 * v161
                                                                               + 178)
                                                                            || *((_DWORD *)this
                                                                               + 44 * v161
                                                                               + 179))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this+ 22 * v161+ 70, v289, 0, 0x3FFFFFFFFFFLL, 32, v176, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 332) = 0;
                                                                          int v288 = v300 + 332;
                                                                          uint64_t v177 = *(void *)v34 + 4 * v158;
                                                                          int v178 = *(_DWORD *)(v177 + 332);
                                                                          *(_DWORD *)(v177 + 332) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 332) ^= 0xFFFFFF80;
                                                                          uint64_t v179 = *(void *)v34 + 4 * v158;
                                                                          int v180 = *(_DWORD *)(v179 + 332);
                                                                          *(_DWORD *)(v179 + 332) = v178;
                                                                          uint64_t v181 = *(void *)(v160 + 40);
                                                                          if (*(void *)v181
                                                                            || *(_DWORD *)(v181 + 152)
                                                                            || *(_DWORD *)(v181 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v181, v288, *(_DWORD *)(v181 + 52), 0xFFFFFFFFLL, 7, v180, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 688) = 0;
                                                                          int v287 = v300 + 688;
                                                                          uint64_t v182 = *(void *)v34 + 4 * v158;
                                                                          int v183 = *(_DWORD *)(v182 + 688);
                                                                          *(_DWORD *)(v182 + 688) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 688) ^= 0x3FFu;
                                                                          uint64_t v184 = *(void *)v34 + 4 * v158;
                                                                          int v185 = *(_DWORD *)(v184 + 688);
                                                                          *(_DWORD *)(v184 + 688) = v183;
                                                                          uint64_t v186 = *(void *)(v160 + 40);
                                                                          if (*(void *)v186
                                                                            || *(_DWORD *)(v186 + 152)
                                                                            || *(_DWORD *)(v186 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v186, v287, *(_DWORD *)(v186 + 52), 0x3FFFFFFFFFFLL, 32, v185, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v158
                                                                                    + 396) = 0;
                                                                          int v285 = v300 + 396;
                                                                          uint64_t v187 = *((void *)this + 33) + 4 * v158;
                                                                          int v188 = *(_DWORD *)(v187 + 396);
                                                                          *(_DWORD *)(v187 + 396) = 0;
                                                                          *(_DWORD *)(*((void *)this + 33)
                                                                                    + 4 * v158
                                                                                    + 396) ^= 0xFFFFFF80;
                                                                          uint64_t v189 = *((void *)this + 33) + 4 * v158;
                                                                          int v190 = *(_DWORD *)(v189 + 396);
                                                                          *(_DWORD *)(v189 + 396) = v188;
                                                                          int v191 = (void *)((char *)this
                                                                                          + 176 * v161
                                                                                          + 4784);
                                                                          if (*v191
                                                                            || *((_DWORD *)this + 44 * v294 + 1234)
                                                                            || *((_DWORD *)this + 44 * v294 + 1235))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)this + 22 * v294 + 598, v285, 0, 0xFFFFFFFFLL, 7, v190, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 752) = 0;
                                                                          int v284 = v300 + 752;
                                                                          uint64_t v192 = *(void *)v34 + 4 * v158;
                                                                          int v193 = *(_DWORD *)(v192 + 752);
                                                                          *(_DWORD *)(v192 + 752) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 752) ^= 0x3FFu;
                                                                          uint64_t v194 = *(void *)v34 + 4 * v158;
                                                                          int v195 = *(_DWORD *)(v194 + 752);
                                                                          *(_DWORD *)(v194 + 752) = v193;
                                                                          if (*v191
                                                                            || *((_DWORD *)this + 44 * v294 + 1234)
                                                                            || *((_DWORD *)this + 44 * v294 + 1235))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, v191, v284, 0, 0x3FFFFFFFFFFLL, 32, v195, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                          int v196 = v300 + 460;
                                                                          uint64_t v197 = *(void *)v34 + 4 * v158;
                                                                          int v198 = *(_DWORD *)(v197 + 460);
                                                                          *(_DWORD *)(v197 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 460) ^= 0xFFFFFF80;
                                                                          uint64_t v199 = *(void *)v34 + 4 * v158;
                                                                          int v200 = *(_DWORD *)(v199 + 460);
                                                                          *(_DWORD *)(v199 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v198;
                                                                          uint64_t v201 = *(void *)(v160 + 40);
                                                                          if (*(void *)v201
                                                                            || *(_DWORD *)(v201 + 152)
                                                                            || *(_DWORD *)(v201 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v201, v196, *(_DWORD *)(v201 + 56), 0xFFFFFFFFLL, 7, v200, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 816) = 0;
                                                                          int v202 = v300 + 816;
                                                                          uint64_t v203 = *(void *)v34 + 4 * v158;
                                                                          int v204 = *(_DWORD *)(v203 + 816);
                                                                          *(_DWORD *)(v203 + 816) = 0;
                                                                          *(_DWORD *)(*(void *)v34 + 4 * v158 + 816) ^= 0x3FFu;
                                                                          uint64_t v205 = *(void *)v34 + 4 * v158;
                                                                          int v206 = *(_DWORD *)(v205 + 816);
                                                                          *(_DWORD *)(v205 + 816) = v204;
                                                                          uint64_t v207 = *(void *)(v160 + 40);
                                                                          if (*(void *)v207
                                                                            || *(_DWORD *)(v207 + 152)
                                                                            || *(_DWORD *)(v207 + 156))
                                                                          {
                                                                            uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v207, v202, *(_DWORD *)(v207 + 56), 0x3FFFFFFFFFFLL, 32, v206, 4);
                                                                            if (result) {
                                                                              return result;
                                                                            }
                                                                          }
                                                                          if (*(_DWORD *)(*((void *)this + 32)
                                                                                         + 2648) == 1)
                                                                          {
                                                                            uint64_t v208 = *(void *)v34 + 4 * v158;
                                                                            int v209 = *(_DWORD *)(v208 + 332);
                                                                            *(_DWORD *)(v208 + 332) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 332) ^= 0xFFFFFF80;
                                                                            uint64_t v210 = *(void *)v34 + 4 * v158;
                                                                            int v211 = *(_DWORD *)(v210 + 332);
                                                                            *(_DWORD *)(v210 + 332) = v209;
                                                                            uint64_t v212 = *(void *)(v160 + 40);
                                                                            if (*(void *)v212
                                                                              || *(_DWORD *)(v212 + 152)
                                                                              || *(_DWORD *)(v212 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v212, v288, *(_DWORD *)(v212 + 52), 0xFFFFFFFFLL, 7, v211, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v213 = *(void *)v34 + 4 * v158;
                                                                            int v214 = *(_DWORD *)(v213 + 688);
                                                                            *(_DWORD *)(v213 + 688) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 688) ^= 0x3FFu;
                                                                            uint64_t v215 = *(void *)v34 + 4 * v158;
                                                                            int v216 = *(_DWORD *)(v215 + 688);
                                                                            *(_DWORD *)(v215 + 688) = v214;
                                                                            uint64_t v217 = *(void *)(v160 + 40);
                                                                            if (*(void *)v217
                                                                              || *(_DWORD *)(v217 + 152)
                                                                              || *(_DWORD *)(v217 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v217, v287, *(_DWORD *)(v217 + 52), 0x3FFFFFFFFFFLL, 32, v216, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v218 = *(void *)v34 + 4 * v158;
                                                                            int v219 = *(_DWORD *)(v218 + 460);
                                                                            *(_DWORD *)(v218 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 460) ^= 0xFFFFFF80;
                                                                            uint64_t v220 = *(void *)v34 + 4 * v158;
                                                                            int v221 = *(_DWORD *)(v220 + 460);
                                                                            *(_DWORD *)(v220 + 46pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v219;
                                                                            uint64_t v222 = *(void *)(v160 + 40);
                                                                            if (*(void *)v222
                                                                              || *(_DWORD *)(v222 + 152)
                                                                              || *(_DWORD *)(v222 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v222, v196, *(_DWORD *)(v222 + 56), 0xFFFFFFFFLL, 7, v221, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v223 = *(void *)v34 + 4 * v158;
                                                                            int v224 = *(_DWORD *)(v223 + 816);
                                                                            *(_DWORD *)(v223 + 816) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 816) ^= 0x3FFu;
                                                                            uint64_t v225 = *(void *)v34 + 4 * v158;
                                                                            int v226 = *(_DWORD *)(v225 + 816);
                                                                            *(_DWORD *)(v225 + 816) = v224;
                                                                            uint64_t v227 = *(void *)(v160 + 40);
                                                                            if (*(void *)v227
                                                                              || *(_DWORD *)(v227 + 152)
                                                                              || *(_DWORD *)(v227 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v227, v202, *(_DWORD *)(v227 + 56), 0x3FFFFFFFFFFLL, 32, v226, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v228 = *(void *)v34 + 4 * v158;
                                                                            int v229 = *(_DWORD *)(v228 + 268);
                                                                            *(_DWORD *)(v228 + 268) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 268) ^= 0xFFFFFF80;
                                                                            uint64_t v230 = *(void *)v34 + 4 * v158;
                                                                            int v231 = *(_DWORD *)(v230 + 268);
                                                                            *(_DWORD *)(v230 + 268) = v229;
                                                                            uint64_t v232 = *(void *)(v160 + 40);
                                                                            if (*(void *)v232
                                                                              || *(_DWORD *)(v232 + 152)
                                                                              || *(_DWORD *)(v232 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v232, v292, *(_DWORD *)(v232 + 64), 0xFFFFFFFFLL, 7, v231, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v233 = *(void *)v34 + 4 * v158;
                                                                            int v234 = *(_DWORD *)(v233 + 624);
                                                                            *(_DWORD *)(v233 + 624) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 624) ^= 0x3FFu;
                                                                            uint64_t v235 = *(void *)v34 + 4 * v158;
                                                                            int v236 = *(_DWORD *)(v235 + 624);
                                                                            *(_DWORD *)(v235 + 624) = v234;
                                                                            uint64_t v237 = *(void *)(v160 + 40);
                                                                            if (*(void *)v237
                                                                              || *(_DWORD *)(v237 + 152)
                                                                              || *(_DWORD *)(v237 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v237, v289, *(_DWORD *)(v237 + 64), 0x3FFFFFFFFFFLL, 32, v236, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v238 = *(void *)v34 + 4 * v158;
                                                                            int v239 = *(_DWORD *)(v238 + 396);
                                                                            *(_DWORD *)(v238 + 396) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 396) ^= 0xFFFFFF80;
                                                                            uint64_t v240 = *(void *)v34 + 4 * v158;
                                                                            int v241 = *(_DWORD *)(v240 + 396);
                                                                            *(_DWORD *)(v240 + 396) = v239;
                                                                            uint64_t v242 = *(void *)(v160 + 40);
                                                                            if (*(void *)v242
                                                                              || *(_DWORD *)(v242 + 152)
                                                                              || *(_DWORD *)(v242 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v242, v285, *(_DWORD *)(v242 + 68), 0xFFFFFFFFLL, 7, v241, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                            uint64_t v243 = *(void *)v34 + 4 * v158;
                                                                            int v244 = *(_DWORD *)(v243 + 752);
                                                                            *(_DWORD *)(v243 + 752) = 0;
                                                                            *(_DWORD *)(*(void *)v34 + 4 * v158 + 752) ^= 0x3FFu;
                                                                            uint64_t v245 = *(void *)v34 + 4 * v158;
                                                                            int v246 = *(_DWORD *)(v245 + 752);
                                                                            *(_DWORD *)(v245 + 752) = v244;
                                                                            uint64_t v247 = *(void *)(v160 + 40);
                                                                            if (*(void *)v247
                                                                              || *(_DWORD *)(v247 + 152)
                                                                              || *(_DWORD *)(v247 + 156))
                                                                            {
                                                                              uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v247, v284, *(_DWORD *)(v247 + 68), 0x3FFFFFFFFFFLL, 32, v246, 4);
                                                                              if (result) {
                                                                                return result;
                                                                              }
                                                                            }
                                                                          }
                                                                          ++v158;
                                                                        }
                                                                        while (v158 != v295);
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      *(_DWORD *)(v16 + 52) |= 0x2000u;
                                                                      *((_DWORD *)this + v299 + 116) = 1;
                                                                      *(_DWORD *)(*((void *)this + 33) + 204) = 0;
                                                                    }
                                                                    *(_DWORD *)(*(void *)v34 + 524) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 88pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 528) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 884) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 532) = 0;
                                                                    *(_DWORD *)(*(void *)v34 + 536) = 0;
                                                                    if (v297)
                                                                    {
                                                                      uint64_t v248 = *((void *)this + 32);
                                                                      unsigned int v249 = *(unsigned __int8 *)(v248 + 3004);
                                                                      if (*(unsigned char *)(v248 + 3004))
                                                                      {
                                                                        unsigned int v249 = *(_DWORD *)(v248 + 3016);
                                                                        unsigned int v298 = *(_DWORD *)(v248 + 3020);
                                                                      }
                                                                      else
                                                                      {
                                                                        unsigned int v298 = 0;
                                                                      }
                                                                      uint64_t v250 = *(void *)(v248 + 3656);
                                                                      uint64_t v301 = *(unsigned int *)(v250 + 56);
                                                                      unint64_t v251 = *(unsigned int *)(v250 + 52)
                                                                           + (unint64_t)v249;
                                                                      uint64_t v252 = *((void *)this + 33);
                                                                      int v253 = *(_DWORD *)(v252 + 524);
                                                                      *(_DWORD *)(v252 + 524) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 524) ^= 0xFFFFFFC0;
                                                                      uint64_t v254 = *((void *)this + 33);
                                                                      int v255 = *(_DWORD *)(v254 + 524);
                                                                      *(_DWORD *)(v254 + 524) = v253;
                                                                      uint64_t v256 = *(void *)(*((void *)this + 32) + 3656);
                                                                      unint64_t v257 = HIDWORD(v251);
                                                                      if (*(void *)v256
                                                                        || *(_DWORD *)(v256 + 152)
                                                                        || *(_DWORD *)(v256 + 156))
                                                                      {
                                                                        if (v257
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1246;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v256, 524, v251, 0xFFFFFFFFLL, 6, v255, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      uint64_t v258 = *((void *)this + 33);
                                                                      int v259 = *(_DWORD *)(v258 + 880);
                                                                      *(_DWORD *)(v258 + 88pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 880) ^= 0x3FFu;
                                                                      uint64_t v260 = *((void *)this + 33);
                                                                      int v261 = *(_DWORD *)(v260 + 880);
                                                                      *(_DWORD *)(v260 + 88pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = v259;
                                                                      uint64_t v262 = *(void *)(*((void *)this + 32) + 3656);
                                                                      if (*(void *)v262
                                                                        || *(_DWORD *)(v262 + 152)
                                                                        || *(_DWORD *)(v262 + 156))
                                                                      {
                                                                        if (v257
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1248;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v262, 880, v251, 0x3FFFFFFFFFFLL, 32, v261, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      unint64_t v263 = v301 + v298;
                                                                      uint64_t v264 = *((void *)this + 33);
                                                                      int v265 = *(_DWORD *)(v264 + 528);
                                                                      *(_DWORD *)(v264 + 528) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 528) ^= 0xFFFFFFC0;
                                                                      uint64_t v266 = *((void *)this + 33);
                                                                      int v267 = *(_DWORD *)(v266 + 528);
                                                                      *(_DWORD *)(v266 + 528) = v265;
                                                                      uint64_t v268 = *(void *)(*((void *)this + 32) + 3656);
                                                                      unint64_t v269 = HIDWORD(v263);
                                                                      if (*(void *)v268
                                                                        || *(_DWORD *)(v268 + 152)
                                                                        || *(_DWORD *)(v268 + 156))
                                                                      {
                                                                        if (v269
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1251;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v268, 528, v263, 0xFFFFFFFFLL, 6, v267, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      uint64_t v270 = *((void *)this + 33);
                                                                      int v271 = *(_DWORD *)(v270 + 884);
                                                                      *(_DWORD *)(v270 + 884) = 0;
                                                                      *(_DWORD *)(*((void *)this + 33) + 884) ^= 0x3FFu;
                                                                      uint64_t v272 = *((void *)this + 33);
                                                                      int v273 = *(_DWORD *)(v272 + 884);
                                                                      *(_DWORD *)(v272 + 884) = v271;
                                                                      uint64_t v274 = *(void *)(*((void *)this + 32) + 3656);
                                                                      if (*(void *)v274
                                                                        || *(_DWORD *)(v274 + 152)
                                                                        || *(_DWORD *)(v274 + 156))
                                                                      {
                                                                        if (v269
                                                                          && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          LODWORD(buf[0]) = 136315394;
                                                                          *(void *)((char *)buf + 4) = "populatePictureRegisters";
                                                                          WORD2(buf[1]) = 1024;
                                                                          *(_DWORD *)((char *)&buf[1] + 6) = 1253;
                                                                          _os_log_impl(&dword_223977000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "AppleAVD: WARNING: %s %d 64->32 conversion problem!", (uint8_t *)buf, 0x12u);
                                                                        }
                                                                        uint64_t result = CAHDec::addToPatcherList((uint64_t)this, (void *)v274, 884, v263, 0x3FFFFFFFFFFLL, 32, v273, 4);
                                                                        if (result) {
                                                                          return result;
                                                                        }
                                                                      }
                                                                      if (v70)
                                                                      {
                                                                        *(_DWORD *)(*((void *)this + 33) + 532) = *(_DWORD *)(*((void *)this + 33) + 532) & 0xFFFC003F | (((*(_DWORD *)(*(void *)(*((void *)this + 32) + 3656) + 76) >> 6) & 0xFFF) << 6);
                                                                        uint64_t v275 = (_DWORD *)(*(void *)(*((void *)this + 32) + 3656)
                                                                                        + 80);
                                                                      }
                                                                      else
                                                                      {
                                                                        if (CAHDecCatnipAvc::getSWRStride(this, *(unsigned __int16 *)(v16 + 84)- *(unsigned __int16 *)(v16 + 80)+ 1, *(unsigned __int8 *)(v5 + 2224 * v3 + 6), *(unsigned __int8 *)(v5 + 2224 * v3 + 7), *(_DWORD *)(v5 + 2224 * v3 + 2212)))return 0xFFFFFFFFLL; {
                                                                        *(_DWORD *)(*((void *)this + 33) + 532) = *(_DWORD *)(*((void *)this + 33) + 532) & 0xFFFC003F | (((*((_DWORD *)this + 2964) >> 6) & 0xFFF) << 6);
                                                                        }
                                                                        uint64_t v275 = (_DWORD *)((char *)this + 11860);
                                                                      }
                                                                      *(_DWORD *)(*(void *)v34 + 536) = *(_DWORD *)(*(void *)v34 + 536) & 0xFFF8003F | (((*v275 >> 6) & 0x1FFF) << 6);
                                                                    }
                                                                    uint64_t v276 = *((void *)this + 32);
                                                                    if (*(_DWORD *)(v276 + 2360) != 1) {
                                                                      return 0;
                                                                    }
                                                                    uint64_t v277 = *(void *)v34;
                                                                    *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFFE | *(_DWORD *)(v276 + 2508) & 1;
                                                                    if (*(_DWORD *)(v276 + 2508))
                                                                    {
                                                                      *(_DWORD *)(v277 + 196pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = 0x10000000;
                                                                      *(_DWORD *)(v277 + 1964) = *(_DWORD *)(v276 + 2368);
                                                                      *(_DWORD *)(v277 + 1976) = 0;
                                                                      *(void *)(v277 + 1968) = 0;
                                                                      *(_OWORD *)(v277 + 198pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0) = *(_OWORD *)(v276 + 2372);
                                                                      long long v278 = *(_OWORD *)(v276 + 2404);
                                                                      *(_OWORD *)(v277 + 1996) = *(_OWORD *)(v276 + 2388);
                                                                      *(_OWORD *)(v277 + 2012) = v278;
                                                                    }
                                                                    *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v276 + 2512) & 1));
                                                                    if (*(_DWORD *)(v276 + 2512))
                                                                    {
                                                                      *(_DWORD *)(v277 + 2028) = 0;
                                                                      char v279 = *(_DWORD *)(v276 + 2424);
                                                                      *(_DWORD *)(v277 + 2028) = (*(_DWORD *)(v276 + 2424) & 1) << 22;
                                                                      int v280 = ((*(_DWORD *)(v276 + 2420) & 1) << 23) | ((v279 & 1) << 22) | 0x20000000;
                                                                      *(_DWORD *)(v277 + 2028) = v280;
                                                                      *(_DWORD *)(v277 + 2028) = v280 | (*(_DWORD *)(v276 + 2364) == 0);
                                                                      long long v281 = *(_OWORD *)(v276 + 2428);
                                                                      long long v282 = *(_OWORD *)(v276 + 2444);
                                                                      *(_OWORD *)(v277 + 2064) = *(_OWORD *)(v276 + 2460);
                                                                      *(_OWORD *)(v277 + 2048) = v282;
                                                                      *(_OWORD *)(v277 + 2032) = v281;
                                                                    }
                                                                    *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFFB | (4 * (*(_DWORD *)(v276 + 2516) & 1));
                                                                    *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFF7 | (8 * (*(_DWORD *)(v276 + 2520) & 1));
                                                                    *(_DWORD *)(*(void *)v34 + 984) = *(_DWORD *)(*(void *)v34 + 984) & 0xFFFFFFEF | (16 * (*(_DWORD *)(v276 + 2524) & 1));
                                                                    if (*(_DWORD *)(v276 + 2516))
                                                                    {
                                                                      *(_DWORD *)(v277 + 2084) = 0;
                                                                      if (*(_DWORD *)(v276 + 2476) == 2) {
                                                                        int v283 = 805306368;
                                                                      }
                                                                      else {
                                                                        int v283 = 813694976;
                                                                      }
                                                                      *(_DWORD *)(v277 + 2084) = v283;
                                                                      memcpy((void *)(v277 + 2088), (const void *)(v276 + 2480), 4 * *(unsigned int *)(v276 + 2476));
                                                                      uint64_t result = 0;
                                                                      *(_DWORD *)(v276 + 2516) = 0;
                                                                    }
                                                                    else
                                                                    {
                                                                      return 0;
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}